#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует пустую структуру данных итогов.
// 
// Возвращаемое значение:
//  Структура - Новые данные итогов:
//   * ВРаботе - Число.
//   * Всего - Число.
//   * Выполненных - Число.
//   * Новых - Число.
//   * ОжидающихВыполнения - Число.
//   * ОжидающихПроверки - Число.
//   * ПоступилиОбновления - Число.
//   * Просроченных - Число.
//   * Черновиков - Число.
// 
Функция НовыеДанныеИтогов() Экспорт
	
	ДанныеИтогов = Новый Структура;
	ДанныеИтогов.Вставить("ВРаботе", 0);
	ДанныеИтогов.Вставить("Всего", 0);
	ДанныеИтогов.Вставить("Выполненных", 0);
	ДанныеИтогов.Вставить("Новых", 0);
	ДанныеИтогов.Вставить("ОжидающихВыполнения", 0);
	ДанныеИтогов.Вставить("ОжидающихПроверки", 0);
	ДанныеИтогов.Вставить("ПоступилиОбновления", 0);
	ДанныеИтогов.Вставить("Просроченных", 0);
	ДанныеИтогов.Вставить("Черновиков", 0);
	
	Возврат ДанныеИтогов;
	
КонецФункции

// Формирует структуру параметров отбора данных регистра.
// 
// Возвращаемое значение:
//  Структура - Новые параметры отбора:
//   * РеестрЗадач - Неопределено, СправочникСсылка.РеестрыЗадач - Реестр задач.
//   * Автор - Неопределено, ОпределяемыйТип.УчастникЗадач - Автор.
//   * ВидЗадачи - Неопределено, СправочникСсылка.ВидыЗадач - Вид задачи.
//   * ВидПриложения - Неопределено, ОпределяемыйТип.ВидПриложенияЗадач - Вид приложения.
//   * Проект - Неопределено, СправочникСсылка.Проекты - Проект.
//   * ТипПриложения - Неопределено, ПеречислениеСсылка.ТипыПриложенийЗадач - Тип приложения.
//   * Флаг - Неопределено, ПеречислениеСсылка.ФлагиОбъектов - Флаг
// 
Функция НовыеПараметрыОтбора() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("РеестрЗадач", Неопределено);
	ПараметрыОтбора.Вставить("Автор", Неопределено);
	ПараметрыОтбора.Вставить("ВидЗадачи", Неопределено);
	ПараметрыОтбора.Вставить("ВидПриложения", Неопределено);
	ПараметрыОтбора.Вставить("Проект", Неопределено);
	ПараметрыОтбора.Вставить("ТипПриложения", Неопределено);
	ПараметрыОтбора.Вставить("Флаг", Неопределено);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Рассчитывает итоги.
//
// Параметры:
//  ПараметрыОтбора - См. НовыеПараметрыОтбора.
// 
// Возвращаемое значение:
//  См. НовыеДанныеИтогов.
//
Функция ЗадачиРеестраИтоги(ПараметрыОтбора) Экспорт
	
	Если ПараметрыОтбора.РеестрЗадач = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указан реестр задач.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗадачиРеестраИтоги = НовыеДанныеИтогов();
	
	Отбор = Отбор(ПараметрыОтбора);
	
	Измерения = "РеестрЗадач";
	
	Остатки = Остатки(, Отбор, Измерения);
	
	Если Остатки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ЗадачиРеестраИтоги, Остатки[0]);
	КонецЕсли;
	
	Возврат ЗадачиРеестраИтоги;
	
КонецФункции

// Рассчитывает итоги по измерениям.
//
// Параметры:
//  ПараметрыОтбора - См. НовыеПараметрыОтбора.
//  Измерения - Строка.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ЗадачиРеестраИтогиПоИзмерениям(ПараметрыОтбора, Измерения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Отбор(ПараметрыОтбора);
	
	ЗадачиРеестраИтогиПоИзмерениям = Остатки(, Отбор, Измерения);
	
	Возврат ЗадачиРеестраИтогиПоИзмерениям;
	
КонецФункции

// Обновляет записи по задаче.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//  КэшДанных - Структура,
//              Неопределено.
// 
Процедура ОбновитьПоЗадаче(Задача, КэшДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.Задача");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.КоличествоЗадачПоАвторам.НаборЗаписей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Задача);
		Блокировка.Заблокировать();
		
		РеестрыЗадачи = Справочники.РеестрыЗадач.РеестрыЗадачи(Задача, КэшДанных);
		
		ВостребованныеРеестры = Новый Соответствие;
		Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
			ВостребованныеРеестры.Вставить(РеестрЗадачи, Истина);
		КонецЦикла;
		
		Если РеестрыЗадачи.Количество() > 0 Тогда
			ДанныеРеестра = ДанныеРеестра(Задача, КэшДанных);
		Иначе
			ДанныеРеестра = НовыеДанныеРеестра();
		КонецЕсли;
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Задача);
		
		НаборЗаписей.Прочитать();
		
		СтарыеСтрокиРеестров = Новый Соответствие;
		Для Каждого СтараяЗапись Из НаборЗаписей Цикл
			СтарыеСтрокиРеестров[СтараяЗапись.РеестрЗадач] = СтараяЗапись;
		КонецЦикла;
		
		// Добавим новые и обновим существующие записи.
		Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
			
			СтараяСтрокаРеестра = СтарыеСтрокиРеестров[РеестрЗадачи];
			ЭтоНовыйРеестр = СтараяСтрокаРеестра = Неопределено;
			Если ЭтоНовыйРеестр Тогда
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.РеестрЗадач = РеестрЗадачи;
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеРеестра);
				
			Иначе
				
				ЗаполнитьЗначенияСвойств(СтараяСтрокаРеестра, ДанныеРеестра);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Удалим невостребованные записи.
		КоличествоЭлементов = НаборЗаписей.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			
			СтараяСтрокаРеестра = НаборЗаписей[КоличествоЭлементов - Индекс];
			
			ЭтоВостребованныйРеестр =
				ВостребованныеРеестры[СтараяСтрокаРеестра.РеестрЗадач] = Истина;
			ЭтоАктуальнаяДатаРеестра =
				СтараяСтрокаРеестра.Период = ДанныеРеестра.Период;
			
			Если ЭтоВостребованныйРеестр И ЭтоАктуальнаяДатаРеестра Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей.Удалить(СтараяСтрокаРеестра);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Определяет кэшируемые в данном регистре реквизиты задач.
//
// Возвращаемое значение:
//  Строка - Кэшируемые в данном регистре реквизиты задач.
//
Функция КэшируемыеРеквизитыЗадач() Экспорт
	
	Возврат "Автор, ВидЗадачи, ВидПриложения, Дата, ДатаВыполнения, ДатаНачала, ДатаНачалаПлан,
		|ДатаОтмены, ДатаСоздания, Проведен, Проект, СостояниеЗадачи, Срок, ТипПриложения, Флаг";
	
КонецФункции

// Помечает задачи просроченными.
//
Процедура ПометитьПросроченныеЗадачи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КоличествоЗадачПоАвторам.Регистратор КАК Задача
		|ИЗ
		|	РегистрНакопления.КоличествоЗадачПоАвторам КАК КоличествоЗадачПоАвторам
		|ГДЕ
		|	КоличествоЗадачПоАвторам.МожетБытьПросрочена
		|	И КоличествоЗадачПоАвторам.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи)
		|	И КоличествоЗадачПоАвторам.Срок <= &ТекущаяДатаСеанса
		|	И КоличествоЗадачПоАвторам.Срок <> ДАТАВРЕМЯ(1, 1, 1)");
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьПоЗадаче(Выборка.Задача);
	КонецЦикла;
	
КонецПроцедуры

// Данные реестра.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//  КэшДанных - Структура,
//              Неопределено.
// 
// Возвращаемое значение:
//  См. НовыеДанныеРеестра.
// 
Функция ДанныеРеестра(Задача, КэшДанных = Неопределено) Экспорт
	
	Если КэшДанных <> Неопределено И КэшДанных.Свойство("ДанныеЗадачи") Тогда
		РеквизитыЗадачи = КэшДанных.ДанныеЗадачи;
	Иначе
		КэшируемыеРеквизитыЗадач = КэшируемыеРеквизитыЗадач();
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, КэшируемыеРеквизитыЗадач);
	КонецЕсли;
	
	ДанныеРеестра = НовыеДанныеРеестра();
	ДанныеРеестра.Регистратор = Задача;
	
	ОбновитьДанныеРеестраПоЗадаче(ДанныеРеестра, РеквизитыЗадачи);
	
	Возврат ДанныеРеестра;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	Если ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("ДокументСсылка.Задача") Тогда
		
		ОбновитьПоЗадаче(Выборка.КлючВлияющихДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует пустую структуру данных реестра.
// 
// Возвращаемое значение:
//  Структура - Новые данные реестра:
//   * Период - Дата.
//   * Регистратор - ДокументСсылка.Задача.
//   * ВидДвижения - ВидДвиженияНакопления.
//   * Автор - ОпределяемыйТип.УчастникЗадач, Неопределено - Автор.
//   * ВидЗадачи - СправочникСсылка.ВидыЗадач.
//   * ВидПриложения - ОпределяемыйТип.ВидПриложенияЗадач, Неопределено - Вид приложения.
//   * Проект - СправочникСсылка.Проекты.
//   * ТипПриложения - ПеречислениеСсылка.ТипыПриложенийЗадач.
//   * Флаг - ПеречислениеСсылка.ФлагиОбъектов.
//   * ВРаботе - Число.
//   * Всего - Число.
//   * Выполненных - Число.
//   * Новых - Число.
//   * ОжидающихВыполнения - Число.
//   * ОжидающихПроверки - Число.
//   * Просроченных - Число.
//   * Черновиков - Число.
//   * МожетБытьПросрочена - Булево.
//   * Срок - Дата.
// 
Функция НовыеДанныеРеестра()
	
	ДанныеРеестра = Новый Структура;
	ДанныеРеестра.Вставить("Период", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("Регистратор", Документы.Задача.ПустаяСсылка());
	ДанныеРеестра.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
	ДанныеРеестра.Вставить("Автор", Неопределено);
	ДанныеРеестра.Вставить("ВидЗадачи", Справочники.ВидыЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("ВидПриложения", Неопределено);
	ДанныеРеестра.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	ДанныеРеестра.Вставить("ТипПриложения", Перечисления.ТипыПриложенийЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("Флаг", Перечисления.ФлагиОбъектов.ПустаяСсылка());
	ДанныеРеестра.Вставить("ВРаботе", 0);
	ДанныеРеестра.Вставить("Всего", 0);
	ДанныеРеестра.Вставить("Выполненных", 0);
	ДанныеРеестра.Вставить("Новых", 0);
	ДанныеРеестра.Вставить("ОжидающихВыполнения", 0);
	ДанныеРеестра.Вставить("ОжидающихПроверки", 0);
	ДанныеРеестра.Вставить("Просроченных", 0);
	ДанныеРеестра.Вставить("Черновиков", 0);
	ДанныеРеестра.Вставить("МожетБытьПросрочена", Ложь);
	ДанныеРеестра.Вставить("Срок", Дата(1, 1, 1));
	
	Возврат ДанныеРеестра;
	
КонецФункции

// Обновляет данные задачи.
//
// Параметры:
//  ДанныеРеестра - См. НовыеДанныеРеестра.
//  РеквизитыЗадачи - Структура - Реквизиты задачи. См. КэшируемыеРеквизитыЗадач.
//
Процедура ОбновитьДанныеРеестраПоЗадаче(ДанныеРеестра, РеквизитыЗадачи)
	
	ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(РеквизитыЗадачи.СостояниеЗадачи);
	
	ВРаботе = Перечисления.ВидыСостоянийЗадач.ЭтоЗадачаВРаботе(ВидСостоянияЗадачи);
	Выполнена = Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи);
	Новая = Перечисления.ВидыСостоянийЗадач.ЭтоНоваяЗадача(ВидСостоянияЗадачи);
	ОжидаетВыполнения = Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяВыполненияЗадача(ВидСостоянияЗадачи);
	ОжидаетПроверки = Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(ВидСостоянияЗадачи);
	ЭтоЧерновик = Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи);
	
	Период = Документы.Задача.Период(
		РеквизитыЗадачи.ДатаСоздания,
		РеквизитыЗадачи.Дата);
	Просрочена = Документы.Задача.Просрочена(
		РеквизитыЗадачи.Срок,
		РеквизитыЗадачи.СостояниеЗадачи,
		РеквизитыЗадачи.ДатаВыполнения);
	
	ДанныеРеестра.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	ДанныеРеестра.Период = Период;
	ДанныеРеестра.Автор = РеквизитыЗадачи.Автор;
	ДанныеРеестра.ВидЗадачи = РеквизитыЗадачи.ВидЗадачи;
	ДанныеРеестра.ВидПриложения = РеквизитыЗадачи.ВидПриложения;
	ДанныеРеестра.ТипПриложения = РеквизитыЗадачи.ТипПриложения;
	ДанныеРеестра.Проект = РеквизитыЗадачи.Проект;
	ДанныеРеестра.Флаг = РеквизитыЗадачи.Флаг;
	
	ДанныеРеестра.Срок = РеквизитыЗадачи.Срок;
	ДанныеРеестра.МожетБытьПросрочена =
		ОжидаетВыполнения
		И ЗначениеЗаполнено(РеквизитыЗадачи.Срок)
		И Не Просрочена;
	
	ДанныеРеестра.Всего = 1;
	ДанныеРеестра.ВРаботе = ?(ВРаботе, 1, 0);
	ДанныеРеестра.Выполненных = ?(Выполнена, 1, 0);
	ДанныеРеестра.Новых = ?(Новая, 1, 0);
	ДанныеРеестра.ОжидающихВыполнения = ?(ОжидаетВыполнения, 1, 0);
	ДанныеРеестра.ОжидающихПроверки = ?(ОжидаетПроверки, 1, 0);
	ДанныеРеестра.Просроченных = ?(Просрочена И ОжидаетВыполнения, 1, 0);
	ДанныеРеестра.Черновиков = ?(ЭтоЧерновик, 1, 0);
	
КонецПроцедуры

// Формирует отбор по параметрам отбора.
// 
// Параметры:
//  ПараметрыОтбора - См. НовыеПараметрыОтбора.
// 
// Возвращаемое значение:
//  Структура - Установленный отбор.
// 
Функция Отбор(ПараметрыОтбора)
	
	Отбор = Новый Структура;
	
	НовыеПараметрыОтбора = НовыеПараметрыОтбора();
	ЗаполнитьЗначенияСвойств(НовыеПараметрыОтбора, ПараметрыОтбора);
	
	Для Каждого КлючИЗначение Из НовыеПараметрыОтбора Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти

#КонецЕсли