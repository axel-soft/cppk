#Область СлужебныеПроцедурыИФункции

// Извлекает одно новое сообщение для указанной в параметре externalSystemID интегрированной системы и возвращает
// его как объект класса DMMessage.
// Если новых сообщений нет, то возвращается объект класса DMOK.
// Если при выполнении этой операции произошла ошибка, то возвращается объект класса DMError.
//
// Параметры:
//   ИдентификаторУзлаИС - Строка - идентификатор узла плана обмена ИнтегрированныеСистемы.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO, потомок DMResponse.
//
Функция Get(ИдентификаторУзлаИС)
	
	Попытка
		
		Узел = ПланыОбмена.ИнтегрированныеСистемы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторУзлаИС));
		Если Не ЗначениеЗаполнено(Узел) Или Не ОбщегоНазначения.СсылкаСуществует(Узел) Тогда
			ЗаголовокОшибки = НСтр("ru = 'Ошибка при обработке сообщения'");
			ТекстОшибкиМассив = Новый Массив;
			ТекстОшибкиМассив.Добавить(НСтр("ru = 'Интегрированная система не найдена.'"));
			ТекстОшибкиМассив.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор узла: %1'"), ИдентификаторУзлаИС));
			Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
				ЗаголовокОшибки,
				СтрСоединить(ТекстОшибкиМассив, Символы.ПС));
		КонецЕсли;
		
		ИдентификаторСообщения = Неопределено;
		МоментВремени = Неопределено;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОчередьСообщенийВИнтегрированныеСистемы.Идентификатор,
			|	ОчередьСообщенийВИнтегрированныеСистемы.МоментВремени,
			|	ОчередьСообщенийВИнтегрированныеСистемы.Данные
			|ИЗ
			|	РегистрСведений.ОчередьСообщенийВИнтегрированныеСистемы КАК ОчередьСообщенийВИнтегрированныеСистемы
			|ГДЕ
			|	ОчередьСообщенийВИнтегрированныеСистемы.ИнтегрированнаяСистема = &Узел
			|	И ОчередьСообщенийВИнтегрированныеСистемы.КоличествоПопытокОтправки <= 3
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОчередьСообщенийВИнтегрированныеСистемы.МоментВремени");
		Запрос.УстановитьПараметр("Узел", Узел);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ИдентификаторСообщения = Выборка.Идентификатор;
			МоментВремени = Выборка.МоментВремени;
			
			СтрокаXML = Выборка.Данные.Получить();
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
			
			СообщениеXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			
			РегистрыСведений.ИсторияОтправкиСообщенийВИнтегрированныеСистемы.ПеренестиСообщениеВИсторию(
				Узел,
				МоментВремени,
				ИдентификаторСообщения);
			
			Возврат СообщениеXDTO;
		Иначе
			Возврат ОбработкаЗапросовXDTO.СоздатьОбъект("DMOK");
		КонецЕсли;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(НСтр("ru = 'Ошибка при обработке сообщения'"));
		
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = СтрШаблон(НСтр("ru='Описание=%1;ИмяМодуля=%2;НомерСтроки=%3;ИсходнаяСтрока=%4.'"),
			Инфо.Описание,
			Инфо.ИмяМодуля,
			Инфо.НомерСтроки,
			Инфо.ИсходнаяСтрока);
		
		Если ИдентификаторСообщения <> Неопределено Тогда
			МенеджерЗаписи = РегистрыСведений.ОчередьСообщенийВИнтегрированныеСистемы.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ИнтегрированнаяСистема = Узел;
			МенеджерЗаписи.МоментВремени = МоментВремени;
			МенеджерЗаписи.Идентификатор = ИдентификаторСообщения;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.КоличествоПопытокОтправки = МенеджерЗаписи.КоличествоПопытокОтправки + 1;
			МенеджерЗаписи.ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(Инфо);
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Обрабатывает переданное сообщение.
// Возвращает DMOK в случае успешной обработки сообщения.
// Если при выполнении этой операции произошла ошибка, то возвращается объект класса DMError.
//
// Параметры:
//   Сообщение - Строка - сообщение, которое требуется обработать.
//   ИдентификаторУзлаИС - Строка - идентификатор узла плана обмена ИнтегрированныеСистемы.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO, потомок DMResponse.
//
Функция Put(Сообщение, ИдентификаторУзлаИС)
	
	Попытка
		
		Узел = ПланыОбмена.ИнтегрированныеСистемы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторУзлаИС));
		Если Не ЗначениеЗаполнено(Узел) Или Не ОбщегоНазначения.СсылкаСуществует(Узел) Тогда
			ЗаголовокОшибки = НСтр("ru = 'Ошибка при обработке сообщения'");
			ТекстОшибкиМассив = Новый Массив;
			ТекстОшибкиМассив.Добавить(НСтр("ru = 'Интегрированная система не найдена.'"));
			ТекстОшибкиМассив.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор узла: %1'"), ИдентификаторУзлаИС));
			Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
				ЗаголовокОшибки,
				СтрСоединить(ТекстОшибкиМассив, Символы.ПС));
		КонецЕсли;
		
		СтрокаXMLСообщение = "";
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Сообщение, , , , НазначениеТипаXML.Явное);
		СтрокаXMLСообщение = ЗаписьXML.Закрыть();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXMLСообщение);
		СообщениеXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		ОтветноеСообщение = ОбработкаЗапросовXDTO.ОбработатьУниверсальноеСообщение(СообщениеXDTO);
		ОтветноеСообщение.initialMessageID = СообщениеXDTO.messageID;
		ИдентификаторОтветногоСообщения = Новый УникальныйИдентификатор;
		ОтветноеСообщение.messageID = Строка(ИдентификаторОтветногоСообщения);
		
		СтрокаXMLОтветноеСообщение = "";
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветноеСообщение, , , , НазначениеТипаXML.Явное);
		СтрокаXMLОтветноеСообщение = ЗаписьXML.Закрыть();
		
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.ОчередьСообщенийВИнтегрированныеСистемы.ДобавитьСообщение(
			Узел,
			Новый ХранилищеЗначения(СтрокаXMLОтветноеСообщение),
			ИдентификаторОтветногоСообщения);
		УстановитьПривилегированныйРежим(Ложь);
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOK");
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(НСтр("ru = 'Ошибка при обработке сообщения'"));
		
		Инфо = ИнформацияОбОшибке();
		Ошибка.Description = СтрШаблон(НСтр("ru='Описание=%1;ИмяМодуля=%2;НомерСтроки=%3;ИсходнаяСтрока=%4.'"),
			Инфо.Описание,
			Инфо.ИмяМодуля,
			Инфо.НомерСтроки,
			Инфо.ИсходнаяСтрока);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти