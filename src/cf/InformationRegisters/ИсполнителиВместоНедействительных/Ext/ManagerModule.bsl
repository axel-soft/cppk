#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет запись в регистр.
// 
// Параметры:
//  НедействительныйИсполнитель - ОпределяемыйТип.УчастникЗадач.
//  ИсполнительВместо - ОпределяемыйТип.УчастникЗадач.
// 
Процедура Добавить(НедействительныйИсполнитель, ИсполнительВместо) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НедействительныйИсполнитель.Установить(НедействительныйИсполнитель);
	НаборЗаписей.Отбор.ИсполнительВместо.Установить(ИсполнительВместо);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.НедействительныйИсполнитель = НедействительныйИсполнитель;
	НоваяЗапись.ИсполнительВместо= ИсполнительВместо;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Определяет, какие исполнители назначены вместо недействительного.
// 
// Параметры:
//  НедействительныйИсполнитель - ОпределяемыйТип.УчастникЗадач.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.УчастникЗадач - Исполнители, назначенные вместо недействительного.
// 
Функция ИсполнителиВместо(НедействительныйИсполнитель) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИсполнителиВместоНедействительных.ИсполнительВместо КАК ИсполнительВместо
		|ИЗ
		|	РегистрСведений.ИсполнителиВместоНедействительных КАК ИсполнителиВместоНедействительных
		|ГДЕ
		|	ИсполнителиВместоНедействительных.НедействительныйИсполнитель В (&НедействительныйИсполнитель)");
	
	Запрос.УстановитьПараметр("НедействительныйИсполнитель", НедействительныйИсполнитель);
	
	ИсполнителиВместо = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИсполнительВместо");
	
	Возврат ИсполнителиВместо;
	
КонецФункции

// Определяет исполнителей, задачи которых переданы руководителям.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.УчастникЗадач - Исполнители, задачи которых переданы руководителям.
//  
Функция НедействительныеИсполнители() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиВместоНедействительных.НедействительныйИсполнитель КАК НедействительныйИсполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиВместоНедействительных КАК ИсполнителиВместоНедействительных");
	
	НедействительныеИсполнители =
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НедействительныйИсполнитель");
	
	Возврат НедействительныеИсполнители;
	
КонецФункции


// Определяет переданных исполнителей.
// 
// Параметры:
//  ИсполнителиВместо - Массив из ОпределяемыйТип.УчастникЗадач.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.УчастникЗадач - Переданные исполнители.
//  
Функция ПереданныеИсполнители(ИсполнителиВместо) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИсполнителиВместоНедействительных.НедействительныйИсполнитель КАК НедействительныйИсполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиВместоНедействительных КАК ИсполнителиВместоНедействительных
		|ГДЕ
		|	ИсполнителиВместоНедействительных.ИсполнительВместо В (&ИсполнителиВместо)");
	
	Запрос.УстановитьПараметр("ИсполнителиВместо", ИсполнителиВместо);
	
	ПереданныеИсполнители = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НедействительныйИсполнитель");
	
	Возврат ПереданныеИсполнители;
	
КонецФункции

// Удаляет запись в регистре.
// 
// Параметры:
//  НедействительныйИсполнитель - ОпределяемыйТип.УчастникЗадач.
//  ИсполнительВместо - ОпределяемыйТип.УчастникЗадач.
// 
Процедура Удалить(НедействительныйИсполнитель, ИсполнительВместо) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НедействительныйИсполнитель.Установить(НедействительныйИсполнитель);
	НаборЗаписей.Отбор.ИсполнительВместо.Установить(ИсполнительВместо);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет недействительного исполнителя.
// 
// Параметры:
//  НедействительныйИсполнитель - ОпределяемыйТип.УчастникЗадач.
//  
Процедура УдалитьНедействительногоИсполнителя(НедействительныйИсполнитель) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НедействительныйИсполнитель.Установить(НедействительныйИсполнитель);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Конструктор параметров обновления данных кэширующих объектов.
//
// Возвращаемое значение:
//	Структура:
//		* ИсполнителиДляОбновления - Массив Из СправочникСсылка.Сотрудники.
//
Функция ПараметрыОбновленияДанныхКэширующихОбъектов() Экспорт
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("ИсполнителиДляОбновления", Новый Массив);
		
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления данных кэширующих объектов по данным объекта.
//
// Параметры:
//	Объект - РегистрСведенийНаборЗаписей.ИсполнителиВместоНедействительных - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Функция ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияДанныхКэширующихОбъектов();
	
	ИзменяемыеЗаписи = Новый ТаблицаЗначений;
	Если Объект.Отбор.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрСведений.ИсполнителиВместоНедействительных КАК ИсполнителиВместоНедействительных
			|ГДЕ
			|	%Условие%";
		
		Условие = "";
		Разделитель = "";
		
		Для Каждого ЭлементОтбора Из Объект.Отбор Цикл
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаУсловия = СтрШаблон("ИсполнителиВместоНедействительных.%1 = &%2", ЭлементОтбора.Имя, ЭлементОтбора.Имя);
			
			Условие = Условие + Разделитель + СтрокаУсловия;
			
			Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
			
			Разделитель = Символы.ПС + "	И ";
		КонецЦикла;
		
		Если Условие = "" Тогда
			Условие = "ИСТИНА";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Условие%", Условие);
		
		ИзменяемыеЗаписи = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// Старые записи.
	Для Каждого Запись Из ИзменяемыеЗаписи Цикл
		ПараметрыОбновления.ИсполнителиДляОбновления.Добавить(Запись.НедействительныйИсполнитель);
	КонецЦикла;
	
	// Новые записи.
	Для Каждого Запись Из Объект Цикл
		Если ПараметрыОбновления.ИсполнителиДляОбновления.Найти(Запись.НедействительныйИсполнитель) = Неопределено Тогда
			ПараметрыОбновления.ИсполнителиДляОбновления.Добавить(Запись.НедействительныйИсполнитель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет данные зависимых объектов согласно установленным параметрам.
//
// Параметры:
//	Объект - РегистрСведенийНаборЗаписей.ИсполнителиВместоНедействительных.
//	ПараметрыОбновления - см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Процедура ОбновитьДанныеКэширующихОбъектов(Объект, ПараметрыОбновления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ИсполнительДляОбновления Из ПараметрыОбновления.ИсполнителиДляОбновления Цикл
		
		ИзмененияВлияющихДанных = ОбновлениеКэширующихДанных.НовыеИзмененияВлияющихДанных();
		ИзмененияВлияющихДанных.ВариантОбновления = "Исполнитель";
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Документ.ДействиеЗадачи",
			"РегистрСведений.ИсполнителиВместоНедействительных",
			ИсполнительДляОбновления,
			ИзмененияВлияющихДанных);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли