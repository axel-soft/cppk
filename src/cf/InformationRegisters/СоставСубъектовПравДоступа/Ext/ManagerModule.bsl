#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Удаляет все данные регистра и заполняет заново.
// 
// Параметры:
//  Немедленно - Булево - Немедленно
//  ВТранзакции - Булево - В транзакции
Процедура ОбновитьВсеДанные(Немедленно = Ложь, ВТранзакции = Истина) Экспорт
	
	Если Немедленно <> Истина
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			Перечисления.ЗаданияОчередиОбновленияПрав.ЗаполнитьСоставСубъектовПравДоступа, Дата(1, 1, 1), 2);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
	
		// Сотрудники
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Субъект,
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	Неопределено КАК ОбъектОснование,
			|	Сотрудники.ПометкаУдаления КАК СубъектПометкаУдаления,
			|	Сотрудники.ПометкаУдаления КАК СотрудникПометкаУдаления
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники");
		СоставСубъектов = СоздатьНаборЗаписей();
		СоставСубъектов.Загрузить(Запрос.Выполнить().Выгрузить());
		СоставСубъектов.Записать(Истина);
		
		// Роли исполнителей.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолей.РольИсполнителя КАК Субъект,
			|	ИсполнителиРолей.Исполнитель КАК Сотрудник,
			|	ИсполнителиРолей.РольИсполнителя.ПометкаУдаления КАК СубъектПометкаУдаления,
			|	ИсполнителиРолей.Исполнитель.ПометкаУдаления КАК СотрудникПометкаУдаления
			|ИЗ
			|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
			|ГДЕ
			|	ИсполнителиРолей.РольИсполнителя <> ЗНАЧЕНИЕ(Справочник.ПолныеРоли.ПустаяСсылка)");
		СоставСубъектов = СоздатьНаборЗаписей();
		СоставСубъектов.Загрузить(Запрос.Выполнить().Выгрузить());
		СоставСубъектов.Записать(Ложь);
		
		// Проекты
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Проекты.Ссылка КАК Субъект,
			|	Проекты.Руководитель КАК Сотрудник,
			|	Проекты.ПометкаУдаления КАК СубъектПометкаУдаления,
			|	Сотрудники.ПометкаУдаления КАК СотрудникПометкаУдаления
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО Проекты.Руководитель = Сотрудники.Ссылка");
		СоставСубъектов = СоздатьНаборЗаписей();
		СоставСубъектов.Загрузить(Запрос.Выполнить().Выгрузить());
		СоставСубъектов.Записать(Ложь);
		
		// Руководители
		Если Константы.ДобавлятьРуководителямДоступПодчиненных.Получить() Тогда
			ЗаполнитьВсехРуководителей();
		КонецЕсли;
		
		// Делегаты
		ЗаполнитьВсехДелегатов();
		
		Если ВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если ВТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Перезаполняет данные по всем руководителям подразделений.
// 
Процедура ЗаполнитьВсехРуководителей(Знач Подразделения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УдалитьВсехРуководителей(Подразделения);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Субъект,
		|	ПодчиненностьПодразделений.РуководительВышестоящего КАК Сотрудник,
		|	ПодчиненностьПодразделений.Вышестоящее КАК ОбъектОснование,
		|	Сотрудники.ПометкаУдаления КАК СубъектПометкаУдаления,
		|	ПодчиненностьПодразделений.РуководительВышестоящего.ПометкаУдаления КАК СотрудникПометкаУдаления
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|ГДЕ
		|	ПодчиненностьПодразделений.РуководительВышестоящего <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	И ПодчиненностьПодразделений.Вышестоящее В ИЕРАРХИИ (&Подразделения)
		|ИТОГИ
		|ПО
		|	ОбъектОснование");
	
	Если Подразделения = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И ПодчиненностьПодразделений.Вышестоящее В ИЕРАРХИИ (&Подразделения)", "")
	КонецЕсли;
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.УстановитьПараметр("ПустыеСсылкиПользователя", Сотрудники.МассивПустыхСсылокПользователя());
	
	ВыборкаПоПодразделениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		СоставСубъектов = СоздатьНаборЗаписей();
		СоставСубъектов.Отбор.ОбъектОснование.Установить(ВыборкаПоПодразделениям.ОбъектОснование);
		ТаблицаНабора = СоставСубъектов.ВыгрузитьКолонки();
		
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), Выборка);
		КонецЦикла;
		
		РасширитьТаблицуНабораСоставомСубъектовНижнихУровней(ТаблицаНабора, Ложь); //@skip-check query-in-loop
		СоставСубъектов.Загрузить(ТаблицаНабора);
		СоставСубъектов.Записать();
		РасширитьСоставСубъектовВерхнихУровней(ТаблицаНабора, Ложь); //@skip-check query-in-loop
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет всех руководителей из состава субъектов-пользователей.
// 
Процедура УдалитьВсехРуководителей(Подразделения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставСубъектовПравДоступа.ОбъектОснование
		|ИЗ
		|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|ГДЕ
		|	СоставСубъектовПравДоступа.ОбъектОснование ССЫЛКА Справочник.СтруктураПредприятия
		|	И СоставСубъектовПравДоступа.ОбъектОснование В ИЕРАРХИИ (&Подразделения)");
	
	Если Подразделения = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И СоставСубъектовПравДоступа.ОбъектОснование В ИЕРАРХИИ (&Подразделения)", "")
	КонецЕсли;
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	ВыборкаПоПодразделениям = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		СоставСубъектов = РегистрыСведений.СоставСубъектовПравДоступа.СоздатьНаборЗаписей();
		СоставСубъектов.Отбор.ОбъектОснование.Установить(ВыборкаПоПодразделениям.ОбъектОснование);
		СоставСубъектов.Записать();
	КонецЦикла;
	
	УдалитьНеактуальныеЗаписиВерхнихУровней();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Отрабатывает изменения в регистре при изменении пометки удаления подразделения.
//
// Параметры:
//	Источник - СправочникОбъект.СтруктураПредприятия
//
Процедура ИзменениеПометкиУдаленияПодразделения(Источник) Экспорт
	
	Подразделения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка);
	Если Источник.ПометкаУдаления Тогда
		УдалитьВсехРуководителей(Подразделения);
	Иначе
		ЗаполнитьВсехРуководителей(Подразделения);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет/удаляет руководителей в состав субъектов.
//
// Параметры:
//	Источник - СправочникОбъект.Сотрудники
//
Процедура ЗаписьСотрудника(Источник) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьСоставаСубъектов = СоздатьМенеджерЗаписи();
	ЗаписьСоставаСубъектов.Субъект = Источник.Ссылка;
	ЗаписьСоставаСубъектов.Сотрудник = Источник.Ссылка;
	ЗаписьСоставаСубъектов.СубъектПометкаУдаления = Источник.ПометкаУдаления;
	ЗаписьСоставаСубъектов.СотрудникПометкаУдаления = Источник.ПометкаУдаления;
	ЗаписьСоставаСубъектов.Записать();
	
	Если Не Константы.ДобавлятьРуководителямДоступПодчиненных.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставСубъектовПравДоступа.Субъект КАК Сотрудник,
		|	СоставСубъектовПравДоступа.ОбъектОснование КАК Подразделение,
		|	NULL КАК Руководитель,
		|	ЛОЖЬ КАК Актуальна,
		|	СоставСубъектовПравДоступа.СотрудникПометкаУдаления,
		|	СоставСубъектовПравДоступа.СубъектПометкаУдаления
		|ИЗ
		|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СоставСубъектовПравДоступа.Субъект = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО (Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное)
		|		И СоставСубъектовПравДоступа.ОбъектОснование = ПодчиненностьПодразделений.Вышестоящее
		|ГДЕ
		|	СоставСубъектовПравДоступа.Субъект = &Сотрудник
		|	И СоставСубъектовПравДоступа.ОбъектОснование ССЫЛКА Справочник.СтруктураПредприятия
		|	И ПодчиненностьПодразделений.Подчиненное ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	ПодчиненностьПодразделений.Вышестоящее,
		|	ПодчиненностьПодразделений.РуководительВышестоящего,
		|	ИСТИНА,
		|	ПодчиненностьПодразделений.РуководительВышестоящего.ПометкаУдаления,
		|	Сотрудники.ПометкаУдаления
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|		ПО (СоставСубъектовПравДоступа.Субъект = Сотрудники.Ссылка)
		|		И (СоставСубъектовПравДоступа.ОбъектОснование = ПодчиненностьПодразделений.Вышестоящее)
		|ГДЕ
		|	Сотрудники.Ссылка = &Сотрудник
		|	И СоставСубъектовПравДоступа.Субъект ЕСТЬ NULL
		|	И Сотрудники.Ссылка <> ПодчиненностьПодразделений.РуководительВышестоящего
		|	И ПодчиненностьПодразделений.РуководительВышестоящего <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("Сотрудник", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СоставСубъектов = СоздатьНаборЗаписей();
		СоставСубъектов.Отбор.Субъект.Установить(Выборка.Сотрудник);
		СоставСубъектов.Отбор.ОбъектОснование.Установить(Выборка.Подразделение);
		
		Если Выборка.Актуальна Тогда
			
			Запись = СоставСубъектов.Добавить();
			Запись.Субъект = Выборка.Сотрудник;
			Запись.Сотрудник = Выборка.Руководитель;
			Запись.ОбъектОснование = Выборка.Подразделение;
			Запись.СотрудникПометкаУдаления = Выборка.СотрудникПометкаУдаления;
			Запись.СубъектПометкаУдаления = Выборка.СубъектПометкаУдаления; 
			
			СоставСубъектов.Записать();
			
			// Записи верхнего уровня.
			ТаблицаНабора = СоставСубъектов.Выгрузить();
			РасширитьСоставСубъектовВерхнихУровней(ТаблицаНабора, Ложь); //@skip-check query-in-loop
			
			// Записи нижнего уровня.
			ЗапросНижнегоУровня = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СоставСубъектовПравДоступа.Субъект,
				|	&Руководитель КАК Сотрудник,
				|	СоставСубъектовПравДоступа.ОбъектМетаданных,
				|	&ОбъектОснование,
				|	СоставСубъектовПравДоступа.Сотрудник КАК СотрудникОснование,
				|	СоставСубъектовПравДоступа.ОбластьДелегирования,
				|	СоставСубъектовПравДоступа.ИмяОбластиДелегирования,
				|	СоставСубъектовПравДоступа.Субъект.ПометкаУдаления КАК СубъектПометкаУдаления,
				|	&СотрудникПометкаУдаления КАК СотрудникПометкаУдаления
				|ИЗ
				|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
				|ГДЕ
				|	СоставСубъектовПравДоступа.Сотрудник = &Сотрудник
				|	И СоставСубъектовПравДоступа.Субъект <> СоставСубъектовПравДоступа.Сотрудник");
			
			ЗапросНижнегоУровня.УстановитьПараметр("Сотрудник", Выборка.Сотрудник);
			ЗапросНижнегоУровня.УстановитьПараметр("Руководитель", Выборка.Руководитель);
			ЗапросНижнегоУровня.УстановитьПараметр("ОбъектОснование", Выборка.Подразделение);
			ЗапросНижнегоУровня.УстановитьПараметр("СотрудникПометкаУдаления", Выборка.СотрудникПометкаУдаления);
			
			СоставСубъектовНижнегоУровня = СоздатьНаборЗаписей();
			СоставСубъектовНижнегоУровня.Отбор.Сотрудник.Установить(Выборка.Руководитель);
			СоставСубъектовНижнегоУровня.Отбор.ОбъектОснование.Установить(Выборка.Подразделение);
			СоставСубъектовНижнегоУровня.Отбор.СотрудникОснование.Установить(Выборка.Сотрудник);
			
			СоставСубъектовНижнегоУровня.Загрузить(ЗапросНижнегоУровня.Выполнить().Выгрузить());
			СоставСубъектовНижнегоУровня.Записать();
			
		Иначе
			
			СоставСубъектов.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьНеактуальныеЗаписиВерхнихУровней();
	
	ОбновитьПометкиУдаленияПоСотруднику(Источник);
	
КонецПроцедуры

// Добавляет/удаляет исполнителей ролей в состав субъектов.
//
// Параметры:
//	НаборИсточник - РегистрСведенийНаборЗаписей.ИсполнителиРолей
//
Процедура ЗаписьИсполнителейРолей(НаборИсточник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоУдаление = НаборИсточник.Количество() = 0;
	Роль = НаборИсточник.Отбор.РольИсполнителя.Значение;
	
	Если Не ЗначениеЗаполнено(Роль) Тогда
		Если ЭтоУдаление Тогда
			Возврат;
		Иначе
			ВызватьИсключение НСтр("ru = 'Не заполнен отбор по роли исполнителей'");
		КонецЕсли;
	КонецЕсли;
	
	СоставСубъектов = СоздатьНаборЗаписей();
	СоставСубъектов.Отбор.Субъект.Установить(Роль);
	СоставСубъектов.Отбор.ОбъектОснование.Установить(Неопределено);
	СоставСубъектов.Отбор.СотрудникОснование.Установить(Неопределено);
	
	ОтборИсточника = НаборИсточник.Отбор.Исполнитель;
	Если ОтборИсточника.Использование Тогда
		СоставСубъектов.Отбор.Сотрудник.Установить(ОтборИсточника.Значение);
	КонецЕсли;
	
	ТаблицаИсточник = НаборИсточник.Выгрузить();
	ТаблицаИсточник.Свернуть("Исполнитель");
	
	ИсполнителиИРоли = ТаблицаИсточник.ВыгрузитьКолонку("Исполнитель");
	ИсполнителиИРоли.Добавить(Роль);
	ПометкиУдаления = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ИсполнителиИРоли, "ПометкаУдаления");
	
	Для Каждого СтрИсточника Из ТаблицаИсточник Цикл
		Запись = СоставСубъектов.Добавить();
		Запись.Субъект = Роль;
		Запись.Сотрудник = СтрИсточника.Исполнитель;
		Если ПометкиУдаления[Запись.Субъект] <> Неопределено Тогда
			Запись.СубъектПометкаУдаления = ПометкиУдаления[Запись.Субъект].ПометкаУдаления;
		КонецЕсли;
		Если ПометкиУдаления[Запись.Сотрудник] <> Неопределено Тогда
			Запись.СотрудникПометкаУдаления = ПометкиУдаления[Запись.Сотрудник].ПометкаУдаления;
		КонецЕсли;
	КонецЦикла;
	
	СоставСубъектов.Записать();
	ТаблицаНабора = СоставСубъектов.Выгрузить();
	РасширитьСоставСубъектовВерхнихУровней(ТаблицаНабора);
	
	УдалитьНеактуальныеЗаписиВерхнихУровней();
	
КонецПроцедуры

// Вызывается при записи замещающих и помощников.
// Добавляет/удаляет делегата как строку состава субъекта.
// 
// Параметры:
//  Делегирование - СправочникСсылка.ЗамещающиеИПомощники
//
Процедура ЗаписьЗамещения(Знач Делегирование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыЗамещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Делегирование, "Действует, Сотрудник, Замещающий, ВопросыЗамещения");
	
	СоставСубъектов = СоздатьНаборЗаписей();
	
	Если РеквизитыЗамещения.Действует Тогда
		
		ТаблицаНабора = СоставСубъектов.ВыгрузитьКолонки();
		ВопросыЗамещения = РеквизитыЗамещения.ВопросыЗамещения.Выгрузить();
		
		Если ВопросыЗамещения.Найти(Справочники.ОбластиЗамещения.ВсеОбласти) <> Неопределено Тогда
			
			СтрокаТЗ = ТаблицаНабора.Добавить();
			СтрокаТЗ.Субъект = РеквизитыЗамещения.Сотрудник;
			СтрокаТЗ.Сотрудник = РеквизитыЗамещения.Замещающий;
			СтрокаТЗ.ОбъектОснование = Делегирование;
			
		Иначе
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ЗамещающиеИПомощники.Замещающий КАК Сотрудник,
				|	ЗамещающиеИПомощники.Сотрудник КАК Субъект,
				|	ОбластиЗамещения.ИмяПредопределенныхДанных КАК ИмяОбластиДелегирования,
				|	ОбластиЗамещенияСостав.ОбъектМетаданных КАК ОбъектМетаданных,
				|	ЗамещающиеИПомощники.Ссылка КАК ОбъектОснование,
				|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК СотрудникОснование,
				|	ЗамещающиеИПомощникиВопросыЗамещения.Область КАК ОбластьДелегирования,
				|	ЗамещающиеИПомощники.Замещающий.ПометкаУдаления КАК СотрудникПометкаУдаления,
				|	ЗамещающиеИПомощники.Сотрудник.ПометкаУдаления КАК СубъектПометкаУдаления
				|ИЗ
				|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ЗамещающиеИПомощникиВопросыЗамещения
				|		ПО ЗамещающиеИПомощники.Ссылка = ЗамещающиеИПомощникиВопросыЗамещения.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбластиЗамещения.Состав КАК ОбластиЗамещенияСостав
				|		ПО ЗамещающиеИПомощникиВопросыЗамещения.Область = ОбластиЗамещенияСостав.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
				|		ПО ОбластиЗамещенияСостав.ОбъектМетаданных = ИдентификаторыОбъектовМетаданных.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбластиЗамещения КАК ОбластиЗамещения
				|		ПО ОбластиЗамещенияСостав.Ссылка = ОбластиЗамещения.Ссылка
				|ГДЕ
				|	ЗамещающиеИПомощники.Ссылка = &Делегирование
				|	И НЕ ОбластиЗамещения.ПометкаУдаления
				|	И НЕ ИдентификаторыОбъектовМетаданных.ПометкаУдаления");
			Запрос.УстановитьПараметр("Делегирование", Делегирование);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
		РасширитьТаблицуНабораСоставомСубъектовНижнихУровней(ТаблицаНабора, Истина);
		
		Если ТаблицаНабора.Количество() > 10000 Тогда
			// Пишем небольшими порциями, могут быть огромные наборы, создающие долгие блокировки:
			ЗаписатьТаблицуПорциями(ТаблицаНабора);
		Иначе
			// Пишем все разом:
			СоставСубъектов.Отбор.ОбъектОснование.Установить(Делегирование);
			СоставСубъектов.Загрузить(ТаблицаНабора);
			СоставСубъектов.Записать();
		КонецЕсли;
	Иначе
		// Не действует - очистка всех записей по замещению:
		СоставСубъектов.Отбор.ОбъектОснование.Установить(Делегирование);
		СоставСубъектов.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при записи области делегирования.
// Актуализирует состав строки субъектов, связанных с переданной областью.
// 
// Параметры:
//  ОбластьЗамещения - СправочникОбъект.ОбластиЗамещения
//
Процедура ЗаписьОбластиЗамещения(Знач ОбластьЗамещения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставСубъектовПравДоступа.Субъект,
		|	СоставСубъектовПравДоступа.Сотрудник,
		|	СоставСубъектовПравДоступа.ОбъектОснование,
		|	СоставСубъектовПравДоступа.СотрудникОснование,
		|	СоставСубъектовПравДоступа.ОбластьДелегирования,
		|	СоставСубъектовПравДоступа.ИмяОбластиДелегирования,
		|	СоставСубъектовПравДоступа.СубъектПометкаУдаления,
		|	СоставСубъектовПравДоступа.СотрудникПометкаУдаления
		|ПОМЕСТИТЬ ЗаписиПоОбластиБезРасшифровки
		|ИЗ
		|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|ГДЕ
		|	СоставСубъектовПравДоступа.ОбластьДелегирования = &ОбластьДелегирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиПоОбластиБезРасшифровки.Субъект,
		|	ЗаписиПоОбластиБезРасшифровки.Сотрудник,
		|	ЗаписиПоОбластиБезРасшифровки.ОбъектОснование КАК ОбъектОснование,
		|	ЗаписиПоОбластиБезРасшифровки.СотрудникОснование,
		|	ЗаписиПоОбластиБезРасшифровки.ОбластьДелегирования,
		|	ЗаписиПоОбластиБезРасшифровки.ИмяОбластиДелегирования,
		|	ИдентификаторыОбъектовМетаданных.Ссылка КАК ОбъектМетаданных,
		|	ЗаписиПоОбластиБезРасшифровки.СубъектПометкаУдаления,
		|	ЗаписиПоОбластиБезРасшифровки.СотрудникПометкаУдаления
		|ИЗ
		|	ЗаписиПоОбластиБезРасшифровки КАК ЗаписиПоОбластиБезРасшифровки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбластиЗамещения.Состав КАК ОбластиЗамещенияСостав
		|		ПО ЗаписиПоОбластиБезРасшифровки.ОбластьДелегирования = ОбластиЗамещенияСостав.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|		ПО ОбластиЗамещенияСостав.ОбъектМетаданных = ИдентификаторыОбъектовМетаданных.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбластиЗамещения КАК ОбластиЗамещения
		|		ПО ОбластиЗамещенияСостав.Ссылка = ОбластиЗамещения.Ссылка
		|ГДЕ
		|	ЗаписиПоОбластиБезРасшифровки.ОбластьДелегирования = &ОбластьДелегирования
		|	И НЕ ОбластиЗамещения.ПометкаУдаления
		|	И НЕ ИдентификаторыОбъектовМетаданных.ПометкаУдаления
		|ИТОГИ
		|ПО
		|	ОбъектОснование");
		
	Запрос.УстановитьПараметр("ОбластьДелегирования", ОбластьЗамещения.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Если ОбластьЗамещения.ПометкаУдаления Тогда
			
			СоставСубъектов = СоздатьНаборЗаписей();
			СоставСубъектов.Отбор.ОбластьДелегирования.Установить(ОбластьЗамещения.Ссылка);
			СоставСубъектов.Записать();
			
		Иначе
			
			// Если записей по этой области в базе нет - выполняется поиск элементов делегирования, 
			// использующих область, и перезаполняются данные регистра по этим элементам.
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗамещающиеИПомощникиВопросыЗамещения.Ссылка КАК Замещение
				|ИЗ
				|	Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ЗамещающиеИПомощникиВопросыЗамещения
				|ГДЕ
				|	ЗамещающиеИПомощникиВопросыЗамещения.Область = &ОбластьДелегирования");
				
			Запрос.УстановитьПараметр("ОбластьДелегирования", ОбластьЗамещения.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаписьЗамещения(Выборка.Замещение); //@skip-check query-in-loop
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ВыборкаПоДелегированиям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоДелегированиям.Следующий() Цикл
			
			СоставСубъектов = СоздатьНаборЗаписей();
			СоставСубъектов.Отбор.ОбластьДелегирования.Установить(ОбластьЗамещения.Ссылка);
			СоставСубъектов.Отбор.ОбъектОснование.Установить(ВыборкаПоДелегированиям.ОбъектОснование);
			
			Выборка = ВыборкаПоДелегированиям.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(СоставСубъектов.Добавить(), Выборка);
			КонецЦикла;
			
			СоставСубъектов.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при записи проекта - нового, или с измененным руководителем.
// Добавляет/удаляет руководителя проекта как строку состава субъекта.
// 
// Параметры:
//  Проект - СправочникОбъект.Проекты
//
Процедура ЗаписьПроекта(Проект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоставСубъектов = СоздатьНаборЗаписей();
	СоставСубъектов.Отбор.Субъект.Установить(Проект.Ссылка);
	
	Если ЗначениеЗаполнено(Проект.Руководитель) Тогда
		Запись = СоставСубъектов.Добавить();
		Запись.Субъект = Проект.Ссылка;
		Запись.СубъектПометкаУдаления = Проект.ПометкаУдаления;
		Запись.Сотрудник = Проект.Руководитель;
		Запись.СотрудникПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект.Руководитель,
			"ПометкаУдаления");
	КонецЕсли;
	
	СоставСубъектов.Записать();
	
	ТаблицаНабора = СоставСубъектов.Выгрузить();
	РасширитьСоставСубъектовВерхнихУровней(ТаблицаНабора);
	
КонецПроцедуры

// Обновить пометки удаления по полной роли.
// 
// Параметры:
//  ПолнаяРоль - СправочникОбъект.ПолныеРоли - Записываемая полная роль
Процедура ОбновитьПометкиУдаленияПоПолнойРоли(ПолнаяРоль) Экспорт
	
	Если ПолнаяРоль.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Субъект.Установить(ПолнаяРоль.Ссылка);
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		Запись.СубъектПометкаУдаления = ПолнаяРоль.ПометкаУдаления;
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Записать таблицу порциями, т.к. она может быть огромной.
// 
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - Таблица набора
Процедура ЗаписатьТаблицуПорциями(ТаблицаНабора)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ *
		|ПОМЕСТИТЬ ВТ_ТаблицаНабора
		|ИЗ
		|	&ТаблицаНабора КАК Таб
		|;
		|
		|ВЫБРАТЬ *
		|ИЗ
		|	ВТ_ТаблицаНабора КАК Т
		|ИТОГИ ПО
		|	Субъект, ОбъектОснование, ОбластьДелегирования");
	Запрос.УстановитьПараметр("ТаблицаНабора", ТаблицаНабора);
	Выборка1 = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка1.Следующий() Цикл // по Субъект
		Выборка2 = Выборка1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка2.Следующий() Цикл // по ОбъектОснование
			Выборка3 = Выборка2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка3.Следующий() Цикл // по ОбластьДелегирования
				Набор = СоздатьНаборЗаписей();
				Набор.Отбор.Субъект.Установить(Выборка3.Субъект);
				Набор.Отбор.ОбъектОснование.Установить(Выборка3.ОбъектОснование);
				Набор.Отбор.ОбластьДелегирования.Установить(Выборка3.ОбластьДелегирования);
				ВыборкаДетальные = Выборка3.Выбрать();
				Пока ВыборкаДетальные.Следующий() Цикл
					Запись = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальные);
				КонецЦикла;
				Набор.Записать();
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Перезаполняет все записи регистра, относящиеся к делегированию прав.
// 
Процедура ЗаполнитьВсехДелегатов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗамещающиеИПомощники.Ссылка
		|ИЗ
		|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|ГДЕ
		|	ЗамещающиеИПомощники.Действует");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьЗамещения(Выборка.Ссылка); //@skip-check query-in-loop
	КонецЦикла;
	
КонецПроцедуры

Процедура РасширитьТаблицуНабораСоставомСубъектовНижнихУровней(ТаблицаНабора, ОбрабатыватьРуководителей = Истина)
	
	// Дополнение таблицы набора составом субъектов нижних уровней.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таб.Субъект,
		|	Таб.Сотрудник,
		|	Таб.ОбъектОснование,
		|	Таб.СотрудникОснование,
		|	Таб.ОбластьДелегирования,
		|	Таб.ИмяОбластиДелегирования,
		|	Таб.ОбъектМетаданных,
		|	Таб.СубъектПометкаУдаления,
		|	Таб.СотрудникПометкаУдаления
		|ПОМЕСТИТЬ ТаблицаНабора
		|ИЗ
		|	&ТаблицаНабора КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставСубъектовПравДоступа.Субъект,
		|	ТаблицаНабора.Сотрудник,
		|	ТаблицаНабора.ОбъектОснование,
		|	ТаблицаНабора.Субъект КАК СотрудникОснование,
		|	ТаблицаНабора.ОбластьДелегирования,
		|	ТаблицаНабора.ИмяОбластиДелегирования,
		|	ТаблицаНабора.ОбъектМетаданных,
		|	СоставСубъектовПравДоступа.Субъект.ПометкаУдаления КАК СубъектПометкаУдаления,
		|	ТаблицаНабора.СотрудникПометкаУдаления
		|ИЗ
		|	ТаблицаНабора КАК ТаблицаНабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|		ПО ТаблицаНабора.Субъект = СоставСубъектовПравДоступа.Сотрудник
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|			ПО СоставСубъектовПравДоступа.ОбъектОснование = ЗамещающиеИПомощники.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|			ПО СоставСубъектовПравДоступа.ОбъектОснование = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	(СтруктураПредприятия.Ссылка ЕСТЬ NULL 
		|			ИЛИ &ОбрабатыватьРуководителей = ИСТИНА)
		|	И ЗамещающиеИПомощники.Ссылка ЕСТЬ NULL 
		|	И СоставСубъектовПравДоступа.Субъект <> СоставСубъектовПравДоступа.Сотрудник
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаНабора.Субъект,
		|	ТаблицаНабора.Сотрудник,
		|	ТаблицаНабора.ОбъектОснование,
		|	ТаблицаНабора.СотрудникОснование,
		|	ТаблицаНабора.ОбластьДелегирования,
		|	ТаблицаНабора.ИмяОбластиДелегирования,
		|	ТаблицаНабора.ОбъектМетаданных,
		|	ТаблицаНабора.СубъектПометкаУдаления,
		|	ТаблицаНабора.СотрудникПометкаУдаления
		|ИЗ
		|	ТаблицаНабора КАК ТаблицаНабора");
	
	Запрос.УстановитьПараметр("ТаблицаНабора", ТаблицаНабора);
	Запрос.УстановитьПараметр("ОбрабатыватьРуководителей", ОбрабатыватьРуководителей);
	ТаблицаНабора = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры
	
Процедура РасширитьСоставСубъектовВерхнихУровней(ТаблицаНабора, ОбрабатыватьРуководителей = Истина)
	
	// Расширение по руководителям и делегатам.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таб.Субъект,
		|	Таб.Сотрудник,
		|	Таб.ОбъектОснование,
		|	Таб.СотрудникОснование,
		|	Таб.ОбластьДелегирования,
		|	Таб.ИмяОбластиДелегирования,
		|	Таб.ОбъектМетаданных,
		|	Таб.СотрудникПометкаУдаления,
		|	Таб.СубъектПометкаУдаления
		|ПОМЕСТИТЬ ТаблицаНабора
		|ИЗ
		|	&ТаблицаНабора КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНабора.Субъект,
		|	СоставСубъектовПравДоступа.Сотрудник,
		|	СоставСубъектовПравДоступа.ОбъектОснование,
		|	СоставСубъектовПравДоступа.Субъект КАК СотрудникОснование,
		|	СоставСубъектовПравДоступа.ОбластьДелегирования,
		|	СоставСубъектовПравДоступа.ИмяОбластиДелегирования,
		|	СоставСубъектовПравДоступа.ОбъектМетаданных,
		|	ТаблицаНабора.СубъектПометкаУдаления КАК СубъектПометкаУдаления,
		|	СоставСубъектовПравДоступа.Сотрудник.ПометкаУдаления КАК СотрудникПометкаУдаления
		|ПОМЕСТИТЬ ТаблицаСРуководителями
		|ИЗ
		|	ТаблицаНабора КАК ТаблицаНабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|		ПО ТаблицаНабора.Сотрудник = СоставСубъектовПравДоступа.Субъект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО СоставСубъектовПравДоступа.ОбъектОснование = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	&ОбрабатыватьРуководителей = ИСТИНА
		|	И ТаблицаНабора.Субъект <> ТаблицаНабора.Сотрудник
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаНабора.Субъект,
		|	ТаблицаНабора.Сотрудник,
		|	ТаблицаНабора.ОбъектОснование,
		|	ТаблицаНабора.СотрудникОснование,
		|	ТаблицаНабора.ОбластьДелегирования,
		|	ТаблицаНабора.ИмяОбластиДелегирования,
		|	ТаблицаНабора.ОбъектМетаданных,
		|	ТаблицаНабора.СубъектПометкаУдаления,
		|	ТаблицаНабора.СотрудникПометкаУдаления
		|ИЗ
		|	ТаблицаНабора КАК ТаблицаНабора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНабораСРуководителями.Субъект,
		|	СоставСубъектовПравДоступа.Сотрудник,
		|	СоставСубъектовПравДоступа.ОбъектОснование,
		|	СоставСубъектовПравДоступа.Субъект КАК СотрудникОснование,
		|	СоставСубъектовПравДоступа.ОбластьДелегирования,
		|	СоставСубъектовПравДоступа.ИмяОбластиДелегирования,
		|	СоставСубъектовПравДоступа.ОбъектМетаданных,
		|	ТаблицаНабораСРуководителями.СубъектПометкаУдаления КАК СубъектПометкаУдаления,
		|	СоставСубъектовПравДоступа.Сотрудник.ПометкаУдаления КАК СотрудникПометкаУдаления
		|ПОМЕСТИТЬ ТаблицаСДелегатами
		|ИЗ
		|	ТаблицаСРуководителями КАК ТаблицаНабораСРуководителями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|		ПО ТаблицаНабораСРуководителями.Сотрудник = СоставСубъектовПравДоступа.Субъект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|		ПО СоставСубъектовПравДоступа.ОбъектОснование = ЗамещающиеИПомощники.Ссылка
		|			И СоставСубъектовПравДоступа.Субъект = ЗамещающиеИПомощники.Сотрудник
		|ГДЕ
		|	ТаблицаНабораСРуководителями.Субъект <> ТаблицаНабораСРуководителями.Сотрудник
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаСРуководителями.Субъект,
		|	ТаблицаСРуководителями.Сотрудник,
		|	ТаблицаСРуководителями.ОбъектОснование,
		|	ТаблицаСРуководителями.СотрудникОснование,
		|	ТаблицаСРуководителями.ОбластьДелегирования,
		|	ТаблицаСРуководителями.ИмяОбластиДелегирования,
		|	ТаблицаСРуководителями.ОбъектМетаданных,
		|	ТаблицаСРуководителями.СубъектПометкаУдаления,
		|	ТаблицаСРуководителями.СотрудникПометкаУдаления
		|ИЗ
		|	ТаблицаСРуководителями КАК ТаблицаСРуководителями
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСДелегатами.Субъект,
		|	ТаблицаСДелегатами.Сотрудник,
		|	ТаблицаСДелегатами.ОбъектОснование,
		|	ТаблицаСДелегатами.СотрудникОснование,
		|	ТаблицаСДелегатами.ОбластьДелегирования,
		|	ТаблицаСДелегатами.ИмяОбластиДелегирования,
		|	ТаблицаСДелегатами.ОбъектМетаданных,
		|	ТаблицаСДелегатами.СубъектПометкаУдаления,
		|	ТаблицаСДелегатами.СотрудникПометкаУдаления
		|ИЗ
		|	ТаблицаСДелегатами КАК ТаблицаСДелегатами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНабора КАК ТаблицаНабора
		|		ПО ТаблицаСДелегатами.Субъект = ТаблицаНабора.Субъект
		|			И ТаблицаСДелегатами.Сотрудник = ТаблицаНабора.Сотрудник
		|			И ТаблицаСДелегатами.ОбъектОснование = ТаблицаНабора.ОбъектОснование
		|			И ТаблицаСДелегатами.СотрудникОснование = ТаблицаНабора.СотрудникОснование
		|			И ТаблицаСДелегатами.ОбластьДелегирования = ТаблицаНабора.ОбластьДелегирования
		|			И ТаблицаСДелегатами.ОбъектМетаданных = ТаблицаНабора.ОбъектМетаданных
		|ГДЕ
		|	ТаблицаНабора.Субъект ЕСТЬ NULL ");
	
	Запрос.УстановитьПараметр("ТаблицаНабора", ТаблицаНабора);
	Запрос.УстановитьПараметр("ОбрабатыватьРуководителей", ОбрабатыватьРуководителей);
	ТаблицаДопЗаписей = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДопЗаписей Цикл
		Запись = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновить пометки удаления по сотруднику.
// 
// Параметры:
//  Сотрудник - СправочникОбъект.Сотрудники - Сотрудник для обновления пометок
Процедура ОбновитьПометкиУдаленияПоСотруднику(Сотрудник)
	
	Если Сотрудник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Сотрудник.ДополнительныеСвойства.ПредыдущаяПометкаУдаления = Сотрудник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
		
	// Нужно обновить СотрудникПометкаУдаления в записях по сотруднику
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Сотрудник.Установить(Сотрудник.Ссылка);
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		Запись.СотрудникПометкаУдаления = Сотрудник.ПометкаУдаления;
	КонецЦикла;
	
	Набор.Записать();
	

	// Нужно обновить СубъектПометкаУдаления в записях по сотруднику
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Субъект.Установить(Сотрудник.Ссылка);
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		Запись.СубъектПометкаУдаления = Сотрудник.ПометкаУдаления;
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

// Удаляет неактуальные записи верхних уровней.
// Запись неактуальна, если СотрудникОснование не входит в состав субъекта.
// 
// Параметры:
//  НомерИтерации - Число -
Процедура УдалитьНеактуальныеЗаписиВерхнихУровней(НомерИтерации = 1)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоставСубъектов_ВерхнийУровень.Сотрудник,
		|	СоставСубъектов_ВерхнийУровень.Субъект,
		|	СоставСубъектов_ВерхнийУровень.ИмяОбластиДелегирования,
		|	СоставСубъектов_ВерхнийУровень.ОбъектМетаданных,
		|	СоставСубъектов_ВерхнийУровень.ОбъектОснование,
		|	СоставСубъектов_ВерхнийУровень.СотрудникОснование,
		|	СоставСубъектов_ВерхнийУровень.ОбластьДелегирования
		|ИЗ
		|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов_ВерхнийУровень
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СоставСубъектов_ВерхнийУровень.СотрудникОснование = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов_НижнийУровень
		|		ПО СоставСубъектов_ВерхнийУровень.Субъект = СоставСубъектов_НижнийУровень.Субъект
		|			И СоставСубъектов_ВерхнийУровень.СотрудникОснование = СоставСубъектов_НижнийУровень.Сотрудник
		|ГДЕ
		|	СоставСубъектов_НижнийУровень.Сотрудник ЕСТЬ NULL
		|	И СоставСубъектов_ВерхнийУровень.СотрудникОснование <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Удалить();
	КонецЦикла;
	
	// Выполнение второго прохода - на первом этапе могли не удалиться записи самого верхнего уровня, 
	// т.е. делегаты руководителей.
	НеобходимоеКоличествоИтераций = 2;
	Если НомерИтерации < НеобходимоеКоличествоИтераций Тогда
		УдалитьНеактуальныеЗаписиВерхнихУровней(НомерИтерации + 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
