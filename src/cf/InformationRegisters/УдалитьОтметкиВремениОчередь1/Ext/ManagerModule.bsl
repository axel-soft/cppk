
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает количество объектов подлежащих обработке.
//
Функция ПереходНаНовуюВерсиюКоличествоОбъектов() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(Таблица.Ключ), 0) КАК Количество
		|ИЗ
		|	РегистрСведений.УдалитьОтметкиВремениОчередь1 КАК Таблица");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

// Выполняет переход на новую версию.
//
Функция ВыполнитьПереходНаНовуюВерсиюОтложенный(РазмерПорции = 1000) Экспорт
	
	РезультатОбработки = Новый Структура("ОбработаноОбъектов, ПроблемныхОбъектов", 0, 0);
	
	ИдентификаторНабораЗаписей = Метаданные.ОбщиеРеквизиты.УдалитьОтметкиВремениИдентификаторНабораЗаписей;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Объекты", СоставОбъектовИдентификатораОтметокВремени());
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Таблица.Отметка КАК Отметка,
		|	Таблица.Ключ КАК Ключ,
		|	Таблица.Объект КАК Объект,
		|	Таблица.Удаление КАК Удаление,
		|	Таблица.ЗначенияКлюча КАК ЗначенияКлюча,
		|	Таблица.Источник КАК Источник,
		|	Таблица.ТипКлюча КАК ВидКлючаЧислом,
		|	ВЫБОР
		|		КОГДА Таблица.ТипКлюча = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта)
		|		КОГДА Таблица.ТипКлюча = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючНабораПодчинениеРегистратору)
		|		КОГДА Таблица.ТипКлюча = 2
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючНабораПервоеСсылочноеИзмерение)
		|		КОГДА Таблица.ТипКлюча = 3
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей)
		|		КОГДА Таблица.ТипКлюча = 9
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючНабораРегистрБезИзмерений)
		|	КОНЕЦ КАК ВидКлюча,
		|	Таблица.ИдентификаторКлюча КАК ИдентификаторКлюча
		|ПОМЕСТИТЬ ДанныеОтметок
		|ИЗ
		|	РегистрСведений.УдалитьОтметкиВремениОчередь1 КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ПолеКлючаСоединение КАК Ключ,
		|	ДанныеОтметок.Объект КАК Объект
		|ПОМЕСТИТЬ КлючиРегистровСИдентификатором
		|ИЗ
		|	ДанныеОтметок КАК ДанныеОтметок
		|ГДЕ
		|	ДанныеОтметок.ВидКлючаЧислом = 3
		|	И ДанныеОтметок.Объект В (&Объекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОтметок.Объект КАК Объект
		|ИЗ
		|	ДанныеОтметок КАК ДанныеОтметок
		|ГДЕ
		|	ДанныеОтметок.ВидКлючаЧислом = 3
		|	И ДанныеОтметок.Объект В (&Объекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОтметок.*
		|ИЗ
		|	ДанныеОтметок
		|ГДЕ
		|	(ДанныеОтметок.ВидКлючаЧислом <> 3
		|			ИЛИ ДанныеОтметок.Объект В (&Объекты))";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1000" , СтрШаблон("ПЕРВЫЕ %1", Формат(РазмерПорции, "ЧГ=0")));
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ПолеКлючаСоединение",
		?(ИдентификаторНабораЗаписей.Тип.СодержитТип(Тип("УникальныйИдентификатор")),
			"ДанныеОтметок.ИдентификаторКлюча",
			"ДанныеОтметок.Ключ"));
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	КоличествоОбработанных = 0;
	
	НачатьТранзакцию();
	Попытка
		Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Ключ) Тогда
				ОписаниеКлючаОтметкиВремени = КлючОтметокВремениНовойВерсии(Выборка.Ключ, Выборка.ВидКлючаЧислом);
				
				Запись = РегистрыСведений.ОтметкиВремениОчередь1.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка, , "ЗначенияКлюча");
				ЗаполнитьЗначенияСвойств(Запись, ОписаниеКлючаОтметкиВремени);
				Запись.ЗначенияКлюча = Запись.ЗначенияКлюча;
				Запись.Записать();
			КонецЕсли;
			
			СтараяЗапись = СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(СтараяЗапись, Выборка);
			СтараяЗапись.Удалить();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
		КонецЦикла;
		
		ТекстЗапроса = Новый Массив; // Массив Из Строка
		
		Регистры = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить().ВыгрузитьКолонку("Объект");
		Если Регистры.Количество() > 0 Тогда
			Для Номер = 1 По Регистры.Количество() Цикл
				ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Регистры[Номер - 1]); // ОбъектМетаданныхРегистрСведений
				
				СоставИдентификаторНабораЗаписей = ИдентификаторНабораЗаписей.Состав.Найти(ОбъектМетаданных);
				Если СоставИдентификаторНабораЗаписей = Неопределено
						Или СоставИдентификаторНабораЗаписей.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
					
					ТекстЗапроса.Добавить("ВЫБРАТЬ НЕОПРЕДЕЛЕНО ГДЕ ЛОЖЬ");
					Продолжить;
				КонецЕсли;
				
				СписокИзмерений = Новый Массив; // Массив Из Строка
				Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
					СписокИзмерений.Добавить(СтрШаблон("ТаблицаРегистра.%1", Измерение.Имя));
				КонецЦикла;
				
				ИзмеренияРегистра =
					?(СписокИзмерений.Количество() > 0, СтрСоединить(СписокИзмерений, ", "), "ИСТИНА КАК _РегистрБезИзмерений");
				
				ТекстЗапросаРегистр =
					"ВЫБРАТЬ
					|	&ИзмеренияРегистра
					|ИЗ
					|	#ТаблицаРегистра КАК ТаблицаРегистра
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиРегистровСИдентификатором КАК КлючиРегистровСИдентификатором
					|	ПО ТаблицаРегистра.УдалитьОтметкиВремениИдентификаторНабораЗаписей = КлючиРегистровСИдентификатором.Ключ
					|		И КлючиРегистровСИдентификатором.Объект = &Объект";
				ТекстЗапросаРегистр =
					СтрЗаменить(ТекстЗапросаРегистр, "&ИзмеренияРегистра", ИзмеренияРегистра);
				ТекстЗапросаРегистр =
					СтрЗаменить(ТекстЗапросаРегистр, "&Объект", СтрШаблон("&Объект%1", Номер));
				ТекстЗапросаРегистр =
					СтрЗаменить(ТекстЗапросаРегистр, "#ТаблицаРегистра", ОбъектМетаданных.ПолноеИмя());
				
				Запрос.УстановитьПараметр(СтрШаблон("Объект%1", Формат(Номер, "ЧГ=0")), Регистры[Номер - 1]);
				
				ТекстЗапроса.Добавить(ТекстЗапросаРегистр);
			КонецЦикла;
			
			Запрос.Текст = СтрСоединить(ТекстЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			Для Номер = 1 По Регистры.Количество() Цикл
				Регистр = Регистры[Номер - 1];
				ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Регистр);
				
				НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя()).СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей.ДанныеБизнесПроцессов
				
				ЗначенияОтборов = РезультатЗапроса[Номер - 1].Выгрузить();
				Для Каждого ЗначенияОтбора Из ЗначенияОтборов Цикл
					Для Каждого Поле Из ЗначенияОтборов.Колонки Цикл
						Если Поле.Имя = "_РегистрБезИзмерений" Тогда
							Продолжить;
						КонецЕсли;
						НаборЗаписей.Отбор[Поле.Имя].Установить(ЗначенияОтбора[Поле.Имя]);
					КонецЦикла;
					
					НаборЗаписей.Прочитать();
					
					Для Каждого Запись Из НаборЗаписей Цикл
						Запись.ИдентификаторОтметкиВремени =
							?(ТипЗнч(Запись.УдалитьОтметкиВремениИдентификаторНабораЗаписей) = Тип("УникальныйИдентификатор"), 
								Запись.УдалитьОтметкиВремениИдентификаторНабораЗаписей,
								Запись.УдалитьОтметкиВремениИдентификаторНабораЗаписей.УникальныйИдентификатор());
					КонецЦикла;
					ОтметкиВремени.ОтключитьРегистрацию(НаборЗаписей);
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		РезультатОбработки.ОбработаноОбъектов = КоличествоОбработанных;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		РезультатОбработки.ПроблемныхОбъектов = КоличествоОбработанных;
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось выполнить перенос данных РС УдалитьОтметкиВремениОчередь1
						|по причине:
						|%1'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекстОшибки);
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.УдалитьОтметкиВремениОчередь1, ,
			ТекстСообщения);
	КонецПопытки;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Запрос = Неопределено;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Удаляет порцию устаревших данных.
// 
// Возвращаемое значение - Булево - Истина, если были найдены устаревшие данные, в противном случае Ложь.
// 
Функция УдалитьПорциюУстаревшихДанных() Экспорт
	
	//если отметки времени еще используем - не чистим.  
	ИспользоватьОтметкиВремени = Константы.ИспользоватьОтметкиВремени.Получить();
	Если ИспользоватьОтметкиВремени Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	УдалитьОтметкиВремениОчередь.Отметка КАК Отметка,
		|	УдалитьОтметкиВремениОчередь.Ключ КАК Ключ,
		|	УдалитьОтметкиВремениОчередь.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.УдалитьОтметкиВремениОчередь1 КАК УдалитьОтметкиВремениОчередь");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		НаборЗаписей = СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Отметка.Установить(Выборка.Отметка);
		НаборЗаписей.Отбор.Ключ.Установить(Выборка.Ключ);
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		
		НаборЗаписей.Записать(); // стираем
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru='Удаление устаревших данных'"), 
		УровеньЖурналаРегистрации.Информация,
		Метаданные.РегистрыСведений.УдалитьОтметкиВремениОчередь1,, 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура завершена успешно, обработано %1 записей'"), Выборка.Количество()));
	
	Возврат Выборка.Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет конвертацию ключа в новый формат
//
Функция КлючОтметокВремениНовойВерсии(Ключ, ВидКлючаЧислом)

	ОписаниеКлюча = Новый Структура(
		"ИдентификаторКлюча, ТипКлюча",
		ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор(), Неопределено);
	
	Если ВидКлючаЧислом < 3 Тогда
		ОписаниеКлюча.ИдентификаторКлюча = Ключ.УникальныйИдентификатор();
		ОписаниеКлюча.ТипКлюча = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Ключ));
	ИначеЕсли ВидКлючаЧислом = 3 Тогда
		ОписаниеКлюча.ИдентификаторКлюча = Ключ.УникальныйИдентификатор();
		ОписаниеКлюча.ТипКлюча = Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеКлюча;
	
КонецФункции

// Возвращает список объектов, входящих в состав идентификатора отметок времени.
//
// Возвращаемое значение:
//	Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//
Функция СоставОбъектовИдентификатораОтметокВремени()
	
	СоставОбъектов = Новый Массив;
	
	Для Каждого ЭлементСостава Из Метаданные.ОбщиеРеквизиты.ИдентификаторОтметкиВремени.Состав Цикл
		Если ЭлементСостава.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		СоставОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ЭлементСостава.Метаданные));
	КонецЦикла;
	
	Возврат СоставОбъектов;
	
КонецФункции

#КонецОбласти

#КонецЕсли
