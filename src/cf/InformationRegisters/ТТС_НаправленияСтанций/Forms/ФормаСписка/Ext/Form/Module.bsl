&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = НОвый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	""<Все станции>"" КАК Направление
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""<Без направления>""
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТТС_Направления.Ссылка
	               |ИЗ
	               |	Справочник.ТТС_Направления КАК ТТС_Направления";
				   
	Направления.Загрузить(Запрос.Выполнить().Выгрузить()); 
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Направление");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
    ЭлементОтбора.ПравоеЗначение = Неопределено;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НетНаправления");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
    ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование = Ложь;
	
	Список.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВсеСтанции",Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправленияПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.Направления.ТекущиеДанные = Неопределено Тогда
		Для Каждого ЭлементОтбора ИЗ Список.Отбор.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Направление") Тогда
				Если Элементы.Направления.ТекущиеДанные.Направление = "<Без направления>" ИЛИ Элементы.Направления.ТекущиеДанные.Направление = "<Все станции>" Тогда
				    ЭлементОтбора.Использование = Ложь;
					Элементы.СписокОчиститьНаправление.Доступность = Ложь;
				Иначе
					ЭлементОтбора.ПравоеЗначение = Элементы.Направления.ТекущиеДанные.Направление;
					ЭлементОтбора.Использование = Истина;
					Элементы.СписокОчиститьНаправление.Доступность = Истина;
				КонецЕсли;
				Список.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВсеСтанции",Элементы.Направления.ТекущиеДанные.Направление = "<Все станции>");
				
			КонецЕсли;
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НетНаправления") Тогда			
				Если Элементы.Направления.ТекущиеДанные.Направление = "<Без направления>" Тогда
				    ЭлементОтбора.ПравоеЗначение = Истина;
					ЭлементОтбора.Использование = Истина;
				ИначеЕсли Элементы.Направления.ТекущиеДанные.Направление = "<Все станции>" Тогда
					ЭлементОтбора.Использование = Ложь;
				Иначе
					ЭлементОтбора.ПравоеЗначение = Ложь;
					ЭлементОтбора.Использование = Истина;
				КонецЕсли;
			КонецЕсли
		КонецЦикла;	
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
		ТекущаяСтанция = Элементы.Список.ТекущиеДанные.Станция;
	Иначе 
		ТекущаяСтанция = Неопределено;
	КонецЕсли;
	Если НЕ Элементы.Направления.ТекущиеДанные = Неопределено 
		И НЕ Элементы.Направления.ТекущиеДанные.Направление = "<Без направления>"
		И НЕ Элементы.Направления.ТекущиеДанные.Направление = "<Все станции>" Тогда
		ТекущееНаправление = Элементы.Направления.ТекущиеДанные.Направление;
	Иначе 
		ТекущееНаправление = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеРегистра(Станция, Направление)
	Запись = РегистрыСведений.ТТС_НаправленияСтанций.СоздатьМенеджерЗаписи();
	Запись.Станция = Станция;
	Запись.Направление = Направление;
	Запись.Записать();
КонецПроцедуры

&НаСервере
Процедура ПереместитьСтанцию(Станция, СтароеНаправление, НовоеНаправление)
	Запись = РегистрыСведений.ТТС_НаправленияСтанций.СоздатьМенеджерЗаписи();
	Запись.Станция = Станция;
	Запись.Направление = СтароеНаправление;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Запись.Удалить();
	КонецЕсли;	
	ЗаписатьДанныеРегистра(Станция, НовоеНаправление);
КонецПроцедуры


&НаКлиенте
Процедура НаправленияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если НЕ Строка = Неопределено Тогда
		
		//Станция = ПараметрыПеретаскивания.Значение[0];
		Станция = ПараметрыПеретаскивания.Значение;
		Направление = Направления.НайтиПоИдентификатору(Строка).Направление;
		Если Направление = "<Без направления>" ИЛИ Направление = "<Все станции>" Тогда
			Возврат;
		КонецЕсли;	
		
		НаправленияСтанции = ПолучитьНаправленияСтанции(Станция);
			
		Если НаправленияСтанции.Количество()=0 Тогда
			ЗаписатьДанныеРегистра(Станция, Направление);
		Иначе
			Если НЕ НаправленияСтанции.Найти(Направление) = Неопределено Тогда
				Сообщить("Станция "+Станция+" уже отнесена к направлению "+Направление+".");
				Возврат;
			КонецЕсли;
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да,"Переместить");
			Кнопки.Добавить(КодВозвратаДиалога.Нет,"Добавить");
			Кнопки.Добавить(КодВозвратаДиалога.Отмена,"Отмена");
			
			ДопПараметры  = Новый Структура("Станция,СтароеНаправление,НовоеНаправление",Станция,ТекущееНаправление,Направление);
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, ДопПараметры);
			
			ПоказатьВопрос(Оповещение, "Переместить или добавить станцию "+Станция+" на направление "+Направление+"?", Кнопки, 0);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Ответ, ДопПараметры) Экспорт
	Если НЕ Ответ = КодВозвратаДиалога.Отмена Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда //Переместить
			ПереместитьСтанцию(ДопПараметры.Станция, ДопПараметры.СтароеНаправление, ДопПараметры.НовоеНаправление);
		Иначе //Добавить
			ЗаписатьДанныеРегистра(ДопПараметры.Станция, ДопПараметры.НовоеНаправление);
		КонецЕсли;
		Элементы.Список.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаправленияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаправленияСтанции(Станция)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТТС_НаправленияСтанций.Направление
	               |ИЗ
	               |	РегистрСведений.ТТС_НаправленияСтанций КАК ТТС_НаправленияСтанций
	               |ГДЕ
	               |	ТТС_НаправленияСтанций.Станция = &Станция";
				   
	Запрос.УстановитьПараметр("Станция",Станция);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Направление");
КонецФункции

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СписокОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура НаправленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаправленияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаправленияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНаправление(Команда)
	ОчиститьНаправлениеНаСервере();
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаправлениеНаСервере()
	Если ЗначениеЗаполнено(ТекущееНаправление) И ЗначениеЗаполнено(ТекущаяСтанция) Тогда
		Запись = РегистрыСведений.ТТС_НаправленияСтанций.СоздатьМенеджерЗаписи();
		Запись.Станция = ТекущаяСтанция;
		Запись.Направление = ТекущееНаправление;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Удалить();
		КонецЕсли;	
		Элементы.Список.Обновить();
	КонецЕсли;
КонецПроцедуры
