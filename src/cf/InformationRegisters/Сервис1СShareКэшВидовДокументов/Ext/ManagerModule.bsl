// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает сохраненный шаблон документа по организации(отправителю), контрагенту(получателю), наименованию вида загружаемого документа
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Контрагент - СправочникСсылка.Контрагенты
//  ВидДокумента - Строка
// 
// Возвращаемое значение:
//  Структура:
//   * ШаблонДокумента - СправочникСсылка.ШаблоныДокументов
//   * ТематикаДокумента - СправочникСсылка.ТематикиДокументов
//
Функция ШаблонДокумента(Организация, Контрагент, ВидДокумента) Экспорт
	
	ДанныеШаблона = ДанныеШаблона();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сервис1СShareКэшВидовДокументов.ШаблонДокумента,
		|	Сервис1СShareКэшВидовДокументов.ТематикаДокумента
		|ИЗ
		|	РегистрСведений.Сервис1СShareКэшВидовДокументов КАК Сервис1СShareКэшВидовДокументов
		|ГДЕ
		|	Сервис1СShareКэшВидовДокументов.Организация = &Организация
		|	И Сервис1СShareКэшВидовДокументов.Контрагент = &Контрагент
		|	И Сервис1СShareКэшВидовДокументов.ВидДокумента = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация,
		Справочники.Организации.ПустаяСсылка()));
	Запрос.УстановитьПараметр("Контрагент", ?(ЗначениеЗаполнено(Контрагент), Контрагент,
		Справочники.Контрагенты.ПустаяСсылка()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеШаблона, Выборка );
	КонецЕсли;

	Возврат ДанныеШаблона;
	
КонецФункции	

// Записать шаблон.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Контрагент - СправочникСсылка.Контрагенты
//  ВидДокумента - Строка
//  ШаблонДокумента - СправочникСсылка.ШаблоныДокументов
//  ТематикаДокумента - СправочникСсылка.ТематикиДокументов
//
Процедура ЗаписатьШаблон(Организация, Контрагент, ВидДокумента, ШаблонДокумента, ТематикаДокумента) Экспорт
	
	Если Не (ЗначениеЗаполнено(Организация) Или ЗначениеЗаполнено(Контрагент))
		Или Не ЗначениеЗаполнено(ВидДокумента) Тогда
			Возврат;
	КонецЕсли;		
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.Организация = Организация;
	Запись.Контрагент = Контрагент;
	Запись.ВидДокумента = ВидДокумента;
	Запись.ШаблонДокумента = ШаблонДокумента;
	Запись.ТематикаДокумента = ТематикаДокумента;
	Запись.Записать(Истина);
	
КонецПроцедуры

// Удалить шаблон.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Контрагент - СправочникСсылка.Контрагенты
//  ВидДокумента - Строка
//
Процедура УдалитьШаблон(Организация, Контрагент, ВидДокумента) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация, Истина);
	НаборЗаписей.Отбор.Контрагент.Установить(Контрагент, Истина);
	НаборЗаписей.Отбор.ВидДокумента.Установить(ВидДокумента, Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Данные шаблона.
// 
// Возвращаемое значение:
//  Структура - Данные шаблона:
//   * ШаблонДокумента - СправочникСсылка.ШаблоныДокументов
//   * ТематикаДокумента - СправочникСсылка.ТематикиДокументов
//
Функция ДанныеШаблона() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ШаблонДокумента", Справочники.ШаблоныДокументов.ПустаяСсылка());
	Структура.Вставить("ТематикаДокумента", Справочники.ТематикиДокументов.ПустаяСсылка());
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти	

#КонецЕсли
