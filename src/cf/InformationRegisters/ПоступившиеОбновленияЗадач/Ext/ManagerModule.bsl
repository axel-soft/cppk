#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет запись в регистр.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  СобытиеОбновления - ПеречислениеСсылка.СобытияОбновленияЗадач.
//  ЛокальнаяЗапись - Булево.
//
Процедура ДобавитьЗапись(ДействиеЗадачи, СобытиеОбновления, ЛокальнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
	
		Период = ТекущаяДатаСеанса();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.ДействиеЗадачи.Установить(ДействиеЗадачи);
		НаборЗаписей.Отбор.СобытиеОбновления.Установить(СобытиеОбновления);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = Период;
		НоваяЗапись.ДействиеЗадачи = ДействиеЗадачи;
		НоваяЗапись.СобытиеОбновления = СобытиеОбновления;
		
		Если ЛокальнаяЗапись Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииКОД", Истина);
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
		РаботаСЗадачами.ОбновитьПоступившиеОбновления(ДействиеЗадачи);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает записи из регистра по действиям задач.
//
// Параметры:
//  СсылкаНаДействияЗадач - Массив.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Поступившие обновления задач.
//   * Период - Дата.
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//   * СобытиеОбновления - ПеречислениеСсылка.СобытияОбновленияЗадач.
//
Функция ПолучитьЗаписиПоДействиямЗадач(СсылкаНаДействияЗадач) Экспорт
	
	Если СсылкаНаДействияЗадач.Количество() = 0 Тогда
		ЗаписиПоЗадачам = ТаблицаПоступившиеОбновленияЗадач();
		Возврат ЗаписиПоЗадачам;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПоступившиеОбновленияЗадач.Период КАК Период,
		|	ПоступившиеОбновленияЗадач.ДействиеЗадачи КАК ДействиеЗадачи,
		|	ПоступившиеОбновленияЗадач.СобытиеОбновления КАК СобытиеОбновления
		|ИЗ
		|	РегистрСведений.ПоступившиеОбновленияЗадач КАК ПоступившиеОбновленияЗадач
		|ГДЕ
		|	ПоступившиеОбновленияЗадач.ДействиеЗадачи В(&СсылкаНаДействияЗадач)");
	
	Запрос.УстановитьПараметр("СсылкаНаДействияЗадач", СсылкаНаДействияЗадач);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаписиПоЗадачам = РезультатЗапроса.Выгрузить();
	
	Возврат ЗаписиПоЗадачам;
	
КонецФункции

// Возвращает записи события из регистра по задаче.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  СобытиеОбновления - ПеречислениеСсылка.СобытияОбновленияЗадач.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Поступившие обновления задач.
//   * Период - Дата.
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//   * СобытиеОбновления - ПеречислениеСсылка.СобытияОбновленияЗадач.
//
Функция ПолучитьЗаписиПоЗадачеИСобытию(ДействиеЗадачи, СобытиеОбновления) Экспорт
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Или Не ЗначениеЗаполнено(СобытиеОбновления) Тогда
		ЗаписиПоЗадачеИСобытию = ТаблицаПоступившиеОбновленияЗадач();
		Возврат ЗаписиПоЗадачеИСобытию;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПоступившиеОбновленияЗадач.Период КАК Период,
		|	ПоступившиеОбновленияЗадач.ДействиеЗадачи КАК ДействиеЗадачи,
		|	ПоступившиеОбновленияЗадач.СобытиеОбновления КАК СобытиеОбновления
		|ИЗ
		|	РегистрСведений.ПоступившиеОбновленияЗадач КАК ПоступившиеОбновленияЗадач
		|ГДЕ
		|	ПоступившиеОбновленияЗадач.ДействиеЗадачи = &ДействиеЗадачи
		|	И ПоступившиеОбновленияЗадач.СобытиеОбновления = &СобытиеОбновления");
	
	Запрос.УстановитьПараметр("ДействиеЗадачи", ДействиеЗадачи);
	Запрос.УстановитьПараметр("СобытиеОбновления", СобытиеОбновления);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаписиПоЗадачеИСобытию = РезультатЗапроса.Выгрузить();
	
	Возврат ЗаписиПоЗадачеИСобытию;
	
КонецФункции

// Удаляет запись из регистра.
//
// Параметры:
//  Период - Дата.
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  СобытиеОбновления - ПеречислениеСсылка.СобытияОбновленияЗадач.
//  ЛокальнаяЗапись - Булево.
//
Процедура УдалитьЗапись(Период, ДействиеЗадачи, СобытиеОбновления, ЛокальнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.ДействиеЗадачи.Установить(ДействиеЗадачи);
	НаборЗаписей.Отбор.СобытиеОбновления.Установить(СобытиеОбновления);
	
	Если ЛокальнаяЗапись Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииКОД", Истина);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	РаботаСЗадачами.ОбновитьПоступившиеОбновления(ДействиеЗадачи);
	
КонецПроцедуры

// Удаляет порцию устаревших данных из регистра.
// Удаление выполняется локально в каждом узле распределенной базы - удаление данных не поступает в обмен.
//
// Возвращаемое значение:
//  Булево - Истина, если были найдены устаревшие данные, в противном случае Ложь.
//
Функция УдалитьПорциюУстаревшихДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Очистка регистра сведений поступившие обновления задач'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало выполнения'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ЕстьДанныеДляУдаления = Ложь;
	
	// Удаление поступивших обновлений выполненных и прерванных задач.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДействияЗадач.ДействиеЗадачи Как ДействиеЗадачи
		|ИЗ
		|	РегистрСведений.РеестрЗадачПоИсполнителям КАК ДействияЗадач
		|ГДЕ
		|	ДействияЗадач.ПоступилиОбновления = ИСТИНА
		|	И ДействияЗадач.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи)
		|	И ДействияЗадач.ОжидаетВыполнения = ЛОЖЬ");
	
	УстаревшиеДействияЗадач = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДействиеЗадачи");
	
	УстаревшиеЗаписи = ПолучитьЗаписиПоДействиямЗадач(УстаревшиеДействияЗадач);
	Для Каждого Запись Из УстаревшиеЗаписи Цикл
		
		ЕстьДанныеДляУдаления = Истина;
		
		Попытка
			
			УдалитьЗапись(Запись.Период, Запись.ДействиеЗадачи, Запись.СобытиеОбновления, Истина);
			
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Очистка регистра сведений поступившие обновления задач'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Очистка регистра сведений поступившие обновления задач'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершение'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Возврат ЕстьДанныеДляУдаления;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует пустую таблицу поступивших обновлений задач.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Пустая таблица поступивших обновлений задач.
//   * Период - Дата.
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//   * СобытиеОбновления - ПеречислениеСсылка.СобытияОбновленияЗадач.
//
Функция ТаблицаПоступившиеОбновленияЗадач()
	
	ТаблицаПоступившиеОбновленияЗадач = Новый ТаблицаЗначений;
	ТаблицаПоступившиеОбновленияЗадач.Колонки.Добавить("Период",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПоступившиеОбновленияЗадач.Колонки.Добавить("ДействиеЗадачи",
		Метаданные.РегистрыСведений.ПоступившиеОбновленияЗадач.Измерения.ДействиеЗадачи.Тип);
	ТаблицаПоступившиеОбновленияЗадач.Колонки.Добавить("СобытиеОбновления",
		Метаданные.РегистрыСведений.ПоступившиеОбновленияЗадач.Измерения.СобытиеОбновления.Тип);
	
	Возврат ТаблицаПоступившиеОбновленияЗадач;
	
КонецФункции

#КонецОбласти

#КонецЕсли