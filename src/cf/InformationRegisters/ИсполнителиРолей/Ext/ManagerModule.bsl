#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает исполнителей роли.
//
// Параметры:
//   Роль - СправочникСсылка.ПолныеРоли - роль.
//   ИсключитьНедействительных - Булево - Истина, если из результата следует исключить недействительных пользователей.
//
// Возвращаемое значение:
//   Массив Из СправочникСсылка.Сотрудники - Исполнители указанной роли.
//
Функция ИсполнителиРоли(Роль, ИсключитьНедействительных = Ложь) Экспорт
	
	Роли = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Роль);
	ИсполнителиРолей = ИсполнителиРолей(Роли, ИсключитьНедействительных);
	ИсполнителиРоли = ИсполнителиРолей[Роль];
	
	Возврат ИсполнителиРоли;

КонецФункции

// Возвращает исполнителей ролей.
//
// Параметры:
//   Роли - Массив из СправочникСсылка.ПолныеРоли - Роли.
//   ИсключитьНедействительных - Булево - Истина, если из результата следует исключить недействительных пользователей.
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ - СправочникСсылка.ПолныеРоли - Роль.
//   * Значение - Массив из СправочникСсылка.Сотрудники - Исполнители указанной роли.
//
Функция ИсполнителиРолей(Роли, ИсключитьНедействительных = Ложь) Экспорт
	
	ИсполнителиРолей = Новый Соответствие;
	Если Роли.Количество() = 0 Тогда
		Возврат ИсполнителиРолей;
	КонецЕсли;
	
	Для Каждого Роль Из Роли Цикл
		ИсполнителиРолей[Роль] = Новый Массив;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолей.РольИсполнителя КАК Роль,
		|	ИсполнителиРолей.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ИсполнителиРолей.Исполнитель = Сотрудники.Ссылка
		|ГДЕ
		|	ИсполнителиРолей.РольИсполнителя В (&Роли)
		|	И НЕ Сотрудники.ПометкаУдаления
		|	И &Условие");
		
	Если ИсключитьНедействительных Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&Условие",
			"Сотрудники.Действует");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&Условие",
			"ИСТИНА");
	КонецЕсли;

	Запрос.УстановитьПараметр("Роли", Роли);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИсполнителиРоли = ИсполнителиРолей[Выборка.Роль];
		ИсполнителиРоли.Добавить(Выборка.Исполнитель);
		
	КонецЦикла;

	Возврат ИсполнителиРолей;

КонецФункции

// Возвращает всех исполнителей ролей.
//
// Параметры:
//   ИсключитьНедействительных - Булево - Истина, если из результата следует исключить недействительных сотрудников.
//
// Возвращаемое значение:
//  Соответствие - Исполнители ролей.
//   * Ключ - СправочникСсылка.ПолныеРоли - Роль.
//   * Значение - Массив из СправочникСсылка.Сотрудники - Исполнители указанной роли.
//
Функция ВсеИсполнителиРолей(ИсключитьНедействительных = Ложь) Экспорт
	
	ВсеИсполнителиРолей = Новый Соответствие;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолей.РольИсполнителя КАК Роль,
		|	ИсполнителиРолей.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ИсполнителиРолей.Исполнитель = Сотрудники.Ссылка
		|ГДЕ
		|	НЕ Сотрудники.ПометкаУдаления
		|	И &Условие");
		
	Если ИсключитьНедействительных Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&Условие",
			"Сотрудники.Действует");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&Условие",
			"ИСТИНА");
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ВсеИсполнителиРолей[Выборка.Роль] = Неопределено Тогда
			ВсеИсполнителиРолей[Выборка.Роль] = Новый Массив;
		КонецЕсли;
		
		ИсполнителиРоли = ВсеИсполнителиРолей[Выборка.Роль];
		ИсполнителиРоли.Добавить(Выборка.Исполнитель);
		
	КонецЦикла;

	Возврат ВсеИсполнителиРолей;

КонецФункции

// Возвращает роли для исполнителя.
//
// Параметры:
//  Исполнитель - СправочникСсылка.Сотрудник
//
// Возвращаемое значение:
//   Массив - СправочникСсылка.ПолныеРоли.
//
Функция РолиИсполнителя(Исполнитель) Экспорт
	
	Возврат РолиИсполнителей(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Исполнитель));
	
КонецФункции

// Возвращает все роли исполнителей.
//
// Параметры:
//  Исполнители - Массив - массив исполнителей.
//   * СправочникСсылка.Сотрудник
//
// Возвращаемое значение:
//  Массив - СправочникСсылка.ПолныеРоли.
//
Функция РолиИсполнителей(Исполнители) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиРолей.РольИсполнителя КАК РольИсполнителя
		|ИЗ
		|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиИсполнителей КАК РолиИсполнителей
		|		ПО ИсполнителиРолей.РольИсполнителя.Владелец = РолиИсполнителей.Ссылка
		|ГДЕ
		|	ИсполнителиРолей.Исполнитель В (&Исполнители)
		|	И РолиИсполнителей.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Исполнители", Исполнители);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя");
	
КонецФункции

// Устарела. Возвращает исполнителей указанной роли.
Функция ПолучитьИсполнителейРоли(Роль, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации,
	ИсключитьНедействительных = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолей.Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ИсполнителиРолей.Исполнитель = Сотрудники.Ссылка
		|ГДЕ
		|	ИсполнителиРолей.РольИсполнителя.Владелец = &РольИсполнителя
		|	И ИсполнителиРолей.РольИсполнителя.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
		|	И ИсполнителиРолей.РольИсполнителя.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации
		|	И НЕ Сотрудники.ПометкаУдаления
		|	%1";
		
	Если ИсключитьНедействительных Тогда
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Запрос.Текст,
			"И Сотрудники.Действует");
	Иначе
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Запрос.Текст,
			"");
	КонецЕсли;

	Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Запрос.УстановитьПараметр("РольИсполнителя", Роль);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#Область ОбновлениеДанныхКэширующихОбъектов

// Конструктор параметров обновления данных кэширующих объектов.
//
// Возвращаемое значение:
//	Структура:
//		* ИсполнителиДляОбновленияВАдреснойКниге - Массив Из СправочникСсылка.Сотрудники - Список объектов, по которым необходимо обновить данные в адресной книге.
//		* РолиДляОбновленияКонтейнеров - Массив Из СправочникСсылка.ПолныеРоли - Список ролей для обновления данных РС СотрудникиВКонтейнерах.
//
Функция ПараметрыОбновленияДанныхКэширующихОбъектов() Экспорт
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("ИсполнителиДляОбновленияВАдреснойКниге", Новый Массив);
	ПараметрыОбновления.Вставить("РолиДляОбновленияКонтейнеров", Новый Массив);
		
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления данных кэширующих объектов по данным объекта.
//
// Параметры:
//	Объект - РегистрСведенийНаборЗаписей.ИсполнителиРолей - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Функция ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияДанныхКэширующихОбъектов();
	
	ИзменяемыеЗаписи = Новый ТаблицаЗначений;
	Если Объект.Отбор.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
			|ГДЕ
			|	%Условие%";
		
		Условие = "";
		Разделитель = "";
		
		Для Каждого ЭлементОтбора Из Объект.Отбор Цикл
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаУсловия = СтрШаблон("ИсполнителиРолей.%1 = &%2", ЭлементОтбора.Имя, ЭлементОтбора.Имя);
			
			Условие = Условие + Разделитель + СтрокаУсловия;
			
			Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
			
			Разделитель = Символы.ПС + "	И ";
		КонецЦикла;
		
		Если Условие = "" Тогда
			Условие = "ИСТИНА";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Условие%", Условие);
		
		ИзменяемыеЗаписи = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// Старые записи.
	Для Каждого Запись Из ИзменяемыеЗаписи Цикл
		ПараметрыОбновления.ИсполнителиДляОбновленияВАдреснойКниге.Добавить(Запись.Исполнитель);
		ПараметрыОбновления.РолиДляОбновленияКонтейнеров.Добавить(Запись.РольИсполнителя);
	КонецЦикла;
	
	// Новые записи.
	Для Каждого Запись Из Объект Цикл
		Если ПараметрыОбновления.РолиДляОбновленияКонтейнеров.Найти(Запись.РольИсполнителя) = Неопределено Тогда
			ПараметрыОбновления.РолиДляОбновленияКонтейнеров.Добавить(Запись.РольИсполнителя);
		КонецЕсли;
				
		Если ПараметрыОбновления.ИсполнителиДляОбновленияВАдреснойКниге.Найти(Запись.Исполнитель) = Неопределено Тогда
			ПараметрыОбновления.ИсполнителиДляОбновленияВАдреснойКниге.Добавить(Запись.Исполнитель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет данные зависимых объектов согласно установленным параметрам.
//
// Параметры:
//	Объект - РегистрСведенийНаборЗаписей.ИсполнителиРолей - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Процедура ОбновитьДанныеКэширующихОбъектов(Объект, ПараметрыОбновления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнеров(
		ПараметрыОбновления.РолиДляОбновленияКонтейнеров);
		
	Если ПараметрыОбновления.ИсполнителиДляОбновленияВАдреснойКниге.Количество() > 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	АдреснаяКнига1.Объект,
			|	АдреснаяКнига1.РодительОбъекта,
			|	ТИПЗНАЧЕНИЯ(АдреснаяКнига1.Объект) КАК ТипОбъекта
			|ИЗ
			|	Справочник.АдреснаяКнига КАК АдреснаяКнига
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АдреснаяКнига КАК АдреснаяКнига1
			|		ПО АдреснаяКнига.Родитель = АдреснаяКнига1.Ссылка
			|ГДЕ
			|	АдреснаяКнига.Объект В(&Исполнители)
			|	И (АдреснаяКнига1.Объект ССЫЛКА Справочник.СтруктураПредприятия
			|			ИЛИ АдреснаяКнига1.Объект ССЫЛКА Справочник.РабочиеГруппы
			|				И АдреснаяКнига1.Объект <> ЗНАЧЕНИЕ(Справочник.РабочиеГруппы.ВсеПользователи))");
		Запрос.УстановитьПараметр("Исполнители", ПараметрыОбновления.ИсполнителиДляОбновленияВАдреснойКниге);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокПодчиненныхОбъектов = Новый Массив;
			
			Если Выборка.ТипОбъекта = Тип("СправочникСсылка.РабочиеГруппы") Тогда
				СписокПодчиненныхОбъектов = 
					ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Объект, "Состав").Состав.
						Выгрузить().ВыгрузитьКолонку("Участник");
				
				РазделАдреснойКниги = Справочники.АдреснаяКнига.ПоРабочимГруппам;
			ИначеЕсли Выборка.ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				СписокПодчиненныхОбъектов = Сотрудники.СотрудникиПодразделения(Выборка.Объект, Ложь);
				РазделАдреснойКниги = Справочники.АдреснаяКнига.ПоСтруктуреПредприятия;
			КонецЕсли;
			
			Справочники.АдреснаяКнига.РасширитьСписокСотрудниковРолями(СписокПодчиненныхОбъектов);
			Справочники.АдреснаяКнига.ОбновитьСписокПодчиненныхОбъектов(
				Выборка.Объект, Выборка.РодительОбъекта, СписокПодчиненныхОбъектов, РазделАдреснойКниги);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого РольДляОбновления Из ПараметрыОбновления.РолиДляОбновленияКонтейнеров Цикл
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Документ.Задача",
			"РегистрСведений.ИсполнителиРолей",
			РольДляОбновления);
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Документ.ДействиеЗадачи",
			"РегистрСведений.ИсполнителиРолей",
			РольДляОбновления);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	Если ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ОбновитьКэширующиеДанныеПоСотруднику(Выборка);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.ЗамещающиеИПомощники") Тогда
		
		ОбновитьКэширующиеДанныеПоЗамещающимИПомощникам(Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяФорма = Метаданные.Справочники.РолиИсполнителей.Формы.ФормаСписка;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновить кэширующие данные по роли.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоСотруднику(Выборка)
	
	Сотрудник = Выборка.КлючВлияющихДанных; // СправочникСсылка.Сотрудники
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИсполнителиРолей.РольИсполнителя
			|ИЗ
			|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
			|ГДЕ
			|	ИсполнителиРолей.Исполнитель = &Сотрудник");
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.Задача",
				"РегистрСведений.ИсполнителиРолей",
				ВыборкаДетальныеЗаписи.РольИсполнителя);
			
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.ДействиеЗадачи",
				"РегистрСведений.ИсполнителиРолей",
				ВыборкаДетальныеЗаписи.РольИсполнителя);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновить кэширующие данные по замещающему или помощнику.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоЗамещающимИПомощникам(Выборка)
	
	ЗатронутыеСотрудники = Новый Массив;
	
	ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
	Если ИзмененияВлияющихДанных <> Неопределено Тогда
		
		ПредыдущиеЗначенияРеквизитов = ИзмененияВлияющихДанных.ПредыдущиеЗначенияРеквизитов;
		НовыеЗначенияРеквизитов = ИзмененияВлияющихДанных.НовыеЗначенияРеквизитов;
		
		Если ЗначениеЗаполнено(НовыеЗначенияРеквизитов.Сотрудник) Тогда
			ЗатронутыеСотрудники.Добавить(НовыеЗначенияРеквизитов.Сотрудник);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.Сотрудник)
			И ПредыдущиеЗначенияРеквизитов.Сотрудник <> НовыеЗначенияРеквизитов.Сотрудник Тогда
			ЗатронутыеСотрудники.Добавить(ПредыдущиеЗначенияРеквизитов.Сотрудник);
		КонецЕсли;
		
		ИзменилсяСотрудник =
			ПредыдущиеЗначенияРеквизитов.Сотрудник <> НовыеЗначенияРеквизитов.Сотрудник;
		
		ИзменилсяЗамещающий =
			ПредыдущиеЗначенияРеквизитов.Замещающий <> НовыеЗначенияРеквизитов.Замещающий;
		
		ИзменилосьДействует =
			ПредыдущиеЗначенияРеквизитов.Действует <> НовыеЗначенияРеквизитов.Действует;
		
		БылиВсеОбласти =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ВсеОбласти, "Область") <> Неопределено;
		БылаОбластьЗадачиПросмотр =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ЗадачиПросмотр, "Область") <> Неопределено;
		БылаОбластьЗадачи =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.Задачи, "Область") <> Неопределено;
		ПредыдущееЗначениеЕстьОбласть =
			БылиВсеОбласти Или БылаОбластьЗадачиПросмотр Или БылаОбластьЗадачи;
		
		ЕстьВсеОбласти =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ВсеОбласти, "Область") <> Неопределено;
		ЕстьОбластьЗадачиПросмотр =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ЗадачиПросмотр, "Область") <> Неопределено;
		ЕстьОбластьЗадачи =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.Задачи, "Область") <> Неопределено;
		НовоеЗначениеЕстьОбласть =
			ЕстьВсеОбласти Или ЕстьОбластьЗадачиПросмотр Или ЕстьОбластьЗадачи;
			
		ИзмениласьОбласть =
			ПредыдущееЗначениеЕстьОбласть <> НовоеЗначениеЕстьОбласть;
		
		ЕстьИзменения = 
			ИзменилосьДействует
			Или (НовыеЗначенияРеквизитов.Действует
				И (ИзменилсяСотрудник Или ИзменилсяЗамещающий Или ИзмениласьОбласть));
		
		Если Не ЕстьИзменения Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ЗамещающийИлиПомощник = Выборка.КлючВлияющихДанных; // СправочникСсылка.ЗамещающиеИПомощники
		
		ЗатронутыйСотрудник =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗамещающийИлиПомощник, "Сотрудник");
		Если ЗначениеЗаполнено(ЗатронутыйСотрудник) Тогда
			ЗатронутыеСотрудники.Добавить(ЗатронутыйСотрудник);
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ИсполнителиРолей.РольИсполнителя
			|ИЗ
			|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
			|ГДЕ
			|	ИсполнителиРолей.Исполнитель В (&ЗатронутыеСотрудники)";
		
		Запрос.УстановитьПараметр("ЗатронутыеСотрудники", ЗатронутыеСотрудники);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.Задача",
				"РегистрСведений.ИсполнителиРолей",
				ВыборкаДетальныеЗаписи.РольИсполнителя);
			
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.ДействиеЗадачи",
				"РегистрСведений.ИсполнителиРолей",
				ВыборкаДетальныеЗаписи.РольИсполнителя);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли