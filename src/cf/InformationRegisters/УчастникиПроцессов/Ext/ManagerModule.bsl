#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьУчастников(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей();
	Набор.Отбор.Процесс.Установить(Процесс);
	Набор.Прочитать();
	Возврат Набор.Выгрузить();
	
КонецФункции

// Записывает набор участников переданного процесса по переданной таблице участников.
//
// Параметры:
//   Процесс - БизнесПроцессСсылка - процесс, участников которого нужно записать.
//   ТаблицаИсточникОригинал - ТаблицаЗначений - участники, имена колонок соответствуют регистру.
//   Замещать - Булево - Истина, если набор следует записать с замещением.
//
Процедура ЗаписатьНаборПоПроцессу(Процесс, Знач ТаблицаИсточникОригинал, Замещать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Процесс) Тогда
		Возврат;
	КонецЕсли;
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Процесс.Установить(Процесс);
	
	ТаблицаИсточник = ТаблицаИсточникОригинал.Скопировать();
	
	Если ТаблицаИсточник.Колонки.Найти("УдалитьОтметкиВремениИдентификаторНабораЗаписей") <> Неопределено Тогда
		ТаблицаИсточник.Колонки.Удалить("УдалитьОтметкиВремениИдентификаторНабораЗаписей");
	КонецЕсли;
	
	Если ТаблицаИсточник.Колонки.Найти("ИдентификаторОтметкиВремени") <> Неопределено Тогда
		ТаблицаИсточник.Колонки.Удалить("ИдентификаторОтметкиВремени");
	КонецЕсли;
	
	Для каждого ИсточникСтрока Из ТаблицаИсточник Цикл
		
		Если Не ЗначениеЗаполнено(ИсточникСтрока.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ИсточникСтрока.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			ИсточникСтрока.Участник = СотрудникиВызовСервера.ОсновнойСотрудникПользователя(ИсточникСтрока.Участник);
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаКолонок = "";
	Для Каждого Стр Из ТаблицаИсточник.Колонки Цикл
		Если ИменаКолонок <> "" Тогда
			ИменаКолонок = ИменаКолонок + ", ";
		КонецЕсли;	
		ИменаКолонок = ИменаКолонок + Стр.Имя;
	КонецЦикла;	
	ТаблицаИсточник.Свернуть(ИменаКолонок);
	
	Для каждого ИсточникСтрока Из ТаблицаИсточник Цикл
		
		Если Не ЗначениеЗаполнено(ИсточникСтрока.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ИсточникСтрока);
		Запись.Процесс = Процесс;
		
	КонецЦикла;
	
	Набор.Записать(Замещать);
	
	ИнтеграцияЗадач.ПриИзмененииПравИсточника(Процесс);
	
КонецПроцедуры

Процедура ОбновитьВсеДанные() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей();
		Набор.Записать();
		
		ШаблонТекстаЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ТаблицаПроцесса.Ссылка
			|ИЗ
			|	БизнесПроцесс.%ИмяПроцесса% КАК ТаблицаПроцесса
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
			|		ПО ТаблицаПроцесса.Ссылка = УчастникиПроцессов.Процесс
			|ГДЕ
			|	УчастникиПроцессов.Процесс ЕСТЬ NULL
			|	И НЕ ТаблицаПроцесса.Ссылка В (&МассивИсключений)";
			
		МассивИсключений = Новый Массив;
		ТаблицаНабора = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей().ВыгрузитьКолонки();
			
		Для Каждого МетаданныеПроцесса Из Метаданные.БизнесПроцессы Цикл
			
			РезультатПустой = Ложь;
			Пока Не РезультатПустой Цикл
				
				Запрос = Новый Запрос(СтрЗаменить(ШаблонТекстаЗапроса, "%ИмяПроцесса%", МетаданныеПроцесса.Имя));
				Запрос.УстановитьПараметр("МассивИсключений", МассивИсключений);
				Результат = Запрос.Выполнить();
				РезультатПустой = Результат.Пустой();
				
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					ПроцессСсылка = Выборка.Ссылка;
					ПроцессОбъект = ПроцессСсылка.ПолучитьОбъект();
					
					ТаблицаНабора.Очистить();
					
					ЕстьУчастники = Ложь;
					Участники = ПраваДоступаНаБизнесПроцессы.ПолучитьТаблицуУчастниковПроцесса(ПроцессОбъект);
					Для Каждого Участник Из Участники Цикл
						ЕстьУчастники = ЗначениеЗаполнено(Участник.Участник);
						Запись = ТаблицаНабора.Добавить();
						ЗаполнитьЗначенияСвойств(Запись, Участник);
						Запись.Процесс = ПроцессСсылка;
					КонецЦикла;
					
					СоставРГ = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(ПроцессСсылка);
					Для Каждого СтрокаРГ Из СоставРГ Цикл
						ЕстьУчастники = ЗначениеЗаполнено(СтрокаРГ.Участник);
						Запись = ТаблицаНабора.Добавить();
						ЗаполнитьЗначенияСвойств(Запись, СтрокаРГ);
						Запись.Процесс = ПроцессСсылка;
					КонецЦикла;
					
					ТаблицаНабора.Свернуть("Процесс, Участник");
					РегистрыСведений.УчастникиПроцессов.ЗаписатьНаборПоПроцессу(ПроцессСсылка, ТаблицаНабора, Ложь);
					
					Если Не ЕстьУчастники Тогда
						МассивИсключений.Добавить(ПроцессСсылка);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
