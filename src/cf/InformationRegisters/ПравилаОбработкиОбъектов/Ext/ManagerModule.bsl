#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Вызывается при записи новой настройки и записывает настройку с отбором.
// 
// Параметры:
//  Ключ - Структура - Ключ записи
//  Настройка - ОпределяемыйТип.НастройкиДействий - Настройка действия
//
Процедура ПриЗаписиНовойНастройки(Ключ, Настройка) Экспорт
	
	Запись = СоздатьМенеджерЗаписи();
	
	Если Ключ.Свойство("ПравилоОбработки") Тогда
		ПравилоОбработки = Ключ.ПравилоОбработки;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запись.ПравилоОбработки = ПравилоОбработки;
	Запись.ВидДействия = Настройка.ВидДействия;
	Запись.Прочитать();
	
	Запись.ПравилоОбработки = ПравилоОбработки;
	Запись.ВидДействия = Настройка.ВидДействия;
	Запись.Настройка = Настройка.Ссылка;
	Запись.НастройкаВключена = Истина;
	
	Запись.ВидОбъекта = Справочники.ПравилаОбработки.ВидОбъектаКорневогоПравила(
		ПравилоОбработки);
	
	Запись.Записать();
	
КонецПроцедуры

// Возвращает правила обрабокти по указанным группам.
//
// Параметры:
//  ГруппыДляПравилОбработки - Массив - Группы для правил обработки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Правила обработки по группам.
//   * Группа            - СправочникСсылка.ПравилаОбработки - Группа для правил обработки.
//   * ВидДействия       - СправочникСсылка.ВидыДействий                       - Вид действия.
//   * Настройка         - ОпределяемыйТип.НастройкиДействий                   - Настройка действия.
//   * НастройкаВключена - Булево                                              - Настройка действия включена.
//
Функция ПравилаОбработкиПоГруппам(ГруппыДляПравилОбработки) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаОбработкиОбъектов.ПравилоОбработки КАК ПравилоОбработки,
		|	ПравилаОбработкиОбъектов.ВидДействия КАК ВидДействия,
		|	ПравилаОбработкиОбъектов.Настройка КАК Настройка,
		|	ПравилаОбработкиОбъектов.НастройкаВключена КАК НастройкаВключена
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК ПравилаОбработкиОбъектов
		|ГДЕ
		|	ПравилаОбработкиОбъектов.ПравилоОбработки В(&ГруппыДляПравилОбработки)");
	
	Запрос.УстановитьПараметр("ГруппыДляПравилОбработки", ГруппыДляПравилОбработки);
	
	РезультатЗапроса = Запрос.Выполнить();
	ПравилаОбработкиПоГруппам = РезультатЗапроса.Выгрузить();
	
	Возврат ПравилаОбработкиПоГруппам;
	
КонецФункции

// Возвращает правила обрабокти по указанным настройкам.
//
// Параметры:
//  МассивНастройкиДействий - Массив - Настройки действий.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Правила обработки по настройкам.
//   * Группа            - СправочникСсылка.ПравилаОбработки - Группа для правил обработки.
//   * ВидДействия       - СправочникСсылка.ВидыДействий                       - Вид действия.
//   * Настройка         - ОпределяемыйТип.НастройкиДействий                   - Настройка действия.
//   * НастройкаВключена - Булево                                              - Настройка действия включена.
//
Функция ПравилаОбработкиПоНастройкам(МассивНастройкиДействий) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаОбработкиОбъектов.ПравилоОбработки КАК ПравилоОбработки,
		|	ПравилаОбработкиОбъектов.ВидДействия КАК ВидДействия,
		|	ПравилаОбработкиОбъектов.Настройка КАК Настройка,
		|	ПравилаОбработкиОбъектов.НастройкаВключена КАК НастройкаВключена
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК ПравилаОбработкиОбъектов
		|ГДЕ
		|	ПравилаОбработкиОбъектов.Настройка В(&МассивНастройкиДействий)");
	
	Запрос.УстановитьПараметр("МассивНастройкиДействий", МассивНастройкиДействий);
	
	РезультатЗапроса = Запрос.Выполнить();
	ПравилаОбработкиПоГруппам = РезультатЗапроса.Выгрузить();
	
	Возврат ПравилаОбработкиПоГруппам;
	
КонецФункции

// Возвращает структуру ключа для получения настроек
//
// Возвращаемое значение:
//  КлючНастройки - Структура - задающая ключ настройки, со свойствами:
// * Действие - СправочникСсылка.Действие - необязательное
// * ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой
// * Подразделение - СправочникСсылка.СтруктураПредприятия - ссылка на подразделение
// * Тематика - СправочникСсылка.ТематикиДокументов - Ссылка на тематику
// * Организация - СправочникСсылка.Организации - ссылка на организацию
// * ДатаОбработки - Дата - дата обработки
// * ГрифДоступа - СправочникСсылка.ГрифыДоступа
// * ФормаДокумента - ПеречислениеСсылка.ВариантыФормДокументов
// * Важность - ПеречислениеСсылка.ВариантыВажностиОбъектов
//
Функция НовыйКлючНастройки() Экспорт
	
	КлючНастройки = Новый Структура;
	КлючНастройки.Вставить("ВидОбъекта", Неопределено);
	КлючНастройки.Вставить("ДатаОбработки", Дата('00010101'));
	КлючНастройки.Вставить("Тематика", Справочники.ТематикиДокументов.ПустаяСсылка());
	КлючНастройки.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	КлючНастройки.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	КлючНастройки.Вставить("ГрифДоступа", Справочники.ГрифыДоступа.ПустаяСсылка());
	КлючНастройки.Вставить("ФормаДокумента", Перечисления.ВариантыФормДокументов.ПустаяСсылка());
	КлючНастройки.Вставить("Важность", Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка());
	Возврат КлючНастройки;
	
КонецФункции

// Возвращает настройки правил обработки по указанному ключу.
// Отбираются правила с максимальными приоритетами.
//
// Параметры:
//   КлючНастройки - см. НовыйКлючНастройки 
//
// Возвращаемое значение:
//   ТаблицаЗначений - настройки действий, с колонками:
//     Порядок
//     ТипДействия
//     ВидДействия
//     Настройка
//     НастройкаВключена
//
Функция НастройкиПоКлючу(КлючНастройки) Экспорт
	
	ТаблицаПравил = НоваяТаблицаПравил();
	ЗаполнитьПодходящиеПравилаРекурсивно(КлючНастройки, 1, ТаблицаПравил);
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ВидОбъекта", КлючНастройки.ВидОбъекта);
	Запрос.Параметры.Вставить("ДатаОбработки", КлючНастройки.ДатаОбработки);
	Запрос.УстановитьПараметр("ПравилаОбработки", ТаблицаПравил);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаОбработки.ПравилоОбработки КАК ПравилоОбработки,
		|	ПравилаОбработки.НеДействует КАК НеДействует,
		|	ПравилаОбработки.ЭлементГруппировки КАК ЭлементГруппировки,
		|	ПравилаОбработки.ПриоритетТематики КАК ПриоритетТематики,
		|	ПравилаОбработки.ПриоритетОрганизации КАК ПриоритетОрганизации,
		|	ПравилаОбработки.ПриоритетПодразделения КАК ПриоритетПодразделения,
		|	ПравилаОбработки.ПриоритетФормыДокумента КАК ПриоритетФормыДокумента,
		|	ПравилаОбработки.ПриоритетГрифаДоступа КАК ПриоритетГрифаДоступа,
		|	ПравилаОбработки.ПриоритетВажности КАК ПриоритетВажности
		|ПОМЕСТИТЬ ДействующиеПравилаОбработки
		|ИЗ
		|	&ПравилаОбработки КАК ПравилаОбработки;
		| //////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта КАК ВидОбъекта,
		|	ВидыДействийНастройки.ВидДействия КАК ВидДействия,
		|	НастройкиОбработкиВидовОбъектов.Автор КАК Автор,
		|	ВидыДействийНастройки.ВидДействия.Тип КАК ТипДействия,
		|	ВидыДействийНастройки.НомерСтроки КАК Порядок,
		|	НастройкиОбработкиВидовОбъектов.Ссылка КАК НастройкаОбработки
		|ПОМЕСТИТЬ
		|	 НастройкиДействий
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК ВидыДействийНастройки
		|		ПО НастройкиОбработкиВидовОбъектов.Ссылка = ВидыДействийНастройки.Ссылка
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта = &ВидОбъекта
		|	И НастройкиОбработкиВидовОбъектов.ПометкаУдаления = ЛОЖЬ
		|	И НастройкиОбработкиВидовОбъектов.ДействуетС <= &ДатаОбработки
		|	И (НастройкиОбработкиВидовОбъектов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ КОНЕЦПЕРИОДА(НастройкиОбработкиВидовОбъектов.ДействуетПо, ДЕНЬ) >= &ДатаОбработки);
		| //////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Правила.ВидДействия КАК ВидДействия,
		|	Правила.Настройка КАК Настройка,
		|	Правила.ПравилоОбработки КАК ПравилоОбработки,
		|	Правила.НастройкаВключена КАК НастройкаВключена,
		|	ЕСТЬNULL(НастройкиДействий.Порядок, 9999) КАК Порядок,
		|	ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетТематики, 1) +
		|		ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетОрганизации, 1) +
		|		ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетПодразделения, 1) +
		|		ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетФормыДокумента, 1) +
		|		ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетГрифаДоступа, 1) +
		|		ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетВажности, 1) КАК Приоритет
		|ПОМЕСТИТЬ ПравилаСПриоритетами
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК Правила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиДействий КАК НастройкиДействий
		|		ПО Правила.ВидДействия = НастройкиДействий.ВидДействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействующиеПравилаОбработки КАК ДействующиеПравилаОбработки
		|		ПО Правила.ПравилоОбработки = ДействующиеПравилаОбработки.ПравилоОбработки
		|		И (ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетТематики, 0) > 0
		|			ИЛИ ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетОрганизации, 0) > 0
		|			ИЛИ ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетПодразделения, 0) > 0
		|			ИЛИ ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетФормыДокумента, 0) > 0
		|			ИЛИ ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетГрифаДоступа, 0) > 0
		|			ИЛИ ЕСТЬNULL(ДействующиеПравилаОбработки.ПриоритетВажности, 0) > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПравилаСПриоритетами.ВидДействия КАК ВидДействия,
		|	МАКСИМУМ(ПравилаСПриоритетами.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ МаксимальныеПриоритеты
		|ИЗ
		|	ПравилаСПриоритетами КАК ПравилаСПриоритетами
		|СГРУППИРОВАТЬ ПО
		|	ПравилаСПриоритетами.ВидДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПравилаСПриоритетами.ВидДействия КАК ВидДействия,
		|	МАКСИМУМ(ПравилаСПриоритетами.Настройка) КАК Настройка,
		|	МАКСИМУМ(ПравилаСПриоритетами.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ДействияСМаксимальнымиПриоритетами
		|ИЗ
		|	ПравилаСПриоритетами КАК ПравилаСПриоритетами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеПриоритеты КАК МаксимальныеПриоритеты
		|		ПО (МаксимальныеПриоритеты.ВидДействия = ПравилаСПриоритетами.ВидДействия)
		|		И (МаксимальныеПриоритеты.Приоритет = ПравилаСПриоритетами.Приоритет)
		|СГРУППИРОВАТЬ ПО
		|	ПравилаСПриоритетами.ВидДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДействияСМаксимальнымиПриоритетами.ВидДействия КАК ВидДействия,
		|	ДействияСМаксимальнымиПриоритетами.Настройка КАК Настройка,
		|	ПравилаСПриоритетами.НастройкаВключена КАК НастройкаВключена
		|ПОМЕСТИТЬ ПодходящиеДействия
		|ИЗ
		|	ДействияСМаксимальнымиПриоритетами КАК ДействияСМаксимальнымиПриоритетами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаСПриоритетами КАК ПравилаСПриоритетами
		|		ПО (ПравилаСПриоритетами.ВидДействия = ДействияСМаксимальнымиПриоритетами.ВидДействия)
		|		И (ПравилаСПриоритетами.Настройка = ДействияСМаксимальнымиПриоритетами.Настройка)
		|		И (ПравилаСПриоритетами.Приоритет = ДействияСМаксимальнымиПриоритетами.Приоритет)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиДействий.Порядок КАК Порядок,
		|	НастройкиДействий.ТипДействия КАК ТипДействия,
		|	НастройкиДействий.ВидДействия КАК ВидДействия,
		|	НастройкиДействий.НастройкаОбработки,
		|	ЕСТЬNULL(ПодходящиеДействия.Настройка, НЕОПРЕДЕЛЕНО) КАК Настройка,
		|	ЕСТЬNULL(ПодходящиеДействия.НастройкаВключена, ЛОЖЬ) КАК НастройкаВключена
		|ИЗ
		|	НастройкиДействий КАК НастройкиДействий
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПодходящиеДействия КАК ПодходящиеДействия
		|		ПО НастройкиДействий.ВидДействия = ПодходящиеДействия.ВидДействия
		|УПОРЯДОЧИТЬ ПО
		|	НастройкиДействий.Порядок";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Ключ по правилу обработки.
// 
// Параметры:
//  ПравилоОбработки - СправочникСсылка.ПравилаОбработки - Правило обработки
// 
// Возвращаемое значение:
//  Ключ - Структура - Ключ по правилу обработки.
//
Функция КлючПоПравилуОбработки(ПравилоОбработки) Экспорт
	
	Если ЗначениеЗаполнено(ПравилоОбработки) Тогда
		Ключ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПравилоОбработки,
			"Родитель, ЭлементГруппировки, НеДействует, ДействуетС, ДействуетПо");
	Иначе
		 Ключ = Новый Структура("Родитель, ЭлементГруппировки, НеДействует, ДействуетС, ДействуетПо");
	КонецЕсли;
	
	Ключ.Вставить("ПравилоОбработки", ПравилоОбработки);
	
	Возврат Ключ;
	
КонецФункции

// Возвращает настройки и виды действий по указанному правилу обработки.
//
// Параметры:
//   ПравилоОбработки - СправочникСсылка.ПравилаОбработки - анализируемое правило;
//   РеквизитыПравила - Структура, содержащая реквизиты правила.
//
// Возвращаемое значение:
//   ТаблицаЗначений - настроенные правила.
//
Функция НастройкиИВидыДействийДляПравила(ПравилоОбработки, РеквизитыПравила) Экспорт 
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(РеквизитыПравила.ЭлементГруппировки) 
		И Метаданные.ОпределяемыеТипы.ВидОбъектаСОбработкой.Тип.СодержитТип(
			ТипЗнч(РеквизитыПравила.ЭлементГруппировки)) Тогда
		ВидОбъекта = РеквизитыПравила.ЭлементГруппировки;
	Иначе
		ВсеРодителиЭлемента = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(ПравилоОбработки);
		КоличествоРодителей = ВсеРодителиЭлемента.Количество();
		Если КоличествоРодителей > 0 Тогда
			ВидОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ВсеРодителиЭлемента[КоличествоРодителей - 1], "ЭлементГруппировки");
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапросаНастройкиДействий =
		"ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта КАК ВидОбъекта,
		|	НастройкиОбработкиВидовОбъектов.Автор КАК Автор,
		|	ВидыДействийНастройки.ВидДействия КАК ВидДействия,
		|	ВидыДействийНастройки.НомерСтроки КАК Порядок
		|ПОМЕСТИТЬ
		|	НастройкиДействий
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК ВидыДействийНастройки
		|		ПО НастройкиОбработкиВидовОбъектов.Ссылка = ВидыДействийНастройки.Ссылка
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта = &ВидОбъекта
		|	И НастройкиОбработкиВидовОбъектов.ПометкаУдаления = ЛОЖЬ
		|	И НастройкиОбработкиВидовОбъектов.ДействуетС <= &ДействуетС
		|	И (НастройкиОбработкиВидовОбъектов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ НастройкиОбработкиВидовОбъектов.ДействуетПо >= &ДействуетС)
		|	И &УсловиеДействуетПо;
		|///////////////////////////////////////////////////////////////////////////////////
		|";

	Запрос.Параметры.Вставить("ВидОбъекта", ВидОбъекта);
	Запрос.Параметры.Вставить("ДействуетС", РеквизитыПравила.ДействуетС);
	
	Если ЗначениеЗаполнено(РеквизитыПравила.ДействуетПо) Тогда 
		ТекстЗапросаНастройкиДействий = СтрЗаменить(ТекстЗапросаНастройкиДействий,
			"&УсловиеДействуетПо", "
			|(НастройкиОбработкиВидовОбъектов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
			|	ИЛИ НастройкиОбработкиВидовОбъектов.ДействуетПо >= &ДействуетПо)");
		Запрос.Параметры.Вставить("ДействуетПо", РеквизитыПравила.ДействуетПо);
	Иначе 
		ТекстЗапросаНастройкиДействий = СтрЗаменить(ТекстЗапросаНастройкиДействий,
			"&УсловиеДействуетПо", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = 
		ТекстЗапросаНастройкиДействий +
		"ВЫБРАТЬ
		|	Правила.ВидДействия КАК ВидДействия,
		|	Правила.Настройка КАК Настройка,
		|	Правила.ПравилоОбработки КАК ПравилоОбработки,
		|	Правила.НастройкаВключена КАК НастройкаВключена,
		|	ЕСТЬNULL(НастройкиДействий.Порядок, 9999) КАК Порядок
		|ПОМЕСТИТЬ ПодходящиеПравила
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК Правила
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиДействий
		|ПО Правила.ВидДействия = НастройкиДействий.ВидДействия
		|ГДЕ
		|	Правила.ПравилоОбработки = &ПравилоОбработки
		|
		|; /////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ПодходящиеПравила.ВидДействия, НастройкиДействий.ВидДействия) КАК ВидДействия,
		|	ЕСТЬNULL(ПодходящиеПравила.Настройка, Неопределено) КАК Настройка,
		|	ЕСТЬNULL(ПодходящиеПравила.НастройкаВключена, ЛОЖЬ) КАК НастройкаВключена,
		|	ЕСТЬNULL(ПодходящиеПравила.ПравилоОбработки, Неопределено) КАК ПравилоОбработки,
		|	ЕСТЬNULL(ПодходящиеПравила.Порядок, НастройкиДействий.Порядок) КАК Порядок,
		|	ВЫБОР КОГДА ПодходящиеПравила.Настройка ЕСТЬ NULL
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ВЫБОР КОГДА ПодходящиеПравила.Настройка = НЕОПРЕДЕЛЕНО
		|			ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	КОНЕЦ КАК ЭтоПустаяНастройка
		|ИЗ
		|	ПодходящиеПравила
		|ПОЛНОЕ СОЕДИНЕНИЕ НастройкиДействий
		|ПО ПодходящиеПравила.ВидДействия = НастройкиДействий.ВидДействия
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|";
	Запрос.УстановитьПараметр("ПравилоОбработки", ПравилоОбработки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Переключает настройку действия в правиле обработки.
// 
// Параметры:
//  ПравилоОбработки - СправочникСсылка.ПравилаОбработки - Правило обработки
//  ВидДействия - СправочникСсылка.ВидыДействий - Вид действия
//  НастройкаВключена - Булево - признак включения/отключения настройки
//
Процедура ПереключитьНастройкуДействия(ПравилоОбработки, ВидДействия, НастройкаВключена) Экспорт 
	
	Запись = РегистрыСведений.ПравилаОбработкиОбъектов.СоздатьМенеджерЗаписи();
	Запись.ПравилоОбработки = ПравилоОбработки;
	Запись.ВидДействия = ВидДействия;
	Запись.Прочитать();
	
	Запись.ПравилоОбработки = ПравилоОбработки;
	Запись.ВидДействия = ВидДействия;
	Запись.НастройкаВключена = НастройкаВключена;
	
	Запись.Записать();
	
КонецПроцедуры

// Удалят настройку действия для указанного правила.
// 
// Параметры:
//  ПравилоОбработки - СправочникСсылка.ПравилаОбработки - Правило обработки
//  ВидДействия - СправочникСсылка.ВидыДействий - Вид действия
//
Процедура УдалитьНастройкуДействия(ПравилоОбработки, ВидДействия) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПравилоОбработки.Установить(ПравилоОбработки);
	НаборЗаписей.Отбор.ВидДействия.Установить(ВидДействия);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает пустую таблицу правил обработки.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица для наполнения правилами обработки.
//   	* ПравилоОбработки - СправочникСсылка.ПравилаОбработки
//   	* НеДействует - Булево
//   	* ЭлементГруппировки - ОпределяемыйТип.ВидОбъектаСОбработкой, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.ТематикиДокументов, СправочникСсылка.Организации
//   	* ПриоритетТематики - Число
//   	* ПриоритетОрганизации - Число
//   	* ПриоритетПодразделения – Число
//
Функция НоваяТаблицаПравил() Экспорт
	
	ТаблицаПравил = Новый ТаблицаЗначений();
	ТаблицаПравил.Колонки.Добавить("ПравилоОбработки", 
		Новый ОписаниеТипов("СправочникСсылка.ПравилаОбработки"));
	ТаблицаПравил.Колонки.Добавить("НеДействует", Новый ОписаниеТипов("Булево"));
	ТаблицаПравил.Колонки.Добавить("ЭлементГруппировки",
		Новый ОписаниеТипов("СправочникСсылка.ВидыДокументов, СправочникСсылка.ВидыМероприятий,
		|ПеречислениеСсылка.ВариантыВажностиОбъектов, ПеречислениеСсылка.ВариантыФормДокументов,
		|СправочникСсылка.СтруктураПредприятия, СправочникСсылка.ГрифыДоступа,
		|СправочникСсылка.ТематикиДокументов, СправочникСсылка.Организации"));
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТаблицаПравил.Колонки.Добавить("ПриоритетТематики", ТипЧисло);
	ТаблицаПравил.Колонки.Добавить("ПриоритетОрганизации", ТипЧисло);
	ТаблицаПравил.Колонки.Добавить("ПриоритетПодразделения", ТипЧисло);
	ТаблицаПравил.Колонки.Добавить("ПриоритетФормыДокумента", ТипЧисло);
	ТаблицаПравил.Колонки.Добавить("ПриоритетВажности", ТипЧисло);
	ТаблицаПравил.Колонки.Добавить("ПриоритетГрифаДоступа", ТипЧисло);
	
	Возврат ТаблицаПравил;
	
КонецФункции

// По ключу настроек рекурсивно заполняет таблицу подходящими правилами.
// 
// Параметры:
//   КлючНастройки - Структура - задающая ключ настройки, со свойствами:
//     Действие - СправочникСсылка.Действие - необязательное;
//     ДатаОбработки - Дата - обязательное;
//     ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой - вид объекта; 
//     Подразделение - СправочникСсылка.СтруктураПредприятия - ссылка на подразделение; 
//     Тематика - СправочникСсылка.ТематикиДокументов - Ссылка на тематику; 
//     Организация - СправочникСсылка.Организации - ссылка на организацию.
//   Уровень - Число - определяет уровень вложенности.
//   ТаблицаПравил - см. НоваяТаблицаПравил().
//   ТекущееПравило - СправочникСсылка.ПравилаОбработки - ссылка на текущее правило, от которого строим иерархию.
//   ЭтоПроверкаПравил - Булево - Истина, если проверяется пересечение настроек правил.
//
Процедура ЗаполнитьПодходящиеПравилаРекурсивно(КлючНастройки, Уровень, ТаблицаПравил,
	ТекущееПравило = Неопределено, ЭтоПроверкаПравил = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ВидОбъекта", КлючНастройки.ВидОбъекта);
	Запрос.Параметры.Вставить("ДатаОбработки", КлючНастройки.ДатаОбработки);
	Запрос.Параметры.Вставить("Уровень", Уровень);
	Запрос.Параметры.Вставить("Тематика", КлючНастройки.Тематика);
	Запрос.Параметры.Вставить("Организация", КлючНастройки.Организация);
	Запрос.Параметры.Вставить("ФормаДокумента", КлючНастройки.ФормаДокумента);
	Запрос.Параметры.Вставить("ГрифДоступа", КлючНастройки.ГрифДоступа);
	Запрос.Параметры.Вставить("Важность", КлючНастройки.Важность);
	
	// Найдем текущее правило по заданнам настройкам
	Если ЗначениеЗаполнено(ТекущееПравило) Тогда
		ЗапросПравила = 
			"ВЫБРАТЬ
			|	ПравилаОбработки.Ссылка КАК ПравилоВида
			|ПОМЕСТИТЬ ДействующиеПравилаОбработкиДляВида
			|ИЗ
			|	Справочник.ПравилаОбработки КАК ПравилаОбработки
			|ГДЕ
			|	ПравилаОбработки.Ссылка = &ТекущееПравило
			|	
			|;";
		Запрос.Параметры.Вставить("ТекущееПравило", ТекущееПравило);
		Условие = "ПО ПравилаОбработки.Родитель = ДействующиеПравилаОбработкиДляВида.ПравилоВида";
	Иначе
		ЗапросПравила = 
			"ВЫБРАТЬ
			|	ПравилаОбработки.Ссылка КАК ПравилоВида
			|ПОМЕСТИТЬ ДействующиеПравилаОбработкиДляВида
			|ИЗ
			|	Справочник.ПравилаОбработки КАК ПравилаОбработки
			|ГДЕ
			|	НЕ ПравилаОбработки.НеДействует
			|	И НЕ ПравилаОбработки.ПометкаУдаления
			|	И ПравилаОбработки.ЭлементГруппировки = &ВидОбъекта
			|	И ПравилаОбработки.ДействуетС <= &ДатаОбработки
			|	И (ПравилаОбработки.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
			|	ИЛИ КОНЕЦПЕРИОДА(ПравилаОбработки.ДействуетПо, ДЕНЬ) >= &ДатаОбработки)
			|;";
		Условие = "ПО ПравилаОбработки.Ссылка = ДействующиеПравилаОбработкиДляВида.ПравилоВида";
	КонецЕсли;
	
	// Найдем вложенные правила. Чем "глубже" находится правило, тем больше у него приоритет,
	// т.к. у него больше совпадающих с ключом полей
	Запрос.Текст = ЗапросПравила + "
		|//////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки,
		|	ПравилаОбработки.НеДействует КАК НеДействует,
		|	ПравилаОбработки.ЭлементГруппировки КАК ЭлементГруппировки,
		|	ПравилаОбработки.ВключатьПодчиненныеПодразделения КАК ВключатьПодчиненныеПодразделения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Справочник.ТематикиДокументов)
		|		И ПравилаОбработки.ЭлементГруппировки = &Тематика
		|			ТОГДА 20 * &Уровень
		|		КОГДА ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Справочник.ТематикиДокументов)
		|			ТОГДА 0
		|		ИНАЧЕ 10
		|	КОНЕЦ КАК ПриоритетТематики,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Справочник.Организации)
		|		И ПравилаОбработки.ЭлементГруппировки = &Организация
		|			ТОГДА 20 * &Уровень
		|		КОГДА ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Справочник.Организации)
		|			ТОГДА 0
		|		ИНАЧЕ 10
		|	КОНЕЦ КАК ПриоритетОрганизации,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Справочник.СтруктураПредприятия)
		|			ТОГДА 0
		|		ИНАЧЕ 10
		|	КОНЕЦ КАК ПриоритетПодразделения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Перечисление.ВариантыФормДокументов)
		|		И ПравилаОбработки.ЭлементГруппировки = &ФормаДокумента
		|			ТОГДА 20 * &Уровень
		|		КОГДА ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Перечисление.ВариантыФормДокументов)
		|			ТОГДА 0
		|		ИНАЧЕ 10
		|	КОНЕЦ КАК ПриоритетФормыДокумента,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Перечисление.ВариантыВажностиОбъектов)
		|		И ПравилаОбработки.ЭлементГруппировки = &Важность
		|			ТОГДА 20 * &Уровень
		|		КОГДА ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Перечисление.ВариантыВажностиОбъектов)
		|			ТОГДА 0
		|		ИНАЧЕ 10
		|	КОНЕЦ КАК ПриоритетВажности,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Справочник.ГрифыДоступа)
		|		И ПравилаОбработки.ЭлементГруппировки = &ГрифДоступа
		|			ТОГДА 20 * &Уровень
		|		КОГДА ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Справочник.ГрифыДоступа)
		|			ТОГДА 0
		|		ИНАЧЕ 10
		|	КОНЕЦ КАК ПриоритетГрифаДоступа
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ВНУТРЕННЕЕ Соединение ДействующиеПравилаОбработкиДляВида КАК ДействующиеПравилаОбработкиДляВида
		|		&Условие
		|ГДЕ
		|	НЕ ПравилаОбработки.НеДействует
		|	И НЕ ПравилаОбработки.ПометкаУдаления
		|	И (ПравилаОбработки.ЭлементГруппировки = &ВидОбъекта
		|	ИЛИ ПравилаОбработки.ЭлементГруппировки = &Тематика
		|	ИЛИ ПравилаОбработки.ЭлементГруппировки = &Организация
		|	ИЛИ ТИПЗНАЧЕНИЯ(ПравилаОбработки.ЭлементГруппировки) = ТИП(Справочник.СтруктураПредприятия)
		|	ИЛИ ПравилаОбработки.ЭлементГруппировки = &ФормаДокумента
		|	ИЛИ ПравилаОбработки.ЭлементГруппировки = &Важность
		|	ИЛИ ПравилаОбработки.ЭлементГруппировки = &ГрифДоступа)
		|	И ПравилаОбработки.ДействуетС <= &ДатаОбработки
		|	И (ПравилаОбработки.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
		|	ИЛИ КОНЕЦПЕРИОДА(ПравилаОбработки.ДействуетПо, ДЕНЬ) >= &ДатаОбработки)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", Условие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭтоПодходящееПодразделение = Ложь;
		
		Если ТипЗнч(Выборка.ЭлементГруппировки) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			Если Выборка.ВключатьПодчиненныеПодразделения Тогда
				
				ПодчиненныеПодразделения = СтруктураПредприятия.ПодчиненныеПодразделенияИерархия(
					Выборка.ЭлементГруппировки);
				
				Если ПодчиненныеПодразделения.Найти(КлючНастройки.Подразделение) = Неопределено
					Или КлючНастройки.Подразделение <> Выборка.ЭлементГруппировки И ЭтоПроверкаПравил Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				Если Выборка.ЭлементГруппировки <> КлючНастройки.Подразделение Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ЭтоПодходящееПодразделение = Истина;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПравил.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ЭтоПодходящееПодразделение Тогда
			РангПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ЭлементГруппировки, "Ранг");
			НоваяСтрока.ПриоритетПодразделения = 20 * Уровень + РангПодразделения;
		КонецЕсли;
		ЗаполнитьПодходящиеПравилаРекурсивно(
			КлючНастройки, Уровень + 1, ТаблицаПравил, Выборка.ПравилоОбработки, ЭтоПроверкаПравил);
	КонецЦикла;
	
КонецПроцедуры

// Вернет количество правил обработки 
// Параметры:
//  ВидОбъектаОбработки - ОпределяемыйТип.ВидОбъектаСОбработкой - вид объекта; 
//  ДатаОбработки - Дата
//
// Возвращаемое значение
//   Число
Функция КоличествоПравилОбработки(ВидОбъектаОбработки, ДатаОбработки) Экспорт   
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Группы.Ссылка КАК ПравилоОбработки
		|ПОМЕСТИТЬ НастройкиВерхнегоУровня
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|ГДЕ
		|	Группы.ЭлементГруппировки = &ВидОбъектаОбработки   
		|	И Группы.ДействуетС <= &ДатаОбработки
		|	И (Группы.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ КОНЕЦПЕРИОДА(Группы.ДействуетПо, ДЕНЬ) >= &ДатаОбработки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Группы.Ссылка
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители
		|		ПО (ГруппыРодители.Ссылка = Группы.Родитель)
		|ГДЕ
		|	ГруппыРодители.ЭлементГруппировки = &ВидОбъектаОбработки
		|	И Группы.ДействуетС <= &ДатаОбработки
		|	И (Группы.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ КОНЕЦПЕРИОДА(Группы.ДействуетПо, ДЕНЬ) >= &ДатаОбработки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Группы.Ссылка
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители
		|		ПО (ГруппыРодители.Ссылка = Группы.Родитель)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодителиРодителей
		|		ПО (ГруппыРодителиРодителей.Ссылка = ГруппыРодители.Родитель)
		|ГДЕ
		|	ГруппыРодителиРодителей.ЭлементГруппировки = &ВидОбъектаОбработки      
		|	И Группы.ДействуетС <= &ДатаОбработки
		|	И (Группы.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ КОНЕЦПЕРИОДА(Группы.ДействуетПо, ДЕНЬ) >= &ДатаОбработки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Правила.ПравилоОбработки КАК ПравилоОбработки,
		|	СУММА(ВЫБОР
		|			КОГДА Правила.НастройкаВключена
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ГруппаКоличество
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК Правила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиВерхнегоУровня КАК НастройкиВерхнегоУровня
		|		ПО Правила.ПравилоОбработки = НастройкиВерхнегоУровня.ПравилоОбработки
		|
		|СГРУППИРОВАТЬ ПО
		|	Правила.ПравилоОбработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПРЕДСТАВЛЕНИЕ(Группы.Ссылка) КАК ПредставлениеБезКоличества,
		|	Группы.Ссылка КАК ПравилоОбработки,
		|	Группы.Родитель КАК Родитель,
		|	Группы.ДействуетПо КАК ДействуетПо,
		|	Группы.ДействуетС КАК ДействуетС,
		|	Группы.НеДействует КАК НеДействует,
		|	Группы.ЭлементГруппировки КАК ЭлементГруппировки,
		|	Группы.ЭлементГруппировки.Наименование КАК НаименованиеЭлемента,
		|	Группы.ПометкаУдаления КАК ПометкаУдаления,
		|	ЕСТЬNULL(ГруппаКоличество.Количество, 0) КАК КоличествоНастроек
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиВерхнегоУровня КАК НастройкиВерхнегоУровня
		|		ПО (Группы.Ссылка = НастройкиВерхнегоУровня.ПравилоОбработки
		|				ИЛИ Группы.Родитель = НастройкиВерхнегоУровня.ПравилоОбработки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппаКоличество КАК ГруппаКоличество
		|		ПО Группы.Ссылка = ГруппаКоличество.ПравилоОбработки
		|ГДЕ
		|	НЕ Группы.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Родитель,
		|	ДействуетС УБЫВ,
		|	НаименованиеЭлемента");
	
	Запрос.УстановитьПараметр("ВидОбъектаОбработки", ВидОбъектаОбработки);
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
		
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица.Количество();
	
КонецФункции	
	
#КонецОбласти

#КонецЕсли