#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("ВидДействия") Тогда
		ТекущийВидДействия = Параметры.ВидДействия;  
		ВыделитьТекущийЭлемент = Истина;
	КонецЕсли;	
	
	Если Параметры.Свойство("ДействуетС") Тогда
		ДействуетС = Параметры.ДействуетС;  
		ВыделитьТекущийЭлементДерева = Истина;
	КонецЕсли;	
	Если Параметры.Свойство("ДействуетПо") Тогда
		ДействуетПо = Параметры.ДействуетПо;  
		ВыделитьТекущийЭлементДерева = Истина;
	КонецЕсли;	
	
	ЗаполнитьОтборыПоПараметрам();
	ЗаполнитьПравилаОбработки();
	НастроитьДекорации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДваУровняДереваГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПравилаОбработки" Тогда
		Элементы.СтраницыЕстьНетПравила.ТекущаяСтраница = Элементы.СтраницаПравилаЕсть;
		ЗаполнитьПравилаОбработки();
		РазвернутьГруппыУстановивПозицию(Параметр);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Группы.ТекущиеДанные;
	
	Если ИмяСобытия = "Запись_НастройкиДействий" Тогда
		ЗаполнитьДействияСохранивПозицию();
		Если ТекущиеДанные <> Неопределено Тогда
			ОбновитьКоличество(ТекущиеДанные.ПравилоОбработки);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ВидДокумента" Тогда
		Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.ВидОбъектаОбработки = Параметр Тогда
			ЗаполнитьДействияСохранивПозицию();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ВидыМероприятий" Тогда
		Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.ВидОбъектаОбработки = Параметр Тогда
			ЗаполнитьДействияСохранивПозицию();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Тематика_Запись" Тогда
		Если ТекущиеДанные <> Неопределено Тогда
			Элементы.СтраницыЕстьНетПравила.ТекущаяСтраница = Элементы.СтраницаПравилаЕсть;
			ЗаполнитьПравилаОбработки();
			РазвернутьГруппыУстановивПозицию(ТекущиеДанные.ПравилоОбработки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияПравилНетВидаДокументаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("ЭлементГруппировки",
		ОтборВидОбъектаОбработки);
		
	ОткрытьФорму("Справочник.ПравилаОбработки.Форма.ФормаЭлемента",
		ПараметрыФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыГруппы

&НаКлиенте
Процедура ГруппыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Группы.ТекущиеДанные;
	ПоказатьЗначение(, ТекущиеДанные.ПравилоОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПослеАктивизацииГруппы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ЗначенияЗаполнения = Новый Структура;
	ДанныеГруппы = Элементы.Группы.ТекущиеДанные;
	
	Если Копирование Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования",
			Элементы.Группы.ТекущиеДанные.ПравилоОбработки);
	ИначеЕсли ДанныеГруппы <> Неопределено
		И ЗначениеЗаполнено(ДанныеГруппы.ПравилоОбработки) Тогда 
		ЗначенияЗаполнения.Вставить("Родитель",
			Элементы.Группы.ТекущиеДанные.ПравилоОбработки);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ВидОбъектаОбработки) Тогда 
		ЗначенияЗаполнения.Вставить("ЭлементГруппировки", Параметры.ВидОбъектаОбработки);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ПравилаОбработки.Форма.ФормаЭлемента",
		ПараметрыФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.Группы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Элементы.Группы.ТекущиеДанные.ПравилоОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.Группы.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Группы", Новый Массив);
	Для Каждого ВыделеннаяСтрока Из Элементы.Группы.ВыделенныеСтроки Цикл
		ВыделенныеДанные = Группы.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(ВыделенныеДанные.ПравилоОбработки) Тогда
			ПараметрыОповещения.Группы.Добавить(ВыделенныеДанные.ПравилоОбработки);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОповещения.Группы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения.Вставить("ПометкаУдаления",
		Не Элементы.Группы.ТекущиеДанные.ПометкаУдаления);
	ОписаниеОповещения = Новый ОписаниеОповещения("ГруппыПередУдалениемПослеВопроса",
		ЭтаФорма,
		ПараметрыОповещения);
	ТекстВопроса = ?(Элементы.Группы.ТекущиеДанные.ПометкаУдаления,
		НСтр("ru = 'Снять пометку удаления?'"),
		НСтр("ru = 'Пометить на удаление?'"));
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения,
		ТекстВопроса);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДействия

&НаКлиенте
Процедура ДействияПриАктивизацииСтроки(Элемент)
	
	НастройкиДействийКлиент.ДействияПриАктивизацииСтроки(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	НастройкиДействийКлиент.ДействияПередНачаломДобавления(
		ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередУдалением(Элемент, Отказ)
	
	НастройкиДействийКлиент.ДействияПередУдалением(
		ЭтаФорма, КлючНастроек(Элементы.Группы.ТекущиеДанные), Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередНачаломИзменения(Элемент, Отказ)
	
	НастройкиДействийКлиент.ДействияПередНачаломИзменения(
		ЭтаФорма, КлючНастроек(Элементы.Группы.ТекущиеДанные), Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВидыДействийНеНастроеныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ДекорацияОбработкаНавигационнойСсылки(
		ЭтаФорма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ГруппыОбновить(Команда)
	
	Если Элементы.Группы.ТекущиеДанные = Неопределено Тогда
		ТекущаяГруппа = Неопределено;
	Иначе
		ТекущаяГруппа = Элементы.Группы.ТекущиеДанные.ПравилоОбработки;
	КонецЕсли;
	ЗаполнитьПравилаОбработки();
	РазвернутьГруппыУстановивПозицию(ТекущаяГруппа);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленныеГруппы = Не ПоказыватьУдаленныеГруппы;
	Элементы.ГруппыГруппыПоказыватьУдаленные.Пометка = ПоказыватьУдаленныеГруппы;
	Если Элементы.Группы.ТекущиеДанные = Неопределено Тогда
		ТекущаяГруппа = Неопределено;
	Иначе
		ТекущаяГруппа = Элементы.Группы.ТекущиеДанные.ПравилоОбработки;
	КонецЕсли;
	ЗаполнитьПравилаОбработки();
	РазвернутьГруппыУстановивПозицию(ТекущаяГруппа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГруппыДействия(Команда)
	
	ТекущиеДанные = Элементы.Группы.ТекущиеДанные;
	ЗаполнитьПравилаОбработки();
	Если ТекущиеДанные <> Неопределено
			И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбработки) Тогда
		РазвернутьГруппыУстановивПозицию(ТекущиеДанные.ПравилоОбработки);
	КонецЕсли;
	ЗаполнитьДействияСохранивПозицию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройку(Команда)
	
	НастройкиДействийКлиент.ОткрытьНастройкуДействия(ЭтаФорма,
		КлючНастроек(Элементы.Группы.ТекущиеДанные));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьКоличество(Группа)
	
	Если Не ЗначениеЗаполнено(Группа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВЫБОР КОГДА НастройкаВключена ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КоличествоНастроек
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК Правила
		|ГДЕ
		|	Правила.ПравилоОбработки = &ПравилоОбработки
		|");
	Запрос.УстановитьПараметр("ПравилоОбработки", Группа);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоНастроек = Выборка.КоличествоНастроек;
	Иначе
		КоличествоНастроек = 0;
	КонецЕсли;
	
	Элементы1 = Группы.ПолучитьЭлементы();
	Для Каждого Элемент1 Из Элементы1 Цикл
		Если Элемент1.ПравилоОбработки = Группа Тогда
			Если КоличествоНастроек <> 0 Тогда
				Элемент1.Представление = Элемент1.ПредставлениеБезКоличества 
					+ СтрШаблон(" (%1)", Формат(КоличествоНастроек, "ЧГ=0"));
			Иначе
				Элемент1.Представление = Элемент1.ПредставлениеБезКоличества;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		Элементы2 = Элемент1.ПолучитьЭлементы();
		Для Каждого Элемент2 Из Элементы2 Цикл
			Если Элемент2.ПравилоОбработки = Группа Тогда
				Элемент1.Представление = Элемент1.ПредставлениеБезКоличества;
				Если КоличествоНастроек <> 0 Тогда
					Элемент2.Представление = Элемент2.ПредставлениеБезКоличества 
						+ СтрШаблон(" (%1)", Формат(КоличествоНастроек, "ЧГ=0"));
				Иначе
					Элемент2.Представление = Элемент2.ПредставлениеБезКоличества;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПравилаОбработки()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Группы.Ссылка КАК ПравилоОбработки
		|Поместить НастройкиВерхнегоУровня
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|ГДЕ
		|	ЭлементГруппировки = &ВидОбъектаОбработки
		|
		|Объединить все
		|
		|ВЫБРАТЬ
		|	Группы.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители1
		|		ПО ГруппыРодители1.Ссылка = Группы.Родитель
		|ГДЕ
		|	ГруппыРодители1.ЭлементГруппировки = &ВидОбъектаОбработки
		|
		|Объединить все
		|
		|ВЫБРАТЬ
		|	Группы.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители1
		|		ПО ГруппыРодители1.Ссылка = Группы.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители2
		|		ПО ГруппыРодители2.Ссылка = ГруппыРодители1.Родитель
		|ГДЕ
		|	ГруппыРодители2.ЭлементГруппировки = &ВидОбъектаОбработки
		|
		|Объединить все
		|
		|ВЫБРАТЬ
		|	Группы.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители1
		|		ПО ГруппыРодители1.Ссылка = Группы.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители2
		|		ПО ГруппыРодители2.Ссылка = ГруппыРодители1.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители3
		|		ПО ГруппыРодители3.Ссылка = ГруппыРодители2.Родитель
		|ГДЕ
		|	ГруппыРодители3.ЭлементГруппировки = &ВидОбъектаОбработки
		|
		|Объединить все
		|
		|ВЫБРАТЬ
		|	Группы.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители1
		|		ПО ГруппыРодители1.Ссылка = Группы.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители2
		|		ПО ГруппыРодители2.Ссылка = ГруппыРодители1.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители3
		|		ПО ГруппыРодители3.Ссылка = ГруппыРодители2.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители4
		|		ПО ГруппыРодители4.Ссылка = ГруппыРодители3.Родитель
		|ГДЕ
		|	ГруппыРодители4.ЭлементГруппировки = &ВидОбъектаОбработки
		|
		|Объединить все
		|
		|ВЫБРАТЬ
		|	Группы.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители1
		|		ПО ГруппыРодители1.Ссылка = Группы.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители2
		|		ПО ГруппыРодители2.Ссылка = ГруппыРодители1.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители3
		|		ПО ГруппыРодители3.Ссылка = ГруппыРодители2.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители4
		|		ПО ГруппыРодители4.Ссылка = ГруппыРодители3.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители5
		|		ПО ГруппыРодители5.Ссылка = ГруппыРодители4.Родитель
		|ГДЕ
		|	ГруппыРодители5.ЭлементГруппировки = &ВидОбъектаОбработки
		|
		|Объединить все
		|
		|ВЫБРАТЬ
		|	Группы.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители1
		|		ПО ГруппыРодители1.Ссылка = Группы.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители2
		|		ПО ГруппыРодители2.Ссылка = ГруппыРодители1.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители3
		|		ПО ГруппыРодители3.Ссылка = ГруппыРодители2.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители4
		|		ПО ГруппыРодители4.Ссылка = ГруппыРодители3.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители5
		|		ПО ГруппыРодители5.Ссылка = ГруппыРодители4.Родитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ГруппыРодители6
		|		ПО ГруппыРодители6.Ссылка = ГруппыРодители5.Родитель
		|ГДЕ
		|	ГруппыРодители6.ЭлементГруппировки = &ВидОбъектаОбработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Правила.ПравилоОбработки КАК ПравилоОбработки,
		|	СУММА(ВЫБОР
		|		КОГДА Правила.НастройкаВключена
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ГруппаКоличество
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК Правила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиВерхнегоУровня КАК НастройкиВерхнегоУровня
		|		ПО Правила.ПравилоОбработки = НастройкиВерхнегоУровня.ПравилоОбработки
		|СГРУППИРОВАТЬ ПО
		|	Правила.ПравилоОбработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ПРЕДСТАВЛЕНИЕ(Группы.Ссылка) КАК ПредставлениеБезКоличества,
		|	Группы.Ссылка КАК ПравилоОбработки,
		|	Группы.ВключатьПодчиненныеПодразделения КАК ВключатьПодчиненныеПодразделения,
		|	Группы.Родитель КАК Родитель,
		|	Группы.ДействуетПо КАК ДействуетПо,
		|	Группы.ДействуетС КАК ДействуетС,
		|	Группы.НеДействует КАК НеДействует,
		|	Группы.ЭлементГруппировки КАК ЭлементГруппировки,
		|	Группы.ЭлементГруппировки.Наименование КАК НаименованиеЭлемента,
		|	Группы.ПометкаУдаления КАК ПометкаУдаления,
		|	ЕСТЬNULL(ГруппаКоличество.Количество, 0) КАК КоличествоНастроек
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиВерхнегоУровня КАК НастройкиВерхнегоУровня
		|		ПО Группы.Ссылка = НастройкиВерхнегоУровня.ПравилоОбработки
		|		ИЛИ Группы.Родитель = НастройкиВерхнегоУровня.ПравилоОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппаКоличество КАК ГруппаКоличество
		|		ПО Группы.Ссылка = ГруппаКоличество.ПравилоОбработки
		|ГДЕ
		|	(&УсловиеПометкиУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Родитель,
		|	ДействуетС Убыв,
		|	НаименованиеЭлемента");
	
	УсловиеОтбора = "ИСТИНА";
	УсловиеПометкиУдаления = "ИСТИНА";
	Запрос.УстановитьПараметр("ВидОбъектаОбработки", ОтборВидОбъектаОбработки);
		
	Если НЕ ПоказыватьУдаленныеГруппы Тогда
		УсловиеОтбора = УсловиеОтбора + "
			|	И НЕ Группы.ПометкаУдаления";
		УсловиеПометкиУдаления = УсловиеПометкиУдаления + "
			|	И НЕ Группы.ПометкаУдаления";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПометкиУдаления", УсловиеПометкиУдаления);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДеревоГрупп = РеквизитФормыВЗначение("Группы");
	ДеревоГрупп.Строки.Очистить();
	СтрокаВид = ДеревоГрупп.Строки.Добавить();
	СтрокаВид.Представление = НСтр("ru = 'Правила обработки'");
	СтрокаВид.ПредставлениеБезКоличества = СтрокаВид.Представление;
	
	ВсеВетки = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Родитель) Тогда
			НоваяСтрока = СтрокаВид.Строки.Добавить();
			ПополняемаяСтрока = НоваяСтрока;
		Иначе

			ПополняемаяСтрока = ВсеВетки.Получить(Выборка.Родитель);
			Если ПополняемаяСтрока = Неопределено Тогда
				ПополняемаяСтрока = СтрокаВид;
			КонецЕсли;
			
			НоваяСтрока = ПополняемаяСтрока.Строки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ТипЭлемента = ТипЗнч(Выборка.ЭлементГруппировки);
		НоваяСтрока.РодительскоеПравило = Выборка.Родитель;
		НоваяСтрока.ПредставлениеБезКоличества = ПредставлениеГруппы(
			ТипЭлемента,
			НоваяСтрока.ПредставлениеБезКоличества,
			Выборка.ДействуетС,
			Выборка.ДействуетПо,
			Выборка.ВключатьПодчиненныеПодразделения);
		
		Если Выборка.КоличествоНастроек <> 0 Тогда
			НоваяСтрока.Представление = НоваяСтрока.ПредставлениеБезКоличества
				+ СтрШаблон(" (%1)", Формат(Выборка.КоличествоНастроек, "ЧГ=0"));
		Иначе
			НоваяСтрока.Представление = НоваяСтрока.ПредставлениеБезКоличества;
		КонецЕсли;
		
		Если ТипЭлемента = Тип("СправочникСсылка.ТематикиДокументов") Тогда 
			НоваяСтрока.Тематика = Выборка.ЭлементГруппировки;
			НоваяСтрока.ВидОбъектаОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Выборка.ЭлементГруппировки, "ВидДокумента");
		Иначе 
			НоваяСтрока.ВидОбъектаОбработки = Выборка.ЭлементГруппировки;
		КонецЕсли;
		
		ВсеВетки.Вставить(Выборка.ПравилоОбработки, НоваяСтрока);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоГрупп, "Группы");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппыУстановивПозицию(ТекущаяГруппа)
	
	Элементы1 = Группы.ПолучитьЭлементы();
	Для Каждого Элемент1 Из Элементы1 Цикл
		Элементы.Группы.Развернуть(Элемент1.ПолучитьИдентификатор(), Истина);
		Если Элемент1.ПравилоОбработки = ТекущаяГруппа 
			И ЗначениеЗаполнено(ТекущаяГруппа) Тогда
			Элементы.Группы.ТекущаяСтрока = Элемент1.ПолучитьИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяГруппа) Тогда
			Элементы2 = Элемент1.ПолучитьЭлементы();
			Для Каждого Элемент2 Из Элементы2 Цикл
				Если Элемент2.ПравилоОбработки = ТекущаяГруппа Тогда
					Элементы.Группы.ТекущаяСтрока = Элемент2.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеАктивизацииГруппы()
	
	МожноДобавить = Ложь;
	Если Элементы.Группы.ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.Группы.ТекущиеДанные.ПравилоОбработки) Тогда 
			МожноДобавить = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппыСкопировать.Доступность = МожноДобавить;
	Элементы.ГруппыИзменить.Доступность = МожноДобавить;
	Элементы.ГруппыУдалить.Доступность = МожноДобавить;
	Элементы.ГруппыКонтекстУдалить.Доступность = МожноДобавить;	
	Элементы.ГруппыКонтекстИзменить.Доступность = МожноДобавить;
	
	ЗаполнитьДействияСохранивПозицию();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПередУдалениемПослеВопроса(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПометкуУдаленияГрупп(ПараметрыОповещения.Группы,
		ПараметрыОповещения.ПометкаУдаления);
		
	Если Элементы.Группы.ТекущиеДанные = Неопределено Тогда
		ТекущаяГруппа = Неопределено;
	Иначе
		ТекущаяГруппа = Элементы.Группы.ТекущиеДанные.ПравилоОбработки;
	КонецЕсли;
	
	Оповестить("Запись_ПравилаОбработки");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПометкуУдаленияГрупп(Группы, ПометкаУдаления)
	
	Для Каждого Группа Из Группы Цикл
		ЗаблокироватьДанныеДляРедактирования(Группа);
		ГруппаОбъект = Группа.ПолучитьОбъект();
		ГруппаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроек(ТекущиеДанные)
	
	Ключ = Новый Структура;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ключ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбработки) Тогда
		Ключ.Вставить("ПравилоОбработки", ТекущиеДанные.ПравилоОбработки);
		Ключ.Вставить("Родитель", ТекущиеДанные.РодительскоеПравило);
		Ключ.Вставить("ЭлементГруппировки", ТекущиеДанные.ЭлементГруппировки);
		Ключ.Вставить("НеДействует", ТекущиеДанные.НеДействует);
		Ключ.Вставить("ДействуетС", ТекущиеДанные.ДействуетС);
		Ключ.Вставить("ДействуетПо", ТекущиеДанные.ДействуетПо);
		Возврат Ключ;
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДействияСохранивПозицию() Экспорт 
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("ВидДействия", Неопределено);
	ТекущаяСтрока.Вставить("Этап", Неопределено);
	ТекущаяСтрока.Вставить("Участник", Неопределено);
	
	Если ВыделитьТекущийЭлемент Тогда
		ТекущаяСтрока.ВидДействия = ТекущийВидДействия;
		ВыделитьТекущийЭлемент = Ложь;
	КонецЕсли;	
	
	Если Элементы.Действия.ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Элементы.Действия.ТекущиеДанные);
	КонецЕсли;
	
	ДанныеГруппы = Элементы.Группы.ТекущиеДанные;
	Если ДанныеГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДействияНаСервере(КлючНастроек(ДанныеГруппы));
	
	Элементы1 = Действия.ПолучитьЭлементы();
	Для Каждого Элемент1 Из Элементы1 Цикл
		Элементы.Действия.Развернуть(Элемент1.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДанныеГруппы.ПравилоОбработки) Тогда
		Элементы.СтраницыДействия.ТекущаяСтраница = Элементы.СтраницаКореньПравил;
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыДействия.ТекущаяСтраница = ?(Элементы1.Количество() <> 0,
		Элементы.СтраницаДействияЕсть,
		Элементы.СтраницаДействийНет);
	
	Для Каждого Элемент1 Из Элементы1 Цикл
		Если Элемент1.ВидДействия = ТекущаяСтрока.ВидДействия Тогда
			Элементы.Действия.ТекущаяСтрока = Элемент1.ПолучитьИдентификатор();
			Элементы2 = Элемент1.ПолучитьЭлементы();
			Для Каждого Элемент2 Из Элементы2 Цикл
				Если Элемент2.Этап = ТекущаяСтрока.Этап
					И Элемент2.Участник = ТекущаяСтрока.Участник Тогда
					Элементы.Действия.ТекущаяСтрока = Элемент2.ПолучитьИдентификатор();
					Элементы3 = Элемент2.ПолучитьЭлементы();
					Для Каждого Элемент3 Из Элементы3 Цикл
						Если Элемент3.Участник = ТекущаяСтрока.Участник Тогда
							Элементы.Действия.ТекущаяСтрока = Элемент3.ПолучитьИдентификатор();
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДействияНаСервере(КлючНастроек)
	
	НастройкиДействий.ЗаполнитьДействияДляПравилаОбработки(Действия, 
		КлючНастроек, ТекущийВидДействия);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьОтборыПоПараметрам()
	
	Параметры.Свойство("ВидОбъектаОбработки", ОтборВидОбъектаОбработки);
	Параметры.Свойство("Тематика", ОтборТематика);
	
	Если ЗначениеЗаполнено(ОтборТематика) Тогда
		
		Заголовок = СтрШаблон(НСтр("ru = 'Правила обработки документов (%1)'"),
			ОтборТематика);
			
		ЕстьПравила = ЕстьПравила(ОтборТематика,
			ПоказыватьУдаленныеГруппы);
		Если ЕстьПравила Тогда
			Элементы.СтраницыЕстьНетПравила.ТекущаяСтраница = Элементы.СтраницаПравилаЕсть;
		Иначе
			Элементы.СтраницыЕстьНетПравила.ТекущаяСтраница = Элементы.СтраницаПравилНетТематика;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ОтборВидОбъектаОбработки) Тогда
		
		Если ТипЗнч(ОтборВидОбъектаОбработки) = Тип("СправочникСсылка.ВидыДокументов") Тогда
			Заголовок = СтрШаблон(
				НСтр("ru = 'Правила обработки документов (%1)'"),
				ОтборВидОбъектаОбработки);
		ИначеЕсли ТипЗнч(ОтборВидОбъектаОбработки) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
			Заголовок = СтрШаблон(
				НСтр("ru = 'Правила обработки мероприятий (%1)'"),
				ОтборВидОбъектаОбработки);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип вида объекта обработки %1 (%2).'"),
				ОтборВидОбъектаОбработки,
				ТипЗнч(ОтборВидОбъектаОбработки));
		КонецЕсли;
		
		ЕстьПравила = ЕстьПравила(ОтборВидОбъектаОбработки,
			ПоказыватьУдаленныеГруппы);
		Если ЕстьПравила Тогда
			Элементы.СтраницыЕстьНетПравила.ТекущаяСтраница = Элементы.СтраницаПравилаЕсть;
		Иначе
			Элементы.СтраницыЕстьНетПравила.ТекущаяСтраница = Элементы.СтраницаПравилНетВидаДокумента;
		КонецЕсли;
		
	Иначе
		
		ЕстьПравила = Истина;
		Элементы.СтраницыЕстьНетПравила.ТекущаяСтраница = Элементы.СтраницаПравилаЕсть;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПравила(Значение, ПоказыватьУдаленныеГруппы)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Группы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаОбработки КАК Группы
		|ГДЕ
		|	
		|	" + ?(ПоказыватьУдаленныеГруппы, "", "НЕ Группы.ПометкаУдаления") + "
		|");

	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ТематикиДокументов") Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И (ЭлементГруппировки = &Значение
			|		ИЛИ ЭлементГруппировки = &ВидОбъектаОбработки)";
		Запрос.УстановитьПараметр("ВидОбъектаОбработки", 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение, "ВидДокумента"));
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|	И ЭлементГруппировки = &Значение";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Значение", Значение);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеГруппы(ТипЭлемента, ПредставлениеБезКоличества, ДействуетС, ДействуетПо,
	ВключатьПодчиненныеПодразделения)
	
	ИтоговоеПредставление = "";
	ТекстВключаяПодчиненные = "";
	Если ТипЭлемента = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Если ВключатьПодчиненныеПодразделения Тогда
			ТекстВключаяПодчиненные = НСтр("ru = ', включая подчиненные'");
		Иначе
			ТекстВключаяПодчиненные = НСтр("ru = ', не включая подчиненные'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДействуетС) И ЗначениеЗаполнено(ДействуетПо) Тогда 
		ИтоговоеПредставление = ПредставлениеБезКоличества + " " + СтрШаблон(
			НСтр("ru = '(с %1 по %2, %3%4)'"),
			Формат(ДействуетС, "ДЛФ=D"), Формат(ДействуетПо, "ДЛФ=D"),
			Строка(ТипЭлемента),
			ТекстВключаяПодчиненные);
	ИначеЕсли ЗначениеЗаполнено(ДействуетС) Тогда 
		ИтоговоеПредставление = ПредставлениеБезКоличества + " " + СтрШаблон(
			НСтр("ru = '(с %1, %2%3)'"), Формат(ДействуетС, "ДЛФ=D"),
			Строка(ТипЭлемента),
			ТекстВключаяПодчиненные);
	ИначеЕсли ЗначениеЗаполнено(ДействуетПо) Тогда 
		ИтоговоеПредставление = ПредставлениеБезКоличества + " " + СтрШаблон(
			НСтр("ru = '(действует по %1, %2%3)'"), Формат(ДействуетПо, "ДЛФ=D"),
			Строка(ТипЭлемента),
			ТекстВключаяПодчиненные);
	КонецЕсли;
	
	Возврат ИтоговоеПредставление;
	
КонецФункции

&наКлиенте
Процедура РазвернутьДваУровняДереваГрупп()
	
	ЭтоВтораяСтрока = Истина;
	НашлиПересечение = Истина;  
	ЕстьСтроки2Уровня = Ложь;
	
	Если ВыделитьТекущийЭлементДерева Тогда
		ЭтоВтораяСтрока = Ложь;
		НашлиПересечение = Ложь;
	КонецЕсли;	  
	
	КоллекцияСтрок = Группы.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.Группы.Развернуть(ИдентификаторСтроки, Ложь);
		
		КоллекцияПодчиненныхСтрок = Строка.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из КоллекцияПодчиненныхСтрок Цикл 
			
			ЕстьСтроки2Уровня = Истина;
			ИдентификаторСтроки = ПодчиненнаяСтрока.ПолучитьИдентификатор();
			Элементы.Группы.Развернуть(ИдентификаторСтроки, Ложь);
			
			Если ЭтоВтораяСтрока Тогда
				Элементы.Группы.ТекущаяСтрока = ИдентификаторСтроки;
				ЭтоВтораяСтрока = Ложь;
			КонецЕсли;
			
			//ДействуетС  ДействуетПо
			Если ВыделитьТекущийЭлементДерева Тогда
				
				ЕстьПересечение = Ложь;
				
				Если ЗначениеЗаполнено(ДействуетС) И ЗначениеЗаполнено(ДействуетПо) Тогда
					
					Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетС) И ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетПо) Тогда

						// Пересечение: a.start <= b.end AND a.end >= b.start - это если все 4 заполнены
						Если ДействуетС <= ПодчиненнаяСтрока.ДействуетПо И ДействуетПо >= ПодчиненнаяСтрока.ДействуетС Тогда
							
							ЕстьПересечение = Истина;
							
						КонецЕсли;		
						
					ИначеЕсли ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетС) И Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетПо) Тогда	
						
						// начало попадает в отрезок
						Если ПодчиненнаяСтрока.ДействуетС >= ДействуетС И ПодчиненнаяСтрока.ДействуетС <= ДействуетПо Тогда
							
							ЕстьПересечение = Истина;
							
						КонецЕсли;		

					ИначеЕсли Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетС) И ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетПо) Тогда	
						
						// конец попадает в отрезок
						Если ПодчиненнаяСтрока.ДействуетПо >= ДействуетС И ПодчиненнаяСтрока.ДействуетПо <= ДействуетПо Тогда
							
							ЕстьПересечение = Истина;
							
						КонецЕсли;		
						
					КонецЕсли;	     
					
				ИначеЕсли ЗначениеЗаполнено(ДействуетС) И Не ЗначениеЗаполнено(ДействуетПо) Тогда	  
					
					Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетС) И ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетПо) Тогда

						// наше начало попадает в их отрезок
						Если ДействуетС >= ПодчиненнаяСтрока.ДействуетС И ДействуетС <=ПодчиненнаяСтрока.ДействуетПо Тогда
							
							ЕстьПересечение = Истина;
							
						КонецЕсли;		
						
					ИначеЕсли ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетС) И Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетПо) Тогда	
						
						ЕстьПересечение = Истина; // тут всегда есть совпадение, оба отрезка уходят вправо в бесконечность

					ИначеЕсли Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетС) И ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетПо) Тогда	
						
						// наше начало меньше их конца
						Если ДействуетС <= ПодчиненнаяСтрока.ДействуетПо Тогда
							
							ЕстьПересечение = Истина;
							
						КонецЕсли;		
						
					КонецЕсли;

				ИначеЕсли Не ЗначениеЗаполнено(ДействуетС) И ЗначениеЗаполнено(ДействуетПо) Тогда	  
					
					Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетС) И ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетПо) Тогда

						// наш конец попадает в их отрезок
						Если ДействуетПо >= ПодчиненнаяСтрока.ДействуетС И ДействуетПо <=ПодчиненнаяСтрока.ДействуетПо Тогда
							
							ЕстьПересечение = Истина;
							
						КонецЕсли;		
						
					ИначеЕсли ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетС) И Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетПо) Тогда	
						
						// наш конец больше их начала
						Если ДействуетПо >= ПодчиненнаяСтрока.ДействуетС Тогда
							
							ЕстьПересечение = Истина;
							
						КонецЕсли;		

					ИначеЕсли Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетС) И ЗначениеЗаполнено(ПодчиненнаяСтрока.ДействуетПо) Тогда	
						
						ЕстьПересечение = Истина; // тут всегда есть совпадение, оба отрезка уходят влево в бесконечность
						
					КонецЕсли;
					
				КонецЕсли;	
				
				Если ЕстьПересечение Тогда
					Элементы.Группы.ТекущаяСтрока = ИдентификаторСтроки;
					ВыделитьТекущийЭлементДерева = Ложь;  
					НашлиПересечение = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если НашлиПересечение = Ложь И ЕстьСтроки2Уровня Тогда
		Сообщить(НСтр("ru = 'Нет правил, действующих в период действия настройки. Вам нужно создать их.'"));
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере
Процедура НастроитьДекорации()
	
	Если ТипЗнч(Параметры.ВидОбъектаОбработки) = Тип("СправочникСсылка.ВидыДокументов") Тогда
		
		ШаблонНетВидовогоСостава =
			НСтр("ru = 'Для выбранного вида документов нет ни одного правила. <a href=""НастроитьВидОбъекта"">Добавить</a>'");
		ШаблонВидыДействийНеНастроены =
			НСтр("ru = 'Для выбранного вида документов не настроены действия. <a href=""НастроитьВидОбъекта"">Настроить</a>'");
		
	ИначеЕсли ТипЗнч(Параметры.ВидОбъектаОбработки) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
		
		ШаблонНетВидовогоСостава =
			НСтр("ru = 'Для выбранного вида мероприятий нет ни одного правила. <a href=""НастроитьВидОбъекта"">Добавить</a>'");
		ШаблонВидыДействийНеНастроены =
			НСтр("ru = 'Для выбранного вида мероприятий не настроены действия. <a href=""НастроитьВидОбъекта"">Настроить</a>'");
		
	Иначе
		
		ШаблонНетВидовогоСостава =
			НСтр("ru = 'Для выбранного вида объекта нет ни одного правила. <a href=""НастроитьВидОбъекта"">Добавить</a>'");
		ШаблонВидыДействийНеНастроены =
			НСтр("ru = 'Для выбранного вида объекта не настроены действия. <a href=""НастроитьВидОбъекта"">Настроить</a>'");
		
	КонецЕсли;
	
	Элементы.ДекорацияПравилНетЭлементВидовогоСостава.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		ШаблонНетВидовогоСостава);
	Элементы.ДекорацияВидыДействийНеНастроены.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		ШаблонВидыДействийНеНастроены);
	
КонецПроцедуры

#КонецОбласти