#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обновляет записи по задаче.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//  КэшДанных - Структура,
//              Неопределено.
// 
Процедура ОбновитьПоЗадаче(Задача, КэшДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.Задача");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РеестрЗадачПоАвторам");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Задача", Задача);
		Блокировка.Заблокировать();
		
		РеестрыЗадачи = Справочники.РеестрыЗадач.РеестрыЗадачи(Задача, КэшДанных);
		Если КэшДанных <> Неопределено И Не КэшДанных.Свойство("РеестрыЗадачи") Тогда
			КэшДанных.Вставить("РеестрыЗадачи", РеестрыЗадачи);
		КонецЕсли;
		
		ВостребованныеРеестры = Новый Соответствие;
		Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
			ВостребованныеРеестры.Вставить(РеестрЗадачи, Истина);
		КонецЦикла;
		
		Если РеестрыЗадачи.Количество() > 0 Тогда
			ДанныеРеестра = ДанныеРеестра(Задача, КэшДанных);
		Иначе
			ДанныеРеестра = НовыеДанныеРеестра();
		КонецЕсли;
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Задача.Установить(Задача);
		
		НаборЗаписей.Прочитать();
		
		СтарыеСтрокиРеестров = Новый Соответствие;
		Для Каждого СтараяЗапись Из НаборЗаписей Цикл
			СтарыеСтрокиРеестров[СтараяЗапись.РеестрЗадач] = СтараяЗапись;
		КонецЦикла;
		
		// Добавим новые и обновим существующие записи.
		Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
			
			НужноЗаписатьДанныеРеестра = Ложь;
			
			СтараяСтрокаРеестра = СтарыеСтрокиРеестров[РеестрЗадачи];
			ЭтоНовыйРеестр = СтараяСтрокаРеестра = Неопределено;
			Если ЭтоНовыйРеестр Тогда
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.РеестрЗадач = РеестрЗадачи;
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеРеестра);
				
			Иначе
				
				ЗаполнитьЗначенияСвойств(СтараяСтрокаРеестра, ДанныеРеестра);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Удалим невостребованные записи.
		КоличествоЭлементов = НаборЗаписей.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			
			СтараяСтрокаРеестра = НаборЗаписей[КоличествоЭлементов - Индекс];
			
			ЭтоВостребованныйРеестр =
				ВостребованныеРеестры[СтараяСтрокаРеестра.РеестрЗадач] = Истина;
			ЭтоАктуальнаяДатаРеестра =
				СтараяСтрокаРеестра.Дата = ДанныеРеестра.Дата;
			
			Если ЭтоВостребованныйРеестр И ЭтоАктуальнаяДатаРеестра Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей.Удалить(СтараяСтрокаРеестра);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует данные действий задач.
// 
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные действий задач:
//   * Задача - ДокументСсылка.Задача.
//   * Заголовок - Строка.
//   * Выполнена - Булево.
//   * Приоритет - СправочникСсылка.ПриоритетыЗадач.
//   * ВидСостоянияЗадачи - ПеречислениеСсылка.ВидыСостоянийЗадач.
//   * РезультатЗадачи - СправочникСсылка.РезультатыЗадач.
//   * Флаг - ПеречислениеСсылка.ФлагиОбъектов.
//
Функция ДанныеЗадач(МассивЗадач) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрЗадачПоАвторам.Задача КАК Задача,
		|	РеестрЗадачПоАвторам.Заголовок КАК Заголовок,
		|	РеестрЗадачПоАвторам.Выполнена КАК Выполнена,
		|	РеестрЗадачПоАвторам.Приоритет КАК Приоритет,
		|	РеестрЗадачПоАвторам.ВидСостоянияЗадачи КАК ВидСостоянияЗадачи,
		|	РеестрЗадачПоАвторам.РезультатЗадачи КАК РезультатЗадачи,
		|	РеестрЗадачПоАвторам.СостояниеКонтроля КАК СостояниеКонтроля,
		|	РеестрЗадачПоАвторам.КонтрольныйСрок КАК КонтрольныйСрок,
		|	РеестрЗадачПоАвторам.КонтрольныйСрокОбщий КАК КонтрольныйСрокОбщий,
		|	РеестрЗадачПоАвторам.Флаг КАК Флаг
		|ИЗ
		|	РегистрСведений.РеестрЗадачПоАвторам КАК РеестрЗадачПоАвторам
		|ГДЕ
		|	РеестрЗадачПоАвторам.Задача В (&МассивЗадач)");
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	ДанныеЗадач = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеЗадач;
	
КонецФункции

// Определяет задачи реестра.
// 
// Параметры:
//  РеестрЗадач - СправочникСсылка.РеестрыЗадач
//  Состояние - Строка
//  ТолькоПерваяПорция - Булево
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Задача - ДокументСсылка.Задача
//   * Заголовок - Строка
//
Функция ЗадачиРеестра(РеестрЗадач, Состояние, ТолькоПерваяПорция) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Состояние = "ПросроченоИОжидаетВыполнения" Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 20
			|	РеестрЗадачПоАвторам.Задача КАК Задача,
			|	РеестрЗадачПоАвторам.Заголовок КАК Заголовок
			|ИЗ
			|	РегистрСведений.РеестрЗадачПоАвторам КАК РеестрЗадачПоАвторам
			|ГДЕ
			|	РеестрЗадачПоАвторам.ПросроченаИОжидаетВыполнения
			|	И РеестрЗадачПоАвторам.РеестрЗадач = &РеестрЗадач");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестное состояние %1'"),
			Состояние);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеестрЗадач) Тогда
		ЗадачиРееестра = Новый ТаблицаЗначений;
		ЗадачиРееестра.Колонки.Добавить("Задача");
		ЗадачиРееестра.Колонки.Добавить("Заголовок");
		Возврат ЗадачиРееестра;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РеестрЗадач", РеестрЗадач);
	
	Если Не ТолькоПерваяПорция Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 20", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗадачиРееестра = РезультатЗапроса.Выгрузить();
	
	Возврат ЗадачиРееестра;
	
КонецФункции

// Определяет кэшируемые в данном регистре реквизиты задач.
//
// Возвращаемое значение:
//  Строка - Кэшируемые в данном регистре реквизиты задач.
//
Функция КэшируемыеРеквизитыЗадач() Экспорт
	
	Возврат "Автор, ВидЗадачи, ВидПриложения, Дата, ДатаВыполнения, ДатаНачала, ДатаНачалаПлан, ДатаОтмены,
		|ДатаСоздания, Заголовок, Приоритет, Проведен, Проект, РезультатЗадачи, 
		|СостояниеЗадачи, ТипПриложения, Срок, Флаг, Ссылка";
	
КонецФункции

// Помечает задачи просроченными.
//
Процедура ПометитьПросроченныеЗадачи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеестрЗадачПоАвторам.Задача
		|ИЗ
		|	РегистрСведений.РеестрЗадачПоАвторам КАК РеестрЗадачПоАвторам
		|ГДЕ
		|	РеестрЗадачПоАвторам.МожетБытьПросрочена
		|	И РеестрЗадачПоАвторам.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи)
		|	И РеестрЗадачПоАвторам.Срок <= &ТекущаяДатаСеанса
		|	И РеестрЗадачПоАвторам.Срок <> ДАТАВРЕМЯ(1, 1, 1)");
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//@skip-check query-in-loop
		ОбновитьПоЗадаче(Выборка.Задача);
	КонецЦикла;
	
КонецПроцедуры

// Определяет просрочены ли задачи.
//
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача - Задачи.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Признаки просрочки ожидающих выполнения задач:
//   * Ключ - ДокументСсылка.Задача - Задача.
//   * Значение - Булево - Просрочена и ожидает выполнения.
//
Функция ЭтоПросроченныеИОжидающиеВыполненияЗадачи(МассивЗадач) Экспорт
	
	ЭтоПросроченныеИОжидающиеВыполненияЗадачи = Новый Соответствие;
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат ЭтоПросроченныеИОжидающиеВыполненияЗадачи;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Задача Из МассивЗадач Цикл
		ЭтоПросроченныеИОжидающиеВыполненияЗадачи.Вставить(Задача, Ложь);
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеестрЗадачПоАвторам.Задача КАК Задача,
		|	РеестрЗадачПоАвторам.ПросроченаИОжидаетВыполнения КАК ПросроченаИОжидаетВыполнения
		|ИЗ
		|	РегистрСведений.РеестрЗадачПоАвторам КАК РеестрЗадачПоАвторам
		|ГДЕ
		|	РеестрЗадачПоАвторам.Задача В(&МассивЗадач)
		|	И РеестрЗадачПоАвторам.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи)");
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭтоПросроченныеИОжидающиеВыполненияЗадачи.Вставить(Выборка.Задача, Выборка.ПросроченаИОжидаетВыполнения);
	КонецЦикла;
	
	Возврат ЭтоПросроченныеИОжидающиеВыполненияЗадачи;
	
КонецФункции

// Определяет ожидают ли проверки задачи.
//
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Признаки ожидания проверки задач:
//   * Ключ - ДокументСсылка.Задача - Задача.
//   * Значение - Булево - Ожидает проверки.
//
Функция ЭтоОжидающиеПроверкиЗадачи(МассивЗадач) Экспорт
	
	ЭтоОжидающиеПроверкиЗадачи = Новый Соответствие;
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат ЭтоОжидающиеПроверкиЗадачи;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Задача Из МассивЗадач Цикл
		ЭтоОжидающиеПроверкиЗадачи.Вставить(Задача, Ложь);
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеестрЗадачПоАвторам.Задача КАК Задача,
		|	РеестрЗадачПоАвторам.ОжидаетПроверки КАК ОжидаетПроверки
		|ИЗ
		|	РегистрСведений.РеестрЗадачПоАвторам КАК РеестрЗадачПоАвторам
		|ГДЕ
		|	РеестрЗадачПоАвторам.Задача В(&МассивЗадач)
		|	И РеестрЗадачПоАвторам.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи)");
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭтоОжидающиеПроверкиЗадачи.Вставить(Выборка.Задача, Выборка.ОжидаетПроверки);
	КонецЦикла;
	
	Возврат ЭтоОжидающиеПроверкиЗадачи;
	
КонецФункции

// Данные реестра.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//  КэшДанных - Структура,
//              Неопределено.
// 
// Возвращаемое значение:
//  См. НовыеДанныеРеестра.
// 
Функция ДанныеРеестра(Задача, КэшДанных = Неопределено) Экспорт
	
	Если КэшДанных <> Неопределено И КэшДанных.Свойство("ДанныеЗадачи") Тогда
		РеквизитыЗадачи = КэшДанных.ДанныеЗадачи;
	Иначе
		КэшируемыеРеквизитыЗадач = КэшируемыеРеквизитыЗадач();
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, КэшируемыеРеквизитыЗадач);
	КонецЕсли;
	
	ДанныеРеестра = НовыеДанныеРеестра();
	ДанныеРеестра.Задача = Задача;
	ДанныеРеестра.ЕстьПодзадачи = РаботаСЗадачами.ЕстьПодзадачи(Задача);
	ДанныеРеестра.Трудозатраты = Трудозатраты(Задача);
	
	ПараметрыКонтроляДляКэша = Справочники.Контроль.ПараметрыКонтроляДляКэша(Задача);
	ДанныеРеестра.СостояниеКонтроля = ПараметрыКонтроляДляКэша.СостояниеКонтроля;
	ДанныеРеестра.КонтрольныйСрок = ПараметрыКонтроляДляКэша.СрокИсполнения;
	ДанныеРеестра.КонтрольныйСрокОбщий = ПараметрыКонтроляДляКэша.СрокИсполненияОбщий;
	
	ОбновитьДанныеРеестраПоЗадаче(ДанныеРеестра, РеквизитыЗадачи);
	
	Возврат ДанныеРеестра;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	Если ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("ДокументСсылка.Задача") Тогда
		
		ОбновитьПоЗадаче(Выборка.КлючВлияющихДанных);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		ДействиеЗадачи = Выборка.КлючВлияющихДанных; // ДокументСсылка.ДействиеЗадачи
		
		Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
		ОбновитьПоЗадаче(Задача);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует пустую структуру данных реестра.
// 
// Возвращаемое значение:
//  Структура - Новые данные реестра:
//   * Дата - Дата.
//   * Задача - ДокументСсылка.Задача.
//   * Автор - ОпределяемыйТип.УчастникЗадач, Неопределено - Автор.
//   * ВидЗадачи - СправочникСсылка.ВидыЗадач.
//   * ВидПриложения - ОпределяемыйТип.ВидПриложенияЗадач, Неопределено - Вид приложения.
//   * ВидСостоянияЗадачи - ПеречислениеСсылка.ВидыСостоянийЗадач.
//   * ВРаботе - Булево.
//   * Выполнена - Булево.
//   * ДатаВыполнения - Дата.
//   * ДатаНачалаУчета - Дата.
//   * ДатаОкончанияУчета - Дата.
//   * ЕстьПодзадачи - Булево.
//   * Заголовок - Строка.
//   * КонтрольныйСрок - Дата.
//   * КонтрольныйСрокОбщий - Дата.
//   * Новая - Булево.
//   * ОжидаетВыполнения - Булево.
//   * ОжидаетПроверки - Булево.
//   * Приоритет - СправочникСсылка.ПриоритетыЗадач.
//   * Проект - СправочникСсылка.Проекты.
//   * Просрочена - Булево.
//   * ПросроченаИОжидаетВыполнения - Булево.
//   * РезультатЗадачи - СправочникСсылка.РезультатыЗадач.
//   * СостояниеЗадачи - СправочникСсылка.СостоянияЗадач.
//   * СостояниеКонтроля - ПеречислениеСсылка.СостоянияКонтроля.
//   * Срок - Дата.
//   * ТипПриложения - ПеречислениеСсылка.ТипыПриложенийЗадач.
//   * Трудозатраты - Число.
//   * Флаг - ПеречислениеСсылка.ФлагиОбъектов.
//   * ЭтоЧерновик - Булево.
//   * МожетБытьПросрочена - Булево.
// 
Функция НовыеДанныеРеестра()
	
	ДанныеРеестра = Новый Структура;
	ДанныеРеестра.Вставить("Дата", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("Задача", Документы.Задача.ПустаяСсылка());
	ДанныеРеестра.Вставить("Автор", Неопределено);
	ДанныеРеестра.Вставить("ВидЗадачи", Справочники.ВидыЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("ВидПриложения", Неопределено);
	ДанныеРеестра.Вставить("ВидСостоянияЗадачи", Перечисления.ВидыСостоянийЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("ВРаботе", Ложь);
	ДанныеРеестра.Вставить("ВСрок", Ложь);
	ДанныеРеестра.Вставить("Выполнена", Ложь);
	ДанныеРеестра.Вставить("ДатаВыполнения", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("ДатаНачалаУчета", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("ДатаОкончанияУчета", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("ЕстьПодзадачи", Ложь);
	ДанныеРеестра.Вставить("Заголовок", "");
	ДанныеРеестра.Вставить("КонтрольныйСрок", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("КонтрольныйСрокОбщий", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("Новая", Ложь);
	ДанныеРеестра.Вставить("ОжидаетВыполнения", Ложь);
	ДанныеРеестра.Вставить("ОжидаетПроверки", Ложь);
	ДанныеРеестра.Вставить("Приоритет", Справочники.ПриоритетыЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	ДанныеРеестра.Вставить("Просрочена", Ложь);
	ДанныеРеестра.Вставить("ПросроченаИОжидаетВыполнения", Ложь);
	ДанныеРеестра.Вставить("РезультатЗадачи", Справочники.РезультатыЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("СостояниеЗадачи", Справочники.СостоянияЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("СостояниеКонтроля", Перечисления.СостоянияКонтроля.ПустаяСсылка());
	ДанныеРеестра.Вставить("Срок", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("ТипПриложения", Перечисления.ТипыПриложенийЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("Трудозатраты", 0);
	ДанныеРеестра.Вставить("Флаг", Перечисления.ФлагиОбъектов.ПустаяСсылка());
	ДанныеРеестра.Вставить("ЭтоЧерновик", Ложь);
	ДанныеРеестра.Вставить("МожетБытьПросрочена", Ложь);
	
	Возврат ДанныеРеестра;
	
КонецФункции

// Возвращает трудозатраты по задаче в часах.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Число - Трудозатраты в часах.
// 
Функция Трудозатраты(Задача)
	
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат 0;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Участники");
	Участники = РеквизитыЗадачи.Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки Возр");
	
	ИсточникиТрудозатрат = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача);
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ИсточникиТрудозатрат.Добавить(СтрокаУчастника.ДействиеУчастника);
		
	КонецЦикла;
	
	ТрудозатратыСекунд = УчетВремени.ФактическиеТрудозатратыПоИсточникам(ИсточникиТрудозатрат);
	ТрудозатратыЧасов = ТрудозатратыСекунд / 3600;
	
	Возврат ТрудозатратыЧасов;
	
КонецФункции

// Обновляет данные задачи.
//
// Параметры:
//  ДанныеРеестра - См. НовыеДанныеРеестра.
//  РеквизитыЗадачи - Структура - Реквизиты задачи. См. КэшируемыеРеквизитыЗадач.
//
Процедура ОбновитьДанныеРеестраПоЗадаче(ДанныеРеестра, РеквизитыЗадачи)
	
	ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(РеквизитыЗадачи.СостояниеЗадачи);
	
	ВРаботе = Перечисления.ВидыСостоянийЗадач.ЭтоЗадачаВРаботе(ВидСостоянияЗадачи);
	Выполнена = Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи);
	Новая = Перечисления.ВидыСостоянийЗадач.ЭтоНоваяЗадача(ВидСостоянияЗадачи);
	ОжидаетВыполнения = Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяВыполненияЗадача(ВидСостоянияЗадачи);
	ОжидаетПроверки = Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(ВидСостоянияЗадачи);
	ЭтоЧерновик = Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи);
	
	Период = Документы.Задача.Период(
		РеквизитыЗадачи.ДатаСоздания,
		РеквизитыЗадачи.Дата);
	Просрочена = Документы.Задача.Просрочена(
		РеквизитыЗадачи.Срок,
		РеквизитыЗадачи.СостояниеЗадачи,
		РеквизитыЗадачи.ДатаВыполнения);
	
	ДанныеРеестра.Автор = РеквизитыЗадачи.Автор;
	ДанныеРеестра.Дата = Период;
	ДанныеРеестра.Задача = РеквизитыЗадачи.Ссылка;
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.ДатаНачала) Тогда
		ДанныеРеестра.ДатаНачалаУчета = РеквизитыЗадачи.ДатаНачала;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.ДатаНачалаПлан) Тогда
		ДанныеРеестра.ДатаНачалаУчета = РеквизитыЗадачи.ДатаНачалаПлан;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.Дата) Тогда
		ДанныеРеестра.ДатаНачалаУчета = РеквизитыЗадачи.Дата;
	Иначе
		ДанныеРеестра.ДатаНачалаУчета = Дата(1, 1, 1);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.ДатаВыполнения) Тогда
		ДанныеРеестра.ДатаОкончанияУчета = РеквизитыЗадачи.ДатаВыполнения;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.ДатаОтмены) Тогда
		ДанныеРеестра.ДатаОкончанияУчета = РеквизитыЗадачи.ДатаОтмены;
	Иначе
		ДанныеРеестра.ДатаОкончанияУчета = Дата(2100, 1, 1); // Считаем, что нет даты окончания - она где-то в будущем.
	КонецЕсли;
	
	ДанныеРеестра.ВидЗадачи = РеквизитыЗадачи.ВидЗадачи;
	ДанныеРеестра.ВидПриложения = РеквизитыЗадачи.ВидПриложения;
	ДанныеРеестра.ТипПриложения = РеквизитыЗадачи.ТипПриложения;
	ДанныеРеестра.ВидСостоянияЗадачи = ВидСостоянияЗадачи;
	ДанныеРеестра.Выполнена = Выполнена;
	ДанныеРеестра.ВРаботе = ВРаботе;
	ДанныеРеестра.ДатаВыполнения = РеквизитыЗадачи.ДатаВыполнения;
	ДанныеРеестра.Заголовок = Строка(ДанныеРеестра.Задача);
	ДанныеРеестра.ЭтоЧерновик = ЭтоЧерновик;
	ДанныеРеестра.Новая = Новая;
	ДанныеРеестра.ОжидаетВыполнения = ОжидаетВыполнения;
	ДанныеРеестра.ОжидаетПроверки = ОжидаетПроверки;
	ДанныеРеестра.Приоритет = РеквизитыЗадачи.Приоритет;
	ДанныеРеестра.Проект = РеквизитыЗадачи.Проект;
	ДанныеРеестра.Просрочена = Просрочена;
	ДанныеРеестра.ПросроченаИОжидаетВыполнения = Просрочена И ОжидаетВыполнения;
	ДанныеРеестра.РезультатЗадачи = РеквизитыЗадачи.РезультатЗадачи;
	ДанныеРеестра.СостояниеЗадачи = РеквизитыЗадачи.СостояниеЗадачи;
	ДанныеРеестра.Срок = РеквизитыЗадачи.Срок;
	ДанныеРеестра.Флаг = РеквизитыЗадачи.Флаг;
	
	ДанныеРеестра.МожетБытьПросрочена =
		ОжидаетВыполнения
		И ЗначениеЗаполнено(РеквизитыЗадачи.Срок)
		И Не Просрочена;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли