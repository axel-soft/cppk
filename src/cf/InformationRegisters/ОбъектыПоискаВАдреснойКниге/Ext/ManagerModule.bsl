
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// Заполнение реквизита "ПредставлениеОбъекта"
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ЗаполнитьПредставлениеОбъекта(Параметры) Экспорт
	
	ВозможныеПустыеЗначенияОбъектаПоиска = Новый Массив;
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Неопределено);
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.Сотрудники.ПустаяСсылка());
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.Проекты.ПустаяСсылка());
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.ЛичныеАдресаты.ПустаяСсылка());
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.РолиИсполнителей.ПустаяСсылка());
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.АвтоподстановкиДляОбъектов.ПустаяСсылка());
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.РабочиеГруппы.ПустаяСсылка());
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.Организации.ПустаяСсылка());
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.АвтоподстановкиДляПроцессов.ПустаяСсылка());
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.Мероприятия.ПустаяСсылка());
	ВозможныеПустыеЗначенияОбъектаПоиска.Добавить(Справочники.КонтактныеЛица.ПустаяСсылка());
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ОбъектыПоискаВАдреснойКниге.ОбъектПоиска) КАК ВсегоОбъектов
			|ИЗ
			|	РегистрСведений.ОбъектыПоискаВАдреснойКниге КАК ОбъектыПоискаВАдреснойКниге
			|ГДЕ
			|	ОбъектыПоискаВАдреснойКниге.ПредставлениеОбъекта = """"
			|	И НЕ ОбъектыПоискаВАдреснойКниге.ОбъектПоиска В (&ПустыеЗначения)");
		
		Запрос.УстановитьПараметр("ПустыеЗначения", ВозможныеПустыеЗначенияОбъектаПоиска);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОбъектыПоискаВАдреснойКниге.ОбъектПоиска КАК ОбъектПоиска,
		|	ОбъектыПоискаВАдреснойКниге.КритерийПоиска КАК КритерийПоиска,
		|	ПРЕДСТАВЛЕНИЕ(ОбъектыПоискаВАдреснойКниге.ОбъектПоиска) КАК ПредставлениеОбъектаПоиска
		|ИЗ
		|	РегистрСведений.ОбъектыПоискаВАдреснойКниге КАК ОбъектыПоискаВАдреснойКниге
		|ГДЕ
		|	ОбъектыПоискаВАдреснойКниге.ПредставлениеОбъекта = """"
		|	И НЕ ОбъектыПоискаВАдреснойКниге.ОбъектПоиска В (&ПустыеЗначения)"); 
	
	Запрос.УстановитьПараметр("ПустыеЗначения", ВозможныеПустыеЗначенияОбъектаПоиска);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеОбъектаПоиска = Выборка.ПредставлениеОбъектаПоиска;
		Если ПредставлениеОбъектаПоиска = "" Тогда
			
			ПредставлениеОбъектаПоиска = НСтр("ru='<Нет представления>'");
			
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Набор = СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектПоиска.Установить(Выборка.ОбъектПоиска);
			Набор.Отбор.КритерийПоиска.Установить(Выборка.КритерийПоиска);
			Набор.Прочитать();
			
			Для Каждого Запись Из Набор Цикл
				
				Запись.ПредставлениеОбъекта = ПредставлениеОбъектаПоиска;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(Набор);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.ОбъектПоиска.Метаданные(),
				Выборка.ОбъектПоиска,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_16_13 не удалось добавить представление %1 объектам
			|в ОбъектыПоискаВАдреснойКниге'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

#КонецОбласти

// Представление объекта поиска
//
// Параметры:
//  Объект - СправочникСсылка.Сотрудники, СправочникСсылка.Контрагенты, СправочникСсылка.Проекты,
//  СправочникСсылка.ЛичныеАдресаты, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.РолиИсполнителей,
//  СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.РабочиеГруппы, СправочникСсылка.Организации,
//  СправочникСсылка.АвтоподстановкиДляПроцессов, СправочникСсылка.Мероприятия, СправочникСсылка.КонтактныеЛица
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеОбъектаПоиска(Объект) Экспорт
	
	Возврат Строка(Объект);
	
КонецФункции

// При изменении подразделения
Процедура ОбновитьСловаПоискаПоПодразделению(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	НЕ Сотрудники.ПометкаУдаления
	|		И Сотрудники.Действует
	|		И &ИспользоватьВПоиске КАК ИспользоватьВПоиске
	|ПОМЕСТИТЬ Сотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Подразделение = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсполнителиРолей.РольИсполнителя.Владелец КАК ОбъектПоиска,
	|	ИсполнителиРолей.РольИсполнителя.ПометкаУдаления = ЛОЖЬ
	|		И &ИспользоватьВПоиске КАК ИспользоватьВПоиске
	|ИЗ
	|	Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
	|		ПО Сотрудники.Ссылка = ИсполнителиРолей.Исполнитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	Сотрудники.ИспользоватьВПоиске
	|ИЗ
	|	Сотрудники КАК Сотрудники");
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВПоиске", Не Объект.ПометкаУдаления);
	
	ОбъектыПоиска = Запрос.Выполнить().Выгрузить();
	
	ОбъектыПоиска.Колонки.Добавить("Слово");
	ОбъектыПоиска.Колонки.Добавить("ОбъектДоступа");
	ОбъектыПоиска.Колонки.Добавить("КритерийПоиска");
	
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Наименование, "Слово");
	ОбъектыПоиска.ЗаполнитьЗначения(Неопределено, "ОбъектДоступа");
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Ссылка, "КритерийПоиска");
	
	НаборЗаписей.Загрузить(ОбъектыПоиска);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
	НоваяЗапись.КритерийПоиска = Объект.Ссылка;
	НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления;
	НоваяЗапись.Слово = Объект.Наименование;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При изменении подразделения сотрудника
//
// Параметры:
//  ОбъектОбновления - СправочникОбъект.Сотрудники
//  РеквизитыПодразделения - Структура:
// * Ссылка - СправочникСсылка.Должности
// * Наименование - Строка
//
Процедура ОбновитьСловаПоискаПоПодразделениюСотрудника(ОбъектОбновления, РеквизитыПодразделения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбъектОбновления.Подразделение <> РеквизитыПодразделения.Ссылка Тогда
		
		Запись = РегистрыСведений.ОбъектыПоискаВАдреснойКниге.СоздатьМенеджерЗаписи();
		Запись.ОбъектПоиска = ОбъектОбновления.Ссылка;
		Запись.КритерийПоиска = РеквизитыПодразделения.Ссылка;
		Запись.Удалить();
		
	Иначе
		
		Запись = РегистрыСведений.ОбъектыПоискаВАдреснойКниге.СоздатьМенеджерЗаписи();
		Запись.ОбъектПоиска = ОбъектОбновления.Ссылка;
		Запись.КритерийПоиска = РеквизитыПодразделения.Ссылка;
		Запись.ИспользоватьВПоиске = ОбъектОбновления.ПометкаУдаления;
		Запись.Слово = РеквизитыПодразделения.Наименование;
		Запись.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// При изменении группы пользователей
Процедура ОбновитьСловаПоискаПоРабочейГруппе(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочиеГруппыСостав.Участник КАК ОбъектПоиска,
	|	РабочиеГруппыСостав.Участник.ПометкаУдаления = ЛОЖЬ
	|		И РабочиеГруппыСостав.Участник.Действует = ИСТИНА
	|		И &ИспользоватьВПоиске КАК ИспользоватьВПоиске
	|ИЗ
	|	Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
	|ГДЕ
	|	РабочиеГруппыСостав.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВПоиске", Не Объект.ПометкаУдаления);
	
	ОбъектыПоиска = Запрос.Выполнить().Выгрузить();
	
	ОбъектыПоиска.Колонки.Добавить("Слово");
	ОбъектыПоиска.Колонки.Добавить("ОбъектДоступа");
	ОбъектыПоиска.Колонки.Добавить("КритерийПоиска");
	
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Наименование, "Слово");
	ОбъектыПоиска.ЗаполнитьЗначения(Неопределено, "ОбъектДоступа");
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Ссылка, "КритерийПоиска");
	
	НаборЗаписей.Загрузить(ОбъектыПоиска);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
	НоваяЗапись.КритерийПоиска = Объект.Ссылка;
	НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления;
	НоваяЗапись.Слово = Объект.Наименование;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При изменении мероприятия
Процедура ОбновитьСловаПоискаПоМероприятию(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчастникиМероприятия.Исполнитель КАК ОбъектПоиска,
	|	ВЫБОР
	|		КОГДА УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.Пользователи
	|			ТОГДА НЕ УчастникиМероприятия.Исполнитель.ПометкаУдаления
	|					И НЕ УчастникиМероприятия.Исполнитель.Служебный
	|					И НЕ УчастникиМероприятия.Исполнитель.Недействителен
	|					И &ИспользоватьВПоиске
	|		КОГДА УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.Сотрудники
	|			ТОГДА НЕ УчастникиМероприятия.Исполнитель.ПометкаУдаления
	|					И УчастникиМероприятия.Исполнитель.Действует
	|					И &ИспользоватьВПоиске
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьВПоиске
	|ИЗ
	|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
	|ГДЕ
	|	УчастникиМероприятия.Мероприятие = &Мероприятие
	|	И (УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.Пользователи
	|			ИЛИ УчастникиМероприятия.Исполнитель ССЫЛКА Справочник.Сотрудники)");
	Запрос.УстановитьПараметр("Мероприятие", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВПоиске", Не Объект.ПометкаУдаления);
	
	ОбъектыПоиска = Запрос.Выполнить().Выгрузить();
	
	ОбъектыПоиска.Колонки.Добавить("Слово");
	ОбъектыПоиска.Колонки.Добавить("ОбъектДоступа");
	ОбъектыПоиска.Колонки.Добавить("КритерийПоиска");
	
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Наименование, "Слово");
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Ссылка, "ОбъектДоступа");
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Ссылка, "КритерийПоиска");
	
	НаборЗаписей.Загрузить(ОбъектыПоиска);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
	НоваяЗапись.ОбъектДоступа = Объект.Ссылка;
	НоваяЗапись.КритерийПоиска = Объект.Ссылка;
	НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления;
	НоваяЗапись.Слово = Объект.Наименование;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При изменении проекта
Процедура ОбновитьСловаПоискаПоПроекту(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектнаяКоманда.Исполнитель КАК ОбъектПоиска,
	|	ВЫБОР
	|		КОГДА ПроектнаяКоманда.Исполнитель ССЫЛКА Справочник.Пользователи
	|			ТОГДА НЕ ПроектнаяКоманда.Исполнитель.ПометкаУдаления
	|					И НЕ ПроектнаяКоманда.Исполнитель.Служебный
	|					И НЕ ПроектнаяКоманда.Исполнитель.Недействителен
	|					И &ИспользоватьВПоиске
	|		КОГДА ПроектнаяКоманда.Исполнитель ССЫЛКА Справочник.Сотрудники
	|			ТОГДА НЕ ПроектнаяКоманда.Исполнитель.ПометкаУдаления
	|					И ПроектнаяКоманда.Исполнитель.Действует
	|					И &ИспользоватьВПоиске
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьВПоиске
	|ИЗ
	|	Справочник.Проекты.ПроектнаяКоманда КАК ПроектнаяКоманда
	|ГДЕ
	|	(ПроектнаяКоманда.Исполнитель ССЫЛКА Справочник.Пользователи
	|			ИЛИ ПроектнаяКоманда.Исполнитель ССЫЛКА Справочник.Сотрудники)");
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВПоиске", Не Объект.ПометкаУдаления);
	
	ОбъектыПоиска = Запрос.Выполнить().Выгрузить();
	
	ОбъектыПоиска.Колонки.Добавить("Слово");
	ОбъектыПоиска.Колонки.Добавить("ОбъектДоступа");
	ОбъектыПоиска.Колонки.Добавить("КритерийПоиска");
	
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Наименование, "Слово");
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Ссылка, "ОбъектДоступа");
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Ссылка, "КритерийПоиска");
	
	НаборЗаписей.Загрузить(ОбъектыПоиска);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
	НоваяЗапись.ОбъектДоступа = Объект.Ссылка;
	НоваяЗапись.КритерийПоиска = Объект.Ссылка;
	НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления;
	НоваяЗапись.Слово = Объект.Наименование;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При изменении сотрудника
Процедура ОбновитьСловаПоискаПоСотруднику(Объект, ОбновитьКритерийПоиска = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	СтрокиДляПоиска = Объект.КонтактнаяИнформация.ВыгрузитьКолонку("Представление");
	
	СтрокиДляПоиска.Добавить(Строка(Объект.Владелец));
	СтрокиДляПоиска.Добавить(Строка(Объект.ПредставлениеВПереписке));
	
	КоличествоСтрок = СтрокиДляПоиска.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		ОбратныйИндекс = КоличествоСтрок - Индекс;
		Если ПустаяСтрока(СтрокиДляПоиска[ОбратныйИндекс]) Тогда
			СтрокиДляПоиска.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	Слово = СтрСоединить(СтрокиДляПоиска, "~");
	
	Если ОбновитьКритерийПоиска Тогда
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.ОбъектыПоискаВАдреснойКниге").УстановитьЗначение("ОбъектПоиска", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектПоиска.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		
		ЕстьСотрудник = Ложь;
		ЕстьПодразделение = Ложь;
		ЕстьДолжность = Ложь;
		Корзина = Новый Массив;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если ТипЗнч(Запись.КритерийПоиска) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				Запись.КритерийПоиска = Объект.Подразделение;
				ЕстьПодразделение = Истина;
			ИначеЕсли ТипЗнч(Запись.КритерийПоиска) = Тип("СправочникСсылка.Должности") Тогда
				Запись.КритерийПоиска = Объект.Должность;
				ЕстьДолжность = Истина;
			ИначеЕсли Запись.КритерийПоиска = Объект.Ссылка Тогда
				Запись.Слово = Слово;
				ЕстьСотрудник = Истина;
			КонецЕсли;
			Запись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления И Объект.Действует;
			Если Не ЗначениеЗаполнено(Запись.КритерийПоиска) Тогда
				Корзина.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Запись Из Корзина Цикл
			НаборЗаписей.Удалить(Запись);
		КонецЦикла;
		
		Если Не ЕстьПодразделение И ЗначениеЗаполнено(Объект.Подразделение) Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
			НоваяЗапись.КритерийПоиска = Объект.Подразделение;
			НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления И Объект.Действует;
			НоваяЗапись.Слово = Строка(НоваяЗапись.КритерийПоиска);
		КонецЕсли;
		
		Если Не ЕстьДолжность И ЗначениеЗаполнено(Объект.Должность) Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
			НоваяЗапись.КритерийПоиска = Объект.Должность;
			НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления И Объект.Действует;
			НоваяЗапись.Слово = Строка(НоваяЗапись.КритерийПоиска);
		КонецЕсли;
		
		Если Не ЕстьСотрудник Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
			НоваяЗапись.КритерийПоиска = Объект.Ссылка;
			НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления И Объект.Действует;
			НоваяЗапись.Слово = Слово;
		КонецЕсли;
		
	Иначе
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
		НоваяЗапись.КритерийПоиска = Объект.Ссылка;
		НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления И Объект.Действует;
		НоваяЗапись.Слово = Слово;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При изменении должности
Процедура ОбновитьСловаПоискаПоДолжности(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК ОбъектПоиска,
	|	НЕ Сотрудники.ПометкаУдаления
	|		И Сотрудники.Действует
	|		И &ИспользоватьВПоиске КАК ИспользоватьВПоиске
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Должность = &Должность");
	Запрос.УстановитьПараметр("Должность", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВПоиске", Не Объект.ПометкаУдаления);
	
	ОбъектыПоиска = Запрос.Выполнить().Выгрузить();
	
	ОбъектыПоиска.Колонки.Добавить("Слово");
	ОбъектыПоиска.Колонки.Добавить("ОбъектДоступа");
	ОбъектыПоиска.Колонки.Добавить("КритерийПоиска");
	
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Наименование, "Слово");
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Ссылка, "КритерийПоиска");
	ОбъектыПоиска.ЗаполнитьЗначения(Неопределено, "ОбъектДоступа");
	
	НаборЗаписей.Загрузить(ОбъектыПоиска);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При изменении должности сотрудника
//
// Параметры:
//  ОбъектОбновления - СправочникОбъект.Сотрудники
//  РеквизитыДолжности - Структура:
// * Ссылка - СправочникСсылка.Должности
// * Наименование - Строка
//
Процедура ОбновитьСловаПоискаПоДолжностиСотрудника(ОбъектОбновления, РеквизитыДолжности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбъектОбновления.Должность <> РеквизитыДолжности.Ссылка Тогда
		
		Запись = РегистрыСведений.ОбъектыПоискаВАдреснойКниге.СоздатьМенеджерЗаписи();
		Запись.ОбъектПоиска = ОбъектОбновления.Ссылка;
		Запись.КритерийПоиска = РеквизитыДолжности.Ссылка;
		Запись.Удалить();
		
	Иначе
		
		Запись = РегистрыСведений.ОбъектыПоискаВАдреснойКниге.СоздатьМенеджерЗаписи();
		Запись.ОбъектПоиска = ОбъектОбновления.Ссылка;
		Запись.КритерийПоиска = РеквизитыДолжности.Ссылка;
		Запись.ИспользоватьВПоиске = ОбъектОбновления.ПометкаУдаления;
		Запись.Слово = РеквизитыДолжности.Наименование;
		Запись.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// При изменении роли
Процедура ОбновитьСловаПоискаПоРоли(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
	
	СтрокиДляПоиска = Объект.КонтактнаяИнформация.ВыгрузитьКолонку("Представление");
	
	СтрокиДляПоиска.Добавить(Объект.Наименование);
	
	КоличествоСтрок = СтрокиДляПоиска.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		ОбратныйИндекс = КоличествоСтрок - Индекс;
		Если ПустаяСтрока(СтрокиДляПоиска[ОбратныйИндекс]) Тогда
			СтрокиДляПоиска.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	Слово = СтрСоединить(СтрокиДляПоиска, "~");
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
	НоваяЗапись.КритерийПоиска = Объект.Ссылка;
	НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления;
	НоваяЗапись.Слово = Слово;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При изменении Контрагента
Процедура ОбновитьСловаПоискаПоКонтрагенту(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка КАК ОбъектПоиска,
		|	НЕ КонтактныеЛица.ПометкаУдаления
		|		И &ИспользоватьВПоиске КАК ИспользоватьВПоиске
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВПоиске", Не Объект.ПометкаУдаления);
	
	ОбъектыПоиска = Запрос.Выполнить().Выгрузить();
	
	ОбъектыПоиска.Колонки.Добавить("Слово");
	ОбъектыПоиска.Колонки.Добавить("ОбъектДоступа");
	ОбъектыПоиска.Колонки.Добавить("КритерийПоиска");
	
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Наименование, "Слово");
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Ссылка, "ОбъектДоступа");
	ОбъектыПоиска.ЗаполнитьЗначения(Объект.Ссылка, "КритерийПоиска");
	
	НаборЗаписей.Загрузить(ОбъектыПоиска);
	
	СтрокиДляПоиска = Объект.КонтактнаяИнформация.ВыгрузитьКолонку("Представление");
	СтрокиДляПоиска.Добавить(Объект.Наименование);
	КоличествоСтрок = СтрокиДляПоиска.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		ОбратныйИндекс = КоличествоСтрок - Индекс;
		Если ПустаяСтрока(СтрокиДляПоиска[ОбратныйИндекс]) Тогда
			СтрокиДляПоиска.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	Слово = СтрСоединить(СтрокиДляПоиска, "~");
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
	НоваяЗапись.ОбъектДоступа = Объект.Ссылка;
	НоваяЗапись.КритерийПоиска = Объект.Ссылка;
	НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления;
	НоваяЗапись.Слово = Слово;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При изменении Контактного лица
Процедура ОбновитьСловаПоискаПоКонтактномуЛицу(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
	
	СтрокиДляПоиска = Объект.КонтактнаяИнформация.ВыгрузитьКолонку("Представление");
	
	СтрокиДляПоиска.Добавить(Объект.Наименование);
	КоличествоСтрок = СтрокиДляПоиска.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		ОбратныйИндекс = КоличествоСтрок - Индекс;
		Если ПустаяСтрока(СтрокиДляПоиска[ОбратныйИндекс]) Тогда
			СтрокиДляПоиска.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	Слово = СтрСоединить(СтрокиДляПоиска, "~");
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
	НоваяЗапись.КритерийПоиска = Объект.Ссылка;
	НоваяЗапись.ОбъектДоступа = Объект.Ссылка;
	НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления;
	НоваяЗапись.Слово = Слово;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При изменении личного адресата
Процедура ОбновитьСловаПоискаПоЛичномуАдресату(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
	
	СтрокиДляПоиска = Объект.КонтактнаяИнформация.ВыгрузитьКолонку("Представление");
	
	СтрокиДляПоиска.Добавить(Объект.Наименование);
	КоличествоСтрок = СтрокиДляПоиска.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		ОбратныйИндекс = КоличествоСтрок - Индекс;
		Если ПустаяСтрока(СтрокиДляПоиска[ОбратныйИндекс]) Тогда
			СтрокиДляПоиска.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	Слово = СтрСоединить(СтрокиДляПоиска, "~");
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
	НоваяЗапись.КритерийПоиска = Объект.Ссылка;
	
	НоваяЗапись.ОбъектДоступа = Объект.Сотрудник;
	
	НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления;
	НоваяЗапись.Слово = Слово;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При изменении критерия использования в поиске
Процедура ОбновитьДоступностьВПоиске(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Пользователи") Тогда
		ИспользоватьВПоиске = Не Объект.ПометкаУдаления
			И Не Объект.Служебный
			И Не Объект.Недействителен;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Сотрудники") Тогда
		ИспользоватьВПоиске = Не Объект.ПометкаУдаления
			И Объект.Действует;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.КонтактныеЛица") Тогда
		ИспользоватьВПоиске = Не Объект.ПометкаУдаления 
			И Не Объект.НеДействует
	Иначе
		ИспользоватьВПоиске = Не Объект.ПометкаУдаления;
	КонецЕсли;
	
	// Обновление по критерию поиска.
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыПоискаВАдреснойКниге");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("КритерийПоиска", Объект.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыПоискаВАдреснойКниге.ОбъектПоиска КАК ОбъектПоиска,
		|	ОбъектыПоискаВАдреснойКниге.КритерийПоиска КАК КритерийПоиска,
		|	ОбъектыПоискаВАдреснойКниге.Слово КАК Слово,
		|	ОбъектыПоискаВАдреснойКниге.ОбъектДоступа КАК ОбъектДоступа,
		|	ВЫБОР
		|		КОГДА ОбъектыПоискаВАдреснойКниге.ОбъектПоиска ССЫЛКА Справочник.Сотрудники
		|			ТОГДА НЕ ОбъектыПоискаВАдреснойКниге.ОбъектПоиска.ПометкаУдаления
		|					И ОбъектыПоискаВАдреснойКниге.ОбъектПоиска.Действует
		|					И &ИспользоватьВПоиске
		|		КОГДА ОбъектыПоискаВАдреснойКниге.ОбъектПоиска ССЫЛКА Справочник.КонтактныеЛица
		|			ТОГДА НЕ ОбъектыПоискаВАдреснойКниге.ОбъектПоиска.ПометкаУдаления
		|					И НЕ ОбъектыПоискаВАдреснойКниге.ОбъектПоиска.НеДействует
		|					И &ИспользоватьВПоиске
		|		ИНАЧЕ НЕ ОбъектыПоискаВАдреснойКниге.ОбъектПоиска.ПометкаУдаления
		|				И &ИспользоватьВПоиске
		|	КОНЕЦ КАК ИспользоватьВПоиске
		|ИЗ
		|	РегистрСведений.ОбъектыПоискаВАдреснойКниге КАК ОбъектыПоискаВАдреснойКниге
		|ГДЕ
		|	ОбъектыПоискаВАдреснойКниге.КритерийПоиска = &КритерийПоиска";
	Запрос.УстановитьПараметр("КритерийПоиска", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВПоиске", ИспользоватьВПоиске);
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// Обновление по объекту поиска.
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыПоискаВАдреснойКниге");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("КритерийПоиска", Объект.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыПоискаВАдреснойКниге.ОбъектПоиска КАК ОбъектПоиска,
		|	ОбъектыПоискаВАдреснойКниге.КритерийПоиска КАК КритерийПоиска,
		|	ОбъектыПоискаВАдреснойКниге.Слово КАК Слово,
		|	ОбъектыПоискаВАдреснойКниге.ОбъектДоступа КАК ОбъектДоступа,
		|	ВЫБОР
		|		КОГДА ОбъектыПоискаВАдреснойКниге.КритерийПоиска ССЫЛКА Справочник.Сотрудники
		|			ТОГДА НЕ ОбъектыПоискаВАдреснойКниге.КритерийПоиска.ПометкаУдаления
		|					И ОбъектыПоискаВАдреснойКниге.КритерийПоиска.Действует
		|					И &ИспользоватьВПоиске
		|		КОГДА ОбъектыПоискаВАдреснойКниге.КритерийПоиска ССЫЛКА Справочник.КонтактныеЛица
		|			ТОГДА НЕ ОбъектыПоискаВАдреснойКниге.КритерийПоиска.ПометкаУдаления
		|					И НЕ ОбъектыПоискаВАдреснойКниге.КритерийПоиска.НеДействует
		|					И &ИспользоватьВПоиске
		|		ИНАЧЕ НЕ ОбъектыПоискаВАдреснойКниге.КритерийПоиска.ПометкаУдаления
		|				И &ИспользоватьВПоиске
		|	КОНЕЦ КАК ИспользоватьВПоиске
		|ИЗ
		|	РегистрСведений.ОбъектыПоискаВАдреснойКниге КАК ОбъектыПоискаВАдреснойКниге
		|ГДЕ
		|	ОбъектыПоискаВАдреснойКниге.ОбъектПоиска = &ОбъектПоиска";
	Запрос.УстановитьПараметр("ОбъектПоиска", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВПоиске", ИспользоватьВПоиске);
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектПоиска.Установить(Объект.Ссылка);
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// При изменении Организации
Процедура ОбновитьСловаПоискаПоОрганизации(Объект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
	
	СтрокиДляПоиска = Объект.КонтактнаяИнформация.ВыгрузитьКолонку("Представление");
	
	СтрокиДляПоиска.Добавить(Объект.Наименование);
	
	КоличествоСтрок = СтрокиДляПоиска.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		ОбратныйИндекс = КоличествоСтрок - Индекс;
		Если ПустаяСтрока(СтрокиДляПоиска[ОбратныйИндекс]) Тогда
			СтрокиДляПоиска.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	Слово = СтрСоединить(СтрокиДляПоиска, "~");
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
	НоваяЗапись.КритерийПоиска = Объект.Ссылка;
	НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления;
	НоваяЗапись.Слово = Слово;
	
	НаборЗаписей.Записать();	

КонецПроцедуры

// При изменении Автоподстановки для объектов.
Процедура ОбновитьСловаПоискаПоАвтоподстановкеДляОбъектов(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
	
	СтрокиДляПоиска = Новый Массив;
	СтрокиДляПоиска.Добавить(Строка(Объект));
	
	Слово = СтрСоединить(СтрокиДляПоиска, "~");
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
	НоваяЗапись.КритерийПоиска = Объект.Ссылка;
	НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления;
	НоваяЗапись.Слово = Слово;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При изменении Автоподстановки для процессов.
Процедура ОбновитьСловаПоискаПоАвтоподстановкеДляПроцессов(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КритерийПоиска.Установить(Объект.Ссылка);
	
	СтрокиДляПоиска = Новый Массив;
	СтрокиДляПоиска.Добавить(Объект.Наименование);
	
	Слово = СтрСоединить(СтрокиДляПоиска, "~");
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ОбъектПоиска = Объект.Ссылка;
	НоваяЗапись.КритерийПоиска = Объект.Ссылка;
	НоваяЗапись.ИспользоватьВПоиске = НЕ Объект.ПометкаУдаления;
	НоваяЗапись.Слово = Слово;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет заполнение слов поиска в регистре для всех объектов адр. книги. 
//
Процедура ЗаполнитьСловаПоиска() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Подразделение = Справочники.СтруктураПредприятия.ВыбратьИерархически();
	Пока Подразделение.Следующий() Цикл
		ОбновитьСловаПоискаПоПодразделению(Подразделение);
	КонецЦикла;
	
	РабочиеГруппы = Справочники.РабочиеГруппы.ВыбратьИерархически();
	Пока РабочиеГруппы.Следующий() Цикл
		ОбновитьСловаПоискаПоРабочейГруппе(РабочиеГруппы);
	КонецЦикла;
	
	Мероприятия = Справочники.Мероприятия.Выбрать();
	Пока Мероприятия.Следующий() Цикл
		ОбновитьСловаПоискаПоМероприятию(Мероприятия);
	КонецЦикла;
	
	Проекты = Справочники.Проекты.ВыбратьИерархически();
	Пока Проекты.Следующий() Цикл
		Если Проекты.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		ОбновитьСловаПоискаПоПроекту(Проекты);
	КонецЦикла;
	
	ВсеСотрудники = Справочники.Сотрудники.Выбрать();
	Пока ВсеСотрудники.Следующий() Цикл
		ОбновитьСловаПоискаПоСотруднику(ВсеСотрудники);
	КонецЦикла;
		
	Должности = Справочники.Должности.Выбрать();
	Пока Должности.Следующий() Цикл
		ОбновитьСловаПоискаПоДолжности(Должности);
	КонецЦикла;
	
	ВсеРоли = Справочники.РолиИсполнителей.Выбрать();
	Пока ВсеРоли.Следующий() Цикл
		ОбновитьСловаПоискаПоРоли(ВсеРоли);
	КонецЦикла;
	
	Контрагенты = Справочники.Контрагенты.ВыбратьИерархически();
	Пока Контрагенты.Следующий() Цикл
		Если Контрагенты.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		ОбновитьСловаПоискаПоКонтрагенту(Контрагенты);
	КонецЦикла;
	
	КонтактныеЛица = Справочники.КонтактныеЛица.Выбрать();
	Пока КонтактныеЛица.Следующий() Цикл
		ОбновитьСловаПоискаПоКонтактномуЛицу(КонтактныеЛица);
	КонецЦикла;
	
	ЛичныеАдресаты = Справочники.ЛичныеАдресаты.Выбрать();
	Пока ЛичныеАдресаты.Следующий() Цикл
		ОбновитьСловаПоискаПоЛичномуАдресату(ЛичныеАдресаты);
	КонецЦикла;
	
	АвтоподстановкиДляДокументов = Справочники.АвтоподстановкиДляОбъектов.Выбрать();
	Пока АвтоподстановкиДляДокументов.Следующий() Цикл
		ОбновитьСловаПоискаПоАвтоподстановкеДляОбъектов(АвтоподстановкиДляДокументов);
	КонецЦикла;
	
	АвтоподстановкиДляПроцессов = Справочники.АвтоподстановкиДляПроцессов.Выбрать();
	Пока АвтоподстановкиДляПроцессов.Следующий() Цикл
		ОбновитьСловаПоискаПоАвтоподстановкеДляПроцессов(АвтоподстановкиДляПроцессов);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

