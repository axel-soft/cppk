
#Область ОписаниеПеременных

&НаКлиенте
Перем НеПроверятьМодифицированностьПриЗакрытии;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьВопросыДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности");
	ИспользоватьПапкиДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьПапкиДокументов");
	ИспользоватьГрифыДоступа = ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа");
	
	ПараметрыДляИнициализации = ПараметрыИнициализацииФормы();
	ЗаполнитьЗначенияСвойств(ПараметрыДляИнициализации, Параметры);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыДляИнициализации);
	Тематика = ПараметрыДляИнициализации.ТематикаДокумента;
	
	Если СоздаватьАвтоматически Тогда
		Элементы.ВидИТематикаТекст.АвтоОтметкаНезаполненного = Истина;
		Элементы.ШаблонНаименования.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ВидИТематикаТекст.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ШаблонНаименования.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЗаполнитьПараметрыФормыПоВидуДокументаДО();
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Если ЗначениеЗаполнено(Тематика) Тогда
			ВидИТематикаТекст = СтрШаблон("%1 - %2",
				ВидДокумента, Тематика);
		Иначе
			ВидИТематикаТекст = Строка(ВидДокумента);
		КонецЕсли;
	КонецЕсли;
	
	ДоступныеВидыДокументов.Очистить();
	
	ВидыДоступныеДляОтраженияПоЭДО = ОбменСКонтрагентамиДОСлужебный.ВидыДокументовДоступныеДляОтраженияВходящихЭДО();
	Для Каждого ДоступныйВидДокумента Из ВидыДоступныеДляОтраженияПоЭДО Цикл
		ДоступныеВидыДокументов.Добавить(ДоступныйВидДокумента);
	КонецЦикла;
	
	ТематикиИспользуются = РаботаСТематикамиДокументов.ТематикиИспользуются();
	Если ТематикиИспользуются Тогда 
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид и тематика документа'");
	Иначе 
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид документа'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьПодсказкиЭлементовПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПроверитьМодифицированностьПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидИТематикаТекстПриИзменении(Элемент)
	
	ДелопроизводствоКлиент.ВидИТематикаПриИзменении(ЭтотОбъект, Истина);
	ПриИзмененииВидаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаНачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОчистка(Элемент, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОчистка(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОткрытие(ЭтотОбъект, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, СтандартнаяОбработка, Истина);
	ПриИзмененииВидаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаАвтоПодбор(
		ЭтотОбъект, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонДокументаПриИзменении(Элемент)
	
	НастроитьЭлементыПоШаблону();
	НастроитьПодсказкиЭлементовПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаПриИзменении(Элемент)
	
	НастроитьПодсказкиЭлементовПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаПриИзменении(Элемент)
	
	НастроитьПодсказкиЭлементовПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиПриИзменении(Элемент)
	
	НастроитьПодсказкиЭлементовПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	НастроитьПодсказкиЭлементовПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(ЭтотОбъект, "Ответственный", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНаименованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МаксимальнаяДлинаСтроки",   500);
	ПараметрыФормы.Вставить("РазрешенПереносСтрок",      Ложь);
	ПараметрыФормы.Вставить("ШаблонСтроки",              ШаблонНаименования);
	ПараметрыФормы.Вставить("НаименованиеПоля",          НСтр("ru = 'Наименование документа'"));
	ПараметрыФормы.Вставить("ИмяМакетаДереваПараметров", "ДеревоПараметровСозданияДокумента");
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗавершениеРедактированияНаименования", ЭтотОбъект);
	
	ОткрытьФорму(
		"РегистрСведений.ПравилаУчетаВидовЭДДО.Форма.ФормаШаблонаСтроковыхПолей",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСодержанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МаксимальнаяДлинаСтроки",   0);
	ПараметрыФормы.Вставить("РазрешенПереносСтрок",      Истина);
	ПараметрыФормы.Вставить("ШаблонСтроки",              ШаблонСодержания);
	ПараметрыФормы.Вставить("НаименованиеПоля",          НСтр("ru = 'Содержание документа'"));
	ПараметрыФормы.Вставить("ИмяМакетаДереваПараметров", "ДеревоПараметровСозданияДокумента");
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗавершениеРедактированияСодержания", ЭтотОбъект);
	
	ОткрытьФорму(
		"РегистрСведений.ПравилаУчетаВидовЭДДО.Форма.ФормаШаблонаСтроковыхПолей",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ИндексКартинкиОтраженияВДО = 3;
	
	Если НастройкиКорректны(ИндексКартинкиОтраженияВДО) Тогда
		ЗаписатьИЗакрыть(ИндексКартинкиОтраженияВДО);
	Иначе
		
		ДопПараметры = Новый Структура("ИндексКартинкиОтраженияВДО", ИндексКартинкиОтраженияВДО);
		
		ОповещениеООтвете = Новый ОписаниеОповещения("ОбработатьОтветЗаписатьИЗакрыть", ЭтотОбъект, ДопПараметры);
		
		ПоказатьВопрос(ОповещениеООтвете,
			НСтр("ru = 'В настройках создания документов присутствуют ошибки. Документы могут не создаваться автоматически.'") +
				Символы.ПС +
				НСтр("ru = 'Записать настройки в таком виде?'"),
			РежимДиалогаВопрос.ДаНет, , ,
			НСтр("ru = 'Ошибки заполнения'"));
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	
	НеПроверятьМодифицированностьПриЗакрытии = Истина;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыИнициализацииФормы()
	
	ПараметрыИнициализации = Новый Структура();
	ПараметрыИнициализации.Вставить("ВидДокумента");
	ПараметрыИнициализации.Вставить("ТематикаДокумента");
	ПараметрыИнициализации.Вставить("ВидДокументаЭДО");
	ПараметрыИнициализации.Вставить("ВопросДеятельности");
	ПараметрыИнициализации.Вставить("Ответственный");
	ПараметрыИнициализации.Вставить("Папка");
	ПараметрыИнициализации.Вставить("ГрифДоступа");
	ПараметрыИнициализации.Вставить("РольФайла");
	ПараметрыИнициализации.Вставить("Шаблон");
	ПараметрыИнициализации.Вставить("ШаблонНаименования");
	ПараметрыИнициализации.Вставить("ШаблонСодержания");
	ПараметрыИнициализации.Вставить("СоздаватьАвтоматически");
	
	Возврат ПараметрыИнициализации;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииВидаДокумента()
	
	ЗаполнитьПараметрыФормыПоВидуДокументаДО();
	
	НастроитьЭлементыПоШаблону();
	НастроитьПодсказкиЭлементовПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактированияНаименования(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонНаименования = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактированияСодержания(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСодержания = Результат;
	
КонецПроцедуры

&НаКлиенте
Функция НастройкиКорректны(ИндексКартинкиОтраженияВДО)
	
	ОчиститьСообщения();
	
	Если Не СоздаватьАвтоматически Тогда
		
		ИндексКартинкиОтраженияВДО = 0;
		Возврат Истина;
		
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		
		ТекстСообщения = НСтр("ru = 'Вид документа 1С:Документооборот не заполнен.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения, ,
			"ВидИТематикаТекст");
		
		ЕстьОшибки = Истина;
		ИндексКартинкиОтраженияВДО = Мин(1, ИндексКартинкиОтраженияВДО);
		
	КонецЕсли;
	
	Если ВестиУчетПоТематикам И Не ЗначениеЗаполнено(Тематика) Тогда
		
		ТекстСообщения = НСтр("ru = 'Тематика документа не указана.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения, ,
			"ВидИТематикаТекст");
		
		ЕстьОшибки = Истина;
		ИндексКартинкиОтраженияВДО = Мин(1, ИндексКартинкиОтраженияВДО);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ШаблонНаименования) Тогда
		
		ТекстСообщения = НСтр("ru = 'Шаблон наименования не заполнен. Документы будут создаватья по типовому шаблону'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения, ,
			"ШаблонНаименования");
		
		ЕстьОшибки = Истина;
		ИндексКартинкиОтраженияВДО = Мин(2, ИндексКартинкиОтраженияВДО);
	КонецЕсли;
	
	Если ИспользоватьПапкиДокументов
		И Не ЗначениеЗаполнено(Папка)
		И Не ЗначениеЗаполнено(ПапкаШаблона) Тогда
		
		Если ЗначениеЗаполнено(Шаблон) Тогда
			ТекстСообщения = НСтр("ru = 'Папка не указана ни в шаблоне, ни в настройках'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Папка не указана'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения, ,
			"Папка");
		
		ЕстьОшибки = Истина;
		ИндексКартинкиОтраженияВДО = Мин(1, ИндексКартинкиОтраженияВДО);
	КонецЕсли;
	
	Если ИспользоватьГрифыДоступа
		И Не ЗначениеЗаполнено(ГрифДоступа)
		И Не ЗначениеЗаполнено(ГрифДоступаШаблона) Тогда
		
		Если ЗначениеЗаполнено(ГрифДоступа) Тогда
			ТекстСообщения = НСтр("ru = 'Гриф доступа не указан ни в шаблоне, ни в настройках'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Гриф доступа не указан'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения, ,
			"ГрифДоступа");
		
		ЕстьОшибки = Истина;
		ИндексКартинкиОтраженияВДО = Мин(1, ИндексКартинкиОтраженияВДО);
	КонецЕсли;
	
	Если ИспользоватьВопросыДеятельности
		И Не ЗначениеЗаполнено(ВопросДеятельности)
		И Не ЗначениеЗаполнено(ВопросДеятельностиШаблона) Тогда
		
		Если ЗначениеЗаполнено(Шаблон) Тогда
			ТекстСообщения = НСтр("ru = 'Вопрос деятельности не указан ни в шаблоне, ни в настройках'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Вопрос деятельности не указан'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения, ,
			"ВопросДеятельности");
		
		ЕстьОшибки = Истина;
		ИндексКартинкиОтраженияВДО = Мин(1, ИндексКартинкиОтраженияВДО);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный)
		И Не ЗначениеЗаполнено(ОтветственныйШаблона)
		И ОбязательноеУказаниеОтветственного Тогда
		
		Если ЗначениеЗаполнено(Шаблон) Тогда
			ТекстСообщения = НСтр("ru = 'Ответственный не указан ни в шаблоне, ни в настройках'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Ответственный не указан'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения, ,
			"ВопросДеятельности");
		
		ЕстьОшибки = Истина;
		ИндексКартинкиОтраженияВДО = Мин(1, ИндексКартинкиОтраженияВДО);
	КонецЕсли;
	
	Если РолиФайловВидаДокумента.Количество() > 0 Тогда
		
		Если Не ЗначениеЗаполнено(РольФайла) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана роль файла для файла поступившего электронного документа'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения, ,
				"РольФайла");
			
			ЕстьОшибки = Истина;
			ИндексКартинкиОтраженияВДО = Мин(1, ИндексКартинкиОтраженияВДО);
		ИначеЕсли РолиФайловВидаДокумента.НайтиПоЗначению(РольФайла) = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Роль файла не доступна для данного вида документа'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения, ,
				"РольФайла");
			
			ЕстьОшибки = Истина;
			ИндексКартинкиОтраженияВДО = Мин(1, ИндексКартинкиОтраженияВДО);
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатПроверкиШаблонаНаименования = ПроверитьКорректностьШаблона(ШаблонНаименования);
	
	Если Не РезультатПроверкиШаблонаНаименования.Успех Тогда
		ТекстСообщения = НСтр("ru = 'Шаблон наименования документа заполнен некорректно:'")
			+ Символы.ПС
			+ РезультатПроверкиШаблонаНаименования.Описание;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения, ,
			"ШаблонНаименования");
		
		ЕстьОшибки = Истина;
		ИндексКартинкиОтраженияВДО = Мин(2, ИндексКартинкиОтраженияВДО);
	КонецЕсли;
	
	РезультатПроверкиШаблонаСодержания = ПроверитьКорректностьШаблона(ШаблонСодержания);
	
	Если Не РезультатПроверкиШаблонаСодержания.Успех Тогда
		ТекстСообщения = НСтр("ru = 'Шаблон содержания документа заполнен некорректно:'")
			+ Символы.ПС
			+ РезультатПроверкиШаблонаСодержания.Описание;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения, ,
			"ШаблонСодержания");
		
		ЕстьОшибки = Истина;
		ИндексКартинкиОтраженияВДО = Мин(2, ИндексКартинкиОтраженияВДО);
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(ИндексКартинкиОтраженияВДО)

	ПараметрыЗакрытия = ПараметрыИнициализацииФормы();
	ЗаполнитьЗначенияСвойств(ПараметрыЗакрытия, ЭтотОбъект);
	ПараметрыЗакрытия.ТематикаДокумента = Тематика;
	
	// Дополнительные служебные свойства
	ПараметрыЗакрытия.Вставить("Модифицированность", Модифицированность);
	ПараметрыЗакрытия.Вставить("ИндексКартинкиОтраженияВДО", ИндексКартинкиОтраженияВДО);
	
	Модифицированность = Ложь;
	
	Закрыть(ПараметрыЗакрытия);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветЗаписатьИЗакрыть(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИЗакрыть(ДопПараметры.ИндексКартинкиОтраженияВДО);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПоШаблону()
	
	ПредставленияДанныхШаблона = Новый Структура;
	ПредставленияДанныхШаблона.Вставить("Папка");
	ПредставленияДанныхШаблона.Вставить("ВопросДеятельности");
	ПредставленияДанныхШаблона.Вставить("Ответственный");
	ПредставленияДанныхШаблона.Вставить("ГрифДоступа");
	
	ПапкаШаблона = Неопределено;
	ВопросДеятельностиШаблона = Неопределено;
	ОтветственныйШаблона = Неопределено;
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
				"ВЫБРАТЬ
				|	ПРЕДСТАВЛЕНИЕ(Шаблоны.Папка) КАК ПапкаПредставление,
				|	Шаблоны.Папка КАК Папка,
				|	ПРЕДСТАВЛЕНИЕ(Шаблоны.ВопросДеятельности) КАК ВопросДеятельностиПредставление,
				|	Шаблоны.ВопросДеятельности КАК ВопросДеятельности,
				|	ПРЕДСТАВЛЕНИЕ(Шаблоны.Ответственный) КАК ОтветственныйПредставление,
				|	Шаблоны.Ответственный КАК Ответственный,
				|	ПРЕДСТАВЛЕНИЕ(Шаблоны.ГрифДоступа) КАК ГрифДоступаПредставление,
				|	Шаблоны.ГрифДоступа КАК ГрифДоступа
				|ИЗ
				|	Справочник.ШаблоныДокументов КАК Шаблоны
				|ГДЕ
				|	Шаблоны.Ссылка = &Шаблон";
		Запрос.УстановитьПараметр("Шаблон", Шаблон);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ПредставленияДанныхШаблона.Папка				= Выборка.ПапкаПредставление;
			ПредставленияДанныхШаблона.ВопросДеятельности	= Выборка.ВопросДеятельностиПредставление;
			ПредставленияДанныхШаблона.Ответственный		= Выборка.ОтветственныйПредставление;
			ПредставленияДанныхШаблона.ГрифДоступа			= Выборка.ГрифДоступаПредставление;
			
			ПапкаШаблона								= Выборка.Папка;
			ВопросДеятельностиШаблона					= Выборка.ВопросДеятельности;
			ОтветственныйШаблона						= Выборка.Ответственный;
			ГрифДоступаШаблона							= Выборка.ГрифДоступа;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьОтображениеПапкиДокумента(ПредставленияДанныхШаблона);
	НастроитьОтображениеВопросаДеятельности(ПредставленияДанныхШаблона);
	НастроитьОтображениеОтветственного(ПредставленияДанныхШаблона);
	НастроитьОтображениеГрифаДоступа(ПредставленияДанныхШаблона);
	НастроитьОтображениеРолиФайла();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеПапкиДокумента(ПредставленияДанныхШаблона)
	
	Элементы.Папка.АвтоОтметкаНезаполненного =
		Не ЗначениеЗаполнено(ПапкаШаблона)
		И СоздаватьАвтоматически;
	
	Если ЗначениеЗаполнено(ПредставленияДанныхШаблона.Папка) Тогда
		
		Элементы.Папка.Подсказка = СтрШаблон(
			НСтр("ru = 'В шаблоне документа: %1'"),
			ПредставленияДанныхШаблона.Папка);
		Элементы.Папка.ПодсказкаВвода = СтрШаблон(
			НСтр("ru = 'Из шаблона: %1'"),
			ПредставленияДанныхШаблона.Папка);
		
	Иначе
		
		Элементы.Папка.Подсказка = НСтр("ru = 'В шаблоне не заполнена'");
		Элементы.Папка.ПодсказкаВвода = "";
		
	КонецЕсли;
	
	Элементы.Папка.ОтметкаНезаполненного =
		Не ЗначениеЗаполнено(Папка)
		И Не ЗначениеЗаполнено(ПапкаШаблона)
		И СоздаватьАвтоматически;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеВопросаДеятельности(ПредставленияДанныхШаблона)
	
	Элементы.ВопросДеятельности.АвтоОтметкаНезаполненного =
		Не ЗначениеЗаполнено(ВопросДеятельностиШаблона)
		И СоздаватьАвтоматически;
	
	Если ЗначениеЗаполнено(ПредставленияДанныхШаблона.ВопросДеятельности) Тогда
		
		Элементы.ВопросДеятельности.Подсказка = СтрШаблон(
			НСтр("ru = 'В шаблоне документа: %1'"),
			ПредставленияДанныхШаблона.ВопросДеятельности);
		Элементы.ВопросДеятельности.ПодсказкаВвода = СтрШаблон(
			НСтр("ru = 'Из шаблона: %1'"),
			ПредставленияДанныхШаблона.ВопросДеятельности);
		
	Иначе
		
		Элементы.ВопросДеятельности.Подсказка = НСтр("ru = 'В шаблоне не заполнен'");
		Элементы.ВопросДеятельности.ПодсказкаВвода = "";
		
	КонецЕсли;
	
	Элементы.ВопросДеятельности.ОтметкаНезаполненного =
		Не ЗначениеЗаполнено(ВопросДеятельности)
		И Не ЗначениеЗаполнено(ВопросДеятельностиШаблона)
		И СоздаватьАвтоматически;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеОтветственного(ПредставленияДанныхШаблона)
	
	Элементы.Ответственный.АвтоОтметкаНезаполненного =
		Не ЗначениеЗаполнено(ОтветственныйШаблона)
		И ОбязательноеУказаниеОтветственного
		И СоздаватьАвтоматически;
	
	Если ЗначениеЗаполнено(ПредставленияДанныхШаблона.Ответственный) Тогда
		
		Элементы.Ответственный.Подсказка = СтрШаблон(
			НСтр("ru = 'В шаблоне документа: %1'"),
			ПредставленияДанныхШаблона.Ответственный);
		Элементы.Ответственный.ПодсказкаВвода = СтрШаблон(
			НСтр("ru = 'Из шаблона: %1'"),
			ПредставленияДанныхШаблона.Ответственный);
		
	Иначе
		
		Элементы.Ответственный.Подсказка = НСтр("ru = 'В шаблоне не заполнен'");
		Элементы.Ответственный.ПодсказкаВвода = "";
		
	КонецЕсли;
	
	Элементы.Ответственный.ОтметкаНезаполненного =
		Не ЗначениеЗаполнено(Ответственный)
		И Не ЗначениеЗаполнено(ОтветственныйШаблона)
		И ОбязательноеУказаниеОтветственного
		И СоздаватьАвтоматически;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеГрифаДоступа(ПредставленияДанныхШаблона)
	
	Элементы.ГрифДоступа.АвтоОтметкаНезаполненного =
		Не ЗначениеЗаполнено(ГрифДоступаШаблона)
		И СоздаватьАвтоматически;
	
	Если ЗначениеЗаполнено(ПредставленияДанныхШаблона.ГрифДоступа) Тогда
		
		Элементы.ГрифДоступа.Подсказка = СтрШаблон(
			НСтр("ru = 'В шаблоне документа: %1'"),
			ПредставленияДанныхШаблона.ГрифДоступа);
		Элементы.ГрифДоступа.ПодсказкаВвода = СтрШаблон(
			НСтр("ru = 'Из шаблона: %1'"),
			ПредставленияДанныхШаблона.ГрифДоступа);
		
	Иначе
		
		Элементы.ГрифДоступа.Подсказка = НСтр("ru = 'В шаблоне не заполнен'");
		Элементы.ГрифДоступа.ПодсказкаВвода = "";
		
	КонецЕсли;
	
	Элементы.ГрифДоступа.ОтметкаНезаполненного =
		Не ЗначениеЗаполнено(ГрифДоступа)
		И Не ЗначениеЗаполнено(ГрифДоступаШаблона)
		И СоздаватьАвтоматически;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеРолиФайла()
	
	НеобходимоУказатьРольФайла = РолиФайловВидаДокумента.Количество() > 0;
	
	Элементы.РольФайла.Видимость = НеобходимоУказатьРольФайла;
	Элементы.РольФайла.Подсказка = НСтр("ru = 'Роль файла электронного документа'");
	
	Элементы.РольФайла.АвтоОтметкаНезаполненного =
		НеобходимоУказатьРольФайла
		И СоздаватьАвтоматически;
	
	Элементы.РольФайла.ОтметкаНезаполненного =
		НеобходимоУказатьРольФайла
		И Не ЗначениеЗаполнено(РольФайла)
		И СоздаватьАвтоматически;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПодсказкиЭлементовПоШаблону()

	Если Не ЗначениеЗаполнено(Шаблон) Тогда
	
		Элементы.Папка.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.ВопросДеятельности.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.Ответственный.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.ГрифДоступа.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	
	Иначе
	
		Элементы.Папка.ОтображениеПодсказки = 
			?(ЗначениеЗаполнено(Папка) И ЗначениеЗаполнено(ПапкаШаблона),
				ОтображениеПодсказки.ОтображатьСнизу,
				ОтображениеПодсказки.Нет);
		Элементы.ВопросДеятельности.ОтображениеПодсказки = 
			?(ЗначениеЗаполнено(ВопросДеятельности) И ЗначениеЗаполнено(ВопросДеятельностиШаблона),
				ОтображениеПодсказки.ОтображатьСнизу,
				ОтображениеПодсказки.Нет);
		Элементы.Ответственный.ОтображениеПодсказки = 
			?(ЗначениеЗаполнено(Ответственный) И ЗначениеЗаполнено(ОтветственныйШаблона),
				ОтображениеПодсказки.ОтображатьСнизу,
				ОтображениеПодсказки.Нет);
		Элементы.ГрифДоступа.ОтображениеПодсказки = 
			?(ЗначениеЗаполнено(ГрифДоступа) И ЗначениеЗаполнено(ГрифДоступаШаблона),
				ОтображениеПодсказки.ОтображатьСнизу,
				ОтображениеПодсказки.Нет);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьКорректностьШаблона(ШаблонЗаполнения)
	
	СтруктураВозврата = Новый Структура("Успех, Описание");
	
	РезультатВыделенияПараметров = ОбменСКонтрагентамиДОСервер.ПараметрыВШаблонеСтроковогоПоля(ШаблонЗаполнения);
	
	Если Не РезультатВыделенияПараметров.Успех Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, РезультатВыделенияПараметров);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДеревоПараметров = ОбменСКонтрагентамиДОСервер.ДеревоПараметровЗаполненияСтроковыхПолей(
		"ДеревоПараметровСозданияДокумента");
	
	Для Каждого ИмяПараметра Из РезультатВыделенияПараметров.МассивПараметров Цикл
		Если ДеревоПараметров.Строки.Найти(ИмяПараметра, "ПредставлениеПолное", Истина) = Неопределено Тогда
			
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.Описание = СтрШаблон(
				НСтр("ru = 'Параметр [%1] не найден в возможных параметрах заполнения.'"),
				ИмяПараметра);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.Описание = НСтр("ru = 'Шаблон заполнения корректен'");
	
	Возврат СтруктураВозврата;
	
КонецФункции // ()

&НаСервере
Процедура ЗаполнитьПараметрыФормыПоВидуДокументаДО()
	
	РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента,
		"ВестиУчетПоТематикам, ОбязательноеУказаниеОтветственного");
	
	ОбязательноеУказаниеОтветственного = РеквизитыВидаДокумента.ОбязательноеУказаниеОтветственного;
	ВестиУчетПоТематикам = РеквизитыВидаДокумента.ВестиУчетПоТематикам;
	
	Если Не ВестиУчетПоТематикам Тогда
		Тематика = Справочники.ТематикиДокументов.ПустаяСсылка();
	КонецЕсли;
	
	ВидДокументаВШаблоне = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "ВидДокумента");
	
	Если ВидДокументаВШаблоне <> ВидДокумента Тогда
		Шаблон = Справочники.ШаблоныДокументов.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьРолиФайловВидаДокумента();
	
	НастроитьЭлементыПоШаблону();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРолиФайловВидаДокумента()
	
	РолиФайловВидаДокумента.Очистить();
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		РольФайла = Справочники.РолиФайлов.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	ТаблицаРолей = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
	
	РольФайлаДоступнаДляВида = Ложь;
	
	Для Каждого Строка Из ТаблицаРолей Цикл
		
		РолиФайловВидаДокумента.Добавить(Строка.Роль);
		
		Если Строка.Роль = РольФайла Тогда
			РольФайлаДоступнаДляВида = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РольФайлаДоступнаДляВида Тогда
		РольФайла = Справочники.РолиФайлов.ПустаяСсылка();
	КонецЕсли;
	
	Элементы.РольФайла.СписокВыбора.Очистить();
	
	Для Каждого Элемент Из РолиФайловВидаДокумента Цикл
		Элементы.РольФайла.СписокВыбора.Добавить(Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

#Область ПроверкаМодифицированности

&НаКлиенте
Процедура ПроверитьМодифицированностьПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы
		Или Отказ
		Или Не Модифицированность
		Или НеПроверятьМодифицированностьПриЗакрытии = Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Данные изменены. Сохранить настройки?'");
	
	ОбработчикОтвета = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОМодифицированности", ЭтотОбъект);
	
	ПоказатьВопрос(ОбработчикОтвета,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНетОтмена, ,
		КодВозвратаДиалога.Да,
		НСтр("ru = 'Данные изменены'"));
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросОМодифицированности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		НеПроверятьМодифицированностьПриЗакрытии = Истина;
		Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		ИндексКартинкиОтраженияВДО = 3;
		НастройкиКорректны(ИндексКартинкиОтраженияВДО);
		ЗаписатьИЗакрыть(ИндексКартинкиОтраженияВДО);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
