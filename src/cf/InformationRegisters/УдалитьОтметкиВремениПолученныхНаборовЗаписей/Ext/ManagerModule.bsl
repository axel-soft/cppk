#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Удаляет порцию устаревших данных.
// 
// Булево - Истина, если были найдены устаревшие данные, в противном случае Ложь.
//
Функция УдалитьПорциюУстаревшихДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Очистка регистра сведений отметки времени полученных наборов записей'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало выполнения'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ЕстьДанныеДляУдаления = Ложь;
	
	// Удаление старых записей.
	СрокХраненияДней = 14;
	//@skip-check use-non-recommended-method
	ВерхняяОтметкаВремени = Формат(ТекущаяДата() - СрокХраненияДней * 86400, "ДФ=yyyyMMddHHmmss000"); //  86400 - секунд в сутках
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОтметкиВремениПолученныхНаборовЗаписей.Узел КАК Узел,
		|	ОтметкиВремениПолученныхНаборовЗаписей.Ключ КАК Ключ,
		|	ОтметкиВремениПолученныхНаборовЗаписей.ИдентификаторОбъектаМетаданных КАК ИдентификаторОбъектаМетаданных
		|ИЗ
		|	РегистрСведений.ОтметкиВремениПолученныхНаборовЗаписей КАК ОтметкиВремениПолученныхНаборовЗаписей
		|ГДЕ
		|	ОтметкиВремениПолученныхНаборовЗаписей.Отметка <> """"
		|	И ОтметкиВремениПолученныхНаборовЗаписей.Отметка < &ВерхняяОтметкаВремени
		|	И ОтметкиВремениПолученныхНаборовЗаписей.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных");
	Запрос.УстановитьПараметр("ВерхняяОтметкаВремени", ВерхняяОтметкаВремени);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.РегистрыСведений.ОчередьУведомлений));
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Для Каждого Стр Из Результат Цикл
		Стр.Идентификатор = Новый УникальныйИдентификатор(Стр.Ключ);	
	КонецЦикла; 
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьУведомлений.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|ГДЕ
		|	ОчередьУведомлений.Идентификатор В (&МассивИдентификаторов)");
	Запрос.УстановитьПараметр("МассивИдентификаторов", Результат.ВыгрузитьКолонку("Идентификатор"));
	ИдентификаторыОчередиУведомлений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
 
	Для Каждого Стр Из Результат Цикл
		
		Если ИдентификаторыОчередиУведомлений.Найти(Стр.Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьДанныеДляУдаления = Истина;
		
		Попытка
			
			МенеджерЗаписи = РегистрыСведений.ОтметкиВремениПолученныхНаборовЗаписей.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Стр);
			МенеджерЗаписи.Удалить();
			
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Очистка регистра сведений отметки времени полученных наборов записей'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Очистка регистра сведений отметки времени полученных наборов записей'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершение'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Возврат ЕстьДанныеДляУдаления;
	
КонецФункции

#КонецОбласти

#КонецЕсли