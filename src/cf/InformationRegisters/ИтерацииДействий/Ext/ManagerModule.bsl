#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Делает запись в регистр.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  НомерИтерации - Число
//  ИдентификаторУчастника - УникальныйИдентификатор
//
Процедура ДобавитьЗапись(Действие, НомерИтерации, Знач ИдентификаторУчастника = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияИсполнения")
		И ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияСогласования")
		И ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияПодписания") Тогда
		ИдентификаторУчастника = Неопределено;
	КонецЕсли;	
	
	Запись = РегистрыСведений.ИтерацииДействий.СоздатьМенеджерЗаписи();
	Запись.Действие = Действие;
	Запись.ИдентификаторУчастника = ИдентификаторУчастника;
	Запись.НомерИтерации = НомерИтерации;
	Запись.Записать(Истина);
	
КонецПроцедуры

// Получает номер итерации действия
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  ИдентификаторУчастника - УникальныйИдентификатор 
//
Функция НомерИтерации(Действие, Знач ИдентификаторУчастника = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияИсполнения")
		И ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияСогласования")
		И ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияПодписания") Тогда
		ИдентификаторУчастника = Неопределено;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИтерацииДействий.НомерИтерации
			|ИЗ
			|	РегистрСведений.ИтерацииДействий КАК ИтерацииДействий
			|ГДЕ
			|	ИтерацииДействий.Действие = &Действие
			|	И ИтерацииДействий.ИдентификаторУчастника = &ИдентификаторУчастника";
		Запрос.УстановитьПараметр("Действие", Действие);
		Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдентификаторУчастника);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.НомерИтерации;
		КонецЕсли;
				
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИтерацииДействий.НомерИтерации
		|ИЗ
		|	РегистрСведений.ИтерацииДействий КАК ИтерацииДействий
		|ГДЕ
		|	ИтерацииДействий.Действие = &Действие";
	Запрос.УстановитьПараметр("Действие", Действие);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.НомерИтерации;
	КонецЕсли;
		
	Возврат 0;	
	
КонецФункции

// Инкрементирует
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  ИдентификаторУчастника - УникальныйИдентификатор
//
Процедура ИнкрементироватьНомерИтерации(Действие, Знач ИдентификаторУчастника = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияИсполнения")
		И ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияСогласования")
		И ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияПодписания") Тогда
		ИдентификаторУчастника = Неопределено;
	КонецЕсли;	
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИтерацииДействий");
	ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
	Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", ИдентификаторУчастника);
	КонецЕсли;
	
	Попытка
		
		Блокировка.Заблокировать();
	
		Запись = РегистрыСведений.ИтерацииДействий.СоздатьМенеджерЗаписи();
		Запись.Действие = Действие;
		Запись.ИдентификаторУчастника = ИдентификаторУчастника;
		Запись.Прочитать();
		
		Если Запись.Выбран() Тогда
			Запись.НомерИтерации = Запись.НомерИтерации + 1;
			Запись.Действие = Действие;
			Запись.ИдентификаторУчастника = ИдентификаторУчастника;
			Запись.Записать(Истина);
		Иначе
			Запись.НомерИтерации = 1;
			Запись.Действие = Действие;
			Запись.ИдентификаторУчастника = ИдентификаторУчастника;
			Запись.Записать(Истина);
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли