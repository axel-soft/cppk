
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает состояние действия.
// Если функция и участник не переданы, значит записывается состояние действия в целом.
// Если передано пустое состояние, процедура удалит запись с состоянием, если она будет найдена.
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие.
// 	Состояние - ПеречислениеСсылка.СостоянияВыполненияДействий - устанавливаемое состояние.
// 	ПараметрыУчастника - Неопределено, Структура - параметры участника.
//
Процедура УстановитьСостояние(ДействиеСсылка, Состояние, ПараметрыУчастника = Неопределено) Экспорт

	ФункцияУчастника = Неопределено;
	Участник = Неопределено;
	ИдентификаторПункта = Неопределено;
	ДатаСостояния = Неопределено;
	ИдентификаторУчастника = Неопределено;
	Если ПараметрыУчастника <> Неопределено Тогда
		ПараметрыУчастника.Свойство("Функция", ФункцияУчастника);
		ПараметрыУчастника.Свойство("Участник", Участник);
		ПараметрыУчастника.Свойство("ДатаИсполнения", ДатаСостояния);
		Если Не ПараметрыУчастника.Свойство("ВыполненоВнеПрограммы") Тогда
			ИдентификаторУчастника = ?(ПараметрыУчастника.Свойство("ИдентификаторУчастника"),
				ПараметрыУчастника.ИдентификаторУчастника, ПараметрыУчастника.Идентификатор);
		КонецЕсли;
		ПараметрыУчастника.Свойство("ИдентификаторПункта", ИдентификаторПункта);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка переданных параметров.
	Если Не ЗначениеЗаполнено(ДействиеСсылка) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено действие для установки состояния'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФункцияУчастника) Тогда
		ФункцияУчастника = Неопределено; // Другие пустые значения запрещены.
		Если ЗначениеЗаполнено(Участник) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнена функция участника'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Участник = Неопределено; // Другие пустые значения запрещены.
		Если ЗначениеЗаполнено(ФункцияУчастника) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнен участник'");
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторПункта = Неопределено Тогда
		ИдентификаторПункта = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	
	Если ИдентификаторУчастника = Неопределено Тогда
		ИдентификаторУчастника = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСостояния) Тогда
		ОтслеживатьИзменениеДаты = Ложь;
		ДатаСостояния = ТекущаяДатаСеанса();
	Иначе
		ОтслеживатьИзменениеДаты = Истина;
	КонецЕсли;
	
	СообщениеОПараметрах = Новый Массив();
	СообщениеОПараметрах.Добавить(Строка(ДействиеСсылка));
	СообщениеОПараметрах.Добавить("Состояние." + Строка(Состояние));
	СообщениеОПараметрах.Добавить("ФункцияУчастника." + Строка(ФункцияУчастника));
	СообщениеОПараметрах.Добавить("Участник." + Строка(Участник));
	СообщениеОПараметрах.Добавить("ИдентификаторПункта." + Строка(ИдентификаторПункта));
	ТекстСообщения = СтрСоединить(СообщениеОПараметрах, Символы.ВК);
	ЗаписьЖурналаРегистрации(НСтр("ru='РС СостоянияДействий УстановитьСостояние'"), УровеньЖурналаРегистрации.Информация, 
		, , ТекстСообщения);
		
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Действие.Установить(ДействиеСсылка);
	Набор.Отбор.ИдентификаторПункта.Установить(ИдентификаторПункта);
	Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Набор.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
	Иначе
		Набор.Отбор.Участник.Установить(Участник);
	КонецЕсли;
	Набор.Отбор.Функция.Установить(ФункцияУчастника);
	Набор.Прочитать();
	
	Если Набор.Количество() Тогда
		Запись = Набор[0];
		Если Запись.Состояние = Состояние
			И Не(ОтслеживатьИзменениеДаты И Запись.Дата <> ДатаСостояния)
			И Запись.Участник = Участник Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Запись = Набор.Добавить();
		Запись.Действие = ДействиеСсылка;
		Запись.Функция = ФункцияУчастника;
		Запись.ИдентификаторПункта = ИдентификаторПункта;
		Запись.ИдентификаторУчастника = ИдентификаторУчастника;
	КонецЕсли;
	
	Запись.Участник = Участник;
	Запись.Состояние = Состояние;
	Запись.Дата = ДатаСостояния;
	Набор.Записать();
	
	РаботаСПроцессамиПоДействиямСобытия.ПриИзмененииСостоянияДействия(
		ДействиеСсылка, Состояние, ПараметрыУчастника);
	
КонецПроцедуры

// Возвращает состояние текущего действия или участника действия
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий
// 	Участник - ОпределяемыйТип.УчастникЗадач
// 	ИдентификаторПункта - УникальныйИдентификатор - идентификатор пункта
// 	ИдентификаторУчастника - УникальныйИдентификатор - идентификатор участника
// 	
// Возвращаемое значение:
// 	Неопределено, ПеречислениеСсылка.СостоянияВыполненияДействий - состояние текущего действия или участника действия
//
Функция СостояниеДействия(
			ДействиеСсылка,
			Знач ФункцияУчастника = Неопределено,
			Знач Участник = Неопределено,
			Знач ИдентификаторПункта = Неопределено,
			Знач ИдентификаторУчастника = Неопределено) Экспорт
	
	Состояние = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияДействий.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|ГДЕ
		|	СостоянияДействий.Действие = &Действие
		|	И СостоянияДействий.Участник = &Участник
		|	И СостоянияДействий.ИдентификаторУчастника = &ИдентификаторУчастника
		|	И СостоянияДействий.ИдентификаторПункта = &ИдентификаторПункта
		|	И СостоянияДействий.Функция = &Функция";
		
	Если ИдентификаторПункта = Неопределено Тогда
		ИдентификаторПункта = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	Если ИдентификаторУчастника = Неопределено Тогда
		ИдентификаторУчастника = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	Запрос.Параметры.Вставить("Действие", ДействиеСсылка);
	Запрос.Параметры.Вставить("Участник", Участник);
	Запрос.Параметры.Вставить("ИдентификаторУчастника", 
		ИдентификаторУчастника);
	Запрос.Параметры.Вставить("ИдентификаторПункта", 
		ИдентификаторПункта);
	Запрос.Параметры.Вставить("Функция", ФункцияУчастника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Состояние = Выборка.Состояние;
	КонецЦикла;
	
	Возврат Состояние;
	
КонецФункции

// Возвращает состояние действия по функции участника.
// 
// Параметры:
//  ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие
//  ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий - Функция, состояние которой нужно
//  	получить.
//  ИдентификаторПункта - УникальныйИдентификатор, Неопределено - Идентификатор пункта
//  ИдентификаторУчастника - УникальныйИдентификатор, Неопределено - Идентификатор участника
// 
// Возвращаемое значение:
//  Неопределено, ПеречислениеСсылка.СостоянияВыполненияДействий - Состояние действия по функции участника
Функция СостояниеДействияПоФункцииУчастника(ДействиеСсылка, 
	ФункцияУчастника, 
	ИдентификаторПункта = Неопределено,
	ИдентификаторУчастника = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияДействий.ИдентификаторУчастника,
		|	СостоянияДействий.ИдентификаторПункта,
		|	СостоянияДействий.Функция,
		|	СостоянияДействий.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|ГДЕ
		|	СостоянияДействий.Действие = &Действие";
	
	Запрос.Параметры.Вставить("Действие", ДействиеСсылка);
	
	СостоянияДействия = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторУчастника", УникальныйИдентификаторПустой());
	Отбор.Вставить("ИдентификаторПункта", УникальныйИдентификаторПустой());
	Отбор.Вставить("Функция", Неопределено);
	Отбор.Вставить("Состояние", Перечисления.СостоянияВыполненияДействий.Завершено);
	
	// Если у всего действия состояние завершено, то его и возвращаем.
	// Игнорируем участников доп. выполнения (исполняются действие после завершения),
	// т.к. они не влияют на действие. 
	Если СостоянияДействия.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат Перечисления.СостоянияВыполненияДействий.Завершено;
	КонецЕсли;
	
	Если ИдентификаторПункта = Неопределено Тогда
		ИдентификаторПункта = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	
	Отбор.Очистить();
	Отбор.Вставить("ИдентификаторПункта", ИдентификаторПункта);
	Отбор.Вставить("Функция", ФункцияУчастника);
	
	Если ИдентификаторУчастника <> Неопределено Тогда
		Отбор.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
	КонецЕсли;
	
	СостоянияУчастников = Новый Массив;
	Для Каждого СтрокаТаблицы Из СостоянияДействия.НайтиСтроки(Отбор) Цикл
		СостоянияУчастников.Добавить(СтрокаТаблицы.Состояние);
	КонецЦикла;
	
	Участники = ДействияСервер.ВсеУчастникиДействия(ДействиеСсылка);
	Если ИдентификаторУчастника <> Неопределено 
		И ИдентификаторУчастника <> ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор() Тогда
		УчастникиПоФункции = Участники.НайтиСтроки(Новый Структура("Функция, Идентификатор",
			ФункцияУчастника, ИдентификаторУчастника));
	
	ИначеЕсли ИдентификаторПункта <> Неопределено 
		И ИдентификаторПункта <> ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор() 
		И ДействияКлиентСервер.ЭтоДействиеСЭтапами(ДействиеСсылка) Тогда
		УчастникиПоФункции = Участники.НайтиСтроки(Новый Структура("Функция, ИдентификаторЭтапа",
			ФункцияУчастника, ИдентификаторПункта));
		
	Иначе	
		УчастникиПоФункции = Участники.НайтиСтроки(Новый Структура("Функция", ФункцияУчастника));
	КонецЕсли;
	
	Состояние = Неопределено;
	Если СостоянияУчастников.Количество() = УчастникиПоФункции.Количество() Тогда
		
		СостоянияУчастников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СостоянияУчастников);
		Если СостоянияУчастников.Количество() = 1 Тогда
			Состояние = СостоянияУчастников[0];
		ИначеЕсли СостоянияУчастников.Найти(Перечисления.СостоянияВыполненияДействий.Выполняется) <> Неопределено Тогда
			Состояние = Перечисления.СостоянияВыполненияДействий.Выполняется;
		КонецЕсли;
	
	ИначеЕсли СостоянияУчастников.Количество() < УчастникиПоФункции.Количество() Тогда
		
		Состояние = Перечисления.СостоянияВыполненияДействий.Выполняется;
		
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

// Возвращает состояние действия по ИдентификаторУчастника
// 
// Параметры:
//  ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие
//  ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий - Функция, состояние которой нужно
//  	получить.
//  ИдентификаторУчастника - УникальныйИдентификатор, Неопределено - Идентификатор участника
// 
// Возвращаемое значение:
//  Неопределено, ПеречислениеСсылка.СостоянияВыполненияДействий - Состояние действия по функции участника
Функция СостояниеДействияПоИдентификаторУчастника(ДействиеСсылка, 
	ФункцияУчастника, 
	ИдентификаторУчастника) Экспорт
	
	Состояние = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияДействий.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|ГДЕ
		|	СостоянияДействий.Действие = &Действие
		|	И СостоянияДействий.ИдентификаторУчастника = &ИдентификаторУчастника
		|	И СостоянияДействий.Функция = &Функция";
		
	Запрос.Параметры.Вставить("Действие", ДействиеСсылка);
	Запрос.Параметры.Вставить("ИдентификаторУчастника", 
		ИдентификаторУчастника);
	Запрос.Параметры.Вставить("Функция", ФункцияУчастника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Состояние = Выборка.Состояние;
	КонецЦикла;
	
	Возврат Состояние;
	
КонецФункции

// Удаляет состояние действия или участника действия
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий
// 	Участник - ОпределяемыйТип.УчастникЗадач
// 	ИдентификаторПункта - УникальныйИдентификатор - идентификатор пункта
// 	ИдентификаторУчастника - УникальныйИдентификатор - идентификатор участника
//
Процедура УдалитьСостояние(
			ДействиеСсылка,
			Знач ФункцияУчастника = Неопределено,
			Знач Участник = Неопределено,
			Знач ИдентификаторПункта = Неопределено,
			Знач ИдентификаторУчастника = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка переданных параметров.
	Если Не ЗначениеЗаполнено(ДействиеСсылка) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено действие для удаления результата'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФункцияУчастника) Тогда
		ФункцияУчастника = Неопределено; // Другие пустые значения запрещены.
		Если ЗначениеЗаполнено(Участник) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнена функция участника'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Участник = Неопределено; // Другие пустые значения запрещены.
		Если ЗначениеЗаполнено(ФункцияУчастника) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнен участник'");
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторПункта = Неопределено Тогда
		ИдентификаторПункта = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	Если ИдентификаторУчастника = Неопределено Тогда
		ИдентификаторУчастника = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Действие.Установить(ДействиеСсылка);
	Набор.Отбор.ИдентификаторПункта.Установить(ИдентификаторПункта);
	Набор.Отбор.Функция.Установить(ФункцияУчастника);
	Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Набор.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
	Иначе
		Набор.Отбор.Участник.Установить(Участник);
	КонецЕсли;
	Набор.Прочитать();
	
	Если Набор.Количество() Тогда
		Набор.Очистить();
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все состояния по действию.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//
Процедура УдалитьВсеСостоянияДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Действие.Установить(Действие);
	Набор.Записать();
	
КонецПроцедуры

// Заменяет участника в регистре.
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий
// 	СтарыйУчастник - ОпределяемыйТип.УчастникЗадач
// 	НовыйУчастник - ОпределяемыйТип.УчастникЗадач
// 	ИдентификаторУчастника - УникальныйИдентификатор - идентификатор пункта
//
Процедура ОбработатьЗаменуУчастникаДействия(
			ДействиеСсылка, ФункцияУчастника, СтарыйУчастник, НовыйУчастник, Знач ИдентификаторУчастника) Экспорт
			
	Если СтарыйУчастник = НовыйУчастник Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.Действие.Установить(ДействиеСсылка);
		Набор.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
		Набор.Отбор.Функция.Установить(ФункцияУчастника);
		Набор.Прочитать();
		
		Если Набор.Количество() Тогда
			Если НовыйУчастник = Неопределено Тогда
				ВызватьИсключение(НСтр("ru = 'Не заполнен новый участник действия!'"));
			КонецЕсли;
			Для Каждого Запись Из Набор Цикл
				Запись.Участник = НовыйУчастник;
			КонецЦикла;
			Набор.Записать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заменяет идентификатор этапа в регистре.
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий
// 	ИдентификаторУчастника - УникальныйИдентификатор - идентификатор участника
// 	НовыйИдентификаторПункта - УникальныйИдентификатор - идентификатор пункта
// 
Процедура ОбработатьЗаполнениеИдентификатораЭтапа(
			ДействиеСсылка, ФункцияУчастника, ИдентификаторУчастника, НовыйИдентификаторПункта) Экспорт
			
	Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.Действие.Установить(ДействиеСсылка);
		Набор.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
		Набор.Отбор.Функция.Установить(ФункцияУчастника);
		Набор.Прочитать();
		
		Если Набор.Количество() Тогда
			Для Каждого Запись Из Набор Цикл
				Запись.ИдентификаторПункта = НовыйИдентификаторПункта;
			КонецЦикла;
			Набор.Записать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу с датами исполнения участниками своих задач
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Даты исполнения участниками действия своих задач
Функция ДатыИсполненияУчастникамиДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Участник,
	|	ИдентификаторУчастника,
	|	Дата,
	|	СостоянияДействий.Функция
	|ИЗ
	|	РегистрСведений.СостоянияДействий Как СостоянияДействий
	|Где
	|	Действие = &Действие
	|	И Участник <> Неопределено
	|	И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)";
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает состояние и дату состояния текущего действия или участника действия
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий
// 	Участник - ОпределяемыйТип.УчастникЗадач
// 	ИдентификаторПункта - УникальныйИдентификатор - идентификатор пункта
// 	ИдентификаторУчастника - УникальныйИдентификатор - идентификатор участника
// 	
// Возвращаемое значение:
// 	СостояниеИДатаСостояния - структура, ПеречислениеСсылка.СостоянияВыполненияДействий - состояние текущего действия или участника действия
// * Состояние - ПеречислениеСсылка.СостоянияВыполненияДействий - состояние действия
// * Дата - Дата - дата установки
Функция СостояниеИДатаСостоянияДействия(ДействиеСсылка,
	Знач ФункцияУчастника = Неопределено,
	Знач Участник = Неопределено,
	Знач ИдентификаторПункта = Неопределено,
	Знач ИдентификаторУчастника = Неопределено) Экспорт
	
	СостояниеИДатаСостояния = Новый Структура;
	СостояниеИДатаСостояния.Вставить("Состояние", Перечисления.СостоянияВыполненияДействий.ПустаяСсылка());
	СостояниеИДатаСостояния.Вставить("Дата", Дата(1, 1, 1));
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияДействий.Состояние,
		|	СостоянияДействий.Дата
		|ИЗ
		|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|ГДЕ
		|	СостоянияДействий.Действие = &Действие
		|	И СостоянияДействий.Участник = &Участник
		|	И СостоянияДействий.ИдентификаторУчастника = &ИдентификаторУчастника
		|	И СостоянияДействий.ИдентификаторПункта = &ИдентификаторПункта
		|	И СостоянияДействий.Функция = &Функция";
		
	Если ИдентификаторПункта = Неопределено Тогда
		ИдентификаторПункта = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	Если ИдентификаторУчастника = Неопределено Тогда
		ИдентификаторУчастника = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	Запрос.Параметры.Вставить("Действие", ДействиеСсылка);
	Запрос.Параметры.Вставить("Участник", Участник);
	Запрос.Параметры.Вставить("ИдентификаторУчастника", 
		ИдентификаторУчастника);
	Запрос.Параметры.Вставить("ИдентификаторПункта", 
		ИдентификаторПункта);
	Запрос.Параметры.Вставить("Функция", ФункцияУчастника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СостояниеИДатаСостояния.Вставить("Состояние", Выборка.Состояние);
		СостояниеИДатаСостояния.Вставить("Дата", Выборка.Дата);
	КонецЦикла;
	
	Возврат СостояниеИДатаСостояния;
	
КонецФункции

// Обновит дату состояния действия
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие.
Процедура ОбновитьДату(ДействиеСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Действие.Установить(ДействиеСсылка);
	Набор.Прочитать();
	
	Если Набор.Количество() Тогда
		
		Запись = Набор[0];
		
		Запись.Дата = ТекущаяДатаСеанса();
		Набор.Записать();
	
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли
