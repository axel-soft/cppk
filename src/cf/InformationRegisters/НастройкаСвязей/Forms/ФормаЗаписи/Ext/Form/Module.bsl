
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаписьОбратнойСвязи = Неопределено;
	
	Если ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ЗаписьОбратнойСвязи = НайтиЗаписьОбратнойСвязи();
	ИначеЕсли Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		Если Параметры.Свойство("СсылкаИз") Тогда 
			Запись.СсылкаИз = Параметры.СсылкаИз;
		КонецЕсли;
		Если Параметры.Свойство("СсылкаНа") Тогда 
			Запись.СсылкаНа = Параметры.СсылкаНа;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 	
		Запись.Предопределенная = Ложь;
	КонецЕсли;
	
	ТипСсылкаИз = ПолучитьТип(Запись.СсылкаИз);
	
	Если ЗначениеЗаполнено(Запись.ВидКорреспонденцииДокументИз) Тогда
	
		Если Запись.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Входящая Тогда
			ТипСсылкаИз = "Перечисление.ВидыКорреспонденции." + "Входящая";
		ИначеЕсли Запись.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Исходящая Тогда
			ТипСсылкаИз = "Перечисление.ВидыКорреспонденции." + "Исходящая";
		КонецЕсли;	
		
		ВидКорреспонденцииДокументИз = Запись.ВидКорреспонденцииДокументИз;
		УстановитьПараметрыВыбораСсылкиДокумента(Элементы.СсылкаИз, ВидКорреспонденцииДокументИз);
		
	ИначеЕсли ТипЗнч(Запись.СсылкаИз) = Тип("СправочникСсылка.ВидыДокументов") Тогда
		
		УстановитьПараметрыВыбораСсылкиДокумента(Элементы.СсылкаИз, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипСсылкаИз) Тогда 
		Элементы.СсылкаИз.ТолькоПросмотр = Истина;
	ИначеЕсли ТипСсылкаИз = "СправочникСсылка.Мероприятия" 
		Или ТипСсылкаИз = "СправочникСсылка.Файлы" 
		Или ТипСсылкаИз = "СправочникСсылка.Проекты"
		Или ТипСсылкаИз = "ДокументСсылка.ВходящееПисьмо"
		Или ТипСсылкаИз = "ДокументСсылка.ИсходящееПисьмо" Тогда 
		Элементы.СсылкаИз.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	ТипСсылкаНа = ПолучитьТип(Запись.СсылкаНа);
	
	Если ЗначениеЗаполнено(Запись.ВидКорреспонденцииДокументНа) Тогда
	
		Если Запись.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Входящая Тогда
			ТипСсылкаНа = "Перечисление.ВидыКорреспонденции." + "Входящая";
		ИначеЕсли Запись.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Исходящая Тогда
			ТипСсылкаНа = "Перечисление.ВидыКорреспонденции." + "Исходящая";
		КонецЕсли;	
		
		ВидКорреспонденцииДокументНа = Запись.ВидКорреспонденцииДокументНа;
		УстановитьПараметрыВыбораСсылкиДокумента(Элементы.СсылкаНа, ВидКорреспонденцииДокументНа);
		
	ИначеЕсли ТипЗнч(Запись.СсылкаНа) = Тип("СправочникСсылка.ВидыДокументов") Тогда
		
		УстановитьПараметрыВыбораСсылкиДокумента(Элементы.СсылкаНа, Неопределено);

	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТипСсылкаНа) Тогда 
		Элементы.СсылкаНа.ТолькоПросмотр = Истина;
	ИначеЕсли ТипСсылкаНа = "СправочникСсылка.Мероприятия" 
		Или ТипСсылкаНа = "СправочникСсылка.Файлы"
		Или ТипСсылкаНа = "СправочникСсылка.Проекты"
		Или ТипСсылкаНа = "ДокументСсылка.ВходящееПисьмо"
		Или ТипСсылкаНа = "ДокументСсылка.ИсходящееПисьмо" Тогда 	
		Элементы.СсылкаНа.ТолькоПросмотр = Истина;
	ИначеЕсли ТипСсылкаНа = "Строка" Тогда 
		Элементы.СсылкаНа.ТолькоПросмотр = Истина;
		Элементы.ТипОбратнойСвязи.ТолькоПросмотр = Истина;
		Элементы.ХарактерОбратнойСвязи.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЭтоПолныеПрава = РольДоступна("ПолныеПрава");
	Элементы.СинхронизироватьДоступ.ТолькоПросмотр = Не ЭтоПолныеПрава
		Или Элементы.СсылкаНа.ТолькоПросмотр Или Элементы.СсылкаИз.ТолькоПросмотр;
	
	Если Запись.Предопределенная Тогда 
		Элементы.ГруппаТипСвязи.ТолькоПросмотр = Истина;
		Элементы.ГруппаСсылкаИз.ТолькоПросмотр = Истина;
		Элементы.ГруппаСсылкаНа.ТолькоПросмотр = Истина;
		Элементы.Обязательная.ТолькоПросмотр = Истина;
		Элементы.ГруппаОбратнаяСвязь.ТолькоПросмотр = Истина;
		Элементы.Декорации.ТекущаяСтраница = Элементы.ПредопределеннаяДекорация;
	Иначе 
		Элементы.Декорации.ТекущаяСтраница = Элементы.ПустаяДекорация;
	КонецЕсли;
	
	// Протоколирование работы пользователей
	Если ЗначениеЗаполнено(Запись.ТипСвязи) Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Запись.ТипСвязи);
	КонецЕсли;
	
	СинхронизироватьДоступПриОткрытии = Запись.СинхронизироватьДоступ;
	
	Если Запись.Обязательная Тогда
		Запись.Важная = Истина;
		Элементы.Важная.Доступность = Ложь;
	Иначе
		Элементы.Важная.Доступность = Истина;
	КонецЕсли;
	
	УстановитьСинхронизироватьОбратныйДоступ();
	
	ВажнаяПриОткрытии = Запись.Важная;
	
	Элементы.ХарактерОбратнойСвязи.Доступность = ЗначениеЗаполнено(Запись.ТипОбратнойСвязи);
	Элементы.СинхронизироватьОбратныйДоступ.Доступность = ЗначениеЗаполнено(Запись.ТипОбратнойСвязи);
	
	Элементы.ХарактерОбратнойСвязи.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(Запись.ТипОбратнойСвязи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполняетсяПоказПредупреждения Тогда
		НужноЗакрытьФорму = Истина;
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбязательнаяНачальноеЗначение = ТекущийОбъект.Обязательная;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СсылкаИзСтрока = ТекущийОбъект.СсылкаИз;
	СсылкаНаСтрока = ТекущийОбъект.СсылкаНа;
	
	Если СсылкаИзСтрока = Справочники.ВидыДокументов.ПустаяСсылка() Тогда
		СсылкаИзСтрока = НСтр("ru = 'Документ'");
	КонецЕсли;	
	Если СсылкаНаСтрока = Справочники.ВидыДокументов.ПустаяСсылка() Тогда
		СсылкаНаСтрока = НСтр("ru = 'Документ'");
	КонецЕсли;	
	
	Описание = СтрШаблон(
		НСтр("ru = 'Настройка связи: %1, %2, %3, %4, %5
		|настройка синхронизации: %6
		|Важная: %7
		|Обязательная: %8
		|Тип обратной связи: %9
		|Характер связи: %10'"),
		ТекущийОбъект.ТипСвязи,
		СсылкаИзСтрока,
		СсылкаНаСтрока,
		ТекущийОбъект.ВидКорреспонденцииДокументИз,
		ТекущийОбъект.ВидКорреспонденцииДокументНа,
		ТекущийОбъект.СинхронизироватьДоступ,
		ТекущийОбъект.Важная,
		ТекущийОбъект.Обязательная,
		ТекущийОбъект.ТипОбратнойСвязи,
		ТекущийОбъект.ХарактерСвязи);

	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Запись.ТипСвязи, Описание);	
	
	Если ЗаписьОбратнойСвязи = Неопределено Тогда 
		Если ЗначениеЗаполнено(Запись.ТипОбратнойСвязи) Тогда 
			МенеджерЗаписи = РегистрыСведений.НастройкаСвязей.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипСвязи = Запись.ТипОбратнойСвязи;
			МенеджерЗаписи.СсылкаИз = Запись.СсылкаНа;
			МенеджерЗаписи.СсылкаНа = Запись.СсылкаИз;
			МенеджерЗаписи.ХарактерСвязи = Запись.ХарактерОбратнойСвязи;
			МенеджерЗаписи.ТипОбратнойСвязи = Запись.ТипСвязи;
			МенеджерЗаписи.ХарактерОбратнойСвязи = Запись.ХарактерСвязи;
			МенеджерЗаписи.ВидКорреспонденцииДокументИз = ВидКорреспонденцииДокументНа;
			МенеджерЗаписи.ВидКорреспонденцииДокументНа = ВидКорреспонденцииДокументИз;
			МенеджерЗаписи.СинхронизироватьДоступ = СинхронизироватьОбратныйДоступ;
			МенеджерЗаписи.Записать();
			
			ЗаписьОбратнойСвязи = РегистрыСведений.НастройкаСвязей.СоздатьКлючЗаписи(
				Новый Структура("ТипСвязи, СсылкаИз, СсылкаНа", МенеджерЗаписи.ТипСвязи, МенеджерЗаписи.СсылкаИз, МенеджерЗаписи.СсылкаНа));
		КонецЕсли;	
	Иначе	
		Если ЗначениеЗаполнено(Запись.ТипОбратнойСвязи) Тогда 
			МенеджерЗаписи = РегистрыСведений.НастройкаСвязей.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипСвязи = ЗаписьОбратнойСвязи.ТипСвязи;
			МенеджерЗаписи.СсылкаИз = ЗаписьОбратнойСвязи.СсылкаИз;
			МенеджерЗаписи.СсылкаНа = ЗаписьОбратнойСвязи.СсылкаНа;
			МенеджерЗаписи.ВидКорреспонденцииДокументИз = ЗаписьОбратнойСвязи.ВидКорреспонденцииДокументИз;
			МенеджерЗаписи.ВидКорреспонденцииДокументНа = ЗаписьОбратнойСвязи.ВидКорреспонденцииДокументНа;
			МенеджерЗаписи.Прочитать();
			
			МенеджерЗаписи.ТипСвязи = Запись.ТипОбратнойСвязи;
			МенеджерЗаписи.СсылкаИз = Запись.СсылкаНа;
			МенеджерЗаписи.СсылкаНа = Запись.СсылкаИз;
			МенеджерЗаписи.ХарактерСвязи = Запись.ХарактерОбратнойСвязи;
			МенеджерЗаписи.ТипОбратнойСвязи = Запись.ТипСвязи;
			МенеджерЗаписи.ХарактерОбратнойСвязи = Запись.ХарактерСвязи;
			МенеджерЗаписи.ВидКорреспонденцииДокументИз = ВидКорреспонденцииДокументНа;
			МенеджерЗаписи.ВидКорреспонденцииДокументНа = ВидКорреспонденцииДокументИз;
			МенеджерЗаписи.СинхронизироватьДоступ = СинхронизироватьОбратныйДоступ;
			МенеджерЗаписи.Записать();
			
			ЗаписьОбратнойСвязи = РегистрыСведений.НастройкаСвязей.СоздатьКлючЗаписи(
				Новый Структура("ТипСвязи, СсылкаИз, СсылкаНа", МенеджерЗаписи.ТипСвязи, МенеджерЗаписи.СсылкаИз, МенеджерЗаписи.СсылкаНа));
		Иначе	
			МенеджерЗаписи = РегистрыСведений.НастройкаСвязей.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипСвязи = ЗаписьОбратнойСвязи.ТипСвязи;
			МенеджерЗаписи.СсылкаИз = ЗаписьОбратнойСвязи.СсылкаИз;
			МенеджерЗаписи.СсылкаНа = ЗаписьОбратнойСвязи.СсылкаНа;
			МенеджерЗаписи.ВидКорреспонденцииДокументИз = ВидКорреспонденцииДокументНа;
			МенеджерЗаписи.ВидКорреспонденцииДокументНа = ВидКорреспонденцииДокументИз;
			МенеджерЗаписи.Удалить();
			
			ЗаписьОбратнойСвязи = Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Запись.Обязательная И Запись.Обязательная <> ОбязательнаяНачальноеЗначение Тогда
		
		ЧислоДокументовСНезаполненнойСвязью = ПолучитьЧислоДокументовСНезаполненнойОбязательнойСвязью(
			Запись.ТипСвязи, Запись.СсылкаИз);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если СинхронизироватьДоступПриОткрытии <> ТекущийОбъект.СинхронизироватьДоступ Тогда 
		Описание = СтрШаблон(
			НСтр("ru = 'Настройка связи: %1, %2, %3
			|Изменена настройка синхронизации: %4'"),
			ТекущийОбъект.ТипСвязи,
			ТекущийОбъект.СсылкаИз,
			ТекущийОбъект.СсылкаНа,
			ТекущийОбъект.СинхронизироватьДоступ);
		ПротоколированиеРаботыСотрудников.ЗаписатьНастройкуРасширенияРабочихГрупп(ТекущийОбъект.ТипСвязи, Описание);
	КонецЕсли;
	
	СинхронизироватьДоступПриОткрытии = ТекущийОбъект.СинхронизироватьДоступ;
	
	ВажнаяПриОткрытии = Запись.Важная;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПоказатьПредупреждениеОДокументахСНезаполненнойСвязью();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Запись.ТипОбратнойСвязи) И Не ЗначениеЗаполнено(Запись.ХарактерОбратнойСвязи) Тогда 
		ТекстСообщения = НСтр("ru = 'Поле ""Характер обратной связи"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Запись.ХарактерОбратнойСвязи",, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ХарактерОбратнойСвязи) И Не ЗначениеЗаполнено(Запись.ТипОбратнойСвязи) Тогда 
		ТекстСообщения = НСтр("ru = 'Поле ""Тип обратной связи"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Запись.ТипОбратнойСвязи",, Отказ);
	КонецЕсли;
	
	ПустойДокумент = Справочники.ДокументыПредприятия.ПустаяСсылка();
	Если ЗначениеЗаполнено(Запись.ТипСвязи)
		И Не Запись.Предопределенная 
		И Не СвязиОбъектов.ЭтоПодходящийТипСвязи(ПустойДокумент, ПустойДокумент, Запись.ТипСвязи) Тогда
		ТекстСообщения = НСтр("ru = '""Тип связи"" используется для внутренней логики программы.
		|	Создание таких настроек запрещено. Укажите другой тип связи.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Запись.ТипСвязи",, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ТипОбратнойСвязи)
		И Не Запись.Предопределенная 
		И Не СвязиОбъектов.ЭтоПодходящийТипСвязи(ПустойДокумент, ПустойДокумент, Запись.ТипОбратнойСвязи) Тогда
		ТекстСообщения = НСтр("ru = '""Тип обратной связи"" используется для внутренней логики программы.
		|	Создание таких настроек запрещено. Укажите другой тип связи.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Запись.ТипОбратнойСвязи",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипСсылкаИзПриИзменении(Элемент)
	
	Элементы.СсылкаИз.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив());
	Запись.ВидКорреспонденцииДокументИз = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТипСсылкаИз) Тогда
		Запись.СсылкаИз = Неопределено;
		
	ИначеЕсли СтрНайти(ТипСсылкаИз, "Перечисление.ВидыКорреспонденции.") Тогда
		Запись.СсылкаИз = Новый("СправочникСсылка.ВидыДокументов");
		
		ВидКорреспонденцииДокументИз = ПредопределенноеЗначение(ТипСсылкаИз);
		Запись.ВидКорреспонденцииДокументИз = ВидКорреспонденцииДокументИз;
		УстановитьПараметрыВыбораСсылкиДокумента(Элементы.СсылкаИз, ВидКорреспонденцииДокументИз);
		
	ИначеЕсли ТипСсылкаИз <> ПолучитьТип(Запись.СсылкаИз) Тогда
		Запись.СсылкаИз = Новый(ТипСсылкаИз);
		
		Если ТипСсылкаИз = "СправочникСсылка.ВидыДокументов" Тогда
			
			УстановитьПараметрыВыбораСсылкиДокумента(Элементы.СсылкаИз, Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СинхронизироватьДоступ.ТолькоПросмотр = Истина;
	
	Если Не ЗначениеЗаполнено(ТипСсылкаИз) Тогда
		Элементы.СсылкаИз.ТолькоПросмотр = Истина;
		Запись.СинхронизироватьДоступ = Неопределено;
	ИначеЕсли ТипСсылкаИз = "СправочникСсылка.Файлы"
		Или ТипСсылкаИз = "СправочникСсылка.Мероприятия"
		Или ТипСсылкаИз = "СправочникСсылка.Проекты"
		Или ТипСсылкаИз = "ДокументСсылка.ВходящееПисьмо"
		Или ТипСсылкаИз = "ДокументСсылка.ИсходящееПисьмо" Тогда
		Элементы.СсылкаИз.ТолькоПросмотр = Истина;
		Запись.СинхронизироватьДоступ = Неопределено;
	Иначе
		Элементы.СсылкаИз.ТолькоПросмотр = Ложь;
		
		Если ЭтоПолныеПрава Тогда 
			Элементы.СинхронизироватьДоступ.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСсылкаНаПриИзменении(Элемент)
	
	Элементы.СсылкаНа.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив());
	Запись.ВидКорреспонденцииДокументНа = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТипСсылкаНа) Тогда 
		Запись.СсылкаНа = Неопределено;
		
	ИначеЕсли СтрНайти(ТипСсылкаНа, "Перечисление.ВидыКорреспонденции.") Тогда
		
		Запись.СсылкаНа = Новый("СправочникСсылка.ВидыДокументов");
		
		ВидКорреспонденцииДокументНа = ПредопределенноеЗначение(ТипСсылкаНа);
		Запись.ВидКорреспонденцииДокументНа = ВидКорреспонденцииДокументНа;
		УстановитьПараметрыВыбораСсылкиДокумента(Элементы.СсылкаНа, ВидКорреспонденцииДокументНа);
		
	ИначеЕсли ТипСсылкаНа <> ПолучитьТип(Запись.СсылкаНа) Тогда 
		Запись.СсылкаНа = ?(ТипСсылкаНа = "Строка", "", Новый(ТипСсылкаНа));
		Если ТипСсылкаИз = "СправочникСсылка.ВидыДокументов" Тогда
			
			УстановитьПараметрыВыбораСсылкиДокумента(Элементы.СсылкаИз, Неопределено);
			
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СинхронизироватьДоступ.ТолькоПросмотр = Истина;
	
	Если Не ЗначениеЗаполнено(ТипСсылкаНа) Тогда 
		Элементы.СсылкаНа.ТолькоПросмотр = Истина;
		Запись.СинхронизироватьДоступ = Неопределено;
	ИначеЕсли ТипСсылкаНа = "Строка" Тогда 
		Элементы.СсылкаНа.ТолькоПросмотр = Истина;
		
		Если ЗначениеЗаполнено(Запись.ТипОбратнойСвязи) Тогда 
			Запись.ТипОбратнойСвязи = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.ХарактерОбратнойСвязи) Тогда 
			Запись.ХарактерОбратнойСвязи = Неопределено;
		КонецЕсли;
		
		Элементы.ТипОбратнойСвязи.ТолькоПросмотр = Истина;
		Элементы.ХарактерОбратнойСвязи.ТолькоПросмотр = Истина;
		Запись.СинхронизироватьДоступ = Неопределено;
		
	ИначеЕсли ТипСсылкаНа = "СправочникСсылка.Файлы"
		Или ТипСсылкаНа = "СправочникСсылка.Мероприятия"
		Или ТипСсылкаНа = "СправочникСсылка.Проекты"
		Или ТипСсылкаНа = "ДокументСсылка.ВходящееПисьмо"
		Или ТипСсылкаНа = "ДокументСсылка.ИсходящееПисьмо" Тогда 
		
		Элементы.СсылкаНа.ТолькоПросмотр = Истина;
		
		Элементы.ТипОбратнойСвязи.ТолькоПросмотр = Ложь;
		Элементы.ХарактерОбратнойСвязи.ТолькоПросмотр = Ложь;
		Запись.СинхронизироватьДоступ = Неопределено;
	Иначе
		Элементы.СсылкаНа.ТолькоПросмотр = Ложь;
		Элементы.ТипОбратнойСвязи.ТолькоПросмотр = Ложь;
		Элементы.ХарактерОбратнойСвязи.ТолькоПросмотр = Ложь;
		
		Если ЭтоПолныеПрава Тогда 
			Элементы.СинхронизироватьДоступ.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбратнойСвязиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Запись.ТипОбратнойСвязи) Тогда 
		Запись.ХарактерОбратнойСвязи = Неопределено;
		Запись.СинхронизироватьДоступ = Неопределено;
		СинхронизироватьОбратныйДоступ = Неопределено;
	КонецЕсли;	
	
	Элементы.ХарактерОбратнойСвязи.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(Запись.ТипОбратнойСвязи);

	Элементы.ХарактерОбратнойСвязи.Доступность = ЗначениеЗаполнено(Запись.ТипОбратнойСвязи);
	Элементы.СинхронизироватьОбратныйДоступ.Доступность = ЗначениеЗаполнено(Запись.ТипОбратнойСвязи);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТип(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда 
		ИмяТипа = "Строка";
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ВидыДокументов") Тогда 
		ИмяТипа = "СправочникСсылка.ВидыДокументов";
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Файлы") Тогда
		ИмяТипа = "СправочникСсылка.Файлы";
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Мероприятия") Тогда 
		ИмяТипа = "СправочникСсылка.Мероприятия";
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Проекты") Тогда 
		ИмяТипа = "СправочникСсылка.Проекты";
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Значение) Тогда
		ИмяТипа = "ДокументСсылка.ВходящееПисьмо";
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Значение) Тогда
		ИмяТипа = "ДокументСсылка.ИсходящееПисьмо";
	Иначе	
		ИмяТипа = "";
	КонецЕсли;
	
	Возврат ИмяТипа;
	
КонецФункции

&НаСервере
Функция НайтиЗаписьОбратнойСвязи()
	
	Если Не ЗначениеЗаполнено(Запись.ТипОбратнойСвязи) Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
	|ГДЕ
	|	НастройкаСвязей.ТипСвязи = &ТипСвязи
	|	И НастройкаСвязей.СсылкаИз = &СсылкаИз
	|	И НастройкаСвязей.СсылкаНа = &СсылкаНа
	|	И НастройкаСвязей.ВидКорреспонденцииДокументИз = &ВидКорреспонденцииДокументИз
	|	И НастройкаСвязей.ВидКорреспонденцииДокументНа = &ВидКорреспонденцииДокументНа");
	
	Запрос.УстановитьПараметр("ТипСвязи", Запись.ТипОбратнойСвязи);
	Запрос.УстановитьПараметр("СсылкаИз", Запись.СсылкаНа);
	Запрос.УстановитьПараметр("СсылкаНа", Запись.СсылкаИз);
	Запрос.УстановитьПараметр("ВидКорреспонденцииДокументИз", Запись.ВидКорреспонденцииДокументНа);
	Запрос.УстановитьПараметр("ВидКорреспонденцииДокументНа", Запись.ВидКорреспонденцииДокументИз);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначенияКлюча = Новый Структура(
		"ТипСвязи, СсылкаИз, СсылкаНа, ВидКорреспонденцииДокументИз, ВидКорреспонденцииДокументНа",
		Запись.ТипОбратнойСвязи,
		Запись.СсылкаНа,
		Запись.СсылкаИз,
		Запись.ВидКорреспонденцииДокументНа,
		Запись.ВидКорреспонденцииДокументИз);
			
	Возврат РегистрыСведений.НастройкаСвязей.СоздатьКлючЗаписи(ЗначенияКлюча);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЧислоДокументовСНезаполненнойОбязательнойСвязью(ТипСвязи, СсылкаИз)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	ТипСсылки = ТипЗнч(СсылкаИз);
	
	Если ЗначениеЗаполнено(СсылкаИз) 
		И ТипСсылки = Тип("СправочникСсылка.ВидыДокументов") Тогда
	
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ДокументыПредприятия.Ссылка), 0) КАК ЧислоДокументов
			|ИЗ
			|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
			|		ПО (СвязиОбъектов.Объект = ДокументыПредприятия.Ссылка)
			|			И (СвязиОбъектов.ТипСвязи = &ТипСвязи)
			|ГДЕ
			|	ДокументыПредприятия.ВидДокумента = &ВидДокумента
			|	И СвязиОбъектов.Объект ЕСТЬ NULL ";	
		
		Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);	
		Запрос.УстановитьПараметр("ВидДокумента", СсылкаИз);
		
	Иначе	
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ОбъектДанных.Ссылка), 0) КАК ЧислоДокументов
			|ИЗ
			|	Справочник.Файлы КАК ОбъектДанных
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
			|		ПО (СвязиОбъектов.Объект = ОбъектДанных.Ссылка)
			|			И (СвязиОбъектов.ТипСвязи = &ТипСвязи)
			|ГДЕ
			|	СвязиОбъектов.Объект ЕСТЬ NULL ";
			
		Если ТипСсылки = Тип("СправочникСсылка.Проекты") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Файлы", "Справочник.Проекты");
		ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Мероприятия") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Файлы", "Справочник.Мероприятия");
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Файлы", "Документ.ВходящееПисьмо");
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Файлы", "Документ.ИсходящееПисьмо");
		ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ВидыДокументов") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Файлы", "Справочник.ДокументыПредприятия");
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);	
		
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	Возврат Выборка.ЧислоДокументов;
	
КонецФункции	

&НаКлиенте
Процедура ПоказатьПредупреждениеОДокументахСНезаполненнойСвязью()
	
	// тут показать Предупреждение, если нужно
	Если ЧислоДокументовСНезаполненнойСвязью <> 0 Тогда
		
		ТипСсылки = ТипЗнч(Запись.СсылкаИз);
		
		Если ЗначениеЗаполнено(Запись.СсылкаИз) 
			И ТипСсылки = Тип("СправочникСсылка.ВидыДокументов") Тогда
		
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вы установили у связи признак ""Обязательная"". 
				|В программе есть документы вида ""%1"" (%2 шт)
				|с неуказанной связью ""%3""'"), 
				Запись.СсылкаИз,
				ЧислоДокументовСНезаполненнойСвязью,
				Запись.ТипСвязи);
				
		Иначе
				
			СтрокаНазваниеОбъекта = НСтр("ru = 'файлов'");
		
			Если ТипСсылки = Тип("СправочникСсылка.Проекты") Тогда
				СтрокаНазваниеОбъекта = НСтр("ru = 'проектов'");
			ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Мероприятия") Тогда
				СтрокаНазваниеОбъекта = НСтр("ru = 'мероприятий'");
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
				СтрокаНазваниеОбъекта = НСтр("ru = 'входящих писем'");
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
				СтрокаНазваниеОбъекта = НСтр("ru = 'исходящих писем'");
			ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ВидыДокументов") Тогда 
				СтрокаНазваниеОбъекта = НСтр("ru = 'документов'");
			КонецЕсли;	
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вы установили у связи признак ""Обязательная"". 
				|В программе есть %1 %2
				|с неуказанной связью ""%3""'"), 
				ЧислоДокументовСНезаполненнойСвязью,
				СтрокаНазваниеОбъекта,
				Запись.ТипСвязи);
				
		КонецЕсли;		
			
		ЧислоДокументовСНезаполненнойСвязью = 0;
		
		ВыполняетсяПоказПредупреждения = Истина;
		
		ПараметрыОбработчика = Новый Структура;
		Обработчик = Новый ОписаниеОповещения("ПослеПоказаПредупреждения", ЭтотОбъект, ПараметрыОбработчика);
		
		ПоказатьПредупреждение(Обработчик, Текст);
		
	КонецЕсли;	
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеПоказаПредупреждения(ПараметрыОбработчика) Экспорт
	
	ВыполняетсяПоказПредупреждения = Ложь;

	Если НужноЗакрытьФорму Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСсылкиДокумента(Элемент, ВидКорреспонденции)

	ПараметрыВыбора = Новый Массив();
	
	Если ВидКорреспонденции = ПредопределенноеЗначение("Перечисление.ВидыКорреспонденции.Входящая") Тогда
		
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЯвляетсяВходящейКорреспонденцией", Истина));
		
	ИначеЕсли ВидКорреспонденции = ПредопределенноеЗначение("Перечисление.ВидыКорреспонденции.Исходящая") Тогда
		
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЯвляетсяИсходящейКорреспонденцией", Истина));
		
	Иначе
			
		ПараметрыВыбора.Добавить(
			Новый ПараметрВыбора("Отбор.ЯвляетсяВходящейКорреспонденцией", Ложь));
		ПараметрыВыбора.Добавить(
			Новый ПараметрВыбора("Отбор.ЯвляетсяИсходящейКорреспонденцией", Ложь));
		
	КонецЕсли;
	
	НовыеПараметры = Новый ФиксированныйМассив(ПараметрыВыбора);
	Элемент.ПараметрыВыбора = НовыеПараметры;

КонецПроцедуры

&НаКлиенте
Процедура ОбязательнаяПриИзменении(Элемент)
	
	Если Запись.Обязательная Тогда
		Запись.Важная = Истина;
		Элементы.Важная.Доступность = Ложь;
	Иначе
		Элементы.Важная.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция УстановитьСинхронизироватьОбратныйДоступ()

	Если Не ЗначениеЗаполнено(Запись.ТипОбратнойСвязи) Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкаСвязей.СинхронизироватьДоступ КАК СинхронизироватьДоступ
	|ИЗ
	|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
	|ГДЕ
	|	НастройкаСвязей.ТипСвязи = &ТипСвязи
	|	И НастройкаСвязей.СсылкаИз = &СсылкаИз
	|	И НастройкаСвязей.СсылкаНа = &СсылкаНа");
	
	Запрос.УстановитьПараметр("ТипСвязи", Запись.ТипОбратнойСвязи);
	Запрос.УстановитьПараметр("СсылкаИз", Запись.СсылкаНа);
	Запрос.УстановитьПараметр("СсылкаНа", Запись.СсылкаИз);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() Тогда 
		СинхронизироватьОбратныйДоступ = Результат[0].СинхронизироватьДоступ;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
