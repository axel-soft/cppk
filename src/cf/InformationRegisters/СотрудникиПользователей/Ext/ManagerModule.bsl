
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбновлениеДанныхКэширующихОбъектов

// Конструктор параметров обновления данных кэширующих объектов.
//
// Возвращаемое значение:
//	Структура:
//		* ПользователиДляОбновленияКонтейнеров - Массив Из СправочникСсылка.Пользователи - Список пользователей для обновления данных РС СотрудникиВКонтейнерах.
//		* СотрудникиДляОбновления - Массив Из СправочникСсылка.Сотрудники.
//
Функция ПараметрыОбновленияДанныхКэширующихОбъектов() Экспорт
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("ПользователиДляОбновленияКонтейнеров", Новый Массив);
	ПараметрыОбновления.Вставить("СотрудникиДляОбновления", Новый Массив);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления данных кэширующих объектов по данным объекта.
//
// Параметры:
//	Объект - РегистрСведенийНаборЗаписей.СотрудникиПользователей - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Функция ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияДанныхКэширующихОбъектов();
	
	ИзменяемыеЗаписи = Новый ТаблицаЗначений;
	Если Объект.Отбор.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	*
			|ИЗ
			|	РегистрСведений.СотрудникиПользователей КАК ТаблицаРегистра
			|ГДЕ
			|	%Условие%");
		
		Условие = "";
		Разделитель = "";
		
		Для Каждого ЭлементОтбора Из Объект.Отбор Цикл
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаУсловия = СтрШаблон("ТаблицаРегистра.%1 = &%2", ЭлементОтбора.Имя, ЭлементОтбора.Имя);
			
			Условие = Условие + Разделитель + СтрокаУсловия;
			
			Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
			
			Разделитель = Символы.ПС + "	И ";
		КонецЦикла;
		
		Если Условие = "" Тогда
			Условие = "ИСТИНА";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Условие%", Условие);
		
		ИзменяемыеЗаписи = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// Старые записи.
	НовыеСотрудникиПользователей = Новый Соответствие;
	Для Каждого Запись Из Объект Цикл
		Если НовыеСотрудникиПользователей[Запись.Пользователь] = Неопределено Тогда
			НовыеСотрудникиПользователей[Запись.Пользователь] = Новый Массив;
		КонецЕсли;
		НовыеСотрудникиПользователя = НовыеСотрудникиПользователей[Запись.Пользователь]; // Массив
		Если НовыеСотрудникиПользователя.Найти(Запись.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовыеСотрудникиПользователя.Добавить(Запись.Сотрудник);
	КонецЦикла;
	
	Для Каждого Запись Из ИзменяемыеЗаписи Цикл
		
		Если НовыеСотрудникиПользователей[Запись.Пользователь] = Неопределено Тогда
			НовыеСотрудникиПользователей[Запись.Пользователь] = Новый Массив;
		КонецЕсли;
		НовыеСотрудникиПользователя = НовыеСотрудникиПользователей[Запись.Пользователь]; // Массив
		Если НовыеСотрудникиПользователя.Найти(Запись.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Определили, что запись удалена.
		Если ПараметрыОбновления.ПользователиДляОбновленияКонтейнеров.Найти(Запись.Пользователь) = Неопределено Тогда
			ПараметрыОбновления.ПользователиДляОбновленияКонтейнеров.Добавить(Запись.Пользователь);
		КонецЕсли;
		Если ПараметрыОбновления.СотрудникиДляОбновления.Найти(Запись.Сотрудник) = Неопределено Тогда
			ПараметрыОбновления.СотрудникиДляОбновления.Добавить(Запись.Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	// Новые записи.
	СтарыеСотрудникиПользователей = Новый Соответствие;
	Для Каждого Запись Из ИзменяемыеЗаписи Цикл
		Если СтарыеСотрудникиПользователей[Запись.Пользователь] = Неопределено Тогда
			СтарыеСотрудникиПользователей[Запись.Пользователь] = Новый Массив;
		КонецЕсли;
		СтарыеСотрудникиПользователя = СтарыеСотрудникиПользователей[Запись.Пользователь]; // Массив
		Если СтарыеСотрудникиПользователя.Найти(Запись.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтарыеСотрудникиПользователя.Добавить(Запись.Сотрудник);
	КонецЦикла;
	
	Для Каждого Запись Из Объект Цикл
		
		Если СтарыеСотрудникиПользователей[Запись.Пользователь] = Неопределено Тогда
			СтарыеСотрудникиПользователей[Запись.Пользователь] = Новый Массив;
		КонецЕсли;
		СтарыеСотрудникиПользователя = СтарыеСотрудникиПользователей[Запись.Пользователь]; // Массив
		Если СтарыеСотрудникиПользователя.Найти(Запись.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Определили, что запись добавлена.
		Если ПараметрыОбновления.ПользователиДляОбновленияКонтейнеров.Найти(Запись.Пользователь) = Неопределено Тогда
			ПараметрыОбновления.ПользователиДляОбновленияКонтейнеров.Добавить(Запись.Пользователь);
		КонецЕсли;
		Если ПараметрыОбновления.СотрудникиДляОбновления.Найти(Запись.Сотрудник) = Неопределено Тогда
			ПараметрыОбновления.СотрудникиДляОбновления.Добавить(Запись.Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет данные зависимых объектов согласно установленным параметрам.
//
// Параметры:
//	Объект - РегистрСведенийНаборЗаписей.ИсполнителиРолей - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Процедура ОбновитьДанныеКэширующихОбъектов(Объект, ПараметрыОбновления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнеров(
		ПараметрыОбновления.ПользователиДляОбновленияКонтейнеров);
	
	Для Каждого СотрудникДляОбновления Из ПараметрыОбновления.СотрудникиДляОбновления Цикл
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Документ.Задача",
			"РегистрСведений.СотрудникиПользователей",
			СотрудникДляОбновления);
		
		ИзмененияВлияющихДанных = ОбновлениеКэширующихДанных.НовыеИзмененияВлияющихДанных();
		ИзмененияВлияющихДанных.ВариантОбновления = "Исполнитель";
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Документ.ДействиеЗадачи",
			"РегистрСведений.СотрудникиПользователей",
			СотрудникДляОбновления,
			ИзмененияВлияющихДанных);
		
		ИзмененияВлияющихДанных = ОбновлениеКэширующихДанных.НовыеИзмененияВлияющихДанных();
		ИзмененияВлияющихДанных.ВариантОбновления = "ОсобыйАвтор";
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Документ.ДействиеЗадачи",
			"РегистрСведений.СотрудникиПользователей",
			СотрудникДляОбновления,
			ИзмененияВлияющихДанных);
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Справочник.Проекты",
			"РегистрСведений.СотрудникиПользователей",
			СотрудникДляОбновления);
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Справочник.СтруктураПредприятия",
			"РегистрСведений.СотрудникиПользователей",
			СотрудникДляОбновления);
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Справочник.ЗамещающиеИПомощники",
			"РегистрСведений.СотрудникиПользователей",
			СотрудникДляОбновления);
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"РегистрСведений.ИсполнителиРолей",
			"РегистрСведений.СотрудникиПользователей",
			СотрудникДляОбновления);
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Документ.ДанныеКонтроля",
			"РегистрСведений.СотрудникиПользователей",
			СотрудникДляОбновления);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет запись в регистр.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//  Сотрудник - СправочникСсылка.Сотрудники
//
Процедура ДобавитьЗапись(Пользователь, Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Отбор.Сотрудник.Установить(Сотрудник);
	
	Запись = Набор.Добавить();
	Запись.Пользователь = Пользователь;
	Запись.Сотрудник = Сотрудник;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли