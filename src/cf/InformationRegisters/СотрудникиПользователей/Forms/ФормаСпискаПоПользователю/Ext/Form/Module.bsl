#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоказыватьНедействительныхСотрудников = Ложь;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор,
		"Пользователь",
		Параметры.Пользователь);
		
	Пользователь = Параметры.Пользователь;
	ФизЛицо = Пользователь.ФизЛицо;
	
	УстановитьУсловноеОформление();
	
	ПереключитьОтображениеНедействительныхСотрудников(Список, ПоказыватьНедействительныхСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Сотрудники" Тогда
		
		Элементы.Список.Обновить(); 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Основной(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если Не ТекущиеДанные.Основной Тогда
			ОсновнойНаСервере(ТекущиеДанные.Сотрудник);
			Элементы.Список.Обновить();
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец", ФизЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПростаяФормаВыбора", Истина);
	
	Обработчик = Новый ОписаниеОповещения("ПодобратьЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы,,,,,Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ФормаОсновной.Пометка = ТекущиеДанные.Основной;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ДействуетПоДатам");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("Список");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("Список");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Действует", Истина, , , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "ПометкаУдаления", Ложь, , , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

&НаСервере
Процедура ОсновнойНаСервере(Сотрудник)
	
	РегистрыСведений.ОсновныеСотрудники.УстановитьОсновногоСотрудника(
		Пользователь.ФизЛицо, Сотрудник);
	
КонецПроцедуры

&НаКлиенте
// Продолжение процедуры (см. выше).
Процедура ПодобратьЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Или Результат.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьВСотрудникиПользователей(Пользователь, Результат);		
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьВСотрудникиПользователей(Пользователь, Сотрудник)
	
	РегистрыСведений.СотрудникиПользователей.ДобавитьЗапись(
		Пользователь, Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительныхСотрудников(Команда)
	
	ПоказыватьНедействительныхСотрудников = Не ПоказыватьНедействительныхСотрудников;
	Элементы.ФормаПоказыватьНедействительныхСотрудников.Пометка = ПоказыватьНедействительныхСотрудников;
	
	ПереключитьОтображениеНедействительныхСотрудников(Список,
		ПоказыватьНедействительныхСотрудников);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьОтображениеНедействительныхСотрудников(Список, ПоказатьНедействительных)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Действует", Истина, , , Не ПоказатьНедействительных,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "ПометкаУдаления", Ложь, , , Не ПоказатьНедействительных,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

#КонецОбласти
