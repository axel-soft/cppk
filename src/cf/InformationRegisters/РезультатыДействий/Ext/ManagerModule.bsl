
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает результат действия.
// Если функция и участник не переданы, значит записывается результат действия в целом.
// Если передан пустой результат, процедура удалит запись с результатом, если она будет найдена.
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие.
// 	Результат - ОпределяемыйТип.РезультатыВыполненияДействий - устанавливаемый результат.
// 	ПараметрыУчастника - Неопределено, Структура - параметры участника.
//
Процедура УстановитьРезультат(ДействиеСсылка, Результат, ПараметрыУчастника = Неопределено) Экспорт
	
	ФункцияУчастника = Неопределено;
	Участник = Неопределено;
	ИдентификаторПункта = Неопределено;
	ДатаРезультата = Неопределено;
	ИдентификаторУчастника = Неопределено;
	Если ПараметрыУчастника <> Неопределено Тогда
		ПараметрыУчастника.Свойство("Функция", ФункцияУчастника);
		ПараметрыУчастника.Свойство("Участник", Участник);
		ПараметрыУчастника.Свойство("ДатаИсполнения", ДатаРезультата);
		Если Не ПараметрыУчастника.Свойство("ВыполненоВнеПрограммы") Тогда
			ИдентификаторУчастника = ?(ПараметрыУчастника.Свойство("ИдентификаторУчастника"),
				ПараметрыУчастника.ИдентификаторУчастника, ПараметрыУчастника.Идентификатор);
		КонецЕсли;
		ПараметрыУчастника.Свойство("ИдентификаторПункта", ИдентификаторПункта);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка переданных параметров.
	Если Не ЗначениеЗаполнено(ДействиеСсылка) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено действие для установки результата'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФункцияУчастника) Тогда
		ФункцияУчастника = Неопределено; // Другие пустые значения запрещены.
		Если ЗначениеЗаполнено(Участник) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнена функция участника'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Участник = Неопределено; // Другие пустые значения запрещены.
		Если ЗначениеЗаполнено(ФункцияУчастника) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнен участник'");
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторПункта = Неопределено Тогда
		ИдентификаторПункта = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	Если ИдентификаторУчастника = Неопределено Тогда
		ИдентификаторУчастника = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаРезультата) Тогда
		ОтслеживатьИзменениеДаты = Ложь;
		ДатаРезультата = ТекущаяДатаСеанса();
	Иначе
		ОтслеживатьИзменениеДаты = Истина;
	КонецЕсли;
	
	СообщениеОПараметрах = Новый Массив();
	СообщениеОПараметрах.Добавить(Строка(ДействиеСсылка));
	СообщениеОПараметрах.Добавить("Результат." + Строка(Результат));
	СообщениеОПараметрах.Добавить("ФункцияУчастника." + Строка(ФункцияУчастника));
	СообщениеОПараметрах.Добавить("Участник." + Строка(Участник));
	СообщениеОПараметрах.Добавить("ИдентификаторПункта." + Строка(ИдентификаторПункта));
	ТекстСообщения = СтрСоединить(СообщениеОПараметрах, Символы.ВК);
	ЗаписьЖурналаРегистрации(НСтр("ru='РС РезультатыДействий УстановитьРезультат'"), УровеньЖурналаРегистрации.Информация, 
		, , ТекстСообщения);		
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Действие.Установить(ДействиеСсылка);
	Набор.Отбор.ИдентификаторПункта.Установить(ИдентификаторПункта);
	
	Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Набор.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
	Иначе
		Набор.Отбор.Участник.Установить(Участник);
	КонецЕсли;
	Набор.Отбор.Функция.Установить(ФункцияУчастника);
	Набор.Прочитать();
		
	Если Набор.Количество() Тогда
		Запись = Набор[0];
		Если Запись.Результат = Результат
			И Не(ОтслеживатьИзменениеДаты И Запись.Дата <> ДатаРезультата)
			И Запись.Участник = Участник Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Запись = Набор.Добавить();
		Запись.Действие = ДействиеСсылка;
		Запись.Функция = ФункцияУчастника;
		Запись.ИдентификаторПункта = ИдентификаторПункта;
		Запись.ИдентификаторУчастника = ИдентификаторУчастника;
	КонецЕсли;
	
	Запись.Участник = Участник;
	Запись.Результат = Результат;
	Запись.Дата = ДатаРезультата;   
	
	Если ПараметрыУчастника <> Неопределено Тогда
		Если ПараметрыУчастника.Свойство("ЕстьФайлыОтчета") Тогда
			Запись.ЕстьФайлыОтчета = ПараметрыУчастника.ЕстьФайлыОтчета;   
		КонецЕсли;	
		Если ПараметрыУчастника.Свойство("Комментарий") Тогда
			Запись.РезультатТекстом = ПараметрыУчастника.Комментарий;   
		КонецЕсли;	
	КонецЕсли;

	Набор.Записать();
	
КонецПроцедуры

// Возвращает результат действия по ссылке
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - ссылка на действие
// 	
// Возвращаемое значение:
// 	Неопределено, ОпределяемыйТип.РезультатыВыполненияДействий - Результат действия, если установлен.
//
Функция РезультатДействия(ДействиеСсылка) Экспорт
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатыДействий.Результат
		|ИЗ
		|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|ГДЕ
		|	РезультатыДействий.Действие = &Действие
		|	И РезультатыДействий.Участник = &Участник
		|	И РезультатыДействий.ИдентификаторУчастника = &ИдентификаторУчастника
		|	И РезультатыДействий.ИдентификаторПункта = &ИдентификаторПункта
		|	И РезультатыДействий.Функция = &Функция";
	Запрос.Параметры.Вставить("Действие", ДействиеСсылка);
	Запрос.Параметры.Вставить("Участник", Неопределено);
	Запрос.Параметры.Вставить("ИдентификаторУчастника", 
		ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор());
	Запрос.Параметры.Вставить("ИдентификаторПункта", 
		ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор());
	Запрос.Параметры.Вставить("Функция", Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = Выборка.Результат;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат действия по ссылке
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - ссылка на действие
// 	ИдентификаторУчастника - УникальныйИдентификатор
// 	
// Возвращаемое значение:
// 	Неопределено - Если не найдено в регистре
// 	Структура - с полями:
// 		* Результат - ОпределяемыйТип.РезультатыВыполненияДействий
// 		* Дата - Дата -
// 		* Участник - СправочникСсылка.Сотрудники -
// 				   - СправочникСсылка.СтруктураПредприятия -
// 				   - СправочникСсылка.ПолныеРоли -
// 				   - СправочникСсылка.Пользователи -
// 				   - СправочникСсылка.ПодразделенияКонтейнеры -
//
Функция РезультатУчастникаДействия(ДействиеСсылка, ИдентификаторУчастника) Экспорт
	
	ДанныеВозврата = Новый Структура;
	ДанныеВозврата.Вставить("Результат");
	ДанныеВозврата.Вставить("Дата");
	ДанныеВозврата.Вставить("Участник");
	ДанныеВозврата.Вставить("РезультатТекстом");
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РезультатыДействий.Результат,
		|	РезультатыДействий.Дата,
		|	РезультатыДействий.Участник,
		|	РезультатыДействий.РезультатТекстом
		|ИЗ
		|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|ГДЕ
		|	РезультатыДействий.Действие = &Действие
		|	И РезультатыДействий.ИдентификаторУчастника = &ИдентификаторУчастника";
		
	Запрос.Параметры.Вставить("Действие", ДействиеСсылка);
	Запрос.Параметры.Вставить("ИдентификаторУчастника", 
		ИдентификаторУчастника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеВозврата, Выборка);
	КонецЕсли;
		
	Возврат ДанныеВозврата;
	
КонецФункции

// Описание
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий - функция участника.
// 	Участник - Неопределено - Описание
// 	ИдентификаторПункта - УникальныйИдентификатор
// 	ИдентификаторУчастника - УникальныйИдентификатор
//
Процедура УдалитьРезультат(
			ДействиеСсылка,
			Знач ФункцияУчастника = Неопределено,
			Знач Участник = Неопределено,
			Знач ИдентификаторПункта = Неопределено,
			Знач ИдентификаторУчастника = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка переданных параметров.
	Если Не ЗначениеЗаполнено(ДействиеСсылка) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено действие для удаления результата'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФункцияУчастника) Тогда
		ФункцияУчастника = Неопределено; // Другие пустые значения запрещены.
		Если ЗначениеЗаполнено(Участник) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнена функция участника'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Участник = Неопределено; // Другие пустые значения запрещены.
		Если ЗначениеЗаполнено(ФункцияУчастника) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнен участник'");
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторПункта = Неопределено Тогда
		ИдентификаторПункта = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	Если ИдентификаторУчастника = Неопределено Тогда
		ИдентификаторУчастника = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	
	Набор = РегистрыСведений.РезультатыДействий.СоздатьНаборЗаписей();
	Набор.Отбор.Действие.Установить(ДействиеСсылка);
	Набор.Отбор.ИдентификаторПункта.Установить(ИдентификаторПункта);
	Набор.Отбор.Функция.Установить(ФункцияУчастника);
	Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Набор.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
	Иначе
		Набор.Отбор.Участник.Установить(Участник);
	КонецЕсли;
	
	Набор.Прочитать();
	
	Если Набор.Количество() Тогда
		Набор.Очистить();
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все результаты по действию.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//
Процедура УдалитьВсеРезультатыВыполненияДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.Действие.Установить(Действие);
	Набор.Записать();
	
КонецПроцедуры

// Проверяет, что для всех переданных участников установлен результат действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - ссылка на действие.
//  Участники - ТаблицаЗначений - таблица участников действия
//
Функция ЕстьРезультатДействияПоВсемУчастникам(Действие, Участники) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Действие КАК Действие,
		|	Участники.Функция КАК Функция,
		|	Участники.Участник КАК Участник,
		|	Участники.Идентификатор КАК Идентификатор,
		|	Участники.ИдентификаторПункта КАК ИдентификаторПункта
		|ПОМЕСТИТЬ Участники
		|ИЗ
		|	&Участники КАК Участники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыДействий.Участник КАК Участник,
		|	РезультатыДействий.Функция КАК Функция,
		|	РезультатыДействий.ИдентификаторПункта КАК ИдентификаторПункта,
		|	РезультатыДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	РезультатыДействий.Результат КАК Результат
		|ИЗ
		|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Участники КАК Участники
		|		ПО РезультатыДействий.Действие = Участники.Действие
		|			И РезультатыДействий.Функция = Участники.Функция
		|			И РезультатыДействий.Участник = Участники.Участник
		|			И РезультатыДействий.ИдентификаторПункта = Участники.ИдентификаторПункта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыДействий.Участник КАК Участник,
		|	РезультатыДействий.Функция КАК Функция,
		|	РезультатыДействий.ИдентификаторПункта КАК ИдентификаторПункта,
		|	РезультатыДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	РезультатыДействий.Результат КАК Результат
		|ИЗ
		|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Участники КАК Участники
		|		ПО РезультатыДействий.Действие = Участники.Действие
		|			И РезультатыДействий.ИдентификаторУчастника = Участники.Идентификатор";
	
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("Участники", Участники);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	КоличествоУчастников = Участники.Количество();
	
	ВсеВыполнилиДействие = (Результаты[1].Выбрать().Количество() = КоличествоУчастников)
		Или (Результаты[2].Выбрать().Количество() = КоличествоУчастников);
	
	Возврат ВсеВыполнилиДействие;
	
КонецФункции

// Заменяет участника в регистре.
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий
// 	СтарыйУчастник - ОпределяемыйТип.УчастникЗадач
// 	НовыйУчастник - ОпределяемыйТип.УчастникЗадач
// 	ИдентификаторУчастника - УникальныйИдентификатор - идентификатор участника
// 
Процедура ОбработатьЗаменуУчастникаДействия(
			ДействиеСсылка, ФункцияУчастника, СтарыйУчастник, НовыйУчастник, Знач ИдентификаторУчастника = Неопределено) Экспорт
			
	Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.Действие.Установить(ДействиеСсылка);
		Набор.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
		Набор.Отбор.Функция.Установить(ФункцияУчастника);
		Набор.Прочитать();
		
		Если Набор.Количество() Тогда
			Если НовыйУчастник = Неопределено Тогда
				ВызватьИсключение(НСтр("ru = 'Не заполнен новый участник действия!'"));
			КонецЕсли;
			Для Каждого Запись Из Набор Цикл
				Запись.Участник = НовыйУчастник;
			КонецЦикла;
			Набор.Записать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заменяет идентификатор этапа в регистре.
// 
// Параметры:
// 	ДействиеСсылка - ОпределяемыйТип.Действия - Ссылка на действие.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий
// 	ИдентификаторУчастника - УникальныйИдентификатор - идентификатор участника
// 	НовыйИдентификаторПункта - УникальныйИдентификатор - идентификатор пункта
// 
Процедура ОбработатьЗаполнениеИдентификатораЭтапа(
			ДействиеСсылка, ФункцияУчастника, ИдентификаторУчастника, НовыйИдентификаторПункта) Экспорт
			
	Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.Действие.Установить(ДействиеСсылка);
		Набор.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
		Набор.Отбор.Функция.Установить(ФункцияУчастника);
		Набор.Прочитать();
		
		Если Набор.Количество() Тогда
			Для Каждого Запись Из Набор Цикл
				Запись.ИдентификаторПункта = НовыйИдентификаторПункта;
			КонецЦикла;
			Набор.Записать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатыДействияПоФункцииУчастников(Действие, ФункцияУчастника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если действие завершено (есть результат), то по функции возвращаем тех участников,
	// которые повлияли на результат действия.
	// Остальных участников игнорируем (участники доп. выполнения), они не влияют на результат действия.
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатыДействий.ИдентификаторПункта КАК ИдентификаторПункта,
		|	РезультатыДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	РезультатыДействий.Участник КАК Участник,
		|	РезультатыДействий.Результат КАК Результат,
		|	РезультатыДействий.Дата КАК Дата,
		|	РезультатыДействий.Функция КАК Функция
		|ИЗ
		|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|ГДЕ
		|	РезультатыДействий.Действие = &Действие";
		
	Запрос.Параметры.Вставить("Действие", Действие);
	
	РезультатыДействия = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторПункта", УникальныйИдентификаторПустой());
	Отбор.Вставить("ИдентификаторУчастника", УникальныйИдентификаторПустой());
	Отбор.Вставить("Функция", Неопределено);
	
	ДатаЗавершения = Дата(3999,1,1);
	РезультатДействия = РезультатыДействия.НайтиСтроки(Отбор);
	Если РезультатДействия.Количество() > 0 Тогда
		ДатаЗавершения = РезультатДействия[0].Дата;
	КонецЕсли;
	
	Результат = РезультатыДействия.СкопироватьКолонки();
	Для Каждого СтрокаТаблицы Из РезультатыДействия Цикл
		Если СтрокаТаблицы.Дата <= ДатаЗавершения
			И СтрокаТаблицы.Функция = ФункцияУчастника Тогда
		
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Возвращает итоговый результат действия по функции участников.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий
// 
// Возвращаемое значение:
//  Неопределено, ОпределяемыйТип.РезультатыВыполненияДействий - Результат действия по функции участников,
//  	если его удалось определить. В противном случае Неопределено.
//
Функция РезультатДействияПоФункцииУчастников(Действие, ФункцияУчастника) Экспорт
	
	ВсеРезультаты = РезультатыДействияПоФункцииУчастников(Действие, ФункцияУчастника);
	ВсеРезультаты.Свернуть("Результат");
	
	Если ВсеРезультаты.Количество() = 1 Тогда
		Возврат ВсеРезультаты[0].Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли
