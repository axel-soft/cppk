#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Делает запись в регистр.
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия
//  Владелец - СправочникСсылка.Файлы, Строка, Неопределено - Файл-владелец служебного файла
//  Отношение - ПеречислениеСсылка.ОтношенияСлужебныхФайлов - пока только одно значение - HTML представление
//  Файл - СправочникСсылка.Файлы -
//  ДополнительныеСведения - Структура - Доп.сведения, например координаты рег.штампа или визуализации подписи.
//  ТребуетсяДолгаяОбработка - Булево
//  ФайлТокенизирован - Булево
//  НомерБлока -Число
Процедура ЗаписатьФайл(Документ, Владелец, Отношение, Файл,
	ДополнительныеСведения = Неопределено, ТребуетсяДолгаяОбработка = Ложь, ФайлТокенизирован = Ложь,
	НомерБлока = 0) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = СоздатьМенеджерЗаписи();
	
	Запись.Документ = Документ;
	Запись.Владелец = Владелец;
	Запись.Отношение = Отношение;
	Запись.Файл = Файл;
	
	Запись.ТребуетсяДолгаяОбработка = ТребуетсяДолгаяОбработка;
	Запись.ФайлТокенизирован = ФайлТокенизирован;
	Запись.ДополнительныеСведения = Новый ХранилищеЗначения(ДополнительныеСведения);
	
	Запись.НомерБлока = НомерБлока;
	
	Запись.Записать(Истина);
	
КонецПроцедуры

// Это служебный файл.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия
//  Файл - СправочникСсылка.Файлы
// 
// Возвращаемое значение:
//  Булево -
Функция ЭтоСлужебныйФайл(Документ, Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СлужебныеФайлыДокументов.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Документ
		|	И СлужебныеФайлыДокументов.Файл = &Файл";
		
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Файл", Файл);
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции	

// Получает служебный файл из регистра.
// Назначает и неявно возвращает параметр ДополнительныеСведения, если есть.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия -
//  Владелец - СправочникСсылка.Файлы, Строка -
//  Отношение - ПеречислениеСсылка.ОтношенияСлужебныхФайлов -  Отношение
//  ДополнительныеСведения - Структура - Дополнительные сведения. Например координаты штампа подписи.
//  									Назначается и неявно возвращается.
//  ТребуетсяДолгаяОбработка - Булево - возвращаемый параметр
//  ФайлТокенизирован - Булево - возвращаемый параметр
//  ВсегоПорцийПредпросмотра  -Число - Возвращаемый
//  НомерПорции -Число
// 
// Возвращаемое значение:
//  СправочникСсылка.Файлы, Неопределено - Служебный файл.
Функция ПолучитьСлужебныйФайл(Знач Документ, Знач Владелец, Знач Отношение,
	ДополнительныеСведения = Неопределено, ТребуетсяДолгаяОбработка = Ложь, ФайлТокенизирован = Ложь,
	ВсегоПорцийПредпросмотра = 0, НомерПорции = 0) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// В случае визуализации или штампа в поле Владелец может не быть файла, т.е. визуализация относится ко всему
	// документу, актуально, в частности для МЭДО.
	ВладелецПараметр = ?(
		ЗначениеЗаполнено(Владелец) И ТипЗнч(Владелец) <> Тип("Строка") И ТипЗнч(Владелец) <> Тип("СправочникСсылка.Файлы"), 
		Строка(Владелец), // Могли передать УникальныйИдентификатор, преобразуем его к строке.
		Владелец);
	Владельцы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВладелецПараметр);
	Если Отношение = Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации
		Или Отношение = Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампКорреспондента Тогда
		Владельцы.Добавить(Неопределено);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ КОЛИЧЕСТВО(*) КАК ВсегоПорцийПредпросмотра
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Документ
		|	И СлужебныеФайлыДокументов.Владелец В (&Владельцы)
		|	И СлужебныеФайлыДокументов.Отношение = &Отношение
		|	И ЕСТЬNULL(Файлы.ПометкаУдаления, ИСТИНА) = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Владельцы", Владельцы);
	Запрос.УстановитьПараметр("Отношение", Отношение);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ВсегоПорцийПредпросмотра = Выборка.ВсегоПорцийПредпросмотра;
	Если ВсегоПорцийПредпросмотра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НомерПорции < 0 Тогда
		НомерПорции = 0;
	КонецЕсли;
	
	Запрос.Параметры.Вставить("НомерБлока", НомерПорции);

	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СлужебныеФайлыДокументов.Файл КАК Файл,
	               |	СлужебныеФайлыДокументов.ТребуетсяДолгаяОбработка КАК ТребуетсяДолгаяОбработка,
	               |	СлужебныеФайлыДокументов.ФайлТокенизирован КАК ФайлТокенизирован,
	               |	СлужебныеФайлыДокументов.ДополнительныеСведения КАК ДополнительныеСведения
	               |ИЗ
	               |	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	               |		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
	               |ГДЕ
	               |	СлужебныеФайлыДокументов.Документ = &Документ
	               |	И СлужебныеФайлыДокументов.Владелец В(&Владельцы)
	               |	И СлужебныеФайлыДокументов.Отношение = &Отношение
	               |	И ЕСТЬNULL(Файлы.ПометкаУдаления, ИСТИНА) = ЛОЖЬ
	               |	И СлужебныеФайлыДокументов.НомерБлока = &НомерБлока";
	
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
	Файл = Неопределено;
	Если Выборка.Следующий() Тогда
		Если Выборка.ДополнительныеСведения <> Неопределено Тогда
			ДополнительныеСведения = Выборка.ДополнительныеСведения.Получить();
		Иначе
			ДополнительныеСведения = Неопределено;
		КонецЕсли;
	
		ТребуетсяДолгаяОбработка = Выборка.ТребуетсяДолгаяОбработка;
		ФайлТокенизирован = Выборка.ФайлТокенизирован;
		Файл = Выборка.Файл;
	КонецЕсли;
	
	Возврат Файл;
	
КонецФункции

// Получает служебный файл из регистра.
// Назначает и неявно возвращает параметр ДополнительныеСведения, если есть.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия -
//  Владелец - СправочникСсылка.Файлы, Строка -
//  Отношение - ПеречислениеСсылка.ОтношенияСлужебныхФайлов -  Отношение
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Файлы
Функция ПолучитьВсеСлужебныеФайлы(Знач Документ, Знач Владелец, Знач Отношение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// В случае визуализации или штампа в поле Владелец может не быть файла, т.е. визуализация относится ко всему
	// документу, актуально, в частности для МЭДО.
	ВладелецПараметр = ?(
		ЗначениеЗаполнено(Владелец) И ТипЗнч(Владелец) <> Тип("Строка") И ТипЗнч(Владелец) <> Тип("СправочникСсылка.Файлы"), 
		Строка(Владелец), // Могли передать УникальныйИдентификатор, преобразуем его к строке.
		Владелец);
	Владельцы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВладелецПараметр);
	Если Отношение = Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации
		Или Отношение = Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампКорреспондента Тогда
		Владельцы.Добавить(Неопределено);
	КонецЕсли;
	
	Запрос = Новый Запрос;      
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужебныеФайлыДокументов.Файл КАК Файл
	               |ИЗ
	               |	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	               |		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
	               |ГДЕ
	               |	СлужебныеФайлыДокументов.Документ = &Документ
	               |	И СлужебныеФайлыДокументов.Владелец В(&Владельцы)
	               |	И СлужебныеФайлыДокументов.Отношение = &Отношение
	               |	И ЕСТЬNULL(Файлы.ПометкаУдаления, ИСТИНА) = ЛОЖЬ";
	
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Владельцы", Владельцы);
	Запрос.УстановитьПараметр("Отношение", Отношение);
	
	Результат = Запрос.Выполнить();  
	
	МассивФайлов = Новый Массив;

	Выборка = Результат.Выбрать();
	Файл = Неопределено;
	Пока Выборка.Следующий() Цикл
		Файл = Выборка.Файл;
		МассивФайлов.Добавить(Файл);
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

// Получает служебный файл из регистра.
// Назначает и неявно возвращает параметр ДополнительныеСведения, если есть.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия -
//  Владелец - СправочникСсылка.Файлы, Строка -
//  Отношение - ПеречислениеСсылка.ОтношенияСлужебныхФайлов -  Отношение
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Файлы
Функция ПолучитьВсеСлужебныеФайлыСНомеромБлока(Знач Документ, Знач Владелец, Знач Отношение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// В случае визуализации или штампа в поле Владелец может не быть файла, т.е. визуализация относится ко всему
	// документу, актуально, в частности для МЭДО.
	ВладелецПараметр = ?(
		ЗначениеЗаполнено(Владелец) И ТипЗнч(Владелец) <> Тип("Строка") И ТипЗнч(Владелец) <> Тип("СправочникСсылка.Файлы"), 
		Строка(Владелец), // Могли передать УникальныйИдентификатор, преобразуем его к строке.
		Владелец);
	Владельцы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВладелецПараметр);
	Если Отношение = Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации
		Или Отношение = Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампКорреспондента Тогда
		Владельцы.Добавить(Неопределено);
	КонецЕсли;
	
	Запрос = Новый Запрос;      
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужебныеФайлыДокументов.Файл КАК Файл,
	               |	СлужебныеФайлыДокументов.НомерБлока КАК НомерБлока,
	               |	СлужебныеФайлыДокументов.Файл.ТекущаяВерсия КАК ФайлТекущаяВерсия
	               |ИЗ
	               |	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	               |		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
	               |ГДЕ
	               |	СлужебныеФайлыДокументов.Документ = &Документ
	               |	И СлужебныеФайлыДокументов.Владелец В(&Владельцы)
	               |	И СлужебныеФайлыДокументов.Отношение = &Отношение
	               |	И ЕСТЬNULL(Файлы.ПометкаУдаления, ИСТИНА) = ЛОЖЬ";
	
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Владельцы", Владельцы);
	Запрос.УстановитьПараметр("Отношение", Отношение);
	
	Результат = Запрос.Выполнить();  
	
	МассивФайлов = Новый Массив;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивФайлов.Добавить(Новый Структура("Файл, НомерБлока, ФайлТекущаяВерсия, ТекстHTML", 
			Выборка.Файл, Выборка.НомерБлока, Выборка.ФайлТекущаяВерсия, Неопределено));
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

// Для служебного файла получает мастер файл из регистра.
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия -
//  Файл - СправочникСсылка.Файлы - служебный файл
//
// Возвращаемое значение:
//  СправочникСсылка.Файлы - файл-владелец
Функция ПолучитьМастерФайл(Документ, Файл) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СлужебныеФайлыДокументов.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Документ
		|	И СлужебныеФайлыДокументов.Файл = &Файл
		|	И ЕСТЬNULL(Файлы.ПометкаУдаления, ИСТИНА) = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Файл", Файл);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Владелец;
	
КонецФункции

// Возвращает Истина, если есть файлы визуализации предмета с учетом пометки удаления.
// 
// Параметры:
//  Предмет - СправочникСсылка.ДокументыПредприятия -
// 
// Возвращаемое значение:
//  Булево - Есть файлы визуализации
Функция ЕстьФайлыВизуализации(Предмет) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СлужебныеФайлыДокументов.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Предмет
		|	И СлужебныеФайлыДокументов.Отношение = ЗНАЧЕНИЕ(Перечисление.ОтношенияСлужебныхФайлов.ВизуализацияЭП)
		|	И Файлы.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Помечает на удаление файл. Из самого регистра не удаляет, т.к. тогда при включенном показе помеченных на удаление
// служебный файл будет виден в документе на закладке "Файлы".
//
// Параметры:
//  Файл - СправочникСсылка.Файлы -
//
Процедура УдалитьФайл(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлОбъект = Файл.ПолучитьОбъект();
	ФайлОбъект.ДополнительныеСвойства.Вставить("УдалениеСлужебногоФайла", Истина);
	ФайлОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

// Помечает на удаление файлы по их владельцу и отношению. Сами записи в регистре не удаляет, т.к. служебные
// файлы не должны быть видны в документе на закладке "Файлы" даже при включенном показе удаленных.
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия -
//  Владелец - СправочникСсылка.Файлы, Строка -
//  Отношение - ПеречислениеССылка.ОтношенияСлужебныхФайлов -
//               
// Возвращаемое значение:
//  Булево - Были удалены файлы
Функция УдалитьПоВладельцуИОтношению(Документ, Владелец, Отношение) Экспорт
	
	БылиУдаленыФайлы = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СлужебныеФайлыДокументов.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.Файлы КАК Файлы
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Документ
		|	И СлужебныеФайлыДокументов.Владелец = &Владелец
		|	И СлужебныеФайлыДокументов.Отношение = &Отношение
		|	И ЕСТЬNULL(Файлы.ПометкаУдаления, ИСТИНА) = ЛОЖЬ");
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Отношение", Отношение);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УдалитьФайл(Выборка.Файл);  
		БылиУдаленыФайлы = Истина;
	КонецЦикла;
	
	Возврат БылиУдаленыФайлы;
	
КонецФункции

// Помечает на удаление служебные файлы картинок документа
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия
//  ФайлHTMLСсылка - СправочникСсылка.Файлы -
//
Процедура ОчиститьКартинки(Документ, ФайлHTMLСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СлужебныеФайлыДокументов.Владелец КАК Владелец,
		|	СлужебныеФайлыДокументов.Документ КАК Документ,
		|	СлужебныеФайлыДокументов.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Документ
		|	И СлужебныеФайлыДокументов.Отношение = &Отношение
		|	И СлужебныеФайлыДокументов.Владелец = &Владелец";
		
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Владелец", ФайлHTMLСсылка);
	Запрос.УстановитьПараметр("Отношение", Перечисления.ОтношенияСлужебныхФайлов.Картинка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	
	Попытка
		
		НачатьТранзакцию();
	
		Пока Выборка.Следующий() Цикл
			
			ФайлОбъект = Выборка.Файл.ПолучитьОбъект();
			ФайлОбъект.ДополнительныеСвойства.Вставить("УдалениеСлужебногоФайла", Истина);
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;	
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
	КонецПопытки;
	
	
КонецПроцедуры

// Возвращает ТаблицаЗначений (Файл, ТребуетсяДолгаяОбработка, ФайлТокенизирован)
//
// Параметры:
//   Предмет - Справочникссылка.ДокументыПредприятия
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//    * Файл - СправочникСсылка.Файлы -
//    * ТребуетсяДолгаяОбработка - Булево -
//    * ФайлТокенизирован - Булево -
Функция ДанныеФайловHtml(Предмет) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СлужебныеФайлыДокументов.Файл КАК Файл,
		|	СлужебныеФайлыДокументов.ТребуетсяДолгаяОбработка,
		|	СлужебныеФайлыДокументов.ФайлТокенизирован
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	СлужебныеФайлыДокументов.Документ = &Предмет
		|	И СлужебныеФайлыДокументов.Отношение = ЗНАЧЕНИЕ(Перечисление.ОтношенияСлужебныхФайлов.HTMLСодержание)
		|	И Файлы.ПометкаУдаления = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Обновить признак ФайлТокенизирован
//
// Параметры:
//  Файл - СправочникСсылка.Файлы - HTML файл
//  ФайлТокенизирован - Булево
//  НомерБлока - Число
//
Процедура ОбновитьПризнакФайлТокенизирован(Файл, ФайлТокенизирован, НомерБлока = 0) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СлужебныеФайлыДокументов.Владелец КАК Владелец,
		|	СлужебныеФайлыДокументов.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	СлужебныеФайлыДокументов.Файл = &Файл
		|	И ЕСТЬNULL(Файлы.ПометкаУдаления, ИСТИНА) = ЛОЖЬ
		|	И СлужебныеФайлыДокументов.НомерБлока = &НомерБлока";
		
	Запрос.УстановитьПараметр("Файл", Файл);
	Запрос.УстановитьПараметр("НомерБлока", НомерБлока);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Запись = СоздатьМенеджерЗаписи();
	
	Запись.Документ = Выборка.Документ;
	Запись.Владелец = Выборка.Владелец;
	Запись.Файл = Файл; 
	Запись.НомерБлока = НомерБлока; 
	
	Запись.Прочитать();
	
	Если Запись.Выбран() Тогда
		Запись.ФайлТокенизирован = ФайлТокенизирован;
		Запись.Записать(Истина);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
