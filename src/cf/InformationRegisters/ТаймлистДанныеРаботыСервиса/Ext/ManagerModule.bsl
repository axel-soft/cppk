
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает данные обработки файла сервисом.
// 
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//  Поля - Строка - список полей через разделитель ",". Если не указаны, то берутся все поля.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеДанных
// 
Функция Данные(ВерсияФайла, Поля = "") Экспорт
	
	Данные = ОписаниеДанных();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВерсияФайла", ВерсияФайла);
	Запрос.Текст =
		"ВЫБРАТЬ
		|%ПоляЗапроса
		|ИЗ
		|	РегистрСведений.ТаймлистДанныеРаботыСервиса КАК ТаймлистДанныеРаботыСервиса
		|ГДЕ
		|	ТаймлистДанныеРаботыСервиса.ВерсияФайла = &ВерсияФайла";
	
	Если Не ЗначениеЗаполнено(Поля) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляЗапроса",
			"ТаймлистДанныеРаботыСервиса.Автопротокол,
			|ТаймлистДанныеРаботыСервиса.ИдентификаторАвтопротокола,
			|ТаймлистДанныеРаботыСервиса.ИдентификаторЗадания,
			|ТаймлистДанныеРаботыСервиса.Расшифровка,
			|ТаймлистДанныеРаботыСервиса.СледующиеШаги,
			|ТаймлистДанныеРаботыСервиса.Спикеры,
			|ТаймлистДанныеРаботыСервиса.Статус");
		
	Иначе
		
		МассивПолей = СтрРазделить(Поля, ",");
		МассивСтрокПолейЗапроса = Новый Массив;
		Для Каждого Поле Из МассивПолей Цикл
			МассивСтрокПолейЗапроса.Добавить(СтрШаблон("ТаймлистДанныеРаботыСервиса.%1", Поле));
		КонецЦикла;
		
		СтрокаПоляЗапроса = СтрСоединить(МассивСтрокПолейЗапроса, "," + Символы.ПС);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляЗапроса", СтрокаПоляЗапроса);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Фиксирует событие начала загрузки файла в сервис.
// 
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//  ИдентификаторЗадания - Строка
// 
Процедура ЗаписатьНачалоЗагрузкиФайлаВСервис(ВерсияФайла, ИдентификаторЗадания) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияФайла;
	МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
	МенеджерЗаписи.ИдентификаторЗадания = ИдентификаторЗадания;
	МенеджерЗаписи.Статус = Перечисления.ТаймлистСтатусы.ОтправленНаЗагрузку;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Записывает расшифровку и спикеров, полученных из сервиса.
// 
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//  Расшифровка - ХранилищеЗначения
//  Спикеры - ХранилищеЗначения
//  Статус - ПеречислениеСсылка.ТаймлистСтатусы
// 
Процедура ЗаписатьРасшифровкуИСпикеров(ВерсияФайла, Расшифровка, Спикеры) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияФайла;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
		МенеджерЗаписи.Расшифровка = Расшифровка;
		МенеджерЗаписи.Спикеры = Спикеры;
		МенеджерЗаписи.Статус = Перечисления.ТаймлистСтатусы.Расшифрован;
		МенеджерЗаписи.Записать();
		РегистрыСведений.ТаймлистОшибкиРаботыССервисом.Удалить(ВерсияФайла);
	КонецЕсли;
	
КонецПроцедуры

// Записывает расшифровку.
// 
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//  Расшифровка - ХранилищеЗначения
//  Статус - ПеречислениеСсылка.ТаймлистСтатусы
// 
Процедура ЗаписатьРасшифровку(ВерсияФайла, Расшифровка, Статус = Неопределено) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияФайла;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		
		МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
		МенеджерЗаписи.Расшифровка = Расшифровка;
		Если ЗначениеЗаполнено(Статус) Тогда
			МенеджерЗаписи.Статус = Статус;
		Иначе
			МенеджерЗаписи.Статус = Перечисления.ТаймлистСтатусы.Расшифрован;
		КонецЕсли;
		МенеджерЗаписи.Записать();
		РегистрыСведений.ТаймлистОшибкиРаботыССервисом.Удалить(ВерсияФайла);
	КонецЕсли;
	
КонецПроцедуры

// Записывает расшифровку, полученную из сервиса.
// 
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//  Спикеры - ХранилищеЗначения
// 
Процедура ЗаписатьСпикеров(ВерсияФайла, Спикеры) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияФайла;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
		МенеджерЗаписи.Спикеры = Спикеры;
		МенеджерЗаписи.Записать();
		РегистрыСведений.ТаймлистОшибкиРаботыССервисом.Удалить(ВерсияФайла);
	КонецЕсли;
	
КонецПроцедуры

// Фиксирует событие начала формирования автопротокола.
// 
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//  ИдентификаторАвтопротокола - Строка
// 
Процедура ЗаписатьНачалоФормированияАвтопротокола(ВерсияФайла, ИдентификаторАвтопротокола) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияФайла;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
		МенеджерЗаписи.ИдентификаторАвтопротокола = ИдентификаторАвтопротокола;
		МенеджерЗаписи.Статус = Перечисления.ТаймлистСтатусы.ПолучениеАвтопротокола;
		МенеджерЗаписи.Записать();
		РегистрыСведений.ТаймлистОшибкиРаботыССервисом.Удалить(ВерсияФайла);
	КонецЕсли;
	
КонецПроцедуры

// Записывает автопротокол.
// 
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//  ДанныеАвтопротокола - Структура:
//   * Автопротокол - ХранилищеЗначения
//   * СледующиеШаги - Строка
// 
Процедура ЗаписатьАвтопротокол(ВерсияФайла, ДанныеАвтопротокола) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияФайла;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Автопротокол = ДанныеАвтопротокола.Автопротокол;
		МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
		МенеджерЗаписи.СледующиеШаги = ДанныеАвтопротокола.СледующиеШаги;
		МенеджерЗаписи.Статус = Перечисления.ТаймлистСтатусы.ПолученАвтопротокол;
		МенеджерЗаписи.Записать();
		РегистрыСведений.ТаймлистОшибкиРаботыССервисом.Удалить(ВерсияФайла);
	КонецЕсли;
	
КонецПроцедуры

// Фиксирует статус обработки файла сервисом.
// 
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//  Статус - ПеречислениеСсылка.ТаймлистСтатусы
// 
Процедура ЗаписатьСтатусРаботыССервисом(ВерсияФайла, Статус) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияФайла;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
		МенеджерЗаписи.Статус = Статус;
		МенеджерЗаписи.Записать();
		РегистрыСведений.ТаймлистОшибкиРаботыССервисом.Удалить(ВерсияФайла);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет запись с отбором по переданной версии файла.
// 
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
// 
Процедура Удалить(ВерсияФайла) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияФайла;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеДанных()
	
	НовыйОписаниеДанных = Новый Структура;
	НовыйОписаниеДанных.Вставить("Автопротокол");
	НовыйОписаниеДанных.Вставить("ИдентификаторАвтопротокола");
	НовыйОписаниеДанных.Вставить("ИдентификаторЗадания");
	НовыйОписаниеДанных.Вставить("Расшифровка");
	НовыйОписаниеДанных.Вставить("СледующиеШаги");
	НовыйОписаниеДанных.Вставить("Спикеры");
	НовыйОписаниеДанных.Вставить("Статус");
	
	Возврат НовыйОписаниеДанных;
	
КонецФункции

#КонецОбласти

#КонецЕсли