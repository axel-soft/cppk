
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Добавляет указанный объект в очередь отложенного обновления прав
//
// Параметры:
//  Объект - ЛюбаяСсылка - ссылка на объект, который необходимо записать в очередь.
//  ДатаВремя - Дата - Необязательный. Используется для сортровки при обработке очереди.
//  Приоритет - Число, Неопределено - Необязательный. Приоритет очереди, в которую нужно добавить объект. По умолчанию Неопределено.
//  ДопСведения - Строка - Необязательный. Дополнительные данные для обработки записи.
//
Процедура Добавить(Объект, ДатаВремя = Неопределено, Приоритет = Неопределено, ДопСведения = "") Экспорт
	
	Если ДатаВремя = Неопределено Тогда
		
		ДатаВремя = ТекущаяДатаСеанса();
		ДатаВМиллиСекундах = ОбщегоНазначенияДокументооборот.ТекущаяДатаВМиллисекундах();
		
	Иначе
		
		// Запись должна быть обработана после других записей с такой же датой.
		ДатаВМиллисекундах = ОбщегоНазначенияДокументооборот.ДатаВМиллисекундах(ДатаВремя);
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЕстьNull(МАКСИМУМ(ОчередьОбновленияПравДоступа.ДатаВМиллиСекундах), 0) КАК ДатаВмс
			|ИЗ
			|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
			|ГДЕ
			|	ОчередьОбновленияПравДоступа.Дата = &ДатаВремя");
		
		Запрос.УстановитьПараметр("ДатаВремя", ДатаВремя);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ДатаВМиллисекундах = ДатаВМиллисекундах + Выборка.ДатаВмс + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Приоритет = Неопределено Тогда
		Приоритет = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
	КонецЕсли;
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Приоритет = Приоритет;
	МенеджерЗаписи.ДопСведения = ДопСведения;
	МенеджерЗаписи.Дата = ДатаВремя;
	МенеджерЗаписи.ДатаВМиллиСекундах = ДатаВМиллиСекундах;
	
	// Запись с замещением для правильного выстраивания очереди
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Удаляет указанный объект из очереди отложенного обновления прав
//
// Параметры:
//  Объект - ЛюбаяСсылка, Массив - ссылка на объект, который необходимо удалить из очереди или массив таких ссылок.
//  ДопСведения - Строка - Необязательный. Дополнительные данные для обработки записи.
//
Процедура Удалить(Объект, ДопСведения = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьОбновленияПравДоступа.Объект,
		|	ОчередьОбновленияПравДоступа.Приоритет,
		|	ОчередьОбновленияПравДоступа.ДопСведения
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
		|ГДЕ
		|	ОчередьОбновленияПравДоступа.Объект = &Объект
		|	И ОчередьОбновленияПравДоступа.ДопСведения = &ДопСведения";
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &Объект", "В (&Объект)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ДопСведения", ДопСведения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ОчередьОбновленияПравДоступа.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Обновляет порцию прав из очереди
//
// Параметры:
//  РазмерПорции - Число - количество записей, которые необходимо обработать.
//
// Возвращаемое значение:
//  Число - количество обарботанных записей очереди.
//
Функция ОбработатьПорцию(РазмерПорции = 10, УчитыватьЛимитПопыток = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ %1
		|	ОчередьОбновленияПравДоступа.Объект,
		|	ОчередьОбновленияПравДоступа.ДопСведения
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
		|ГДЕ
		|	ОчередьОбновленияПравДоступа.Приоритет = &Приоритет
		|	И ОчередьОбновленияПравДоступа.КоличествоПопытокОбработки < 3
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВМиллиСекундах,
		|	Объект";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", Формат(РазмерПорции, "ЧГ="));
	Если УчитыватьЛимитПопыток = Ложь Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И ОчередьОбновленияПравДоступа.КоличествоПопытокОбработки < 3", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("Приоритет", ПараметрыСеанса.ПриоритетОчередиОбновленияПрав);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОбработанныеВТекущейИтерации = ТаблицаОбработанныхЗаписей();
	Пока Выборка.Следующий() Цикл
		
		// Объект мог быть обработан при групповой обработке записей.
		Отбор = Новый Структура("Объект, ДопСведения", Выборка.Объект, Выборка.ДопСведения);
		НайденныеЗаписи = ОбработанныеВТекущейИтерации.НайтиСтроки(Отбор); 
		Если НайденныеЗаписи.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработатьЭлементОчереди(
			Выборка.Объект,
			Выборка.ДопСведения,
			ОбработанныеВТекущейИтерации);
		
	КонецЦикла;
	
	Количество = ОбработанныеВТекущейИтерации.Количество();
	
	Возврат Количество;
	
КонецФункции

// Обрабатывает обновление прав по указанному элементу очереди и удаляет его 
// из очереди обновления
Процедура ОбработатьЭлементОчереди(Ссылка, ДопСведения,
			ОбработанныеВТекущейИтерации = Неопределено) Экспорт
	
	СтарыйПриоритет = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
	ТипЭлемента = ТипЗнч(Ссылка);
	
	ОбработанныеЭлементы = Неопределено;
	ЕстьОшибки = Ложь;
	ОписаниеОшибки = "";
	
	Попытка
		
		Если ЭтоДескриптор(ТипЭлемента) Тогда
			
			ОбработанныеЭлементы = Новый Массив;
			ДескрипторыКРасчету = Новый Массив;
			
			ЭтоДескрипторОбъекта = ТипЭлемента = Тип("СправочникСсылка.ДескрипторыДоступаОбъектов");
			ЭтоИндивидуальныйДескриптор = Ложь;
			ЭтоДескрипторДляЛокальныхАдминистраторов = Ложь;
			
			Если ЭтоДескрипторОбъекта Тогда
				РеквизитыДескриптора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Ссылка, "ИдентификаторОбъектаМетаданных, КонтейнерСотрудников, ДляЛокальныхАдминистраторов");
				ЭтоИндивидуальныйДескриптор = ЗначениеЗаполнено(РеквизитыДескриптора.КонтейнерСотрудников);
				ЭтоДескрипторДляЛокальныхАдминистраторов = РеквизитыДескриптора.ДляЛокальныхАдминистраторов;
				ИдОбъектаМетаданных = РеквизитыДескриптора.ИдентификаторОбъектаМетаданных;
			Иначе
				// Дескриптор регистра.
				ИдОбъектаМетаданных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ОбъектМетаданных");
			КонецЕсли;
			
			// Поиск дескрипторов к расчету.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ %1
				|	ОчередьОбновленияПравДоступа.Объект
				|ИЗ
				|	%2 КАК ДескрипторыДоступа
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
				|		ПО ДескрипторыДоступа.Ссылка = ОчередьОбновленияПравДоступа.Объект
				|ГДЕ
				|	ОчередьОбновленияПравДоступа.Приоритет = &Приоритет
				|	%3
				|	
				|УПОРЯДОЧИТЬ ПО
				|	ОчередьОбновленияПравДоступа.ДатаВМиллиСекундах");
			
			РазмерПорцииДескрипторов =
				ДокументооборотПраваДоступаПовтИсп.РазмерПорцииДескрипторовДляРасчета(
					ЭтоИндивидуальныйДескриптор);
					
			Если ЭтоИндивидуальныйДескриптор Тогда
				
				УсловиеПоПолямДескриптора =
					"И ДескрипторыДоступа.КонтейнерСотрудников <> Неопределено";
				
			ИначеЕсли ЭтоДескрипторДляЛокальныхАдминистраторов Тогда
				
				УсловиеПоПолямДескриптора =
					"И ДескрипторыДоступа.ДляЛокальныхАдминистраторов
					|И ДескрипторыДоступа.ИдентификаторОбъектаМетаданных = &ИОМ";
				
			ИначеЕсли ЭтоДескрипторОбъекта Тогда
				
				УсловиеПоПолямДескриптора =
					"И ДескрипторыДоступа.КонтейнерСотрудников = Неопределено
					|И Не ДескрипторыДоступа.ДляЛокальныхАдминистраторов
					|И ДескрипторыДоступа.ИдентификаторОбъектаМетаданных = &ИОМ";
				
			Иначе
				
				УсловиеПоПолямДескриптора =
					"И ДескрипторыДоступа.ОбъектМетаданных = &ИОМ";
				
			КонецЕсли;
			
			Запрос.Текст = СтрШаблон(Запрос.Текст,
				Формат(РазмерПорцииДескрипторов, "ЧГ="), 
				Ссылка.Метаданные().ПолноеИмя(), 
				УсловиеПоПолямДескриптора);
			
			Запрос.УстановитьПараметр("ИОМ", ИдОбъектаМетаданных);
			Запрос.УстановитьПараметр("Приоритет", СтарыйПриоритет);
			
			Результат = Запрос.Выполнить();
			ТаблицаРезультата = Результат.Выгрузить();
			
			ДескрипторыКРасчету = ТаблицаРезультата.ВыгрузитьКолонку("Объект");
			ОбработанныеЭлементы = ТаблицаРезультата.ВыгрузитьКолонку("Объект");
			
			Если ДескрипторыКРасчету.Найти(Ссылка) = Неопределено Тогда
				ДескрипторыКРасчету.Добавить(Ссылка);
				ОбработанныеЭлементы.Добавить(Ссылка);
			КонецЕсли;
			
			// Расчет прав по дескрипторам.
			Если ТипЭлемента = Тип("СправочникСсылка.ДескрипторыДоступаОбъектов") Тогда
				
				НазначениеДескриптора = Справочники.ДескрипторыДоступаОбъектов.НазначениеДескриптора(
					ЭтоИндивидуальныйДескриптор, ЭтоДескрипторДляЛокальныхАдминистраторов);
				
		 		Справочники.ДескрипторыДоступаОбъектов.РассчитатьПраваЗапросом(
					ДескрипторыКРасчету, ИдОбъектаМетаданных, НазначениеДескриптора);
				
				ДокументооборотПраваДоступа.ОбновитьПраваСвязанныхДескрипторовПоДескрипторам(
					ОбработанныеЭлементы);
				
			Иначе
				
		 		Справочники.ДескрипторыДоступаРегистров.РассчитатьПраваЗапросом(
					ДескрипторыКРасчету, ИдОбъектаМетаданных);
				
			КонецЕсли;
				
		ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			
			Если ДопСведения = "ОпределитьПрава" Тогда
				ДокументооборотПраваДоступа.ОпределитьПраваОбъектовТаблицы(Ссылка, Истина);
				
			ИначеЕсли ДопСведения = "ОпределитьПраваДляЛокальныхАдминиистраторов" Тогда
				ДокументооборотПраваДоступа.ОпределитьПраваОбъектовТаблицыДляЛокальныхАдминистраторов(Ссылка, Истина);
				
			ИначеЕсли ДопСведения = "РассчитатьПрава" Тогда
				ДокументооборотПраваДоступа.РассчитатьПраваОбъектовТаблицы(Ссылка, Истина);
				
			КонецЕсли;
			
		ИначеЕсли ДопСведения = "ИзменениеСоставаКонтейнера" Тогда
			
			// Все записи по изменению состава контейнеров обрабатываются вместе.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ОчередьОбновленияПравДоступа.Объект
				|ИЗ
				|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
				|ГДЕ
				|	ОчередьОбновленияПравДоступа.Приоритет = &Приоритет
				|	И ОчередьОбновленияПравДоступа.ДопСведения = &ДопСведения");
			
			Запрос.УстановитьПараметр("ДопСведения", ДопСведения);
			Запрос.УстановитьПараметр("Приоритет", СтарыйПриоритет);
			
			ТаблицаКонтейнеров = Запрос.Выполнить().Выгрузить();
			ИзмененнныеКонтейнеры = ТаблицаКонтейнеров.ВыгрузитьКолонку("Объект");
			ОбработанныеЭлементы = ТаблицаКонтейнеров.ВыгрузитьКолонку("Объект");
			
			ДокументооборотПраваДоступа.ОбновитьПраваПоСоставуКонтейнеров(
				ИзмененнныеКонтейнеры,
				Истина); // Немедленно
			
		ИначеЕсли ДопСведения = "ОбновитьПраваПоЗначениюРазрезаДоступа" Тогда
			
			ДокументооборотПраваДоступа.ОбновитьПраваПоЗначениюРазрезаДоступа(Ссылка, Истина);
			
		ИначеЕсли ДопСведения = "АктуализироватьПраваРуководителейИДелегатов" Тогда
			
			// Все записи по актуализации прав руководителей и делегатов обрабатываются вместе.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ОчередьОбновленияПравДоступа.Объект
				|ИЗ
				|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
				|ГДЕ
				|	ОчередьОбновленияПравДоступа.Приоритет = &Приоритет
				|	И ОчередьОбновленияПравДоступа.ДопСведения = &ДопСведения");
			
			Запрос.УстановитьПараметр("ДопСведения", ДопСведения);
			Запрос.УстановитьПараметр("Приоритет", СтарыйПриоритет);
			
			ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
			ПользователиКОбработке = ТаблицаПользователей.ВыгрузитьКолонку("Объект");
			ОбработанныеЭлементы = ТаблицаПользователей.ВыгрузитьКолонку("Объект");
			
			ДокументооборотПраваДоступа.АктуализироватьПраваСотрудниковПоСоставуСубъектов(
				ПользователиКОбработке,
				Истина); // Немедленно
		
		ИначеЕсли ДопСведения = "ОпределитьПраваОбъекта" Тогда
			ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(Ссылка);
			Если ТипЭлемента = Тип("СправочникСсылка.Контрагенты") Тогда
				ДокументооборотПраваДоступа.ОбновитьПраваПоКонтрагенту(Ссылка, Истина);
			КонецЕсли;
		
		ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			Если ДопСведения = "АктуализироватьПраваРуководителей" Тогда
				
				// Все аналогичные записи обрабатываются вместе.
				Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ОчередьОбновленияПравДоступа.Объект
					|ИЗ
					|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
					|ГДЕ
					|	ОчередьОбновленияПравДоступа.Приоритет = &Приоритет
					|	И ОчередьОбновленияПравДоступа.ДопСведения = &ДопСведения");
				
				Запрос.УстановитьПараметр("ДопСведения", ДопСведения);
				Запрос.УстановитьПараметр("Приоритет", СтарыйПриоритет);
				
				ТаблицаПодразделений = Запрос.Выполнить().Выгрузить();
				ПодразделенияКОбработке = ТаблицаПодразделений.ВыгрузитьКолонку("Объект");
				ОбработанныеЭлементы = ТаблицаПодразделений.ВыгрузитьКолонку("Объект");
				
				ДокументооборотПраваДоступа.АктуализироватьПраваСотрудниковПодразделенийПоССПД(
					ПодразделенияКОбработке,
					Истина); // Немедленно
				
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2;
			ДокументооборотПраваДоступа.ОбновитьПраваПоКонтрагенту(
				Ссылка, 
				Истина); // Немедленно
			
		ИначеЕсли ТипЭлемента = Тип("ПеречислениеСсылка.ЗаданияОчередиОбновленияПрав") Тогда
			
			Если Ссылка = Перечисления.ЗаданияОчередиОбновленияПрав.ОчиститьВсеПрава Тогда
				ДокументооборотПраваДоступа.УдалитьВсеДанныеОПравахДоступа(Истина);
				
			ИначеЕсли Ссылка = Перечисления.ЗаданияОчередиОбновленияПрав.РассчитатьВсеПрава Тогда
				ДокументооборотПраваДоступа.ОбновитьПраваВсехДанных(Истина);
				
			ИначеЕсли Ссылка = Перечисления.ЗаданияОчередиОбновленияПрав.ЗаполнитьСоставСубъектовПравДоступа Тогда
				РегистрыСведений.СоставСубъектовПравДоступа.ОбновитьВсеДанные(Истина);
				
			ИначеЕсли Ссылка = Перечисления.ЗаданияОчередиОбновленияПрав.РассчитатьПраваРазрезовДоступа Тогда
				ДокументооборотПраваДоступа.ОбновитьПраваВсехРазрезовДоступа(Истина);
				
			ИначеЕсли Ссылка = Перечисления.ЗаданияОчередиОбновленияПрав.ОтключитьДескрипторыЛокАдминистраторов Тогда
				ДокументооборотПраваДоступа.ОтключитьДескрипторыЛокАдминистраторов(Истина);
				
			КонецЕсли;
			
		ИначеЕсли ДокументооборотПраваДоступа.ЭтоПапка(ТипЭлемента) Тогда
			
			Если ДопСведения = "ОбновитьПраваСодержимогоПапки" Тогда
				ДокументооборотПраваДоступа.ОбновитьПраваПоПапке(
					Ссылка,
					Истина); // Немедленно
			ИначеЕсли ДопСведения = "ПереопределитьПраваСодержимогоПапки" Тогда
				ДокументооборотПраваДоступа.ПереопределитьДескрипторыЗависимыхОбъектов(
					Ссылка,
					Истина); // Немедленно
			КонецЕсли;
			
		ИначеЕсли ДопСведения = "ОбновитьРолиПользователей" Тогда
			
			// Все записи этого типа обрабатываются вместе.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ОчередьОбновленияПравДоступа.Объект
				|ИЗ
				|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
				|ГДЕ
				|	ОчередьОбновленияПравДоступа.Приоритет = &Приоритет
				|	И ОчередьОбновленияПравДоступа.ДопСведения = &ДопСведения");
			
			Запрос.УстановитьПараметр("ДопСведения", ДопСведения);
			Запрос.УстановитьПараметр("Приоритет", СтарыйПриоритет);
			
			ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
			ПользователиКАктуализации = ТаблицаПользователей.ВыгрузитьКолонку("Объект");
			ОбработанныеЭлементы = ТаблицаПользователей.ВыгрузитьКолонку("Объект");
			
			УправлениеДоступом.ОбновитьРолиПользователей(
				ПользователиКАктуализации,,
				Истина); // Немедленно
		
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Неизвестная запись очереди обновления прав.
					|Ссылка: %1
					|Доп. сведения: %2'"),
				Ссылка, ДопСведения);
			
			ВызватьИсключение ТекстОшибки
			
		КонецЕсли;
		
	Исключение
		
		ЕстьОшибки = Истина;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Права доступа'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Ссылка.Метаданные(),
			Ссылка,
			ОписаниеОшибки);
			
	КонецПопытки;
	
	Если ОбработанныеЭлементы = Неопределено Тогда
		ОбработанныеЭлементы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	КонецЕсли;
	
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = СтарыйПриоритет;

	// Удаление обработанных элементов очереди.
	Если ЕстьОшибки Тогда
		
		Если ТипЭлемента = Тип("ПеречислениеСсылка.ЗаданияОчередиОбновленияПрав") Тогда
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru='%1
					|Задание: %2'"), ОписаниеОшибки, Ссылка);
		Иначе
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru='%1
					|Объект: %2'"), ОписаниеОшибки, ПолучитьНавигационнуюСсылку(Ссылка));
		КонецЕсли;
		
		Если ОбработанныеЭлементы.Количество() > 0 Тогда
			ОписаниеОшибки = ОписаниеОшибки + НСтр("ru = 'Все обрабатываемые элементы:'");
			Для Каждого Эл Из ОбработанныеЭлементы Цикл
				ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ПолучитьНавигационнуюСсылку(Эл);
			КонецЦикла;
		КонецЕсли;
		ЗафиксироватьНеудачнуюПопыткуОбработки(Ссылка, СтарыйПриоритет, ДопСведения, ОписаниеОшибки);
	Иначе
		Удалить(ОбработанныеЭлементы, ДопСведения);
		Если ОбработанныеВТекущейИтерации <> Неопределено Тогда
			Для Каждого Эл Из ОбработанныеЭлементы Цикл
				Стр = ОбработанныеВТекущейИтерации.Добавить();
				Стр.Объект = Эл;
				Стр.ДопСведения = ДопСведения;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Очищает всю очередь - удаляет все записи,
// кроме ссылок на перечисление ЗаданияОчередиОбновленияПрав.
// 
Процедура Очистить(ОставитьЗаписиСПустойДатой = Истина) Экспорт
	
	Набор = РегистрыСведений.ОчередьОбновленияПравДоступа.СоздатьНаборЗаписей();
	
	Если ОставитьЗаписиСПустойДатой Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ОчередьОбновленияПравДоступа.Объект,
			|	ОчередьОбновленияПравДоступа.Приоритет,
			|	ОчередьОбновленияПравДоступа.ДатаВМиллиСекундах,
			|	ОчередьОбновленияПравДоступа.Дата
			|ИЗ
			|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ЗаданияОчередиОбновленияПрав КАК ЗаданияОчередиОбновленияПрав
			|		ПО ОчередьОбновленияПравДоступа.Объект = ЗаданияОчередиОбновленияПрав.Ссылка");
		
		ТаблицаНабора = Запрос.Выполнить().Выгрузить();
		Набор.Загрузить(ТаблицаНабора);
		
	КонецЕсли;
	
	Набор.Записать();
	
КонецПроцедуры

// Возвращает Истина, если указанный объект (например, дескриптор)
// стоит в очереди на обработку.
Функция ОбъектВОчереди(Объект) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
		|ГДЕ
		|	ОчередьОбновленияПравДоступа.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	ЕстьЗаписи = Не Результат.Пустой();
	
	Возврат ЕстьЗаписи;
	
КонецФункции	

// Возвращает размер очереди.
Функция РазмерОчереди(Приоритет = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Приоритет = Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) Как ЧислоЗаписей
			|ИЗ
			|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) Как ЧислоЗаписей
			|ИЗ
			|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
			|ГДЕ	
			|	ОчередьОбновленияПравДоступа.Приоритет = &Приоритет";
			
		Запрос.УстановитьПараметр("Приоритет", Приоритет);	
	КонецЕсли;

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ЧислоЗаписей;
	КонецЕсли;

	Возврат 0;
	
КонецФункции

Функция ТаблицаОбработанныхЗаписей() Экспорт

	ОбработанныеВТекущейИтерации = Новый ТаблицаЗначений;
	ОбработанныеВТекущейИтерации.Колонки.Добавить("Объект");
	ОбработанныеВТекущейИтерации.Колонки.Добавить("ДопСведения");
	Возврат ОбработанныеВТекущейИтерации;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
Функция ЭтоДескриптор(ТипЭлемента)
	
	Если ТипЭлемента = Тип("СправочникСсылка.ДескрипторыДоступаОбъектов") 
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ДескрипторыДоступаРегистров") Тогда
		
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗафиксироватьНеудачнуюПопыткуОбработки(Ссылка, Приоритет, ДопСведения, ТекстОшибки)
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Ссылка;
	МенеджерЗаписи.Приоритет = Приоритет;
	МенеджерЗаписи.ДопСведения = ДопСведения;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.КоличествоПопытокОбработки = МенеджерЗаписи.КоличествоПопытокОбработки + 1;
		МенеджерЗаписи.ТекстОшибки = ТекстОшибки;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
