#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Полностью обновляет данные регистра.
//
Процедура ОбновитьДанныеПолностью() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Контейнер,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ СотрудникиВКонтейнерахБезФильтра
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиПользователей.Пользователь,
		|	СотрудникиПользователей.Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсполнителиРолей.РольИсполнителя,
		|	ИсполнителиРолей.Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|	ГДЕ ИсполнителиРолей.Исполнитель ССЫЛКА Справочник.Сотрудники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодчиненностьПодразделений.Вышестоящее,
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|			И НЕ ПодчиненностьПодразделений.Подчиненное.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияКонтейнеры.Ссылка,
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|			И НЕ ПодчиненностьПодразделений.Подчиненное.ПометкаУдаления
		|			И НЕ ПодчиненностьПодразделений.Вышестоящее.ПометкаУдаления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияКонтейнеры КАК ПодразделенияКонтейнеры
		|		ПО ПодчиненностьПодразделений.Вышестоящее = ПодразделенияКонтейнеры.Владелец
		|			И (ПодразделенияКонтейнеры.СпособВключенияПодчиненных = ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.СПодчиненными)
		|				ИЛИ ПодчиненностьПодразделений.Вышестоящее = ПодчиненностьПодразделений.Подчиненное
		|					И ПодразделенияКонтейнеры.СпособВключенияПодчиненных = ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.БезПодчиненных))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияКонтейнеры.Ссылка,
		|	ПодчиненностьПодразделений.РуководительПодчиненного
		|ИЗ
		|	Справочник.ПодразделенияКонтейнеры КАК ПодразделенияКонтейнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО ПодразделенияКонтейнеры.Владелец = ПодчиненностьПодразделений.Подчиненное
		|			И ПодразделенияКонтейнеры.Владелец = ПодчиненностьПодразделений.Вышестоящее
		|			И ПодчиненностьПодразделений.РуководительПодчиненного <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			И ПодразделенияКонтейнеры.СпособВключенияПодчиненных = ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.ТолькоРуководитель)
 		|			И НЕ ПодчиненностьПодразделений.Подчиненное.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроектыКонтейнеры.Ссылка,
		|	ПроектыПроектнаяКоманда.Исполнитель
		|ИЗ
		|	Справочник.ПроектыКонтейнеры КАК ПроектыКонтейнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ПроектыКонтейнеры.Владелец = Проекты.Ссылка
		|			И НЕ Проекты.ПометкаУдаления
		|			И ПроектыКонтейнеры.СпособВключенияУчастников = ЗНАЧЕНИЕ(Перечисление.СпособВключенияУчастниковПроекта.ВсеУчастники)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты.ПроектнаяКоманда КАК ПроектыПроектнаяКоманда
		|		ПО Проекты.Ссылка = ПроектыПроектнаяКоманда.Ссылка
		|			И ПроектыПроектнаяКоманда.Исполнитель ССЫЛКА Справочник.Сотрудники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроектыКонтейнеры.Ссылка,
		|	ИсполнителиРолей.Исполнитель
		|ИЗ
		|	Справочник.ПроектыКонтейнеры КАК ПроектыКонтейнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ПроектыКонтейнеры.Владелец = Проекты.Ссылка
		|			И НЕ Проекты.ПометкаУдаления
		|			И ПроектыКонтейнеры.СпособВключенияУчастников = ЗНАЧЕНИЕ(Перечисление.СпособВключенияУчастниковПроекта.ВсеУчастники)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты.ПроектнаяКоманда КАК ПроектыПроектнаяКоманда
		|		ПО Проекты.Ссылка = ПроектыПроектнаяКоманда.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|		ПО ПроектыПроектнаяКоманда.Исполнитель = ИсполнителиРолей.РольИсполнителя
		|			И ИсполнителиРолей.Исполнитель ССЫЛКА Справочник.Сотрудники
		|			И НЕ ИсполнителиРолей.РольИсполнителя.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроектыКонтейнеры.Ссылка,
		|	Проекты.Руководитель
		|ИЗ
		|	Справочник.ПроектыКонтейнеры КАК ПроектыКонтейнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ПроектыКонтейнеры.Владелец = Проекты.Ссылка
		|			И НЕ Проекты.ПометкаУдаления
		|			И Проекты.Руководитель <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиВКонтейнерахБезФильтра.Контейнер КАК Контейнер,
		|	СотрудникиВКонтейнерахБезФильтра.Сотрудник КАК Сотрудник
		|ИЗ
		|	СотрудникиВКонтейнерахБезФильтра КАК СотрудникиВКонтейнерахБезФильтра
		|ГДЕ
		|	НЕ СотрудникиВКонтейнерахБезФильтра.Контейнер.ПометкаУдаления
		|	И НЕ СотрудникиВКонтейнерахБезФильтра.Сотрудник.ПометкаУдаления");
	
	Набор = РегистрыСведений.СотрудникиВКонтейнерах.СоздатьНаборЗаписей();
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Составы рабочих групп.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеГруппы.Ссылка КАК Группа,
		|	РабочиеГруппы.Родитель КАК Родитель,
		|	РабочиеГруппыСостав.Участник КАК Участник
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
		|		ПО РабочиеГруппы.Ссылка = РабочиеГруппыСостав.Ссылка
		|ГДЕ
		|	НЕ РабочиеГруппы.ПометкаУдаления
		|	И НЕ РабочиеГруппыСостав.Участник.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.РабочиеГруппы.ВсеПользователи),
		|	ЗНАЧЕНИЕ(Справочник.РабочиеГруппы.ПустаяСсылка),
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	НЕ Сотрудники.ПометкаУдаления");
	
	СоставыГрупп = Новый Соответствие;
	ПодчиненныеГруппы = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Состав = СоставыГрупп[Выборка.Группа];
		Если Состав = Неопределено Тогда
			Состав = Новый Массив;
			СоставыГрупп[Выборка.Группа] = Состав;
		КонецЕсли;
		Состав.Добавить(Выборка.Участник);
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			Подчиненные = ПодчиненныеГруппы[Выборка.Родитель];
			Если Подчиненные = Неопределено Тогда
				Подчиненные = Новый Массив;
				ПодчиненныеГруппы[Выборка.Родитель] = Подчиненные;
			КонецЕсли;
			Подчиненные.Добавить(Выборка.Группа);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление участников подчиненных групп.
	Для Каждого КлючИЗначение Из ПодчиненныеГруппы Цикл
		ТекущаяГруппа = КлючИЗначение.Ключ;
		ПодчиненныеКОбработке = КлючИЗначение.Значение;
		СоставТекущейГруппы = СоставыГрупп[ТекущаяГруппа];
		Если СоставТекущейГруппы = Неопределено Тогда
			СоставТекущейГруппы = Новый Массив;
			СоставыГрупп[ТекущаяГруппа] = СоставТекущейГруппы;
		КонецЕсли;
		Пока ПодчиненныеКОбработке.Количество() > 0 Цикл
			ТекущаяПодчиненная = ПодчиненныеКОбработке[0];
			СоставПодчиненной = СоставыГрупп[ТекущаяПодчиненная];
			Если СоставПодчиненной <> Неопределено Тогда
				Для Каждого УчастникПодчиненнойГруппы Из СоставПодчиненной Цикл
					СоставТекущейГруппы.Добавить(УчастникПодчиненнойГруппы);
				КонецЦикла;
			КонецЕсли;
			ПодчиненныеПодчиненной = ПодчиненныеГруппы[ТекущаяПодчиненная];
			Если ПодчиненныеПодчиненной <> Неопределено Тогда
				Для Каждого ПодчиненнаяПодчиненной Из ПодчиненныеПодчиненной Цикл
					ПодчиненныеКОбработке.Добавить(ПодчиненнаяПодчиненной);
				КонецЦикла;
			КонецЕсли;
			ПодчиненныеКОбработке.Удалить(0);
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаНабора = Набор.ВыгрузитьКолонки();
	Для Каждого КлючИЗначение Из СоставыГрупп Цикл
		ТекущаяГруппа = КлючИЗначение.Ключ;
		Состав = КлючИЗначение.Значение;
		Для Каждого Участник Из Состав Цикл
			Стр = ТаблицаНабора.Добавить();
			Стр.Контейнер = ТекущаяГруппа;
			Стр.Сотрудник = Участник;
		КонецЦикла;
	КонецЦикла;
	ТаблицаНабора.Свернуть("Контейнер, Сотрудник");
	Для Каждого Стр Из ТаблицаНабора Цикл
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Стр);
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

// Обновляет данные регистра по указанному контейнеру.
//
Процедура ОбновитьДанныеКонтейнера(Контейнер, ОбработанныеКонтейнеры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Контейнер) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Контейнер) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		ОбрабатываемыеКонтейнеры = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(Контейнер);
	ИначеЕсли ТипЗнч(Контейнер) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПроектыКонтейнеры.Ссылка КАК Контейнер
			|ИЗ
			|	Справочник.ПроектыКонтейнеры КАК ПроектыКонтейнеры
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты.ПроектнаяКоманда КАК ПроектыПроектнаяКоманда
			|		ПО ПроектыКонтейнеры.Владелец = ПроектыПроектнаяКоманда.Ссылка
			|ГДЕ
			|	ПроектыПроектнаяКоманда.Исполнитель = &Роль
			|	И ПроектыКонтейнеры.СпособВключенияУчастников = ЗНАЧЕНИЕ(Перечисление.СпособВключенияУчастниковПроекта.ВсеУчастники)");
		Запрос.УстановитьПараметр("Роль", Контейнер);
		ОбрабатываемыеКонтейнеры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	ИначеЕсли ТипЗнч(Контейнер) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПодчиненностьПодразделений.Вышестоящее КАК Контейнер
			|ИЗ
			|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
			|ГДЕ
			|	ПодчиненностьПодразделений.Подчиненное = &Подразделение
			|	И НЕ ПодчиненностьПодразделений.Вышестоящее.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПодразделенияКонтейнеры.Ссылка
			|ИЗ
			|	Справочник.ПодразделенияКонтейнеры КАК ПодразделенияКонтейнеры
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
			|		ПО ПодразделенияКонтейнеры.Владелец = ПодчиненностьПодразделений.Вышестоящее
			|ГДЕ
			|	ПодчиненностьПодразделений.Подчиненное = &Подразделение
			|	И НЕ ПодразделенияКонтейнеры.ПометкаУдаления
			|	И (ПодразделенияКонтейнеры.СпособВключенияПодчиненных = ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.СПодчиненными)
			|			ИЛИ ПодчиненностьПодразделений.Вышестоящее = ПодчиненностьПодразделений.Подчиненное
			|				И ПодразделенияКонтейнеры.СпособВключенияПодчиненных = ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.БезПодчиненных))");
		Запрос.УстановитьПараметр("Подразделение", Контейнер);
		ОбрабатываемыеКонтейнеры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Иначе
		ОбрабатываемыеКонтейнеры = Новый Массив;
	КонецЕсли;
	ОбрабатываемыеКонтейнеры.Вставить(0, Контейнер);
	
	Для Каждого ОбрабатываемыйКонтейнер Из ОбрабатываемыеКонтейнеры Цикл
		Если ОбработанныеКонтейнеры <> Неопределено
			И ОбработанныеКонтейнеры.Найти(ОбрабатываемыйКонтейнер) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СоставКонтейнера = СоставКонтейнераПоДаннымПервоисточника(ОбрабатываемыйКонтейнер);
		ЗаписатьСоставСотрудников(ОбрабатываемыйКонтейнер, СоставКонтейнера);
		Если ОбработанныеКонтейнеры <> Неопределено Тогда
			ОбработанныеКонтейнеры.Добавить(ОбрабатываемыйКонтейнер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные регистра по указанным контейнерам.
//
Процедура ОбновитьДанныеКонтейнеров(Контейнеры, ОбработанныеКонтейнеры = Неопределено) Экспорт
	
	Если ОбработанныеКонтейнеры = Неопределено Тогда
		ОбработанныеКонтейнеры = Новый Массив;
	КонецЕсли;
	
	Для Каждого Контейнер Из Контейнеры Цикл
		ОбновитьДанныеКонтейнера(Контейнер, ОбработанныеКонтейнеры);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив сотрудников контейнера.
// 
// Параметры:
//  Контейнер - ОпределяемыйТип.КонтейнерыСотрудников - контейнер, чей состав нужно получить.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Сотрудники - массив сотрудников.
// 
Функция СотрудникиВКонтейнере(Контейнер) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиВКонтейнерах.Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|ГДЕ
		|	СотрудникиВКонтейнерах.Контейнер = &Контейнер");
		
	Запрос.УстановитьПараметр("Контейнер", Контейнер);
	Состав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Возврат Состав;
	
КонецФункции

// Возвращает списки сотрудников указанных контейнеров.
// 
// Параметры:
//  Контейнеры - Массив Из ОпределяемыйТип.КонтейнерыСотрудников - контейнеры, составы которых нужно получить.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.КонтейнерыСотрудников - Контейнер.
//   * Значение - Массив Из СправочникСсылка.Сотрудники - массив сотрудников. Если нет сотрудников, то пустой массив.
// 
Функция СотрудникиВКонтейнерах(Контейнеры) Экспорт
	
	СоставыКонтейнеров = Новый Соответствие;
	
	Если Контейнеры.Количество() = 0 Тогда
		Возврат СоставыКонтейнеров;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиВКонтейнерах.Контейнер КАК Контейнер,
		|	СотрудникиВКонтейнерах.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|ГДЕ
		|	СотрудникиВКонтейнерах.Контейнер В(&Контейнеры)
		|ИТОГИ ПО
		|	Контейнер");
	Запрос.УстановитьПараметр("Контейнеры", Контейнеры);
	ВыборкаКонтейнер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтейнер.Следующий() Цикл
		Состав = Новый Массив;
		Выборка = ВыборкаКонтейнер.Выбрать();
		Пока Выборка.Следующий() Цикл
			Состав.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		СоставыКонтейнеров[ВыборкаКонтейнер.Контейнер] = Состав;
	КонецЦикла;
	
	Для Каждого Контейнер Из Контейнеры Цикл
		Если СоставыКонтейнеров[Контейнер] = Неопределено Тогда
			СоставыКонтейнеров[Контейнер] = Новый Массив;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоставыКонтейнеров;
	
КонецФункции

// Получает контейнеры указанных сотрудников, ограничивая их, если необходимо.
//
// Параметры:
//   Сотрудник - СправочникСсылка.Сотрудники, Массив - сотрудники, чьи контейнеры нужно получить.
//   ОграничениеТипа - ОписаниеТипов - типы, которыми следует ограничиться.
//
// Возвращаемое значение:
//  Массив - контейнеры указанных сотрудников.
//
Функция КонтейнерыСотрудников(Сотрудники, ОграничениеТипа = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Состав.Контейнер КАК Контейнер
		|ИЗ
		|	РегистрСведений.СотрудникиВКонтейнерах КАК Состав
		|ГДЕ
		|	Состав.Сотрудник В (&Сотрудники)
		|	И &Условие");
		
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Если ОграничениеТипа = Неопределено Тогда
		Условие = "ИСТИНА"
	Иначе
		Условие = "ТИПЗНАЧЕНИЯ(Состав.Контейнер) В (&Типы)";
		Запрос.УстановитьПараметр("Типы", ОграничениеТипа.Типы());
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", Условие);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контейнер");
	
КонецФункции

// Записывает состав сотрудников контейнера, дополняя список измененных контейнеров при необходимости.
//
// Параметры:
//   Контейнер - ОпределяемыйТип.КонтейнерыСотрудников - записываемый контейнер.
//   СоставСотрудников - Массив - состав контейнера.
//   ИзмененныеКонтейнеры - Массив - необязательный, дополняется измененными контейнерами.
//
Процедура ЗаписатьСоставСотрудников(Контейнер, СоставСотрудников, ИзмененныеКонтейнеры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СотрудникиВКонтейнерах.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контейнер.Установить(Контейнер);
	
	НаборЗаписей.Прочитать();
	
	СтарыйСостав = НаборЗаписей.ВыгрузитьКолонку("Сотрудник");
	
	Если ОбщегоНазначения.КоллекцииИдентичны(СтарыйСостав, СоставСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	УдаленныеСотрудники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СтарыйСостав, СоставСотрудников);
	ДобавленныеСотрудники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СоставСотрудников, СтарыйСостав);
	НаборЗаписей.ДополнительныеСвойства.Вставить("УдаленныеСотрудники", УдаленныеСотрудники);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ДобавленныеСотрудники", ДобавленныеСотрудники);
	
	НаборЗаписей.Очистить();
	
	Для Каждого Сотрудник Из СоставСотрудников Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Контейнер = Контейнер;
		Запись.Сотрудник = Сотрудник;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	Если ИзмененныеКонтейнеры <> Неопределено Тогда
		ИзмененныеКонтейнеры.Вставить(Контейнер);
	КонецЕсли;
	
КонецПроцедуры

// Записывает состав контейнеров сотрудника.
//
// Параметры:
//   Сотрудник - СправочникСсылка.Сотрудники - сотрудник, состав контейнеров которого обновляется.
//   КонтейнерыСотрудника - Массив объектов типа ОпределяемыйТип.КонтейнерыСотрудников - записываемые контейнеры.
//
Процедура ЗаписатьКонтейнерыСотрудника(Сотрудник, КонтейнерыСотрудника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвернутыеКонтейнеры = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвернутыеКонтейнеры, КонтейнерыСотрудника, Истина);
	
	НаборЗаписей = РегистрыСведений.СотрудникиВКонтейнерах.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	
	НаборЗаписей.Прочитать();
	
	СтарыеКонтейнеры = НаборЗаписей.ВыгрузитьКолонку("Контейнер");
	
	Если ОбщегоНазначения.КоллекцииИдентичны(СтарыеКонтейнеры, СвернутыеКонтейнеры) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей.Очистить();
	
	Для Каждого Контейнер Из СвернутыеКонтейнеры Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Контейнер = Контейнер;
		Запись.Сотрудник = Сотрудник;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получает состав контейнера сотрудников.
// 
// Параметры:
//   Контейнер - ОпределяемыйТип.КонтейнерыСотрудников.
//
// Возвращаемое значение:
//   Массив элементов СправочникСсылка.Сотрудники.
//
Функция СоставКонтейнераПоДаннымПервоисточника(Контейнер) Экспорт
	
	Если Не Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип.СодержитТип(ТипЗнч(Контейнер)) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недопустимый тип %1 контейнера %2'"),
			ТипЗнч(Контейнер),
			Контейнер);
	КонецЕсли;
	
	Менеджер = Справочники[Контейнер.Метаданные().Имя];
	Возврат Менеджер.СоставКонтейнераСотрудников(Контейнер);
	
КонецФункции

// Проверяет, является ли переданная ссылка контейнером сотрудников.
// 
// Параметры:
//   Ссылка - Произвольный - проверяемая ссылка.
//
// Возвращаемое значение:
//   Булево - Истина, если переданная ссылка является контейнером.
//
Функция ЭтоКонтейнер(Ссылка) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип.СодержитТип(ТипЗнч(Ссылка));
	
КонецФункции

#КонецОбласти

#КонецЕсли
