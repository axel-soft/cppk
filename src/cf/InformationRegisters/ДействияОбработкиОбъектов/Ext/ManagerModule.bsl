
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет связь между действием и обработкой документа.
//
// Параметры:
//  Обработка - СправочникСсылка.ОбработкиОбъектов - ссылка на обработку.
//  Действие - ОпределяемыйТип.Действия - ссылка на действие.
//  НастройкаОбработки - СправочникСсылка.НастройкиОбработкиВидовОбъектов - ссылка на настройку, по которой создано действие.
//
Процедура ДобавитьДействиеВОбработку(Обработка, Действие, НастройкаОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.Обработка = Обработка;
	Запись.Действие = Действие;
	Запись.НастройкаОбработки = НастройкаОбработки;
	Запись.Записать();
	
КонецПроцедуры

// Обновляет настройку обработку в связи между действием и обработкой документа, если отличается.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - ссылка на действие.
//  НастройкаОбработки - СправочникСсылка.НастройкиОбработкиВидовОбъектов - ссылка на настройку, по которой создано действие.
//
Процедура ОбновитьНастройкуОбработкиДействия(Действие, НастройкаОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.Действие = Действие;
	Запись.Прочитать();
	Если Запись.Выбран() И НастройкаОбработки <> Запись.НастройкаОбработки Тогда
		Запись.НастройкаОбработки = НастройкаОбработки;
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Удаляет связь между действием и обработкой документа.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - ссылка на действие.
//
Процедура ИсключитьДействиеИзОбработки(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано действие, которое необходимо исключить из обработки'");
	КонецЕсли;
	
	Набор = РегистрыСведений.ДействияОбработкиОбъектов.СоздатьНаборЗаписей();
	Набор.Отбор.Действие.Установить(Действие);
	Набор.Прочитать();
	
	Если Набор.Количество() Тогда
		Набор.Очистить();
		Набор.Записать();
	КонецЕсли;
		
КонецПроцедуры

// Возвращает все действия обарботки.
//
// Параметры:
//  Обработка - СправочникСсылка.ОбработкиДокументов - ссылка на обработку.
//
// Возвращаемое значение:
//  Массив
//   * ОпределяемыйТип.Действия
//
Функция ДействияОбработки(Обработка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияОбработкиОбъектов.Действие КАК Действие
		|ИЗ
		|	РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
		|ГДЕ
		|	ДействияОбработкиОбъектов.Обработка = &Обработка";
	Запрос.УстановитьПараметр("Обработка", Обработка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Действие");
	
КонецФункции

// Возвращает обработку документов, к которой относится действие.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//
// Возвращаемое значение:
//  СправочникСсылка.ОбработкиДокументов, Неопределено
//
Функция ОбработкаДействия(Действие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияОбработкиОбъектов.Обработка КАК Обработка
		|ИЗ
		|	РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
		|ГДЕ
		|	ДействияОбработкиОбъектов.Действие = &Действие";
		
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Обработка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает обработки документов, к которым относятся действия.
//
// Параметры:
//  Действия - Массив из ОпределяемыйТип.Действия.
//
// Возвращаемое значение:
//  СправочникСсылка.ОбработкиДокументов, Неопределено
//
Функция ОбработкиДействий(Действия) Экспорт
	
	ОбработкиДействий = Новый Соответствие;
	Если Действия.Количество() = 0 Тогда
		Возврат ОбработкиДействий;
	КонецЕсли;
	
	Для Каждого Действие Из Действия Цикл
		
		ОбработкиДействий[Действие] = Неопределено;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействияОбработкиОбъектов.Действие КАК Действие,
		|	ДействияОбработкиОбъектов.Обработка КАК Обработка
		|ИЗ
		|	РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
		|ГДЕ
		|	ДействияОбработкиОбъектов.Действие В (&Действия)");

	Запрос.УстановитьПараметр("Действия", Действия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбработкиДействий[Выборка.Действие] = Выборка.Обработка;
		
	КонецЦикла;
	
	Возврат ОбработкиДействий;
	
КонецФункции

// Возвращает любую обработку объектов, созданную по настройке вида объекта.
//
// Параметры:
//  НастройкаОбработки - СправочникСсылка.НастройкиОбработкиВидовОбъектов - ссылка на настройку.
//  ТолькоАктивные - Булево - если Истина, то только активную обработку.
//
// Возвращаемое значение:
//  ОбработкаОбъекта - СправочникСсылка.ОбработкиДокументов - ссылка на активную обработку по настройке
//
Функция ОбработкаПоНастройке(НастройкаОбработки, ТолькоАктивные = Ложь) Экспорт
	
	ОбработкаОбъекта = Справочники.НастройкиОбработкиВидовОбъектов.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(НастройкаОбработки) Тогда
		Возврат ОбработкаОбъекта;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
		|	ДействияОбработкиОбъектов.Обработка КАК Обработка
		|ИЗ
		|	РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбработкиОбъектов КАК ОбработкиОбъектов
		|		ПО ОбработкиОбъектов.Ссылка = ДействияОбработкиОбъектов.Обработка
		|ГДЕ
		|	ДействияОбработкиОбъектов.НастройкаОбработки = &НастройкаОбработки
		|	И НЕ ОбработкиОбъектов.ПометкаУдаления
		|	И НЕ ОбработкиОбъектов.ПомещенаВИсторию
		|	И ОбработкиОбъектов.Состояние В (&Состояния)");
	
	Состояния = Новый Массив; 
	Состояния.Добавить(Перечисления.СостоянияОбработкиОбъектов.Выполняется);
	Если Не ТолькоАктивные Тогда
		Состояния.Добавить(Перечисления.СостоянияОбработкиОбъектов.Завершена);
	КонецЕсли;

	Запрос.УстановитьПараметр("НастройкаОбработки", НастройкаОбработки);
	Запрос.УстановитьПараметр("Состояния", Состояния);
	
	// Тут важно наличие любой
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбработкаОбъекта = Выборка.Обработка;
	КонецЦикла;
	
	Возврат ОбработкаОбъекта;
	
КонецФункции

// Возвращает все действия обработки вместе с их состояниями и участниками.
// Отбирает данные по состоянию
//
// Параметры:
//  Обработка - СправочникСсылка.ОбработкиДокументов - ссылка на обработку.
//  Состояние - ПеречислениеСсылка.СостоянияВыполненияДействий - ссылка на состояние
//
// Возвращаемое значение:
//  Массив
//   * ОпределяемыйТип.Действия
//
Функция ДействияОбработкиССостояниями(Обработка, Состояние = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияОбработкиОбъектов.Действие КАК Действие
		|ПОМЕСТИТЬ ВсеДействия
		|ИЗ
		|	РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
		|ГДЕ
		|	ДействияОбработкиОбъектов.Обработка = &Обработка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеДействия.Действие,
		|	СостоянияДействий.Состояние,
		|	СостоянияДействий.ИдентификаторПункта,
		|	СостоянияДействий.ИдентификаторУчастника,
		|	СостоянияДействий.Функция,
		|	СостоянияДействий.Участник
		|ИЗ
		|	ВсеДействия КАК ВсеДействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ПО ВсеДействия.Действие = СостоянияДействий.Действие";
		
	Запрос.УстановитьПараметр("Обработка", Обработка);	
	
	Если ЗначениеЗаполнено(Состояние) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	СостоянияДействий.Состояние = &Состояние";
		Запрос.Параметры.Вставить("Состояние", Состояние);
	КонецЕсли;
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецЕсли