#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// Заполнение представлений фактического исполнителя и ПЭП
//
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ЗаполнитьНовыеПредставления(Параметры) Экспорт 
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(УчастникиОзнакомлений.ИдентификаторУчастника) КАК Количество
			|ИЗ
			|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
			|ГДЕ
			|	УчастникиОзнакомлений.ФактическийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ФактическиеИсполнители.ПустаяСсылка)
			|	И УчастникиОзнакомлений.ПредставлениеФактическогоИсполнителя = """"");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	УчастникиОзнакомлений.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.ФактическийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ФактическиеИсполнители.ПустаяСсылка)
		|	И УчастникиОзнакомлений.ПредставлениеФактическогоИсполнителя = """"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(Выборка.ИдентификаторУчастника);
			НаборЗаписей.Прочитать(); 
			ДействияСервер.ЗаполнитьПредставленияВНабореЗаписейУчастников(НаборЗаписей);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре УчастникиОзнакомлений.ЗаполнитьНовыеПредставления не удалось обновить некоторые объекты (пропущены): %1'"),
				ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

#КонецОбласти

// Определяет идентификаторы участников по действию.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//
// Возвращаемое значение:
//  Массив из УникальныйИдентификатор - Идентификаторы участников по действию.
//
Функция ИдентификаторыУчастников(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияПоказателей = Новый Соответствие;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УчастникиОзнакомлений.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие");
	
	Запрос.УстановитьПараметр("Действие", Действие);
	
	ИдентификаторыУчастников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторУчастника");
	
	Возврат ИдентификаторыУчастников;
	
КонецФункции

// Определяет данные ознакомления в целом.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
// 
// Возвращаемое значение:
//  Структура - Данные ознакомления в целом.
//   * ДатаНачала - Дата. 
//   * ДатаЗавершения - Дата.
//   * Срок - Дата.
//   * Состояние - ПеречислениеСсылка.СостоянияОзнакомления.
//
Функция ДанныеОзнакомлений(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УчастникиОзнакомлений.Действие КАК Действие,
		|	УчастникиОзнакомлений.Состояние КАК Состояние,
		|	МИНИМУМ(УчастникиОзнакомлений.ДатаНачала) КАК ОбщаяДатаНачала,
		|	МАКСИМУМ(УчастникиОзнакомлений.ДатаЗавершения) КАК ДатаЗавершенияМаксимум,
		|	МИНИМУМ(УчастникиОзнакомлений.ДатаЗавершения) КАК ДатаЗавершенияМинимум,
		|	МАКСИМУМ(УчастникиОзнакомлений.Срок) КАК ОбщийСрок
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие
		|
		|СГРУППИРОВАТЬ ПО
		|	УчастникиОзнакомлений.Действие,
		|	УчастникиОзнакомлений.Состояние");
	
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбщаяДатаНачала = Неопределено;
	ОбщаяДатаЗавершения = Неопределено;
	ОбщийСрок = Неопределено;
	ОбщееСостояние = Неопределено;
	Пока Выборка.Следующий() Цикл
		
		ОбщаяДатаНачала = ?(ОбщаяДатаНачала = Неопределено,
			Выборка.ОбщаяДатаНачала,
			Мин(ОбщаяДатаНачала, Выборка.ОбщаяДатаНачала));
		
		Если Выборка.ДатаЗавершенияМинимум =  Дата(1, 1, 1) Или ОбщаяДатаЗавершения = Дата(1, 1, 1) Тогда
			ОбщаяДатаЗавершения = Дата(1, 1, 1);
		Иначе
			ОбщаяДатаЗавершения = ?(ОбщаяДатаЗавершения = Неопределено,
				Выборка.ДатаЗавершенияМаксимум,
				Мин(ОбщаяДатаЗавершения, Выборка.ДатаЗавершенияМаксимум));
		КонецЕсли;
		
		ОбщийСрок = ?(ОбщийСрок = Неопределено,
			Выборка.ОбщийСрок,
			Мин(ОбщийСрок, Выборка.ОбщийСрок));
		
		Если ОбщееСостояние = Неопределено Тогда
			
			ОбщееСостояние = Выборка.Состояние;
			
		Иначе
			
			Если Выборка.Состояние = Перечисления.СостоянияОзнакомления.Отменено Тогда
				
				ОбщееСостояние = Перечисления.СостоянияОзнакомления.Отменено;
				
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении
				И ОбщееСостояние <> Перечисления.СостоянияОзнакомления.Отменено Тогда
				
				ОбщееСостояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении;
				
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОзнакомления.ВРаботе
				И ОбщееСостояние <> Перечисления.СостоянияОзнакомления.Отменено
				И ОбщееСостояние <> Перечисления.СостоянияОзнакомления.НаОзнакомлении Тогда
				
				ОбщееСостояние = Перечисления.СостоянияОзнакомления.ВРаботе;
				
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился
				И ОбщееСостояние <> Перечисления.СостоянияОзнакомления.Отменено
				И ОбщееСостояние <> Перечисления.СостоянияОзнакомления.НаОзнакомлении
				И ОбщееСостояние <> Перечисления.СостоянияОзнакомления.ВРаботе Тогда
				
				ОбщееСостояние = Перечисления.СостоянияОзнакомления.Ознакомился;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеОзнакомлений = Новый Структура;
	ДанныеОзнакомлений.Вставить("ДатаНачала", ?(ОбщаяДатаНачала <> Неопределено,
		ОбщаяДатаНачала,
		Дата(1, 1, 1)));
	ДанныеОзнакомлений.Вставить("ДатаЗавершения", ?(ОбщаяДатаЗавершения <> Неопределено,
		ОбщаяДатаЗавершения,
		Дата(1, 1, 1)));
	ДанныеОзнакомлений.Вставить("Срок", ?(ОбщийСрок <> Неопределено,
		ОбщийСрок,
		Дата(1, 1, 1)));
	ДанныеОзнакомлений.Вставить("Состояние", ?(ОбщееСостояние <> Неопределено,
		ОбщееСостояние,
		Перечисления.СостоянияОзнакомления.ПустаяСсылка()));
	
	Возврат ДанныеОзнакомлений;
	
КонецФункции

// Определяет данные ознакомления для участника.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  ИдентификаторУчастника - УникальныйИдентификатор.
// 
// Возвращаемое значение:
//  Структура, Неопределено - Данные ознакомления для участника.
//   * ДатаНачала - Дата. 
//   * ДатаЗавершения - Дата.
//   * Срок - Дата.
//   * Состояние - ПеречислениеСсылка.СостоянияОзнакомления.
//   * Участник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли.
//   * ИдентификаторУчастника - УникальныйИдентификатор.
//   * РезультатОзнакомленияТекстом - Строка.
//   * ФактическийИсполнитель - СправочникСсылка.ФактическиеИсполнители.
//
Функция ДанныеОзнакомления(Действие, ИдентификаторУчастника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УчастникиОзнакомлений.ДатаНачала КАК ДатаНачала,
		|	УчастникиОзнакомлений.ДатаЗавершения КАК ДатаЗавершения,
		|	УчастникиОзнакомлений.Срок КАК Срок,
		|	УчастникиОзнакомлений.Состояние КАК Состояние,
		|	УчастникиОзнакомлений.Участник КАК Участник,
		|	УчастникиОзнакомлений.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	УчастникиОзнакомлений.РезультатОзнакомленияТекстом КАК РезультатОзнакомленияТекстом,
		|	УчастникиОзнакомлений.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	УчастникиОзнакомлений.Описание КАК Описание
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие
		|	И УчастникиОзнакомлений.ИдентификаторУчастника = &ИдентификаторУчастника");
	
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдентификаторУчастника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДанныеОзнакомления = Новый Структура;
		ДанныеОзнакомления.Вставить("ДатаНачала", Выборка.ДатаНачала);
		ДанныеОзнакомления.Вставить("ДатаЗавершения", Выборка.ДатаЗавершения);
		ДанныеОзнакомления.Вставить("Срок", Выборка.Срок);
		ДанныеОзнакомления.Вставить("Состояние", Выборка.Состояние);
		ДанныеОзнакомления.Вставить("Участник", Выборка.Участник);
		ДанныеОзнакомления.Вставить("ИдентификаторУчастника", Выборка.ИдентификаторУчастника);
		ДанныеОзнакомления.Вставить("РезультатОзнакомленияТекстом", Выборка.РезультатОзнакомленияТекстом);
		ДанныеОзнакомления.Вставить("ФактическийИсполнитель", Выборка.ФактическийИсполнитель);
		ДанныеОзнакомления.Вставить("Описание", Выборка.Описание);
		
	Иначе
		
		ДанныеОзнакомления = Неопределено;
		
	КонецЕсли;
	
	Возврат ДанныеОзнакомления;
	
КонецФункции

// Берёт ознакомление в работу.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  ИдентификаторУчастника - УникальныйИдентификатор.
//  КтоОтметил - СправочникСсылка.Сотрудники.
//
Процедура ВзятьВРаботу(Действие, ИдентификаторУчастника, КтоОтметил) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УчастникиОзнакомлений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", ИдентификаторУчастника);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Действие.Установить(Действие);
		НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно взять в работу ознакомление, т.к. отсутствуют данные %1 (%2) - %3.'"),
				Действие,
				ТипЗнч(Действие),
				ИдентификаторУчастника);
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.Состояние = Перечисления.СостоянияОзнакомления.ВРаботе;
			Запись.Исполнитель = ?(ТипЗнч(Запись.Участник) = Тип("СправочникСсылка.ПолныеРоли"),
						Сотрудники.ОсновнойСотрудник(),
						Запись.Участник);
			
			Запись.ФактическийИсполнитель =
				Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
					Запись.Участник,
					Запись.Исполнитель,
					Справочники.Сотрудники.ПустаяСсылка(),
					КтоОтметил);
			
			РаботаСВнешнимПодписанием.ОбработатьВзятиеЗадачиВРаботу(Действие, Запись.Исполнитель, Запись.Участник, Ложь);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Отменяет взятие ознакомления в работу.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  ИдентификаторУчастника - УникальныйИдентификатор.
//  КтоОтметил - СправочникСсылка.Сотрудники.
//
Процедура ОтменитьВзятиеВРаботу(Действие, ИдентификаторУчастника, КтоОтметил) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УчастникиОзнакомлений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", ИдентификаторУчастника);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Действие.Установить(Действие);
		НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно отменить взятие в работу ознакомления, т.к. отсутствуют данные %1 (%2) - %3.'"),
				Действие,
				ТипЗнч(Действие),
				ИдентификаторУчастника);
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.Состояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении;
			
			СтарыйИсполнитель = Запись.Исполнитель;
			
			Запись.Исполнитель = ?(ТипЗнч(Запись.Участник) = Тип("СправочникСсылка.ПолныеРоли"),
						Справочники.Сотрудники.ПустаяСсылка(),
						Запись.Участник);
			
			Запись.ФактическийИсполнитель =
				Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
					Запись.Участник,
					Запись.Исполнитель,
					Справочники.Сотрудники.ПустаяСсылка(),
					КтоОтметил);
			
			РаботаСВнешнимПодписанием.ОбработатьВзятиеЗадачиВРаботу(Действие, СтарыйИсполнитель, Запись.Участник, Истина);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Записывать комментария к ознакомлению.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  ИдентификаторУчастника - УникальныйИдентификатор.
//  РезультатОзнакомленияТекстом - Строка.
//
Процедура ЗаписатьКомментарий(Действие, ИдентификаторУчастника, РезультатОзнакомленияТекстом) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УчастникиОзнакомлений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", ИдентификаторУчастника);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Действие.Установить(Действие);
		НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно записать комментарий, т.к. отсутствуют данные %1 (%2) - %3.'"),
				Действие,
				ТипЗнч(Действие),
				ИдентификаторУчастника);
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.РезультатОзнакомленияТекстом = РезультатОзнакомленияТекстом;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Отмечает ознакомление участником.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  ИдентификаторУчастника - УникальныйИдентификатор.
//  ФактическийИсполнитель - СправочникСсылка.ФактическиеИсполнители.
//  РезультатОзнакомленияТекстом = Строка, Неопределено
// 
// Возвращаемое значение:
//  Булево - Действие выполнено целиком.
//
Функция Ознакомиться(Действие, ИдентификаторУчастника, ФактическийИсполнитель, РезультатОзнакомленияТекстом = Неопределено) Экспорт
	
	ИзмененоСостояние = Ложь;

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УчастникиОзнакомлений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", ИдентификаторУчастника);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Действие.Установить(Действие);
		НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно ознакомиться, т.к. отсутствуют данные %1 (%2) - %3.'"),
				Действие,
				ТипЗнч(Действие),
				ИдентификаторУчастника);
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.Состояние <> Перечисления.СостоянияОзнакомления.Ознакомился Тогда
				Запись.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился;   
				ИзмененоСостояние = Истина;
			КонецЕсли;
			
			Запись.ФактическийИсполнитель = ФактическийИсполнитель;
			
			Если ЗначениеЗаполнено(ФактическийИсполнитель) Тогда
				Запись.Исполнитель = ФактическийИсполнитель.Факт;   
			КонецЕсли;
			
			Запись.ДатаЗавершения = ТекущаяДатаСеанса();
			
			Если ЗначениеЗаполнено(РезультатОзнакомленияТекстом) Тогда
				Запись.РезультатОзнакомленияТекстом = РезультатОзнакомленияТекстом;
			КонецЕсли;	
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ИтоговоеСостояниеУчастников = ИтоговоеСостояниеУчастников(Запись.ИдентификаторУчастникаДействия);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ДействиеВыполнено = 
		(ИтоговоеСостояниеУчастников = Перечисления.СостоянияВыполненияДействий.Завершено);
		
	Если ИзмененоСостояние И ДействиеВыполнено Тогда
		
		ДействиеВыполнено = ОбновитьДействиеЦеликом(Действие, ДействиеВыполнено);
			
	КонецЕсли;	
	
	Возврат ДействиеВыполнено;
	
КонецФункции

// Отмечает выполнение действия в целом - если все участники выполнили
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  ДействиеВыполнено - Булево.
// 
// Возвращаемое значение:
//  Булево - Действие выполнено
//
Функция ОбновитьДействиеЦеликом(Действие, ДействиеВыполнено) Экспорт

	Если ОбработкаОчередиЗаданийСервер.ОбновитьДействиеОзнакомленияЦеликомЕслиНужно(
		Действие) Тогда
		
		Возврат ДействиеВыполнено;
	КонецЕсли;
	
	ОбновитьДействиеЦеликомРеализация(Действие, ДействиеВыполнено);
	
	Возврат ДействиеВыполнено;
	
КонецФункции	

// Отмечает выполнение действия в целом - если все участники выполнили
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  ДействиеВыполнено - Булево.
// 
// Возвращаемое значение:
//  Булево - Действие выполнено
//
Функция ОбновитьДействиеЦеликомРеализация(Действие, ДействиеВыполнено) Экспорт
	
	ИтоговоеСостояниеПолное = ИтоговоеСостояниеУчастниковДействия(Действие);
	ДействиеВыполненоПолное = 
		(ИтоговоеСостояниеПолное = Перечисления.СостоянияВыполненияДействий.Завершено);
		
	Если ДействиеВыполненоПолное Тогда	
			
		ОжидатьЗавершения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ОжидатьЗавершения");
		Если ОжидатьЗавершения Тогда      
			
			Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
			Если Состояние = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
				Возврат ДействиеВыполнено;
			КонецЕсли;
			
			Если ОбработкаОчередиЗаданийСервер.ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(
				Действие) Тогда
				
				Возврат ДействиеВыполнено;
			КонецЕсли;
			
			// это файловый вариант.
			РаботаСПроцессамиПоОбработкамОбъектов.ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(Действие);
			
			Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
			Если Состояние = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
				
				Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
				Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
					Делопроизводство.ЗаписатьСостояниеДокумента(
						Предмет,
						,
						Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено,
						,
						Действие, 
						Истина);
						
				ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
						
					Период = ТекущаяДатаСеанса();	
					
					УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
						Предмет,
						Период,
						Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились,
						Действие);
					
				КонецЕсли;
				
				ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
				Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
				Событие.Обработка = ОбработкаДействия;
				Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ЗавершениеДействия;
				Событие.Действие = Действие;
				РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
				
			КонецЕсли;
			
		Иначе  // ОжидатьЗавершения Ложь	
			
			// обновим дату состояния.
			РегистрыСведений.СостоянияДействий.ОбновитьДату(Действие);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ДействиеВыполнено;
	
КонецФункции	

// Отмечает перенаправление участником.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  ИдентификаторУчастника - УникальныйИдентификатор.
//  Кому - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли.
//
Процедура Перенаправить(Действие, ИдентификаторУчастника, Кому) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УчастникиОзнакомлений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", ИдентификаторУчастника);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Действие.Установить(Действие);
		НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно перенаправить, т.к. отсутствуют данные %1 (%2) - %3.'"),
				Действие,
				ТипЗнч(Действие),
				ИдентификаторУчастника);
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.Состояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении;
			Запись.ФактическийИсполнитель = Справочники.ФактическиеИсполнители.ПустаяСсылка();
			Запись.РезультатОзнакомленияТекстом = "";
			Запись.ДатаЗавершения = Дата(1, 1, 1);
			Запись.Участник = Кому;         
			Запись.Исполнитель = Кому;         
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Отмечает перенос срока автором.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  ИдентификаторУчастника - УникальныйИдентификатор.
//  Срок - Дата.
//
Процедура ПеренестиСрок(Действие, ИдентификаторУчастника, Срок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УчастникиОзнакомлений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", ИдентификаторУчастника);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Действие.Установить(Действие);
		НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно перенаправить, т.к. отсутствуют данные %1 (%2) - %3.'"),
				Действие,
				ТипЗнч(Действие),
				ИдентификаторУчастника);
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.Срок = Срок;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Ставит новое состояние
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  ИдентификаторУчастника - УникальныйИдентификатор.
//  СтароеСостояние - ПеречислениеСсылка.СостоянияОзнакомления
//  НовоеСостояние - ПеречислениеСсылка.СостоянияОзнакомления
//
Процедура УстановитьСостояние(Действие, ИдентификаторУчастника, СтароеСостояние, НовоеСостояние) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УчастникиОзнакомлений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", ИдентификаторУчастника);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Действие.Установить(Действие);
		НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(ИдентификаторУчастника);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно сменить состояние, т.к. отсутствуют данные %1 (%2) - %3.'"),
				Действие,
				ТипЗнч(Действие),
				ИдентификаторУчастника);
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.Состояние = СтароеСостояние Тогда
				Запись.Состояние = НовоеСостояние;           
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Ставит новое состояние
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  НовоеСостояние - ПеречислениеСсылка.СостоянияОзнакомления
//
Процедура УстановитьВсемСостояние(Действие, НовоеСостояние) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);           
	
	Если НовоеСостояние = Перечисления.СостоянияОзнакомления.Отменено Тогда
		УдалитьВсеЗаписи(Действие);
		Возврат;
	КонецЕсли;	
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УчастникиОзнакомлений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Действие.Установить(Действие);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно сменить состояние, т.к. отсутствуют данные %1 (%2).'"),
				Действие,
				ТипЗнч(Действие));
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.Состояние = НовоеСостояние;           
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Возвращает массив участников действия ознакомления
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления - Действие
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Участники действия
Функция УчастникиДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УчастникиОзнакомлений.Участник
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие");
	
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Участники = Запрос.Выполнить().Выгрузить();
	
	Возврат Участники;
	
КонецФункции

// Возвращает массив участников, их сроки, состояние -  действия ознакомления
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления - Действие
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Участники действия
Функция УчастникиИДатыДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УчастникиОзнакомлений.Участник КАК Участник,
		|	УчастникиОзнакомлений.Состояние КАК Состояние,
		|	УчастникиОзнакомлений.Срок КАК Срок,
		|	УчастникиОзнакомлений.РезультатОзнакомленияТекстом КАК РезультатОзнакомленияТекстом,
		|	УчастникиОзнакомлений.ДатаЗавершения КАК ДатаЗавершения,
		|	УчастникиОзнакомлений.ДатаНачала КАК ДатаНачала,
		|	УчастникиОзнакомлений.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	УчастникиОзнакомлений.Участник.Представление КАК УчастникПредставление,
		|	УчастникиОзнакомлений.ИдентификаторУчастникаДействия КАК ИдентификаторУчастникаДействия,
		|	УчастникиОзнакомлений.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	УчастникиОзнакомлений.ПредставлениеФактическогоИсполнителя КАК ПредставлениеФактическогоИсполнителя,
		|	УчастникиОзнакомлений.ПредставлениеСотрудникаДляПЭП КАК ПредставлениеСотрудникаДляПЭП
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие
		|
		|УПОРЯДОЧИТЬ ПО
		|	УчастникПредставление");
	
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Участники = Запрос.Выполнить().Выгрузить();
	
	Возврат Участники;
	
КонецФункции

// Возвращает есть ли кто то в РС УчастникиОзнакомлений 
// 
// Параметры:
//  ДействияОзнакомления - Массви из СправочникСсылка.ДействияОзнакомления
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДействияОзнакомленияЗапущенные(ДействияОзнакомления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчастникиОзнакомлений.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие В (&ДействияОзнакомления)");
	
	Запрос.УстановитьПараметр("ДействияОзнакомления", ДействияОзнакомления);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции	

// Возвращает есть ли кто то в РС УчастникиОзнакомлений 
// 
// Параметры:
//  ДействияОзнакомления - СправочникСсылка.ДействияОзнакомления
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДействиеОзнакомления(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчастникиОзнакомлений.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие");
	
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции	

// Получает скольков всего участнкиов, и сколько выполнило
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//        
// 
// Возвращаемое значение:
//  Структура (ВсегоЗаписей, ВсегоЗавершено)
//
Функция СуммарноеКоличествоУчастниковДействия(Действие) Экспорт
	
	СтруктураВозврата = Новый Структура("ВсегоЗаписей, ВсегоЗавершено", 0, 0);

	УстановитьПривилегированныйРежим(Истина);
	ИтоговоеСостояниеУчастников = Перечисления.СостоянияВыполненияДействий.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК ВсегоЗаписей,
		|	ВЫБОР
		|		КОГДА УчастникиОзнакомлений.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОзнакомления.Ознакомился)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВсегоЗавершено
		|ПОМЕСТИТЬ УчастникиОзнакомления
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(УчастникиОзнакомления.ВсегоЗаписей) КАК ВсегоЗаписей,
		|	СУММА(УчастникиОзнакомления.ВсегоЗавершено) КАК ВсегоЗавершено
		|ИЗ
		|	УчастникиОзнакомления КАК УчастникиОзнакомления";
		
	Запрос.Параметры.Вставить("Действие", Действие);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл  
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Удалит запись
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//  ИдентификаторУчастника - УникальныйИдентификатор.
//
Процедура УдалитьЗапись(Действие, ИдентификаторУчастника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Действие = Действие;
	МенеджерЗаписи.ИдентификаторУчастника = ИдентификаторУчастника;
	
	МенеджерЗаписи.Удалить();

КонецПроцедуры	

// Получает развернутое число участников
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//        
// 
// Возвращаемое значение:
//  Число - сколько участников
//
Функция ЧислоУчастниковДействия(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ВсегоЗаписей
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие";
		
	Запрос.Параметры.Вставить("Действие", Действие);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ВсегоЗаписей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИтоговоеСостояниеУчастников(ИДУчастникаДействия)

	УстановитьПривилегированныйРежим(Истина);
	ИтоговоеСостояниеУчастников = Перечисления.СостоянияВыполненияДействий.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК ВсегоЗаписей,
		|	ВЫБОР
		|		КОГДА УчастникиОзнакомлений.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОзнакомления.Ознакомился)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВсегоЗавершено
		|ПОМЕСТИТЬ УчастникиОзнакомления
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.ИдентификаторУчастникаДействия = &ИдУчастника
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(УчастникиОзнакомления.ВсегоЗаписей) КАК ВсегоЗаписей,
		|	СУММА(УчастникиОзнакомления.ВсегоЗавершено) КАК ВсегоЗавершено
		|ИЗ
		|	УчастникиОзнакомления КАК УчастникиОзнакомления";
		
	Запрос.Параметры.Вставить("ИдУчастника", ИДУчастникаДействия);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ВсегоЗаписей = Выборка.ВсегоЗавершено Тогда 
			ИтоговоеСостояниеУчастников = Перечисления.СостоянияВыполненияДействий.Завершено;
		Иначе  
			ИтоговоеСостояниеУчастников = Перечисления.СостоянияВыполненияДействий.Выполняется;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговоеСостояниеУчастников;
	
КонецФункции

Функция ИтоговоеСостояниеУчастниковДействия(Действие)

	УстановитьПривилегированныйРежим(Истина);
	ИтоговоеСостояниеУчастников = Перечисления.СостоянияВыполненияДействий.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК ВсегоЗаписей,
		|	ВЫБОР
		|		КОГДА УчастникиОзнакомлений.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОзнакомления.Ознакомился)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВсегоЗавершено
		|ПОМЕСТИТЬ УчастникиОзнакомления
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(УчастникиОзнакомления.ВсегоЗаписей) КАК ВсегоЗаписей,
		|	СУММА(УчастникиОзнакомления.ВсегоЗавершено) КАК ВсегоЗавершено
		|ИЗ
		|	УчастникиОзнакомления КАК УчастникиОзнакомления";
		
	Запрос.Параметры.Вставить("Действие", Действие);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ВсегоЗаписей = Выборка.ВсегоЗавершено Тогда 
			ИтоговоеСостояниеУчастников = Перечисления.СостоянияВыполненияДействий.Завершено;
		Иначе  
			ИтоговоеСостояниеУчастников = Перечисления.СостоянияВыполненияДействий.Выполняется;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговоеСостояниеУчастников;
	
КонецФункции

// Получает ДатаНачала
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//        
// 
// Возвращаемое значение:
//  Дата - ДатаНачала
//
Функция ДатаНачала(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(УчастникиОзнакомлений.ДатаНачала) КАК ДатаНачала
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие";
		
	Запрос.Параметры.Вставить("Действие", Действие);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ДатаНачала;
	
КонецФункции

Функция ИдентификаторыДействий(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчастникиОзнакомлений.ИдентификаторУчастникаДействия КАК ИдентификаторУчастникаДействия
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие";
		
	Запрос.Параметры.Вставить("Действие", Действие);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторУчастникаДействия");
	Возврат Результат;
	
КонецФункции	

// Удалит все записи
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления.
//
Процедура УдалитьВсеЗаписи(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Действие.Установить(Действие);
	
	НаборЗаписей.Записать();

КонецПроцедуры	

#КонецОбласти

#КонецЕсли