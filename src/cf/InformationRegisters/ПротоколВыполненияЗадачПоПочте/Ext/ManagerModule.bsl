#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область УдалениеУстаревшихДанных

// Удаляет порцию устаревших данных.
// 
// Возвращаемое значение:
//  Булево - Истина, если были найдены устаревшие данные, в противном случае Ложь.
// 
Функция УдалитьПорциюУстаревшихДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокХраненияВДнях = Константы.СрокХраненияПротоколовВыполненияЗадачПоПочте.Получить();
	Если СрокХраненияВДнях <= 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	ПротоколВыполненияЗадачПоПочте.Период КАК Период,
		|	ПротоколВыполненияЗадачПоПочте.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	ПротоколВыполненияЗадачПоПочте.РезультатВыполнения КАК РезультатВыполнения,
		|	ПротоколВыполненияЗадачПоПочте.Задача КАК Задача
		|ИЗ
		|	РегистрСведений.ПротоколВыполненияЗадачПоПочте КАК ПротоколВыполненияЗадачПоПочте
		|ГДЕ
		|	ПротоколВыполненияЗадачПоПочте.Период < &Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период");
	
	СекундВДне = 86400;
	Период = НачалоДня(ТекущаяДатаСеанса()) - (СрокХраненияВДнях * СекундВДне);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ОбработаноЗаписей = Выборка.Количество();
	ОбработаноУспешно = 0;
	ОбработаноСОшибками = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(Выборка.ИдентификаторСообщения);
			НаборЗаписей.Отбор.РезультатВыполнения.Установить(Выборка.РезультатВыполнения);
			НаборЗаписей.Отбор.Задача.Установить(Выборка.Задача);
			
			НаборЗаписей.Записать();
			
			ОбработаноУспешно = ОбработаноУспешно + 1;
		
		Исключение
			
			ОбработаноСОшибками = ОбработаноСОшибками + 1;
			
			ЗаписьЖурналаРегистрации(
				УдалениеУстаревшихДанных.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ПротоколВыполненияЗадачПоПочте,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Процедура завершена.
			|Обработано записей: %1
			|Из них:
			|	Успешно - %2
			|	С ошибками - %3'"),
		ОбработаноЗаписей,
		ОбработаноУспешно,
		ОбработаноСОшибками);
	
	ЗаписьЖурналаРегистрации(
		УдалениеУстаревшихДанных.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.РегистрыСведений.ПротоколВыполненияЗадачПоПочте,,
		ТекстСообщения);
	
	ЕстьДанныеКУдалению = ОбработаноЗаписей > 0;
	
	Возврат ЕстьДанныеКУдалению;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Записывает результат выполнения по сообщению.
//
// Параметры:
//  Сообщение - см. ЛегкаяПочтаКлиентСервер.СформироватьСтруктуруСообщения
//  РезультатВыполнения - ПеречислениеСсылка.РезультатВыполненияЗадачиПоПочте
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя
//  Описание - Строка
//
Процедура ЗаписатьРезультатВыполненияПоСообщению(Сообщение, РезультатВыполнения, Задача, Описание = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	МенеджерЗаписи.ИдентификаторСообщения = Сообщение.Идентификатор;
	МенеджерЗаписи.РезультатВыполнения = РезультатВыполнения;
	МенеджерЗаписи.Задача = Задача;
	МенеджерЗаписи.ДатаОтправки = Сообщение.ДатаОтправки;
	МенеджерЗаписи.Описание = Описание;
	МенеджерЗаписи.Отправитель = Сообщение.Отправитель;
	МенеджерЗаписи.Тема = Сообщение.Тема;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли