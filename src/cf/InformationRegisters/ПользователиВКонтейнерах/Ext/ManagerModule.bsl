#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Полностью обновляет данные регистра.
//
Процедура ОбновитьДанныеПолностью() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Контейнер,
		|	Пользователи.Ссылка КАК Пользователь
		|ПОМЕСТИТЬ ПользователиВКонтейнерахБезФильтра
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоставыГруппПользователей.ГруппаПользователей,
		|	СоставыГруппПользователей.Пользователь
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсполнителиРолей.РольИсполнителя,
		|	ИсполнителиРолей.Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
		|		ПО ИсполнителиРолей.РольИсполнителя = ПолныеРоли.Ссылка
		|			И ИсполнителиРолей.Исполнитель ССЫЛКА Справочник.Пользователи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодчиненностьПодразделений.Вышестоящее,
		|	СотрудникиПользователей.Пользователь
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СправочникСотрудники
		|		ПО СотрудникиПользователей.Сотрудник = СправочникСотрудники.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО СправочникСотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|			И (НЕ ПодчиненностьПодразделений.Подчиненное.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияКонтейнеры.Ссылка,
		|	СотрудникиПользователей.Пользователь
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СправочникСотрудники
		|		ПО СотрудникиПользователей.Сотрудник = СправочникСотрудники.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО СправочникСотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|			И (НЕ ПодчиненностьПодразделений.Подчиненное.ПометкаУдаления)
		|			И (НЕ ПодчиненностьПодразделений.Вышестоящее.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияКонтейнеры КАК ПодразделенияКонтейнеры
		|		ПО (ПодчиненностьПодразделений.Вышестоящее = ПодразделенияКонтейнеры.Владелец)
		|			И (ПодразделенияКонтейнеры.СпособВключенияПодчиненных = ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.СПодчиненными)
		|		ИЛИ ПодчиненностьПодразделений.Вышестоящее = ПодчиненностьПодразделений.Подчиненное
		|			И ПодразделенияКонтейнеры.СпособВключенияПодчиненных = ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.БезПодчиненных))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияКонтейнеры.Ссылка,
		|	СтруктураПредприятия.Руководитель
		|ИЗ
		|	Справочник.ПодразделенияКонтейнеры КАК ПодразделенияКонтейнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО ПодразделенияКонтейнеры.Владелец = СтруктураПредприятия.Ссылка
		|			И (НЕ СтруктураПредприятия.ПометкаУдаления)
		|			И (СтруктураПредприятия.Руководитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			И (ПодразделенияКонтейнеры.СпособВключенияПодчиненных = ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.ТолькоРуководитель))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроектыКонтейнеры.Ссылка,
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.ПроектыКонтейнеры КАК ПроектыКонтейнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ПроектыКонтейнеры.Владелец = Проекты.Ссылка
		|			И (НЕ Проекты.ПометкаУдаления)
		|			И (ПроектыКонтейнеры.СпособВключенияУчастников = ЗНАЧЕНИЕ(Перечисление.СпособВключенияУчастниковПроекта.ВсеУчастники))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты.ПроектнаяКоманда КАК ПроектыПроектнаяКоманда
		|		ПО (Проекты.Ссылка = ПроектыПроектнаяКоманда.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО (ПроектыПроектнаяКоманда.Исполнитель = СотрудникиПользователей.Сотрудник)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПроектыПроектнаяКоманда.Исполнитель) = ТИП(Справочник.Пользователи)
		|				ТОГДА ПроектыПроектнаяКоманда.Исполнитель = Пользователи.Ссылка
		|			КОГДА ТИПЗНАЧЕНИЯ(ПроектыПроектнаяКоманда.Исполнитель) = ТИП(Справочник.Сотрудники)
		|				ТОГДА СотрудникиПользователей.Пользователь = Пользователи.Ссылка
		|		КОНЕЦ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроектыКонтейнеры.Ссылка,
		|	ИсполнителиРолей.Исполнитель
		|ИЗ
		|	Справочник.ПроектыКонтейнеры КАК ПроектыКонтейнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ПроектыКонтейнеры.Владелец = Проекты.Ссылка
		|			И (НЕ Проекты.ПометкаУдаления)
		|			И (ПроектыКонтейнеры.СпособВключенияУчастников = ЗНАЧЕНИЕ(Перечисление.СпособВключенияУчастниковПроекта.ВсеУчастники))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты.ПроектнаяКоманда КАК ПроектыПроектнаяКоманда
		|		ПО (Проекты.Ссылка = ПроектыПроектнаяКоманда.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|		ПО (ПроектыПроектнаяКоманда.Исполнитель = ИсполнителиРолей.РольИсполнителя)
		|			И ИсполнителиРолей.Исполнитель ССЫЛКА Справочник.Пользователи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроектыКонтейнеры.Ссылка,
		|	Проекты.Руководитель
		|ИЗ
		|	Справочник.ПроектыКонтейнеры КАК ПроектыКонтейнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ПроектыКонтейнеры.Владелец = Проекты.Ссылка
		|			И (НЕ Проекты.ПометкаУдаления)
		|			И (Проекты.Руководитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			И (ПроектыКонтейнеры.СпособВключенияУчастников = ЗНАЧЕНИЕ(Перечисление.СпособВключенияУчастниковПроекта.ТолькоРуководитель))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПользователиВКонтейнерахБезФильтра.Контейнер КАК Контейнер,
		|	ПользователиВКонтейнерахБезФильтра.Пользователь КАК Пользователь
		|ИЗ
		|	ПользователиВКонтейнерахБезФильтра КАК ПользователиВКонтейнерахБезФильтра
		|ГДЕ
		|	НЕ ПользователиВКонтейнерахБезФильтра.Контейнер.ПометкаУдаления
		|	И НЕ ПользователиВКонтейнерахБезФильтра.Пользователь.ПометкаУдаления");
	
	Набор = РегистрыСведений.ПользователиВКонтейнерах.СоздатьНаборЗаписей();
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();
	
КонецПроцедуры

// Обновляет данные регистра по указанному контейнеру.
//
Процедура ОбновитьДанныеКонтейнера(Контейнер, ОбработанныеКонтейнеры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Контейнер) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Контейнер) = Тип("СправочникСсылка.СтруктураПредприятия")
		Или ТипЗнч(Контейнер) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		ОбрабатываемыеКонтейнеры = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(Контейнер);
	Иначе
		ОбрабатываемыеКонтейнеры = Новый Массив;
	КонецЕсли;
	ОбрабатываемыеКонтейнеры.Вставить(0, Контейнер);
	
	Для Каждого ОбрабатываемыйКонтейнер Из ОбрабатываемыеКонтейнеры Цикл
		Если ОбработанныеКонтейнеры <> Неопределено
			И ОбработанныеКонтейнеры.Найти(ОбрабатываемыйКонтейнер) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СоставКонтейнера = СоставКонтейнераПоДаннымПервоисточника(ОбрабатываемыйКонтейнер);
		ЗаписатьСоставПользователей(ОбрабатываемыйКонтейнер, СоставКонтейнера);
		Если ОбработанныеКонтейнеры <> Неопределено Тогда
			ОбработанныеКонтейнеры.Добавить(ОбрабатываемыйКонтейнер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные регистра по указанным контейнерам.
//
Процедура ОбновитьДанныеКонтейнеров(Контейнеры, ОбработанныеКонтейнеры = Неопределено) Экспорт
	
	Если ОбработанныеКонтейнеры = Неопределено Тогда
		ОбработанныеКонтейнеры = Новый Массив;
	КонецЕсли;
	
	Для Каждого Контейнер Из Контейнеры Цикл
		ОбновитьДанныеКонтейнера(Контейнер, ОбработанныеКонтейнеры);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив пользователей контейнера.
// 
// Параметры:
//  Контейнер - Ссылка - контейнер, чей состав нужно получить.
// 
// Возвращаемое значение:
//  Массив - массив пользователей.
// 
Функция ПользователиВКонтейнере(Контейнер) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПользователиВКонтейнерах.Пользователь
		|ИЗ
		|	РегистрСведений.ПользователиВКонтейнерах КАК ПользователиВКонтейнерах
		|ГДЕ
		|	ПользователиВКонтейнерах.Контейнер = &Контейнер");
		
	Запрос.УстановитьПараметр("Контейнер", Контейнер);
	Состав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Возврат Состав;
	
КонецФункции

// Получает контейнеры указанного пользователя, ограничивая их, если необходимо.
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь, чьи контейнеры получаем.
//   ОграничениеТипа - ОписаниеТипов - типы, которыми следует ограничиться.
//
Функция КонтейнерыПользователя(Пользователь, ОграничениеТипа = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Состав.Контейнер КАК Контейнер
		|ИЗ
		|	РегистрСведений.ПользователиВКонтейнерах КАК Состав
		|ГДЕ
		|	Состав.Пользователь = &Пользователь
		|	И &Условие");
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Если ОграничениеТипа = Неопределено Тогда
		Условие = "ИСТИНА"
	Иначе
		Условие = "ТИПЗНАЧЕНИЯ(Состав.Контейнер) В (&Типы)";
		Запрос.УстановитьПараметр("Типы", ОграничениеТипа.Типы());
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", Условие);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контейнер");
	
КонецФункции

// Записывает состав пользователей контейнера, дополняя список измененных контейнеров при необходимости.
//
// Параметры:
//   Контейнер - ОпределяемыйТип.КонтейнерыПользователей - записываемый контейнер.
//   СоставПользователей - Массив - состав контейнера.
//   ИзмененныеКонтейнеры - Массив - необязательный, дополняется измененными контейнерами.
//
Процедура ЗаписатьСоставПользователей(Контейнер, СоставПользователей, ИзмененныеКонтейнеры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПользователиВКонтейнерах.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контейнер.Установить(Контейнер);
	
	НаборЗаписей.Прочитать();
	
	СтарыйСостав = НаборЗаписей.ВыгрузитьКолонку("Пользователь");
	
	Если ОбщегоНазначения.КоллекцииИдентичны(СтарыйСостав, СоставПользователей) Тогда
		Возврат;
	КонецЕсли;
	
	УдаленныеПользователи = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СтарыйСостав, СоставПользователей);
	ДобавленныеПользователи = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СоставПользователей, СтарыйСостав);
	НаборЗаписей.ДополнительныеСвойства.Вставить("УдаленныеПользователи", УдаленныеПользователи);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ДобавленныеПользователи", ДобавленныеПользователи);
	
	НаборЗаписей.Очистить();
	
	Для Каждого Пользователь Из СоставПользователей Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Контейнер = Контейнер;
		Запись.Пользователь = Пользователь;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	Если ИзмененныеКонтейнеры <> Неопределено Тогда
		ИзмененныеКонтейнеры.Вставить(Контейнер);
	КонецЕсли;
	
КонецПроцедуры

// Записывает состав контейнеров пользователя.
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь, состав контейнеров которого обновляется.
//   КонтейнерыПользователя - Массив объектов типа ОпределяемыйТип.КонтейнерыПользователей - записываемые контейнеры.
//
Процедура ЗаписатьКонтейнерыПользователя(Пользователь, КонтейнерыПользователя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвернутыеКонтейнеры = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвернутыеКонтейнеры, КонтейнерыПользователя, Истина);
	
	НаборЗаписей = РегистрыСведений.ПользователиВКонтейнерах.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	
	НаборЗаписей.Прочитать();
	
	СтарыеКонтейнеры = НаборЗаписей.ВыгрузитьКолонку("Контейнер");
	
	Если ОбщегоНазначения.КоллекцииИдентичны(СтарыеКонтейнеры, СвернутыеКонтейнеры) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей.Очистить();
	
	Для Каждого Контейнер Из СвернутыеКонтейнеры Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Контейнер = Контейнер;
		Запись.Пользователь = Пользователь;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получает состав контейнера пользователей.
// 
// Параметры:
//   Контейнер - ОпределяемыйТип.КонтейнерыПользователей.
//
// Возвращаемое значение:
//   Массив элементов СправочникСсылка.Пользователи.
//
Функция СоставКонтейнераПоДаннымПервоисточника(Контейнер) Экспорт
	
	Если Не Метаданные.ОпределяемыеТипы.КонтейнерПользователей.Тип.СодержитТип(ТипЗнч(Контейнер)) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недопустимый тип %1 контейнера %2'"),
			ТипЗнч(Контейнер),
			Контейнер);
	КонецЕсли;
	
	Менеджер = Справочники[Контейнер.Метаданные().Имя];
	Возврат Менеджер.СоставКонтейнераПользователей(Контейнер);
	
КонецФункции

// Проверяет, является ли переданная ссылка контейнером пользователей.
// 
// Параметры:
//   Ссылка - Произвольный - проверяемая ссылка.
//
// Возвращаемое значение:
//   Булево - Истина, если переданная ссылка является контейнером.
//
Функция ЭтоКонтейнер(Ссылка) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.КонтейнерПользователей.Тип.СодержитТип(ТипЗнч(Ссылка));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли
