
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет переход на новую версию.
//
Процедура ВыполнитьПереходНаНовуюВерсию() Экспорт
	
	ГраницаРассмотрения = Константы.ГраницаРассмотренияКОД.Получить();
	Если Не ЗначениеЗаполнено(ГраницаРассмотрения) Тогда
		Возврат;
	КонецЕсли;
	
	Объекты = СоставОбъектовИдентификатораОтметокВремени();
	ГраницаПереноса =
		ОтметкиВремени.ДатаВОтметкуВремени(НачалоДня(ОтметкиВремени.ДатаПоОтметкеВремени(ГраницаРассмотрения) - 86400));
	
	Пока Истина Цикл
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		
		ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 10000
			|	Таблица.Ключ КАК Ключ,
			|	Таблица.Объект КАК Объект,
			|	Таблица.Граница КАК Граница,
			|	Таблица.Отметка КАК Отметка,
			|	Таблица.Удаление КАК Удаление,
			|	Таблица.ЗначенияКлюча КАК ЗначенияКлюча,
			|	Таблица.Источник КАК Источник,
			|	Таблица.ТипКлюча КАК ВидКлючаЧислом,
			|	ВЫБОР
			|		КОГДА Таблица.ТипКлюча = 1
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючНабораПодчинениеРегистратору)
			|		КОГДА Таблица.ТипКлюча = 2
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючНабораПервоеСсылочноеИзмерение)
			|		КОГДА Таблица.ТипКлюча = 3
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей)
			|		КОГДА Таблица.ТипКлюча = 9
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючНабораРегистрБезИзмерений)
			|	КОНЕЦ КАК ВидКлюча
			|ПОМЕСТИТЬ ДанныеОтметок
			|ИЗ
			|	РегистрСведений.УдалитьОтметкиВремениРегистровКонстант КАК Таблица
			|ГДЕ
			|	Таблица.Граница > &Граница
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеОтметок.Ключ КАК Ключ,
			|	ДанныеОтметок.Объект КАК Объект
			|ПОМЕСТИТЬ КлючиРегистровСИдентификатором
			|ИЗ
			|	ДанныеОтметок КАК ДанныеОтметок
			|ГДЕ
			|	ДанныеОтметок.ВидКлючаЧислом = 3
			|	И ДанныеОтметок.Объект В (&Объекты)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеОтметок.Объект КАК Объект
			|ИЗ
			|	ДанныеОтметок КАК ДанныеОтметок
			|ГДЕ
			|	ДанныеОтметок.ВидКлючаЧислом = 3
			|	И ДанныеОтметок.Объект В (&Объекты)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеОтметок.*
			|ИЗ
			|	ДанныеОтметок
			|ГДЕ
			|	(ДанныеОтметок.ВидКлючаЧислом <> 3
			|			ИЛИ ДанныеОтметок.Объект В (&Объекты))";
		Запрос.УстановитьПараметр("Граница", ГраницаПереноса);
		Запрос.УстановитьПараметр("Объекты", Объекты);
		
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатЗапроса[РезультатЗапроса.ВГраница()].Пустой() Тогда
			Запрос.МенеджерВременныхТаблиц.Закрыть();
			Запрос = Неопределено;
			
			Прервать;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
			Пока Выборка.Следующий() Цикл
				ОписаниеКлючаОтметкиВремени = КлючОтметокВремениНовойВерсии(Выборка.Ключ, Выборка.ВидКлючаЧислом);
				
				Запись = РегистрыСведений.ОтметкиВремениРегистровКонстант.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка, , "ЗначенияКлюча");
				ЗаполнитьЗначенияСвойств(Запись, ОписаниеКлючаОтметкиВремени);
				Запись.ЗначенияКлюча = Запись.ЗначенияКлюча;
				Запись.Записать();
				
				СтараяЗапись = СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(СтараяЗапись, Выборка);
				СтараяЗапись.Удалить();
			КонецЦикла;
			
			ТекстЗапроса = Новый Массив; // Массив Из Строка
			
			Регистры = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить().ВыгрузитьКолонку("Объект");
			Если Регистры.Количество() > 0 Тогда
				Для Номер = 1 По Регистры.Количество() Цикл
					ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Регистры[Номер - 1]); // ОбъектМетаданныхРегистрСведений
					
					ИдентификаторНабораЗаписей =
						Метаданные.ОбщиеРеквизиты.УдалитьОтметкиВремениИдентификаторНабораЗаписей.Состав.Найти(ОбъектМетаданных);
					Если ИдентификаторНабораЗаписей = Неопределено
							Или ИдентификаторНабораЗаписей.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
							
						ТекстЗапроса.Добавить("ВЫБРАТЬ НЕОПРЕДЕЛЕНО ГДЕ ЛОЖЬ");
						Продолжить;
					КонецЕсли;
					
					СписокИзмерений = Новый Массив; // Массив Из Строка
					Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
						СписокИзмерений.Добавить(СтрШаблон("ТаблицаРегистра.%1", Измерение.Имя));
					КонецЦикла;
					
					ТекстЗапросаРегистр =
						"ВЫБРАТЬ
						|	&ИзмеренияРегистра
						|ИЗ
						|	#ТаблицаРегистра КАК ТаблицаРегистра
						|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиРегистровСИдентификатором КАК КлючиРегистровСИдентификатором
						|	ПО ТаблицаРегистра.УдалитьОтметкиВремениИдентификаторНабораЗаписей = КлючиРегистровСИдентификатором.Ключ
						|		И КлючиРегистровСИдентификатором.Объект = &Объект";
					ТекстЗапросаРегистр =
						СтрЗаменить(ТекстЗапросаРегистр, "&ИзмеренияРегистра", СтрСоединить(СписокИзмерений, ", "));
					ТекстЗапросаРегистр =
						СтрЗаменить(ТекстЗапросаРегистр, "&Объект", СтрШаблон("&Объект%1", Номер));
					ТекстЗапросаРегистр =
						СтрЗаменить(ТекстЗапросаРегистр, "#ТаблицаРегистра", ОбъектМетаданных.ПолноеИмя());
						
					Запрос.УстановитьПараметр(СтрШаблон("Объект%1", Формат(Номер, "ЧГ=0")), Регистры[Номер - 1]);
						
					ТекстЗапроса.Добавить(ТекстЗапросаРегистр);
				КонецЦикла;
				
				Запрос.Текст = СтрСоединить(ТекстЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
				РезультатЗапроса = Запрос.ВыполнитьПакет();
				
				Для Номер = 1 По Регистры.Количество() Цикл
					Регистр = Регистры[Номер - 1];
					ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Регистр);
					
					НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя()).СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей.ДанныеБизнесПроцессов
					
					ЗначенияОтборов = РезультатЗапроса[Номер - 1].Выгрузить();
					Для Каждого ЗначенияОтбора Из ЗначенияОтборов Цикл
						Для Каждого Поле Из ЗначенияОтборов.Колонки Цикл
							НаборЗаписей.Отбор[Поле.Имя].Установить(ЗначенияОтбора[Поле.Имя]);
						КонецЦикла;
						
						НаборЗаписей.Прочитать();
						
						Для Каждого Запись Из НаборЗаписей Цикл
							Запись.ИдентификаторОтметкиВремени =
								?(ТипЗнч(Запись.УдалитьОтметкиВремениИдентификаторНабораЗаписей) = Тип("УникальныйИдентификатор"), 
									Запись.УдалитьОтметкиВремениИдентификаторНабораЗаписей,
									Запись.УдалитьОтметкиВремениИдентификаторНабораЗаписей.УникальныйИдентификатор());
						КонецЦикла;
						ОтметкиВремени.ОтключитьРегистрацию(НаборЗаписей);
						
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			Запрос.МенеджерВременныхТаблиц.Закрыть();
			Запрос = Неопределено;
			
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось выполнить перенос данных РС УдалитьОтметкиВремениРегистровКонстант
							|по причине:
							|%1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ТекстОшибки);
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.УдалитьОтметкиВремениРегистровКонстант, ,
				ТекстСообщения);
				
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
			
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		Запрос = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество объектов подлежащих обработке.
//
Функция ПереходНаНовуюВерсиюКоличествоОбъектов() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(Таблица.Ключ), 0) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		Таблица.Ключ,
		|		Таблица.Объект
		|	ИЗ
		|		РегистрСведений.УдалитьОтметкиВремениРегистровКонстант КАК Таблица
		|	СГРУППИРОВАТЬ ПО
		|		Таблица.Ключ,
		|		Таблица.Объект) КАК Таблица");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

// Выполняет переход на новую версию.
//
Функция УдалитьДанныеПорционно(РазмерПорции = 1000) Экспорт
	
	РезультатОбработки = Новый Структура("ОбработаноОбъектов, ПроблемныхОбъектов", 0, 0);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	Таблица.Ключ КАК Ключ,
		|	Таблица.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.УдалитьОтметкиВремениРегистровКонстант КАК Таблица");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000" , СтрШаблон("ПЕРВЫЕ %1", Формат(РазмерПорции, "ЧГ=0")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			Набор = СоздатьНаборЗаписей();
			Набор.Отбор.Ключ.Установить(Выборка.Ключ);
			Набор.Отбор.Объект.Установить(Выборка.Объект);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			РезультатОбработки.ПроблемныхОбъектов = РезультатОбработки.ПроблемныхОбъектов + 1;
			
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось удалить данные РС УдалитьОтметкиВремениРегистровКонстант
							|по причине:
							|%1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ТекстОшибки);
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.УдалитьОтметкиВремениРегистровКонстант, ,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет конвертацию ключа в новый формат
//
Функция КлючОтметокВремениНовойВерсии(Ключ, ВидКлючаЧислом)

	ОписаниеКлюча = Новый Структура(
		"ИдентификаторКлюча, ТипКлюча",
		ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор(), Неопределено);
	
	Если ВидКлючаЧислом < 3 Тогда
		ОписаниеКлюча.ИдентификаторКлюча = Ключ.УникальныйИдентификатор();
		ОписаниеКлюча.ТипКлюча = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Ключ));
	ИначеЕсли ВидКлючаЧислом = 3 Тогда
		ОписаниеКлюча.ИдентификаторКлюча = Ключ.УникальныйИдентификатор();
		ОписаниеКлюча.ТипКлюча = Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеКлюча;
	
КонецФункции

// Возвращает список объектов, входящих в состав идентификатора отметок времени.
//
// Возвращаемое значение:
//	Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//
Функция СоставОбъектовИдентификатораОтметокВремени()
	
	СоставОбъектов = Новый Массив;
	
	Для Каждого ЭлементСостава Из Метаданные.ОбщиеРеквизиты.ИдентификаторОтметкиВремени.Состав Цикл
		Если ЭлементСостава.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		СоставОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ЭлементСостава.Метаданные));
	КонецЦикла;
	
	Возврат СоставОбъектов;
	
КонецФункции

#КонецОбласти

#КонецЕсли
