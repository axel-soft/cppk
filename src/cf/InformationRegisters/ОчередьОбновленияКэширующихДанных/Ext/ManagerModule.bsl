#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет запись в очередь обновления кэширующих данных.
//
// Параметры:
//   ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных, Строка - обновляемые
//     кэширующие данные.
//   ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных, Строка - необязательный,
//     данные, изменения которых требуют обновления кэширующих данных.
//   КлючВлияющихДанных - ЛюбаяСсылка - необязательный, ключ влияющих данных.
//   ИзмененияВлияющихДанных - ХранилищеЗначения, Структура - необязательный, информация об изменениях 
//     влияющих данных, необходимая менеджеру зависимых данных для эффективного обновления.
//   Долгое - Булево
//
Процедура Добавить(
	ЗависимыйОбъектМетаданных,
	ВлияющийОбъектМетаданных,
	КлючВлияющихДанных,
	ИзмененияВлияющихДанных = Неопределено,
	Долгое = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = СоздатьМенеджерЗаписи();
	
	Запись.ОтметкаВремени = ОтметкиВремени.Текущая();
	
	Если ТипЗнч(ЗависимыйОбъектМетаданных) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Запись.ЗависимыйОбъектМетаданных = ЗависимыйОбъектМетаданных;
	ИначеЕсли ТипЗнч(ЗависимыйОбъектМетаданных) = Тип("Строка")
		Или ТипЗнч(ЗависимыйОбъектМетаданных) = Тип("Тип") Тогда
		Запись.ЗависимыйОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ЗависимыйОбъектМетаданных);
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип %1 параметра ЗависимыйОбъектМетаданных'"),
			ТипЗнч(ЗависимыйОбъектМетаданных));
	КонецЕсли;
	
	Если ТипЗнч(ВлияющийОбъектМетаданных) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Запись.ВлияющийОбъектМетаданных = ВлияющийОбъектМетаданных;
	ИначеЕсли ТипЗнч(ВлияющийОбъектМетаданных) = Тип("Строка")
		Или ТипЗнч(ВлияющийОбъектМетаданных) = Тип("Тип") Тогда
		Запись.ВлияющийОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ВлияющийОбъектМетаданных);
	ИначеЕсли ВлияющийОбъектМетаданных <> Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип %1 параметра ВлияющийОбъектМетаданных'"),
			ТипЗнч(ВлияющийОбъектМетаданных));
	КонецЕсли;
	
	Запись.КлючВлияющихДанных = КлючВлияющихДанных;
	
	Если ТипЗнч(ИзмененияВлияющихДанных) = Тип("ХранилищеЗначения") Тогда
		Запись.ИзмененияВлияющихДанных = ИзмененияВлияющихДанных;
	ИначеЕсли ТипЗнч(ИзмененияВлияющихДанных) = Тип("Структура") Тогда
		Запись.ИзмененияВлияющихДанных = Новый ХранилищеЗначения(ИзмененияВлияющихДанных);
	ИначеЕсли ИзмененияВлияющихДанных <> Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип %1 параметра ИзмененияВлияющихДанных'"),
			ТипЗнч(ИзмененияВлияющихДанных));
	КонецЕсли;
	
	Пока ЕстьЗаписьСТакимиПолямиКлюча(
		Запись.ОтметкаВремени,
		Запись.ЗависимыйОбъектМетаданных,
		Запись.ВлияющийОбъектМетаданных,
		Запись.КлючВлияющихДанных) Цикл
		Запись.ОтметкаВремени = ОтметкиВремени.Текущая();
	КонецЦикла;
	
	Запись.Автор = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	Запись.Долгое = Долгое;
	Запись.ЗагрузкаОбработанныхДанныхИзДругойСистемы = ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы;
	
	Запись.Записать();
	
КонецПроцедуры

// Обновляет дату к обработке.
// 
// Параметры:
//  ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//  ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  КлючВлияющихДанных - ЛюбаяСсылка.
//  ДатаКОбработке - Дата.
// 
Процедура ОбновитьДатуКОбработке(ОтметкаВремени,
	ЗависимыйОбъектМетаданных,
	ВлияющийОбъектМетаданных,
	КлючВлияющихДанных,
	ДатаКОбработке) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьОбновленияКэширующихДанных");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ОтметкаВремени", ОтметкаВремени);
		ЭлементБлокировки.УстановитьЗначение("ЗависимыйОбъектМетаданных", ЗависимыйОбъектМетаданных);
		ЭлементБлокировки.УстановитьЗначение("ВлияющийОбъектМетаданных", ВлияющийОбъектМетаданных);
		ЭлементБлокировки.УстановитьЗначение("КлючВлияющихДанных", КлючВлияющихДанных);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОтметкаВремени.Установить(ОтметкаВремени);
		НаборЗаписей.Отбор.ЗависимыйОбъектМетаданных.Установить(ЗависимыйОбъектМетаданных);
		НаборЗаписей.Отбор.ВлияющийОбъектМетаданных.Установить(ВлияющийОбъектМетаданных);
		НаборЗаписей.Отбор.КлючВлияющихДанных.Установить(КлючВлияющихДанных);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.ДатаКОбработке = ДатаКОбработке;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Записывает успешную попытку (удаляет запись из очереди).
// 
// Параметры:
//  ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//  ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  КлючВлияющихДанных - ЛюбаяСсылка.
// 
Процедура ЗаписатьУспешнуюПопытку(
	ОтметкаВремени,
	ЗависимыйОбъектМетаданных,
	ВлияющийОбъектМетаданных,
	КлючВлияющихДанных) Экспорт
	
	УдалитьЗаписьИзОчереди(
		ОтметкаВремени,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных);
	
КонецПроцедуры

// Записывает неуспешную попытку (увеличивает счетчик попыток и текст сообщения).
// 
// Параметры:
//  ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//  ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  КлючВлияющихДанных - ЛюбаяСсылка.
//  ИнформацияОбОшибке - Строка.
// 
Процедура ЗаписатьНеуспешнуюПопытку(
	ОтметкаВремени,
	ЗависимыйОбъектМетаданных,
	ВлияющийОбъектМетаданных,
	КлючВлияющихДанных,
	ИнформацияОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьОбновленияКэширующихДанных");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ОтметкаВремени", ОтметкаВремени);
		ЭлементБлокировки.УстановитьЗначение("ЗависимыйОбъектМетаданных", ЗависимыйОбъектМетаданных);
		ЭлементБлокировки.УстановитьЗначение("ВлияющийОбъектМетаданных", ВлияющийОбъектМетаданных);
		ЭлементБлокировки.УстановитьЗначение("КлючВлияющихДанных", КлючВлияющихДанных);
		Блокировка.Заблокировать();
			
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОтметкаВремени.Установить(ОтметкаВремени);
		НаборЗаписей.Отбор.ЗависимыйОбъектМетаданных.Установить(ЗависимыйОбъектМетаданных);
		НаборЗаписей.Отбор.ВлияющийОбъектМетаданных.Установить(ВлияющийОбъектМетаданных);
		НаборЗаписей.Отбор.КлючВлияющихДанных.Установить(КлючВлияющихДанных);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.Попыток = Запись.Попыток + 1;
			Запись.ИнформацияОбОшибке = ИнформацияОбОшибке;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(
			ЗависимыйОбъектМетаданных);
		ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
		СобытиеЖурналаРегистрации =
			ОбновлениеКэширующихДанных.СобытиеЖурналаРегистрации(ПолноеИмяОбъектаМетаданных);
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			ОбъектМетаданных,,
			ИнформацияОбОшибке);
			ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сбрасывает попытки.
// 
// Параметры:
//  ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//  ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  КлючВлияющихДанных - ЛюбаяСсылка.
// 
Процедура СброситьПопытки(ОтметкаВремени,
	ЗависимыйОбъектМетаданных,
	ВлияющийОбъектМетаданных,
	КлючВлияющихДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьОбновленияКэширующихДанных");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ОтметкаВремени", ОтметкаВремени);
		ЭлементБлокировки.УстановитьЗначение("ЗависимыйОбъектМетаданных", ЗависимыйОбъектМетаданных);
		ЭлементБлокировки.УстановитьЗначение("ВлияющийОбъектМетаданных", ВлияющийОбъектМетаданных);
		ЭлементБлокировки.УстановитьЗначение("КлючВлияющихДанных", КлючВлияющихДанных);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОтметкаВремени.Установить(ОтметкаВремени);
		НаборЗаписей.Отбор.ЗависимыйОбъектМетаданных.Установить(ЗависимыйОбъектМетаданных);
		НаборЗаписей.Отбор.ВлияющийОбъектМетаданных.Установить(ВлияющийОбъектМетаданных);
		НаборЗаписей.Отбор.КлючВлияющихДанных.Установить(КлючВлияющихДанных);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.Попыток = 0;
			Запись.ИнформацияОбОшибке = "";
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет запись из очереди обновления кэширующих данных.
// 
// Параметры:
//  ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//  ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  КлючВлияющихДанных - ЛюбаяСсылка.
// 
Процедура УдалитьЗаписьИзОчереди(ОтметкаВремени,
	ЗависимыйОбъектМетаданных,
	ВлияющийОбъектМетаданных,
	КлючВлияющихДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьОбновленияКэширующихДанных");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ОтметкаВремени", ОтметкаВремени);
		ЭлементБлокировки.УстановитьЗначение("ЗависимыйОбъектМетаданных", ЗависимыйОбъектМетаданных);
		ЭлементБлокировки.УстановитьЗначение("ВлияющийОбъектМетаданных", ВлияющийОбъектМетаданных);
		ЭлементБлокировки.УстановитьЗначение("КлючВлияющихДанных", КлючВлияющихДанных);
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОтметкаВремени.Установить(ОтметкаВремени);
		НаборЗаписей.Отбор.ЗависимыйОбъектМетаданных.Установить(ЗависимыйОбъектМетаданных);
		НаборЗаписей.Отбор.ВлияющийОбъектМетаданных.Установить(ВлияющийОбъектМетаданных);
		НаборЗаписей.Отбор.КлючВлияющихДанных.Установить(КлючВлияющихДанных);
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, есть ли запись с такими полями ключа.
// 
// Параметры:
//  ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//  ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  КлючВлияющихДанных - ЛюбаяСсылка.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЕстьЗаписьСТакимиПолямиКлюча(
	ОтметкаВремени,
	ЗависимыйОбъектМетаданных,
	ВлияющийОбъектМетаданных,
	КлючВлияющихДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьОбновленияКэширующихДанных.ОтметкаВремени КАК ОтметкаВремени,
		|	ОчередьОбновленияКэширующихДанных.ЗависимыйОбъектМетаданных КАК ЗависимыйОбъектМетаданных,
		|	ОчередьОбновленияКэширующихДанных.ВлияющийОбъектМетаданных КАК ВлияющийОбъектМетаданных,
		|	ОчередьОбновленияКэширующихДанных.КлючВлияющихДанных КАК КлючВлияющихДанных
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияКэширующихДанных КАК ОчередьОбновленияКэширующихДанных
		|ГДЕ
		|	ОчередьОбновленияКэширующихДанных.ОтметкаВремени = &ОтметкаВремени
		|	И ОчередьОбновленияКэширующихДанных.ЗависимыйОбъектМетаданных = &ЗависимыйОбъектМетаданных
		|	И ОчередьОбновленияКэширующихДанных.ВлияющийОбъектМетаданных = &ВлияющийОбъектМетаданных
		|	И ОчередьОбновленияКэширующихДанных.КлючВлияющихДанных = &КлючВлияющихДанных");
	
	Запрос.УстановитьПараметр("ОтметкаВремени", ОтметкаВремени);
	Запрос.УстановитьПараметр("ЗависимыйОбъектМетаданных", ЗависимыйОбъектМетаданных);
	Запрос.УстановитьПараметр("ВлияющийОбъектМетаданных", ВлияющийОбъектМетаданных);
	Запрос.УстановитьПараметр("КлючВлияющихДанных", КлючВлияющихДанных);
	
	ЕстьЗаписьСТакимиПолямиКлюча = Не Запрос.Выполнить().Пустой();
	
	Возврат ЕстьЗаписьСТакимиПолямиКлюча;
	
КонецФункции

#КонецОбласти

#КонецЕсли
