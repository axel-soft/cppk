#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Ручная загрузка настроек необходима, чтобы заполнять дерево папок сразу с их учётом.
	СохраненныеЗначенияРеквизитов = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/ТекущиеДанные");
	Если СохраненныеЗначенияРеквизитов <> Неопределено Тогда
		ОтображатьУдаленные = СохраненныеЗначенияРеквизитов.Получить("ОтображатьУдаленные");
		ОтображатьТолькоМоиПапки = СохраненныеЗначенияРеквизитов.Получить("ОтображатьТолькоМоиПапки");
	КонецЕсли;
	Элементы.ДеревоПапокКонтекстноеМенюТолькоМоиПапки.Пометка = ОтображатьТолькоМоиПапки;
	Элементы.ДеревоПапокКонтекстноеМенюОтображатьУдаленные.Пометка = ОтображатьУдаленные;
	
	ПрочитатьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВосстановитьСостояниеДереваПапок();
	ОбновитьСтроковоеПредставлениеВыбранныхПапок();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Ручная загрузка необходимо, т.к. для произвольного значения не корректно автоматически считываются настройки.
	СостояниеДереваПапок = Настройки["СостояниеДереваПапок"];
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПапок

&НаКлиенте
Процедура ДеревоПапокВыбранаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПапок.ТекущиеДанные;
	
	ТекущаяСтрока = Элементы.ДеревоПапок.ТекущаяСтрока;
	ЭлементДерева = ДеревоПапок.НайтиПоИдентификатору(ТекущаяСтрока);
	ПометитьЭлементДереваВключаяДочерние(ЭлементДерева, ТекущиеДанные.Выбрана);
	
	ОбновитьСтроковоеПредставлениеВыбранныхПапок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ЗаписатьНастройки();
	Оповестить("Запись_ПапкиПисемВиджетаПочта");
	
	СостояниеДереваПапок = ЗапомнитьСостояниеДереваПапок();
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	СостояниеДереваПапок = ЗапомнитьСостояниеДереваПапок();
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленные(Команда)
	
	СостояниеДереваПапок = ЗапомнитьСостояниеДереваПапок();
	
	ОтображатьУдаленные = Не ОтображатьУдаленные;
	Элементы.ДеревоПапокКонтекстноеМенюОтображатьУдаленные.Пометка = ОтображатьУдаленные;
	ПрочитатьНастройки();
	
	ВосстановитьСостояниеДереваПапок();
	ОбновитьСтроковоеПредставлениеВыбранныхПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоМоиПапки(Команда)
	
	СостояниеДереваПапок = ЗапомнитьСостояниеДереваПапок();
	
	ОтображатьТолькоМоиПапки = Не ОтображатьТолькоМоиПапки;
	Элементы.ДеревоПапокКонтекстноеМенюТолькоМоиПапки.Пометка = ОтображатьТолькоМоиПапки;
	ПрочитатьНастройки();
	
	ВосстановитьСостояниеДереваПапок();
	ОбновитьСтроковоеПредставлениеВыбранныхПапок();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьНастройки()
	
	МассивВыбранныхПапок = РегистрыСведений.ПапкиПисемВиджетаПочта.ВыбранныеПапкиПользователя(
		Пользователи.ТекущийПользователь());
	ЗаполнитьДеревоПапок(МассивВыбранныхПапок);
	ДобавитьПапкиВСписокВыбранныхСервер(МассивВыбранныхПапок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройки()
	
	МассивВыбранныхПапок = Новый Массив;
	Для Каждого СтрокаВыбраннойПапки из ВыбранныеПапки Цикл
		МассивВыбранныхПапок.Добавить(СтрокаВыбраннойПапки.Ссылка);
	КонецЦикла;
	
	РегистрыСведений.ПапкиПисемВиджетаПочта.СохранитьВыбранныеПапкиПользователя(
		Пользователи.ТекущийПользователь(),
		МассивВыбранныхПапок);
	
КонецПроцедуры

&НаСервере
Процедура СортироватьИерархически(СтрокиДерева, Знач Колонки)
	
	СтрокиДерева.Сортировать(Колонки);
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			СортироватьИерархически(СтрокаДерева.Строки, Колонки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтроковоеПредставлениеВыбранныхПапок()
	
	ВыбранныеПапкиСтрока = "";
	
	Для каждого СтрокаПапки Из ВыбранныеПапки Цикл
		Если ЗначениеЗаполнено(ВыбранныеПапкиСтрока) Тогда
			ВыбранныеПапкиСтрока = ВыбранныеПапкиСтрока + "; ";
		КонецЕсли;
		ВыбранныеПапкиСтрока = ВыбранныеПапкиСтрока + СтрокаПапки.ПолныйПуть;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьЭлементДереваВключаяДочерние(ЭлементДерева, ПометкаВыбора)
	
	ЭлементДерева.Выбрана = ПометкаВыбора;
	
	ПараметрыОтбора = Новый Структура("Ссылка", ЭлементДерева.Ссылка);
	Если ПометкаВыбора Тогда
		Если ВыбранныеПапки.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			НоваяСтрока = ВыбранныеПапки.Добавить();
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				ДеревоПапок.НайтиПоИдентификатору(ЭлементДерева.ПолучитьИдентификатор()));
		КонецЕсли;
	Иначе
		НайденныеСтроки = ВыбранныеПапки.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ВыбранныеПапки.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЕсли;
	
	ПодчиненныеЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
	Для Каждого ПодчиненныйЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
		ПометитьЭлементДереваВключаяДочерние(ПодчиненныйЭлементДерева, ПометкаВыбора);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПапкиВСписокВыбранныхСервер(МассивВыбранныхПапок)
	
	ВыбранныеПапки.Очистить();
	ВыбранныеПапкиСтрока = "";
	Для Каждого Папка Из МассивВыбранныхПапок Цикл
		
		СтрокаВыбраннойПапки = ВыбранныеПапки.Добавить();
		СтрокаВыбраннойПапки.Ссылка = Папка;
		Попытка
			СтрокаВыбраннойПапки.ПолныйПуть = Справочники.ПапкиПисем.ПолучитьПолныйПутьПапки(Папка);
		Исключение
			// Если полный путь не удается построить, то выводим только наименование текущей папки.
			// Такое возможно, если у текущего пользователя нет доступа к вышестоящим папкам.
			СтрокаВыбраннойПапки.ПолныйПуть = Строка(Папка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбойтиДерево(ДеревоЭлементы, Контекст, ИмяПроцедуры)
	
	Для Каждого Элемент Из ДеревоЭлементы Цикл
		// Рекурсивный вызов
		ОбойтиДерево(Элемент.ПолучитьЭлементы(), Контекст, ИмяПроцедуры);
		Результат = Вычислить(ИмяПроцедуры + "(Элемент, Контекст)");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Контекст.Состояние.Получить(ТекДанные.Ссылка) = Истина Тогда
		Контекст.ФормаДерево.Развернуть(ИдентификаторСтроки);
	Иначе
		Контекст.ФормаДерево.Свернуть(ИдентификаторСтроки);
	КонецЕсли;
	Если ТекДанные.Ссылка = Контекст.ТекСсылка Тогда
		Контекст.ФормаДерево.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьСостояниеДереваПапок()
	
	Если СостояниеДереваПапок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", ДеревоПапок);
	Контекст.Вставить("ФормаДерево", Элементы.ДеревоПапок);
	Контекст.Вставить("Состояние", СостояниеДереваПапок.Развернут);
	Контекст.Вставить("ТекСсылка", СостояниеДереваПапок.ТекСсылка);
	ОбойтиДерево(ДеревоПапок.ПолучитьЭлементы(), Контекст, "УстановитьСостояниеРазвернут");
	
КонецПроцедуры

&НаКлиенте
Функция ЗапомнитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Контекст.Состояние.Вставить(ТекДанные.Ссылка, Контекст.ФормаДерево.Развернут(ИдентификаторСтроки));
	
КонецФункции

&НаКлиенте
Функция ЗапомнитьСостояниеДереваПапок()
	
	Состояние = Новый Структура;
	Состояние.Вставить("ТекСсылка", Неопределено);
	Если Элементы.ДеревоПапок.ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные = Элементы.ДеревоПапок.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			Состояние.ТекСсылка = ТекущиеДанные.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", ДеревоПапок);
	Контекст.Вставить("ФормаДерево", Элементы.ДеревоПапок);
	Контекст.Вставить("Состояние", Новый Соответствие);
	ОбойтиДерево(ДеревоПапок.ПолучитьЭлементы(), Контекст, "ЗапомнитьСостояниеРазвернут");
	Состояние.Вставить("Развернут", Контекст.Состояние);
	
	Возврат Состояние;
	
КонецФункции

&НаСервере
Процедура ДобавитьПапкиВДерево(ДеревоСтроки, ИсточникСтроки)
	
	Для Каждого ПапкаИнфо Из ИсточникСтроки Цикл
		СтрокаПапки = ДеревоСтроки.Добавить();
		СтрокаПапки.Ссылка = ПапкаИнфо.Ссылка;
		СтрокаПапки.Выбрана = ПапкаИнфо.Выбрана;
		СтрокаПапки.Наименование = ПапкаИнфо.Представление;
		Попытка
			СтрокаПапки.ПолныйПуть = Справочники.ПапкиПисем.ПолучитьПолныйПутьПапки(ПапкаИнфо.Ссылка);
		Исключение
			// Если полный путь не удается построить, то выводим только наименование текущей папки.
			// Такое возможно, если у текущего пользователя нет доступа к вышестоящим папкам.
			СтрокаПапки.ПолныйПуть = СтрокаПапки.Наименование;
		КонецПопытки;
		СтрокаПапки.Порядок = ПапкаИнфо.Порядок;
		СтрокаПапки.НомерКартинки = ПапкаИнфо.НомерКартинки;
		ДобавитьПапкиВДерево(СтрокаПапки.Строки, ПапкаИнфо.Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПапок(МассивВыбранныхПапок)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиПисем.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.Ссылка В (&МассивВыбранныхПапок)
		|			ТОГДА Истина
		|		ИНАЧЕ Ложь
		|	КОНЕЦ КАК Выбрана,
		|	ПапкиПисем.Представление КАК Представление,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.ПометкаУдаления
		|			ТОГДА 1
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Черновики)
		|			ТОГДА 2
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Корзина)
		|			ТОГДА 4
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерКартинки,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Входящие)
		|			ТОГДА 1
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Исходящие)
		|			ТОГДА 2
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Отправленные)
		|			ТОГДА 3
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Корзина)
		|			ТОГДА 5
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Черновики)
		|			ТОГДА 6
		|		ИНАЧЕ 7
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.ПапкиПисем КАК ПапкиПисем");
	
	СекцияГДЕ = Новый Массив;
	
	Если Не ОтображатьУдаленные Тогда
		СекцияГДЕ.Добавить("НЕ ПапкиПисем.ПометкаУдаления");
	КонецЕсли;
		
	Если ОтображатьТолькоМоиПапки Тогда
		СекцияГДЕ.Добавить(
			"ПапкиПисем.Ссылка В ИЕРАРХИИ
			|		(ВЫБРАТЬ
			|			ПапкиПисемБыстрогоДоступа.Папка
			|		ИЗ
			|			РегистрСведений.ПапкиПисемБыстрогоДоступа КАК ПапкиПисемБыстрогоДоступа
			|		ГДЕ
			|			ПапкиПисемБыстрогоДоступа.Пользователь = &ТекущийПользователь)");
	КонецЕсли;
	
	Если СекцияГДЕ.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст
			+ "
			|ГДЕ
			|	"
			+ СтрСоединить(СекцияГДЕ, "
				|	И ");
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
		"
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("МассивВыбранныхПапок", МассивВыбранныхПапок);
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоПапокОбъект = РеквизитФормыВЗначение("ДеревоПапок");
	ДеревоПапокОбъект.Строки.Очистить();
	ДобавитьПапкиВДерево(ДеревоПапокОбъект.Строки, Дерево.Строки);
	СортироватьИерархически(ДеревоПапокОбъект.Строки, "Порядок, Наименование");
	
	ЗначениеВДанныеФормы(ДеревоПапокОбъект, ДеревоПапок);
	
КонецПроцедуры

#КонецОбласти