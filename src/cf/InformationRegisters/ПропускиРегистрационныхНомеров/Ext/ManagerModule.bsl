#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает новую запись о пропущенном номере. Вызывается, когда вручную отредактирован регистрационный
// номер документа и образовался пропуск в номерах.
//
// Параметры:
//  ПропущенныйНомер - Число - Пропущенный регистрационный номер 
//  СтруктураИзмерений - Структура - См. НумерацияКлиентСервер.ПолучитьПараметрыНумерации
//
Процедура ЗафиксироватьПропущенныйНомер(ПропущенныйНомер, СтруктураИзмерений) Экспорт

	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураИзмерений);
	МенеджерЗаписи.ПропущенныйНомер = ПропущенныйНомер;
	МенеджерЗаписи.ДатаФиксации = ТекущаяДатаСеанса();
	МенеджерЗаписи.Автор = Сотрудники.ОсновнойСотрудник();
	МенеджерЗаписи.Записать();

КонецПроцедуры

// Возвращает таблицу с пропущенными номерами и измерениями нумерации.
//
// Параметры:
//  Нумератор - СправочникСсылка.Нумераторы
//  Измерения - Структура - Структура измерений нумерации. 
//		См. НумерацияКлиентСервер.ПолучитьПараметрыНумерации()
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с номерами и измерениями. Колонки:
//		* ПропущенныйНомер - Число
//		* Нумератор - СправочникСсылка.Нумераторы
//		* ПериодНумерации - Дата
//		* Организация - СправочникСсылка.Организации
//		* СвязанныйДокумент - СправочникСсылка.ДокументыПредприятия
//		* Подразделение - СправочникСсылка.СтруктураПредприятия
//		* Проект - СправочникСсылка.Проекты
//		* ВопросДеятельности - СправочникСсылка.ВопросыДеятельности
//		* ВидДокумента - СправочникСсылка.ВидыДокументов
//		* Тематика - СправочникСсылка.ТематикиДокументов
//		* ДатаФиксации - Дата - Дата, когда была сделана запись о пропущенном номере
//		* Автор - СправочникСсылка.Сотрудники
//
Функция ТаблицаПропущенныхНомеров(Нумератор, Знач СтруктураИзмерений = Неопределено,
	Документ = Неопределено) Экспорт

	Результат = Новый ТаблицаЗначений;

	Если Не Нумерация.ИспользуютсяПропущенныеНомера(Нумератор) Тогда
		Возврат Результат;
	КонецЕсли;

	Если СтруктураИзмерений = Неопределено И Документ = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить таблицу пропущенных номеров: не переданы 
							   |измерения нумерации и документ'");
	КонецЕсли;

	Если СтруктураИзмерений = Неопределено И Документ <> Неопределено Тогда
		СтруктураИзмерений = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Документ);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 5
	|	*
	|ИЗ
	|	РегистрСведений.ПропускиРегистрационныхНомеров КАК ПропускиРегистрационныхНомеров
	|ГДЕ
	|	ПропускиРегистрационныхНомеров.Нумератор = &Нумератор
	|	И ПропускиРегистрационныхНомеров.Организация = &Организация
	|	И ПропускиРегистрационныхНомеров.СвязанныйДокумент = &СвязанныйДокумент
	|	И ПропускиРегистрационныхНомеров.Подразделение = &Подразделение
	|	И ПропускиРегистрационныхНомеров.Проект = &Проект
	|	И ПропускиРегистрационныхНомеров.ВопросДеятельности = &ВопросДеятельности
	|	И ПропускиРегистрационныхНомеров.ВидДокумента = &ВидДокумента
	|	И ПропускиРегистрационныхНомеров.Тематика = &Тематика
	|	И ПропускиРегистрационныхНомеров.ПериодНумерации = &ПериодНумерации
	|	И ПропускиРегистрационныхНомеров.ДатаФиксации >= &НачальнаяДатаФиксации
	|	И ПропускиРегистрационныхНомеров.ГрифДоступа = &ГрифДоступа
	|	И ПропускиРегистрационныхНомеров.УзелКОД = &УзелКОД
	|УПОРЯДОЧИТЬ ПО
	|	ПропущенныйНомер";

	РеквизитыНумератора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Нумератор, 
		"Периодичность, ТипСвязи, НезависимаяНумерацияПоОрганизациям,
		|НезависимаяНумерацияПоСвязанномуДокументу,
		|НезависимаяНумерацияПоПодразделению,
		|НезависимаяНумерацияПоПроекту,
		|НезависимаяНумерацияПоВопросуДеятельности,
		|НезависимаяНумерацияПоВидуДокумента,
		|НезависимаяНумерацияПоТематике,
		|НезависимаяНумерацияПоГрифуДоступа,
		|НезависимаяНумерацияПоУзлуКОД");

	ПериодПоискаПропущенныхНомеровВДнях = Нумерация.ПериодПоискаПропущенныхНомеровВДнях() - 1;
	НачальнаяДатаФиксации = НачалоДня(ТекущаяДатаСеанса() -
		ПериодПоискаПропущенныхНомеровВДнях * 24 * 60 * 60);
	Запрос.УстановитьПараметр("НачальнаяДатаФиксации", НачальнаяДатаФиксации);

	Запрос.УстановитьПараметр("Нумератор", Нумератор);
	ПериодНумерации = Нумерация.НачалоПериодаНумерации(РеквизитыНумератора.Периодичность,
		ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПериодНумерации", ПериодНумерации);

	Организация = Справочники.Организации.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоОрганизациям 
		И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Организация = СтруктураИзмерений.Организация;
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);

	СвязанныйДокумент = Справочники.ДокументыПредприятия.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоСвязанномуДокументу Тогда
		Если ЗначениеЗаполнено(СтруктураИзмерений.Ссылка) Тогда
			СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(СтруктураИзмерений.Ссылка,
				РеквизитыНумератора.ТипСвязи);
		Иначе
			ИмяТипаСвязи = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(
				РеквизитыНумератора.ТипСвязи);
			Если ЗначениеЗаполнено(ИмяТипаСвязи) И СтруктураИзмерений.Свойство(ИмяТипаСвязи) Тогда
				СвязанныйДокумент = СтруктураИзмерений[ИмяТипаСвязи];
			КонецЕсли;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СвязанныйДокумент) 
			И СтруктураИзмерений.Свойство("СвязанныйДокумент") Тогда
			СвязанныйДокумент = СтруктураИзмерений.СвязанныйДокумент;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа ведется независимая нумерация по связанному документу. 
					 |Не указан связанный документ с типом связи ""%1""'"),
				РеквизитыНумератора.ТипСвязи);

			Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;

			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("СвязанныйДокумент", СвязанныйДокумент);

	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоПодразделению Тогда
		Подразделение = СтруктураИзмерений.Подразделение;
	КонецЕсли;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);

	ВидДокумента = Справочники.ВидыДокументов.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоВидуДокумента Тогда
		ВидДокумента = СтруктураИзмерений.ВидДокумента;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);

	Проект = Справочники.Проекты.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоПроекту 
		И ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		Проект = СтруктураИзмерений.Проект;
	КонецЕсли;
	Запрос.УстановитьПараметр("Проект", Проект);

	ВопросДеятельности = Справочники.ВопросыДеятельности.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоВопросуДеятельности
		И ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		ВопросДеятельности = СтруктураИзмерений.ВопросДеятельности;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВопросДеятельности", ВопросДеятельности);

	Тематика = Справочники.ТематикиДокументов.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоТематике Тогда
		Тематика = СтруктураИзмерений.Тематика;
	КонецЕсли;
	Запрос.УстановитьПараметр("Тематика", Тематика);
	
	УзелКОД = Справочники.УзлыКОД.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоУзлуКОД
		И ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		УзелКОД = Справочники.УзлыКОД.ЭтотУзел;
	КонецЕсли;
	Запрос.УстановитьПараметр("УзелКОД", УзелКОД);

	ГрифДоступа = Справочники.ГрифыДоступа.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоГрифуДоступа 
		И ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
		ГрифДоступа = СтруктураИзмерений.ГрифДоступа;
	КонецЕсли;
	Запрос.УстановитьПараметр("ГрифДоступа", ГрифДоступа);
	
	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат;

КонецФункции

// Удаляет запись о пропущенном номере. Вызывается, когда использован пропущенный номер. 
//
// Параметры:
//  СтруктураПараметров - Структура - Структура измерений нумерации. 
//		См. НумерацияКлиентСервер.ПолучитьПараметрыНумерации()
//
Процедура УдалитьПропущенныйНомер(СтруктураПараметров) Экспорт

	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("Нумератор", СтруктураПараметров.Нумератор);
	СтруктураИзмерений.Вставить("ПериодНумерации", СтруктураПараметров.ПериодНумерации);
	СтруктураИзмерений.Вставить("Организация", СтруктураПараметров.Организация);
	СтруктураИзмерений.Вставить("СвязанныйДокумент", СтруктураПараметров.СвязанныйДокумент);
	СтруктураИзмерений.Вставить("Подразделение", СтруктураПараметров.Подразделение);
	СтруктураИзмерений.Вставить("Проект", СтруктураПараметров.Проект);
	СтруктураИзмерений.Вставить("ВопросДеятельности", СтруктураПараметров.ВопросДеятельности);
	СтруктураИзмерений.Вставить("ВидДокумента", СтруктураПараметров.ВидДокумента);
	СтруктураИзмерений.Вставить("Тематика", СтруктураПараметров.Тематика);
	СтруктураИзмерений.Вставить("ПропущенныйНомер", СтруктураПараметров.ПропущенныйНомер);
	СтруктураИзмерений.Вставить("ГрифДоступа", СтруктураПараметров.ГрифДоступа);
	СтруктураИзмерений.Вставить("УзелКОД", СтруктураПараметров.УзелКОД);
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПропускиРегистрационныхНомеров");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", СтруктураПараметров.Нумератор);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации", СтруктураПараметров.ПериодНумерации);
		ЭлементБлокировки.УстановитьЗначение("Организация", СтруктураПараметров.Организация);
		ЭлементБлокировки.УстановитьЗначение("СвязанныйДокумент",
			СтруктураПараметров.СвязанныйДокумент);
		ЭлементБлокировки.УстановитьЗначение("Подразделение", СтруктураПараметров.Подразделение);
		ЭлементБлокировки.УстановитьЗначение("Проект", СтруктураПараметров.Проект);
		ЭлементБлокировки.УстановитьЗначение("ВопросДеятельности",
			СтруктураПараметров.ВопросДеятельности);
		ЭлементБлокировки.УстановитьЗначение("ВидДокумента", СтруктураПараметров.ВидДокумента);
		ЭлементБлокировки.УстановитьЗначение("Тематика", СтруктураПараметров.Тематика);
		ЭлементБлокировки.УстановитьЗначение("ГрифДоступа", СтруктураПараметров.ГрифДоступа);
		ЭлементБлокировки.УстановитьЗначение("ПропущенныйНомер",
			СтруктураПараметров.ПропущенныйНомер);
		ЭлементБлокировки.УстановитьЗначение("УзелКОД", СтруктураПараметров.УзелКОД);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();

		ДатаФиксации = РегистрыСведений.ПропускиРегистрационныхНомеров.Получить(
			СтруктураИзмерений).ДатаФиксации;
		Если Не ЗначениеЗаполнено(ДатаФиксации) Тогда
			ВызватьИсключение НСтр("ru = 'Регистрационный номер уже использован.'");
		КонецЕсли;

		Набор = РегистрыСведений.ПропускиРегистрационныхНомеров.СоздатьНаборЗаписей();
		Набор.Отбор.Нумератор.Установить(СтруктураПараметров.Нумератор);
		Набор.Отбор.ПериодНумерации.Установить(СтруктураПараметров.ПериодНумерации);
		Набор.Отбор.Организация.Установить(СтруктураПараметров.Организация);
		Набор.Отбор.СвязанныйДокумент.Установить(СтруктураПараметров.СвязанныйДокумент);
		Набор.Отбор.Подразделение.Установить(СтруктураПараметров.Подразделение);
		Набор.Отбор.Проект.Установить(СтруктураПараметров.Проект);
		Набор.Отбор.ВопросДеятельности.Установить(СтруктураПараметров.ВопросДеятельности);
		Набор.Отбор.ВидДокумента.Установить(СтруктураПараметров.ВидДокумента);
		Набор.Отбор.Тематика.Установить(СтруктураПараметров.Тематика);
		Набор.Отбор.ГрифДоступа.Установить(СтруктураПараметров.ГрифДоступа);
		Набор.Отбор.ПропущенныйНомер.Установить(СтруктураПараметров.ПропущенныйНомер);
		Набор.Отбор.УзелКОД.Установить(СтруктураПараметров.УзелКОД);

		Набор.Записать(Истина);

		ЗафиксироватьТранзакцию();

	Исключение
		
		ОтменитьТранзакцию();

		ВызватьИсключение СтрШаблон(НСтр("ru = 'Регистрационный номер: %1 уже использован другим пользователем.
										 |Повторите попытку регистрации.'"),
			СтруктураПараметров.ПропущенныйНомер);
			
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#КонецЕсли