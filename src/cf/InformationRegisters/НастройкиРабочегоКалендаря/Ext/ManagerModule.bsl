#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значение настройки для Сотрудника
// 
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//  Настройка - ПеречислениеСсылка.НастройкиРабочегоКалендаря
//  
// Возвращаемое значение:
//  ПеречислениеСсылка.ДоступностьФизическихЛиц, Неопределено
//
Функция ПолучитьНастройку(ФизическоеЛицо, Настройка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиРабочегоКалендаря.Значение
		|ИЗ
		|	РегистрСведений.НастройкиРабочегоКалендаря КАК НастройкиРабочегоКалендаря
		|ГДЕ
		|	НастройкиРабочегоКалендаря.ФизическоеЛицо = &ФизическоеЛицо
		|	И НастройкиРабочегоКалендаря.Настройка = &Настройка");
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Настройка", Настройка);
	
	Результат = Запрос.Выполнить();
	
	// Если настроек не найдено, то ищем в устаревшем регистре.
	Если Результат.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НастройкиРабочегоКалендаря.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.НастройкиРабочегоКалендаряСотрудника КАК НастройкиРабочегоКалендаря
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудники КАК ОсновныеСотрудники
			|		ПО НастройкиРабочегоКалендаря.Сотрудник = ОсновныеСотрудники.Сотрудник
			|ГДЕ
			|	ОсновныеСотрудники.ФизическоеЛицо = &ФизическоеЛицо
			|	И НастройкиРабочегоКалендаря.Настройка = &Настройка";
		
		Результат = Запрос.Выполнить();
		
	КонецЕсли;
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Значение;
	
КонецФункции

// Устанавливает настройку для физического лица.
//
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//  Настройка - ПеречислениеСсылка.НастройкиРабочегоКалендаря
//  Значение - ПеречислениеСсылка.ДоступностьФизическихЛиц
//
Функция УстановитьНастройку(ФизическоеЛицо, Настройка, Значение) Экспорт
	
	ИзмененоЗначение = Ложь;
	
	МенеджерЗаписи = РегистрыСведений.НастройкиРабочегоКалендаря.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
	МенеджерЗаписи.Настройка = Настройка;
	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Значение <> Значение Тогда
		
		ИзмененоЗначение = Истина;
		
		МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
		МенеджерЗаписи.Настройка = Настройка;
		МенеджерЗаписи.Значение = Значение;
		МенеджерЗаписи.Записать();
		
		// Удаляем настройки из устаревшего регистра.
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиРабочегоКалендаряСотрудника.Сотрудник,
			|	НастройкиРабочегоКалендаряСотрудника.Настройка
			|ИЗ
			|	РегистрСведений.НастройкиРабочегоКалендаряСотрудника КАК НастройкиРабочегоКалендаряСотрудника
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО НастройкиРабочегоКалендаряСотрудника.Сотрудник = Сотрудники.Ссылка
			|ГДЕ
			|	Сотрудники.Владелец = &ФизическоеЛицо
			|	И НастройкиРабочегоКалендаряСотрудника.Настройка = &Настройка";
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		Запрос.УстановитьПараметр("Настройка", Настройка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Блокировка = Новый БлокировкаДанных();
		Пока Выборка.Следующий() Цикл
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиРабочегоКалендаряСотрудника");
			ЭлементБлокировки.УстановитьЗначение("Сотрудник", Выборка.Сотрудник);
			ЭлементБлокировки.УстановитьЗначение("Настройка", Выборка.Настройка);
		КонецЦикла;
		Блокировка.Заблокировать();
		
		Выборка.Сбросить();
		
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.НастройкиРабочегоКалендаряСотрудника.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Отбор.Настройка.Установить(Выборка.Настройка);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИзмененоЗначение;
	
КонецФункции

#КонецОбласти

#КонецЕсли