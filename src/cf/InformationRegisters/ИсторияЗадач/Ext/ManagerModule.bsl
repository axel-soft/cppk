#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет запись в историю задач.
//
// Параметры:
//  Задача - ДокументСсылка.Задача.
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  Дата - Дата.
//  Событие - СправочникСсылка.СобытияЗадач.
//  Контекст - Произвольный.
//  Автор - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники -
//
Процедура Добавить(Задача, ДействиеЗадачи, Дата, Событие, Контекст, Автор) Экспорт
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Установить(Задача);
	НаборЗаписей.Отбор.ДействиеЗадачи.Установить(ДействиеЗадачи);
	НаборЗаписей.Отбор.Дата.Установить(Дата);
	НаборЗаписей.Отбор.Событие.Установить(Событие);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Задача = Задача;
	НоваяЗапись.ДействиеЗадачи = ДействиеЗадачи;
	НоваяЗапись.Дата = Дата;
	НоваяЗапись.Событие = Событие;
	НоваяЗапись.Контекст = Новый ХранилищеЗначения(Контекст);
	НоваяЗапись.Автор = Автор;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает историю выполнения по источнику.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
// 	
// Возвращаемое значение:
// 	Строка - История выполнения задачи.
//
Функция ИсторияВыполнения(Задача) Экспорт
	
	ИсторияВыполненияФорматированныйДокумент = ИсторияВыполненияФорматированныйДокумент(Задача);
	ИсторияВыполнения = ИсторияВыполненияФорматированныйДокумент.ПолучитьТекст();
	
	Возврат ИсторияВыполнения;
	
КонецФункции

// Возвращает историю выполнения по источнику (в формате HTML).
// 
// Параметры:
//  Задача - ДокументСсылка.Задача
//  КодЯзыка - Строка
// 	
// Возвращаемое значение:
// 	Строка - История выполнения задачи.
//
Функция ИсторияВыполненияHTML(Задача, КодЯзыка = Неопределено) Экспорт
	
	ИсторияВыполненияФорматированныйДокумент = ИсторияВыполненияФорматированныйДокумент(Задача, КодЯзыка);
	Возврат ПолучитьHTMLСтроку(ИсторияВыполненияФорматированныйДокумент);
	
КонецФункции

// Возвращает описание изменения важных реквизитов (в формате HTML).
// Изменения по действиям задач отфильтровываются по ДействиюЗадачи.
// 
// Параметры:
//  Контекст см. КонтекстИзмененияЗадачи
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи, Неопределено - 
// 	
// Возвращаемое значение:
// 	Строка - Описание изменения важных реквизитов.
//
Функция ОписаниеИзмененияВажныхРеквизитовHTML(Контекст, ДействиеЗадачи = Неопределено) Экспорт
	
	ИзмененияФорматированныйДокумент = Новый ФорматированныйДокумент();
	
	КонтекстДляПередачиДальше = ОбщегоНазначения.СкопироватьРекурсивно(Контекст); // Структура
	КонтекстДляПередачиДальше.ИзмененныеРеквизитыДействий.Очистить();
	
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		КонтекстДействия = Контекст.ИзмененныеРеквизитыДействий[ДействиеЗадачи];
		Если КонтекстДействия <> Неопределено Тогда
			КонтекстДляПередачиДальше.ИзмененныеРеквизитыДействий.Вставить(ДействиеЗадачи, КонтекстДействия);
		КонецЕсли;
	КонецЕсли;
	
	Если КонтекстДляПередачиДальше.Свойство("ВставлятьСсылкиНаДействияЗадач") Тогда
		КонтекстДляПередачиДальше.ВставлятьСсылкиНаДействияЗадач = Ложь;
	Иначе
		КонтекстДляПередачиДальше.Вставить("ВставлятьСсылкиНаДействияЗадач", Ложь);
	КонецЕсли;
	
	ПредыдущийПереносСрока = КонтекстПереносаСрока();
	
	ДобавитьВФорматированныйДокумент(
		ИзмененияФорматированныйДокумент,
		Контекст.Автор,
		Контекст.Дата,
		КонтекстДляПередачиДальше,
		Справочники.СобытияЗадач.ИзмененаЗадача,
		Неопределено,
		Неопределено,
		Неопределено,
		ПредыдущийПереносСрока);
	
	СтруктураHTML = РаботаС_HTML.РазложитьТекстHTML(ПолучитьHTMLСтроку(ИзмененияФорматированныйДокумент));
	
	Возврат СокрЛП(СтруктураHTML.Тело);
	
КонецФункции

// Возвращает представление действия задачи или задачи на основании данных в контексте.
// 
// Параметры:
//  Контекст см. КонтекстИзмененияЗадачи
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи 
// 	
// Возвращаемое значение:
// 	Строка - Описание изменения важных реквизитов.
//
Функция ПредставлениеДействияЗадачиДляУведомления(Контекст, ДействиеЗадачи) Экспорт
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат Контекст.ПредставлениеСсылки;
	КонецЕсли;
	
	КонтекстДействия = Контекст.ИзмененныеРеквизитыДействий[ДействиеЗадачи];
	Если КонтекстДействия <> Неопределено Тогда
		Возврат КонтекстДействия.ПредставлениеСсылки;
	КонецЕсли;
	
	Возврат Контекст.ПредставлениеСсылки;
	
КонецФункции

// Формирует контекст выполнения задачи.
// Свойства "УточненныйИсполнитель" может не быть у контекстов, созданных в версии 3.0.2.
// 
// Возвращаемое значение:
// 	Структура - Контекст выполнения задачи.
//   * Исполнитель - ОпределяемыйТип.УчастникЗадач. 
//   * ПлановыйИсполнитель - ОпределяемыйТип.УчастникЗадач.
//   * УточненныйИсполнитель - ОпределяемыйТип.УчастникЗадач.
//   * ОснованиеФактическогоИсполнителя - СправочникСсылка.ЗамещающиеИПомощники.
//   * ТекстРезультатаВыполнения - Строка.
//   * ПриложенияРезультатаВыполнения - Массив из Структура. См. РаботаСЗадачами.СлепокПриложенийРезультата().
//   * РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//   * ДополнительныеСвойства - Структура.
//
Функция КонтекстВыполнения() Экспорт
	
	КонтекстВыполненияЗадачи = Новый Структура(
		"Исполнитель, ПлановыйИсполнитель, УточненныйИсполнитель, ОснованиеФактическогоИсполнителя,
		|ТекстРезультатаВыполнения, ПриложенияРезультатаВыполнения, РезультатДействия, ДополнительныеСвойства,
		|ФактическийИсполнитель, ФактическийПодписант");
	КонтекстВыполненияЗадачи.Исполнитель = Неопределено;
	КонтекстВыполненияЗадачи.ПлановыйИсполнитель = Неопределено;
	КонтекстВыполненияЗадачи.УточненныйИсполнитель = Неопределено;
	КонтекстВыполненияЗадачи.ОснованиеФактическогоИсполнителя = Справочники.ЗамещающиеИПомощники.ПустаяСсылка();
	КонтекстВыполненияЗадачи.ТекстРезультатаВыполнения = "";
	КонтекстВыполненияЗадачи.ПриложенияРезультатаВыполнения = Новый Массив;
	КонтекстВыполненияЗадачи.РезультатДействия = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
	КонтекстВыполненияЗадачи.ДополнительныеСвойства = Новый Структура;
	КонтекстВыполненияЗадачи.ФактическийИсполнитель = Неопределено;
	КонтекстВыполненияЗадачи.ФактическийПодписант = Неопределено;
	
	Возврат КонтекстВыполненияЗадачи;
		
КонецФункции

// Формирует контекст отмены.
// 
// Возвращаемое значение:
// 	Структура - Контекст перенаправления.
//   * ПричинаОтмены - Строка.
//
Функция КонтекстОтмены() Экспорт
	
	КонтекстОтмены = Новый Структура("ПричинаОтмены");
	КонтекстОтмены.ПричинаОтмены = "";
	
	Возврат КонтекстОтмены;
	
КонецФункции

// Формирует контекст отмены выполнения.
// 
// Возвращаемое значение:
// 	Структура - Контекст перенаправления.
//   * Исполнитель - ОпределяемыйТип.УчастникЗадачи.
//   * Исполнитель - ДокументСсылка.ДействиеЗадачи.
//
Функция КонтекстОтменыВыполнения() Экспорт
	
	КонтекстОтменыВыполнения = Новый Структура("Исполнитель, ДействиеЗадачи");
	КонтекстОтменыВыполнения.Исполнитель = Неопределено;
	КонтекстОтменыВыполнения.ДействиеЗадачи = Неопределено;
	
	Возврат КонтекстОтменыВыполнения;
	
КонецФункции

// Формирует контекст перенаправления.
// 
// Возвращаемое значение:
// 	Структура - Контекст перенаправления.
//   * ОтКого - ОпределяемыйТип.УчастникЗадач. 
//   * Кому -  ОпределяемыйТип.УчастникЗадач.
//   * Комментарий - Строка.
//
Функция КонтекстПеренаправления() Экспорт
	
	КонтекстПеренаправления = Новый Структура("ОтКого, Кому, Комментарий");
	КонтекстПеренаправления.ОтКого = Неопределено;
	КонтекстПеренаправления.Кому = Неопределено;
	КонтекстПеренаправления.Комментарий = "";
	
	Возврат КонтекстПеренаправления;
	
КонецФункции

// Формирует контекст переноса срока.
// 
// Возвращаемое значение:
// 	Структура - Контекст переноса срока.
//   * СтарыйСрок - Дата. 
//   * НовыйСрок - Дата.
//
Функция КонтекстПереносаСрока() Экспорт
	
	КонтекстПереносаСрока = Новый Структура("СтарыйСрок, НовыйСрок");
	КонтекстПереносаСрока.СтарыйСрок = Дата(1, 1, 1);
	КонтекстПереносаСрока.НовыйСрок = Дата(1, 1, 1);
	
	Возврат КонтекстПереносаСрока;
		
КонецФункции

// Формирует контекст подзадачи.
// 
// Возвращаемое значение:
// 	Структура - Контекст подзадачи.
// 	 * АвторПодзадачи - ОпределяемыйТип.УчастникЗадач.
//   * Подзадача - ДокументСсылка.Задача. 
//   * ПредставлениеИсполнителей - Строка.
//
Функция КонтекстПодзадачи() Экспорт
	
	КонтекстПереносаСрока = Новый Структура("АвторПодзадачи, Подзадача, ПредставлениеИсполнителей");
	КонтекстПереносаСрока.АвторПодзадачи = Неопределено;
	КонтекстПереносаСрока.Подзадача = Документы.Задача.ПустаяСсылка();
	КонтекстПереносаСрока.ПредставлениеИсполнителей = "";
	
	Возврат КонтекстПереносаСрока;
		
КонецФункции

// Формирует контекст изменения реквизитов задачи.
// 
// Возвращаемое значение:
//  Структура - Контекст изменения реквизитов задачи:
//   * Дата - Дата - дата изменения
//   * Автор - СправочникСсылка.Сотрудники - Сотрудник, внесший изменения.
//   * Ссылка - ДокументСсылка.Задача - 
//   * ПредставлениеСсылки - Строка - для уведомлений, если менялось представление, то будет старое представление.
//   * ИзмененныеРеквизиты - Массив Из см. НовыйИзменившийсяРеквизит
//   * ИзмененныеРеквизитыДействий см. НовыйИзмененныеРеквизитыДействий
//   * ПроизошедшиеБизнесСобытия - Массив Из СправочникСсылка.ВидыБизнесСобытий
//
Функция КонтекстИзмененияЗадачи() Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дата", ТекущаяДатаСеанса());
	Автор = Сотрудники.ОсновнойСотрудникПользователя(ПользователиДокументооборот.ОлицетворяемыйПользователь());
	Если ТипЗнч(Автор) = Тип("СправочникСсылка.Сотрудники") Тогда
		Контекст.Вставить("Автор", Автор);
	Иначе
		Контекст.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	КонецЕсли;
	Контекст.Вставить("Ссылка", Документы.Задача.ПустаяСсылка());
	Контекст.Вставить("ПредставлениеСсылки", "");
	Контекст.Вставить("ИзмененныеРеквизиты", Новый Массив);
	Контекст.Вставить("ИзмененныеРеквизитыДействий", НовыйИзмененныеРеквизитыДействий());
	Контекст.Вставить("ПроизошедшиеБизнесСобытия", Новый Массив);
	
	Возврат Контекст;
		
КонецФункции

// Новый измененные реквизиты действий.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ - ДокументСсылка.ДействиеЗадачи
//   * Значение см. НовыйИзмененияДействия
//
Функция НовыйИзмененныеРеквизитыДействий() Экспорт
	
	Возврат Новый Соответствие;
	
КонецФункции

// Новый изменившийся реквизит.
// 
// Возвращаемое значение:
//  Структура - Новый изменившийся реквизит:
// * Имя - Строка - Имя реквизита.
// * Представление - Строка - Представление реквизита.
// * ЗначениеБыло - Произвольный, Неопределено - Предыдущее значения реквизита. 
// * ЗначениеСтало - Произвольный, Неопределено - Текущее значения реквизита.
//
Функция НовыйИзменившийсяРеквизит() Экспорт
	
	ИзменившийсяРеквизит = Новый Структура;
	ИзменившийсяРеквизит.Вставить("Имя", "");
	ИзменившийсяРеквизит.Вставить("Представление", "");
	ИзменившийсяРеквизит.Вставить("ЗначениеБыло", Неопределено);
	ИзменившийсяРеквизит.Вставить("ЗначениеСтало", Неопределено);
	Возврат ИзменившийсяРеквизит; 
	
КонецФункции

// Описание изменения действия. Предназначено для заполнения соответствующего Соответствия 
// в контексте изменения важных реквизитов задачи.
// 
// Возвращаемое значение:
//  Структура - Новый изменившийся реквизит:
//  * Ссылка - ДокументСсылка.ДействиеЗадачи - Изменившееся действие.
//  * ПредставлениеСсылки - Строка - для уведомлений, если менялось представление, то будет старое представление.
//  * ИзмененныеРеквизиты - Массив Из см. НовыйИзменившийсяРеквизит
//  * ПроизошедшиеБизнесСобытия - Массив Из СправочникСсылка.ВидыБизнесСобытий
//
Функция НовыйИзмененияДействия() Экспорт
	
	ИзмененияДействия = Новый Структура;
	ИзмененияДействия.Вставить("Ссылка", Документы.ДействиеЗадачи.ПустаяСсылка());
	ИзмененияДействия.Вставить("ПредставлениеСсылки", "");
	ИзмененияДействия.Вставить("ИзмененныеРеквизиты", Новый Массив);
	ИзмененияДействия.Вставить("ПроизошедшиеБизнесСобытия", Новый Массив);
	
	Возврат ИзмененияДействия; 
	
КонецФункции

// Определяет сведения о перенаправлении.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Структура - Сведения о перенаправлении.
//   * БылоПеренаправление - Булево.
//   * КтоПеренаправил - СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи.
//   * Комментарий - Строка.
//  
Функция СведенияОПеренаправлении(Задача, ДействиеЗадачи) Экспорт
	
	СведенияОПеренаправлении = Новый Структура("БылоПеренаправление, КтоПеренаправил, Комментарий");
	СведенияОПеренаправлении.БылоПеренаправление = Ложь;
	СведенияОПеренаправлении.КтоПеренаправил = Неопределено;
	СведенияОПеренаправлении.Комментарий = "";
	
	Если Не ЗначениеЗаполнено(Задача) Или Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат СведенияОПеренаправлении;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсторияЗадач.Дата КАК Дата,
		|	ИсторияЗадач.Контекст КАК Контекст,
		|	ИсторияЗадач.Автор КАК Автор
		|ИЗ
		|	РегистрСведений.ИсторияЗадач КАК ИсторияЗадач
		|ГДЕ
		|	ИсторияЗадач.ДействиеЗадачи = &ДействиеЗадачи
		|	И ИсторияЗадач.Задача = &Задача
		|	И ИсторияЗадач.Событие = &Событие
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ");
	
	Запрос.УстановитьПараметр("ДействиеЗадачи", ДействиеЗадачи);
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("Событие", Справочники.СобытияЗадач.Перенаправление);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СведенияОПеренаправлении.БылоПеренаправление = Истина;
		СведенияОПеренаправлении.КтоПеренаправил = Выборка.Автор;
		
		КонтекстПеренаправления = Выборка.Контекст.Получить();
		СведенияОПеренаправлении.Комментарий = КонтекстПеренаправления.Комментарий;
		
	КонецЕсли;
	
	Возврат СведенияОПеренаправлении;
	
КонецФункции

// Формирует список событий по задаче.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Задача.
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  Событие - СправочникСсылка.СобытияЗадач - Событие.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - События по задаче:
//   * Дата - Дата - Дата.
//   * Автор - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники - Автор.
//
Функция СобытияПоЗадаче(Задача, ДействиеЗадачи, Событие) Экспорт
	
	СобытияПоЗадаче = Новый ТаблицаЗначений;
	СобытияПоЗадаче.Колонки.Добавить("Дата");
	СобытияПоЗадаче.Колонки.Добавить("Автор");
	
	Если Не ЗначениеЗаполнено(Задача) Или Не ЗначениеЗаполнено(Событие) Тогда
		Возврат СобытияПоЗадаче;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИсторияЗадач.Дата КАК Дата,
		|	ИсторияЗадач.Контекст КАК Контекст,
		|	ИсторияЗадач.Автор КАК Автор
		|ИЗ
		|	РегистрСведений.ИсторияЗадач КАК ИсторияЗадач
		|ГДЕ
		|	ИсторияЗадач.Задача = &Задача
		|	И ИсторияЗадач.Событие = &Событие
		|	И ИсторияЗадач.ДействиеЗадачи = &ДействиеЗадачи
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Событие", Событие);
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("ДействиеЗадачи", ДействиеЗадачи);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		
		СобытиеПоЗадаче = СобытияПоЗадаче.Добавить();
		СобытиеПоЗадаче.Дата = СтрокаРезультата.Дата;
		СобытиеПоЗадаче.Автор = СтрокаРезультата.Автор;
		
	КонецЦикла;
	
	Возврат СобытияПоЗадаче;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить HTML строку из форматированного документа.
// 
// Параметры:
//  ФорматированныйДокумент - ФорматированныйДокумент
// 
// Возвращаемое значение:
//  Строка - HTML строка из форматированного документа
//
Функция ПолучитьHTMLСтроку(ФорматированныйДокумент)
	
	HTMLСтрока = ОбзорОбъектов.ТекстHTMLФорматированногоДокумента(ФорматированныйДокумент);
	
	Возврат HTMLСтрока;
	
КонецФункции

// Добавляет запись истории выполнения в форматированный документ.
// 
// Параметры:
// 	ИсторияВыполненияФорматированныйДокумент - ФорматированныйДокумент.
// 	Автор - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники - Автор.
// 	Дата - Дата.
// 	Контекст - Произвольный.
// 	Событие - СправочникСсылка.СобытияЗадач.
// 	ДанныеВидаЗадачи - Структура - Данные вида задачи. См. Справочники.ВидыЗадач.ДанныеВидаЗадачи.
// 	ПредыдущийПереносСрока - см. КонтекстПереносаСрока.
// 	КодЯзыка - Строка
//
Процедура ДобавитьВФорматированныйДокумент(ИсторияВыполненияФорматированныйДокумент, Автор, 
	Дата, Контекст, Событие, ДанныеВидаЗадачи,
	ПредставлениеИсполнителя,
	ПредставлениеРезультата,
	ПредыдущийПереносСрока,
	КодЯзыка = Неопределено)
	
	ПредставлениеДатыСобытия = Формат(Дата, "ДФ='dd.MM.yyyy HH:mm'");
	
	ЦветЗелёный = WebЦвета.СветлоЗеленый;
	ЦветКрасный = WebЦвета.СветлоРозовый;
	
	Если Событие = Справочники.СобытияЗадач.Выполнение Тогда
		
		Если Контекст.РезультатДействия = Справочники.РезультатыДействийЗадач.ПеренесенСрок Тогда
			
			ПредставлениеРезультата = СтрШаблон(
				НСтр("ru = 'Срок перенесен на %1'", КодЯзыка),
				Контекст.ДополнительныеСвойства.АктуальныйСрок);
			
		Иначе
			
			Если Не ЗначениеЗаполнено(ПредставлениеРезультата) Тогда
				ПредставлениеРезультата = Строка(Контекст.РезультатДействия);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПредставлениеИсполнителя) Или Не ЗначениеЗаполнено(ПредставлениеРезультата) Тогда
			Возврат;
		КонецЕсли;
		
		// Если в представлении последняя точка, то убираем ее, чтобы не было задвоения.
		Если ЗначениеЗаполнено(ПредставлениеИсполнителя) 
			И Прав(ПредставлениеИсполнителя, 1) = "." Тогда
			ПредставлениеИсполнителя = Лев(ПредставлениеИсполнителя, СтрДлина(ПредставлениеИсполнителя) - 1);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Контекст.ТекстРезультатаВыполнения) Тогда
			ОписаниеСобытия = СтрШаблон(
				НСтр("ru = '%1, %2. %3:
					|%4'"),
				ПредставлениеДатыСобытия,
				ПредставлениеИсполнителя,
				ПредставлениеРезультата,
				Контекст.ТекстРезультатаВыполнения);
		Иначе
			ОписаниеСобытия = СтрШаблон(
				НСтр("ru = '%1, %2. %3.'"),
				ПредставлениеДатыСобытия,
				ПредставлениеИсполнителя,
				ПредставлениеРезультата);
		КонецЕсли;
		
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент, ОписаниеСобытия);
		
		Если Контекст.Свойство("ПриложенияРезультатаВыполнения")
			И Контекст.ПриложенияРезультатаВыполнения.Количество() > 0 Тогда
			
			Для Каждого СлепокПриложения Из Контекст.ПриложенияРезультатаВыполнения Цикл
				
				ПредставлениеПриложения = "";
				НавигационнаяСсылкаПриложения = "";
				Если ТипЗнч(СлепокПриложения.Версия) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
					
					ПредставлениеПриложения = СтрШаблон(
						"%1.%2",
						СлепокПриложения.ПолноеНаименование,
						СлепокПриложения.Расширение);
					НавигационнаяСсылкаПриложения = СтрШаблон(
						"v8doc:tasks/ShowFile/%1",
						ПолучитьНавигационнуюСсылку(СлепокПриложения.Версия));
					
				Иначе
					
					ПредставлениеПриложения = СлепокПриложения.ПолноеНаименование;
					НавигационнаяСсылкаПриложения = СтрШаблон(
						"v8doc:%1",
						ПолучитьНавигационнуюСсылку(СлепокПриложения.Версия));
					
				КонецЕсли;
				
				ПеренестиСтрокуФД(ИсторияВыполненияФорматированныйДокумент);
				
				ЭлементФайла = ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент, ПредставлениеПриложения);
				ЭлементФайла.НавигационнаяСсылка = НавигационнаяСсылкаПриложения;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Событие = Справочники.СобытияЗадач.НаправленаНаИсполнение Тогда
		
		ОписаниеСобытия = СтрШаблон(
			"%1, %2. %3.",
			ПредставлениеДатыСобытия,
			Автор,
			ДанныеВидаЗадачи.ТерминНаправленаНаИсполнение);
		
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент, ОписаниеСобытия);
		
	ИначеЕсли Событие = Справочники.СобытияЗадач.Отмена Тогда
		
		Если ЗначениеЗаполнено(Контекст.ПричинаОтмены) Тогда
			ОписаниеСобытия = СтрШаблон(
				НСтр("ru = '%1, %2. Задача отменена: %3.'", КодЯзыка),
				ПредставлениеДатыСобытия,
				Автор,
				Контекст.ПричинаОтмены);
		Иначе
			ОписаниеСобытия = СтрШаблон(
				НСтр("ru = '%1, %2. Задача отменена.'", КодЯзыка),
				ПредставлениеДатыСобытия,
				Автор);
		КонецЕсли;
		
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент, ОписаниеСобытия);
		
	ИначеЕсли Событие = Справочники.СобытияЗадач.ОтменаВыполнения Тогда
		
		ФизическоеЛицоАвтор = ОбщегоНазначенияДокументооборот.ФизическоеЛицо(Автор);
		ФизическоеЛицоИсполнителя = ОбщегоНазначенияДокументооборот.ФизическоеЛицо(Контекст.Исполнитель);
		
		Если ЗначениеЗаполнено(ФизическоеЛицоАвтор) И ФизическоеЛицоАвтор <> ФизическоеЛицоИсполнителя Тогда
			ОписаниеСобытия = СтрШаблон(
				НСтр("ru = '%1, %2 (Отметил(а): %3). Отменено выполнение задачи.'", КодЯзыка),
				ПредставлениеДатыСобытия,
				Контекст.Исполнитель,
				Автор);
		Иначе
			ОписаниеСобытия = СтрШаблон(
				НСтр("ru = '%1, %2. Отменено выполнение задачи.'", КодЯзыка),
				ПредставлениеДатыСобытия,
				Контекст.Исполнитель);
		КонецЕсли;
		
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент, ОписаниеСобытия);
		
	ИначеЕсли Событие = Справочники.СобытияЗадач.ПодзадачаНаправленаНаИсполнение Тогда
		
		ОписаниеСобытия = СтрШаблон(
			НСтр("ru = '%1, %2. %3 подзадача, участниками которой являются %4.'", КодЯзыка),
			ПредставлениеДатыСобытия,
			Контекст.АвторПодзадачи,
			ДанныеВидаЗадачи.ТерминНаправленаНаИсполнение,
			Контекст.ПредставлениеИсполнителей);
		
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент, ОписаниеСобытия);
		
	ИначеЕсли Событие = Справочники.СобытияЗадач.Закрыта Тогда
		
		ОписаниеСобытия = СтрШаблон(
			НСтр("ru = '%1. Задача закрыта.'", КодЯзыка),
			ПредставлениеДатыСобытия);
		
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент, ОписаниеСобытия);
		
	ИначеЕсли Событие = Справочники.СобытияЗадач.ЗакрытаПодзадача Тогда
		
		ОписаниеСобытия = СтрШаблон(
			НСтр("ru = '%1, %2. Закрыта подзадача, которую поставил %3.'", КодЯзыка),
			ПредставлениеДатыСобытия,
			Контекст.ПредставлениеИсполнителей,
			Контекст.АвторПодзадачи);
		
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент, ОписаниеСобытия);
		
	ИначеЕсли Событие = Справочники.СобытияЗадач.Перенаправление Тогда
		
		// %1, %2. Задача перенаправлена.
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			ПредставлениеДатыСобытия);
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			", ");
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			Автор);
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			". " + НСтр("ru = 'Задача перенаправлена'", КодЯзыка) + ".");
		
		// От кого: %3, кому: %4.
		ПеренестиСтрокуФД(ИсторияВыполненияФорматированныйДокумент);
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			НСтр("ru = 'От кого'", КодЯзыка) + ": ");
		ТекстФД = ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			Контекст.ОтКого);
		ТекстФД.ЦветФона = ЦветКрасный;
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			", " + НСтр("ru = 'кому'", КодЯзыка) + ": ");
		ТекстФД = ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			Контекст.Кому);
		ТекстФД.ЦветФона = ЦветЗелёный;
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			".");
		
		// Комментарий: %5.
		Если ЗначениеЗаполнено(Контекст.Комментарий) Тогда
			ПеренестиСтрокуФД(ИсторияВыполненияФорматированныйДокумент);
			ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
				НСтр("ru = 'Комментарий'", КодЯзыка) + ": ");
			ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
				Контекст.Комментарий);
			ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
				".");
		КонецЕсли;
		
	ИначеЕсли Событие = Справочники.СобытияЗадач.ПеренесенСрок Тогда
		
		Если ПредыдущийПереносСрока.СтарыйСрок = Контекст.СтарыйСрок
			И ПредыдущийПереносСрока.НовыйСрок = Контекст.НовыйСрок Тогда
			Возврат;
		КонецЕсли;
		
		// %1, %2. Срок перенесен.
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			ПредставлениеДатыСобытия);
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			", ");
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			Автор);
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
			". " + НСтр("ru = 'Срок перенесен'", КодЯзыка) + ".");
		
		// Был: %3, стал: %4.
		Если Контекст <> Неопределено Тогда
			
			СрокБыл = ?(ЗначениеЗаполнено(Контекст.СтарыйСрок),
				Формат(Контекст.СтарыйСрок, РаботаСЗадачами.ФорматСрока()),
				НСтр("ru = 'не указан'", КодЯзыка));
			СрокСтал = ?(ЗначениеЗаполнено(Контекст.НовыйСрок),
				Формат(Контекст.НовыйСрок, РаботаСЗадачами.ФорматСрока()),
				НСтр("ru = 'не указан'", КодЯзыка));
			
			ПеренестиСтрокуФД(ИсторияВыполненияФорматированныйДокумент);
			ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
				НСтр("ru = 'Стал'", КодЯзыка) + ": ");
			ТекстФД = ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
				СрокСтал);
			ТекстФД.ЦветФона = ЦветЗелёный;
			ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
				", " + НСтр("ru = 'был'", КодЯзыка) + ": ");
			ТекстФД = ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
				СрокБыл);
			ТекстФД.ЦветФона = ЦветКрасный;
			ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент,
				".");
			
			ПредыдущийПереносСрока.СтарыйСрок = Контекст.СтарыйСрок;
			ПредыдущийПереносСрока.НовыйСрок = Контекст.НовыйСрок;
			
		КонецЕсли;
		
	ИначеЕсли Событие = Справочники.СобытияЗадач.СтараяИсторияВыполнения Тогда
		
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент, Контекст);
		
	ИначеЕсли Событие = Справочники.СобытияЗадач.ИзмененаЗадача Тогда
		
		Если Контекст.ИзмененныеРеквизиты.Количество() = 0 Тогда
			ОписаниеСобытия = СтрШаблон(
				НСтр("ru = '%1, %2. Изменения в задачах исполнителей:'", КодЯзыка),
				ПредставлениеДатыСобытия,
				Автор);
		Иначе
			ОписаниеСобытия = СтрШаблон(
				НСтр("ru = '%1, %2. Изменена задача:'", КодЯзыка),
				ПредставлениеДатыСобытия,
				Автор);
		КонецЕсли;
		
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент, ОписаниеСобытия);
		ПеренестиСтрокуФД(ИсторияВыполненияФорматированныйДокумент);
		
		ВставлятьСсылкиНаДействияЗадач = Истина;
		Если Контекст.Свойство("ВставлятьСсылкиНаДействияЗадач") Тогда
			ВставлятьСсылкиНаДействияЗадач = Контекст.ВставлятьСсылкиНаДействияЗадач;
		КонецЕсли;
		
		ДобавитьПоИзменениюВажныхРеквизитов(ИсторияВыполненияФорматированныйДокумент, Контекст,
			ВставлятьСсылкиНаДействияЗадач, ПредыдущийПереносСрока, КодЯзыка);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен способ добавления события в историю выполнения %1.'"),
			Событие);
		
	Конецесли;
	
	ПеренестиСтрокуФД(ИсторияВыполненияФорматированныйДокумент);
	ПеренестиСтрокуФД(ИсторияВыполненияФорматированныйДокумент);
	
КонецПроцедуры

// Возвращает представление иполнителя для записи в историю выполнения задач.
// 
// Параметры:
//  Контекст - Структура - См. РегистрыСведений.ИсторияЗадач.КонтекстВыполнения().
//  КодЯзыка - Строка
//
Функция ПредставлениеИсполнителяДляИсторииВыполнения(Контекст, Событие, КодЯзыка)
	
	МассивВозврата = Новый Массив;  //  массив структур ПредставлениеИсполнителя, ПредставлениеРезультата
	
	Если Не ЗначениеЗаполнено(Контекст) Или Событие <> Справочники.СобытияЗадач.Выполнение Тогда				
		
		Описание = Новый Структура("ПредставлениеИсполнителя, ПредставлениеРезультата",
			"", "" );
		МассивВозврата.Добавить(Описание);
		Возврат МассивВозврата;
		
	КонецЕсли;	
	
	Если Контекст.Свойство("ФактическийПодписант")
		И ЗначениеЗаполнено(Контекст.ФактическийПодписант) Тогда		
		
		Описание = Новый Структура("ПредставлениеИсполнителя, ПредставлениеРезультата",
			Контекст.ФактическийПодписант, Строка(Контекст.РезультатДействия) );
		МассивВозврата.Добавить(Описание);
		
	КонецЕсли;
	
	Если Контекст.Свойство("ФактическийИсполнитель")
		И ЗначениеЗаполнено(Контекст.ФактическийИсполнитель) Тогда		
		
		Описание = Новый Структура("ПредставлениеИсполнителя, ПредставлениеРезультата",
			Строка(Контекст.ФактическийИсполнитель), "");
			
		Если Контекст.Свойство("ФактическийПодписант")
			И ЗначениеЗаполнено(Контекст.ФактическийПодписант) Тогда		
			Описание.ПредставлениеРезультата = НСтр("ru = 'Обеспечил(а) подписание'", КодЯзыка);
		КонецЕсли;	
		
		
		МассивВозврата.Добавить(Описание);
		Возврат МассивВозврата;
		
	КонецЕсли;
	
	Если Контекст.Свойство("УточненныйИсполнитель")
		И ЗначениеЗаполнено(Контекст.УточненныйИсполнитель)
		И Контекст.УточненныйИсполнитель <> Контекст.Исполнитель Тогда
		
		ПредставлениеИсполнителя = СтрШаблон(
			НСтр("ru = '%1 (отметил(а) %2)'", КодЯзыка),
				Строка(Контекст.УточненныйИсполнитель),
				Строка(Контекст.Исполнитель));
				
		Описание = Новый Структура("ПредставлениеИсполнителя, ПредставлениеРезультата",
			ПредставлениеИсполнителя, "");
		МассивВозврата.Добавить(Описание);
		Возврат МассивВозврата;
		
	КонецЕсли;
	
	ПредставлениеИсполнителя = Строка(Контекст.Исполнитель);
	Если Не ЗначениеЗаполнено(Контекст.ОснованиеФактическогоИсполнителя) 
		И (Не ЗначениеЗаполнено(Контекст.ПлановыйИсполнитель) Или Контекст.ПлановыйИсполнитель = Контекст.Исполнитель) Тогда
		
		Описание = Новый Структура("ПредставлениеИсполнителя, ПредставлениеРезультата",
			ПредставлениеИсполнителя, "");
		МассивВозврата.Добавить(Описание);
		Возврат МассивВозврата;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контекст.ОснованиеФактическогоИсполнителя) Тогда
		
		РеквизитыЗамещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Контекст.ОснованиеФактическогоИсполнителя,
			"ВидЗамещения, Сотрудник, Замещающий");			
		Если РеквизитыЗамещения.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие Тогда
			
			ПредставлениеИсполнителя = СтрШаблон(
				НСтр("ru = '%1 (за %2)'", КодЯзыка),
				Строка(Контекст.Исполнитель),
				СклонениеПредставленийОбъектовДокументооборот.ПросклонятьПредставление(
					РеквизитыЗамещения.Сотрудник,
					4)); // Винительный
			
		Иначе
			
			ПредставлениеИсполнителя = СтрШаблон(
				НСтр("ru = '%1 (отметил(а) %2)'", КодЯзыка),
					Строка(Контекст.Исполнитель),
					Строка(РеквизитыЗамещения.Замещающий));
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Контекст.ПлановыйИсполнитель) Тогда
		
		ПредставлениеИсполнителя = СтрШаблон(
			НСтр("ru = '%1 (за %2)'", КодЯзыка),
			Строка(Контекст.Исполнитель),
			СклонениеПредставленийОбъектовДокументооборот.ПросклонятьПредставление(
				Контекст.ПлановыйИсполнитель,
				2)); // Родительный
		
	КонецЕсли;
	
	Описание = Новый Структура("ПредставлениеИсполнителя, ПредставлениеРезультата",
		ПредставлениеИсполнителя, "");
	МассивВозврата.Добавить(Описание);
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает представление контекста изменения важных реквизитов в виде форматированного текста. Рекурсия.
// 
// Параметры:
//  ФорматированныйДокумент - ФорматированныйДокумент.
//  Контекст - см. КонтекстИзмененияЗадачи.
//  ВставлятьСсылкиНаДействияЗадач - Булево.
//  ПредыдущийПереносСрока - см. КонтекстПереносаСрока.
//  КодЯзыка - Строка
//
Процедура ДобавитьПоИзменениюВажныхРеквизитов(ФорматированныйДокумент, Контекст, ВставлятьСсылкиНаДействияЗадач, ПредыдущийПереносСрока, КодЯзыка)
	
	ЦветЗелёный = WebЦвета.СветлоЗеленый;
	ЦветКрасный = WebЦвета.СветлоРозовый;
	
	КоличествоРеквизитов = Контекст.ИзмененныеРеквизиты.Количество();
	// Вставляем разрыв строки между описание события истории задач и основной частью изменений.
	Если Контекст.Свойство("ИзмененныеРеквизитыДействий") И КоличествоРеквизитов <> 0 Тогда
		ПеренестиСтрокуФД(ФорматированныйДокумент);
	КонецЕсли;
	
	Счетчик = 0;
	ПоследнийРеквизит = Ложь;
	Для Каждого ИзменившийсяРеквизит Из Контекст.ИзмененныеРеквизиты Цикл
		
		РеквизитВыведенВДокумент = Ложь;
		
		Счетчик = Счетчик + 1; 
		Если Счетчик = КоличествоРеквизитов Тогда
			ПоследнийРеквизит = Истина;
		КонецЕсли;
		
		НаименованиеРеквизита = ИзменившийсяРеквизит.Представление;
		
		ЗначениеСтало = ИзменившийсяРеквизит.ЗначениеСтало;
		ЗначениеБыло = ИзменившийсяРеквизит.ЗначениеБыло;
		
		Если ИзменившийсяРеквизит.Имя = "Срок" Тогда
			Если ПредыдущийПереносСрока.СтарыйСрок = ИзменившийсяРеквизит.ЗначениеБыло
				И ПредыдущийПереносСрока.НовыйСрок = ИзменившийсяРеквизит.ЗначениеСтало Тогда
					Продолжить;
			КонецЕсли;
			ПредыдущийПереносСрока.СтарыйСрок = ИзменившийсяРеквизит.ЗначениеБыло;
			ПредыдущийПереносСрока.НовыйСрок = ИзменившийсяРеквизит.ЗначениеСтало;
		КонецЕсли;
		
		ЗначениеСталоТип = ТипЗнч(ЗначениеСтало);
		ДопустимыеТипыСправочники = Новый Массив;
		ДопустимыеТипыСправочники.Добавить(Тип("СправочникСсылка.Проекты"));
		ДопустимыеТипыСправочники.Добавить(Тип("СправочникСсылка.Сотрудники"));
		ДопустимыеТипыСправочники.Добавить(Тип("СправочникСсылка.ПриоритетыЗадач"));
		ДопустимыеТипыСправочники.Добавить(Тип("СправочникСсылка.ПолныеРоли"));
		ДопустимыеТипыСправочники.Добавить(Тип("Неопределено"));
		
		Удалены = Неопределено;
		Добавлены = Неопределено;
		
		Многострочный = Ложь;
		Если ЗначениеСталоТип = Тип("Строка") 
			Или ДопустимыеТипыСправочники.Найти(ЗначениеСталоТип) <> Неопределено Тогда
			
			ЗначенияСталоСтрока = СокрЛП(ЗначениеСтало); 
			ЗначенияБылоСтрока = СокрЛП(ЗначениеБыло);
			
			Многострочный = СтрЧислоСтрок(ЗначениеБыло) > 1 Или СтрЧислоСтрок(ЗначениеСтало) > 1;
			
			ЗначенияСталоСтрока = ?(ЗначениеЗаполнено(ЗначенияСталоСтрока),
				ЗначенияСталоСтрока, ПредставлениеПустогоЗначения(ИзменившийсяРеквизит.Имя, КодЯзыка));
			ЗначенияБылоСтрока = ?(ЗначениеЗаполнено(ЗначенияБылоСтрока),
				ЗначенияБылоСтрока, ПредставлениеПустогоЗначения(ИзменившийсяРеквизит.Имя, КодЯзыка));
			
		ИначеЕсли ЗначениеСталоТип = Тип("Дата") Тогда
			
			ПредставлениеПустойДаты = ПредставлениеПустогоЗначения(ИзменившийсяРеквизит.Имя, КодЯзыка);
			
			ЗначенияСталоСтрока = Формат(ЗначениеСтало, "ДФ='dd.MM.yyyy HH:mm'; ДП='" + ПредставлениеПустойДаты + "';"); 
			ЗначенияБылоСтрока = Формат(ЗначениеБыло, "ДФ='dd.MM.yyyy HH:mm'; ДП='" + ПредставлениеПустойДаты + "';");
			
		ИначеЕсли ЗначениеСталоТип = Тип("ТаблицаЗначений") Тогда
			
			Если ИзменившийсяРеквизит.Имя = "Приложения" Тогда
				
				МассивБыло = ЗначениеБыло.ВыгрузитьКолонку("Приложение");
				МассивСтало = ЗначениеСтало.ВыгрузитьКолонку("Приложение");
				
				Удалены = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивБыло, МассивСтало);
				Добавлены = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСтало, МассивБыло);
			
			ИначеЕсли ИзменившийсяРеквизит.Имя = "Участники" Тогда
				
				МассивБыло = ЗначениеБыло.ВыгрузитьКолонку("Участник");
				МассивСтало = ЗначениеСтало.ВыгрузитьКолонку("Участник");
				
				Удалены = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивБыло, МассивСтало);
				Добавлены = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСтало, МассивБыло);
				
			Иначе
				
				// Бросать исключение не безопасно. Пропускаем неизвестный реквизит, пишем предупреждение в ЖР.
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Неизвестная табличная часть документа для истории задач: %1 (%2)'"),
					ИзменившийсяРеквизит.Имя,
					ИзменившийсяРеквизит.Представление);
				ЗаписьЖурналаРегистрации(ИмяСобытияНеизвестныйРеквизит(),
					УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
				Продолжить;
				
			КонецЕсли;
			
		Иначе
			
			// Бросать исключение не безопасно. Пропускаем неизвестный реквизит, пишем предупреждение в ЖР.
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Неизвестный тип данных изменения задачи: %1, реквизит: %2 (%3).'"),
				ТипЗнч(ЗначениеСтало),
				ИзменившийсяРеквизит.Имя,
				ИзменившийсяРеквизит.Представление);
			ЗаписьЖурналаРегистрации(ИмяСобытияНеизвестныйТипЗначения(),
				УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч(ИзменившийсяРеквизит.ЗначениеБыло) <> Тип("ТаблицаЗначений")
			И Не Многострочный Тогда
			
			ДобавитьТекстФД(ФорматированныйДокумент, НаименованиеРеквизита + ":");
			ТекстФД = ДобавитьТекстФД(ФорматированныйДокумент, " " + ЗначенияСталоСтрока + " ");
			ТекстФД.ЦветФона = ЦветЗелёный;
			ДобавитьТекстФД(ФорматированныйДокумент, " | ");
			ТекстФД = ДобавитьТекстФД(ФорматированныйДокумент, " " + ЗначенияБылоСтрока + " ");
			ТекстФД.ЦветФона = ЦветКрасный;
			
			РеквизитВыведенВДокумент = Истина;
			
		ИначеЕсли ТипЗнч(ИзменившийсяРеквизит.ЗначениеБыло) <> Тип("ТаблицаЗначений")
			И Многострочный Тогда
			
			ДобавитьТекстФД(ФорматированныйДокумент, НаименованиеРеквизита + " ");
			ТекстФД = ДобавитьТекстФД(ФорматированныйДокумент, НСтр("ru = 'стало'", КодЯзыка) + ":");
			ТекстФД.ЦветФона = ЦветЗелёный;
			ДобавитьТекстФД(ФорматированныйДокумент, ЗначенияСталоСтрока);
			ПеренестиСтрокуФД(ФорматированныйДокумент);
			ДобавитьТекстФД(ФорматированныйДокумент, НаименованиеРеквизита + " ");
			ТекстФД = ДобавитьТекстФД(ФорматированныйДокумент, НСтр("ru = 'было'", КодЯзыка) + ":");
			ТекстФД.ЦветФона = ЦветКрасный;
			ДобавитьТекстФД(ФорматированныйДокумент, ЗначенияБылоСтрока);
			
			РеквизитВыведенВДокумент = Истина;
			
		ИначеЕсли ТипЗнч(ИзменившийсяРеквизит.ЗначениеБыло) = Тип("ТаблицаЗначений") Тогда
			
			Если Добавлены.Количество() Тогда
				
				ДобавитьТекстФД(ФорматированныйДокумент, НаименованиеРеквизита + " ");
				ТекстФД = ДобавитьТекстФД(ФорматированныйДокумент, НСтр("ru = 'добавлены'", КодЯзыка) + ":");
				ТекстФД.ЦветФона = ЦветЗелёный;
				ПеренестиСтрокуФД(ФорматированныйДокумент);
				
				ДобавитьСсылкиЧерезРазделительФД(ФорматированныйДокумент, Добавлены);
				
				Если Удалены.Количество() Тогда
					ПеренестиСтрокуФД(ФорматированныйДокумент);
				КонецЕсли;
				
				РеквизитВыведенВДокумент = Истина;
				
			КонецЕсли;
			
			Если Удалены.Количество() Тогда
				
				ДобавитьТекстФД(ФорматированныйДокумент, НаименованиеРеквизита + " ");
				ТекстФД = ДобавитьТекстФД(ФорматированныйДокумент, НСтр("ru = 'удалены'", КодЯзыка) + ":");
				ТекстФД.ЦветФона = ЦветКрасный;
				ПеренестиСтрокуФД(ФорматированныйДокумент);
				
				ДобавитьСсылкиЧерезРазделительФД(ФорматированныйДокумент, Удалены);
				
				РеквизитВыведенВДокумент = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПоследнийРеквизит И РеквизитВыведенВДокумент Тогда
			ПеренестиСтрокуФД(ФорматированныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Контекст.Свойство("ИзмененныеРеквизитыДействий") Тогда
		
		КоличествоИзмененийДействий = Контекст.ИзмененныеРеквизитыДействий.Количество();
		Если КоличествоИзмененийДействий = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПеренестиСтрокуФД(ФорматированныйДокумент);
		
		// Если в задаче реквизиты не менялись, а менялись только в действиях, то не нужно выводить надпись.
		Если Контекст.ИзмененныеРеквизиты.Количество() <> 0 Тогда
			ПеренестиСтрокуФД(ФорматированныйДокумент);
			ДобавитьТекстФД(ФорматированныйДокумент, НСтр("ru = 'Изменения в задачах исполнителей:'", КодЯзыка));
			ПеренестиСтрокуФД(ФорматированныйДокумент);
			ПеренестиСтрокуФД(ФорматированныйДокумент);
		КонецЕсли;
		
		ПоследнееДействие = Ложь;
		СчетчикДействий = 0;
		Для Каждого ИзменившеесяДействие Из Контекст.ИзмененныеРеквизитыДействий Цикл
			СчетчикДействий = СчетчикДействий + 1;
			Если СчетчикДействий = КоличествоИзмененийДействий Тогда
				ПоследнееДействие = Истина;
			КонецЕсли;
			
			ДействиеСсылка = ИзменившеесяДействие.Ключ;
			КонтекстИзмененияДействия = ИзменившеесяДействие.Значение;
			РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеСсылка, "Исполнитель");
			ПредставлениеИсполнителя = РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(РеквизитыДействия.Исполнитель);
			
			ДобавитьТекстФД(ФорматированныйДокумент, "" + ПредставлениеИсполнителя + " ");
			Если ВставлятьСсылкиНаДействияЗадач Тогда
				ДобавитьСсылкиЧерезРазделительФД(ФорматированныйДокумент, 
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеСсылка));
			КонецЕсли;
			ПеренестиСтрокуФД(ФорматированныйДокумент);
				
			ДобавитьПоИзменениюВажныхРеквизитов(
				ФорматированныйДокумент,
				КонтекстИзмененияДействия,
				Ложь,
				ПредыдущийПереносСрока,
				КодЯзыка);
			
			Если Не ПоследнееДействие Тогда
				ПеренестиСтрокуФД(ФорматированныйДокумент);
				ПеренестиСтрокуФД(ФорматированныйДокумент);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает историю выполнения по источнику.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача
//  КодЯзыка - Строка
// 	
// Возвращаемое значение:
// 	ФорматированныйДокумент - История выполнения задачи.
//
Функция ИсторияВыполненияФорматированныйДокумент(Задача, КодЯзыка = Неопределено)
	
	ИсторияВыполненияФорматированныйДокумент = Новый ФорматированныйДокумент();
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат ИсторияВыполненияФорматированныйДокумент;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Задача).Чтение = Ложь Тогда
		ДобавитьТекстФД(ИсторияВыполненияФорматированныйДокумент, 
			НСтр("ru = 'Недостаточно прав для просмотра истории выполнения задачи.'"));
		Возврат ИсторияВыполненияФорматированныйДокумент;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИсторияЗадач.Автор,
		|	ИсторияЗадач.Дата КАК Дата,
		|	ИсторияЗадач.Контекст КАК Контекст,
		|	ИсторияЗадач.Событие КАК Событие
		|ИЗ
		|	РегистрСведений.ИсторияЗадач КАК ИсторияЗадач
		|ГДЕ
		|	ИсторияЗадач.Задача = &Задача
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Задача", Задача);
	
	ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ВидЗадачи");
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредыдущийПереносСрока = КонтекстПереносаСрока();
	
	Пока Выборка.Следующий() Цикл
		
		Контекст = Выборка.Контекст.Получить();
		
		МассивОписаний = ПредставлениеИсполнителяДляИсторииВыполнения(Контекст, Выборка.Событие, КодЯзыка);
		Для Каждого Описание Из МассивОписаний Цикл
		
			ДобавитьВФорматированныйДокумент(
				ИсторияВыполненияФорматированныйДокумент,
				Выборка.Автор,
				Выборка.Дата,
				Контекст,
				Выборка.Событие,
				ДанныеВидаЗадачи,
				Описание.ПредставлениеИсполнителя,
				Описание.ПредставлениеРезультата,
				ПредыдущийПереносСрока,
				КодЯзыка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Корректировка авто-шрифтов и навигационных ссылок.
	КешШрифтов = Новый Соответствие;
	СтандартныйМасштабШрифта = 100;
	ВсеЭлементы = ИсторияВыполненияФорматированныйДокумент.ПолучитьЭлементы();
	Для Каждого Элемент Из ВсеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента")
			И Элемент.Шрифт.Вид = ВидШрифта.АвтоШрифт Тогда
			
			ПараметрыШрифта = Новый Структура;
			ПараметрыШрифта.Вставить("ИмяШрифта", 
				?(ЗначениеЗаполнено(Элемент.Шрифт.Имя), Элемент.Шрифт.Имя, "Arial"));
			ПараметрыШрифта.Вставить("Размер", 
				?(Элемент.Шрифт.Размер > 0, Элемент.Шрифт.Размер, 10));
			ПараметрыШрифта.Вставить("Полужирный", 
				?(Элемент.Шрифт.Полужирный <> Неопределено, Элемент.Шрифт.Полужирный, Ложь));
			ПараметрыШрифта.Вставить("Наклонный", 
				?(Элемент.Шрифт.Наклонный <> Неопределено, Элемент.Шрифт.Наклонный, Ложь));
			ПараметрыШрифта.Вставить("Подчеркнутый", 
				?(Элемент.Шрифт.Подчеркивание <> Неопределено, Элемент.Шрифт.Подчеркивание, Ложь));
			ПараметрыШрифта.Вставить("Зачеркнутый", 
				?(Элемент.Шрифт.Зачеркивание <> Неопределено, Элемент.Шрифт.Зачеркивание, Ложь));
			ПараметрыШрифта.Вставить("Масштаб", 
				?(Элемент.Шрифт.Масштаб <> СтандартныйМасштабШрифта, Элемент.Шрифт.Масштаб, СтандартныйМасштабШрифта));
			
			КлючПараметровШрифта = КлючПараметровШрифта(ПараметрыШрифта);
			Шрифт = КешШрифтов[КлючПараметровШрифта];
			Если Шрифт = Неопределено Тогда
				// BSLLS:StyleElementConstructors-off
				// Обход ошибки платформы - полностью авто шрифт едет при преобразовании в HTML шрифта ШрифтОписанияЗадачи.
				//@skip-check new-font
				Шрифт = Новый Шрифт(
					ПараметрыШрифта.ИмяШрифта,
					ПараметрыШрифта.Размер,
					ПараметрыШрифта.Полужирный,
					ПараметрыШрифта.Наклонный,
					ПараметрыШрифта.Подчеркнутый,
					ПараметрыШрифта.Зачеркнутый,
					ПараметрыШрифта.Масштаб);
				КешШрифтов[КлючПараметровШрифта] = Шрифт;
				// BSLLS:StyleElementConstructors-on
			КонецЕсли;
			
			Элемент.Шрифт = Шрифт;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИсторияВыполненияФорматированныйДокумент;
	
КонецФункции

// Ключ параметров шрифта.
// 
// Параметры:
//  ПараметрыШрифта - Структура -Параметры шрифта
// 
// Возвращаемое значение:
//  Строка - Ключ из всех значений элементов структуры приведённых к строке.
//
Функция КлючПараметровШрифта(ПараметрыШрифта)
	Результат = "";
	Для Каждого Элемент Из ПараметрыШрифта Цикл
		Результат = Результат + Строка(Элемент.Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПредставлениеПустогоЗначения(ИмяРеквизита, КодЯзыка)
	
	ПредставленияПустыхЗначений = ПредставленияПустыхЗначений(КодЯзыка);
	Значение = ПредставленияПустыхЗначений[ИмяРеквизита];
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Значение = НСтр("ru = '<Не указан>'", КодЯзыка);
	КонецЕсли;
	Возврат Значение;
	
КонецФункции

Функция ПредставленияПустыхЗначений(КодЯзыка)
	
	НеУказано = НСтр("ru = '<Не указано>'", КодЯзыка);
	
	Результат = Новый Соответствие;
	Результат.Вставить("Описание",			НеУказано);
	Результат.Вставить("ДатаНачалаПлан",	НеУказано);
	Результат.Вставить("ОсобоеОписание",	НеУказано);
	
	Возврат Результат;
	
КонецФункции

#Область ФорматированныйДокумент

// Добавить текст в форматированный документ.
// 
// Параметры:
//  ФорматированныйДокумент - ФорматированныйДокумент -
//  Текст - Строка -
//
Функция ДобавитьТекстФД(ФорматированныйДокумент, Текст)
	
	Возврат ФорматированныйДокумент.Добавить(Текст, Тип("ТекстФорматированногоДокумента"));
	
КонецФункции

// Добавить перевеод строки (перенос строки) в форматированный документ.
// 
// Параметры:
//  ФорматированныйДокумент - ФорматированныйДокумент -
//
Функция ПеренестиСтрокуФД(ФорматированныйДокумент)
	
	Возврат ФорматированныйДокумент.Добавить(Неопределено, Тип("ПереводСтрокиФорматированногоДокумента"));
	
КонецФункции

// Добавить ссылки через разделитель в форматированный документ.
// 
// Параметры:
//  ФорматированныйДокумент - ФорматированныйДокумент
//  МассивСсылок - Массив Из СправочникСсылка, ДокументСсылка
//
Процедура ДобавитьСсылкиЧерезРазделительФД(ФорматированныйДокумент, МассивСсылок)
	
	СчетчикВложенный = 0;
	ПоследнийДобавленный = Ложь;
	Для Каждого Элемент Из МассивСсылок Цикл
		
		СчетчикВложенный = СчетчикВложенный + 1;
		
		Если СчетчикВложенный = МассивСсылок.Количество() Тогда
			ПоследнийДобавленный = Истина;
		КонецЕсли;
		
		ЭлементФД = ДобавитьТекстФД(ФорматированныйДокумент, Элемент);
		ЭлементФД.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Элемент);
		Если Не ПоследнийДобавленный Тогда
			ДобавитьТекстФД(ФорматированныйДокумент, ", ");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЖурналомРегистрации

Функция ИмяСобытияНеизвестныйРеквизит()
	
	Возврат НСтр("ru = 'История задач.Неизвестный реквизит'");
	
КонецФункции

Функция ИмяСобытияНеизвестныйТипЗначения()
	
	Возврат НСтр("ru = 'История задач.Неизвестный тип значения'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли