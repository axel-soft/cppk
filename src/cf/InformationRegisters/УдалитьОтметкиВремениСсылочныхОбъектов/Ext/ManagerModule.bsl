#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет запись с текущей отметкой времени.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - Ссылка данных отметки времени.
//  Отметка - ОпределяемыйТип.ОтметкаВремени - Отметка времени.
//
Процедура УстановитьОтметкуВремени(Ссылка, Отметка) Экспорт
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.Ссылка = Ссылка;
	Запись.Отметка = Отметка;
	Запись.Записать();
	
КонецПроцедуры

// Возвращает отметку времени.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - Ссылка данных отметки времени.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОтметкаВремени - Отметка времени.
//
Функция ОтметкаВремени(Ссылка) Экспорт
	
	Отбор = Новый Структура("Ссылка", Ссылка);
	
	ЗначенияРесурсов = Получить(Отбор);
	
	Возврат ЗначенияРесурсов.Отметка;
	
КонецФункции

// Выполняет переход на новую версию.
//
Процедура ВыполнитьПереходНаНовуюВерсию() Экспорт
	
	ГраницаРассмотрения = Константы.ГраницаРассмотренияКОД.Получить();
	Если Не ЗначениеЗаполнено(ГраницаРассмотрения) Тогда
		Возврат;
	КонецЕсли;
	
	ГраницаПереноса =
		ОтметкиВремени.ДатаВОтметкуВремени(НачалоДня(ОтметкиВремени.ДатаПоОтметкеВремени(ГраницаРассмотрения) - 86400));
	
	Пока Истина Цикл
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 10000
			|	Таблица.Ключ КАК Ключ,
			|	Таблица.Граница КАК Граница,
			|	Таблица.Отметка КАК Отметка,
			|	Таблица.Удаление КАК Удаление,
			|	Таблица.Источник КАК Источник
			|ИЗ
			|	РегистрСведений.УдалитьОтметкиВремениСсылочныхОбъектов КАК Таблица
			|ГДЕ
			|	Таблица.Граница > &Граница");
		Запрос.УстановитьПараметр("Граница", ГраницаПереноса);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Запись = РегистрыСведений.ОтметкиВремениСсылочныхОбъектов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.ИдентификаторКлюча = Выборка.Ключ.УникальныйИдентификатор();
				Запись.ТипКлюча = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Выборка.Ключ));
				Запись.Записать();
				
				СтараяЗапись = СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(СтараяЗапись, Выборка);
				СтараяЗапись.Удалить();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось выполнить перенос данных РС УдалитьОтметкиВремениСсылочныхОбъектов
							|по причине:
							|%1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ТекстОшибки);
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.УдалитьОтметкиВремениСсылочныхОбъектов, ,
				ТекстСообщения);
				
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество объектов подлежащих обработке.
//
Функция ПереходНаНовуюВерсиюКоличествоОбъектов() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(Таблица.Ключ), 0) КАК Количество
		|ИЗ
		|	РегистрСведений.УдалитьОтметкиВремениСсылочныхОбъектов КАК Таблица");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

// Выполняет переход на новую версию.
//
Функция УдалитьДанныеПорционно(РазмерПорции = 1000) Экспорт
	
	РезультатОбработки = Новый Структура("ОбработаноОбъектов, ПроблемныхОбъектов", 0, 0);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	Таблица.Ключ КАК Ключ
		|ИЗ
		|	РегистрСведений.УдалитьОтметкиВремениСсылочныхОбъектов КАК Таблица");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000" , СтрШаблон("ПЕРВЫЕ %1", Формат(РазмерПорции, "ЧГ=0")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			Набор = СоздатьНаборЗаписей();
			Набор.Отбор.Ключ.Установить(Выборка.Ключ);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			РезультатОбработки.ПроблемныхОбъектов = РезультатОбработки.ПроблемныхОбъектов + 1;
			
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось удалить данные РС УдалитьОтметкиВремениСсылочныхОбъектов
							|по причине:
							|%1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ТекстОшибки);
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.УдалитьОтметкиВремениСсылочныхОбъектов, ,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

#КонецЕсли
