#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// Заполнение представлений фактического исполнителя и ПЭП
//
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ЗаполнитьНовыеПредставления(Параметры) Экспорт 
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(СведенияОбУчастникахДействий.ИдентификаторУчастника) КАК Количество
			|ИЗ
			|	РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
			|ГДЕ
			|	СведенияОбУчастникахДействий.ФактическийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ФактическиеИсполнители.ПустаяСсылка)
			|	И СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя = """"");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	СведенияОбУчастникахДействий.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ИЗ
		|	РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
		|ГДЕ
		|	СведенияОбУчастникахДействий.ФактическийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ФактическиеИсполнители.ПустаяСсылка)
		|	И СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя = """"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(Выборка.ИдентификаторУчастника);
			НаборЗаписей.Прочитать(); 
			ДействияСервер.ЗаполнитьПредставленияВНабореЗаписейУчастников(НаборЗаписей);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре СведенияОбУчастникахДействий.ЗаполнитьНовыеПредставления не удалось обновить некоторые объекты (пропущены): %1'"),
				ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

#КонецОбласти

// Записывает сведения об участнике действия.
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Ссылка на действие, по которому необходимо записать сведения.
//	Участник - УникальныйИдентификатор - Уникальный идентификатор участника действия.
//	Сведения - Структура - Структура, содержащая сведения об участнике, которые необходимо записать.
//
Процедура ЗаписатьСведения(Действие, Участник, Сведения) Экспорт
		
	// Проверка переданных параметров.
	Если Не ЗначениеЗаполнено(Действие) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано действие для записи сведений.'");
	КонецЕсли;
	
	Если Не ТипЗнч(Участник) = Тип("УникальныйИдентификатор") Тогда
		ВызватьИсключение НСтр("ru = 'Не указан участник действия.'");
	КонецЕсли;
	
	Если Не ТипЗнч(Сведения) = Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный формат сведений об участнике действия.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СведенияОбУчастникахДействий");
	ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", Участник);
			
	ВнешняяТранзакция = ТранзакцияАктивна(); 
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		Запись = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Сведения);
		Запись.Действие = Действие;
		Запись.ИдентификаторУчастника = Участник;
		
		Запись.Записать();
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Записывает сведения о сроке участника действия.
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Ссылка на действие, по которому необходимо записать сведения.
//	Участник - УникальныйИдентификатор - Уникальный идентификатор участника действия.
//	НовыйСрок - Дата
//
Процедура ЗаписатьСрок(Действие, Участник, НовыйСрок) Экспорт
		
	// Проверка переданных параметров.
	Если Не ЗначениеЗаполнено(Действие) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано действие для записи сведений.'");
	КонецЕсли;
	
	Если Не ТипЗнч(Участник) = Тип("УникальныйИдентификатор") Тогда
		ВызватьИсключение НСтр("ru = 'Не указан участник действия.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СведенияОбУчастникахДействий");
	ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", Участник);
			
	ВнешняяТранзакция = ТранзакцияАктивна(); 
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		Запись = СоздатьМенеджерЗаписи();
		Запись.Действие = Действие;
		Запись.ИдентификаторУчастника = Участник;
		Запись.Прочитать();
		
		Запись.СрокРассчитанный = НовыйСрок;
		
		Запись.Действие = Действие;
		Запись.ИдентификаторУчастника = Участник;
		Запись.Записать();
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Удаляет сведения об участнике действия.
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Ссылка на действие, по которому необходимо записать сведения.
//	Участник - УникальныйИдентификатор - Уникальный идентификатор участника действия.
//
Процедура УдалитьСведения(Действие, Участник) Экспорт
		
	// Проверка переданных параметров.
	Если Не ЗначениеЗаполнено(Действие) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано действие для записи сведений.'");
	КонецЕсли;
	
	Если Не ТипЗнч(Участник) = Тип("УникальныйИдентификатор") Тогда
		ВызватьИсключение НСтр("ru = 'Не указан участник действия.'");
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СведенияОбУчастникахДействий");
	ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", Участник);
			
	ВнешняяТранзакция = ТранзакцияАктивна(); 
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
	
		Запись = СоздатьМенеджерЗаписи();
		Запись.Действие = Действие;
		Запись.ИдентификаторУчастника = Участник;
		Запись.Прочитать();
		
		Если Запись.Выбран() Тогда
			Запись.Удалить();
		КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Очищает сведения по участнику действия.
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Ссылка на действие, по которому необходимо записать сведения.
//	Участник - УникальныйИдентификатор - Уникальный идентификатор участника действия.
//
Процедура ОчиститьСведения(Действие, Участник) Экспорт
		
	// Проверка переданных параметров.
	Если Не ЗначениеЗаполнено(Действие) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано действие для записи сведений.'");
	КонецЕсли;
	
	Если Не ТипЗнч(Участник) = Тип("УникальныйИдентификатор") Тогда
		ВызватьИсключение НСтр("ru = 'Не указан участник действия.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СведенияОбУчастникахДействий");
	ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", Участник);
			
	ВнешняяТранзакция = ТранзакцияАктивна(); 
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		Запись = СоздатьМенеджерЗаписи();
		Запись.Действие = Действие;
		Запись.ИдентификаторУчастника = Участник;
		Запись.Прочитать();
		
		Если Запись.Выбран() Тогда
			СведенияОбУчастнике = Новый Структура(СтрСоединить(ОписаниеСведенийУчастникаДействия(), ", "));
			
			ЗаполнитьЗначенияСвойств(Запись, СведенияОбУчастнике);
			
			Запись.Записать();			
		КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

// Очищает сведения по участнику действия.
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Ссылка на действие, по которому необходимо записать сведения.
//	Участник - УникальныйИдентификатор - Уникальный идентификатор участника действия.
//
Процедура ОчиститьСведенияПоВсемУчастникамДействия(Действие) Экспорт
		
	// Проверка переданных параметров.
	Если Не ЗначениеЗаполнено(Действие) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано действие для записи сведений.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СведенияОбУчастникахДействий");
	ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
			
	ВнешняяТранзакция = ТранзакцияАктивна(); 
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		СведенияОбУчастнике = Новый Структура(СтрСоединить(ОписаниеСведенийУчастникаДействия(), ", "));
		
		НаборЗаписей = РегистрыСведений.СведенияОбУчастникахДействий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Действие.Установить(Действие);
		НаборЗаписей.Прочитать();		
		
		Если НаборЗаписей.Количество() Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				ЗаполнитьЗначенияСвойств(Запись, СведенияОбУчастнике);
			КонецЦикла;
			
			НаборЗаписей.Записать();
		КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

// Возвращает сведения об участниках действия.
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Ссылка на действие, по которому необходимо получить сведения.
// Возращаемое значение:
//	Соответствие, в ключе которого содержится идентификатор участника, а в значении - структура со сведениями о данном участнике.
//
Функция ПолучитьСведенияОбУчастникахДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СведенияОбУчастниках = Новый Соответствие;
	ПереченьСведений = СтрСоединить(ОписаниеСведенийУчастникаДействия(), ", ");
	
	Запрос = Новый Запрос(СтрШаблон(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОбУчастникахДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	СведенияОбУчастникахДействий.%1
		|ИЗ
		|	РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
		|ГДЕ
		|	СведенияОбУчастникахДействий.Действие = &Действие", 
		ПереченьСведений));
	Запрос.УстановитьПараметр("Действие", Действие);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СведенияОбУчастнике = Новый Структура(ПереченьСведений);
		ЗаполнитьЗначенияСвойств(СведенияОбУчастнике, Выборка); 
		Если СведенияОбУчастнике.Свойство("ПредставлениеФактическогоИсполнителя") 
			И Не ЗначениеЗаполнено(СведенияОбУчастнике.ПредставлениеФактическогоИсполнителя)
			И СведенияОбУчастнике.Свойство("ФактическийИсполнитель") Тогда
			
			СведенияОбУчастнике.ПредставлениеФактическогоИсполнителя = Строка(СведенияОбУчастнике.ФактическийИсполнитель);
			
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("ПредставлениеСотрудникаДляПЭП") 
			И Не ЗначениеЗаполнено(СведенияОбУчастнике.ПредставлениеСотрудникаДляПЭП)
			И СведенияОбУчастнике.Свойство("ФактическийИсполнитель") Тогда
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СведенияОбУчастнике.ФактическийИсполнитель, "Факт, Отметил");
			
			ТекстПодписанта = ДействияСервер.ПредставлениеСотрудникаДляПЭП(Реквизиты);
			
			СведенияОбУчастнике.ПредставлениеСотрудникаДляПЭП = ТекстПодписанта;
			
		КонецЕсли;
		
		СведенияОбУчастниках.Вставить(Выборка.ИдентификаторУчастника, СведенияОбУчастнике);
	КонецЦикла;
	
	Возврат СведенияОбУчастниках;
	
КонецФункции

// Возвращает массив содержащий перечень сведений об участнике действия.
//
Функция ОписаниеСведенийУчастникаДействия() Экспорт
	
	СведенияОбУчастнике = Новый Массив;
	СведенияОбУчастнике.Добавить("ФактическийИсполнитель");
	СведенияОбУчастнике.Добавить("СрокРассчитанный"); 
	СведенияОбУчастнике.Добавить("ПредставлениеСотрудникаДляПЭП");
	СведенияОбУчастнике.Добавить("ПредставлениеФактическогоИсполнителя");
	
	Возврат СведенияОбУчастнике;
	
КонецФункции

// Записывает сведения о фактическом участнике действия.
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Ссылка на действие, по которому необходимо записать сведения.
//	Участник - УникальныйИдентификатор - Уникальный идентификатор участника действия.
//	НовыйУчастник - СправочникССылка.Сотрудники
//
Процедура ОбновитьФактическийИсполнитель(Действие, Участник, НовыйУчастник) Экспорт
		
	// Проверка переданных параметров.
	Если Не ЗначениеЗаполнено(Действие) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано действие для записи сведений.'");
	КонецЕсли;
	
	Если Не ТипЗнч(Участник) = Тип("УникальныйИдентификатор") Тогда
		ВызватьИсключение НСтр("ru = 'Не указан участник действия.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СведенияОбУчастникахДействий");
	ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", Участник);
			
	ВнешняяТранзакция = ТранзакцияАктивна(); 
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		Запись = СоздатьМенеджерЗаписи();
		Запись.Действие = Действие;
		Запись.ИдентификаторУчастника = Участник;
		Запись.Прочитать();
		
		ФактическийИсполнитель = Запись.ФактическийИсполнитель;  
		
		Если ЗначениеЗаполнено(ФактическийИсполнитель) Тогда
			ФактическийИсполнительНовый = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
				ФактическийИсполнитель.Адресат, ФактическийИсполнитель.План, НовыйУчастник, ФактическийИсполнитель.Отметил);
		Иначе
			ФактическийИсполнительНовый = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
				НовыйУчастник, НовыйУчастник, НовыйУчастник, НовыйУчастник);
		КонецЕсли;	
			
		Запись.ФактическийИсполнитель = ФактическийИсполнительНовый; 	
		
		Запись.Действие = Действие;
		Запись.ИдентификаторУчастника = Участник;
		Запись.Записать();
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Очищает сведения о фактическом участнике действия.
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Ссылка на действие, по которому необходимо записать сведения.
//	Участник - УникальныйИдентификатор - Уникальный идентификатор участника действия.
//
Процедура ОчиститьФактическийИсполнитель(Действие, Участник) Экспорт
		
	// Проверка переданных параметров.
	Если Не ЗначениеЗаполнено(Действие) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано действие для записи сведений.'");
	КонецЕсли;
	
	Если Не ТипЗнч(Участник) = Тип("УникальныйИдентификатор") Тогда
		ВызватьИсключение НСтр("ru = 'Не указан участник действия.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СведенияОбУчастникахДействий");
	ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", Участник);
			
	ВнешняяТранзакция = ТранзакцияАктивна(); 
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		Запись = СоздатьМенеджерЗаписи();
		Запись.Действие = Действие;
		Запись.ИдентификаторУчастника = Участник;
		Запись.Прочитать();
		
		Запись.ФактическийИсполнитель = Неопределено; 	
		
		Запись.Действие = Действие;
		Запись.ИдентификаторУчастника = Участник;
		Запись.Записать();
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли