
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет указанный объект в очередь.
//
// Параметры:
//  Объект - ЛюбаяСсылка - ссылка на объект, который необходимо записать в очередь.
//  ДатаВремя - Дата - Необязательный. Используется для сортровки при обработке очереди.
//  ДопСведения - Строка - дополнительные сведения об операции.
//
Процедура Добавить(Объект, ДатаВремя = Неопределено, ДопСведения = "") Экспорт
	
	Если ДатаВремя = Неопределено Тогда
		ДатаВремя = ТекущаяДатаСеанса();
		ДатаВМиллиСекундах = ОбщегоНазначенияДокументооборот.ТекущаяДатаВМиллисекундах();
	Иначе
		ДатаВМиллисекундах = ОбщегоНазначенияДокументооборот.ДатаВМиллисекундах(ДатаВремя);
	КонецЕсли;
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.ДопСведения = ДопСведения;
	МенеджерЗаписи.Дата = ДатаВремя;
	МенеджерЗаписи.ДатаВМиллиСекундах = ДатаВМиллиСекундах;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Удаляет указанный объект из очереди.
//
// Параметры:
//  Объект - ЛюбаяСсылка - ссылка на объект, который необходимо удалить из очереди.
//  ДопСведения - Строка - необязательный. Будет удалена запись с этим значением поля ДопСведения.
//
Процедура Удалить(Объект, ДопСведения = "") Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.ДопСведения.Установить(ДопСведения);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обновляет порцию объектов из очереди.
//
// Параметры:
//  РазмерПорции - Число - количество записей, которые необходимо обработать.
//
// Возвращаемое значение:
//  Число - количество обарботанных записей очереди.
//
Функция ОбработатьПорцию(РазмерПорции = 10) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ %1
		|	ОчередьОперацийСДелами.Объект КАК Объект,
		|	ОчередьОперацийСДелами.ДопСведения КАК ДопСведения
		|ИЗ
		|	РегистрСведений.ОчередьОперацийСДелами КАК ОчередьОперацийСДелами
		|ГДЕ
		|	ОчередьОперацийСДелами.КоличествоПопытокОбработки < &ЛимитПопыток
		|	И ОчередьОперацийСДелами.Дата < &ТекущаяДата
		|	И ОчередьОперацийСДелами.ДатаСледующейПопытки < &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьОперацийСДелами.Дата,
		|	ОчередьОперацийСДелами.ДатаВМиллиСекундах,
		|	ОчередьОперацийСДелами.Объект,
		|	ОчередьОперацийСДелами.ДопСведения";
	
	Запрос.УстановитьПараметр("ЛимитПопыток", ЛимитПопытокОбработки());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", Формат(РазмерПорции, "ЧГ=0"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Количество = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		ОбработатьЭлементОчереди(Выборка.Объект, Выборка.ДопСведения);
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции	

// Очищает всю очередь - удаляет все записи.
// 
Процедура Очистить() Экспорт
	
	Набор = РегистрыСведений.ОчередьОперацийСДелами.СоздатьНаборЗаписей();
	Набор.Записать();
	
КонецПроцедуры

// Возвращает размер очереди.
// 
// Возвращаемое значение:
//	Число - количество записей очереди.
//	 
Функция РазмерОчереди() Экспорт
	
	РазмерОчереди = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) Как ЧислоЗаписей
		|ИЗ
		|	РегистрСведений.ОчередьОперацийСДелами КАК ОчередьОперацийСДелами";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РазмерОчереди = Выборка.ЧислоЗаписей;
	КонецЕсли;
	
	Возврат РазмерОчереди;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЛимитПопытокОбработки()
	
	Возврат 3;
	
КонецФункции

// Обрабатывает операцию по указанному элементу и удаляет его из очереди.
// 
Процедура ОбработатьЭлементОчереди(Ссылка, ДопСведения)
	
	ОписаниеОшибки = "";
	
	Попытка 
		Если ДопСведения = "ОбработатьПередачуДокументовВАрхив" Тогда
			АрхивныеОперацииСервер.ОбработатьПередачуДокументовВАрхив(Ссылка,, Истина);
		ИначеЕсли ДопСведения = "ОбработатьУничтожениеДокументов" Тогда
			АрхивныеОперацииСервер.ОбработатьУничтожениеДокументов(Ссылка,, Истина);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Очередь операций с делами'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Ссылка.Метаданные(),
			Ссылка,
			ОписаниеОшибки);
		ЗафиксироватьНеудачнуюПопыткуОбработки(Ссылка, ДопСведения, ОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	Удалить(Ссылка, ДопСведения);
	
КонецПроцедуры	

Процедура ЗафиксироватьНеудачнуюПопыткуОбработки(Ссылка, ДопСведения, ТекстОшибки)
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Ссылка;
	МенеджерЗаписи.ДопСведения = ДопСведения;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.КоличествоПопытокОбработки = МенеджерЗаписи.КоличествоПопытокОбработки + 1;
		Если МенеджерЗаписи.КоличествоПопытокОбработки < ЛимитПопытокОбработки() Тогда
			МенеджерЗаписи.ДатаСледующейПопытки = ТекущаяДатаСеанса() + 60;
		КонецЕсли;
		МенеджерЗаписи.ТекстОшибки = ТекстОшибки;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
