#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Делает запись в регистр.
//
// Параметры:
//  Объект - ДокументСсылка.ВходящееПисьмо
//         - ЗадачаСсылка.ЗадачаИсполнителя
//         - ДокументСсылка.ИсходящееПисьмо
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - сотрудник, установивший флаг.
//  Флаг - ПеречислениеСсылка.ФлагиОбъектов - флаг.
//  ОтключитьОбновлениеЗадач - Булево - Отключить обновление задач.
//
Процедура УстановитьФлаг(Объект, ФизическоеЛицо, Флаг, ОтключитьОбновлениеЗадач = Ложь) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		УстановитьФлагЗадачиПроцесса(Объект, ФизическоеЛицо, Флаг, ОтключитьОбновлениеЗадач);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Запись = СоздатьМенеджерЗаписи();
		Запись.Объект = Объект;
		Запись.ФизическоеЛицо = ФизическоеЛицо;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Удалить();
		КонецЕсли;
		
		Запись = СоздатьМенеджерЗаписи();
		Запись.Объект = Объект;
		Запись.ФизическоеЛицо = ФизическоеЛицо;
		Запись.Флаг = Флаг;
		Запись.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Очищает запись.
//
// Параметры:
//  Объект - ДокументСсылка.ВходящееПисьмо
//         - ЗадачаСсылка.ЗадачаИсполнителя
//         - ДокументСсылка.ИсходящееПисьмо
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - сотрудник, установивший флаг.
//  ОтключитьОбновлениеЗадач - Булево - Отключить обновление задач.
//
Процедура ОчиститьФлаг(Объект, ФизическоеЛицо, ОтключитьОбновлениеЗадач = Ложь) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ОчиститьФлагЗадачиПроцесса(Объект, ОтключитьОбновлениеЗадач);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Запись = СоздатьМенеджерЗаписи();
		Запись.Объект = Объект;
		Запись.ФизическоеЛицо = ФизическоеЛицо;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Удалить();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Получает значение флага объекта установленного сотрудником.
//
// Параметры:
//   Объект - ДокументСсылка.ВходящееПисьмо
//         - ЗадачаСсылка.ЗадачаИсполнителя
//         - ДокументСсылка.ИсходящееПисьмо
//   ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - сотрудник, установивший флаг
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ФлагиОбъектов
//
Функция ПолучитьФлаг(Объект, ФизическоеЛицо) Экспорт
	
	Флаг = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ФлагиОбъектов.Флаг
		|ИЗ
		|	РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|ГДЕ
		|	ФлагиОбъектов.Объект = &Объект
		|	И ФлагиОбъектов.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("Объект", Объект);	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Флаг = Выборка.Флаг;
	КонецЕсли;
	
	Возврат Флаг;
	
КонецФункции

// Определяется флаг задачи процесса.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ФлагиОбъектов
//  Неопределено
//
Функция ФлагЗадачиПроцесса(ЗадачаПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Флаг = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФлагиОбъектов.Флаг
		|ИЗ
		|	РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|ГДЕ
		|	ФлагиОбъектов.Объект = &ЗадачаПроцесса
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФлагиОбъектов.Объект,
		|	ФлагиОбъектов.ФизическоеЛицо");
	
	Запрос.УстановитьПараметр("ЗадачаПроцесса", ЗадачаПроцесса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Флаг = Выборка.Флаг;
	КонецЕсли;
	
	Возврат Флаг;
	
КонецФункции

// Если у Объекта установлен флаг то очищает его,
// иначе устанавливает.
//
// Параметры:
//  Объект - ДокументСсылка.ВходящееПисьмо
//         - ЗадачаСсылка.ЗадачаИсполнителя
//         - ДокументСсылка.ИсходящееПисьмо
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - сотрудник, установивший флаг
//  Флаг - ПеречислениеСсылка.ФлагиОбъектов - новое значение флага, на которое следует
//         заменить текущее.
//
Процедура ПереключитьФлаг(Объект, ФизическоеЛицо, Флаг) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьФлаг = Истина;
		
		Запись = СоздатьМенеджерЗаписи();
		Запись.Объект = Объект;
		Запись.ФизическоеЛицо = ФизическоеЛицо;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Удалить();
			УстановитьФлаг = Ложь;
		КонецЕсли;
	
		Если УстановитьФлаг Тогда
			Запись.Объект = Объект;
			Запись.ФизическоеЛицо = ФизическоеЛицо;
			Запись.Флаг = Флаг;
			Запись.Записать(Истина);
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоЗадачеПроцесса(Объект);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливате флаг задачи процесса.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//  Флаг - ПеречислениеСсылка.ФлагиОбъектов
//  ОтключитьОбновлениеЗадач - Булево
//
Процедура УстановитьФлагЗадачиПроцесса(ЗадачаПроцесса, ФизическоеЛицо, Флаг, ОтключитьОбновлениеЗадач)
	
	Если Не ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ЗадачаПроцесса);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект = ЗадачаПроцесса;
		НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
		НоваяЗапись.Флаг = Флаг;
		
		НаборЗаписей.Записать();
		
		Если Не ОтключитьОбновлениеЗадач Тогда
			ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоЗадачеПроцесса(ЗадачаПроцесса);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Очищает запись.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  ОтключитьОбновлениеЗадач - Булево
//
Процедура ОчиститьФлагЗадачиПроцесса(ЗадачаПроцесса, ОтключитьОбновлениеЗадач)
	
	Если Не ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ЗадачаПроцесса);
		
		НаборЗаписей.Записать();
		
		Если Не ОтключитьОбновлениеЗадач Тогда
			ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоЗадачеПроцесса(ЗадачаПроцесса);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли