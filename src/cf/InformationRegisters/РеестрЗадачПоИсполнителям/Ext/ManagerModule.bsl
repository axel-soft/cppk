#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обновляет записи по задаче.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
// 
Процедура ОбновитьПоЗадаче(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ТаблицаАктивныеДействия = Документы.ДействиеЗадачи.АктивныеДействияПоЗадаче(Задача);
	Для Каждого ДанныеДействия Из ТаблицаАктивныеДействия Цикл
		Если ИнформационнаяБазаФайловая Тогда
			//@skip-check query-in-loop
			ОбновитьПоДействиюЗадачи(ДанныеДействия.ДействиеЗадачи);
		Иначе
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"РегистрСведений.РеестрЗадачПоИсполнителям",
				"Документ.ДействиеЗадачи",
				ДанныеДействия.ДействиеЗадачи);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет записи по действию задачи.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  КэшДанных - Структура,
//              Неопределено.
// 
Процедура ОбновитьПоДействиюЗадачи(ДействиеЗадачи, КэшДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДействиеЗадачи);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РеестрЗадачПоИсполнителям");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ДействиеЗадачи", ДействиеЗадачи);
		Блокировка.Заблокировать();
		
		РеестрыЗадачи = Справочники.РеестрыЗадач.РеестрыДействияЗадачи(ДействиеЗадачи, КэшДанных);
		Если КэшДанных <> Неопределено И Не КэшДанных.Свойство("РеестрыДействияЗадачи") Тогда
			КэшДанных.Вставить("РеестрыДействияЗадачи", РеестрыЗадачи);
		КонецЕсли;
		
		ВостребованныеРеестры = Новый Соответствие;
		Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
			ВостребованныеРеестры.Вставить(РеестрЗадачи, Истина);
		КонецЦикла;
		
		Если РеестрыЗадачи.Количество() > 0 Тогда
			ДанныеРеестра = ДанныеРеестра(ДействиеЗадачи, КэшДанных);
		Иначе
			ДанныеРеестра = НовыеДанныеРеестра();
		КонецЕсли;
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДействиеЗадачи.Установить(ДействиеЗадачи);
		
		НаборЗаписей.Прочитать();
		
		СтарыеСтрокиРеестров = Новый Соответствие;
		Для Каждого СтараяЗапись Из НаборЗаписей Цикл
			СтарыеСтрокиРеестров[СтараяЗапись.РеестрЗадач] = СтараяЗапись;
		КонецЦикла;
		
		// Добавим новые и обновим существующие записи.
		Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
			
			СтараяСтрокаРеестра = СтарыеСтрокиРеестров[РеестрЗадачи];
			ЭтоНовыйРеестр = СтараяСтрокаРеестра = Неопределено;
			Если ЭтоНовыйРеестр Тогда
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.РеестрЗадач = РеестрЗадачи;
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеРеестра);
				
			Иначе
				
				ЗаполнитьЗначенияСвойств(СтараяСтрокаРеестра, ДанныеРеестра);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Удалим невостребованные записи.
		КоличествоЭлементов = НаборЗаписей.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			
			СтараяСтрокаРеестра = НаборЗаписей[КоличествоЭлементов - Индекс];
			
			ЭтоВостребованныйРеестр =
				ВостребованныеРеестры[СтараяСтрокаРеестра.РеестрЗадач] = Истина;
			ЭтоАктуальнаяДатаРеестра =
				СтараяСтрокаРеестра.Дата = ДанныеРеестра.Дата;
			
			Если ЭтоВостребованныйРеестр И ЭтоАктуальнаяДатаРеестра Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей.Удалить(СтараяСтрокаРеестра);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует данные действий задач из кэша.
// 
// Параметры:
//  МассивДействийЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ДанныеДействийЗадач(МассивДействийЗадач) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДействияЗадач.Дата,
		|	ДействияЗадач.ДействиеЗадачи,
		|	ДействияЗадач.Автор,
		|	ДействияЗадач.ВидДействия,
		|	ДействияЗадач.ВидЗадачи,
		|	ДействияЗадач.ВидПриложения,
		|	ДействияЗадач.ВидСостоянияУчастниковЗадач,
		|	ДействияЗадач.ВРаботе,
		|	ДействияЗадач.ВСрок,
		|	ДействияЗадач.Выполнено,
		|	ДействияЗадач.ДатаВыполнения,
		|	ДействияЗадач.ДатаНачала,
		|	ДействияЗадач.ДатаНачалаУчета,
		|	ДействияЗадач.ДатаОкончанияУчета,
		|	ДействияЗадач.ДатаСоздания,
		|	ДействияЗадач.ЕстьЗамещающие,
		|	ДействияЗадач.ЕстьПодзадачи,
		|	ДействияЗадач.Заголовок,
		|	ДействияЗадач.Задача,
		|	ДействияЗадач.Запланировано,
		|	ДействияЗадач.Исполнитель,
		|	ДействияЗадач.Истекает,
		|	ДействияЗадач.КоличествоПереносовСроков,
		|	ДействияЗадач.КонтрольныйСрок,
		|	ДействияЗадач.КонтрольныйСрокОбщий,
		|	ДействияЗадач.Новое,
		|	ДействияЗадач.ОжидаетВыполнения,
		|	ДействияЗадач.ОжидаетПроверки,
		|	ДействияЗадач.ОписаниеПоступившихОбновлений,
		|	ДействияЗадач.ПоступилиОбновления,
		|	ДействияЗадач.Приоритет,
		|	ДействияЗадач.Проект,
		|	ДействияЗадач.Просрочено,
		|	ДействияЗадач.ПросроченоИОжидаетВыполнения,
		|	ДействияЗадач.РезультатДействия,
		|	ДействияЗадач.СостояниеКонтроля,
		|	ДействияЗадач.СостояниеУчастникаЗадачи,
		|	ДействияЗадач.Срок,
		|	ДействияЗадач.ТипПриложения,
		|	ДействияЗадач.ТрудоемкостьДо,
		|	ДействияЗадач.ТрудоемкостьОт,
		|	ДействияЗадач.Трудозатраты,
		|	ДействияЗадач.Флаг,
		|	ДействияЗадач.МожетБытьПросрочена
		|ИЗ
		|	РегистрСведений.РеестрЗадачПоИсполнителям КАК ДействияЗадач
		|ГДЕ
		|	ДействияЗадач.ДействиеЗадачи В (&МассивДействийЗадач)
		|	И ДействияЗадач.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи)");
	
	Запрос.УстановитьПараметр("МассивДействийЗадач", МассивДействийЗадач);
	
	ДанныеДействийЗадач = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеДействийЗадач;
	
КонецФункции

// Определяет задачи реестра.
// 
// Параметры:
//  РеестрЗадач - СправочникСсылка.РеестрыЗадач
//  Состояние - Строка
//  ТолькоПерваяПорция - Булево
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   * Заголовок - Строка
//
Функция ЗадачиРеестра(РеестрЗадач, Состояние, ТолькоПерваяПорция) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Состояние = "Новое" Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
			|	ДействияЗадач.ДействиеЗадачи КАК ДействиеЗадачи,
			|	ДействияЗадач.Заголовок КАК Заголовок
			|ИЗ
			|	РегистрСведений.РеестрЗадачПоИсполнителям КАК ДействияЗадач
			|ГДЕ
			|	ДействияЗадач.Новое
			|	И ДействияЗадач.РеестрЗадач = &РеестрЗадач");
		
	ИначеЕсли Состояние = "ПросроченоИОжидаетВыполнения" Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
			|	ДействияЗадач.ДействиеЗадачи КАК ДействиеЗадачи,
			|	ДействияЗадач.Заголовок КАК Заголовок
			|ИЗ
			|	РегистрСведений.РеестрЗадачПоИсполнителям КАК ДействияЗадач
			|ГДЕ
			|	ДействияЗадач.ПросроченоИОжидаетВыполнения
			|	И ДействияЗадач.РеестрЗадач = &РеестрЗадач");
		
	ИначеЕсли Состояние = "ОжидаетВыполнения" Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
			|	ДействияЗадач.ДействиеЗадачи КАК ДействиеЗадачи,
			|	ДействияЗадач.Заголовок КАК Заголовок
			|ИЗ
			|	РегистрСведений.РеестрЗадачПоИсполнителям КАК ДействияЗадач
			|ГДЕ
			|	ДействияЗадач.ОжидаетВыполнения
			|	И ДействияЗадач.РеестрЗадач = &РеестрЗадач");
		
	ИначеЕсли Состояние = "Истекает" Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
			|	ДействияЗадач.ДействиеЗадачи КАК ДействиеЗадачи,
			|	ДействияЗадач.Заголовок КАК Заголовок
			|ИЗ
			|	РегистрСведений.РеестрЗадачПоИсполнителям КАК ДействияЗадач
			|ГДЕ
			|	ДействияЗадач.Истекает
			|	И ДействияЗадач.РеестрЗадач = &РеестрЗадач");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестное состояние %1'"),
			Состояние);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеестрЗадач) Тогда
		ЗадачиРееестра = Новый ТаблицаЗначений;
		ЗадачиРееестра.Колонки.Добавить("ДействиеЗадачи");
		ЗадачиРееестра.Колонки.Добавить("Заголовок");
		Возврат ЗадачиРееестра;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РеестрЗадач", РеестрЗадач);
	
	Если Не ТолькоПерваяПорция Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 20", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗадачиРееестра = РезультатЗапроса.Выгрузить();
	
	Возврат ЗадачиРееестра;
	
КонецФункции

// Определяет кэшируемые в данном регистре реквизиты действий задач.
//
// Возвращаемое значение:
//  Строка - Кэшируемые в данном регистре реквизиты действий задач.
//
Функция КэшируемыеРеквизитыДействий() Экспорт
	
	Возврат "ВидДействия, ВидУчастника, Дата, ДатаВыполнения, ДатаНачала, ЕстьОсобыйСрок, Задача,
		|Исполнитель, ОсобыйАвтор, ОсобыйЗаголовок, ОсобыйСрок, Проведен, РезультатДействия,
		|СостояниеУчастникаЗадачи, Флаг";
	
КонецФункции

// Определяет кэшируемые в данном регистре реквизиты задач.
//
// Возвращаемое значение:
//  Строка - Кэшируемые в данном регистре реквизиты задач.
//
Функция КэшируемыеРеквизитыЗадач() Экспорт
	
	Возврат "Автор, ВидЗадачи, ВидПриложения, ДатаНачалаПлан, ДатаОтмены, Заголовок, Приоритет,
		|Проект, Срок, ТрудоемкостьОт, ТрудоемкостьДо, ТипПриложения, Участники";
	
КонецФункции

// Помечает задачи истекающими.
//
Процедура ПометитьИстекающиеЗадачи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействияЗадач.ДействиеЗадачи
		|ИЗ
		|	РегистрСведений.РеестрЗадачПоИсполнителям КАК ДействияЗадач
		|ГДЕ
		|	ДействияЗадач.МожетБытьПросрочена
		|	И ДействияЗадач.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи)
		|	И ДействияЗадач.Срок МЕЖДУ &ТекущаяДатаСеанса И &ГраницаИстеченияСрока
		|	И ДействияЗадач.Истекает = ЛОЖЬ
		|	И ДействияЗадач.Срок <> ДАТАВРЕМЯ(1, 1, 1)");
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ГраницаИстеченияСрока", РаботаСЗадачами.ГраницаИстеченияСрока());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//@skip-check query-in-loop
		ОбновитьПоДействиюЗадачи(Выборка.ДействиеЗадачи);
	КонецЦикла;
	
КонецПроцедуры

// Помечает задачи просроченными.
//
Процедура ПометитьПросроченныеЗадачи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействияЗадач.ДействиеЗадачи
		|ИЗ
		|	РегистрСведений.РеестрЗадачПоИсполнителям КАК ДействияЗадач
		|ГДЕ
		|	ДействияЗадач.МожетБытьПросрочена
		|	И ДействияЗадач.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи)
		|	И ДействияЗадач.Срок <= &ТекущаяДатаСеанса
		|	И ДействияЗадач.Срок <> ДАТАВРЕМЯ(1, 1, 1)");
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//@skip-check query-in-loop
		ОбновитьПоДействиюЗадачи(Выборка.ДействиеЗадачи);
	КонецЦикла;
	
КонецПроцедуры

// Данные реестра.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  КэшДанных - Структура,
//              Неопределено.
// 
// Возвращаемое значение:
//  См. НовыеДанныеРеестра.
// 
Функция ДанныеРеестра(ДействиеЗадачи, КэшДанных = Неопределено) Экспорт
	
	ДанныеРеестра = НовыеДанныеРеестра();
	ДанныеРеестра.ДействиеЗадачи = ДействиеЗадачи;
	ДанныеРеестра.ЕстьПодзадачи = РаботаСЗадачами.ЕстьПодзадачи(ДействиеЗадачи);
	ДанныеРеестра.Трудозатраты = Трудозатраты(ДействиеЗадачи);
	
	ПараметрыКонтроляДляКэша = Справочники.Контроль.ПараметрыКонтроляДляКэша(ДействиеЗадачи, КэшДанных);
	ДанныеРеестра.СостояниеКонтроля = ПараметрыКонтроляДляКэша.СостояниеКонтроля;
	ДанныеРеестра.КонтрольныйСрок = ПараметрыКонтроляДляКэша.СрокИсполнения;
	ДанныеРеестра.КонтрольныйСрокОбщий = ПараметрыКонтроляДляКэша.СрокИсполненияОбщий;
	
	ОписаниеПоступившихОбновлений =
		РаботаСЗадачами.ОписаниеПоступившихОбновленийДействияЗадачи(ДействиеЗадачи);
	ДанныеРеестра.ОписаниеПоступившихОбновлений = ОписаниеПоступившихОбновлений;
	
	Если КэшДанных <> Неопределено И КэшДанных.Свойство("ДанныеДействияЗадачи") Тогда
		РеквизитыДействия = КэшДанных.ДанныеДействияЗадачи;
	Иначе
		КэшируемыеРеквизитыДействия =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.КэшируемыеРеквизитыДействий();
		ОбщегоНазначенияДокументооборот.ДополнитьОтслеживаемыеРеквизиты(
			КэшируемыеРеквизитыДействия,
			КэшируемыеРеквизитыДействий());
		РеквизитыДействия =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, КэшируемыеРеквизитыДействия);
	КонецЕсли;
	ОбновитьДанныеРеестраПоДействию(ДанныеРеестра, РеквизитыДействия);
	
	Если КэшДанных <> Неопределено И КэшДанных.Свойство("ДанныеЗадачи") Тогда
		РеквизитыЗадачи = КэшДанных.ДанныеЗадачи;
	Иначе
		КэшируемыеРеквизитыЗадач =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.КэшируемыеРеквизитыЗадач();
		ОбщегоНазначенияДокументооборот.ДополнитьОтслеживаемыеРеквизиты(
			КэшируемыеРеквизитыЗадач,
			КэшируемыеРеквизитыЗадач());
		РеквизитыЗадачи =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеРеестра.Задача, КэшируемыеРеквизитыЗадач);
	КонецЕсли;
	
	ОбновитьДанныеРеестраПоЗадаче(ДанныеРеестра, РеквизитыДействия, РеквизитыЗадачи);
	
	Возврат ДанныеРеестра;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	Если ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		ОбновитьПоДействиюЗадачи(Выборка.КлючВлияющихДанных);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("ДокументСсылка.Задача") Тогда
		
		ОбновитьПоЗадаче(Выборка.КлючВлияющихДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует пустую структуру данных реестра.
// 
// Возвращаемое значение:
//  Структура - Новые данные реестра:
//   * Дата - Дата.
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//   * Автор - ОпределяемыйТип.УчастникЗадач, Неопределено - Автор.
//   * ВидДействия - СправочникСсылка.ВидыДействийЗадач.
//   * ВидЗадачи - СправочникСсылка.ВидыЗадач.
//   * ВидПриложения - ОпределяемыйТип.ВидПриложенияЗадач, Неопределено - Вид приложения.
//   * ВидСостоянияУчастниковЗадач - ПеречислениеСсылка.ВидыСостоянийУчастниковЗадач.
//   * ВРаботе - Булево.
//   * ВСрок - Булево.
//   * Выполнено - Булево.
//   * ДатаВыполнения - Дата.
//   * ДатаНачала - Дата.
//   * ДатаНачалаУчета - Дата.
//   * ДатаОкончанияУчета - Дата.
//   * ДатаСоздания - Дата.
//   * ЕстьЗамещающие - Булево.
//   * ЕстьПодзадачи - Булево.
//   * Заголовок - Строка.
//   * Задача - ДокументСсылка.Задача.
//   * Запланировано - Булево.
//   * Исполнитель - ОпределяемыйТип.УчастникЗадач, Неопределено - Исполнитель.
//   * Истекает - Булево.
//   * КоличествоПереносовСроков - Число.
//   * КонтрольныйСрок - Дата.
//   * КонтрольныйСрокОбщий - Дата.
//   * Новое - Булево.
//   * ОжидаетВыполнения - Булево.
//   * ОжидаетПроверки - Булево.
//   * ОписаниеПоступившихОбновлений - Строка.
//   * ПоступилиОбновления - Булево.
//   * Приоритет - СправочникСсылка.ПриоритетыЗадач.
//   * Проект - СправочникСсылка.Проекты.
//   * Просрочено - Булево.
//   * ПросроченоИОжидаетВыполнения - Булево.
//   * РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//   * СостояниеКонтроля - ПеречислениеСсылка.СостоянияКонтроля.
//   * СостояниеУчастникаЗадачи - СправочникСсылка.СостоянияУчастниковЗадач.
//   * Срок - Дата.
//   * ТипПриложения - ПеречислениеСсылка.ТипыПриложенийЗадач.
//   * ТрудоемкостьДо - Число.
//   * ТрудоемкостьОт - Число.
//   * Трудозатраты - Число.
//   * Флаг - ПеречислениеСсылка.ФлагиОбъектов.
//   * МожетБытьПросрочена - Булево.
// 
Функция НовыеДанныеРеестра()
	
	ДанныеРеестра = Новый Структура;
	ДанныеРеестра.Вставить("Дата", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("ДействиеЗадачи", Документы.ДействиеЗадачи.ПустаяСсылка());
	ДанныеРеестра.Вставить("Автор", Неопределено);
	ДанныеРеестра.Вставить("ВидДействия", Справочники.ВидыДействийЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("ВидЗадачи", Справочники.ВидыЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("ВидПриложения", Неопределено);
	ДанныеРеестра.Вставить("ВидСостоянияУчастниковЗадач",
		Перечисления.ВидыСостоянийУчастниковЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("ВРаботе", Ложь);
	ДанныеРеестра.Вставить("ВСрок", Ложь);
	ДанныеРеестра.Вставить("Выполнено", Ложь);
	ДанныеРеестра.Вставить("ДатаВыполнения", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("ДатаНачала", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("ДатаНачалаУчета", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("ДатаОкончанияУчета", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("ДатаСоздания", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("ЕстьЗамещающие", Ложь);
	ДанныеРеестра.Вставить("ЕстьПодзадачи", Ложь);
	ДанныеРеестра.Вставить("Заголовок", "");
	ДанныеРеестра.Вставить("Задача", Документы.Задача.ПустаяСсылка());
	ДанныеРеестра.Вставить("Запланировано", Ложь);
	ДанныеРеестра.Вставить("Исполнитель", Неопределено);
	ДанныеРеестра.Вставить("Истекает", Ложь);
	ДанныеРеестра.Вставить("КоличествоПереносовСроков", 0);
	ДанныеРеестра.Вставить("КонтрольныйСрок", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("КонтрольныйСрокОбщий", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("Новое", Ложь);
	ДанныеРеестра.Вставить("ОжидаетВыполнения", Ложь);
	ДанныеРеестра.Вставить("ОжидаетПроверки", Ложь);
	ДанныеРеестра.Вставить("ОписаниеПоступившихОбновлений", "");
	ДанныеРеестра.Вставить("ПоступилиОбновления", Ложь);
	ДанныеРеестра.Вставить("Приоритет", Справочники.ПриоритетыЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	ДанныеРеестра.Вставить("Просрочено", Ложь);
	ДанныеРеестра.Вставить("ПросроченоИОжидаетВыполнения", Ложь);
	ДанныеРеестра.Вставить("РезультатДействия", Справочники.РезультатыДействийЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("СостояниеКонтроля", Перечисления.СостоянияКонтроля.ПустаяСсылка());
	ДанныеРеестра.Вставить("СостояниеУчастникаЗадачи",
		Справочники.СостоянияУчастниковЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("Срок", Дата(1, 1, 1));
	ДанныеРеестра.Вставить("ТипПриложения", Перечисления.ТипыПриложенийЗадач.ПустаяСсылка());
	ДанныеРеестра.Вставить("ТрудоемкостьДо", 0);
	ДанныеРеестра.Вставить("ТрудоемкостьОт", 0);
	ДанныеРеестра.Вставить("Трудозатраты", 0);
	ДанныеРеестра.Вставить("Флаг", Перечисления.ФлагиОбъектов.ПустаяСсылка());
	ДанныеРеестра.Вставить("МожетБытьПросрочена", Ложь);
	
	Возврат ДанныеРеестра;
	
КонецФункции

// Определяет фактические трудозатраты по действию задачи.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Число.
// 
Функция Трудозатраты(ДействиеЗадачи)
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат 0;
	КонецЕсли;
	
	ИсточникиТрудозатрат = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи);
	
	ТрудозатратыСекунд = УчетВремени.ФактическиеТрудозатратыПоИсточникам(ИсточникиТрудозатрат);
	ТрудозатратыЧасов = ТрудозатратыСекунд / 3600;
	
	Возврат ТрудозатратыЧасов;
	
КонецФункции

// Обновляет данные реестра по действию задачи.
//
// Параметры:
//  ДанныеРеестра - см. НовыеДанныеРеестра.
//  РеквизитыДействия - Структура - Реквизиты задачи.
//                      См. РегистрыСведений.РеестрЗадачПоИсполнителям.КэшируемыеРеквизитыДействий().
//
Процедура ОбновитьДанныеРеестраПоДействию(ДанныеРеестра, РеквизитыДействия)
	
	ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
		РеквизитыДействия.СостояниеУчастникаЗадачи);
	
	ВРаботе = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоДействиеВРаботе(ВидСостоянияУчастниковЗадач);
	Выполнено = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(ВидСостоянияУчастниковЗадач);
	Новое = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНовоеДействие(ВидСостоянияУчастниковЗадач);
	ОжидаетВыполнения = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастниковЗадач);
	ОжидаетПроверки = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидающееПроверкиДействие(ВидСостоянияУчастниковЗадач);
	ГраницаИстеченияСрока = РаботаСЗадачами.ГраницаИстеченияСрока();
	
	ДанныеРеестра.Исполнитель = РеквизитыДействия.Исполнитель;
	ДанныеРеестра.Дата = РеквизитыДействия.Дата;
	
	ДанныеРеестра.ВидДействия = РеквизитыДействия.ВидДействия;
	ДанныеРеестра.Выполнено = Выполнено;
	ДанныеРеестра.ВРаботе = ВРаботе;
	ДанныеРеестра.ВидСостоянияУчастниковЗадач = ВидСостоянияУчастниковЗадач;
	ДанныеРеестра.ДатаВыполнения = РеквизитыДействия.ДатаВыполнения;
	ДанныеРеестра.ДатаНачала = РеквизитыДействия.ДатаНачала;
	ДанныеРеестра.ДатаСоздания = РеквизитыДействия.Дата;
	ДанныеРеестра.Задача = РеквизитыДействия.Задача;
	ДанныеРеестра.Новое = Новое;
	ДанныеРеестра.ОжидаетВыполнения = ОжидаетВыполнения;
	ДанныеРеестра.ПоступилиОбновления = ОжидаетВыполнения И ЗначениеЗаполнено(ДанныеРеестра.ОписаниеПоступившихОбновлений);
	ДанныеРеестра.ОжидаетПроверки = ОжидаетПроверки;
	ДанныеРеестра.Запланировано = Новое Или ВРаботе Или ОжидаетПроверки;
	ДанныеРеестра.РезультатДействия = РеквизитыДействия.РезультатДействия;
	ДанныеРеестра.СостояниеУчастникаЗадачи = РеквизитыДействия.СостояниеУчастникаЗадачи;
	ДанныеРеестра.Флаг = РеквизитыДействия.Флаг;
	ДанныеРеестра.ЕстьЗамещающие = РегистрыСведений.ВсеИсполнителиДействийЗадач.ЕстьЗамещающиеПоДействию(
		ДанныеРеестра.ДействиеЗадачи);
	
	Просрочено = Документы.ДействиеЗадачи.Просрочено(
		ДанныеРеестра.Срок,
		РеквизитыДействия.СостояниеУчастникаЗадачи,
		РеквизитыДействия.ДатаВыполнения);
	
	ДанныеРеестра.Просрочено = Просрочено;
	ДанныеРеестра.ПросроченоИОжидаетВыполнения = Просрочено И ДанныеРеестра.ОжидаетВыполнения;
	ДанныеРеестра.МожетБытьПросрочена = ДанныеРеестра.ОжидаетВыполнения И ЗначениеЗаполнено(ДанныеРеестра.Срок) И Не Просрочено;
	
	ИстекаетСрок = ДанныеРеестра.МожетБытьПросрочена И ДанныеРеестра.Срок < ГраницаИстеченияСрока;
	
	ДанныеРеестра.Истекает = ИстекаетСрок;
	ДанныеРеестра.ВСрок = ОжидаетВыполнения И Не Просрочено И Не ИстекаетСрок;
	
КонецПроцедуры

// Обновляет данные реестра по задаче.
//
// Параметры:
//  ДанныеРеестра - см. НовыеДанныеРеестра.
//  РеквизитыДействия - Структура - Реквизиты действия.
//                      См. РегистрыСведений.РеестрЗадачПоИсполнителям.КэшируемыеРеквизитыДействий().
//  РеквизитыЗадачи - Структура - Реквизиты задачи.
//                    См. РегистрыСведений.РеестрЗадачПоИсполнителям.КэшируемыеРеквизитыДействий().
//
Процедура ОбновитьДанныеРеестраПоЗадаче(ДанныеРеестра, РеквизитыДействия, РеквизитыЗадачи)
	
	Автор = Документы.ДействиеЗадачи.Автор(РеквизитыДействия.ОсобыйАвтор, РеквизитыЗадачи.Автор);
	Заголовок = Документы.ДействиеЗадачи.ЗаголовокДействияЗадачи(
		РеквизитыДействия.ВидДействия,
		РеквизитыДействия.ОсобыйЗаголовок,
		Строка(РеквизитыДействия.Задача));
	Срок = Документы.ДействиеЗадачи.Срок(
		РеквизитыДействия.ЕстьОсобыйСрок,
		РеквизитыДействия.ОсобыйСрок,
		РеквизитыЗадачи.Срок);
	Просрочено = Документы.ДействиеЗадачи.Просрочено(
		Срок,
		РеквизитыДействия.СостояниеУчастникаЗадачи,
		РеквизитыДействия.ДатаВыполнения);
	
	ГраницаИстеченияСрока = РаботаСЗадачами.ГраницаИстеченияСрока();
	
	Трудоемкость = Документы.Задача.ТрудоемкостьУчастника(
		РеквизитыДействия.ВидУчастника,
		РеквизитыЗадачи.ТрудоемкостьОт,
		РеквизитыЗадачи.ТрудоемкостьДо,
		РеквизитыЗадачи.Участники);
	
	ДанныеРеестра.Автор = Автор;
	ДанныеРеестра.ВидЗадачи = РеквизитыЗадачи.ВидЗадачи;
	ДанныеРеестра.ВидПриложения = РеквизитыЗадачи.ВидПриложения;
	ДанныеРеестра.ТипПриложения = РеквизитыЗадачи.ТипПриложения;
	
	Если ЗначениеЗаполнено(РеквизитыДействия.ДатаНачала) Тогда
		ДанныеРеестра.ДатаНачалаУчета = РеквизитыДействия.ДатаНачала;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.ДатаНачалаПлан) Тогда
		ДанныеРеестра.ДатаНачалаУчета = РеквизитыЗадачи.ДатаНачалаПлан;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыДействия.Дата) Тогда
		ДанныеРеестра.ДатаНачалаУчета = РеквизитыДействия.Дата;
	Иначе
		ДанныеРеестра.ДатаНачалаУчета = Дата(1, 1, 1);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДействия.ДатаВыполнения) Тогда
		ДанныеРеестра.ДатаОкончанияУчета = РеквизитыДействия.ДатаВыполнения;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.ДатаОтмены) Тогда
		ДанныеРеестра.ДатаОкончанияУчета = РеквизитыЗадачи.ДатаОтмены;
	Иначе
		ДанныеРеестра.ДатаОкончанияУчета = Дата(2100, 1, 1); // Считаем, что нет даты окончания - она где-то в будущем.
	КонецЕсли;
	
	ДанныеРеестра.Заголовок = Заголовок;
	ДанныеРеестра.Приоритет = РеквизитыЗадачи.Приоритет;
	ДанныеРеестра.Проект = РеквизитыЗадачи.Проект;
	ДанныеРеестра.ТрудоемкостьОт = Трудоемкость.От;
	ДанныеРеестра.ТрудоемкостьДо = Трудоемкость.До;
	ДанныеРеестра.Срок = Срок;
	
	КоличествоПереносовЗадачи = РегистрыСведений.ИсторияЗадач.СобытияПоЗадаче(
		ДанныеРеестра.Задача,
		Документы.ДействиеЗадачи.ПустаяСсылка(),
		Справочники.СобытияЗадач.ПеренесенСрок).Количество();
	КоличествоПереносовДействия= РегистрыСведений.ИсторияЗадач.СобытияПоЗадаче(
		ДанныеРеестра.Задача,
		ДанныеРеестра.ДействиеЗадачи,
		Справочники.СобытияЗадач.ПеренесенСрок).Количество();
	ДанныеРеестра.КоличествоПереносовСроков = КоличествоПереносовЗадачи + КоличествоПереносовДействия;
	
	ДанныеРеестра.Просрочено = Просрочено;
	ДанныеРеестра.ПросроченоИОжидаетВыполнения = Просрочено И ДанныеРеестра.ОжидаетВыполнения;
	ДанныеРеестра.МожетБытьПросрочена = ДанныеРеестра.ОжидаетВыполнения И ЗначениеЗаполнено(Срок) И Не Просрочено;
	
	ИстекаетСрок = ДанныеРеестра.МожетБытьПросрочена И Срок < ГраницаИстеченияСрока;
	
	ДанныеРеестра.Истекает = ИстекаетСрок;
	ДанныеРеестра.ВСрок = ДанныеРеестра.ОжидаетВыполнения И Не Просрочено И Не ИстекаетСрок;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли