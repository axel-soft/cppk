#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Изменяет доступность времени
Функция ИзменитьДоступностьВремени(ФизЛицо, ДатаНачала, ДатаОкончания, Занят) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) 
		Или ДатаОкончания <= ДатаНачала Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СводнаяТаблицаЗанятости = РаботаСРабочимКалендаремСервер.ПолучитьТаблицуЗанятости(
		ФизЛицо, ДатаНачала, ДатаОкончания);
	
	Если Занят = Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ФизическоеЛицо", ФизЛицо);
		ПараметрыОтбора.Вставить("Занят", Перечисления.СостоянияЗанятости.Доступен);
		СтрокиСвободногоВремени = СводнаяТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиСвободногоВремени.Количество() <> 0 Тогда
			Занят = Перечисления.СостоянияЗанятости.Занят;
		Иначе
			Занят = Перечисления.СостоянияЗанятости.Доступен;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаЗанятости = ПолучитьТаблицуЗанятости(ФизЛицо, ДатаНачала, ДатаОкончания);
		Для Каждого Занятость Из ТаблицаЗанятости Цикл
			
			Если Занятость.ДатаНачала < ДатаОкончания
				И Занятость.ДатаОкончания > ДатаНачала Тогда
				
				Если Занятость.ДатаНачала < ДатаНачала Тогда
					МенеджерЗаписи = РегистрыСведений.ЗанятостьФизическихЛиц.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Занятость);
					МенеджерЗаписи.ДатаОкончания = ДатаНачала;
					МенеджерЗаписи.Записать();
				КонецЕсли;
				
				Если Занятость.ДатаОкончания > ДатаОкончания Тогда
					МенеджерЗаписи = РегистрыСведений.ЗанятостьФизическихЛиц.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Занятость);
					МенеджерЗаписи.ДатаНачала = ДатаОкончания;
					МенеджерЗаписи.Записать();
				КонецЕсли;
				
				МенеджерЗаписи = РегистрыСведений.ЗанятостьФизическихЛиц.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Занятость);
				МенеджерЗаписи.Удалить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		МенеджерЗаписи = РегистрыСведений.ЗанятостьФизическихЛиц.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ФизическоеЛицо = ФизЛицо;
		МенеджерЗаписи.ДатаНачала = ДатаНачала;
		МенеджерЗаписи.ДатаОкончания = ДатаОкончания;
		МенеджерЗаписи.Занят = Занят;
		МенеджерЗаписи.Записать();
		
		// Удаляем записи из устаревшего регистра.
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗанятостьСотрудников.Сотрудник
			|ИЗ
			|	РегистрСведений.ЗанятостьСотрудников КАК ЗанятостьСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ЗанятостьСотрудников.Сотрудник = Сотрудники.Ссылка
			|ГДЕ
			|	Сотрудники.Владелец = &ФизЛицо";
		
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗанятостьСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Занят;
	
КонецФункции

// Возвращает таблицу занятости физических лиц.
//
Функция ПолучитьТаблицуЗанятости(Знач МассивФизЛиц, ДатаНачала, ДатаОкончания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(МассивФизЛиц) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ФизЛицо = МассивФизЛиц;
		МассивФизЛиц = Новый Массив;
		МассивФизЛиц.Добавить(ФизЛицо);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗанятостьФизическихЛиц.ФизическоеЛицо,
		|	ЗанятостьФизическихЛиц.ДатаНачала,
		|	ЗанятостьФизическихЛиц.ДатаОкончания,
		|	ЗанятостьФизическихЛиц.Занят,
		|	1 КАК Приоритет
		|ИЗ
		|	РегистрСведений.ЗанятостьФизическихЛиц КАК ЗанятостьФизическихЛиц
		|ГДЕ
		|	ЗанятостьФизическихЛиц.ФизическоеЛицо В(&МассивФизЛиц)
		|	И ЗанятостьФизическихЛиц.ДатаНачала < &ДатаОкончания
		|	И ЗанятостьФизическихЛиц.ДатаОкончания > &ДатаНачала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОсновныеСотрудники.ФизическоеЛицо,
		|	ЗанятостьСотрудников.ДатаНачала,
		|	ЗанятостьСотрудников.ДатаОкончания,
		|	ЗанятостьСотрудников.Занят,
		|	2
		|ИЗ
		|	РегистрСведений.ЗанятостьСотрудников КАК ЗанятостьСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудники КАК ОсновныеСотрудники
		|		ПО ЗанятостьСотрудников.Сотрудник = ОсновныеСотрудники.Сотрудник
		|ГДЕ
		|	ОсновныеСотрудники.ФизическоеЛицо В(&МассивФизЛиц)
		|	И ЗанятостьСотрудников.ДатаНачала < &ДатаОкончания
		|	И ЗанятостьСотрудников.ДатаОкончания > &ДатаНачала
		|	
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("МассивФизЛиц", МассивФизЛиц);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПользователиПоФизЛицам = ПользователиДокументооборот.ПользователиПоФизЛицам(МассивФизЛиц);
	
	ПриоритетыФизЛиц = Новый Соответствие();
	
	ТаблицаЗанятости = Новый ТаблицаЗначений();
	ТаблицаЗанятости.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаЗанятости.Колонки.Добавить("ДатаНачала");
	ТаблицаЗанятости.Колонки.Добавить("ДатаОкончания");
	ТаблицаЗанятости.Колонки.Добавить("Занят");
	
	Пока Выборка.Следующий() Цикл
		
		ПриоритетФизЛица = ПриоритетыФизЛиц[Выборка.ФизическоеЛицо];
		Если ПриоритетФизЛица = Неопределено Тогда
			ПриоритетыФизЛиц[Выборка.ФизическоеЛицо] = Выборка.Приоритет;
			ПриоритетФизЛица = Выборка.Приоритет;
		КонецЕсли;
		
		Если ПриоритетФизЛица <> Выборка.Приоритет Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗанятости = ТаблицаЗанятости.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗанятости, Выборка);
		
		ПользовательФизЛица = ПользователиПоФизЛицам[СтрокаЗанятости.ФизическоеЛицо];
		Если Не ЗначениеЗаполнено(ПользовательФизЛица) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗанятости.ДатаНачала = 
			РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(
				РаботаСЧасовымиПоясами.ПривестиМестноеВремяПользователяКВремениСеанса(
					СтрокаЗанятости.ДатаНачала,
					ПользовательФизЛица));
		СтрокаЗанятости.ДатаОкончания = 
			РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(
				РаботаСЧасовымиПоясами.ПривестиМестноеВремяПользователяКВремениСеанса(
					СтрокаЗанятости.ДатаОкончания,
					ПользовательФизЛица));
	КонецЦикла;
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

#КонецОбласти

#КонецЕсли