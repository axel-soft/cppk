#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
	
	ЗаголовокСодержаниеФайлы = НСтр("ru = 'Содержание, Файлы'");
	ЗаголовокЗадачиСвязи = НСтр("ru = 'Задачи, связи'");		
	ФорматДатыДляКолонокЗадач = ?(ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"), 
		"ДФ='dd.MM.yy H:mm'",
		"ДФ='dd.MM.yy'");
	
	Элементы.ЗадачиСрокИсполнения.Формат = ФорматДатыДляКолонокЗадач;
	СортироватьПо = "ДатаДокумента";
	НаправлениеСортировки = "Возр";
	
	ДоступныхТиповДокументов = 0;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДокументыПредприятия) Тогда 
		ДоступныхТиповДокументов = ДоступныхТиповДокументов + 1;
		ВнутренниеДоступны = Истина;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Проекты) Тогда
		Элементы.СписокСгруппироватьПоПроекту.Видимость = Ложь;
	КонецЕсли;
	
	Если ДоступныхТиповДокументов < 2 Тогда 
		Элементы.СписокСгруппироватьПоТипуДокумента.Видимость = Ложь;
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "ОтображениеИстекающихДокументов" Тогда
		ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента);
		ОтмеченныеПричины.Добавить(Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент);
		ЗаполнитьСписок();
	ИначеЕсли КлючНазначенияИспользования = "ОтображениеПросроченныхДокументов" Тогда
		ВсеПричины = Перечисления.ПричиныДобавленияВМоиДокументы.ВсеПричины();
		ОтмеченныеПричины.ЗагрузитьЗначения(ВсеПричины);
		ЗаполнитьСписок();
	Иначе
		НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяФормы + "/ТекущиеДанные", "");
		Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ОтмеченныеПричины") = Неопределено Тогда
			ВсеПричины = Перечисления.ПричиныДобавленияВМоиДокументы.ВсеПричины();
			ОтмеченныеПричины.ЗагрузитьЗначения(ВсеПричины);
			ЗаполнитьСписок();
		КонецЕсли;
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "ОтображениеИстекающихДокументов"
		Или КлючНазначенияИспользования = "ОтображениеПросроченныхДокументов" Тогда
		
		Элементы.ФормаГруппаСоздать.Видимость = Ложь;
		Элементы.ФормаДобавитьВСписок.Видимость = Ложь;
		Элементы.КонтекстноеМенюСоздать.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюДобавитьВСписок.Видимость = Ложь;
		Для Каждого ЭлементГруппы Из Элементы.СписокГруппаОтбор.ПодчиненныеЭлементы Цикл
			ЭлементГруппы.Доступность = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПометкуРежимуСортировки(ЭтотОбъект);
	
	// Сервис "1С:Share"
	ИспользоватьСервис1CShare = ИнтеграцияShareДокументооборот.ИспользоватьСервис1СShare();
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	ЭтоМобильноеУстройствоСБольшимЭкраном = МК_КлиентСервер.ЭтоМобильныйСБольшимЭкраном();
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекущееЗначениеГруппировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ДобавитьВыбранныйДокумент(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	ЭтоМобильноеУстройствоСБольшимЭкраном = МК_КлиентСервер.ЭтоМобильныйСБольшимЭкраном();
	МК_НастроитьОбластьПредпросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСписокМоиДокументы" Тогда
		ЗаполнитьСписок();
	КонецЕсли;
	
	Если ИмяСобытия = "ПрочтениеОбновитьСписок" Тогда
		ЗаполнитьСписок();
	КонецЕсли;
	
	Если ИмяСобытия = "ДокументСоздан" Тогда
		Если МоиДокументы.ДокументВходитВМоиДокументы(Параметр) Тогда 
			ЗаполнитьСписок();
		КонецЕсли;	
	КонецЕсли;	
	
	Если ИмяСобытия = "ДокументИзменен" И Параметр = ТекущийДокумент Тогда
		ОбновитьМиникарточку();
	КонецЕсли;	
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
				Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = ТекущийДокумент Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
			ОбзорСпискаДокументовКлиент.УстановитьДоступностьКоманд(ТекущиеДанные, ЭтотОбъект);
		КонецЕсли;
		
 	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = ТекущийДокумент Тогда 
				ОбновитьСтрокуФайла(Параметр.Файл);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ИмяСобытия = "БизнесПроцессСтартован" Тогда
		Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса")
			И Параметр.СсылкаНаПредметБизнесПроцесса = ТекущийДокумент Тогда
			ОбзорСпискаДокументовКлиент.ЗаполнитьСписокЗадач(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
		   И Параметр.Свойство("Владелец")
		   И Параметр.Владелец = ТекущийДокумент Тогда
			
			ОбзорСпискаДокументовКлиент.ЗаполнитьСписокФайлов(ЭтотОбъект);
			
			Если Параметр.Свойство("Файл") Тогда
				УстановитьТекущуюСтрокуФайла(Параметр.Файл);
				ОтметитьПризнакОригиналУНовогоФайла(Параметр.Файл);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ИмяСобытия = "ИзмененыСвязиДокумента" Или ИмяСобытия = "ИзмененыСвязиПодчиненныхДокументов")
		И Параметр.Документ = ТекущийДокумент Тогда
		ОбновитьМиникарточку();
	КонецЕсли;
	
	Если (ИмяСобытия = "ФайлыДокументаПомеченыНаУдаление" И Параметр = ТекущийДокумент)
		Или (ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = ТекущийДокумент) Тогда
		ОбзорСпискаДокументовКлиент.ЗаполнитьСписокФайлов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьГруппировку(ЭтотОбъект);
	ЗаполнитьСписок();
	
	Список.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	СписокПолный.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	УстановитьПометкуРежимуСортировки(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обзор
&НаКлиенте
Процедура ОбзорHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;	
	
	ПрефиксСсылки = "v8doc:";
	ДлинаПрефикса = СтрДлина(ПрефиксСсылки);
	
	Если Лев(ДанныеСобытия.Href, ДлинаПрефикса) <> ПрефиксСсылки Тогда 
		Возврат;
	КонецЕсли;	
	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, ДлинаПрефикса + 1);
	
	Если Найти(НавигационнаяСсылкаПоля, "ShowLinks") Тогда
		
		ОбзорСпискаДокументовКлиент.ПоказатьСвязи(ДанныеСобытия.Href);
		
		Возврат;
	КонецЕсли;
		
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныДобавленияПриАктивизацииСтроки(Элемент)
	
	Если ВидГруппировки = "ПричинаДобавления"
		И Элементы.ПричиныДобавления.ТекущиеДанные <> Неопределено
		И Элементы.ПричиныДобавления.ТекущиеДанные.Причина <> ТекущаяПричина Тогда
		ТекущаяПричина = Элементы.ПричиныДобавления.ТекущиеДанные.Причина;
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировок", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыДокументовПриАктивизацииСтроки(Элемент)
	
	Если ВидГруппировки = "ТипДокумента"
		И Элементы.ТипыДокументов.ТекущиеДанные <> Неопределено
		И Элементы.ТипыДокументов.ТекущиеДанные.Тип <> ТекущийТип Тогда
		ТекущийТип = Элементы.ТипыДокументов.ТекущиеДанные.Тип;
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировок", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПриАктивизацииСтроки(Элемент)
	
	Если ВидГруппировки = "Проект"
		И Элементы.Проекты.ТекущиеДанные <> Неопределено
		И Элементы.Проекты.ТекущиеДанные.Проект <> ТекущийПроект Тогда
		ТекущийПроект = Элементы.Проекты.ТекущиеДанные.Проект;
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировок", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ОбновитьДеревоПереписки();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанныеДокумент = Неопределено;
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда 	
		ТекущиеДанныеДокумент = Элементы.Список.ТекущиеДанные.Документ;
	КонецЕсли;
	
	Если ТекущийДокумент <> ТекущиеДанныеДокумент Тогда 
		ПодключитьОбработчикОжидания("ОбновитьМиникарточку", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если КлючНазначенияИспользования <> "" Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда 
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.Документ);
		ИмяТаблицы = ИмяТаблицыПоСсылке(ТекущиеДанные.Документ);
		
		Открытьформу(ИмяТаблицы + ".ФормаОбъекта", ПараметрыФормы, Элементы.Список);
		
	Иначе	
		
		ДобавитьВСписок();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяТаблицыПоСсылке(Документ)
	
	Возврат ОбщегоНазначения.ИмяТаблицыПоСсылке(Документ);
	
КонецФункции

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(,ТекущиеДанные.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдалитьИзСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления(Элемент)
	
	ОбновитьСписок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Строка.ЭтоДокументЭДО Тогда
		Если ИнтерфейсЭДОДокументооборотВызовСервера.ДоступныДляЧтенияВсеДокументыПакета(Строка.ДокументЭДО) Тогда
			ПоказатьЗначение(,Строка.ДокументЭДО);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Невозможно открыть документ ЭДО, так как он состоит в пакете, но не все документы пакета доступны для просмотра.'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Строка.ПодписанЭП Или ДокументПодписан Тогда
		РаботаСФайламиКлиент.ОткрытьФайлДокумента(Строка.Ссылка, ЭтаФорма);
	Иначе
		ВыборФайла(Строка.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ОбзорСпискаДокументовКлиент.УстановитьДоступностьКоманд(Элементы.ФайлыДокумента.ТекущиеДанные,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	ДобавлениеОригинала = Ложь;
	Если ВестиУчетСканКопийОригиналовДокументов Тогда
		Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
			И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда 
			
			Если Не ПараметрыДобавления.Свойство("ДобавлениеОригинала") Тогда
				Текст = НСтр("ru = 'В текущем состоянии документа можно добавить только скан-копию оригинала. Продолжить?'");
				
				СписокВариантовОтветов = Новый СписокЗначений;
				СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
				СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
				
				ПараметрыДобавления.Вставить("ДобавлениеОригинала", ДобавлениеОригинала);
				
				ПараметрыОбработчика = Новый Структура;
				ПараметрыОбработчика.Вставить("Элемент", Элемент);
				ПараметрыОбработчика.Вставить("Отказ", Отказ);
				ПараметрыОбработчика.Вставить("Копирование", Копирование);
				ПараметрыОбработчика.Вставить("Родитель", Родитель);
				ПараметрыОбработчика.Вставить("Группа", Группа);
				ПараметрыОбработчика.Вставить("ПараметрыДобавления", ПараметрыДобавления);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ФайлыПередНачаломДобавленияКлиентПродолжение",
					ЭтотОбъект,
					ПараметрыОбработчика);
				
				ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтотОбъект,
					НСтр("ru = 'Добавление файла'"),
					Текст,
					"ДобавлениеОригинала",
					"ЗадаватьВопросПриДобавленииСканКопииОригинала",
					СписокВариантовОтветов,,
					ОписаниеОповещения);
				Возврат;
			Иначе
				ДобавлениеОригинала = ПараметрыДобавления.ДобавлениеОригинала;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;          
	
	РольФайла = Неопределено;    
	ТекущиеДанные = Элементы.ФайлыДокумента.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(РольФайла) Тогда
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.РольФайла) Тогда
			РольФайла = ТекущиеДанные.РольФайла;
		ИначеЕсли Файлы.ПолучитьЭлементы().Количество() <> 0 Тогда	
			СтрФайлы = Файлы.ПолучитьЭлементы()[0];
			Если ЗначениеЗаполнено(СтрФайлы.РольФайла) Тогда
				РольФайла = СтрФайлы.РольФайла;
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;	
	
	ВладелецФайла = ТекущийДокумент;
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = ?(ДобавлениеОригинала, 2, 1);
			ДополнительныеПараметры = Новый Структура("ДоступнаОтметкаОригинала",
				ТипЗнч(ДоступныеПоля) <> Тип("Структура")
				Или ТипЗнч(ДоступныеПоля) = Тип("Структура") И ДоступныеПоля.Свойство("СоздатьФайлОригинал"));
			
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтотОбъект, РежимСоздания, Истина, ДобавлениеОригинала,,,,,,РольФайла,, ДополнительныеПараметры);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиентПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ПараметрыДобавления.ДобавлениеОригинала = Истина;
	ФайлыПередНачаломДобавленияКлиент(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.Отказ, 
		ПараметрыОбработчика.Копирование, 
		ПараметрыОбработчика.Родитель, 
		ПараметрыОбработчика.Группа, 
		ПараметрыОбработчика.ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтотОбъект, ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивФайлов = Параметры.МассивФайлов;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления);
		
		Если ПоказыватьУдаленныеФайлы Тогда 
			Для Каждого Файл Из МассивФайлов Цикл 
				ОбновитьСтрокуФайла(Файл);
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.ПодписанЭП Тогда
			Оповестить("ПрисоединенныйФайлПодписан", ТекущийДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущиеДанные = Элементы.ФайлыДокумента.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.ФайлыДокумента.ВыделенныеСтроки;
	
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ФайлыДокумента.ДанныеСтроки(ВыбраннаяСтрока);	
			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ТекущийЭлемент = Элементы.ФайлыДокумента;
	
	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда 

		РольФайла = Неопределено;
		ТекущиеДанные = Неопределено;
		Если Строка <> Неопределено Тогда
			ТекущиеДанные = Файлы.НайтиПоИдентификатору(Строка);
			Если ТекущиеДанные <> Неопределено Тогда
				РольФайла = ТекущиеДанные.РольФайла;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда
			Текст = СтрШаблон(
				НСтр("ru = 'В текущем состоянии ""%1"" файлы добавлять нельзя.'"),
				СостояниеТекст);
			ПоказатьПредупреждение(, Текст);
			
			Возврат;
		
		ИначеЕсли ВестиУчетСканКопийОригиналовДокументов 
			И ТипЗнч(ДоступныеПоля) = Тип("Структура") 
			И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный")
			И Не ПеретаскиваниеОригинала Тогда
			
			Текст = СтрШаблон(
				НСтр("ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'"),
				СостояниеТекст);
			
			СписокВариантовОтветов = Новый СписокЗначений;
			СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
			СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("Элемент", Элемент);
			ПараметрыОбработчика.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
			ПараметрыОбработчика.Вставить("Строка", Строка);
			ПараметрыОбработчика.Вставить("Поле", Поле);
			ПараметрыОбработчика.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ФайлыПеретаскиваниеПродолжение",
				ЭтотОбъект,
				ПараметрыОбработчика);
			
			ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтотОбъект,
				НСтр("ru = 'Перетаскивание файла'"),
				Текст,
				"ДобавлениеОригинала",
				"ЗадаватьВопросПриДобавленииСканКопииОригинала",
				СписокВариантовОтветов,,
				ОписаниеОповещения);
			Возврат;
		
		КонецЕсли;
		
		Если ПеретаскиваниеОригинала Тогда 
			ТекстПредупреждения = "";
			ПараметрыПеретаскивания.Значение = ДелопроизводствоКлиент.ОтобратьДляПеретаскиванияТолькоФайлыОригиналы(
				ПараметрыПеретаскивания, СостояниеТекст, ТекстПредупреждения);
				
			Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ВладелецФайлаСписка = ТекущийДокумент;
		НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
		РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания,
			ВладелецФайлаСписка, ЭтотОбъект, НеОткрыватьКарточкуПослеСозданияИзФайла, РольФайла);
			
		ОбзорСпискаДокументовКлиент.ЗаполнитьСписокФайлов(ЭтотОбъект);
		
	КонецЕсли;
	
	ПеретаскиваниеОригинала = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскиваниеПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		ПеретаскиваниеОригинала = Ложь;
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеОригинала = Истина;
	
	ФайлыПеретаскивание(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.ПараметрыПеретаскивания, 
		ПараметрыОбработчика.СтандартнаяОбработка, 
		ПараметрыОбработчика.Строка, 
		ПараметрыОбработчика.Поле);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗадачи

&НаКлиенте
Процедура ЗадачиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(
		ТекущиеДанные.ДействиеЗадачи,
		Неопределено,
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПереписки

&НаКлиенте
Процедура ДеревоПерепискиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;

	ТекущиеДанные = Элементы.ДеревоПереписки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение( , ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПерепискиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.ДеревоПереписки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение( , ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Команды отбора

&НаКлиенте
Процедура ОтборДобавленВручную(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ДобавленВручную");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;	
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНазначенаЗадачаМне(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.НазначенаЗадачаМне");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтправленаЗадачаОтМеня(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ОтправленаЗадачаОтМеня");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЯвляюсьАвторомДокумента(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЯвляюсьОтветственнымЗаДокумент(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЯвляюсьПодписантомДокумента(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЯвляюсьАвторомУтверждения(Команда)
	
	Причина = ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомУтвержденияДокумента");
	
	НайденныйЭлемент = ОтмеченныеПричины.НайтиПоЗначению(Причина);
	Если НайденныйЭлемент = Неопределено Тогда 
		ОтмеченныеПричины.Добавить(Причина);
	Иначе
		ОтмеченныеПричины.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

// Команды работы с файлами

&НаКлиенте
Процедура СоздатьФайл(Команда)
	
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элементы.ФайлыДокумента, Ложь, Ложь, Неопределено, Ложь, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФайл(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
			
	КомандыРаботыСФайламиКлиент.Редактировать(ТекущиеДанные.Ссылка);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТекущиеДанные = Элементы.ФайлыДокумента.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.ФайлыДокумента.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ФайлыДокумента.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыДокумента.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.ФайлыДокумента.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ФайлыДокумента.ДанныеСтроки(ВыбраннаяСтрока);	
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
				МассивФайлов, 
				УникальныйИдентификатор);
				
			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, 
			Неопределено, 
			УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Команда)
	
	ОбновитьМиникарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)
	
	ПоказыватьУдаленныеФайлы = Не ПоказыватьУдаленныеФайлы;
	
	ОбновитьМиникарточку();
	
	Элементы.ПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

// Команды работы со списком документов

&НаКлиенте
Процедура ДобавитьВСписокВыполнить(Команда)
	
	ДобавитьВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСпискаВыполнить(Команда)
	
	УдалитьИзСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок()
	
	ЗаполнитьСписок();
	УстановитьТекущееЗначениеГруппировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	
	ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(
		ТекущиеДанные.ДействиеЗадачи,
		Неопределено,
		Ложь);
	
КонецПроцедуры
// Команды сортировки

&НаКлиенте
Процедура СортироватьДатеДокумента(Команда)
	
	СортироватьПоКолонке("ДатаДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованию(Команда)
	
	СортироватьПоКолонке("Наименование");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВидуДокумента(Команда)
	
	СортироватьПоКолонке("ВидДокумента");
	
КонецПроцедуры

// Команды группировки

&НаКлиенте
Процедура СгруппироватьПричинеДобавления(Команда)
	
	СгруппироватьПоКолонке("ПричинаДобавления");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	
	СгруппироватьПоКолонке("");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТипуДокумента(Команда)
	
	СгруппироватьПоКолонке("ТипДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПроекту(Команда)
	
	СгруппироватьПоКолонке("Проект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенные(Команда)
	
	Сообщения = ПолучитьВыбранныеДокументы(Истина);
	КоличествоСообщений = Сообщения.Количество();
	Если Сообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоПрочтенных = 0;
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		
		Если ТипЗнч(Ссылка) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			Прочтен = Элементы.Список.ДанныеСтроки(Ссылка).Прочтен;
			
			Если Прочтен Тогда
				
				ЧислоПрочтенных = ЧислоПрочтенных + 1;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоставитьПометкуПрочтения = Истина;
	
	Если КоличествоСообщений = ЧислоПрочтенных Тогда
		ПоставитьПометкуПрочтения = Ложь;
	Иначе
		ПоставитьПометкуПрочтения = Истина;
	КонецЕсли;	
	
	Если КоличествоСообщений > 1 Тогда
		Если ПоставитьПометкуПрочтения Тогда
			Состояние(НСтр("ru = 'Документы помечаются как прочтенные. Пожалуйста подождите...'"));
		Иначе
			Состояние(НСтр("ru = 'Снимается пометка прочтенности. Пожалуйста подождите...'"));
		КонецЕсли;	
	КонецЕсли;
	
	ОповеститьОПрочтении = УстановитьПрочтение(Сообщения, ПоставитьПометкуПрочтения);
	
	РаботаСПрочтениямиКлиент.ОповеститьОПрочтении(Сообщения, ОповеститьОПрочтении);
	Если КоличествоСообщений > 1 Тогда
		
		Если ПоставитьПометкуПрочтения Тогда
			ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документы помечены как прочтенные (%1)'"),
				КоличествоСообщений);
		Иначе
			ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сняты пометки прочтенности документов (%1)'"),
				КоличествоСообщений);
		КонецЕсли;
			
		Состояние(ТекстСостояния);
		
	КонецЕсли;
	
	ЗаполнитьСписок();
	УстановитьТекущееЗначениеГруппировки();
	
КонецПроцедуры

&НаСервере 
Функция УстановитьПрочтение(Сообщение, Прочтен = Истина)
	
	ПрочтениеУстановлено = РаботаСПрочтениями.УстановитьСвойствоПрочтен(Сообщение, Прочтен);
	
	// Не устанавливать прочтенность сообщения автоматически в случае ручной установки прочтения.
	ТекущееСообщениеПрочтено = Истина;
	
	Возврат ПрочтениеУстановлено;

КонецФункции

&НаКлиенте
Процедура МК_СтраницаСодержание(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.МК_СтраницаСодержание, Элементы.МК_КнопкаСтраницаСодержание);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаЗадачиСвязи(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.МК_СтраницаЗадачиСвязи, Элементы.МК_КнопкаСтраницаЗадачиСвязи);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьФайлы(Команда)
	
	Если КоличествоФайлов = 0 Тогда
		Элементы.ФайлыДокумента.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ФайлыДокумента.Видимость = Не Элементы.ФайлыДокумента.Видимость;
	Элементы.СоздатьФайл.Видимость = Элементы.ФайлыДокумента.Видимость;
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ПоказатьСкрытьФайлы,
		Элементы.ФайлыДокумента.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПереписку(Команда)
	
	ОбновитьДеревоПереписки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьТекущееЗначениеГруппировки()
	
	УстановитьПараметрыГруппировокПриАктивизации = Ложь;
	
	Если ВидГруппировки = "ПричинаДобавления" И ПричиныДобавления.Количество() > 0 Тогда
		Если ТекущаяПричина <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Причина", ТекущаяПричина);
			НайденныеСтроки = ПричиныДобавления.НайтиСтроки(ПараметрыПоиска);
			ТекущаяПричина = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ПричиныДобавления.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
		
	ИначеЕсли ВидГруппировки = "ТипДокумента" И ТипыДокументов.Количество() > 0 
		И ДоступныхТиповДокументов > 1 Тогда
		Если ТекущийТип <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Тип", ТекущийТип);
			НайденныеСтроки = ТипыДокументов.НайтиСтроки(ПараметрыПоиска);
			ТекущийТип = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ТипыДокументов.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
		
	ИначеЕсли ВидГруппировки = "Проект" И Проекты.Количество() > 0 Тогда
		Если ТекущийПроект <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Проект", ТекущийПроект);
			НайденныеСтроки = Проекты.НайтиСтроки(ПараметрыПоиска);
			ТекущийПроект = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.Проекты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		УстановитьПараметрыГруппировокПриАктивизации = Истина;
		
	КонецЕсли;
	
	Если НЕ УстановитьПараметрыГруппировокПриАктивизации Тогда
		УстановитьПараметрыГруппировок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьПоКолонке(ИмяКолонки)
		
	Если СортироватьПо = ИмяКолонки Тогда
		Если НаправлениеСортировки = "Возр" Тогда
			НаправлениеСортировки = "Убыв";
		Иначе
			НаправлениеСортировки = "Возр";
		КонецЕсли;
	Иначе
		СортироватьПо = ИмяКолонки;
		НаправлениеСортировки = "Возр";
	КонецЕсли;
	
	Список.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	СписокПолный.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	
	УстановитьПометкуРежимуСортировки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуРежимуСортировки(Форма)
	
	Форма.Элементы.СортироватьДатеДокумента.Пометка = Ложь;
	Форма.Элементы.СортироватьДатеДокумента.Заголовок = НСтр("ru = 'Дата документа'");
	
	Форма.Элементы.СортироватьПоНаименованию.Пометка = Ложь;
	Форма.Элементы.СортироватьПоНаименованию.Заголовок = НСтр("ru = 'Наименование'");
	
	Форма.Элементы.СортироватьПоВидуДокумента.Пометка = Ложь;
	Форма.Элементы.СортироватьПоВидуДокумента.Заголовок = НСтр("ru = 'Вид документа'");
	
	Если Форма.СортироватьПо = "ДатаДокумента" Тогда
		Форма.Элементы.СортироватьДатеДокумента.Пометка = Истина;
		Форма.Элементы.СортироватьДатеДокумента.Заголовок = 
			СтрШаблон(НСтр("ru = 'Дата документа (%1)'"),
				Форма.НаправлениеСортировки);
	ИначеЕсли Форма.СортироватьПо = "Наименование" Тогда
		Форма.Элементы.СортироватьПоНаименованию.Пометка = Истина;
		Форма.Элементы.СортироватьПоНаименованию.Заголовок = 
			СтрШаблон(НСтр("ru = 'Наименование (%1)'"),
				Форма.НаправлениеСортировки);
	ИначеЕсли Форма.СортироватьПо = "ВидДокумента" Тогда
		Форма.Элементы.СортироватьПоВидуДокумента.Пометка = Истина;
		Форма.Элементы.СортироватьПоВидуДокумента.Заголовок = 
			СтрШаблон(НСтр("ru = 'Вид документа (%1)'"),
				Форма.НаправлениеСортировки);
	КонецЕсли;
	
	Форма.Элементы.КонтекстноеМенюСортироватьДатеДокумента.Пометка = 
		Форма.Элементы.СортироватьДатеДокумента.Пометка;
	Форма.Элементы.КонтекстноеМенюСортироватьДатеДокумента.Заголовок = 
		Форма.Элементы.СортироватьДатеДокумента.Заголовок;
	
	Форма.Элементы.КонтекстноеМенюСортироватьПоНаименованию.Пометка = 
		Форма.Элементы.СортироватьПоНаименованию.Пометка;
	Форма.Элементы.КонтекстноеМенюСортироватьПоНаименованию.Заголовок = 
		Форма.Элементы.СортироватьПоНаименованию.Заголовок;
	
	Форма.Элементы.КонтекстноеМенюСортироватьПоВидуДокумента.Пометка = 
		Форма.Элементы.СортироватьПоВидуДокумента.Пометка;
	Форма.Элементы.КонтекстноеМенюСортироватьПоВидуДокумента.Заголовок = 
		Форма.Элементы.СортироватьПоВидуДокумента.Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоКолонке(НовыйВидГруппировки)
	
	Если ВидГруппировки = НовыйВидГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	ВидГруппировки = НовыйВидГруппировки;
	
	ПоказыватьОбластьГруппировки = ВидГруппировки <> "";
	
	УстановитьГруппировку(ЭтотОбъект);
	
	ЗаполнитьСписок();
	
	Если ЭтоМобильныйКлиент Тогда
		
		Если ПоказыватьОбластьГруппировки Тогда
			Элементы.ГруппаСписок.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		Иначе 
			Элементы.ГруппаСписок.Отображение = ОтображениеОбычнойГруппы.Нет;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыГруппировок()
	
	УстановитьПараметрыГруппировокСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыГруппировокСервер(Форма)
	
	СписокПолный = Форма.СписокПолный;
	
	Форма.Список.Очистить();
	
	Для Каждого СтрокаДокумент Из СписокПолный Цикл
		
		Показывать = Истина;
		Если Форма.ПоказыватьОбластьГруппировки Тогда
			Если Форма.ВидГруппировки = "ПричинаДобавления" Тогда
				Показывать = СтрНайти(СтрокаДокумент.Причина, Форма.ТекущаяПричина);
			ИначеЕсли Форма.ВидГруппировки = "ТипДокумента" Тогда
				Показывать = СтрокаДокумент.ТипДокумента = Форма.ТекущийТип;
			ИначеЕсли Форма.ВидГруппировки = "Проект" Тогда
				Показывать = СтрокаДокумент.Проект = Форма.ТекущийПроект;
			КонецЕсли;
		КонецЕсли;
		
		Если Показывать Тогда
			НовСтрока = Форма.Список.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Форма.Список.Количество() = 0 Или Форма.ТекущийДокумент = Неопределено Тогда
		Форма.Элементы.Список.ТекущаяСтрока = -1;
	Иначе
		Документ = Форма.ТекущийДокумент;
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Документ", Документ);
		НайденныеСтроки = Форма.Список.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Форма.Элементы.Список.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьГруппировку(Форма)
	
	Форма.Элементы.Группировки.Видимость = Форма.ПоказыватьОбластьГруппировки;
	Форма.Элементы.СписокСгруппироватьПричинеДобавления.Пометка = Ложь;
	Форма.Элементы.СписокСгруппироватьПоТипуДокумента.Пометка = Ложь;
	Форма.Элементы.СписокСгруппироватьПоПроекту.Пометка = Ложь;
	
	Форма.Элементы.ГруппаПричиныДобавления.Видимость = Ложь;
	Форма.Элементы.ГруппаТипыДокументов.Видимость = Ложь;
	Форма.Элементы.ГруппаПроекты.Видимость = Ложь;
	
	Если Форма.ПоказыватьОбластьГруппировки Тогда
		Если Форма.ВидГруппировки = "ПричинаДобавления" Тогда
			Форма.Элементы.ГруппаПричиныДобавления.Видимость = Истина;
			Форма.Элементы.СписокСгруппироватьПричинеДобавления.Пометка = Истина;
			
		ИначеЕсли Форма.ВидГруппировки = "ТипДокумента" И Форма.ДоступныхТиповДокументов > 1 Тогда
			Форма.Элементы.ГруппаТипыДокументов.Видимость = Истина;
			Форма.Элементы.СписокСгруппироватьПоТипуДокумента.Пометка = Истина;
			
		ИначеЕсли Форма.ВидГруппировки = "Проект" Тогда
			Форма.Элементы.ГруппаПроекты.Видимость = Истина;
			Форма.Элементы.СписокСгруппироватьПоПроекту.Пометка = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Работа со списком документов

&НаСервере
Процедура ЗаполнитьСписок()
	
	Список.Очистить(); СписокПолный.Очистить();
	ПричиныДобавления.Очистить();
	ТипыДокументов.Очистить();
	Проекты.Очистить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МоиДокументы.Документ КАК Документ,
		|	МоиДокументы.СрокИсполнения КАК СрокИсполнения,
		|	МоиДокументы.Причина,
		|	МоиДокументы.Просрочен,
		|	МоиДокументы.ВидДокумента,
		|	МоиДокументы.Контрагент,
		|	МоиДокументы.ДатаДокумента,
		|	МоиДокументы.Проект,
		|	МоиДокументы.Представление,
		|	МоиДокументы.Прочтен,
		|	МоиДокументы.Сотрудник,
		|	МоиДокументы.ВидКорреспонденции,
		|	МоиДокументы.ПредставлениеДокумента
		|ИЗ
		|	МоиДокументы КАК МоиДокументы
		|ГДЕ
		|	&УсловиеОтбора
		|
		|ИТОГИ ПО
		|	Документ");
	
	ЧастьТекстаЗапросаУсловиеОтбора =
		"ГДЕ
		|	&УсловиеОтбора";
	Если Не СтрНайти(Запрос.Текст, ЧастьТекстаЗапросаУсловиеОтбора) Тогда
		// Запрос всегда должен быть в консистентном состоянии с данной частью текста запроса.
		ВызватьИсключение НСтр("ru = 'Не найден текста запроса условия отбора.'");
	КонецЕсли;
	Если КлючНазначенияИспользования = "ОтображениеПросроченныхДокументов" Тогда
		УсловиеОтбора =
			"ГДЕ
			|	МоиДокументы.Просрочен";
	ИначеЕсли КлючНазначенияИспользования = "ОтображениеИстекающихДокументов" Тогда
		УсловиеОтбора =
			"ГДЕ
			|	МоиДокументы.Истекает";
	Иначе
		УсловиеОтбора = "";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ЧастьТекстаЗапросаУсловиеОтбора, УсловиеОтбора);
	
	Причины = ОтмеченныеПричины.ВыгрузитьЗначения();
	
	Запрос.МенеджерВременныхТаблиц = МоиДокументы.ВременнаяТаблицаМоиДокументы(Причины);
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Пока ВыборкаДокумент.Следующий() Цикл
		Документ = ВыборкаДокумент.Документ;
		Причина = ""; ДатаДокумента = Дата(1, 1, 1);
		ПредставлениеДокумента = "";
		Просрочен = Ложь;
		Прочтен = Истина;
		ВидДокумента = Неопределено;
		Контрагент = Неопределено;
		Проект = Неопределено; ПроектУчтен = Ложь;
		Представление = "";
		Сотрудник = Неопределено;
		ВидКорреспонденции = Неопределено;
		
		ВыборкаДетали = ВыборкаДокумент.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			СтрокаПричина = Строка(ВыборкаДетали.Причина);
			Если СтрНайти(Причина, СтрокаПричина) = 0 Тогда
				Причина = Причина + СтрокаПричина + Символы.ПС;
			КонецЕсли;
			
			Если ВыборкаДетали.Просрочен Тогда 
				Просрочен = Истина;
			КонецЕсли;
			
			Если ВыборкаДетали.Прочтен = Ложь Тогда 
				Прочтен = Ложь;
			КонецЕсли;
			
			ПредставлениеДокумента = ВыборкаДетали.ПредставлениеДокумента;
			ВидДокумента = ВыборкаДетали.ВидДокумента;
			Контрагент = ВыборкаДетали.Контрагент;
			ДатаДокумента = ВыборкаДетали.ДатаДокумента;
			Проект = ВыборкаДетали.Проект;
			Представление = ВыборкаДетали.Представление;
			Сотрудник = ВыборкаДетали.Сотрудник;
			ВидКорреспонденции = ВыборкаДетали.ВидКорреспонденции;
			Если ВидГруппировки = "ПричинаДобавления" Тогда
				СтрПричина = ПричиныДобавления.НайтиСтроки(
					Новый Структура("Причина", СтрокаПричина));
				
				Если СтрПричина.Количество() = 0 Тогда 
					НовСтрока = ПричиныДобавления.Добавить();
					НовСтрока.Причина = СтрокаПричина;
					НовСтрока.Количество = 1;
				Иначе 
					СтрПричина[0].Количество = СтрПричина[0].Количество + 1;
				КонецЕсли;
				
			ИначеЕсли ВидГруппировки = "Проект" И Не ПроектУчтен Тогда
				СтрПроект = Проекты.НайтиСтроки(Новый Структура("Проект", Проект));
				ПроектУчтен = Истина; 
				
				Если СтрПроект.Количество() = 0 Тогда 
					НовСтрока = Проекты.Добавить();
					НовСтрока.Проект = Проект;
					НовСтрока.Количество = 1;
					НовСтрока.Представление = Представление;
				Иначе 
					СтрПроект[0].Количество = СтрПроект[0].Количество + 1;
				КонецЕсли;
			
			КонецЕсли;
		КонецЦикла;
		
		ТипДокумента = СокрЛП(ТипЗнч(ВыборкаДокумент.Документ));
		
		Если ВидГруппировки = "ТипДокумента" И ДоступныхТиповДокументов > 1 Тогда
			СтрТипы = ТипыДокументов.НайтиСтроки(Новый Структура("Тип", ТипДокумента));
			
			Если СтрТипы.Количество() = 0 Тогда 
				НовСтрока = ТипыДокументов.Добавить();
				НовСтрока.Тип = ТипДокумента;
				НовСтрока.Количество = 1;
			Иначе 
				СтрТипы[0].Количество = СтрТипы[0].Количество + 1;
			КонецЕсли;
		КонецЕсли;
		
		Причина = Лев(Причина, СтрДлина(Причина)-1);
		
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.Наименование = ПредставлениеДокумента;
		НоваяСтрока.Причина = Причина;
		НоваяСтрока.Просрочен = Просрочен;
		НоваяСтрока.Прочтен = Прочтен;
		НоваяСтрока.ВидДокумента = ВидДокумента;
		НоваяСтрока.Контрагент = Контрагент;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		НоваяСтрока.ТипДокумента = ТипДокумента;
		НоваяСтрока.Проект = Проект;
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ВидКорреспонденции = ВидКорреспонденции;
		
		СтрокаПолный = СписокПолный.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПолный, НоваяСтрока);
	КонецЦикла;
	
	Элементы.ФормаОтборДобавленВручную.Пометка = Ложь;
	Элементы.ФормаОтборНазначенаЗадачаМне.Пометка = Ложь;
	Элементы.ФормаОтборОтправленаЗадачаОтМеня.Пометка = Ложь;
	Элементы.ФормаОтборЯвляюсьАвторомДокумента.Пометка = Ложь;
	Элементы.ФормаОтборЯвляюсьОтветственнымЗаДокумент.Пометка = Ложь;
	Элементы.ФормаОтборЯвляюсьПодписантомДокумента.Пометка = Ложь;
	Элементы.ФормаОтборЯвляюсьАвторомУтверждения.Пометка = Ложь;
	
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ДобавленВручную) <> Неопределено Тогда 
		Элементы.ФормаОтборДобавленВручную.Пометка = Истина;
	КонецЕсли;	
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.НазначенаЗадачаМне) <> Неопределено Тогда 
		Элементы.ФормаОтборНазначенаЗадачаМне.Пометка = Истина;
	КонецЕсли;	
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ОтправленаЗадачаОтМеня) <> Неопределено Тогда 
		Элементы.ФормаОтборОтправленаЗадачаОтМеня.Пометка = Истина;
	КонецЕсли;	
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента) <> Неопределено Тогда 
		Элементы.ФормаОтборЯвляюсьАвторомДокумента.Пометка = Истина;
	КонецЕсли;	
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент) <> Неопределено Тогда 
		Элементы.ФормаОтборЯвляюсьОтветственнымЗаДокумент.Пометка = Истина;
	КонецЕсли;
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента) <> Неопределено Тогда 
		Элементы.ФормаОтборЯвляюсьПодписантомДокумента.Пометка = Истина;
	КонецЕсли;
	Если ОтмеченныеПричины.НайтиПоЗначению(
			Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомУтвержденияДокумента) <> Неопределено Тогда 
		Элементы.ФормаОтборЯвляюсьАвторомУтверждения.Пометка = Истина;
	КонецЕсли;
	
	КоличествоСтрок = Список.Количество();
	Если КоличествоСтрок > 0 Тогда
		
		Если КлючНазначенияИспользования = "ОтображениеПросроченныхДокументов" Тогда
			Заголовок = НСтр("ru = 'Просроченные документы (%1)'");
		ИначеЕсли КлючНазначенияИспользования = "ОтображениеИстекающихДокументов" Тогда
			Заголовок = НСтр("ru = 'Документы с истекающим сроком действия/исполнения (%1)'");
		Иначе
			Заголовок = НСтр("ru = 'Мои документы (%1)'");
		КонецЕсли;
		
		Заголовок = СтрШаблон(Заголовок, КоличествоСтрок);
	Иначе
		Если КлючНазначенияИспользования = "ОтображениеПросроченныхДокументов" Тогда
			Заголовок = НСтр("ru = 'Просроченные документы'");
		ИначеЕсли КлючНазначенияИспользования = "ОтображениеИстекающихДокументов" Тогда
			Заголовок = НСтр("ru = 'Документы с истекающим сроком действия/исполнения'");
		Иначе
			Заголовок = НСтр("ru = 'Мои документы'");
		КонецЕсли;
	КонецЕсли;
	
	ТипыДокументов.Сортировать("Тип");
	ПричиныДобавления.Сортировать("Причина");
	Проекты.Сортировать("Представление");
	Список.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	СписокПолный.Сортировать(СортироватьПо + " " + НаправлениеСортировки);
	УстановитьПараметрыГруппировокСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСписка()
	
	НаименованиеДокумента = ""; 
	МассивДокументов = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);
		МассивДокументов.Добавить(Новый Структура("Документ, Сотрудник", 
			ДанныеСтроки.Документ, ДанныеСтроки.Сотрудник));
		НаименованиеДокумента = ДанныеСтроки.Наименование;
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
		
	ИначеЕсли МассивДокументов.Количество() > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Удалить выделенные документы из списка Мои документы?'");
		
	Иначе 
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить документ ""%1"" из списка Мои документы?'"),
			Строка(НаименованиеДокумента));
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьИзСпискаПродолжение", 
		ЭтотОбъект, Новый Структура("МассивДокументов", МассивДокументов));
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСпискаПродолжение(Результат, Параметр) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	УдалитьВыбранныеДокументы(Параметр.МассивДокументов);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВыбранныеДокументы(МассивДокументов)
	
	Для Каждого СтрДокумент Из МассивДокументов Цикл 
		МоиДокументы.УдалитьДокументИзМоиДокументы(СтрДокумент.Документ, СтрДокумент.Сотрудник);
	КонецЦикла;
	
	ЗаполнитьСписок();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныйДокумент(Документ)
	
	МоиДокументы.ДобавитьЗаписьВМоиДокументы(
		Документ, 
		ПредопределенноеЗначение(
		"Перечисление.ПричиныДобавленияВМоиДокументы.ДобавленВручную"));
	
	ЗаполнитьСписок();
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьВСписок()
	
	ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаВыбора", , ЭтотОбъект);
	
КонецПроцедуры

// Заполнение миникарточки

&НаКлиенте
Процедура ОбновитьМиникарточку()
	
	ОбзорСпискаДокументовКлиент.ОбновитьМиникарточку(ЭтотОбъект);
	ОбновитьДеревоПереписки();
	Если Файлы.ПолучитьЭлементы().Количество() = 0 Тогда 
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		ОбзорСпискаДокументовКлиент.УстановитьДоступностьКоманд(ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ОбновитьЗаголовкиПредпросмотра(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры	

// Работа с файлами

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ЗначениеПометкиУдаления)
	
	Делопроизводство.ПометитьФайлыНаУдаление(ЭтотОбъект, МассивФайлов, 
		ЗначениеПометкиУдаления, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеДанныеСпискаФайлов()
	
	ТекущиеДанные = Элементы.ФайлыДокумента.ТекущиеДанные;
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Файл, 
		Неопределено, 
		УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.
		ПолучитьПерсональныеНастройкиРаботыСФайлами().
		ДействиеПоДвойномуЩелчкуМыши;
		
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, Файл);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", 
		ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл)
	
	ДелопроизводствоКлиент.ОбновитьСтрокуФайла(Файлы, Файл, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", 
			ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, 
			ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	ОбзорСпискаДокументовКлиент.УстановитьДоступностьКоманд(ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;
	
	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
			Если Строка.Ссылка = Файл Тогда 
				СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;	
		Иначе
			
			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				Если Подстрока.Ссылка = Файл Тогда 
					СтрокаИдентификатор = Подстрока.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.ФайлыДокумента.ТекущаяСтрока = СтрокаИдентификатор;
	
КонецПроцедуры

// Устанавливает признак оригинал для нового созданного файла
//
//	Параметры
//		Файл - СправочникСсылка.Файлы - ссылка на новый файл
//
&НаКлиенте
Процедура ОтметитьПризнакОригиналУНовогоФайла(Файл)
	
	Если Не ВестиУчетСканКопийОригиналовДокументов Тогда 
		Возврат;
	КонецЕсли;	
	
	НайденнаяСтрока = Неопределено;
	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		
		Если Строка.Ссылка = Файл Тогда 
			НайденнаяСтрока = Строка;
			Прервать;
		КонецЕсли;	
		
		Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
			Если Подстрока.Ссылка = Файл Тогда 
				НайденнаяСтрока = Строка;
				Прервать;
			КонецЕсли;	
		КонецЦикла;		
		
	КонецЦикла;	
	
	Если НайденнаяСтрока = Неопределено
	 Или НайденнаяСтрока.СозданИзШаблона
	 Или НайденнаяСтрока.Оригинал Тогда  
	 Возврат;
	КонецЕсли;	
	
	ДоступноТолькоДобавлениеОригинала = ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("ДобавлениеОригиналов") 
		И Не ДоступныеПоля.Свойство("ДобавлениеФайлов");
	
	Если ДоступноТолькоДобавлениеОригинала Или
		(ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(НайденнаяСтрока.Расширение) 
		И Не Делопроизводство.ЕстьСведенияОбОригиналеФайла(Файл)) Тогда 
		НайденнаяСтрока.Оригинал = Истина;
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(Файл, ТекущийДокумент);
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыбранныйДокумент(ВыводитьПредупреждение)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбран документ.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбран документ.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Элементы.Список.ТекущиеДанные.Свойство("Документ") Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбран документ.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Список.ДанныеСтроки(ТекущаяСтрока);
	Ссылка = ДанныеСтроки.Документ;
	Возврат Ссылка;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыбранныеДокументы(ВыводитьПредупреждение)
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Для каждого Строка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
		Если ДанныеСтроки <> Неопределено Тогда
			Ссылка = ДанныеСтроки.Документ;
			Результат.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		ВыбраннаяСтрока = ПолучитьВыбранныйДокумент(Ложь);
		Если ЗначениеЗаполнено(ВыбраннаяСтрока)
			И Результат.Найти(ВыбраннаяСтрока) = Неопределено Тогда
			Результат.Добавить(ВыбраннаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны документы.'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	МК_ЭлементыСтиля = МК_ПовтИсп.ЭлементыСтиля();
	
	// Общая адаптация.
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	// Нижний блок.
	Элементы.Переместить(Элементы.ФормаСоздатьВнутренний, Элементы.МК_НижнийБлок);
	МК.ОформитьАкцентнуюКнопку(Элементы.ФормаСоздатьВнутренний);
	
	// Список.
	Если ПоказыватьОбластьГруппировки Тогда
		Элементы.ГруппаСписок.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	КонецЕсли;
	
	Элементы.Список.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	Элементы.Список.Высота = 1;
	Элементы.Список.АвтоМаксимальнаяВысота = Ложь;
	Элементы.Список.МаксимальнаяВысота = 0;
	Элементы.Список.ВысотаВСтрокахТаблицы = 1;
	Элементы.Список.АвтоМаксимальнаяВысотаВСтрокахТаблицы = Ложь;
	Элементы.Список.МаксимальнаяВысотаВСтрокахТаблицы = 0;
	
	Элементы.СписокКонтекстноеМенюОтменитьПоиск.Видимость = Ложь;
	Элементы.СписокКонтекстноеМенюНайти.Видимость = Ложь;
	Элементы.СписокКонтекстноеМенюКопироватьВБуферОбмена.Видимость = Ложь;
	
	// Командная панель.
	Элементы.СписокУдалить.Видимость = Ложь;
	Элементы.ФормаНайти.Видимость = Ложь;
	Элементы.ФормаОтменитьПоиск.Видимость = Ложь;
	Элементы.СписокОбновить.Видимость = Ложь;
	Элементы.СписокВывестиСписок.Видимость = Ложь;
	Элементы.СтрокаПоиска.Видимость = Ложь;
	Элементы.ФормаСправка.Видимость = Ложь;
	
	ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	Элементы.ФормаДобавитьВСписок.Заголовок = НСтр("ru = 'Добавить существующий'");
	Элементы.Переместить(Элементы.ФормаПометитьКакПрочтенные, Элементы.Список.КонтекстноеМеню);
	
	Элементы.СписокСправочникДокументыПредприятияСоздатьДокументПредприятияНаОсновании.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	Элементы.СписокСправочникМероприятияСоздатьНаОсновании.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	Элементы.СписокСправочникЗаписиРабочегоКалендаряСоздатьЗаписьКалендаряНаОсновании.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	Элементы.ОтправитьОбъекты.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	
	Если Не Элементы.Найти("СписокОбщаяКомандаСоздатьЗаписьЖурналаПередачи") = Неопределено Тогда
		Элементы.СписокОбщаяКомандаСоздатьЗаписьЖурналаПередачи.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	КонецЕсли;
	
	МК_НастроитьОбластьПредпросмотра();

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьОбластьПредпросмотра()
	
	Элементы.МК_Миникарточка.Видимость = ЭтоМобильноеУстройствоСБольшимЭкраном;
	Элементы.Страницы.Видимость = Не ЭтоМобильныйКлиент;
	
	Если Не ЭтоМобильноеУстройствоСБольшимЭкраном Тогда
		Элементы.Список.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.Выбор;
		Элементы.ГруппаСписокМиникарточка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСписокМиникарточка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.Список.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;

	Элементы.Переместить(Элементы.ОбзорHTML, Элементы.МК_СтраницаСодержание, Элементы.МК_Файлы);
	Элементы.Переместить(Элементы.ФайлыДокумента, Элементы.МК_Файлы);
	Элементы.Переместить(Элементы.СписокЗадачи, Элементы.МК_СтраницаЗадачиСвязи);
	
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаСодержание, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаЗадачиСвязи, Истина);
	
	МК_СброситьОформлениеПереключателейСтраницПредпросмотра(ЭтотОбъект);
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.МК_СтраницаСодержание, Элементы.МК_КнопкаСтраницаСодержание);
	
	// Файлы.
	Элементы.ФайлыДокумента.Видимость = КоличествоФайлов > 0;
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_ПоказатьСкрытьФайлы, Элементы.ФайлыДокумента.Видимость);
	
	Элементы.ФайлыДокумента.Шапка = Ложь;
	Элементы.ФайлыДокумента.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элементы.ФайлыДокумента.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.ПотянутьСверху;
	Элементы.Переместить(Элементы.СоздатьФайл, Элементы.МК_ЗаголовокФайлы, Элементы.МК_ФайлыНадпись);
	МК.ОформитьКнопкуФильтра(Элементы.СоздатьФайл, Истина);
	Элементы.ФайлыРольФайла.Видимость = Ложь;
	Элементы.ФайлыОписание.Видимость = Ложь;
	Элементы.Оригинал.Видимость = Ложь;
	Элементы.ФайлыНаименование.Высота = 1;
	
	// Задачи.
	Элементы.СписокЗадачи.Шапка = Ложь;
	Элементы.Переместить(Элементы.ЗадачиГруппа, Элементы.СписокЗадачиГруппа);
	Элементы.ЗадачиНаименование.Высота = 3;
	Элементы.ЗадачиИсполнитель.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;
	Элементы.ЗадачиИсполнитель.Шрифт = ШрифтыСтиля.МК_ШрифтАвтораИсполнителя;
	
	МК_ОбновитьЗаголовкиПредпросмотра(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_СброситьОформлениеПереключателейСтраницПредпросмотра(Форма)
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаСодержание, Ложь);
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаЗадачиСвязи, Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницу(Форма, Страница, Кнопка)
	
	Форма.Элементы.МК_Страницы.ТекущаяСтраница = Страница;
	МК_СброситьОформлениеПереключателейСтраницПредпросмотра(Форма);
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля, Кнопка, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ОбновитьЗаголовкиПредпросмотра(Форма)
	
	// Для файлов.
	Если Форма.КоличествоФайлов > 0 Тогда 
		Форма.Элементы.МК_ФайлыНадпись.Заголовок = СтрШаблон(НСтр("ru = 'Файлы (%1)'"), Форма.КоличествоФайлов);
	Иначе
		Форма.Элементы.МК_ФайлыНадпись.Заголовок = НСтр("ru = 'Файлы'");
	КонецЕсли;
	
	// Для страницы "Задачи".
	Если Форма.КоличествоЗадач > 0 Тогда 
		Форма.Элементы.МК_КнопкаСтраницаЗадачиСвязи.Заголовок = СтрШаблон(НСтр("ru = 'Задачи (%1)'"), Форма.КоличествоЗадач);
	Иначе
		Форма.Элементы.МК_КнопкаСтраницаЗадачиСвязи.Заголовок = НСтр("ru = 'Задачи'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбновитьДеревоПереписки()

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ВидКорреспонденции) Тогда
		// Есть дерево переписки, обновление только если оно видно на закладке:
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПереписка Тогда
			ОбновитьДеревоПерепискиСервер(ТекущиеДанные.Документ);
			ЭлементыДерева = ДеревоПереписки.ПолучитьЭлементы();
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				ИдентификаторСтроки = ЭлементДерева.ПолучитьИдентификатор();
				Элементы.ДеревоПереписки.Развернуть(ИдентификаторСтроки, Истина);
				Если ЭлементДерева.Ссылка = ТекущиеДанные.Документ Тогда
					Элементы.ДеревоПереписки.ТекущаяСтрока = ИдентификаторСтроки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// Нет дерева переписки:
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПереписка Тогда
			ДеревоПереписки.ПолучитьЭлементы().Очистить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обновить дерево переписки на сервере.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - Документ, по которому генерируется дерево переписки
//  ЭтоОбращение - Булево - Документ является обращением граждан
&НаСервере
Процедура ОбновитьДеревоПерепискиСервер(Документ)

	Дерево = РеквизитФормыВЗначение("ДеревоПереписки");
	Дерево.Строки.Очистить();
	ВыведенныеПисьма = Новый Массив();
	Делопроизводство.ДобавитьПисьмоВДерево(Дерево.Строки, Документ, ТекущийДокумент, ВыведенныеПисьма);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПереписки");

КонецПроцедуры


#КонецОбласти
