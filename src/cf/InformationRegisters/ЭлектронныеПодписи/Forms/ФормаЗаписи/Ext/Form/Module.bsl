
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ДоступнаУсовершенствованнаяЭП = ЭлектроннаяПодпись.ДоступнаУсовершенствованнаяПодпись();
	
	Элементы.ТипПодписи.Видимость = ДоступнаУсовершенствованнаяЭП;
	Элементы.СрокДействияПоследнейМеткиВремени.Видимость = ДоступнаУсовершенствованнаяЭП;
	
	ЗаполнитьПоЗаписи();
	
	ЕстьПравоНаУстановкуДоверенности = РаботаСЭП.ДоступноУказаниеДоверенностиПодписи(Запись.ИдентификаторПодписи);
	ДоверенностьНеобходима = Ложь;
	Сертификат = ПолучитьИзВременногоХранилища(АдресСертификата);
	Если ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
		СертификатКриптографии = Новый СертификатКриптографии(Сертификат);
		Если ТипЗнч(СертификатКриптографии) = Тип("СертификатКриптографии") Тогда
			ДоверенностьНеобходима = РаботаСЭП.СертификатуНужнаДоверенность(СертификатКриптографии);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьПравоНаУстановкуДоверенности И ДоверенностьНеобходима Тогда
		Элементы.ФормаУстановитьДоверенность.Видимость = Истина;
	Иначе
		Элементы.ФормаУстановитьДоверенность.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СертификатНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если Не ЗначениеЗаполнено(АдресСертификата) Тогда
		МодульЭлектроннаяПодписьКлиент.ОткрытьСертификат(Запись.Отпечаток, Истина);
	Иначе
		МодульЭлектроннаяПодписьКлиент.ОткрытьСертификат(АдресСертификата, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДоверенностьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Доверенность" Тогда
		ПоказатьЗначение(, Доверенность);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Доверитель" Тогда
		ПоказатьЗначение(, ДоверительСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ЭлектроннаяПодписьКлиент.СохранитьПодпись(АдресПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоверенность(Команда)
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьУказаниеДоверенности", ЭтотОбъект);
	
	РаботаСЭПКлиент.УказатьДоверенностьЭлектроннойПодписи(Запись.ИдентификаторПодписи, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМеткуВремени(Команда)
	
	УсовершенствоватьПодписи(РаботаСЭПКлиентСервер.РежимыУсовершенствованияПодписей().ДобавлениеМетокВремени);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАрхивнуюМеткуВремени(Команда)
	
	УсовершенствоватьПодписи(РаботаСЭПКлиентСервер.РежимыУсовершенствованияПодписей().АрхивированиеПодписей);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПоЗаписи()
	
	МенеджерЗаписи = Неопределено;
	
	Если Не Параметры.Ключ.Пустой()Тогда
		
		МенеджерЗаписи = РаботаСЭП.ПолучитьЭлектроннуюПодпись(Запись.ПодписанныйОбъект, Запись.УстановившийПодпись,
			Запись.ДатаПодписи, Запись.ИдентификаторПодписи);
		
	ИначеЕсли Параметры.Свойство("ДатаПодписи") И Параметры.Свойство("Объект") 
		И Параметры.Свойство("УстановившийПодпись") И Параметры.Свойство("УникальныйИдентификатор")
		И ТипЗнч(Параметры.УстановившийПодпись) = Тип("СправочникСсылка.Пользователи") Тогда
		
		МенеджерЗаписи = РаботаСЭП.ПолучитьЭлектроннуюПодпись(Параметры.Объект, Параметры.УстановившийПодпись,
			Параметры.ДатаПодписи, Параметры.УникальныйИдентификатор);
		
	ИначеЕсли Параметры.Свойство("УникальныйИдентификатор") Тогда
		
		МенеджерЗаписи = МенеджерЗаписиПоИдентификаторуПодписи(Параметры.УникальныйИдентификатор);
		
	ИначеЕсли Параметры.Свойство("ИдентификаторПодписи") Тогда
		
		МенеджерЗаписи = МенеджерЗаписиПоИдентификаторуПодписи(Параметры.ИдентификаторПодписи);
		
	ИначеЕсли ЗначениеЗаполнено(Запись.ПодписанныйОбъект) И ЗначениеЗаполнено(Запись.ИдентификаторПодписи) Тогда
		
		МенеджерЗаписи = РаботаСЭП.ПолучитьЭлектроннуюПодпись(Запись.ПодписанныйОбъект, Запись.УстановившийПодпись,
			Запись.ДатаПодписи, Запись.ИдентификаторПодписи);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Не хватает параметров для открытия формы просмотра ЭП.'");
		
	КонецЕсли;
	
	Если МенеджерЗаписи = Неопределено Тогда
		ВызватьИсключение("Электронная подпись не найдена");
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(МенеджерЗаписи, "Запись");
	
	Если Не ЗначениеЗаполнено(Запись.Комментарий) Тогда
		Запись.Комментарий = НСтр("ru = 'Не указан'");
		Элементы.Комментарий.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
	КонецЕсли;
	
	Если ТипЗнч(Запись.ПодписанныйОбъект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		ПодписанныйОбъект = Запись.ПодписанныйОбъект.Владелец;
	Иначе
		ПодписанныйОбъект = Запись.ПодписанныйОбъект;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресПодписи") Тогда
		АдресПодписи = Параметры.АдресПодписи;
	Иначе
		ДвоичныеДанные = МенеджерЗаписи.Подпись.Получить();
		Если ДвоичныеДанные <> Неопределено Тогда 
			АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресСертификата") Тогда
		АдресСертификата = Параметры.АдресСертификата;
	Иначе
		ДвоичныеДанные = МенеджерЗаписи.Сертификат.Получить();
		Если ДвоичныеДанные <> Неопределено Тогда 
			АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ДоступнаУсовершенствованнаяЭП Тогда
		
		Если ЗначениеЗаполнено(Запись.ТипПодписи) Тогда
			Элементы.ТипПодписи.Видимость = Истина;
		Иначе
			Элементы.ТипПодписи.Видимость = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.СрокДействияПоследнейМеткиВремени) Тогда
			Элементы.СрокДействияПоследнейМеткиВремени.Видимость = Истина;
		Иначе
			Элементы.СрокДействияПоследнейМеткиВремени.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	
	НастроитьФормуПоДоверенности();
	НастроитьФормуПоРезультатамПроверки(МенеджерЗаписи.Сертификат);
	НастроитьЭлементыУсовершенствованияЭП();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоРезультатамПроверки(Сертификат)
	
	ДанныеДляСтатуса = РаботаСЭПКлиентСервер.НовыеДанныеДляПолученияСтатусаПодписи();
	ДанныеДляСтатуса.ПодписьВерна = Запись.ПодписьВерна;
	ДанныеДляСтатуса.ТекстОшибкиПроверкиПодписи = Запись.ТекстОшибкиПроверкиПодписи;
	
	ДанныеДляСтатуса.СертификатДействителен = Запись.СертификатДействителен;
	ДанныеДляСтатуса.ТекстОшибкиПроверкиСертификата = Запись.ТекстОшибкиПроверкиСертификата;
	
	Если ЗначениеЗаполнено(Доверенность) Тогда
		ДанныеДляСтатуса.ПодписьПоДоверенности = Истина;
		ДанныеДляСтатуса.ДоверенностьДействительна = ДоверенностьДействительна;
		ДанныеДляСтатуса.ПротоколПроверкиДоверенности = ПротоколПроверкиДоверенности;
	Иначе
		ДанныеДляСтатуса.ПодписьПоДоверенности = Ложь;
	КонецЕсли;
	
	ДанныеДляСтатуса.ДатаПроверки = Запись.ДатаПроверкиПодписи;
	ДанныеДляСтатуса.СрокПроверкиСертификата = РаботаСЭП.СрокПроверкиДействияСертификата(
		Сертификат.Получить(), Запись.СрокДействияПоследнейМеткиВремени);
	
	ОбщийСтатусПроверки = РаботаСЭПКлиентСервер.ОбщийСтатусПроверкиПодписи(ДанныеДляСтатуса);
	
	ОбщийСтатусПроверкиКартинка = 1;
	ОписаниеОшибокПроверки = "";
	ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
	
	Если Не Запись.ПодписьВерна Тогда
		
		ОбщийСтатусПроверкиКартинка = 3;
		ОписаниеОшибокПроверки = РаботаСЭПКлиентСервер.СтатусПроверкиПодписи(ДанныеДляСтатуса);
		ЦветФона = ЦветаСтиля.ФонПодписьНеверна;
		
	ИначеЕсли Не Запись.СертификатДействителен Тогда
		
		ОбщийСтатусПроверкиКартинка = 2;
		ОписаниеОшибокПроверки = РаботаСЭПКлиентСервер.СтатусПроверкиСертификата(ДанныеДляСтатуса);
		ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
		
	ИначеЕсли ЗначениеЗаполнено(Доверенность) Тогда
		
		Если ДоверенностьДействительна Тогда
			ОбщийСтатусПроверкиКартинка = 2;
			ЦветФона = ЦветаСтиля.ФонПодписьВерна;
		Иначе
			ОписаниеОшибокПроверки = РаботаСЭПКлиентСервер.СтатусПроверкиДоверенности(ДанныеДляСтатуса);
			ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
		КонецЕсли;
		
	Иначе
		
		ОбщийСтатусПроверкиКартинка = 2;
		ЦветФона = ЦветаСтиля.ФонПодписьВерна;
		
	КонецЕсли;
	
	Если ОписаниеОшибокПроверки = "" Тогда
		Элементы.ОписаниеОшибокПроверки.Видимость = Ложь;
	Иначе
		Элементы.ОписаниеОшибокПроверки.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ГруппаОсновная.ЦветФона = ЦветФона;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДоверенности()
	
	Элементы.НадписьДоверенность.Видимость = Ложь;
	Доверенность = Неопределено;
	
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запись.ИдентификаторПодписи);
	ДанныеДоверенностей = РаботаСЭП.ДанныеДоверенностейПодписей(Идентификаторы);
	ДанныеДоверенности = ДанныеДоверенностей[Запись.ИдентификаторПодписи];
	Если ДанныеДоверенности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Доверенность = ДанныеДоверенности.Доверенность;
	ПротоколПроверкиДоверенности = ДанныеДоверенности.ПротоколПроверкиДоверенности;
	ДоверенностьДействительна = ДанныеДоверенности.ДоверенностьВерна;
	
	Если Не ЗначениеЗаполнено(Доверенность) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДоверенности = СтрШаблон("<a href=""%1"">%2</a>",
		"Доверенность", Доверенность);
	
	ДанныеДоверителейДоверенностей = РаботаСМЧДДокументооборот.ДанныеДоверителейМЧД(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Доверенность));
	ДоверителиДоверенности = ДанныеДоверителейДоверенностей[Доверенность];
	
	Если ДоверителиДоверенности.Количество() = 0 Тогда
		
		ДоверительСсылка = Неопределено;
		ПояснениеДоверенности = СтрШаблон(НСтр("ru = 'Подписано по доверенности %1'"),
			СтрокаДоверенности);
		
	ИначеЕсли ДоверителиДоверенности.Количество() = 1 Тогда
		
		ДанныеДоверителя = ДоверителиДоверенности[0];
		
		Если ЗначениеЗаполнено(ДанныеДоверителя.Ссылка) Тогда
			ДоверительСсылка = ДанныеДоверителя.Ссылка;
			СтрокаДоверителя = СтрШаблон("<a href=""%1"">%2</a>",
				"Доверитель", ДанныеДоверителя.Представление);
		Иначе
			ДоверительСсылка = Неопределено;
			СтрокаДоверителя = ДанныеДоверителя.Представление;
		КонецЕсли;
		
		ПояснениеДоверенности = СтрШаблон(НСтр("ru = 'Подписано по доверенности %1 (от имени %2)'"),
			СтрокаДоверенности, СтрокаДоверителя);
		
	Иначе
		
		ДоверительСсылка = Неопределено;
		СтрокаДоверителей =
			РаботаСМЧДДокументооборот.ПредставлениеДоверителейМЧД(ДоверителиДоверенности);
		ПояснениеДоверенности = СтрШаблон(НСтр("ru = 'Подписано по доверенности %1 (от имени %2)'"),
			СтрокаДоверенности, СтрокаДоверителей);
		
	КонецЕсли;
	
	Элементы.НадписьДоверенность.Видимость = Истина;
	Элементы.НадписьДоверенность.Заголовок =
		ИнтернетПоддержкаПользователейВызовСервера.ФорматированнаяСтрокаИзHTML(ПояснениеДоверенности);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыУсовершенствованияЭП()
	
	Элементы.ФормаДобавитьМеткуВремени.Видимость = Ложь;
	Элементы.ФормаДобавитьАрхивнуюМеткуВремени.Видимость = Ложь;
	
	Если Не РаботаСЭП.ДоступноУсовершенствованиеЭП() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (Запись.ПодписьВерна И Запись.СертификатДействителен) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.СрокДействияПоследнейМеткиВремени)
		И Запись.СрокДействияПоследнейМеткиВремени < ТекущаяДатаСеанса() Тогда
		
		Возврат;
	КонецЕсли;
	
	ТипыПодписейДляМеткиВремени = РаботаСЭПКлиентСервер.ТипыПодписейДляДобавленияМеткиВремени();
	Если ТипыПодписейДляМеткиВремени.Найти(Запись.ТипПодписи) <> Неопределено Тогда
		Элементы.ФормаДобавитьМеткуВремени.Видимость = Истина;
	КонецЕсли;
	
	ТипыПодписейДляАрхивирования = РаботаСЭПКлиентСервер.ТипыПодписейДляАрхивирования();
	Если ТипыПодписейДляАрхивирования.Найти(Запись.ТипПодписи) Тогда
		Элементы.ФормаДобавитьАрхивнуюМеткуВремени.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеДоверенности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоЗаписи();
	
КонецПроцедуры

&НаСервере
Функция МенеджерЗаписиПоИдентификаторуПодписи(ИдентификаторПодписи)
	
	ИдентификаторыПодписей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПодписи);
	
	СвойстваПодписей = РаботаСЭП.УстановленныеПодписиПоИдентификаторам(ИдентификаторыПодписей);
	
	СвойстваПодписи = СвойстваПодписей[ИдентификаторПодписи];
	
	Если СвойстваПодписи = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не удалось получить электронную подпись по уникальному идентификатору %1'"),
			УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат РаботаСЭП.ПолучитьЭлектроннуюПодпись(
		СвойстваПодписи.ПодписанныйОбъект,
		,
		,
		СвойстваПодписи.ИдентификаторПодписи);
	
КонецФункции

// Выполняет усовершенствование подписей
// 
// Параметры:
//  Режим - Строка - см. РаботаСЭПКлиентСервер.РежимыУсовершенствованияПодписей
&НаКлиенте
Процедура УсовершенствоватьПодписи(Режим)
	
	ИдентификаторыПодписей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запись.ИдентификаторПодписи);
	
	ОбработчикДобавления = Новый ОписаниеОповещения("ОбработатьУсовершенствование", ЭтотОбъект);
	
	ПараметрыУсовершенствования = РаботаСЭПКлиент.НовыеПараметрыУсовершенствованияПодписей();
	ПараметрыУсовершенствования.ВызывающаяФорма = ЭтотОбъект;
	ПараметрыУсовершенствования.ОбработчикЗавершения = ОбработчикДобавления;
	ПараметрыУсовершенствования.РежимУсовершенствования = Режим;
	
	РаботаСЭПКлиент.УсовершенствоватьПодписи(ИдентификаторыПодписей, ПараметрыУсовершенствования);
	
КонецПроцедуры

// Обрабатывает добавление метки времени к подписи
// 
// Параметры:
//  Результат - Структура:
//     * Успех - Булево - Истина, если все прошло успешно. Если Успех = Ложь, то частичное завершение
//               определяется по наличию свойства СвойстваПодписи. Если есть, то шаг выполнен.
//     * ТекстОшибки - Строка
//     * СвойстваПодписей - Массив из Структура:
//                          ** Подпись - ДвоичныеДанные - Подпись, которую надо усовершенствовать.
//                                     - Строка - адрес во временном хранилище.
//                          ** ПодписанныйОбъект - ЛюбаяСсылка - если есть.
//                          ** ПорядковыйНомер - Число - если есть.
//                          ** ТипПодписи - ПеречислениеСсылка.ТипыПодписиКриптографии - тип подписи,
//                                если подпись не удалось усовершенствовать, но удалось определить тип.
//                          ** СрокДействияПоследнейМеткиВремени - Дата - срок действия,
//                                если подпись не удалось усовершенствовать, но удалось определить срок действия.
//                          ** СвойстваПодписи - см. ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи -
//                             свойства усовершенствованной подписи (заполнены только изменившиеся).
//                          ** Ошибка - Строка - текст ошибки при попытке усовершенствования. Если произошла ошибка,
//                           то структура не будет содержать свойств подписи, которую не удалось усовершенствовать.
//                        - Строка - адрес временного хранилища, содержащего массив указанный выше.
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ОбработатьУсовершенствование(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда 
		
		СтрокиСообщения = Новый Массив(); // Массив Из Строка
		СтрокиСообщения.Добавить(НСтр("ru = 'При усовершенствовании возникли ошибки:'"));
		
		Если Результат.СвойстваПодписей <> Неопределено Тогда
			Для Каждого СвойствоПодписи Из Результат.СвойстваПодписей Цикл
				Если СвойствоПодписи.Свойство("Ошибка") Тогда
					СтрокиСообщения.Добавить(СвойствоПодписи.Ошибка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПоказатьПредупреждение(, СтрСоединить(СтрокиСообщения, Символы.ПС));
		
	Иначе
		ЗаполнитьПоЗаписи();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
