// @strict-types
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проверяет поддерживается ли мобильный сканер (версия платформы и является ли пользователь пользователем МК)
//
// Возвращаемое значение:
//  Булево - признак поддерживается или нет
//
Функция ПоддерживаетсяМобильныйСканер() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ПоддерживаетсяМобильныйСканер = Ложь;
	
	Если МК_ПовтИсп.ВерсияПлатформыСервераВыше8322()
		И РегистрыСведений.МК_СведенияОМобильныхОнлайнКлиентах.ЭтоПользовательМК() Тогда
		
		ПоддерживаетсяМобильныйСканер = Истина;
	КонецЕсли;
	
	Возврат ПоддерживаетсяМобильныйСканер;

КонецФункции

//Удаляет запись для указанного пользователя, тем самым освобождая место для новых сканов
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого требуется выполнить действие
//
Процедура Удалить(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Записать();
	
КонецПроцедуры

//Помещает скан для указанного пользователя в регистр 
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого требуется выполнить действие
//  ДанныеСканов - ДвоичныеДанные, Массив - Двоичные данные скана, или массив двоичных данных сканов
//
Процедура Добавить(Пользователь, ДанныеСканов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Менеджер = СоздатьМенеджерЗаписи();
	Менеджер.Пользователь = Пользователь;
	Менеджер.ДанныеСканов = Новый ХранилищеЗначения(ДанныеСканов);
	Менеджер.Записать(Истина);
	
КонецПроцедуры

//Возвращает двоичные данные сканов или массив двоичных данных сканов, если запись с ним существует
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого требуется выполнить действие
//
//  Возвращаемое значение:
//   ДанныеСканов - Массив - Массив двоичных файлов
//
Функция ДанныеСканов(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КэшМобильныхСканов.ДанныеСканов КАК ДанныеСканов
		|ИЗ
		|	РегистрСведений.КэшМобильныхСканов КАК КэшМобильныхСканов
		|ГДЕ
		|	КэшМобильныхСканов.Пользователь = &Пользователь";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		//@skip-check property-return-type
		Возврат Выборка.ДанныеСканов.Получить();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


// Снимает блокировку регистра КэшМобильныхСканов для указанной формы
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатор формы, для которой нужно снять блокировку
//
Процедура ОсвободитьСканер(Идентификатор) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	Ключ = СоздатьКлючЗаписи(Отбор);
	РазблокироватьДанныеДляРедактирования(Ключ, Идентификатор);
	
КонецПроцедуры

// Делает попытку блокировки регистра КэшМобильныхСканов для указанной формы
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатор формы, для которой нужно установить блокировку
//
//  Возвращаемое значение:
//   Булево - Истина в случае успеха, Ложь в случае неудачи
//
Функция ЗанятьСканер(Идентификатор) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", Пользователь);
	Ключ = СоздатьКлючЗаписи(Отбор);
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Ключ, , Идентификатор);
		Удалить(Пользователь);
		
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Загружает в регистр КэшМобильныхСканов данные сканов с мобильного
//
// Параметры:
//  ДанныеСканов - ХранилищеЗначения, Массив - Двоичные данные скана (или массив двоичных данных сканов)
//
//  Возвращаемое значение:
//   Строка - Строка - Строка с описание статуса загрузки сканов
//
Функция ЗагрузитьСканы(ДанныеСканов) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		"МобильныйСканер.ЗагрузитьСкан_Начало",
		УровеньЖурналаРегистрации.Информация);
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", Пользователь);
	Ключ = СоздатьКлючЗаписи(Отбор);
	Идентификатор = Новый УникальныйИдентификатор();
	
	Попытка
		//Если удалось заблокировать регистр, значит нет формы, ожидающей скан
		ЗаблокироватьДанныеДляРедактирования(Ключ,,Идентификатор);
		//Разблокируем, иначе формы на настольном не смогут занять сканер
		РазблокироватьДанныеДляРедактирования(Ключ, Идентификатор);
		
		Возврат  НСтр("ru = 'Не найдена открытая форма, куда можно добавить сканы'");
		
	Исключение
		
		Если СканыЗагружены() Тогда
			Возврат  НСтр("ru = 'Пока загружаются предыдущие сканы. Повторите сканирование позже'");
		КонецЕсли;
		
		Добавить(Пользователь, ДанныеСканов);
		
	КонецПопытки;
	
	Размер = 0;
	Если ТипЗнч(ДанныеСканов) = Тип("Массив") Тогда
		Для Каждого ДанныеСкана Из ДанныеСканов Цикл
			Размер = Размер + ДанныеСкана.Размер();
		КонецЦикла;
	Иначе
		Размер = ДанныеСканов.Размер();
	КонецЕсли;

	РазмерСкана = СтрШаблон(НСтр("ru = 'Размер скана: %1'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		Размер);
	
	ЗаписьЖурналаРегистрации(
		"МобильныйСканер.ЗагрузитьСкан_Конец",
		УровеньЖурналаРегистрации.Информация,,,
		РазмерСкана);
	
	Возврат  НСтр("ru = 'Сканы загружены'");;
	
КонецФункции

// Проверяет есть ли запись со сканами в регистре КэшМобильныхСканов
//
//  Возвращаемое значение:
//   Булево - Истина, если скан есть, Ложь если записи нет
//
Функция СканыЗагружены() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		"МобильныйСканер.СканЗагружен_Начало",
		УровеньЖурналаРегистрации.Информация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КэшМобильныхСканов.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.КэшМобильныхСканов КАК КэшМобильныхСканов
		|ГДЕ
		|	КэшМобильныхСканов.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	ЗаписьЖурналаРегистрации(
		"МобильныйСканер.СканЗагружен_Конец",
		УровеньЖурналаРегистрации.Информация);
		
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Создает файл в карточке документа по двоичным данным в регистре КэшМобильныхСканов.
// После этого очищает регистр.
//
// Параметры:
//  Владелец - ЛюбаяСсылка - Ссылка на объект, который будет установлен владельцем файла
//  ИсходноеИмяФайла - Строка - Будущее имя файла
//
//  Возвращаемое значение:
//   Структура
//      * ФайлДобавлен - Булево
//      * ФайлСсылка - Строка
//      * ТекстОшибки - Строка
//
Функция ОбработатьДаныеСканов(Владелец, ИсходноеИмяФайла) Экспорт
	
	ЗаписьЖурналаРегистрации(
		"МобильныйСканер.ОбработатьСкан_Начало",
		УровеньЖурналаРегистрации.Информация);
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлыДобавлены", Ложь);
	Результат.Вставить("Файлы", Новый Массив);
	Результат.Вставить("ТекстОшибки", "");
	
	Сканы = ДанныеСканов();
	
	Если Не ЗначениеЗаполнено(Сканы) Тогда
		Результат.ТекстОшибки = НСтр("ru='Скан отсутствует в регистре'");
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(Сканы) = Тип("Массив") Тогда
		
		Сч = 1;
		Для Каждого ДанныеСкана Из Сканы Цикл
			ИмяФайлаСкана = ИсходноеИмяФайла + "_" + Сч;
			ФайлСсылка = ДанныеСканаВФайл(Владелец, ДанныеСкана, ИмяФайлаСкана);
			Если ФайлСсылка <> Неопределено Тогда
				Результат.Файлы.Добавить(ФайлСсылка);
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;
		
		Результат.Вставить("ФайлыДобавлены", Сч <> 0);
		
	Иначе
		
		ФайлСсылка = ДанныеСканаВФайл(Владелец, Сканы, ИсходноеИмяФайла);
		
		Если ФайлСсылка <> Неопределено Тогда
			Результат.Файлы.Добавить(ФайлСсылка);
			Результат.Вставить("ФайлыДобавлены", Истина);
		КонецЕсли;
		
	КонецЕсли;
		
	Удалить(Пользователи.ТекущийПользователь());
	
	ЗаписьЖурналаРегистрации(
		"МобильныйСканер.ОбработатьСкан_Конец",
		УровеньЖурналаРегистрации.Информация);
	
	Возврат Результат;
	
КонецФункции

//Преобразует двоичные данные скана в Файл
// Параметры:
//  Владелец - ЛюбаяСсылка - ссылка на объект - владелец файла
//  Скан - ДвоичныеДанные - Двоичные данные отсканированного изображения
//  ИмяФайла - Строка - Имя файла, под которым будет сохранен файл на диске и представление файла
// Возвращаемое значение:
//  ФайлСсылка - СправочникСсылка.Файлы - Созданный файл
//
Функция ДанныеСканаВФайл(Владелец, Скан, ИмяФайла)
	
	Идентификатор = Новый УникальныйИдентификатор();
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Скан, Идентификатор);
	Попытка
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
		СведенияОФайле.ЗаписатьВИсторию = Истина;
		СведенияОФайле.ИмяБезРасширения = ИмяФайла;
		СведенияОФайле.РасширениеБезТочки = "jpg";
		СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
		СведенияОФайле.ВремяИзмененияУниверсальное = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(
			СведенияОФайле.ВремяИзменения);
		СведенияОФайле.Размер = Скан.Размер();
		
		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Владелец, СведенияОФайле);
	Исключение
		УдалитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
			ИнформацияОбОшибке());
	КонецПопытки;
	
	УдалитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);

	Возврат ФайлСсылка;

КонецФункции

#КонецОбласти


#КонецЕсли