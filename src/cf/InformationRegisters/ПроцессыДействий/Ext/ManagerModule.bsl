#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает новую запись в регистре.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Исполнение,
//            БизнесПроцессСсылка.Рассмотрение,
//            БизнесПроцессСсылка.Ознакомление,
//            БизнесПроцессСсылка.Регистрация,
//            БизнесПроцессСсылка.Согласование,
//            БизнесПроцессСсылка.Подписание,
//            БизнесПроцессСсылка.Утверждение.
//  Действие - СправочникСсылка.ДействияОзнакомления,
//             СправочникСсылка.ДействияСогласования,
//             СправочникСсылка.ДействияРегистрации,
//             СправочникСсылка.ДействияПодписания,
//             СправочникСсылка.ДействияУтверждения,
//             СправочникСсылка.ДействияИсполнения.
//  ИдентификаторПункта - УникальныйИдентификатор - идентификатор пункта.
//
Процедура Добавить(Процесс, Действие, ИдентификаторПункта = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Менеджер = СоздатьМенеджерЗаписи();
	Менеджер.Процесс = Процесс;
	Менеджер.Действие = Действие;
	Менеджер.ИдентификаторПункта = ИдентификаторПункта;
	Менеджер.Записать();
	
КонецПроцедуры

// Удаляет связь процесса и действия.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Исполнение,
//            БизнесПроцессСсылка.Рассмотрение,
//            БизнесПроцессСсылка.Ознакомление,
//            БизнесПроцессСсылка.Регистрация,
//            БизнесПроцессСсылка.Согласование,
//            БизнесПроцессСсылка.Подписание,
//            БизнесПроцессСсылка.Утверждение - Ссылка на процесс, для которого нужно удалить связь.
//
Процедура Удалить(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Процесс) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан процесс для удаления записи'");
	КонецЕсли;
	
	Набор = РегистрыСведений.ПроцессыДействий.СоздатьНаборЗаписей();
	Набор.Отбор.Процесс.Установить(Процесс);
	Набор.Прочитать();
	
	Если Набор.Количество() Тогда
		Набор.Очистить();
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает процессы действия, упорядоченные по дате.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//  ТолькоАктивные - Булево - если Истина, то возвращаются только активные процессы.
//
// Возвращаемое значение:
//  Массив из БизнесПроцессСсылка - Процессы действия.
//
Функция ПроцессыДействия(Действие, ТолькоАктивные = Ложь) Экспорт
	
	Действия = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие);
	ПроцессыДействий = ПроцессыДействий(Действия, ТолькоАктивные);
	ПроцессыДействия = ПроцессыДействий[Действие];
	
	Возврат ПроцессыДействия;
	
КонецФункции

// Возвращает процессы действий, упорядоченные по дате.
//
// Параметры:
//  Действия - Массив из ОпределяемыйТип.Действия.
//  ТолькоАктивные - Булево - если Истина, то возвращаются только активные процессы.
//
// Возвращаемое значение:
//  Соответствие - Процессы действий.
//   * Ключ - ОпределяемыйТип.Действия - Действие.
//   * Значение - Массив из БизнесПроцессСсылка - Процессы действия.
//
Функция ПроцессыДействий(Действия, ТолькоАктивные = Ложь) Экспорт
	
	ПроцессыДействий = Новый Соответствие;
	Для Каждого Действие Из Действия Цикл
		ПроцессыДействий.Вставить(Действие, Новый Массив);
	КонецЦикла;
	
	Если Действия.Количество() = 0 Тогда
		Возврат ПроцессыДействий;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПроцессыДействий.Процесс КАК Процесс,
		|	ПроцессыДействий.Действие КАК Действие
		|ИЗ
		|	РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ПроцессыДействий.Процесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|ГДЕ
		|	ПроцессыДействий.Действие В(&Действия)
		|	И &УсловиеАктивностиПроцессов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеБизнесПроцессов.Дата УБЫВ";
	
	Если ТолькоАктивные Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&УсловиеАктивностиПроцессов",
			"ДанныеБизнесПроцессов.ПометкаУдаления = ЛОЖЬ
			|	И ДанныеБизнесПроцессов.Завершен = ЛОЖЬ
			|	И ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Действия", Действия);
	
	Если Не ТолькоАктивные Тогда
		Запрос.УстановитьПараметр("УсловиеАктивностиПроцессов", Истина);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПроцессыДействия = ПроцессыДействий[Выборка.Действие];
		ПроцессыДействия.Добавить(Выборка.Процесс);
	КонецЦикла;
	
	Возврат ПроцессыДействий;
	
КонецФункции

// Возвращает действие по процессу
//
// Параметры:
//  Процесс
//
// Возвращаемое значение:
//  Действие - ОпределяемыйТип.Действия - действие.
//
Функция ДействиеПоПроцессу(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроцессыДействий.Действие КАК Действие
		|ИЗ
		|	РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|ГДЕ
		|	ПроцессыДействий.Процесс = &Процесс";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Действие;
	
КонецФункции

// Возвращает действия по процессам.
//
// Параметры:
//  Процессы - Массив из БизнесПроцессСсылка.
//
// Возвращаемое значение:
//  Соответствие - Действия по процессам.
//   * Ключ - БизнесПроцессСсылка - Процесс.
//   * Значение - ОпределяемыйТип.Действия - Действие.
//
Функция ДействияПоПроцессам(Процессы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДействияПоПроцессам = Новый Соответствие;
	Если Процессы.Количество() = 0 Тогда
		Возврат ДействияПоПроцессам;
	КонецЕсли;
	
	Для Каждого Процесс Из Процессы Цикл
		
		ДействияПоПроцессам[Процесс] = Неопределено;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПроцессыДействий.Процесс КАК Процесс,
		|	ПроцессыДействий.Действие КАК Действие
		|ИЗ
		|	РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|ГДЕ
		|	ПроцессыДействий.Процесс В (&Процессы)");

	Запрос.УстановитьПараметр("Процессы", Процессы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДействияПоПроцессам[Выборка.Процесс] = Выборка.Действие;
		
	КонецЦикла;
	
	Возврат ДействияПоПроцессам;
	
КонецФункции

// Возвращает процессы действий с идентификаторами пункта, упорядоченные по дате.
//
// Параметры:
//  Действие - Массив из ОпределяемыйТип.Действия.
//  ТолькоАктивные - Булево - если Истина, то возвращаются только активные процессы.
//
// Возвращаемое значение:
//  Соответствие - Процессы действий.
//   * Ключ - Уникальный идентификатор - ИД пункта.
//   * Значение - Массив из БизнесПроцессСсылка - Процессы действия.
//
Функция ПроцессыДействияСИдентификаторамиПунктов(Действие, ТолькоАктивные = Ложь) Экспорт
	
	ПроцессыДействия = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат ПроцессыДействия;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПроцессыДействий.Процесс КАК Процесс,
		|	ПроцессыДействий.Действие КАК Действие,
		|	ПроцессыДействий.ИдентификаторПункта
		|ИЗ
		|	РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ПроцессыДействий.Процесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|ГДЕ
		|	ПроцессыДействий.Действие = &Действие
		|	И &УсловиеАктивностиПроцессов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеБизнесПроцессов.Дата УБЫВ";
	
	Если ТолькоАктивные Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&УсловиеАктивностиПроцессов",
			"ДанныеБизнесПроцессов.ПометкаУдаления = ЛОЖЬ
			|	И ДанныеБизнесПроцессов.Завершен = ЛОЖЬ
			|	И ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Если Не ТолькоАктивные Тогда
		Запрос.УстановитьПараметр("УсловиеАктивностиПроцессов", Истина);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл				
		Если ПроцессыДействия[Выборка.ИдентификаторПункта] = Неопределено Тогда
			ПроцессыДействия.Вставить(Выборка.ИдентификаторПункта, Выборка.Процесс);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроцессыДействия;
	
КонецФункции

// Возвращает действие с пунктом по процессу.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Исполнение
//
// Возвращаемое значение:
//  Структура
//   * Действие - СправочникСсылка.ДействияИсполнения
//   * Пункт - УникальныйИдентификатор
//
Функция ДействиеСПунктомПоПроцессу(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Действие, Пункт");
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроцессыДействий.Действие КАК Действие,
		|	ПроцессыДействий.ИдентификаторПункта
		|ИЗ
		|	РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|ГДЕ
		|	ПроцессыДействий.Процесс = &Процесс";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.Действие = Выборка.Действие;
		Результат.Пункт = Выборка.ИдентификаторПункта;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
