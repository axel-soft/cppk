#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует структуру действия.
//
Функция Действие(ДействиеВиджета, Источник, ВыраженияПараметровДействия) Экспорт
	
	ПараметрыДействия = ПараметрыДействия(ВыраженияПараметровДействия);
	Если ДействиеВиджета = ОткрытьФорму Тогда
		
		Действие = ДействиеОткрытьФорму(ПараметрыДействия[0], ПараметрыДействия[1]);
		
	ИначеЕсли ДействиеВиджета = ОткрытьРеестр Тогда
		
		Действие = ОткрытьРеестр(Источник);
		
	ИначеЕсли ДействиеВиджета = ПереходПоСсылке Тогда
		
		Действие = ПереходПоСсылке(ПараметрыДействия[0]);
		
	ИначеЕсли ДействиеВиджета = ПоказатьБлок Тогда
		
		Действие = ПоказатьБлок();
		
	ИначеЕсли ДействиеВиджета = ПоказатьПредыдущийБлок Тогда
		
		Действие = ПоказатьПредыдущийБлок();
		
	ИначеЕсли ДействиеВиджета = ПоказатьСледующийБлок Тогда
		
		Действие = ПоказатьСледующийБлок();
		
	ИначеЕсли ДействиеВиджета = СоздатьДокумент Тогда
		
		Действие = СоздатьДокумент(ПараметрыДействия[0]);
		
	ИначеЕсли ДействиеВиджета = СоздатьЕжедневныйОтчет Тогда
		
		Действие = СоздатьЕжедневныйОтчет(ПараметрыДействия[0]);
		
	ИначеЕсли ДействиеВиджета = СоздатьЭлемент Тогда
		
		Действие = СоздатьЭлемент(Источник);
		
	ИначеЕсли ДействиеВиджета = СоздатьЭлементРеестра Тогда
		
		Действие = СоздатьЭлементРеестра(Источник);
		
	ИначеЕсли ДействиеВиджета = НичегоНеДелать Тогда
		
		Действие = СтруктураДействия(ДействиеВиджета);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестное действие виджета %1.'"),
			ДействиеВиджета);
		
	КонецЕсли;
	
	Возврат Действие;
	
КонецФункции

// Формирует структуру действия "Открытие формы".
Функция ДействиеОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормыДляОткрытия) Экспорт
	
	Действие = СтруктураДействия(ОткрытьФорму);
	Действие.Вставить("ИмяФормыДляОткрытия", ИмяФормыДляОткрытия);
	Действие.Вставить("ПараметрыФормыДляОткрытия", ПараметрыФормыДляОткрытия);
	
	Возврат Действие;
	
КонецФункции

Функция ОписаниеДействия(ДействиеВиджета) Экспорт
	
	ОписаниеДействия = НовыйОписаниеДействия();
	Если Не ЗначениеЗаполнено(ДействиеВиджета) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Если ДействиеВиджета = ОткрытьФорму Тогда
		
		ОписаниеДействия.КоличествоПараметров = 2;
		ОписаниеДействия.ТребуетсяИсточник = Ложь;
		ОписаниеДействия.ПодсказкаПараметра1 =
			"""РегистрСведений.МоиДокументы.Форма.ФормаМоиДокументы""";
		ОписаниеДействия.ПодсказкаПараметра2 =
			"Новый Структура(""КлючНазначенияИспользования"", ""ОтображениеПросроченныхДокументов"")";
		ОписаниеДействия.ПодсказкаИсточника = "";
		
	ИначеЕсли ДействиеВиджета = ОткрытьРеестр Тогда
		
		ОписаниеДействия.КоличествоПараметров = 0;
		ОписаниеДействия.ТребуетсяИсточник = Истина;
		ОписаниеДействия.ПодсказкаПараметра1 = "";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника =
			"Справочники.Реестры.НайтиПоНаименованию(""ВходящиеДокументы"")";
		
	ИначеЕсли ДействиеВиджета = ПереходПоСсылке Тогда
		
		ОписаниеДействия.КоличествоПараметров = 1;
		ОписаниеДействия.ТребуетсяИсточник = Ложь;
		ОписаниеДействия.ПодсказкаПараметра1 = "e1cib/command/Справочник.КомандыВиджетов.Команда.КомандыВиджетов";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника = "";
		
	ИначеЕсли ДействиеВиджета = ПоказатьБлок Тогда
		
		ОписаниеДействия.КоличествоПараметров = 0;
		ОписаниеДействия.ТребуетсяИсточник = Ложь;
		ОписаниеДействия.ПодсказкаПараметра1 = "";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника = "";
		
	ИначеЕсли ДействиеВиджета = ПоказатьПредыдущийБлок Тогда
		
		ОписаниеДействия.КоличествоПараметров = 0;
		ОписаниеДействия.ТребуетсяИсточник = Ложь;
		ОписаниеДействия.ПодсказкаПараметра1 = "";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника = "";
		
	ИначеЕсли ДействиеВиджета = ПоказатьСледующийБлок Тогда
		
		ОписаниеДействия.КоличествоПараметров = 0;
		ОписаниеДействия.ТребуетсяИсточник = Ложь;
		ОписаниеДействия.ПодсказкаПараметра1 = "";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника = "";
		
	ИначеЕсли ДействиеВиджета = СоздатьДокумент Тогда
		
		ОписаниеДействия.КоличествоПараметров = 1;
		ОписаниеДействия.ТребуетсяИсточник = Ложь;
		ОписаниеДействия.ПодсказкаПараметра1 =
			"ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыДокументов.НайтиПоНаименованию(""Служебная записка""))";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника = "";		
		
	ИначеЕсли ДействиеВиджета = СоздатьЕжедневныйОтчет Тогда
		
		ОписаниеДействия.КоличествоПараметров = 1;
		ОписаниеДействия.ТребуетсяИсточник = Ложь;
		ОписаниеДействия.ПодсказкаПараметра1 = "ТекущаяДатаСеанса()";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника = "";
		
	ИначеЕсли ДействиеВиджета = СоздатьЭлемент Тогда
		
		ОписаниеДействия.КоличествоПараметров = 0;
		ОписаниеДействия.ТребуетсяИсточник = Истина;
		ОписаниеДействия.ПодсказкаПараметра1 = "";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника = "Справочник.СообщенияОбсуждений";
		
	ИначеЕсли ДействиеВиджета = СоздатьЭлементРеестра Тогда
		
		ОписаниеДействия.КоличествоПараметров = 0;
		ОписаниеДействия.ТребуетсяИсточник = Истина;
		ОписаниеДействия.ПодсказкаПараметра1 = "";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника =
			"Справочники.Реестры.НайтиПоНаименованию(""ВходящиеДокументы"")";
		
	ИначеЕсли ДействиеВиджета = НичегоНеДелать Тогда
		
		ОписаниеДействия.КоличествоПараметров = 0;
		ОписаниеДействия.ТребуетсяИсточник = Ложь;
		ОписаниеДействия.ПодсказкаПараметра1 = "";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника = "";
		
	ИначеЕсли ДействиеВиджета = ОбработатьИсточник Тогда
		
		ОписаниеДействия.КоличествоПараметров = 0;
		ОписаниеДействия.ТребуетсяИсточник = Истина;
		ОписаниеДействия.ПодсказкаПараметра1 = "";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника = "Справочник.СообщенияОбсуждений";
		
	ИначеЕсли ДействиеВиджета = ПоказатьВыборИзМеню Тогда
		
		ОписаниеДействия.КоличествоПараметров = 0;
		ОписаниеДействия.ТребуетсяИсточник = Истина;
		ОписаниеДействия.ПодсказкаПараметра1 = "";
		ОписаниеДействия.ПодсказкаПараметра2 = "";
		ОписаниеДействия.ПодсказкаИсточника = "Справочник.СообщенияОбсуждений";
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестное действие виджета %1.'"),
			ДействиеВиджета);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

// Формирует структуру действия "Открыть реестр".
Функция ОткрытьРеестр(Реестр) Экспорт
	
	Действие = СтруктураДействия(ОткрытьРеестр);
	Действие.Вставить("Реестр", Реестр);
	
	Возврат Действие;
	
КонецФункции

// Формирует структуру действия "Переход по ссылке".
Функция ПереходПоСсылке(СсылкаДляПерехода) Экспорт
	
	Действие = СтруктураДействия(ПереходПоСсылке);
	Действие.Вставить("СсылкаДляПерехода", СсылкаДляПерехода);
	
	Возврат Действие;
	
КонецФункции

// Формирует структуру действия "Показать блок".
Функция ПоказатьБлок() Экспорт
	
	Действие = СтруктураДействия(ПоказатьБлок);
	
	Возврат Действие;
	
КонецФункции

// Формирует структуру действия "Показать выбор из меню".
Функция ПоказатьВыборИзМеню(Меню) Экспорт
	
	Действие = СтруктураДействия(ПоказатьВыборИзМеню);
	Действие.Вставить("Меню", Меню);
	
	Возврат Действие;
	
КонецФункции

// Формирует структуру действия "Показать предыдущий блок".
Функция ПоказатьПредыдущийБлок() Экспорт
	
	Действие = СтруктураДействия(ПоказатьПредыдущийБлок);
	
	Возврат Действие;
	
КонецФункции

// Формирует структуру действия "Показать следующий блок".
Функция ПоказатьСледующийБлок() Экспорт
	
	Действие = СтруктураДействия(ПоказатьСледующийБлок);
	
	Возврат Действие;
	
КонецФункции

// Формирует структуру действия "Создать документ".
Функция СоздатьДокумент(ВидыДокументов) Экспорт
	
	Действие = СтруктураДействия(СоздатьДокумент);
	Действие.Вставить("ВидыДокументов", ВидыДокументов);
	
	Возврат Действие;
	
КонецФункции

// Формирует структуру действия "Создать документ".
Функция СоздатьЕжедневныйОтчет(ДатаОтчета) Экспорт
	
	Действие = СтруктураДействия(СоздатьЕжедневныйОтчет);
	Действие.Вставить("ДатаОтчета", ДатаОтчета);
	
	Возврат Действие;
	
КонецФункции

// Формирует структуру действия "Создать элемент".
Функция СоздатьЭлемент(Источник) Экспорт
	
	СсылкаДляПерехода = СтрШаблон("e1cib/data/%1?ref=00000000000000000000000000000000", Источник);
	Действие = ПереходПоСсылке(СсылкаДляПерехода);
	
	Возврат Действие;
	
КонецФункции

// Формирует структуру действия "Создать элемент реестра".
Функция СоздатьЭлементРеестра(Реестр) Экспорт
	
	Действие = СтруктураДействия(СоздатьЭлементРеестра);
	Действие.Вставить("Реестр", Реестр);
	
	Возврат Действие;
	
КонецФункции

// Формирует структуру действия "Ничего не делать".
Функция НичегоНеДелать() Экспорт
	
	Действие = СтруктураДействия(НичегоНеДелать);
	
	Возврат Действие;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Стандартные") И Параметры.Стандартные Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Параметры.Вставить("Стандартные", Истина);
	ДанныеВыбора = Перечисления.ДействияВиджетов.ПолучитьДанныеВыбора(Параметры);
	
	КоличествоЭлементов = ДанныеВыбора.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементДанныхВыбора = ДанныеВыбора[ОбратныйИндекс];
		
		Если ЭлементДанныхВыбора.Значение.Значение = ПоказатьБлок
			Или ЭлементДанныхВыбора.Значение.Значение = ПоказатьВыборИзМеню
			Или ЭлементДанныхВыбора.Значение.Значение = ПоказатьПредыдущийБлок
			Или ЭлементДанныхВыбора.Значение.Значение = ПоказатьСледующийБлок Тогда
			ДанныеВыбора.Удалить(ОбратныйИндекс);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует структуру действия.
Функция СтруктураДействия(ДействиеВиджета)
	
	Действие = Новый Структура;
	Действие.Вставить("ДействиеВиджета", ДействиеВиджета);
	
	Возврат Действие;
	
КонецФункции

// Рассчитывает параметры действий.
Функция ПараметрыДействия(ВыражениеПараметровДействия)
	
	ПараметрыДействия = Новый Массив;
	Для Каждого ВыражениеПараметраДействия Из ВыражениеПараметровДействия Цикл
		ПараметрДействия = ПараметрДействия(ВыражениеПараметраДействия);
		ПараметрыДействия.Добавить(ПараметрДействия);
	КонецЦикла;
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Рассчитывает параметр действий.
Функция ПараметрДействия(ВыражениеПараметраДействия)
	
	Если Не ЗначениеЗаполнено(ВыражениеПараметраДействия) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьБезопасныйРежим(Истина);
	
	ПараметрДействия = Вычислить(ВыражениеПараметраДействия);
	
	Возврат ПараметрДействия;
	
КонецФункции

// Формирует структуру описания действия.
// 
// Возвращаемое значение:
//  Структура - Описание действия.
//   * КоличествоПараметров - Число.
//   * ТребуетсяИсточник - Булево. 
//  
Функция НовыйОписаниеДействия()
	
	ОписаниеДействия = Новый Структура(
		"КоличествоПараметров, ТребуетсяИсточник,
		|ПодсказкаПараметра1, ПодсказкаПараметра2, ПодсказкаИсточника");
	ОписаниеДействия.КоличествоПараметров = 0;
	ОписаниеДействия.ТребуетсяИсточник = Ложь;
	ОписаниеДействия.ПодсказкаПараметра1 = "";
	ОписаниеДействия.ПодсказкаПараметра2 = "";
	ОписаниеДействия.ПодсказкаИсточника = "";
	
	Возврат ОписаниеДействия;
	
КонецФункции

#КонецОбласти

#КонецЕсли