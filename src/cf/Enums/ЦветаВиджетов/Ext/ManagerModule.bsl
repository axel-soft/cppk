#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет картинку границы контейнера виджета.
//
// Параметры:
//  ЦветВиджета - ПеречислениеСсылка.ЦветаВиджетов.
// 
// Возвращаемое значение:
//  Картинка - Граница контейнера виджета.
//
Функция ГраницаКонтейнераВиджета(ЦветВиджета) Экспорт
	
	Если ЦветВиджета = Белый Тогда
		
		Возврат БиблиотекаКартинок.ГраницаКонтейнераВиджетаБелый;
		
	ИначеЕсли ЦветВиджета = Желтый Тогда
		
		Возврат БиблиотекаКартинок.ГраницаКонтейнераВиджетаЖелтый;
		
	ИначеЕсли ЦветВиджета = Зеленый Тогда
		
		Возврат БиблиотекаКартинок.ГраницаКонтейнераВиджетаЗеленый;
		
	ИначеЕсли ЦветВиджета = Оранжевый Тогда
		
		Возврат БиблиотекаКартинок.ГраницаКонтейнераВиджетаОранжевый;
		
	ИначеЕсли ЦветВиджета = Серый Тогда
		
		Возврат БиблиотекаКартинок.ГраницаКонтейнераВиджетаСерый;
		
	ИначеЕсли ЦветВиджета = Синий Тогда
		
		Возврат БиблиотекаКартинок.ГраницаКонтейнераВиджетаСиний;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестная граница контейнера виджета %1.'"),
			ЦветВиджета);
		
	КонецЕсли;
	
КонецФункции

// Определяет картинку обычной внутренней рамки.
//
// Параметры:
//  ЦветВиджета - ПеречислениеСсылка.ЦветаВиджетов.
// 
// Возвращаемое значение:
//  Структура - Картинки обычной внутренней рамки. См. Перечисления.ЦветаВиджетов.КартинкиРамки().
//
Функция КартинкиОбычнойВнутреннейРамки(ЦветВиджета) Экспорт
	
	КартинкиРамки = КартинкиРамки();
	
	Если ЦветВиджета = Желтый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнутренняяРамкаОбычныйВерхЖелтый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнутренняяРамкаОбычныйНизЖелтый;
		
	ИначеЕсли ЦветВиджета = Зеленый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнутренняяРамкаОбычныйВерхЗеленый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнутренняяРамкаОбычныйНизЗеленый;
		
	ИначеЕсли ЦветВиджета = Оранжевый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнутренняяРамкаОбычныйВерхОранжевый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнутренняяРамкаОбычныйНизОранжевый;
		
	ИначеЕсли ЦветВиджета = Серый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнутренняяРамкаОбычныйВерхСерый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнутренняяРамкаОбычныйНизСерый;
		
	ИначеЕсли ЦветВиджета = Синий Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнутренняяРамкаОбычныйВерхСиний;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнутренняяРамкаОбычныйНизСиний;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестные картинки внутренней рамки %1.'"),
			ЦветВиджета);
		
	КонецЕсли;
	
	Возврат КартинкиРамки;
	
КонецФункции

// Определяет картинку узкой внутренней рамки.
//
// Параметры:
//  ЦветВиджета - ПеречислениеСсылка.ЦветаВиджетов.
// 
// Возвращаемое значение:
//  Структура - Картинки узкой внутренней рамки. См. Перечисления.ЦветаВиджетов.КартинкиРамки().
//
Функция КартинкиУзкойВнутреннейРамки(ЦветВиджета) Экспорт
	
	КартинкиРамки = КартинкиРамки();
	
	Если ЦветВиджета = Желтый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнутренняяРамкаУзкийВерхЖелтый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнутренняяРамкаУзкийНизЖелтый;
		
	ИначеЕсли ЦветВиджета = Зеленый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнутренняяРамкаУзкийВерхЗеленый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнутренняяРамкаУзкийНизЗеленый;
		
	ИначеЕсли ЦветВиджета = Оранжевый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнутренняяРамкаУзкийВерхОранжевый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнутренняяРамкаУзкийНизОранжевый;
		
	ИначеЕсли ЦветВиджета = Серый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнутренняяРамкаУзкийВерхСерый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнутренняяРамкаУзкийНизСерый;
		
	ИначеЕсли ЦветВиджета = Синий Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнутренняяРамкаУзкийВерхСиний;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнутренняяРамкаУзкийНизСиний;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестные картинки внутренней рамки %1.'"),
			ЦветВиджета);
		
	КонецЕсли;
	
	Возврат КартинкиРамки;
	
КонецФункции

// Определяет картинку обычной внешней рамки.
//
// Параметры:
//  ЦветВиджета - ПеречислениеСсылка.ЦветаВиджетов.
// 
// Возвращаемое значение:
//  Структура - Картинки обычной внешней рамки. См. Перечисления.ЦветаВиджетов.КартинкиРамки().
//
Функция КартинкиОбычнойВнешнейРамки(ЦветВиджета) Экспорт
	
	КартинкиРамки = КартинкиРамки();
	
	Если ЦветВиджета = Белый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаОбычныйВерхБелый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаОбычныйНизБелый;
		
	ИначеЕсли ЦветВиджета = Желтый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаОбычныйВерхЖелтый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаОбычныйНизЖелтый;
		
	ИначеЕсли ЦветВиджета = Зеленый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаОбычныйВерхЗеленый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаОбычныйНизЗеленый;
		
	ИначеЕсли ЦветВиджета = Оранжевый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаОбычныйВерхОранжевый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаОбычныйНизОранжевый;
		
	ИначеЕсли ЦветВиджета = Серый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаОбычныйВерхСерый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаОбычныйНизСерый;
		
	ИначеЕсли ЦветВиджета = Синий Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаОбычныйВерхСиний;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаОбычныйНизСиний;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестные картинки внешней рамки %1.'"),
			ЦветВиджета);
		
	КонецЕсли;
	
	Возврат КартинкиРамки;
	
КонецФункции

// Определяет картинку широкой внешней рамки.
//
// Параметры:
//  ЦветВиджета - ПеречислениеСсылка.ЦветаВиджетов.
// 
// Возвращаемое значение:
//  Структура - Картинки широкой внешней рамки. См. Перечисления.ЦветаВиджетов.КартинкиРамки().
//
Функция КартинкиШирокойВнешнейРамки(ЦветВиджета) Экспорт
	
	КартинкиРамки = КартинкиРамки();
	
	Если ЦветВиджета = Белый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаШирокийВерхБелый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаШирокийНизБелый;
		
	ИначеЕсли ЦветВиджета = Желтый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаШирокийВерхЖелтый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаШирокийНизЖелтый;
		
	ИначеЕсли ЦветВиджета = Зеленый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаШирокийВерхЗеленый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаШирокийНизЗеленый;
		
	ИначеЕсли ЦветВиджета = Оранжевый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаШирокийВерхОранжевый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаШирокийНизОранжевый;
		
	ИначеЕсли ЦветВиджета = Серый Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаШирокийВерхСерый;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаШирокийНизСерый;
		
	ИначеЕсли ЦветВиджета = Синий Тогда
		
		КартинкиРамки.Верх = БиблиотекаКартинок.ВнешняяРамкаШирокийВерхСиний;
		КартинкиРамки.Низ = БиблиотекаКартинок.ВнешняяРамкаШирокийНизСиний;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестные картинки внешней рамки %1.'"),
			ЦветВиджета);
		
	КонецЕсли;
	
	Возврат КартинкиРамки;
	
КонецФункции

// Определяет цвет фона виджета.
Функция ЦветФона(ЦветВиджета) Экспорт
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	Если ЦветВиджета = Белый Тогда
		
		Если Не ЭтоМобильныйКлиент Тогда
			Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ФонВиджетаБелый");
		Иначе
			Возврат ЦветаСтиля.МК_ФонВиджетаБелый;
		КонецЕсли;

	ИначеЕсли ЦветВиджета = Зеленый Тогда
		
		Если Не ЭтоМобильныйКлиент Тогда
			Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ФонВиджетаЗеленый");
		Иначе
			Возврат ЦветаСтиля.МК_ФонВиджетаЗеленый;
		КонецЕсли;
		
	ИначеЕсли ЦветВиджета = Желтый Тогда
		
		Если Не ЭтоМобильныйКлиент Тогда
			Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ФонВиджетаЖелтый");
		Иначе
			Возврат ЦветаСтиля.МК_ФонВиджетаЖелтый;
		КонецЕсли;
		
	ИначеЕсли ЦветВиджета = Оранжевый Тогда
		
		Если Не ЭтоМобильныйКлиент Тогда
			Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ФонВиджетаОранжевый");
		Иначе
			Возврат ЦветаСтиля.МК_ФонВиджетаОранжевый;
		КонецЕсли;
		
	ИначеЕсли ЦветВиджета = Серый Тогда
		
		Если Не ЭтоМобильныйКлиент Тогда
			Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ФонВиджетаСерый");
		Иначе
			Возврат ЦветаСтиля.МК_ФонВиджетаСерый;
		КонецЕсли;
		
	ИначеЕсли ЦветВиджета = Синий Тогда
		
		Если Не ЭтоМобильныйКлиент Тогда
			Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ФонВиджетаСиний");
		Иначе
			Возврат ЦветаСтиля.МК_ФонВиджетаСиний;
		КонецЕсли;
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный цвет фона %1.'"),
			ЦветВиджета);

	КонецЕсли;
	
КонецФункции

// Определяет цвет серии виджета.
Функция ЦветСерии(ЦветВиджета) Экспорт
	
	Если ЦветВиджета = Голубой Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("СерияДиаграммыВиджетаГолубой");
		
	ИначеЕсли ЦветВиджета = Желтый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("СерияДиаграммыВиджетаЖелтый");
		
	ИначеЕсли ЦветВиджета = Оранжевый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("СерияДиаграммыВиджетаОранжевый");
		
	ИначеЕсли ЦветВиджета = Серый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("СерияДиаграммыВиджетаСерый");
		
	ИначеЕсли ЦветВиджета = Синий Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("СерияДиаграммыВиджетаСиний");
		
	ИначеЕсли ЦветВиджета = Красный Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("СерияДиаграммыВиджетаКрасный");
		
	ИначеЕсли ЦветВиджета = Розовый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("СерияДиаграммыВиджетаРозовый");
		
	ИначеЕсли ЦветВиджета = Зеленый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("СерияДиаграммыВиджетаЗеленый");
		
	ИначеЕсли ЦветВиджета = Фиолетовый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("СерияДиаграммыВиджетаФиолетовый");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный цвет текста %1.'"),
			ЦветВиджета);
		
	КонецЕсли;
	
КонецФункции

// Возвращает цвета серий виджетов.
//
Функция ЦветаСерий() Экспорт
	
	ЦветаСерий = Новый Соответствие;
	
	Возврат ЦветаСерий;
	
КонецФункции

// Определяет цвет текста виджета.
Функция ЦветТекста(ЦветВиджета) Экспорт
	
	Если ЦветВиджета = Белый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("НадписьВиджетаБелый");
		
	ИначеЕсли ЦветВиджета = Желтый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("НадписьВиджетаЖелтый");
		
	ИначеЕсли ЦветВиджета = Зеленый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("НадписьВиджетаЗеленый");
		
	ИначеЕсли ЦветВиджета = Оранжевый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("НадписьВиджетаОранжевый");
		
	ИначеЕсли ЦветВиджета = Серый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("НадписьВиджетаСерый");
		
	ИначеЕсли ЦветВиджета = Синий Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("НадписьВиджетаСиний");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный цвет текста %1.'"),
			ЦветВиджета);
		
	КонецЕсли;
	
КонецФункции

// Определяет цвет подписи виджета.
Функция ЦветПодписи(ЦветВиджета) Экспорт
	
	Если ЦветВиджета = Желтый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ПодписьВиджетаЖелтый");
		
	ИначеЕсли ЦветВиджета = Зеленый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ПодписьВиджетаЗеленый");
		
	ИначеЕсли ЦветВиджета = Оранжевый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ПодписьВиджетаОранжевый");
		
	ИначеЕсли ЦветВиджета = Серый Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ПодписьВиджетаСерый");
		
	ИначеЕсли ЦветВиджета = Синий Тогда
		
		Возврат РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ПодписьВиджетаСиний");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный цвет подписи %1.'"),
			ЦветВиджета);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Стандартные") И Параметры.Стандартные Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Параметры.Вставить("Стандартные", Истина);
	ДанныеВыбора = Перечисления.ЦветаВиджетов.ПолучитьДанныеВыбора(Параметры);
	
	Если Не Параметры.Свойство("НаборЦветов") Тогда
		Возврат;
	КонецЕсли;
	
	НаборЦветов = НаборыЦветов()[Параметры.НаборЦветов];
	
	КоличествоЭлементов = ДанныеВыбора.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементДанныхВыбора = ДанныеВыбора[ОбратныйИндекс];
		
		Если НаборЦветов.Найти(ЭлементДанныхВыбора.Значение.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВыбора.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает наборы цветов.
// 
// Возвращаемое значение:
//  Соответствие - Наборы цветов.
//   * Ключ - Строка - Набор цветов.
//   * Значение - Массив из ПеречислениеСсылка.ЦветаВиджетов - Цвета набора.
//  
Функция НаборыЦветов()
	
	НаборыЦветов = Новый Соответствие;
	
	// Виджеты.
	НаборЦветов = Новый Массив;
	НаборЦветов.Добавить(Авто);
	НаборЦветов.Добавить(Желтый);
	НаборЦветов.Добавить(Зеленый);
	НаборЦветов.Добавить(Оранжевый);
	НаборЦветов.Добавить(Серый);
	НаборЦветов.Добавить(Синий);
	НаборыЦветов["Виджеты"] = НаборЦветов;
	
	// Серии.
	НаборЦветов = Новый Массив;
	НаборЦветов.Добавить(Голубой);
	НаборЦветов.Добавить(Желтый);
	НаборЦветов.Добавить(Оранжевый);
	НаборЦветов.Добавить(Серый);
	НаборЦветов.Добавить(Синий);
	НаборЦветов.Добавить(Красный);
	НаборЦветов.Добавить(Розовый);
	НаборЦветов.Добавить(Зеленый);
	НаборЦветов.Добавить(Фиолетовый);
	НаборыЦветов["Серии"] = НаборЦветов;
	
	Возврат НаборыЦветов;
	
КонецФункции

// Формирует структуру картинок рамки.
// 
// Возвращаемое значение:
//  Структура - Картинки рамки.
//   * Верх - Картинка.
//   * Низ - Картинка.
//
Функция КартинкиРамки()
	
	Возврат Новый Структура("Верх, Низ");
	
КонецФункции

#КонецОбласти

#КонецЕсли