
#Область ОписаниеПараметровФормы

// ЗаголовокФормы - Строка - устанавливает заголовок формы
// НаименованиеКнопкиВыбора - Строка - заголовок кнопки СоздатьПоШаблону
// ПоказыватьТолькоДокументыПригодныеДляЭДО - Булево - Если Истина, то не показывает шаблоны документов с формой Бумажная 
// (при этом документы с формой "Бумажная или электронная" показываются)и обращения
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ПоказыватьТолькоДокументыПригодныеДляЭДО = Истина Тогда 
		
		ПоказыватьТолькоДокументыПригодныеДляЭДО = Истина;
		
	Иначе
		
		ПоказыватьТолькоДокументыПригодныеДляЭДО = Ложь;
		
	КонецЕсли;
	
	ИсточникСоздания = Параметры.ИсточникСоздания;
	
	РегламентированныйУчетОбращений = ПолучитьФункциональнуюОпцию("РегламентированныйУчетОбращений");
	Если РегламентированныйУчетОбращений Тогда 
		ПодборИзКлассификатораОбращенийГражданСервер.ИнициализироватьКэшДанныхФормы(ЭтотОбъект);
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Параметры.ДоступныеВидыДокументов.Количество() > 0 Тогда 
		СписокДоступныхВидов = Параметры.ДоступныеВидыДокументов;
	КонецЕсли;
	
	ТипШаблонаДокумента = "ШаблоныДокументов";
	//Проверка на существование шаблонов для указанного типа документа
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый Массив;
	
	ТекстЗапросаДоступныеШаблоны = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныДокументов.Ссылка КАК Ссылка,
		|	ШаблоныДокументов.Тематика КАК Тематика,
		|	ШаблоныДокументов.ГрифДоступа КАК ГрифДоступа,
		|	ШаблоныДокументов.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ ДоступныеШаблоны
		|ИЗ
		|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|ГДЕ
		|	НЕ ШаблоныДокументов.ЭтоГруппа
		|	И НЕ ШаблоныДокументов.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Параметры.ТипКорреспонденции) Тогда
		
		ЧастиУсловияНаТипКорреспонденции = Новый Массив;
		ЧастиУсловияНаТипКорреспонденции.Добавить("	И ШаблоныДокументов.ВидДокумента.");
		ЧастиУсловияНаТипКорреспонденции.Добавить(Строка(Параметры.ТипКорреспонденции));
		ЧастиУсловияНаТипКорреспонденции.Добавить(" = ИСТИНА");
		ТекстЗапросаДоступныеШаблоны = ТекстЗапросаДоступныеШаблоны + Символы.ПС + 
			СтрСоединить(ЧастиУсловияНаТипКорреспонденции);
		
	КонецЕсли;
	
	Если Параметры.СозданиеОбращенияГраждан Тогда
			
		ТекстЗапросаДоступныеШаблоны = ТекстЗапросаДоступныеШаблоны + Символы.ПС + 
		"	И	(ШаблоныДокументов.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументов.ПустаяСсылка)
		|		ИЛИ ШаблоныДокументов.ВидДокумента.ЯвляетсяОбращениемОтГраждан = ИСТИНА)";
		
		СозданиеОбращенияГраждан = Параметры.СозданиеОбращенияГраждан;
		
	КонецЕсли;
	
	Если СписокДоступныхВидов.Количество() > 0 Тогда
		
		ТекстЗапросаДоступныеШаблоны = ТекстЗапросаДоступныеШаблоны + Символы.ПС + 
			"	И ШаблоныДокументов.ВидДокумента В(&СписокВидов)";
		Запрос.Параметры.Вставить("СписокВидов", СписокДоступныхВидов.ВыгрузитьЗначения());
		
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь(,, Ложь) Тогда
		
		ТекстыЗапроса.Добавить(ТекстЗапросаДоступныеШаблоны);
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	ДоступныеШаблоны КАК ДоступныеШаблоны");
		
	Иначе
		
		ТекстЗапросаДоступныеШаблоны = ТекстЗапросаДоступныеШаблоны + Символы.ПС + 
			"	И (ШаблоныДокументов.ГрифДоступа = Значение(Справочник.ГрифыДоступа.ПустаяСсылка)
			|		ИЛИ ШаблоныДокументов.ГрифДоступа В (ВЫБРАТЬ Ссылка ИЗ Справочник.ГрифыДоступа))";
		
		ТекстЗапросаДоступныеШаблоны = ТекстЗапросаДоступныеШаблоны + Символы.ПС +
			"	И НЕ ИСТИНА В 
			|	(ВЫБРАТЬ ИСТИНА
			|			ИЗ Справочник.ШаблоныДокументов.Контрагенты КАК ШаблоныДокументовКонтрагенты
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК КонтрагентыСпр
			|			ПО ШаблоныДокументовКонтрагенты.Контрагент = КонтрагентыСпр.Ссылка
			|		ГДЕ
			|			ШаблоныДокументовКонтрагенты.Ссылка = ШаблоныДокументов.Ссылка
			|			И ШаблоныДокументовКонтрагенты.Контрагент <> Значение(Справочник.Контрагенты.ПустаяСсылка)
			|			И КонтрагентыСпр.Ссылка ЕСТЬ NULL)";
		
		ТекстыЗапроса.Добавить(ТекстЗапросаДоступныеШаблоны);
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДоступныеШаблоны.Ссылка КАК Ссылка,
			|	РазрешенияНаСозданиеДокументов.Участник КАК Участник
			|ПОМЕСТИТЬ ДоступныеШаблоны1
			|ИЗ
			|	ДоступныеШаблоны КАК ДоступныеШаблоны
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенияНаСозданиеДокументов КАК РазрешенияНаСозданиеДокументов
			|		ПО РазрешенияНаСозданиеДокументов.ВидДокумента = ДоступныеШаблоны.ВидДокумента
			|			И (РазрешенияНаСозданиеДокументов.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
			|				ИЛИ ДоступныеШаблоны.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
			|				ИЛИ ДоступныеШаблоны.Тематика = РазрешенияНаСозданиеДокументов.Тематика)
			|ГДЕ
			|	НЕ РазрешенияНаСозданиеДокументов.Участник.ПометкаУдаления
			|ИНДЕКСИРОВАТЬ ПО
			|	Участник");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеШаблоны1.Ссылка) КАК Количество
			|ИЗ
			|	ДоступныеШаблоны1 КАК ДоступныеШаблоны1
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ПО ДоступныеШаблоны1.Участник = СотрудникиВКонтейнерах.Контейнер
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
			|		ПО СотрудникиВКонтейнерах.Сотрудник = СоставСубъектовПравДоступа.Субъект
			|ГДЕ
			|	СоставСубъектовПравДоступа.Сотрудник В (&ВсеСотрудникиПользователя)
			|	И СоставСубъектовПравДоступа.ИмяОбластиДелегирования В ("""", ""Документы"", ""ДокументыПросмотрИРедактирование"")
			|	И НЕ СоставСубъектовПравДоступа.СубъектПометкаУдаления");
		
		Запрос.УстановитьПараметр("ВсеСотрудникиПользователя", Сотрудники.ВсеСотрудникиТекущегоПользователя());
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ОбщееКоличествоШаблонов = Выборка.Количество;
	
	Если ОбщееКоличествоШаблонов = 0 Тогда
		ВызватьИсключение(ДелопроизводствоКлиентСервер.Текст_НетШаблоновИлиДоступаКНим());
	КонецЕсли;
	
	// Регламентированный учет обращений
	Если РегламентированныйУчетОбращений И Не ПоказыватьТолькоДокументыПригодныеДляЭДО Тогда 
		Элементы.Далее.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.СоздатьПоШаблону.Видимость = Ложь;
	Иначе 
		Элементы.Далее.Видимость = Ложь;
		Элементы.СоздатьПоШаблону.КнопкаПоУмолчанию = Истина;
		Элементы.СоздатьПоШаблону.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ОткрытьЗагрузкуКлассификатора.Видимость = 
		СозданиеОбращенияГраждан И РегламентированныйУчетОбращений 
		И Пользователи.ЭтоПолноправныйПользователь() 
		И ПодборИзКлассификатораОбращенийГражданСервер.КлассификаторОбращенийНеЗаполнен();
	
	ВозможностьСозданияПустогоДокумента = Параметры.ВозможностьСозданияПустогоДокумента;
	
	Если ЗначениеЗаполнено(Параметры.НаименованиеКнопкиВыбора) Тогда 
		Элементы.СоздатьПоШаблону.Заголовок = Параметры.НаименованиеКнопкиВыбора;
	КонецЕсли;
	
	СоздатьПоШаблону = Истина;
	АвтоЗаголовок = Ложь;
	ТипВида = "ВидыДокументов";
	
	Если Параметры.Свойство("ЗаголовокФормы") И ЗначениеЗаполнено(Параметры.ЗаголовокФормы) Тогда
		
		Заголовок = Параметры.ЗаголовокФормы;
		
	Иначе
		Если Параметры.ПерезаполнениеПоШаблону Тогда
			Если Не ЗначениеЗаполнено(ТипКорреспонденции) Тогда
				Заголовок = НСтр("ru = 'Заполнение документа по шаблону'");
			ИначеЕсли ТипКорреспонденции = "ЯвляетсяВходящейКорреспонденцией" Тогда
				Если СозданиеОбращенияГраждан = Истина Тогда 
					Заголовок = НСтр("ru = 'Заполнение обращения по шаблону'");
				Иначе 
					Заголовок = НСтр("ru = 'Заполнение входящего документа по шаблону'");
				КонецЕсли;
			ИначеЕсли ТипКорреспонденции = "ЯвляетсяИсходящейКорреспонденцией" Тогда
				Заголовок = НСтр("ru = 'Заполнение исходящего документа по шаблону'");
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(ТипКорреспонденции) Тогда
				Заголовок = НСтр("ru = 'Создание нового документа'");
			ИначеЕсли ТипКорреспонденции = "ЯвляетсяВходящейКорреспонденцией" Тогда
				Если СозданиеОбращенияГраждан = Истина Тогда 
					Заголовок = НСтр("ru = 'Создание нового обращения'");
				Иначе 
					Заголовок = НСтр("ru = 'Создание нового входящего документа'");
				КонецЕсли;
			ИначеЕсли ТипКорреспонденции = "ЯвляетсяИсходящейКорреспонденцией" Тогда
				Заголовок = НСтр("ru = 'Создание нового исходящего документа'");
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	ЕстьДоступныеУчетныеЗаписиДляОтправки = 
		РаботаСПочтовымиСообщениямиВызовСервера.ЕстьДоступныеУчетныеЗаписиДляОтправки();
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(СтрШаблон("%1/ТекущиеДанные", ИмяФормы), "");
		
	Если НастройкиФормы = Неопределено Тогда
		ПриЗагрузкеДанныхИзНастроекНаСервере(НастройкиФормы);
	КонецЕсли; 
	
	Если ИсточникСоздания = Справочники.ИсточникиДанных.Сервис1СShare Тогда
		Заголовок = НСтр("ru = 'Выбор шаблона'");
		Элементы.СоздатьПоШаблону.Заголовок = НСтр("ru = 'Загрузить'");
		Элементы.Назад.Видимость = Параметры.ИспользоватьПредпросмотрФайлов;
	КонецЕсли;	
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Регламентированный учет обращений
	Если ИмяСобытия = "Выполнена_загрузка_классификатора_обращений" Тогда
		Для Каждого ЭлементКлассификатора Из КэшДанныхФормы.ЭлементыКлассификатора Цикл
			Элементы[ЭлементКлассификатора.Значение.ТаблицаФормы].Обновить();
		КонецЦикла;
	КонецЕсли;
	// Регламентированный учет обращений
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки = Неопределено Тогда
		РежимПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
	КонецЕсли;
	
	ЗаполнитьКоллекциюШаблонов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СводкаПоШаблонуПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда 
		Возврат;
	КонецЕсли;	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	
	Если Найти(НавигационнаяСсылкаПоля, "message") > 0 Тогда 	
		
		Если Не ИспользованиеЛегкойПочты Тогда 
			ТекстСообщения = НСтр("ru = 'Для отправки письма требуется включить использование легкой почты.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		ИначеЕсли Не ЕстьДоступныеУчетныеЗаписиДляОтправки Тогда 
			ТекстСообщения = НСтр("ru = 'Для отправки письма требуется настройка учетной записи электронной почты.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		Иначе 		
			АдресПочты = СокрЛП(СтрЗаменить(НавигационнаяСсылкаПоля, "message", ""));
			РаботаСПочтовымиСообщениямиКлиент.ОткрытьФормуОтправкиПочтовогоСообщения(, АдресПочты);
		КонецЕсли;	
						
	Иначе	
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
		
	КонецЕсли;

	
КонецПроцедуры

// Регламентированный учет обращений

&НаКлиенте
Процедура КодВопросаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоРедактированиеКодаВопроса = Истина;
	
	ПодборИзКлассификатораОбращенийГражданКлиент.ПроанализироватьКодВопросаПолучитьСоставляющие(
		ЭтаФорма,
		Текст,
		СтандартнаяОбработка);
		
	РаботаСОбращениямиКлиент.ОбновитьСписки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВопросаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЭтоРедактированиеКодаВопроса = Ложь;	
	
	ПодборИзКлассификатораОбращенийГражданКлиент.ПроанализироватьКодВопросаПолучитьСоставляющие(
		ЭтаФорма,
		Текст,
		СтандартнаяОбработка);
		
	РаботаСОбращениямиКлиент.ОбновитьСписки(ЭтаФорма);
	
КонецПроцедуры
// Регламентированный учет обращений

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокШаблонов

&НаКлиенте
Процедура СписокШаблоновВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Далее(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокШаблоновПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СводкаПоШаблону = ПолучитьСводкуПоШаблону(Элемент.ТекущиеДанные.КомандаСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТематикиДокументов

&НаКлиенте
Процедура ПапкиТематикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Далее(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТематикиДокументовПриАктивизацииСтроки(Элемент)
	
	ТекущаяТематикаДокумента = Неопределено;
	ТекущиеДанные = Элементы.ТематикиДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущаяТематикаДокумента = ТекущиеДанные.КомандаСсылка;
	Иначе
		Возврат;
	КонецЕсли;
	
	СводкаПоШаблону = ПолучитьСводкуПоШаблону(Элемент.ТекущиеДанные.КомандаСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТематикиДокументовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;

	ТекущиеДанные = Элементы.ТематикиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура("ИмяСписка, ИзменитьТематику", "ТематикиДокументов", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыШаблона", ЭтотОбъект, ПараметрыВыполнения);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОбъектГруппировки) Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ОбъектГруппировки);
		Если ДелопроизводствоКлиентСервер.ЭтоШаблонДокументаПредприятия(ТекущиеДанные.ОбъектГруппировки) Тогда
			ОткрытьФорму("Справочник.ШаблоныДокументов.ФормаОбъекта", ПараметрыФормы, , , , , ОписаниеОповещения);
		ИначеЕсли ТипЗнч(ТекущиеДанные.ОбъектГруппировки) = Тип("СправочникСсылка.ВидыДокументов") Тогда
			ОткрытьФорму("Справочник.ВидыДокументов.ФормаГруппы", ПараметрыФормы, , , , , ОписаниеОповещения);
		ИначеЕсли ОткрыватьТематику(ТекущиеДанные) Тогда
			ПараметрыВыполнения.ИзменитьТематику = Истина;
			ОткрытьФорму("Справочник.ТематикиДокументов.ФормаОбъекта", ПараметрыФормы, , , , , ОписаниеОповещения);
		Иначе
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.КомандаСсылка);
			ОткрытьФорму("Справочник.ШаблоныДокументов.ФормаОбъекта", ПараметрыФормы, , , , , ОписаниеОповещения);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.КомандаСсылка) И Не ТекущиеДанные.ЭтоГруппа Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.КомандаСсылка);
		Если ДелопроизводствоКлиентСервер.ЭтоШаблонДокументаПредприятия(ТекущиеДанные.КомандаСсылка) Тогда
			ОткрытьФорму("Справочник.ШаблоныДокументов.ФормаОбъекта", ПараметрыФормы, , , , , ОписаниеОповещения);
		ИначеЕсли ТипЗнч(ТекущиеДанные.ОбъектГруппировки) = Тип("СправочникСсылка.ТематикиДокументов") Тогда
			ОткрытьФорму("Справочник.ТематикиДокументов.ФормаОбъекта", ПараметрыФормы, , , , , ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТематикиДокументовПоказыватьНеактуальные(Команда)
	
	ТематикиПоказыватьНеактуальные = Не ТематикиПоказыватьНеактуальные;
	Элементы.ТематикиКонтекстноеМенюТематикиПоказыватьНеактуальные.Пометка = ТематикиПоказыватьНеактуальные;	
	ПостроитьДеревоТематик();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоШаблону(Команда)
	
	Далее(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуШаблона(Команда)
	
	ТекущиеДанные = Элементы.СписокШаблонов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа 
		Или ТекущиеДанные.КомандаСсылка = "Пустой" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
		ПараметрыВыполнения = Новый Структура("ИмяСписка, ИзменитьТематику", "СписокШаблонов", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыШаблона", ЭтотОбъект, ПараметрыВыполнения);
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.КомандаСсылка);
		ОткрытьФорму("Справочник.ШаблоныДокументов.ФормаОбъекта", ПараметрыФормы, , , , , ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	СоздатьПоШаблону = Ложь;
	Закрыть("ПрерватьОперацию");
	
КонецПроцедуры

// Регламентированный учет обращений
&НаКлиенте
Процедура Далее(Команда)
	
	Элементы.Назад.Доступность = Истина;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТематикиДокументов Тогда
		
		ДанныеЗаполненияТематики = Новый Структура;
		ТекущиеДанные = Элементы.ТематикиДокументов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ЭлементыДереваТематик = ТематикиДокументов.ПолучитьЭлементы();
			Если ЭлементыДереваТематик.Количество() = 1 Тогда
				Элементы.Тематики.ТекущаяСтрока = ЭлементыДереваТематик[0].ПолучитьИдентификатор();
				ТекущиеДанные = Элементы.Тематики.ТекущиеДанные;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущиеДанные = Неопределено 
			ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбран шаблон документа'"));
			Возврат;
		КонецЕсли;
		
		// Если выбран шаблон, то сразу возвращаем его
		Если ЗначениеЗаполнено(ТекущиеДанные.КомандаСсылка) 
			И ТипЗнч(ТекущиеДанные.КомандаСсылка) <> Тип("СправочникСсылка.ТематикиДокументов") Тогда 
			
			ДанныеЗаполненияТематики = ДанныеЗаполненияТематикиПоТекущимДанным(ТекущиеДанные);
			
		ИначеЕсли ТекущиеДанные.КомандаСсылка = Неопределено Тогда 
			
			ПоказатьПредупреждение(, ДелопроизводствоКлиент.ТекстОшибки_ЗапретСозданияДокумента());
			Возврат;
			
		Иначе 
			
			ТекущаяТематикаДокумента = ТекущиеДанные.КомандаСсылка;
			
			Элементы.Назад.Видимость = Истина;
			ПостроитьДеревоШаблонов();
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаОсновные;
			
			Если Не ЗаполнитьДанныеЗаполненияПоТекущейТематике() Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеЗаполненияТематики.Свойство("ЭтоОбращение")
			И ДанныеЗаполненияТематики.ЭтоОбращение И РегламентированныйУчетОбращений Тогда 
			ТекущаяСтраница = Элементы.ГруппаСтраницаПодборИзКлассификатора;
			ПроверитьОтсутствиеКлассификатораОбращений();
		ИначеЕсли ДанныеЗаполненияТематики.ШаблонДокумента = "" Тогда 
			ТекущаяСтраница = Элементы.ГруппаСтраницаОсновные;
		Иначе
			СоздатьПоШаблонуВыполнить();
			Возврат;
		КонецЕсли;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекущаяСтраница;
		Элементы.Далее.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Назад.Видимость = Истина;
		Элементы.СоздатьПоШаблону.Видимость = Ложь;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаОсновные Тогда
		
		ТекущиеДанные = Элементы.СписокШаблонов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоГруппа Тогда
			ПоказатьПредупреждение( , НСтр("ru = 'Не выбран шаблон документа'"));
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ЭтоОбращение И РегламентированныйУчетОбращений Тогда
			ТекущаяСтраница = Элементы.ГруппаСтраницаПодборИзКлассификатора;
			ПроверитьОтсутствиеКлассификатораОбращений();
		Иначе
			Если ЗначениеЗаполнено(ДанныеЗаполненияТематики) И ДанныеЗаполненияТематики.Свойство("ШаблонДокумента")
				И Не ЗначениеЗаполнено(ДанныеЗаполненияТематики.ШаблонДокумента) Тогда
				ДанныеЗаполненияТематики.ШаблонДокумента = ТекущиеДанные.КомандаСсылка;
			КонецЕсли;
			СоздатьПоШаблонуВыполнить();
			Возврат;
		КонецЕсли;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекущаяСтраница;
		Элементы.Далее.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Назад.Видимость = Истина;
		Элементы.СоздатьПоШаблону.Видимость = Ложь;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПодборИзКлассификатора Тогда
		Если Не ПодборИзКлассификатораОбращенийГражданКлиент.КлючевыеПоляЗаполнены(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеВопроса = Новый Структура("Раздел, Тематика, Тема, Вопрос");
		ЗаполнитьЗначенияСвойств(ОписаниеВопроса, ЭтотОбъект);
		
		Если Не ТаблицаВопросы.НайтиСтроки(ОписаниеВопроса).Количество() Тогда
			ОписаниеВопроса.Вставить("КодВопроса", КодВопроса);
			ЗаполнитьЗначенияСвойств(ТаблицаВопросы.Добавить(), ОписаниеВопроса);
		КонецЕсли;
		
		ОписаниеВопроса = Новый Структура(
		"Раздел, Тематика, Тема, Вопрос, КодВопроса",
		Неопределено, Неопределено, Неопределено, Неопределено, Неопределено);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОписаниеВопроса);
		
		#Если Не ВебКлиент Тогда
			ИзменитьТекстПодсказки(Элементы.Назад.ИмяКоманды, НСтр("ru = 'Добавить еще вопрос'"));
		#КонецЕсли
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаВопросы;
		Элементы.Назад.Заголовок = НСтр("ru = 'Добавить еще вопрос'");
		Элементы.Далее.Заголовок = НСтр("ru = 'Готово'");
		
		Элементы.Далее.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Назад.Видимость = Истина;
		Элементы.СоздатьПоШаблону.Видимость = Ложь;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаВопросы Тогда
		
		ОчиститьСообщения();
		Если ТаблицаВопросы.Количество() = 0 Тогда 
			ТекстОшибки = НСтр("ru = 'Не введено ни одной строки в список ""Вопросы""'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ТаблицаВопросы");
			Возврат;
		КонецЕсли;
		
		СоздатьПоШаблонуВыполнить(); 
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если ИсточникСоздания = ПредопределенноеЗначение("Справочник.ИсточникиДанных.Сервис1СShare") Тогда
		Закрыть("Назад");
	КонецЕсли;
	
	Элементы.Далее.Заголовок = НСтр("ru = 'Далее >'");
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТематикиДокументов Тогда 
		
		Элементы.Назад.Видимость = Ложь;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаОсновные Тогда 
		
		Если ЕстьУчетТематик Тогда 
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТематикиДокументов;
			Элементы.Назад.Доступность = Ложь;
		Иначе 
			Элементы.Назад.Видимость = Ложь;
			Элементы.СоздатьПоШаблону.Видимость = Ложь;
			Элементы.Далее.Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПодборИзКлассификатора Тогда 
		
		Если ЕстьУчетТематик Тогда 
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТематикиДокументов;
			Элементы.Назад.Доступность = Ложь;
		Иначе 
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаОсновные;
			Элементы.Назад.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.СоздатьПоШаблону.Видимость = Ложь;
		Элементы.Далее.Видимость = Истина;
		
		Если НЕ (РегламентированныйУчетОбращений И СозданиеОбращенияГраждан) Тогда
			ТаблицаВопросы.Очистить();
		КонецЕсли;
	
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаВопросы Тогда

		#Если Не ВебКлиент Тогда
			ИзменитьТекстПодсказки(Элементы.Назад.ИмяКоманды, НСтр("ru = 'Назад'"));
		#КонецЕсли
		
		Элементы.Назад.Заголовок = НСтр("ru = '< Назад'");
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПодборИзКлассификатора;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗагрузкуКлассификатора(Команда)
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаКлассификатораОбращенийГраждан.Форма.ФормаВыбораИзКлассификатора",
		,
		ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
// Регламентированный учет обращений

&НаКлиенте
Процедура ГруппироватьПоПапкамВидовДокументов(Команда)
	
	РежимПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам");
	ПереключитьРежимГруппировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПоВидамДокументов(Команда)
	
	РежимПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком");
	ПереключитьРежимГруппировки();
	
КонецПроцедуры

#КонецОбласти

// Регламентированный учет обращений
#Область ОбработчикиСобытийТаблицыФормыРазделы

&НаКлиенте
Процедура РазделыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	
	Тема		  = Неопределено;
	Вопрос		  = Неопределено;
	
	ПодборИзКлассификатораОбращенийГражданКлиент.ОбработчикСобытияТаблицыФормыПриАктивизацииСтроки(
		ЭтаФорма, Элемент);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Тематики,
		"Раздел",
		Раздел,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТематики

&НаКлиенте
Процедура ТематикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТематикиПриАктивизацииСтроки(Элемент)
	
	Тема		  = Неопределено;
	Вопрос		  = Неопределено;
		
	ПодборИзКлассификатораОбращенийГражданКлиент.ОбработчикСобытияТаблицыФормыПриАктивизацииСтроки(ЭтаФорма, Элемент);		
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Темы,
		"Тематика",
		Тематика,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТемы

&НаКлиенте
Процедура ТемыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемыПриАктивизацииСтроки(Элемент)
	
	Вопрос		  = Неопределено;
	ПодборИзКлассификатораОбращенийГражданКлиент.ОбработчикСобытияТаблицыФормыПриАктивизацииСтроки(ЭтаФорма, Элемент);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Вопросы,
		"Тема",
		Тема,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВопросы

&НаКлиенте
Процедура ВопросыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Далее(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыПриАктивизацииСтроки(Элемент)
	
	ПодборИзКлассификатораОбращенийГражданКлиент.ОбработчикСобытияТаблицыФормыПриАктивизацииСтроки(ЭтаФорма, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаВопросов

&НаКлиенте
Процедура ТаблицаВопросыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВопросыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВопросыПослеУдаления(Элемент)
	
	Если Не ТаблицаВопросы.Количество() Тогда
		Назад(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Регламентированный учет обращений

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьПодходящиеШаблоны()
	
	Массив = Новый Массив;
	
	Для Каждого Шаблон Из СписокШаблонов.ПолучитьЭлементы() Цикл
		Если Шаблон.Тематика = ТекущаяТематикаДокумента Тогда 
			Массив.Добавить(Шаблон);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ПостроитьДеревоТематик(БезОтбораПоВидам = Ложь, Очищать = Истина)
	
	Дерево = РеквизитФормыВЗначение("ТематикиДокументов");
	Если Очищать Тогда
		Дерево.Строки.Очистить();
	КонецЕсли;
	
	Если ПоказатьОтдельнойВеткойВсеШаблоны И Не БезОтбораПоВидам Тогда
		СтрокаНайденные = Дерево.Строки.Добавить();
		СтрокаНайденные.КомандаСсылка = "Рекомендованные";	
		СтрокаНайденные.ЭтоГруппа = Истина;
		ПолучитьВсеТематики(СтрокаНайденные, БезОтбораПоВидам);
	Иначе
		ПолучитьВсеТематики(Дерево, БезОтбораПоВидам);	
	КонецЕсли;	
	
	Если Не БезОтбораПоВидам Тогда
		Дерево.Строки.Сортировать("Представление");
	КонецЕсли;
	
	ЗначениеВДанныеФормы(Дерево, ТематикиДокументов);
	УстановитьТекущуюСтрокуВДеревеНаПервыйЗначащийЭлемент(ТематикиДокументов, "ТематикиДокументов");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВсеТематики(Дерево, БезОтбораПоВидам = Ложь)
	
	ВеткаНайденных = Неопределено;
	ЭтоВеткаНайденных = ТипЗнч(Дерево) = Тип("СтрокаДереваЗначений") И Дерево.КомандаСсылка = "Рекомендованные";
	Если ЭтоВеткаНайденных Тогда
		ВеткаНайденных = Дерево;
	КонецЕсли;	
	
	// Добавим сначала шаблоны документов для видов, у которых нет учета тематик
	Если Не ЗначениеЗаполнено(Тематика) И СписокТематик.Количество() = 0 Тогда
	
		ДоступныеВидыДокументов.Очистить();
		Если СписокДоступныхВидов.Количество() > 0 И Не БезОтбораПоВидам Тогда
			ДоступныеВидыДокументов = СписокДоступныхВидов.Скопировать();
		КонецЕсли;
	
		КоличествоШаблонов = 0;
		
		ПолучитьВсеШаблоныДокументов(Дерево, Истина, РежимПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком,
			БезОтбораПоВидам);
	
	КонецЕсли;
	
	СтрокаВсе = Неопределено;
	ТекущаяСтрокаДерева = Дерево;
	Если ПоказатьОтдельнойВеткойВсеШаблоны Тогда
		СтрокаВсе = Дерево.Строки.Найти("Все", "КомандаСсылка", Ложь);
	КонецЕсли;
	Если СтрокаВсе <> Неопределено Тогда
		ТекущаяСтрокаДерева = СтрокаВсе;
	КонецЕсли;	
	
	КоличествоТематикДокументов = 0;
	Запрос = ЗапросПоВсемТематикам(БезОтбораПоВидам);
		
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектГруппировки = Выборка.ВидДокументаРодитель;
		Если ЗначениеЗаполнено(ОбъектГруппировки) Тогда
			СтрокаГруппировки = ТекущаяСтрокаДерева.Строки.Найти(ОбъектГруппировки, "ОбъектГруппировки", Истина);
			Если СтрокаГруппировки = Неопределено Тогда
				СтрокаГруппировки = ТекущаяСтрокаДерева.Строки.Добавить();
			Иначе
				СтрокаГруппировки =	СтрокаГруппировки.Строки.Добавить();
			КонецЕсли;
		Иначе
			СтрокаГруппировки = ТекущаяСтрокаДерева.Строки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаГруппировки, Выборка);
		СтрокаГруппировки.ОбъектГруппировки = Выборка.Ссылка;
		
		Если ЗначениеЗаполнено(Выборка.ВидДокументаТематики) Тогда 
			СтрокаГруппировки.Представление = СокрЛП(Выборка.ВидДокументаТематики) 
				+ " - " + СокрЛП(Выборка.Ссылка);
		Иначе 
			СтрокаГруппировки.Представление = СокрЛП(Выборка.Ссылка);
		КонецЕсли;
		
		СтрокаГруппировки.КомандаСсылка = Выборка.Ссылка;
		
		КоличествоТематикДокументов = КоличествоТематикДокументов + 1;
		
		Если (Выборка.КоличествоШаблоновСТематикой = Выборка.ШаблонКол = 1) Или Выборка.ШаблонКол = 1 Тогда
			//Один шаблон на тематику и вывод в текущем узле дерева.
			СтрокаГруппировки.КомандаСсылка = Выборка.ШаблонСсылка;
			
		ИначеЕсли Выборка.КоличествоШаблоновСТематикой = 1 Тогда
			//Один персональный шаблон - ничего не меняю.
		
		ИначеЕсли Выборка.ШаблонКол = Null Тогда
			//Нет шаблонов.
			
		ИначеЕсли Выборка.КоличествоШаблоновСТематикой > 1 Тогда
			//Несколько персональных шаблонов и вывод только их в подчиненном узле дерева.
			СтрокаГруппировки.ЭтоГруппа = Истина;
			ВыборкаПодчиненных = Выборка.Выбрать();
			Пока ВыборкаПодчиненных.Следующий() Цикл
				
				Если ВыборкаПодчиненных.КоличествоШаблоновСТематикой = 1 Тогда
				
					Строка = СтрокаГруппировки.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(Строка, ВыборкаПодчиненных);
					Строка.ОбъектГруппировки = ВыборкаПодчиненных.Ссылка;
					Строка.Представление = ВыборкаПодчиненных.ШаблонНаименование;
					Строка.КомандаСсылка = ВыборкаПодчиненных.ШаблонСсылка;	
				
				КонецЕсли; 
				
			КонецЦикла;
		
		Иначе
			//Несколько шаблонов и вывод в подчиненном узле дерева.
			СтрокаГруппировки.ЭтоГруппа = Истина;
			ВыборкаПодчиненных = Выборка.Выбрать();
			Пока ВыборкаПодчиненных.Следующий() Цикл
				Строка = СтрокаГруппировки.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, ВыборкаПодчиненных);
				Строка.ОбъектГруппировки = ВыборкаПодчиненных.Ссылка;
				Строка.Представление = ВыборкаПодчиненных.ШаблонНаименование;
				Строка.КомандаСсылка = ВыборкаПодчиненных.ШаблонСсылка;
			КонецЦикла;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ВеткаНайденных <>  Неопределено Тогда
		ВеткаНайденных.Представление = СтрШаблон(
			НСтр("ru = 'Рекомендованные (%1)'"), Макс(КоличествоШаблонов, КоличествоТематикДокументов));
	КонецЕсли;	
	
	УдалитьПапкиБезАктивныхШаблонов(Дерево);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоШаблонуВыполнить()
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Подготовил", Подготовил);	
	
	Если НесколькоСотрудников И Не ЗначениеЗаполнено(Подготовил) Тогда 
		ТекстОшибки = НСтр("ru = 'Поле ""Подготовил"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "Подготовил");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполненияТематики) Тогда 
		
		ДанныеЗаполнения.Вставить("ШаблонДокумента", ДанныеЗаполненияТематики.ШаблонДокумента);
		
		Если ДанныеЗаполненияТематики.Свойство("ТематикаДокумента") Тогда 
			ДанныеЗаполнения.Вставить("ТематикаДокумента", ДанныеЗаполненияТематики.ТематикаДокумента);
		КонецЕсли;
	ИначеЕсли ЕстьУчетТематик Тогда
		
	Иначе 
		ТекущиеДанные = Элементы.СписокШаблонов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
			Возврат;
		ИначеЕсли ТекущиеДанные.КомандаСсылка = "Пустой" Тогда 
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ДелопроизводствоКлиент.ТекстОшибки_ЗапретСозданияДокумента());
			Возврат;
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("ШаблонДокумента", ТекущиеДанные.КомандаСсылка);
	КонецЕсли;
	
	Если РегламентированныйУчетОбращений И ТаблицаВопросы.Количество() > 0 Тогда 
		ДанныеЗаполнения.Вставить("ТаблицаВопросы", ТаблицаВопросы);
	КонецЕсли;
	
	СоздатьПоШаблону = Истина;
	
	Закрыть(ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСводкуПоШаблону(ШаблонСсылка)
	
	Если НЕ ЗначениеЗаполнено(ШаблонСсылка) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныДокументов") Тогда
		Сводка = ОбзорДокумента.ПолучитьОбзорШаблонаДокумента(ШаблонСсылка);
		Возврат Сводка;
	КонецЕсли;
	
	Если ТипЗнч(ШаблонСсылка) = Тип("Строка") И ШаблонСсылка = "Пустой" Тогда 
		Сводка = ОбзорДокумента.ПолучитьОбзорПустогоШаблона();
	КонецЕсли;
		
	Возврат Сводка;
	
КонецФункции

&НаСервере
Процедура ПостроитьДеревоШаблонов(БезОтбораПоВидам = Ложь, Очищать = Истина)
	
	Дерево = РеквизитФормыВЗначение("СписокШаблонов");
	Если Очищать Тогда
		Дерево.Строки.Очистить();
	КонецЕсли;
	
	ДоступныеВидыДокументов.Очистить();
	
	Если ЗначениеЗаполнено(ТекущаяТематикаДокумента) И Не ЗначениеЗаполнено(ТематикаДокумента) Тогда 
		ДоступныеВидыДокументов.Добавить(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяТематикаДокумента, "ВидДокумента"));
	ИначеЕсли СписокДоступныхВидов.Количество() > 0 И Не БезОтбораПоВидам Тогда 
		ДоступныеВидыДокументов = СписокДоступныхВидов.Скопировать();
	КонецЕсли;
	
	Если ПоказатьОтдельнойВеткойВсеШаблоны И Не БезОтбораПоВидам Тогда
		СтрокаНайденные = Дерево.Строки.Добавить();
		СтрокаНайденные.КомандаСсылка = "Рекомендованные";
		СтрокаНайденные.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Рекомендованные (%1)'"), ДоступныеВидыДокументов.Количество());
		СтрокаНайденные.ЭтоГруппа = Истина;
		ПолучитьВсеШаблоныДокументов(СтрокаНайденные,,, БезОтбораПоВидам);
	Иначе	
		ПолучитьВсеШаблоныДокументов(Дерево,,, БезОтбораПоВидам);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(Дерево, СписокШаблонов);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВсеШаблоныДокументов(Дерево, БезУчетаТематик = Ложь, УдалятьПапкиБезАктивныхШаблонов = Истина,
		БезОтбораПоВидам = Ложь)
	
	КоличествоШаблонов = 0;
	Если (ОбщееКоличествоШаблонов > 5 И КоличествоНедавнихШаблонов > 0) Или БезОтбораПоВидам Тогда 
		СтрокаВсе = Дерево.Строки.Добавить();
		СтрокаВсе.КомандаСсылка = "Все";
		СтрокаВсе.ЭтоГруппа = Истина;
	Иначе 
		СтрокаВсе = Дерево;
	КонецЕсли;
	
	Если ВозможностьСозданияПустогоДокумента Тогда 
		СтрокаПустой = СтрокаВсе.Строки.Добавить();
		СтрокаПустой.КомандаСсылка = "Пустой";
		СтрокаПустой.Представление = НСтр("ru = 'Пустой'");
		СтрокаПустой.ЭтоГруппа = Ложь;
		КоличествоШаблонов = КоличествоШаблонов + 1;
	КонецЕсли;
	
	Если ДоступныеВидыДокументов.Количество() = 0
		И РежимПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|ВидыДокументов.Наименование,
			|Истина КАК ЭтоГруппа,
			|Истина КАК ЭтоГруппаВидов,
			|ВидыДокументов.Ссылка,
			|ВидыДокументов.Родитель КАК Родитель
			|ИЗ
			|	Справочник." + ТипВида + " КАК ВидыДокументов
			|ГДЕ
			|	ВидыДокументов.ПометкаУдаления = ЛОЖЬ
			|	И ВидыДокументов.ЭтоГруппа
			|	%ПроверкаРазрешенияНаСозданиеДокументов%
			|	
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка ИЕРАРХИЯ,
			|	Наименование
			|	";
		
		Если Пользователи.ЭтоПолноправныйПользователь(,, Ложь) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПроверкаРазрешенияНаСозданиеДокументов%", "");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПроверкаРазрешенияНаСозданиеДокументов%",
				"И ИСТИНА В
				|	(ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА
				|	ИЗ
				|		РегистрСведений.РазрешенияНаСозданиеДокументов КАК РазрешенияНаСозданиеДокументов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК РазрешенныеВиды
				|		ПО РазрешенияНаСозданиеДокументов.ВидДокумента = РазрешенныеВиды.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК РазрешенныеВидыРодитель
				|		ПО РазрешенныеВиды.Родитель = РазрешенныеВидыРодитель.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
				|		ПО РазрешенияНаСозданиеДокументов.Участник = СотрудникиВКонтейнерах.Контейнер
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
				|		ПО СотрудникиВКонтейнерах.Сотрудник = СоставСубъектовПравДоступа.Субъект
				|	ГДЕ
				|		(РазрешенныеВиды.Родитель = ВидыДокументов.Ссылка 
				|		ИЛИ РазрешенныеВидыРодитель.Родитель = ВидыДокументов.Ссылка)
				|		И СоставСубъектовПравДоступа.Сотрудник В (&ВсеСотрудникиПользователя)
				|		И СоставСубъектовПравДоступа.ИмяОбластиДелегирования В ("""", ""Документы"", ""ДокументыПросмотрИРедактирование"")
				|		И НЕ РазрешенияНаСозданиеДокументов.Участник.ПометкаУдаления
				|		И НЕ СоставСубъектовПравДоступа.СубъектПометкаУдаления)");
			Запрос.УстановитьПараметр("ВсеСотрудникиПользователя", Сотрудники.ВсеСотрудникиТекущегоПользователя());
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			ОбъектГруппировки = Выборка.Родитель;
			
			Если ЗначениеЗаполнено(ОбъектГруппировки) Тогда
				
				НайденнаяСтрока = Дерево.Строки.Найти(ОбъектГруппировки, "ОбъектГруппировки", Истина);
				
				Если НайденнаяСтрока <> Неопределено Тогда
					НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
				Иначе
					СтрокаГруппировки = СтрокаВсе.Строки.Добавить();
					СтрокаГруппировки.ОбъектГруппировки = Выборка.Ссылка;
					СтрокаГруппировки.ЭтоГруппа = Выборка.ЭтоГруппа;
					СтрокаГруппировки.ЭтоГруппаВидов = Выборка.ЭтоГруппаВидов;
					СтрокаГруппировки.Представление = Строка(Выборка.Ссылка);
					СтрокаГруппировки.КомандаСсылка = Выборка.Ссылка;
					
					НоваяСтрока = СтрокаГруппировки.Строки.Добавить();
				КонецЕсли;
				
				НоваяСтрока.ОбъектГруппировки = Выборка.Ссылка;
				НоваяСтрока.ЭтоГруппа = Выборка.ЭтоГруппа;
				НоваяСтрока.ЭтоГруппаВидов = Выборка.ЭтоГруппаВидов;
				НоваяСтрока.Представление = Строка(Выборка.Ссылка);
				НоваяСтрока.КомандаСсылка = Выборка.Ссылка;
			Иначе 
				
				СтрокаГруппировки = СтрокаВсе.Строки.Добавить();
				СтрокаГруппировки.ОбъектГруппировки = Выборка.Ссылка;
				СтрокаГруппировки.ЭтоГруппа = Выборка.ЭтоГруппа;
				СтрокаГруппировки.ЭтоГруппаВидов = Выборка.ЭтоГруппаВидов;
				СтрокаГруппировки.Представление = Строка(Выборка.Ссылка);
				СтрокаГруппировки.КомандаСсылка = Выборка.Ссылка;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныДокументов.Наименование КАК Наименование,
		|	ШаблоныДокументов.КомментарийКШаблону КАК КомментарийКШаблону,
		|	ШаблоныДокументов.ЭтоГруппа КАК ЭтоГруппа,
		|	ШаблоныДокументов.Тематика,
		|	ШаблоныДокументов.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ВидыДокументов.ЯвляетсяВходящейКорреспонденцией, ЛОЖЬ) КАК ЯвляетсяВходящейКорреспонденцией,
		|	ЕСТЬNULL(ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией, ЛОЖЬ) КАК ЯвляетсяИсходящейКорреспонденцией,
		|	ЕСТЬNULL(ВидыДокументов.Родитель, Значение(Справочник.ВидыДокументов.ПустаяСсылка)) КАК Родитель,
		|	ЕСТЬNULL(ВидыДокументов.ЯвляетсяОбращениемОтГраждан, ЛОЖЬ) КАК ЭтоОбращение
		|ИЗ
		|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО ШаблоныДокументов.ВидДокумента = ВидыДокументов.Ссылка
		|ГДЕ
		|	ШаблоныДокументов.ПометкаУдаления = ЛОЖЬ
		|	И НЕ ШаблоныДокументов.ЭтоГруппа"; 
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(,, Ложь)
		И ПолучитьФункциональнуюОпцию("ДокументооборотИспользоватьОграничениеПравДоступа") Тогда
			
		Запрос.Текст = Запрос.Текст + "
			|И (ШаблоныДокументов.ГрифДоступа = Значение(Справочник.ГрифыДоступа.ПустаяСсылка)
			|	ИЛИ ШаблоныДокументов.ГрифДоступа В (ВЫБРАТЬ Ссылка ИЗ Справочник.ГрифыДоступа))
			|И (ШаблоныДокументов.Организация = Значение(Справочник.Организации.ПустаяСсылка)
			|	ИЛИ ШаблоныДокументов.Организация В (ВЫБРАТЬ Ссылка ИЗ Справочник.Организации))
			|И НЕ ИСТИНА В 
			|	(ВЫБРАТЬ ИСТИНА
			|			ИЗ Справочник.ШаблоныДокументов.Контрагенты КАК ШаблоныДокументовКонтрагенты
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК КонтрагентыСпр
			|			ПО ШаблоныДокументовКонтрагенты.Контрагент = КонтрагентыСпр.Ссылка
			|		ГДЕ
			|			ШаблоныДокументовКонтрагенты.Ссылка = ШаблоныДокументов.Ссылка
			|			И ШаблоныДокументовКонтрагенты.Контрагент <> Значение(Справочник.Контрагенты.ПустаяСсылка)
			|			И КонтрагентыСпр.Ссылка ЕСТЬ NULL)
			|И ИСТИНА В
			|		(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				РегистрСведений.РазрешенияНаСозданиеДокументов КАК РазрешенияНаСозданиеДокументов
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|					ПО РазрешенияНаСозданиеДокументов.Участник = СотрудникиВКонтейнерах.Контейнер
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
			|					ПО СотрудникиВКонтейнерах.Сотрудник = СоставСубъектовПравДоступа.Субъект
			|			ГДЕ
			|				РазрешенияНаСозданиеДокументов.ВидДокумента = ШаблоныДокументов.ВидДокумента
			|				И (РазрешенияНаСозданиеДокументов.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
			|					ИЛИ ШаблоныДокументов.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
			|					ИЛИ ШаблоныДокументов.Тематика = РазрешенияНаСозданиеДокументов.Тематика)
			|				И СоставСубъектовПравДоступа.Сотрудник В (&ВсеСотрудникиПользователя)
			|				И СоставСубъектовПравДоступа.ИмяОбластиДелегирования В ("""", ""Документы"", ""ДокументыПросмотрИРедактирование"")
			|				И НЕ РазрешенияНаСозданиеДокументов.Участник.ПометкаУдаления
			|				И НЕ СоставСубъектовПравДоступа.СубъектПометкаУдаления)";
		Запрос.УстановитьПараметр("ВсеСотрудникиПользователя", Сотрудники.ВсеСотрудникиТекущегоПользователя());
	КонецЕсли;
	
	Если ПоказыватьТолькоДокументыПригодныеДляЭДО Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|	И ШаблоныДокументов.ФормаДокумента <> Значение(Перечисление.ВариантыФормДокументов.Бумажная)
			|	И Не ВидыДокументов.ЯвляетсяОбращениемОтГраждан";
		
	КонецЕсли;
	
	Если БезУчетаТематик Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ ВидыДокументов.ВестиУчетПоТематикам";
	КонецЕсли;
	
	Если СозданиеОбращенияГраждан Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И (ШаблоныДокументов.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументов.ПустаяСсылка)
			|	ИЛИ ВидыДокументов.ЯвляетсяОбращениемОтГраждан)";
	КонецЕсли;
	
	Если ДоступныеВидыДокументов.Количество() <> 0 Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И ШаблоныДокументов.ВидДокумента В (&ВидыДокументов)";
		
		Запрос.Параметры.Вставить("ВидыДокументов", ДоступныеВидыДокументов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипКорреспонденции) Тогда
		Запрос.Текст = Запрос.Текст + " 
			|	И ВидыДокументов." + ТипКорреспонденции + " = ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектГруппировки = Выборка.Родитель;
		
		Если ЗначениеЗаполнено(ОбъектГруппировки) Тогда
			
			НайденнаяСтрока = Дерево.Строки.Найти(ОбъектГруппировки, "ОбъектГруппировки", Истина);
			
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
			Иначе
				СтрокаГруппировки = СтрокаВсе.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаГруппировки, Выборка);
				СтрокаГруппировки.ОбъектГруппировки = Выборка.Ссылка;
				СтрокаГруппировки.Представление = Строка(Выборка.Ссылка);
				СтрокаГруппировки.КомандаСсылка = Выборка.Ссылка;
				
				Если Не Выборка.ЭтоГруппа Тогда
					СтрокаГруппировки.Тематика = Выборка.Тематика; 
					КоличествоШаблонов = КоличествоШаблонов + 1;
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = СтрокаГруппировки.Строки.Добавить();
			КонецЕсли;
			
			НоваяСтрока.ОбъектГруппировки = Выборка.Ссылка;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Представление = Строка(Выборка.Ссылка);
			НоваяСтрока.КомандаСсылка = Выборка.Ссылка;
			
			Если Не Выборка.ЭтоГруппа Тогда
				НоваяСтрока.Тематика = Выборка.Тематика; 
				КоличествоШаблонов = КоличествоШаблонов + 1;
				Продолжить;
			КонецЕсли;
		Иначе 
			
			СтрокаГруппировки = СтрокаВсе.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГруппировки, Выборка);
			СтрокаГруппировки.ОбъектГруппировки = Выборка.Ссылка;
			СтрокаГруппировки.Представление = Строка(Выборка.Ссылка);
			СтрокаГруппировки.КомандаСсылка = Выборка.Ссылка;
			
			Если Не Выборка.ЭтоГруппа Тогда
				СтрокаГруппировки.Тематика = Выборка.Тематика;
				КоличествоШаблонов = КоличествоШаблонов + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдалятьПапкиБезАктивныхШаблонов Тогда
		УдалитьПапкиБезАктивныхШаблонов(Дерево);
	КонецЕсли;
	
	Если ((ОбщееКоличествоШаблонов > 5 И КоличествоНедавнихШаблонов > 0) Или БезОтбораПоВидам) И КоличествоШаблонов > 0
		Тогда 
		СтрокаВсе.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все (%1)'"), КоличествоШаблонов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоллекциюШаблонов()
	
	Если СписокДоступныхВидов.Количество() > 0 Тогда 
		ЕстьУчетТематик = Ложь;
		ДанныеВидов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			СписокДоступныхВидов.ВыгрузитьЗначения(), "ВестиУчетПоТематикам");
			
		Для Каждого СсылкаНаВид ИЗ СписокДоступныхВидов Цикл
	
			ПараметрыВида = ДанныеВидов[СсылкаНаВид.Значение];
			Если ПараметрыВида.ВестиУчетПоТематикам = Истина Тогда
				ЕстьУчетТематик = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элементы.РежимПросмотра.Видимость = Ложь;
		Элементы.РежимПросмотраШаблоны.Видимость = Ложь;
	Иначе
		ЕстьУчетТематик = РаботаСТематикамиДокументовПовтИсп.ТематикиИспользуются();
	КонецЕсли;
	
	ПоказатьОтдельнойВеткойВсеШаблоны = ИсточникСоздания = Справочники.ИсточникиДанных.Сервис1СShare
		И СписокДоступныхВидов.Количество() > 0;
	
	Если ПоказатьОтдельнойВеткойВсеШаблоны Тогда
		ЕстьУчетТематик = РаботаСТематикамиДокументовПовтИсп.ТематикиИспользуются();
		Элементы.СписокШаблонов.Отображение = ОтображениеТаблицы.Дерево;
		Элементы.ТематикиДокументов.Отображение = ОтображениеТаблицы.Дерево;
		Элементы.РежимПросмотра.Видимость = Истина;
		Элементы.РежимПросмотраШаблоны.Видимость = Истина;
	КонецЕсли;	
	
	Если ЕстьУчетТематик Тогда 
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТематикиДокументов;
		ПостроитьДеревоТематик();
		Если ПоказатьОтдельнойВеткойВсеШаблоны Тогда
			ПостроитьДеревоТематик(Истина, Ложь);
		КонецЕсли;	
		Если КоличествоТематикДокументов = 0 Тогда 
			СозданиеПоТематикеНедоступно = Истина;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаОсновные;
		ПостроитьДеревоШаблонов();
		Если ПоказатьОтдельнойВеткойВсеШаблоны Тогда
			ПостроитьДеревоШаблонов(Истина, Ложь);
		КонецЕсли;	
	КонецЕсли;
	
	Если СписокДоступныхВидов.Количество() = 0 Или ПоказатьОтдельнойВеткойВсеШаблоны Тогда
		ПереключитьРежимГруппировкиНаСервере(ЕстьУчетТематик, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтрокуВДеревеНаПервыйЗначащийЭлемент(Список, ИмяСписка = "СписокШаблонов")
	
	Если ИмяСписка <> "ТематикиДокументов" Или ПоказатьОтдельнойВеткойВсеШаблоны Тогда
		ЭлементыДерева = Список.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ПерваяГруппа = ЭлементыДерева[0];
		Если ПерваяГруппа.ПолучитьЭлементы().Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ПервыйЭлементПервойГруппы = ПерваяГруппа.ПолучитьЭлементы()[0];
		Индекс = ПервыйЭлементПервойГруппы.ПолучитьИдентификатор();
		Элементы[ИмяСписка].ТекущаяСтрока = Индекс;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВДеревеЕстьАктивныеШаблоны(Дерево)
	
	ЕстьШаблоны = Ложь;
	МассивУдаляемыхГрупп = Новый Массив;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ЭтоГруппа Тогда 
			Если Не ВДеревеЕстьАктивныеШаблоны(СтрокаДерева) Тогда 
				МассивУдаляемыхГрупп.Добавить(СтрокаДерева);
			Иначе 
				ЕстьШаблоны = Истина;
			КонецЕсли;
		Иначе 
			ЕстьШаблоны = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Группа Из МассивУдаляемыхГрупп Цикл 
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл
			Если Группа = СтрокаДерева Тогда 
				Дерево.Строки.Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЕстьШаблоны;
	
КонецФункции

&НаСервере
Функция УдалитьПапкиБезАктивныхШаблонов(Дерево)
	
	ЕстьШаблоны = Ложь;
	МассивУдаляемыхГрупп = Новый Массив;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ЭтоГруппа Тогда 
			Если Не УдалитьПапкиБезАктивныхШаблонов(СтрокаДерева) Тогда 
				МассивУдаляемыхГрупп.Добавить(СтрокаДерева);
			Иначе 
				ЕстьШаблоны = Истина;
			КонецЕсли;
		Иначе 
			ЕстьШаблоны = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Группа Из МассивУдаляемыхГрупп Цикл 
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл
			Если Группа = СтрокаДерева Тогда 
				Дерево.Строки.Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЕстьШаблоны;
	
КонецФункции

// Регламентированный учет обращений
&НаСервере
Процедура ИзменитьТекстПодсказки(Команда, ТекстПодсказки)
	
	Команды[Элементы[Команда].ИмяКоманды].Подсказка = ТекстПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормы()
	
	Элементы.КодВопроса.ОбновитьТекстРедактирования();
	Элементы.КодВопроса.УстановитьГраницыВыделения(1, 1);

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимГруппировки()
	
	ПереключитьРежимГруппировкиНаСервере(ЕстьУчетТематик);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьРежимГруппировкиНаСервере(ПостроитьДеревоТематик = Истина, Обновлять = Истина)		
	
	Элементы.ГруппироватьПоПапкамВидовДокументов.Пометка = РежимПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам");
	Элементы.ГруппироватьПоВидамДокументов.Пометка = РежимПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.Списком");
	Элементы.ГруппироватьПоПапкамВидовДокументовШаблоны.Пометка = РежимПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам");
	Элементы.ГруппироватьПоВидамДокументовШаблоны.Пометка = РежимПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.Списком");
		
	Если Не Обновлять Тогда
		Возврат;
	КонецЕсли;
	
	Если ПостроитьДеревоТематик Тогда
		ПостроитьДеревоТематик();
		Если ПоказатьОтдельнойВеткойВсеШаблоны Тогда
			ПостроитьДеревоТематик(Истина, Ложь);
		КонецЕсли;	
	Иначе
		ПостроитьДеревоШаблонов();
		Если ПоказатьОтдельнойВеткойВсеШаблоны Тогда
			ПостроитьДеревоШаблонов(Истина, Ложь);
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьДанныеЗаполненияПоТекущейТематике()
	
	Если Не ЗначениеЗаполнено(ТекущаяТематикаДокумента) Тогда
		Возврат Истина;
	КонецЕсли;

	ДанныеЗаполненияТематики = Новый Структура;
	ДанныеЗаполненияТематики.Вставить("ТематикаДокумента", ТекущаяТематикаДокумента);

	Если ВозможностьСозданияПустогоДокумента Тогда
		Если КоличествоШаблонов = 2 Тогда

			ЭлементыДерева = СписокШаблонов.ПолучитьЭлементы();
			Если ЭлементыДерева.Количество() <> 2 Тогда
				Возврат Ложь;
			КонецЕсли;

			ДанныеЗаполненияТематики.Вставить("ШаблонДокумента", ЭлементыДерева[1].КомандаСсылка);
			ДанныеЗаполненияТематики.Вставить("ЭтоОбращение", ЭлементыДерева[1].ЭтоОбращение);

		ИначеЕсли КоличествоШаблонов = 1 Тогда

			ПоказатьПредупреждение( , ДелопроизводствоКлиент.ТекстОшибки_ЗапретСозданияДокумента());
			Возврат Ложь;

		ИначеЕсли КоличествоШаблонов > 2 Тогда
			МассивПодходящихПоТематикеШаблонов = ПолучитьПодходящиеШаблоны();

			Если МассивПодходящихПоТематикеШаблонов.Количество() = 1 Тогда
				ДанныеЗаполненияТематики.Вставить("ШаблонДокумента",
					МассивПодходящихПоТематикеШаблонов[0].КомандаСсылка);
				ДанныеЗаполненияТематики.Вставить("ЭтоОбращение", МассивПодходящихПоТематикеШаблонов[0].ЭтоОбращение);
			Иначе
				ДанныеЗаполненияТематики.Вставить("ШаблонДокумента", "");
				ДанныеЗаполненияТематики.Вставить("ЭтоОбращение", Ложь);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли КоличествоШаблонов = 1 Тогда

		ЭлементыДерева = СписокШаблонов.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли;

		ДанныеЗаполненияТематики.Вставить("ШаблонДокумента", ЭлементыДерева[0].КомандаСсылка);
		ДанныеЗаполненияТематики.Вставить("ЭтоОбращение", ЭлементыДерева[0].ЭтоОбращение);

	ИначеЕсли КоличествоШаблонов > 1 Тогда
		МассивПодходящихПоТематикеШаблонов = ПолучитьПодходящиеШаблоны();

		Если МассивПодходящихПоТематикеШаблонов.Количество() = 1 Тогда
			ДанныеЗаполненияТематики.Вставить("ШаблонДокумента", МассивПодходящихПоТематикеШаблонов[0].КомандаСсылка);
			ДанныеЗаполненияТематики.Вставить("ЭтоОбращение", МассивПодходящихПоТематикеШаблонов[0].ЭтоОбращение);
		Иначе
			ДанныеЗаполненияТематики.Вставить("ШаблонДокумента", "");
			ДанныеЗаполненияТематики.Вставить("ЭтоОбращение", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обновляем значение колонки "Представление" дерева шаблонов после закрытия формы шаблона
// Параметры:
//  Результат - Неопределено
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ПослеЗакрытияФормыШаблона(Результат, ДополнительныеПараметры) Экспорт
	ТекущиеДанные = Элементы[ДополнительныеПараметры.ИмяСписка].ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ОбъектГруппировки) Тогда
		Если ДополнительныеПараметры.ИзменитьТематику Тогда
			ТекущиеДанные.Представление = СтрШаблон("%1 - %2", ТекущиеДанные.ВидДокументаТематики,
				ТекущиеДанные.ОбъектГруппировки);
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.КомандаСсылка)
			И ДелопроизводствоКлиентСервер.ЭтоШаблонДокументаПредприятия(ТекущиеДанные.КомандаСсылка) Тогда
			ТекущиеДанные.Представление = Строка(ТекущиеДанные.КомандаСсылка);
		Иначе
			ТекущиеДанные.Представление = Строка(ТекущиеДанные.ОбъектГруппировки);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.КомандаСсылка) И Не ТекущиеДанные.ЭтоГруппа Тогда
		ТекущиеДанные.Представление = Строка(ТекущиеДанные.КомандаСсылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОткрыватьТематику(ТекущиеДанные)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	ГруппировкаПоТематике = Родитель <> Неопределено И ТипЗнч(Родитель.ОбъектГруппировки) =
		Тип("СправочникСсылка.ТематикиДокументов");
	ЕстьПодчиненныеСтроки = ТекущиеДанные.ПолучитьЭлементы().Количество()>0;
	
	Если ТипЗнч(ТекущиеДанные.ОбъектГруппировки) = Тип("СправочникСсылка.ТематикиДокументов")
			И (ТекущиеДанные.ЭтоГруппа Или (Не ЕстьПодчиненныеСтроки И Не ГруппировкаПоТематике
			И ДелопроизводствоКлиентСервер.ЭтоШаблонДокументаПредприятия(ТекущиеДанные.КомандаСсылка))
			Или ТекущиеДанные.ОбъектГруппировки = ТекущиеДанные.КомандаСсылка) Тогда
				Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗапросПоВсемТематикам(БезОтбораПоВидам = Ложь)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТематикиДокументов.Наименование КАК Наименование,
		|	ТематикиДокументов.Ссылка КАК Ссылка,
		|	ШаблоныДокументов.Ссылка КАК ШаблонСсылка,
		|	ШаблоныДокументов.Наименование КАК ШаблонНаименование,
		|	ШаблоныДокументов.Ссылка КАК ШаблонКол,
		|	ВЫБОР
		|		КОГДА ШаблоныДокументов.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоличествоШаблоновСТематикой,
		|	ЛОЖЬ КАК РодительОтображатьПриСозданииДокументов,
		|	ТематикиДокументов.ВидДокумента КАК ВидДокументаТематики,
		|	ЕСТЬNULL(ВсеВидыДокументов.ЯвляетсяВходящейКорреспонденцией, ЛОЖЬ) КАК ЯвляетсяВходящейКорреспонденцией,
		|	ЕСТЬNULL(ВсеВидыДокументов.ЯвляетсяИсходящейКорреспонденцией, ЛОЖЬ) КАК ЯвляетсяИсходящейКорреспонденцией,
		|	ЕСТЬNULL(ВсеВидыДокументов.ЯвляетсяОбращениемОтГраждан, ЛОЖЬ) КАК ЭтоОбращение,
		|	ВЫБОР
		|		КОГДА &РежимПросмотраПоПапкам
		|			ТОГДА ЕСТЬNULL(ВсеВидыДокументов.Родитель, ЗНАЧЕНИЕ(Справочник.ВидыДокументов.ПустаяСсылка))
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыДокументов.ПустаяСсылка)
		|	КОНЕЦ КАК ВидДокументаРодитель
		|ИЗ
		|	Справочник.ТематикиДокументов КАК ТематикиДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|		ПО (ТематикиДокументов.ВидДокумента = ШаблоныДокументов.ВидДокумента
		|		ИЛИ ТематикиДокументов.ВидДокумента = ШаблоныДокументов.ВидДокумента.Родитель)
		|		И (НЕ ШаблоныДокументов.ПометкаУдаления)
		|		И (НЕ ШаблоныДокументов.ЭтоГруппа)
		|		И (ШаблоныДокументов.Тематика = ТематикиДокументов.Ссылка
		|		ИЛИ ШаблоныДокументов.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВсеВидыДокументов
		|		ПО (ШаблоныДокументов.ВидДокумента = ВсеВидыДокументов.Ссылка)
		|ГДЕ
		|	НЕ ТематикиДокументов.ПометкаУдаления
		|	И ВсеВидыДокументов.ВестиУчетПоТематикам";
		
	Если Не Пользователи.ЭтоПолноправныйПользователь(,, Ложь)
		И ПолучитьФункциональнуюОпцию("ДокументооборотИспользоватьОграничениеПравДоступа") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РазрешенияНаСозданиеДокументов.ВидДокумента КАК ВидДокумента,
			|	РазрешенияНаСозданиеДокументов.Тематика КАК Тематика
			|ПОМЕСТИТЬ ВсеВидыИТематики
			|ИЗ
			|	РегистрСведений.РазрешенияНаСозданиеДокументов КАК РазрешенияНаСозданиеДокументов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ПО (РазрешенияНаСозданиеДокументов.Участник = СотрудникиВКонтейнерах.Контейнер)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
			|		ПО (СотрудникиВКонтейнерах.Сотрудник = СоставСубъектовПравДоступа.Субъект)
			|		И (СоставСубъектовПравДоступа.Сотрудник В (&ВсеСотрудникиПользователя))
			|		И (СоставСубъектовПравДоступа.ИмяОбластиДелегирования В ("""", ""Документы"", ""ДокументыПросмотрИРедактирование""))
			|		И (НЕ СоставСубъектовПравДоступа.СубъектПометкаУдаления)
			|ГДЕ
			|	НЕ РазрешенияНаСозданиеДокументов.Участник.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВсеВидыИТематики.ВидДокумента КАК ВидДокумента,
			|	ВсеВидыИТематики.Тематика КАК Тематика
			|ПОМЕСТИТЬ ДоступныеВидыИТематики
			|ИЗ
			|	ВсеВидыИТематики КАК ВсеВидыИТематики
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеВидыИТематики КАК ВидыБезОграниченийПоТематикам
			|		ПО ВсеВидыИТематики.ВидДокумента = ВидыБезОграниченийПоТематикам.ВидДокумента
			|		И (ВидыБезОграниченийПоТематикам.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка))
			|ГДЕ
			|	ВидыБезОграниченийПоТематикам.ВидДокумента ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВсеВидыИТематики.ВидДокумента,
			|	ВсеВидыИТематики.Тематика
			|ИЗ
			|	ВсеВидыИТематики КАК ВсеВидыИТематики
			|ГДЕ
			|	ВсеВидыИТематики.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидДокумента,
			|	Тематика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ГрифыДоступа.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВсеДоступныеГрифыДоступа
			|ИЗ
			|	Справочник.ГрифыДоступа КАК ГрифыДоступа
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка
			|ПОМЕСТИТЬ ВсеДоступныеОрганизации
			|ИЗ
			|	Справочник.Организации КАК Организации
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТематикиДокументов.Наименование КАК Наименование,
			|	ТематикиДокументов.Ссылка КАК Ссылка,
			|	ШаблоныДокументов.Ссылка КАК ШаблонСсылка,
			|	ШаблоныДокументов.Наименование КАК ШаблонНаименование,
			|	ШаблоныДокументов.Ссылка КАК ШаблонКол,
			|	ВЫБОР
			|		КОГДА ШаблоныДокументов.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КоличествоШаблоновСТематикой,
			|	ЛОЖЬ КАК РодительОтображатьПриСозданииДокументов,
			|	ТематикиДокументов.ВидДокумента КАК ВидДокументаТематики,
			|	ЕСТЬNULL(ВсеВидыДокументов.ЯвляетсяВходящейКорреспонденцией, ЛОЖЬ) КАК ЯвляетсяВходящейКорреспонденцией,
			|	ЕСТЬNULL(ВсеВидыДокументов.ЯвляетсяИсходящейКорреспонденцией, ЛОЖЬ) КАК ЯвляетсяИсходящейКорреспонденцией,
			|	ЕСТЬNULL(ВсеВидыДокументов.ЯвляетсяОбращениемОтГраждан, ЛОЖЬ) КАК ЭтоОбращение,
			|	ВЫБОР
			|		КОГДА &РежимПросмотраПоПапкам
			|			ТОГДА ЕСТЬNULL(ВсеВидыДокументов.Родитель, ЗНАЧЕНИЕ(Справочник.ВидыДокументов.ПустаяСсылка))
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыДокументов.ПустаяСсылка)
			|	КОНЕЦ КАК ВидДокументаРодитель
			|ИЗ
			|	Справочник.ТематикиДокументов КАК ТематикиДокументов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныДокументов КАК ШаблоныДокументов
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДоступныеГрифыДоступа КАК ВсеДоступныеГрифыДоступа
			|			ПО ШаблоныДокументов.ГрифДоступа = ВсеДоступныеГрифыДоступа.Ссылка
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДоступныеОрганизации КАК ВсеДоступныеОрганизации
			|			ПО ШаблоныДокументов.Организация = ВсеДоступныеОрганизации.Ссылка
			|		ПО (ТематикиДокументов.ВидДокумента = ШаблоныДокументов.ВидДокумента
			|		ИЛИ ТематикиДокументов.ВидДокумента = ШаблоныДокументов.ВидДокумента.Родитель)
			|		И (ШаблоныДокументов.Тематика = ТематикиДокументов.Ссылка
			|		ИЛИ ШаблоныДокументов.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка))
			|		И НЕ ШаблоныДокументов.ПометкаУдаления
			|		И НЕ ШаблоныДокументов.ЭтоГруппа
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВсеВидыДокументов
			|		ПО (ШаблоныДокументов.ВидДокумента = ВсеВидыДокументов.Ссылка)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеВидыИТематики КАК ДоступныеВидыИТематики
			|		ПО (ТематикиДокументов.ВидДокумента = ДоступныеВидыИТематики.ВидДокумента
			|		И ТематикиДокументов.Ссылка = ДоступныеВидыИТематики.Тематика
			|		ИЛИ ТематикиДокументов.ВидДокумента = ДоступныеВидыИТематики.ВидДокумента
			|		И ДоступныеВидыИТематики.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка))
			|ГДЕ
			|	НЕ ТематикиДокументов.ПометкаУдаления
			|	И ВсеВидыДокументов.ВестиУчетПоТематикам
			|	И НЕ ИСТИНА В
			|		(ВЫБРАТЬ
			|			ИСТИНА
			|		ИЗ
			|			Справочник.ШаблоныДокументов.Контрагенты КАК ШаблоныДокументовКонтрагенты
			|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК КонтрагентыСпр
			|				ПО ШаблоныДокументовКонтрагенты.Контрагент = КонтрагентыСпр.Ссылка
			|		ГДЕ
			|			ШаблоныДокументовКонтрагенты.Ссылка = ШаблоныДокументов.Ссылка
			|			И ШаблоныДокументовКонтрагенты.Контрагент <> Значение(Справочник.Контрагенты.ПустаяСсылка)
			|			И КонтрагентыСпр.Ссылка ЕСТЬ NULL)";
			
		Запрос.УстановитьПараметр("ВсеСотрудникиПользователя", Сотрудники.ВсеСотрудникиТекущегоПользователя());
		
	КонецЕсли;
	
	Если Не ТематикиПоказыватьНеактуальные Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (НЕ ТематикиДокументов.НеДействует
		|		ИЛИ ТематикиДокументов.НеДействуетДата > &ТекущаяДата)";
		Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТематикаДокумента) Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И ТематикиДокументов.Ссылка = &Тематика";
		Запрос.УстановитьПараметр("Тематика", ТематикаДокумента);
	КонецЕсли;
	
	Если Не БезОтбораПоВидам И СписокДоступныхВидов.Количество() > 0 Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И ВсеВидыДокументов.Ссылка В (&СписокДоступныхВидов)";
		Запрос.Параметры.Вставить("СписокДоступныхВидов", СписокДоступныхВидов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокТематик) Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И ТематикиДокументов.Ссылка В (&СписокТематик)";
		Запрос.УстановитьПараметр("СписокТематик", СписокТематик);
	КонецЕсли;
	
	Если СозданиеОбращенияГраждан Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (ТематикиДокументов.ВидДокумента.ЯвляетсяОбращениемОтГраждан)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипКорреспонденции) Тогда
		Запрос.Текст = Запрос.Текст + " 
			|	И ШаблоныДокументов.ВидДокумента." + ТипКорреспонденции + " = ИСТИНА";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РежимПросмотраПоПапкам", РежимПросмотра =
		Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам);
	
	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ВидДокументаТематики, Наименование, ШаблонНаименование
		|ИТОГИ
		|	МАКСИМУМ(Наименование),
		|	КОЛИЧЕСТВО(ШаблонКол),
		|	СУММА(КоличествоШаблоновСТематикой),
		|	МАКСИМУМ(ШаблонСсылка),
		|	МАКСИМУМ(ВидДокументаРодитель)
		|ПО
		|	Ссылка";
	
	Возврат Запрос;
	
КонецФункции

// Регламентированный учет обращений

&НаСервере
Процедура ПроверитьОтсутствиеКлассификатораОбращений()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Справочник.РазделыОбращений
		|ГДЕ НЕ ПометкаУдаления");
	Если Запрос.Выполнить().Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Классификатор обращений не загружен. Обратитесь к администратору'"));
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_НагрузочноеТестирование

&НаКлиенте
Функция НТ_СоздатьПоШаблону() Экспорт
	
	СоздатьПоШаблону(Неопределено); //@skip-check invocation-form-event-handler
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	Элементы.ГруппаКоманды.Видимость = Ложь;
	Элементы.ГруппаПоискаТематик.Видимость = Ложь;
	Элементы.ГруппаПоиска.Видимость = Ложь;
	Элементы.СводкаПоШаблону.Видимость = Ложь;
	Элементы.СводкаПоШаблонуТематике.Видимость = Ложь;
	
КонецПроцедуры
	
#КонецОбласти

// Функция - Данные тематики документа по текущим данным
//
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементДерева
// 
// Возвращаемое значение:
//  Структура:
//   * ЭтоОбращение - Булево
//   * ШаблонДокумента - СправочникСсылка.ШаблоныДокументов
//   * ТематикаДокумента - СправочникСсылка.ТематикиДокументов
//
&НаКлиенте
Функция ДанныеЗаполненияТематикиПоТекущимДанным(ТекущиеДанные)
	
	ДанныеЗаполненияТематики = Новый Структура;
	ДанныеЗаполненияТематики.Вставить("ЭтоОбращение", ТекущиеДанные.ЭтоОбращение);
	ДанныеЗаполненияТематики.Вставить("ШаблонДокумента", ТекущиеДанные.КомандаСсылка);
	ДанныеЗаполненияТематики.Вставить("ТематикаДокумента", 
		ПредопределенноеЗначение("Справочник.ТематикиДокументов.ПустаяСсылка")); 
	
	Если ТипЗнч(ТекущиеДанные.ОбъектГруппировки) = Тип("СправочникСсылка.ТематикиДокументов") Тогда
		// Единственный шаблон в тематике.
		ТематикаШаблона = ТекущиеДанные.ОбъектГруппировки;
	ИначеЕсли ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		// Шаблон в группе тематики.
		ТематикаШаблона = ТекущиеДанные.ПолучитьРодителя().ОбъектГруппировки;
	КонецЕсли;
	
	Если ТипЗнч(ТематикаШаблона) = Тип("СправочникСсылка.ТематикиДокументов") Тогда
		
		ДанныеЗаполненияТематики.ТематикаДокумента = ТематикаШаблона;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполненияТематики;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийПодготовил

&НаКлиенте
Процедура ПодготовилОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Подготовил = Неопределено;
	
КонецПроцедуры

#КонецОбласти
