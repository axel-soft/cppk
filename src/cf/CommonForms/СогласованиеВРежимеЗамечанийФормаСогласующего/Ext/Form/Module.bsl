&НаКлиенте
Перем ИдентификаторТекущейПравки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоказыватьПравкиДругихСогласующих = Не НеПоказыватьПравкиДругихСогласующих;
	ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Не НеПоказыватьПравкиТолькоОдногоПрошлогоЭтапа;
	
	ПоказатьГалочкиКоманд();   
	
	ПолеPDFРаботаетВВебКлиенте = РаботаСPDFПовтИсп.ПолеPDFРаботаетВВебКлиенте();
	МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	
	ИспользоватьПредпросмотрФайловОбщая = ПолучитьФункциональнуюОпцию("ИспользоватьПредпросмотрФайлов");
	ИспользоватьПредпросмотрФайловЛичная =
		ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьПредпросмотрФайлов");
		
	Если ИспользоватьПредпросмотрФайловЛичная = Неопределено Тогда
		ИспользоватьПредпросмотрФайловЛичная = Истина;
	КонецЕсли;
	
	ИспользоватьПредпросмотрФайлов = 
		ИспользоватьПредпросмотрФайловОбщая И ИспользоватьПредпросмотрФайловЛичная;
	
	ВыбранныйФайл = Неопределено;
	Если Параметры.Свойство("Файл") И ТипЗнч(Параметры.Файл) = Тип("СправочникСсылка.Файлы") Тогда
		ВыбранныйФайл = Параметры.Файл;
	КонецЕсли;	
	
	СпособСогласованияВРежимеЗамечаний = Константы.СпособСогласованияВРежимеЗамечаний.Получить();
	
	Если Параметры.Свойство("Документ") Тогда
		Документ = Параметры.Документ;
	КонецЕсли;	
	
	Если Параметры.Свойство("Действие") Тогда
		Действие = Параметры.Действие;
		ВеткаОбработки = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(Действие);
		НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(Действие);
		
		РеквДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "ПодписыватьУЭП, ЧислоСтраницДляПредпросмотраПорции");    
		ПодписыватьУЭП = РеквДействия.ПодписыватьУЭП;
		ЧислоСтраницДляПредпросмотраПорции = РеквДействия.ЧислоСтраницДляПредпросмотраПорции;
		
		Если ПодписыватьУЭП Тогда
			Команды.ЗадачаСогласовано.Заголовок = НСтр("ru = 'Согласовано (ЭП)'");
			Команды.ЗадачаНеСогласовано.Заголовок = НСтр("ru = 'Не согласовано (ЭП)'");
		КонецЕсли;	
	КонецЕсли;	

	Если Параметры.Свойство("ВеткаОбработки") Тогда
		ВеткаОбработки = Параметры.ВеткаОбработки;
	КонецЕсли;	

	Если Параметры.Свойство("ДействиеЗадачи") Тогда
		ДействиеЗадачи = Параметры.ДействиеЗадачи;
		ТекущийИдентификаторАвтора = ДействиеЗадачи.УникальныйИдентификатор();
		ДействиеЗадачиПроцесса = ДействиеЗадачи; 
	КонецЕсли;	
	
	Если Параметры.Свойство("Участник") Тогда
		Участник = Параметры.Участник;
		ТекущийАвтор = Участник;
		Если Не ЗначениеЗаполнено(ТекущийАвтор) Тогда
			ТекущийАвтор = СотрудникиВызовСервера.ОсновнойСотрудникПользователя(ПользователиКлиентСервер.ТекущийПользователь());
		КонецЕсли;		
	КонецЕсли;	
	
	Если Параметры.Свойство("Идентификатор") Тогда
		ИдентификаторУчастника = Параметры.Идентификатор;
		ТекущийИдентификаторАвтора = ИдентификаторУчастника;
	КонецЕсли;	
	
	Если Параметры.Свойство("ГлавнаяЗадача") Тогда
		ГлавнаяЗадача = Параметры.ГлавнаяЗадача;
	КонецЕсли;	
	
	Если Параметры.Свойство("БизнесПроцесс") Тогда
		БизнесПроцесс = Параметры.БизнесПроцесс;
	КонецЕсли;	
	
	Если Параметры.Свойство("МассивДочернихПроцессов") И ЗначениеЗаполнено(Параметры.МассивДочернихПроцессов) Тогда
		ДочерниеПроцессы.ЗагрузитьЗначения(Параметры.МассивДочернихПроцессов);
	КонецЕсли;	
	
	Если Параметры.Свойство("Задача") Тогда
		Задача = Параметры.Задача;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ДействиеЗадачиПроцесса = ДействияВызовСервера.ДействиеЗадачиПоДействиюИИдентификатору(
			Действие, ИдентификаторУчастника);
		ЗадачаТрекера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачиПроцесса, "Задача");
		
		ДействиеЗадачи = ДействиеЗадачиПроцесса;
	Иначе
		ЗадачаТрекера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ТекущийИсточникДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДействиеЗадачи,
			"Источник");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Действие) И ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		ИдентификаторЭтапа = Справочники.ДействияСогласования.ИдентификаторЭтапаУчастника(
			Действие, ИдентификаторУчастника);	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Документ);
	КонецЕсли;	
	
	ДокументПодготовлен = СогласованиеВРежимеЗамечанийСервер.ДокументПодготовленКСогласованиюВРежимеЗамечаний(
		Документ);
		
	Если Не ДокументПодготовлен Тогда
		Элементы.ГруппаСтраницыКорень.ТекущаяСтраница = Элементы.ГруппаСтраницаНеПодготовлено;
	КонецЕсли;
	
	ТекущийСотрудник = Сотрудники.ОсновнойСотрудник();
	
	ПоказыватьВнесенноеИнициатором = Истина; // для согласующего - по умолчанию Истина
	Элементы.ПравкиПоказыватьВнесенноеИнициатором.Пометка = ПоказыватьВнесенноеИнициатором;
	
	ЭтаФорма.Заголовок = Строка(Документ) + НСтр("ru = ' (согласование документа)'");
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ИдентификаторБлокировкиПроцесса = УникальныйИдентификатор;
	
	ПоказыватьОтличияОтШаблона = Истина;
	
	ДатаТекЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Дата");
	МинимальнаяДатаПравок = ДатаТекЗадачи;
	
	ТочкаМаршрута = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ТочкаМаршрута");
	
	ИсполнителиПрошлогоЦикла = ПолучитьПрежнихИсполнителейПодзадач();
	Если ИсполнителиПрошлогоЦикла.Количество() = 0 Тогда // на первом цикле не показываем
		Элементы.НаправитьПодчиненным.Видимость = Ложь; // если первый цикл, скроем
	Иначе
		ЕстьИсполнителиПрошлогоЦикла = Истина;
	КонецЕсли;	
	
	ПоказатьСтатусДочернихЗадач();
	
	Если ЗначениеЗаполнено(БизнесПроцесс) И ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		ПодписыватьРезультатВыполненияЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			БизнесПроцесс, "ПодписыватьЭП");
	КонецЕсли;	
	
	ОбновитьТекущийАвтор();
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", ТекущийИсточникДействияОбъект);
		ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.СтраницаДополнительныеРеквизиты.Имя);
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", Элементы.ГруппаПравоКоманды.Имя);
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(
			ЭтотОбъект,
			ТекущийИсточникДействияДанные);
		
		УстановитьПривилегированныйРежим(Ложь);
	
	КонецЕсли;
	
	СоздатьКнопкиПорционногоПредпросмотра();
	
	НомерБлока = 1;
	ВсегоПорцийПредпросмотра = 1;
	ОбновитьКнопкиДинамическогоСписка();
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	
	Если ЭтоМобильныйКлиент Тогда
		ЗагрузитьДанныеHtmlИСпискаЗамечаний();
	Иначе
		Если ДокументПодготовлен Тогда
			ЗагрузитьДанныеHtmlИСпискаЗамечаний();
		КонецЕсли;	
	КонецЕсли;
	
	ЗаполнитьУсловноеОформлениеСпискаПравок();
	
	ПоказатьНужнуюСтраницу();
	
	Элементы.ФайлыКонтекстноеМенюПоказатьОтличияОтПредыдущего.Видимость = Ложь;
	Если ЗначениеЗаполнено(Документ) Тогда
		СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(Документ, Справочники.ТипыСвязей.ДелаетНеДействующим);
		Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			
			ТекФайлы1 = СогласованиеВРежимеЗамечанийСервер.ПолучитьПриложенныеФайлыДляТаблицыФайлы(Документ);
			ТекФайлы2 = СогласованиеВРежимеЗамечанийСервер.ПолучитьПриложенныеФайлыДляТаблицыФайлы(СвязанныйДокумент);
			Если ТекФайлы1.Количество() = 1 И ТекФайлы2.Количество() = 1 Тогда
				// доступна команда "Показать отличия от предыдущего"
				Элементы.ФайлыКонтекстноеМенюПоказатьОтличияОтПредыдущего.Видимость = Истина;
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЕсли;
	
	Элементы.ПравкиНомер.Видимость = Истина; // новый
	Элементы.ПравкиНомерЭтапа.Видимость = Ложь; // старый
	
	НастроитьИнформационнуюНадписьВизы();
	НастроитьИнформационнуюНадписьПротоколРазногласий();
	НастроитьВидимостьКомандыПоказатьОтличияФайлОтПредыдущейИтерации();
	
	Если Не ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Элементы.ГруппаЗадачиСогласования.Видимость = Ложь;
		Элементы.ГруппаЗадачиИсполнения.Видимость = Истина;
	Иначе	
		Элементы.ГруппаЗадачиСогласования.Видимость = Истина;
		Элементы.ГруппаЗадачиИсполнения.Видимость = Ложь;
	КонецЕсли;	
	
	ИмяПодзадачи = СтрШаблон(
		НСтр("ru = 'Внести замечания ""%1""'"),
		РаботаСОбсуждениями.ПолучитьПредставлениеПредмета(Документ));
		
	Элементы.ГруппаЛегенда.Видимость = Не НеПоказыватьЛегенду;		
	
	ОбновитьПоступившиеОбновления();
	
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
	Элементы.ПравкиНомер.Видимость = ПоказыватьЗамечанияВсехПодчиненных;
	Элементы.ПравкиАвтор.Видимость = ПоказыватьПравкиДругихЭтапов Или ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа;
	
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДействиеЗадачи);
		АвтоНавигационнаяСсылка = Ложь;
	КонецЕсли;	
	
	ПоказыватьPdfСредствами1С = РаботаСФайламиСлужебныйПовтИсп.ПоказыватьPdfСредствами1С();
	
	ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
	ЭтоТонкийКлиент = ОбщегоНазначенияДокументооборот.ЭтоТонкийКлиент();
	
	// Pdf
	Если ЭтоТонкийКлиент Или (ЭтоВебКлиент И ПолеPDFРаботаетВВебКлиенте) Тогда
		Если ПоказыватьPdfСредствами1С Тогда
			ВывестиPDFДокументНаСервере();
		КонецЕсли;
	КонецЕсли;
	//Конец Pdf
	
	ВыделенныеДействия = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи);
	ДанныеДляОбновления = РаботаСЗадачами.ДанныеДляОбновления(
		ДействиеЗадачи,
		ВыделенныеДействия,
		ЗадачаТрекера);
	Элементы.ФормаДобавитьУчастников.Видимость = ДанныеДляОбновления.ЕстьДобавлениеУчастников;
	Элементы.СоздатьПоручениеВверху.Видимость = ДанныеДляОбновления.ЕстьПостановкаПодзадач;
	Элементы.СоздатьПоручение.Видимость = ДанныеДляОбновления.ЕстьПостановкаПодзадач;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	Если Не ДокументПодготовлен Тогда
		
		#Если ВебКлиент Или МобильныйКлиент Тогда
			Сообщить(НСтр("ru = 'Подождите пока выполнятся задания в очереди (обработка ""Выполнение заданий(клиент)"").'"));
			Возврат;
		#КонецЕсли	
		
		ПодключитьОбработчикОжидания("ПодготовитьHtml", 0.2, Истина);
		Возврат;
	КонецЕсли;	

	Если ИдПервогоWordФайла <> 0 Тогда
		//позиционируемся на первую строку с файлом
		Элементы[ИмяТаблицыФайлов()].ТекущаяСтрока = ИдПервогоWordФайла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьHtml()   
	
	ЧислоПопыток = 0;
	
	Пока Истина Цикл
		
		ЗаблокироватьДанныеДействияДляРедактирования(Действие, ДанныеЗаблокированы, УникальныйИдентификатор);
		
		Если ДанныеЗаблокированы Тогда
			
			ДокументПодготовлен = СогласованиеВРежимеЗамечанийСервер.ДокументПодготовленКСогласованиюВРежимеЗамечаний(Документ);
			Если ДокументПодготовлен Тогда
				Прервать;
			КонецЕсли;	
			
			// подготовить документ к согласованию (создать html)
			СогласованиеВРежимеЗамечанийКлиент.ПодготовитьДокументКСогласованию(
				Документ, ЭтаФорма.УникальныйИдентификатор, ЧислоСтраницДляПредпросмотраПорции);
				
			РазблокироватьДанныеДействияДляРедактирования(Действие, ДанныеЗаблокированы, УникальныйИдентификатор);	
			Прервать;
			
		Иначе
			
			ЧислоПопыток = ЧислоПопыток + 1;
			Если ЧислоПопыток > 10 Тогда
				Сообщить(НСтр("ru = 'Не удалось подготовить html'"));
				Прервать;
			КонецЕсли;	
			
			ДатаНачала = ТекущаяДата();
			Пока Истина Цикл
				Если ТекущаяДата() > ДатаНачала + 2 Тогда // ждем 2 сек
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЦикла;
		
	ДокументПодготовлен = Истина;	
	ЗагрузитьДанныеHtmlИСпискаЗамечаний();
	Элементы.ГруппаСтраницыКорень.ТекущаяСтраница = Элементы.ГруппаСтраницаОсновная;
	
	ПодключитьОбработчикОжидания("ПоставитьСтрокуФайлов", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьСтрокуФайлов()
	
	Если ИдПервогоWordФайла <> 0 Тогда
		Элементы[ИмяТаблицыФайлов()].ТекущаяСтрока = ИдПервогоWordФайла;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НужноПрочитатьПравки = Ложь;
	
	Если Настройки["НеПоказыватьПравкиДругихСогласующих"] <> Неопределено Тогда
		
		НеПоказыватьПравкиДругихСогласующих = Настройки["НеПоказыватьПравкиДругихСогласующих"];
		
		ПоказыватьПравкиДругихСогласующих = Не НеПоказыватьПравкиДругихСогласующих;
		
		НужноПрочитатьПравки = Истина;
		
	КонецЕсли;
	
	Если Настройки["ПоказыватьПравкиДругихЭтапов"] <> Неопределено Тогда
		
		ПоказыватьПравкиДругихЭтапов = Настройки["ПоказыватьПравкиДругихЭтапов"];
		
		НужноПрочитатьПравки = Истина;
		
	КонецЕсли;
	
	Если Настройки["НеПоказыватьПравкиТолькоОдногоПрошлогоЭтапа"] <> Неопределено Тогда
		
		НеПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Настройки["НеПоказыватьПравкиТолькоОдногоПрошлогоЭтапа"];
		ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Не НеПоказыватьПравкиТолькоОдногоПрошлогоЭтапа;
		
		НужноПрочитатьПравки = Истина;
		
	КонецЕсли;
	
	Если НужноПрочитатьПравки Тогда
		ПеречитатьПравкиСервер();
	КонецЕсли;	
	
	ПоказатьГалочкиКоманд(); 
	
	Элементы.ГруппаЛегенда.Видимость = Не НеПоказыватьЛегенду;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Не ПредупреждениеВыдано Тогда
		
		ПредупреждениеВыдано = Истина;
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПоказатьВСпискеЗавершение", ЭтотОбъект, Параметры);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,
			КодВозвратаДиалога.Отмена);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВСпискеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено Или РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьПравки();
		Закрыть();
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Задача" Тогда  
		
		СтатусПоказан = Ложь;
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("ВышестоящаяЗадача")
			И Параметр.ВышестоящаяЗадача = ЗадачаТрекера Тогда
				ПоказатьСтатусДочернихЗадач();
				СтатусПоказан = Истина;
		КонецЕсли;
		
		ВсеСтатусы = СтатусЗадач.ПолучитьЭлементы();
		
		Если СтатусПоказан = Ложь Тогда
			Для Каждого Стр Из ВсеСтатусы Цикл
				Если Стр.Подзадача = Источник Тогда
					ПоказатьСтатусДочернихЗадач();
					СтатусПоказан = Истина;
					Прервать;
				КонецЕсли;
					 			
			КонецЦикла;	
		КонецЕсли;
		
		Если СтатусПоказан И Элементы.ГруппаСтраницаПодчиненныеЗадачи.Видимость = Истина Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПодчиненныеЗадачи;
		КонецЕсли;	
			
	КонецЕсли;	
	
	Если ИмяСобытия = "ВыполненоДействиеЗадачи"
		И Источник = УникальныйИдентификатор Тогда
		ОтработатьВместоРобота();
		Закрыть();
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Документ Тогда
		
		ЗаписатьПравки();
		ЗагрузитьДанныеHtmlИСпискаЗамечаний();
				
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
		   И Параметр.Свойство("Владелец")
		   И Параметр.Владелец = Документ Тогда
		   
		    ЗаписатьПравки();
			ЗагрузитьДанныеHtmlИСпискаЗамечаний();
		
		КонецЕсли;
				
	КонецЕсли;
	
	Если ИмяСобытия = "ДействиеЗадачиПеренаправлено"
		И Параметр = ДействиеЗадачи
		И Источник = УникальныйИдентификатор Тогда
		
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		
		// СтандартныеПодсистемы.Свойства 
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеHtmlИСпискаЗамечаний()
	
	Файлы.Очистить();
	
	МассивФайлов = СогласованиеВРежимеЗамечанийСервер.ПолучитьВсеПриложенныеФайлы(Документ);
	ТаблицаФайлов = СогласованиеВРежимеЗамечанийСервер.ПолучитьПараметрыФайлов(Документ, МассивФайлов);
	
	ЭтоКомплект = Ложь;
	Если ЭтоКомплект Тогда
		Элементы.Файлы.ВысотаВСтрокахТаблицы = 6;
	КонецЕсли;		
	
	Строка = Файлы.Добавить();
	Если ЭтоКомплект Тогда
		Строка.Наименование = НСтр("ru = 'Комплект'");
	Иначе
		Строка.Наименование = НСтр("ru = 'Документ'");
	КонецЕсли;	
	Строка.Ссылка = Документ;
	Строка.ИндексКартинки = 10;
	ПрочитатьПравки(Строка);
	
	ОтображатьДополнительныеРеквизиты =	Элементы.СтраницаДополнительныеРеквизиты.ПодчиненныеЭлементы.Количество() > 0;
	Если ОтображатьДополнительныеРеквизиты Тогда
		
		Строка = Файлы.Добавить();
		Строка.Наименование = НСтр("ru = 'Дополнительные реквизиты'");
		Строка.ЭтоДополнительныеРеквизиты = Истина;
		Строка.ИндексКартинки = -1;
		
	КонецЕсли;	
	
	ПользовательИЕгоСотрудники = СотрудникиВызовСервера.ПользовательИЕгоСотрудники();
	
	Для Каждого Выборка Из ТаблицаФайлов Цикл
		
		Строка = Файлы.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		
		Строка.ИмяБезРасширения = Выборка.Наименование;
		
		ИмяИРасширение = Строка(Выборка.Наименование) + "." + Выборка.Расширение;
		Если ЗначениеЗаполнено(Выборка.Роль) Тогда
			ИмяИРасширение = ИмяИРасширение + " (" + Строка(Выборка.Роль) + ")";
		КонецЕсли;	
		
		Если ЭтоКомплект Тогда
			Строка.Наименование = ИмяИРасширение + " (" + Строка(Выборка.ВладелецФайла) +  ")";
		Иначе
			Строка.Наименование = ИмяИРасширение;
		КонецЕсли;	
		
		Если ПользовательИЕгоСотрудники.Найти(Выборка.Редактирует) <> Неопределено Тогда
			Строка.ЗанятМной = Истина;
		КонецЕсли;	

		Если Не ЗначениеЗаполнено(ВыбранныйФайл) 
			И ИдПервогоWordФайла = 0 
			И СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Строка.Расширение) Тогда
			ИдПервогоWordФайла = Строка.ПолучитьИдентификатор();
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ВыбранныйФайл) И Строка.Ссылка = ВыбранныйФайл Тогда
			ИдПервогоWordФайла = Строка.ПолучитьИдентификатор();
		КонецЕсли;	
		
	КонецЦикла;

	ЗагрузитьHtmlИЗамечания();
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьHtmlИЗамечания()
	
	Для Каждого Строка Из Файлы Цикл
		
		ПрочитатьHTML(Строка);
		ПрочитатьПравки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтложенноеОбновление()
	
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ОтложенноеОбновление");
	
	ПоказатьСтатусДочернихЗадач();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПодчиненныеЗадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьВизыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура МК_ПоказатьСкрытьФайлы(Команда)
	
	Элементы.МК_Файлы.Видимость = Не Элементы.МК_Файлы.Видимость;
	МК_ПоказатьСкрытьФайлыНаСервере();
	
КонецПроцедуры
	
&НаКлиенте
Процедура МК_СтраницаМоиПравки(Команда)
	
	МК_СтраницаМоиПравкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаПравкиПодчиненных(Команда)
	
	МК_СтраницаПравкиПодчиненныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаПодзадачи(Команда)
	
	МК_СтраницаПодзадачиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаИнформация(Команда)
	
	МК_СтраницаИнформацияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьПравки();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьПравки();
	Модифицированность = Ложь;
	
	Если БылоУдаление Тогда
		ПеречитатьПравки();
		БылоУдаление = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПравки()
	
	Если ЗначениеЗаполнено(ИдентификаторУчастника) И ДействияВызовСервера.ЗадачаВыполнена(Действие, ИдентификаторУчастника) Тогда
		ВызватьИсключение НСтр("ru = 'Задача уже выполнена.'");
	КонецЕсли;	
	
	НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "ЗаписьПравокПараллельноеРедактирование";
	КомментарийКЗамеру = "Задача: " + ПолучитьНавигационнуюСсылку(Задача);
	
	ЗаписаноПравок = 0;
	УдаленоПравок = 0;
	
	// запоминаем для предыдущей строки - только Правки и ПравкиУдаленные.
	Для Каждого Строка Из Файлы Цикл
		
		Если Строка.Ссылка = ТекущийФайл Тогда // нашли
			
			ПравкиТаблица = РеквизитФормыВЗначение("Правки");
			ЗначениеВДанныеФормы(ПравкиТаблица, Строка.Правки);
			
			ПравкиУдаленныеТаблица = РеквизитФормыВЗначение("ПравкиУдаленные");
			ЗначениеВДанныеФормы(ПравкиУдаленныеТаблица, Строка.ПравкиУдаленные);
			
			ПравкиПодчиненныхТаблица = РеквизитФормыВЗначение("ПравкиПодчиненных");
			ЗначениеВДанныеФормы(ПравкиПодчиненныхТаблица, Строка.ПравкиПодчиненных);
			
			ПравкиУдаленныеПодчиненныхТаблица = РеквизитФормыВЗначение("ПравкиУдаленныеПодчиненных");
			ЗначениеВДанныеФормы(ПравкиУдаленныеПодчиненныхТаблица, Строка.ПравкиУдаленныеПодчиненных);
			
			Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для Каждого Строка Из Файлы Цикл
		
		ЗаписатьПравкиОднойСтроки(Строка);
		ЗаписатьПравкиПодчиненныхОднойСтроки(Строка);
		
	КонецЦикла;		
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(
			Документ, 
			СтрШаблон(НСтр("ru = 'Форма согласующего в режиме замечаний (замечаний записано: %1, удалено: %2)'"), ЗаписаноПравок, УдаленоПравок)
			);
	КонецЕсли;	
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, НачалоЗамера,, КомментарийКЗамеру);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПравкиПодчиненныхОднойСтроки(СтрокаФайлы)

	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из СтрокаФайлы.ПравкиПодчиненных Цикл
		
		СпрСсылка = Справочники.Замечания.ПолучитьСсылку(Строка.УникальныйИдентификатор);
		
		Если ОбщегоНазначения.СсылкаСуществует(СпрСсылка) Тогда
			Запись = СпрСсылка.ПолучитьОбъект();
	    Иначе
			Запись = Справочники.Замечания.СоздатьЭлемент();
			Запись.УстановитьСсылкуНового(СпрСсылка);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, Строка);
		
		Запись.ВладелецЗамечания = СтрокаФайлы.ФайлHTML;
		Если Не ЗначениеЗаполнено(СтрокаФайлы.ФайлHTML) Тогда
			Запись.ВладелецЗамечания = СтрокаФайлы.Ссылка;
		КонецЕсли;	
		
		Запись.Документ = Документ;
		
		Запись.Записать();
		
	КонецЦикла;	
	
	// Удаляем удаленные правки
	Для Каждого Строка Из СтрокаФайлы.ПравкиУдаленныеПодчиненных Цикл
		
		СпрСсылка = Справочники.Замечания.ПолучитьСсылку(Строка.УникальныйИдентификатор);
		
		Если ОбщегоНазначения.СсылкаСуществует(СпрСсылка) Тогда
			Запись = СпрСсылка.ПолучитьОбъект();
			Запись.УстановитьПометкуУдаления(Истина);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПравкиОднойСтроки(СтрокаФайлы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из СтрокаФайлы.Правки Цикл
		
		// Записываем только свои правки - где я Автор и это текущий этап
		Если 
			Строка.ИдентификаторАвтора = ТекущийИдентификаторАвтора
			И Строка.НомерЭтапа = НомерИтерации Тогда
			
			СпрСсылка = Справочники.Замечания.ПолучитьСсылку(Строка.УникальныйИдентификатор);
			
			Если ОбщегоНазначения.СсылкаСуществует(СпрСсылка) Тогда
				Запись = СпрСсылка.ПолучитьОбъект();
		    Иначе
				Запись = Справочники.Замечания.СоздатьЭлемент();
				Запись.УстановитьСсылкуНового(СпрСсылка);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			
			Если ЗначениеЗаполнено(Запись.ВерсияHTML) Тогда
				Запись.ВладелецЗамечания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ВерсияHTML, "Владелец");  
			Иначе	
				Запись.ВладелецЗамечания = СтрокаФайлы.ФайлHTML;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаФайлы.ФайлHTML) Тогда
				Запись.ВладелецЗамечания = СтрокаФайлы.Ссылка;
			КонецЕсли;	
			
			Запись.Документ = Документ;
			Запись.ВеткаОбработки = ВеткаОбработки;
			Запись.ИдентификаторЭтапа = ИдентификаторЭтапа;
			Запись.Цикл = НомерЦикла;
			
			Запись.Записать();
			
			ЗаписаноПравок = ЗаписаноПравок + 1;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	// Удаляем удаленные правки
	Для Каждого Строка Из СтрокаФайлы.ПравкиУдаленные Цикл
		
		СпрСсылка = Справочники.Замечания.ПолучитьСсылку(Строка.УникальныйИдентификатор);
		
		Если ОбщегоНазначения.СсылкаСуществует(СпрСсылка) Тогда
			Запись = СпрСсылка.ПолучитьОбъект();
			Запись.УстановитьПометкуУдаления(Истина);
		КонецЕсли;	
		
		УдаленоПравок = УдаленоПравок + 1;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
// Строка - строка табличной части Файлы
Процедура ПрочитатьHTML(Строка)
	
	Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Строка.Расширение) Тогда
		
		Строка.ФайлHTML = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
			Строка.ВладелецФайла, Строка.Ссылка, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание,,,,
			Строка.ВсегоПорцийПредпросмотра, НомерБлока - 1);   // НомерБлока  -с 1, но из СУБД читаем с 0
			
		Если ЗначениеЗаполнено(Строка.ФайлHTML) Тогда
				
			РеквизитыHTML = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ФайлHTML, 
				"ТекущаяВерсия, ТекущаяВерсияРазмер, ТекущаяВерсияДатаСоздания");
			
			Строка.ВерсияHTML = РеквизитыHTML.ТекущаяВерсия;
			Строка.ФайлHTMLРазмер = РеквизитыHTML.ТекущаяВерсияРазмер;
			
			ТекущаяВерсияДатаСоздания = РеквизитыHTML.ТекущаяВерсияДатаСоздания;
			ДатаНачалаUTF = СогласованиеВРежимеЗамечанийСервер.ПолучитьДатуНачалаИспользованияКодировкиUTF();
			
			ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Строка.ФайлHTML);
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
			ДвоичныеДанные.Записать(ИмяВременногоФайла);
			
			ЧтениеТекста = Неопределено;
			Если ТекущаяВерсияДатаСоздания < ДатаНачалаUTF Тогда // старый файл
				ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
			Иначе
				ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
			КонецЕсли;	
			Строка.ТекстHTML = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
			Строка.ТекстHTML = СтрЗаменить(Строка.ТекстHTML, Символ(1), " ");
			Строка.ТекстHTML = СтрЗаменить(Строка.ТекстHTML, Символ(30), " ");
			
			Если Найти(Строка.ТекстHTML, "contentEditable") <> 0  Тогда
			
				Строка.ТекстHTML = СтрЗаменить(Строка.ТекстHTML, "contentEditable=true", "");
					
			КонецЕсли;
			
			СогласованиеВРежимеЗамечанийСервер.ВставитьКартинкиВТекстHTML(
				Строка.ТекстHTML, Строка.ВладелецФайла, Строка.ФайлHTML, УникальныйИдентификатор);
			
			Строка.ТекстHTMLПриОткрытии = Строка.ТекстHTML;
			
			ПодсветитьПравки(Строка);
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПеречитатьПравки()
	
	ПеречитатьПравкиСервер();
	
	Если Элементы[ИмяТаблицыФайлов()].ТекущиеДанные <> Неопределено Тогда
		УстановитьДанныеИзТекущейСтроки(Элементы[ИмяТаблицыФайлов()].ТекущаяСтрока);
	КонецЕсли;	
	
	ПравкиКоличество = Правки.Количество();
	
КонецПроцедуры	

&НаСервере
Процедура ПеречитатьПравкиСервер()
	
	Для Каждого Строка Из Файлы Цикл
		
		Если Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Строка.Ссылка) Тогда
			ПрочитатьHTML(Строка);
		КонецЕсли;
		
		ПрочитатьПравки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
// Строка - строка табличной части Файлы
Процедура ПрочитатьПравки(Строка)
	
	ПрочитатьПравкиСвои(Строка);
	ПрочитатьПравкиПодчиненных(Строка);
	
	ТекущаяВерсияДанныхДействияЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДействиеЗадачи, "ВерсияДанных");
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		ТекущаяВерсияДанныхИсточникаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийИсточникДействия, "ВерсияДанных");
	КонецЕсли;	
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьПравкиПодчиненныхСервер(ТекущаяСтрока)
	
	Для Каждого Строка Из Файлы Цикл
		
		ПрочитатьПравкиПодчиненных(Строка);
		
	КонецЦикла;
	
	ТекущиеДанные = Файлы.НайтиПоИдентификатору(ТекущаяСтрока);
	ПравкиПодчиненныхТаблица = ДанныеФормыВЗначение(ТекущиеДанные.ПравкиПодчиненных, Тип("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ПравкиПодчиненныхТаблица, "ПравкиПодчиненных");
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	ТекущаяВерсияДанныхДействияЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДействиеЗадачи, "ВерсияДанных");
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		ТекущаяВерсияДанныхИсточникаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийИсточникДействия, "ВерсияДанных");
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Функция ДочерниеВеткиОбработки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВеткиОбработки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВеткиОбработки КАК ВеткиОбработки
		|ГДЕ
		|	ВеткиОбработки.Родитель = &Родитель
		|	И ВеткиОбработки.ВладелецВетки.ВышестоящееДействие = &ДействиеЗадачи";
	Запрос.УстановитьПараметр("Родитель", ВеткаОбработки);
	Запрос.УстановитьПараметр("ДействиеЗадачи", ДействиеЗадачи);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаСервере
// Строка - строка табличной части Файлы
Процедура ПрочитатьПравкиПодчиненных(Строка)
	
	ТекПользователь = ТекущийАвтор;
	
	Строка.ПравкиПодчиненных.Очистить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Замечания.Документ КАК Документ,
		|	Замечания.Ссылка КАК Ссылка,
		|	Замечания.ВерсияДанных КАК ВерсияДанных,
		|	Замечания.ПометкаУдаления КАК ПометкаУдаления,
		|	Замечания.Код КАК Код,
		|	Замечания.Автоматическая КАК Автоматическая,
		|	Замечания.Автор КАК Автор,
		|	Замечания.ВерсияHTML КАК ВерсияHTML,
		|	Замечания.ВеткаОбработки КАК ВеткаОбработки,
		|	Замечания.ВладелецЗамечания КАК ВладелецЗамечания,
		|	Замечания.Дата КАК Дата,
		|	Замечания.Замечание КАК Замечание,
		|	Замечания.ЗамечаниеИнициатора КАК ЗамечаниеИнициатора,
		|	Замечания.ИдентификаторАвтора КАК ИдентификаторАвтора,
		|	Замечания.ИдентификаторЭтапа КАК ИдентификаторЭтапа,
		|	Замечания.ИдКонца КАК ИдКонца,
		|	Замечания.ИдНачала КАК ИдНачала,
		|	Замечания.ИмяПоля КАК ИмяПоля,
		|	Замечания.Комментарий КАК Комментарий,
		|	Замечания.НаЧтоМеняем КАК НаЧтоМеняем,
		|	Замечания.Номер КАК Номер,
		|	Замечания.НомерКартинки КАК НомерКартинки,
		|	Замечания.НомерЭтапа КАК НомерЭтапа,
		|	Замечания.Отработано КАК Отработано,
		|	Замечания.РеальныйАвтор КАК РеальныйАвтор,
		|	Замечания.СсылкиУтеряны КАК СсылкиУтеряны,
		|	Замечания.СтатусПринятия КАК СтатусПринятия,
		|	Замечания.ТипЗамечания КАК ТипЗамечания,
		|	Замечания.Цикл КАК Цикл,
		|	Замечания.ЧтоМеняем КАК ЧтоМеняем,
		|	Замечания.ЭтоЗамечаниеWord КАК ЭтоЗамечаниеWord,
		|	Замечания.ЭтоОтличиеОтШаблона КАК ЭтоОтличиеОтШаблона,
		|	Замечания.Предопределенный КАК Предопределенный,
		|	Замечания.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	Замечания.НомерБлока КАК НомерБлока
		|ИЗ
		|	Справочник.Замечания КАК Замечания
		|ГДЕ
		|	Замечания.ВладелецЗамечания В(&ВладелецЗамечанияМассив)
		|	И Замечания.ВеткаОбработки В (&ДочерниеПроцессы)
		|	И Замечания.ПометкаУдаления = ЛОЖЬ
		|	И Замечания.НомерЭтапа = &НомерЭтапа");
	   
	ФайлHTMLПараметр = Неопределено;
	   
	ВладелецЗамечанияМассив = Новый Массив;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Строка.Ссылка) Тогда
		
		ВладелецЗамечанияМассив.Добавить(Строка.Ссылка);
		
	ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		Если ЗначениеЗаполнено(Строка.ФайлHTML) Тогда
			
			ВладелецЗамечанияМассив = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьВсеСлужебныеФайлы(
				Строка.ВладелецФайла, Строка.Ссылка, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);
			
		Иначе	
			ВладелецЗамечанияМассив.Добавить(Строка.Ссылка);
		КонецЕсли; 
	КонецЕсли; 
	Запрос.УстановитьПараметр("ВладелецЗамечанияМассив", ВладелецЗамечанияМассив);
	
	Запрос.УстановитьПараметр("НомерЭтапа", НомерИтерации);
	
	ДочерниеПроцессыМассив = ДочерниеВеткиОбработки();
	
	// получим дочерние подветки (только первого уровня) для нашей ветки обработки
	Запрос.УстановитьПараметр("ДочерниеПроцессы", ДочерниеПроцессыМассив);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	// (дубли определим по идентичному набору ИдНачала  + ИдКонца + РеальныйАвтор)
	УникальныеПравки = Новый Соответствие; // ключ - синтетическая строка, значение - 1.
	
	Пока Выборка.Следующий() Цикл
		
		ЗагрузитьПравку = Истина;
		
		Если ДочерниеПроцессыМассив.Найти(Выборка.ВеткаОбработки) <> Неопределено Тогда
			// тут точно используем, не проверяя Автора
			ЗагрузитьПравку = Истина;
		Иначе
			
			ЗагрузитьПравку = Ложь;
			
		КонецЕсли;	
		
		// Автору процесса Исполнение видны правки всех пользователей.
		// В Исполнение (дочернем процессе) видны правки всех этапов Исполнения 
		
		СинтСтрока = "";
		
		Если ЗагрузитьПравку И ПоказыватьЗамечанияВсехПодчиненных Тогда
			
			СинтСтрока = СтрШаблон("ИдНачала-%1 ИдКонца-%2 РеальныйАвтор-%3",
				Выборка.ИдНачала, Выборка.ИдКонца, Выборка.РеальныйАвтор.УникальныйИдентификатор());
			
			Если УникальныеПравки.Получить(СинтСтрока) <> Неопределено Тогда
				ЗагрузитьПравку = Ложь; // это дубль
			КонецЕсли;		
			
		КонецЕсли;	
		
		Если ЗагрузитьПравку Тогда
		
			НовСтрока = Строка.ПравкиПодчиненных.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
			
			НовСтрока.УникальныйИдентификатор = Выборка.Ссылка.УникальныйИдентификатор();
			
			НовСтрока.СделанаТекущимПользователем = (НовСтрока.ИдентификаторАвтора = ТекущийИдентификаторАвтора);
			НовСтрока.ПравкаДругогоЭтапа = (НовСтрока.НомерЭтапа <> НомерИтерации);
			
			Если ПоказыватьЗамечанияВсехПодчиненных Тогда
				Если ДочерниеПроцессы.НайтиПоЗначению(НовСтрока.Процесс) = Неопределено Тогда // нет в прямых подчиненных
					НовСтрока.СтатусПринятия = Неопределено;
					НовСтрока.Отработано = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			НовСтрока.АвторПредставление = НовСтрока.Автор;
			
			Если НовСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.НеПринята") Тогда
				НовСтрока.НомерКартинкиСтатуса = 2;
			ИначеЕсли НовСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята") Тогда
				НовСтрока.НомерКартинкиСтатуса = 1;
			ИначеЕсли НовСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.ПринятаЧастично") Тогда
				НовСтрока.НомерКартинкиСтатуса = 3;
			Иначе
				НовСтрока.НомерКартинкиСтатуса = 0;
			КонецЕсли;	
			
			Если ПоказыватьЗамечанияВсехПодчиненных Тогда
				УникальныеПравки.Вставить(СинтСтрока, 1);
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ПравкиПодчиненныхТаблица = ДанныеФормыВЗначение(Строка.ПравкиПодчиненных, Тип("ТаблицаЗначений"));
	СогласованиеВРежимеЗамечанийHTMLСервер.СортироватьПравки(ПравкиПодчиненныхТаблица, Строка.ТекстHTML);
	ЗначениеВДанныеФормы(ПравкиПодчиненныхТаблица, Строка.ПравкиПодчиненных);
	
КонецПроцедуры

&НаСервере
// Строка - строка табличной части Файлы
Процедура ПрочитатьПравкиСвои(Строка)
	
	ТекПользователь = ТекущийАвтор;
	
	Строка.Правки.Очистить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Замечания.Документ КАК Документ,
		|	Замечания.Ссылка КАК Ссылка,
		|	Замечания.ВерсияДанных КАК ВерсияДанных,
		|	Замечания.ПометкаУдаления КАК ПометкаУдаления,
		|	Замечания.Код КАК Код,
		|	Замечания.Автоматическая КАК Автоматическая,
		|	Замечания.Автор КАК Автор,
		|	Замечания.ВерсияHTML КАК ВерсияHTML,
		|	Замечания.ВеткаОбработки КАК ВеткаОбработки,
		|	Замечания.ВладелецЗамечания КАК ВладелецЗамечания,
		|	Замечания.Дата КАК Дата,
		|	Замечания.Замечание КАК Замечание,
		|	Замечания.ЗамечаниеИнициатора КАК ЗамечаниеИнициатора,
		|	Замечания.ИдентификаторАвтора КАК ИдентификаторАвтора,
		|	Замечания.ИдентификаторЭтапа КАК ИдентификаторЭтапа,
		|	Замечания.ИдКонца КАК ИдКонца,
		|	Замечания.ИдНачала КАК ИдНачала,
		|	Замечания.ИмяПоля КАК ИмяПоля,
		|	Замечания.Комментарий КАК Комментарий,
		|	Замечания.НаЧтоМеняем КАК НаЧтоМеняем,
		|	Замечания.Номер КАК Номер,
		|	Замечания.НомерКартинки КАК НомерКартинки,
		|	Замечания.НомерЭтапа КАК НомерЭтапа,
		|	Замечания.Отработано КАК Отработано,
		|	Замечания.РеальныйАвтор КАК РеальныйАвтор,
		|	Замечания.СсылкиУтеряны КАК СсылкиУтеряны,
		|	Замечания.СтатусПринятия КАК СтатусПринятия,
		|	Замечания.ТипЗамечания КАК ТипЗамечания,
		|	Замечания.Цикл КАК Цикл,
		|	Замечания.ЧтоМеняем КАК ЧтоМеняем,
		|	Замечания.ЭтоЗамечаниеWord КАК ЭтоЗамечаниеWord,
		|	Замечания.ЭтоОтличиеОтШаблона КАК ЭтоОтличиеОтШаблона,
		|	Замечания.Предопределенный КАК Предопределенный,
		|	Замечания.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	Замечания.НомерБлока КАК НомерБлока
		|ИЗ
		|	Справочник.Замечания КАК Замечания
		|ГДЕ
		|	Замечания.ВладелецЗамечания В(&ВладелецЗамечанияМассив)
		|	И Замечания.ВеткаОбработки В(&ДочерниеПроцессы)
		|	И Замечания.ПометкаУдаления = ЛОЖЬ");
	
	ВладелецЗамечанияМассив = Новый Массив;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Строка.Ссылка) Тогда
		
		ВладелецЗамечанияМассив.Добавить(Строка.Ссылка);
		
	ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		Если ЗначениеЗаполнено(Строка.ФайлHTML) Тогда
			
			ВладелецЗамечанияМассив = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьВсеСлужебныеФайлы(
				Строка.ВладелецФайла, Строка.Ссылка, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);
			
		Иначе	
			ВладелецЗамечанияМассив.Добавить(Строка.Ссылка);
		КонецЕсли; 
	КонецЕсли; 
	Запрос.УстановитьПараметр("ВладелецЗамечанияМассив", ВладелецЗамечанияМассив);
	
	ДочерниеПроцессыОтбор = Новый Массив;
	ДочерниеПроцессыОтбор.Добавить(ВеткаОбработки);
	Если ЭтоПодчиненка И ЗначениеЗаполнено(КорневойПроцесс) Тогда
		ДочерниеПроцессыОтбор.Добавить(КорневойПроцесс);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ДочерниеПроцессы", ДочерниеПроцессыОтбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗагрузитьПравку = Истина;
		
		ЭтоЗамечаниеИнициатора = (Выборка.ЗамечаниеИнициатора Или Выборка.ЭтоЗамечаниеWord);
		
		Если (Не ПоказыватьПравкиДругихСогласующих 
			//И Выборка.Автор <> ТекПользователь)
			И Выборка.ИдентификаторАвтора <> ТекущийИдентификаторАвтора)
			И Не ЭтоЗамечаниеИнициатора Тогда  // чужие не покажем
			ЗагрузитьПравку = Ложь;
		КонецЕсли;	
		
		Если Не ПоказыватьПравкиДругихСогласующих И Выборка.Автор <> ТекПользователь
			И Не Выборка.ЗамечаниеИнициатора // правку инициатора покажем даже если не стоит ПоказыватьПравкиДругихСогласующих
			И Не Выборка.ЭтоЗамечаниеWord Тогда 
			ЗагрузитьПравку = Ложь;
		КонецЕсли;	
		
		Если Выборка.НомерЭтапа <> НомерИтерации Тогда // если равно,  то всегда загрузим
			
			Если ПоказыватьПравкиДругихЭтапов Тогда
				// все ок, загрузим - все этапы
			ИначеЕсли ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа Тогда
				Если Выборка.НомерЭтапа <> НомерИтерации - 1 Тогда
					ЗагрузитьПравку = Ложь;
				КонецЕсли;	
			Иначе	
				ЗагрузитьПравку = Ложь; // выключено и ПоказыватьПравкиДругихЭтапов и ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ЭтоПодчиненка И Выборка.Процесс = КорневойПроцесс Тогда
			ЗагрузитьПравку = Ложь; // только правки ЭтоОтличиеОтШаблона видны - см ниже
		КонецЕсли;	
		
		Если Не ПоказыватьОтличияОтШаблона И Выборка.ЭтоОтличиеОтШаблона Тогда
			ЗагрузитьПравку = Ложь;
		КонецЕсли;	
		
		Если ПоказыватьОтличияОтШаблона И Выборка.ЭтоОтличиеОтШаблона Тогда
			ЗагрузитьПравку = Истина;
		КонецЕсли;	
		
		Если ЭтоЗамечаниеИнициатора
			И Не ПоказыватьВнесенноеИнициатором Тогда
			ЗагрузитьПравку = Ложь;
		КонецЕсли;	
		
		Если ЗагрузитьПравку Тогда
			
			НовСтрока = Строка.Правки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
			
			НовСтрока.УникальныйИдентификатор = Выборка.Ссылка.УникальныйИдентификатор();
			
			НовСтрока.СделанаТекущимПользователем = (НовСтрока.ИдентификаторАвтора = ТекущийИдентификаторАвтора);
			НовСтрока.ПравкаДругогоЭтапа = (НовСтрока.НомерЭтапа <> НомерИтерации);
			
			Если НовСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.НеПринята") Тогда
				НовСтрока.НомерКартинкиСтатуса = 2;
			ИначеЕсли НовСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята") Тогда
				НовСтрока.НомерКартинкиСтатуса = 1;
			ИначеЕсли НовСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.ПринятаЧастично") Тогда
				НовСтрока.НомерКартинкиСтатуса = 3;
			Иначе
				НовСтрока.НомерКартинкиСтатуса = 0;
			КонецЕсли;	
			
			Если НовСтрока.ЭтоОтличиеОтШаблона Или НовСтрока.ЭтоЗамечаниеWord Или НовСтрока.ЗамечаниеИнициатора Тогда
				НовСтрока.НомерКартинкиСтатуса = 4;
			КонецЕсли;	
			
			Если ЭтоЗамечаниеИнициатора Или НовСтрока.ЭтоОтличиеОтШаблона = Истина Тогда
				НовСтрока.Замечание = НовСтрока.НаЧтоМеняем;
			КонецЕсли;	
			
			НовСтрока.АвторПредставление = НовСтрока.Автор;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ПравкиТаблица = ДанныеФормыВЗначение(Строка.Правки, Тип("ТаблицаЗначений"));
	СогласованиеВРежимеЗамечанийHTMLСервер.СортироватьПравки(ПравкиТаблица, Строка.ТекстHTML);
	ЗначениеВДанныеФормы(ПравкиТаблица, Строка.Правки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОЗадаче(Команда)
	
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		
		КлючОткрытия = ДействиеЗадачи;
		
	Иначе
		
		КлючОткрытия = Новый Структура;
		КлючОткрытия.Вставить("Действие", Действие);
		КлючОткрытия.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
		
	КонецЕсли;
	
	ДополнительныеПараметрыОткрытия = Новый Структура;
	ДополнительныеПараметрыОткрытия.Вставить("ОтключитьСогласованиеВРежимеЗамечаний", Истина);
	
	РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(
		КлючОткрытия,
		ДополнительныеПараметрыОткрытия,
		Ложь);
	
КонецПроцедуры

&НаСервере
Функция КоличествоСвоихЗамечаний()
	
	ТекПользователь = ТекущийАвтор;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(Замечания.Ссылка), 0) КАК КолвоЗамечаний
		|ИЗ
		|	Справочник.Замечания КАК Замечания
		|ГДЕ
		|	Замечания.ВеткаОбработки = &ВеткаОбработки
		|	И Замечания.ИдентификаторАвтора = &ИдентификаторАвтора
		|	И Замечания.НомерЭтапа = &НомерЭтапа
		|	И Замечания.ПометкаУдаления = ЛОЖЬ
		|	И Замечания.ТипЗамечания = &ТипЗамечания");
	
	Запрос.УстановитьПараметр("ВеткаОбработки", ВеткаОбработки);
	Запрос.УстановитьПараметр("ИдентификаторАвтора", ТекущийИдентификаторАвтора);
	Запрос.УстановитьПараметр("НомерЭтапа", НомерИтерации);
	Запрос.УстановитьПараметр("ТипЗамечания", Перечисления.ТипыЗамечаний.Замечание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	Возврат Выборка.КолвоЗамечаний;
		
КонецФункции

&НаСервере
Функция СформироватьСтрокуКомментария()      
	
	РезультатВыполнения = "";
	
	ПредставленияПравок = Новый Массив;
	
	ТекПользователь = ТекущийАвтор;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Замечания.Ссылка КАК Ссылка,
		|	Замечания.ТипЗамечания КАК ТипЗамечания,
		|	Замечания.Замечание КАК Замечание,
		|	Замечания.Комментарий КАК Комментарий
		|ИЗ
		|	Справочник.Замечания КАК Замечания
		|ГДЕ
		|	Замечания.ВеткаОбработки = &ВеткаОбработки
		|	И Замечания.ИдентификаторАвтора = &ИдентификаторАвтора
		|	И Замечания.НомерЭтапа = &НомерЭтапа
		|	И Замечания.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ВеткаОбработки", ВеткаОбработки);
	Запрос.УстановитьПараметр("ИдентификаторАвтора", ТекущийИдентификаторАвтора);
	Запрос.УстановитьПараметр("НомерЭтапа", НомерИтерации);
	
	Замечания = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска = Новый Структура("ТипЗамечания", Неопределено);
	
	// Замечания.
	СтруктураПоиска.ТипЗамечания = Перечисления.ТипыЗамечаний.Замечание;
	ЗамечанияСтроки = Замечания.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Замечание Из ЗамечанияСтроки Цикл 
		ПредставленияПравок.Добавить(
			РаботаСВизамиСогласования.ПредставлениеЗамечания(Замечание));
	КонецЦикла;
	
	// Комментарии.
	СтруктураПоиска.ТипЗамечания = Перечисления.ТипыЗамечаний.Комментарий;
	КомментарииСтроки = Замечания.НайтиСтроки(СтруктураПоиска);
	
	ВыделятьКомментарий = Истина;
	
	Для Каждого Комментарий Из КомментарииСтроки Цикл 
		ПредставленияПравок.Добавить(
			РаботаСВизамиСогласования.ПредставлениеЗамечания(Комментарий, ВыделятьКомментарий));
	КонецЦикла;
	
	Если ПредставленияПравок.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПредставленияПравок, "");
		РезультатВыполнения = СтрСоединить(ПредставленияПравок, Символы.ПС);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПолучитьЧислоЗамечаний(
	Подзадача, ДействиеЗадачи, НомерИтерации)
	
	ТекПользователь = ТекущийАвтор;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(Замечания.Ссылка), 0) КАК КолвоЗамечаний
		|ИЗ
		|	Справочник.Замечания КАК Замечания
		|ГДЕ
		|	Замечания.ВеткаОбработки = &ВеткаОбработки
		|	И Замечания.ИдентификаторАвтора = &ИдентификаторАвтора
		|	И Замечания.НомерЭтапа = &НомерЭтапа
		|	И Замечания.ПометкаУдаления = ЛОЖЬ
		|	И Замечания.ТипЗамечания = &ТипЗамечания");
	
	ТекВеткаОбработки = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(Подзадача);
	Запрос.УстановитьПараметр("ВеткаОбработки", ТекВеткаОбработки);
	Запрос.УстановитьПараметр("ИдентификаторАвтора", ДействиеЗадачи.УникальныйИдентификатор());
	Запрос.УстановитьПараметр("НомерЭтапа", НомерИтерации);
	Запрос.УстановитьПараметр("ТипЗамечания", Перечисления.ТипыЗамечаний.Замечание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	Возврат Выборка.КолвоЗамечаний;
		
КонецФункции

&НаСервере
Функция СоздатьТаблицуДляПодсветки()
	
	ПравкиТаблица = Новый ТаблицаЗначений;
	
	КЧ = Новый КвалификаторыЧисла(10, 0);
	ТипЧисло = Новый ОписаниеТипов("Число",,, КЧ);
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ПравкиТаблица.Колонки.Добавить("ИдНачала", ТипЧисло);
	ПравкиТаблица.Колонки.Добавить("ИдКонца", ТипЧисло);
	ПравкиТаблица.Колонки.Добавить("Отработано", ТипБулево);
	ПравкиТаблица.Колонки.Добавить("ЗамечаниеИнициатора", ТипБулево);
	ПравкиТаблица.Колонки.Добавить("ЭтоЗамечаниеWord", ТипБулево);
	ПравкиТаблица.Колонки.Добавить("ЭтоОтличиеОтШаблона", ТипБулево);
	ПравкиТаблица.Колонки.Добавить("ПозицияВHtml", ТипЧисло);
	ПравкиТаблица.Колонки.Добавить("ПозицияВHtmlКонец", ТипЧисло);
	ПравкиТаблица.Колонки.Добавить("СсылкиУтеряны", ТипБулево);
	ПравкиТаблица.Колонки.Добавить("НомерБлока", ТипЧисло);
	
	Возврат ПравкиТаблица;
	
КонецФункции	

&НаКлиенте
Процедура ПоказатьОтличияФайлаОтПредыдущейИтерации(Команда)
	
	ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("СправочникСсылка.Файлы") Тогда
		Возврат;
	КонецЕсли;
	
	СогласованиеВРежимеЗамечанийКлиент.ПоказатьОтличияФайлаОтПредыдущейИтерации(
		ТекущиеДанные.Ссылка, БизнесПроцесс, НомерИтерации, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПодсветитьПравки(Строка)
	
	ПравкиТаблица = СоздатьТаблицуДляПодсветки();
	
	ТекПользователь = ТекущийАвтор;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Замечания.ВладелецЗамечания КАК ВладелецЗамечания,
		|	Замечания.Документ КАК Документ,
		|	Замечания.Автоматическая КАК Автоматическая,
		|	Замечания.Автор КАК Автор,
		|	Замечания.ВерсияHTML КАК ВерсияHTML,
		|	Замечания.Дата КАК Дата,
		|	Замечания.ИдКонца КАК ИдКонца,
		|	Замечания.ИдНачала КАК ИдНачала,
		|	Замечания.Комментарий КАК Комментарий,
		|	Замечания.НаЧтоМеняем КАК НаЧтоМеняем,
		|	Замечания.НомерКартинки КАК НомерКартинки,
		|	Замечания.НомерЭтапа КАК НомерЭтапа,
		|	Замечания.Отработано КАК Отработано,
		|	Замечания.ВеткаОбработки КАК ВеткаОбработки,
		|	Замечания.СтатусПринятия КАК СтатусПринятия,
		|	Замечания.ЗамечаниеИнициатора КАК ЗамечаниеИнициатора,
		|	Замечания.ТипЗамечания КАК ТипЗамечания,
		|	Замечания.ЧтоМеняем КАК ЧтоМеняем,
		|	Замечания.ЭтоЗамечаниеWord КАК ЭтоЗамечаниеWord,
		|	Замечания.ЭтоОтличиеОтШаблона КАК ЭтоОтличиеОтШаблона,
		|	Замечания.ИмяПоля КАК ИмяПоля,
		|	Замечания.Номер КАК Номер,
		|	Замечания.ИдентификаторЭтапа КАК ИдентификаторЭтапа,
		|	Замечания.Цикл КАК Цикл,
		|	Замечания.НомерБлока КАК НомерБлока
		|ИЗ
		|	Справочник.Замечания КАК Замечания
		|ГДЕ
		|	Замечания.ВладелецЗамечания = &Владелец
		|	И Замечания.ВеткаОбработки В(&ДочерниеПроцессы)
		|	И Замечания.СсылкиУтеряны = ЛОЖЬ
		|	И Замечания.ПометкаУдаления = ЛОЖЬ");
	
	ФайлHTMLПараметр = Неопределено;
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Строка.Ссылка) Тогда
		ФайлHTMLПараметр = Строка.Ссылка;
	ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		Если ЗначениеЗаполнено(Строка.ФайлHTML) Тогда
			ФайлHTMLПараметр = Строка.ФайлHTML;
		Иначе	
			ФайлHTMLПараметр = Строка.Ссылка;
		КонецЕсли; 
	КонецЕсли; 
	НомерВерсии = -1;
	Если ТипЗнч(ФайлHTMLПараметр) = Тип("СправочникСсылка.Файлы") Тогда
		ТекВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлHTMLПараметр, "ТекущаяВерсия");
		НомерВерсии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекВерсия, "НомерВерсии");
	КонецЕсли;	
	Запрос.УстановитьПараметр("Владелец", ФайлHTMLПараметр);
	
	// Тут выделяем цветом фона и правки процесса верхнего уровня, и дочерних процессов
	
	ДочерниеПроцессыОтбор = ДочерниеВеткиОбработки();
	
	ДочерниеПроцессыОтбор.Добавить(ВеткаОбработки);
	Если ЭтоПодчиненка И ЗначениеЗаполнено(КорневойПроцесс) Тогда
		ДочерниеПроцессыОтбор.Добавить(КорневойПроцесс);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ДочерниеПроцессы", ДочерниеПроцессыОтбор);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗагрузитьПравку = Истина;
		ЭтоПравкаДочернегоПроцесса = Ложь;
		
		ЗагрузитьПравку = Истина;
		
		Если Выборка.ВеткаОбработки <> ВеткаОбработки Тогда
			ЭтоПравкаДочернегоПроцесса = Истина;
		КонецЕсли;
		
		Если Не ЭтоПравкаДочернегоПроцесса И Не Выборка.ЗамечаниеИнициатора 
			И (Не ПоказыватьПравкиДругихСогласующих И Выборка.Автор <> ТекПользователь) Тогда
			
			ЗагрузитьПравку = Ложь;
			
		КонецЕсли;	
		
		Если Не ЭтоПравкаДочернегоПроцесса  И Не Выборка.ЗамечаниеИнициатора И 
			Выборка.НомерЭтапа <> НомерИтерации Тогда // если =   то всегда загрузим
			
			Если ПоказыватьПравкиДругихЭтапов Тогда
				// все ок, загрузим - все этапы
			ИначеЕсли ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа Тогда
				Если Выборка.НомерЭтапа <> НомерИтерации - 1 Тогда
					ЗагрузитьПравку = Ложь;
				КонецЕсли;	
			Иначе	
				ЗагрузитьПравку = Ложь; // выключено и ПоказыватьПравкиДругихЭтапов и ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если ЭтоПодчиненка И Выборка.Процесс = КорневойПроцесс Тогда
			ЗагрузитьПравку = Ложь; // только правки ЭтоОтличиеОтШаблона видны - см ниже
		КонецЕсли;	
		
		Если Не ПоказыватьОтличияОтШаблона И Выборка.ЭтоОтличиеОтШаблона Тогда
			ЗагрузитьПравку = Ложь;
		КонецЕсли;	
		
		Если ПоказыватьОтличияОтШаблона И Выборка.ЭтоОтличиеОтШаблона Тогда
			ЗагрузитьПравку = Истина;
		КонецЕсли;	
		
		// эти правки всегда подсветим
		Если Выборка.ЭтоЗамечаниеWord Тогда
			
			ЗагрузитьПравку = Истина;
			
		КонецЕсли;	
		
		Если ЗагрузитьПравку Тогда
		
			НовСтрока = ПравкиТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
		
		КонецЕсли;
		
	КонецЦикла;	    
	
	Для Каждого Стр Из Правки Цикл
		Если Не ЗначениеЗаполнено(Стр.ВеткаОбработки) Тогда // подсветим те, кого еще нет в СУБД
			
			НовСтрока = ПравкиТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Стр);
			
		КонецЕсли;	
	КонецЦикла;	
	
	Строка.ТекстHTML = СогласованиеВРежимеЗамечанийHTMLСервер.ПодсветитьЦветомФонаПравки(
		ПравкиТаблица, Строка.ТекстHTMLПриОткрытии, НомерВерсии, НомерБлока - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПравкиДругихСогласующих(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьПравки();
		Модифицированность = Ложь;
	КонецЕсли;	
	
	ПоказыватьПравкиДругихСогласующих = Не ПоказыватьПравкиДругихСогласующих;
	
	НеПоказыватьПравкиДругихСогласующих = Не ПоказыватьПравкиДругихСогласующих;
	
	Элементы.ПравкиПоказатьПравкиДругихСогласующих.Пометка = ПоказыватьПравкиДругихСогласующих;
	
	ПеречитатьПравки();
	ПоказатьГалочкиКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПравкиПредыдущихЭтапов(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьПравки();
		Модифицированность = Ложь;
	КонецЕсли;	
	
	ПоказыватьПравкиДругихЭтапов = Истина;
	ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Ложь;
	НеПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Не ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа;
	
	ПеречитатьПравки();
	ПоказатьГалочкиКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПравкиТолькоОдногоПрошлогоЭтапа(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьПравки();
		Модифицированность = Ложь;
	КонецЕсли;	
	
	ПоказыватьПравкиДругихЭтапов = Ложь;
	ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Истина;
	НеПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Не ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа;
	
	ПеречитатьПравки();
	ПоказатьГалочкиКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоТекущиеПравки(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьПравки();
		Модифицированность = Ложь;
	КонецЕсли;	
	
	ПоказыватьПравкиДругихЭтапов = Ложь;
	ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Ложь;
	НеПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Не ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа;
	
	ПеречитатьПравки();
	ПоказатьГалочкиКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ИзменитьПравкуПодчиненных();
	
КонецПроцедуры

&НаКлиенте
Процедура Отказать(Команда)
	
	ЧислоВыделенных = Элементы.ПравкиПодчиненных.ВыделенныеСтроки.Количество();
	ЕстьПравкаЧужогоПроцесса = Ложь;
	
	Для Каждого ИдСтроки Из Элементы.ПравкиПодчиненных.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ПравкиПодчиненных.НайтиПоИдентификатору(ИдСтроки);
		ИспользуемПравку = Ложь;
		
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Отработано = Ложь Тогда
			ИспользуемПравку = Истина;
		КонецЕсли;	
		
		Если ИспользуемПравку Тогда
			
			Если ПоказыватьЗамечанияВсехПодчиненных Тогда
				Если ДочерниеПроцессы.НайтиПоЗначению(ТекущиеДанные.Процесс) = Неопределено Тогда // нет в прямых подчиненных
					ИспользуемПравку = Ложь; // пропустим
					ЕстьПравкаЧужогоПроцесса = Истина;
				КонецЕсли;		
			КонецЕсли;	
			
		КонецЕсли;		
		
		Если ИспользуемПравку Тогда
	
			ТекущиеДанные.Отработано = Истина;
			ТекущиеДанные.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.НеПринята");
			ТекущиеДанные.НомерКартинкиСтатуса = 2;
			
			//Элементы.ЗадачаВернутьНаДоработкуИсполнение.Видимость = Истина;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЧислоВыделенных = 1 И ЕстьПравкаЧужогоПроцесса Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Замечания подчиненных более низкого уровня можно только принять.'"));
		Возврат;
	КонецЕсли;	
	
	// пересчитаем ТекущийАвтор
	Если ЗначениеЗаполнено(ЗадачаСверхуТекущаяРоль) Тогда
		ОбновитьТекущийАвтор();
	КонецЕсли;	
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Принять(Команда)
	
	Для Каждого ИдСтроки Из Элементы.ПравкиПодчиненных.ВыделенныеСтроки Цикл
		
		ПринятьОднуПравку(ИдСтроки);
	
	КонецЦикла;
	
	// пересчитаем ТекущийАвтор
	Если ЗначениеЗаполнено(ЗадачаСверхуТекущаяРоль) Тогда
		ОбновитьТекущийАвтор();
	КонецЕсли;	
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПринятьОднуПравку(ИдСтроки)
	
	ТекущиеДанные = ПравкиПодчиненных.НайтиПоИдентификатору(ИдСтроки);
	Если ТекущиеДанные <> Неопределено 
		И (ТекущиеДанные.Отработано = Ложь
		Или (ТекущиеДанные.Отработано = Истина 
		И ТекущиеДанные.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.НеПринята"))) Тогда
		
		Если ЗначениеЗаполнено(ТекстHTML) Тогда
			
			ТекстHTMLНРег = НРег(ТекстHTML);
			
			ИДСтрока = Формат(ТекущиеДанные.ИдНачала, "ЧГ=0");
			СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
			ТекущиеДанные.ПозицияВHtml = СтрНайти(ТекстHTMLНРег, СтрокаПоиска);
			
			ИДСтрока = Формат(ТекущиеДанные.ИдКонца, "ЧГ=0");
			СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
			ТекущиеДанные.ПозицияВHtmlКонец = СтрНайти(ТекстHTMLНРег, СтрокаПоиска);
			
		КонецЕсли;	
		
		СтрокаКопия = Правки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКопия, ТекущиеДанные);
		СтрокаКопия.РеальныйАвтор = СтрокаКопия.Автор;
		СтрокаКопия.Автор = ТекущийАвтор; //ПользователиКлиентСервер.ТекущийПользователь();
		СтрокаКопия.ИдентификаторАвтора = ТекущийИдентификаторАвтора;
		СтрокаКопия.АвторПредставление = ТекущийАвторПредставление;
		СтрокаКопия.УникальныйИдентификатор = Новый УникальныйИдентификатор;
		СтрокаКопия.ВеткаОбработки = ВеткаОбработки;
		СтрокаКопия.НомерЭтапа = НомерИтерации;
		СтрокаКопия.ПравкаДругогоЭтапа = Ложь;
		СтрокаКопия.СделанаТекущимПользователем = Истина;
		СтрокаКопия.СтатусПринятия = Неопределено;
		СтрокаКопия.НомерКартинкиСтатуса = 0;
	
		ТекущиеДанные.Отработано = Истина;
		ТекущиеДанные.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята");
		ТекущиеДанные.НомерКартинкиСтатуса = 1;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Команда)
	
	ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Ссылка = ТекущиеДанные.Ссылка;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		ФайлHTML = ТекущиеДанные.ФайлHTML;
		Если ЗначениеЗаполнено(ФайлHTML) Тогда
			ДополнительныеПараметры = Новый Структура("Ссылка", Ссылка);
			ПослеОткрытьФайлДляПросмотра = Новый ОписаниеОповещения("ПослеОткрытьФайлДляПросмотра", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьПредупреждение(ПослеОткрытьФайлДляПросмотра ,НСтр("ru = 'Будет показана версия без учета последних замечаний'"));
			Возврат;
		КонецЕсли;	
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено);
			
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытьФайлДляПросмотра(ДополнительныеПараметры) Экспорт 
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Ссылка, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры	

&НаКлиенте
Процедура Комментарий(Команда)
		
	ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	HTMLДокумент = Элементы.ТекстHTML.Документ; 
	
	ВыделенныйФрагментHtml = "";
    ВыделенныйФрагмент = HTMLДокумент.getSelection();
    container = HTMLДокумент.createElement("div");
	
	Для i = 0 По ВыделенныйФрагмент.rangeCount - 1 Цикл
	    container.appendChild(ВыделенныйФрагмент.getRangeAt(i).cloneContents());
	КонецЦикла;
	
    ВыделенныйФрагментHtml = container.innerHTML;
	
	ВыделенныйТекст = РаботаС_HTML.ПолучитьТекстИзHTML_IE(ВыделенныйФрагментHtml);
		
	Если ВыделенныйТекст = "" И ВыделенныйФрагментHtml <> "" Тогда
		ВыделенныйТекст =  container.innerText;
	КонецЕсли;	
		
	ПоказыватьПолеHTML = ЗначениеЗаполнено(ТекущиеДанные.ФайлHTML);
	
	Если ПоказыватьПолеHTML И Не ЗначениеЗаполнено(ВыделенныйТекст) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Выделите текст, к которому будет привязан комментарий.'"));
		Возврат;
	КонецЕсли;	
	
	ЕстьЗначимыеСимволыВВыделении = СогласованиеВРежимеЗамечанийHTMLКлиент.ЕстьЗначимыеСимволы(ВыделенныйТекст);
	Если ПоказыватьПолеHTML И Не ЕстьЗначимыеСимволыВВыделении Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Выделите хотя бы одно слово, к которому будет привязан комментарий.'"));
		Возврат;
		
	КонецЕсли;	
	
	СведенияОВыделенномФрагменте = СведенияОВыделенномФрагменте(); 
	СведенияОВыделенномФрагменте.ИсходныйФрагмент = ВыделенныйФрагмент;
	СведенияОВыделенномФрагменте.Текст = ВыделенныйТекст;
	СведенияОВыделенномФрагменте.ВыделенныйФрагментHtml = ВыделенныйФрагментHtml;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеКомментарий", ЭтотОбъект, СведенияОВыделенномФрагменте);
	
	ПараметрыОткрытияФормы = Новый Структура("Описание, ОбластьПрименения, ПоказыватьПолеHTML, ТипЗамечания", 
		НСтр("ru='Введите комментарий'"), 
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.СогласованиеВРежимеЗамечанийСогласующий"),
		ПоказыватьПолеHTML,
		ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Комментарий")
		);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВводаТекстаМногострочного",
		ПараметрыОткрытияФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеКомментарий(НовыйТекст, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(НовыйТекст) = Тип("Строка") Тогда
		
		Если ПустаяСтрока(НовыйТекст) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Укажите комментарий.'"));
			Возврат;
		КонецЕсли;	
		
		ТекстСтруктура = Новый Структура("ПрежнийТекст, НовыйТекст", "", "");
		
		НайтиПозициюВыделенияHTMLИДобавитьПравку(ТекстСтруктура, 
			ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Комментарий"), НовыйТекст, ДополнительныеПараметры);
			
		ПравкиКоличество = Правки.Количество();	
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Замечание(Команда)
	
	ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	HTMLДокумент = Элементы.ТекстHTML.Документ; 
	
	ВыделенныйФрагментHtml = "";
    ВыделенныйФрагмент = HTMLДокумент.getSelection();
    container = HTMLДокумент.createElement("div");
	
	Для i = 0 По ВыделенныйФрагмент.rangeCount - 1 Цикл
	    container.appendChild(ВыделенныйФрагмент.getRangeAt(i).cloneContents());
	КонецЦикла;
	
    ВыделенныйФрагментHtml = container.innerHTML;
	
	ВыделенныйТекст = РаботаС_HTML.ПолучитьТекстИзHTML_IE(ВыделенныйФрагментHtml);

	Если ВыделенныйТекст = "" И ВыделенныйФрагментHtml <> "" Тогда
		ВыделенныйТекст =  container.innerText;
	КонецЕсли;	

	ПоказыватьПолеHTML = ЗначениеЗаполнено(ТекущиеДанные.ФайлHTML);
	
	Если ПоказыватьПолеHTML И Не ЗначениеЗаполнено(ВыделенныйТекст) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Выделите текст, к которому будет привязано замечание.'"));
		Возврат;
	КонецЕсли;	
	
	ЕстьЗначимыеСимволыВВыделении = СогласованиеВРежимеЗамечанийHTMLКлиент.ЕстьЗначимыеСимволы(ВыделенныйТекст);
	Если ПоказыватьПолеHTML И Не ЕстьЗначимыеСимволыВВыделении Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Выделите хотя бы одно слово, к которому будет привязано замечание.'"));
		Возврат;
		
	КонецЕсли;	
	
	СведенияОВыделенномФрагменте = СведенияОВыделенномФрагменте();
	СведенияОВыделенномФрагменте.ИсходныйФрагмент = ВыделенныйФрагмент;
	СведенияОВыделенномФрагменте.Текст = ВыделенныйТекст;
	СведенияОВыделенномФрагменте.ВыделенныйФрагментHtml = ВыделенныйФрагментHtml;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеЗамечание", ЭтотОбъект, СведенияОВыделенномФрагменте);
	
	ПараметрыОткрытияФормы = Новый Структура("Описание, ОбластьПрименения, ПоказыватьПолеHTML, ТипЗамечания", 
		НСтр("ru='Введите замечание'"), 
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.СогласованиеВРежимеЗамечанийСогласующий"),
		ПоказыватьПолеHTML,
		ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание")
		);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВводаТекстаМногострочного",
		ПараметрыОткрытияФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗамечание(НовыйТекст, СведенияОВыделенномФрагменте) Экспорт
	
	Если ТипЗнч(НовыйТекст) = Тип("Строка") Тогда
		
		Если ПустаяСтрока(НовыйТекст) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Укажите замечание.'"));
			Возврат;
		КонецЕсли;	
		
		ТекстСтруктура = Новый Структура("ПрежнийТекст, НовыйТекст", "", "");
		
		НайтиПозициюВыделенияHTMLИДобавитьПравку(
			ТекстСтруктура, 
			ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание"),
			НовыйТекст,
			СведенияОВыделенномФрагменте);
			
		ПравкиКоличество = Правки.Количество();	
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаСогласовано(Команда)
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьПравки();
	НажатоСогласовано = Истина;
	
	КолвоПравок = КоличествоНеотработанныхЗамечанийПодчиненных();
	Если КолвоПравок <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗадачаСогласованоПослеВопросаОПравкахПодчиненных", ЭтотОбъект, Параметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'У вас есть %1 неотработанных замечаний подчиненных. 
			|Продолжить?'"), КолвоПравок);
			
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить("ПринятьВсе", НСтр("ru = 'Принять все'"));
		Кнопки.Добавить("ОтказатьВсе", НСтр("ru = 'Отказать все'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, ,
			КодВозвратаДиалога.Отмена);
			
		Возврат;
		
	КонецЕсли;	
		
	ЗадачаСогласованоДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаСогласованоПослеВопросаОПравкахПодчиненных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	Если Результат = "ПринятьВсе" Тогда 
		ПринятьВсеНепринятыеПравкиПодчиненных();
	ИначеЕсли Результат = "ОтказатьВсе" Тогда 
		ОтказатьВсеНепринятыеПравкиПодчиненных();
	КонецЕсли;
	
	ЗадачаСогласованоДалее(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаСогласованоДалее()
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьПравки();
	
	Если КоличествоСвоихЗамечаний() <> 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'По документу есть замечания. Документ не может быть согласован.'"));
		Возврат;
	КонецЕсли;	
	
	КомментарийВСообщении = СформироватьСтрокуКомментария();

	РаботаСЗадачамиКлиент.СохранитьРезультатДействия(
		ДействиеЗадачи,
		КомментарийВСообщении,
		"", //версия
		Истина,
		Ложь,
		ЭтотОбъект);
	
	УчастникСтруктура = Новый Структура("Участник, ФункцияУчастника, ИдентификаторУчастника",
		ТекущийАвтор, 
		ПредопределенноеЗначение("Перечисление.ФункцииУчастниковСогласования.Согласующий"),
		ИдентификаторУчастника);
		
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("РезультатСогласования",
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано"));
		
	ДействияКлиент.ВыполнитьДействиеИзФормыСогласованияВРежимеЗамечаний(
		Действие, 
		УчастникСтруктура, 
		ПараметрыВыполнения, 
		Документ,
		ЭтотОбъект);
		
	ОтработатьВместоРобота();	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеСогласовано(Команда)
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьПравки();             
	НажатоСогласовано = Ложь;
	
	КолвоПравок = КоличествоНеотработанныхЗамечанийПодчиненных();
	Если КолвоПравок <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗадачаНеСогласованоПослеВопросаОПравкахПодчиненных", ЭтотОбъект, Параметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'У вас есть %1 неотработанных замечаний подчиненных. 
			|Продолжить?'"), КолвоПравок);
			
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить("ПринятьВсе", НСтр("ru = 'Принять все'"));
		Кнопки.Добавить("ОтказатьВсе", НСтр("ru = 'Отказать все'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, ,
			КодВозвратаДиалога.Отмена);
			
			Возврат;
		
	КонецЕсли;	
		
	ЗадачаНеСогласованоДалее();	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеСогласованоПослеВопросаОПравкахПодчиненных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	Если Результат = "ПринятьВсе" Тогда 
		ПринятьВсеНепринятыеПравкиПодчиненных();
	ИначеЕсли Результат = "ОтказатьВсе" Тогда 
		ОтказатьВсеНепринятыеПравкиПодчиненных();
	КонецЕсли;
	
	ЗадачаНеСогласованоДалее(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеСогласованоДалее()
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьПравки();
	
	Если КоличествоСвоихЗамечаний() = 0 Тогда
		
		ЗаголовокПредупреждения = НСтр("ru = 'Визу ""Не согласовано"" можно поставить только указав замечания.
			|Введите замечания и еще раз нажмите на ""Не согласовано"".'");
		
		ПоказатьПредупреждение(, ЗаголовокПредупреждения);
		Возврат;
	КонецЕсли;	
	
	КомментарийВСообщении = СформироватьСтрокуКомментария();
	
	РаботаСЗадачамиКлиент.СохранитьРезультатДействия(
		ДействиеЗадачи,
		КомментарийВСообщении,
		"", //версия
		Истина,
		Ложь,
		ЭтотОбъект);
	
	УчастникСтруктура = Новый Структура("Участник, ФункцияУчастника, ИдентификаторУчастника",
		ТекущийАвтор, 
		ПредопределенноеЗначение("Перечисление.ФункцииУчастниковСогласования.Согласующий"),
		ИдентификаторУчастника);
		
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("РезультатСогласования",
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано"));
		
	ДействияКлиент.ВыполнитьДействиеИзФормыСогласованияВРежимеЗамечаний(
		Действие, 
		УчастникСтруктура, 
		ПараметрыВыполнения, 
		Документ,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПослеВыполненияЗадачи(ЗадачиМнеТекущаяЗадача)
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выполнение:'"),
		ПолучитьНавигационнуюСсылку(ЗадачиМнеТекущаяЗадача),
		Строка(ЗадачиМнеТекущаяЗадача),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("ЗадачаИзменена", ЗадачиМнеТекущаяЗадача, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачу(ЗадачиМнеТекущаяЗадача, ПараметрыЗаписи = Неопределено)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполнено(Команда) 
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьПравки();
	
	КолвоПравок = КоличествоНеотработанныхЗамечанийПодчиненных();
	Если КолвоПравок <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗадачаИсполненоПослеВопросаОПравкахПодчиненных", ЭтотОбъект, Параметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'У вас есть %1 неотработанных замечаний подчиненных. 
			|Продолжить?'"), КолвоПравок);
			
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить("ПринятьВсе", НСтр("ru = 'Принять все'"));
		Кнопки.Добавить("ОтказатьВсе", НСтр("ru = 'Отказать все'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, ,
			КодВозвратаДиалога.Отмена);
			
			Возврат;
		
	КонецЕсли;	
	
	ЗадачаИсполненоДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполненоПослеВопросаОПравкахПодчиненных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	Если Результат = "ПринятьВсе" Тогда 
		ПринятьВсеНепринятыеПравкиПодчиненных();
	ИначеЕсли Результат = "ОтказатьВсе" Тогда 
		ОтказатьВсеНепринятыеПравкиПодчиненных();
	КонецЕсли;
	
	ЗадачаИсполненоДалее(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполненоДалее() 
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьПравки();
	
	КомментарийВСообщении = СформироватьСтрокуКомментария();

	РаботаСЗадачамиКлиент.СохранитьРезультатДействия(
		ДействиеЗадачи,
		КомментарийВСообщении,
		"", //версия
		Истина,
		Ложь,
		ЭтотОбъект);

	МассивДействий = Новый Массив;
	МассивДействий.Добавить(ДействиеЗадачи);
	
	РезультатДействия = ПредопределенноеЗначение(
		"Справочник.РезультатыДействийЗадач.Выполнена");
	
	РаботаСЗадачамиКлиент.ВыполнитьДействиеЗадачи(
		МассивДействий, РезультатДействия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнение(Команда)
	
	ТекущиеДанные = Элементы.СтатусЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	РаботаСЗадачамиКлиент.ВернутьНаДоработку(ТекущиеДанные.ДействиеЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнение_Реализация()
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров(Результат, Параметры) Экспорт

	Если Результат = Неопределено
		Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		
		Возврат;
	КонецЕсли;
	
	Результат.Удалить("КодВозврата");
	
	ИдентификаторБлокировкиПроцесса = Параметры.ИдентификаторБлокировкиПроцесса;
	
	ЗадачаТекущая = ПроцессыИЗадачиДочерние[0].Задача;
	ВыполнитьЗадачу(ЗадачаТекущая, Результат);
	
	ОповеститьПослеВыполненияЗадачи(ЗадачаТекущая);
	
	ПроцессыИЗадачиДочерние.Удалить(0);
	Если ПроцессыИЗадачиДочерние.Количество() <> 0 Тогда
		
		ЗадачаВернутьНаДоработкуИсполнение_Реализация();
		
	Иначе
		
		Закрыть();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьПодчиненным(Команда)
	
	МассивИсполнителей = ПолучитьПрежнихИсполнителейПодзадач();	
	
	ПараметрКоманды = ДействиеЗадачи;
	Если Не ЗначениеЗаполнено(ПараметрКоманды) Тогда
		ПараметрКоманды = ДействиеЗадачиПроцесса;
	КонецЕсли;	
	
	ОткрытьФорму(
		"Документ.Задача.ФормаОбъекта",
		Новый Структура("Основание, МассивИсполнителей, Заголовок", 
			ПараметрКоманды, МассивИсполнителей, ИмяПодзадачи));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПрежнихИсполнителейПодзадач()

	МассивИсполнителей = Новый Массив;
	
	Если НомерИтерации = 1 Тогда
		Возврат МассивИсполнителей;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ТекДействиеЗадачи = ДействиеЗадачи;
	Иначе
		ТекДействиеЗадачи = ДействияВызовСервера.ДействиеЗадачиПоДействиюИИдентификатору(
				Действие, ИдентификаторУчастника);
	КонецЕсли;		
	
	НомерИтерацииДляЗапроса = НомерИтерации - 1; // предыдущая итерация
	
	Подзадачи = ИнтеграцияЗадач.ПодзадачиПоДействию(ТекДействиеЗадачи, НомерИтерацииДляЗапроса);
	Для Каждого ПодзадачаСтрока Из Подзадачи Цикл
		
		ДействияЗадач = ИнтеграцияЗадач.ДействияЗадачПоПодзадаче(ПодзадачаСтрока.Подзадача);
		
		Для Каждого ДействияЗадачСтрока Из ДействияЗадач Цикл
			
			ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
				ДействияЗадачСтрока.СостояниеУчастникаЗадачи);
				
			Выполнено = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(ВидСостоянияУчастниковЗадач);
			
			Если РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(ДействияЗадачСтрока.ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;		
			
			Если Выполнено Тогда
				Если МассивИсполнителей.Найти(ДействияЗадачСтрока.Участник) = Неопределено Тогда
					МассивИсполнителей.Добавить(ДействияЗадачСтрока.Участник);
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат МассивИсполнителей;
	
КонецФункции		

&НаКлиенте
Процедура ПоказатьДляСтаройВерсииФайла(Команда)
	
	ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанныеФайлы = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;
	Если ТекущиеДанныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанныеФайлы.ВерсияHTML) Тогда
		Возврат;
	КонецЕсли;	
	
	// открыть для просмотра только одной правки - в старой версии HTML файла
	ПараметрыОткрытияФормы = Новый Структура(
		"Документ, ВерсияHTML, УникальныйИдентификатор", 
		ТекущиеДанныеФайлы.ВладелецФайла, ТекущиеДанные.ВерсияHTML, ТекущиеДанные.УникальныйИдентификатор);
		
	ОткрытьФорму("ОбщаяФорма.СогласованиеВРежимеЗамечанийСтаройВерсииФайла", ПараметрыОткрытияФормы);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог1(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		ПараметрыВыполнения.ПолноеИмяФайла1 = Результат.ПолноеИмяФайла;
		Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог2", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
			ПараметрыВыполнения.ДанныеФайла2, ПараметрыВыполнения.ПолноеИмяФайла2, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог2(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.ФайлПолучен Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыВыполнения.ПолноеИмяФайла2 = Результат.ПолноеИмяФайла;
	
	ПутьКФайлу1 = "";
	ПутьКФайлу2 = "";
	
	Если ПараметрыВыполнения.ДанныеФайла1.НомерВерсии < ПараметрыВыполнения.ДанныеФайла2.НомерВерсии Тогда
		ПутьКФайлу1 = ПараметрыВыполнения.ПолноеИмяФайла1;
		ПутьКФайлу2 = ПараметрыВыполнения.ПолноеИмяФайла2;
	Иначе
		ПутьКФайлу1 = ПараметрыВыполнения.ПолноеИмяФайла2;
		ПутьКФайлу2 = ПараметрыВыполнения.ПолноеИмяФайла1;
	КонецЕсли;
	
	СтруктураФайла = СогласованиеВРежимеЗамечанийКлиент.СравнитьWordИПолучитьHTML(
		ПутьКФайлу1,
		ПутьКФайлу2,
		ТекущиеДанные.Ссылка,
		ТекущиеДанные.ФайлHTML,
		ТекущиеДанные.ВладелецФайла,
		ТекущиеДанные.ИмяБезРасширения,
		ТекущиеДанные.Расширение,
		ЭтаФорма.УникальныйИдентификатор);
	
	ТекстПояснения =
		НСтр("ru = 'Выполняется создание на сервере HTML файлов.
		|Пожалуйста, подождите...'");
	Состояние(ТекстПояснения);
	
	ПослеСохраненияHTML(СтруктураФайла, Элементы.Файлы.ТекущаяСтрока);
	
	ПеречитатьПравки();
	Элементы.ГруппаСтраницыHTML.ТекущаяСтраница = Элементы.СтраницаHTML;
	
	Если ВыполнитьЗадачуПослеВозвратаВРежимЗамечаний Тогда
		ВыполнитьЗадачуПослеВозвратаВРежимЗамечаний = Ложь;
		ЗадачаСогласованоДалее();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеСохраненияHTML(СтруктураФайла, ТекущаяСтрока)
	
	ТекущиеДанные = Файлы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ПравкиТаблица = РеквизитФормыВЗначение("Правки");
	ПравкиТаблица.Очистить(); // нам нужна только таблица с нужными колонками
	
	// Тут вызов на сервер, создаем версию HTML Файла.
	СогласованиеВРежимеЗамечанийСервер.СоздатьВерсиюHTMLФайла(СтруктураФайла, ПравкиТаблица);
	
	ВерсияHTMLТекущая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущиеДанные.ФайлHTML, "ТекущаяВерсия");
	
	// Запишем правки
	УстановитьПривилегированныйРежим(Истина);
	
	СогласованиеВРежимеЗамечанийСервер.ОчиститьПозицииУПрежнихПравок(ТекущиеДанные.ФайлHTML, Документ);
	
	СогласованиеВРежимеЗамечанийСервер.ЗаписатьПравкиИзWord(ПравкиТаблица,
		ТекущиеДанные.ФайлHTML, Документ, БизнесПроцесс, ВерсияHTMLТекущая, НомерИтерации);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтличияОтПредыдущего(Команда)

	СогласованиеВРежимеЗамечанийКлиент.ПоказатьОтличияОтПредыдущего(
		Документ, СвязанныйДокумент, УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура Страница1(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница2(Команда)      
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница3(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница4(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте         
Процедура Страница5(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	      

&НаКлиенте
Процедура Страница6(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	  

&НаКлиенте
Процедура Страница7(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	 

&НаКлиенте
Процедура Страница8(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	   

&НаКлиенте
Процедура Страница9(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Назад(Команда)
	
	НомерБлока = НомерБлока - 1;
	ЧастьВыбор(НомерБлока);
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	НомерБлока = НомерБлока + 1;
	ЧастьВыбор(НомерБлока);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабПлюс(Команда)
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб + 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабМинус(Команда)
	
	Если Элементы["ДокументPdfПоле"].Масштаб <= 10 Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб - 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотЛево(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация - 90;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотПраво(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация + 90;

КонецПроцедуры

&НаКлиенте
Процедура СменитьТипНаЗамечание(Команда)
	
	ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	// только свои правки можно удалить
	Если ТекущиеДанные.ИдентификаторАвтора <> ТекущийИдентификаторАвтора Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Можно менять только свои замечания.'"));
		Возврат;
	КонецЕсли;	

	// только правки тек этапа можно удалить
	Если ТекущиеДанные.ПравкаДругогоЭтапа Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Можно менять только замечания текущего этапа.'"));
		Возврат;
	КонецЕсли;	
	
	Модифицированность = Истина; 
	
	Если ТекущиеДанные.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание") Тогда
		ТекущиеДанные.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Комментарий");
	ИначеЕсли ТекущиеДанные.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Комментарий") Тогда
		ТекущиеДанные.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание");
	КонецЕсли;	
	
	Если ТекущиеДанные.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Комментарий") Тогда
		ТекущиеДанные.НомерКартинки = 3;
	ИначеЕсли ТекущиеДанные.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание") Тогда
		ТекущиеДанные.НомерКартинки = 4;
	КонецЕсли;	
	
	Элементы.ПравкиКонтекстноеМенюСменитьТипНаКомментарий.Видимость 
		= (ТекущиеДанные.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание"));
	Элементы.ПравкиКонтекстноеМенюСменитьТипНаЗамечание.Видимость 
		= (ТекущиеДанные.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Комментарий"));
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыбор(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СтраницаВыборЗавершение", ЭтотОбъект);
	ОбзорФайловКлиент.ВыбратьСтраницуДинамическогоСписка(
		ЭтотОбъект,
		Команда,
		НомерБлока,
		ВсегоПорцийПредпросмотра,
		ОповещениеОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд_Файлы

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Ссылка = Элемент.ТекущиеДанные.Ссылка;
	Расширение = Элементы.Файлы.ТекущиеДанные.Расширение;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		Файл = Ссылка;
		
		Если Не СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Расширение) Тогда
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, 
				Неопределено, 
				ЭтаФорма.УникальныйИдентификатор, 
				Неопределено);
				
			РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, 
				ДанныеФайла, УникальныйИдентификатор); 
			Возврат;	
		КонецЕсли;	
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элемент.ТекущиеДанные.Ссылка = ТекущийФайл Тогда // та же строка, ничего не делаем
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элемент.ТекущиеДанные;        
	
	Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;    
	ТекущееЗамечаниеИД = Неопределено;
	
	ПодключитьОбработчикОжидания("ОбработчикФайлыПриАктивизацииСтроки", 0.5, Истина);
	
	НастроитьДоступностьКомандыПоказатьОтличияФайлОтПредыдущейИтерации();

	Если ИспользоватьПредпросмотрФайлов Тогда

		ПоказыватьПолеHTML = ЗначениеЗаполнено(ТекущиеДанные.ФайлHTML);
		ПревышенРазмер = Ложь;
		
		Если Не ПоказыватьПолеHTML И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
					
			Если ОбзорФайловКлиент.ЭтоФайлСДолгойОбработкой(ТекущиеДанные.Расширение)
				И Не ТекущиеДанные.ПредпросмотрЕстьВБазе Тогда
					
				ТекстHTML = ОбзорФайловКлиент.HTMLПредставлениеСДолгойОбработкой();
				Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
				Элементы.ПереключениеСтраниц.Видимость = Ложь;
				
			КонецЕсли;		

		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбзорТекущегоФайла()
	
	Если Не ИспользоватьПредпросмотрФайлов Тогда
		
		ТекстHTML = "<html><body>
		|<p>Отключена настройка предпросмотра файлов.</p>
		|</body></html>";
		
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;     
	
	Элементы.ПереключениеСтраниц.Видимость = Ложь;
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml; 
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	ТекущийФайлСтрока = ТекущиеДанные.Ссылка;
	РедактируетТекущийПользователь = Ложь;
	ЭтоДокумент = ДелопроизводствоКлиентСервер.ЭтоДокумент(ТекущийФайлСтрока);
	
	Если ЭтоДокумент Тогда
		
		ДанныеМиникарточки = ОбзорСпискаДокументов.ПолучитьДанныеМиникарточки(ТекущийФайлСтрока);
		ТекстHTML = ДанныеМиникарточки.Обзор;
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;    
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;	
	
	Если РедактируетТекущийПользователь Тогда
		 
		ТекстHTML = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;    
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		
	Иначе 
		
		Если ЗначениеЗаполнено(ТекущийФайлСтрока) Тогда  
			
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла(); 
			ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайлСтрока, 
				ПараметрыHTMLПредставление,
				ДокументPDF);
				
			НомерБлока = 1;	
			ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
			ОбновитьКнопкиДинамическогоСпискаКлиент();
				
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ТекстHTML);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
			
			Если ДокументPDF = Неопределено Тогда
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Иначе
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
				ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
				Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
			КонецЕсли;
			
			ТекущиеДанные.ПредпросмотрЕстьВБазе = Истина;
				
		Иначе
			ТекстHTML = "<html><body></body></html>";
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикФайлыПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;
	
	ТекущаяСтрока = Элементы[ИмяТаблицыФайлов()].ТекущаяСтрока;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтоДополнительныеРеквизиты = ТекущиеДанные.ЭтоДополнительныеРеквизиты;
	
	// та же строка, ничего не делаем
	Если ТекущиеДанные.Ссылка = ТекущийФайл И ЗначениеЗаполнено(ТекущийФайл) Тогда
		Возврат;
	КонецЕсли;	
	
	ПоказыватьПолеHTML = ЗначениеЗаполнено(ТекущиеДанные.ФайлHTML);
	ПревышенРазмер = Ложь; 
	
	НомерБлока = 1;
	ВсегоПорцийПредпросмотра = 1;
	ОбновитьКнопкиДинамическогоСписка();
	
	Если ПоказыватьПолеHTML И ТекущиеДанные.ФайлHTMLРазмер > 500000 Тогда // 500 кб
		Состояние(НСтр("ru = 'Подождите, на медленном компьютере может открываться 1-2 минуты...'"));
	КонецЕсли;	
	
	Элементы.ПравкиКонтекстноеМенюПоказатьДляСтаройВерсииФайла.Доступность
	 = ЗначениеЗаполнено(ТекущиеДанные.ВерсияHTML);
	
	ОбработчикФайлыПриАктивизацииСтрокиСервер(ТекущаяСтрока);
	
	ТекущийФайл = ТекущиеДанные.Ссылка;
	ТекущийФайлРасширение = ТекущиеДанные.Расширение;
	ЭтоДокумент = ДелопроизводствоКлиентСервер.ЭтоДокумент(ТекущийФайл);
	
	Если ЭтоДополнительныеРеквизиты Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДополнительныеРеквизиты;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницаДополнительныеРеквизиты.Видимость = Истина;
		Элементы.ГруппаСтраницыHTML.Видимость = Ложь; 
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
	
	ИначеЕсли ПоказыватьПолеHTML И Не ТекущиеДанные.ЗанятМной Тогда
		
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницаДополнительныеРеквизиты.Видимость = Ложь;
		Элементы.ГруппаСтраницыHTML.Видимость = Истина;
		
		Элементы.ОткрытьФайлДляПросмотра.Видимость = Ложь;
		
		Элементы.ГруппаСтраницыHTML.ТекущаяСтраница = Элементы.СтраницаHTML;
		
		// 2 - создан по шаблону и идентичен по шаблону и есть правила автозаполнения
		РежимТолькоРеквизиты = (ТекущиеДанные.ОтличаетсяОтШаблона = 2) И ТекущиеДанные.ЕстьПравилаАвтозаполнения;
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		
	Иначе	
		
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницаДополнительныеРеквизиты.Видимость = Ложь;
		Элементы.ГруппаСтраницыHTML.Видимость = Истина;
		
		Элементы.ГруппаСтраницыHTML.ТекущаяСтраница = Элементы.СтраницаHTML;
		
		Элементы.ОткрытьФайлДляПросмотра.Видимость = Истина;
		
		Если ПревышенРазмер Тогда
			
			ТекстHTML = "<html><body>
			|<font color=""CornflowerBlue"">
			|<p>Файл HTML имеет слишком большой размер и не может быть показан. Просматривайте его в MS Word.</p>
			|</font>
			|</body></html>";
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			
		Иначе
			ПоказатьОбзорТекущегоФайла();
		КонецЕсли;	
		
	КонецЕсли;	
	
	Элементы.ПравкиПринять.Доступность = (ПравкиПодчиненных.Количество() <> 0);
	Элементы.ПравкиОтказать.Доступность = (ПравкиПодчиненных.Количество() <> 0);
	
	ПравкиПодчиненныхКоличество = ПравкиПодчиненных.Количество();
	ПравкиКоличество = Правки.Количество();
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработчикФайлыПриАктивизацииСтрокиСервер(ТекущаяСтрока)
	
	// запоминаем для предыдущей строки - только Правки и ПравкиУдаленные.
	Для Каждого Строка Из Файлы Цикл
		
		Если Строка.Ссылка = ТекущийФайл Тогда // нашли
			
			ПравкиТаблица = РеквизитФормыВЗначение("Правки");
			ЗначениеВДанныеФормы(ПравкиТаблица, Строка.Правки);
			
			ПравкиУдаленныеТаблица = РеквизитФормыВЗначение("ПравкиУдаленные");
			ЗначениеВДанныеФормы(ПравкиУдаленныеТаблица, Строка.ПравкиУдаленные);
			
			ПравкиПодчиненныхТаблица = РеквизитФормыВЗначение("ПравкиПодчиненных");
			ЗначениеВДанныеФормы(ПравкиПодчиненныхТаблица, Строка.ПравкиПодчиненных);
			
			ПравкиУдаленныеПодчиненныхТаблица = РеквизитФормыВЗначение("ПравкиУдаленныеПодчиненных");
			ЗначениеВДанныеФормы(ПравкиУдаленныеПодчиненныхТаблица, Строка.ПравкиУдаленныеПодчиненных);
			
			Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	УстановитьДанныеИзТекущейСтроки(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеИзТекущейСтроки(ТекущаяСтрока)
	
	// ставим данные новой строки
	ТекущиеДанные = Файлы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВерсияHTML) Тогда
		ТекстHTML = ТекущиеДанные.ТекстHTML;
	КонецЕсли;

	ВсегоПорцийПредпросмотра = ТекущиеДанные.ВсегоПорцийПредпросмотра;
	НомерБлока = 1;
	
	ОбновитьКнопкиДинамическогоСписка();
	
	ТекстHTMLПриОткрытии = ТекущиеДанные.ТекстHTMLПриОткрытии;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ТекстHTML);
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ТекстHTMLПриОткрытии);
	КонецЕсли;
	
	ПравкиТаблица = ДанныеФормыВЗначение(ТекущиеДанные.Правки, Тип("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ПравкиТаблица, "Правки");
	
	Если ЭтоМобильныйКлиент Тогда
		КоличествоПравок = ПравкиТаблица.Количество();
		ЗаголовокПравки = НСтр("ru = 'Мои замечания'");
		Если КоличествоПравок > 0 Тогда
			Элементы.ГруппаСтраницаМоиПравки.Заголовок = СтрШаблон("(%1) %2", КоличествоПравок, ЗаголовокПравки); 
		Иначе
			Элементы.ГруппаСтраницаМоиПравки.Заголовок = ЗаголовокПравки;
		КонецЕсли;
	КонецЕсли;
	
	ПравкиУдаленныеТаблица = ДанныеФормыВЗначение(ТекущиеДанные.ПравкиУдаленные, Тип("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ПравкиУдаленныеТаблица, "ПравкиУдаленные");
	
	ПравкиПодчиненныхТаблица = ДанныеФормыВЗначение(ТекущиеДанные.ПравкиПодчиненных, Тип("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ПравкиПодчиненныхТаблица, "ПравкиПодчиненных");

	Если ЭтоМобильныйКлиент Тогда
		КоличествоПравокПодчиненных = ПравкиПодчиненныхТаблица.Количество();
		ЗаголовокПравкиПодчиненных = НСтр("ru = 'Подзадачи'");
		Если КоличествоПравокПодчиненных > 0 Тогда
			Элементы.ГруппаСтраницаПравкиПодчиненных.Заголовок =
				СтрШаблон("(%1) %2", КоличествоПравокПодчиненных, ЗаголовокПравкиПодчиненных); 
		Иначе
			Элементы.ГруппаСтраницаПравкиПодчиненных.Заголовок = ЗаголовокПравкиПодчиненных;
		КонецЕсли;
	КонецЕсли;
		
	ПравкиУдаленныеПодчиненныхТаблица = ДанныеФормыВЗначение(ТекущиеДанные.ПравкиУдаленныеПодчиненных, Тип("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ПравкиУдаленныеПодчиненныхТаблица, "ПравкиУдаленныеПодчиненных");
	
	ФайлHTML  = ТекущиеДанные.ФайлHTML;
	ВерсияHTML = ТекущиеДанные.ВерсияHTML;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд_Правки

&НаКлиенте
Процедура ПравкиПриАктивизацииСтроки(Элемент)
	
	Если ИдентификаторТекущейПравки <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПодключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки", 0.5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСписокПриАктивизацииСтроки()
	
	ВыделитьПравкуВHTML();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд_СтатусЗадач

&НаКлиенте
Процедура СтатусЗадачПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд_ПравкиПодчиненных

&НаКлиенте
Процедура ПравкиПодчиненныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменитьПравкуПодчиненных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравкиПодчиненныхПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикСписокПодчиненныхПриАктивизацииСтроки", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСписокПодчиненныхПриАктивизацииСтроки()
	
	ВыделитьПравкуПодчиненныхВHTML();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьПоступившиеОбновления()
	
	Если Не Параметры.Свойство("ДействиеЗадачи") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееДействиеЗадачи = Параметры.ДействиеЗадачи;
	Если Не ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПоступившихОбновленийЗадачи = РаботаСЗадачами.ОписаниеПоступившихОбновленийЗадачи(ТекущееДействиеЗадачи);
	ЕстьПоступившиеОбновления = ЗначениеЗаполнено(ОписаниеПоступившихОбновленийЗадачи);
	
	Элементы.НадписьПоступившиеОбновления.Заголовок = ОписаниеПоступившихОбновленийЗадачи;
	Элементы.ГруппаПоступившиеОбновления.Видимость = ЕстьПоступившиеОбновления;
	
	Если ЕстьПоступившиеОбновления Тогда
		РаботаСЗадачами.ОзнакомитьсяСОбновлениямиЗадач(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущееДействиеЗадачи));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПозициюВыделенияHTMLИДобавитьПравку(ТекстСтруктура, ТипЗамечания, Комментарий,
	СведенияОВыделенномФрагменте = Неопределено)
	
	Если ТипЗнч(ТекстСтруктура) = Тип("Структура") Тогда
		НовыйТекстЗамены = ТекстСтруктура.НовыйТекст;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	   
	
	НомерБлокаТекущий = ТекущиеДанные.НомерБлока;
	
	ПоказыватьПолеHTML = ЗначениеЗаполнено(ТекущиеДанные.ФайлHTML);
	
	HTMLДокумент = Элементы.ТекстHTML.Документ; 
	ЧтоМеняем = "";
	
	УзелНачало = Неопределено;
	УзелКонец = Неопределено;
	ТекстОшибки = "";
	ВыделенныйФрагментHtml = "";
	
	СтрокаСтрукт = Новый Структура("ТипЗамечания, ПозицияВHtml, ПозицияВHtmlКонец, ИдНачала, ИдКонца, ИмяПоля");
	СтрокаСтрукт.ТипЗамечания = ТипЗамечания;
	
	Если ПоказыватьПолеHTML И ЗначениеЗаполнено(ТекстHTML) Тогда
		
		Попытка
			
			Если СведенияОВыделенномФрагменте = Неопределено Тогда
			
				html = "";
			    sel = HTMLДокумент.getSelection();
	            container = HTMLДокумент.createElement("div");
				
				Для i = 0 По sel.rangeCount - 1 Цикл
				    container.appendChild(sel.getRangeAt(i).cloneContents());
				КонецЦикла;
				
	            html = container.innerHTML;
				
				Выделение = HTMLДокумент.getSelection().getRangeAt(0);
				ЧтоМеняем = РаботаС_HTML.ПолучитьТекстИзHTML_IE(html);
			Иначе
				Выделение = СведенияОВыделенномФрагменте.ИсходныйФрагмент.getRangeAt(0);
				ЧтоМеняем = СведенияОВыделенномФрагменте.Текст;
				ВыделенныйФрагментHtml = СведенияОВыделенномФрагменте.ВыделенныйФрагментHtml;
			КонецЕсли;

			УзелНачало = Выделение.startContainer;
			УзелКонец = Выделение.endContainer;
				
		Исключение	
			// не бросаем исключение - иногда HTMLДокумент дает ошибку
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;	
		
		Если УзелНачало = Неопределено Или УзелКонец = Неопределено Тогда
			ТекстПредупр = НСтр("ru = 'Выделите текст, к которому будет привязано замечание.'") + Символы.ВК + ТекстОшибки;
			ПоказатьПредупреждение(, ТекстПредупр);
			Возврат;
		КонецЕсли;	
		
		// проверим пересечения
		
		СтрокаСтрукт.ИдКонца = 0;
		СтрокаСтрукт.ИдНачала = 0;
		
		Если ВыделенныйФрагментHtml <> "" Тогда
			
			СтрокаСтрукт.ИдНачала = СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьИдНачалаВыделенияИзHtml(
				ВыделенныйФрагментHtml);
				
			СтрокаСтрукт.ИдКонца = СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьИдКонцаВыделенияИзHtml(
					ВыделенныйФрагментHtml);
					
		КонецЕсли;			

		Если СтрокаСтрукт.ИдКонца = 0 И СтрокаСтрукт.ИдНачала = 0 Тогда
		
			СтрокаСтрукт.ИдНачала = СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьИдНачалаВыделения(
				ЧтоМеняем, УзелНачало);
				
				
			Если ЭтоМобильныйКлиент Тогда
				СтрокаСтрукт.ИдКонца = -1;
			Иначе
				СтрокаСтрукт.ИдКонца = СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьИдКонцаВыделения(
					ЧтоМеняем, УзелКонец);
			КонецЕсли;
				
		КонецЕсли;	
					
		Если СтрокаСтрукт.ИдКонца = -1 Тогда
			СтрокаСтрукт.ИдКонца = СтрокаСтрукт.ИдНачала;
		КонецЕсли;	
		
		// сортируем правки	
		ТекстHTMLНРег = НРег(ТекстHTML);
		
		ИДСтрока = Формат(СтрокаСтрукт.ИдНачала, "ЧГ=0");
		СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
		СтрокаСтрукт.ПозицияВHtml = СтрНайти(ТекстHTMLНРег, СтрокаПоиска);
		
		ИДСтрока = Формат(СтрокаСтрукт.ИдКонца, "ЧГ=0");
		СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
		СтрокаСтрукт.ПозицияВHtmlКонец = СтрНайти(ТекстHTMLНРег, СтрокаПоиска);
		
		ШаблонОснованиеДляСоздания = Неопределено;
		ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ШаблонОснованиеДляСоздания = ТекущиеДанные.ШаблонОснованиеДляСоздания;
		КонецЕсли;	
		
		ИмяПоля = "";
		Если ЭтоТиповойДокумент И ЗначениеЗаполнено(ШаблонОснованиеДляСоздания) И 
			Не ПравкаПопадаетВПоля(СтрокаСтрукт, ТекстHTML, ИмяПоля) Тогда
			
			ТекстПредупр = НСтр("ru = 'Вы можете давать замечания только к переменным полям договора.'");
			ПоказатьПредупреждение(, ТекстПредупр);
			Возврат;
			
		КонецЕсли;	
		СтрокаСтрукт.ИмяПоля = ИмяПоля;
		
	КонецЕсли;	
	
	// пересчитаем ТекущийАвтор
	Если ЗначениеЗаполнено(ЗадачаСверхуТекущаяРоль) Тогда
		ОбновитьТекущийАвтор();
	КонецЕсли;	
	
	Если Не ВзятаВРаботу Тогда
		УчастникСтруктура = Новый Структура("Участник, ФункцияУчастника, ИдентификаторУчастника",
			ТекущийАвтор, 
			ПредопределенноеЗначение("Перечисление.ФункцииУчастниковСогласования.Согласующий"),
			ИдентификаторУчастника);
		ДействияКлиент.ПринятьКИсполнению(ЭтаФорма, Действие, УчастникСтруктура, ДействиеЗадачи);
		ВзятаВРаботу = Истина;
	КонецЕсли;	
	
	Модифицированность = Истина;
	
	Строка = Правки.Добавить();
	Строка.Дата = ТекущаяДата();
	
	Строка.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	Строка.НомерБлока = НомерБлокаТекущий;
	
	Строка.ЧтоМеняем = ЧтоМеняем;
	Строка.НаЧтоМеняем = НовыйТекстЗамены;
	Строка.ТипЗамечания = ТипЗамечания;
	
	Строка.Автор = ТекущийАвтор;
	Строка.ИдентификаторАвтора = ТекущийИдентификаторАвтора;
	Строка.АвторПредставление = ТекущийАвторПредставление;
	
	Строка.Автоматическая = (ТипЗамечания <> ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Комментарий")
	 	И ТипЗамечания <> ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание"));
	
	Строка.НомерЭтапа = НомерИтерации;
	
	Если ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание") Тогда
		Строка.Замечание = Комментарий;
	Иначе	
		Строка.Комментарий = Комментарий;
	КонецЕсли;	
	
	Строка.СделанаТекущимПользователем = Истина;
	Строка.ВерсияHTML = ВерсияHTML;
	
	Если ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Комментарий") Тогда
		Строка.НомерКартинки = 3;
	ИначеЕсли ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание") Тогда
		Строка.НомерКартинки = 4;
	КонецЕсли;	

	УникальныйИдентификаторПравки = Строка.УникальныйИдентификатор;
	
	Если Не ЗначениеЗаполнено(ТекстHTML) Тогда
		Строка.Автоматическая = Ложь;
		
		Если ТипЗнч(ТекстСтруктура) = Тип("Структура") Тогда
			Строка.ЧтоМеняем = ТекстСтруктура.ПрежнийТекст;
		КонецЕсли;			
		
	КонецЕсли;	
	
	Если ПоказыватьПолеHTML И ЗначениеЗаполнено(ТекстHTML) Тогда
		
		ЗаполнитьЗначенияСвойств(Строка, СтрокаСтрукт);
		
		ФайлHTML = Неопределено;
		ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ФайлHTML = ТекущиеДанные.ФайлHTML;
		КонецЕсли;	
		СортироватьПравкиПослеДобавления(Строка.ИдНачала, Строка.ИдКонца, ФайлHTML);
		ТекущиеДанные.ТекстHTML = ТекстHTML;
			
	КонецЕсли;		
		
	Для Каждого СтрокаПравок Из Правки Цикл
		
		Если СтрокаПравок.УникальныйИдентификатор = УникальныйИдентификаторПравки Тогда
			ИдентификаторТекущейПравки = СтрокаПравок.ПолучитьИдентификатор();
		КонецЕсли;	
		
	КонецЦикла;	
		
	УстановитьТекСтроку();
		
КонецПроцедуры	

&НаКлиенте
Функция ПравкаПопадаетВПоля(Правка, Знач ТекстHTML, ИмяПоля)
	
	//Правка.ПозицияВHtml
	//Правка.ПозицияВHtmlКонец
	// field-begin   field-end
	
	ИмяТегаБукмарк = "mso-bookmark:";
	
	ПозНачалаПоля = СтрНайти(ТекстHTML, "field-begin", НаправлениеПоиска.СКонца, Правка.ПозицияВHtml); // вместо "field-begin"
	Если ПозНачалаПоля = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ПозКонцаПоля = СтрНайти(ТекстHTML, "field-end", НаправлениеПоиска.СНачала, ПозНачалаПоля);
	Если ПозКонцаПоля = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ПозКонцаПоля > Правка.ПозицияВHtml Тогда
		
		ПозБукмарк = СтрНайти(ТекстHTML, ИмяТегаБукмарк, НаправлениеПоиска.СНачала, ПозНачалаПоля);
		Если ПозБукмарк <> 0 И ПозБукмарк < ПозКонцаПоля Тогда
			
			ПозНачалоИмени = ПозБукмарк + СтрДлина(ИмяТегаБукмарк);
			
			// найдем конец - ' или " или >
			ПозКонецИмени1 = СтрНайти(ТекстHTML, "'", НаправлениеПоиска.СНачала, ПозНачалоИмени);
			ПозКонецИмени2 = СтрНайти(ТекстHTML, """", НаправлениеПоиска.СНачала, ПозНачалоИмени);
			ПозКонецИмени3 = СтрНайти(ТекстHTML, ">", НаправлениеПоиска.СНачала, ПозНачалоИмени);
			ПозКонецИмени = Мин(ПозКонецИмени1, ПозКонецИмени2, ПозКонецИмени3);
			
			Если ПозКонецИмени < ПозКонцаПоля Тогда
				ИмяПоля = Сред(ТекстHTML, ПозНачалоИмени, ПозКонецИмени - ПозНачалоИмени);
			КонецЕсли;
			
		КонецЕсли;
		
		ПозEnd = СтрНайти(ТекстHTML, "field-end", НаправлениеПоиска.СНачала, Правка.ПозицияВHtml);
		Если ПозEnd = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПозEnd < Правка.ПозицияВHtmlКонец Тогда
			Возврат Ложь;  // field-end попал между началом и концом правки - это не допускается
		КонецЕсли;	
		
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат Ложь;	
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаблокироватьДанныеДействияДляРедактирования(Действие, ДанныеЗаблокированы, УникальныйИдентификатор)
	
	Если Не ЗначениеЗаполнено(Действие) Или ДанныеЗаблокированы Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Действие,, УникальныйИдентификатор);
		ДанныеЗаблокированы = Истина;
	Исключение
		// кто то другой мог успеть раньше
	КонецПопытки;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазблокироватьДанныеДействияДляРедактирования(Действие, ДанныеЗаблокированы, УникальныйИдентификатор)
	
	Если Не ЗначениеЗаполнено(Действие) Или Не ДанныеЗаблокированы Тогда
		Возврат;
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Действие, УникальныйИдентификатор);
	ДанныеЗаблокированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекСтроку()
	
	ИдПравки = ИдентификаторТекущейПравки;
	ИдентификаторТекущейПравки = Неопределено;
	Элементы.Правки.ТекущаяСтрока = ИдПравки;

КонецПроцедуры

&НаКлиенте
Процедура ПравкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПравкиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПравкиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Правки.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Правки.ВыделенныеСтроки Цикл
		ОбрабатываемаяСтрока = Правки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ОбрабатываемаяСтрока <> Неопределено Тогда
			
			// только свои правки можно удалить
			Если ОбрабатываемаяСтрока.ИдентификаторАвтора <> ТекущийИдентификаторАвтора Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, НСтр("ru = 'Можно удалить только свои замечания.'"));
				Возврат;
			КонецЕсли;	

			// только правки тек этапа можно удалить
			Если ОбрабатываемаяСтрока.ПравкаДругогоЭтапа Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, НСтр("ru = 'Можно удалить только замечания текущего этапа.'"));
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Правки.ВыделенныеСтроки Цикл
		
		ОбрабатываемаяСтрока = Правки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ОбрабатываемаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = ПравкиУдаленные.Добавить();
		Строка.УникальныйИдентификатор = ОбрабатываемаяСтрока.УникальныйИдентификатор;
		
	КонецЦикла;
	
	// пересчитаем ТекущийАвтор
	Если ЗначениеЗаполнено(ЗадачаСверхуТекущаяРоль) Тогда
		ОбновитьТекущийАвтор();
	КонецЕсли;	
	
	Модифицированность = Истина;
	БылоУдаление = Истина;
	ПравкиКоличество = Правки.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравкиПодчиненныхПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ПравкиПодчиненных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// пересчитаем ТекущийАвтор
	Если ЗначениеЗаполнено(ЗадачаСверхуТекущаяРоль) Тогда
		ОбновитьТекущийАвтор();
	КонецЕсли;	
	
	Модифицированность = Истина;
	
	Строка = ПравкиУдаленныеПодчиненных.Добавить();
	Строка.УникальныйИдентификатор = ТекущиеДанные.УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
	
	Если Поле = Элементы.ПравкиКоличествоЗамечанийПротоколаРазногласий Тогда
		
		// Нажатие в колонку "ПР" приводит к открытию протокола разногласий.
		Если ЗначениеЗаполнено(ТекущиеДанные.ПротоколРазногласий) Тогда
			ПоказатьЗначение(, ТекущиеДанные.ПротоколРазногласий);
		КонеЦЕсли;
		
	ИначеЕсли ТекущиеДанные.ИдентификаторАвтора = ТекущийИдентификаторАвтора
		И ТекущиеДанные.НомерЭтапа = НомерИтерации Тогда
		
		//  свои правки можно менять
		ИзменитьПравку();
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура(
			"ЧтоМеняем, НаЧтоМеняем, ТипЗамечания, Автор, Комментарий, РеальныйАвтор, Замечание",
			ТекущиеДанные.ЧтоМеняем,
			ТекущиеДанные.НаЧтоМеняем,
			ТекущиеДанные.ТипЗамечания,
			ТекущиеДанные.Автор,
			ТекущиеДанные.Комментарий,
			ТекущиеДанные.РеальныйАвтор,
			ТекущиеДанные.Замечание);
		
		ОткрытьФорму("ОбщаяФорма.ФормаПросмотраПравки",
			ПараметрыОткрытия,,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПравку()
	
	ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура(
		"ЧтоМеняем, НаЧтоМеняем, ТипЗамечания, Автор, Комментарий, РеальныйАвтор, Замечание", 
		ТекущиеДанные.ЧтоМеняем,
		ТекущиеДанные.НаЧтоМеняем,
		ТекущиеДанные.ТипЗамечания,
		ТекущиеДанные.Автор,
		ТекущиеДанные.Комментарий,
		ТекущиеДанные.РеальныйАвтор,
		ТекущиеДанные.Замечание);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзменитьПравку", ЭтотОбъект);
		
	ОткрытьФорму("ОбщаяФорма.ФормаРедактированияПравки",
		ПараметрыОткрытия,,,,,ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПравкуПодчиненных()
	
	ТекущиеДанные = Элементы.ПравкиПодчиненных.ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура(
		"ЧтоМеняем, НаЧтоМеняем, ТипЗамечания, Автор, Комментарий, РеальныйАвтор, Замечание", 
		ТекущиеДанные.ЧтоМеняем,
		ТекущиеДанные.НаЧтоМеняем,
		ТекущиеДанные.ТипЗамечания,
		ТекущиеДанные.Автор,
		ТекущиеДанные.Комментарий,
		ТекущиеДанные.РеальныйАвтор,
		ТекущиеДанные.Замечание);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзменитьПравкуПодчиненных", ЭтотОбъект);
		
	ОткрытьФорму("ОбщаяФорма.ФормаРедактированияПравки",
		ПараметрыОткрытия,,,,,ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзменитьПравкуПодчиненных(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные = Элементы.ПравкиПодчиненных.ТекущиеДанные;
		
		ТекущиеДанные.Комментарий = Результат.Комментарий;
		
		Если ТекущиеДанные.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.НеПринята") Тогда
			Модифицированность = Истина;
			Возврат; // тут можем только комментарий поменять
		КонецЕсли;	
		
		ТекущиеДанные.НаЧтоМеняем = Результат.НаЧтоМеняем;
		
		СтрокаКопия = Правки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКопия, ТекущиеДанные);
		СтрокаКопия.Автор = ТекущийАвтор; // ПользователиКлиентСервер.ТекущийПользователь();
		СтрокаКопия.ИдентификаторАвтора = ТекущийИдентификаторАвтора;
		СтрокаКопия.УникальныйИдентификатор = Новый УникальныйИдентификатор;
		СтрокаКопия.ВеткаОбработки = ВеткаОбработки;
		СтрокаКопия.НомерЭтапа = НомерИтерации;
		СтрокаКопия.ПравкаДругогоЭтапа = Ложь;
		СтрокаКопия.СделанаТекущимПользователем = Истина;
		СтрокаКопия.РеальныйАвтор = ТекущийСотрудник; //считаем, что и РеальныйАвтор теперь поменялся
	
		ТекущиеДанные.Отработано = Истина;
		ТекущиеДанные.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята");
		ТекущиеДанные.НомерКартинкиСтатуса = 1;
		
		// пересчитаем ТекущийАвтор
		Если ЗначениеЗаполнено(ЗадачаСверхуТекущаяРоль) Тогда
			ОбновитьТекущийАвтор();
		КонецЕсли;	
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзменитьПравку(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
		
		ТекущиеДанные.НаЧтоМеняем = Результат.НаЧтоМеняем;
		ТекущиеДанные.Комментарий = Результат.Комментарий;
		ТекущиеДанные.Замечание = Результат.Замечание;
		ТекущиеДанные.Автор = ТекущийАвтор;
		ТекущиеДанные.ИдентификаторАвтора = ТекущийИдентификаторАвтора;
		
		//  Исполнитель на другом цикле Исполнения может отредактировать свои же правки, и они снова станут не-отработаны и с текущим циклом
		Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
			
			ТекущиеДанные.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.ПустаяСсылка");
			ТекущиеДанные.НомерКартинкиСтатуса = 0;
			
			ТекущиеДанные.НомерЭтапа = НомерИтерации;
			ТекущиеДанные.ПравкаДругогоЭтапа = Ложь;
			
			ТекущиеДанные.Отработано = Ложь;
			
		КонецЕсли;
		
		// пересчитаем ТекущийАвтор
		Если ЗначениеЗаполнено(ЗадачаСверхуТекущаяРоль) Тогда
			ОбновитьТекущийАвтор();
		КонецЕсли;	
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьПравкуВHTML()
	
	ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	Элементы.ПравкиКонтекстноеМенюСменитьТипНаКомментарий.Видимость 
		= (ТекущиеДанные.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание"));
	Элементы.ПравкиКонтекстноеМенюСменитьТипНаЗамечание.Видимость 
		= (ТекущиеДанные.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Комментарий"));

	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВерсияHTML) Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.ПравкиКонтекстноеМенюПоказатьДляСтаройВерсииФайла.Доступность
	 = (ТекущиеДанные.ПозицияВHtml = 0 И ЗначениеЗаполнено(ВерсияHTML));
	
	Если ТекущиеДанные.СсылкиУтеряны И Не ЗначениеЗаполнено(ТекущиеДанные.Номер) Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанныеФайлы = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанныеФайлы <> Неопределено И ТекущиеДанные.НомерБлока <> ТекущиеДанныеФайлы.НомерБлока 
		И ТекущееЗамечаниеИД <> ТекущиеДанные.УникальныйИдентификатор Тогда
		
		ЧастьВыбор(ТекущиеДанные.НомерБлока + 1);

		ТекущееЗамечаниеИД = ТекущиеДанные.УникальныйИдентификатор;
		
		ПодключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки", 0.5, Истина); // тут уже спозиционируем в ПолеHtml
		
		Возврат;
	КонецЕсли;	

	ТекущееЗамечаниеИД = ТекущиеДанные.УникальныйИдентификатор;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номер) И ЗначениеЗаполнено(ВерсияHTML)  Тогда // новый режим
		
		НайтиПоНомеруИПозиционироваться(ТекущиеДанные);
		Возврат;
		
	КонецЕсли;	
	
	НайденныйУзелНачало = Неопределено;
	НайденныйУзелКонец = Неопределено;
	НайтиУзлыНачалаИКонцаВыделения(НайденныйУзелНачало, НайденныйУзелКонец, ТекущиеДанные);	
	
	ВыделитьТекстПоУзлам(НайденныйУзелНачало, НайденныйУзелКонец);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоНомеруИПозиционироваться(ТекущиеДанные)
	
	Номер = ТекущиеДанные.Номер;
	
	ИдНачалаЧисло = -1;
	Нашли = СогласованиеВРежимеЗамечанийHTMLКлиент.НайтиВHTMLИдКомментария(Номер, ТекстHTML, ИдНачалаЧисло, 
		СпособСогласованияВРежимеЗамечаний, ТекущийФайлРасширение); 
	
	НайденныйУзелНачало = Неопределено;
	НайденныйУзелКонец = Неопределено;
	
	HTMLДокумент = Элементы.ТекстHTML.Документ; 
	
	ИдНачала = "do_" + СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьСтрокаИзIdЧисло(ИдНачалаЧисло);
	НайденныйУзелНачало = HTMLДокумент.getElementById(ИдНачала);
	
	ИдНачала2 = "do_" + СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьСтрокаИзIdЧисло(ИдНачалаЧисло + 1);
	НайденныйУзелКонец = HTMLДокумент.getElementById(ИдНачала2);

	ВыделитьТекстПоУзлам(НайденныйУзелНачало, НайденныйУзелКонец);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьПравкуПодчиненныхВHTML()
	
	ТекущиеДанные = Элементы.ПравкиПодчиненных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанныеФайлы = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанныеФайлы <> Неопределено И ТекущиеДанные.НомерБлока <> ТекущиеДанныеФайлы.НомерБлока Тогда
		
		ЧастьВыбор(ТекущиеДанные.НомерБлока + 1);
		
		ПодключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки", 0.5, Истина); // тут уже спозиционируем в ПолеHtml
		
		Возврат;
	КонецЕсли;	
	
	НайденныйУзелНачало = Неопределено;
	НайденныйУзелКонец = Неопределено;
	НайтиУзлыНачалаИКонцаВыделения(НайденныйУзелНачало, НайденныйУзелКонец, ТекущиеДанные);	
	
	ВыделитьТекстПоУзлам(НайденныйУзелНачало, НайденныйУзелКонец);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиУзлыНачалаИКонцаВыделения(НайденныйУзелНачало, НайденныйУзелКонец, ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	НайтиУзлыНачалаИКонцаВыделенияПоНомерам(ТекущиеДанные.ИдНачала, ТекущиеДанные.ИдКонца,
		НайденныйУзелНачало, НайденныйУзелКонец);	
		
КонецПроцедуры

&НаКлиенте
Процедура НайтиУзлыНачалаИКонцаВыделенияПоНомерам(ИдНачалаЧисло, ИдКонцаЧисло,
	НайденныйУзелНачало, НайденныйУзелКонец)
	
	ИдНачала = "do_" + СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьСтрокаИзIdЧисло(ИдНачалаЧисло);
	ИдКонца = "do_" + СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьСтрокаИзIdЧисло(ИдКонцаЧисло);
	
	HTMLДокумент = Элементы.ТекстHTML.Документ; 
	
	НайденныйУзелНачало = Неопределено;
	НайденныйУзелКонец = Неопределено;
	
	
	Попытка
		
		НайденныйУзелНачало = HTMLДокумент.getElementById(ИдНачала);
		УзелКонец = HTMLДокумент.getElementById(ИдКонца);
		
		// Ищем последнее выделенное
		НайденныйУзел = Неопределено;
		
		СогласованиеВРежимеЗамечанийHTMLКлиент.НайтиПервыйУзелПослеУзла(УзелКонец, НайденныйУзел);
		
		Если НайденныйУзел <> Неопределено Тогда
			НайденныйУзелКонец = НайденныйУзел;
		КонецЕсли;	
		
	Исключение
		// не бросаем исключение - иногда HTMLДокумент дает ошибку
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьТекстПоУзлам(НайденныйУзелНачало, НайденныйУзелКонец)
	
	Если НайденныйУзелНачало = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	HTMLДокумент = Элементы.ТекстHTML.Документ; 
	
	Попытка
		
		Диапазон = HTMLДокумент.createRange();
		Диапазон.setStart(НайденныйУзелНачало, 0);
		Диапазон.setEnd(НайденныйУзелКонец, 0);
		
		Выделение = HTMLДокумент.getSelection();
		Выделение.removeAllRanges();
		Выделение.addRange(Диапазон);
		
		НайденныйУзелНачало.scrollIntoView(true);
		HTMLДокумент.documentElement.scrollLeft = 0;
		
		Возврат;
	
	Исключение
		// не бросаем исключение - иногда HTMLДокумент дает ошибку
	КонецПопытки;
	
	
		
	// вероятно IE8
	
	Попытка
		
		ВыделениеТест = HTMLДокумент.selection.createRange();
		ВыделениеКонец = ВыделениеТест.duplicate();
		
		ВыделениеТест.moveToElementText(НайденныйУзелНачало);
		
		Если НайденныйУзелКонец <> НайденныйУзелНачало Тогда
		
			ВыделениеКонец.moveToElementText(НайденныйУзелКонец);
			ВыделениеТест.setEndPoint("EndToEnd", ВыделениеКонец); // EndToStart
			
		КонецЕсли;

		
		ВыделениеТест.select();
		ВыделениеТест.scrollIntoView(true);
		
		Возврат;
	
	Исключение
		// не бросаем исключение - иногда HTMLДокумент дает ошибку
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловноеОформлениеСпискаПравок()
	
	// Выделять чужие правки цветом
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять чужие правки цветом (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Правки.СделанаТекущимПользователем");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.НедействительныеОбъекты;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПравкиАвтор");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПравкиЧтоМеняем");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПравкиКомментарий");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПравкиЗамечание");
	
	// Выделять правки других этапов цветом
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять правки других этапов цветом (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Правки.ПравкаДругогоЭтапа");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.НедействительныеОбъекты;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПравкиАвтор");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПравкиЧтоМеняем");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПравкиКомментарий");
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПравкиЗамечание");
	
	
	// Выделять правки, у которых нет привязки к HTML (удален текст)
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять правки, у которых нет привязки к HTML (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ГруппаОтбораИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбораДанных = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Правки.ПозицияВHtml");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = 0;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Правки.ВерсияHTML");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.ПравоеЗначение = 0;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Правки.Номер");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ЦветНеизвестногоАдресата;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПравкиЧтоМеняем");
	
КонецПроцедуры

&НаСервере
Процедура СортироватьПравкиПослеДобавления(ИдНачала, ИдКонца, ФайлHTMLПараметр)
	
	ПравкиТаблица = РеквизитФормыВЗначение("Правки");
	СогласованиеВРежимеЗамечанийHTMLСервер.СортироватьТаблицуПравок(ПравкиТаблица);
	ЗначениеВРеквизитФормы(ПравкиТаблица, "Правки");
	
	ПравкиТаблицаПодсветки = СоздатьТаблицуДляПодсветки();
	
	НовСтрока = ПравкиТаблицаПодсветки.Добавить();
	НовСтрока.ИдНачала = ИдНачала;
	НовСтрока.ИдКонца = ИдКонца;
	НовСтрока.НомерБлока = НомерБлока - 1;
	
	НомерВерсии = -1;
	Если ТипЗнч(ФайлHTMLПараметр) = Тип("СправочникСсылка.Файлы") Тогда
		ТекВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлHTMLПараметр, "ТекущаяВерсия");
		НомерВерсии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекВерсия, "НомерВерсии");
	КонецЕсли;	
	
	ТекстHTML = СогласованиеВРежимеЗамечанийHTMLСервер.ПодсветитьЦветомФонаПравки(
		ПравкиТаблицаПодсветки, ТекстHTML, НомерВерсии, НомерБлока - 1);
		
КонецПроцедуры

&НаСервере
Процедура ПоказатьСтатусДочернихЗадач()
	
	УстановитьПривилегированныйРежим(Истина);

	СтатусЗадач.ПолучитьЭлементы().Очистить();
	
	ЗадачаТрекера = Неопределено;
	ТекДействиеЗадачи = Неопределено;
	
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ЗадачаТрекера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
		ТекДействиеЗадачи = ДействиеЗадачи;
	Иначе
		
		ТекДействиеЗадачи = ДействияВызовСервера.ДействиеЗадачиПоДействиюИИдентификатору(
				Действие, ИдентификаторУчастника);
		ЗадачаТрекера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекДействиеЗадачи, "Задача");		
		
	КонецЕсли;		
	
	
	ЕстьВыполненныеЗадачи = Ложь;
	СтатусЗадачКоличество = 0;
	
	Подзадачи = ИнтеграцияЗадач.ПодзадачиПоДействию(ТекДействиеЗадачи, НомерИтерации);
	Для Каждого ПодзадачаСтрока Из Подзадачи Цикл
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ПодзадачаСтрока.ВидЗадачи);
		
		ДействияЗадач = ИнтеграцияЗадач.ДействияЗадачПоПодзадаче(ПодзадачаСтрока.Подзадача);
		
		ВыделенныеЗадачи = Новый Массив;
		ВыделенныеЗадачи.Добавить(ПодзадачаСтрока.Подзадача);
		ДанныеДоступностиКоманд = РаботаСЗадачами.ДанныеДоступностиКомандЗадач(ВыделенныеЗадачи);
		ДанныеДоступностиКоманды = 
		ДанныеДоступностиКоманд[Метаданные.Документы.Задача.Команды.ВернутьНаДоработку];
		ДоступенВозврат = ДанныеДоступностиКоманды.Доступность;
		
		Для Каждого ДействияЗадачСтрока Из ДействияЗадач Цикл
			
			Если РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(ДействияЗадачСтрока.ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;	
			
			КорневаяСтрока = СтатусЗадач.ПолучитьЭлементы().Добавить();
			СтатусЗадачКоличество = СтатусЗадачКоличество + 1;
			
			КорневаяСтрока.Исполнитель 	= ДействияЗадачСтрока.Участник;
			КорневаяСтрока.Подзадача 	= ПодзадачаСтрока.Подзадача;
												
			ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
				ДействияЗадачСтрока.СостояниеУчастникаЗадачи);
				
			Выполнено = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(ВидСостоянияУчастниковЗадач);
			
			КорневаяСтрока.Статус = Строка(ДействияЗадачСтрока.СостояниеУчастникаЗадачи);
			Если ДействияЗадачСтрока.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковНовая Тогда
				КорневаяСтрока.Статус = "";
			КонецЕсли;	
			
			КорневаяСтрока.Выполнено = Выполнено;
			КорневаяСтрока.ДоступенВозврат = ДоступенВозврат;
			КорневаяСтрока.ДействиеЗадачи = ДействияЗадачСтрока.Действие;
			
			Если Выполнено Тогда
				ЕстьВыполненныеЗадачи = Истина;
			КонецЕсли;				

			КорневаяСтрока.Замечаний = ПолучитьЧислоЗамечаний(
				ПодзадачаСтрока.Подзадача, ДействияЗадачСтрока.Действие, 
				НомерИтерации);

		КонецЦикла;						
				
	КонецЦикла;	
	
	Элементы.СтатусЗадачЗадачаВернутьНаДоработкуИсполнение.Видимость = ЕстьВыполненныеЗадачи;
	
	ПоказатьЗакладкиПодчиненных = (СтатусЗадачКоличество <> 0) Или ЕстьИсполнителиПрошлогоЦикла;
	Элементы.ГруппаСтраницаПодчиненныеЗадачи.Видимость = ПоказатьЗакладкиПодчиненных;
	Элементы.ГруппаСтраницаПравкиПодчиненных.Видимость = ПоказатьЗакладкиПодчиненных;
	
КонецПроцедуры	

&НаСервере
Процедура ПоказатьНужнуюСтраницу()
	
	КоличествоНеотработанныхОтПодчиненных = КоличествоНеотработанныхЗамечанийПодчиненныхСервер();
	
	Если ЕстьДочерниеПроцессыИсполнение Тогда
		
		Если Не ВсеЗадачиВыполнены Тогда // не все подчиненные выполнили задачи
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПодчиненныеЗадачи;
		ИначеЕсли КоличествоНеотработанныхОтПодчиненных <> 0 Тогда	 // все подчиненные выполнили, но рук-ль их правки еще не отработал
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПравкиПодчиненных;
		Иначе // рук-ль отработал все правки подчиненных
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаМоиПравки;
		КонецЕсли;		
		
	Иначе // нет дочерних процессов
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаМоиПравки;
		
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_КнопкаСтраницаМоиПравки.Видимость = Элементы.ГруппаСтраницаМоиПравки.Видимость;
		Элементы.МК_КнопкаСтраницаПравкиПодчиненных.Видимость = Элементы.ГруппаСтраницаПравкиПодчиненных.Видимость;
		Элементы.МК_КнопкаСтраницаПодзадачи.Видимость = Элементы.ГруппаСтраницаПодчиненныеЗадачи.Видимость;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция КоличествоНеотработанныхЗамечанийПодчиненныхСервер()
	
	КоличествоНеотработанных = 0;
	
	// ПравкиПодчиненных - надо пройти по всем файлам.
	Для Каждого СтрокаФайлы Из Файлы Цикл
		
		Для Каждого Строка Из СтрокаФайлы.ПравкиПодчиненных Цикл
			
			Если Строка.НомерЭтапа = НомерИтерации И Не ЗначениеЗаполнено(Строка.СтатусПринятия) Тогда
				КоличествоНеотработанных = КоличествоНеотработанных + 1;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат КоличествоНеотработанных;
	
КонецФункции	

&НаКлиенте
Функция КоличествоНеотработанныхЗамечанийПодчиненных()
	
	КоличествоНеотработанных = 0;
	
	// ПравкиПодчиненных - надо пройти по всем файлам.
	Для Каждого СтрокаФайлы Из Файлы Цикл
		
		Для Каждого Строка Из СтрокаФайлы.ПравкиПодчиненных Цикл
			
			Если Строка.НомерЭтапа = НомерИтерации И Не ЗначениеЗаполнено(Строка.СтатусПринятия) Тогда
				КоличествоНеотработанных = КоличествоНеотработанных + 1;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат КоличествоНеотработанных;
	
КонецФункции	


&НаКлиенте
Процедура ПринятьВсеНепринятыеПравкиПодчиненных()
	
	ИдентификаторЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Ложь, "ПринятиеВсехНепринятыхПравокПодчиненныхПараллельноеРедактирование");
		
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(
			ИдентификаторЗамера, "Задача: " + ПолучитьНавигационнуюСсылку(Задача));
	
	// ПравкиПодчиненных - надо пройти по всем файлам.
	Для Каждого СтрокаФайлы Из Файлы Цикл
		
		Для Каждого ТекущиеДанные Из СтрокаФайлы.ПравкиПодчиненных Цикл
			
			Если Не ЗначениеЗаполнено(ТекущиеДанные.СтатусПринятия) Тогда
				
				Если ТекущиеДанные.Отработано = Ложь
					Или (ТекущиеДанные.Отработано = Истина 
					И ТекущиеДанные.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.НеПринята")) Тогда
					
					СтрокаКопия = СтрокаФайлы.Правки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаКопия, ТекущиеДанные);
					СтрокаКопия.Автор = ТекущийАвтор; // ПользователиКлиентСервер.ТекущийПользователь();
					СтрокаКопия.ИдентификаторАвтора = ТекущийИдентификаторАвтора;
					СтрокаКопия.УникальныйИдентификатор = Новый УникальныйИдентификатор;
					СтрокаКопия.ВеткаОбработки = ВеткаОбработки;
					СтрокаКопия.НомерЭтапа = НомерИтерации;
					СтрокаКопия.ПравкаДругогоЭтапа = Ложь;
					СтрокаКопия.СделанаТекущимПользователем = Истина;
				
					ТекущиеДанные.Отработано = Истина;
					ТекущиеДанные.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята");
					ТекущиеДанные.НомерКартинкиСтатуса = 1;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;	
			
	КонецЦикла;	
	
	Если Элементы[ИмяТаблицыФайлов()].ТекущиеДанные = Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
		Возврат;
	КонецЕсли;	

	УстановитьДанныеИзТекущейСтроки(Элементы[ИмяТаблицыФайлов()].ТекущаяСтрока);
		
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);

КонецПроцедуры	

&НаКлиенте
Процедура ОтказатьВсеНепринятыеПравкиПодчиненных()
	
	ИдентификаторЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Ложь, "ОтказОтВсехНепринятыхПравокПодчиненныхПараллельноеРедактирование");
		
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(
			ИдентификаторЗамера, "Задача: " + ПолучитьНавигационнуюСсылку(Задача));
	
	// ПравкиПодчиненных - надо пройти по всем файлам.
	Для Каждого СтрокаФайлы Из Файлы Цикл
		
		Для Каждого ТекущиеДанные Из СтрокаФайлы.ПравкиПодчиненных Цикл
			
			Если Не ЗначениеЗаполнено(ТекущиеДанные.СтатусПринятия) Тогда
				
				Если ТекущиеДанные.Отработано = Ложь Тогда
			
					ТекущиеДанные.Отработано = Истина;
					ТекущиеДанные.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.НеПринята");
					ТекущиеДанные.НомерКартинкиСтатуса = 2;
					
					//Элементы.ЗадачаВернутьНаДоработкуИсполнение.Видимость = Истина;
				
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;	
			
	КонецЦикла;	
	
	Если Элементы[ИмяТаблицыФайлов()].ТекущиеДанные = Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
		Возврат;
	КонецЕсли;	

	УстановитьДанныеИзТекущейСтроки(Элементы[ИмяТаблицыФайлов()].ТекущаяСтрока);
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗадачаВернутьНаДоработку_БезКнопки_Реализация()
	
	ЗадачиМнеТекущийБизнесПроцесс = ПроцессыИЗадачиДочерние[0].Процесс;
	
	КомментарииПоАвторам = Новый Массив;
	Для Каждого АвторКомментарий Из ПроцессыИЗадачиДочерние[0].КомментарииПоАвторам Цикл
		КомментарииПоАвторам.Добавить(
			Новый Структура("Автор, Комментарий", АвторКомментарий.Автор, АвторКомментарий.Комментарий));
	КонецЦикла;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	ПараметрыФормы.Вставить("ПараллельноеСогласование", Истина);
	ПараметрыФормы.Вставить("ЗадачиМнеТекущийИсполнитель", ЗадачиМнеТекущийИсполнитель);
	ПараметрыФормы.Вставить("КомментарииПоАвторам", КомментарииПоАвторам);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИдентификаторБлокировкиПроцесса", ИдентификаторБлокировкиПроцесса);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров_БезКнопки",
		ЭтотОбъект,
		ДопПараметры);

	ОткрытьФорму("БизнесПроцесс.Исполнение.Форма.ФормаИзменениеПараметров", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров_БезКнопки(Результат, Параметры) Экспорт

	Если Результат = Неопределено
		Или Результат.КодВозврата <> КодВозвратаДиалога.ОК Тогда
		
		Возврат;
	КонецЕсли;
	
	ИдентификаторБлокировкиПроцесса = Параметры.ИдентификаторБлокировкиПроцесса;
	
	Если Результат.ЗавершитьПроцесс = Истина Тогда
		
		ВыполнитьОднуДочернююЗадачуИсполнение();
		Возврат;
		
	КонецЕсли;	
	
	Результат.Удалить("КодВозврата");
	ФактическийИсполнительЗадачи = Результат.ФактическийИсполнительЗадачи;
	
	ЗадачаТекущая = ПроцессыИЗадачиДочерние[0].Задача;
	ВыполнитьЗадачу(ЗадачаТекущая, Результат);
	
	ОповеститьПослеВыполненияЗадачи(ЗадачаТекущая);
	
	ПроцессыИЗадачиДочерние.Удалить(0);
	Если ПроцессыИЗадачиДочерние.Количество() <> 0 Тогда
		
		ЗадачаВернутьНаДоработку_БезКнопки_Реализация();
		
	Иначе
		
		ПоказатьСтатусДочернихЗадач();
		ПоказатьНужнуюСтраницу();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте 
Процедура ВыполнитьОднуДочернююЗадачуИсполнение()

	ЗадачаТекущая = ПроцессыИЗадачиДочерние[0].Задача;
	
	ВыполнитьЗадачу(ЗадачаТекущая);
	ОповеститьПослеВыполненияЗадачи(ЗадачаТекущая);
	
	ПроцессыИЗадачиДочерние.Удалить(0);
	Если ПроцессыИЗадачиДочерние.Количество() <> 0 Тогда
		
		ЗадачаВернутьНаДоработку_БезКнопки_Реализация();
		
	Иначе
		
		ПоказатьСтатусДочернихЗадач();
		ПоказатьНужнуюСтраницу();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВоВесьЭкран(Команда)
	
	Элементы.ПраваяПанель.Видимость = Не Элементы.ПраваяПанель.Видимость;
	Элементы.ТекстHTMLКонтекстноеМенюВоВесьЭкран.Пометка = Не Элементы.ПраваяПанель.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВыполнить()
	
	ЗаписатьПравки();
	
	ПоказатьСтатусДочернихЗадач();
	ТекущаяСтрока = Элементы[ИмяТаблицыФайлов()].ТекущаяСтрока;
	ПеречитатьПравкиПодчиненныхСервер(ТекущаяСтрока);
	
	ЗагрузитьHtmlИЗамечания();
	
	Если Элементы[ИмяТаблицыФайлов()].ТекущиеДанные <> Неопределено Тогда
		УстановитьДанныеИзТекущейСтроки(ТекущаяСтрока);
	КонецЕсли;	
	
	Элементы.ПравкиПринять.Доступность = (ПравкиПодчиненных.Количество() <> 0);
	Элементы.ПравкиОтказать.Доступность = (ПравкиПодчиненных.Количество() <> 0);
	
	ПравкиПодчиненныхКоличество = ПравкиПодчиненных.Количество(); 
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьГалочкиКоманд()
	
	Элементы.ПравкиПоказатьПравкиДругихСогласующих.Пометка = ПоказыватьПравкиДругихСогласующих;
	Элементы.ПравкиПоказатьПравкиПредыдущихЭтапов.Пометка = ПоказыватьПравкиДругихЭтапов;
	Элементы.ПравкиПоказатьПравкиТолькоОдногоПрошлогоЭтапа.Пометка = ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа;
	Элементы.ПравкиПоказатьТолькоТекущиеПравки.Пометка = 
		(ПоказыватьПравкиДругихЭтапов = Ложь И ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Ложь);
		
	Элементы.ПравкиПодчиненныхПоказатьЗамечанияВсехПодчиненных.Пометка = ПоказыватьЗамечанияВсехПодчиненных;
	
	Элементы.ПравкиНомер.Видимость = ПоказыватьПравкиДругихЭтапов Или ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа;
	Элементы.ПравкиАвтор.Видимость = ПоказыватьПравкиДругихСогласующих;
	
	// принято или отказано замечание инициатором. Имеет смысл только для замечаний прошлых этапов
	Элементы.ПравкиНомерКартинкиСтатуса.Видимость = ПоказыватьПравкиДругихЭтапов Или ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВнесенноеИнициатором(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьПравки();
		Модифицированность = Ложь;
	КонецЕсли;	
	
	ПоказыватьВнесенноеИнициатором = Не ПоказыватьВнесенноеИнициатором;
	Элементы.ПравкиПоказыватьВнесенноеИнициатором.Пометка = ПоказыватьВнесенноеИнициатором;
	
	ПеречитатьПравки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтличияОтШаблона(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьПравки();
		Модифицированность = Ложь;
	КонецЕсли;	
	
	ПоказыватьОтличияОтШаблонаСервер();
	
	ПеречитатьПравки();
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьОтличияОтШаблонаСервер()
	
	ПоказыватьОтличияОтШаблона = Не ПоказыватьОтличияОтШаблона;
	Элементы.ПравкиПоказыватьОтличияОтШаблона.Пометка = ПоказыватьОтличияОтШаблона;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИнформационнуюНадписьВизы()
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИнформационнуюНадписьПротоколРазногласий()
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКомандыПоказатьОтличияФайлОтПредыдущейИтерации()
	
	Элементы.ФайлыКонтекстноеМенюПоказатьОтличияФайлаОтПредыдущейИтерации.Видимость =
		НомерИтерации > 1
		И ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование")
		И ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент()
		И Не ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
		
	Элементы.ПоказатьОтличияФайлаОтПредыдущейИтерации.Видимость 
		= Элементы.ФайлыКонтекстноеМенюПоказатьОтличияФайлаОтПредыдущейИтерации.Видимость; // новый режим
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьКомандыПоказатьОтличияФайлОтПредыдущейИтерации()
	
	ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;
	Элементы.ФайлыКонтекстноеМенюПоказатьОтличияФайлаОтПредыдущейИтерации.Доступность =
		?(ТекущиеДанные <> Неопределено,
			ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы"),
			Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущийАвтор()
	
	ТекущийАвторПредставление = ТекущийАвтор;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДочерниеПроцессыРекурсивно()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МинимальнаяДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Дата");
	МинимальнаяДатаПравок = МинимальнаяДата;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьЗамечанияВсехПодчиненных(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьПравки();
		Модифицированность = Ложь;
	КонецЕсли;	
	
	ПоказыватьЗамечанияВсехПодчиненных = Не ПоказыватьЗамечанияВсехПодчиненных;
	
	Если ПоказыватьЗамечанияВсехПодчиненных Тогда
		ЗаполнитьДочерниеПроцессыРекурсивно();
	КонецЕсли;	
	
	ПеречитатьПравки();
	ПоказатьГалочкиКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.СтатусЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Элементы.СтатусЗадач.ТекущиеДанные.Подзадача) Тогда
		ПоказатьЗначение(, Элементы.СтатусЗадач.ТекущиеДанные.Подзадача);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗадачПриАктивизацииСтроки(Элемент)

	Если Элементы.СтатусЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.СтатусЗадачЗадачаВернутьНаДоработкуИсполнение.Доступность 
		= Элементы.СтатусЗадач.ТекущиеДанные.ДоступенВозврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	ПараметрКоманды = ДействиеЗадачи;
	Если Не ЗначениеЗаполнено(ПараметрКоманды) Тогда
		ПараметрКоманды = ДействиеЗадачиПроцесса;
	КонецЕсли;	
	
	ОткрытьФорму(
		"Документ.Задача.ФормаОбъекта",
		Новый Структура("Основание, Заголовок", ПараметрКоманды, ИмяПодзадачи));
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДействиеЗавершено(Действие)
	
	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Возврат (Состояние = Перечисления.СостоянияВыполненияДействий.Завершено);
	
КонецФункции

&НаКлиенте
Процедура ОтработатьВместоРобота()
	
	// вызов идет только при положительном согласовании
	
	Если РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьЗавершениеСогласования(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	НадоУдалитьКомментарии = Ложь;
	
	Если ДействиеЗавершено(Действие) Тогда		
		НадоУдалитьКомментарии = Истина;
	ИначеЕсли ВсеУчастникиКромеТекущегоИмеютРезультат(Действие, ИдентификаторУчастника) И НажатоСогласовано  Тогда	
		НадоУдалитьКомментарии = Истина;
	КонецЕсли;	
	
	Если НадоУдалитьКомментарии Тогда
		
		СогласованиеВРежимеЗамечанийКлиент.УдалитьКомментарииБезИспользованияРобота(
			Действие, Документ, УникальныйИдентификатор, "",
			СпособСогласованияВРежимеЗамечаний);
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ВсеУчастникиКромеТекущегоИмеютРезультат(Действие, ИдентификаторУчастника)

	Возврат Справочники.ДействияСогласования.ВсеУчастникиИмеютРезультат(Действие, ИдентификаторУчастника);

КонецФункции

	
&НаКлиенте
Функция СведенияОВыделенномФрагменте()

	Возврат Новый Структура("Текст, ИсходныйФрагмент, ВыделенныйФрагментHtml");

КонецФункции

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;	
		
	Если Найти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		ТекущийФайлСтрока = Неопределено;
		
		ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийФайлСтрока = ТекущиеДанные.Ссылка;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ТекущийФайлСтрока) Тогда
			
			Если ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущийФайлСтрока, ЭтаФорма);
		КонецЕсли;
				
		Возврат;         
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "CreatePreview") Тогда  
		
		ТекущийФайлСтрока = Неопределено;
		
		ТекущиеДанные = Элементы[ИмяТаблицыФайлов()].ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийФайлСтрока = ТекущиеДанные.Ссылка;
		КонецЕсли;      
		
		Если ЗначениеЗаполнено(ТекущийФайлСтрока) Тогда
	
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыHTMLПредставление.ИгнорироватьМаксРазмер = Истина;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайл, 
				ПараметрыHTMLПредставление,
				ДокументPDF);
			
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ТекстHTML);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "ShowLinks") Тогда
		
		ОбзорСпискаДокументовКлиент.ПоказатьСвязи(ДанныеСобытия.Href);
		
		Возврат;
		
	ИначеЕсли Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда 
		Возврат;
	КонецЕсли;
	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
		
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЛегенду(Команда)
	НеПоказыватьЛегенду = Истина;
	Элементы.ГруппаЛегенда.Видимость = Не НеПоказыватьЛегенду;
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(
		ЭтотОбъект,
		ТекущийИсточникДействияДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(
		ЭтотОбъект,
		ТекущийИсточникДействияДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)

	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗависимостиДополнительныхРеквизитов();
	Результат = СохранитьДополнительныеРеквизиты();
	
	Если Результат.ВерсииДанныхРазличаются Тогда
		
		Сообщение = НСтр("ru = 'Не удалось сохранить изменения. Возможно, задача была выполнена или изменена другим сотрудником.'");
		ОбновитьВыполнить();
		ПоказатьПредупреждение(, Сообщение);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства
	
&НаСервере
Функция СохранитьДополнительныеРеквизиты()
	
	Результат = РаботаСЗадачамиКлиентСервер.НовыйРезультатСохраненияЗадачи();

	Если Не ОбщегоНазначенияДокументооборот.ВерсияДанныхАктуальна(
		ТекущийИсточникДействия, ТекущаяВерсияДанныхИсточникаЗадачи) Тогда
		
		Результат.Успешно = Ложь;
		Результат.ВерсииДанныхРазличаются = Истина;
		Возврат Результат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
		
		УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(
			ЭтотОбъект,
			ТекущийИсточникДействияОбъект);
		
		ТекущийИсточникДействияОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
		
		ТекущийИсточникДействияОбъект.Записать();
		
		ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоЗадачеПроцесса(ТекущийИсточникДействия);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ТекущийИсточникДействия);
	МассивОбъектов.Добавить(ДействиеЗадачи);
	ВерсииДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОбъектов, "ВерсияДанных");
	
	ТекущаяВерсияДанныхИсточникаЗадачи = ВерсииДанных[ТекущийИсточникДействия]; 
	ТекущаяВерсияДанныхДействияЗадачи = ВерсииДанных[ДействиеЗадачи]; 
	
	Модифицированность = Ложь;
	
	Возврат Результат;
	
КонецФункции
	
// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	// Общее.
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	СоставКоманднойПанелиНаМобильномУстройстве.Добавить(Элементы.МК_КоманднаяПанель);
	
	// Команды.
	Элементы.МК_КоманднаяПанель.Видимость = Истина;
	
	ИдентификаторУчастникаПустой = Не ЗначениеЗаполнено(ИдентификаторУчастника);
	Элементы.МК_ГруппаЗадачиСогласования.Видимость = Не ИдентификаторУчастникаПустой;
	Элементы.МК_ГруппаЗадачиИсполнения.Видимость = ИдентификаторУчастникаПустой;
	
	// Страницы.
	Элементы.ГруппаСтраницыКорень.ТекущаяСтраница = Элементы.ГруппаСтраницаОсновная;
	Элементы.ГруппаСтраницаОсновная.ОтображатьЗаголовок = Ложь;
	Элементы.ГруппаСтраницаНеПодготовлено.Видимость = Ложь;
	
	Элементы.Переместить(Элементы.ЛеваяПанель, Элементы.ГруппаСтраницы, Элементы.ГруппаСтраницаПодчиненныеЗадачи);
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЛеваяПанель; 
	Элементы.Переместить(Элементы.ГруппаСтраницаПравкиПодчиненных, Элементы.ГруппаСтраницаПодчиненныеЗадачи);
	
	// Переключение страниц.
	Элементы.МК_ЗаголовокСтраниц.Видимость = Истина;
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	// Команды переключения страниц.
	Элементы.МК_ЗаголовокСтраниц.Видимость = Истина;
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаИнформация, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаМоиПравки, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаПравкиПодчиненных, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаПодзадачи, Истина);
	
	Элементы.МК_КнопкаСтраницаМоиПравки.Видимость = Элементы.ГруппаСтраницаМоиПравки.Видимость;
	Элементы.МК_КнопкаСтраницаПравкиПодчиненных.Видимость = Элементы.ГруппаСтраницаПравкиПодчиненных.Видимость;
	Элементы.МК_КнопкаСтраницаПодзадачи.Видимость = Элементы.ГруппаСтраницаПодчиненныеЗадачи.Видимость;
	
	МК_СтраницаИнформацияНаСервере();
		
	// Область выполнения.
	Элементы.ГруппаКомандВерх.Видимость = Ложь;
	Элементы.МК_ГруппаКнопкиВыполнения.Видимость = Истина;
	МК_ОбновитьКнопкиВыполнения();
	
	МК.ОформитьКнопкуФильтра(Элементы.Замечание, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.Комментарий, Истина);
	
	// Файлы.
	Элементы.ГруппаФайлы.Видимость = Ложь;	
	Элементы.МК_ГруппаФайлы.Видимость = Истина;	
	Элементы.МК_Файлы.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	МК_ПоказатьСкрытьФайлыНаСервере();
	
	// Мои замечания.
	Элементы.Правки.Шапка = Ложь;
	Элементы.Правки.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элементы.ГруппаСтраницаМоиПравки.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.МК_ПравкиГруппаКолонок.Видимость = Истина;
	
	Элементы.Переместить(Элементы.ПравкиНомерКартинкиСтатуса, Элементы.МК_ПравкиПерваяКолонка);
	Элементы.Переместить(Элементы.ПравкиЧтоМеняем, Элементы.МК_ПравкиВтораяКолонка);
	Элементы.Переместить(Элементы.ПравкиАвтор, Элементы.МК_ПравкиВтораяКолонка);
	
	Элементы.ПравкиАвтор.Ширина = 1;
	Элементы.ПравкиАвтор.Высота = 1;
	Элементы.ПравкиАвтор.РастягиватьПоГоризонтали = Истина;
	Элементы.ПравкиАвтор.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.ПравкиАвтор.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;
	
	Элементы.ПравкиЧтоМеняем.Высота = 1;
	Элементы.ПравкиЧтоМеняем.АвтоМаксимальнаяВысота = Ложь;
	Элементы.ПравкиЧтоМеняем.МаксимальнаяВысота = 3;
	
	// Остальные колонки скроем.
	Элементы.Переместить(Элементы.ПравкиНомерКартинки, Элементы.МК_ПравкиДополнительно);
	Элементы.Переместить(Элементы.ПравкиНомер, Элементы.МК_ПравкиДополнительно);
	Элементы.Переместить(Элементы.ПравкиНаЧтоМеняем, Элементы.МК_ПравкиДополнительно);
	Элементы.Переместить(Элементы.ПравкиГруппаКомментарийЗамечание, Элементы.МК_ПравкиДополнительно);
	Элементы.Переместить(Элементы.ПравкиНомерЭтапа, Элементы.МК_ПравкиДополнительно);
	Элементы.Переместить(Элементы.ПравкиКоличествоЗамечанийПротоколаРазногласий, Элементы.МК_ПравкиДополнительно);
	
	// Командную панель правок перенесем в общую панель.
	Элементы.Переместить(Элементы.ПравкиГруппаСогласующего, Элементы.МК_КоманднаяПанель);
	Элементы.Переместить(Элементы.ПравкиПоказатьПравкиДругихСогласующих, Элементы.МК_КоманднаяПанель);
	Элементы.Переместить(Элементы.ПравкиГруппаПравки, Элементы.МК_КоманднаяПанель);
	Элементы.Переместить(Элементы.ПравкиПоказыватьОтличияОтШаблона, Элементы.МК_КоманднаяПанель);
	Элементы.Переместить(Элементы.ПравкиПоказыватьВнесенноеИнициатором, Элементы.МК_КоманднаяПанель);
	Элементы.Переместить(Элементы.ПравкиВывестиСписок, Элементы.МК_КоманднаяПанель);
	
	// Переместим замечание комментарий в подвал html документа.
	Элементы.МК_ГруппаЗамечаниеКомментарий.Видимость = Истина;
	Элементы.ЗаметкиЗамечание.Видимость = Ложь;
	Элементы.ЗаметкиКомментарий.Видимость = Ложь;
	Элементы.МК_ГруппаЗамечаниеКомментарий.ГоризонтальноеПоложениеПодчиненных =
		ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.Переместить(Элементы.ЗаметкиЗамечание, Элементы.МК_ГруппаЗамечаниеКомментарий);
	Элементы.Переместить(Элементы.ЗаметкиКомментарий, Элементы.МК_ГруппаЗамечаниеКомментарий);
	
	// Дополнительно.
	Элементы.СтатусЗадач.Шапка = Ложь;
	Элементы.ГруппаСтраницаПодчиненныеЗадачи.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	Элементы.ПравкиПодчиненных.Шапка = Ложь;
	Элементы.ГруппаСтраницаПравкиПодчиненных.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
			
КонецПроцедуры

&НаСервере
Процедура МК_ПоказатьСкрытьФайлыНаСервере()
	
	КоличествоФайлов = Файлы.Количество();
	
	Если КоличествоФайлов = 0 Тогда
		Элементы.МК_Файлы.Видимость = Ложь;
	КонецЕсли;
	
	МК_ОбновитьЗаголовокФайлов();

	МК.ОформитьКнопкуСворачиваемойГруппы(Элементы.МК_ПоказатьСкрытьФайлы, Элементы.МК_Файлы.Видимость);
	МК.УстановитьНовуюВысотуДополнительнойТаблицы(Элементы.МК_Файлы, КоличествоФайлов);
	
КонецПроцедуры

&НаСервере
Процедура МК_ОбновитьЗаголовокФайлов()
	
	// Не считаем документ как файл.
	КоличествоФайлов = Файлы.Количество() - 1;
	
	Элементы.МК_ФайлыНадпись.Заголовок = 
		СтрШаблон(
			НСтр("ru = 'Файлы (%1)'"),
			Формат(КоличествоФайлов, "ЧН=0; ЧГ="));
	
КонецПроцедуры

&НаСервере
Процедура МК_СброситьОформлениеПереключателейСтраниц()
	
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаИнформация, Ложь);
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаМоиПравки, Ложь);
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаПравкиПодчиненных, Ложь);
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаПодзадачи, Ложь);

КонецПроцедуры

&НаСервере
Процедура МК_СтраницаМоиПравкиНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаМоиПравки;
	МК_СброситьОформлениеПереключателейСтраниц();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаМоиПравки, Истина);
	
КонецПроцедуры

&НаСервере
Процедура МК_СтраницаПодзадачиНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПодчиненныеЗадачи;
	МК_СброситьОформлениеПереключателейСтраниц();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаПодзадачи, Истина);

КонецПроцедуры

&НаСервере
Процедура МК_СтраницаИнформацияНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЛеваяПанель;
	МК_СброситьОформлениеПереключателейСтраниц();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаИнформация, Истина);

КонецПроцедуры

&НаСервере
Процедура МК_СтраницаПравкиПодчиненныхНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПравкиПодчиненных;
	МК_СброситьОформлениеПереключателейСтраниц();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаПравкиПодчиненных, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ИмяТаблицыФайлов()
	
	Если ЭтоМобильныйКлиент Тогда
		Возврат "МК_Файлы";
	Иначе
		Возврат "Файлы";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура МК_ОбновитьКнопкиВыполнения()

	Если Элементы.МК_Согласовано.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи Тогда
		МК.ОформитьКнопкуЗадачСОтрицательнымВыполнением(Элементы.МК_Согласовано);
	Иначе
		МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.МК_Согласовано);
	КонецЕсли;
	
	Если Элементы.МК_НеСогласовано.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи Тогда
		МК.ОформитьКнопкуЗадачСОтрицательнымВыполнением(Элементы.МК_НеСогласовано);
	Иначе
		МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.МК_НеСогласовано);
	КонецЕсли;
	
	Если Элементы.МК_Исполнено.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи Тогда
		МК.ОформитьКнопкуЗадачСОтрицательнымВыполнением(Элементы.МК_Исполнено);
	Иначе
		МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.МК_Исполнено);
	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

&НаСервере
Процедура ВывестиPDFДокументНаСервере()
	
	СведенияОДокументеPDF = РаботаСPDFПовтИсп.НовыеСведенияОPDFДокументеНаФорме();
	СведенияОДокументеPDF.ИмяРодителяКоманды = "ГруппаКомандPdf";	
	
	РаботаСPDF.ВывестиPDFДокументНаФорму(ЭтотОбъект, СведенияОДокументеPDF);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиДинамическогоСписка()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерБлока,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкиДинамическогоСпискаКлиент()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерБлока,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиПорционногоПредпросмотра()
	
	ИмяРодителяКоманды = "ГруппаСтраницыКнопкиПеремотки";
	ОбзорФайловСервер.СоздатьКнопкиПорционногоПредпросмотра(ЭтотОбъект, ИмяРодителяКоманды);
	
КонецПроцедуры	

&НаКлиенте
Процедура СтраницаВыборЗавершение(НоваяСтраница, ДополнительныеПараметры) Экспорт
	
	ЧастьВыбор(НоваяСтраница);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьHTMLСервер(ИдСтроки, НомерБлока) 
	
	Строка = Файлы.НайтиПоИдентификатору(ИдСтроки);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Строка.НомерБлока = НомерБлока;
	
	ПрочитатьHTML(Строка);

	ФайлHTML  = Строка.ФайлHTML;
	ТекстHTML = Строка.ТекстHTML;     
	ВерсияHTML = Строка.ВерсияHTML;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЧастьВыбор(НоваяСтраница)
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерБлока = НоваяСтраница;      
	
	ПоказыватьПолеHTML = ЗначениеЗаполнено(Элементы.Файлы.ТекущиеДанные.ФайлHTML);
	
	Если ПоказыватьПолеHTML Тогда
	
		ИдСтроки = Элементы.Файлы.ТекущиеДанные.ПолучитьИдентификатор();
		ПрочитатьHTMLСервер(ИдСтроки, НомерБлока - 1);
		
	Иначе       
		
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные; 
		ТекущийФайлСтрока = ТекущиеДанные.Ссылка;
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла(); 
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;   
		
		ПараметрыHTMLПредставление.НомерПорции = НомерБлока - 1; // номера для пользователя - с 1, в СУБД - с 0
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайлСтрока, 
			ПараметрыHTMLПредставление,
			ДокументPDF);
			
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ТекстHTML);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьКнопкиДинамическогоСпискаКлиент();
	
КонецПроцедуры

#КонецОбласти
