#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Описание = Параметры.Описание;
		
	URLСхемы = ПоместитьВоВременноеХранилище(
		ПолучитьОбщийМакет("СтруктураУсловияСхемыКомплексногоПроцесса"), УникальныйИдентификатор);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	Компоновщик.ЗагрузитьНастройки(Параметры.НастройкиУсловия);
		
	// Для компоновщика скрываем поля ЛевоеЗначение, ВидСравнения, ПравоеЗначение.
	// Они будут заполняться программно.
	Элементы.КомпоновщикНастройкиОтборЛевоеЗначение.Видимость = Ложь;
	Элементы.КомпоновщикНастройкиОтборВидСравнения.Видимость = Ложь;
	Элементы.КомпоновщикНастройкиОтборПравоеЗначение.Видимость = Ложь;

	// Определяем доступность команды добавления скрипта.
	Элементы.ДобавитьСкрипт.Видимость = 
		СхемыПроцессовСервер.ДоступнаНастройкаСкриптовВСхемахПроцессов();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПредставленияУсловийКомпоновщика();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицы_КомпоновщикНастройкиОтбор

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПередНачаломИзменения(Элемент, Отказ)
	
	ТекущийЭлементОтбора = Компоновщик.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(
		Элементы.КомпоновщикНастройкиОтбор.ТекущаяСтрока);
	
	Если ТипЗнч(ТекущийЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или Элемент.ТекущийЭлемент.Имя = "КомпоновщикНастройкиОтборИспользование" Тогда
		
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПолеУсловиеПроверкаПредмета = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияПроверкаПредмета());

	ПолеУсловиеРезультатВыполненияДействия = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
		ИмяПоляУсловияРезультатВыполненияДействия());
	
	ПолеУсловиеСкрипт = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
		ИмяПоляУсловияСкрипт());
		
	Если ТекущийЭлементОтбора.ЛевоеЗначение = ПолеУсловиеРезультатВыполненияДействия Тогда
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПредшествующиеДействия", Параметры.ПредшествующиеДействия);
		ПараметрыФормы.Вставить("ТекущийРезультатВыполненияДействия",
			ТекущийЭлементОтбора.ПравоеЗначение);
		
		ОбработчикЗавершенияИзменения = Новый ОписаниеОповещения(
			"ЗавершитьИзменениеУсловияРезультатВыполненияДействия",
			ЭтотОбъект,
			ТекущийЭлементОтбора);
		
		ОткрытьФорму("ОбщаяФорма.ВыборРезультатаВыполненияДействияСхемыДляКомплексногоПроцесса",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОбработчикЗавершенияИзменения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТекущийЭлементОтбора.ЛевоеЗначение = ПолеУсловиеПроверкаПредмета Тогда
		
		// Исходим из того, что структура условия (ТекущийЭлементОтбора.ПравоеЗначение)
		// определяется функцией
		// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураУсловияПроверкаПредмета()
		
		ОбработчикЗавершенияИзменения = Новый ОписаниеОповещения(
			"ЗавершитьИзменениеУсловияСкрипт",
			ЭтотОбъект,
			ТекущийЭлементОтбора);
		
		МультипредметностьКлиент.ВыбратьАлгоритмПроверкиДляПредметаПроцесса(
			ТекущийЭлементОтбора.ПравоеЗначение.ИмяПредмета,
			ТекущийЭлементОтбора.ПравоеЗначение.АлгоритмПроверки,
			Параметры.ПредметыПроцесса,
			ЭтотОбъект,
			ОбработчикЗавершенияИзменения);
			
	ИначеЕсли ТекущийЭлементОтбора.ЛевоеЗначение = ПолеУсловиеСкрипт Тогда
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущийЭлементОтбора.ПравоеЗначение);
		
		ОбработчикЗавершенияИзменения = Новый ОписаниеОповещения(
			"ЗавершитьИзменениеУсловияСкрипт",
			ЭтотОбъект,
			ТекущийЭлементОтбора);
		
		ОткрытьФорму("Справочник.СкриптыУсловийСхемДляКомплексныхПроцессов.ФормаВыбора",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОбработчикЗавершенияИзменения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьРезультатВыполненияДействия(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПредшествующиеДействия", Параметры.ПредшествующиеДействия);
	
	ОбработчикЗавершенияДобавления = Новый ОписаниеОповещения(
		"ЗавершитьДобавлениеУсловияРезультатВыполненияДействия", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборРезультатаВыполненияДействияСхемыДляКомплексногоПроцесса",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОбработчикЗавершенияДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроверкуПредмета(Команда)
	
	МультипредметностьКлиент.ВыбратьАлгоритмПроверкиДляПредметаПроцесса(
		Неопределено,
		Неопределено,
		Параметры.ПредметыПроцесса,
		ЭтотОбъект,
		Новый ОписаниеОповещения("ЗавершитьДобавлениеУсловияПроверкиПредмета", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкрипт(Команда)
	
	ОткрытьФорму("Справочник.СкриптыУсловийСхемДляКомплексныхПроцессов.Форма.ФормаВыбора",,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗавершитьДобавлениеУсловияСкрипт", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьПредставленияУсловийКомпоновщика();
	
	РезультатНастройки = Новый Структура;
	РезультатНастройки.Вставить("Описание", Описание);
	РезультатНастройки.Вставить("НастройкиУсловия", НастройкиУсловия(Компоновщик));
	
	Закрыть(РезультатНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция НастройкиУсловия(Компоновщик)
	
	НастройкиУсловия = Компоновщик.ПолучитьНастройки();
	Возврат НастройкиУсловия;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьДобавлениеУсловияРезультатВыполненияДействия(
	РезультатДействия, ДопПараметры) Экспорт
	
	Если РезультатДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерМодуля = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер;
	ДобавитьУсловиеВКомпоновщик(
		МенеджерМодуля.ИмяПоляУсловияРезультатВыполненияДействия(),
		РезультатДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменениеУсловияРезультатВыполненияДействия(
	Результат, ТекущийЭлементОтбора) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементОтбора.ПравоеЗначение = Результат;
	
	ЗаполнитьПредставленияУсловийКомпоновщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеУсловияПроверкиПредмета(АлгоритмПроверкиПредмета, ДопПараметры) Экспорт
	
	Если АлгоритмПроверкиПредмета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерМодуля = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер;
	
	УсловиеПроверкиПредмета = МенеджерМодуля.СтруктураУсловияПроверкаПредмета();
	УсловиеПроверкиПредмета.ИмяПредмета = АлгоритмПроверкиПредмета.ИмяПредмета;
	УсловиеПроверкиПредмета.АлгоритмПроверки = АлгоритмПроверкиПредмета.АлгоритмПроверки;
	
	ДобавитьУсловиеВКомпоновщик(
		МенеджерМодуля.ИмяПоляУсловияПроверкаПредмета(),
		УсловиеПроверкиПредмета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменениеУсловияПроверкиПредмета(
	АлгоритмПроверкиПредмета, ТекущийЭлементОтбора) Экспорт
	
	Если АлгоритмПроверкиПредмета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Исходим из того, что структура условия (ТекущийЭлементОтбора.ПравоеЗначение)
	// определяется функцией
	// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураУсловияПроверкаПредмета()
	
	ТекущийЭлементОтбора.ПравоеЗначение.ИмяПредмета = АлгоритмПроверкиПредмета.ИмяПредмета;
	ТекущийЭлементОтбора.ПравоеЗначение.АлгоритмПроверки = АлгоритмПроверкиПредмета.АлгоритмПроверки;
	
	ЗаполнитьПредставленияУсловийКомпоновщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеУсловияСкрипт(УсловиеПоОбъекту, ДопПараметры) Экспорт
	
	Если УсловиеПоОбъекту = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерМодуля = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер;
	ДобавитьУсловиеВКомпоновщик(
		МенеджерМодуля.ИмяПоляУсловияСкрипт(),
		УсловиеПоОбъекту);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменениеУсловияСкрипт(Результат, ТекущийЭлементОтбора) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементОтбора.ПравоеЗначение = Результат;
	
	ЗаполнитьПредставленияУсловийКомпоновщика();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПредставленияУсловийКомпоновщика()
	
	Условия = Новый Массив;
	
	ПолучитьУсловияКомпоновщика(Компоновщик.Настройки.Отбор.Элементы, Условия);
	
	МенеджерМодуля = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер;
	
	ПолеУсловиеПроверкаПредмета = Новый ПолеКомпоновкиДанных(
		МенеджерМодуля.ИмяПоляУсловияПроверкаПредмета());

	ПолеУсловиеРезультатВыполненияДействия = Новый ПолеКомпоновкиДанных(
		МенеджерМодуля.ИмяПоляУсловияРезультатВыполненияДействия());
	
	ПолеУсловиеСкрипт = Новый ПолеКомпоновкиДанных(МенеджерМодуля.ИмяПоляУсловияСкрипт());
	
	ПредставлениеНекорректногоУсловия = НСтр("ru = '<Некорректное условие>'");
	
	Для Каждого СтрокаУсловия Из Условия Цикл
					
		Если СтрокаУсловия.ЛевоеЗначение = ПолеУсловиеРезультатВыполненияДействия Тогда
			
			// Исходим из того, что структура условия (СтрокаУсловия.ПравоеЗначение)
			// определяется функцией
			// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураУсловияРезультатВыполненияДействия
			
			Если Не ЗначениеЗаполнено(СтрокаУсловия.ПравоеЗначение.ИмяДействия)
				Или Не ЗначениеЗаполнено(СтрокаУсловия.ПравоеЗначение.РезультатВыполнения) Тогда
			
				СтрокаУсловия.Представление = ПредставлениеНекорректногоУсловия
			Иначе 
				СтрокаУсловия.Представление = СтрШаблон("%1 - %2",
					Параметры.ПредшествующиеДействия[СтрокаУсловия.ПравоеЗначение.ИмяДействия],
					СтрокаУсловия.ПравоеЗначение.РезультатВыполнения);
			КонецЕсли;
					
		ИначеЕсли СтрокаУсловия.ЛевоеЗначение = ПолеУсловиеПроверкаПредмета Тогда
			
			// Исходим из того, что структура условия (СтрокаУсловия.ПравоеЗначение)
			// определяется функцией
			// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураУсловияПроверкаПредмета()
			
			Если Не ЗначениеЗаполнено(СтрокаУсловия.ПравоеЗначение.ИмяПредмета)
				Или Не ЗначениеЗаполнено(СтрокаУсловия.ПравоеЗначение.АлгоритмПроверки) Тогда
			
				СтрокаУсловия.Представление = ПредставлениеНекорректногоУсловия
			Иначе
				
				Предмет = Параметры.ПредметыПроцесса[СтрокаУсловия.ПравоеЗначение.ИмяПредмета];
				Если ЗначениеЗаполнено(Предмет) Тогда
					ПредставлениеПредмета = СтрШаблон("%1 (%2)",
						Предмет, СтрокаУсловия.ПравоеЗначение.ИмяПредмета); 
				Иначе
					ПредставлениеПредмета = Строка(СтрокаУсловия.ПравоеЗначение.ИмяПредмета);
				КонецЕсли;
								
				СтрокаУсловия.Представление = СтрШаблон("%1 - %2",
					ПредставлениеПредмета,
					СтрокаУсловия.ПравоеЗначение.АлгоритмПроверки);
					
			КонецЕсли;
									
		ИначеЕсли СтрокаУсловия.ЛевоеЗначение = ПолеУсловиеСкрипт Тогда
			
			СтрокаУсловия.Представление = Строка(СтрокаУсловия.ПравоеЗначение);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПредставленияУсловийКомпоновщика()
		
	Условия = Новый Массив;
	ПолучитьУсловияКомпоновщика(Компоновщик.Настройки.Отбор.Элементы, Условия);
	Для Каждого СтрокаУсловия Из Условия Цикл
		СтрокаУсловия.Представление = "";
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУсловиеВКомпоновщик(ПутьКДанным, Условие)
	
	КоллекцияЭлементовОтбора = Компоновщик.Настройки.Отбор.Элементы;
	
	ТекущийЭлементОтбора = Компоновщик.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(
		Элементы.КомпоновщикНастройкиОтбор.ТекущаяСтрока);
	
	Если ТипЗнч(ТекущийЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		КоллекцияЭлементовОтбора = ТекущийЭлементОтбора.Элементы;
	ИначеЕсли ТипЗнч(ТекущийЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
		И ТекущийЭлементОтбора.Родитель <> Неопределено Тогда
		
		КоллекцияЭлементовОтбора = ТекущийЭлементОтбора.Родитель.Элементы;
	КонецЕсли;
	
	НовыйЭлемент = ДобавитьУсловиеВЭлементыОтбораКомпоновщика(
		КоллекцияЭлементовОтбора, ПутьКДанным, Условие);
	
	Элементы.КомпоновщикНастройкиОтбор.ТекущаяСтрока = 
		Компоновщик.Настройки.Отбор.ПолучитьИдентификаторПоОбъекту(НовыйЭлемент);
	
	ЗаполнитьПредставленияУсловийКомпоновщика();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьУсловиеВЭлементыОтбораКомпоновщика(ЭлементыОтбора, ПутьКДанным, Условие)
	
	НовыйЭлемент = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлемент.ПравоеЗначение = Условие;
	
	Возврат НовыйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьУсловияКомпоновщика(ЭлементыОтбораКомпоновщика, Условия)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбораКомпоновщика Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Условия.Добавить(ЭлементОтбора);
		Иначе
			ПолучитьУсловияКомпоновщика(ЭлементОтбора.Элементы, Условия);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти