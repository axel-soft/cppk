
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВыбиратьИерархически = Истина;
	Элементы.ПоказыватьСотрудниковНижестоящихПодразделений.Пометка = ВыбиратьИерархически;
	
	УстановитьНачальноеОтображениеДерева();
	ОформитьРуководителяТекущегоПодразделения();
	ОформитьИСкрытьНедействительныхСотрудников();
	ОформитьИСкрытьУдаленныеПодразделения();
	ОформитьПодразделениеТекущегоСотрудника();
	ОформитьПодразделениеБезРуководителя();
	
	Элементы.ПодразделенияПолномочияИРазрешения.Видимость = ПравоДоступа("Изменение", 
		Метаданные.РегистрыСведений.ПолномочияСотрудников);
	Элементы.СтруктураПредприятияКонтекстноеМенюПолномочияИРазрешения.Видимость = ПравоДоступа("Изменение", 
		Метаданные.РегистрыСведений.ПолномочияСотрудников);
		
	//Элементы.ПользователиГруппыИПолномочия.Видимость = ПравоДоступа("Изменение", 
	//	Метаданные.Справочники.РабочиеГруппы);
	//Элементы.ПользователиСписокКонтекстноеМенюГруппыИПолномочия.Видимость = ПравоДоступа("Изменение", 
	//	Метаданные.Справочники.РабочиеГруппы);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Элементы.ПодразделенияПолномочияИРазрешения.Заголовок = НСтр("ru = 'Полномочия'");
		Элементы.СтруктураПредприятияКонтекстноеМенюПолномочияИРазрешения.Заголовок = НСтр("ru = 'Полномочия'");
	КонецЕсли;
	
	ОбновитьСодержимоеФормыПриИзмененииПодразделения(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаПечатьПодразделения;
	ПараметрыРазмещения.Источники = Новый Массив;
	ПараметрыРазмещения.Источники.Добавить(Метаданные.Справочники.СтруктураПредприятия);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастроитьФормуДляМобильногоПриНеобходимости();
	
	МультиязычностьСервер.ИзменениеТекстаЗапросаСпискаДляТекущегоЯзыка(
		ЭтотОбъект, "СотрудникиПодразделений");
	МультиязычностьСервер.ИзменениеТекстаЗапросаСпискаДляТекущегоЯзыка(
		ЭтотОбъект, "СтруктураПредприятия");
	
	Элементы.ОчиститьИсториюВыбораВсехСотрудников.Видимость = ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ(); 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ТипЗнч(Настройки["ВыбиратьИерархически"]) = Тип("Булево") Тогда
		ВыбиратьИерархически = Настройки["ВыбиратьИерархически"];
	КонецЕсли;
	
	Если НЕ ВыбиратьИерархически Тогда
		ОбновитьСодержимоеФормыПриИзмененииПодразделения(ЭтотОбъект);
	КонецЕсли;
	
	Элементы.ПоказыватьСотрудниковНижестоящихПодразделений.Пометка = ВыбиратьИерархически;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказыватьНедействительныхСотрудников"] <> Неопределено Тогда
		ПереключитьОтображениеНедействительныхСотрудников(СотрудникиПодразделений,
			ПоказыватьНедействительныхСотрудников);
	КонецЕсли;
	Элементы.ПоказыватьНедействительныхСотрудников.Пометка = ПоказыватьНедействительныхСотрудников;
	
	Если Настройки["ПоказыватьУдаленныеПодразделения"] <> Неопределено Тогда
		ПереключитьОтображениеУдаленныхПодразделений(СтруктураПредприятия,
			ПоказыватьУдаленныеПодразделения);
	КонецЕсли;
	Элементы.ПоказыватьУдаленныеПодразделения.Пометка = ПоказыватьУдаленныеПодразделения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СтруктураПредприятия" Тогда
		Элементы.СтруктураПредприятия.Обновить();
		СтруктураПредприятияПослеАктивизацииСтроки();
	КонецЕсли;
	
	Если ИмяСобытия = ФизическиеЛицаКлиент.ИмяОповещенияОбИзмененииФИО() Тогда
		
		Элементы.СотрудникиПодразделений.Обновить();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Сотрудники" Тогда
		
		ПодключитьОбработчикОжидания("СтруктураПредприятияПослеАктивизацииСтроки", 
			ОбщегоНазначенияДокументооборотКлиент.МинимальныйИнтервалОбработчикаОжидания(), Истина);
		Элементы.СтруктураПредприятия.Обновить();
		Элементы.СотрудникиПодразделений.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураПредприятия

&НаКлиенте
Процедура СтруктураПредприятияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("СтруктураПредприятияПослеАктивизацииСтроки",
		ОбщегоНазначенияДокументооборотКлиент.МинимальныйИнтервалОбработчикаОжидания(), Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
	
		ПараметрыФормы = Новый Структура;
		
		Если ЗначениеЗаполнено(Элементы.СтруктураПредприятия.ТекущаяСтрока) Тогда
			ПараметрыФормы.Вставить("ЗначенияЗаполнения",
				Новый Структура("Родитель", Элементы.СтруктураПредприятия.ТекущаяСтрока));
		КонецЕсли;
		
		ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаОбъекта",
			ПараметрыФормы,
			Элементы.СтруктураПредприятия);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ТолькоПодразделения = Истина;
	Для Каждого ЗначениеПеретаскивания Из ПараметрыПеретаскивания.Значение Цикл
		ТолькоПодразделения = ТолькоПодразделения
			И (ТипЗнч(ЗначениеПеретаскивания) = Тип("СправочникСсылка.СтруктураПредприятия"));
	КонецЦикла;
		
	Если ТолькоПодразделения Тогда
		Возврат;
	КонецЕсли;
	
	// Разрешаем перетаскивать только подразделения.
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудникиПодразделений

&НаКлиенте
Процедура СотрудникиПодразделенийПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОтборОформленияПодразделенияТекущегоСотрудника", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПодразделенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Основание = Новый Структура("Подразделение", АктивноеПодразделение);
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		"Справочник.Сотрудники.ФормаОбъекта",
		ПараметрыФормы, Элементы.СотрудникиПодразделений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолномочияИРазрешения(Команда)
	
	Если Элементы.СтруктураПредприятия.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.СтруктураПредприятия.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", Элементы.СтруктураПредприятия.ТекущаяСтрока);
	
	ОткрытьФорму("Обработка.ПолномочияИРазрешения.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		Элементы.СтруктураПредприятия.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыИПолномочия(Команда)
	
	Если Элементы.СотрудникиПодразделений.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.СотрудникиПодразделений.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Субъект", Элементы.СотрудникиПодразделений.ТекущаяСтрока);
	
	ОткрытьФорму("ОбщаяФорма.ГруппыИПолномочия",
		ПараметрыФормы,
		ЭтотОбъект,
		Элементы.СотрудникиПодразделений.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПодразделение(Команда)
	
	Если Элементы.СотрудникиПодразделений.ТекущиеДанные <> Неопределено
		И ТипЗнч(Элементы.СотрудникиПодразделений.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Элементы.СтруктураПредприятия.ТекущаяСтрока = 
			Элементы.СотрудникиПодразделений.ТекущиеДанные.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеПодразделения(Команда)
	
	ПоказыватьУдаленныеПодразделения = Не ПоказыватьУдаленныеПодразделения;
	Элементы.ПоказыватьУдаленныеПодразделения.Пометка = ПоказыватьУдаленныеПодразделения;
	
	ПереключитьОтображениеУдаленныхПодразделений(СтруктураПредприятия,
		ПоказыватьУдаленныеПодразделения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительныхСотрудников(Команда)
	
	ПоказыватьНедействительныхСотрудников = Не ПоказыватьНедействительныхСотрудников;
	Элементы.ПоказыватьНедействительныхСотрудников.Пометка = ПоказыватьНедействительныхСотрудников;
	
	ПереключитьОтображениеНедействительныхСотрудников(СотрудникиПодразделений,
		ПоказыватьНедействительныхСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСотрудниковНижестоящихПодразделений(Команда)
	
	ВыбиратьИерархически = Не ВыбиратьИерархически;
	Элементы.ПоказыватьСотрудниковНижестоящихПодразделений.Пометка = ВыбиратьИерархически;

	ОбновитьСодержимоеФормыПриИзмененииПодразделения(ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СтруктураПредприятия);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СтруктураПредприятия, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СтруктураПредприятия);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Асинх Процедура ОчиститьИсториюВыбораВсехПользователей(Команда)
	
	ТекстВопроса = НСтр("ru = 'История выбора всех пользователей будет очищена.
		|Изменения вступят в силу при следующем запуске программы. Продолжить?'");
	
	ОчиститьИсторию = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Если ОчиститьИсторию = КодВозвратаДиалога.Да Тогда
		
		ИсторияВыбораВызовСервера.ОчиститьИсториюВыбораВсехПользователей();
		ПоказатьОповещениеПользователя(НСтр("ru = 'История выбора очищена'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОформитьИСкрытьНедействительныхСотрудников()
	
	СотрудникиПодразделений.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина; 
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	// Есть реквизит "Действует", но проблема в том, что он устанавливается ЛОЖЬ после пометки удаления
	// Тестеры очень просили, чтобы условное оформление сотрудников совпадало с условным оформление пользователей
	// Поэтому вычислям действует ли он по датам
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СотрудникиПодразделений.ДействуетПоДатам");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СотрудникиПодразделений");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Шрифт удаленных.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СотрудникиПодразделений.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СотрудникиПодразделений");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СотрудникиПодразделений, "Действует", Истина, , , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СотрудникиПодразделений, "ПометкаУдаления", Ложь, , , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

&НаСервере
Процедура ОформитьИСкрытьУдаленныеПодразделения()
	
	// Оформление.
	
	// Шрифт удаленных.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтруктураПредприятия.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СтруктураПредприятия");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Скрытие.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СтруктураПредприятия, "ПометкаУдаления", Ложь, , , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПодразделениеТекущегоСотрудника()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Представление = "ПодразделениеТекущегоСотрудника";
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтруктураПредприятия.Ссылка");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СтруктураПредприятия");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Представление = "УдаленноеПодразделениеТекущегоСотрудника";
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина,,,Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтруктураПредприятия.Ссылка");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СтруктураПредприятия");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПодразделениеБезРуководителя()
	
	// Оформление подразделения без руководителя
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Представление = "ПодразделениеБезРуководителя";
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ПодразделениеБезРуководителя.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтруктураПредприятия.Руководитель");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СтруктураПредприятия");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Оформление подразделения с вышестоящим руководителем
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Представление = "ПодразделениеСВышестоящимРуководителем";
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ИнформационнаяНадпись.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтруктураПредприятия.Руководитель");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(
		"СтруктураПредприятия.НепосредственныйРуководитель");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СтруктураПредприятия");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборОформленияПодразделенияТекущегоСотрудника()
	
	Если Элементы.СотрудникиПодразделений.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.СотрудникиПодразделений.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Подразделение = Неопределено;
	Иначе
		Подразделение = Элементы.СотрудникиПодразделений.ТекущиеДанные.Подразделение;
	КонецЕсли;
	
	Если Элементы.СотрудникиПодразделений.ТекущаяСтрока <> АктивныйСотрудник Тогда
		АктивныйСотрудник = Элементы.СотрудникиПодразделений.ТекущаяСтрока;
		УстановитьОтборОформленияПодразделенияТекущегоСотрудникаСервер(Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОформленияПодразделенияТекущегоСотрудникаСервер(Подразделение)
	
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.Представление = "ПодразделениеТекущегоСотрудника"
			Или ЭлементУсловногоОформления.Представление = "УдаленноеПодразделениеТекущегоСотрудника" Тогда
			ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы[0];
			ЭлементОтбораДанных.ПравоеЗначение = Подразделение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьРуководителяТекущегоПодразделения()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Представление = "РуководительТекущегоПодразделения";
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СотрудникиПодразделений.Ссылка");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый ПолеКомпоновкиДанных("РуководительАктивногоПодразделения");
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СотрудникиПодразделений.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование  = Истина; 
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СотрудникиПодразделений.ДействуетПоДатам");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СотрудникиПодразделений");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПослеАктивизацииСтроки()
	
	Если Элементы.СтруктураПредприятия.ТекущиеДанные = Неопределено Тогда
		РуководительАктивногоПодразделения = Неопределено;
	Иначе
		РуководительАктивногоПодразделения = Элементы.СтруктураПредприятия.ТекущиеДанные.Руководитель;
	КонецЕсли;
	
	Если Элементы.СтруктураПредприятия.ТекущаяСтрока <> АктивноеПодразделение Тогда
		АктивноеПодразделение = Элементы.СтруктураПредприятия.ТекущаяСтрока;
		ОбновитьСодержимоеФормыПриИзмененииПодразделения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьОтображениеНедействительныхСотрудников(СотрудникиПодразделений, ПоказатьНедействительных)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СотрудникиПодразделений, "Действует", Истина, , , Не ПоказатьНедействительных,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СотрудникиПодразделений, "ПометкаУдаления", Ложь, , , Не ПоказатьНедействительных,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьОтображениеУдаленныхПодразделений(СтруктураПредприятия, ПоказатьУдаленных)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СтруктураПредприятия, "ПометкаУдаления", Ложь, , , НЕ ПоказатьУдаленных,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСодержимоеФормыПриИзмененииПодразделения(Форма)
	
	Элементы = Форма.Элементы;
	ПустоеПодразделение = ПредопределенноеЗначение(
		"Справочник.СтруктураПредприятия.ПустаяСсылка");
	
	Элементы.Подразделение.Видимость = 
		Форма.ВыбиратьИерархически
		Или Форма.АктивноеПодразделение = ПустоеПодразделение;
	
	Если Форма.АктивноеПодразделение = ПустоеПодразделение Тогда
		
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.СотрудникиПодразделений,
			"ВсеСотрудники", Истина);
		
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.СотрудникиПодразделений,
			"ВыбиратьИерархически", Ложь);
		
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.СотрудникиПодразделений,
			"Подразделение", ПустоеПодразделение);
		
	Иначе
			
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.СотрудникиПодразделений,
			"ВсеСотрудники", Ложь);
		
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.СотрудникиПодразделений,
			"ВыбиратьИерархически", Форма.ВыбиратьИерархически);
		
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.СотрудникиПодразделений,
			"Подразделение", Форма.АктивноеПодразделение);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеПараметраКомпоновкиДанных(Знач ВладелецПараметров,
	Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	Для каждого Параметр Из ВладелецПараметров.Параметры.Элементы Цикл
		Если Строка(Параметр.Параметр) = ИмяПараметра Тогда
			
			Если Параметр.Использование
			   И Параметр.Значение = ЗначениеПараметра Тогда
				Возврат;
			КонецЕсли;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	ВладелецПараметров.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНачальноеОтображениеДерева()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ КОЛИЧЕСТВО(Ссылка) КАК Количество ИЗ Справочник.СтруктураПредприятия");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.Количество > 23 Тогда
		Элементы.СтруктураПредприятия.НачальноеОтображениеДерева
			= НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	Иначе
		Элементы.СтруктураПредприятия.НачальноеОтображениеДерева
			= НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуДляМобильногоПриНеобходимости()
	
	Если Не МК_ПовтИсп.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	Элементы.СтруктураПредприятия.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделения;
	Элементы.Переместить(Элементы.Создать, КоманднаяПанель);
КонецПроцедуры

#КонецОбласти
