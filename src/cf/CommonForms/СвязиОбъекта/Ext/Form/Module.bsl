
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоказыватьУдаленныеСвязи = Ложь;
	
	ПолеPDFРаботаетВВебКлиенте = РаботаСPDFПовтИсп.ПолеPDFРаботаетВВебКлиенте();   
	МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	
	ПорядокСортировки = "ДатаДокумента УБЫВ";
	УстановитьПометкуРежимуСортировки();
	
	ОбъектСоСвязями = Параметры.ОсновнойОбъект;
	Если Параметры.Свойство("ТолькоВажные") Тогда
		ТолькоВажные = Параметры.ТолькоВажные;
	КонецЕсли;
	
	НастройкаИспользоватьОбзорДокументов =
		ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьОбзорДокументов");
	Если НастройкаИспользоватьОбзорДокументов = Неопределено Тогда 
		ИспользоватьОбзорДокументов = Истина;
	Иначе
		ИспользоватьОбзорДокументов = НастройкаИспользоватьОбзорДокументов;
	КонецЕсли;
	
	ИспользоватьПредпросмотрФайловОбщая = ПолучитьФункциональнуюОпцию("ИспользоватьПредпросмотрФайлов");
	ИспользоватьПредпросмотрФайловЛичная =
		ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьПредпросмотрФайлов");
	Если ИспользоватьПредпросмотрФайловЛичная = Неопределено Тогда
		ИспользоватьПредпросмотрФайловЛичная = Истина;
	КонецЕсли;
	
	ИспользоватьПредпросмотрФайлов = 
		ИспользоватьОбзорДокументов И ИспользоватьПредпросмотрФайловОбщая И ИспользоватьПредпросмотрФайловЛичная;
		
	Элементы.ДеревоСвязейПредварительныйПросмотр.Видимость = ИспользоватьПредпросмотрФайлов;
	
	ИдентификаторКлиента = "";
	Если Параметры.Свойство("ИдентификаторКлиента") Тогда
		ИдентификаторКлиента = Параметры.ИдентификаторКлиента;
		
		ПредпросмотрОфисныхФайлов = ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами/ПредпросмотрОфисныхФайлов",
			ИдентификаторКлиента);
		
		Если Не ЗначениеЗаполнено(ПредпросмотрОфисныхФайлов) Тогда
			ПредпросмотрОфисныхФайлов = Перечисления.ПредпросмотрОфисныхФайлов.OpenOfficeMSOffice;
		КонецЕсли;			
	КонецЕсли;
		
	Если Параметры.Свойство("ТолькоСвязиВОтветНа") 
		И Параметры.ТолькоСвязиВОтветНа 
		И ТипЗнч(ОбъектСоСвязями) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		ТипСвязи = Неопределено;
		
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСоСвязями, "ВидДокумента");
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			РеквизитыКорреспонденции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента, 
				"ЯвляетсяВходящейКорреспонденцией, ЯвляетсяИсходящейКорреспонденцией");
			
			Если РеквизитыКорреспонденции.ЯвляетсяВходящейКорреспонденцией Тогда
				ТипСвязи = Справочники.ТипыСвязей.ПолученВОтветНа;
			ИначеЕсли РеквизитыКорреспонденции.ЯвляетсяИсходящейКорреспонденцией Тогда
				ТипСвязи = Справочники.ТипыСвязей.ОтправленВОтветНа;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипСвязи <> Неопределено Тогда
			ТипСвязиОтбор = ТипСвязи;
			Элементы.ДеревоСвязейПоказатьВсеСвязи.Видимость = Ложь;
			Элементы.ДекорацияТолькоВажныеТекст.Заголовок =
				СтрШаблон(НСтр("ru = 'На первом уровне показаны только связи с типом ""%1""'"), ТипСвязи);
		КонецЕсли;
		
	КонецЕсли;

	Если Параметры.Свойство("ТолькоПисьмоОснование") 
		И Параметры.ТолькоПисьмоОснование 
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОбъектСоСвязями) Тогда
		
		ТипСвязи = Справочники.ТипыСвязей.ПисьмоОснование;
		
		Если ТипСвязи <> Неопределено Тогда
			ТипСвязиОтбор = ТипСвязи;
			Элементы.ДеревоСвязейПоказатьВсеСвязи.Видимость = Ложь;
			Элементы.ДекорацияТолькоВажныеТекст.Заголовок =
				СтрШаблон(НСтр("ru = 'На первом уровне показаны только связи с типом ""%1""'"), ТипСвязи);
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьПравоНаИзменение
		= ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ОбъектСоСвязями).Изменение;
		
	Если Не ЕстьПравоНаИзменение Тогда
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаДобавить.Доступность = Ложь;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаДобавить.Доступность = Ложь;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Ложь;
	КонецЕсли;	
	
	Элементы.ДеревоСвязейПоказатьВсеСвязи.Доступность = ТолькоВажные;
	Элементы.ГруппаИнфо.Видимость = ТолькоВажные Или ЗначениеЗаполнено(ТипСвязиОтбор);
	
	ПредставлениеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСоСвязями, "Представление");
	Заголовок = СтрШаблон(НСтр("ru='Связи: %1'"), ПредставлениеДокумента);
	
	ЗаполнитьСвязи();
	
	УстановитьУсловноеОформление();
	
	ПоказыватьУровней = Константы.КоличествоУровнейСвязейДляОтображенияВДокументе.Получить();
	Если Не ЗначениеЗаполнено(ПоказыватьУровней) Тогда
		ПоказыватьУровней = 4;
	КонецЕсли;
	
	ПоказыватьУровнейКончаетсяНа1 = (ПоказыватьУровней%10 =1);
	СтрокаПоказаны = НСтр("ru = 'Показаны'");
	Если ПоказыватьУровнейКончаетсяНа1 Тогда
		СтрокаПоказаны = НСтр("ru = 'Показан'");
	КонецЕсли;	
	
	Элементы.ДекорацияСвязиПрочитаныНеПолностью.Заголовок = 
		СтрШаблон(НСтр("ru = '%1 только %2 связей. Для просмотра остальных используйте отчет ""Структура связей"".'"),
		СтрокаПоказаны,
		СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 уровень;;%1 уровня;%1 уровней;%1 уровень'"),
					ПоказыватьУровней));
					
	Если ТолькоВажные Тогда					
		ВсеСвязи = СвязиОбъектов.ПолучитьВсеСвязиОбъекта(ОбъектСоСвязями);
		ВсегоСвязей = ВсеСвязи.Количество();
		
		Если ПрочитаноСвязей <> ВсегоСвязей Тогда 
			Элементы.ДекорацияТолькоВажныеТекст.Заголовок = СтрШаблон(
			 	НСтр("ru = 'Показаны только важные связи (%1). Чтобы увидеть все (%2), нажмите ""Показать все связи"".'"),
			 	ПрочитаноСвязей, ВсегоСвязей);
		Иначе
			Элементы.ГруппаИнфо.Видимость = Ложь;
		 КонецЕсли;	
		 
	 КонецЕсли;			
	 
	ПоказыватьPdfСредствами1С = РаботаСФайламиСлужебныйПовтИсп.ПоказыватьPdfСредствами1С();
	
	ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
	ЭтоТонкийКлиент = ОбщегоНазначенияДокументооборот.ЭтоТонкийКлиент();
	
	// Pdf
	Если ЭтоТонкийКлиент Или (ЭтоВебКлиент И ПолеPDFРаботаетВВебКлиенте) Тогда
		Если ПоказыватьPdfСредствами1С Тогда
			ВывестиPDFДокументНаСервере();
		КонецЕсли;
	КонецЕсли;
	//Конец Pdf
	
	СоздатьКнопкиПорционногоПредпросмотра();
	
	ВсегоПорцийПредпросмотра = 1;
	НомерПорции = 1;
	ОбновитьКнопкиДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьПервыйУровеньДереваСвязей();
	УстановитьВидимостьПредварительногоПросмотра();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ИзмененыСвязиДокумента"
		Или ИмяСобытия = "СозданаСвязь")
		И Параметр.Документ = ОбъектСоСвязями Тогда
		
		ТолькоВажные = Ложь;
		Элементы.ДеревоСвязейПоказатьВсеСвязи.Доступность = Ложь;
		Элементы.ГруппаИнфо.Видимость = ТолькоВажные Или ЗначениеЗаполнено(ТипСвязиОтбор);
		
		ЗаполнитьСвязи();
		РазвернутьПервыйУровеньДереваСвязей();
		
		// Установим курсор в нужную строку
		Если Параметр.Свойство("СвязанныйОбъект") И ЗначениеЗаполнено(Параметр.СвязанныйОбъект) Тогда 
			ЭтоСвязанныйДокументСтрока = (ТипЗнч(Параметр.СвязанныйОбъект) = Тип("Строка"));
			НашлиСтроку = Ложь; 
			КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
			ПараметрТипСвязи = Неопределено;
			Если ИмяСобытия = "СозданаСвязь" Тогда
				ПараметрТипСвязи = Параметр.ТипСвязи;
			Иначе
				ПараметрТипСвязи = Параметр.ТипыСвязей[0];
			КонецЕсли;
			Для Каждого Строка Из КоллекцияСтрок Цикл
				Если НашлиСтроку Тогда
					Прервать;
				КонецЕсли;
				
				Если ПараметрТипСвязи = Строка.ТипСвязи Тогда
					ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
					Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
							Если Параметр.СвязанныйОбъект = ПодчиненнаяСтрока.СвязанныйОбъект
								Или (ЭтоСвязанныйДокументСтрока
									И Параметр.СвязанныйОбъект = ПодчиненнаяСтрока.СвязаннаяСтрока) Тогда
									
									Элементы.ДеревоСвязей.ТекущаяСтрока = ПодчиненнаяСтрока.ПолучитьИдентификатор();
									НашлиСтроку = Истина;
									Прервать;
									
							КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли (ИмяСобытия = "ИзмененыСвязиПодчиненныхДокументов" И Параметр.Документ = ОбъектСоСвязями)
		Или (ИмяСобытия = "ОтправленВОтветНаУстановлен" И Параметр.Документ = ОбъектСоСвязями) Тогда
		
		ЗаполнитьСвязи();
		РазвернутьПервыйУровеньДереваСвязей();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ИспользоватьПредварительныйПросмотр"] = Истина Тогда
		Настройки["ИспользоватьПредварительныйПросмотр"] = 
			Настройки["ИспользоватьПредварительныйПросмотр"] И ИспользоватьПредпросмотрФайлов;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПоказыватьТолькоОригиналыВСвязяхПриИзменении(Элемент)
	
	ЗаполнитьСвязи();
	
	РазвернутьПервыйУровеньДереваСвязей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередРазворачиванием(Элемент, Строка, Отказ)
	
	РаскрываемаяСтрока = ДеревоСвязей.НайтиПоИдентификатору(Строка);
	
	Если РаскрываемаяСтрока.ЕстьСвязи И РаскрываемаяСтрока.ЭтоВеткаСвязи Тогда
		
		// Если есть служебная строка - удалим ее.
		ПодчиненныеСтроки = РаскрываемаяСтрока.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() = 1 Тогда
			Если ПодчиненныеСтроки[0].СлужебнаяСтрока Тогда
				ПодчиненныеСтроки.Удалить(0);
			КонецЕсли;
		КонецЕсли;
		
		ТекущийРодитель = РаскрываемаяСтрока.ПолучитьРодителя();
		ТекущийУровень = 1;
		ИспользованныеРодители = Новый Соответствие;
		Пока ТекущийРодитель <> Неопределено Цикл
			Если ЗначениеЗаполнено(ТекущийРодитель.СвязанныйОбъект) Тогда
				Если ИспользованныеРодители.Получить(ТекущийРодитель.СвязанныйОбъект) = Неопределено Тогда
					ТекущийУровень = ТекущийУровень + 1;
					ИспользованныеРодители[ТекущийРодитель.СвязанныйОбъект] = 1;
				КонецЕсли;
			КонецЕсли;
			ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
		КонецЦикла;
		
		ЭтоМаксимальныйУровень = ТекущийУровень >= ПоказыватьУровней;
		МассивИдСтрокДляРаскрытия = Новый Массив;
		
		ИдентификаторЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
			Ложь, "ЧтениеСвязей.ЗагрузкаОчередногоУровня");
		
		ПрочитаноСвязей = 0;
		
		ПараметрыВызова = Новый Структура(
		"РаскрываемыйУзелДерева, ОбъектСоСвязями,
		|ПоказыватьУдаленныеСвязи, ПоказыватьТолькоОригиналыВСвязях, 
		|ДокументРодительСвязи,
		|ЭтоМаксимальныйУровеньДереваСвязей, 
		|ТолькоВажные, ПорядокСортировки, КорневойОбъект",
			РаскрываемаяСтрока,
			РаскрываемаяСтрока.СвязанныйОбъект,
			ПоказыватьУдаленныеСвязи,
			ПоказыватьТолькоОригиналыВСвязях,
			РаскрываемаяСтрока.Объект,
			ЭтоМаксимальныйУровень,
			ТолькоВажные,
			ПорядокСортировки,
			ОбъектСоСвязями
		);
		
		ЗаполнитьДеревоСвязейДокумента(
			ПараметрыВызова,
			ПрочитаноСвязей, 
			МассивИдСтрокДляРаскрытия,
			ВыведенныеОбъекты);
			
		РаскрываемаяСтрока.ЕстьСвязи = Ложь;
		
		Для Каждого Ид Из МассивИдСтрокДляРаскрытия Цикл
			Элементы.ДеревоСвязей.Развернуть(Ид, Ложь);
		КонецЦикла;	
		
		КомментарийЗамера = СтрШаблон(НСтр("ru = 'Прочитано связей: %1'"), ПрочитаноСвязей);
		ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(
				ИдентификаторЗамера, КомментарийЗамера);
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
		
		Если ЭтоМаксимальныйУровень Тогда
			Элементы.ДекорацияСвязиПрочитаныНеПолностью.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьОбъектТекущейСтрокиДереваСвязей(Элементы.ДеревоСвязей.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПриАктивизацииСтроки(Элемент)
	
	Элементы.ДеревоСвязейОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейУдалить.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Ложь;
	
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	Элементы.ДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеHTML = Неопределено;
	Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
	Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;

	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Истина;
		Элементы.ДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Истина;
		
		Если ИспользоватьПредпросмотрФайлов И ИспользоватьПредварительныйПросмотр Тогда
			Если ОбзорФайловКлиент.ЭтоФайлСДолгойОбработкой(ТекущиеДанные.РасширениеФайла) Тогда
				ПредставлениеHTML = ОбзорФайловКлиент.HTMLПредставлениеСДолгойОбработкой();
			КонецЕсли;
			
			ПодключитьОбработчикОжидания("ОбновитьПревью", 0.2, Истина);
		КонецЕсли;	
		
	ИначеЕсли Не ТекущиеДанные.ЭтоРодитель Тогда
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейУдалить.Доступность = Истина;
		// Разрешаем удалять только связи главного объекта.
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = (ТекущиеДанные.Объект = ОбъектСоСвязями);
		
		Если ИспользоватьОбзорДокументов 
				И (ДелопроизводствоКлиентСервер.ЭтоДокумент(ТекущиеДанные.СвязанныйОбъект)
					Или ОбзорОбъектовКлиентСервер.ЭтоИзвестныйОбъектОбзора(ТекущиеДанные.СвязанныйОбъект))Тогда
			
			ПодключитьОбработчикОжидания("ОбновитьПревью", 0.2, Истина);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", ОбъектСоСвязями);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТипСвязи", Элементы.ДеревоСвязей.ТекущиеДанные.ТипСвязи);
	КонецЕсли;
	
	Если Копирование Тогда 
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("Документ", ОбъектСоСвязями);
		ПараметрыКлюча.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйОбъект", ТекущиеДанные.СвязанныйОбъект);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		ПараметрыКлюча.Вставить("ДополнительныйОбъектСвязи", ТекущиеДанные.ДополнительныйОбъектСвязи);
		
		ПараметрыФормы.Вставить("ЗначениеКопирования", СоздатьКлючЗаписиСвязиДокументов(ПараметрыКлюча));
		Открытьформу("РегистрСведений.СвязиОбъектов.ФормаЗаписи", ПараметрыФормы, Элементы.ДеревоСвязей);
	Иначе
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиОбъектов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Если ТекущиеДанные.ЭтоРодитель Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи) Тогда
			
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ТипСвязи);
			ОткрытьФорму(
				"Справочник.ТипыСвязей.Форма.ФормаЭлемента",
				ПараметрыФормы,
				Элементы.ДеревоСвязей);
				
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Файл);
		
	ИначеЕсли ТекущиеДанные.ЭтоВеткаСвязи Или ТекущиеДанные.ЭтоРольФайла Тогда
		
		Возврат;
		
	Иначе
		
		ПараметрыКлюча = Новый Структура;
		
		ПараметрыКлюча.Вставить("Объект", ТекущиеДанные.Объект);
		ПараметрыКлюча.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйОбъект", ТекущиеДанные.СвязанныйОбъект);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		ПараметрыКлюча.Вставить("ДополнительныйОбъектСвязи", ТекущиеДанные.ДополнительныйОбъектСвязи);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("Ключ", СоздатьКлючЗаписиСвязиДокументов(ПараметрыКлюча));
		Открытьформу(
			"РегистрСведений.СвязиОбъектов.ФормаЗаписи",
			ПараметрыФормы,
			Элементы.ДеревоСвязей);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если Не ЕстьПравоНаИзменение Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ЭтоРодитель
		Или ТекущиеДанные.ЭтоРольФайла
		Или ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Объект <> ОбъектСоСвязями Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоСвязейПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("ТекущиеДанные", ТекущиеДанные));
	
	ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru = 'Удалить связь?'"), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ТекущиеДанные = Параметры.ТекущиеДанные;
		
		ПараметрыУдаления = Новый Структура;
		ПараметрыУдаления.Вставить("Документ", ОбъектСоСвязями);
		ПараметрыУдаления.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыУдаления.Вставить("СвязанныйОбъект", ТекущиеДанные.СвязанныйОбъект);
		ПараметрыУдаления.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		ПараметрыУдаления.Вставить("ДополнительныйОбъектСвязи", ТекущиеДанные.ДополнительныйОбъектСвязи);
		
		УдалитьСвязь(ПараметрыУдаления);
		
		РазвернутьПервыйУровеньДереваСвязей();
		
		// Оповестим связанный документ об удалении связи
		Если ЗначениеЗаполнено(ТекущиеДанные.СвязанныйОбъект) Тогда 
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Документ", ТекущиеДанные.СвязанныйОбъект);
			Оповестить("ИзмененыСвязиПодчиненныхДокументов", ПараметрОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СвязанныйОбъект = ПараметрыПеретаскивания.Значение[0];
	
	Если ЗначениеЗаполнено(СвязанныйОбъект)
		И ДелопроизводствоКлиент.ДокументыМожноСвязать(ОбъектСоСвязями, СвязанныйОбъект) Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", ОбъектСоСвязями);
		ПараметрыФормы.Вставить("СвязанныйОбъект", СвязанныйОбъект);
		
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиОбъектов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 			
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя установить связь между выбранными объектами'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;	

	Если Найти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		ТекущийФайл = Неопределено;
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийФайл = ТекущиеДанные.Файл;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ТекущийФайл) Тогда
			
			Если ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущийФайл, ЭтаФорма);
		КонецЕсли;
				
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "CreatePreview") Тогда
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ТекущийФайл = ТекущиеДанные.Файл;
		
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.РасширениеФайла;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.Размер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыHTMLПредставление.ИгнорироватьМаксРазмер = Истина;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайл,
				ПараметрыHTMLПредставление,
				ДокументPDF);
				
			ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
			ОбновитьКнопкиДинамическогоСпискаКлиент();
				
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "ShowLinks") Тогда
		
		ОбзорСпискаДокументовКлиент.ПоказатьСвязи(ДанныеСобытия.Href);
		
		Возврат;
		
	ИначеЕсли Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда 
		Возврат;
	КонецЕсли;
	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДеревоСвязейОбновить(Команда)
	
	ЗаполнитьСвязи();
	
	РазвернутьПервыйУровеньДереваСвязей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязь(Команда)
	
	ПоказатьОбъектТекущейСтрокиДереваСвязей(Элементы.ДеревоСвязей.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейСохранитьКак(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыбраннаяСтрока);
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			ТекущиеДанные.Файл,
			Неопределено,
			ЭтаФорма.УникальныйИдентификатор);
		
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейНапечататьФайлы(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86
		И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыделеннаяСтрока);
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда 
				МассивФайлов.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивФайлов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
			
		ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
			МассивФайлов,
			ЭтаФорма.УникальныйИдентификатор);
			
		КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
		
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Файл,
			Неопределено,
			ЭтаФорма.УникальныйИдентификатор,
			Неопределено,
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоДате(Команда)
	
	ПорядокСортировки = "ДатаДокумента УБЫВ";
	ЗаполнитьСвязи();
	РазвернутьПервыйУровеньДереваСвязей();
	УстановитьПометкуРежимуСортировки();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоРегНомеру(Команда)
	
	ПорядокСортировки = "НомерДокумента ВОЗР";
	ЗаполнитьСвязи();
	РазвернутьПервыйУровеньДереваСвязей();
	УстановитьПометкуРежимуСортировки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуРежимуСортировки()
	
	Если СтрНайти(ПорядокСортировки, "ДатаДокумента") <> 0 Тогда
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейКонтекстноеМенюСортироватьПоДате.Пометка = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюСортироватьПоРегНомеру.Пометка = Ложь;
	ИначеЕсли СтрНайти(ПорядокСортировки, "НомерДокумента") <> 0 Тогда	
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейКонтекстноеМенюСортироватьПоДате.Пометка = Ложь;
		Элементы.ДеревоСвязейКонтекстноеМенюСортироватьПоРегНомеру.Пометка = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеСвязи(Команда)
	
	ПоказатьВсеСвязиРеализация();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеСвязиРеализация()
	
	ТолькоВажные = Ложь;
	ЗаполнитьСвязи();
	РазвернутьПервыйУровеньДереваСвязей();
	Элементы.ДеревоСвязейПоказатьВсеСвязи.Доступность = Ложь;
	Элементы.ГруппаИнфо.Видимость = ТолькоВажные;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураСвязей(Команда)
	
	ПараметрыФормы = Новый Структура("Документ", ОбъектСоСвязями);
	ОткрытьФорму("Отчет.СтруктураСвязейДокумента.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	
	ИспользоватьПредварительныйПросмотр = Не ИспользоватьПредварительныйПросмотр;
	
	УстановитьВидимостьПредварительногоПросмотра();
	
	ПодключитьОбработчикОжидания("ОбновитьПревью", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Страница1(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница2(Команда)      
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница3(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница4(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте         
Процедура Страница5(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	      

&НаКлиенте
Процедура Страница6(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	  

&НаКлиенте
Процедура Страница7(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	 

&НаКлиенте
Процедура Страница8(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	   

&НаКлиенте
Процедура Страница9(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Назад(Команда)
	
	НомерПорции = НомерПорции - 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	НомерПорции = НомерПорции + 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабПлюс(Команда)
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб + 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабМинус(Команда)                                 
	
	Если Элементы["ДокументPdfПоле"].Масштаб <= 10 Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб - 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотЛево(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация - 90;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотПраво(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация + 90;

КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыбор(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СтраницаВыборЗавершение", ЭтотОбъект);
	ОбзорФайловКлиент.ВыбратьСтраницуДинамическогоСписка(
		ЭтотОбъект,
		Команда,
		НомерПорции,
		ВсегоПорцийПредпросмотра,
		ОповещениеОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//типы связей курсивом
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСвязейПредставление.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСвязей.ЭтоСвязь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , Истина));
	
	//важные типы связей полужирным 
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСвязейПредставление.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСвязей.ВажнаяСвязь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина, ));
	
	
	// Помеченные на удаление - зачеркнутым
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСвязей.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСвязей.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина));
	
КонецПроцедуры

#Область ЗагрузкаДанныхВДеревоСвязей

// Формирует набор данных, необходимых для построения поддерева связей по документам.
//
//
&НаСервереБезКонтекста
Функция СведенияОВеткеСвязейДокументов(Знач Объект, Знач ВключатьУдаленныеДокументыИФайлы,
	Знач ТолькоОригиналыФайлов, ТолькоВажные, ПорядокСортировки, КорневойОбъект, Знач ТипСвязиДляОтбора = Неопределено)
	
	ТипыСвязейПоПорядку = Новый Массив;
	ТипыСвязейСДокументами = Новый Соответствие;
	ТипыСвязанныхДокументов = Новый Соответствие;
	СведенияОСвязанныхДокументах = Новый Соответствие;
	//сначала нужен запрос к РС с дроблением типов документов из параметра
	
	ЗапросСвязиДокумента = Новый Запрос;
	
	ЗапросСвязиДокумента.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТипыСвязей.Ссылка КАК ТипСвязи,
		|	ТипыСвязей.СокращенноеНаименование КАК ТипСвязиПредставление,
		|	СвязиОбъектов.ДатаУстановки КАК ДатаУстановки,
		|	СвязиОбъектов.СвязанныйОбъект КАК СвязанныйОбъект,
		|	СвязиОбъектов.СвязаннаяСтрока КАК СвязаннаяСтрока,
		|	СвязиОбъектов.Комментарий КАК Комментарий,
		|	1 КАК Приоритет,
		|	ЛОЖЬ КАК Важная,
		|	ЕСТЬNULL(СвязиОбъектов.ДополнительныйОбъектСвязи, НЕОПРЕДЕЛЕНО) КАК ДополнительныйОбъектСвязи,
		|	ПРЕДСТАВЛЕНИЕ(СвязиОбъектов.ДополнительныйОбъектСвязи) КАК ДополнительныйОбъектСвязиПредставление
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыСвязей КАК ТипыСвязей
		|		ПО СвязиОбъектов.ТипСвязи = ТипыСвязей.Ссылка
		|ГДЕ
		|	СвязиОбъектов.Объект = &Документ
		|	И ВЫБОР
		|		КОГДА &ОтборПоСвязям
		|			ТОГДА СвязиОбъектов.ТипСвязи = &ТипСвязи
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|УПОРЯДОЧИТЬ ПО
		|	ТипыСвязей.СокращенноеНаименование,
		|	СвязиОбъектов.ДатаУстановки УБЫВ";
		
	// добавить настраиваемый порядок
	
	ЗапросСвязиДокумента.УстановитьПараметр("Документ", Объект);
	ЗапросСвязиДокумента.УстановитьПараметр("ОтборПоСвязям", ЗначениеЗаполнено(ТипСвязиДляОтбора));
	ЗапросСвязиДокумента.УстановитьПараметр("ТипСвязи", ТипСвязиДляОтбора);
	
	РезультатЗапросаСвязиДокумента = ЗапросСвязиДокумента.Выполнить();
	Если РезультатЗапросаСвязиДокумента.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДетальныеЗаписиТаблица = РезультатЗапросаСвязиДокумента.Выгрузить();
	
	// заполним признак для сортировки
	Для Каждого ВыборкаДетальныеЗаписи Из ДетальныеЗаписиТаблица Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СвязанныйОбъект)
			И Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СвязаннаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		Настройка = СвязиОбъектов.ПолучитьНастройкуСвязи(
			Объект, ВыборкаДетальныеЗаписи.СвязанныйОбъект, ВыборкаДетальныеЗаписи.ТипСвязи);
			
		Если Настройка <> Неопределено Тогда	
			ВыборкаДетальныеЗаписи.Важная = Настройка.Важная;
			
			Если Настройка.Важная Или Настройка.Обязательная Тогда
				ВыборкаДетальныеЗаписи.Приоритет = 0;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;	
	
	ДетальныеЗаписиТаблица.Сортировать("Приоритет, ТипСвязиПредставление, ДатаУстановки УБЫВ");
	
	Для Каждого ВыборкаДетальныеЗаписи Из ДетальныеЗаписиТаблица Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СвязанныйОбъект)
			И Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СвязаннаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		//  сам документ (из которого открыли форму связей) - не добавляем по связям
		Если ВыборкаДетальныеЗаписи.СвязанныйОбъект = КорневойОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		СвязанныйДокументСтрока = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СвязанныйОбъект),
			ВыборкаДетальныеЗаписи.СвязанныйОбъект,
			ВыборкаДетальныеЗаписи.СвязаннаяСтрока);
			
		Если ТолькоВажные И Не ВыборкаДетальныеЗаписи.Важная Тогда
			Продолжить;
		КонецЕсли;
			
		СведенияОДокументе = Новый Структура();
		СведенияОДокументе.Вставить("Комментарий", ВыборкаДетальныеЗаписи.Комментарий);
		СведенияОДокументе.Вставить("ИндексКартинки", -1);
		СведенияОДокументе.Вставить("СвязаннаяСтрока", Неопределено);
		СведенияОДокументе.Вставить("СвязанныйОбъект", Неопределено);
		СведенияОДокументе.Вставить("ДатаСвязи", ВыборкаДетальныеЗаписи.ДатаУстановки);
		
		СведенияОДокументе.Вставить("Файлы", Новый Массив);
		СведенияОДокументе.Вставить("РолиФайлов", Новый Массив);
		
		СведенияОДокументе.Вставить("ЕстьСвязи", Ложь);
		СведенияОДокументе.Вставить("ЭтоВеткаСвязи", Ложь);
		
		СведенияОДокументе.Вставить("ПометкаУдаления", Ложь);
		СведенияОДокументе.Вставить("Сумма", Неопределено);
		СведенияОДокументе.Вставить("НомерДокумента", Неопределено);
		СведенияОДокументе.Вставить("ДатаДокумента", Неопределено);
		
		СведенияОДокументе.Вставить("ВидДокумента", Неопределено);
		
		СведенияОДокументе.Вставить("ВажнаяСвязь", ВыборкаДетальныеЗаписи.Важная);
		
		
		ПредставлениеСвязанногоДокумента = "";
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СвязанныйОбъект) Тогда
			
			ДокументыОдногоТипа = ТипыСвязанныхДокументов.Получить(
				ТипЗнч(ВыборкаДетальныеЗаписи.СвязанныйОбъект));
			Если ДокументыОдногоТипа = Неопределено Тогда
				ДокументыОдногоТипа = Новый Массив;
			КонецЕсли;
			ДокументыОдногоТипа.Добавить(ВыборкаДетальныеЗаписи.СвязанныйОбъект);
			ТипыСвязанныхДокументов.Вставить(
				ТипЗнч(ВыборкаДетальныеЗаписи.СвязанныйОбъект), ДокументыОдногоТипа);
			
			СведенияОДокументе.СвязанныйОбъект = ВыборкаДетальныеЗаписи.СвязанныйОбъект;
			
		Иначе
			
			СведенияОДокументе.СвязаннаяСтрока = ВыборкаДетальныеЗаписи.СвязаннаяСтрока;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Комментарий) Тогда
				ПредставлениеСвязанногоДокумента 
					= СтрШаблон(НСтр("ru = '%1 (Внешняя ссылка)'"), ВыборкаДетальныеЗаписи.Комментарий);
			Иначе
				ПредставлениеСвязанногоДокумента = ВыборкаДетальныеЗаписи.СвязаннаяСтрока;
			КонецЕсли;
			
		КонецЕсли;
		
		СведенияОДокументе.Вставить("Представление", ПредставлениеСвязанногоДокумента);
		
		СведенияОСвязанныхДокументах.Вставить(СвязанныйДокументСтрока, СведенияОДокументе);
		
		
		КлючТипаСвязи = СтрШаблон("%1%2",
							XMLСтрока(ВыборкаДетальныеЗаписи.ТипСвязи),
							XMLСтрока(ВыборкаДетальныеЗаписи.ДополнительныйОбъектСвязи));
		
		СведенияОТипеСвязи = ТипыСвязейСДокументами.Получить(КлючТипаСвязи);
		Если СведенияОТипеСвязи = Неопределено Тогда
			
			ТипыСвязейПоПорядку.Добавить(КлючТипаСвязи);
			
			СведенияОТипеСвязи = Новый Структура();
			СведенияОТипеСвязи.Вставить("СвязанныеДокументы", Новый Массив);
			СведенияОТипеСвязи.СвязанныеДокументы.Добавить(СвязанныйДокументСтрока);
			СведенияОТипеСвязи.Вставить("ДополнительныйОбъектСвязи", 
				ВыборкаДетальныеЗаписи.ДополнительныйОбъектСвязиПредставление);
			СведенияОТипеСвязи.Вставить("ТипСвязи", ВыборкаДетальныеЗаписи.ТипСвязи);
			
			ПредставлениеТипаСвязи = "";
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДополнительныйОбъектСвязи) Тогда 
				ПредставлениеТипаСвязи =
					СтрШаблон("%1, %2",
						ВыборкаДетальныеЗаписи.ТипСвязиПредставление,
						ВыборкаДетальныеЗаписи.ДополнительныйОбъектСвязиПредставление);
			Иначе 
				ПредставлениеТипаСвязи = ВыборкаДетальныеЗаписи.ТипСвязиПредставление;
			КонецЕсли;
			СведенияОТипеСвязи.Вставить("Представление", ПредставлениеТипаСвязи);
			
		Иначе
			
			СведенияОТипеСвязи.СвязанныеДокументы.Добавить(СвязанныйДокументСтрока);
			
		КонецЕсли;
		
		ТипыСвязейСДокументами.Вставить(КлючТипаСвязи, СведенияОТипеСвязи);
		
	КонецЦикла;
	
	
	ВыборкаДетальныеЗаписи = Неопределено;
	ВыборкаТипСвязиДопОбъект = Неопределено;
	ВыборкаТипСвязи = Неопределено;
	РезультатЗапросаСвязиДокумента = Неопределено;
	ЗапросСвязиДокумента = Неопределено;
	
	Если ТипыСвязанныхДокументов.Количество() > 0 Тогда
		
		ЗапросФайлы = Новый Запрос;
		ЗапросРеквизиты = Новый Запрос;
		ТекстЗапросаФайлы = Новый Массив;
		ТекстЗапросаРеквизиты = Новый Массив;
		Для Каждого ТипСвязанныхДокументов Из ТипыСвязанныхДокументов Цикл
			
			ОчереднойТип = ТипСвязанныхДокументов.Ключ;
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ОчереднойТип);
			ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
			ИмяПараметраСсылки = СтрШаблон("Ссылки%1", СтрЗаменить(ПолноеИмяМетаданных, ".", ""));
			
			// Сформируем запрос получения сведений о файлах связанных документов по каждому типу отдельно.
			ТекстЗапроса = СтрЗаменить(
				"ВЫБРАТЬ
				|	Файлы.ВладелецФайла КАК Объект,
				|	Файлы.Ссылка КАК Ссылка,
				|	Файлы.Наименование КАК Наименование,
				|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
				|	Файлы.ИндексКартинки КАК ИндексКартинки,
				|	Файлы.ТекущаяВерсияРасширение КАК РасширениеФайла,
				|	Файлы.ТекущаяВерсияРазмер / 1024 КАК Размер,
				|	ЕСТЬNULL(СведенияОФайлахДокументооборот.ЯвляетсяОригиналом, ЛОЖЬ) КАК ЯвляетсяОригиналом
				|ИЗ
				|	Справочник.Файлы КАК Файлы
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
				|		ПО (СведенияОФайлахДокументооборот.Файл = Файлы.Ссылка)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
				|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
				|ГДЕ
				|	Файлы.ВладелецФайла В(&ПараметрСсылки)
				|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL",
				"ПараметрСсылки",
				ИмяПараметраСсылки);
			
			ТекстЗапросаФайлы.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			ТекстЗапросаФайлы.Добавить(ТекстЗапроса);
			Если Не ВключатьУдаленныеДокументыИФайлы Тогда
				ТекстЗапросаФайлы.Добавить("И НЕ Файлы.ПометкаУдаления");
			КонецЕсли;
			Если ТолькоОригиналыФайлов Тогда
				ТекстЗапросаФайлы.Добавить("И СведенияОФайлахДокументооборот.ЯвляетсяОригиналом = ИСТИНА");
			КонецЕсли;
			
			// Сформируем запрос получения подробных сведений о связанных документах.
			Если ОчереднойТип = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				
				ТекстЗапроса = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ДокументыПредприятия.Ссылка КАК Ссылка,
					|	ДокументыПредприятия.ПометкаУдаления КАК ПометкаУдаления,
					|	ДокументыПредприятия.ВидДокумента КАК ВидДокумента,
					|	ДокументыПредприятия.Заголовок КАК Наименование,
					|	ВЫБОР
					|		КОГДА ДокументыПредприятия.РегистрационныйНомер <> """"
					|			ТОГДА ДокументыПредприятия.РегистрационныйНомер
					|		ИНАЧЕ ДокументыПредприятия.ВременныйНомер
					|	КОНЕЦ КАК НомерДокумента,
					|	ВЫБОР
					|		КОГДА ДокументыПредприятия.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
					|			ТОГДА ДокументыПредприятия.ДатаРегистрации
					|		ИНАЧЕ ДокументыПредприятия.ДатаСоздания
					|	КОНЕЦ КАК ДатаДокумента,
					|	ДокументыПредприятия.ВидДокумента.УчитыватьСуммуДокумента КАК ВидДокументаУчитыватьСуммуДокумента,
					|	ДокументыПредприятия.Сумма КАК СуммаДокумента,
					|	ДокументыПредприятия.Валюта.Наименование КАК ВалютаНаименование,
					|	1 В
					|		(ВЫБРАТЬ ПЕРВЫЕ 1
					|			1
					|		ИЗ
					|			РегистрСведений.СвязиОбъектов КАК СвязиДокументовВложенные
					|		ГДЕ
					|			СвязиДокументовВложенные.Объект = ДокументыПредприятия.Ссылка) КАК ЕстьСвязи
					|ИЗ
					|	#ДокументыПредприятия КАК ДокументыПредприятия
					|ГДЕ
					|	ДокументыПредприятия.Ссылка В(&ПараметрСсылки)";
				
			Иначе
				
				ТекстЗапроса = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ДокументыПредприятия.Ссылка КАК Ссылка,
					|	ДокументыПредприятия.ПометкаУдаления КАК ПометкаУдаления, 
					|	Неопределено КАК ВидДокумента,
					|	ДокументыПредприятия.Представление КАК Наименование,
					|	"""" КАК НомерДокумента,
					|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДокумента,
					|	ЛОЖЬ КАК ВидДокументаУчитыватьСуммуДокумента,
					|	0 КАК СуммаДокумента,
					|	"""" КАК ВалютаНаименование,
					|	1 В
					|		(ВЫБРАТЬ ПЕРВЫЕ 1
					|			1
					|		ИЗ
					|			РегистрСведений.СвязиОбъектов КАК СвязиДокументовВложенные
					|		ГДЕ
					|			СвязиДокументовВложенные.Объект = ДокументыПредприятия.Ссылка) КАК ЕстьСвязи
					|ИЗ
					|	#ДокументыПредприятия КАК ДокументыПредприятия
					|ГДЕ
					|	ДокументыПредприятия.Ссылка В(&ПараметрСсылки)";
				
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПараметрСсылки", ИмяПараметраСсылки);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДокументыПредприятия", ПолноеИмяМетаданных);
			
			Если ТекстЗапросаРеквизиты.Количество() > 0 Тогда 
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
			КонецЕсли;
			
			ТекстЗапросаРеквизиты.Добавить(ТекстЗапроса);
			
			ЗапросФайлы.УстановитьПараметр(ИмяПараметраСсылки, ТипСвязанныхДокументов.Значение);
			ЗапросРеквизиты.УстановитьПараметр(ИмяПараметраСсылки, ТипСвязанныхДокументов.Значение);
			
		КонецЦикла;
		
		ТекстЗапросаФайлы.Удалить(0); // Удалим первое вхождение "ОБЪЕДИНИТЬ ВСЕ".
		ЗапросФайлы.Текст = СтрСоединить(ТекстЗапросаФайлы, Символы.ПС);
		ТекстЗапросаФайлы.Очистить();
		ТекстЗапросаФайлы = Неопределено;
		
		РезультатЗапросаФайлы = ЗапросФайлы.Выполнить();
		ВыборкаДетальныеЗаписиФайлыТаблица = РезультатЗапросаФайлы.Выгрузить();           
		
		МассивФайлов = Новый Массив;
		Для Каждого ВыборкаДетальныеЗаписиФайлы Из ВыборкаДетальныеЗаписиФайлыТаблица Цикл
			МассивФайлов.Добавить(ВыборкаДетальныеЗаписиФайлы.Ссылка);
		КонецЦикла;	
		
		// Прочитаем РолиФайловДокументов для массива файлов.
		ЗапросРолиФайлов = Новый Запрос(
			"ВЫБРАТЬ
			|	РолиФайловДокументов.Файл КАК Файл,
			|	РолиФайловДокументов.Роль КАК Роль
			|ИЗ
			|	РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
			|ГДЕ
			|	РолиФайловДокументов.Файл В(&Файлы)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Файл");
		ЗапросРолиФайлов.УстановитьПараметр("Файлы", МассивФайлов);
		ТаблРоли = ЗапросРолиФайлов.Выполнить().Выгрузить();
		
		Для Каждого ВыборкаДетальныеЗаписиФайлы Из ВыборкаДетальныеЗаписиФайлыТаблица Цикл
			
			СведенияОФайле = Новый Структура(
				"Файл,Представление,ПометкаУдаления,ИндексКартинки,ЯвляетсяОригиналом,РасширениеФайла, Размер, РольФайла");
			ЗаполнитьЗначенияСвойств(СведенияОФайле, ВыборкаДетальныеЗаписиФайлы);
			СведенияОФайле.Представление = ВыборкаДетальныеЗаписиФайлы.Наименование;
			СведенияОФайле.Файл = ВыборкаДетальныеЗаписиФайлы.Ссылка;
			
			ПараметрыОтбора = Новый Структура("Файл", ВыборкаДетальныеЗаписиФайлы.Ссылка);
			СтрокиРолей = ТаблРоли.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиРолей.Количество() <> 0 Тогда
				
				ТекРоль = СтрокиРолей[0].Роль;
				СведенияОФайле.РольФайла = ТекРоль;
				
			КонецЕсли;	
			
			СведенияОДокументе = СведенияОСвязанныхДокументах.Получить(
				ВыборкаДетальныеЗаписиФайлы.Объект);
			СведенияОДокументе.Файлы.Добавить(СведенияОФайле);
			
		КонецЦикла;
		
		ВыборкаДетальныеЗаписиФайлы = Неопределено;
		РезультатЗапросаФайлы = Неопределено;
		ЗапросФайлы = Неопределено;
		
		ЗапросРеквизиты.Текст = СтрСоединить(ТекстЗапросаРеквизиты, " ОБЪЕДИНИТЬ ВСЕ ");
		ТекстЗапросаРеквизиты.Очистить();
		ТекстЗапросаРеквизиты = Неопределено;
		
		РезультатЗапросаРеквизиты = ЗапросРеквизиты.Выполнить();
		ВыборкаДетальныеЗаписиРеквизиты = РезультатЗапросаРеквизиты.Выбрать();
		Пока ВыборкаДетальныеЗаписиРеквизиты.Следующий() Цикл
			
			Если Не ВключатьУдаленныеДокументыИФайлы И ВыборкаДетальныеЗаписиРеквизиты.ПометкаУдаления Тогда
				СведенияОСвязанныхДокументах.Удалить(ВыборкаДетальныеЗаписиРеквизиты.Ссылка);
				Продолжить;
			КонецЕсли;
			
			СведенияОДокументе = СведенияОСвязанныхДокументах.Получить(ВыборкаДетальныеЗаписиРеквизиты.Ссылка);
			ЗаполнитьЗначенияСвойств(СведенияОДокументе, ВыборкаДетальныеЗаписиРеквизиты);
			
			Если ЗначениеЗаполнено(СведенияОДокументе.ВидДокумента) Тогда
				РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(СведенияОДокументе.ВидДокумента);
				СведенияОДокументе.Вставить("РолиФайлов", РолиФайлов.ВыгрузитьКолонку("Роль"));
			Иначе
				СведенияОДокументе.Вставить("РолиФайлов", Новый Массив);
			КонецЕсли;
			
			ИмяПредмета = МультипредметностьВызовСервера.ИмяПредметаСтрокой(
					ВыборкаДетальныеЗаписиРеквизиты.Ссылка);
				
			СведенияОДокументе.Представление =
				СтрШаблон("%1 (%2)", ВыборкаДетальныеЗаписиРеквизиты.Наименование, ИмяПредмета);
				
			Если ВыборкаДетальныеЗаписиРеквизиты.ВидДокументаУчитыватьСуммуДокумента = Истина
				И ВыборкаДетальныеЗаписиРеквизиты.СуммаДокумента > 0 Тогда
				
				Копейки =
					ВыборкаДетальныеЗаписиРеквизиты.СуммаДокумента 
					- Цел(ВыборкаДетальныеЗаписиРеквизиты.СуммаДокумента);
				СведенияОДокументе.Сумма =
					СтрШаблон("%1 %2",
						Формат(ВыборкаДетальныеЗаписиРеквизиты.СуммаДокумента,
							?(Копейки = 0, "ЧДЦ=0; ЧН=0", "ЧДЦ=2; ЧН=0; ЧРД=.")),
						ВыборкаДетальныеЗаписиРеквизиты.ВалютаНаименование);
				
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЕсли;
		
	// тут сортируем СвязанныеДокументы
	Для Каждого КлючТипаСвязи Из ТипыСвязейПоПорядку Цикл
		
		СведенияОТипеСвязей = ТипыСвязейСДокументами.Получить(КлючТипаСвязи);
		
		ТаблицаДокументов = Новый ТаблицаЗначений;
		ТаблицаДокументов.Колонки.Добавить("Объект");
		
		КвалифДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		ОписаниеТипов = Новый ОписаниеТипов("Дата", ,,,, КвалифДаты);
		ТаблицаДокументов.Колонки.Добавить("ДатаДокумента", ОписаниеТипов);
		ТаблицаДокументов.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("ВидДокумента");
		
		Для Каждого ТекОбъект Из СведенияОТипеСвязей.СвязанныеДокументы Цикл
			
			НовСтр = ТаблицаДокументов.Добавить();
			НовСтр.Объект = ТекОбъект;
			СведенияОДокументе = СведенияОСвязанныхДокументах.Получить(ТекОбъект);
			Если СведенияОДокументе <> Неопределено Тогда
				НовСтр.ДатаДокумента = СведенияОДокументе.ДатаДокумента;
				НовСтр.НомерДокумента = СведенияОДокументе.НомерДокумента;
				НовСтр.ВидДокумента = СведенияОДокументе.ВидДокумента;
			КонецЕсли;
			
		КонецЦикла;	
		
		ТаблицаДокументов.Сортировать(ПорядокСортировки);
		СвязанныеДокументыНовый = Новый Массив;
		Для Каждого Стр Из ТаблицаДокументов Цикл
			СвязанныеДокументыНовый.Добавить(Стр.Объект);
		КонецЦикла;	
		
		СведенияОТипеСвязей.СвязанныеДокументы = СвязанныеДокументыНовый;
		
	КонецЦикла;	
		
		
	//понять есть ли связи дальше - надо сделать отдельный запрос по связям - сгруппировать по видам документов
	// можно будет переделать на запрос к новому РС где будут содержаться количества связей
	
	ПоказыватьТолькоОригиналыВСвязях = Ложь;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда 
		ПоказыватьТолькоОригиналыВСвязях = ПоказыватьТолькоОригиналыВСвязях;
	КонецЕсли;	
	
	Результат = Новый Структура(
		"ТипыСвязейПоПорядку,ТипыСвязейСДокументами,ТипыСвязанныхДокументов,СведенияОСвязанныхДокументах",
		ТипыСвязейПоПорядку,
		ТипыСвязейСДокументами,
		ТипыСвязанныхДокументов,
		СведенияОСвязанныхДокументах);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСвязи()
	
	ВыведенныеОбъекты.Очистить();
	
	Если ОбъектСоСвязями.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	ПрочитаноСвязей = 0;
		
	Дерево = РеквизитФормыВЗначение("ДеревоСвязей");
	Дерево.Строки.Очистить();
	МассивИдСтрокДляРаскрытия = Новый Массив;
	
		ПараметрыВызова = Новый Структура(
		"РаскрываемыйУзелДерева, ОбъектСоСвязями,
		|ПоказыватьУдаленныеСвязи, ПоказыватьТолькоОригиналыВСвязях, 
		|ДокументРодительСвязи,
		|ЭтоМаксимальныйУровеньДереваСвязей, 
		|ТолькоВажные, ПорядокСортировки, КорневойОбъект",
			Дерево,
			ОбъектСоСвязями,
			ПоказыватьУдаленныеСвязи,
			ПоказыватьТолькоОригиналыВСвязях,
			ОбъектСоСвязями,
			Ложь,
			ТолькоВажные,
			ПорядокСортировки,
			ОбъектСоСвязями
		);
	
		ЗаполнитьДеревоСвязейДокумента(
			ПараметрыВызова,
			ПрочитаноСвязей, 
			МассивИдСтрокДляРаскрытия,
			ВыведенныеОбъекты,
			ТипСвязиОтбор);
		
	ЗначениеВРеквизитФормы(Дерево, "ДеревоСвязей");
	
	Элементы.ДекорацияСвязиПрочитаныНеПолностью.Видимость = Ложь;
	
	КомментарийЗамера = СтрШаблон(НСтр("ru = 'Прочитано связей: %1'"), ПрочитаноСвязей);
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ЧтениеСвязей.ОткрытиеФормыСвязей", 
		ВремяНачала,,КомментарийЗамера);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДеревоСвязейДокумента(
	ПараметрыВызова,
	ПрочитаноСвязей, 
	МассивИдСтрокДляРаскрытия,
	ВыведенныеОбъекты,
	ТипСвязиДляОтбора = Неопределено)
	
	ПервыйУровеньСвязей = СведенияОВеткеСвязейДокументов(
							ПараметрыВызова.ОбъектСоСвязями,
							ПараметрыВызова.ПоказыватьУдаленныеСвязи,
							ПараметрыВызова.ПоказыватьТолькоОригиналыВСвязях,
							ПараметрыВызова.ТолькоВажные,
							ПараметрыВызова.ПорядокСортировки,
							ПараметрыВызова.КорневойОбъект,
							ТипСвязиДляОтбора);
	Если ПервыйУровеньСвязей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючТипаСвязи Из ПервыйУровеньСвязей.ТипыСвязейПоПорядку Цикл
		
		СведенияОТипеСвязей = ПервыйУровеньСвязей.ТипыСвязейСДокументами.Получить(КлючТипаСвязи);
		
		НоваяСтрокаТипСвязи = ДобавитьПодчиненнуюСтроку(ПараметрыВызова.РаскрываемыйУзелДерева);
		
		Если ТипЗнч(ПараметрыВызова.РаскрываемыйУзелДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
			НоваяСтрокаТипСвязи.Глубина = ПараметрыВызова.РаскрываемыйУзелДерева.Глубина + 1;
		Иначе
			НоваяСтрокаТипСвязи.Глубина = 1; // тут РаскрываемыйУзелДерева - само Дерево.
		КонецЕсли;		
		
		НоваяСтрокаТипСвязи.Объект = ПараметрыВызова.ОбъектСоСвязями;
		НоваяСтрокаТипСвязи.ЭтоРодитель = Истина;
		НоваяСтрокаТипСвязи.ИндексКартинки = -1;
		НоваяСтрокаТипСвязи.ПометкаУдаления = Ложь;
		НоваяСтрокаТипСвязи.ТипСвязи = СведенияОТипеСвязей.ТипСвязи;
		НоваяСтрокаТипСвязи.ЭтоСвязь = Истина;
		НоваяСтрокаТипСвязи.ДополнительныйОбъектСвязи = СведенияОТипеСвязей.ДополнительныйОбъектСвязи;
		НоваяСтрокаТипСвязи.Представление =
			СтрШаблон("%1 (%2)",
				СведенияОТипеСвязей.Представление,
				СведенияОТипеСвязей.СвязанныеДокументы.Количество());
		
		Для Каждого СвязанныйДокумент Из СведенияОТипеСвязей.СвязанныеДокументы Цикл
			
			СведенияОДокументе = ПервыйУровеньСвязей.СведенияОСвязанныхДокументах.Получить(СвязанныйДокумент);
			Если СведенияОДокументе = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Глубина = НоваяСтрокаТипСвязи.Глубина + 1;
			
			ЭлементСпискаЗначений = ВыведенныеОбъекты.НайтиПоЗначению(СвязанныйДокумент);
			// допускаем добавление дублей на той же глубине
			Если ЭлементСпискаЗначений <> Неопределено 
				И ЭлементСпискаЗначений.Представление <> Строка(Глубина) Тогда
				Продолжить;
			КонецЕсли;
			
			ПрочитаноСвязей = ПрочитаноСвязей + 1;
			
			НоваяСтрокаДокумент = ДобавитьПодчиненнуюСтроку(НоваяСтрокаТипСвязи);
			НоваяСтрокаДокумент.Глубина = НоваяСтрокаТипСвязи.Глубина + 1;
			НоваяСтрокаДокумент.ИндексКартинки = -1;
			НоваяСтрокаДокумент.Объект = ПараметрыВызова.ОбъектСоСвязями;
			НоваяСтрокаДокумент.ТипСвязи = СведенияОТипеСвязей.ТипСвязи;
			НоваяСтрокаДокумент.ДополнительныйОбъектСвязи = СведенияОТипеСвязей.ДополнительныйОбъектСвязи;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумент, СведенияОДокументе);
			
			ВыведенныеОбъекты.Добавить(НоваяСтрокаДокумент.СвязанныйОбъект, Строка(НоваяСтрокаДокумент.Глубина));
			
			// Связанный документ был уровнем выше. Нет смысла загружать его связи еще раз.
			Если СведенияОДокументе.СвязанныйОбъект = ПараметрыВызова.ДокументРодительСвязи Тогда
				НоваяСтрокаДокумент.ЕстьСвязи = Ложь;
				Продолжить;
			КонецЕсли;
			
			// Не даем раскрывать "нижний" уровень связей.
			Если ПараметрыВызова.ЭтоМаксимальныйУровеньДереваСвязей И НоваяСтрокаДокумент.ЕстьСвязи Тогда
				НоваяСтрокаДокумент.ЕстьСвязи = Ложь;
			КонецЕсли;
			
			Если СведенияОДокументе.РолиФайлов.Количество() = 0 Тогда // плоский список
				
				Для Каждого СведенияОФайлеДокумента Из СведенияОДокументе.Файлы Цикл
					
					НоваяСтрокаФайл = ДобавитьПодчиненнуюСтроку(НоваяСтрокаДокумент);
					НоваяСтрокаФайл.Глубина = НоваяСтрокаДокумент.Глубина + 1;
					ЗаполнитьЗначенияСвойств(НоваяСтрокаФайл, СведенияОФайлеДокумента);
					
					НоваяСтрокаДокумент.Объект = ПараметрыВызова.ОбъектСоСвязями;
					НоваяСтрокаФайл.ТипСвязи = СведенияОТипеСвязей.ТипСвязи;
					НоваяСтрокаФайл.ДополнительныйОбъектСвязи = СведенияОТипеСвязей.ДополнительныйОбъектСвязи;
					
				КонецЦикла;
				
			Иначе  // дерево с ролями	   
				
				Для Каждого Роль Из СведенияОДокументе.РолиФайлов Цикл
					
					НоваяСтрокаРоль = ДобавитьПодчиненнуюСтроку(НоваяСтрокаДокумент);
					НоваяСтрокаРоль.Глубина = НоваяСтрокаДокумент.Глубина + 1;
					НоваяСтрокаРоль.ЭтоРольФайла = Истина;  
					НоваяСтрокаРоль.ИндексКартинки = 2;
					НоваяСтрокаРоль.Представление =  Роль;
					
					НоваяСтрокаРоль.ТипСвязи = СведенияОТипеСвязей.ТипСвязи;
					НоваяСтрокаРоль.ДополнительныйОбъектСвязи = СведенияОТипеСвязей.ДополнительныйОбъектСвязи;
					
					#Если Клиент Тогда
						МассивИдСтрокДляРаскрытия.Добавить(НоваяСтрокаРоль.ПолучитьИдентификатор());
					#КонецЕсли
					
					Для Каждого СведенияОФайлеДокумента Из СведенияОДокументе.Файлы Цикл
						
						Если СведенияОФайлеДокумента.РольФайла <> Роль Тогда
							Продолжить;
						КонецЕсли;	
						
						НоваяСтрокаФайл = ДобавитьПодчиненнуюСтроку(НоваяСтрокаРоль);
						НоваяСтрокаФайл.Глубина = НоваяСтрокаДокумент.Глубина + 1;
						ЗаполнитьЗначенияСвойств(НоваяСтрокаФайл, СведенияОФайлеДокумента);
						
						НоваяСтрокаДокумент.Объект = ПараметрыВызова.ОбъектСоСвязями;
						НоваяСтрокаФайл.ТипСвязи = СведенияОТипеСвязей.ТипСвязи;
						НоваяСтрокаФайл.ДополнительныйОбъектСвязи = СведенияОТипеСвязей.ДополнительныйОбъектСвязи;
						
					КонецЦикла;
					
				КонецЦикла;	
				
			КонецЕсли;
			
			// Добавим псевдостроку, чтобы был плюсик для раскрытия ниже.
			Если НоваяСтрокаДокумент.ЕстьСвязи Тогда
				
				НоваяСтрокаСвязи = ДобавитьПодчиненнуюСтроку(НоваяСтрокаДокумент);
				НоваяСтрокаСвязи.Глубина = НоваяСтрокаДокумент.Глубина + 1;
				НоваяСтрокаСвязи.Представление = НСтр("ru = 'Связи'");
				НоваяСтрокаСвязи.ЭтоВеткаСвязи = Истина;
				НоваяСтрокаСвязи.ЕстьСвязи = Истина;
				НоваяСтрокаСвязи.СвязанныйОбъект = НоваяСтрокаДокумент.СвязанныйОбъект;
				
				НоваяСтрокаСлужебная = ДобавитьПодчиненнуюСтроку(НоваяСтрокаСвязи);
				НоваяСтрокаСлужебная.Глубина = НоваяСтрокаСвязи.Глубина + 1;
				НоваяСтрокаСлужебная.СлужебнаяСтрока = Истина;
				
			КонецЕсли;
			
			#Если Клиент Тогда
				МассивИдСтрокДляРаскрытия.Добавить(НоваяСтрокаДокумент.ПолучитьИдентификатор());
			#КонецЕсли
			
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьПодчиненнуюСтроку(РодительскаяСтрока)
	
	#Если Сервер Тогда
	Возврат РодительскаяСтрока.Строки.Добавить();
	#Иначе
	Возврат РодительскаяСтрока.ПолучитьЭлементы().Добавить();
	#КонецЕсли
	
	
КонецФункции

#КонецОбласти //ЗагрузкаДанныхВДеревоСвязей

&НаКлиенте
Процедура ПоказатьОбъектТекущейСтрокиДереваСвязей(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ЭтоРодитель
		Или ТекущиеДанные.ЭтоРольФайла Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда
		РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущиеДанные.Файл, ЭтаФорма);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда
		ПерейтиПоНавигационнойСсылке(ТекущиеДанные.СвязаннаяСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйОбъект) И Не ТекущиеДанные.ЭтоВеткаСвязи Тогда
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьКлючЗаписиСвязиДокументов(ПараметрыКлюча)
	
	КлючЗаписи = РегистрыСведений.СвязиОбъектов.СоздатьКлючЗаписи(ПараметрыКлюча);
	Возврат КлючЗаписи;
	
КонецФункции

&НаСервере
Процедура УдалитьСвязь(Параметры)
	
	Если ЗначениеЗаполнено(Параметры.СвязанныйОбъект) Тогда 
		СвязанныйДокумент = Параметры.СвязанныйОбъект;
	ИначеЕсли ЗначениеЗаполнено(Параметры.СвязаннаяСтрока) Тогда 
		СвязанныйДокумент = Параметры.СвязаннаяСтрока;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Параметры.Документ) Тогда
		
		Если Не СвязиОбъектов.ЭтоПодходящийТипСвязи(Параметры.Документ, СвязанныйДокумент, Параметры.ТипСвязи) Тогда
			
			ВызватьИсключение НСтр("ru = 'Этот тип связи можно менять только в карточке документа.'");
			
		КонецЕсли;	
		
		НастройкаСвязи = СвязиОбъектов.ПолучитьНастройкуСвязи(Параметры.Документ, СвязанныйДокумент, Параметры.ТипСвязи);
		Если НастройкаСвязи <> Неопределено И НастройкаСвязи.Обязательная Тогда
			ВызватьИсключение НСтр("ru = 'Нельзя удалять обязательную связь.'");
		КонецЕсли;	
		
	КонецЕсли;	
	
	СвязиОбъектов.УдалитьСвязь(Параметры.Документ, СвязанныйДокумент, Параметры.ТипСвязи,, Истина);
	
	ЗаполнитьСвязи();
	
КонецПроцедуры

&наКлиенте
Процедура РазвернутьПервыйУровеньДереваСвязей()
	
	КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Ложь);
		
		
		// уровень файлов тоже раскроем
		КоллекцияСтрокДочерняя = Строка.ПолучитьЭлементы();
		Для Каждого СтрокаДочерняя Из КоллекцияСтрокДочерняя Цикл
			ИдентификаторСтроки = СтрокаДочерняя.ПолучитьИдентификатор();
			
			Если Не СтрокаДочерняя.ЭтоРольФайла Тогда
				Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Ложь);
			Иначе
				Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
			КонецЕсли;	
			
			
			// уровень ролей тоже раскроем
			КоллекцияСтрокДочерняя3 = СтрокаДочерняя.ПолучитьЭлементы();
			Для Каждого СтрокаДочерняя3 Из КоллекцияСтрокДочерняя3 Цикл
				ИдентификаторСтроки = СтрокаДочерняя3.ПолучитьИдентификатор();
				
				Если СтрокаДочерняя3.ЭтоРольФайла Тогда
					Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПревью()
	
	ПоказатьОбзор();
	
КонецПроцедуры

// Предварительный просмотр.

&НаКлиенте
Процедура УстановитьВидимостьПредварительногоПросмотра()
	
	Элементы.ДеревоСвязейПредварительныйПросмотр.Пометка = ИспользоватьПредварительныйПросмотр;
	Элементы.ГруппаПредставлениеHTML.Видимость = ИспользоватьПредварительныйПросмотр;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбзор()
	
	Если Не ИспользоватьПредпросмотрФайлов Или Не ИспользоватьПредварительныйПросмотр Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Возврат;
	КонецЕсли;

	ТекущийФайл = ТекущиеДанные.Файл;
	ТекущийДокумент = ТекущиеДанные.СвязанныйОбъект;

	Если ЗначениеЗаполнено(ТекущийФайл) Тогда             
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.РасширениеФайла;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.Размер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML);
		
		ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
		ОбновитьКнопкиДинамическогоСпискаКлиент();
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущийДокумент) И ДелопроизводствоКлиентСервер.ЭтоДокумент(ТекущийДокумент) Тогда
		ДанныеМиникарточки = ОбзорСпискаДокументов.ПолучитьДанныеМиникарточки(ТекущийДокумент);
		ПредставлениеHTML = ДанныеМиникарточки.Обзор;
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
	ИначеЕсли ЗначениеЗаполнено(ТекущийДокумент) И ОбзорОбъектовКлиентСервер.ЭтоИзвестныйОбъектОбзора(ТекущийДокумент) Тогда
		ДанныеОбзораОбъекта = ОбзорОбъектовКлиент.ДанныеОбзораОбъекта(ТекущийДокумент, УникальныйИдентификатор);
		ПредставлениеHTML = ДанныеОбзораОбъекта.ТекстHTML;
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
	Иначе
		ПредставлениеHTML = "<html><body></body></html>";
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВывестиPDFДокументНаСервере()
	
	СведенияОДокументеPDF = РаботаСPDFПовтИсп.НовыеСведенияОPDFДокументеНаФорме();
	СведенияОДокументеPDF.ИмяРодителяКоманды = "ГруппаКомандPdf";	
	
	РаботаСPDF.ВывестиPDFДокументНаФорму(ЭтотОбъект, СведенияОДокументеPDF);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиПорционногоПредпросмотра()
	
	ИмяРодителяКоманды = "ГруппаСтраницыКнопкиПеремотки";
	ОбзорФайловСервер.СоздатьКнопкиПорционногоПредпросмотра(ЭтотОбъект, ИмяРодителяКоманды);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКнопкиДинамическогоСписка()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкиДинамическогоСпискаКлиент()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыборЗавершение(НоваяСтраница, ДополнительныеПараметры) Экспорт
	
	ЧастьВыбор(НоваяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастьВыбор(НоваяСтраница)
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерПорции = НоваяСтраница;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийФайл = ТекущиеДанные.Файл; 
	КонецЕсли;	
	
	ДокументPDF = Неопределено;
	
	ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();      
	ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
	ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.РасширениеФайла;
	ПараметрыHTMLПредставление.Размер = ТекущиеДанные.Размер;
	ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
	
	ПараметрыHTMLПредставление.НомерПорции = НомерПорции - 1; // номера для пользователя - с 1, в СУБД - с 0
	
	ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
		ТекущийФайл,
		ПараметрыHTMLПредставление,
		ДокументPDF);
	
	ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML);
	
	Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
	МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
	
	ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
	
	Если ДокументPDF = Неопределено Тогда
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
	Иначе
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
		ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
		Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
	КонецЕсли;     
	
	ОбновитьКнопкиДинамическогоСпискаКлиент();
	
КонецПроцедуры

#КонецОбласти
