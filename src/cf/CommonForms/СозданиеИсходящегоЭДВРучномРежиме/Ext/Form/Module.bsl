
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	 
	ПараметрыСозданияЭД = Параметры.ПараметрыСозданияЭД; // см. ОбменСКонтрагентамиКлиент.НовыеПараметрыСозданияЭлектронногоДокументаПоФайлу
	ТекущийДокументЭДО = Параметры.ТекущийДокументЭДО;
	
	ПараметрыОбмена = ПараметрыСозданияЭД.ПараметрыОбмена;
	ДополнительныеПараметры = ПараметрыСозданияЭД.ДополнительныеПараметры; //см. ИнтерфейсЭДОДокументооборот.ДополнительныеПараметрыСозданияИсходящегоДокумента
	СтороныЭД = ДополнительныеПараметры.СтороныОбмена; // см. ИнтерфейсЭДОДокументооборот.НоваяСтруктураСторонОбмена
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСозданияЭД);
	Объект = ПараметрыСозданияЭД.ОбъектыУчета[0];
	ВидДокументаДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ВидДокумента");
	ВидДокументаЭДО = ПараметрыСозданияЭД.ВидДокумента;
	ВыбранныйФайл = ДополнительныеПараметры.ФайлЭД;
	ОбменЭДОДокументооборот.УстановитьПараметрыВыбораВидаДокументаЭДО(ЭтотОбъект);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДополнительныеПараметры);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыОбмена);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтороныЭД,, "СтороныИсключения");
	
	Элементы.Отправитель.СписокВыбора.ЗагрузитьЗначения(СтороныЭД.Отправители);
	Элементы.Получатель.СписокВыбора.ЗагрузитьЗначения(СтороныЭД.Получатели);
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Получатель = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;		
	ЗаполнитьИдентификаторыОтправителя(СтороныЭД.ИдентификаторыОтправителя, Ложь);
	ЗаполнитьИдентификаторыПолучателя(СтороныЭД.ИдентификаторыПолучателя, Ложь);
	Если ЕстьСтороныИсключения Тогда
		Для Каждого Сторона Из СтороныЭД.СтороныИсключения Цикл
			ЗаполнитьЗначенияСвойств(СтороныИсключения.Добавить(), Сторона);
		КонецЦикла;	
	КонецЕсли;	
	
	ОтборФорматов = ЭлектронныеДокументыЭДО.НовыйОтборФорматовЭлектронныхДокументов();
	ОтборФорматов.Действует = Истина;
	ФорматыЭД.Загрузить(ЭлектронныеДокументыЭДО.ФорматыЭлектронныхДокументов(ОтборФорматов));
	НастроитьВыборОбщегоФорматаЭД();
	ЗаполнитьНастройкиРегламентаЭД(Ложь);	
	
	ЗаполнитьПредставленияРеквизитов(ЭтотОбъект);
			
	Делопроизводство.ЗаполнитьСписокФайловДокумента(ЭтотОбъект, Истина, Ложь, Истина, Истина);
	
	УстановитьОтметкиРедактирования(ЭтотОбъект);	
	УстановитьВидимостьРеквизитов(ЭтотОбъект);
	УстановитьУсловноеОформление();
	
	Элементы.СуммаДокумента.ТолькоПросмотр = ЗначениеЗаполнено(СуммаДокумента);
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда // запрещаем менять поля        
		
		РеквизитыПрежние = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокументЭДО, 
			"НомерДокумента, Организация, Контрагент, ИдентификаторКонтрагента, ИдентификаторОрганизации, ВидДокумента, ФорматОсновногоТитула");
		
		НомерДокумента = РеквизитыПрежние.НомерДокумента;
		ИдентификаторОтправителя = РеквизитыПрежние.ИдентификаторОрганизации;
		ИдентификаторПолучателя = РеквизитыПрежние.ИдентификаторКонтрагента;
		Отправитель = РеквизитыПрежние.Организация;
		Получатель = РеквизитыПрежние.Контрагент;
		
		ВидДокументаЭДО = РеквизитыПрежние.ВидДокумента;
		Формат = РеквизитыПрежние.ФорматОсновногоТитула;
		
		ДатаДокумента = ТекущаяДатаСеанса();
		
		Элементы.РедактироватьОтправителя.Видимость = Ложь;
		Элементы.РедактироватьПолучателя.Видимость = Ложь;
		Элементы.РедактироватьВидДокумента.Видимость = Ложь;
		Элементы.РедактироватьРегламент.Видимость = Ложь;  
		
		ПрежнийФайл = РегистрыСведений.ФайлыУчаствующиеВЭДО.ОтправленныйФайлПоДокументуЭДО(ТекущийДокументЭДО);
		Если ЗначениеЗаполнено(ПрежнийФайл) Тогда 
			
			ВыбранныйФайл = ПрежнийФайл; 
			
		КонецЕсли;
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
		   И Параметр.Свойство("Владелец")
		   И Параметр.Владелец = Объект Тогда
			
			ЗаполнитьСписокФайловКлиент();
			УстановитьФлагЕслиФайлОдин();
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект Тогда
		
		ЗаполнитьСписокФайловКлиент();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлыДокументаПомеченыНаУдаление" Тогда
		ЗаполнитьСписокФайловКлиент();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = Объект Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
		КонецЕсли;
	КонецЕсли;	
			
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоФормализованныйДокумент Тогда
		ПроверяемыеРеквизиты.Добавить("Формат");
		Если ЗначениеЗаполнено(ВыбранныйФайл) И ЗначениеЗаполнено(ВидДокументаЭДО) И ЗначениеЗаполнено(Формат) Тогда
			ПроверкаФайла = ИнтерфейсЭДОДокументооборот.ФайлСоответствуетФормату(ВыбранныйФайл, ВидДокументаЭДО, Формат);
			Если Не ПроверкаФайла.Успех Тогда
				ОбщегоНазначения.СообщитьПользователю(ПроверкаФайла.ОписаниеОшибки,,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан файл документа ЭДО'"),, "Файлы",, Отказ);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтметитьВыбранныйФайлВСписке();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ВидДокументаЭДОПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОтправителяПриИзменении(Элемент)
	
	ИдентификаторОтправителяПриИзмененииНаСервере();
	ЗаполнитьПредставлениеОтправителя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПолучателяПриИзменении(Элемент)
	
	ИдентификаторПолучателяПриИзмененииНаСервере();
	ЗаполнитьПредставлениеПолучателя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматПриИзменении(Элемент)
	
	ФорматПриИзмененииНаСервере();
	ОбменЭДОДокументооборотКлиентСервер.УстановитьВидимостьПодсказкиФорматаЭДО(ЭтотОбъект, Формат, "Формат");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПриИзменении(Элемент)
	
	ОтправительПриИзмененииНаСервере();
	ЗаполнитьПредставлениеОтправителя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
		
	ПолучательПриИзмененииНаСервере();
	ЗаполнитьПредставлениеПолучателя(ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ТребуетсяИзвещениеОПолученииПриИзменении(Элемент)
	
	ЗаполнитьПредставлениеРегламента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяОтветнаяПодписьПриИзменении(Элемент)
	
	ЗаполнитьПредставлениеРегламента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтправителиОтбор = ?(Элемент.СписокВыбора.Количество() > 0, Элемент.СписокВыбора.ВыгрузитьЗначения(), Неопределено);
	ОтправителиИсключения = ОтправителиИсключения();
	ОтправителиЭД = ОбменЭДОДокументооборотВызовСервера.ОтправителиЭД(Получатель, ОтправителиОтбор , ОтправителиИсключения);	
	
	Если ОтправителиЭД.Количество() <= 10 Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(ОтправителиЭД);
	Иначе
		Отбор = Новый Структура("Ссылка", ОтправителиЭД);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму("Справочник.Организации.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ОтправителиОтбор = ?(Элемент.СписокВыбора.Количество() > 0, Элемент.СписокВыбора.ВыгрузитьЗначения(), Неопределено);
		ОтправителиИсключения = ОтправителиИсключения();
		ДанныеВыбора = ОбменЭДОДокументооборотВызовСервера.ДанныеВыбораОтправителяЭД(ПараметрыПолученияДанных, Получатель, 
			ОтправителиОтбор, ОтправителиИсключения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ОтправителиОтбор = ?(Элемент.СписокВыбора.Количество() > 0, Элемент.СписокВыбора.ВыгрузитьЗначения(), Неопределено);
		ОтправителиИсключения = ОтправителиИсключения();
		ДанныеВыбора = ОбменЭДОДокументооборотВызовСервера.ДанныеВыбораОтправителяЭД(ПараметрыПолученияДанных, Получатель, 
			ОтправителиОтбор, ОтправителиИсключения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Строка.ЭтоРольФайла Тогда
		Возврат;
	КонецЕсли;	
	
	Если Строка.ЭтоДокумент Тогда
		Возврат;
	КонецЕсли;	
		
	РаботаСФайламиКлиент.ОткрытьФайлДокумента(Строка.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьДоступностьКомандРаботыСфайлами(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолучателиОтбор = ?(Элемент.СписокВыбора.Количество() > 0, Элемент.СписокВыбора.ВыгрузитьЗначения(), Неопределено);
	ПолучателиИсключения = ПолучателиИсключения();
	ПолучателиЭД = ОбменЭДОДокументооборотВызовСервера.ПолучателиЭД(Отправитель, ПолучателиОтбор , ПолучателиИсключения);
	СписокОтбора = Новый СписокЗначений();
	СписокОтбора.ЗагрузитьЗначения(ПолучателиЭД);
	Если ПолучателиЭД.Количество() <= 10 Тогда
		ДанныеВыбора = СписокОтбора;
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
		ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
		ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
		ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
		ПараметрыФормы.Вставить("ОтображатьОрганизации", Истина);
		
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор получателя ЭДО'"));
		ПараметрыФормы.Вставить("СписокОтбора", СписокОтбора);

		ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка", ПараметрыФормы, Элемент, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПолучателиОтбор = ?(Элемент.СписокВыбора.Количество() > 0, Элемент.СписокВыбора.ВыгрузитьЗначения(), Неопределено);
		ПолучателиИсключения = ПолучателиИсключения();
		ДанныеВыбора = ОбменЭДОДокументооборотВызовСервера.ДанныеВыбораПолучателяЭД(ПараметрыПолученияДанных, Отправитель, 
			ПолучателиОтбор, ПолучателиИсключения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПолучателиОтбор = ?(Элемент.СписокВыбора.Количество() > 0, Элемент.СписокВыбора.ВыгрузитьЗначения(), Неопределено);
		ПолучателиИсключения = ПолучателиИсключения();
		ДанныеВыбора = ОбменЭДОДокументооборотВызовСервера.ДанныеВыбораПолучателяЭД(ПараметрыПолученияДанных, Отправитель, 
			ПолучателиОтбор, ПолучателиИсключения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Получатель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	ЗаполнитьИдентификаторыПолучателя();
	ЗаполнитьПредставлениеПолучателя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Отправитель) Тогда
		ПоказатьЗначение(, Отправитель);
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для заполнения реквизита перейдите в режим ""Редактировать""'"));	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Получатель) Тогда
		ПоказатьЗначение(, Получатель);
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для заполнения реквизита перейдите в режим ""Редактировать""'"));	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ВидДокументаЭДО) Тогда
		ПоказатьЗначение(, ВидДокументаЭДО);
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для заполнения реквизита перейдите в режим ""Редактировать""'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматРасширеннаяПодсказкаНажатие(Элемент)
	
	ФорматЭДРасширеннаяПодсказкаНажатие(Формат);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДокументаПриИзменении(Элемент)
	
	ЗаполнитьПредставлениеДатаНомер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДокументаПриИзменении(Элемент)
	
	ЗаполнитьПредставлениеДатаНомер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияПриИзменении(Элемент)
	
	УстановитьВидимостьРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыОтправлятьПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ПрежнийФайл) Тогда
		
		Если ТекущиеДанные.Ссылка = ПрежнийФайл Тогда
			ТекущиеДанные.ОтправлятьЭД = Истина;
		Иначе	
			ТекущиеДанные.ОтправлятьЭД = Ложь;
		КонецЕсли;			
		
		Возврат;
		
	КонецЕсли;	
	
	Если ТекущиеДанные.ОтправлятьЭД Тогда
		ВыбранныйФайл = ТекущиеДанные.Ссылка;
		СнятьОтметкиСФайлов(Файлы, ТекущиеДанные);
	Иначе
		ВыбранныйФайл = ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка");	
	КонецЕсли;

	ЗаполнитьДатуИНомерИзФайла(ТекущиеДанные.Расширение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РедактироватьОтправителя(Команда)
	
	РедактироватьОтправителя = Не РедактироватьОтправителя;
	Элементы.РедактироватьОтправителя.Пометка = РедактироватьОтправителя;
	УстановитьВидимостьРеквизита(ЭтотОбъект, "Отправитель", РедактироватьОтправителя);
	УстановитьВидимостьРеквизита(ЭтотОбъект, "ИдентификаторОтправителя", РедактироватьОтправителя);
	УстановитьВидимостьРеквизита(ЭтотОбъект, "ОтправительПредставление", Не РедактироватьОтправителя);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПолучателя(Команда)
	
	РедактироватьПолучателя = Не РедактироватьПолучателя;
	Элементы.РедактироватьПолучателя.Пометка = РедактироватьПолучателя;
	УстановитьВидимостьРеквизита(ЭтотОбъект, "Получатель", РедактироватьПолучателя);
	УстановитьВидимостьРеквизита(ЭтотОбъект, "ИдентификаторПолучателя", РедактироватьПолучателя);
	УстановитьВидимостьРеквизита(ЭтотОбъект, "ПолучательПредставление", Не РедактироватьПолучателя);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВидДокумента(Команда)
	
	РедактироватьВидДокумента = Не РедактироватьВидДокумента;
	Элементы.РедактироватьВидДокумента.Пометка = РедактироватьВидДокумента;
	УстановитьВидимостьРеквизита(ЭтотОбъект, "ВидДокументаЭДО", РедактироватьВидДокумента);
	УстановитьВидимостьРеквизита(ЭтотОбъект, "Формат", РедактироватьВидДокумента);
	УстановитьВидимостьРеквизита(ЭтотОбъект, "ВидДокументаПредставление", Не РедактироватьВидДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьРегламент(Команда)
	
	РедактироватьРегламент = Не РедактироватьРегламент;
	Элементы.РедактироватьРегламент.Пометка = РедактироватьРегламент;
	УстановитьВидимостьРеквизита(ЭтотОбъект, "ТребуетсяИзвещениеОПолучении", РедактироватьРегламент);
	УстановитьВидимостьРеквизита(ЭтотОбъект, "ТребуетсяОтветнаяПодпись", РедактироватьРегламент);
	УстановитьВидимостьРеквизита(ЭтотОбъект, "РегламентПредставление", Не РедактироватьРегламент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлектронныйДокумент(Команда)
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Если Не РежимРедактирования Тогда
			РежимРедактирования = Истина;
			УстановитьВидимостьРеквизитов(ЭтотОбъект);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	ПараметрыСозданияЭД =  ОбменСКонтрагентамиКлиент.НовыеПараметрыСозданияЭлектронногоДокументаПоФайлу();
	ПараметрыСозданияЭД.ПараметрыОбмена = ИнтерфейсДокументовЭДОКлиентСервер.ПараметрыОбменаЭДОДляСозданияДокументаПоФайлу();
	ЗаполнитьЗначенияСвойств(ПараметрыСозданияЭД, ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыСозданияЭД.ПараметрыОбмена, ЭтотОбъект);
	ПараметрыСозданияЭД.Организация = Отправитель;
	ПараметрыСозданияЭД.Контрагент = Получатель;
	ПараметрыСозданияЭД.ВидДокумента = ВидДокументаЭДО;
	ПараметрыСозданияЭД.ОбъектыУчета.Добавить(Объект);
	ПараметрыСозданияЭД.СвязующийОбъектУчета = Объект;
	
	Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда
		ПараметрыСозданияЭД.НомерДокумента = НомерДокумента;
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыСозданияЭД.НомерДокумента) Тогда 
		ПараметрыСозданияЭД.СоздатьНомерАвтоматически = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса;
	КонецЕсли;
	
	Результат = ОбменЭДОДокументооборотКлиент.НовыйРезультатВводаПараметровСозданияИсходящегоЭДО();
	Результат.ПараметрыСозданияЭДО = ПараметрыСозданияЭД;
	Результат.ФайлЭДО = ВыбранныйФайл;
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНомерДату(Команда)
	
	РедактироватьНомерДату = Не РедактироватьНомерДату;
	Элементы.РедактироватьНомерДату.Пометка = РедактироватьНомерДату;
	УстановитьВидимостьРеквизита(ЭтотОбъект, "НомерДокумента", РедактироватьНомерДату);
	УстановитьВидимостьРеквизита(ЭтотОбъект, "ДатаДокумента", РедактироватьНомерДату);
	УстановитьВидимостьРеквизита(ЭтотОбъект, "ДатаНомерПредставление", Не РедактироватьНомерДату);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСумму(Команда)
	
	РедактироватьСумму = Не РедактироватьСумму;
	Элементы.РедактироватьСумму.Пометка = РедактироватьСумму;
	УстановитьВидимостьРеквизита(ЭтотОбъект, "СуммаДокумента", РедактироватьСумму);
	УстановитьВидимостьРеквизита(ЭтотОбъект, "СуммаПредставление", Не РедактироватьСумму);
	
КонецПроцедуры

#Область КомандыРаботыСФайлами

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	РольФайла = Неопределено;

	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.РольФайла) Тогда
		РольФайла = ТекущиеДанные.РольФайла;
	ИначеЕсли Файлы.ПолучитьЭлементы().Количество() <> 0 Тогда
		СтрФайлы = Файлы.ПолучитьЭлементы()[0];
		Если ЗначениеЗаполнено(СтрФайлы.РольФайла) Тогда
			РольФайла = СтрФайлы.РольФайла;
		КонецЕсли;
	КонецЕсли;	
	
	ОбщегоНазначенияДокументооборотКлиент.ДобавитьФайл(
			ЭтотОбъект,
			Объект,
			РольФайла,
			Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивФайлов = Новый Массив;// Массив Из СправочникСсылка.Файлы
	МассивФайлов.Добавить(ТекущиеДанные.Ссылка);
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено,
		ТекущиеДанные.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФайл(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивФайлов = Новый Массив;// Массив Из СправочникСсылка.Файлы
	МассивФайлов.Добавить(ТекущиеДанные.Ссылка);
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Неопределено, ТекущиеДанные.Ссылка);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли; 
	
	Если ТекущиеДанные.ЭтоДокумент Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ЭтоРольФайла Тогда
		ПоказатьЗначение(, ТекущиеДанные.РольФайла);
	Иначе	
		ОткрытьКарточкуФайлаРеализация(ТекущиеДанные.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)
	
	ПоказыватьУдаленныеФайлы = Не ПоказыватьУдаленныеФайлы;
	ЗаполнитьСписокФайловКлиент();
	Элементы.ПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;
	Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
		
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Тогда
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ОбновитьВОбработкеОповещения", ЭтотОбъект, Новый Структура);
	РаботаСФайламиКлиент.РедактироватьФайлПоСсылке(Обработчик, ТекущиеДанные.Ссылка);
	Если ТекущиеДанные.Ссылка = ВыбранныйФайл И ТекущиеДанные.ОтправлятьЭД Тогда
		ТекущиеДанные.ОтправлятьЭД = Ложь;
		ВыбранныйФайл = ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоРольФайла Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ЭтоРольФайла Тогда
		Возврат;
	КонецЕсли;

	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка, Неопределено,
		УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Установить отметки редактирования.
// 
// Параметры:
//  Форма см. ОбщаяФорма.СозданиеИсходящегоЭДВРучномРежиме
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкиРедактирования(Форма)
	
	Элементы = Форма.Элементы;
	
	Форма.РедактироватьВидДокумента = Не ЗначениеЗаполнено(Форма.ВидДокументаЭДО) Или (Форма.ЭтоФормализованныйДокумент
		И Не ЗначениеЗаполнено(Форма.Формат));
	Форма.РедактироватьОтправителя = Не ЗначениеЗаполнено(Форма.Отправитель) Или Не ЗначениеЗаполнено(Форма.ИдентификаторОтправителя);
	Форма.РедактироватьПолучателя = Не ЗначениеЗаполнено(Форма.Получатель) Или Не ЗначениеЗаполнено(Форма.ИдентификаторПолучателя);
	Форма.РедактироватьНомерДату = Не ЗначениеЗаполнено(Форма.ДатаДокумента) Или Не ЗначениеЗаполнено(Форма.НомерДокумента);
	
	Элементы.РедактироватьВидДокумента.Пометка = Форма.РедактироватьВидДокумента;
	Элементы.РедактироватьОтправителя.Пометка = Форма.РедактироватьОтправителя;
	Элементы.РедактироватьПолучателя.Пометка = Форма.РедактироватьПолучателя;
	Элементы.РедактироватьНомерДату.Пометка = Форма.РедактироватьНомерДату;
	
КонецПроцедуры	

&НаСервере
Процедура ВидДокументаЭДОПриИзмененииНаСервере()
	
	НастроитьВыборОбщегоФорматаЭД();
	ЗаполнитьНастройкиРегламентаЭД();
	ЗаполнитьПредставлениеВидаДокумента(ЭтотОбъект);
	ЗаполнитьПредставлениеРегламента(ЭтотОбъект);
	
КонецПроцедуры

	

// Заполнить идентификаторы отправителя.
// 
// Параметры:
//  Идентификаторы - Неопределено, СписокЗначений из Строка - Идентификаторы
//  Обновлять - Булево - Истина, если полностью перезаполняем идентификаторы отправителей
//
&НаСервере
Процедура ЗаполнитьИдентификаторыОтправителя(Идентификаторы = Неопределено, Обновлять = Истина)
	
	Если Обновлять Тогда
		ИдентификаторОтправителя = "";
	КонецЕсли;
	
	Элементы.ИдентификаторОтправителя.СписокВыбора.Очистить();
	Если ТипЗнч(Идентификаторы) = Тип("СписокЗначений")  И Идентификаторы.Количество() > 0  Тогда
		Для Каждого Идентификатор Из Идентификаторы Цикл
			ЗаполнитьЗначенияСвойств(Элементы.ИдентификаторОтправителя.СписокВыбора.Добавить(), Идентификатор);
		КонецЦикла;
		Если Обновлять И Идентификаторы.Количество() = 1 Тогда
			ИдентификаторОтправителя = Идентификаторы[0].Значение;
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отправитель) Тогда
		ИдентификаторыПолучателяОтбор = ?(ЗначениеЗаполнено(ИдентификаторПолучателя), ИдентификаторПолучателя, Неопределено);
		ИдентификаторыОтправителя = ОбменЭДОДокументооборот.ИдентификаторыОтправителя(Отправитель, Получатель, ИдентификаторыПолучателяОтбор);
		Если ИдентификаторыОтправителя.Количество() = 1 И Обновлять Тогда
			ИдентификаторОтправителя = ИдентификаторыОтправителя[0].Значение;
		КонецЕсли;
		Для Каждого Идентификатор Из ИдентификаторыОтправителя Цикл
			ЗаполнитьЗначенияСвойств(Элементы.ИдентификаторОтправителя.СписокВыбора.Добавить(), Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполнить идентификаторы получателя.
// 
// Параметры:
//  Идентификаторы - Неопределено, СписокЗначений из Строка - Идентификаторы
//  Обновлять - Булево - Истина, если полностью перезаполняем идентификаторы получателей
//
&НаСервере
Процедура ЗаполнитьИдентификаторыПолучателя(Идентификаторы = Неопределено, Обновлять = Истина)
	
	Если Обновлять Тогда
		ИдентификаторПолучателя = "";
	КонецЕсли;
	
	Элементы.ИдентификаторПолучателя.СписокВыбора.Очистить();
	Если ТипЗнч(Идентификаторы) = Тип("СписокЗначений") И Идентификаторы.Количество() > 0 Тогда
		Для Каждого Идентификатор Из Идентификаторы Цикл
			ЗаполнитьЗначенияСвойств(Элементы.ИдентификаторПолучателя.СписокВыбора.Добавить(), Идентификатор);
		КонецЦикла;
		Если Обновлять И Идентификаторы.Количество() = 1 Тогда
			ИдентификаторПолучателя = Идентификаторы[0].Значение;
		КонецЕсли;
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Получатель) Тогда
		ИдентификаторыОтправителяОтбор = ?(ЗначениеЗаполнено(ИдентификаторОтправителя), ИдентификаторОтправителя, Неопределено);
		ИдентификаторыПолучателя = ОбменЭДОДокументооборот.ИдентификаторыПолучателя(Отправитель, Получатель, ИдентификаторыОтправителяОтбор);
		Если ИдентификаторыПолучателя.Количество() = 1 И Обновлять Тогда
			ИдентификаторПолучателя = ИдентификаторыПолучателя[0].Значение;
		КонецЕсли;
		Для Каждого Идентификатор Из ИдентификаторыПолучателя Цикл
			ЗаполнитьЗначенияСвойств(Элементы.ИдентификаторПолучателя.СписокВыбора.Добавить(), Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет общие настройки регламента ЭД.
// 
// Параметры:
//  Заполнять - Булево - Истина, если нужно заполнить все настройки
//
&НаСервере
Процедура ЗаполнитьНастройкиРегламентаЭД(Заполнять = Истина)
	
	Если Заполнять Тогда
		ТребуетсяИзвещениеОПолучении = Ложь;
		ТребуетсяОтветнаяПодпись = Ложь;
	КонецЕсли;
	
	Элементы.ТребуетсяОтветнаяПодпись.Доступность = ЗначениеЗаполнено(ВидДокументаЭДО) И Не ЭтоФормализованныйДокумент;
	Элементы.ТребуетсяИзвещениеОПолучении.Доступность = ЗначениеЗаполнено(ВидДокументаЭДО) И Не ЭтоФормализованныйДокумент;
	
	Если Не ЗначениеЗаполнено(ВидДокументаЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидДокументаЭДО);
	НастройкиРегламента = ЭлектронныеДокументыЭДО.НастройкиРегламента(ОписаниеВидаДокумента, Формат);

	Если НастройкиРегламента <> Неопределено Тогда
		Элементы.ТребуетсяОтветнаяПодпись.Доступность = НастройкиРегламента.РедактироватьОтветнуюПодпись;
		Элементы.ТребуетсяИзвещениеОПолучении.Доступность = НастройкиРегламента.РедактироватьИзвещение;
		Если Заполнять Тогда
			ТребуетсяОтветнаяПодпись = НастройкиРегламента.ТребуетсяОтветнаяПодпись;
			ТребуетсяИзвещениеОПолучении = НастройкиРегламента.ТребуетсяИзвещениеОПолучении;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Представление отправителя.
// 
// Параметры:
//  Форма - см. ОбщаяФорма.СозданиеИсходящегоЭДВРучномРежиме
//
&НаКлиентеНаСервереБезКонтекста  
Процедура ЗаполнитьПредставлениеОтправителя(Форма)
	
	Форма.ОтправительПредставление = ПредставлениеНезаполненногоРеквизита();
	Если Не ЗначениеЗаполнено(Форма.Отправитель) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Отправитель) Тогда
		Форма.ОтправительПредставление = Строка(Форма.Отправитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторОтправителя) Тогда
		Форма.ОтправительПредставление = СтрШаблон("%1 (%2)", Форма.Отправитель, Форма.ИдентификаторОтправителя);
	КонецЕсли;
	
КонецПроцедуры

// Представление получателя.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//
&НаКлиентеНаСервереБезКонтекста  
Процедура ЗаполнитьПредставлениеПолучателя(Форма)
	
	Форма.ПолучательПредставление = ПредставлениеНезаполненногоРеквизита();
	Если Не ЗначениеЗаполнено(Форма.Получатель) Тогда		
		Возврат ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Получатель) Тогда
		Форма.ПолучательПредставление = Строка(Форма.Получатель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторПолучателя) Тогда
		Форма.ПолучательПредставление = СтрШаблон("%1 (%2)", Форма.Получатель, Форма.ИдентификаторПолучателя);
	КонецЕсли;
	
КонецПроцедуры

// Представление вида документа.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//
&НаКлиентеНаСервереБезКонтекста  
Процедура ЗаполнитьПредставлениеВидаДокумента(Форма)
	
	Форма.ВидДокументаПредставление = ПредставлениеНезаполненногоРеквизита();
	Если Не ЗначениеЗаполнено(Форма.ВидДокументаЭДО) Тогда		
		Возврат ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ВидДокументаЭДО) Тогда
		Форма.ВидДокументаПредставление = Строка(Форма.ВидДокументаЭДО);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Формат) Тогда
		Форма.ВидДокументаПредставление = СтрШаблон("%1 (%2)", Форма.ВидДокументаЭДО, Форма.ФорматПредставление);
	КонецЕсли;
	
КонецПроцедуры

// Представление регалмента.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//
&НаКлиентеНаСервереБезКонтекста  
Процедура ЗаполнитьПредставлениеРегламента(Форма)
	
	Форма.РегламентПредставление = ?(Форма.ТребуетсяОтветнаяПодпись, НСтр("ru = 'C ответной подписью'"), 
		НСтр("ru = 'Без ответной подписи'"));
		
	Если Форма.ТребуетсяИзвещениеОПолучении Тогда
		Форма.РегламентПредставление = Форма.РегламентПредставление + ".";
	КонецЕсли;	
	
	Форма.РегламентПредставление = СтрШаблон("%1 %2", Форма.РегламентПредставление, ?(Форма.ТребуетсяИзвещениеОПолучении,
		НСтр("ru = 'Ожидать извещения о получении'"), ""));

	
КонецПроцедуры

// Представление даты, номера документа ЭДО.
// 
// Параметры:
//  Форма - см. ОбщаяФорма.СозданиеИсходящегоЭДВРучномРежиме
//
&НаКлиентеНаСервереБезКонтекста  
Процедура ЗаполнитьПредставлениеДатаНомер(Форма)
	
	Форма.ДатаНомерПредставление = ?(ЗначениеЗаполнено(Форма.НомерДокумента),
		СтрШаблон(НСтр("ru = 'Документ № %1'"), СокрЛП(Форма.НомерДокумента)),
		НСтр("ru = 'Документ № (номер не указан)'"));
	
	Если ЗначениеЗаполнено(Форма.ДатаДокумента) Тогда	
		Форма.ДатаНомерПредставление = СтрШаблон("%1 от %2", Форма.ДатаНомерПредставление, Формат(Форма.ДатаДокумента,
			"ДФ=dd.MM.yyyy"));
	Иначе
		Форма.ДатаНомерПредставление = СтрШаблон(НСтр("ru = '%1 от (дата не указана)'"), Форма.ДатаНомерПредставление);
	КонецЕсли;	

КонецПроцедуры

// Представление суммы
// 
// Параметры:
//  Форма - см. ОбщаяФорма.СозданиеИсходящегоЭДВРучномРежиме
//
&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеСуммы(Форма)
	
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Форма.СуммаДокумента,
		Константы.ОсновнаяВалюта.Получить(),, "ru");
		
	Форма.СуммаПредставление = СтрШаблон("%1 (%2)", Форма.СуммаДокумента, СуммаПрописью);	

КонецПроцедуры

// Представление реквизитов формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьПредставленияРеквизитов(Форма)
	
	ЗаполнитьПредставлениеВидаДокумента(Форма);
	ЗаполнитьПредставлениеОтправителя(Форма);
	ЗаполнитьПредставлениеПолучателя(Форма);
	ЗаполнитьПредставлениеРегламента(Форма);
	ЗаполнитьПредставлениеДатаНомер(Форма);
	ЗаполнитьПредставлениеСуммы(Форма);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВыборОбщегоФорматаЭД()
	
	Элементы.Формат.Доступность = Ложь;
	Элементы.Формат.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(ВидДокументаЭДО) Тогда
		Формат = "";
		ФорматПредставление = "";
		ЭтоФормализованныйДокумент = Ложь;         
		Элементы.Формат.АвтоОтметкаНезаполненного = Ложь;
		ОбменЭДОДокументооборотКлиентСервер.УстановитьВидимостьПодсказкиФорматаЭДО(ЭтотОбъект, Формат, "Формат");
		Возврат;
	КонецЕсли;
	
	СтрокиФорматов = ФорматыЭД.НайтиСтроки(Новый Структура("ВидДокумента", ВидДокументаЭДО));	
	Если СтрокиФорматов.Количество() = 0 Тогда
		Формат = "";
		ФорматПредставление = "";
		ЭтоФормализованныйДокумент = Ложь;  
		Элементы.Формат.АвтоОтметкаНезаполненного = Ложь;
		ОбменЭДОДокументооборотКлиентСервер.УстановитьВидимостьПодсказкиФорматаЭДО(ЭтотОбъект, Формат, "Формат");
		Возврат;
	КонецЕсли;
	
	ЭтоФормализованныйДокумент = Истина;
	Элементы.Формат.Доступность = Истина;
	Элементы.Формат.АвтоОтметкаНезаполненного = Истина;
	
	НайденФормат = Ложь;
	
	Для Каждого СтрокаТаблицы Из СтрокиФорматов Цикл
		Элементы.Формат.СписокВыбора.Добавить(СтрокаТаблицы.ИдентификаторФормата, СтрокаТаблицы.ПредставлениеФормата);	
		Если СтрокаТаблицы.ИдентификаторФормата = Формат Тогда
			НайденФормат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НайденФормат Тогда
		Формат = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Формат) И СтрокиФорматов.Количество() = 1 Тогда
		Формат = СтрокиФорматов[0].ИдентификаторФормата;
		ФорматПредставление = СтрокиФорматов[0].ПредставлениеФормата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФорматПредставление) Тогда
		ЭлементСписка = Элементы.Формат.СписокВыбора.НайтиПоЗначению(Формат);
		Если ЭлементСписка <> Неопределено Тогда
			ФорматПредставление = ЭлементСписка.Представление;
		Иначе
			ФорматПредставление = ПредставлениеНезаполненногоРеквизита();
		КонецЕсли;
	КонецЕсли;
	
	ОбменЭДОДокументооборотКлиентСервер.УстановитьВидимостьПодсказкиФорматаЭДО(ЭтотОбъект, Формат, "Формат");
	
КонецПроцедуры

#Область КомандыРаботыСФайлами

&НаКлиенте
Процедура ЗаполнитьСписокФайловКлиент(ЗаполнитьПризнакОригинал = Ложь) Экспорт
	
	ДанныеМиникарточки = ОбзорСпискаДокументов.ДанныеМиникарточкиТолькоФайлы(Объект, ВидДокументаДО,
		ПоказыватьУдаленныеФайлы);	
	ОбзорСпискаДокументовКлиент.ЗаполнитьДеревоФайловКарточкаДокумента(ЭтотОбъект, ДанныеМиникарточки);
	РаскрытьДеревоФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайлаРеализация(ФайлСсылка)
	
	УстановитьТолькоПросмотр = Ложь;

	Если Элементы.Файлы.ИзменятьСоставСтрок = Ложь Тогда
		УстановитьТолькоПросмотр = Истина;
	КонецЕсли; 

	ПараметрыОткрытия = Новый Структура("Ключ, УстановитьТолькоПросмотр", 
		ФайлСсылка, УстановитьТолькоПросмотр); 
	ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

// Обновляет данные одного файла в списке файлов документа
//
// Параметры:
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется обновить признак оригинала
//
&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл, ЗаполнитьПризнакОригинал = Ложь)
	
	ДелопроизводствоКлиент.ОбновитьСтрокуФайла(Файлы, Файл, ЗаполнитьПризнакОригинал);
	УстановитьДоступностьКомандРаботыСфайлами();
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайлДокумента(Файл, ЭтотОбъект);
	
КонецПроцедуры

// Установить доступность команд работы сфайлами.
// 
// Параметры:
//  ТекущиеДанные - Неопределено, ДанныеФормыЭлементДерева - Текущие данные
//
&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСфайлами(ТекущиеДанные = Неопределено)
	
	Если  ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ПрежнийФайл) Тогда
		
		Элементы.СоздатьФайл.Доступность = Ложь;
		Элементы.Удалить.Доступность = Ложь;
		Элементы.КонтекстноеМенюФайлыУдалить.Доступность = Ложь;
		
		Элементы.Редактировать.Доступность = Ложь;
		Элементы.Освободить.Доступность = Ложь;
		Элементы.КонтекстноеМенюФайлыОсвободить.Доступность = Ложь;
		Элементы.КонтекстноеМенюФайлыРедактировать.Доступность = Ложь;
		Элементы.ЗакончитьРедактирование.Доступность = Ложь;
		Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование.Доступность = Ложь;
		Элементы.ОбновитьИзФайлаНаДиске.Доступность = Ложь;
		
		Возврат;
	КонецЕсли;			
	
	Элементы.Редактировать.Доступность = Не ЗначениеЗаполнено(ТекущиеДанные.Редактирует);
	Элементы.Освободить.Доступность = ЗначениеЗаполнено(ТекущиеДанные.Редактирует);
	Элементы.КонтекстноеМенюФайлыОсвободить.Доступность = ЗначениеЗаполнено(ТекущиеДанные.Редактирует);
	Элементы.КонтекстноеМенюФайлыРедактировать.Доступность = Не ЗначениеЗаполнено(ТекущиеДанные.Редактирует);
	Элементы.ЗакончитьРедактирование.Доступность = ЗначениеЗаполнено(ТекущиеДанные.Редактирует);
	Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование.Доступность = ЗначениеЗаполнено(ТекущиеДанные.Редактирует);
	Элементы.ОбновитьИзФайлаНаДиске.Доступность = Не ЗначениеЗаполнено(ТекущиеДанные.Редактирует);
	
КонецПроцедуры

// Файлы перед удалением продолжение.
// 
// Параметры:
//  Результат - КодВозвратаДиалога
//  Параметры - Структура:
// * МассивФайлов - Массив Из СправочникСсылка.Файлы
// * ПометкаУдаления - Булево
//
&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		МассивФайлов = Параметры.МассивФайлов; // Массив Из СправочникСсылка.Файлы
		
		Если ТекущиеДанные <> Неопределено И Параметры.ПометкаУдаления И ТекущиеДанные.Ссылка = МассивФайлов[0]
			И ТекущиеДанные.Ссылка = ВыбранныйФайл Тогда
			ВыбранныйФайл = ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка");
			ТекущиеДанные.ОтправлятьЭД = Ложь;
		КонецЕсли;
		
		КоличествоЗанятыхФайлов = Неопределено;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления, // Булево
			КоличествоЗанятыхФайлов);
			
		Если КоличествоЗанятыхФайлов <> Неопределено Тогда
			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				КоличествоЗанятыхФайлов);
		КонецЕсли;	
		
		Если ПоказыватьУдаленныеФайлы Тогда 
			Для Каждого Файл Из МассивФайлов Цикл 
				ОбновитьСтрокуФайла(Файл);
			КонецЦикла;
		КонецЕсли;
		
		Оповестить("ФайлыДокументаПомеченыНаУдаление", Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Пометить файлы на удаление.
// 
// Параметры:
//  МассивФайлов - Массив Из СправочникСсылка.Файлы
//  ЗначениеПометкиУдаления - Булево
//  КоличествоЗанятыхФайлов - Неопределено
//
&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ЗначениеПометкиУдаления, КоличествоЗанятыхФайлов = Неопределено)
	
	ОтметитьЗахваченныеФайлы = Истина;
	
	Делопроизводство.ПометитьФайлыНаУдаление(ЭтотОбъект, МассивФайлов, 
		ЗначениеПометкиУдаления,, ОтметитьЗахваченныеФайлы, КоличествоЗанятыхФайлов, Истина, Ложь);
	
КонецПроцедуры

// Обновить в обработке оповещения.
// 
// Параметры:
//  Результат - Произвольный
//  ДополнительныеПараметры - Структура:
//  * ДанныеФайла см. РаботаСФайламиВызовСервера.ДанныеФайла
//
&НаКлиенте
Процедура ОбновитьВОбработкеОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ДанныеФайла")
		И ТипЗнч(ДополнительныеПараметры.ДанныеФайла) = Тип("Структура")
		И ДополнительныеПараметры.ДанныеФайла.Свойство("РедактируетТекущийПользователь") 
		И ДополнительныеПараметры.ДанныеФайла.РедактируетТекущийПользователь Тогда
		ОбновитьСтрокуФайла(ДополнительныеПараметры.ДанныеФайла.Ссылка, Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РаскрытьДеревоФайлов()
	
	// Раскроем дерево
	КоллекцияСтрок = Файлы.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл

		Если ЗначениеЗаполнено(Строка.РольФайла) Тогда

			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();

			Элементы.Файлы.Развернуть(ИдентификаторСтроки, Истина);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти	

&НаКлиенте
Функция ОтправителиИсключения()
	
	Если Не ЕстьСтороныИсключения Или Не ЗначениеЗаполнено(Получатель) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отправители = Новый Массив; // Массив из СправочникСсылка.Организации
	Отбор = Новый Структура;
	Отбор.Вставить("Получатель", Получатель);
	Стороны = СтороныИсключения.НайтиСтроки(Отбор);
	Если Стороны.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Для Каждого Сторона Из Стороны Цикл
		Отправители.Добавить(Сторона.Отправитель);
	КонецЦикла;	
	
	Возврат Отправители;
	
КонецФункции

&НаКлиенте
Функция ПолучателиИсключения()
	
	Если Не ЕстьСтороныИсключения Или Не ЗначениеЗаполнено(Отправитель) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Получатели = Новый Массив; // Массив из ОпределяемыйТип.УчастникЭДО
	Отбор = Новый Структура;
	Отбор.Вставить("Отправитель", Отправитель);
	Стороны = СтороныИсключения.НайтиСтроки(Отбор);
	Если Стороны.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Для Каждого Сторона Из Стороны Цикл
		Получатели.Добавить(Сторона.Получатель);
	КонецЦикла;	
	
	Возврат Получатели;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНезаполненногоРеквизита()
	
	Возврат НСтр("ru = 'Не указан'");
	
КонецФункции

// Установить видимость реквизита.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//
&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьВидимостьРеквизита(Форма, ИмяРеквизита, Значение)
	
	Если Форма.Элементы[ИмяРеквизита].Видимость <> Значение Тогда
		Форма.Элементы[ИмяРеквизита].Видимость = Значение;
	КонецЕсли;
	
КонецПроцедуры	

// Установить видимость реквизита.
// 
// Параметры:
//  Форма см. ОбщаяФорма.СозданиеИсходящегоЭДВРучномРежиме
//
&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьВидимостьРеквизитов(Форма)
	
	УстановитьВидимостьРеквизита(Форма, "Отправитель", Форма.РежимРедактирования);
	УстановитьВидимостьРеквизита(Форма, "ИдентификаторОтправителя", Форма.РежимРедактирования);
	УстановитьВидимостьРеквизита(Форма, "ОтправительПредставление", Не Форма.РежимРедактирования);
	
	УстановитьВидимостьРеквизита(Форма, "Получатель", Форма.РежимРедактирования);
	УстановитьВидимостьРеквизита(Форма, "ИдентификаторПолучателя", Форма.РежимРедактирования);
	УстановитьВидимостьРеквизита(Форма, "ПолучательПредставление", Не Форма.РежимРедактирования);
	
	УстановитьВидимостьРеквизита(Форма, "ВидДокументаЭДО", Форма.РежимРедактирования);
	УстановитьВидимостьРеквизита(Форма, "Формат", Форма.РежимРедактирования);
	УстановитьВидимостьРеквизита(Форма, "ВидДокументаПредставление", Не Форма.РежимРедактирования);
	
	УстановитьВидимостьРеквизита(Форма, "ТребуетсяИзвещениеОПолучении", Форма.РежимРедактирования);
	УстановитьВидимостьРеквизита(Форма, "ТребуетсяОтветнаяПодпись", Форма.РежимРедактирования);
	УстановитьВидимостьРеквизита(Форма, "РегламентПредставление", Не Форма.РежимРедактирования);
	
	УстановитьВидимостьРеквизита(Форма, "ДатаДокумента", Форма.РежимРедактирования);
	УстановитьВидимостьРеквизита(Форма, "НомерДокумента", Форма.РежимРедактирования);
	УстановитьВидимостьРеквизита(Форма, "ДатаНомерПредставление", Не Форма.РежимРедактирования);
	
	УстановитьВидимостьРеквизита(Форма, "СуммаДокумента", Форма.РежимРедактирования);
	УстановитьВидимостьРеквизита(Форма, "СуммаПредставление", Не Форма.РежимРедактирования);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОформлениеОтправлять = УсловноеОформление.Элементы.Добавить();
	ОформлениеОтправлять.Использование = Истина;
	
	Поля = ОформлениеОтправлять.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ФайлыОтправлять");
	
	ГруппаОтбораИли = ОформлениеОтправлять.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Файлы.ЭтоРольФайла");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Файлы.ЭтоДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Файлы.ЭтоДокументЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Файлы.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Файлы.Редактирует");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОформлениеОтправлять.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ОформлениеФайлы = УсловноеОформление.Элементы.Добавить();
	ОформлениеФайлы.Использование = Истина;
	
	Поля = ОформлениеФайлы.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("Файлы");
	
	ОтборЭлемента = ОформлениеФайлы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Файлы.Редактирует");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОформлениеОтправлять.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйДругимПользователем);
	
	ОформлениеФайлы = УсловноеОформление.Элементы.Добавить();
	ОформлениеФайлы.Использование = Истина;
	
	Поля = ОформлениеФайлы.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("Файлы");
	
	ОтборЭлемента = ОформлениеФайлы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Файлы.РедактируетТекущийПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОформлениеФайлы.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	
КонецПроцедуры	

&НаСервере
Процедура ФорматПриИзмененииНаСервере()
	
	ЭлементСписка = Элементы.Формат.СписокВыбора.НайтиПоЗначению(Формат);
	Если ЭлементСписка <> Неопределено Тогда
		ФорматПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	ЗаполнитьНастройкиРегламентаЭД();
	ЗаполнитьПредставлениеВидаДокумента(ЭтотОбъект);
	ЗаполнитьПредставлениеРегламента(ЭтотОбъект);
	
КонецПроцедуры

// Открывает ссылку в браузере на описание формата ЭДО
// 
// Параметры:
//  ФорматЭД - Строка - Формат ЭД
//
&НаКлиенте
Процедура ФорматЭДРасширеннаяПодсказкаНажатие(ФорматЭД)
	
	Строки = ФорматыЭД.НайтиСтроки(Новый Структура("ИдентификаторФормата", ФорматЭД));
	Если Строки.Количество() > 0 Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Строки[0].СсылкаНаПриказОВведении);
	КонецЕсли;

КонецПроцедуры

// Снять отметки с файлов.
// 
// Параметры:
//  СтрокаДереваФайлов - ДанныеФормыЭлементДерева, ДанныеФормыДерево - Строка дерева файлов, Дерево файлов
//  ТекущиеДанные - ДанныеФормыЭлементДерева - Текущие данные
//
&НаКлиенте
Процедура СнятьОтметкиСФайлов(СтрокаДереваФайлов, ТекущиеДанные)
	
	Для Каждого СтрокаФайлов Из СтрокаДереваФайлов.ПолучитьЭлементы() Цикл
		
		Если СтрокаФайлов.ОтправлятьЭД И ТекущиеДанные <> СтрокаФайлов Тогда
			СтрокаФайлов.ОтправлятьЭД = Ложь;
		КонецЕсли;
		
		СнятьОтметкиСфайлов(СтрокаФайлов, ТекущиеДанные);
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтметитьВыбранныйФайлВСписке()
	
	Если Не ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаФайла Из Файлы.ПолучитьЭлементы() Цикл
		Если Не ЗначениеЗаполнено(СтрокаФайла.Редактирует) И СтрокаФайла.Ссылка = ВыбранныйФайл Тогда
			СтрокаФайла.ОтправлятьЭД = Истина;
			Возврат;
		КонецЕсли;
		Если СтрокаФайла.ЭтоРольФайла Тогда
			Для Каждого Подстрока Из СтрокаФайла.ПолучитьЭлементы() Цикл
				Если Не ЗначениеЗаполнено(Подстрока.Редактирует) И Подстрока.Ссылка = ВыбранныйФайл Тогда
					Подстрока.ОтправлятьЭД = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	  

&НаКлиенте
Процедура УстановитьФлагЕслиФайлОдин() 
	
	ЧислоФайлов = 0;
	
	Для Каждого СтрокаФайла Из Файлы.ПолучитьЭлементы() Цикл
		
		Если СтрокаФайла.ЭтоРольФайла Тогда
			Для Каждого Подстрока Из СтрокаФайла.ПолучитьЭлементы() Цикл
				ЧислоФайлов = ЧислоФайлов + 1;
			КонецЦикла;
		Иначе	
			ЧислоФайлов = ЧислоФайлов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЧислоФайлов <> 1 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаФайла Из Файлы.ПолучитьЭлементы() Цикл
		
		Если СтрокаФайла.ЭтоРольФайла Тогда
			Для Каждого Подстрока Из СтрокаФайла.ПолучитьЭлементы() Цикл
				Подстрока.ОтправлятьЭД = Истина;
				ВыбранныйФайл = Подстрока.Ссылка;
				ЗаполнитьДатуИНомерИзФайла(Подстрока.Расширение);
				Возврат;
			КонецЦикла;
		Иначе
			СтрокаФайла.ОтправлятьЭД = Истина;
			ВыбранныйФайл = СтрокаФайла.Ссылка;
			ЗаполнитьДатуИНомерИзФайла(СтрокаФайла.Расширение);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	  

&НаСервере
Процедура ОтправительПриИзмененииНаСервере()
	
	ЗаполнитьИдентификаторыОтправителя();
	Обновлять = ЗначениеЗаполнено(ИдентификаторОтправителя) И Не ИдентификаторыПриняты();
	ЗаполнитьИдентификаторыПолучателя(, Обновлять);
	
КонецПроцедуры

&НаСервере
Процедура ПолучательПриИзмененииНаСервере()
	
	ЗаполнитьИдентификаторыПолучателя();
	Обновлять = ЗначениеЗаполнено(ИдентификаторПолучателя) И Не ИдентификаторыПриняты();
	ЗаполнитьИдентификаторыОтправителя(, Обновлять);
	
КонецПроцедуры

// Идентификаторы приняты, проверяет, что между двумя идентификаторами есть принятое приглашение к обмену ЭДО
// 
// Возвращаемое значение:
// Булево - Истина, если для идентификаторов есть принятое приглашение
//  
&НаСервере
Функция ИдентификаторыПриняты()
	
	Если Не ЗначениеЗаполнено(ИдентификаторОтправителя) Или Не ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОтправителя
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторПолучателя
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", ИдентификаторПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ИдентификаторОтправителя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Процедура ИдентификаторОтправителяПриИзмененииНаСервере()
	
	Обновлять = ЗначениеЗаполнено(ИдентификаторОтправителя) И Не ИдентификаторыПриняты();
	ЗаполнитьИдентификаторыПолучателя(, Обновлять);
	
КонецПроцедуры

&НаСервере
Процедура ИдентификаторПолучателяПриИзмененииНаСервере()
	
	Обновлять = ЗначениеЗаполнено(ИдентификаторПолучателя) И Не ИдентификаторыПриняты();
	ЗаполнитьИдентификаторыОтправителя(, Обновлять);
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииНаСервере()
	
	ЗаполнитьПредставлениеСуммы(ЭтотОбъект);
	
КонецПроцедуры

// Заполнить дату и номер из файла.
// 
// Параметры:
//  Расширение - Строка - Расширение файла
//
&НаКлиенте
Процедура ЗаполнитьДатуИНомерИзФайла(Расширение = "")
	
	Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда
		Возврат;
	КонецЕсли;	
	НомерДокумента = "";
	ДатаДокумента = ТекущаяДатаСеанса;
	Если ЗначениеЗаполнено(НомерДО) Тогда
		НомерДокумента = НомерДО;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ДатаДО) Тогда
		ДатаДокумента = ДатаДО;
	КонецЕсли;
	Если ЗначениеЗаполнено(Расширение) И Не ОбзорФайловКлиентСервер.ЭтоXML(Нрег(Расширение)) Тогда
		ЗаполнитьПредставлениеДатаНомер(ЭтотОбъект);
		Возврат;
	КонецЕсли;		
	Если Не ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		ЗаполнитьПредставлениеДатаНомер(ЭтотОбъект);
		Возврат;
	КонецЕсли;	
	ЗаполнитьДатуИНомерИзФайлаНаСервере();	
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуИНомерИзФайлаНаСервере()
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;	
	ДатаНомер = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу();
	ИнтерфейсЭДОДокументооборот.ЗаполнитьДатуИНомерИзФайла(ВыбранныйФайл, ДатаНомер);
	Если ЗначениеЗаполнено(ДатаНомер.НомерДокумента) Тогда
		НомерДокумента = ДатаНомер.НомерДокумента;
		ДатаДокумента = ДатаНомер.ДатаДокумента;
	КонецЕсли;	
	ЗаполнитьПредставлениеДатаНомер(ЭтотОбъект);
	
КонецПроцедуры		
	
#КонецОбласти
