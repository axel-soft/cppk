#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьЧатБота = РаботаСЧатБотом.ЧатБотИспользуется();
	Элементы.ГруппаЧатБотНадпись.Видимость = Не ИспользоватьЧатБота;
	ИспользоватьPushУведомления = ПолучитьФункциональнуюОпцию("ИспользоватьPushУведомления"); 
	Элементы.МКPUSHУведомления.Доступность = ИспользоватьPushУведомления;
	Элементы.ПодпискиУведомленийПоPush.Видимость = ИспользоватьPushУведомления; 	
	
	// Заполнение уведомлений и настроек уведомлений
	ПолучитьНастройки();
	
	ЭтоМобильныйКлиент = МК_ПовтИсп.ЭтоМобильныйКлиент();
	НастроитьФормуДляМобильногоПриНеобходимости();
	
	ИспользоватьУведомленияЧерезTelegram =
		Константы.ИспользоватьУведомленияЧерезTelegram.Получить();
	Элементы.ПодпискиУведомленийTelegram.Видимость = ИспользоватьУведомленияЧерезTelegram;
	
	ИспользоватьУведомленияЧерезВКонтакте =
		Константы.ИспользоватьУведомленияЧерезВКонтакте.Получить();
	Элементы.ПодпискиУведомленийВКонтакте.Видимость = ИспользоватьУведомленияЧерезВКонтакте;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Настройки были изменены. Сохранить изменения?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьНастройкиНаКлиенте();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Пользователь"
		Или ИмяСобытия = "ИзмененыНастройкиУведомлений"
		Или ИмяСобытия = "Запись_Сотрудники" Тогда
		ПолучитьСпособыУведомленияНаКлиенте();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилосьИспользованиеЧатБота" Тогда
	
		ИспользоватьЧатБота = Параметр;
		ОбновитьЭлементыФормы();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РазмерSMSПриИзменении(Элемент)
	
	Если РазмерSMS = 0 Тогда
		РазмерSMS = РаботаСУведомлениямиКлиентСервер.РазмерSMS(
			1,
			ИспользоватьТранслитерациюSMS);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерSMSРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КоличествоЧастей = РаботаСУведомлениямиКлиентСервер.КоличествоЧастейSMS(
		РазмерSMS,
		ИспользоватьТранслитерациюSMS);
	РазмерSMS = РаботаСУведомлениямиКлиентСервер.РазмерSMS(
		КоличествоЧастей + Направление,
		ИспользоватьТранслитерациюSMS);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТранслитерациюSMSПриИзменении(Элемент)
	
	КоличествоЧастей = РаботаСУведомлениямиКлиентСервер.КоличествоЧастейSMS(
		РазмерSMS,
		Не ИспользоватьТранслитерациюSMS);
	РазмерSMS = РаботаСУведомлениямиКлиентСервер.РазмерSMS(
		КоличествоЧастей,
		ИспользоватьТранслитерациюSMS);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьPushУведомленияПриИзменении(Элемент)

	Модифицированность = Истина;
	Элементы.МКPUSHУведомления.Доступность = ИспользоватьPushУведомления;
	Элементы.ПодпискиУведомленийПоPush.Видимость = ИспользоватьPushУведомления;

КонецПроцедуры

&НаКлиенте
Процедура КлючДоступаДляОтправкиPUSHПриИзменении(Элемент)
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницыНастройкаУведомленийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаОтправкаTelegram
		И Не СтраницаОтправкаTelegramИнициализирована Тогда
		
		ОбновитьНастройкиTelegram();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкаВКонтакте
		И Не СтраницаОтправкаВКонтактеИнициализирована Тогда
		
		ОбновитьНастройкиВКонтакте();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСпособыУведомления Тогда
		
		ОбновлятьСпособыУведомления = Истина;
		
		ПолучитьСпособыУведомленияНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодпискиУведомлений

&НаКлиенте
Процедура ПодпискиУведомленийПриИзменении(Элемент)
	
	ОбновитьПодпискаАктивна(
		ПодпискиУведомлений,
		СрокиУведомлений,
		ЧастотыУведомлений,
		ДополнительныеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпособыУведомления

&НаКлиенте
Процедура СпособыУведомленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Пользователь = ПредопределенноеЗначение("Справочник.РабочиеГруппы.ВсеПользователи") Тогда
		ПараметрыФормы = Новый Структура;
		ОткрытьФорму(
			"РегистрСведений.СпособыУведомленияПользователей.Форма.СпособыУведомленияВсехПользователей",
			ПараметрыФормы,
			ЭтаФорма);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ВидКонтактнойИнформации) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Сотрудник);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ТекущиеДанные.ВидКонтактнойИнформации);
		ПараметрыФормы.Вставить("ПредставлениеКонтактнойИнформации", ТекущиеДанные.ДанныеСпособа);
		ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Пользователь", ТекущиеДанные.Пользователь);
		ПараметрыФормы.Вставить("ОтобразитьСпособыДоставки", Истина);
		ПараметрыФормы.Вставить("СпособДоставки", ТекущиеДанные.ДанныеСпособа);
		ОткрытьФорму("ОбщаяФорма.ПодпискиПользователя", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	СохранитьНастройкиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Очистить настройки уведомлений всех пользователей?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомленияSMS(Команда)
	
	ОткрытьФорму("Документ.УведомлениеПоSMS.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияКлючаОтправителяPUSH1С(Команда)

	ПерейтиПоНавигационнойСсылке("https://pushnotifications.1c.com/push/publishers/new");

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьБотаВTelegram(Команда)
	
	Если Не СтрЗаканчиваетсяНа(НРег(ИмяБотаTelegram), "bot") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Имя бота Telegram должно заканчиваться на bot'"));
		Возврат;
	ИначеЕсли СтрНачинаетсяС(НРег(ИмяБотаTelegram), "@") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Имя бота Telegram не должно начинаться с @'"));
		Возврат;
	ИначеЕсли СтрНайти(НРег(ИмяБотаTelegram), "/") <> 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Имя бота Telegram не должно содержать /'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		ИспользуетсяСпособУведомления = АктивизироватьБотаВTelegramНаСервере();
		Если ИспользуетсяСпособУведомления Тогда
			ПредложитьОчиститьНастройкиОтправки(
				ПредопределенноеЗначение("Перечисление.СпособыУведомления.Telegram"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Бот в Telegram активирован.'"));
		КонецЕсли;
	Исключение
		ПоказатьПредупреждение(, НСтр("ru='Во время активизации бота в Telegram произошла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтключитьБотаОтTelegram(Команда)
	
	Попытка
		ОтключитьБотаОтTelegramНаСервере();
		ПоказатьПредупреждение(, НСтр("ru = 'Бот в Telegram отключен.'"));
	Исключение
		ПоказатьПредупреждение(, НСтр("ru='Во время отключения бота от Telegram произошла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьБотаВВКонтакте(Команда)
	
	Попытка
		ИспользуетсяСпособУведомления = АктивизироватьБотаВВКонтактеНаСервере();
		Если ИспользуетсяСпособУведомления Тогда
			ПредложитьОчиститьНастройкиОтправки(
				ПредопределенноеЗначение("Перечисление.СпособыУведомления.ВКонтакте"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Бот в ВКонтакте активирован.'"));
		КонецЕсли;
	Исключение
		ПоказатьПредупреждение(, НСтр("ru='Во время активизации бота в ВКонтакте произошла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтключитьБотаОтВКонтакте(Команда)
	
	Попытка
		ОтключитьБотаОтВКонтактеНаСервере();
		ПоказатьПредупреждение(, НСтр("ru = 'Бот в ВКонтакте отключен.'"));
	Исключение
		ПоказатьПредупреждение(, НСтр("ru='Во время отключения бота от ВКонтакте произошла ошибка:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПодписки(Команда)
	
	Для Каждого Подписка Из ПодпискиУведомлений Цикл
		
		Если Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийПредставление Тогда
			
			Подписка.ПоПочте = Ложь;
			Подписка.Окном = Ложь;
			Подписка.Чат = Ложь;
			Подписка.Telegram = Ложь;
			Подписка.ВКонтакте = Ложь;
			Подписка.ПоPush = Ложь;
			Подписка.ПоSMS = Ложь;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийПоПочте Тогда
			
			Подписка.ПоПочте = Ложь;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийОкном Тогда
			
			Подписка.Окном = Ложь;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийЧат Тогда
			
			Подписка.Чат = Ложь;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийTelegram Тогда
			
			Подписка.Telegram = Ложь;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийВКонтакте Тогда
			
			Подписка.ВКонтакте = Ложь;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийПоPush Тогда
			
			Подписка.ПоPush = Ложь;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийПоSMS Тогда
			
			Подписка.ПоSMS = Ложь;
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестная колонка %1.'"),
				Элементы.ПодпискиУведомлений.ТекущийЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеПодписки(Команда)
	
	Для Каждого Подписка Из ПодпискиУведомлений Цикл
		
		Если Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийПредставление Тогда
			
			Подписка.ПоПочте = Истина;
			Подписка.Окном = Истина;
			Подписка.Чат = Истина;
			Подписка.Telegram = Истина;
			Подписка.ВКонтакте = Истина;
			Подписка.ПоPush = Истина;
			Подписка.ПоSMS = Истина;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийПоПочте Тогда
			
			Подписка.ПоПочте = Истина;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийОкном Тогда
			
			Подписка.Окном = Истина;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийЧат Тогда
			
			Подписка.Чат = Истина;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийTelegram Тогда
			
			Подписка.Telegram = Истина;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийВКонтакте Тогда
			
			Подписка.ВКонтакте = Истина;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийПоPush Тогда
			
			Подписка.ПоPush = Истина;
			
		ИначеЕсли Элементы.ПодпискиУведомлений.ТекущийЭлемент = Элементы.ПодпискиУведомленийПоSMS Тогда
			
			Подписка.ПоSMS = Истина;
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестная колонка %1.'"),
				Элементы.ПодпискиУведомлений.ТекущийЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИмяБотаTelegram(Команда)
	
	Если Не СтрЗаканчиваетсяНа(НРег(ИмяБотаTelegram), "bot") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Имя бота Telegram должно заканчиваться на bot'"));
		Возврат;
	ИначеЕсли СтрНачинаетсяС(НРег(ИмяБотаTelegram), "@") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Имя бота Telegram не должно начинаться с @'"));
		Возврат;
	ИначеЕсли СтрНайти(НРег(ИмяБотаTelegram), "/") <> 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Имя бота Telegram не должно содержать /'"));
		Возврат;
	КонецЕсли;
	
	СсылкаTelegram = СтрШаблон("https://telegram.me/%1", ИмяБотаTelegram);
	
	ПерейтиПоНавигационнойСсылке(СсылкаTelegram);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьНастройки()
	
	// Уведомления
	ПодпискиУведомлений.Очистить();
	ДоступныеПодписки = РегистрыСведений.НастройкиУведомлений.ДоступныеПодписки();
	Для Каждого Подписка Из ДоступныеПодписки Цикл
		НоваяСтрока = ПодпискиУведомлений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Подписка);
		НоваяСтрока.ПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьПодпискуПоУмолчанию(
			Подписка.ВидСобытия,
			Перечисления.СпособыУведомления.ПоПочте);
		НоваяСтрока.Окном = РегистрыСведений.НастройкиУведомлений.ПолучитьПодпискуПоУмолчанию(
			Подписка.ВидСобытия,
			Перечисления.СпособыУведомления.Окном);
		НоваяСтрока.ПоSMS = РегистрыСведений.НастройкиУведомлений.ПолучитьПодпискуПоУмолчанию(
			Подписка.ВидСобытия,
			Перечисления.СпособыУведомления.ПоSMS);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьPushУведомления") Тогда
			НоваяСтрока.ПоPush = РегистрыСведений.НастройкиУведомлений.ПолучитьПодпискуПоУмолчанию(
				Подписка.ВидСобытия,
				Перечисления.СпособыУведомления.ПоPush);
		КонецЕсли;
			
		НоваяСтрока.Чат = РегистрыСведений.НастройкиУведомлений.ПолучитьПодпискуПоУмолчанию(
			Подписка.ВидСобытия,
			Перечисления.СпособыУведомления.Чат);
			
		НоваяСтрока.Telegram = РегистрыСведений.НастройкиУведомлений.ПолучитьПодпискуПоУмолчанию(
			Подписка.ВидСобытия,
			Перечисления.СпособыУведомления.Telegram);
			
		НоваяСтрока.ВКонтакте = РегистрыСведений.НастройкиУведомлений.ПолучитьПодпискуПоУмолчанию(
			Подписка.ВидСобытия,
			Перечисления.СпособыУведомления.ВКонтакте);
			
	КонецЦикла;
	Элементы.ПодпискиУведомлений.Видимость = (ПодпискиУведомлений.Количество() <> 0);
	
	// Частоты и сроки уведомлений - Сроки уведомлений
	СрокиУведомлений.Очистить();
	ДоступныеСроки = РегистрыСведений.НастройкиУведомлений.ДоступныеСроки();
	Для Каждого НастройкаСрока Из ДоступныеСроки Цикл
		НоваяСтрока = СрокиУведомлений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НастройкаСрока);
		НоваяСтрока.Срок = РегистрыСведений.НастройкиУведомлений.ПолучитьСрокПоУмолчанию(
			НастройкаСрока.ВидСобытия);
	КонецЦикла;
	Элементы.СрокиУведомлений.Видимость = (СрокиУведомлений.Количество() <> 0);
	
	// Частоты и сроки уведомлений - Частоты уведомлений
	ЧастотыУведомлений.Очистить();
	ДоступныеЧастоты = РегистрыСведений.НастройкиУведомлений.ДоступныеЧастоты();
	Для Каждого НастройкаЧастоты Из ДоступныеЧастоты Цикл
		НоваяСтрока = ЧастотыУведомлений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НастройкаЧастоты);
		НоваяСтрока.Частота = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастотуПоУмолчанию(
			НастройкаЧастоты.ВидСобытия);
	КонецЦикла;
	Элементы.ЧастотыУведомлений.Видимость = (ЧастотыУведомлений.Количество() <> 0);
	
	// Способы уведомлений
	ПолучитьСпособыУведомления();
	
	// Дополнительные настройки
	ДополнительныеНастройки.Очистить();
	ДоступныеДополнительныеНастройки = РегистрыСведений.НастройкиУведомлений.ДоступныеДополнительныеНастройки();
	Для Каждого ДополнительнаяНастройка Из ДоступныеДополнительныеНастройки Цикл
		НоваяСтрока = ДополнительныеНастройки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДополнительнаяНастройка);
		НоваяСтрока.Значение = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройкуПоУмолчанию(
			ДополнительнаяНастройка.Настройка);
	КонецЦикла;
	Элементы.ДополнительныеНастройки.Видимость = (ДополнительныеНастройки.Количество() <> 0);
	
	// Дополнительные настройки - Разрешить пользователям изменять настройки уведомлений
	РазрешитьИзменятьНастройкиУведомлений = РегистрыСведений.НастройкиУведомлений.РазрешеноИзменятьНастройки();
	
	// Дополнительные настройки - УведомленияОкномПоказыватьВЦентреОповещений
	УведомленияОкномПоказыватьВЦентреОповещений = Константы.УведомленияОкномПоказыватьВЦентреОповещений.Получить();
	
	// Дополнительные настройки - Адрес публикации на веб-сервере
	АдресПубликацииНаВебСервере = Константы.АдресПубликацииНаВебСервере.Получить();
	
	// Отправка SMS - Размер сообщения
	РазмерSMS = Константы.РазмерSMS.Получить();
	
	// Отправка SMS - Использовать транслитерацию
	ИспользоватьТранслитерациюSMS = Константы.ИспользоватьТранслитерациюSMS.Получить();
	
	// Отправка SMS - Для пользователя (в день)
	ОграничениеКоличестваВДеньSMS = Константы.ОграничениеКоличестваВДеньSMS.Получить();
	
	// Отправка SMS - Для пользователя (в месяц)
	ОграничениеКоличестваВМесяцSMS = Константы.ОграничениеКоличестваВМесяцSMS.Получить();
	
	// Отправка SMS - Всего (в день)
	ОграничениеКоличестваВсегоВДеньSMS = Константы.ОграничениеКоличестваВсегоВДеньSMS.Получить();
	
	// Отправка SMS - Всего (в месяц)
	ОграничениеКоличестваВсегоВМесяцSMS = Константы.ОграничениеКоличестваВсегоВМесяцSMS.Получить();
	
	// Обновление данных об активности подписок.
	ОбновитьПодпискаАктивна(
		ПодпискиУведомлений,
		СрокиУведомлений,
		ЧастотыУведомлений,
		ДополнительныеНастройки);

	//Настройки push-уведомлений
	ИспользоватьPushУведомления = Константы.ИспользоватьPushУведомления.Получить();	
	МК_КлючДоступаОтправителяPUSH = Константы.КодОтправителяСервисаПередачиУведомлений1СМК.Получить();
	
	СрокХраненияУведомленийПрограммы = Константы.СрокХраненияУведомленийПрограммы.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиНаКлиенте()
	
	Если Не НастройкиЗаполненыКорректно() Тогда
		Возврат;
	КонецЕсли;
	// Сохранение настроек и закрытие формы.
	СохранитьНастройки();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция НастройкиЗаполненыКорректно()
	
	Если ИспользоватьPushУведомления И Не ЗначениеЗаполнено(МК_КлючДоступаОтправителяPUSH) Тогда
		
		ТекстПредупреждения =
			НСтр("ru='Для отправки PUSH уведомлений необходимо указать ключ доступа отправителя в сервисе 1С'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупреждения, , "МК_КлючДоступаОтправителяPUSH");
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	НачатьТранзакцию();
	Попытка
		
		// Уведомления
		Для Каждого Подписка Из ПодпискиУведомлений Цикл
			РегистрыСведений.НастройкиУведомлений.УстановитьПодпискуПоУмолчанию(
				Подписка.ВидСобытия,
				Перечисления.СпособыУведомления.ПоПочте,
				Подписка.ПоПочте);
			РегистрыСведений.НастройкиУведомлений.УстановитьПодпискуПоУмолчанию(
				Подписка.ВидСобытия,
				Перечисления.СпособыУведомления.Окном,
				Подписка.Окном);
			РегистрыСведений.НастройкиУведомлений.УстановитьПодпискуПоУмолчанию(
				Подписка.ВидСобытия,
				Перечисления.СпособыУведомления.ПоSMS,
				Подписка.ПоSMS);
			Если ИспользоватьPushУведомления Тогда
				РегистрыСведений.НастройкиУведомлений.УстановитьПодпискуПоУмолчанию(
					Подписка.ВидСобытия,
					Перечисления.СпособыУведомления.ПоPush,
					Подписка.ПоPush);
			КонецЕсли;
			РегистрыСведений.НастройкиУведомлений.УстановитьПодпискуПоУмолчанию(
				Подписка.ВидСобытия,
				Перечисления.СпособыУведомления.Чат,
				Подписка.Чат);
			РегистрыСведений.НастройкиУведомлений.УстановитьПодпискуПоУмолчанию(
				Подписка.ВидСобытия,
				Перечисления.СпособыУведомления.Telegram,
				Подписка.Telegram);
			РегистрыСведений.НастройкиУведомлений.УстановитьПодпискуПоУмолчанию(
				Подписка.ВидСобытия,
				Перечисления.СпособыУведомления.ВКонтакте,
				Подписка.ВКонтакте);
		КонецЦикла;
		
		// Частоты и сроки уведомлений - Сроки уведомлений
		Для Каждого НастройкаСрока Из СрокиУведомлений Цикл
			РегистрыСведений.НастройкиУведомлений.УстановитьСрокПоУмолчанию(
				НастройкаСрока.ВидСобытия,
				НастройкаСрока.Срок);
		КонецЦикла;
		
		// Частоты и сроки уведомлений - Частоты уведомлений
		Для Каждого НастройкаЧастоты Из ЧастотыУведомлений Цикл
			РегистрыСведений.НастройкиУведомлений.УстановитьЧастотуПоУмолчанию(
				НастройкаЧастоты.ВидСобытия,
				НастройкаЧастоты.Частота);
		КонецЦикла;
		
		// Дополнительные настройки
		Для Каждого ДополнительнаяНастройка Из ДополнительныеНастройки Цикл
			РегистрыСведений.НастройкиУведомлений.УстановитьДополнительнуюНастройкуПоУмолчанию(
				ДополнительнаяНастройка.Настройка,
				ДополнительнаяНастройка.Значение);
		КонецЦикла;
		
		// Дополнительные настройки - Разрешить пользователям изменять настройки уведомлений
		Константы.РазрешитьИзменятьНастройкиУведомлений.Установить(РазрешитьИзменятьНастройкиУведомлений);
		
		// Дополнительные настройки - УведомленияОкномПоказыватьВЦентреОповещений
		Константы.УведомленияОкномПоказыватьВЦентреОповещений.Установить(УведомленияОкномПоказыватьВЦентреОповещений);
		
		// Дополнительные настройки - Адрес публикации на веб-сервере
		Константы.АдресПубликацииНаВебСервере.Установить(АдресПубликацииНаВебСервере);
		
		// Отправка SMS - Размер сообщения
		Константы.РазмерSMS.Установить(РазмерSMS);
		
		// Отправка SMS - Использовать транслитерацию
		Константы.ИспользоватьТранслитерациюSMS.Установить(ИспользоватьТранслитерациюSMS);
		
		// Отправка SMS - Для пользователя (в день)
		Константы.ОграничениеКоличестваВДеньSMS.Установить(ОграничениеКоличестваВДеньSMS);
		
		// Отправка SMS - Для пользователя (в месяц)
		Константы.ОграничениеКоличестваВМесяцSMS.Установить(ОграничениеКоличестваВМесяцSMS);
		
		// Отправка SMS - Всего (в день)
		Константы.ОграничениеКоличестваВсегоВДеньSMS.Установить(ОграничениеКоличестваВсегоВДеньSMS);
		
		// Отправка SMS - Всего (в месяц)
		Константы.ОграничениеКоличестваВсегоВМесяцSMS.Установить(ОграничениеКоличестваВсегоВМесяцSMS);
		
		// Использование Push уведомлений
		Константы.ИспользоватьPushУведомления.Установить(ИспользоватьPushУведомления);
		
		// Отправлять Push уведомлений для МК через сервис 1С
		Константы.ВариантИспользованияPushУведомлений.Установить(
			Перечисления.ВариантыPushУведомлений.ИспользоватьВспомогательныйСервис1С);
		
		// Ключ отправителя Push уведомлений для МК сервиса 1С
		Константы.КодОтправителяСервисаПередачиУведомлений1СМК.Установить(МК_КлючДоступаОтправителяPUSH);
		
		// Логин Push уведомлений для МК сервиса 1С
		Константы.ЛогинСервисаПередачиУведомлений1С.Установить(МК_КлючДоступаОтправителяPUSH);
		
		Константы.СрокХраненияУведомленийПрограммы.Установить(СрокХраненияУведомленийПрограммы);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСпособыУведомления()
	
	Если Не ОбновлятьСпособыУведомления Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("СпособыУведомления");
	Дерево.Строки.Очистить();
	
	ДанныеСпособовУведомлений = РегистрыСведений.СпособыУведомленияПользователей.ПолучитьВсеСпособыУведомления();
	ПараметрыОтбора = Новый Структура("Пользователь");
	
	// Группа "Все пользователи"
	СтрокаВсеПользователи = Дерево.Строки.Добавить();
	СтрокаВсеПользователи.Пользователь = Справочники.РабочиеГруппы.ВсеПользователи;
	СтрокаВсеПользователи.Представление = Справочники.РабочиеГруппы.ВсеПользователи;
	СтрокаВсеПользователи.ЭтоГруппа = Истина;
	ПараметрыОтбора.Пользователь = Справочники.РабочиеГруппы.ВсеПользователи;
	ДанныеСпособовУведомленийВсехПользователей = ДанныеСпособовУведомлений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ДанныеСпособаУведомления Из ДанныеСпособовУведомленийВсехПользователей Цикл
		СтрокаСпособаУведомления = СтрокаВсеПользователи.Строки.Добавить();
		СтрокаСпособаУведомления.Пользователь = Справочники.РабочиеГруппы.ВсеПользователи;
		СтрокаСпособаУведомления.ЭтоГруппа = Ложь;
		ЗаполнитьЗначенияСвойств(СтрокаСпособаУведомления, ДанныеСпособаУведомления, , "Пользователь");
	КонецЦикла;
	
	// Пользователи	
	ВсеПользователи = Сотрудники.ПользователиСотрудников(Сотрудники.ВсеСотрудники());
	Сортировка = Новый СписокЗначений;
	Сортировка.ЗагрузитьЗначения(ВсеПользователи);
	Сортировка.СортироватьПоЗначению();
	ВсеПользователи = Сортировка.ВыгрузитьЗначения();
	Для Каждого Пользователь Из ВсеПользователи Цикл
		СтрокаПользователя = Дерево.Строки.Добавить();
		СтрокаПользователя.Пользователь = Пользователь;
		СтрокаПользователя.Представление = Пользователь;
		СтрокаПользователя.ЭтоГруппа = Истина;
		ПараметрыОтбора.Пользователь = Пользователь;
		ДанныеСпособовУведомленийПользователя = ДанныеСпособовУведомлений.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ДанныеСпособаУведомления Из ДанныеСпособовУведомленийПользователя Цикл
			СтрокаСпособаУведомления = СтрокаПользователя.Строки.Добавить();
			СтрокаСпособаУведомления.ЭтоГруппа = Ложь;			
			ЗаполнитьЗначенияСвойств(СтрокаСпособаУведомления, ДанныеСпособаУведомления);			
			Если ЗначениеЗаполнено(ДанныеСпособаУведомления.Представление) Тогда
				ПредставлениеПодразделенияДолжности = Сотрудники.ПредставлениеПодразделенияИДолжностиСотрудника(
					ДанныеСпособаУведомления.Подразделение, 
					ДанныеСпособаУведомления.Должность);
					
				СтрокаСпособаУведомления.Представление = СтрШаблон(
					Нстр("ru = '%1%2'"),
					ДанныеСпособаУведомления.Представление,
					ПредставлениеПодразделенияДолжности);
			КонецЕсли;
		
			Если СтрокаСпособаУведомления.СпособУведомления = Перечисления.СпособыУведомления.Telegram Тогда
				СтрокаСпособаУведомления.Представление = НСтр("ru = 'Telegram'");
			ИначеЕсли СтрокаСпособаУведомления.СпособУведомления = Перечисления.СпособыУведомления.ВКонтакте Тогда
				СтрокаСпособаУведомления.Представление = НСтр("ru = 'ВКонтакте'");
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Индексы картинок
	Для Каждого СтрокаПользователя Из Дерево.Строки Цикл
		Если ТипЗнч(СтрокаПользователя.Пользователь) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			СтрокаПользователя.ИндексКартинки = 0;
		ИначеЕсли ТипЗнч(СтрокаПользователя.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			СтрокаПользователя.ИндексКартинки = 1;
		КонецЕсли;
		Для Каждого СтрокаСпособаУведомления Из СтрокаПользователя.Строки Цикл
			Если СтрокаСпособаУведомления.СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
				СтрокаСпособаУведомления.ИндексКартинки = 2;
			ИначеЕсли СтрокаСпособаУведомления.СпособУведомления = Перечисления.СпособыУведомления.ПоSMS Тогда
				СтрокаСпособаУведомления.ИндексКартинки = 4;
			ИначеЕсли СтрокаСпособаУведомления.СпособУведомления = Перечисления.СпособыУведомления.Telegram Тогда
				СтрокаСпособаУведомления.ИндексКартинки = -1;
			ИначеЕсли СтрокаСпособаУведомления.СпособУведомления = Перечисления.СпособыУведомления.ВКонтакте Тогда
				СтрокаСпособаУведомления.ИндексКартинки = -1;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСпособаУведомления.ВидКонтактнойИнформации) Тогда
				СтрокаСпособаУведомления.ИндексКартинки = СтрокаСпособаУведомления.ИндексКартинки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "СпособыУведомления");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСпособыУведомленияНаКлиенте()
	
	СвернутыеСтроки = Новый Массив;
	Для Каждого Строка Из СпособыУведомления.ПолучитьЭлементы() Цикл
		Если Не Элементы.СпособыУведомления.Развернут(Строка.ПолучитьИдентификатор()) Тогда
			СвернутыеСтроки.Добавить(Строка.Пользователь);
		КонецЕсли;
	КонецЦикла;
	ТекущийПользователь = Неопределено;
	ТекущиеДанные = Элементы.СпособыУведомления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийПользователь = ТекущиеДанные.Пользователь;
	КонецЕсли;
	
	ПолучитьСпособыУведомления();
	
	Для Каждого Строка Из СпособыУведомления.ПолучитьЭлементы() Цикл
		Если СвернутыеСтроки.Найти(Строка.Пользователь) <> Неопределено Тогда
			Элементы.СпособыУведомления.Свернуть(Строка.ПолучитьИдентификатор());
		Иначе
			Элементы.СпособыУведомления.Развернуть(Строка.ПолучитьИдентификатор());
		КонецЕсли;
		Если Строка.Пользователь = ТекущийПользователь Тогда
			Элементы.СпособыУведомления.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодпискаАктивна(
	ПодпискиУведомлений,
	СрокиУведомлений,
	ЧастотыУведомлений,
	ДополнительныеНастройки)
	
	ПараметрыОтбора = Новый Структура("ОсновноеСобытие");
	
	Для Каждого НастройкаСрока Из СрокиУведомлений Цикл
		ПараметрыОтбора.ОсновноеСобытие = НастройкаСрока.ВидСобытия;
		НайденныеСтроки = ПодпискиУведомлений.НайтиСтроки(ПараметрыОтбора);
		ПодпискаАктивна = Ложь;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПодпискаАктивна = ПодпискаАктивна
				Или НайденнаяСтрока.ПоПочте
				Или НайденнаяСтрока.ПоSMS
				Или НайденнаяСтрока.Окном
				Или НайденнаяСтрока.ПоPush
				Или НайденнаяСтрока.Чат
				Или НайденнаяСтрока.Telegram
				Или НайденнаяСтрока.ВКонтакте;
		КонецЦикла;
		НастройкаСрока.ПодпискаАктивна = ПодпискаАктивна;
	КонецЦикла;
	
	Для Каждого НастройкаЧастоты Из ЧастотыУведомлений Цикл
		ПараметрыОтбора.ОсновноеСобытие = НастройкаЧастоты.ВидСобытия;
		НайденныеСтроки = ПодпискиУведомлений.НайтиСтроки(ПараметрыОтбора);
		ПодпискаАктивна = Ложь;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПодпискаАктивна = ПодпискаАктивна
				Или НайденнаяСтрока.ПоПочте
				Или НайденнаяСтрока.ПоSMS
				Или НайденнаяСтрока.Окном
				Или НайденнаяСтрока.ПоPush
				Или НайденнаяСтрока.Чат
				Или НайденнаяСтрока.Telegram
				Или НайденнаяСтрока.ВКонтакте;
		КонецЦикла;
		НастройкаЧастоты.ПодпискаАктивна = ПодпискаАктивна;
	КонецЦикла;
	
	Для Каждого ДополнительнаяНастройка Из ДополнительныеНастройки Цикл
		ПараметрыОтбора.ОсновноеСобытие = ДополнительнаяНастройка.ВидСобытия;
		НайденныеСтроки = ПодпискиУведомлений.НайтиСтроки(ПараметрыОтбора);
		ПодпискаАктивна = Ложь;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПодпискаАктивна = ПодпискаАктивна
				Или НайденнаяСтрока.ПоПочте
				Или НайденнаяСтрока.ПоSMS
				Или НайденнаяСтрока.Окном
				Или НайденнаяСтрока.ПоPush
				Или НайденнаяСтрока.Чат
				Или НайденнаяСтрока.Telegram
				Или НайденнаяСтрока.ВКонтакте;
		КонецЦикла;
		ДополнительнаяНастройка.ПодпискаАктивна = ПодпискаАктивна;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()
	
	РегистрыСведений.НастройкиУведомлений.УдалитьВсеНастройкиПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтправкуSMS(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаОтправкиSMS");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормы() 
	
	Элементы.ПодпискиУведомленийЧат.Видимость = ИспользоватьЧатБота;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуДляМобильногоПриНеобходимости()
	
	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПодпискиУведомленийГруппаСодержимое.Группировка = ГруппировкаКолонок.Вертикальная;
	Элементы.ПодпискиУведомлений.Высота = 0;
	Элементы.ПодпискиУведомлений.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
	Элементы.Переместить(Элементы.Готово, КоманднаяПанель);
	Элементы.Переместить(Элементы.Отмена, КоманднаяПанель);
	
КонецПроцедуры

&НаСервере
Функция АктивизироватьБотаВTelegramНаСервере()
	
	Попытка
		РаботаСУведомлениями.АктивизироватьБотаВTelegram(ИмяБотаTelegram, ТокенTelegram);
		ОбновитьНастройкиTelegram();
		ИспользуетсяСпособУведомления =
			РегистрыСведений.СпособыУведомленияПользователей.ИспользуетсяСпособУведомления(
				Перечисления.СпособыУведомления.Telegram);
	Исключение
		ЗаписьЖурналаРегистрации(
			РаботаСУведомлениями.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ИспользуетсяСпособУведомления;
	
КонецФункции

&НаСервере
Процедура ОтключитьБотаОтTelegramНаСервере()
	
	Попытка 
		РаботаСУведомлениями.ОтключитьБотаОтTelegram();
		ОбновитьНастройкиTelegram();
	Исключение
		ЗаписьЖурналаРегистрации(
			РаботаСУведомлениями.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиTelegram()
	
	ИспользоватьУведомленияЧерезTelegram =
		Константы.ИспользоватьУведомленияЧерезTelegram.Получить();
	ИмяБотаTelegram = Константы.ИмяБотаTelegram.Получить();
		
	ИнтеграцияБотаTelegram = РаботаСУведомлениями.ИнтеграцияБотаTelegram();
	Если ИнтеграцияБотаTelegram = Неопределено Тогда
		ТокенTelegram = "";
	Иначе
		ТокенTelegram = ИнтеграцияБотаTelegram.ПараметрыВнешнейСистемы.Получить("token")
	КонецЕсли;
	
	ОбновитьИнструкциюTelegram();
	
	Элементы.ИмяБотаTelegram.ТолькоПросмотр = ИспользоватьУведомленияЧерезTelegram;
	Элементы.ИмяБотаTelegram.Видимость =
		ИспользоватьЧатБота
		И КОДСервер.ЭтоЦентральныйУзел();
	Элементы.ПроверитьИмяБотаTelegram.Видимость =
		ИспользоватьЧатБота
		И КОДСервер.ЭтоЦентральныйУзел();
	Элементы.ТокенTelegram.ТолькоПросмотр = ИспользоватьУведомленияЧерезTelegram;
	Элементы.ТокенTelegram.Видимость =
		ИспользоватьЧатБота
		И КОДСервер.ЭтоЦентральныйУзел();
	Элементы.АктивизироватьБотаВTelegram.Видимость = 
		ИспользоватьЧатБота
		И Не ИспользоватьУведомленияЧерезTelegram
		И КОДСервер.ЭтоЦентральныйУзел();
	Элементы.ОтключитьБотаОтTelegram.Видимость = 
		ИспользоватьЧатБота
		И ИспользоватьУведомленияЧерезTelegram
		И КОДСервер.ЭтоЦентральныйУзел();
	Элементы.ПодпискиУведомленийTelegram.Видимость = ИспользоватьУведомленияЧерезTelegram;
	
	СтраницаОтправкаTelegramИнициализирована = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнструкциюTelegram()
	
	Если Не ИспользоватьЧатБота Тогда
		
		// Рекомендуем включить чат-бота.
		Инструкция = НСтр("ru = 'Для получения уведомлений через Telegram необходимо настроить чат-бота. Чат-бота можно включить, перейдя в ""Настройки программы - Общие настройки"" и включив настройки ""Обсуждения"" и ""Чат-бот"".'");
		
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Инструкция = Инструкция + Символы.ПС + Символы.ПС
				+ НСтр("ru = 'Активизировать бота в Telegram можно только в центральном узле.'");
			
		КонецЕсли;
		
	ИначеЕсли ИспользоватьЧатБота И Не ИспользоватьУведомленияЧерезTelegram Тогда
		
		// Рекомендуем подключить чат-бота в Telegram.
		ШаблонИнструкции =
			НСтр("ru = 'Для получения уведомлений через Telegram необходим бот, который будет рассылать уведомления. Если у вас в Telegram еще нет бота, то создайте его: 
				 |1. Открыть Telegram в телефоне или на компьютере, найти с помощью поиска бота <a href =""https://telegram.me/BotFather"">BotFather</a>.
				 |2. Написать ему в сообщении <b>/newbot</b> и выбрать имя, которое будет отображаться в списке контактов.
				 |3. Если имя бота не занято и введено правильно, BotFather пришлет в ответ сообщение с токеном для доступа к созданному боту, который понадобится далее при настройке.
				 |
				 |Не забудьте задать описание бота и картинку, как описано <a href =""https://tlgrm.ru/docs/bots#edit-settings"">здесь</a>.'");
		
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			ШаблонИнструкции = ШаблонИнструкции + Символы.ПС + Символы.ПС
				+ НСтр("ru = 'Активизировать бота в Telegram можно только в центральном узле.'");
			
		КонецЕсли;
		
		Инструкция = СтроковыеФункции.ФорматированнаяСтрока(ШаблонИнструкции);
		
	ИначеЕсли ИспользоватьЧатБота И ИспользоватьУведомленияЧерезTelegram Тогда
		
		// Рекомендуем подключиться пользователям к боту в Telegram.
		Инструкция =
			НСтр("ru = 'Уведомления через Telegram настроены - теперь пользователи смогут самостоятельно подключиться к боту для получения уведомлений.
				 |
				 |Администратор на закладке ""Подписки"" может указать, какие уведомления по умолчанию будут поступать через Telegram, если пользователь себе подключит уведомления через Telegram.
				 |
				 |Для подключения уведомлений через Telegram пользователи могут зарегистрироваться в боте через ""Персональные настройки - Уведомления - Способы уведомления"".'");
		
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Инструкция = Инструкция + Символы.ПС + Символы.ПС
				+ НСтр("ru = 'Отключить бота от Telegram можно только в центральном узле.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИнструкцияTelegram.Заголовок = Инструкция;
	
КонецПроцедуры

&НаСервере
Функция АктивизироватьБотаВВКонтактеНаСервере()
	
	Попытка 
		РаботаСУведомлениями.АктивизироватьБотаВВКонтакте(
			ИмяГруппыВКонтакте,
			КлючВКонтакте,
			КлючГруппыВКонтакте,
			СсылкаГруппыВКонтакте);
		ОбновитьНастройкиВКонтакте();
		ИспользуетсяСпособУведомления =
			РегистрыСведений.СпособыУведомленияПользователей.ИспользуетсяСпособУведомления(
				Перечисления.СпособыУведомления.ВКонтакте);
	Исключение
		ЗаписьЖурналаРегистрации(
			РаботаСУведомлениями.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ИспользуетсяСпособУведомления;
	
КонецФункции

&НаСервере
Процедура ОтключитьБотаОтВКонтактеНаСервере()
	
	Попытка 
		РаботаСУведомлениями.ОтключитьБотаОтВКонтакте();
		ОбновитьНастройкиВКонтакте();
	Исключение
		ЗаписьЖурналаРегистрации(
			РаботаСУведомлениями.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиВКонтакте()
	
	ИспользоватьУведомленияЧерезВКонтакте =
		Константы.ИспользоватьУведомленияЧерезВКонтакте.Получить();
	
	КлючиВКонтакте = РаботаСУведомлениями.КлючиВКонтакте();
	Если КлючиВКонтакте <> Неопределено Тогда
		КлючВКонтакте = КлючиВКонтакте.КлючВКонтакте;
		КлючГруппыВКонтакте = КлючиВКонтакте.КлючГруппыВКонтакте;
	Иначе
		КлючВКонтакте = "";
		КлючГруппыВКонтакте = "";
	КонецЕсли;
	ИмяГруппыВКонтакте = Константы.ИмяГруппыВКонтакте.Получить();
	СсылкаГруппыВКонтакте = Константы.СсылкаГруппыВКонтакте.Получить();
	
	ОбновитьИнструкциюВКонтакте();
	
	Элементы.ИмяГруппыВКонтакте.ТолькоПросмотр = ИспользоватьУведомленияЧерезВКонтакте;
	Элементы.ИмяГруппыВКонтакте.Видимость =
		ИспользоватьЧатБота
		И КОДСервер.ЭтоЦентральныйУзел();
	Элементы.КлючВКонтакте.ТолькоПросмотр = ИспользоватьУведомленияЧерезВКонтакте;
	Элементы.КлючВКонтакте.Видимость =
		ИспользоватьЧатБота
		И КОДСервер.ЭтоЦентральныйУзел();
	Элементы.КлючГруппыВКонтакте.ТолькоПросмотр = ИспользоватьУведомленияЧерезВКонтакте;
	Элементы.КлючГруппыВКонтакте.Видимость =
		ИспользоватьЧатБота
		И КОДСервер.ЭтоЦентральныйУзел();
	Элементы.СсылкаГруппыВКонтакте.ТолькоПросмотр = ИспользоватьУведомленияЧерезВКонтакте;
	Элементы.СсылкаГруппыВКонтакте.Видимость =
		ИспользоватьЧатБота
		И КОДСервер.ЭтоЦентральныйУзел();
	Элементы.АктивизироватьБотаВВКонтакте.Видимость = 
		ИспользоватьЧатБота
		И Не ИспользоватьУведомленияЧерезВКонтакте
		И КОДСервер.ЭтоЦентральныйУзел();
	Элементы.ОтключитьБотаОтВКонтакте.Видимость = 
		ИспользоватьЧатБота
		И ИспользоватьУведомленияЧерезВКонтакте
		И КОДСервер.ЭтоЦентральныйУзел();
	Элементы.ПодпискиУведомленийВКонтакте.Видимость = ИспользоватьУведомленияЧерезВКонтакте;
	
	СтраницаОтправкаВКонтактеИнициализирована = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнструкциюВКонтакте()
	
	Если Не ИспользоватьЧатБота Тогда
		
		// Рекомендуем включить чат-бота.
		Инструкция = НСтр("ru = 'Для получения уведомлений через ВКонтакте необходимо настроить чат-бота. Чат-бота можно включить, перейдя в ""Настройки программы - Общие настройки"" и включив настройки ""Обсуждения"" и ""Чат-бот"".'");
		
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Инструкция = Инструкция + Символы.ПС + Символы.ПС
				+ НСтр("ru = 'Активизировать бота в ВКонтакте можно только в центральном узле.'");
			
		КонецЕсли;
		
	ИначеЕсли ИспользоватьЧатБота И Не ИспользоватьУведомленияЧерезВКонтакте Тогда
		
		// Рекомендуем подключить чат-бота в ВКонтакте.
		ШаблонИнструкции =
			НСтр("ru = 'Для получения уведомлений через ВКонтакте, необходимо создать сообщество, указать его имя и ссылку для открытия в браузере. Затем укажите его ключи:
				 |1. Перейти в настройки сообщества ВКонтакте.
				 |2. На вкладке <b>Работа с API</b> создать ключ и ввести его в поле <b>Ключ доступа</b>.
				 |3. На вкладке <b>Callback API </b>найти строчку похожую на
				 |{""type"":""Confirmation"", ""group_id"": 346875149}
				 |и ввести цифры group_id в поле <b>ID сообщества</b>.
				 |4. На вкладке <b>Сообщения</b> включите сообщения сообщества.'");
		
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			ШаблонИнструкции = ШаблонИнструкции + Символы.ПС + Символы.ПС
				+ НСтр("ru = 'Активизировать бота в ВКонтакте можно только в центральном узле.'");
			
		КонецЕсли;
		
		Инструкция = СтроковыеФункции.ФорматированнаяСтрока(ШаблонИнструкции);
		
	ИначеЕсли ИспользоватьЧатБота И ИспользоватьУведомленияЧерезВКонтакте Тогда
		
		// Рекомендуем подключиться пользователям к боту в ВКонтакте.
		Инструкция =
			НСтр("ru = 'Уведомления через ВКонтакте настроены - теперь пользователи смогут самостоятельно подключиться к боту для получения уведомлений.
				 |
				 |Администратор на закладке ""Подписки"" может указать, какие уведомления по умолчанию будут поступать через ВКонтакте, если пользователь себе подключит уведомления через ВКонтакте.
				 |
				 |Для подключения уведомлений через ВКонтакте пользователи могут зарегистрироваться в боте через ""Персональные настройки - Уведомления - Способы уведомления"".'");
		
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Инструкция = Инструкция + Символы.ПС + Символы.ПС
				+ НСтр("ru = 'Отключить бота от ВКонтакте можно только в центральном узле.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИнструкцияВКонтакте.Заголовок = Инструкция;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьОчиститьНастройкиОтправки(СпособУведомления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОчиститьНастройкиОтправкиПослеВопроса",
		ЭтотОбъект,
		СпособУведомления);
	
	ТекстВопроса = 
		СтрШаблон(
			НСтр("ru = 'Бот в %1 активирован.
				|
				|У некоторых пользователей уже есть настройки отправки через %1.
				|Если вы активировали того же самого бота, которого ранее отключали - то очистка не требуется.
				|
				|Очистить настройки отправки через %1?'"),
			СпособУведомления);
	
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНастройкиОтправкиПослеВопроса(Результат, СпособУведомления) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьНастройкиОтправки(СпособУведомления);
	ПоказатьПредупреждение(, НСтр("ru = 'Настройки отправки уведомлений через бота очищены.'"));
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНастройкиОтправки(Знач СпособУведомления)
	
	РегистрыСведений.СпособыУведомленияПользователей.ОчиститьНастройкиОтправки(СпособУведомления);
	
КонецПроцедуры

#КонецОбласти