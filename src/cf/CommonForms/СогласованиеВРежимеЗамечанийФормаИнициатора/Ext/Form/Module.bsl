
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		Отказ = Истина;
		Сообщить(НСтр("ru = 'Для согласования в режиме замечаний используйте тонкий клиент.'"));
		Возврат;
	КонецЕсли;
	
	ПолеPDFРаботаетВВебКлиенте = РаботаСPDFПовтИсп.ПолеPDFРаботаетВВебКлиенте();
	МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	ИспользоватьLibreOffice = ФайловыеФункцииПовтИсп.ИспользоватьLibreOffice();

	ИспользоватьПредпросмотрФайловОбщая = ПолучитьФункциональнуюОпцию("ИспользоватьПредпросмотрФайлов");
	ИспользоватьПредпросмотрФайловЛичная =
		ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьПредпросмотрФайлов");
		
	Если ИспользоватьПредпросмотрФайловЛичная = Неопределено Тогда
		ИспользоватьПредпросмотрФайловЛичная = Истина;
	КонецЕсли;
	
	ИспользоватьПредпросмотрФайлов = 
		ИспользоватьПредпросмотрФайловОбщая И ИспользоватьПредпросмотрФайловЛичная;
		
	СоздатьКнопкиПорционногоПредпросмотра();	
		
	НомерБлока = 1;
	ВсегоПорцийПредпросмотра = 1;
	ОбновитьКнопкиДинамическогоСписка();
		
	ПоказыватьПравкиДругихЭтапов = Не НеПоказыватьПравкиДругихЭтапов;
	ПоказатьГалочкиКоманд();
	
	ВыбранныйФайл = Неопределено;
	Если Параметры.Свойство("Файл") И ТипЗнч(Параметры.Файл) = Тип("СправочникСсылка.Файлы") Тогда
		ВыбранныйФайл = Параметры.Файл;
	КонецЕсли;	
	
	Если Параметры.Свойство("Документ") Тогда
		Документ = Параметры.Документ;
		ЕстьПравоИзменения = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
			Документ).Изменение;
	КонецЕсли;	
	
	Если Параметры.Свойство("Действие") Тогда
		Действие = Параметры.Действие;
		ВеткаОбработки = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(Действие);
		НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(Действие);           
		
		РеквДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "ПодписыватьУЭП, ЧислоСтраницДляПредпросмотраПорции");    
		ЧислоСтраницДляПредпросмотраПорции = РеквДействия.ЧислоСтраницДляПредпросмотраПорции;
	КонецЕсли;	
	
	Если Параметры.Свойство("Участник") Тогда
		Участник = Параметры.Участник;
	КонецЕсли;	
	
	Если Параметры.Свойство("Идентификатор") Тогда
		ИдентификаторУчастника = Параметры.Идентификатор;
	КонецЕсли;	
	
	Если Параметры.Свойство("МаксимальноеКоличествоИтераций") Тогда
		МаксимальноеКоличествоИтераций = Параметры.МаксимальноеКоличествоИтераций;
	КонецЕсли;
	
	Если Параметры.Свойство("БизнесПроцесс") Тогда
		БизнесПроцесс = Параметры.БизнесПроцесс;
	КонецЕсли;	
	
	Если Параметры.Свойство("Задача") Тогда
		Задача = Параметры.Задача;
	КонецЕсли;	
	
	Если Параметры.Свойство("ДействиеЗадачи") Тогда
		ДействиеЗадачи = Параметры.ДействиеЗадачи;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ДействиеЗадачи = ДействияВызовСервера.ДействиеЗадачиПоДействиюИИдентификатору(
			Действие, ИдентификаторУчастника);
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ТекущийИсточникДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДействиеЗадачи,
			"Источник");
	КонецЕсли;	
	
	СпособСогласованияВРежимеЗамечаний = Константы.СпособСогласованияВРежимеЗамечаний.Получить();
	
	КомментарииДобавлены = СогласованиеВРежимеЗамечанийСервер.КомментарииДобавлены(
		Документ, НомерИтерации, ВеткаОбработки);
		
	Если Не КомментарииДобавлены Тогда
		Элементы.ГруппаСтраницыКорень.ТекущаяСтраница = Элементы.ГруппаСтраницаНеПодготовлено;
	КонецЕсли;	
		
	Если НомерИтерации = 1 Тогда
		Элементы.ПравкиПоказатьПравкиПредыдущихЭтапов.Доступность = Ложь;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Документ, НСтр("ru = 'Форма инициатора в режиме замечаний'"));
	КонецЕсли;	
	
	ЭтаФорма.Заголовок = Строка(Документ) + НСтр("ru = ' (согласование документа)'");
	НастройкаШрифтОтображения = ВстроеннаяПочтаКлиентСервер.ПолучитьШрифтПочтыПоУмолчанию();
	
	Элементы.РеквизитыДокумента.Видимость = Ложь;
	
	ИдентификаторБлокировкиПроцесса = УникальныйИдентификатор;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	// когда вернулось инициатору, он по умолчанию уже не должен видеть отличия от шаблона.
	ПоказыватьОтличияОтШаблона = Ложь;
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", ТекущийИсточникДействияОбъект);
		ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.СтраницаДополнительныеРеквизиты.Имя);
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", Элементы.ГруппаПравоФормы.Имя);
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(
			ЭтотОбъект,
			ТекущийИсточникДействияДанные);
		
		УстановитьПривилегированныйРежим(Ложь);
	
	КонецЕсли;
	
	Если КомментарииДобавлены Тогда
		ЗаполнитьСписокФайлы();
	КонецЕсли;
	
	Элементы.ФайлыКонтекстноеМенюПоказатьОтличияОтПредыдущего.Видимость = Ложь;
	Если ЗначениеЗаполнено(Документ) Тогда
		СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(Документ, Справочники.ТипыСвязей.ДелаетНеДействующим);
		Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			
			ТекФайлы1 = СогласованиеВРежимеЗамечанийСервер.ПолучитьПриложенныеФайлыДляТаблицыФайлы(Документ);
			ТекФайлы2 = СогласованиеВРежимеЗамечанийСервер.ПолучитьПриложенныеФайлыДляТаблицыФайлы(СвязанныйДокумент);
			Если ТекФайлы1.Количество() = 1 И ТекФайлы2.Количество() = 1 Тогда
				// доступна команда "Показать отличия от предыдущего"
				Элементы.ФайлыКонтекстноеМенюПоказатьОтличияОтПредыдущего.Видимость = Истина;
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЕсли;
	
	Элементы.ПравкиНомер.Видимость = Истина; // новый
	Элементы.ПравкиНомерЭтапа.Видимость = Ложь; // старый
	
	УстановитьВидимостьКомандВыполнения();
	
	Элементы.ГруппаЛегенда.Видимость = Не НеПоказыватьЛегенду;	
	
	ОбновитьПоступившиеОбновления();
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДействиеЗадачи);
		АвтоНавигационнаяСсылка = Ложь;
	КонецЕсли;	
	
	ПоказыватьPdfСредствами1С = РаботаСФайламиСлужебныйПовтИсп.ПоказыватьPdfСредствами1С();
	
	ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
	ЭтоТонкийКлиент = ОбщегоНазначенияДокументооборот.ЭтоТонкийКлиент();
	
	// Pdf
	Если ЭтоТонкийКлиент Или (ЭтоВебКлиент И ПолеPDFРаботаетВВебКлиенте) Тогда
		Если ПоказыватьPdfСредствами1С Тогда
			ВывестиPDFДокументНаСервере();
		КонецЕсли;
	КонецЕсли;
	//Конец Pdf
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЕстьПравоИзменения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'У вас нет прав на изменение документа'"));
		Возврат;
	КонецЕсли;	

	Если ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	Если Не КомментарииДобавлены Тогда
		ПодключитьОбработчикОжидания("ПодготовитьКомментарии", 0.2, Истина);
		Возврат;
	КонецЕсли;	
	
	Если ИдПервогоWordФайла <> 0 Тогда
		Элементы.Файлы.ТекущаяСтрока = ИдПервогоWordФайла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьКомментарии()   
	
	ЧислоПопыток = 0;
	
	Пока Истина Цикл
		
		ЗаблокироватьДанныеДействияДляРедактирования(Действие, ДанныеЗаблокированы, УникальныйИдентификатор);
		
		Если ДанныеЗаблокированы Тогда
			
			КомментарииДобавлены = СогласованиеВРежимеЗамечанийСервер.КомментарииДобавлены(
				Документ, НомерИтерации, ВеткаОбработки);
			Если КомментарииДобавлены Тогда
				Прервать;
			КонецЕсли;	
			
			// Добавим комментарии
			СогласованиеВРежимеЗамечанийКлиент.ДобавитьКомментарииБезИспользованияРобота(
				Действие, Документ, УникальныйИдентификатор, НомерИтерации,,,СпособСогласованияВРежимеЗамечаний, ЧислоСтраницДляПредпросмотраПорции);
				
			РазблокироватьДанныеДействияДляРедактирования(Действие, ДанныеЗаблокированы, УникальныйИдентификатор);	
			Прервать;
			
		Иначе  
			
			ЧислоПопыток = ЧислоПопыток + 1;
			Если ЧислоПопыток > 10 Тогда
				Сообщить(НСтр("ru = 'Не удалось подготовить html'"));
				Прервать;
			КонецЕсли;	
			
			ДатаНачала = ТекущаяДата();
			Пока Истина Цикл
				Если ТекущаяДата() > ДатаНачала + 2 Тогда // ждем 2 сек
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
	
	КомментарииДобавлены = Истина;	
	
	ЗаполнитьСписокФайлы();
	Элементы.ГруппаСтраницыКорень.ТекущаяСтраница = Элементы.ГруппаСтраницаОсновная;
	
	ПодключитьОбработчикОжидания("ПоставитьСтрокуФайлов", 0.2, Истина);
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ПоказатьСкрытьФайлыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьСтрокуФайлов()
	
	Если ИдПервогоWordФайла <> 0 Тогда
		Элементы.Файлы.ТекущаяСтрока = ИдПервогоWordФайла;
	КонецЕсли;	
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ПоказатьСкрытьФайлыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НужноПеречитать = Ложь;
	
	Если Настройки["НеПоказыватьПравкиДругихЭтапов"] <> Неопределено Тогда
		
		НеПоказыватьПравкиДругихЭтапов = Настройки["НеПоказыватьПравкиДругихЭтапов"];
		ПоказыватьПравкиДругихЭтапов = Не НеПоказыватьПравкиДругихЭтапов;
		НужноПеречитать = Истина;
		
	КонецЕсли;
	
	Если Настройки["ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа"] <> Неопределено Тогда
		
		ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Настройки["ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа"];
		НужноПеречитать = Истина;
		
	КонецЕсли;
	
	Если НужноПеречитать Тогда
		ПеречитатьПравкиСервер();
	КонецЕсли;	
	
	ПоказатьГалочкиКоманд();
	
	Элементы.ГруппаЛегенда.Видимость = Не НеПоказыватьЛегенду;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Не ПредупреждениеВыдано Тогда
		
		ПредупреждениеВыдано = Истина;
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПоказатьВСпискеЗавершение", ЭтотОбъект, Параметры);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,
			КодВозвратаДиалога.Отмена);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВСпискеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено Или РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьВыполнить();
		Закрыть();
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыполненоДействиеЗадачи"
		И Источник = УникальныйИдентификатор Тогда
		Закрыть();
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Документ Тогда
		
		ЗаписатьВыполнить();
		ЗаполнитьСписокФайлы();
				
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
		   И Параметр.Свойство("Владелец")
		   И Параметр.Владелец = Документ Тогда
		   
		    ЗаписатьВыполнить();
			ЗаполнитьСписокФайлы();
		
		КонецЕсли;
				
	КонецЕсли;
	
	Если ИмяСобытия = "ДействиеЗадачиПеренаправлено"
		И Параметр = ДействиеЗадачи
		И Источник = УникальныйИдентификатор Тогда
		
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		
		// СтандартныеПодсистемы.Свойства 
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура МК_ПоказатьСкрытьФайлы(Команда)
	
	Элементы.Файлы.Видимость = Не Элементы.Файлы.Видимость;
	МК_ПоказатьСкрытьФайлыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаИнформация(Команда)
	
	МК_СтраницаИнформацияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаПротокол(Команда)
	
	МК_СтраницаПротоколНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаПравки(Команда)
	
	МК_СтраницаПравкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьВыполнить();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьВыполнить();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВыполнить()
	
	ЗаписатьСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСервер()
	
	Если ЗначениеЗаполнено(ИдентификаторУчастника) И ДействияВызовСервера.ЗадачаВыполнена(Действие, ИдентификаторУчастника) Тогда
		ВызватьИсключение НСтр("ru = 'Задача уже выполнена.'");
	КонецЕсли;	
	
	ЗаписаноПравок = 0;
	
	Если Не БылСделанВозвратВРежимПравок Тогда // при возврате в режим правок все уже в базу записано
		
		// запоминаем для предыдущей строки - только Правки и ПересекающиесяПравки и ТекстHTML.
		Для Каждого Строка Из Файлы Цикл
			
			Если Строка.Ссылка = ТекущийФайл Тогда // нашли
				
				ПравкиТаблица = РеквизитФормыВЗначение("Правки");
				ЗначениеВДанныеФормы(ПравкиТаблица, Строка.Правки);
				
				ПересекающиесяПравкиТаблица = РеквизитФормыВЗначение("ПересекающиесяПравки");
				ЗначениеВДанныеФормы(ПересекающиесяПравкиТаблица, Строка.ПересекающиесяПравки);
				
				РеквизитыДокументаТаблица = РеквизитФормыВЗначение("РеквизитыДокумента");
				ЗначениеВДанныеФормы(РеквизитыДокументаТаблица, Строка.РеквизитыДокумента);
				
				Строка.МаксимальныйНомерПравки = МаксимальныйНомерПравки;
				
				Прервать;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Для Каждого Строка Из Файлы Цикл
		
		Если БылСделанВозвратВРежимПравок И Строка.Ссылка = ТекущийФайл Тогда
			Продолжить; // при возврате в режим правок все уже в базу записано
		КонецЕсли;	
		
		ЗаписатьПравкиОднойСтроки(Строка);
		
	КонецЦикла;		
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(
			Документ, 
			СтрШаблон(НСтр("ru = 'Форма инициатора в режиме замечаний (замечаний записано: %1)'"), ЗаписаноПравок)
			);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПравкиОднойСтроки(СтрокаФайлы)
	
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ПравкиТаблица = ДанныеФормыВЗначение(СтрокаФайлы.Правки, Тип("ТаблицаЗначений"));	
		
	ЗаписатьПравки(ПравкиТаблица, СтрокаФайлы);
	
	СтрокаФайлы.ТекстHTMLПриОткрытии = СтрокаФайлы.ТекстHTML;
	
	Если ЗначениеЗаполнено(СтрокаФайлы.ФайлHTML) Тогда
		ПодсветитьПравки(СтрокаФайлы);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьПравки(ПравкиТаблица, СтрокаФайлы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ПравкиТаблица Цикл
		
		СпрСсылка = Справочники.Замечания.ПолучитьСсылку(Строка.УникальныйИдентификатор);
		
		Если ОбщегоНазначения.СсылкаСуществует(СпрСсылка) Тогда
			Запись = СпрСсылка.ПолучитьОбъект();
	    Иначе
			Запись = Справочники.Замечания.СоздатьЭлемент();
			Запись.УстановитьСсылкуНового(СпрСсылка);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, Строка);
		
		Запись.ВладелецЗамечания = СтрокаФайлы.ФайлHTML;
		Если Не ЗначениеЗаполнено(СтрокаФайлы.ФайлHTML) Тогда
			Запись.ВладелецЗамечания = СтрокаФайлы.Ссылка;
		КонецЕсли;	
		
		Запись.Документ = Документ;
		Запись.ВеткаОбработки = ВеткаОбработки;
		
		Запись.Записать();
		
		ЗаписаноПравок = ЗаписаноПравок + 1;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
// Строка - строка табличной части Файлы
Процедура ПрочитатьHTML(Строка)
	
	Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Строка.Расширение) Тогда
		
		Строка.ФайлHTML = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
			Строка.ВладелецФайла, Строка.Ссылка, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание,,,,
			Строка.ВсегоПорцийПредпросмотра, НомерБлока - 1);   // НомерБлока  -с 1, но из СУБД читаем с 0
		
		Если ЗначениеЗаполнено(Строка.ФайлHTML) Тогда
			
			РеквизитыHTML = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ФайлHTML, 
				"ТекущаяВерсия, ТекущаяВерсияРазмер, ТекущаяВерсияДатаСоздания");
			
			Строка.ВерсияHTML = РеквизитыHTML.ТекущаяВерсия;
			Строка.ФайлHTMLРазмер = РеквизитыHTML.ТекущаяВерсияРазмер;
			
			ТекущаяВерсияДатаСоздания = РеквизитыHTML.ТекущаяВерсияДатаСоздания;
			ДатаНачалаUTF = СогласованиеВРежимеЗамечанийСервер.ПолучитьДатуНачалаИспользованияКодировкиUTF();
			
			ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Строка.ФайлHTML);
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
			ДвоичныеДанные.Записать(ИмяВременногоФайла);
			
			ЧтениеТекста = Неопределено;
			Если ТекущаяВерсияДатаСоздания < ДатаНачалаUTF Тогда // старый файл
				ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
			Иначе
				ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
			КонецЕсли;	
			Строка.ТекстHTML = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
			Строка.ТекстHTML = СтрЗаменить(Строка.ТекстHTML, Символ(1), " ");
			Строка.ТекстHTML = СтрЗаменить(Строка.ТекстHTML, Символ(30), " ");
			
			// 2 - создан по шаблону и идентичен по шаблону
			Если (Строка.ОтличаетсяОтШаблона <> 2 Или Не Строка.ЕстьПравилаАвтозаполнения)
				И Не ЭтоТиповойДокумент Тогда
			КонецЕсли;
			
			СогласованиеВРежимеЗамечанийСервер.ВставитьКартинкиВТекстHTML(
				Строка.ТекстHTML, Строка.ВладелецФайла, Строка.ФайлHTML, УникальныйИдентификатор); // ИдентификаторыКартинокПисьма
			
			Строка.ТекстHTMLПриОткрытии = Строка.ТекстHTML;
			
			Строка.МаксимальныйНомерПравки = РегистрыСведений.МаксимальныеНомераПравок.ПолучитьЗапись(Строка.ФайлHTML);
			
			ПодсветитьПравки(Строка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПеречитатьПравки()
	
	ПеречитатьПравкиСервер();
	
	Если Элементы.Файлы.ТекущиеДанные <> Неопределено Тогда
		УстановитьДанныеИзТекущейСтроки(Элементы.Файлы.ТекущаяСтрока);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ПеречитатьПравкиСервер()
	
	Для Каждого Строка Из Файлы Цикл
		
		Если Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Строка.Ссылка) Тогда
			ПрочитатьHTML(Строка);
		КонецЕсли;
		
		ПрочитатьПравки(Строка);
		Строка.ЧислоЗамечаний = Строка.Правки.Количество();
		
	КонецЦикла;
	
	ТекущаяВерсияДанныхДействияЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДействиеЗадачи, "ВерсияДанных");
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		ТекущаяВерсияДанныхИсточникаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийИсточникДействия, "ВерсияДанных");
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
// Строка - строка таблицы Файлы
Процедура ПрочитатьПравки(Строка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Строка.Правки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Замечания.ВладелецЗамечания КАК ВладелецЗамечания,
		|	Замечания.Документ КАК Документ,
		|	Замечания.Ссылка КАК Ссылка,
		|	Замечания.Автоматическая КАК Автоматическая,
		|	Замечания.Автор КАК Автор,
		|	Замечания.ВерсияHTML КАК ВерсияHTML,
		|	Замечания.Дата КАК Дата,
		|	Замечания.ИдКонца КАК ИдКонца,
		|	Замечания.ИдНачала КАК ИдНачала,
		|	Замечания.Комментарий КАК Комментарий,
		|	Замечания.НаЧтоМеняем КАК НаЧтоМеняем,
		|	Замечания.НомерКартинки КАК НомерКартинки,
		|	Замечания.НомерЭтапа КАК НомерЭтапа,
		|	Замечания.Отработано КАК Отработано,
		|	Замечания.Замечание КАК Замечание,
		|	Замечания.СтатусПринятия КАК СтатусПринятия,
		|	Замечания.ТипЗамечания КАК ТипЗамечания,
		|	Замечания.ЧтоМеняем КАК ЧтоМеняем,
		|	Замечания.ЭтоЗамечаниеWord КАК ЭтоЗамечаниеWord,
		|	Замечания.СсылкиУтеряны КАК СсылкиУтеряны,
		|	Замечания.РеальныйАвтор КАК РеальныйАвтор,
		|	Замечания.ЭтоОтличиеОтШаблона КАК ЭтоОтличиеОтШаблона,
		|	Замечания.ЗамечаниеИнициатора КАК ЗамечаниеИнициатора,
		|	Замечания.ИмяПоля КАК ИмяПоля,
		|	Замечания.ИдентификаторЭтапа КАК ИдентификаторЭтапа,
		|	Замечания.Номер КАК Номер,
		|	Замечания.Цикл КАК Цикл,
		|	Замечания.ИдентификаторАвтора КАК ИдентификаторАвтора,
		|	Замечания.ПринятаяРедакция,
		|	Замечания.НомерБлока КАК НомерБлока
		|ИЗ
		|	Справочник.Замечания КАК Замечания
		|ГДЕ
		|	Замечания.ВладелецЗамечания В(&ВладелецЗамечанияМассив)
		|	И Замечания.ВеткаОбработки = &ВеткаОбработки
		|	И Замечания.ПометкаУдаления = ЛОЖЬ";
	
	ВладелецЗамечанияМассив = Новый Массив;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Строка.Ссылка) Тогда
		
		ВладелецЗамечанияМассив.Добавить(Строка.Ссылка);
		
	ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		Если ЗначениеЗаполнено(Строка.ФайлHTML) Тогда
			
			ВладелецЗамечанияМассив = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьВсеСлужебныеФайлы(
				Строка.ВладелецФайла, Строка.Ссылка, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);
			
		Иначе	
			ВладелецЗамечанияМассив.Добавить(Строка.Ссылка);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ВладелецЗамечанияМассив", ВладелецЗамечанияМассив);
	Запрос.УстановитьПараметр("ВеткаОбработки", ВеткаОбработки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗагрузитьПравку = Истина;
		
		Если Выборка.НомерЭтапа <> НомерИтерации Тогда // если =   то всегда загрузим
			
			Если ПоказыватьПравкиДругихЭтапов Тогда
				// все ок, загрузим - все этапы
			ИначеЕсли ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа Тогда
				Если Выборка.НомерЭтапа <> НомерИтерации - 1 Тогда
					ЗагрузитьПравку = Ложь;
				КонецЕсли;	
			Иначе	
				ЗагрузитьПравку = Ложь; // выключено и ПоказыватьПравкиДругихЭтапов и ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Выборка.ЭтоОтличиеОтШаблона Тогда
			ЗагрузитьПравку = ПоказыватьОтличияОтШаблона;
		КонецЕсли;	
		
		Если (Выборка.ЗамечаниеИнициатора Или Выборка.ЭтоЗамечаниеWord) 
			И Не ПоказыватьВнесенноеИнициатором Тогда
			ЗагрузитьПравку = Ложь;
		КонецЕсли;	
		
		Если ЗагрузитьПравку Тогда
			
			НовСтрока = Строка.Правки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
			
			НовСтрока.УникальныйИдентификатор = Выборка.Ссылка.УникальныйИдентификатор();
			
			НовСтрока.СделанаТекущимПользователем = (НовСтрока.Автор = ТекПользователь);
			НовСтрока.ЗамечаниеДругогоЭтапа = (НовСтрока.НомерЭтапа <> НомерИтерации);
			
			НовСтрока.АвторПредставление = НовСтрока.Автор;
			
			Если НовСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.НеПринята") Тогда
				НовСтрока.НомерКартинкиСтатуса = 2;
			ИначеЕсли НовСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята") Тогда
				НовСтрока.НомерКартинкиСтатуса = 1;
			ИначеЕсли НовСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.ПринятаЧастично") Тогда
				НовСтрока.НомерКартинкиСтатуса = 3;
			Иначе
				НовСтрока.НомерКартинкиСтатуса = 0;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ПравкиТаблица = ДанныеФормыВЗначение(Строка.Правки, Тип("ТаблицаЗначений"));
	СогласованиеВРежимеЗамечанийHTMLСервер.СортироватьПравки(ПравкиТаблица, Строка.ТекстHTML);
	ЗначениеВДанныеФормы(ПравкиТаблица, Строка.Правки);
	
	// заполняем массив пересечений
	Строка.ПересекающиесяПравки.Очистить();
	
	Для Каждого Правка Из Строка.Правки Цикл
		
		ЕстьПересечения = Ложь;
		СписокИдПравок = Новый СписокЗначений;
		
		Если Правка.ПозицияВHtml = 0 Или Правка.ПозицияВHtmlКонец = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Для Каждого ДругаяПравка Из Строка.Правки Цикл
			
			// Пересечение: a.start <= b.end AND a.end >= b.start
			
			Если ДругаяПравка.ПозицияВHtml = 0 Или ДругаяПравка.ПозицияВHtmlКонец = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			Если Правка.УникальныйИдентификатор = ДругаяПравка.УникальныйИдентификатор Тогда
				// это та же самая правка, не проверяем
				Продолжить;
			КонецЕсли;	
			
			Если Правка.ПозицияВHtml <= ДругаяПравка.ПозицияВHtmlКонец И Правка.ПозицияВHtmlКонец >= ДругаяПравка.ПозицияВHtml Тогда
				// есть пересечение
				
				ЕстьПересечения = Истина;
				СписокИдПравок.Добавить(ДругаяПравка.УникальныйИдентификатор);
				
			КонецЕсли;		
			
		КонецЦикла;	
		
		Если ЕстьПересечения Тогда
			
			НовСтрока = Строка.ПересекающиесяПравки.Добавить();
			НовСтрока.ИдПравки = Правка.УникальныйИдентификатор;
			НовСтрока.МассивИдДругихПравок = СписокИдПравок;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Отказать(Команда)
	
	Если Элементы.Правки.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Правки.ВыделенныеСтроки Цикл
		ОбрабатываемаяСтрока = Правки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ОбрабатываемаяСтрока.НомерЭтапа <> НомерИтерации Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Это замечание другого этапа'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;

	Если Элементы.Правки.ВыделенныеСтроки.Количество() = 1 Тогда
		
		ВыделеннаяСтрока = Элементы.Правки.ВыделенныеСтроки[0];
		
		ОбрабатываемаяСтрока = Правки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ОбрабатываемаяСтрока <> Неопределено Тогда
			Если ОбрабатываемаяСтрока.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Комментарий") Тогда
				// для типа Комментарий не показываем диалог
				ЗавершениеОтказать("_", Неопределено);
				Возврат;
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОтказать", ЭтотОбъект);
	
	ПараметрыОткрытияФормы = Новый Структура("Описание, ОбластьПрименения", 
		НСтр("ru='Обоснование отказа'"),
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.СогласованиеВРежимеЗамечанийИнициатор")
		);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВводаТекстаМногострочного",
		ПараметрыОткрытияФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтказать(НовыйТекст, Параметры) Экспорт
	
	Если ТипЗнч(НовыйТекст) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НовыйТекст) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите причину отказа'"));
		Возврат;
	КонецЕсли;
		
	ДобавитьВUndo();
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Правки.ВыделенныеСтроки Цикл
		ОбрабатываемаяСтрока = Правки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ОбрабатываемаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОбрабатываемаяСтрока.Отработано = Истина Тогда
			ОбрабатываемаяСтрока.Автоматическая = Ложь;
		КонецЕсли;
		
		Если ОбрабатываемаяСтрока.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание") Тогда
			ОбрабатываемаяСтрока.Комментарий = НовыйТекст;
		КонецЕсли;		
		
		ОбрабатываемаяСтрока.Отработано = Истина;
		ОбрабатываемаяСтрока.НомерКартинкиСтатуса = 2;
		ОбрабатываемаяСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.НеПринята");
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВсе(Команда)
	
	ДобавитьВUndo();
	
	Для Каждого ОбрабатываемаяСтрока Из Правки Цикл
		
		Если ОбрабатываемаяСтрока.Отработано = Ложь И ОбрабатываемаяСтрока.НомерЭтапа = НомерИтерации Тогда
		
			ОбрабатываемаяСтрока.Отработано = Истина;
			ОбрабатываемаяСтрока.НомерКартинкиСтатуса = 1;
			ОбрабатываемаяСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята");
		
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура Принять(Команда)
	
	Если Элементы.Правки.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Правки.ВыделенныеСтроки Цикл
		ОбрабатываемаяСтрока = Правки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ОбрабатываемаяСтрока <> Неопределено 
			И ОбрабатываемаяСтрока.НомерЭтапа <> НомерИтерации Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Это замечание другого этапа'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВUndo();
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Правки.ВыделенныеСтроки Цикл
		ОбрабатываемаяСтрока = Правки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ОбрабатываемаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОбрабатываемаяСтрока.Отработано = Истина Тогда
			ОбрабатываемаяСтрока.Автоматическая = Ложь;
		КонецЕсли;
		ОбрабатываемаяСтрока.Отработано = Истина;
		ОбрабатываемаяСтрока.НомерКартинкиСтатуса = 1;
		ОбрабатываемаяСтрока.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята");
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСтатусОтработан(Команда)
	
	Если Элементы.Правки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Правки.ТекущиеДанные.НомерЭтапа <> НомерИтерации Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Это замечание другого этапа'"));
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Правки.ТекущиеДанные.Отработано = Ложь Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Это замечание еще не отработано, отменить статус Отработано можно только для уже отработанных замечаний'"));
		Возврат;
	КонецЕсли;	
	
	ДобавитьВUndo();
	
	Элементы.Правки.ТекущиеДанные.Автоматическая = Ложь; // если ранее было отработано, теперь не отработано - снимаем Автоматическая
	Элементы.Правки.ТекущиеДанные.Отработано = Ложь;
	Элементы.Правки.ТекущиеДанные.НомерКартинкиСтатуса = 0;
	Элементы.Правки.ТекущиеДанные.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.ПустаяСсылка");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИПринять(Команда)
	
	Если Элементы.Правки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПеренестиИПринятьСтрока(Элементы.Правки.ТекущиеДанные);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПеренестиИПринятьСтрока(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерЭтапа <> НомерИтерации Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Это замечание другого этапа'"));
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ЕстьПересечения = Истина Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Это замечание указывает на тот же фрагмент текста, что и ранее принятые замечания. Перенесите текст вручную.'"));
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Автоматическая = Ложь Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Это замечание нельзя перенести автоматически'"));
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Отработано = Истина Тогда
		// Если другой статус - скажем ПринятаЧастично Или НеПринята - то можно поменять на Принята
		Если ТекущиеДанные.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята") Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Это замечание уже отработано'"));
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЕстьПопаданиеВУдаленное(ТекущиеДанные) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя автоматически перенести замечание внутрь удаленного фрагмента.
		|Вам нужно вручную внести исправление (вне удаленного фрагмента (красного)).'") );
		Возврат;
	КонецЕсли;	
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИдПравки", ТекущиеДанные.УникальныйИдентификатор);
	СтрокиПересечения = ПересекающиесяПравки.НайтиСтроки(Отбор);
	Если СтрокиПересечения.Количество() <> 0 Тогда
		
		ДопПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
		Оповещение = Новый ОписаниеОповещения("ПеренестиИПринятьСтрока_Продолжение", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = НСтр("ru = 'К выбранному участку текста привязаны и другие замечания. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,
			КодВозвратаДиалога.Отмена);
		
		Возврат;
		
	КонецЕсли;	
	
	ДопПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	ПеренестиИПринятьСтрока_Продолжение(КодВозвратаДиалога.Да, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИПринятьСтрока_Продолжение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено Или РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	ДобавитьВUndo();
	
	ТекИд = ТекущиеДанные.ПолучитьИдентификатор();
	
	СледующийИд = Неопределено;
	ВстретилиИд = Ложь;
	Для Каждого Строка Из Правки Цикл
		
		Если ВстретилиИд Тогда
			СледующийИд = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
		
		Если Строка.ПолучитьИдентификатор() = ТекИд Тогда
			ВстретилиИд = Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если СледующийИд <> Неопределено Тогда
		Элементы.Правки.ТекущаяСтрока = СледующийИд;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПопаданиеВУдаленное(ТекущиеДанные)
	
	// <del
	ТекстHTMLВПоле = ПолучитьТекстПисьмаВПоле();	
	ТекстПисьмаДляПравкиНРег = НРег(ТекстHTMLВПоле);
	
	ИДСтрока = Формат(ТекущиеДанные.ИдНачала, "ЧГ=0");
	СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
	ТекДанныеПозицияВHtml = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска);
	Если ТекДанныеПозицияВHtml = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ИДСтрока = Формат(ТекущиеДанные.ИдКонца, "ЧГ=0");
	СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
	ТекДанныеПозицияВHtmlКонец = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска);
	Если ТекДанныеПозицияВHtmlКонец = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	//ЕстьПересечения
	
	Если СтрДлина(ТекстПисьмаДляПравкиНРег) < 10 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	НачальнаяПозиция = 1;
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаПоиска = "<del";
		ПозицияMsoIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска,,НачальнаяПозиция);
		Если ПозицияMsoIns = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаКонцаIns = "</del>";
		ПозицияКонцаВторогоТегаIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаКонцаIns,, ПозицияMsoIns);
		Если ПозицияКонцаВторогоТегаIns = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияВHtml = ПозицияMsoIns;
		ПозицияВHtmlКонец = ПозицияКонцаВторогоТегаIns;
		
		Если ТекДанныеПозицияВHtml <= ПозицияВHtmlКонец 
			И ТекДанныеПозицияВHtmlКонец >= ПозицияВHtml Тогда
			// есть пересечение
			
			Возврат Истина;
			
		КонецЕсли;
		
		НачальнаяПозиция = ПозицияКонцаВторогоТегаIns;
		Если НачальнаяПозиция >= СтрДлина(ТекстПисьмаДляПравкиНРег) Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура ПеренестиИПринятьВПротоколе(Команда)
	
	ТекущиеДанные = Элементы.ПротоколРазногласий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПравки) Тогда
		
		// по Ид правки найдем в таблице Правки
		Отбор = Новый Структура();
		Отбор.Вставить("УникальныйИдентификатор", ТекущиеДанные.ИдентификаторПравки);
		СтрокиПересечения = Правки.НайтиСтроки(Отбор);
		
		Если СтрокиПересечения.Количество() = 1 Тогда
			
			СтрокаПравка = СтрокиПересечения[0];
			ПеренестиИПринятьСтрока(СтрокаПравка);
			
		КонецЕсли;	
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВUndo()
	
	ТекстHTMLДляUndo = "";
	
	ДобавитьВUndoСервер(ТекстHTMLДляUndo);
	
	Элементы.ПравкиОтменить.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВUndoСервер(ТекстHTMLДляUndo)
	
	Строка = ТаблицаUNDO.Добавить();
	Строка.ТекстHTML = ТекстHTMLДляUndo;
	
	ПравкиТаблица = РеквизитФормыВЗначение("Правки");
	ЗначениеВДанныеФормы(ПравкиТаблица, Строка.Правки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПравкиПредыдущихЭтапов(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьВыполнить();
		Модифицированность = Ложь;
	КонецЕсли;	
	
	ПоказыватьПравкиДругихЭтапов = Истина;
	ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Ложь;
	НеПоказыватьПравкиДругихЭтапов = Не ПоказыватьПравкиДругихЭтапов;
	
	ПеречитатьПравки();
	ПоказатьГалочкиКоманд();        
	
	Элементы.ПереключениеСтраниц.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПравкиТолькоОдногоПрошлогоЭтапа(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьВыполнить();
		Модифицированность = Ложь;
	КонецЕсли;	
	
	ПоказыватьПравкиДругихЭтапов = Ложь;
	ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Истина;
	НеПоказыватьПравкиДругихЭтапов = Не ПоказыватьПравкиДругихЭтапов;
	
	ПеречитатьПравки();
	ПоказатьГалочкиКоманд();         
	
	Элементы.ПереключениеСтраниц.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоТекущиеПравки(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьВыполнить();
		Модифицированность = Ложь;
	КонецЕсли;	
	
	ПоказыватьПравкиДругихЭтапов = Ложь;
	ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Ложь;
	НеПоказыватьПравкиДругихЭтапов = Не ПоказыватьПравкиДругихЭтапов;
	
	ПеречитатьПравки();
	ПоказатьГалочкиКоманд();
	
	Элементы.ПереключениеСтраниц.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Команда)
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Ссылка = Элементы.Файлы.ТекущиеДанные.Ссылка;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено);
			
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Ссылка = Элементы.Файлы.ТекущиеДанные.Ссылка;
	
	ЗаписатьПротоколированиеРаботыПользователей(Документ, "Редактировать");
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		ПринудительноДобавитьИндикациюОПерезаполнении = Истина;
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено,,
			ПринудительноДобавитьИндикациюОПерезаполнении,,
			Истина); // ЗаемФайла
			
		ДанныеФайла.Вставить("ОтредактироватьВWord_ФормаИнициатора", Истина);		
			
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ДанныеФайла);
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать_ИндикацияОПерезаполненииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		Состояние(НСтр("ru = 'Выполняется автоматическое заполнение файлов. Пожалуйста, подождите...'"));
		#Если НЕ ВебКлиент Тогда
			ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
				Истина,
				Параметры.Файл, 
				Истина, 
				ЭтаФорма.УникальныйИдентификатор);
		#Иначе
			ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
				Ложь,
				Параметры.Файл, 
				Истина, 
				ЭтаФорма.УникальныйИдентификатор);
		#КонецЕсли
		
		Параметры.ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Параметры.Файл, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Параметры.ДанныеФайла.Вставить("ОтредактироватьВWord_ФормаИнициатора", Истина);		
		
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект);
	РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, Параметры.ДанныеФайла);
	
КонецПроцедуры

// ЗадачаОзнакомился

&НаКлиенте
Процедура ЗадачаОзнакомился(Команда)
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьВыполнить();
	
	ТекстЗамечаний = "";                                   
	ПерваяСтрокаСЗамечаниями = Неопределено;
	КоличествоЗамечаний = КоличествоНеотработанныхЗамечаний(ТекстЗамечаний, ПерваяСтрокаСЗамечаниями);
	Если КоличествоЗамечаний <> 0 Тогда
		
		ЗаголовокПредупреждения = СтрШаблон(НСтр("ru = 'По документу есть неотработанные замечания (%1 шт).
			|%2
			|
			|Отработайте все замечания и повторите исполнение задачи.'"), 
			КоличествоЗамечаний, ТекстЗамечаний);
		
		ПоказатьПредупреждение(, ЗаголовокПредупреждения);
		Возврат;
	КонецЕсли;	
	
	Если КоличествоЗамечанийОтказатьБезПринятаяРедакция() <> 0 Тогда
		
		ЗаголовокПредупреждения = НСтр("ru = 'У части замечаний по документу со статусом ""Отказать"" 
			|не заполнено поле ""Принятая редакция"".
			|Заполните и повторите исполнение задачи.'");
		
		ПоказатьПредупреждение(, ЗаголовокПредупреждения);
		Возврат;
	КонецЕсли;	
	
	ПовторитьСогласование = Ложь;
	ВыполнитьЗадачаОзнакомился = Истина;
	
	Если ВернутьсяВРежимЗамечаний_ВсеФайлы() Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаОзнакомилсяВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОзнакомилсяВыполнить()

	УчастникСтруктура = Новый Структура("Участник, ФункцияУчастника, ИдентификаторУчастника",
		Участник, 
		ПредопределенноеЗначение("Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат"),
		ИдентификаторУчастника);
		
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ПовторитьСогласование",
		ПовторитьСогласование);
		
	ДействияКлиент.ВыполнитьДействиеИзФормыСогласованияВРежимеЗамечаний(
		Действие, 
		УчастникСтруктура, 
		ПараметрыВыполнения, 
		Документ,
		ЭтотОбъект);
		
	ОтработатьВместоРобота();	
	
КонецПроцедуры

// ЗадачаОбработано

&НаКлиенте
Процедура ЗадачаОбработано(Команда)
	
	ПовторитьСогласование = Истина;
	
	Если ВернутьсяВРежимЗамечаний_ВсеФайлы() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВернутьсяВРежимЗамечанийПриВыполненииЗадачи() Тогда
		ПовторитьОбработаноПослеВозвратаВРежимЗамечаний = Истина;
		Возврат;
	КонецЕсли;
	
	ЗадачаОбработано_И_ПроверитьИИсправить_ВерсияHtmlФайлаНеОбновлена();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОбработано_И_ПроверитьИИсправить_ВерсияHtmlФайлаНеОбновлена()
	
	Если ПроверитьИИсправить_ВерсияHtmlФайлаНеОбновлена_ВсеФайлы() Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаОбработаноВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОбработаноВыполнить()
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьВыполнить();
	
	ТекстЗамечаний = "";                                   
	ПерваяСтрокаСЗамечаниями = Неопределено;
	КоличествоЗамечаний = КоличествоНеотработанныхЗамечаний(ТекстЗамечаний, ПерваяСтрокаСЗамечаниями);
	Если КоличествоЗамечаний <> 0 Тогда  
		
		Если Элементы.Файлы.ТекущаяСтрока <> ПерваяСтрокаСЗамечаниями Тогда
			Элементы.Файлы.ТекущаяСтрока = ПерваяСтрокаСЗамечаниями;
		КонецЕсли;	
		
		ЗаголовокПредупреждения = СтрШаблон(НСтр("ru = 'По документу есть неотработанные замечания (%1 шт).
			|%2
			|
			|Отработайте все замечания и повторите исполнение задачи.'"), 
			КоличествоЗамечаний, ТекстЗамечаний);
		
		ПоказатьПредупреждение(, ЗаголовокПредупреждения);
		Возврат;
	КонецЕсли;	
	
	УчастникСтруктура = Новый Структура("Участник, ФункцияУчастника, ИдентификаторУчастника",
		Участник, 
		ПредопределенноеЗначение("Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат"),
		ИдентификаторУчастника);
		
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ПовторитьСогласование",
		ПовторитьСогласование);
		
	ДействияКлиент.ВыполнитьДействиеИзФормыСогласованияВРежимеЗамечаний(
		Действие, 
		УчастникСтруктура, 
		ПараметрыВыполнения, 
		Документ,
		ЭтотОбъект);
		
КонецПроцедуры

// ЗадачаЗакончитьСогласование

&НаКлиенте
Процедура ЗадачаЗакончитьСогласование(Команда)
	
	ПовторениеСогласованияПослеОбработкиЗамечаний = Ложь;
	
	Если ВернутьсяВРежимЗамечанийПриВыполненииЗадачи() Тогда
		ПовторитьЗакончитьСогласованиеПослеВозвратаВРежимЗамечаний = Истина;
		Возврат;
	КонецЕсли;
	
	ЗадачаЗакончитьСогласованиеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗакончитьСогласованиеВыполнить()
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьВыполнить();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиЗакончитьСогласованиеПослеВыбораФактическогоИсполнителя", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьИсполнителяЗадачи(
		ЭтаФорма,
		ЗадачиМнеТекущийИсполнитель,
		ТекущийПользователь,
		ФактическийИсполнительЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиЗакончитьСогласованиеПослеВыбораФактическогоИсполнителя(
	ВыбранныйФактическийИсполнитель, ДопПараметры) Экспорт
	
	Если ВыбранныйФактическийИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйФактическийИсполнитель <> ЗадачиМнеТекущийИсполнитель Тогда
		ФактическийИсполнительЗадачи = ВыбранныйФактическийИсполнитель;
	КонецЕсли;
	
	ЗавершитьРаботуСФайламиПриВыполненииЗадачи();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(Задача) Тогда
		ПозиционироватьНаФайлСНеотработаннымиПравками();
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура();
	ПараметрыВыполнения.Вставить("РезультатОзнакомления", РезультатОзнакомления);
	ВыполнитьЗадачу(ПараметрыВыполнения);
	
	ОповеститьОбИзменении(Задача);
	ОповеститьЗадачаСогласованияВыполнена();
	ОповеститьПослеВыполненияЗадачи();
	
	Закрыть();
	
КонецПроцедуры

// ПродолжитьСогласование

&НаКлиенте
Процедура ПродолжитьСогласование(Команда)
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьВыполнить();
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСогласованиеПослеИзмененияДействия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОзнакомления = Результат.РезультатОзнакомления;
	РезультатВыполнения = РезультатОзнакомления;
	
	ЗакрыватьПоручения = Истина;
	
	ЗавершитьРаботуСФайламиПриВыполненииЗадачи();
	
	Если РаботаСБизнесПроцессамиКлиент.ЗапретВыполнения(Задача) Тогда
		ПозиционироватьНаФайлСНеотработаннымиПравками();
		Возврат;
	КонецЕсли;
	
	//ПоместитьЗахваченныеФайлы();
	
	ПараметрыВыполнения = Новый Структура();
	ПараметрыВыполнения.Вставить("РезультатОзнакомления", РезультатОзнакомления);
	ПараметрыВыполнения.Вставить("ИдентификаторыПропускаемых", Результат.ИдентификаторыПропускаемых);
	ВыполнитьЗадачу(ПараметрыВыполнения);
	
	ОповеститьОбИзменении(Задача);
	ОповеститьЗадачаСогласованияВыполнена();
	ОповеститьПослеВыполненияЗадачи();
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачу(ПараметрыЗаписи = Неопределено)
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПослеВыполненияЗадачи()
	
	ЗадачиМнеТекущаяЗадача = Задача;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выполнение:'"),
		ПолучитьНавигационнуюСсылку(ЗадачиМнеТекущаяЗадача),
		Строка(ЗадачиМнеТекущаяЗадача),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("ЗадачаИзменена", ЗадачиМнеТекущаяЗадача, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ВернутьсяВРежимЗамечанийПриВыполненииЗадачи()
	
	БылСделанВозвратВРежимПравок = Ложь;
	
	Если Не ЭтоТиповойДокумент Тогда
		Если Элементы.Файлы.ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
			Если ТекущиеДанные.ЗанятМной Тогда
				
				Если Модифицированность Тогда
					ПредупреждениеВыдано = Истина;
					ЗаписатьВыполнить();
				КонецЕсли;
				
				ВернутьсяВРежимЗамечанийВыполнить();
				Возврат Истина;
				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьРаботуСФайламиПриВыполненииЗадачи()
	
	Если Не ЭтоТиповойДокумент Тогда
		ПоместитьЗахваченныеФайлы();
		ПодготовитьФайлыПараллельногоСогласованияКWord();
	Иначе // типовой
		
		ЭтоВторойЦиклИлиВыше = Истина;
		//Если Не ПоказыватьОтличияДляТиповыхНаВторомЦикле Тогда
		//	ЭтоВторойЦиклИлиВыше = Ложь;
		//КонецЕсли;	
		
		МассивЗахваченныхФайлов = Новый Массив;
		ПоместитьЗахваченныеФайлы_Типовой(МассивЗахваченныхФайлов);
		
		// еще из doc в html
		Если МассивЗахваченныхФайлов.Количество() <> 0 Тогда

			АвтозаполняемыеФайлы = Новый Массив;
			АвтозаполняемыеФайлыHTML = Новый Массив;
			
			Для Каждого ТекСсылка Из МассивЗахваченныхФайлов Цикл 
				
				ТекФайлHTML = Неопределено;

				Для Каждого Строка Из Файлы Цикл
					Если Строка.Ссылка = ТекСсылка.Ссылка И ЗначениеЗаполнено(Строка.ФайлHTML) Тогда
						ТекФайлHTML = Строка.ФайлHTML;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
				Если ТекФайлHTML <> Неопределено Тогда
					АвтозаполняемыеФайлы.Добавить(ТекСсылка.Ссылка);
					АвтозаполняемыеФайлыHTML.Добавить(ТекФайлHTML);
				КонецЕсли;
			
			КонецЦикла;

			// Для автозаполняемых: нужно наоборот - после автозаполнения - снова doc в html.
			МассивФайловПараллельногоСогласованияДляDocВHtml
				= СогласованиеВРежимеЗамечанийСервер.ПодготовитьМассивФайловПараллельногоСогласования_ПоМассиву(
					Документ,
					АвтозаполняемыеФайлы,
					ЭтаФорма.УникальныйИдентификатор,
					,
					ЭтоВторойЦиклИлиВыше);
				
			Если МассивФайловПараллельногоСогласованияДляDocВHtml.Количество() <> 0 Тогда
				
				Для Счетчик = 0 По МассивФайловПараллельногоСогласованияДляDocВHtml.Количество()-1 Цикл
					СтруктураФайла = МассивФайловПараллельногоСогласованияДляDocВHtml[Счетчик];
					ФайлHTMLТек = АвтозаполняемыеФайлыHTML[Счетчик];
					СтруктураФайла.Вставить("ФайлHTMLСсылка", ФайлHTMLТек);
				КонецЦикла;	
				
				ПараметрыВызова = СогласованиеВРежимеЗамечанийКлиент.ПараметрыИзWordВHtml();
				ПараметрыВызова.УникальныйИдентификатор = ЭтаФорма.УникальныйИдентификатор;
				ПараметрыВызова.СпособСогласованияВРежимеЗамечаний = СпособСогласованияВРежимеЗамечаний;
				ПараметрыВызова.СоздаватьФайлы = Ложь;
				ПараметрыВызова.ЭтоВторойЦиклИлиВыше = ЭтоВторойЦиклИлиВыше;
				
				СогласованиеВРежимеЗамечанийКлиент.ОбработатьМассивФайловИзWordВHtml(
					МассивФайловПараллельногоСогласованияДляDocВHtml,
					ПараметрыВызова);
					
				СогласованиеВРежимеЗамечанийСервер.ОбработатьHTMLФайлыМассив(
					Документ, АвтозаполняемыеФайлыHTML, БизнесПроцесс,
					ЭтоВторойЦиклИлиВыше, НомерИтерации + 1);	
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьЗадачаСогласованияВыполнена()
	
	ИнформацияОЗадаче = Новый Структура;
	ИнформацияОЗадаче.Вставить("Ссылка", Задача);
	ИнформацияОЗадаче.Вставить("БизнесПроцесс", БизнесПроцесс);
	Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	
КонецПроцедуры

//

&НаКлиенте
Процедура ПозиционироватьНаФайлСНеотработаннымиПравками()
	
	Для Каждого Строка Из Файлы Цикл
		
		Для Каждого Правка Из Строка.Правки Цикл
			
			Если Правка.Отработано = Ложь Тогда
				Элементы.Файлы.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				Возврат;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДляСтаройВерсииФайла(Команда)
	
	ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанныеФайлы = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанныеФайлы.ВерсияHTML) Тогда
		Возврат;
	КонецЕсли;	
	
	// открыть для просмотра только одной правки - в старой версии HTML файла
	ПараметрыОткрытияФормы = Новый Структура(
		"Документ, ВерсияHTML, УникальныйИдентификатор", 
		ТекущиеДанныеФайлы.ВладелецФайла, ТекущиеДанные.ВерсияHTML, ТекущиеДанные.УникальныйИдентификатор);
		
	ОткрытьФорму("ОбщаяФорма.СогласованиеВРежимеЗамечанийСтаройВерсииФайла", ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьВWord(Команда)
	
	ОтредактироватьВWordЗавершение(КодВозвратаДиалога.Да, Неопределено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПротоколированиеРаботыПользователей(Документ, Текст)
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ТекстПолный = "ПараллельноеСогласованиеФормаИнициатора " + Текст;
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Документ, ТекстПолный);
	КонецЕсли;
		
КонецПроцедуры		

&НаКлиенте
Процедура ОтредактироватьВWordЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено Или РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПредупреждениеВыдано = Истина;
	ЗаписатьВыполнить();
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьПротоколированиеРаботыПользователей(Документ, "ОтредактироватьВWord");
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	ПодготовитьФайлКWord(ТекущиеДанные);
	
	Ссылка = ТекущиеДанные.Ссылка;
	ТекущиеДанные.ЗанятМной = Истина;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		ПринудительноДобавитьИндикациюОПерезаполнении = Истина;
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено,,
			ПринудительноДобавитьИндикациюОПерезаполнении,,
			Истина); // ЗаемФайла
			
		ДанныеФайла.Вставить("ОтредактироватьВWord_ФормаИнициатора", Истина);	
			
		Обработчик = Новый ОписаниеОповещения("ОтредактироватьВWordПослеРедактированияФайла", ЭтотОбъект);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ДанныеФайла);
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьВWord_ИндикацияОПерезаполненииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		Состояние(НСтр("ru = 'Выполняется автоматическое заполнение файлов. Пожалуйста, подождите...'"));
		#Если НЕ ВебКлиент Тогда
			ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
				Истина,
				Параметры.Файл, 
				Истина, 
				ЭтаФорма.УникальныйИдентификатор);
		#Иначе
			ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
				Ложь,
				Параметры.Файл, 
				Истина, 
				ЭтаФорма.УникальныйИдентификатор);
		#КонецЕсли
		
		Параметры.ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Параметры.Файл, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Параметры.ДанныеФайла.Вставить("ОтредактироватьВWord_ФормаИнициатора", Истина);	
		
	Обработчик = Новый ОписаниеОповещения("ОтредактироватьВWordПослеРедактированияФайла", ЭтотОбъект);
	РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, Параметры.ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьВWordПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	Элементы.ГруппаСтраницыHTML.ТекущаяСтраница = Элементы.СтраницаHTML; //  по новому - оставляем страницу с HTML
	
	Элементы.ОтредактироватьВWord.Видимость = Ложь;
	Элементы.ВернутьсяВРежимЗамечаний.Видимость = Истина;
	Элементы.Редактировать.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяВРежимЗамечаний(Команда)
	
	ПовторениеСогласованияПослеОбработкиЗамечаний = Ложь;
	
	ВернутьсяВРежимЗамечанийВыполнить();
	
КонецПроцедуры

// отработка команды ВернутьсяВРежимЗамечаний
&НаКлиенте
Процедура ВернутьсяВРежимЗамечанийВыполнить()

	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	БылСделанВозвратВРежимПравок = Истина;
	
	Ссылка = ТекущиеДанные.Ссылка;
	Расширение = ТекущиеДанные.Расширение;
	
	Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.Файлы") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Расширение) Тогда
		Возврат;	
	КонецЕсли;	
	
	ЗаписатьПротоколированиеРаботыПользователей(Документ, "ВернутьсяВРежимЗамечанийВыполнить");
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
		Ссылка, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор);
		
		
	ПутьКИсходномуФайлу = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
	Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПутьКИсходномуФайлу) Тогда
		
		ТекстПредупреждения = "";
		
		Если СпособСогласованияВРежимеЗамечаний 
		= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") Тогда
			ТекстПредупреждения = НСтр("ru = 'Закройте Microsoft Word, и повторите операцию.'");
		ИначеЕсли СпособСогласованияВРежимеЗамечаний 
		= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter") Тогда
			ТекстПредупреждения = НСтр("ru = 'Закройте OpenOffice Writer, и повторите операцию.'");
		КонецЕсли;	
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	// закончить редактирование
	Обработчик = Новый ОписаниеОповещения(
		"ВернутьсяВРежимЗамечанийПослеЗакончитьРедактирование", 
		ЭтотОбъект,
		Новый Структура("ТекущаяВерсияДоЗакончитьРедактирование", ДанныеФайла.ТекущаяВерсия));
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ДанныеФайла.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ДанныеФайла.Редактирует;
	ПараметрыОбновленияФайла.СоздатьНовуюВерсию = Истина;
	ПараметрыОбновленияФайла.КомментарийКВерсии = "";
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьИИсправить_ВерсияHtmlФайлаНеОбновлена_ВсеФайлы()
	
	// todo
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура После_ОбновитьHtmlВыполнить(Результат, ПараметрыВыполнения) Экспорт
	
	ПеречитатьПравки();
	
	ЗадачаОбработаноВыполнить();
	
КонецПроцедуры	

&НаКлиенте
Функция ВернутьсяВРежимЗамечаний_ВсеФайлы()
	
	ЗаписатьПротоколированиеРаботыПользователей(Документ, "ВернутьсяВРежимЗамечаний_ВсеФайлы");

	МассивФайлов = Новый Массив;
	Для Каждого Стр Из Файлы Цикл
		
		Если ТипЗнч(Стр.Ссылка) = Тип("СправочникСсылка.Файлы")
			И Стр.ЗанятМной 
			И СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Стр.Расширение) Тогда
			
			СтруктФайла = Новый Структура("Наименование, Ссылка, ИндексКартинки, Расширение, ВерсияHTML, ФайлHTML, ВладелецФайла, ЗанятМной, ИмяБезРасширения, ШаблонОснованиеДляСоздания, ФайлHTMLРазмер");

			ЗаполнитьЗначенияСвойств(СтруктФайла, Стр);
			МассивФайлов.Добавить(СтруктФайла);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если МассивФайлов.Количество() <> 0 Тогда
		
		Обработчик = Новый ОписаниеОповещения(
			"ВернутьсяВРежимЗамечанийПосле_ВернутьсяВРежимЗамечанийВыполнить", 
			ЭтотОбъект);
			
		ПовторитьОбработаноПослеВозвратаВРежимЗамечаний = Истина;	
		СогласованиеВРежимеЗамечанийКлиент.ВернутьсяВРежимЗамечанийВыполнить(Обработчик, 
			МассивФайлов, УникальныйИдентификатор, СпособСогласованияВРежимеЗамечаний);
		Возврат Истина;
		
	КонецЕсли;
		
	ВыполнитьАвтозаполнениеФайлов();
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ВыполнитьАвтозаполнениеФайлов()
	
	// тут автозаполнение файлов.
	
	МассивФайлов = Новый Массив;
	Для Каждого Стр Из Файлы Цикл
		
		Если ТипЗнч(Стр.Ссылка) = Тип("СправочникСсылка.Файлы")
			И Стр.ЕстьПравилаАвтозаполнения 
			И СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Стр.Расширение) Тогда
			
			СтруктФайла = Новый Структура("Наименование, Ссылка, ИндексКартинки, Расширение, ВерсияHTML, ФайлHTML, ВладелецФайла, ЗанятМной, ИмяБезРасширения, ШаблонОснованиеДляСоздания, ФайлHTMLРазмер");

			ЗаполнитьЗначенияСвойств(СтруктФайла, Стр);
			МассивФайлов.Добавить(СтруктФайла);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если МассивФайлов.Количество() <> 0 Тогда
		
		СогласованиеВРежимеЗамечанийКлиент.АвтозаполнитьФайлы_ИОбновитьHtml(
			МассивФайлов, УникальныйИдентификатор, СпособСогласованияВРежимеЗамечаний, ЧислоСтраницДляПредпросмотраПорции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяВРежимЗамечанийПосле_ВернутьсяВРежимЗамечанийВыполнить(Результат, ПараметрыВыполнения) Экспорт
	
	ПеречитатьПравки();
	
	Для Каждого ТекФайл Из Файлы Цикл
		
		Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(ТекФайл.Расширение) Тогда	
			ТекФайл.ЗанятМной = Ложь;
		КонецЕсли;	
			
	КонецЦикла;	
	
	ВыполнитьАвтозаполнениеФайлов();
	
	Если Не ЭтоТиповойДокумент Тогда
		Элементы.ОтредактироватьВWord.Видимость = Истина;
	КонецЕсли;	

	Если ВыполнитьЗадачаОзнакомился Тогда
		ВыполнитьЗадачаОзнакомился = Ложь;
		ЗадачаОзнакомилсяВыполнить();
	ИначеЕсли ПовторитьОбработаноПослеВозвратаВРежимЗамечаний Тогда
		ПовторитьОбработаноПослеВозвратаВРежимЗамечаний = Ложь;
		ЗадачаОбработаноВыполнить();
	ИначеЕсли ПовторитьЗакончитьСогласованиеПослеВозвратаВРежимЗамечаний Тогда
		ПовторитьЗакончитьСогласованиеПослеВозвратаВРежимЗамечаний = Ложь;
		ЗадачаЗакончитьСогласованиеВыполнить();
	КонецЕсли;	
	
	БылСделанВозвратВРежимПравок = Ложь;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВернутьсяВРежимЗамечанийПослеЗакончитьРедактирование(Результат, ПараметрыВыполнения) Экспорт
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 

	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Ссылка = ТекущиеДанные.Ссылка;
	ТекущиеДанные.ЗанятМной = Ложь;
	
	Если 
		ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() И 
		ИспользоватьLibreOffice И 
		СпособСогласованияВРежимеЗамечаний = ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter")
		Тогда
		
		ВернутьсяВРежимЗамечанийСервер(Ссылка, Элементы.Файлы.ТекущаяСтрока);
		
		Если Не ПовторениеСогласованияПослеОбработкиЗамечаний Тогда
			ПеречитатьПравки();
		КонецЕсли;
		
		Если ПовторитьОбработаноПослеВозвратаВРежимЗамечаний Тогда
			ПовторитьОбработаноПослеВозвратаВРежимЗамечаний = Ложь;
			
			ЗадачаОбработано_И_ПроверитьИИсправить_ВерсияHtmlФайлаНеОбновлена();
			
		ИначеЕсли ПовторитьЗакончитьСогласованиеПослеВозвратаВРежимЗамечаний Тогда
			ПовторитьЗакончитьСогласованиеПослеВозвратаВРежимЗамечаний = Ложь;
			ЗадачаЗакончитьСогласованиеВыполнить();
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли;	
	
	ДанныеФайла1 = Неопределено;
	ДанныеФайла2 = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Ссылка, , УникальныйИдентификатор);
	
	ПолноеИмяФайла1 = "";
	ПолноеИмяФайла2 = "";
	
	// новый код - не делаем сравнение
	
	ПараметрыВыполнения = Новый Структура("ДанныеФайла, ПолноеИмяФайла", 
		ДанныеФайла2, ПолноеИмяФайла2);
	Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог_Новый", ЭтотОбъект, ПараметрыВыполнения);
	РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
		ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ПолноеИмяФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ВернутьсяВРежимЗамечанийСервер(ФайлСсылка, ФайлыТекущаяСтрока)

	СтруктураФайла = ПолучитьHTMLНаСервере(ФайлСсылка, ФайлыТекущаяСтрока);
	
	НомерБлока = 1;
	
	ПослеСохраненияHTML_Новый(СтруктураФайла, ФайлыТекущаяСтрока);
	
	Элементы.ГруппаСтраницыHTML.ТекущаяСтраница = Элементы.СтраницаHTML;
	Элементы.ОтредактироватьВWord.Видимость = Истина;
	Элементы.ВернутьсяВРежимЗамечаний.Видимость = Ложь;
	Элементы.Редактировать.Видимость = Ложь;
	
	БылСделанВозвратВРежимПравок = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьHTMLНаСервере(ФайлСсылка, ФайлыТекущаяСтрока)  
	
	ТекущиеДанные = Файлы.НайтиПоИдентификатору(ФайлыТекущаяСтрока);

	СтруктураФайла 
		= Новый Структура(
		"ФайлСсылка, ФайлHTMLСсылка, АдресаФайловHTML, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаHTML, РазмерHTMLФайла");
		
	СтруктураФайла.ФайлСсылка = ТекущиеДанные.Ссылка;
	СтруктураФайла.ФайлHTMLСсылка = ТекущиеДанные.ФайлHTML;
	СтруктураФайла.Владелец = ТекущиеДанные.ВладелецФайла;
	СтруктураФайла.Наименование = ТекущиеДанные.ИмяБезРасширения;
	СтруктураФайла.Расширение = ТекущиеДанные.Расширение;  
	СтруктураФайла.АдресаФайловHTML = Новый Массив;

	СтруктураФайла.Вставить("Картинки", Новый Массив);      
	
	ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлСсылка);
	ДвоичныеДанныеHtm = РаботаСФайламиВызовСервера.ДвоичныеДанныеHtmПреобразованныеВLibreOffice(ДвоичныеДанные, ТекущиеДанные.Расширение);
	
	СтруктураФайла.РазмерHTMLФайла = ДвоичныеДанныеHtm.Размер();
	СтруктураФайла.АдресВременногоХранилищаФайлаHTML = ПоместитьВоВременноеХранилище(ДвоичныеДанныеHtm, УникальныйИдентификатор);
		
	Возврат СтруктураФайла;
	
КонецФункции

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог_Новый(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.ФайлПолучен Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	ПутьКФайлу = Результат.ПолноеИмяФайла;
	
	ИмяДляПоказа = ТекущиеДанные.ИмяБезРасширения + "." + ТекущиеДанные.Расширение;
	ТекстПояснения =
		СтрШаблон(НСтр("ru = 'Выполняется создание HTML файла из файла %1.
		|Пожалуйста, подождите...'"), ИмяДляПоказа);
	Состояние(ТекстПояснения);
	
	СтруктураФайла = СогласованиеВРежимеЗамечанийКлиент.ОткрытьWordИПолучитьHTML(
		ПутьКФайлу,
		ТекущиеДанные.Ссылка,
		ТекущиеДанные.ФайлHTML,
		ТекущиеДанные.ВладелецФайла,
		ТекущиеДанные.ИмяБезРасширения,
		ТекущиеДанные.Расширение,
		ЭтаФорма.УникальныйИдентификатор,
		СпособСогласованияВРежимеЗамечаний,
		ЧислоСтраницДляПредпросмотраПорции);
	
	ТекстПояснения =
		НСтр("ru = 'Выполняется создание на сервере HTML файлов.
		|Пожалуйста, подождите...'");
	Состояние(ТекстПояснения);

	НомерБлока = 1;
	
	ПослеСохраненияHTML_Новый(СтруктураФайла, Элементы.Файлы.ТекущаяСтрока);
	
	Если Не ПовторениеСогласованияПослеОбработкиЗамечаний Тогда
		ПеречитатьПравки();
	КонецЕсли;
	
	Если ПовторитьОбработаноПослеВозвратаВРежимЗамечаний Тогда
		ПовторитьОбработаноПослеВозвратаВРежимЗамечаний = Ложь;
		
		ЗадачаОбработано_И_ПроверитьИИсправить_ВерсияHtmlФайлаНеОбновлена();
		
	ИначеЕсли ПовторитьЗакончитьСогласованиеПослеВозвратаВРежимЗамечаний Тогда
		ПовторитьЗакончитьСогласованиеПослеВозвратаВРежимЗамечаний = Ложь;
		ЗадачаЗакончитьСогласованиеВыполнить();
	КонецЕсли;	

	Элементы.ГруппаСтраницыHTML.ТекущаяСтраница = Элементы.СтраницаHTML;
	Элементы.ОтредактироватьВWord.Видимость = Истина;
	Элементы.ВернутьсяВРежимЗамечаний.Видимость = Ложь;
	Элементы.Редактировать.Видимость = Ложь;
	
	БылСделанВозвратВРежимПравок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеСохраненияHTML_Новый(СтруктураФайла, ТекущаяСтрока)
	
	ТекущиеДанные = Файлы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	// Тут вызов на сервер, создаем версию HTML Файла.
	СогласованиеВРежимеЗамечанийСервер.СоздатьВерсиюHTMLФайла(СтруктураФайла);
	
	ВерсияHTMLТекущая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущиеДанные.ФайлHTML, "ТекущаяВерсия");
	
	// Запишем правки
	УстановитьПривилегированныйРежим(Истина);
	
	СогласованиеВРежимеЗамечанийСервер.ОчиститьПозицииУПрежнихПравок(ТекущиеДанные.ФайлHTML, Документ);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог1(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		ПараметрыВыполнения.ПолноеИмяФайла1 = Результат.ПолноеИмяФайла;
		Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог2", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
			ПараметрыВыполнения.ДанныеФайла2, ПараметрыВыполнения.ПолноеИмяФайла2, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог2(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.ФайлПолучен Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	ПараметрыВыполнения.ПолноеИмяФайла2 = Результат.ПолноеИмяФайла;
	
	ПутьКФайлу1 = "";
	ПутьКФайлу2 = "";
	
	Если ПараметрыВыполнения.ДанныеФайла1.НомерВерсии < ПараметрыВыполнения.ДанныеФайла2.НомерВерсии Тогда
		ПутьКФайлу1 = ПараметрыВыполнения.ПолноеИмяФайла1;
		ПутьКФайлу2 = ПараметрыВыполнения.ПолноеИмяФайла2;
	Иначе
		ПутьКФайлу1 = ПараметрыВыполнения.ПолноеИмяФайла2;
		ПутьКФайлу2 = ПараметрыВыполнения.ПолноеИмяФайла1;
	КонецЕсли;
	
	СтруктураФайла = СогласованиеВРежимеЗамечанийКлиент.СравнитьWordИПолучитьHTML(
		ПутьКФайлу1,
		ПутьКФайлу2,
		ТекущиеДанные.Ссылка,
		ТекущиеДанные.ФайлHTML,
		ТекущиеДанные.ВладелецФайла,
		ТекущиеДанные.ИмяБезРасширения,
		ТекущиеДанные.Расширение,
		ЭтаФорма.УникальныйИдентификатор);
	
	ТекстПояснения =
		НСтр("ru = 'Выполняется создание на сервере HTML файлов.
		|Пожалуйста, подождите...'");
	Состояние(ТекстПояснения);
	
	ПослеСохраненияHTML(СтруктураФайла, Элементы.Файлы.ТекущаяСтрока);
	
	Если Не ПовторениеСогласованияПослеОбработкиЗамечаний Тогда
		ПеречитатьПравки();
	КонецЕсли;
	
	Элементы.ГруппаСтраницыHTML.ТекущаяСтраница = Элементы.СтраницаHTML;
	
	Если ПовторитьОбработаноПослеВозвратаВРежимЗамечаний Тогда
		ПовторитьОбработаноПослеВозвратаВРежимЗамечаний = Ложь;
		ЗадачаОбработаноВыполнить();
	ИначеЕсли ПовторитьЗакончитьСогласованиеПослеВозвратаВРежимЗамечаний Тогда
		ПовторитьЗакончитьСогласованиеПослеВозвратаВРежимЗамечаний = Ложь;
		ЗадачаЗакончитьСогласованиеВыполнить();
	КонецЕсли;	
	
	Если Не ЭтоТиповойДокумент Тогда
		Элементы.ОтредактироватьВWord.Видимость = Истина;
	КонецЕсли;	
	
	БылСделанВозвратВРежимПравок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеСохраненияHTML(СтруктураФайла, ТекущаяСтрока)
	
	ТекущиеДанные = Файлы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ПравкиТаблица = РеквизитФормыВЗначение("Правки");
	ПравкиТаблица.Очистить(); // нам нужна только таблица с нужными колонками
	
	// Тут вызов на сервер, создаем версию HTML Файла.
	СогласованиеВРежимеЗамечанийСервер.СоздатьВерсиюHTMLФайла(СтруктураФайла, ПравкиТаблица);
	
	ВерсияHTMLТекущая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущиеДанные.ФайлHTML, "ТекущаяВерсия");
	
	// Запишем правки
	УстановитьПривилегированныйРежим(Истина);
	
	СогласованиеВРежимеЗамечанийСервер.ОчиститьПозицииУПрежнихПравок(ТекущиеДанные.ФайлHTML, Документ);
	
	СогласованиеВРежимеЗамечанийСервер.ЗаписатьПравкиИзWord(ПравкиТаблица,
		ТекущиеДанные.ФайлHTML, Документ, БизнесПроцесс, ВерсияHTMLТекущая, НомерИтерации);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLДокументСформирован(Элемент)
	ТекущееЗамечаниеИД = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поз = СтрНайти(ДанныеСобытия.Href, "#");
	Если Поз <> 0 Тогда
		
		// выделим строку после #, и позиционируемся
		ИДСсылки = Сред(ДанныеСобытия.Href, Поз + 1);
		
		Если ИДСсылки <> "" Тогда
			
			HTMLДокумент = Элементы.ТекстHTML.Документ; 
			НайденныйУзелНачало = HTMLДокумент.getElementById(ИДСсылки);		
			Если НайденныйУзелНачало <> Неопределено Тогда
				НайденныйУзелНачало.scrollIntoView(true);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Найти(ДанныеСобытия.Href, "ShowLinks") Тогда
		
		ОбзорСпискаДокументовКлиент.ПоказатьСвязи(ДанныеСобытия.Href);
		
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийФайлСтрока = ТекущиеДанные.Ссылка;
			РедактируетТекущийПользователь = ТекущиеДанные.ЗанятМной;
			
			Если Не РедактируетТекущийПользователь 
				Или ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			КомандыРаботыСФайламиКлиент.Редактировать(ТекущийФайлСтрока);
			
		КонецЕсли;
		Возврат;

	ИначеЕсли Найти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		ТекущийФайлСтрока = Неопределено;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийФайлСтрока = ТекущиеДанные.Ссылка;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТекущийФайлСтрока) Тогда
			
			Если ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущийФайлСтрока, ЭтаФорма);
		КонецЕсли;
				
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "CreatePreview") Тогда  
		
		ТекущийФайлСтрока = Неопределено;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийФайлСтрока = ТекущиеДанные.Ссылка;
		КонецЕсли;      
		
		Если ЗначениеЗаполнено(ТекущийФайлСтрока) Тогда
	
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыHTMLПредставление.ИгнорироватьМаксРазмер = Истина;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайл, 
				ПараметрыHTMLПредставление,
				ДокументPDF);
			
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ТекстHTML);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда 
		Возврат;
	КонецЕсли;
	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ВоВесьЭкран(Команда)
	
	Элементы.ПраваяПанель.Видимость = Не Элементы.ПраваяПанель.Видимость;
	Элементы.ТекстHTMLКонтекстноеМенюВоВесьЭкран.Пометка = Не Элементы.ПраваяПанель.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Если ТаблицаUNDO.Количество() = 0 Тогда
		Элементы.ПравкиОтменить.Доступность = Ложь;
		Возврат;
	КонецЕсли;	
	
	ОтменитьСервер();
	Элементы.Правки.Обновить();
	
	ВыделитьПравкуВHTML();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСервер()
	
	ЧислоUndo = ТаблицаUNDO.Количество();
	Строка = ТаблицаUNDO[ЧислоUndo - 1];
	
	ПравкиТаблица = ДанныеФормыВЗначение(Строка.Правки, Тип("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ПравкиТаблица, "Правки");
	
	ТаблицаUNDO.Удалить(Строка);
	Элементы.ПравкиОтменить.Доступность = (ТаблицаUNDO.Количество() <> 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтличияОтПредыдущего(Команда)

	СогласованиеВРежимеЗамечанийКлиент.ПоказатьОтличияОтПредыдущего(Документ, СвязанныйДокумент, УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВнесенноеИнициатором(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьВыполнить();
		Модифицированность = Ложь;
	КонецЕсли;	
	
	ПоказыватьВнесенноеИнициатором = Не ПоказыватьВнесенноеИнициатором;
	Элементы.ПравкиПоказыватьВнесенноеИнициатором.Пометка = ПоказыватьВнесенноеИнициатором;
	
	ПеречитатьПравки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОЗадаче(Команда)
	
	КлючОткрытия = Новый Структура;
	КлючОткрытия.Вставить("Действие", Действие);
	КлючОткрытия.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
	
	ДополнительныеПараметрыОткрытия = Новый Структура;
	ДополнительныеПараметрыОткрытия.Вставить("ОтключитьСогласованиеВРежимеЗамечаний", Истина);
	
	РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(
		КлючОткрытия,
		ДополнительныеПараметрыОткрытия,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЛегенду(Команда)
	НеПоказыватьЛегенду = Истина;
	Элементы.ГруппаЛегенда.Видимость = Не НеПоказыватьЛегенду;
КонецПроцедуры

&НаКлиенте
Процедура Страница1(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница2(Команда)      
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница3(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница4(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте         
Процедура Страница5(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	      

&НаКлиенте
Процедура Страница6(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	  

&НаКлиенте
Процедура Страница7(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	 

&НаКлиенте
Процедура Страница8(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	   

&НаКлиенте
Процедура Страница9(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Назад(Команда)
	
	НомерБлока = НомерБлока - 1;
	ЧастьВыбор(НомерБлока);
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	НомерБлока = НомерБлока + 1;
	ЧастьВыбор(НомерБлока);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабПлюс(Команда)
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб + 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабМинус(Команда)                                 
	
	Если Элементы["ДокументPdfПоле"].Масштаб <= 10 Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб - 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотЛево(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация - 90;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотПраво(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация + 90;

КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыбор(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СтраницаВыборЗавершение", ЭтотОбъект);
	ОбзорФайловКлиент.ВыбратьСтраницуДинамическогоСписка(
		ЭтотОбъект,
		Команда,
		НомерБлока,
		ВсегоПорцийПредпросмотра,
		ОповещениеОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд_Правки

&НаКлиенте
Процедура ПравкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПравкиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПравкиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЗамечаниеИнициатора = Ложь Тогда
		
		// Удалять можно только правки инициатора
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура(
		"ЧтоМеняем, НаЧтоМеняем, ТипЗамечания, Автор, Комментарий, 
		|РеальныйАвтор, Замечание, ПринятаяРедакция,
		|ЭтоИнициатор", 
		ТекущиеДанные.ЧтоМеняем,
		ТекущиеДанные.НаЧтоМеняем, 
		ТекущиеДанные.ТипЗамечания,
		ТекущиеДанные.Автор,
		ТекущиеДанные.Комментарий,
		ТекущиеДанные.РеальныйАвтор,
		ТекущиеДанные.Замечание,
		ТекущиеДанные.ПринятаяРедакция,
		Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзменитьПравку", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаРедактированияПравки",
		ПараметрыОткрытия,,,,,ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзменитьПравку(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
		
		ТекущиеДанные.Комментарий = Результат.Комментарий;
		ТекущиеДанные.Замечание = Результат.Замечание;
		ТекущиеДанные.ПринятаяРедакция = Результат.ПринятаяРедакция;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравкиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки", 0.5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСписокПриАктивизацииСтроки()
	
	ВыделитьПравкуВHTML();
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьПоступившиеОбновления()
	
	Если Не Параметры.Свойство("ДействиеЗадачи") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееДействиеЗадачи = Параметры.ДействиеЗадачи;
	Если Не ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПоступившихОбновленийЗадачи = РаботаСЗадачами.ОписаниеПоступившихОбновленийЗадачи(ТекущееДействиеЗадачи);
	ЕстьПоступившиеОбновления = ЗначениеЗаполнено(ОписаниеПоступившихОбновленийЗадачи);
	
	Элементы.НадписьПоступившиеОбновления.Заголовок = ОписаниеПоступившихОбновленийЗадачи;
	Элементы.ГруппаПоступившиеОбновления.Видимость = ЕстьПоступившиеОбновления;
	
	Если ЕстьПоступившиеОбновления Тогда
		РаботаСЗадачами.ОзнакомитьсяСОбновлениямиЗадач(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущееДействиеЗадачи));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиУзлыНачалаИКонцаВыделения(НайденныйУзелНачало, НайденныйУзелКонец, ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	НайтиУзлыНачалаИКонцаВыделенияПоНомерам(ТекущиеДанные.ИдНачала, ТекущиеДанные.ИдКонца,
		НайденныйУзелНачало, НайденныйУзелКонец);	
		
КонецПроцедуры

&НаКлиенте
Процедура НайтиУзлыНачалаИКонцаВыделенияПоНомерам(ИдНачалаЧисло, ИдКонцаЧисло,
	НайденныйУзелНачало, НайденныйУзелКонец)
	
	ИдНачала = "do_" + СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьСтрокаИзIdЧисло(ИдНачалаЧисло);
	ИдКонца = "do_" + СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьСтрокаИзIdЧисло(ИдКонцаЧисло);
	
	HTMLДокумент = Элементы.ТекстHTML.Документ; 
	
	НайденныйУзелНачало = Неопределено;
	НайденныйУзелКонец = Неопределено;
	
	
	Попытка
		
		НайденныйУзелНачало = HTMLДокумент.getElementById(ИдНачала);
		УзелКонец = HTMLДокумент.getElementById(ИдКонца);
		
		// Ищем последнее выделенное
		НайденныйУзел = Неопределено;
		
		СогласованиеВРежимеЗамечанийHTMLКлиент.НайтиПервыйУзелПослеУзла(УзелКонец, НайденныйУзел);
		
		Если НайденныйУзел <> Неопределено Тогда
			НайденныйУзелКонец = НайденныйУзел;
		КонецЕсли;	
		
	Исключение
		// не бросаем исключение - иногда HTMLДокумент дает ошибку
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьПравкуВHTML()
	
	ТекущиеДанные = Элементы.Правки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВерсияHTML) Тогда
		Возврат;
	КонецЕсли;	   

	Если ТекущееЗамечаниеИД = ТекущиеДанные.УникальныйИдентификатор Тогда // то же замечание
		Возврат;
	КонецЕсли;	
	
	Элементы.ПравкиКонтекстноеМенюПоказатьДляСтаройВерсииФайла.Доступность
	 = (ТекущиеДанные.ПозицияВHtml = 0 И ЗначениеЗаполнено(ВерсияHTML));
	
	Если ТекущиеДанные.СсылкиУтеряны И Не ЗначениеЗаполнено(ТекущиеДанные.Номер) Тогда
		ТекущееЗамечаниеИД = ТекущиеДанные.УникальныйИдентификатор;
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанныеФайлы = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанныеФайлы <> Неопределено И ТекущиеДанные.НомерБлока <> ТекущиеДанныеФайлы.НомерБлока Тогда
		
		ЧастьВыбор(ТекущиеДанные.НомерБлока + 1);
		
		ПодключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки", 0.5, Истина); // тут уже спозиционируем в ПолеHtml
		
		Возврат;
	КонецЕсли;	

	ТекущееЗамечаниеИД = ТекущиеДанные.УникальныйИдентификатор;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номер) И ЗначениеЗаполнено(ВерсияHTML) Тогда // новый режим
		
		НайтиПоНомеруИПозиционироваться(ТекущиеДанные);
		Возврат;
		
	КонецЕсли;	
	
	НайденныйУзелНачало = Неопределено;
	НайденныйУзелКонец = Неопределено;
	НайтиУзлыНачалаИКонцаВыделения(НайденныйУзелНачало, НайденныйУзелКонец, ТекущиеДанные);	
	
	ВыделитьТекстПоУзлам(НайденныйУзелНачало, НайденныйУзелКонец);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоНомеруИПозиционироваться(ТекущиеДанные)
	
	Номер = ТекущиеДанные.Номер;
	
	ИдНачалаЧисло = -1;
	Нашли = СогласованиеВРежимеЗамечанийHTMLКлиент.НайтиВHTMLИдКомментария(Номер, ТекстHTML, ИдНачалаЧисло, 
		СпособСогласованияВРежимеЗамечаний, ТекущийФайлРасширение); 
	
	НайденныйУзелНачало = Неопределено;
	НайденныйУзелКонец = Неопределено;
	
	HTMLДокумент = Элементы.ТекстHTML.Документ; 
	
	ИдНачала = "do_" + СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьСтрокаИзIdЧисло(ИдНачалаЧисло);
	НайденныйУзелНачало = HTMLДокумент.getElementById(ИдНачала);
	
	ИдНачала2 = "do_" + СогласованиеВРежимеЗамечанийHTMLКлиент.ПолучитьСтрокаИзIdЧисло(ИдНачалаЧисло + 1);
	НайденныйУзелКонец = HTMLДокумент.getElementById(ИдНачала2);
	
	Если НайденныйУзелНачало = Неопределено Тогда
		НайденныйУзелНачало = НайденныйУзелКонец;
	КонецЕсли;	
	Если НайденныйУзелКонец = Неопределено Тогда
		НайденныйУзелКонец = НайденныйУзелНачало;
	КонецЕсли;	

	ВыделитьТекстПоУзлам(НайденныйУзелНачало, НайденныйУзелКонец);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьТекстПоУзлам(НайденныйУзелНачало, НайденныйУзелКонец)
	
	HTMLДокумент = Элементы.ТекстHTML.Документ; 
	
	Попытка
		
		Если НайденныйУзелНачало <> Неопределено Тогда
			
			Диапазон = HTMLДокумент.createRange();
			Диапазон.setStart(НайденныйУзелНачало, 0);
			Диапазон.setEnd(НайденныйУзелКонец, 0);
			
			Выделение = HTMLДокумент.getSelection();
			Выделение.removeAllRanges();
			Выделение.addRange(Диапазон);
			
			НайденныйУзелНачало.scrollIntoView(true);
			HTMLДокумент.documentElement.scrollLeft = 0;
			
		КонецЕсли;	
	
	Исключение
		// не бросаем исключение - иногда HTMLДокумент дает ошибку
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПодсветитьПравки(Строка)
	
	ПравкиТаблица = Новый ТаблицаЗначений;
	
	КЧ = Новый КвалификаторыЧисла(10, 0);
	ТипЧисло = Новый ОписаниеТипов("Число",,, КЧ);
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ПравкиТаблица.Колонки.Добавить("ИдНачала", ТипЧисло);
	ПравкиТаблица.Колонки.Добавить("ИдКонца", ТипЧисло);
	ПравкиТаблица.Колонки.Добавить("Отработано", ТипБулево);
	ПравкиТаблица.Колонки.Добавить("ЗамечаниеИнициатора", ТипБулево);
	ПравкиТаблица.Колонки.Добавить("ЭтоЗамечаниеWord", ТипБулево);
	ПравкиТаблица.Колонки.Добавить("ЭтоОтличиеОтШаблона", ТипБулево);
	ПравкиТаблица.Колонки.Добавить("НомерБлока", ТипЧисло);
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ
	   |	Замечания.ВладелецЗамечания КАК ВладелецЗамечания,
	   |	Замечания.Документ КАК Документ,
	   |	Замечания.Автоматическая КАК Автоматическая,
	   |	Замечания.Автор КАК Автор,
	   |	Замечания.ВерсияHTML КАК ВерсияHTML,
	   |	Замечания.Дата КАК Дата,
	   |	Замечания.ИдКонца КАК ИдКонца,
	   |	Замечания.ИдНачала КАК ИдНачала,
	   |	Замечания.Комментарий КАК Комментарий,
	   |	Замечания.НаЧтоМеняем КАК НаЧтоМеняем,
	   |	Замечания.НомерКартинки КАК НомерКартинки,
	   |	Замечания.НомерЭтапа КАК НомерЭтапа,
	   |	Замечания.Отработано КАК Отработано,
	   |	Замечания.ВеткаОбработки КАК ВеткаОбработки,
	   |	Замечания.СтатусПринятия КАК СтатусПринятия,
	   |	Замечания.ЗамечаниеИнициатора КАК ЗамечаниеИнициатора,
	   |	Замечания.ТипЗамечания КАК ТипЗамечания,
	   |	Замечания.ЧтоМеняем КАК ЧтоМеняем,
	   |	Замечания.ЭтоЗамечаниеWord КАК ЭтоЗамечаниеWord,
	   |	Замечания.ЭтоОтличиеОтШаблона КАК ЭтоОтличиеОтШаблона,
	   |	Замечания.ИмяПоля КАК ИмяПоля,
	   |	Замечания.Номер КАК Номер,
	   |	Замечания.ИдентификаторЭтапа КАК ИдентификаторЭтапа,
	   |	Замечания.Цикл КАК Цикл,
	   |	Замечания.ИдентификаторАвтора КАК ИдентификаторАвтора,
	   |	Замечания.НомерБлока КАК НомерБлока
	   |ИЗ
	   |	Справочник.Замечания КАК Замечания
	   |ГДЕ
	   |	Замечания.ВладелецЗамечания = &ВладелецЗамечания
	   |	И Замечания.ВеткаОбработки = &ВеткаОбработки
	   |	И Замечания.СсылкиУтеряны = ЛОЖЬ
	   |	И Замечания.ПометкаУдаления = ЛОЖЬ";
	   
	ФайлHTMLПараметр = Неопределено;
	   
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Строка.Ссылка) Тогда
		ФайлHTMLПараметр = Строка.Ссылка;
	ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		Если ЗначениеЗаполнено(Строка.ФайлHTML) Тогда
			ФайлHTMLПараметр = Строка.ФайлHTML;
		Иначе	
			ФайлHTMLПараметр = Строка.Ссылка;
		КонецЕсли; 
	КонецЕсли; 
	
	НомерВерсии = -1;
	Если ТипЗнч(ФайлHTMLПараметр) = Тип("СправочникСсылка.Файлы") Тогда
		ТекВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлHTMLПараметр, "ТекущаяВерсия");
		НомерВерсии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекВерсия, "НомерВерсии");
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВладелецЗамечания", ФайлHTMLПараметр);
	Запрос.УстановитьПараметр("ВеткаОбработки", ВеткаОбработки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗагрузитьПравку = Истина;
		
		Если Выборка.НомерЭтапа <> НомерИтерации Тогда // если =   то всегда загрузим
			
			Если ПоказыватьПравкиДругихЭтапов Тогда
				// все ок, загрузим - все этапы
			ИначеЕсли ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа Тогда
				Если Выборка.НомерЭтапа <> НомерИтерации - 1 Тогда
					ЗагрузитьПравку = Ложь;
				КонецЕсли;	
			Иначе	
				ЗагрузитьПравку = Ложь; // выключено и ПоказыватьПравкиДругихЭтапов и ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Не ПоказыватьОтличияОтШаблона И Выборка.ЭтоОтличиеОтШаблона Тогда
			ЗагрузитьПравку = Ложь;
		КонецЕсли;	
		
		Если ПоказыватьОтличияОтШаблона И Выборка.ЭтоОтличиеОтШаблона Тогда
			ЗагрузитьПравку = Истина;
		КонецЕсли;	
		
		// эти правки всегда подсветим
		Если Выборка.ЭтоЗамечаниеWord Тогда
			
			ЗагрузитьПравку = Истина;
			
		КонецЕсли;	
		
		Если ЗагрузитьПравку Тогда
		
			НовСтрока = ПравкиТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Строка.ТекстHTML = СогласованиеВРежимеЗамечанийHTMLСервер.ПодсветитьЦветомФонаПравки(
		ПравкиТаблица, Строка.ТекстHTMLПриОткрытии, НомерВерсии, НомерБлока - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьФайлыПараллельногоСогласованияКWord()
	
	АвтозаполняемыеФайлы = Новый Массив;
	АвтозаполняемыеФайлыHTML = Новый Массив;
	
	Для Каждого Строка Из Файлы Цикл
		
		// 2 - создан по шаблону и идентичен по шаблону и есть правила автозаполнения
		РежимТолькоРеквизиты = (Строка.ОтличаетсяОтШаблона = 2) И Строка.ЕстьПравилаАвтозаполнения;
		
		Если РежимТолькоРеквизиты Тогда
			
			АвтозаполняемыеФайлы.Добавить(Строка.Ссылка);
			АвтозаполняемыеФайлыHTML.Добавить(Строка.ФайлHTML);
			
			#Если НЕ ВебКлиент Тогда
				ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
					Истина,
					Строка.Ссылка, 
					Истина, 
					УникальныйИдентификатор,
					Строка.ВладелецФайла);
			#КонецЕсли
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Задача);
	
	// Для автозаполняемых: нужно наоборот - после автозаполнения - снова doc в html.
	МассивФайловПараллельногоСогласованияДляDocВHtml
		= СогласованиеВРежимеЗамечанийСервер.ПодготовитьМассивФайловПараллельногоСогласования_ПоМассиву(
			Документ,
			АвтозаполняемыеФайлы,
			ЭтаФорма.УникальныйИдентификатор);
		
	Если МассивФайловПараллельногоСогласованияДляDocВHtml.Количество() <> 0 Тогда
		
		Для Счетчик = 0 По МассивФайловПараллельногоСогласованияДляDocВHtml.Количество()-1 Цикл
			СтруктураФайла = МассивФайловПараллельногоСогласованияДляDocВHtml[Счетчик];
			ФайлHTMLТек = АвтозаполняемыеФайлыHTML[Счетчик];
			СтруктураФайла.Вставить("ФайлHTMLСсылка", ФайлHTMLТек);
		КонецЦикла;	
		
		ПараметрыВызова = СогласованиеВРежимеЗамечанийКлиент.ПараметрыИзWordВHtml();
		ПараметрыВызова.УникальныйИдентификатор = ЭтаФорма.УникальныйИдентификатор;
		ПараметрыВызова.СпособСогласованияВРежимеЗамечаний = СпособСогласованияВРежимеЗамечаний;
		ПараметрыВызова.СоздаватьФайлы = Ложь;
		
		СогласованиеВРежимеЗамечанийКлиент.ОбработатьМассивФайловИзWordВHtml(
			МассивФайловПараллельногоСогласованияДляDocВHtml,
			ПараметрыВызова);
			
		СогласованиеВРежимеЗамечанийСервер.ОбработатьHTMLФайлыМассив(Документ, АвтозаполняемыеФайлыHTML);	
		
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ПоместитьЗахваченныеФайлы()
	
	МассивДокументов = СогласованиеВРежимеЗамечанийСервер.ПолучитьВсеДокументы(Документ);
	
	Для Каждого ТекДокумент Из МассивДокументов Цикл
		МассивЗахваченныхФайлов = РаботаСФайламиВызовСервера.ПолучитьСписокЗанятыхФайлов(ТекДокумент);
		
		РаботаСФайламиКлиент.ПоместитьИзмененияФайлов(ТекДокумент, УникальныйИдентификатор, 
			МассивЗахваченныхФайлов);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоместитьЗахваченныеФайлы_Типовой(МассивЗахваченныхФайлов)
	
	МассивДокументов = СогласованиеВРежимеЗамечанийСервер.ПолучитьВсеДокументы(Документ);
	
	Для Каждого ТекДокумент Из МассивДокументов Цикл
		МассивЗахваченныхФайлов = РаботаСФайламиВызовСервера.ПолучитьСписокЗанятыхФайлов(ТекДокумент);
		
		РаботаСФайламиКлиент.ПоместитьИзмененияФайлов(ТекДокумент, УникальныйИдентификатор, 
			МассивЗахваченныхФайлов);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодготовитьФайлКWord(ФайлСтрока)
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокФайлы()
	
	Файлы.Очистить();
	
	МассивФайлов = СогласованиеВРежимеЗамечанийСервер.ПолучитьВсеПриложенныеФайлы(Документ);
	ТаблицаФайлов = СогласованиеВРежимеЗамечанийСервер.ПолучитьПараметрыФайлов(Документ, МассивФайлов);
	
	Строка = Файлы.Добавить();
	Строка.Наименование = НСтр("ru = 'Документ'");
	Строка.Ссылка = Документ;
	Строка.ИндексКартинки = 10;
	ПрочитатьПравки(Строка);
	Строка.ЧислоЗамечаний = Строка.Правки.Количество();
	
	ОтображатьДополнительныеРеквизиты =	Элементы.СтраницаДополнительныеРеквизиты.ПодчиненныеЭлементы.Количество() > 0;
	Если ОтображатьДополнительныеРеквизиты Тогда
		
		Строка = Файлы.Добавить();
		Строка.Наименование = НСтр("ru = 'Дополнительные реквизиты'");
		Строка.ЭтоДополнительныеРеквизиты = Истина;
		Строка.ИндексКартинки = -1;
		
	КонецЕсли;	
	
	ПользовательИЕгоСотрудники = СотрудникиВызовСервера.ПользовательИЕгоСотрудники();
	
	Для Каждого Выборка Из ТаблицаФайлов Цикл
		
		Строка = Файлы.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		
		Строка.ИмяБезРасширения = Выборка.Наименование;
		
		ИмяИРасширение = Строка(Выборка.Наименование) + "." + Выборка.Расширение;
		Если ЗначениеЗаполнено(Выборка.Роль) Тогда
			ИмяИРасширение = ИмяИРасширение + " (" + Строка(Выборка.Роль) + ")";
		КонецЕсли;	
		
		Если ЭтоКомплект Тогда
			Строка.Наименование = ИмяИРасширение + " (" + Строка(Выборка.ВладелецФайла) +  ")";
		Иначе
			Строка.Наименование = ИмяИРасширение;
		КонецЕсли;	
		
		Если ПользовательИЕгоСотрудники.Найти(Выборка.Редактирует) <> Неопределено Тогда
			Строка.ЗанятМной = Истина;
		КонецЕсли;	
		
		ПрочитатьHTML(Строка);
		ПрочитатьПравки(Строка);
		
		Строка.ЧислоЗамечаний = Строка.Правки.Количество();
		
		Если Не ЗначениеЗаполнено(ВыбранныйФайл) 
			И ИдПервогоWordФайла = 0 
			И СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Строка.Расширение) Тогда
			ИдПервогоWordФайла = Строка.ПолучитьИдентификатор();
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ВыбранныйФайл) И Строка.Ссылка = ВыбранныйФайл Тогда
			ИдПервогоWordФайла = Строка.ПолучитьИдентификатор();
		КонецЕсли;	
		
	КонецЦикла;
	
	ТекущаяВерсияДанныхДействияЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДействиеЗадачи, "ВерсияДанных");
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		ТекущаяВерсияДанныхИсточникаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийИсточникДействия, "ВерсияДанных");
	КонецЕсли;	
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ПоказатьСкрытьФайлыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьГалочкиКоманд()
	
	Элементы.ПравкиПоказатьПравкиПредыдущихЭтапов.Пометка = ПоказыватьПравкиДругихЭтапов;
	Элементы.ПравкиПоказатьПравкиТолькоОдногоПрошлогоЭтапа.Пометка = ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа;
	Элементы.ПравкиПоказатьТолькоТекущиеПравки.Пометка = 
		(ПоказыватьПравкиДругихЭтапов = Ложь И ПоказыватьПравкиТолькоОдногоПрошлогоЭтапа = Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандВыполнения()
	
	Если Не ЭтоМобильныйКлиент Тогда
		
		Элементы.ЗадачаОбработано.Видимость = Ложь;
		
		Элементы.ЗадачаОзнакомился.Видимость = Истина;
		Если РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
			Элементы.ЗадачаОбработано.Видимость = Истина;
		КонецЕсли;	
		
		Элементы.ЗадачаЗакончитьСогласование.Видимость = Ложь;
		Элементы.ПродолжитьСогласование.Видимость = Ложь;
		
	Иначе
		
		Элементы.МК_ЗадачаОбработано.Видимость = Ложь;
		
		Элементы.МК_ЗадачаОзнакомился.Видимость = Истина;
		Если РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
			Элементы.МК_ЗадачаОбработано.Видимость = Истина;
		КонецЕсли;	
		
		Элементы.МК_ЗадачаЗакончитьСогласование.Видимость = Ложь;
		Элементы.МК_ПродолжитьСогласование.Видимость = Ложь;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд_Редактирование_HTML


#КонецОбласти

#Область ОбработчикиКоманд_Файлы

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Ссылка = Элементы.Файлы.ТекущиеДанные.Ссылка;
	Расширение = Элементы.Файлы.ТекущиеДанные.Расширение;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		Файл = Ссылка;
		
		Если Не СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Расширение) Тогда
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, 
				Неопределено, 
				ЭтаФорма.УникальныйИдентификатор, 
				Неопределено);
				
			РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, 
				ДанныеФайла, УникальныйИдентификатор); 
			Возврат;	
		КонецЕсли;	
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ПоказыватьПолеHTML = ЗначениеЗаполнено(ТекущиеДанные.ФайлHTML);
	
	ТекущиеДанные.ЗанятМной = Истина;
	
	Если Не ПоказыватьПолеHTML Тогда
		Элементы.Редактировать.Видимость = Истина; // чтобы открыть ранее занятый мной
		Элементы.ЗакончитьРедактирование.Видимость = Истина;
		Элементы.ОткрытьФайлДляПросмотра.Видимость = Ложь; // т.к. уже редактируем.
		
		Если ИспользоватьПредпросмотрФайлов И ТекущиеДанные.ЗанятМной Тогда
			
			ТекстHTML = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			
		КонецЕсли;
			
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Файлы.ТекущиеДанные.Ссылка = ТекущийФайл Тогда // та же строка, ничего не делаем
		Возврат;
	КонецЕсли;	
	
	ПодключитьОбработчикОжидания("ОбработчикФайлыПриАктивизацииСтроки", 0.5, Истина);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	ПоказыватьПолеHTML = ЗначениеЗаполнено(ТекущиеДанные.ФайлHTML);
	
	Элементы.ФайлыКонтекстноеМенюОтредактироватьВWord.Видимость = 
		ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") И ЗначениеЗаполнено(ТекущиеДанные.ФайлHTML);
	Элементы.ФайлыКонтекстноеМенюРедактировать.Видимость = 
		ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") И Не ЗначениеЗаполнено(ТекущиеДанные.ФайлHTML);
		
	Элементы.ОтредактироватьВWord.Видимость = ПоказыватьПолеHTML И Не ТекущиеДанные.ЗанятМной;
	Элементы.ВернутьсяВРежимЗамечаний.Видимость = ПоказыватьПолеHTML И ТекущиеДанные.ЗанятМной;
	
	Элементы.Редактировать.Видимость = Не ПоказыватьПолеHTML Или (ПоказыватьПолеHTML И ТекущиеДанные.ЗанятМной);
	Элементы.ОткрытьФайлДляПросмотра.Видимость = Не ПоказыватьПолеHTML И Не ТекущиеДанные.ЗанятМной;
	Элементы.ЗакончитьРедактирование.Видимость = Не ПоказыватьПолеHTML И ТекущиеДанные.ЗанятМной;
		
	ТекущийОтличаетсяОтШаблона = ТекущиеДанные.ОтличаетсяОтШаблона;
	ТекущиеЕстьПравилаАвтозаполнения = ТекущиеДанные.ЕстьПравилаАвтозаполнения;
	
	Если ИспользоватьПредпросмотрФайлов Тогда

		ПоказыватьПолеHTML = ЗначениеЗаполнено(ТекущиеДанные.ФайлHTML);
		ПревышенРазмер = Ложь;
		
		Если Не ПоказыватьПолеHTML И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
					
			Если ОбзорФайловКлиент.ЭтоФайлСДолгойОбработкой(ТекущиеДанные.Расширение)
				И Не ТекущиеДанные.ПредпросмотрЕстьВБазе Тогда
					
				ТекстHTML = ОбзорФайловКлиент.HTMLПредставлениеСДолгойОбработкой();
				Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;   
				Элементы.ПереключениеСтраниц.Видимость = Ложь;
				
			КонецЕсли;		

		КонецЕсли;		
		
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ПоказатьСкрытьФайлыНаСервере();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикФайлыПриАктивизацииСтроки()
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// та же строка, ничего не делаем
	Если Элементы.Файлы.ТекущиеДанные.Ссылка = ТекущийФайл И ЗначениеЗаполнено(ТекущийФайл) Тогда 
		Возврат;
	КонецЕсли;	

	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	ЭтоДополнительныеРеквизиты = ТекущиеДанные.ЭтоДополнительныеРеквизиты;
	
	ТаблицаUNDO.Очистить();
	Элементы.ПравкиОтменить.Доступность = Ложь;
	
	ОбработчикФайлыПриАктивизацииСтрокиСервер(Элементы.Файлы.ТекущаяСтрока);
	
	ТекущийФайл = Элементы.Файлы.ТекущиеДанные.Ссылка;    
	ТекущийФайлРасширение = Элементы.Файлы.ТекущиеДанные.Расширение;
	
	ПоказыватьПолеHTML = ЗначениеЗаполнено(ТекущиеДанные.ФайлHTML);
	ПревышенРазмер = Ложь;
	
	Элементы.ПравкиКонтекстноеМенюПоказатьДляСтаройВерсииФайла.Доступность
	 = ЗначениеЗаполнено(ТекущиеДанные.ВерсияHTML);
	
	Элементы.ОтредактироватьВWord.Видимость = ПоказыватьПолеHTML И Не ТекущиеДанные.ЗанятМной;
	Элементы.ВернутьсяВРежимЗамечаний.Видимость = ПоказыватьПолеHTML И ТекущиеДанные.ЗанятМной;
	
	Элементы.Редактировать.Видимость = Не ПоказыватьПолеHTML Или (ПоказыватьПолеHTML И ТекущиеДанные.ЗанятМной);
	Элементы.ОткрытьФайлДляПросмотра.Видимость = Не ПоказыватьПолеHTML И Не ТекущиеДанные.ЗанятМной;
	Элементы.ЗакончитьРедактирование.Видимость = Не ПоказыватьПолеHTML И ТекущиеДанные.ЗанятМной;
	
	Если ЭтоДополнительныеРеквизиты Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДополнительныеРеквизиты;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницаДополнительныеРеквизиты.Видимость = Истина;
		Элементы.ГруппаСтраницыHTML.Видимость = Ложь;         
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
	
	ИначеЕсли ПоказыватьПолеHTML Тогда // И Не ТекущиеДанные.ЗанятМной
	 
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницаДополнительныеРеквизиты.Видимость = Ложь;
		Элементы.ГруппаСтраницыHTML.Видимость = Истина;
			
		Элементы.ГруппаСтраницыHTML.ТекущаяСтраница = Элементы.СтраницаHTML;
		
		// 2 - создан по шаблону и идентичен по шаблону и есть правила автозаполнения
		РежимТолькоРеквизиты = (ТекущиеДанные.ОтличаетсяОтШаблона = 2) И ТекущиеДанные.ЕстьПравилаАвтозаполнения;
		Элементы.РеквизитыДокумента.Видимость = РежимТолькоРеквизиты И Не ЭтоТиповойДокумент;
			
		Элементы.ПравкиПринятьВсе.Видимость = Истина; // если новый режим
		
		Элементы.ФайлыКонтекстноеМенюОтредактироватьВWord.Доступность = Истина;
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		
	Иначе	
		
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницаДополнительныеРеквизиты.Видимость = Ложь;
		Элементы.ГруппаСтраницыHTML.Видимость = Истина;
		
		Элементы.ГруппаСтраницыHTML.ТекущаяСтраница = Элементы.СтраницаHTML;
		
		Элементы.ФайлыКонтекстноеМенюОтредактироватьВWord.Доступность = Ложь;
		
		Элементы.ОтредактироватьВWord.Видимость = Ложь;
		
		Элементы.ПравкиПринятьВсе.Видимость = Ложь;
		
		Если ПревышенРазмер Тогда
			
			ТекстHTML = "<html><body>
			|<font color=""CornflowerBlue"">
			|<p>Файл HTML имеет слишком большой размер и не может быть показан. Просматривайте его в MS Word.</p>
			|</font>
			|</body></html>";
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			
		Иначе
			ПоказатьОбзорТекущегоФайла();
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбзорТекущегоФайла()
	
	Если Не ИспользоватьПредпросмотрФайлов Тогда
		
		ТекстHTML = "<html><body>
		|<p>Отключена настройка предпросмотра файлов.</p>
		|</body></html>";
		
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;   
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	ТекущийФайлСтрока = ТекущиеДанные.Ссылка;
	РедактируетТекущийПользователь = Ложь;
	ЭтоДокумент = ДелопроизводствоКлиентСервер.ЭтоДокумент(ТекущийФайлСтрока);
	
	Если ЭтоДокумент Тогда
		
		ДанныеМиникарточки = ОбзорСпискаДокументов.ПолучитьДанныеМиникарточки(ТекущийФайлСтрока);
		ТекстHTML = ДанныеМиникарточки.Обзор;
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;     
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;	
	
	Если РедактируетТекущийПользователь Тогда
		 
		ТекстHTML = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;    
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		
	Иначе 
		
		Если ЗначениеЗаполнено(ТекущийФайлСтрока) Тогда               
			
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайлСтрока, 
				ПараметрыHTMLПредставление,
				ДокументPDF);
				
			НомерБлока = 1;	
			ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
			ОбновитьКнопкиДинамическогоСпискаКлиент();
				
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ТекстHTML);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
			
			Если ДокументPDF = Неопределено Тогда
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Иначе
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
				ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
				Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
			КонецЕсли;
			
			ТекущиеДанные.ПредпросмотрЕстьВБазе = Истина;
				
		Иначе
			ТекстHTML = "<html><body></body></html>";
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;   
			Элементы.ПереключениеСтраниц.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработчикФайлыПриАктивизацииСтрокиСервер(ТекущаяСтрока)
	
	// запоминаем для предыдущей строки - только Правки и ПересекающиесяПравки и ТекстHTML.
	Для Каждого Строка Из Файлы Цикл
		
		Если Строка.Ссылка = ТекущийФайл Тогда // нашли
			
			ПравкиТаблица = РеквизитФормыВЗначение("Правки");
			ЗначениеВДанныеФормы(ПравкиТаблица, Строка.Правки);
			
			ПересекающиесяПравкиТаблица = РеквизитФормыВЗначение("ПересекающиесяПравки");
			ЗначениеВДанныеФормы(ПересекающиесяПравкиТаблица, Строка.ПересекающиесяПравки);
			
			РеквизитыДокументаТаблица = РеквизитФормыВЗначение("РеквизитыДокумента");
			ЗначениеВДанныеФормы(РеквизитыДокументаТаблица, Строка.РеквизитыДокумента);
			
			Строка.МаксимальныйНомерПравки = МаксимальныйНомерПравки;
			
			Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	УстановитьДанныеИзТекущейСтроки(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеИзТекущейСтроки(ТекущаяСтрока)
	
	// ставим данные новой строки
	ТекущиеДанные = Файлы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ТекстПоследнегоАвтосохранения = "";
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВерсияHTML) Тогда
		ТекстHTML = ТекущиеДанные.ТекстHTML;
	КонецЕсли;

	ВсегоПорцийПредпросмотра = ТекущиеДанные.ВсегоПорцийПредпросмотра;
	НомерБлока = 1;
	ОбновитьКнопкиДинамическогоСписка();
	
	ТекстHTMLПриОткрытии = ТекущиеДанные.ТекстHTMLПриОткрытии;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ТекстHTML);
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ТекстHTMLПриОткрытии);
	КонецЕсли;
	
	ПравкиТаблица = ДанныеФормыВЗначение(ТекущиеДанные.Правки, Тип("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ПравкиТаблица, "Правки");
	
	Если ЭтоМобильныйКлиент Тогда
		КоличествоПравок = ПравкиТаблица.Количество();
		ЗаголовокПравки = НСтр("ru = 'Замечания'");
		Если КоличествоПравок > 0 Тогда
			Элементы.СтраницаПравки.Заголовок = СтрШаблон("%1 (%2)", ЗаголовокПравки, КоличествоПравок); 
		Иначе
			Элементы.СтраницаПравки.Заголовок = ЗаголовокПравки;
		КонецЕсли;
	КонецЕсли;
	
	ПересекающиесяПравкиТаблица = ДанныеФормыВЗначение(ТекущиеДанные.ПересекающиесяПравки, Тип("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ПересекающиесяПравкиТаблица, "ПересекающиесяПравки");
	
	РеквизитыДокументаТаблица = ДанныеФормыВЗначение(ТекущиеДанные.РеквизитыДокумента, Тип("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(РеквизитыДокументаТаблица, "РеквизитыДокумента");
	
	ФайлHTML  = ТекущиеДанные.ФайлHTML;
	ВерсияHTML = ТекущиеДанные.ВерсияHTML;
	
	МаксимальныйНомерПравки = ТекущиеДанные.МаксимальныйНомерПравки;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстПисьмаВПоле()
	
	HTMLДокумент = Элементы.ТекстHTML.Документ; 
	ТекстПисьмаВПоле = "";
	Если HTMLДокумент <> Неопределено Тогда
		
		Попытка
			ТекстПисьмаВПоле = "<html> <head> </head> <body>" + HTMLДокумент.body.innerHTML + "</body></html>";
		Исключение
		КонецПопытки;	
		
		Попытка
			ТекстПолный = "<html>" + HTMLДокумент.head.outerHTML + HTMLДокумент.body.outerHTML + "</html>";
			ТекстПисьмаВПоле = ТекстПолный;
		Исключение
		КонецПопытки;	
		
	КонецЕсли;
	
	Возврат ТекстПисьмаВПоле;
	
КонецФункции

&НаКлиенте
Процедура РеквизитыДокументаТекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РеквизитыДокумента.ТекущиеДанные;
	ТипЗначенияЗамены = ТекущиеДанные.ТипЗначенияЗамены;
	ПолныйТипЗначения = ТекущиеДанные.ПолныйТипЗначения;
	РеквизитДокументаОтображение = ТекущиеДанные.РеквизитДокументаОтображение;
	
	Если ЗначениеЗаполнено(ПолныйТипЗначения) Тогда
		
		Если СтрНайти(ПолныйТипЗначения, ";") = 0 Тогда // только один тип внутри
		
			ПараметрыОповещения = Новый Структура();
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВводЗначенияПродолжение",
				ЭтотОбъект,
				ПараметрыОповещения);
				
			ТипДляВвода = Тип(ПолныйТипЗначения);	
			
			ПоказатьВводЗначения(
				ОписаниеОповещения,
				, 
				РеквизитДокументаОтображение,
				ТипДляВвода);
				
			Возврат;
		
		Иначе // 
		
			МассивСтрокТипов = СтрРазделить(ПолныйТипЗначения, ";", Ложь);
			СписокТипов = Новый СписокЗначений;
			Для Каждого ТипСтр Из МассивСтрокТипов Цикл
				СписокТипов.Добавить(Тип(ТипСтр));
			КонецЦикла;	
			
			ПараметрыОповещения = Новый Структура("РеквизитДокументаОтображение", РеквизитДокументаОтображение);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораТипа", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокТипов, Элементы.РеквизитыДокумента);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияЗамены = "Дата" Тогда	
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеВводаДаты",
			ЭтотОбъект);

		ПоказатьВводДаты(ОписаниеОповещения, , РеквизитДокументаОтображение);
		
	ИначеЕсли ТипЗначенияЗамены = "Число" Тогда	
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеВводаЧисла",
			ЭтотОбъект);

		ПоказатьВводЧисла(ОписаниеОповещения, , РеквизитДокументаОтображение);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеВводаСтроки",
			ЭтотОбъект);

		ПоказатьВводСтроки(ОписаниеОповещения, "", РеквизитДокументаОтображение, , Ложь);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораТипа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПараметрыОповещения = Новый Структура();
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВводЗначенияПродолжение",
			ЭтотОбъект,
			ПараметрыОповещения);
			
		ТипДляВвода = Результат.Значение;	
		
		ПоказатьВводЗначения(
			ОписаниеОповещения,
			, 
			ДополнительныеПараметры.РеквизитДокументаОтображение,
			ТипДляВвода);
			
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводЗначенияПродолжение(Значение, Параметры) Экспорт
	
	Если Значение <> Неопределено Тогда
		Элементы.РеквизитыДокумента.ТекущиеДанные.ТекЗначение = Значение;	
		Элементы.РеквизитыДокумента.ТекущиеДанные.Изменен = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДаты(Дата, Параметры) Экспорт
	
	Если НЕ Дата = Неопределено Тогда
		Элементы.РеквизитыДокумента.ТекущиеДанные.ТекЗначение = Дата;	
		Элементы.РеквизитыДокумента.ТекущиеДанные.Изменен = Истина;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЧисла(Число, Параметры) Экспорт
	
	Если НЕ Число = Неопределено Тогда
		Элементы.РеквизитыДокумента.ТекущиеДанные.ТекЗначение = Число;	
		Элементы.РеквизитыДокумента.ТекущиеДанные.Изменен = Истина;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтроки(Строка, Параметры) Экспорт
	
	Если НЕ Строка = Неопределено Тогда
		Элементы.РеквизитыДокумента.ТекущиеДанные.ТекЗначение = Строка;	
		Элементы.РеквизитыДокумента.ТекущиеДанные.Изменен = Истина;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДокументаТекЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДокумента.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.РеквизитыДокумента.ТекущиеДанные.Изменен = Истина;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Ссылка = Элементы.Файлы.ТекущиеДанные.Ссылка;
	ФайлHTML = Элементы.Файлы.ТекущиеДанные.ФайлHTML;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьВыполнить();
	
	ЗаписатьПротоколированиеРаботыПользователей(Документ, "ЗакончитьРедактирование");
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		Элементы.Файлы.ТекущиеДанные.ЗанятМной = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеЗакончитьРедактирование", ЭтотОбъект,
			 Новый Структура("Ссылка, ФайлHTML", Ссылка, ФайлHTML));
		
		ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
			Ссылка, ЭтаФорма.УникальныйИдентификатор);
		ПараметрыОбновленияФайла.ХранитьВерсии = Истина;
		ПараметрыОбновленияФайла.РедактируетТекущийПользователь = Истина;
		ПараметрыОбновленияФайла.Редактирует = ТекущийПользователь;
		ПараметрыОбновленияФайла.СоздатьНовуюВерсию = Истина;
		ПараметрыОбновленияФайла.КомментарийКВерсии = "";
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеЗакончитьРедактирование(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыВыполнения.ФайлHTML) Тогда
		
		Элементы.Редактировать.Видимость = Истина;
		Элементы.ЗакончитьРедактирование.Видимость = Ложь;
		Элементы.ОткрытьФайлДляПросмотра.Видимость = Истина;
		
		Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ТекущийФайлСтрока = ТекущиеДанные.Ссылка;
		
		Если ИспользоватьПредпросмотрФайлов Тогда         
			
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайлСтрока, 
				ПараметрыHTMLПредставление,
				ДокументPDF);
			
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ТекстHTML);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
			
			Если ДокументPDF = Неопределено Тогда
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Иначе
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
				ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
				Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;	
	
	// еще из doc в html
	
	ЭтоВторойЦиклИлиВыше = Истина;

	АвтозаполняемыеФайлы = Новый Массив;
	АвтозаполняемыеФайлыHTML = Новый Массив;

	АвтозаполняемыеФайлы.Добавить(ПараметрыВыполнения.Ссылка);
	АвтозаполняемыеФайлыHTML.Добавить(ПараметрыВыполнения.ФайлHTML);

	// Для автозаполняемых: нужно наоборот - после автозаполнения - снова doc в html.
	МассивФайловПараллельногоСогласованияДляDocВHtml
		= СогласованиеВРежимеЗамечанийСервер.ПодготовитьМассивФайловПараллельногоСогласования_ПоМассиву(
			Документ,
			АвтозаполняемыеФайлы,
			ЭтаФорма.УникальныйИдентификатор,
			,
			ЭтоВторойЦиклИлиВыше);
		
	Если МассивФайловПараллельногоСогласованияДляDocВHtml.Количество() <> 0 Тогда
		
		Для Счетчик = 0 По МассивФайловПараллельногоСогласованияДляDocВHtml.Количество()-1 Цикл
			СтруктураФайла = МассивФайловПараллельногоСогласованияДляDocВHtml[Счетчик];
			ФайлHTMLТек = АвтозаполняемыеФайлыHTML[Счетчик];
			СтруктураФайла.Вставить("ФайлHTMLСсылка", ФайлHTMLТек);
		КонецЦикла;	

		ПараметрыВызова = СогласованиеВРежимеЗамечанийКлиент.ПараметрыИзWordВHtml();
		ПараметрыВызова.УникальныйИдентификатор = ЭтаФорма.УникальныйИдентификатор;
		ПараметрыВызова.СпособСогласованияВРежимеЗамечаний = СпособСогласованияВРежимеЗамечаний;
		ПараметрыВызова.СоздаватьФайлы = Ложь;
		ПараметрыВызова.ЭтоВторойЦиклИлиВыше = ЭтоВторойЦиклИлиВыше;
		
		СогласованиеВРежимеЗамечанийКлиент.ОбработатьМассивФайловИзWordВHtml(
			МассивФайловПараллельногоСогласованияДляDocВHtml,
			ПараметрыВызова);
			
		СогласованиеВРежимеЗамечанийСервер.ОбработатьHTMLФайлыМассив(Документ, 
			АвтозаполняемыеФайлыHTML, БизнесПроцесс,
			ЭтоВторойЦиклИлиВыше, НомерИтерации + 1);	
		
	КонецЕсли;	
	
	ПеречитатьПравки();

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсе(Команда)
	
	Отказ = Истина;
	Оповещение = Новый ОписаниеОповещения("ОтменитьВсеЗавершение", ЭтотОбъект, Параметры);
	
	ТекстВопроса = "";
	
	ТекстВопроса = НСтр("ru = 'Все отработанные вами замечания (по всем файлам) будут помечены как неотработанные.
		|Продолжить?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, ,
		КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено Или РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	// на сервере сразу в СУБД запишем
	ОтменитьВсеСервер();
	
	ПеречитатьПравки(); // правки и html перечитает.
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеСервер()
	
	Для Каждого Строка Из Файлы Цикл
		
		ОтменитьПравки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Строка - строка таблицы Файлы
Процедура ОтменитьПравки(Строка)
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоНеотработанныхЗамечаний(ТекстЗамечаний, ПерваяСтрокаСЗамечаниями)
	
	КоличествоНеотработанных = 0;
	
	ТекстЗамечаний = "";
	
	// Правки - надо пройти по всем файлам.
	Для Каждого СтрокаФайлы Из Файлы Цикл
		
		Для Каждого Строка Из СтрокаФайлы.Правки Цикл
			
			Если Строка.НомерЭтапа = НомерИтерации И Не ЗначениеЗаполнено(Строка.СтатусПринятия) Тогда	
				
				КоличествоНеотработанных = КоличествоНеотработанных + 1; 
				Если ПерваяСтрокаСЗамечаниями = Неопределено Тогда
					ПерваяСтрокаСЗамечаниями = СтрокаФайлы.ПолучитьИдентификатор();
				КонецЕсли;	
				
				Если КоличествоНеотработанных <= 3 Тогда
					
					ДобавкаТекста = Строка.Замечание;
					Если Не ЗначениеЗаполнено(Строка.Замечание) Тогда
						ДобавкаТекста = Строка.Комментарий;
					КонецЕсли;
					Если СтрДлина(ДобавкаТекста) > 20 Тогда
						ДобавкаТекста = Лев(ДобавкаТекста, 20) + "...";
					КонецЕсли;	
					ДобавкаТекста = СтрЗаменить(ДобавкаТекста, Символы.ВК, " ");
					ДобавкаТекста = СтрЗаменить(ДобавкаТекста, Символы.ПС, " ");
					
					Если ЗначениеЗаполнено(СтрокаФайлы.ФайлHTML) Тогда
						ДобавкаТекста = ДобавкаТекста + " (" + Строка(СтрокаФайлы.ФайлHTML) + ")";
					Иначе	
						ДобавкаТекста = ДобавкаТекста + " " + НСтр("ru = '(Документ)'");
					КонецЕсли;	
					
					ТекстЗамечаний = ТекстЗамечаний + Символы.ПС + ДобавкаТекста;
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат КоличествоНеотработанных;
	
КонецФункции	

&НаКлиенте
Функция КоличествоЗамечанийОтказатьБезПринятаяРедакция()
	
	КоличествоНеотработанных = 0;
	
	// Правки - надо пройти по всем файлам.
	Для Каждого СтрокаФайлы Из Файлы Цикл
		
		Для Каждого Строка Из СтрокаФайлы.Правки Цикл
			
			Если Строка.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.НеПринята")
			И Строка.НомерЭтапа = НомерИтерации
			И Строка.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание")
			И Не ЗначениеЗаполнено(Строка.ПринятаяРедакция) Тогда
				КоличествоНеотработанных = КоличествоНеотработанных + 1;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат КоличествоНеотработанных;
	
КонецФункции	

&НаКлиенте
Процедура ОтработатьВместоРобота()
	
	// вызов идет только при завершении действия
	
	Если РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьЗавершениеСогласования(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	СогласованиеВРежимеЗамечанийКлиент.УдалитьКомментарииБезИспользованияРобота(
		Действие, Документ, УникальныйИдентификатор, "",
		СпособСогласованияВРежимеЗамечаний);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ЗаблокироватьДанныеДействияДляРедактирования(Действие, ДанныеЗаблокированы, УникальныйИдентификатор)
	
	Если Не ЗначениеЗаполнено(Действие) Или ДанныеЗаблокированы Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Действие,, УникальныйИдентификатор);
		ДанныеЗаблокированы = Истина;
	Исключение
		// кто то другой мог успеть раньше
	КонецПопытки;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазблокироватьДанныеДействияДляРедактирования(Действие, ДанныеЗаблокированы, УникальныйИдентификатор)
	
	Если Не ЗначениеЗаполнено(Действие) Или Не ДанныеЗаблокированы Тогда
		Возврат;
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Действие, УникальныйИдентификатор);
	ДанныеЗаблокированы = Ложь;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(
		ЭтотОбъект,
		ТекущийИсточникДействияДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(
		ЭтотОбъект,
		ТекущийИсточникДействияДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)

	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗависимостиДополнительныхРеквизитов();
	Результат = СохранитьДополнительныеРеквизиты();
	
	Если Результат.ВерсииДанныхРазличаются Тогда
		
		Сообщение = НСтр("ru = 'Не удалось сохранить изменения. Возможно, задача была выполнена или изменена другим сотрудником.'");
		ПеречитатьПравки();
		ПоказатьПредупреждение(, Сообщение);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства
	
&НаСервере
Функция СохранитьДополнительныеРеквизиты()
	
	Результат = РаботаСЗадачамиКлиентСервер.НовыйРезультатСохраненияЗадачи();

	Если Не ОбщегоНазначенияДокументооборот.ВерсияДанныхАктуальна(
		ТекущийИсточникДействия, ТекущаяВерсияДанныхИсточникаЗадачи) Тогда
		
		Результат.Успешно = Ложь;
		Результат.ВерсииДанныхРазличаются = Истина;
		Возврат Результат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
		
		УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(
			ЭтотОбъект,
			ТекущийИсточникДействияОбъект);
		
		ТекущийИсточникДействияОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
		
		ТекущийИсточникДействияОбъект.Записать();
		
		ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоЗадачеПроцесса(ТекущийИсточникДействия);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ТекущийИсточникДействия);
	МассивОбъектов.Добавить(ДействиеЗадачи);
	ВерсииДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОбъектов, "ВерсияДанных");
	
	ТекущаяВерсияДанныхИсточникаЗадачи = ВерсииДанных[ТекущийИсточникДействия]; 
	ТекущаяВерсияДанныхДействияЗадачи = ВерсииДанных[ДействиеЗадачи]; 
	
	Модифицированность = Ложь;
	
	Возврат Результат;
	
КонецФункции
	
// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	// Общее.
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	СоставКоманднойПанелиНаМобильномУстройстве.Добавить(Элементы.МК_КоманднаяПанель);
	
	// Команды.
	Элементы.МК_КоманднаяПанель.Видимость = Истина;
	
	// Страницы.
	Элементы.Переместить(Элементы.ЛеваяПанель, Элементы.ГруппаСтраницы, Элементы.СтраницаПравки);
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЛеваяПанель;
	
	// Переключение страниц.
	Элементы.МК_ЗаголовокСтраниц.Видимость = Истина;
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;

	// Команды переключения страниц.
	Элементы.МК_ЗаголовокСтраниц.Видимость = Истина;
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаИнформация, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаПравки, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаПротокол, Истина);
	
	Элементы.МК_КнопкаСтраницаПравки.Видимость = Элементы.Правки.Видимость;
	Элементы.МК_КнопкаСтраницаПротокол.Видимость = Элементы.ПротоколРазногласий.Видимость;
	
	МК_СтраницаИнформацияНаСервере();
	
	// Область выполнения.
	Элементы.ГруппаКомандВерх.Видимость = Ложь;
	Элементы.МК_ГруппаКнопкиВыполнения.Видимость = Истина;
	МК_ОбновитьКнопкиВыполнения();
	УстановитьВидимостьКомандВыполнения();
	
	// Файлы
	Элементы.МК_ГруппаФайлы.Видимость = Истина;
	Элементы.Переместить(Элементы.Файлы, Элементы.МК_ГруппаФайлы);
	Элементы.Файлы.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	МК_ПоказатьСкрытьФайлыНаСервере();
	
	// Правки
	Элементы.Правки.Шапка = Ложь;
	Элементы.Правки.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элементы.СтраницаПравки.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.МК_ПравкиГруппаКолонок.Видимость = Истина;
	
	Элементы.Переместить(Элементы.ПравкиНомерКартинкиСтатуса, Элементы.МК_ПравкиГруппаКартинки);
	Элементы.Переместить(Элементы.ПравкиНомерКартинки, Элементы.МК_ПравкиГруппаКартинки);
	
	Элементы.Переместить(Элементы.ПравкиГруппаКомментарийЗамечание, Элементы.МК_ПравкиЗамечаниеКомментарий);
	Элементы.Переместить(Элементы.ПравкиАвтор, Элементы.МК_ПравкиАвтор);
	Элементы.Переместить(Элементы.ПравкиНомер, Элементы.МК_ПравкиНомер);
	
	Элементы.ПравкиАвтор.Ширина = 1;
	Элементы.ПравкиАвтор.Высота = 1;
	Элементы.ПравкиАвтор.РастягиватьПоГоризонтали = Истина;
	Элементы.ПравкиАвтор.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.ПравкиАвтор.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;
	
	Элементы.ПравкиНомер.Ширина = 4;
	Элементы.ПравкиНомер.РастягиватьПоГоризонтали = Ложь;
	Элементы.ПравкиНомер.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	Элементы.ПравкиНомер.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	Элементы.ПравкиНомер.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	
	Элементы.ПравкиЗамечание.Высота = 1;
	Элементы.ПравкиЗамечание.РастягиватьПоВертикали = Ложь;
	
	Элементы.ПравкиКомментарий.Высота = 3;
	Элементы.ПравкиКомментарий.РастягиватьПоВертикали = Истина;
	
	// Остальные колонки скроем.
	Элементы.ПравкиЧтоМеняем.Видимость = Ложь;
	Элементы.ПравкиНаЧтоМеняем.Видимость = Ложь;
	Элементы.ПравкиПринятаяРедакция.Видимость = Ложь;
	Элементы.ПравкиНомерЭтапа.Видимость = Ложь;
	Элементы.ПравкиОтнесенаКПротоколуРазногласий.Видимость = Ложь;
	
	// Командную панель правок перенесем в общую панель.
	Элементы.Переместить(Элементы.ПравкиГруппаОсновные, Элементы.МК_КоманднаяПанель);
	Элементы.Переместить(Элементы.ПравкиГруппаПравки, Элементы.МК_КоманднаяПанель);
	Элементы.Переместить(Элементы.ПравкиПоказыватьВнесенноеИнициатором, Элементы.МК_КоманднаяПанель);
	Элементы.Переместить(Элементы.ПравкиВывестиСписок, Элементы.МК_КоманднаяПанель);
	
	Элементы.Переместить(Элементы.ПравкиПринять, Элементы.Правки.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ПравкиОтказать, Элементы.Правки.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ПравкиОтменить, Элементы.Правки.КонтекстноеМеню);
	
	Элементы.ПравкиОтменить.Отображение = ОтображениеКнопки.Текст;

	Элементы.МК_ГруппаПравкиЗаголовок.Видимость = Истина;
	Элементы.Переместить(Элементы.ПравкиПринятьВсе, Элементы.МК_ГруппаПравкиЗаголовок);
	МК.ОформитьКнопкуФильтра(Элементы.ПравкиПринятьВсе, Истина);
	
	Элементы.КомандыHTML.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура МК_СтраницаИнформацияНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЛеваяПанель;
	МК_СброситьОформлениеПереключателейСтраниц();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаИнформация, Истина);
	
КонецПроцедуры

&НаСервере
Процедура МК_СтраницаПротоколНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПротокол;
	МК_СброситьОформлениеПереключателейСтраниц();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаПротокол, Истина);
	
КонецПроцедуры

&НаСервере
Процедура МК_СтраницаПравкиНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПравки;
	МК_СброситьОформлениеПереключателейСтраниц();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаПравки, Истина);
	
КонецПроцедуры

&НаСервере
Процедура МК_СброситьОформлениеПереключателейСтраниц()
	
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаИнформация, Ложь);
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаПравки, Ложь);
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаПротокол, Ложь);

КонецПроцедуры

&НаСервере
Процедура МК_ОбновитьКнопкиВыполнения()

	Если Элементы.МК_ЗадачаОзнакомился.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи Тогда
		МК.ОформитьКнопкуЗадачСОтрицательнымВыполнением(Элементы.МК_ЗадачаОзнакомился);
	Иначе
		МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.МК_ЗадачаОзнакомился);
	КонецЕсли;
	
	Если Элементы.МК_ЗадачаОбработано.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи Тогда
		МК.ОформитьКнопкуЗадачСОтрицательнымВыполнением(Элементы.МК_ЗадачаОбработано);
	Иначе
		МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.МК_ЗадачаОбработано);
	КонецЕсли;
	
	Если Элементы.МК_ПродолжитьСогласование.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи Тогда
		МК.ОформитьКнопкуЗадачСОтрицательнымВыполнением(Элементы.МК_ПродолжитьСогласование);
	Иначе
		МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.МК_ПродолжитьСогласование);
	КонецЕсли;
	
	Если Элементы.МК_ЗадачаЗакончитьСогласование.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи Тогда
		МК.ОформитьКнопкуЗадачСОтрицательнымВыполнением(Элементы.МК_ЗадачаЗакончитьСогласование);
	Иначе
		МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.МК_ЗадачаЗакончитьСогласование);
	КонецЕсли;
	
	Если Элементы.МК_ОтменитьВсе.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи Тогда
		МК.ОформитьКнопкуЗадачСОтрицательнымВыполнением(Элементы.МК_ОтменитьВсе);
	Иначе
		МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.МК_ОтменитьВсе);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура МК_ПоказатьСкрытьФайлыНаСервере()
	
	КоличествоФайлов = Файлы.Количество();
	
	Если КоличествоФайлов = 0 Тогда
		Элементы.Файлы.Видимость = Ложь;
	КонецЕсли;
	
	МК_ОбновитьЗаголовокФайлов();

	МК.ОформитьКнопкуСворачиваемойГруппы(Элементы.МК_ПоказатьСкрытьФайлы, Элементы.Файлы.Видимость);
	МК.УстановитьНовуюВысотуДополнительнойТаблицы(Элементы.Файлы, КоличествоФайлов);
	
КонецПроцедуры

&НаСервере
Процедура МК_ОбновитьЗаголовокФайлов()
	
	// Не считаем документ как файл.
	КоличествоФайлов = Файлы.Количество() - 1;
	
	Элементы.МК_ФайлыНадпись.Заголовок = 
		СтрШаблон(
			НСтр("ru = 'Файлы (%1)'"),
			Формат(КоличествоФайлов, "ЧН=0; ЧГ="));
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ВывестиPDFДокументНаСервере()
	
	СведенияОДокументеPDF = РаботаСPDFПовтИсп.НовыеСведенияОPDFДокументеНаФорме();
	СведенияОДокументеPDF.ИмяРодителяКоманды = "ГруппаКомандPdf";	
	
	РаботаСPDF.ВывестиPDFДокументНаФорму(ЭтотОбъект, СведенияОДокументеPDF);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиДинамическогоСписка()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерБлока,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкиДинамическогоСпискаКлиент()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерБлока,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиПорционногоПредпросмотра()
	
	ИмяРодителяКоманды = "ГруппаСтраницыКнопкиПеремотки";
	ОбзорФайловСервер.СоздатьКнопкиПорционногоПредпросмотра(ЭтотОбъект, ИмяРодителяКоманды);
	
КонецПроцедуры	

&НаКлиенте
Процедура СтраницаВыборЗавершение(НоваяСтраница, ДополнительныеПараметры) Экспорт
	
	ЧастьВыбор(НоваяСтраница);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьHTMLСервер(ИдСтроки, НомерБлока) 
	
	Строка = Файлы.НайтиПоИдентификатору(ИдСтроки);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Строка.НомерБлока = НомерБлока;
	
	ПрочитатьHTML(Строка);

	ФайлHTML  = Строка.ФайлHTML;
	ТекстHTML = Строка.ТекстHTML;     
	ВерсияHTML = Строка.ВерсияHTML;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЧастьВыбор(НоваяСтраница)
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерБлока = НоваяСтраница;    
	
	ПоказыватьПолеHTML = ЗначениеЗаполнено(Элементы.Файлы.ТекущиеДанные.ФайлHTML);
	
	Если ПоказыватьПолеHTML Тогда
		
		ИдСтроки = Элементы.Файлы.ТекущиеДанные.ПолучитьИдентификатор();
		ПрочитатьHTMLСервер(ИдСтроки, НомерБлока - 1);  
		
	Иначе       
		
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные; 
		ТекущийФайлСтрока = ТекущиеДанные.Ссылка;
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла(); 
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;   
		
		ПараметрыHTMLПредставление.НомерПорции = НомерБлока - 1; // номера для пользователя - с 1, в СУБД - с 0
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайлСтрока, 
			ПараметрыHTMLПредставление,
			ДокументPDF);
			
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ТекстHTML);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьКнопкиДинамическогоСпискаКлиент();
	
КонецПроцедуры

#КонецОбласти
