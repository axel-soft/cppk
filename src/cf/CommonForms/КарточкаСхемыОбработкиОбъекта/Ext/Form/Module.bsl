
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьПараметрыСхемыВФорму(
		Параметры.ПараметрыСхемы,
		Параметры.ОбработкаОбъекта,
		Параметры.Действия,
		Параметры.ТекущиеЭлементы,
		Параметры.ПройденныеЭлементы);
	
	Если Не ДоступенПросмотрСхемыПроцесса() Тогда  
		ТекстИсключения = НСтр("ru = 'У вас нет прав для просмотра схемы.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПараметров.ВладелецСхемы)
		И ТипЗнч(ДанныеПараметров.ВладелецСхемы) = Тип("СправочникСсылка.НастройкиОбработкиВидовОбъектов") Тогда
	
		НастройкиОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПараметров.ВладелецСхемы, 
			"ВидОбъекта, ДействуетПо, ДействуетС");
		ВидОбъекта = НастройкиОбработки.ВидОбъекта;
		ДействуетПо = НастройкиОбработки.ДействуетПо;
		ДействуетС = НастройкиОбработки.ДействуетС;
		
	КонецЕсли;
		
	ТолькоПросмотр = Параметры.ТолькоПросмотр;
	Если ДанныеПараметров.ЕстьАктивныеОбработки Тогда
		ТолькоПросмотр = Истина;		 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ОбработкаОбъекта) Тогда
		Элементы.СхемаКонтекстноеМенюПравилаОбработки.Видимость = Ложь;
	КонецЕсли;	
	
	СхемыПроцессовСервер.ПрочитатьСхемуВФорму(ДанныеПараметров.Схема, ЭтотОбъект);
	СхемыПроцессовСервер.УстановитьПоддерживаемыеТипыЭлементовСхемыВФорму(
		РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.ПоддерживаемыеТипыЭлементовСхемы(),
		ЭтотОбъект);
	СхемыПроцессовКлиентСервер.ЗаполнитьНавигационнуюСсылкуФормыПоДаннымСхемы(ЭтотОбъект);
	
	ПоложениеОписания = ПоложениеОписанияВидовДействийДляОтображения(ДанныеПараметров);
	
	УстановитьОформлениеЭлементамСхемы(
		ЭтотОбъект,
		ОписаниеВидовДействийДляОтображения(ДанныеПараметров),
		ПоложениеОписания.ГоризонтальноеПоложение,
		ПоложениеОписания.ВертикальноеПоложение,
		ОписаниеСкриптов(ДанныеПараметров),
		РамкиЭлементовДляОтображения(ЭтотОбъект));
	
	ЗаполнитьЗаголовок(ЭтотОбъект);
		
	НастроитьДоступностьЭлементовУправленияСхемой();
	АвтоформируемаяСхемаПриОткрытии = ДанныеПараметров.АвтоформируемаяСхема;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОбработатьОтветНаВопросЗаписиИзмененийПередЗакрытием", ЭтотОбъект),
			НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
			
	Иначе		
			
		Если Не ДиалогПроОшибкиПоказан Тогда
			ПоказатьПроверку(Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ОбновитьДействияВПредмете"
		И ОбновитьОписаниеВидаДействяДляОтображенияПриИзмененииДействия(Параметр.Действие))
		
		Или (ИмяСобытия = "ИзмененВидДействия"
			И ОбновитьОписаниеВидаДействяПриИзменении(Параметр))
		
		Или (ИмяСобытия = "ИзмененСкриптСхемыДляОбработкиОбъекта"
			И ОбновитьОписаниеСкриптаПриИзменении(Параметр)) Тогда
		
		ПоложениеОписания = ПоложениеОписанияВидовДействийДляОтображения(ДанныеПараметров);
		
		УстановитьОформлениеЭлементамСхемы(
			ЭтотОбъект,
			ОписаниеВидовДействийДляОтображения(ДанныеПараметров),
			ПоложениеОписания.ГоризонтальноеПоложение,
			ПоложениеОписания.ВертикальноеПоложение,
			ОписаниеСкриптов(ДанныеПараметров),
			РамкиЭлементовДляОтображения(ЭтотОбъект));
			
	ИначеЕсли ОбработкиОбъектовКлиент.ЭтоОповещениеОПереходеКВыполнениюДействияПредмета(
		ИмяСобытия, Параметр, ДанныеПараметров.ОбъектОбработки) Тогда
		
		ОбновитьСхемуПослеПереходаКВыполнениюДействия();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Схема

&НаКлиенте
Процедура СхемаПриИзменении(Элемент)
		
СхемыПроцессовКлиент.ОбновитьДанныеСхемыВФорме(
		ЭтотОбъект, 
		Новый ОписаниеОповещения("ОбработатьОбновлениеДанныхСхемы", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура СхемаВыбор(Элемент)
	
	СхемыПроцессовКлиент.ОбновитьТекущийЭлементВДанныхСхемыПриФорме(ЭтотОбъект);
	
	ИмяТекущегоЭлемента =
		СхемыПроцессовКлиентСервер.ИмяТекущегоЭлементаСхемыПоЕеДаннымВФорме(ЭтотОбъект);
	
	НастроитьПараметрыЭлементаСхемы(ИмяТекущегоЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаПриАктивизации(Элемент)
	
	Если Элементы.ПерейтиКВыполнениюДействия.Видимость Тогда
		СхемыПроцессовКлиент.ОбновитьТекущийЭлементВДанныхСхемыПриФорме(ЭтотОбъект);
		НастроитьДоступностьПереходаКВыполнениюДействия(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьСхемуПроцесса();
	Закрыть(ДанныеСхемы.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
		
	ЗаписатьСхемуПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	ТекстВопроса = 
		НСтр("ru = 'Схема будет заполнена по перечню действий обработки.
		|Текущие настройки будут удалены.
		|
		|Продолжить?'"); 
		
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(
		Новый ОписаниеОповещения("ЗавершитьУстановкуСтандартныхНастроек", ЭтотОбъект),
		ТекстВопроса,
		НСтр("ru = 'Продолжить'"), НСтр("ru = 'Отмена'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСхему(Команда)
	
	ДанныеПараметров.АвтоформируемаяСхема = Ложь;
	НастроитьДоступностьЭлементовУправленияСхемой();
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)         
	
	ОчиститьСообщения();
	
	ПисатьРезультатВБазу = Ложь;
	РезультатПроверки = РезультатПроверкиКорректностиСхемы(ПисатьРезультатВБазу);
	ДанныеСхемы.РезультатПроверкиСхемы = РезультатПроверки.РезультатБазовойПроверкиСхемы; 
	
	Если Не ДанныеСхемы.РезультатПроверкиСхемы.НетОшибок 
		Или РезультатПроверки.ОшибкиНастроекСхемы.Количество() <> 0 Тогда
	
		ВывестиОшибки(РезультатПроверки);
		ПоказатьПредупреждение(, НСтр("ru = 'Схема не прошла проверку'"));
			
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Схема корректна'"));		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибки(РезультатПроверки)
	
	СхемыПроцессовКлиент.ПоказатьРезультатПроверкиСхемыВФорме(ЭтаФорма);
	
	Для Каждого СтрОшибка Из РезультатПроверки.ОшибкиНастроекСхемы Цикл
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрОшибка,,
			"Схема");
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция РезультатПроверкиКорректностиСхемы(ПисатьРезультатВБазу = Истина)
	
	Возврат РаботаСПроцессамиПоОбработкамОбъектов.РезультатПроверкиКорректностиСхемы(
		ДанныеПараметров, ДанныеСхемы, Схема, ПисатьРезультатВБазу);
	
КонецФункции

&НаКлиенте
Процедура ПерейтиКВыполнениюДействия(Команда)
	
	Если Не ДанныеПараметров.ВозможенПереходКВыполнениюДействия Тогда
		Возврат;
	КонецЕсли;
	
	СхемыПроцессовКлиент.ОбновитьТекущийЭлементВДанныхСхемыПриФорме(ЭтотОбъект);
	
	ИмяТекущегоЭлемента =
		СхемыПроцессовКлиентСервер.ИмяТекущегоЭлементаСхемыПоЕеДаннымВФорме(ЭтотОбъект);
	
	ТипЭлементаСхемы = СхемыПроцессовКлиент.ТипЭлементаСхемыПоДаннымСхемыВФорме(
		ИмяТекущегоЭлемента, ЭтотОбъект);
	
	Если Не СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлементаСхемы) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидДействия = ДанныеПараметров.НастройкиЭлементов[ИмяТекущегоЭлемента];
	ДействиеЭлемента = ДействиеСхемыПоВиду(ТекущийВидДействия);
	
	ОбработкиОбъектовКлиент.ПерейтиКВыполнениюДействия(
		ДанныеПараметров.ОбъектОбработки, ДействиеЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОбработки(Команда)
	
	СхемыПроцессовКлиент.ОбновитьТекущийЭлементВДанныхСхемыПриФорме(ЭтотОбъект);
	
	ИмяТекущегоЭлемента =
		СхемыПроцессовКлиентСервер.ИмяТекущегоЭлементаСхемыПоЕеДаннымВФорме(ЭтотОбъект);
	
	ТипЭлементаСхемы = СхемыПроцессовКлиент.ТипЭлементаСхемыПоДаннымСхемыВФорме(
		ИмяТекущегоЭлемента, ЭтотОбъект);
	
	Если Не СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлементаСхемы) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидДействия = ДанныеПараметров.НастройкиЭлементов[ИмяТекущегоЭлемента];
	НастройкаДействия = ЕдинственнаяНастройкаДействияПоВиду(ТекущийВидДействия);
	Если ЗначениеЗаполнено(НастройкаДействия) Тогда
		ПоказатьЗначение(, НастройкаДействия);
		Возврат;
	КонецЕсли;	
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидОбъектаОбработки", ВидОбъекта);
	ПараметрыОткрытия.Вставить("ВидДействия", ТекущийВидДействия);
	
	ПараметрыОткрытия.Вставить("ДействуетС", ДействуетС);
	ПараметрыОткрытия.Вставить("ДействуетПо", ДействуетПо);
	
	ОткрытьФорму("РегистрСведений.ПравилаОбработкиОбъектов.Форма.ПравилаОбработкиОбъектов",
		ПараметрыОткрытия,, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПоказатьПроверку(Отказ)
	
	Если ТолькоПросмотр Или Не ДоступноРедактированиеСхемыПроцесса(ДанныеПараметров) Тогда
		Возврат;
	КонецЕсли;	
		
	ОчиститьСообщения();
	
	РезультатПроверки = РезультатПроверкиКорректностиСхемы();
	ДанныеСхемы.РезультатПроверкиСхемы = РезультатПроверки.РезультатБазовойПроверкиСхемы; 

	Если Не ДанныеСхемы.РезультатПроверкиСхемы.НетОшибок 
		Или РезультатПроверки.ОшибкиНастроекСхемы.Количество() <> 0 Тогда

		ВывестиОшибки(РезультатПроверки);
	
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Закрыть'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОбработатьОтветНаВопросСхемаНекорректна", ЭтотОбъект),
			НСтр("ru = 'В схеме присутствуют ошибки. 
			|Запуск обработки по данной схеме будет невозможен.
			|
			|Закрыть схему?'"),
			Кнопки);
		Отказ = Истина;	
		Возврат;	
		
	КонецЕсли;	
		
КонецПроцедуры		

// Продолжение ПередЗакрытием.
//
&НаКлиенте
Процедура ОбработатьОтветНаВопросЗаписиИзмененийПередЗакрытием(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьСообщения();
		
		Отказ = Ложь;
		ПоказатьПроверку(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
				
		ЗаписатьСхемуПроцесса();
		Закрыть(ДанныеСхемы.Ссылка);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		// если мы решили не сохранять изменения в схеме, то тогда нет смысла еe проверять
		ДиалогПроОшибкиПоказан = Истина;
		Закрыть();
	Иначе
		// Не закрываем форму.
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ПередЗакрытием.
//
&НаКлиенте
Процедура ОбработатьОтветНаВопросСхемаНекорректна(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ДиалогПроОшибкиПоказан = Истина;
		ЗаписатьСхемуПроцесса();
		Закрыть(ДанныеСхемы.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСхемуПроцесса()
	
	ОчиститьСообщения();
	
	ЗаписатьСхемуПроцессаНаСервере();
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Изменение:'"),
		НавигационнаяСсылка,
		Заголовок,
		БиблиотекаКартинок.Информация32);
	
	ОповеститьОбИзменении(ДанныеСхемы.Ссылка);
	
	Если АвтоформируемаяСхемаПриОткрытии <> ДанныеПараметров.АвтоформируемаяСхема Тогда
		Оповестить("ИзмененаСхемаОбработки",
			Новый Структура("Схема, АвтоформируемаяСхема", 
			ДанныеПараметров.Ссылка, ДанныеПараметров.АвтоформируемаяСхема));
	КонецЕсли;
	
	Модифицированность = Ложь;
	АвтоформируемаяСхемаПриОткрытии = ДанныеПараметров.АвтоформируемаяСхема;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСхемуПроцессаНаСервере()
	
	УстановитьОформлениеЭлементамСхемы(
		ЭтотОбъект,
		ОписаниеВидовДействий(ДанныеПараметров),
		ГоризонтальноеПоложение.Центр,
		ВертикальноеПоложение.Центр,
		ОписаниеСкриптов(ДанныеПараметров));
	
	НачатьТранзакцию();
	Попытка
		СхемыПроцессовСервер.ЗаписатьСхемуИзФормы(ЭтотОбъект);
		ЗаписатьПараметрыСхемыИзФормы();
		
		РегистрыСведений.РезультатыПроверкиСхемДляОбработокОбъектов.УдалитьЗаписи(
			ДанныеПараметров.ВладелецСхемы);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ПоложениеОписания = ПоложениеОписанияВидовДействийДляОтображения(ДанныеПараметров);
	
	УстановитьОформлениеЭлементамСхемы(
		ЭтотОбъект,
		ОписаниеВидовДействийДляОтображения(ДанныеПараметров),
		ПоложениеОписания.ГоризонтальноеПоложение,
		ПоложениеОписания.ВертикальноеПоложение,
		ОписаниеСкриптов(ДанныеПараметров),
		РамкиЭлементовДляОтображения(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОбновлениеДанныхСхемы(РезультатОбработки, ДопПараметры) Экспорт
	
	ПодключитьОбработчикОжидания("ВосстановитьФокусТекущегоЭлементаСхемыПроцесса", 0.1, Истина);
	
	ОбновитьПараметрыПоИзменениямСхемы(
		РезультатОбработки.ДобавленныеЭлементы,
		РезультатОбработки.УдаленныеЭлементы);
	
	ПоложениеОписания = ПоложениеОписанияВидовДействийДляОтображения(ДанныеПараметров);
	
	УстановитьОформлениеЭлементамСхемы(
		ЭтотОбъект,
		ОписаниеВидовДействийДляОтображения(ДанныеПараметров),
		ПоложениеОписания.ГоризонтальноеПоложение,
		ПоложениеОписания.ВертикальноеПоложение,
		ОписаниеСкриптов(ДанныеПараметров),
		РамкиЭлементовДляОтображения(ЭтотОбъект));
	
	Если РезультатОбработки.ДобавленныеЭлементы.Количество() = 1
		И РезультатОбработки.УдаленныеЭлементы.Количество() = 0 Тогда
		
		ИмяЭлемента = РезультатОбработки.ДобавленныеЭлементы[0];
		
		ТипЭлемента = СхемыПроцессовКлиент.ТипЭлементаСхемыПоДаннымСхемыВФорме(
			ИмяЭлемента, ЭтотОбъект);
		
		Если СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлемента)
			Или СхемыПроцессовКлиентСервер.ЭтоСкриптСхемы(ТипЭлемента) Тогда
					
			НастроитьПараметрыЭлементаСхемы(ИмяЭлемента);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

 &НаКлиенте
Процедура ВосстановитьФокусТекущегоЭлементаСхемыПроцесса() Экспорт
	
	СхемыПроцессовКлиент.ВосстановитьТекущийЭлементПоДаннымСхемы(ЭтотОбъект);
		
КонецПроцедуры

&НаСервере
Функция ДоступенПросмотрСхемыПроцесса()
	
	Если Не ЗначениеЗаполнено(ДанныеПараметров.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПараметрыСхемДляОбработокОбъектов.Ссылка
		|ИЗ
		|	Справочник.ПараметрыСхемДляОбработокОбъектов КАК ПараметрыСхемДляОбработокОбъектов
		|ГДЕ
		|	ПараметрыСхемДляОбработокОбъектов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеПараметров.Ссылка);
	
	Возврат Не Запрос.Выполнить().Пустой();
				
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступноРедактированиеСхемыПроцесса(ДанныеПараметров)
	
	Если ДанныеПараметров.АвтоформируемаяСхема
		Или Не ДанныеПараметров.ИзменениеДоступно Тогда
		 
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура НастроитьДоступностьЭлементовУправленияСхемой()
	
	Если ТолькоПросмотр Тогда // Режим только просмотра.
	
		СхемыПроцессовСервер.НастроитьДоступностьРедактированияСхемы(ЭтотОбъект, Ложь);
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		
		Элементы.ГруппаИнфо.Видимость = Ложь;
		Элементы.УстановитьСтандартныеНастройки.Видимость = Ложь;
			
	Иначе
		
		ДоступноРедактирование = ДоступноРедактированиеСхемыПроцесса(ДанныеПараметров);
		СхемыПроцессовСервер.НастроитьДоступностьРедактированияСхемы(
			ЭтотОбъект, ДоступноРедактирование);
		
		ПоложениеКоманднойПанели = ?(ДоступноРедактирование,
			ПоложениеКоманднойПанелиФормы.Авто,
			ПоложениеКоманднойПанелиФормы.Нет);
			
		Элементы.ГруппаИнфо.Видимость =
			ДанныеПараметров.ИзменениеДоступно И Не ДоступноРедактирование; 
		
		Элементы.УстановитьСтандартныеНастройки.Видимость =
			ДанныеПараметров.ИзменениеДоступно И ДоступноРедактирование;
			
	КонецЕсли;
	
	Элементы.ПерейтиКВыполнениюДействия.Видимость = 
		ДанныеПараметров.ВозможенПереходКВыполнениюДействия;
	
	НастроитьДоступностьПереходаКВыполнениюДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьДоступностьПереходаКВыполнениюДействия(Форма)
	
	Доступность = Ложь;
	
	Если Форма.ДанныеПараметров.ВозможенПереходКВыполнениюДействия Тогда
		
		ИмяТекущегоЭлемента =
			СхемыПроцессовКлиентСервер.ИмяТекущегоЭлементаСхемыПоЕеДаннымВФорме(Форма);
		
		ТипЭлементаСхемы = СхемыПроцессовКлиентСервер.ТипЭлементаСхемыПоДаннымСхемыВФорме(
			ИмяТекущегоЭлемента, Форма);
		
		Доступность = СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлементаСхемы)
			И Форма.ДанныеПараметров.ТекущиеЭлементы[ИмяТекущегоЭлемента] = Неопределено;
		
	КонецЕсли;
	
	Форма.Элементы.ПерейтиКВыполнениюДействия.Доступность = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыСхемыВФорму(ПараметрыСхемы,
	ОбработкаОбъекта, Действия, ТекущиеЭлементы, ПройденныеЭлементы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПараметров = Новый Структура(
		"Ссылка,
		|Схема,
		|ИзменениеДоступно,
		|ВладелецСхемы,
		|ПометкаУдаления,
		|ВерсияДанных,
		|АвтоформируемаяСхема,
		|НастройкиЭлементов,
		|ДоступныеВидыДействий,
		|ТипыДоступныхВидовДействий,
		|ОписаниеВидовДействий,
		|ОписаниеСкриптов,
		|ОписаниеВидовДействийДляОтображения,
		|ОбъектОбработки,
		|ПараметрыВидаОбъекта,
		|ОбработкаОбъекта,
		|ВозможенПереходКВыполнениюДействия,
		|ЕстьАктивныеОбработки,
		|Действия,
		|ТекущиеЭлементы,
		|ПройденныеЭлементы");
		
	ДанныеПараметров.Ссылка = ПараметрыСхемы;
		
	ДанныеПараметровСхемы = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(ПараметрыСхемы);
	
	ДанныеПараметров.Схема = ДанныеПараметровСхемы.Схема;
	ДанныеПараметров.ВладелецСхемы = ДанныеПараметровСхемы.ВладелецСхемы;
	ДанныеПараметров.ПометкаУдаления = ДанныеПараметровСхемы.ПометкаУдаления;
	ДанныеПараметров.ВерсияДанных = ДанныеПараметровСхемы.ВерсияДанных;
	ДанныеПараметров.АвтоформируемаяСхема = ДанныеПараметровСхемы.АвтоформируемаяСхема;
	ДанныеПараметров.НастройкиЭлементов = ДанныеПараметровСхемы.НастройкиЭлементов;
	
	ДоступностьИзменения = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ДоступностьИзмененияПараметровСхемы(
		ДанныеПараметров.Ссылка);
	ДанныеПараметров.ИзменениеДоступно = (ДоступностьИзменения = "ИзменениеДоступно");
	
	ДанныеПараметров.ДоступныеВидыДействий = 
		РаботаСПроцессамиПоОбработкамОбъектов.ВидыДействийОбработкиОбъекта(
		ДанныеПараметров.ВладелецСхемы);
		
	ДанныеПараметров.ТипыДоступныхВидовДействий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ДанныеПараметров.ДоступныеВидыДействий, "Тип");
	
	ДанныеПараметров.ОписаниеСкриптов = Новый Соответствие();
	Для Каждого ИмяИНастройка Из ДанныеПараметров.НастройкиЭлементов Цикл
		Если ТипЗнч(ИмяИНастройка.Значение) = Тип("СправочникСсылка.СкриптыСхемДляОбработокОбъектов") Тогда
			ДанныеПараметров.ОписаниеСкриптов[ИмяИНастройка.Значение] = Строка(ИмяИНастройка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПараметров.ОписаниеВидовДействий = Новый Соответствие();
	Для Каждого ВидДействия Из ДанныеПараметров.ДоступныеВидыДействий Цикл
		ДанныеПараметров.ОписаниеВидовДействий[ВидДействия] = Строка(ВидДействия);
	КонецЦикла;	
	
	ДанныеПараметров.ОписаниеВидовДействийДляОтображения = Новый Соответствие();
	Если Действия <> Неопределено Тогда
		Для Каждого ВидИДействие Из Действия Цикл
			ДанныеПараметров.ОписаниеВидовДействийДляОтображения[ВидИДействие.Ключ] =
				ДействияСервер.ПредставлениеДействияСтрокой(ВидИДействие.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеПараметров.Действия = Действия;
	
	ДанныеПараметров.ЕстьАктивныеОбработки = Ложь;
	Если ЗначениеЗаполнено(ДанныеПараметров.ВладелецСхемы)
		И ТипЗнч(ДанныеПараметров.ВладелецСхемы) = Тип("СправочникСсылка.НастройкиОбработкиВидовОбъектов") Тогда
		
		ДанныеПараметров.ЕстьАктивныеОбработки = ЗначениеЗаполнено(
			РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаПоНастройке(
				ДанныеПараметров.ВладелецСхемы));
	КонецЕсли;
	
	ДанныеПараметров.ОбработкаОбъекта = ОбработкаОбъекта;
	ДанныеПараметров.ВозможенПереходКВыполнениюДействия = Ложь;
	Если ЗначениеЗаполнено(ДанныеПараметров.ОбработкаОбъекта) Тогда
		
		РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеПараметров.ОбработкаОбъекта, "Владелец, Состояние");
		
		ДанныеПараметров.ОбъектОбработки = РеквизитыОбработки.Владелец;
		
		Если ДанныеПараметров.ПараметрыВидаОбъекта = Неопределено Тогда
			ВидОбъекта = ДействияСервер.ВидОбъекта(ДанныеПараметров.ОбъектОбработки);
			ДанныеПараметров.ПараметрыВидаОбъекта = ДействияСервер.ПараметрыВидаОбъекта(ВидОбъекта);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		ДанныеПараметров.ВозможенПереходКВыполнениюДействия = 
			ОбработкиОбъектов.ВозможностьПереходаКВыполнениюДействия(
				ДанныеПараметров.ОбъектОбработки,
				ДанныеПараметров.ПараметрыВидаОбъекта,
				РеквизитыОбработки.Состояние);
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ТекущиеЭлементы <> Неопределено Тогда
		ДанныеПараметров.ТекущиеЭлементы = ТекущиеЭлементы;
	Иначе
		ДанныеПараметров.ТекущиеЭлементы = Новый Соответствие();
	КонецЕсли;
	
	Если ПройденныеЭлементы <> Неопределено Тогда
		ДанныеПараметров.ПройденныеЭлементы = ПройденныеЭлементы;
	Иначе
		ДанныеПараметров.ПройденныеЭлементы = Новый Соответствие();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПараметрыСхемыИзФормы()
	
	ДанныеПараметровСхемы = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.СтруктураДанныхПараметровСхемы();
	
	ДанныеПараметровСхемы.Схема = ДанныеПараметров.Схема;
	ДанныеПараметровСхемы.ПометкаУдаления = ДанныеПараметров.ПометкаУдаления;
	ДанныеПараметровСхемы.ВерсияДанных = ДанныеПараметров.ВерсияДанных;
	ДанныеПараметровСхемы.АвтоформируемаяСхема = ДанныеПараметров.АвтоформируемаяСхема;
	ДанныеПараметровСхемы.НастройкиЭлементов = ДанныеПараметров.НастройкиЭлементов;
	
	РезультатЗаписи = Справочники.ПараметрыСхемДляОбработокОбъектов.ЗаписатьДанныеПараметровСхемы(
		ДанныеПараметров.Ссылка, ДанныеПараметровСхемы);
		
	ДанныеПараметров.ВерсияДанных = РезультатЗаписи.ВерсияДанных;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСхемуСПараметрамиПоОбработкеОбъекта()
	
	ИменаЭлементов = РаботаСПроцессамиПоОбработкамОбъектов.ИменаЭлементовСхемыДляВидовДействий(
		ДанныеПараметров.ДоступныеВидыДействий);
		
	ОписаниеСхемы = РаботаСПроцессамиПоОбработкамОбъектов.ОписаниеСхемыИзВидовДействий(
		ДанныеПараметров.ДоступныеВидыДействий, ИменаЭлементов);
	
	ДанныеПараметров.НастройкиЭлементов = 
		РаботаСПроцессамиПоОбработкамОбъектов.ПараметрыЭлементовСхемыИзВидовДействий(
		ДанныеПараметров.ДоступныеВидыДействий, ИменаЭлементов);
		
	ДанныеПараметров.АвтоформируемаяСхема = Истина;
	
	НовыеДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПоОписаниюЭлементов(ОписаниеСхемы);	
	СхемыПроцессовСервер.УстановитьГрафическуюСхемуВФорму(НовыеДанныеСхемы.Схема, ЭтотОбъект);
	СхемыПроцессовСервер.УстановитьНастройкиСхемыВФорму(НовыеДанныеСхемы.Настройки, ЭтотОбъект);
	
	ЗаписатьСхемуПроцессаНаСервере();
	
	НастроитьДоступностьЭлементовУправленияСхемой();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыПоИзменениямСхемы(ДобавленныеЭлементы, УдаленныеЭлементы)
	
	// Удаляем параметры для исключенных элементов.	
	Для Каждого ИмяЭлемента Из УдаленныеЭлементы Цикл
		
		УдаляемаяНастройка = ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента];
		Если ТипЗнч(УдаляемаяНастройка) = Тип("СправочникСсылка.СкриптыСхемДляОбработокОбъектов") Тогда
			ДанныеПараметров.ОписаниеСкриптов.Удалить(УдаляемаяНастройка);
		КонецЕсли;
		
		ДанныеПараметров.НастройкиЭлементов.Удалить(ИмяЭлемента);
	КонецЦикла;
	
	// Добавляем параметры для новых элементов.
	ПустыеЗначенияПараметров = 
		РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.
		ПустыеЗначенияПараметровДляТиповЭлементовСхем();
		
	Для Каждого ИмяЭлемента Из ДобавленныеЭлементы Цикл
		
		ТипЭлемента = СхемыПроцессовКлиент.ТипЭлементаСхемыПоДаннымСхемыВФорме(
			ИмяЭлемента, ЭтотОбъект);
		
		ПустоеЗначениеПараметра = ПустыеЗначенияПараметров[ТипЭлемента];
			
		Если ПустоеЗначениеПараметра  = Неопределено
			Или ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента] <> Неопределено Тогда
		
			Продолжить;
		КонецЕсли; 
		
		ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента] =
			ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПустоеЗначениеПараметра);
		
	КонецЦикла;
	
	НормализоватьНастройкиУсловий();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыЭлементаСхемы(ИмяЭлемента)
	
	ТипЭлементаСхемы = СхемыПроцессовКлиент.ТипЭлементаСхемыПоДаннымСхемыВФорме(
		ИмяЭлемента, ЭтотОбъект);
		
	ПустыеЗначенияПараметров = 
		РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.
		ПустыеЗначенияПараметровДляТиповЭлементовСхем();
		
	Если ПустыеЗначенияПараметров[ТипЭлементаСхемы] = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяЭлемента", ИмяЭлемента);
	ДопПараметры.Вставить("ТипЭлемента", ТипЭлементаСхемы);
		
	ОбрабочикЗавершения = Новый ОписаниеОповещения(
		"ЗавершитьНастройкуЭлементаСхемы", ЭтотОбъект, ДопПараметры);
		
	Если СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлементаСхемы) Тогда
		
		ТекущийВидДействия = ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента];
		
		Если Элементы.Схема.ТолькоПросмотр Тогда
			
			ДействиеЭлемента = ДействиеСхемыПоВиду(ТекущийВидДействия);
			Если ЗначениеЗаполнено(ДействиеЭлемента) Тогда
				ДействияКлиент.ОткрытьКарточкуДействияПоДействию(ЭтотОбъект, ДействиеЭлемента);
			Иначе
				ПоказатьЗначение(, ТекущийВидДействия);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДоступныеВидыДействий", ДанныеПараметров.ДоступныеВидыДействий);
		ПараметрыФормы.Вставить("ТекущийВидДействия", ТекущийВидДействия);
		
		ПараметрыФормы.Вставить("Действия", ДанныеПараметров.Действия);
		
		ВидыДействийПривязанныеКСхеме = Новый Соответствие();
		Для Каждого НастройкаЭлемента Из ДанныеПараметров.НастройкиЭлементов Цикл
			Если НастройкаЭлемента.Значение = Неопределено
				Или НастройкаЭлемента.Ключ = ИмяЭлемента
				Или ТипЗнч(НастройкаЭлемента.Значение) <> Тип("СправочникСсылка.ВидыДействий") Тогда
				
				Продолжить;
			КонецЕсли;
			ВидыДействийПривязанныеКСхеме[НастройкаЭлемента.Значение] = НастройкаЭлемента.Ключ;
		КонецЦикла;
		ПараметрыФормы.Вставить("ВидыДействийПривязанныеКСхеме", ВидыДействийПривязанныеКСхеме);
				
		ОткрытьФорму(
			"ОбщаяФорма.ВыборВидаДляДействияСхемыОбработкиОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОбрабочикЗавершения);
			
	ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоСкриптСхемы(ТипЭлементаСхемы) Тогда
		
		ТекущийСкрипт = ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента];
		
		Если Элементы.Схема.ТолькоПросмотр Тогда
			ПоказатьЗначение(, ТекущийСкрипт);
			Возврат;
		КонецЕсли;
		
		Если Не СхемыПроцессовКлиентПовтИсп.ДоступнаНастройкаСкриптовВСхемахПроцессов() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Вам недоступна настройка скриптов.
				|Обратитесь к администратору.'"));
			Возврат;
		КонецЕсли;
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущийСкрипт);
		
		ОткрытьФорму(
			"Справочник.СкриптыСхемДляОбработокОбъектов.ФормаВыбора",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОбрабочикЗавершения);
		
	ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ТипЭлементаСхемы) Тогда 
		
		ПараметрыФормы = Новый Структура;
			
		ПараметрыФормы.Вставить("Описание",
			СхемыПроцессовКлиентСервер.ОписаниеЭлементаСхемыВФорме(ИмяЭлемента, ЭтотОбъект));
		
		ПараметрыФормы.Вставить("НастройкиУсловия",
			ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента]);
			
		ПараметрыФормы.Вставить("ВладелецСхемы", ДанныеПараметров.ВладелецСхемы);
		
		ПараметрыФормы.Вставить("ПредшествующиеДействия",
			ПредшествующиеДействияСНастройками(ИмяЭлемента));
		
		ПараметрыФормы.Вставить("ТолькоПросмотр", Элементы.Схема.ТолькоПросмотр);
		
		ОткрытьФорму(
			"ОбщаяФорма.НастройкаУсловияСхемыОбработкиОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОбрабочикЗавершения);
		
	КонецЕсли;
		
КонецПроцедуры

// Продолжение НастроитьПараметрыЭлементаСхемы.
//
&НаКлиенте
Процедура ЗавершитьНастройкуЭлементаСхемы(ЗначениеНастройки, ДопПараметры) Экспорт
	
	Если ЗначениеНастройки = Неопределено Или Элементы.Схема.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеОписания = ПоложениеОписанияВидовДействийДляОтображения(ДанныеПараметров);
	
	Если СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ДопПараметры.ТипЭлемента) Тогда 
				
		ПустыеЗначенияПараметров = 
			РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.
			ПустыеЗначенияПараметровДляТиповЭлементовСхем();
		
		ТипНастройки = ТипЗнч(ЗначениеНастройки);
		ПустоеЗначениеПараметра = ПустыеЗначенияПараметров[ДопПараметры.ТипЭлемента];
		
		Для Каждого КлючЗначение Из ДанныеПараметров.НастройкиЭлементов Цикл
			ИмяЭлемента = КлючЗначение.Ключ;
			НастройкаЭлемента = КлючЗначение.Значение;
			Если ТипЗнч(НастройкаЭлемента) <> ТипНастройки
				Или НастройкаЭлемента <> ЗначениеНастройки Тогда
				
				Продолжить;
			КонецЕсли;
			ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента] = ПустоеЗначениеПараметра;
			СхемыПроцессовКлиентСервер.УстановитьОписаниеЭлементуСхемы(ИмяЭлемента, ЭтотОбъект);
			Прервать;
		КонецЦикла;
		
		ДанныеПараметров.НастройкиЭлементов[ДопПараметры.ИмяЭлемента] = ЗначениеНастройки;
		
		УстановитьОформлениеЭлементамСхемы(
			ЭтотОбъект,
			ОписаниеВидовДействийДляОтображения(ДанныеПараметров),
			ПоложениеОписания.ГоризонтальноеПоложение,
			ПоложениеОписания.ВертикальноеПоложение,
			ОписаниеСкриптов(ДанныеПараметров),
			РамкиЭлементовДляОтображения(ЭтотОбъект));
		
		НормализоватьНастройкиУсловий();
					
	ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоСкриптСхемы(ДопПараметры.ТипЭлемента) Тогда  
		
		ДанныеПараметров.НастройкиЭлементов[ДопПараметры.ИмяЭлемента] = ЗначениеНастройки;
		ДанныеПараметров.ОписаниеСкриптов[ЗначениеНастройки] = Строка(ЗначениеНастройки);
		
		УстановитьОформлениеЭлементамСхемы(
			ЭтотОбъект,
			ОписаниеВидовДействийДляОтображения(ДанныеПараметров),
			ПоложениеОписания.ГоризонтальноеПоложение,
			ПоложениеОписания.ВертикальноеПоложение,
			ОписаниеСкриптов(ДанныеПараметров),
			РамкиЭлементовДляОтображения(ЭтотОбъект));
		
	ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ДопПараметры.ТипЭлемента) Тогда 
			
		ДанныеПараметров.НастройкиЭлементов[ДопПараметры.ИмяЭлемента] = 
			ЗначениеНастройки.НастройкиУсловия;
		
		СхемыПроцессовКлиентСервер.УстановитьОписаниеЭлементуСхемы(
			ДопПараметры.ИмяЭлемента,
			ЭтотОбъект,
			ЗначениеНастройки.Описание);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Продолжение ЗавершитьУстановкуСтандартныхНастроек.
//
&НаКлиенте
Процедура ЗавершитьУстановкуСтандартныхНастроек(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ЗаполнитьСхемуСПараметрамиПоОбработкеОбъекта();
		
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Изменение:'"),
		НавигационнаяСсылка,
		Заголовок,
		БиблиотекаКартинок.Информация32);
	
	ОповеститьОбИзменении(ДанныеСхемы.Ссылка);
		
	Если АвтоформируемаяСхемаПриОткрытии <> ДанныеПараметров.АвтоформируемаяСхема Тогда
		Оповестить("ИзмененаСхемаОбработки",
			Новый Структура("Схема, АвтоформируемаяСхема", 
			ДанныеПараметров.Ссылка, ДанныеПараметров.АвтоформируемаяСхема));
	КонецЕсли;
	
	АвтоформируемаяСхемаПриОткрытии = ДанныеПараметров.АвтоформируемаяСхема;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовок(Форма)
	
	Форма.Заголовок = СтрШаблон(НСтр("ru='%1 (схема обработки)'"),
		СхемыПроцессовКлиентСервер.НаименованиеСхемыПоДаннымВФорме(Форма));
	
КонецПроцедуры

&НаКлиенте
Функция ПредшествующиеДействияСНастройками(ИмяЭлемента)
	
	ПредшествующиеДействия = Новый Структура;
	
	ТипыПредшествующихЭлементов = Новый Соответствие();
	ТипыПредшествующихЭлементов.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Действие"),
		Истина);
		
	ИменаПредшествующихДействийСхемы = 
		СхемыПроцессовКлиентСервер.ИменаПредшествующихЭлементовСхемыВФорме(
		ИмяЭлемента, ТипыПредшествующихЭлементов, ЭтотОбъект);
		
	Для Каждого ИмяПредшественника Из ИменаПредшествующихДействийСхемы Цикл
		
		НастройкаЭлемента = ДанныеПараметров.НастройкиЭлементов[ИмяПредшественника];
		
		Если Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
			Продолжить	
		КонецЕсли;
		
		ПредшествующиеДействия.Вставить(ИмяПредшественника, НастройкаЭлемента);
		
	КонецЦикла;
	
	Возврат ПредшествующиеДействия; 
	
КонецФункции

&НаКлиенте
Процедура НормализоватьНастройкиУсловий()
	
	НастройкиДействийСхемы = Новый Соответствие();
	Для Каждого НастройкаЭлемента Из ДанныеПараметров.НастройкиЭлементов Цикл
		Если ТипЗнч(НастройкаЭлемента.Значение) = Тип("СправочникСсылка.ВидыДействий") Тогда
			НастройкиДействийСхемы[НастройкаЭлемента.Ключ] = НастройкаЭлемента.Значение;
		КонецЕсли;		
	КонецЦикла;
	
	ТипыПредшествующихЭлементов = Новый Соответствие();
	ТипыПредшествующихЭлементов.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Действие"),
		Истина);
	
	Для Каждого НастройкаЭлемента Из ДанныеПараметров.НастройкиЭлементов Цикл
		
		Если ТипЗнч(НастройкаЭлемента.Значение) <> Тип("НастройкиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ПредшествующиеДействия = Новый Массив;
				
		ИменаПредшествующихДействийСхемы = 
			СхемыПроцессовКлиентСервер.ИменаПредшествующихЭлементовСхемыВФорме(
			НастройкаЭлемента.Ключ, ТипыПредшествующихЭлементов, ЭтотОбъект);
			
		Для Каждого ИмяПредшественника Из ИменаПредшествующихДействийСхемы Цикл
			НастройкаДействия = ДанныеПараметров.НастройкиЭлементов[ИмяПредшественника];
			Если Не ЗначениеЗаполнено(НастройкаДействия) Тогда
				Продолжить	
			КонецЕсли;
			ПредшествующиеДействия.Добавить(ИмяПредшественника);
		КонецЦикла;
				
		РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.НормализоватьЭлементыОтбораНастройкиУсловия(
			НастройкаЭлемента.Значение.Отбор.Элементы,
			ПредшествующиеДействия,
			НастройкиДействийСхемы,
			ДанныеПараметров.ТипыДоступныхВидовДействий);	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеВидовДействий(ДанныеПараметров) 
		
	ОписаниеВидовДействий = Новый Соответствие();
	Для Каждого НастройкаЭлемента Из ДанныеПараметров.НастройкиЭлементов Цикл
		
		Если Не ЗначениеЗаполнено(НастройкаЭлемента.Значение)
			Или ТипЗнч(НастройкаЭлемента.Значение) <> Тип("СправочникСсылка.ВидыДействий") Тогда
			
			Продолжить;
		КонецЕсли;
		
		ОписаниеВидовДействий[НастройкаЭлемента.Ключ] =
			ДанныеПараметров.ОписаниеВидовДействий[НастройкаЭлемента.Значение];
		
	КонецЦикла;
	
	Возврат ОписаниеВидовДействий;
	
КонецФункции

&НаКлиенте
Функция ОбновитьОписаниеВидаДействяПриИзменении(ВидДействия)
	
	Если ДанныеПараметров.ОписаниеВидовДействий[ВидДействия] = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеПараметров.ОписаниеВидовДействий[ВидДействия] = Строка(ВидДействия);
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеВидовДействийДляОтображения(ДанныеПараметров) 
	
	Если Не ЗначениеЗаполнено(ДанныеПараметров.ОписаниеВидовДействийДляОтображения) Тогда
		Возврат ОписаниеВидовДействий(ДанныеПараметров);
	КонецЕсли;
	
	ОписаниеВидовДействий = Новый Соответствие();
	Для Каждого НастройкаЭлемента Из ДанныеПараметров.НастройкиЭлементов Цикл
		
		Если Не ЗначениеЗаполнено(НастройкаЭлемента.Значение)
			Или ТипЗнч(НастройкаЭлемента.Значение) <> Тип("СправочникСсылка.ВидыДействий") Тогда
			
			Продолжить;
		КонецЕсли;
		
		ОписаниеВидовДействий[НастройкаЭлемента.Ключ] =
			ДанныеПараметров.ОписаниеВидовДействийДляОтображения[НастройкаЭлемента.Значение];
		
	КонецЦикла;
	
	Возврат ОписаниеВидовДействий;
	
КонецФункции 

&НаКлиенте
Функция ОбновитьОписаниеВидаДействяДляОтображенияПриИзмененииДействия(Действие)
	
	Если ДанныеПараметров.Действия = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидДействия = Неопределено;
	Для Каждого ВидИДействие Из ДанныеПараметров.Действия Цикл
		Если ВидИДействие.Значение = Действие Тогда
			ВидДействия = ВидИДействие.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВидДействия = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеПараметров.ОписаниеВидовДействийДляОтображения[ВидДействия] =
		ДействияВызовСервера.ПредставлениеДействияСтрокой(Действие);
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоложениеОписанияВидовДействийДляОтображения(ДанныеПараметров)
	
	ПоложениеОписания = Новый Структура("ГоризонтальноеПоложение, ВертикальноеПоложение");
	
	ПоложениеОписания.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ПоложениеОписания.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Если ЗначениеЗаполнено(ДанныеПараметров.ОписаниеВидовДействийДляОтображения)  Тогда
		ПоложениеОписания.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		ПоложениеОписания.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	КонецЕсли;
	
	Возврат ПоложениеОписания;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеСкриптов(ДанныеПараметров) 
	
	ОписаниеСкриптов = Новый Соответствие();
	Для Каждого НастройкаЭлемента Из ДанныеПараметров.НастройкиЭлементов Цикл
		
		Если Не ЗначениеЗаполнено(НастройкаЭлемента.Значение)
			Или ТипЗнч(НастройкаЭлемента.Значение) <> Тип("СправочникСсылка.СкриптыСхемДляОбработокОбъектов") Тогда
			
			Продолжить;
		КонецЕсли;
		
		ОписаниеСкриптов[НастройкаЭлемента.Ключ] =
			ДанныеПараметров.ОписаниеСкриптов[НастройкаЭлемента.Значение];
		
	КонецЦикла;
	
	Возврат ОписаниеСкриптов;
	
КонецФункции

&НаКлиенте
Функция ОбновитьОписаниеСкриптаПриИзменении(Скирпт)
	
	Если ДанныеПараметров.ОписаниеСкриптов[Скирпт] = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеПараметров.ОписаниеСкриптов[Скирпт] = Строка(Скирпт);
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РамкиЭлементовДляОтображения(Форма)
	
	РамкиЭлементов = Новый Соответствие();
	
	ТипыВсехЭлементов = СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемыВФорме(Форма);
	
	Если Форма.ДанныеПараметров.ТекущиеЭлементы.Количество() = 0
		И Форма.ДанныеПараметров.ПройденныеЭлементы.Количество() = 0
		И ЗначениеЗаполнено(Форма.ДанныеПараметров.ОбработкаОбъекта) Тогда
		
		Для Каждого ИмяИТипЭлемента Из ТипыВсехЭлементов Цикл
			
			Если ИмяИТипЭлемента.Значение = ПредопределенноеЗначение(
				"Перечисление.ТипыЭлементовСхемПроцессов.Старт") Тогда
				
				РамкиЭлементов[ИмяИТипЭлемента.Ключ] = 
					СхемыПроцессовКлиентСервер.ЛинияРамкиТекущегоЭлемента();
			Иначе
				РамкиЭлементов[ИмяИТипЭлемента.Ключ] = 
					СхемыПроцессовКлиентСервер.ЛинияРамкиНеПройденногоЭлемента();
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
	
		Для Каждого ИмяИТипЭлемента Из ТипыВсехЭлементов Цикл
			
			Если Форма.ДанныеПараметров.ТекущиеЭлементы[ИмяИТипЭлемента.Ключ] = Истина Тогда
				РамкиЭлементов[ИмяИТипЭлемента.Ключ] = 
					СхемыПроцессовКлиентСервер.ЛинияРамкиТекущегоЭлемента();
			ИначеЕсли Форма.ДанныеПараметров.ПройденныеЭлементы[ИмяИТипЭлемента.Ключ] = Истина Тогда
				РамкиЭлементов[ИмяИТипЭлемента.Ключ] = 
					СхемыПроцессовКлиентСервер.ЛинияРамкиПройденногоЭлемента();
			Иначе
				РамкиЭлементов[ИмяИТипЭлемента.Ключ] = 
					СхемыПроцессовКлиентСервер.ЛинияРамкиНеПройденногоЭлемента();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РамкиЭлементов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеЭлементамСхемы(Форма,
	ОписаниеДействий, ГоризонтальноеПоложениеОписания, ВертикальноеПоложениеОписания,
	ОписаниеСкриптов,
	РамкиЭлементов = Неопределено)
	
	Схема = СхемыПроцессовКлиентСервер.ГрафическаяСхемаВФорме(Форма);
	
	ТипыВсехЭлементов = СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемыВФорме(Форма);
	
	Для Каждого ИмяИТипЭлемента Из ТипыВсехЭлементов Цикл
		
		Если СхемыПроцессовКлиентСервер.ЭтоДекоративнаяЛинияСхемы(ИмяИТипЭлемента.Значение)
			Или СхемыПроцессовКлиентСервер.ЭтоДекорацияСхемы(ИмяИТипЭлемента.Значение) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПараметрыОформления = СхемыПроцессовКлиентСервер.ПараметрыОформленияЭлементаСхемы();
		
		ОписаниеДействия = ОписаниеДействий[ИмяИТипЭлемента.Ключ];
		ОписаниеСкрипта = ОписаниеСкриптов[ИмяИТипЭлемента.Ключ];
		
		Если ОписаниеДействия <> Неопределено Тогда
			ПараметрыОформления.ОписаниеЭлемента = ОписаниеДействия;
			ПараметрыОформления.ГоризонтальноеПоложение = ГоризонтальноеПоложениеОписания;
			ПараметрыОформления.ВертикальноеПоложение = ВертикальноеПоложениеОписания;
		ИначеЕсли ОписаниеСкрипта <> Неопределено Тогда
			ПараметрыОформления.ОписаниеЭлемента = ОписаниеСкрипта;
		Иначе
			ПараметрыОформления.ОписаниеЭлемента = 
				СхемыПроцессовКлиентСервер.ОписаниеЭлементаСхемы(ИмяИТипЭлемента.Ключ, Схема);
		КонецЕсли;
		
		Если РамкиЭлементов <> Неопределено Тогда
			ПараметрыОформления.Рамка = РамкиЭлементов[ИмяИТипЭлемента.Ключ];
		КонецЕсли;
		
		СхемыПроцессовКлиентСервер.УстановитьОформлениеЭлементуСхемы(
			Схема,
			ИмяИТипЭлемента.Ключ,
			ПараметрыОформления);
		
	КонецЦикла;
	
	СхемыПроцессовКлиентСервер.ОбновитьВыделениеСоединительныхЛиний(Схема)
	
КонецПроцедуры

&НаКлиенте
Функция ДействиеСхемыПоВиду(ВидДействия)
	
	Если ДанныеПараметров.Действия = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеПараметров.Действия[ВидДействия];
	
КонецФункции

&НаСервере
Процедура ОбновитьСхемуПослеПереходаКВыполнениюДействия()
	
	ПараметрыОткрытия =
		РаботаСПроцессамиПоОбработкамОбъектовВызовСервера.ПараметрыОтрытияСхемыОбработкиДляОбъекта(
		ДанныеПараметров.ОбъектОбработки);
	
	ПрочитатьПараметрыСхемыВФорму(
		ПараметрыОткрытия.ПараметрыСхемы.ПараметрыСхемы,
		ПараметрыОткрытия.ОбработкаОбъекта,
		ПараметрыОткрытия.Действия,
		ПараметрыОткрытия.ТекущиеЭлементы,
		ПараметрыОткрытия.ПройденныеЭлементы);
		
	ПоложениеОписания = ПоложениеОписанияВидовДействийДляОтображения(ДанныеПараметров);
		
	УстановитьОформлениеЭлементамСхемы(
		ЭтотОбъект,
		ОписаниеВидовДействийДляОтображения(ДанныеПараметров),
		ПоложениеОписания.ГоризонтальноеПоложение,
		ПоложениеОписания.ВертикальноеПоложение,
		ОписаниеСкриптов(ДанныеПараметров),
		РамкиЭлементовДляОтображения(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Функция ЕдинственнаяНастройкаДействияПоВиду(ТекущийВидДействия)
	
	ПараметрыВидаОбъекта = ДействияСервер.ПараметрыВидаОбъекта(ВидОбъекта);
	
	КлючНастройки = РегистрыСведений.ПравилаОбработкиОбъектов.НовыйКлючНастройки();
	КлючНастройки.ВидОбъекта = ПараметрыВидаОбъекта.ВидОбъекта;
	
	ДатаОбработки = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(ДействуетС) Тогда
		ДатаОбработки = ДействуетС;
	ИначеЕсли ЗначениеЗаполнено(ДействуетПо) Тогда
		ДатаОбработки = ДействуетПо;
	КонецЕсли;
	
	КлючНастройки.ДатаОбработки = ДатаОбработки;
	
	КоличествоПравил = РегистрыСведений.ПравилаОбработкиОбъектов.КоличествоПравилОбработки(ВидОбъекта, ДатаОбработки);
	
	Если КоличествоПравил = 1 Тогда
		
		ВидыДействийНастройки = РегистрыСведений.ПравилаОбработкиОбъектов.НастройкиПоКлючу(КлючНастройки);
		
		Строка = ВидыДействийНастройки.Найти(ТекущийВидДействия, "ВидДействия");
		Если Строка <> Неопределено Тогда
			Возврат Строка.Настройка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти