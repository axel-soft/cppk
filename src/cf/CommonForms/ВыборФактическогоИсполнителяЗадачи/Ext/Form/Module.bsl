
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("ДействияЗадач") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Данные = РаботаСЗадачами.ДанныеДляВыбораФактическогоИсполнителя(Параметры.ДействияЗадач);
	АдресатыЗадачи.Загрузить(Данные.АдресатыЗадачи);
	ФактическиеИсполнители.Загрузить(Данные.ФактическиеИсполнители);
	
	ЕстьАдресаты = АдресатыЗадачи.Количество() > 1;
	ЕстьФактИсполнители = ФактическиеИсполнители.Количество() > 1;
	Элементы.ГруппаАдресаты.Видимость = ЕстьАдресаты;
	Элементы.ГруппаФактическийИсполнитель.Видимость = ЕстьФактИсполнители;
	
	Если ЕстьАдресаты И ЕстьФактИсполнители Тогда
		Заголовок = НСтр("ru = 'Выбор фактического исполнителя и сотрудника, за которого выполняется задача'");
		СтандартныеПодсистемыСервер.УстановитьКлючНазначенияФормы(ЭтотОбъект, "ПланФакт");
	ИначеЕсли ЕстьАдресаты Тогда
		Заголовок = НСтр("ru = 'Выбор сотрудника, за которого выполняется задача'");
		СтандартныеПодсистемыСервер.УстановитьКлючНазначенияФормы(ЭтотОбъект, "План");
		Элементы.ДекорацияПояснение1.Заголовок = НСтр("ru = 'Укажите сотрудника:'");
	Иначе
		Заголовок = НСтр("ru = 'Выбор фактического исполнителя задачи'");
		СтандартныеПодсистемыСервер.УстановитьКлючНазначенияФормы(ЭтотОбъект, "Факт");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АдресатыЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Выбрать(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийИсполнительВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Выбрать(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Адресат", Неопределено);
	СтруктураВозврата.Вставить("ЭтоЗамещающий", Ложь); 
	СтруктураВозврата.Вставить("Сотрудник", Неопределено);
	
	Если ЕстьАдресаты Тогда
		ТекущиеАдресаты = Элементы.АдресатыЗадачи.ТекущиеДанные;
		Если ТекущиеАдресаты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураВозврата.Вставить("Адресат", ТекущиеАдресаты.Адресат);
		СтруктураВозврата.Вставить("ЭтоЗамещающий", ТекущиеАдресаты.ЭтоЗамещающий);
		
	ИначеЕсли АдресатыЗадачи.Количество() > 0 
		И ЗначениеЗаполнено(АдресатыЗадачи[0].Адресат) Тогда
		СтруктураВозврата.Вставить("Адресат", АдресатыЗадачи[0].Адресат);
		СтруктураВозврата.Вставить("ЭтоЗамещающий", АдресатыЗадачи[0].ЭтоЗамещающий);
			
	КонецЕсли;
	
	Если ЕстьФактИсполнители Тогда
		ТекущийИсполнитель = Элементы.ФактическийИсполнитель.ТекущиеДанные;
		Если ТекущийИсполнитель = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийИсполнитель.Сотрудник) Тогда
			СтруктураВозврата.Вставить("Сотрудник", ТекущийИсполнитель.Сотрудник);
		КонецЕсли;
	
	ИначеЕсли ЗначениеЗаполнено(ФактическиеИсполнители[0].Сотрудник) Тогда
		СтруктураВозврата.Вставить("Сотрудник", ФактическиеИсполнители[0].Сотрудник);				
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураВозврата.Сотрудник) Тогда		
		СтруктураВозврата.Вставить("Сотрудник", СтруктураВозврата.Адресат);
	КонецЕсли;
	
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

	#Область СлужебныеПроцедурыИФункции_НагрузочноеТестирование
		
		&НаКлиенте
		Функция НТ_Выбрать() Экспорт
			
			Выбрать(Неопределено); //@skip-check invocation-form-event-handler
			Возврат Истина;
			
		КонецФункции
		
	#КонецОбласти

#КонецОбласти