
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Список.Параметры.УстановитьЗначениеПараметра("ВестиУчетСканКопийОригиналовДокументов", 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов"));
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	//Для НомерЖурнала = 1 По 3 Цикл
	//	Стр = ВидыЖурналов.Добавить();
	//	Стр.ВидЖурнала = ПредопределенноеЗначение("Перечисление.ТТС_ВидыЖурналовТУ.Журнал"+НомерЖурнала);
	//КонецЦикла;
	
	ЭлементыВидыЖурналов = ВидыЖурналов.ПолучитьЭлементы();
	Элемент = ЭлементыВидыЖурналов.Добавить();
	Элемент.Представление = "<Все виды>";
	
	ЭлементыВсеВиды = Элемент.ПолучитьЭлементы();

	Элемент = ЭлементыВсеВиды.Добавить();
	Элемент.ВидЖурнала = Перечисления.ТТС_ВидыЖурналовТУ.Журнал1;
	Элемент.Представление =	Элемент.ВидЖурнала;
	
	Элемент = ЭлементыВсеВиды.Добавить();
	Элемент.ВидЖурнала = Перечисления.ТТС_ВидыЖурналовТУ.Журнал2;
	Элемент.Представление =	Элемент.ВидЖурнала;
	
	Элемент = ЭлементыВсеВиды.Добавить();
	Элемент.ВидЖурнала = Перечисления.ТТС_ВидыЖурналовТУ.Журнал3;
	Элемент.Представление = Элемент.ВидЖурнала;	

	УстановитьОграничениеДинамическогоСписка("Ссылка,ДатаСортировки,ПометкаУдаления");  
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессСогласование(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Согласование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессУтверждение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Утверждение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРегистрация(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Регистрация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРассмотрение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Рассмотрение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Исполнение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Ознакомление");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	ТипыОпераций = Новый Массив;
	ТипыОпераций.Добавить("ОбработкаВнутреннегоДокумента");
	ТипыОпераций.Добавить("КомплексныйПроцесс");
	
	ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций)
	
	ВыделенныеСтроки = Новый Массив;
	
	Для Каждого СтрСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		ВыделенныеСтроки.Добавить(Элементы.Список.ДанныеСтроки(СтрСписка).Ссылка);
	КонецЦикла;
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		ТипыОпераций, ВыделенныеСтроки, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчеты(Команда)
		
	Раздел = ПредопределенноеЗначение("Перечисление.РазделыОтчетов.ДокументыПредприятияСписок");

	ЗаголовокФормы = НСтр("ru = 'Отчеты по журналам ТУ'");
	
	РазделГипперСсылка = НастройкиВариантовОтчетовДокументооборот.ПолучитьРазделОтчетаПоИмени("ЖурналыТУ");
		
	ПараметрыФормы = Новый Структура("Раздел, ЗаголовокФормы, НеОтображатьИерархию, РазделГипперСсылка, СписокКатегорий", 
		Раздел, ЗаголовокФормы, Истина, РазделГипперСсылка, Новый СписокЗначений);
		
	ПараметрыФормы.СписокКатегорий.Добавить(ПредопределенноеЗначение("Справочник.КатегорииОтчетов.ТТС_ПоЖурналамТУ"));
	
	ОткрытьФорму(
		"Обработка.ВсеОтчеты.Форма.ФормаПоКатегориям",
		ПараметрыФормы,
		ЭтаФорма, 
		"ДокументыПредприятияСписок");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
	
	// период 
	ПериодВыборки = ПараметрыОтбора.Получить("ПериодВыборки");
	Если ПериодВыборки <> Неопределено Тогда 
		
		ЭлементыОтбора = Список.Отбор.Элементы;
		
		ЭлементОтбораДанных = Неопределено;
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Представление = НСтр("ru = 'ОтборПериод'") Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПериодВыборки) Тогда 
			
			Если ЭлементОтбораДанных = Неопределено Тогда
				ГруппаОтборПериод = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтборПериод.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 
				ГруппаОтборПериод.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
				ГруппаОтборПериод.Использование = Истина;
				ГруппаОтборПериод.Представление = НСтр("ru = 'ОтборПериод'");
			Иначе
				ГруппаОтборПериод = ЭлементОтбораДанных;
				ГруппаОтборПериод.Элементы.Очистить();
				ГруппаОтборПериод.Использование = Истина;
			КонецЕсли;	
			
			ГруппаДатаСортировки = ГруппаОтборПериод.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаДатаСортировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
			ГруппаДатаСортировки.Использование = Истина;
			
			Если ЗначениеЗаполнено(ПериодВыборки.ДатаНачала) Тогда 
				ЭлементОтбораДанных = ГруппаДатаСортировки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСортировки");
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаНачала;
				ЭлементОтбораДанных.Использование = Истина;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ПериодВыборки.ДатаОкончания) Тогда 
				ЭлементОтбораДанных = ГруппаДатаСортировки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСортировки");
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаОкончания;
				ЭлементОтбораДанных.Использование = Истина;
			КонецЕсли;
			
			Если ГруппаДатаСортировки.Элементы.Количество() = 0 Тогда 
				ГруппаОтборПериод.Элементы.Удалить(ГруппаДатаСортировки);
			КонецЕсли;
			
		Иначе
			
			Если ЭлементОтбораДанных <> Неопределено Тогда
				ГруппаОтборПериод = ЭлементОтбораДанных;
				ГруппаОтборПериод.Элементы.Очистить();
				ГруппаОтборПериод.Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	// вид документа 
	ВидЖурнала = ПараметрыОтбора.Получить("ВидЖурнала");
	Если ВидЖурнала <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(ВидЖурнала) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"ВидЖурналаТУ");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"ВидЖурналаТУ",
				ВидЖурнала,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	
	// техник
	ТехникПоРасшифровке = ПараметрыОтбора.Получить("ТехникПоРасшифровке");
	Если ТехникПоРасшифровке <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(ТехникПоРасшифровке) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"ТехникПоРасшифровке");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"ТехникПоРасшифровке",
				ТехникПоРасшифровке,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	
	// расшифровщик
	Расшифровал = ПараметрыОтбора.Получить("Расшифровал");
	Если Расшифровал <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Расшифровал) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"Расшифровал");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Расшифровал",
				Расшифровал,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	
	// Машинист
	Машинист = ПараметрыОтбора.Получить("Машинист");
	Если Машинист <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Машинист) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"Машинист");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Машинист",
				Машинист,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	
	// Направление
	Направление = ПараметрыОтбора.Получить("Направление");
	Если Направление <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Направление) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"Направление");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Направление",
				Направление,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	
	// Станция отправления
	СтанцияОтправления = ПараметрыОтбора.Получить("СтанцияОтправления");
	Если СтанцияОтправления <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(СтанцияОтправления) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"СтанцияОтправления");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"СтанцияОтправления",
				СтанцияОтправления,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	
	// Конечная станция
	КонечнаяСтанция = ПараметрыОтбора.Получить("КонечнаяСтанция");
	Если КонечнаяСтанция <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(КонечнаяСтанция) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"КонечнаяСтанция");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"КонечнаяСтанция",
				КонечнаяСтанция,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	
	// Станция нарушения
	СтанцияНарушения = ПараметрыОтбора.Получить("СтанцияНарушения");
	Если СтанцияНарушения <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(СтанцияНарушения) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"СтанцияНарушения");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"СтанцияНарушения",
				СтанцияНарушения,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	
	// Код нарушения
	КодНарушения = ПараметрыОтбора.Получить("КодНарушения");
	Если КодНарушения <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(КодНарушения) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"КодНарушения");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"КодНарушения",
				КодНарушения,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыборкиПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("ПериодВыборки", ПериодВыборки);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ПериодВыборки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЖурналаПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("ВидЖурнала", ВидЖурнала);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ВидЖурнала);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТехникПоРасшифровкеПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("ТехникПоРасшифровке", ТехникПодотовил);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ТехникПодотовил);

КонецПроцедуры

&НаКлиенте
Процедура ОтборРасшифровалПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Расшифровал", ТехникРасшифровал);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ТехникРасшифровал);

КонецПроцедуры

&НаКлиенте
Процедура ОтборМашинистПриИзменении(Элемент)
	
	//Если Машинист.Пустая() Тогда
	//	Список.Параметры.Элементы.Найти("Машинист").Использование = Ложь;
	//Иначе
	//	Список.Параметры.УстановитьЗначениеПараметра("Машинист" ,Машинист);		
	//КонецЕсли;	
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Машинист", Машинист);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Машинист);

КонецПроцедуры

&НаКлиенте
Процедура ОтборНаправлениеПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Направление", Направление);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКодНарушенияПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("КодНарушения", КодНарушения);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, КодНарушения);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	СоздатьНовыйДокумент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокумент(Копирование)
	
	ПараметрыФормы = Новый Структура;
	ШаблонЖТУ1 = ТТС_ЖурналыТУВызовСервера.ПолучитьШаблонЖТУ("ЖТУ1");
	Если НЕ ЗначениеЗаполнено(ШаблонЖТУ1) Тогда
		ПоказатьПредупреждение( ,НСтр("ru = 'Не найден шаблон журнала ТУ-133 №1'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ШаблонДокумента", ШаблонЖТУ1);
	
	Открытьформу("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыФормы, Элементы.Список, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокументПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	КлючеваяОперация = "ВнутренниеДокументыВыполнениеКомандыСоздать";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	ПараметрыФормы = Новый Структура;
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат);
	Иначе
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат.ШаблонДокумента);
	КонецЕсли;
	
	Открытьформу("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыФормы, Элементы.Список, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДоступныеШаблоныДокументов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
	|ГДЕ
	|	НЕ ШаблоныДокументов.ПометкаУдаления
	|	И ШаблоныДокументов.ВидДокумента.ТТС_ЯвляетсяЖурналомТУ";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.Файлы Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуФайлы", ТекущиеДанные.Ссылка, Истина);
		ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.Задачи Тогда
		ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
			Новый Структура("Предмет", ТекущиеДанные.Ссылка),
			ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.СостояниеКонтроля Тогда
		КонтрольКлиент.ОбработкаКомандыКонтроль(ТекущиеДанные.Ссылка, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьНовыйДокумент(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСоСпискамиДокументовКлиент.ВыполнитьУстановкуПометкиУдаления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	#Если Не ВебКлиент Тогда
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.Фильтр = РаботаСФайламиКлиент.ПолучитьФильтрДляДиалогаВыбораФайла();
		ДиалогОткрытияФайла.МножественныйВыбор = Истина;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файлы'");
		
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ВладелецДокумента = Неопределено;
			СписокКатегорий = Новый Массив;
			
			ПараметрыИмпорта = Новый Структура;
			ПараметрыИмпорта.Вставить("Папка", ВладелецДокумента);
			ПараметрыИмпорта.Вставить("Файлы", ДиалогОткрытияФайла.ВыбранныеФайлы);
			ПараметрыИмпорта.Вставить("СписокКатегорий", СписокКатегорий);
			
			ОткрытьФорму("Справочник.ДокументыПредприятия.Форма.ФормаИмпортаФайлов", ПараметрыИмпорта, Элементы.Список);
		КонецЕсли;
	#Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте импорт файлов не поддерживается.'"));
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ВидыЖурналовПриАктивизацииСтроки(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("ВидЖурнала", Элемент.ТекущиеДанные.ВидЖурнала);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	Элементы.ОтборКодНарушения.Доступность = НЕ Элемент.ТекущиеДанные.ВидЖурнала = ПредопределенноеЗначение("Перечисление.ТТС_ВидыЖурналовТУ.Журнал1");

КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерПоездаПриИзменении(Элемент)
	Если НомерПоезда = "" Тогда
		Список.Параметры.Элементы.Найти("НомерПоезда").Использование = Ложь;
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("НомерПоезда", "%" + НомерПоезда + "%");		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерЛокомотиваПриИзменении(Элемент)
	Если НомерЛокомотива = "" Тогда
		Список.Параметры.Элементы.Найти("НомерЛокомотива").Использование = Ложь;
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("НомерЛокомотива", НомерЛокомотива);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСерияЛокомотиваПриИзменении(Элемент)
	Если СерияЛокомотива.Пустая() Тогда
		Список.Параметры.Элементы.Найти("СерияЛокомотива").Использование = Ложь;
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("СерияЛокомотива", СерияЛокомотива);		
	КонецЕсли;
КонецПроцедуры


Процедура УстановитьОграничениеДинамическогоСписка(РазрешенныеПоляСписком) Экспорт
	
	РазрешенныеПоля = СтрРазделить(РазрешенныеПоляСписком, ",");
	
	НастройкиСписка = Список.КомпоновщикНастроек.ПолучитьНастройки();
	
	Для Каждого ЭлементНастроек Из НастройкиСписка.УсловноеОформление.Элементы Цикл
		Для Каждого ЭлементОтбора Из ЭлементНастроек.Отбор.Элементы Цикл
			РазрешенныеПоля.Добавить(Строка(ЭлементОтбора.ЛевоеЗначение));
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементНастроек Из НастройкиСписка.Отбор.Элементы Цикл

		РазрешенныеПоля.Добавить(Строка(ЭлементНастроек.ЛевоеЗначение));

	КонецЦикла;
	
	Для Каждого ЭлементНастроек Из НастройкиСписка.Порядок.Элементы Цикл

		РазрешенныеПоля.Добавить(Строка(ЭлементНастроек.Поле));

	КонецЦикла;
	
	Для каждого ПолеСписка Из Список.Поля Цикл
		
		Если Не РазрешенныеПоля.Найти(ПолеСписка.Поле) = Неопределено Тогда
			Продолжить;            
		КонецЕсли;
		
		Если ТипЗнч(ПолеСписка) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
			Продолжить;    
		КонецЕсли;         
		
		ПолеСписка.ОграничениеИспользования.Группировка  = Истина;
		ПолеСписка.ОграничениеИспользования.Порядок = Истина;
		ПолеСписка.ОграничениеИспользования.Условие = Истина;          
	   
	КонецЦикла; 
	
КонецПроцедуры

