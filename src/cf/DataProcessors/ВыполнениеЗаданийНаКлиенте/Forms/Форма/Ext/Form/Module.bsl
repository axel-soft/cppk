#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не РольДоступна("ВыполнениеЗаданийНаКлиенте")
		И Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Отказ = Истина;
		Сообщить(НСтр("ru = 'У вас нет прав на открытие этой обработки'"));
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнтервалВыполненияЗаданийНаКлиенте = Константы.ИнтервалВыполненияЗаданийНаКлиенте.Получить();
	РазмерПорцииЗаданийДляВыполненияНаКлиенте = Константы.РазмерПорцииЗаданийДляВыполненияНаКлиенте.Получить();
	
	ПоследняяАктивностьОбработчикаЗаданийНаКлиенте = Константы.ПоследняяАктивностьОбработчикаЗаданийНаКлиенте.Получить();
	
	ВыполнятьЗаданияНаКлиенте = Константы.ВыполнятьЗаданияНаКлиенте.Получить();
	
	Элементы.ФормаСтарт.Видимость = Не ВыполнятьЗаданияНаКлиенте;
	Элементы.ФормаСтоп.Видимость = ВыполнятьЗаданияНаКлиенте;  
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		
		Элементы.ФормаСтарт.Видимость = Ложь;// нельзя включить или выключить, если КОД - всегда включено
		Элементы.ФормаСтоп.Видимость = Ложь;  
		
	КонецЕсли;	
	
	Если ВыполнятьЗаданияНаКлиенте Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Выполнение заданий (клиент, включено)'");
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru = 'Выполнение заданий (клиент, отключено)'");
	КонецЕсли;	 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКОД")
		И НЕ КОДСервер.ЭтоЦентральныйУзел() Тогда
			
		ЭтоПодчиненныйУзел = Истина;
			
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Или МобильныйКлиент Тогда
		Отказ = Истина;
		Сообщить(НСтр("ru = 'Обработка должна быть запущена в тонком клиенте под Windows.'"));
		Возврат;
	#КонецЕсли	

	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		Отказ = Истина;
		Сообщить(НСтр("ru = 'Обработка должна быть запущена в тонком клиенте под Windows.'"));
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПоследняяАктивностьОбработчикаЗаданийНаКлиенте) Тогда
		ПоследняяАктивностьОбработчикаЗаданийНаКлиентеМестноеВремя = МестноеВремя(ПоследняяАктивностьОбработчикаЗаданийНаКлиенте);
	Иначе	
		ПоследняяАктивностьОбработчикаЗаданийНаКлиентеМестноеВремя = ПоследняяАктивностьОбработчикаЗаданийНаКлиенте;
	КонецЕсли;	
	
	// тут включим обработчик ожидания, если ВыполнятьЗаданияНаКлиенте
	Если ВыполнятьЗаданияНаКлиенте Тогда
		ПодключитьОбработчикОжидания("ВыполнитьОбработкуЗаданийПорция", ИнтервалВыполненияЗаданийНаКлиенте);
	КонецЕсли;	 
	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура РазмерПорцииЗаданийДляВыполненияНаКлиентеПриИзменении(Элемент)
	ЗаписатьНастройки(ИнтервалВыполненияЗаданийНаКлиенте, РазмерПорцииЗаданийДляВыполненияНаКлиенте);
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВыполненияЗаданийНаКлиентеПриИзменении(Элемент)
	
	ЗаписатьНастройки(ИнтервалВыполненияЗаданийНаКлиенте, РазмерПорцииЗаданийДляВыполненияНаКлиенте);
	
	Если ВыполнятьЗаданияНаКлиенте Тогда
		ОтключитьОбработчикОжидания("ВыполнитьОбработкуЗаданийПорция");
		ПодключитьОбработчикОжидания("ВыполнитьОбработкуЗаданийПорция", ИнтервалВыполненияЗаданийНаКлиенте);
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНастройки(
	ИнтервалВыполненияЗаданийНаКлиенте, 
	РазмерПорцииЗаданийДляВыполненияНаКлиенте)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИнтервалВыполненияЗаданийНаКлиенте.Установить(ИнтервалВыполненияЗаданийНаКлиенте);
	Константы.РазмерПорцииЗаданийДляВыполненияНаКлиенте.Установить(РазмерПорцииЗаданийДляВыполненияНаКлиенте);
	
КонецПроцедуры

&НаКлиенте
Процедура Старт(Команда)
	
	Если ЭтоПодчиненныйУзел Тогда
		ПоказатьПредупреждение(, НСТр("ru = 'Эту настройку можно поменять только в центральном узле'"));
		Возврат;
	КонецЕсли;	
	
	ВыполнятьЗаданияНаКлиенте = Истина;
	ЗаписатьНастройкуВыполнятьЗаданияНаКлиенте(ВыполнятьЗаданияНаКлиенте);
	
	ПодключитьОбработчикОжидания("ВыполнитьОбработкуЗаданийПорция", ИнтервалВыполненияЗаданийНаКлиенте);
	
	Элементы.ФормаСтарт.Видимость = Ложь;
	Элементы.ФормаСтоп.Видимость = Истина;
	
	ЭтаФорма.Заголовок = НСтр("ru = 'Выполнение заданий (клиент, включено)'");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНастройкуВыполнятьЗаданияНаКлиенте(
	ВыполнятьЗаданияНаКлиенте)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ВыполнятьЗаданияНаКлиенте.Установить(ВыполнятьЗаданияНаКлиенте);
	
КонецПроцедуры

&НаКлиенте
Процедура Стоп(Команда)
	
	Если ЭтоПодчиненныйУзел Тогда
		ПоказатьПредупреждение(, НСТр("ru = 'Эту настройку можно поменять только в центральном узле'"));
		Возврат;
	КонецЕсли;	
	
	ВыполнятьЗаданияНаКлиенте = Ложь;
	ЗаписатьНастройкуВыполнятьЗаданияНаКлиенте(ВыполнятьЗаданияНаКлиенте);
	
	ОтключитьОбработчикОжидания("ВыполнитьОбработкуЗаданийПорция");

	Элементы.ФормаСтарт.Видимость = Истина;
	Элементы.ФормаСтоп.Видимость = Ложь;
	
	ЭтаФорма.Заголовок = НСтр("ru = 'Выполнение заданий (клиент, отключено)'");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуЗаданийПорция()
	
	ЗаданияДляОбработки 
	= ДиспетчерОбработкиОчередиЗаданийВызовСервера.ЗаданияДляОбработкиНаКлиенте(
		РазмерПорцииЗаданийДляВыполненияНаКлиенте);
		
	ПоследняяАктивностьОбработчикаЗаданийНаКлиентеМестноеВремя = ТекущаяДата();	
		
	Для Каждого ОписаниеЗадания Из ЗаданияДляОбработки Цикл
		
		ОписаниеЗадания.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
		
		Если Не ЗаблокироватьЗадание(ОписаниеЗадания.Задание, УникальныйИдентификатор) Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗаданиеЗавершено = Ложь;
		ДиспетчерОбработкиОчередиЗаданийКлиент.ОбработатьОдноЗадание(
			ОписаниеЗадания, ЗаданиеЗавершено);
		
		РазблокироватьЗадание(ОписаниеЗадания.Задание, УникальныйИдентификатор);
		
		ПоследняяАктивностьОбработчикаЗаданийНаКлиентеМестноеВремя = ТекущаяДата();	
		
	КонецЦикла;		
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаблокироватьЗадание(Задача, УникальныйИдентификатор)
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Задача, , УникальныйИдентификатор);
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ВыполнениеЗаданийНаКлиенте'"),
			УровеньЖурналаРегистрации.Ошибка, ,,
			ОписаниеОшибки());
		
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Процедура РазблокироватьЗадание(Задача, УникальныйИдентификатор)

	Попытка
		РазблокироватьДанныеДляРедактирования(Задача, УникальныйИдентификатор);
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ВыполнениеЗаданийНаКлиенте'"),
			УровеньЖурналаРегистрации.Ошибка, ,,
			ОписаниеОшибки());
		
	КонецПопытки;	
					  
КонецПроцедуры

#КонецОбласти