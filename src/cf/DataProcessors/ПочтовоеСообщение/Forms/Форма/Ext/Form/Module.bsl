#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыОтправки = ПараметрыОтправкиПочтовогоСообщенияВызовСервера.Создать();
	
	ДоступныеПрофили = ПараметрыОтправкиПочтовогоСообщения.ПолучитьСписокДоступныхПрофилей(ПараметрыОтправки);
	Если ДоступныеПрофили.Количество() = 0 Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		ВызватьИсключение НСтр("ru = 'У вас не настроено ни одного профиля легкой почты для отправки.
		|Настроить профили можно в форме ""Персональные настройки - Легкая почта"".'");
	КонецЕсли;	
	
	Если Не Параметры.Свойство("Объекты") Тогда
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для интерактивного использования'");
	КонецЕсли;	
	
	ЗаполнитьРеквизитыФормы(Параметры.Объекты);
	Если Параметры.Свойство("Кому") Тогда
		
		Если ТипЗнч(Параметры.Кому) = Тип("Строка") Тогда
			
			ОтборПараметры = Новый Структура("Адрес", Параметры.Кому);
			Строки = Получатели.НайтиСтроки(ОтборПараметры);
			
			Если Строки.Количество() = 0 Тогда
				СтрокаДанных = Получатели.Добавить();
				СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'");	
				СтрокаДанных.Адрес = Параметры.Кому;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Массив") Тогда	
			
			Для Каждого СтрокаКому Из Параметры.Кому Цикл
				
				ОтборПараметры = Новый Структура("Адрес", СтрокаКому.Адрес);
				Строки = Получатели.НайтиСтроки(ОтборПараметры);
				
				Если Строки.Количество() = 0 Тогда
					СтрокаДанных = Получатели.Добавить();
					СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'");	
					СтрокаДанных.Адрес = СтрокаКому.Адрес; 
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;			
		
	КонецЕсли;	
	
	Если Параметры.Свойство("СписокФайлов") Тогда
		
		ВложенияВПисьмо = Параметры.СписокФайлов;
		
		// помечаем те вложения, которые являются путями к файлам на клиенте
		Для Каждого ОписаниеВложение из ВложенияВПисьмо Цикл
			
			Если ТипЗнч(ОписаниеВложение) = Тип("Структура") Тогда
				Если ЭтоАдресВременногоХранилища(ОписаниеВложение.АдресВоВременномХранилище) Тогда
					
					СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеВложение.Представление);
					
					ВложенияСтрока = Вложения.Добавить();
					
					ВложенияСтрока.ИмяФайла = СтруктураИмениФайла.Имя;
					ВложенияСтрока.ИндексКартинки = 
						ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(СтруктураИмениФайла.Расширение);
						
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеВложение.АдресВоВременномХранилище);
					ВложенияСтрока.Размер = ДвоичныеДанные.Размер();
					
					ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ВложенияСтрока.Размер);
					ВложенияСтрока.ПометкаУдаления = Ложь;
					ВложенияСтрока.ИмяФайлаНаДиске = "";
					ВложенияСтрока.Редактирует = Неопределено;
					ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
					ВложенияСтрока.Представление = СтруктураИмениФайла.ИмяБезРасширения;
					ВложенияСтрока.Выбран = Истина;
					
					ВложенияСтрока.Расположение = "ВременноеХранилище";
					ВложенияСтрока.Ссылка = Неопределено;
					ВложенияСтрока.Адрес = ОписаниеВложение.АдресВоВременномХранилище;
					ВложенияСтрока.ИмяФайла = ОписаниеВложение.Представление;
					
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
		Основание = Параметры.Основание;
		Тема = Основание.Тема;
		Содержание = Основание.ТекстПисьма;
	КонецЕсли;	
	
	СписокВыбораКому = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ПолучателиПредставлениеКому");
	Для Каждого СтрокаСписка Из СписокВыбораКому Цикл
		Элементы.ПолучателиПредставление.СписокВыбора.Добавить(СтрокаСписка.Значение);
	КонецЦикла;	
	
	Элементы.ПолучателиПредставление.КнопкаВыпадающегоСписка = СписокВыбораКому.Количество() <> 0;
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РасширениеРаботыСКриптографиейПодключено = ПодключитьРасширениеРаботыСКриптографией();
	
	Если Получатели.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементПолучатель", 0.2, Истина);
	КонецЕсли;
	
	// проверим ТребуетсяЗаполнитьВизуализацию - только 2 уровня
	НадоЗаполнить = Ложь;
	Для каждого ЭлементДерева Из ТаблицаФайлов.ПолучитьЭлементы() Цикл
		
		Для каждого ЭлементФайлы Из ЭлементДерева.ПолучитьЭлементы() Цикл
			Если ЭлементФайлы.ТребуетсяЗаполнитьВизуализацию Тогда
				НадоЗаполнить = Истина;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЦикла;
	
	Если НадоЗаполнить Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьВизуализацию", 0.2, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ШифроватьПриОтправке Тогда
		Для каждого ТаблицаАдресовИСертификатовСтрока Из ТаблицаАдресовИСертификатов Цикл
			Если ПустаяСтрока(ТаблицаАдресовИСертификатовСтрока.Кому) Тогда
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле ""Кому"" не заполнено.'"),,
					"ТаблицаАдресовИСертификатов[" + ТаблицаАдресовИСертификатовСтрока.ПолучитьИдентификатор() + "].Кому");
				Возврат;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТаблицаАдресовИСертификатовСтрока.Сертификат) Тогда
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле ""Сертификат"" не заполнено.'"),,
					"ТаблицаАдресовИСертификатов[" + ТаблицаАдресовИСертификатовСтрока.ПолучитьИдентификатор() + "].Сертификат");
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТипЗнч(Профиль) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			
			ЕстьАдреса = Ложь;
			Для Каждого Строка Из Получатели Цикл
				Если Не ПустаяСтрока(Строка.Адрес) Тогда
					ЕстьАдреса = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Не ЕстьАдреса Тогда
				
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не указано ни одного адреса получателя.'"),,
					"Получатели");
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШифроватьПриОтправкеПриИзменении(Элемент)
	
	Если ШифроватьПриОтправке Тогда
		ПеренестиАдресаИзКомуВТаблицу();
		Кому = "";
		Элементы.СтраницыПолучатели.ТекущаяСтраница = Элементы.СтраницаТаблицаАдресов;
		Элементы.ТаблицаАдресовИСертификатов.Видимость = Истина;
		Элементы.ТаблицаАдресовИСертификатов.ВысотаВСтрокахТаблицы = Макс(2, ТаблицаАдресовИСертификатов.Количество());
	Иначе
		ПеренестиАдресаИзТаблицыВКому();
		ТаблицаАдресовИСертификатов.Очистить();
		Элементы.ТаблицаАдресовИСертификатов.Видимость = Ложь;
		Элементы.СтраницыПолучатели.ТекущаяСтраница = Элементы.СтраницаПолучатели;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	УстановитьЗаголовокКомандыОтправить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПолучатели

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	РежимДобавленияАдресата = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РежимДобавленияАдресата Тогда
		
		Элемент.ТекущийЭлемент = Элементы.ПолучателиПредставление;
		РежимДобавленияАдресата = Ложь;
		
	КонецЕсли;
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыШифрования

&НаКлиенте
Процедура ТаблицаАдресовИСертификатовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Значение Из ВыбранноеЗначение Цикл
		Отбор = Новый Структура("Сертификат", Значение);
		Строки = ТаблицаАдресовИСертификатов.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаАдресовИСертификатов.Добавить().Сертификат = Значение;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовВложения

&НаКлиенте
Процедура ТаблицаФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложениеКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьСертификат(Команда)
	
	ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодборСертификатовДляШифрования",
		, Элементы.ТаблицаАдресовИСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(Команда)
	
	ОткрытьВложениеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыОтправкиКлиент();
	Состояние(НСтр("ru = 'Идет отправка почтового сообщения. Пожалуйста, подождите...'"));
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьПродолжение",
		ЭтотОбъект);
	ЛегкаяПочтаКлиент.Отправить(ОписаниеОповещения, ПараметрыОтправки);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПродолжение(Результат, Параметры) Экспорт
	
	Если Не Результат.КодВозврата Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось отправить сообщение!'");
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ТекстПредупреждения, Символы.ПС, Результат.СообщениеОбОшибке);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	Состояние(НСтр("ru = 'Почтовое сообщение отправлено.'"));
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстПисьма()
	
	Контекст = Новый Структура;
	Контекст.Вставить("Тема", "");
	Контекст.Вставить("СодержаниеДокументов", "");
	Контекст.Вставить("ТекстОснований", "");
	Контекст.Вставить("КоличествоОснований", 0);
	Для каждого ЭлементДерева Из ТаблицаФайлов.ПолучитьЭлементы() Цикл
		ДобавитьОписаниеВложения(ЭлементДерева, Контекст);
	КонецЦикла;
	
	Содержание = "";
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		Содержание,
		Символы.ПС + Символы.ПС,
		Контекст.СодержаниеДокументов);
		
	Если ЗначениеЗаполнено(ТекстЗаметки) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Содержание,
			Символы.ПС + Символы.ПС,
			ТекстЗаметки);
	КонецЕсли;	
		
	ОтправкаПодписьСообщения = ПараметрыОтправкиПочтовогоСообщения.Свойство(
		ПараметрыОтправки,
		"ОтправкаПодписьСообщения");
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		Содержание,
		Символы.ПС + Символы.ПС,
		ОтправкаПодписьСообщения);
	
	Если Контекст.КоличествоОснований > 0 Тогда
		Если Контекст.КоличествоОснований = 1 Тогда
			Тема = Контекст.Тема;
			ДобавитьЗначениеКСтрокеЧерезРазделитель(Содержание, Символы.ПС + Символы.ПС, НСтр("ru = 'Основание:'"));
		Иначе
			ДобавитьЗначениеКСтрокеЧерезРазделитель(Содержание, Символы.ПС + Символы.ПС, НСтр("ru = 'Основания:'"));
		КонецЕсли;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Содержание, Символы.ПС + Символы.ПС, Контекст.ТекстОснований);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЗакрытииСервер()
	
	Для Каждого Строка Из Получатели Цикл
		Если Не ПустаяСтрока(Строка.Адрес) Тогда
			
			Если СписокВыбораКому.НайтиПоЗначению(Строка.Адрес) = Неопределено Тогда
				СписокВыбораКому.Добавить(Строка.Адрес);
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;	
			
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ПолучателиПредставлениеКому", СписокВыбораКому);
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(Объекты)
	
	Если Объекты.Количество() = 1 Тогда
		СсылкаНаОбъект = Объекты[0];
	КонецЕсли;	
	
	// Установим профиль.
	Профиль = ПараметрыОтправкиПочтовогоСообщения.ПолучитьПрофиль(ПараметрыОтправки);
	Если Параметры.Свойство("ВебКлиент") И Параметры.ВебКлиент = Истина И ТипЗнч(Профиль) = Тип("Строка") Тогда
		Профиль = Неопределено;
	КонецЕсли;
	
	// Заполним список выбора профиля.
	Элементы.Профиль.СписокВыбора.ЗагрузитьЗначения(
		ПараметрыОтправкиПочтовогоСообщения.ПолучитьСписокДоступныхПрофилей(ПараметрыОтправки));
	
	УстановитьЗаголовокКомандыОтправить();
	
	ПрикладыватьФайлВзаимодействияСЭД = ПараметрыОтправкиПочтовогоСообщения.Свойство(
		ПараметрыОтправки,
		"ПрикладыватьФайлВзаимодействияСЭД");
	
	Если ПрикладыватьФайлВзаимодействияСЭД = Перечисления.ДаНетСпрашивать.Да
		И Объекты.Количество() = 1
		И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объекты[0]) Тогда
		ПриложитьКПисьмуСообщениеВзаимодействияСЭД = Истина;
		Элементы.ПриложитьКПисьмуСообщениеВзаимодействияСЭД.Доступность = Ложь;
		ОбъектВзаимодействияСЭД = Объекты[0];
	ИначеЕсли ПрикладыватьФайлВзаимодействияСЭД = Перечисления.ДаНетСпрашивать.Спрашивать
		И Объекты.Количество() = 1
		И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объекты[0]) Тогда
		ПриложитьКПисьмуСообщениеВзаимодействияСЭД = Истина;
		Элементы.ПриложитьКПисьмуСообщениеВзаимодействияСЭД.Доступность = Истина;
		ОбъектВзаимодействияСЭД = Объекты[0];
	Иначе
		ПриложитьКПисьмуСообщениеВзаимодействияСЭД = Ложь;
		Элементы.ПриложитьКПисьмуСообщениеВзаимодействияСЭД.Доступность = Ложь;
		ОбъектВзаимодействияСЭД = Неопределено;
	КонецЕсли;
	
	Если Параметры.Объекты.Количество() <> 0 
		И ДелопроизводствоКлиентСервер.ЭтоЗаметка(Параметры.Объекты[0]) Тогда
		
		ТекстЗаметки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Объекты[0], "СодержаниеТекст");
		
	КонецЕсли;	
	
	// Формирование таблицы вложений
	ДобавитьФайлыОбъектов(Объекты);  
	
	Если ДелопроизводствоКлиентСервер.ЭтоКонтрагент(СсылкаНаОбъект) Тогда
		
		СписокПочтовыхАдресов = Документы.ИсходящееПисьмо.ПолучитьСписокПочтовыхАдресовКонтрагента(СсылкаНаОбъект);
		
		Для Каждого СтрАдрес Из СписокПочтовыхАдресов Цикл
			
			ДобавитьПолучателяПоАдресу(СтрАдрес.Значение.Адрес);
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	// Заполнение получателей из переданных объектов
	ЗаполнитьПолучателей();
	
	// Формирование текста письма
	СформироватьТекстПисьма();
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(СсылкаНаОбъект) Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "Важность, ВидДокумента.ИспользоватьВажность");
		Если РеквизитыОбъекта.ВидДокументаИспользоватьВажность = Истина 
			И РеквизитыОбъекта.Важность = Перечисления.ВариантыВажностиОбъектов.Высокая Тогда
			Важность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыОбъектов(Объекты)
	
	Для каждого Объект Из Объекты Цикл
		ДобавитьОбъект(ТаблицаФайлов, Объект);
	КонецЦикла;
	ПересчитатьРазмерВложений();
	
	ДобавитьВложенияИзДерева(ТаблицаФайлов.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложенияИзДерева(ДеревоЭлементы)
	
	Для каждого ДеревоСтрока Из ДеревоЭлементы Цикл
		Если Не ДеревоСтрока.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДеревоСтрока.ЭтоФайл Тогда
			ВложенияСтрока = Вложения.Добавить();
			
			ВложенияСтрока.ИмяФайла = "";
			ВложенияСтрока.ИндексКартинки = ДеревоСтрока.ИндексКартинки;
			ВложенияСтрока.ИмяБезРасширения = ДеревоСтрока.ИмяБезРасширения;
			ВложенияСтрока.Размер = ДеревоСтрока.Размер;
			ВложенияСтрока.Расположение = "Ссылка";
			ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ДеревоСтрока.Размер);
			ВложенияСтрока.ПометкаУдаления = Ложь;
			ВложенияСтрока.ИмяФайлаНаДиске = "";
			ВложенияСтрока.Редактирует = Неопределено;
			ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
			ВложенияСтрока.Представление = ДеревоСтрока.Наименование;
			ВложенияСтрока.Адрес = Неопределено;
			ВложенияСтрока.Выбран = Истина;
			ВложенияСтрока.ЭтоВизуализация = ДеревоСтрока.ЭтоВизуализация;	
			ВложенияСтрока.ТребуетсяЗаполнитьВизуализацию = ДеревоСтрока.ТребуетсяЗаполнитьВизуализацию;
			
			
			Если ДеревоСтрока.ЭтоПодпись Тогда
				ВложенияСтрока.Расположение = "ВременноеХранилище";
				ВложенияСтрока.Ссылка = Неопределено;
				ВложенияСтрока.Адрес = ДеревоСтрока.Подпись;
				ВложенияСтрока.ИмяФайла = ДеревоСтрока.ИмяФайла;
			Иначе
				ВложенияСтрока.Расположение = "Ссылка";
				ВложенияСтрока.Ссылка = ДеревоСтрока.Ссылка;
				ВложенияСтрока.Адрес = ДеревоСтрока.Адрес;
				
				Если Не ЗначениеЗаполнено(ВложенияСтрока.Ссылка) Тогда
					ВложенияСтрока.Расположение = "ВременноеХранилище";
					ВложенияСтрока.ИмяФайла = ДеревоСтрока.ИмяФайла;
				КонецЕсли;	
				
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьВложенияИзДерева(ДеревоСтрока.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбъект(Корень, Объект, ДобавлятьДокументыТолькоСФайлами = Ложь)
	
	Если ДелопроизводствоКлиентСервер.ЭтоФайл(Объект) Тогда
		ФайлыИнфо = ПолучитьИнформациюОФайлах(Новый Структура("Ссылка", Объект));
		ДобавитьФайл(Корень, ФайлыИнфо[0]);
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект) Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоКомплект(Объект) Тогда
			ДобавитьКомплект(Корень, Объект);
		Иначе
			ДобавитьДокумент(Корень, Объект, ДобавлятьДокументыТолькоСФайлами);
		КонецЕсли;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(Объект) Тогда
		ДобавитьМероприятие(Корень, Объект);
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоПроект(Объект) Тогда
		
		ДобавитьПроект(Корень, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомплект(Корень, Ссылка)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Строка(Ссылка));
	ПараметрыЗаполнения.Вставить("Ссылка", Ссылка);
	СтрокаКомплект = ТаблицаФайловДобавитьСтроку(Корень, "Комплект", ПараметрыЗаполнения);
	
	ФайлыДокументаИнфо = ПолучитьИнформациюОФайлах(Новый Структура("ВладелецФайла, ПометкаУдаления", Ссылка, Ложь));
	Для каждого ФайлИнфо Из ФайлыДокументаИнфо Цикл
		ДобавитьФайл(СтрокаКомплект, ФайлИнфо);
	КонецЦикла;
	
	КомплектующиеИнфо = РаботаСКомплектамиДокументовСервер.ПолучитьИнформациюОКомплектующих(Ссылка, Ложь);
	Для каждого Элемент Из КомплектующиеИнфо.Элементы Цикл
		ДобавитьОбъект(СтрокаКомплект, Элемент, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДокумент(Корень, Ссылка, ДобавлятьДокументыТолькоСФайлами = Ложь)
	
	ФайлыДокументаИнфо = ПолучитьИнформациюОФайлахДокумента(Ссылка);
	
	ФайлыДокументаИнфо.Колонки.Добавить("Адрес");
	
	Если ДобавлятьДокументыТолькоСФайлами И ФайлыДокументаИнфо.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;    
	
	НастройкиШтампаЭП = ФайловыеФункцииПовтИсп.ПолучитьОбщиеНастройкиШтампаЭП();
	
	ИспользованныеМЧД = Новый Соответствие;
	
	ДокументПодписан = ДействияСервер.ДокументПодписан(Ссылка);
	
	ОтправлятьПодписиЭППоПочте = Перечисления.ДействияПриОтправкеПоПочтеЭП.ОтправлятьВсеПодписи;
	
	СтрокаДокумент = ТаблицаФайловДобавитьСтроку(Корень, "Документ", Ссылка);
	Для каждого ФайлИнфо Из ФайлыДокументаИнфо Цикл
		
		ТребуетсяЗаполнитьВизуализацию = Ложь;
		
		ЕстьРегШтамп = Ложь;
		Если ЗначениеЗаполнено(Ссылка) И ДелопроизводствоКлиентСервер.ЭтоДокумент(Ссылка) Тогда
			
			Если НРег(ФайлИнфо.Расширение) = "pdf" Тогда
				ФайлРегистрационныйШтамп = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
					Ссылка, 
					ФайлИнфо.Ссылка, 
					Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации);
					
				ЕстьРегШтамп = ЗначениеЗаполнено(ФайлРегистрационныйШтамп);	
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если (ФайлИнфо.ПодписанЭП Или ДокументПодписан Или ЕстьРегШтамп) 
			И (ОтправлятьПодписиЭППоПочте = Перечисления.ДействияПриОтправкеПоПочтеЭП.Спрашивать
			Или ОтправлятьПодписиЭППоПочте = Перечисления.ДействияПриОтправкеПоПочтеЭП.ОтправлятьВсеПодписи) Тогда 
			// подменим ссылку
			
			ВерсияФайла = Неопределено;
			Если ФайлИнфо.ПодписанЭП Тогда
				ВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлИнфо.Ссылка, "ТекущаяВерсия");
			КонецЕсли;	
			
			СсылкаВизуализации = РаботаСФайламиВызовСервера.ПолучитьФайлВизуализации(
				ФайлИнфо.Ссылка, УникальныйИдентификатор, ТребуетсяЗаполнитьВизуализацию, ДокументПодписан);
			Если ЗначениеЗаполнено(СсылкаВизуализации) Тогда
				
				ДобавитьФайл(СтрокаДокумент, ФайлИнфо);	
				
				ТекущаяВерсияРасширение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаВизуализации, "ТекущаяВерсияРасширение");
				ФайлИнфо.Ссылка = СсылкаВизуализации;
				ФайлИнфо.Наименование = ФайлИнфо.Наименование + НСтр("ru = ' (со штампом ЭП)'");
				ФайлИнфо.Расширение = ТекущаяВерсияРасширение;     
				Если НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.PDFA Тогда
					ФайлИнфо.Расширение = "pdf";
				КонецЕсли;
				ДобавитьФайл(СтрокаДокумент, ФайлИнфо, , Истина); //Истина  ЭтоВизуализация
				
			ИначеЕсли ТребуетсяЗаполнитьВизуализацию Тогда

				ДобавитьФайл(СтрокаДокумент, ФайлИнфо);	
				
				ФайлИнфо.Наименование = ФайлИнфо.Наименование + НСтр("ru = ' (со штампом ЭП)'");
				Если НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.PDFA Тогда
					ФайлИнфо.Расширение = "pdf";
				КонецЕсли;
				ДобавитьФайл(СтрокаДокумент, ФайлИнфо, ТребуетсяЗаполнитьВизуализацию, Истина); //Истина  ЭтоВизуализация
					
			Иначе
					
				ДобавитьФайл(СтрокаДокумент, ФайлИнфо);
					
			КонецЕсли;  
			
			Если ФайлИнфо.ПодписанЭП Тогда
				
				ФайлыДоверенностей = РаботаСЭП.ФайлыДоверенностей(ВерсияФайла, УникальныйИдентификатор, ИспользованныеМЧД);
				
				Для Каждого ФайлДоверенности Из ФайлыДоверенностей Цикл
					ФайлИнфо.Адрес = ФайлДоверенности.Адрес;  
					ФайлИнфо.Ссылка = Неопределено;
					ФайлИнфо.Размер = ФайлДоверенности.Размер;  
					
					Представление = ФайлДоверенности.Представление;
					МассивСтрок = СтрРазделить(ФайлДоверенности.Представление, ".");
					Если МассивСтрок.Количество() > 1 Тогда
						МассивСтрок.Удалить(МассивСтрок.Количество()-1);
						Представление = СтрСоединить(МассивСтрок, ".");
					КонецЕсли;	
					
					ФайлИнфо.Наименование = Представление;
					ФайлИнфо.Расширение = "zip";
					
					ДобавитьФайл(СтрокаДокумент, ФайлИнфо);
					
				КонецЦикла;
				
			КонецЕсли;	
			
		Иначе
			ДобавитьФайл(СтрокаДокумент, ФайлИнфо, ТребуетсяЗаполнитьВизуализацию);					
		КонецЕсли;	
			
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроект(Корень, Ссылка)  
	
	СтрокаДокумент = ТаблицаФайловДобавитьСтроку(Корень, "Проект", Ссылка);
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьМероприятие(Корень, Ссылка)
	
	ФайлыДокументаИнфо = ПолучитьИнформациюОФайлахДокумента(Ссылка);
	
	ФайлыДокументаИнфо.Колонки.Добавить("Адрес");
	
	ИспользованныеМЧД = Новый Соответствие;   
	
	НастройкиШтампаЭП = ФайловыеФункцииПовтИсп.ПолучитьОбщиеНастройкиШтампаЭП();

	ОтправлятьПодписиЭППоПочте = Перечисления.ДействияПриОтправкеПоПочтеЭП.ОтправлятьВсеПодписи;	
	
	СтрокаДокумент = ТаблицаФайловДобавитьСтроку(Корень, "Мероприятие", Ссылка);
	Для Каждого ФайлИнфо Из ФайлыДокументаИнфо Цикл
		
		ТребуетсяЗаполнитьВизуализацию = Ложь;
		
		Если ФайлИнфо.ПодписанЭП
			И (ОтправлятьПодписиЭППоПочте = Перечисления.ДействияПриОтправкеПоПочтеЭП.Спрашивать
				Или ОтправлятьПодписиЭППоПочте = Перечисления.ДействияПриОтправкеПоПочтеЭП.ОтправлятьВсеПодписи) Тогда 
			
			// подменим ссылку
			ВерсияФайла = Неопределено;
			Если ФайлИнфо.ПодписанЭП Тогда
				ВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлИнфо.Ссылка, "ТекущаяВерсия");
			КонецЕсли;	
			
			СсылкаВизуализации = РаботаСФайламиВызовСервера.ПолучитьФайлВизуализации(
				ФайлИнфо.Ссылка, УникальныйИдентификатор, ТребуетсяЗаполнитьВизуализацию);
			Если ЗначениеЗаполнено(СсылкаВизуализации) Тогда
				
				ДобавитьФайл(СтрокаДокумент, ФайлИнфо);	
				
				ТекущаяВерсияРасширение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаВизуализации, "ТекущаяВерсияРасширение");
				ФайлИнфо.Ссылка = СсылкаВизуализации;
				ФайлИнфо.Наименование = ФайлИнфо.Наименование + НСтр("ru = ' (со штампом ЭП)'");
				ФайлИнфо.Расширение = ТекущаяВерсияРасширение;
				Если НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.PDFA Тогда
					ФайлИнфо.Расширение = "pdf";
				КонецЕсли;
				ДобавитьФайл(СтрокаДокумент, ФайлИнфо, , Истина); //Истина  ЭтоВизуализация
				
			ИначеЕсли ТребуетсяЗаполнитьВизуализацию Тогда

				ДобавитьФайл(СтрокаДокумент, ФайлИнфо);	
				
				ФайлИнфо.Наименование = ФайлИнфо.Наименование + НСтр("ru = ' (со штампом ЭП)'");
				Если НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.PDFA Тогда
					ФайлИнфо.Расширение = "pdf";
				КонецЕсли;
				ДобавитьФайл(СтрокаДокумент, ФайлИнфо, ТребуетсяЗаполнитьВизуализацию, Истина); //Истина  ЭтоВизуализация
					
			Иначе
					
				ДобавитьФайл(СтрокаДокумент, ФайлИнфо);
					
			КонецЕсли;  
			
			Если ФайлИнфо.ПодписанЭП Тогда
				
				ФайлыДоверенностей = РаботаСЭП.ФайлыДоверенностей(ВерсияФайла, УникальныйИдентификатор, ИспользованныеМЧД);
				
				Для Каждого ФайлДоверенности Из ФайлыДоверенностей Цикл
					ФайлИнфо.Адрес = ФайлДоверенности.Адрес;  
					ФайлИнфо.Ссылка = Неопределено;
					ФайлИнфо.Размер = ФайлДоверенности.Размер;  
					
					Представление = ФайлДоверенности.Представление;
					МассивСтрок = СтрРазделить(ФайлДоверенности.Представление, ".");
					Если МассивСтрок.Количество() > 1 Тогда
						МассивСтрок.Удалить(МассивСтрок.Количество()-1);
						Представление = СтрСоединить(МассивСтрок, ".");
					КонецЕсли;	
					
					ФайлИнфо.Наименование = Представление;
					ФайлИнфо.Расширение = "zip";
					
					ДобавитьФайл(СтрокаДокумент, ФайлИнфо);
					
				КонецЦикла;
				
			КонецЕсли;	
			
		Иначе
			ДобавитьФайл(СтрокаДокумент, ФайлИнфо, ТребуетсяЗаполнитьВизуализацию);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайл(Корень, ФайлИнфо, ТребуетсяЗаполнитьВизуализацию = Ложь, ЭтоВизуализация = Ложь)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", ФайлИнфо.Наименование);
	ПараметрыЗаполнения.Вставить("Ссылка", ФайлИнфо.Ссылка);
	ПараметрыЗаполнения.Вставить("Размер", ФайлИнфо.Размер);
	ПараметрыЗаполнения.Вставить("Расширение", ФайлИнфо.Расширение);
	ПараметрыЗаполнения.Вставить("ЭтоВизуализация", ЭтоВизуализация);  
	ПараметрыЗаполнения.Вставить("Адрес", ФайлИнфо.Адрес);
	СтрокаФайл = ТаблицаФайловДобавитьСтроку(Корень, "Файл", ПараметрыЗаполнения);
	
	СтрокаФайл.ТребуетсяЗаполнитьВизуализацию = ТребуетсяЗаполнитьВизуализацию;
	
	ОтправлятьПодписиЭППоПочте = ПараметрыОтправкиПочтовогоСообщения.Свойство(
		ПараметрыОтправки,
		"ДействияПриОтправкеПоПочтеСЭП");
	
	Если (ОтправлятьПодписиЭППоПочте = Перечисления.ДействияПриОтправкеПоПочтеЭП.Спрашивать
		Или ОтправлятьПодписиЭППоПочте = Перечисления.ДействияПриОтправкеПоПочтеЭП.ОтправлятьВсеПодписи)
		И Не ТребуетсяЗаполнитьВизуализацию Тогда
			
		ЭПФайлаИнфо = ПолучитьИнформациюОбЭПФайла(ФайлИнфо.Ссылка);
		Для каждого ЭПИнфо Из ЭПФайлаИнфо Цикл
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'ЭП: %1 - %2'"),
				ЭПИнфо.Ссылка.Владелец.Наименование,
				ЭПИнфо.Наименование);
			
			ДобавитьПодпись(
				СтрокаФайл,
				Наименование,
				ЭПИнфо.Подпись.Получить(),
				ЭПИнфо.Размер);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодпись(Корень, Наименование, Подпись, Размер)
	
	Наименование = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Наименование, "");
	Если СтрДлина(Наименование) > 150 Тогда  // 150
		Наименование = Лев(Наименование, 150);
	КонецЕсли;	
	ИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
		Наименование,
		ПараметрыОтправкиПочтовогоСообщения.Свойство(ПараметрыОтправки, "РасширениеДляФайловПодписи"));
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	ПараметрыЗаполнения.Вставить("Подпись", ПоместитьВоВременноеХранилище(Подпись, УникальныйИдентификатор));
	ПараметрыЗаполнения.Вставить("Размер", Размер);
	ПараметрыЗаполнения.Вставить("ИмяФайла", ИмяФайла);
	
	СтрокаЭП = ТаблицаФайловДобавитьСтроку(Корень, "Подпись", ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ТаблицаФайловДобавитьСтроку(Корень, ВидСтроки, ПараметрыЗаполнения)
	
	ТаблицаФайловСтрока = Корень.ПолучитьЭлементы().Добавить();
	ТаблицаФайловСтрока.Выбран = Истина;
	ТаблицаФайловСтрока.ЭтоДокумент = Ложь;
	ТаблицаФайловСтрока.ЭтоМероприятие = Ложь;
	ТаблицаФайловСтрока.ЭтоФайл = Ложь;
	ТаблицаФайловСтрока.ЭтоПодпись = Ложь;
	
	Если ВидСтроки = "Комплект" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.ИмяБезРасширения = ТаблицаФайловСтрока.Наименование;
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = 2;
		ТаблицаФайловСтрока.Размер = 0;
		ТаблицаФайловСтрока.ЭтоДокумент = Истина;
	ИначеЕсли ВидСтроки = "Документ" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.ИмяБезРасширения = ТаблицаФайловСтрока.Наименование; 
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = 0;
		ТаблицаФайловСтрока.Размер = 0;
		ТаблицаФайловСтрока.ЭтоДокумент = Истина;
	ИначеЕсли ВидСтроки = "Мероприятие" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.ИмяБезРасширения = ТаблицаФайловСтрока.Наименование; 
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = 0;
		ТаблицаФайловСтрока.Размер = 0;
		ТаблицаФайловСтрока.ЭтоМероприятие = Истина;
		
	ИначеЕсли ВидСтроки = "Проект" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.ИмяБезРасширения = ТаблицаФайловСтрока.Наименование; 
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = 0;
		ТаблицаФайловСтрока.Размер = 0;
		ТаблицаФайловСтрока.ЭтоПроект = Истина;
		
	ИначеЕсли ВидСтроки = "Файл" Тогда
		
		ТаблицаФайловСтрока.Наименование = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ПараметрыЗаполнения.Наименование, ПараметрыЗаполнения.Расширение);
		ТаблицаФайловСтрока.ИмяБезРасширения = ПараметрыЗаполнения.Наименование;
		
		ТаблицаФайловСтрока.ИмяФайла = ПараметрыЗаполнения.Наименование;
		
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.Адрес = ПараметрыЗаполнения.Адрес;     
		Если ЗначениеЗаполнено(ТаблицаФайловСтрока.Адрес) Тогда
			ТаблицаФайловСтрока.ИмяФайла = ТаблицаФайловСтрока.ИмяФайла + "." + ПараметрыЗаполнения.Расширение;
		КонецЕсли;
		
		ТаблицаФайловСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ПараметрыЗаполнения.Расширение);
		ТаблицаФайловСтрока.Размер = ПараметрыЗаполнения.Размер;
		ТаблицаФайловСтрока.ЭтоФайл = Истина;
		ТаблицаФайловСтрока.ЭтоВизуализация = ПараметрыЗаполнения.ЭтоВизуализация;
		
	ИначеЕсли ВидСтроки = "Подпись" Тогда
		
		ТаблицаФайловСтрока.Наименование = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ПараметрыЗаполнения.Наименование, "p7s");
		ТаблицаФайловСтрока.ИмяФайла = ПараметрыЗаполнения.ИмяФайла;
		ТаблицаФайловСтрока.ИмяБезРасширения = ПараметрыЗаполнения.ИмяФайла;
		ТаблицаФайловСтрока.Ссылка = Неопределено;
		ТаблицаФайловСтрока.ИндексКартинки = 4; 
		ТаблицаФайловСтрока.Подпись = ПараметрыЗаполнения.Подпись;
		ТаблицаФайловСтрока.Размер = ПараметрыЗаполнения.Размер;
		ТаблицаФайловСтрока.ЭтоФайл = Истина;
		ТаблицаФайловСтрока.ЭтоПодпись = Истина;
	КонецЕсли;
	
	ПересчитатьРазмерКб(ТаблицаФайловСтрока);
	
	Возврат ТаблицаФайловСтрока;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолучателей()
	
	Для каждого ЭлементДерева Из ТаблицаФайлов.ПолучитьЭлементы() Цикл
		ДобавитьПолучателейИзВложения(ЭлементДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПолучателейИзВложения(ЭлементДерева)
	
	Если Не ЭлементДерева.Выбран Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭлементДерева.ЭтоДокумент Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ЭлементДерева.Ссылка) Тогда
			
			ДокументИнфо = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДерева.Ссылка, 
				"Контрагент, ПодписалОтКонтрагента");
			Если ЗначениеЗаполнено(ДокументИнфо.Контрагент)
				И ТипЗнч(ДокументИнфо.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				ДобавитьПолучателя(ДокументИнфо.Контрагент);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументИнфо.ПодписалОтКонтрагента) Тогда
				ДобавитьПолучателя(ДокументИнфо.ПодписалОтКонтрагента);
			КонецЕсли;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(ЭлементДерева.Ссылка) Тогда
			
			ПолучателиИнфо = ПолучитьИнформациюОПолучателяхИсходящегоДокумента(ЭлементДерева.Ссылка);
			Для каждого ПолучательИнфо Из ПолучателиИнфо Цикл
				Если ЗначениеЗаполнено(ПолучательИнфо.Адресат) Тогда
					ДобавитьПолучателя(ПолучательИнфо.Адресат);
				ИначеЕсли ЗначениеЗаполнено(ПолучательИнфо.Корреспондент) Тогда
					ДобавитьПолучателя(ПолучательИнфо.Корреспондент);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ЭлементДерева.Ссылка) Тогда
			
			АдресДобавлен = Ложь;
			КонтактноеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДерева.Ссылка, "КонтактноеЛицо");
			Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				АдресДобавлен = ДобавитьПолучателя(КонтактноеЛицо);
			КонецЕсли;
			
			Если Не АдресДобавлен Тогда 
				Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДерева.Ссылка, "Контрагент");
				Если ЗначениеЗаполнено(Контрагент) Тогда
					ДобавитьПолучателя(Контрагент);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭлементДерева.ЭтоПроект Тогда    
		
		Проект = ЭлементДерева.Ссылка;
		РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Проект, "Наименование, ЭтоГруппа, ПроектнаяКоманда");
		
		Если РеквизитыПроекта.ЭтоГруппа = Истина Тогда
			ВызватьИсключение Нстр("ru = 'Выберите проект, а не группу.'");
		КонецЕсли;
		
		ПроектнаяКоманда = РеквизитыПроекта.ПроектнаяКоманда.Выбрать();
		
		Пока ПроектнаяКоманда.Следующий() Цикл
			
			Исполнитель = ПроектнаяКоманда.Исполнитель;
			ДобавитьПолучателя(Исполнитель);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОПолучателяхИсходящегоДокумента(Ссылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КорреспонденцияКорреспонденты.Адресат КАК Адресат,
		|	КорреспонденцияКорреспонденты.Корреспондент КАК Корреспондент
		|ИЗ
		|	Документ.Корреспонденция.Корреспонденты КАК КорреспонденцияКорреспонденты
		|ГДЕ
		|	КорреспонденцияКорреспонденты.Ссылка.Основание = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ДобавитьПолучателя(Получатель) Экспорт
	
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивАдресов = ПолучитьАдресаДляОтправкиЛегкойПочтой(Получатель);
	
	Для Каждого ПредставлениеПочтовогоАдреса Из МассивАдресов Цикл
		СтрокаДанных = Получатели.Добавить();
		СтрокаДанных.ТипАдреса = НСтр("ru = 'Кому:'");
		СтрокаДанных.Адрес = ПредставлениеПочтовогоАдреса;
	КонецЦикла;
	
	Возврат (МассивАдресов.Количество() <> 0);
	
КонецФункции

&НаСервере
Процедура ДобавитьПолучателяПоАдресу(Адрес) Экспорт
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = Получатели.Добавить();
	СтрокаДанных.ТипАдреса = НСтр("ru = 'Кому:'");
	СтрокаДанных.Адрес = Адрес;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресаДляОтправкиЛегкойПочтой(Знач Получатель)

	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "Владелец");
	КонецЕсли;	
	
	МассивАдресов = Новый Массив;
	
	ОбъектКИ = Новый Массив;
	ОбъектКИ.Добавить(Получатель);
	ТаблицаКонтактовEmail = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбъектКИ, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,, ТекущаяДатаСеанса());
	
	Для Каждого СтрокаРезультата Из ТаблицаКонтактовEmail Цикл
		
		Результат = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
			Строка(Получатель),
			СокрЛП(СтрокаРезультата.Представление));
			
		МассивАдресов.Добавить(Результат);	
			
	КонецЦикла;	
		
	Возврат МассивАдресов;
	
КонецФункции

&НаСервере
Функция ДобавитьОписаниеВложения(ЭлементДерева, Контекст)
	
	Если Не ЭлементДерева.Выбран Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПредставлениеОбъекта = ПолучитьПредставлениеОбъекта(ЭлементДерева.Ссылка);
	Если ЭлементДерева.ЭтоДокумент Тогда
		Контекст.Тема = ПредставлениеОбъекта;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			СокрЛП(ЭлементДерева.Ссылка.Содержание));
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.ТекстОснований,
			Символы.ПС + Символы.ПС,
			ПредставлениеОбъекта);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.ТекстОснований,
			Символы.ПС,
			ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(ЭлементДерева.Ссылка));
		
		Контекст.КоличествоОснований = Контекст.КоличествоОснований + 1;
	ИначеЕсли ЭлементДерева.ЭтоФайл Тогда
		Если Не ЭлементДерева.ЭтоПодпись Тогда
			Контекст.Тема = ПредставлениеОбъекта;
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.ТекстОснований,
				Символы.ПС + Символы.ПС,
				ПредставлениеОбъекта);
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.ТекстОснований,
				Символы.ПС,
				ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(ЭлементДерева.Ссылка));
			
			Контекст.КоличествоОснований = Контекст.КоличествоОснований + 1;
		КонецЕсли;
	ИначеЕсли ЭлементДерева.ЭтоМероприятие Тогда
		Контекст.Тема = ПредставлениеОбъекта;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			СокрЛП(ЭлементДерева.Ссылка.Описание));
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.ТекстОснований,
			Символы.ПС + Символы.ПС,
			ПредставлениеОбъекта);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.ТекстОснований,
			Символы.ПС,
			ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(ЭлементДерева.Ссылка));
		
		Контекст.КоличествоОснований = Контекст.КоличествоОснований + 1;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Возврат Строка(Объект) + " (" + Объект.Метаданные().ПредставлениеОбъекта + ")"
	
КонецФункции

&НаСервере
Процедура ПересчитатьРазмерКб(ТаблицаФайловСтрока)
	
	Если ТаблицаФайловСтрока.Выбран Тогда
		Если ТаблицаФайловСтрока.Размер = 0 Тогда
			ТаблицаФайловСтрока.РазмерКб = 0;
		Иначе
			ТаблицаФайловСтрока.РазмерКб = Макс(1, Окр(ТаблицаФайловСтрока.Размер / 1024));
		КонецЕсли;
	Иначе
		ТаблицаФайловСтрока.РазмерКб = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРазмерВложений()
	
	Контекст = Новый Структура("ИтогоРазмерКб", 0);
	ОбойтиДерево(ТаблицаФайлов, Контекст, "ПересчетРазмераВложений");
	ИтогоРазмерКб = Контекст.ИтогоРазмерКб;
	
КонецПроцедуры

&НаСервере
Функция ПересчетРазмераВложений(ЭлементДерева, Контекст)
	
	ПересчитатьРазмерКб(ЭлементДерева);
	Контекст.ИтогоРазмерКб = Контекст.ИтогоРазмерКб + ЭлементДерева.РазмерКб;
	
КонецФункции

&НаСервере
Процедура ОбойтиДерево(Корень, Контекст, ИмяПроцедуры)
	
	Для каждого ЭлементДерева Из Корень.ПолучитьЭлементы() Цикл
		Результат = Вычислить(ИмяПроцедуры + "(ЭлементДерева, Контекст)");
		ОбойтиДерево(ЭлементДерева, Контекст, ИмяПроцедуры);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбойтиДеревоНаКлиенте(Корень, Контекст, ИмяПроцедуры)
	
	Для каждого ЭлементДерева Из Корень.ПолучитьЭлементы() Цикл
		Результат = Вычислить(ИмяПроцедуры + "(ЭлементДерева, Контекст)");
		ОбойтиДеревоНаКлиенте(ЭлементДерева, Контекст, ИмяПроцедуры);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюОФайлах(Отбор)
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.ПодписанЭП КАК ПодписанЭП,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	"""" КАК Адрес,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|
		|{ГДЕ
		|	Файлы.ВладелецФайла.*,
		|	Файлы.Ссылка.*,
		|   Файлы.ПометкаУдаления.*}";
	Для каждого КлючЗначение Из Отбор Цикл
		ПостроительЗапроса.Отбор.Добавить(КлючЗначение.Ключ);
		ПостроительЗапроса.Отбор[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
	КонецЦикла;
	ПостроительЗапроса.Выполнить();
	Результат = ПостроительЗапроса.Результат.Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОФайлахДокумента(ВладелецФайла)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.ПодписанЭП КАК ПодписанЭП,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И Файлы.ПометкаУдаления = ЛОЖЬ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОбЭПФайла(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда
		Возврат Новый ТаблицаЗначений();
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭП.ПодписанныйОбъект КАК Ссылка,
		|	ЭП.Отпечаток КАК Отпечаток,
		|	ЭП.КомуВыданСертификат КАК Наименование,
		|	ЭП.Подпись КАК Подпись
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.ПодписанныйОбъект = &Объект");
		
	ТекущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");	
	Запрос.УстановитьПараметр("Объект", ТекущаяВерсия);
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("Размер");
	Для каждого РезультатСтрока Из Результат Цикл
		РезультатСтрока.Размер = РезультатСтрока.Подпись.Получить().Размер();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокКомандыОтправить()
	
	Если ЗначениеЗаполнено(Профиль) Тогда
		Если ТипЗнч(Профиль) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить'");
		Иначе
			Элементы.Отправить.Заголовок = НСтр("ru = 'Создать письмо'");
		КонецЕсли;
		Элементы.Отправить.Доступность = Истина;
	Иначе
		Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить'");
		Элементы.Отправить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДвДанныеСертификата(СпрСертификат)
	
	ДанныеСертификата = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
		СпрСертификат, "ДанныеСертификата");
		
	Возврат ДанныеСертификата.Получить();
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыОтправкиКлиент()
	
	ПараметрыОтправкиПочтовогоСообщения.УстановитьПрофиль(ПараметрыОтправки, Профиль);
	
	КомуСтр = "";
	КопияСтр = "";
	
	Если ШифроватьПриОтправке Тогда
		// Соберем массив сертификатов для шифрования.
		Сертификаты = Новый Массив;
		Для Каждого ТаблицаАдресовИСертификатовСтрока Из ТаблицаАдресовИСертификатов Цикл
			ДвДанные = ПолучитьДвДанныеСертификата(ТаблицаАдресовИСертификатовСтрока.Сертификат);
			Сертификаты.Добавить(ДвДанные);
		КонецЦикла;
		
		// Установим режим шифрования почтового сообщения.
		ПараметрыОтправкиПочтовогоСообщения.УстановитьРежимШифрования(
			ПараметрыОтправки,
			ШифроватьПриОтправке,
			Сертификаты);
		
		// Соберем строчку Кому.
		КомуСтр = "";
		Для Каждого ТаблицаАдресовИСертификатовСтрока Из ТаблицаАдресовИСертификатов Цикл
			Адрес = ТаблицаАдресовИСертификатовСтрока.Кому;
			Адрес = СтрЗаменить(Адрес, ",", " ");
			ДобавитьЗначениеКСтрокеЧерезРазделитель(КомуСтр, "; ", Адрес);
		КонецЦикла;
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "Кому", КомуСтр);
	Иначе
		ПараметрыОтправкиПочтовогоСообщения.УстановитьРежимШифрования(
			ПараметрыОтправки,
			ШифроватьПриОтправке);
			
		КомуСтр = "";
		КопияСтр = "";
		СкрытаяКопияСтр = "";
			
		Для Каждого Строка Из Получатели Цикл
			Если Не ПустаяСтрока(Строка.Адрес) Тогда
				
				Строка.Адрес = СтрЗаменить(Строка.Адрес, ",", " ");
				Строка.Адрес = СтрЗаменить(Строка.Адрес, ";", " ");
				
				Если Строка.ТипАдреса = НСтр("ru = 'Кому:'") Тогда
					ДобавитьЗначениеКСтрокеЧерезРазделитель(КомуСтр, "; ", Строка.Адрес);
				КонецЕсли;		
				
				Если Строка.ТипАдреса = НСтр("ru = 'Копия:'") Тогда
					ДобавитьЗначениеКСтрокеЧерезРазделитель(КопияСтр, "; ", Строка.Адрес);
				КонецЕсли;		
						
				Если Строка.ТипАдреса = НСтр("ru = 'Скрытая копия:'") Тогда		
					ДобавитьЗначениеКСтрокеЧерезРазделитель(СкрытаяКопияСтр, "; ", Строка.Адрес);
				КонецЕсли;		
				
			КонецЕсли;	
		КонецЦикла;	
			
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "Кому", КомуСтр);
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "Копия", КопияСтр);
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "СкрытаяКопия", СкрытаяКопияСтр);
	КонецЕсли;
	
	ПараметрыОтправкиПочтовогоСообщения.УстановитьТему(ПараметрыОтправки, Тема);
	ПараметрыОтправкиПочтовогоСообщения.УстановитьТекст(ПараметрыОтправки, Содержание);
	
	ВажностьПисьма = ?(Важность,
		ПредопределенноеЗначение("Перечисление.ВажностьПисем.Высокая"),
		ПредопределенноеЗначение("Перечисление.ВажностьПисем.Обычная"));
	ПараметрыОтправкиПочтовогоСообщения.УстановитьВажность(ПараметрыОтправки, ВажностьПисьма);
	
	ПараметрыОтправкиПочтовогоСообщения.ОчиститьВложения(ПараметрыОтправки);
	Для каждого ВложениеСтрока Из Вложения Цикл
		Если Не ВложениеСтрока.Выбран Тогда
			Продолжить;
		КонецЕсли;
		Если ВложениеСтрока.Расположение = "Ссылка" Тогда
			ПараметрыОтправкиПочтовогоСообщения.ДобавитьВложениеФайл(
				ПараметрыОтправки,
				ВложениеСтрока.Ссылка,
				ВложениеСтрока.ИмяБезРасширения);
		ИначеЕсли ВложениеСтрока.Расположение = "ВременноеХранилище" Тогда
			ПараметрыОтправкиПочтовогоСообщения.ДобавитьВложениеИзВременногоХранилища(
				ПараметрыОтправки,
				ВложениеСтрока.Адрес,
				ВложениеСтрока.ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Если ПриложитьКПисьмуСообщениеВзаимодействияСЭД
		И ЗначениеЗаполнено(ОбъектВзаимодействияСЭД) Тогда
		ПараметрыОтправкиПочтовогоСообщения.ДобавитьДокумент(
			ПараметрыОтправки,
			ОбъектВзаимодействияСЭД);
	КонецЕсли;
	
	ОписаниеСобытия = СтрШаблон(НСтр("ru = 'Тема=%1  Кому=%2 Копия=%3 Профиль=%4'"), 
		Тема, КомуСтр, КопияСтр, Профиль);
	ПротоколированиеРаботыСотрудников.ЗаписатьОтправкуПоПочте(СсылкаНаОбъект, ОписаниеСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементПолучатель()
	
	РежимДобавленияАдресата = Истина;
	Элементы.Получатели.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиАдресаИзКомуВТаблицу()
	
	ТаблицаАдресовИСертификатов.Очистить();
	
	Для Каждого СтрокаПолучателей Из Получатели Цикл
		
		Если Не ПустаяСтрока(СтрокаПолучателей.Адрес) Тогда
	
			Строка = ТаблицаАдресовИСертификатов.Добавить();
			Строка.Кому = СокрЛП(СтрокаПолучателей.Адрес);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиАдресаИзТаблицыВКому()
	
	Получатели.Очистить();
	
	Для Каждого Строка Из ТаблицаАдресовИСертификатов Цикл
		СтрокаДанных = Получатели.Добавить();
		СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'");	
		СтрокаДанных.Адрес = Строка.Кому;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеКлиент()
	
	ТекущаяСтрока = Элементы.Вложения.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		НеПолучатьВизуализациюЭП = Не ТекущиеДанные.ЭтоВизуализация;
		
		КомандыРаботыСФайламиКлиент.Открыть(
			РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
				ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор, , , НеПолучатьВизуализациюЭП));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РасширениеРаботыСФайламиПодключено()
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не подключено расширение работы с файлами!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВизуализацию()
	
	Состояние(НСтр("ru = 'Выполняется заполнение визуализации ЭП...'"));
	
	Для каждого ЭлементФайлы Из Вложения Цикл
		
		Если ЭлементФайлы.ТребуетсяЗаполнитьВизуализацию Тогда
			
			ЭлементФайлы.ТребуетсяЗаполнитьВизуализацию = Ложь;
			Файл = ЭлементФайлы.Ссылка;
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
				Файл, 
				Неопределено, 
				ЭтаФорма.УникальныйИдентификатор, 
				Неопределено);
				
			Если ДанныеФайла.ТребуетсяСоздатьВизуализациюЭП
				И ДанныеФайла.ВизуализацияЭПДобавлена = Ложь Тогда 
				
				#Если Не ВебКлиент И Не МобильныйКлиент Тогда
					// для doc файла заполним на клиенте - если не веб клиент
					ВизуализацияСсылка = РаботаСФайламиКлиент.СоздатьВизуализациюЭПВФайлеDocXls(ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
					Если ЗначениеЗаполнено(ВизуализацияСсылка) Тогда
						ЭлементФайлы.Ссылка = ВизуализацияСсылка;
					КонецЕсли;	
					
				#КонецЕсли	
				
			КонецЕсли;
			
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Состояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершитьВыборИсполнителей", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор получателей письма'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все пользователи'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные пользователи'"));
	ПараметрыФормы.Вставить("КонтролироватьДублиАдресатов", Истина);
	
	ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыборИсполнителей(ВыбранныеИсполнители, ДопПараметры) Экспорт
	
	Если ВыбранныеИсполнители = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		
		Если Элементы.Получатели.ТекущиеДанные.Адрес = "" Тогда
			
			Стр = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
			Если Стр <> Неопределено Тогда
				Получатели.Удалить(Стр);
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗавершитьВыборИсполнителейСервер(ВыбранныеИсполнители, ДопПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает адрес электронной почты пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - адрес которого нужно получить
//
// Возвращаемое значение:
//    Адресат - Структура - найденные данные.
//    ""      - Строка - при отсутствии данных.
//
Функция ПолучитьАдресЭлектроннойПочты(Пользователь) Экспорт 
	
	ОбъектКИ = Новый Массив;
	ОбъектКИ.Добавить(Пользователь);
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбъектКИ, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,, ТекущаяДата());
	
	Если ТаблицаКонтактов.Количество() > 0 Тогда
		Адрес = ТаблицаКонтактов[0].Представление;
		Представление = Строка(Пользователь);
		Адресат = Новый Структура("Контакт, Адрес, ОтображаемоеИмя",
			Пользователь, Адрес, Представление);
		
		Возврат Адресат;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ЗавершитьВыборИсполнителейСервер(ВыбранныеИсполнители, ДопПараметры) Экспорт
	
	Для Каждого Эл Из ВыбранныеИсполнители Цикл
		
		СтрокаДанных = Получатели.Добавить();
		СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'");	
		
		СтруктАдрес = ПолучитьАдресЭлектроннойПочты(Эл.Контакт);
		Если ТипЗнч(СтруктАдрес) = Тип("Структура") Тогда
			СтрокаДанных.Адрес = СтрШаблон("%1 <%2>", СтруктАдрес.ОтображаемоеИмя, СтруктАдрес.Адрес);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбора(Текст)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
			|	Сотрудники.Ссылка КАК Ссылка,
			|	Сотрудники.Наименование КАК Представление
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Наименование ПОДОБНО &Текст
			|	И Сотрудники.Действует = Истина
			|	И Сотрудники.ПометкаУдаления = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 20
			|	Контрагенты.Ссылка,
			|	Контрагенты.Наименование
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Наименование ПОДОБНО &Текст
			|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 20
			|	КонтактныеЛица.Ссылка,
			|	КонтактныеЛица.Наименование
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|ГДЕ
			|	КонтактныеЛица.Наименование ПОДОБНО &Текст
			|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 20
			|	СотрудникиКонтактнаяИнформация.Ссылка,
			|	СотрудникиКонтактнаяИнформация.Ссылка.Наименование
			|ИЗ
			|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
			|ГДЕ
			|	СотрудникиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|	И СотрудникиКонтактнаяИнформация.АдресЭП ПОДОБНО &Текст
			|	И СотрудникиКонтактнаяИнформация.Ссылка.ПометкаУдаления = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 20
			|	КонтрагентыКонтактнаяИнформация.Ссылка,
			|	КонтрагентыКонтактнаяИнформация.Ссылка.Наименование
			|ИЗ
			|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
			|ГДЕ
			|	КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|	И КонтрагентыКонтактнаяИнформация.АдресЭП ПОДОБНО &Текст
			|	И КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 20
			|	КонтактныеЛицаКонтактнаяИнформация.Ссылка,
			|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Наименование
			|ИЗ
			|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
			|ГДЕ
			|	КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|	И КонтактныеЛицаКонтактнаяИнформация.АдресЭП ПОДОБНО &Текст
			|	И КонтактныеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Сортировать("Представление");
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ВыбранныеАдреса = Новый Соответствие;
	
	Для Каждого Выборка Из Таблица Цикл
		
		СтруктАдрес = ПолучитьАдресЭлектроннойПочты(Выборка.Ссылка);
		Если ТипЗнч(СтруктАдрес) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;	
		
		Адрес = СтруктАдрес.Адрес;
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ВыбранныеАдреса.Получить(СтруктАдрес.Адрес) <> Неопределено Тогда
			Продолжить; // уже есть такой адрес
		КонецЕсли;	
			
		Представление = СтрШаблон("%1 <%2>", СтруктАдрес.ОтображаемоеИмя, СтруктАдрес.Адрес);
		ДанныеВыбора.Добавить(Выборка.Ссылка, Представление);
		ВыбранныеАдреса.Вставить(СтруктАдрес.Адрес, 1);
		
	КонецЦикла;	
	
	Возврат ДанныеВыбора;
		
КонецФункции		

&НаКлиенте
Процедура ПолучателиПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И СтрДлина(Текст) >= 2 Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = СформироватьДанныеВыбора(Текст);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	// ВыбранноеЗначение - пользователь
	Если ЗначениеЗаполнено(ВыбранноеЗначение)
		И (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
		Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники")
		Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица")) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктАдрес = ПолучитьАдресЭлектроннойПочты(ВыбранноеЗначение);
		Если ТипЗнч(СтруктАдрес) = Тип("Структура") Тогда
			
			ТекущиеДанные.Адрес = СтрШаблон("%1 <%2>", СтруктАдрес.ОтображаемоеИмя, СтруктАдрес.Адрес);
			ТекущиеДанные.ТипАдреса = НСтр("ru='Кому:'");	
			
		КонецЕсли;	
		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	Элементы.ГруппаСправка.Видимость = Ложь;
	Элементы.ГруппаКоманд.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	МК.ВыровнятьЭлементФормы(Элементы.Профиль);
	Элементы.Переместить(Элементы.Отправить, ЭтотОбъект);
	МК.ОформитьАкцентнуюКнопку(Элементы.Отправить);
	
КонецПроцедуры
