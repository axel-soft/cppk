
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерсияФормата = КОДСервер.ТекущаяВерсияФормата();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьОписание(Команда)
	
	ОбновитьТипыИСоздатьОписаниеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)

	Если Не Описание.КоличествоСтрок() Тогда
		ОбновитьТипыИСоздатьОписаниеНаСервере();
	КонецЕсли;
	
	ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохранения.Фильтр = "Файлы XML-схем (*.xsd)|*.xsd";
	ДиалогСохранения.Заголовок = Нстр("ru = 'Выберите файл для сохранения'");
	ДиалогСохранения.МножественныйВыбор = Ложь;
	ДиалогСохранения.Показать(Новый ОписаниеОповещения("ДиалогСохраненияФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогСохраненияФайлаЗавершение(ВыбранныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Описание.НачатьЗапись(, ВыбранныйФайл[0]);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьТипыИСоздатьОписаниеНаСервере()
	
	Справочники.ТипыДанныхКОД.ОбновитьТипыДанныхКОД();
	СоздатьОписаниеНаСервере();

КонецПроцедуры

&НаСервере
Процедура СоздатьОписаниеНаСервере()
	
	ДополнительныеПараметры = ДополнительныеПараметры();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:schema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("ns1", "http://v8.1c.ru/8.1/data/core");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("ns2", "http://v8.1c.ru/8.1/data-composition-system/settings");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("ns3", "http://v8.1c.ru/8.1/data-composition-system/core");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("ns4", "http://v8.1c.ru/8.1/data/enterprise");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("tns", КОДСервер.ПространствоИменВерсииФормата(ВерсияФормата));
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьАтрибут("targetNamespace", КОДСервер.ПространствоИменВерсииФормата(ВерсияФормата));
	ЗаписьXML.ЗаписатьАтрибут("attributeFormDefault", "unqualified");
	ЗаписьXML.ЗаписатьАтрибут("elementFormDefault", "qualified");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:import");
	ЗаписьXML.ЗаписатьАтрибут("namespace", "http://v8.1c.ru/8.1/data/core");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:import");
	ЗаписьXML.ЗаписатьАтрибут("namespace", "http://v8.1c.ru/8.1/data-composition-system/settings");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:import");
	ЗаписьXML.ЗаписатьАтрибут("namespace", "http://v8.1c.ru/8.1/data-composition-system/core");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписатьБазовыеТипы(ЗаписьXML);
	
	НаборКонстант = Новый СписокЗначений;
	СписокТиповКОД = Новый СписокЗначений;
	
	Для Каждого ТипДанных Из Метаданные.ОпределяемыеТипы.ОписаниеТиповДанныхКОД.Тип.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипДанных);
		Если ОбщегоНазначения.ЭтоКонстанта(ОбъектМетаданных) Тогда
			НаборКонстант.Добавить(ОбъектМетаданных, ОбъектМетаданных.ПолноеИмя());
		Иначе
			СписокТиповКОД.Добавить(ОбъектМетаданных, ОбъектМетаданных.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	НаборКонстант.СортироватьПоПредставлению();
	СписокТиповКОД.СортироватьПоПредставлению();
	
	ЗаписатьОписаниеНабораКонстант(ЗаписьXML, НаборКонстант.ВыгрузитьЗначения());
		
	Для Каждого ЭлементСписка Из СписокТиповКОД Цикл
		ЗаписатьОписаниеТипа(ЗаписьXML, ЭлементСписка.Значение, ДополнительныеПараметры);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ОписаниеСтрокой = ЗаписьXML.Закрыть();
	Описание.УстановитьТекст(ОписаниеСтрокой);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьБазовыеТипы(ЗаписьXML);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "БизнесПроцесс");
	ЗаписьXML.ЗаписатьАтрибут("abstract", "true");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:СсылочныйОбъект");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "ВедущаяЗадача", "tns:Ссылка");
	ЗаписатьСвойство(ЗаписьXML, "Дата", "xs:dateTime");
	ЗаписатьСвойство(ЗаписьXML, "Завершен", "xs:boolean");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "Номер", "xs:string");
	ЗаписатьСвойство(ЗаписьXML, "Стартован", "xs:boolean");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:simpleType");
	ЗаписьXML.ЗаписатьАтрибут("name", "Булево");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:restriction");
	ЗаписьXML.ЗаписатьАтрибут("base", "xs:boolean");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ГруппаИлиЭлементОтбораКомпоновкиДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "Группа", "tns:ГруппаЭлементовОтбораКомпоновкиДанных");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "Элемент", "tns:ЭлементОтбораКомпоновкиДанных");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ГруппаЭлементовОтбораКомпоновкиДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "ТипГруппы", "ns2:DataCompositionFilterItemsGroupType");
	ЗаписатьСвойство(ЗаписьXML, "Использование", "xs:boolean");
	ЗаписатьСвойство(ЗаписьXML, "Представление", "xs:string");
	ЗаписатьСвойство(ЗаписьXML, "Применение", "ns2:DataCompositionFilterApplicationType");
	ЗаписатьСписок(ЗаписьXML, "Элементы", "tns:ГруппаИлиЭлементОтбораКомпоновкиДанных");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:simpleType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ДатаВремя");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:restriction");
	ЗаписьXML.ЗаписатьАтрибут("base", "xs:dateTime");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "Документ");
	ЗаписьXML.ЗаписатьАтрибут("abstract", "true");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:СсылочныйОбъект");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Дата", "xs:dateTime");
	ЗаписатьСвойство(ЗаписьXML, "Проведен", "xs:boolean");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "Задача");
	ЗаписьXML.ЗаписатьАтрибут("abstract", "true");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:СсылочныйОбъект");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "БизнесПроцесс", "tns:Ссылка", "true");
	ЗаписатьСвойство(ЗаписьXML, "Выполнена", "xs:boolean");
	ЗаписатьСвойство(ЗаписьXML, "Дата", "xs:dateTime");
	ЗаписатьСвойство(ЗаписьXML, "Наименование", "xs:string");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "Номер", "xs:string");
	ЗаписатьСвойство(ЗаписьXML, "ТочкаМаршрута", "tns:ТочкаМаршрутаБизнесПроцесса");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ЗапросНаОтправкуСсылочныхДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьНачалоСписка(ЗаписьXML, "ЭлементыДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "СсылкаДанных", "tns:Ссылка", "true");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ЗапросНаПроверкуСсылочныхДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "ТекстЗапроса", "xs:string");
	ЗаписатьНачалоСписка(ЗаписьXML, "ЭлементыДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "СсылкаДанных", "tns:Ссылка", "true");
	ЗаписатьНачалоСписка(ЗаписьXML, "ЗначенияПолей");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Поле", "xs:string");
	ЗаписатьСвойство(ЗаписьXML, "Значение",, "true", "unqualified");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ИдентификаторОбъектаМетаданных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "ПолноеИмя", "xs:string", "true");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ИерархическийСправочник");
	ЗаписьXML.ЗаписатьАтрибут("abstract", "true");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:Справочник");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "ЭтоГруппа", "xs:boolean");
	ЗаписатьСвойство(ЗаписьXML, "Родитель", "tns:Ссылка");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "КлючИЗначение");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Ключ", "xs:string");
	ЗаписатьСвойство(ЗаписьXML, "Значение", , "true", "unqualified");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "НастройкаВариантаОтчетаДокументооборот");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "КлючВарианта", "xs:string");
	ЗаписатьСвойство(ЗаписьXML, "Отчет",, "true", "unqualified");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "НастройкиКомпоновкиДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Отбор", "tns:ОтборКомпоновкиДанных");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ОписаниеТипов");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
	ЗаписьXML.ЗаписатьАтрибут("name", "КвалификаторыДаты");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "ЧастиДаты", "xs:string");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
	ЗаписьXML.ЗаписатьАтрибут("name", "КвалификаторыДвоичныхДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Длина", "xs:decimal");
	ЗаписатьСвойство(ЗаписьXML, "ДопустимаяДлина", "xs:string");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
	ЗаписьXML.ЗаписатьАтрибут("name", "КвалификаторыСтроки");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Длина", "xs:decimal");
	ЗаписатьСвойство(ЗаписьXML, "ДопустимаяДлина", "xs:string");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
	ЗаписьXML.ЗаписатьАтрибут("name", "КвалификаторыЧисла");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "ДопустимыйЗнак", "xs:string");
	ЗаписатьСвойство(ЗаписьXML, "Разрядность", "xs:decimal");
	ЗаписатьСвойство(ЗаписьXML, "РазрядностьДробнойЧасти", "xs:decimal");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписатьСписок(ЗаписьXML, "Типы", "xs:string");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ОтборКомпоновкиДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСписок(ЗаписьXML, "Элементы", "tns:ГруппаИлиЭлементОтбораКомпоновкиДанных");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ОтметкаВремениРегистра");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Тип", "xs:string");
	ЗаписатьСвойство(ЗаписьXML, "Регистр",,, "unqualified");
	ЗаписатьСвойство(ЗаписьXML, "Отметка", "xs:decimal");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ОтметкаВремениСсылочныхДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Ссылка", "tns:Ссылка");
	ЗаписатьСвойство(ЗаписьXML, "Отметка", "xs:decimal");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ПланВидовХарактеристик");
	ЗаписьXML.ЗаписатьАтрибут("abstract", "true");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:СсылочныйОбъект");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "ТипЗначения", "tns:ОписаниеТипов");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "ИмяПредопределенныхДанных", "xs:string");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ПолнаяРоль");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Владелец", "tns:Ссылка");
	ЗаписатьСвойство(ЗаписьXML, "ОсновнойОбъектАдресации", "tns:Ссылка", "true");
	ЗаписатьСвойство(ЗаписьXML, "ДополнительныйОбъектАдресации", "tns:Ссылка", "true");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ИмяПредмета");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Наименование", "xs:string");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ПравоеЗначениеОтбораКомпоновкиДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "Значение",, "true", "unqualified");
	ЗаписатьСписок(ЗаписьXML, "СписокЗначений", "tns:ЭлементСпискаПравогоЗначенияОтбораКомпоновкиДанных");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "Регистр");
	ЗаписьXML.ЗаписатьАтрибут("abstract", "true");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "ОтметкаВремениОтправителя", "xs:decimal");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "ОтметкаВремениПолучателя", "xs:decimal");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "РегистрНакопления");
	ЗаписьXML.ЗаписатьАтрибут("abstract", "true");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:Регистр");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "РегистрСведений");
	ЗаписьXML.ЗаписатьАтрибут("abstract", "true");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:Регистр");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "Справочник");
	ЗаписьXML.ЗаписатьАтрибут("abstract", "true");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:СсылочныйОбъект");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "ИмяПредопределенныхДанных", "xs:string");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ПланОбмена");
	ЗаписьXML.ЗаписатьАтрибут("abstract", "true");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:СсылочныйОбъект");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "Ссылка");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Тип", "xs:string");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "Идентификатор", "xs:string");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "ИмяПредопределенныхДанных", "xs:string");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "ПолнаяРоль", "tns:ПолнаяРоль");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "ИмяПредмета", "tns:ИмяПредмета");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "НастройкаВариантаОтчетаДокументооборот", "tns:НастройкаВариантаОтчетаДокументооборот");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "СсылочныйОбъект");
	ЗаписьXML.ЗаписатьАтрибут("abstract", "true");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "ИдентификаторСсылкиОбъекта", "xs:string");
	ЗаписатьСвойство(ЗаписьXML, "ПометкаУдаления", "xs:boolean");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "ОтметкаВремениОтправителя", "xs:decimal");
	ЗаписатьНеобязательноеСвойство(ЗаписьXML, "ОтметкаВремениПолучателя", "xs:decimal");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:simpleType");
	ЗаписьXML.ЗаписатьАтрибут("name", "Строка");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:restriction");
	ЗаписьXML.ЗаписатьАтрибут("base", "xs:string");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "Структура");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСписок(ЗаписьXML, "КлючиИЗначения", "tns:КлючИЗначение");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:simpleType");
	ЗаписьXML.ЗаписатьАтрибут("name", "Сумма");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:restriction");
	ЗаписьXML.ЗаписатьАтрибут("base", "xs:decimal");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:totalDigits");
	ЗаписьXML.ЗаписатьАтрибут("value", "15");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:fractionDigits");
	ЗаписьXML.ЗаписатьАтрибут("value", "2");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ТочкаМаршрутаБизнесПроцесса");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "ТипПроцесса", "xs:string");
	ЗаписатьСвойство(ЗаписьXML, "Имя", "xs:string", "true");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "УдалениеОбъекта");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Ссылка", "tns:Ссылка");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "УникальныйИдентификатор");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Идентификатор", "xs:string");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:simpleType");
	ЗаписьXML.ЗаписатьАтрибут("name", "Число");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:restriction");
	ЗаписьXML.ЗаписатьАтрибут("base", "xs:decimal");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ЭлементОтбораКомпоновкиДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "ВидСравнения", "ns2:DataCompositionComparisonType");
	ЗаписатьСвойство(ЗаписьXML, "Использование", "xs:boolean");
	ЗаписатьСвойство(ЗаписьXML, "ЛевоеЗначение", "ns3:Field", "true");
	ЗаписатьСвойство(ЗаписьXML, "ПравоеЗначение", "tns:ПравоеЗначениеОтбораКомпоновкиДанных");
	ЗаписатьСвойство(ЗаписьXML, "Представление", "xs:string");
	ЗаписатьСвойство(ЗаписьXML, "Применение", "ns2:DataCompositionFilterApplicationType");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "ЭлементСпискаПравогоЗначенияОтбораКомпоновкиДанных");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Значение",, "true", "unqualified");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОписаниеНабораКонстант(ЗаписьXML, НаборКонстант)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", "НаборКонстант");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	Для Каждого Константа Из НаборКонстант Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
		ЗаписьXML.ЗаписатьАтрибут("name", Константа.Имя);
		ЗаписатьСведенияОТипе(ЗаписьXML, Константа.Тип.Типы());
		ЗаписьXML.ЗаписатьАтрибут("minOccurs", "0");
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
  	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОписаниеТипа(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры)
	
	Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		ЗаписатьОписаниеРегистраСведений(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры);
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		ЗаписатьОписаниеРегистраНакопления(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры);
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		ЗаписатьОписаниеСправочника(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры);
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		ЗаписатьОписаниеДокумента(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры);
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		ЗаписатьОписаниеПланаВидовХарактеристик(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры);
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		ЗаписатьОписаниеБизнесПроцесса(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры);
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		ЗаписатьОписаниеЗадачи(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры);
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		ЗаписатьОписаниеПланаОбмена(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры);
	Иначе
		ВызватьИсключение "Неизвестный ОМ: " + ОбъектМетаданных;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОписаниеСправочника(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры)
	
	ТипДанных = КОДСлужебный.ТипДанныхКОДПоОбъектуМетаданных(ОбъектМетаданных);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", ОбъектМетаданных.ПолноеИмя());
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	
	Если ОбъектМетаданных.Иерархический Тогда
		ЗаписьXML.ЗаписатьАтрибут("base", "tns:ИерархическийСправочник");
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("base", "tns:Справочник");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя <> "Код"
				И Реквизит.Имя <> "Наименование"
				И Реквизит.Имя <> "Владелец" Тогда
			Продолжить;
		КонецЕсли;
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Необязательный = 
			ОбъектМетаданных.Иерархический
				И ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
				И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента;
		ЗаписатьРеквизит(ЗаписьXML, Реквизит, Необязательный);
	КонецЦикла;
	
	Для Каждого Реквизит Из ДополнительныеПараметры.ОбщиеРеквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
		Если ЭлементСостава = Неопределено
				Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
				Или (ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
						И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Если ОбъектМетаданных = Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты Тогда
		ЗаписатьСвойство(ЗаписьXML, "Пароль", "xs:string", "true");
		ЗаписатьСвойство(ЗаписьXML, "ПарольSMTP", "xs:string", "true");
		
		ЗаписатьСвойство(ЗаписьXML, "access_token", "xs:string", "true");
		ЗаписатьСвойство(ЗаписьXML, "refresh_token", "xs:string", "true");
		ЗаписатьСвойство(ЗаписьXML, "ДействуетДо", "xs:dateTime", "true");
	ИначеЕсли ОбъектМетаданных = Метаданные.Справочники.Пользователи Тогда
		ЗаписатьНеобязательноеСвойство(ЗаписьXML, "ИмяПользователяИБ", "xs:string", "true");
		ЗаписатьНеобязательноеСвойство(ЗаписьXML, "СохраняемоеЗначениеПароля", "xs:string", "true");
	ИначеЕсли ОбъектМетаданных = Метаданные.Справочники.УзлыКОД Тогда
		ЗаписатьНеобязательноеСвойство(ЗаписьXML, "НастройкиТранспорта", "ns1:ValueStorage", "true");
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если СтрНачинаетсяС(ТабличнаяЧасть.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипДанных.ИсключаемыеДанные.Найти(ТабличнаяЧасть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьТабличнуюЧасть(ЗаписьXML, ТабличнаяЧасть);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОписаниеДокумента(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры)
	
	ТипДанных = КОДСлужебный.ТипДанныхКОДПоОбъектуМетаданных(ОбъектМетаданных);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", ОбъектМетаданных.ПолноеИмя());
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:Документ");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	Если ОбъектМетаданных.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Число Тогда
		ЗаписатьНеобязательноеСвойство(ЗаписьXML, "Номер", "xs:decimal");	
	Иначе
		ЗаписатьНеобязательноеСвойство(ЗаписьXML, "Номер", "xs:string");
	КонецЕсли;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ДополнительныеПараметры.ОбщиеРеквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
		Если ЭлементСостава = Неопределено
				Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
				Или (ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
						И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если СтрНачинаетсяС(ТабличнаяЧасть.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипДанных.ИсключаемыеДанные.Найти(ТабличнаяЧасть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьТабличнуюЧасть(ЗаписьXML, ТабличнаяЧасть);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОписаниеПланаВидовХарактеристик(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры)
	
	ТипДанных = КОДСлужебный.ТипДанныхКОДПоОбъектуМетаданных(ОбъектМетаданных);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", ОбъектМетаданных.ПолноеИмя());
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:ПланВидовХарактеристик");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя <> "Код"
			И Реквизит.Имя <> "Наименование" Тогда
			Продолжить;
		КонецЕсли;
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ДополнительныеПараметры.ОбщиеРеквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
		Если ЭлементСостава = Неопределено
				Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
				Или (ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
						И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если СтрНачинаетсяС(ТабличнаяЧасть.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипДанных.ИсключаемыеДанные.Найти(ТабличнаяЧасть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьТабличнуюЧасть(ЗаписьXML, ТабличнаяЧасть);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОписаниеБизнесПроцесса(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры)
	
	ТипДанных = КОДСлужебный.ТипДанныхКОДПоОбъектуМетаданных(ОбъектМетаданных);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", ОбъектМетаданных.ПолноеИмя());
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:БизнесПроцесс");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ДополнительныеПараметры.ОбщиеРеквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
		Если ЭлементСостава = Неопределено
				Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
				Или (ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
						И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если СтрНачинаетсяС(ТабличнаяЧасть.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипДанных.ИсключаемыеДанные.Найти(ТабличнаяЧасть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьТабличнуюЧасть(ЗаписьXML, ТабличнаяЧасть);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОписаниеЗадачи(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры)
	
	ТипДанных = КОДСлужебный.ТипДанныхКОДПоОбъектуМетаданных(ОбъектМетаданных);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", ОбъектМетаданных.ПолноеИмя());
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:Задача");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	Для Каждого Реквизит Из ОбъектМетаданных.РеквизитыАдресации Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ДополнительныеПараметры.ОбщиеРеквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
		Если ЭлементСостава = Неопределено
				Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
				Или (ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
						И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если СтрНачинаетсяС(ТабличнаяЧасть.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипДанных.ИсключаемыеДанные.Найти(ТабличнаяЧасть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьТабличнуюЧасть(ЗаписьXML, ТабличнаяЧасть);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОписаниеПланаОбмена(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры)
	
	ТипДанных = КОДСлужебный.ТипДанныхКОДПоОбъектуМетаданных(ОбъектМетаданных);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", ОбъектМетаданных.ПолноеИмя());
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:ПланОбмена");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя <> "Код"
				И Реквизит.Имя <> "Наименование" Тогда
			Продолжить;
		КонецЕсли;
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ДополнительныеПараметры.ОбщиеРеквизиты Цикл
		Если ТипДанных.ИсключаемыеДанные.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
		Если ЭлементСостава = Неопределено
				Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
				Или (ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
						И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если СтрНачинаетсяС(ТабличнаяЧасть.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипДанных.ИсключаемыеДанные.Найти(ТабличнаяЧасть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьТабличнуюЧасть(ЗаписьXML, ТабличнаяЧасть);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОписаниеРегистраСведений(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры)
	
	Отборы = Новый Массив;
	СвойстваЗаписи = Новый Массив;
	
	Если ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		
		Отборы.Добавить("Регистратор");
		СвойстваЗаписи.Добавить("Активность");
		Если ОбъектМетаданных.ПериодичностьРегистраСведений
				<> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			СвойстваЗаписи.Добавить("Период");
		КонецЕсли;
		
		Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			СвойстваЗаписи.Добавить(Измерение);
		КонецЦикла;
		
		Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
			СвойстваЗаписи.Добавить(Ресурс);
		КонецЦикла;
		
		Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			СвойстваЗаписи.Добавить(Реквизит);
		КонецЦикла;
		
		Для Каждого Реквизит Из ДополнительныеПараметры.ОбщиеРеквизиты Цикл
			ЭлементСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
			Если ЭлементСостава = Неопределено
					Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
					Или (ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
							И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваЗаписи.Добавить(Реквизит);
		КонецЦикла;
		
	Иначе
		
		ИспользуетсяИдентификаторНабораЗаписей = Ложь;
		
		ИдентификаторНабораЗаписей =
			Метаданные.ОбщиеРеквизиты.ИдентификаторОтметкиВремени.Состав.Найти(ОбъектМетаданных);
		Если ИдентификаторНабораЗаписей <> Неопределено
				И ИдентификаторНабораЗаписей.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
				
			ИспользуетсяИдентификаторНабораЗаписей = Истина;
		КонецЕсли;
			
		Если ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
			Отборы.Добавить("Период");
		ИначеЕсли ОбъектМетаданных.ПериодичностьРегистраСведений
				<> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			СвойстваЗаписи.Добавить("Период");
		КонецЕсли;
		
		Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Если ИспользуетсяИдентификаторНабораЗаписей Или Измерение.ОсновнойОтбор Тогда
				Отборы.Добавить(Измерение);
			Иначе
				СвойстваЗаписи.Добавить(Измерение);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
			СвойстваЗаписи.Добавить(Ресурс);
		КонецЦикла;
		
		Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			СвойстваЗаписи.Добавить(Реквизит);
		КонецЦикла;
		
		Для Каждого Реквизит Из ДополнительныеПараметры.ОбщиеРеквизиты Цикл
			ЭлементСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
			Если ЭлементСостава = Неопределено
					Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
					Или (ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
							И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваЗаписи.Добавить(Реквизит);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", ОбъектМетаданных.ПолноеИмя());
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:РегистрСведений");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
	ЗаписьXML.ЗаписатьАтрибут("name", "Отбор");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	Для Каждого Отбор Из Отборы Цикл
		Если Отбор = "Регистратор" Тогда
			ЗаписатьСвойство(ЗаписьXML, "Регистратор", "tns:Ссылка", "true");
		ИначеЕсли Отбор = "Период" Тогда
			ЗаписатьСвойство(ЗаписьXML, "Период", "xs:dateTime");
		Иначе
			ЗаписатьРеквизит(ЗаписьXML, Отбор);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписатьНачалоСписка(ЗаписьXML, "Записи");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	Для Каждого СвойствоЗаписи Из СвойстваЗаписи Цикл
		Если СвойствоЗаписи = "Период" Тогда
			ЗаписатьСвойство(ЗаписьXML, "Период", "xs:dateTime");
		ИначеЕсли СвойствоЗаписи = "Активность" Тогда
			ЗаписатьСвойство(ЗаписьXML, "Активность", "xs:boolean");
		Иначе
			ЗаписатьРеквизит(ЗаписьXML, СвойствоЗаписи);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОписаниеРегистраНакопления(ЗаписьXML, ОбъектМетаданных, ДополнительныеПараметры)
	
	СвойстваЗаписи = Новый Массив;
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		СвойстваЗаписи.Добавить(Измерение);
	КонецЦикла;
	
	Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
		СвойстваЗаписи.Добавить(Ресурс);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		СвойстваЗаписи.Добавить(Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ДополнительныеПараметры.ОбщиеРеквизиты Цикл
		ЭлементСостава = Реквизит.Состав.Найти(ОбъектМетаданных);
		Если ЭлементСостава = Неопределено
				Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
				Или (ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
						И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваЗаписи.Добавить(Реквизит);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьАтрибут("name", ОбъектМетаданных.ПолноеИмя());
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexContent");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:extension");
	ЗаписьXML.ЗаписатьАтрибут("base", "tns:Регистр");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
	ЗаписьXML.ЗаписатьАтрибут("name", "Отбор");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	
	ЗаписатьСвойство(ЗаписьXML, "Регистратор", "tns:Ссылка", "true");
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписатьНачалоСписка(ЗаписьXML, "Записи");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	ЗаписатьСвойство(ЗаписьXML, "Период", "xs:dateTime");
	ЗаписатьСвойство(ЗаписьXML, "Активность", "xs:boolean");
	
	Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		ЗаписатьСвойство(ЗаписьXML, "ВидДвижения", "ns4:AccumulationRecordType");
	КонецЕсли;
	
	Для Каждого СвойствоЗаписи Из СвойстваЗаписи Цикл
		ЗаписатьРеквизит(ЗаписьXML, СвойствоЗаписи);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьРеквизит(ЗаписьXML, Реквизит, Необязательный = Ложь)
	
	Если СтрНачинаетсяС(Реквизит.Имя, "Удалить") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
	ЗаписьXML.ЗаписатьАтрибут("name", Реквизит.Имя);
	
	ЗаписатьСведенияОТипе(ЗаписьXML, Реквизит.Тип.Типы());
	
	Если Необязательный Тогда
		ЗаписьXML.ЗаписатьАтрибут("minOccurs", "0");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьТабличнуюЧасть(ЗаписьXML, ТабличнаяЧасть)
	
	ЗаписатьНачалоСписка(ЗаписьXML, ТабличнаяЧасть.Имя);
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:complexType");
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:sequence");
	Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
		ЗаписатьРеквизит(ЗаписьXML, Реквизит);
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСвойство(ЗаписьXML, name, type = Неопределено, nillable = Неопределено, form = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
	ЗаписьXML.ЗаписатьАтрибут("name", name);
	Если type <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("type", type);
	КонецЕсли;
	Если nillable <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("nillable", nillable);
	КонецЕсли;
	Если form <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("form", form);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНеобязательноеСвойство(ЗаписьXML, name, type, nillable = Неопределено, form = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
	ЗаписьXML.ЗаписатьАтрибут("name", name);
	Если type <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("type", type);
	КонецЕсли;
	Если nillable <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("nillable", nillable);
	КонецЕсли;
	Если form <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("form", form);
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("minOccurs", "0");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСписок(ЗаписьXML, name, type = Неопределено, nillable = Неопределено, form = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
	ЗаписьXML.ЗаписатьАтрибут("name", name);
	Если type <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("type", type);
	КонецЕсли;
	Если nillable <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("nillable", nillable);
	КонецЕсли;
	Если form <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("form", form);
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("minOccurs", "0");
	ЗаписьXML.ЗаписатьАтрибут("maxOccurs", "unbounded");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНачалоСписка(ЗаписьXML, name, type = Неопределено, nillable = Неопределено, form = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("xs:element");
	ЗаписьXML.ЗаписатьАтрибут("name", name);
	Если type <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("type", type);
	КонецЕсли;
	Если nillable <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("nillable", nillable);
	КонецЕсли;
	Если form <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("form", form);
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("minOccurs", "0");
	ЗаписьXML.ЗаписатьАтрибут("maxOccurs", "unbounded");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСведенияОТипе(ЗаписьXML, Тип)
	
	Если Тип.Количество() = 1 Тогда
		Элемент = Тип[0];
		
		Если Элемент = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			ЗаписьXML.ЗаписатьАтрибут("type", "tns:ИдентификаторОбъектаМетаданных");
		ИначеЕсли (Справочники.ТипВсеСсылки().СодержитТип(Элемент)
					Или Документы.ТипВсеСсылки().СодержитТип(Элемент)
					Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Элемент)
					Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Элемент)
					Или Задачи.ТипВсеСсылки().СодержитТип(Элемент)
					Или Перечисления.ТипВсеСсылки().СодержитТип(Элемент)
					Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Элемент)) Тогда				
			ЗаписьXML.ЗаписатьАтрибут("type", "tns:Ссылка");
		ИначеЕсли Элемент = Тип("Булево") Тогда
			ЗаписьXML.ЗаписатьАтрибут("type", "xs:boolean");
		ИначеЕсли Элемент = Тип("Дата") Тогда
			ЗаписьXML.ЗаписатьАтрибут("type", "xs:dateTime");
		ИначеЕсли Элемент = Тип("Строка") Тогда
			ЗаписьXML.ЗаписатьАтрибут("type", "xs:string");
		ИначеЕсли Элемент = Тип("Число") Тогда
			ЗаписьXML.ЗаписатьАтрибут("type", "xs:decimal");
		ИначеЕсли Элемент = Тип("ХранилищеЗначения") Тогда
			ЗаписьXML.ЗаписатьАтрибут("type", "ns1:ValueStorage");
			ЗаписьXML.ЗаписатьАтрибут("nillable", "true");
		ИначеЕсли Элемент = Тип("УникальныйИдентификатор") Тогда
			ЗаписьXML.ЗаписатьАтрибут("type", "tns:УникальныйИдентификатор");
			ЗаписьXML.ЗаписатьАтрибут("nillable", "true");
		ИначеЕсли Элемент = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.Исполнение")
				Или Элемент = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.КомплексныйПроцесс")
				Или Элемент = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.Ознакомление")
				Или Элемент = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.Подписание")
				Или Элемент = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.Приглашение")
				Или Элемент = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.Рассмотрение")
				Или Элемент = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.Регистрация")
				Или Элемент = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.РешениеВопросовВыполненияЗадач")
				Или Элемент = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.Согласование")
				Или Элемент = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.Утверждение") Тогда
			ЗаписьXML.ЗаписатьАтрибут("type", "tns:ТочкаМаршрутаБизнесПроцесса");
		Иначе
			ТекстИсключения = СтрШаблон(Нстр("ru = 'Неизвестный тип: %1'"), Элемент);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	Иначе
		ТолькоСсылки = Истина;
		ЕстьИОМ = Ложь;
		
		Для Каждого Элемент Из Тип Цикл
			ТолькоСсылки = ТолькоСсылки 
				И (Справочники.ТипВсеСсылки().СодержитТип(Элемент)
					Или Документы.ТипВсеСсылки().СодержитТип(Элемент)
					Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Элемент)
					Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Элемент)
					Или Задачи.ТипВсеСсылки().СодержитТип(Элемент)
					Или Перечисления.ТипВсеСсылки().СодержитТип(Элемент)
					Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Элемент));
			ЕстьИОМ = ЕстьИОМ Или Элемент = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных");
		КонецЦикла;
		
		Если ТолькоСсылки И Не ЕстьИОМ Тогда
			ЗаписьXML.ЗаписатьАтрибут("type", "tns:Ссылка");
			ЗаписьXML.ЗаписатьАтрибут("nillable", "true");
		Иначе // anyType
			ЗаписьXML.ЗаписатьАтрибут("nillable", "true");
			ЗаписьXML.ЗаписатьАтрибут("form", "unqualified");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДополнительныеПараметры()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбщиеРеквизиты", ОбщиеРеквизитыВключаемыеВОписание());
	
	Возврат Параметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбщиеРеквизитыВключаемыеВОписание()
	
	ОбщиеРеквизиты = Новый Массив;
	
	ОбщиеРеквизиты.Добавить(Метаданные.ОбщиеРеквизиты.УзелОбработки);
	ОбщиеРеквизиты.Добавить(Метаданные.ОбщиеРеквизиты.НаименованиеЯзык1);
	ОбщиеРеквизиты.Добавить(Метаданные.ОбщиеРеквизиты.НаименованиеЯзык2);
	ОбщиеРеквизиты.Добавить(Метаданные.ОбщиеРеквизиты.КомментарийЯзык1);
	ОбщиеРеквизиты.Добавить(Метаданные.ОбщиеРеквизиты.КомментарийЯзык2);
	
	Возврат ОбщиеРеквизиты;
	
КонецФункции

#КонецОбласти
