#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПриСозданииНаСервереРедакцииКонфигурации();	
	
	ЧтениеДокументовПредприятия = ПравоДоступа("Чтение", Метаданные.Справочники.ДокументыПредприятия);
		
	Если НЕ ЧтениеДокументовПредприятия Тогда
		Элементы.ГруппаДокументыПредприятия.Видимость = Ложь;
		Элементы.ГруппаИсходящиеДокументы.Видимость = Ложь;
		Элементы.ГруппаВходящиеДокументы.Видимость = Ложь;
	КонецЕсли;
	
	
	ИдентификаторКлиента = "";
	Если Параметры.Свойство("ИдентификаторКлиента") Тогда 
		ИдентификаторКлиента = Параметры.ИдентификаторКлиента;
	КонецЕсли;
	
	// Работа с документами
	ВидДокумента =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ВидДокумента");
	
	ВидВходящегоДокумента =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ВидВходящегоДокумента");
	
	ВидИсходящегоДокумента =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ВидИсходящегоДокумента");
	
	СпособОтправки =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"СпособОтправки");
	
	СпособПолучения =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"СпособПолучения");
	
	ПоказыватьПредупреждениеПриРегистрации =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ПоказыватьПредупреждениеПриРегистрации");
	
	Если ПоказыватьПредупреждениеПриРегистрации = Неопределено Тогда 
		ПоказыватьПредупреждениеПриРегистрации = Истина;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиРаботыСДокументами",
			"ПоказыватьПредупреждениеПриРегистрации",
			ПоказыватьПредупреждениеПриРегистрации);
	КонецЕсли;
	
	
	НастройкаВариантПредупрежденияПриЗакрытииВходящего = 
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ВариантПредупрежденияПриЗакрытииВходящего");
		
	Если НастройкаВариантПредупрежденияПриЗакрытииВходящего = Неопределено Тогда 
		// старая настройка
		ПоказыватьПредупреждениеПриЗакрытии = ХранилищеОбщихНастроек.Загрузить(
				"НастройкиРаботыСДокументами",
				"ПоказыватьПредупреждениеПриЗакрытии");
				
		Если ПоказыватьПредупреждениеПриЗакрытии = Неопределено Тогда 
			ПоказыватьПредупреждениеПриЗакрытии = Истина;
		КонецЕсли;	
		
		Если ПоказыватьПредупреждениеПриЗакрытии Тогда 
			ВариантПредупрежденияПриЗакрытииВходящего = "ПоказыватьПредупреждение";
		Иначе
			ВариантПредупрежденияПриЗакрытииВходящего = "ЗакрыватьБезРегистрации";
		КонецЕсли;	
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиРаботыСДокументами",
			"ВариантПредупрежденияПриЗакрытииВходящего",
			ВариантПредупрежденияПриЗакрытииВходящего);
	Иначе	
		ВариантПредупрежденияПриЗакрытииВходящего =
			НастройкаВариантПредупрежденияПриЗакрытииВходящего;
	КонецЕсли;		
		
	НастройкаИспользоватьОбзорДокументов =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ИспользоватьОбзорДокументов");
	
	Если НастройкаИспользоватьОбзорДокументов = Неопределено Тогда 
		ИспользоватьОбзорДокументов = Истина;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиРаботыСДокументами",
			"ИспользоватьОбзорДокументов",
			ИспользоватьОбзорДокументов);
	Иначе		
		ИспользоватьОбзорДокументов = НастройкаИспользоватьОбзорДокументов;	
	КонецЕсли;
	
	Организация = 
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"Организация");
	
	Валюта =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"Валюта");
	
	СпособОтраженияПередачиКонтрагенту =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"СпособОтраженияПередачиКонтрагенту");
	
	Если СпособОтраженияПередачиКонтрагенту = Неопределено Тогда
		СпособОтраженияПередачиКонтрагенту = Перечисления.СпособыОтраженияПередачиКонтрагенту.ЗадаватьВопрос;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиРаботыСДокументами",
			"СпособОтраженияПередачиКонтрагенту",
			СпособОтраженияПередачиКонтрагенту);
		
	КонецЕсли;
	
	ЗаполнитьСпискиВыбора();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
		Элементы.НастройкиВставкиРегНомера.Заголовок 
			= НСтр("ru = 'Настройки вставки рег номера...'");
	Иначе		
		Элементы.НастройкиВставкиРегНомера.Заголовок 
			= НСтр("ru = 'Настройки вставки рег номера и штрихкода...'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьЗакрытие", 
		ЭтотОбъект);

	ПоказатьВопрос(ОписаниеОповещения,
		НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
		РежимДиалогаВопрос.ДаНетОтмена,,
		КодВозвратаДиалога.Да);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Если НеобходимостьОбновленияИнтерфейса Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		ОбновитьИнтерфейсКлиент();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СохранитьНастройки();
	НеобходимостьОбновленияИнтерфейса = Истина;
	Модифицированность = Ложь;
	Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВставкиРегНомера(Команда)
	
	ПараметрыОткрытия = Новый Структура("РежимНастроек", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ВыборРасположенияПриВставкеРегНомерШтрихкод", ПараметрыОткрытия, , , , ,
		, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьЗакрытие(Ответ, Параметры) Экспорт 

	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки();
		НеобходимостьОбновленияИнтерфейса = Истина;
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	МассивСтруктур = Новый Массив;
	
	// НастройкиРаботыСДокументами
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", 
		"ВидДокумента", ВидДокумента);
	ДобавитьСтруктуруНастройки(МассивСтруктур, 
		"НастройкиРаботыСДокументами", "ВидВходящегоДокумента", ВидВходящегоДокумента);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", 
		"ВидИсходящегоДокумента", ВидИсходящегоДокумента);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", 
		"СпособОтправки", СпособОтправки);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", 
		"СпособПолучения", СпособПолучения);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", 
		"ПоказыватьПредупреждениеПриРегистрации", ПоказыватьПредупреждениеПриРегистрации);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", 
		"ВариантПредупрежденияПриЗакрытииВходящего", ВариантПредупрежденияПриЗакрытииВходящего);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", 
		"Организация", Организация);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", 
		"Валюта", Валюта);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", 
		"СпособОтраженияПередачиКонтрагенту", СпособОтраженияПередачиКонтрагенту);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", 
		"ИспользоватьОбзорДокументов", ИспользоватьОбзорДокументов);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтруктуруНастройки(МассивСтруктур, Объект, Настройка = Неопределено, Значение)
	
	МассивСтруктур.Добавить(Новый Структура ("Объект, Настройка, Значение", Объект, Настройка, Значение));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсКлиент()
	
	УстанавливаемыеПараметры = Новый Структура;
	УстанавливаемыеПараметры.Вставить("Пользователи", ПользователиКлиентСервер.ТекущийПользователь());
	УстановитьПараметрыФункциональныхОпцийИнтерфейса(УстанавливаемыеПараметры);
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереРедакцииКонфигурации()	
	
	Элементы.Организация.Заголовок = РедакцииКонфигурацииКлиентСервер.Организация();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()

	ВидыВходящихДокументов = Новый Массив();
	ВидыИсходящихДокументов = Новый Массив();
	ВидыВнутреннихДокументов = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	ВидыДокументов.Ссылка КАК Ссылка,
		|	0 КАК ВидДокумента
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	ВидыДокументов.ЯвляетсяВходящейКорреспонденцией
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 5
		|	ВидыДокументов.Ссылка,
		|	1
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 5
		|	ВидыДокументов.Ссылка,
		|	2
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	НЕ ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией
		|	И НЕ ВидыДокументов.ЯвляетсяВходящейКорреспонденцией
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
	
		Если Результат.ВидДокумента = 0 Тогда
		
			ВидыВходящихДокументов.Добавить(Результат.Ссылка);
			
		ИначеЕсли Результат.ВидДокумента = 1 Тогда
			
			ВидыИсходящихДокументов.Добавить(Результат.Ссылка);
			
		Иначе
			
			ВидыВнутреннихДокументов.Добавить(Результат.Ссылка);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Элементы.ВидВходящегоДокумента.СписокВыбора.ЗагрузитьЗначения(ВидыВходящихДокументов);
	Элементы.ВидИсходящегоДокумента.СписокВыбора.ЗагрузитьЗначения(ВидыИсходящихДокументов);
	Элементы.ВидДокумента.СписокВыбора.ЗагрузитьЗначения(ВидыВнутреннихДокументов);
	
КонецПроцедуры

#КонецОбласти
