
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВызватьИсключение НСтр("ru = 'Недопустимое открытие формы. Копирование настроек обработки производится из контекстного меню командами ""Выгрузить в файл"" и ""Загрузить из файла""'");
	
	Если Параметры.Свойство("ВидОбъектаИсточник") И ЗначениеЗаполнено(Параметры.ВидОбъектаИсточник) Тогда
		ВидОбъектаИсточник = Параметры.ВидОбъектаИсточник;
		ПрочитатьНастройкиИПравила();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОбъектаИсточникПриИзменении(Элемент)

	НастройкиОбработкиИсточника.Очистить();
	ПравилаОбработкиИсточника.ПолучитьЭлементы().Очистить();

	ПрочитатьНастройкиИПравила();

КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиИПравила()

	ЗапросНастроек = Новый Запрос;
	ЗапросНастроек.Текст = "ВЫБРАТЬ
							|	Ссылка,
							|	Представление
							|ИЗ
							|	Справочник.НастройкиОбработкиВидовОбъектов
							|Где
							|	ВидОбъекта = &ВидОбъекта
							|	И Не ПометкаУдаления";
	ЗапросНастроек.УстановитьПараметр("ВидОбъекта", ВидОбъектаИсточник);
	Настройки = ЗапросНастроек.Выполнить().Выгрузить();
	НастройкиОбработкиИсточника.Очистить();
	Для Каждого Настройка Из Настройки Цикл
		НастройкиОбработкиИсточника.Добавить(Настройка.Ссылка, Настройка.Представление);
	КонецЦикла;
	
	ЗапросПравил = Новый Запрос;
	ЗапросПравил.Текст = "Выбрать
						 |	Ссылка КАК Правило,
						 |	ЭлементГруппировки
						 |ИЗ
						 |	Справочник.ПравилаОбработки
						 |Где
						 |	ЭлементГруппировки = &ВидОбъекта
						 |	И НЕ ПометкаУдаления";
	ЗапросПравил.УстановитьПараметр("ВидОбъекта", ВидОбъектаИсточник);

	КорневыеПравила = ЗапросПравил.Выполнить().Выгрузить();
	ДеревоПравил = ПравилаОбработкиИсточника.ПолучитьЭлементы();
	ДеревоПравил.Очистить();
	Для Каждого Правило Из КорневыеПравила Цикл
		НовСтр = ДеревоПравил.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Правило);
		СоответствиеПравил = ПодчиненныеПравилаРекурсивно(Правило.Правило);
		ЗаполнитьПравилаВДеревеРекурсивно(НовСтр, СоответствиеПравил);
	КонецЦикла;

	ИсточникИспользуетТематики = ЗначениеЗаполнено(ВидОбъектаИсточник) 
		И ТипЗнч(ВидОбъектаИсточник) = Тип("СправочникСсылка.ВидыДокументов") 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОбъектаИсточник, "ВестиУчетПоТематикам");
	Элементы.КопироватьТематики.Видимость = ИсточникИспользуетТематики;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ВидыДействийИсточникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле = Элементы.НастройкиОбработкиИсточникаПредставление Тогда
		ПоказатьЗначение(, Элементы.НастройкиОбработкиИсточника.ТекущиеДанные.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОбработкиИсточникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Поле = Элементы.ПравилаОбработкиИсточникаПравило Тогда
		ПоказатьЗначение(, Элементы.ПравилаОбработкиИсточника.ТекущиеДанные.Правило);
	ИначеЕсли Поле = Элементы.ПравилаОбработкиИсточникаНовоеПравило Тогда
		ПоказатьЗначение(, Элементы.ПравилаОбработкиИсточника.ТекущиеДанные.НовоеПравило);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОбработкиИсточникаКопироватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПравилаОбработкиИсточника.ТекущиеДанные;
	Если ТекущиеДанные.Копировать Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		Пока Родитель <> Неопределено Цикл
			Родитель.Копировать = Истина;
			Родитель = Родитель.ПолучитьРодителя();
		КонецЦикла;
	Иначе
		Подчиненные = ТекущиеДанные.ПолучитьЭлементы();
		ИзменитьОтметкиРекурсивно(Подчиненные, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СкопироватьНастройкиОбработки(Команда)
	СкопироватьНастройкиОбработкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеПравила(Команда)
	Для Каждого Строка Из ПравилаОбработкиИсточника.ПолучитьЭлементы() Цикл
		Строка.Копировать = Истина;
		ИзменитьОтметкиРекурсивно(Строка.ПолучитьЭлементы(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметкиПравил(Команда)
	Для Каждого Строка Из ПравилаОбработкиИсточника.ПолучитьЭлементы() Цикл
		Строка.Копировать = Ложь;
		ИзменитьОтметкиРекурсивно(Строка.ПолучитьЭлементы(), Ложь);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ПрочитатьНастройкиИПравила();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СкопироватьНастройкиОбработкиНаСервере()

	НачатьТранзакцию();
	
	Попытка
	
		КоличествоОбработанных.Очистить();
	
		ЗапросСкопированныхРанее = Новый Запрос;
		ЗапросСкопированныхРанее.Текст = "ВЫБРАТЬ
			|	СкопированныеНастройкиОбработкиОбъектов.Источник,
			|	СкопированныеНастройкиОбработкиОбъектов.Копия,
			|	СкопированныеНастройкиОбработкиОбъектов.ВидОбъектаПриемник
			|ИЗ
			|	РегистрСведений.СкопированныеНастройкиОбработкиОбъектов КАК СкопированныеНастройкиОбработкиОбъектов
			|ГДЕ
			|	СкопированныеНастройкиОбработкиОбъектов.ВидОбъектаПриемник В (&ВидОбъектаПриемник)
			|	И НЕ СкопированныеНастройкиОбработкиОбъектов.Копия.ПометкаУдаления";
		ЗапросСкопированныхРанее.УстановитьПараметр("ВидОбъектаПриемник", Приемники.ВыгрузитьЗначения());
		СкопированныеРанее = ЗапросСкопированныхРанее.Выполнить().Выгрузить();
		
		Если ТипЗнч(ВидОбъектаИсточник) = Тип("СправочникСсылка.ВидыДокументов") Тогда
			ИспользованиеТематикПриемниками = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Приемники.ВыгрузитьЗначения(), "ВестиУчетПоТематикам");
			ЗапросТематикПриемников = Новый Запрос;
			ЗапросТематикПриемников.Текст = "ВЫБРАТЬ
				|	Наименование,
				|	ВидДокумента,
				|	Ссылка
				|ИЗ
				|	Справочник.ТематикиДокументов
				|ГДЕ
				|	ВидДокумента В (&Приемники)
				|	И Не ПометкаУдаления";
			ЗапросТематикПриемников.УстановитьПараметр("Приемники", Приемники);
			ТематикиПриемников = ЗапросТематикПриемников.Выполнить().Выгрузить();
		Иначе
			ИспользованиеТематикПриемниками = Новый Соответствие;
			Для Каждого Приемник Из Приемники.ВыгрузитьЗначения() Цикл
				ИспользованиеТематикПриемниками[Приемник] = Ложь;
			КонецЦикла;
		КонецЕсли;
		
	
		ЗапросНастроек = Новый Запрос;
		ЗапросНастроек.Текст = "ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.Ссылка КАК Ссылка,
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта КАК ВидОбъекта,
		|	НастройкиОбработкиВидовОбъектов.ДействуетС КАК ДействуетС,
		|	НастройкиОбработкиВидовОбъектов.ДействуетПо КАК ДействуетПо
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта В(&ВидОбъекта)
		|	И НЕ НастройкиОбработкиВидовОбъектов.ПометкаУдаления";
		ЗапросНастроек.УстановитьПараметр("ВидОбъекта", Приемники);
		СуществующиеНастройкиОбработкиПриемников = ЗапросНастроек.Выполнить().Выгрузить();
		
		
		ЗапросСхем = Новый Запрос;
		ЗапросСхем.Текст = "ВЫБРАТЬ
		|	ПараметрыСхемДляОбработокОбъектов.Ссылка,
		|	ПараметрыСхемДляОбработокОбъектов.ВладелецСхемы,
		|	ПараметрыСхемДляОбработокОбъектов.АвтоформируемаяСхема,
		|	ПараметрыСхемДляОбработокОбъектов.Схема
		|ИЗ
		|	Справочник.ПараметрыСхемДляОбработокОбъектов КАК ПараметрыСхемДляОбработокОбъектов
		|ГДЕ
		|	НЕ ПараметрыСхемДляОбработокОбъектов.ПометкаУдаления
		|	И ПараметрыСхемДляОбработокОбъектов.ВладелецСхемы В (&ВладелецСхемы)";
		ЗапросСхем.УстановитьПараметр("ВладелецСхемы", НастройкиОбработкиИсточника);
		ПараметрыСхемОбработок = ЗапросСхем.Выполнить().Выгрузить();
		
	
		ЗапросПравилЭскалации = Новый Запрос;
		ЗапросПравилЭскалации.Текст = "ВЫБРАТЬ
		|	ПравилаЭскалации.Ссылка,
		|	ПравилаЭскалации.НастройкаОбработки
		|ИЗ
		|	Справочник.ПравилаЭскалации КАК ПравилаЭскалации
		|ГДЕ
		|	НЕ ПравилаЭскалации.ПометкаУдаления
		|	И ПравилаЭскалации.НастройкаОбработки В (&НастройкиОбработкиИсточника)";
		ЗапросПравилЭскалации.УстановитьПараметр("НастройкиОбработкиИсточника", НастройкиОбработкиИсточника);
		ПравилаЭскалации = ЗапросПравилЭскалации.Выполнить().Выгрузить();
	
		Для Каждого Приемник Из Приемники Цикл
	
			ТекущийПриемник = Приемник.Значение;
			
			НастройкаОбработкиСкопированная = Неопределено;
			
			// Копируем НастройкиОбработкиВидовОбъектов
			Для Каждого ЭлементНастроек Из НастройкиОбработкиИсточника Цикл
				
				Если НЕ ЭлементНастроек.Пометка Тогда
					Продолжить;
				КонецЕсли;
					
				РанееСкопированное = СкопированныеРанее.Найти(ЭлементНастроек.Значение);
	
				Если РанееСкопированное <> Неопределено Тогда
					
					НастройкаОбъект = РанееСкопированное.Копия.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(НастройкаОбъект, ЭлементНастроек.Значение, ,
						"Владелец, Родитель, Код, Предопределенный, ИмяПредопределенныхДанных, ВидОбъекта");
				
					Для Каждого ТабличнаяЧасть Из ОбщегоНазначенияДокументооборот.ИменаТабличныхЧастейОбъекта(НастройкаОбъект) Цикл
						НастройкаОбъект[ТабличнаяЧасть].Очистить();
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭлементНастроек.Значение[ТабличнаяЧасть],
							НастройкаОбъект[ТабличнаяЧасть]);
					КонецЦикла;
					
					
					УвеличитьСчетчикОбработанных("настроек обработки", Истина);
	
				ИначеЕсли Не НеСоздаватьНовыеОбъекты Тогда
				
					НастройкаОбъект = ЭлементНастроек.Значение.Скопировать();
					НастройкаОбъект.УстановитьСсылкуНового(Справочники.НастройкиОбработкиВидовОбъектов.ПолучитьСсылку());
					УвеличитьСчетчикОбработанных("настроек обработки", ложь);
					
					Запись = РегистрыСведений.СкопированныеНастройкиОбработкиОбъектов.СоздатьМенеджерЗаписи();
					Запись.Источник = ЭлементНастроек.Значение;
					Запись.Копия = НастройкаОбъект.ПолучитьСсылкуНового();
					Запись.ВидОбъектаПриемник = ТекущийПриемник;
					Запись.Записать();
				
				Иначе
					
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Настройка обработки %1 не скопирована, так как запрещено создание новых объектов.'"),
						ЭлементНастроек.Значение));
					Продолжить;
				
				КонецЕсли;
				
				НастройкаОбъект.ВидОбъекта = ТекущийПриемник;
				
				// Проверим на пересечение по периоду с имеющимися настройками
				НастройкиПриемника = СуществующиеНастройкиОбработкиПриемников.НайтиСтроки(Новый Структура(
					"ВидОбъекта", ТекущийПриемник));
				ДатаНачала = НастройкаОбъект.ДействуетС;
				МинДатаНачала = ДатаНачала;
				ДатаКонца = НастройкаОбъект.ДействуетПо;
				ЕстьПересечение = Ложь;
				Для Каждого СтрокаНастроек Из НастройкиПриемника Цикл
					МинДатаНачала = Мин(МинДатаНачала, СтрокаНастроек.ДействуетС);
					Если (СтрокаНастроек.ДействуетПо >= ДатаНачала Или Не ЗначениеЗаполнено(СтрокаНастроек.ДействуетПо))
						И (СтрокаНастроек.ДействуетС <= ДатаКонца Или Не ЗначениеЗаполнено(ДатаКонца))
						И НастройкаОбъект.Ссылка <> СтрокаНастроек.Ссылка Тогда
							ЕстьПересечение = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьПересечение Тогда
					НастройкаОбъект.ДействуетС = МинДатаНачала-60*60*24*2;
					НастройкаОбъект.ДействуетПо = МинДатаНачала-60*60*24;
					ОбщегоНазначения.СообщитьПользователю(НСтр(СтрШаблон(
						"ru = 'В виде объекта %1 обнаружены настройки, пересекающиеся по периоду действия.
						|Новой настройке назначен непересекающийся период %2 - %3. Исправьте его вручную.'",
						ТекущийПриемник, 
						Формат(НастройкаОбъект.ДействуетС, "ДФ=dd.MM.yyyy;"),
						Формат(НастройкаОбъект.ДействуетПо, "ДФ=dd.MM.yyyy;"))));
				КонецЕсли;
				
				НоваяСтрока = СуществующиеНастройкиОбработкиПриемников.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НастройкаОбъект);
				
				НастройкаОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьСхему", Истина);
				НастройкаОбъект.Записать();
				НастройкаОбработкиСкопированная = НастройкаОбъект.Ссылка;
				Если ЗначениеЗаполнено(НастройкаОбъект.ВидБизнесСобытия) Тогда
					ДействияСервер.ОбновитьПодпискуНаБизнесСобытия(НастройкаОбъект.ВидБизнесСобытия);
				КонецЕсли;
				
				
				// Копируем ПараметрыСхемДляОбработокОбъектов
				СтрокаПараметровСхемы = ПараметрыСхемОбработок.Найти(ЭлементНастроек.Значение);
				Если СтрокаПараметровСхемы <> Неопределено Тогда
					
					РанееСкопированное = СкопированныеРанее.Найти(СтрокаПараметровСхемы.Ссылка);
					
					Если РанееСкопированное <> Неопределено Тогда
						
						ПараметрыСхемыОбъект = РанееСкопированное.Копия.ПолучитьОбъект();
						ЗаполнитьЗначенияСвойств(ПараметрыСхемыОбъект, СтрокаПараметровСхемы.Ссылка, ,
							"Владелец, Родитель, Код, Предопределенный, ИмяПредопределенныхДанных, ВладелецСхемы, Схема");
					
						Для Каждого ТабличнаяЧасть Из ОбщегоНазначенияДокументооборот.ИменаТабличныхЧастейОбъекта(ПараметрыСхемыОбъект) Цикл
							ПараметрыСхемыОбъект[ТабличнаяЧасть].Очистить();
							ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаПараметровСхемы.Ссылка[ТабличнаяЧасть],
								ПараметрыСхемыОбъект[ТабличнаяЧасть]);
						КонецЦикла;
						
						УвеличитьСчетчикОбработанных("параметров схем обработок", Истина);
						
						СхемаОбъект = ПараметрыСхемыОбъект.Схема.ПолучитьОбъект();
						ЗаполнитьЗначенияСвойств(СхемаОбъект, СтрокаПараметровСхемы.Схема, ,
							"Наименование, Владелец, Родитель, Код, Предопределенный, ИмяПредопределенныхДанных");
					
						СхемаОбъект.Наименование = Строка(НастройкаОбъект.Ссылка);
						СхемаОбъект.Записать();
						УвеличитьСчетчикОбработанных("схем обработки", Истина);
						
					ИначеЕсли Не НеСоздаватьНовыеОбъекты Тогда
						
						ПараметрыСхемыОбъект = СтрокаПараметровСхемы.Ссылка.Скопировать();
						ПараметрыСхемыОбъект.УстановитьСсылкуНового(Справочники.ПараметрыСхемДляОбработокОбъектов.ПолучитьСсылку());
						
						ЗаписьСкопированныхРанее = РегистрыСведений.СкопированныеНастройкиОбработкиОбъектов.СоздатьМенеджерЗаписи();
						ЗаписьСкопированныхРанее.Источник = СтрокаПараметровСхемы.Ссылка;
						ЗаписьСкопированныхРанее.Копия = ПараметрыСхемыОбъект.ПолучитьСсылкуНового();
						ЗаписьСкопированныхРанее.ВидОбъектаПриемник = ТекущийПриемник;
						ЗаписьСкопированныхРанее.Записать();
						УвеличитьСчетчикОбработанных("параметров схем обработок", Ложь);
						
						// Копируем схему 
						СхемаОбъект = СтрокаПараметровСхемы.Схема.Скопировать();
						ЗаполнитьЗначенияСвойств(СхемаОбъект, СтрокаПараметровСхемы.Схема, ,
							"Наименование, Владелец, Родитель, Код, Предопределенный, ИмяПредопределенныхДанных");
					
						СхемаОбъект.Наименование = Строка(НастройкаОбъект.Ссылка);
						СхемаОбъект.Записать();
						ПараметрыСхемыОбъект.Схема = СхемаОбъект.Ссылка;
						УвеличитьСчетчикОбработанных("схем обработки", Ложь);
						
						
					Иначе
						ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
							НСтр("ru = 'Схема обработки %1 не скопирована, так как запрещено создание новых объектов.'"),
							СтрокаПараметровСхемы.Ссылка));
						Продолжить;
					КонецЕсли;
					
					ПараметрыСхемыОбъект.ВладелецСхемы = НастройкаОбъект.Ссылка;
					ПараметрыСхемыОбъект.Записать();
					
				КонецЕсли;
				
				
				// Копируем ПравилаЭскалации
				СтрокаПравилаЭскалации = ПравилаЭскалации.Найти(ЭлементНастроек.Значение);
				Если СтрокаПравилаЭскалации <> Неопределено Тогда
					
					РанееСкопированное = СкопированныеРанее.Найти(СтрокаПравилаЭскалации.Ссылка);
					
					Если РанееСкопированное <> Неопределено Тогда
						
						ПравилаЭскалацииОбъект = РанееСкопированное.Копия.ПолучитьОбъект();
						ЗаполнитьЗначенияСвойств(ПравилаЭскалацииОбъект, СтрокаПравилаЭскалации.Ссылка, ,
							"Владелец, Родитель, Код, Предопределенный, ИмяПредопределенныхДанных, Приоритет");
							
						ПравилаЭскалацииОбъект.НастройкаОбработки = НастройкаОбработкиСкопированная;	
					
						Для Каждого ТабличнаяЧасть Из ОбщегоНазначенияДокументооборот.ИменаТабличныхЧастейОбъекта(ПравилаЭскалацииОбъект) Цикл
							ПравилаЭскалацииОбъект[ТабличнаяЧасть].Очистить();
							ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаПравилаЭскалации.Ссылка[ТабличнаяЧасть],
								ПравилаЭскалацииОбъект[ТабличнаяЧасть]);
						КонецЦикла;
						
						// после копирования заменяем НастройкаОбработки на новую
						Для Каждого Стр Из ПравилаЭскалацииОбъект.Обработки Цикл
							Стр.НастройкаОбработки = НастройкаОбработкиСкопированная;
						КонецЦикла;
						
						УвеличитьСчетчикОбработанных("правил эскалации", Истина);
						
					ИначеЕсли Не НеСоздаватьНовыеОбъекты Тогда
						
						ПравилаЭскалацииОбъект = СтрокаПравилаЭскалации.Ссылка.Скопировать();
						ПравилаЭскалацииОбъект.УстановитьСсылкуНового(Справочники.ПравилаЭскалации.ПолучитьСсылку());
						
						ЗаписьСкопированныхРанее = РегистрыСведений.СкопированныеНастройкиОбработкиОбъектов.СоздатьМенеджерЗаписи();
						ЗаписьСкопированныхРанее.Источник = СтрокаПравилаЭскалации.Ссылка;
						ЗаписьСкопированныхРанее.Копия = ПравилаЭскалацииОбъект.ПолучитьСсылкуНового();
						ЗаписьСкопированныхРанее.ВидОбъектаПриемник = ТекущийПриемник;
						ЗаписьСкопированныхРанее.Записать();
						УвеличитьСчетчикОбработанных("правил эскалации", Ложь);
						
						ПравилаЭскалацииОбъект.НастройкаОбработки = НастройкаОбработкиСкопированная;	
					
						// после копирования заменяем НастройкаОбработки на новую
						Для Каждого Стр Из ПравилаЭскалацииОбъект.Обработки Цикл
							Стр.НастройкаОбработки = НастройкаОбработкиСкопированная;
						КонецЦикла;
					
					Иначе
						ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
							НСтр("ru = 'Правило эскалации %1 не скопировано, так как запрещено создание новых объектов.'"),
							СтрокаПравилаЭскалации.Ссылка));
						Продолжить;
					КонецЕсли;
					
					ПравилаЭскалацииОбъект.Записать();
					
				КонецЕсли;
				
				
					
			КонецЦикла;
			
			// Копируем ПравилаОбработки 
			Для Каждого СтрокаПравила Из ПравилаОбработкиИсточника.ПолучитьЭлементы() Цикл
				СкопироватьПравилаРекурсивно(СтрокаПравила,
					Справочники.ПравилаОбработки.ПустаяСсылка(),
					ТекущийПриемник,
					СкопированныеРанее,
					ИспользованиеТематикПриемниками[Приемник.Значение],
					ТематикиПриемников);
			КонецЦикла;
	
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	СообщитьОРезультатахКопирования();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПравилаВДеревеРекурсивно(СтрокаРодитель, СоответствиеПравил)

	ПодчиненныеПравила = СоответствиеПравил[СтрокаРодитель.Правило];

	Если ПодчиненныеПравила <> Неопределено Тогда
		Для Каждого Правило Из ПодчиненныеПравила Цикл
			НовСтр = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Правило);
			ЗаполнитьПравилаВДеревеРекурсивно(НовСтр, СоответствиеПравил);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПодчиненныеПравилаРекурсивно(ПравилоРодитель)

	Результат = Новый Соответствие;
	Результат[ПравилоРодитель] = Новый Массив;

	Запрос = Новый Запрос("Выбрать
	|	Ссылка КАК Правило,
	|	ЭлементГруппировки
	|ИЗ
	|	Справочник.ПравилаОбработки
	|Где
	|	Родитель = &ПравилоРодитель
	|	И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("ПравилоРодитель", ПравилоРодитель);
	Правила = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаПравила Из Правила Цикл

		Результат[ПравилоРодитель].Добавить(СтрокаПравила);

		ПодчиненныеПравила = ПодчиненныеПравилаРекурсивно(СтрокаПравила.Правило);

		Для Каждого ПодчиненноеПравило Из ПодчиненныеПравила[СтрокаПравила.Правило] Цикл

			Если Результат[СтрокаПравила.Правило] = Неопределено Тогда
				Результат[СтрокаПравила.Правило] = Новый Массив;
			КонецЕсли;

			Результат[СтрокаПравила.Правило].Добавить(ПодчиненноеПравило);

		КонецЦикла;

	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура СкопироватьПравилаРекурсивно(СтрокаПравила, НовыйРодитель, ТекущийПриемник, СкопированныеРанее,
	ПриемникИспользуетТематики, ТематикиПриемников)

	Если Не СтрокаПравила.Копировать Тогда
		Возврат;
	КонецЕсли;
	
	КопируемоеПравило = СтрокаПравила.Правило;
	
	РанееСкопированное = СкопированныеРанее.Найти(КопируемоеПравило);
	Если РанееСкопированное <> Неопределено Тогда
		
		НовоеПравило = РанееСкопированное.Копия.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НовоеПравило, КопируемоеПравило, ,
			"Владелец, Код, Предопределенный, ИмяПредопределенныхДанных");
		
		Для Каждого ТабличнаяЧасть Из ОбщегоНазначенияДокументооборот.ИменаТабличныхЧастейОбъекта(НовоеПравило) Цикл
			НовоеПравило[ТабличнаяЧасть].Очистить();
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КопируемоеПравило[ТабличнаяЧасть],
				НовоеПравило[ТабличнаяЧасть]);
		КонецЦикла;
		
		УвеличитьСчетчикОбработанных("правил обработки", Истина);
		
	ИначеЕсли Не НеСоздаватьНовыеОбъекты Тогда
		
		НовоеПравило = КопируемоеПравило.Скопировать();
		НовоеПравило.УстановитьСсылкуНового(Справочники.ПравилаОбработки.ПолучитьСсылку());
		
		ЗаписьСкопированныхРанее = РегистрыСведений.СкопированныеНастройкиОбработкиОбъектов.СоздатьМенеджерЗаписи();
		ЗаписьСкопированныхРанее.Источник = КопируемоеПравило;
		ЗаписьСкопированныхРанее.Копия = НовоеПравило.ПолучитьСсылкуНового();
		ЗаписьСкопированныхРанее.ВидОбъектаПриемник = ТекущийПриемник;
		ЗаписьСкопированныхРанее.Записать();
		
		УвеличитьСчетчикОбработанных("правил обработки", Ложь);
	
	Иначе
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Правило обработки %1 не скопировано, так как запрещено создание новых объектов.'"),
			КопируемоеПравило));
		Возврат;
	КонецЕсли;
	
	Если СтрокаПравила.ЭлементГруппировки = ВидОбъектаИсточник Тогда
		НовоеПравило.ЭлементГруппировки = ТекущийПриемник;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаПравила.ЭлементГруппировки) = Тип("СправочникСсылка.ТематикиДокументов") Тогда
	
		Если ПриемникИспользуетТематики Тогда
		
			// Для тематик попытаемся найти подходящую по наименованию 
					
			НайденныеТематики = ТематикиПриемников.НайтиСтроки(
				Новый Структура("ВидДокумента, Наименование",
				ТекущийПриемник, СтрокаПравила.ЭлементГруппировки.Наименование));
		
			Если НайденныеТематики.Количество() Тогда
				НовоеПравило.ЭлементГруппировки = НайденныеТематики[0].Ссылка;
			ИначеЕсли Не НеСоздаватьНовыеОбъекты И КопироватьТематики Тогда
				
				// Если не нашли, скопируем
				
				НоваяТематика = СтрокаПравила.ЭлементГруппировки.Скопировать();
				НоваяТематика.ВидДокумента = ТекущийПриемник;
				НоваяТематика.Записать();
				УвеличитьСчетчикОбработанных("тематик документов", Ложь);
				НовоеПравило.ЭлементГруппировки = НоваяТематика.Ссылка;
			Иначе
				
				// Если не нашли и копировать нельзя, то правило пометим как недействительное
				
				НовоеПравило.НеДействует = Истина;
				ОбщегоНазначения.СообщитьПользователю(НСтр(СтрШаблон(
					"ru = 'Правило обработки %1 отмечено как недействующее, так как для него отсутствует тематика %2 в виде объекта %3.'",
					НовоеПравило, СтрокаПравила.ЭлементГруппировки, ТекущийПриемник)));
			КонецЕсли;
		
		Иначе
				
			НовоеПравило.НеДействует = Истина;
			ОбщегоНазначения.СообщитьПользователю(НСтр(СтрШаблон(
				"ru = 'Правило обработки %1 отмечено как недействующее, так как вид объекта %2 не использует тематики.'",
				НовоеПравило, ТекущийПриемник)));
		
		КонецЕсли;
		
	КонецЕсли;
	
	НовоеПравило.Родитель = НовыйРодитель;
	НовоеПравило.Записать();
	
	СтрокаПравила.НовоеПравило = НовоеПравило.Ссылка;
	
	
	// Копируем все настройки действий по этому правилу
	КлючНастроек = РегистрыСведений.ПравилаОбработкиОбъектов.КлючПоПравилуОбработки(КопируемоеПравило);
	ВидыДействийПравила = РегистрыСведений.ПравилаОбработкиОбъектов.НастройкиИВидыДействийДляПравила(
		КопируемоеПравило, КлючНастроек);

	Для Каждого ВидДействия Из ВидыДействийПравила Цикл

		ЗаписьПравилОбработки = РегистрыСведений.ПравилаОбработкиОбъектов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьПравилОбработки, ВидДействия);
		ЗаписьПравилОбработки.ВидОбъекта = ТекущийПриемник;
		ЗаписьПравилОбработки.ПравилоОбработки = НовоеПравило.Ссылка;
		Если Не ВидДействия.ЭтоПустаяНастройка Тогда
			
			РанееСкопированное = СкопированныеРанее.Найти(ВидДействия.Настройка);
			Если РанееСкопированное <> Неопределено Тогда
			
				НоваяНастройка = РанееСкопированное.Копия.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(НоваяНастройка, ВидДействия.Настройка, ,
					"Владелец, Родитель, Код, Предопределенный, ИмяПредопределенныхДанных");
				
				Для Каждого ТабличнаяЧасть Из ОбщегоНазначенияДокументооборот.ИменаТабличныхЧастейОбъекта(НоваяНастройка) Цикл
					НоваяНастройка[ТабличнаяЧасть].Очистить();
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВидДействия.Настройка[ТабличнаяЧасть],
						НоваяНастройка[ТабличнаяЧасть]);
				КонецЦикла;
				
				УвеличитьСчетчикОбработанных("настроек действий", Истина);
				
			ИначеЕсли Не НеСоздаватьНовыеОбъекты Тогда
		
				НоваяНастройка = ВидДействия.Настройка.Скопировать();
				Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(НоваяНастройка.Ссылка);
				НоваяНастройка.УстановитьСсылкуНового(Менеджер.ПолучитьСсылку());
				УвеличитьСчетчикОбработанных("настроек действий", Ложь);
				
				ЗаписьСкопированныхРанее = РегистрыСведений.СкопированныеНастройкиОбработкиОбъектов.СоздатьМенеджерЗаписи();
				ЗаписьСкопированныхРанее.Источник = ВидДействия.Настройка;
				ЗаписьСкопированныхРанее.Копия = НоваяНастройка.ПолучитьСсылкуНового();
				ЗаписьСкопированныхРанее.ВидОбъектаПриемник = ТекущийПриемник;
				ЗаписьСкопированныхРанее.Записать();
			
			Иначе
				
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
					НСтр("ru = 'Правило обработки %1 не скопировано, так как запрещено создание новых объектов.'"),
					КопируемоеПравило));
				Продолжить;
			
			КонецЕсли;
			
			НоваяНастройка.Записать();
			ЗаписьПравилОбработки.Настройка = НоваяНастройка.Ссылка;
			
		КонецЕсли;
		
		ЗаписьПравилОбработки.Записать();

	КонецЦикла;

	Для Каждого ПодчиненнаяСтрока Из СтрокаПравила.ПолучитьЭлементы() Цикл
		СкопироватьПравилаРекурсивно(ПодчиненнаяСтрока,
			НовоеПравило.Ссылка,
			ТекущийПриемник,
			СкопированныеРанее,
			ПриемникИспользуетТематики,
			ТематикиПриемников);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтметкиРекурсивно(Строки, НовоеЗначение)
	
	Для Каждого Строка Из Строки Цикл
		Строка.Копировать = НовоеЗначение;
		Подчиненные = Строка.ПолучитьЭлементы();
		ИзменитьОтметкиРекурсивно(Подчиненные, НовоеЗначение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УвеличитьСчетчикОбработанных(Представление, Обновлено)
	
	Строки = КоличествоОбработанных.НайтиСтроки(
		Новый Структура("Представление, Обновлено", Представление, Обновлено));
	Если Строки.Количество() Тогда
		НужнаяСтрока = Строки[0];
	Иначе
		НужнаяСтрока = КоличествоОбработанных.Добавить();
		НужнаяСтрока.Представление = Представление;
		НужнаяСтрока.Обновлено = Обновлено;
	КонецЕсли;
	
	НужнаяСтрока.Количество = НужнаяСтрока.Количество + 1; 
	
КонецПроцедуры

&НаСервере 
Процедура СообщитьОРезультатахКопирования()
	
	Итого = КоличествоОбработанных.Итог("Количество");
	Скопированные = КоличествоОбработанных.НайтиСтроки(Новый Структура("Обновлено", Ложь));
	Обновленные = КоличествоОбработанных.НайтиСтроки(Новый Структура("Обновлено", Истина));
	
	ВсегоСкопировано = 0;
	ПредставленияСкопированных = Новый Массив;
	Для Каждого СтрокаСкопировано Из Скопированные Цикл
		ВсегоСкопировано = ВсегоСкопировано + СтрокаСкопировано.Количество;
		ПредставленияСкопированных.Добавить(СтрШаблон("	%1 %2",
			СтрокаСкопировано.Количество, СтрокаСкопировано.Представление));
	КонецЦикла;
	ПредставлениеСкопированных = СтрШаблон(
		НСтр("ru = 'Скопировано %1:
			|%2'"), 
		ВсегоСкопировано, СтрСоединить(ПредставленияСкопированных, Символы.ПС));
	
	
	ВсегоОбновлено = 0;
	ПредставленияОбновленных = Новый Массив; 
	Для Каждого СтрокаОбновлено Из Обновленные Цикл
		ВсегоОбновлено = ВсегоОбновлено + СтрокаОбновлено.Количество;
		ПредставленияОбновленных.Добавить(СтрШаблон("	%1 %2",
			СтрокаОбновлено.Количество, СтрокаОбновлено.Представление));
	КонецЦикла;
	ПредставлениеОбновленных = СтрШаблон(
		НСтр("ru = 'Обновлено %1:
			|%2'"), 
		ВсегоОбновлено, СтрСоединить(ПредставленияОбновленных, Символы.ПС));
	
	ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Всего обработано %1 объектов.'"), Итого));
	Если ВсегоСкопировано > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(ПредставлениеСкопированных);
	КонецЕсли;
	Если ВсегоОбновлено > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(ПредставлениеОбновленных);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти