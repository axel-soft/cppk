// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидыОбъектов = Новый Массив;
	Если Не Параметры.Свойство("ВидыОбъектов", ВидыОбъектов) Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый вызов формы без параметра ВидыОбъектов'");
	КонецЕсли;
	
	ЗаполнитьДеревоНастроекОбработки(ВидыОбъектов);
	
	ВыбранныеНастройкиОбработки = Справочники.НастройкиОбработкиВидовОбъектов.ПустаяСсылка();
	Если Параметры.Свойство("ВыбранныеНастройкиОбработки", ВыбранныеНастройкиОбработки) Тогда
		
		Если ЗначениеЗаполнено(ВыбранныеНастройкиОбработки) Тогда
			ВыбратьДанныеДляВыгрузиПоПереданнымНастройкамОбработки(ВыбранныеНастройкиОбработки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Каждого СтрокаДерева Из ДеревоНастроекОбработки.ПолучитьЭлементы() Цикл
		Элементы.ДеревоНастроекОбработки.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНастроекОбработки

&НаКлиенте
Процедура ДеревоНастроекОбработкиВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастроекОбработки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеФлагаСтроки(ТекущиеДанные);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	РезультатПроверки = РезультатПроверкиВыбранныхДляВыгрузкиНастроек();
	Если Не РезультатПроверки.ВыбранныеНастройкиКорректны Тогда
		
		Для Каждого Ошибка Из РезультатПроверки.Ошибки Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Закрыть(ВыбранныеНастройки());
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыСтрокКопируемыхнастроек()
	
	ТипыСтрок = Новый Структура;
	ТипыСтрок.Вставить("ВидОбъекта", "ВидОбъекта");
	ТипыСтрок.Вставить("ГруппировкаНастроекОбработки", "ГруппировкаНастроекОбработки");
	ТипыСтрок.Вставить("ГруппировкаПравилОбработки", "ГруппировкаПравилОбработки");
	ТипыСтрок.Вставить("НастройкиОбработки", "НастройкиОбработки");
	ТипыСтрок.Вставить("ПравилоОбработки", "ПравилоОбработки");
	
	Возврат Новый ФиксированнаяСтруктура(ТипыСтрок);
	
КонецФункции

#Область ЗаполнениеДерева

// Заполняет на форме дерево настроек обработки
// 
// Параметры:
//  ВидыОбъектов - Массив Из ОпределяемыйТип.ВидОбъектаСОбработкой
// 
&НаСервере
Процедура ЗаполнитьДеревоНастроекОбработки(ВидыОбъектов)
	
	ДанныеНастроек = ДанныеНастроекОбработкиВидовОбъектов(ВидыОбъектов);
	
	ТипыСтрок = ТипыСтрокКопируемыхнастроек();
	
	Для Каждого Элемент Из ДанныеНастроек Цикл
		
		ВидОбъекта = Элемент.Ключ;
		ДанныеНастроекОбработки = Элемент.Значение;
		
		СтрокаВидаОбъекта = ДеревоНастроекОбработки.ПолучитьЭлементы().Добавить();
		СтрокаВидаОбъекта.ВидОбъекта = ВидОбъекта;
		СтрокаВидаОбъекта.ТипСтроки = ТипыСтрок.ВидОбъекта;
		ЗаполнитьИндексКартинкиСтроки(СтрокаВидаОбъекта);
		ЗаполнитьПредставлениеСтроки(СтрокаВидаОбъекта);
		
		Если ДанныеНастроекОбработки.НастройкиОбработки.Количество() > 0 Тогда
			
			СтрокаНастроек = СтрокаВидаОбъекта.ПолучитьЭлементы().Добавить();
			СтрокаНастроек.ТипСтроки = ТипыСтрок.ГруппировкаНастроекОбработки;
			ЗаполнитьИндексКартинкиСтроки(СтрокаНастроек);
			ЗаполнитьПредставлениеСтроки(СтрокаНастроек);
			
			Для Каждого ДанныеНастройки Из ДанныеНастроекОбработки.НастройкиОбработки Цикл
				
				СтрокаНастройки = СтрокаНастроек.ПолучитьЭлементы().Добавить();
				СтрокаНастройки.НастройкиОбработки = ДанныеНастройки.НастройкиОбработки;
				СтрокаНастройки.ДействуетС = ДанныеНастройки.ДействуетС;
				СтрокаНастройки.ДействуетПо = ДанныеНастройки.ДействуетПо;
				СтрокаНастройки.ТипСтроки = ТипыСтрок.НастройкиОбработки;
				ЗаполнитьИндексКартинкиСтроки(СтрокаНастройки);
				ЗаполнитьПредставлениеСтроки(СтрокаНастройки);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДанныеНастроекОбработки.ПравилаОбработки.Количество() > 0 Тогда
			
			СтрокаПравил = СтрокаВидаОбъекта.ПолучитьЭлементы().Добавить();
			СтрокаПравил.ТипСтроки = ТипыСтрок.ГруппировкаПравилОбработки;
			ЗаполнитьИндексКартинкиСтроки(СтрокаПравил);
			ЗаполнитьПредставлениеСтроки(СтрокаПравил);
			
			СоздатьСтрокиПравилОбработкиРекурсивно(СтрокаПравил, ДанныеНастроекОбработки.ПравилаОбработки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет индекс картинки строки дерева на основании типа строки
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева
&НаСервере
Процедура ЗаполнитьИндексКартинкиСтроки(СтрокаДерева)
	
	ТипыСтрок = ТипыСтрокКопируемыхнастроек();
	
	ИндексыПоТипам = Новый Соответствие();
	ИндексыПоТипам[ТипыСтрок.ВидОбъекта] = 3;
	ИндексыПоТипам[ТипыСтрок.ГруппировкаНастроекОбработки] = 0;
	ИндексыПоТипам[ТипыСтрок.ГруппировкаПравилОбработки] = 0;
	ИндексыПоТипам[ТипыСтрок.НастройкиОбработки] = 19;
	ИндексыПоТипам[ТипыСтрок.ПравилоОбработки] = 21;
	
	Индекс = ИндексыПоТипам[СтрокаДерева.ТипСтроки]; // Число
	Если Индекс = Неопределено Тогда
		СтрокаДерева.ИндексКартинки = -1;
	Иначе
		СтрокаДерева.ИндексКартинки = Индекс;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет представление строки на основании ее данных
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева
&НаСервере
Процедура ЗаполнитьПредставлениеСтроки(СтрокаДерева)
	
	ТипыСтрок = ТипыСтрокКопируемыхнастроек();
	
	Если СтрокаДерева.ТипСтроки = ТипыСтрок.ВидОбъекта Тогда
		
		СтрокаДерева.ПредставлениеСтроки = Строка(СтрокаДерева.ВидОбъекта);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипыСтрок.ГруппировкаНастроекОбработки Тогда
		
		СтрокаДерева.ПредставлениеСтроки = НСтр("ru = 'Настройки обработки'");
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипыСтрок.ГруппировкаПравилОбработки Тогда
		
		СтрокаДерева.ПредставлениеСтроки = НСтр("ru = 'Правила обработки'");
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипыСтрок.НастройкиОбработки Тогда
		
		СтрокаДерева.ПредставлениеСтроки = Строка(СтрокаДерева.НастройкиОбработки);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипыСтрок.ПравилоОбработки Тогда
		
		СтрокаДерева.ПредставлениеСтроки = СтрШаблон("%1. %2 - %3",
			СтрокаДерева.ПравилоОбработки,
			Формат(СтрокаДерева.ДействуетС, "ДФ=dd.MM.yyyy;"),
			Формат(СтрокаДерева.ДействуетПо, "ДФ=dd.MM.yyyy;"));
		
	КонецЕсли;
	
КонецПроцедуры

// Рекурсивно создает строки дерева правил обработки
// 
// Параметры:
//  Родитель - ДанныеФормыЭлементДерева
//  НаборПравилОбработки - см. НовыйНаборПравилОбработки
&НаСервере
Процедура СоздатьСтрокиПравилОбработкиРекурсивно(Родитель, НаборПравилОбработки)
	
	Для Каждого ДанныеПравила Из НаборПравилОбработки Цикл
		
		СтрокаПравила = Родитель.ПолучитьЭлементы().Добавить();
		СтрокаПравила.ПравилоОбработки = ДанныеПравила.ПравилоОбработки;
		СтрокаПравила.ЭлементГруппировкиПравил = ДанныеПравила.ЭлементГруппировки;
		СтрокаПравила.ДействуетС = ДанныеПравила.ДействуетС;
		СтрокаПравила.ДействуетПо = ДанныеПравила.ДействуетПо;
		СтрокаПравила.ТипСтроки = ТипыСтрокКопируемыхнастроек().ПравилоОбработки;
		ЗаполнитьИндексКартинкиСтроки(СтрокаПравила);
		ЗаполнитьПредставлениеСтроки(СтрокаПравила);
		
		СоздатьСтрокиПравилОбработкиРекурсивно(СтрокаПравила, ДанныеПравила.ДочерниеПравила);
		
	КонецЦикла;
	
КонецПроцедуры

#Область Конструкторы

// Конструктор правил обработки
// 
// Возвращаемое значение:
//  Структура -  Новые данные правила обработки:
//    * ПравилоОбработки - СправочникСсылка.ПравилаОбработки - 
//    * ЭлементГруппировки - СправочникСсылка.СтруктураПредприятия -
//                         - СправочникСсылка.ВидыМероприятий - 
//                         - СправочникСсылка.ВидыДокументов - 
//                         - СправочникСсылка.ТематикиДокументов - 
//                         - СправочникСсылка.Организации -
//                         - Неопределено -
//    * ДействуетС - Дата - 
//    * ДействуетПо - Дата - 
//    * ДочерниеПравила - см. НовыйНаборПравилОбработки
//
&НаСервере
Функция НовыеДанныеПравилаОбработки()
	
	ДанныеПравилаОбработки = Новый Структура;
	ДанныеПравилаОбработки.Вставить("ПравилоОбработки", Справочники.ПравилаОбработки.ПустаяСсылка());
	ДанныеПравилаОбработки.Вставить("ЭлементГруппировки", Неопределено);
	ДанныеПравилаОбработки.Вставить("ДействуетС", Дата(1, 1, 1));
	ДанныеПравилаОбработки.Вставить("ДействуетПо", Дата(1, 1, 1));
	ДанныеПравилаОбработки.Вставить("ДочерниеПравила", НовыйНаборПравилОбработки());
	
	Возврат ДанныеПравилаОбработки;
	
КонецФункции

// Конструктор набора правил обработки
// 
// Возвращаемое значение:
//  Массив Из см. НовыеДанныеПравилаОбработки
&НаСервере
Функция НовыйНаборПравилОбработки()
	
	Возврат Новый Массив();
	
КонецФункции

// Конструктор данных настройки обработки
// 
// Возвращаемое значение:
//  Структура -  Новые данные настройки обработки:
//    * НастройкиОбработки - СправочникСсылка.НастройкиОбработкиВидовОбъектов - 
//    * ДействуетС - Дата - 
//    * ДействуетПо - Дата - 
&НаСервере
Функция НовыеДанныеНастройкиОбработки()
	
	ДанныеНастройки = Новый Структура;
	ДанныеНастройки.Вставить("НастройкиОбработки", Справочники.НастройкиОбработкиВидовОбъектов.ПустаяСсылка());
	ДанныеНастройки.Вставить("ДействуетС", Дата(1, 1, 1));
	ДанныеНастройки.Вставить("ДействуетПо", Дата(1, 1, 1));
	
	Возврат ДанныеНастройки;
	
КонецФункции

// Конструктор данных настроек обработки вида объекта
// 
// Возвращаемое значение:
//  Структура -  Новые данные настроек обработки вида объекта:
// * НастройкиОбработки - Массив Из см. НовыеДанныеНастройкиОбработки
// * ПравилаОбработки - см. НовыйНаборПравилОбработки
&НаСервере
Функция НовыеДанныеНастроекОбработкиВидаОбъекта()
	
	ДанныеНастроек = Новый Структура;
	ДанныеНастроек.Вставить("НастройкиОбработки", Новый Массив());
	ДанныеНастроек.Вставить("ПравилаОбработки", НовыйНаборПравилОбработки());
	
	Возврат ДанныеНастроек;
	
КонецФункции

#КонецОбласти

// Данные настроек обработки видов объектов.
// 
// Параметры:
//  ВидыОбъектов - Массив Из ОпределяемыйТип.ВидОбъектаСОбработкой
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ВидОбъектаСОбработкой
//    * Значение - см. НовыеДанныеНастроекОбработкиВидаОбъекта
&НаСервере
Функция ДанныеНастроекОбработкиВидовОбъектов(ВидыОбъектов)
	
	ДанныеПоВидамОбъектов = Новый Соответствие();
	Для Каждого ВидОбъекта Из ВидыОбъектов Цикл
		ДанныеПоВидамОбъектов[ВидОбъекта] = НовыеДанныеНастроекОбработкиВидаОбъекта();
	КонецЦикла;
	
	ВыборкиДанных = ВыборкиДанныхНастроекОбработки(ВидыОбъектов);
	
	ВыборкаНастроек = ВыборкиДанных.НастройкиОбработки;
	Пока ВыборкаНастроек.Следующий() Цикл
		
		ВидОбъекта = ВыборкаНастроек.ВидОбъекта;
		ДанныеВида = ДанныеПоВидамОбъектов[ВидОбъекта]; // см. НовыеДанныеНастроекОбработкиВидаОбъекта
		
		ДанныеНастройки = НовыеДанныеНастройкиОбработки();
		ДанныеНастройки.НастройкиОбработки = ВыборкаНастроек.НастройкиОбработки;
		ДанныеНастройки.ДействуетС = ВыборкаНастроек.ДействуетС;
		ДанныеНастройки.ДействуетПо = ВыборкаНастроек.ДействуетПо;
		
		ДанныеВида.НастройкиОбработки.Добавить(ДанныеНастройки);
		
	КонецЦикла;
	
	ПравилаОбработкиКорневые = Новый Массив(); // Массив Из СправочникСсылка.ПравилаОбработки
	ВыборкаПравил = ВыборкиДанных.ПравилаОбработки;
	Пока ВыборкаПравил.Следующий() Цикл
		
		ВидОбъекта = ВыборкаПравил.ВидОбъекта;
		ДанныеВида = ДанныеПоВидамОбъектов[ВидОбъекта]; // см. НовыеДанныеНастроекОбработкиВидаОбъекта
		
		ДанныеПравила = НовыеДанныеПравилаОбработки();
		ДанныеПравила.ПравилоОбработки = ВыборкаПравил.ПравилоОбработки;
		ДанныеПравила.ЭлементГруппировки = ВыборкаПравил.ЭлементГруппировки;
		ДанныеПравила.ДействуетС = ВыборкаПравил.ДействуетС;
		ДанныеПравила.ДействуетПо = ВыборкаПравил.ДействуетПо;
		ДанныеВида.ПравилаОбработки.Добавить(ДанныеПравила);
		
		ПравилаОбработкиКорневые.Добавить(ВыборкаПравил.ПравилоОбработки);
		
	КонецЦикла;
	
	ДанныеПравилПоРодителям = Новый Соответствие();
	ВыборкиДочернихПравил = ВыборкиДочернихПравилОбработки(ПравилаОбработкиКорневые);
	Для Каждого ВыборкаДочерних Из ВыборкиДочернихПравил Цикл
		Пока ВыборкаДочерних.Следующий() Цикл
			
			Родитель = ВыборкаДочерних.Родитель;
			
			ПравилаПоРодителю = ДанныеПравилПоРодителям[Родитель];
			Если ПравилаПоРодителю = Неопределено Тогда
				ПравилаПоРодителю = НовыйНаборПравилОбработки();
				ДанныеПравилПоРодителям[Родитель] = ПравилаПоРодителю;
			КонецЕсли;
			
			ДанныеПравила = НовыеДанныеПравилаОбработки();
			ДанныеПравила.ПравилоОбработки = ВыборкаДочерних.ПравилоОбработки;
			ДанныеПравила.ЭлементГруппировки = ВыборкаДочерних.ЭлементГруппировки;
			ДанныеПравила.ДействуетС = ВыборкаДочерних.ДействуетС;
			ДанныеПравила.ДействуетПо = ВыборкаДочерних.ДействуетПо;
			ПравилаПоРодителю.Добавить(ДанныеПравила);
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ВидОбъекта Из ВидыОбъектов Цикл
		
		ДанныеВида = ДанныеПоВидамОбъектов[ВидОбъекта]; // см. НовыеДанныеНастроекОбработкиВидаОбъекта
		Для Каждого КорневоеПравило Из ДанныеВида.ПравилаОбработки Цикл
			КорневоеПравило.ДочерниеПравила = 
				ДочерниеПравилаОбъектаРекурсивно(КорневоеПравило.ПравилоОбработки, ДанныеПравилПоРодителям);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеПоВидамОбъектов;
	
КонецФункции

// Дочерние правила объекта рекурсивно.
// 
// Параметры:
//  Родитель - СправочникСсылка.ПравилаОбработки, ОпределяемыйТип.ВидОбъектаСОбработкой -
//  ДанныеПравилПоРодителям - Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ПравилаОбработки, ОпределяемыйТип.ВидОбъектаСОбработкой -
//    * Значение - см. НовыйНаборПравилОбработки
// 
// Возвращаемое значение:
//  см. НовыйНаборПравилОбработки
&НаСервере
Функция ДочерниеПравилаОбъектаРекурсивно(Родитель, ДанныеПравилПоРодителям)
	
	НаборПравил = НовыйНаборПравилОбработки();
	
	ПравилаРодителя = ДанныеПравилПоРодителям[Родитель];
	Если ПравилаРодителя = Неопределено Тогда
		Возврат НаборПравил;
	КонецЕсли;
	
	Для Каждого ДанныеПравила Из ПравилаРодителя Цикл
		
		ДанныеКНабору = НовыеДанныеПравилаОбработки();
		ДанныеКНабору.ПравилоОбработки = ДанныеПравила.ПравилоОбработки;
		ДанныеКНабору.ЭлементГруппировки = ДанныеПравила.ЭлементГруппировки;
		ДанныеКНабору.ДействуетС = ДанныеПравила.ДействуетС;
		ДанныеКНабору.ДействуетПо = ДанныеПравила.ДействуетПо;
		ДанныеКНабору.ДочерниеПравила =
			ДочерниеПравилаОбъектаРекурсивно(ДанныеПравила.ПравилоОбработки, ДанныеПравилПоРодителям);
		
		НаборПравил.Добавить(ДанныеКНабору);
		
	КонецЦикла;
	
	Возврат НаборПравил;
	
КонецФункции

// Возвращает выборки данных для заполнения дерева настроек
// 
// Параметры:
//  ВидыОбъектов - Массив Из ОпределяемыйТип.ВидОбъектаСОбработкой
// 
// Возвращаемое значение:
//  Структура:
//    * НастройкиОбработки - ВыборкаИзРезультатаЗапроса:
//      ** НастройкиОбработки - СправочникСсылка.НастройкиОбработкиВидовОбъектов
//      ** ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой
//      ** ДействуетС - Дата
//      ** ДействуетПо - Дата
//    * ПравилаОбработки - ВыборкаИзРезультатаЗапроса:
//      ** ПравилоОбработки - СправочникСсылка.ПравилаОбработки
//      ** ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой
//      ** ЭлементГруппировки - СправочникСсылка.СтруктураПредприятия -
//                            - СправочникСсылка.ВидыМероприятий - 
//                            - СправочникСсылка.ВидыДокументов - 
//                            - СправочникСсылка.ТематикиДокументов - 
//                            - СправочникСсылка.Организации -
//                            - Неопределено -
//      ** ДействуетС - Дата
//      ** ДействуетПо - Дата
//
&НаСервере
Функция ВыборкиДанныхНастроекОбработки(ВидыОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.Ссылка КАК НастройкиОбработки,
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта КАК ВидОбъекта,
		|	НастройкиОбработкиВидовОбъектов.ДействуетС КАК ДействуетС,
		|	НастройкиОбработкиВидовОбъектов.ДействуетПо КАК ДействуетПо
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта В (&ВидыОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки,
		|	ПравилаОбработки.ЭлементГруппировки КАК ВидОбъекта,
		|	ПравилаОбработки.ЭлементГруппировки КАК ЭлементГруппировки,
		|	ПравилаОбработки.ДействуетС КАК ДействуетС,
		|	ПравилаОбработки.ДействуетПо КАК ДействуетПо
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|ГДЕ
		|	ПравилаОбработки.ЭлементГруппировки В (&ВидыОбъектов)";
	Запрос.УстановитьПараметр("ВидыОбъектов", ВидыОбъектов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНастроек = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	ВыборкаПравил = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	
	ВыборкиДанных = Новый Структура;
	ВыборкиДанных.Вставить("НастройкиОбработки", ВыборкаНастроек);
	ВыборкиДанных.Вставить("ПравилаОбработки", ВыборкаПравил);
	
	Возврат ВыборкиДанных;
	
КонецФункции

// Возвращает массив выборок результатов запроса с данными дочерних правил обработки
// 
// Параметры:
//  ПравилаОбработки - Массив Из СправочникСсылка.ПравилаОбработки
// 
// Возвращаемое значение:
//  Массив Из ВыборкаИзРезультатаЗапроса:
//    * ПравилоОбработки - СправочникСсылка.ПравилаОбработки
//    * ЭлементГруппировки - СправочникСсылка.СтруктураПредприятия -
//                         - СправочникСсылка.ВидыМероприятий - 
//                         - СправочникСсылка.ВидыДокументов - 
//                         - СправочникСсылка.ТематикиДокументов - 
//                         - СправочникСсылка.Организации -
//                         - Неопределено -
//    * ДействуетС - Дата
//    * ДействуетПо - Дата
//    * Родитель - СправочникСсылка.ПравилаОбработки
//
&НаСервере
Функция ВыборкиДочернихПравилОбработки(ПравилаОбработки)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки,
		|	ПравилаОбработки.ЭлементГруппировки КАК ЭлементГруппировки,
		|	ПравилаОбработки.ДействуетС КАК ДействуетС,
		|	ПравилаОбработки.ДействуетПо КАК ДействуетПо,
		|	ПравилаОбработки.Родитель КАК Родитель,
		|	1 КАК ГлубинаДочернего
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|ГДЕ
		|	ПравилаОбработки.Родитель В (&РодительскиеПравила)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК Ссылка,
		|	ПравилаОбработки.ЭлементГруппировки КАК ЭлементГруппировки,
		|	ПравилаОбработки.ДействуетС КАК ДействуетС,
		|	ПравилаОбработки.ДействуетПо КАК ДействуетПо,
		|	ПравилаОбработки.Родитель КАК Родитель,
		|	2
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК Родители
		|		ПО ПравилаОбработки.Родитель = Родители.Ссылка
		|ГДЕ
		|	Родители.Родитель В (&РодительскиеПравила)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК Ссылка,
		|	ПравилаОбработки.ЭлементГруппировки КАК ЭлементГруппировки,
		|	ПравилаОбработки.ДействуетС КАК ДействуетС,
		|	ПравилаОбработки.ДействуетПо КАК ДействуетПо,
		|	ПравилаОбработки.Родитель КАК Родитель,
		|	3
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК Родители
		|		ПО ПравилаОбработки.Родитель = Родители.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК Прародители
		|		ПО Родители.Родитель = Прародители.Ссылка
		|ГДЕ
		|	Прародители.Родитель В (&РодительскиеПравила)";
	
	ТекущиеРодители = ПравилаОбработки;
	ВыбраныВсеДочерние = Ложь;
	
	Выборки = Новый Массив(); // Массив Из ВыборкаИзРезультатаЗапроса
	Пока Не ВыбраныВсеДочерние Цикл
		
		Запрос.УстановитьПараметр("РодительскиеПравила", ТекущиеРодители);
		//@skip-check query-in-loop
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ВыбраныВсеДочерние = Истина;
			Продолжить;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборки.Добавить(Выборка);
		
		ПравилаУровня3 = Новый Массив(); // Массив Из СправочникСсылка.ПравилаОбработки
		Пока Выборка.Следующий() Цикл
			Если Выборка.ГлубинаДочернего = 3 Тогда
				ПравилаУровня3.Добавить(Выборка.ПравилоОбработки);
			КонецЕсли;
		КонецЦикла;
		Выборка.Сбросить();
		
		ТекущиеРодители = ПравилаУровня3;
		
	КонецЦикла;
	
	Возврат Выборки;
	
КонецФункции

#КонецОбласти

#Область ВыборНастроекОбработкиВПараметрах

// Выбирает к выгрузке строки по переданным в параметрах формы настройкам обработки
// 
// Параметры:
//  НастройкиОбработки - СправочникСсылка.НастройкиОбработкиВидовОбъектов
&НаСервере
Процедура ВыбратьДанныеДляВыгрузиПоПереданнымНастройкамОбработки(НастройкиОбработки)
	
	ТипыСтрок = ТипыСтрокКопируемыхнастроек();
	
	Для Каждого СтрокаВидаОбъекта Из ДеревоНастроекОбработки.ПолучитьЭлементы() Цикл
		
		СтрокиГруппировок = СтрокаВидаОбъекта.ПолучитьЭлементы();
		
		СтрокаГруппировкиНастроек = Неопределено;
		СтрокаГруппировкиПравил = Неопределено;
		
		Для Каждого СтрокаГруппировки Из СтрокиГруппировок Цикл
			
			Если СтрокаГруппировки.ТипСтроки = ТипыСтрок.ГруппировкаНастроекОбработки Тогда
				СтрокаГруппировкиНастроек = СтрокаГруппировки;
			ИначеЕсли СтрокаГруппировки.ТипСтроки = ТипыСтрок.ГруппировкаПравилОбработки Тогда
				СтрокаГруппировкиПравил = СтрокаГруппировки;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаНастроек = Неопределено;
		
		Если СтрокаГруппировкиНастроек <> Неопределено Тогда
			
			Для Каждого СтрокаНастройки Из СтрокаГруппировкиНастроек.ПолучитьЭлементы() Цикл
				
				Если СтрокаНастройки.НастройкиОбработки = НастройкиОбработки Тогда
					СтрокаГруппировкиНастроек.Выгружать = Истина;
					СтрокаВидаОбъекта.Выгружать = Истина;
					СтрокаНастройки.Выгружать = Истина;
					СтрокаНастроек = СтрокаНастройки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаНастроек <> Неопределено И СтрокаГруппировкиПравил <> Неопределено Тогда
			
			НайденаПересекающаясяСтрока = Ложь;
			Если СтрокаГруппировкиПравил.ПолучитьЭлементы().Количество() > 0 Тогда
				ПоследняяСтрокаПравил = СтрокаГруппировкиПравил;
			КонецЕсли;
			
			Для Каждого СтрокаПравила Из СтрокаГруппировкиПравил.ПолучитьЭлементы() Цикл
				
				Если СтрокиПересекаютсяПоСрокуДействия(СтрокаПравила, СтрокаНастроек) Тогда
					
					Если Не НайденаПересекающаясяСтрока
						Или ПоследняяСтрокаПравил.ДействуетС <= СтрокаПравила.ДействуетС Тогда
						
						ПоследняяСтрокаПравил = СтрокаПравила;
						НайденаПересекающаясяСтрока = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденаПересекающаясяСтрока Тогда
				
				СтрокаГруппировкиПравил.Выгружать = Истина;
				
				СтрокиКОтметке = Новый Массив(); // Массив Из ДанныеФормыЭлементДерева
				СтрокиКОтметке.Добавить(ПоследняяСтрокаПравил);
				
				Пока СтрокиКОтметке.Количество() > 0 Цикл
					
					НовыеСтрокиКОтметке = Новый Массив(); // Массив Из ДанныеФормыЭлементДерева
					
					Для Каждого СтрокаКОтметке Из СтрокиКОтметке Цикл
						
						СтрокаКОтметке["Выгружать"] = Истина;
						
						Для Каждого ДочерняяСтрока Из СтрокаКОтметке.ПолучитьЭлементы() Цикл
							НовыеСтрокиКОтметке.Добавить(ДочерняяСтрока);
						КонецЦикла;
						
					КонецЦикла;
					
					СтрокиКОтметке = НовыеСтрокиКОтметке;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Строки пересекаются по сроку действия.
// 
// Параметры:
//  ПерваяСтрока - ДанныеФормыЭлементДерева - Первая строка
//  ВтораяСтрока - ДанныеФормыЭлементДерева - Вторая строка
// 
// Возвращаемое значение:
//  Булево
&НаКлиентеНаСервереБезКонтекста
Функция СтрокиПересекаютсяПоСрокуДействия(ПерваяСтрока, ВтораяСтрока)
	
	ПустаяДата = Дата(1, 1, 1);
	
	Если ПерваяСтрока.ДействуетПо = ПустаяДата Тогда
		
		Если ВтораяСтрока.ДействуетПо = ПустаяДата Тогда
			Возврат Истина;
		ИначеЕсли ПерваяСтрока.ДействуетС <= ВтораяСтрока.ДействуетПо Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Если ВтораяСтрока.ДействуетПо = ПустаяДата И ВтораяСтрока.ДействуетС <= ПерваяСтрока.ДействуетПо Тогда
			Возврат Истина;
		ИначеЕсли ВтораяСтрока.ДействуетС <= ПерваяСтрока.ДействуетПо
			И ПерваяСтрока.ДействуетС <= ВтораяСтрока.ДействуетПо Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ИзменениеФлажковТаблицы

// Обрабатывает изменение флага строки
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева
&НаКлиенте
Процедура ОбработатьИзменениеФлагаСтроки(СтрокаДерева)
	
	ТипыСтрок = ТипыСтрокКопируемыхнастроек();
	
	Если СтрокаДерева.ТипСтроки = ТипыСтрок.ВидОбъекта Тогда
		
		УстановитьФлагСтрокиВидаОбъекта(СтрокаДерева, СтрокаДерева.Выгружать);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипыСтрок.ГруппировкаНастроекОбработки Тогда
		
		УстановитьФлагСтрокиГруппировкиНастроек(СтрокаДерева, СтрокаДерева.Выгружать);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипыСтрок.ГруппировкаПравилОбработки Тогда
		
		УстановитьФлагСтрокиГруппировкиПравилОбработки(СтрокаДерева, СтрокаДерева.Выгружать);;
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипыСтрок.НастройкиОбработки Тогда
		
		УстановитьФлагСтрокиНастроек(СтрокаДерева, СтрокаДерева.Выгружать);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипыСтрок.ПравилоОбработки Тогда
		
		ПриИзмененииФлагаСтрокиПравил(СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ВидОбъекта

// Устанавливает флаг строки вида объекта
// 
// Параметры:
//  СтрокаВидаОбъекта - ДанныеФормыЭлементДерева
//  Флаг - Булево
//
&НаКлиенте
Процедура УстановитьФлагСтрокиВидаОбъекта(СтрокаВидаОбъекта, Флаг)
	
	ДочерниеСтроки = СтрокаВидаОбъекта.ПолучитьЭлементы();
	
	ТипыСтрок = ТипыСтрокКопируемыхнастроек();
	Для Каждого СтрокаГруппировки Из ДочерниеСтроки Цикл
		
		Если СтрокаГруппировки.ТипСтроки = ТипыСтрок.ГруппировкаНастроекОбработки Тогда
			УстановитьФлагСтрокиГруппировкиНастроек(СтрокаГруппировки, Флаг, Ложь);
		ИначеЕсли СтрокаГруппировки.ТипСтроки = ТипыСтрок.ГруппировкаПравилОбработки Тогда
			УстановитьФлагСтрокиГруппировкиПравилОбработки(СтрокаГруппировки, Флаг, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет флаг строки вида объекта согласно установленным флагам для настроек и правил обработки
// 
// Параметры:
//  СтрокаВидаОбъекта - ДанныеФормыЭлементДерева
//
&НаКлиенте
Процедура ОбновитьФлагСтрокиВидаОбъектаПоДочерним(СтрокаВидаОбъекта)
	
	ДочерниеСтроки = СтрокаВидаОбъекта.ПолучитьЭлементы();
	
	ЕстьВыгружаемыеДочерние = Ложь;
	Для Каждого СтрокаГруппировки Из ДочерниеСтроки Цикл
		Если СтрокаГруппировки.Выгружать Тогда
			ЕстьВыгружаемыеДочерние = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаВидаОбъекта.Выгружать = ЕстьВыгружаемыеДочерние;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиОбработки

// Устанавливает флаг у строги группировки настроек
// 
// Параметры:
//  СтрокаГруппы - ДанныеФормыЭлементДерева
//  Флаг - Булево
//  ОбновлятьРодителей - Булево
//
&НаКлиенте
Процедура УстановитьФлагСтрокиГруппировкиНастроек(СтрокаГруппы, Флаг, ОбновлятьРодителей = Истина)
	
	СтрокаГруппы.Выгружать = Флаг;
	ДочерниеСтроки = СтрокаГруппы.ПолучитьЭлементы();
	
	Для Каждого СтрокаНастройки Из ДочерниеСтроки Цикл
		СтрокаНастройки.Выгружать = Ложь;
	КонецЦикла;
	
	Если Не Флаг Или ДочерниеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАктуальныхНастроек = Неопределено; // Неопределено, ДанныеФормыЭлементДерева
	СтрокаПоследнихНастроек = ДочерниеСтроки[0]; // ДанныеФормыЭлементДерева
	
	ТекущаяДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	ПустаяДата = Дата(1, 1, 1);
	Для Каждого СтрокаНастройки Из ДочерниеСтроки Цикл
		
		Если (СтрокаНастройки.ДействуетС <= ТекущаяДата)
			И (СтрокаНастройки.ДействуетПо > ТекущаяДата
				Или СтрокаНастройки.ДействуетПо = ПустаяДата) Тогда
			
			СтрокаАктуальныхНастроек = СтрокаНастройки;
		КонецЕсли;
		
		Если (СтрокаПоследнихНастроек.ДействуетС < СтрокаНастройки.ДействуетС) Тогда
			СтрокаПоследнихНастроек = СтрокаНастройки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаАктуальныхНастроек <> Неопределено Тогда
		СтрокаАктуальныхНастроек.Выгружать = Истина;;
	Иначе
		СтрокаПоследнихНастроек.Выгружать = Истина;
	КонецЕсли;
	
	Если ОбновлятьРодителей Тогда
		ОбновитьФлагСтрокиВидаОбъектаПоДочерним(СтрокаГруппы.ПолучитьРодителя());
	КонецЕсли;
	
КонецПроцедуры

// Обновляет флаг группы по дочерним строкам настроек
// 
// Параметры:
//  СтрокаГруппы - ДанныеФормыЭлементДерева
//
&НаКлиенте
Процедура ОбновитьФлагСтрокиГруппировкиНастроекПоДочерним(СтрокаГруппы)
	
	ЕстьВключенныеНастройки = Ложь;
	
	ВсеСтрокиНастроек = СтрокаГруппы.ПолучитьЭлементы();
	Для Каждого СтрокаНастройки Из ВсеСтрокиНастроек Цикл
		Если СтрокаНастройки.Выгружать Тогда
			ЕстьВключенныеНастройки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаГруппы.Выгружать = ЕстьВключенныеНастройки;
	ОбновитьФлагСтрокиВидаОбъектаПоДочерним(СтрокаГруппы.ПолучитьРодителя());
	
КонецПроцедуры

// Устанавливает флаг у строги группировки настроек
// 
// Параметры:
//  СтрокаНастроек - ДанныеФормыЭлементДерева
//  Флаг - Булево
//
&НаКлиенте
Процедура УстановитьФлагСтрокиНастроек(СтрокаНастроек, Флаг)
	
	СтрокаГруппировкиНастроек = СтрокаНастроек.ПолучитьРодителя();
	
	ВсеСтрокиНастроек = СтрокаГруппировкиНастроек.ПолучитьЭлементы();
	Для Каждого Строка Из ВсеСтрокиНастроек Цикл
		Если Строка <> СтрокаНастроек Тогда
			Строка.Выгружать = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьФлагСтрокиГруппировкиНастроекПоДочерним(СтрокаГруппировкиНастроек);
	
КонецПроцедуры

#КонецОбласти

#Область ПравилаОбработки

// Обрабатывает изменение флага строки правил
// 
// Параметры:
//  СтрокаПравил - ДанныеФормыЭлементДерева
//
&НаКлиенте
Процедура ПриИзмененииФлагаСтрокиПравил(СтрокаПравил)
	
	Если Не СтрокаПравил.Выгружать Тогда
		УстановитьФлагДочернихСтрокПравилРекурсивно(СтрокаПравил, Ложь);
	КонецЕсли;
	
	ТипыСтрок = ТипыСтрокКопируемыхнастроек();
	
	ТекущаяСтрокаПравил = СтрокаПравил;
	Родитель = ТекущаяСтрокаПравил.ПолучитьРодителя();
	Пока Родитель.ТипСтроки = ТипыСтрок.ПравилоОбработки Цикл
		
		Если СтрокаПравил.Выгружать Тогда
			Родитель.Выгружать = Истина;
		КонецЕсли;
		
		ТекущаяСтрокаПравил = Родитель;
		Родитель = ТекущаяСтрокаПравил.ПолучитьРодителя();
		
	КонецЦикла;
	
	СтрокаГруппировкиПравил = Родитель;
	
	Если СтрокаПравил.Выгружать Тогда
		
		СтрокиКорневыхПравил = СтрокаГруппировкиПравил.ПолучитьЭлементы();
		Для Каждого СтрокаКорневогоПравила Из СтрокиКорневыхПравил Цикл
			Если СтрокаКорневогоПравила <> ТекущаяСтрокаПравил И СтрокаКорневогоПравила.Выгружать = Истина Тогда
				СтрокаКорневогоПравила.Выгружать = Ложь;
				УстановитьФлагДочернихСтрокПравилРекурсивно(СтрокаКорневогоПравила, Ложь);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьФлагСтрокиГруппировкиПравилОбработкиПоДочерним(СтрокаГруппировкиПравил);
	
КонецПроцедуры

// Устанавливает флаг строки группы правил обработки
// 
// Параметры:
//  СтрокаГруппы - ДанныеФормыЭлементДерева
//  Флаг - Булево
//  ОбновлятьРодителей - Булево
//
&НаКлиенте
Процедура УстановитьФлагСтрокиГруппировкиПравилОбработки(СтрокаГруппы, Флаг, ОбновлятьРодителей = Истина)
	
	СтрокаГруппы.Выгружать = Флаг;
	ДочерниеСтроки = СтрокаГруппы.ПолучитьЭлементы();
	УстановитьФлагДочернихСтрокПравилРекурсивно(СтрокаГруппы, Ложь);
	Если Не Флаг Или ДочерниеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАктуальныхПравил = Неопределено; // Неопределено, ДанныеФормыЭлементДерева
	СтрокаПоследнихПравил = ДочерниеСтроки[0]; // ДанныеФормыЭлементДерева
	
	ТекущаяДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	ПустаяДата = Дата(1, 1, 1);
	Для Каждого СтрокаПравила Из ДочерниеСтроки Цикл
		
		Если (СтрокаПравила.ДействуетС <= ТекущаяДата)
			И (СтрокаПравила.ДействуетПо > ТекущаяДата
				Или СтрокаПравила.ДействуетПо = ПустаяДата) Тогда
			
			СтрокаАктуальныхПравил = СтрокаПравила;
		КонецЕсли;
		
		Если (СтрокаПоследнихПравил.ДействуетС < СтрокаПравила.ДействуетС) Тогда
			СтрокаПоследнихПравил = СтрокаПравила;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаАктуальныхПравил <> Неопределено Тогда
		СтрокаАктуальныхПравил.Выгружать = Истина;
		УстановитьФлагДочернихСтрокПравилРекурсивно(СтрокаАктуальныхПравил, Истина);
	Иначе
		СтрокаПоследнихПравил.Выгружать = Истина;
		УстановитьФлагДочернихСтрокПравилРекурсивно(СтрокаПоследнихПравил, Истина);
	КонецЕсли;
	
	Если ОбновлятьРодителей Тогда
		ОбновитьФлагСтрокиВидаОбъектаПоДочерним(СтрокаГруппы.ПолучитьРодителя());
	КонецЕсли;
	
КонецПроцедуры

// Обновляет флаг строки группировки правил обработки по дочерним
// 
// Параметры:
//  СтрокаГруппы - ДанныеФормыЭлементДерева
&НаКлиенте
Процедура ОбновитьФлагСтрокиГруппировкиПравилОбработкиПоДочерним(СтрокаГруппы)
	
	СтрокиПравил = СтрокаГруппы.ПолучитьЭлементы();
	ЕстьВключенные = Ложь;
	Для Каждого СтрокаПравил Из СтрокиПравил Цикл
		Если СтрокаПравил.Выгружать Тогда
			ЕстьВключенные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаГруппы.Выгружать = ЕстьВключенные;
	ОбновитьФлагСтрокиВидаОбъектаПоДочерним(СтрокаГруппы.ПолучитьРодителя());
	
КонецПроцедуры

// Рекурсивно устанавливает дочерним строкам правил указанный флаг
// 
// Параметры:
//  СтрокаРодителя - ДанныеФормыЭлементДерева
//  Флаг - Булево
//
&НаКлиенте
Процедура УстановитьФлагДочернихСтрокПравилРекурсивно(СтрокаРодителя, Флаг)
	
	ДочерниеСтроки = СтрокаРодителя.ПолучитьЭлементы();
	Для Каждого Строка Из ДочерниеСтроки Цикл
		Строка.Выгружать = Флаг;
		УстановитьФлагДочернихСтрокПравилРекурсивно(Строка, Флаг);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВыбранныеНастройки

// Возвращает результат проверки выбранных настроек для выгрузки
// 
// Возвращаемое значение:
//  Структура -  Результат проверки выбранных для выгрузки настроек:
// * ВыбранныеНастройкиКорректны - Булево - 
// * Ошибки - Массив Из Строка
&НаКлиенте
Функция РезультатПроверкиВыбранныхДляВыгрузкиНастроек()
	
	НастройкиКорректны = Истина;
	НаборОшибок = Новый Массив(); // Массив Из Строка
	
	ВыбраноВидовОбъектов = 0;
	
	ТипыСтрок = ТипыСтрокКопируемыхнастроек();
	
	Для Каждого СтрокаВидаОбъекта Из ДеревоНастроекОбработки.ПолучитьЭлементы() Цикл
		
		Если Не СтрокаВидаОбъекта.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		ВидОбъекта = СтрокаВидаОбъекта.ВидОбъекта;
		Если Не ЗначениеЗаполнено(ВидОбъекта) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для строки %1 не заполнен вид объекта.'"),
				СтрокаВидаОбъекта.ПредставлениеСтроки);
			НастройкиКорректны = Ложь;
			НаборОшибок.Добавить(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		ВыбраноВидовОбъектов = ВыбраноВидовОбъектов + 1;
		
		ВыбранныеСтрокиНастроек = Новый Массив(); // Массив Из см. ДанныеВыбранныхНастроек
		ВыбранныеСтрокиКорневыхПравил = Новый Массив(); // Массив Из см. ДанныеВыбранныхПравилОбработки
		
		Для Каждого СтрокаГруппировки Из СтрокаВидаОбъекта.ПолучитьЭлементы() Цикл
			
			Если Не СтрокаГруппировки.Выгружать Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаГруппировки.ТипСтроки = ТипыСтрок.ГруппировкаНастроекОбработки Тогда
				
				Для Каждого СтрокаНастройки Из СтрокаГруппировки.ПолучитьЭлементы() Цикл
					
					Если Не СтрокаНастройки.Выгружать Тогда
						Продолжить;
					КонецЕсли;
					
					ВыбранныеСтрокиНастроек.Добавить(ДанныеВыбранныхНастроек(СтрокаНастройки));
					
				КонецЦикла;
				
			ИначеЕсли СтрокаГруппировки.ТипСтроки = ТипыСтрок.ГруппировкаПравилОбработки Тогда
				
				Для Каждого СтрокаПравил Из СтрокаГруппировки.ПолучитьЭлементы() Цикл
					
					Если Не СтрокаПравил.Выгружать Тогда
						Продолжить;
					КонецЕсли;
					
					ВыбранныеСтрокиКорневыхПравил.Добавить(ДанныеВыбранныхПравилОбработки(СтрокаПравил));
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыбранныеСтрокиНастроек.Количество() = 0 Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для вида объекта %1 не выбраны настройки обработки для выгрузки'"),
				ВидОбъекта);
			НастройкиКорректны = Ложь;
			НаборОшибок.Добавить(ТекстОшибки);
			Продолжить;
			
		ИначеЕсли ВыбранныеСтрокиНастроек.Количество() > 1 Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для вида объекта %1 выбрано несколько настроект обработки для выгрузки'"),
				ВидОбъекта);
			НастройкиКорректны = Ложь;
			НаборОшибок.Добавить(ТекстОшибки);
			Продолжить;
			
		КонецЕсли;
		
		Если ВыбранныеСтрокиКорневыхПравил.Количество() > 1 Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для вида объекта %1 выбрано несколько правил обработки по разным периодам'"),
				ВидОбъекта);
			НастройкиКорректны = Ложь;
			НаборОшибок.Добавить(ТекстОшибки);
			Продолжить;
			
		ИначеЕсли ВыбранныеСтрокиКорневыхПравил.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеНастроек = ВыбранныеСтрокиНастроек[0];
		ДанныеПравил = ВыбранныеСтрокиКорневыхПравил[0];
		
		ПустаяДата = Дата(1, 1, 1);
		
		ПересекаютсяПоСтрокуДействия = Ложь;
		Если ДанныеНастроек.ДействуетПо = ПустаяДата Тогда
			
			Если ДанныеПравил.ДействуетПо = ПустаяДата Тогда
				ПересекаютсяПоСтрокуДействия = Истина;
			ИначеЕсли ДанныеНастроек.ДействуетС <= ДанныеПравил.ДействуетПо Тогда
				ПересекаютсяПоСтрокуДействия = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеПравил.ДействуетПо = ПустаяДата И ДанныеПравил.ДействуетС <= ДанныеНастроек.ДействуетПо Тогда
				ПересекаютсяПоСтрокуДействия = Истина;
			ИначеЕсли ДанныеПравил.ДействуетС <= ДанныеНастроек.ДействуетПо
				И ДанныеНастроек.ДействуетС <= ДанныеПравил.ДействуетПо Тогда
				
				ПересекаютсяПоСтрокуДействия = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПересекаютсяПоСтрокуДействия Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для вида объекта %1 выбранные настройки и правила обработки не пересекаются по сроку действия'"),
				ВидОбъекта);
			НастройкиКорректны = Ложь;
			НаборОшибок.Добавить(ТекстОшибки);
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыбраноВидовОбъектов = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного вида объекта для выгрузки'");
		НастройкиКорректны = Ложь;
		НаборОшибок.Добавить(ТекстОшибки);
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ВыбранныеНастройкиКорректны", НастройкиКорректны);
	Результат.Вставить("Ошибки", НаборОшибок);
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные выбранных настроек по строке дерева
// 
// Параметры:
//  СтрокаНастройкиОбработки - ДанныеФормыЭлементДерева - 
// 
// Возвращаемое значение:
//  Структура:
// * Настройка - СправочникСсылка.НастройкиОбработкиВидовОбъектов
// * ДействуетС - Дата
// * ДействуетПо - Дата
&НаКлиенте
Функция ДанныеВыбранныхНастроек(СтрокаНастройкиОбработки)
	
	ДанныеНастройки = Новый Структура;
	ДанныеНастройки.Вставить("Настройка", СтрокаНастройкиОбработки.НастройкиОбработки);
	ДанныеНастройки.Вставить("ДействуетС", СтрокаНастройкиОбработки.ДействуетС);
	ДанныеНастройки.Вставить("ДействуетПо", СтрокаНастройкиОбработки.ДействуетПо);
	
	Возврат ДанныеНастройки;
	
КонецФункции

// Возвращает данные выбранных корневых правил по строке дерева
// 
// Параметры:
//  СтрокаПравилОбработки - ДанныеФормыЭлементДерева - 
// 
// Возвращаемое значение:
//  Структура -  Данные выбранных правил обработки:
// * Правило - СправочникСсылка.ПравилаОбработки
// * ДействуетС - Дата
// * ДействуетПо - Дата
&НаКлиенте
Функция ДанныеВыбранныхПравилОбработки(СтрокаПравилОбработки)
	
	ДанныеПравил = Новый Структура;
	ДанныеПравил.Вставить("Правило", СтрокаПравилОбработки.ПравилоОбработки);
	ДанныеПравил.Вставить("ДействуетС", СтрокаПравилОбработки.ДействуетС);
	ДанныеПравил.Вставить("ДействуетПо", СтрокаПравилОбработки.ДействуетПо);
	
	Возврат ДанныеПравил;
	
КонецФункции

// Вовзращает выбранные настройки при закрытии формы
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ВидОбъектаСОбработкой
//    * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработкиДляВыгрузки
&НаКлиенте
Функция ВыбранныеНастройки()
	
	ТипыСтрок = ТипыСтрокКопируемыхнастроек();
	
	НастройкиПоВидамОбъектов = Новый Соответствие();
	
	Для Каждого СтрокаВидаОбъекта Из ДеревоНастроекОбработки.ПолучитьЭлементы() Цикл
		
		Если Не СтрокаВидаОбъекта.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		ВидОбъекта = СтрокаВидаОбъекта.ВидОбъекта;
		
		Настройка = ПредопределенноеЗначение("Справочник.НастройкиОбработкиВидовОбъектов.ПустаяСсылка");
		ПравилаОбработки = Новый Массив(); // Массив Из СправочникСсылка.ПравилаОбработки
		Для Каждого СтрокаГруппировки Из СтрокаВидаОбъекта.ПолучитьЭлементы() Цикл
			
			Если Не СтрокаГруппировки.Выгружать Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаГруппировки.ТипСтроки = ТипыСтрок.ГруппировкаНастроекОбработки Тогда
				
				Для Каждого СтрокаНастройки Из СтрокаГруппировки.ПолучитьЭлементы() Цикл
					
					Если Не СтрокаНастройки.Выгружать Тогда
						Продолжить;
					КонецЕсли;
					
					Настройка = СтрокаНастройки.НастройкиОбработки;
					
				КонецЦикла;
				
			ИначеЕсли СтрокаГруппировки.ТипСтроки = ТипыСтрок.ГруппировкаПравилОбработки Тогда
				
				Для Каждого СтрокаПравил Из СтрокаГруппировки.ПолучитьЭлементы() Цикл
					
					Если Не СтрокаПравил.Выгружать Тогда
						Продолжить;
					КонецЕсли;
					
					ПравилаОбработки.Добавить(СтрокаПравил.ПравилоОбработки);
					ДочерниеПравила = ВыбранныеДочерниеПравилаСтрокиДереваРекурсивно(СтрокаПравил);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПравилаОбработки, ДочерниеПравила);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеВидаОбъекта = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработкиДляВыгрузки();
		ДанныеВидаОбъекта.НастройкаОбработки = Настройка;
		ДанныеВидаОбъекта.ПравилаОбработки = ПравилаОбработки;
		НастройкиПоВидамОбъектов[ВидОбъекта] = ДанныеВидаОбъекта;
		
	КонецЦикла;
	
	Возврат НастройкиПоВидамОбъектов;
	
КонецФункции

// Возвращает выбранные дочерние правила строки дерева
// 
// Параметры:
//  СтрокаПравил - ДанныеФормыЭлементДерева
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.ПравилаОбработки
&НаКлиенте
Функция ВыбранныеДочерниеПравилаСтрокиДереваРекурсивно(СтрокаПравил)
	
	ВыбранныеПравила = Новый Массив(); // Массив Из СправочникСсылка.ПравилаОбработки
	
	Для Каждого ДочерняяСтрока Из СтрокаПравил.ПолучитьЭлементы() Цикл
		
		Если Не ДочерняяСтрока.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		ВыбранныеПравила.Добавить(ДочерняяСтрока.ПравилоОбработки);
		
		ВыбранныеДочерниеПравила = ВыбранныеДочерниеПравилаСтрокиДереваРекурсивно(ДочерняяСтрока);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВыбранныеПравила, ВыбранныеДочерниеПравила);
		
	КонецЦикла;
	
	Возврат ВыбранныеПравила;
	
КонецФункции

#КонецОбласти

#КонецОбласти
