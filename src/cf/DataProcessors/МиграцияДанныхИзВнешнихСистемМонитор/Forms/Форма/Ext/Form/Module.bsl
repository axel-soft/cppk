
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ПолучитьФункциональнуюОпцию("ЗагружатьДанныеИз21") Тогда
		Отказ = Истина;
		Сообщить(НСтр("ru = 'Не включена настройка ""Загружать данные из 1С Документооборота 2.1"" '"));
	КонецЕсли;	

	УстановитьПривилегированныйРежим(Истина);	  
	
	Каталог = Константы.ПереходКаталог.Получить();
	ЧислоПотоковЗагрузкиИз21 = Константы.ЧислоПотоковЗагрузкиИз21.Получить();
	Если ЧислоПотоковЗагрузкиИз21 = 0 Тогда
		ЧислоПотоковЗагрузкиИз21 = 5;
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ОпределитьСостояние());
	
	ОбновитьТекСостояние();
	УстановитьПривилегированныйРежим(Ложь);

	Если Не РольДоступна("ПолныеПрава") Тогда
		Элементы.ГруппаЗагрузка.Доступность = Ложь;
	КонецЕсли;		
	
	ОбновитьЗаголовокОстановить();
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Элементы.ГруппаПотоки.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьСостояние", 60);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьПостОбработкиЗагрузки(Команда)
	
	ОткрытьФорму("РегистрСведений.ОчередьПостОбработкиЗагрузки.ФормаСписка");
		
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьТекСостояние()
	
	Если Константы.ПереходСтадия.Получить() >= 3 Тогда
		
		ДатаНачалаЗагрузки = Константы.ДатаНачалаЗагрузкиИзВнешнейСистемы.Получить();
		
		ТекущееСостояние = СтрШаблон(НСтр("ru = 'Состояние: Загрузка начата (%1)'"), 
			Формат(МестноеВремя(ДатаНачалаЗагрузки), "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		Элементы.Начать.Доступность = Ложь;
		Элементы.ОписаниеПрогресса.Видимость = Истина;
		
	Иначе
		ТекущееСостояние = "";
		Элементы.Начать.Доступность = Истина;
		Элементы.ОписаниеПрогресса.Видимость = Ложь;
	КонецЕсли;	
	
	Если Не МиграцияДанныхИзВнешнихСистемСервер.ИдетЗагрузкаИзДО21() Тогда
		Элементы.Завершить.Доступность = Ложь;
	КонецЕсли;	
	
	Элементы.ОчередьПостОбработкиЗагрузки.Видимость = Ложь;
	Если Прогресс > 90 
		И РегистрыСведений.ОчередьПостОбработкиЗагрузки.ЕстьЗаписиВОчереди() Тогда
		Элементы.ОчередьПостОбработкиЗагрузки.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояние()
	
	Если ЭтаФорма.ВводДоступен() Тогда
		
		КаталогСохр = Элементы.Каталог.ТекстРедактирования;
		
		Результат = ОпределитьСостояние();
		Прогресс = Результат.Прогресс;
		ОписаниеПрогресса = Результат.ОписаниеПрогресса;
		
		Каталог = КаталогСохр;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьСостояние()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура();
	
	//Прогресс.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПереходСтадия.Значение КАК Значение
	|ИЗ
	|	Константа.ПереходСтадия КАК ПереходСтадия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереходКаталог.Значение КАК Значение
	|ИЗ
	|	Константа.ПереходКаталог КАК ПереходКаталог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Т.Загружено), 0) КАК Количество
	|ИЗ
	|	РегистрСведений.МиграцияДанныхИзВнешнихСистемКоличествоЗагруженных КАК Т");
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка = Пакет[0].Выбрать();
	Выборка.Следующий();
	Стадия = Выборка[0];
	
	КолВсего = 0;
	КоличествоЗагружено = 0;
	
	Если Стадия >= 4 Тогда
		Результат.Вставить("Прогресс", 100);
		
	Иначе
		Результат.Вставить("Прогресс", 0);
		
		Выборка = Пакет[2].Выбрать();
		Выборка.Следующий();
		Количество = Выборка[0];
		КоличествоЗагружено = Количество;
		
		Если ЗначениеЗаполнено(Количество) Тогда
			Выборка = Пакет[1].Выбрать();
			Выборка.Следующий();
			Каталог = Выборка[0];
					
			Попытка
				Чтение = Новый ЧтениеТекста(Каталог + ?(Найти(Каталог, "/"), "/", "\") + "Start.txt", КодировкаТекста.UTF8);
				Строки = СтрРазделить(Чтение.Прочитать(), Символы.ПС);
				Чтение.Закрыть();
				КолВсего = Число(Строки[2]);
			Исключение
				КолВсего = 0;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(КолВсего) Тогда
				Количество = Окр(Количество*100/КолВсего, 0);
				Если Количество >= 100 Тогда
					Результат.Вставить("Прогресс", 99);
				Иначе
					Результат.Вставить("Прогресс", Количество);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
	ДатаНачалаЗагрузки = Константы.ДатаНачалаЗагрузкиИзВнешнейСистемы.Получить();
	ПрошлоВремениСек = ТекущаяУниверсальнаяДата() - ДатаНачалаЗагрузки;
	
	ПрошлоВремениПредставление = ПредставлениеДельтыВремени(ПрошлоВремениСек);
	
	КоличествоОсталось = КолВсего - КоличествоЗагружено;
	СкоростьЗагрузки = 0;
	Если ПрошлоВремениСек <> 0 Тогда
		СкоростьЗагрузки = КоличествоЗагружено / ПрошлоВремениСек;
	КонецЕсли;
	
	ОсталосьВремениПредставление = "";
	Если СкоростьЗагрузки <> 0 И КоличествоОсталось > 0 Тогда
		ОсталосьВремениСек = Цел(КоличествоОсталось / СкоростьЗагрузки);
		ОсталосьВремениПредставление = ПредставлениеДельтыВремени(ОсталосьВремениСек);
	КонецЕсли;  
	
	Если КоличествоОсталось < 0 Тогда
		КоличествоОсталось = 0;
	КонецЕсли;	
	
	ОписаниеПрогресса = СтрШаблон(НСтр("ru = 'Прошло: %1.   Осталось (примерно): %2.
	|Загружено записей: %3.    Осталось загрузить: %4'"),
		ПрошлоВремениПредставление, ОсталосьВремениПредставление,
		КоличествоЗагружено, КоличествоОсталось);
	
	Результат.Вставить("ОписаниеПрогресса", ОписаниеПрогресса);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеДельтыВремени(ПрошлоВремениСек)
	
	ПрошлоВремениСуток = Цел(ПрошлоВремениСек / 86400);
	ПрошлоВремениЧасов = Цел(ПрошлоВремениСек / 3600);
	ПрошлоВремениМинут = Цел(ПрошлоВремениСек / 60);
	ПрошлоВремениПредставление = "";
	Если ПрошлоВремениСуток > 0 Тогда
		
		ШаблонПредставления = "%1 "
			+ ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				ПрошлоВремениСуток, НСтр("ru = 'день, дня, дней'"));
				
		ПрошлоВремениПредставление = СтрШаблон(ШаблонПредставления, ПрошлоВремениСуток);		
		
	ИначеЕсли ПрошлоВремениЧасов > 0 Тогда
		
		ШаблонПредставления = " %1 "
			+ ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				ПрошлоВремениЧасов, НСтр("ru = 'час, часа, часов'"));
		
		ПрошлоВремениПредставление = СтрШаблон(ШаблонПредставления, ПрошлоВремениЧасов);
		
	Иначе	

		ШаблонПредставления = " %1 "
			+ ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				ПрошлоВремениМинут, НСтр("ru = 'минута, минуты, минут'"));
			
		ПрошлоВремениПредставление = СтрШаблон(ШаблонПредставления, ПрошлоВремениМинут);
		
	КонецЕсли;	 
	
	Возврат ПрошлоВремениПредставление;
	
КонецФункции	


&НаСервере
Процедура НачатьНаСервере()
	
	КаталогВБазе = Константы.ПереходКаталог.Получить();
	Если ПустаяСтрока(КаталогВБазе) И Не ПустаяСтрока(Каталог) Тогда
		
		Константы.ПереходКаталог.Установить(Каталог);
	Иначе
		Каталог = КаталогВБазе;
	КонецЕсли;	
	
	Если ЧислоПотоковЗагрузкиИз21 = 0 Тогда
		ЧислоПотоковЗагрузкиИз21 = 5;
	КонецЕсли;	
	
	Константы.ЧислоПотоковЗагрузкиИз21.Установить(ЧислоПотоковЗагрузкиИз21);
	
	Если ПустаяСтрока(Каталог) Тогда
		ВызватьИсключение НСтр("ru = 'Необходимо заполнить каталог для файлов загрузки'");	
	КонецЕсли;
	
	//!!! если уже загружена предупреждение.
	
	Если Константы.ПереходСтадия.Получить() >= 3 Тогда
		ВызватьИсключение НСтр("ru = 'Загрузка уже начата'");
	КонецЕсли;
	
	
	// проверить что имя конфигурации верное.
	ИмяКонфигурации = "";
	ВерсияКонфигурации = "";

	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда   
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Каталог ""%1"" не существует или на него нет прав.'"), Каталог);
	КонецЕсли;	
	Файл = Неопределено;
	
	ИмяФайлаStart = Каталог + ?(Найти(Каталог, "/"), "/", "\") + "Start.txt";
	Файл = Новый Файл(ИмяФайлаStart);
	Если  Не Файл.Существует() Тогда   
		ВызватьИсключение НСтр("ru = 'Вы выбрали каталог не содержащий данных миграции.'");
	КонецЕсли;	
	Файл = Неопределено;
	
	Чтение = Новый ЧтениеТекста(ИмяФайлаStart, КодировкаТекста.UTF8);
	Строки = СтрРазделить(Чтение.Прочитать(), Символы.ПС);
	Чтение.Закрыть();
	ИмяКонфигурации = Строки[0];
	ВерсияКонфигурации = Строки[1];
	
	ВерсияКонфигурации3Числа = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(
		ВерсияКонфигурации);
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияКонфигурации3Числа, "2.1.34") < 0 Тогда
		
		Если ЗначениеЗаполнено(ВерсияКонфигурации) Тогда
		
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Миграция на версию %1 допустима только с версии 2.1.34 или выше.
			|Вы выбрали каталог с данными миграции с версии %2.'"),
			Метаданные.Версия,
			ВерсияКонфигурации3Числа);
		
		Иначе

			ТекстОшибки = СтрШаблон(НСтр("ru = 'Миграция на версию %1 допустима только с версии 2.1.34 или выше.
			|Вы выбрали каталог не содержащий данных миграции. Вначале выполните выгрузку из Документооборот 2.1.'"),
			Метаданные.Версия);
				
		КонецЕсли;	
		
		Константы.ПереходКаталог.Установить("");
		Каталог = "";
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;	
	
	Если ИмяКонфигурации <> Метаданные.Имя Тогда
		
		// с корп 2.1 можно перейти сразу на 30 Холдинг
		Если Метаданные.Имя <> "ДокументооборотХолдинга" 
			Или ИмяКонфигурации <> "ДокументооборотКОРП" Тогда
				
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Миграция допустима только с %1 на %2.
			|Вы выбрали каталог с данными миграции с %3.'"),
			Метаданные.Имя,
			Метаданные.Имя,
			ИмяКонфигурации);
			
			Константы.ПереходКаталог.Установить("");
			Каталог = "";
			
			ВызватьИсключение ТекстОшибки;
				
		КонецЕсли;	
		
	КонецЕсли;	
	
	
	ЗаписатьНаСервере();
	
	Если Константы.ПереходСтадия.Получить() < 1 Тогда
		
		РегистрыСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания.СоздатьНаборЗаписей().Записать();
		МиграцияДанныхИзВнешнихСистемСервер.Журналировать(НСтр("ru = 'Начало'"));
		
		Константы.ПереходСтадия.Установить(1);
	КонецЕсли;
	
	Если Константы.ПереходСтадия.Получить() < 2 Тогда
		//Приостановка лишних рег.заданий.
		
		МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗаданий(Ложь);
		
		Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Запретить);
			Константы.ИспользоватьПолнотекстовыйПоиск.Установить(Ложь);
		КонецЕсли;
	
		Константы.ПереходСтадия.Установить(2);
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗадания(Истина);
	Константы.ПереходСтадия.Установить(3);
	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИсточникАктивен(Истина);
	
	Константы.ДатаНачалаЗагрузкиИзВнешнейСистемы.Установить(ТекущаяУниверсальнаяДата());
	
	ОбновитьТекСостояние();
			
КонецПроцедуры

&НаКлиенте
Процедура Начать(Команда)
	
	Если Не ЗначениеЗаполнено(Каталог) Тогда
		Каталог = Элементы.Каталог.ТекстРедактирования;
	КонецЕсли;	
	
	НачатьНаСервере();
	ОбновитьСостояние();
	
КонецПроцедуры

&НаСервере
Процедура ОстановитьНаСервере()
	
	Каталог = Константы.ПереходКаталог.Получить();
	Если ПустаяСтрока(Каталог) Тогда
		ВызватьИсключение НСтр("ru = 'Необходимо заполнить каталог для файлов загрузки'");	
	КонецЕсли;
	
	Если Константы.ПереходСтадия.Получить() = 3 Тогда
	
		Константы.ПереходСтадия.Установить(2);
		МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗадания(Ложь);
		
	Иначе	

		Константы.ПереходСтадия.Установить(3);
		МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗадания(Истина);
			
	КонецЕсли;	
	
	ОбновитьЗаголовокОстановить();
	ОбновитьТекСостояние();
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	ОстановитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗавершитьНаСервере()

	ПрерватьПроцессыИз21();	
	
	//!!!Проверка и предупреждение.
	Константы.ПереходСтадия.Установить(0);
	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗадания(Ложь);
	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗаданий(Истина);

	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИсточникАктивен(Ложь); // тут еще и процессы прервем.
	
	ОбновлениеКэширующихДанных.СброситьПопытки();
	
	ОбновитьТекСостояние();
	
	Константы.ИспользоватьОтметкиВремени.ОбновитьЗначение();
	
КонецПроцедуры

&НаСервере
Функция СобытиеЖурналаРегистрации()
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Прерывание процессов из 2.1'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

&НаСервере
Процедура ПрерватьПроцессыИз21()
	
	УстановитьПривилегированныйРежим(Истина);
	ЕстьОшибки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Выполнена = ЛОЖЬ
	|	И ЗадачаИсполнителя.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ДО21)
	|	И ЗадачаИсполнителя.БизнесПроцесс.Завершен = ЛОЖЬ
	|	И ЗадачаИсполнителя.БизнесПроцесс.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
	|	И ЗадачаИсполнителя.БизнесПроцесс.Стартован = ИСТИНА
	|	И ЗадачаИсполнителя.БизнесПроцесс.ВедущаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ПараметрыСеанса.МиграцияДанныхРазрешеноПрерываниеПроцессов = Истина;
		
			БизнесПроцесс = Выборка.БизнесПроцесс;
			
			БизнесПроцессыИЗадачиВызовСервера.ПрерватьБизнесПроцесс(
				БизнесПроцесс, НСтр("ru = 'Прерывание процессов загруженных из ДО 2.1 при выключении загрузки.'"));
				
			ПротоколированиеРаботыСотрудников.ЗаписатьПрерываниеБизнесПроцесса(БизнесПроцесс);	
				
			ПараметрыСеанса.МиграцияДанныхРазрешеноПрерываниеПроцессов = Ложь;	
			
		Исключение
			
			ПараметрыСеанса.МиграцияДанныхРазрешеноПрерываниеПроцессов = Ложь;
			ЕстьОшибки = Истина;
				
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;		
		
	КонецЦикла;
	
	// тут возьмем и подчиненные процессы тоже (ВедущаяЗадача непусто), если первый запрос их не обработал. (нет служебных задач КП).
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.Выполнена = ЛОЖЬ
	               |	И ЗадачаИсполнителя.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ДО21)
	               |	И ЗадачаИсполнителя.БизнесПроцесс.Завершен = ЛОЖЬ
	               |	И ЗадачаИсполнителя.БизнесПроцесс.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
	               |	И ЗадачаИсполнителя.БизнесПроцесс.Стартован = ИСТИНА
	               |	И ЗадачаИсполнителя.БизнесПроцесс.ВедущаяЗадача <> ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ПараметрыСеанса.МиграцияДанныхРазрешеноПрерываниеПроцессов = Истина;
		
			БизнесПроцесс = Выборка.БизнесПроцесс;
			
			БизнесПроцессыИЗадачиВызовСервера.ПрерватьБизнесПроцесс(
				БизнесПроцесс, НСтр("ru = 'Прерывание процессов загруженных из ДО 2.1 при выключении загрузки.'"));
				
			ПротоколированиеРаботыСотрудников.ЗаписатьПрерываниеБизнесПроцесса(БизнесПроцесс);	
				
			ПараметрыСеанса.МиграцияДанныхРазрешеноПрерываниеПроцессов = Ложь;	
			
		Исключение
			
			ПараметрыСеанса.МиграцияДанныхРазрешеноПрерываниеПроцессов = Ложь;
			ЕстьОшибки = Истина;
				
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;		
		
	КонецЦикла;
	
	ПараметрыСеанса.МиграцияДанныхРазрешеноПрерываниеПроцессов = Ложь;
	Если ЕстьОшибки Тогда
		ВызватьИсключение НСтр("ru = 'Часть процессов не удалось прервать. Подробнее смотрите ошибки в журнале регистрации.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	ТекстВопроса = НСтр("ru = 'Вы уверены что хотите завершить загрузку данных из Документооборот 2.1?'");
	
	ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения(
		"ЗавершитьПродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ЗавершитьНаСервере();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьНаСервере()
	
	Если ЭтаФорма.Модифицированность Тогда
		
		Каталог = СокрЛП(Каталог);
		Если Найти("\/", Прав(Каталог, 1)) Тогда
			Каталог = Лев(Каталог, СтрДлина(Каталог) - 1);
		КонецЕсли;
		
		Константы.ПереходКаталог.Установить(Каталог);	
		
		Константы.ЧислоПотоковЗагрузкиИз21.Установить(ЧислоПотоковЗагрузкиИз21);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	
	//!!!
	МиграцияДанныхИзВнешнихСистемСервер.Загрузка();
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	ЗагрузитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВключитьРегЗаданияНаСервере(Использование)
	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗаданий(Использование);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРегЗадания(Команда)
	ВключитьРегЗаданияНаСервере(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьРегЗадания(Команда)
	ВключитьРегЗаданияНаСервере(Ложь);
КонецПроцедуры

&НаСервере
Процедура ЖурналОчиститьНаСервере()
	
	РегистрыСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания.СоздатьНаборЗаписей().Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОшибкиПриИзменении(Элемент)
	ТолькоОшибкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТолькоОшибкиПриИзмененииНаСервере()
	
	Если ТолькоОшибки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Журнал, "Ошибка", Истина,
			ВидСравненияКомпоновкиДанных.Равно, , Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Журнал, "Ошибка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналОчистить(Команда)
	ЖурналОчиститьНаСервере();
	Элементы.Журнал.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура КаталогПриИзменении(Элемент)
	ЗаписатьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//!!!
	//ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение);
	
	Проводник = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Проводник.Каталог = Каталог;
	Проводник.Показать(Новый ОписаниеОповещения("КаталогОкончаниеВыбора", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		Каталог = ВыбранныеФайлы[0];
		Модифицированность = Истина;  
		ЗаписатьНаСервере();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокОстановить()

	Если Константы.ПереходСтадия.Получить() = 2 Тогда
		Элементы.Остановить.Заголовок = НСтр("ru = 'Продолжить'");
	Иначе
		Элементы.Остановить.Заголовок = НСтр("ru = 'Остановить'");
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Результат = ОпределитьСостояние();
	Прогресс = Результат.Прогресс;
	ОписаниеПрогресса = Результат.ОписаниеПрогресса;
	
	ОбновитьТекСостояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧислоПотоковЗагрузкиИз21ПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЖурналВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Журнал.ТекущиеДанные <> Неопределено Тогда
		
		Если Элементы.Журнал.ТекущиеДанные.Ошибка Тогда      
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Ошибка миграции из 2.1 в 3.0'"));
			ПараметрыФормы.Вставить("ТекстСообщения", Элементы.Журнал.ТекущиеДанные.Описание);
			ОткрытьФорму("ОбщаяФорма.Сообщение", ПараметрыФормы, ЭтаФорма);
			
		КонецЕсли;		
			
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти