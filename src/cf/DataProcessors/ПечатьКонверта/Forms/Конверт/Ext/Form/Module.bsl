#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("ПараметрКоманды") Тогда
		ФорматыПочтовыхКонвертов = Новый Структура();
		Возврат;
	КонецЕсли;	
	
	СписокДокументов = Параметры.ПараметрКоманды;
	ЗаполнитьТаблицуДокументов(СписокДокументов);
	УстановитьКлючНазначенияИВидимостьЭлементов();
	ЗаполнитьФорматыПочтовыхКонвертов();
	ДобавитьКартинкиЦифрИндекса();
	
	ФорматКонверта = Перечисления.ФорматыКонвертов.С4;
	ЗаполнитьВидАдресаКонтрагента(СписокДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗакрытьФормуИПоказатьПредупреждениеЕслиНетДокументов();
	ФорматКонвертаПриИзменении();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонвертС4Нажатие(Элемент)
	
	ФорматКонверта = ПредопределенноеЗначение("Перечисление.ФорматыКонвертов.С4");
	ФорматКонвертаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертС5Нажатие(Элемент)
	
	ФорматКонверта = ПредопределенноеЗначение("Перечисление.ФорматыКонвертов.С5");
	ФорматКонвертаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертЕ65Нажатие(Элемент)
	
	ФорматКонверта = ПредопределенноеЗначение("Перечисление.ФорматыКонвертов.E65");
	ФорматКонвертаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматКонвертаПриИзменении()
	
	Для Каждого Формат Из ФорматыПочтовыхКонвертов Цикл
		
		ЭтоВыбранныйФормат = Формат.Значение = ФорматКонверта;
		Элементы["Конверт" + Формат.Значение].Видимость = Не ЭтоВыбранныйФормат;
		Элементы["Конверт" + Формат.Значение + "Выбран"].Видимость = ЭтоВыбранныйФормат;
		
	КонецЦикла;
	
	Элементы.ПечатьНаОдномЛисте.Видимость = 
		ТаблицаДокументов.Количество() > 1 И 
		ФорматКонверта <> ПредопределенноеЗначение("Перечисление.ФорматыКонвертов.С4");
		
	Элементы.ПечатьПоДлине.Видимость = 
		ФорматКонверта <> ПредопределенноеЗначение("Перечисление.ФорматыКонвертов.С4");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДокументов

&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Документ); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Для Каждого Строка Из ТаблицаДокументов Цикл
		
		Строка.Печатать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделение(Команда)
	
	Для Каждого Строка Из ТаблицаДокументов Цикл
		
		Строка.Печатать = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКонверта(Команда)
	
	ОчиститьСообщения();
	
	МассивДокументов = ДокументыДляПечати();
	
	Если МассивДокументов.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Выберите документы для печати.'"),, "Список");
			
		Возврат;
		
	КонецЕсли;
	
	Результат = СформироватьПечатнуюФорму(МассивДокументов); 
	СписокАдресатовСНедостающейКИ = Результат.СписокАдресатовСНедостающейКИ;
	
	Если СписокАдресатовСНедостающейКИ.Количество() = 0 Тогда
		
		ПоказатьПечатнуюФорму(Результат.ПечатнаяФорма, МассивДокументов);
		Закрыть();
		
	Иначе
		
		ОбработатьАдресатовСНедостающейКИ(СписокАдресатовСНедостающейКИ, Результат.ПечатнаяФорма, МассивДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьАдресатовСНедостающейКИ(СписокАдресатовСНедостающейКИ, ПечатнаяФорма, МассивДокументов)

	Для Каждого Адресат Из СписокАдресатовСНедостающейКИ Цикл
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстОшибки(Адресат), 
			Адресат.ОрганизацияИлиПолучатель);
			
	КонецЦикла;
	
	РежимДиалога = РежимДиалогаВопрос.ДаНет;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьКонвертаПослеВопроса", 
		ЭтотОбъект, 
		Новый Структура("ПечатнаяФорма, МассивДокументов", ПечатнаяФорма, МассивДокументов));
		
	Если СписокАдресатовСНедостающейКИ.Количество() = 1 Тогда
		ТекстОшибки = ТекстОшибки(СписокАдресатовСНедостающейКИ[0]) 
			+ Символы.ПС + НСтр("ru = 'Продолжить печать?'");
		
	Иначе
		ТекстОшибки = НСтр("ru = 'У некоторых организаций не указана контактная информация. 
			| Продолжить печать?'");
		
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстОшибки,  РежимДиалога, 0);	

КонецПроцедуры

&НаКлиенте
Процедура ПечатьКонвертаПослеВопроса(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПечатнуюФорму(Параметры.ПечатнаяФорма, Параметры.МассивДокументов);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПечатнуюФорму(ПечатнаяФорма, МассивДокументов)
	
	ИмяМакета = "ПФ_MXL_Конверт" + ФорматКонверта;
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИмяМакета); 
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ПечатнаяФорма;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗаголовокФормы", НСтр("ru = 'Печать конверта'"));
	
	УправлениеПечатьюКлиент.ПечатьДокументов(
		КоллекцияПечатныхФорм, МассивДокументов, ДополнительныеПараметры);
	
КонецПроцедуры 

&НаСервере
Функция СформироватьПечатнуюФорму(МассивДокументов);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ИмяМакета = "ПФ_MXL_Конверт" + ФорматКонверта;
	МакетКонверта = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКонверта." + ИмяМакета);
	Если ФорматКонверта = ПредопределенноеЗначение("Перечисление.ФорматыКонвертов.С4") 
		Или ПечатьПоДлине Тогда
		ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	
	ОбластьОтправитель = МакетКонверта.ПолучитьОбласть("Отправитель");
	ОбластьПолучатель = МакетКонверта.ПолучитьОбласть("Получатель");
	ОбластьМарка = МакетКонверта.ПолучитьОбласть("Марка");
	ОбластьКодовыйШтамп = МакетКонверта.ПолучитьОбласть("КодовыйШтамп");
	ОбластьОтступ = Неопределено;
	ОбластьЛинияОтрыва = Неопределено;
	
	ПараметрыПечати = Новый Структура;
	Если ФорматКонверта = Перечисления.ФорматыКонвертов.С4 Тогда
		ПараметрыПечати.Вставить("ДлинаПервойСтроки", 45);
		ПараметрыПечати.Вставить("ДлинаВторойСтроки", 54);
		ОбластьОтступ = МакетКонверта.ПолучитьОбласть("Отступ");
		
	ИначеЕсли ФорматКонверта = Перечисления.ФорматыКонвертов.С5 Тогда
		ПараметрыПечати.Вставить("ДлинаПервойСтроки",31);
		ПараметрыПечати.Вставить("ДлинаВторойСтроки", 35);
		ОбластьОтступ = МакетКонверта.ПолучитьОбласть("Отступ");
		ОбластьЛинияОтрыва = МакетКонверта.ПолучитьОбласть("ЛинияОтрыва");
		
	Иначе
		ПараметрыПечати.Вставить("ДлинаПервойСтроки",45);
		ПараметрыПечати.Вставить("ДлинаВторойСтроки", 54);
		ОбластьЛинияОтрыва = МакетКонверта.ПолучитьОбласть("ЛинияОтрыва");
	КонецЕсли;
	
	КонтактнаяИнформацияДокументов = ПолучитьКонтактнуюИнформацию(МассивДокументов);
	КоличествоКонвертовНаСтранице = 0;
	Для Каждого Контакт Из КонтактнаяИнформацияДокументов.КонтактнаяИнформация Цикл
		
		ЗаполнитьДанныеОтправителя(
			Контакт.ДанныеОтправителя, ПараметрыПечати, ОбластьОтправитель);
		
		ДанныеПолучателей = Контакт.ДанныеПолучателей;
		Для Каждого ДанныеПолучателя Из ДанныеПолучателей Цикл
			
			КоличествоКонвертовНаСтранице = КоличествоКонвертовНаСтранице + 1;
			ПечатнаяФорма.Вывести(ОбластьОтправитель);
			ПечатнаяФорма.Присоединить(ОбластьМарка);
			
			Если ОбластьОтступ <> Неопределено Тогда
				ПечатнаяФорма.Вывести(ОбластьОтступ);
			КонецЕсли;
			
			ЗаполнитьДанныеПолучателяИВывестиОбласть(
				ДанныеПолучателя, 
				ПараметрыПечати, 
				ПечатнаяФорма, 
				ОбластьПолучатель, 
				ОбластьКодовыйШтамп, 
				ОбластьЛинияОтрыва);
			
			Если ПечатьНаОдномЛисте И ТаблицаДокументов.Количество() > 1
				И ФорматКонверта <> ПредопределенноеЗначение("Перечисление.ФорматыКонвертов.С4") Тогда
				ПечатнаяФорма.Вывести(ОбластьЛинияОтрыва);
			КонецЕсли;
			
			Если НуженРазрезСтраниц(КоличествоКонвертовНаСтранице) Тогда
			
				ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
				КоличествоКонвертовНаСтранице = 0;
				
			КонецЕсли;

		КонецЦикла;
			
	
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("ПечатнаяФорма", ПечатнаяФорма);
	Результат.Вставить("СписокАдресатовСНедостающейКИ", 
		КонтактнаяИнформацияДокументов.СписокАдресатовСНедостающейКИ);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСекциюКонверта(ИмяСекции, Данные, ПараметрыПечати, ПараметрыОбласти)
	
	Если ИмяСекции = "ОтКого" Тогда
		ВысотаСекции = 1;
		ДлинаПервойСтроки = ПараметрыПечати.ДлинаПервойСтроки - 3;
	Иначе
		Если ИмяСекции = "Кому" 
			Или (ИмяСекции = "Откуда" И  ФорматКонверта = Перечисления.ФорматыКонвертов.E65) Тогда 
			ВысотаСекции = 2;
		Иначе
			ВысотаСекции = 3;
		КонецЕсли;
		
		Если ИмяСекции = "Откуда" Тогда
			ДлинаПервойСтроки = ПараметрыПечати.ДлинаПервойСтроки - 8;
		Иначе 
			ДлинаПервойСтроки = ПараметрыПечати.ДлинаПервойСтроки;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоВыведенныхВСекциюЭлементов = 0;
	ВГраницаМассиваДанных = Данные.ВГраница();
	Для НомерСекции = 1 По ВысотаСекции Цикл
		
		ИмяПараметра = ИмяСекции + НомерСекции;
		Если НомерСекции = 1 Тогда
			ДлинаСекции = ДлинаПервойСтроки;
		Иначе
			ДлинаСекции = ПараметрыПечати.ДлинаВторойСтроки;
		КонецЕсли;
		
		ЭлементыПараметра = Новый Массив;
		Пока КоличествоВыведенныхВСекциюЭлементов <= ВГраницаМассиваДанных 
			И СтрДлина(Данные[КоличествоВыведенныхВСекциюЭлементов]) <= ДлинаСекции Цикл
			
			ЭлементыПараметра.Добавить(Данные[КоличествоВыведенныхВСекциюЭлементов]);
			ДлинаСекции = ДлинаСекции - СтрДлина(Данные[КоличествоВыведенныхВСекциюЭлементов]) - 1;
			КоличествоВыведенныхВСекциюЭлементов = КоличествоВыведенныхВСекциюЭлементов + 1;
			
		КонецЦикла;
		ФинализироватьСекцию(ИмяПараметра, ЭлементыПараметра, ПараметрыОбласти);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФинализироватьСекцию(ИмяПараметра, ЭлементыПараметра, ПараметрыОбласти)
	
	ДанныеСекции = СтрСоединить(ЭлементыПараметра, " ");
	ДанныеСекции = СтрЗаменить(ДанныеСекции, "  ", " ");
	
	ЗначениеПараметра = Новый Структура(ИмяПараметра, ДанныеСекции);
	ПараметрыОбласти.Заполнить(ЗначениеПараметра);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактнуюИнформацию(Документы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокАдресатовСНедостающейКИ = Новый Массив();
	КонтактнаяИнформация = Новый ТаблицаЗначений;
	КонтактнаяИнформация.Колонки.Добавить("Документ");
	КонтактнаяИнформация.Колонки.Добавить("ДанныеОтправителя");
	КонтактнаяИнформация.Колонки.Добавить("ДанныеПолучателей", Новый ОписаниеТипов("Массив"));
	АдресатыСНедостающейКИ = Новый Соответствие;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДокументОтправитель.Подписал <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				И ДокументОтправитель.Подписал <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА ДокументОтправитель.Подписал.Наименование
		|		ИНАЧЕ ДокументОтправитель.Подготовил.Наименование
		|	КОНЕЦ КАК Имя,
		|	ДокументОтправитель.Организация КАК ОрганизацияИлиПолучатель,
		|	ДокументОтправитель.Ссылка КАК Документ,
		|	ВЫБОР
		|		КОГДА ДокументОтправитель.ДатаРегистрации = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ДокументОтправитель.ДатаСоздания
		|		ИНАЧЕ ДокументОтправитель.ДатаРегистрации
		|	КОНЕЦ КАК ДатаДокумента
		|ПОМЕСТИТЬ ВТОтправитель
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументОтправитель
		|ГДЕ
		|	ДокументОтправитель.Ссылка В(&Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПолучателиДокумента.Адресат.Наименование КАК Имя,
		|	ПолучателиДокумента.Корреспондент КАК ОрганизацияИлиПолучатель,
		|	ПолучателиДокумента.Ссылка.Основание КАК Документ,
		|	ВЫБОР
		|		КОГДА ПолучателиДокумента.Ссылка.Основание.ДатаРегистрации = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ПолучателиДокумента.Ссылка.Основание.ДатаСоздания
		|		ИНАЧЕ ПолучателиДокумента.Ссылка.Основание.ДатаРегистрации
		|	КОНЕЦ КАК ДатаДокумента
		|	
		|ПОМЕСТИТЬ ВТПолучатели
		|ИЗ
		|	Документ.Корреспонденция.Корреспонденты КАК ПолучателиДокумента
		|ГДЕ
		|	ПолучателиДокумента.Ссылка.Основание В(&Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОрганизацияКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ОрганизацияКонтактнаяИнформация.Представление КАК Представление,
		|	ВТОтправитель.Имя КАК Имя,
		|	ВТОтправитель.ОрганизацияИлиПолучатель КАК ОрганизацияИлиПолучатель,
		|	ВТОтправитель.ДатаДокумента КАК ДатаДокумента,
		|	ВТОтправитель.Документ КАК Документ,
		|	ЛОЖЬ КАК ЭтоФизЛицо
		|ИЗ
		|	ВТОтправитель КАК ВТОтправитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацияКонтактнаяИнформация
		|		ПО ВТОтправитель.ОрганизацияИлиПолучатель = ОрганизацияКонтактнаяИнформация.Ссылка
		|			И (ОрганизацияКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВТПолучатели.ОрганизацияИлиПолучатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ФизическиеЛицаКонтактнаяИнформация.ЗначенияПолей
		|		ИНАЧЕ КонтрагентыКонтактнаяИнформация.ЗначенияПолей
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТПолучатели.ОрганизацияИлиПолучатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ФизическиеЛицаКонтактнаяИнформация.Представление
		|		ИНАЧЕ КонтрагентыКонтактнаяИнформация.Представление
		|	КОНЕЦ,
		|	ВТПолучатели.Имя,
		|	ВТПолучатели.ОрганизацияИлиПолучатель,
		|	ВТПолучатели.ДатаДокумента КАК ДатаДокумента,
		|	ВТПолучатели.Документ,
		|	ВЫБОР
		|		КОГДА ВТПолучатели.ОрганизацияИлиПолучатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	ВТПолучатели КАК ВТПолучатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|		ПО ВТПолучатели.ОрганизацияИлиПолучатель = КонтрагентыКонтактнаяИнформация.Ссылка
		|			И (КонтрагентыКонтактнаяИнформация.Вид = &ВидКИКонтрагента)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|		ПО ВТПолучатели.ОрганизацияИлиПолучатель.ФизЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
		|			И (ФизическиеЛицаКонтактнаяИнформация.Вид = &ВидКИФизЛица)";
	
	Запрос.УстановитьПараметр("Документы", Документы);
	Запрос.УстановитьПараметр("ВидКИКонтрагента", ВидАдресаКонтрагента);
	Если ПоискТолькоПоФизЛицу Тогда
		Запрос.УстановитьПараметр("ВидКИФизЛица", ВидАдресаКонтрагента);
	Иначе
		Запрос.УстановитьПараметр("ВидКИФизЛица", Справочники.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		КИДокумента = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Документ", Результат.Документ));
		Если КИДокумента.Количество() = 0 Тогда 
			НоваяСтрока = КонтактнаяИнформация.Добавить();
			НоваяСтрока.Документ = Результат.Документ;
		Иначе 
			НоваяСтрока = КИДокумента[0];
		КонецЕсли;
		
		ОрганизацияИлиПолучатель = Результат.ОрганизацияИлиПолучатель;
		ЗначенияПолей = Результат.ЗначенияПолей;
		Если ЗначениеЗаполнено(ЗначенияПолей) Тогда 
			ЗначенияПолей = РаботаСАдресами.СведенияОбАдресе(ЗначенияПолей);
		КонецЕсли;
		
		Адресат = ПолучитьИндексИАдрес(ЗначенияПолей, Результат.Представление);
		Адресат.Вставить("НаименованиеОрганизации", 
			Юрлица.ПредставлениеЮрлицаНаДату(ОрганизацияИлиПолучатель, Результат.ДатаДокумента, Истина));
		Адресат.Вставить("Имя", Результат.Имя);
		
		Если ТипЗнч(ОрганизацияИлиПолучатель) = Тип("СправочникСсылка.Организации") Тогда
			НоваяСтрока.ДанныеОтправителя = Адресат;
		Иначе
			НоваяСтрока.ДанныеПолучателей.Добавить(Адресат);
		КонецЕсли;
		
		Если (Адресат.Индекс = "" Или Адресат.Адрес.Количество() = 0)
			И АдресатыСНедостающейКИ.Получить(ОрганизацияИлиПолучатель) = Неопределено Тогда
			
			НовыйАдресатСНедостающейКИ = АдресатСНедостающейКИ(ОрганизацияИлиПолучатель, Результат.ЭтоФизЛицо);
			Если Адресат.Индекс = "" Тогда
				НовыйАдресатСНедостающейКИ.ИндексУказан = Ложь;
			КонецЕсли;
			Если Адресат.Адрес.Количество() = 0 Тогда
				НовыйАдресатСНедостающейКИ.АдресУказан = Ложь;
			КонецЕсли;
			
			АдресатыСНедостающейКИ.Вставить(ОрганизацияИлиПолучатель, Истина);
			СписокАдресатовСНедостающейКИ.Добавить(НовыйАдресатСНедостающейКИ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("КонтактнаяИнформация, СписокАдресатовСНедостающейКИ",
		КонтактнаяИнформация, СписокАдресатовСНедостающейКИ);
	
КонецФункции

&НаСервере
Функция ПолучитьИндексИАдрес(ЗначенияПолей, АдресСтрокой)
	
	Индекс = ""; Адрес = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ЗначенияПолей) Тогда 
		Возврат Новый Структура("Индекс, Адрес", Индекс, Адрес);
	КонецЕсли;
	
	Если ЗначенияПолей.Свойство("Индекс") И ЗначениеЗаполнено(ЗначенияПолей.Индекс) Тогда
		Индекс = ЗначенияПолей.Индекс;
	КонецЕсли;
	
	Если ТипЗнч(ЗначенияПолей) = Тип("Структура")
		И ЗначенияПолей.Свойство("Регион")
		И НЕ ПустаяСтрока(ЗначенияПолей.Регион) Тогда
		
		ПредставлениеАдреса = ПредставлениеПочтовогоАдреса(ЗначенияПолей);
		
	// Если по структуре не удалось, то попробуем сформировать по представлению.
	ИначеЕсли ЗначениеЗаполнено(АдресСтрокой) Тогда 
		ПредставлениеАдреса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(АдресСтрокой, " ");
		
		// Удалим индекс, если он был в представлении, чтобы не выводить его два раза.
		УдалитьИндекс(ПредставлениеАдреса, Индекс);
		УдалитьИндекс(ПредставлениеАдреса, Индекс + ",");
		УдалитьИндекс(ПредставлениеАдреса, Индекс + ".");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса) Тогда 
		Адрес = ПредставлениеАдреса;
	КонецЕсли;
	
	Возврат Новый Структура("Индекс, Адрес", Индекс, Адрес);
	
КонецФункции

&НаСервере
Функция ПредставлениеПочтовогоАдреса(Адрес)
	
	Результат = Новый Массив;
	ВыводитьСокращениеРегиона = Истина;
	
	Если Адрес.Свойство("Улица") И ЗначениеЗаполнено(Адрес.Улица)
		И Адрес.Свойство("УлицаСокращение") И ЗначениеЗаполнено(Адрес.УлицаСокращение) Тогда
		Если Адрес.УлицаСокращение = "ул" Тогда
			ПредставлениеУлицы = Адрес.УлицаСокращение + ". " + Адрес.Улица + ", ";
		Иначе
			ПредставлениеУлицы = Адрес.Улица + " " + Адрес.УлицаСокращение + "., ";
		КонецЕсли;
		
		Результат.Добавить(ПредставлениеУлицы);
	КонецЕсли;
	
	Если Адрес.Свойство("ДополнительнаяТерритория") И ЗначениеЗаполнено(Адрес.ДополнительнаяТерритория)
		И Адрес.Свойство("ДополнительнаяТерриторияСокращение") И ЗначениеЗаполнено(Адрес.ДополнительнаяТерриторияСокращение) Тогда
		ПредставлениеДопТерритории = Адрес.ДополнительнаяТерриторияСокращение + ". " + Адрес.ДополнительнаяТерритория + ", ";
		Результат.Добавить(ПредставлениеДопТерритории);
	КонецЕсли;
	
	Если Адрес.Свойство("Здание") И ЗначениеЗаполнено(Адрес.Здание) Тогда
		ПредставлениеЗдания = НРег(Адрес.Здание.ТипЗдания) + " " + Адрес.Здание.Номер + ", ";
		Результат.Добавить(ПредставлениеЗдания);
	КонецЕсли;
	
	Если Адрес.Свойство("Корпуса") И ЗначениеЗаполнено(Адрес.Корпуса) Тогда
		ПредставлениеКорпуса = "";
		Для Каждого Корпус Из Адрес.Корпуса Цикл
			ПредставлениеКорпуса = ПредставлениеКорпуса + НРег(Корпус.ТипКорпуса) + " " + Корпус.Номер + ", ";
		КонецЦикла;
		Результат.Добавить(ПредставлениеКорпуса);
	КонецЕсли;
	
	Если Адрес.Свойство("Помещения") И ЗначениеЗаполнено(Адрес.Помещения) Тогда
		ПредставлениеПомещения = "";
		Для Каждого Помещение Из Адрес.Помещения Цикл
			ПредставлениеПомещения = ПредставлениеПомещения + НРег(Помещение.ТипПомещения) + " " + Помещение.Номер + ", ";
		КонецЦикла;
		Результат.Добавить(ПредставлениеПомещения);
	КонецЕсли;
	
	Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город)
		И Адрес.Свойство("ГородСокращение") И ЗначениеЗаполнено(Адрес.ГородСокращение) Тогда
		ПредставлениеГорода = НРег(Адрес.ГородСокращение) + ". " + Адрес.Город + ", ";
		Результат.Добавить(ПредставлениеГорода);
		ВыводитьСокращениеРегиона = Ложь;
	КонецЕсли;
	
	Если Адрес.Свойство("ВнутригородскойРайон") И ЗначениеЗаполнено(Адрес.ВнутригородскойРайон)
		И Адрес.Свойство("ВнутригородскойРайонСокращение") И ЗначениеЗаполнено(Адрес.ВнутригородскойРайонСокращение) Тогда
		ПредставлениеВнутригородскогоРайона = НРег(Адрес.ВнутригородскойРайонСокращение) + ". " + Адрес.ВнутригородскойРайон + ", ";
		Результат.Добавить(ПредставлениеВнутригородскогоРайона);
	КонецЕсли;
	
	Если Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт)
		И Адрес.Свойство("НаселенныйПунктСокращение") И ЗначениеЗаполнено(Адрес.НаселенныйПунктСокращение) Тогда
		ПредставлениеНаселенногоПункта = НРег(Адрес.НаселенныйПунктСокращение) + ". " + Адрес.НаселенныйПункт + ", ";
		Результат.Добавить(ПредставлениеНаселенногоПункта);
		ВыводитьСокращениеРегиона = Ложь;
	КонецЕсли;
	
	Если Адрес.Свойство("Район") И ЗначениеЗаполнено(Адрес.Район)
		И Адрес.Свойство("РайонСокращение") И ЗначениеЗаполнено(Адрес.РайонСокращение) Тогда
		ПредставлениеРайона = Адрес.Район + " " + НРег(Адрес.РайонСокращение) + "., ";
		Результат.Добавить(ПредставлениеРайона);
	КонецЕсли;
	
	Если Адрес.Свойство("Округ") И ЗначениеЗаполнено(Адрес.Округ)
		И Адрес.Свойство("ОкругСокращение") И ЗначениеЗаполнено(Адрес.ОкругСокращение) Тогда
		ПредставлениеОкруга = Адрес.Округ + " " + НРег(Адрес.ОкругСокращение) + "., ";
		Результат.Добавить(ПредставлениеОкруга);
	КонецЕсли;
	
	Если Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион)
		И Адрес.Свойство("РегионСокращение") И ЗначениеЗаполнено(Адрес.РегионСокращение) Тогда
		
		Если Адрес.КодРегиона = "77"           // Москва
			Или Адрес.КодРегиона = "78"        // Санкт-Петербург
			Или Адрес.КодРегиона = "92"        // Севастополь
			Или Адрес.КодРегиона = "99" Тогда  // Байконур
			
			// У города федерального значения префикс "г. " не пишется если речь идет о нас.пункте в составе города федерального значения.
			ПредставлениеРегиона = ?(ВыводитьСокращениеРегиона, "г. ", "") + Адрес.Регион + ", ";
			
		Иначе
			ПредставлениеРегиона = Адрес.Регион + " " + НРег(Адрес.РегионСокращение) + "., ";
			
		КонецЕсли;
		
		Результат.Добавить(ПредставлениеРегиона);
		
	КонецЕсли;
	
	Если Адрес.Свойство("Страна") И ЗначениеЗаполнено(Адрес.Страна) Тогда
		Результат.Добавить(ТРег(Адрес.Страна));
	КонецЕсли;
	
	ИтоговыйРезультат = Новый Массив;
	
	Для Каждого Элемент Из Результат Цикл 
		МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Элемент, " ");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИтоговыйРезультат, МассивСлов);
	КонецЦикла;
	
	Возврат ИтоговыйРезультат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИндекс(ОбластьКШ, Индекс)
	
	Для Ит = 1 По 6 Цикл 
		Если Индекс = "" Тогда
			КартинкаИндекса = БиблиотекаКартинок.ПочтовыйИндекс_Пустой;
		Иначе 
			КартинкаИндекса = КартинкиЦифрИндекса[Число(Сред(Индекс, Ит, 1))].Значение;
		КонецЕсли;
		
		ОбластьКШ.Параметры["Индекс" + СокрЛП(Ит)] = КартинкаИндекса;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция НуженРазрезСтраниц(КоличествоКонвертовНаСтранице)
	
	Возврат ТаблицаДокументов.Количество() = 1
		Или Не ПечатьНаОдномЛисте 
		Или ФорматКонверта = ПредопределенноеЗначение("Перечисление.ФорматыКонвертов.С4")
		Или (ФорматКонверта = ПредопределенноеЗначение("Перечисление.ФорматыКонвертов.С5") 
			И КоличествоКонвертовНаСтранице = 2)
		Или (ФорматКонверта = ПредопределенноеЗначение("Перечисление.ФорматыКонвертов.E65") 
			И КоличествоКонвертовНаСтранице = 3);
	
КонецФункции 

&НаКлиенте
Функция ТекстОшибки(ЭлементОрганизация)
	
	Если ТипЗнч(ЭлементОрганизация.ОрганизацияИлиПолучатель) = Тип("СправочникСсылка.Организации") Тогда 
		Адрес = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации");
	ИначеЕсли ЭлементОрганизация.ЭтоФизЛицо = Истина Тогда 
		Адрес = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица");
	Иначе 
		Адрес = ВидАдресаКонтрагента;
	КонецЕсли;
	
	ТекстОшибки = ""; 
	// Уберем кавычки, если они уже есть в наименовании.
	НаименованиеОрганизации = СокрЛП(ЭлементОрганизация.ОрганизацияИлиПолучатель);
	Если Прав(НаименованиеОрганизации, 1) = Символ(34) Тогда 
		НаименованиеОрганизации = Лев(НаименованиеОрганизации, СтрДлина(НаименованиеОрганизации) -1); 
	КонецЕсли;
	Если Лев(НаименованиеОрганизации, 1) = Символ(34) Тогда 
		НаименованиеОрганизации = Прав(НаименованиеОрганизации, СтрДлина(НаименованиеОрганизации) -1); 
	КонецЕсли;
	
	Если Не ЭлементОрганизация.ИндексУказан И Не ЭлементОрганизация.АдресУказан Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'У ""%1"" не заполнены ""Индекс"" и ""%2"".'"),
			НаименованиеОрганизации,
			Адрес);
		
	ИначеЕсли Не ЭлементОрганизация.ИндексУказан Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'У ""%1"" не заполнен ""Индекс"".'"),
			НаименованиеОрганизации);
	
	ИначеЕсли Не ЭлементОрганизация.АдресУказан Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'У ""%1"" не заполнен ""%2"".'"),
			НаименованиеОрганизации, Адрес);
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаСервере
Функция АдресатСНедостающейКИ(ОрганизацияИлиПолучатель, ЭтоФизЛицо)
	
	АдресатСНедостающейКИ = Новый Структура;
	АдресатСНедостающейКИ.Вставить("ИндексУказан", Истина);
	АдресатСНедостающейКИ.Вставить("АдресУказан", Истина);
	АдресатСНедостающейКИ.Вставить("ОрганизацияИлиПолучатель", ОрганизацияИлиПолучатель);
	АдресатСНедостающейКИ.Вставить("ЭтоФизЛицо", ЭтоФизЛицо);
	
	Возврат АдресатСНедостающейКИ;
	
КонецФункции

&НаСервере
Процедура УдалитьИндекс(МассивАдреса, Значение)
	
	// Удалим индекс, если он был в представлении, чтобы не выводить его два раза.
	Если ЗначениеЗаполнено(Значение) Тогда 
		НомерВМассиве = МассивАдреса.Найти(Значение);
		
		Если НомерВМассиве <> Неопределено Тогда 
			МассивАдреса.Удалить(НомерВМассиве);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДокументов(СписокДокументов)

	ДокументыИсходящаяКорреспонденция = ДокументыИсходящаяКорреспонденция(СписокДокументов);
		
	Для Каждого ДокументКорреспонденции Из ДокументыИсходящаяКорреспонденция Цикл
	
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.Документ = ДокументКорреспонденции;
		НоваяСтрока.Печатать = Истина;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючНазначенияИВидимостьЭлементов()

	Если ТаблицаДокументов.Количество() = 1 Тогда
		КлючНазначенияИспользования = "ОдинДокумент";
		Документ = ТаблицаДокументов[0].Документ;
		Элементы.Документ.Видимость = Истина;
		Элементы.ГруппаСписокИВарианты.Видимость = Ложь;
		
	Иначе
		
		КлючНазначенияИспользования = "МногоДокументов";
		Элементы.Документ.Видимость = Ложь;
		Заголовок = НСтр("ru = 'Печать конвертов'");
		АвтоЗаголовок = Ложь;
		
	КонецЕсли;

	СтандартныеПодсистемыСервер.УстановитьКлючНазначенияФормы(ЭтаФорма, КлючНазначенияИспользования);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФорматыПочтовыхКонвертов()

	ФорматыПочтовыхКонвертов = Новый Структура();
	ФорматыПочтовыхКонвертов.Вставить("С4", Перечисления.ФорматыКонвертов.С4);
	ФорматыПочтовыхКонвертов.Вставить("С5", Перечисления.ФорматыКонвертов.С5);
	ФорматыПочтовыхКонвертов.Вставить("E65", Перечисления.ФорматыКонвертов.E65);

КонецПроцедуры

&НаСервере
Процедура ДобавитьКартинкиЦифрИндекса()

	КартинкиЦифрИндекса.Добавить(БиблиотекаКартинок.ПочтовыйИндекс_0);
	КартинкиЦифрИндекса.Добавить(БиблиотекаКартинок.ПочтовыйИндекс_1);
	КартинкиЦифрИндекса.Добавить(БиблиотекаКартинок.ПочтовыйИндекс_2);
	КартинкиЦифрИндекса.Добавить(БиблиотекаКартинок.ПочтовыйИндекс_3);
	КартинкиЦифрИндекса.Добавить(БиблиотекаКартинок.ПочтовыйИндекс_4);
	КартинкиЦифрИндекса.Добавить(БиблиотекаКартинок.ПочтовыйИндекс_5);
	КартинкиЦифрИндекса.Добавить(БиблиотекаКартинок.ПочтовыйИндекс_6);
	КартинкиЦифрИндекса.Добавить(БиблиотекаКартинок.ПочтовыйИндекс_7);
	КартинкиЦифрИндекса.Добавить(БиблиотекаКартинок.ПочтовыйИндекс_8);
	КартинкиЦифрИндекса.Добавить(БиблиотекаКартинок.ПочтовыйИндекс_9);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументыИсходящаяКорреспонденция(СписокДокументов)

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.ВидДокумента.ЯвляетсяИсходящейКорреспонденцией
		|	И ДокументыПредприятия.Ссылка В(&Документы)";
	Запрос.УстановитьПараметр("Документы", СписокДокументов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

&НаКлиенте
Процедура ЗакрытьФормуИПоказатьПредупреждениеЕслиНетДокументов()

	Если ТаблицаДокументов.Количество() = 0 Тогда
	
		ТекстОшибки = НСтр(
			"ru = 'Не выбрано ни одного документа,
			|являющегося исходящей корреспонденцией'");
		Закрыть();
		ПоказатьПредупреждение(, ТекстОшибки);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ДокументыДляПечати()

	МассивДокументов = Новый Массив();
	
	Для Каждого Строка Из ТаблицаДокументов Цикл
	
		Если Строка.Печатать Тогда
			
			МассивДокументов.Добавить(Строка.Документ);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат МассивДокументов;

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеОтправителя(ДанныеОтправителя, ПараметрыПечати, ОбластьОтправитель)

	Если ЗначениеЗаполнено(ДанныеОтправителя) Тогда
		Если ЗначениеЗаполнено(ДанныеОтправителя.Имя) Тогда
			МассивСтрок = Новый Массив();
			МассивСтрок.Добавить(ДанныеОтправителя.НаименованиеОрганизации);
			МассивСтрок.Добавить(ДанныеОтправителя.Имя);
			Отправитель = СтрСоединить(МассивСтрок, ", ");
		Иначе
			Отправитель = ДанныеОтправителя.НаименованиеОрганизации;
		КонецЕсли;
		
		ПредставлениеОтправителя = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(
			Отправитель, " ");
		ЗаполнитьСекциюКонверта("ОтКого", ПредставлениеОтправителя, ПараметрыПечати, ОбластьОтправитель.Параметры);
		ЗаполнитьСекциюКонверта("Откуда", ДанныеОтправителя.Адрес, ПараметрыПечати, ОбластьОтправитель.Параметры);
		ОбластьОтправитель.Параметры.Индекс = ДанныеОтправителя.Индекс;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПолучателяИВывестиОбласть(
		ДанныеПолучателя, ПараметрыПечати, ПечатнаяФорма, ОбластьПолучатель, ОбластьКодовыйШтамп, ОбластьЛинияОтрыва)

	Если ЗначениеЗаполнено(ДанныеПолучателя.Имя) Тогда
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(ДанныеПолучателя.НаименованиеОрганизации);
		МассивСтрок.Добавить(ДанныеПолучателя.Имя);
		Получатель = СтрСоединить(МассивСтрок, ", ");
	Иначе 
		Получатель = ДанныеПолучателя.НаименованиеОрганизации;
	КонецЕсли;
		
	ПредставлениеПолучатель = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(
		Получатель, " ");
	ЗаполнитьСекциюКонверта("Кому", ПредставлениеПолучатель, ПараметрыПечати, ОбластьПолучатель.Параметры);
	ЗаполнитьСекциюКонверта("Куда", ДанныеПолучателя.Адрес, ПараметрыПечати, ОбластьПолучатель.Параметры);
	
	ОбластьПолучатель.Параметры.Индекс = ДанныеПолучателя.Индекс;
	
	ЗаполнитьИндекс(ОбластьКодовыйШтамп, ДанныеПолучателя.Индекс);
	
	ПечатнаяФорма.Вывести(ОбластьКодовыйШтамп);
	ПечатнаяФорма.Присоединить(ОбластьПолучатель);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидАдресаКонтрагента(СписокДокументов)
	
	УстановитьПривилегированныйРежим(Истина);
	ПолучателиПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		СписокДокументов, "Контрагенты");
	УникальныеПолучатели = Новый Массив;
	Для Каждого Получатель Из ПолучателиПисьма Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УникальныеПолучатели, 
			Получатель.Значение.Выгрузить().ВыгрузитьКолонку("Контрагент"),
			Истина);
	КонецЦикла;
	
	ЕстьФизЛица = Ложь; ЕстьЮрлица = Ложь; ВсеФизЛица = Новый Массив;
	ЮрФизЛицоПолучателей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(УникальныеПолучатели, "ЮрФизЛицо, ФизЛицо");
	Для Каждого Получатель Из ЮрФизЛицоПолучателей Цикл
		Если Получатель.Значение.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ЕстьФизЛица = Истина;
			ВсеФизЛица.Добавить(Получатель.Значение.ФизЛицо);
		Иначе
			ЕстьЮрлица = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьФизЛица И Не ЕстьЮрлица Тогда
		ВидыКИ = УправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацииОбъекта(
			Справочники.ФизическиеЛица.ПустаяСсылка(), Перечисления.ТипыКонтактнойИнформации.Адрес);
		ВидАдресаКонтрагента = Справочники.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица;
		ПоискТолькоПоФизЛицу = Истина;
		КлючНазначенияИспользования = "ЭтоФизЛицо";
	Иначе
		ВидыКИ = УправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацииОбъекта(
			Справочники.Контрагенты.ПустаяСсылка(), Перечисления.ТипыКонтактнойИнформации.Адрес);
		ВидАдресаКонтрагента = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	КонецЕсли;
	
	Если УникальныеПолучатели.Количество() = 1 Тогда
		// Если всего один уникальный получатель, то покажем его адрес, который соотв. виду адреса.
		Если ПоискТолькоПоФизЛицу Тогда
			КИПолучателей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
				ВсеФизЛица, Перечисления.ТипыКонтактнойИнформации.Адрес,, ТекущаяДатаСеанса());
		Иначе
			КИПолучателей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
				УникальныеПолучатели, Перечисления.ТипыКонтактнойИнформации.Адрес,, ТекущаяДатаСеанса());
		КонецЕсли;
		
		Для Каждого ВидКИ Из ВидыКИ Цикл
			АдресПолучателя = "";
			СтрНайти = КИПолучателей.НайтиСтроки(Новый Структура("Вид", ВидКИ.Ссылка));
			Если СтрНайти.Количество() Тогда
				АдресПолучателя = СокрЛП(ВидКИ.Ссылка) + " (" + СтрНайти[0].Представление + ")";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(АдресПолучателя) Тогда
				Элементы.ВидАдресаКонтрагента.СписокВыбора.Добавить(ВидКИ.Ссылка, АдресПолучателя);
			Иначе
				Элементы.ВидАдресаКонтрагента.СписокВыбора.Добавить(ВидКИ.Ссылка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Элементы.ВидАдресаКонтрагента.СписокВыбора.ЗагрузитьЗначения(ВидыКИ.ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Элементы.ВидАдресаКонтрагента.СписокВыбора.СортироватьПоЗначению(); 
	
КонецПроцедуры

#КонецОбласти
