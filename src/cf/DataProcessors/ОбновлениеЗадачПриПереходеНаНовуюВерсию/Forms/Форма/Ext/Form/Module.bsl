#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВсегоДействийЗадач = ВсегоДействийЗадач();
	ВсегоЗадач = ВсегоЗадач();
	
	ОбновитьТекущееСостояние();
	
	Элементы.ЗапускПотоковОбновления.Видимость = Не ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ПотоковДляЗапуска = 10;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьТекущееСостояниеОжидание", 3, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПотоковДляЗапускаПриИзменении(Элемент)
	
	НачалоПрогноза = Дата(1, 1, 1);
	КоличествоОбъектовПрогноза = 0;
	ОбновитьТекущееСостояние();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьПрогноз(Команда)
	
	НачалоПрогноза = Дата(1, 1, 1);
	КоличествоОбъектовПрогноза = 0;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьТекущееСостояниеОжидание()
	
	ОбновитьТекущееСостояние();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущееСостояние()
	
	ДействийЗадачКОбновлению = ДействийЗадачКОбновлению();
	ЗадачКОбновлению = ЗадачКОбновлению();
	
	ОбновитьФоновыеЗадания();
	
	ЗапуститьОбновление();
	
	РассчитатьПрогноз();
	СостояниеОбновленоВ = ТекущаяДатаСеанса();
	
КонецПроцедуры

&НаСервере
Функция ДействийЗадачКОбновлению()
	
	КоличествоОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ДействиеЗадачи.Ссылка) КАК КоличествоОбъектов
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.ВерсияОбновления = 0");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоОбъектов = Выборка.КоличествоОбъектов;
	КонецЕсли;
	
	Возврат КоличествоОбъектов;
	
КонецФункции

&НаСервере
Функция ВсегоДействийЗадач()
	
	КоличествоОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ДействиеЗадачи.Ссылка) КАК КоличествоОбъектов
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоОбъектов = Выборка.КоличествоОбъектов;
	КонецЕсли;
	
	Возврат КоличествоОбъектов;
	
КонецФункции

&НаСервере
Функция ЗадачКОбновлению()
	
	КоличествоОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Задача.Ссылка) КАК КоличествоОбъектов
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.ВерсияОбновления = 0");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоОбъектов = Выборка.КоличествоОбъектов;
	КонецЕсли;
	
	Возврат КоличествоОбъектов;
	
КонецФункции

&НаСервере
Функция ВсегоЗадач()
	
	КоличествоОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Задача.Ссылка) КАК КоличествоОбъектов
		|ИЗ
		|	Документ.Задача КАК Задача");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоОбъектов = Выборка.КоличествоОбъектов;
	КонецЕсли;
	
	Возврат КоличествоОбъектов;
	
КонецФункции

&НаСервере
Процедура ЗапуститьОбновление()
	
	Если ПотоковДляЗапуска = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееКоличествоЗаданий = АктивныеЗаданияОбновления.Количество();
	
	Если Не ЗначениеЗаполнено(НачалоПрогноза) Тогда
		НачалоПрогноза = ТекущаяДатаСеанса();
		КоличествоОбъектовПрогноза = ДействийЗадачКОбновлению + ЗадачКОбновлению;
	КонецЕсли;
	
	Пока ТекущееКоличествоЗаданий < ПотоковДляЗапуска Цикл
		
		ЕстьДанныеКОбновлению = Ложь;
		
		// Обновим действия задач.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 100
			|	ДействиеЗадачи.Ссылка КАК Ссылка,
			|	ДействиеЗадачи.Дата КАК Дата
			|ИЗ
			|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
			|ГДЕ
			|	ДействиеЗадачи.ВерсияОбновления = 0
			|	И ДействиеЗадачи.Дата < &ГраницаОбновленияДействийЗадач
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДействиеЗадачи.Дата УБЫВ");
		
		Если Не ЗначениеЗаполнено(ГраницаОбновленияДействийЗадач) Тогда
			ГраницаОбновленияДействийЗадач = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Запрос.Параметры.Вставить("ГраницаОбновленияДействийЗадач", ГраницаОбновленияДействийЗадач);
		
		МассивОбновления = Новый Массив;
		
		//@skip-check query-in-loop
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивОбновления.Добавить(Выборка.Ссылка);
			ГраницаОбновленияДействийЗадач = Выборка.Дата;
			
		КонецЦикла;
		
		Если МассивОбновления.Количество() > 0 Тогда
			
			ПараметрыФоновогоЗадания = Новый Массив;
			ПараметрыФоновогоЗадания.Добавить(МассивОбновления);
			
			ФоновоеЗадание = ФоновыеЗадания.Выполнить(
				"ОбновлениеИнформационнойБазыДокументооборот.ОбновитьДействияЗадачДоВерсииОбновления1",
				ПараметрыФоновогоЗадания);
			
			АктивныеЗаданияОбновления.Добавить(ФоновоеЗадание.УникальныйИдентификатор);
			
			ТекущееКоличествоЗаданий = ТекущееКоличествоЗаданий + 1;
			ЕстьДанныеКОбновлению = Истина;
			
		Иначе
			
			ГраницаОбновленияДействийЗадач = Дата(1, 1, 1);
			
		КонецЕсли;
		
		// Обновим задачи.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 100
			|	Задача.Ссылка КАК Ссылка,
			|	Задача.Дата КАК Дата
			|ИЗ
			|	Документ.Задача КАК Задача
			|ГДЕ
			|	Задача.ВерсияОбновления = 0
			|	И Задача.Дата < &ГраницаОбновленияЗадач
			|
			|УПОРЯДОЧИТЬ ПО
			|	Задача.Дата УБЫВ");
		
		Если Не ЗначениеЗаполнено(ГраницаОбновленияЗадач) Тогда
			ГраницаОбновленияЗадач = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Запрос.Параметры.Вставить("ГраницаОбновленияЗадач", ГраницаОбновленияЗадач);
		
		МассивОбновления = Новый Массив;
		
		//@skip-check query-in-loop
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивОбновления.Добавить(Выборка.Ссылка);
			ГраницаОбновленияЗадач = Выборка.Дата;
			
		КонецЦикла;
		
		Если МассивОбновления.Количество() > 0 Тогда
			
			ПараметрыФоновогоЗадания = Новый Массив;
			ПараметрыФоновогоЗадания.Добавить(МассивОбновления);
			
			ФоновоеЗадание = ФоновыеЗадания.Выполнить(
				"ОбновлениеИнформационнойБазыДокументооборот.ОбновитьЗадачиДоВерсииОбновления1",
				ПараметрыФоновогоЗадания);
			
			АктивныеЗаданияОбновления.Добавить(ФоновоеЗадание.УникальныйИдентификатор);
			
			ТекущееКоличествоЗаданий = ТекущееКоличествоЗаданий + 1;
			ЕстьДанныеКОбновлению = Истина;
			
		Иначе
			
			ГраницаОбновленияЗадач = Дата(1, 1, 1);
			
		КонецЕсли;
		
		Если Не ЕстьДанныеКОбновлению Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФоновыеЗадания()
	
	КоличествоЭлементов = АктивныеЗаданияОбновления.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		АктивноеЗаданиеУИД = АктивныеЗаданияОбновления[ОбратныйИндекс].Значение;
		
		АктивноеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(АктивноеЗаданиеУИД);
		Если АктивноеЗадание <> Неопределено
			И АктивноеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		АктивныеЗаданияОбновления.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПрогноз()
	
	СкоростьОбновления = 0;
	ОсталосьЧасов = 0;
	ОсталосьМинут = 0;
	ОсталосьСекунд = 0;
	
	КоличествоОбъектов = ДействийЗадачКОбновлению + ЗадачКОбновлению;
	
	Если КоличествоОбъектовПрогноза = КоличествоОбъектов Тогда
		Возврат;
	КонецЕсли;
	
	ВремяПрогноза = ТекущаяДатаСеанса() - НачалоПрогноза;
	КоличествоПрогноза = КоличествоОбъектовПрогноза - КоличествоОбъектов;
	Если ВремяПрогноза = 0 Или КоличествоПрогноза = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкоростьОбновления = КоличествоПрогноза / ВремяПрогноза;
	
	Если СкоростьОбновления <> 0 Тогда
		
		ОсталосьПрогнозСекунд = КоличествоОбъектов / СкоростьОбновления;
		
		ОсталосьЧасов = Цел(ОсталосьПрогнозСекунд / 3600);
		ОсталосьПрогнозСекунд = ОсталосьПрогнозСекунд - ОсталосьЧасов * 3600;
		
		ОсталосьМинут = Цел(ОсталосьПрогнозСекунд / 60);
		ОсталосьПрогнозСекунд = ОсталосьПрогнозСекунд - ОсталосьМинут * 60;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
