#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Задание настроеки умолчанию.
	КоличествоФоновыхЗаданий = 10;
	ОбновлятьВФоновыхЗаданиях = Истина;
	ДатаНачалаОтбораЖурналаРегистрации = ТекущаяДатаСеанса();
	
	// Настройка формы для файловой информационной базы.
	Элементы.ГруппаОбновлятьВФоновыхЗаданиях.Видимость =
		Не ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	// Обновление формы.
	ОбновитьПредставлениеСостояния();
	ОбновитьДоступностьКоличествоФоновыхЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЧастотаОбновленияСтатуса = ЧастотаОбновленияСтатуса();
	ПодключитьОбработчикОжидания("ОбработатьОжидание", ЧастотаОбновленияСтатуса, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьПредставлениеСостояния();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбновлятьВФоновыхЗаданияхПриИзменении(Элемент)
	
	ОбновитьДоступностьКоличествоФоновыхЗаданий();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьОжидание()
	
	ОбработатьОжиданиеНаСервере();
	
	ЧастотаОбновленияСтатуса = ЧастотаОбновленияСтатуса();
	ПодключитьОбработчикОжидания("ОбработатьОжидание", ЧастотаОбновленияСтатуса, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОжиданиеНаСервере()
	
	ВыполнитьИтерациюОбновления();
	ОбновитьПредставлениеСостояния();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАктивныеЗаданияОбновления()
	
	КоличествоЭлементов = АктивныеЗаданияОбновления.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		АктивноеЗаданиеУИД = АктивныеЗаданияОбновления[ОбратныйИндекс].Значение;
		
		АктивноеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(АктивноеЗаданиеУИД);
		Если АктивноеЗадание <> Неопределено
			И АктивноеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		АктивныеЗаданияОбновления.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьКоличествоФоновыхЗаданий()
	
	Элементы.КоличествоФоновыхЗаданий.Доступность = ОбновлятьВФоновыхЗаданиях;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеСостояния()
	
	ДатаОбновленияСостояния = ТекущаяДатаСеанса();
	КоличествоКОбновлению = КоличествоКОбновлению();
	
	ПредставлениеСостояния = СтрШаблон(НСтр("ru = '%1: объектов к обновлению %2'"),
		ДатаОбновленияСостояния,
		КоличествоКОбновлению);
	
КонецПроцедуры

&НаСервере
Функция ОбновлятьВФоновыхЗаданияхЭффективное()
	
	ОбновлятьВФоновыхЗаданияхЭффективное =
		ОбновлятьВФоновыхЗаданиях
		И Не ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Возврат ОбновлятьВФоновыхЗаданияхЭффективное;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧастотаОбновленияСтатуса()
	
	ЧастотаОбновленияСтатуса = 1;
	
	Возврат ЧастотаОбновленияСтатуса;
	
КонецФункции

&НаСервере
Функция КоличествоКОбновлению()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбновляемаяТаблица.Ссылка) КАК КоличествоКОбновлению
		|ИЗ
		|	Справочник.Контроль КАК ОбновляемаяТаблица
		|ГДЕ
		|	ОбновляемаяТаблица.Ссылка > &ТекущийОбъектОбновления");
	
	ЧастьУсловия =
		"ГДЕ
		|	ОбновляемаяТаблица.Ссылка > &ТекущийОбъектОбновления";
	Если Не СтрНайти(Запрос.Текст, ЧастьУсловия) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось найти часть условия'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъектОбновления) Тогда
		Запрос.УстановитьПараметр("ТекущийОбъектОбновления", ТекущийОбъектОбновления);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЧастьУсловия, "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоКОбновлению = Выборка.КоличествоКОбновлению;
	Иначе
		КоличествоКОбновлению = 0;
	КонецЕсли;
	
	Возврат КоличествоКОбновлению;
	
КонецФункции

&НаСервере
Функция ПорцияКОбновлению()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОбновляемаяТаблица.Ссылка КАК ОбъектКОбновлению
		|ИЗ
		|	Справочник.Контроль КАК ОбновляемаяТаблица
		|ГДЕ
		|	ОбновляемаяТаблица.Ссылка > &ТекущийОбъектОбновления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбновляемаяТаблица.Ссылка");
	
	ЧастьУсловия =
		"ГДЕ
		|	ОбновляемаяТаблица.Ссылка > &ТекущийОбъектОбновления";
	Если Не СтрНайти(Запрос.Текст, ЧастьУсловия) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось найти часть условия'");
	КонецЕсли;
	
	Если ТекущийОбъектОбновления <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТекущийОбъектОбновления", ТекущийОбъектОбновления);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЧастьУсловия, "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПорцияКОбновлению = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ПорцияКОбновлению.Добавить(Выборка.ОбъектКОбновлению);
		ТекущийОбъектОбновления = Выборка.ОбъектКОбновлению;
	КонецЦикла;
	
	Возврат ПорцияКОбновлению;
	
КонецФункции

&НаСервере
Процедура ВыполнитьИтерациюОбновления()
	
	ОбновлятьВФоновыхЗаданияхЭффективное = ОбновлятьВФоновыхЗаданияхЭффективное();
	Если ОбновлятьВФоновыхЗаданияхЭффективное Тогда
		
		ОбновитьАктивныеЗаданияОбновления();
		
		Пока АктивныеЗаданияОбновления.Количество() < КоличествоФоновыхЗаданий Цикл
			
			//@skip-check query-in-loop
			ПорцияКОбновлению = ПорцияКОбновлению();
			Если ПорцияКОбновлению.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыФоновогоЗадания = Новый Массив;
			ПараметрыФоновогоЗадания.Добавить(ПорцияКОбновлению);
			
			ИмяМетода = "Контроль.ОтразитьПорциюДанныхКонтроля";
			ФоновоеЗадание = ФоновыеЗадания.Выполнить(
				ИмяМетода,
				ПараметрыФоновогоЗадания);
			
			АктивныеЗаданияОбновления.Добавить(ФоновоеЗадание.УникальныйИдентификатор);
			
		КонецЦикла;
		
	Иначе
		
		ПорцияКОбновлению = ПорцияКОбновлению();
		Контроль.ОтразитьПорциюДанныхКонтроля(ПорцияКОбновлению);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти