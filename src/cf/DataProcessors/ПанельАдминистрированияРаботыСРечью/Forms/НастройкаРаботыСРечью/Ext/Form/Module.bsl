///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПереключитьГруппуПодключитьОтключить();
	
	ТекущиеНастройки = Константы.НастройкиРаботыСРечью.ПолучитьБезопасно();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТекущиеНастройки);
	
	ЗаполнитьДоступныеМодели();
	
	Если РаботаСРечьюБМОСервер.ПоддерживаетсяРаспознавание() Тогда 
		Элементы.Предупреждение.Видимость = Ложь;
	Иначе
		Элементы.Панель.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ПодключитьТестовыйПериод.Видимость = ПодключениеТестовогоПериодаДоступно();
	ОбновитьБаланс();
	
КонецПроцедуры

#КонецОбласти

//

&НаКлиенте
Процедура ЗапретитьОблачноеРаспознаваниеПриИзменении(Элемент)
	
	ЗапретитьОблачноеРаспознаваниеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗапретитьОблачноеРаспознаваниеПриИзмененииНаСервере()
	
	Константы.НастройкиРаботыСРечью.СохранитьНастройку(
		"ЗапретитьОблачноеРаспознавание", ЗапретитьОблачноеРаспознавание);
	
	ЗаполнитьДоступныеМодели();
	
КонецПроцедуры

//

&НаКлиенте
Процедура ДоступныеМоделиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДоступныеМоделиКартинкаЛокальная" Тогда
		ЗагрузитьИУстановитьМодельЛокальноДействие();
	КонецЕсли;
	
КонецПроцедуры

//

&НаСервере
Процедура ПереключитьГруппуПодключитьОтключить()
	
	ВнешнееРасположениеПоддерживается = РаботаСРечьюБМОСервер.ПоддерживаетсяИспользованиеВнешнегоРасположения();
	
	Элементы.Подключить.Доступность = Не ВнешнееРасположениеПоддерживается;
	Элементы.Отключить.Доступность = ВнешнееРасположениеПоддерживается;
	
	Элементы.ПодключитьТестовыйПериод.Видимость = ПодключениеТестовогоПериодаДоступно();
	
	ОбновитьБаланс();
	
	ЗаполнитьДоступныеМодели();
	
КонецПроцедуры

// Аутентификация

// Схема рекомендуемого порядка аутентификации в целевом сервисе приведена в:
// https://its.1c.ru/db/uisldoc#content:283:1

&НаКлиенте
Процедура Подключить(Команда)
	
	РезультатАутентификации = ВыполнитьАутентификацию();
	
	Если РезультатАутентификации = "ДанныеАутентификацииНеЗаполнены"
	 Или РезультатАутентификации = "НеверныйЛогинИлиПароль" Тогда
		Обработчик = Новый ОписаниеОповещения("ПослеПодключениеИнтернетПоддержки", ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Обработчик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключениеИнтернетПоддержки(Результат, Контекст) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыполнитьАутентификацию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьАутентификацию()
	
	Результат = ВыполнитьАутентификациюВСервисеРаботыСРечью();
	
	Если Результат = "УспешнаяАутентификация" Тогда
		ПереключитьГруппуПодключитьОтключить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьАутентификациюВСервисеРаботыСРечью()
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат "ДанныеАутентификацииНеЗаполнены";
	КонецЕсли;
	
	ВладелецТикета = РаботаСРечьюБМОКлиентСервер.ИдентификаторСервиса();
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатПолученияТикета = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		
		ТекущиеПараметры = ТекущиеПараметрыРаботыСРечью();
		Токен = ПолучитьТокенСервисаРаботыСРечью(ТекущиеПараметры.АдресСервера, РезультатПолученияТикета.Тикет);
		
		РаботаСРечьюБМОСервер.УстановитьПараметрыВнешнегоПодключенияИнформационнойБазы(
			РаботаСРечьюБМОСервер.НовыйПараметрыВнешнегоПодключенияРаботыСРечью(Токен)
		);
		
		Возврат "УспешнаяАутентификация";
		
	ИначеЕсли РезультатПолученияТикета.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
		Возврат "НеверныйЛогинИлиПароль";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущиеПараметрыРаботыСРечью()
	
	ТекущиеПараметры = РаботаСРечьюБМОСервер.ПолучитьПараметрыВнешнегоПодключенияИнформационнойБазы();
	Если ТекущиеПараметры = Неопределено Тогда
		ТекущиеПараметры = РаботаСРечьюБМОСервер.НовыйПараметрыВнешнегоПодключенияРаботыСРечью("");
	КонецЕсли;
	Возврат ТекущиеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТокенСервисаРаботыСРечью(Адрес, Тикет)
	
	Если ПустаяСтрока(Адрес) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить токен авторизации. Не задан адрес сервиса.'");
	КонецЕсли;
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("ticket", Тикет);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеАутентификации);
	ТелоЗапроса = ЗаписьJSON.Закрыть();
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https");
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
	Соединение = Новый HTTPСоединение(Адрес, , , , Прокси, , Новый ЗащищенноеСоединениеOpenSSL());
	Запрос = Новый HTTPЗапрос("api/v1/auth/its");
	Запрос.Заголовки.Вставить("accept", "application/json");
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить токен авторизации. Повторите позже.'");
	КонецЕсли;
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	РезультатАутентификации = ПрочитатьJSON(ЧтениеJSON);
	
	Возврат РезультатАутентификации["access_token"];
	
КонецФункции

// Отключение от сервиса

&НаКлиенте
Процедура Отключить(Команда)
	
	ОтключитьСервисРаспознавания();
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьСервисРаспознавания()
	
	РаботаСРечьюБМОСервер.УстановитьПараметрыВнешнегоПодключенияИнформационнойБазы(Неопределено);
	РаботаСРечьюБМОСервер.УстановитьПараметрыВнешнегоПодключенияСеанса(Неопределено);
	
	ПереключитьГруппуПодключитьОтключить();
	
КонецПроцедуры

///

&НаСервере
Процедура ОбновитьБаланс()
	
	ВнешнееРасположениеПоддерживается = РаботаСРечьюБМОСервер.ПоддерживаетсяИспользованиеВнешнегоРасположения();
	Элементы.Баланс.Видимость = ВнешнееРасположениеПоддерживается;
	
	Если ВнешнееРасположениеПоддерживается Тогда
		ДанныеБаланса = ПолучитьБалансСервисаРаботыСРечью();
		Элементы.ПредставлениеБаланса.Заголовок = ПредставлениеБаланса(ДанныеБаланса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБалансСервисаРаботыСРечью()
	
	Результат = Новый Структура;
	Результат.Вставить("АвторизацияВыполнена", Ложь);
	Результат.Вставить("НазначенПакетИТС", Ложь);
	Результат.Вставить("ТарификацияВключена", Ложь);
	Результат.Вставить("Баланс", 0);
	Результат.Вставить("Предел", 0);
	Результат.Вставить("ДатаОкончания", Дата("00010101"));
	
	ПараметрыРаспознавания = РаботаСРечьюБМОСервер.ПолучитьПараметрыВнешнегоПодключенияИнформационнойБазы();
	Если ПараметрыРаспознавания = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https");
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
	Таймаут = 5;
	Соединение = Новый HTTPСоединение(ПараметрыРаспознавания.АдресСервера, , , , Прокси, Таймаут,
		Новый ЗащищенноеСоединениеOpenSSL());
	Запрос = Новый HTTPЗапрос("api/v1/users/balance");
	Запрос.Заголовки.Вставить("accept", "application/json");
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.Заголовки.Вставить("authorization", "Bearer " + ПараметрыРаспознавания.Токен);
	
	Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
	
	Результат.АвторизацияВыполнена = Истина;
	Если ОтветJSON.Свойство("stt") Тогда
		Результат.НазначенПакетИТС= Истина;
		Результат.ТарификацияВключена = (ОтветJSON["stt"]["billing"] = "enabled");
		Результат.Баланс =  ОтветJSON["stt"]["balance"];
		Результат.Предел = ОтветJSON["stt"]["limit"];
		Если ОтветJSON["stt"]["expiration_date"] <> Неопределено Тогда
			Результат.ДатаОкончания = ПрочитатьДатуJSON(ОтветJSON["stt"]["expiration_date"], ФорматДатыJSON.ISO);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеБаланса(ДанныеБаланса) Экспорт
	
	Если Не ДанныеБаланса.АвторизацияВыполнена Тогда
		Возврат НСтр("ru = 'Выполните аутентификацию для того чтобы увидеть баланс'");
	КонецЕсли;
	
	Если Не ДанныеБаланса.НазначенПакетИТС Или ДанныеБаланса.Баланс = 0 Тогда
		Возврат НСтр("ru = 'Нет найденных пакетов ИТС'");
	КонецЕсли;
	
	Если Не ДанныеБаланса.ТарификацияВключена Тогда
		Возврат НСтр("ru = 'Тарификация не выполняется'");
	КонецЕсли;
	
	Секунд = ДанныеБаланса.Баланс;
	Часов = Цел(Секунд / 3600);
	Секунд = Секунд % 3600;
	Минут = Цел(Секунд / 60);
	Секунд = Секунд % 60;
	
	ПоказателиБаланса = Новый Массив;
	
	Если ЗначениеЗаполнено(Часов) Тогда
		ПоказателиБаланса.Добавить(СтрШаблон(НСтр("ru = '%1 ч.'"), Часов));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Минут) Тогда
		ПоказателиБаланса.Добавить(СтрШаблон(НСтр("ru = '%1 мин.'"), Минут));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Секунд) Тогда
		ПоказателиБаланса.Добавить(СтрШаблон(НСтр("ru = '%1 сек.'"), Секунд));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеБаланса.ДатаОкончания) Тогда
		Возврат СтрСоединить(ПоказателиБаланса, " ");
	КонецЕсли;
	
	ДатаОкончанияПрописью = Формат(ДанныеБаланса.ДатаОкончания, "ДЛФ=DD");
	Возврат СтрШаблон(НСтр("ru = '%1 активно до %2'"), СтрСоединить(ПоказателиБаланса, " "), ДатаОкончанияПрописью);
	
КонецФункции

// Управление моделями

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьДоступныеМодели();
	ОбновитьБаланс();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеМодели()
	
	Попытка
		ОписаниеМоделейРаспознавания = РаботаСРечьюБМОСервер.ПолучитьОписаниеМоделейРаспознавания();
	Исключение
		ОписаниеМоделейРаспознавания = Новый Массив;
	КонецПопытки;
	
	ЕстьДоступнаяЛокальная = Ложь;
	
	ИдентификаторыМоделей = Новый Массив;
	Для Каждого ОписаниеМодели Из ОписаниеМоделейРаспознавания Цикл
		ИдентификаторыМоделей.Добавить(ОписаниеМодели.ИдентификаторМодели);
	КонецЦикла;
	
	ВГраница = ДоступныеМодели.Количество() - 1;
	Для Индекс = 0 По ВГраница Цикл
		
		ТекущаяСтрока = ДоступныеМодели[ВГраница - Индекс];
		
		Если ИдентификаторыМоделей.Найти(ТекущаяСтрока.ИдентификаторМодели) = Неопределено Тогда
			ДоступныеМодели.Удалить(ТекущаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОписаниеМодели Из ОписаниеМоделейРаспознавания Цикл
		
		Отбор = Новый Структура("ИдентификаторМодели", Строка(ОписаниеМодели.ИдентификаторМодели));
		Строки = ДоступныеМодели.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			НоваяСтрока = Строки[0];
		Иначе
			НоваяСтрока = ДоступныеМодели.Добавить();
		КонецЕсли;
		
		НоваяСтрока.ИдентификаторМодели = ОписаниеМодели.ИдентификаторМодели;
		НоваяСтрока.ПредставлениеАкустики = ОписаниеМодели.ПредставлениеАкустики;
		НоваяСтрока.ПредставлениеГрамматики = ОписаниеМодели.ПредставлениеГрамматики;
		НоваяСтрока.Описание = ОписаниеМодели.Описание;
		
		Если ОписаниеМодели.ДоступнаВЛокальномВарианте Тогда
			ЕстьДоступнаяЛокальная = Истина;
		КонецЕсли;
		
		НоваяСтрока.ДоступнаВЛокальномВарианте = ОписаниеМодели.ДоступнаВЛокальномВарианте;
		НоваяСтрока.ДоступнаВоВнешнемВарианте = ОписаниеМодели.ДоступнаВоВнешнемВарианте;
		НоваяСтрока.ДоступнаДляПолучения = ОписаниеМодели.ДоступнаДляПолучения;
		
		НоваяСтрока.КартинкаЛокальная = КартинкаЭтоЛокальная(ОписаниеМодели);
		НоваяСтрока.КартинкаОблачная = КартинкаЭтоОблачная(ОписаниеМодели);;
		
		ПараметрыМодели = ОписаниеМодели.ПолучитьПараметры();
		НоваяСтрока.ПредставлениеЯзыка = ПредставлениеЯзыка(ПараметрыМодели.КодЯзыка);
		НоваяСтрока.КодЯзыка = ПараметрыМодели.КодЯзыка;
		НоваяСтрока.Акустика = ПараметрыМодели.Акустика;
		НоваяСтрока.Грамматика = ПараметрыМодели.Грамматика;
		НоваяСтрока.Версия = ПараметрыМодели.Версия;
		
	КонецЦикла;
	
	//
	
	Элементы.РекомендацияВключитьСкачать.Видимость = Не ЕстьДоступнаяЛокальная
		И (ЗапретитьОблачноеРаспознавание Или Не РаботаСРечьюБМОСервер.ПоддерживаетсяИспользованиеВнешнегоРасположения());
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КартинкаЭтоЛокальная(ОписаниеМодели)
	
	Если ОписаниеМодели.ДоступнаВЛокальномВарианте Тогда
		Возврат БиблиотекаКартинок.МодельРаспознаванияРечиДоступна;
	ИначеЕсли ОписаниеМодели.ДоступнаДляПолучения Тогда
		Возврат БиблиотекаКартинок.МодельРаспознаванияРечиСкачать;
	Иначе
		Возврат БиблиотекаКартинок.МодельРаспознаванияРечиНеДоступна;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КартинкаЭтоОблачная(ОписаниеМодели)
	
	Если ОписаниеМодели.ДоступнаВоВнешнемВарианте Тогда
		Если ЗапретитьОблачноеРаспознавание Тогда
			Возврат БиблиотекаКартинок.ЗнакСтоп;
		Иначе
			Возврат БиблиотекаКартинок.МодельРаспознаванияРечиДоступна;
		КонецЕсли;
	Иначе
		Возврат БиблиотекаКартинок.МодельРаспознаванияРечиНеДоступна;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеЯзыка(КодЯзыка)
	
	Попытка
		Возврат ?(ЗначениеЗаполнено(КодЯзыка), ПредставлениеКодаЛокализации(КодЯзыка), КодЯзыка);
	Исключение
		Возврат КодЯзыка;
	КонецПопытки;
	
КонецФункции

///

&НаКлиенте
Процедура ЗагрузитьИУстановитьМодельЛокально(Команда)
	
	ЗагрузитьИУстановитьМодельЛокальноДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИУстановитьМодельЛокальноДействие()

	ТекущиеДанные = Элементы.ДоступныеМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ДоступнаДляПолучения Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Модель не предназначена для работы локально'")
		);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИУстановитьМодельНаСервере(ТекущиеДанные.ИдентификаторМодели);
	ЗаполнитьДоступныеМодели();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьИУстановитьМодельНаСервере(ИдентификаторМодели)
	
	ВыполнитьПроверкуПравДоступа("АдминистрированиеДанных", Метаданные);
	
	АдресВременногоХранилища = РаботаСРечьюБМОСервер.ПолучитьМодельРаспознаванияВоВременноеХранилище(
		РаботаСРечьюБМОСервер.НовыйИдентификаторМоделиРаспознаванияРечи(ИдентификаторМодели)
	);
	РаботаСРечьюБМОСервер.УстановитьМодельРаспознаванияДляИнформационнойБазы(АдресВременногоХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛокальнуюМодель(Команда)
	
	ТекущиеДанные = Элементы.ДоступныеМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЛокальнуюМодельНаСервере(ТекущиеДанные.ИдентификаторМодели);
	ЗаполнитьДоступныеМодели();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьЛокальнуюМодельНаСервере(ИдентификаторМодели)
	
	ВыполнитьПроверкуПравДоступа("АдминистрированиеДанных", Метаданные);
	
	РаботаСРечьюБМОСервер.УдалитьМодельРаспознаванияДляИнформационнойБазы(
		РаботаСРечьюБМОСервер.НовыйИдентификаторМоделиРаспознаванияРечи(ИдентификаторМодели)
	);
	
КонецПроцедуры

///

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Если ЗапретитьОблачноеРаспознавание Или Не РаботаСРечьюБМОСервер.ПоддерживаетсяИспользованиеВнешнегоРасположения() Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоступныеМоделиВерсия.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоступныеМоделиОписание.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоступныеМоделиПредставлениеЯзыка.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоступныеМоделиПредставлениеГрамматики.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоступныеМоделиПредставлениеАкустики.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступныеМодели.ДоступнаВЛокальномВарианте");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
		
	КонецЕсли;
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоступныеМоделиКартинкаЛокальная.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступныеМодели.ДоступнаВЛокальномВарианте");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщаяГрамматика(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВариантГрамматики", "ОбщаяГрамматика");
	ОткрытьФорму("Обработка.ПараметрыРаспознаванияРечи.Форма.РедактированиеГрамматики", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестовыйПакетТекстОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ПодключитьБесплатныйСтартовыйПакет" Тогда
		
		ИдентификаторСервиса = РаботаСРечьюБМОКлиентСервер.ИдентификаторСервиса();
		Обработчик = Новый ОписаниеОповещения("ПослеПодключенияТестовогоПериода", ЭтотОбъект);
		ПодключениеСервисовСопровожденияКлиент.ПодключитьТестовыйПериод(ИдентификаторСервиса, ЭтотОбъект, Обработчик);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияТестовогоПериода(Результат, Контекст) Экспорт
	
	Если Результат = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.Подключен") Тогда
		Элементы.ПодключитьТестовыйПериод.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьБаланс();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодключениеТестовогоПериодаДоступно()
	
	ИдентификаторСервиса = РаботаСРечьюБМОКлиентСервер.ИдентификаторСервиса();
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСервиса);
	ОписательДоступности = ПодключениеСервисовСопровождения.ДоступноПодключениеТестовогоПериода(Идентификаторы);
	Если Не ОписательДоступности.Ошибка Тогда
		Возврат ОписательДоступности.СервисыСопровождения[ИдентификаторСервиса] = "Доступно";
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
