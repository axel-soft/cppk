
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущаяСтрокаМетаданных;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьДеревоМетаданных();
	ЗаполнитьКоличествоРегистрацийВДереве();

	Элементы.ВариантыСпискаОбъектов.ТекущаяСтраница = Элементы.СтраницаПустая;
	
	УстановитьУсловноеОформление();
	
	ИмяЭтойФормы = ПолучитьИмяФормы();

	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не (ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
			И ИсточникВыбора.КлючУникальности = КлючУникальностиФормыВыбораРезультатаЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	// Результат выбора запроса, ожидаем структуру.
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") 
		Или (Не ВыбранноеЗначение.Свойство("ДействиеВыбора"))
		Или (Не ВыбранноеЗначение.Свойство("ДанныеВыбора"))
		Или ТипЗнч(ВыбранноеЗначение.ДействиеВыбора) <> Тип("Булево")
		Или ТипЗнч(ВыбранноеЗначение.ДанныеВыбора) <> Тип("Строка") Тогда
		Ошибка = НСтр("ru = 'Неожиданный результат выбора из консоли запросов'");
	Иначе
		Ошибка = КонтрольСсылокДляВыбораЗапросом(ВыбранноеЗначение.ДанныеВыбора);
	КонецЕсли;
	
	Если Ошибка <> "" Тогда 
		ПоказатьПредупреждение(,Ошибка);
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоМетаданных

&НаКлиенте
Процедура ДеревоМетаданныхПометкаПриИзменении(Элемент)
	ИзменениеПометки(Элементы.ДеревоМетаданных.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхПриАктивизацииСтроки(Элемент)
	Если Элементы.ДеревоМетаданных.ТекущаяСтрока <> ТекущаяСтрокаМетаданных Тогда
		ТекущаяСтрокаМетаданных  = Элементы.ДеревоМетаданных.ТекущаяСтрока;
		ПодключитьОбработчикОжидания("НастроитьРедактированиеИзменений", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьРегистрациюОдногоОбъекта(Команда)
	
	ТекСтр = Элементы.ВариантыСпискаОбъектов.ТекущаяСтраница;
	Если ТекСтр = Элементы.СтраницаКонстанты Тогда
		ДобавитьРегистрациюКонстантыВСписке();
		
	ИначеЕсли ТекСтр = Элементы.СтраницаСписокСсылок Тогда
		ДобавитьРегистрациюВСписокСсылок();
		
	ИначеЕсли ТекСтр = Элементы.СтраницаНаборЗаписей Тогда
		ДобавитьРегистрациюВНаборЗаписейОтбор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрациюВсехОбъектов(Команда)
	УдалитьРегистрациюВыделенныхОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРегистрациюВсехОбъектов(Команда)
	ДобавитьРегистрациюВыделенныхОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеДанные(Команда)  
	
	ЗаполнитьКоличествоРегистрацийВДереве();
	ОбновитьСодержимоеСтраницы(ТекущаяСтрокаМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРегистрациюОтбор(Команда)
	
	ТекСтр = Элементы.ВариантыСпискаОбъектов.ТекущаяСтраница;
	Если ТекСтр = Элементы.СтраницаСписокСсылок Тогда
		ДобавитьРегистрациюВСписокОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрациюОдногоОбъекта(Команда)
	
	ТекСтр = Элементы.ВариантыСпискаОбъектов.ТекущаяСтраница;
	Если ТекСтр = Элементы.СтраницаКонстанты Тогда
		УдалитьРегистрациюКонстантыВСписке();
		
	ИначеЕсли ТекСтр = Элементы.СтраницаСписокСсылок Тогда
		УдалитьРегистрациюИзСпискаСсылок();
		
	ИначеЕсли ТекСтр = Элементы.СтраницаНаборЗаписей Тогда
		УдалитьРегистрациюВНабореЗаписей();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрациюОтбор(Команда)
	
	ТекСтр = Элементы.ВариантыСпискаОбъектов.ТекущаяСтраница;
	Если ТекСтр = Элементы.СтраницаСписокСсылок Тогда
		
		УдалитьРегистрациюВСпискеОтбор();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормыСсылкиРегистрыКонстанты

&НаКлиенте
Процедура СписокСсылокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Строка = СписокСсылок.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка <> Неопределено Тогда
		ПоказатьЗначение(, Строка.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСсылокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокСсылокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокСсылокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокКонстантОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Результат = ДобавитьРегистрациюНаСервере(Истина, ВыбранноеЗначение);
	Элементы.СписокКонстант.Обновить();
	ЗаполнитьКоличествоРегистрацийВДереве();
	ОбновитьСодержимоеСтраницы(ТекущаяСтрокаМетаданных);
	СообщитьОРезультатахРегистрации(Результат);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
		Элемент.ТекущаяСтрока = ВыбранноеЗначение[0];
	Иначе
		Элемент.ТекущаяСтрока = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНаборовЗаписейПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокНаборовЗаписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Данные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы   = Данные.МетаПолноеИмя;
	Наименование = Данные.Наименование;
	
	КлючНабора = КлючНабораЗаписей(ИмяТаблицы, ВыбраннаяСтрока);
	
	Если ЗначениеЗаполнено(КлючНабора) Тогда
		ПоказатьЗначение(, КлючНабора);        
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНаборовЗаписейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораДанных(Элемент, ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьДеревоМетаданных()
	
	Данные = ЭтотОбъект().СформироватьСтруктуруМетаданных();
	
	МетаДерево = Данные.Дерево;
	ЗначениеВРеквизитФормы(МетаДерево, "ДеревоМетаданных");
	
	СтруктураАвторегистрацииМетаданных = Данные.СтруктураАвторегистрации;
	СтруктураПредставленийМетаданных   = Данные.СтруктураПредставлений;
	СтруктураИменМетаданных            = Данные.СтруктураИмен;
	
КонецПроцедуры

&НаСервере
Функция ЭтотОбъект(ТекущийОбъект = Неопределено) 
	Если ТекущийОбъект = Неопределено Тогда
		Возврат РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьИмяФормы(ТекущийОбъект = Неопределено)
	Возврат ЭтотОбъект().ПолучитьИмяФормы(ТекущийОбъект);
КонецФункции

&НаСервере
Процедура ЗаполнитьКоличествоРегистрацийВДереве()
	
	Данные = ЭтотОбъект().ПолучитьКоличествоИзменений(СтруктураИменМетаданных);
	
	// Проставляем в дерево
	Фильтр = Новый Структура("МетаПолноеИмя, УзелОбмена", Неопределено, Неопределено);
	Нули   = Новый Структура("КоличествоИзменений, КоличествоВыгруженных, КоличествоНеВыгруженных", 0,0,0);
	
	Для Каждого Корень Из ДеревоМетаданных.ПолучитьЭлементы() Цикл
		СуммаКорень = Новый Структура("КоличествоИзменений, КоличествоВыгруженных, КоличествоНеВыгруженных", 0,0,0);
		
		Для Каждого Группа Из Корень.ПолучитьЭлементы() Цикл
			СуммаГруппа = Новый Структура("КоличествоИзменений, КоличествоВыгруженных, КоличествоНеВыгруженных", 0,0,0);
			
			СписокУзлов = Группа.ПолучитьЭлементы();
			Если СписокУзлов.Количество() = 0 И СтруктураИменМетаданных.Свойство(Группа.МетаПолноеИмя) Тогда
				// Коллекция узлов без узлов, просуммируем руками, авторегистрацию возьмем из структуры.
				Для Каждого МетаИмя Из СтруктураИменМетаданных[Группа.МетаПолноеИмя] Цикл
					Фильтр.МетаПолноеИмя = МетаИмя;
					Найдено = Данные.НайтиСтроки(Фильтр);
					Если Найдено.Количество() > 0 Тогда
						Строка = Найдено[0];
						СуммаГруппа.КоличествоИзменений     = СуммаГруппа.КоличествоИзменений     + Строка.КоличествоИзменений;
						СуммаГруппа.КоличествоВыгруженных   = СуммаГруппа.КоличествоВыгруженных   + Строка.КоличествоВыгруженных;
						СуммаГруппа.КоличествоНеВыгруженных = СуммаГруппа.КоличествоНеВыгруженных + Строка.КоличествоНеВыгруженных;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				// Считаем по каждому узлу
				Для Каждого Узел Из СписокУзлов Цикл
					Фильтр.МетаПолноеИмя = Узел.МетаПолноеИмя;
					Найдено = Данные.НайтиСтроки(Фильтр);
					Если Найдено.Количество() > 0 Тогда
						Строка = Найдено[0];
						ЗаполнитьЗначенияСвойств(Узел, Строка, "КоличествоИзменений, КоличествоВыгруженных, КоличествоНеВыгруженных");
						СуммаГруппа.КоличествоИзменений     = СуммаГруппа.КоличествоИзменений     + Строка.КоличествоИзменений;
						СуммаГруппа.КоличествоВыгруженных   = СуммаГруппа.КоличествоВыгруженных   + Строка.КоличествоВыгруженных;
						СуммаГруппа.КоличествоНеВыгруженных = СуммаГруппа.КоличествоНеВыгруженных + Строка.КоличествоНеВыгруженных;
					Иначе
						ЗаполнитьЗначенияСвойств(Узел, Нули);
					КонецЕсли;
					
					ФорматироватьКоличествоИзменений(Узел);
				КонецЦикла;
				
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Группа, СуммаГруппа);
			
			СуммаКорень.КоличествоИзменений     = СуммаКорень.КоличествоИзменений     + Группа.КоличествоИзменений;
			СуммаКорень.КоличествоВыгруженных   = СуммаКорень.КоличествоВыгруженных   + Группа.КоличествоВыгруженных;
			СуммаКорень.КоличествоНеВыгруженных = СуммаКорень.КоличествоНеВыгруженных + Группа.КоличествоНеВыгруженных;
			
			ФорматироватьКоличествоИзменений(Группа);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(Корень, СуммаКорень);
		
		ФорматироватьКоличествоИзменений(Корень);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФорматироватьКоличествоИзменений(Строка)
	Строка.КоличествоИзмененийСтрокой = Формат(Строка.КоличествоИзменений, "ЧН=0;");
КонецПроцедуры

&НаСервере
Процедура ИзменениеПометки(Строка)
	ЭлементДанных = ДеревоМетаданных.НайтиПоИдентификатору(Строка);
	ЭтотОбъект().ИзменениеПометки(ЭлементДанных);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРедактированиеИзменений()
	
	НастроитьРедактированиеИзмененийСервер(ТекущаяСтрокаМетаданных);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРедактированиеИзмененийСервер(ТекущаяСтрока)
	
	Данные = ДеревоМетаданных.НайтиПоИдентификатору(ТекущаяСтрока);
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы   = Данные.МетаПолноеИмя;
	Наименование = Данные.Наименование;
	ТекущийОбъект   = ЭтотОбъект();
	
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Мета = Неопределено;
	Иначе		
		Мета = ТекущийОбъект.МетаданныеПоПолномуИмени(ИмяТаблицы);
	КонецЕсли;
	
	Если Мета = Неопределено Тогда
		НастроитьПустуюСтраницу(Наименование, ИмяТаблицы);
		НовСтраница = Элементы.СтраницаПустая;
		
	ИначеЕсли Мета = Метаданные.Константы Тогда
		// Все константы системы
		НастроитьСписокКонстант();
		НовСтраница = Элементы.СтраницаКонстанты;
		
	ИначеЕсли ТипЗнч(Мета) = Тип("КоллекцияОбъектовМетаданных") Тогда
		// Все справочники, документы, и т.п.
		НастроитьПустуюСтраницу(Наименование, ИмяТаблицы);
		НовСтраница = Элементы.СтраницаПустая;
		
	ИначеЕсли Метаданные.Константы.Содержит(Мета) Тогда
		// Одиночная константа
		НастроитьСписокКонстант(ИмяТаблицы, Наименование);
		НовСтраница = Элементы.СтраницаКонстанты;
		
	ИначеЕсли Метаданные.Справочники.Содержит(Мета) 
		Или Метаданные.Документы.Содержит(Мета)
		Или Метаданные.ПланыВидовХарактеристик.Содержит(Мета)
		Или Метаданные.ПланыСчетов.Содержит(Мета)
		Или Метаданные.ПланыВидовРасчета.Содержит(Мета)
		Или Метаданные.БизнесПроцессы.Содержит(Мета)
		Или Метаданные.Задачи.Содержит(Мета) Тогда
		// Ссылочный тип
		НастроитьСписокСсылок(ИмяТаблицы, Наименование);
		НовСтраница = Элементы.СтраницаСписокСсылок;
		
	Иначе
		// Проверим на набор записей
		Измерения = ТекущийОбъект.ИзмеренияНабораЗаписей(ИмяТаблицы);
		Если Измерения <> Неопределено Тогда
			НастроитьНаборЗаписей(ИмяТаблицы, Измерения, Наименование);
			НовСтраница = Элементы.СтраницаНаборЗаписей;
		Иначе
			НастроитьПустуюСтраницу(Наименование, ИмяТаблицы);
			НовСтраница = Элементы.СтраницаПустая;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СтраницаКонстанты.Видимость    = Ложь;
	Элементы.СтраницаСписокСсылок.Видимость = Ложь;
	Элементы.СтраницаНаборЗаписей.Видимость = Ложь;
	Элементы.СтраницаПустая.Видимость       = Ложь;
	
	Элементы.ВариантыСпискаОбъектов.ТекущаяСтраница = НовСтраница;
	НовСтраница.Видимость = Истина;
	
	НастроитьВидимостьКомандОбщегоМеню();
	
КонецПроцедуры

// Вывод заглушки с пустой страницей.
&НаСервере
Процедура НастроитьПустуюСтраницу(Наименование, ИмяТаблицы = Неопределено)
	
	Если ИмяТаблицы = Неопределено Тогда
		ТекстКоличеств = "";
	Иначе
		Дерево = РеквизитФормыВЗначение("ДеревоМетаданных");
		Строка = Дерево.Строки.Найти(ИмяТаблицы, "МетаПолноеИмя", Истина);
		Если Строка <> Неопределено Тогда
			ТекстКоличеств = НСтр("ru = 'Зарегистрировано объектов: %1'");
	
			ТекстКоличеств = СтрЗаменить(ТекстКоличеств, "%1", Формат(Строка.КоличествоИзменений, "ЧДЦ=0; ЧН="));
		КонецЕсли;
	КонецЕсли;
	
	Текст = НСтр("ru = '%1.
	                 |
	                 |%2
	                 |Для отправки или отмены отправки
					 |выберите тип объекта слева в дереве метаданных и воспользуйтесь
	                 |командами ""Отправить"" или ""Отменить отправку""'");
		
	Текст = СтрЗаменить(Текст, "%1", Наименование);
	Текст = СтрЗаменить(Текст, "%2", ТекстКоличеств);
	Элементы.ДекорацияПустаяСтраница.Заголовок = Текст;
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКомандОбщегоМеню()
	
	ТекСтр = Элементы.ВариантыСпискаОбъектов.ТекущаяСтраница;
	
	Если ТекСтр = Элементы.СтраницаКонстанты Тогда
		Элементы.ФормаДобавитьРегистрациюОдногоОбъекта.Доступность = Истина;
		Элементы.ФормаДобавитьРегистрациюОтбор.Доступность         = Ложь;
		Элементы.ФормаУдалитьРегистрациюОдногоОбъекта.Доступность  = Истина;
		Элементы.ФормаУдалитьРегистрациюОтбор.Доступность          = Ложь;
		Элементы.ДеревоМетаданныхКонтекстноеМенюДобавитьРегистрациюОтбор.Доступность = Ложь;
		Элементы.ДеревоМетаданныхКонтекстноеМенюУдалитьРегистрациюОтбор.Доступность = Ложь;
		
	ИначеЕсли ТекСтр = Элементы.СтраницаСписокСсылок Тогда
		Элементы.ФормаДобавитьРегистрациюОдногоОбъекта.Доступность = Истина;
		Элементы.ФормаДобавитьРегистрациюОтбор.Доступность         = Истина;
		Элементы.ФормаУдалитьРегистрациюОдногоОбъекта.Доступность  = Истина;
		Элементы.ФормаУдалитьРегистрациюОтбор.Доступность          = Истина;
		Элементы.ДеревоМетаданныхКонтекстноеМенюДобавитьРегистрациюОтбор.Доступность = Истина;
		Элементы.ДеревоМетаданныхКонтекстноеМенюУдалитьРегистрациюОтбор.Доступность = Истина;
		
	ИначеЕсли ТекСтр = Элементы.СтраницаНаборЗаписей Тогда
		Элементы.ФормаДобавитьРегистрациюОдногоОбъекта.Доступность = Истина;
		Элементы.ФормаДобавитьРегистрациюОтбор.Доступность         = Ложь;
		Элементы.ФормаУдалитьРегистрациюОдногоОбъекта.Доступность  = Истина;
		Элементы.ФормаУдалитьРегистрациюОтбор.Доступность          = Ложь;
		Элементы.ДеревоМетаданныхКонтекстноеМенюДобавитьРегистрациюОтбор.Доступность = Ложь;
		Элементы.ДеревоМетаданныхКонтекстноеМенюУдалитьРегистрациюОтбор.Доступность = Ложь;
		
	Иначе
		Элементы.ФормаДобавитьРегистрациюОдногоОбъекта.Доступность = Ложь;
		Элементы.ФормаДобавитьРегистрациюОтбор.Доступность         = Ложь;
		Элементы.ФормаУдалитьРегистрациюОдногоОбъекта.Доступность  = Ложь;
		Элементы.ФормаУдалитьРегистрациюОтбор.Доступность          = Ложь;
		Элементы.ДеревоМетаданныхКонтекстноеМенюДобавитьРегистрациюОтбор.Доступность = Ложь;
		Элементы.ДеревоМетаданныхКонтекстноеМенюУдалитьРегистрациюОтбор.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вывод изменений для ссылочного типа (справочник, документ, план видов характеристик, 
// план счетов, вид расчета, бизнес-процессы, задачи).
//
&НаСервере
Процедура НастроитьСписокСсылок(ИмяТаблицы, Наименование)
	
	ТаблицаСсылок = ЭтотОбъект().ПолучитьСписокСсылок(ИмяТаблицы);
	СписокСсылок.Загрузить(ТаблицаСсылок);
	
	// Представление объекта
	Мета = ЭтотОбъект().МетаданныеПоПолномуИмени(ИмяТаблицы);
	ТекЗаголовок = Мета.ПредставлениеОбъекта;
	Если ПустаяСтрока(ТекЗаголовок) Тогда
		ТекЗаголовок = Наименование;
	КонецЕсли;
	Элементы.СписокСсылокСсылкаПредставление.Заголовок = ТекЗаголовок;  
	
	СписокСсылокИмяТаблицы = ИмяТаблицы;
	
КонецПроцедуры

// Вывод изменений для констант.
//
&НаСервере
Процедура НастроитьСписокКонстант(ИмяТаблицы = Неопределено, Наименование = "")
	
	Если ИмяТаблицы = Неопределено Тогда
		// Все константы
		Имена = СтруктураИменМетаданных.Константы;
		Представления = СтруктураПредставленийМетаданных.Константы;
		Авторегистрация = СтруктураАвторегистрацииМетаданных.Константы;
	Иначе
		Имена = Новый Массив;
		Имена.Добавить(ИмяТаблицы);
		Представления = Новый Массив;
		Представления.Добавить(Наименование);
		Индекс = СтруктураИменМетаданных.Константы.Найти(ИмяТаблицы);
		Авторегистрация = Новый Массив;
		Авторегистрация.Добавить(СтруктураАвторегистрацииМетаданных.Константы[Индекс]);
	КонецЕсли;
	
	ТаблицаСсылок = ЭтотОбъект().ПолучитьСписокКонстант(ИмяТаблицы);
	СписокКонстант.Загрузить(ТаблицаСсылок);
	
КонецПроцедуры	

// Вывод изменений для наборов записей.
//
&НаСервере
Процедура НастроитьНаборЗаписей(ИмяТаблицы, Измерения, Наименование)
	
	ТаблицаСсылок = ЭтотОбъект().ПолучитьСписокРегистра(ИмяТаблицы);
	СписокНаборовЗаписей.Загрузить(ТаблицаСсылок);  
	
	// тут заполним  ЗначенияКлючаСтрока - по Измерения
	//  и в шапке имя колонки ЗначенияКлючаСтрока
	
	ТекЗаголовок = "";
	Для Каждого Строка Из Измерения Цикл
		
		Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
			ТекЗаголовок = ТекЗаголовок + ", ";
		КонецЕсли;
		
		ТекЗаголовок = ТекЗаголовок + Строка.Заголовок;
	КонецЦикла;	

	Для Каждого Строка Из СписокНаборовЗаписей Цикл
		
		// будет не везде заполнен
		Если ЗначениеЗаполнено(Строка.ТипКлюча) Тогда
			Строка.Ссылка = КОДСервер.КлючОтметокВремениВФорматКлючаДанных(
				Строка.ИдентификаторКлюча, Строка.ТипКлюча, Строка.Объект);
		КонецЕсли;	
		
		Строка.ЗначенияКлючаСтрока = "";
		
		ДанныеИзмерений = Строка.ЗначенияКлюча.Получить();
		Если ЗначениеЗаполнено(ДанныеИзмерений) Тогда
			
			Если ЗначениеЗаполнено(Строка.ЗначенияКлючаСтрока) Тогда
				Строка.ЗначенияКлючаСтрока = Строка.ЗначенияКлючаСтрока + ", ";
			КонецЕсли;
			
			Для Каждого НаборОтбора Из ДанныеИзмерений Цикл
				Строка.ЗначенияКлючаСтрока = Строка.ЗначенияКлючаСтрока 
					+ Строка(НаборОтбора.Значение);
			КонецЦикла;	
			
		КонецЕсли;	   
		
	КонецЦикла;	
	
	Элементы.СписокНаборовЗаписейЗначенияКлючаСтрока.Заголовок = ТекЗаголовок;  
	СписокНаборовЗаписейИмяТаблицы = ИмяТаблицы;
	
КонецПроцедуры

&НаСервере
Функция КлючНабораЗаписей(ИмяТаблицы, ВыбраннаяСтрока)

	Результат = Неопределено;
	
	Строка = СписокНаборовЗаписей.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда        
		Возврат Результат;
	КонецЕсли;	    
	
	Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
		Возврат Строка.Ссылка;
	КонецЕсли;	
	
	ТекущийОбъект   = ЭтотОбъект();
	Измерения = ТекущийОбъект.ИзмеренияНабораЗаписей(ИмяТаблицы);
	Если Измерения.Количество() = 1 Тогда
		Возврат Строка.Ключ;
	КонецЕсли;	            
	
	ДанныеИзмерений = Строка.ЗначенияКлюча.Получить();
	Если ЗначениеЗаполнено(ДанныеИзмерений) Тогда     
		
		ЗначенияКлюча = Новый Структура;
		
		Для Каждого НаборОтбора Из ДанныеИзмерений Цикл
			ЗначенияКлюча.Вставить(
				НаборОтбора.Имя,
				НаборОтбора.Значение);
		КонецЦикла;	
		
		Мета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
		Результат = Мета.СоздатьКлючЗаписи(ЗначенияКлюча);
		
	КонецЕсли;		

	Возврат Результат; 
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМетаданныхКоличествоИзмененийСтрокой.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМетаданных.КоличествоИзменений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Нет изменений'"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСодержимоеСтраницы(ТекущаяСтрокаМетаданных)   
	
	НастроитьРедактированиеИзмененийСервер(ТекущаяСтрокаМетаданных);
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьРегистрациюВыделенныхОбъектов(БезУчетаАвторегистрации = Истина)
	
	Данные = ПолучитьВыбранныеИменаМетаданных(БезУчетаАвторегистрации);
	Количество = Данные.МетаИмена.Количество();
	Если Количество = 0 Тогда
		// Текущая строка
		Данные = ПолучитьИменаМетаданныхТекущейСтроки(БезУчетаАвторегистрации);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Зарегистрировать %1 для выгрузки?
	                 |
	                 |Изменение регистрации большого количества объектов может занять продолжительное время.'");
					 
	Текст = СтрЗаменить(Текст, "%1", Данные.Описание);
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение'");
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьРегистрациюВыделенныхОбъектовЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("МетаИмена", Данные.МетаИмена);
	Оповещение.ДополнительныеПараметры.Вставить("БезУчетаАвторегистрации", БезУчетаАвторегистрации);
	
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
КонецПроцедуры

// Обработчик оповещения продолжения диалога.
&НаКлиенте 
Процедура ДобавитьРегистрациюВыделенныхОбъектовЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЭтоФайловаяБаза Тогда
		ПараметрыФоновогоЗадания = ПодготовитьПараметрыИзмененияРегистрации(Истина, ДополнительныеПараметры.БезУчетаАвторегистрации, 
										ДополнительныеПараметры.МетаИмена);
		ФоновоеЗаданиеЗапуститьНаКлиенте(ПараметрыФоновогоЗадания);
	Иначе
		Результат = ДобавитьРегистрациюНаСервере(ДополнительныеПараметры.БезУчетаАвторегистрации, 
			ДополнительныеПараметры.МетаИмена);
		
		ЗаполнитьКоличествоРегистрацийВДереве();
		ОбновитьСодержимоеСтраницы(ТекущаяСтрокаМетаданных);
		СообщитьОРезультатахРегистрации(Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВыбранныеИменаМетаданных(БезУчетаАвторегистрации)
	
	Результат = Новый Структура("МетаИмена, Описание", 
		Новый Массив, ПолучитьОписаниеВыбранныхМетаданных(БезУчетаАвторегистрации));
	
	Для Каждого Корень Из ДеревоМетаданных.ПолучитьЭлементы() Цикл
		
		Если Корень.Пометка = 1 Тогда
			Результат.МетаИмена.Добавить(Неопределено);
			Возврат Результат;
		КонецЕсли;
		
		КоличествоЧастичных = 0;
		КоличествоГрупп     = 0;
		КоличествоУзлов     = 0;
		Для Каждого Группа Из Корень.ПолучитьЭлементы() Цикл
			
			Если Группа.Пометка = 0 Тогда
				Продолжить;
			ИначеЕсли Группа.Пометка = 1 Тогда
				//	Весь группа целиком, смотрим откуда выбирать значения.
				КоличествоГрупп = КоличествоГрупп + 1;
				ОписаниеГруппы = ПолучитьОписаниеВыбранныхМетаданных(БезУчетаАвторегистрации, Группа.Наименование);
				
				Если Группа.ПолучитьЭлементы().Количество() = 0 Тогда
					// Пробуем из структуры имен метаданных, считаем все отмеченными.
					МассивАвто = СтруктураАвторегистрацииМетаданных[Группа.МетаПолноеИмя];
					МассивИмен = СтруктураИменМетаданных[Группа.МетаПолноеИмя];
					Для Индекс = 0 По МассивИмен.ВГраница() Цикл
						Если БезУчетаАвторегистрации Или МассивАвто[Индекс] = 2 Тогда
							Результат.МетаИмена.Добавить(МассивИмен[Индекс]);
							ОписаниеУзла = ПолучитьОписаниеВыбранныхМетаданных(БезУчетаАвторегистрации, Группа.МетаПолноеИмя, МассивИмен[Индекс]);
						КонецЕсли;
					КонецЦикла;
					
					Продолжить;
				КонецЕсли;
				
			Иначе
				КоличествоЧастичных = КоличествоЧастичных + 1;
			КонецЕсли;
			
			Для Каждого Узел Из Группа.ПолучитьЭлементы() Цикл
				Если Узел.Пометка = 1 Тогда
					// Узел.Авторегистрация = 2 -> разрешена
					Если БезУчетаАвторегистрации Или Узел.Авторегистрация = 2 Тогда
						Результат.МетаИмена.Добавить(Узел.МетаПолноеИмя);
						ОписаниеУзла = ПолучитьОписаниеВыбранныхМетаданных(БезУчетаАвторегистрации, Группа.МетаПолноеИмя, Узел.МетаПолноеИмя);
						КоличествоУзлов = КоличествоУзлов + 1;
					КонецЕсли;
				КонецЕсли
			КонецЦикла;
			
		КонецЦикла;
		
		Если КоличествоГрупп = 1 И КоличествоЧастичных = 0 Тогда
			Результат.Описание = ОписаниеГруппы;
		ИначеЕсли КоличествоГрупп = 0 И КоличествоУзлов = 1 Тогда
			Результат.Описание = ОписаниеУзла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьОписаниеВыбранныхМетаданных(БезУчетаАвторегистрации, МетаИмяГруппа = Неопределено, МетаИмяУзел = Неопределено)
    
	Если МетаИмяГруппа = Неопределено И МетаИмяУзел = Неопределено Тогда
		// Не указано ничего
		Текст = НСтр("ru = 'все объекты %1 по выбранной иерархии вида'");
		
	ИначеЕсли МетаИмяГруппа <> Неопределено И МетаИмяУзел = Неопределено Тогда
		// Указана только группа, рассматриваем ее как наименование группы.
		Текст = "%2 %1";
		
	ИначеЕсли МетаИмяГруппа = Неопределено И МетаИмяУзел <> Неопределено Тогда
		// Указан только узел, рассматриваем как много выделенных объектов.
		Текст = НСтр("ru = 'все объекты %1 по выбранной иерархии вида'");
		
	Иначе
		// Указаны и группа и узел, рассматриваем как имена метаданных.
		Текст = НСтр("ru = 'все объекты типа ""%3"" %1'");
		
	КонецЕсли;
	
	Если БезУчетаАвторегистрации Тогда
		ТекстФлага = "";
	Иначе
		ТекстФлага = НСтр("ru = 'с признаком авторегистрации'");
	КонецЕсли;
	
	Представление = "";
	Для Каждого КлючЗначение Из СтруктураПредставленийМетаданных Цикл
		Если КлючЗначение.Ключ = МетаИмяГруппа Тогда
			Индекс = СтруктураИменМетаданных[МетаИмяГруппа].Найти(МетаИмяУзел);
			Представление = ?(Индекс = Неопределено, "", КлючЗначение.Значение[Индекс]);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, "%1", ТекстФлага);
	Текст = СтрЗаменить(Текст, "%2", НРег(МетаИмяГруппа));
	Текст = СтрЗаменить(Текст, "%3", Представление);
	
	Возврат СокрЛП(Текст);
КонецФункции

&НаСервере
Функция ПолучитьИменаМетаданныхТекущейСтроки(БезУчетаАвторегистрации) 
	
	Строка = ДеревоМетаданных.НайтиПоИдентификатору(Элементы.ДеревоМетаданных.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("МетаИмена, Описание", 
		Новый Массив, ПолучитьОписаниеВыбранныхМетаданных(БезУчетаАвторегистрации));
	МетаИмя = Строка.МетаПолноеИмя;
	Если ПустаяСтрока(МетаИмя) Тогда
		Результат.МетаИмена.Добавить(Неопределено);	
	Иначе
		Результат.МетаИмена.Добавить(МетаИмя);	
		
		Родитель = Строка.ПолучитьРодителя();
		МетаРодительИмя = Родитель.МетаПолноеИмя;
		Если ПустаяСтрока(МетаРодительИмя) Тогда
			Результат.Описание = ПолучитьОписаниеВыбранныхМетаданных(БезУчетаАвторегистрации, Строка.Наименование);
		Иначе
			Результат.Описание = ПолучитьОписаниеВыбранныхМетаданных(БезУчетаАвторегистрации, МетаРодительИмя, МетаИмя);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыИзмененияРегистрации(Команда, БезУчетаАвторегистрации, Данные, ИмяТаблицы = Неопределено)
	Результат = Новый Структура;
	Результат.Вставить("Команда", Команда);
	Результат.Вставить("БезУчетаАвторегистрации", БезУчетаАвторегистрации);
	Результат.Вставить("Данные", Данные);
	Результат.Вставить("ИмяТаблицы", ИмяТаблицы);
	
	Результат.Вставить("СтруктураИменМетаданных",           СтруктураИменМетаданных);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеЗапуститьНаКлиенте(ПараметрыФоновогоЗадания)
	ДлительнаяОперацияЗапущена = Истина;
	ВидДлительнойОперации = ?(ПараметрыФоновогоЗадания.Команда, Истина, Ложь);
	ПодключитьОбработчикОжидания("СтраницаДлительнойОперации", 0.1, Истина);
	Результат = ФоновоеЗаданиеЗапуститьНаСервере(ПараметрыФоновогоЗадания);
	Если Результат = Неопределено Тогда
		ДлительнаяОперацияЗапущена = Ложь;
		ТекстПредупреждения = НСтр("ru = 'При запуске фонового задания с целью изменения регистрации произошла ошибка.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	ОбщийМодульДлительныеОперацииКлиент = ОбщийМодульДлительныеОперацииКлиент();
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ОбщийМодульДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания  = Ложь;
		ПараметрыОжидания.ВыводитьСообщения     = Истина;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеФоновогоЗадания", ЭтотОбъект);
		ОбщийМодульДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
	Иначе
		ФоновоеЗаданиеРезультатВыполнения = Результат;
		ПодключитьОбработчикОжидания("РезультатВыполненияФоновогоЗадания", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗапуститьНаСервере(ПараметрыФоновогоЗадания)
	
	МодульДлительныеОперации = ОбщийМодульДлительныеОперации();
	ПараметрыВыполнения = МодульДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ДополнительныйРезультат = Ложь;
	
	Если ПараметрыФоновогоЗадания.Свойство("ДанныеАдрес") Тогда
		// Передан адрес хранения данных.
		Результат = ПолучитьИзВременногоХранилища(ПараметрыФоновогоЗадания.ДанныеАдрес);
		Результат= Результат[Результат.ВГраница()];
		Данные = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		ПараметрыФоновогоЗадания.Вставить("Данные", Данные);
	КонецЕсли;
	ИмяПроцедуры = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя() + ".МодульОбъекта.ВыполнитьИзменениеРегистрации";
	Результат = МодульДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыФоновогоЗадания, ПараметрыВыполнения);
	ФоновоеЗаданиеИдентификатор  = Результат.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = Результат.АдресРезультата;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на общий модуль "ДлительныеОперацииКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль - общий модуль "ДлительныеОперацииКлиент".
//
&НаКлиенте
Функция ОбщийМодульДлительныеОперацииКлиент()
	
	// Вызов ВычислитьВБезопасномРежиме не требуется, т.к. для вычисления передается строковый литерал.
	Модуль = Вычислить("ДлительныеОперацииКлиент");
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение НСтр("ru = 'Общий модуль ""ДлительныеОперацииКлиент"" не найден.'");
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

// Возвращает ссылку на общий модуль "ДлительныеОперации".
//
// Возвращаемое значение:
//  ОбщийМодуль - общий модуль "ДлительныеОперации".
//
&НаСервереБезКонтекста
Функция ОбщийМодульДлительныеОперации()

	Если Метаданные.ОбщиеМодули.Найти("ДлительныеОперации") <> Неопределено Тогда
		// Вызов ВычислитьВБезопасномРежиме не требуется, т.к. для вычисления передается строковый литерал.
		Модуль = Вычислить("ДлительныеОперации");
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение НСтр("ru = 'Общий модуль ""ДлительныеОперации"" не найден.'");
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

&НаСервере
Функция ДобавитьРегистрациюНаСервере(БезУчетаАвторегистрации, Добавляемые, ИмяТаблицы = Неопределено)
	ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрации(Истина, БезУчетаАвторегистрации, Добавляемые, ИмяТаблицы);
	Возврат ЭтотОбъект().ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
КонецФункции

&НаКлиенте
Процедура СообщитьОРезультатахРегистрации(Результаты)
	Команда = Результаты.Команда;
	Если ТипЗнч(Команда) = Тип("Булево") Тогда
		Если Команда Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Регистрация изменений:'");
			ТекстПредупреждения = НСтр("ru = 'Зарегистрировано %1 изменений из %2 '");
		Иначе
			ЗаголовокПредупреждения = НСтр("ru = 'Отмена регистрации:'");
			ТекстПредупреждения = НСтр("ru = 'Отменена регистрация %1 изменений.'");
		КонецЕсли;
	Иначе
		ЗаголовокПредупреждения = НСтр("ru = 'Изменение номера сообщения:'");
		ТекстПредупреждения = НСтр("ru = 'Номер сообщения изменен на %3
		                           |у %1 объекта(ов)'");
	КонецЕсли;
	
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", Формат(Результаты.Успешно, "ЧН=0;"));
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%2", Формат(Результаты.Всего, "ЧН=0;"));
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%3", Команда);
	
	Предупреждением = Результаты.Всего <> Результаты.Успешно;
	Если Предупреждением Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
	Иначе
		ПоказатьОповещениеПользователя(ЗаголовокПредупреждения,
			,
			ТекстПредупреждения,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьРегистрациюВСписокОтбор()
	ТекИмяФормы = ИмяЭтойФормы + "Форма.ВыборОбъектовОтбором";
	ТекПараметры = Новый Структура("ДействиеВыбора, ИмяТаблицы", 
		Истина,
		СписокСсылокИмяТаблицы);
	ОткрытьФорму(ТекИмяФормы, ТекПараметры, Элементы.СписокСсылок);
КонецПроцедуры

&НаКлиенте
Процедура СписокСсылокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораДанных(Элемент, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДанных(ТаблицаФормы, ВыбранноеЗначение)
	
	Ссылка = Неопределено;
	Тип    = ТипЗнч(ВыбранноеЗначение);
	
	Если Тип = Тип("Структура") Тогда
		Если Не (ВыбранноеЗначение.Свойство("ИмяТаблицы")
			И ВыбранноеЗначение.Свойство("ДействиеВыбора")
			И ВыбранноеЗначение.Свойство("ДанныеВыбора")) Тогда
			// Ожидаем структуру в заданном формате.
			Возврат;
		КонецЕсли;
		ИмяТаблицы = ВыбранноеЗначение.ИмяТаблицы;
		Действие   = ВыбранноеЗначение.ДействиеВыбора;
		Данные     = ВыбранноеЗначение.ДанныеВыбора;
	Иначе
		ИмяТаблицы = Неопределено;
		Действие = Истина;
		Если Тип = Тип("Массив") Тогда
			Данные = ВыбранноеЗначение;
		Иначе		
			Данные = Новый Массив;
			Данные.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		Если Данные.Количество() = 1 Тогда
			Ссылка = Данные[0];
		КонецЕсли;
	КонецЕсли;
	
	Если Действие Тогда
		Результат = ДобавитьРегистрациюНаСервере(Истина, Данные, ИмяТаблицы);
		
		ТаблицаФормы.Обновить();
		ЗаполнитьКоличествоРегистрацийВДереве();
		ОбновитьСодержимоеСтраницы(ТекущаяСтрокаМетаданных);
		СообщитьОРезультатахРегистрации(Результат);
		
		ТаблицаФормы.ТекущаяСтрока = Ссылка;
		Возврат;
	КонецЕсли;
	
	Если Ссылка = Неопределено Тогда
		Текст = НСтр("ru = 'Отменить регистрацию выбранных объектов?'"); 
	Иначе
		Текст = НСтр("ru = 'Отменить регистрацию ""%2""?'"); 
	КонецЕсли;
		
	Текст = СтрЗаменить(Текст, "%2", Ссылка);
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение'");
		
	ДополнительныеПараметры = ДополнительныеПараметрыОбработкиВыбораДанных();
	ДополнительныеПараметры.Действие     = Действие;
	ДополнительныеПараметры.ТаблицаФормы = ТаблицаФормы;
	ДополнительныеПараметры.Данные       = Данные;
	ДополнительныеПараметры.ИмяТаблицы   = ИмяТаблицы;
	ДополнительныеПараметры.Ссылка       = Ссылка;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , ,ЗаголовокВопроса);
КонецПроцедуры

// Обработчик оповещения продолжения диалога.
//
// Параметры:
//   РезультатВопроса -КодВозвратаДиалога
//   ДополнительныеПараметры - см. ДополнительныеПараметрыОбработкиВыбораДанных
//
&НаКлиенте
Процедура ОбработкаВыбораДанныхЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоФайловаяБаза Тогда
		ПараметрыФоновогоЗадания = ПодготовитьПараметрыИзмененияРегистрации(Ложь, Истина, ДополнительныеПараметры.Данные, 
										ДополнительныеПараметры.ИмяТаблицы);
		ФоновоеЗаданиеЗапуститьНаКлиенте(ПараметрыФоновогоЗадания);
	Иначе
		
		Результат = УдалитьРегистрациюНаСервере(Истина, ДополнительныеПараметры.Данные, ДополнительныеПараметры.ИмяТаблицы);
	
		ДополнительныеПараметры.ТаблицаФормы.Обновить();
		ЗаполнитьКоличествоРегистрацийВДереве();
		ОбновитьСодержимоеСтраницы(ТекущаяСтрокаМетаданных);
		СообщитьОРезультатахРегистрации(Результат);
	КонецЕсли;
	
	ДополнительныеПараметры.ТаблицаФормы.ТекущаяСтрока = ДополнительныеПараметры.Ссылка;
КонецПроцедуры

// Возвращаемое значение:
//   Структура - дополнительные параметры:
//     * Действие - Булево
//     * ТаблицаФормы - ТаблицаФормы
//     * Данные - Произвольный
//     * ИмяТаблицы - Строка
//     * Ссылка - ЛюбаяСсылка
//
&НаКлиенте
Функция ДополнительныеПараметрыОбработкиВыбораДанных()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие");
	ДополнительныеПараметры.Вставить("ТаблицаФормы");
	ДополнительныеПараметры.Вставить("Данные");
	ДополнительныеПараметры.Вставить("ИмяТаблицы");
	ДополнительныеПараметры.Вставить("Ссылка");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьРегистрациюВСписокСсылок(ЭтоПодбор = Ложь)
	ТекИмяФормы = СписокСсылокИмяТаблицы + ".ФормаВыбора";
	ТекПараметры = Новый Структура();
	ТекПараметры.Вставить("РежимВыбора", Истина);
	ТекПараметры.Вставить("МножественныйВыбор", Истина);
	ТекПараметры.Вставить("ЗакрыватьПриВыборе", ЭтоПодбор);
	ТекПараметры.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);

	ОткрытьФорму(ТекИмяФормы, ТекПараметры, Элементы.СписокСсылок);
КонецПроцедуры

&НаСервере
Функция КонтрольСсылокДляВыбораЗапросом(Адрес)
	
	Результат = ?(Адрес = Неопределено, Неопределено, ПолучитьИзВременногоХранилища(Адрес));
	Если ТипЗнч(Результат) = Тип("Массив") Тогда 
		Результат = Результат[Результат.ВГраница()];	
		Если Результат.Колонки.Найти("Ссылка") = Неопределено Тогда
			Возврат НСтр("ru = 'В последнем результате запроса отсутствует колонка ""Ссылка""'");
		КонецЕсли;
	Иначе		
		Возврат НСтр("ru = 'Ошибка получения данных результата запроса'");
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаКлиенте
Процедура ДобавитьРегистрациюКонстантыВСписке()
	ТекИмяФормы = ИмяЭтойФормы + "Форма.ВыборКонстанты";
	ТекПараметры = Новый Структура();
	ТекПараметры.Вставить("УзелОбмена",Неопределено);
	ТекПараметры.Вставить("МассивИменМетаданных",СтруктураИменМетаданных.Константы);
	ТекПараметры.Вставить("МассивПредставлений",СтруктураПредставленийМетаданных.Константы);
	ТекПараметры.Вставить("МассивАвторегистрации",СтруктураАвторегистрацииМетаданных.Константы);
	ОткрытьФорму(ТекИмяФормы, ТекПараметры, Элементы.СписокКонстант);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРегистрациюВНаборЗаписейОтбор()
	ТекИмяФормы = ИмяЭтойФормы + "Форма.ВыборОбъектовОтбором";
	ТекПараметры = Новый Структура("ДействиеВыбора, ИмяТаблицы", 
		Истина,
		СписокНаборовЗаписейИмяТаблицы);
	ОткрытьФорму(ТекИмяФормы, ТекПараметры, Элементы.СписокНаборовЗаписей);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрациюВыделенныхОбъектов(БезУчетаАвторегистрации = Истина)
	
	Данные = ПолучитьВыбранныеИменаМетаданных(БезУчетаАвторегистрации);
	Количество = Данные.МетаИмена.Количество();
	Если Количество = 0 Тогда
		Данные = ПолучитьИменаМетаданныхТекущейСтроки(БезУчетаАвторегистрации);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Отменить регистрацию %1 для выгрузки ?
	                 |
	                 |Изменение регистрации большого количества объектов может занять продолжительное время.'");
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение'");
	
	Текст = СтрЗаменить(Текст, "%1", Данные.Описание);
	
	Оповещение = Новый ОписаниеОповещения("УдалитьРегистрациюВыделенныхОбъектовЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("МетаИмена", Данные.МетаИмена);
	Оповещение.ДополнительныеПараметры.Вставить("БезУчетаАвторегистрации", БезУчетаАвторегистрации);
	
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
КонецПроцедуры

// Обработчик оповещения продолжения диалога.
&НаКлиенте
Процедура УдалитьРегистрациюВыделенныхОбъектовЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоФайловаяБаза Тогда
		ПараметрыФоновогоЗадания = ПодготовитьПараметрыИзмененияРегистрации(Ложь, ДополнительныеПараметры.БезУчетаАвторегистрации, 
										ДополнительныеПараметры.МетаИмена);
		ФоновоеЗаданиеЗапуститьНаКлиенте(ПараметрыФоновогоЗадания);
	Иначе
		СообщитьОРезультатахРегистрации(УдалитьРегистрациюНаСервере(ДополнительныеПараметры.БезУчетаАвторегистрации, 
				ДополнительныеПараметры.МетаИмена));
			
		ЗаполнитьКоличествоРегистрацийВДереве();
		ОбновитьСодержимоеСтраницы(ТекущаяСтрокаМетаданных);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция УдалитьРегистрациюНаСервере(БезУчетаАвторегистрации, Удаляемые, ИмяТаблицы = Неопределено)
	ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрации(Ложь, БезУчетаАвторегистрации, Удаляемые, ИмяТаблицы);
	Возврат ЭтотОбъект().ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
КонецФункции

&НаКлиенте 
Процедура УдалитьРегистрациюВСпискеОтбор()
	ТекИмяФормы = ИмяЭтойФормы + "Форма.ВыборОбъектовОтбором";
	ТекПараметры = Новый Структура("ДействиеВыбора, ИмяТаблицы", 
		Ложь,
		СписокСсылокИмяТаблицы);
	ОткрытьФорму(ТекИмяФормы, ТекПараметры, Элементы.СписокСсылок);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрациюИзСпискаСсылок()
	
	Элемент = Элементы.СписокСсылок;
	
	СписокУдаления = Новый Массив;
	Для Каждого Строка Из Элемент.ВыделенныеСтроки Цикл
		Данные = Элемент.ДанныеСтроки(Строка); // см. ТекущиеДанныеСпискаСсылок
		СписокУдаления.Добавить(Данные.Ссылка);
	КонецЦикла;
	
	Количество = СписокУдаления.Количество();
	Если Количество = 0 Тогда
		Возврат;
	ИначеЕсли Количество = 1 Тогда
		Текст = НСтр("ru = 'Отменить регистрацию ""%2""?'"); 
	Иначе
		Текст = НСтр("ru = 'Отменить регистрацию выбранных объектов?'"); 
	КонецЕсли;
	Текст = СтрЗаменить(Текст, "%2", СписокУдаления[0]);
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение'");
	
	Оповещение = Новый ОписаниеОповещения("УдалитьРегистрациюИзСпискаСсылокЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("СписокУдаления", СписокУдаления);
	
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
КонецПроцедуры

// Обработчик оповещения продолжения диалога.
&НаКлиенте 
Процедура УдалитьРегистрациюИзСпискаСсылокЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СообщитьОРезультатахРегистрации(УдалитьРегистрациюНаСервере(Истина, ДополнительныеПараметры.СписокУдаления));
		
	ЗаполнитьКоличествоРегистрацийВДереве();
	ОбновитьСодержимоеСтраницы(ТекущаяСтрокаМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрациюКонстантыВСписке()
	
	Элемент = Элементы.СписокКонстант;
	
	СписокПредставлений = Новый Массив;
	СписокИмен          = Новый Массив;
	Для Каждого Строка Из Элемент.ВыделенныеСтроки Цикл
		Данные = Элемент.ДанныеСтроки(Строка);
		СписокПредставлений.Добавить(Данные.Наименование);
		СписокИмен.Добавить(Данные.МетаПолноеИмя);
	КонецЦикла;
	
	Количество = СписокИмен.Количество();
	Если Количество = 0 Тогда
		Возврат;
	ИначеЕсли Количество = 1 Тогда
		Текст = НСтр("ru = 'Отменить регистрацию ""%2""?'"); 
	Иначе
		Текст = НСтр("ru = 'Отменить регистрацию выбранных констант?'"); 
	КонецЕсли;
	Текст = СтрЗаменить(Текст, "%2", СписокПредставлений[0]);
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение'");
	
	Оповещение = Новый ОписаниеОповещения("УдалитьРегистрациюКонстантыВСпискеЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("СписокИмен", СписокИмен);
	
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , ,ЗаголовокВопроса);
КонецПроцедуры

// Обработчик оповещения продолжения диалога.
&НаКлиенте
Процедура УдалитьРегистрациюКонстантыВСпискеЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	СообщитьОРезультатахРегистрации(УдалитьРегистрациюНаСервере(Истина, ДополнительныеПараметры.СписокИмен));
		
	ЗаполнитьКоличествоРегистрацийВДереве();
	ОбновитьСодержимоеСтраницы(ТекущаяСтрокаМетаданных);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрациюВНабореЗаписей()  
	
	СтруктураДанных = "";
	ИменаКлючей = МассивИменКлючейНабораЗаписей(СписокНаборовЗаписейИмяТаблицы);
	Для Каждого Имя Из ИменаКлючей Цикл
		СтруктураДанных = СтруктураДанных +  "," + Имя;
	КонецЦикла;
	СтруктураДанных = Сред(СтруктураДанных, 2);
	
	Данные = Новый Массив;
	Элемент = Элементы.СписокНаборовЗаписей;
	Для Каждого Строка Из Элемент.ВыделенныеСтроки Цикл
		ТекДанные = Элемент.ДанныеСтроки(Строка);
		ДанныеСтроки = Новый Структура;  
		
		ДанныеСтроки.Вставить("ИдентификаторКлюча", ТекДанные.ИдентификаторКлюча);
		ДанныеСтроки.Вставить("ТипКлюча", ТекДанные.ТипКлюча);
		ДанныеСтроки.Вставить("Объект", ТекДанные.Объект);
		ДанныеСтроки.Вставить("Граница", ТекДанные.Граница);
		
		Данные.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Выбор = Новый Структура();
	Выбор.Вставить("ИмяТаблицы",СписокНаборовЗаписейИмяТаблицы);
	Выбор.Вставить("ДанныеВыбора",Данные);
	Выбор.Вставить("ДействиеВыбора",Ложь);
	Выбор.Вставить("СтруктураПолей",СтруктураДанных);
	ОбработкаВыбораДанных(Элементы.СписокНаборовЗаписей, Выбор);
КонецПроцедуры

&НаСервере
Функция МассивИменКлючейНабораЗаписей(ИмяТаблицы, ПрефиксИмен = "")
	Результат = Новый Массив;
	Измерения = ЭтотОбъект().ИзмеренияНабораЗаписей(ИмяТаблицы);
	Если Измерения <> Неопределено Тогда
		Для Каждого Строка Из Измерения Цикл
			Результат.Добавить(ПрефиксИмен + Строка.Имя);
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции	

&НаКлиенте
Процедура СтраницаДлительнойОперации()
	Если НЕ ДлительнаяОперацияЗапущена Тогда
		Возврат;
	КонецЕсли;
	Если ВидДлительнойОперации Тогда
		СтатусОперации = НСтр("ru = 'Выполняется регистрация изменений. Пожалуйста, подождите.'");
	Иначе
		СтатусОперации = НСтр("ru = 'Выполняется отмена регистрации изменений. Пожалуйста, подождите.'");
	КонецЕсли;
	Элементы.СтатусДлительнойОперации.Заголовок = СтатусОперации;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Ожидание;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗаданиеРезультатВыполнения = Результат;
	РезультатВыполненияФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполненияФоновогоЗадания()
	
	ФоновоеЗаданиеПолучитьРезультатНаСервере();
	ДлительнаяОперацияЗапущена = Ложь;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Основная;
	ТекущийЭлемент = Элементы.ДеревоМетаданных;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СообщениеОбОшибке;
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Не ФоновоеЗаданиеРезультатВыполнения = Неопределено Тогда
		Если ФоновоеЗаданиеРезультатВыполнения.Свойство("ДополнительныеДанныеРезультата")
			И ФоновоеЗаданиеРезультатВыполнения.ДополнительныеДанныеРезультата.Свойство("Команда") Тогда
			
			СообщитьОРезультатахРегистрации(ФоновоеЗаданиеРезультатВыполнения.ДополнительныеДанныеРезультата);
			ЗаполнитьКоличествоРегистрацийВДереве();
			ОбновитьСодержимоеСтраницы(ТекущаяСтрокаМетаданных);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеПолучитьРезультатНаСервере()
	
	Если ФоновоеЗаданиеРезультатВыполнения <> Неопределено Тогда
		ФоновоеЗаданиеРезультатВыполнения.Вставить("ДополнительныеДанныеРезультата", Новый Структура);
		СообщениеОбОшибке = "";
		ТиповоеПредставлениеОшибки = НСтр("ru = 'При изменении регистрации произошла ошибка. Подробности см. в журнале регистрации'");
		
		Если ФоновоеЗаданиеРезультатВыполнения.Статус = "Ошибка" Тогда
			СообщениеОбОшибке = ФоновоеЗаданиеРезультатВыполнения.ПодробноеПредставлениеОшибки;
		Иначе
			РезультатВыполненияВФоне = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
			
			Если РезультатВыполненияВФоне = Неопределено Тогда
				СообщениеОбОшибке = ТиповоеПредставлениеОшибки;
			Иначе
				ФоновоеЗаданиеРезультатВыполнения.ДополнительныеДанныеРезультата = РезультатВыполненияВФоне;
				УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор  = Неопределено;
	
КонецПроцедуры

#КонецОбласти
