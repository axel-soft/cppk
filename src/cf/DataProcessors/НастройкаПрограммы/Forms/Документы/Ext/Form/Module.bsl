
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПриСозданииНаСервереРедакцииКонфигурации();
	
	ИспользованиеГрифовДоступаБылоИзменено = Ложь;
	
	ИспользоватьУчетПоОрганизациям = НаборКонстант.ИспользоватьУчетПоОрганизациям;
	ИспользоватьВопросыДеятельности = НаборКонстант.ИспользоватьВопросыДеятельности;
	ВестиУчетОбращенийГраждан = НаборКонстант.ВестиУчетОбращенийГраждан;
	ИспользоватьНоменклатуруДел = НаборКонстант.ИспользоватьНоменклатуруДел;
	
	Элементы.РазрешитьРучноеИзменениеСостоянияДокументов.Доступность = НаборКонстант.ИспользоватьСостоянияДокументов;
	Элементы.ОграничиватьДоступностьПолейПоСостоянию.Доступность = НаборКонстант.ИспользоватьСостоянияДокументов;
	
	ИспользоватьГрифыДоступа = НаборКонстант.ИспользоватьГрифыДоступа;
	ИспользоватьГрифыДоступаНачальноеЗначение = НаборКонстант.ИспользоватьГрифыДоступа;
	Если Не ИспользоватьГрифыДоступа Тогда
		Элементы.ГрифДоступаПоУмолчанию.Доступность = Ложь;
		Элементы.ГрифДоступаПоУмолчанию.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Элементы.СписокРасширенийСканКопийОригиналов.Доступность = НаборКонстант.ВестиУчетСканКопийОригиналовДокументов;
	Элементы.ГруппаРегламентированнаяОтчетность.Видимость = НаборКонстант.ВестиУчетОбращенийГраждан
		И НаборКонстант.ИспользоватьУчетПоОрганизациям;
	Элементы.КлассификаторОбращенийГраждан.Видимость = НаборКонстант.РегламентированныйУчетОбращений;
	Элементы.ГруппаРегламентированныйУчетОбращений.Видимость = НаборКонстант.РегламентированныйУчетОбращений;
	
	Элементы.КоличествоУровнейСвязейДляОтображенияВДокументе.Доступность = НаборКонстант.ИспользоватьСвязиОбъектов;
	
	РаботаСФормамиХолдинг.ИзменитьФормуНастроекПрограммы(ЭтотОбъект);
	
	Если ПолучитьФункциональнуюОпцию("ИнтеграцияС1САрхивом") Тогда
		Элементы.ОтсрочкаУдаленияДанныхУничтоженныхДокументов.Заголовок
			= НСтр("ru = 'Отсрочка удаления данных уничтоженных
			|или переданных в 1С:Архив документов'");
	Иначе
		Элементы.ОтсрочкаУдаленияДанныхУничтоженныхДокументов.Заголовок
			= НСтр("ru = 'Отсрочка удаления данных уничтоженных документов'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеСозданиеВопросаДеятельности(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВопросДеятельности = СоздатьВопросДеятельности(Результат);
	ПараметрыЗаписи.Вставить("СозданВопросДеятельности", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВопросаДеятельности(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ВопросДеятельности = ВыбранноеЗначение.Значение;
	ПараметрыЗаписи.Вставить("ВопросДеятельностиВыбран", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеСозданиеПапкиДокументов(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПапкаДокументов = СоздатьПапкуДокументов(Результат);
	ПараметрыЗаписи.Вставить("СозданаПапкаДокументов", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораПапкиДокументов(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ПапкаДокументов = ВыбранноеЗначение.Значение;
	ПараметрыЗаписи.Вставить("ПапкаДокументовВыбрана", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// включен учет по организациям
	Если Не ИспользоватьУчетПоОрганизациям И НаборКонстант.ИспользоватьУчетПоОрганизациям Тогда 
		
		ЗаполнитьВестиУчетПоОрганизациям();
				
	КонецЕсли;
	
	// включен учет вопросов деятельности
	Если Не ИспользоватьВопросыДеятельности И НаборКонстант.ИспользоватьВопросыДеятельности Тогда 
		Если НужноЗаполнитьВопросДеятельности() Тогда  
			
			ВопросыДеятельности = МассивВопросовДеятельности();
			Если ВопросыДеятельности.Количество() = 0 Тогда // создание вопроса деятельности
				Если Не ПараметрыЗаписи.Свойство("СозданВопросДеятельности") Тогда
					Наименование = "";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеСозданиеВопросаДеятельности",
						ЭтотОбъект,
						ПараметрыЗаписи);
					ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(Наименование, 
						НСтр("ru = 'Укажите вопрос деятельности'"), 
						НСтр("ru = 'Введите наименование вопроса деятельности, к которому будут отнесены существующие документы:'"), 
						150, 
						ОписаниеОповещения);
					Отказ = Истина;
					Возврат;
					
				КонецЕсли;
				
			ИначеЕсли ВопросыДеятельности.Количество() = 1 Тогда 
				ВопросДеятельности = ВопросыДеятельности[0];
				
			ИначеЕсли Не ПараметрыЗаписи.Свойство("ВопросДеятельностиВыбран") Тогда
				СписокВопросов = Новый СписокЗначений;
				СписокВопросов.ЗагрузитьЗначения(ВопросыДеятельности);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВыбораВопросаДеятельности",
					ЭтотОбъект,
					ПараметрыЗаписи);
					
				СписокВопросов.ПоказатьВыборЭлемента(
					ОписаниеОповещения, НСтр("ru = 'Укажите вопрос деятельности, к которому отнести существующие документы'"));
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется включение учета по вопросам деятельности. Пожалуйста, подождите...'"));
			ЗаполнитьВопросДеятельности(ВопросДеятельности);
			Состояние(НСтр("ru = 'Использование учета по вопросам деятельности включено.'"));
			
		КонецЕсли;
	КонецЕсли;
	
	
	// включен учет по папкам документов
	Если НаборКонстант.ИспользоватьПапкиДокументов Тогда 
		Если НужноЗаполнитьПапкиДокументов() Тогда  
			
			ПапкиДокументов = МассивПапокДокументов();
			Если ПапкиДокументов.Количество() = 0 Тогда // создание папки документов
				Если Не ПараметрыЗаписи.Свойство("СозданаПапкаДокументов") Тогда
					Наименование = "";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеСозданиеПапкиДокументов",
						ЭтотОбъект,
						ПараметрыЗаписи);
					ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(Наименование, 
						НСтр("ru = 'Укажите папку документов'"), 
						НСтр("ru = 'Введите наименование папки, к которой будут отнесены существующие документы:'"), 
						150, 
						ОписаниеОповещения);
					Отказ = Истина;
					Возврат;
					
				КонецЕсли;
				
			ИначеЕсли ПапкиДокументов.Количество() = 1 Тогда 
				ПапкаДокументов = ПапкиДокументов[0];
				
			ИначеЕсли Не ПараметрыЗаписи.Свойство("ПапкаДокументовВыбрана") Тогда
				СписокПапокДокументов = Новый СписокЗначений;
				СписокПапокДокументов.ЗагрузитьЗначения(ПапкиДокументов);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВыбораПапкиДокументов",
					ЭтотОбъект,
					ПараметрыЗаписи);
					
				СписокПапокДокументов.ПоказатьВыборЭлемента(
					ОписаниеОповещения, НСтр("ru = 'Укажите папку, к которой отнести существующие документы'"));
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется включение учета по папкам документов. Пожалуйста, подождите...'"));
			ЗаполнитьПапкуДокументов(ПапкаДокументов);
			Состояние(НСтр("ru = 'Использование учета по папкам документов включено.'"));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
	Если ИспользованиеГрифовДоступаБылоИзменено И ИспользоватьГрифыДоступа Тогда 
		ИспользованиеГрифовДоступаБылоИзменено = Ложь;
		Состояние(НСтр("ru = 'Идет обновление грифов доступа документов. 
			|Пожалуйста, подождите...'"));
		КорректировкаГрифовДоступа();
		Состояние(НСтр("ru = 'Обновление грифов доступа завершено.'"));
	КонецЕсли;
	
	ИспользованиеГрифовДоступаБылоИзменено = Ложь;
	
	// изменен учет обращений граждан
	Если Не ВестиУчетОбращенийГраждан И НаборКонстант.ВестиУчетОбращенийГраждан Тогда 
		
		Состояние(НСтр("ru = 'Выполняется включение учета обращений граждан. Пожалуйста, подождите...'"));
		ПереключитьУчетОбращенийГраждан();
		Состояние(НСтр("ru = 'Использование учета обращений граждан включено.'"));
		
	ИначеЕсли ВестиУчетОбращенийГраждан И Не НаборКонстант.ВестиУчетОбращенийГраждан Тогда 
		
		Состояние(НСтр("ru = 'Выполняется выключение учета обращений граждан. Пожалуйста, подождите...'"));
		ПереключитьУчетОбращенийГраждан();
		Состояние(НСтр("ru = 'Использование учета обращений граждан выключено.'"));
		
	КонецЕсли;
	
	// изменено использование номенклатуры дел
	Если Не ИспользоватьНоменклатуруДел И НаборКонстант.ИспользоватьНоменклатуруДел Тогда 
		
		Состояние(НСтр("ru = 'Выполняется включение использования номенклатуры дел. Пожалуйста, подождите...'"));
		ПереключитьИспользованиеНоменклатурыДел();
		Состояние(НСтр("ru = 'Использование номенклатуры дел включено.'"));
		
	ИначеЕсли ИспользоватьНоменклатуруДел И Не НаборКонстант.ИспользоватьНоменклатуруДел Тогда 
		
		Состояние(НСтр("ru = 'Выполняется выключение использования номенклатуры дел. Пожалуйста, подождите...'"));
		ПереключитьИспользованиеНоменклатурыДел();
		Состояние(НСтр("ru = 'Использование номенклатуры дел выключено.'"));
		
	КонецЕсли;
	
	Если ХранениеВТомахНаДискеВключено Тогда
		Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение2") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжение2",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ПоказатьПредупреждение(
				ОписаниеОповещения,
				НСтр("ru = 'Включено хранение файлов в томах на диске, но тома еще не указаны.
					|Программа будет продолжать сохранять файлы в информационной базе до тех пор, пока не будет указан хотя бы один том хранения файлов.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьРаспознаваниеВключено Тогда
		Если Не ПараметрыЗаписи.Свойство("ПоказанВопрос3") Тогда
			Текст = НСтр("ru = 'Включено распознавание. 
			|Для работы распознавания необходимо установить бесплатную программу CuneiForm.
			|Поставить в очередь на распознавание все существующие файлы изображений?'");		
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжение3",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет); 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение1(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение1", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение2(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение2", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение3(Результат, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказанВопрос3", Истина);
	Если Результат = КодВозвратаДиалога.Да Тогда
		Состояние(НСтр("ru = 'Формируется очередь распознавания изображений. Пожалуйста подождите...'"));				
		ЧислоКартинок = ПоставитьВсеКартинкиВОчередьРаспознавания();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Очередь распознавания изображений сформирована (файлов: %1).'"), ЧислоКартинок);
		Состояние(ТекстСообщения);		
	КонецЕсли;
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Константы.ИспользоватьГрифыДоступа.Установить(ИспользоватьГрифыДоступа);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьКатегорииДанныхПриИзменении(Элемент)
	
	Если НаборКонстант.ИспользоватьКатегорииДанных = Ложь Тогда
		НаборКонстант.ИспользоватьАвтоматическуюКатегоризациюДанных = Ложь;
		НаборКонстант.ИспользоватьПроверкуКатегорий = Ложь;
		Элементы.ИспользоватьАвтоматическуюКатегоризациюДанных.Доступность = Ложь;
		Элементы.ПроверкаКатегорий.Доступность = Ложь;
	Иначе
		НаборКонстант.ИспользоватьАвтоматическуюКатегоризациюДанных = Истина;
		НаборКонстант.ИспользоватьПроверкуКатегорий = Истина;
		Элементы.ИспользоватьАвтоматическуюКатегоризациюДанных.Доступность = Истина;
		Элементы.ПроверкаКатегорий.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГрифыДоступаПриИзменении(Элемент)
	
	ИспользованиеГрифовДоступаБылоИзменено = Истина;
	Модифицированность = Истина;
	Если Не ИспользоватьГрифыДоступа Тогда
		Элементы.ГрифДоступаПоУмолчанию.Доступность = Ложь;
		Элементы.ГрифДоступаПоУмолчанию.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ГрифДоступаПоУмолчанию.Доступность = Истина;
		Элементы.ГрифДоступаПоУмолчанию.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	СохранитьКонстантуИспользованияГрифовДоступа(ИспользоватьГрифыДоступа);
	ОбновитьИнтерфейс();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСостоянияДокументовПриИзменении(Элемент)
	
	Элементы.РазрешитьРучноеИзменениеСостоянияДокументов.Доступность = НаборКонстант.ИспользоватьСостоянияДокументов;
	Элементы.ОграничиватьДоступностьПолейПоСостоянию.Доступность = НаборКонстант.ИспользоватьСостоянияДокументов;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетПоОрганизациямПриИзмененииПродолжение(Результат, Параметры) Экспорт
	
	НаборКонстант.ИспользоватьУчетПоОрганизациям = Результат = КодВозвратаДиалога.Да;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСканКопийОригиналовДокументовПриИзменении(Элемент)
	
	Элементы.СписокРасширенийСканКопийОригиналов.Доступность = НаборКонстант.ВестиУчетСканКопийОригиналовДокументов;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетПоОрганизациямПриИзменении(Элемент)
	
	Если Не НаборКонстант.ИспользоватьУчетПоОрганизациям Тогда
		НаборКонстант.РегламентированныйУчетОбращений = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаРегламентированнаяОтчетность.Видимость = НаборКонстант.ВестиУчетОбращенийГраждан
		И НаборКонстант.ИспользоватьУчетПоОрганизациям;
	Элементы.ГруппаРегламентированныйУчетОбращений.Видимость = НаборКонстант.ИспользоватьУчетПоОрганизациям;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОбращенийГражданПриИзменении(Элемент)
	
	Если Не НаборКонстант.ВестиУчетОбращенийГраждан Тогда 
		НаборКонстант.РегламентированныйУчетОбращений = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаРегламентированнаяОтчетность.Видимость = НаборКонстант.ВестиУчетОбращенийГраждан
		И НаборКонстант.ИспользоватьУчетПоОрганизациям;
	Элементы.КлассификаторОбращенийГраждан.Видимость = НаборКонстант.РегламентированныйУчетОбращений;
	Элементы.ГруппаРегламентированныйУчетОбращений.Видимость = НаборКонстант.РегламентированныйУчетОбращений;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентированнуюОтчетностьПриИзменении(Элемент)
	
	Если Не НаборКонстант.РегламентированныйУчетОбращений Тогда 
		НаборКонстант.ДатаПроверкиНаличияВопросов = Неопределено;
	ИначеЕсли НаборКонстант.РегламентированныйУчетОбращений Тогда 
		НаборКонстант.ДатаПроверкиНаличияВопросов = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	Элементы.КлассификаторОбращенийГраждан.Видимость = НаборКонстант.РегламентированныйУчетОбращений;
	Элементы.ГруппаРегламентированныйУчетОбращений.Видимость = НаборКонстант.РегламентированныйУчетОбращений;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСвязиДокументовПриИзменении(Элемент)
	
	Элементы.КоличествоУровнейСвязейДляОтображенияВДокументе.Доступность = НаборКонстант.ИспользоватьСвязиОбъектов;
	 
КонецПроцедуры

&НаКлиенте
Процедура СрокУдаленияДанныхУничтоженныхДокументовПриИзменении(Элемент)
	
	Если НаборКонстант.ОтсрочкаУдаленияДанныхУничтоженныхДокументов = 0 Тогда
		 НаборКонстант.ОтсрочкаУдаленияДанныхУничтоженныхДокументов = 14;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	НаборКонстант.СписокРасширенийСканКопийОригиналов = "bmp, gif, jpeg, jpg, png, tiff, tif, wmf, emf, pdf";
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторОбращений(Команда)
	
	Если Модифицированность Тогда 
		Записать()
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ЗагрузкаКлассификатораОбращенийГраждан.Форма");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПоставитьВсеКартинкиВОчередьРаспознавания()
	УстановитьПривилегированныйРежим(Истина);
	
	ЧислоКартинок = 0;
	ИспользоватьImageMagickДляРаспознаванияPDF = РаботаСФайламиВызовСервера.ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка,
		|	Файлы.ТекущаяВерсияРасширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
			Выборка.ТекущаяВерсияРасширение, ИспользоватьImageMagickДляРаспознаванияPDF,
			Перечисления.ПрограммыРаспознавания.CuneiForm);
		
		Если РасширениеПоддерживается Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз;
			Объект.ЯзыкРаспознавания = "7"; // русско-английский
			Объект.Записать();
			ЧислоКартинок = ЧислоКартинок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка,
		|	ВерсииФайлов.Расширение
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
			Выборка.Расширение, ИспользоватьImageMagickДляРаспознаванияPDF,
			Перечисления.ПрограммыРаспознавания.CuneiForm);
		
		Если РасширениеПоддерживается Тогда
			СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать;
			РегистрыСведений.ТекстыВерсийФайлов.ДобавитьСтатусРаспознавания(Выборка.Ссылка, СтатусРаспознаванияТекста);
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЧислоКартинок;
	
КонецФункции

&НаСервере
Процедура КорректировкаГрифовДоступа()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НаборКонстант.ИспользоватьГрифыДоступа Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Ссылка
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Если НаборКонстант.ИспользоватьУправлениеМероприятиями Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Мероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК Мероприятия
			|ГДЕ
			|	Мероприятия.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МероприятиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			МероприятиеОбъект.Заблокировать();
			МероприятиеОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
			МероприятиеОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКонстантуИспользованияГрифовДоступа(ИспользоватьГрифыДоступы)
	
	Константы.ИспользоватьГрифыДоступа.Установить(ИспользоватьГрифыДоступы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВестиУчетПоОрганизациям()
	
	НачатьТранзакцию();
	
	Попытка
		Запрос = Новый Запрос(
			"ВЫБРАТЬ 
			|	ВидыДокументов.Ссылка
			|ИЗ
			|	Справочник.ВидыДокументов КАК ВидыДокументов
			|ГДЕ
			|	НЕ ВидыДокументов.ВестиУчетПоОрганизациям");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИзменяемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ИзменяемыйОбъект.Заблокировать();
			ИзменяемыйОбъект.ВестиУчетПоОрганизациям = Истина;
			ИзменяемыйОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВопросДеятельности(ВопросДеятельности)
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументыПредприятия.Ссылка
			|ИЗ
			|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
			|ГДЕ
			|	ДокументыПредприятия.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВыборкаОбъект.Заблокировать();
			ВыборкаОбъект.ВопросДеятельности = ВопросДеятельности;
			ВыборкаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция НужноЗаполнитьВопросДеятельности()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция МассивВопросовДеятельности()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВопросыДеятельности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВопросыДеятельности КАК ВопросыДеятельности
		|ГДЕ
		|	НЕ ВопросыДеятельности.ЭтоГруппа";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция СоздатьВопросДеятельности(Наименование)
	
	ВопросДеятельностиОбъект = Справочники.ВопросыДеятельности.СоздатьЭлемент();
	ВопросДеятельностиОбъект.Наименование = Наименование;
	ВопросДеятельностиОбъект.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
	ВопросДеятельностиОбъект.Записать();
	Возврат ВопросДеятельностиОбъект.Ссылка;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьПапкуДокументов(ПапкаДокументов)
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументыПредприятия.Ссылка
			|ИЗ
			|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
			|ГДЕ
			|	ДокументыПредприятия.Папка = ЗНАЧЕНИЕ(Справочник.ПапкиДокументов.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВыборкаОбъект.Заблокировать();
			ВыборкаОбъект.Папка = ПапкаДокументов;
			ВыборкаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция НужноЗаполнитьПапкиДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.Папка = ЗНАЧЕНИЕ(Справочник.ПапкиДокументов.ПустаяСсылка)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция МассивПапокДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПапкиДокументов КАК ПапкиДокументов";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция СоздатьПапкуДокументов(Наименование)
	
	ПапкаДокументовОбъект = Справочники.ПапкиДокументов.СоздатьЭлемент();
	ПапкаДокументовОбъект.Наименование = Наименование;
	ПапкаДокументовОбъект.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
	ПапкаДокументовОбъект.Записать();
	Возврат ПапкаДокументовОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПереключитьУчетОбращенийГраждан()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	ВидыДокументов.ЯвляетсяОбращениемОтГраждан";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.Заблокировать();
		ВыборкаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьИспользованиеНоменклатурыДел()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	ВидыДокументов.ВестиУчетПоНоменклатуреДел";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.Заблокировать();
		ВыборкаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереРедакцииКонфигурации()	
	
	Элементы.ИспользоватьУчетПоОрганизациям.Заголовок = РедакцииКонфигурацииКлиентСервер.УчетПоОрганизациям();
		
КонецПроцедуры

#КонецОбласти