
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	КОДСлужебный.ИзменитьФормуНастроекПрограммы(ЭтотОбъект);
	РаботаСФормамиХолдинг.ИзменитьФормуНастроекПрограммы(ЭтотОбъект);
	
	ПрочитатьКонстантыСервер();
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() Тогда
		Элементы.НастроитьКОД.Доступность = ИспользоватьКОД;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Элементы.ГруппаПрефиксИЗапретРедактированияСтатейДДС.Видимость = Ложь;
		
	Иначе
		
		Элементы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Доступность = ИспользоватьСинхронизациюДанных;
		Элементы.ЗапретитьРедактированиеСтатейДвиженияДенежныхСредств.Доступность = ИспользоватьСинхронизациюДанных;
		Элементы.ЗапретитьРедактированиеТоваровИУслуг.Доступность = ИспользоватьСинхронизациюДанных;
		
	КонецЕсли;
	
	Элементы.НастроитьЭДО.Доступность = ИспользоватьОбменЭД;

	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ОбменСВнешнимиРесурсамиВ21 = Не Константы.ВнешнийОбменВ21Завершен.Получить();
	Элементы.НастроитьМиграциюИзПредыдущейВерсии.Доступность = ЗагружатьДанныеИз21;
	
	Элементы.ГруппаМЭДОНастройки.Доступность = ИспользоватьМЭДО;
	
	СсылкаНаИнструкциюСервиса1СShare = ИнтеграцияShare.СсылкаНаИнструкциюСервиса();
	ЧастиЗаголовка = Новый Массив;
	ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр(
		"ru = 'Использовать обмен документами через сервис ""1C:Share"".'")));
	ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' Подробнее.'"),, ЦветаСтиля.ГиперссылкаЦвет,,
		СсылкаНаИнструкциюСервиса1СShare));
	Элементы.ИспользоватьСервис1сShareРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступностьМиграцииС21();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И Не ЗавершениеРаботы Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		СпроситьПередЗакрытием(Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьСинхронизациюДанныхПриИзменении(Элемент)

	Элементы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Доступность = ИспользоватьСинхронизациюДанных;

	Элементы.ЗапретитьРедактированиеСтатейДвиженияДенежныхСредств.Доступность = ИспользоватьСинхронизациюДанных;
	Элементы.ЗапретитьРедактированиеТоваровИУслуг.Доступность = ИспользоватьСинхронизациюДанных;
	
	Если ИспользоватьСинхронизациюДанных Тогда
		ЗапретитьРедактированиеСтатейДвиженияДенежныхСредств = Истина;
		ЗапретитьРедактированиеТоваровИУслуг = Истина;
	Иначе
		ЗапретитьРедактированиеСтатейДвиженияДенежныхСредств = Ложь;
		ЗапретитьРедактированиеТоваровИУслуг = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИспользоватьКОДПриИзменении(Элемент)
	
	Элементы.НастроитьКОД.Доступность = ИспользоватьКОД;
	Если ИспользоватьКОД И Не ИспользоватьОтметкиВремени Тогда
		ИспользоватьОтметкиВремени = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьДанныеИз21ПриИзменении(Элемент)
	
	УстановитьКонстантуСервер("ЗагружатьДанныеИз21", ЗагружатьДанныеИз21);
	ОбновитьИнтерфейс();
	
	УстановитьВидимостьДоступностьМиграцииС21();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМЭДОПриИзменении(Элемент)
	
	Элементы.ГруппаМЭДОНастройки.Доступность = ИспользоватьМЭДО;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭДПриИзменении(Элемент)

	Элементы.НастроитьЭДО.Доступность = ИспользоватьОбменЭД;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСервис1сShareРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаИнструкциюСервиса1СShare);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьКонстантыИЗакрыть(Команда)
	
	ЗаписатьНастройки();
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьМиграциюИзПредыдущейВерсии(Команда)
	
	ОткрытьФорму("Обработка.МиграцияДанныхИзВнешнихСистемМонитор.Форма.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭДО(Команда, ПараметрыВыполненияКоманды)
	
	УстановитьКонстантуСервер("ИспользоватьОбменЭД", ИспользоватьОбменЭД);
	ОткрытьФорму("Обработка.ПанельАдминистрированияБЭД.Форма.ОбщиеНастройки",,
		ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастроитьКОД(Элемент)
	
	УстановитьКонстантуСервер("ИспользоватьКОД", ИспользоватьКОД);
	
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.КОД",,
		ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЧтениеЗаписьКонстантВРеквизитыФормы

&НаКлиенте
Асинх Процедура СпроситьПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Ответ = Ждать ВопросАсинх(
		НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьНастройки();
		Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройки();
	
	Если ИспользоватьМЭДО Тогда 
		Опции = ВыключенныеОпцииОтКоторыхЗависитМЭДО();
		Если Опции <> "" Тогда
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Одновременно с опцией ""МЭДО"" автоматически включаются другие необходимые для МЭДО опции:
				|%1'"),
				Опции);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьКонстантыСервер();
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонстантыСервер()
	
	Обработки.НастройкаПрограммы.ЗаписатьКонстантыВФорме(ЭтотОбъект, ИменаКонстант());
	
	Если ИспользоватьКОД Тогда
		КОДСервер.УстановитьИспользованиеРегламентныхЗаданийОбмена(Истина);
		Если КОДСервер.ЭтоЦентральныйУзел() Тогда
			Константы.ВыполнятьЗаданияНаКлиенте.Установить(Истина);
		КонецЕсли;
	Иначе
		КОДСервер.УстановитьИспользованиеРегламентныхЗаданийОбмена(Ложь);
	КонецЕсли;
	
	Если ИспользоватьМЭДО Тогда
		УстановитьКонстантуСервер("ИспользоватьГрифыДоступа", Истина);
		УстановитьКонстантуСервер("АвтовизуализацияЭП", Истина);
		УстановитьКонстантуСервер("ИспользоватьЭлектронныеПодписи", Истина);
		
		РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ВыполнениеОбменаМЭДО, Истина);
	Иначе
		РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ВыполнениеОбменаМЭДО, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКонстантыСервер()
	
	Обработки.НастройкаПрограммы.ПрочитатьКонстантыВФорме(ЭтотОбъект, ИменаКонстант());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаКонстант()
	
	Имена = Новый Массив(); // Массив Из Строка
	Имена.Добавить("АвтоматическиОтправлятьКвитанцииМЭДО");
	Имена.Добавить("ВариантАвтосозданияУведомленийМЭДО");
	Имена.Добавить("ВремяХраненияЖурналаСобытийМЭДО");
	Имена.Добавить("ЗагружатьДанныеИз21");
	Имена.Добавить("ЗапретитьРедактированиеСтатейДвиженияДенежныхСредств");
	Имена.Добавить("ЗапретитьРедактированиеТоваровИУслуг");
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() Тогда
		Имена.Добавить("ИспользоватьКОД");
	КонецЕсли;
	Имена.Добавить("ИспользоватьМобильныеПриложения");
	Имена.Добавить("ИспользоватьМЭДО");
	Имена.Добавить("ИспользоватьОбменЭД");
	Имена.Добавить("ИспользоватьОтметкиВремени");
	Имена.Добавить("ИспользоватьСинхронизациюДанных");
	Имена.Добавить("ПрефиксУзлаРаспределеннойИнформационнойБазы");
	Имена.Добавить("РазмерПорцииОбработкиМЭДО");
	Имена.Добавить("ИспользоватьСервис1сShare");
	
	Возврат Имена;

КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Процедура УстановитьКонстантуСервер(Знач ИмяКонстанты, Знач Значение)
	
	Если Константы[ИмяКонстанты].Получить() <> Значение Тогда
		Константы[ИмяКонстанты].Установить(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыключенныеОпцииОтКоторыхЗависитМЭДО()
	
	Опции = Новый Массив();
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
		Опции.Добавить(НСтр("ru = 'Грифы доступа'"));
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
		Опции.Добавить(НСтр("ru = 'Электронные подписи'"));
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП") Тогда
		Опции.Добавить(НСтр("ru = 'Вставлять штамп ЭП (автовизуализация ЭП)'"));
	КонецЕсли;
	
	Если Опции.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрСоединить(Опции, Символы.ПС);
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьМиграцииС21()
	
	Элементы.ГруппаОбменСВнешнимиРесурсамиПереход.Видимость = Ложь;
	
	Если ЗагружатьДанныеИз21 Тогда
		Элементы.ГруппаОбменСВнешнимиРесурсамиПереход.Видимость = Истина;
		Элементы.ГруппаВнешнийОбменВ21.Видимость = Ложь;
		Элементы.ГруппаВнешнийОбменВ30.Видимость = Ложь;
		
		Если ОбменСВнешнимиРесурсамиВ21 Тогда
			Элементы.ГруппаВнешнийОбменВ21.Видимость = Истина;
		Иначе
			Элементы.ГруппаВнешнийОбменВ30.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НастроитьМиграциюИзПредыдущейВерсии.Доступность = ЗагружатьДанныеИз21;
	
КонецПроцедуры

#КонецОбласти
