
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АвтовизуализацияЭП = Константы.АвтовизуализацияЭП.Получить();
	РасположениеШтампаЭПВPdf = Константы.РасположениеШтампаЭПВPdf.Получить();
	СтраницаВставкиШтампаЭП = Константы.СтраницаВставкиШтампаЭП.Получить();
	ИтоговыйФорматФайлаСоШтампомЭП = Константы.ИтоговыйФорматФайлаСоШтампомЭП.Получить();
	СпособВставкиШтампаЭПВPDF = Константы.СпособВставкиШтампаЭПВPDF.Получить();
	Использовать1СШтамп = Константы.Использовать1СШтамп.Получить(); 
	
	Элементы.Использовать1СШтамп.Доступность = АвтовизуализацияЭП; 
	Элементы.ГруппаВидГриф.Доступность = АвтовизуализацияЭП И Использовать1СШтамп;
	Элементы.ДекорацияШтампСсылка.Доступность = Использовать1СШтамп;
	
	Если ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.Оригинальный Тогда
		Константы.Использовать1СШтамп.Установить(Ложь);
		Использовать1СШтамп = Ложь;
		Элементы.Использовать1СШтамп.Доступность = Ложь;
	КонецЕсли;	
	
	Элементы.РасположениеШтампаЭПВPdf.Доступность = АвтовизуализацияЭП;
	Элементы.СтраницаВставкиШтампаЭП.Доступность = АвтовизуализацияЭП;
	Элементы.ИтоговыйФорматФайлаСоШтампомЭП.Доступность = АвтовизуализацияЭП;
	Элементы.СпособВставкиШтампаЭПВPDF.Доступность = АвтовизуализацияЭП;
	
	ИспользоватьImageMagick = ФайловыеФункцииПовтИсп.ИспользоватьImageMagickДляРаспознаванияPDF();
	Если Не ИспользоватьImageMagick Тогда
		Элементы.СпособВставкиШтампаЭПВPDF.Доступность = Ложь;   
		Если СпособВставкиШтампаЭПВPDF = Перечисления.СпособыВставкиШтампаЭПВPDF.ImageMagickGhostscript Тогда
			СпособВставкиШтампаЭПВPDF = Перечисления.СпособыВставкиШтампаЭПВPDF.Встроенный;
			Константы.СпособВставкиШтампаЭПВPDF.Установить(СпособВставкиШтампаЭПВPDF);
		КонецЕсли;	
	КонецЕсли;	

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ПроверятьЭлектронныеПодписиНаСервере.Видимость = Ложь;
		Элементы.СоздаватьЭлектронныеПодписиНаСервере.Видимость = Ложь;
	КонецЕсли;

	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	ДоступнаУсовершенствованнаяПодпись = МодульЭлектроннаяПодпись.ДоступнаУсовершенствованнаяПодпись();
	Элементы.ГруппаУсовершенствованнаяПодпись.Видимость = ДоступнаУсовершенствованнаяПодпись;
	
	ЗаполнитьДекорациюГрифыВиды();
	
	УстановитьДоступность();
	
	РаботаСФормамиХолдинг.ИзменитьФормуНастроекПрограммы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Обновить1СШтампНастройки" Тогда
		ЗаполнитьДекорациюГрифыВиды();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПодписиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаСерверовМетокВремениПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЭлектронныеПодписиНаСервереПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЭлектронныеПодписиНаСервереПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЭлектронныеПодписиНаСервереРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЭлектронныеПодписиНаСервереРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТипПодписиКриптографииПоУмолчаниюРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры


&НаКлиенте
Процедура АвтовизуализацияЭППриИзменении(Элемент)
	
	УстановитьАвтовизуализацияЭПНаСервере(АвтовизуализацияЭП);
	
	Элементы.РасположениеШтампаЭПВPdf.Доступность = АвтовизуализацияЭП;
	Элементы.СтраницаВставкиШтампаЭП.Доступность = АвтовизуализацияЭП;
	Элементы.ИтоговыйФорматФайлаСоШтампомЭП.Доступность = АвтовизуализацияЭП;
	Элементы.СпособВставкиШтампаЭПВPDF.Доступность = АвтовизуализацияЭП;
	Элементы.Использовать1СШтамп.Доступность = АвтовизуализацияЭП;
	
	Если ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.Оригинальный") Тогда
		Использовать1СШтамп = Ложь;
		Элементы.Использовать1СШтамп.Доступность = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеШтампаЭПВPdfПриИзменении(Элемент)
	РасположениеШтампаЭПВPdfНаСервере(РасположениеШтампаЭПВPdf);
КонецПроцедуры

&НаКлиенте
Процедура ИтоговыйФорматФайлаСоШтампомЭППриИзменении(Элемент) 
	
	ИтоговыйФорматФайлаСоШтампомЭППриИзмененииНаСервере(ИтоговыйФорматФайлаСоШтампомЭП);
	
	Если ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.Оригинальный") Тогда
		
		Использовать1СШтамп = Ложь;     
		Использовать1СШтампПриИзмененииНаСервере(Использовать1СШтамп);
		
		Элементы.Использовать1СШтамп.Доступность = Ложь;
		Элементы.ГруппаВидГриф.Доступность = Использовать1СШтамп;
		Элементы.ДекорацияШтампСсылка.Доступность = Использовать1СШтамп;
		
	Иначе	
		Элементы.Использовать1СШтамп.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВставкиШтампаЭПВPDFПриИзменении(Элемент)
	СпособВставкиШтампаЭПВPDFПриИзмененииНаСервере(СпособВставкиШтампаЭПВPDF);
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВставкиШтампаЭППриИзменении(Элемент)
	СтраницаВставкиШтампаЭППриИзмененииНаСервере(СтраницаВставкиШтампаЭП);
КонецПроцедуры

&НаКлиенте
Процедура Использовать1СШтампПриИзменении(Элемент)
	
	Элементы.ГруппаВидГриф.Доступность = Использовать1СШтамп;
	Элементы.ДекорацияШтампСсылка.Доступность = Использовать1СШтамп;

	Использовать1СШтампПриИзмененииНаСервере(Использовать1СШтамп);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифыВидыСтрокаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкиГрифыВиды1СШтамп");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьРазрешенныеНеаккредитованныеУЦ(Команда)
	
	ОткрытьФорму("ОбщаяФорма.РазрешенныеНеаккредитованныеУЦ");
	
КонецПроцедуры

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	ИмяКонстанты = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	Если НавигационнаяСсылкаФорматированнойСтроки = "Программы" Тогда
		МодульЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Программы");
	Иначе
		МодульЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Сертификаты");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ИмяКонстанты = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиИмени = СтрРазделить(РеквизитПутьКДанным, ".");
	
	Если ЧастиИмени.Количество() = 2 Тогда
		КонстантаИмя = ЧастиИмени[1];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
	ИначеЕсли ЧастиИмени.Количество() = 1 И НРег(Лев(РеквизитПутьКДанным, 9)) = НРег("Константа") Тогда
		КонстантаИмя = Сред(РеквизитПутьКДанным, 10);
		КонстантаЗначение = ЭтотОбъект[РеквизитПутьКДанным];
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если Константы[КонстантаИмя].Получить() <> КонстантаЗначение Тогда
		Константы[КонстантаИмя].Установить(КонстантаЗначение);
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьДополнительныеРеквизитыИСведения" И КонстантаЗначение = Ложь Тогда
		ЭтотОбъект.Прочитать();
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЭлектронныеПодписи" Или РеквизитПутьКДанным
		= "НаборКонстант.ИспользоватьШифрование" Или РеквизитПутьКДанным = "" Тогда
		
		Элементы.ГруппаУсовершенствованнаяПодпись.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи;
		Элементы.ГруппаПроверятьПодписиНаСервере.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи
			Или НаборКонстант.ИспользоватьШифрование;
		
		Если НаборКонстант.ИспользоватьЭлектронныеПодписи И (РеквизитПутьКДанным
			= "НаборКонстант.ИспользоватьЭлектронныеПодписи" Или РеквизитПутьКДанным = "") Тогда
			Если ДоступнаУсовершенствованнаяПодпись Тогда
				КонстантаАдресаСерверовМетокВремени = Константы["АдресаСерверовМетокВремени"].Получить();
				КонстантаТипПодписиКриптографииПоУмолчанию = Константы["ТипПодписиКриптографииПоУмолчанию"].Получить();
			КонецЕсли;
			Если Элементы.СоздаватьЭлектронныеПодписиНаСервере.Видимость Тогда
				КонстантаСоздаватьЭлектронныеПодписиНаСервере = Константы["СоздаватьЭлектронныеПодписиНаСервере"].Получить();
			КонецЕсли;
			Если Элементы.ПроверятьЭлектронныеПодписиНаСервере.Видимость Тогда
				КонстантаПроверятьЭлектронныеПодписиНаСервере = Константы["ПроверятьЭлектронныеПодписиНаСервере"].Получить();
			КонецЕсли;
		КонецЕсли;
		УстановитьЗаголовокЭлектроннаяПодписьНаСервере();
	ИначеЕсли РеквизитПутьКДанным = "КонстантаТипПодписиКриптографииПоУмолчанию" И ДоступнаУсовершенствованнаяПодпись Тогда
		КонстантаТипПодписиКриптографииПоУмолчанию = Константы["ТипПодписиКриптографииПоУмолчанию"].Получить();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") 
		И ДоступнаУсовершенствованнаяПодпись
		И (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСервисDSS" Или РеквизитПутьКДанным = "") Тогда
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			ЭтоМодельСервисаСДоступнымУсовершенствованием = МодульЭлектроннаяПодпись.ОбщиеНастройки().ЭтоМодельСервисаСДоступнымУсовершенствованием;
			Элементы.ГруппаДобавлятьМеткиАвтоматически.Видимость = Ложь;
			Элементы.ТипПодписиКриптографииПоУмолчанию.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			Если ЭтоМодельСервисаСДоступнымУсовершенствованием Тогда
				Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Истина;
				Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Ложь;
				ЗаполнитьСписокТиповПодписейКриптографии(Элементы.ТипПодписиКриптографииПоУмолчанию.СписокВыбора);
				Элементы.ТипПодписиКриптографииПоУмолчаниюРасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
					НСтр("ru = 'В приложении в Интернете архивная подпись по умолчанию недоступна, этот тип подписи можно выбрать при подписании <a href=Сертификаты>сертификатом</a>, установленным на компьютер при установленой <a href=Программы>программе электронной подписи</a>.'"));
			Иначе
				Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Ложь;
				Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Истина;
				Элементы.ТипПодписиКриптографииПоУмолчанию1РасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
					НСтр("ru = 'В приложении в Интернете по умолчанию установлен тип подписи Базовая, типы подписи с метками времени можно выбрать при подписании <a href=Сертификаты>сертификатом</a>, установленным на компьютер при установленой <a href=Программы>программе электронной подписи</a>.'"));
			КонецЕсли;
		Иначе 
			ЗаполнитьСписокТиповПодписейКриптографии(Элементы.ТипПодписиКриптографииПоУмолчанию.СписокВыбора);
			Элементы.ТипПодписиКриптографииПоУмолчанию.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Истина;
			Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ТипПодписиКриптографииПоУмолчанию.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Если РеквизитПутьКДанным = "" И ДоступнаУсовершенствованнаяПодпись Тогда
			Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Истина;
			Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Ложь;
			ЗаполнитьСписокТиповПодписейКриптографии(Элементы.ТипПодписиКриптографииПоУмолчанию.СписокВыбора);
		КонецЕсли;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЭлектронныеПодписи"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьШифрование"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСервисDSS"
		ИЛИ РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		
		ДоступностьОблачнойПодписи = (НаборКонстант.ИспользоватьЭлектронныеПодписи ИЛИ НаборКонстант.ИспользоватьШифрование)
			И (НаборКонстант.ИспользоватьСервисDSS);
			
		Элементы.ОбработкаУправлениеПодключениемDSSСерверыОблачнойПодписи.Доступность = ДоступностьОблачнойПодписи;
		Элементы.ОбработкаУправлениеПодключениемDSSУчетныеЗаписиОблачнойПодписи.Доступность = ДоступностьОблачнойПодписи;
		
	КонецЕсли;       
	
	Элементы.ГруппаВидГриф.Доступность = Использовать1СШтамп;
	Элементы.ДекорацияШтампСсылка.Доступность = Использовать1СШтамп;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокЭлектроннаяПодписьНаСервере()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если НаборКонстант.ИспользоватьЭлектронныеПодписи Тогда
		ЗаголовокФлажка = НСтр("ru = 'Проверять подписи и сертификаты на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи на компьютер пользователя для проверки электронных подписей и сертификатов.'");
	Иначе
		ЗаголовокФлажка = НСтр("ru = 'Проверять сертификаты на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи на компьютер пользователя для проверки сертификатов.'");
	КонецЕсли;
	
	Элементы.ПроверятьЭлектронныеПодписиНаСервере.Заголовок = ЗаголовокФлажка;
	
	Если ИнформационнаяБазаФайловая Тогда
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на компьютер, где работает веб-сервер, подключенный к файловой информационной базе, должна быть установлена хотя бы одна %1.'"),
			НСтр("ru = '<a href=Программы>программа электронной подписи</a> из списка'"));
	Иначе
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на каждый компьютер, где работает сервер 1С:Предприятия, должна быть установлена хотя бы одна %1.'"), 
			НСтр("ru = '<a href=Программы>программа электронной подписи</a> из списка'"));
	КонецЕсли;
	
	ПодсказкаФлажка = ПодсказкаФлажка + Символы.ПС + Символы.ПС + ПодсказкаНаСервере;
	
	Элементы.ПроверятьЭлектронныеПодписиНаСервереРасширеннаяПодсказка.Заголовок = 
		СтроковыеФункции.ФорматированнаяСтрока(ПодсказкаФлажка);
	
	Если Не НаборКонстант.ИспользоватьЭлектронныеПодписи Тогда
		ЗаголовокФлажка = НСтр("ru = 'Шифровать и расшифровывать на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи и сертификат на компьютер пользователя для шифрования и расшифровки.'");
		
	ИначеЕсли Не НаборКонстант.ИспользоватьШифрование Тогда
		ЗаголовокФлажка = НСтр("ru = 'Подписывать на сервере'");
			ПодсказкаФлажка =
		НСтр("ru = 'Позволяет не устанавливать программу электронной подписи и сертификат на компьютер пользователя для подписания.'");
	Иначе
		ЗаголовокФлажка = НСтр("ru = 'Подписывать и шифровать на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи и сертификат на компьютер пользователя для подписания, шифрования и расшифровки.'");
	КонецЕсли;
		
	Элементы.СоздаватьЭлектронныеПодписиНаСервере.Заголовок = ЗаголовокФлажка;
	
	Если ИнформационнаяБазаФайловая Тогда
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на компьютер, где работает веб-сервер, подключенный к файловой информационной базе, должна быть установлена %1 и %2.'"),
			НСтр("ru = '<a href=Программы>программа электронной подписи</a>'"),
			НСтр("ru = '<a href=Сертификаты>сертификат</a> с закрытым ключом'"));
	Иначе
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на каждый компьютер, где работает сервер 1С:Предприятия, должна быть установлена %1 и %2.'"), 
			НСтр("ru = '<a href=Программы>программа электронной подписи</a>'"),
			НСтр("ru = '<a href=Сертификаты>сертификат</a> с закрытым ключом'"));	
	КонецЕсли;
	
	ПодсказкаФлажка = ПодсказкаФлажка + Символы.ПС + Символы.ПС + ПодсказкаНаСервере;
	Элементы.СоздаватьЭлектронныеПодписиНаСервереРасширеннаяПодсказка.Заголовок = 
		СтроковыеФункции.ФорматированнаяСтрока(ПодсказкаФлажка);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Использовать1СШтампПриИзмененииНаСервере(Использовать1СШтамп)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если НЕ ЭтоПолноправныйПользователь И
		(Не ПравоДоступа("Изменение", Метаданные.Константы.Использовать1СШтамп)
	 	Или Константы.Использовать1СШтамп.Получить() = Использовать1СШтамп) Тогда
		
		Возврат;
	КонецЕсли;
	
	Константы.Использовать1СШтамп.Установить(Использовать1СШтамп);
	
	// Требуется для обновления общих настроек на сервере и на клиенте.
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорациюГрифыВиды()   
	
	ГрифыДоступаДля1СШтамп = ВизуализацияПовтИсп.ГрифыДоступаДля1СШтамп();
	ВидыДокументовДля1СШтамп = ВизуализацияПовтИсп.ВидыДокументовДля1СШтамп();    
	
	ТекстГрифовВидов = "";	  
	ТекстССылки = "";
	
	Если ГрифыДоступаДля1СШтамп.Количество() <> 0 Или ВидыДокументовДля1СШтамп.Количество() <> 0 Тогда 
		
		Если ГрифыДоступаДля1СШтамп.Количество() <> 0 И ВидыДокументовДля1СШтамп.Количество() <> 0 Тогда  
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
				ТекстГрифовВидов 
					= СтрШаблон(НСтр("ru = 'Настроены грифы доступа (%1) и виды документов (%2) для 1С:Штамп '"),
					ГрифыДоступаДля1СШтамп.Количество(), ВидыДокументовДля1СШтамп.Количество());
			Иначе
				ТекстГрифовВидов
				= СтрШаблон(НСтр("ru = 'Настроены виды документов (%1) для 1С:Штамп '"),
				ВидыДокументовДля1СШтамп.Количество());
			КонецЕсли;
				
		ИначеЕсли ГрифыДоступаДля1СШтамп.Количество() <> 0 И ВидыДокументовДля1СШтамп.Количество() = 0 Тогда    
			ТекстГрифовВидов
				= СтрШаблон(НСтр("ru = 'Настроены грифы доступа (%1) для 1С:Штамп '"),
				ГрифыДоступаДля1СШтамп.Количество());
		ИначеЕсли ГрифыДоступаДля1СШтамп.Количество() = 0 И ВидыДокументовДля1СШтамп.Количество() <> 0 Тогда    
			ТекстГрифовВидов
				= СтрШаблон(НСтр("ru = 'Настроены виды документов (%1) для 1С:Штамп '"),
				ВидыДокументовДля1СШтамп.Количество());
		КонецЕсли;
			
		ТекстССылки = НСтр("ru = 'Изменить'");	
		
	Иначе	
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
			ТекстГрифовВидов = НСтр("ru = 'Грифы доступа и виды документов для 1С:Штамп не настроены. 1С:Штамп будет использован для всех видов документов и грифов '");
		Иначе
			ТекстГрифовВидов = НСтр("ru = 'Виды документов для 1С:Штамп не настроены. 1С:Штамп будет использован для всех видов документов '");
		КонецЕсли;	
		
		ТекстССылки = НСтр("ru = 'Настроить'");
	КонецЕсли;	  
	
	ГрифыВидыСтрока = Новый ФорматированнаяСтрока(ТекстГрифовВидов,,ЦветаСтиля.ЦветМикротекста);
	ФорматСтрокаССылка = Новый ФорматированнаяСтрока(ТекстССылки,,,,"Ссылка");
	
	ГрифыВидыСтрока = Новый ФорматированнаяСтрока(ГрифыВидыСтрока, ФорматСтрокаССылка);
	
КонецПроцедуры	

#Область ВизуализацияЭП

&НаСервереБезКонтекста
Процедура УстановитьАвтовизуализацияЭПНаСервере(АвтовизуализацияЭП)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если НЕ ЭтоПолноправныйПользователь И
		(Не ПравоДоступа("Изменение", Метаданные.Константы.АвтовизуализацияЭП)
	 	Или Константы.АвтовизуализацияЭП.Получить() = АвтовизуализацияЭП) Тогда
		
		Возврат;
	КонецЕсли;
	
	Константы.АвтовизуализацияЭП.Установить(АвтовизуализацияЭП);
	
	Если Не ЗначениеЗаполнено(Константы.СтраницаВставкиШтампаЭП.Получить()) Тогда
		СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Последняя;
	 	Константы.СтраницаВставкиШтампаЭП.Установить(СтраницаВставкиШтампаЭП);		 
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(Константы.РасположениеШтампаЭПВPdf.Получить()) Тогда
		РасположениеШтампаЭПВPdf = Перечисления.МестаВставкиКартинки.ПравыйНижний;
		Константы.РасположениеШтампаЭПВPdf.Установить(РасположениеШтампаЭПВPdf);		 
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(Константы.ИтоговыйФорматФайлаСоШтампомЭП.Получить()) Тогда
		ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.Оригинальный;
		Константы.ИтоговыйФорматФайлаСоШтампомЭП.Установить(ИтоговыйФорматФайлаСоШтампомЭП);		 
	КонецЕсли;	
	
	// Требуется для обновления общих настроек на сервере и на клиенте.
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИтоговыйФорматФайлаСоШтампомЭППриИзмененииНаСервере(ИтоговыйФорматФайлаСоШтампомЭП)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если НЕ ЭтоПолноправныйПользователь И
		(Не ПравоДоступа("Изменение", Метаданные.Константы.ИтоговыйФорматФайлаСоШтампомЭП)
	 	Или Константы.ИтоговыйФорматФайлаСоШтампомЭП.Получить() = ИтоговыйФорматФайлаСоШтампомЭП) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИтоговыйФорматФайлаСоШтампомЭП) Тогда
		ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.Оригинальный; 
	КонецЕсли;	
	
	Константы.ИтоговыйФорматФайлаСоШтампомЭП.Установить(ИтоговыйФорматФайлаСоШтампомЭП);
	
	// Требуется для обновления общих настроек на сервере и на клиенте.
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СпособВставкиШтампаЭПВPDFПриИзмененииНаСервере(СпособВставкиШтампаЭПВPDF)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если НЕ ЭтоПолноправныйПользователь И
		(Не ПравоДоступа("Изменение", Метаданные.Константы.СпособВставкиШтампаЭПВPDF)
	 	Или Константы.СпособВставкиШтампаЭПВPDF.Получить() = СпособВставкиШтампаЭПВPDF) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособВставкиШтампаЭПВPDF) Тогда
		СпособВставкиШтампаЭПВPDF = Перечисления.СпособыВставкиШтампаЭПВPDF.ImageMagickGhostscript; 
	КонецЕсли;	
	
	Константы.СпособВставкиШтампаЭПВPDF.Установить(СпособВставкиШтампаЭПВPDF);
	
	// Требуется для обновления общих настроек на сервере и на клиенте.
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтраницаВставкиШтампаЭППриИзмененииНаСервере(СтраницаВставкиШтампаЭП)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если НЕ ЭтоПолноправныйПользователь И
		(Не ПравоДоступа("Изменение", Метаданные.Константы.СтраницаВставкиШтампаЭП)
	 	Или Константы.СтраницаВставкиШтампаЭП.Получить() = СтраницаВставкиШтампаЭП) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтраницаВставкиШтампаЭП) Тогда
		СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Последняя; 
	КонецЕсли;	
	Константы.СтраницаВставкиШтампаЭП.Установить(СтраницаВставкиШтампаЭП);
	
	// Требуется для обновления общих настроек на сервере и на клиенте.
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасположениеШтампаЭПВPdfНаСервере(РасположениеШтампаЭПВPdf)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если НЕ ЭтоПолноправныйПользователь И
		(Не ПравоДоступа("Изменение", Метаданные.Константы.РасположениеШтампаЭПВPdf)
	 	Или Константы.РасположениеШтампаЭПВPdf.Получить() = РасположениеШтампаЭПВPdf) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РасположениеШтампаЭПВPdf) Тогда
		РасположениеШтампаЭПВPdf = Перечисления.МестаВставкиКартинки.ПравыйНижний; 
	КонецЕсли;	
	
	Константы.РасположениеШтампаЭПВPdf.Установить(РасположениеШтампаЭПВPdf);
	
	// Требуется для обновления общих настроек на сервере и на клиенте.
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

// Заполняет список типов подписей
// 
// Параметры:
//  Список - СписокЗначений Из ПеречислениеСсылка.ТипыПодписиКриптографии
&НаСервереБезКонтекста
Процедура ЗаполнитьСписокТиповПодписейКриптографии(Список)
	
	Список.Очистить();
	Список.Добавить(Перечисления.ТипыПодписиКриптографии.БазоваяCAdESBES,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Базовая подпись (%1)
				 |становится недействительной после окончания срока действия сертификата подписанта (обычно в течение 1 года).'"),
		"CAdES-BES"));

	Список.Добавить(Перечисления.ТипыПодписиКриптографии.СМеткойДоверенногоВремениCAdEST,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Подпись с меткой доверенного времени (%1)
				 |действует после окончания срока действия сертификата подписанта.'"),
		"CAdES-T"));
	
КонецПроцедуры

#КонецОбласти
