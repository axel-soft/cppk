#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КаталогСохраненияКопииПротоколаРаботыСотрудников = СформироватьПутьWindowsLinux(
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыСотрудниковWindows, 
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыСотрудниковLinux);
		
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ОбновитьЗаголовокНастройкиИспользуемыхРазрезов();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ГруппаНастройкиВхода.Видимость = Ложь;
	КонецЕсли;
	
	РаботаСФормамиХолдинг.ИзменитьФормуНастроекПрограммы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДокументооборотИспользоватьОграничениеПравДоступа <>
		Константы.ДокументооборотИспользоватьОграничениеПравДоступа.Получить() Тогда
		
		Попытка
			Если НЕ МонопольныйРежим() Тогда
				УстановитьМонопольныйРежим(Истина);
				УстановленМонопольныйРежим = Истина;
			КонецЕсли;
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для включения и отключения ограничения прав доступа требуется установить монопольный режим.
				|%1'"),
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "НаборКонстант.ДокументооборотИспользоватьОграничениеПравДоступа", Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
	
	Если ТекущийОбъект.ДокументооборотИспользоватьОграничениеПравДоступа 
		И ТекущийОбъект.ДокументооборотИспользоватьОграничениеПравДоступа <> Константы.ДокументооборотИспользоватьОграничениеПравДоступа.Получить() Тогда
		
		ПоказатьВопросПриИзмененииОграниченияДоступаНаУровнеЗаписей = Истина;
		
	Иначе
		
		ПоказатьВопросПриИзмененииОграниченияДоступаНаУровнеЗаписей = Ложь;
		
	КонецЕсли;
	
	// Ограничение прав доступа
	ТекущийОбъект.ОграничиватьДоступНаУровнеЗаписей = ТекущийОбъект.ДокументооборотИспользоватьОграничениеПравДоступа;
	
	Если НаборКонстант.ГрупповойРасчетПравДоступаРазмерПорции = 0 Тогда
		ТекущийОбъект.ГрупповойРасчетПравДоступаРазмерПорции = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если УстановленМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
	Если ПоказатьВопросПриИзмененииОграниченияДоступаНаУровнеЗаписей Тогда
		Если Не ПараметрыЗаписи.Свойство("ПоказанВопросОПересчетеПрав") Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОбработкаОтветаНаВопросОПересчетеПрав",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ПараметрыВопроса = Новый Структура("ОтложенноеОбновление", 
				НаборКонстант.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа);
			
			ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.ВопросОПолномПересчетеПрав", ПараметрыВопроса,
				ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросОПересчетеПрав(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Истина Тогда
		ДокументооборотПраваДоступаКлиент.ОбновитьВсеПрава(
			НаборКонстант.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказанВопросОПересчетеПрав", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументооборотИспользоватьОграничениеПравДоступаПриИзменении(Элемент)
	
	Если НаборКонстант.ДокументооборотИспользоватьОграничениеПравДоступа Тогда
		Если Не ЭтоФайловаяБаза Тогда
			НаборКонстант.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа = Истина;
		КонецЕсли;
	Иначе
		НаборКонстант.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа = Ложь;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступаПриИзменении(Элемент)
	
	ВидимостьПредупрежденияОбОтложенномОбновлении = Ложь;
	
	Если НаборКонстант.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа Тогда
		Если ЭтоФайловаяБаза Тогда
			ВидимостьПредупрежденияОбОтложенномОбновлении = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ПредупреждениеОбОтложенномОбновлении.Видимость <> ВидимостьПредупрежденияОбОтложенномОбновлении Тогда
		Элементы.ПредупреждениеОбОтложенномОбновлении.Видимость = ВидимостьПредупрежденияОбОтложенномОбновлении;
	КонецЕсли;

	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛокальныхАдминистраторовПриИзменении(Элемент)
	
	Если Не НаборКонстант.ИспользоватьЛокальныхАдминистраторов И ЕстьРазрешенияДоступаДляЛА() Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ИспользоватьЛокальныхАдминистраторовПриИзмененииПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Права локальных администраторов будут удалены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛокальныхАдминистраторовПриИзмененииПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		НаборКонстант.ИспользоватьЛокальныхАдминистраторов = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользоватьПротоколированиеРаботыПользователейПриИзменении(Элемент)
	
	Если Не НаборКонстант.ИспользоватьПротоколированиеРаботыСотрудников Тогда
		Элементы.СрокХраненияПротоколаРаботыСотрудников.Доступность = Ложь;
		Элементы.КаталогСохраненияКопииПротоколаРаботыСотрудников.Доступность = Ложь;
	Иначе
		Элементы.СрокХраненияПротоколаРаботыСотрудников.Доступность = Истина;
		Элементы.КаталогСохраненияКопииПротоколаРаботыСотрудников.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияКопииПротоколаРаботыПользователейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Заголовок, ПолныйПутьWindows, ПолныйПутьLinux",
		НСтр("ru = 'Путь сохранения копии протокола работы пользователей'"),
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыСотрудниковWindows,
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыСотрудниковLinux);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КаталогСохраненияКопииПротоколаРаботыПользователейНачалоВыбораПродолжение",
		ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборПутиWindowsLinux", ПараметрыФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияКопииПротоколаРаботыПользователейНачалоВыбораПродолжение(Результат, Параметры)Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыСотрудниковWindows = Результат.ПолныйПутьWindows;
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыСотрудниковLinux = Результат.ПолныйПутьLinux;
		
		КаталогСохраненияКопииПротоколаРаботыСотрудников = СформироватьПутьWindowsLinux(
			НаборКонстант.КаталогСохраненияКопииПротоколаРаботыСотрудниковWindows, 
			НаборКонстант.КаталогСохраненияКопииПротоколаРаботыСотрудниковLinux);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияКопииПротоколаРаботыПользователейОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВходаПользователей(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановлениеПаролей(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ВосстановлениеПаролей",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеРазрезовДоступа(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИспользованиеРазрезовДоступаОкончание", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.ВыборИспользуемыхРазрезовДоступа",,
		ЭтаФорма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеРазрезовДоступаОкончание(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьЗаголовокНастройкиИспользуемыхРазрезов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПолитикиДоступа(Команда)
	
	ОткрытьФорму("Обработка.ЛокальныеАдминистраторы.Форма");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступность()
	
	ИспользоватьОграничениеПрав = НаборКонстант.ДокументооборотИспользоватьОграничениеПравДоступа;
	ОтложенноеОбновление = НаборКонстант.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа;
	
	Элементы.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа.Доступность = ИспользоватьОграничениеПрав;
	Элементы.ГрупповойРасчетПравДоступаРазмерПорции.Доступность = ИспользоватьОграничениеПрав И ОтложенноеОбновление;
	Элементы.ДобавлятьРуководителямДоступПодчиненных.Доступность = ИспользоватьОграничениеПрав;
	Элементы.ГруппаЛокальныеАдминистраторы.Доступность = ИспользоватьОграничениеПрав;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьРазрешенияДоступаДляЛА()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.РазрешенияДляЛокальныхАдминистраторов КАК РазрешенияДляЛокальныхАдминистраторов");
		
	ЕстьЗаписи = Не Запрос.Выполнить().Пустой();
	
	Возврат ЕстьЗаписи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПутьWindowsLinux(ПолныйПутьWindows, ПолныйПутьLinux)
	
	СтрокаПути = "";
	
	Если ЗначениеЗаполнено(ПолныйПутьWindows) Тогда
		СтрокаПути = СтрокаПути + ПолныйПутьWindows;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПолныйПутьLinux) Тогда
		
		Если ЗначениеЗаполнено(СтрокаПути) Тогда
			СтрокаПути = СтрокаПути + ";";
		КонецЕсли;	
		
		СтрокаПути = СтрокаПути + ПолныйПутьLinux;
	КонецЕсли;	
	
	Возврат СтрокаПути;
	
КонецФункции	

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокНастройкиИспользуемыхРазрезов()
	
	КолИспользуемых = 0;
	СписокРазрезов = Константы.ИспользованиеРазрезовДоступа.Получить().Получить();
	НеАктуальныеРазрезы = ДокументооборотПраваДоступаПовтИсп.ОтключенныеРазрезыДоступа(Истина, Ложь);
	
	Для Каждого Эл Из СписокРазрезов Цикл
		
		Если НеАктуальныеРазрезы.Найти(Эл.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Эл.Пометка Тогда
			КолИспользуемых = КолИспользуемых + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ИспользованиеРазрезовДоступа.Заголовок = СтрШаблон(
		НСтр("ru = 'Используемые разрезы доступа (%1)'"), КолИспользуемых);
	
КонецПроцедуры

#КонецОбласти
