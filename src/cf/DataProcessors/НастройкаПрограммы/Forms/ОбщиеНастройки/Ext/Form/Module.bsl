#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПолнотекстовыйПоискИзменен = Ложь;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесСобытия") Тогда 
		Элементы.ГруппаСрокХраненияБизнесСобытий.Доступность = Ложь;
		Элементы.ИспользоватьУведомления.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.НастроитьУведомления.Доступность = НаборКонстант.ИспользоватьУведомления;
	Элементы.ИспользоватьБронированиеПомещений.Доступность = НаборКонстант.ИспользоватьСхемыПомещений;
	Элементы.НастроитьВерсионирование.Доступность = НаборКонстант.ИспользоватьВерсионированиеОбъектов;
	
	Элементы.ГруппаПериодЗамеров.Доступность =
		НаборКонстант.ВыполнятьЗамерыПроизводительности;
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ИспользоватьРабочийКалендарь = НаборКонстант.ИспользоватьРабочийКалендарь;
	ИспользоватьУправлениеМероприятиями = НаборКонстант.ИспользоватьУправлениеМероприятиями;
	ИспользоватьОтсутствия = НаборКонстант.ИспользоватьОтсутствия;
	Элементы.ИспользоватьНапоминанияПользователя.Доступность = НаборКонстант.ИспользоватьРабочийКалендарь;
	НастроитьЭлементИспользоватьСинхронизациюКалендарей(
		Элементы.ГруппаИспользоватьСинхронизациюКалендарей,
		Элементы.ГруппаИспользоватьСинхронизациюКалендарейНастроить,
		НаборКонстант.ИспользоватьРабочийКалендарь,
		НаборКонстант.ИспользоватьСинхронизациюКалендарей);
	Элементы.ГруппаМероприятияНастроить.Доступность =
		НаборКонстант.ИспользоватьУправлениеМероприятиями;

	// Инструкции
	Элементы.ЗагрузитьТиповыеИнструкции.Доступность = НаборКонстант.ИспользоватьИнструкции;
	
	// ЭП
	Элементы.НастроитьЭП.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи;
	Элементы.МашиночитаемыеДоверенности.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи;
	Элементы.СертификатыИКриптопровайдеры.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи
		Или НаборКонстант.ИспользоватьШифрование;
		
	// Защита персональных данных	
	Элементы.СобытияДоступаКПерсональнымДанным.Доступность =
		НаборКонстант.ИспользоватьУчетДоступаКПерсональнымДанным;
	Элементы.НастройкиРегистрацииСобытийДоступаКПерсональнымДанным.Доступность =
		НаборКонстант.ИспользоватьУчетДоступаКПерсональнымДанным;
	Элементы.ИспользоватьСкрытиеПерсональныхДанныхСубъектов.Доступность = 
		НаборКонстант.ИспользоватьУчетДоступаКПерсональнымДанным;
		
	Элементы.НастройкиЧатБота.Доступность = НаборКонстант.ИспользоватьЧатБота;
	ЧатБотПриОткрытии = Константы.ЧатБот.Получить();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ОбсужденияПодключены.Доступность = Ложь;
		Элементы.ПараметрыПрокси.Доступность = Ложь;
	КонецЕсли;
	
	// Замеры
	Элементы.ЗаписыватьЗамерыВремениВоВнешнийБуферДанных.Доступность =
		НаборКонстант.ВыполнятьЗамерыПроизводительности;
	Элементы.КаталогВнешнегоБуфераДанных.Доступность =
		НаборКонстант.ВыполнятьЗамерыПроизводительности
		И НаборКонстант.ЗаписыватьЗамерыВремениВоВнешнийБуферДанных;
	
	// Актуализация данных.
	Элементы.ГруппаИспользоватьАктуализациюДанныхНастроить.Доступность =
		НаборКонстант.ИспользоватьАктуализациюДанных;
	
	Элементы.УчетнаяЗаписьДляРаботыСПриглашениями.Доступность =
		НаборКонстант.ИспользоватьВнешниеПриглашения;
	
	РаботаСФормамиХолдинг.ИзменитьФормуНастроекПрограммы(ЭтотОбъект);
	
	Элементы.ГруппаОбновлениеКэширующихДанных.Видимость = Не ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Элементы.ЧислоПотоковОбновленияКэширующихДанныхЕдиницыИзмерения.Заголовок =
		ПодписьПотоков(НаборКонстант.ЧислоПотоковОбновленияКэширующихДанных);
	Элементы.ЧислоПотоковДолгогоОбновленияКэширующихДанныхЕдиницыИзмерения.Заголовок =
		ПодписьПотоков(НаборКонстант.ЧислоПотоковДолгогоОбновленияКэширующихДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущийЭлемент = Элементы.ПараметрыПрокси;
	
	ПриИзмененииСостоянияПодключенияОбсуждений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Включен рабочий календарь и управление мероприятиями
	ВключенРабочийКалендарь = Не ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьРабочийКалендарь;
	ВключеноУправлениеМероприятиями = Не ИспользоватьУправлениеМероприятиями И НаборКонстант.ИспользоватьУправлениеМероприятиями;
	Если НаборКонстант.ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьУправлениеМероприятиями
		И (ВключенРабочийКалендарь Или ВключеноУправлениеМероприятиями) Тогда
		
		Состояние(НСтр("ru = 'Выполняется заполнение рабочего календаря мероприятиями. Пожалуйста, подождите...'"));
		ЗаполнитьРабочийКалендарьМероприятиями();
		Состояние(НСтр("ru = 'Рабочий календарь заполнен мероприятиями.'"));
		
	КонецЕсли;
	
	// Включен рабочий календарь и управление отсутствия.
	ВключенРабочийКалендарь = Не ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьРабочийКалендарь;
	ВключеныОтсутствия = Не ИспользоватьОтсутствия И НаборКонстант.ИспользоватьОтсутствия;
	Если НаборКонстант.ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьОтсутствия
		И (ВключенРабочийКалендарь Или ВключеныОтсутствия) Тогда
		
		Состояние(НСтр("ru = 'Выполняется заполнение рабочего календаря отсутствиями. Пожалуйста, подождите...'"));
		ЗаполнитьРабочийКалендарьОтсутствиями();
		Состояние(НСтр("ru = 'Рабочий календарь заполнен отсутствиями.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ИспользоватьЧатБота", Константы.ИспользоватьЧатБота.Получить());
	ПараметрыЗаписи.Вставить("ИспользоватьРеестры", Константы.ИспользоватьРеестры.Получить());
	ИспользоватьБизнесСобытияВключено = ТекущийОбъект.ИспользоватьБизнесСобытия И НЕ Константы.ИспользоватьБизнесСобытия.Получить();
	
	ХранитьФайлыВТомахНаДиске = Константы.ХранитьФайлыВТомахНаДиске.Получить();
	
	ПолнотекстовыйПоискИзменен = (ТекущийОбъект.ИспользоватьПолнотекстовыйПоиск <> Константы.ИспользоватьПолнотекстовыйПоиск.Получить());
	
	// Регистрация событий доступа к персональным данным
	СтароеЗначение = Константы.ИспользоватьУчетДоступаКПерсональнымДанным.Получить();
	НовоеЗначение = НаборКонстант.ИспользоватьУчетДоступаКПерсональнымДанным;
	Если СтароеЗначение <> НовоеЗначение Тогда
		Если НовоеЗначение Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ОбластиПерсональныхДанных.ИмяОбласти
				|ИЗ
				|	РегистрСведений.ОбластиПерсональныхДанных КАК ОбластиПерсональныхДанных
				|ГДЕ
				|	ОбластиПерсональныхДанных.ИспользованиеСобытийЖурналаРегистрации");
			ВыбранныеОбласти = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяОбласти");
			ЗащитаПерсональныхДанных.УстановитьИспользованиеСобытияДоступ(Истина, ВыбранныеОбласти);
		Иначе
			ЗащитаПерсональныхДанных.УстановитьИспользованиеСобытияДоступ(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если КОДСервер.ЭтоЦентральныйУзел() Тогда
		// Приглашение на мероприятие
		ТекущийОбъект.ИспользоватьПриглашениеНаМероприятие =
			ТекущийОбъект.ИспользоватьБизнесПроцессыИЗадачи И 
			ТекущийОбъект.ИспользоватьУправлениеМероприятиями;
	КонецЕсли;
	
	ЗаголовокПрограммыИзменен = (ТекущийОбъект.ЗаголовокСистемы <> Константы.ЗаголовокСистемы.Получить());
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НаборКонстант.ИспользоватьБизнесСобытия Тогда
		Если НаборКонстант.СрокХраненияБизнесСобытий = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Укажите срок хранения бизнес-событий'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.СрокХраненияБизнесСобытий", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НаборКонстант.ЗаписыватьЗамерыВремениВоВнешнийБуферДанных = Истина
		И Не ЗначениеЗаполнено(НаборКонстант.КаталогВнешнегоБуфераДанных) Тогда
		ТекстОшибки = НСтр("ru = 'Укажите каталог внешнего буфера данных'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.КаталогВнешнегоБуфераДанных", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
	Если ПараметрыЗаписи.Свойство("ИспользоватьЧатБота")
		И ПараметрыЗаписи.ИспользоватьЧатБота 
			<> НаборКонстант.ИспользоватьЧатБота Тогда
			
		Оповестить("ИзменилосьИспользованиеЧатБота", НаборКонстант.ИспользоватьЧатБота);
	
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИспользоватьРеестры")
		И ПараметрыЗаписи.ИспользоватьРеестры 
			<> НаборКонстант.ИспользоватьРеестры Тогда
			
		Оповестить("Запись_Реестры");
	
	КонецЕсли;
	
	Если ПолнотекстовыйПоискИзменен Тогда
		ПолнотекстовыйПоискИзменен = Ложь;
		Оповестить("ПолнотекстовыйПоискИзменен");
	КонецЕсли;
	
	Если ИспользоватьБизнесСобытияВключено Тогда
		
		Если СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
			Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение4") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПослеЗаписиПродолжение4",
					ЭтотОбъект,
					ПараметрыЗаписи);
				ПоказатьПредупреждение(
					ОписаниеОповещения,
					НСтр("ru = 'Включено использование бизнес-событий.
                          |В режиме файловой информационной базы регламентное задание
                          |""Обработка произошедших бизнес-событий""
                          |необходимо выполнять вручную через консоль регламентных заданий
                          |(например, запустив отдельный сеанс для выполнения регламентных заданий).'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаголовокПрограммыИзменен Тогда
		СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение1(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение1", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение4(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение4", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПолнотекстовыйПоискИзменен 
		И Не ОбщегоНазначения.РазделениеВключено() Тогда
		Разрешен = Константы.ИспользоватьПолнотекстовыйПоиск.Получить();
		
		Если Разрешен Тогда
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
		Иначе
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Запретить);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбсужденияПодключены" Тогда 
		ПриИзмененииСостоянияПодключенияОбсуждений(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьУправлениеМероприятиямиПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИспользоватьУправлениеМероприятиямиПриИзмененииПродолжение",
		ЭтотОбъект,
		Новый Структура("Отказ", Ложь));
	
	ВключенРабочийКалендарь = Не ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьРабочийКалендарь;
	ВключеноУправлениеМероприятиями = Не ИспользоватьУправлениеМероприятиями И НаборКонстант.ИспользоватьУправлениеМероприятиями;
	Если НаборКонстант.ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьУправлениеМероприятиями
		И (ВключенРабочийКалендарь Или ВключеноУправлениеМероприятиями) Тогда
		
		Текст = НСтр("ru = 'Включено использование рабочего календаря и управление мероприятиями. 
                      |Для работы необходимо заполнить календарь данными мероприятий.
                      |При сохранении настроек будет произведено заполнение календаря. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУправлениеМероприятиямиПриИзмененииПродолжение(Результат, Параметры) Экспорт 
	
	Отказ = Параметры.Отказ;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		НаборКонстант.ИспользоватьУправлениеМероприятиями = Не НаборКонстант.ИспользоватьУправлениеМероприятиями;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаМероприятияНастроить.Доступность =
		НаборКонстант.ИспользоватьУправлениеМероприятиями;
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУведомленияПриИзменении(Элемент)
	
	Элементы.НастроитьУведомления.Доступность = НаборКонстант.ИспользоватьУведомления;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБизнесСобытияПриИзменении(Элемент)
	
	Элементы.ГруппаСрокХраненияБизнесСобытий.Доступность = НаборКонстант.ИспользоватьБизнесСобытия;
	Элементы.ИспользоватьУведомления.Доступность = НаборКонстант.ИспользоватьБизнесСобытия;
	
	Если Не НаборКонстант.ИспользоватьБизнесСобытия Тогда
		НаборКонстант.ИспользоватьУведомления = Ложь;
		Элементы.НастроитьУведомления.Доступность = НаборКонстант.ИспользоватьУведомления;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРабочийКалендарьПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИспользоватьРабочийКалендарьПриИзмененииПродолжение",
		ЭтотОбъект,
		Новый Структура("Отказ", Ложь));
	
	ВключенРабочийКалендарь = Не ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьРабочийКалендарь;
	ВключеноУправлениеМероприятиями = Не ИспользоватьУправлениеМероприятиями И НаборКонстант.ИспользоватьУправлениеМероприятиями;
	Если НаборКонстант.ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьУправлениеМероприятиями
		И (ВключенРабочийКалендарь Или ВключеноУправлениеМероприятиями) Тогда
		
		Текст = НСтр("ru = 'Включено использование рабочего календаря и управление мероприятиями. 
                      |Для работы необходимо заполнить календарь данными мероприятий.
                      |При сохранении настроек будет произведено заполнение календаря. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРабочийКалендарьПриИзмененииПродолжение(Результат, Параметры) Экспорт 
	
	Отказ = Параметры.Отказ;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		НаборКонстант.ИспользоватьРабочийКалендарь = Не НаборКонстант.ИспользоватьРабочийКалендарь;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИспользоватьРабочийКалендарьПриИзмененииЗавершение",
		ЭтотОбъект,
		Новый Структура("Отказ", Ложь));
	
	ВключенРабочийКалендарь = Не ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьРабочийКалендарь;
	ВключеныОтсутствия = Не ИспользоватьОтсутствия И НаборКонстант.ИспользоватьОтсутствия;
	Если НаборКонстант.ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьОтсутствия
		И (ВключенРабочийКалендарь Или ВключеныОтсутствия) Тогда
		
		Текст = НСтр("ru = 'Включено использование рабочего календаря и отсутствий. 
                      |Для работы необходимо заполнить календарь данными отсутствий.
                      |При сохранении настроек будет произведено заполнение календаря. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРабочийКалендарьПриИзмененииЗавершение(Результат, Параметры) Экспорт 
	
	Отказ = Параметры.Отказ;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		НаборКонстант.ИспользоватьРабочийКалендарь = Не НаборКонстант.ИспользоватьРабочийКалендарь;
	Иначе
		НаборКонстант.ИспользоватьНапоминанияПользователя = НаборКонстант.ИспользоватьРабочийКалендарь;
		Элементы.ИспользоватьНапоминанияПользователя.Доступность = НаборКонстант.ИспользоватьРабочийКалендарь;
		Если Не НаборКонстант.ИспользоватьРабочийКалендарь Тогда
			НаборКонстант.ИспользоватьСинхронизациюКалендарей = Ложь;
		КонецЕсли;
		НастроитьЭлементИспользоватьСинхронизациюКалендарей(
			Элементы.ГруппаИспользоватьСинхронизациюКалендарей,
			Элементы.ГруппаИспользоватьСинхронизациюКалендарейНастроить,
			НаборКонстант.ИспользоватьРабочийКалендарь,
			НаборКонстант.ИспользоватьСинхронизациюКалендарей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнструкцииПриИзменении(Элемент)
	
	Элементы.ЗагрузитьТиповыеИнструкции.Доступность = НаборКонстант.ИспользоватьИнструкции;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭлектронноЦифровыеПодписиПриИзменении(Элемент)
	
	Элементы.НастроитьЭП.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи;
	Элементы.МашиночитаемыеДоверенности.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи;
	Элементы.СертификатыИКриптопровайдеры.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи
		Или НаборКонстант.ИспользоватьШифрование;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШифрованиеПриИзменении(Элемент)
	
	Элементы.НастроитьЭП.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи;
	Элементы.МашиночитаемыеДоверенности.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи;
	Элементы.СертификатыИКриптопровайдеры.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи
		Или НаборКонстант.ИспользоватьШифрование;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСхемыПомещенийПриИзменении(Элемент)
	
	Элементы.ИспользоватьБронированиеПомещений.Доступность = НаборКонстант.ИспользоватьСхемыПомещений;
	
	Если Не НаборКонстант.ИспользоватьСхемыПомещений Тогда
		НаборКонстант.ИспользоватьБронированиеПомещений = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВерсионированиеНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.НастройкиВерсионированияОбъектов.Форма.НастройкиХраненияИстории");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВерсионированиеОбъектовПриИзменении(Элемент)
	
	Элементы.НастроитьВерсионирование.Доступность = НаборКонстант.ИспользоватьВерсионированиеОбъектов;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетДоступаКПерсональнымДаннымПриИзменении(Элемент)
	
	Элементы.СобытияДоступаКПерсональнымДанным.Доступность =
		НаборКонстант.ИспользоватьУчетДоступаКПерсональнымДанным;
	
	Элементы.НастройкиРегистрацииСобытийДоступаКПерсональнымДанным.Доступность =
		НаборКонстант.ИспользоватьУчетДоступаКПерсональнымДанным;
	
	Элементы.ИспользоватьСкрытиеПерсональныхДанныхСубъектов.Доступность = 
		НаборКонстант.ИспользоватьУчетДоступаКПерсональнымДанным;
	
	Если Не НаборКонстант.ИспользоватьУчетДоступаКПерсональнымДанным Тогда
		НаборКонстант.ИспользоватьСкрытиеПерсональныхДанныхСубъектов = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтсутствияПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИспользоватьОтсутствияПриИзмененииПродолжение",
		ЭтотОбъект,
		Новый Структура("Отказ", Ложь));
	
	ВключенРабочийКалендарь = Не ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьРабочийКалендарь;
	ВключеныОтсутствия = Не ИспользоватьОтсутствия И НаборКонстант.ИспользоватьОтсутствия;
	Если НаборКонстант.ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьОтсутствия
		И (ВключенРабочийКалендарь Или ВключеныОтсутствия) Тогда
		
		Текст = НСтр("ru = 'Включено использование рабочего календаря и отсутствий. 
                      |Для работы необходимо заполнить календарь данными отсутствий.
                      |При сохранении настроек будет произведено заполнение календаря. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтсутствияПриИзмененииПродолжение(Результат, Параметры) Экспорт 

	Отказ = Параметры.Отказ;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		НаборКонстант.ИспользоватьОтсутствия = Не НаборКонстант.ИспользоватьОтсутствия;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбсужденияПодключеныПриИзменении(Элемент)
	
	ОбсужденияПодключены = Не ОбсужденияПодключены;

	Если ОбсужденияСлужебныйКлиент.Подключены() Тогда
		ОбсужденияСлужебныйКлиент.ПоказатьОтключение();
	Иначе 
		ОбсужденияСлужебныйКлиент.ПоказатьПодключение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСинхронизациюКалендарейПриИзменении(Элемент, ИспользоватьРабочийКалендарь, ИспользоватьСинхронизациюКалендарей)
	
	НастроитьЭлементИспользоватьСинхронизациюКалендарей(
		Элементы.ГруппаИспользоватьСинхронизациюКалендарей,
		Элементы.ГруппаИспользоватьСинхронизациюКалендарейНастроить,
		НаборКонстант.ИспользоватьРабочийКалендарь,
		НаборКонстант.ИспользоватьСинхронизациюКалендарей);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЧатБотаПриИзменении(Элемент)
	
	Элементы.НастройкиЧатБота.Доступность = НаборКонстант.ИспользоватьЧатБота;
	
	Если НаборКонстант.ИспользоватьЧатБота И Не ЗначениеЗаполнено(ЧатБотПриОткрытии) Тогда
		Состояние(НСтр("ru = 'Создаем пользователя чат-бота. Пожалуйста, подождите...'"));
		ПользовательСсылка = СоздатьПользователяИУстановитьВКонстантуЧатБот("Ася (бот в помощь)");
		Записать();
		ЧатБотПриОткрытии = ПользовательСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьЗамерыПроизводительностиПриИзменении(Элемент)
	
	Элементы.ЗаписыватьЗамерыВремениВоВнешнийБуферДанных.Доступность =
		НаборКонстант.ВыполнятьЗамерыПроизводительности;

	Элементы.ГруппаПериодЗамеров.Доступность =
		НаборКонстант.ВыполнятьЗамерыПроизводительности;
		
	Элементы.КаталогВнешнегоБуфераДанных.Доступность =
		НаборКонстант.ВыполнятьЗамерыПроизводительности
		И НаборКонстант.ЗаписыватьЗамерыВремениВоВнешнийБуферДанных;
	
	Если Не НаборКонстант.ВыполнятьЗамерыПроизводительности Тогда
		НаборКонстант.ЗаписыватьЗамерыВремениВоВнешнийБуферДанных = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписыватьЗамерыВремениВоВнешнийБуферДанныхПриИзменении(Элемент)
	
	Элементы.КаталогВнешнегоБуфераДанных.Доступность =
		НаборКонстант.ВыполнятьЗамерыПроизводительности
		И НаборКонстант.ЗаписыватьЗамерыВремениВоВнешнийБуферДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАктуализациюДанныхПриИзменении(Элемент)
	
	Элементы.ГруппаИспользоватьАктуализациюДанныхНастроить.Доступность =
		НаборКонстант.ИспользоватьАктуализациюДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешниеПриглашенияПриИзменении(Элемент)
	
	Элементы.УчетнаяЗаписьДляРаботыСПриглашениями.Доступность =
		НаборКонстант.ИспользоватьВнешниеПриглашения;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧислоПотоковОбновленияКэширующихДанныхПриИзменении(Элемент)
	
	Элементы.ЧислоПотоковОбновленияКэширующихДанныхЕдиницыИзмерения.Заголовок =
		ПодписьПотоков(НаборКонстант.ЧислоПотоковОбновленияКэширующихДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧислоПотоковДолгогоОбновленияКэширующихДанныхПриИзменении(Элемент)
	
	Элементы.ЧислоПотоковДолгогоОбновленияКэширующихДанныхЕдиницыИзмерения.Заголовок =
		ПодписьПотоков(НаборКонстант.ЧислоПотоковДолгогоОбновленияКэширующихДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиЭП(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкиЭлектронныхПодписей");
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыИКриптопровайдеры(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Программы");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОбсуждений(Команда)
	
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаОбсуждений");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУведомлений(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.НастройкаУведомлений");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПрокси(Команда)
	
	ОткрытьФорму("Общаяформа.ПараметрыПроксиСервера",,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРаботыСРечью(Команда)
	
	ПерейтиПоНавигационнойСсылке("e1cib/app/Обработка.ПанельАдминистрированияРаботыСРечью");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТиповыеИнструкции(Команда)
	
	ОткрытьФорму("Обработка.ЗагрузкаТиповыхИнструкций.Форма.Форма", , ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЧатБота(Команда)
	
	Если Модифицированность Тогда 
		Записать();
	КонецЕсли;
	
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкиЧатБота");
	
КонецПроцедуры

&НаКлиенте
Процедура РегиональныеНастройки(Команда)
	
	ОткрытьФорму("ОбщаяФорма.РегиональныеНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура МашиночитаемыеДоверенности(Команда)
	
	МашиночитаемыеДоверенностиКлиент.ОткрытьОбщуюФормуСписковМЧД();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРабочийКалендарьМероприятиями()
		
	ВыборкаМероприятия = Справочники.Мероприятия.Выбрать();
	
	Пока ВыборкаМероприятия.Следующий() Цикл
		
		РаботаСРабочимКалендаремСервер.ОбновитьЗаписиКалендаряПоПредмету(
			ВыборкаМероприятия.Ссылка,
			Истина);

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРабочийКалендарьОтсутствиями()
	
	Документы.Отсутствие.ЗаполнитьРабочийКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементИспользоватьСинхронизациюКалендарей(ГруппаСинхронизация, ГруппаНастройкиСинхронизации, ИспользоватьРабочийКалендарь, ИспользоватьСинхронизациюКалендарей)
	
	ГруппаСинхронизация.Доступность = ИспользоватьРабочийКалендарь;
	ГруппаНастройкиСинхронизации.Доступность = ИспользоватьСинхронизациюКалендарей;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСостоянияПодключенияОбсуждений(ПодключениеВыполнено = Неопределено)
	
	Если ПодключениеВыполнено = Неопределено Тогда 
		ОбсужденияПодключены = ОбсужденияСлужебныйКлиент.Подключены();
	Иначе
		ОбсужденияПодключены = ПодключениеВыполнено;
	КонецЕсли;
	
	Элементы.НастроитьОбсуждения.Доступность = ОбсужденияПодключены;
	Элементы.ГруппаЧатБот.Доступность = ОбсужденияПодключены;
	
	Если НаборКонстант.ИспользоватьЧатБота И Не ОбсужденияПодключены Тогда
	
		НаборКонстант.ИспользоватьЧатБота = Ложь;
		ЗакончитьИспользованиеЧатБота();
		ОбновитьИнтерфейс();
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьПользователя(ИмяПользователя)
	
	ПользовательСсылка = Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя, Истина);
	Если ЗначениеЗаполнено(ПользовательСсылка) Тогда
		Возврат ПользовательСсылка;
	КонецЕсли;	
	
	НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
	НовыйПользователь.Наименование = ИмяПользователя;
	НовыйПользователь.ПредставлениеВПерепискеСРангом = ИмяПользователя;
	НовыйПользователь.Недействителен = Ложь;
	НовыйПользователь.Служебный = Истина;
	
	НовыйПароль = НовыйПароль();
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	ОписаниеПользователяИБ.Имя = ИмяПользователя;
	ОписаниеПользователяИБ.ПолноеИмя = ИмяПользователя;
	ОписаниеПользователяИБ.АутентификацияСтандартная = Ложь;
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	ОписаниеПользователяИБ.Пароль = НовыйПароль;
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	НовыйПользователь.Записать();
	
	ДвДанные = БиблиотекаКартинок.Чатбот.ПолучитьДвоичныеДанные();
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвДанные);
	
	РаботаСФотографиями.ЗаписатьИзображение(АдресВременногоХранилищаФайла, 
		Новый УникальныйИдентификатор, 
		НовыйПользователь.Ссылка, ИмяПользователя);
		
	УстановитьПривилегированныйРежим(Истина);
	
	СВПодключено = ОбсужденияСлужебныйВызовСервера.Подключены();
	
	Если СВПодключено Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			НовыйПользователь.ИдентификаторПользователяИБ);
		ПользовательСВ = СистемаВзаимодействия.СоздатьПользователя(ПользовательИБ);
		ПользовательСВ.Картинка = БиблиотекаКартинок.Чатбот;
		ПользовательСВ.Записать();
	КонецЕсли;
	
	Возврат НовыйПользователь.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьПользователяИУстановитьВКонстантуЧатБот(ИмяПользователя)
	
	ПользовательСсылка = СоздатьПользователя(ИмяПользователя);
	
	УстановитьПривилегированныйРежим(Истина);
	НаборКонстант.ЧатБот = ПользовательСсылка;
	
	Возврат ПользовательСсылка;
	
КонецФункции

&НаСервере
Функция НовыйПароль()
	
	МинимальнаяДлинаПароля = ПолучитьМинимальнуюДлинуПаролейПользователей();
	Если МинимальнаяДлинаПароля <= 8 Тогда
		МинимальнаяДлинаПароля = 8;
	КонецЕсли;
	ПараметрыПароля = ПользователиСлужебный.ПараметрыПароля(МинимальнаяДлинаПароля, Истина);
	Возврат ПользователиСлужебный.СоздатьПароль(ПараметрыПароля);
	
КонецФункции 


&НаСервереБезКонтекста
Процедура ЗакончитьИспользованиеЧатБота()

	Константы.ИспользоватьЧатБота.Установить(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура НастройкиОчередиЗаданий(Команда)
	
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкиОчередиЗаданий",
		,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодписьПотоков(ЧислоПотоков)
	
	ПодписьПотоков = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru=';поток;;потока;потоков;потока'"),
		ЧислоПотоков);
	
	Возврат ПодписьПотоков;
	
КонецФункции

#КонецОбласти
