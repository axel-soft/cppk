
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МаксимальныйРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла() / (1024*1024);
	
	Элементы.ИспользоватьGhostscript.Доступность = НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF;
	
	ИспользоватьGhostscriptПриОткрытии = НаборКонстант.ИспользоватьGhostscript;
	ИспользоватьImageMagickДляРаспознаванияPDFПриОткрытии = НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF;
	
	Если Не НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF Тогда
		НаборКонстант.ПоказыватьPdfСредствами1С = Истина;
		Элементы.ПоказыватьPdfСредствами1С.Доступность = Ложь;
	КонецЕсли;	
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Элементы.МаксимальныйРазмерФайла.Доступность = Ложь;
		Элементы.ГруппаТипХранения.Видимость = Ложь;
		Элементы.ГруппаРасширение.Видимость = Ложь;
		Элементы.НастройкаАвтоматическойЗагрузкиФайлов.Видимость = Ложь;
		Элементы.ГруппаРаспознавание.Видимость = Ложь;
		Элементы.ГруппаImageMagick.Видимость = Ложь;
		Элементы.ГруппаНеактивныеВерсии.Видимость = Ложь;
		
	Иначе
		
		Элементы.СписокЗапрещенныхРасширений.Доступность = НаборКонстант.ЗапрещатьЗагрузкуФайловПоРасширению;
		Элементы.ОткрытьТомаХраненияФайлов.Доступность = НаборКонстант.ХранитьФайлыВТомахНаДиске;
		ХранитьФайлыВТомахНаДискеНачальноеЗначение = НаборКонстант.ХранитьФайлыВТомахНаДиске;
		Элементы.ПутьКПрограммеКонвертацииPDF.Доступность = НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF;
		
		ОбновитьДоступностьГруппыПрограммРаспознавания(ЭтаФорма);
		ОбновитьДоступностьКомандНастройкиРаспознавания(ЭтаФорма);
		
		Если Не ПолучитьФункциональнуюОпцию("УдалятьНеактивныеВерсии") Тогда 
			Элементы.ГруппаНастроекОчистки.Доступность = Ложь;
			Элементы.ОчиститьСейчас.Доступность = Ложь;
		КонецЕсли;
		
		// для установки в значение по умолчанию - 180 дней
		СрокХраненияНеактивныхВерсийЗначение = РаботаСФайламиВызовСервера.ПолучитьСрокХраненияНеактивныхВерсий();
		Если НаборКонстант.СрокХраненияНеактивныхВерсий = 0 Тогда
			НаборКонстант.СрокХраненияНеактивныхВерсий = СрокХраненияНеактивныхВерсийЗначение;
		КонецЕсли;
		
		Элементы.ПутьСохраненияУдаляемыхВерсий.АвтоОтметкаНезаполненного = НаборКонстант.УдалятьНеактивныеВерсии;
		
		// для установки в значение по умолчанию - Электронная почта
		ТипОповещения = РаботаСФайламиВызовСервера.ПолучитьТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий();
		Если НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий.Пустая() Тогда
			НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = ТипОповещения;
		КонецЕсли;
		
		ДоступноПоле = (НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = Перечисления.ТипыОповещения.Ознакомление);
		Элементы.ПапкаДляХраненияОтчетовОбУдалении.Доступность = ДоступноПоле;
		
		ПутьСохраненияУдаляемыхВерсий = СформироватьПутьWindowsLinux(НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows, 
			НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux);
			
	КонецЕсли;
	
	Элементы.ГруппаСрокХраненияГор.Доступность 
		= НаборКонстант.ИспользоватьПредпросмотрФайлов;
	
	Если Не ЗначениеЗаполнено(НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий) Тогда
		НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий =
			Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	СпособВставкиШтампаЭПВPDF = РаботаСФайламиВызовСервера.ПолучитьСпособВставкиШтампаЭПВPDF();
	Если СпособВставкиШтампаЭПВPDF = Перечисления.СпособыВставкиШтампаЭПВPDF.ImageMagickGhostscript Тогда
		Элементы.ИспользоватьGhostscript.Подсказка 
		= НСтр("ru = 'Если настройка включена и на сервере (или клиенте) установлена программа Ghostscript, 
		|для PDF-файлов станут доступны: сканирование, потоковое сканирование, предпросмотр файлов,
		|распознавание и автоматическая вставка штампа ЭП (с установленным ImageMagick).
		|Если настройка отключена, перечисленные возможности недоступны.'");
	Иначе
		Элементы.ИспользоватьGhostscript.Подсказка 
		= НСтр("ru = 'Если настройка включена и на сервере (или клиенте) установлена программа Ghostscript, 
		|для PDF-файлов станут доступны: сканирование, потоковое сканирование и распознавание, предпросмотр файлов.
		|Если настройка отключена, перечисленные возможности недоступны.'");
	КонецЕсли;       
	
	Элементы.КачествоПреобразованияPDFДляПредпросмотра.Видимость = Не НаборКонстант.ПоказыватьPdfСредствами1С;
			
	РаботаСФормамиХолдинг.ИзменитьФормуНастроекПрограммы(ЭтотОбъект);
	
	ПредпросмотрПолностью = (НаборКонстант.МаксимальноеЧислоСтраницДляПредпросмотра = 0);
	ПредпросмотрЧастично = Не ПредпросмотрПолностью; 
	Элементы.МаксимальноеЧислоСтраницДляПредпросмотра.Видимость = Не ПредпросмотрПолностью;
	Если ПредпросмотрПолностью Тогда
		Элементы.ПредпросмотрЧастично.Заголовок = НСтр("ru = 'Показывать частично'");
	Иначе
		Элементы.ПредпросмотрЧастично.Заголовок = НСтр("ru = 'Показывать не более'");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ХранитьФайлыВТомахНаДиске = Константы.ХранитьФайлыВТомахНаДиске.Получить();
		ХранениеВТомахНаДискеВключено = ТекущийОбъект.ХранитьФайлыВТомахНаДиске И Не ХранитьФайлыВТомахНаДиске;
		Если ХранениеВТомахНаДискеВключено Тогда
			
			Если ФайловыеФункции.ЕстьТомаХраненияФайлов() Тогда
				ХранениеВТомахНаДискеВключено = Ложь;
			КонецЕсли;
			
			// Создаем группу томов
			Группа = Справочники.ТомаХраненияФайлов.НайтиПоНаименованию(НСтр("ru = 'Группа по умолчанию'"), Истина);
			Если Не ЗначениеЗаполнено(Группа) Тогда
				Группа = Справочники.ТомаХраненияФайлов.СоздатьГруппу();
				Группа.Наименование = НСтр("ru = 'Группа по умолчанию'");
				Группа.Записать();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьРаспознавание = Константы.ИспользоватьРаспознавание.Получить();
	ВключеноИспользованиРаспознаванияCuneiForm = ТекущийОбъект.ИспользоватьРаспознавание = Истина
		И ИспользоватьРаспознавание = Ложь
		И НаборКонстант.ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.CuneiForm;
		
	Если ОбщегоНазначения.ЭтоWindowsСервер()
		И НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF
		И ЗначениеЗаполнено(НаборКонстант.ПутьКПрограммеКонвертацииPDF) Тогда
			
		Если СтрДлина(НаборКонстант.ПутьКПрограммеКонвертацииPDF) > 3
			И Сред(НаборКонстант.ПутьКПрограммеКонвертацииPDF, 2, 1) = ":" Тогда
				
			Файл = Новый Файл(НаборКонстант.ПутьКПрограммеКонвертацииPDF);	
			Если Не Файл.Существует() Тогда
				ВызватьИсключение НСтр("ru = 'Неверный путь (на сервере) к Image Magick: '") + Символы.ВК + НаборКонстант.ПутьКПрограммеКонвертацииPDF;
			КонецЕсли;	  
			
		Иначе
			
			Если Не РаботаСКартинками.УстановленImageMagick(НаборКонстант.ПутьКПрограммеКонвертацииPDF) Тогда
				ВызватьИсключение НСтр("ru = 'На сервере не установлен Image Magick: '") + Символы.ВК + НаборКонстант.ПутьКПрограммеКонвертацииPDF;
			КонецЕсли;	  
			
		КонецЕсли;	
			
	КонецЕсли;	

	Если ОбщегоНазначения.ЭтоLinuxСервер()
		И НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF Тогда
			
		Если ЗначениеЗаполнено(НаборКонстант.ПутьКПрограммеКонвертацииPDF) Тогда
				
			ВызватьИсключение НСтр("ru = 'Путь (на Linux сервере) к Image Magick должен быть пустым'");
			
		КонецЕсли;	  
			
		Если Не РаботаСКартинками.УстановленImageMagick(НаборКонстант.ПутьКПрограммеКонвертацииPDF) Тогда
			ВызватьИсключение НСтр("ru = 'На сервере не установлен Image Magick: '") + Символы.ВК + НаборКонстант.ПутьКПрограммеКонвертацииPDF;
		КонецЕсли;	  
			
	КонецЕсли;	 
	
	Если НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF Тогда
		РаботаСКартинками.ОбновитьВерсиюImageMagick();
	КонецЕсли;	
	
	ОбновлениеИнформационнойБазыДокументооборот.ЗаполнитьИспользованиеLibreOfficeПодLinux();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
	Если ХранениеВТомахНаДискеВключено Тогда
		Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение2") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжение2",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ПоказатьПредупреждение(
				ОписаниеОповещения,
				НСтр("ru = 'Включено хранение файлов в томах на диске, но тома еще не указаны.
					|Программа будет продолжать сохранять файлы в информационной базе до тех пор, пока не будет указан хотя бы один том хранения файлов.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВключеноИспользованиРаспознаванияCuneiForm Тогда
		Если Не ПараметрыЗаписи.Свойство("ПоказанВопрос3") Тогда
			Текст = НСтр("ru = 'Включено распознавание. 
			|Для работы распознавания необходимо установить бесплатную программу CuneiForm.
			|Поставить в очередь на распознавание все существующие файлы изображений?'");		
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжение3",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет); 
			Возврат;	  
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение2(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение2", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение3(Результат, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказанВопрос3", Истина);
	Если Результат = КодВозвратаДиалога.Да Тогда
		Состояние(НСтр("ru = 'Формируется очередь распознавания изображений. Пожалуйста подождите...'"));				
		ЧислоКартинок = ПоставитьВсеКартинкиВОчередьРаспознавания();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Очередь распознавания изображений сформирована (файлов: %1).'"), ЧислоКартинок);
		Состояние(ТекстСообщения);		
	КонецЕсли;
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФайламиВызовСервера.НормализоватьЯзыкРаспознавания();
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		МаксимальныйРазмерФайлаМБ = МаксимальныйРазмерФайла * (1024*1024);
		Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайлаМБ);
		
		РаботаСФайламиВызовСервера.НормализоватьНастройкиРаспознаванияАвтоматическойЗагрузкиФайлов();
	КонецЕсли;
	
	Если ИспользоватьGhostscriptПриОткрытии <> НаборКонстант.ИспользоватьGhostscript Тогда
		
		Если Не НаборКонстант.ИспользоватьGhostscript Тогда
			
			Константы.СпособВставкиШтампаЭПВPDF.Установить(
				Перечисления.СпособыВставкиШтампаЭПВPDF.Встроенный);
			
		КонецЕсли;	
		
		ИспользоватьGhostscriptПриОткрытии = НаборКонстант.ИспользоватьGhostscript;
		
	КонецЕсли;	

	Если ИспользоватьImageMagickДляРаспознаванияPDFПриОткрытии <> НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF Тогда
	
		ИспользоватьImageMagickДляРаспознаванияPDFПриОткрытии = НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF;
		
		Если Не НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF Тогда
			Константы.СпособВставкиШтампаЭПВPDF.Установить(Перечисления.СпособыВставкиШтампаЭПВPDF.Встроенный);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗапретЗагрузкиФайловПоРасширениюПриИзменении(Элемент)
	
	Элементы.СписокЗапрещенныхРасширений.Доступность = НаборКонстант.ЗапрещатьЗагрузкуФайловПоРасширению;
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРаспознаваниеПриИзменении(Элемент)
	
	ОбновитьДоступностьГруппыПрограммРаспознавания(ЭтаФорма);
	ОбновитьДоступностьКомандНастройкиРаспознавания(ЭтаФорма);
	
	Если Не НаборКонстант.ИспользоватьРаспознавание Тогда
		НаборКонстант.ИспользуетсяРаспознаваниеТаймлист = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаРаспознаванияПриИзменении(Элемент)
	
	ОбновитьДоступностьКомандНастройкиРаспознавания(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяРаспознаваниеТаймлистПриИзменении(Элемент)
	
	Элементы.НастройкиСервисаТаймлист.Доступность = НаборКонстант.ИспользуетсяРаспознаваниеТаймлист;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НаборКонстант.ХранитьФайлыВТомахНаДиске Тогда
		
		Если МаксимальныйРазмерФайла > 1024 Тогда
			
			ТекстОшибки = НСтр("ru = 'Максимальный размер файла превышает 1024 Мб'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "МаксимальныйРазмерФайла", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаборКонстант.УдалятьНеактивныеВерсии Тогда
		
		ПутьСохраненияВерсий = "";
		
		ТипПлатформыСервера = ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера();
		
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			ПутьСохраненияВерсий = НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows;
		Иначе
			ПутьСохраненияВерсий = НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux;
		КонецЕсли;
		
		Если ПустаяСтрока(ПутьСохраненияВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнен путь сохранения очищаемых версий'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ПутьСохраненияУдаляемыхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			Если Не ПустаяСтрока(ПутьСохраненияВерсий) 
				И (Лев(ПутьСохраненияВерсий, 2) <> "\\" 
				ИЛИ Найти(ПутьСохраненияВерсий, ":") <> 0) Тогда
				
				ТекстОшибки = НСтр("ru = 'Путь сохранения очищаемых версий должен быть в формате UNC (\\servername\resource)'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ПутьСохраненияУдаляемыхВерсий", , Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			
			ТипПлатформыСервера = ФайловыеФункции.ТипПлатформыСервера();
			ИмяКаталогаТестовое = ПутьСохраненияВерсий;
			ИмяКаталогаТестовое = 
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталогаТестовое, ТипПлатформыСервера);
			ИмяКаталогаТестовое = ИмяКаталогаТестовое + "ПроверкаДоступа\";
			СоздатьКаталог(ИмяКаталогаТестовое);
			УдалитьФайлы(ИмяКаталогаТестовое);
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Путь к каталогу сохранения очищаемых версий некорректен. Возможно учетная запись, от лица которой работает сервер 1С:Предприятия, не имеет прав доступа к каталогу:
				|
				|%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,
				"ПутьСохраненияУдаляемыхВерсий",, Отказ);
			
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не указан ответственный за очистку неактивных версий'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НаборКонстант.СрокХраненияНеактивныхВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не указан срок хранения неактивных версий'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.СрокХраненияНеактивныхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не указан тип оповещения ответственного за удаление неактивных версий'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = Перечисления.ТипыОповещения.Ознакомление Тогда
			Если Не ЗначениеЗаполнено(НаборКонстант.ПапкаДляХраненияОтчетовОбУдалении) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнена папка для хранения отчетов об удалении'");
				ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки,,
					"НаборКонстант.ПапкаДляХраненияОтчетовОбУдалении",,
					Отказ);
			КонецЕсли;
			
		Иначе // email
			ПредставлениеПочтовогоАдреса = РаботаСФайламиВызовСервера.ПолучитьАдресДляОтправкиУведомленияСотруднику(
				НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий);
			Если Не ЗначениеЗаполнено(ПредставлениеПочтовогоАдреса) Тогда
				ТекстОшибки = НСтр("ru = 'У ответственного за удаление неактивных версий не заполнен адрес электронной почты'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсийПриИзменении(Элемент)
	
	ДоступноПоле = (НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = ПредопределенноеЗначение("Перечисление.ТипыОповещения.Ознакомление"));
	Элементы.ПапкаДляХраненияОтчетовОбУдалении.Доступность = ДоступноПоле;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКонстанты()
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьНеактивныеВерсииПриИзменении(Элемент)
	
	СохранитьКонстанты();
	ОбновитьИнтерфейс();
	
	Элементы.ГруппаНастроекОчистки.Доступность = НаборКонстант.УдалятьНеактивныеВерсии;
	Элементы.ОчиститьСейчас.Доступность = НаборКонстант.УдалятьНеактивныеВерсии;
	Элементы.ПутьСохраненияУдаляемыхВерсий.АвтоОтметкаНезаполненного = НаборКонстант.УдалятьНеактивныеВерсии;
	
КонецПроцедуры

&НаСервере
Функция СохранитьФормуИПолучитьЕстьТомаХраненияФайлов()
	
	Записать();
	Возврат ФайловыеФункции.ЕстьТомаХраненияФайлов();
	
КонецФункции

&НаКлиенте
Процедура ХранитьФайлыВТомахНаДискеПриИзменении(Элемент)
	
	Элементы.ОткрытьТомаХраненияФайлов.Доступность = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	
	ЕстьТомаХраненияФайлов = СохранитьФормуИПолучитьЕстьТомаХраненияФайлов();
	ОбновитьИнтерфейс();
	
	
	Если ХранитьФайлыВТомахНаДискеНачальноеЗначение = Ложь И
		НаборКонстант.ХранитьФайлыВТомахНаДиске = Истина И
		Не ЕстьТомаХраненияФайлов Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Включено хранение файлов в томах на диске, но тома еще не указаны.
			|Программа будет продолжать сохранять файлы в информационной базе до тех пор, пока не будет указан хотя бы один том хранения файлов.'"));
		
	КонецЕсли;
	
	ХранитьФайлыВТомахНаДискеНачальноеЗначение = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьСохраненияУдаляемыхВерсийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПредпросмотрФайловПриИзменении(Элемент)
	
	Элементы.ГруппаСрокХраненияГор.Доступность 
		= НаборКонстант.ИспользоватьПредпросмотрФайлов;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаУдалениеНеактивныхВерсийОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(
		НаборКонстант, "ОтветственныйЗаУдалениеНеактивныхВерсий", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаАвтоматическойЗагрузкиФайлов(Команда)
	
	ОбработчикОтветаВопроса = 
		Новый ОписаниеОповещения("НастройкаАвтоматическойЗагрузкиФайловПродолжение", ЭтотОбъект);
	
	Если ИзмененыНастройкиРаспознавания(
		НаборКонстант.ИспользоватьРаспознавание, НаборКонстант.ПрограммаРаспознавания) Тогда
		
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(
			ОбработчикОтветаВопроса,
			НСтр("ru = 'Для настройки автоматической загрузки файлов необходимо записать изменения настроек распознавания.
			|
			|Записать?'"),
			НСтр("ru = 'Записать изменения'"),
			НСтр("ru = 'Отмена'"));
			
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.НастройкаАвтоматическойЗагрузкиФайлов");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАвтоматическойЗагрузкиФайловПродолжение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНастройкиРаспознавания(
		НаборКонстант.ИспользоватьРаспознавание,
		НаборКонстант.ПрограммаРаспознавания);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаАвтоматическойЗагрузкиФайлов");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРаспознаванияCuneiForm(Команда)
	
	ОткрытьФорму("Справочник.Файлы.Форма.НастройкиРаспознаванияCuneiForm",,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСервисаРаспознавания(Команда)
	
	ОткрытьФорму("Справочник.Файлы.Форма.НастройкиСервисаРаспознавания",,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСервисаТаймлист(Команда)
	
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.ПодключениеКСервисуТаймлист",,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТомаХраненияФайлов(Команда)
	ОткрытьФорму("Справочник.ТомаХраненияФайлов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСейчас(Команда)
	ОткрытьФорму("Обработка.ОчисткаУстаревшихВерсийФайлов.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныИменФайлов(Команда)
	ОткрытьФорму("Справочник.ШаблоныИменФайлов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСканирования(Команда)
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаСканирования");
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрПолностьюПриИзменении(Элемент)     
	
	ПредпросмотрЧастично = Не ПредпросмотрПолностью; 
	ПредпросмотрПолностьюИлиЧастично();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрЧастичноПриИзменении(Элемент)
	
	ПредпросмотрПолностью = Не ПредпросмотрЧастично;
	ПредпросмотрПолностьюИлиЧастично();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПоставитьВсеКартинкиВОчередьРаспознавания()
	УстановитьПривилегированныйРежим(Истина);
	
	ЧислоКартинок = 0;
	ИспользоватьImageMagickДляРаспознаванияPDF = РаботаСФайламиВызовСервера.ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка,
		|	Файлы.ТекущаяВерсияРасширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
			Выборка.ТекущаяВерсияРасширение, ИспользоватьImageMagickДляРаспознаванияPDF,
			Перечисления.ПрограммыРаспознавания.CuneiForm);
		
		Если РасширениеПоддерживается Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз;
			Объект.ЯзыкРаспознавания = "7"; // русско-английский
			Объект.Записать();
			ЧислоКартинок = ЧислоКартинок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка,
		|	ВерсииФайлов.Расширение
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
			Выборка.Расширение, ИспользоватьImageMagickДляРаспознаванияPDF,
			Перечисления.ПрограммыРаспознавания.CuneiForm);
		
		Если РасширениеПоддерживается Тогда
			
			СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать;
			РегистрыСведений.ТекстыВерсийФайлов.ДобавитьСтатусРаспознавания(Выборка.Ссылка, СтатусРаспознаванияТекста);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЧислоКартинок;
	
КонецФункции

&НаКлиенте
Процедура ПутьСохраненияУдаляемыхВерсийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Заголовок, ПолныйПутьWindows, ПолныйПутьLinux",
		НСтр("ru='Путь для перемещения устаревших версий'"),
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows, 
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПутьСохраненияУдаляемыхВерсийНачалоВыбораПродолжение",
		ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПутиWindowsLinux", ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьСохраненияУдаляемыхВерсийНачалоВыбораПродолжение(КодВозврата, Параметры) Экспорт 
	
	Если ТипЗнч(КодВозврата) = Тип("Структура") Тогда
		
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows = КодВозврата.ПолныйПутьWindows;
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux = КодВозврата.ПолныйПутьLinux;
		
		ПутьСохраненияУдаляемыхВерсий = СформироватьПутьWindowsLinux(НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows, 
			НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux);
		
	КонецЕсли;	

КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПутьWindowsLinux(ПолныйПутьWindows, ПолныйПутьLinux)
	
	СтрокаПути = "";
	
	Если ЗначениеЗаполнено(ПолныйПутьWindows) Тогда
		СтрокаПути = СтрокаПути + ПолныйПутьWindows;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПолныйПутьLinux) Тогда
		
		Если ЗначениеЗаполнено(СтрокаПути) Тогда
			СтрокаПути = СтрокаПути + ";";
		КонецЕсли;	
		
		СтрокаПути = СтрокаПути + ПолныйПутьLinux;
	КонецЕсли;	
	
	Возврат СтрокаПути;
	
КонецФункции	

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьImageMagickДляРаспознаванияPDFПриИзменении(Элемент)
	
	Элементы.ПутьКПрограммеКонвертацииPDF.Доступность = НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF;
	Элементы.ИспользоватьGhostscript.Доступность = НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF;

	Если Не НаборКонстант.ИспользоватьImageMagickДляРаспознаванияPDF Тогда
		НаборКонстант.ПоказыватьPdfСредствами1С = Истина;
		Элементы.ПоказыватьPdfСредствами1С.Доступность = Ложь;
	Иначе	
		Элементы.ПоказыватьPdfСредствами1С.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрПолностьюИлиЧастично()     
	
	Если ПредпросмотрПолностью Тогда
		НаборКонстант.МаксимальноеЧислоСтраницДляПредпросмотра = 0;
	Иначе	
		НаборКонстант.МаксимальноеЧислоСтраницДляПредпросмотра = 10;
	КонецЕсли;	
	
	Элементы.МаксимальноеЧислоСтраницДляПредпросмотра.Видимость = Не ПредпросмотрПолностью;
	
	Если ПредпросмотрПолностью Тогда
		Элементы.ПредпросмотрЧастично.Заголовок = НСтр("ru = 'Показывать частично'");
	Иначе
		Элементы.ПредпросмотрЧастично.Заголовок = НСтр("ru = 'Показывать не более'");
	КонецЕсли;	
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область Распознавание

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьГруппыПрограммРаспознавания(Форма)
	
	Форма.Элементы.ГруппаПрограммыРаспознавания.Доступность = 
		Форма.НаборКонстант.ИспользоватьРаспознавание;
	
	Форма.Элементы.ГруппаТаймлист.Доступность = 
		Форма.НаборКонстант.ИспользоватьРаспознавание;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьКомандНастройкиРаспознавания(Форма) Экспорт
	
	Форма.Элементы.НастройкиРаспознаванияCuneiForm.Доступность =
		Форма.НаборКонстант.ИспользоватьРаспознавание
			И Форма.НаборКонстант.ПрограммаРаспознавания
			= ПредопределенноеЗначение("Перечисление.ПрограммыРаспознавания.CuneiForm");
	
	Форма.Элементы.НастройкиСервисаРаспознавания.Доступность = 
		Форма.НаборКонстант.ИспользоватьРаспознавание
			И Форма.НаборКонстант.ПрограммаРаспознавания
			= ПредопределенноеЗначение("Перечисление.ПрограммыРаспознавания.СервисРаспознавания");
	
	Форма.Элементы.НастройкиСервисаТаймлист.Доступность =
		Форма.НаборКонстант.ИспользоватьРаспознавание
		И Форма.НаборКонстант.ИспользуетсяРаспознаваниеТаймлист;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзмененыНастройкиРаспознавания(ИспользоватьРаспознавание, ПрограммаРаспознавания)
	
	Если РаботаСФайламиВызовСервера.ПолучитьИспользоватьРаспознавание() <> 
		ИспользоватьРаспознавание Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если РаботаСФайламиВызовСервера.ПрограммаРаспознавания() <> ПрограммаРаспознавания Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьНастройкиРаспознавания(ИспользоватьРаспознавание, ПрограммаРаспознавания)
	
	РаботаСФайламиВызовСервера.УстановитьИспользоватьРаспознавание(ИспользоватьРаспознавание);
	РаботаСФайламиВызовСервера.УстановитьПрограммуРаспознавания(ПрограммаРаспознавания);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецФункции

&НаКлиенте
Процедура КачествоПреобразованияPDFДляПредпросмотраОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьPdfСредствами1СПриИзменении(Элемент)
	Элементы.КачествоПреобразованияPDFДляПредпросмотра.Видимость = Не НаборКонстант.ПоказыватьPdfСредствами1С;
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьPdfСредствами1СОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГотовитьПредставленияФайловДляПредпросмотраНаКлиентеПриИзменении(Элемент)       
	
	Если НаборКонстант.ГотовитьПредставленияФайловДляПредпросмотраНаКлиенте = Истина 
		И НаборКонстант.СрокХраненияПредпросмотраФайлов < 120 Тогда
		НаборКонстант.СрокХраненияПредпросмотраФайлов = 120;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
