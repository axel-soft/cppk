#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьСрокХраненияСообщенийВИнтегрированныеСистемы();
	
	ОбновитьСписокИС();
	ОбновитьРасписаниеОбменаДанными();
	
	МассивСтрокПояснениеСрокХранения = Новый Массив;
	МассивСтрокПояснениеСрокХранения.Добавить(НСтр("ru = 'Количество времени, в течении которого будет храниться '"));
	МассивСтрокПояснениеСрокХранения.Добавить(
		Новый ФорматированнаяСтрока(НСтр("ru = 'история отправки'"),,
			Элементы.ПояснениеСрокХраненияСообщений.ЦветТекста,,
			"e1cib/list/РегистрСведений.ИсторияОтправкиСообщенийВИнтегрированныеСистемы"));
	МассивСтрокПояснениеСрокХранения.Добавить(НСтр("ru = ' и '"));
	МассивСтрокПояснениеСрокХранения.Добавить(
		Новый ФорматированнаяСтрока(НСтр("ru = 'очередь отправки'"),,
			Элементы.ПояснениеСрокХраненияСообщений.ЦветТекста,,
			"e1cib/list/РегистрСведений.ОчередьСообщенийВИнтегрированныеСистемы"));
	МассивСтрокПояснениеСрокХранения.Добавить(НСтр("ru = ' сообщений.'"));
	Элементы.ПояснениеСрокХраненияСообщений.Заголовок = Новый ФорматированнаяСтрока(МассивСтрокПояснениеСрокХранения);
	
	СопоставлятьСотрудниковПоФизЛицу = Истина;
	
	ОбменаДаннымиИспользуется = Истина;
	ОбработкаЗапросовXDTOПереопределяемый.ПриОпределенииИспользованияОбменаДаннымиСИнтегрированнымиСистемами(
		ОбменаДаннымиИспользуется);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ИмяМакета)
			И Не ЗначениеЗаполнено(ИнтегрированнаяСистема)
			И Элементы.ИнтегрированнаяСистема.СписокВыбора.Количество() > 0 Тогда
		ЗаполнитьИнтегрированнуюСистемуИзСпискаВыбора(Элементы.ИнтегрированнаяСистема.СписокВыбора[0].Значение);
	КонецЕсли;
	
	ЗаполнитьДанныеИнтегрированнойСистемы();
	ОбновитьОтображениеИнтегрированнойСистемы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьИнтегрированнойСистемы" Тогда
		ОбновитьСписокИС();
		ЗаполнитьДанныеИнтегрированнойСистемы();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДополнительныеРеквизитыИСведения"
			Или ИмяСобытия = "Запись_НаборыДополнительныхРеквизитовИСведений" Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Значение = Неопределено;
	
	Если ЗначениеЗаполнено(Настройки["ИнтегрированнаяСистема"]) Тогда
		Значение = Настройки["ИнтегрированнаяСистема"];
		
	ИначеЕсли ЗначениеЗаполнено(Настройки["ИмяМакета"]) Тогда
		Значение = Настройки["ИмяМакета"];
		
	КонецЕсли;
	
	Если Элементы.ИнтегрированнаяСистема.СписокВыбора.НайтиПоЗначению(Значение) = Неопределено Тогда
		Настройки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресСервисаПриИзменении(Элемент)
	
	ИзменитьИнтегрированнуюСистему(ИнтегрированнаяСистема, "АдресВебСервиса", АдресСервиса);
	
	Оповестить("ЗаписьИнтегрированнойСистемы");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтегрированнаяСистемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтегрированнаяСистемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьИнтегрированнуюСистемуИзСпискаВыбора(ВыбранноеЗначение);
	
	ЗаполнитьДанныеИнтегрированнойСистемы();
	ОбновитьОтображениеИнтегрированнойСистемы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтегрированнаяСистемаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьИнтегрированнуюСистему();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьСвязанныеОбъектыАвтоматическиПриИзменении(Элемент)
	
	ОбновитьИспользованиеРегламентногоЗадания(ОбновлятьСвязанныеОбъектыАвтоматически);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлятьСотрудниковПоДолжностиПриИзменении(Элемент)
	
	ИзменитьИнтегрированнуюСистему(
		ИнтегрированнаяСистема,
		"СопоставлятьСотрудниковПоДолжности",
		СопоставлятьСотрудниковПоДолжности);
	
	Оповестить("ЗаписьИнтегрированнойСистемы");
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлятьСотрудниковПоПодразделениюПриИзменении(Элемент)
	
	ИзменитьИнтегрированнуюСистему(
		ИнтегрированнаяСистема,
		"СопоставлятьСотрудниковПоПодразделению",
		СопоставлятьСотрудниковПоПодразделению);
	
	Оповестить("ЗаписьИнтегрированнойСистемы");
	
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияСообщенийВИнтегрированныеСистемыПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИнтегрированнуюСистему(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьИнтегрированнуюСистемуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияБесшовнойИнтеграции.Форма.ДобавлениеИнтегрированнойСистемы",,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьСлужебногоПользователя(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИнтегрированнаяСистема", ИнтегрированнаяСистема);
	ПараметрыФормы.Вставить("ПредставлениеИС", ПредставлениеИС);
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияБесшовнойИнтеграции.Форма.АвторизацияВИнтегрированнойСистеме",
		ПараметрыФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписание(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДиалогНастройкиРасписанияЗавершение", ЭтотОбъект);
	
	ДиалогНастройкиРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	ДиалогНастройкиРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПредставлениеИС", ПредставлениеИС);
	ПараметрыФормы.Вставить("ИнтегрированнаяСистема", ИнтегрированнаяСистема);
	ПараметрыФормы.Вставить("ИмяМакета", ИмяМакета);
	
	ОткрытьФорму("Справочник.ПравилаЗагрузкиДанныхВДО.Форма.ФормаСписка",
		ПараметрыФормы,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияИзменений(Команда)
	
	ОбменДаннымиКлиент.ОткрытьСоставОтправляемыхДанных(ИнтегрированнаяСистема);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИнтегрированнуюСистемуКоманда(Команда)
	
	ОткрытьИнтегрированнуюСистему();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура ДиалогНастройкиРасписанияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбновитьРасписаниеОбменаДанными(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнтегрированнуюСистемуЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокИС();
	
	ИмяМакета = "";
	ИнтегрированнаяСистема = Результат;
	
	ЗаполнитьДанныеИнтегрированнойСистемы();
	ОбновитьОтображениеИнтегрированнойСистемы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеИнтегрированнойСистемы()
	
	ПредставлениеИС = "";
	АдресСервиса = "";
	СопоставлятьСотрудниковПоДолжности = Ложь;
	СопоставлятьСотрудниковПоПодразделению = Ложь;
	
	Если ЗначениеЗаполнено(ИнтегрированнаяСистема) Тогда
		СтрокиДанныеИС = ДанныеИнтегрированныхСистем.НайтиСтроки(
			Новый Структура("ИнтегрированнаяСистема", ИнтегрированнаяСистема));
		
	ИначеЕсли ЗначениеЗаполнено(ИмяМакета) Тогда
		СтрокиДанныеИС = ДанныеИнтегрированныхСистем.НайтиСтроки(
			Новый Структура("ИнтегрированнаяСистема", ИмяМакета));
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Если СтрокиДанныеИС.Количество() > 0 Тогда
		ПредставлениеИС = СтрокиДанныеИС[0].Наименование;
		АдресСервиса = СтрокиДанныеИС[0].АдресСервиса;
		СопоставлятьСотрудниковПоДолжности = СтрокиДанныеИС[0].СопоставлятьСотрудниковПоДолжности;
		СопоставлятьСотрудниковПоПодразделению = СтрокиДанныеИС[0].СопоставлятьСотрудниковПоПодразделению;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнтегрированнуюСистемуИзСпискаВыбора(ЗначениеСпискаВыбора)
	
	ИнтегрированнаяСистема = ПредопределенноеЗначение("ПланОбмена.ИнтегрированныеСистемы.ПустаяСсылка");
	ИмяМакета = "";
	Если ТипЗнч(ЗначениеСпискаВыбора) = Тип("ПланОбменаСсылка.ИнтегрированныеСистемы") Тогда
		ИнтегрированнаяСистема = ЗначениеСпискаВыбора;
	ИначеЕсли ТипЗнч(ЗначениеСпискаВыбора) = Тип("Строка") Тогда
		ИмяМакета = ЗначениеСпискаВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИнтегрированнойСистемы()
	
	ПредставлениеИСВРодительномПадеже = РодительныйПадеж(ПредставлениеИС);
	
	Элементы.ПояснениеНастройкиСопоставленияСотрудников.Заголовок = СтрШаблон(
		НСтр("ru = 'Сценарий сопоставления пользователей %1 с сотрудниками 1С:Документооборота.'"),
			ПредставлениеИСВРодительномПадеже);
	Элементы.ПояснениеПравилаИнтеграции.Заголовок = СтрШаблон(
		НСтр("ru = 'Правила загрузки данных задают соответствия между документами 1С:Документооборота и объектами %1, а также правила заполнения реквизитов.'"),
			ПредставлениеИСВРодительномПадеже);
	
	Элементы.ГруппаПравилаЗагрузки.Видимость = (ЗначениеЗаполнено(ИмяМакета)
		Или ЗначениеЗаполнено(ИнтегрированнаяСистема));
	
	ЭтоУзелСинхронизацииДанных = (Не ЗначениеЗаполнено(ИмяМакета) И ЗначениеЗаполнено(ИнтегрированнаяСистема));
	
	Элементы.ГруппаОбменДанными.Видимость = ЭтоУзелСинхронизацииДанных;
	Элементы.ИзменитьИнтегрированнуюСистемуКонтекст.Видимость = ЭтоУзелСинхронизацииДанных;
	Элементы.ИнтегрированнаяСистема.КнопкаОткрытия = ЭтоУзелСинхронизацииДанных;
	
	Элементы.ГруппаНастройкаОбмена.Видимость = ОбменаДаннымиИспользуется;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнтегрированнуюСистему()
	
	ПоказатьЗначение(, ИнтегрированнаяСистема);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сервер

&НаСервереБезКонтекста
Процедура ИзменитьИнтегрированнуюСистему(ИнтегрированнаяСистема, ИмяРеквизита, НовоеЗначение)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИнтегрированнаяСистема, ИмяРеквизита) = НовоеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ИнтегрированнаяСистемаОбъект = ИнтегрированнаяСистема.ПолучитьОбъект();
		ИнтегрированнаяСистемаОбъект.Заблокировать();
		ИнтегрированнаяСистемаОбъект[ИмяРеквизита] = НовоеЗначение;
		ИнтегрированнаяСистемаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			РаботаСИнтегрированнымиСистемами.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИспользованиеРегламентногоЗадания(Использование)
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ОбменДаннымиСИнтегрированнымиСистемами);
	Задание.Использование = Использование;
	Задание.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасписаниеОбменаДанными(Расписание = Неопределено)
	
	Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
		Элементы.ГруппаАвтообновление.Доступность = Ложь;
		Элементы.ИзменитьРасписание.Доступность = Ложь;
		Элементы.РегистрацияИзменений.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ОбменДаннымиСИнтегрированнымиСистемами);
	
	Если Расписание <> Неопределено Тогда
		Задание.Расписание = Расписание;
		Задание.Записать();
	КонецЕсли;
	
	ОбновлятьСвязанныеОбъектыАвтоматически = Задание.Использование;
	РасписаниеРегламентногоЗадания = Задание.Расписание;
	
	Элементы.РасписаниеСтрокой.Заголовок = Строка(Задание.Расписание);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокИС()
	
	РаботаСИнтегрированнымиСистемамиВызовСервера.ОбновитьСписокИС(
		Элементы.ИнтегрированнаяСистема.СписокВыбора,
		ДанныеИнтегрированныхСистем);
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервереБезКонтекста
Функция РодительныйПадеж(Знач ПредставлениеОбъекта)
	
	ЧастиПредставления = СтрРазделить(ПредставлениеОбъекта, ".", Ложь);
	Для НомерЧасти = 0 По ЧастиПредставления.ВГраница() Цикл
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиПредставления[НомерЧасти]) Тогда
			// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
			ЧастиПредставления[НомерЧасти] = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				ЧастиПредставления[НомерЧасти], 2);
			// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПредставления, ".");
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным, ПеречитыватьФорму = Истина)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	МассивЧастейРеквизитПутьКДанным = СтрРазделить(РеквизитПутьКДанным, ".");
	КонстантаИмя = "";
	Если МассивЧастейРеквизитПутьКДанным.Количество() = 2
			И НРег(МассивЧастейРеквизитПутьКДанным[0]) = НРег("НаборКонстант") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = МассивЧастейРеквизитПутьКДанным[1];
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
		Если РеквизитПутьКДанным = "СрокХраненияСообщенийВИнтегрированныеСистемы" Тогда
			НаборКонстант.СрокХраненияСообщенийВИнтегрированныеСистемы = СрокХраненияСообщенийВИнтегрированныеСистемы;
			КонстантаИмя = "СрокХраненияСообщенийВИнтегрированныеСистемы";
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьСрокХраненияСообщенийВИнтегрированныеСистемы()
	
	СрокХраненияСообщенийВИнтегрированныеСистемы = НаборКонстант.СрокХраненияСообщенийВИнтегрированныеСистемы;
	
	Если СрокХраненияСообщенийВИнтегрированныеСистемы = 0 Тогда
		СрокХраненияСообщенийВИнтегрированныеСистемы = 30; // Дней
		СохранитьЗначениеРеквизита("СрокХраненияСообщенийВИнтегрированныеСистемы");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти