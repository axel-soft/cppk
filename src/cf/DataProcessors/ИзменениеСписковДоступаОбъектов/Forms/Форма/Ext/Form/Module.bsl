#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Список выбора действий.
	СписокВыбора = Элементы.ИзмененияДоступаДействие.СписокВыбора;
	СписокВыбора.Добавить(ДействиеДобавить());
	СписокВыбора.Добавить(ДействиеУдалить());
	
	// Список выбора типов.
	СписокВыбораТипов = Элементы.ТипОбъектов.СписокВыбора;
	Для Каждого ЭлементМетаданных Из МетаданныеОбъектовДляОбработки() Цикл
		СписокВыбораТипов.Добавить(ЭлементМетаданных.Синоним);
	КонецЦикла;
	
	ТипОбъектов = СписокВыбораТипов[0].Значение;
	ИнициализироватьНастройки();
	
	ЛимитПопытокОбработкиОбъекта = 3;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОграничитьВидыСравнения();
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0].РежимОтображения =
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипОбъектовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТипОбъектов) Тогда
		Попытка
			ИнициализироватьНастройки();
			ОграничитьВидыСравнения();
		Исключение
			ТипОбъектов = "";
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИзмененияДоступа

&НаКлиенте
Процедура ИзмененияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Действие = ДействиеДобавить();
		Элемент.ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		ТекущийЭлемент = Элементы.ИзмененияДоступаУчастник;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияДоступаДействиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИзмененияДоступа.ТекущиеДанные;
	Если ТекущиеДанные.Действие = ДействиеУдалить() Тогда
		ТекущиеДанные.Изменение = 2;
	Иначе
		ТекущиеДанные.Изменение = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияДоступаИзменениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИзмененияДоступа.ТекущиеДанные;
	Если ТекущиеДанные.Действие = ДействиеУдалить() Тогда
		ТекущиеДанные.Изменение = 2;
	ИначеЕсли ТекущиеДанные.Изменение = 2 Тогда
		ТекущиеДанные.Изменение = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияДоступаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор участника списка доступа'"));
	
	ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
		ПараметрыФормы,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияДоступаУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(
		Элементы.ИзмененияДоступа.ТекущиеДанные, "Участник", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияДоступаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора,
			ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьИзменения(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеРеквизитов(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(СтрШаблон(НСтр("ru = '%1: Обработка начата'"), ТекущаяДата()));
	
	ОбработаноУспешно = 0;
	ОбработаноСОшибкой = 0;
	ОбработанныеСОшибками.Очистить();
	ВсегоОбъектов = КоличествоОбъектовКОбработке();
	
	ШаблонТекстаСостояния =
		НСтр("ru = 'Найдено объектов: %1
					|Обработано: %2
					|Не удалось обработать: %3%4'");
	Состояние(СтрШаблон(ШаблонТекстаСостояния, ВсегоОбъектов, ОбработаноУспешно, ОбработаноСОшибкой,
		?(ОбработаноСОшибкой = 0, "", ", " + НСтр("ru = 'подробности см. в журнале регистрации'"))));
	
	НомерИтерации = 1;
	ЛимитКоличестваИтераций = 100000;
	РезультатИтерации = ВыполнитьИтерацию();
	Пока РезультатИтерации.ЕстьОбъектыКОбработке И НомерИтерации < ЛимитКоличестваИтераций Цикл
		ОбработаноУспешно = ОбработаноУспешно + РезультатИтерации.ОбработаноУспешно;
		ОбработаноСОшибкой = ОбработаноСОшибкой + РезультатИтерации.ОбработаноСОшибкой;
		Состояние(СтрШаблон(ШаблонТекстаСостояния, ВсегоОбъектов, ОбработаноУспешно, ОбработаноСОшибкой));
		РезультатИтерации = ВыполнитьИтерацию();
		НомерИтерации = НомерИтерации + 1;
	КонецЦикла;
	
	Сообщить(СтрШаблон(ШаблонТекстаСостояния, ВсегоОбъектов, ОбработаноУспешно, ОбработаноСОшибкой));
	Сообщить(СтрШаблон(НСтр("ru = '%1: Обработка завершена'"), ТекущаяДата()));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеРеквизитов(Отказ)
	
	Если Не ЗначениеЗаполнено(ТипОбъектов) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнен тип объета'"),, "ТипОбъектов",, Отказ);
	КонецЕсли;
	
	Если ИзмененияДоступа.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнена таблица изменений доступа'"),, "ИзмененияДоступа",, Отказ);
	КонецЕсли;
	
	Для Каждого Стр Из ИзмененияДоступа Цикл
		Если Не ЗначениеЗаполнено(Стр.Действие) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено действие'"),,
				СтрШаблон("ИзмененияДоступа[%1].Действие", ИзмененияДоступа.Индекс(Стр)),, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Стр.Участник) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен участник'"),,
				СтрШаблон("ИзмененияДоступа[%1].Участник", ИзмененияДоступа.Индекс(Стр)),, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройки()
	
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(Истина);
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Настройка структуры вывода результата.
	Настройки = КомпоновщикНастроек.Настройки;
	Настройки.Структура.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	
	ГруппировкаКомпоновкиДанных = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Использование = Истина;
	
	ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(
		Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ОбъектДоступа");
	ПолеГруппировки.Использование = Истина;
	
	ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ОбъектДоступа");
	ПолеВыбора.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Функция КоличествоОбъектовКОбработке()
	
	КоличествоОбъектов = 0;
	
	ВыгруженныйРезультатЗапроса = ОбъектыИзРезультатаЗапроса(Истина);
	Если ВыгруженныйРезультатЗапроса.Количество() > 0 Тогда
		КоличествоОбъектов = ВыгруженныйРезультатЗапроса[0];
	КонецЕсли;
	
	Возврат КоличествоОбъектов;
	
КонецФункции

&НаСервере
Функция ВыполнитьИтерацию()
	
	ОбработаноУспешно = 0;
	ОбработаноСОшибкой = 0;
	
	ВыбранныеОбъекты = ОбъектыИзРезультатаЗапроса();
	Для Каждого ВыбранныйОбъект Из ВыбранныеОбъекты Цикл
		НачатьТранзакцию();
		Попытка
			ОбработатьОбъект(ВыбранныйОбъект);
			ОбработаноУспешно = ОбработаноУспешно + 1;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			НомерПопытки = ЗафиксироватьНеудачнуюПопытку(ВыбранныйОбъект);
			Если НомерПопытки = ЛимитПопытокОбработкиОбъекта Тогда
				ОбработаноСОшибкой = ОбработаноСОшибкой + 1;
			КонецЕсли;
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				ВыбранныйОбъект.Метаданные(), ВыбранныйОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	Возврат Новый Структура("ЕстьОбъектыКОбработке, ОбработаноУспешно, ОбработаноСОшибкой",
		ВыбранныеОбъекты.Количество() > 0, ОбработаноУспешно, ОбработаноСОшибкой);
	
КонецФункции

&НаСервере
Процедура ОбработатьОбъект(ВыбранныйОбъект)
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(ВыбранныйОбъект);
	ТаблицаУчастников.Индексы.Добавить("Участник");
	Для Каждого СтрокаИзменений Из ИзмененияДоступа Цикл
		Если СтрокаИзменений.Действие = ДействиеДобавить() Тогда
			Стр = ТаблицаУчастников.Добавить();
			Стр.Участник = СтрокаИзменений.Участник;
			Стр.Изменение = СтрокаИзменений.Изменение > 0;
		Иначе
			НайденнаяСтрока = ТаблицаУчастников.Найти(СтрокаИзменений.Участник, "Участник");
			Если НайденнаяСтрока <> Неопределено Тогда
				ТаблицаУчастников.Удалить(НайденнаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		ВыбранныйОбъект, ТаблицаУчастников, Истина);
	
КонецПроцедуры

&НаСервере
Функция ОбъектыИзРезультатаЗапроса(ТолькоКоличество = Ложь)
	
	Результат = Новый Массив;
	
	Если ПустаяСтрока(ТипОбъектов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТолькоКоличество);
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			КомпоновщикНастроекКомпоновкиДанных.Настройки,,,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Результат = ТаблицаРезультата.ВыгрузитьКолонку(0);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СхемаКомпоновкиДанных(ТолькоКоличество = Ложь) Экспорт
	
	// Формирование текста запроса.
	ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Объект) КАК ОбъектДоступа
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаОбъектов.Ссылка КАК Объект,
		|		ЕСТЬNULL(РабочиеГруппы.Участник, НЕОПРЕДЕЛЕНО) КАК ДоступУчастник,
		|		ЕСТЬNULL(СотрудникиВКонтейнерах.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК ДоступУчастникРазвернутый,
		|		РабочиеГруппы.Изменение КАК ДоступИзменение
		|	ИЗ
		|		Справочник.ДокументыПредприятия КАК ТаблицаОбъектов
		|			{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|			ПО ТаблицаОбъектов.Ссылка = РабочиеГруппы.Объект}
		|			{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|			ПО (РабочиеГруппы.Участник = СотрудникиВКонтейнерах.Контейнер)}
		|	ГДЕ
		|		НЕ ТаблицаОбъектов.Ссылка В (&ОбъектыСОшибками)
		|		И &ДопУсловияПоДоступу) КАК ВложенныйЗапрос";
	
	ОбъектыСОшибками = ОбработанныеСОшибками.Выгрузить(
		Новый Структура("Попыток", ЛимитПопытокОбработкиОбъекта), "Объект").ВыгрузитьКолонку(0);
	
	Удаляемые = Новый Массив;
	ДобавляемыеБезПраваИзменения = Новый Массив;
	ДобавляемыеСПравомИзменения = Новый Массив;
	Для Каждого Стр Из ИзмененияДоступа Цикл
		Если Стр.Действие = ДействиеУдалить() Тогда
			Удаляемые.Добавить(Стр.Участник);
		ИначеЕсли Стр.Изменение = 1 Тогда
			ДобавляемыеСПравомИзменения.Добавить(Стр.Участник);
		Иначе
			ДобавляемыеБезПраваИзменения.Добавить(Стр.Участник);
		КонецЕсли;
	КонецЦикла;
	
	УсловиеПоУдаляемым = "";
	УсловиеПоДобавляемымБезПраваИзменения = "";
	УсловиеПоДобавляемымСПравомИзменения = "";
	Если Удаляемые.Количество() > 0 Тогда
		УсловиеПоУдаляемым = 
			"ИСТИНА В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ИСТИНА
			|				ИЗ
			|					РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
			|				ГДЕ
			|					РабочиеГруппы.Объект = ТаблицаОбъектов.Ссылка
			|					И РабочиеГруппы.Участник В (&Удаляемые))"
	КонецЕсли;
	Если ДобавляемыеБезПраваИзменения.Количество() > 0 Тогда
		УсловиеПоДобавляемымБезПраваИзменения =
			"ИСТИНА В
			|				(ВЫБРАТЬ
			|					ИСТИНА
			|				ИЗ
			|					РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
			|				ГДЕ
			|					РабочиеГруппы.Объект = ТаблицаОбъектов.Ссылка
			|					И РабочиеГруппы.Участник В (&ДобавляемыеБезПраваИзменения)
			|				ИМЕЮЩИЕ
			|					КОЛИЧЕСТВО(1) < &КолДобавляемыхБезПраваИзменения)"
	КонецЕсли;
	Если ДобавляемыеСПравомИзменения.Количество() > 0 Тогда
		УсловиеПоДобавляемымСПравомИзменения =
			"ИСТИНА В
			|				(ВЫБРАТЬ
			|					ИСТИНА
			|				ИЗ
			|					РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
			|				ГДЕ
			|					РабочиеГруппы.Объект = ТаблицаОбъектов.Ссылка
			|					И РабочиеГруппы.Изменение
			|					И РабочиеГруппы.Участник В (&ДобавляемыеСПравомИзменения)
			|				ИМЕЮЩИЕ
			|					КОЛИЧЕСТВО(1) < &КолДобавляемыхСПравомИзменения)"
	КонецЕсли;
	
	ДопУсловияПоДоступу = "ИСТИНА";
	МассивУсловий = Новый Массив;
	МассивУсловий.Добавить(УсловиеПоУдаляемым);
	МассивУсловий.Добавить(УсловиеПоДобавляемымБезПраваИзменения);
	МассивУсловий.Добавить(УсловиеПоДобавляемымСПравомИзменения);
	Для Каждого Условие Из МассивУсловий Цикл
		Если ПустаяСтрока(Условие) Тогда
			Продолжить;
		КонецЕсли;
		Если ДопУсловияПоДоступу = "ИСТИНА" Тогда
			ДопУсловияПоДоступу = Условие;
		Иначе
			ДопУсловияПоДоступу = СтрШаблон("%1%2		ИЛИ %3", ДопУсловияПоДоступу, Символы.ПС, Условие);
		КонецЕсли;
	КонецЦикла;
	
	МетаданныеОбъектов = Неопределено;
	Для Каждого ЭлементМетаданных Из МетаданныеОбъектовДляОбработки() Цикл
		Если ЭлементМетаданных.Синоним = ТипОбъектов Тогда
			МетаданныеОбъектов = ЭлементМетаданных;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если МетаданныеОбъектов = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найден элемент метаданных ""%1""'"), ТипОбъектов);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"Справочник.ДокументыПредприятия", МетаданныеОбъектов.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловияПоДоступу", ДопУсловияПоДоступу);
	
	Если Не ТолькоКоличество Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Объект) КАК ОбъектДоступа",
			"ВложенныйЗапрос.Объект КАК ОбъектДоступа"); 
	КонецЕсли;
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	// Ограничение для поля ОбъектДоступа.
	ПолеОбъектДоступа = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля.Добавить(
		Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеОбъектДоступа.Поле = "ОбъектДоступа";
	ПолеОбъектДоступа.ОграничениеИспользования.Условие = Истина;
	
	// Значения параметров запроса.
	ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрСхемы.Имя = "ОбъектыСОшибками";
	ПараметрСхемы.ВключатьВДоступныеПоля = Ложь;
	ПараметрСхемы.ОграничениеИспользования = Истина;
	ПараметрСхемы.Значение = ОбъектыСОшибками;
	
	ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрСхемы.Имя = "Удаляемые";
	ПараметрСхемы.ВключатьВДоступныеПоля = Ложь;
	ПараметрСхемы.ОграничениеИспользования = Истина;
	ПараметрСхемы.Значение = Удаляемые;
	
	ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрСхемы.Имя = "ДобавляемыеБезПраваИзменения";
	ПараметрСхемы.ВключатьВДоступныеПоля = Ложь;
	ПараметрСхемы.ОграничениеИспользования = Истина;
	ПараметрСхемы.Значение = ДобавляемыеБезПраваИзменения;
	
	ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрСхемы.Имя = "ДобавляемыеСПравомИзменения";
	ПараметрСхемы.ВключатьВДоступныеПоля = Ложь;
	ПараметрСхемы.ОграничениеИспользования = Истина;
	ПараметрСхемы.Значение = ДобавляемыеСПравомИзменения;
	
	ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрСхемы.Имя = "КолДобавляемыхБезПраваИзменения";
	ПараметрСхемы.ВключатьВДоступныеПоля = Ложь;
	ПараметрСхемы.ОграничениеИспользования = Истина;
	ПараметрСхемы.Значение = ДобавляемыеБезПраваИзменения.Количество();
	
	ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрСхемы.Имя = "КолДобавляемыхСПравомИзменения";
	ПараметрСхемы.ВключатьВДоступныеПоля = Ложь;
	ПараметрСхемы.ОграничениеИспользования = Истина;
	ПараметрСхемы.Значение = ДобавляемыеСПравомИзменения.Количество();
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

&НаКлиенте
Процедура ОграничитьВидыСравнения()
	
	// Настройка доступности видов сравнения.
	ПоляСОграничениемВидовСравнения = Новый Соответствие;
	ПоляСОграничениемВидовСравнения[Новый ПолеКомпоновкиДанных("ДоступУчастник")] = Истина;
	ПоляСОграничениемВидовСравнения[Новый ПолеКомпоновкиДанных("ДоступУчастникРазвернутый")] = Истина;
	ПоляСОграничениемВидовСравнения[Новый ПолеКомпоновкиДанных("ДоступИзменение")] = Истина;
	ПоляСОграничениемВидовСравнения[Новый ПолеКомпоновкиДанных("Объект")] = Истина;
	
	НедоступныеВидыСравнения = Новый Соответствие;
	НедоступныеВидыСравнения[ВидСравненияКомпоновкиДанных.НеРавно] = Истина;
	НедоступныеВидыСравнения[ВидСравненияКомпоновкиДанных.НеВИерархии] = Истина;
	НедоступныеВидыСравнения[ВидСравненияКомпоновкиДанных.НеВСписке] = Истина;
	НедоступныеВидыСравнения[ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии] = Истина;
	НедоступныеВидыСравнения[ВидСравненияКомпоновкиДанных.ВИерархии] = Истина;
	НедоступныеВидыСравнения[ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии] = Истина;
	
	Настройки = КомпоновщикНастроек.Настройки;
	Для Каждого ДоступноеПолеОтбора Из Настройки.Отбор.ДоступныеПоляОтбора.Элементы Цикл
		Если ПоляСОграничениемВидовСравнения[ДоступноеПолеОтбора.Поле] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДоступныеВидыСравнения = ДоступноеПолеОтбора.ДоступныеВидыСравнения;
		КолЗаписей = ДоступныеВидыСравнения.Количество();
		Для Сч = 1 По КолЗаписей Цикл
			Индекс = КолЗаписей - Сч;
			Если НедоступныеВидыСравнения[ДоступныеВидыСравнения[Индекс].Значение] <> Неопределено Тогда
				ДоступныеВидыСравнения.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеДобавить()
	
	Возврат НСтр("ru = 'Добавить доступ'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеУдалить()
	
	Возврат НСтр("ru = 'Удалить доступ'");
	
КонецФункции

&НаСервере
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Изменение списков доступа объектов'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

&НаСервереБезКонтекста
Функция МетаданныеОбъектовДляОбработки()
	
	Результат = Новый Массив();
	Результат.Добавить(Метаданные.Справочники.ДокументыПредприятия);
	Результат.Добавить(Метаданные.Справочники.Мероприятия);
	Результат.Добавить(Метаданные.Справочники.Проекты);
	
	Возврат Результат;
	
КонецФункции

Функция ЗафиксироватьНеудачнуюПопытку(ВыбранныйОбъект)
	
	// Фиксация количества попыток.
	СтрокаОбъектаСОшибкой = Неопределено; 
	НайденныеСтроки = ОбработанныеСОшибками.НайтиСтроки(Новый Структура("Объект", ВыбранныйОбъект));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаОбъектаСОшибкой = НайденныеСтроки[0];
	Иначе
		СтрокаОбъектаСОшибкой = ОбработанныеСОшибками.Добавить();
		СтрокаОбъектаСОшибкой.Объект = ВыбранныйОбъект;
	КонецЕсли;
	СтрокаОбъектаСОшибкой.Попыток = СтрокаОбъектаСОшибкой.Попыток + 1;
	
	Возврат СтрокаОбъектаСОшибкой.Попыток;
	
КонецФункции

#КонецОбласти
