
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проверяет является ли переданная задача процесса служебной.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя,
//           ЗадачаСсылка.ЗадачаИсполнителя,
//           Структура со свойствами Исполнитель, РольИсполнителя, ТочкаМаршрута, Наименование, БизнесПроцесс
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтаСлужебнаяЗадачаПроцесса(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипЗадачи = ТипЗнч(Задача);
	
	РеквизитыЗадачи = Неопределено;
	Если ТипЗадачи = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Задача, "Исполнитель, РольИсполнителя, ТочкаМаршрута, Наименование, БизнесПроцесс");
	ИначеЕсли ТипЗадачи = Тип("ЗадачаОбъект.ЗадачаИсполнителя")
		Или ТипЗадачи = Тип("Структура") Тогда
		
		РеквизитыЗадачи = Задача;
	КонецЕсли;
	
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Задача.БизнесПроцесс);
	
	Возврат МенеджерПроцесса.ЭтаСлужебнаяЗадачаПроцесса(РеквизитыЗадачи)
		Или (Не ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель)
			И Не ЗначениеЗаполнено(РеквизитыЗадачи.РольИсполнителя));
	
КонецФункции

// Проверяет наличие метода ПраваСотрудниковПоОбъектам
// 
// Возвращаемое значение:
//  Булево - Есть ли метод ПраваСотрудниковПоОбъектам
Функция ЕстьМетодПраваСотрудниковПоОбъектам() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Права сотрудников по объектам.
// 
// Параметры:
//  ОбъектыДоступа - Массив из ЗадачаСсылка.ЗадачаИсполнителя - Объекты доступа
//  СотрудникиОтбор - Массив из СправочникСсылка.Сотрудники - Отбор по сотрудникам
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Права сотрудников по объектам:
// * ОбъектДоступа - ЗадачаСсылка.ЗадачаИсполнителя
// * Сотрудник - СправочникСсылка.Сотрудники - Сотрудник
// * Чтение - Булево - Право на чтение
// * Изменение - Булево - Право на
// * Добавление - Булево - Право на
// * Удаление - Булево - Право на
// * УправлениеПравами - Булево - Право на
// * Пользователь - СправочникСсылка.Пользователи -
Функция ПраваСотрудниковПоОбъектам(
			ОбъектыДоступа, СотрудникиОтбор = Неопределено) Экспорт
	
	ТаблицаПрав = ДокументооборотПраваДоступа.ТаблицаПравСотрудниковПоОбъектам();
	
	Если ОбъектыДоступа.Количество() = 0 Тогда
		Возврат ТаблицаПрав;
	КонецЕсли;
	
	ПервыйОбъектДоступа = ОбъектыДоступа[0];
	ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПервыйОбъектДоступа.Метаданные());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка КАК ОбъектДоступа,
			|	СоставСубъектов.Сотрудник КАК Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	МАКСИМУМ(ВЫБОР
			|		КОГДА ЗадачаИсполнителя.Автор = СоставСубъектов.Сотрудник
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ) КАК Добавление
			|ПОМЕСТИТЬ ПраваНаЧтениеДобавление
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
			|		ПО (ЗадачаИсполнителя.БизнесПроцесс = УчастникиПроцессов.Процесс)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО (УчастникиПроцессов.Участник = СоставСубъектов.Субъект)
			|		И (СоставСубъектов.ИмяОбластиДелегирования В (&ОбластиДелегирования))
			|		И (&НетОтбораПоСотрудникам
			|		ИЛИ СоставСубъектов.Сотрудник В (&Сотрудники))
			|ГДЕ
			|	ЗадачаИсполнителя.Ссылка В (&ОбъектыДоступа)
			|СГРУППИРОВАТЬ ПО
			|	ЗадачаИсполнителя.Ссылка,
			|	СоставСубъектов.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗадачаИсполнителя.Ссылка КАК ОбъектДоступа,
			|	СоставСубъектов.Сотрудник КАК Сотрудник,
			|	ИСТИНА КАК Изменение
			|ПОМЕСТИТЬ ПраваНаИзменение
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО ЗадачаИсполнителя.ТекущийИсполнитель = СоставСубъектов.Субъект
			|		И (СоставСубъектов.ИмяОбластиДелегирования В (&ОбластиДелегирования))
			|		И (&НетОтбораПоСотрудникам
			|		ИЛИ СоставСубъектов.Сотрудник В (&Сотрудники))
			|ГДЕ
			|	ЗадачаИсполнителя.Ссылка В (&ОбъектыДоступа)
			|СГРУППИРОВАТЬ ПО
			|	ЗадачаИсполнителя.Ссылка,
			|	СоставСубъектов.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СоставСубъектовПравДоступа.Субъект КАК Субъект,
			|	СоставСубъектовПравДоступа.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ СубъектыСотрудника
			|ИЗ
			|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
			|ГДЕ
			|	СоставСубъектовПравДоступа.Сотрудник В (&Сотрудники)
			|	И СоставСубъектовПравДоступа.ИмяОбластиДелегирования В ("""", ""Задачи"", ""ЗадачиПросмотр"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка КАК Задача,
			|	ИСТИНА КАК Чтение,
			|	ИСТИНА КАК Изменение,
			|	ИСТИНА КАК Добавление,
			|	ЛОЖЬ КАК Удаление,
			|	СубъектыСотрудника.Сотрудник КАК Исполнитель,
			|	ЛОЖЬ КАК УправлениеПравами
			|ПОМЕСТИТЬ ПраваПоДействиямЗадач
			|ИЗ
			|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДействиеЗадачи КАК ДействияЗадач
			|		ПО ВсеИсполнителиДействийЗадач.ДействиеЗадачи = ДействияЗадач.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО (ДействияЗадач.Источник = ЗадачаИсполнителя.Ссылка)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубъектыСотрудника КАК СубъектыСотрудника
			|		ПО ВсеИсполнителиДействийЗадач.Исполнитель = СубъектыСотрудника.Субъект
			|ГДЕ
			|	ЗадачаИсполнителя.Ссылка В (&ОбъектыДоступа)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПраваНаЧтениеДобавление.ОбъектДоступа КАК ОбъектДоступа,
			|	ПраваНаЧтениеДобавление.Сотрудник КАК Сотрудник,
			|	ПраваНаЧтениеДобавление.Чтение КАК Чтение,
			|	ЕСТЬNULL(ПраваНаИзменение.Изменение, ЛОЖЬ) КАК Изменение,
			|	ПраваНаЧтениеДобавление.Добавление КАК Добавление,
			|	ЛОЖЬ КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ПОМЕСТИТЬ ПраваПоЗадаче
			|ИЗ
			|	ПраваНаЧтениеДобавление КАК ПраваНаЧтениеДобавление
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПраваНаИзменение КАК ПраваНаИзменение
			|		ПО ПраваНаЧтениеДобавление.ОбъектДоступа = ПраваНаИзменение.ОбъектДоступа
			|		И ПраваНаЧтениеДобавление.Сотрудник = ПраваНаИзменение.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПраваПоЗадаче.ОбъектДоступа КАК ОбъектДоступа,
			|	ПраваПоЗадаче.Сотрудник КАК Сотрудник,
			|	ПраваПоЗадаче.Изменение КАК Изменение,
			|	ПраваПоЗадаче.Добавление КАК Добавление,
			|	ПраваПоЗадаче.Удаление КАК Удаление,
			|	ПраваПоЗадаче.УправлениеПравами КАК УправлениеПравами,
			|	ПраваПоЗадаче.Чтение КАК Чтение
			|ПОМЕСТИТЬ ПраваПоВсемИсточникам
			|ИЗ
			|	ПраваПоЗадаче КАК ПраваПоЗадаче
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПраваПоДействиямЗадач.Задача,
			|	ПраваПоДействиямЗадач.Исполнитель,
			|	ПраваПоДействиямЗадач.Изменение,
			|	ПраваПоДействиямЗадач.Добавление,
			|	ПраваПоДействиямЗадач.Удаление,
			|	ПраваПоДействиямЗадач.УправлениеПравами,
			|	ПраваПоДействиямЗадач.Чтение
			|ИЗ
			|	ПраваПоДействиямЗадач КАК ПраваПоДействиямЗадач
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПраваПоВсемИсточникам.ОбъектДоступа КАК ОбъектДоступа,
			|	ПраваПоВсемИсточникам.Сотрудник КАК Сотрудник,
			|	МАКСИМУМ(ПраваПоВсемИсточникам.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоВсемИсточникам.Изменение) КАК Добавление,
			|	МАКСИМУМ(ПраваПоВсемИсточникам.Добавление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоВсемИсточникам.Удаление) КАК УправлениеПравами,
			|	МАКСИМУМ(ПраваПоВсемИсточникам.Чтение) КАК Чтение
			|ИЗ
			|	ПраваПоВсемИсточникам КАК ПраваПоВсемИсточникам
			|СГРУППИРОВАТЬ ПО
			|	ПраваПоВсемИсточникам.ОбъектДоступа,
			|	ПраваПоВсемИсточникам.Сотрудник";
	
	
	Запрос.УстановитьПараметр("ОбъектыДоступа", ОбъектыДоступа);
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиОтбор);
	Запрос.УстановитьПараметр("НетОтбораПоСотрудникам", СотрудникиОтбор = Неопределено);
	Запрос.УстановитьПараметр("ИдентификаторОМ", ИдентификаторОМ);
	Запрос.УстановитьПараметр("ОбластиДелегирования",
		ЗамещающиеИПомощники.ИменаОбластейЗамещенияПоИдентификаторуОбъектаМетаданных(ИдентификаторОМ));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), Выборка);
	КонецЦикла;
	
	ДокументооборотПраваДоступа.РасширитьТаблицуПравНеограниченнымиПравами(ТаблицаПрав,
		ИдентификаторОМ, ОбъектыДоступа, СотрудникиОтбор);
	
	Возврат ТаблицаПрав;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Наименование");
	Поля.Добавить("Дата")
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекстПредставления = НСтр("ru = '%1 от %2'");
	
	Представление = СтрШаблон(
		ТекстПредставления,
		Данные.Наименование,
		Данные.Дата);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если РаботаСПроцессамиПоОбработкамОбъектовСобытия.ОбработатьПолучениеФормыЗадачи(
		ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Тогда
		
		Возврат;		
	КонецЕсли;
	
	Если ВидФормы = "ФормаОбъекта"
		И Параметры.Свойство("Ключ")
		И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если Не ОбщегоНазначения.СсылкаСуществует(Параметры.Ключ) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не удалось перейти по ссылке ""%1"" по причине: Неверно задана навигационная ссылка.'"),
				ПолучитьНавигационнуюСсылку(Параметры.Ключ));
		КонецЕсли;
		
		Если ЭтаСлужебнаяЗадачаПроцесса(Параметры.Ключ) Тогда
			Возврат;
		КонецЕсли;
		
		// Найдём существующе действие задачи.
		ДействиеЗадачиПоИсточнику = Документы.ДействиеЗадачи.НайтиПоИсточнику(Параметры.Ключ);
		Если ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
			
			Параметры.Ключ = ДействиеЗадачиПоИсточнику;
			
			Документы.ДействиеЗадачи.ОбработкаПолученияФормы(
				ВидФормы,
				Параметры,
				ВыбраннаяФорма,
				ДополнительнаяИнформация,
				СтандартнаяОбработка);
			
			Возврат;
			
		КонецЕсли;
		
		// Попробуем обновить задачу и найти снова действие задачи.
		БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "БизнесПроцесс");
		ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(БизнесПроцесс);
		ДействиеЗадачиПоИсточнику = Документы.ДействиеЗадачи.НайтиПоИсточнику(Параметры.Ключ);
		Если ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
			
			Параметры.Ключ = ДействиеЗадачиПоИсточнику;
			
			Документы.ДействиеЗадачи.ОбработкаПолученияФормы(
				ВидФормы,
				Параметры,
				ВыбраннаяФорма,
				ДополнительнаяИнформация,
				СтандартнаяОбработка);
			
			Возврат;
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Задача.ЗадачаИсполнителя.Форма.ПодробнаяФормаЗадачи";
		
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Задача.ЗадачаИсполнителя.Форма.ФормаСписка";
		Параметры.Вставить("РежимВыбора", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли