#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает Истина, если в задаче указан исполнитель или роль исполнителя.
//
Функция РеквизитыАдресацииЗаполнены() Экспорт
	
	Возврат ЗначениеЗаполнено(Исполнитель) ИЛИ НЕ РольИсполнителя.Пустая();

КонецФункции

// Создает при необходимости в Дополнительных свойствах
// объекта свойство с именем, указанным в параметре Раздел, тип Структура.
// Устанавливает в структуре свойство Свойство в значение Значение
//
Процедура УстановитьДополнительноеСвойство(Раздел, Свойство, Значение) Экспорт
	Если Не ДополнительныеСвойства.Свойство(Раздел) Тогда
		ДополнительныеСвойства.Вставить(Раздел, Новый Структура);
	КонецЕсли;
	ДополнительныеСвойства[Раздел].Вставить(Свойство, Значение);
КонецПроцедуры

// Получает значение поля структуры дополнительного свойства объекта:
// ТекущийОбъект.ДополнительныеСвойства[Раздел][Свойство]
// если не задано, возвращает Неопределено.
//
Функция ПолучитьДополнительноеСвойство(Раздел, Свойство) Экспорт
	Перем Результат;
	Если Не ДополнительныеСвойства.Свойство(Раздел) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ДополнительныеСвойства[Раздел].Свойство(Свойство, Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Проверяет, задано ли поле дополнительного свойства
// Возвращает Булево
//
Функция ЗаданоДополнительноеСвойство(Раздел, Свойство, Значение) Экспорт
	Значение = Неопределено;
	Если Не ДополнительныеСвойства.Свойство(Раздел) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ДополнительныеСвойства[Раздел].Свойство(Свойство, Значение);
КонецФункции

// Исключает задачу из процесса. Приводит к записи задачи.
//
Процедура ИсключитьИзПроцесса() Экспорт
	
	ДополнительныеСвойства.Вставить("ОтключитьЗаполнениеДополнительныхДанныхПоЗадаче", Истина);
	ИсключенаИзПроцесса = Истина;
	ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрамиНемедленно(ЭтотОбъект,,,Истина);
	УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

// Возвращает данные иполнителя для записи в историю выполнения задач.
//
Функция ДанныеИсполнителяДляИсторииВыполнения() Экспорт
	
	ПлановыйИсполнитель = Неопределено;
	ОснованиеФактическогоИсполнителя = Неопределено;
	ДополнительныеСвойства.Свойство("ПредыдущийИсполнитель", ПлановыйИсполнитель);
	ДополнительныеСвойства.Свойство("ОснованиеФактическогоИсполнителя", ОснованиеФактическогоИсполнителя);
	
	ДанныеИсполнителя = Новый Структура("Исполнитель, ПлановыйИсполнитель, ОснованиеФактическогоИсполнителя");
	ДанныеИсполнителя.Исполнитель = Исполнитель;
	ДанныеИсполнителя.ПлановыйИсполнитель = ПлановыйИсполнитель;
	ДанныеИсполнителя.ОснованиеФактическогоИсполнителя = ОснованиеФактическогоИсполнителя;
	
	ДанныеИсполнителя.Вставить("ФактическийИсполнитель", ФактическийИсполнитель);
	
	Возврат ДанныеИсполнителя;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗадачаБылаВыполнена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Выполнена");
	Если НЕ ЗадачаБылаВыполнена И Выполнена Тогда
		
		Если НЕ РеквизитыАдресацииЗаполнены() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Необходимо указать исполнителя задачи.'"),,,
				"Объект.Исполнитель", Отказ);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ЗадачаБылаВыполнена И Выполнена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Эта задача уже была выполнена ранее.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если СрокИсполнения <> '00010101' И ДатаНачала > СрокИсполнения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата начала исполнения не должна превышать крайний срок.'"),,,
			"Объект.ДатаНачала", Отказ);
		Возврат;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если (ИспользоватьДатуИВремяВСрокахЗадач И ДатаИсполнения < Дата) 
	 Или (Не ИспользоватьДатуИВремяВСрокахЗадач И ДатаИсполнения < НачалоДня(Дата)) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата исполнения меньше даты назначения задачи.'"),, "Объект.ДатаИсполнения",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ОбработатьТолькоПередачуПредметов = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ОбработатьТолькоПередачуПредметов = 
			(ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьСОбновлением_МоихДокументов_КешаИнформацииОбОбъектах_ВизСогласования_ПредметовПодчиненныхПроцессов_ДопРеквизитовПоПредметам_СобытийИзмененияПредметов");
		
		Если Не ОбработатьТолькоПередачуПредметов Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
		И ПолучитьФункциональнуюОпцию("ИспользоватьКОД") И Не МЭДОПереопределяемый.ЭтоМиграция() Тогда
		
		УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "УзелОбработки");
		
		Если УзелОбработки <> КОДПовтИсп.ИдентификаторТекущегоУзла() Тогда
			ВызватьИсключение НСтр("ru = 'Действие доступно только в узле, в котором создан процесс.'");
		КонецЕсли;
			
	КонецЕсли;
	
	АвторСобытия = Неопределено;
	Если Не ДополнительныеСвойства.Свойство("АвторИзменения", АвторСобытия) Тогда
		АвторСобытия = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	КонецЕсли;
	
	ТочкаМаршрутаСтарая = ТочкаМаршрутаВИБ();
	ДополнительныеСвойства.Вставить("ТочкаМаршрутаСтарая", ТочкаМаршрутаСтарая);
	
	Если ОбычнаяЗапись Тогда
		
		ОбновитьПовторно = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства,
			"ОбновитьПовторно", Ложь);
		
		Если (ЭтоНовый() Или ОбновитьПовторно)
			И ЗначениеЗаполнено(РольИсполнителя) И Не ЗначениеЗаполнено(Исполнитель) Тогда
			Исполнитель = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("ФактическийИсполнительЗадачи") Тогда
			ДополнительныеСвойства.Вставить("ПредыдущийИсполнитель", Исполнитель);
			Исполнитель = ДополнительныеСвойства.ФактическийИсполнительЗадачи;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("ФактическийИсполнительПолный") Тогда
			ФактическийИсполнитель = ДополнительныеСвойства.ФактическийИсполнительПолный;
		КонецЕсли;
		
		ЗаписатьСобытияЗадачи(АвторСобытия);
		
		ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
		
		ЗадачаБылаВыполнена = Ложь;
		СтароеПринятаКИсполнению = Ложь;
		СтароеСостояниеБизнесПроцесса = Неопределено;
		
		Если НЕ Ссылка.Пустая() Тогда
			
			ЗадачаБылаВыполнена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Выполнена");
			СтароеПринятаКИсполнению = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПринятаКИсполнению");
			СтароеСостояниеБизнесПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СостояниеБизнесПроцесса");
			
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("СтароеПринятаКИсполнению", СтароеПринятаКИсполнению);
		ДополнительныеСвойства.Вставить("СтароеСостояниеБизнесПроцесса", СтароеСостояниеБизнесПроцесса);
		
		Если ЗадачаБылаВыполнена И НЕ Выполнена Тогда
			ДополнительныеСвойства.Вставить("ВыполнениеЗадачиБылоОтменено", Истина);
		КонецЕсли;
		
		Если Не ЗадачаБылаВыполнена И Выполнена
			И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
			
			Если СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
				ВызватьИсключение НСтр("ru = 'Нельзя выполнять задачи остановленных процессов.'");
			КонецЕсли;	
			
			Если СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
				ВызватьИсключение НСтр("ru = 'Нельзя выполнять задачи прерванных процессов.'");
			КонецЕсли;	
			
			// Если задача выполнена, то запишем в реквизит Исполнитель того
			// пользователя, который фактически выполнил задачу. Это нам потом
			// потребуется для отчетов. Такую запись делаем только в том
			// случае, если в базе было не выполнено, а в объекте стало выполнено
			// Исполнитель устанавливается, только если текущая задача не является ведущей.
			Если НЕ ЗначениеЗаполнено(Исполнитель)
				И Не Задачи.ЗадачаИсполнителя.ЭтаСлужебнаяЗадачаПроцесса(ЭтотОбъект) Тогда
				Исполнитель = Сотрудники.ОсновнойСотрудник();
			КонецЕсли;
			Если ДатаИсполнения = Дата(1, 1, 1) Тогда
				ДатаИсполнения = ТекущаяДатаСеанса();
			КонецЕсли;
			
			Если НЕ (ДополнительныеСвойства.Свойство("ОтключитьЗаполнениеДополнительныхДанныхПоЗадаче")
				И ДополнительныеСвойства.ОтключитьЗаполнениеДополнительныхДанныхПоЗадаче = Истина) Тогда
				
				ДополнительныеДанныеПоЗадаче = Неопределено;
				ЕстьМетодДополнительныеДанныеПоЗадаче = Ложь;
				
				ИмяПроцесса = БизнесПроцесс.Метаданные().Имя;
				МенеджерПроцесса = БизнесПроцессы[ИмяПроцесса];
				
				Попытка
					ЕстьМетодДополнительныеДанныеПоЗадаче = МенеджерПроцесса.ЕстьМетодДополнительныеДанныеПоЗадаче();
				Исключение
					// В модуле менеджера процесса может не быть метода ЕстьМетодДополнительныеДанныеПоЗадаче
				КонецПопытки;
				
				Если ЕстьМетодДополнительныеДанныеПоЗадаче Тогда
					ДополнительныеДанныеПоЗадаче = МенеджерПроцесса.ДополнительныеДанныеПоЗадаче(ЭтотОбъект);
				КонецЕсли;
				
				Если ТипЗнч(ДополнительныеДанныеПоЗадаче) = Тип("Структура") Тогда
					
					РезультатВыполненияЗадачи = Неопределено;
					КонтекстВыполненияЗадачи = Неопределено;
					ДополнительныеДанныеПоЗадаче.Свойство("РезультатВыполнения", РезультатВыполненияЗадачи);
					ДополнительныеДанныеПоЗадаче.Свойство("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
					
					// Добавление записи в результаты выполнения
					Если ЗначениеЗаполнено(РезультатВыполненияЗадачи) Тогда
						РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.ЗаписатьРезультатПоОбъекту(Ссылка, РезультатВыполненияЗадачи);
					КонецЕсли;
					
					// Добавление записи в историю выполнения
					Если КонтекстВыполненияЗадачи <> Неопределено Тогда
						
						РаботаСЗадачами.ДобавитьВИсториюПоИсточнику(
							БизнесПроцесс,
							Ссылка,
							ДатаИсполнения,
							Справочники.СобытияЗадач.Выполнение,
							КонтекстВыполненияЗадачи,
							Исполнитель);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДополнительныеСвойства.Вставить("ЗадачаВыполнена", Истина);
			
		КонецЕсли;
			
		Если Важность.Пустая() Тогда
			Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СостояниеБизнесПроцесса) Тогда
			СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ОбработатьТолькоПередачуПредметов Тогда
		
		// Обработка предметов задачи
		Если Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
			ПредметСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Предметы);
		КонецЕсли;
		
		ИзмененыПредметыЗадачи = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ИзмененыПредметыЗадачи = Мультипредметность.ИзмененыПредметыЗадачи(ЭтотОбъект);
		КонецЕсли;
		
		// Обновление КешаИнформацииОбОбъектах
		Если ИзмененыПредметыЗадачи Тогда
			ПредыдущиеПредметы = Мультипредметность.ПолучитьПредметыЗадачи(ЭтотОбъект.Ссылка);
			БизнесПроцессыИЗадачиСервер.ПриЗаписиЗадачиСервер(ЭтотОбъект, ПредыдущиеПредметы);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если НЕ Ссылка.Пустая() Тогда
			
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
			
			// Проверка не изменились ли реквизиты адресации
			Адресация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
				"Исполнитель, РольИсполнителя");
			
			// Проверка изменения исполнителя
			Если Адресация.Исполнитель <> Исполнитель Тогда
				
				// Если была ролевая маршрутизация, то реквизиты адресации 
				// считаются измененными только если задача адресована не 
				// исполнителю роли
				Если ЗначениеЗаполнено(Адресация.РольИсполнителя) Тогда
					
					ИсполнителиРоли = РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(Адресация.РольИсполнителя);
					ИсполнительСотрудник = 
						Сотрудники.ОсновнойСотрудникПользователя(
						Исполнитель);
					
					НайденВИсполнителяхРоли = Ложь;
					Для каждого Эл из ИсполнителиРоли Цикл
						Если Эл = ИсполнительСотрудник Тогда
							НайденВИсполнителяхРоли = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не НайденВИсполнителяхРоли Тогда
						ДополнительныеСвойства.Вставить("ИзменилисьРеквизитыАдресации", Истина);
						ДополнительныеСвойства.Вставить("СтарыеРеквизитыАдресации", Адресация);
						УстановитьДополнительныеСвойстваИзмененияИсполнителя();
					КонецЕсли;
						
				Иначе
						
					ДополнительныеСвойства.Вставить("ИзменилисьРеквизитыАдресации", Истина);
					ДополнительныеСвойства.Вставить("СтарыеРеквизитыАдресации", Адресация);
					УстановитьДополнительныеСвойстваИзмененияИсполнителя();
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Проверка изменения ролевой маршрутизации
			Если Адресация.РольИсполнителя <> РольИсполнителя Тогда
				
				ДополнительныеСвойства.Вставить("ИзменилисьРеквизитыАдресации", Истина);
				ДополнительныеСвойства.Вставить("СтарыеРеквизитыАдресации", Адресация);
				УстановитьДополнительныеСвойстваИзмененияИсполнителя();
				
			КонецЕсли;
			
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		Если Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных)
			И ПредыдущаяПометкаУдаления <> ПометкаУдаления Тогда
			
			БизнесПроцессыИЗадачиВызовСервера.ПриПометкеУдаленияЗадачи(Ссылка, ПометкаУдаления);
		КонецЕсли;
		
		Если НЕ Ссылка.Пустая() Тогда
			ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СостояниеБизнесПроцесса");
			ДополнительныеСвойства.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
			
			Если ПредыдущееСостояние <> СостояниеБизнесПроцесса Тогда
				УстановитьСостояниеПодчиненныхБизнесПроцессов(СостояниеБизнесПроцесса);
				ИнтеграцияЗадач.ПриИзмененииСостоянияЗадачиПроцесса(ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выполнена И Не ПринятаКИсполнению
			И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
			
			ПринятаКИсполнению = Истина;
			ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
		КонецЕсли;	
		
		Если Автор <> Неопределено И ЗначениеЗаполнено(Автор)
			И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
			
			АвторСтрокой = Строка(Автор);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ОбычнаяЗапись Или ОбработатьТолькоПередачуПредметов)
		И ИзмененыПредметыЗадачи
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		// Обновление ПредметовПодчиненныхПроцессов
		ПередатьСтатусы = МультипредметностьКлиентСервер.ЭтоПроцессОбработкиДокументов(ЭтотОбъект.БизнесПроцесс);
		Мультипредметность.ПередатьПредметыЗадачиПодчиненнымПроцессам(ЭтотОбъект, ПередатьСтатусы);
		
		// Обновление СобытийИзмененияПредметов
		Мультипредметность.ЗаписатьСобытиеИзменениеПредметовЗадачи(ЭтотОбъект);
		
		// Обновление ДопРеквизитовПоПредметам
		Мультипредметность.СкопироватьЗначенияДопРеквизитовПредметов(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		
		// Заполнение текущего исполнителя
		Если ЗначениеЗаполнено(Исполнитель) Тогда
			ТекущийИсполнитель = Исполнитель;
		Иначе
			ТекущийИсполнитель = РольИсполнителя;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Права на изменение теперь проверяются здесь, а не в RLS	
	Если Не ПривилегированныйРежим()
		И Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ЭтоНовый", Ложь)
		И Не Задачи.ЗадачаИсполнителя.ЭтаСлужебнаяЗадачаПроцесса(Ссылка) Тогда
		Права = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъекту(Ссылка, Истина,
			Сотрудники.ВсеСотрудникиТекущегоПользователя(Ложь));
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Недостаточно прав для изменения задачи %1'"), Ссылка);
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ЗадачаВыполнена", Ложь) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Недостаточно прав для выполнения задачи %1'"), Ссылка);
		КонецЕсли;
		Если Права.Найти(Истина, "Изменение") = Неопределено Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияЗадач.ПриЗаписиИсточникаДействияЗадачи(ЭтотОбъект);
	
	ОбычнаяЗапись = Истина;
	ОбновитьТолькоКешИнформацииОбОбъектах = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ОбновитьТолькоКешИнформацииОбОбъектах = 
			(ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьСОбновлением_МоихДокументов_КешаИнформацииОбОбъектах_ВизСогласования_ПредметовПодчиненныхПроцессов_ДопРеквизитовПоПредметам_СобытийИзмененияПредметов");
		
		Если Не ОбновитьТолькоКешИнформацииОбОбъектах Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Обработка предметов задачи
	ЕстьЗаполненныеПредметы = Мультипредметность.ЕстьЗаполненныеПредметыОбъекта(ЭтотОбъект);
	
	Если ОбычнаяЗапись Тогда
		
		НужноОбновитьРабочуюГруппуПредмета = Ложь;
		НужноОбновитьРабочуюГруппуПроцесса = Ложь;
		
		ИзменилисьРеквизитыАдресации = Ложь;
		ЗадачаВыполнена = Ложь;
		
		Если ДополнительныеСвойства.Свойство("ИзменилисьРеквизитыАдресации") Тогда
			ИзменилисьРеквизитыАдресации = ДополнительныеСвойства.ИзменилисьРеквизитыАдресации;
		КонецЕсли;
				
		Если ДополнительныеСвойства.Свойство("ЗадачаВыполнена") Тогда
			ЗадачаВыполнена = ДополнительныеСвойства.ЗадачаВыполнена;
			Если ДополнительныеСвойства.ЗадачаВыполнена Тогда
				ПользовательИсполнитель = Неопределено;
				ДополнительныеСвойства.Свойство("ПользовательИсполнитель", ПользовательИсполнитель);
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
					Ссылка, Справочники.ВидыБизнесСобытий.ВыполнениеЗадачиПроцесса, , ПользовательИсполнитель);
			КонецЕсли;
		КонецЕсли;
		
		// Проверка на перенаправление задачи
		Если ИзменилисьРеквизитыАдресации И Не ЗадачаВыполнена Тогда 
			НужноОбновитьРабочуюГруппуПредмета = Истина;
			НужноОбновитьРабочуюГруппуПроцесса = Истина;
			ЗарегистрироватьПеренаправлениеЗадачи();
		КонецЕсли;
		
		// Новые задачи всегда должны пополнять рабочую группу предмета
		Если ДополнительныеСвойства.ЭтоНовый И ЕстьЗаполненныеПредметы Тогда
			НужноОбновитьРабочуюГруппуПредмета = Истина;
		КонецЕсли;
		
		Если СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			НужноОбновитьРабочуюГруппуПредмета = Ложь;
		КонецЕсли;
		
		Если РаботаСПроцессамиПоДействиямСобытия.ОбработатьРасширениеРабочихГруппПредметовПроцессов(БизнесПроцесс) Тогда
			НужноОбновитьРабочуюГруппуПредмета = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ОбычнаяЗапись Или ОбновитьТолькоКешИнформацииОбОбъектах)
		И ЕстьЗаполненныеПредметы Тогда
		
		// Обновление КешаИнформацииОбОбъектах
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(ЭтотОбъект.Ссылка, "ЕстьФайлы", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбычнаяЗапись Тогда
		
		Если (НужноОбновитьРабочуюГруппуПредмета Или НужноОбновитьРабочуюГруппуПроцесса)
			И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
			
			ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
			
			ПравоИзменения = Ложь;
			ДействиеПоПроцессу = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(БизнесПроцесс);
			Если ЗначениеЗаполнено(ДействиеПоПроцессу) Тогда
				ПравоИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ДействиеПоПроцессу, "ВидДействия.РазрешитьУчастникамИзменятьПредмет");
			Иначе
				ТипПроцесса = ТипЗнч(БизнесПроцесс);
				ПравоИзменения =
					ТипПроцесса = Тип("БизнесПроцессСсылка.Исполнение")
					Или ТипПроцесса = Тип("БизнесПроцессСсылка.Рассмотрение")
					Или ТипПроцесса = Тип("БизнесПроцессСсылка.Регистрация")
					Или ТипПроцесса = Тип("БизнесПроцессСсылка.Согласование")
					Или ТипПроцесса = Тип("БизнесПроцессСсылка.Подписание")
					Или ТипПроцесса = Тип("БизнесПроцессСсылка.Утверждение");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Исполнитель) Тогда
				РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
					ТаблицаУчастников, Исполнитель, ПравоИзменения);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РольИсполнителя) Тогда
				РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
					ТаблицаУчастников, РольИсполнителя, ПравоИзменения);
			КонецЕсли;
			
			// Обновление рабочих групп предметов
			Если НужноОбновитьРабочуюГруппуПредмета Тогда
				
				Для каждого СтрокаПредмета из Предметы Цикл
					Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
						ОбъектДляРасширенияРГ = РаботаСРабочимиГруппами.ОбъектДляАвтоматическогоРасширенияРабочейГруппы(
							СтрокаПредмета.Предмет);
						Если РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(ОбъектДляРасширенияРГ) Тогда
							Попытка
								РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуОбъекта(
									ОбъектДляРасширенияРГ,
									ТаблицаУчастников,
									Истина);  // ОбновитьПраваДоступа
							Исключение
								
								ПредставлениеПредмета = Строка(СтрокаПредмета.Предмет);
								ТипПредмета = ТипЗнч(СтрокаПредмета.Предмет);
								РаботаСРабочимиГруппами.ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(
									ПредставлениеПредмета,
									ТипПредмета,
									ИнформацияОбОшибке());
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// Обновление рабочей группы процесса
			Если НужноОбновитьРабочуюГруппуПроцесса Тогда
				
				СтарыеРеквизитыАдресации = Неопределено;
				ДополнительныеСвойства.Свойство("СтарыеРеквизитыАдресации", СтарыеРеквизитыАдресации);
				
				Если ЗначениеЗаполнено(СтарыеРеквизитыАдресации) Тогда
					
					СтарыеРеквизитыАдресации = ДополнительныеСвойства.СтарыеРеквизитыАдресации;
					Если ЗначениеЗаполнено(СтарыеРеквизитыАдресации.Исполнитель) Тогда
						
						РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
							ТаблицаУчастников, 
							СтарыеРеквизитыАдресации.Исполнитель);
							
					КонецЕсли;
						
					Если ЗначениеЗаполнено(СтарыеРеквизитыАдресации.РольИсполнителя) Тогда
							
						РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
							ТаблицаУчастников, 
							СтарыеРеквизитыАдресации.РольИсполнителя);
							
					КонецЕсли;
						
				КонецЕсли;
				
				РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуОбъекта(
					БизнесПроцесс, 
					ТаблицаУчастников, 
					Ложь); // ОбновитьПраваДоступа
					
				// Обновление рабочих групп всех ведущих и главных процессов
				РаботаСРабочимиГруппами.ОбновитьРабочиеГруппыРодительскихПроцессов(БизнесПроцесс, ТаблицаУчастников);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
			
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.СозданиеЗадачиПроцесса);
			
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("ВыполнениеЗадачиБылоОтменено")
			И ДополнительныеСвойства.ВыполнениеЗадачиБылоОтменено Тогда
			
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачиПроцесса);
			
		КонецЕсли;
		
		ОбработкаОчередиЗаданийСервер.ПриЗаписиЗадачиПроцесса(ЭтотОбъект);
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
			ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
		КонецЕсли;
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления
			И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
			
			ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		РаботаСПроцессамиПоДействиямСобытия.ПриЗаписиЗадачиПроцесса(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, 
			"БизнесПроцесс,ТочкаМаршрута,Наименование,Исполнитель,РольИсполнителя," + 
			"Важность,ДатаИсполнения,Автор,Описание,СрокИсполнения," + 
			"ДатаНачала,РезультатВыполнения,Предмет");
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Важность) Тогда
		Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СостояниеБизнесПроцесса) Тогда
		СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыполнением(Отказ)
	
	Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() Или
		Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
			Возврат;
	КонецЕсли;
	
	ЭтотУзел = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	УзелОбменаПроцесса = ОбщегоНазначенияДокументооборот.
		ЗначениеРеквизитаОбъектаВПривилегированномРежиме(БизнесПроцесс, "УзелОбработки");
		
	Если УзелОбменаПроцесса <> ЭтотУзел Тогда
		ТекстИсключения = НСтр("ru = 'Задача может быть выполнена только в узле КОД: ""%1""'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, УзелОбменаПроцесса);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает текущее значение ТочкаМаршрута в информационной базе
Функция ТочкаМаршрутаВИБ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ТочкаМаршрута;
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции

Процедура УстановитьСостояниеПодчиненныхБизнесПроцессов(НовоеСостояние)
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
		ПодчиненныеБизнесПроцессы = БизнесПроцессыИЗадачиВызовСервера.ПолучитьБизнесПроцессыГлавнойЗадачи(Ссылка);
		Если ПодчиненныеБизнесПроцессы <> Неопределено Тогда
			Для Каждого ПодчиненныйБизнесПроцесс Из ПодчиненныеБизнесПроцессы Цикл
				ЗаблокироватьДанныеДляРедактирования(ПодчиненныйБизнесПроцесс);
				БизнесПроцессОбъект = ПодчиненныйБизнесПроцесс.ПолучитьОбъект();
				Если БизнесПроцессОбъект.Завершен
					Или БизнесПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
					
					Продолжить;
				КонецЕсли;
				БизнесПроцессОбъект.Состояние = НовоеСостояние;
				БизнесПроцессОбъект.Записать();
			КонецЦикла;	
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьСобытияЗадачи(АвторСобытия = Неопределено)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееЗначениеВыполнена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Выполнена");
	
	Если ПредыдущееЗначениеВыполнена <> Выполнена И Выполнена = Истина Тогда
		Если ИсключенаИзПроцесса Тогда
			Комментарий = НСтр("ru = 'Исключена из процесса'");
			ИсторияСобытийЗадач.ЗаписатьСобытие(
				Ссылка, 
				Перечисления.ВидыСобытийЗадач.ИсключенаИзПроцесса, 
				Комментарий, АвторСобытия);
		Иначе
			Комментарий = НСтр("ru = 'Исполнитель: %Исполнитель%'");
			Комментарий = СтрЗаменить(Комментарий, "%Исполнитель%", Строка(Исполнитель));
			
			ИсторияСобытийЗадач.ЗаписатьСобытие(
				Ссылка, 
				Перечисления.ВидыСобытийЗадач.Выполнена, 
				Комментарий,
				АвторСобытия);
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущееЗначениеВыполнена <> Выполнена И Выполнена = Ложь Тогда
		
		Комментарий = НСтр("ru = 'Исполнитель: %2'");
			
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Комментарий,
			,
			Строка(Исполнитель));
			
		ИсторияСобытийЗадач.ЗаписатьСобытие(
			Ссылка, 
			Перечисления.ВидыСобытийЗадач.ВыполнениеОтменено, 
			Комментарий, АвторСобытия);
		
	КонецЕсли;
	
	Если Выполнена <> Истина Тогда
		
		ЗаписатьСобытиеПринятияЗадачи = Истина;
		ЗаписатьСобытиеПеренаправленияЗадачи = Истина;
		
		Если ЗначениеЗаполнено(РольИсполнителя)
			И Ссылка.РольИсполнителя = РольИсполнителя
			И Ссылка.Исполнитель <> Исполнитель Тогда // Если произошло принятие ролей задачи
			
			ЗаписатьСобытиеПринятияЗадачи = Истина;
			ЗаписатьСобытиеПеренаправленияЗадачи = Ложь;
			
		ИначеЕсли Ссылка.Исполнитель <> Исполнитель
				ИЛИ Ссылка.РольИсполнителя <> РольИсполнителя Тогда // Если произошло перенаправление задачи
				
			ЗаписатьСобытиеПринятияЗадачи = Ложь;
			ЗаписатьСобытиеПеренаправленияЗадачи = Истина;
			
		КонецЕсли;
		
		Если ЗаписатьСобытиеПринятияЗадачи
			И Ссылка.ПринятаКИсполнению <> ПринятаКИсполнению Тогда
			
			Комментарий = НСтр("ru = 'Исполнитель: %Исполнитель%'");
			Комментарий = СтрЗаменить(
				Комментарий,
				"%Исполнитель%",
				Строка(?(ЗначениеЗаполнено(Ссылка.Исполнитель), Ссылка.Исполнитель, Исполнитель)));
			
			Если ПринятаКИсполнению Тогда
				СобытиеДляЗадачи = Перечисления.ВидыСобытийЗадач.ПринятаКИсполнению;
			Иначе
				СобытиеДляЗадачи = Перечисления.ВидыСобытийЗадач.ПринятиеКИсполнениюОтменено;
			КонецЕсли;
			
			ИсторияСобытийЗадач.ЗаписатьСобытие(Ссылка, СобытиеДляЗадачи, Комментарий, АвторСобытия);
			
		КонецЕсли;
		
		Если ЗаписатьСобытиеПеренаправленияЗадачи
			И (Ссылка.Исполнитель <> Исполнитель
				ИЛИ Ссылка.РольИсполнителя <> РольИсполнителя) Тогда
			
			ЗаписатьСобытиеПеренаправленияЗадачиПроцесса(АвторСобытия);
		КонецЕсли;
		
		Если Ссылка.СрокИсполнения <> СрокИсполнения Тогда
			
			Комментарий = СтрШаблон(НСтр("ru = 'Был: %1, стал: %2'"),
				?(ЗначениеЗаполнено(Ссылка.СрокИсполнения), Строка(Ссылка.СрокИсполнения), НСтр("ru = 'не указан'")),
				?(ЗначениеЗаполнено(СрокИсполнения), Строка(СрокИсполнения), НСтр("ru = 'не указан'"))
				);
			
			ИсторияСобытийЗадач.ЗаписатьСобытие(
				Ссылка, 
				Перечисления.ВидыСобытийЗадач.ИзмененСрок,
				Комментарий, АвторСобытия);
				
		КонецЕсли;
		
		Если Ссылка.Важность <> Важность Тогда
			
			Комментарий = СтрШаблон(НСтр("ru = 'Была: %1, стала: %2'"),
				Строка(Ссылка.Важность), Строка(Важность));
			
			ИсторияСобытийЗадач.ЗаписатьСобытие(
				Ссылка, 
				Перечисления.ВидыСобытийЗадач.ИзмененаВажность,
				Комментарий, АвторСобытия);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСобытиеПеренаправленияЗадачиПроцесса(АвторСобытия = Неопределено)
	
	ЗаписьОбработана = 
		РаботаСПроцессамиПоДействиямСобытия.ОбработатьЗаписатьСобытияПеренаправленияЗадачиПроцесса(
		ЭтотОбъект);
	Если ЗаписьОбработана Тогда
		Возврат;
	КонецЕсли;
	
	// Стандартная Обработка записи события перенаправления задачи.
	
	БылИсполнитель = Ссылка.Исполнитель;
	Если Не ЗначениеЗаполнено(БылИсполнитель) Тогда
		БылИсполнитель = Ссылка.РольИсполнителя;
	КонецЕсли;
	
	СталИсполнитель = Исполнитель;
	Если Не ЗначениеЗаполнено(СталИсполнитель) Тогда
		СталИсполнитель = РольИсполнителя;
	КонецЕсли;
	
	Комментарий = СтрШаблон(НСтр("ru = 'От исполнителя: %1 к исполнителю: %2'"),
		БылИсполнитель, СталИсполнитель);
	
	КомментарийПеренаправления = "";
	Если ДополнительныеСвойства.Свойство("КомментарийПеренаправления") Тогда
		Комментарий = Комментарий + "." + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Комментарий: %1'"), 
			ДополнительныеСвойства.КомментарийПеренаправления);
		КомментарийПеренаправления = ДополнительныеСвойства.КомментарийПеренаправления;
	КонецЕсли;
	
	ИсторияСобытийЗадач.ЗаписатьСобытие(
		Ссылка, 
		Перечисления.ВидыСобытийЗадач.Перенаправлена,
		Комментарий, АвторСобытия);
	
	КонтекстПеренаправления = РегистрыСведений.ИсторияЗадач.КонтекстПеренаправления();
	КонтекстПеренаправления.ОтКого = БылИсполнитель;
	КонтекстПеренаправления.Кому = СталИсполнитель;
	КонтекстПеренаправления.Комментарий = КомментарийПеренаправления;
	
	РаботаСЗадачами.ДобавитьВИсториюПоИсточнику(
		БизнесПроцесс,
		Ссылка,
		ТекущаяДатаСеанса(),
		Справочники.СобытияЗадач.Перенаправление,
		КонтекстПеренаправления,
		АвторСобытия);
	
КонецПроцедуры

Процедура УстановитьДополнительныеСвойстваИзмененияИсполнителя()
	
	Если Ссылка.Исполнитель <> Исполнитель ИЛИ Ссылка.РольИсполнителя <> РольИсполнителя Тогда
		
		БылИсполнитель = Ссылка.Исполнитель;
		Если Не ЗначениеЗаполнено(БылИсполнитель) Тогда
			БылИсполнитель = Ссылка.РольИсполнителя;
		КонецЕсли;
		
		СталИсполнитель = Исполнитель;
		Если Не ЗначениеЗаполнено(СталИсполнитель) Тогда
			СталИсполнитель = РольИсполнителя;
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("БылИсполнитель", БылИсполнитель);
		ДополнительныеСвойства.Вставить("СталИсполнитель", СталИсполнитель);
		
	КонецЕсли;
	
КонецПроцедуры

// Делает запись бизнес-события перенаправления задачи
Процедура ЗарегистрироватьПеренаправлениеЗадачи()
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		Возврат;
	КонецЕсли; 
	
	ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачиПроцесса;
	
	Если ДополнительныеСвойства.Свойство("БылИсполнитель") Тогда
		БылИсполнитель = ДополнительныеСвойства.БылИсполнитель;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("СталИсполнитель") Тогда
		СталИсполнитель = ДополнительныеСвойства.СталИсполнитель;
	КонецЕсли;
	
	Автоперенаправление = Ложь;
	Если ДополнительныеСвойства.Свойство("Автоперенаправление") Тогда
		Автоперенаправление = ДополнительныеСвойства.Автоперенаправление;
	КонецЕсли;
	
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("БылИсполнитель", БылИсполнитель);
	ПараметрыСобытия.Вставить("СталИсполнитель", СталИсполнитель);
	ПараметрыСобытия.Вставить("Автоперенаправление", Автоперенаправление);
	
	// тут формируем КонтекстСобытия (XML)
	ИнформацияДляЗаписиXML = Новый ЗаписьXML;
	ИнформацияДляЗаписиXML.УстановитьСтроку();
	
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	НовыйСериализаторXDTO.ЗаписатьXML(ИнформацияДляЗаписиXML, ПараметрыСобытия, НазначениеТипаXML.Явное);
	
	СтрокаXML = ИнформацияДляЗаписиXML.Закрыть(); 
	КонтекстСобытия = Новый ХранилищеЗначения(СтрокаXML);
	
	БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, ВидСобытия, КонтекстСобытия);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли