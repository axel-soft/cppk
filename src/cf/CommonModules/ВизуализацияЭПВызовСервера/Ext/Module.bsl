#Область ПрограммныйИнтерфейс

// Вставляет визуализацию ЭП вместо тэга в файле DocX
// 
// Параметры:
// 	МассивТегов - Массив из Строка
// 	ШтампыПодписейЭП - Соответствие из КлючИЗначение:
//	 * Ключ - Строка - см. ВизуализацияЭПКлиентСервер.ТегВсеПодписи
//	                   см. ВизуализацияЭПКлиентСервер.ТегНашиПодписи
//	                   см. ВизуализацияЭПКлиентСервер.ТегПодписиКонтрагентов
//	 * Значение - Массив из см. РаботаСЭП.НовыйДанныеОтметки.
// 	ДвоичныеДанныеФайла - ДвоичныеДанные - Двоичные данные файла docx, в который производится вставка
// 	Расширение - Строка - исходное расширение файла
// 	ВысотаШтрихкода - Число
// 	НастройкиШтампаЭП -Структура
// 	
// Возвращаемое значение:
// 	ДвоичныеДанные - ДвоичныеДанные файла doc, в который вставлен штамп ЭП
Функция ВставитьВизуализациюВместоТэгаВФайлDocx(
	Знач МассивТегов, 
	Знач ШтампыПодписейЭП, 
	Знач ДвоичныеДанныеФайла, 
	Знач Расширение,
	Знач ВысотаШтрихкодаШаблон,
	НастройкиШтампаЭП) Экспорт
	
	Если ДвоичныеДанныеФайла.Размер() = 0 Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
	
	СтарыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанныеФайла.Записать(СтарыйПутьКФайлу);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	
	КопироватьФайл(СтарыйПутьКФайлу, СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip"));
	ИмяФайлаСПутемZIP = СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip");

	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	ВременныйZIPФайл = ПолучитьИмяВременногоФайла("zip"); 

	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайлаСПутемZIP);
	Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();
	
	МакетДляВставкиШтрихкода = ПолучитьОбщийМакет("ВставкаИзображенияВместоТегаВDocx");
	
	ВсеИдКартинок = Новый Массив;

	Для Каждого КлючИЗначение Из ШтампыПодписейЭП Цикл
		
		Тэг  = КлючИЗначение.Ключ;
		ДанныеОтметок = ШтампыПодписейЭП[Тэг];
	
		Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл

			ДвоичныеДанныеКартинки = ДанныеОтметки.ДвоичныеДанныеОтметки;

			ИДкартинки = 0;
			СчетчикСвязей = 0;
			СохранитьИзображениеВоВнутреннейСтруктуреDocx(ВременнаяПапкаДляРазархивирования, 
				ДвоичныеДанныеКартинки, ИДкартинки, СчетчикСвязей);
				
			СтруктФайла = Новый Структура("ДвоичныеДанныеКартинки, ИДКартинки, СчетчикСвязей", 
				ДвоичныеДанныеКартинки, ИДКартинки, СчетчикСвязей); 	
			ВсеИдКартинок.Добавить(СтруктФайла);	
				
		КонецЦикла;		
	КонецЦикла;		
	
	ВсеСтрокиВставкиШтампа = Новый Соответствие; // ключ - тэг, значение -Строка

	НомерТега = 0;
	
	Для Каждого КлючИЗначение Из ШтампыПодписейЭП Цикл
		
		Тэг  = КлючИЗначение.Ключ;
		ДанныеОтметок = ШтампыПодписейЭП[Тэг];

		ТекстДляВставкиШтампаИтоговый = "";
		НомерПодписи = 0;
	
		Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
			
			ДвоичныеДанныеКартинки = ДанныеОтметки.ДвоичныеДанныеОтметки;
			ТипЭП = ДанныеОтметки.ТипЭП;    
			ЭтоВизуализацияПЭП = (ТипЭП = "ПЭП");
			
			ТекКартинка = Новый Картинка(ДвоичныеДанныеКартинки);
			ТекВысота = ТекКартинка.Высота();
			
			ТекВысотаКартинки = Цел(ТекВысота * 22 / 310);  // перевод из старого значения ВысотаКартинки 65 (для высоты картинки в пикселах 310)
			
			ИДкартинки = 0;
			СчетчикСвязей = 0;
			Для Каждого СтруктФайла Из ВсеИдКартинок Цикл
				Если СтруктФайла.ДвоичныеДанныеКартинки = ДвоичныеДанныеКартинки Тогда
					ИДКартинки = СтруктФайла.ИДКартинки;
					СчетчикСвязей = СтруктФайла.СчетчикСвязей;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			ТекстДляВставкиШтампа = МакетДляВставкиШтрихкода.ПолучитьТекст();
			
			// конвертация в EMU (English Metrick Units) - openXML его использует
			//Wikipedia: there are 914400 EMUs per inch
			ВысотаШтрихкодаЗначение = (ТекВысотаКартинки / 25.4) * 914400;
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_ВысотаШтрихкода_", Формат(ВысотаШтрихкодаЗначение,"ЧДЦ=0; ЧГ=0"));
			
			ВысотаШтрихкода = ВысотаШтрихкодаШаблон;
			Если ЭтоВизуализацияПЭП Тогда
				ВысотаШтрихкода = Цел(ВысотаШтрихкода * 4 / 5);
			КонецЕсли; 	
			
			ШиринаШтрихкода = ВысотаШтрихкода * 4;
			ШиринаШтрихкодаЗначение = (ШиринаШтрихкода / 25.4) * 914400;
			Если ЭтоВизуализацияПЭП Тогда
				ШиринаШтрихкодаЗначение = ШиринаШтрихкодаЗначение * 1;
			КонецЕсли;	
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_ШиринаШтрихкода_", Формат(ШиринаШтрихкодаЗначение,"ЧДЦ=0; ЧГ=0"));
			
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_ИДКартинкиВоВнутреннейПапке_", "rId" + Строка(СчетчикСвязей + 1));
	
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_ВставитьИмяТэга_", "ИмяТэга" + Строка(НомерПодписи + НомерТега * 50 + 1) );
				
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_PictureName_", "Picture_" + Строка(НомерПодписи + НомерТега * 50 + 1) );
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа,
			 
				"_ВставитьИД1_", Формат(800 + НомерПодписи + НомерТега * 50,"ЧДЦ=0; ЧГ=0") );
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_ВставитьИД2_", Формат(850 + НомерПодписи + НомерТега * 50,"ЧДЦ=0; ЧГ=0") );
			
			Если ТекстДляВставкиШтампаИтоговый <> "" Тогда
				ТекстДляВставкиШтампаИтоговый = ТекстДляВставкиШтампаИтоговый + " ";
			КонецЕсли;	
			ТекстДляВставкиШтампаИтоговый = ТекстДляВставкиШтампаИтоговый + ТекстДляВставкиШтампа;
			
			НомерПодписи = НомерПодписи + 1;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстДляВставкиШтампаИтоговый) Тогда
			ТекстДляВставкиШтампаИтоговый = "</w:t>" + ТекстДляВставкиШтампаИтоговый + "<w:t>";
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекстДляВставкиШтампаИтоговый) Тогда
			ВсеСтрокиВставкиШтампа[Тэг] = ТекстДляВставкиШтампаИтоговый; 
		КонецЕсли;
	
		НомерТега = НомерТега + 1;
	
	КонецЦикла;     
	
	АвтозаполнениеШаблоновФайловКлиентСервер.КорректироватьРазрывы_ВставитьЭП(ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Ложь;
	ЗаписьXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Обязательно нужно ставить Ложь, иначе будут пропадать пробелы
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	ИспользованныеТеги = Новый Соответствие();  
	
	ВнутриТегRun = Ложь;
	
	Пока ЧтениеXML.Прочитать() Цикл	
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);    
			
			Если ЧтениеXML.Имя = "w:r" Тогда
				ВнутриТегRun = Истина;
			КонецЕсли;	
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,ЧтениеXML.Значение);
				
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Найден = Ложь;
			НайденныйТэг = "";
			ТекстПроверки = НРег(СокрЛП(ЧтениеXML.Значение));
			Для Каждого Тэг Из МассивТегов Цикл
				
				Если ТекстПроверки = НРег(Тэг) Тогда
					Найден = Истина;
					НайденныйТэг = Тэг; 
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Найден Тогда
				
				Тэг = НайденныйТэг;
				ТекстДляВставкиШтампаИтоговый = ВсеСтрокиВставкиШтампа[Тэг];
				
				Если Не ЗначениеЗаполнено(ТекстДляВставкиШтампаИтоговый) Тогда
					ТекстДляВставкиШтампаИтоговый = " ";
				КонецЕсли;	
				
				Если ИспользованныеТеги.Получить(Тэг) <> Неопределено Тогда
					ТекстДляВставкиШтампаИтоговый = " ";
				КонецЕсли;	
					
				НовоеЗначение = СтрЗаменить(ЧтениеXML.Значение, "&lt;&lt;"+Тэг+"&gt;&gt;" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "&lt;"+Тэг+"&gt;" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "<<"+Тэг+">>" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "<"+Тэг+">" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, Тэг, "_");  
				
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "_", ТекстДляВставкиШтампаИтоговый);

				Если ВнутриТегRun Тогда
					
					НовоеЗначение = СтрЗаменить(НовоеЗначение, "<w:r>", "");  
					НовоеЗначение = СтрЗаменить(НовоеЗначение, "</w:r>", "");  
					
				КонецЕсли;	
				
				ЗаписьXML.ЗаписатьБезОбработки(НовоеЗначение);
				
				ИспользованныеТеги.Вставить(Тэг, 1);
				
			Иначе
				ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			Если ЧтениеXML.Имя = "w:r" Тогда
				ВнутриТегRun = Ложь;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;

	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	АвтозаполнениеШаблоновФайловКлиентСервер.ЗаменитьПространствоИменR(
		ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml", ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	Архиватор = Новый ЗаписьZipФайла(ВременныйZIPФайл, "", "");
	Архиватор.Добавить(ВременнаяПапкаДляРазархивирования + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архиватор.Записать();

	ПереместитьФайл(ВременныйZIPФайл, НовыйПутьКФайлу);
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);	
	УдалитьФайлы(СтарыйПутьКФайлу);
	УдалитьФайлы(ВременныйZIPФайл);
	
	ДвоичныеДанныеЗаполненногоФайла = Новый ДвоичныеДанные(НовыйПутьКФайлу);
	УдалитьФайлы(НовыйПутьКФайлу);
	Возврат ДвоичныеДанныеЗаполненногоФайла;
	
КонецФункции

Процедура СохранитьИзображениеВоВнутреннейСтруктуреDocx(
	ВременнаяПапкаДляРазархивирования, 
	ДвоичныеДанныеКартинки, 
	ИДкартинки, 
	СчетчикСвязей,
	Секция = "") Экспорт
	
	ИмяФайлаСвязей = ВременнаяПапкаДляРазархивирования + "/word/_rels/document.xml.rels";
	ИмяФайлаСвязейНовый = ВременнаяПапкаДляРазархивирования + "/word/_rels/document_update.xml.rels";

	ИмяФайлаСвязейОсновное = ВременнаяПапкаДляРазархивирования + "/word/_rels/document.xml.rels";
	
	ИмяТегаКолонтитула = "";
	ИмяФайлаКолонтитула = "";
		 
	//сохранение картинки штрихкода во внутренней структуре файла docx
	СоздатьКаталог(ВременнаяПапкаДляРазархивирования + "/word/media");

	МассивФайлов  = НайтиФайлы(ВременнаяПапкаДляРазархивирования + "/word/media", "Image*.*", Истина);
	МассивФайлов2 = НайтиФайлы(ВременнаяПапкаДляРазархивирования + "/word/media", "image*.*", Истина);
	ВсеФайлы = Новый Соответствие;
	Для Каждого НайденныйФайл Из МассивФайлов Цикл
		ВсеФайлы.Вставить(НайденныйФайл.ПолноеИмя, 1);
	Конеццикла;
	Для Каждого НайденныйФайл Из МассивФайлов2 Цикл
		ВсеФайлы.Вставить(НайденныйФайл.ПолноеИмя, 1);
	Конеццикла;
	
	ИДкартинки = ИДкартинки + ВсеФайлы.Количество();
	
	КартинкаШК = Новый Картинка(ДвоичныеДанныеКартинки);
	КартинкаШК.Записать(ВременнаяПапкаДляРазархивирования 
		+ "/word/media/Image" + Строка(ИДкартинки + 1) + ".png");
	ЧтениеФайлаСвязей = Новый ЧтениеXML();
	ЧтениеФайлаСвязей.ОткрытьФайл(ИмяФайлаСвязей);
	
	ЗаписьФайлаСвязей = Новый ЗаписьXML();
	ЗаписьФайлаСвязей.ОткрытьФайл(ИмяФайлаСвязейНовый);
	
	ЗаписьФайлаСвязей.ЗаписатьОбъявлениеXML();
	Пока ЧтениеФайлаСвязей.Прочитать() Цикл
		Если ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьФайлаСвязей.ЗаписатьНачалоЭлемента(ЧтениеФайлаСвязей.Имя);
			Пока ЧтениеФайлаСвязей.ПрочитатьАтрибут() Цикл
				ЗаписьФайлаСвязей.ЗаписатьАтрибут(ЧтениеФайлаСвязей.Имя,ЧтениеФайлаСвязей.Значение); 
				Если ЧтениеФайлаСвязей.Имя = "Id" Тогда
					СчетчикСвязей = СчетчикСвязей + 1;
					
					rID_Строка = СтрЗаменить(ЧтениеФайлаСвязей.Значение,"rId","");
						
					ОписаниеТипа = Новый ОписаниеТипов("Число");
					rID_Номер = ОписаниеТипа.ПривестиЗначение(rID_Строка);

					СчетчикСвязей = Макс(СчетчикСвязей,rID_Номер);
					
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьФайлаСвязей.ЗаписатьТекст(ЧтениеФайлаСвязей.Значение);
		ИначеЕсли ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеФайлаСвязей.Имя = "Relationships" Тогда
				НоваяСтрока = 
					"<Relationship Target=""media/Image" + Строка(ИДкартинки + 1)
					 + ".png"" Type=""http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"" Id=""rId"
					  + Строка(СчетчикСвязей + 1) + """/>";
				ЗаписьФайлаСвязей.ЗаписатьБезОбработки(НоваяСтрока);
			КонецЕсли;
			ЗаписьФайлаСвязей.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
    ЧтениеФайлаСвязей.Закрыть();
	ЗаписьФайлаСвязей.Закрыть();
	ПереместитьФайл(ИмяФайлаСвязейНовый, 
		ИмяФайлаСвязей);
	УдалитьФайлы(ИмяФайлаСвязейНовый);
	
	//расширение описания типов содержимого в файле docx
	ЧтениеФайлаТипов = Новый ЧтениеXML();
	ЧтениеФайлаТипов.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types].xml");
	ЗаписьФайлаТипов = Новый ЗаписьXML();
	ЗаписьФайлаТипов.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml");		
	ЗаписьФайлаТипов.ЗаписатьОбъявлениеXML();
	
	АтрибутJPEGНайден = Ложь;
	КолонтитулНайден = Ложь;
	Если Не ЗначениеЗаполнено(Секция) Тогда
		КолонтитулНайден = Истина;
	КонецЕсли;	
	
	Пока ЧтениеФайлаТипов.Прочитать() Цикл
		Если ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьФайлаТипов.ЗаписатьНачалоЭлемента(ЧтениеФайлаТипов.Имя);
			Пока ЧтениеФайлаТипов.ПрочитатьАтрибут() Цикл
				ЗаписьФайлаТипов.ЗаписатьАтрибут(ЧтениеФайлаТипов.Имя,ЧтениеФайлаТипов.Значение);
				 
				Если ЧтениеФайлаТипов.Имя = "Extension" И ЧтениеФайлаТипов.Значение = "png" Тогда
					АтрибутJPEGНайден = Истина;
				КонецЕсли;
				Если ЧтениеФайлаТипов.Имя = "PartName" 
				И СтрНайти(ЧтениеФайлаТипов.Значение, ИмяТегаКолонтитула) <> 0 Тогда
					КолонтитулНайден = Истина;
				КонецЕсли;
				
			КонецЦикла;
		ИначеЕсли ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьФайлаТипов.ЗаписатьТекст(ЧтениеФайлаСвязей.Значение);
		ИначеЕсли ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЧтениеФайлаТипов.Имя = "Types" 
			И (Не АтрибутJPEGНайден Или Не КолонтитулНайден) Тогда
				
				НоваяСтрока = "";
				Если Не АтрибутJPEGНайден Тогда
					НоваяСтрока = НоваяСтрока + "<Default Extension=""png"" ContentType=""image/png""/>";
				КонецЕсли;	
				
				ЗаписьФайлаТипов.ЗаписатьБезОбработки(НоваяСтрока);
				
			КонецЕсли;
			
			ЗаписьФайлаТипов.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
	ЧтениеФайлаТипов.Закрыть();
	ЗаписьФайлаТипов.Закрыть();
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml", ВременнаяПапкаДляРазархивирования + "/[Content_Types].xml");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml");

КонецПроцедуры

// Вставляет визуализацию ЭП в файл DocX 
// 
// Параметры:
// 	Расширение - Строка - расширение файла
// 	ТекстНадписи - Строка
// 	ДвоичныеДанныеФайла - ДвоичныеДанные - Двоичные данные файла docx, в который производится вставка 
// 	ДанныеОтметок - Массив из см. РаботаСЭП.НовыйДанныеОтметки.
// 	НастройкиШтампаЭП - см. РаботаСФайламиВызовСервера.ПолучитьНастройкиШтампаЭП.
// 	ВысотаКартинки - Число
// 	
// Возвращаемое значение:
// 	ДвоичныеДанные - ДвоичныеДанные файла docx, в который вставлено изображение штрихкода
Функция ВставитьИзображениеЭПВФайлDocxСУказаниемПоложения(
	Знач Расширение, 
	Знач ТекстНадписи, 
	Знач ДвоичныеДанныеФайла, 
	Знач ДанныеОтметок, 
	НастройкиШтампаЭП, 
	Знач ВысотаКартинкиШаблон) Экспорт

	ПоложениеНаСтранице = НастройкиШтампаЭП.РасположениеШтампаЭП;
	СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;
	
	Если ДвоичныеДанныеФайла.Размер() = 0 Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
	
	СтарыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанныеФайла.Записать(СтарыйПутьКФайлу);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	
	КопироватьФайл(СтарыйПутьКФайлу, СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip"));
	ИмяФайлаСПутемZIP = СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip");

	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	ВременныйZIPФайл = ПолучитьИмяВременногоФайла("zip"); 

	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайлаСПутемZIP);
	Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();

	//получение макета для вставки регштампа
	МакетДляВставки = ПолучитьОбщийМакет("ВставкаИзображенияЭПСУказаниемПоложенияDocx");
	
	ТекстДляВставкиШтампаШаблон = МакетДляВставки.ПолучитьТекст();
	
	Если СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Каждая Тогда
		
		ВызватьИсключение НСТр("ru = 'Вариант вставки на каждой странице можно использовать только на клиенте, не на сервере'");
		
	КонецЕсли;	
	
	ТекстДляВставкиШтампаИтоговый = "";
	ЧислоШтампов = ДанныеОтметок.Количество();
	НомерПодписиПолный = 0;
	НомерПодписи = 0;
	
	СмещениеПоYНакопленное = 0;
	РасстояниеYНакопленное = 0;	
	
	ЧислоСтолбцов = 1;
	ТекСтолбец = 0;
	ЧислоШтамповВСтолбце = 9;
	СмещениеПоXНакопленное = 0;
	РасстояниеXНакопленное = 0;
	
	ЧислоСтолбцов = Цел(ЧислоШтампов / ЧислоШтамповВСтолбце);
	Остаток = ЧислоШтампов - ЧислоШтамповВСтолбце * ЧислоСтолбцов;
	Если Остаток <> 0 Тогда
		ЧислоСтолбцов = ЧислоСтолбцов + 1;
	КонецЕсли;	
	
	Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
		
		ДвоичныеДанныеКартинки = ДанныеОтметки.ДвоичныеДанныеОтметки;    
		ТипЭП = ДанныеОтметки.ТипЭП;    
		ЭтоВизуализацияПЭП = (ТипЭП = "ПЭП");
		
		ТекКартинка = Новый Картинка(ДвоичныеДанныеКартинки);
		ТекВысота = ТекКартинка.Высота();
		ТекШирина = ТекКартинка.Ширина();
		
		ТекВысотаКартинки = Цел(ТекВысота * 22 / 310);  // перевод из старого значения ВысотаКартинки 22 (для высоты картинки в пикселах 310)
		
		ТекстДляВставкиШтампа = ТекстДляВставкиШтампаШаблон;
		
		НомерКартинки = НомерПодписиПолный * 2;
		НомерРисунок  = НомерПодписиПолный * 2 + 1;
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
			"_ИД_Картинки_", Формат(НомерКартинки + 99000,"ЧДЦ=0; ЧГ=0"));
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
			"_ИД_Рисунок_", Формат(НомерРисунок + 99000,"ЧДЦ=0; ЧГ=0"));
		
		Секция  = "";  // тело документа, или хедер или футер 
			
		//установка положения и прочих параметров
		СмещениеПоГоризонтали = 0;
		СмещениеПоВертикали = 0;
		ГоризонтальноеВыравнивание = "";
		ОтносительночегоСчитатьГоризонтальноеВыравнивание = "page";
		ОтносительноЧегоСчитатьВертикальноеВыравнивание   = "page";
		
		// конвертация в EMU (English Metrick Units) - openXML его использует
		//Wikipedia: there are 914400 EMUs per inch
		ВысотаШтрихкода = (ТекВысотаКартинки / 25.4) * 914400;
		
		ВысотаКартинки = ВысотаКартинкиШаблон;
		Если ЭтоВизуализацияПЭП Тогда
			ВысотаКартинки = Цел(ВысотаКартинки * 4 / 5);
		КонецЕсли; 	
		
		ШиринаШтрихкода = ВысотаКартинки * 4;
		ШиринаШтрихкодаЗначение = (ШиринаШтрихкода / 25.4) * 914400;
		Если ЭтоВизуализацияПЭП Тогда
			ШиринаШтрихкодаЗначение = ШиринаШтрихкодаЗначение * 1;
		КонецЕсли;	
		
		СмещениеПоYНаОднуПодпись = ТекВысота * 7.5 / 310;  // перевод из старого значения 10 (для высоты картинки в пикселах 310)
		
		СмещениеПоXНаОднуПодпись = ТекШирина * 7.5 / 1200;  // перевод из старого значения 10 (для высоты картинки в пикселах 310)
		
		ПозицияYНаПодпись = Цел(ТекВысота * 75000 / 310);  // перевод из старого значения 100000 (для высоты картинки в пикселах 310)
		ПозицияXНаПодпись = Цел(ТекШирина * 75000 / 310 * 11);  // перевод из старого значения 100000 (для высоты картинки в пикселах 310)
		
		Если ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйНижний") Тогда
			СмещениеПоГоризонтали = "MAX";
			СмещениеПоВертикали = "MAX";
		ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйВерхний") Тогда
			СмещениеПоГоризонтали = "MAX";
			СмещениеПоВертикали = "MIN";
		ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйВерхний") Тогда
			СмещениеПоГоризонтали = "MIN";
			СмещениеПоВертикали = "MIN";
		ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйНижний") Тогда
			СмещениеПоГоризонтали = "MIN";
			СмещениеПоВертикали = "MAX";
		КонецЕсли;
		
		Секция  = "";  // тело документа, или хедер или футер
		Если СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Каждая Тогда
			Если СмещениеПоВертикали = "MAX" Тогда
				Секция = "footer";
			ИначеЕсли СмещениеПоВертикали = "MIN" Тогда
				Секция = "header";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстНадписи) Тогда
			Если СмещениеПоГоризонтали = "MAX" Тогда
				//выравнивание к правому краю
				ГоризонтальноеВыравнивание = "mso-position-horizontal:right";
			ИначеЕсли СмещениеПоГоризонтали = "MIN" Тогда
				//выравнивание к левому краю
				ГоризонтальноеВыравнивание = "mso-position-horizontal:left";
			КонецЕсли;
			
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоГоризонтали_", Формат(СмещениеПоГоризонтали,"ЧДЦ=0; ЧГ=0") + "pt");
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ГоризонтальноеВыравнивание_", ГоризонтальноеВыравнивание);

			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_БлокВертикальногоПоложения_", 
					"<wp:positionV relativeFrom=""_ОтносительноЧегоСчитатьВертикальноеСмещение_"">
					|	_СмещениеПоВертикали_
					|</wp:positionV>");
					
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоВертикали_", Формат(СмещениеПоВертикали,"ЧДЦ=0; ЧГ=0") + "pt");
			
		Иначе
			
			Если СмещениеПоГоризонтали = "MAX" Тогда
				
				Если ЧислоСтолбцов = 1 Тогда
					//выравнивание к правому краю
					СмещениеПоГоризонтали = "<wp:align>right</wp:align>"; 
					
				Иначе
					
					СмещениеПоГоризонтали = СтрШаблон("<wp:posOffset>%1</wp:posOffset>", 
						Формат(4300000 - РасстояниеXНакопленное, "ЧДЦ=0; ЧН=0; ЧГ=0;"));
					
				КонецЕсли;
				
			ИначеЕсли СмещениеПоГоризонтали = "MIN" Тогда  
				
				Если ЧислоСтолбцов = 1 Тогда
					//выравнивание к левому краю
					СмещениеПоГоризонтали = "<wp:align>left</wp:align>";
				Иначе
					
					СмещениеПоГоризонтали = СтрШаблон("<wp:posOffset>%1</wp:posOffset>", 
						Формат(РасстояниеXНакопленное, "ЧДЦ=0; ЧН=0; ЧГ=0;"));
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_СмещениеПоГоризонтали_", Формат(СмещениеПоГоризонтали,"ЧДЦ=0; ЧГ=0"));

			Если ЧислоШтампов = 1 Или 
				СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Каждая Тогда
			
				Если СмещениеПоВертикали = "MAX" Тогда
					//выравнивание по нижнему краю
					СмещениеПоВертикали = "<wp:align>bottom</wp:align>";
				ИначеЕсли СмещениеПоВертикали = "MIN" Тогда
					//выравнивание по верхнему краю
					СмещениеПоВертикали = "<wp:align>top</wp:align>";
				КонецЕсли;
		
				ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_БлокВертикальногоПоложения_", 
					"<wp:positionV relativeFrom=""_ОтносительноЧегоСчитатьВертикальноеСмещение_"">
					|	_СмещениеПоВертикали_
					|</wp:positionV>");
					
				ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоВертикали_", 
					Формат(СмещениеПоВертикали,"ЧДЦ=0; ЧГ=0"));
					
			Иначе

				//_Проценты_   _СмещениеПоВертикали_
				ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_БлокВертикальногоПоложения_", 
					"<mc:AlternateContent xmlns:mc=""http://schemas.openxmlformats.org/markup-compatibility/2006"">
					|<mc:Choice Requires=""wp14""><wp:positionV relativeFrom=""page"">
					|<wp14:pctPosVOffset>_Проценты_</wp14:pctPosVOffset></wp:positionV></mc:Choice>
					|<mc:Fallback><wp:positionV relativeFrom=""page""><wp:posOffset>_СмещениеПоВертикали_</wp:posOffset>
					|</wp:positionV></mc:Fallback></mc:AlternateContent>");
					
				Если СмещениеПоВертикали = "MAX" Тогда
					
					ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоВертикали_", 
						Формат(8870000 - РасстояниеYНакопленное, "ЧДЦ=0; ЧН=0; ЧГ=0;"));
					ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_Проценты_", 
						Формат( (83 - СмещениеПоYНакопленное)*1000, "ЧДЦ=0; ЧН=0; ЧГ=0;"));
					
				Иначе //MIN
				 
					ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_СмещениеПоВертикали_", 
						Формат(РасстояниеYНакопленное, "ЧДЦ=0; ЧН=0; ЧГ=0;"));
					ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_Проценты_", 
						Формат( (СмещениеПоYНакопленное)*1000, "ЧДЦ=0; ЧН=0; ЧГ=0;"));
				 
				КонецЕсли;			
							
			КонецЕсли;			
			
		КонецЕсли;
		
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ОтносительноЧегоСчитатьВертикальноеСмещение_", ОтносительноЧегоСчитатьВертикальноеВыравнивание);
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ОтносительноЧегоСчитатьГоризонтальноеСмещение_", ОтносительночегоСчитатьГоризонтальноеВыравнивание);
		
		ИДкартинки = 0;
		СчетчикСвязей = 0;
		СохранитьИзображениеВоВнутреннейСтруктуреDocx(ВременнаяПапкаДляРазархивирования, 
			ДвоичныеДанныеКартинки, ИДкартинки, СчетчикСвязей, Секция);
			
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ИДКартинкиВоВнутреннейПапке_", "rId" + Строка(СчетчикСвязей + 1));
		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ВысотаШтрихкода_", 
			Формат(ВысотаШтрихкода,"ЧДЦ=0; ЧГ=0"));

		ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, "_ШиринаШтрихкода_", 
			Формат(ШиринаШтрихкодаЗначение,"ЧДЦ=0; ЧГ=0"));
		
		Если ТекстДляВставкиШтампаИтоговый <> "" Тогда
			ТекстДляВставкиШтампаИтоговый = ТекстДляВставкиШтампаИтоговый + " ";
		КонецЕсли;	
		ТекстДляВставкиШтампаИтоговый = ТекстДляВставкиШтампаИтоговый + ТекстДляВставкиШтампа;
		
		НомерПодписиПолный = НомерПодписиПолный + 1;
		СмещениеПоYНакопленное = СмещениеПоYНакопленное + СмещениеПоYНаОднуПодпись;
		РасстояниеYНакопленное = РасстояниеYНакопленное + ПозицияYНаПодпись;
		
		НомерПодписи = НомерПодписи + 1;
		Если НомерПодписи > ЧислоШтамповВСтолбце Тогда
			НомерПодписи = 0;
			ТекСтолбец = ТекСтолбец + 1;
			СмещениеПоXНакопленное = СмещениеПоXНакопленное + СмещениеПоXНаОднуПодпись;
			РасстояниеXНакопленное = РасстояниеXНакопленное + ПозицияXНаПодпись;
			
			СмещениеПоYНакопленное = 0;
			РасстояниеYНакопленное = 0;
			
		КонецЕсли;	
		
	КонецЦикла;

	ИмяФайлаДокумента = ВременнаяПапкаДляРазархивирования + "/word/document.xml";
	ИмяФайлаДокументаНовый = ВременнаяПапкаДляРазархивирования + "/word/document_update.xml";
	
	Если Секция = "header" Тогда

		ИмяФайлаДокумента = ВременнаяПапкаДляРазархивирования + "/word/header2.xml";
		ИмяФайлаДокументаНовый = ВременнаяПапкаДляРазархивирования + "/word/header2_update.xml";
			
	ИначеЕсли Секция = "footer" Тогда

		ИмяФайлаДокумента = ВременнаяПапкаДляРазархивирования + "/word/footer2.xml";
		ИмяФайлаДокументаНовый = ВременнаяПапкаДляРазархивирования + "/word/footer2_update.xml";
			
	КонецЕсли;
	

	ЧтениеТекста = Новый ЧтениеТекста(
		ИмяФайлаДокумента,
		КодировкаТекста.UTF8);
	ТекстXml = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	// проверим наличие namespace
	ПозицияNamespace = СтрНайти(ТекстXml, "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
	ПозицияNamespaceWP = СтрНайти(ТекстXml, "xmlns:wp=");
	Если ПозицияNamespace = 0 И ПозицияNamespaceWP = 0 Тогда // вставим его
	
		СтрокаДок = "<w:document";
		ПозицияДок = СтрНайти(ТекстXml, СтрокаДок);
		
		Если ПозицияДок <> 0 Тогда // вставим его
		
			ПозицияКонцаДок = ПозицияДок + СтрДлина(СтрокаДок);
	
			ТекстXml = Лев(ТекстXml, ПозицияКонцаДок - 1)
			 + " xmlns:wp=""http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing"" "
			  + Сред(ТекстXml, ПозицияКонцаДок);
			  
		КонецЕсли;  
		
	КонецЕсли;	

	// проверим наличие namespace
	ПозицияNamespace = СтрНайти(ТекстXml, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
	ПозицияNamespaceWP = СтрНайти(ТекстXml, "xmlns:wp14=");
	Если ПозицияNamespace = 0 И ПозицияNamespaceWP = 0 Тогда // вставим его
	
		СтрокаДок = "<w:document";
		ПозицияДок = СтрНайти(ТекстXml, СтрокаДок);
		
		Если ПозицияДок <> 0 Тогда // вставим его
		
			ПозицияКонцаДок = ПозицияДок + СтрДлина(СтрокаДок);
	
			ТекстXml = Лев(ТекстXml, ПозицияКонцаДок - 1)
			 + " xmlns:wp14=""http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing"" "
			  + Сред(ТекстXml, ПозицияКонцаДок);
			  
		КонецЕсли;  
		
	КонецЕсли;	

	Если СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Первая Тогда
	
		СтрокаБОДИ = "<w:body>";
		ПозицияТэгаBODY = СтрНайти(ТекстXml, СтрокаБОДИ);
		Если ПозицияТэгаBODY <> 0 Тогда
			
			ПозицияТэгаBODYКонец = ПозицияТэгаBODY + СтрДлина(СтрокаБОДИ);
			
			ТекстXml = Лев(ТекстXml, ПозицияТэгаBODYКонец - 1)
			 + ТекстДляВставкиШтампаИтоговый
			  + Сред(ТекстXml, ПозицияТэгаBODYКонец);
		КонецЕсли;
				
	ИначеЕсли СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Каждая Тогда
		
		// в колонтитул					
		ПозицияНачала = СтрНайти(ТекстXml, "<w:p");
		СтрокаКонца = "</w:hdr>";

		ПозицияТэгаBODY = СтрНайти(ТекстXml, СтрокаКонца);
		Если ПозицияТэгаBODY <> 0 Тогда
			
			ТекстXml = Лев(ТекстXml, ПозицияНачала - 1)
			 + "<w:p w:rsidR=""009C4730"" w:rsidRDefault=""009C4730""><w:pPr><w:pStyle w:val=""a3""/></w:pPr><w:bookmarkStart w:id=""0"" w:name=""_GoBack""/><w:r><w:rPr><w:noProof/><w:lang w:eastAsia=""ru-RU""/></w:rPr>"
			 + ТекстДляВставкиШтампаИтоговый
			 + "</w:r><w:bookmarkEnd w:id=""0""/></w:p><w:p w:rsidR=""009C4730"" w:rsidRDefault=""009C4730""><w:pPr><w:pStyle w:val=""a3""/></w:pPr></w:p>"
			  + Сред(ТекстXml, ПозицияТэгаBODY);
			
		КонецЕсли;	
		
	ИначеЕсли СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
			
		ПозицияТэгаBODY = СтрНайти(ТекстXml, "</w:body>");
		Если ПозицияТэгаBODY <> 0 Тогда
			
			ТекстXml = Лев(ТекстXml, ПозицияТэгаBODY - 1)
			 + ТекстДляВставкиШтампаИтоговый
			  + Сред(ТекстXml, ПозицияТэгаBODY);
			
		КонецЕсли;	

	КонецЕсли;
	
	ЗаписьТекста = Новый ЗаписьТекста(
		ИмяФайлаДокументаНовый,
		КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстXml);
	ЗаписьТекста.Закрыть();
	
	
	АвтозаполнениеШаблоновФайловКлиентСервер.ЗаменитьПространствоИменR(
		ИмяФайлаДокументаНовый);
	
	ПереместитьФайл(ИмяФайлаДокументаНовый, 
		ИмяФайлаДокумента);
	УдалитьФайлы(ИмяФайлаДокументаНовый);
	
	Архиватор = Новый ЗаписьZipФайла(ВременныйZIPФайл, "", "");
	Архиватор.Добавить(ВременнаяПапкаДляРазархивирования + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архиватор.Записать();

	ПереместитьФайл(ВременныйZIPФайл, НовыйПутьКФайлу);
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);	
	УдалитьФайлы(СтарыйПутьКФайлу);
	УдалитьФайлы(ВременныйZIPФайл);
	
	ДвоичныеДанныеЗаполненногоФайла = Новый ДвоичныеДанные(НовыйПутьКФайлу);
	УдалитьФайлы(НовыйПутьКФайлу);
	Возврат ДвоичныеДанныеЗаполненногоФайла;
	
КонецФункции

// Вставляет визуализацию ЭП в файл Xlsx 
// 
// Параметры:
// 	Расширение - Строка - расширение файла
// 	ТекстНадписи - Строка
// 	ДвоичныеДанныеФайла - ДвоичныеДанные - Двоичные данные файла docx, в который производится вставка 
// 	ДанныеОтметок - Массив из см. РаботаСЭП.НовыйДанныеОтметки.
// 	НастройкиШтампаЭП - см. РаботаСФайламиВызовСервера.ПолучитьНастройкиШтампаЭП.
// 	ВысотаКартинки - Число
// 	
// Возвращаемое значение:
// 	ДвоичныеДанные - ДвоичныеДанные файла Xlsx, в который вставлено изображение штрихкода
Функция ВставитьИзображениеЭПВФайлXlsxСУказаниемПоложения(
	Знач Расширение, 
	Знач ТекстНадписи, 
	Знач ДвоичныеДанныеФайла, 
	Знач ДанныеОтметок, 
	НастройкиШтампаЭП, 
	Знач ВысотаКартинкиШаблон) Экспорт

	ПоложениеНаСтранице = НастройкиШтампаЭП.РасположениеШтампаЭП;
	СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;
	
	Если ДвоичныеДанныеФайла.Размер() = 0 Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
	
	СтарыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанныеФайла.Записать(СтарыйПутьКФайлу);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	
	КопироватьФайл(СтарыйПутьКФайлу, СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip"));
	ИмяФайлаСПутемZIP = СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip");

	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	ВременныйZIPФайл = ПолучитьИмяВременногоФайла("zip"); 

	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайлаСПутемZIP);
	Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();

	ТекстДляВставкиШтампаИтоговый = "";
	ЧислоШтампов = ДанныеОтметок.Количество();
	
	ИДкартинки = 0;
	СчетчикСвязей = 0;
	
	ПервыйЛист = ВременнаяПапкаДляРазархивирования + "/xl/worksheets/sheet1.xml";
	Файл_ПервыйЛист = Новый Файл(ПервыйЛист);
	Если Не Файл_ПервыйЛист.Существует() Тогда // выйти, ошибка.     
		УдалитьФайлы(ВременнаяПапкаДляРазархивирования);	
		Возврат ДвоичныеДанныеФайла; // вернем что было, неизмененное
	КонецЕсли;	
	
	Каталог_drawings = ВременнаяПапкаДляРазархивирования + "/xl/drawings";
	Файл_drawings = Новый Файл(Каталог_drawings);
	Если Не Файл_drawings.Существует() Тогда // создадим каталог
		СоздатьКаталог(Каталог_drawings);
	КонецЕсли;	
	
	Каталог_rels = ВременнаяПапкаДляРазархивирования + "/xl/drawings/_rels";
	Файл_rels = Новый Файл(Каталог_rels);
	Если Не Файл_rels.Существует() Тогда // создадим каталог
		СоздатьКаталог(Каталог_rels);
	КонецЕсли;	   
	
	ПолнаяСтрокаДляВставки = "";
	НомерПодписи = 0;
	
	СмещениеПоYНакопленное = 5000; // отступ
	
	РасстояниеYНакопленное = 0;	 
	
	НакопленнаяСтрокаВставки  = 0; // row   (по сути Y координата)
	НакопленнаяКолонкаВставки = 0; // col  столбец (по сути X координата)
	
	Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
		
		ДвоичныеДанныеКартинки = ДанныеОтметки.ДвоичныеДанныеОтметки;    
		ТипЭП = ДанныеОтметки.ТипЭП;    
		ЭтоВизуализацияПЭП = (ТипЭП = "ПЭП");
		
		ТекКартинка = Новый Картинка(ДвоичныеДанныеКартинки);
		ТекВысота = ТекКартинка.Высота();
		ТекВысотаКартинки = Цел(ТекВысота * 22 / 310);  // перевод из старого значения ВысотаКартинки 22 (для высоты картинки в пикселах 310)
	
		СохранитьИзображениеВоВнутреннейСтруктуре_Xlsx(ВременнаяПапкаДляРазархивирования, 
			ДвоичныеДанныеКартинки, ИДкартинки, СчетчикСвязей, ""); 
			
		// тут строку собираем (<xdr:absoluteAnchor)	     
		//rId1 заменяем на номер картинки, и координаты ставим  <xdr:row> <xdr:row>17</xdr:row> 
		// <a:off x="0" y="2476500"/>  cx cy   
		// Column - колонка/столбец (по сути X координата)
		// Row - строка (по сути Y координата)    
		
		
				//|<xdr:pos x=""5000"" y=""_КоординатаY_""/>

		ДобавкаСтроки = 
		"<xdr:absoluteAnchor>
		|<xdr:pos x=""_КоординатаX_"" y=""_КоординатаY_""/>
		|<xdr:ext cx=""_ШиринаКартинки_"" cy=""_ВысотаКартинки_""/>		
		|<xdr:pic><xdr:nvPicPr><xdr:cNvPr id=""2"" name=""Рисунок 1"">
		|<a:extLst><a:ext uri=""{FF2B5EF4-FFF2-40B4-BE49-F238E27FC236}"">
		|<a16:creationId xmlns:a16=""http://schemas.microsoft.com/office/drawing/2014/main"" id=""{9B506DE0-5930-4FCB-918C-D0E88FA6E171}""/>
		|</a:ext></a:extLst></xdr:cNvPr><xdr:cNvPicPr><a:picLocks noChangeAspect=""1""/>
		|</xdr:cNvPicPr></xdr:nvPicPr><xdr:blipFill>
		|<a:blip xmlns:r=""http://schemas.openxmlformats.org/officeDocument/2006/relationships"" r:embed=""rId1""/>
		|<a:stretch><a:fillRect/></a:stretch></xdr:blipFill><xdr:spPr><a:xfrm>
		|<a:off x=""0"" y=""_КоординатаY_""/>
		|<a:ext cx=""_ШиринаКартинки_"" cy=""_ВысотаКартинки_""/>
		|</a:xfrm><a:prstGeom prst=""rect""><a:avLst/></a:prstGeom></xdr:spPr>
		|</xdr:pic><xdr:clientData/></xdr:absoluteAnchor>"; 
		
		// конвертация в EMU (English Metrick Units) - openXML его использует
		//Wikipedia: there are 914400 EMUs per inch
		_ВысотаКартинки_ = (ТекВысотаКартинки / 25.4) * 914400;
		
		ШиринаШтрихкода = ТекВысотаКартинки * 4;
		_ШиринаКартинки_ = (ШиринаШтрихкода / 25.4) * 914400;
		
		КоординатаXПиксели = 0;
		Если ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйНижний") Тогда
			КоординатаXПиксели = 210 - ШиринаШтрихкода - 35;
		ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйВерхний") Тогда
			КоординатаXПиксели = 210 - ШиринаШтрихкода - 35;
		ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйВерхний") Тогда
			КоординатаXПиксели = 5; //отступ
		ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйНижний") Тогда
			КоординатаXПиксели = 5; //отступ
		КонецЕсли;
		
		_КоординатаX_ = (КоординатаXПиксели / 25.4) * 914400;
		ДобавкаСтроки = СтрЗаменить(ДобавкаСтроки, "_КоординатаX_", Формат(_КоординатаX_, "ЧДЦ=0; ЧН=0; ЧГ=0"));    
		
		ДобавкаСтроки = СтрЗаменить(ДобавкаСтроки, "rId1", "rId" + Строка(СчетчикСвязей + 1));    
		
		ДобавкаСтроки = СтрЗаменить(ДобавкаСтроки, "_СтрокаНачало_", Формат(НакопленнаяСтрокаВставки,"ЧДЦ=0; ЧН=0; ЧГ=0"));    
		ДобавкаСтроки = СтрЗаменить(ДобавкаСтроки, "_СтрокаКонец_", Формат(НакопленнаяСтрокаВставки + 4,"ЧДЦ=0; ЧГ=0"));    
		
		ДобавкаСтроки = СтрЗаменить(ДобавкаСтроки, "_СтолбецНачало_", Формат(НакопленнаяКолонкаВставки,"ЧДЦ=0; ЧН=0; ЧГ=0"));    
		ДобавкаСтроки = СтрЗаменить(ДобавкаСтроки, "_СтолбецКонец_", Формат(НакопленнаяКолонкаВставки + 4,"ЧДЦ=0; ЧГ=0"));    
		
		ДобавкаСтроки = СтрЗаменить(ДобавкаСтроки, "_КоординатаY_", Формат(СмещениеПоYНакопленное, "ЧДЦ=0; ЧН=0; ЧГ=0"));    
		ДобавкаСтроки = СтрЗаменить(ДобавкаСтроки, "_ШиринаКартинки_", Формат(_ШиринаКартинки_,"ЧДЦ=0; ЧГ=0"));    
		ДобавкаСтроки = СтрЗаменить(ДобавкаСтроки, "_ВысотаКартинки_", Формат(_ВысотаКартинки_,"ЧДЦ=0; ЧГ=0"));    
		
		ПолнаяСтрокаДляВставки = ПолнаяСтрокаДляВставки + ДобавкаСтроки;
		
		НомерПодписи = НомерПодписи + 1;
		НакопленнаяСтрокаВставки = НакопленнаяСтрокаВставки + 5;   
		
		СмещениеПоYНакопленное = СмещениеПоYНакопленное + _ВысотаКартинки_;

	КонецЦикла;

	Путь_Drawing1 = ВременнаяПапкаДляРазархивирования + "/xl/drawings/drawing1.xml";
	Файл_drawing1 = Новый Файл(Путь_Drawing1);
	Если Не Файл_drawing1.Существует() Тогда // создадим каталог и файлы в нем
		
		// создадим файл drawing1.xml + drawing1.xml.rels  (cx cy надо вычислять под размер картинки)
		ТекстФайла_drawing1 = 
		"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
		|<xdr:wsDr xmlns:xdr=""http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing"" 
		|xmlns:a=""http://schemas.openxmlformats.org/drawingml/2006/main"">"
		+ ПолнаяСтрокаДляВставки + 
		"</xdr:wsDr>";
		
		ЗаписьТекста = Новый ЗаписьТекста(
			Путь_Drawing1,
			КодировкаТекста.UTF8);
		ЗаписьТекста.Записать(ТекстФайла_drawing1);
		ЗаписьТекста.Закрыть();      
		
	Иначе  // если файл drawing1.xml существует - добавим в него картинку - перед  </xdr:wsDr>	
		
		ЧтениеТекста = Новый ЧтениеТекста(
			Путь_Drawing1,
			КодировкаТекста.UTF8);
		ТекстXml = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();    
		
		ПозицияТэгаBODY = СтрНайти(ТекстXml, "</xdr:wsDr>");
		Если ПозицияТэгаBODY <> 0 Тогда
			
			ТекстXml = Лев(ТекстXml, ПозицияТэгаBODY - 1)
			 + ПолнаяСтрокаДляВставки
			  + Сред(ТекстXml, ПозицияТэгаBODY);    
			  
		Иначе	  

			ПозицияНачалаТэгаBODY = СтрНайти(ТекстXml, "<xdr:wsDr");
			Если ПозицияНачалаТэгаBODY <> 0 Тогда

				ПозицияКонцаТэгаBODY = СтрНайти(ТекстXml, "/>", НаправлениеПоиска.СНачала, ПозицияНачалаТэгаBODY);
				Если ПозицияКонцаТэгаBODY <> 0 Тогда

					ТекстXml = Лев(ТекстXml, ПозицияКонцаТэгаBODY - 1)
					+ ">"
					+ ПолнаяСтрокаДляВставки
					+ "</xdr:wsDr>"
					+ Сред(ТекстXml, ПозицияКонцаТэгаBODY + 2);    
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		ЗаписьТекста = Новый ЗаписьТекста(
			Путь_Drawing1,
			КодировкаТекста.UTF8);
		ЗаписьТекста.Записать(ТекстXml);
		ЗаписьТекста.Закрыть();
		
	КонецЕсли;	

	СчетчикСвязейDrawing = 0;  
	Сохранить_worksheets_rels(ВременнаяПапкаДляРазархивирования, СчетчикСвязейDrawing);
	
	// ПервыйЛист - добавим сюда <drawing r:id="rId1"/></worksheet> - как строку сделаем.    Если еще нет такой строки
	// \xl\worksheets\sheet1.xml
	
	ИмяФайлаДокумента = ВременнаяПапкаДляРазархивирования + "/xl/worksheets/sheet1.xml";
	ИмяФайлаДокументаНовый = ВременнаяПапкаДляРазархивирования + "/xl/worksheets/sheet1_update.xml";
	
	ЧтениеТекста = Новый ЧтениеТекста(
		ИмяФайлаДокумента,
		КодировкаТекста.UTF8);
	ТекстXml = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();    
	
	Если СтрНайти(ТекстXml, "drawing r:id") = 0 Тогда
	
		ПозицияТэгаBODY = СтрНайти(ТекстXml, "</worksheet>");
		Если ПозицияТэгаBODY <> 0 Тогда
			
			ТекстДляВставкиШтампаИтоговый = СтрШаблон("<drawing r:id=""rId%1""/>", Строка(СчетчикСвязейDrawing));
			
			ТекстXml = Лев(ТекстXml, ПозицияТэгаBODY - 1)
			 + ТекстДляВставкиШтампаИтоговый
			  + Сред(ТекстXml, ПозицияТэгаBODY);
			
		КонецЕсли;	
	  
	КонецЕсли;	
	
	ЗаписьТекста = Новый ЗаписьТекста(
		ИмяФайлаДокументаНовый,
		КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстXml);
	ЗаписьТекста.Закрыть();
	
	АвтозаполнениеШаблоновФайловКлиентСервер.ЗаменитьПространствоИменR(
		ИмяФайлаДокументаНовый);
	
	ПереместитьФайл(ИмяФайлаДокументаНовый, 
		ИмяФайлаДокумента);
	УдалитьФайлы(ИмяФайлаДокументаНовый);
	
	Архиватор = Новый ЗаписьZipФайла(ВременныйZIPФайл, "", "");
	Архиватор.Добавить(ВременнаяПапкаДляРазархивирования + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архиватор.Записать();

	ПереместитьФайл(ВременныйZIPФайл, НовыйПутьКФайлу);
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);	
	УдалитьФайлы(СтарыйПутьКФайлу);
	УдалитьФайлы(ВременныйZIPФайл);
	
	ДвоичныеДанныеЗаполненногоФайла = Новый ДвоичныеДанные(НовыйПутьКФайлу);
	УдалитьФайлы(НовыйПутьКФайлу);
	Возврат ДвоичныеДанныеЗаполненногоФайла;
	
КонецФункции

// Добавляет картинку в каталог картинок (xl/media) и текст в файлы drawings/_rels/drawing1.xml.rels и  [Content_Types].xml
// 
// Параметры:
//  ВременнаяПапкаДляРазархивирования - Строка      
//  ДвоичныеДанныеКартинки   - ДвоичныеДанные
//  ИДкартинки  - Число
//  СчетчикСвязей  - Число
//  Секция  -Строка
Процедура СохранитьИзображениеВоВнутреннейСтруктуре_Xlsx(
	ВременнаяПапкаДляРазархивирования, 
	ДвоичныеДанныеКартинки, 
	ИДкартинки, 
	СчетчикСвязей,
	Секция = "") Экспорт    
	
	// /xl/media/image1.png
	// /xl/drawings/_rels/drawing1.xml.rels
	
	ИмяФайлаСвязей = ВременнаяПапкаДляРазархивирования + "/xl/drawings/_rels/drawing1.xml.rels";
	ИмяФайлаСвязейНовый = ВременнаяПапкаДляРазархивирования + "/xl/drawings/_rels/drawing1_update.xml.rels";
	
	Файл_Rels1 = Новый Файл(ИмяФайлаСвязей);
	Если Не Файл_Rels1.Существует() Тогда // создадим файл, пустой - без конкретной ссылки  
		
		ТекстФайла_Rels1 = 
		"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
		|<Relationships xmlns=""http://schemas.openxmlformats.org/package/2006/relationships"">
		|</Relationships>";

		ЗаписьТекста = Новый ЗаписьТекста(
			ИмяФайлаСвязей,
			КодировкаТекста.UTF8);
		ЗаписьТекста.Записать(ТекстФайла_Rels1);
		ЗаписьТекста.Закрыть();      
		
	КонецЕсли;	         

	ИмяТегаКолонтитула = "";
	ИмяФайлаКолонтитула = "";
		 
	//сохранение картинки штрихкода во внутренней структуре файла xlsx
	СоздатьКаталог(ВременнаяПапкаДляРазархивирования + "/xl/media");

	МассивФайлов  = НайтиФайлы(ВременнаяПапкаДляРазархивирования + "/xl/media", "Image*.*", Истина);
	МассивФайлов2 = НайтиФайлы(ВременнаяПапкаДляРазархивирования + "/xl/media", "image*.*", Истина);
	ВсеФайлы = Новый Соответствие;
	Для Каждого НайденныйФайл Из МассивФайлов Цикл
		ВсеФайлы.Вставить(НайденныйФайл.ПолноеИмя, 1);
	Конеццикла;
	Для Каждого НайденныйФайл Из МассивФайлов2 Цикл
		ВсеФайлы.Вставить(НайденныйФайл.ПолноеИмя, 1);
	Конеццикла;
	
	ИДкартинки = ИДкартинки + ВсеФайлы.Количество();
	
	КартинкаШК = Новый Картинка(ДвоичныеДанныеКартинки);
	КартинкаШК.Записать(ВременнаяПапкаДляРазархивирования 
		+ "/xl/media/Image" + Строка(ИДкартинки + 1) + ".png");
	ЧтениеФайлаСвязей = Новый ЧтениеXML();
	ЧтениеФайлаСвязей.ОткрытьФайл(ИмяФайлаСвязей);
	
	ЗаписьФайлаСвязей = Новый ЗаписьXML();
	ЗаписьФайлаСвязей.ОткрытьФайл(ИмяФайлаСвязейНовый);
	
	ЗаписьФайлаСвязей.ЗаписатьОбъявлениеXML();
	Пока ЧтениеФайлаСвязей.Прочитать() Цикл
		Если ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьФайлаСвязей.ЗаписатьНачалоЭлемента(ЧтениеФайлаСвязей.Имя);
			Пока ЧтениеФайлаСвязей.ПрочитатьАтрибут() Цикл
				ЗаписьФайлаСвязей.ЗаписатьАтрибут(ЧтениеФайлаСвязей.Имя,ЧтениеФайлаСвязей.Значение); 
				Если ЧтениеФайлаСвязей.Имя = "Id" Тогда
					СчетчикСвязей = СчетчикСвязей + 1;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьФайлаСвязей.ЗаписатьТекст(ЧтениеФайлаСвязей.Значение);
		ИначеЕсли ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеФайлаСвязей.Имя = "Relationships" Тогда
				НоваяСтрока = 
					"<Relationship Target=""../media/Image" + Строка(ИДкартинки + 1)
					 + ".png"" Type=""http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"" Id=""rId"
					  + Строка(СчетчикСвязей + 1) + """/>";
				ЗаписьФайлаСвязей.ЗаписатьБезОбработки(НоваяСтрока);
			КонецЕсли;
			ЗаписьФайлаСвязей.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
    ЧтениеФайлаСвязей.Закрыть();
	ЗаписьФайлаСвязей.Закрыть();
	ПереместитьФайл(ИмяФайлаСвязейНовый, 
		ИмяФайлаСвязей);
	УдалитьФайлы(ИмяФайлаСвязейНовый);
	
	// /[Content_Types].xml  - добавим  Default Extension=""png
	//расширение описания типов содержимого в файле xlsx
	ЧтениеФайлаТипов = Новый ЧтениеXML();
	ЧтениеФайлаТипов.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types].xml");
	ЗаписьФайлаТипов = Новый ЗаписьXML();
	ЗаписьФайлаТипов.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml");		
	ЗаписьФайлаТипов.ЗаписатьОбъявлениеXML();
	
	АтрибутJPEGНайден = Ложь;
	КолонтитулНайден = Ложь;
	Если Не ЗначениеЗаполнено(Секция) Тогда
		КолонтитулНайден = Истина;
	КонецЕсли;	           
	
	drawing1Найден = Ложь;
	
	Пока ЧтениеФайлаТипов.Прочитать() Цикл
		Если ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьФайлаТипов.ЗаписатьНачалоЭлемента(ЧтениеФайлаТипов.Имя);
			Пока ЧтениеФайлаТипов.ПрочитатьАтрибут() Цикл
				ЗаписьФайлаТипов.ЗаписатьАтрибут(ЧтениеФайлаТипов.Имя,ЧтениеФайлаТипов.Значение);
				 
				Если ЧтениеФайлаТипов.Имя = "Extension" И ЧтениеФайлаТипов.Значение = "png" Тогда
					АтрибутJPEGНайден = Истина;
				КонецЕсли;   
				
				Если ЧтениеФайлаТипов.Имя = "PartName" 
				И СтрНайти(ЧтениеФайлаТипов.Значение, ИмяТегаКолонтитула) <> 0 Тогда
					КолонтитулНайден = Истина;
				КонецЕсли;

				Если ЧтениеФайлаТипов.Имя = "PartName" И СтрНайти(ЧтениеФайлаТипов.Значение, "drawing1.xml") <> 0 Тогда
					drawing1Найден = Истина;
				КонецЕсли;   
				
			КонецЦикла;
		ИначеЕсли ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьФайлаТипов.ЗаписатьТекст(ЧтениеФайлаСвязей.Значение);
		ИначеЕсли ЧтениеФайлаТипов.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЧтениеФайлаТипов.Имя = "Types" 
			И (Не АтрибутJPEGНайден Или Не КолонтитулНайден) Тогда
				
				НоваяСтрока = "";
				Если Не АтрибутJPEGНайден Тогда
					НоваяСтрока = НоваяСтрока + "<Default Extension=""png"" ContentType=""image/png""/>";
				КонецЕсли;	
				
				ЗаписьФайлаТипов.ЗаписатьБезОбработки(НоваяСтрока);

				НоваяСтрока = "";
				Если Не drawing1Найден Тогда
					НоваяСтрока = НоваяСтрока + 
					"<Override PartName=""/xl/drawings/drawing1.xml"" ContentType=""application/vnd.openxmlformats-officedocument.drawing+xml""/>";
				КонецЕсли;	
				
				ЗаписьФайлаТипов.ЗаписатьБезОбработки(НоваяСтрока);
				
			КонецЕсли;
			
			ЗаписьФайлаТипов.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
	ЧтениеФайлаТипов.Закрыть();
	ЗаписьФайлаТипов.Закрыть();
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml", ВременнаяПапкаДляРазархивирования + "/[Content_Types].xml");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/[Content_Types]_update.xml");

КонецПроцедуры

// Добавляет текст в worksheets/_rels/sheet1.xml.rels
// 
// Параметры:
//  ВременнаяПапкаДляРазархивирования - Строка
//  СчетчикСвязей  - Число
Процедура Сохранить_worksheets_rels(ВременнаяПапкаДляРазархивирования, СчетчикСвязей) Экспорт    
	
	// "/xl/worksheets/_rels/sheet1.xml.rels"        
	
	ИмяФайлаСвязей = ВременнаяПапкаДляРазархивирования + "/xl/worksheets/_rels/sheet1.xml.rels";
	ИмяФайлаСвязейНовый = ВременнаяПапкаДляРазархивирования + "/xl/worksheets/_rels/sheet1_update.xml.rels";
	
	Файл_Rels1 = Новый Файл(ИмяФайлаСвязей);
	Если Не Файл_Rels1.Существует() Тогда // создадим файл, пустой - без конкретной ссылки  
		
		Каталог_rels = ВременнаяПапкаДляРазархивирования + "/xl/worksheets/_rels";
		Файл_rels = Новый Файл(Каталог_rels);
		Если Не Файл_rels.Существует() Тогда // создадим каталог
			СоздатьКаталог(Каталог_rels);
		КонецЕсли;	   
		
		ТекстФайла_Rels1 = 
		"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
		|<Relationships xmlns=""http://schemas.openxmlformats.org/package/2006/relationships"">
		|</Relationships>";

		ЗаписьТекста = Новый ЗаписьТекста(
			ИмяФайлаСвязей,
			КодировкаТекста.UTF8);
		ЗаписьТекста.Записать(ТекстФайла_Rels1);
		ЗаписьТекста.Закрыть();      
		
	КонецЕсли;	         

	ЧтениеФайлаСвязей = Новый ЧтениеXML();
	ЧтениеФайлаСвязей.ОткрытьФайл(ИмяФайлаСвязей);
	
	ЗаписьФайлаСвязей = Новый ЗаписьXML();
	ЗаписьФайлаСвязей.ОткрытьФайл(ИмяФайлаСвязейНовый);
	
	ЗаписьФайлаСвязей.ЗаписатьОбъявлениеXML();
	Пока ЧтениеФайлаСвязей.Прочитать() Цикл
		Если ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьФайлаСвязей.ЗаписатьНачалоЭлемента(ЧтениеФайлаСвязей.Имя);
			Пока ЧтениеФайлаСвязей.ПрочитатьАтрибут() Цикл
				ЗаписьФайлаСвязей.ЗаписатьАтрибут(ЧтениеФайлаСвязей.Имя,ЧтениеФайлаСвязей.Значение); 
				Если ЧтениеФайлаСвязей.Имя = "Id" Тогда
					СчетчикСвязей = СчетчикСвязей + 1;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьФайлаСвязей.ЗаписатьТекст(ЧтениеФайлаСвязей.Значение);
		ИначеЕсли ЧтениеФайлаСвязей.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеФайлаСвязей.Имя = "Relationships" Тогда
				// rId1 - это не от картинки, а именно от drawing1
				НоваяСтрока = 
					СтрШаблон("<Relationship Id=""rId%1"" Type=""http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing"" Target=""../drawings/drawing1.xml""/>",
						Строка(СчетчикСвязей + 1));  
				СчетчикСвязей = СчетчикСвязей + 1;		
				ЗаписьФайлаСвязей.ЗаписатьБезОбработки(НоваяСтрока);
			КонецЕсли;
			ЗаписьФайлаСвязей.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
    ЧтениеФайлаСвязей.Закрыть();
	ЗаписьФайлаСвязей.Закрыть();
	ПереместитьФайл(ИмяФайлаСвязейНовый, 
		ИмяФайлаСвязей);
	УдалитьФайлы(ИмяФайлаСвязейНовый);

КонецПроцедуры

// Возвращает массив параметров штампов для 1С Штамп
// 
// Параметры:
// МассивШтампов - Массив из ДвоичныеДанные  - картинки штампов
// Расширение - Строка - расширение файла штампа, обычно png
// 	
// Возвращаемое значение:
//  Массив из см. Интеграция1СШтампКлиентСервер.НовыеПараметрыШтампа
//
Функция ПараметрыШтампов(МассивШтампов, Расширение) Экспорт
	
	Штампы = Новый Массив;
	
	ОтступОтКраевСтраницы    = Интеграция1СШтампКлиентСервер.ЗначениеОтступаОтКраевСтраницыПоУмолчанию();
	КоэффициентПрозрачности  = 192;
	ВариантРасположения      = Интеграция1СШтампКлиентСервер.ВариантРасположенияВнизуПоЦентру();
	ПравилаРасположения      = Интеграция1СШтампКлиентСервер.ПравилоРасположенияНаКаждойСтранице();
	Прозрачность             = Интеграция1СШтампКлиентСервер.ЗначениеПрозрачностиПрозрачный();

	ЗначениеПрозрачностиПрозрачный = Интеграция1СШтампКлиентСервер.ЗначениеПрозрачностиПрозрачный();
	ИспользуетсяПрозрачность = Прозрачность = ЗначениеПрозрачностиПрозрачный;  
	
	КоэффициентИзмененияРазмера = 0.22;
	ОтступОтВерхнейГраницы = 10;
	ОтступОтЛевойГраницы = 10;
	
	Для Каждого ДвоичныеДанныеШтампа Из МассивШтампов Цикл
		
		ПараметрыФайлаШтампа = Интеграция1СШтампКлиентСервер.НовыеПараметрыШтампа();
		
		ПараметрыФайлаШтампа.ПараметрыШтампа.ДвоичныеДанные    = ДвоичныеДанныеШтампа;
		ПараметрыФайлаШтампа.ПараметрыШтампа.Расширение        = Расширение;
		ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение    = ВариантРасположения;
		ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Верх = ОтступОтВерхнейГраницы;
		ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Лево = ОтступОтЛевойГраницы;
		ПараметрыФайлаШтампа.КоэффициентИзмененияРазмера       = КоэффициентИзмененияРазмера;
		ПараметрыФайлаШтампа.Настройки.Прозрачность.Прозрачный = ИспользуетсяПрозрачность;
		ПараметрыФайлаШтампа.Настройки.Прозрачность.Уровень    = КоэффициентПрозрачности;
		ПараметрыФайлаШтампа.ОтступОтГраниц                    = ОтступОтКраевСтраницы;
		ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположения;
		
		Штампы.Добавить(ПараметрыФайлаШтампа);
		
	КонецЦикла;
	
	Возврат Штампы;
	
КонецФункции

// Возвращает страницу вставки для 1С Штамп
// 
// Параметры:
// 	СтраницаВставкиШтампаЭП - ПеречислениеССылка.СтраницаВставкиКартинки
// 	
// Возвращаемое значение:
//  Строка - например "НаПервойСтранице"
//
Функция ПравилаРасположения1СШтамп(СтраницаВставкиШтампаЭП) Экспорт
	
	ПравилаРасположения      = Интеграция1СШтампКлиентСервер.ПравилоРасположенияНаПервойСтранице();    
	
	Если СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Каждая Тогда
		ПравилаРасположения      = Интеграция1СШтампКлиентСервер.ПравилоРасположенияНаКаждойСтранице();
	ИначеЕсли СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Первая Тогда
		ПравилаРасположения      = Интеграция1СШтампКлиентСервер.ПравилоРасположенияНаПервойСтранице();
	ИначеЕсли СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
		ПравилаРасположения      = Интеграция1СШтампКлиентСервер.ПравилоРасположенияНаПоследнейСтранице();
	КонецЕсли;	
	
	Возврат ПравилаРасположения;
	
КонецФункции

// Возвращает угол вставки для 1С Штамп
// 
// Параметры:
// 	ПоложениеНаСтранице - ПеречислениеССылка.МестаВставкиКартинки
// 	
// Возвращаемое значение:
//  Строка - например "ПравыйНижнийУгол"
//
Функция ВариантРасположения1СШтамп(ПоложениеНаСтранице) Экспорт
	
	ВариантРасположения      = Интеграция1СШтампКлиентСервер.ВариантРасположенияВверхуСлева();
	Если ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйНижний") Тогда
		ВариантРасположения      = "ПравыйНижнийУгол"; //Интеграция1СШтампКлиентСервер.ВариантРасположенияВнизуСправа();
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйВерхний") Тогда
		ВариантРасположения      = "ПравыйВерхнийУгол"; //Интеграция1СШтампКлиентСервер.ВариантРасположенияВверхуСправа();
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйВерхний") Тогда
		ВариантРасположения      = "ЛевыйВерхнийУгол"; //Интеграция1СШтампКлиентСервер.ВариантРасположенияВверхуСлева();
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйНижний") Тогда
		ВариантРасположения      = "ЛевыйНижнийУгол"; //Интеграция1СШтампКлиентСервер.ВариантРасположенияВнизуСлева();
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПроизвольноеПоложение") Тогда
		ВариантРасположения      = "ПоКоординатам"; //Интеграция1СШтампКлиентСервер.ПоКоординатам();
	КонецЕсли;
	
	Возврат ВариантРасположения;
	
КонецФункции

// По настройкам расположения рассчитывает координаты - для 1С:Штамп. Для А4 - примерно 350 на 900
// 
// Параметры:
//  ДвоичныеДанныеОтметки - ДвоичныеДанные  - штампа
//  ПоложениеНаСтранице - ПеречислениеССылка.МестаВставкиКартинки
//  НакопленнаяВысотаКартинок - Число - сумма от (высота картинки+2)
//  НакопленнаяШиринаКартинок - Число - сумма от (ширина картинки+2)
//  ЧислоШтампов  -Число
//  НомерШтампаПоY - Число
// 
// Возвращаемое значение:
//  См. РаботаСКартинками.НовыйКоординаты()
Функция КоординатыДля1СШтампПоНастройкам(ДвоичныеДанныеОтметки, ПоложениеНаСтранице, 
	НакопленнаяВысотаКартинок, НакопленнаяШиринаКартинок,
	ЧислоШтампов, НомерШтампаПоY) Экспорт

	ТекКартинка = Новый Картинка(ДвоичныеДанныеОтметки);
	ТекВысота = ТекКартинка.Высота();
	ТекВысотаКартинки = Цел(ТекВысота * 22 / 310);  // перевод из старого значения ВысотаКартинки 65 (для высоты картинки в пикселах 310)
	ТекШирина = ТекКартинка.Ширина();
	ТекШиринаКартинки = Цел(ТекШирина * 22 / 1200);  // перевод из старого значения ВысотаКартинки 65 (для высоты картинки в пикселах 310)
	
	ЧислоШтамповВСтолбце = 10;
	ЧислоСтолбцов = Цел(ЧислоШтампов / ЧислоШтамповВСтолбце);
	Остаток = ЧислоШтампов - ЧислоШтамповВСтолбце * ЧислоСтолбцов;
	Если Остаток <> 0 Тогда
		ЧислоСтолбцов = ЧислоСтолбцов + 1;
	КонецЕсли;	
	
	Координаты = РаботаСКартинками.НовыйКоординаты();
	
	// Для А4 - примерно 350 на 900
	
	ДельтаYКартинки = Цел(ТекВысотаКартинки * 3.256 + 2);
	ДельтаXКартинки = Цел(ТекШиринаКартинки * 12.5 + 2);
	
	Если ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйНижний") Тогда
		
		НакопленнаяВысотаКартинок = НакопленнаяВысотаКартинок + ДельтаYКартинки; // тут инкрементируем До
		
		Координаты.Слева = 290 - НакопленнаяШиринаКартинок;
		Координаты.Сверху = Цел(830 - НакопленнаяВысотаКартинок);
		
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйВерхний") Тогда
		
		Координаты.Слева = 290 - НакопленнаяШиринаКартинок;
		Координаты.Сверху = Цел(10 + НакопленнаяВысотаКартинок);
		
		НакопленнаяВысотаКартинок = НакопленнаяВысотаКартинок + ДельтаYКартинки; // тут инкрементируем После
		
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйВерхний") Тогда
		
		Координаты.Слева = 10 + НакопленнаяШиринаКартинок;
		Координаты.Сверху = Цел(10 + НакопленнаяВысотаКартинок); // тут инкрементируем После
		
		НакопленнаяВысотаКартинок = НакопленнаяВысотаКартинок + ДельтаYКартинки;
		
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйНижний") Тогда
		
		НакопленнаяВысотаКартинок = НакопленнаяВысотаКартинок + ДельтаYКартинки;// тут инкрементируем До
		
		Координаты.Слева = 10 + НакопленнаяШиринаКартинок;
		Координаты.Сверху = Цел(830 - НакопленнаяВысотаКартинок);
		
	КонецЕсли;    
	
	НомерШтампаПоY = НомерШтампаПоY + 1;
	
	Если НомерШтампаПоY >= ЧислоШтамповВСтолбце Тогда    
		
		НомерШтампаПоY = 0;
		НакопленнаяШиринаКартинок = НакопленнаяШиринаКартинок + ДельтаXКартинки;
		
		НакопленнаяВысотаКартинок = 0;
		
	КонецЕсли;	
	
	Возврат Координаты;
	
КонецФункции

// Вставляет визуализацию ЭП в файл , используя 1С:Штамп
// 
// Параметры:
// 	Расширение - Строка - расширение файла
// 	ДвоичныеДанныеФайла - ДвоичныеДанные - Двоичные данные файла docx, в который производится вставка 
// 	ДанныеОтметок - Массив из см. РаботаСЭП.НовыйДанныеОтметки.
// 	НастройкиШтампаЭП - см. РаботаСФайламиВызовСервера.ПолучитьНастройкиШтампаЭП.
// 	
// Возвращаемое значение:
// 	ДвоичныеДанные - ДвоичныеДанные файла , в который вставлено изображение штрихкода
Функция ДвоичныеДанныеФайлаСШтампомИспользуя1СШтамп(
	Расширение, ДвоичныеДанныеФайла, ВсеДанныеОтметок, НастройкиШтампаЭП) Экспорт
	
	Если ВсеДанныеОтметок.Количество() = 0 Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;	
	
	ПараметрыДобавленияШтамповВДокумент 
		= Интеграция1СШтампКлиентСервер.НовыеПараметрыДобавленияШтамповВДокумент();

	СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;  
	ПоложениеНаСтранице = НастройкиШтампаЭП.РасположениеШтампаЭП;
	
	ПравилаРасположения = ПравилаРасположения1СШтамп(СтраницаВставкиШтампаЭП);
    ВариантРасположения = ВариантРасположения1СШтамп(ПоложениеНаСтранице);
	
	Если ВсеДанныеОтметок.Количество() = 1 Тогда
	
		МассивШтампов = Новый Массив;
		МассивШтампов.Добавить(ВсеДанныеОтметок[0].ДвоичныеДанныеОтметки);
		ПараметрыШтампов = ПараметрыШтампов(МассивШтампов, "png");
		
		ПараметрыФайлаШтампа = ПараметрыШтампов[0]; 
		
		ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение = ВариантРасположения;
		ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположения;
		
		ПараметрыДобавленияШтамповВДокумент.ПараметрыДокумента.ДвоичныеДанные = ДвоичныеДанныеФайла;
		ПараметрыДобавленияШтамповВДокумент.ПараметрыДокумента.Расширение     = Расширение;
		ПараметрыДобавленияШтамповВДокумент.ПараметрыШтампов                  = ПараметрыШтампов;
		
	Иначе  //  несколько штампов	     
		
		ВариантРасположения = "ПоКоординатам"; // тут руками считаем.  
		
		ПараметрыШтампов = Новый Массив;   
		НакопленнаяВысотаКартинок = 0;
		НакопленнаяШиринаКартинок = 0;
		
		НомерШтампаПоY = 0;
		ЧислоШтампов = ВсеДанныеОтметок.Количество();
		
		Для Каждого ДанныеОтметки Из ВсеДанныеОтметок Цикл 

			МассивШтампов = Новый Массив;
			МассивШтампов.Добавить(ДанныеОтметки.ДвоичныеДанныеОтметки);

			ПараметрыШтамповЛокальный = ПараметрыШтампов(МассивШтампов, "png");
			ПараметрыФайлаШтампа = ПараметрыШтамповЛокальный[0];
			
			ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение = ВариантРасположения;
			ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположения;

			// тут координаты рассчитаем
			
			Координаты = КоординатыДля1СШтампПоНастройкам(
				ДанныеОтметки.ДвоичныеДанныеОтметки, ПоложениеНаСтранице, 
				НакопленнаяВысотаКартинок, НакопленнаяШиринаКартинок,
				ЧислоШтампов, НомерШтампаПоY);
			
			ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Верх        = Координаты.Сверху;
			ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Лево        = Координаты.Слева;
			
			ПараметрыШтампов.Добавить(ПараметрыФайлаШтампа);
			
		КонецЦикла;
		
		ПараметрыДобавленияШтамповВДокумент.ПараметрыДокумента.ДвоичныеДанные = ДвоичныеДанныеФайла;
		ПараметрыДобавленияШтамповВДокумент.ПараметрыДокумента.Расширение     = Расширение;
		ПараметрыДобавленияШтамповВДокумент.ПараметрыШтампов                  = ПараметрыШтампов;
		
	КонецЕсли;
	
	РезультатОбработкиДокумента 
		= Интеграция1СШтамп.РезультатДобавленияШтамповВДокумент(
		ПараметрыДобавленияШтамповВДокумент, 35);  // 35 сек таймаут
		
	Если РезультатОбработкиДокумента.ЕстьОшибки Тогда
		
		ТекстОшибки = РезультатОбработкиДокумента.ИнформацияОбОшибках.ТекстОшибки;
		
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = Нстр("ru ='Не удалось получить результат штампирования файла.'", 
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		КонецЕсли;
				
		ЗаписьЖурналаРегистрации("ПолучитьВизуализациюЭпДляPDF", 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, , ТекстОшибки);
			
		Если РезультатОбработкиДокумента.ИнформацияОбОшибках.КодСостояния = 413 Тогда // превышен размер
			
			НастройкиШтампаЭП.Использовать1СШтамп = Ложь;	   
			
			// повторный вызов.....
			Возврат Неопределено;     
			
		Иначе
			
			ВызватьИсключение ТекстОшибки;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОбработкиДокумента.ДвоичныеДанные;
	
КонецФункции	

#КонецОбласти