////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ РЕАЛИЗАЦИЮ МЕХАНИКИ РАБОТЫ С ФАЙЛАМИ
// 

#Область ПрограммныйИнтерфейс

// Функция возвращает структуру, содержащую различные сведения о Файле и версии
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы - файл
//  ВерсияСсылка - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторКлиента - Строка - переданный ИдентификаторКлиента
//  ЗаполнитьВсеПоля - Булево - перекрывает  ЗаполнятьТолькоПоляРегистрации
//
// Возвращаемое значение:
//   Структура - структура с данными файла
Функция ДанныеФайла(Знач ФайлСсылка, ВерсияСсылка = Неопределено, ИдентификаторКлиента = Неопределено,
	ЗаполнитьВсеПоля = Ложь) Экспорт
	
	АвтозаполнениеШаблоновФайловВызовСервера.ПерезаполнитьФайлПоДаннымВладельцаПриНеобходимости(ФайлСсылка, ЗаполнитьВсеПоля);
	
	Запрос = Новый Запрос;
	
	Если ВерсияСсылка = Справочники.ВерсииФайлов.ПустаяСсылка() Тогда
		ВерсияСсылка = Неопределено;
	КонецЕсли;
	
	Если ВерсияСсылка = Неопределено Тогда
		
		ЗапросПервый = Новый Запрос;
		
		ЗапросПервый.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Файлы КАК Файлы";
			
		Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
			ЗапросПервый.Текст = ЗапросПервый.Текст + " ГДЕ Файлы.Ссылка В (&Файл) ";
		Иначе
			ЗапросПервый.Текст = ЗапросПервый.Текст + " ГДЕ Файлы.Ссылка = &Файл ";
		КонецЕсли;
		
		ЗапросПервый.Параметры.Вставить("Файл", ФайлСсылка); 
		МассивФайлов = ЗапросПервый.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		ФайлСсылка = МассивФайлов; // тут только проверенные по RLS, далее включим привилег режим.
		Если МассивФайлов.Количество() = 1 Тогда
			ФайлСсылка = МассивФайлов[0];
		КонецЕсли;	
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка КАК Ссылка,
			|	Файлы.Код КАК Код,
			|	Файлы.Редактирует КАК Редактирует,
			|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
			|	Файлы.Описание КАК Описание,
			|	Файлы.ВладелецФайла КАК ВладелецФайла,
			|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
			|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
			|	Файлы.ДатаЗаема КАК ДатаЗаема,
			|	Файлы.Зашифрован КАК Зашифрован,
			|	Файлы.ПодписанЭП КАК ПодписанЭП,
			|	ЕСТЬNULL(ВерсииФайлов.ПолноеНаименование, """") КАК ПолноеНаименование,
			|	ЕСТЬNULL(ВерсииФайлов.Расширение, """") КАК Расширение,
			|	ЕСТЬNULL(ВерсииФайлов.Размер, 0) КАК Размер,
			|	ЕСТЬNULL(ВерсииФайлов.НомерВерсии, 0) КАК НомерВерсии,
			|	ЕСТЬNULL(ВерсииФайлов.ПутьКФайлу, """") КАК ПутьКФайлу,
			|	ЕСТЬNULL(ВерсииФайлов.Том, ЗНАЧЕНИЕ(Справочник.ТомаХраненияФайлов.ПустаяСсылка)) КАК Том,
			|	ЕСТЬNULL(ВерсииФайлов.ДатаМодификацииУниверсальная, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаМодификацииУниверсальная,
			|	ЕСТЬNULL(ВерсииФайлов.ДатаМодификацииФайла, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаМодификацииФайла,
			|	ЕСТЬNULL(ВерсииФайлов.Автор, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Автор,
			|	ЕСТЬNULL(ТекстыВерсийФайлов.СтатусИзвлеченияТекста, ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка)) КАК СтатусИзвлеченияТекста,
			|	ЕСТЬNULL(ТекстыВерсийФайлов.СтатусРаспознаванияТекста, ЗНАЧЕНИЕ(Перечисление.СтатусыРаспознаванияТекста.ПустаяСсылка)) КАК СтатусРаспознаванияТекста,
			|	ЕСТЬNULL(ВерсииФайлов.ТипХраненияФайла, ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ПустаяСсылка)) КАК ТипХраненияФайла,
			|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.Статус, ЗНАЧЕНИЕ(Перечисление.ТаймлистСтатусы.ПустаяСсылка)) КАК ТаймлистСтатус,
			|	ЕСТЬNULL(ТаймлистФайлыВОбработке.Задание, ЗНАЧЕНИЕ(Перечисление.ТаймлистТипыЗаданий.ПустаяСсылка)) КАК ТаймлистЗадание
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
			|		ПО Файлы.ТекущаяВерсия = ВерсииФайлов.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
			|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистДанныеРаботыСервиса КАК ТаймлистДанныеРаботыСервиса
			|		ПО (ТаймлистДанныеРаботыСервиса.ВерсияФайла = ВерсииФайлов.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистФайлыВОбработке КАК ТаймлистФайлыВОбработке
			|		ПО (ТаймлистФайлыВОбработке.ВерсияФайла = ВерсииФайлов.Ссылка)";
		
		Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка В (&Файл) ";
		Иначе
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка = &Файл ";
		КонецЕсли;
		
		Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Иначе
		
		Если ФайлСсылка <> Неопределено Тогда 
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Файлы.Ссылка КАК Ссылка,
				|	Файлы.Код КАК Код,
				|	Файлы.Редактирует КАК Редактирует,
				|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,				
				|	Файлы.Описание КАК Описание,
				|	Файлы.ВладелецФайла КАК ВладелецФайла,
				|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
				|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
				|	Файлы.ДатаЗаема КАК ДатаЗаема,
				|	Файлы.Зашифрован КАК Зашифрован,
				|	Файлы.ПодписанЭП КАК ПодписанЭП,
				|	ЕСТЬNULL(ВерсииФайлов.ПолноеНаименование, """") КАК ПолноеНаименование,
				|	ЕСТЬNULL(ВерсииФайлов.Расширение, """") КАК Расширение,
				|	ЕСТЬNULL(ВерсииФайлов.Размер, 0) КАК Размер,
				|	ЕСТЬNULL(ВерсииФайлов.НомерВерсии, 0) КАК НомерВерсии,
				|	ЕСТЬNULL(ВерсииФайлов.ПутьКФайлу, """") КАК ПутьКФайлу,
				|	ЕСТЬNULL(ВерсииФайлов.Том, ЗНАЧЕНИЕ(Справочник.ТомаХраненияФайлов.ПустаяСсылка)) КАК Том,
				|	ЕСТЬNULL(ВерсииФайлов.ДатаМодификацииУниверсальная, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаМодификацииУниверсальная,
				|	ЕСТЬNULL(ВерсииФайлов.ДатаМодификацииФайла, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаМодификацииФайла,
				|	ЕСТЬNULL(ВерсииФайлов.Автор, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Автор,
				|	ЕСТЬNULL(ТекстыВерсийФайлов.СтатусИзвлеченияТекста, ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка)) КАК СтатусИзвлеченияТекста,
				|	ЕСТЬNULL(ТекстыВерсийФайлов.СтатусРаспознаванияТекста, ЗНАЧЕНИЕ(Перечисление.СтатусыРаспознаванияТекста.ПустаяСсылка)) КАК СтатусРаспознаванияТекста,
				|	ЕСТЬNULL(ВерсииФайлов.ТипХраненияФайла, ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ПустаяСсылка)) КАК ТипХраненияФайла,
				|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.Статус, ЗНАЧЕНИЕ(Перечисление.ТаймлистСтатусы.ПустаяСсылка)) КАК ТаймлистСтатус,
				|	ЕСТЬNULL(ТаймлистФайлыВОбработке.Задание, ЗНАЧЕНИЕ(Перечисление.ТаймлистТипыЗаданий.ПустаяСсылка)) КАК ТаймлистЗадание
				|ИЗ
				|	Справочник.Файлы КАК Файлы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
				|		ПО (ИСТИНА)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
				|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистДанныеРаботыСервиса КАК ТаймлистДанныеРаботыСервиса
				|		ПО (ТаймлистДанныеРаботыСервиса.ВерсияФайла = ВерсииФайлов.Ссылка)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистФайлыВОбработке КАК ТаймлистФайлыВОбработке
				|		ПО (ТаймлистФайлыВОбработке.ВерсияФайла = ВерсииФайлов.Ссылка)
				|ГДЕ
				|	Файлы.Ссылка = &Файл
				|	И ВерсииФайлов.Ссылка = &Версия";
			
			Запрос.Параметры.Вставить("Файл", ФайлСсылка);
			Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
		Иначе
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Файлы.Ссылка КАК Ссылка,
				|	Файлы.Код КАК Код,
				|	Файлы.Редактирует КАК Редактирует,
				|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
				|	Файлы.Описание КАК Описание,
				|	Файлы.ВладелецФайла КАК ВладелецФайла,
				|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
				|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
				|	Файлы.ДатаЗаема КАК ДатаЗаема,
				|	Файлы.Зашифрован КАК Зашифрован,
				|	Файлы.ПодписанЭП КАК ПодписанЭП,
				|	ЕСТЬNULL(ВерсииФайлов.ПолноеНаименование, """") КАК ПолноеНаименование,
				|	ЕСТЬNULL(ВерсииФайлов.Расширение, """") КАК Расширение,
				|	ЕСТЬNULL(ВерсииФайлов.Размер, 0) КАК Размер,
				|	ЕСТЬNULL(ВерсииФайлов.НомерВерсии, 0) КАК НомерВерсии,
				|	ЕСТЬNULL(ВерсииФайлов.ПутьКФайлу, """") КАК ПутьКФайлу,
				|	ЕСТЬNULL(ВерсииФайлов.Том, ЗНАЧЕНИЕ(Справочник.ТомаХраненияФайлов.ПустаяСсылка)) КАК Том,
				|	ЕСТЬNULL(ВерсииФайлов.ДатаМодификацииУниверсальная, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаМодификацииУниверсальная,
				|	ЕСТЬNULL(ВерсииФайлов.ДатаМодификацииФайла, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаМодификацииФайла,
				|	ЕСТЬNULL(ВерсииФайлов.Автор, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Автор,
				|	ЕСТЬNULL(ТекстыВерсийФайлов.СтатусИзвлеченияТекста, ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка)) КАК СтатусИзвлеченияТекста,
				|	ЕСТЬNULL(ТекстыВерсийФайлов.СтатусРаспознаванияТекста, ЗНАЧЕНИЕ(Перечисление.СтатусыРаспознаванияТекста.ПустаяСсылка)) КАК СтатусРаспознаванияТекста,
				|	ЕСТЬNULL(ВерсииФайлов.ТипХраненияФайла, ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ПустаяСсылка)) КАК ТипХраненияФайла,
				|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.Статус, ЗНАЧЕНИЕ(Перечисление.ТаймлистСтатусы.ПустаяСсылка)) КАК ТаймлистСтатус,
				|	ЕСТЬNULL(ТаймлистФайлыВОбработке.Задание, ЗНАЧЕНИЕ(Перечисление.ТаймлистТипыЗаданий.ПустаяСсылка)) КАК ТаймлистЗадание
				|ИЗ
				|	Справочник.Файлы КАК Файлы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
				|		ПО (ИСТИНА)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
				|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистДанныеРаботыСервиса КАК ТаймлистДанныеРаботыСервиса
				|		ПО (ТаймлистДанныеРаботыСервиса.ВерсияФайла = ВерсииФайлов.Ссылка)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистФайлыВОбработке КАК ТаймлистФайлыВОбработке
				|		ПО (ТаймлистФайлыВОбработке.ВерсияФайла = ВерсииФайлов.Ссылка)
				|ГДЕ
				|	ВерсииФайлов.Ссылка = &Версия
				|	И Файлы.Ссылка = ВерсииФайлов.Владелец";
			
			Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
		КонецЕсли;    
		
	КонецЕсли;    
	
	МассивДанныеФайла = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("Ссылка", Выборка.Ссылка);
		ДанныеФайла.Вставить("КодФайла", Выборка.Код);
		ДанныеФайла.Вставить("Редактирует", Выборка.Редактирует);
		ДанныеФайла.Вставить("Владелец", Выборка.ВладелецФайла);
		ДанныеФайла.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(Выборка.Ссылка));
		
		ДанныеФайла.Вставить("КоличествоЗанятыхФайлов", -1); // -1  - значит не задано
		
		Если ВерсияСсылка <> Неопределено Тогда
			ДанныеФайла.Вставить("Версия", ВерсияСсылка);
		Иначе
			ДанныеФайла.Вставить("Версия", Выборка.ТекущаяВерсия);
		КонецЕсли;    
		
		ДанныеФайла.Вставить("ТекущаяВерсия", Выборка.ТекущаяВерсия);
		ДанныеФайла.Вставить("Описание", Выборка.Описание);
		
		СтруктураКлюча = Новый Структура("Файл", ДанныеФайла.ТекущаяВерсия);
		КлючЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьКлючЗаписи(СтруктураКлюча);
		НавигационнаяСсылкаТекущейВерсии = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ДвоичныеДанныеФайла");
		ДанныеФайла.Вставить("НавигационнаяСсылкаТекущейВерсии", НавигационнаяСсылкаТекущейВерсии);
		
        КодировкаТекущейВерсии = ПолучитьКодировкуВерсииФайла(ДанныеФайла.ТекущаяВерсия, Выборка.Расширение);
        ДанныеФайла.Вставить("КодировкаТекущейВерсии", КодировкаТекущейВерсии);
		
		ДанныеФайла.Вставить("Размер", Выборка.Размер);
		ДанныеФайла.Вставить("НомерВерсии", Выборка.НомерВерсии);
		ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", Выборка.ДатаМодификацииУниверсальная);
		ДанныеФайла.Вставить("ДатаМодификацииФайла", Выборка.ДатаМодификацииФайла);
		ДанныеФайла.Вставить("Расширение", Выборка.Расширение);
		ДанныеФайла.Вставить("ПолноеНаименованиеВерсии", СокрЛП(Выборка.ПолноеНаименование));
		ДанныеФайла.Вставить("ПолноеНаименование", СокрЛП(Выборка.ПолноеНаименование));
		ДанныеФайла.Вставить("ХранитьВерсии", Выборка.ХранитьВерсии);
		ДанныеФайла.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		ДанныеФайла.Вставить("АвторТекущейВерсии", Выборка.Автор);
		ДанныеФайла.Вставить("Зашифрован", Выборка.Зашифрован);
		ДанныеФайла.Вставить("ПодписанЭП", Выборка.ПодписанЭП);
		ДанныеФайла.Вставить("ДатаЗаема", Выборка.ДатаЗаема);
		
		ДанныеФайла.Вставить("ПутьКФайлу", Выборка.ПутьКФайлу);
		ДанныеФайла.Вставить("Том", Выборка.Том);	   
		ДанныеФайла.Вставить("ТипХраненияФайла", Выборка.ТипХраненияФайла);	   
		
		Если ДанныеФайла.Зашифрован Тогда
			МассивСертификатовШифрования = ПолучитьМассивСертификатовШифрования(ДанныеФайла.Ссылка);
			ДанныеФайла.Вставить("МассивСертификатовШифрования", МассивСертификатовШифрования);
		КонецЕсли;    
		
		НаЧтение = (СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь()).Найти(ДанныеФайла.Редактирует) = Неопределено );
		ДанныеФайла.Вставить("НаЧтение", НаЧтение);
		
		ДанныеФайла.Вставить("ЗанятСДругогоКомпьютера", Ложь);
		ДанныеФайла.Вставить("ИмяДругогоКомпьютера", "");
		Если СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь()).Найти(ДанныеФайла.Редактирует) <> Неопределено Тогда
			
			Если Не ФайловыеФункции.ЕстьЗаписьДляТекущегоИдентификатора(ДанныеФайла.Версия, ИдентификаторКлиента) Тогда
			
				ИмяКомпьютера = "";
				Если ФайловыеФункции.ЕстьДанныеЗаемаСДругогоКомпьютера(ДанныеФайла.Версия, 
						ИмяКомпьютера, ИдентификаторКлиента) Тогда
					ДанныеФайла.ЗанятСДругогоКомпьютера = Истина;
					ДанныеФайла.ИмяДругогоКомпьютера = ИмяКомпьютера;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		ВРабочемКаталогеНаЧтение = Истина;
		ВРабочемКаталогеВладельца = Ложь;
		ИмяКаталога = ФайловыеФункции.ПолучитьПутьКРабочемуКаталогуПользователя();
		Если ИмяКаталога = Неопределено Тогда
			ИмяКаталога = "";
		КонецЕсли;    
		
		Если ВерсияСсылка <> Неопределено Тогда
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ВерсияСсылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		Иначе
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(Выборка.ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;    
		
		ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
		ДанныеФайла.Вставить("ВРабочемКаталогеНаЧтение", ВРабочемКаталогеНаЧтение);
		ДанныеФайла.Вставить("РабочийКаталогВладельца", "");
		
		ПользовательИЕгоСотрудники = СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь());
		ДанныеФайла.Вставить("ПользовательИЕгоСотрудники", ПользовательИЕгоСотрудники);
		
		РедактируетТекущийПользователь = (ПользовательИЕгоСотрудники.Найти(ДанныеФайла.Редактирует) <> Неопределено);
		ДанныеФайла.Вставить("РедактируетТекущийПользователь", РедактируетТекущийПользователь);
		
		СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
		Если Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен Тогда
			СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
		ИначеЕсли Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен Тогда
			СтатусИзвлеченияТекстаСтрока = "Извлечен";
		ИначеЕсли Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось Тогда
			СтатусИзвлеченияТекстаСтрока = "ИзвлечьНеУдалось";
		КонецЕсли;    
		ДанныеФайла.Вставить("СтатусИзвлеченияТекста", СтатусИзвлеченияТекстаСтрока);
		
		СтатусРаспознаванияТекстаСтрока = "НеНужноРаспознавать";
		Если Выборка.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НеРаспознано Тогда
			СтатусРаспознаванияТекстаСтрока = "НеРаспознано";
		ИначеЕсли Выборка.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать Тогда
			СтатусРаспознаванияТекстаСтрока = "НужноРаспознать";
		ИначеЕсли Выборка.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.Распознано Тогда
			СтатусРаспознаванияТекстаСтрока = "Распознано";
		ИначеЕсли Выборка.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.Распознается Тогда
			СтатусРаспознаванияТекстаСтрока = "Распознается";
		ИначеЕсли Выборка.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НеНужноРаспознавать Тогда
			СтатусРаспознаванияТекстаСтрока = "НеНужноРаспознавать";
		КонецЕсли;    
		ДанныеФайла.Вставить("СтатусРаспознаванияТекста", СтатусРаспознаванияТекстаСтрока);
		ДанныеФайла.Вставить("ТаймлистСтатус", Выборка.ТаймлистСтатус);
		ДанныеФайла.Вставить("ТаймлистЗадание", Выборка.ТаймлистЗадание);
		
		МассивДанныеФайла.Добавить(ДанныеФайла); 
		
	КонецЦикла;
	
	// если был передан массив - возвращаем массив
	Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
		Возврат МассивДанныеФайла;
	КонецЕсли;
	
	Если МассивДанныеФайла.Количество() > 0 Тогда 
		Возврат МассивДанныеФайла[0];
	Иначе
		ВызватьИсключение НСтр("ru = 'У пользователя недостаточно прав на исполнение операции над базой данных.'");
	КонецЕсли;
	
КонецФункции

// Функция возвращает структуру, содержащую различные сведения о Файле и версии.
//
// Параметры:
//  ФайлВерсияСсылка        - СправочникСсылка.Файлы - файл 
//  ВерсияСсылка			- СправочникСсылка.ВерсииФайлов - версия файла.
//  ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы.
//  РабочийКаталогВладельца - Строка - в ней возвращается рабочий каталог владельца файла.
//  ПредыдущийАдресФайла    - Строка - в ней возвращается рабочий каталог владельца файла.
//  НеПолучатьВизуализациюЭП - Булево
//  НеДелатьПрочтенным 		- Булево
//  ЗаемФайла 				- Булево - далее будет заем файла
//  ДополнительныеПараметры - Неопределено, Структура
//
// Возвращаемое значение:
//   Структура - структура с данными файла. См. ПолучитьДанныеФайла.
//
Функция ДанныеФайлаДляОткрытия(
	ФайлСсылка, 
	ВерсияСсылка = Неопределено, 
	ИдентификаторФормы = Неопределено,
	РабочийКаталогВладельца = Неопределено, 
	ПредыдущийАдресФайла = Неопределено,
	НеПолучатьВизуализациюЭП = Ложь,
	НеДелатьПрочтенным = Ложь,
	ЗаемФайла = Ложь,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПредыдущийАдресФайла <> Неопределено Тогда
		Если НЕ ПустаяСтрока(ПредыдущийАдресФайла) И ЭтоАдресВременногоХранилища(ПредыдущийАдресФайла) Тогда
			УдалитьИзВременногоХранилища(ПредыдущийАдресФайла);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка, ВерсияСсылка);
	
	ЭтоСохранение = Ложь;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ДополнительныеПараметры.Свойство("ЭтоСохранение", ЭтоСохранение);
	КонецЕсли;	
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = РабочийКаталогПапки(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ПолноеИмяФайлаВРабочемКаталоге = РабочийКаталогВладельца + ИмяФайла;
		ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ПолноеИмяФайлаВРабочемКаталоге);
	КонецЕсли;
	
	ПредыдущийАдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	
	ПротоколированиеРаботыСотрудников.ЗаписатьПолучениеФайла(ДанныеФайла.Ссылка);
	
	ЗаписатьОбращениеКВерсииФайла(ДанныеФайла.Версия);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(ДанныеФайла.Ссылка);
	
	ТипХраненияФайла = ДанныеФайла.ТипХраненияФайла;
	
	ЗаполнилиНавигационнаяСсылкаТекущейВерсии = Ложь;
	Если ЭтоСохранение = Истина Тогда
		// тут заранее поместим в ДанныеФайла.НавигационнаяСсылкаТекущейВерсии
		
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ДанныеФайла.Версия <> Неопределено Тогда
			ДанныеФайла.НавигационнаяСсылкаТекущейВерсии 
				= ПоместитьФайлВТомеВоВременноеХранилище(ФайлСсылка, ВерсияСсылка, ДанныеФайла, ИдентификаторФормы);
		КонецЕсли;	
		
		ЗаполнилиНавигационнаяСсылкаТекущейВерсии = Истина;
	КонецЕсли;	
	
	ДанныеФайла.Вставить("ВизуализацияЭПДобавлена", Ложь);
	
	Если НеПолучатьВизуализациюЭП = Ложь Тогда
		
		ДобавитьВизуализациюЭП(ДанныеФайла, ИдентификаторФормы);
		
		Если ДанныеФайла.ВизуализацияЭПДобавлена = Истина Тогда
			
			ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге = ""; // не берем из кеша
			УдалитьИзРегистра(ДанныеФайла.Версия); // удалим инфо из кеша
			
			Возврат ДанныеФайла;
		КонецЕсли;	
		
	Иначе	
		
		Если Не ЗаемФайла Тогда
			Если РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(ДанныеФайла.Расширение) Тогда
				ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге = ""; // не берем из кеша
				УдалитьИзРегистра(ДанныеФайла.Версия); // удалим инфо из кеша
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ДанныеФайла.Версия <> Неопределено
		И Не ЗаполнилиНавигационнаяСсылкаТекущейВерсии Тогда
			
		ДанныеФайла.НавигационнаяСсылкаТекущейВерсии 
			= ПоместитьФайлВТомеВоВременноеХранилище(ФайлСсылка, ВерсияСсылка, ДанныеФайла, ИдентификаторФормы);
		
	Иначе
		ДанныеФайла.Вставить("СсылкаТекущейВерсии", ДанныеФайла.Версия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге) Тогда
		ОбновитьДатуОбращенияФайлыВРабочемКаталогеКомпьютера(ДанныеФайла.Версия);
	КонецЕсли;	
	
	Если ТипЗнч(ДанныеФайла.Владелец) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		СделатьПрочтенным = Истина;
		
		Если СпрашиватьРежимРедактированияПриОткрытииФайла()
			И НеДелатьПрочтенным = Истина
			И Не ЗаемФайла Тогда
			СделатьПрочтенным = Ложь;
		КонецЕсли;		
		
		Если СделатьПрочтенным Тогда		
			Если РаботаСПрочтениями.УстановитьСвойствоПрочтен(ДанныеФайла.Владелец, Истина) Тогда	
				ДанныеФайла.Вставить("ВладелецСменилПрочтенность", Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;		
	
	Если НеПолучатьВизуализациюЭП = Ложь 
		И ДанныеФайла.ТребуетсяСоздатьВизуализациюЭП 		
		И ДанныеФайла.ВизуализацияЭПДобавлена = Ложь Тогда
		
		ДвДанныеФайлаDoc = Неопределено;
		Если ВыполнитьЗаполнениеРегДанныхЕслиНужно(ДвДанныеФайлаDoc, ДанныеФайла) Тогда
			
			ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = ПоместитьВоВременноеХранилище(
				ДвДанныеФайлаDoc, ИдентификаторФормы);
			
		КонецЕсли;
			
	КонецЕсли;
	
	ОбменСКонтрагентамиДОВызовСервера.ДополнитьДанныеФайлаДляОткрытияСведениямиЭДО(ДанныеФайла);
	
	Возврат ДанныеФайла;
	
КонецФункции // ДанныеФайлаДляОткрытия()

// Получает данные файла для открытия и читает из общих настроек ПапкаДляСохранитьКак.
//
// Параметры:
//  ФайлИлиВерсияСсылка     - СправочникСсылка.Файлы, СправочникСсылка.ВерсииФайлов - файл или версия файла.
//  ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы.
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца файла.
//
// Возвращаемое значение:
//   Структура - структура с данными файла.
//
Функция ДанныеФайлаДляСохранения(ФайлСсылка, ВерсияСсылка = Неопределено, 
	ИдентификаторФормы = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ЭтоСохранение", Истина);
	
	ДанныеФайла = ДанныеФайлаДляОткрытия(ФайлСсылка, ВерсияСсылка, 
		ИдентификаторФормы, РабочийКаталогВладельца,
		,,,,
		ДополнительныеПараметры);
		
	ПапкаДляСохранитьКак = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
	ДанныеФайла.Вставить("ПапкаДляСохранитьКак", ПапкаДляСохранитьКак);
	
	Возврат ДанныеФайла;
КонецФункции // ПолучитьДанныеФайлаИЗанятьФайл()

// Создает новые файлы по аналогии с указанными
// Параметры
//  МассивФайлов  - Массив - массив объектов СправочникСсылка.Файлы - существующие файлы
//  ВладелецНовогоФайла - ЛюбаяСсылка - владелец файла
//  ХранитьВерсии - если не равно Неопределено, ставится у скопированного файла (вместо значения оригинала)
Процедура СкопироватьФайлы(МассивФайлов, ВладелецНовогоФайла, ХранитьВерсии = Неопределено) Экспорт
	
	Для	каждого Файл Из МассивФайлов Цикл
		НовыйФайл = СкопироватьФайл(Файл, ВладелецНовогоФайла, , ХранитьВерсии);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет условное оформление списка файлов
Процедура ЗаполнитьУсловноеОформлениеСпискаФайлов(Список) Экспорт
	
	УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Редактирует");
	Если ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Редактирует");
	Отбор.ПравоеЗначение = СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь());
	Если ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор.Недействителен");
	Отбор.ПравоеЗначение = Истина;
	Поле = Элемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Автор");
	Если ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Читает ХранилищеФайла из информационной базы
//
// Параметры:
//  ВерсияСсылка - СправочникСсылка.ВерсииФайлов - ссылка на версию файла.
//
// Возвращаемое значение:
//   ХранилищеЗначения - ДвоичныеДанные - Хранилище с двоичными данными файла
Функция ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл = ВерсияСсылка;
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи.ДвоичныеДанныеФайла;
	
КонецФункции

// Вернет Истина, если есть зашифрованные или занятые файлы у этого Владельца
Функция ЕстьЗашифрованныеИлиЗанятыеФайлы(Документ) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И (Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|				И Файлы.Редактирует <> НЕОПРЕДЕЛЕНО
		|			ИЛИ Файлы.Зашифрован = &Зашифрован)";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Зашифрован", Истина);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Помещает шифрованные файлы в базу и ставит признак Зашифрован файлу и всем версиям
// Параметры
//  ФайлСсылка - СправочникСсылка.Файлы - файл
//  Зашифровать - Булево - зашифровать файл, если Истина - иначе расшифровать
//  МассивДанныхДляЗанесенияВБазу - массив структур
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//  ИмяРабочегоКаталога - Строка - рабочий каталог
//  МассивФайловВРабочемКаталогеДляУдаления - Массив - файлы, которые надо удалить из регистра
//  МассивОтпечатков  - Массив - массив отпечатков сертификатов, использованных для шифрования
Процедура ЗанестиИнформациюОШифровании(ФайлСсылка, Зашифровать, МассивДанныхДляЗанесенияВБазу, УникальныйИдентификатор, 
	ИмяРабочегоКаталога, МассивФайловВРабочемКаталогеДляУдаления, МассивОтпечатков) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		АдресВременногоХранилищаТекстаТекущейВерсии = "";
		
		Для Каждого ДанныеДляЗаписиНаСервере Из МассивДанныхДляЗанесенияВБазу Цикл
			
			АдресВременногоХранилища = ДанныеДляЗаписиНаСервере.АдресВременногоХранилища;
			ВерсияСсылка = ДанныеДляЗаписиНаСервере.ВерсияСсылка;
			АдресВременногоХранилищаТекста = ДанныеДляЗаписиНаСервере.АдресВременногоХранилищаТекста;
			
			Если ВерсияСсылка = ФайлСсылка.ТекущаяВерсия Тогда
				АдресВременногоХранилищаТекстаТекущейВерсии = АдресВременногоХранилищаТекста;
			КонецЕсли;
			
			ИмяФайлаСПутемВРабочемКаталоге = "";
			ВРабочемКаталогеНаЧтение = Истина; // не используется 
			ВРабочемКаталогеВладельца = Истина;
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ВерсияСсылка, ИмяРабочегоКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
			Если НЕ ПустаяСтрока(ИмяФайлаСПутемВРабочемКаталоге) Тогда
				МассивФайловВРабочемКаталогеДляУдаления.Добавить(ИмяФайлаСПутемВРабочемКаталоге);
			КонецЕсли;
			
			УдалитьИзРегистра(ВерсияСсылка);
			
			СтатусИзвлеченияТекста = Неопределено;
			Если Зашифровать = Ложь Тогда
				СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			КонецЕсли;
			
			НужноЗановоРаспознатьВерсию = Ложь;
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.ИмяБезРасширения = ВерсияСсылка.ПолноеНаименование;
			СведенияОФайле.Комментарий = ВерсияСсылка.Комментарий;
			СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилища;
			СведенияОФайле.РасширениеБезТочки = ВерсияСсылка.Расширение;
			СведенияОФайле.ВремяИзменения = ВерсияСсылка.ДатаСоздания;
			СведенияОФайле.ВремяИзмененияУниверсальное = ВерсияСсылка.ДатаМодификацииУниверсальная;
			СведенияОФайле.Размер = ВерсияСсылка.Размер;
			СведенияОФайле.ВремяИзмененияУниверсальное = ВерсияСсылка.ДатаМодификацииУниверсальная;
			СведенияОФайле.НовыйСтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			СведенияОФайле.Зашифрован = Зашифровать;
			СведенияОФайле.ХранитьВерсии = Ложь;
			
			ЭтоШифрование = Истина;
			Версия = ОбновитьВерсиюФайла(ФайлСсылка, СведенияОФайле, ВерсияСсылка, УникальныйИдентификатор, 
				НужноЗановоРаспознатьВерсию,, ЭтоШифрование);
			
			// Для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
			Если НЕ ПустаяСтрока(ДанныеДляЗаписиНаСервере.АдресФайла) И ЭтоАдресВременногоХранилища(ДанныеДляЗаписиНаСервере.АдресФайла) Тогда
				УдалитьИзВременногоХранилища(ДанныеДляЗаписиНаСервере.АдресФайла);
			КонецЕсли;
			
			РегистрыСведений.ПредпросмотрФайлов.Удалить(ФайлСсылка);
			
		КонецЦикла;
		
		ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		
		ФайлОбъект.Зашифрован = Зашифровать;
		РегистрыСведений.ТекстыФайлов.УдалитьЗапись(ФайлСсылка);
		
		// Чтобы прошла запись ранее подписанного объекта
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		
		СтрокаСертификатов = "";
		
		Если Зашифровать Тогда
			//Для Каждого ОтпечатокСтруктура Из МассивОтпечатков Цикл
			//	НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
			//	НоваяСтрока.Отпечаток = ОтпечатокСтруктура.Отпечаток;
			//	НоваяСтрока.Представление = ОтпечатокСтруктура.Представление;
			//	НоваяСтрока.Сертификат = Новый ХранилищеЗначения(ОтпечатокСтруктура.Сертификат);
			//	
			//	СтрокаСертификатов = СтрокаСертификатов + ОтпечатокСтруктура.Представление + " ";
			//КонецЦикла;
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
				МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
				МодульЭлектроннаяПодписьСлужебный.ДобавитьСертификатыШифрования(ФайлСсылка, МассивОтпечатков);
				
				Для Каждого ОтпечатокСтруктура Из МассивОтпечатков Цикл
					СтрокаСертификатов = СтрокаСертификатов + ОтпечатокСтруктура.Представление + " ";
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			//ФайлОбъект.СертификатыШифрования.Очистить();
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
				МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
				МодульЭлектроннаяПодписьСлужебный.ОчиститьСертификатыШифрования(ФайлСсылка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если АдресВременногоХранилищаТекстаТекущейВерсии <> "" Тогда
			Текст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекстаТекущейВерсии);
			РегистрыСведений.ТекстыФайлов.ДобавитьЗапись(ФайлСсылка, Новый ХранилищеЗначения(Текст));
		КонецЕсли;
		
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
		
		ЗафиксироватьТранзакцию();
		
		Если Зашифровать Тогда
			ПротоколированиеРаботыСотрудников.ЗаписатьШифрование(ФайлСсылка, СтрокаСертификатов);
		Иначе
			ПротоколированиеРаботыСотрудников.ЗаписатьРасшифрование(ФайлСсылка);
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Получает все подчиненные файлы
// Параметры
//  ВладелецФайла - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   Массив - массив файлов
Функция ПолучитьВсеПодчиненныеФайлы(ВладелецФайла, 
	ПолучатьПомеченныеНаУдаление = Истина,
	ПривилегированныйРежим = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
	
	Если НЕ ПолучатьПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + " И Файлы.ПометкаУдаления = &ПометкаУдаления";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + 	
		" УПОРЯДОЧИТЬ ПО
		|	Файлы.Наименование";
	
	Если НЕ ПолучатьПомеченныеНаУдаление Тогда
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Если ПривилегированныйРежим Тогда 
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Таблица = Запрос.Выполнить().Выгрузить();
	МассивВозврата = Таблица.ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивВозврата;
	
КонецФункции

// Делает ДанныеФайла и вычисляет количество версий файла
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//
// Возвращаемое значение:
//   Структура - структура с данными файла
Функция ПолучитьДанныеФайлаИКоличествоВерсий(ФайлСсылка) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка);
	КоличествоВерсий = ПолучитьКоличествоВерсий(ФайлСсылка);
	ДанныеФайла.Вставить("КоличествоВерсий", КоличествоВерсий);
	Возврат ДанныеФайла;
	
КонецФункции // ДанныеФайлаИРабочийКаталог()

// Делает ДанныеФайла и вычисляет РабочийКаталогВладельца
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  РабочийКаталогВладельца - Строка - в ней возвращается рабочий каталог владельца файла
//
// Возвращаемое значение:
//   Структура - структура с данными файла
Функция ДанныеФайлаИРабочийКаталог(ФайлСсылка, ВерсияСсылка = Неопределено, 
	РабочийКаталогВладельца = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка, ВерсияСсылка);
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = РабочийКаталогПапки(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		
		ИмяФайлаСПутемВРабочемКаталоге = "";
		ИмяКаталога = ""; // путь к локальному кешу здесь не используется
		ВРабочемКаталогеНаЧтение = Истина; // не используется 
		ВРабочемКаталогеВладельца = Истина;
		
		Если ВерсияСсылка <> Неопределено Тогда
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ВерсияСсылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		Иначе
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ФайлСсылка.ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции // ДанныеФайлаИРабочийКаталог()

// Подставляет ссылку на версию в карточку Файла
// Параметры
// ФайлСсылка - СправочникСсылка.Файлы - Файл, в котором создается версия
// Версия  - СправочникСсылка.ВерсииФайлов - версия файла
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура ОбновитьВерсиюВФайле(
	ФайлСсылка, 
	Версия, 
	Знач АдресВременногоХранилищаТекста,
	УникальныйИдентификатор = Неопределено,
	ОбновлятьНеГлядяНаБлокировку = Ложь,
	ДобавлениеРегШтампа = Ложь) Экспорт
	
	Если ОбновлятьНеГлядяНаБлокировку = Ложь Тогда
		ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
	КонецЕсли;
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	
	ФайлОбъект.ТекущаяВерсия = Версия.Ссылка;
	
	ФайлОбъект.ДополнительныеСвойства.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Если ДобавлениеРегШтампа = Истина Тогда
		ФайлОбъект.ДополнительныеСвойства.Вставить("ДобавлениеРегШтампа", ДобавлениеРегШтампа);
	КонецЕсли;
	
	ФайлОбъект.Записать();
	
	Если ТипЗнч(АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		
		// При создании Файла из шаблона хранилище значения копируется напрямую
		ТекстХранилище = АдресВременногоХранилищаТекста;
		
		РегистрыСведений.ТекстыФайлов.ДобавитьЗапись(ФайлОбъект.Ссылка, ТекстХранилище);
		
	Иначе
		Текст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		ТекстХранилище = Новый ХранилищеЗначения(Текст);
		
		РегистрыСведений.ТекстыФайлов.ДобавитьЗапись(ФайлОбъект.Ссылка, ТекстХранилище);
		
	КонецЕсли;
	
	Если ОбновлятьНеГлядяНаБлокировку = Ложь Тогда
		РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВерсиюВФайле()

// Помечает / снимает пометку удаления у приложенных файлов.
//
Процедура ПометитьНаУдалениеПриложенныеФайлы(ВладелецФайла, ПометкаУдаления) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ПодписанЭП КАК ПодписанЭП
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВладелецФайлаДокумент = ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла);
	ВладелецПодписанЭП = Ложь;
	Если ВладелецФайлаДокумент Тогда
		ВладелецПодписанЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ПодписанЭП");
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если ПометкаУдаления И ЗначениеЗаполнено(Выборка.Редактирует) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = '""%1"" не может быть удален, т.к. содержит файл ""%2"", занятый для редактирования.'"),
				Строка(ВладелецФайла),
				Строка(Выборка.Ссылка));
		КонецЕсли;
			
		Если ВладелецФайлаДокумент И Выборка.ПодписанЭП Тогда
			
			НачатьТранзакцию();
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
				ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления, Ложь);
				РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				
				ЗапросВерсий = Новый Запрос;
				ЗапросВерсий.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ВерсииФайлов.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ВерсииФайлов КАК ВерсииФайлов
					|ГДЕ
					|	ВерсииФайлов.Владелец = &Файл";
				ЗапросВерсий.УстановитьПараметр("Файл", ФайлОбъект.Ссылка);
				РезультатВерсий = ЗапросВерсий.Выполнить();
				ВыборкаВерсий = РезультатВерсий.Выбрать();
				Пока ВыборкаВерсий.Следующий() Цикл
					ЗаблокироватьДанныеДляРедактирования(ВыборкаВерсий.Ссылка);
					ВерсияФайлаОбъект = ВыборкаВерсий.Ссылка.ПолучитьОбъект();
					ВерсияФайлаОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
					ВерсияФайлаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
					РазблокироватьДанныеДляРедактирования(ВыборкаВерсий.Ссылка);
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ВызватьИсключение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
			
		Иначе
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ФайлОбъект.ДополнительныеСвойства.Вставить("ПометкаУдаленияДокумента", Истина);
			Если ВладелецПодписанЭП Тогда
				ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
			КонецЕсли;
			ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Создает версию сохраняемого файла для сохранения в ИБ.
//
// Параметры:
//   ФайлСсылка     - СправочникСсылка.Файлы - файл, для которого создается новая версия.
//   СведенияОФайле - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//
// Возвращаемое значение:
//   СправочникСсылка.ВерсииФайлов - созданная версия.
//
Функция СоздатьВерсию(ФайлСсылка, СведенияОФайле) Экспорт
	
	Перем СсылкаНаТом;
	ХранилищеФайла = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапретЗагрузкиФайловПоРасширению = ФайловыеФункции.ПолучитьЗапретЗагрузкиФайловПоРасширению();
	СписокЗапрещенныхРасширений = ФайловыеФункции.ПолучитьСписокЗапрещенныхРасширений();
	РасширениеФайла = СведенияОФайле.РасширениеБезТочки;
	Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
				РасширениеФайла);
	КонецЕсли;
	
	Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
	
	Если СведенияОФайле.НоваяВерсияНомерВерсии = Неопределено Тогда
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(ФайлСсылка) + 1;
	Иначе
		Версия.НомерВерсии = СведенияОФайле.НоваяВерсияНомерВерсии;
	КонецЕсли;
	
	Версия.Владелец = ФайлСсылка;
	Версия.ДатаМодификацииУниверсальная = СведенияОФайле.ВремяИзмененияУниверсальное;
	Версия.ДатаМодификацииФайла = СведенияОФайле.ВремяИзменения;
	
	Версия.Комментарий = СведенияОФайле.НоваяВерсияКомментарий;
	
	Если СведенияОФайле.НоваяВерсияАвтор = Неопределено Тогда
		Версия.Автор = Сотрудники.ОсновнойСотрудникПользователя(Пользователи.ТекущийПользователь());
	Иначе
		Версия.Автор = СведенияОФайле.НоваяВерсияАвтор;
	КонецЕсли;
	
	Если СведенияОФайле.НоваяВерсияДатаСоздания = Неопределено Тогда
		Версия.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		Версия.ДатаСоздания = СведенияОФайле.НоваяВерсияДатаСоздания;
	КонецЕсли;
	
	Версия.ПолноеНаименование = СведенияОФайле.ИмяБезРасширения;
	Версия.Размер = СведенияОФайле.Размер;
	Версия.Расширение = ФайловыеФункцииКлиентСервер.РасширениеБезТочки(СведенияОФайле.РасширениеБезТочки);
	
	Версия.ДополнительныеСвойства.Вставить("СлужебныйВнешнееПодписание", СведенияОФайле.СлужебныйВнешнееПодписание);
	Если СведенияОФайле.Свойство("ДобавлениеРегШтампа") Тогда
		Версия.ДополнительныеСвойства.Вставить("ДобавлениеРегШтампа", Истина);
	КонецЕсли;
	
	Если Версия.Размер <> 0 Тогда
		МаксРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла();
		РазмерВМб = Версия.Размер / (1024 * 1024);
		РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
		РазрешеноДобавлятьФайлыТаймлист
			= ТаймлистВызовСервера.РазрешеноДобавлятьФайлыТаймлистПревышающихМаксимальноДопустимыйОбъем(
				Версия.Расширение, РазмерВМб);
		
		Если Версия.Размер > МаксРазмерФайла И Не РазрешеноДобавлятьФайлыТаймлист Тогда
			ВызватьИсключение
				   СтрШаблон(
					 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
					 СведенияОФайле.ИмяБезРасширения, 
					 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб), 
					 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
		КонецЕсли;
	КонецЕсли;
	
	ТипХраненияФайлов = ФайловыеФункции.ПолучитьТипХраненияФайлов();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ИспользоватьРазмещениеВТомахПоУсловиям() Тогда
		Версия.Записать(); // чтобы при размещении в томе по условию на руках была ссылка на версию
	КонецЕсли;
	
	Если СведенияОФайле.СсылкаНаВерсиюИсточник <> Неопределено Тогда // создание Файла из шаблона
		
		ТипХраненияФайловШаблона = СведенияОФайле.СсылкаНаВерсиюИсточник.ТипХраненияФайла;
		
		Если ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			//  и шаблон, и новый Файл - в базе
			
			// При создании Файла из шаблона хранилище значения копируется напрямую
			ХранилищеФайла = СведенияОФайле.АдресВременногоХранилищаФайла;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			//  и шаблон, и новый Файл - на диске - просто копируем файл
			
			Если НЕ СведенияОФайле.СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ФайловыеФункции.ПолныйПутьТома(СведенияОФайле.СсылкаНаВерсиюИсточник.Том)
					+ СведенияОФайле.СсылкаНаВерсиюИсточник.ПутьКФайлу;
				
				ПутьКФайлу = "";
				
				// добавить в один из томов (где есть свободное место)
				ФайловыеФункции.ДобавитьНаДиск(ПолныйПутьФайлаШаблона, ПутьКФайлу, СсылкаНаТом, 
					СведенияОФайле.ВремяИзмененияУниверсальное,
					Версия.НомерВерсии, СведенияОФайле.ИмяБезРасширения, СведенияОФайле.РасширениеБезТочки, 
					Версия.Размер, Ложь, Неопределено, Версия.Ссылка);
				Версия.ПутьКФайлу = ПутьКФайлу;
				Версия.Том = СсылкаНаТом.Ссылка;
			КонецЕсли;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			// шаблон в базе, новый Файл - на диске
			
			ДвоичныеДанные = СведенияОФайле.АдресВременногоХранилищаФайла.Получить(); // в этом случае в АдресВременногоХранилищаФайла находится ХранилищеЗначения с файлом
			
			ПутьКФайлу = "";
			
			// добавить в один из томов (где есть свободное место)
			ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлу, СсылкаНаТом, 
				СведенияОФайле.ВремяИзмененияУниверсальное, 
				Версия.НомерВерсии, СведенияОФайле.ИмяБезРасширения, 
				СведенияОФайле.РасширениеБезТочки, Версия.Размер, Ложь, Неопределено, Версия.Ссылка);
			Версия.ПутьКФайлу = ПутьКФайлу;
			Версия.Том = СсылкаНаТом.Ссылка;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			// шаблон на диске, новый Файл - в базе
			
			Если НЕ СведенияОФайле.СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ФайловыеФункции.ПолныйПутьТома(СведенияОФайле.СсылкаНаВерсиюИсточник.Том)
					+ СведенияОФайле.СсылкаНаВерсиюИсточник.ПутьКФайлу; 
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаШаблона);
				ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			КонецЕсли;
			
		КонецЕсли;
	Иначе // создание объекта Файл на основе выбранного файла с диска
		
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			
			ДвоичныеДанные = Неопределено;
			Если ЭтоАдресВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла) Тогда
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
			Иначе
				// в этом случае в АдресВременногоХранилищаФайла - путь к файлу на диске
				ДвоичныеДанные = Новый ДвоичныеДанные(СведенияОФайле.АдресВременногоХранилищаФайла);
			КонецЕсли;
			
			ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			
			Если Версия.Размер = 0 Тогда
				ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
				Версия.Размер = ДвоичныеДанныеФайла.Размер();
				
				МаксРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла();
				РазмерВМб = Версия.Размер / (1024 * 1024);
				РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
				РазрешеноДобавлятьФайлыТаймлист
					= ТаймлистВызовСервера.РазрешеноДобавлятьФайлыТаймлистПревышающихМаксимальноДопустимыйОбъем(
						Версия.Расширение, РазмерВМб);
				
				Если Версия.Размер > МаксРазмерФайла И Не РазрешеноДобавлятьФайлыТаймлист Тогда
					ВызватьИсключение
						   СтрШаблон(
							 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
							 СведенияОФайле.ИмяБезРасширения, 
							 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб), 
							 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // хранение на диске
			
			ДвоичныеДанные = Неопределено;
			Если ЭтоАдресВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла) Тогда
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
			Иначе
				// в этом случае в АдресВременногоХранилищаФайла - путь к файлу на диске
				ДвоичныеДанные = Новый ДвоичныеДанные(СведенияОФайле.АдресВременногоХранилищаФайла);
			КонецЕсли;
			
			Если Версия.Размер = 0 Тогда
				Версия.Размер = ДвоичныеДанные.Размер();
				
				МаксРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла();
				РазмерВМб = Версия.Размер / (1024 * 1024);
				РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
				РазрешеноДобавлятьФайлыТаймлист
					= ТаймлистВызовСервера.РазрешеноДобавлятьФайлыТаймлистПревышающихМаксимальноДопустимыйОбъем(
						Версия.Расширение, РазмерВМб);
				
				Если Версия.Размер > МаксРазмерФайла И Не РазрешеноДобавлятьФайлыТаймлист Тогда
					ВызватьИсключение
						СтрШаблон(
							НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
							СведенияОФайле.ИмяБезРасширения, 
							ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб), 
							ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
				КонецЕсли;
			КонецЕсли;
			
			ПутьКФайлу = "";
			
			// добавить в один из томов (где есть свободное место)
			ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлу, СсылкаНаТом, 
				СведенияОФайле.ВремяИзмененияУниверсальное, 
				Версия.НомерВерсии, СведенияОФайле.ИмяБезРасширения, СведенияОФайле.РасширениеБезТочки, 
				Версия.Размер, Ложь, Неопределено, Версия.Ссылка);
			Версия.ПутьКФайлу = ПутьКФайлу;
			Версия.Том = СсылкаНаТом.Ссылка;
			
		КонецЕсли; // хранение на диске			
		
	КонецЕсли;
	
	Если НРег(Версия.Расширение) = "txt"  И Не ЗначениеЗаполнено(СведенияОФайле.Кодировка) Тогда
		Версия.Записать();
		
		Кодировка = РегистрыСведений.КодировкиФайлов.ОпределитьКодировкуФайла(Версия.Ссылка, Версия.Расширение);
		
		Если ЗначениеЗаполнено(Кодировка) Тогда 
			ЗаписатьКодировкуВерсииФайла(Версия.Ссылка, Кодировка);
			
			ИмяФайлаСПутем = ФайловыеФункцииПереопределяемый.ПолучитьИмяФайлаСПутемКДвоичнымДанным(Версия.Ссылка);
			
			Если ИмяФайлаСПутем <> "" Тогда
			
				Отказ = Ложь;
				ТекстИзвлеченный = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстИзТекстовогоФайла(
					ИмяФайлаСПутем, Кодировка, Отказ);
				СведенияОФайле.АдресВременногоХранилищаТекста = Новый ХранилищеЗначения(ТекстИзвлеченный);
				
				Если Версия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
					УдалитьФайлы(ИмяФайлаСПутем);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если Версия.Размер = 0 Тогда
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
		КонецЕсли;
	КонецЕсли;
	
	Если СведенияОФайле.Свойство("НеМеняетСути") Тогда
		Версия.НеМеняетСути = СведенияОФайле.НеМеняетСути;
	Иначе
		Версия.НеМеняетСути = Ложь;
	КонецЕсли;
		
	Версия.Записать();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ХранилищеФайла);	
	КонецЕсли;	
	
	Если ТипЗнч(СведенияОФайле.АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		
		// При создании Файла из шаблона хранилище значения копируется напрямую
		ТекстХранилище = СведенияОФайле.АдресВременногоХранилищаТекста;
		ИзвлеченныйТекст = ТекстХранилище; // здесь заполняем только ИзвлеченныйТекст
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		
		РегистрыСведений.ТекстыВерсийФайлов.ДобавитьЗаписьИзвлечения(Версия.Ссылка, 
			СтатусИзвлеченияТекста, ИзвлеченныйТекст, Версия.Расширение, ТекстХранилище);
		
	ИначеЕсли Не ПустаяСтрока(СведенияОФайле.АдресВременногоХранилищаТекста) Тогда
		
		Текст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаТекста);
		ТекстХранилище = Новый ХранилищеЗначения(Текст);
		ИзвлеченныйТекст = ТекстХранилище; // здесь заполняем только ИзвлеченныйТекст
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		
		РегистрыСведений.ТекстыВерсийФайлов.ДобавитьЗаписьИзвлечения(Версия.Ссылка, 
			СтатусИзвлеченияТекста, ИзвлеченныйТекст, Версия.Расширение, ТекстХранилище);
			
	Иначе		
		
		ТекстХранилище = Новый ХранилищеЗначения("");
		ИзвлеченныйТекст = ТекстХранилище;
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка();
		
		РегистрыСведений.ТекстыВерсийФайлов.ДобавитьЗаписьИзвлечения(Версия.Ссылка, 
			СтатусИзвлеченияТекста, ИзвлеченныйТекст, Версия.Расширение, ТекстХранилище);
		
	КонецЕсли;
	
	ЗаписатьОбращениеКВерсииФайла(Версия.Ссылка);
	
	Возврат Версия.Ссылка;
	
КонецФункции // СоздатьВерсию()

// Создает файл в ИБ.
//
// Параметры:
//   Владелец       - СправочникСсылка.ПапкиФайлов, ЛюбаяСсылка - будет установлен в реквизит ВладелецФайла у
//                    созданного файла.
//   СведенияОФайле - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "Файл".
//
// Возвращаемое значение:
//    СправочникСсылка.Файлы - созданный файл.
//
Функция СоздатьФайл(Знач Владелец, Знач СведенияОФайле) Экспорт
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Если СведенияОФайле.ИдентификаторФайла <> Неопределено Тогда
		Файл.УстановитьСсылкуНового(Справочники.Файлы.ПолучитьСсылку(СведенияОФайле.ИдентификаторФайла));
	КонецЕсли;
	
	Файл.ВладелецФайла = Владелец;
	Файл.Наименование = СведенияОФайле.ИмяБезРасширения;
	Файл.ПолноеНаименование = СведенияОФайле.ИмяБезРасширения;
	Файл.Автор = ?(СведенияОФайле.Автор <> Неопределено, СведенияОФайле.Автор, 
		Сотрудники.ОсновнойСотрудникПользователя(Пользователи.ТекущийПользователь()));
	Файл.ДатаСоздания = ТекущаяДатаСеанса();
	Файл.Описание = СведенияОФайле.Комментарий;
	Файл.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Неопределено);
	Файл.ХранитьВерсии = СведенияОФайле.ХранитьВерсии;
	Файл.СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.НеРаспознавать;
	Файл.Проект = СведенияОФайле.Проект;
	
	Если СведенияОФайле.Свойство("ДобавлениеРегШтампа") Тогда
		Файл.ДополнительныеСвойства.Вставить("ДобавлениеРегШтампа", Истина);
	КонецЕсли;
	
	Если СведенияОФайле.Свойство("ШаблонОснование") И ЗначениеЗаполнено(СведенияОФайле.ШаблонОснование) Тогда 
		Файл.ШаблонОснованиеДляСоздания = СведенияОФайле.ШаблонОснование;
	КонецЕсли;
	
	// заполнение проекта из реквизита владельца
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")
		И ЗначениеЗаполнено(Файл.ВладелецФайла)
		И Файл.ВладелецФайла.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда 
		
		Файл.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл.ВладелецФайла, "Проект");
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")
		И ЗначениеЗаполнено(Файл.ВладелецФайла)
		И ТипЗнч(Файл.ВладелецФайла) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда 
		
		Файл.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл.ВладелецФайла, "Задача.Проект");
	
	КонецЕсли;
	
	Если СведенияОФайле.ДополнительныеПараметры <> Неопределено 
		И ТипЗнч(СведенияОФайле.ДополнительныеПараметры) = Тип("Структура")
		И СведенияОФайле.ДополнительныеПараметры.Свойство("Проект")
		И ЗначениеЗаполнено(СведенияОФайле.ДополнительныеПараметры.Проект) Тогда 
		
		Файл.Проект = СведенияОФайле.ДополнительныеПараметры.Проект;
	КонецЕсли;
	
	Если СведенияОФайле.Свойство("ЗаписьПодписанногоОбъекта") Тогда 
		
		Файл.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", СведенияОФайле.ЗаписьПодписанногоОбъекта);
		
	КонецЕсли;
	
	Если СведенияОФайле.Свойство("ДобавлениеРегШтампа") Тогда 
		Файл.ДополнительныеСвойства.Вставить("ДобавлениеРегШтампа", СведенияОФайле.ДобавлениеРегШтампа);
	КонецЕсли;
	
	Файл.Записать();
	
	Если ТипЗнч(СведенияОФайле.АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую
		
		РегистрыСведений.ТекстыФайлов.ДобавитьЗапись(Файл.Ссылка, СведенияОФайле.АдресВременногоХранилищаТекста);
		
	ИначеЕсли Не ПустаяСтрока(СведенияОФайле.АдресВременногоХранилищаТекста) Тогда
		Текст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаТекста);
		
		РегистрыСведений.ТекстыФайлов.ДобавитьЗапись(Файл.Ссылка, Новый ХранилищеЗначения(Текст));
		
	КонецЕсли;
	
	Если Не СведенияОФайле.Свойство("ДобавлениеРегШтампа")
		И СведенияОФайле.Свойство("РасширениеБезТочки") Тогда
		СоздатьЗаписьОчередиПревью(Файл.Ссылка, СведенияОФайле.РасширениеБезТочки);
	КонецЕсли;	
	
	Возврат Файл.Ссылка;
	
КонецФункции // СоздатьФайл()

// Получает массив занятых файлов по владельцу
Функция ПолучитьСписокЗанятыхФайлов(ВладелецФайла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Редактирует,
		|	Файлы.ИндексКартинки,
		|	Файлы.Наименование,
		|	Файлы.Описание,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ВладелецФайла,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	Файлы.ХранитьВерсии,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Редактирует В (&ПользовательИЕгоСотрудники)
		|	И Файлы.ВладелецФайла = &ВладелецФайла";
		
	Запрос.УстановитьПараметр("ПользовательИЕгоСотрудники", 
		СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь()));
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	ТаблицаЗанятыхФайлов = Запрос.Выполнить().Выгрузить();
	
	МассивФайлов = Новый Массив;
	
	Для Каждого Строка Из ТаблицаЗанятыхФайлов Цикл
		
		ОписаниеФайла = Новый Структура(
			"Редактирует, РедактируетТекущийПользователь, Наименование, Ссылка, Размер,
			|ПолноеИмяФайлаВРабочемКаталоге, ДатаМодификацииУниверсальнаяВБазе, Расширение, ВладелецФайла");
		ЗаполнитьЗначенияСвойств(ОписаниеФайла, Строка);
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
			Строка.Ссылка);
		ОписаниеФайла.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;	
		ОписаниеФайла.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
		ОписаниеФайла.РедактируетТекущийПользователь =
			Сотрудники.ЭтоСотрудникИлиПользовательТекущегоПользователя(ОписаниеФайла.Редактирует);
		
		МассивФайлов.Добавить(ОписаниеФайла);
		
	КонецЦикла;	
	
	Возврат МассивФайлов;
	
КонецФункции

// Возвращает структуру параметров логирования сканера
// 
// Параметры:
//  ИдентификаторКлиента - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Структура
Функция ПараметрыЛогированияСканера(ИдентификаторКлиента) Экспорт

	ИспользоватьКаталогЖурналаСканирования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиСканирования/ИспользоватьКаталогЖурналаСканирования", 
		ИдентификаторКлиента, Ложь);
	КаталогЖурналаСканирования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиСканирования/КаталогЖурналаСканирования", 
		ИдентификаторКлиента, ""); 
		
	СтруктураЛогов = Новый Структура("ИспользоватьКаталогЖурналаСканирования, КаталогЖурналаСканирования",
		ИспользоватьКаталогЖурналаСканирования, КаталогЖурналаСканирования);	
	
	Возврат СтруктураЛогов;
	
КонецФункции	

// Получает ДвоичныеДанные версии файла файла
// Параметры:
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов
//
// Возвращаемое значение:
//  ДвоичныеДанные
Функция ПолучитьДвоичныеДанныеВерсииФайла(ВерсияСсылка) Экспорт
	
	ДвоичныеДанные = Неопределено;
	
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВерсияСсылка,
		"ТипХраненияФайла, Том, ПутьКФайлу, Владелец, ПолноеНаименование, Расширение");
		
	ФайлСсылка = РеквизитыВерсии.Владелец;
	
	Если РеквизитыВерсии.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ РеквизитыВерсии.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(РеквизитыВерсии.Том) + РеквизитыВерсии.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
			Исключение
				// запись в журнал регистрации
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибке(), РеквизитыВерсии.Владелец);
				ЗаписьЖурналаРегистрации("Открытие файла", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, РеквизитыВерсии.Владелец, СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					РеквизитыВерсии.ПолноеНаименование + "." + РеквизитыВерсии.Расширение);
					
			КонецПопытки;
		КонецЕсли;
	Иначе
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанные = ХранилищеФайла.Получить();
	КонецЕсли;
	
	ЗаписатьОбращениеКВерсииФайла(ВерсияСсылка);
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Получает ДвоичныеДанные файла
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  НеЗаполнятьШаблон - Булево
//
// Возвращаемое значение:
//  ДвоичныеДанные
Функция ПолучитьДвоичныеДанныеФайла(ФайлСсылка, НеЗаполнятьШаблон = Ложь) Экспорт

	Если НеЗаполнятьШаблон = Ложь Тогда	
		// чтобы сработало автозаполнение
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка);
	КонецЕсли;
	
	ВерсияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
	Возврат ПолучитьДвоичныеДанныеВерсииФайла(ВерсияСсылка);
	
КонецФункции

// Вернет массив структур  (Ссылка, МассивФайлов)
Функция ПроверитьЗанятыеФайлыОтложенно() Экспорт
	
	Результат = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Файлы.Файл КАК Файл,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
	|	Файлы.ВладелецФайла КАК ВладелецФайла
	|ИЗ
	|	РегистрСведений.ЗанятыеФайлы КАК Файлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
	|		ПО Файлы.ТекущаяВерсия = ФайлыВРабочемКаталогеКомпьютера.Версия
	|			И (ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор)
	|			И (ФайлыВРабочемКаталогеКомпьютера.НаЧтение = ЛОЖЬ)
	|ГДЕ
	|	Файлы.Редактирует = &Редактирует";
	
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Запрос.УстановитьПараметр("Редактирует", Пользователи.ТекущийПользователь());
	
	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаФайлов Цикл
		
		Права = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Строка.Файл);
		Если Не Права.Изменение Тогда
			Продолжить; // пропускаем если нет прав
		КонецЕсли;	
		
		Расширение = Строка.Расширение;

		Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Расширение) 
			И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Строка.ВладелецФайла) Тогда
			Если СогласованиеВРежимеЗамечанийСервер.ЕстьНеЗавершенноеСогласованиеПоДокументу(Строка.ВладелецФайла) Тогда
				Продолжить; //пропускаем такой файл
			КонецЕсли;	
		КонецЕсли;	
		
		СтруктураФайла = Новый Структура(
			"РедактируетТекущийПользователь, ПолноеИмяФайлаВРабочемКаталоге,  ДатаМодификацииУниверсальнаяВБазе, Размер, Ссылка, ВладелецФайла");
		
		СтруктураФайла.Ссылка = Строка.Файл;
		СтруктураФайла.РедактируетТекущийПользователь = Истина;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Строка.Файл);
		СтруктураФайла.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
		СтруктураФайла.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
		СтруктураФайла.Размер =  ДанныеФайла.Размер;
		СтруктураФайла.ВладелецФайла = ДанныеФайла.Владелец;
		
		Результат.Добавить(СтруктураФайла);
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

// Создает новый файл по аналогии с указанным и возвращает ссылку на него
// Параметры
//  ИсходныйФайл  - СправочникСсылка.Файлы - существующий файл
//  ВладелецНовогоФайла - ЛюбаяСсылка - владелец файла
//  ХранитьВерсии - если не равно Неопределено, ставится у скопированного файла (вместо значения оригинала)
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - новый файл
Функция СкопироватьФайл(ИсходныйФайл, ВладелецНовогоФайла, Ид = Неопределено, ХранитьВерсии = Неопределено) Экспорт
	
	Если ИсходныйФайл = Неопределено Или ИсходныйФайл.Пустая() Или ИсходныйФайл.ТекущаяВерсия.Пустая()Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранитьВерсииНовыйФайл = ИсходныйФайл.ХранитьВерсии;
	
	Если ХранитьВерсии <> Неопределено Тогда
		ХранитьВерсииНовыйФайл = ХранитьВерсии;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.Комментарий = ИсходныйФайл.Описание;
	СведенияОФайле.ИмяБезРасширения = ИсходныйФайл.ПолноеНаименование;
	СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
	СведенияОФайле.ИдентификаторФайла = Ид;

	НовыйФайл = СоздатьФайл(ВладелецНовогоФайла, СведенияОФайле);
	
	ХранилищеФайла = Неопределено;
	Если ИсходныйФайл.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ИсходныйФайл.ТекущаяВерсия);
	КонецЕсли;
	
	ТекстХранилище = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(ИсходныйФайл.ТекущаяВерсия);
	
	СведенияОФайле.Размер = ИсходныйФайл.ТекущаяВерсия.Размер;
	СведенияОФайле.РасширениеБезТочки = ИсходныйФайл.ТекущаяВерсия.Расширение;
	СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = ТекстХранилище;
	СведенияОФайле.СсылкаНаВерсиюИсточник = ИсходныйФайл.ТекущаяВерсия;
	СведенияОФайле.ВремяИзмененияУниверсальное = ИсходныйФайл.ТекущаяВерсия.ДатаМодификацииУниверсальная;
	СведенияОФайле.ВремяИзменения = ИсходныйФайл.ТекущаяВерсия.ДатаМодификацииФайла;
	Версия = СоздатьВерсию(НовыйФайл, СведенияОФайле);
	
	ОбновитьВерсиюВФайле(НовыйФайл, Версия, ТекстХранилище);
	
	ВерсияОбъект = НовыйФайл.ТекущаяВерсия.ПолучитьОбъект();
	
	ИсходныйФайлСТЧЭП = ИсходныйФайл.ТекущаяВерсия.Метаданные().ТабличныеЧасти.Найти("ЭлектронныеЦифровыеПодписи") <> Неопределено;
	Если ИсходныйФайлСТЧЭП Тогда
		ЧислоПодписей = 0;
		Для Каждого Строка Из ИсходныйФайл.ТекущаяВерсия.ЭлектронныеЦифровыеПодписи Цикл
			НоваяСтрока = ВерсияОбъект.ЭлектронныеЦифровыеПодписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЧислоПодписей = ЧислоПодписей + 1;
		КонецЦикла;
	Иначе
		ЧислоПодписей = РаботаСЭП.СкопироватьВсеПодписи(ИсходныйФайл.ТекущаяВерсия, НовыйФайл.ТекущаяВерсия);
	КонецЕсли;
	
	Если ЧислоПодписей <>  0 Тогда
		ФайлОбъект = НовыйФайл.ПолучитьОбъект();
		ФайлОбъект.ПодписанЭП = Истина;
		ФайлОбъект.Записать();
		
		ВерсияОбъект.ПодписанЭП = Истина;
		ВерсияОбъект.Записать();
	КонецЕсли;
	
	Если ИсходныйФайл.Зашифрован Тогда
		
		ФайлОбъект = НовыйФайл.ПолучитьОбъект();
		ФайлОбъект.Зашифрован = Истина;
		
		Для Каждого Строка Из ИсходныйФайл.СертификатыШифрования Цикл
			НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
		// Чтобы прошла запись ранее подписанного объекта
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ФайлОбъект.Записать();
		
		ВерсияОбъект = НовыйФайл.ТекущаяВерсия.ПолучитьОбъект();
		ВерсияОбъект.Зашифрован = Истина;
		// Чтобы прошла запись ранее подписанного объекта
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ВерсияОбъект.Записать();
		
	КонецЕсли;
	
	РаботаСФайламиВызовСервераПереопределяемый.ЗаполнитьРеквизитыФайлаИзИсходногоФайла(НовыйФайл, ИсходныйФайл);
	
	Возврат НовыйФайл;
	
КонецФункции

// Очищает старые файлы визуализации - например подписали КЭП, потом регистрация
//  - надо их очистить, чтобы создались новые, уже с "штамп + рег номер"
//  
// Параметры:
// ВладелецФайла - ОпределяемыйТип.ВладелецФайлов-  например документ
//
Процедура ОчиститьФайлыВизуализации(ВладелецФайла) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	МассивФайлов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Владелец = Файлы.Ссылка)
	|		И (СлужебныеФайлыДокументов.Документ = &ВладелецФайла)
	|		И СлужебныеФайлыДокументов.Отношение = ЗНАЧЕНИЕ(Перечисление.ОтношенияСлужебныхФайлов.ВизуализацияЭП)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ
	|	И НЕ СлужебныеФайлыДокументов.Документ ЕСТЬ NULL";

	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивФайлов.Добавить(Выборка.Ссылка);
	КонецЦикла;

	Для Каждого Файл Из МассивФайлов Цикл

		БылиУдаленыФайлы = РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
			ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
			
		Если БылиУдаленыФайлы Тогда
			РегистрыСведений.ПредпросмотрФайлов.Удалить(Файл);		
		КонецЕсли;	
			
	КонецЦикла;

	ОчиститьФайлыВЛокалКэше(ВладелецФайла);

КонецПроцедуры	      

// Возвращает файл преобразованный в pdf  
//   soffice --headless --convert-to pdf fils.docx    - конвертация docx в pdf
// 
// Параметры:
//  ДвоичныеДанныеНовые - ДвоичныеДанные
//  Расширение - Строка
// 
// Возвращаемое значение:
//  ДвоичныеДанные
Функция ДвоичныеДанныеPDFПреобразованныеВLibreOffice(Знач ДвоичныеДанныеНовые, Знач Расширение) Экспорт
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапка);
	
	ИмяDocБезПути = "file" + "." + Расширение;
	ИмяФайлаСПутем = ВременнаяПапка + ИмяDocБезПути;
	ДвоичныеДанныеНовые.Записать(ИмяФайлаСПутем);
	
	ИмяФайлаPDF = ВременнаяПапка + "file" + "." + "pdf";
	
	СтрокаКоманды = "soffice --headless --convert-to " + "pdf:writer_pdf_Export:SelectPdfVersion=1" + " " + ИмяDocБезПути;  
	// linux
	
	ЗапуститьПриложение(СтрокаКоманды, ВременнаяПапка,Истина);
	
	ФайлPDF = Новый Файл(ИмяФайлаPDF);
	ФайлЕсть = ФайлPDF.Существует();
	ФайлPDF = Неопределено;
	
	Если ФайлЕсть Тогда
		
		ДвоичныеДанныеPDF = Новый ДвоичныеДанные(ИмяФайлаPDF);
		
	Иначе	
		
		ДвоичныеДанныеPDF = ДвоичныеДанныеНовые;
		
	КонецЕсли;	
	
	УдалитьФайлы(ВременнаяПапка);      
	
	Возврат ДвоичныеДанныеPDF;
	
КонецФункции	

// Возвращает файл преобразованный в html  
//   soffice --headless --convert-to pdf fils.docx    - конвертация docx в pdf
// 
// Параметры:
//  ДвоичныеДанныеНовые - ДвоичныеДанные
//  Расширение - Строка
// 
// Возвращаемое значение:
//  ДвоичныеДанные
Функция ДвоичныеДанныеHtmПреобразованныеВLibreOffice(Знач ДвоичныеДанныеНовые, Знач Расширение) Экспорт
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапка);
	
	ИмяDocБезПути = "file" + "." + Расширение;
	ИмяФайлаСПутем = ВременнаяПапка + ИмяDocБезПути;
	ДвоичныеДанныеНовые.Записать(ИмяФайлаСПутем);
	
	ИмяФайлаHtml = ВременнаяПапка + "file" + "." + "html";
	
	СтрокаКоманды = "soffice --headless --convert-to " + """html""" + " " + ИмяDocБезПути;
	
	ЗапуститьПриложение(СтрокаКоманды, ВременнаяПапка,Истина);
	
	ФайлHtml = Новый Файл(ИмяФайлаHtml);
	ФайлЕсть = ФайлHtml.Существует();
	ФайлHtml = Неопределено;
	
	Если ФайлЕсть Тогда
		
		ТекстHTML = Новый ТекстовыйДокумент();
		ТекстHTML.Прочитать(ИмяФайлаHtml, "UTF-8");
		ТекстИзфайла = ТекстHTML.ПолучитьТекст();
		ТекстHTML = Неопределено;
		
		ВырезатьСтильВBody(ТекстИзфайла);

		ТекстИзфайла = ОбзорФайловКлиентСервер.HTMLСКартинками(
			ТекстИзфайла,
			ИмяDocБезПути, 
			ВременнаяПапка);
		
		ИмяВременногоФайлаНового = ПолучитьИмяВременногоФайла("html");
		ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайлаНового,
			"UTF-8");
		ТекстовыйФайл.Записать(ТекстИзфайла);
		ТекстовыйФайл.Закрыть();
		
		ДвоичныеДанныеHtml = Новый ДвоичныеДанные(ИмяВременногоФайлаНового);
		
	Иначе	
		
		ДвоичныеДанныеHtml = ДвоичныеДанныеНовые;
		
	КонецЕсли;	
	
	УдалитьФайлы(ВременнаяПапка);      
	
	Возврат ДвоичныеДанныеHtml;
	
КонецФункции

// Возвращает ИспользоватьLibreOffice. Только на Linux сервере.
// 
// Возвращаемое значение:
//  Булево
Функция ИспользоватьLibreOffice() Экспорт

	Возврат ФайловыеФункцииПовтИсп.ИспользоватьLibreOffice();
	
КонецФункции

// Вернет, установлен ли LibreOffice (только Linux)
// 
// Возвращаемое значение:
//  Булево
Функция УстановленLibreOffice() Экспорт
	
	Если Не ОбщегоНазначения.ЭтоLinuxСервер() Тогда
		Возврат Ложь; // не установлен LibreOffice
	КонецЕсли;	
	
	СтрокаЗапуска = "soffice --version";
	
	КодВозврата = Неопределено;
	Попытка
		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
	Исключение           
		Возврат Ложь; // не установлен LibreOffice
	КонецПопытки;
	
	// Успех.
	Если КодВозврата = 0 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь; // не установлен LibreOffice
	
КонецФункции	
	
Процедура ОсвободитьФайлыВладельца(Владелец) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Редактирует КАК Редактирует
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла");
	Запрос.УстановитьПараметр("ВладелецФайла", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		
		ФайлОбъект.Редактирует = Неопределено;
		ФайлОбъект.ДатаЗаема = Дата("00010101000000");
		ФайлОбъект.Записать();
		
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Выборка.Ссылка, Справочники.ВидыБизнесСобытий.ОсвобождениеФайла);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает файл в ИБ вместе с версией.
//
// Параметры:
//   ВладелецФайла       - СправочникСсылка.ПапкиФайлов, ЛюбаяСсылка - будет установлен в реквизит ВладелецФайла у
//   																   созданного файла.
//   СведенияОФайле - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле в режиме "ФайлСВерсией".
//
// Возвращаемое значение:
//    СправочникСсылка.Файлы - созданный файл.
//
Функция СоздатьФайлСВерсией(ВладелецФайла, СведенияОФайле) Экспорт
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		СведенияОФайле.ИмяБезРасширения 
			= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
				СведенияОФайле.ИмяБезРасширения, "");
				
		РольФайла = Неопределено;
		
		ДобавлениеРегШтампа = Ложь;
		СведенияОФайле.Свойство("ДобавлениеРегШтампа", ДобавлениеРегШтампа);		
		
		// Создадим карточку Файла в БД.
		ФайлСсылка = СоздатьФайл(ВладелецФайла, СведенияОФайле);
		// Создадим версию сохраняемого файла для сохранения в карточке Файла.
		Версия = СоздатьВерсию(ФайлСсылка, СведенияОФайле);
		
		// Подставим ссылку на версию в карточку Файла.
		ОбновитьВерсиюВФайле(ФайлСсылка, Версия, СведенияОФайле.АдресВременногоХранилищаТекста,
			,, ДобавлениеРегШтампа);
		
		Если СведенияОФайле.Кодировка <> Неопределено Тогда
			РаботаСФайламиВызовСервера.ЗаписатьКодировкуВерсииФайла(Версия, СведенияОФайле.Кодировка);
		КонецЕсли;
		
		Если СведенияОФайле.СписокКатегорий <> Неопределено Тогда  
			Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
				РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СведенияОФайле.СписокКатегорий, ФайлСсылка);
			Иначе
				РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СведенияОФайле.СписокКатегорий, ВладелецФайла);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОФайле.ОригинальноеИмя) Тогда
			РаботаСФайламиВызовСервера.ЗаписатьОригинальноеИмяФайла(ФайлСсылка, СведенияОФайле.ОригинальноеИмя);
		КонецЕсли;	
		
		Если ТипЗнч(СведенияОФайле.ДополнительныеПараметры) = Тип("Структура")
			И СведенияОФайле.ДополнительныеПараметры.Свойство("ВзятьРольФайлаПоВладельцу") Тогда
			Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) Тогда
				
				ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ВидДокумента");
				РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
				Если РолиФайлов.Количество() <> 0 Тогда
					СведенияОФайле.РольФайла = РолиФайлов[0].Роль;
				КонецЕсли;	
					
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СведенияОФайле.РольФайла) Тогда
			РольФайла = СведенияОФайле.РольФайла;
			РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(ФайлСсылка, СведенияОФайле.РольФайла);
		КонецЕсли;	
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
			ДанныеОШтрихкодеФайла = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(ФайлСсылка);
			Если ДанныеОШтрихкодеФайла <> Неопределено И ДанныеОШтрихкодеФайла.Свойство("ДвоичныеДанныеФайла") 
				И ТипЗнч(ВладелецФайла) <> Тип("СправочникСсылка.ШаблоныДокументов") Тогда
				
				Результат = ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(ФайлСсылка,
					"ВставитьИзображениеШтрихкода", 
					Ложь, 
					ДанныеОШтрихкодеФайла.ДвоичныеДанныеИзображения, 
					ДанныеОШтрихкодеФайла.ДвоичныеДанныеФайла,
					ДанныеОШтрихкодеФайла.Расширение,
					ДанныеОШтрихкодеФайла.ФайлРедактируется,
					ДанныеОШтрихкодеФайла.ИзменениеФайловMSWordТолькоНаСервере,
					ДанныеОШтрихкодеФайла.НастройкиШтрихкода.ВысотаШК);
					
				НеобходимоВыполнитьВставкуШКНаКлиенте = НЕ (Результат <> Ложь);
				
			КонецЕсли;
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		НеобходимоВыполнитьВставкуШКНаКлиенте = НЕ (Инфо.Описание = "ТэгНеНайден");
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При автоматической вставке штрихкода в файл возникло исключение:
				|%1'"),
			Инфо.Описание);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Вставка штрихкода'"),
			УровеньЖурналаРегистрации.Информация,
			,
			ФайлСсылка.Ссылка,
			ТекстСообщения);
	КонецПопытки;
	
	ЕстьПравоСохранения = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	Если СведенияОФайле.ЗаписатьВИсторию И ЕстьПравоСохранения Тогда
		НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(ФайлСсылка);
		ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
	КонецЕсли;
	
	Если СведенияОФайле.ПараметрыРаспознавания = Неопределено Тогда
		
		ИОМВладелеца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			ТипЗнч(ВладелецФайла));
		СведенияОФайле.ПараметрыРаспознавания = ПодготовитьПараметрыРаспознавания(ИОМВладелеца);
		
	Иначе
		
		Если НЕ СведенияОФайле.ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") Тогда
			РаспознатьПослеДобавления = СведенияОФайле.ПараметрыРаспознавания.СтратегияРаспознавания <> Перечисления.СтратегииРаспознаванияТекста.НеРаспознавать;
			СведенияОФайле.ПараметрыРаспознавания.Вставить("РаспознатьПослеДобавления", РаспознатьПослеДобавления);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СведенияОФайле.ПараметрыРаспознавания <> Неопределено 
		И СведенияОФайле.ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") 
		И СведенияОФайле.ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
		РаспознатьНемедленно = Ложь;
		ОписаниеОшибки = "";
		РаспознанныйТекст = "";
		РаспознатьФайл(ФайлСсылка, СведенияОФайле.ПараметрыРаспознавания, ОписаниеОшибки, РаспознанныйТекст, 
			Неопределено, РаспознатьНемедленно);
	КонецЕсли;
	
	Если СведенияОФайле.ДополнительныеПараметры <> Неопределено 
		И ТипЗнч(СведенияОФайле.ДополнительныеПараметры) = Тип("Структура")
		И СведенияОФайле.ДополнительныеПараметры.Свойство("Сканирование") 
		И СведенияОФайле.ДополнительныеПараметры.Сканирование Тогда
	
		ПротоколированиеРаботыСотрудников.ЗаписатьСканирование(ФайлСсылка);
	КонецЕсли;
	
	Если СведенияОФайле.ДополнительныеПараметры <> Неопределено 
		И ТипЗнч(СведенияОФайле.ДополнительныеПараметры) = Тип("Структура")
		И СведенияОФайле.ДополнительныеПараметры.Свойство("РольФайла") 
		И ЗначениеЗаполнено(СведенияОФайле.ДополнительныеПараметры.РольФайла) Тогда
		
		РольФайла = СведенияОФайле.ДополнительныеПараметры.РольФайла;
		
		РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(ФайлСсылка, 
			РольФайла);
			
	КонецЕсли;

	// тут запишем порядок
	Если (ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла)
		Или ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ШаблоныДокументов"))
		И Не СведенияОФайле.Свойство("ДобавлениеРегШтампа") Тогда
		
		Порядок = 0;
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) Тогда	
			Порядок = МаксимальныйПорядокФайла(ВладелецФайла, РольФайла);
		КонецЕсли;	
		
		Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ШаблоныДокументов") Тогда
			Порядок = МаксимальныйПорядокФайлаБезРоли(ВладелецФайла);
		КонецЕсли;	
			
		Порядок = Порядок + 1;
		ЗаписатьПорядокФайла(ФайлСсылка, Порядок);
		
	КонецЕсли;	 	
	
	РаботаСФайламиПереопределяемый.ПриСозданииФайла(ФайлСсылка);
	
	Возврат ФайлСсылка;
	
КонецФункции

// Вернет ссылку - тут же создаст, если ее нет и можно создать на сервере.
//  Если нет, и создать можно только на клиенте - поставит ТребуетсяЗаполнитьВизуализацию в Истина
// Параметры:
//	Файл - СправочникССылка.Файлы 
//	ИдентификаторФормы - УникальныйИдентификатор 
//	ТребуетсяЗаполнитьВизуализацию - Булево - возвращаемое значение
//	ДокументПодписан - Булево - документ подписан ПЭП
//
// Возвращаемое значение:
//   СправочникССылка.Файлы - файл визуализации
Функция ПолучитьФайлВизуализации(
	Знач Файл, 
	Знач ИдентификаторФормы, 
	ТребуетсяЗаполнитьВизуализацию,
	ДокументПодписан = Ложь) Экспорт
	
	ТребуетсяЗаполнитьВизуализацию = Ложь;
	
	Если Не ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП") Тогда
		Возврат Неопределено;
	КонецЕсли;	  
	
	Использовать1СШтамп = ВизуализацияПовтИсп.Использовать1СШтамп();
	
	Если Не ФайловыеФункцииПовтИсп.ИспользоватьImageMagickДляРаспознаванияPDF() И Не Использовать1СШтамп Тогда
		Возврат Неопределено;
	КонецЕсли;	
		
	РеквФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, 
		"ВладелецФайла, ПодписанЭП, ТекущаяВерсияРасширение, ПометкаУдаления, ТекущаяВерсия");
	ВладелецФайла = РеквФайла.ВладелецФайла;
	Расширение = РеквФайла.ТекущаяВерсияРасширение;
	
	Если РеквФайла.ПометкаУдаления Тогда // для помеченных на удаление не делаем визуализацию
		Возврат Неопределено;
	КонецЕсли;	
	
	Если Не РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(Расширение) 
		Или Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НРег(Расширение) = "pdf" Тогда
		ФайлРегистрационныйШтамп = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
			ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации);
	КонецЕсли;	
	
	Если Делопроизводство.ФайлЯвляетсяОригиналом(Файл)
		И Не ЗначениеЗаполнено(ФайлРегистрационныйШтамп) Тогда // Для скан копий не делаем визуализацию (и для помеченных на удаление файлов).
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлВизуализация = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
		
	Если ЗначениеЗаполнено(ФайлВизуализация) Тогда	
		Возврат ФайлВизуализация;
	КонецЕсли;	
	
	Если НРег(Расширение) = "doc" Или НРег(Расширение) = "xls" Тогда
		ТребуетсяЗаполнитьВизуализацию = Истина;
		Возврат Неопределено; // не создана визуализация, сейчас создадим - на клиенте
	КонецЕсли;
	
	// если расширение docx odt pdf - прямо тут , на сервере создадим визуализацию  и запишем в РС СлужебныеФайлыДокументов
	
	ДанныеФайла = ДанныеФайла(Файл); 
	
	ШтампыПодписейЭП = ШтампыПодписейПустая();

	Если ДанныеФайла.ПодписанЭП Тогда 
		ШтампыПодписейЭП(ШтампыПодписейЭП, ДанныеФайла.Версия, ДанныеФайла.Владелец);
	КонецЕсли;	
	
	Если ДокументПодписан Тогда
		ШтампыПодписейПЭП(ШтампыПодписейЭП, ДанныеФайла.Владелец);
	КонецЕсли;	
	
	НастройкиШтампаЭП = ПолучитьНастройкиШтампаЭП(ДанныеФайла.Владелец);
	ДанныеФайла.Вставить("НастройкиШтампаЭП", НастройкиШтампаЭП);
	
	ДанныеФайла.Вставить("ШтампыПодписейЭП", ШтампыПодписейЭП);
	
	//Если ДокументПодписан Тогда
	//	 ДанныеФайла.НастройкиШтампаЭП.Вставить("ЭтоВизуализацияПЭП", Истина);
	//КонецЕсли;	
		
	ФайлВизуализация = ПолучитьВизуализациюЭП(ДанныеФайла, ИдентификаторФормы, ТребуетсяЗаполнитьВизуализацию);
	Если Не ЗначениеЗаполнено(ФайлВизуализация) Тогда
		// была ошибка, мы ее уже показали
		Возврат Неопределено;
	КонецЕсли;	
	
	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
		ВладелецФайла, 
		Файл,
		Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП,
		ФайлВизуализация);
		
	Возврат ФайлВизуализация;
	
КонецФункции

// Получает синтетический рабочий каталог папки на диске (он может прийти от родительской папки)
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
//
// Возвращаемое значение:
//   Строка  - рабочий каталог
Функция РабочийКаталогПапки(СсылкаПапки) Экспорт
	
	Если ТипЗнч(СсылкаПапки) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочийКаталог = "";
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();	
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Папка", СсылкаПапки);
	СтруктураОтбора.Вставить("Идентификатор", Идентификатор);
	
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.РабочиеКаталогиФайловКомпьютера.Получить(СтруктураОтбора);
	
	// Получить путь из регистра
	РабочийКаталог = СтруктураРесурсов.Путь;
	
	Если НЕ ПустаяСтрока(РабочийКаталог) Тогда
		// Добавляем слэш в конце, если его нет
		РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог, ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
	КонецЕсли;
	
	Возврат РабочийКаталог;
	
КонецФункции

// Возвращает количество занятых файлов
// Параметры
// ВладельцыФайлов - ЛюбаяСсылка, Массив ссылок - владельцы файлов
// Редактирует - СправочникССылка.Пользователи - ссылка на пользователя, занявшего файл
// 
// Возвращаемое значение:
//   Число  - число занятых файлов
Функция ПолучитьКоличествоЗанятыхФайлов(ВладельцыФайлов = Неопределено, Редактирует = Неопределено,
	ВыходИзПрограммы = Ложь, СотрудникиТекущегоПользователя = Неопределено, ФайлыДляПроверки = Неопределено) Экспорт
	
	Возврат РаботаСФайлами.ПолучитьКоличествоЗанятыхФайлов(
		ВладельцыФайлов,
		Редактирует,
		ВыходИзПрограммы,
		СотрудникиТекущегоПользователя,
		ФайлыДляПроверки);
	
КонецФункции

// Копирует файлы при переносе из одного списка приложенных файлов в другой
// Параметры
// ФайлМассив - массив ссылок на файлы или СправочникСсылка.Файлы
// ВладелецФайла - ЛюбаяСсылка - владелец файла
// СозданПоШаблону - Булево - признак копирования файла по шаблону.
// ВернутьМассив - Булево.
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - Скопированный файл, если параметр ВернутьМассив "Ложь".
//   Массив из СправочникСсылка.Файлы - Скопированыне файлы, если параметр ВернутьМассив "Истина".
//
Функция СкопироватьФайлВПриложенных(ФайлМассив, ВладелецФайла, СозданПоШаблону = Ложь, ВернутьМассив = Ложь) Экспорт
	
	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;
	
	СкопированныеФайлы = Новый Массив;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		Источник = ФайлСсылка;
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.Комментарий = Источник.Описание;
		СведенияОФайле.ИмяБезРасширения = Источник.ПолноеНаименование;
		СведенияОФайле.ХранитьВерсии = Источник.ХранитьВерсии;
		
		Если СозданПоШаблону Тогда 
			СведенияОФайле.ШаблонОснование = Источник;
		КонецЕсли;
		
		Приемник = СоздатьФайл(ВладелецФайла, СведенияОФайле);
		СкопированныеФайлы.Добавить(Приемник);
		
		Если Не Источник.ТекущаяВерсия.Пустая() Тогда
					
			ХранилищеФайла = Неопределено;
			Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
				ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
			КонецЕсли;	
			
			ТекстХранилище = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(Источник.ТекущаяВерсия);
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.ИмяБезРасширения = Приемник.Наименование;
			СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
			СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
			СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
			СведенияОФайле.АдресВременногоХранилищаТекста = ТекстХранилище;
			СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
			СведенияОФайле.ВремяИзмененияУниверсальное = 
				РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(ТекущаяДата());
				
			Версия = СоздатьВерсию(Приемник, СведенияОФайле);
			ОбновитьВерсиюВФайле(Приемник, Версия, ТекстХранилище);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВернутьМассив Тогда
	
		Результат = СкопированныеФайлы;
		
	Иначе
		
		Результат = Приемник;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает адрес файла во временном хранилище (независимо от способа хранения файла - в томах или в базе)
// Параметры
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Строка - навигационная ссылка (адрес во временном хранилище)
Функция ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, 
	ИдентификаторФормы = Неопределено) Экспорт
	
	Адрес = "";
	
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияСсылка, 
		"ТипХраненияФайла, Том, ПутьКФайлу, Владелец, ПолноеНаименование, Расширение");
	
	ТипХраненияФайла = РеквизитыВерсии.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ РеквизитыВерсии.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(РеквизитыВерсии.Том) + РеквизитыВерсии.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// запись в журнал регистрации
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), РеквизитыВерсии.Владелец);
				ЗаписьЖурналаРегистрации("Открытие файла", УровеньЖурналаРегистрации.Ошибка, 
					Метаданные.Справочники.Файлы, РеквизитыВерсии.Владелец, СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					РеквизитыВерсии.ПолноеНаименование + "." + РеквизитыВерсии.Расширение);
					
			КонецПопытки;
		КонецЕсли;
	Иначе
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанные = ХранилищеФайла.Получить();
		
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции // ПолучитьНавигационнуюСсылкуВоВременномХранилище()

// Получает занятые файлы у владельца
Функция ПолучитьПриложенныеФайлы(ВладелецФайла, ТекущийПользователь) Экспорт 
	
	МассивФайлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Редактирует КАК Редактирует
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.Редактирует = &Редактирует";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("Редактирует", ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивФайлов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

// Читает кодировку версии файла
//
// Параметры:
//  ВерсияСсылка - СправочникСсылка.ВерсииФайлов - ссылка на версию файла.
//  Расширение  - Строка
//
// Возвращаемое значение:
//   Строка - Строка кодировки
Функция ПолучитьКодировкуВерсииФайла(ВерсияСсылка, Расширение = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.КодировкиФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл = ВерсияСсылка;
	МенеджерЗаписи.Прочитать();
	
	Если ЗначениеЗаполнено(МенеджерЗаписи.Кодировка) Тогда
		Возврат МенеджерЗаписи.Кодировка;
	КонецЕсли;
		
	Если НРег(Расширение) = "txt" Тогда
		
		Кодировка = РегистрыСведений.КодировкиФайлов.ОпределитьКодировкуФайла(ВерсияСсылка, Расширение);
		Если ЗначениеЗаполнено(Кодировка) Тогда
			ЗаписатьКодировкуВерсииФайла(ВерсияСсылка, Кодировка);
		КонецЕсли;	
		Возврат Кодировка;
		
	КонецЕсли;	
		
		
	Возврат "";	
	
КонецФункции

// Записывает кодировку версии файла
//
// Параметры:
//  ВерсияСсылка - СправочникСсылка.ВерсииФайлов - ссылка на версию файла.
//  Кодировка - Строка - строка кодировки
//
Процедура ЗаписатьКодировкуВерсииФайла(ВерсияСсылка, Кодировка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.КодировкиФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл = ВерсияСсылка;
	МенеджерЗаписи.Кодировка = Кодировка;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Параметры
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура ОсвободитьФайлПоСсылке(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(Ссылка, , УникальныйИдентификатор);
	
	ФайлОбъект = Ссылка.ПолучитьОбъект();
	
	ФайлОбъект.Редактирует = Неопределено;
	ФайлОбъект.ДатаЗаема = Дата("00010101000000");
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
	БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ОсвобождениеФайла);
	
КонецПроцедуры

// Найти все правила размещения для тома  - с подробным выводом колонок с информацией
Функция НайтиПравилаРазмещенияДляТомаПодробно(ГруппаТомов) Экспорт
	
	ПравилаОтобранные = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаРазмещенияФайловВТомах.Ссылка КАК Ссылка,
		|	ПравилаРазмещенияФайловВТомах.Комментарий,
		|	ПравилаРазмещенияФайловВТомах.Ответственный,
		|	ПравилаРазмещенияФайловВТомах.ПредставлениеУсловия
		|ИЗ
		|	Справочник.ПравилаРазмещенияФайловВТомах КАК ПравилаРазмещенияФайловВТомах
		|ГДЕ
		|	ПравилаРазмещенияФайловВТомах.ПометкаУдаления = ЛОЖЬ
		|	И ПравилаРазмещенияФайловВТомах.ГруппаТомов = &ГруппаТомов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПравилаРазмещенияФайловВТомах.Порядок";
		
	Запрос.УстановитьПараметр("ГруппаТомов", ГруппаТомов);

	ТаблицаПравилВыгруженная = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаПравилВыгруженная;
	
КонецФункции

// Возвращает количество файлов в томе
// 
//  Параметры:
// Том - СправочникСсылка.ТомаХраненияФайлов
//
// Возвращаемое значение:
//   Число - число файлов в томах
Функция ПодсчитатьКоличествоФайловВТоме(Том) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(КОЛИЧЕСТВО(Версии.Ссылка), 0) КАК КоличествоФайлов
	               |ИЗ
	               |	Справочник.ВерсииФайлов КАК Версии
	               |ГДЕ
	               |	Версии.Том = &Том";
				   
	Запрос.УстановитьПараметр("Том", Том);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Число(Выборка.КоличествоФайлов);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Конструктор таблицы, содержащей лишние файлы в томах.
// 
// Возвращаемое значение:
//   ТаблицаЗначений:
//      * Имя                - Строка
//      * Файл               - Строка
//      * ИмяБезРасширения   - Строка
//      * ПолноеИмя          - Строка
//      * Путь               - Строка
//      * Том                - Строка
//      * Расширение         - Строка
//      * СтатусПроверки     - Строка - "ОК", "ЛишнийФайлВТоме", "НетФайлаВТоме"
//      * Количество         - Строка
//      * Отредактировал     - Строка
//      * ДатаРедактирования - Строка
//
Функция ЛишниеФайлыНаДиске() Экспорт
	ТаблицаФайловНаДиске = Новый ТаблицаЗначений;
	
	ТаблицаФайловНаДиске.Колонки.Добавить("Имя");
	ТаблицаФайловНаДиске.Колонки.Добавить("Файл");
	ТаблицаФайловНаДиске.Колонки.Добавить("ИмяБезРасширения");
	ТаблицаФайловНаДиске.Колонки.Добавить("ПолноеИмя");
	ТаблицаФайловНаДиске.Колонки.Добавить("Путь");
	ТаблицаФайловНаДиске.Колонки.Добавить("Том");
	ТаблицаФайловНаДиске.Колонки.Добавить("Расширение");
	ТаблицаФайловНаДиске.Колонки.Добавить("СтатусПроверки");
	ТаблицаФайловНаДиске.Колонки.Добавить("Количество");
	ТаблицаФайловНаДиске.Колонки.Добавить("Отредактировал");
	ТаблицаФайловНаДиске.Колонки.Добавить("ДатаРедактирования");
	ТаблицаФайловНаДиске.Колонки.Добавить("Ссылка");

	ТаблицаФайловНаДиске.Индексы.Добавить("ПолноеИмя");
	
	Возврат ТаблицаФайловНаДиске;
КонецФункции

// Параметры:
//   ТаблицаФайловНаДиске - см. РаботаСФайламиВТомахСлужебный.ЛишниеФайлыНаДиске
//   Том                  - СправочникСсылка.ТомаХраненияФайлов - ссылка на том.
//
Процедура ЗаполнитьЛишниеФайлы(ТаблицаФайловНаДиске, Том) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
		|	ВерсииФайлов.Расширение КАК Расширение,
		|	ВерсииФайлов.ПолноеНаименование КАК Наименование,
		|	ВерсииФайлов.Представление КАК Представление,
		|	ВерсииФайлов.Том КАК Том,
		|	ВерсииФайлов.Ссылка КАК Ссылка,
		|	ВерсииФайлов.ДатаМодификацииФайла КАК ДатаМодификацииФайла,
		|	ВерсииФайлов.Автор КАК Отредактировал,
		|	ВерсииФайлов.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)
		|	И ВерсииФайлов.Том = &Том";
		
	Запрос.УстановитьПараметр("Том", Том);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВерсияСсылка = Выборка.Ссылка;
		
		Если ЗначениеЗаполнено(Выборка.ПутьКФайлу) И ЗначениеЗаполнено(Выборка.Том) Тогда
			
			ПолныйПутьФайла = ФайловыеФункцииСлужебный.ПолныйПутьТома(Выборка.Том) + Выборка.ПутьКФайлу; 
			Если Прав(ПолныйПутьФайла, 1) = "." Тогда
				ПолныйПутьФайла = Лев(ПолныйПутьФайла, СтрДлина(ПолныйПутьФайла) - 1);
			КонецЕсли;	
			
			СуществующийФайл = ТаблицаФайловНаДиске.НайтиСтроки(Новый Структура("ПолноеИмя",ПолныйПутьФайла));
			Если СуществующийФайл.Количество() = 0 Тогда
				
				НесуществующийФайл = ТаблицаФайловНаДиске.Добавить();  
				
				НесуществующийФайл.СтатусПроверки = ?(Выборка.ПометкаУдаления, "ОК", "НетФайлаВТоме");
				
				НесуществующийФайл.Файл = ВерсияСсылка;
				НесуществующийФайл.Ссылка = ВерсияСсылка;
				НесуществующийФайл.ПолноеИмя = ПолныйПутьФайла;
				НесуществующийФайл.Расширение = ВерсияСсылка.Расширение;
				НесуществующийФайл.Имя = ВерсияСсылка.Наименование;
				НесуществующийФайл.Том = Том;
				НесуществующийФайл.Отредактировал = Выборка.Отредактировал;
				НесуществующийФайл.ДатаРедактирования = Выборка.ДатаМодификацииФайла;
				НесуществующийФайл.Количество = 1;
				
			Иначе	
				СуществующийФайл[0].Файл = ВерсияСсылка;
				СуществующийФайл[0].СтатусПроверки = "ОК";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Есть шаблоны имени по роли.
// 
// Параметры:
//  РольФайла Роль файла
// 
// Возвращаемое значение:
//  
Функция ЕстьШаблоныИмениПоРоли(РольФайла) Экспорт
	
	ТипОбъекта = Перечисления.ТипыОбъектовШаблоновИмениФайла.ДокументыПредприятия;
	Шаблон = ШаблонИмениПоИзмерениям(ТипОбъекта, , РольФайла);
	Возврат ЗначениеЗаполнено(Шаблон);
	
КонецФункции

// Заменить роль файла, также указав порядок. Именно если файл в документе.
// 
// Параметры:
//  Файл  - СправочникССылка.Файлы
//  НоваяРоль - СправочникССылка.РолиФайлов
Процедура ЗаменитьРольФайла(Файл, НоваяРоль) Экспорт
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");    
	
	ТекРоли = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(
		Файл);
		
	Если ТекРоли.Количество() <> 0 Тогда
		ПрежняяРольФайла = ТекРоли[0];
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПрежняяРольФайла) И ПрежняяРольФайла <>  НоваяРоль Тогда
		ПроверитьВозможностьУдаленияФайлаИзРоли(ВладелецФайла, Файл, ПрежняяРольФайла);
	КонецЕсли;	
	
	ПроверитьВозможностьДобавленияФайлаВРоль(ВладелецФайла, НоваяРоль);
	
	МассивРоли = Новый Массив;
	МассивРоли.Добавить(НоваяРоль);

	РегистрыСведений.РолиФайловДокументов.ЗаменитьРолиФайла(Файл, МассивРоли);	
	
	// запишем последним по порядку.
	Порядок = РаботаСФайламиВызовСервера.МаксимальныйПорядокФайла(ВладелецФайла, НоваяРоль);
	Порядок = Порядок + 1;
	РаботаСФайламиВызовСервера.ЗаписатьПорядокФайла(Файл, Порядок);
	
КонецПроцедуры

// Помечает / снимает пометку удаления у писем в папке.
//
Процедура ПометитьНаУдалениеПисьмаВПапке(Папка, ПометкаУдаления) Экспорт 
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяПочта.Ссылка
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.Ссылка.Папка = &Папка
		|	И ЭлектроннаяПочта.Ссылка.ПометкаУдаления = &ПометкаУдаления");
	Запрос.УстановитьПараметр("Папка", Папка);
	Запрос.УстановитьПараметр("ПометкаУдаления", Не ПометкаУдаления);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПисьмоОбъект.Заблокировать();
		ПисьмоОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Есть ли дублирующийся элемент в условном оформлении списка
// Параметры
// Элементы - массив элементов условного оформления списка
// ЭлементПоиска - элемент условного оформления списка
//
// Возвращаемое значение:
//   Булево - есть дублирующийся элемент
Функция ЕстьДублирующийсяЭлемент(Элементы, ЭлементПоиска) Экспорт
	
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент <> ЭлементПоиска Тогда
			
			Если Элемент.Оформление.Элементы.Количество() <> ЭлементПоиска.Оформление.Элементы.Количество() Тогда
				Продолжить;
			КонецЕсли;	
			
			НайденОтличающийсяЭлемент = Ложь;
			
			// Обходим все элементы оформления - если есть хоть один отличающийся - делаем Продолжить;
			ЧислоЭлементов = Элемент.Оформление.Элементы.Количество();
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				Элемент1 = Элемент.Оформление.Элементы[Индекс];
				Элемент2 = ЭлементПоиска.Оформление.Элементы[Индекс];
				
				Если Элемент1.Использование И Элемент2.Использование Тогда
					Если Элемент1.Параметр <> Элемент2.Параметр ИЛИ Элемент1.Значение <> Элемент2.Значение Тогда
						НайденОтличающийсяЭлемент = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			
			Если НайденОтличающийсяЭлемент Тогда
				Продолжить;
			КонецЕсли;	
			
			Если Элемент.Отбор.Элементы.Количество() <> ЭлементПоиска.Отбор.Элементы.Количество() Тогда
				Продолжить;
			КонецЕсли;	
			
			// Обходим все элементы отбора - если есть хоть один отличающийся - делаем Продолжить;
			ЧислоЭлементов = Элемент.Отбор.Элементы.Количество();
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				Элемент1 = Элемент.Отбор.Элементы[Индекс];
				Элемент2 = ЭлементПоиска.Отбор.Элементы[Индекс];
				
				Если Элемент1.Использование И Элемент2.Использование Тогда
				
					Если ТипЗнч(Элемент1) = Тип("ЭлементОтбораКомпоновкиДанных") И
						ТипЗнч(Элемент2) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
						Если Элемент1.ВидСравнения <> Элемент2.ВидСравнения
							ИЛИ Элемент1.ЛевоеЗначение <> Элемент2.ЛевоеЗначение
							ИЛИ Элемент1.ПравоеЗначение <> Элемент2.ПравоеЗначение Тогда
							
							НайденОтличающийсяЭлемент = Истина;
							Прервать;
							
						КонецЕсли;
					КонецЕсли;
					
					Если ТипЗнч(Элемент1) <> ТипЗнч(Элемент2) Тогда
						НайденОтличающийсяЭлемент = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденОтличающийсяЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Поля.Элементы.Количество() <> ЭлементПоиска.Поля.Элементы.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			// Обходим все элементы Поля - если есть хоть один отличающийся - делаем Продолжить;
			ЧислоЭлементов = Элемент.Поля.Элементы.Количество();
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				Элемент1 = Элемент.Поля.Элементы[Индекс];
				Элемент2 = ЭлементПоиска.Поля.Элементы[Индекс];
				
				Если Элемент1.Использование И Элемент2.Использование Тогда
					Если Элемент1.Поле <> Элемент2.Поле Тогда
						НайденОтличающийсяЭлемент = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденОтличающийсяЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			// Обошли все элементы оформления и отбора - они все одинаковы - это дубль
			Возврат Истина;	
			
		КонецЕсли;	
	КонецЦикла;	
		
		
	Возврат Ложь;	
	
КонецФункции	

// Получает файлы документа и ИзвлеченныйТекст+ДанныеФайла (если файл doc docx odt только один).
// 
// Параметры:
//  ВладелецФайла  - ОпределяемыйТип.ВладелецФайлов
//  УникальныйИдентификатор  - УникальныйИдентификатор
//  МассивФайлов - Массив
//  ИзвлеченныйТекст  - Строка
//  ДанныеФайла - Структура
//
Процедура ПолучитьСписокФайловИТекст(ВладелецФайла, УникальныйИдентификатор,
		МассивФайлов, ИзвлеченныйТекст, ДанныеФайла) Экспорт
	
	ДанныеФайла = Неопределено;
	МассивФайлов = ПолучитьПриложенныеФайлыРедактора(ВладелецФайла);
	
	Если МассивФайлов.Количество() = 1 Тогда
		
		РеквизитыФайла = МассивФайлов[0];
		ИзвлеченныйТекст = "";
		
		Если ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(РеквизитыФайла.Расширение) Тогда
			
			ИзвлеченныйТекст = РегистрыСведений.ТаймлистДанныеРаботыСервиса.Данные(РеквизитыФайла.ТекущаяВерсия,
				"СледующиеШаги").СледующиеШаги;
			
			ПунктыПротокола = СтрРазделить(ИзвлеченныйТекст, ";");
			ПунктыДляОтображения = Новый Массив;
			НомерПункта = 1;
			Для Каждого Пункт Из ПунктыПротокола  Цикл
				ПунктыДляОтображения.Добавить(СтрШаблон("%1. %2;", НомерПункта, Пункт));
				НомерПункта = НомерПункта + 1;
			КонецЦикла;
			
			ИзвлеченныйТекст = СтрСоединить(ПунктыДляОтображения, Символы.ПС);
			
			Возврат;
			
		Иначе
			
			ИзвлеченныйТекстАргумент = "";
			СтатусИзвлеченияТекста = Неопределено;
			РегистрыСведений.ТекстыВерсийФайлов.ПолучитьИзвлеченныйТекстИСтатус(РеквизитыФайла.ТекущаяВерсия,
				ИзвлеченныйТекстАргумент, СтатусИзвлеченияТекста);
			
			Если СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен Тогда
				ИзвлеченныйТекст = ИзвлеченныйТекстАргумент;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеФайла = ДанныеФайлаДляОткрытия(РеквизитыФайла.Ссылка,,УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает ИзвлеченныйТекст файла.
// 
// Параметры:
//  Файл - СправочникССылка.Файлы
// 
// Возвращаемое значение:
//  Строка
Функция ПолучитьТекстФайла(Файл) Экспорт
	
	ТекущаяВерсияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
	
	РеквВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяВерсияСсылка, 
		"ТипХраненияФайла");
	
	ИзвлеченныйТекстАргумент = "";
	СтатусИзвлеченияТекста = Неопределено;
	РегистрыСведений.ТекстыВерсийФайлов.ПолучитьИзвлеченныйТекстИСтатус(ТекущаяВерсияСсылка, 
		ИзвлеченныйТекстАргумент, СтатусИзвлеченияТекста);
	
	Если СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен Тогда
		ТекстФайла = ИзвлеченныйТекстАргумент;
		Если ЗначениеЗаполнено(ТекстФайла) Тогда
			Возврат ТекстФайла;
		КонецЕсли;	
	КонецЕсли;	
	
	// извлечем текст тут же.
	
	ИмяФайлаСПутем = ПолучитьИмяФайлаСПутемКДвоичнымДанным(ТекущаяВерсияСсылка);
	
	Отказ = Ложь;
	ТекстФайла = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекст(ИмяФайлаСПутем, Отказ);
	
	Если РеквВерсии.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		УдалитьФайлы(ИмяФайлаСПутем);
	КонецЕсли;
	
	Возврат ТекстФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Распознавание

// Возвращает ИспользоватьРаспознавание
Функция ПолучитьИспользоватьРаспознавание() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьРаспознавание = Константы.ИспользоватьРаспознавание.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ИспользоватьРаспознавание;
КонецФункции

// Устнавливает значение настройке ИспользоватьРаспознавание.
//
// Параметры:
//  ИспользоватьРаспознавание - Булево
//
Процедура УстановитьИспользоватьРаспознавание(ИспользоватьРаспознавание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьРаспознавание.Установить(ИспользоватьРаспознавание);
	
КонецПроцедуры

// Возвращает значение настройки ПрограммаРаспознавания.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ПрограммыРаспознавания
//
Функция ПрограммаРаспознавания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ПрограммаРаспознавания.Получить();
	
КонецФункции

// Заполняет настройку ПрограммыРаспознавания, указанным значением.
//
// Параметры:
//  ПрограммаРаспознавания - ПеречислениеСсылка.ПрограммыРаспознавания
//
Процедура УстановитьПрограммуРаспознавания(ПрограммаРаспознавания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ПрограммаРаспознавания.Установить(ПрограммаРаспознавания);
	
КонецПроцедуры

// Возвращает доступность распознавания по запросу для текущего пользователя.
//
// Возвращаемое значение:
//  Булево
//
Функция ДоступноРаспознаваниеПоЗапросу() Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат РольДоступна("РаспознаваниеПоЗапросу")
		Или РольДоступна("ПолныеПрава")
		Или РольДоступна("ВыполняющиеПотоковоеСканирование");
	
КонецФункции

// Обновляет значение константы ИспользованиеРаспознаванияПриПомощиCuneiForm.
//
Процедура ОбновитьИспользованиеРаспознаванияПриПомощиCuneiForm() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборКонстант = Константы.СоздатьНабор("ИспользоватьРаспознавание, ПрограммаРаспознавания");
	НаборКонстант.Прочитать();
	
	Константы.ИспользуетсяРаспознаваниеПриПомощиCuneiForm.Установить(
		НаборКонстант.ИспользоватьРаспознавание
		И НаборКонстант.ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.CuneiForm);
	
КонецПроцедуры

// Обновляет значение константы ИспользуетсяРаспознаваниеПриПомощиСервиса.
//
Процедура ОбновитьИспользуетсяРаспознаваниеПриПомощиСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборКонстант = Константы.СоздатьНабор("ИспользоватьРаспознавание, ПрограммаРаспознавания");
	НаборКонстант.Прочитать();
	
	Константы.ИспользуетсяРаспознаваниеПриПомощиСервиса.Установить(
		НаборКонстант.ИспользоватьРаспознавание
		И НаборКонстант.ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания);
	
КонецПроцедуры

// Возвращает язык распознавания
Функция ПолучитьЯзыкРаспознавания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЯзыкРаспознавания = Константы.ЯзыкРаспознавания.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЯзыкРаспознавания;
	
КонецФункции

// Устанавливает язык распознавания
Процедура УстановитьЯзыкРаспознавания(ЯзыкРаспознавания) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Константы.ЯзыкРаспознавания.Установить(ЯзыкРаспознавания);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

// Возвращает язык распознавания по умолчанию для CuneiForm
//
// Возвращаемое значение:
//  Строка
//
Функция ЯзыкРаспознаванияCuneiFormПоУмолчанию() Экспорт
	
	Возврат "7"; // русско-английский
	
КонецФункции

// Возвращает язык распознавания по умолчанию для сервиса распознавания.
//
// Возвращаемое значение:
//  Строка
//
Функция ЯзыкРаспознаванияВСервисеПоУмолчанию() Экспорт
	
	Возврат "7"; // Русский; Английский
	
КонецФункции

// Возвращает языки распознавния программы.
//
// Параметры:
//  ПрограммаРаспознавания - ПеречисленниеСсылка.ПрограммыРаспознавания
//
// Возвращаемое значение:
//  ТаблицаЗначений
//    * Language - Строка
//    * Name - Строка
//
Функция ЯзыкиРаспознаванияПрограммы(ПрограммаРаспознавания) Экспорт
	
	Если ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.CuneiForm Тогда
		Макет = Справочники.Файлы.ПолучитьМакет("ЯзыкиРаспознаванияCuneiForm");
	Иначе
		Макет = Справочники.Файлы.ПолучитьМакет("ЯзыкиСервисаРаспознавания");
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	
КонецФункции

// Возвращает язык распознавания программы по умолчанию.
//
// Параметры:
//  ПрограммаРаспознавания - ПеречисленниеСсылка.ПрограммыРаспознавания
//
// Возвращаемое значение:
//  Строка
//
Функция ЯзыкРаспознаванияПрограммыПоУмолчанию(ПрограммаРаспознавания) Экспорт
	
	Если ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.CuneiForm Тогда
		Возврат ЯзыкРаспознаванияCuneiFormПоУмолчанию();
	ИначеЕсли ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания Тогда
		Возврат ЯзыкРаспознаванияВСервисеПоУмолчанию();
	КонецЕсли;
	
КонецФункции

// Возвращает количество языков распознвания для указанной программы.
//
// Параметры:
//  ПрограммаРаспознавания - Перечисления.ПрограммыРаспознавания.
//
// Возвращаемое значение:
//  Число
//
Функция КоличествоЯзыковРаспознавания(ПрограммаРаспознавания) Экспорт
	
	Возврат ЯзыкиРаспознаванияПрограммы(ПрограммаРаспознавания).Количество();
	
КонецФункции

// Возвращает пользователя задания распознавания
Функция СотрудникДляЗаданияРаспознавания() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	СотрудникДляЗаданияРаспознавания = Константы.СотрудникДляЗаданияРаспознавания.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат СотрудникДляЗаданияРаспознавания;
КонецФункции

// Устанавливает пользователя задания распознавания
Процедура УстановитьСотрудникаДляЗаданияРаспознавания(Сотрудник) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Константы.СотрудникДляЗаданияРаспознавания.Установить(Сотрудник);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

// Путь к программе конвертации PDF (ImageMagick).
// 
// Возвращаемое значение:
//  Строка
Функция ПолучитьПутьКПрограммеКонвертацииPDF() Экспорт
	
	Возврат ФайловыеФункцииПовтИсп.ПутьКПрограммеКонвертацииPDF();
	
КонецФункции

// Константа ИспользоватьImageMagickДляРаспознаванияPDF.
// 
// Возвращаемое значение:
//  Булево
Функция ПолучитьИспользоватьImageMagickДляРаспознаванияPDF() Экспорт
	
	Возврат ФайловыеФункцииПовтИсп.ИспользоватьImageMagickДляРаспознаванияPDF();
	
КонецФункции

// ИспользоватьGhostscript.
// 
// Возвращаемое значение:
//  Булево
Функция ИспользоватьGhostscript() Экспорт
	
	Возврат ФайловыеФункцииПовтИсп.ИспользоватьGhostscript();
	
КонецФункции

// Возвращает СпособВставкиШтампаЭПВPDF.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СпособыВставкиШтампаЭПВPDF
Функция ПолучитьСпособВставкиШтампаЭПВPDF() Экспорт
	
	Возврат ФайловыеФункцииПовтИсп.СпособВставкиШтампаЭПВPDF();
	
КонецФункции

// Возвращает максимальное число файлов на распознавании при котором
// возможно автоматическое начало распознавания новых файлов.
//
// Возвращаемое значение:
//  Число
//
Функция ГраницаОтключенияНачалаАвтораспознаванияВСервисе() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.ГраницаОтключенияНачалаАвтораспознаванияВСервисе.Получить();
	
КонецФункции

// Сохраняет максимальное число файлов на распознавании при котором
// возможно автоматическое начало распознавания новых файлов.
//
// Параметры:
//  Граница - Число
//
Процедура УстановитьГраницуОтключенияНачалаАвтораспознаванияВСервисе(Граница) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ГраницаОтключенияНачалаАвтораспознаванияВСервисе.Установить(Граница);
	
КонецПроцедуры

// Возвращает сколько дней хранится протокол работы с сервисом распознавания.
//
// Возвращаемое значение:
//  Число
//
Функция СрокХраненияПротоколаРаботыССервисомРаспознавания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.СрокХраненияПротоколаРаботыССервисомРаспознавания.Получить();
	
КонецФункции

// Сохраняет настройку срока хранения протокола работы с сервисом.
//
// Параметры:
//  КоличествоДней - Число - количество дней.
//
Процедура УстановитьСрокХраненияПротоколаРаботыССервисомРаспознавания(КоличествоДней) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.СрокХраненияПротоколаРаботыССервисомРаспознавания.Установить(КоличествоДней);
	
КонецПроцедуры

// Устанавливает срок хранения протокола работы с сервисом в значение по умолчанию.
//
Процедура УстановитьСрокХраненияПротоколаРаботыССервисомРаспознаванияПоУмолчанию() Экспорт
	
	УстановитьСрокХраненияПротоколаРаботыССервисомРаспознавания(7); // 7 дней
	
КонецПроцедуры

// Возвращает дату, после которой созданные файлы с будут распознаваться автоматически.
// При условии, что файл полежит автоматическому распознаванию.
//
// Возвращаемое значение:
//   Дата 
//
Функция НачалоАвтоматическогоРаспознаванияФайлов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.НачалоАвтоматическогоРаспознаванияФайлов.Получить();
	
КонецФункции

// Сохраняет дату начала автоматического распознавания файлов.
//
// Параметры:
//  КоличествоДней - Число - количество дней.
//
Процедура УстановитьНачалоАвтоматическогоРаспознаванияФайлов(ДатаНачала) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.НачалоАвтоматическогоРаспознаванияФайлов.Установить(ДатаНачала);
	
КонецПроцедуры

// Возвращает пороговое количество страниц.
// Используется для уведомления пользователя по достижению баланса, равному данному пороговому значению.
//
// Возвращаемое значение:
//  Число
//
Функция ПорогБалансаСтраницСервисаРаспознавания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ПорогБалансаСтраницСервисаРаспознавания.Получить();
	
КонецФункции

// Сохраняет пороговое количество страниц.
//
// Параметры:
//  КоличествоСтраниц - Число
//
Процедура УстановитьПорогБалансаСтраницСервисаРаспознавания(КоличествоСтраниц) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ПорогБалансаСтраницСервисаРаспознавания.Установить(КоличествоСтраниц);
	
КонецПроцедуры

// Возвращает количество дней до завершения тарифа.
// Используется для преждевременного уведомления пользователя.
//
// Возвращаемое значение:
//  Число
//
Функция ПорогСрокаДействияТарифаСервисаРаспознавания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ПорогСрокаДействияТарифаСервисаРаспознавания.Получить();
	
КонецФункции

// Сохраняет количество дней до завершения тарифа.
//
// Параметры:
//  КоличествоДней - Число
//
Процедура УcтановитьПорогСрокаДействияТарифаСервисаРаспознавания(КоличествоДней) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ПорогСрокаДействияТарифаСервисаРаспознавания.Установить(КоличествоДней);
	
КонецПроцедуры

// Устанавливает язык и пользователя задания распознавания
Процедура УстановитьПараметрыРаспознаванияCuneiForm(ЯзыкРаспознавания, Сотрудник, 
		ИспользоватьImageMagickДляРаспознаванияPDF, ПутьКПрограммеКонвертацииPDF) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.СотрудникДляЗаданияРаспознавания.Установить(Сотрудник);
	Константы.ЯзыкРаспознавания.Установить(ЯзыкРаспознавания);
	Константы.ИспользоватьImageMagickДляРаспознаванияPDF.Установить(ИспользоватьImageMagickДляРаспознаванияPDF);
	Константы.ПутьКПрограммеКонвертацииPDF.Установить(ПутьКПрограммеКонвертацииPDF);
	
КонецПроцедуры

// Возвращает возможность начала автораспознавания нового файла.
//
// Параметры:
//  ДанныеФайла - Структура - см. РаботаСФайлами.ДанныеФайла
// 
// Возвращаемое значение:
//  Булево
//
Функция ВозможноНачалоАвтораспознаванияНовогоФайла(ДанныеФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПрограммаРаспознавания() = Перечисления.ПрограммыРаспознавания.CuneiForm Тогда
		
		Если ОбщегоНазначения.ЭтоLinuxСервер() Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		Возврат Истина;
	КонецЕсли;
	
	КоличествоФайлов = РегистрыСведений.ФайлыНаРаспознавании.КоличествоФайловНаРаспознавании();
	Граница = ГраницаОтключенияНачалаАвтораспознаванияВСервисе();
	
	ДатаНачалоАвтораспознавания = НачалоАвтоматическогоРаспознаванияФайлов();
	ДатаСозданияВерсии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеФайла.Версия, "ДатаСоздания");
	
	Возврат КоличествоФайлов < Граница
		И (Не ЗначениеЗаполнено(ДатаНачалоАвтораспознавания)
			Или ДатаСозданияВерсии >= ДатаНачалоАвтораспознавания);
	
КонецФункции

// Возвращает параметры распознавания в сервисе.
// Адрес сервиса, логи и пароль возвращаются только если текущий пользователь имеет полные права.
//
// Возвращаемое значение:
//  Структура
//   * РежимыРаспознавания - Соответствие - см. РегистрыСведений.РежимыРаспознаванияФайлов.РежимыРаспознавания()
//   * ЯзыкРаспознавания - Строка - язык распознавания.
//   * СотрудникДляЗаданияРаспознавания - СправочникСсылка.Сотрудники - ссылка на сотрдуника.
//   * ГраницаОтключенияНачалаАвтораспознаванияВСервисе - Число - максимальное число файлов на распознавании при котором
//                                                        возможно автоматическое начало распознавания новых файлов.
//   * СрокХраненияПротоколаРаботыССервисомРаспознавания - Число - количество дней хранения протокола работы с сервисом.
//   * НачалоАвтоматическогоРаспознаванияФайлов - Дата - дата, после которой созданные файлы с будут распознаваться автоматически.
//                                                       При условии, что файл полежит автоматическому распознаванию.
//
Функция ПараметрыРаспознаванияВСервисе() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("РежимыРаспознавания",
		РегистрыСведений.РежимыРаспознаванияФайлов.РежимыРаспознавания());
	
	Параметры.Вставить("ЯзыкРаспознавания",
		РаботаСФайламиВызовСервера.ПолучитьЯзыкРаспознавания());
	
	Параметры.Вставить("СотрудникДляЗаданияРаспознавания",
		РаботаСФайламиВызовСервера.СотрудникДляЗаданияРаспознавания());
	
	Параметры.Вставить("ГраницаОтключенияНачалаАвтораспознаванияВСервисе",
		ГраницаОтключенияНачалаАвтораспознаванияВСервисе());
	
	Параметры.Вставить("СрокХраненияПротоколаРаботыССервисомРаспознавания",
		СрокХраненияПротоколаРаботыССервисомРаспознавания());
	
	Параметры.Вставить("НачалоАвтоматическогоРаспознаванияФайлов",
		НачалоАвтоматическогоРаспознаванияФайлов());
	
	Параметры.Вставить("ПорогБалансаСтраницСервисаРаспознавания",
		ПорогБалансаСтраницСервисаРаспознавания());
	
	Параметры.Вставить("ПорогСрокаДействияТарифаСервисаРаспознавания",
		ПорогСрокаДействияТарифаСервисаРаспознавания());
	
	Возврат Параметры;
	
КонецФункции

// Записывает параметры распознавания в сервисе.
//
// Параметры:
//  Параметры - Структура - см. ПараметрыРаспознаванияВСервисе
//
Процедура УстановитьПараметрыРаспознаванияВСервисе(Параметры) Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение НСтр("ru = 'Запись параметров распознавания разрешена только пользователям с полными правами.'");
	КонецЕсли;
	
	УстановитьЯзыкРаспознавания(Параметры.ЯзыкРаспознавания);
	УстановитьСотрудникаДляЗаданияРаспознавания(Параметры.СотрудникДляЗаданияРаспознавания);
	
	РегистрыСведений.РежимыРаспознаванияФайлов.ЗаписатьРежимыРаспознаванияФайлов(
		Параметры.РежимыРаспознавания);
	
	УстановитьГраницуОтключенияНачалаАвтораспознаванияВСервисе(
		Параметры.ГраницаОтключенияНачалаАвтораспознаванияВСервисе);
	
	УстановитьСрокХраненияПротоколаРаботыССервисомРаспознавания(
		Параметры.СрокХраненияПротоколаРаботыССервисомРаспознавания);
	
	УстановитьНачалоАвтоматическогоРаспознаванияФайлов(
		Параметры.НачалоАвтоматическогоРаспознаванияФайлов);
	
	УстановитьПорогБалансаСтраницСервисаРаспознавания(
		Параметры.ПорогБалансаСтраницСервисаРаспознавания);
	
	УcтановитьПорогСрокаДействияТарифаСервисаРаспознавания(
		Параметры.ПорогСрокаДействияТарифаСервисаРаспознавания);
	
КонецПроцедуры

// Подставляет язык распознавания по умолчанию, если для текущей программы распознавания
// указан не поддерживаемый язык.
//
Процедура НормализоватьЯзыкРаспознавания() Экспорт
	
	ПрограммаРаспознавания = Константы.ПрограммаРаспознавания.Получить();
	Если ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания Тогда
		
		ЯзыкРаспознавания = ПолучитьЯзыкРаспознавания();
		
		ЯзыкиРаспознавания = ЯзыкиРаспознаванияПрограммы(
			Перечисления.ПрограммыРаспознавания.СервисРаспознавания);
		
		Если ЯзыкиРаспознавания.Найти(ЯзыкРаспознавания, "Language") = Неопределено Тогда
			ЯзыкРаспознавания = РаботаСФайламиВызовСервера.ЯзыкРаспознаванияВСервисеПоУмолчанию();
			УстановитьЯзыкРаспознавания(ЯзыкРаспознавания);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Нормализует настройки распознавания автоматической загрузки файлов.
//
Процедура НормализоватьНастройкиРаспознаванияАвтоматическойЗагрузкиФайлов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентноеЗадание = ЗагрузкаФайлов.РегламентноеЗаданиеЗагрузкаФайлов();
	Если РегламентноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрограммаРаспознавания = ПрограммаРаспознавания();
	
	ЯзыкРаспознаванияПоУмолчанию = ЯзыкРаспознаванияПрограммыПоУмолчанию(ПрограммаРаспознавания);
	
	ЯзыкиРаспознавания = ЯзыкиРаспознаванияПрограммы(ПрограммаРаспознавания());
	
	ДоступныеСтратегии = ДоступныеСтратегииРаспознаванияПрограммы(ПрограммаРаспознавания);
	
	ЗаписатьРегЗадание = Ложь;
	
	// Каждая настройка рег. задания соответствует структуре:
	//   ЗагрузкаФайлов.СоздатьРегламентноеЗаданиеЗагрузкаФайлов
	Для Каждого НастройкаЗагрузки Из РегламентноеЗадание.Параметры[0] Цикл
		
		Если ЯзыкиРаспознавания.Найти(НастройкаЗагрузки.ЯзыкРаспознавания, "Language") = Неопределено Тогда
			НастройкаЗагрузки.ЯзыкРаспознавания = ЯзыкРаспознаванияПоУмолчанию;
			ЗаписатьРегЗадание = Истина;
		КонецЕсли;
		
		Если ДоступныеСтратегии.НайтиПоЗначению(
			НастройкаЗагрузки.СтратегияРаспознавания) = Неопределено Тогда
			
			НастройкаЗагрузки.СтратегияРаспознавания = ДоступныеСтратегии[0].Значение;
			ЗаписатьРегЗадание = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаписатьРегЗадание Тогда
		РегламентноеЗадание.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает возможные стратегии распознавания для программы распознавания.
//
// Параметры:
//  ПрограммаРаспознавания - ПеречисленниеСсылка.ПрограммыРаспознавания
//
// Возвращаемое значение:
//  СписокЗначений
//
Функция ДоступныеСтратегииРаспознаванияПрограммы(ПрограммаРаспознавания) Экспорт
	
	ДоступныеСтратегии = Новый СписокЗначений;
	
	Если ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.CuneiForm Тогда
		
		ДоступныеСтратегии.Добавить(
			Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз,
			НСтр("ru = 'Поместить только в текстовый образ (рекомендуется)'"));
		
		ДоступныеСтратегии.Добавить(
			Перечисления.СтратегииРаспознаванияТекста.СоздатьНовуюВерсиюTXT,
			НСтр("ru = 'Создать новую версию в формате TXT'"));
		
		ДоступныеСтратегии.Добавить(
			Перечисления.СтратегииРаспознаванияТекста.СоздатьНовуюВерсиюHTML,
			НСтр("ru = 'Создать новую версию в формате HTML'"));
		
		ДоступныеСтратегии.Добавить(
			Перечисления.СтратегииРаспознаванияТекста.СоздатьНовыйФайлTXT,
			НСтр("ru = 'Создать новый файл в формате TXT'"));
		
		ДоступныеСтратегии.Добавить(
			Перечисления.СтратегииРаспознаванияТекста.СоздатьНовыйФайлHTML,
			НСтр("ru = 'Создать новый файл в формате HTML'"));
		
		ДоступныеСтратегии.Добавить(
			Перечисления.СтратегииРаспознаванияТекста.НеРаспознавать,
			НСтр("ru = 'Не распознавать'"));
		
	ИначеЕсли ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания Тогда
		
		ДоступныеСтратегии.Добавить(
			Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз,
			НСтр("ru = 'Поместить только в текстовый образ'"));
		
		ДоступныеСтратегии.Добавить(
			Перечисления.СтратегииРаспознаванияТекста.НеРаспознавать,
			НСтр("ru = 'Не распознавать'"));
		
	КонецЕсли;
	
	Возврат ДоступныеСтратегии;
	
КонецФункции

// Возвращает стратегию распознавания файлов для владельца.
//
// Параметры:
//  Владелец - СправочникСсылка.ИдентификаторыОбъектовМетаданных - ИОМ владельца.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтратегииРаспознаванияТекста
//
Функция СтратегияРаспознаванияФайловВладельца(Владелец) Экспорт
	
	СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПустаяСсылка();
	
	ПрограммаРаспознавания = ПрограммаРаспознавания();
	
	Если ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.CuneiForm Тогда
		
		СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз;
		
	ИначеЕсли ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания Тогда
		
		РежимРаспознавания = 
			РегистрыСведений.РежимыРаспознаванияФайлов.РежимРаспознаванияФайловВладельца(Владелец);
		
		Если РежимРаспознавания = Перечисления.ВариантыРежимовРаспознаванияФайлов.Автоматический Тогда
			СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз;
		Иначе
			СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.НеРаспознавать;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтратегияРаспознавания;
	
КонецФункции

// Возвращает статус распознавания по умолчанию для файлов владельца.
//
// Параметры:
//  Владелец - СправочникСсылка.ИдентификаторыОбъектовМетаданных - ИОМ владельца.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыРаспознаванияТекста
//
Функция СтатусРаспознаванияПоУмолчаниюДляФайловВладельца(Владелец) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусРаспознавания = Перечисления.СтатусыРаспознаванияТекста.ПустаяСсылка();
	
	ПрограммаРаспознавания = ПрограммаРаспознавания();
	
	Если ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.CuneiForm Тогда
		
		СтатусРаспознавания = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать;
		
	Иначе
		
		РежимРаспознавания = 
			РегистрыСведений.РежимыРаспознаванияФайлов.РежимРаспознаванияФайловВладельца(Владелец);
		
		Если РежимРаспознавания = Перечисления.ВариантыРежимовРаспознаванияФайлов.Автоматический Тогда
			СтатусРаспознавания = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать;
		Иначе
			СтатусРаспознавания = Перечисления.СтатусыРаспознаванияТекста.НеНужноРаспознавать;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусРаспознавания;
	
КонецФункции

// Формирует представление настроек распознавания, например "Создать новую версию в формате TXT, Язык: Русско-английский"
Функция ПолучитьПредставлениеНастроекРаспознавания(СтратегияРаспознавания, ЯзыкРаспознавания) Экспорт
	Представление = "";
	
	Если СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз Тогда
		Представление = НСтр("ru = 'Поместить только в текстовый образ'");
	ИначеЕсли СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовуюВерсиюHTML Тогда
		Представление = НСтр("ru = 'Создать новую версию в формате HTML'");
	ИначеЕсли СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовуюВерсиюTXT Тогда
		Представление = НСтр("ru = 'Создать новую версию в формате TXT'");
	ИначеЕсли СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовыйФайлHTML Тогда
		Представление = НСтр("ru = 'Создать новый файл в формате HTML'");
	ИначеЕсли СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовыйФайлTXT Тогда
		Представление = НСтр("ru = 'Создать новый файл в формате TXT'");
	ИначеЕсли СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.НеРаспознавать Тогда
		Представление = НСтр("ru = 'Не распознавать'");
	КонецЕсли;
	
	Если СтратегияРаспознавания <> Перечисления.СтратегииРаспознаванияТекста.НеРаспознавать Тогда
		ЯзыкиРаспознавания = ЯзыкиРаспознаванияПрограммы(ПрограммаРаспознавания());
		СтрокаТаблицы = ЯзыкиРаспознавания.Найти(ЯзыкРаспознавания, "Language");
		Если СтрокаТаблицы <> Неопределено Тогда
			Представление = Представление + НСтр("ru = ', Язык: '") + СтрокаТаблицы.Name;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

// Формирует параметры распознавания по умолчанию
//
// Параметры:
//  Владелец - СправочникСсылка.ИдентификаторыОбъектовМетаданных - ИОМ владельца.
//
// Возвращаемое значение:
//  Структура:
//   * СтратегияРаспознавания - Перечисления.СтратегииРаспознаванияТекста
//   * ЯзыкРаспознавания - Строка
//   * РаспознатьПослеДобавления - Булево
//
Функция ПодготовитьПараметрыРаспознавания(Владелец) Экспорт
	
	РаспознатьПослеДобавления = Ложь;
	
	ПрограммаРаспознавания = ПрограммаРаспознавания();
	
	ЯзыкРаспознавания = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Распознавание", "ЯзыкРаспознавания");
	
	Если Не ЗначениеЗаполнено(ЯзыкРаспознавания) Тогда
		ЯзыкРаспознавания = ПолучитьЯзыкРаспознавания();
	КонецЕсли;
	
	ЯзыкиРаспознавания = ЯзыкиРаспознаванияПрограммы(ПрограммаРаспознавания);
	Если ЯзыкиРаспознавания.Найти(ЯзыкРаспознавания, "Language") = Неопределено Тогда
		ЯзыкРаспознавания = ЯзыкРаспознаванияПрограммыПоУмолчанию(ПрограммаРаспознавания);
	КонецЕсли;
	
	СтратегияРаспознавания = СтратегияРаспознаванияФайловВладельца(Владелец);
	
	Если ПолучитьИспользоватьРаспознавание()
		
		И СтатусРаспознаванияПоУмолчаниюДляФайловВладельца(Владелец) =
			Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать Тогда
		
		РаспознатьПослеДобавления = Истина;
	КонецЕсли;
	
	ПараметрыРаспознавания = Новый Структура("СтратегияРаспознавания, ЯзыкРаспознавания, РаспознатьПослеДобавления", 
		СтратегияРаспознавания, ЯзыкРаспознавания, РаспознатьПослеДобавления);
	
	Возврат ПараметрыРаспознавания;
	
КонецФункции

// Устанавливает стратегию распознавания
Процедура УстановитьСтратегиюРаспознавания(ФайлСсылка, СтратегияРаспознавания, УникальныйИдентификатор = Неопределено)
	
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	
	ФайлОбъект.СтратегияРаспознавания = СтратегияРаспознавания;
	
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры // ОбновитьТекстВФайле()

// получает первые 100 версий файлов, которые нуждаются в распознавании
Функция ПолучитьМассивВерсийДляРаспознавания(КоличествоФайловВПорции) Экспорт
	
	МассивВерсий = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 			
	 "ВЫБРАТЬ {КоличествоФайловВПорции}
	 |	ВерсииФайлов.Ссылка КАК Ссылка,
	 |	ТекстыВерсийФайлов.СтатусРаспознаванияТекста
	 |ИЗ
	 |	Справочник.ВерсииФайлов КАК ВерсииФайлов
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
	 |		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)	 
	 |ГДЕ
	 |	ТекстыВерсийФайлов.СтатусРаспознаванияТекста = &Статус
	 |	И ВерсииФайлов.Зашифрован = ЛОЖЬ
	 |	И ВерсииФайлов.ФайлУдален = ЛОЖЬ";
	
	Если ОбщегоНазначенияДокументооборотПовтИсп.ИсточникАктивен(
		Справочники.ИсточникиДанных.ДО21) Тогда
			
		Запрос.Текст = Запрос.Текст + 
		" И (ВерсииФайлов.Владелец.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
		|ИЛИ
		|ВерсииФайлов.Владелец.ИсточникДанных ЕСТЬ NULL)";	
			
	КонецЕсли;	
	
	Если КоличествоФайловВПорции <> 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{КоличествоФайловВПорции}", "ПЕРВЫЕ " + Формат(КоличествоФайловВПорции, "ЧГ=; ЧН="));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{КоличествоФайловВПорции}", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать);
	
	Результат = Запрос.Выполнить();
	ТаблицаВыгрузки = Результат.Выгрузить();
	
	Для Каждого Строка Из ТаблицаВыгрузки Цикл
		ВерсияСсылка = Строка.Ссылка;
		МассивВерсий.Добавить(ВерсияСсылка);
	КонецЦикла;
	
	Возврат МассивВерсий;
	
КонецФункции

// получает количество версий файлов, которые нуждаются в распознавании
Функция ПолучитьКоличествоНераспознанныхВерсий() Экспорт
	
	МассивВерсий = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 			
	 "ВЫБРАТЬ
	 |	КОЛИЧЕСТВО(*) КАК ЧислоВерсий
	 |ИЗ
	 |	Справочник.ВерсииФайлов КАК ВерсииФайлов
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
	 |		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)	 
	 |ГДЕ
	 |	ТекстыВерсийФайлов.СтатусРаспознаванияТекста = &Статус
	 |	И ВерсииФайлов.Зашифрован = ЛОЖЬ
	 |	И ВерсииФайлов.ФайлУдален = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.ЧислоВерсий;
	Возврат Результат;
	
КонецФункции

// Функция верхнего уровня - вызывается для файла например из формы ХранилищеФайлов
Функция РаспознатьФайл(ФайлСсылка, ПараметрыРаспознавания, ОписаниеОшибки, РаспознанныйТекст, 
	УникальныйИдентификатор = Неопределено, РаспознатьНемедленно = Истина) Экспорт
	
	РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка,
		"Зашифрован, ТекущаяВерсияРасширение, ПодписанЭП, ТекущаяВерсия");
	
	Если РеквизитыФайла.Зашифрован Тогда
		ОписаниеОшибки = НСтр("ru = 'Зашифрованный файл нельзя распознавать.'");
		Возврат "Ошибка";
	КонецЕсли;
	
	Расширение = РеквизитыФайла.ТекущаяВерсияРасширение;
	ИспользоватьImageMagickДляРаспознаванияPDF = ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	ИспользоватьGhostscript = ИспользоватьGhostscript();
	Если Не ИспользоватьGhostscript Тогда
		ИспользоватьImageMagickДляРаспознаванияPDF = Ложь;
	КонецЕсли;
	
	ПрограммаРаспознавания = ПрограммаРаспознавания();
	РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
		Расширение, ИспользоватьImageMagickДляРаспознаванияPDF, ПрограммаРаспознавания);
	
	Если НЕ РасширениеПоддерживается Тогда
		Возврат "Ошибка";
	КонецЕсли;
	
	Если РеквизитыФайла.ПодписанЭП Тогда
		ПараметрыРаспознавания.СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Не удалось заблокировать файл для распознавания.'");
		Возврат "Ошибка";
	КонецПопытки;
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	
	ФайлОбъект.СтратегияРаспознавания = ПараметрыРаспознавания.СтратегияРаспознавания;
	ФайлОбъект.ЯзыкРаспознавания = ПараметрыРаспознавания.ЯзыкРаспознавания;
	ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
	
	// тут надо в цикле всем версиям ставить статус
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка КАК Ссылка,
		|	ВерсииФайлов.Расширение КАК Расширение,
		|	ТекстыВерсийФайлов.СтатусРаспознаванияТекста КАК СтатусРаспознаванияТекста
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
		|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
		|ГДЕ
		|	ВерсииФайлов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ФайлСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтатусТекущейВерсии = Перечисления.СтатусыРаспознаванияТекста.ПустаяСсылка();
	
	Пока Выборка.Следующий() Цикл
		
		ВерсияСсылка = Выборка.Ссылка;
		Расширение = Выборка.Расширение;
		СтатусРаспознаванияТекста = Выборка.СтатусРаспознаванияТекста;
		
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
			Расширение, ИспользоватьImageMagickДляРаспознаванияPDF, ПрограммаРаспознавания);
		Если Не РасширениеПоддерживается Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоТекущаяВерсия = Ложь;
		Если РеквизитыФайла.ТекущаяВерсия = ВерсияСсылка Тогда
			ЭтоТекущаяВерсия = Истина;
		КонецЕсли;
		
		Если ЭтоТекущаяВерсия Тогда
			СтатусТекущейВерсии = СтатусРаспознаванияТекста;
		КонецЕсли;
		
		Если СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания
			И СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.Распознается Тогда
			
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Попытка
				РегистрыСведений.ФайлыНаРаспознавании.ЗаблокироватьФайл(ВерсияСсылка);
				ЗаблокироватьДанныеДляРедактирования(ВерсияСсылка);
			Исключение
				ОтменитьТранзакцию();
				ОписаниеОшибки = СтрШаблон(
					НСтр("ru = 'Не удалось заблокировать версию файла: %1'"),
					ПолучитьНавигационнуюСсылку(ВерсияСсылка));
				Возврат "Ошибка";
			КонецПопытки;
			
			СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать;
			
			РегистрыСведений.ТекстыВерсийФайлов.ДобавитьСтатусРаспознавания(ВерсияСсылка, СтатусРаспознаванияТекста);
			
			Если ЭтоТекущаяВерсия Тогда
				СтатусТекущейВерсии = СтатусРаспознаванияТекста;
			КонецЕсли;
			
			// Удаляем файл из РС ФайлыНаРаспознавании, если он там есть.
			Если ЗначениеЗаполнено(
				РегистрыСведений.ФайлыНаРаспознавании.ИдентификаторЗаданияРаспознавания(ВерсияСсылка)) Тогда
				
				РегистрыСведений.ФайлыНаРаспознавании.УдалитьЗапись(ВерсияСсылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	// Сразу распознаем только текущую версию версию.
	// Остальыне распознаем фоновым заданием.
	
	СтрокаВозврата = "ПоставленВОчередь";
	
	Если РаспознатьНемедленно
		И ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.CuneiForm
		И СтатусТекущейВерсии = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать Тогда
		
		ТипПлатформыСервера = ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера();
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86
			Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			
			СтрокаВозврата = РаспознатьВерсию(
				РеквизитыФайла.ТекущаяВерсия,
				ОписаниеОшибки,
				РаспознанныйТекст,
				УникальныйИдентификатор);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если РаспознатьНемедленно И ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания Тогда
		
		Если СтатусТекущейВерсии = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать
			Или СтатусТекущейВерсии = Перечисления.СтатусыРаспознаванияТекста.Распознается Тогда
			
			// Начинаем/продолжаем распознавание в сервисе текущей версии.
			СтрокаВозврата = РаспознатьВерсию(
				РеквизитыФайла.ТекущаяВерсия,
				ОписаниеОшибки,
				РаспознанныйТекст,
				УникальныйИдентификатор);
		КонецЕсли;
		
		Если СтрокаВозврата = "НачатоРаспознавание" Тогда
			
			// Если распознавание только что было начато, то сразу продолжаем его.
			
			СтрокаВозвратаПриПродолжении = РаспознатьВерсию(
				РеквизитыФайла.ТекущаяВерсия,
				ОписаниеОшибки,
				РаспознанныйТекст,
				УникальныйИдентификатор);
				
			// Если продолжение распознавания завершилось успешно или возникла ошибка, то
			// возвращаем это, иначе возвращаем что распознавание начато.
			Если СтрокаВозвратаПриПродолжении = "Успешно"
				Или СтрокаВозвратаПриПродолжении = "Ошибка" Тогда
				
				СтрокаВозврата = СтрокаВозвратаПриПродолжении;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаВозврата;
	
КонецФункции // РаспознатьФайл()

// Функция верхнего уровня - вызывается для списка выделенных файлов например из формы ХранилищеФайлов
Функция РаспознатьФайлы(Знач МассивФайлов, ПараметрыРаспознавания, УникальныйИдентификатор = Неопределено) Экспорт
	
	РаспознаноУспешно = 0;
	ВОчередиНаРаспознавание = 0;
	КоличествоОшибок = 0;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		ОписаниеОшибки = "";
		РаспознанныйТекст = "";
		СтрокаВозврата = РаспознатьФайл(ФайлСсылка, ПараметрыРаспознавания, ОписаниеОшибки, РаспознанныйТекст, УникальныйИдентификатор);
		
		Если СтрокаВозврата = "Успешно" Тогда
			РаспознаноУспешно = РаспознаноУспешно + 1;
		КонецЕсли;
		
		Если СтрокаВозврата = "ПоставленВОчередь"
			Или СтрокаВозврата = "НачатоРаспознавание"
			Или СтрокаВозврата = "РаспознаваниеВыполняется" Тогда
			
			ВОчередиНаРаспознавание = ВОчередиНаРаспознавание + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаВозвратаОбщая = Новый Массив;
	Если ЗначениеЗаполнено(РаспознаноУспешно) Тогда
		СтрокаВозвратаОбщая.Добавить(СтрШаблон(НСтр("ru = 'Распознано успешно: %1.'"), РаспознаноУспешно));
	КонецЕсли;
	Если ЗначениеЗаполнено(ВОчередиНаРаспознавание) Тогда
		СтрокаВозвратаОбщая.Добавить(СтрШаблон(НСтр("ru = 'В очереди на распознавание: %1.'"), ВОчередиНаРаспознавание));
	КонецЕсли;
	СтрокаВозвратаОбщая.Добавить(СтрШаблон(НСтр("ru = 'Всего файлов: %1.'"), МассивФайлов.Количество()));
	
	Возврат СтрСоединить(СтрокаВозвратаОбщая, Символы.ПС);
КонецФункции

// Распознать - Вызывается для версии файла
Функция РаспознатьВерсию(ВерсияСсылка, ОписаниеОшибки, РаспознанныйТекст,
	УникальныйИдентификатор = Неопределено, ЭтоРегламентноеЗадание = Ложь) Экспорт
	
	Попытка
		РегистрыСведений.ФайлыНаРаспознавании.ЗаблокироватьФайл(ВерсияСсылка);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Не удалось заблокировать файл для распознавания.'");
		Возврат "Ошибка";
	КонецПопытки;
	
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВерсияСсылка, "Владелец.СтратегияРаспознавания, Расширение");
		
	СтатусРаспознаванияТекста = РегистрыСведений.ТекстыВерсийФайлов.ПрочитатьСтатусРаспознавания(ВерсияСсылка);
	
	СтратегияРаспознавания = РеквизитыВерсии.ВладелецСтратегияРаспознавания;
	
	Если СтатусРаспознаванияТекста <> Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать
		И СтатусРаспознаванияТекста <> Перечисления.СтатусыРаспознаванияТекста.Распознается Тогда
		
		РегистрыСведений.ФайлыНаРаспознавании.РазблокироватьФайл(ВерсияСсылка);
		
		ОписаниеОшибки = НСтр("ru = 'Файл уже распознается в другом сеансе. Проверьте наличие распознанного текста и при необходимости повторите попытку.'");
		
		Возврат "Ошибка";
	КонецЕсли;
	
	РасширениеФайлаРезультата = "txt";
	Если СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовуюВерсиюHTML
		Или СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовыйФайлHTML Тогда
		
		РасширениеФайлаРезультата = "html";
	КонецЕсли;
	
	ПутьКФайлу = "";
	
	ИдентификаторЗадания = "";
	
	ПрограммаРаспознавания = ПрограммаРаспознавания();
	
	Если ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.CuneiForm Тогда
		
		НачатьТранзакцию();
		Попытка
			
			// Корректируем статус распознавания, если он не правильный.
			// И удаляем файл из РС ФайлыНаРаспознавании, если он там есть.
			// Такое могло произойти из-за того, что файл был раньше отправлен на распознавание в сервис.
			// А позже выполнено переключение на использование CuneiForm.
			Если СтатусРаспознаванияТекста <> Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать Тогда
				
				Попытка
					ЗаблокироватьДанныеДляРедактирования(ВерсияСсылка);
				Исключение
					ОтменитьТранзакцию();
					ОписаниеОшибки = НСтр("ru = 'Не удалось заблокировать файл для распознавания.'");
					РегистрыСведений.ФайлыНаРаспознавании.РазблокироватьФайл(ВерсияСсылка);
					Возврат "Ошибка";
				КонецПопытки;
				
				СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать;
				РегистрыСведений.ТекстыВерсийФайлов.ДобавитьСтатусРаспознавания(ВерсияСсылка, СтатусРаспознаванияТекста);
				
				РазблокироватьДанныеДляРедактирования(ВерсияСсылка);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(
				РегистрыСведений.ФайлыНаРаспознавании.ИдентификаторЗаданияРаспознавания(ВерсияСсылка)) Тогда
				
				РегистрыСведений.ФайлыНаРаспознавании.УдалитьЗапись(ВерсияСсылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось скорректировать статус распознавания файла:
				|%1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			РегистрыСведений.ФайлыНаРаспознавании.РазблокироватьФайл(ВерсияСсылка);
			Возврат "Ошибка";
		КонецПопытки;
		
		СтрокаВозврата = Распознавание.РаспознатьСПомощьюCuneiForm(
			ВерсияСсылка, РасширениеФайлаРезультата, ОписаниеОшибки, РаспознанныйТекст, ПутьКФайлу);
		
		РезультатРаспознавания = СтрокаВозврата;
		
	ИначеЕсли ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания
		И СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать Тогда
		
		Результат = Распознавание.НачатьРаспознаваниеСПомощьюСервиса(ВерсияСсылка);
		
		СтрокаВозврата = Результат.СтрокаВозврата;
		ОписаниеОшибки = Результат.ОписаниеОшибки;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
		РезультатРаспознавания = СтрокаВозврата;
		
	ИначеЕсли ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания
		И СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.Распознается Тогда
		
		ИдентификаторЗадания = 
			РегистрыСведений.ФайлыНаРаспознавании.ИдентификаторЗаданияРаспознавания(ВерсияСсылка);
		
		Если ИдентификаторЗадания = "" Тогда
			ОписаниеОшибки = НСтр("ru = 'Файл уже распознается в другом узле. Дождитесь завершения распознавания файла.'");
			Возврат "Ошибка";
		КонецЕсли;
		
		Результат = Распознавание.ВыполнитьРаспознаваниеСПомощьюСервиса(ВерсияСсылка, ИдентификаторЗадания);
		
		РезультатРаспознавания = Результат.СтрокаВозврата;
		Если РезультатРаспознавания = "ФайлНеРаспознан" Тогда
			СтрокаВозврата = "Ошибка";
		Иначе
			СтрокаВозврата = РезультатРаспознавания;
		КонецЕсли;
		
		ОписаниеОшибки = Результат.ОписаниеСтрокиВозврата;
		
		РаспознанныйТекст = Результат.РаспознанныйТекст;
		ПутьКФайлу = Результат.ПутьКФайлу;
		
		Если СтрокаВозврата = "РаспознаваниеВыполняется" Тогда
			РегистрыСведений.ФайлыНаРаспознавании.ОбновитьДатуПоследнейПроверкиРезультата(ВерсияСсылка);
			РегистрыСведений.ФайлыНаРаспознавании.РазблокироватьФайл(ВерсияСсылка);
			Возврат СтрокаВозврата;
		КонецЕсли;
		
	КонецЕсли;
	
	ВремяИзменения = Неопределено;
	ВремяИзмененияУниверсальное = Неопределено;
	РазмерФайла = Неопределено;
	Расширение = Неопределено;
	
	ЗаписатьРезультатРаспознаванияИВыполнитьДействия(ВерсияСсылка, РезультатРаспознавания, ПутьКФайлу,
		РаспознанныйТекст, УникальныйИдентификатор, ЭтоРегламентноеЗадание,
		ВремяИзменения, ВремяИзмененияУниверсальное, РазмерФайла, Расширение,
		ПрограммаРаспознавания, ИдентификаторЗадания, ОписаниеОшибки);
	
	РегистрыСведений.ФайлыНаРаспознавании.РазблокироватьФайл(ВерсияСсылка);
	
	Возврат СтрокаВозврата;
	
КонецФункции // РаспознатьФайл()

// получает ДанныеФайла и НавигационнуюСсылкуВерсии для распознавания
Функция ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсииДляРаспознавания(ВерсияСсылка, ИдентификаторФормы) Экспорт
	
	ДанныеФайла = ДанныеФайла(, ВерсияСсылка);
	НавигационнаяСсылкаВерсии = ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, ИдентификаторФормы);
	ЯзыкРаспознавания = ВерсияСсылка.Владелец.ЯзыкРаспознавания;
	
	СтратегияРаспознавания = ВерсияСсылка.Владелец.СтратегияРаспознавания;
	РасширениеФайлаРезультата = "txt";
	Если СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовуюВерсиюHTML ИЛИ СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовыйФайлHTML Тогда
		РасширениеФайлаРезультата = "html";
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии, РасширениеФайлаРезультата, ЯзыкРаспознавания", 
		ДанныеФайла, НавигационнаяСсылкаВерсии, РасширениеФайлаРезультата, ЯзыкРаспознавания);
	
	Возврат СтруктураВозврата;
КонецФункции

// Запишет в базу результат распознавания и выполнит все действия - создать версию или файл
Функция ЗаписатьРезультатРаспознаванияИВыполнитьДействия(ВерсияСсылка, РезультатРаспознавания, 
	АдресВременногоХранилищаФайла, РаспознанныйТекст, УникальныйИдентификатор, 
	ЭтоРегламентноеЗадание, 
	ВремяИзменения, ВремяИзмененияУниверсальное, РазмерФайла, Расширение,
	ПрограммаРаспознавания, ИдентификаторЗадания, ОписаниеРезультатаРаспознавания)
	
	Если РезультатРаспознавания = "Успешно" Тогда
		
		ФайлСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияСсылка, "Владелец");
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, 
			"СтратегияРаспознавания, ТекущаяВерсия, ТекущаяВерсияРасширение, Автор, Описание, ВладелецФайла, ХранитьВерсии");
		СтратегияРаспознавания = РеквизитыФайла.СтратегияРаспознавания;
		
		ЭтоТекущаяВерсия = Ложь;
		Если РеквизитыФайла.ТекущаяВерсия = ВерсияСсылка Тогда
			ЭтоТекущаяВерсия = Истина;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			РаспознанныйТекст = Новый ХранилищеЗначения(РаспознанныйТекст);
			СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.Распознано;
			ТекстХранилище = Неопределено;
			
			РегистрыСведений.ТекстыВерсийФайлов.ДобавитьРезультатРаспознавания(ВерсияСсылка, СтатусРаспознаванияТекста, РаспознанныйТекст,
				ТекстХранилище);
			
			Если ЭтоТекущаяВерсия Тогда
				
				РегистрыСведений.ТекстыФайлов.ДобавитьЗапись(ФайлСсылка, ТекстХранилище);
				
				ИмяБезРасширения = Строка(ФайлСсылка);
				
				Если Не ЭтоАдресВременногоХранилища(АдресВременногоХранилищаФайла) Тогда
					ПутьКФайлу = АдресВременногоХранилищаФайла;
					ФайлНаДиске = Новый Файл(ПутьКФайлу);
					ВремяИзменения = ФайлНаДиске.ПолучитьВремяИзменения();
					ВремяИзмененияУниверсальное = ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения();
					РазмерФайла = ФайлНаДиске.Размер();
					Расширение = ФайловыеФункцииКлиентСервер.РасширениеБезТочки(ФайлНаДиске.Расширение);
				КонецЕсли;
				
				АвторНовойВерсииИлиФайла = Неопределено;
				Если ЭтоРегламентноеЗадание Тогда
					СотрудникДляЗаданияРаспознавания = СотрудникДляЗаданияРаспознавания();
					Если НЕ СотрудникДляЗаданияРаспознавания.Пустая() Тогда
						АвторНовойВерсииИлиФайла = СотрудникДляЗаданияРаспознавания;
					Иначе
						АвторНовойВерсииИлиФайла = РеквизитыФайла.Автор;
					КонецЕсли;
				КонецЕсли;
				
				АдресВременногоХранилищаТекста = Новый ХранилищеЗначения(РаспознанныйТекст);
				
				Если СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовуюВерсиюHTML
					Или СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовуюВерсиюTXT Тогда
					
					НовоеОписание = Неопределено;
					
					Если ЭтоРегламентноеЗадание Тогда
						НовоеОписание = НСтр("ru = 'Версия создана регламентным заданием распознавания.'");
					КонецЕсли;
					
					СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
					СведенияОФайле.ВремяИзменения = ВремяИзменения;
					СведенияОФайле.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
					СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
					СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
					СведенияОФайле.Автор = АвторНовойВерсииИлиФайла;
					СведенияОФайле.НоваяВерсияКомментарий = НовоеОписание;
					СведенияОФайле.РасширениеБезТочки = Расширение;
					СведенияОФайле.Размер = РазмерФайла;
					СведенияОФайле.ИмяБезРасширения = ИмяБезРасширения;
					
					// новая версия
					СоздатьВерсиюИОбновитьВерсиюВФайле(
						ФайлСсылка, СведенияОФайле);
					
				ИначеЕсли СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовыйФайлHTML
					Или СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.СоздатьНовыйФайлTXT Тогда
					
					ЭтоВебКлиент = Ложь;
					
					НовоеОписание = РеквизитыФайла.Описание;
					Если ЭтоРегламентноеЗадание Тогда
						Если Не ПустаяСтрока(НовоеОписание) Тогда
							НовоеОписание = НовоеОписание + Символы.ПС;
						КонецЕсли;
						НовоеОписание = СтрШаблон(
							НСтр("ru = '%1 Файл создан регламентным заданием распознавания на основании файла %2'"),
							НовоеОписание, ПолучитьНавигационнуюСсылку(ФайлСсылка));
					КонецЕсли;
					
					СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
					СведенияОФайле.ВремяИзменения = ВремяИзменения;
					СведенияОФайле.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
					СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
					СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
					СведенияОФайле.Автор = АвторНовойВерсииИлиФайла;
					СведенияОФайле.НоваяВерсияКомментарий = НовоеОписание;
					СведенияОФайле.РасширениеБезТочки = Расширение;
					СведенияОФайле.Размер = РазмерФайла;
					СведенияОФайле.ИмяБезРасширения = ИмяБезРасширения;
					СведенияОФайле.ХранитьВерсии = РеквизитыФайла.ХранитьВерсии;
					
					СоздатьФайлСВерсией(
						РеквизитыФайла.ВладелецФайла,
						СведенияОФайле);
						
				КонецЕсли;
				
				Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаФайла) Тогда
					УдалитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания Тогда
				РегистрыСведений.ФайлыНаРаспознавании.УдалитьЗапись(ВерсияСсылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли РезультатРаспознавания = "НачатоРаспознавание" Тогда
		
		НачатьТранзакцию();
		Попытка
			
			СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.Распознается;
			РегистрыСведений.ТекстыВерсийФайлов.ДобавитьСтатусРаспознавания(ВерсияСсылка, СтатусРаспознаванияТекста);
			
			РегистрыСведений.ФайлыНаРаспознавании.ДобавитьФайл(ВерсияСсылка, ИдентификаторЗадания);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли РезультатРаспознавания = "Ошибка" Тогда // ошибка	
		
		НачатьТранзакцию();
		Попытка
			
			УстановитьСтатусНеРаспознано = Истина;
			
			Если ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания Тогда
				
				СтатусРаспознаванияТекста = РегистрыСведений.ТекстыВерсийФайлов.ПрочитатьСтатусРаспознавания(ВерсияСсылка);
				
				Если СтатусРаспознаванияТекста <> Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать Тогда
					РегистрыСведений.ФайлыНаРаспознавании.ЗафиксироватьОшибкуПриРаспознавании(
						ВерсияСсылка, РезультатРаспознавания);
					УстановитьСтатусНеРаспознано = 
						(РегистрыСведений.ФайлыНаРаспознавании.КоличествоПопыток(ВерсияСсылка) = 
						РегистрыСведений.ФайлыНаРаспознавании.МаксимальноеКоличествоНеудачныхПопытокОбработки());
				КонецЕсли;
				
			КонецЕсли;
			
			Если УстановитьСтатусНеРаспознано Тогда
				
				СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НеРаспознано;
				РегистрыСведений.ТекстыВерсийФайлов.ДобавитьСтатусРаспознавания(ВерсияСсылка, СтатусРаспознаванияТекста);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли РезультатРаспознавания = "ФайлНеРаспознан" Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Если СтатусРаспознаванияТекста <> Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать Тогда
				РегистрыСведений.ФайлыНаРаспознавании.УдалитьЗапись(ВерсияСсылка);
			КонецЕсли;
			
			СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НеРаспознано;
			РегистрыСведений.ТекстыВерсийФайлов.ДобавитьСтатусРаспознавания(ВерсияСсылка, СтатусРаспознаванияТекста);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	
	КонецЕсли;
	
КонецФункции

// Возобновляет распознавание файла в сервисе.
//
// Параметры:
//  Файл - СправочникСсылка.ВерсииФайлов
//
Процедура ВозобновитьРаспознаваниеФайлаВСервисе(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Файл);
		РегистрыСведений.ФайлыНаРаспознавании.ЗаблокироватьФайл(Файл);
		
		Если РегистрыСведений.ФайлыНаРаспознавании.КоличествоПопыток(Файл) < 
			РегистрыСведений.ФайлыНаРаспознавании.МаксимальноеКоличествоНеудачныхПопытокОбработки() Тогда
			
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.Распознается;
		РегистрыСведений.ТекстыВерсийФайлов.ДобавитьСтатусРаспознавания(Файл, СтатусРаспознаванияТекста); // Файл - это версия файла
		
		РегистрыСведений.ФайлыНаРаспознавании.СброситьОшибку(Файл);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Прерывает распознавание файла в сервисе.
//
// Параметры:
//  Файл - СправочникСсылка.ВерсииФайлов
//
Процедура ПрерватьРаспознаваниеФайлаВСервисе(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Файл);
		РегистрыСведений.ФайлыНаРаспознавании.ЗаблокироватьФайл(Файл);
		
		Если Не ЗначениеЗаполнено(
			РегистрыСведений.ФайлыНаРаспознавании.ИдентификаторЗаданияРаспознавания(Файл)) Тогда
			
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НеРаспознано;
		РегистрыСведений.ТекстыВерсийФайлов.ДобавитьСтатусРаспознавания(Файл, СтатусРаспознаванияТекста); // Файл - версия файла
		
		РегистрыСведений.ФайлыНаРаспознавании.УдалитьЗапись(Файл);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Записывает на сервер результат распознавания
Процедура ЗаписатьРезультатРаспознавания(ВерсияСсылка, 
	СтрокаВозврата, ОписаниеОшибки, АдресВременногоХранилищаФайла, 
	АдресВременногоХранилищаТекста, УникальныйИдентификатор,
	ВремяИзменения, ВремяИзмененияУниверсальное, РазмерФайла, Расширение,
	ЭтоРегламентноеЗадание) Экспорт
	
	РаспознанныйТекст = "";
	Если Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		РаспознанныйТекст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
	КонецЕсли;
	
	РегистрыСведений.ФайлыНаРаспознавании.ЗаблокироватьФайл(ВерсияСсылка);
	
	ЗаписатьРезультатРаспознаванияИВыполнитьДействия(ВерсияСсылка, СтрокаВозврата, АдресВременногоХранилищаФайла, 
		РаспознанныйТекст, УникальныйИдентификатор, ЭтоРегламентноеЗадание,
		ВремяИзменения, ВремяИзмененияУниверсальное, РазмерФайла, Расширение,
		ПрограммаРаспознавания(), "", ОписаниеОшибки);	
		
	РегистрыСведений.ФайлыНаРаспознавании.РазблокироватьФайл(ВерсияСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область ВстроенныйРедактор

// Возвращает доступность отправки файла из встроенного редактора.
//
// Параметры:
//  ДанныеФайла - Структура - см. ДанныеФайла
//
// Возвращаемое значение:
//  Булево
//
Функция ДоступнаОтправкаФайлаИзВстроенногоРедактораФайла(ДанныеФайла) Экспорт
	
	Возврат ТипЗнч(ДанныеФайла.Владелец) = Тип("СправочникСсылка.ПапкиФайлов");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Освобождает файл
// Параметры:
// ДанныеФайла - структура, содержащая сведения о Файле
// 	см. функцию ДанныеФайла()

// Параметры
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(ДанныеФайла.Ссылка, , УникальныйИдентификатор);
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	
	ФайлОбъект.Редактирует = Неопределено;
	ФайлОбъект.ДатаЗаема = Дата("00010101000000");
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
	ДанныеФайла.Вставить("ЕстьЗашифрованныеИлиЗанятыеФайлы", ЕстьЗашифрованныеИлиЗанятыеФайлы(ДанныеФайла.Владелец));
	
	БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(ДанныеФайла.Ссылка, Справочники.ВидыБизнесСобытий.ОсвобождениеФайла);
	
	ПереименоватьФайлПриОтменеЗахвата(ДанныеФайла);	
	
	УдалитьВизуализациюЭП(ДанныеФайла.Владелец, ДанныеФайла.Ссылка, ДанныеФайла.ТекущаяВерсия);
	
КонецПроцедуры    

// Занимает файл на редактирование (checkout)
// Параметры
//  ДанныеФайла  - структура с данными файла
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим пользователем")
//  УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ЗанятьФайл(ДанныеФайла, СтрокаОшибки, ДатаЗаема, УникальныйИдентификатор = Неопределено) Экспорт
	
	СтрокаОшибки = "";
	РаботаСФайламиПереопределяемый.ПриПопыткеЗанятьФайл(ДанныеФайла, СтрокаОшибки);
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(ДанныеФайла.Ссылка, , УникальныйИдентификатор);
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	ФайлОбъект.Прочитать();
	
	Если ЗначениеЗаполнено(ФайлОбъект.ВладелецФайла) 
		И МиграцияДанныхИзВнешнихСистемСервер.ОбъектИмеетРеквизитИсточникДанных(ФайлОбъект.ВладелецФайла) Тогда
		
		ИсточникДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлОбъект.ВладелецФайла, "ИсточникДанных");
	
		Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
			ВызватьИсключение НСтр("ru = 'Нельзя редактировать файл в 3.0, он редактируется в 2.1.'");
		КонецЕсли;
			
	КонецЕсли;	
	
	ФайлОбъект.Редактирует = СотрудникиВызовСервера.ОсновнойСотрудникПользователя(Пользователи.ТекущийПользователь());
	ФайлОбъект.ДатаЗаема = ДатаЗаема;
	ФайлОбъект.ДополнительныеСвойства.Вставить("ЗанятьФайл", Истина);
	
	Попытка
		ФайлОбъект.Записать();
	Исключение
		РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
		ВызватьИсключение;
	КонецПопытки;    
	
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
	НавигационнаяСсылкаТекущейВерсии = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	РабочийКаталогВладельца = ДанныеФайла.РабочийКаталогВладельца;
	
	ДанныеФайла = ДанныеФайла(
		ДанныеФайла.Ссылка, ДанныеФайла.Версия);
	
	ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = НавигационнаяСсылкаТекущейВерсии;
	ДанныеФайла.РабочийКаталогВладельца = РабочийКаталогВладельца;
	ДанныеФайла.Вставить("ЕстьЗашифрованныеИлиЗанятыеФайлы", ЕстьЗашифрованныеИлиЗанятыеФайлы(ДанныеФайла.Владелец));
	
	РаботаСФайламиПереопределяемый.ПриЗахватеФайла(ДанныеФайла, УникальныйИдентификатор);
	
	БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(ДанныеФайла.Ссылка, Справочники.ВидыБизнесСобытий.ЗахватФайлаДляРедактирования);	
	
	Возврат Истина;
	
КонецФункции // ЗанятьФайл()

// Переносит Файл в другую папку
// Параметры
//  ДанныеФайла  - структура с данными файла
//  Папка - СправочникСсылка.ПапкиФайлов - ссылка на папку, куда нужно переместить файл
Процедура ПеренестиФайл(ДанныеФайла, Папка) Экспорт 
	
	ПрежнийВладелец = ДанныеФайла.Ссылка.ВладелецФайла;
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	ФайлОбъект.Заблокировать();
	ФайлОбъект.ВладелецФайла = Папка;
	ФайлОбъект.Записать();
	
	ПротоколированиеРаботыСотрудников.ЗаписатьПеремещениеФайла(ДанныеФайла.Ссылка, ПрежнийВладелец, Папка);
	
КонецПроцедуры

// Переносит Файлы в другую папку
// Параметры
//  ОбъектыСсылка - Массив - массив ссылок на файлы
//  Папка - СправочникСсылка.ПапкиФайлов - ссылка на папку, куда нужно переместить файлы
Функция ПеренестиФайлы(ОбъектыСсылка, Папка) Экспорт 
	
	ДанныеФайлов = Новый Массив;
	
	Для Каждого ФайлСсылка Из ОбъектыСсылка Цикл
		ПеренестиФайл(ФайлСсылка, Папка);         		
		ДанныеФайла = ДанныеФайла(ФайлСсылка);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;    
	
	Возврат ДанныеФайлов;
	
КонецФункции

// Создает версию сохраняемого файла для сохранения в карточке Файла
// и подставляет ссылку на версию в карточку Файла
Функция СоздатьВерсиюИОбновитьВерсиюВФайле(
	ФайлСсылка, СведенияОФайле, ОбновлятьНеГлядяНаБлокировку = Ложь) Экспорт
	
	ВерсияСсылка = СоздатьВерсию(ФайлСсылка, СведенияОФайле);
	
	ОбновитьВерсиюВФайле(ФайлСсылка, ВерсияСсылка, 
		СведенияОФайле.АдресВременногоХранилищаТекста,,
		ОбновлятьНеГлядяНаБлокировку);
		
	Возврат ВерсияСсылка;	
	
КонецФункции // СоздатьВерсиюИОбновитьВерсиюВФайле()

// Находит максимальный номер версии для данного объекта Файл. Если нет версий - то 0
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - ссылка на файл
//
// Возвращаемое значение:
//   Число  - максимальный номер версии
Функция НайтиМаксимальныйНомерВерсии(ФайлСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ЕСТЬNULL(МАКСИМУМ(Версии.НомерВерсии), 0) КАК МаксимальныйНомер
				   |ИЗ
				   |	Справочник.ВерсииФайлов КАК Версии
				   |ГДЕ
				   |	Версии.Владелец = &Файл";
	
	Запрос.Параметры.Вставить("Файл", ФайлСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.МаксимальныйНомер = Null Тогда
			Возврат 0;
		КонецЕсли;
		
		Возврат Число(Выборка.МаксимальныйНомер);
	КонецЕсли;
	
	Возврат 0;
КонецФункции // НайтиМаксимальныйНомерВерсии

// Возвращает Истина, если есть хоть одно условие в справочнике ПравилаРазмещенияФайловВТомах
Функция ИспользоватьРазмещениеВТомахПоУсловиям() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаРазмещенияФайловВТомах.Ссылка
		|ИЗ
		|	Справочник.ПравилаРазмещенияФайловВТомах КАК ПравилаРазмещенияФайловВТомах
		|ГДЕ
		|	ПравилаРазмещенияФайловВТомах.ПометкаУдаления = ЛОЖЬ";
	
	Возврат (Не Запрос.Выполнить().Пустой());
	
КонецФункции // ИспользоватьРазмещениеВТомахПоУсловиям

// Делает запись бизнес-события изменения файла в папке
// Папка - папка файлов
// Файл - файл
// РазмерФайла - размер файла версии
Процедура ЗарегистрироватьИзменениеФайла(Файл) Экспорт
	
	ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеФайла;
	БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Файл, ВидСобытия);
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");
	
	Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(ВладелецФайла, 
			Справочники.ВидыБизнесСобытий.ИзменениеДокумента);
					
	ИначеЕсли ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.Мероприятия") Тогда
			
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(ВладелецФайла, 
			Справочники.ВидыБизнесСобытий.ИзменениеМероприятия);
			
	КонецЕсли;	
	
КонецПроцедуры	

// Обновляет текстовую порцию из файла в карточке файла
// Параметры
// ФайлСсылка - СправочникСсылка.Файлы - Файл, в котором создается версия
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура ОбновитьТекстВФайле(ФайлСсылка, Знач АдресВременногоХранилищаТекста, УникальныйИдентификатор = Неопределено)
	
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	
	СтатусРаспознаванияТекста = РегистрыСведений.ТекстыВерсийФайлов.ПрочитатьСтатусРаспознавания(ФайлОбъект.ТекущаяВерсия);
	
	Если СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать Тогда
		ФайлОбъект.СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз;
	КонецЕсли;    
	
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
	Текст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
	ТекстХранилище = Новый ХранилищеЗначения(Текст);
	РегистрыСведений.ТекстыФайлов.ДобавитьЗапись(ФайлСсылка, ТекстХранилище);
	
КонецПроцедуры // ОбновитьТекстВФайле()

// Обновляет или создает версию Файла и возвращает ссылку на обновленную версию (или Ложь, если файл бинарно не
// изменен).
//
// Параметры:
//   ФайлСсылка     - СправочникСсылка.Файлы        - файл, для которого создается новая версия.
//   СведенияОФайле - Структура                     - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме
//                                                    "ФайлСВерсией".
//   ВерсияСсылка   - СправочникСсылка.ВерсииФайлов - версия файла, которую надо обновить.
//   УникальныйИдентификаторФормы                   - УникальныйИдентификатор - уникальный идентификатор формы, 
//                                                    в контексте которой выполняется операция.
//   ДанныеДляВосстановленияФайловВТоме - Массив    - данные для восстановления файлов в томе в случае отката транзакции
//
// Возвращаемое значение:
//   СправочникСсылка.ВерсииФайлов - созданная или измененная версия; Неопределено, если файл бинарно не был изменен.
//
Функция ОбновитьВерсиюФайла(ФайлСсылка, СведенияОФайле, ВерсияСсылка = Неопределено, 
	УникальныйИдентификаторФормы = Неопределено, 
	НужноЗановоРаспознатьВерсию = Ложь, 
	ДанныеДляВосстановленияФайловВТоме = Неопределено,
	ЭтоШифрование = Ложь) Экспорт
	
	Перем СсылкаНаТом;
	ХранилищеФайла = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапретЗагрузкиФайловПоРасширению = ФайловыеФункции.ПолучитьЗапретЗагрузкиФайловПоРасширению();
	СписокЗапрещенныхРасширений = ФайловыеФункции.ПолучитьСписокЗапрещенныхРасширений();
	РасширениеФайла = СведенияОФайле.РасширениеБезТочки;
	Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		ВызватьИсключение
			   СтрШаблон(
				 НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
				 РасширениеФайла);
	КонецЕсли;
	
	ЗарегистрироватьИзменениеФайла(ФайлСсылка);
	
	ТекущаяВерсияРазмер = 0;
	ДвоичныеДанные = Неопределено;
	ТекущаяВерсияТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ТекущаяВерсияТом = Неопределено;
	ТекущаяВерсияПутьКФайлу = Неопределено;
	
	ВерсияСсылкаДляСравненияРазмера = ВерсияСсылка;
	
	Если ВерсияСсылка <> Неопределено Тогда
		ВерсияСсылкаДляСравненияРазмера = ВерсияСсылка;
	Иначе
		ВерсияСсылкаДляСравненияРазмера = ФайлСсылка.ТекущаяВерсия;
	КонецЕсли;
	
	КодировкаПредВерсии = ПолучитьКодировкуВерсииФайла(ВерсияСсылкаДляСравненияРазмера, СведенияОФайле.РасширениеБезТочки);
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияСсылкаДляСравненияРазмера, 
		"Размер, ТипХраненияФайла, Том, ПутьКФайлу");
	ТекущаяВерсияРазмер = СтруктураРеквизитов.Размер;
	ТекущаяВерсияТипХраненияФайла = СтруктураРеквизитов.ТипХраненияФайла;
	ТекущаяВерсияТом = СтруктураРеквизитов.Том;
	ТекущаяВерсияПутьКФайлу = СтруктураРеквизитов.ПутьКФайлу;
	
	Если СведенияОФайле.Размер = ТекущаяВерсияРазмер Тогда
		ДвоичныеДанныеПредыдущейВерсии = Неопределено;
		
		Если ТекущаяВерсияТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Если НЕ ТекущаяВерсияТом.Пустая() Тогда
				ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ТекущаяВерсияТом) + ТекущаяВерсияПутьКФайлу; 
				ДвоичныеДанныеПредыдущейВерсии = Новый ДвоичныеДанные(ПолныйПуть);
			КонецЕсли;
		Иначе
			ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылкаДляСравненияРазмера);
			ДвоичныеДанныеПредыдущейВерсии = ХранилищеФайла.Получить();
		КонецЕсли;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
		
		Если ДвоичныеДанныеПредыдущейВерсии = ДвоичныеДанные Тогда
			
			Если ЗначениеЗаполнено(СведенияОФайле.Комментарий) Тогда
				
				ЗаблокироватьДанныеДляРедактирования(ВерсияСсылкаДляСравненияРазмера, , УникальныйИдентификаторФормы);
				Версия = ВерсияСсылкаДляСравненияРазмера.ПолучитьОбъект();
				
				Если ЗначениеЗаполнено(Версия.Комментарий) Тогда
					Версия.Комментарий = Версия.Комментарий + Символы.ВК;
				КонецЕсли;	
				Версия.Комментарий = Версия.Комментарий + СведенияОФайле.Комментарий;
				
				Версия.Записать();
				РазблокироватьДанныеДляРедактирования(ВерсияСсылкаДляСравненияРазмера, УникальныйИдентификаторФормы);		
				
				Возврат ВерсияСсылкаДляСравненияРазмера.Ссылка;
				
			КонецЕсли;	
			
			Возврат Неопределено; // Файл бинарно не изменен
			
		КонецЕсли;
	КонецЕсли;
	
	СтарыйТипХранения = Неопределено;
	ВерсияЗаблокирована = Ложь;
	Версия = Неопределено;
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла");
	
	СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НеНужноРаспознавать;
	СтатусИзвлеченияТекста = Неопределено;
	ИзвлеченныйТекст = Новый ХранилищеЗначения("");
	
	СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НеНужноРаспознавать;
	СтатусИзвлеченияТекста = Неопределено;
	ИзвлеченныйТекст = Новый ХранилищеЗначения("");
	
	Если СведенияОФайле.ХранитьВерсии Тогда
		Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
		Версия.РодительскаяВерсия = ФайлСсылка.ТекущаяВерсия;
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(ФайлСсылка) + 1;
		
		Если Не ЗначениеЗаполнено(ФайлСсылка.СтратегияРаспознавания) 
			Или ФайлСсылка.СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.НеРаспознавать Тогда
			
			СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НеНужноРаспознавать;
			
		Иначе
			
			ИМОВладельца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ВладелецФайла));
			СтатусРаспознаванияТекста = 
				РаботаСФайламиВызовСервера.СтатусРаспознаванияПоУмолчаниюДляФайловВладельца(ИМОВладельца);
			
		КонецЕсли;
		
	Иначе
		
		Если ВерсияСсылка = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(ФайлСсылка.ТекущаяВерсия, , УникальныйИдентификаторФормы);
			Версия = ФайлСсылка.ТекущаяВерсия.ПолучитьОбъект();
		Иначе
			ЗаблокироватьДанныеДляРедактирования(ВерсияСсылка, , УникальныйИдентификаторФормы);
			Версия = ВерсияСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ВерсияЗаблокирована = Истина;
		
		СтатусРаспознаванияТекста = РегистрыСведений.ТекстыВерсийФайлов.ПрочитатьСтатусРаспознавания(Версия);
		
		Если СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.Распознано Тогда
			
			ИМОВладельца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ВладелецФайла));
			СтатусРаспознаванияТекста = 
				РаботаСФайламиВызовСервера.СтатусРаспознаванияПоУмолчаниюДляФайловВладельца(ИМОВладельца);
			
			НужноЗановоРаспознатьВерсию = Истина;
		КонецЕсли;
		
		// удалим файл с диска - мы заместим его новым
		Если Версия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Если НЕ Версия.Том.Пустая() Тогда
				
				Если ЭтоШифрование = Ложь Тогда
					РегистрыСведений.ФайлыКУдалению.ЗаписатьФайл(Версия.Том, Версия.ПутьКФайлу, 
						"ОбновитьВерсиюФайла", Версия.Ссылка);
				Иначе	
					
					// если зашифровать или расшифровать - сразу удаляем в томе
					ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(Версия.Том) + Версия.ПутьКФайлу; 
					Попытка
						ФайлНаДиске = Новый Файл(ПолныйПуть);
						ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
						
						УдалитьФайлы(ПолныйПуть);
						
						ПутьСПодкаталогом = ФайлНаДиске.Путь;
						МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
						Если МассивФайловВКаталоге.Количество() = 0 Тогда
							УдалитьФайлы(ПутьСПодкаталогом);
						КонецЕсли;
						
					Исключение  // глотаем исключение
					КонецПопытки;
					
				КонецЕсли;	
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Версия.Владелец = ФайлСсылка;
	Версия.Автор = Сотрудники.ОсновнойСотрудник(); // Сотрудники.ОсновнойСотрудникПользователя(Пользователи.ТекущийПользователь());
	Версия.ДатаМодификацииУниверсальная = СведенияОФайле.ВремяИзмененияУниверсальное;
	Версия.ДатаМодификацииФайла = СведенияОФайле.ВремяИзменения;
	Версия.ДатаСоздания = ТекущаяДатаСеанса();
	Версия.Размер = СведенияОФайле.Размер;
	Версия.ПолноеНаименование = СведенияОФайле.ИмяБезРасширения;
	Версия.Комментарий = СведенияОФайле.Комментарий;
	
	Версия.Расширение = ФайловыеФункцииКлиентСервер.РасширениеБезТочки(СведенияОФайле.РасширениеБезТочки);
	
	ТипХраненияФайлов = ФайловыеФункции.ПолучитьТипХраненияФайлов();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ИспользоватьРазмещениеВТомахПоУсловиям() Тогда
		Версия.Записать(); // чтобы при размещении в томе по условию на руках была ссылка на версию
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
	КонецЕсли;	
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
		
		Если Версия.Размер = 0 Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
			
			МаксРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла();
			РазмерВМб = Версия.Размер / (1024 * 1024);
			РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
			РазрешеноДобавлятьФайлыТаймлист
				= ТаймлистВызовСервера.РазрешеноДобавлятьФайлыТаймлистПревышающихМаксимальноДопустимыйОбъем(
					Версия.Расширение, РазмерВМб);
			
			Если Версия.Размер > МаксРазмерФайла И Не РазрешеноДобавлятьФайлыТаймлист Тогда
				ВызватьИсключение
					   СтрШаблон(
						 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
						 СведенияОФайле.ИмяБезРасширения, 
						 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб), 
						 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
			КонецЕсли;
			
		КонецЕсли;
		
		// очистим поля
		Версия.ПутьКФайлу = "";
		Версия.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	Иначе // хранение на диске
		
		Если Версия.Размер = 0 Тогда
			Версия.Размер = ДвоичныеДанные.Размер();
			
			МаксРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла();
			РазмерВМб = Версия.Размер / (1024 * 1024);
			РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
			РазрешеноДобавлятьФайлыТаймлист = ТаймлистПовтИсп.ТаймлистИспользуется()
				И ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Версия.Расширение)
				И ТаймлистПовтИсп.ДоступноРаспознаваниеПоЗапросу()
				И РазмерВМб <= 1024;
			
			Если Версия.Размер > МаксРазмерФайла И Не РазрешеноДобавлятьФайлыТаймлист Тогда
				ВызватьИсключение
					   СтрШаблон(
						 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
						 СведенияОФайле.ИмяБезРасширения, 
						 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб), 
						 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
			КонецЕсли;
			
		КонецЕсли;
		
		ПутьКФайлу = "";
		
		ФайлЗашифрован = Ложь;
		Если СведенияОФайле.Зашифрован <> Неопределено Тогда
			ФайлЗашифрован = СведенияОФайле.Зашифрован;
		КонецЕсли;
		
		// добавить в один из томов (где есть свободное место)
		ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлу, СсылкаНаТом, 
			СведенияОФайле.ВремяИзмененияУниверсальное, Версия.НомерВерсии, 
			СведенияОФайле.ИмяБезРасширения, Версия.Расширение, Версия.Размер, 
				ФайлЗашифрован, Неопределено, Версия.Ссылка);
		Версия.ПутьКФайлу = ПутьКФайлу;
		Версия.Том = СсылкаНаТом.Ссылка;
		ХранилищеФайла = Новый ХранилищеЗначения(""); // очистим ХранилищеЗначения
	КонецЕсли; // хранение на диске			
	
	Если СведенияОФайле.АдресВременногоХранилищаТекста <> Неопределено Тогда
		ИзвлекатьТекстыФайловНаСервере = ФайловыеФункции.ИзвлекатьТекстыФайловНаСервере();
		Если ИзвлекатьТекстыФайловНаСервере = Ложь Тогда
			
			Текст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаТекста);
			ИзвлеченныйТекст = Новый ХранилищеЗначения(Текст);
			
		Иначе
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		КонецЕсли;
	Иначе
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
	Если СведенияОФайле.НовыйСтатусИзвлеченияТекста <> Неопределено Тогда
		СтатусИзвлеченияТекста = СведенияОФайле.НовыйСтатусИзвлеченияТекста;
	КонецЕсли;
	
	Если Версия.Размер = 0 Тогда
		ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
		Версия.Размер = ДвоичныеДанныеФайла.Размер();
	КонецЕсли;
	
	Если СведенияОФайле.Зашифрован <> Неопределено Тогда
		Версия.Зашифрован = СведенияОФайле.Зашифрован;
	КонецЕсли;    
	
	Если Версия.Зашифрован Тогда 
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
	КонецЕсли;	
	
	Версия.ДополнительныеСвойства.Вставить("ОбновитьРеквизитыВерсииВФайле", Истина); // чтобы прошла запись не-текущей версии
	Версия.Записать();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ХранилищеФайла);	
	КонецЕсли;	
	
	Если ВерсияЗаблокирована Тогда
		РазблокироватьДанныеДляРедактирования(Версия.Ссылка, УникальныйИдентификаторФормы);		
	КонецЕсли;
	
	РегистрыСведений.ТекстыВерсийФайлов.ДобавитьЗаписьИзвлечения(Версия.Ссылка, 
		СтатусИзвлеченияТекста, ИзвлеченныйТекст, Версия.Расширение,  , СтатусРаспознаванияТекста);
	
	ЗаписатьКодировкуВерсииФайла(Версия.Ссылка, КодировкаПредВерсии);
	
	НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(ФайлСсылка);
	ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
	
	ЗаписатьОбращениеКВерсииФайла(Версия.Ссылка);
	
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменениеФайла(Версия.Владелец);
	
	// При изменении документа/файлов делать непрочтенным
	Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочтенностьДокументов") Тогда
			РегистрыСведений.СведенияОПрочтении.УбратьСведенияОПрочтенииВсемКромеАвтора(ВладелецФайла);
		КонецЕсли;
	КонецЕсли;		
	
	СоздатьЗаписьОчередиПревью(ФайлСсылка, СведенияОФайле.РасширениеБезТочки);
	
	Возврат Версия.Ссылка;
	
КонецФункции // ОбновитьВерсиюФайла

// Обновляет или создает версию файла и снимает блокировку. 
//
// Параметры:
//   ДанныеФайла                  - Структура - структура с данными файла.
//   СведенияОФайле               - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   НеМенятьЗаписьВРабочемКаталоге - Булево  - не менять запись в регистре сведений ФайлыВРабочемКаталогеКомпьютера.
//   ПолныйПутьКФайлу             - Строка    - указывается, если НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   РабочийКаталогПользователя   - Строка    - указывается, если НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//   ПараметрыАвтозапускаБизнесПроцессов - Структура - параметры автозапуска процессов
//
// Возвращаемое значение:
//   Булево - Истина, если создание версии выполнено (и файл бинарно изменен).
//
Функция СохранитьИзмененияИОсвободитьФайл(ДанныеФайла, СведенияОФайле,
	НеМенятьЗаписьВРабочемКаталоге, ПолныйПутьКФайлу, РабочийКаталогПользователя, 
	УникальныйИдентификаторФормы = Неопределено, 
	ПараметрыАвтозапускаБизнесПроцессов = Неопределено,
	НоваяВерсия = Неопределено) Экспорт
	
	ДанныеФайлаТекущие = ДанныеФайла(ДанныеФайла.Ссылка);
	Если Не ДанныеФайлаТекущие.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;    
	
	ВерсияНеСоздана = Ложь;
	ДанныеДляВосстановленияФайловВТоме = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		// В самом начале блокируем файл, чтобы не делать обновление версии, если файл заблокирован.
		ЗаблокироватьДанныеДляРедактирования(ДанныеФайла.Ссылка, , УникальныйИдентификаторФормы);
		
		ПредыдущаяВерсия = ДанныеФайла.ТекущаяВерсия;
		СведенияОФайле.Зашифрован = ДанныеФайла.Зашифрован;
		НужноЗановоРаспознатьВерсию = Ложь;
		
		НоваяВерсия = ОбновитьВерсиюФайла(ДанныеФайла.Ссылка, СведенияОФайле,, 
			УникальныйИдентификаторФормы, НужноЗановоРаспознатьВерсию, ДанныеДляВосстановленияФайловВТоме);
		
		Если НоваяВерсия <> Неопределено Тогда
				
			Если СведенияОФайле.ХранитьВерсии Тогда
				ОбновитьВерсиюВФайле(ДанныеФайла.Ссылка, НоваяВерсия, СведенияОФайле.АдресВременногоХранилищаТекста, 
					УникальныйИдентификаторФормы);
			Иначе
					
				Если НужноЗановоРаспознатьВерсию = Истина Тогда
					УстановитьСтратегиюРаспознавания(ДанныеФайла.Ссылка, 
						Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз, 
						УникальныйИдентификаторФормы);
				Иначе
					ОбновитьТекстВФайле(ДанныеФайла.Ссылка, СведенияОФайле.АдресВременногоХранилищаТекста, 
						УникальныйИдентификаторФормы);
				КонецЕсли;    
					
				ДанныеФайла.ТекущаяВерсия = НоваяВерсия;
					
			КонецЕсли;
			
		КонецЕсли;
		
		ОсвободитьФайл(ДанныеФайла, УникальныйИдентификаторФормы);
		
		Если СведенияОФайле.Кодировка <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ПолучитьКодировкуВерсииФайла(ДанныеФайла.ТекущаяВерсия, СведенияОФайле.РасширениеБезТочки)) Тогда
				РаботаСФайламиВызовСервера.ЗаписатьКодировкуВерсииФайла(ДанныеФайла.ТекущаяВерсия, СведенияОФайле.Кодировка);
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СведенияОФайле.РольФайла) Тогда
			РольФайла = СведенияОФайле.РольФайла;
			РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(ДанныеФайла.Ссылка, СведенияОФайле.РольФайла);
		КонецЕсли;	
		
		Если Не НеМенятьЗаписьВРабочемКаталоге Тогда
			Если НоваяВерсия <> Неопределено Тогда
				
				ИмяКаталога = ФайловыеФункции.ПолучитьПутьКРабочемуКаталогуПользователя();
				УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(
					ПредыдущаяВерсия, 
					НоваяВерсия, 
					ПолныйПутьКФайлу, 
					ИмяКаталога,
					ДанныеФайла.РабочийКаталогВладельца <> "");
			Иначе
				// ту же версию перезапишем - чтобы флаг НаЧтение изменить
					
				ИмяКаталога = ФайловыеФункции.ПолучитьПутьКРабочемуКаталогуПользователя();
				УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(
					ПредыдущаяВерсия, 
					ПредыдущаяВерсия, 
					ПолныйПутьКФайлу, 
					ИмяКаталога,
					ДанныеФайла.РабочийКаталогВладельца <> "");
					
			КонецЕсли;
		Иначе		
			УдалитьИзРегистра(ПредыдущаяВерсия);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		РазблокироватьДанныеДляРедактирования(ДанныеФайла.Ссылка, УникальныйИдентификаторФормы);
		
		// после успешного завершения удаляем временные файлы и каталог, если он пуст
		ЗафиксироватьТранзакциюДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме, "СохранитьИзмененияИОсвободитьФайл");	
		
		КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);
		ДанныеФайла.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ДанныеФайла.Владелец)
			И РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(ДанныеФайла.Расширение) Тогда
			МастерФайл = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьМастерФайл(
				ДанныеФайла.Владелец, ДанныеФайла.Ссылка);
			Если ЗначениеЗаполнено(МастерФайл) Тогда
				ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(ДанныеФайла.Владелец, 
					СтрШаблон(НСтр("ru = 'Изменен файл визуализации ЭП: %1'"), ДанныеФайла.Ссылка)
					);
			КонецЕсли;		
		КонецЕсли;	
		
	Исключение
		ОтменитьТранзакцию();
		ОтменитьТранзакциюДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НоваяВерсия <> Неопределено;
	
КонецФункции // СохранитьИзмененияИОсвободитьФайл()

// Получает данные файла, затем обновляет или создает версию Файла и снимает блокировку.
// Нужно для случаев, когда на клиенте нет ДанныеФайла (из соображений экономии вызовов клиент-сервер).
//
// Параметры:
//   ФайлСсылка       - СправочникСсылка.Файлы - файл, в котором обновляется версия.
//   СведенияОФайле   - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   ПолныйПутьКФайлу             - Строка
//   РабочийКаталогПользователя   - Строка
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//   ПараметрыАвтозапускаБизнесПроцессов - Структура
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     * Успешно     - Булево    - Истина, если создание версии выполнено (и файл бинарно изменен).
//     * ДанныеФайла - Структура - структура с данными файла.
//
Функция СохранитьИзмененияИОсвободитьФайлПоСсылке(ФайлСсылка, СведенияОФайле, 
	ПолныйПутьКФайлу, РабочийКаталогПользователя, УникальныйИдентификаторФормы = Неопределено,
	ПараметрыАвтозапускаБизнесПроцессов = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка);
	ВерсияСоздана = СохранитьИзмененияИОсвободитьФайл(ДанныеФайла, СведенияОФайле, Ложь, ПолныйПутьКФайлу, РабочийКаталогПользователя,
		УникальныйИдентификаторФормы);
	 
	Возврат Новый Структура("Успешно,ДанныеФайла", ВерсияСоздана, ДанныеФайла); 
	
КонецФункции // СохранитьИзмененияИОсвободитьФайлПоСсылке()

// Предназначена для опубликования файла без его освобождения. 
//
// Параметры:
//   ДанныеФайла                  - Структура - структура с данными файла.
//   СведенияОФайле               - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   НеМенятьЗаписьВРабочемКаталоге - Булево  - не менять запись в регистре сведений ФайлыВРабочемКаталогеКомпьютера.
//   ОтносительныйПутьКФайлу      - Строка    - относительный путь без пути рабочего каталога, например
//                                              "А1/Приказ.doc"; указывается, если НеМенятьЗаписьВРабочемКаталоге =
//                                              Ложь.
//   ПолныйПутьКФайлу             - Строка    - путь на клиенте в рабочем каталоге; указывается, если
//                                              НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   ВРабочемКаталогеВладельца    - Булево    - файл находится в рабочем каталоге владельца.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Булево  - Истина, если создание версии выполнено (и файл бинарно изменен).
//
Функция СохранитьИзмененияФайла(ФайлСсылка, СведенияОФайле, 
	НеМенятьЗаписьВРабочемКаталоге, ОтносительныйПутьКФайлу, ПолныйПутьКФайлу, ВРабочемКаталогеВладельца,
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайлаТекущие = ДанныеФайла(ФайлСсылка);
	Если Не ДанныеФайлаТекущие.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;
	
	ВерсияНеСоздана = Ложь;
	ТекущаяВерсия = ДанныеФайлаТекущие.ТекущаяВерсия;
	ДанныеДляВосстановленияФайловВТоме = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		СтараяВерсия = ФайлСсылка.ТекущаяВерсия;
		НужноЗановоРаспознатьВерсию = Ложь;
		
		СведенияОФайле.Зашифрован = ДанныеФайлаТекущие.Зашифрован;
		НоваяВерсия = ОбновитьВерсиюФайла(ФайлСсылка, СведенияОФайле, ,	УникальныйИдентификаторФормы, 
			НужноЗановоРаспознатьВерсию, ДанныеДляВосстановленияФайловВТоме);
		
		Если НоваяВерсия <> Неопределено Тогда
			ТекущаяВерсия = НоваяВерсия;
			
			Если СведенияОФайле.ХранитьВерсии Тогда
				ОбновитьВерсиюВФайле(ФайлСсылка, НоваяВерсия, СведенияОФайле.АдресВременногоХранилищаТекста, 
					УникальныйИдентификаторФормы);
			Иначе
				Если НужноЗановоРаспознатьВерсию = Истина Тогда
					УстановитьСтратегиюРаспознавания(ФайлСсылка, 
						Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз, 
						УникальныйИдентификаторФормы);
				Иначе
					ОбновитьТекстВФайле(ФайлСсылка, СведенияОФайле.АдресВременногоХранилищаТекста, 
						УникальныйИдентификаторФормы);
				КонецЕсли;    
			КонецЕсли;
			
			Если Не НеМенятьЗаписьВРабочемКаталоге Тогда
				УдалитьИзРегистра(СтараяВерсия);
				НаЧтение = Ложь; 
				ЗаписатьИмяФайлаСПутемВРегистр(НоваяВерсия, ОтносительныйПутьКФайлу, НаЧтение, ВРабочемКаталогеВладельца);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СведенияОФайле.Кодировка <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ПолучитьКодировкуВерсииФайла(ТекущаяВерсия, СведенияОФайле.РасширениеБезТочки)) Тогда
				РаботаСФайламиВызовСервера.ЗаписатьКодировкуВерсииФайла(ТекущаяВерсия, СведенияОФайле.Кодировка);
			КонецЕсли;		
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СведенияОФайле.РольФайла) Тогда
			РольФайла = СведенияОФайле.РольФайла;
			РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(ФайлСсылка, СведенияОФайле.РольФайла);
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
		
		// после успешного завершения удаляем временные файлы и каталог, если он пуст
		ЗафиксироватьТранзакциюДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме, "СохранитьИзмененияФайла");	
		
	Исключение
		ОтменитьТранзакцию();
		ОтменитьТранзакциюДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат (Не ВерсияНеСоздана);
	
КонецФункции // СохранитьИзмененияФайла()

// Получает РедактируетТекущийПользователь - в привилегированном режиме.
// Параметры:
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла.
//
// Возвращаемое значение:
//   Булево - Истина, если файл редактирует текущий пользователь.
//
Функция ПолучитьРедактируетТекущийПользователь(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Файлы.Редактирует КАК Редактирует
	               |ИЗ
	               |	Справочник.Файлы КАК Файлы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	ВерсииФайлов.Ссылка = &Версия
	               |	И Файлы.Ссылка = ВерсииФайлов.Владелец";
	
	Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РедактируетТекущийПользователь = (СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь()).Найти(Выборка.Редактирует) <> Неопределено);
		Возврат РедактируетТекущийПользователь;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции    

// Получает данные файла и делает заем (checkout) - для экономии вызовов 
//клиент сервер поместили ДанныеФайла и ЗанятьФайл в одну функцию
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ДанныеФайла  - Структура - структура с данными файла
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим пользователем")
//  УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПолучитьДанныеФайлаИЗанятьФайл(ФайлСсылка, ДанныеФайла, СтрокаОшибки, ДатаЗаема, 
	УникальныйИдентификатор = Неопределено) Экспорт
	
	Попытка
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Файлы");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ФайлСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ДанныеФайла = ДанныеФайла(ФайлСсылка);
		
		СтрокаОшибки = "";
		Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
			
			СтрокаОшибки = "";
			Если Не ЗанятьФайл(ДанныеФайла, СтрокаОшибки, ДатаЗаема, УникальныйИдентификатор) Тогда 
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СоздатьЗаписьВФайлыВРабочемКаталоге(ФайлСсылка);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заем файла для редактирования'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);
	ДанныеФайла.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
	Возврат Истина;
	
КонецФункции // ПолучитьДанныеФайлаИЗанятьФайл()

// получает ДанныеФайла для подчиненных файлов и помещает в МассивДанныхФайла
Процедура ПолучитьДанныеМассиваФайлов(МассивОтмеченныхПодчиненных, МассивДанныхФайла) Экспорт
	
	Для Каждого СтруктураПодчиненного Из МассивОтмеченныхПодчиненных Цикл
		ДанныеФайла = ДанныеФайла(СтруктураПодчиненного.ПодчиненныйФайл, Неопределено);
		МассивДанныхФайла.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

// получает ДанныеФайла для файлов и помещает в МассивДанныхФайла
Процедура ПолучитьДанныеДляМассиваФайлов(Знач МассивФайлов, МассивДанныхФайла) Экспорт
	
	Для Каждого Файл Из МассивФайлов Цикл
		ДанныеФайла = ДанныеФайла(Файл, Неопределено);
		МассивДанныхФайла.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

// Получает данные файла для открытия и делает заем (checkout) - для экономии вызовов 
//клиент сервер поместили ДанныеФайлаДляОткрытия и ЗанятьФайл в одну функцию
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ДанныеФайла  - Структура - структура с данными файла
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим пользователем")
//  УникальныйИдентификатор - уникальный идентификатор формы
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца файла
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПолучитьДанныеФайлаДляОткрытияИЗанятьФайл(ФайлСсылка, ДанныеФайла, СтрокаОшибки, 
	ДатаЗаема, УникальныйИдентификатор = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Файлы");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ФайлСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
	
		ЗаемФайла = Истина;
		ДанныеФайла = ДанныеФайлаДляОткрытия(ФайлСсылка, Неопределено, УникальныйИдентификатор, 
			РабочийКаталогВладельца, , Истина, , ЗаемФайла);
			
		ИсполняемыеБинарныеФайлы = ФайловыеФункцииКлиентСервер.ИсполняемыеБинарныеФайлы();
		ЭтоИсполняемыйФайлБинарный = ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(ИсполняемыеБинарныеФайлы, ДанныеФайла.Расширение);
		Если ЭтоИсполняемыйФайлБинарный Тогда
			Возврат Ложь; // exe файл не делаем заем, нет смысла
		КонецЕсли;	
			
		ВладелецСменилПрочтенность = Ложь;	
		ДанныеФайла.Свойство("ВладелецСменилПрочтенность", ВладелецСменилПрочтенность);	
		
		СтрокаОшибки = "";
		Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
			
			СтрокаОшибки = "";
			Если Не ЗанятьФайл(ДанныеФайла, СтрокаОшибки, ДатаЗаема, УникальныйИдентификатор) Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеФайла.Вставить("ЕстьЗашифрованныеИлиЗанятыеФайлы", 
			ЕстьЗашифрованныеИлиЗанятыеФайлы(ДанныеФайла.Владелец));
			
		ЗафиксироватьТранзакцию();
		
		Если ВладелецСменилПрочтенность = Истина Тогда
			ДанныеФайла.Вставить("ВладелецСменилПрочтенность", ВладелецСменилПрочтенность);
		КонецЕсли;	
		
		КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);
		ДанныеФайла.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
			
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заем файла для редактирования'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ПолучитьДанныеФайлаИЗанятьФайл()

// Делает ПоместитьВоВременноеХранилище (если файл хранится на диске) и возвращает нужную ссылку
// Параметры
// ВерсияСсылка - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Строка  - навигационная ссылка во временном хранилище
Функция ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, 
	ИдентификаторФормы = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Адрес = "";
	
	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	
	Если ВерсияСсылка.ФайлУдален Тогда
		
		СтрокаОшибки = НСтр("ru='Эта версия файла является устаревшей и сейчас недоступна. 
			|Для получения доступа обратитесь к администратору системы.'");
		
		ВызватьИсключение СтрокаОшибки;
		
	КонецЕсли;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// запись в журнал регистрации
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
				ЗаписьЖурналаРегистрации("Открытие файла", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, ВерсияСсылка.Владелец, СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение);
					
			КонецПопытки;
		КонецЕсли;
	Иначе
		СтруктураКлюча = Новый Структура("Файл", ВерсияСсылка);
		КлючЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьКлючЗаписи(СтруктураКлюча);
		Адрес = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ДвоичныеДанныеФайла");
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЭкспортПапки")
		И ДополнительныеПараметры.ЭкспортПапки Тогда
		
		ПротоколированиеРаботыСотрудников.ЗаписатьЭкспортФайлов(ВерсияСсылка.Владелец, ДополнительныеПараметры.ПолныйПуть);
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции // ПолучитьНавигационнуюСсылкуДляОткрытия()

// Формирует текст ошибки для помещения в журнал регистрации
// Параметры
//  ИнформацияОбОшибкеФункции  - ИнформацияОбОшибке
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//
// Возвращаемое значение:
//   Строка - описание ошибки
Функция СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибкеФункции, ФайлСсылка) Экспорт
	
	СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибкеФункции);
	Если ФайлСсылка <> Неопределено Тогда
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = '%1
			|Ссылка на файл: %2'"),
			СообщениеОбОшибке, ПолучитьНавигационнуюСсылку(ФайлСсылка));
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции // СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора()

Функция ПоместитьФайлВТомеВоВременноеХранилище(ФайлСсылка, ВерсияСсылка, ДанныеФайла, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
	|	ВерсииФайлов.Том КАК Том
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Ссылка = &Версия";
	
	Запрос.Параметры.Вставить("Версия", ДанныеФайла.Версия);
	
	ДанныеФайлаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	ДанныеФайлаПутьКФайлу = "";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеФайлаТом = Выборка.Том;
		ДанныеФайлаПутьКФайлу = Выборка.ПутьКФайлу;
	КонецЕсли;
	
	Если НЕ ДанныеФайлаТом.Пустая() Тогда
		ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ДанныеФайлаТом) + ДанныеФайлаПутьКФайлу; 
		Попытка
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
			// Работаем только с текущей версией - для не-текущей ссылку получаем в ПолучитьНавигационнуюСсылкуДляОткрытия.
			Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			
		Исключение
			// Запись в журнал регистрации.
			СсылкаНаФайл = ?(ФайлСсылка <> Неопределено, ФайлСсылка, ВерсияСсылка);
			СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
				ИнформацияОбОшибке(), СсылкаНаФайл);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Открытие файла'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Файлы,
				ФайлСсылка,
				СообщениеОбОшибке);
				
			ТипВладельцаФайла = ТипЗнч(ДанныеФайла.Владелец);
			Если ТипВладельцаФайла = Тип("СправочникСсылка.ПапкиФайлов") Тогда
				ПредставлениеВладельца = ПолныйПутьПапки(ДанныеФайла.Владелец);
			Иначе
				ПредставлениеВладельца = ДанныеФайла.Владелец;
			КонецЕсли;
			ПредставлениеВладельцаФайла = СтрШаблон(
				НСтр("ru = 'Присоединен к %1 : %2'"),
				Строка(ТипВладельцаФайла),
				ПредставлениеВладельца);
				
			ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение,
				,
				ПредставлениеВладельцаФайла);
				
		КонецПопытки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

// Создаст пустое Соответствие
Функция ШтампыПодписейПустая()

	ДанныеВозврата = Новый Соответствие();
	ДанныеВозврата.Вставить(ВизуализацияЭПКлиентСервер.ТегВсеПодписи(), Новый Массив);
	ДанныеВозврата.Вставить(ВизуализацияЭПКлиентСервер.ТегНашиПодписи(), Новый Массив);
	ДанныеВозврата.Вставить(ВизуализацияЭПКлиентСервер.ТегПодписиКонтрагентов(), Новый Массив);
	
	Возврат ДанныеВозврата;
	
КонецФункции	

// Создаст отметки подписи png если их еще нет.
// 
// Параметры:   
//   ДанныеВозврата -	Соответствие из КлючИЗначение:
//   * Ключ - Строка - см. ВизуализацияЭПКлиентСервер.ТегВсеПодписи
//                     см. ВизуализацияЭПКлиентСервер.ТегНашиПодписи
//                     см. ВизуализацияЭПКлиентСервер.ТегПодписиКонтрагентов
//   * Значение - Массив из см. РаботаСЭП.НовыйДанныеОтметки.
//  ВладелецФайла - СправочникССылка.ДокументыПредприятия
// 
Процедура ШтампыПодписейПЭП(ДанныеВозврата, ВладелецФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПодписантов = ДействияСервер.ДанныеПодписантовПЭП(ВладелецФайла);

	ДанныеВсехОтметок = ДанныеВозврата[ВизуализацияЭПКлиентСервер.ТегВсеПодписи()];
	ДанныеНашихОтметок = ДанныеВозврата[ВизуализацияЭПКлиентСервер.ТегНашиПодписи()];
	
	ИтоговыйФорматPdf = Ложь;
	НастройкиШтампаЭП = ПолучитьНастройкиШтампаЭП(ВладелецФайла);
	Если НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.PDFA Тогда
		ИтоговыйФорматPdf = Истина;
	КонецЕсли;	
	
	Для Каждого ДанныеПодписанта Из ДанныеПодписантов Цикл
		
		ПутьКОтметкеЭП = РаботаСЭП.СоздатьОтметкуПЭП(ДанныеПодписанта, ИтоговыйФорматPdf);
		
		ДанныеОтметки = РаботаСЭП.НовыйДанныеОтметки(Новый ДвоичныеДанные(ПутьКОтметкеЭП), Неопределено);
		ДанныеОтметки.ТипЭП = "ПЭП";
		
		ДанныеВсехОтметок.Добавить(ДанныеОтметки);
		ДанныеНашихОтметок.Добавить(ДанныеОтметки);
		
	КонецЦикла;
		
КонецПроцедуры

//// Вернет картинку только для указанного сотрудника 
// 
// Параметры:
//  ВладелецФайла - СправочникССылка.ДокументыПредприятия
//  Сотрудник - СправочникСсылка.Сотрудники
// 
// Возвращаемое значение 
// 	ДвоичныеДанные, Неопределено
//
Функция ШтампПодписиПЭП(ВладелецФайла, Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПодписантов = ДействияСервер.ДанныеПодписантовПЭП(ВладелецФайла);

	ИтоговыйФорматPdf = Ложь;
	НастройкиШтампаЭП = ПолучитьНастройкиШтампаЭП(ВладелецФайла);
	Если НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.PDFA Тогда
		ИтоговыйФорматPdf = Истина;
	КонецЕсли;	
	
	Для Каждого ДанныеПодписанта Из ДанныеПодписантов Цикл
		
		Если ДанныеПодписанта.Подписант = Сотрудник Тогда
		
			ПутьКОтметкеЭП = РаботаСЭП.СоздатьОтметкуПЭП(ДанныеПодписанта, ИтоговыйФорматPdf);
			ДвДанные = Новый ДвоичныеДанные(ПутьКОтметкеЭП);
			Возврат ДвДанные;
		
		КонецЕсли;
		
	КонецЦикла;	
		
	Возврат Неопределено;
	
КонецФункции

// Создаст если его еще нет, или прочитает отметки ЭП png для указанной версии файла документа.
// 
// Параметры:          
//   ДанныеВозврата -	Соответствие из КлючИЗначение:
//   * Ключ - Строка - см. ВизуализацияЭПКлиентСервер.ТегВсеПодписи
//                     см. ВизуализацияЭПКлиентСервер.ТегНашиПодписи
//                     см. ВизуализацияЭПКлиентСервер.ТегПодписиКонтрагентов
//   * Значение - Массив из см. РаботаСЭП.НовыйДанныеОтметки.
//   ТекущаяВерсия - СправочникСсылка.ВерсииФайлов
//   ВладелецФайла - СправочникСсылка.ДокументыПредприятия
// 
Процедура ШтампыПодписейЭП(ДанныеВозврата, ТекущаяВерсия, ВладелецФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ТекущаяВерсия);
	НаборЗаписей.Прочитать();
	
	ЭтоДокументМЭДОСВнешнейПодписью = МЭДОПереопределяемый.ЭтоДокументМЭДОСВнешнейПодписью(ВладелецФайла);
	
	Для Каждого ЭП Из НаборЗаписей Цикл
		Положение = Неопределено;
		ФайлОтметки = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
			ВладелецФайла, 
			Строка(ЭП.ИдентификаторПодписи), 
			Перечисления.ОтношенияСлужебныхФайлов.ОтметкаЭП,
			Положение);
		
		ЭтоПодписьНашейОрганизации = РаботаСЭП.ЭтоПодписьНашейОрганизации(ЭП.Отпечаток);
		
		Если ЗначениеЗаполнено(ФайлОтметки) Тогда
			ДвДанные = ПолучитьДвоичныеДанныеФайла(ФайлОтметки);
		
		ИначеЕсли ЭтоДокументМЭДОСВнешнейПодписью И Не ЭтоПодписьНашейОрганизации Тогда
			// Для входящего документа МЭДО не надо генерировать отметку подписи,
			// она должна уже быть, если нет - это ненормальная ситуация, но она не должна мешать визуализации:
			Продолжить;
		Иначе
			
			ИтоговыйФорматPdf = Ложь;
			НастройкиШтампаЭП = ПолучитьНастройкиШтампаЭП(ВладелецФайла);
			Если НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.PDFA Тогда
				ИтоговыйФорматPdf = Истина;
			КонецЕсли;	
			
			ОписаниеЭП = РаботаСЭП.ОписаниеЭПДляОтметки(ЭП);
			ПутьКОтметкеЭП = РаботаСЭП.СоздатьОтметкуЭП(ОписаниеЭП, ИтоговыйФорматPdf);
			ДвДанные = Новый ДвоичныеДанные(ПутьКОтметкеЭП);
		КонецЕсли;
		ДанныеОтметки = РаботаСЭП.НовыйДанныеОтметки(ДвДанные, Положение);
		ДанныеОтметки.ТипЭП = "КЭП";
		
		ДанныеВсехОтметок = ДанныеВозврата[ВизуализацияЭПКлиентСервер.ТегВсеПодписи()];
		ДанныеВсехОтметок.Добавить(ДанныеОтметки);
		
		Если ЭтоПодписьНашейОрганизации Тогда
			
			МассивНашиПодписи = ДанныеВозврата[ВизуализацияЭПКлиентСервер.ТегНашиПодписи()];
			МассивНашиПодписи.Добавить(ДанныеОтметки);
			
		Иначе
				
			МассивПодписиКонтрагентов 
				= ДанныеВозврата[ВизуализацияЭПКлиентСервер.ТегПодписиКонтрагентов()];
			МассивПодписиКонтрагентов.Добавить(ДанныеОтметки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет визуализацию ЭП при смене подписей или ориг файла
// 
// Параметры:
// 	ВладелецФайла - ОпределяемыйТип.ВладелецФайлов
// 	Файл - СправочникСсылка.Файлы
// 	ТекущаяВерсия - СправочникСсылка.ВерсииФайлов
Процедура УдалитьВизуализациюЭП(ВладелецФайла, Файл, ТекущаяВерсия) Экспорт
	
	ФайлВизуализация = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		ВладелецФайла, Файл, 
		Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);

	Если ЗначениеЗаполнено(ФайлВизуализация) Тогда
		
		// Удалим текущую версию из кэша, поскольку мы имеем неактуальные подписи, а значит и неактуальные штампы ЭП.
		УдалитьИзРегистраЗаписиДляВсехКомпьютеров(ТекущаяВерсия);
		
		РегистрыСведений.СлужебныеФайлыДокументов.УдалитьФайл(ФайлВизуализация);
		
	КонецЕсли;

	РегистрыСведений.ПредпросмотрФайлов.Удалить(Файл);
	
КонецПроцедуры	

// Выполнить правило автозаполнения.
// 
// Параметры:
//  ФактическийВладелецФайла - СправочникСсылка.ДокументыПредприятия - Владелец файла
//  Файл - СправочникСсылка.Файлы - Файл
//  ФайлОснование - СправочникСсылка.Файлы - Файл шаблон-основание.
// 	ШтампыПодписейЭП - Соответствие из КлючИЗначение:
//   * Ключ - Строка - см. ВизуализацияЭПКлиентСервер.ТегВсеПодписи
//                     см. ВизуализацияЭПКлиентСервер.ТегНашиПодписи
//                     см. ВизуализацияЭПКлиентСервер.ТегПодписиКонтрагентов
//   * Значение - Массив из см. РаботаСЭП.НовыйДанныеОтметки.
Процедура ВыполнитьПравилоАвтозаполнения(ФактическийВладелецФайла, 
	Файл, ФайлОснование, ШтампыПодписейЭП)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПравилаАвтозаполненияФайловСкриптыШтамповЭП.НомерСтроки,
		|	ПравилаАвтозаполненияФайловСкриптыШтамповЭП.Ссылка,
		|	ПравилаАвтозаполненияФайловСкриптыШтамповЭП.ЗаменяемаяСтрока,
		|	ПравилаАвтозаполненияФайловСкриптыШтамповЭП.ТекстСкрипта
		|ИЗ
		|	Справочник.ПравилаАвтозаполненияФайлов.СкриптыШтамповЭП КАК ПравилаАвтозаполненияФайловСкриптыШтамповЭП
		|ГДЕ
		|	ПравилаАвтозаполненияФайловСкриптыШтамповЭП.Ссылка.ШаблонФайла = &ШаблонФайла";
	
	Запрос.УстановитьПараметр("ШаблонФайла", ФайлОснование);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаменяемаяСтрока)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТекстСкрипта) Тогда
			Попытка
				УстановитьБезопасныйРежим(Истина);
				РезультатОбработки = "";
				Выражение = СтрЗаменить(ВыборкаДетальныеЗаписи.ТекстСкрипта, 
					"Файл.ВладелецФайла", "ФактическийВладелецФайла");
				Выполнить(Выражение);
				УстановитьБезопасныйРежим(Ложь);
				
				// РезультатОбработки - это СправочникСсылка.Файлы
				Если ТипЗнч(РезультатОбработки) = Тип("СправочникСсылка.Файлы") Тогда
					
					ДвДанные = ПолучитьДвоичныеДанныеФайла(РезультатОбработки);
					ДанныеОтметки = РаботаСЭП.НовыйДанныеОтметки(ДвДанные, Неопределено);
					ДанныеОтметок = Новый Массив;
					ДанныеОтметок.Добавить(ДанныеОтметки);
					ШтампыПодписейЭП.Вставить(ВыборкаДетальныеЗаписи.ЗаменяемаяСтрока, ДанныеОтметок);

				ИначеЕсли ТипЗнч(РезультатОбработки) = Тип("Массив") Тогда  // массив файлов
					
					ДанныеОтметок = Новый Массив;
					
					Для Каждого СтрФайл Из РезультатОбработки Цикл
						
						Если ТипЗнч(СтрФайл) = Тип("СправочникСсылка.Файлы") Тогда
							ДвДанные = ПолучитьДвоичныеДанныеФайла(СтрФайл);
						ИначеЕсли ТипЗнч(СтрФайл) = Тип("ДвоичныеДанные") Тогда
							ДвДанные = СтрФайл;
						КонецЕсли;	
						
						ДанныеОтметки = РаботаСЭП.НовыйДанныеОтметки(ДвДанные, Неопределено);
						ДанныеОтметок.Добавить(ДанныеОтметки);
					КонецЦикла;
					
					ШтампыПодписейЭП.Вставить(ВыборкаДетальныеЗаписи.ЗаменяемаяСтрока, ДанныеОтметок);
					
				ИначеЕсли ТипЗнч(РезультатОбработки) = Тип("ДвоичныеДанные") Тогда
						
					ДанныеОтметки = РаботаСЭП.НовыйДанныеОтметки(РезультатОбработки, Неопределено);
					ДанныеОтметок = Новый Массив;
					ДанныеОтметок.Добавить(ДанныеОтметки);
					ШтампыПодписейЭП.Вставить(ВыборкаДетальныеЗаписи.ЗаменяемаяСтрока, ДанныеОтметок);
					
				КонецЕсли;
				
			Исключение
				
				СтрОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ВыполнитьПравилоАвтозаполнения'"),
					УровеньЖурналаРегистрации.Ошибка,
					,
					Файл,
					СтрОшибка);
				
			КонецПопытки;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция ДляДанногоФайлаМожноИспользовать1СШтамп(ДанныеФайла, ИтоговыйФорматФайлаСоШтампомЭП)  
	
	Использовать1СШтамп = ВизуализацияПовтИсп.Использовать1СШтамп();
	
	Если Не Использовать1СШтамп Тогда // проверим и возможно  Использовать1СШтамп поставим Ложь  
		Возврат Ложь;
	КонецЕсли;	
	
	// проверим и возможно  Использовать1СШтамп поставим Ложь  
		
	// Смотрим на настройки (на гриф, вид документа, настройка «Итоговый формат», размер файла (превышает ли 5 мб), 
	// есть ли в doc docx файле ВставитьЭП и другие теги
	
	Если ИтоговыйФорматФайлаСоШтампомЭП <> Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.PDFA Тогда
		Возврат Ложь;
	КонецЕсли;	  
	
	Если ДанныеФайла.Размер > 30000000 Тогда // более 30 мб
		Возврат Ложь;
	КонецЕсли;	  
	
	ГрифыДоступаДля1СШтамп = ВизуализацияПовтИсп.ГрифыДоступаДля1СШтамп();
	ВидыДокументовДля1СШтамп = ВизуализацияПовтИсп.ВидыДокументовДля1СШтамп();
	
	Если ГрифыДоступаДля1СШтамп.Количество() <> 0 Или ВидыДокументовДля1СШтамп.Количество() <> 0 Тогда  
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеФайла.Владелец, "ВидДокумента, ГрифДоступа");
		
		Если ГрифыДоступаДля1СШтамп.Количество() <> 0 И ГрифыДоступаДля1СШтамп.Найти(РеквизитыДокумента.ГрифДоступа) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		Если ВидыДокументовДля1СШтамп.Количество() <> 0 Тогда
			
			ВходитВГруппу = Ложь;
			Если ВидыДокументовДля1СШтамп.Найти(РеквизитыДокумента.ВидДокумента) = Неопределено Тогда
				// проверим на вхождение в группы
				
				Для Каждого ВидДокументаШтамп Из ВидыДокументовДля1СШтамп Цикл     
					Если РеквизитыДокумента.ВидДокумента.ПринадлежитЭлементу(ВидДокументаШтамп) Тогда
						ВходитВГруппу = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	

				Если Не ВходитВГруппу Тогда
					Возврат Ложь;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЭтоМЭДО = МЭДОПереопределяемый.ЭтоДокументМЭДО(ДанныеФайла.Владелец, Перечисления.НаправленияСообщенийМЭДО.Входящее)
		Или МЭДОПереопределяемый.ЭтоДокументМЭДО(ДанныеФайла.Владелец, Перечисления.НаправленияСообщенийМЭДО.Исходящее);
	Если ЭтоМЭДО Тогда	
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Использовать1СШтамп;
	
КонецФункции	
	
Процедура ДобавитьВизуализациюЭП(ДанныеФайла, ИдентификаторФормы) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеФайла.Вставить("ТребуетсяСоздатьВизуализациюЭП", Ложь);
	ДанныеФайла.Вставить("ВизуализацияЭПДобавлена", Ложь);
	
	НастройкиШтампаЭП = ПолучитьНастройкиШтампаЭП(ДанныеФайла.Владелец);
	ДанныеФайла.Вставить("НастройкиШтампаЭП", НастройкиШтампаЭП);
	
	Если ДанныеФайла.РедактируетТекущийПользователь	
		Или ДанныеФайла.Зашифрован
		Или Не РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(ДанныеФайла.Расширение) 
		Или Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ДанныеФайла.Владелец) Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(ДанныеФайла.Расширение) = "pdf" Тогда
		ФайлРегистрационныйШтамп = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
			ДанныеФайла.Владелец, ДанныеФайла.Ссылка, Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации);
	КонецЕсли;	
	
	Если (Не ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП") И Не ЗначениеЗаполнено(ФайлРегистрационныйШтамп)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДокументПодписан = ДействияСервер.ДокументПодписан(ДанныеФайла.Владелец);
	
	Если Не ДокументПодписан И Не ДанныеФайла.ПодписанЭП
		И Не ЗначениеЗаполнено(ФайлРегистрационныйШтамп) Тогда
		Возврат;
	КонецЕсли;
		
	Если Делопроизводство.ФайлЯвляетсяОригиналом(ДанныеФайла.Ссылка)
		И Не ЗначениеЗаполнено(ФайлРегистрационныйШтамп) Тогда
		Возврат;
	КонецЕсли;      
	
	ИтоговыйФорматФайлаСоШтампомЭП = ДанныеФайла.НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП;
	
	Использовать1СШтамп = ДляДанногоФайлаМожноИспользовать1СШтамп(ДанныеФайла, ИтоговыйФорматФайлаСоШтампомЭП);  
	
	НастройкиШтампаЭП.Использовать1СШтамп = Использовать1СШтамп;

	Если НРег(ДанныеФайла.Расширение) = "pdf" Тогда
		
		СпособВставкиШтампаЭПВPDF = ПолучитьСпособВставкиШтампаЭПВPDF();
		
		ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииПовтИсп.ИспользоватьImageMagickДляРаспознаванияPDF();
		ИспользоватьGhostscript = ФайловыеФункцииПовтИсп.ИспользоватьGhostscript();
			
		Если (СпособВставкиШтампаЭПВPDF = Перечисления.СпособыВставкиШтампаЭПВPDF.ImageMagickGhostscript)
			И (Не ИспользоватьGhostscript Или Не ИспользоватьImageMagickДляРаспознаванияPDF) Тогда	
			Возврат;	
		КонецЕсли; 	
		
	КонецЕсли;	

	ФайлВизуализация = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		ДанныеФайла.Владелец, ДанныеФайла.Ссылка, Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);

	ФайлВизуализацииУжеБыл = ЗначениеЗаполнено(ФайлВизуализация);

	Если Не ЗначениеЗаполнено(ФайлВизуализация) Тогда         
		
		ШтампыПодписейЭП = ШтампыПодписейПустая();
		
		Если ДанныеФайла.ПодписанЭП Тогда 
			ШтампыПодписейЭП(ШтампыПодписейЭП, ДанныеФайла.Версия, ДанныеФайла.Владелец);
		КонецЕсли;	
		
		Если ДокументПодписан Тогда
			ШтампыПодписейПЭП(ШтампыПодписейЭП, ДанныеФайла.Владелец);
		КонецЕсли;	
		
		// получим настройки автозаполнения.
		ШаблонОснованиеДляСоздания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДанныеФайла.Ссылка, "ШаблонОснованиеДляСоздания");

		Если ЗначениеЗаполнено(ШаблонОснованиеДляСоздания) Тогда
			ВыполнитьПравилоАвтозаполнения(
				ДанныеФайла.Владелец,
				ДанныеФайла.Ссылка, 
				ШаблонОснованиеДляСоздания, ШтампыПодписейЭП);
		КонецЕсли;				
	
	КонецЕсли;		     
	
	ИспользоватьLibreOffice = ФайловыеФункцииПовтИсп.ИспользоватьLibreOffice();
	
	ВыполняемНаСервере = Ложь;
	Если (Использовать1СШтамп Или ИспользоватьLibreOffice) 
		И (ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Или ОбщегоНазначения.ЭтоВебКлиент()) Тогда
		ВыполняемНаСервере = Истина;
	КонецЕсли;	
	
	Если Не ВыполняемНаСервере
		И Не ЗначениеЗаполнено(ФайлВизуализация)
		И (НРег(ДанныеФайла.Расширение) = "doc" 
		Или НРег(ДанныеФайла.Расширение) = "xls" Или НРег(ДанныеФайла.Расширение) = "xlsx") Тогда
		
		ДанныеФайла.Вставить("ТребуетсяСоздатьВизуализациюЭП", Истина);
		// добавим дв данные картинки
		ДанныеФайла.Вставить("ШтампыПодписейЭП", ШтампыПодписейЭП);
		
		Возврат; // не создана визуализация, сейчас создадим - на клиенте
	КонецЕсли;
	
	// если расширение docx odt pdf xlsx - прямо тут , на сервере создадим визуализацию  и запишем в РС СлужебныеФайлыДокументов
	
	Если Не ЗначениеЗаполнено(ФайлВизуализация) Тогда
		
		ДанныеФайла.Вставить("ШтампыПодписейЭП", ШтампыПодписейЭП);
		
		ТребуетсяЗаполнитьВизуализацию = Ложь;
		ФайлВизуализация = ПолучитьВизуализациюЭП(ДанныеФайла, ИдентификаторФормы, ТребуетсяЗаполнитьВизуализацию);
		Если Не ЗначениеЗаполнено(ФайлВизуализация) Тогда
			// была ошибка, мы ее уже показали
			Если ТребуетсяЗаполнитьВизуализацию Тогда      
				
				ДанныеФайла.Вставить("ТребуетсяСоздатьВизуализациюЭП", Истина);
				
				Если Не ОбщегоНазначения.ЭтоWindowsКлиент()
					И ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.PDFA")
					И (НРег(ДанныеФайла.Расширение) = "doc" Или НРег(ДанныеФайла.Расширение) = "docx"
					Или НРег(ДанныеФайла.Расширение) = "odt" 
					Или НРег(ДанныеФайла.Расширение) = "xls"
					Или НРег(ДанныеФайла.Расширение) = "xlsx") Тогда
					
					ДанныеФайла.ТребуетсяСоздатьВизуализациюЭП = Ложь;
				
				КонецЕсли;
				
			КонецЕсли;	
			Возврат;
		КонецЕсли;	
		
		РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
			ДанныеФайла.Владелец, 
			ДанныеФайла.Ссылка,
			Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП,
			ФайлВизуализация);
			
	КонецЕсли;		
	
	ДанныеФайла.Вставить("ВизуализацияЭПДобавлена", Истина);
	
	Если ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.PDFA") Тогда
		
		ДанныеФайла.Вставить("РасширениеОригинальноеБезВизуализации", ДанныеФайла.Расширение);	
		
	КонецЕсли;		
	
	Если ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.PDFA") 
		И ДанныеФайла.ТекущаяВерсия = ДанныеФайла.Версия
		И Не ФайлВизуализацииУжеБыл Тогда
			
		ДанныеФайла.Вставить("РасширениеОригинальное", ДанныеФайла.Расширение);	
		ДанныеФайла.Расширение = "pdf";
		
	ИначеЕсли ФайлВизуализацииУжеБыл Тогда
		
		ТекущаяВерсияРасширение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлВизуализация, "ТекущаяВерсияРасширение");
		ДанныеФайла.Расширение = ТекущаяВерсияРасширение;
				
	КонецЕсли;	
	
	ДобавитьфайлВизуализацияВНавигационнаяСсылкаТекущейВерсии(ДанныеФайла, ФайлВизуализация, ИдентификаторФормы);	
	
	ПредыдущийАдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	
КонецПроцедуры

//  Создаем из ДвДанных файл визуализации. Записываем в РС СлужебныеФайлы. Формируем в ДанныеФайла.НавигационнаяСсылкаТекущейВерсии
Функция СоздатьВизуализациюИЗаполнитьДанныеФайла(ДанныеФайла, ДвоичныеДанныеНовые, ИдентификаторФормы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИтоговыйФорматФайлаСоШтампомЭП = ДанныеФайла.НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП;
	ИспользоватьLibreOffice = ФайловыеФункцииПовтИсп.ИспользоватьLibreOffice();
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.ИмяБезРасширения = ДанныеФайла.ПолноеНаименованиеВерсии + НСтр("ru = ' (со штампом ЭП)'");
	СведенияОФайле.РасширениеБезТочки = ДанныеФайла.Расширение;
	СведенияОФайле.Комментарий = НСтр("ru = 'Визуализация ЭП'");
	
	Если ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.PDFA") Тогда
		
		Если Не ДанныеФайла.НастройкиШтампаЭП.Использовать1СШтамп
			И Не ИспользоватьLibreOffice
			И ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент()
			И НРег(ДанныеФайла.Расширение) = "doc" Тогда
			СведенияОФайле.РасширениеБезТочки = ДанныеФайла.Расширение;
		Иначе	
			СведенияОФайле.РасширениеБезТочки = "pdf";
		КонецЕсли;	
		
	КонецЕсли;	
	
	СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеНовые);
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ВремяИзмененияУниверсальное = УниверсальноеВремя(СведенияОФайле.ВремяИзменения);
	СведенияОФайле.Размер = ДвоичныеДанныеНовые.Размер();
	
	СведенияОФайле.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	СведенияОФайле.Вставить("ДобавлениеРегШтампа", Истина);
	
	ФайлВизуализация = СоздатьФайлСВерсией(ДанныеФайла.Владелец, СведенияОФайле);

	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
		ДанныеФайла.Владелец, 
		ДанныеФайла.Ссылка,
		Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП,
		ФайлВизуализация);
		
	ДобавитьфайлВизуализацияВНавигационнаяСсылкаТекущейВерсии(ДанныеФайла, ФайлВизуализация, ИдентификаторФормы);	
	
	Возврат ФайлВизуализация;
	
КонецФункции

//  добавим ФайлВизуализация в НавигационнаяСсылкаТекущейВерсии вместо оригинального файла
Процедура ДобавитьфайлВизуализацияВНавигационнаяСсылкаТекущейВерсии(ДанныеФайла, ФайлВизуализация, ИдентификаторФормы) Экспорт
	
	//  добавим ФайлВизуализация в НавигационнаяСсылкаТекущейВерсии вместо оригинального файла
	Версия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлВизуализация, "ТекущаяВерсия");
	РеквВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Версия, "ТипХраненияФайла, ПутьКФайлу, Том");
	ТипХраненияФайла = РеквВерсии.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда	
		
		СтруктураКлюча = Новый Структура("Файл", Версия);
		КлючЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьКлючЗаписи(СтруктураКлюча);
		НавигационнаяСсылкаТекущейВерсии = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ДвоичныеДанныеФайла");

		ДанныеФайла.Вставить("НавигационнаяСсылкаТекущейВерсииОригинальная", 
			ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
		
		ДанныеФайла.Вставить("НавигационнаяСсылкаТекущейВерсии", НавигационнаяСсылкаТекущейВерсии);

		ДанныеФайла.Вставить("СсылкаТекущейВерсии", Версия);
		
	ИначеЕсли ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		
		Если НЕ РеквВерсии.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(РеквВерсии.Том) + РеквВерсии.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				// Работаем только с текущей версией - для не-текущей ссылку получаем в ПолучитьНавигационнуюСсылкуДляОткрытия.

				ДанныеФайла.Вставить("НавигационнаяСсылкаТекущейВерсииОригинальная", 
					ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
				
				ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
				
			Исключение
				// Запись в журнал регистрации.
				СсылкаНаФайл = ФайлВизуализация;
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), СсылкаНаФайл);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ФайлВизуализация,
					СообщениеОбОшибке);
					
				ТипВладельцаФайла = ТипЗнч(ДанныеФайла.Владелец);
				Если ТипВладельцаФайла = Тип("СправочникСсылка.ПапкиФайлов") Тогда
					ПредставлениеВладельца = ПолныйПутьПапки(ДанныеФайла.Владелец);
				Иначе
					ПредставлениеВладельца = ДанныеФайла.Владелец;
				КонецЕсли;
				ПредставлениеВладельцаФайла = СтрШаблон(
					НСтр("ru = 'Присоединен к %1 : %2'"),
					Строка(ТипВладельцаФайла),
					ПредставлениеВладельца);
					
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение,
					,
					ПредставлениеВладельцаФайла);
					
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталогеДляУдаления", ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге);
	
	ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге = ""; // не берем из кеша
	УдалитьИзРегистра(ДанныеФайла.Версия); // удалим инфо из кеша
	
КонецПроцедуры

Функция ЭтоВставкаНаКлиенте(Расширение, СтраницаВставкиШтампаЭП, 
	ИтоговыйФорматФайлаСоШтампомЭП, ИспользоватьLibreOffice)
	
	ВставкаНаКлиенте = 
		(НРег(Расширение) = "doc")
		Или 
		(НРег(Расширение) = "docx" 
		И СтраницаВставкиШтампаЭП = ПредопределенноеЗначение("Перечисление.СтраницаВставкиКартинки.Каждая"))
		Или 
		(НРег(Расширение) <> "pdf" 
		И ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.PDFA
		И Не ИспользоватьLibreOffice)
		Или 
		НРег(Расширение) = "xls";
		
	Возврат ВставкаНаКлиенте;	
	
КонецФункции	

Функция ПолучитьВизуализациюЭП(ДанныеФайла, ИдентификаторФормы, ТребуетсяЗаполнитьВизуализацию)
	
	ФайлВизуализация = Неопределено;
	
	ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге = ""; // не берем из кеша
	УдалитьИзРегистра(ДанныеФайла.Версия); // удалим инфо из кеша
	
	Если ДанныеФайла.Свойство("НастройкиШтампаЭП") Тогда
		НастройкиШтампаЭП = ДанныеФайла.НастройкиШтампаЭП;
	Иначе	
		НастройкиШтампаЭП = ПолучитьНастройкиШтампаЭП(ДанныеФайла.Владелец);
	КонецЕсли;	
	
	СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;
	ИтоговыйФорматФайлаСоШтампомЭП = НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП;
	
	ИспользоватьLibreOffice = ФайловыеФункцииПовтИсп.ИспользоватьLibreOffice();
	
	ВставкаНаКлиенте = ЭтоВставкаНаКлиенте(ДанныеФайла.Расширение, СтраницаВставкиШтампаЭП, 
		ИтоговыйФорматФайлаСоШтампомЭП, ИспользоватьLibreOffice); 
	
	Если НастройкиШтампаЭП.Использовать1СШтамп 
		И (	НРег(ДанныеФайла.Расширение) = "xls"
		Или НРег(ДанныеФайла.Расширение) = "xlsx") Тогда
		ВставкаНаКлиенте = Ложь;
	КонецЕсли;

	// Если Linux или веб клиент, и Использовать1СШтамп = Истина - принудительно делаем генерацию на сервере.
	// Т.к. на клиенте нет возможности  через COM что то сделать
	Если (НастройкиШтампаЭП.Использовать1СШтамп Или ИспользоватьLibreOffice)
		И (ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Или ОбщегоНазначения.ЭтоВебКлиент())
		И (	НРег(ДанныеФайла.Расширение) = "doc"
		Или НРег(ДанныеФайла.Расширение) = "docx"
		Или НРег(ДанныеФайла.Расширение) = "odt") Тогда
		ВставкаНаКлиенте = Ложь;
	КонецЕсли;
	
	Если ВставкаНаКлиенте Тогда
		ТребуетсяЗаполнитьВизуализацию = Истина;
		Возврат Неопределено;
	КонецЕсли;		 
	
	ВыполняемНаСервере = Ложь;
	Если (НастройкиШтампаЭП.Использовать1СШтамп Или ИспользоватьLibreOffice)
		И (ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Или ОбщегоНазначения.ЭтоВебКлиент()) Тогда
		ВыполняемНаСервере = Истина;
	КонецЕсли;	
	
	Если ВыполняемНаСервере
		Или
		(((НРег(ДанныеФайла.Расширение) = "docx"  
		Или НРег(ДанныеФайла.Расширение) = "doc"
		Или НРег(ДанныеФайла.Расширение) = "odt")
		И Не ВставкаНаКлиенте)
		Или (НастройкиШтампаЭП.Использовать1СШтамп И НРег(ДанныеФайла.Расширение) = "xls")) Тогда
		
		// делаем автозаполнение.
		
		ШтампыПодписейЭП = ДанныеФайла.ШтампыПодписейЭП; // см. ШтампыПодписейЭП
		
		ДвДанныеФайлаDoc = ПолучитьДвоичныеДанныеФайла(ДанныеФайла.Ссылка);
		
		ВыполнитьЗаполнениеРегДанныхЕслиНужно(ДвДанныеФайлаDoc, ДанныеФайла);
		
		ДвоичныеДанныеНовые = ВизуализацияЭПКлиентСервер.ВставитьВизуализациюЭПВместоТэга(
			ДвДанныеФайлаDoc, ДанныеФайла.Расширение, 
			ШтампыПодписейЭП, НастройкиШтампаЭП);
			
		Если ТипЗнч(ДвоичныеДанныеНовые) = Тип("ДвоичныеДанные") Тогда 
				
			Если ИспользоватьLibreOffice Тогда
				ДвоичныеДанныеНовые = ДвоичныеДанныеPDFПреобразованныеВLibreOffice(ДвоичныеДанныеНовые, ДанныеФайла.Расширение);
			КонецЕсли;	
				
			ФайлВизуализация = СоздатьВизуализациюИЗаполнитьДанныеФайла(
				ДанныеФайла, ДвоичныеДанныеНовые, ИдентификаторФормы);	
		КонецЕсли;	
		
	ИначеЕсли НРег(ДанныеФайла.Расширение) = "pdf" Тогда      
		
		Возврат ПолучитьВизуализациюЭпДляPDF(ДанныеФайла, ИдентификаторФормы, ТребуетсяЗаполнитьВизуализацию);
		
	КонецЕсли;
	
	Возврат ФайлВизуализация;
	
КонецФункции

Функция ПолучитьВизуализациюЭпДляPDF(ДанныеФайла, ИдентификаторФормы, ТребуетсяЗаполнитьВизуализацию)
	
	ФайлВизуализация = Неопределено;
	
	СпособВставкиШтампаЭПВPDF = ПолучитьСпособВставкиШтампаЭПВPDF();
	
	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	
	ПоложениеРегШтампаОрганизации = Неопределено; // См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
	ФайлРегистрационныйШтампОрганизации = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		ДанныеФайла.Владелец,
		ДанныеФайла.Ссылка,
		Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации,
		ПоложениеРегШтампаОрганизации);
	// Признак, что вставка отметок по заданным координатам, а не по настройкам ДО:
	ЕстьПоложениеРегШтампаОрганизации = МЭДО.ЭтоЗаполненноеПоложениеИзображения(ПоложениеРегШтампаОрганизации);
	ИмяФайлаРегШтампОрганизации = "";
	ДвДанныеФайлаРегШтамп = Неопределено;
	Если ЗначениеЗаполнено(ФайлРегистрационныйШтампОрганизации) Тогда
		ДвДанныеФайлаРегШтамп = ПолучитьДвоичныеДанныеФайла(ФайлРегистрационныйШтампОрганизации);
		ИмяФайлаРегШтампОрганизации = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "reg_org.png";
		ДвДанныеФайлаРегШтамп.Записать(ИмяФайлаРегШтампОрганизации);
	КонецЕсли;
	
	ПоложениеРегШтампаКорреспондента = Неопределено; // См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
	ФайлРегистрационныйШтампКорреспондента = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		ДанныеФайла.Владелец,
		ДанныеФайла.Ссылка,
		Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампКорреспондента,
		ПоложениеРегШтампаКорреспондента);
	// Признак, что вставка отметок по заданным координатам, а не по настройкам ДО:
	ЕстьПоложениеРегШтампаКорреспондента = МЭДО.ЭтоЗаполненноеПоложениеИзображения(ПоложениеРегШтампаКорреспондента);
	ИмяФайлаРегШтампКорреспондента = "";
	Если ЗначениеЗаполнено(ФайлРегистрационныйШтампКорреспондента) Тогда
		ДвДанныеФайлаРегШтамп = ПолучитьДвоичныеДанныеФайла(ФайлРегистрационныйШтампКорреспондента);
		ИмяФайлаРегШтампКорреспондента = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
			+ "reg_korr.png";
		ДвДанныеФайлаРегШтамп.Записать(ИмяФайлаРегШтампКорреспондента);
	КонецЕсли;
	
	ФайлШтрихкод = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		ДанныеФайла.Владелец, ДанныеФайла.Ссылка, Перечисления.ОтношенияСлужебныхФайлов.Штрихкод);
	
	ДвДанныеФайлаPdf = ПолучитьДвоичныеДанныеФайла(ДанныеФайла.Ссылка);
	ИмяФайлаPdf = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
		+ "src.pdf";
	ДвДанныеФайлаPdf.Записать(ИмяФайлаPdf);
	ИмяФайлаPdfНовое = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
		+ "new.pdf";
	
	ИмяФайлаШтрихкод = "";	 
	ДвДанныеФайлаШтрихкод = Неопределено;
	Если ЗначениеЗаполнено(ФайлШтрихкод) Тогда
		
		ДвДанныеФайлаШтрихкод = ПолучитьДвоичныеДанныеФайла(ФайлШтрихкод);
		ИмяФайлаШтрихкод = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
			+ "barcode.png";
		ДвДанныеФайлаШтрихкод.Записать(ИмяФайлаШтрихкод);
				
	КонецЕсли;		 

	ШтампыПодписейЭП = ДанныеФайла.ШтампыПодписейЭП; // см. ШтампыПодписейЭП
	
	Если ДанныеФайла.Свойство("НастройкиШтампаЭП") Тогда                    
		НастройкиШтампаЭП = ДанныеФайла.НастройкиШтампаЭП;
	Иначе	
		НастройкиШтампаЭП = ПолучитьНастройкиШтампаЭП(ДанныеФайла.Владелец);
	КонецЕсли;
	СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;
	
	ДанныеОтметок = Новый Массив;
	Если ТипЗнч(ШтампыПодписейЭП) = Тип("Соответствие") Тогда
		ДанныеОтметок = ШтампыПодписейЭП[ВизуализацияЭПКлиентСервер.ТегВсеПодписи()];
	КонецЕсли;         
	
	ДвоичныеДанныеНовые = Неопределено;
	
	Если НастройкиШтампаЭП.Использовать1СШтамп Тогда
		
		ПараметрыДобавленияШтамповВДокумент = Интеграция1СШтампКлиентСервер.НовыеПараметрыДобавленияШтамповВДокумент();

		СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;  
		ПоложениеНаСтранице = НастройкиШтампаЭП.РасположениеШтампаЭП;
		
		ВариантРасположения = ВизуализацияЭПВызовСервера.ВариантРасположения1СШтамп(ПоложениеНаСтранице);
		
		ПравилаРасположения = ВизуализацияЭПВызовСервера.ПравилаРасположения1СШтамп(СтраницаВставкиШтампаЭП);
		
		ВариантРасположенияПоКоординатам = "ПоКоординатам"; // тут руками считаем.  
		
		ПараметрыШтампов = Новый Массив;
		
		НомерШтампа = 0; // сквозная нумерация
		НомерШтампаБезПоложения = 0; // только "обычные" штампы, для расчета смещения
		НакопленнаяВысотаКартинок = 0;       
		
		НакопленнаяШиринаКартинок = 0;
		НомерШтампаПоY = 0;
		ЧислоШтампов = ДанныеОтметок.Количество();
		
		Если ЧислоШтампов = 1 Тогда                         
			
			ДанныеОтметки = ДанныеОтметок[0];
			
			КартинкаШтампа = Новый Картинка(ДанныеОтметки.ДвоичныеДанныеОтметки, Истина);
			
			// По общим настройкам для информационной базы:
			
			МассивШтампов = Новый Массив;
			МассивШтампов.Добавить(ДанныеОтметки.ДвоичныеДанныеОтметки);

			ПараметрыШтамповЛокальный = ВизуализацияЭПВызовСервера.ПараметрыШтампов(МассивШтампов, "png");
			ПараметрыФайлаШтампа = ПараметрыШтамповЛокальный[0];
			
			ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение           = ВариантРасположения;
			ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположения;
			
			ПараметрыШтампов.Добавить(ПараметрыФайлаШтампа);
			
			НомерШтампаБезПоложения = НомерШтампаБезПоложения + 1;
			
		Иначе	
		
			Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
				
				КартинкаШтампа = Новый Картинка(ДанныеОтметки.ДвоичныеДанныеОтметки, Истина);
				
				// По общим настройкам для информационной базы:
				
				МассивШтампов = Новый Массив;
				МассивШтампов.Добавить(ДанныеОтметки.ДвоичныеДанныеОтметки);

				ПараметрыШтамповЛокальный = ВизуализацияЭПВызовСервера.ПараметрыШтампов(МассивШтампов, "png");
				ПараметрыФайлаШтампа = ПараметрыШтамповЛокальный[0];
				
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение           = ВариантРасположенияПоКоординатам;
				ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположения;
				
				Координаты = ВизуализацияЭПВызовСервера.КоординатыДля1СШтампПоНастройкам(
					ДанныеОтметки.ДвоичныеДанныеОтметки, ПоложениеНаСтранице, 
					НакопленнаяВысотаКартинок, НакопленнаяШиринаКартинок,
					ЧислоШтампов, НомерШтампаПоY);
				
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Верх        = Координаты.Сверху;
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Лево        = Координаты.Слева;
				
				ПараметрыШтампов.Добавить(ПараметрыФайлаШтампа);
				
				НомерШтампаБезПоложения = НомерШтампаБезПоложения + 1;
				
			КонецЦикла;           
			
		КонецЕсли;
		
		// тут рег штампы наш
		Если ЗначениеЗаполнено(ФайлРегистрационныйШтампОрганизации) Тогда
			
			НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
			
			ПравилаРасположенияРегШтамп = ВизуализацияЭПВызовСервера.ПравилаРасположения1СШтамп(НастройкиРегНомера.СтраницаВставки);
		    ВариантРасположенияРегШтамп = ВизуализацияЭПВызовСервера.ВариантРасположения1СШтамп(НастройкиРегНомера.ПоложениеНаСтранице);    
			
			МассивШтампов = Новый Массив;
			МассивШтампов.Добавить(ДвДанныеФайлаРегШтамп);

			ПараметрыШтамповЛокальный = ВизуализацияЭПВызовСервера.ПараметрыШтампов(МассивШтампов, "png");
			ПараметрыФайлаШтампа = ПараметрыШтамповЛокальный[0];
			
			ПараметрыФайлаШтампа.КоэффициентИзмененияРазмера = 0.5;// вместо 0.25
			
			ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение = ВариантРасположенияРегШтамп;
			ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположенияРегШтамп;
			
			ПараметрыШтампов.Добавить(ПараметрыФайлаШтампа);
			
			Если ЕстьПоложениеРегШтампаОрганизации Тогда // тут точно X Y

				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Лево = 
					Цел(ПоложениеРегШтампаОрганизации.Слева * 3.0);
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Верх = 
					Цел(ПоложениеРегШтампаОрганизации.Сверху * 3.0);
				
				ПравилаРасположенияТекущее = ВизуализацияЭПВызовСервера.ПравилаРасположения1СШтамп(
					ПоложениеРегШтампаОрганизации.Страница);
				ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположенияТекущее;
				
			Иначе  // общие настройки - без координат, только угол указан, скажем "Лево верх"
					
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение = ВариантРасположенияРегШтамп;
				ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположенияРегШтамп;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// штрихкод
		Если ЗначениеЗаполнено(ФайлШтрихкод) Тогда    
			
			НастройкиШтрихкода = ШтрихкодированиеСервер.ПолучитьПерсональныеНастройкиПоложенияШтрихкодаНаСтранице();
			
			МассивШтампов = Новый Массив;
			МассивШтампов.Добавить(ДвДанныеФайлаШтрихкод);

			ПараметрыШтамповЛокальный = ВизуализацияЭПВызовСервера.ПараметрыШтампов(МассивШтампов, "png");
			ПараметрыФайлаШтампа = ПараметрыШтамповЛокальный[0];
			
			ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение = 
				ВизуализацияЭПВызовСервера.ВариантРасположения1СШтамп(НастройкиШтрихкода.ПоложениеНаСтранице);
			// штрихкод всегда первая страница
			ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = Интеграция1СШтампКлиентСервер.ПравилоРасположенияНаПервойСтранице();
			
			Если НастройкиШтрихкода.ПоложениеНаСтранице = Перечисления.МестаВставкиКартинки.ПроизвольноеПоложение Тогда
				
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Лево = 
					Цел(ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(НастройкиШтрихкода.СмещениеПоГоризонтали) * 3.0 );
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Верх = 
					Цел(ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(НастройкиШтрихкода.СмещениеПоВертикали)  * 3.0 );
				
			КонецЕсли;	
			
			ПараметрыШтампов.Добавить(ПараметрыФайлаШтампа);
			
		КонецЕсли;
		
		// тут вызов 1С Штамп
		ПараметрыДобавленияШтамповВДокумент.ПараметрыДокумента.ДвоичныеДанные = ДвДанныеФайлаPdf;
		ПараметрыДобавленияШтамповВДокумент.ПараметрыДокумента.Расширение     = ДанныеФайла.Расширение;
		ПараметрыДобавленияШтамповВДокумент.ПараметрыШтампов                  = ПараметрыШтампов;
		
		РезультатОбработкиДокумента = Интеграция1СШтамп.РезультатДобавленияШтамповВДокумент(
			ПараметрыДобавленияШтамповВДокумент, 35);

		Если РезультатОбработкиДокумента.ЕстьОшибки Тогда
			
			ТекстОшибки = РезультатОбработкиДокумента.ИнформацияОбОшибках.ТекстОшибки;
			
			Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = Нстр("ru ='Не удалось получить результат штампирования файла.'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			КонецЕсли;
					
			ЗаписьЖурналаРегистрации("ПолучитьВизуализациюЭпДляPDF", 
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, ДанныеФайла.Ссылка, ТекстОшибки);
				
			НастройкиШтампаЭП.Использовать1СШтамп = Ложь;	
			ДанныеФайла.Вставить("НастройкиШтампаЭП", НастройкиШтампаЭП);
				
			Возврат ПолучитьВизуализациюЭпДляPDF(ДанныеФайла, ИдентификаторФормы, ТребуетсяЗаполнитьВизуализацию);	
			
		КонецЕсли;
		
		ДвоичныеДанныеНовые = РезультатОбработкиДокумента.ДвоичныеДанные;
		
	Иначе // внутри ДО делаем	
		
		Если СпособВставкиШтампаЭПВPDF = Перечисления.СпособыВставкиШтампаЭПВPDF.ImageMagickGhostscript Тогда
			
			НомерШтампа = 1;
			МассивВысотКартинок = Новый Массив();
			ВсеПутиСПоложениями = Новый Массив(); // Массив из см. РаботаСЭП.НовыйПутьИПоложение
			// Признак, что вставка отметок по заданным координатам, а не по настройкам ДО. Т.е. хоть у одной отметки
			// подписи задано "Положение":
			Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
				
				ДвоичныеДанныеШтампа = ДанныеОтметки.ДвоичныеДанныеОтметки;
				
				ТекКартинка = Новый Картинка(ДвоичныеДанныеШтампа, Истина);
				ТекВысота = ТекКартинка.Высота();
				МассивВысотКартинок.Добавить(ТекВысота);
				
				ИмяФайлаШтампа = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
					+ СтрШаблон("stamp%1.png", НомерШтампа);
				ДвоичныеДанныеШтампа.Записать(ИмяФайлаШтампа);
				
				Если МЭДО.ЭтоЗаполненноеПоложениеИзображения(ДанныеОтметки.Положение) Тогда
					// Оставить картинку отметки как есть, размеры будут пересчитаны из мм.
				Иначе
					РаботаСКартинками.УменьшитьШтамп(ИмяФайлаШтампа, 1, ВременнаяПапкаДляРазархивирования);
				КонецЕсли;
				
				ПутьПоложение = РаботаСЭП.НовыйПутьИПоложение(ИмяФайлаШтампа, ДанныеОтметки.Положение);
				ВсеПутиСПоложениями.Добавить(ПутьПоложение);
				
				НомерШтампа = НомерШтампа + 1;
			КонецЦикла;
			
			
			МассивПутейPng = РаботаСКартинками.ПреобразоватьPdfВPng(ИмяФайлаPdf, ВременнаяПапкаДляРазархивирования);
			МассивНовыхPng = Новый Массив;
			НомерСтраницы = 1;
			ВсегоСтраниц = МассивПутейPng.Количество();
			
			Для Каждого ПутьPng Из МассивПутейPng Цикл // по страницам.
				
				НовыйПутьPng = ПутьPng;
				
				ПутиСПоложениямиНаЭтойСтранице = Новый Массив(); // Массив из РаботаСЭП.НовыйПутьИПоложение
				// нужно взять только те отметки, где задана именно текущая страница:
				Для Каждого ПутьПоложение Из ВсеПутиСПоложениями Цикл
					
					Если МЭДО.ЭтоЗаполненноеПоложениеИзображения(ПутьПоложение.Положение) Тогда
						// Штамп с "Положением":
						Если ЭтоНужнаяСтраница(ПутьПоложение.Положение.Страница, НомерСтраницы, ВсегоСтраниц) Тогда
							ПутиСПоложениямиНаЭтойСтранице.Добавить(ПутьПоложение);
						КонецЕсли;
					Иначе
						// Обычный штамп, не хранящий "Положение":
						Если ЭтоНужнаяСтраница(СтраницаВставкиШтампаЭП, НомерСтраницы, ВсегоСтраниц) Тогда
							ПутиСПоложениямиНаЭтойСтранице.Добавить(ПутьПоложение);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			
				Если ПутиСПоложениямиНаЭтойСтранице.Количество() <> 0 Тогда 
					
					НовыйПутьPng = РаботаСКартинками.НаложитьШтамп(
						ПутьPng, ПутиСПоложениямиНаЭтойСтранице, ВременнаяПапкаДляРазархивирования, НомерСтраницы,
						НастройкиШтампаЭП.РасположениеШтампаЭП, МассивВысотКартинок);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИмяФайлаРегШтампОрганизации) Тогда
					
					Если Не ЕстьПоложениеРегШтампаОрганизации Тогда
						
						НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
						Если ЭтоНужнаяСтраница(НастройкиРегНомера.СтраницаВставки, НомерСтраницы, ВсегоСтраниц) Тогда
							РаботаСКартинками.УменьшитьРегШтамп(ИмяФайлаРегШтампОрганизации, ВременнаяПапкаДляРазархивирования);
							НовыйПутьPng = РаботаСКартинками.НаложитьРегШтамп(
								НовыйПутьPng,
								ИмяФайлаРегШтампОрганизации,
								ВременнаяПапкаДляРазархивирования,
								Неопределено,
								НастройкиРегНомера,
								1);
						КонецЕсли;
						
					ИначеЕсли ЕстьПоложениеРегШтампаОрганизации
						И ЭтоНужнаяСтраница(ПоложениеРегШтампаОрганизации.Страница, НомерСтраницы, ВсегоСтраниц) Тогда
						
						НовыйПутьPng = РаботаСКартинками.НаложитьРегШтамп(
							НовыйПутьPng,
							ИмяФайлаРегШтампОрганизации,
							ВременнаяПапкаДляРазархивирования,
							ПоложениеРегШтампаОрганизации,
							ШтрихкодированиеКлиентСервер.НовыеНастройкиРегНомера(), // Здесь настройки не нужны
							1);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИмяФайлаРегШтампКорреспондента) Тогда
					
					Если Не ЕстьПоложениеРегШтампаКорреспондента Тогда
						
						НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
						Если ЭтоНужнаяСтраница(НастройкиРегНомера.СтраницаВставки, НомерСтраницы, ВсегоСтраниц) Тогда
							РаботаСКартинками.УменьшитьРегШтамп(ИмяФайлаРегШтампКорреспондента);
							НовыйПутьPng = РаботаСКартинками.НаложитьРегШтамп(
								НовыйПутьPng,
								ИмяФайлаРегШтампКорреспондента,
								ВременнаяПапкаДляРазархивирования,
								Неопределено,
								НастройкиРегНомера,
								2);
						КонецЕсли;
						
					ИначеЕсли ЕстьПоложениеРегШтампаКорреспондента
						И ЭтоНужнаяСтраница(ПоложениеРегШтампаКорреспондента.Страница, НомерСтраницы, ВсегоСтраниц) Тогда
						
						НовыйПутьPng = РаботаСКартинками.НаложитьРегШтамп(
							НовыйПутьPng,
							ИмяФайлаРегШтампКорреспондента,
							ВременнаяПапкаДляРазархивирования,
							ПоложениеРегШтампаКорреспондента,
							ШтрихкодированиеКлиентСервер.НовыеНастройкиРегНомера(), // Здесь настройки не нужны
							2);
					КонецЕсли;
				КонецЕсли;
				
				
				Если НомерСтраницы = 1 И ЗначениеЗаполнено(ФайлШтрихкод) Тогда
					НовыйПутьPng = РаботаСКартинками.НаложитьШтрихкод(
						НовыйПутьPng, ИмяФайлаШтрихкод, ВременнаяПапкаДляРазархивирования);
				КонецЕсли;	

				МассивНовыхPng.Добавить(НовыйПутьPng);
				
				НомерСтраницы = НомерСтраницы + 1;
				
			КонецЦикла;
			
			ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
				+ "cnv.bat";
			РаботаСКартинками.ПреобразоватьPngВPdf(МассивНовыхPng, ИмяФайлаPdfНовое,
				ИмяBatФайла, ВременнаяПапкаДляРазархивирования);
			
			Для Каждого ФайлКУдалению Из МассивНовыхPng Цикл
				УдалитьФайлы(ФайлКУдалению);
			КонецЦикла;
			
		Иначе // тут средствами платформы
			
			КопироватьФайл(ИмяФайлаPdf, ИмяФайлаPdfНовое); //@skip-check object-deprecated
			
			ДокументPdf = Новый ДокументPDF();
			ДокументPdf.Прочитать(ИмяФайлаPdfНовое);
			ВсегоСтраниц = ДокументPdf.КоличествоСтраниц();
			
			РасположениеШтампаЭПВPdf = НастройкиШтампаЭП.РасположениеШтампаЭП;
			
			ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяДатаСеанса()));
			СлучайноеЧислоДобавка = ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 900);
			
			НомерШтампа = 0; // сквозная нумерация
			НомерШтампаБезПоложения = 0; // только "обычные" штампы, для расчета смещения
			Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
				
				КартинкаШтампа = Новый Картинка(ДанныеОтметки.ДвоичныеДанныеОтметки, Истина);
				
				Описание = Новый ОписаниеОтображаемогоОбъектаPDF();
				Описание.Имя = "Пример" + Строка(НомерШтампа + СлучайноеЧислоДобавка);
				Описание.Объект = КартинкаШтампа;
				
				ЗаписьОтображаемогоОбъектаУжеСделана = Ложь;
				Если МЭДО.ЭтоЗаполненноеПоложениеИзображения(ДанныеОтметки.Положение) Тогда
					// По заданному "Положению":
					Описание.Лево = ДанныеОтметки.Положение.Слева;
					Описание.Верх = ДанныеОтметки.Положение.Сверху;
					Описание.Высота = ДанныеОтметки.Положение.Высота;
					Описание.Ширина = ДанныеОтметки.Положение.Ширина;
					Если ДанныеОтметки.Положение.Страница = Перечисления.СтраницаВставкиКартинки.Первая Тогда
						Описание.НомерСтраницы = 1;
					ИначеЕсли ДанныеОтметки.Положение.Страница = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
						Описание.НомерСтраницы = ВсегоСтраниц;
					ИначеЕсли ДанныеОтметки.Положение.Страница = Перечисления.СтраницаВставкиКартинки.Каждая Тогда
						Для ТекНомерСтраницы = 1 По ВсегоСтраниц Цикл
							Описание.Имя = "Пример" + НомерШтампа + СлучайноеЧислоДобавка;
							Описание.НомерСтраницы = ТекНомерСтраницы;
							ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
							ЗаписьОтображаемогоОбъектаУжеСделана = Истина;
							НомерШтампа = НомерШтампа + 1;
						КонецЦикла;
					ИначеЕсли ТипЗнч(ДанныеОтметки.Положение.Страница) = Тип("Число")
						И ДанныеОтметки.Положение.Страница <> 0 Тогда
						Описание.НомерСтраницы = ДанныеОтметки.Положение.Страница;
					КонецЕсли;
				Иначе
					// По общим настройкам для информационной базы:
					Описание.Высота = 24;
					Описание.Ширина = 96;
					
					Размеры = РаботаСКартинками.НовыйРазмеры(Описание.Ширина, Описание.Высота);
					НастройкиРасположения = ШтрихкодированиеКлиентСервер.НовыйНастройкиРасположения();
					НастройкиРасположения.ПоложениеНаСтранице = РасположениеШтампаЭПВPdf;
					Координаты = РаботаСКартинками.КоординатыПоНастройкам(
						НастройкиРасположения, Размеры, НомерШтампаБезПоложения);
					Описание.Лево = Координаты.Слева;
					Описание.Верх = Координаты.Сверху;
					
					Если СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Первая Тогда
						Описание.НомерСтраницы = 1;
					ИначеЕсли СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
						Описание.НомерСтраницы = ВсегоСтраниц;
					ИначеЕсли СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Каждая Тогда
						Для ТекНомерСтраницы = 1 По ВсегоСтраниц Цикл
							Описание.Имя = "Пример" + НомерШтампа + СлучайноеЧислоДобавка;
							Описание.НомерСтраницы = ТекНомерСтраницы;
							ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
							ЗаписьОтображаемогоОбъектаУжеСделана = Истина;
							НомерШтампа = НомерШтампа + 1;
						КонецЦикла;
						НомерШтампаБезПоложения = НомерШтампаБезПоложения + 1;
					КонецЕсли;
					Если Не ЗаписьОтображаемогоОбъектаУжеСделана Тогда
						НомерШтампаБезПоложения = НомерШтампаБезПоложения + 1;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗаписьОтображаемогоОбъектаУжеСделана Тогда
					НомерШтампа = НомерШтампа + 1;
					ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
				КонецЕсли; 
				
			КонецЦикла;
			
			НомерШтампа = 0;
			
			Если ЗначениеЗаполнено(ФайлРегистрационныйШтампОрганизации) Тогда
				
				Если Не ЕстьПоложениеРегШтампаОрганизации Тогда
					РаботаСКартинками.УвеличитьРегШтамп(ИмяФайлаРегШтампОрганизации, ВременнаяПапкаДляРазархивирования);
				КонецЕсли;
				
				КартинкаШтрихкодРегШтамп = Новый Картинка(ИмяФайлаРегШтампОрганизации);
				НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
				
				Описание = Новый ОписаниеОтображаемогоОбъектаPDF();
				Описание.Имя = "Пример" + Строка(НомерШтампа + СлучайноеЧислоДобавка + 40);
				Описание.Объект = КартинкаШтрихкодРегШтамп;
				Если НастройкиРегНомера.СтраницаВставки = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
					Описание.НомерСтраницы = ВсегоСтраниц;
				Иначе
					Описание.НомерСтраницы = 1;
				КонецЕсли;
				
				Если ЕстьПоложениеРегШтампаОрганизации Тогда
					Описание.Лево = ПоложениеРегШтампаОрганизации.Слева;
					Описание.Верх = ПоложениеРегШтампаОрганизации.Сверху;
					Описание.Высота = ПоложениеРегШтампаОрганизации.Высота;
					Описание.Ширина = ПоложениеРегШтампаОрганизации.Ширина;
					Описание.НомерСтраницы = 1;
					Если ПоложениеРегШтампаОрганизации.Страница = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
						Описание.НомерСтраницы = ВсегоСтраниц;
					ИначеЕсли ТипЗнч(ПоложениеРегШтампаОрганизации.Страница) = Тип("Число") Тогда
						Описание.НомерСтраницы = ?(
							ПоложениеРегШтампаОрганизации.Страница > ВсегоСтраниц,
							ВсегоСтраниц,
							ПоложениеРегШтампаОрганизации.Страница);
					КонецЕсли;
				Иначе
					Размеры = РаботаСКартинками.НовыйРазмеры(48, 24);
					Координаты = РаботаСКартинками.КоординатыПоНастройкам(НастройкиРегНомера, Размеры, НомерШтампа);
					Описание.Лево = Координаты.Слева;
					Описание.Верх = Координаты.Сверху;
				КонецЕсли;
				
				ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
				НомерШтампа = НомерШтампа + 1;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлРегистрационныйШтампКорреспондента) Тогда
				
				Если Не ЕстьПоложениеРегШтампаКорреспондента Тогда
					РаботаСКартинками.УвеличитьРегШтамп(ИмяФайлаРегШтампКорреспондента);
				КонецЕсли;
				
				НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
				
				Описание = Новый ОписаниеОтображаемогоОбъектаPDF();
				Описание.Имя = "Пример" + Строка(НомерШтампа + СлучайноеЧислоДобавка + 45);
				Описание.Объект = Новый Картинка(ИмяФайлаРегШтампКорреспондента);
				Если НастройкиРегНомера.СтраницаВставки = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
					Описание.НомерСтраницы = ВсегоСтраниц;
				Иначе
					Описание.НомерСтраницы = 1;
				КонецЕсли;
				
				Если ЕстьПоложениеРегШтампаКорреспондента Тогда
					Описание.Лево = ПоложениеРегШтампаКорреспондента.Слева;
					Описание.Верх = ПоложениеРегШтампаКорреспондента.Сверху;
					Описание.Высота = ПоложениеРегШтампаКорреспондента.Высота;
					Описание.Ширина = ПоложениеРегШтампаКорреспондента.Ширина;
					Описание.НомерСтраницы = 1;
					Если ПоложениеРегШтампаКорреспондента.Страница = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
						Описание.НомерСтраницы = ВсегоСтраниц;
					ИначеЕсли ТипЗнч(ПоложениеРегШтампаКорреспондента.Страница) = Тип("Число") Тогда
						Описание.НомерСтраницы = ?(
							ПоложениеРегШтампаКорреспондента.Страница > ВсегоСтраниц,
							ВсегоСтраниц,
							ПоложениеРегШтампаКорреспондента.Страница);
					КонецЕсли;
				Иначе
					Размеры = РаботаСКартинками.НовыйРазмеры(48, 24);
					Координаты = РаботаСКартинками.КоординатыПоНастройкам(НастройкиРегНомера, Размеры, НомерШтампа);
					Описание.Лево = Координаты.Слева;
					Описание.Верх = Координаты.Сверху;
				КонецЕсли;
				
				ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
				НомерШтампа = НомерШтампа + 1;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлШтрихкод) Тогда
				
				РаботаСКартинками.УвеличитьШтрихкод(ИмяФайлаШтрихкод, ВременнаяПапкаДляРазархивирования);
				
				КартинкаШтампа = Новый Картинка(ИмяФайлаШтрихкод);
				НомерШтампа = 0;
				
				НастройкиШтрихкода = ШтрихкодированиеСервер.ПолучитьПерсональныеНастройкиПоложенияШтрихкодаНаСтранице();
				
				Описание = Новый ОписаниеОтображаемогоОбъектаPDF();
				Описание.Имя = "Пример" + Строка(НомерШтампа + СлучайноеЧислоДобавка + 60);
				Описание.Объект = КартинкаШтампа;
				
				Описание.НомерСтраницы = 1;
				
				Размеры = РаботаСКартинками.НовыйРазмеры(36, 24);
				Координаты = РаботаСКартинками.КоординатыПоНастройкам(НастройкиШтрихкода, Размеры, НомерШтампа);
				Описание.Лево = Координаты.Слева;
				Описание.Верх = Координаты.Сверху;
				
				ДокументPdf.ДобавитьОтображаемыйОбъект(Описание); 
				
			КонецЕсли;
		
			ДокументPdf.Записать(ИмяФайлаPdfНовое);
			ДокументPdf = Неопределено; // Закрытие, чтобы удалить, ниже.
			
		КонецЕсли;	
		
		ДвоичныеДанныеНовые = Новый ДвоичныеДанные(ИмяФайлаPdfНовое);
	
	КонецЕсли;
	
	ФайлВизуализация = СоздатьВизуализациюИЗаполнитьДанныеФайла(
		ДанныеФайла, ДвоичныеДанныеНовые, ИдентификаторФормы);	
	
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);
	
	Возврат ФайлВизуализация;
	
КонецФункции

Функция ВыполнитьЗаполнениеРегДанныхЕслиНужно(ДвДанныеФайлаDoc, ДанныеФайла)
	
	Если Не ДанныеФайла.ПодписанЭП Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ДанныеФайла.Владелец) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	РегистрационныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеФайла.Владелец, "РегистрационныйНомер");
		
	Если Не ЗначениеЗаполнено(РегистрационныйНомер) Тогда
		Возврат Ложь;
	КонецЕсли;
				
	ЗаполнитьПоляРегНомера = Истина;
	
	ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеФайла.Владелец, "ВидДокумента");
	РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
	Если РолиФайлов.Количество() <> 0 Тогда
		
		ЗаполнитьПоляРегНомера = Ложь;
		
		РольФайла = Неопределено;
		
		ТекРоли = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(
			ДанныеФайла.Ссылка);
			
		Если ТекРоли.Количество() <> 0 Тогда
			РольФайла = ТекРоли[0];
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(РольФайла) Тогда
			СтрТабл = РолиФайлов.Найти(РольФайла, "Роль");
			Если СтрТабл <> Неопределено И СтрТабл.Обязательная Тогда
				ЗаполнитьПоляРегНомера = Истина;
			КонецЕсли;	
		КонецЕсли;
			
	КонецЕсли;		
	
	Если ЗаполнитьПоляРегНомера Тогда
		РезультатЗаполнения 
		= АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
			Ложь,
			ДанныеФайла.Ссылка, 
			Ложь,
			,
			,
			Истина); // ЗаполнятьТолькоПоляРегистрации
		
		Если РезультатЗаполнения.Результат = Истина Тогда	
			ДвДанныеФайлаDoc = РезультатЗаполнения.ДвоичныеДанныеЗаполненногоФайла;
			Возврат Истина;
		КонецЕсли;	
			
	КонецЕсли;	
			
	Возврат Ложь;
	
КонецФункции	

// Вернет настройки вставки ЭП
// 
// Параметры:
//  ВладелецФайла - ОпределяемыйТип.ВладелецФайлов
// 
// Возвращаемое значение:
// 	 Структура:
//    * РасположениеШтампаЭП - ПеречислениеСсылка.МестаВставкиКартинки
//    * СтраницаВставкиШтампаЭП - ПеречислениеСсылка.СтраницаВставкиКартинки
//    * ИтоговыйФорматФайлаСоШтампомЭП - ПеречислениеСсылка.ИтоговыйФорматФайлаСоШтампомЭП
Функция ПолучитьНастройкиШтампаЭП(ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = ФайловыеФункцииПовтИсп.ПолучитьОбщиеНастройкиШтампаЭП();
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) Тогда
		Возврат Настройки;			
	КонецЕсли;		

	// тут для ДокументПредприятия 				
	ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ВидДокумента"); // СправочникСсылка.ВидыДокументов
	
	Настройка = РегистрыСведений.НастройкиГенерацииШтамповЭППоВидамДокументов.ПолучитьНастройку(ВидДокумента);
	Если Настройка = Неопределено Тогда
		
		ГруппаВида = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "Родитель");
		Если ЗначениеЗаполнено(ГруппаВида) Тогда
			Настройка = РегистрыСведений.НастройкиГенерацииШтамповЭППоВидамДокументов.ПолучитьНастройку(
				ГруппаВида);
			
		КонецЕсли;
	КонецЕсли;		

	Если Настройка <> Неопределено Тогда
		РеквНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка,
			"РасположениеШтампаЭП, СтраницаВставкиШтампаЭП");
		ЗаполнитьЗначенияСвойств(Настройки, РеквНастройки);	
	КонецЕсли;	  
	
	Возврат Настройки;
	
КонецФункции

Функция ПолныйПутьПапки(Папка)
	
	ПолныйПуть = "";
	
	ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка.Ссылка, "Родитель");
	
	Если ЗначениеЗаполнено(ПапкаРодитель) Тогда
	
		ПолныйПуть = "";
		Пока ЗначениеЗаполнено(ПапкаРодитель) Цикл
			
			ПолныйПуть = Строка(ПапкаРодитель) + "\" + ПолныйПуть;
			ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПапкаРодитель, "Родитель");
			Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПолныйПуть = ПолныйПуть + Строка(Папка.Ссылка);
		
		Если Не ПустаяСтрока(ПолныйПуть) Тогда
			ПолныйПуть = """" + ПолныйПуть + """";
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ПолныйПуть;
	
КонецФункции

// 
Функция ДанныеФайловДляОткрытия(
	МассивФайлов, 
	ИдентификаторФормы = Неопределено) Экспорт 
	
	ДанныеФайлов = Новый Массив;
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		ДанныеФайла = ДанныеФайла(Файл);
		
		ЗаписатьОбращениеКВерсииФайла(ДанныеФайла.Версия);
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(ДанныеФайла.Ссылка);
		
		РабочийКаталогВладельца = РабочийКаталогПапки(ДанныеФайла.Владелец);
		ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
		
		Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
			ИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
			ИмяФайлаСПутемВРабочемКаталоге = РабочийКаталогВладельца + ИмяФайла;
			ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
		КонецЕсли;
		
		ДобавитьВизуализациюЭП(ДанныеФайла, ИдентификаторФормы);
		
		Если ДанныеФайла.ВизуализацияЭПДобавлена = Истина Тогда
			
			ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге = ""; // не берем из кеша
			УдалитьИзРегистра(ДанныеФайла.Версия); // удалим инфо из кеша
			
			ДанныеФайлов.Добавить(ДанныеФайла);
			
			Продолжить;
			
		КонецЕсли;	
		
		РабочийКаталогВладельца = РабочийКаталогПапки(ДанныеФайла.Владелец);
		ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
		
		Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
			ИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
			ИмяФайлаСПутемВРабочемКаталоге = РабочийКаталогВладельца + ИмяФайла;
			ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
		КонецЕсли;
		
		ТипХраненияФайла = ДанныеФайла.ТипХраненияФайла;
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ДанныеФайла.Версия <> Неопределено Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
			|	ВерсииФайлов.Том КАК Том
			|ИЗ
			|	Справочник.ВерсииФайлов КАК ВерсииФайлов
			|ГДЕ
			|	ВерсииФайлов.Ссылка = &Версия";
			
			Запрос.Параметры.Вставить("Версия", ДанныеФайла.Версия);
			
			ДанныеФайлаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ДанныеФайлаПутьКФайлу = ""; 
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДанныеФайлаТом = Выборка.Том;
				ДанныеФайлаПутьКФайлу = Выборка.ПутьКФайлу;
			КонецЕсли;
			
			Если НЕ ДанныеФайлаТом.Пустая() Тогда
				ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ДанныеФайлаТом) + ДанныеФайлаПутьКФайлу; 
				Попытка
					ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
					// Работаем только с текущей версией - для не-текущей ссылку получаем в ПолучитьНавигационнуюСсылкуДляОткрытия.
					ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
				Исключение
					// запись в журнал регистрации
					СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибке(), ДанныеФайла.Ссылка);
					ЗаписьЖурналаРегистрации("Получение данных файла для открытия", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, ДанныеФайла.Ссылка, СообщениеОбОшибке);
					
					ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
						ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеФайлов.Добавить(ДанныеФайла);
		
	КонецЦикла;
	
	Возврат ДанныеФайлов;
	
КонецФункции // ДанныеФайлаДляОткрытия()

// Освобождение Файла с получением данных
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура ПолучитьДанныеФайлаИОсвободитьФайл(ФайлСсылка, ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(
		ФайлСсылка);
	
	ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
	
	УдалитьИзРегистраЗаписиДляВсехКомпьютеров(ДанныеФайла.Версия);
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);
	ДанныеФайла.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
КонецПроцедуры

// Получает ДанныеФайла и делает освобождение для массива файлов. При ошибке продолжает работу
//  в МассивДанныхФайла возвращает только успешно освобожденные файлы
Процедура ПолучитьДанныеИОсвободитьМассивФайлов(МассивОтмеченныхПодчиненных, МассивДанныхФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	Для Каждого СтруктураПодчиненного Из МассивОтмеченныхПодчиненных Цикл
		
		ДанныеФайла = ДанныеФайла(СтруктураПодчиненного.ПодчиненныйФайл, Неопределено);
		
		Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
			ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);	
			МассивДанныхФайла.Добавить(ДанныеФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Для опубликования файла без его освобождения.
//
// Параметры:
//   ФайлСсылка                   - Структура - структура с данными файла.
//   СведенияОФайле               - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   ОтносительныйПутьКФайлу      - Строка    - относительный путь без пути рабочего каталога, например
//                                              "А1/Приказ.doc"; указывается, если НеМенятьЗаписьВРабочемКаталоге =
//                                              Ложь.
//   ПолныйПутьКФайлу             - Строка    - путь на клиенте в рабочем каталоге; указывается, если
//                                              НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   ВРабочемКаталогеВладельца    - Булево    - файл находится в рабочем каталоге владельца.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     * Успешно     - Булево    - Истина, если создание версии выполнено (и файл бинарно изменен).
//     * ДанныеФайла - Структура - структура с данными файла.
//
Функция ПолучитьДанныеФайлаИСохранитьИзмененияФайла(ФайлСсылка, СведенияОФайле, 
	ОтносительныйПутьКФайлу, ПолныйПутьКФайлу, ВРабочемКаталогеВладельца,
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка);
	
	Если Не ДанныеФайла.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;    
	
	НеМенятьЗаписьВРабочемКаталоге = Ложь;
	
	ВерсияСоздана = СохранитьИзмененияФайла(ФайлСсылка, СведенияОФайле, 
		Ложь, ОтносительныйПутьКФайлу, ПолныйПутьКФайлу, ВРабочемКаталогеВладельца,
		УникальныйИдентификаторФормы);
	Возврат Новый Структура("Успешно,ДанныеФайла", ВерсияСоздана, ДанныеФайла);	
		
КонецФункции

// Сохраняет в регистре сведений рабочий каталог папки
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца
Процедура СохранитьРабочийКаталог(СсылкаПапки, РабочийКаталогВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайловКомпьютера.СоздатьНаборЗаписей();
	
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();	
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Папка = СсылкаПапки;
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗапись.Путь = РабочийКаталогВладельца;
	
	НоваяЗапись.Идентификатор = Идентификатор;
	ТекСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	НоваяЗапись.ИмяКомпьютера = ТекСеанс.ИмяКомпьютера;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Сохраняет в регистре сведений рабочий каталог папки и заменяет пути в регистре сведений ФайлыВРабочемКаталогеКомпьютера
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца
//  ИмяКаталогаПрежнееЗначение - Строка - прежнее значение рабочего каталога 
Процедура СохранитьРабочийКаталогИЗаменитьПутиВРегистре(СсылкаПапки, РабочийКаталогВладельца,
						ИмяКаталогаПрежнееЗначение) Экспорт
	
	СохранитьРабочийКаталог(СсылкаПапки, РабочийКаталогВладельца);
	
	// ниже заменяем пути в регистре сведений ФайлыВРабочемКаталогеКомпьютера
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДляЗамены = Новый Массив;
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	
	// Для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует.
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Идентификатор", Идентификатор);
	ЗапросВРегистр.УстановитьПараметр("Путь", ИмяКаталогаПрежнееЗначение + "%");
	ЗапросВРегистр.Текст = "ВЫБРАТЬ
	                       |	ФайлыВРабочемКаталогеКомпьютера.Версия КАК Версия,
	                       |	ФайлыВРабочемКаталогеКомпьютера.Путь КАК Путь,
	                       |	ФайлыВРабочемКаталогеКомпьютера.Размер КАК Размер,
	                       |	ФайлыВРабочемКаталогеКомпьютера.ДатаПомещенияВРабочийКаталог КАК ДатаПомещенияВРабочийКаталог,
	                       |	ФайлыВРабочемКаталогеКомпьютера.НаЧтение КАК НаЧтение,
	                       |	ФайлыВРабочемКаталогеКомпьютера.Идентификатор,
	                       |	ФайлыВРабочемКаталогеКомпьютера.ИмяКомпьютера,
	                       |	ФайлыВРабочемКаталогеКомпьютера.Пользователь
	                       |ИЗ
	                       |	РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
	                       |ГДЕ
	                       |	ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор
	                       |	И ФайлыВРабочемКаталогеКомпьютера.ВРабочемКаталогеВладельца = ИСТИНА
	                       |	И ФайлыВРабочемКаталогеКомпьютера.Путь ПОДОБНО &Путь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйПуть = Выборка.Путь;
		НовыйПуть = СтрЗаменить(НовыйПуть, ИмяКаталогаПрежнееЗначение, РабочийКаталогВладельца);
		
		СтруктураЗаписи = Новый Структура("Версия, Путь, Размер, ДатаПомещенияВРабочийКаталог, НаЧтение",
			Выборка.Версия, НовыйПуть, Выборка.Размер, 
			Выборка.ДатаПомещенияВРабочийКаталог, Выборка.НаЧтение);
		СписокДляЗамены.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Для Каждого СтруктураЗаписи из СписокДляЗамены Цикл
		
		ВРабочемКаталогеВладельца = Истина;
		ЗаписатьСтруктуруЗаписиВРегистр(СтруктураЗаписи.Версия, СтруктураЗаписи.Путь, СтруктураЗаписи.Размер, 
			СтруктураЗаписи.ДатаПомещенияВРабочийКаталог, СтруктураЗаписи.НаЧтение, ВРабочемКаталогеВладельца);
		
	КонецЦикла;
	
КонецПроцедуры

// После смены пути запишем заново - с теми же значениями остальных полей
// Параметры
//  Версия - СправочникСсылка.ВерсииФайлов - версия
//  Путь - Строка - относительный путь внутри рабочего каталога
//  Размер  - размер файла в байтах
//  ДатаПомещенияВРабочийКаталог - Дата - дата помещения файла в рабочий каталог
//  НаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
Процедура ЗаписатьСтруктуруЗаписиВРегистр(Версия, Путь, Размер, ДатаПомещенияВРабочийКаталог, НаЧтение, ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.СоздатьНаборЗаписей();
	
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Идентификатор = Идентификатор;
	ТекСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	НоваяЗапись.ИмяКомпьютера = ТекСеанс.ИмяКомпьютера;
	
	НоваяЗапись.Версия = Версия;
	НоваяЗапись.Путь = Путь;
	НоваяЗапись.Размер = Размер;
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ДатаПомещенияВРабочийКаталог;
	НоваяЗапись.ДатаОбращения = ТекущаяДатаСеанса();
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	
	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Очищает в регистре сведений рабочий каталог папки
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
Процедура ОчиститьРабочийКаталог(СсылкаПапки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайловКомпьютера.СоздатьНаборЗаписей();
	
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	
	// не добавляем записи в набор - чтобы все стереть
	НаборЗаписей.Записать();
	
	// для дочерних папок очищаем рабочие каталоги
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	ПапкиФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПапкиФайлов КАК ПапкиФайлов
		|ГДЕ
		|	ПапкиФайлов.Родитель = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаПапки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОчиститьРабочийКаталог(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Находит запись в регистре сведений ФайлыВРабочемКаталогеКомпьютера по пути файла на диске (относительному)
// Параметры
//  ИмяФайла - Строка - имя файла
//  Версия - СправочникСсылка.ВерсииФайлов - сюда помещается найденная версия
//  ДатаПомещения - Дата - дата помещения файла в рабочий каталог
//  Владелец - СправочникСсылка.Файлы - файл - владелец версии
// НомерВерсии - сюда помещается номер версии
// ВРегистреНаЧтение - сюда помещается значение ресурса НаЧтение 
// ВРегистреКодФайла - сюда помещается код файла
// ВРегистреПапка - сюда помещается папка файла
Функция НайтиВРегистреПоПути(ИмяФайла, Версия, ДатаПомещения, Владелец, НомерВерсии, 
	ВРегистреНаЧтение, ВРегистреКодФайла, ВРегистреПапка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Версия = Новый ("СправочникСсылка.ВерсииФайлов");
	
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();	
	
	// Для каждого по пути находим запись в регистре сведений - оттуда берем поле 
	// Версия и Размер и ДатаПомещенияВРабочийКаталог
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("ИмяФайла", ИмяФайла);
	ЗапросВРегистр.УстановитьПараметр("Идентификатор", Идентификатор);
	ЗапросВРегистр.Текст = "ВЫБРАТЬ
	                       |	ФайлыВРабочемКаталогеКомпьютера.Версия КАК Версия,
	                       |	ФайлыВРабочемКаталогеКомпьютера.ДатаПомещенияВРабочийКаталог КАК ДатаПомещенияВРабочийКаталог,
	                       |	ФайлыВРабочемКаталогеКомпьютера.НаЧтение КАК НаЧтение
	                       |ИЗ
	                       |	РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
	                       |ГДЕ
	                       |	ФайлыВРабочемКаталогеКомпьютера.Путь = &ИмяФайла
	                       |	И ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Версия = Выборка.Версия;
		ДатаПомещения = Выборка.ДатаПомещенияВРабочийКаталог;
		
		Владелец = Версия.Владелец;
		НомерВерсии = Версия.НомерВерсии;
		ВРегистреНаЧтение = Выборка.НаЧтение;
		ВРегистреКодФайла = Версия.Владелец.Код;
		ВРегистреПапка = Владелец.ВладелецФайла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Возвращает с сервера на клиент идентификатор текущего пользователя
// Возвращаемое значение:
//   УникальныйИдентификатор  - Уникальный идентификатор текущего пользователя
Функция ПараметрыСеансаИдентификаторТекущегоПользователя() Экспорт
	Возврат Пользователи.ТекущийПользователь().УникальныйИдентификатор();
КонецФункции

Процедура ОбновитьДатуОбращенияФайлыВРабочемКаталогеКомпьютера(Версия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Версия = Версия;
	МенеджерЗаписи.Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ДатаОбращения = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
	КонецЕсли;	
	
КонецПроцедуры	

// Находит в регистре сведений ФайлыВРабочемКаталогеКомпьютера информацию о ВерсииФайла (путь к файлу версии в рабочем каталоге, и статус - на чтение или на редактирование)
// Параметры
//  Версия - СправочникСсылка.ВерсииФайлов - версия
//  ИмяКаталога - путь рабочего каталога
//  ВРабочемКаталогеНаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
Функция ПолучитьИмяФайлаСПутемИзРегистра(Версия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяФайлаСПутем = "";
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Версия", Версия.Ссылка);
	СтруктураОтбора.Вставить("Идентификатор", ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя());
	
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.Получить(СтруктураОтбора);
	
	// Получить путь из регистра
	ИмяФайлаСПутем = СтруктураРесурсов.Путь;
	ВРабочемКаталогеНаЧтение = СтруктураРесурсов.НаЧтение;
	ВРабочемКаталогеВладельца = СтруктураРесурсов.ВРабочемКаталогеВладельца;
	Если ИмяФайлаСПутем <> "" И ВРабочемКаталогеВладельца = Ложь Тогда
		ИмяФайлаСПутем = ИмяКаталога + ИмяФайлаСПутем;
	КонецЕсли;
	
	Возврат ИмяФайлаСПутем;
КонецФункции

// Находит в регистре сведений ФайлыВРабочемКаталогеКомпьютера информацию о ВерсииФайла (путь к файлу версии в рабочем каталоге)
// Параметры
//  Ссылка  - СправочникСсылка.ВерсииФайлов - версия файла
//
// Возвращаемое значение:
//   Строка - имя с путем в рабочем каталоге
Функция ПолучитьИмяФайлаИзРегистра(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяФайлаСПутем = "";
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Версия", Ссылка);
	СтруктураОтбора.Вставить("Идентификатор", ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя());
	
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.Получить(СтруктураОтбора);
	
	// Получить путь из регистра
	ИмяФайлаСПутем = СтруктураРесурсов.Путь;
	
	Возврат ИмяФайлаСПутем;
	
КонецФункции

// Записать в регистр сведений ФайлыВРабочемКаталогеКомпьютера информацию о пути файла
// Параметры
//  ТекущаяВерсия - СправочникСсылка.ВерсииФайлов - версия
//  ИмяФайлаСПутем - имя с путем в рабочем каталоге
//  НаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
Процедура ЗаписатьИмяФайлаСПутемВРегистр(ТекущаяВерсия, ИмяФайлаСПутем, НаЧтение, ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(ТекущаяВерсия.Ссылка);
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Идентификатор = Идентификатор;
	ТекСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	НоваяЗапись.ИмяКомпьютера = ТекСеанс.ИмяКомпьютера;
	
	НоваяЗапись.Версия = ТекущаяВерсия.Ссылка;
	НоваяЗапись.Путь = ИмяФайлаСПутем;
	НоваяЗапись.Размер = ТекущаяВерсия.Размер;
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДатаСеанса();
	НоваяЗапись.ДатаОбращения = ТекущаяДатаСеанса();
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	
	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталогеКомпьютера запись о данной версии файла
// Параметры
//  Версия - СправочникСсылка.ВерсииФайлов - версия
Процедура УдалитьИзРегистра(Версия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.СоздатьНаборЗаписей();
	
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталогеКомпьютера запись о данной версии файла
// Параметры
//  Версия - СправочникСсылка.ВерсииФайлов - версия
Процедура УдалитьИзРегистраЗаписиДляВсехКомпьютеров(Версия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Создает запись в РС для занятого на редактирование файла.
//  Теперь такая запись должна быть всегда, даже если сам файл и не получаем на клиент.
Процедура СоздатьЗаписьВФайлыВРабочемКаталоге(ФайлСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Версия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
	Если Не ФайловыеФункции.ЕстьЗаписьДляТекущегоИдентификатора(Версия) Тогда
		
		РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Версия, "Размер, Расширение");
		Путь = Строка(Новый УникальныйИдентификатор) + "." + РеквизитыВерсии.Расширение;
		
		ЗаписатьСтруктуруЗаписиВРегистр(
			Версия, 
			Путь, 
			РеквизитыВерсии.Размер, 
			ТекущаяДата(), //ДатаПомещенияВРабочийКаталог, 
			Ложь, //НаЧтение, 
			Ложь //ВРабочемКаталогеВладельца
			);
		
	КонецЕсли;	
	
КонецПроцедуры	

// Удалить из регистра сведений ФайлыВРабочемКаталогеКомпьютера все записи, кроме записей о файлах занятых текущим пользователем
Процедура ОчиститьВсеСвоиКромеЗанятых() Экспорт
	// Отбираем все в регистре сведений. Перебираем - находим те, что не заняты текущим пользователем -
	//  и все удаляем - считаем, что на диске они уже удалены
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокУдалить = Новый Массив;
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	// Для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует.
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Идентификатор", Идентификатор);
	ЗапросВРегистр.Текст = "ВЫБРАТЬ
	                       |	ФайлыВРабочемКаталогеКомпьютера.Версия КАК Версия,
	                       |	ФайлыВРабочемКаталогеКомпьютера.Версия.Владелец.Редактирует КАК Редактирует
	                       |ИЗ
	                       |	РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
	                       |ГДЕ
	                       |	ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор
	                       |	И ФайлыВРабочемКаталогеКомпьютера.ВРабочемКаталогеВладельца = ЛОЖЬ";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Редактирует <> ТекущийПользователь Тогда
				СписокУдалить.Добавить(Выборка.Версия);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Версия из СписокУдалить Цикл
		
		// Создать набор записей
		НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Версия.Установить(Версия);
		НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталогеКомпьютера запись о старой версии и внести запись о новой
// Параметры
//  СтараяВерсия - СправочникСсылка.ВерсииФайлов - старая версия
//  НоваяВерсия - СправочникСсылка.ВерсииФайлов - новая версия
//  ПолноеИмяФайла - имя с путем в рабочем каталоге
//  ИмяКаталога - путь рабочего каталога
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
Процедура УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(СтараяВерсия, НоваяВерсия, ПолноеИмяФайла, ИмяКаталога, ВРабочемКаталогеВладельца)
	
	УдалитьИзРегистра(СтараяВерсия);
	НаЧтение = Истина;
	КоличествоЗанятыхФайлов = 0;
	ЗанестиИнформациюФайлаВРегистр(НоваяВерсия, ПолноеИмяФайла, ИмяКаталога, 
		НаЧтение, 0, ВРабочемКаталогеВладельца,
		КоличествоЗанятыхФайлов);
		
КонецПроцедуры

// Записать в регистр сведений ФайлыВРабочемКаталогеКомпьютера информацию о пути файла
//  Версия - СправочникСсылка.ВерсииФайлов - версия
//  ПолныйПуть - Строка - полный путь файла
//  ИмяКаталога - путь рабочего каталога
//  НаЧтение - Булево - файл помещен на чтение
//  РазмерФайла  - размер файла в байтах
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
//  КоличествоЗанятыхФайлов - возвращаемый параметр
Процедура ЗанестиИнформациюФайлаВРегистр(Версия, ПолныйПуть, ИмяКаталога, НаЧтение, 
	РазмерФайла, ВРабочемКаталогеВладельца, КоличествоЗанятыхФайлов)  Экспорт
	
	ИмяФайлаСПутем = ПолныйПуть;
	
	Если ВРабочемКаталогеВладельца = Ложь Тогда
		ИмяКаталогаДляПроверки = ИмяКаталога;
		ФайловыеФункцииКлиентСервер.УдалитьСлешЕслиНужно(ИмяКаталогаДляПроверки);
		Если СтрНайти(ПолныйПуть, ИмяКаталогаДляПроверки) = 1 Тогда
			ИмяФайлаСПутем = Сред(ПолныйПуть, СтрДлина(ИмяКаталогаДляПроверки) + 2);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.СоздатьНаборЗаписей();
	
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия.Ссылка);
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Версия = Версия.Ссылка;
	НоваяЗапись.Идентификатор = Идентификатор;
	ТекСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	НоваяЗапись.ИмяКомпьютера = ТекСеанс.ИмяКомпьютера;
	НоваяЗапись.Путь = ИмяФайлаСПутем;
	
	Если РазмерФайла <> 0 Тогда
		НоваяЗапись.Размер = РазмерФайла;
	Иначе 
		НоваяЗапись.Размер = Версия.Размер;
	КонецЕсли;
	
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДатаСеанса();
	НоваяЗапись.ДатаОбращения = ТекущаяДатаСеанса();
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;
	
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);
	
КонецПроцедуры

// Возвращает массив файлов в регистре сведений ФайлыВРабочемКаталогеКомпьютера
// Возвращаемое значение:
//   Массив - массив структур описывающих файлы
Функция СписокФайловВРегистре() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокФайлов = Новый Массив;
	Идентификатор = ФайловыеФункции.ПолучитьСоставнойИдентификаторПользователя();
	
	// Для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Идентификатор", Идентификатор);
	
	ЗапросВРегистр.Текст = 
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталогеКомпьютера.Версия КАК Версия,
	|	ФайлыВРабочемКаталогеКомпьютера.НаЧтение КАК НаЧтение,
	|	ФайлыВРабочемКаталогеКомпьютера.Размер КАК Размер,
	|	ФайлыВРабочемКаталогеКомпьютера.Путь КАК Путь,
	|	ФайлыВРабочемКаталогеКомпьютера.ИмяКомпьютера КАК ИмяКомпьютера
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК ФайлыВРабочемКаталогеКомпьютера
	|ГДЕ
	|	ФайлыВРабочемКаталогеКомпьютера.Идентификатор = &Идентификатор
	|	И ФайлыВРабочемКаталогеКомпьютера.ВРабочемКаталогеВладельца = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФайлыВРабочемКаталогеКомпьютера.Версия.ПолноеНаименование";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Версия = Выборка.Версия;
			
			Запись = Новый Структура;
			Запись.Вставить("ДатаМодификацииУниверсальная", Версия.ДатаМодификацииУниверсальная);
			Запись.Вставить("ПолноеНаименование", Версия.ПолноеНаименование);
			Запись.Вставить("ИндексКартинки", Версия.ИндексКартинки);
			Запись.Вставить("Размер", Выборка.Размер);
			Запись.Вставить("Ссылка", Версия.Ссылка);
			Запись.Вставить("Редактирует", Версия.Владелец.Редактирует);
			Запись.Вставить("НаЧтение", Выборка.НаЧтение);
			Запись.Вставить("ЧастичныйПуть", Выборка.Путь);
			Запись.Вставить("ИмяКомпьютера", Выборка.ИмяКомпьютера);
			
			СписокФайлов.Добавить(Запись);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокФайлов;
КонецФункции

// Создать папку файлов
// Параметры
// Имя - Строка - имя папки
// Родитель - СправочникСсылка.ПапкиФайлов - родительская папка
// Пользователь - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники - ответственный за папку
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиФайлов
Функция СправочникиПапкиСоздатьЭлемент(Имя, Родитель, Пользователь = Неопределено) Экспорт
	Папка = Справочники.ПапкиФайлов.СоздатьЭлемент();
	Папка.Наименование = Имя;
	Папка.Родитель = Родитель;
	Папка.ДатаСоздания = ТекущаяДатаСеанса();
	
	Если Пользователь = Неопределено Тогда
		Папка.Ответственный = Сотрудники.ОсновнойСотрудник();
	Иначе
		Папка.Ответственный = Пользователь;
	КонецЕсли;
	
	Папка.Записать();
	Возврат Папка.Ссылка;
КонецФункции

// Формирует отчет для файлов с ошибками.
//
// Параметры:
//   МассивИменФайловСОшибками - массив строк путей к файлам.
//
// Возвращаемое значение:
//   ТабличныйДокумент с отчетом.
//
Функция ИмпортФайловСформироватьОтчет(МассивИменФайловСОшибками) Экспорт
	
	Документ = Новый ТабличныйДокумент;
	Макет = Справочники.Файлы.ПолучитьМакет("МакетОтчета");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Описание = НСтр("ru = 'Не удалось загрузить следующие файлы:'");
	Документ.Вывести(ОбластьЗаголовок);
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Для Каждого Выборка Из МассивИменФайловСОшибками Цикл
		ОбластьСтрока.Параметры.Название = Выборка.ИмяФайла;
		ОбластьСтрока.Параметры.Ошибка = Выборка.Ошибка;
		Документ.Вывести(ОбластьСтрока);
	КонецЦикла;     
	
	Отчет = Новый ТабличныйДокумент;
	Отчет.Вывести(Документ);
	
	Возврат Отчет;
	
КонецФункции

// Сортирует массив структур по полю Дата - на сервере, т.к. на тонком клиенте нет ТаблицаЗначений
// Параметры
// МассивСтруктур - массив структур описаний файлов
Процедура СортироватьМассивСтруктур(МассивСтруктур) Экспорт
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Путь");
	ТаблицаФайлов.Колонки.Добавить("Версия");
	ТаблицаФайлов.Колонки.Добавить("Размер");
	ТаблицаФайлов.Колонки.Добавить("ДатаПомещенияВРабочийКаталог", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка из МассивСтруктур Цикл
		
		НоваяСтрока = ТаблицаФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, 
			"Путь, Размер, Версия, ДатаПомещенияВРабочийКаталог");
		
		
		//  Будет самой старой - и удалится при очистке из рабочего каталога самых старых файлов
		ДатаПомещения = Дата('00010101');
		
		Версия = Неопределено;
		Владелец = Неопределено;
		НомерВерсии = Неопределено;
		ВРегистреНаЧтение = Неопределено;
		ВРегистреКодФайла = Неопределено;
		ВРегистреПапка = Неопределено;
		ФайлЕстьВРегистре = НайтиВРегистреПоПути(НоваяСтрока.Путь, Версия, ДатаПомещения, Владелец, НомерВерсии, 
			ВРегистреНаЧтение, ВРегистреКодФайла, ВРегистреПапка);
			
		НоваяСтрока.Версия = Версия;
		НоваяСтрока.ДатаПомещенияВРабочийКаталог = ДатаПомещения;
			
		Если ФайлЕстьВРегистре Тогда
				
			РедактируетТекущийПользователь = ПолучитьРедактируетТекущийПользователь(Версия);
			Если РедактируетТекущийПользователь Тогда // удалим из списка - т.е. не будем удалять из кеша	
				ТаблицаФайлов.Удалить(НоваяСтрока);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// Сортировка по дате - в начале будут самые давно помещенные в рабочий каталог
	ТаблицаФайлов.Сортировать("ДатаПомещенияВРабочийКаталог Возр");  
	
	МассивСтруктурВозврат = Новый Массив;
	
	Для Каждого Строка из ТаблицаФайлов Цикл
		Запись = Новый Структура;
		Запись.Вставить("Путь", Строка.Путь);
		Запись.Вставить("Размер", Строка.Размер);
		Запись.Вставить("Версия", Строка.Версия);
		Запись.Вставить("ДатаПомещенияВРабочийКаталог", Строка.ДатаПомещенияВРабочийКаталог);
		МассивСтруктурВозврат.Добавить(Запись);
	КонецЦикла;
	
	МассивСтруктур = МассивСтруктурВозврат;	
КонецПроцедуры // СортироватьМассивСтруктур()

// Удаляет массив версий из регистра
Процедура УдалитьМассивВерсийИзРегистра(МассивДляУдаленияИзРегистра) Экспорт
	
	Для Каждого Описание Из МассивДляУдаленияИзРегистра Цикл
		УдалитьИзРегистра(Описание.Версия);
	КонецЦикла;	
	
КонецПроцедуры	

// Возвращает настройку - Спрашивать режим редактирования при открытии файла
// Возвращаемое значение:
//   Булево - Спрашивать режим редактирования при открытии файла
Функция СпрашиватьРежимРедактированияПриОткрытииФайла()
	СпрашиватьРежимРедактированияПриОткрытииФайла = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла");
	Если СпрашиватьРежимРедактированияПриОткрытииФайла = Неопределено Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = Истина;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
	КонецЕсли;
	
	Возврат СпрашиватьРежимРедактированияПриОткрытииФайла;
КонецФункции

// Считаем ДействиеПоДвойномуЩелчкуМыши - если первый раз - поставим правильное значение
//
// Возвращаемое значение:
//   Строка - Действие по двойному щелчку мыши
Функция ДействиеПоДвойномуЩелчкуМыши()
	КакОткрывать = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши");
	
	Если КакОткрывать = Неопределено Или КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ПустаяСсылка() Тогда
		КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", КакОткрывать);
	КонецЕсли;
	
	Если КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл Тогда
		Возврат "ОткрыватьФайл";
	Иначе
		Возврат "ОткрыватьКарточку";
	КонецЕсли;
КонецФункции

// Считаем из настроек СпособПроверкиОрфографии.
//
// Возвращаемое значение:
//   ПеречислениеССылка.СпособыПроверкиОрфографии
//
Функция СпособПроверкиОрфографии()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	СпособПроверкиОрфографии = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами/СпособПроверкиОрфографии", ИдентификаторКлиента);
			
	Если Не ЗначениеЗаполнено(СпособПроверкиОрфографии) Тогда
		СпособПроверкиОрфографии = Перечисления.СпособыПроверкиОрфографии.MicrosoftOfficeWord;
	КонецЕсли;
	
	Возврат СпособПроверкиОрфографии;
	
КонецФункции

// Считаем из настроек ПутьКР7Builder 
//
// Возвращаемое значение:
//   Строка - ПутьКР7Builder 
Функция ПутьКР7Builder()
	
	ПутьКР7Builder  = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСравненияФайлов", "ПутьКР7Builder ");
	
	Возврат ПутьКР7Builder;
	
КонецФункции

// Функция возвращает количество Файлов, занятых текущим пользователем
// в разрезе владельца
// Параметры
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   Число  - количество занятых файлов
Функция КоличествоЗанятыхФайлов(ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Редактирует = &Редактирует
		|	И Файлы.ВладелецФайла = &Владелец";
	
	Запрос.УстановитьПараметр("Редактирует", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Владелец", ВладелецФайла);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.Количество;
	
	Возврат Результат;
КонецФункции

// Получает значение настройки  ПоказыватьКолонкуРазмер
// Возвращаемое значение:
//   Булево - Показывать колонку размер
Функция ПолучитьПоказыватьКолонкуРазмер() Экспорт
	ПоказыватьКолонкуРазмер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер");
	Если ПоказыватьКолонкуРазмер = Неопределено Тогда
		ПоказыватьКолонкуРазмер = Ложь;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер);
	КонецЕсли;
	
	Возврат ПоказыватьКолонкуРазмер;
КонецФункции

// Функция меняет ВладелецФайла объектам типа Справочник.Файл, вернет Истина при успехе
// Параметры
//  МассивСсылокНаФайлы - Массив - массив файлов
//  НовыйВладелецФайла  - ЛюбаяСсылка - новый владелец файла
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция УстановитьВладельцаФайла(МассивСсылокНаФайлы, НовыйВладелецФайла) Экспорт
	
	Если МассивСсылокНаФайлы.Количество() = 0 Или Не ЗначениеЗаполнено(НовыйВладелецФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПрежнийВладелец = МассивСсылокНаФайлы[0].ВладелецФайла;
	
	// Тот же родитель - ничего делать не надо
	Если (ПрежнийВладелец = НовыйВладелецФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Другой тип владельца - скажем было письмо, стала папка файлов - нужно копировать, а не перемещать
	Если ТипЗнч(НовыйВладелецФайла) <> ТипЗнч(ПрежнийВладелец) Тогда 
		
		ХранитьВерсии = Истина;
		СкопироватьФайлы(МассивСсылокНаФайлы, НовыйВладелецФайла, ХранитьВерсии);
		ВыполненноеДействие = "Копирование";
		Возврат Истина;
		
	КонецЕсли;
	
	СтараяПапка = МассивСсылокНаФайлы[0].ВладелецФайла;
	Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(МассивСсылокНаФайлы[0]).Удаление Тогда
		ВызватьИсключение СтрШаблон(
		                     НСтр("ru = 'У вас нет права на удаление файлов из папки ""%1"".'"),
		                     Строка(СтараяПапка));
	КонецЕсли;	
	
	НачатьТранзакцию();
	Попытка
	
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ПрежнийВладелец = ФайлПринятый.ВладелецФайла; 
			
			ФайлОбъект = ФайлПринятый.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.ВладелецФайла = НовыйВладелецФайла;
			ФайлОбъект.Записать();
			
			ПротоколированиеРаботыСотрудников.ЗаписатьПеремещениеФайла(ФайлПринятый, ПрежнийВладелец, НовыйВладелецФайла);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Вернет Истина если есть зацикливание (если одну из папок переносим в ее же дочернюю папку)
// Параметры
//  МассивСсылокНаФайлы - Массив - массив файлов
//  НовыйРодитель  - ЛюбаяСсылка - новый владелец файла
//
// Возвращаемое значение:
//   Булево  - есть зацикливание
Функция ЕстьЗацикливание(Знач МассивСсылокНаФайлы, НовыйРодитель)
	
	Если МассивСсылокНаФайлы.Найти(НовыйРодитель) <> Неопределено Тогда
		Возврат Истина; // нашли зацикливание
	КонецЕсли;
	
	Родитель = НовыйРодитель.Родитель;
	Если Родитель.Пустая() Тогда // дошли до корня
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьЗацикливание(МассивСсылокНаФайлы, Родитель) Тогда
		Возврат Истина; // нашли зацикливание
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Функция меняет свойство Родитель объектам типа Справочник.ПапкиФайла, вернет Истина при успехе, 
// в переменной НайденоЗацикливание вернет Истина, если одну из папок переносим в ее же дочернюю папку
//
// Параметры
//  МассивСсылокНаФайлы - Массив - массив файлов
//  НовыйРодитель  - ЛюбаяСсылка - новый владелец файла
//  НайденоЗацикливание - Булево - возвращает Истина, если найдено зацикливание
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция СменитьРодителяПапок(МассивСсылокНаФайлы, НовыйРодитель, НайденоЗацикливание) Экспорт
	НайденоЗацикливание = Ложь;
	
	Если МассивСсылокНаФайлы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// тот же родитель - ничего делать не надо
	Если МассивСсылокНаФайлы.Количество() = 1 И (МассивСсылокНаФайлы[0].Родитель = НовыйРодитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьЗацикливание(МассивСсылокНаФайлы, НовыйРодитель) Тогда
		НайденоЗацикливание = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ФайлОбъект = ФайлПринятый.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.Родитель = НовыйРодитель;
			ФайлОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Вернет Истина, если в указанном элементе справочника ПапкиФайлов есть дочерний элемент с таким именем
// Параметры
//  ИмяФайла  - имя папки
//  Родитель - СправочникССылка.ПапкиФайлов - Родитель папки
//  ПерваяПапкаСТакимЖеИменем - СправочникССылка.ПапкиФайлов - первая же найденная папка с указанным именем
//
// Возвращаемое значение:
//   Булево  - есть дочерний элемент с таким именем
Функция ЕстьПапкаСТакимИменем(ИмяФайла, Родитель, ПерваяПапкаСТакимЖеИменем) Экспорт
	
	ПерваяПапкаСТакимЖеИменем = Справочники.ПапкиФайлов.ПустаяСсылка();
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Наименование", ИмяФайла);
	ЗапросВПапки.УстановитьПараметр("Родитель", Родитель);
	ЗапросВПапки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                     |	ПапкиФайлов.Ссылка КАК Ссылка
	                     |ИЗ
	                     |	Справочник.ПапкиФайлов КАК ПапкиФайлов
	                     |ГДЕ
	                     |	ПапкиФайлов.Наименование = &Наименование
	                     |	И ПапкиФайлов.Родитель = &Родитель
	                     |	И ПапкиФайлов.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = ЗапросВПапки.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выгрузить();
		ПерваяПапкаСТакимЖеИменем = ВыборкаЗапроса[0].Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	
	Возврат Ложь;
КонецФункции

// Вернет Истина, если в указанном элементе справочника Файлы есть файл с таким именем
// Параметры
//  ИмяФайла  - имя файла
//  Родитель - ЛюбаяСсылка - владелец файла
//  ПерваяПапкаСТакимЖеИменем - СправочникССылка.ПапкиФайлов - первая же найденная папка с указанным именем
//
// Возвращаемое значение:
//   Булево  - есть дочерний элемент с таким именем
Функция ЕстьФайлСТакимИменем(ИмяФайла, Родитель) Экспорт
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Наименование", ИмяФайла);
	ЗапросВПапки.УстановитьПараметр("Родитель", Родитель);
	ЗапросВПапки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                     |	Файлы.Ссылка КАК Ссылка
	                     |ИЗ
	                     |	Справочник.Файлы КАК Файлы
	                     |ГДЕ
	                     |	Файлы.ПолноеНаименование = &Наименование
	                     |	И Файлы.ВладелецФайла = &Родитель";
	
	РезультатЗапроса = ЗапросВПапки.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// в справочнике ВерсииФайлов из данных в Код(Строка) заполняет НомерВерсии(Число)
Процедура ЗаполнитьНомерВерсииИзКодаСправочника() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка,
	|	ВерсииФайлов.ПометкаУдаления,
	|	ВерсииФайлов.Код,
	|	ВерсииФайлов.НомерВерсии,
	|	ВерсииФайлов.Владелец.ПометкаУдаления КАК ВладелецПометкаУдаления,
	|	ВерсииФайлов.Владелец.ТекущаяВерсия
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НомерВерсии = 0 Тогда 
			
			ОписаниеТипов = Новый ОписаниеТипов("Число");
			КодЧисло = ОписаниеТипов.ПривестиЗначение(Выборка.Код);
			Если КодЧисло <> 0 Тогда
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.НомерВерсии = КодЧисло;
				
				// Коррекция ситуации, допустимой ранее, но недопустимой сейчас - активная версия помечена на удаление, а владелец
				// - нет.
				Если Выборка.ПометкаУдаления = Истина И Выборка.ВладелецПометкаУдаления = Ложь И Выборка.ТекущаяВерсия = Выборка.Ссылка Тогда
					Объект.ПометкаУдаления = Ложь;
				КонецЕсли;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			КонецЕсли

		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// в справочнике ВерсииФайлов заполняет ТипХраненияФайла значением ВБазе
Процедура ЗаполнитьТипХраненияФайлаВБазе() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Объект.ТипХраненияФайла.Пустая() Тогда
			Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Для справочника ВерсииФайлов переименует файл на диске, если ТипХраненияФайла = ВТомахНаДиске
// Параметры
//  Версия  - СправочникСсылка.ВерсииФайлов - версия файла
//  СтароеНаименование - Строка - старое наименование
//  НовоеНаименование - Строка - новое наименование
Процедура ПереименоватьФайлВерсииНаДиске(Версия, СтароеНаименование, НовоеНаименование,
	УникальныйИдентификатор = Неопределено, ДанныеВосстановления = Неопределено) Экспорт
	
	Если НЕ Версия.Том.Пустая() Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Версия, , УникальныйИдентификатор);
			ВерсияОбъект = Версия.ПолучитьОбъект();
			
			СтарыйПолныйПуть = ФайловыеФункции.ПолныйПутьТома(Версия.Том) + Версия.ПутьКФайлу; 
			
			ФайлНаДиске = Новый Файл(СтарыйПолныйПуть);
			ПолныйПуть = ФайлНаДиске.Путь;
			ИмяБезРасширения = ФайлНаДиске.ИмяБезРасширения;
			Расширение = ФайлНаДиске.Расширение;
			НовоеИмяБезРасширения = СтрЗаменить(ИмяБезРасширения, СтароеНаименование, НовоеНаименование);
			
			НовыйПолныйПуть = ПолныйПуть + НовоеИмяБезРасширения + Расширение;
			ПолныйПутьКТому = ФайловыеФункции.ПолныйПутьТома(Версия.Том);
			НовыйЧастичныйПуть = Прав(НовыйПолныйПуть, СтрДлина(НовыйПолныйПуть) - СтрДлина(ПолныйПутьКТому));
			
			ВерсияОбъект.ПутьКФайлу = НовыйЧастичныйПуть;
			
			ФайлНовый = Новый Файл(НовыйПолныйПуть);
			Если Не ФайлНовый.Существует() Тогда // если уже есть такой, ничего не делаем.
			
				Если ДанныеВосстановления = Неопределено Тогда
					// именно перед ВерсияОбъект.Записать(); т.к. может быть файл с таким же именем, и не дадут переименовать
					ПереместитьФайл(СтарыйПолныйПуть, НовыйПолныйПуть); 
				Иначе
					ДанныеВосстановления.СтарыйПуть = СтарыйПолныйПуть;
					ДанныеВосстановления.НовыйПуть = НовыйПолныйПуть;
				КонецЕсли;
				
				ВерсияОбъект.Записать();
			
			КонецЕсли;
			
			РазблокироватьДанныеДляРедактирования(Версия, УникальныйИдентификатор);
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ПереименоватьФайлВерсииНаДиске'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Версия,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// в справочнике ВерсииФайлов и Файлы ИндексКартинки увеличивает в 2 раза
Процедура СменитьИндексПиктограммы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Объект.Расширение);
		Объект.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ИндексКартинки = Объект.ТекущаяВерсия.ИндексКартинки;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Получает данные для переноса файла из одного списка приложенных файлов в другой
// Параметры
// ФайлМассив - массив ссылок на файлы или СправочникСсылка.Файлы
// ВладелецФайла - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   ТаблицаЗначений - описания файлов
Функция ПолучитьДанныеДляПереносаВПриложенныеФайлы(ФайлМассив, ВладелецФайла) Экспорт
	
	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	ТаблРезультат = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Соответствие;
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Если ТаблРезультат.Найти(ФайлСсылка, "Ссылка") <> Неопределено Тогда 
			Результат.Вставить(ФайлСсылка, "Пропустить");
		ИначеЕсли ТаблРезультат.Найти(ФайлСсылка.ПолноеНаименование, "ПолноеНаименование") <> Неопределено Тогда 
			Результат.Вставить(ФайлСсылка, "Обновить");
		Иначе
			Результат.Вставить(ФайлСсылка, "Скопировать");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает список найденных по владельцу элементов справочника "Файлы" на основании переданного массива имен
// Параметры
//   ИменаФайлов - строка, массив строк
//	 Владелец - ссылка на владельца файла
// Возвращаемое значение:
//   Соответствие: Ключ - полное имя файла, Значение - ссылка
Функция НайтиФайлыПоПолнымИменам(ИменаФайлов, Владелец) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка,
		|	Файлы.ПолноеНаименование
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &Владелец
		|	И Файлы.ПолноеНаименование В(&МассивИмен)
		|	И НЕ Файлы.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("МассивИмен", ИменаФайлов);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Результат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ПолноеНаименование, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает список найденных по владельцу элементов справочника "Файлы" на основании переданного массива
//   структур имен и расширений
// Параметры
//   ДанныеФайловДляПоиска - массив структур с наименованиями и расширениями
//	 Владелец - ссылка на владельца файла
// Возвращаемое значение:
//   Соответствие: Ключ - полное имя файла, Значение - ссылка
Функция НайтиФайлыПоПолнымИменамСРасширением(ДанныеФайловДляПоиска, Владелец) Экспорт
	
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТипСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500));
	ТаблицаОтбора.Колонки.Добавить("ПолноеНаименование", ТипСтрока);
	ТаблицаОтбора.Колонки.Добавить("ТекущаяВерсияРасширение", ТипСтрока);
	
	Для Каждого Эл Из ДанныеФайловДляПоиска Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОтбора.Добавить(), Эл);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОтбора.ПолноеНаименование,
		|	ТаблицаОтбора.ТекущаяВерсияРасширение
		|ПОМЕСТИТЬ ТаблицаОтбораФайлов
		|ИЗ
		|	&ТаблицаОтбора КАК ТаблицаОтбора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка,
		|	Файлы.ПолноеНаименование,
		|	Файлы.ТекущаяВерсияРасширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &Владелец
		|	И (Файлы.ПолноеНаименование, Файлы.ТекущаяВерсияРасширение) В
		|			(ВЫБРАТЬ
		|				ТаблицаОтбораФайлов.ПолноеНаименование,
		|				ТаблицаОтбораФайлов.ТекущаяВерсияРасширение
		|			ИЗ
		|				ТаблицаОтбораФайлов КАК ТаблицаОтбораФайлов)
		|	И НЕ Файлы.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Результат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		ИмяСРасширением = Выборка.ПолноеНаименование; 
		Если ЗначениеЗаполнено(Выборка.ТекущаяВерсияРасширение) Тогда
			ИмяСРасширением = ИмяСРасширением + "." + Выборка.ТекущаяВерсияРасширение;
		КонецЕсли;
			
		Результат.Вставить(ИмяСРасширением, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает список файлов указанного владельца с отбором по полным наименованиям файлов из переданного массива
Функция СписокОбновляемыхФайлов(Файлы, ВладелецФайла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Файлы.Ссылка,
		|	Файлы.ПолноеНаименование
		|ПОМЕСТИТЬ ВТ_Источники
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В(&МассивИсточников)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Источники.Ссылка КАК Источник,
		|	Файлы.Ссылка КАК Приемник
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Источники КАК ВТ_Источники
		|		ПО Файлы.ПолноеНаименование = ВТ_Источники.ПолноеНаименование
		|ГДЕ
		|	Файлы.ВладелецФайла = &Владелец";
		
	Запрос.УстановитьПараметр("Владелец", ВладелецФайла);
	Запрос.УстановитьПараметр("МассивИсточников", Файлы);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Результат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Источник, Выборка.Приемник);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Обновляет версии одноименных файлов при переносе из одного списка приложенных файлов в другой
// Параметры
// ФайлМассив - массив ссылок на файлы или СправочникСсылка.Файлы
// ВладелецФайла - ЛюбаяСсылка - владелец файла
// ВернутьМассив - Булево.
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - Скопированный файл, если ВернутьМассив "Ложь".
//   Массив из СправочникСсылка.Файлы - Скопированные файлы, если ВернутьМассив "Истина".
//
Функция ОбновитьФайлВПриложенных(ФайлМассив, Приемники, ВладелецФайла, ВернутьМассив = Ложь) Экспорт
	
	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;
	
	ОбновленныеФайлы = Новый Массив;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Источник = ФайлСсылка;
		Приемник = Приемники.Получить(ФайлСсылка);
		ОбновленныеФайлы.Добавить(Приемник);
		
		Если Не Источник.ТекущаяВерсия.Пустая() Тогда
			
			ХранилищеФайла = Неопределено;
			Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
				ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
			КонецЕсли;	
			
			ТекстХранилище = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(Источник.ТекущаяВерсия);
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.ИмяБезРасширения = Приемник.Наименование;
			СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
			СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
			СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
			СведенияОФайле.АдресВременногоХранилищаТекста = ТекстХранилище;
			СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
			СведенияОФайле.ВремяИзменения = ТекущаяДата();
			СведенияОФайле.ВремяИзмененияУниверсальное = 
				РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(СведенияОФайле.ВремяИзменения);
			
			Версия = СоздатьВерсию(Приемник, СведенияОФайле);
			ОбновитьВерсиюВФайле(Приемник, Версия, ТекстХранилище);
			
		КонецЕсли;
		
	КонецЦикла;    
	
	Если ВернутьМассив Тогда
		
		Результат = ОбновленныеФайлы;
		
	Иначе
		
		Результат = Приемник;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет путь к рабочему каталогу пользователя в настройках и параметре сеанса
// Параметры
// ИмяКаталога - Строка - имя каталога
Процедура СохранитьПутьКРабочемуКаталогуПользователя(ИмяКаталога) Экспорт
	
	ФайловыеФункции.УстановитьПутьКРабочемуКаталогуПользователя(ИмяКаталога);
	
КонецПроцедуры

// Возвращает объект, для которого проверяется право доступа - для Файл это ПапкиФайлов (реквизит ВладелецФайла)
// Параметры
//  Объект  - ЛюбаяСсылка - ссылка на объект
//
// Возвращаемое значение:
//   ЛюбаяСсылка  - объект для которого вычисляются права доступа
Функция ПолучитьОбъектДоступа(Объект) Экспорт
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.Файлы") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат Объект.ВладелецФайла;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Возвращает номер по нарастанию. Предыдущее значение берется из регистра сведений НомераОтсканированныхФайлов
// Параметры
// Владелец - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   Число  - новый номер для сканирования
Функция ПолучитьНовыйНомерДляСканирования(Владелец) Экспорт
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Владелец);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НомераОтсканированныхФайлов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Владелец", Владелец);
		Блокировка.Заблокировать();   		
		
		// Получить структуру с данными ресурсов записи
		СтруктураРесурсов = РегистрыСведений.НомераОтсканированныхФайлов.Получить(СтруктураОтбора);
		
		// Получить максимальный номер из регистра
		Номер = СтруктураРесурсов.Номер;
		Номер = Номер + 1; // увеличим на 1
		
		
		// Запишем новый номер в регистр
		НаборЗаписей = РегистрыСведений.НомераОтсканированныхФайлов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Владелец.Установить(Владелец);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Владелец = Владелец;
		НоваяЗапись.Номер = Номер;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат Номер;
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат 0;
	
КонецФункции

// Очищает настройки форм ФормаНового
Процедура ОчиститьНастройкиФормНовогоФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	// Очистка настроек окна ФормаНового
	ХранилищеСистемныхНастроек.Удалить("Справочник.Файлы.Форма.ФормаНового/НастройкиОкна", "", Неопределено);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Преобразует параметры сканера в виде чисел  - в перечисления
// Параметры
//  РазрешениеЧисло - Число - разрешение dpi 
//  ЦветностьЧисло  - Число - Цветность (0,1,2)
//  ПоворотЧисло    - Число - Поворот
//  РазмерБумагиЧисло - Число - Размер бумаги
//  Разрешение - Перечисление.РазрешенияСканированногоИзображения - Разрешение
//  Цветность  - Перечисление.ЦветностиИзображения - Цветность
//  Поворот  - Перечисление.ПоворотИзображения - Поворот
//  РазмерБумаги - Перечисление.РазмерыБумаги - Размер бумаги
Процедура ПреобразоватьПараметрыСканераВПеречисления(РазрешениеЧисло, ЦветностьЧисло, ПоворотЧисло, РазмерБумагиЧисло, 
	Разрешение, Цветность, Поворот, РазмерБумаги) Экспорт
	
	Если РазрешениеЧисло = 200 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi200;
	ИначеЕсли РазрешениеЧисло = 300 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi300;
	ИначеЕсли РазрешениеЧисло = 600 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi600;
	ИначеЕсли РазрешениеЧисло = 1200 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi1200;
	КонецЕсли;
	
	Если ЦветностьЧисло = 0 Тогда
		Цветность = Перечисления.ЦветностиИзображения.Монохромное;
	ИначеЕсли ЦветностьЧисло = 1 Тогда
		Цветность = Перечисления.ЦветностиИзображения.ГрадацииСерого;
	ИначеЕсли ЦветностьЧисло = 2 Тогда
		Цветность = Перечисления.ЦветностиИзображения.Цветное;
	КонецЕсли;
	
	Если ПоворотЧисло = 0 Тогда
		Поворот = Перечисления.СпособыПоворотаИзображения.НетПоворота;
	ИначеЕсли ПоворотЧисло = 90 Тогда
		Поворот = Перечисления.СпособыПоворотаИзображения.ВправоНа90;
	ИначеЕсли ПоворотЧисло = 180 Тогда
		Поворот = Перечисления.СпособыПоворотаИзображения.ВправоНа180;
	ИначеЕсли ПоворотЧисло = 270 Тогда
		Поворот = Перечисления.СпособыПоворотаИзображения.ВлевоНа90;
	КонецЕсли;
	
	Если РазмерБумагиЧисло = 0 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.НеЗадано;
	ИначеЕсли РазмерБумагиЧисло = 11 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.A3;
	ИначеЕсли РазмерБумагиЧисло = 1 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.A4;
	ИначеЕсли РазмерБумагиЧисло = 5 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.A5;
	ИначеЕсли РазмерБумагиЧисло = 6 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.B4;
	ИначеЕсли РазмерБумагиЧисло = 2 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.B5;
	ИначеЕсли РазмерБумагиЧисло = 7 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.B6;
	ИначеЕсли РазмерБумагиЧисло = 14 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.C4;
	ИначеЕсли РазмерБумагиЧисло = 15 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.C5;
	ИначеЕсли РазмерБумагиЧисло = 16 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.C6;
	ИначеЕсли РазмерБумагиЧисло = 3 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.USLetter;
	ИначеЕсли РазмерБумагиЧисло = 4 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.USLegal;
	ИначеЕсли РазмерБумагиЧисло = 10 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.USExecutive;
	КонецЕсли;
	
КонецПроцедуры

// Преобразует число в перечисление и сохраняет в настройках
// Параметры
//  РазрешениеЧисло - Число - разрешение dpi 
//  ЦветностьЧисло  - Число - Цветность (0,1,2)
//  ПоворотЧисло    - Число - Поворот
//  РазмерБумагиЧисло - Число - Размер бумаги
//  ИдентификаторКлиента - Строка - Идентификатор клиента
Процедура ПреобразоватьИСохранитьПараметрыСканера(РазрешениеЧисло, ЦветностьЧисло, ПоворотЧисло, 
		РазмерБумагиЧисло, ИдентификаторКлиента) Экспорт
	Перем Разрешение;
	Перем Цветность;
	Перем Поворот;
	Перем РазмерБумаги;
	
	ПреобразоватьПараметрыСканераВПеречисления(РазрешениеЧисло, ЦветностьЧисло, ПоворотЧисло, РазмерБумагиЧисло, 
		Разрешение, Цветность, Поворот, РазмерБумаги);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиСканирования/Разрешение", ИдентификаторКлиента, Разрешение);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиСканирования/Цветность", ИдентификаторКлиента, Цветность);
КонецПроцедуры

// Вызывается при обновлении на 1.0.6.3 - заполняет пути ТомаХраненияФайлов
Процедура ЗаполнитьПутиТома() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТомаХраненияФайлов.Ссылка
		|ИЗ
		|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
		|ГДЕ
		|	ТомаХраненияФайлов.ЭтоГруппа = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ПолныйПутьLinux = Объект.ПолныйПутьWindows;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// В справочнике Файлы перезаписывает все элементы
Процедура ПерезаписатьВсеФайлы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Переносит настройку (копирует в новое место, в старом удаляет)
Процедура ПеренестиНастройку(Объект, Настройка, ИмяТекущее, ИмяУстанавливаемое) 
	
	Значение = ХранилищеОбщихНастроек.Загрузить(Объект, Настройка, , ИмяТекущее);
	
	Если Значение <> Неопределено Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Объект, Настройка, Значение, , ИмяУстанавливаемое);
		ХранилищеОбщихНастроек.Удалить(Объект, Настройка, ИмяТекущее);
	КонецЕсли;
КонецПроцедуры

// При переименовании пользователя переносит его настройки - РабочийКаталог, ДействиеПоДвойномуЩелчкуМыши и пр
Процедура ПеренестиНастройкиПриСменеИмениПользователи(знач ИмяТекущее, знач ИмяУстанавливаемое) Экспорт
	
	ПеренестиНастройку("ЛокальныйКэшФайлов", "МаксимальныйРазмерЛокальногоКэшаФайлов", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("ЛокальныйКэшФайлов", "УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования", ИмяТекущее, ИмяУстанавливаемое);
	
	ПеренестиНастройку("НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиПрограммы", "ОткрыватьНачалоРаботыПриЗапуске", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиПрограммы", "ПапкаДляСохранитьКак", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиПрограммы", "ПапкаДляОбновитьИзФайла", ИмяТекущее, ИмяУстанавливаемое);
	
	ПеренестиНастройку("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиСравненияФайлов", "ПутьКР7Builder", ИмяТекущее, ИмяУстанавливаемое);
	
	ПеренестиНастройку("ИмяПапкиВыгрузки", "ИмяПапкиВыгрузки", ИмяТекущее, ИмяУстанавливаемое);
	
	ПеренестиНастройку("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", ИмяТекущее, ИмяУстанавливаемое);
	
КонецПроцедуры

// Обработчик события ПередЗаписью объектов-владельцев файлов.
// Определен для объектов, кроме Документ.
//
// Параметры:
//  Источник - Объект - стандартный параметр события ПередЗаписью, например, СправочникОбъект.
//                      Исключение - ДокументОбъект.
//  Отказ    - Булево - стандартный параметр события ПередЗаписью.
//
Процедура УстановитьПометкуУдаленияФайловПередЗаписью(Источник, Отказ) Экспорт
	Если Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления Тогда 
		ПометитьНаУдалениеПриложенныеФайлы(Источник.Ссылка, Источник.ПометкаУдаления);
	КонецЕсли;
КонецПроцедуры

// Обработчик события ПередЗаписью объектов-владельцев файлов.
// Определен только для объектов Документ.
//
// Параметры:
//  Источник        - ДокументОбъект           - стандартный параметр события ПередЗаписью.
//  Отказ           - Булево                   - стандартный параметр события ПередЗаписью.
//  РежимЗаписи     - РежимЗаписиДокумента     - стандартный параметр события ПередЗаписью.
//  РежимПроведения - РежимПроведенияДокумента - стандартный параметр события ПередЗаписью.
Процедура УстановитьПометкуУдаленияФайловДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления Тогда 
		ПометитьНаУдалениеПриложенныеФайлы(Источник.Ссылка, Источник.ПометкаУдаления);
	КонецЕсли;
КонецПроцедуры

// Получает первые 100 версий файлов, у которых еще не извлечен текст 
//
// Возвращаемое значение:
//   Массив - массив версий файлов
Функция ПолучитьМассивВерсийДляИзвлеченияТекста() Экспорт
	
	МассивВерсий = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 			
	 "ВЫБРАТЬ ПЕРВЫЕ 100
	 |	ВерсииФайлов.Ссылка КАК Ссылка,
	 |	ТекстыВерсийФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста
	 |ИЗ
	 |	Справочник.ВерсииФайлов КАК ВерсииФайлов
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
	 |		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
	 |ГДЕ
	 |	(ТекстыВерсийФайлов.Версия ЕСТЬ NULL
	 |			ИЛИ ТекстыВерсийФайлов.СтатусИзвлеченияТекста В (ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен), ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка)))
	 |	И ВерсииФайлов.Зашифрован = &Зашифрован";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен);
	Запрос.УстановитьПараметр("Зашифрован", Ложь);
	
	Результат = Запрос.Выполнить();
	ТаблицаВыгрузки = Результат.Выгрузить();
	
	Для Каждого Строка Из ТаблицаВыгрузки Цикл
		ВерсияСсылка = Строка.Ссылка;
		МассивВерсий.Добавить(ВерсияСсылка);
	КонецЦикла;
	
	Возврат МассивВерсий;
	
КонецФункции

// Записывает на сервер результат извлечения текста - извлеченный текст и СтатусИзвлеченияТекста
Процедура ЗаписатьРезультатИзвлеченияТекста(ВерсияСсылка, РезультатИзвлечения, АдресВременногоХранилищаТекста, Расширение) Экспорт
	
	ФайлЗаблокирован = Ложь;
	Файл = ВерсияСсылка.Владелец;
	
	Текст = "";
	ИзвлеченныйТекст = "";
	СтатусИзвлеченияТекста = Неопределено;
	
	Если Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		
		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
			Текст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		Иначе	
			Текст = АдресВременногоХранилищаТекста;
		КонецЕсли;
		
		ИзвлеченныйТекст = Новый ХранилищеЗначения(Текст);
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		
	КонецЕсли;
	
	Если РезультатИзвлечения = "НеИзвлечен" Тогда
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	ИначеЕсли РезультатИзвлечения = "Извлечен" Тогда
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	ИначеЕсли РезультатИзвлечения = "ИзвлечьНеУдалось" Тогда
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		
		ТекстХранилище = Неопределено;
		РегистрыСведений.ТекстыВерсийФайлов.ДобавитьЗаписьИзвлечения(ВерсияСсылка, СтатусИзвлеченияТекста, ИзвлеченныйТекст, 
			Расширение, ТекстХранилище);		
		
		РегистрыСведений.ТекстыФайлов.ДобавитьЗапись(Файл, ТекстХранилище);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Получает массив ссылок всех файлов в папке (если Рекурсивно, то и в подпапках тоже)
// Параметры
//  Папка  - СправочникСсылка.ПапкиФайлов - папка файлов
//  Рекурсивно - Булево - обходить ли подпапки
//
// Возвращаемое значение:
//   Массив - массив файлов
Функция ПолучитьВсеФайлыВПапке(Папка, Рекурсивно) Экспорт
	
	МассивФайлов = Новый Массив;
	
	ПолучитьВсеФайлыВОднойПапке(Папка, МассивФайлов);
	
	Если Рекурсивно Тогда
		
		МассивПапок = Новый Массив;
		
		ЗапросВПапки = Новый Запрос;
		ЗапросВПапки.УстановитьПараметр("Родитель", Папка);
		ЗапросВПапки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                     |	ПапкиФайлов.Ссылка КАК Ссылка
		                     |ИЗ
		                     |	Справочник.ПапкиФайлов КАК ПапкиФайлов
		                     |ГДЕ
		                     |	ПапкиФайлов.Родитель В ИЕРАРХИИ(&Родитель)";
		
		Результат = ЗапросВПапки.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивПапок.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		Для Каждого Подпапка Из МассивПапок Цикл
			ПолучитьВсеФайлыВОднойПапке(Подпапка, МассивФайлов);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивФайлов;
КонецФункции

// Получает массив ссылок всех файлов в папке
// Параметры
//  Папка  - СправочникСсылка.ПапкиФайлов - папка файлов
//  МассивФайлов - Массив - массив файлов
Процедура ПолучитьВсеФайлыВОднойПапке(Папка, МассивФайлов) Экспорт
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Родитель", Папка);
	ЗапросВПапки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						 |	Файлы.Ссылка КАК Ссылка
						 |ИЗ
						 |	Справочник.Файлы КАК Файлы
						 |ГДЕ
						 |	Файлы.ВладелецФайла = &Родитель";
	
	Результат = ЗапросВПапки.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивФайлов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Получает ДанныеФайла и НавигационнуюСсылкуВерсии
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Структура - структура с данными файла
Функция ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсии(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка, ВерсияСсылка);
	Если ВерсияСсылка = Неопределено Тогда
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
	КонецЕсли;
	НавигационнаяСсылкаВерсии = ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, ИдентификаторФормы);
	
	СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии", ДанныеФайла, НавигационнаяСсылкаВерсии);
	
	Возврат СтруктураВозврата;
КонецФункции

// возвращает представления типов
Функция ПолучитьПредставленияТипов(Типы) Экспорт
	
	СписокТипов = Новый СписокЗначений;
	ТипыОбъекта = Типы;
	
	Для Каждого ТипОбъекта Из ТипыОбъекта Цикл
		
		ОбъектСсылка = Новый(ТипОбъекта);
		ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(ТипОбъекта);
		Представление = ОбъектСсылка.Метаданные().ПредставлениеОбъекта;
		
		Если ПустаяСтрока(Представление) Тогда
			Представление = ОбъектСсылка.Метаданные().Синоним;
		КонецЕсли;
		
		СписокТипов.Добавить(ВидОбъекта + "." + ОбъектСсылка.Метаданные().Имя, Представление);
	
	КонецЦикла;
	
	СписокТипов.СортироватьПоПредставлению();
	
	Возврат СписокТипов;
	
КонецФункции

// Получает ДанныеФайла и НавигационнуюСсылкуВерсии всех подчиненных файлов для Вх Исх Внутр
// Параметры
//  ВладелецФайла - ЛюбаяСсылка - владелец файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Структура - структура с данными файла
Функция ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсииВсехПодчиненныхФайлов(ВладелецФайла, ИдентификаторФормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ Файлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		ФайлСсылка = Выборка.Ссылка;
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
		ДанныеФайла = ДанныеФайла(ФайлСсылка, ВерсияСсылка);
		НавигационнаяСсылкаВерсии = ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, ИдентификаторФормы);
		
		СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии", ДанныеФайла, НавигационнаяСсылкаВерсии);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
КонецФункции

// Получает количество версий файла
// Параметры
//  ФайлСсылка - СправочникСсылка.Файлы - файл
//
// Возвращаемое значение:
//   Число - число версий
Функция ПолучитьКоличествоВерсий(ФайлСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(*) КАК Количество
	               |ИЗ
	               |	Справочник.ВерсииФайлов КАК ВерсииФайлов
	               |ГДЕ
	               |	ВерсииФайлов.Владелец = &ФайлСсылка";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Число(Выборка.Количество);
	
КонецФункции

// Получает ДанныеФайла и НавигационнуюСсылкуВерсии всех подчиненных файлов
// Параметры
//  ФайлСсылка - СправочникСсылка.Файлы - файл
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Массив - массив структур с данными файлов
Функция ДанныеФайлаИНавигационнаяСсылкаВсехВерсийФайла(ФайлСсылка, ИдентификаторФормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВерсииФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Владелец = &ФайлСсылка";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		ВерсияСсылка = Выборка.Ссылка;
		ДанныеФайла = ДанныеФайла(ФайлСсылка, ВерсияСсылка);
		НавигационнаяСсылкаВерсии = ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, ИдентификаторФормы);
		
		СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии, ВерсияСсылка", 
			ДанныеФайла, НавигационнаяСсылкаВерсии, ВерсияСсылка);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
КонецФункции

// Получает ДанныеФайла и НавигационнуюСсылкуВерсии, предварительно поместив файл версии во временное хранилище
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Структура - данные файла и навигационная ссылка
Функция ДанныеФайлаИНавигационнаяСсылкаВерсииВоВременномХранилище(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка, ВерсияСсылка);
	Если ВерсияСсылка = Неопределено Тогда
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
	КонецЕсли;
	НавигационнаяСсылкаВерсии = ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, ИдентификаторФормы);
	
	СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии", ДанныеФайла, НавигационнаяСсылкаВерсии);
	
	Возврат СтруктураВозврата;
КонецФункции

// Получает массив сертификатов шифрования
// Параметры
//  Ссылка  - СправочникСсылка.Файлы - файл
//
// Возвращаемое значение:
//   Массив - массив структур
Функция ПолучитьМассивСертификатовШифрования(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСертификатовШифрования = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		СертификатыШифрования = МодульЭлектроннаяПодпись.СертификатыШифрования(Ссылка);
		
		Для Каждого СертификатШифрования Из СертификатыШифрования Цикл
			
			ОтпечатокСтруктура = Новый Структура("Отпечаток, Представление, Сертификат",
				СертификатШифрования.Отпечаток, 
				СертификатШифрования.Представление, 
				СертификатШифрования.Сертификат);
			МассивСертификатовШифрования.Добавить(ОтпечатокСтруктура);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивСертификатовШифрования;
	
КонецФункции

// Получает ДанныеФайла и сам файл как ДвоичныеДанные
//
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла.
//  АдресПодписи - Строка - навигационная ссылка, содержащая адрес файла подписи во временном хранилище.
//  ИдентификаторФормы  - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - ДанныеФайла и сам файл как ДвоичныеДанные и подпись файла как ДвоичныеДанные.
//
Функция ДанныеФайлаИДвоичныеДанные(ФайлСсылка, ВерсияСсылка = Неопределено, 
	АдресПодписи = Неопределено, ИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка, ВерсияСсылка);
	Если ВерсияСсылка = Неопределено Тогда
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
	КонецЕсли;
	
	ДвоичныеДанные = Неопределено;
	
	Попытка
	
		НачатьТранзакцию();
		
		Если ЗначениеЗаполнено(ФайлСсылка) Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Файлы");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ФайлСсылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДвоичныеДанные = ПолучитьДвоичныеДанныеВерсииФайла(ВерсияСсылка);
		
		ЗафиксироватьТранзакцию();

	Исключение	
		
		ОтменитьТранзакцию();
		// с файлами в томе ничего делать не надо - их не успели переименовать еще.
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ДанныеФайлаИДвоичныеДанные'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ФайлСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
		
	КонецПопытки;	
	
	ДвоичныеДанныеПодписи = Неопределено;
	Если АдресПодписи <> Неопределено Тогда
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	КонецЕсли;
	
	Если ИдентификаторФормы <> Неопределено Тогда
		ДвоичныеДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ДанныеФайла, ДвоичныеДанные, ДвоичныеДанныеПодписи",
		ДанныеФайла, ДвоичныеДанные, ДвоичныеДанныеПодписи);
	
	Возврат СтруктураВозврата;
КонецФункции

// Процедура устанавливает специфичные для подсистемы Работа с файлами
// настройки работы с файлами
//
Процедура УстановитьПерсональныеНастройкиРаботыСФайлами(Настройки) Экспорт
	
	Настройки.Вставить("ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши());
	Настройки.Вставить("СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла());
	Настройки.Вставить("СпособСравненияВерсийФайлов", РаботаСФайламиСлужебный.СпособСравненияВерсийФайлов());
	Настройки.Вставить("ПутьКР7Builder", 			  ПутьКР7Builder());
	Настройки.Вставить("ЭтоПолноправныйПользователь", ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ());
	
	Настройки.Вставить("СпособПроверкиОрфографии", СпособПроверкиОрфографии());
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
	Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Неопределено Тогда
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Истина;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	КонецЕсли;
	Настройки.Вставить("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	
	ИспользоватьImageMagickДляРаспознаванияPDF = ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	Настройки.Вставить("ИспользоватьImageMagickДляРаспознаванияPDF", ИспользоватьImageMagickДляРаспознаванияPDF);
	
	ОчищатьПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ОчищатьПриЗавершенииРаботы");
	Если ОчищатьПриЗавершенииРаботы = Неопределено Тогда
		ОчищатьПриЗавершенииРаботы = Ложь;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЛокальныйКэшФайлов", "ОчищатьПриЗавершенииРаботы", ОчищатьПриЗавершенииРаботы);
	КонецЕсли;
	Настройки.Вставить("ОчищатьПриЗавершенииРаботы", ОчищатьПриЗавершенииРаботы);
	
КонецПроцедуры

// Получает все подписи файла
//
// Параметры
//  ОбъектСсылка  - СправочникСсылка - объект, в табличной части которого содержатся подписи
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//  МассивВозврата - Массив  - массив структур с возвращаемыми значениями
Функция ПолучитьВсеПодписи(ФайлСсылка, УникальныйИдентификатор) Экспорт
	
	ВерсияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
	
	Возврат ФайловыеФункции.ПолучитьВсеПодписи(ВерсияСсылка, УникальныйИдентификатор);
	
КонецФункции

// Устанавливает имя файла при обмене
Функция УстановитьИмяФайлаПриОтправкеДанныхФайла(ЭлементДанных, ИмяКаталогаФайлов, УникальныйИдентификатор) Экспорт
	
	Если РаботаСФайлами.ЭтоЭлементРаботаСФайлами(ЭлементДанных) Тогда
		НовыйПутьФайла = ИмяКаталогаФайлов;
		НовыйПутьФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПутьФайла, ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
		НовыйПутьФайла = НовыйПутьФайла + УникальныйИдентификатор; 
		Возврат НовыйПутьФайла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Удаляет файл при обмене
// Параметры
//  Ссылка - СправочникСсылка.Файлы - файл
//  ПутьСПодкаталогом - Строка - путь с подкаталогом где лежит файл в томе
Процедура УдалитьФайлыПриПолученииДанныхФайла(ЭлементДанных, ПутьСПодкаталогом) Экспорт
	
	Если РаботаСФайлами.ЭтоЭлементРаботаСФайлами(ЭлементДанных) Тогда
		МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
		Если МассивФайловВКаталоге.Количество() = 0 Тогда
			УдалитьФайлы(ПутьСПодкаталогом);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет файл в том при обмене
Процедура ДобавитьНаДискПриПолученииДанныхФайла(ЭлементДанных, ДвоичныеДанные, ПутьКФайлуНаТоме, СсылкаНаТом, 
		ВремяИзменения, ИмяБезРасширения, Расширение, РазмерФайла, Зашифрован = Ложь) Экспорт
	
	Если РаботаСФайлами.ЭтоЭлементРаботаСФайлами(ЭлементДанных) Тогда
		
		Если ЭлементДанных.ЭтоНовый() Тогда // добавлен новый элемент
			
			ДвоичныеДанные = ЭлементДанных.ФайлХранилище.Получить();
			ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
			
			ЭлементДанных.ДополнительныеСвойства.Вставить("ДвоичныеДанные", ДвоичныеДанные);
			
		Иначе
		
			ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлуНаТоме, СсылкаНаТом, 
				ВремяИзменения, ЭлементДанных.НомерВерсии, ИмяБезРасширения, Расширение, РазмерФайла, 
				Зашифрован, Неопределено, ЭлементДанных.Ссылка);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет файл в тома при выполнении команды "разместить файлы начального образа"
// Параметры
//  СоответствиеПутейФайлов - Соответствие - соответствие УникальногоИдентификатора файла и пути на диске к файлу
//  ТипХраненияФайла - Перечисления.ТипыХраненияФайлов - тип хранения файлов
Процедура ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ТипХраненияФайла) Экспорт
	
	Выборка = Справочники.ВерсииФайлов.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.ПолучитьОбъект();
		
		Если Объект.ТипХраненияФайла <> Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификатор = Строка(Объект.Ссылка.УникальныйИдентификатор());
		
		ПолныйПутьФайлаНаДиске = СоответствиеПутейФайлов.Получить(УникальныйИдентификатор);
		ПолныйПутьНовый = "";
		
		Если ПолныйПутьФайлаНаДиске = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ХранилищеФайла = Неопределено;
		
		// В базе-приемнике файлы должны храниться в информационной базе - значит там их и разместим (даже если в исходной базе они были в томах).
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			
			Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			Объект.ПутьКФайлу = "";
			Объект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаНаДиске);
			ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			
		Иначе // В базе-приемнике файлы должны храниться в томах на диске - переместим разархивированный файл на том.
			
			ФайлИсх = Новый Файл(ПолныйПутьФайлаНаДиске);
			РазмерФайла = ФайлИсх.Размер();
			
			ВремяИзменения = Объект.ДатаМодификацииУниверсальная;
			ИмяБезРасширения = Объект.Наименование;
			Расширение = Объект.Расширение;
			
			ПолныйПутьНовый = ФайлИсх.Путь + ИмяБезРасширения + "." + Объект.Расширение;
			ПереместитьФайл(ПолныйПутьФайлаНаДиске, ПолныйПутьНовый);
			
			ПутьКФайлуНаТоме = "";
			СсылкаНаТом = Неопределено;
			// добавить в один из томов (где есть свободное место)
			
			ФайловыеФункции.ДобавитьНаДиск(ПолныйПутьНовый, ПутьКФайлуНаТоме, СсылкаНаТом, ВремяИзменения, 
				Объект.НомерВерсии, ИмяБезРасширения, Расширение, РазмерФайла, Объект.Зашифрован, 
				Неопределено, Объект.Ссылка);
			
			Объект.ПутьКФайлу = ПутьКФайлуНаТоме;
			Объект.Том = СсылкаНаТом.Ссылка;
			
		КонецЕсли;
		
		Объект.ДополнительныеСвойства.Вставить("РазмещениеФайловВТомах", Истина); // чтобы прошла запись подписанных файлов
		Объект.Записать();
		
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ЗаписатьФайлВИнформационнуюБазу(Объект.Ссылка, ХранилищеФайла);	
		КонецЕсли;	
		
		Если НЕ ПустаяСтрока(ПолныйПутьНовый) Тогда
			ФайловыеФункции.УдалитьФайлСЛогированием(ПолныйПутьНовый, "ДобавитьФайлыВТомаПриРазмещении");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет регистрацию изменений - после размещения в томах
// Параметры
//  ПланОбменаСсылка - ПланОбмена.Ссылка - план обмена
Процедура УдалитьРегистрациюИзменений(ПланОбменаСсылка) Экспорт
	
	ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.Справочники.ВерсииФайлов);
	ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.Справочники.Файлы);
	ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.РегистрыСведений.ДвоичныеДанныеФайлов);
	
КонецПроцедуры

// Получает текст запроса для извлечения текста
// Параметры
//  ТекстЗапроса - Строка - текст запроса для извлечения текста
Процедура ПолучитьТекстЗапроса(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ 100
			|	ВерсииФайлов.Ссылка КАК Ссылка,
			|	ТекстыВерсийФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
			|	ВерсииФайлов.ТипХраненияФайла КАК ТипХраненияФайла,
			|	ВерсииФайлов.Расширение КАК Расширение
			|ИЗ
			|	Справочник.ВерсииФайлов КАК ВерсииФайлов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
			|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
			|ГДЕ
			|	(ТекстыВерсийФайлов.Версия ЕСТЬ NULL
			|			ИЛИ ТекстыВерсийФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
			|			ИЛИ ТекстыВерсийФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))
			|	И НЕ ВерсииФайлов.Зашифрован";
	
КонецПроцедуры

// Получает полный путь к файлу на диске
// Параметры
//  ВерсияСсылка  - СправочникСсылка.Файлы - файл
//
// Возвращаемое значение:
//   Строка - полный путь к файлу на диске
Функция ПолучитьИмяФайлаСПутемКДвоичнымДанным(ВерсияСсылка) Экспорт
	
	ИмяФайлаСПутем = "";
	
	Если ВерсияСсылка.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
		
		ИмяФайлаСПутем = ПолучитьИмяВременногоФайла(ВерсияСсылка.Расширение);
		ДвоичныеДанныеФайла.Записать(ИмяФайлаСПутем);
		
	Иначе
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ИмяФайлаСПутем = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяФайлаСПутем;
	
КонецФункции

// Записывает извлеченный текст
// Параметры
//  ТекущаяВерсия  - СправочникОбъект.ВерсииФайлов - версия файла
Процедура ЗаписатьИзвлеченныйТекст(ТекущаяВерсия) Экспорт
	
	Файл = ТекущаяВерсия.Владелец;

	Если Файл.ТекущаяВерсия = ТекущаяВерсия.Ссылка Тогда
	
		// копируем текст от версий к файлу
		ТекстХранилище = Неопределено;
		ТекстХранилище = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(ТекущаяВерсия.Ссылка);
		
		РегистрыСведений.ТекстыФайлов.ДобавитьЗапись(Файл, ТекстХранилище);
	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество файлов в томах
// Возвращаемое значение:
//   Число - число файлов в томах
Функция ПодсчитатьКоличествоФайловВТомах() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
					|	ЕСТЬNULL(КОЛИЧЕСТВО(Версии.Ссылка), 0) КАК КоличествоФайлов
					|ИЗ
					|	Справочник.ВерсииФайлов КАК Версии
					|ГДЕ
					|	Версии.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Число(Выборка.КоличествоФайлов);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// При переименовании пользователя переносит его настройки - РабочийКаталог, ДействиеПоДвойномуЩелчкуМыши и пр
//
Процедура ПеренестиНастройкиПриСменеИмениПользователя(знач ИмяТекущее, знач ИмяУстанавливаемое) Экспорт
	
	ФайловыеФункции.ПеренестиНастройку("НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ИмяТекущее, ИмяУстанавливаемое);
	ФайловыеФункции.ПеренестиНастройку("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ИмяТекущее, ИмяУстанавливаемое);
	ФайловыеФункции.ПеренестиНастройку("НастройкиПрограммы", "ПапкаДляСохранитьКак", ИмяТекущее, ИмяУстанавливаемое);
	ФайловыеФункции.ПеренестиНастройку("НастройкиПрограммы", "ПапкаДляОбновитьИзФайла", ИмяТекущее, ИмяУстанавливаемое);
	
	ФайловыеФункции.ПеренестиНастройку("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов", ИмяТекущее, ИмяУстанавливаемое);
	ФайловыеФункции.ПеренестиНастройку("ИмяПапкиВыгрузки", "ИмяПапкиВыгрузки", ИмяТекущее, ИмяУстанавливаемое);
	
	ФайловыеФункции.ПеренестиНастройку("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", ИмяТекущее, ИмяУстанавливаемое);
	ФайловыеФункции.ПеренестиНастройку("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", ИмяТекущее, ИмяУстанавливаемое);
	
КонецПроцедуры

// Заносит номер в регистр сведений НомераОтсканированныхФайлов
Процедура ЗанестиМаксимальныйНомерДляСканирования(Владелец, НовыйНомер) Экспорт
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Владелец);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НомераОтсканированныхФайлов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Владелец", Владелец);
		Блокировка.Заблокировать();   		
		
		// Получить структуру с данными ресурсов записи
		СтруктураРесурсов = РегистрыСведений.НомераОтсканированныхФайлов.Получить(СтруктураОтбора);
		
		// Получить максимальный номер из регистра
		Номер = СтруктураРесурсов.Номер;
		Если НовыйНомер <= Номер Тогда // кто-то другой уже записал бОльший номер
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;    
		
		Номер = НовыйНомер;
		
		// Запишем новый номер в регистр
		НаборЗаписей = РегистрыСведений.НомераОтсканированныхФайлов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Владелец.Установить(Владелец);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Владелец = Владелец;
		НоваяЗапись.Номер = Номер;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает представление настроек сканирования - без распознавания
Функция ПолучитьПредставлениеНастроекСканирования(ИспользоватьImageMagickДляПреобразованияВPDF,
	ФорматКартинки,
	ФорматХраненияОдностраничный, ФорматХраненияМногостраничный, ФорматСканированногоИзображения,
	КачествоJPG, СжатиеTIFF, Разрешение, ЦветностьПеречисление,
	ПоворотПеречисление, РазмерБумагиПеречисление, ДвустороннееСканирование) Экспорт
	
	Представление = "";
	// Информационная надпись вида:
	// "Формат хранения: PDF. Формат сканирования: JPG. Качество: 75. Формат хранения многостраничный: PDF. Разрешение: 200. Цветное";
	
	Если ИспользоватьImageMagickДляПреобразованияВPDF Тогда
		Если ФорматХраненияОдностраничный = Перечисления.ФорматыХраненияОдностраничныхФайлов.PDF Тогда
			Представление = Представление + НСтр("ru = 'Формат хранения: '");
			Представление = Представление + "PDF";
			Представление = Представление + ". ";
			Представление = Представление + НСтр("ru = 'Формат сканирования: '");
			Представление = Представление + ФорматКартинки;
			Представление = Представление + ". ";
		Иначе
			Представление = Представление + НСтр("ru = 'Формат хранения: '");
			Представление = Представление + ФорматКартинки;
			Представление = Представление + ". ";
		КонецЕсли;
	Иначе
		Представление = Представление + НСтр("ru = 'Формат хранения: '");
		Представление = Представление + ФорматКартинки;
		Представление = Представление + ". ";
	КонецЕсли;
	
	Если ВРег(ФорматКартинки) = "JPG" Тогда
		Представление = Представление +  НСтр("ru = 'Качество: '") + Строка(КачествоJPG) + ". ";
	КонецЕсли;
	
	Если ВРег(ФорматКартинки) = "TIF" Тогда
		Представление = Представление +  НСтр("ru = 'Сжатие: '") + Строка(СжатиеTIFF) + ". ";
	КонецЕсли;
	
	Представление = Представление + НСтр("ru = 'Формат хранения многостраничный: '");
	Представление = Представление + Строка(ФорматХраненияМногостраничный);
	Представление = Представление + ". ";
	
	Если Разрешение <> -1 Тогда
		Представление = Представление + НСтр("ru = 'Разрешение: '") + Строка(Разрешение) + НСтр("ru = ' dpi.'") + " " + Строка(ЦветностьПеречисление) + ". ";
	КонецЕсли;
	
	Если НЕ ПоворотПеречисление.Пустая() Тогда
		Представление = Представление +  НСтр("ru = 'Поворот: '") + Строка(ПоворотПеречисление) + ". ";
	КонецЕсли;
	
	Если НЕ РазмерБумагиПеречисление.Пустая() Тогда
		Представление = Представление +  НСтр("ru = 'Размер бумаги: '") + Строка(РазмерБумагиПеречисление) + ". ";
	КонецЕсли;
	
	Если ДвустороннееСканирование = Истина Тогда
		Представление = Представление +  НСтр("ru = 'Двустороннее сканирование'") + ". ";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает представление настроек сканирования - без распознавания
Функция ПолучитьПредставлениеНастроекСканированияКраткое(
	ИспользоватьImageMagickДляПреобразованияВPDF,
	ФорматКартинки,
	ФорматХраненияОдностраничный, 
	ФорматХраненияМногостраничный) Экспорт
	
	Представление = "";
	// Информационная надпись вида:
	// "Формат хранения: PDF. Формат хранения многостраничный: PDF.";
	
	Если ИспользоватьImageMagickДляПреобразованияВPDF Тогда
		Если ФорматХраненияОдностраничный = Перечисления.ФорматыХраненияОдностраничныхФайлов.PDF Тогда
			Представление = Представление + НСтр("ru = 'Формат хранения: '");
			Представление = Представление + "PDF";
			Представление = Представление + ". ";
		Иначе
			Представление = Представление + НСтр("ru = 'Формат хранения: '");
			Представление = Представление + ФорматКартинки;
			Представление = Представление + ". ";
		КонецЕсли;
	Иначе
		Представление = Представление + НСтр("ru = 'Формат хранения: '");
		Представление = Представление + ФорматКартинки;
		Представление = Представление + ". ";
	КонецЕсли;
	
	Представление = Представление + НСтр("ru = 'Формат хранения многостраничный: '");
	Представление = Представление + Строка(ФорматХраненияМногостраничный);
	Представление = Представление + ". ";
	
	Возврат Представление;
	
КонецФункции

// Преобразует параметры сканера в виде перечислений  - в числа
Процедура ПреобразоватьПеречисленияВПараметрыСканера(
	Разрешение, Цветность, Поворот, РазмерБумаги, СжатиеTIFFЧисло,
	РазрешениеПеречисление, ЦветностьПеречисление, ПоворотПеречисление, РазмерБумагиПеречисление, СжатиеTIFF) Экспорт
	
	
	Разрешение = -1;
	Если РазрешениеПеречисление = Перечисления.РазрешенияСканированногоИзображения.dpi200 Тогда
		Разрешение = 200; 
	ИначеЕсли РазрешениеПеречисление = Перечисления.РазрешенияСканированногоИзображения.dpi300 Тогда
		Разрешение = 300;
	ИначеЕсли РазрешениеПеречисление = Перечисления.РазрешенияСканированногоИзображения.dpi600 Тогда
		Разрешение = 600;
	ИначеЕсли РазрешениеПеречисление = Перечисления.РазрешенияСканированногоИзображения.dpi1200 Тогда
		Разрешение = 1200;
	КонецЕсли;
	
	Цветность = -1;
	Если ЦветностьПеречисление = Перечисления.ЦветностиИзображения.Монохромное Тогда
		Цветность = 0;
	ИначеЕсли ЦветностьПеречисление = Перечисления.ЦветностиИзображения.ГрадацииСерого Тогда
		Цветность = 1;
	ИначеЕсли ЦветностьПеречисление = Перечисления.ЦветностиИзображения.Цветное Тогда
		Цветность = 2;
	КонецЕсли;
	
	Поворот = 0;
	Если ПоворотПеречисление = Перечисления.СпособыПоворотаИзображения.НетПоворота Тогда
		Поворот = 0;
	ИначеЕсли ПоворотПеречисление = Перечисления.СпособыПоворотаИзображения.ВправоНа90 Тогда
		Поворот = 90;
	ИначеЕсли ПоворотПеречисление = Перечисления.СпособыПоворотаИзображения.ВправоНа180 Тогда
		Поворот = 180;
	ИначеЕсли ПоворотПеречисление = Перечисления.СпособыПоворотаИзображения.ВлевоНа90 Тогда
		Поворот = 270;
	КонецЕсли;
	
	РазмерБумаги = 0;
	Если РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.НеЗадано Тогда
		РазмерБумаги = 0;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.A3 Тогда
		РазмерБумаги = 11;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.A4 Тогда
		РазмерБумаги = 1;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.A5 Тогда
		РазмерБумаги = 5;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.B4 Тогда
		РазмерБумаги = 6;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.B5 Тогда
		РазмерБумаги = 2;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.B6 Тогда
		РазмерБумаги = 7;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.C4 Тогда
		РазмерБумаги = 14;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.C5 Тогда
		РазмерБумаги = 15;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.C6 Тогда
		РазмерБумаги = 16;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.USLetter Тогда
		РазмерБумаги = 3;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.USLegal Тогда
		РазмерБумаги = 4;
	ИначеЕсли РазмерБумагиПеречисление = Перечисления.РазмерыБумаги.USExecutive Тогда
		РазмерБумаги = 10;
	КонецЕсли;
	
	СжатиеTIFFЧисло = 6; // БезСжатия
	Если СжатиеTIFF = Перечисления.ВариантыСжатияTIFF.LZW Тогда
		СжатиеTIFFЧисло = 2;
	ИначеЕсли СжатиеTIFF = Перечисления.ВариантыСжатияTIFF.RLE Тогда
		СжатиеTIFFЧисло = 5;
	ИначеЕсли СжатиеTIFF = Перечисления.ВариантыСжатияTIFF.БезСжатия Тогда
		СжатиеTIFFЧисло = 6;
	ИначеЕсли СжатиеTIFF = Перечисления.ВариантыСжатияTIFF.CCITT3 Тогда
		СжатиеTIFFЧисло = 3;
	ИначеЕсли СжатиеTIFF = Перечисления.ВариантыСжатияTIFF.CCITT4 Тогда
		СжатиеTIFFЧисло = 4;
	КонецЕсли;    
	
КонецПроцедуры

// Обновляет размер файла и текущей версии. Нужно при загрузке шифрованного файла в почте
Процедура ОбновитьРазмерФайлаИВерсии(ДанныеФайла, РазмерФайла, УникальныйИдентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		ВерсияОбъект = ДанныеФайла.Версия.ПолучитьОбъект();
		ВерсияОбъект.Заблокировать();
		ВерсияОбъект.Размер = РазмерФайла;
		// Чтобы прошла запись ранее подписанного объекта
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ВерсияОбъект.Записать();
		ВерсияОбъект.Разблокировать();
		
		ЗаблокироватьДанныеДляРедактирования(ДанныеФайла.Ссылка, , УникальныйИдентификатор);
		
		ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
		
		// Чтобы прошла запись ранее подписанного объекта
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Ставит файлу признак Зашифрован
Процедура УстановитьПризнакЗашифрован(ФайлСсылка, Зашифрован, УникальныйИдентификатор = Неопределено) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	
	ФайлОбъект.Зашифрован = Зашифрован;
	// Чтобы прошла запись ранее подписанного объекта
	ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	ФайлОбъект.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ФайлСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка, , УникальныйИдентификатор);
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Объект.Зашифрован = Зашифрован;
		// Чтобы прошла запись ранее подписанного объекта
		Объект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); 
		Объект.Записать();
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка, УникальныйИдентификатор);
		
	КонецЦикла;
	
	РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
	
КонецПроцедуры    

// В справочнике ВерсииФайлов заполняет ДатаМодификацииФайла - из даты создания
Процедура ЗаполнитьДатуМодификацииФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Объект.ДатаМодификацииФайла = Дата("00010101000000") Тогда
			Объект.ДатаМодификацииФайла = Объект.ДатаСоздания;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	ПерезаписатьВсеФайлы(); // чтобы перенеслись значения реквизита ДатаМодификацииФайла из версии в файл
	
КонецПроцедуры

// Возвращает массив ссылок на файлы
// Параметры
//  Объект - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   Массив - массив файлов
Процедура ПолучитьПрикрепленныеФайлыКОбъекту(Объект, МассивФайлов) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
		МассивФайлов.Добавить(Объект);
		Возврат;
	КонецЕсли;	
	
	ТипыПараметраКоманды = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлы.ТипПараметраКоманды.Типы();
	ТипыВладельцев = Метаданные.Справочники.Файлы.Реквизиты.ВладелецФайла.Тип.Типы();
	
	Если ТипыВладельцев.Найти(ТипЗнч(Объект)) <> Неопределено
		И ТипыПараметраКоманды.Найти(ТипЗнч(Объект)) <> Неопределено Тогда
		
		МассивФайловЛокальный = ПолучитьВсеПодчиненныеФайлы(Объект);
		Для Каждого Строка Из МассивФайловЛокальный Цикл
			МассивФайлов.Добавить(Строка);
		КонецЦикла;	
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает количество версий с неизвлеченным текстом
Функция ПолучитьКоличествоВерсийСНеизвлеченнымТекстом() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК ЧислоВерсий
			|ИЗ
			|	РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
			|ГДЕ
			|	(ТекстыВерсийФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
			|			ИЛИ ТекстыВерсийФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))";
			
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.ЧислоВерсий;
	
	Возврат Результат;
			
КонецФункции

// Получает текст запроса для извлечения текста
Процедура ПолучитьТекстЗапросаИзвлеченияТекста(ТекстЗапроса, КоличествоФайловВПорции) Экспорт
	
	ТекстЗапроса = 
			 "ВЫБРАТЬ {КоличествоФайловВПорции}
			 |	ТекстыВерсийФайлов.Версия КАК Версия
			 |ИЗ
			 |	РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
			 |ГДЕ
			 |	(ТекстыВерсийФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
			 |			ИЛИ ТекстыВерсийФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))";
			
	Если КоличествоФайловВПорции <> 0 Тогда			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{КоличествоФайловВПорции}", "ПЕРВЫЕ " + Формат(КоличествоФайловВПорции, "ЧГ=; ЧН="));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{КоличествоФайловВПорции}", "");
	КонецЕсли;	
	
КонецПроцедуры

// проверяет редактирование файла текущим пользователем с учетом прав доступа
Функция РедактируетТекущийПользователь(ФайлСсылка) Экспорт 
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Файлы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА 
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Ссылка = &ФайлСсылка
	|	И Файлы.Редактирует = &Редактирует";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Запрос.УстановитьПараметр("Редактирует", Пользователи.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

// Обработчик регламентного задания ОбработкаПравилРазмещенияФайловВТомах
Процедура ОбработкаПравилРазмещенияФайловВТомах() Экспорт
	
	Перем СсылкаНаТом;
	
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработкаОчередиРазмещенияФайловВТомах;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКОД")
		И НЕ КОДСервер.ЭтоЦентральныйУзел() Тогда
			
		Текст = НСтр("ru = 'Это регламентное задание может выполняться только в центральном узле.'");
		РегламентныеЗаданияСервер.ОтменитьВыполнениеЗадания(РегламентноеЗадание, Текст);
		ВызватьИсключение Текст;
		
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ИдетЗагрузкаИзДО21() Тогда
		Возврат;
	КонецЕсли;	
	
	Пока Истина Цикл
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 100
			|	ОчередьВерсийФайловДляРазмещенийВТомах.Версия.Ссылка КАК Ссылка
			|ИЗ
			|	РегистрСведений.ОчередьВерсийФайловДляРазмещенийВТомах КАК ОчередьВерсийФайловДляРазмещенийВТомах";
					   
		ТаблицаВерсий = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаВерсий.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		Для Каждого Строка Из ТаблицаВерсий Цикл
			
			ВерсияСсылка = Строка.Ссылка;
			
			ГруппаТомов = ФайловыеФункции.ВыбратьГруппуТомовДляРазмещенияВерсии(ВерсияСсылка);
			ТаблицаТомов = ФайловыеФункции.ПолучитьСписокТомовВГруппе(ГруппаТомов);
			
			// Если версия уже в нужной группе томов - перенос не нужно делать. Если версии в группе томов нет - делаем перенос.
			Если ТаблицаТомов.Найти(ВерсияСсылка.Том, "Ссылка") = Неопределено Тогда 
				
				Версия = ВерсияСсылка.ПолучитьОбъект();
				ПутьКФайлу = "";
				
				Если НЕ Версия.Том.Пустая() Тогда

					ПрежнийТом = Версия.Том;
					ПрежнийПолныйПутьФайла = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 

					ФайлПроверка = Новый Файл(ПрежнийПолныйПутьФайла);
					Если Не ФайлПроверка.Существует() Тогда
						// Файл в томе отсутствует. Удалим из очереди и перейдем к следующему
						УдалитьИзРегистраОчередьВерсийФайловДляРазмещенийВТомах(ВерсияСсылка);  
						
						СообщениеОбУспехе = СтрШаблон(
							НСтр("ru = 'Версия файла ""%1.%2"" (%3) отсутствует в томе хранения файлов ""%4"".'"),
							Строка(ВерсияСсылка.Владелец), Версия.Расширение, 
							ПолучитьНавигационнуюСсылку(ВерсияСсылка),
							Строка(ПрежнийТом));
						ЗаписьЖурналаРегистрации(НСтр("ru='Перенос версии файла в том'"), УровеньЖурналаРегистрации.Ошибка, 
							Метаданные.Справочники.Файлы, ВерсияСсылка.Владелец, СообщениеОбУспехе);
						
						Продолжить;
					КонецЕсли;
					
					НачатьТранзакцию();
					Попытка
						
						ПутьКФайлу = "";

						// Выполняем перенос
						
						// Добавить в один из томов (где есть свободное место)
						ФайловыеФункции.ДобавитьНаДиск(ПрежнийПолныйПутьФайла, ПутьКФайлу, СсылкаНаТом, Версия.ДатаМодификацииУниверсальная, 
							Версия.НомерВерсии, Версия.Наименование, Версия.Расширение, Версия.Размер, Версия.Зашифрован, 
							Неопределено, Версия.Ссылка);
						
						Версия.ПутьКФайлу = ПутьКФайлу;
						Версия.Том = СсылкаНаТом.Ссылка;
						Версия.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
						Версия.Записать();
						
						УдалитьИзРегистраОчередьВерсийФайловДляРазмещенийВТомах(ВерсияСсылка);
						
						// Удаляем файл в прежнем месте (томе)
						ФайлНаДиске = Новый Файл(ПрежнийПолныйПутьФайла);
						ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
						ФайловыеФункции.УдалитьФайлСЛогированием(ПрежнийПолныйПутьФайла, "ОбработкаПравилРазмещенияФайловВТомах");
						
						ЗафиксироватьТранзакцию();
						
						// Записать в журнал регистрации про перенос
						СообщениеОбУспехе = СтрШаблон(
							НСтр("ru = 'Версия файла ""%1.%2"" (%3) перенесена из тома хранения файлов ""%4"" в том ""%5"".'"),
							Строка(ВерсияСсылка.Владелец), Версия.Расширение, 
							ПолучитьНавигационнуюСсылку(ВерсияСсылка),
							Строка(ПрежнийТом), Строка(СсылкаНаТом));
						ЗаписьЖурналаРегистрации(НСтр("ru='Перенос версии файла в том'"), УровеньЖурналаРегистрации.Информация, 
							Метаданные.Справочники.Файлы, ВерсияСсылка.Владелец, СообщениеОбУспехе);
						
					Исключение
							
						ОтменитьТранзакцию();
						
						ФайлНаДиске = Новый Файл(ПутьКФайлу);
						ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
						ФайловыеФункции.УдалитьФайлСЛогированием(ПутьКФайлу, "ОбработкаПравилРазмещенияФайловВТомах исключение");
						
						// Записать ошибку в журнал регистрации и продолжить работу
						СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
						ЗаписьЖурналаРегистрации(НСтр("ru='Ошибка переноса версии файла в том'"), УровеньЖурналаРегистрации.Ошибка, 
							Метаданные.Справочники.Файлы, ВерсияСсылка.Владелец, СообщениеОбОшибке);
						
					КонецПопытки;
					
				Иначе
					// Версия без тома - возможно обработкой перенесли в базу
					УдалитьИзРегистраОчередьВерсийФайловДляРазмещенийВТомах(ВерсияСсылка);
				КонецЕсли;	
				
			Иначе
				// Версия уже в нужном томе - удалим ее из очереди
				УдалитьИзРегистраОчередьВерсийФайловДляРазмещенийВТомах(ВерсияСсылка);
			КонецЕсли;	
		
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура УдалитьИзРегистраОчередьВерсийФайловДляРазмещенийВТомах(Версия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьВерсийФайловДляРазмещенийВТомах.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	
	// не добавляем записи в набор - чтобы все стереть
	НаборЗаписей.Записать();
	
КонецПроцедуры	

// Формирует очередь при изменении правил размещения файлов в томах. Возвращает число файлов, добавленных в очередь
Функция ПрименитьПравилаДляФормированияОчереди() Экспорт
	
	Если Не ИспользоватьРазмещениеВТомахПоУсловиям() Тогда
		Возврат 0;
	КонецЕсли;	
	
	ЧислоВерсийПоставленныхВОчередь = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаРазмещенияФайловВТомах.Ссылка,
		|	ПравилаРазмещенияФайловВТомах.ГруппаТомов,
		|	ПравилаРазмещенияФайловВТомах.ПометкаУдаления,
		|	ПравилаРазмещенияФайловВТомах.Порядок КАК Порядок,
		|	ПравилаРазмещенияФайловВТомах.Условие
		|ИЗ
		|	Справочник.ПравилаРазмещенияФайловВТомах КАК ПравилаРазмещенияФайловВТомах
		|ГДЕ
		|	ПравилаРазмещенияФайловВТомах.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";

	ТаблицаПравил = Запрос.Выполнить().Выгрузить();
	
	СхемаКомпоновкиДанных = Справочники.ПравилаРазмещенияФайловВТомах.ПолучитьМакет("Версии");
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	Для НомерПравила = 0 По ТаблицаПравил.Количество() - 1 Цикл 
		
		КомпоновщикДляОчереди = Новый КомпоновщикНастроекКомпоновкиДанных;
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
		КомпоновщикДляОчереди.Инициализировать(ИсточникНастроек);
		КомпоновщикДляОчереди.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		КомпоновщикТекущегоПравила = Новый КомпоновщикНастроекКомпоновкиДанных;
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
		КомпоновщикТекущегоПравила.Инициализировать(ИсточникНастроек);
		КомпоновщикТекущегоПравила.ЗагрузитьНастройки(ТаблицаПравил[НомерПравила].Условие.Получить());
		
		ЭлементыОтбора = КомпоновщикДляОчереди.Настройки.Отбор.Элементы;
		
		// Текущее правило размещаем в группе И - создаем группу И
		НоваяГруппаЭлементовОтбора = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		// Последнее правило не используем - там нет условия
		Если НомерПравила <> ТаблицаПравил.Количество() - 1 Тогда
			СкопироватьОтбор(НоваяГруппаЭлементовОтбора, КомпоновщикТекущегоПравила.Настройки.Отбор);
		КонецЕсли;
		
		Если НомерПравила > 0 Тогда // Если есть предыдущие правила
			
			// Все предыдущие правила - в группе НЕ, а внутри еще группа ИЛИ
			НоваяГруппаЭлементовОтбораНе = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НоваяГруппаЭлементовОтбораНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
			
			НоваяГруппаЭлементовОтбораИли = НоваяГруппаЭлементовОтбораНе.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НоваяГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			Для НомерПредыдущегоПравила = 0 По НомерПравила-1 Цикл
				
				КомпоновщикПредыдущегоПравила = Новый КомпоновщикНастроекКомпоновкиДанных;
				ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
				КомпоновщикПредыдущегоПравила.Инициализировать(ИсточникНастроек);
				КомпоновщикПредыдущегоПравила.ЗагрузитьНастройки(ТаблицаПравил[НомерПредыдущегоПравила].Условие.Получить());
				
				СкопироватьОтбор(НоваяГруппаЭлементовОтбораИли, КомпоновщикПредыдущегоПравила.Настройки.Отбор);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Все тома из группы текущего условия - в группе НЕ, а внутри еще группа ИЛИ
		ТаблицаТомов = ПолучитьТаблицуТомов(ТаблицаПравил[НомерПравила].ГруппаТомов);
		
		НоваяГруппаЭлементовОтбораНе = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаЭлементовОтбораНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
		
		НоваяГруппаЭлементовОтбораИли = НоваяГруппаЭлементовОтбораНе.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		Для Каждого СтрокаТома Из ТаблицаТомов Цикл
			
			СсылкаНаТом = СтрокаТома.Ссылка;
			
			НовыйЭлементОтбора = НоваяГруппаЭлементовОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Том");
			НовыйЭлементОтбора.Использование = Истина;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.ПравоеЗначение = СсылкаНаТом;
			
		КонецЦикла;	
		
		// Версия должна быть не в информационной базе, а в томах на диске
		НовыйЭлементОтбора = НоваяГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипХраненияФайла");
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
			КомпоновщикДляОчереди.ПолучитьНастройки()
			,
			,
			, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ТаблицаРезультата = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		// Запишем в очередь
		Для Каждого Результат Из ТаблицаРезультата Цикл
			
			МенеджерЗаписи = РегистрыСведений.ОчередьВерсийФайловДляРазмещенийВТомах.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Версия = Результат.Ссылка;
			МенеджерЗаписи.Записать(Истина);
			ЧислоВерсийПоставленныхВОчередь = ЧислоВерсийПоставленныхВОчередь + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЧислоВерсийПоставленныхВОчередь;
	
КонецФункции

// Получает все тома из группы
Функция ПолучитьТаблицуТомов(ГруппаТомов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТомаХраненияФайлов.Ссылка
		|ИЗ
		|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
		|ГДЕ
		|	ТомаХраненияФайлов.ПометкаУдаления = ЛОЖЬ
		|	И ТомаХраненияФайлов.Родитель = &Родитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТомаХраненияФайлов.ПорядокЗаполнения";

	Запрос.УстановитьПараметр("Родитель", ГруппаТомов);
	ТаблицаТомов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТомов;
	
КонецФункции

// Копирует отбор СКД
Процедура СкопироватьОтбор(Приемник, Источник, УдалятьПредставлениеГруппы = Ложь, УдалятьНеиспользуемые = Истина) Экспорт
	
	Для каждого ЭлементОтбораИсточник Из Источник.Элементы Цикл
		
		Если УдалятьНеиспользуемые И (Не ЭлементОтбораИсточник.Использование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбораИсточник) = Тип("ЭлементОтбораКомпоновкиДанных") И 
			ЭлементОтбораИсточник.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Поиск") Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОтбора = Приемник.Элементы.Добавить(ТипЗнч(ЭлементОтбораИсточник));
		ЗаполнитьЗначенияСвойств(ЭлементОтбора,ЭлементОтбораИсточник);
		Если ТипЗнч(ЭлементОтбораИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если УдалятьПредставлениеГруппы Тогда
				ЭлементОтбора.Представление = "";
			КонецЕсли;
			СкопироватьОтбор(ЭлементОтбора, ЭлементОтбораИсточник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Найти все правила размещения для тома
Функция НайтиПравилаРазмещенияДляТома(ГруппаТомов) Экспорт
	
	ПравилаОтобранные = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаРазмещенияФайловВТомах.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаРазмещенияФайловВТомах КАК ПравилаРазмещенияФайловВТомах
		|ГДЕ
		|	ПравилаРазмещенияФайловВТомах.ПометкаУдаления = ЛОЖЬ
		|	И ПравилаРазмещенияФайловВТомах.ГруппаТомов = &ГруппаТомов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПравилаРазмещенияФайловВТомах.Порядок";
		
	Запрос.УстановитьПараметр("ГруппаТомов", ГруппаТомов);

	ТаблицаПравилВыгруженная = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаПравилВыгруженная;
	
КонецФункции

// Непосредственно удаление версии
Процедура ВыполнитьУдалениеНеактивнойВерсииФайла(ВерсияСсылка, Параметры, ИмяКаталогаСохранения,
	МассивРезультатов, ВладелецВерсии, ЧислоФайлов, ЧислоВерсий, РазмерВерсий) Экспорт
	
	ПрежнееИмяФайлаСПутем = "";
	ПолноеИмяФайла = "";
	ФайлПеремещен = Ложь;	
	
	ОчищатьДанныеДляПолнотекстовогоПоиска = ПолучитьОчищатьДанныеДляПолнотекстовогоПоиска();
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ВерсияСсылка);
		ВерсияОбъект = ВерсияСсылка.ПолучитьОбъект();
		
		ПолноеИмяФайла = ИмяКаталогаСохранения + Лев(ВерсияОбъект.ПолноеНаименование, 50) + "_" +
			Строка(ВерсияСсылка.УникальныйИдентификатор()) + "." + ВерсияОбъект.Расширение;
			
		Если ВерсияОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			ПрежнееИмяФайлаСПутем = ФайловыеФункции.ПолныйПутьТома(ВерсияОбъект.Том) + ВерсияОбъект.ПутьКФайлу;
			
			Если Не ЗначениеЗаполнено(ПрежнееИмяФайлаСПутем) Тогда
				РазблокироватьДанныеДляРедактирования(ВерсияСсылка);
				Возврат; // Файл в томе отсутствует.
			КонецЕсли;
			
			ФайлПроверка = Новый Файл(ПрежнееИмяФайлаСПутем);
			Если Не ФайлПроверка.Существует() Тогда
				РазблокироватьДанныеДляРедактирования(ВерсияСсылка);
				Возврат; // Файл в томе отсутствует.
			КонецЕсли;
			
		КонецЕсли;	

		НачатьТранзакцию();
		
		Если ВерсияОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			ПрежнееИмяФайлаСПутем = ФайловыеФункции.ПолныйПутьТома(ВерсияОбъект.Том) + ВерсияОбъект.ПутьКФайлу;
			
			Если Не ЗначениеЗаполнено(ПрежнееИмяФайлаСПутем) Тогда
				ВызватьИсключение НСтр("ru = 'Файл в томе отсутствует.'");
			КонецЕсли;
			
			Файл = Новый Файл(ПрежнееИмяФайлаСПутем);
			Файл.УстановитьТолькоЧтение(Ложь);
			ПереместитьФайл(ПрежнееИмяФайлаСПутем, ПолноеИмяФайла);
			ФайлПеремещен = Истина;	
			ВерсияОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ВерсияОбъект.ПутьКФайлу = "";
		Иначе
			ХранимыйФайл = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
			ДвоичныеДанныеФайла = ХранимыйФайл.Получить();
			ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
			УдалитьЗаписьИзРегистраХранимыеФайлыВерсий(ВерсияСсылка);
		КонецЕсли;	
		
		Если ВладелецВерсии <> Параметры.ВладелецВерсии Тогда
			
			ВладелецВерсии = Параметры.ВладелецВерсии;
			ЧислоФайлов = ЧислоФайлов + 1;
			
		КонецЕсли;	
		
		ЧислоВерсий = ЧислоВерсий + 1;
		РазмерВерсий = РазмерВерсий + ВерсияОбъект.Размер;
		
		ПредставлениеВладельца = НСтр("ru='Файл: '") + Строка(ВладелецВерсии) + "." + ВерсияОбъект.Расширение;
		
		ОписаниеВерсии = Новый Структура("ВладелецВерсии, ПредставлениеВладельца, Автор, НомерВерсии, Комментарий, 
		|ДатаСоздания, Размер", 
			ВладелецВерсии, ПредставлениеВладельца, ВерсияОбъект.Автор, ВерсияОбъект.НомерВерсии, 
			ВерсияОбъект.Комментарий, 
			ВерсияОбъект.ДатаСоздания, ВерсияОбъект.Размер);
		МассивРезультатов.Добавить(ОписаниеВерсии);
		
		Если ОчищатьДанныеДляПолнотекстовогоПоиска Тогда
			РегистрыСведений.ТекстыВерсийФайлов.УдалитьЗапись(ВерсияСсылка);
		КонецЕсли;	
		
		ВерсияОбъект.ФайлУдален = Истина;
		// чтобы прошла запись ранее подписанного объекта
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); 
		ВерсияОбъект.Записать();
		
		УдалитьИзРегистраОбращенияКВерсиямФайлов(ВерсияСсылка);
		ЗаписатьВРегистрСведенияОСохраненииКопийУстаревшихВерсий(ВерсияСсылка, ПолноеИмяФайла);
		
		ЗафиксироватьТранзакцию();
		
		РазблокироватьДанныеДляРедактирования(ВерсияСсылка);
		
		// Записать текст в журнал регистрации и продолжить работу
		СообщениеОбУспехе = СформироватьТекстОшибкиУдаленияВерсии(ИнформацияОбОшибке(), ВерсияСсылка);
		ЗаписьЖурналаРегистрации(НСтр("ru='Выполнена очистка неактивной версии файла'"), 
			УровеньЖурналаРегистрации.Информация, 
			Метаданные.Справочники.ВерсииФайлов, ВерсияСсылка, СообщениеОбУспехе);
		
	Исключение
		
		ОтменитьТранзакцию();
		
		// Записать ошибку в журнал регистрации и продолжить работу
		СообщениеОбОшибке = СформироватьТекстОшибкиУдаленияВерсии(ИнформацияОбОшибке(), ВерсияСсылка);
		ЗаписьЖурналаРегистрации(НСтр("ru='Ошибка очистки неактивной версии файла'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Справочники.ВерсииФайлов, ВерсияСсылка, СообщениеОбОшибке);
			
		// Если было хранение в томах - вернем файл на прежнее место
		Если ЗначениеЗаполнено(ПрежнееИмяФайлаСПутем) И ФайлПеремещен Тогда
			ПереместитьФайл(ПолноеИмяФайла, ПрежнееИмяФайлаСПутем);
		КонецЕсли;
			
	КонецПопытки;
	
КонецПроцедуры

// Получить имя каталога для сохранения очищаемых версий
Функция ПолучитьИмяКаталогаСохранения() Экспорт
	
	ПутьСохраненияУдаляемыхВерсий = ПолучитьПутьСохраненияУдаляемыхВерсий();
	ИмяКаталогаСохранения = ПутьСохраненияУдаляемыхВерсий;
	ИмяКаталогаСохранения = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталогаСохранения, ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
	Дата = ТекущаяДатаСеанса();
	ИмяКаталогаСохранения = ИмяКаталогаСохранения + Формат(Дата, "ДФ=ггггММдд")
		+ ПолучитьРазделительПути();
	
	Возврат ИмяКаталогаСохранения;
	
КонецФункции	

Функция ПолучитьАдресДляОтправкиУведомленияСотруднику(Получатель) Экспорт
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Сотрудники") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.АдресЭП КАК ПочтовыйАдрес,
			|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформация.Ссылка) КАК Представление
			|ИЗ
			|	Справочник.Сотрудники.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailСотрудника)";
		
	Иначе
		ВызватьИсключение НСтр("ru = 'В функцию ПолучитьАдресДляОтправкиУведомленияСотруднику передан некорректный параметр'");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Получатель);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаРезультата = РезультатЗапроса.Выгрузить()[0];
	Результат = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
		Строка(СтрокаРезультата.Представление),
		СокрЛП(СтрокаРезультата.ПочтовыйАдрес));
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьИзРегистраОбращенияКВерсиямФайлов(ВерсияСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОбращенияКВерсиямФайлов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(ВерсияСсылка);
	
	// не добавляем записи в набор - чтобы все стереть
	НаборЗаписей.Записать();
	
КонецПроцедуры	

// Формирует текст ошибки для помещения в журнал регистрации
// Параметры
//  ИнформацияОбОшибкеФункции  - ИнформацияОбОшибке
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия
//
// Возвращаемое значение:
//   Строка - описание ошибки
Функция СформироватьТекстОшибкиУдаленияВерсии(ИнформацияОбОшибкеФункции, ВерсияСсылка) Экспорт
	
	СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибкеФункции);
	СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + Нстр("ru = 'Ссылка на версию: ""'");
	Если ВерсияСсылка <> Неопределено Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + ПолучитьНавигационнуюСсылку(ВерсияСсылка) + """ ";
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС;
		СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Файл: '") + Строка(ВерсияСсылка.Владелец);
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции // СформироватьТекстОшибкиУдаленияВерсии

// Возвращает значение по умолчанию срока хранения неактивных версий.
Функция ПолучитьСрокХраненияНеактивныхВерсий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СрокХраненияНеактивныхВерсий = Константы.СрокХраненияНеактивныхВерсий.Получить();
	
	Если СрокХраненияНеактивныхВерсий = 0 Тогда
		СрокХраненияНеактивныхВерсий = 180;
	КонецЕсли;
	
	Возврат СрокХраненияНеактивныхВерсий;
	
КонецФункции

// Возвращает константу ОчищатьДанныеДляПолнотекстовогоПоиска
Функция ПолучитьОчищатьДанныеДляПолнотекстовогоПоиска() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОчищатьДанныеДляПолнотекстовогоПоиска = Константы.ОчищатьДанныеДляПолнотекстовогоПоиска.Получить();
	Возврат ОчищатьДанныеДляПолнотекстовогоПоиска;
	
КонецФункции

// Возвращает константу ПутьСохраненияУдаляемыхВерсий
Функция ПолучитьПутьСохраненияУдаляемыхВерсий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипПлатформыСервера = ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера();
	
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		Возврат Константы.ПутьСохраненияУдаляемыхВерсийWindows.Получить();
	Иначе	
		Возврат Константы.ПутьСохраненияУдаляемыхВерсийLinux.Получить();
	КонецЕсли;	
	
КонецФункции

// Возвращает константу ОтветственныйЗаУдалениеНеактивныхВерсий
Функция ПолучитьОтветственногоЗаУдалениеНеактивныхВерсий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОтветственныйЗаУдалениеНеактивныхВерсий = Константы.ОтветственныйЗаУдалениеНеактивныхВерсий.Получить();
	Возврат ОтветственныйЗаУдалениеНеактивныхВерсий;
	
КонецФункции

// Возвращает константу ПапкаДляХраненияОтчетовОбУдалении
Функция ПолучитьПапкуДляХраненияОтчетовОбУдалении() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПапкаДляХраненияОтчетовОбУдалении = Константы.ПапкаДляХраненияОтчетовОбУдалении.Получить();
	Возврат ПапкаДляХраненияОтчетовОбУдалении;
	
КонецФункции

// Возвращает константу ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий
Функция ПолучитьТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТипОповещения = Константы.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий.Получить();
	
	Если ТипОповещения.Пустая() Тогда
		ТипОповещения = Перечисления.ТипыОповещения.ЭлектроннаяПочта;
	КонецЕсли;
	
	Возврат ТипОповещения;
	
КонецФункции

// Записывает в регистр ОбращенияКВерсиямФайлов - при изменении или получении версии
Процедура ЗаписатьОбращениеКВерсииФайла(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("УдалятьНеактивныеВерсии") Тогда
		Возврат;
	КонецЕсли;
	
	// запишем в регистр
	МенеджерЗаписи = РегистрыСведений.ОбращенияКВерсиямФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Версия = ВерсияСсылка;
	МенеджерЗаписи.ДатаПоследнегоОбращения = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры

// Записывает в регистр СведенияОСохраненииКопийУстаревшихВерсий
Процедура ЗаписатьВРегистрСведенияОСохраненииКопийУстаревшихВерсий(ВерсияСсылка, Имя)
	
	// запишем в регистр
	МенеджерЗаписи = РегистрыСведений.СведенияОСохраненииКопийУстаревшихВерсий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Версия = ВерсияСсылка;
	МенеджерЗаписи.ПолноеИмя = Имя;
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры

// Читает полное имя (с путем) из регистра СведенияОСохраненииКопийУстаревшихВерсий
Функция ПолучитьИмяСохраненияВерсии(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовить структуру отбора по измерениям 
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Версия", ВерсияСсылка);
	
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.СведенияОСохраненииКопийУстаревшихВерсий.Получить(СтруктураОтбора);
	
	// Получить путь из регистра
	Возврат СтруктураРесурсов.ПолноеИмя;

КонецФункции

// Записывает ХранилищеФайла в информационную базу
//
// Параметры:
//  ВерсияСсылка - СправочникСсылка.ВерсииФайлов - ссылка на версию файла.
//  ХранилищеФайла - ХранилищеЗначения - Хранилище с двоичными данными файла, которые требуется записать
//
Процедура ЗаписатьФайлВИнформационнуюБазу(ВерсияСсылка, ХранилищеФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл = ВерсияСсылка;
	МенеджерЗаписи.ДвоичныеДанныеФайла = ХранилищеФайла;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Удаляет запись в регистре ХранимыеФайлыВерсий
//
// Параметры:
//  ВерсияСсылка - СправочникСсылка.ВерсииФайлов - ссылка на версию файла.
//
Процедура УдалитьЗаписьИзРегистраХранимыеФайлыВерсий(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Файл.Установить(ВерсияСсылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Инициализирует константу ХранитьФайлыВТомахНаДиске из УдалитьТипХраненияФайлов 
Процедура ИнициализироватьКонстантуХранитьФайлыВТомахНаДиске() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипХраненияФайлов = Константы.УдалитьТипХраненияФайлов.Получить();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Константы.ХранитьФайлыВТомахНаДиске.Установить(Истина);
	КонецЕсли;	
	
КонецПроцедуры	

// Переносит бинарный файл из ФайлХранилище справочника ВерсииФайлов в регистр сведений ХранимыеФайлыВерсий
Процедура ПереместитьФайлыИзИнформационнойБазыВРегистрСведений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.ТипХраненияФайла = &ТипХраненияФайла";
		
	Запрос.УстановитьПараметр("ТипХраненияФайла", Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе);	

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДанныеВХранилище = Объект.ФайлХранилище.Получить();
		Если ТипЗнч(ДанныеВХранилище) = Тип("ДвоичныеДанные") Тогда
			ЗаписатьФайлВИнформационнуюБазу(Выборка.Ссылка, Объект.ФайлХранилище);
			Объект.ФайлХранилище = Новый ХранилищеЗначения(""); // очищаем значение
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

// заполняет поле ДатаЗаема текущей датой
Процедура ЗаполнитьДатуЗаема() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаЗаема = ТекущаяДатаСеанса();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка.Редактирует) Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			// Чтобы прошла запись ранее подписанного объекта
			Объект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
			Объект.ДатаЗаема = ДатаЗаема;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

// Проинициализирует ХранитьФайлыВТомахНаДиске из ТипХраненияФайлов
Процедура ПроинициализироватьХранитьФайлыВТомахНаДиске() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипХраненияФайлов = Константы.УдалитьТипХраненияФайлов.Получить();
	ХранитьФайлыВТомахНаДиске = (ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске);
	Константы.ХранитьФайлыВТомахНаДиске.Установить(ХранитьФайлыВТомахНаДиске);
	
КонецПроцедуры	

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Процедура ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	Если ЕстьХранимыеФайлы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлы.ТипПараметраКоманды.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(ВнешнийОбъект)) <> Неопределено Тогда
		МассивФайлов = ПолучитьВсеПодчиненныеФайлы(ВнешнийОбъект);
		ЕстьХранимыеФайлы = МассивФайлов.Количество() <> 0;
	КонецЕсли;
	
КонецПроцедуры

// Читает кодировку файла
//
// Параметры:
//  ДвоичныеДанныеФайла - ДвоичныеДанные - Двоичные данные файла
//  ДанныеФайла - Структура - данные файла
//  РасширениеФайла - Строка - расширение файла
//
// Возвращаемое значение:
//   Строка - Строка кодировки
Функция ПолучитьКодировкуФайлаДляПредпросмотра(ДвоичныеДанныеФайла, ДанныеФайла, РасширениеФайла = "") Экспорт
	
	Если ДанныеФайла = Неопределено И ДвоичныеДанныеФайла <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Кодировка = РегистрыСведений.КодировкиФайлов.КодировкаИзДвоичныхДанных(ДвоичныеДанныеФайла);
		Если Не ЗначениеЗаполнено(Кодировка) Тогда
			Кодировка = РегистрыСведений.КодировкиФайлов.КодировкаИзСоответствияАлфавиту(ДвоичныеДанныеФайла);
		КонецЕсли;
		Возврат Кодировка;
 	КонецЕсли;	
	
	ВерсияСсылка = ДанныеФайла.ТекущаяВерсия;
	Расширение = ДанныеФайла.Расширение;
	
	Возврат ПолучитьКодировкуВерсииФайла(ВерсияСсылка, Расширение);
	
КонецФункции

// Записывает кодировку версии файла
//
// Параметры:
//  ВерсияСсылка - СправочникСсылка.ВерсииФайлов - ссылка на версию файла.
//  Кодировка - Строка -Строка кодировки
//  ИзвлеченныйТекст - Строка - текст, извлеченный из файла    
//  Расширение - Строка
//
Процедура ЗаписатьКодировкуВерсииФайлаИИзвлеченныйТекст(ВерсияСсылка, Кодировка, ИзвлеченныйТекст, Расширение) Экспорт
	
	ЗаписатьКодировкуВерсииФайла(ВерсияСсылка, Кодировка);
	ЗаписатьРезультатИзвлеченияТекста(ВерсияСсылка, Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен, 
		ИзвлеченныйТекст, Расширение);
	
КонецПроцедуры

// Обработчик подписи ФайлПриЗаписи
Процедура ПриЗаписиФайлаСервер(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если Источник.ДополнительныеСвойства.Свойство("ЭтоПереименование") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.ДополнительныеСвойства.Свойство("ДобавлениеРегШтампа")
		И Источник.ДополнительныеСвойства.ДобавлениеРегШтампа Тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.ПометкаУдаления Тогда
		
		ЕстьФайлы = ОбъектИмеетФайлы(Источник.ВладелецФайла);
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Источник.ВладелецФайла, "ЕстьФайлы", ЕстьФайлы);
		
	Иначе
		
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
			Источник.ВладелецФайла, "ЕстьФайлы", Истина);
		
	КонецЕсли;
	
	Если Делопроизводство.ФайлЯвляетсяОригиналом(Источник.Ссылка)
		И Источник.ДополнительныеСвойства.Свойство("НеОбновлятьДанныеОригинала") = Ложь Тогда 
		Делопроизводство.ОбновитьСведенияОНаличииОригинала(Источник.ВладелецФайла);
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Редактирует <> Источник.Редактирует
		Или Источник.ДополнительныеСвойства.ТекущаяВерсия <> Источник.ТекущаяВерсия Тогда
		
		РегистрыСведений.ЗанятыеФайлы.ОбновитьЗапись(Источник, 
			Источник.ДополнительныеСвойства.Редактирует);
			
	КонецЕсли;	
	
КонецПроцедуры

// Проверяет, что к объекту с файлами присоединен по крайней мере один файл
//
Функция ОбъектИмеетФайлы(ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И Файлы.ПометкаУдаления = ЛОЖЬ";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Заполняет регистр КешИнформацииОбОбъектах при обновлении базы
Процедура ЗаполнитьРегистрКешИнформацииОбОбъектах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Файлы.ВладелецФайла КАК ВладелецФайла
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ПометкаУдаления = ЛОЖЬ";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
			Выборка.ВладелецФайла, "ЕстьФайлы", Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИзвлекатьТекстыФайловНаСервере() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	ИзвлекатьТекстыФайловНаСервере = Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
	Возврат ИзвлекатьТекстыФайловНаСервере;
	
КонецФункции

// Получает ТабличныйДокумент по файлу
// Параметры:
//  ДанныеФайла  - Структура
//
// Возвращаемое значение:
//  ТабличныйДокумент
Функция ПолучитьТабличныйДокументПоФайлу(ДанныеФайла) Экспорт
	
	Попытка
		Если НРег(ДанныеФайла.Расширение) = "mxl" Тогда
			Документ = Новый ТабличныйДокумент;
		КонецЕсли;
		
		ДвоичныеДанные = ПолучитьДвоичныеДанныеФайла(ДанныеФайла.Ссылка);
		
		ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		Документ.Прочитать(ИмяВременногоФайла);
		
		Возврат Документ;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьДокументИзВременногоХранилища(АдресВременногоХранилища, Расширение) Экспорт
	
	Попытка
		Если НРег(Расширение) = "mxl" Тогда
			Документ = Новый ТабличныйДокумент;
		ИначеЕсли НРег(Расширение) = "geo" Тогда
			Документ = Новый ГеографическаяСхема;
		КонецЕсли;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		Документ.Прочитать(ИмяВременногоФайла);
		
		УдалитьИзВременногоХранилища(АдресВременногоХранилища);
		
		Возврат Документ;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// После успешного завершения удаляет временные файлы и каталог, если он пуст
Процедура ЗафиксироватьТранзакциюДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме, СтрокаКонтекста) Экспорт
	 
 	Для Каждого ДанныеВосстановления Из ДанныеДляВосстановленияФайловВТоме Цикл
		
		СтарыйПуть = ДанныеВосстановления.СтарыйПуть;
		ВременныйПуть = ДанныеВосстановления.ВременныйПуть;
		
		Попытка
			
			// удаляем временный файл
			
			ФайлНаДискеВременный = Новый Файл(ВременныйПуть);
			ФайлНаДискеВременный.УстановитьТолькоЧтение(Ложь);
			
			ФайловыеФункции.УдалитьФайлСЛогированием(ВременныйПуть, "ЗафиксироватьТранзакциюДляФайловВТоме." + СтрокаКонтекста);
			
		Исключение
			// не обрабатываем исключение, даже если с файлами была ошибка.
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// При неудаче восстанавливает файлы в томе
Процедура ОтменитьТранзакциюДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме) Экспорт
	
	Для Каждого ДанныеВосстановления Из ДанныеДляВосстановленияФайловВТоме Цикл
		
		СтарыйПуть = ДанныеВосстановления.СтарыйПуть;
		ВременныйПуть = ДанныеВосстановления.ВременныйПуть;
		
		Попытка
			
			// возвращаем из временного файла в прежнее место
			ПереместитьФайл(ВременныйПуть, СтарыйПуть);
			
		Исключение
			// не обрабатываем исключение, даже если с файлами была ошибка.
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция заполняет данные сохраняемых файлов, с учетом пути выбора для 
// сохранения файлов почты.
Функция ПолучитьДанныеФайловДляСохраненияФайлов(СписокФайлов, УникальныйИдентификатор) Экспорт
	
	СписокДанныхФайлов = Новый СписокЗначений();
	ОбщийРазмер = 0;
	
	Если ТипЗнч(СписокФайлов) = Тип("СписокЗначений") Тогда
		
		СписокФайловВладельца = СписокФайлов;
		
		Для Каждого Файл Из СписокФайловВладельца Цикл
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
				Файл.Значение,
				Неопределено,
				УникальныйИдентификатор);
				
			СписокДанныхФайлов.Добавить(ДанныеФайла);
			ОбщийРазмер = ОбщийРазмер + ДанныеФайла.Размер;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СписокФайлов) = Тип("ТаблицаЗначений") Тогда
		
		СписокФайловВладельца = Новый СписокЗначений();
		Для каждого ФайлыПисьмаСтрока Из СписокФайлов Цикл
			СписокФайловВладельца.Добавить(ФайлыПисьмаСтрока.Ссылка);
		КонецЦикла;
		
		Для Каждого Файл Из СписокФайлов Цикл
			
			Если Файл.Расположение = "Файл" ИЛИ Файл.Расположение = "СсылкаНаФайл" Тогда
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
					Файл.Ссылка,
					Неопределено,
					УникальныйИдентификатор);
				
			ИначеЕсли Файл.Расположение = "ВременноеХранилище" Тогда
				
				ДанныеФайла = Новый Структура;
				ДанныеФайла.Вставить("Ссылка", Справочники.Файлы.ПустаяСсылка());
				ДанныеФайла.Вставить("Версия", Справочники.ВерсииФайлов.ПустаяСсылка());
				ДанныеФайла.Вставить("ТекущаяВерсия", Справочники.ВерсииФайлов.ПустаяСсылка());
				ДанныеФайла.Вставить("НавигационнаяСсылкаТекущейВерсии", Файл.Адрес);
				ДанныеФайла.Вставить("Размер", Файл.Размер);
				ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", ТекущаяДата());
				Расширение = ФайловыеФункцииКлиентСервер.ПолучитьРасширениеИмениФайла(Файл.ИмяФайла);
				ДанныеФайла.Вставить("Расширение", Расширение);
				ДанныеФайла.Вставить("ПолноеНаименованиеВерсии", Файл.ИмяФайла);
				ДанныеФайла.Вставить("Зашифрован", Ложь);
				ДанныеФайла.Вставить("РедактируетТекущийПользователь", Ложь);
				
			КонецЕсли;
			
			СписокДанныхФайлов.Добавить(ДанныеФайла);
			ОбщийРазмер = ОбщийРазмер + ДанныеФайла.Размер;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоФайлов = СписокФайловВладельца.Количество();
	ПутьВыбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохраненияФайлов");
	
	ДанныеСохраняемыхФайлов = Новый Структура;
	ДанныеСохраняемыхФайлов.Вставить("СписокДанныхФайлов", СписокДанныхФайлов);
	ДанныеСохраняемыхФайлов.Вставить("СписокФайлов", СписокФайловВладельца);
	ДанныеСохраняемыхФайлов.Вставить("ПутьВыбора", ПутьВыбора);
	ДанныеСохраняемыхФайлов.Вставить("КоличествоФайлов", КоличествоФайлов);
	ДанныеСохраняемыхФайлов.Вставить("ОбщийРазмер", ОбщийРазмер);
	
	Возврат ДанныеСохраняемыхФайлов;
	
КонецФункции

// Получает ДанныеФайла и делает заем для массива файлов. При ошибке продолжает работу
//  в МассивДанныхФайла возвращает только успешно занятые файлы
Процедура ПолучитьДанныеИЗанятьМассивФайлов(МассивОтмеченныхПодчиненных, МассивДанныхФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	Для Каждого СтруктураПодчиненного Из МассивОтмеченныхПодчиненных Цикл
		ДанныеФайла = ДанныеФайла(СтруктураПодчиненного.ПодчиненныйФайл, Неопределено);
		
		СтрокаОшибки = "";
		Если РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
				Если ЗанятьФайл(ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор) Тогда 
					МассивДанныхФайла.Добавить(ДанныеФайла);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Делает ДанныеФайла + ПоместитьВоВременноеХранилище (если файл хранится на диске)
// Функция возвращает структуру, содержащую различные сведения о Файле и версии
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//  РабочийКаталогВладельца - Строка - в ней возвращается рабочий каталог владельца файла
//
// Возвращаемое значение:
//   Структура - структура с данными файла
Функция ПолучитьДанныеФайлаДляОткрытияИПроверитьВозможноЗанятьФайл(ФайлСсылка, ВерсияСсылка = Неопределено, 
	ИдентификаторФормы = Неопределено, РабочийКаталогВладельца = Неопределено, 
	ВозможноЗанятьФайл = Неопределено, СтрокаОшибки = "") Экспорт
	
	ДанныеФайла = ДанныеФайлаДляОткрытия(ФайлСсылка, ВерсияСсылка, 
		ИдентификаторФормы, РабочийКаталогВладельца);
	
	СтрокаОшибки = "";
	РаботаСФайламиПереопределяемый.ПриПопыткеЗанятьФайл(ДанныеФайла, СтрокаОшибки);
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		ВозможноЗанятьФайл = Ложь;
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

// Возвращает массив структур
Функция ЗаполнитьДанныеФайловИзРегистра(ВсеПутиФайлов, ИмяКаталога) Экспорт
	
	МассивДанныхФайлов = Новый Массив;
	
	Для Каждого ПолноеИмя Из ВсеПутиФайлов Цикл
		
		ОтносительныйПуть = Сред(ПолноеИмя, СтрДлина(ИмяКаталога) + 1);
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ФайлЕстьВРегистре", Ложь);
		ДанныеФайла.Вставить("Версия", Справочники.ВерсииФайлов.ПустаяСсылка());
		ДанныеФайла.Вставить("ДатаПомещения");
		ДанныеФайла.Вставить("Владелец");
		ДанныеФайла.Вставить("НомерВерсии");
		ДанныеФайла.Вставить("ВРегистреНаЧтение");
		ДанныеФайла.Вставить("ВРегистреКодФайла");
		ДанныеФайла.Вставить("ВРегистреПапка");
		ДанныеФайла.Вставить("РедактируетТекущийПользователь", Ложь);
		ДанныеФайла.Вставить("ОтносительныйПуть", ОтносительныйПуть);
		
		// Если не найдем на диске - то минимальная дата 
		//  будет самой старой - и удалится при очистке из рабочего каталога самых старых файлов
		ДатаПомещения = Дата('00010101');
		
		НайденныеСвойства = РаботаСФайламиСлужебныйВызовСервера.НайтиВРегистреПоПути(ОтносительныйПуть);
		ЗаполнитьЗначенияСвойств(ДанныеФайла, НайденныеСвойства);
		
		ДанныеФайла.ДатаПомещения = ?(НайденныеСвойства.ФайлЕстьВРегистре, НайденныеСвойства.ДатаПомещения, ДатаПомещения);
		
		Если НайденныеСвойства.ФайлЕстьВРегистре Тогда
			ДанныеФайла.РедактируетТекущийПользователь = РаботаСФайламиВызовСервера.ПолучитьРедактируетТекущийПользователь(
				НайденныеСвойства.Версия);
		КонецЕсли;	
		
		МассивДанныхФайлов.Добавить(ДанныеФайла);
		
	КонецЦикла;	
	
	Возврат МассивДанныхФайлов;
	
КонецФункции

Функция ПроверитьЦелостностьФайлов(ТаблицаФайловНаДиске, Том) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.ПутьКФайлу,
		|	ВерсииФайлов.Расширение,
		|	ВерсииФайлов.ПолноеНаименование КАК Наименование,
		|	ВерсииФайлов.Представление,
		|	ВерсииФайлов.Том,
		|	ВерсииФайлов.Ссылка КАК Ссылка,
		|	ВерсииФайлов.ДатаМодификацииФайла,
		|	ВерсииФайлов.Автор КАК Отредактировал
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)
		|	И ВерсииФайлов.Том = &Том";
		
	Запрос.УстановитьПараметр("Том", Том);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВерсияСсылка = Выборка.Ссылка;
		
		Если ЗначениеЗаполнено(Выборка.ПутьКФайлу) И ЗначениеЗаполнено(Выборка.Том) Тогда
			
			ПолныйПутьФайла = ФайловыеФункцииСлужебный.ПолныйПутьТома(Выборка.Том) + Выборка.ПутьКФайлу; 
			Если Прав(ПолныйПутьФайла, 1) = "." Тогда
				ПолныйПутьФайла = Лев(ПолныйПутьФайла, СтрДлина(ПолныйПутьФайла) - 1);
			КонецЕсли;	
			
			СуществующийФайл = ТаблицаФайловНаДиске.НайтиСтроки(Новый Структура("ПолноеИмя",ПолныйПутьФайла));
			Если СуществующийФайл.Количество() = 0 Тогда
				
				НесуществующийФайл = ТаблицаФайловНаДиске.Добавить();
				НесуществующийФайл.СтатусПроверки = НСтр("ru = 'Отсутствуют данные в томе на диске'");
				НесуществующийФайл.Файл = ВерсияСсылка;
				НесуществующийФайл.Ссылка = ВерсияСсылка;
				НесуществующийФайл.ПолноеИмя = ПолныйПутьФайла;
				НесуществующийФайл.Расширение = ВерсияСсылка.Расширение;
				НесуществующийФайл.Имя = ВерсияСсылка.Наименование;
				НесуществующийФайл.Том = Том;
				НесуществующийФайл.Отредактировал = Выборка.Отредактировал;
				НесуществующийФайл.ДатаРедактирования = Выборка.ДатаМодификацииФайла;
				НесуществующийФайл.Количество = 1;
				
			Иначе	
				СуществующийФайл[0].Файл = ВерсияСсылка;
				СуществующийФайл[0].СтатусПроверки = НСтр("ru = 'Целостные данные'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

Процедура УдалениеФайловКУдалению() Экспорт
	
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.УдалениеФайловКУдалению;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание);
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ИдетЗагрузкаИзДО21() Тогда
		Возврат;
	КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКОД")
		И НЕ КОДСервер.ЭтоЦентральныйУзел() Тогда
			
		Текст = НСтр("ru = 'Это регламентное задание может выполняться только в центральном узле.'");
		РегламентныеЗаданияСервер.ОтменитьВыполнениеЗадания(РегламентноеЗадание, Текст);
		ВызватьИсключение Текст;
		
	КонецЕсли;

	РегистрыСведений.ФайлыКУдалению.УдалитьСтарыеФайлы();
	
КонецПроцедуры

// Получает массив занятых файлов по владельцу - неважно, занятых мной или кем то еще
// 
// Параметры:
// 	ВладелецФайла - ОпределяемыйТип.ВладелецФайлов
// 	
// Возвращаемое значение:
// 	Массив - массив структур
Функция ПолучитьСписокВсехЗанятыхФайлов(ВладелецФайла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Редактирует,
		|	Файлы.ИндексКартинки,
		|	Файлы.Наименование,
		|	Файлы.Описание,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ВладелецФайла,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	Файлы.ХранитьВерсии,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И (Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка)
		|			И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяССылка)
		|			И Файлы.Редактирует <> НЕОПРЕДЕЛЕНО)";
		
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	ТаблицаЗанятыхФайлов = Запрос.Выполнить().Выгрузить();
	
	МассивФайлов = Новый Массив;
	
	Для Каждого Строка Из ТаблицаЗанятыхФайлов Цикл
		
		ОписаниеФайла = Новый Структура(
			"Редактирует, РедактируетТекущийПользователь, Наименование, Ссылка, Размер,
			|ПолноеИмяФайлаВРабочемКаталоге, ДатаМодификацииУниверсальнаяВБазе, Расширение");
		ЗаполнитьЗначенияСвойств(ОписаниеФайла, Строка);
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
			Строка.Ссылка);
		ОписаниеФайла.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;	
		ОписаниеФайла.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
		ОписаниеФайла.РедактируетТекущийПользователь =
			Сотрудники.ЭтоСотрудникИлиПользовательТекущегоПользователя(ОписаниеФайла.Редактирует);
		
		МассивФайлов.Добавить(ОписаниеФайла);
		
	КонецЦикла;	
	
	Возврат МассивФайлов;
	
КонецФункции

Функция ФайлыУдовлетворяютРолям(Документ, ТекстОшибки) Экспорт
	
	ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
	
	РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
	Если РолиФайлов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	МассивКомбинацийРолей = Неопределено;
	Файлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(
		Неопределено, Документ,,,МассивКомбинацийРолей);
	
	// Роли файлов
	ЧислоРолейОбязательная = 0;
	ЧислоРолейТолькоОдинФайл = 0;
	ЧислоФайлов = 0;
	ЧислоФайловБезРоли = 0;
	ФайлСсылка = Неопределено;
	Для Каждого СтрРоль Из РолиФайлов Цикл
		
		Если СтрРоль.Обязательная Тогда
			ЧислоРолейОбязательная = ЧислоРолейОбязательная + 1;
		КонецЕсли;	
		
		Если СтрРоль.ТолькоОдинФайл Тогда
			ЧислоРолейТолькоОдинФайл = ЧислоРолейТолькоОдинФайл + 1;
		КонецЕсли;	
		
	КонецЦикла;		
	
	Для Каждого Строка Из Файлы Цикл
		
		ЧислоФайлов = ЧислоФайлов + 1;
		Если Не ЗначениеЗаполнено(Строка.РольФайла) Тогда
			ЧислоФайловБезРоли = ЧислоФайловБезРоли + 1;
		КонецЕсли;	
		ФайлСсылка = Строка.Ссылка;
		
	КонецЦикла;
	
	// Обязательная
	Для Каждого СтрРоль Из РолиФайлов Цикл
		
		Если СтрРоль.Обязательная Тогда
			
			Если Не ЕстьФайлыСРолью(Файлы, СтрРоль.Роль) Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Требуется указать хотя бы один файл с ролью ""%1"".'"), СтрРоль.Роль);
				Возврат Ложь;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	// ТолькоОдинФайл
	Для Каждого СтрРоль Из РолиФайлов Цикл
		
		Если СтрРоль.ТолькоОдинФайл Тогда
			
			ЧислоФайловСРолью = ЧислоФайловСРолью(Файлы, СтрРоль.Роль);
			
			Если ЧислоФайловСРолью >= 2 Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Должен быть указан только один файл с ролью ""%1"".'"), СтрРоль.Роль);
				Возврат Ложь;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

// Возврашает Истниа, если таблица значений Файлы удовляетовряет ролям в виде документа. Это еще до записи документа.
// 
// Параметры:
// 	Файлы - ТаблицаЗначений
//  ВидДокумента - СправочникСсылка.ВидыДокументов
//  ТекстОшибки - Строка
// 	
// Возвращаемое значение:
// 	Булево
Функция ФайлыДобавленныеУдовлетворяютРолям(Файлы, ВидДокумента, ТекстОшибки) Экспорт
	
	Если не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
	Если РолиФайлов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	// Роли файлов
	ЧислоРолейОбязательная = 0;
	ЧислоРолейТолькоОдинФайл = 0;
	ЧислоФайлов = 0;
	ЧислоФайловБезРоли = 0;
	
	Для Каждого СтрРоль Из РолиФайлов Цикл
		
		Если СтрРоль.Обязательная Тогда
			ЧислоРолейОбязательная = ЧислоРолейОбязательная + 1;
		КонецЕсли;	
		
		Если СтрРоль.ТолькоОдинФайл Тогда
			ЧислоРолейТолькоОдинФайл = ЧислоРолейТолькоОдинФайл + 1;
		КонецЕсли;	
		
	КонецЦикла;		
	
	Для Каждого Строка Из Файлы Цикл
		
		ЧислоФайлов = ЧислоФайлов + 1;
		Если Не ЗначениеЗаполнено(Строка.РольФайла) Тогда
			ЧислоФайловБезРоли = ЧислоФайловБезРоли + 1;
		КонецЕсли;	
		
	КонецЦикла;
	
	// Обязательная
	Для Каждого СтрРоль Из РолиФайлов Цикл
		
		Если СтрРоль.Обязательная Тогда
			
			Если Не ЕстьФайлыСРолью(Файлы, СтрРоль.Роль) Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Требуется указать хотя бы один файл с ролью ""%1"".'"), СтрРоль.Роль);
				Возврат Ложь;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	// ТолькоОдинФайл
	Для Каждого СтрРоль Из РолиФайлов Цикл
		
		Если СтрРоль.ТолькоОдинФайл Тогда
			
			ЧислоФайловСРолью = ЧислоФайловСРолью(Файлы, СтрРоль.Роль);
			
			Если ЧислоФайловСРолью >= 2 Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Должен быть указан только один файл с ролью ""%1"".'"), СтрРоль.Роль);
				Возврат Ложь;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

Функция ЕстьФайлыСРолью(Файлы, Роль)
	
	НашлиРоль = Ложь;
	
	Для Каждого Строка Из Файлы Цикл
		
		Если Строка.РольФайла = Роль И Не Строка.ПометкаУдаления Тогда
			НашлиРоль = Истина;
			Прервать;	
		КонецЕсли;	
			
	КонецЦикла;
	
	Возврат НашлиРоль;
	
КонецФункции	

Функция ЧислоФайловСРолью(Файлы, Роль)
	
	ЧислоФайловСРолью = 0;
	
	Для Каждого Строка Из Файлы Цикл
		
		Если Строка.РольФайла = Роль И Не Строка.ПометкаУдаления Тогда
			ЧислоФайловСРолью = ЧислоФайловСРолью + 1;
		КонецЕсли;	
			
	КонецЦикла;
	
	Возврат ЧислоФайловСРолью;
	
КонецФункции	

// Обертка. Является ли проверяемая страница нужной. Проверяемая страница - это настройка, либо конкретный номер.
// Для размещения штампа в файле визуализации.
// 
// Параметры:
//  ПроверяемаяСтраница - Перечислениессылка.СтраницаВставкиКартинки, Число -
//  НомерТекущейСтраницы - Число - Номер текущей страницы, для проверки, является ли он нужным
//  ВсегоСтраниц - Число - Всего страниц, для проверки настройки "Последняя страница"
// 
// Возвращаемое значение:
//  Булево - Подходит или нет.
Функция ЭтоНужнаяСтраница(ПроверяемаяСтраница, НомерТекущейСтраницы, ВсегоСтраниц)
	
	Возврат ПроверяемаяСтраница = НомерТекущейСтраницы // Заданная страница, актуально для "НовыйПоложениеИзображения".
		Или
		(ПроверяемаяСтраница = Перечисления.СтраницаВставкиКартинки.Первая И НомерТекущейСтраницы = 1)
		Или
		(ПроверяемаяСтраница = Перечисления.СтраницаВставкиКартинки.Последняя И НомерТекущейСтраницы >= ВсегоСтраниц)
		Или
		ПроверяемаяСтраница = Перечисления.СтраницаВставкиКартинки.Каждая;
	
КонецФункции

// Авто Формирование имен файлов (по шаблону и со сканера)
#Область АвтоФормированиеИменФайлов

// Формирует пример номера
//
// Параметры
// ФорматНомера  - Строка формата с полями вида [ВидДокумента]
// Пример - Строка - возвращаемый параметр -  пример имени файла
// ОписаниеОшибки - Строка - возвращаемый параметр - текст ошибки.
// 
// Возвращаемое значение:
//    Булево = Истина если успешно
Функция СформироватьПримерИмениФайла(ФорматНомера, Пример, ОписаниеОшибки) Экспорт
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ЗначенияПараметровНомера = Новый Структура;
	
	ЗначенияПараметровНомера.Вставить("ОригинальноеИмя", НСтр("ru = 'Скан01'"));
	
	ЗначенияПараметровНомера.Вставить("Дата", Формат(ТекущаяДата,"ДФ=dd.MM.yyyy"));
	
	ЗначенияПараметровНомера.Вставить("Наименование",		НСтр("ru = 'Приказ по оргструктуре'"));
	ЗначенияПараметровНомера.Вставить("Заголовок",			НСтр("ru = 'Приказ по оргструктуре'"));
	ЗначенияПараметровНомера.Вставить("РегистрационныйНомер",	НСтр("ru = '1.5.4-01-15-52'"));
	
	ЗначенияПараметровНомера.Вставить("ВидДокумента",		НСтр("ru = 'Договор аренды'"));
	ЗначенияПараметровНомера.Вставить("ГрифДоступа",		НСтр("ru = 'Общий'"));
	ЗначенияПараметровНомера.Вставить("Тематика",			НСтр("ru = 'Договора'"));
	ЗначенияПараметровНомера.Вставить("Организация",		НСтр("ru = 'ООО Ромашка'"));
	ЗначенияПараметровНомера.Вставить("Проект",			НСтр("ru = 'Автоматизация'"));
	ЗначенияПараметровНомера.Вставить("ВопросДеятельности",НСтр("ru = 'Информация для новых сотрудников'"));
	ЗначенияПараметровНомера.Вставить("НоменклатураДел",	
		НСтр("ru = '1-01 Служебные записки об административно-организационной деятельности'"));
	
	ЗначенияПараметровНомера.Вставить("ВидМероприятия",		НСтр("ru = 'Протокольное совещание'"));
	ЗначенияПараметровНомера.Вставить("ДатаНачала", Формат(ТекущаяДата,"ДФ=dd.MM.yyyy"));
	
	ЗначенияПараметровНомера.Вставить("РольФайла",		НСтр("ru = 'Содержание'"));
	
	ЗначенияПараметровНомера.Вставить("ДатаРегистрации",  Формат(ТекущаяДата,"ДФ=dd.MM.yyyy"));
	ЗначенияПараметровНомера.Вставить("Контрагент", НСтр("ru = 'ООО Лютик'"));
	
	ОписаниеОшибки = "";
	СтруктураФорматаНомера = ""; 
	
	Если Не РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера) Тогда
		Пример = "";
		Возврат Ложь;
	КонецЕсли;
	
	Пример = СформироватьИмяФайлаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера);
	Возврат Истина;
	
КонецФункции

// Формирует имя файла из структуры формата и значений параметров
//
// Параметры
// СтруктураФорматаНомера  - ТаблицаЗначений, колонки Ключ Значение ВходитВСлужебное
// ЗначенияПараметровНомера - Структура(поля ОригинальноеИмя, Наименование и пр )
// 
// Возвращаемое значение:
//    Строка - имя файла
Функция СформироватьИмяФайлаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера) 
	
	МаксДлина = 100;
	
	СформированныйНомер = СформироватьИмяФайлаПоФормату_Реализация(СтруктураФорматаНомера, ЗначенияПараметровНомера);
	
	ИменаНеСокращаемые = Новый Соответствие;
	ИменаНеСокращаемые.Вставить("Дата", 1);
	ИменаНеСокращаемые.Вставить("ДатаРегистрации", 1);
	ИменаНеСокращаемые.Вставить("РегистрационныйНомер", 1);
	
	Если СтрДлина(СформированныйНомер) > МаксДлина Тогда
		
		// уменьшим длину составляющих.
		
		// найдем общую длину, в том числе ту, что можно изменять
		ВсегоДлина = 0;
		ВсегоДлинаМожноИзменять = 0;
		
		Для Каждого ЭлементФормата Из СтруктураФорматаНомера Цикл
			
			Если ЭлементФормата.Ключ = "Разделитель" Тогда
				
				ВсегоДлина = ВсегоДлина + СтрДлина(Строка(ЭлементФормата.Значение));
				
			КонецЕсли;		
			
			Если ЭлементФормата.Ключ = "СлужебноеПоле" Тогда
				
				ЗначениеПараметра = "";
				ЗначенияПараметровНомера.Свойство(ЭлементФормата.Значение, ЗначениеПараметра);
				ДлинаЗначения = СтрДлина(ЗначениеПараметра);
				
				ВсегоДлина = ВсегоДлина + СтрДлина(Строка(ЗначениеПараметра));
				
				Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда  
					
					МожноСокращать = Истина;
					
					Если ЭлементФормата.Значение = "ОригинальноеИмя"
						И ДлинаЗначения <= 20 Тогда
						МожноСокращать = Ложь;
					КонецЕсли;	  
					
					Если ИменаНеСокращаемые.Получить(ЭлементФормата.Значение) <> Неопределено Тогда
						МожноСокращать = Ложь;
					КонецЕсли;	  
					
					Если МожноСокращать Тогда
						ВсегоДлинаМожноИзменять = ВсегоДлинаМожноИзменять + СтрДлина(Строка(ЗначениеПараметра));
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		НеизменнаяЧасть = ВсегоДлина - ВсегоДлинаМожноИзменять;
		Если НеизменнаяЧасть >= МаксДлина Тогда
			Возврат Лев(СформированныйНомер, МаксДлина);
		КонецЕсли;	
		
		Множитель = (МаксДлина - НеизменнаяЧасть) / (ВсегоДлина - НеизменнаяЧасть); //  меньше 1, скажем 0.7
		
		Для Каждого ЭлементФормата Из СтруктураФорматаНомера Цикл
			
			Если ЭлементФормата.Ключ = "СлужебноеПоле" Тогда
				
				ЗначениеПараметра = "";
				ЗначенияПараметровНомера.Свойство(ЭлементФормата.Значение, ЗначениеПараметра);
				ДлинаЗначения = СтрДлина(ЗначениеПараметра);
				
				Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
					
					МожноСокращать = Истина;
					
					Если ЭлементФормата.Значение = "ОригинальноеИмя"
						И ДлинаЗначения <= 20 Тогда
						МожноСокращать = Ложь;
					КонецЕсли;	  
					
					Если ИменаНеСокращаемые.Получить(ЭлементФормата.Значение) <> Неопределено Тогда
						МожноСокращать = Ложь;
					КонецЕсли;	  
					
					Если МожноСокращать Тогда
						
						НоваяДлина = Цел(СтрДлина(ЗначениеПараметра) * Множитель);
						ЗначенияПараметровНомера[ЭлементФормата.Значение] = Лев(ЗначениеПараметра, НоваяДлина);
						
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		СформированныйНомер = СформироватьИмяФайлаПоФормату_Реализация(СтруктураФорматаНомера, ЗначенияПараметровНомера);
		
	КонецЕсли;	
	
	Возврат СформированныйНомер;
	
КонецФункции

// Реализация функции. Формирует имя файла из структуры формата и значений параметров
//
// Параметры
// СтруктураФорматаНомера  - ТаблицаЗначений, колонки Ключ Значение ВходитВСлужебное
// ЗначенияПараметровНомера - Структура(поля ОригинальноеИмя, Наименование и пр )
// 
// Возвращаемое значение:
//    Строка - имя файла
Функция СформироватьИмяФайлаПоФормату_Реализация(СтруктураФорматаНомера, ЗначенияПараметровНомера) 
	
	СформированныйНомер = "";
	
	Для Каждого ЭлементФормата Из СтруктураФорматаНомера Цикл
		
		Если ЭлементФормата.Ключ = "Разделитель" Тогда
			
			Если ЭлементФормата.ВходитВСлужебное = 0 Тогда
				СформированныйНомер = СформированныйНомер + ЭлементФормата.Значение;
			Иначе
				ЗначениеПараметра = "";
				СлужебноеПоле = СтруктураФорматаНомера.Получить(ЭлементФормата.ВходитВСлужебное - 1).Значение;
				ЗначенияПараметровНомера.Свойство(СлужебноеПоле, ЗначениеПараметра);
				Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда 
					СформированныйНомер = СформированныйНомер + ЭлементФормата.Значение;
				КонецЕсли;	
			КонецЕсли;	
			
		ИначеЕсли ЭлементФормата.Ключ = "СлужебноеПоле" Тогда
			
			ЗначениеПараметра = "";
			ЗначенияПараметровНомера.Свойство(ЭлементФормата.Значение, ЗначениеПараметра);
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
				ЗначениеПараметра = Формат(ЗначениеПараметра, "ЧГ=");
			Иначе	
				ЗначениеПараметра = Строка(ЗначениеПараметра);
			КонецЕсли;	
			
			СформированныйНомер = СформированныйНомер + ЗначениеПараметра;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат СформированныйНомер;
	
КонецФункции

// Возвращает СписокЗначений с именами полей.
Функция СписокСлужебныхПолей()
	
	Поля = Новый СписокЗначений;
	
	// справа не нужен НСТР
	Поля.Добавить("Наименование",		"Наименование");
	Поля.Добавить("Заголовок",			"Заголовок");
	Поля.Добавить("РегистрационныйНомер",	"РегистрационныйНомер");
	
	Поля.Добавить("Дата",				"Дата");
	
	Поля.Добавить("ВидДокумента",		"ВидДокумента");
	Поля.Добавить("ГрифДоступа",		"ГрифДоступа");
	Поля.Добавить("Тематика",			"Тематика");
	Поля.Добавить("Организация",		"Организация");
	Поля.Добавить("Проект",				"Проект");
	Поля.Добавить("ВопросДеятельности",	"ВопросДеятельности");
	Поля.Добавить("НоменклатураДел",	"НоменклатураДел");
	Поля.Добавить("РольФайла",			"РольФайла");
	
	Поля.Добавить("ОригинальноеИмя",	"ОригинальноеИмя");
	
	Поля.Добавить("ВидМероприятия",		"ВидМероприятия");
	Поля.Добавить("ДатаНачала",			"ДатаНачала");

	Поля.Добавить("ДатаРегистрации",	"ДатаРегистрации");
	Поля.Добавить("Контрагент",			"Контрагент");
	
	Возврат Поля;
	
КонецФункции	

// Разбирает текстовый формат номера в структуру 
//
// Параметры
// ФорматНомера  - Строка формата с полями вида [ВидДокумента]
// ОписаниеОшибки - Строка - возвращаемый параметр - текст ошибки.
// СтруктураФорматаНомера  - ТаблицаЗначений, колонки Ключ Значение ВходитВСлужебное - возвращаемый параметр
// 
// Возвращаемое значение:
//    Булево - Истина если успешно
Функция РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера = Неопределено) Экспорт 
	
	СтруктураФорматаНомера = Новый ТаблицаЗначений;
	СтруктураФорматаНомера.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка")); // разделитель или служебное поле
	СтруктураФорматаНомера.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка")); // значение разделителя или служебного поля
	СтруктураФорматаНомера.Колонки.Добавить("ВходитВСлужебное", Новый ОписаниеТипов("Число")); // разделитель входит в служебное поле
	
	ОписаниеОшибки = "";
	СписокПолей = СписокСлужебныхПолей();
	
	// проверка соответствия скобок
	ПозицияСкобки = 0;
	ПоказательСкобки = 0;
	
	врФорматНомера = СокрЛП(ФорматНомера);
	Для Инд = 1 По СтрДлина(врФорматНомера) Цикл
		
		ТекСимвол = Сред(врФорматНомера, Инд, 1);
		Если (ТекСимвол <> "[") И (ТекСимвол <> "]") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если (ТекСимвол = "[") Тогда
			ПоказательСкобки = ПоказательСкобки + 1;
			Если ПоказательСкобки > 1 Тогда 
				ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				
				Если ФрагментОшибки = "" Тогда 
					ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""]""'");
				Иначе
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru = 'Отсутствует символ ""]"" в фрагменте ""%1""'"), ФрагментОшибки);
				КонецЕсли;
				
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
		Если (ТекСимвол = "]") Тогда
			ПоказательСкобки = ПоказательСкобки - 1;
			Если ПоказательСкобки < 0 Тогда 
				ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				
				Если ФрагментОшибки = "" Тогда 
					ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""[""'");
				Иначе
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru = 'Отсутствует символ ""["" в фрагменте ""%1""'"), ФрагментОшибки);
				КонецЕсли;

				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
		ПозицияСкобки = Инд;
	КонецЦикла;
	
	Если ПоказательСкобки > 0 Тогда 
		ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1);
		
		Если ФрагментОшибки = "" Тогда 
			ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""]""'");
		Иначе
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Отсутствует символ ""]"" в фрагменте ""%1""'"), ФрагментОшибки);
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;
	
	
	врФорматНомера = СокрЛП(ФорматНомера);
	Пока врФорматНомера <> "" Цикл
		
		Поз1 = Найти(врФорматНомера, "["); // начало служебного поля
		Если Поз1 > 0 Тогда
			
			Разделитель = Лев(врФорматНомера, Поз1-1);
			Если Разделитель <> "" Тогда
				НоваяСтрока = СтруктураФорматаНомера.Добавить();
				НоваяСтрока.Ключ = "Разделитель";
				НоваяСтрока.Значение = Разделитель;
			КонецЕсли;	
			
			врФорматНомера = Сред(врФорматНомера, Поз1+1);
		    Поз2 = Найти(врФорматНомера, "]"); // окончание служебного поля
			
			Если Поз2 > 0 Тогда
				КодСлужебногоПоля = Лев(врФорматНомера, Поз2-1);
				
				НайденоСлужебноеПоле = Ложь;
				Для Каждого СлужебноеПоле Из СписокПолей Цикл
					
					Если КодСлужебногоПоля <> СлужебноеПоле.Значение Тогда
						Продолжить;
					КонецЕсли;	
					
					Поз3 = Найти(КодСлужебногоПоля, СлужебноеПоле.Значение);
					Если Поз3 = 0 Тогда 
						Продолжить;
					КонецЕсли;	
					
					Если Поз3 > 1 Тогда 
						Разделитель = Лев(КодСлужебногоПоля, Поз3 - 1);
						
						НоваяСтрока = СтруктураФорматаНомера.Добавить();
						НоваяСтрока.Ключ = "Разделитель";
						НоваяСтрока.Значение = Разделитель;
						НоваяСтрока.ВходитВСлужебное = СтруктураФорматаНомера.Индекс(НоваяСтрока) + 2;
					КонецЕсли;	
					
					НоваяСтрока = СтруктураФорматаНомера.Добавить();
					НоваяСтрока.Ключ = "СлужебноеПоле";
					НоваяСтрока.Значение = СлужебноеПоле.Представление;
					
					Если Поз3 + СтрДлина(СлужебноеПоле.Значение) - 1 < СтрДлина(КодСлужебногоПоля) Тогда 
						Разделитель = Сред(КодСлужебногоПоля, Поз3 + СтрДлина(СлужебноеПоле.Значение));
						
						НоваяСтрока = СтруктураФорматаНомера.Добавить();
						НоваяСтрока.Ключ = "Разделитель";
						НоваяСтрока.Значение = Разделитель;
						НоваяСтрока.ВходитВСлужебное = СтруктураФорматаНомера.Индекс(НоваяСтрока);
					КонецЕсли;	
					
					НайденоСлужебноеПоле = Истина;
					Прервать;
				КонецЦикла;	
				
				Если Не НайденоСлужебноеПоле Тогда 
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru = 'Неверное служебное поле ""%1""'"),
						КодСлужебногоПоля);
					Возврат Ложь;
				КонецЕсли;	
				
				врФорматНомера = Сред(врФорматНомера, Поз2+1);
			Иначе
				ОписаниеОшибки = СтрШаблон(
					НСтр("ru = 'Не обнаружено окончание служебного поля ""%1""'"),
					врФорматНомера);
				Возврат Ложь;
			КонецЕсли;	
			
		Иначе	
			
			Разделитель = врФорматНомера;
			Если Разделитель <> "" Тогда
				НоваяСтрока = СтруктураФорматаНомера.Добавить();
				НоваяСтрока.Ключ = "Разделитель";
				НоваяСтрока.Значение = Разделитель;
			КонецЕсли;
			врФорматНомера = "";
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

// Возвращает шаблон имени по типу
//
// Параметры
// ТипОбъекта - Перечисления.ТипыОбъектовШаблоновИмениФайла
// ВладелецФайла - ОпределяемыйТип.ВладелецФайла
// ДокументОбъект - СправочникОбъект.ДокументыПредприятия
// РольФайла - СправочникССылка.РолиФайлов
// 
// Возвращаемое значение:
//   СправочникСсылка.ШаблоныИменФайлов
Функция ШаблонИмениПоТипу(ТипОбъекта, ВладелецФайла, ДокументОбъект = Неопределено,
	РольФайла = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипОбъекта <> Перечисления.ТипыОбъектовШаблоновИмениФайла.ДокументыПредприятия Тогда
		Возврат ШаблонИмениПоИзмерениям(ТипОбъекта);
	КонецЕсли;
		
	// далее только для документов
	Вид = Неопределено;
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
		Вид = ДокументОбъект.ВидДокумента;
	Иначе                                                            
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) Тогда
			Вид = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ВидДокумента");	
		КонецЕсли;
	КонецЕсли;	
		
	Шаблон = ШаблонИмениПоИзмерениям(ТипОбъекта, Вид, РольФайла);
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Шаблон;
	КонецЕсли;	 

	Шаблон = ШаблонИмениПоИзмерениям(ТипОбъекта, Вид);
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Шаблон;
	КонецЕсли;	 

	Шаблон = ШаблонИмениПоИзмерениям(ТипОбъекта, , РольФайла);
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Шаблон;
	КонецЕсли;
		 
	Возврат ШаблонИмениПоИзмерениям(ТипОбъекта);

КонецФункции	

// Есть шаблоны имени по виду.
// 
// Параметры:
//  Вид Вид
// 
// Возвращаемое значение:
//  
Функция ЕстьШаблоныИмениПоВиду(Вид) Экспорт
	
	ТипОбъекта = Перечисления.ТипыОбъектовШаблоновИмениФайла.ДокументыПредприятия;
	Шаблон = ШаблонИмениПоИзмерениям(ТипОбъекта, Вид);
	Возврат ЗначениеЗаполнено(Шаблон);
	
КонецФункции

// Возвращает шаблон имени по типу
//
// Параметры
// ТипОбъекта - Перечисления.ТипыОбъектовШаблоновИмениФайла
// Вид - СправочникСсылка.ВидыДокументов
// РольФайла - СправочникСсылка.РолиФайлов
// 
// Возвращаемое значение:
//   СправочникСсылка.ШаблоныИменФайлов
Функция ШаблонИмениПоИзмерениям(ТипОбъекта, Вид = Неопределено, РольФайла = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиШаблоновИмени.ШаблонИмени КАК ШаблонИмени
		|ИЗ
		|	РегистрСведений.НастройкиШаблоновИмени КАК НастройкиШаблоновИмени
		|ГДЕ
		|	НастройкиШаблоновИмени.ТипОбъекта = &ТипОбъекта
		|	И НастройкиШаблоновИмени.ШаблонИмени.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	Запрос.Текст = Запрос.Текст + " И НастройкиШаблоновИмени.Вид = &Вид";
	Если Не ЗначениеЗаполнено(Вид) Тогда
		Вид = Справочники.ВидыДокументов.ПустаяСсылка();
	КонецЕсли;	 
	Запрос.УстановитьПараметр("Вид", Вид);

	Запрос.Текст = Запрос.Текст + " И НастройкиШаблоновИмени.РольФайла = &РольФайла";
 	Если Не ЗначениеЗаполнено(РольФайла) Тогда
		РольФайла = Справочники.РолиФайлов.ПустаяСсылка();
	КонецЕсли;	 
	Запрос.УстановитьПараметр("РольФайла", РольФайла);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ШаблонИмени;

КонецФункции	

// Возвращает шаблон имени по владельцу
//
// Параметры
// ВладелецФайла (определемый тип ВладелецФайлов) - владелец файла
// ФайлСсылка - СправочникСсылка.Файлы
// РольФайла - СправочникСсылка.РолиФайлов 
// 
// Возвращаемое значение:
//   СправочникСсылка.ШаблоныИменФайлов
Функция ШаблонИмениПоВладельцу(ВладелецФайла, ФайлСсылка = Неопределено,
	РольФайла = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ФайлСсылка) И Не ЗначениеЗаполнено(РольФайла) Тогда
		РолиФайла = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ФайлСсылка);
		Если РолиФайла.Количество() <> 0 Тогда
			РольФайла = РолиФайла[0];
		КонецЕсли;	
	КонецЕсли;	
	
	ТипОбъекта = Перечисления.ТипыОбъектовШаблоновИмениФайла.ПустаяСсылка();
	
	Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовШаблоновИмениФайла.ДокументыПредприятия;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(ВладелецФайла) Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовШаблоновИмениФайла.Мероприятия;
	КонецЕсли;	
	
	Шаблон = ШаблонИмениПоТипу(ТипОбъекта, ВладелецФайла, , РольФайла);
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Шаблон;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТипОбъекта) Тогда
		ТипОбъекта = Перечисления.ТипыОбъектов.ПустаяСсылка();
		Шаблон = ШаблонИмениПоТипу(ТипОбъекта, ВладелецФайла, , РольФайла);
	КонецЕсли;	
	
	Возврат Шаблон;
	
КонецФункции	

// Возвращает имена реквизитов например документа по виду документа
//   причем только те, что есть в шаблоне (ах).
//
// Параметры
// ВладелецФайла - СправочникСсылка.ДокументыПредприятия
// ВидДокумента - СправочникСсылка.ВидыДокументов
// 
// Возвращаемое значение:
//   Массив - имена полей
Функция ПолучитьИменаРеквизитовПоВидуДокумента(ВладелецФайла, ВидДокумента) Экспорт
	
	ТипОбъекта = Перечисления.ТипыОбъектовШаблоновИмениФайла.ДокументыПредприятия;
	ИменаПолей = Новый Массив;
	
	РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
	
	Если РолиФайлов.Количество() <> 0 Тогда
		Для Каждого Стр Из РолиФайлов Цикл
			
			ШаблонИмени = ШаблонИмениПоВладельцу(ВладелецФайла, , Стр.Роль);
			Если Не ЗначениеЗаполнено(ШаблонИмени) Тогда
				Продолжить;
			КонецЕсли;
				
			МассивИменЛокальный = ПолучитьИменаРеквизитовПоШаблону(ШаблонИмени, ТипОбъекта, ВидДокумента);
			
			Для Каждого ИмяПоля Из МассивИменЛокальный Цикл
				Если ИменаПолей.Найти(ИмяПоля) = Неопределено Тогда
					ИменаПолей.Добавить(ИмяПоля);
				КонецЕсли;	
			КонецЦикла;	 
			
		КонецЦикла;
	Иначе

		ШаблонИмени = ШаблонИмениПоВладельцу(ВладелецФайла);
		Если Не ЗначениеЗаполнено(ШаблонИмени) Тогда
			Возврат ИменаПолей;
		КонецЕсли;
			
		ИменаПолей = ПолучитьИменаРеквизитовПоШаблону(ШаблонИмени, ТипОбъекта, ВидДокумента);
				
	КонецЕсли;
		
	Возврат ИменаПолей;
	
КонецФункции	

Функция ПолучитьИменаРеквизитовПоШаблону(ШаблонИмени, ТипОбъекта, ВидДокумента)
	
	ФорматИмени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонИмени, "ФорматИмени");
	
	ИменаПолей = Новый Массив;
	
	Если ТипОбъекта = Перечисления.ТипыОбъектовШаблоновИмениФайла.ДокументыПредприятия Тогда
		
		Если СтрНайти(ФорматИмени, "[Наименование]") <> 0 Тогда
			ИменаПолей.Добавить("Наименование");
		КонецЕсли;
			
		Если СтрНайти(ФорматИмени, "[Заголовок]") <> 0 Тогда
			ИменаПолей.Добавить("Заголовок");
		КонецЕсли;
			
		Если СтрНайти(ФорматИмени, "[РегистрационныйНомер]") <> 0 Тогда
			ИменаПолей.Добавить("РегистрационныйНомер");
		КонецЕсли;
			
		Если СтрНайти(ФорматИмени, "[Дата]") <> 0 Тогда
			ИменаПолей.Добавить("ДатаСоздания");
			ИменаПолей.Добавить("ДатаРегистрации");
		КонецЕсли;
			
		Если СтрНайти(ФорматИмени, "[ВидДокумента]") <> 0 Тогда
			ИменаПолей.Добавить("ВидДокумента");
		КонецЕсли;
			
		Если СтрНайти(ФорматИмени, "[ГрифДоступа]") <> 0 Тогда
			ИменаПолей.Добавить("ГрифДоступа");
		КонецЕсли;
			
		Если СтрНайти(ФорматИмени, "[Тематика]") <> 0 Тогда
			ИменаПолей.Добавить("Тематика");
		КонецЕсли;
			
		Если СтрНайти(ФорматИмени, "[Организация]") <> 0 Тогда
			ИменаПолей.Добавить("Организация");
		КонецЕсли;
			
		Если СтрНайти(ФорматИмени, "[Проект]") <> 0 Тогда
			ИменаПолей.Добавить("Проект");
		КонецЕсли;
			
		Если СтрНайти(ФорматИмени, "[ВопросДеятельности]") <> 0 Тогда
			ИменаПолей.Добавить("ВопросДеятельности");
		КонецЕсли;
			
		Если СтрНайти(ФорматИмени, "[НоменклатураДел]") <> 0 Тогда
			ИменаПолей.Добавить("НоменклатураДел");
		КонецЕсли;	
			
		Если СтрНайти(ФорматИмени, "[ДатаРегистрации]") <> 0 Тогда
			ИменаПолей.Добавить("ДатаРегистрации");
		КонецЕсли;	
		
		Если СтрНайти(ФорматИмени, "[Контрагент]") <> 0 Тогда
			ИменаПолей.Добавить("Контрагенты");
		КонецЕсли;	
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовШаблоновИмениФайла.Мероприятия Тогда
		
		Если СтрНайти(ФорматИмени, "[Наименование]") <> 0 Тогда
			ИменаПолей.Добавить("Наименование");
		КонецЕсли;	
		
		Если СтрНайти(ФорматИмени, "[ДатаНачала]") <> 0 Тогда
			ИменаПолей.Добавить("ДатаНачала");
		КонецЕсли;	
	
		Если СтрНайти(ФорматИмени, "[ВидМероприятия]") <> 0 Тогда
			ИменаПолей.Добавить("ВидМероприятия");
		КонецЕсли;	
		
		Если СтрНайти(ФорматИмени, "[ГрифДоступа]") <> 0 Тогда
			ИменаПолей.Добавить("ГрифДоступа");
		КонецЕсли;	
		
		Если СтрНайти(ФорматИмени, "[Организация]") <> 0 Тогда
			ИменаПолей.Добавить("Организация");
		КонецЕсли;	
		
		Если СтрНайти(ФорматИмени, "[Проект]") <> 0 Тогда
			ИменаПолей.Добавить("Проект");
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат ИменаПолей;
	
КонецФункции	

// Формирует имя файла
//
// Параметры
// Шаблон - СправочникСсылка.ШаблоныИменФайлов
// ИмяОригинальногоФайла - Строка
// ВладелецФайла(определемый тип ВладелецФайлов) - владелец файла
// ДокументОбъект - СправочникОбъект.ДокументыПредприятия или Неопределено
// ФайлСсылка - ссылка на файл
// РольФайла - СправочникСсылка.РолиФайлов
// 
// Возвращаемое значение:
//   Строка - сформированное имя файла
Функция СформироватьИмяФайлаПоШаблону(Шаблон, ИмяОригинальногоФайла, ВладелецФайла,
	ДокументОбъект = Неопределено, ФайлСсылка = Неопределено,
	РольФайла = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФорматИмени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "ФорматИмени");
	
	ЗначенияПараметровНомера = Новый Структура;
	
	ЗначенияПараметровНомера.Вставить("ОригинальноеИмя", ИмяОригинальногоФайла);
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла)
		Или ДокументОбъект <> Неопределено Тогда
		
		РеквизитыДокумента = Неопределено;
		
		Если ЗначениеЗаполнено(ВладелецФайла) Тогда
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецФайла, 
				"Заголовок, Наименование, РегистрационныйНомер, ВидДокумента, ГрифДоступа, Тематика, 
				|Организация, Проект, ВопросДеятельности, НоменклатураДел, ДатаСоздания, ДатаРегистрации, Контрагенты");
				
			РеквизитыДокумента.Контрагенты = РеквизитыДокумента.Контрагенты.Выгрузить(); 	
				
			Если ЗначениеЗаполнено(ФайлСсылка) И Не ЗначениеЗаполнено(РольФайла) Тогда
				РолиФайла = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ФайлСсылка);
				Если РолиФайла.Количество() <> 0 Тогда
					РольФайла = РолиФайла[0];
				КонецЕсли;	
				
			КонецЕсли;		
				
		Иначе
			РеквизитыДокумента = ДокументОбъект;
		КонецЕсли;	
		
		ЗначенияПараметровНомера.Вставить("Наименование",	РеквизитыДокумента.Наименование );
		ЗначенияПараметровНомера.Вставить("Заголовок",		РеквизитыДокумента.Заголовок );
		
		ЗначенияПараметровНомера.Вставить("РольФайла",		Строка(РольФайла));
		
		Если РеквизитыДокумента.Контрагенты.Количество() = 1 Тогда
			
			Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыДокумента.Контрагенты[0].Контрагент, "Наименование");
			
			ЗначенияПараметровНомера.Вставить("Контрагент", 
				Контрагент);
		Иначе
			ЗначенияПараметровНомера.Вставить("Контрагент", "");
		КонецЕсли;	

		ЗначенияПараметровНомера.Вставить("ДатаРегистрации",  Формат(РеквизитыДокумента.ДатаРегистрации,"ДФ=dd.MM.yyyy"));
		
		Дата = Неопределено;
		Если ЗначениеЗаполнено(РеквизитыДокумента.ДатаРегистрации) Тогда
			Дата = РеквизитыДокумента.ДатаРегистрации;
		Иначе
			Дата = РеквизитыДокумента.ДатаСоздания;
		КонецЕсли;	
		ЗначенияПараметровНомера.Вставить("Дата", Формат(Дата,"ДФ=dd.MM.yyyy"));
		
		РегистрационныйНомер = "";
		Если ЗначениеЗаполнено(РеквизитыДокумента.РегистрационныйНомер) Тогда
			РегистрационныйНомер = РеквизитыДокумента.РегистрационныйНомер;
		КонецЕсли;	
			
		ЗначенияПараметровНомера.Вставить("РегистрационныйНомер",	РегистрационныйНомер);
		
		ЗначенияПараметровНомера.Вставить("ВидДокумента",		Строка(РеквизитыДокумента.ВидДокумента));
		ЗначенияПараметровНомера.Вставить("ГрифДоступа",		Строка(РеквизитыДокумента.ГрифДоступа));
		ЗначенияПараметровНомера.Вставить("Тематика",			Строка(РеквизитыДокумента.Тематика));
		ЗначенияПараметровНомера.Вставить("Организация",		Строка(РеквизитыДокумента.Организация));
		ЗначенияПараметровНомера.Вставить("Проект",			Строка(РеквизитыДокумента.Проект));
		ЗначенияПараметровНомера.Вставить("ВопросДеятельности",	Строка(РеквизитыДокумента.ВопросДеятельности));
		ЗначенияПараметровНомера.Вставить("НоменклатураДел",	Строка(РеквизитыДокумента.НоменклатураДел));
		
		ИсключитьДублированиеНаименования(ЗначенияПараметровНомера, ФорматИмени);
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(ВладелецФайла) Тогда	
		
		ЗначенияПараметровНомера.Вставить("Наименование",			Строка(ВладелецФайла) );
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецФайла, 
			"Наименование, ДатаНачала, ВидМероприятия, ГрифДоступа, Организация, Проект");
		
		ДатаНачала = РеквизитыДокумента.ДатаНачала;
		ЗначенияПараметровНомера.Вставить("ДатаНачала", Формат(Дата,"ДФ=dd.MM.yyyy"));
		
		ЗначенияПараметровНомера.Вставить("ВидМероприятия",		Строка(РеквизитыДокумента.ВидМероприятия));
		ЗначенияПараметровНомера.Вставить("ГрифДоступа",		Строка(РеквизитыДокумента.ГрифДоступа));
		ЗначенияПараметровНомера.Вставить("Организация",		Строка(РеквизитыДокумента.Организация));
		ЗначенияПараметровНомера.Вставить("Проект",			Строка(РеквизитыДокумента.Проект));
		
	Иначе
		
		ЗначенияПараметровНомера.Вставить("Наименование",			Строка(ВладелецФайла) );
		
	КонецЕсли;	
	
	ОписаниеОшибки = "";
	СтруктураФорматаНомера = ""; 
	
	Если Не РазобратьФорматНомера(ФорматИмени, ОписаниеОшибки, СтруктураФорматаНомера) Тогда
		Пример = "";
		Возврат Пример;
	КонецЕсли;
	
	Пример = СформироватьИмяФайлаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера);
	
	Если ЗначениеЗаполнено(Пример) Тогда
		ПервыйСимвол = Лев(Пример, 1);
		Если ПервыйСимвол <> ВРег(ПервыйСимвол) Тогда
			Пример = ВРег(ПервыйСимвол) + Сред(Пример, 2);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Пример;
	
КонецФункции

// Удаляет из ФорматИмени лишние поля, если есть дублирование в Наименование и ОригинальноеИмя
Процедура ИсключитьДублированиеНаименования(ЗначенияПараметровНомера, ФорматИмени)
	
	Наименование = ЗначенияПараметровНомера["Наименование"];
	ОригинальноеИмя = ЗначенияПараметровНомера["ОригинальноеИмя"];
	
	Если СтрНайти(ФорматИмени, "[ОригинальноеИмя]") <> 0 
		И СтрНайти(ФорматИмени, "[Наименование]") <> 0 
		И ЗначениеЗаполнено(Наименование)
		И ЗначениеЗаполнено(ОригинальноеИмя) Тогда
		
		Если СтрДлина(Наименование) >= СтрДлина(ОригинальноеИмя) Тогда
			
			Если СтрНачинаетсяС(ВРег(Наименование), ВРег(ОригинальноеИмя)) Тогда
				
				// убираем [ОригинальноеИмя] 
				ФорматИмени = СтрЗаменить(ФорматИмени, "[ОригинальноеИмя]", "");
				ФорматИмени = СокрЛП(ФорматИмени);
				
				// но надо переместить [Наименование] в начало
				ФорматИмени = СтрЗаменить(ФорматИмени, "[Наименование]", "");
				ФорматИмени = СокрЛП(ФорматИмени);
				ФорматИмени = "[Наименование]" + " " + ФорматИмени;
				
			КонецЕсли;			
			
		Иначе	
			
			Если СтрНачинаетсяС(ВРег(ОригинальноеИмя), ВРег(Наименование)) Тогда
				// убираем [Наименование] 
				
				ФорматИмени = СтрЗаменить(ФорматИмени, "[Наименование]", "");
				ФорматИмени = СокрЛП(ФорматИмени);
				
			КонецЕсли;			
			
		КонецЕсли;		
		
		Возврат;
		
	КонецЕсли;	
	
	Наименование = ЗначенияПараметровНомера[НСтр("ru = 'Заголовок'")];
	ОригинальноеИмя = ЗначенияПараметровНомера[НСтр("ru = 'ОригинальноеИмя'")];
	
	Если СтрНайти(ФорматИмени, "[ОригинальноеИмя]") <> 0 
		И СтрНайти(ФорматИмени, "[Заголовок]") <> 0 
		И ЗначениеЗаполнено(Наименование)
		И ЗначениеЗаполнено(ОригинальноеИмя) Тогда
		
		Если СтрДлина(Наименование) >= СтрДлина(ОригинальноеИмя) Тогда
			
			Если СтрНачинаетсяС(ВРег(Наименование), ВРег(ОригинальноеИмя)) Тогда
				
				// убираем [ОригинальноеИмя] 
				ФорматИмени = СтрЗаменить(ФорматИмени, "[ОригинальноеИмя]", "");
				ФорматИмени = СокрЛП(ФорматИмени);
				
				// но надо переместить [Наименование] в начало
				ФорматИмени = СтрЗаменить(ФорматИмени, "[Заголовок]", "");
				ФорматИмени = СокрЛП(ФорматИмени);
				ФорматИмени = "[Заголовок]" + " " + ФорматИмени;
				
			КонецЕсли;			
			
		Иначе	
			
			Если СтрНачинаетсяС(ВРег(ОригинальноеИмя), ВРег(Наименование)) Тогда
				// убираем [Наименование] 
				
				ФорматИмени = СтрЗаменить(ФорматИмени, "[Заголовок]", "");
				ФорматИмени = СокрЛП(ФорматИмени);
				
			КонецЕсли;			
			
		КонецЕсли;		
		
		Возврат;
		
	КонецЕсли;	
	
КонецПроцедуры

// Получает имя сканированного файла, вида ДМ-00000012, где ДМ - префикс базы
//
// Параметры:
//  НомерФайла  - Число - целое число, например, 12.
//  ПрефиксБазы - Строка - префикс базы, например, "ДМ".
//  ВладелецФайла(определемый тип ВладелецФайлов) - владелец файла, например документ
//  ИмяФайлаВведенноеВручную - Строка - вручную введенное имя сканированного файла
//  ИмяОригинальногоФайла - Строка - возвращаемый параметр. Там сформированное имя например "Скан01"
//
// Возвращаемое значение:
//  Строка - имя сканированного файла, например, "ДМ-00000012".
//
Функция ИмяСканированногоФайла(НомерФайла, ПрефиксБазы, ВладелецФайла,
	ИмяФайлаВведенноеВручную = "", ИмяОригинальногоФайла = "") Экспорт
	
	ИмяФайла = "";
	
	Если ЗначениеЗаполнено(ИмяФайлаВведенноеВручную) Тогда
		ИмяОригинальногоФайла = ИмяФайлаВведенноеВручную;
	Иначе	
		УстановитьПривилегированныйРежим(Истина);
		ПрефиксФайлаСкана = Константы.ПрефиксФайлаСкана.Получить();
		Разрядность = Константы.РазрядностьНомераФайлаСкана.Получить();
		ИмяОригинальногоФайла = ПрефиксФайлаСкана + Формат(НомерФайла, "ЧЦ=" + Разрядность + "; ЧВН=; ЧГ=");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
	
	Шаблон = ШаблонИмениПоВладельцу(ВладелецФайла);
	
	Если Шаблон = Неопределено Тогда  // не нашли шаблона
	
		Если НЕ ПустаяСтрока(ПрефиксБазы) Тогда
			ИмяФайла = ПрефиксБазы + "-";
		КонецЕсли;
		
		ИмяФайла = ИмяФайла + ИмяОригинальногоФайла;
		
	Иначе
		
		ИмяФайла = СформироватьИмяФайлаПоШаблону(Шаблон, ИмяОригинальногоФайла, ВладелецФайла);
		
		
	КонецЕсли;
	
	ИмяФайла =
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, "_");
	
	Возврат ИмяФайла;
	
КонецФункции	

// Получает имя файла по шаблону документа
//
// Параметры:
//  ВладелецФайла(определемый тип ВладелецФайлов) - владелец файла, например документ - может быть пустым.
//  ДокументОбъект - реквизит Объект из карточки документа
//  ИмяОригинальногоФайла - Строка - имя файла в шаблоне документа
//  ФайлСсылка - ссылка на файл
//  РольФайла = СправочникСсылка.РолиФайлов
//
// Возвращаемое значение:
//  Строка - сформированное имя файла
//
Функция ИмяФайлаПоШаблонуДокумента(ВладелецФайла, ДокументОбъект, ИмяОригинальногоФайла,
	ФайлСсылка = Неопределено, РольФайла = Неопределено) Экспорт
	
	ИмяФайла = "";
	
	ТипОбъекта = Перечисления.ТипыОбъектовШаблоновИмениФайла.ДокументыПредприятия;
	Шаблон = ШаблонИмениПоТипу(ТипОбъекта, ВладелецФайла, ДокументОбъект, РольФайла);
	
	Если Шаблон = Неопределено Тогда  // не нашли шаблона
	
		ИмяФайла = ИмяФайла + ИмяОригинальногоФайла;
		
	Иначе
		
		ИмяФайла 
			= СформироватьИмяФайлаПоШаблону(Шаблон, ИмяОригинальногоФайла, 
				ВладелецФайла, ДокументОбъект, ФайлСсылка, РольФайла);
		
		
	КонецЕсли;
	
	ИмяФайла =
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, " ");
	
	Возврат ИмяФайла;
	
КонецФункции	

#КонецОбласти

// Пишет в РС СведенияОФайлахДокументооборот поле  ОригинальноеИмя
//
// Параметры:
//  ФайлСсылка - ссылка на файл
//  ОригинальноеИмя - Строка - имя сканированного файла "Скан01" или оригинальное имя файла скажем "Проект"
//
Процедура ЗаписатьОригинальноеИмяФайла(ФайлСсылка, ОригинальноеИмя) Экспорт
	
	РегистрыСведений.СведенияОФайлахДокументооборот.УстановитьПризнак(
		ФайлСсылка, "ОригинальноеИмя", ОригинальноеИмя);
		
КонецПроцедуры		

// Пишет в РС СведенияОФайлахДокументооборот поле  ПорядковыйНомерВложения
//
// Параметры:
//  ФайлСсылка - СправочникССылка.Файлы
//  ПорядковыйНомерВложения - Число
//
Процедура ЗаписатьПорядокФайла(ФайлСсылка, ПорядковыйНомерВложения) Экспорт
	
	РегистрыСведений.СведенияОФайлахДокументооборот.УстановитьПризнак(
		ФайлСсылка, "ПорядковыйНомерВложения", ПорядковыйНомерВложения);
		
КонецПроцедуры		

// Переименует файлы по шаблону при изменении реквизитов владельца, скажем Наименование
//  может быть вызвано из фонового задания в ДлительныеОперации
//
// Параметры:
//  Параметры -  Структура(Ссылка (владелец файлов), ПытатьсяПереименоватьДальше (Булево))
//  КодВозврата  - не используется
//
Процедура ПереименоватьФайлыПоШаблону(Параметры, КодВозврата) Экспорт
	
	ВладелецФайла = Параметры.Ссылка;
	
	ПытатьсяПереименоватьДальше = Ложь;
	Если Параметры.Свойство("ПытатьсяПереименоватьДальше") Тогда
		ПытатьсяПереименоватьДальше = Параметры.ПытатьсяПереименоватьДальше;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.ТекущаяВерсия.ТипХраненияФайла КАК ТекущаяВерсияТипХраненияФайла,
		|	Файлы.ТекущаяВерсияТом КАК ТекущаяВерсияТом,
		|	Файлы.ТекущаяВерсияПутьКФайлу КАК ТекущаяВерсияПутьКФайлу,
		|	СведенияОФайлахДокументооборот.ОригинальноеИмя КАК ОригинальноеИмя,
		|	ЛОЖЬ КАК ФайлОбработан
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
		|		ПО (СведенияОФайлахДокументооборот.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|	И НЕ СведенияОФайлахДокументооборот.Файл ЕСТЬ NULL
		|	И СведенияОФайлахДокументооборот.ОригинальноеИмя <> """"
		|	И (Файлы.Редактирует = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка)
		|			ИЛИ Файлы.Редактирует = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяССылка)
		|			ИЛИ Файлы.Редактирует = НЕОПРЕДЕЛЕНО)";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	
	ДатаНачала = ТекущаяДата();
	
	Пока Истина Цикл
		
		Для Каждого СтрокаФайлов Из ТаблицаФайлов Цикл
			
			ФайлСсылка = СтрокаФайлов.Ссылка;
			
			Если СтрокаФайлов.ФайлОбработан = Истина Тогда
				Продолжить;
			КонецЕсли;	
			
			РольФайла = Неопределено;
			Если ЗначениеЗаполнено(ФайлСсылка) Тогда
				РолиФайла = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ФайлСсылка);
				Если РолиФайла.Количество() <> 0 Тогда
					РольФайла = РолиФайла[0];
				КонецЕсли;	
			КонецЕсли;	
			
			ДанныеДляВосстановленияФайловВТоме = Новый Структура("СтарыйПуть, НовыйПуть");
			
			Попытка     
				
				СтароеНаименование = СтрокаФайлов.Наименование;
				ОригинальноеИмя = СтрокаФайлов.ОригинальноеИмя;
				
				НовоеНаименование = ИмяФайлаПоШаблонуДокумента(ВладелецФайла, Неопределено, 
					ОригинальноеИмя, ФайлСсылка, РольФайла);
				Если НовоеНаименование <> СтароеНаименование Тогда

					НачатьТранзакцию();

					ЗаблокироватьДанныеДляРедактирования(СтрокаФайлов.Ссылка);
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Справочник.Файлы");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ФайлСсылка);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					Блокировка.Заблокировать();
					
					ФайлОбъект = СтрокаФайлов.Ссылка.ПолучитьОбъект();
					
					ФайлОбъект.ПолноеНаименование = НовоеНаименование;
					ФайлОбъект.Наименование = НовоеНаименование;
					
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЭтоПереименование", Истина);
					
					ФайлОбъект.Записать();
					
					// в кеше стереть
					УдалитьИзРегистраЗаписиДляВсехКомпьютеров(ФайлОбъект.ТекущаяВерсия);
					
					Если СтрокаФайлов.ТекущаяВерсияТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
						
						ПереименоватьФайлВерсииНаДиске(ФайлОбъект.ТекущаяВерсия, СтароеНаименование, НовоеНаименование, Неопределено,
							ДанныеДляВосстановленияФайловВТоме);
			
					КонецЕсли;	
					
					ЗафиксироватьТранзакцию();
					ЗафиксироватьТранзакциюПереименованияДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме);
					
					РазблокироватьДанныеДляРедактирования(СтрокаФайлов.Ссылка);
					
				КонецЕсли;
					
				СтрокаФайлов.ФайлОбработан = Истина;
				
			Исключение	
				
				ОтменитьТранзакцию();
				// с файлами в томе ничего делать не надо - их не успели переименовать еще.
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ПереименоватьФайлыПоШаблону'"),
					УровеньЖурналаРегистрации.Ошибка,
					,
					ФайлСсылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;	
			
		КонецЦикла;	
		
		Если ПытатьсяПереименоватьДальше = Ложь Тогда
			Прервать;
		КонецЕсли;	
		
		ВсеОбработаны = Истина;
		Для Каждого СтрокаФайлов Из ТаблицаФайлов Цикл
			
			Если СтрокаФайлов.ФайлОбработан = Ложь Тогда
				ВсеОбработаны = Ложь;
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если ВсеОбработаны Тогда
			Прервать;
		КонецЕсли;	
		
		Если ТекущаяДата() > ДатаНачала + 300 Тогда //  5 минут
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

// Переименует файлы по шаблону при изменении реквизитов владельца, скажем Наименование
//  может быть вызвано из фонового задания в ДлительныеОперации
//
// Параметры:
//  ФайлСсылка - СправочникССылка.Файлы
//  ВладелецФайла - владелец файла
//  ОригинальноеИмя - Строка (в РС, имя участвующее в формирвоании по шаблону) 
//  Наименование - Строка 
//  ТипХраненияФайла - тип хранения файлов
//
Процедура ПереименоватьОдинФайлПоШаблону(ФайлСсылка,
	ВладелецФайла, ОригинальноеИмя, Наименование, ТипХраненияФайла) Экспорт
	
	Если Не ЗначениеЗаполнено(ОригинальноеИмя) Тогда
		Возврат; //  файл не по шаблону - ничего не делаем
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	РольФайла = Неопределено;
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда
		РолиФайла = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ФайлСсылка);
		Если РолиФайла.Количество() <> 0 Тогда
			РольФайла = РолиФайла[0];
		КонецЕсли;	
	КонецЕсли;	
	
	ДанныеДляВосстановленияФайловВТоме = Новый Структура("СтарыйПуть, НовыйПуть");
	
	Попытка
	
		СтароеНаименование = Наименование;
		
		НовоеНаименование = ИмяФайлаПоШаблонуДокумента(ВладелецФайла, Неопределено, 
			ОригинальноеИмя, ФайлСсылка, РольФайла);
		Если НовоеНаименование <> СтароеНаименование Тогда
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Файлы");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ФайлСсылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
			
			ФайлОбъект.ПолноеНаименование = НовоеНаименование;
			ФайлОбъект.Наименование = НовоеНаименование;  
			
			ФайлОбъект.ДополнительныеСвойства.Вставить("ЭтоПереименование", Истина);
			
			ФайлОбъект.Записать();
			
			// в кеше стереть
			УдалитьИзРегистраЗаписиДляВсехКомпьютеров(ФайлОбъект.ТекущаяВерсия);
			
			Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				ПереименоватьФайлВерсииНаДиске(ФайлОбъект.ТекущаяВерсия, СтароеНаименование, 
					НовоеНаименование, Неопределено,
					ДанныеДляВосстановленияФайловВТоме);
	
			КонецЕсли;	
			
			ЗафиксироватьТранзакцию();
			ЗафиксироватьТранзакциюПереименованияДляФайловВТоме(ДанныеДляВосстановленияФайловВТоме);
				
			
		КонецЕсли;
			
	Исключение	
		
		ОтменитьТранзакцию();
		// с файлами в томе ничего делать не надо - их не успели переименовать еще.
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ПереименоватьФайлыПоШаблону'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ФайлСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;	
	
КонецПроцедуры	

// Переименует файлы по шаблону при изменении реквизитов владельца, скажем Наименование
//   - отложенно  - поставит в очередь.
//
// Параметры:
//  ВладелецФайла -  например документ
//
Процедура ПереименоватьФайлыПоШаблонуОтложенно(ВладелецФайла) Экспорт
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) Тогда
		Возврат; // тут не делаем
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|	И (Файлы.Редактирует = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка)
		|	ИЛИ Файлы.Редактирует = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяССылка)
		|	ИЛИ Файлы.Редактирует = НЕОПРЕДЕЛЕНО)";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	ПодчиненныеФайлы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Файл Из ПодчиненныеФайлы Цикл 
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			Метаданные.Справочники.Файлы.ПолноеИмя(),
			Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка(),
			Файл);
	КонецЦикла;		
	
КонецПроцедуры	

// После успешного завершения переименует файлы
Процедура ЗафиксироватьТранзакциюПереименованияДляФайловВТоме(ДанныеВосстановления) 
	 
	СтарыйПуть = ДанныеВосстановления.СтарыйПуть;
	НовыйПуть = ДанныеВосстановления.НовыйПуть;
	
	Если  ЗначениеЗаполнено(НовыйПуть) И ЗначениеЗаполнено(СтарыйПуть) Тогда
		ПереместитьФайл(СтарыйПуть, НовыйПуть); 	
	КонецЕсли;	
	
КонецПроцедуры

// Переименует файл, если нужно, при отмене захвата
Процедура ПереименоватьФайлПриОтменеЗахвата(ДанныеФайла)
	
	ШаблонИмени = ШаблонИмениПоВладельцу(ДанныеФайла.Владелец, ДанныеФайла.Ссылка);
	Если ЗначениеЗаполнено(ШаблонИмени) Тогда
		
		ОригинальноеИмя = РегистрыСведений.СведенияОФайлахДокументооборот.ПолучитьПризнак(
			ДанныеФайла.Ссылка, "ОригинальноеИмя");
		
		Если ЗначениеЗаполнено(ОригинальноеИмя) Тогда
			
			РольФайла = Неопределено;
			Если ЗначениеЗаполнено(ДанныеФайла.Ссылка) Тогда
				РолиФайла = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ДанныеФайла.Ссылка);
				Если РолиФайла.Количество() <> 0 Тогда
					РольФайла = РолиФайла[0];
				КонецЕсли;	
			КонецЕсли;	
			
			СтароеНаименование = ДанныеФайла.ПолноеНаименованиеВерсии;
			НовоеНаименование = ИмяФайлаПоШаблонуДокумента(ДанныеФайла.Владелец, Неопределено, 
				ОригинальноеИмя, ДанныеФайла.Ссылка, РольФайла);
			
			Если НовоеНаименование <> СтароеНаименование Тогда
				
				ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
			
				ФайлОбъект.ПолноеНаименование = НовоеНаименование;
				ФайлОбъект.Наименование = НовоеНаименование;
				
				ФайлОбъект.Записать();
				
				Если ДанныеФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
					
					ПереименоватьФайлВерсииНаДиске(ФайлОбъект.ТекущаяВерсия, 
						СтароеНаименование, НовоеНаименование);
		
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры	

Функция ЗапуститьФоновоеПереименованиеФайлов(Ссылка, УникальныйИдентификатор, 
	ЗапущеноФоновоеПереименованиеФайлов) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'ФоновоеПереименованиеФайлов'");
	ВыполняемыйМетод = "РаботаСФайламиВызовСервера.ПереименоватьФайлыПоШаблону";
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	СтруктураПараметров.Вставить("ПытатьсяПереименоватьДальше", Истина);
	
	Попытка
		ВремяОжидания = 0.1;
		
		РезультатФоновогоЗадания = ОбщегоНазначенияДокументооборот.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			ВыполняемыйМетод,
			СтруктураПараметров, 
			НаименованиеЗадания,
			,
			ВремяОжидания);
			
		ЗапущеноФоновоеПереименованиеФайлов = Истина;
	
	Исключение
		ПроверкаЗавершиласьСОшибками = Истина;
	КонецПопытки;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

Функция ЗаданиеВыполнено(ИдентификаторЗадания) Экспорт
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

Процедура ЗаписатьРольФайла(Файл, Роль) Экспорт
	
	РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(Файл, Роль);
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");
	Порядок = МаксимальныйПорядокФайла(ВладелецФайла, Роль);
	Порядок = Порядок + 1;
	ЗаписатьПорядокФайла(Файл, Порядок);
	
КонецПроцедуры

// Функция возвращает соответствие структур, содержащих различные сведения о Файле и версии.
//
// Параметры:
//  ВерсииФайлов       - Массив                  - Версии файлов.
//  ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - структура с данными файла. См. ПолучитьДанныеФайла.
//
Функция ДанныеВерсийФайловДляОткрытия(Знач ВерсииФайлов, Знач ИдентификаторФормы) Экспорт
	
	ДанныеВерсийФайлов = Новый Соответствие;
	Для Каждого ВерсияФайла Из ВерсииФайлов Цикл
		ДанныеФайла = ДанныеФайлаДляОткрытия(Неопределено, ВерсияФайла, ИдентификаторФормы);
		ДанныеВерсийФайлов.Вставить(ВерсияФайла, ДанныеФайла);
	КонецЦикла;
	
	Возврат ДанныеВерсийФайлов;
	
КонецФункции

// Заполним файлы (не только поля регистрации, а все поля)
// 
// Параметры:
// 	ВладелецФайла - ОпределяемыйТип.ВладелецФайлов
// 	
Процедура ЗаполнитьФайлыDocxOdt(ВладелецФайла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
	|			И (СлужебныеФайлыДокументов.Документ = &ВладелецФайла)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ
	|	И СлужебныеФайлыДокументов.Документ ЕСТЬ NULL
	|	И Файлы.Зашифрован = ЛОЖЬ
	|	И Файлы.ПодписанЭП = ЛОЖЬ";

	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ФайлСсылка = Выборка.Ссылка;
		Если НРег(Выборка.Расширение) = "docx" Или НРег(Выборка.Расширение) = "odt" Тогда
			АвтозаполнениеШаблоновФайловВызовСервера.ПерезаполнитьФайлПоДаннымВладельцаПриНеобходимости(
				ФайлСсылка, Истина);           
		КонецЕсли;	

	КонецЦикла;
	
КонецПроцедуры

// Вернет массив файлов
// 
// Параметры:
// 	ВладелецФайла - ОпределяемыйТип.ВладелецФайлов
// 	
// Возвращаемое значение:
// Массив из СправочникССылка.Файлы
// 	
Функция МассивФайловДляЗаполнения(ВладелецФайла) Экспорт
	
	МассивФайлов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Владелец = Файлы.Ссылка)
	|		И (СлужебныеФайлыДокументов.Документ = &ВладелецФайла)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ
	|	И СлужебныеФайлыДокументов.Документ ЕСТЬ NULL
	|	И Файлы.Зашифрован = ЛОЖЬ
	|	И Файлы.ПодписанЭП = ЛОЖЬ";

	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивФайлов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

// Очищает файлы в локал кэше. Например после прерывания обработки
//  
// Параметры
// ВладелецФайла - ОпределяемыйТип.ВладелецФайла-  например документ
//
Процедура ОчиститьФайлыВЛокалКэше(ВладелецФайла) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	МассивВерсийФайлов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Файлы.ТекущаяВерсия КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ";

	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивВерсийФайлов.Добавить(Выборка.Ссылка);
	КонецЦикла;

	Для Каждого Версия Из МассивВерсийФайлов Цикл

		// в кеше стереть
		УдалитьИзРегистраЗаписиДляВсехКомпьютеров(Версия);

	КонецЦикла;

КонецПроцедуры	

// Создать запись очереди превью.
// 
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы - Файл ссылка
Процедура СоздатьЗаписьОчередиПревью(ФайлСсылка, РасширениеБезТочки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьПредпросмотрФайловОбщая = ПолучитьФункциональнуюОпцию("ИспользоватьПредпросмотрФайлов");
	Если Не ИспользоватьПредпросмотрФайловОбщая Тогда
		Возврат;
	КонецЕсли;
		
	ГотовитьПредставленияФайловДляПредпросмотраНаКлиенте 
		= Константы.ГотовитьПредставленияФайловДляПредпросмотраНаКлиенте.Получить();
	Если Не ГотовитьПредставленияФайловДляПредпросмотраНаКлиенте Тогда
		Возврат;
	КонецЕсли;		
	
	Если Не ОбработкаОчередиЗаданийСервер.ИспользоватьЗадания() Тогда
		Возврат;
	КонецЕсли;		
	
	Если Не Константы.ВыполнятьЗаданияНаКлиенте.Получить() Тогда
		Возврат;
	КонецЕсли;	 	
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла");
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла)
		И Не ДелопроизводствоКлиентСервер.ЭтоМероприятие(ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;	
	
	МастерФайл = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьМастерФайл(ВладелецФайла, ФайлСсылка);
	Если ЗначениеЗаполнено(МастерФайл) Тогда
		Возврат;  // значит ФайлСсылка - служебный, его не надо в очередь. 
	КонецЕсли;	
	
	Если ОбзорФайловКлиентСервер.ЭтоФайлСПодготовкойНаКлиенте(РасширениеБезТочки) Тогда	
		Если ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеСформироватьПревьюФайла(ФайлСсылка) Тогда
			РегистрыСведений.ПредпросмотрФайлов.Удалить(ФайлСсылка);
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры		

// Максимальный порядок файла.
// 
// Параметры:
//  ВладелецФайла - СправочникСсылка.ДокументыПредприятия - Владелец файла
//  РольФайла - СправочникСсылка.РолиФайлов, Неопределено - Роль файла или пусто
// 
// Возвращаемое значение:
// 	Число
//  
Функция МаксимальныйПорядокФайла(ВладелецФайла, РольФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	ЕСТЬNull(СведенияОФайлахДокументооборот.ПорядковыйНомерВложения, 0) КАК ПорядковыйНомерВложения
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
	|		ПО СведенияОФайлахДокументооборот.Файл = Файлы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
	|	И Файлы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.РолиФайлов")); 
	ТаблицаФайлов.Колонки.Добавить("РольФайла", Новый ОписаниеТипов(Массив));

	// Прочитаем РолиФайловДокументов для массива файлов
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РолиФайловДокументов.Файл КАК Файл,
		|	РолиФайловДокументов.Роль КАК Роль
		|ИЗ
		|	РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
		|ГДЕ
		|	РолиФайловДокументов.Файл В(&Файлы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файл";
	Запрос.УстановитьПараметр("Файлы", ТаблицаФайлов.ВыгрузитьКолонку("Ссылка"));
	ТаблРоли = Запрос.Выполнить().Выгрузить();
	
	МаксимальныйПорядок = 0;

	Для Каждого ФайлыПисьмаСтрока Из ТаблицаФайлов Цикл
		
		ПараметрыОтбора = Новый Структура("Файл", ФайлыПисьмаСтрока.Ссылка);
		СтрокиРолей = ТаблРоли.НайтиСтроки(ПараметрыОтбора);

		Если СтрокиРолей.Количество() <> 0 Тогда
			
			ТекРоль = СтрокиРолей[0].Роль;
			ФайлыПисьмаСтрока.РольФайла = ТекРоль;
			
		КонецЕсли;	
		
		Если (ЗначениеЗаполнено(РольФайла) И ЗначениеЗаполнено(ФайлыПисьмаСтрока.РольФайла)
			И ФайлыПисьмаСтрока.РольФайла = РольФайла)
			Или (Не ЗначениеЗаполнено(РольФайла) И Не ЗначениеЗаполнено(ФайлыПисьмаСтрока.РольФайла)) Тогда
				МаксимальныйПорядок = Макс(МаксимальныйПорядок, ФайлыПисьмаСтрока.ПорядковыйНомерВложения);
		КонецЕсли;	

	КонецЦикла;
	
	Возврат МаксимальныйПорядок;
	
КонецФункции	

// Максимальный порядок файла.
// 
// Параметры:
//  ВладелецФайла - СправочникСсылка.ДокументыПредприятия - Владелец файла
// 
// Возвращаемое значение:
// 	Число
//  
Функция МаксимальныйПорядокФайлаБезРоли(ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	ЕСТЬNull(СведенияОФайлахДокументооборот.ПорядковыйНомерВложения, 0) КАК ПорядковыйНомерВложения
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
	|		ПО СведенияОФайлахДокументооборот.Файл = Файлы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
	|	И Файлы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	
	МаксимальныйПорядок = 0;

	Для Каждого ФайлыПисьмаСтрока Из ТаблицаФайлов Цикл
		
		МаксимальныйПорядок = Макс(МаксимальныйПорядок, ФайлыПисьмаСтрока.ПорядковыйНомерВложения);

	КонецЦикла;
	
	Возврат МаксимальныйПорядок;
	
КонецФункции	

// Сортирует файлы по имени для шаблона вида документа.
// 
// Параметры:
//  Шаблон - СправочникССылка.ШаблоныДокументов
Процедура СортироватьФайлыПоИмениДляШаблонаВидаДокумента(Шаблон) Экспорт
	
	МассивФайлов = ПолучитьВсеПодчиненныеФайлы(Шаблон, Ложь);
		
	Порядок = 0;	
	Для Каждого Файл Из МассивФайлов Цикл
		
		ЗаписатьПорядокФайла(Файл, Порядок);
		Порядок = Порядок + 1;
		
	КонецЦикла;	 	
	
КонецПроцедуры	

// Сортировать файлы по имени для документа.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия
//  РольФайла - СправочникСсылка.РолиФайлов
Процедура СортироватьФайлыПоИмениДляДокумента(Документ, РольФайла) Экспорт
	
	ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
	Роли = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
	
	Если Роли.Количество() = 0 Тогда //  в виде документа нет ролей
	
		МассивФайлов = ПолучитьВсеПодчиненныеФайлы(Документ, Ложь);
			
		Порядок = 0;	
		Для Каждого Файл Из МассивФайлов Цикл
			
			ЗаписатьПорядокФайла(Файл, Порядок);
			Порядок = Порядок + 1;
			
		КонецЦикла;
			 	
	Иначе
				 	
		МассивФайлов = ПолучитьВсеПодчиненныеФайлы(Документ, Ложь);
			
		Порядок = 0;	
		Для Каждого Файл Из МассивФайлов Цикл
			
			ТекРоли = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(Файл);
			РольФайлаТекущая = Неопределено;
				
			Если ТекРоли.Количество() <> 0 Тогда
				РольФайлаТекущая = ТекРоли[0];
			КонецЕсли;	
				
			Если (РольФайлаТекущая = РольФайла)
				Или (Не ЗначениеЗаполнено(РольФайлаТекущая) И Не ЗначениеЗаполнено(РольФайла)) Тогда
					
				ЗаписатьПорядокФайла(Файл, Порядок);
				Порядок = Порядок + 1;
				
			КонецЕсли;	
			
		КонецЦикла;
						 	
	КонецЕсли;
	
КонецПроцедуры	

// Вставить регистрационный штамп и штрихкод.
// 
// Параметры:
//  ВладелецФайла - СправочникСсылка.ДокументыПредприятия
//  Файл  - СправочникСсылка.Файлы -
//  НастройкиРегНомерИШтрихкод  - Структура:
//    * НастройкиРегНомера - См. ШтрихкодированиеКлиентСервер.НовыеНастройкиРегНомера
//    * НастройкиШтрихкода - См. ШтрихкодированиеКлиентСервер.НовыеНастройкиШтрихкода
Процедура ВставитьРегистрационныйШтампИШтрихкод(ВладелецФайла, Файл, НастройкиРегНомерИШтрихкод) Экспорт
	
	// удалим визуализацию.
	РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
		ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);

	РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
		ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.Штрихкод);

	РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
		ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации);
	
	РегистрыСведений.ПредпросмотрФайлов.Удалить(Файл);
	
	// Создаем служебные файлы РегистрационныйШтамп и Штрихкод
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
		
		ВставкаВPdf = Истина;
		ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(
			ВладелецФайла, Ложь, , ВставкаВPdf);
		Если ДанныеОШтрихкоде.Свойство("СообщениеОбОшибке") Тогда
			ТекстСообщения = ДанныеОШтрихкоде.СообщениеОбОшибке;
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	
		ДвДанныеШтрихкода = ДанныеОШтрихкоде.ДвоичныеДанныеИзображения;
		АдресОтметки = ПоместитьВоВременноеХранилище(ДвДанныеШтрихкода);
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = АдресОтметки;
		СведенияОФайле.ИмяБезРасширения = "Штрихкод";
		СведенияОФайле.РасширениеБезТочки = "png";
		СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
		СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
		СведенияОФайле.Размер = ДвДанныеШтрихкода.Размер();
		СведенияОФайле.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		СведенияОФайле.Вставить("ДобавлениеРегШтампа", Истина);
	
		ФайлВизуализацияШтрихкод = СоздатьФайлСВерсией(ВладелецФайла, СведенияОФайле);
		
		РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
			ВладелецФайла, 
			Файл, // на каждый файл
			Перечисления.ОтношенияСлужебныхФайлов.Штрихкод,
			ФайлВизуализацияШтрихкод);
			
	КонецЕсли;
	
	СоздатьФайлРегШтампа(
		ВладелецФайла,
		Файл,
		НастройкиРегНомерИШтрихкод.НастройкиРегНомера,
		МЭДОСтруктурыДанных.НовыйПоложениеИзображения(Неопределено, 0, 0, 0, 0));
	
КонецПроцедуры		

// Создать файл рег штампа. С учетом пользовательских настроек расположениея Если штамп перед этим уже был и у него было
// задано положение, то штамп поставлен на то же место.
// 
// Параметры:
//  ВладелецФайла - СправочникСсылка.ДокументыПредприятия -
//  Файл - СправочникСсылка.Файлы -
//  НастройкиРегНомера - См. ШтрихкодированиеКлиентСервер.НовыеНастройкиРегНомера
//  ПоложениеСтарого - См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
//  РегистрационныйНомер - Строка -
Процедура СоздатьФайлРегШтампа(ВладелецФайла, Файл, НастройкиРегНомера, ПоложениеСтарого, РегистрационныйНомер = "")

	СведенияОРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецФайла, 
		"РегистрационныйНомер, ДатаРегистрации");
		
	Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда
		СведенияОРегистрации.РегистрационныйНомер = РегистрационныйНомер;
		СведенияОРегистрации.ДатаРегистрации = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЭтоВходящийДокумент = ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ВладелецФайла);
	СведенияОРегистрации.Вставить("ЭтоВходящийДокумент", ЭтоВходящийДокумент);			
	
	ПутьФайлаРегШтампа = Делопроизводство.СоздатьРегистрационныйШтамп(СведенияОРегистрации);

	ДвоичныеДанныеШтампа = Новый ДвоичныеДанные(ПутьФайлаРегШтампа);
	АдресОтметки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеШтампа);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресОтметки;
	СведенияОФайле.ИмяБезРасширения = "Рег штамп";
	СведенияОФайле.РасширениеБезТочки = "png";
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	СведенияОФайле.Размер = ДвоичныеДанныеШтампа.Размер();
	СведенияОФайле.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	СведенияОФайле.Вставить("ДобавлениеРегШтампа", Истина);

	ФайлРегШтамп = СоздатьФайлСВерсией(ВладелецФайла, СведенияОФайле);
	
	Положение = Неопределено;
	Если МЭДО.ЭтоЗаполненноеПоложениеИзображения(ПоложениеСтарого) Тогда
		// Штамп существовал ранее и он изменился (например сменился номер):
		Положение = ПоложениеСтарого;
	Иначе
		// Изменились пользовательские настройки и идет вызов из формы выбора варианта настроек:
		СтраницаВставки = 1;
		Если ЗначениеЗаполнено(НастройкиРегНомера.СтраницаВставки) Тогда
			СтраницаВставки = НастройкиРегНомера.СтраницаВставки;
		КонецЕсли;
		ВсеРазмеры = РаботаСКартинками.ВсеРазмерыКартинки(ДвоичныеДанныеШтампа);
		Высота = 6;
		Ширина = ?(ВсеРазмеры.Нулевые, 1, Окр(ВсеРазмеры.ШиринаПикс / ВсеРазмеры.ВысотаПикс * Высота)); // в пропорции к высоте.
		Размеры = РаботаСКартинками.НовыйРазмеры(Ширина, Высота);
		Координаты = РаботаСКартинками.КоординатыПоНастройкам(НастройкиРегНомера, Размеры, 0);
		Положение = МЭДОСтруктурыДанных.НовыйПоложениеИзображения(
			СтраницаВставки, Координаты.Слева, Координаты.Сверху, Ширина, Высота);
	КонецЕсли;
	
	
	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
		ВладелецФайла, 
		Файл, // по файлу, а не на весь документ
		Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации,
		ФайлРегШтамп,
		Положение);
	
КонецПроцедуры	

// Обновить pdf файлы при смене рег номера.
// Очистит файлы визуализации, а также файлы регномера (и пересоздаст их. если РегистрационныйНомер не пуст)
// 
// Параметры:
//  ВладелецФайла - СправочникССылка.ДокументыПредприятия
//  РегистрационныйНомер - Строка
Процедура ОбновитьPdfФайлыПриСменеРегНомера(ВладелецФайла, РегистрационныйНомер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// получим pdf файлы без пометки удаления
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И Файлы.ПометкаУдаления = ЛОЖЬ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
		
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);	
	
	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из ТаблицаФайлов Цикл
		
		Файл = Стр.Ссылка;
		
		Если НРег(Стр.Расширение) = "pdf"
			Или НРег(Стр.Расширение) = "docx"
			Или НРег(Стр.Расширение) = "odt" Тогда

			РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
				ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
			РегистрыСведений.ПредпросмотрФайлов.Удалить(Файл);	
			
		КонецЕсли;
		
		Если НРег(Стр.Расширение) = "pdf" Тогда
			
			ПоложениеСтарого = Неопределено;
			ФайлРегистрационныйШтамп = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
				ВладелецФайла,
				Файл,
				Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации,
				ПоложениеСтарого);
				
			Если ЗначениеЗаполнено(ФайлРегистрационныйШтамп) Тогда
				
				РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
					ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации);
					
				Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда
					
					Если ПоложениеСтарого = Неопределено Тогда
						// В старом штампе нет "Положения", положение возьмется из персональных настроек (предыдущих)
						ПоложениеСтарого = МЭДОСтруктурыДанных.НовыйПоложениеИзображения(Неопределено, 0, 0, 0, 0);
					КонецЕсли;
					
					СоздатьФайлРегШтампа(
						ВладелецФайла,
						Файл,
						ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера(),
						ПоложениеСтарого,
						РегистрационныйНомер);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	 
	
КонецПроцедуры

Функция ВВидеЭтаРольТолькоОдинФайл(РолиФайлов, Роль)
	
	Для Каждого ОписаниеРоли Из РолиФайлов Цикл
		Если ОписаниеРоли.Роль = Роль И ОписаниеРоли.ТолькоОдинФайл Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

Функция ВВидеЭтаРольОбязательная(РолиФайлов, Роль)
	
	Для Каждого ОписаниеРоли Из РолиФайлов Цикл
		Если ОписаниеРоли.Роль = Роль И ОписаниеРоли.Обязательная Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

Функция ЧислоФайловВРоли(ВладелецФайла, РольФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// найдем число файлов в роли
	МассивФайловЛокальный = ПолучитьВсеПодчиненныеФайлы(ВладелецФайла, Ложь);
	
	// Прочитаем РолиФайловДокументов для массива файлов
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ЧислоФайлов
		|ИЗ
		|	РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
		|ГДЕ
		|	РолиФайловДокументов.Файл В (&Файлы)
		|	И РолиФайловДокументов.Роль = &Роль";
		
	Запрос.УстановитьПараметр("Файлы", МассивФайловЛокальный);
	Запрос.УстановитьПараметр("Роль", РольФайла);
	
	Возврат Запрос.Выполнить().Выгрузить()[0].ЧислоФайлов;
	
КонецФункции	

// Проверить возможность добавления файла в роль. Бросит исключение если нельзя.
// 
// Параметры:
//  ВладелецФайла  - ОпределяемыйТип.ВладелецФайлов
//  РольФайла  - СправочникССылка.РолиФайлов
Процедура ПроверитьВозможностьДобавленияФайлаВРоль(ВладелецФайла, РольФайла) Экспорт
	
	Если Не ЗначениеЗаполнено(РольФайла) Тогда
		Возврат;
	КонецЕсли;	

	Если Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;	
	
	ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов");
	Если Не ИспользоватьРолиФайлов Тогда
		Возврат;
	КонецЕсли;	
	
	РеквДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецФайла, "РегистрационныйНомер, ВидДокумента");
	
	СостояниеОбработки = Неопределено;
	Делопроизводство.ПрочитатьДанныеДокумента(ВладелецФайла, "СостояниеОбработки", СостояниеОбработки);		
	
	РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(РеквДокумента.ВидДокумента);
	
	Если (ЗначениеЗаполнено(РеквДокумента.РегистрационныйНомер) 
		Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется"))
		И РолиФайлов.Количество() <> 0 Тогда
		
		Если ВВидеЭтаРольТолькоОдинФайл(РолиФайлов, РольФайла) Тогда
			
			ЧислоФайлов = ЧислоФайловВРоли(ВладелецФайла, РольФайла);
			НетФайловВРоли = (ЧислоФайлов = 0);
			
			Если Не НетФайловВРоли Тогда
				
				ВызватьИсключение 
					СтрШаблон(НСтр("ru = 'В роли ""%1"" с признаком ""Только один файл"" уже есть файл, 
					|поэтому добавить еще один файл в эту роль нельзя.' "), 
					РольФайла);
					
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры	

// Проверить возможность удаления файла из роль. Бросит исключение если нельзя.
// 
// Параметры:
//  ВладелецФайла  - ОпределяемыйТип.ВладелецФайлов
//  РольФайла  - СправочникССылка.РолиФайлов
Процедура ПроверитьВозможностьУдаленияФайлаИзРоли(ВладелецФайла, Файл, РольФайла) Экспорт
	
	Если Не ЗначениеЗаполнено(РольФайла) Тогда
		Возврат;
	КонецЕсли;	

	Если Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;	
	
	ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов");
	Если Не ИспользоватьРолиФайлов Тогда
		Возврат;
	КонецЕсли;	
	
	РеквДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецФайла, "РегистрационныйНомер, ВидДокумента");
	
	СостояниеОбработки = Неопределено;
	Делопроизводство.ПрочитатьДанныеДокумента(ВладелецФайла, "СостояниеОбработки", СостояниеОбработки);		
	
	РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(РеквДокумента.ВидДокумента);
	
	Если (ЗначениеЗаполнено(РеквДокумента.РегистрационныйНомер) 
		Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется"))
		И РолиФайлов.Количество() <> 0 Тогда
		
		Если ВВидеЭтаРольТолькоОдинФайл(РолиФайлов, РольФайла)
			Или ВВидеЭтаРольОбязательная(РолиФайлов, РольФайла) Тогда
			
			ЧислоФайлов = ЧислоФайловВРоли(ВладелецФайла, РольФайла);
			
			Если ЧислоФайлов = 1 Тогда  // только 1 и мы его сейчас удалим
				
				ВызватьИсключение 
					СтрШаблон(НСтр("ru = 'В роли ""%1"" с признаком ""Только один файл"" или ""Обязательная"" есть только один файл, 
					|поэтому удалить из этой роли нельзя.' "), 
					РольФайла);
					
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры	

// Получает файлы у владельца doc docx
// 
// Параметры:
//  ВладелецФайла - ОпределяемыйТип.ВладелецФайлов
// 
// Возвращаемое значение:
//  Массив
Функция ПолучитьПриложенныеФайлыРедактора(ВладелецФайла) Экспорт
	
	МассивФайлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
	|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.СледующиеШаги, """") КАК СледующиеШаги
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистДанныеРаботыСервиса КАК ТаймлистДанныеРаботыСервиса
	|		ПО (ТаймлистДанныеРаботыСервиса.ВерсияФайла = Файлы.ТекущаяВерсия)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ
	|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НРег(Выборка.Расширение) = НРег("doc")
			Или НРег(Выборка.Расширение) = НРег("docx")
			Или НРег(Выборка.Расширение) = НРег("odt")
			Или ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Выборка.Расширение)
				И ЗначениеЗаполнено(Выборка.СледующиеШаги) Тогда
			ДанныеФайла = Новый Структура("Ссылка, ТекущаяВерсия, Расширение");
			ЗаполнитьЗначенияСвойств(ДанныеФайла, Выборка);
			МассивФайлов.Добавить(ДанныеФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

// Склеивает картинки в одну (друг над другом)
// 
// Параметры:
//  ВсеДанныеОтметок - Массив из Структура
// 
// Возвращаемое значение:
//  Массив из Структура
Функция СобратьВсеШтампыВОдин(ВсеДанныеОтметок) Экспорт  
	
	МассивФайловЭП = Новый Массив;

	Для Каждого ДанныеОтметки Из ВсеДанныеОтметок Цикл
		
		ДвоичныеДанныеКартинки = ДанныеОтметки.ДвоичныеДанныеОтметки;
		
		ПутьНовогоФайла = ПолучитьИмяВременногоФайла("png");         
		ДвоичныеДанныеКартинки.Записать(ПутьНовогоФайла);
		МассивФайловЭП.Добавить(ПутьНовогоФайла);
		
	КонецЦикла;   
	
	НовыйПутьКОтметкеЭП = РаботаСКартинками.СобратьКартинки(МассивФайловЭП, "png");
	
	ДвоичныеДанныеОтметки = Новый ДвоичныеДанные(НовыйПутьКОтметкеЭП);
	
	ДанныеОтметок = Новый Массив;
	ДанныеОтметок.Добавить(
		Новый Структура("ДвоичныеДанныеОтметки, ТипЭП", ДвоичныеДанныеОтметки, "КЭП"));
	
	Для Каждого ПутьКОтметкеЭП Из МассивФайловЭП Цикл
		УдалитьФайлы(ПутьКОтметкеЭП);
	КонецЦикла;	
	
	Если МассивФайловЭП.Количество() > 1 Тогда
		УдалитьФайлы(НовыйПутьКОтметкеЭП);
	КонецЕсли;	
	
	Возврат ДанныеОтметок;
	
КонецФункции	

// Возвращает путь файла в томе на диске, для активной версии
// 
// Параметры:
//  ФайлСсылка - СправочникССылка.Файлы
// 
// Возвращаемое значение:
//  Строка - путь+имя файла в томе
Функция ПутьФайлаВТомеАктивнойВерсии(ФайлСсылка) Экспорт
	
	ВерсияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
	
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВерсияСсылка,
		"ТипХраненияФайла, Том, ПутьКФайлу");
		
	Если РеквизитыВерсии.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ РеквизитыВерсии.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(РеквизитыВерсии.Том) + РеквизитыВерсии.ПутьКФайлу; 
			Возврат ПолныйПуть;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат "";
	
КонецФункции

// Возвращает расширение и рамзер файла. в Привилег режиме
// 
// Параметры:
//  ФайлСсылка - СправочникССылка.Файлы
// 
// Возвращаемое значение:
//  Структура
Функция РасширениеИРазмерВПривилегированномРежиме(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Файл,
		"ТекущаяВерсияРасширение, ТекущаяВерсияРазмер");
		
	Возврат РеквизитыФайла;	
	
КонецФункции	

// <body dir="ltr" style="max-width:21.001cm;margin-top:2cm; margin-bottom:2cm; margin-left:3cm; margin-right:1.499cm; ">
// style - это вырезать
Процедура ВырезатьСтильВBody(ТекстHTML)    
	
	НРегТекстHTML = НРег(ТекстHTML);

	ПозицияТэга = СтрНайти(НРегТекстHTML, "<body");
	Если ПозицияТэга = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПозицияКонцаТэга = СтрНайти(НРегТекстHTML, ">", НаправлениеПоиска.СНачала, ПозицияТэга+1);
	Если ПозицияКонцаТэга = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТегСтиля = "style=";
	ПозицияStyle = СтрНайти(НРегТекстHTML, ТегСтиля, НаправлениеПоиска.СНачала, ПозицияТэга);
	Если ПозицияStyle = 0 Или  ПозицияStyle > ПозицияКонцаТэга Тогда
		Возврат;
	КонецЕсли;	  
	
	СимволПосле = Сред(НРегТекстHTML, ПозицияStyle + СтрДлина(ТегСтиля), 1);
	
	ПозицияКонца = ПозицияКонцаТэга;
	
	Если СимволПосле = """" Или СимволПосле = "'" Тогда
		
		ПозицияКонцаStyle = СтрНайти(НРегТекстHTML, СимволПосле, НаправлениеПоиска.СНачала, ПозицияStyle + СтрДлина(ТегСтиля) + 1);
		Если ПозицияКонцаStyle = 0 Или  ПозицияКонцаStyle > ПозицияКонцаТэга Тогда
			Возврат;
		КонецЕсли;	  
		
		ПозицияКонца = ПозицияКонцаStyle + 1;
		
	КонецЕсли;	
	
	ТекстHTML = Лев(ТекстHTML, ПозицияStyle - 1) + Сред(ТекстHTML, ПозицияКонца);
	
КонецПроцедуры	

#КонецОбласти
