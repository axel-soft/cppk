
#Область ПрограммныйИнтерфейс

// Инициирует обработку входящего сообщения и заполнения ответного сообщения.
//
// Параметры:
//  МобильноеПриложение	 - ссылка на элемент справочника ПользователиМобильныхПриложений;
//  ИсходящееСообщение	 - Ссылка на элемент справочника СообщенияИнтегрированныхСистем.
//
Процедура ВыполнитьСинхронизациюДанных(МобильноеПриложение, СтруктурыВходящихСообщений,
	ФормироватьПакетыОбмена = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСинхронизации = МП_СлужебныйПовтИсп.ПараметрыСинхронизации(МобильноеПриложение);
	
	Попытка
		
		МП_ОбработкаВходящегоСообщения.ЗаписатьИОбработатьВходящиеСообщения(МобильноеПриложение,
			СтруктурыВходящихСообщений, ПараметрыСинхронизации);
			
		Если формироватьПакетыОбмена Тогда
			ЕстьСинхронизируемыеОбласти = МП_Служебный.УКлиентаЕстьСинхронизируемыеОбласти();
			
			Если Не ЕстьСинхронизируемыеОбласти Тогда
				ТекстПредупреждения = СтрШаблон("warning:%1",
					НСтр("ru = 'Не включена синхронизация данных с мобильным клиентом.
					|C сервера на мобильный клиент не передаются никакие данные.
					|Необходимо зайти в персональные настройки в настольном клиенте и включить синхронизацию.'"));
					
				Попытка
					
					ВызватьИсключение ТекстПредупреждения;
					
				Исключение
					
					Инфо = ИнформацияОбОшибке();
					
					МП_ФормированиеИсходящегоСообщения.ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение,
						Инфо);
					
				КонецПопытки;
			КонецЕсли;

			МП_ФормированиеИсходящегоСообщения.ЗапуститьФормированиеСообщенийОбмена(МобильноеПриложение,
				ПараметрыСинхронизации);
			
		КонецЕсли;
		
	Исключение

		Инфо = ИнформацияОбОшибке();

		Если Инфо.Описание = "СтопДальнейшейОбработки" Тогда
			Возврат;
		КонецЕсли;

		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с мобильным.Обработка сообщения.Ошибка'", 
			Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка, ,
			Строка(МобильноеПриложение),
			ПодробноеПредставлениеОшибки(Инфо));
			
		МП_ФормированиеИсходящегоСообщения.ПоместитьВОчередьСообщениеОбОшибке(МобильноеПриложение, Инфо);

		УстановитьПривилегированныйРежим(Истина);

		ВызватьИсключение Инфо;

	КонецПопытки;
	
КонецПроцедуры

// Проверяет наличие у клиента синхронизируемых областей данных.
// 
// Возвращаемое значение:
//  Булево - Истина если есть что синхронизировать.
//
Функция УКлиентаЕстьСинхронизируемыеОбласти() Экспорт

	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	СинхронизироватьПочту =
		РегистрыСведений.МП_НастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.МП_ТипыНастроекПользователей.СинхронизацияПочты);

	Если СинхронизироватьПочту Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьЗадачи =
		РегистрыСведений.МП_НастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.МП_ТипыНастроекПользователей.СинхронизацияЗадач);

	Если СинхронизироватьЗадачи Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьКалендарь =
		РегистрыСведений.МП_НастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.МП_ТипыНастроекПользователей.СинхронизацияКалендаря);

	Если СинхронизироватьКалендарь Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьКонтроль =
		РегистрыСведений.МП_НастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.МП_ТипыНастроекПользователей.СинхронизацияКонтроля);

	Если СинхронизироватьКонтроль Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьОтсутствия =
		РегистрыСведений.МП_НастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.МП_ТипыНастроекПользователей.СинхронизацияОтсутствий);

	Если СинхронизироватьОтсутствия Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьСамочувствия =
		РегистрыСведений.МП_НастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.МП_ТипыНастроекПользователей.СинхронизацияСамочувствий);

	Если СинхронизироватьСамочувствия Тогда
		Возврат Истина;
	КонецЕсли;
	
	СинхронизироватьМероприятия =
		РегистрыСведений.МП_НастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.МП_ТипыНастроекПользователей.СинхронизацияМероприятий);

	Если СинхронизироватьМероприятия Тогда
		Возврат Истина;
	КонецЕсли;
	
	СинхронизироватьУчетВремени =
		РегистрыСведений.МП_НастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.МП_ТипыНастроекПользователей.СинхронизацияУчетаВремени);

	Если СинхронизироватьМероприятия Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область РаботаССообщениямиОбмена

// Выполняет запуск фонового задания обработки данных с мобильного клиента.
//
// Параметры:
//  МобильноеПриложение - СправочникСсылка.ПользователиМобильногоПриложения - Ссылка на приложение
//  ПараметрыФоновогоЗадания - Массив - Массив параметров фонового задания
//  ИмяМетода       - Строка - Имя метода который будет запущен как фоновое задание.
//
Процедура ЗапуститьФоновоеЗадание(МобильноеПриложение, ПараметрыФоновогоЗадания, ИмяМетода) Экспорт

	// В клиент-серверном варианте и в файловом 8.3 сообщение принимается и готовится в 
	// фоновом задании. Это позволяет избежать таймаутов на стороне мобильного клиента, 
	// т.к. сообщение может долго приниматься и готовиться.
	
	СтруктураОтбора = Новый Структура("Наименование, Состояние, ИмяМетода", МобильноеПриложение.Код, СостояниеФоновогоЗадания.Активно, 
		ИмяМетода);
	
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);

	ЕстьАктивноеЗадание = МассивЗаданий.Количество() > 0;
	
	Если Не ЕстьАктивноеЗадание Тогда
		
		ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыФоновогоЗадания, 
			Новый УникальныйИдентификатор(), МобильноеПриложение.Код); // наименование фонового задания

	КонецЕсли;

КонецПроцедуры

// Записывает в очередь входящее сообщение
//
// Параметры:
//  МобильноеПриложение - СправочникСсылка.ПользователиМобильногоПриложения - Ссылка на приложение;
//  СообщениеОтСервера	 - ОбъектXDTO - Полученные сервером данные.
//
Процедура ЗаписатьВходящееСообщение(МобильноеПриложение, СтруктураВходящегоСообщения) Экспорт
	
	
	
КонецПроцедуры

// Помечает сообщение обмена обработанным
//
// Параметры:
//  Сообщение - Справочник.СообщенияИнтегрированныхСистем - Сообщение обмена данными.
//
Процедура ПометитьСообщениеОбработанным(Сообщение) Экспорт

	

КонецПроцедуры 

// Получает массив еще не обработанных входящих сообщений от указанного клиента.
//
// Параметры:
//  ПользовательМобильногоПриложения - СправочникСсылка.ПользователиМобильногоПриложения - Ссылка на приложение;
// 
// Возвращаемое значение:
//  Массив - Необработанные входящие сообщения.
//
Функция ВходящиеНеобработанныеСообщения(ПользовательМобильногоПриложения) Экспорт

	

КонецФункции


// Обработчик регзадания МП_УдалениеСообщенийИнтегрированныхСистем.
// Выполняет окончательное удаление помеченных на удаление СообщенийИнтегрированныхСистем, 
// относящихся к интеграции с мобильным клиентом
Процедура УдалениеСообщенийИнтегрированныхСистем(МобильноеПриложение = Неопределено) Экспорт

	

КонецПроцедуры


#КонецОбласти // Работа с сообщениями обмена

#Область РаботаСПротоколомСобытий

// Обработчик регламентного задания УдалениеСтарыхЗаписейПротоколаСобытий.
// Удаляет старые записи протокола работы с мобильными клиентами.
Процедура УдалениеСтарыхЗаписейПротоколаСобытий() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.МП_УдалениеСтарыхЗаписейПротокола, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеПриложения") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удаляются записи старше 2-х недель
	ГраницаВыборкиЗаписей = ТекущаяДатаСеанса() - 14*24*60*60;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МП_ПротоколРаботыПользователей.МоментВремени,
		|	МП_ПротоколРаботыПользователей.Период,
		|	МП_ПротоколРаботыПользователей.ПользовательМобильногоПриложения КАК МобильноеПриложение
		|ИЗ
		|	РегистрСведений.МП_ПротоколРаботыПользователей КАК МП_ПротоколРаботыПользователей
		|ГДЕ
		|	МП_ПротоколРаботыПользователей.Период <= &Период";
	Запрос.УстановитьПараметр("Период", ГраницаВыборкиЗаписей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.МП_ПротоколРаботыПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.МоментВремени = Выборка.МоментВремени;
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.ПользовательМобильногоПриложения = Выборка.МобильноеПриложение;
		МенеджерЗаписи.Удалить();
	КонецЦикла;

КонецПроцедуры // Работа с протоколом событий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Используется для просмотра сообщения из списка справочника "СообщенияИнтегрированныхСистем"
Функция ПреобразоватьЗначениеВJSON(Значение, Отступ = "") Экспорт
	
	Разделитель = "";
   
    ТипЗн = ТипЗнч(Значение);

    Если ТипЗн = Тип("Строка") Тогда
        Стр = """" + Маскировать(Значение) + """";
		
	ИначеЕсли ТипЗн = Тип("Число") Или ТипЗнч(Значение) = Тип("Булево") Или ТипЗн = Тип("ДвоичныеДанные") 
		Или ТипЗн = Тип("ХранилищеЗначения") Тогда
			
		Стр = """" + XMLСтрока(Значение) + """";

    ИначеЕсли ТипЗн = Тип("Дата") Тогда
        Стр = """" +?(ЗначениеЗаполнено(Значение), XMLСтрока(Значение), "")+"""";

    ИначеЕсли ТипЗн = Тип("Структура") Тогда
		
		Стр = "{";
		
		Для Каждого Параметр Из Значение Цикл
			
			Стр = Стр + Разделитель + Символы.ПС + Отступ + """" + Параметр.Ключ + """:" + 
				ПреобразоватьЗначениеВJSON(Параметр.Значение, Отступ + Символы.Таб);
				
			Разделитель = ",";
			
		КонецЦикла;
		
		Стр = Стр + Символы.ПС + Отступ + "}";
		
	ИначеЕсли ТипЗн = Тип("Массив") Тогда
		
		Стр = "[";
		Для Каждого Элемент Из Значение Цикл
			
			Стр = Стр + Разделитель + Символы.ПС + Отступ + ПреобразоватьЗначениеВJSON(Элемент, Отступ);
			Разделитель = ",";
			
		КонецЦикла;
		
		Стр = Стр + Символы.ПС + Отступ + "]";
		
	ИначеЕсли ТипЗн = Тип("ТаблицаЗначений") Тогда
		
		Колонки = Значение.Колонки;
		
		Массив = Новый Массив;
		
		Для Каждого СтрокаТЗ Из Значение Цикл
            Структура=Новый Структура;
            Для Каждого Колонка Из Колонки Цикл
                Структура.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя])
            КонецЦикла;
            Массив.Добавить(Структура);
        КонецЦикла;
		
		Стр = ПреобразоватьЗначениеВJSON(Массив, Отступ)

    ИначеЕсли Значение=Неопределено Тогда
		
		Стр = "null"
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗн) Тогда
		
		Если ОбщегоНазначения.ЭтоСправочник(Значение.Метаданные()) Тогда
			Массив = Новый Массив;
			Массив.Добавить(Значение.Метаданные().Имя);
			Массив.Добавить(Строка(Значение.УникальныйИдентификатор()));
			Массив.Добавить(Строка(Значение.Наименование));
			Стр = ПреобразоватьЗначениеВJSON(Массив, Отступ);
			
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(Значение.Метаданные()) Тогда
			
			Массив = Новый Массив;
			Массив.Добавить(Значение.Метаданные().Имя);
			Массив.Добавить(Строка(Значение.УникальныйИдентификатор()));
			Массив.Добавить(Строка(Значение.Дата));
			Массив.Добавить(Строка(Значение.Номер));
			Стр = ПреобразоватьЗначениеВJSON(Массив, Отступ);
			
		КонецЕсли; 
		
	Иначе
		Стр = """" + Маскировать(Значение) + """";
    КонецЕсли;

    Возврат Стр
КонецФункции

Функция Маскировать(Знач Стр)
  
	Стр=СтрЗаменить(Стр,Символы.ПС,"\n");
    Стр=СтрЗаменить(Стр,Символы.ВК,"\r");
    Стр=СтрЗаменить(Стр,"""","\""");
    Стр=СтрЗаменить(Стр,"'","\'");
    Возврат Стр

КонецФункции

Функция РазделительПакетногоЗапроса() Экспорт
	
	Возврат "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";	
		
Конецфункции	

Функция ЭтоМобильноеПриложениеВерсии22(МобильноеПриложение) Экспорт
	
	 Возврат Лев(РегистрыСведений.МП_СведенияОПользователях.ПолучитьВерсию(МобильноеПриложение), 3) = "2.2";
	
КонецФункции

Функция ОпределитьДатуУстареванияДанных(МобильноеПриложение, ПараметрыСинхронизации = Неопределено) Экспорт
	
	СрокУстареванияДанных = 0;
	
	Если ПараметрыСинхронизации <> Неопределено Тогда
		
		//ПервичнаяСинхронизация
		Если Не ЗначениеЗаполнено(ПараметрыСинхронизации.ОтметкаВремениМобильного) Тогда
			
			ДатаПервоначальнойЗагрузки = НачалоДня(ТекущаяДатаСеанса() - ПараметрыСинхронизации.ПериодПервичнойЗагрузки*86400);
			
			РегистрыСведений.МП_СведенияОПользователях.ЗаписатьДатуПервоначальнойЗагрузкиДанных(МобильноеПриложение, ДатаПервоначальнойЗагрузки);
			
			Возврат ДатаПервоначальнойЗагрузки;
			
		Иначе
			
			СрокУстареванияДанных = ПараметрыСинхронизации.СрокУстареванияДанных;
			
		КонецЕсли;
		
	Иначе
		
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		
		СрокУстареванияДанных = РегистрыСведений.МП_НастройкиПользователей.ПолучитьНастройку(ТекущийПользователь,
			Перечисления.МП_ТипыНастроекПользователей.СрокУстареванияДанных);
			
	КонецЕсли;
	
	ДатаУстареванияДанных = НачалоДня(ТекущаяДатаСеанса() - (СрокУстареванияДанных * 86400));
	
	ДатаПервоначальнойЗагрузки = РегистрыСведений.МП_СведенияОПользователях.ПолучитьДатуПервоначальнойЗагрузкиДанных(
		МобильноеПриложение);
		
	Если ДатаУстареванияДанных < ДатаПервоначальнойЗагрузки Или СрокУстареванияДанных = 0 Тогда
		
		ДатаУстареванияДанных = ДатаПервоначальнойЗагрузки;
		
	КонецЕсли; 
		
	Возврат ДатаУстареванияДанных;
	
КонецФункции

Функция HTMLОписаниеМероприятия(Мероприятие) Экспорт
	
	ВОтдельномДокументе = Перечисления.ТипыПрограммыПротокола.ВОтдельномДокументе;
	ВТаблице = Перечисления.ТипыПрограммыПротокола.ВТаблице;
	ВМатериалах = Перечисления.ТипыПрограммыПротокола.ВМатериалах;
	
	РеквизитыМероприятия = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие,
		"ТипПротокола, ТипПрограммы, ВидМероприятия");
		
	ТипПротокола = РеквизитыМероприятия.ТипПротокола;
	ТипПрограммы = РеквизитыМероприятия.ТипПрограммы;
	ПротокольноеМероприятие = РеквизитыМероприятия.ВидМероприятия.ПротокольноеМероприятие;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыводитьДатуИМестоПроведения", Истина);
	ПараметрыПечати.Вставить("ВыводитьУчастников", Истина);
	ПараметрыПечати.Вставить("ВыводитьОрганизацию", Истина);
	ПараметрыПечати.Вставить("ВыводитьОрганизатора", Истина);
	
	Если ПротокольноеМероприятие Тогда 
		ПараметрыПечати.Вставить("ВыводитьПредседателяИСекретаря", Истина);
	Иначе
		ПараметрыПечати.Вставить("ВыводитьПредседателяИСекретаря", Ложь);
	КонецЕсли;
	
	Если ТипПрограммы = ВТаблице Тогда 
		ПараметрыПечати.Вставить("ВыводитьПрограмму", Истина);
	Иначе
		ПараметрыПечати.Вставить("ВыводитьПрограмму", Ложь);
	КонецЕсли;
	
	Если ТипПротокола = ВТаблице И ПротокольноеМероприятие Тогда 
		ПараметрыПечати.Вставить("ВыводитьПротокол", Истина);
	Иначе	
		ПараметрыПечати.Вставить("ВыводитьПротокол", Ложь);
	КонецЕсли;
	
	РезультатHTML = 
		"<html>
		|<head>
		|	<meta name=""viewport"" %content% http-equiv=""Content-Type""/>
		|</head>
		|<body>
		|	<div style = ""font-family:Arial;font-size:14px;"">";
	РезультатHTML = СтрЗаменить(РезультатHTML, "%content%", "content = ""text/html, width=320, initial-scale=1""");

	РезультатHTML  = РезультатHTML + "<style type=""text/css"">
		|TABLE {
		|border-collapse: collapse; /* Убираем двойные линии между ячейками */
		|}
		|TD, TH {
		|padding: 3px; /* Поля вокруг содержимого таблицы */
		| border: 1px solid black; /* Параметры рамки */
		|}
		|TH {
		| background: #b0e0e6; /* Цвет фона */
		|}
		|</style>
		|<body contentEditable=false>";

	// Получаем запросом необходимые данные
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТМероприятия
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|ГДЕ
		|	Мероприятия.Ссылка = &Мероприятие
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.ДатаИзменения КАК ДатаИзменения,
		|	Мероприятия.Наименование + "" ("" + ВидыМероприятий.Наименование + "")"" КАК Наименование,
		|	Мероприятия.МестоПроведения КАК МестоПроведения,
		|	Мероприятия.ДатаНачалаФакт КАК ДатаНачалаФакт,
		|	Мероприятия.ДатаОкончанияФакт КАК ДатаОкончанияФакт,
		|	Мероприятия.Председатель КАК Председатель,
		|	Мероприятия.Секретарь КАК Секретарь,
		|	Мероприятия.ДатаНачала КАК ДатаНачала,
		|	Мероприятия.ДатаОкончания КАК ДатаОкончания,
		|	Мероприятия.Организатор КАК Организатор,
		|	ВТМероприятия.Ссылка КАК Ссылка
		|ИЗ
		|	ВТМероприятия КАК ВТМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мероприятия КАК Мероприятия
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыМероприятий КАК ВидыМероприятий
		|			ПО Мероприятия.ВидМероприятия = ВидыМероприятий.Ссылка
		|		ПО ВТМероприятия.Ссылка = Мероприятия.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Программа.НомерПункта КАК НомерПункта,
		|	Программа.Содержание КАК Содержание,
		|	Программа.Исполнитель КАК Исполнитель,
		|	Программа.Ссылка КАК Ссылка,
		|	Программа.ВремяПлан КАК ВремяПлан,
		|	Программа.Начало КАК Начало,
		|	Программа.Окончание КАК Окончание,
		|	Программа.ВремяФакт КАК ВремяФакт
		|ИЗ
		|	Справочник.Мероприятия.Программа КАК Программа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМероприятия КАК ВТМероприятия
		|		ПО Программа.Ссылка = ВТМероприятия.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерПункта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Протокол.Ссылка КАК Ссылка,
		|	Протокол.НомерСтроки КАК НомерСтроки,
		|	ПротоколыМероприятий.Ответственный КАК Исполнитель,
		|	ПротоколыМероприятий.НомерПунктаПрограммы КАК НомерПунктаПрограммы,
		|	ПротоколыМероприятий.Слушали КАК Слушали,
		|	ПротоколыМероприятий.Выступили КАК Выступили,
		|	ПротоколыМероприятий.Решили КАК Решили,
		|	ПротоколыМероприятий.СрокИсполненияПроцесса КАК СрокИсполнения,
		|	ПротоколыМероприятий.НомерПунктаПротокола КАК НомерПунктаПротокола,
		|	ПротоколыМероприятий.Ссылка КАК Протокол,
		|	ПротоколыМероприятий.Наименование КАК Наименование
		|ИЗ
		|	ВТМероприятия КАК ВТМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мероприятия.Протокол КАК Протокол
		|		ПО ВТМероприятия.Ссылка = Протокол.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|		ПО ВТМероприятия.Ссылка = ПротоколыМероприятий.Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	Протокол.НомерПунктаПрограммы,
		|	Протокол.НомерСтроки";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаЗаголовок = Результаты[1].Выбрать();
	Программа = Результаты[2].Выгрузить();
	ТаблицаПротокол = Результаты[3].Выгрузить();
	
	НаборЗаписейДействующиеУчастники = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
	НаборЗаписейДействующиеУчастники.Отбор.Мероприятие.Значение = Мероприятие;
	НаборЗаписейДействующиеУчастники.Отбор.Мероприятие.Использование = Истина;
	НаборЗаписейДействующиеУчастники.Прочитать();
	
	ТаблицаУчастники = НаборЗаписейДействующиеУчастники.Выгрузить();
	ТаблицаУчастники.Сортировать("Порядок");
	
	ПредставлениеМестногоЧасовогоПояса = РаботаСЧасовымиПоясами.ПредставлениеМестногоЧасовогоПояса();
	
	Если Не ВыборкаЗаголовок.Следующий() Тогда
		Возврат РезультатHTML;
	КонецЕсли;
		
	// Вывод заголовка
	Если ПараметрыПечати.ВыводитьОрганизацию Тогда
		НаименованиеПредприятия = Справочники.Организации.ПредставлениеОрганизацииНаДату(ВыборкаЗаголовок.Организация, ВыборкаЗаголовок.ДатаИзменения);
		Если ЗначениеЗаполнено(НаименованиеПредприятия) Тогда
			ТекстОрганизация = СтрШаблон(НСтр("ru = '%1'; en = 'Organization'"), РедакцииКонфигурацииКлиентСервер.Организация());
			РезультатHTML = РезультатHTML + РеквизитВHtml(ТекстОрганизация, НаименованиеПредприятия); 
		КонецЕсли;	
			
	КонецЕсли;
	
	РезультатHTML = РезультатHTML + "<b>" + ВыборкаЗаголовок.Наименование + "</b>";
	
	// Вывод тела
	Если ПараметрыПечати.ВыводитьДатуИМестоПроведения Тогда 
		
		// Вывод даты и места
		МестнаяДатаНачала = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ВыборкаЗаголовок.ДатаНачала);
		МестнаяДатаОкончания = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ВыборкаЗаголовок.ДатаОкончания);
		Если НачалоДня(МестнаяДатаОкончания) - НачалоДня(МестнаяДатаНачала) = 0 Тогда
			ДатаПроведения = Формат(МестнаяДатаНачала, "ДФ=dd.MM.yyyy");
			ВремяПроведения = Формат(МестнаяДатаНачала, "ДФ=ЧЧ:мм")
				+ " - "
				+ Формат(МестнаяДатаОкончания, "ДФ=ЧЧ:мм");
				
			Если ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса) Тогда
				ВремяПроведения = ВремяПроведения + " " + ПредставлениеМестногоЧасовогоПояса;
			КонецЕсли;
			
			РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Дата проведения'; en = 'The date of the'"), 
				ДатаПроведения);
				
			РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Время проведения'; en = 'Spend time'"), 
				ВремяПроведения);
				
		Иначе
			ДатаНачала = Формат(МестнаяДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
			Если ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса) Тогда
				ДатаНачала = ДатаНачала + " " + ПредставлениеМестногоЧасовогоПояса;
			КонецЕсли;
			ДатаОкончания = Формат(МестнаяДатаОкончания, "ДФ='dd.MM.yyyy ЧЧ:мм'");
			
			РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Дата'; en = 'Date'"), 
				Строка(ДатаНачала + " - "+ ДатаОкончания));

		КонецЕсли;
		
		РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Место проведения'; en = 'Location'"), 
			ВыборкаЗаголовок.МестоПроведения);
			
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьПредседателяИСекретаря Тогда 
		// Вывод председателя и секретаря
		РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Председатель'; en = 'Сhairman'"), 
			Строка(ВыборкаЗаголовок.Председатель));
			
		РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Секретарь'; en = 'Secretary'"), 
			Строка(ВыборкаЗаголовок.Секретарь));
		
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьОрганизатора Тогда 
		// Вывод организатора
		РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Организатор'; en = 'Organizer'"), 
			Строка(ВыборкаЗаголовок.Организатор));
		
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьУчастников Тогда 
		// Вывод участников
		НачатьГруппировкуHTML(РезультатHTML, НСтр("ru = 'Участники:'; en = 'Members'"));
		
		РезультатHTML = РезультатHTML + "<table>
			|<tr>
			|<th style = ""font-family:Arial;font-size:14px;""> № </th>
			|<th style = ""font-family:Arial;font-size:14px;""> Участник </th>
			|<th style = ""font-family:Arial;font-size:14px;""> Приглашение </th>
			|</tr>";
			
		Для Каждого СтрокаУчастник Из ТаблицаУчастники Цикл
			РезультатHTML = РезультатHTML +
			    СтрШаблон(
				"<tr>
				|<td style = ""font-family:Arial;font-size:14px;""> %1 </td>
				|<td style = ""font-family:Arial;font-size:14px;""> %2 </td>
				|<td style = ""font-family:Arial;font-size:14px;""> %3 </td>
				|<tr>", СтрокаУчастник.Порядок, Строка(СтрокаУчастник.Исполнитель), СтрокаУчастник.СостояниеПриглашения);
		КонецЦикла;
		
		РезультатHTML = РезультатHTML + "</table>";
		
		ЗакончитьГруппировкуHTML(РезультатHTML);
		
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьПрограмму И Программа.Количество() Тогда 
		
		// Вывод программы
		НачатьГруппировкуHTML(РезультатHTML, НСтр("ru = 'Программа:'; en = 'Program'"));
		РезультатHTML = РезультатHTML + "<table>
				|<tr>
				|<th style = ""font-family:Arial;font-size:14px;""> № </th>
				|<th style = ""font-family:Arial;font-size:14px;""> Содержание </th>
				|<th style = ""font-family:Arial;font-size:14px;""> Исполнитель </th>
				|<th style = ""font-family:Arial;font-size:14px;""> Время </th>
				|</tr>";
			
		Для Каждого СтрокаПрограммы Из Программа Цикл
			
			МестнаяНачало = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(СтрокаПрограммы.Начало);
			МестнаяОкончание = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(СтрокаПрограммы.Окончание);
			Если ЗначениеЗаполнено(МестнаяНачало) И ЗначениеЗаполнено(МестнаяОкончание) Тогда 
				Время =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'с %1 по %2'; en = ''"),
						Формат(МестнаяНачало, "ДФ=ЧЧ:мм"),
						Формат(МестнаяОкончание, "ДФ=ЧЧ:мм"));
			ИначеЕсли ЗначениеЗаполнено(СтрокаПрограммы.ВремяПлан) Тогда
				Время = 
					НапоминанияПользователяДокументооборотКлиентСервер.ПредставлениеВремени(СтрокаПрограммы.ВремяПлан, Ложь, Ложь);
			КонецЕсли;

			РезультатHTML = РезультатHTML +
			    СтрШаблон(
				"<tr>
				|<td style = ""font-family:Arial;font-size:14px;""> %1 </td>
				|<td style = ""font-family:Arial;font-size:14px;""> %2 </td>
				|<td style = ""font-family:Arial;font-size:14px;""> %3 </td>
				|<td style = ""font-family:Arial;font-size:14px;""> %4 </td>
				|<tr>", СтрокаПрограммы.НомерПункта, СтрокаПрограммы.Содержание, Строка(СтрокаПрограммы.Исполнитель), Время);
			
		КонецЦикла;
				
		РезультатHTML = РезультатHTML + "</table>";
		
		ЗакончитьГруппировкуHTML(РезультатHTML);
		
	КонецЕсли;
		
	Если ПараметрыПечати.ВыводитьПротокол И ТаблицаПротокол.Количество() Тогда 
		
		НачатьГруппировкуHTML(РезультатHTML, НСтр("ru = 'Протокол:'; en = 'Protocol:'"));
		УправлениеМероприятиямиКлиентСервер.ВывестиНомераПунктовПротокола(ТаблицаПротокол);
		
		Для Каждого СтрокаПротокола Из ТаблицаПротокол Цикл
			
			СтрокаПункта = Программа.Найти(СтрокаПротокола.НомерПунктаПротокола, "НомерПункта");
			Если СтрокаПункта <> Неопределено Тогда
				НачатьГруппировкуHTML(РезультатHTML, Строка(СтрокаПункта.НомерПункта) + ". " + """" + СтрокаПункта.Содержание + """");
			Иначе
				НачатьГруппировкуHTML(РезультатHTML, Строка(СтрокаПротокола.НомерПунктаПротокола)  + ". ");
			КонецЕсли;
			
			РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Слушали'; en = 'Listened'"), 
				СтрокаПротокола.Слушали, Истина);
				
			Если ЗначениеЗаполнено(СтрокаПротокола.Выступили) Тогда
				РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Выступили'; en = 'Made'"), 
					СтрокаПротокола.Выступили, Истина);
			КонецЕсли;
				
			Решили = СтрокаПротокола.Решили;
			Если ЗначениеЗаполнено(СтрокаПротокола.Исполнитель) Тогда 
				Решили = Решили 
				+ Символы.ПС 
				+ НСтр("ru = 'Ответственный:'; en = 'Responsible'") + " "
				+ Строка(СтрокаПротокола.Исполнитель);
				
				Если ЗначениеЗаполнено(СтрокаПротокола.СрокИсполнения) Тогда 
					Решили = Решили 
					+ НСтр("ru = 'Срок:'; en = 'Term'") + " "
					+ Формат(СтрокаПротокола.СрокИсполнения, "ДЛФ=D");
				КонецЕсли;		
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(Решили) Тогда
				РезультатHTML = РезультатHTML + РеквизитВHtml(НСтр("ru = 'Решили'; en = 'Have decided'"), 
					Решили, Истина);
			КонецЕсли;
				
			ЗакончитьГруппировкуHTML(РезультатHTML);
			
		КонецЦикла;
		
		ЗакончитьГруппировкуHTML(РезультатHTML);
		
	КонецЕсли;
		
	РезультатHTML = РезультатHTML + "</html>";
	
	Возврат РезультатHTML;
	
КонецФункции

Функция РеквизитВHtml(ИмяРеквизита, ЗначениеРеквизита, Вертикально = Ложь, Картинка = Неопределено)

	ЗначениеРеквизитаСтр = "&nbsp;";

	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда

		Если ТипЗнч(ЗначениеРеквизита) <> Тип("Строка") Тогда
			ЗначениеРеквизитаСтр = Строка(ЗначениеРеквизита);
		Иначе
			ЗначениеРеквизитаСтр = ЗначениеРеквизита;
		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(Картинка) Тогда
		Если ТипЗнч(Картинка) = Тип("Картинка") Тогда
			ДвоичныеДанныеФото = Картинка.ПолучитьДвоичныеДанные();
			Формат = Строка(Картинка.Формат());
		Иначе
			ДвоичныеДанныеФото = Неопределено;
			Формат = ФорматКартинки.НеизвестныйФормат;
		КонецЕсли;

		СтрокаИсточника = "data:image/" + Формат + ";base64," + Base64Строка(ДвоичныеДанныеФото);
		ЗначениеКартинки = СтрШаблон("<img border=""0"" src=""%1"" height = ""#height"">", СтрокаИсточника);
	Иначе
		ЗначениеКартинки = "";
	КонецЕсли;

	Если Вертикально Тогда
		Результат = "<p><b>" + ИмяРеквизита + ":</b></p><p>" + ЗначениеКартинки + ЗначениеРеквизитаСтр + "</p>";
	Иначе
		Результат = "<p><b>" + ИмяРеквизита + ":</b> " + ЗначениеКартинки + ЗначениеРеквизитаСтр + "</p>";
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура НачатьГруппировкуHTML(ТекстHTML, Заголовок, Открыть = Истина)
	
	ТекстHTML = ТекстHTML + "<details" + ?(Открыть, " open = ""open""", "")+ ">
		|<summary> <b> <u>" + ВРег(Заголовок) + " </u> </b> </summary>";
	
КонецПроцедуры

Процедура ЗакончитьГруппировкуHTML(ТекстHTML)
	
	ТекстHTML = ТекстHTML + "</details> <br>";
	
КонецПроцедуры

#Область ПолучениеПредставленияКарточкиЗадачиВHTML

Процедура СформироватьТаблицуИсполнителей(Результат, Запрос, Заголовок)

	Выборка = Запрос.Выполнить().Выгрузить();

	Если Выборка.Количество() > 0 Тогда

		Результат = Результат + "&nbsp;<span class = ""TextStyle""><b>" + Заголовок + "</b></span>";
		Результат = Результат 
			+ "&nbsp;<table border=""1"" class = ""TextStyle""><tbody><tr  align=""center"" class = ""PropName"">";

		Для Каждого Столбец Из Выборка.Колонки Цикл
			Результат = Результат + "<td><b>" + СтрЗаменить(Столбец.Имя,"_"," ") + "</b></td>";
		КонецЦикла;

		Результат = Результат + "</tr>";

	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Выборка Цикл

		Результат = Результат + "<tr class = ""PropValue"">";

		Для Счетчик = 0 ПО Выборка.Колонки.Количество()-1 Цикл
			Результат = Результат + "<td>" 
				+ ?(ЗначениеЗаполнено(СтрокаТаблицы[Счетчик]), СтрокаТаблицы[Счетчик], "&nbsp;") + "</td>";
		КонецЦикла;

		Результат = Результат + "</tr>";

	КонецЦикла;

	Если Выборка.Количество() > 0 Тогда
		Результат = Результат + "</tbody></table>";
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьHTMLПредставлениеФормыЗадачи(СсылкаНаЗадачу) Экспорт

	ПараметрыФормы = БизнесПроцессыИЗадачиВызовСервера.ПолучитьФормуВыполненияЗадачи(СсылкаНаЗадачу);
	ИмяФормы = ПараметрыФормы.Имяформы;

	//заголовок HTML
	Результат = 
		"<html>
		|<head>
		|	<meta name=""viewport"" %content% http-equiv=""Content-Type""/>
		|</head>
		|<body>
		|	<div style = ""font-family:Arial;font-size:14px;"">";
	Результат = СтрЗаменить(Результат, "%content%", "content = ""text/html,width=320,initial-scale=1""");

	//Заполняется шапка, общая для всех задач
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаНаЗадачу,
		"Наименование,
		|Описание,
		|СрокИсполнения,
		|Важность,
		|Исполнитель,
		|Автор,
		|БизнесПроцесс,
		|РольИсполнителя");
	БизнесПроцесс = РеквизитыЗадачи.БизнесПроцесс;
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		БизнесПроцесс,
		"ДатаНачала");

	//Задача
	Результат = Результат
		+ ПолучитьHTMLреквизита(НСтр("ru = 'Задача'"), СтрЗаменить(РеквизитыЗадачи.Наименование, """","'"));

	//Автор
	Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Автор'"), РеквизитыЗадачи.Автор);

	//РольИсполнителя
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) 
		И Не РеквизитыЗадачи.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь() Тогда
		Результат = Результат 
			+ ПолучитьHTMLреквизита(
				НСтр("ru = 'Кому'"), 
				СтрЗаменить(РеквизитыЗадачи.Исполнитель, """","'"), ,
				БиблиотекаКартинок.ДелегированнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.РольИсполнителя) Тогда
		Результат = Результат 
			+ ПолучитьHTMLреквизита(
				НСтр("ru = 'Кому'"), 
				СтрЗаменить(РеквизитыЗадачи.РольИсполнителя, """","'"), ,
				БиблиотекаКартинок.РолеваяЗадача);
	КонецЕсли;

	//Описание
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Описание) Тогда
		Результат = Результат 
			+ ПолучитьHTMLреквизита(НСтр("ru = 'Описание'"), РеквизитыЗадачи.Описание);
	КонецЕсли;

	//Срок
	Если ЗначениеЗаполнено(РеквизитыЗадачи.СрокИсполнения) Тогда
		Результат = Результат 
			+ ПолучитьHTMLреквизита(
				НСтр("ru = 'Срок'"), Формат(РеквизитыЗадачи.СрокИсполнения,"ДФ='dd.MM.yyyy ЧЧ:мм'"), Ложь);
	КонецЕсли;

	//Важность
	Если РеквизитыЗадачи.Важность = Перечисления.ВариантыВажностиОбъектов.Высокая Тогда
		ПредставлениеВажности = НСтр("ru = 'Высокая'");
	ИначеЕсли РеквизитыЗадачи.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная Тогда
		ПредставлениеВажности = НСтр("ru = 'Обычная'");
	Иначе
		ПредставлениеВажности = НСтр("ru = 'Низкая'");
	КонецЕсли;
	
	Результат = Результат 
		+ ПолучитьHTMLреквизита(НСтр("ru = 'Важность'"), ПредставлениеВажности, Ложь);

	//Дата
	Результат = Результат 
		+ ПолучитьHTMLреквизита(НСтр("ru = 'Дата'"), РеквизитыБизнесПроцесса.ДатаНачала, Ложь);

	//история выполнения
	ИсторияВыполнения = РегистрыСведений.ИсторияЗадач .ИсторияВыполнения(СсылкаНаЗадачу);
	Если ЗначениеЗаполнено(ИсторияВыполнения) Тогда

		ИсторияВыполнения = СтрЗаменить(ИсторияВыполнения, Символы.ПС, "<br/>");

		Результат = Результат 
			+ ПолучитьHTMLреквизита(НСтр("ru = 'История выполнения'"), ИсторияВыполнения, Истина);

	КонецЕсли;

	//Дополняем форму задачи элементами, специфичными только для нее
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда

		Если ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиОтвИсполнителя" Тогда

			//список соисполнителей
			Результат = Результат + "</tbody></table>";

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
			Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВЫБОР
				|		КОГДА ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				|			ТОГДА ЗадачаИсполнителя.Исполнитель
				|		ИНАЧЕ ЗадачаИсполнителя.РольИсполнителя
				|	КОНЕЦ КАК Исполнитель,
				|	ЗадачаИсполнителя.Наименование,
				|	ЗадачаИсполнителя.Выполнена,
				|	ЗадачаИсполнителя.ДатаИсполнения КАК Дата_исполнения,
				|	ЗадачаИсполнителя.СрокИсполнения КАК Срок_исполнения,
				|	ЗадачаИсполнителя.РезультатВыполнения КАК Результат_выполнения
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
				|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";

			СформироватьТаблицуИсполнителей(Результат, Запрос, НСтр("ru = 'Соисполнители:'"));

		КонецЕсли;

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда

		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиИсполнителя" Тогда
			НайденнаяСтрока = БизнесПроцесс.РезультатыСогласования.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'"), НомерИтерации, Ложь);
		КонецЕсли;

		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиОзнакомиться" Тогда

			//Цикл
			НайденнаяСтрока =  БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			
			//Результат согласования
			РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
			СтрокиИтерации = БизнесПроцесс.РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
			Для Каждого Строка Из СтрокиИтерации Цикл
				Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
					Прервать;
				КонецЕсли;
				
				Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
				КонецЕсли;
			КонецЦикла;
			Результат = Результат 
				+ ПолучитьHTMLреквизита(НСтр("ru = 'Результат согласования'"), РезультатСогласования, Ложь);
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'"), НомерИтерации, Ложь);

		КонецЕсли;

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда

		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиИсполнителя" Тогда

			НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации   = "";

			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'"), НомерИтерации, Ложь);

		КонецЕсли;

		Если Имяформы = "БизнесПроцесс.Утверждение.Форма.ФормаЗадачиОзнакомиться" Тогда

			НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации   = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;

			// результат утверждения
			РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено;
			СтрокиИтерации = БизнесПроцесс.РезультатыУтверждения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
			Для Каждого Строка Из СтрокиИтерации Цикл

				РезультатВыполнения = Строка.ЗадачаИсполнителя.РезультатВыполнения;
				УтверждающееЛицо = Строка.ЗадачаИсполнителя.Исполнитель;
				ДатаУтверждения = Строка.ЗадачаИсполнителя.ДатаИсполнения;

				Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
					РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено;
					Прервать;
				КонецЕсли;

			КонецЦикла;

			Результат = Результат 
				+ ПолучитьHTMLреквизита(НСтр("ru = 'Результат утверждения'"), РезультатУтверждения, Ложь);
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'"), НомерИтерации);

		КонецЕсли;

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда

		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			БизнесПроцесс,
			"ДатаНачала,
			|ДатаЗавершения,
			|МестоПроведения,
			|РезультатПриглашения,
			|НомерИтерации");

		Если ЗначениеЗаполнено(РеквизитыПроцесса.ДатаНачала) Тогда
			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Дата начала мероприятия'"), 
				Формат(РеквизитыПроцесса.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		КонецЕсли;

		Если ЗначениеЗаполнено(РеквизитыПроцесса.ДатаЗавершения) Тогда
			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Дата завершения'"), 
				Формат(РеквизитыПроцесса.ДатаЗавершения, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		КонецЕсли;

		Если ЗначениеЗаполнено(РеквизитыПроцесса.МестоПроведения) Тогда
			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Место проведения'"), 
				РеквизитыПроцесса.МестоПроведения);
		КонецЕсли;

		Если ИмяФормы = "БизнесПроцесс.Приглашение.Форма.ФормаЗадачиОзнакомиться" Тогда

			Если РеквизитыПроцесса.РезультатПриглашения 
				= Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками
				Или РеквизитыПроцесса.РезультатПриглашения 
					= Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками Тогда
				Результат = Результат + ПолучитьHTMLреквизита(
					НСтр("ru = 'Цикл'"), 
					РеквизитыПроцесса.НомерИтерации);
			КонецЕсли;

			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Результат'"), 
				РеквизитыПроцесса.РезультатПриглашения);

			ТочкиМаршрута = Новый Массив;
			ТочкиМаршрута.Добавить(БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить);

			НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(
				СсылкаНаЗадачу, "ЗадачаИсполнителя");

			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс); 
			Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
			Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЗадачаЗадачаИсполнителя.Исполнитель КАК Участник,
				|	ЗадачаЗадачаИсполнителя.ДатаИсполнения КАК Дата_ответа,
				|	РезультатыПриглашения.РезультатПриглашения КАК Результат,
				|	РезультатыПриглашения.ЯвкаОбязательна КАК Явка_обязательна
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
				|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Приглашение.РезультатыПриглашения КАК РезультатыПриглашения
				|		ПО ЗадачаЗадачаИсполнителя.Ссылка = РезультатыПриглашения.ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
				|	И ЗадачаЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)
				|	И РезультатыПриглашения.НомерИтерации = &НомерИтерации";

			СформироватьТаблицуИсполнителей(Результат, Запрос, НСтр("ru = 'Участники:'"));

		КонецЕсли;
	
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			БизнесПроцесс,
			"НовыйСрок,
			|ГлавнаяЗадача");
		
		Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Главная задача'"), РеквизитыПроцесса.ГлавнаяЗадача);
		
		Если БизнесПроцесс.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
		
			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Старый срок'"), 
				РеквизитыПроцесса.ГлавнаяЗадача.СрокИсполнения);
			
			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Новый срок'"), 
				РеквизитыПроцесса.НовыйСрок);
		КонецЕсли;
	
	КонецЕсли;

	//закрываем HTML
	Результат = Результат + "</div></body></html>";

	Возврат Результат;

КонецФункции

Функция ПолучитьHTMLреквизита(ИмяРеквизита, ЗначениеРеквизита, Вертикально = Ложь, Картинка = Неопределено)

	ЗначениеРеквизитаСтр = "&nbsp;";

	Если МП_СлужебныйПовтИсп.ПоддерживаемыеТипыСсылочныхДанных().Найти(ТипЗнч(ЗначениеРеквизита)) = Неопределено Тогда
		ЗначениеРеквизитаСтр = Строка(ЗначениеРеквизита);
	Иначе
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(ЗначениеРеквизитаСтр, ЗначениеРеквизита, "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Картинка) Тогда
		Если ТипЗнч(Картинка) = Тип("Картинка") Тогда
			ДвоичныеДанныеФото = Картинка.ПолучитьДвоичныеДанные();
			Формат = Строка(Картинка.Формат());
		Иначе
			ДвоичныеДанныеФото = Неопределено;
			Формат = ФорматКартинки.НеизвестныйФормат;
		КонецЕсли;

		СтрокаИсточника = "data:image/" + Формат + ";base64," + Base64Строка(ДвоичныеДанныеФото);
		ЗначениеКартинки = СтрШаблон("<img border=""0"" src=""%1"" height = ""#height"">", СтрокаИсточника);
	Иначе
		ЗначениеКартинки = "";
	КонецЕсли;

	Если Вертикально Тогда
		Результат = "<p><b>" + ИмяРеквизита + ":</b></p><p>" + ЗначениеКартинки + ЗначениеРеквизитаСтр + "</p>";
	Иначе
		Результат = "<p><b>" + ИмяРеквизита + ":</b> " + ЗначениеКартинки + ЗначениеРеквизитаСтр + "</p>";
	КонецЕсли;

	Возврат Результат;

КонецФункции


// Формирует печатную форму для представления предмета в мобильном приложении
// Параметры:
// Предмет - ссылка на объект базы данных, который передается в качестве предмета.
//
// Возвращаемое значение:
//	Табличный документ или форматированный документ с печатной формой предмета 
//
Функция ПолучитьСодержаниеПредмета(Предмет) Экспорт

	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("РеквизитыКарточки", 	Истина);
		ПараметрыПечати.Вставить("ПриложенныеФайлы", 	Истина);
		ПараметрыПечати.Вставить("ВерсииФайлов", 		Ложь);
		ПараметрыПечати.Вставить("ЭЦП", 				Ложь);
		ПараметрыПечати.Вставить("СвязанныеДокументы", 	Ложь);
		ПараметрыПечати.Вставить("ЖурналПередачи", 		Ложь);
		ПараметрыПечати.Вставить("Рассмотрение", 		Ложь);
		ПараметрыПечати.Вставить("Исполнение", 			Ложь);
		ПараметрыПечати.Вставить("Ознакомление", 		Ложь);
		ПараметрыПечати.Вставить("Поручения", 			Ложь);
		ПараметрыПечати.Вставить("Задачи", 				Ложь);
		ПараметрыПечати.Вставить("ДопРеквизиты",		Истина);
		ПараметрыПечати.Вставить("СоставКомплекта",		Истина);
		ПараметрыПечати.Вставить("Резолюции",			Истина);

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Предмет, 
			"Справочник.ВходящиеДокументы", 
			"Карточка",
			ПараметрыПечати);

//	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
//		
//		ПараметрыПечати = Новый Структура;
//		ПараметрыПечати.Вставить("РеквизитыКарточки", 	Истина);
//		ПараметрыПечати.Вставить("ПриложенныеФайлы", 	Истина);
//		ПараметрыПечати.Вставить("ВерсииФайлов", 		Ложь);
//		ПараметрыПечати.Вставить("ЭЦП", 				Ложь);
//		ПараметрыПечати.Вставить("СвязанныеДокументы", 	Ложь);
//		ПараметрыПечати.Вставить("ЖурналПередачи", 		Ложь);
//	 	ПараметрыПечати.Вставить("Согласование", 		Истина);
//		ПараметрыПечати.Вставить("Утверждение", 		Истина);
//		ПараметрыПечати.Вставить("Ознакомление", 		Ложь);
//		ПараметрыПечати.Вставить("Поручения", 			Ложь);
//		ПараметрыПечати.Вставить("Задачи", 				Ложь);
//		ПараметрыПечати.Вставить("ДопРеквизиты",		Истина);
//		ПараметрыПечати.Вставить("СоставКомплекта",		Истина);
//		ПараметрыПечати.Вставить("Резолюции",			Истина);
//
//		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Предмет, 
//			"Справочник.ИсходящиеДокументы", 
//			"Карточка",
//			ПараметрыПечати);
//
//	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
//		
//		ПараметрыПечати = Новый Структура;
//		ПараметрыПечати.Вставить("РеквизитыКарточки", 	Истина);
//		ПараметрыПечати.Вставить("ПриложенныеФайлы", 	Истина);
//		ПараметрыПечати.Вставить("ВерсииФайлов", 		Ложь);
//		ПараметрыПечати.Вставить("ЭЦП", 				Ложь);
//		ПараметрыПечати.Вставить("СвязанныеДокументы", 	Ложь);
//		ПараметрыПечати.Вставить("ЖурналПередачи", 		Ложь);
//	 	ПараметрыПечати.Вставить("Согласование", 		Истина);
//		ПараметрыПечати.Вставить("Утверждение", 		Истина);
//		ПараметрыПечати.Вставить("Рассмотрение", 		Истина);
//		ПараметрыПечати.Вставить("Исполнение", 			Ложь);
//		ПараметрыПечати.Вставить("Ознакомление", 		Ложь);
//		ПараметрыПечати.Вставить("Поручения", 			Ложь);
//		ПараметрыПечати.Вставить("Задачи", 				Ложь);
//		ПараметрыПечати.Вставить("ДопРеквизиты",		Истина);
//		ПараметрыПечати.Вставить("СоставКомплекта",		Истина);
//		ПараметрыПечати.Вставить("ИсторияСрокаДействия",Ложь);
//		ПараметрыПечати.Вставить("Резолюции",			Истина);
//
//		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Предмет, 
//			"Справочник.ВнутренниеДокументы", 
//			"Карточка",
//			ПараметрыПечати);

	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Предмет, 
			"Справочник.Контрагенты", 
			"Карточка");

	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда		
		
		ВТаблице = Перечисления.ТипыПрограммыПротокола.ВТаблице;
			
		РеквизитыМероприятия = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет,
				"ТипПротокола, ТипПрограммы, ВидМероприятия");
			
		ТипПротокола = РеквизитыМероприятия.ТипПротокола;
		ТипПрограммы = РеквизитыМероприятия.ТипПрограммы;
		ПротокольноеМероприятие = РеквизитыМероприятия.ВидМероприятия.ПротокольноеМероприятие;
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ЗаголовокОтчета", "");
		ПараметрыПечати.Вставить("ВыводитьДатуИМестоПроведения", Истина);
		ПараметрыПечати.Вставить("ВыводитьУчастников", Истина);
		ПараметрыПечати.Вставить("ВыводитьОрганизацию", Истина);
		ПараметрыПечати.Вставить("ВыводитьОрганизатора", Истина);
		
		Если ПротокольноеМероприятие Тогда 
			ПараметрыПечати.Вставить("ВыводитьПредседателяИСекретаря", Истина);
		Иначе
			ПараметрыПечати.Вставить("ВыводитьПредседателяИСекретаря", Ложь);
		КонецЕсли;
		
		Если ТипПрограммы = ВТаблице Тогда 
			ПараметрыПечати.Вставить("ВыводитьПрограмму", Истина);
		Иначе
			ПараметрыПечати.Вставить("ВыводитьПрограмму", Ложь);
		КонецЕсли;
		
		Если ТипПротокола = ВТаблице И ПротокольноеМероприятие Тогда 
			ПараметрыПечати.Вставить("ВыводитьПротокол", Истина);
		Иначе	
			ПараметрыПечати.Вставить("ВыводитьПротокол", Ложь);
		КонецЕсли;

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Предмет, 
			"Справочник.Мероприятия", 
			"Карточка",
			ПараметрыПечати);

	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Предмет, 
			"Справочник.ТемыОбсуждений", 
			"Карточка");

	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Предмет, 
			"Справочник.СообщенияОбсуждений", 
			"Карточка");

	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Проекты") Тогда

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Предмет, 
			"Справочник.Проекты", 
			"Карточка");

	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Предмет, 
			"Справочник.ПроектныеЗадачи", 
			"Карточка");

	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.Отсутствие") Тогда

		Возврат СформироватьПолучитьПечатнуюФормуОбъекта(Предмет, 
			"Документ.Отсутствие", 
			"Карточка");

	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ВходящееПисьмо")
		Или ТипЗнч(Предмет) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		
		ТекстHTML = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
			Предмет,
			Новый УникальныйИдентификатор,
			Истина, // ВыводитьШапку
			Истина, // СокращенныйСписокАдресатов
			Ложь); // ВключитьРежимРедактированияHTML
			
		ФорматированныйДок = Новый ФорматированныйДокумент();
		ФорматированныйДок.УстановитьHTML(ТекстHTML, Новый Структура());
		
		Возврат ФорматированныйДок;

	Иначе

		Возврат Неопределено;

	КонецЕсли;

КонецФункции

// Формирирует указанную печатную форму объекта.
//
// Параметры:
//  Объект          - Ссылка - Ссылка на объект для которого формируется печаетная форме;
//  МенеджерПечати  - Строка - Описание менеджера печати, который формирует формы;
//  ИменаМакетов    - Строка - Имена макетов печатных форм, которые нужно сформировать;
//  ПараметрыПечати - Структура - Структура параметров печати;
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Сформированая печатная форма, Неопределено в противном случае.
//
Функция СформироватьПолучитьПечатнуюФормуОбъекта(Объект, МенеджерПечати, ИменаМакетов, 
	ПараметрыПечати = Неопределено)

	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(Объект);

	Если ПараметрыПечати = Неопределено Тогда
		ПараметрыПечати = Новый Структура;
	КонецЕсли;

	ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(
		МенеджерПечати, 
		ИменаМакетов, 
		МассивОбъектов,
		ПараметрыПечати);

	КоллекцияПечатныхФорм = ПечатныеФормы.КоллекцияПечатныхФорм;
	Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
		Если КоллекцияПечатныхФорм[0].ТабличныйДокумент <> Неопределено Тогда
			Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Проверяет, что задача доступна текущему пользователю в момент проверки по правам, ролям
// и делегировани.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаПользователя - проверяемая задача.
// 
// Возвращаемое значение:
//  РезультатЗапроса - Результат выполнления запроса по проверке прав и получению реквизитов.
//
Функция ПолучитьРеквизитыЗадачиСПроверкойДоступности(Задача) Экспорт

	// Запросы последовательно выполняют следующие действия:
	// 1. Получает все области делигирования по области "Задачи и поручения".
	// 2. Выбирает все активные области по текущему пользователю.
	// 3. Получает данные указанной задачи если выполнитлось условие, что пользователь это или текущий
	//    пользователь или выполняется условие делегирования, или задача является ролевой для тех же 
	//    пользователей.

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("Исполнитель", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("Ссылка"     , Задача);
	Запрос.УстановитьПараметр("ОбъектМетаданных", 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Задача.ЗадачаИсполнителя"));

	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбластиЗамещенияСостав.Ссылка
		|ПОМЕСТИТЬ ОбластиЗамещения
		|ИЗ
		|	Справочник.ОбластиЗамещения.Состав КАК ОбластиЗамещенияСостав
		|ГДЕ
		|	ОбластиЗамещенияСостав.ОбъектМетаданных = &ОбъектМетаданных
		|	И НЕ ОбластиЗамещенияСостав.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ОбластиЗамещения.ВсеОбласти)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗамещающиеИПомощники.Сотрудник,
		|	ЗамещающиеИПомощники.Замещающий
		|ПОМЕСТИТЬ Делегирующие
		|ИЗ
		|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ЗамещающиеИПомощникиВопросыЗамещения
		|		ПО ЗамещающиеИПомощники.Ссылка = ЗамещающиеИПомощникиВопросыЗамещения.Ссылка
		|ГДЕ
		|	ЗамещающиеИПомощники.Замещающий = &Исполнитель
		|	И ЗамещающиеИПомощники.Действует
		|	И ЗамещающиеИПомощникиВопросыЗамещения.Область В
		|		(ВЫБРАТЬ
		|			ОбластиЗамещения.Ссылка
		|		ИЗ
		|			ОбластиЗамещения КАК ОбластиЗамещения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса,
		|	ЗадачаИсполнителя.ПометкаУдаления,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.Автор,
		|	ЗадачаИсполнителя.Описание,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.Важность,
		|	ЗадачаИсполнителя.Дата,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.РезультатВыполнения,
		|	ЗадачаИсполнителя.ВерсияДанных,
		|	ЗадачаИсполнителя.ТочкаМаршрута,
		|	ЗадачаИсполнителя.ДатаПринятияКИсполнению,
		|	ЗадачаИсполнителя.ПринятаКИсполнению,
		|	ЗадачаИсполнителя.Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка = &Ссылка
		|	И (ЗадачаИсполнителя.Исполнитель = &Исполнитель
		|	ИЛИ ЗадачаИсполнителя.Исполнитель В
		|		(ВЫБРАТЬ
		|			Делегирующие.Сотрудник
		|		ИЗ
		|			Делегирующие КАК Делегирующие)
		|	ИЛИ 1 В
		|		(ВЫБРАТЬ
		|			1
		|		ИЗ
		|			РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиЗадач
		|		ГДЕ
		|			ИсполнителиЗадач.РольСотрудник = ЗадачаИсполнителя.РольИсполнителя
		|			И (ИсполнителиЗадач.ИсполнительДелегат = &Исполнитель
		|			ИЛИ ИсполнителиЗадач.ИсполнительДелегат В
		|				(ВЫБРАТЬ
		|					Делегирующие.Сотрудник
		|				ИЗ
		|					Делегирующие КАК Делегирующие)))
		|	И ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";

	Возврат Запрос.Выполнить();

КонецФункции

// Проверяет возможность переадресовать задачу другому пользователю.
//
// Параметры:
//  Задача			 - ЗадачаСсылка.ЗадачаПользователя - Ссылка на проверяемую задачу;
//  НовыйИсполнитель - СправочникСсылка.Пользователи - Новый исполнитель задачи.
// 
// Возвращаемое значение:
//  Истина - Если операция возможна.
//
Процедура ПроверитьВозможностьПереадресацииЗадачи(Задача, НовыйИсполнитель) Экспорт
	
	Если ТипЗнч(НовыйИсполнитель) = Тип("СправочникСсылка.ПолныеРоли")
		И Не БизнесПроцессыИЗадачиСервер.ЕстьИсполнителиРоли(НовыйИсполнитель) Тогда
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'error:Задача ""%1"" не перенаправлена. 
				|На указанную роль ""%2"" не назначено ни одного исполнителя.'"),
			Строка(Задача),
			Строка(НовыйИсполнитель));

		ВызватьИсключение (ТекстИсключения);

	КонецЕсли;

	// Проверка прав доступа нового исполнителя на предметы задачи
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Предметы = Задача.Предметы.Выгрузить();
	
	Если Предметы.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
		
	// Определим предметы для проверок
	ПредметыДляПроверкиПрав = 
		Мультипредметность.ПредметыДляПроверкиПрав(
			Предметы.ВыгрузитьКолонку("Предмет"), Задача.БизнесПроцесс);
		
	ПредметыДляПроверкиПравДоступаУчастников = 
		ПредметыДляПроверкиПрав.ДляПроверкиПравДоступаУчастников;
	
	ПредметыДляПроверкиНарушенияПолитикиДоступа = 
		ПредметыДляПроверкиПрав.ДляПроверкиНарушенияПолитикиДоступа;
	
	ПредметыСОграниченнымДоступом = Новый Массив;
	
	// Проверка нарушения политики доступа при расширении рабочей группы предмета.
	Участники = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(Участники, НовыйИсполнитель);
	
	Для Каждого Предмет Из ПредметыДляПроверкиНарушенияПолитикиДоступа Цикл
		Попытка
			Мультипредметность.ПроверитьНарушениеПолитикиДоступаПриРасширенииРабочейГруппыПредмета(
				Предмет, Участники);
		Исключение
			ПредметыСОграниченнымДоступом.Добавить(Предмет);
		КонецПопытки;
	КонецЦикла;
	
	// Проверка прав на предметы без автоматического заполнения рабочей группы.
	
	СотрудникиДляПроверкиПрав = Мультипредметность.СотрудникиДляПроверкиПрав(Участники);
	
	ПраваУчастниковНаПредметы = ДокументооборотПраваДоступа.ПраваПользователейПоОбъектам(
		ПредметыДляПроверкиПравДоступаУчастников,
		Истина,
		СотрудникиДляПроверкиПрав.ВыгрузитьКолонку("Участник"));
	
	Для Каждого Предмет Из ПредметыДляПроверкиПравДоступаУчастников Цикл
		
		Для Каждого СтрокаПользователь Из СотрудникиДляПроверкиПрав Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("ОбъектДоступа", Предмет);
			Отбор.Вставить("Пользователь", СтрокаПользователь.Участник);
			
			НайденныеПрава = ПраваУчастниковНаПредметы.НайтиСтроки(Отбор);
			Если НайденныеПрава.Количество() = 0 Тогда
				ПредметыСОграниченнымДоступом.Добавить(Предмет);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	КоличествоПредметов = ПредметыСОграниченнымДоступом.Количество();
	
	Если КоличествоПредметов <> 0 Тогда
		
		Отказ = Истина;
		
		ТекстОшибки = "%1%2";
		
		Если ТипЗнч(НовыйИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ПерваяЧастьТекстаОшибки = НСтр("ru = 'У некоторых исполнителей роли нет прав '");
		Иначе
			ПерваяЧастьТекстаОшибки = НСтр("ru = 'У пользователя нет прав '");
		КонецЕсли;
		
		Если КоличествоПредметов = 1 Тогда
			ВтораяЧастьТекстаОшибки = СтрШаблон(
				НСтр("ru = 'на предмет ""%1""'"),
				Строка(ПредметыСОграниченнымДоступом[0]));
		Иначе
			
			ПредметыСтрокой = "";
			
			ПереносСтроки = "";
			
			Для Каждого Предмет Из ПредметыСОграниченнымДоступом Цикл
				ПредметыСтрокой = ПредметыСтрокой
					+ ПереносСтроки
					+ Символы.Таб
					+ Строка(Предмет);
				
				ПереносСтроки = Символы.ПС;
			КонецЦикла;
			
			ВтораяЧастьТекстаОшибки = НСтр("ru = 'на предметы
				|""%1""'");
			
			ВтораяЧастьТекстаОшибки = СтрШаблон(
				ВтораяЧастьТекстаОшибки,
				ПредметыСтрокой);
			
		КонецЕсли;
		
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПерваяЧастьТекстаОшибки, ВтораяЧастьТекстаОшибки);
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'warning:Задача ""%1"" не перенаправлена. %2. Задача возвращена.'"),
			Строка(Задача),
			ТекстОшибки);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции

