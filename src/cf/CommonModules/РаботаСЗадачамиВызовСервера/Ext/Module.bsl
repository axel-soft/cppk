////////////////////////////////////////////////////////////////////////////////
// Работа с задачами (вызов сервера).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает на доработку задачу.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача или действие..
//  ДанныеВозвратаНаДоработку - См. РаботаСЗадачамиКлиентСервер.НовыйДанныеВозвратаНаДоработку.
// 	
// Возвращаемое значение:
//  Структура - Результат возврата на доработку:
//   * ИзмененнаяЗадача - Неопределено, ДокументСсылка.Задача - Измененная задача.
//   * ДлительнаяОперация - Неопределено, Структура - Выполняемая длительная  операция, см. ДлительныеОперации.ВыполнитьПроцедуру.
//
Функция ВернутьНаДоработку(Знач ЗадачаИлиДействие, Знач ДанныеВозвратаНаДоработку) Экспорт
	
	РезультатВозвратаНаДоработку = Новый Структура;
	РезультатВозвратаНаДоработку.Вставить("ИзмененнаяЗадача", Неопределено);
	РезультатВозвратаНаДоработку.Вставить("ДлительнаяОперация", Неопределено);
	
	Если Не ЗначениеЗаполнено(ЗадачаИлиДействие) Тогда
		Возврат РезультатВозвратаНаДоработку;
	КонецЕсли;
	
	Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
		
		Задача = ЗадачаИлиДействие;
		ДействиеЗадачи = Неопределено;
		РеквизитыДействияЗадачи = Неопределено;
		
	ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		ДействиеЗадачи = ЗадачаИлиДействие;
		РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи,
			"Задача");
		
		Задача = РеквизитыДействияЗадачи.Задача;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестное значение параметра %1 (%2)'"),
			ЗадачаИлиДействие,
			ТипЗнч(ЗадачаИлиДействие));
		
	КонецЕсли;
	
	ДанныеДоступностиКоманды = РаботаСЗадачами.ДанныеДоступностиКомандыЗадач(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача), 
		Метаданные.Документы.Задача.Команды.ВернутьНаДоработку);
	Если Не ДанныеДоступностиКоманды.Доступность Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Невозможно выполнить команду ""%1"" для указанных задач'"),
			Метаданные.Документы.Задача.Команды.ВернутьНаДоработку);
	КонецЕсли;
	
	РезультатВозвратаНаДоработку.ИзмененнаяЗадача = Задача;
	
	ЭтоДлительнаяОперация = РаботаСЗадачами.ЭтоДлительнаяОперация(
		ДанныеДоступностиКоманды.ПодходящиеЗадачи);
	Если ЭтоДлительнаяОперация Тогда
		
		ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне();
		ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
			ПараметрыВыполненияВФоне,
			"РаботаСЗадачами.ВернутьНаДоработку",
			Задача,
			ДанныеВозвратаНаДоработку,
			Сотрудники.ОсновнойСотрудник());
		Если ДлительнаяОперация.Статус = "Выполняется" Тогда
			
			РезультатВозвратаНаДоработку.ДлительнаяОперация = ДлительнаяОперация;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
			
			// Возвращение длительной операции не требуется.
			
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ВызватьИсключение ДлительнаяОперация.ПодробноеПредставлениеОшибки;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Отменено" Тогда
			
			ВызватьИсключение НСтр("ru = 'Не удалось вернуть на доработку задачу, длительная операция отменена.'");
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный статус длительной операции %1'"),
				ДлительнаяОперация.Статус);
			
		КонецЕсли;
		
	Иначе
		
		РаботаСЗадачами.ВернутьНаДоработку(
			Задача,
			ДанныеВозвратаНаДоработку,
			Сотрудники.ОсновнойСотрудник());
		
	КонецЕсли;
	
	
	Возврат РезультатВозвратаНаДоработку;
	
КонецФункции

// Берёт в работу действия задачи.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
//  ВыбранныйФактическийИсполнитель - Структура.
//
// Возвращаемое значение:
//  Структура - Результат взятия в работу:
//   * ВзятиеВРаботуОбработано - Булево.
//   * НужноВыбратьФактическогоИсполнителя - Булево.
//   * ДействияДляВыбора - Массив.
//
Функция ВзятьВРаботу(Знач ДействияЗадач, Знач ВыбранныйФактическийИсполнитель) Экспорт
	
	РезультатВзятияВРаботу = Новый Структура;
	РезультатВзятияВРаботу.Вставить("ВзятиеВРаботуОбработано", Ложь);
	РезультатВзятияВРаботу.Вставить("НужноВыбратьФактическогоИсполнителя", Ложь);
	РезультатВзятияВРаботу.Вставить("ДействияДляВыбора", Новый Массив);
	
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		РезультатВзятияВРаботуДействия =
			РаботаСЗадачами.ВзятьВРаботу(
				ДействиеЗадачи,
				Сотрудники.ОсновнойСотрудник(),
				ВыбранныйФактическийИсполнитель);
		
		РезультатВзятияВРаботу.ВзятиеВРаботуОбработано = 
			РезультатВзятияВРаботу.ВзятиеВРаботуОбработано
			Или РезультатВзятияВРаботуДействия.ВзятиеВРаботуОбработано;
		
		РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя = 
			РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя
			Или РезультатВзятияВРаботуДействия.НужноВыбратьФактическогоИсполнителя;
		
		Если РезультатВзятияВРаботуДействия.НужноВыбратьФактическогоИсполнителя Тогда
			
			РезультатВзятияВРаботу.ДействияДляВыбора.Добавить(ДействиеЗадачи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатВзятияВРаботу;
	
КонецФункции

// Включает отчет об исполнении и приложения в отчет об исполнении вышестоящей задачи.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача или действие.
// 	
// Возвращаемое значение:
//  Структура - Результат взятия отчета об исполнении:
//   * ИзмененноеДействие - ДокументСсылка.ДействиеЗадачи, Неопределено - Измененное действие.
//   * НужноВыбратьФактическогоИсполнителя - Булево.
//   * ДействиеДляВзятияВРаботу - ДокументСсылка.ДействиеЗадачи, Неопределено - Действие для взятия в работу.
//
Функция ВзятьОтчетОбИсполненииИПриложения(Знач ЗадачаИлиДействие) Экспорт
	
	Возврат РаботаСЗадачами.ВзятьОтчетОбИсполненииИПриложения(
		ЗадачаИлиДействие,
		Сотрудники.ОсновнойСотрудник());
	
КонецФункции

// Выполняет действие задачи по указанному варианту.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи - Действия задач.
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  ПараметрыВыполнения - См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач
// 
// Возвращаемое значение:
//  См. РаботаСЗадачамиКлиентСервер.НовыйДанныеВыполненияДействийЗадач
//
Функция ВыполнитьДействиеЗадачи(Знач ДействияЗадач, Знач РезультатДействия, Знач ПараметрыВыполнения) Экспорт
	
	Если ДействияЗадач.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не указано действие задачи.'");
	КонецЕсли;
	
	ЧислоЗадач = ДействияЗадач.Количество();
	
	РеквизитыДействийЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДействияЗадач,
		"Задача, ВидДействия, Источник, Исполнитель, ВерсияДанных, РезультатДействияТекстом");
	
	ПриложенияЗадач = Новый Соответствие;
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		РеквизитыДействия = РеквизитыДействийЗадач[ДействиеЗадачи];
		ПриложенияЗадач[ДействиеЗадачи] = РаботаСЗадачами.ПриложенияЗадачи(
			РеквизитыДействия.Задача,
			ДействиеЗадачи);
	КонецЦикла;
	
	// Формирование возвращаемого значения.
	ДанныеВыполнения = РаботаСЗадачамиКлиентСервер.НовыйДанныеВыполненияДействийЗадач();
	
	ДанныеВыполнения.ЧислоЗадач = ЧислоЗадач;
	
	// Выбор исполнителя.
	ЗаполнитьФактическогоИсполнителя(
		ДействияЗадач,
		РеквизитыДействийЗадач,
		ПараметрыВыполнения,
		ДанныеВыполнения);
	
	// Выбор помощника при необходимости.
	ОтобразитьВыборПомощникаПриНеобходимости(ДействияЗадач, РезультатДействия, ПараметрыВыполнения, ДанныеВыполнения);
	
	// Проверка наличия подзадач.
	Если ПараметрыВыполнения.ЗакрыватьПодзадачи = Неопределено Тогда
		
		ДанныеПодзадачПодлежащихЗакрытию =
			РаботаСЗадачами.ПодзадачиПодлежащиеЗакрытию(ДействияЗадач);
		ЕстьНезавершенныеПодзадачи =	
			ДанныеПодзадачПодлежащихЗакрытию.ПодзадачиПодлежащиеЗакрытию.Количество() > 0;
		ДействияСПодзадачами = ДанныеПодзадачПодлежащихЗакрытию.ДействияСПодзадачами;
		
		Если ЕстьНезавершенныеПодзадачи Тогда
			
			ДанныеВыполнения.ПредложитьЗакрытьПодзадачи = Истина;
			ДанныеВыполнения.КоличествоНезавершенныхПодзадач =
				ДанныеПодзадачПодлежащихЗакрытию.ПодзадачиПодлежащиеЗакрытию.Количество();
			
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
			Если ЧислоЗадач > 1 Тогда
				Для Каждого ДействиеСПодзадачами Из ДействияСПодзадачами Цикл
					Причина = НСтр("ru = 'Есть невыполненные подзадачи.'");
					ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
						Новый Структура("Задача, Причина", 
						ДействиеСПодзадачами, Причина));
				КонецЦикла;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обязательное заполнение приложений.
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		РеквизитыДействия = РеквизитыДействийЗадач[ДействиеЗадачи];
		ПриложенияЗадачи = ПриложенияЗадач[ДействиеЗадачи];
		
		Для Каждого ДанныеПриложенияЗадачи Из ПриложенияЗадачи Цикл
			
			Если Не ДанныеПриложенияЗадачи.ОбязательноеЗаполнение
				Или Не ЗначениеЗаполнено(ДанныеПриложенияЗадачи.ИмяПредмета)
				Или ЗначениеЗаполнено(ДанныеПриложенияЗадачи.Приложение) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеВыполнения.ПоказатьПредупреждение = Истина;
			
			Если ДействияЗадач.Количество() = 1 Тогда
				ДанныеВыполнения.Предупреждения.Добавить(
					СтрШаблон(
						НСтр("ru = 'Не введен заполняемый предмет ""%1""'"),
						ДанныеПриложенияЗадачи.ИмяПредмета));
			Иначе
				ДанныеВыполнения.Предупреждения.Добавить(
					СтрШаблон(
						НСтр("ru = 'Не введен заполняемый предмет ""%1"" у задачи ""%2""'"),
						ДанныеПриложенияЗадачи.ИмяПредмета,
						ДействиеЗадачи));
			Конецесли;
			
			Если ЧислоЗадач > 1 Тогда
				Причина = СтрШаблон(
						НСтр("ru = 'Не введен заполняемый предмет ""%1""'"),
						ДанныеПриложенияЗадачи.ИмяПредмета);
				ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
					Новый Структура("Задача, Причина", 
					ДействиеЗадачи, Причина));
			КонецЕсли;	
			
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверка занятых файлов.
	Если Не ПараметрыВыполнения.ЗанятыеФайлыПроверены Тогда
		
		ФайлыДляПроверки = Новый Массив;
		ВладельцыФайлов = Новый Массив;
		Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
			
			РеквизитыДействия = РеквизитыДействийЗадач[ДействиеЗадачи];
			ПриложенияЗадачи = ПриложенияЗадач[ДействиеЗадачи];
			
			Для Каждого ДанныеПриложениеЗадачи Из ПриложенияЗадачи Цикл
				
				Если ТипЗнч(ДанныеПриложениеЗадачи.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
					ФайлыДляПроверки.Добавить(ДанныеПриложениеЗадачи.Приложение);
				Иначе
					ВладельцыФайлов.Добавить(ДанныеПриложениеЗадачи.Приложение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ФайлыПриложений = РаботаСЗадачами.ФайлыПриложений(ВладельцыФайлов);
		Для Каждого КлючИЗначение Из ФайлыПриложений Цикл
			ФайлыПриложения = КлючИЗначение.Значение;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФайлыДляПроверки, ФайлыПриложения);
		КонецЦикла;
		
		ДанныеВыполнения.ФайлыДляПроверки =
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(ФайлыДляПроверки);
		
		Если ДанныеВыполнения.ФайлыДляПроверки.Количество() > 0 Тогда
			
			КоличествоЗанятыхФайлов = РаботаСФайлами.ПолучитьКоличествоЗанятыхФайлов(
				Неопределено,
				Пользователи.ТекущийПользователь(),
				Истина,
				Сотрудники.ВсеСотрудникиТекущегоПользователя(),
				ФайлыДляПроверки);
			Если КоличествоЗанятыхФайлов > 0 Тогда
				
				ДанныеВыполнения.ПроверитьЗанятыеФайлы = Истина;
				
				Если ЧислоЗадач > 1 Тогда
					Причина = НСтр("ru = 'Есть занятые файлы.'");
					ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
						Новый Структура("Задача, Причина", 
						ДействиеЗадачи, Причина));
				КонецЕсли;	
				
				ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка изменения версии данных.
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ВерсииДанных) Тогда
		РаботаСЗадачами.ПередИнтерактивнымВыполнениемДействияПроверкаВерсииДанных(
			ДействиеЗадачи,
			ПараметрыВыполнения.ВерсииДанных,
			РеквизитыДействия,
			ДанныеВыполнения);
	КонецЕсли;
	
	// Проверка заполнения данных возврата на доработку.
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		РеквизитыДействия = РеквизитыДействийЗадач[ДействиеЗадачи];
		
		Если ЗначениеЗаполнено(РеквизитыДействия.Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДействия.Задача, "ВидЗадачи");
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
		
		Если РезультатДействия <> ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДействияЗадач.Количество() > 1 Тогда
			ВызватьИсключение НСтр("ru = 'Массовый возврат на доработку не поддерживается.'");
		КонецЕсли;
		
		Если ПараметрыВыполнения.ДанныеВозвратаНаДоработку = Неопределено Тогда
			
			ДанныеВыполнения.ТребуетсяВвестиПричинуВозврата = Истина;
			ДанныеВыполнения.ОбщаяПричинаВозврата = РеквизитыДействия.РезультатДействияТекстом;
			ДанныеВыполнения.ЗадачаДляВозврата = РеквизитыДействия.Задача;
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка отчетов об исполнении.
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		РеквизитыДействия = РеквизитыДействийЗадач[ДействиеЗадачи];
		
		Если ЗначениеЗаполнено(РеквизитыДействия.Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (РезультатДействия = Справочники.РезультатыДействийЗадач.СогласованоСЗамечаниями
				Или РезультатДействия = Справочники.РезультатыДействийЗадач.НеСогласовано)
			И Не ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
			
			Причина = НСтр("ru = 'Поле ""Комментарий"" не заполнено'");
			
			ДанныеВыполнения.Предупреждения.Добавить(Причина);
			ДанныеВыполнения.ПоказатьПредупреждение = Истина;
			
			Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
				
				ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
					Новый Структура("Задача, Причина", 
					ДействиеЗадачи, Причина));
			КонецЕсли;	
			
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Дополнительный вопрос для "опасного" действия.
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.Завершил
			И СтрНайти(ПараметрыВыполнения.ДанныеФормыВладельца.ИмяФормы, "СогласованиеВРежимеЗамечаний") = 0 Тогда
		
		Если ПустаяСтрока(ПараметрыВыполнения.ОтветНаПроизвольныйВопрос) Тогда
			
			// Нужно задать вопрос.
			ВидЗадачи = НСтр("ru = 'действия'"); // если действий несколько.
			Если ДействияЗадач.Количество() = 1 Тогда
				// Если действие одно, то в уточняющем вопросе укажем, какое:
				ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					РеквизитыДействийЗадач[ДействияЗадач[0]].Задача, "ВидЗадачи");
				Если ВидЗадачи = Справочники.ВидыЗадач.Регистрация Тогда
					// "Регистрация" в винительном падеже по-другому звучит, остальные виды задач одинаково:
					ВидЗадачи = НСтр("ru = 'регистрацию'");
				КонецЕсли;
				ВидЗадачи = НРег("" + ВидЗадачи);
			КонецЕсли;
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			ДанныеВыполнения.ПроизвольныйВопрос.ЗадатьВопрос = Истина;
			ДанныеВыполнения.ПроизвольныйВопрос.Текст = СтрШаблон(НСтр("ru = 'Завершить %1, Вы уверены?'"), ВидЗадачи);
			ДанныеВыполнения.ПроизвольныйВопрос.Кнопки.Добавить(НСтр("ru = 'Да'"));
			ДанныеВыполнения.ПроизвольныйВопрос.Кнопки.Добавить(НСтр("ru = 'Нет'"));
			
		ИначеЕсли ПараметрыВыполнения.ОтветНаПроизвольныйВопрос = НСтр("ru = 'Да'") Тогда
			
			// Пользователь ответил утвердительно. Интерактивное действие не требуется.
			
		ИначеЕсли ПараметрыВыполнения.ОтветНаПроизвольныйВопрос = НСтр("ru = 'Нет'") Тогда
			
			// Пользователь ответил отрицательно. Нужно вернуться к задаче.
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			ДанныеВыполнения.ВернутьсяКЗадаче = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверки, обусловленные источником действия.
	ИнтеграцияЗадач.ПередИнтерактивнымВыполнениемДействия(
		ДействияЗадач,
		РезультатДействия,
		ПараметрыВыполнения,
		ДанныеВыполнения,
		ПриложенияЗадач);
	
	ДанныеВыполнения.ПричинаЗапретаВыполнения =
		Новый ФорматированнаяСтрока(ДанныеВыполнения.ПричинаЗапретаВыполнения);
	
	Если ДанныеВыполнения.ТребуетсяИнтерактивноеДействие Тогда
		Возврат ДанныеВыполнения;
	КонецЕсли;
	
	// Выполнение задачи.
	СчетчикРезультатов = Новый Соответствие;
	ВсеРезультаты = Новый СписокЗначений;
	РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДействияЗадач, "ВидДействия, Задача");
	Если ПараметрыВыполнения.ВыполнитьОтИмени <> Неопределено Тогда
		КтоОтметил = Сотрудники.ОсновнойСотрудникПользователя(ПараметрыВыполнения.ВыполнитьОтИмени);
	Иначе
		КтоОтметил = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		РеквизитыДействия = РеквизитыДействий[ДействиеЗадачи];
		
		Если Не ЗначениеЗаполнено(РезультатДействия) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВсеРезультаты.НайтиПоЗначению(РезультатДействия) = Неопределено Тогда
			ВсеРезультаты.Добавить(РезультатДействия, Строка(РезультатДействия));
		КонецЕсли;
		
		Если СчетчикРезультатов[РезультатДействия] = Неопределено Тогда
			СчетчикРезультатов[РезультатДействия] = 0;
		КонецЕсли;
		СчетчикРезультатов[РезультатДействия] = СчетчикРезультатов[РезультатДействия] + 1;
		
		РаботаСЗадачами.ВыполнитьДействиеЗадачи(
			ДействиеЗадачи,
			РезультатДействия,
			КтоОтметил,
			ПараметрыВыполнения);
		
	КонецЦикла;
	
	// Представление результата.
	ВсеРезультаты.СортироватьПоПредставлению();
	МассивПредставлениеРезультата = Новый Массив;
	Для Каждого ОчереднойРезультат Из ВсеРезультаты.ВыгрузитьЗначения() Цикл
		
		Если ДействияЗадач.Количество() = 1 Тогда
			ПредставлениеРезультатаВарианта = Строка(ОчереднойРезультат);
		Иначе
			ПредставлениеРезультатаВарианта = СтрШаблон("%1 (%2)",
				ОчереднойРезультат,
				СчетчикРезультатов[ОчереднойРезультат]);
		КонецЕсли;
		
		МассивПредставлениеРезультата.Добавить(ПредставлениеРезультатаВарианта);
		
	КонецЦикла;
	ПредставлениеРезультата = СтрСоединить(МассивПредставлениеРезультата, " / ");
	
	// Формирование параметров учета времени.
	ДанныеВыполнения.ПараметрыУчетаВремени = УчетВремени.ПараметрыУчетаВремени(ДействияЗадач[0]);
	
	// Формирование возвращаемого значения.
	ДанныеВыполнения.ПредставлениеРезультата = ПредставлениеРезультата;
	
	Возврат ДанныеВыполнения;
	
КонецФункции

// Возвращает данные вложенного письма.
//
// Параметры:
//  Приложение - ОпределяемыйТип.ПриложениеЗадач - Приложение.
// 
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено - Данные вложенного письма.
//                                 Если есть права на чтение приложения, возвращает Неопределено.
//                                 Если приложение не допустимо просматривать без прав, вызывает исключение.
//                                 Если нет прав на чтение задачи, вызывает исключение.
//
Функция ДанныеВложенногоПисьма(Знач Приложение) Экспорт
	
	Если ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Приложение).Чтение Тогда
		// Есть права на приложение. Особая логика просмотра не требуется.
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РаботаСЗадачами.ЕстьОсобыеПраваПросмотра(Приложение) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для просмотра приложения %1.'"),
			Приложение);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПисьмоОбъект = Приложение.ПолучитьОбъект();
	ДанныеВложенногоПисьма = ВстроеннаяПочтаСервер.ПолучитьДвоичныеДанныеФайлаПисьма(ПисьмоОбъект);
	
	Возврат ДанныеВложенногоПисьма;
	
КонецФункции

// Получает данные файла для просмотра.
// В случае, если это вызов из задачи из той же обработки, выполняет в привилегированном режиме.
//
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы.
//  ИдентификаторФормы - УникальныйИдентификатор.
//  ПредыдущийАдресФайла - Строка.
//
// Возвращаемое значение:
//   Структура - Данные файла. См. РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия.
//
Функция ДанныеФайлаДляОткрытия(ФайлСсылка, ИдентификаторФормы, ПредыдущийАдресФайла) Экспорт
	
	ОтключитьВстроенныйРедактор = Ложь;
	ПраваНаФайл = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ФайлСсылка);
	Если Не ПраваНаФайл.Чтение И ЭтоФайлОбработки(ФайлСсылка) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ОтключитьВстроенныйРедактор = Истина;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		ФайлСсылка,
		Неопределено,
		ИдентификаторФормы,
		Неопределено,
		ПредыдущийАдресФайла);
	
	ДанныеФайла.Вставить("ОтключитьВстроенныйРедактор", ОтключитьВстроенныйРедактор);
	
	Возврат ДанныеФайла;
	
КонецФункции

// Получает данные файла для сохранения.
// В случае, если это вызов из задачи из той же обработки, выполняет в привилегированном режиме.
//
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы.
//  ИдентификаторФормы - УникальныйИдентификатор.
//
// Возвращаемое значение:
//   Структура - Данные файла. См. РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения.
//
Функция ДанныеФайлаДляСохранения(ФайлСсылка, ИдентификаторФормы) Экспорт
	
	Если ЭтоФайлОбработки(ФайлСсылка) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
		ФайлСсылка,
		Неопределено,
		ИдентификаторФормы);
	
	Возврат ДанныеФайла;
	
КонецФункции

// Добавляет приложение задачи.
//
// Параметры:
//  Действие - ДокументСсылка.ДействиеЗадачи.
//  Приложение - ОпределяемыйТип.ПриложениеОтчетовОбИсполнении - Приложение.
// 
// Возвращаемое значение:
//  Структура - Результат добавления приложения:
//   * НужноВыбратьФактическогоИсполнителя - Булево.
//
Функция ДобавитьПриложение(Знач Действие, Знач Приложение) Экспорт
	
	Если ТипЗнч(Приложение) <> Тип("Массив") Тогда
		Приложение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Приложение);
	КонецЕсли;
	
	Возврат РаботаСЗадачами.ДобавитьПриложения(
		Действие,
		Приложение,
		Сотрудники.ОсновнойСотрудник(),
		Истина);
	
КонецФункции


// Закрывает указанные задачи.
//
// Параметры:
//  ЗадачиКЗакрытию - Массив из ДокументСсылка.Задача.
//  ИдентификаторФормы - УникальныйИдентификатор.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Выполняемая длительная  операция, см. ДлительныеОперации.ВыполнитьПроцедуру.
//
Функция Закрыть(Знач ЗадачиКЗакрытию) Экспорт
	
	ДанныеДоступностиКоманды = РаботаСЗадачами.ДанныеДоступностиКомандыЗадач(
		ЗадачиКЗакрытию, 
		Метаданные.Документы.Задача.Команды.Закрыть);
	Если Не ДанныеДоступностиКоманды.Доступность Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Невозможно выполнить команду ""%1"" для указанных задач'"),
			Метаданные.Документы.Задача.Команды.Закрыть);
	КонецЕсли;
	
	ВыполняемаяДлительнаяОперация = Неопределено;
	
	ЭтоДлительнаяОперация = РаботаСЗадачами.ЭтоДлительнаяОперация(
		ДанныеДоступностиКоманды.ПодходящиеЗадачи);
	Если ЭтоДлительнаяОперация Тогда
		
		ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне();
		ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
			ПараметрыВыполненияВФоне,
			"РаботаСЗадачами.ЗакрытьЗадачи",
			ДанныеДоступностиКоманды.ПодходящиеЗадачи);
		Если ДлительнаяОперация.Статус = "Выполняется" Тогда
			
			ВыполняемаяДлительнаяОперация = ДлительнаяОперация;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
			
			// Возвращение длительной операции не требуется.
			
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ВызватьИсключение ДлительнаяОперация.ПодробноеПредставлениеОшибки;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Отменено" Тогда
			
			ВызватьИсключение НСтр("ru = 'Не удалось закрыть задачи, длительная операция отменена.'");
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный статус длительной операции %1'"),
				ДлительнаяОперация.Статус);
			
		КонецЕсли;
		
	Иначе
		
		РаботаСЗадачами.ЗакрытьЗадачи(ДанныеДоступностиКоманды.ПодходящиеЗадачи);
		
	КонецЕсли;
	
	Возврат ВыполняемаяДлительнаяОперация;
	
КонецФункции

// Проверяет заполненность полей задачи и направляет её на исполнение, если все поля корректно заполнены.
//
// Параметры:
//  ПараметрыНаправленияНаИсполнение - см. РаботаСЗадачамиКлиентСервер.НовыйПараметрыНаправленияНаИсполнение.
// 	
// Возвращаемое значение:
// 	См. РаботаСЗадачамиКлиентСервер.НовыйРезультатНаправленияНаИсполнение.
//
Функция НаправитьНаИсполнение(Знач ПараметрыНаправленияНаИсполнение) Экспорт
	
	РезультатНаправленияНаИсполнение =
		РаботаСЗадачами.НаправитьНаИсполнение(ПараметрыНаправленияНаИсполнение);
	
	Возврат РезультатНаправленияНаИсполнение;
	
КонецФункции

// Определяет начало рабочего дня на указанную дату.
//
// Параметры:
//  Дата - Дата - Дата, начало рабочего дня которой необходимо получить.
// 
// Возвращаемое значение:
//  Дата - Начало рабочего дня.
//
Функция НачалоРабочегоДня(Знач Дата) Экспорт
	
	Возврат РаботаСЗадачами.НачалоРабочегоДня(Дата);
	
КонецФункции

// Определяет окончание рабочего дня на указанную дату.
//
// Параметры:
//  Дата - Дата - Дата, окончание рабочего дня которой необходимо получить.
// 
// Возвращаемое значение:
//  Дата - Окончание рабочего дня.
//
Функция ОкончаниеРабочегоДня(Знач Дата) Экспорт
	
	Возврат РаботаСЗадачами.ОкончаниеРабочегоДня(Дата);
	
КонецФункции

// Отменяет указанные задачи.
//
// Параметры:
//  ЗадачиКОтмене - Массив из ДокументСсылка.Задача.
//  ПричинаОтмены - Строка.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Выполняемая длительная  операция, см. ДлительныеОперации.ВыполнитьПроцедуру.
// 
Функция Отменить(Знач ЗадачиКОтмене, Знач ПричинаОтмены) Экспорт
	
	ДанныеДоступностиКоманды = РаботаСЗадачами.ДанныеДоступностиКомандыЗадач(
		ЗадачиКОтмене, 
		Метаданные.Документы.Задача.Команды.Отменить);
	Если Не ДанныеДоступностиКоманды.Доступность Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Невозможно выполнить команду ""%1"" для указанных задач'"),
			Метаданные.Документы.Задача.Команды.Отменить);
	КонецЕсли;
	
	ВыполняемаяДлительнаяОперация = Неопределено;
	
	ЭтоДлительнаяОперация = РаботаСЗадачами.ЭтоДлительнаяОперация(
		ДанныеДоступностиКоманды.ПодходящиеЗадачи);
	Если ЭтоДлительнаяОперация Тогда
		
		ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне();
		ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
			ПараметрыВыполненияВФоне,
			"РаботаСЗадачами.ОтменитьЗадачи",
			ДанныеДоступностиКоманды.ПодходящиеЗадачи,
			ПричинаОтмены);
		Если ДлительнаяОперация.Статус = "Выполняется" Тогда
			
			ВыполняемаяДлительнаяОперация = ДлительнаяОперация;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
			
			// Возвращение длительной операции не требуется.
			
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ВызватьИсключение ДлительнаяОперация.ПодробноеПредставлениеОшибки;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Отменено" Тогда
			
			ВызватьИсключение НСтр("ru = 'Не удалось отменить задачи, длительная операция отменена.'");
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный статус длительной операции %1'"),
				ДлительнаяОперация.Статус);
			
		КонецЕсли;
		
	Иначе
		
		РаботаСЗадачами.ОтменитьЗадачи(ДанныеДоступностиКоманды.ПодходящиеЗадачи, ПричинаОтмены);
		
	КонецЕсли;
	
	Возврат ВыполняемаяДлительнаяОперация;
	
КонецФункции

// Отменяет выполнение действия задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ВерсияДанных - Строка.
//
Процедура ОтменитьВыполнение(Знач ДействиеЗадачи, Знач ВерсияДанных) Экспорт
	
	РаботаСЗадачами.ОтменитьВыполнение(ДействиеЗадачи, ВерсияДанных);
	
КонецПроцедуры

// Формирует параметры выбора результата действия текстом.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Структура - Параметры выбора результата действия текстом. См. РаботаСЗадачами.ПараметрыВыбораРезультатаДействияТекстом().
//   * ОбластьПрименения - ПеречислениеСсылка.ОбластиПримененияШаблоновТекстов.
//   * ЗаголовокФормыВыбора - Строка.
//   * ЗаголовокФормыСоздания - Строка.
//
Функция ПараметрыВыбораРезультатаДействияТекстом(Знач ДействиеЗадачи) Экспорт
	
	ПараметрыФормы = РаботаСЗадачами.ПараметрыВыбораРезультатаДействияТекстом(ДействиеЗадачи);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Формирует параметры добавления приложения задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Структура - Параметры добавления приложения задачи.
//   * ИсточникДействияЗадачи - ЗадачаСсылка.ЗадачаИсполнителя - Точка маршрута процесса, являющаяся источником действия задачи.
//   * БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс, являющийся источником задачи.
//   * ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя - Ведущая задача бизнес-процесса.
//
Функция ПараметрыДобавленияПриложенияЗадачи(Знач ДействиеЗадачи) Экспорт
	
	ИсточникДействияЗадачи = РаботаСЗадачами.ИсточникДействияЗадачи(ДействиеЗадачи);
	Если Не ЗначениеЗаполнено(ИсточникДействияЗадачи) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Нет источника у действия задачи %1'"),
			ДействиеЗадачи);
	КонецЕсли;
	
	ПараметрыДобавленияПриложенияЗадачи = Новый Структура("ИсточникДействияЗадачи, БизнесПроцесс, ВедущаяЗадача");
	ПараметрыДобавленияПриложенияЗадачи.ИсточникДействияЗадачи = ИсточникДействияЗадачи;
	ПараметрыДобавленияПриложенияЗадачи.БизнесПроцесс =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ИсточникДействияЗадачи,
			"БизнесПроцесс");
	ПараметрыДобавленияПриложенияЗадачи.ВедущаяЗадача =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПараметрыДобавленияПриложенияЗадачи.БизнесПроцесс,
			"ВедущаяЗадача");
	
	Возврат ПараметрыДобавленияПриложенияЗадачи;
	
КонецФункции

// Формирует параметры открытия карточки автора.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Структура - Параметры открытия карточки исполнителя:
//   * КлючОткрытияКорректный - Булево.
//   * ИмяФормы - Строка.
//   * ПараметрыФормы - Структура.
//  
Функция ПараметрыОткрытияКарточкиАвтора(Знач Задача) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючОткрытияКорректный", Ложь);
	ПараметрыОткрытия.Вставить("ИмяФормы", "");
	ПараметрыОткрытия.Вставить("ПараметрыФормы", Новый Структура);
	
	ВидФормы = "ФормаОбъекта";
	
	ПараметрыОбработкиПолучения = Новый Структура;
	ПараметрыОбработкиПолучения.Вставить("Ключ", Задача);
	
	ВыбраннаяФорма = Неопределено;
	
	ДополнительнаяИнформация = Новый Структура;
	ДополнительнаяИнформация.Вставить("ПовторноеИспользование", Ложь);
	
	ПараметрСтандартнаяОбработка = Истина;
	
	Документы.Задача.ОбработкаПолученияФормы(
		ВидФормы,
		ПараметрыОбработкиПолучения, 
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		ПараметрСтандартнаяОбработка);
	
	Если ВыбраннаяФорма <> Неопределено Тогда
		
		ПараметрыОткрытия.КлючОткрытияКорректный = Истина;
		Если ТипЗнч(ВыбраннаяФорма) = Тип("Строка") Тогда
			ПараметрыОткрытия.ИмяФормы = ВыбраннаяФорма;
		Иначе
			ПараметрыОткрытия.ИмяФормы = ВыбраннаяФорма.ПолноеИмя();
		КонецЕсли;
		ПараметрыОткрытия.ПараметрыФормы = ПараметрыОбработкиПолучения;
	
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Формирует параметры открытия карточки исполнителя.
// 
// Параметры:
//  КлючОткрытия - Произвольный - Ключ открытия - Обычная ссылка или навигационная ссылка.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры открытия.
//  ТихаяПопытка - Булево - Тихая попытка получения параметров открытия, без исключения.
// 
// Возвращаемое значение:
//  Структура - Параметры открытия карточки исполнителя:
//   * КлючОткрытияКорректный - Булево.
//   * ИмяФормы - Строка.
//   * ПараметрыФормы - Структура.
//  
Функция ПараметрыОткрытияКарточкиИсполнителя(Знач КлючОткрытия, Знач ДополнительныеПараметры, Знач ТихаяПопытка) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючОткрытияКорректный", Ложь);
	ПараметрыОткрытия.Вставить("ИмяФормы", "");
	ПараметрыОткрытия.Вставить("ПараметрыФормы", Новый Структура);
	
	Попытка
		
		Если ТипЗнч(КлючОткрытия) = Тип("Строка") Тогда
			
			КлючОткрытия = ОбщегоНазначенияДокументооборот.СсылкаПоНавигационной(КлючОткрытия);
			
		КонецЕсли;
		
		ИнтеграцияЗадач.ПриОпределенииПараметровОткрытияКарточкиИсполнителя(
			КлючОткрытия,
			ДополнительныеПараметры,
			ПараметрыОткрытия);
		
		Если ТипЗнч(КлючОткрытия) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			ВидФормы = "ФормаОбъекта";
			
			Если ДополнительныеПараметры <> Неопределено Тогда
				ПараметрыОбработкиПолучения = ДополнительныеПараметры;
			Иначе
				ПараметрыОбработкиПолучения = Новый Структура;
			КонецЕсли;
			ПараметрыОбработкиПолучения.Вставить("Ключ", КлючОткрытия);
			
			ВыбраннаяФорма = Неопределено;
			
			ДополнительнаяИнформация = Новый Структура;
			ДополнительнаяИнформация.Вставить("ПовторноеИспользование", Ложь);
			
			ПараметрСтандартнаяОбработка = Истина;
			
			Документы.ДействиеЗадачи.ОбработкаПолученияФормы(
				ВидФормы,
				ПараметрыОбработкиПолучения, 
				ВыбраннаяФорма,
				ДополнительнаяИнформация,
				ПараметрСтандартнаяОбработка);
			
			Если ВыбраннаяФорма <> Неопределено Тогда
				
				ПараметрыОткрытия.КлючОткрытияКорректный = Истина;
				Если ТипЗнч(ВыбраннаяФорма) = Тип("Строка") Тогда
					ПараметрыОткрытия.ИмяФормы = ВыбраннаяФорма;
				Иначе
					ПараметрыОткрытия.ИмяФормы = ВыбраннаяФорма.ПолноеИмя();
				КонецЕсли;
				ПараметрыОткрытия.ПараметрыФормы = ПараметрыОбработкиПолучения;
			
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Если Не ТихаяПопытка Тогда
			ВызватьИсключение;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			РаботаСЗадачами.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ПараметрыОткрытия.КлючОткрытияКорректный = Ложь;
		ПараметрыОткрытия.ИмяФормы = "";
		ПараметрыОткрытия.ПараметрыФормы = Новый Структура;
		
	КонецПопытки;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Переключает флаг задачи.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача или действие задачи.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ФлагиОбъектов - Флаг.
//
Функция ПереключитьФлаг(Знач ЗадачаИлиДействие) Экспорт
	
	СтарыйФлаг = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаИлиДействие, "Флаг");
	
	Если ЗначениеЗаполнено(СтарыйФлаг) Тогда
		НовыйФлаг = Перечисления.ФлагиОбъектов.ПустаяСсылка();
	Иначе
		НовыйФлаг = РаботаСФлагамиОбъектовСервер.ПолучитьФлагДляЗадачПоУмолчанию();
	КонецЕсли;
	
	РаботаСЗадачами.УстановитьФлаг(ЗадачаИлиДействие, НовыйФлаг);
	
	Возврат НовыйФлаг;
	
КонецФункции

// Перенаправляет задачу.
//
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи
//  ОтКого - ОпределяемыйТип.УчастникЗадач
//  Кому - ОпределяемыйТип.УчастникЗадач
//  Комментарий - Строка
//  ЗакрыватьПодзадачи - Булево
//                     - Неопределено
// 
// Возвращаемое значение:
//  См. РаботаСЗадачамиКлиентСервер.НовыеДанныеПеренаправления
//
Функция Перенаправить(Знач ЗадачиИлиДействия, Знач ОтКого, Знач Кому, Знач Комментарий, Знач ЗакрыватьПодзадачи) Экспорт
	
	ДанныеПеренаправления = РаботаСЗадачами.Перенаправить(
		ЗадачиИлиДействия,
		ОтКого,
		Кому,
		Комментарий,
		ЗакрыватьПодзадачи);
	
	Возврат ДанныеПеренаправления;
	
КонецФункции

// Снимает пометку удаления с задачи.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//
Процедура СнятьПометкуУдаления(Знач Задача) Экспорт
	
	РаботаСЗадачами.СнятьПометкуУдаления(Задача);
	
КонецПроцедуры

// Сохраняет результат действия.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - Действие задачи.
//  РезультатДействияТекстом - Строка - Результат действия текстом.
//  ВерсияДанныхДействия - Строка - Текущая версия данных действия.
//  ВзятьВРаботуАвтоматически - Булево - Взять в работу автоматически.
// 
// Возвращаемое значение:
//  Структура - См. РаботаСЗадачамиКлиентСервер.НовыйРезультатСохраненияЗадачи.
//
Функция СохранитьРезультатДействия(Знач ДействиеЗадачи, Знач РезультатДействияТекстом, Знач ВерсияДанныхДействия, Знач ВзятьВРаботуАвтоматически) Экспорт
	
	Возврат РаботаСЗадачами.СохранитьРезультатДействия(
		ДействиеЗадачи,
		РезультатДействияТекстом,
		ВерсияДанныхДействия,
		Сотрудники.ОсновнойСотрудник(),
		ВзятьВРаботуАвтоматически);
	
КонецФункции

// Формирует список выбора действий задачи.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  СписокЗначений - Список выбора действий задачи.
//
Функция СписокВыбораДействийЗадачи(Знач Задача) Экспорт
	
	СписокВыбораДействийЗадачи = Новый СписокЗначений;
	
	УчастникиЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Участники");
	УчастникиЗадачи = УчастникиЗадачи.Выгрузить();
	УчастникиЗадачи.Сортировать("НомерСтроки Возр");
	
	Для Каждого УчастникЗадачи Из УчастникиЗадачи Цикл
		
		ПредставлениеУчастника =
			РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(УчастникЗадачи.Участник);
		ПредставлениеУчастникаСВидом = СтрШаблон(
			"%1 (%2)",
			ПредставлениеУчастника,
			УчастникЗадачи.ВидУчастника);
		
		СписокВыбораДействийЗадачи.Добавить(
			УчастникЗадачи.ДействиеУчастника,
			ПредставлениеУчастникаСВидом);
		
	КонецЦикла;
	
	Если СписокВыбораДействийЗадачи.Количество() = 0 Тогда
		
		НайденныеДействия = Документы.ДействиеЗадачи.НайтиПоЗадаче(Задача);
		РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			НайденныеДействия, "ВидДействия, Исполнитель");
		
		Для Каждого НайденноеДействие Из НайденныеДействия Цикл
			
			РеквизитыДействия = РеквизитыДействий[НайденноеДействие];
			
			ПредставлениеУчастника =
				РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(РеквизитыДействия.Исполнитель);
			ПредставлениеУчастникаСВидом = СтрШаблон(
				"%1 (%2)",
				ПредставлениеУчастника,
				РеквизитыДействия.ВидДействия);
			
			СписокВыбораДействийЗадачи.Добавить(
				НайденноеДействие,
				ПредставлениеУчастникаСВидом);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокВыбораДействийЗадачи;
	
КонецФункции

// Определяет общий срок задач.
//
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Дата - Общий срок задач.
//
Функция ОбщийСрокЗадач(Знач ЗадачиИлиДействия) Экспорт
	
	ОбщийСрокЗадач = Дата(1, 1, 1);
	Для Каждого ЗадачаИлиДействие Из ЗадачиИлиДействия Цикл
		
		Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
			
			СрокЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаИлиДействие, "Срок");
			
		ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			ДействиеОбъект = ЗадачаИлиДействие.ПолучитьОбъект();
			СрокЗадачи = ДействиеОбъект.Срок();
			
		КонецЕсли;
		
		ОбщийСрокЗадач = Макс(ОбщийСрокЗадач, СрокЗадачи);
		
	КонецЦикла;
	
	Возврат ОбщийСрокЗадач;
	
КонецФункции

// Сохраняет персональную настройку текущего пользователя.
//
// Параметры:
//  Настройка - Строка - Настройка.
//  Значение - Произвольный - Значение настройки.
//
Процедура УстановитьПерсональнуюНастройку(Знач Настройка, Знач Значение) Экспорт
	
	РаботаСЗадачами.УстановитьПерсональнуюНастройку(Настройка, Значение);
	
КонецПроцедуры

// Устанавливает флаг указанным задачам или действиями задач.
//
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задачи или действия задач.
//  Флаг - ПеречислениеСсылка.ФлагиОбъектов - Флаг.
//
Процедура УстановитьФлаг(Знач ЗадачиИлиДействия, Знач Флаг) Экспорт
	
	Для Каждого ЗадачаИлиДействие Из ЗадачиИлиДействия Цикл
		РаботаСЗадачами.УстановитьФлаг(ЗадачаИлиДействие, Флаг);
	КонецЦикла;
	
КонецПроцедуры

// Заполним параметры и имя формы для открытия формы согласования в режиме замечаний
//
//Параметры
//	ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи 
//	ПараметрыОткрытия - Структура 
//	ВыбраннаяФорма -Строка, имя формы
Процедура ЗаполнитьПараметрыОткрытияФормыСогласования(
		ДействиеЗадачи, ПараметрыОткрытия, ВыбраннаяФорма) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);	

	РеквизитыДействияТрекера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДействиеЗадачи, "Исполнитель, Задача");
		
	КорневаяЗадача = РаботаСЗадачами.КорневаяЗадача(РеквизитыДействияТрекера.Задача);
	ИсточникЗадачи = РаботаСЗадачами.ИсточникЗадачи(КорневаяЗадача);
	
	Если ЗначениеЗаполнено(ИсточникЗадачи) И ОбщегоНазначения.ЭтоБизнесПроцесс(ИсточникЗадачи.Метаданные())  Тогда

		Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
			ИсточникЗадачи);
			
		Если ЗначениеЗаполнено(Действие) Тогда	
		
			ВыбраннаяФорма = "ОбщаяФорма.СогласованиеВРежимеЗамечанийФормаСогласующего";
					
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Действие, "Предмет");
					
			ВеткаОбработки = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(
				РеквизитыДействияТрекера.Задача);

			ПараметрыОткрытия.Вставить("ВеткаОбработки", ВеткаОбработки);
			ПараметрыОткрытия.Вставить("Действие", Действие);
			ПараметрыОткрытия.Вставить("ДействиеЗадачи", ДействиеЗадачи);
			ПараметрыОткрытия.Вставить("Участник", РеквизитыДействияТрекера.Исполнитель);
			ПараметрыОткрытия.Вставить("Документ", Предмет);
			ПараметрыОткрытия.Вставить("ОсновнойДокумент", Предмет);
				
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры		

// Удаляет приложения действий задач.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  МассивПриложений - Массив из ОпределяемыйТип.ПриложениеОтчетовОбИсполнении.
// 
Процедура УдалитьПриложенияРезультата(Знач ДействиеЗадачи, Знач МассивПриложений) Экспорт
	
	НачатьТранзакцию();
	Попытка

		ДействиеОбъект = ДействиеЗадачи.ПолучитьОбъект();
		
		// просто строки удаляем
		Для Каждого Приложение Из МассивПриложений Цикл
			
			ПараметрыОтбора = Новый Структура("Приложение", Приложение);
			Строки = ДействиеОбъект.Приложения.НайтиСтроки(ПараметрыОтбора);
			Если Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДействиеОбъект.Приложения.Удалить(Строки[0]);
			
			Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
				
				ФайлОбъект = Приложение.ПолучитьОбъект();
				Если ФайлОбъект.ВладелецФайла = ДействиеЗадачи Тогда
					ФайлОбъект.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		ДействиеОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, есть ли назначенные шаблоны задач.
// 
// Параметры:
//  Основание - Неопределено
//            - ДокументСсылка.Задача
//            - Массив из ДокументСсылка.Задача
// 
// Возвращаемое значение:
//  Булево
// 
Функция ЕстьНазначенныеШаблоны(Знач Основание) Экспорт
	
	ЕстьНазначенныеШаблоны = РаботаСЗадачами.ЕстьНазначенныеШаблоны(Основание);
	
	Возврат ЕстьНазначенныеШаблоны;
	
КонецФункции

// Формирует результат действия задачи по идентификатору.
// 
// Параметры:
//  ИдентификаторРезультата - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  СправочникСсылка.РезультатыДействийЗадач
// 
Функция РезультатДействияЗадачиПоИдентификатору(Знач ИдентификаторРезультата) Экспорт
	
	РезультатДействияЗадачи = Справочники.РезультатыДействийЗадач.ПолучитьСсылку(ИдентификаторРезультата);
	
	Возврат РезультатДействияЗадачи;
	
КонецФункции

// Формирует шаблон текста по идентификатору.
// 
// Параметры:
//  ИдентификаторШаблона - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  СправочникСсылка.ШаблоныТекстов
// 
Функция ШаблонДляВыполненияПоИдентификатору(Знач ИдентификаторШаблона) Экспорт
	
	ШаблонДляВыполнения = Справочники.ШаблоныТекстов.ПолучитьСсылку(ИдентификаторШаблона);
	
	Возврат ШаблонДляВыполнения;
	
КонецФункции

// Формирует данные дерева подзадач.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
// 
// Возвращаемое значение:
//  Массив из см. РаботаСЗадачами.НовыеДанныеСтрокиДереваПодзадач
// 
Функция ДанныеДереваПодзадач(Знач Задача, Знач ДействиеЗадачи) Экспорт
	
	ДанныеДереваПодзадач = Новый Массив;
	
	Если ЗначениеЗаполнено(Задача) Тогда
		ЕстьПраво = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Задача).Чтение;
		Если Не ЕстьПраво Тогда
			Возврат ДанныеДереваПодзадач;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ЕстьПраво = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ДействиеЗадачи).Чтение;
		Если Не ЕстьПраво Тогда
			Возврат ДанныеДереваПодзадач;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДереваПодзадач = РаботаСЗадачами.ДанныеДереваПодзадач(Задача, ДействиеЗадачи);
	
	Возврат ДанныеДереваПодзадач;
	
КонецФункции

// Формирует данные дерева подзадач.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
// 
// Возвращаемое значение:
//  Массив из см. РаботаСЗадачами.НовыеДанныеСтрокиДереваПодзадач
// 
Функция ДанныеДереваСоисполнителей(Знач Задача, Знач ДействиеЗадачи) Экспорт
	
	ДанныеДереваСоисполнителей = Новый Массив;
	
	Если ЗначениеЗаполнено(Задача) Тогда
		ЕстьПраво = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Задача).Чтение;
		Если Не ЕстьПраво Тогда
			Возврат ДанныеДереваСоисполнителей;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ЕстьПраво = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ДействиеЗадачи).Чтение;
		Если Не ЕстьПраво Тогда
			Возврат ДанныеДереваСоисполнителей;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДереваСоисполнителей = РаботаСЗадачами.ДанныеДереваСоисполнителей(Задача, ДействиеЗадачи);
	
	Возврат ДанныеДереваСоисполнителей;
	
КонецФункции

// Формирует HTML описание инструкции.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Строка - HTML описание инструкции.
// 
Функция ОписаниеHTMLИнструкции(Знач ДействиеЗадачи) Экспорт
	
	ОписаниеHTMLИнструкции = РаботаСЗадачами.ОписаниеHTMLИнструкции(ДействиеЗадачи);
	
	Возврат ОписаниеHTMLИнструкции;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет попытку заполнения фактического исполнения.
// В случае не достаточности данных, инициализирует процедуру указания данных.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи - Действия задач.
//  РеквизитыДействийЗадач - Соответствие - реквизиты действия.
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  ДанныеВыполнения - Данные выполнения.  См. РаботаСЗадачамиКлиентСервер.НовыйДанныеВыполнения().
//
Процедура ЗаполнитьФактическогоИсполнителя(ДействияЗадач, РеквизитыДействийЗадач, ПараметрыВыполнения, ДанныеВыполнения)
	
	ДанныеФактическихИсполнителей = РаботаСЗадачами.ОпределитьФактическихИсполнителей(
		ДействияЗадач,
		ПараметрыВыполнения.ВыполнитьОтИмени,
		ПараметрыВыполнения.ВыбранныйФактическийИсполнитель,
		РеквизитыДействийЗадач);
	
	ПараметрыВыполнения.ФактическиеИсполнителиПолные =
		ДанныеФактическихИсполнителей.ФактическиеИсполнителиПолные;
	ПараметрыВыполнения.ФактическиеИсполнителиПоДействиям =
		ДанныеФактическихИсполнителей.ФактическиеИсполнителиПоДействиям;
	ПараметрыВыполнения.ОснованияФактИсполнителейПоДействиям =
		ДанныеФактическихИсполнителей.ОснованияФактИсполнителейПоДействиям;
	
	ЧислоЗадач = ДействияЗадач.Количество();
	
	Если ДанныеФактическихИсполнителей.ДействияБезФактИсполнителя.Количество() > 0
		Или ДанныеФактическихИсполнителей.ДействияБезКомуАдресовано.Количество() > 0 Тогда
		
		ДанныеВыполнения.ВыбратьИсполнителяЗадачи = Истина;
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
		ПоказанныеПредупреждения = Новый Соответствие;
		Если ЧислоЗадач > 1 Тогда
			
			Для Каждого ДействиеБезФактИсполнителя Из ДанныеФактическихИсполнителей.ДействияБезФактИсполнителя Цикл
				Если ПоказанныеПредупреждения[ДействиеБезФактИсполнителя] = Истина Тогда
					Продолжить;
				КонецЕсли;
				Причина = НСтр("ru = 'Нужно выбрать фактического исполнителя задачи.'");
					ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
						Новый Структура("Задача, Причина", 
						ДействиеБезФактИсполнителя, Причина));
				ПоказанныеПредупреждения[ДействиеБезФактИсполнителя] = Истина;
			КонецЦикла;
			
			Для Каждого ДействиеБезКомуАдресовано Из ДанныеФактическихИсполнителей.ДействияБезКомуАдресовано Цикл
				Если ПоказанныеПредупреждения[ДействиеБезКомуАдресовано] = Истина Тогда
					Продолжить;
				КонецЕсли;
				Причина = НСтр("ru = 'Нужно выбрать кому адресована задача.'");
					ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
						Новый Структура("Задача, Причина", 
						ДействиеБезКомуАдресовано, Причина));
				ПоказанныеПредупреждения[ДействиеБезКомуАдресовано] = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет попытку заполнения фактического исполнения.
// В случае не достаточности данных, инициализирует процедуру указания данных.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи - Действия задач.
// 	РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  ПараметрыВыполнения - См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач
// 	ДанныеВыполнения - Данные выполнения.  См. РаботаСЗадачамиКлиентСервер.НовыйДанныеВыполнения().
Процедура ОтобразитьВыборПомощникаПриНеобходимости(ДействияЗадач, РезультатДействия, ПараметрыВыполнения, ДанныеВыполнения)

	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		Если ДействиеЗадачи.ВидДействия = Справочники.ВидыДействийЗадач.Рассмотреть 
			И РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.НаправленоПомощнику")
			И Не ЗначениеЗаполнено(ПараметрыВыполнения.ОбрабатывающийРезолюцию) Тогда
			
			АктуальныеПомощники = ЗамещающиеИПомощники.ПодходящиеЗамещения(
				ДействиеЗадачи,
				Перечисления.ВидыЗамещения.Помощники);
			АктуальныхПомощниковБолееОдного = АктуальныеПомощники.Количество() > 1;
			
			Если АктуальныхПомощниковБолееОдного Тогда
				ДанныеВыполнения.ВыбратьПомощника = Истина;
				ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Проверяет, что есть права просмотра задачи, и файл относится к той же обработке,
// к которой относится задача.
// 
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы - Файл ссылка
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Булево - Это файл обработки.
//  
Функция ЭтоФайлОбработки(ФайлСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоФайлОбработки = Ложь;
	
	Если Не ЗначениеЗаполнено(ФайлСсылка) Тогда
		
		Возврат ЭтоФайлОбработки;
		
	КонецЕсли;
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла");
	
	Если ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.Задача") Тогда
		
		ЗадачаФайла = ВладелецФайла;
		
	ИначеЕсли ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		ЗадачаФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "Задача");
		
	Иначе
		
		Возврат ЭтоФайлОбработки;
		
	КонецЕсли;
	
	ИсточникЗадачиФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаФайла, "Источник");
	
	Если БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(ИсточникЗадачиФайла) Тогда
		
		ДействиеОбработкиФайла = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
			ИсточникЗадачиФайла);
		
	ИначеЕсли ТипЗнч(ИсточникЗадачиФайла) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		ДействиеОбработкиФайла = ИсточникЗадачиФайла;
		
	Иначе
		
		ДействиеОбработкиФайла = Неопределено;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДействиеОбработкиФайла) Тогда
		
		Возврат ЭтоФайлОбработки;
		
	КонецЕсли;
	
	ОбработкаПоЗадачеФайла = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(
		ДействиеОбработкиФайла);
	
	Если Не ЗначениеЗаполнено(ОбработкаПоЗадачеФайла) Тогда
		
		Возврат ЭтоФайлОбработки;
		
	КонецЕсли;
	
	ПредметОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ОбработкаПоЗадачеФайла,
		"Владелец");
	ПраваПредметаОбработки = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ПредметОбработки);
	
	Если Не ПраваПредметаОбработки.Чтение Тогда
		
		Возврат ЭтоФайлОбработки;
		
	КонецЕсли;
	
	ЭтоФайлОбработки = Истина;
	
	Возврат ЭтоФайлОбработки;
	
КонецФункции

#КонецОбласти
