///////////////////////////////////////////////////////////////////////////////////////////////
// Модуль содержит код для работы обработки заданий
//

#Область ПрограммныйИнтерфейс

#Область СформироватьПроцессДляОбработкиОбъекта

// Обрабатывает формирование процесса обработки объекта.
// При возможности использования очереди заданий создает задания для формирования процесса
// для обработки объекта.
// 
// Параметры:
// 	ОбработкаОбъекта - СправочникОбъект.ОбработкиОбъектов
// 	
// Возвращаемое значение:
// 	Булево - Истина, если формирование выполняется через очередь,
// 	         иначе Ложь (прикладной код должен выполнить обычную обработку).
// 	
Функция ОбработатьФормированиеПроцессаОбработкиОбъекта(ОбработкаОбъектаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработкаОбъекта = ОбработкаОбъектаОбъект.Ссылка;
	
	РодительскоеЗадание = Неопределено;
	Если ОбработкаОбъектаОбъект.ДополнительныеСвойства.Свойство("РодительскоеЗадание") Тогда
		РодительскоеЗадание = ОбработкаОбъектаОбъект.ДополнительныеСвойства.РодительскоеЗадание;
	КонецЕсли;	 
	
	ДобавитьЗаданиеСформироватьПроцессДляОбработкиОбъекта(ОбработкаОбъекта, РодительскоеЗадание);
	
	Возврат Истина;
	
КонецФункции

// Добавляет задание СформироватьПроцессДляОбработкиОбъекта в очередь.
// 
// Параметры:
// 	ОбработкаОбъекта - СправочникСсылка.ОбработкиОбъектов
// 	РодительскоеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота
//
Процедура ДобавитьЗаданиеСформироватьПроцессДляОбработкиОбъекта(ОбработкаОбъекта, РодительскоеЗадание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Сформировать процесс для обработки ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон(ПредставлениеЗадания, Строка(ОбработкаОбъекта.Ссылка));
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ОбработкаОбъекта, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.СформироватьПроцессДляОбработкиОбъекта,
		НаименованиеЗадания,
		ОбработкаОбъекта.Ссылка,
		УзелОбработки,
		РодительскоеЗадание);
	
КонецПроцедуры

// Обрабатывает задание очереди СформироватьПроцессДляОбработкиОбъекта
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеСформироватьПроцессДляОбработкиОбъекта(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	ВедущаяЗадача = Неопределено;
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, Родитель.Родитель.ПредметЗадания");	
		
	ВедущаяЗадача = РеквизитыЗадания.РодительРодительПредметЗадания;	
		
	ОбработкаОбъекта = РеквизитыЗадания.ПредметЗадания;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ОбработкаОбъекта);
	Исключение     
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать обработку объекта.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	ПроцессОбработки = 
		РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(ОбработкаОбъекта);
		
	Если Не ЗначениеЗаполнено(ПроцессОбработки) Тогда
		
		ПроцессПоОбработке = РаботаСПроцессамиПоОбработкамОбъектов.СоздатьПроцессПоОбработке(
			ОбработкаОбъекта.ПолучитьОбъект(), ВедущаяЗадача);
		
		ДобавитьЗаданиеСтартоватьПроцесс(ПроцессПоОбработке.Ссылка, Задание);
		
		РезультатВыполнения.ЗаписьЛога = 
			НСтр("ru='Создан процесс для обработки объекта и подзадание его старта.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		Возврат РезультатВыполнения;
				
	КонецЕсли;
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
			
КонецФункции

// Возвращает актуальность задания СформироватьПроцессДляОбработкиОбъект.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияСформироватьПроцессДляОбработкиОбъект(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		ОбработкаОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		ОбработкаОбъекта = Задание.ПредметЗадания;
	КонецЕсли;
	
	Если Не ОбработкиОбъектов.ОбработкаАктуальнаДляЗапуска(ОбработкаОбъекта) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Обработка не актуальна для запуска.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область НачатьВыполнениеДействия

#Область НачатьВыполнениеДействияИсполненияПроцессами

// Добавляет задание НачатьВыполнениеДействияИсполненияПроцессами в очередь.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияИсполнения
// 	ИмяЭлемента - Строка - имя элемента схемы обработки, соответствующего действию.
// 	ОбработчикСхемы - Структура - см. БизнесПроцессОбъект.КомплексныйПроцесс.ОбработчикСхемыПроцесса
// 	ПроцессОбработки - БизнесПроцессОбъект.КомплексныйПроцесс
//
Процедура ДобавитьЗаданиеНачатьВыполнениеДействияИсполненияПроцессами(
	Действие, ИмяЭлемента, ОбработчикСхемы, ПроцессОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Начать выполнение действия исполнения процессами'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Действие, "Предмет, УзелОбработки");
	
	НаименованиеЗадания = СтрШаблон("%1. %2",
		ПредставлениеЗадания,
		Строка(РеквизитыДействия.Предмет));
	
	УзелОбработки = РеквизитыДействия.УзелОбработки;
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.НачатьВыполнениеДействияИсполненияПроцессами,
		НаименованиеЗадания,
		Действие,
		УзелОбработки);
	
	ЗадачаОбработки = РаботаСПроцессамиПоОбработкамОбъектов.СоздатьЗадачуПодготовкиДействияКЗапуску(
		НаименованиеЗадания, ПроцессОбработки.Ссылка);
	ПроцессОбработки.ДобавитьЗадачуОбработкиЭлемента(ИмяЭлемента, ЗадачаОбработки, ОбработчикСхемы);	
			
КонецПроцедуры

// Обрабатывает задание очереди НачатьВыполнениеДействияИсполненияПроцессами
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота                                
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеНачатьВыполнениеДействияИсполненияПроцессами(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания");	
	
	Действие = РеквизитыЗадания.ПредметЗадания;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Действие);
	Исключение                              
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать действие.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	ДействиеОбъект = Действие.ПолучитьОбъект();
	
	// Если дочерних заданий нет, то действие еще не готовилось к выполнению и по нему не
	// создавались процессы.
	Если Не Справочники.ОчередьЗаданийДокументооборота.ЕстьДочерниеЗадания(Задание) Тогда
		
		РаботаСПроцессамиПоДействиям.ПрерватьПроцессыДействияПриПовторномЗапуске(
			ДействиеОбъект.Ссылка);
			
		РезультатПодготовки = ДействияСервер.ПодготовитьДействиеКВыполнению(ДействиеОбъект);
		Если РезультатПодготовки = "ПропускДействия" Тогда
			ДействияСервер.ПропуститьДействие(Действие);
			РаботаСПроцессамиПоОбработкамОбъектов.ВыполнитьЗадачуПодготовкиДействияКЗапуску(Действие);
			РезультатВыполнения.ЗаписьЛога = НСтр("ru='Задание завершено. Действие пропущено.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			РезультатВыполнения.ЗаданиеЗавершено = Истина;
			Возврат РезультатВыполнения;
		КонецЕсли;
		
		Если ДействиеОбъект.ПоПунктам = Истина Тогда
				
			Для Каждого СтрокаПункта Из ДействиеОбъект.Пункты Цикл
					
				ДобавитьЗаданиеСформироватьПроцессДляПунктаДействияИсполнения(
					Строка(СтрокаПункта.Идентификатор), Задание);
						
			КонецЦикла;
			
			
		Иначе
				
			Для Каждого СтрокаУчастника Из ДействиеОбъект.Участники Цикл
				Если СтрокаУчастника.ФункцияУчастника =
					Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
					
					ДобавитьЗаданиеСформироватьПроцессДляРассматривающегоДействияИсполнения(
						Строка(СтрокаУчастника.Идентификатор), Задание);
				КонецЕсли; 		
			КонецЦикла;
	
			ДобавитьЗаданиеСформироватьПроцессДляИсполнителейДействияИсполнения(Действие, Задание);
			
		КонецЕсли;		
			
		РезультатВыполнения.ЗаписьЛога = 
			НСтр("ru='Выполнена подготовка действия к выполнению. Созданы подзадания формирования процессов по действию.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектов.ВыполнитьЗадачуПодготовкиДействияКЗапуску(Действие, Ложь);
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
			
КонецФункции

#КонецОбласти

#Область НачатьВыполнениеДействияСогласованияПроцессом

// Добавляет задание НачатьВыполнениеДействияСогласованияПроцессом в очередь.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияСогласования
// 	ИмяЭлемента - Строка - имя элемента схемы обработки, соответствующего действию.
// 	ОбработчикСхемы - Структура - см. БизнесПроцессОбъект.КомплексныйПроцесс.ОбработчикСхемыПроцесса
// 	ПроцессОбработки - БизнесПроцессОбъект.КомплексныйПроцесс
//
Процедура ДобавитьЗаданиеНачатьВыполнениеДействияСогласованияПроцессом(
	Действие, ИмяЭлемента, ОбработчикСхемы, ПроцессОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Начать выполнение действия согласования процессом'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2",
		ПредставлениеЗадания,
		Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет")));
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Действие, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.НачатьВыполнениеДействияСогласованияПроцессом,
		НаименованиеЗадания,
		Действие,
		УзелОбработки);
	
	ЗадачаОбработки = РаботаСПроцессамиПоОбработкамОбъектов.СоздатьЗадачуПодготовкиДействияКЗапуску(
		НаименованиеЗадания, ПроцессОбработки.Ссылка);
	ПроцессОбработки.ДобавитьЗадачуОбработкиЭлемента(ИмяЭлемента, ЗадачаОбработки, ОбработчикСхемы);
	
КонецПроцедуры

// Обрабатывает задание очереди НачатьВыполнениеДействияСогласованияПроцессом
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота                                
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданияОчереди
//
Функция ОбработатьЗаданиеНачатьВыполнениеДействияСогласованияПроцессом(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания");	
	
	Действие = РеквизитыЗадания.ПредметЗадания;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Действие);
	Исключение                              
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать действие.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
				
	ДействиеОбъект = Действие.ПолучитьОбъект();
	
	ТипыЗаданий = Перечисления.ТипыЗаданий;
	
	ДочерниеЗадания = Справочники.ОчередьЗаданийДокументооборота.ДочерниеЗадания(Задание);
	
	// Если дочерних заданий нет, то действие еще не готовилось к выполнению.
	ВыполнитьПодготовкуДействияКВыполнению = (ДочерниеЗадания.Количество() = 0);
	
	ВыполнятьЗаданияНаКлиенте = Константы.ВыполнятьЗаданияНаКлиенте.Получить();
	
	СоздатьЗаданиеПодготовкиКСогласованиюВРежимеЗамечаний = Истина;
	Если ВыполнятьЗаданияНаКлиенте И ДействиеОбъект.СогласованиеВРежимеЗамечаний Тогда 
		Для Каждого Подзадание Из ДочерниеЗадания Цикл
			Если Подзадание.Тип = ТипыЗаданий.ПодготовитьПредметКСогласованиюВРежимеЗамечаний Тогда
				СоздатьЗаданиеПодготовкиКСогласованиюВРежимеЗамечаний = Ложь;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	СоздатьЗаданиеПодготовкиКСогласованиюВРежимеЗамечаний =
		СоздатьЗаданиеПодготовкиКСогласованиюВРежимеЗамечаний
		И ДействиеОбъект.СогласованиеВРежимеЗамечаний
		И ВыполнятьЗаданияНаКлиенте;
		
	СоздатьПроцессПоДействию = Истина;
	Для Каждого Подзадание Из ДочерниеЗадания Цикл
		Если Подзадание.Тип = ТипыЗаданий.СтартоватьПроцесс Тогда
			СоздатьПроцессПоДействию = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
		
	СтрокиЛога = Новый Массив;
			
	Если ВыполнитьПодготовкуДействияКВыполнению Тогда
		
		РаботаСПроцессамиПоДействиям.ПрерватьПроцессыДействияПриПовторномЗапуске(
			ДействиеОбъект.Ссылка);
			
		РезультатПодготовки = ДействияСервер.ПодготовитьДействиеКВыполнению(ДействиеОбъект);
		Если РезультатПодготовки = "ПропускДействия" Тогда
			ДействияСервер.ПропуститьДействие(Действие);
			РаботаСПроцессамиПоОбработкамОбъектов.ВыполнитьЗадачуПодготовкиДействияКЗапуску(Действие);
			РезультатВыполнения.ЗаписьЛога = НСтр("ru='Задание завершено. Действие пропущено.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			РезультатВыполнения.ЗаданиеЗавершено = Истина;
			Возврат РезультатВыполнения;
		КонецЕсли;
		СтрокиЛога.Добавить(
			НСтр("ru='Выполнена подготовка действия к выполнению.'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если СоздатьЗаданиеПодготовкиКСогласованиюВРежимеЗамечаний Тогда
		
		ДобавитьЗаданиеПодготовитьПредметКСогласованиюВРежимеЗамечаний(
			ДействиеОбъект.Предмет, Задание);
		
		СтрокиЛога.Добавить(
			НСтр("ru='Создано подзадание подготовки предмета к согласованию в режиме замечания.'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	Если СоздатьПроцессПоДействию Тогда
		
		ПроцессОбработки = 
			РаботаСПроцессамиПоОбработкамОбъектов.ПроцессОбработкиПоДействию(Действие);
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ПроцессОбработки);
		Исключение                          
			БылиБлокировки = Истина;
			РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать процесс обработки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат РезультатВыполнения;
		КонецПопытки;
		
		ПроцессыПоДействию = РаботаСПроцессамиПоДействиям.СоздатьПроцессыПоДействию(
			ДействиеОбъект, ПроцессОбработки);
		
		ПроцессИсполненияДействия = ПроцессыПоДействию[0].Ссылка;
		
		ПроцессОбработкиОбъект = ПроцессОбработки.ПолучитьОбъект();
		ОбработчикСхемы = ПроцессОбработкиОбъект.ОбработчикСхемыПроцесса();
		ПроцессОбработкиОбъект.ДобавитьЗадачуОбработкиЭлемента(
			РаботаСПроцессамиПоОбработкамОбъектов.ИмяЭлементаСхемыОбработкиПоДействию(Действие),
			ПроцессИсполненияДействия.ВедущаяЗадача,
			ОбработчикСхемы);
		ПроцессОбработкиОбъект.ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
		
		СозданоЗадание = СозданоЗаданиеИлиПроцессСтартованОтложено(ПроцессИсполненияДействия, 
			Задание, 
			СтрокиЛога,
			НСтр("ru = 'согласования'"),
			Действие);
		
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		Если СозданоЗадание Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектов.ВыполнитьЗадачуПодготовкиДействияКЗапуску(Действие, Ложь);
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
			
КонецФункции

#КонецОбласти

#Область НачатьВыполнениеДействияПроцессом

// Добавляет задание НачатьВыполнениеДействияПроцессом в очередь.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияОзнакомления,
// 	           СправочникСсылка.ДействияПодписания,
// 	           СправочникСсылка.ДействияРегистрации,
// 	           СправочникСсылка.ДействияУтверждения
// 	ИмяЭлемента - Строка - имя элемента схемы обработки, соответствующего действию.
// 	ОбработчикСхемы - Структура - см. БизнесПроцессОбъект.КомплексныйПроцесс.ОбработчикСхемыПроцесса
// 	ПроцессОбработки - БизнесПроцессОбъект.КомплексныйПроцесс
// 
Процедура ДобавитьЗаданиеНачатьВыполнениеДействияПроцессом(
	Действие, ИмяЭлемента, ОбработчикСхемы, ПроцессОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Начать выполнение действия процессом'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2. %3",
		ПредставлениеЗадания,
		Строка(Действие),
		Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет")));
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Действие, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.НачатьВыполнениеДействияПроцессом,
		НаименованиеЗадания,
		Действие,
		УзелОбработки);
	
	ЗадачаОбработки = РаботаСПроцессамиПоОбработкамОбъектов.СоздатьЗадачуПодготовкиДействияКЗапуску(
		НаименованиеЗадания, ПроцессОбработки.Ссылка);
	ПроцессОбработки.ДобавитьЗадачуОбработкиЭлемента(ИмяЭлемента, ЗадачаОбработки, ОбработчикСхемы);
		
КонецПроцедуры

// Обрабатывает задание очереди НачатьВыполнениеДействияПроцессом
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеНачатьВыполнениеДействияПроцессом(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания");	
	
	Действие = РеквизитыЗадания.ПредметЗадания;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Действие);
	Исключение   
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать действие.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	ДействиеОбъект = Действие.ПолучитьОбъект();
	
	// Если дочерних заданий нет, то действие еще не готовилось к выполнению и по нему не
	// создавались процессы. 
	Если Не Справочники.ОчередьЗаданийДокументооборота.ЕстьДочерниеЗадания(Задание) Тогда
		
		РаботаСПроцессамиПоДействиям.ПрерватьПроцессыДействияПриПовторномЗапуске(
			ДействиеОбъект.Ссылка);
			
		РезультатПодготовки = ДействияСервер.ПодготовитьДействиеКВыполнению(ДействиеОбъект);
		Если РезультатПодготовки = "ПропускДействия" Тогда
			
			ДействияСервер.ПропуститьДействие(Действие);
			
			РаботаСПроцессамиПоОбработкамОбъектов.ВыполнитьЗадачуПодготовкиДействияКЗапуску(Действие);
			
			РезультатВыполнения.ЗаписьЛога = НСтр("ru='Задание завершено. Действие пропущено.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			РезультатВыполнения.ЗаданиеЗавершено = Истина;
			Возврат РезультатВыполнения;
		КонецЕсли;
		
		ПроцессОбработки = 
			РаботаСПроцессамиПоОбработкамОбъектов.ПроцессОбработкиПоДействию(Действие);
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ПроцессОбработки);
		Исключение        
			БылиБлокировки = Истина;
			РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать процесс обработки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат РезультатВыполнения;
		КонецПопытки;
		
		ПроцессыПоДействию = РаботаСПроцессамиПоДействиям.СоздатьПроцессыПоДействию(
			ДействиеОбъект, ПроцессОбработки);
		
		ПроцессИсполненияДействия = ПроцессыПоДействию[0].Ссылка;
		
		ПроцессОбработкиОбъект = ПроцессОбработки.ПолучитьОбъект();
		ОбработчикСхемы = ПроцессОбработкиОбъект.ОбработчикСхемыПроцесса();
		ПроцессОбработкиОбъект.ДобавитьЗадачуОбработкиЭлемента(
			РаботаСПроцессамиПоОбработкамОбъектов.ИмяЭлементаСхемыОбработкиПоДействию(Действие),
			ПроцессИсполненияДействия.ВедущаяЗадача,
			ОбработчикСхемы);
		ПроцессОбработкиОбъект.ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
		
		СтрокиЛога = Новый Массив;
		СтрокиЛога.Добавить(НСтр("ru='Выполнена подготовка действия к выполнению.'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
		СозданоЗадание = СозданоЗаданиеИлиПроцессСтартованОтложено(ПроцессИсполненияДействия.Ссылка, 
			Задание, 
			СтрокиЛога,
			НСтр("ru = 'по действию'"),
			Действие);
		
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		Если СозданоЗадание Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;	
		
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектов.ВыполнитьЗадачуПодготовкиДействияКЗапуску(Действие, Ложь);
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
			
КонецФункции

#КонецОбласти

#Область НачатьВыполнениеДействияПроцессомМассовоеОзнакомление

// Добавляет задание НачатьВыполнениеДействияМассовогоОзнакомления в очередь.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияОзнакомления
// 	ИмяЭлемента - Строка - имя элемента схемы обработки, соответствующего действию.
// 	ОбработчикСхемы - Структура - см. БизнесПроцессОбъект.КомплексныйПроцесс.ОбработчикСхемыПроцесса
// 	ПроцессОбработки - БизнесПроцессОбъект.КомплексныйПроцесс
// 
Процедура ДобавитьЗаданиеНачатьВыполнениеДействияМассовогоОзнакомления(
	Действие, ИмяЭлемента, ОбработчикСхемы, ПроцессОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Начать выполнение действия массового ознакомления'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2. %3",
		ПредставлениеЗадания,
		Строка(Действие),
		Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет")));
		
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "УзелОбработки");		
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.НачатьВыполнениеДействияМассовогоОзнакомления,
		НаименованиеЗадания,
		Действие,
		УзелОбработки);
	
	ЗадачаОбработки = РаботаСПроцессамиПоОбработкамОбъектов.СоздатьЗадачуПодготовкиДействияКЗапуску(
		НаименованиеЗадания, ПроцессОбработки.Ссылка);
	ПроцессОбработки.ДобавитьЗадачуОбработкиЭлемента(ИмяЭлемента, ЗадачаОбработки, ОбработчикСхемы);
		
КонецПроцедуры

// Обрабатывает задание очереди НачатьВыполнениеДействияМассовогоОзнакомления
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота             
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеНачатьВыполнениеДействияМассовогоОзнакомления(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, ДатаСоздания");	
	
	Действие = РеквизитыЗадания.ПредметЗадания;                                                  
	РеквДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "ОжидатьЗавершения, ВыполненоВнеПрограммы");
	ОжидатьЗавершения = РеквДействия.ОжидатьЗавершения;
	ВыполненоВнеПрограммы = РеквДействия.ВыполненоВнеПрограммы;
	
	Если ВыполненоВнеПрограммы Тогда
		
		РаботаСПроцессамиПоОбработкамОбъектов.ВыполнитьЗадачуПодготовкиДействияКЗапуску(Действие);

		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Задание завершено. Действие пропущено (выполнено вне программы)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		РезультатВыполнения.ЗаданиеЗавершено = Истина;
		Возврат РезультатВыполнения;
		
	КонецЕсли;	
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Действие);
	Исключение                              
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать действие.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;     
	
	Если РаботаСПроцессамиПоОбработкамОбъектовСобытия.УстановитьЗадержкуНачалаВыполненияОзнакомления(Действие) Тогда
		
		// Это отложенное ознакомление        
		// ставим состояние «Отложенный запуск» действию в РС СостоянияДействий и более ничего не делаем. 

		ПроцессОбработки = 
			РаботаСПроцессамиПоОбработкамОбъектов.ПроцессОбработкиПоДействию(Действие);
		
		СоздатьСлужебнуюЗадачуДляОзнакомления(ПроцессОбработки, Действие);
		
		РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
			Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск);
			
	Иначе		
				
		Если Не ОжидатьЗавершения Тогда
			
			ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ОбработкаДействия;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.НачалоДействия;
			Событие.Действие = Действие;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
			
			СколькоСоздано = Справочники.ДействияОзнакомления.ЗаполнитьРегистрУчастниковОзнакомленияИВернутьКоличество(Действие);  
			
			Если СколькоСоздано <> 0 Тогда
				
				РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
					Перечисления.СостоянияВыполненияДействий.Завершено);

				Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
				
				Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
					Делопроизводство.ЗаписатьСостояниеДокумента(
						Предмет,
						,
						Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено,
						,
						Действие,
						Истина);
						
				ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
						
					Период = ТекущаяДатаСеанса();	
					
					УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
						Предмет,
						Период,
						Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились,
						Действие);
						
				КонецЕсли;	
				
				ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
				Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
				Событие.Обработка = ОбработкаДействия;
				Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ЗавершениеДействия;
				Событие.Действие = Действие;
				РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
				
			Иначе		
					
				РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
					Перечисления.СостоянияВыполненияДействий.Пропущено);
					
				ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
				Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
				Событие.Обработка = ОбработкаДействия;
				Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПропускДействия;
				Событие.Действие = Действие;
				РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
					
			КонецЕсли;	
			
			ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
			ОбработкиОбъектов.ОбновитьОтметкиЗавершенностиОбработки(ОбработкаДействия);
			
		Иначе	
			
			ПроцессОбработки = 
				РаботаСПроцессамиПоОбработкамОбъектов.ПроцессОбработкиПоДействию(Действие);
				
			Попытка
				ЗаблокироватьДанныеДляРедактирования(ПроцессОбработки);
			Исключение                          
				БылиБлокировки = Истина;
				РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать процесс обработки.'",
					ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Возврат РезультатВыполнения;
			КонецПопытки;
			
			ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ОбработкаДействия;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.НачалоДействия;
			Событие.Действие = Действие;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
			
			СколькоСоздано = Справочники.ДействияОзнакомления.ЗаполнитьРегистрУчастниковОзнакомленияИВернутьКоличество(Действие);  
			
			Если СколькоСоздано <> 0 Тогда   
				
				СоздатьСлужебнуюЗадачуДляОзнакомления(ПроцессОбработки, Действие);
			
				РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
					Перечисления.СостоянияВыполненияДействий.Выполняется);
				
			Иначе		
					
				РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
					Перечисления.СостоянияВыполненияДействий.Пропущено);
					
				ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
				Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
				Событие.Обработка = ОбработкаДействия;
				Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПропускДействия;
				Событие.Действие = Действие;
				РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
					
			КонецЕсли;	
				
			
		КонецЕсли;
	
	КонецЕсли;	
	
	РаботаСПроцессамиПоОбработкамОбъектов.ВыполнитьЗадачуПодготовкиДействияКЗапуску(Действие);

	РезультатВыполнения.ЗаписьЛога = НСтр("ru='Задание завершено.'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
			
КонецФункции

// Добавляет задание ОбновитьЗадачуУчастникаМассовогоОзнакомления в очередь.
// 
// Параметры:  
// 	Действие - СправочникСсылка.ДействияОзнакомления
// 	ИдентификаторУчастника - УникальныйИдентификатор
// 
Процедура ДобавитьЗаданиеОбновитьЗадачуУчастникаМассовогоОзнакомления(
	Действие, ИдентификаторУчастника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Обновить задачу участника массового ознакомления'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2. %3",
		ПредставлениеЗадания,
		Строка(Действие),
		Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет")));
		
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "УзелОбработки");	
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОбновитьЗадачуУчастникаМассовогоОзнакомления,
		НаименованиеЗадания,
		Строка(ИдентификаторУчастника),
		УзелОбработки);
	
КонецПроцедуры

// Обрабатывает задание очереди ОбновитьЗадачуУчастникаМассовогоОзнакомления
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеОбновитьЗадачуУчастникаМассовогоОзнакомления(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, ДатаСоздания");	
	
	ИдентификаторУчастника = Новый УникальныйИдентификатор(РеквизитыЗадания.ПредметЗадания);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УчастникиОзнакомлений.Действие КАК Действие,
	|	УчастникиОзнакомлений.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	УчастникиОзнакомлений.Участник КАК Участник,
	|	УчастникиОзнакомлений.Срок КАК Срок,
	|	УчастникиОзнакомлений.ДатаНачала КАК ДатаНачала,
	|	УчастникиОзнакомлений.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
	|ГДЕ
	|	УчастникиОзнакомлений.ИдентификаторУчастника = &ИдентификаторУчастника";
	
	Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдентификаторУчастника);
	
	ЭтоАктуальныйУчастник = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл     
		
		ЭтоАктуальныйУчастник = Истина;
		
		ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоДействиюОзнакомления(
			Выборка.Действие,
			ИдентификаторУчастника);
		
		ПараметрыИзменения = ДействияСервер.СтруктураПараметровИзмененияДанныхДействия(); 
		
		ПараметрыИзменения.Функция = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
		ПараметрыИзменения.ИдентификаторУчастника = Выборка.ИдентификаторУчастника;
		
		ПараметрыИзменения.Участник = Выборка.Участник;
				
		ПараметрыИзменения.СрокРассчитанный = Выборка.Срок;	
		ПараметрыИзменения.ДатаНачала = Выборка.ДатаНачала;
		
		Если Выборка.Состояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении Тогда
			ДействияСервер.НачатьВыполнениеДействияУчастником(Выборка.Действие, ПараметрыИзменения);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Не ЭтоАктуальныйУчастник Тогда
		
		ИсточникиПоИдентификатору = Документы.ДействиеЗадачи.ИсточникиПоИдентификатору(ИдентификаторУчастника);
		Для Каждого ИсточникПоИдентификатору Из ИсточникиПоИдентификатору Цикл
			ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоДействиюОзнакомления(
				ИсточникПоИдентификатору,
				ИдентификаторУчастника);
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатВыполнения.ЗаписьЛога = НСтр("ru='Задание завершено.'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
			
КонецФункции

#КонецОбласти

#Область НачатьВыполнениеДействияПроцессамиНовыеУчастники

// Добавляет задание НачатьВыполнениеДействияПроцессамиНовыеУчастники в очередь.
// 
// Параметры:
// 	Действие - СправочникОбъект.ДействияИсполнения,
// 	           СправочникОбъект.ДействияОзнакомления,
// 	           СправочникОбъект.ДействияПодписания.
//
Процедура ДобавитьЗаданиеНачатьВыполнениеДействияПроцессамиНовыеУчастники(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Начать выполнение действия процессами (новые участники)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, Строка(Действие.Предмет));
	
	УзелОбработки = Действие.УзелОбработки;
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.НачатьВыполнениеДействияПроцессамиНовыеУчастники,
		НаименованиеЗадания,
		Действие.Ссылка,
		УзелОбработки);
	
КонецПроцедуры

// Обрабатывает задание очереди НачатьВыполнениеДействияПроцессамиНовымиУчастниками
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота                                       
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеНачатьВыполнениеДействияПроцессамиНовымиУчастниками(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания");	
	
	Действие = РеквизитыЗадания.ПредметЗадания;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Действие);
	Исключение
		БылиБлокировки = Истина;	
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать действие.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	Если Не Справочники.ОчередьЗаданийДокументооборота.ЕстьДочерниеЗадания(Задание) Тогда
		
		ПроцессыПоДействию = 
			РаботаСПроцессамиПоДействиям.СоздатьПроцессыПоИсполнениюДействияСНовымиУчастниками(
				Действие.ПолучитьОбъект()); 
				
		Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			РезультатВыполнения.ЗаданиеЗавершено = Истина;
		КонецЕсли;		
		
		СтрокиЛога = Новый Массив;
		Для Каждого ПроцессПоДействию Из ПроцессыПоДействию Цикл
			
			ПроцессПоДействию.Записать();
			РегистрыСведений.ПроцессыДействий.Добавить(ПроцессПоДействию.Ссылка, Действие);
			РаботаСПроцессамиПоДействиям.ПроверитьЗаполнениеПроцессаДляВыполнения(ПроцессПоДействию);
			
			СозданоЗаданиеИлиПроцессСтартованОтложено(
				ПроцессПоДействию.Ссылка, 
				Задание, 
				СтрокиЛога,
				НСтр("ru = 'по действию'"),
				Действие);
			
		КонецЦикла;
		
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область НачатьВыполнениеДействияСогласованияПроцессомНовыеУчастники

// Добавляет задание НачатьВыполнениеДействияСогласованияПроцессомНовыеУчастники в очередь.
// 
// Параметры:
// 	Действие - СправочникОбъект.ДействияСогласования
//
Процедура ДобавитьЗаданиеНачатьВыполнениеДействияСогласованияПроцессомНовыеУчастники(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Начать выполнение действия согласования процессом (новые участники)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, Строка(Действие.Предмет));
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.НачатьВыполнениеДействияСогласованияПроцессомНовыеУчастники,
		НаименованиеЗадания,
		Действие.Ссылка,
		Действие.УзелОбработки);
	
КонецПроцедуры

// Обрабатывает задание очереди НачатьВыполнениеДействияСогласованияПроцессамиНовыеУчастники
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеНачатьВыполнениеДействияСогласованияПроцессамиНовыеУчастники(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания");	
	
	Действие = РеквизитыЗадания.ПредметЗадания;

	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "СогласованиеВРежимеЗамечаний, Предмет");
	
	СогласованиеВРежимеЗамечаний = РеквизитыДействия.СогласованиеВРежимеЗамечаний;
	Предмет = РеквизитыДействия.Предмет;
	ДокументПодготовленКСогласованиюВРежимеЗамечаний = Ложь;
	
	Если СогласованиеВРежимеЗамечаний = Истина Тогда
		ДокументПодготовленКСогласованиюВРежимеЗамечаний 
			= СогласованиеВРежимеЗамечанийСервер.ДокументПодготовленКСогласованиюВРежимеЗамечаний(Предмет);
	КонецЕсли;	
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Действие);
	Исключение     
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать действие.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	ТипыЗаданий = Перечисления.ТипыЗаданий;
	ДочерниеЗадания = Справочники.ОчередьЗаданийДокументооборота.ДочерниеЗадания(Задание);
	СтрокиЛога = Новый Массив;
	
	ЕстьПодзаданиеСоздатьHtml = Ложь;
	Для Каждого Подзадание Из ДочерниеЗадания Цикл
		
		Если Подзадание.Тип = ТипыЗаданий.СоздатьHtmlПриНачалеСогласования Тогда
			
			ЕстьПодзаданиеСоздатьHtml = Истина;
			Прервать;
			
		КонецЕсли;
		 
	КонецЦикла;      
	
	ВыполнятьЗаданияНаКлиенте = Константы.ВыполнятьЗаданияНаКлиенте.Получить();
	
	// СогласованиеВРежимеЗамечаний и либо уже ранее были готовы html - еще до начала доп обработки.
	//  либо они созданы недавно.
	Если СогласованиеВРежимеЗамечаний = Истина
		И ВыполнятьЗаданияНаКлиенте
		И (Не ДокументПодготовленКСогласованиюВРежимеЗамечаний
		Или (ДокументПодготовленКСогласованиюВРежимеЗамечаний И ЕстьПодзаданиеСоздатьHtml) ) Тогда
		
		// Если дочерних заданий нет, создадим первое подзадание
		СоздатьЗаданиеСозданияHtml = Не ЕстьПодзаданиеСоздатьHtml;
		
		Если СоздатьЗаданиеСозданияHtml Тогда
			
			ДобавитьЗаданиеСоздатьHtml(Предмет, Задание);
			
			СтрокиЛога.Добавить(
				НСтр("ru='Создано подзадание создания html.'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
			РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
			РезультатВыполнения.ЗаданиеЗавершено = Ложь;
			Возврат РезультатВыполнения;
			
		КонецЕсли;
			
			
		// тут проверяем выполнено ли подзадание создания html
		ПодзаданиеСозданияHtmlВыполнено = Ложь;
		Для Каждого Подзадание Из ДочерниеЗадания Цикл
			
			Если Подзадание.Тип = ТипыЗаданий.СоздатьHtmlПриНачалеСогласования 
				И Подзадание.СтатусЗадания = Перечисления.СтатусыЗаданий.Завершено Тогда
				
				ПодзаданиеСозданияHtmlВыполнено = Истина;
				Прервать;
				
			КонецЕсли;
			 
		КонецЦикла;
		
		Если Не ПодзаданиеСозданияHtmlВыполнено Тогда
			
			СтрокиЛога.Добавить(
				НСтр("ru='Ждем выполнения задания создания html.'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
			РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
			РезультатВыполнения.ЗаданиеЗавершено = Ложь;
			Возврат РезультатВыполнения;
			
		КонецЕсли;	
		
		// тут проверяем есть ли подзадание токенизации
		
		ЕстьПодзаданиеТокенизации = Ложь;
		Для Каждого Подзадание Из ДочерниеЗадания Цикл
			
			Если Подзадание.Тип = ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияБыстрый
				Или Подзадание.Тип = ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияДолгий Тогда
				
				ЕстьПодзаданиеТокенизации = Истина;  
				Прервать;
				
			КонецЕсли;
			 
		КонецЦикла;
		
		Если Не ЕстьПодзаданиеТокенизации И ПодзаданиеСозданияHtmlВыполнено Тогда
			// создадим подзадание токенизации.
			//  по Предмет (документ) прочитаем записи в РС СлужебныеФайлыДокументов
			//  если они есть  -там возьмем ТребуетсяДолгаяОбработка
			
			ДанныеФайловHtml = РегистрыСведений.СлужебныеФайлыДокументов.ДанныеФайловHtml(Предмет);
			Если ДанныеФайловHtml.Количество() = 0 Тогда
				
				// считаем что корректно - в документе не было Word файлов
				// ничего не делаем
				
			Иначе	
		
				ДолгаяОбработка = Ложь;
				Для Каждого Стр Из ДанныеФайловHtml Цикл
					Если Стр.ТребуетсяДолгаяОбработка Тогда
						ДолгаяОбработка = Истина;
					КонецЕсли;	
				КонецЦикла;	 
				
				ДобавитьЗаданиеТокенизацииHtml(Предмет, Задание, ДолгаяОбработка);
				
				СтрокиЛога.Добавить(
					НСтр("ru='Создано подзадание токенизации html перед ознакомлением.'",
					ОбщегоНазначения.КодОсновногоЯзыка()));
				РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
				РезультатВыполнения.ЗаданиеЗавершено = Ложь;
				Возврат РезультатВыполнения;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		// тут проверяем выполнено ли подзадание Токенизации
		ПодзаданиеТокенизацииВыполнено = Ложь;
		Для Каждого Подзадание Из ДочерниеЗадания Цикл
			
			Если (Подзадание.Тип = ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияБыстрый
			Или Подзадание.Тип = ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияДолгий) 
			И Подзадание.СтатусЗадания = Перечисления.СтатусыЗаданий.Завершено Тогда
				
				ПодзаданиеТокенизацииВыполнено = Истина;  
				Прервать;
				
			КонецЕсли;
			 
		КонецЦикла;
		
		Если ЕстьПодзаданиеТокенизации И Не ПодзаданиеТокенизацииВыполнено Тогда
			
			СтрокиЛога.Добавить(
				НСтр("ru='Ждем выполнения задания токенизации html.'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
			РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
			РезультатВыполнения.ЗаданиеЗавершено = Ложь;
			Возврат РезультатВыполнения;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ПроцессСоздан = Ложь;
	Для Каждого Подзадание Из ДочерниеЗадания Цикл
		Если Подзадание.Тип = Перечисления.ТипыЗаданий.СтартоватьПроцесс Тогда
			ПроцессСоздан = Истина;    
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПроцессСоздан Тогда
		
		ПроцессыПоДействию = 
			РаботаСПроцессамиПоДействиям.СоздатьПроцессыПоИсполнениюДействияСНовымиУчастниками(
				Действие.ПолучитьОбъект());
		
		СтрокиЛога = Новый Массив;
		
		ПроцессПоДействию = ПроцессыПоДействию[0];
		
		ПроцессПоДействию.Записать();
		РегистрыСведений.ПроцессыДействий.Добавить(ПроцессПоДействию.Ссылка, Действие);
		РаботаСПроцессамиПоДействиям.ПроверитьЗаполнениеПроцессаДляВыполнения(ПроцессПоДействию);
		
		СозданоЗаданиеИлиПроцессСтартованОтложено(
			ПроцессПоДействию.Ссылка, 
			Задание, 
			СтрокиЛога,
			НСтр("ru = 'согласования'"),
			Действие);
	
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

// Обрабатывает начало выполнения действия процессами.
// При возможности использования очереди заданий создает задания для начала
// выполнения действия процессами.  
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия
// 	ИмяЭлемента - Строка - имя элемента схемы обработки, соответствующего действию.
// 	ОбработчикСхемы - Структура - см. БизнесПроцессОбъект.КомплексныйПроцесс.ОбработчикСхемыПроцесса
// 	ПроцессОбработки - БизнесПроцессОбъект.КомплексныйПроцесс
// 	
// Возвращаемое значение:
// 	Булево - Истина, если начало выполнения обрабатывается через очередь,
// 	         иначе Ложь (прикладной код должен выполнить обычную обработку).
//
Функция ОбработатьНачалоВыполненияДействияПроцессами(
	Действие, ИмяЭлемента, ОбработчикСхемы, ПроцессОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипДействия = ТипЗнч(Действие);   
	
	ЭтоОзнакомление = Ложь;
	Если ТипДействия = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		ЭтоОзнакомление = Истина;
	КонецЕсли;	
	
	Если ТипДействия = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		ДобавитьЗаданиеНачатьВыполнениеДействияИсполненияПроцессами(
			Действие, ИмяЭлемента, ОбработчикСхемы, ПроцессОбработки);
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияСогласования") Тогда
		ДобавитьЗаданиеНачатьВыполнениеДействияСогласованияПроцессом(
			Действие, ИмяЭлемента, ОбработчикСхемы, ПроцессОбработки);
		Иначе         
			
		Если Не ЭтоОзнакомление Тогда
			
			ДобавитьЗаданиеНачатьВыполнениеДействияПроцессом(
				Действие, ИмяЭлемента, ОбработчикСхемы, ПроцессОбработки);
				
		Иначе		

			ДобавитьЗаданиеНачатьВыполнениеДействияМассовогоОзнакомления(
				Действие, ИмяЭлемента, ОбработчикСхемы, ПроцессОбработки);
			
		КонецЕсли;		
			
	КонецЕсли;
	
	Возврат Истина;
				
КонецФункции

// Обрабатывает вычисление признака "ДействиеИсполняетсяСНовымиУчастниками".
// Возвращает Истину, если вычисление обработано.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  Результат - Булево - результат вычисления, неявно возвращаемый параметр.
//
// Возвращаемый результат:
//  Булево
//
Функция ОбработатьВычислениеДействиеИсполняетсяСНовымиУчастниками(Действие, Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Действие.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Справочники.ОчередьЗаданийДокументооборота.ЕстьНеВыполненноеЗаданиеПоПредмету(
		Перечисления.ТипыЗаданий.НачатьВыполнениеДействияСогласованияПроцессомНовыеУчастники,
		Действие.Ссылка)
		
		И Не Справочники.ОчередьЗаданийДокументооборота.ЕстьНеВыполненноеЗаданиеПоПредмету(
			Перечисления.ТипыЗаданий.НачатьВыполнениеДействияПроцессамиНовыеУчастники,
			Действие.Ссылка) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	Возврат Истина;
	
КонецФункции

// Обрабатывает начало выполнения действия процессами, новыми участниками.
// При возможности использования очереди заданий создает задания для начала
// выполнения действия процессами.  
// 
// Параметры:
// 	Действие - ОпределяемыйТип.ДействияОбъект
// 	
// Возвращаемое значение:
// 	Булево - Истина, если начало выполнения обрабатывается через очередь,
// 	         иначе Ложь (прикладной код должен выполнить обычную обработку).
//
Функция ОбработатьНачалоВыполненияДействияСНовымиУчастниками(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипДействия = ТипЗнч(Действие);
	Если ТипДействия = Тип("СправочникОбъект.ДействияСогласования") Тогда
		ДобавитьЗаданиеНачатьВыполнениеДействияСогласованияПроцессомНовыеУчастники(Действие);
	Иначе
		ДобавитьЗаданиеНачатьВыполнениеДействияПроцессамиНовыеУчастники(Действие);
	КонецЕсли;
	
	Возврат Истина;
				
КонецФункции

// Возвращает актуальность задания с типом:
//  - НачатьВыполнениеДействияИсполненияПроцессами
//  - НачатьВыполнениеДействияСогласованияПроцессом
//  - НачатьВыполнениеДействияПроцессом
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияНачатьВыполнениеДействия(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		Действие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		Действие = Задание.ПредметЗадания;
	КонецЕсли;
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Действие, "ПометкаУдаления, ПомещеноВИсторию, Предмет, ВыполненоВнеПрограммы");
	
	Если Не ДействияСервер.ДействиеАктуальноДляНачалаВыполнения(РеквизитыДействия) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр(
			"ru='Действие не актуально для запуска.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область СформироватьПроцессДляИсполнителейДействияИсполнения

// Добавляет задание СформироватьПроцессДляИсполнителейДействияИсполнения в очередь.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияИсполнения 
// 	ЗаданиеДействия - СправочникСсылка.ОчередьЗаданийДокументооборота - задание начало выполнения
// 	                  действия, в рамках которого выполняется формирование текущего задания.
//
Процедура ДобавитьЗаданиеСформироватьПроцессДляИсполнителейДействияИсполнения(
	Действие, ЗаданиеДействия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Сформировать процесс для исполнителей'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2. %3",
		ПредставлениеЗадания,
		Строка(Действие),
		Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет")));
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.СформироватьПроцессДляИсполнителейДействияИсполнения,
		НаименованиеЗадания,
		Действие,
		УзелОбработки,
		ЗаданиеДействия);
	
КонецПроцедуры

// Обрабатывает задание очереди СформироватьПроцессДляИсполнителейДействияИсполнения
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеСформироватьПроцессДляИсполнителейДействияИсполнения(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель");
	
	Действие = РеквизитыЗадания.ПредметЗадания;
	ДействиеОбъект = Действие.ПолучитьОбъект();
	
	ПроцессИсполнения = Неопределено;
	Если Не Справочники.ОчередьЗаданийДокументооборота.ЕстьДочерниеЗадания(Задание) Тогда
		
		ПроцессОбработки = 
			РаботаСПроцессамиПоОбработкамОбъектов.ПроцессОбработкиПоДействию(Действие);
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ПроцессОбработки);
		Исключение                               
			БылиБлокировки = Истина;
			РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать процесс обработки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат РезультатВыполнения;
		КонецПопытки;
				
		ПроцессИсполнения =	РаботаСПроцессамиПоДействиям.СоздатьПроцессИсполненияПоДействию(
			ДействиеОбъект, ПроцессОбработки);		
	КонецЕсли;
	Если ПроцессИсполнения <> Неопределено Тогда
		
		ПроцессИсполнения.Записать();
		РегистрыСведений.ПроцессыДействий.Добавить(ПроцессИсполнения.Ссылка, Действие);
		РаботаСПроцессамиПоДействиям.УстановитьЗадержкуНачалаВыполнения(ДействиеОбъект, ПроцессИсполнения);
		
		ПроцессОбработкиОбъект = ПроцессОбработки.ПолучитьОбъект();
		ОбработчикСхемы = ПроцессОбработкиОбъект.ОбработчикСхемыПроцесса();
		ПроцессОбработкиОбъект.ДобавитьЗадачуОбработкиЭлемента(
			РаботаСПроцессамиПоОбработкамОбъектов.ИмяЭлементаСхемыОбработкиПоДействию(Действие),
			ПроцессИсполнения.ВедущаяЗадача,
			ОбработчикСхемы);
		ПроцессОбработкиОбъект.ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
		
		СтрокиЛога = Новый Массив;
		СозданоЗадание = СозданоЗаданиеИлиПроцессСтартованОтложено(ПроцессИсполнения.Ссылка, 
			Задание, 
			СтрокиЛога,
			НСтр("ru = 'рассмотрения'"),
			Действие);
		
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		Если СозданоЗадание Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;	
	КонецЕсли;	
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;

КонецФункции

#КонецОбласти

#Область СформироватьПроцессДляРассматривающегоДействияИсполнения

// Добавляет задание СформироватьПроцессДляРассматривающегоДействияИсполнения в очередь.
// 
// Параметры:
// 	ИдентификаторРассматривающего - Строка - идентификатор рассматривающего в действии.
// 	ЗаданиеДействия - СправочникСсылка.ОчередьЗаданийДокументооборота - задание начало выполнения
// 	                  действия, в рамках которого выполняется формирование текущего задания.
//
Процедура ДобавитьЗаданиеСформироватьПроцессДляРассматривающегоДействияИсполнения(
	ИдентификаторРассматривающего, ЗаданиеДействия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Сформировать процесс для рассматривающего'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2",
		ПредставлениеЗадания,
		ИдентификаторРассматривающего);
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЗаданиеДействия, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.СформироватьПроцессДляРассматривающегоДействияИсполнения,
		НаименованиеЗадания,
		ИдентификаторРассматривающего,
		УзелОбработки,
		ЗаданиеДействия);
		
КонецПроцедуры

// Обрабатывает задание очереди СформироватьПроцессДляРассматривающегоДействияИсполнения
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеСформироватьПроцессДляРассматривающегоДействияИсполнения(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, Родитель.ПредметЗадания");
	
	Действие = РеквизитыЗадания.РодительПредметЗадания;
	ИдентификаторРассматривающего = Новый УникальныйИдентификатор(РеквизитыЗадания.ПредметЗадания);
	
	ДействиеОбъект = Действие.ПолучитьОбъект();
	
	Если Не Справочники.ОчередьЗаданийДокументооборота.ЕстьДочерниеЗадания(Задание) Тогда
		
		ПроцессОбработки = 
			РаботаСПроцессамиПоОбработкамОбъектов.ПроцессОбработкиПоДействию(Действие);
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ПроцессОбработки);
		Исключение                               
			БылиБлокировки = Истина;
			РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать процесс обработки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат РезультатВыполнения;
		КонецПопытки;
		
		ПроцессРассмотрения = 
			РаботаСПроцессамиПоДействиям.СоздатьПроцессРассмотренияПоУчастникуДействия(
			ДействиеОбъект,
			ИдентификаторРассматривающего,
			ПроцессОбработки);
		ПроцессРассмотрения.Записать();
		
		РаботаСПроцессамиПоДействиям.УстановитьЗадержкуНачалаВыполнения(ДействиеОбъект, ПроцессРассмотрения);
		РегистрыСведений.ПроцессыДействий.Добавить(ПроцессРассмотрения.Ссылка, Действие);
		
		ПроцессОбработкиОбъект = ПроцессОбработки.ПолучитьОбъект();
		ОбработчикСхемы = ПроцессОбработкиОбъект.ОбработчикСхемыПроцесса();
		ПроцессОбработкиОбъект.ДобавитьЗадачуОбработкиЭлемента(
			РаботаСПроцессамиПоОбработкамОбъектов.ИмяЭлементаСхемыОбработкиПоДействию(Действие),
			ПроцессРассмотрения.ВедущаяЗадача,
			ОбработчикСхемы);
		ПроцессОбработкиОбъект.ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
		
		СтрокиЛога = Новый Массив;
		СозданоЗадание = СозданоЗаданиеИлиПроцессСтартованОтложено(ПроцессРассмотрения.Ссылка, 
			Задание, 
			СтрокиЛога,
			НСтр("ru = 'рассмотрения'"),
			Действие);
		
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		Если СозданоЗадание Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;		
	КонецЕсли; 
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область СформироватьПроцессДляПунктаДействияИсполнения

// Добавляет задание СформироватьПроцессДляПунктаДействияИсполнения в очередь.
// 
// Параметры:
// 	ИдентификаторПункта - Строка - идентификатор пункта в действии.
// 	ЗаданиеДействия - СправочникСсылка.ОчередьЗаданийДокументооборота - задание начало выполнения
// 	                  действия, в рамках которого выполняется формирование текущего задания.
//
Процедура ДобавитьЗаданиеСформироватьПроцессДляПунктаДействияИсполнения(
	ИдентификаторПункта, ЗаданиеДействия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Сформировать процесс для пункта'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2",
		ПредставлениеЗадания,
		ИдентификаторПункта);
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЗаданиеДействия, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.СформироватьПроцессДляПунктаДействияИсполнения,
		НаименованиеЗадания,
		ИдентификаторПункта,
		УзелОбработки,
		ЗаданиеДействия);
		
КонецПроцедуры

// Обрабатывает задание очереди СформироватьПроцессДляПунктаДействияИсполнения
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеСформироватьПроцессДляПунктаДействияИсполнения(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, Родитель.ПредметЗадания");
	
	Действие = РеквизитыЗадания.РодительПредметЗадания;
	ИдентификаторПункта = Новый УникальныйИдентификатор(РеквизитыЗадания.ПредметЗадания);
	
	ДействиеОбъект = Действие.ПолучитьОбъект();
	
	Если Не Справочники.ОчередьЗаданийДокументооборота.ЕстьДочерниеЗадания(Задание) Тогда
		
		ПроцессОбработки = 
			РаботаСПроцессамиПоОбработкамОбъектов.ПроцессОбработкиПоДействию(Действие);
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ПроцессОбработки);
		Исключение                              
			БылиБлокировки = Истина;
			РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать процесс обработки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат РезультатВыполнения;
		КонецПопытки;
		
		ПроцессИсполненияПункта = 
			РаботаСПроцессамиПоДействиям.СоздатьПроцессИсполненияПоПунктуДействия(
			ДействиеОбъект,
			ИдентификаторПункта,
			ПроцессОбработки);
		ПроцессИсполненияПункта.Записать();
		РегистрыСведений.ПроцессыДействий.Добавить(ПроцессИсполненияПункта.Ссылка, Действие, ИдентификаторПункта);
		РаботаСПроцессамиПоДействиям.УстановитьЗадержкуНачалаВыполнения(ДействиеОбъект, ПроцессИсполненияПункта);
		
		ПроцессОбработкиОбъект = ПроцессОбработки.ПолучитьОбъект();
		ОбработчикСхемы = ПроцессОбработкиОбъект.ОбработчикСхемыПроцесса();
		ПроцессОбработкиОбъект.ДобавитьЗадачуОбработкиЭлемента(
			РаботаСПроцессамиПоОбработкамОбъектов.ИмяЭлементаСхемыОбработкиПоДействию(Действие),
			ПроцессИсполненияПункта.ВедущаяЗадача,
			ОбработчикСхемы);
		ПроцессОбработкиОбъект.ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
		
		СтрокиЛога = Новый Массив;
		СозданоЗадание = СозданоЗаданиеИлиПроцессСтартованОтложено(ПроцессИсполненияПункта.Ссылка, 
			Задание, 
			СтрокиЛога,
			НСтр("ru = 'исполнения по пункту'"),
			Действие);
		
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		Если СозданоЗадание Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ПодготовитьПредметКСогласованиюВРежимеЗамечаний

// Добавляет задание ПодготовитьПредметКСогласованиюВРежимеЗамечаний в очередь.
// 
// Параметры:
// 	Предмет - ОпределяемыйТип.ПредметДействия
// 	ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота
//
Процедура ДобавитьЗаданиеПодготовитьПредметКСогласованиюВРежимеЗамечаний(
	Предмет, ГлавноеЗадание = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Подготовить к согласованию в режиме замечаний'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1: %2", ПредставлениеЗадания, Строка(Предмет));
	
	Если ЗначениеЗаполнено(ГлавноеЗадание) Тогда
		УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ГлавноеЗадание, "УзелОбработки");
	Иначе
		УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
	КонецЕсли;
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ПодготовитьПредметКСогласованиюВРежимеЗамечаний,
		НаименованиеЗадания,
		Предмет,
		УзелОбработки,
		ГлавноеЗадание);
	
КонецПроцедуры

// Обрабатывает задание очереди ПодготовитьПредметКСогласованиюВРежимеЗамечаний
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеПодготовитьПредметКСогласованиюВРежимеЗамечаний(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	СтрокиЛога = Новый Массив;
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания");
	
	Предмет = РеквизитыЗадания.ПредметЗадания; // тут документ
	
	ТипыЗаданий = Перечисления.ТипыЗаданий;
	
	ДочерниеЗадания = Справочники.ОчередьЗаданийДокументооборота.ДочерниеЗадания(Задание);
	
	// Если дочерних заданий нет, то действие еще не готовилось к выполнению.
	// создадим первое подзадание
	СоздатьЗаданиеСозданияHtml = (ДочерниеЗадания.Количество() = 0);
	
	Если СоздатьЗаданиеСозданияHtml Тогда
		
		ДобавитьЗаданиеСоздатьHtml(Предмет, Задание);
		
		СтрокиЛога.Добавить(
			НСтр("ru='Создано подзадание создания html.'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		РезультатВыполнения.ЗаданиеЗавершено = Ложь;
		Возврат РезультатВыполнения;
		
	КонецЕсли;
		
	// тут проверяем выполнено ли подзадание создания html
	ПодзаданиеСозданияHtmlВыполнено = Ложь;
	Для Каждого Подзадание Из ДочерниеЗадания Цикл
		
		Если Подзадание.Тип = ТипыЗаданий.СоздатьHtmlПриНачалеСогласования 
		И Подзадание.СтатусЗадания = Перечисления.СтатусыЗаданий.Завершено Тогда
			
			ПодзаданиеСозданияHtmlВыполнено = Истина;
			
		КонецЕсли;
		 
	КонецЦикла;
	
	// тут проверяем есть ли подзадание токенизации
	
	ЕстьПодзаданиеТокенизации = Ложь;
	Для Каждого Подзадание Из ДочерниеЗадания Цикл
		
		Если Подзадание.Тип = ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияБыстрый
		Или Подзадание.Тип = ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияДолгий Тогда
			
			ЕстьПодзаданиеТокенизации = Истина;
			
		КонецЕсли;
		 
	КонецЦикла;
	
	Если Не ЕстьПодзаданиеТокенизации И ПодзаданиеСозданияHtmlВыполнено Тогда
		// создадим подзадание токенизации.
		//  по Предмет (документ) прочитаем записи в РС СлужебныеФайлыДокументов
		//  если они есть  -там возьмем ТребуетсяДолгаяОбработка
		
		ДанныеФайловHtml = РегистрыСведений.СлужебныеФайлыДокументов.ДанныеФайловHtml(Предмет);
		Если ДанныеФайловHtml.Количество() = 0 Тогда
			// считаем что корректно - в документе не было Word файлов
			РезультатВыполнения.ЗаданиеЗавершено = Истина;
			Возврат РезультатВыполнения;
		КонецЕсли;	
		
		ДолгаяОбработка = Ложь;
		Для Каждого Стр Из ДанныеФайловHtml Цикл
			Если Стр.ТребуетсяДолгаяОбработка Тогда
				ДолгаяОбработка = Истина;
			КонецЕсли;	
		КонецЦикла;	 
		
		ДобавитьЗаданиеТокенизацииHtml(Предмет, Задание, ДолгаяОбработка);
		
		СтрокиЛога.Добавить(
			НСтр("ru='Создано подзадание токенизации html.'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		РезультатВыполнения.ЗаданиеЗавершено = Ложь;
		Возврат РезультатВыполнения;
		
	КонецЕсли;	
		
	ЕстьДочерниеЗаданияНевыполненные 
		= Справочники.ОчередьЗаданийДокументооборота.ЕстьДочерниеЗаданияНевыполненные(Задание);
	
	Если Не ЕстьДочерниеЗаданияНевыполненные Тогда
		РезультатВыполнения.ЗаданиеЗавершено = Истина;
		Возврат РезультатВыполнения;
	Иначе
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Задание ожидает выполнения дочерних заданий.'");
		РезультатВыполнения.ЗаданиеЗавершено = Ложь;
		Возврат РезультатВыполнения;
	КонецЕсли;			
	
КонецФункции

#КонецОбласти

#Область СоздатьHtmlПриНачалеСогласования

// Добавляет задание в очередь для создания html.
// 
// Параметры:
// 	Предмет - ОпределяемыйТип.ПредметДействия
// 	ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота
//
Процедура ДобавитьЗаданиеСоздатьHtml(
	Предмет, ГлавноеЗадание = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Создать Html при начале согласования'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1: %2", ПредставлениеЗадания, Строка(Предмет));
	
	Если ЗначениеЗаполнено(ГлавноеЗадание) Тогда
		УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ГлавноеЗадание, "УзелОбработки");
	Иначе
		УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
	КонецЕсли;
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.СоздатьHtmlПриНачалеСогласования,
		НаименованиеЗадания,
		Предмет,
		УзелОбработки,
		ГлавноеЗадание);
	
КонецПроцедуры

#КонецОбласти

#Область ДобавитьТегиHtmlПриНачалеСогласования

// Добавляет задание в очередь для создания html.
// 
// Параметры:
// 	Предмет - ОпределяемыйТип.ПредметДействия
// 	ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота
// 	ДолгаяОбработка - Булево
//
Процедура ДобавитьЗаданиеТокенизацииHtml(
	Предмет, ГлавноеЗадание = Неопределено, ДолгаяОбработка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Добавить теги Html при начале согласования (быстрая)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	ТипЗадания = Перечисления.ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияБыстрый;
	
	Если ДолгаяОбработка Тогда
		ТипЗадания = Перечисления.ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияДолгий;
		
		ПредставлениеЗадания = НСтр("ru = 'Добавить теги Html при начале согласования (долгая)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
	КонецЕсли;	 

	НаименованиеЗадания = СтрШаблон("%1: %2", ПредставлениеЗадания, Строка(Предмет));
	
	Если ЗначениеЗаполнено(ГлавноеЗадание) Тогда
		УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ГлавноеЗадание, "УзелОбработки");
	Иначе
		УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
	КонецЕсли;
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		ТипЗадания,
		НаименованиеЗадания,
		Предмет,
		УзелОбработки,
		ГлавноеЗадание);
	
КонецПроцедуры

// Обрабатывает задание очереди ДобавитьТегиHtmlПриНачалеСогласованияБыстрый
//  и ДобавитьТегиHtmlПриНачалеСогласованияДолгий
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеТокенизироватьHtmlПриНачалеСогласования(
	Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, ДатаСоздания, Родитель, Тип");	
	
	Предмет = РеквизитыЗадания.ПредметЗадания;
	
	// тут код выполнения.
	СогласованиеВРежимеЗамечанийСервер.ОбработатьHTMLФайлыДокумента(Предмет);
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаОзнакомленияСогласования

// Обрабатывает добавление служебной задачи процесса для отложенной подготовки точки действия Ознакомиться.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Согласование
//  ФормируемыеЗадачи - Массив - массив создаваемых задач.
//                      в него следует поместить объект создаваемой задачи.
//                      задачу не следует записывать.
//
// Возвращаемое значение:
//  Булево - признак того, что обработка была выполнена в текущей процедуре.
//           если обработка не была выполнена, то будет выполнена стандартная обработка.
//
Функция ОбработатьДобавлениеЗадачиОтложеннаяПодготовкаОзнакомления(Процесс, ФормируемыеЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если Не Константы.ВыполнятьЗаданияНаКлиенте.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;	 	
	
	РаботаСПроцессамиПоДействиямСобытия.СоздатьСлужебныеЗадачиОтложеннаяПодготовкаОзнакомления(
		Процесс, ФормируемыеЗадачи);
		
	Если ФормируемыеЗадачи.Количество() = 0 Тогда	
		Возврат Ложь;
	КонецЕсли;
		
	СлужебнаяЗадачаОбъект = ФормируемыеЗадачи[0];
	СлужебнаяЗадача = СлужебнаяЗадачаОбъект.ПолучитьСсылкуНового();
	
	// создадим задание
	ДобавитьЗаданиеПодготовкаОзнакомления(СлужебнаяЗадача, СлужебнаяЗадачаОбъект.БизнесПроцесс);
			
	Возврат Истина;	
	
КонецФункции

// Добавляет задание ПодготовкаОзнакомления в очередь.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияИсполнения
//
Процедура ДобавитьЗаданиеПодготовкаОзнакомления(СлужебнаяЗадача, Наименование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Начать подготовку ознакомления (добавление комментариев в Word или OpenOffice)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2",
		ПредставлениеЗадания,
		Строка(Наименование)
		);
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		СлужебнаяЗадача, "БизнесПроцесс.УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ПодготовкаОзнакомленияСогласования,
		НаименованиеЗадания,
		СлужебнаяЗадача,
		УзелОбработки);
		
КонецПроцедуры

// Обрабатывает задание очереди ПодготовкаОзнакомленияСогласования
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеПодготовкаОзнакомленияСогласования(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	СтрокиЛога = Новый Массив;
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания");	
	
	ПредметЗадания = РеквизитыЗадания.ПредметЗадания; // тут служебная задача
	
	Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПредметЗадания, "БизнесПроцесс");
	
	Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(Процесс);
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Действие, "Предмет");
	
	ТипыЗаданий = Перечисления.ТипыЗаданий;
	
	ДочерниеЗадания = Справочники.ОчередьЗаданийДокументооборота.ДочерниеЗадания(Задание);
	
	// Если дочерних заданий нет, создадим первое подзадание
	СоздатьЗаданиеСозданияHtml = (ДочерниеЗадания.Количество() = 0);
	
	Если СоздатьЗаданиеСозданияHtml Тогда
		
		ДобавитьЗаданиеОбновитьHtml(Действие, Задание);
		
		СтрокиЛога.Добавить(
			НСтр("ru='Создано подзадание обновления html.'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		РезультатВыполнения.ЗаданиеЗавершено = Ложь;
		Возврат РезультатВыполнения;
		
	КонецЕсли;
		
		
	// тут проверяем выполнено ли подзадание создания html
	ПодзаданиеСозданияHtmlВыполнено = Ложь;
	Для Каждого Подзадание Из ДочерниеЗадания Цикл
		
		Если Подзадание.Тип = ТипыЗаданий.ОбновитьHtmlПередОзнакомлением 
		И Подзадание.СтатусЗадания = Перечисления.СтатусыЗаданий.Завершено Тогда
			
			ПодзаданиеСозданияHtmlВыполнено = Истина;
			
		КонецЕсли;
		 
	КонецЦикла;
	
	// тут проверяем есть ли подзадание токенизации
	
	ЕстьПодзаданиеТокенизации = Ложь;
	Для Каждого Подзадание Из ДочерниеЗадания Цикл
		
		Если Подзадание.Тип = ТипыЗаданий.ДобавитьТегиHtmlПередОзнакомлениемБыстрый
		Или Подзадание.Тип = ТипыЗаданий.ДобавитьТегиHtmlПередОзнакомлениемДолгий Тогда
			
			ЕстьПодзаданиеТокенизации = Истина;
			
		КонецЕсли;
		 
	КонецЦикла;
	
	Если Не ЕстьПодзаданиеТокенизации И ПодзаданиеСозданияHtmlВыполнено Тогда
		// создадим подзадание токенизации.
		//  по Предмет (документ) прочитаем записи в РС СлужебныеФайлыДокументов
		//  если они есть  -там возьмем ТребуетсяДолгаяОбработка
		
		ДанныеФайловHtml = РегистрыСведений.СлужебныеФайлыДокументов.ДанныеФайловHtml(Предмет);
		Если ДанныеФайловHtml.Количество() = 0 Тогда
			
			// считаем что корректно - в документе не было Word файлов
			
			ЕстьДочерниеЗаданияНевыполненные 
				= Справочники.ОчередьЗаданийДокументооборота.ЕстьДочерниеЗаданияНевыполненные(Задание);
			
			Если Не ЕстьДочерниеЗаданияНевыполненные Тогда
				
				// выполним служебную задачу
				ВыполнитьЗадачу(ПредметЗадания);

				РезультатВыполнения.ЗаданиеЗавершено = Истина;
				
			Иначе
				
				РезультатВыполнения.ЗаписьЛога = НСтр("ru='Задание ожидает выполнения дочерних заданий.'");
				РезультатВыполнения.ЗаданиеЗавершено = Ложь;
				
			КонецЕсли;	
			
			Возврат РезультатВыполнения;
			
		КонецЕсли;	
		
		ДолгаяОбработка = Ложь;
		Для Каждого Стр Из ДанныеФайловHtml Цикл
			Если Стр.ТребуетсяДолгаяОбработка Тогда
				ДолгаяОбработка = Истина;
			КонецЕсли;	
		КонецЦикла;	 
		
		ДобавитьЗаданиеТокенизацииHtmlПередОзнакомлением(Предмет, Задание, ДолгаяОбработка);
		
		СтрокиЛога.Добавить(
			НСтр("ru='Создано подзадание токенизации html перед ознакомлением.'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
		РезультатВыполнения.ЗаписьЛога = СтрСоединить(СтрокиЛога, " ");
		РезультатВыполнения.ЗаданиеЗавершено = Ложь;
		Возврат РезультатВыполнения;
		
	КонецЕсли;	
		
	ЕстьДочерниеЗаданияНевыполненные 
		= Справочники.ОчередьЗаданийДокументооборота.ЕстьДочерниеЗаданияНевыполненные(Задание);
	
	Если Не ЕстьДочерниеЗаданияНевыполненные Тогда
		
		// выполним служебную задачу
		ВыполнитьЗадачу(ПредметЗадания);
				
		РезультатВыполнения.ЗаданиеЗавершено = Истина;
		Возврат РезультатВыполнения;
	Иначе
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Задание ожидает выполнения дочерних заданий.'");
		РезультатВыполнения.ЗаданиеЗавершено = Ложь;
		Возврат РезультатВыполнения;
	КонецЕсли;			
	
КонецФункции

// Возвращает актуальность задания ПодготовкаОзнакомленияСогласования.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияПодготовкаОзнакомленияСогласования(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		ЗадачаПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		ЗадачаПроцесса = Задание.ПредметЗадания;
	КонецЕсли;
	
	Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "БизнесПроцесс");
	
	Если Не РаботаСБизнесПроцессами.ВыполнениеПроцессаАктуально(Процесс.ПолучитьОбъект()) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Выполнение процесса не актуально.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область ОбновитьHtmlПередОзнакомлением

// Добавляет задание в очередь для создания html.
// 
// Параметры:
// 	Предмет - ОпределяемыйТип.ПредметДействия
// 	ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота
//
Процедура ДобавитьЗаданиеОбновитьHtml(
	Предмет, ГлавноеЗадание = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Обновить Html перед ознакомлением согласования'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1: %2", ПредставлениеЗадания, Строка(Предмет));
	
	Если ЗначениеЗаполнено(ГлавноеЗадание) Тогда
		УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ГлавноеЗадание, "УзелОбработки");
	Иначе
		УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
	КонецЕсли;
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОбновитьHtmlПередОзнакомлением,
		НаименованиеЗадания,
		Предмет,
		УзелОбработки,
		ГлавноеЗадание);
	
КонецПроцедуры

// Вернет данные
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия
// 	
// Возвращаемое значение:
// Структура
//  * Документ - СправочникССылка.ДокументыПредприятия
//  * НомерИтерации -Число
// 	
Функция ДанныеДляЗаданияОбновитьHtmlПередОзнакомлением(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(Действие);
	РеквДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Действие, "Предмет, ЧислоСтраницДляПредпросмотраПорции");
		
	СпособСогласованияВРежимеЗамечаний = Константы.СпособСогласованияВРежимеЗамечаний.Получить();	
	
	Возврат Новый Структура("Документ, НомерИтерации, СпособСогласованияВРежимеЗамечаний, ЧислоСтраницДляПредпросмотраПорции", 
		РеквДействия.Предмет, НомерИтерации, СпособСогласованияВРежимеЗамечаний,
		РеквДействия.ЧислоСтраницДляПредпросмотраПорции);
	
КонецФункции

#КонецОбласти

#Область ДобавитьТегиHtmlПередОзнакомлением

// Добавляет задание в очередь для создания html.
// 
// Параметры:
// 	Предмет - ОпределяемыйТип.ПредметДействия
// 	ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота
// 	ДолгаяОбработка  -Булево
//
Процедура ДобавитьЗаданиеТокенизацииHtmlПередОзнакомлением(
	Предмет, ГлавноеЗадание = Неопределено, ДолгаяОбработка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Токенизировать Html перед ознакомлением согласования (быстрая)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	ТипЗадания = Перечисления.ТипыЗаданий.ДобавитьТегиHtmlПередОзнакомлениемБыстрый;
	
	Если ДолгаяОбработка Тогда
		ТипЗадания = Перечисления.ТипыЗаданий.ДобавитьТегиHtmlПередОзнакомлениемДолгий;
		
		ПредставлениеЗадания = НСтр("ru = 'Токенизировать Html перед ознакомлением согласования (долгая)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
	КонецЕсли;	 

	НаименованиеЗадания = СтрШаблон("%1: %2", ПредставлениеЗадания, Строка(Предмет));
	
	Если ЗначениеЗаполнено(ГлавноеЗадание) Тогда
		УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ГлавноеЗадание, "УзелОбработки");
	Иначе
		УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
	КонецЕсли;
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		ТипЗадания,
		НаименованиеЗадания,
		Предмет,
		УзелОбработки,
		ГлавноеЗадание);
	
КонецПроцедуры

// Обрабатывает задание очереди ДобавитьТегиHtmlПриНачалеСогласованияБыстрый
//  и ДобавитьТегиHtmlПриНачалеСогласованияДолгий
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеТокенизироватьHtmlПередОзнакомлением(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, ДатаСоздания, Родитель, Тип");	
	
	Предмет = РеквизитыЗадания.ПредметЗадания;
	
	// тут код выполнения.
	СогласованиеВРежимеЗамечанийСервер.ОбработатьHTMLФайлыДокумента(Предмет);
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ЗавершениеОзнакомленияСогласования

// Обрабатывает добавление служебной задачи процесса для отложенной подготовки точки действия Ознакомиться.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Согласование
//
// Возвращаемое значение:
//  Булево - признак того, что обработка была выполнена в текущей процедуре.
//           если обработка не была выполнена, то будет выполнена стандартная обработка.
//
Функция ОбработатьДобавлениеЗадачиОтложеннаяОбработкаЗавершенияОзнакомления(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не Константы.ВыполнятьЗаданияНаКлиенте.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;	 	
	
	СлужебнаяЗадачаОбъект 
		= РаботаСПроцессамиПоДействиямСобытия.СоздатьСлужебнуюЗадачуОтложеннаяПодготовкаЗавершенияОзнакомления(
		Процесс);
		
	СлужебнаяЗадача = СлужебнаяЗадачаОбъект.Ссылка; // т.к. задача уже записана
	
	// создадим задание
	ДобавитьЗаданиеЗавершениеОзнакомления(СлужебнаяЗадача, СлужебнаяЗадачаОбъект.БизнесПроцесс);
			
	Возврат Истина;	
	
КонецФункции

// Обрабатывает добавление служебной задачи процесса для отложенной подготовки точки действия Согласовать.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Согласование
//
// Возвращаемое значение:
//  Булево - признак того, что обработка была выполнена в текущей процедуре.
//           если обработка не была выполнена, то будет выполнена стандартная обработка.
//
Функция ОбработатьДобавлениеЗадачиОтложеннаяОбработкаЗавершенияСогласования(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не Константы.ВыполнятьЗаданияНаКлиенте.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;	 	
	
	СлужебнаяЗадачаОбъект 
		= РаботаСПроцессамиПоДействиямСобытия.СоздатьСлужебнуюЗадачуОтложеннаяПодготовкаЗавершенияТочкаСогласовать(
		Процесс);
		
	СлужебнаяЗадача = СлужебнаяЗадачаОбъект.Ссылка; // т.к. задача уже записана
	
	// создадим задание
	ДобавитьЗаданиеЗавершениеОзнакомления(СлужебнаяЗадача, СлужебнаяЗадачаОбъект.БизнесПроцесс);
			
	Возврат Истина;	
	
КонецФункции

// Добавляет задание ПодготовкаОзнакомления в очередь.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияИсполнения
//
Процедура ДобавитьЗаданиеЗавершениеОзнакомления(СлужебнаяЗадача, Наименование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Начать завершение точки ознакомления в согласовании (удаление комментариев из Word  или OpenOffice)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2",
		ПредставлениеЗадания,
		Строка(Наименование)
		);
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		СлужебнаяЗадача, "БизнесПроцесс.УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ЗавершениеОзнакомленияСогласования,
		НаименованиеЗадания,
		СлужебнаяЗадача,
		УзелОбработки);
		
КонецПроцедуры

// Вернет данные
// 
// Параметры:
// 	СлужебнаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя
// 	
// Возвращаемое значение:
// Структура
//  * Документ - СправочникССылка.ДокументыПредприятия
//  * Действие - ОпределяемыйТип.Действия
// 	
Функция ДанныеДляЗавершениеОзнакомленияСогласования(СлужебнаяЗадача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		СлужебнаяЗадача, "БизнесПроцесс");
	Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(Процесс);	
	Документ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Действие, "Предмет");
		
	СпособСогласованияВРежимеЗамечаний = Константы.СпособСогласованияВРежимеЗамечаний.Получить();	
	
	Возврат Новый Структура("Документ, Действие, СпособСогласованияВРежимеЗамечаний", 
		Документ, Действие, СпособСогласованияВРежимеЗамечаний);
	
КонецФункции	

// Возвращает актуальность задания ЗавершениеОзнакомленияСогласования.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияЗавершениеОзнакомленияСогласования(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		ЗадачаПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		ЗадачаПроцесса = Задание.ПредметЗадания;
	КонецЕсли;
	
	Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "БизнесПроцесс");
	
	Если Не РаботаСБизнесПроцессами.ВыполнениеПроцессаАктуально(Процесс.ПолучитьОбъект()) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Выполнение процесса не актуально.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область СтартоватьПроцесс

// Обработает программный запуск процесса
// 
// Параметры:
// 	Процесс  - БизнесПроцессСсылка
// 	
// Возвращаемое значение:
// 	Булево - Истина, если отработали
Функция ОбработатьПрограммныйЗапускПроцесса(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбработкаОчередиЗаданийВызовСервера.ИспользоватьЗадания() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	// создадим задание		
	ДобавитьЗаданиеСтартоватьПроцесс(Процесс);
	
	Возврат Истина;
	
КонецФункции

// Обработает интерактивный запуск процесса -серверная часть.
// 
// Параметры:
// 	Процесс  - БизнесПроцессСсылка
// 	ПараметрыЗаписи - Структура
// 	
// Возвращаемое значение:
// 	Булево - Истина, если отработали
Функция ОбработатьЗапускПроцессаИзКарточки (Процесс, ПараметрыЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбработкаОчередиЗаданийВызовСервера.ИспользоватьЗадания() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ПараметрыЗаписи.Свойство("СтартПроцессаЧерезОчередьЗаданий") 
		И ПараметрыЗаписи.СтартПроцессаЧерезОчередьЗаданий Тогда

		// создадим задание		
		ДобавитьЗаданиеСтартоватьПроцесс(Процесс);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Добавляет задание СтартоватьПроцесс в очередь.
// 
// Параметры:
// 	Процесс - БизнесПроцессСсылка
// 	ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота
//
Процедура ДобавитьЗаданиеСтартоватьПроцесс(Процесс, ГлавноеЗадание = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Стартовать процесс'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1: %2", ПредставлениеЗадания, Строка(Процесс));
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Процесс, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.СтартоватьПроцесс,
		НаименованиеЗадания,
		Процесс,
		УзелОбработки,
		ГлавноеЗадание);
		
КонецПроцедуры

// Обрабатывает задание очереди СтартоватьПроцесс
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеСтартоватьПроцесс(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания");
	
	Процесс = РеквизитыЗадания.ПредметЗадания;
	
	Если ЕстьНевыполненныеЗаданияПоМаршрутизацииПроцессаОбработки(Процесс) Тогда
		РезультатВыполнения.ЗаписьЛога =
			НСтр("ru='Есть невыполненные задания по маршрутизации процесса обработки.
				|Ожидание выполнения заданий.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Процесс);
	Исключение                                  
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать процесс.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	
	НезаполненныеПоля = ПроцессОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	Если НезаполненныеПоля.Количество() > 0 Тогда
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'В процессе не заполнены обязательные поля:
			|%1'"),
			СтрСоединить(НезаполненныеПоля, ", "));
		ВызватьИсключение ТекстИсключения;	
	КонецЕсли;
	
	// Проверка прав участников процесса на предметы
	МультипредметностьКОРП.ПроверитьПраваУчастниковПроцессаИОтправитьУведомления(
		ПроцессОбъект, ПроцессОбъект.Автор);
	
	СтартПроцессовСервер.СтартоватьПроцессСлужебная(ПроцессОбъект);
		
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;	
	
КонецФункции

// Возвращает актуальность задания СтартоватьПроцесс.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияСтартоватьПроцесс(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		Процесс = Задание.ПредметЗадания;
	КонецЕсли;
	
	Если Не СтартПроцессовСервер.СтартПроцессаАктуален(Процесс.ПолучитьОбъект()) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Запуск процесса неактуален.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Возвращает инфу о процессе в очереди для запуска
// 
// Параметры:
// 	Процесс
// Возвращаемое значение:
// 	Неопределено, Структура - Описание:
// * ПричинаОтменыСтарта - Строка -
// * Состояние - ПеречислениеСсылка.СостоянияПроцессовДляЗапуска -
// * ДатаОтложенногоСтарта - Дата -
Функция СведенияОПроцессеДляЗапуска(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьМаршрутизации.Ссылка КАК Задание
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьМаршрутизации
		|ГДЕ
		|	ОчередьМаршрутизации.ПредметЗадания = &ПредметЗадания
		|	И ОчередьМаршрутизации.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)
		|	И ОчередьМаршрутизации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.СтартоватьПроцесс)";
		
	Запрос.УстановитьПараметр("ПредметЗадания", Процесс);

	// есть задание 		
	Если Не Запрос.Выполнить().Пустой() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("БизнесПроцесс", Процесс);
		Результат.Вставить("ДатаОтложенногоСтарта", Дата('00010101000000'));
		Результат.Вставить("Состояние", Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту);
		Результат.Вставить("ПричинаОтменыСтарта", "");
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОбновленияДанныхПроцессаБезДействия

// Добавить задания обновления данных процесса.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект - записиваемый процесс
//  ПараметрыЗадания - Структура - Структура параметров
//  ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота - задания перед выполнением которых  нужно
//  	изменить данные процесса, ОстановкаПроцесса, ПрерываниеПроцесса
//
Процедура ДобавитьЗаданиеОбновленияДанныхПроцесса(Процесс, ПараметрыЗадания, ГлавноеЗадание = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Обновить данные процесса'", ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, Процесс);
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОбновитьПроцессБезДействия, НаименованиеЗадания, Процесс.Ссылка,
		Процесс.УзелОбработки, ГлавноеЗадание,
		ПодготовитьПараметрыКХранению(ПараметрыЗадания));
	
КонецПроцедуры

// Обрабатывает задание очереди ОбновлениеДанныхПроцесса
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// Возвращаемое значение:
//  Булево
//
Функция ОбработатьЗаданиеОбновлениеДанныхПроцесса(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, ПараметрыВыполнения");
	
	ПараметрыЗадания = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	Если ТипЗнч(ПараметрыЗадания) <> Тип("Структура") Тогда
		РезультатВыполнения.ЗаданиеЗавершено = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru = 'Некорректный формат параметров выполнения задания.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ОлицетворяемыйПользовательПрежний = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ПараметрыЗадания.АвторИзменения);
	
	НачатьТранзакцию();
	Попытка
	
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить(РеквизитыЗадания.ПредметЗадания.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", РеквизитыЗадания.ПредметЗадания);
		БлокировкаДанных.Заблокировать();
	
		ПредметЗадания = РеквизитыЗадания.ПредметЗадания.ПолучитьОбъект();
		ХэшСуммаОбъекта = КОДСервер.ХешСуммаMD5СериализованногоОбъекта(
			ПредметЗадания.Ссылка, , ПараметрыЗадания.ВерсияФормата);
	
		Если ХэшСуммаОбъекта <> ПараметрыЗадания.ХэшСуммаОбъекта Тогда
			РезультатВыполнения.ЗаданиеЗавершено = Истина;
			РезультатВыполнения.ЗаписьЛога = НСтр("ru = 'Состояние предмета задания не соответствует состоянию
												  |параметров выполнения. Возможно предмет задания был изменен.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			ЧтениеСообщение = КодПолучение.НовоеЧтениеСообщения();
			ЧтениеСообщение.ПространствоИмен = КОДСервер.ПространствоИменВерсииФормата(ПараметрыЗадания.ВерсияФормата);
	
			// Читаем серализованные методами КОД данные процесса
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ПараметрыЗадания.ОбъектJSON);
			ЧтениеJSON.Прочитать();
	
			ОбъектXDTO = Неопределено;
			Пока ЧтениеJSON.Прочитать() И ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
				И ЧтениеJSON.ТекущееЗначение = "object" Цикл
	
				ОбъектXDTO = ЧтениеСообщение.ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
				ЧтениеJSON.Прочитать();
				ЧтениеJSON.Прочитать();
	
			КонецЦикла;
	
			Если ОбъектXDTO = Неопределено Тогда
				РезультатВыполнения.ЗаданиеЗавершено = Истина;
				РезультатВыполнения.ЗаписьЛога = НСтр(
					"ru = 'Ошибка получения данных процесса из сообщения обмена'",
						ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			
			// Заполняем полученными даннными и записываем процесс
			КодПолучение.ЗаполнитьОдноименныеРеквизитыСвойствамиXDTO(ПредметЗадания, ОбъектXDTO,
				ПараметрыЗадания.ВерсияФормата, ЧтениеСообщение);
			Если ТипЗнч(ПредметЗадания.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				ПредметЗадания.Записать();
			ИначеЕсли ПредметЗадания.Стартован Тогда
				СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(
						ПредметЗадания.Ссылка);
				ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
				ПредметЗадания.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
				ПредметЗадания.Записать();
				ПараметрыЗаписи = Новый Структура;
				ПараметрыЗаписи.Вставить("АвторИзменения", ПараметрыЗадания.АвторИзменения);
				ПредметЗадания.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи);
				АвторИзмененияСотрудник = Сотрудники.ОсновнойСотрудникПользователя(ПараметрыЗадания.АвторИзменения);
				ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(ПредметЗадания.Ссылка, , , АвторИзмененияСотрудник);
				ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			Иначе
				ПредметЗадания.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
	
		ОтменитьТранзакцию();
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
		Если ПараметрыСеанса.ОтключитьОбновлениеЗадач Тогда
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		КонецЕсли;
		ВызватьИсключение;
	
	КонецПопытки;
	
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает актуальность задания ОбновитьПроцессБезДействия.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция ЗаданиеОбновитьПроцессБезДействияАктуально(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Возврат АктуальностьЗадания;
	
КонецФункции
	
#КонецОбласти

#Область ПрерватьПроцесс

// Добавить задание прервать процесс.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка - прерываемый процесс
//  ПараметрыЗадания - Структура - Структура параметров
//
Процедура ДобавитьЗаданиеПрерватьПроцесс(Процесс, ПараметрыЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Прервать процесс'", ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, Процесс);
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "УзелОбработки");
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ПрерватьПроцесс, НаименованиеЗадания, Процесс,
		УзелОбработки, , ПодготовитьПараметрыКХранению(ПараметрыЗадания));
		
КонецПроцедуры

// Возвращает актуальность задания ПрерватьПроцесс.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция ЗаданиеПрерватьПроцессАктуально(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		Процесс = Задание.ПредметЗадания;
	КонецЕсли;
	
	Если Не РаботаСБизнесПроцессами.ВыполнениеПроцессаАктуально(Процесс.ПолучитьОбъект()) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Прерывание процесса не актуально.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Обрабатывает задание очереди ПрерватьПроцесс
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеПрерватьПроцесс(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, ПараметрыВыполнения");
	
	ПараметрыЗадания = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	Если ТипЗнч(ПараметрыЗадания) <> Тип("Структура") Тогда
		РезультатВыполнения.ЗаданиеЗавершено = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru = 'Некорректный формат параметров выполнения задания.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Процесс = РеквизитыЗадания.ПредметЗадания;
	ДанныеПроцессаОбновлены = Истина;
	Если ПараметрыЗадания.ОбновитьДанныеПроцесса Тогда
		ДочерниеЗадания = Справочники.ОчередьЗаданийДокументооборота.ДочерниеЗадания(Задание);
		Если ДочерниеЗадания.Количество() Тогда
			Подзадание = ДочерниеЗадания[0];
			ДанныеПроцессаОбновлены = Подзадание.СтатусЗадания = Перечисления.СтатусыЗаданий.Завершено;
		Иначе
			ПараметрыПодзадания = Новый Структура;
			ПараметрыПодзадания.Вставить("ВерсияФормата", ПараметрыЗадания.ВерсияФормата);
			ПараметрыПодзадания.Вставить("ХэшСуммаОбъекта", ПараметрыЗадания.ХэшСуммаОбъекта);
			ПараметрыПодзадания.Вставить("ОбъектJson", ПараметрыЗадания.ОбъектJson);
			ПараметрыПодзадания.Вставить("АвторИзменения", ПараметрыЗадания.АвторИзменения);
			ДобавитьЗаданиеОбновленияДанныхПроцесса(Процесс, ПараметрыПодзадания, Задание);
			РезультатВыполнения.ЗаписьЛога = НСтр("ru='Добавлено задание обновления данных процесса.'");
			Возврат РезультатВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДанныеПроцессаОбновлены Тогда
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Ждем выполнения задания обновления данных процесса.'");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ОлицетворяемыйПользовательПрежний = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ПараметрыЗадания.АвторИзменения);
	
	Попытка
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьБизнесПроцесс(Процесс, ПараметрыЗадания.ПричинаПрерывания);
	Исключение
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось прервать процесс.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
		
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	
	Возврат РезультатВыполнения;	
	
КонецФункции

#КонецОбласти

#Область ОстановитьПроцесс

// Добавить задание остановить процесс.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка - останавливаемый процесс
//  ПараметрыЗадания - Структура - Структура параметров
//
Процедура ДобавитьЗаданиеОстановитьПроцесс(Процесс, ПараметрыЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Остановить процесс'", ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, Процесс);
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "УзелОбработки");
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОстановитьПроцесс, НаименованиеЗадания, Процесс,
		УзелОбработки, , ПодготовитьПараметрыКХранению(ПараметрыЗадания));
		
КонецПроцедуры

// Возвращает актуальность задания ОстановитьПроцесс.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция ЗаданиеОстановитьПроцессАктуально(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		Процесс = Задание.ПредметЗадания;
	КонецЕсли;
	
	ПроцессОстановлен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "Состояние")
		= Перечисления.СостоянияБизнесПроцессов.Остановлен;
		
	Если ПроцессОстановлен Или Не РаботаСБизнесПроцессами.ВыполнениеПроцессаАктуально(Процесс.ПолучитьОбъект()) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Остановка процесса не актуальна.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Обрабатывает задание очереди ОстановитьПроцесс
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеОстановитьПроцесс(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, ПараметрыВыполнения");
	
	ПараметрыЗадания = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	Если ТипЗнч(ПараметрыЗадания) <> Тип("Структура") Тогда
		РезультатВыполнения.ЗаданиеЗавершено = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru = 'Некорректный формат параметров выполнения задания.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Процесс = РеквизитыЗадания.ПредметЗадания;
	ДанныеПроцессаОбновлены = Истина;
	Если ПараметрыЗадания.ОбновитьДанныеПроцесса Тогда
		ДочерниеЗадания = Справочники.ОчередьЗаданийДокументооборота.ДочерниеЗадания(Задание);
		Если ДочерниеЗадания.Количество() Тогда
			Подзадание = ДочерниеЗадания[0];
			ДанныеПроцессаОбновлены = Подзадание.СтатусЗадания = Перечисления.СтатусыЗаданий.Завершено;
		Иначе
			ПараметрыПодзадания = Новый Структура;
			ПараметрыПодзадания.Вставить("ВерсияФормата", ПараметрыЗадания.ВерсияФормата);
			ПараметрыПодзадания.Вставить("ХэшСуммаОбъекта", ПараметрыЗадания.ХэшСуммаОбъекта);
			ПараметрыПодзадания.Вставить("ОбъектJson", ПараметрыЗадания.ОбъектJson);
			ПараметрыПодзадания.Вставить("АвторИзменения", ПараметрыЗадания.АвторИзменения);
			ДобавитьЗаданиеОбновленияДанныхПроцесса(Процесс, ПараметрыПодзадания, Задание);
			РезультатВыполнения.ЗаписьЛога = НСтр("ru='Добавлено задание обновления данных процесса.'");
			Возврат РезультатВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДанныеПроцессаОбновлены Тогда
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Ждем выполнения задания обновления данных процесса.'");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ОлицетворяемыйПользовательПрежний = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ПараметрыЗадания.АвторИзменения);
	
	Попытка
		БизнесПроцессыИЗадачиВызовСервера.ОстановитьБизнесПроцесс(Процесс);
	Исключение
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось остановить процесс.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	
	Возврат РезультатВыполнения;	
	
КонецФункции

#КонецОбласти

#Область ПродолжитьПроцесс

// Добавить задание продолжить процесс.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка - возобновляемый процесс
//  ПараметрыЗадания - Структура - Параметры задания
//
Процедура ДобавитьЗаданиеПродолжитьПроцесс(Процесс, ПараметрыЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Продолжить процесс'", ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, Процесс);
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "УзелОбработки");
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ПродолжитьПроцесс, НаименованиеЗадания, Процесс,
		УзелОбработки, , ПодготовитьПараметрыКХранению(ПараметрыЗадания));
		
КонецПроцедуры

// Возвращает актуальность задания ПродолжитьПроцесс.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция ЗаданиеПродолжитьПроцессАктуально(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		Процесс = Задание.ПредметЗадания;
	КонецЕсли;
	
	ПроцессАктуален = РаботаСБизнесПроцессами.ВыполнениеПроцессаАктуально(Процесс.ПолучитьОбъект());
	ПроцессОстановлен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "Состояние")
		= Перечисления.СостоянияБизнесПроцессов.Остановлен;
		
	Если Не ПроцессАктуален Или (Не ПроцессОстановлен И ПроцессАктуален) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Продолжение процесса не актуально.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Обрабатывает задание очереди ПродолжитьПроцесс
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота 
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеПродолжитьПроцесс(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, ПараметрыВыполнения");
	
	Процесс = РеквизитыЗадания.ПредметЗадания;
	ПараметрыЗадания = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	
	ОлицетворяемыйПользовательПрежний = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ПараметрыЗадания.АвторИзменения);
	
	Попытка
		БизнесПроцессыИЗадачиВызовСервера.СделатьАктивнымБизнесПроцесс(Процесс);
	Исключение
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
		РезультатВыполнения.ЗаписьЛога = СтрШаблон(НСтр("ru='Не удалось продолжить процесс. %1'",
			ОбщегоНазначения.КодОсновногоЯзыка()), ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат РезультатВыполнения;
	КонецПопытки;
		
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	
	Возврат РезультатВыполнения;	
	
КонецФункции


#КонецОбласти

#Область ЗаданияПоЗадачамПроцессовСИсполнителями

#Область ВыполнениеЗадачи

// Проверит - включена ли очередь заданий. Если да - запишет в очередь и вернет Истина. Иначе вернет Ложь. 
// 
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя
//           ЗадачаОбъект.ЗадачаИсполнителя - выполняемая задача.
// 	Параметры -Структура
// 	
// Возвращаемое значение:
// Булево
// 	
Функция ОбработатьВыполнениеЗадачи(Задача, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗадачаСсылка = Неопределено;
	Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = Задача;
	Иначе
		ЗадачаСсылка = Задача.Ссылка;
	КонецЕсли;		

	ДобавитьЗаданиеВыполнениеЗадачи(ЗадачаСсылка, Параметры);

	Возврат Истина;
		
КонецФункции

// Добавляет задание ВыполнениеЗадачи в очередь.
// 
// Параметры:
// 	Задача - ЗадачаСсылка.ЗадачаИсполнителя
// 	Параметры -Структура
// 
Процедура ДобавитьЗаданиеВыполнениеЗадачи(Задача, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Выполнить задачу'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2",
		ПредставлениеЗадания,
		Строка(Задача));
		
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Задача, "БизнесПроцесс.УзелОбработки");
	
	Параметры.Вставить(
		"ОлицетворяемыйПользователь",
		ПользователиДокументооборот.ОлицетворяемыйПользователь());
	
	ПодготовитьДанныеПроцессаЗадачиОбрабатывающегоРезультатДляОтправки(Задача, Параметры);
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ВыполнениеЗадачи,
		НаименованиеЗадания,
		Задача,
		УзелОбработки,,
		ПодготовитьПараметрыКХранению(Параметры));
		
КонецПроцедуры

// Обрабатывает задание очереди ВыполнениеЗадачи
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота 
//  БылиБлокировки - Булево
//  ЕстьНевыполненныеЗадания - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеВыполнениеЗадачи(Задание, БылиБлокировки, ЕстьНевыполненныеЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнятьЗамерыПроизводительности = 
		ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности();
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, ПараметрыВыполнения");
	
	Задача = РеквизитыЗадания.ПредметЗадания;
	
	Если ЕстьНевыполненныеЗаданияПоЗадачамПроцессовДоТекущего(
		Задание, Задача, РеквизитыЗадания.ДатаСоздания) Тогда
		
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='По задаче есть другие невыполненные задания, созданные ранее.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЕстьНевыполненныеЗадания = Истина;		
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Параметры = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задача, "БизнесПроцесс, Выполнена");
	Выполнена = РеквизитыЗадачи.Выполнена;
	Процесс = РеквизитыЗадачи.БизнесПроцесс;
	
	ДействиеПроцесса = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс);
	Если ЗначениеЗаполнено(ДействиеПроцесса) И ОбъектЕстьВОчереди(ДействиеПроцесса, Ложь,
		Перечисления.ТипыЗаданий.ОбновитьДействиеОбработки) Тогда
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Необходимо дождаться выполнения задания обновления данных действия
			|обработки, по которой создана задача'", ОбщегоНазначения.КодОсновногоЯзыка());
		Возврат РезультатВыполнения;
	КонецЕсли;
		
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Задача);
	Исключение                                  
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать задачу.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	Если Не Параметры.Свойство("ИдентификаторБлокировкиПроцесса") Тогда
		Параметры.Вставить("ИдентификаторБлокировкиПроцесса", Новый УникальныйИдентификатор());
	КонецЕсли;
	
	ОлицетворяемыйПользовательПрежний = 
		ПользователиДокументооборот.ОлицетворяемыйПользователь();
	
	Если Параметры.Свойство("ОлицетворяемыйПользователь") Тогда
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			Параметры.ОлицетворяемыйПользователь);
	КонецЕсли;
	
	Попытка
		Если Не Выполнена Тогда
			Если ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.Рассмотрение") И Параметры.Свойство(
			"ОбрабатывающийРезолюцию") Тогда
				РаботаСПроцессамиПоДействиямСобытия.ОбработатьДобавлениеОбрабатывающегоРезолюциюВПараметрыВыполнения(
				Задача, Параметры.ОбрабатывающийРезолюцию);
			КонецЕсли;
		КонецЕсли;		
		ЗаблокироватьДанныеДляРедактирования(Процесс,,Параметры.ИдентификаторБлокировкиПроцесса);
	Исключение                                  
		БылиБлокировки = Истина;
		РазблокироватьДанныеДляРедактирования(Задача);
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ОлицетворяемыйПользовательПрежний);
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать процесс задачи.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ОлицетворяемыйПользовательПрежний);
			
	Если ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.Подписание")
		Или ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		Действие = РаботаСПроцессамиПоДействиям.ДействиеЗадачиПроцесса(Задача);
		Если ЗначениеЗаполнено(Действие) Тогда      
			
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Действие, "Предмет");

			Попытка
				ЗаблокироватьДанныеДляРедактирования(Предмет);
				
				РазблокироватьДанныеДляРедактирования(Предмет); // сразу снимем блокировку
				
			Исключение                          
				БылиБлокировки = Истина;
				РазблокироватьДанныеДляРедактирования(Задача);
				РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать предмет действия.'",
					ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Возврат РезультатВыполнения;
			КонецПопытки; 
				
		КонецЕсли;	
		
	КонецЕсли;	
	
	ОлицетворяемыйПользовательПрежний = 
		ПользователиДокументооборот.ОлицетворяемыйПользователь();
	
	Если Параметры.Свойство("ОлицетворяемыйПользователь") Тогда
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			Параметры.ОлицетворяемыйПользователь);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Если Не Выполнена Тогда
			
			РаботаСПроцессамиПоДействиямСобытия.ПриВыполненииЗадачиСПараметрами(Задача, Параметры);
				
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			
			Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
				Параметры = Новый Структура;
			КонецЕсли;
			
			КлючеваяОперация = ВыполнениеЗадачСервер.ИмяКлючевойОперацииДляЗадачи(ЗадачаОбъект, Параметры);
			Если ВыполнятьЗамерыПроизводительности И ЗначениеЗаполнено(КлючеваяОперация) Тогда
				ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
			КонецЕсли;
			
			ОбработатьПолученныеДанныеПроцессаЗадачиОбрабатывающегоРезультат(ЗадачаОбъект, Параметры);
			ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрамиНемедленно(ЗадачаОбъект, Параметры);
			
			// Проверяем права участников на предметы процесса, чтобы
			// уведомить автора, о том, что в процессе есть недоступные предметы участникам
			// и они не смогут выполнить свои задачи.
			ПроцессОъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
			АвторПроцесса = РаботаСБизнесПроцессами.АвторПроцессаЗадачи(ПроцессОъект);
			МультипредметностьКОРП.ПроверитьПраваУчастниковПроцессаИОтправитьУведомления(ПроцессОъект, АвторПроцесса);
			
			Если ВыполнятьЗамерыПроизводительности И ЗначениеЗаполнено(КлючеваяОперация) Тогда
				ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ОлицетворяемыйПользовательПрежний);
		
		ВызватьИсключение; 

	КонецПопытки;
	
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ОлицетворяемыйПользовательПрежний);
	
	РазблокироватьДанныеДляРедактирования(Задача);
	РазблокироватьДанныеДляРедактирования(Процесс,Параметры.ИдентификаторБлокировкиПроцесса);
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;	
	
КонецФункции

// Возвращает актуальность задания ВыполнениеЗадачи.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияВыполнениеЗадачи(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		ЗадачаПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		ЗадачаПроцесса = Задание.ПредметЗадания;
	КонецЕсли;
	
	Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "БизнесПроцесс");
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	ЭтоАктивнаяЗадачаОзнакомленияСРезультатом =
		БизнесПроцессыИЗадачиСервер.ЭтоЗадачаОзнакомленияСРезультатом(ЗадачаПроцесса)
		И ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	
	Если Не РаботаСБизнесПроцессами.ВыполнениеПроцессаАктуально(ПроцессОбъект)
		И Не ЭтоАктивнаяЗадачаОзнакомленияСРезультатом Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Выполнение процесса не актуально.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Возвращает инфу о задаче в очереди для выполнения
// 
// Параметры:
// 	Задача - ЗадачаСсылка.ЗадачаИсполнителя
// 	
// Возвращаемое значение:
// 	Неопределено, Структура - Описание:
// * ПричинаОтменыСтарта - Строка -
// * Состояние - ПеречислениеСсылка.СостоянияПроцессовДляЗапуска -
// * ДатаОтложенногоСтарта - Дата -
Функция СостояниеВыполненияЗадачи(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("СостояниеВыполнения", Неопределено);
	Результат.Вставить("ПричинаОтменыВыполнения", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьМаршрутизации.Ссылка КАК Задание
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьМаршрутизации
		|ГДЕ
		|	ОчередьМаршрутизации.ПредметЗадания = &ПредметЗадания
		|	И ОчередьМаршрутизации.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)
		|	И ОчередьМаршрутизации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ВыполнениеЗадачи)";
		
	Запрос.УстановитьПараметр("ПредметЗадания", Задача);

	// есть задание 		
	Если Не Запрос.Выполнить().Пустой() Тогда
		
		Результат.СостояниеВыполнения = Перечисления.СостоянияЗадачДляВыполнения.ГотоваКВыполнению;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

#КонецОбласти

#Область СохранитьРезультатВыполненияВЗадачуПроцесса

// Обрабатывает сохранение результата выполнения в задачу процесса,
// при необходимости инициирует выполнение операции через очередь заданий.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  РезультатВыполнения - Строка
//  Немедленно - Булево
//  
// Возвращаемое значение:
//  Булево - Истина, если операция обработана в текущем методе, иначе Ложь.
//
Функция ОбработатьСохранениеРезультатаВыполненияВЗадачуПроцесса(
	ЗадачаПроцесса, РезультатВыполнения, Немедленно) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Немедленно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДобавитьЗаданиеСохранитьРезультатВыполненияВЗадачуПроцесса(ЗадачаПроцесса, РезультатВыполнения);
	
	Возврат Истина;
	
КонецФункции

// Добавляет задание СохранитьРезультатВыполненияВЗадачуПроцесса в очередь.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  РезультатВыполнения - Строка
// 
Процедура ДобавитьЗаданиеСохранитьРезультатВыполненияВЗадачуПроцесса(
	ЗадачаПроцесса, РезультатВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Сохранить результат выполнения в задачу процесса'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, Строка(ЗадачаПроцесса));
	
	Параметры = Новый Структура;
	Параметры.Вставить("РезультатВыполнения", РезультатВыполнения);
	
	Параметры.Вставить(
		"ОлицетворяемыйПользователь", ПользователиДокументооборот.ОлицетворяемыйПользователь());
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЗадачаПроцесса, "БизнесПроцесс.УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.СохранитьРезультатВыполненияВЗадачуПроцесса,
		НаименованиеЗадания,
		ЗадачаПроцесса,
		УзелОбработки,,
		ПодготовитьПараметрыКХранению(Параметры));
	
КонецПроцедуры

// Обрабатывает задание очереди СохранитьРезультатВыполненияВЗадачуПроцесса
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
//  ЕстьНевыполненныеЗадания - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеСохранитьРезультатВыполненияВЗадачуПроцесса(Задание, БылиБлокировки, ЕстьНевыполненныеЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, ПараметрыВыполнения");
	
	ЗадачаПроцесса = РеквизитыЗадания.ПредметЗадания;
	
	Если ЕстьНевыполненныеЗаданияПоЗадачамПроцессовДоТекущего(
		Задание, ЗадачаПроцесса, РеквизитыЗадания.ДатаСоздания) Тогда
		
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='По задаче есть другие невыполненные задания, созданные ранее.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЕстьНевыполненныеЗадания = Истина;	
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Параметры = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	РезультатВыполненияЗадачиПроцесса = Параметры.РезультатВыполнения;
	
	ОлицетворяемыйПользовательПрежний = 
		ПользователиДокументооборот.ОлицетворяемыйПользователь();
	
	Если Параметры.Свойство("ОлицетворяемыйПользователь") Тогда
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			Параметры.ОлицетворяемыйПользователь);
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ЗадачаПроцесса);
	Исключение                                  
		
		БылиБлокировки = Истина;
		
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ОлицетворяемыйПользовательПрежний);
		
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать задачу.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	ИнтеграцияЗадач.СохранитьРезультатВыполненияВЗадачуПроцесса(
		ЗадачаПроцесса, РезультатВыполненияЗадачиПроцесса, Истина);
	
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
		ОлицетворяемыйПользовательПрежний);
	
	РазблокироватьДанныеДляРедактирования(ЗадачаПроцесса);
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;	
	
КонецФункции

#КонецОбласти

#Область ПринятьКИсполнениюЗадачуПроцесса

// Обрабатывает принятие к исполнению задачи процесса,
// при необходимости инициирует выполнение операции через очередь заданий.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  ПараметрыПринятия - Структура
//    * ДатаПринятияКИсполнению - Дата.
//    * Исполнитель - СправочникСсылка.Сотрудники.
//    * ОтключитьОбновлениеЗадач - Булево.
//  Немедленно - Булево
//  
// Возвращаемое значение:
//  Булево - Истина, если операция обработана в текущем методе, иначе Ложь.
//
Функция ОбработатьПринятиеКИсполнениюЗадачиПроцесса(ЗадачаПроцесса, Знач ПараметрыПринятия, Немедленно) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Немедленно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДобавитьЗаданиеПринятьКИсполнениюЗадачуПроцесса(ЗадачаПроцесса, ПараметрыПринятия);
	
	Возврат Истина;
	
КонецФункции

// Добавляет задание ПринятьКИсполнениюЗадачуПроцесса в очередь.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  ПараметрыПринятия - Структура
//    * ДатаПринятияКИсполнению - Дата
//    * Исполнитель - СправочникСсылка.Сотрудники
//    * ОтключитьОбновлениеЗадач - Булево
// 
Процедура ДобавитьЗаданиеПринятьКИсполнениюЗадачуПроцесса(ЗадачаПроцесса, ПараметрыПринятия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Принять к исполнению задачу процесса'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, Строка(ЗадачаПроцесса));
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЗадачаПроцесса, "БизнесПроцесс.УзелОбработки");
	
	ПараметрыПринятия.Вставить(
		"ОлицетворяемыйПользователь", ПользователиДокументооборот.ОлицетворяемыйПользователь());
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ПринятьКИсполнениюЗадачуПроцесса,
		НаименованиеЗадания,
		ЗадачаПроцесса,
		УзелОбработки,,
		ПодготовитьПараметрыКХранению(ПараметрыПринятия));
	
КонецПроцедуры

// Обрабатывает задание очереди ПринятьКИсполнениюЗадачуПроцесса
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
//  ЕстьНевыполненныеЗадания - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеПринятьКИсполнениюЗадачуПроцесса(Задание, БылиБлокировки, ЕстьНевыполненныеЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, ПараметрыВыполнения");
	
	ЗадачаПроцесса = РеквизитыЗадания.ПредметЗадания;
	
	Если ЕстьНевыполненныеЗаданияПоЗадачамПроцессовДоТекущего(
		Задание, ЗадачаПроцесса, РеквизитыЗадания.ДатаСоздания) Тогда
		
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='По задаче есть другие невыполненные задания, созданные ранее.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЕстьНевыполненныеЗадания = Истина;		
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ПараметрыПринятия = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	
	ОлицетворяемыйПользовательПрежний = 
		ПользователиДокументооборот.ОлицетворяемыйПользователь();
	
	Если ПараметрыПринятия.Свойство("ОлицетворяемыйПользователь") Тогда
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ПараметрыПринятия.ОлицетворяемыйПользователь);
		ПараметрыПринятия.Удалить("ОлицетворяемыйПользователь");
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ЗадачаПроцесса);
	Исключение                                  
		
		БылиБлокировки = Истина;
		
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ОлицетворяемыйПользовательПрежний);
		
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать задачу.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	НачатьТранзакцию();
	Попытка
		БизнесПроцессыИЗадачиСервер.ПринятьКИсполнениюЗадачуПроцессаБезусловно(ЗадачаПроцесса, ПараметрыПринятия, Истина);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
		РазблокироватьДанныеДляРедактирования(ЗадачаПроцесса);
		ВызватьИсключение;
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(ЗадачаПроцесса);
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
		ОлицетворяемыйПользовательПрежний);
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;	
	
КонецФункции

#КонецОбласти

#Область ОтменитьПринятиеКИсполнениюЗадачуПроцесса

// Обрабатывает отмену принятия к исполнению задачи процесса,
// при необходимости инициирует выполнение операции через очередь заданий.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  ПараметрыПринятия - Структура
//    * ДатаПринятияКИсполнению - Дата.
//    * Исполнитель - СправочникСсылка.Сотрудники.
//    * ОтключитьОбновлениеЗадач - Булево.
//  Немедленно - Булево
//  
// Возвращаемое значение:
//  Булево - Истина, если операция обработана в текущем методе, иначе Ложь.
//
Функция ОбработатьОтменуПринятияКИсполнениюЗадачиПроцесса(ЗадачаПроцесса, ОтключитьОбновлениеЗадач, Немедленно) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Немедленно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДобавитьЗаданиеОтменитьПринятиеКИсполнениюЗадачуПроцесса(ЗадачаПроцесса, ОтключитьОбновлениеЗадач);
	
	Возврат Истина;
	
КонецФункции

// Добавляет задание ОтменитьПринятиеКИсполнениюЗадачуПроцесса в очередь.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  ОтключитьОбновлениеЗадач - Булево
// 
Процедура ДобавитьЗаданиеОтменитьПринятиеКИсполнениюЗадачуПроцесса(
	ЗадачаПроцесса, ОтключитьОбновлениеЗадач) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Отменить принятие к исполнению задачи процесса'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, Строка(ЗадачаПроцесса));
	
	ПараметрыОтменыПринятияКИсполнению = Новый Структура;
	ПараметрыОтменыПринятияКИсполнению.Вставить(
		"ОтключитьОбновлениеЗадач", ОтключитьОбновлениеЗадач);
	
	ПараметрыОтменыПринятияКИсполнению.Вставить(
		"ОлицетворяемыйПользователь", ПользователиДокументооборот.ОлицетворяемыйПользователь());
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЗадачаПроцесса, "БизнесПроцесс.УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОтменитьПринятиеКИсполнениюЗадачуПроцесса,
		НаименованиеЗадания,
		ЗадачаПроцесса,
		УзелОбработки,,
		ПодготовитьПараметрыКХранению(ПараметрыОтменыПринятияКИсполнению));
	
КонецПроцедуры

// Обрабатывает задание очереди ОтменитьПринятиеКИсполнениюЗадачуПроцесса
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево    
//  ЕстьНевыполненныеЗадания - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеОтменитьПринятиеКИсполнениюЗадачуПроцесса(Задание, БылиБлокировки, ЕстьНевыполненныеЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, ПараметрыВыполнения");
	
	ЗадачаПроцесса = РеквизитыЗадания.ПредметЗадания;
	
	Если ЕстьНевыполненныеЗаданияПоЗадачамПроцессовДоТекущего(
		Задание, ЗадачаПроцесса, РеквизитыЗадания.ДатаСоздания) Тогда
		
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='По задаче есть другие невыполненные задания, созданные ранее.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЕстьНевыполненныеЗадания = Истина;		
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ПараметрыОтменыПринятияКИсполнению = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	
	ОлицетворяемыйПользовательПрежний = 
		ПользователиДокументооборот.ОлицетворяемыйПользователь();
	
	Если ПараметрыОтменыПринятияКИсполнению.Свойство("ОлицетворяемыйПользователь") Тогда
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ПараметрыОтменыПринятияКИсполнению.ОлицетворяемыйПользователь);
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ЗадачаПроцесса);
	Исключение                                  
		
		БылиБлокировки = Истина;
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ОлицетворяемыйПользовательПрежний);
		
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать задачу.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	НачатьТранзакцию();
	Попытка
		БизнесПроцессыИЗадачиСервер.ОтменитьПринятиеЗадачиПроцессаКИсполнениюБезусловно(
			ЗадачаПроцесса, ПараметрыОтменыПринятияКИсполнению.ОтключитьОбновлениеЗадач, Истина);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
		РазблокироватьДанныеДляРедактирования(ЗадачаПроцесса);
		ВызватьИсключение;
	КонецПопытки;
	
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
		ОлицетворяемыйПользовательПрежний);
	
	РазблокироватьДанныеДляРедактирования(ЗадачаПроцесса);
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;	
	
КонецФункции

#КонецОбласти

#Область ОтменаВыполненияЗадачи

// Добавляет задание отмены выполнения задачи процесса в очередь.
//
// Параметры:
//	ЗадачаИсполнителя - ЗадачаСсылка - задача, в которой заполняется предмет.
//	ПараметрыВыполнения - Структура - Параметры выполнения задания
//
Процедура ДобавитьЗаданиеОтменитьВыполнениеЗадачи(ЗадачаИсполнителя) Экспорт
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаИсполнителя, "БизнесПроцесс.УзелОбработки");
	ПредставлениеЗадания = НСтр("ru = 'Отменить выполнение задачи'", ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, ЗадачаИсполнителя);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("АвторИзменения", ПользователиДокументооборот.ОлицетворяемыйПользователь());

	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(Перечисления.ТипыЗаданий.ОтменитьВыполнениеЗадачи,
		НаименованиеЗадания, ЗадачаИсполнителя, УзелОбработки, , ПодготовитьПараметрыКХранению(ПараметрыВыполнения));
	
КонецПроцедуры

// Обрабатывает задание очереди ОтменитьВыполнениеЗадачи
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеОтменитьВыполнениеЗадачи(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, "ПредметЗадания, ПараметрыВыполнения");
	ЗадачаПроцесса = РеквизитыЗадания.ПредметЗадания;
	ПараметрыЗадания = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	ОлицетворяемыйПользовательПрежний = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ПараметрыЗадания.АвторИзменения);

	НачатьТранзакцию();
	Попытка

		ОтключитьОбновлениеЗадач = Истина;
		РезультатОтменыВыполнения = БизнесПроцессыИЗадачиВызовСервера.ОтменитьВыполнениеЗадачи(ЗадачаПроцесса,
			ОтключитьОбновлениеЗадач);

		Если РезультатОтменыВыполнения.Отказ Тогда
			ВызватьИсключение РезультатОтменыВыполнения.ПричинаОтказа;
		КонецЕсли;

		ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоЗадачеПроцесса(ЗадачаПроцесса);

		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
		ОлицетворяемыйПользовательПрежний);

	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ПеренаправлениеЗадачи

// Обрабатывает перенаправление задачи процесса,
// при необходимости инициирует выполнение операции через очередь заданий.
//
// Параметры:
//	ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя- Перенаправляемая задача.
//	ПараметрыПеренаправления - Структура:
//		* ИнфоОПеренаправлении  - Структура - Информация о новом исполнителе задачи.
//		* ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы, из которой было вызвано перенаправление.
//		* ОтключитьОбновлениеЗадач - Булево - Признак отключения обновления задач.
//  Немедленно - Булево - признак немедленного перенаправления задачи процесса.
//  
// Возвращаемое значение:
//  Булево - Истина, если операция обработана в текущем методе, иначе Ложь.
//
Функция ОбработатьПеренаправлениеЗадачиПроцесса(
	ЗадачаПроцесса, Знач ПараметрыПеренаправления, Немедленно) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Немедленно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДобавитьЗаданиеПеренаправлениеЗадачи(ЗадачаПроцесса, ПараметрыПеренаправления);
	
	Возврат Истина;
	
КонецФункции

// Добавляет задание ПеренаправлениеЗадачи в очередь.
//
// Параметры:
//	Задача - ЗадачаСсылка.ЗадачаИсполнителя
//	ПараметрыПеренаправления - Структура:
//	 * ИнфоОПеренаправлении  - Структура - Информация о новом исполнителе задачи.
//	 * ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы, из которой было вызвано перенаправление.
//	 * ОтключитьОбновлениеЗадач - Булево - Признак отключения обновления задач.
//
// Возвращаемое значение:
//	Булево
//
Функция ДобавитьЗаданиеПеренаправлениеЗадачи(Задача, ПараметрыПеренаправления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Перенаправить задачу'", ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, Строка(Задача));
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Задача, "БизнесПроцесс.УзелОбработки");
	
	ПараметрыПеренаправления.Вставить(
		"ОлицетворяемыйПользователь", ПользователиДокументооборот.ОлицетворяемыйПользователь());
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ПеренаправлениеЗадачи,
		НаименованиеЗадания,
		Задача,
		УзелОбработки,,
		ПодготовитьПараметрыКХранению(ПараметрыПеренаправления));
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает задание очереди ПеренаправлениеЗадачи
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево 
//  ЕстьНевыполненныеЗадания - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеПеренаправлениеЗадачи(Задание, БылиБлокировки, ЕстьНевыполненныеЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, ПараметрыВыполнения");
	
	Задача = РеквизитыЗадания.ПредметЗадания;
	
	Если ЕстьНевыполненныеЗаданияПоЗадачамПроцессовДоТекущего(
		Задание, Задача, РеквизитыЗадания.ДатаСоздания) Тогда
		
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='По задаче есть другие невыполненные задания, созданные ранее.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЕстьНевыполненныеЗадания = Истина;		
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ПараметрыПеренаправления = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	
	ОлицетворяемыйПользовательПрежний = 
		ПользователиДокументооборот.ОлицетворяемыйПользователь();
	
	Если ПараметрыПеренаправления.Свойство("ОлицетворяемыйПользователь") Тогда
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ПараметрыПеренаправления.ОлицетворяемыйПользователь);
		ПараметрыПеренаправления.Удалить("ОлицетворяемыйПользователь");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачуПроцессаБезусловно(
			Задача, ПараметрыПеренаправления, Истина);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ОлицетворяемыйПользовательПрежний);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
		ОлицетворяемыйПользовательПрежний);
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

// Возвращает актуальность задания СохранитьРезультатВыполненияВЗадачуПроцесса.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияПоЗадачеПроцессаСИсполнителем(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, "ПредметЗадания");
		ЗадачаПроцесса = РеквизитыЗадания.ПредметЗадания;
	Иначе
		ЗадачаПроцесса = Задание.ПредметЗадания;
	КонецЕсли;
	
	Если Не РаботаСБизнесПроцессами.ЗадачаПроцессаАктуальна(ЗадачаПроцесса) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Задача не актуальна.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Обрабатывает получение результатов выполнения задач процессов при использовании очереди заданий.
//
// Параметры:
//  ЗадачиПроцессов - Массив из ЗадачаСсылка.ЗадачаИсполнителя
//  РезультатыВыполнения - Соответствие - неявно возвращаемый параметр с результатами выполнения задач.
//    * Ключ - ЗадачаСсылка.ЗадачаИсполнителя
//    * Значение - Строка
//
// Возвращаемое значение:
//  Булево - Принимает значение Истина, если получение результатов переопределено в текущем методе
//           и результат помещен в параметр РезультатыВыполнения. Иначе возвращает Ложь.
//
Функция ОбработатьПолучениеРезультатовВыполненияЗадачПроцессов(
	ЗадачиПроцессов, РезультатыВыполнения) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаПроцесса,
		|	ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
		|	ЕСТЬNULL(ОчередьЗаданийДокументооборота.ПараметрыВыполнения, НЕОПРЕДЕЛЕНО) КАК ПараметрыВыполнения,
		|	ЕСТЬNULL(ОчередьЗаданийДокументооборота.ДатаСоздания, ЗадачаИсполнителя.Дата) КАК Дата
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|		ПО ЗадачаИсполнителя.Ссылка = ОчередьЗаданийДокументооборота.ПредметЗадания
		|			И ОчередьЗаданийДокументооборота.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.СохранитьРезультатВыполненияВЗадачуПроцесса)
		|			И ОчередьЗаданийДокументооборота.СтатусЗадания В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения))
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка В(&ЗадачиПроцессов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ЗадачиПроцессов", ЗадачиПроцессов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если РезультатыВыполнения[Выборка.ЗадачаПроцесса] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ПараметрыВыполнения <> Неопределено Тогда
			ПараметрыВыполнения = ПолучитьПараметры(Выборка.ПараметрыВыполнения);
			РезультатыВыполнения[Выборка.ЗадачаПроцесса] = ПараметрыВыполнения.РезультатВыполнения;
		Иначе
			РезультатыВыполнения[Выборка.ЗадачаПроцесса] = Выборка.РезультатВыполнения;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает получение данных принятия к исполнению для задач процессов при использовании очереди заданий.
//
// Параметры:
//  ЗадачиПроцессов - Массив из ЗадачаСсылка.ЗадачаИсполнителя
//  ДанныеПринятияКИсполнению - Соответствие - неявно возвращаемый параметр с данными задач.
//    * Ключ - ЗадачаСсылка.ЗадачаИсполнителя.
//    * Значение - Структура
//      ** ПринятаКИсполнению - Булеов.
//      ** ДатаПринятияКИсполнению - Дата. 
//
// Возвращаемое значение:
//  Булево - Принимает значение Истина, если переопределено получение данных приятия к исполнению в 
//           текущем методе и результат помещен в параметр ДатаПринятияКИсполнению. Иначе возвращает Ложь.
//
Функция ОбработатьПолучениеДанныеПринятияКИсполнениюЗадачПроцессов(
	ЗадачиПроцессов, ДанныеПринятияКИсполнению) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаПроцесса,
		|	ЗадачаИсполнителя.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ЗадачаИсполнителя.ДатаПринятияКИсполнению КАК ДатаПринятияКИсполнению,
		|	ЕСТЬNULL(ОчередьЗаданийДокументооборота.ПараметрыВыполнения, НЕОПРЕДЕЛЕНО) КАК ПараметрыВыполнения,
		|	ЕСТЬNULL(ОчередьЗаданийДокументооборота.ДатаСоздания, ЗадачаИсполнителя.Дата) КАК Дата,
		|	ЕСТЬNULL(ОчередьЗаданийДокументооборота.Тип, НЕОПРЕДЕЛЕНО) КАК ТипЗадания
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|		ПО ЗадачаИсполнителя.Ссылка = ОчередьЗаданийДокументооборота.ПредметЗадания
		|		И ОчередьЗаданийДокументооборота.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ПринятьКИсполнениюЗадачуПроцесса),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ОтменитьПринятиеКИсполнениюЗадачуПроцесса))
		|		И ОчередьЗаданийДокументооборота.СтатусЗадания В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения))
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка В (&ЗадачиПроцессов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ЗадачиПроцессов", ЗадачиПроцессов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ДанныеПринятияКИсполнению[Выборка.ЗадачаПроцесса] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоЗадачеПроцесса = Новый Структура(
			"ПринятаКИсполнению, ДатаПринятияКИсполнению");
		
		Если Выборка.ТипЗадания = Перечисления.ТипыЗаданий.ПринятьКИсполнениюЗадачуПроцесса Тогда
			ПараметрыВыполнения = ПолучитьПараметры(Выборка.ПараметрыВыполнения);
			ДанныеПоЗадачеПроцесса.ПринятаКИсполнению = Истина;
			ДанныеПоЗадачеПроцесса.ДатаПринятияКИсполнению = ПараметрыВыполнения.ДатаПринятияКИсполнению;
		ИначеЕсли Выборка.ТипЗадания = Перечисления.ТипыЗаданий.ОтменитьПринятиеКИсполнениюЗадачуПроцесса Тогда
			ДанныеПоЗадачеПроцесса.ПринятаКИсполнению = Ложь;
			ДанныеПоЗадачеПроцесса.ДатаПринятияКИсполнению = Дата(1,1,1);
		Иначе
			ДанныеПоЗадачеПроцесса.ПринятаКИсполнению = Выборка.ПринятаКИсполнению;
			ДанныеПоЗадачеПроцесса.ДатаПринятияКИсполнению = Выборка.ДатаПринятияКИсполнению;
		КонецЕсли;
		
		ДанныеПринятияКИсполнению[Выборка.ЗадачаПроцесса] = ДанныеПоЗадачеПроцесса;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает получения сведений об исполнителях задач процессов при использовании очереди заданий.
//
// Параметры:
//  ЗадачиПроцессов - Массив из ЗадачаСсылка.ЗадачаИсполнителя
//  СведенийОбИсполнителях - Соответствие - неявно возвращаемый параметр с данными задач.
//   * Исполнитель - СправочникСсылка.Сотрудники.
//   * РольИсполнителя - СправочникСсылка.РолиИсполнителей.
//
Функция ОбработатьПолучениеСведенийОбИсполнителяхЗадачПроцессов(
	ЗадачиПроцессов, СведенийОбИсполнителях) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаПроцесса,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	ЕСТЬNULL(ОчередьЗаданийДокументооборота.ПараметрыВыполнения, НЕОПРЕДЕЛЕНО) КАК ПараметрыВыполнения,
		|	ЕСТЬNULL(ОчередьЗаданийДокументооборота.ДатаСоздания, ЗадачаИсполнителя.Дата) КАК Дата,
		|	ЕСТЬNULL(ОчередьЗаданийДокументооборота.Тип, НЕОПРЕДЕЛЕНО) КАК ТипЗадания
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|		ПО ЗадачаИсполнителя.Ссылка = ОчередьЗаданийДокументооборота.ПредметЗадания
		|		И ОчередьЗаданийДокументооборота.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ПринятьКИсполнениюЗадачуПроцесса),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ОтменитьПринятиеКИсполнениюЗадачуПроцесса),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ПеренаправлениеЗадачи))
		|		И ОчередьЗаданийДокументооборота.СтатусЗадания В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения))
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка В (&ЗадачиПроцессов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата ВОЗР";
	
	Запрос.УстановитьПараметр("ЗадачиПроцессов", ЗадачиПроцессов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеПоЗадачеПроцесса = СведенийОбИсполнителях[Выборка.ЗадачаПроцесса];
		Если ДанныеПоЗадачеПроцесса = Неопределено Тогда
			ДанныеПоЗадачеПроцесса = Новый Структура("Исполнитель, РольИсполнителя");
			ДанныеПоЗадачеПроцесса.Исполнитель = Выборка.Исполнитель;
			ДанныеПоЗадачеПроцесса.РольИсполнителя = Выборка.РольИсполнителя;
		КонецЕсли;
		
		Если Выборка.ТипЗадания = Перечисления.ТипыЗаданий.ПеренаправлениеЗадачи Тогда
			ПараметрыВыполнения = ПолучитьПараметры(Выборка.ПараметрыВыполнения);
			ДанныеПоЗадачеПроцесса.Исполнитель = ПараметрыВыполнения.ИнфоОПеренаправлении.Исполнитель;
			ДанныеПоЗадачеПроцесса.РольИсполнителя = ПараметрыВыполнения.ИнфоОПеренаправлении.РольИсполнителя;
		ИначеЕсли Выборка.ТипЗадания = Перечисления.ТипыЗаданий.ПринятьКИсполнениюЗадачуПроцесса Тогда
			ПараметрыВыполнения = ПолучитьПараметры(Выборка.ПараметрыВыполнения);
			ДанныеПоЗадачеПроцесса.Исполнитель = ПараметрыВыполнения.Исполнитель;
		ИначеЕсли Выборка.ТипЗадания = Перечисления.ТипыЗаданий.ОтменитьПринятиеКИсполнениюЗадачуПроцесса Тогда
			Если ЗначениеЗаполнено(ДанныеПоЗадачеПроцесса.РольИсполнителя) Тогда
				ДанныеПоЗадачеПроцесса.Исполнитель = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		СведенийОбИсполнителях[Выборка.ЗадачаПроцесса] = ДанныеПоЗадачеПроцесса;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает актуальность задания ОтменитьВыполнениеЗадачи.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция ЗаданиеОтменитьВыполнениеЗадачиАктуально(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, "ПредметЗадания");
		ЗадачаПроцесса = РеквизитыЗадания.ПредметЗадания;
	Иначе
		ЗадачаПроцесса = Задание.ПредметЗадания;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаПроцесса, "Выполнена, ПометкаУдаления,
		|СостояниеБизнесПроцесса, БизнесПроцесс.Завершен");
	Если РеквизитыЗадачи.ПометкаУдаления = Истина Или РеквизитыЗадачи.БизнесПроцессЗавершен = Истина
		Или РеквизитыЗадачи.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Задача не актуальна.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли РеквизитыЗадачи.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Процесс задачи остановлен.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли РеквизитыЗадачи.Выполнена = Ложь Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Задача не выполнена.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область МаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного

// Обрабатывает маршрутизацию комплексного процесса после выполнения вложенного.
//
// Параметры:
//   ВложенныйПроцесс - БизнесПроцессСсылка.<тип процесса> - завершившееся действие,
//                      после которого следует запустить следующие действия комплексного процесса. 
//   ВедущаяЗадача - ЗадачаОбъект.ЗадачаИсполнителя - ведущая задача подчиненного действия 
//
// Возвращаемое значение:
// 	Булево - Истина, если выполнение вложенного процесса обрабатывается через очередь,
// 	         иначе Ложь (прикладной код должен выполнить обычную обработку).
//
Функция ОбработатьМаршрутизациюКомплексногоПроцессаПослеВыполненияВложенного(
	ВложенныйПроцесс, ВедущаяЗадача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если задание уже есть в очереди, то только отменяем стандартную обработку.
	// Данная ситуация допустима при выполнении ведущий задачи при обработке задания
	// по вложенному процессу. 
	Если Справочники.ОчередьЗаданийДокументооборота.ЕстьНеВыполненноеЗаданиеПоПредмету(
		Перечисления.ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного,
		ВложенныйПроцесс) Тогда

		Возврат Истина;			
	КонецЕсли;
	
	// Отменяем выполнение ведущей задачи вложенного процесса, чтобы комплексный процесс
	// остался в точке маршрута ВложенныйПроцесс.
	ВедущаяЗадача.Выполнена = Ложь;
	
	// И создаем задание в очереди для маршрутизации комплексного процесса.
	ДобавитьЗаданиеМаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного(
		ВедущаяЗадача.БизнесПроцесс, ВложенныйПроцесс);
	
	Возврат Истина;
	
КонецФункции

// Добавляет задание маршрутизации комплексного процесса после выполнения вложенного.
// 
// Параметры:
// 	КомплексныйПроцесс - БизнесПроцессСсылка.КомплексныйПроцесс
//  ВложенныйПроцесс - БизнесПроцессСсылка.<тип процесса> - завершившееся действие,
//                      после которого следует запустить следующие действия комплексного процесса.
//
Процедура ДобавитьЗаданиеМаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного(
	КомплексныйПроцесс, ВложенныйПроцесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонНаименование = НСтр("ru = 'Выполнить маршрутизацию процесса ""%1"" после ""%2""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон(
		ШаблонНаименование, КомплексныйПроцесс, ВложенныйПроцесс);
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		КомплексныйПроцесс, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного,
		НаименованиеЗадания,
		ВложенныйПроцесс,
		УзелОбработки);
	
КонецПроцедуры

// Обрабатывает задание МаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеМаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного(Задание, БылиБлокировки) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель");
	
	ВложенныйПроцесс = РеквизитыЗадания.ПредметЗадания;
	ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВложенныйПроцесс, "ВедущаяЗадача");
	КомплексныйПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КомплексныйПроцесс);
	Исключение                                  
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать комплексный процесс.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ВедущаяЗадача);
	Исключение                                  
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = 
			НСтр("ru='Не удалось заблокировать ведущую задачу вложенного процесса.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.
		ПродолжитьВыполнениеКомплексногоПроцессаПослеВыполненияВложенного(
		КомплексныйПроцесс, ВложенныйПроцесс);
		
	ВыполнитьЗадачу(ВедущаяЗадача);
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает актуальность задания МаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияМаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		ВложенныйПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		ВложенныйПроцесс = Задание.ПредметЗадания;
	КонецЕсли;
	
	Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ВложенныйПроцесс, "ВедущаяЗадача.БизнесПроцесс");
	
	Если Не РаботаСБизнесПроцессами.ВыполнениеПроцессаАктуально(Процесс.ПолучитьОбъект()) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Выполнение комплексного процесса не актуально.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область МаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи

// Обрабатывает маршрутизацию комплексного процесса после выполнения задачи.
//
// Параметры: 
//   ЗадачаПроцесса- ЗадачаОбъект.ЗадачаИсполнителя - служебная задача комплексного процесса.
//
// Возвращаемое значение:
// 	Булево - Истина, если выполнение обрабатывается через очередь,
// 	         иначе Ложь (прикладной код должен выполнить обычную обработку).
//
Функция ОбработатьМаршрутизациюКомплексногоПроцессаПослеВыполненияЗадачи(ЗадачаПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если задание уже есть в очереди, то только отменяем стандартную обработку.
	// Данная ситуация допустима при выполнении служебной задачи КП при обработке задания очереди.
	Если Справочники.ОчередьЗаданийДокументооборота.ЕстьНеВыполненноеЗаданиеПоПредмету(
		Перечисления.ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи,
		ЗадачаПроцесса.Ссылка) Тогда

		Возврат Истина;			
	КонецЕсли;
	
	// Отменяем выполнение служебной задачи, чтобы комплексный процесс
	// остался в точке маршрута ВыполнитьДействияПроцессаПоСхеме.
	ЗадачаПроцесса.Выполнена = Ложь;
	
	// И создаем задание в очереди для маршрутизации комплексного процесса.
	ДобавитьЗаданиеМаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи(ЗадачаПроцесса);
	
	Возврат Истина;
	
КонецФункции

// Добавляет задание маршрутизации комплексного процесса после выполнения служебной задачи.
// 
// Параметры:
// 	ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя
//
Процедура ДобавитьЗаданиеМаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи(ЗадачаПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонНаименование = НСтр("ru = 'Выполнить маршрутизацию процесса ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон(ШаблонНаименование, ЗадачаПроцесса.БизнесПроцесс);
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЗадачаПроцесса.БизнесПроцесс, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи,
		НаименованиеЗадания,
		ЗадачаПроцесса.Ссылка,
		УзелОбработки);
	
КонецПроцедуры

// Обрабатывает задание МаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
// 	
Функция ОбработатьЗаданиеМаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи(Задание, БылиБлокировки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель");
	
	ЗадачаПроцесса = РеквизитыЗадания.ПредметЗадания;
	КомплексныйПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "БизнесПроцесс");
	
	ОбработкаПроцесса = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(КомплексныйПроцесс);
	Если ЕстьНевыполненныеЗаданияПоДействиямОбработки(ОбработкаПроцесса) Тогда
		РезультатВыполнения.ЗаписьЛога =
			НСтр("ru='Есть невыполненные задания по действиям обработки комплексного процесса.
				|Ожидание выполнения заданий.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
		Возврат РезультатВыполнения;
	КонецЕсли;
				
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КомплексныйПроцесс);
	Исключение                                  
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать комплексный процесс.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ЗадачаПроцесса);
	Исключение                                  
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = 
			НСтр("ru='Не удалось заблокировать служебную задачу процесса.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.
		ПродолжитьВыполнениеПроцессаПослеВыполненияСлужебнойЗадачи(ЗадачаПроцесса);
		
	ВыполнитьЗадачу(ЗадачаПроцесса);
		
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;

КонецФункции

// Возвращает актуальность задания МаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияМаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		ЗадачаПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		ЗадачаПроцесса = Задание.ПредметЗадания;
	КонецЕсли;
	
	Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "БизнесПроцесс");
	
	Если Не РаботаСБизнесПроцессами.ВыполнениеПроцессаАктуально(Процесс.ПолучитьОбъект()) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Выполнение комплексного процесса не актуально.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область МаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения

// Обрабатывает маршрутизацию комплексного процесса после продолжения остановленного процесса со схемой.
//
// Параметры:
// 	КомплексныйПроцесс - БизнесПроцессСсылка.КомплексныйПроцесс 
//
// Возвращаемое значение:
// 	Булево - Истина, если выполнение вложенного процесса обрабатывается через очередь,
// 	         иначе Ложь (прикладной код должен выполнить обычную обработку).
//
Функция ОбработатьМаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения(КомплексныйПроцесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДобавитьЗаданиеМаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения(
		КомплексныйПроцесс);
	
	Возврат Истина;
	
КонецФункции

// Добавляет задание МаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения.
// 
// Параметры:
// 	КомплексныйПроцесс - БизнесПроцессСсылка.КомплексныйПроцесс
//
Процедура ДобавитьЗаданиеМаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения(
	КомплексныйПроцесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонНаименование = НСтр("ru = 'Выполнить маршрутизацию процесса после возобновления ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон(ШаблонНаименование, КомплексныйПроцесс);
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		КомплексныйПроцесс, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения,
		НаименованиеЗадания,
		БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуМаршрутизацииПроцессаПоСхеме(КомплексныйПроцесс),
		УзелОбработки);
		
КонецПроцедуры

// Обрабатывает задание МаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеМаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель");
	
	ЗадачаПроцесса = РеквизитыЗадания.ПредметЗадания;
	
	Если ТипЗнч(ЗадачаПроцесса) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		КомплексныйПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "БизнесПроцесс");
	Иначе
		КомплексныйПроцесс = ЗадачаПроцесса;
		ЗадачаПроцесса = Неопределено;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КомплексныйПроцесс);
	Исключение                                  
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать комплексный процесс.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	КомплексныйПроцессОбъект = КомплексныйПроцесс.ПолучитьОбъект();
	КомплексныйПроцессОбъект.ПродолжитьВыполнениеПроцессаПоСхемеПослеОстановкиСлужебная();
	КомплексныйПроцессОбъект.Записать();
	
	Если ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
		БизнесПроцессы.КомплексныйПроцесс.ЗавершитьЗадачуМаршрутизацииПроцессаПоСхеме(
			ЗадачаПроцесса);
	КонецЕсли;
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает актуальность задания МаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияМаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		ЗадачаПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		ЗадачаПроцесса = Задание.ПредметЗадания;
	КонецЕсли;
	
	Если ТипЗнч(ЗадачаПроцесса) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "БизнесПроцесс");
	Иначе
		Процесс = ЗадачаПроцесса;
		ЗадачаПроцесса = Неопределено;
	КонецЕсли;
	
	Если Не РаботаСБизнесПроцессами.ВыполнениеПроцессаАктуально(Процесс.ПолучитьОбъект()) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Выполнение комплексного процесса не актуально.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область ЗапускОбработкиПоЗадачеЭлемента

// Обрабатывает запуска обработки по задаче элемента
// При возможности использования очереди заданий создает задания для формирования
//  запуска обработки по задаче элемента
// 
// Параметры:
// 	ЗадачаОбработки - ЗадачаССылка.ЗадачаИсполнителя
// 	ИмяПредмета - СправочникСсылка.ИменаПредметов
// 	
// Возвращаемое значение:
// 	Булево - Истина, если формирование выполняется через очередь,
// 	         иначе Ложь (прикладной код должен выполнить обычную обработку).
// 	
Функция ОбработатьЗапускОбработкиПоЗадачеЭлемента(ЗадачаОбработки, ИмяПредмета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДобавитьЗаданиеЗапускОбработкиПоЗадачеЭлемента(ЗадачаОбработки, ИмяПредмета);
	
	Возврат Истина;
	
КонецФункции

// Добавляет задание ЗапускОбработкиПоЗадачеЭлемента в очередь.
// 
// Параметры:
// 	ЗадачаОбработки - ЗадачаССылка.ЗадачаИсполнителя
// 	ИмяПредмета - СправочникСсылка.ИменаПредметов
//
Процедура ДобавитьЗаданиеЗапускОбработкиПоЗадачеЭлемента(ЗадачаОбработки, ИмяПредмета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Запустить обработку предмета процесса. Предмет: ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон(ПредставлениеЗадания, Строка(ИмяПредмета));
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЗадачаОбработки, "БизнесПроцесс.УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ЗапускОбработкиПоЗадачеЭлемента,
		НаименованиеЗадания,
		ЗадачаОбработки,
		УзелОбработки);	
			
КонецПроцедуры

// Обрабатывает задание очереди ЗапускОбработкиПоЗадачеЭлемента
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеЗапускОбработкиПоЗадачеЭлемента(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания");	
	
	ЗадачаОбработки = РеквизитыЗадания.ПредметЗадания;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ЗадачаОбработки);
	Исключение                                  
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать задачу.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	// проверим, есть ли подчиненное задание, и завершено ли.
	// если завершено - завершаем и свое.
	// если нет - создадим (сперва найдя обработку по задаче).
	
	// Если дочерних заданий нет, то действие еще не готовилось к выполнению и по нему не
	// создавались процессы.
	Если Не Справочники.ОчередьЗаданийДокументооборота.ЕстьДочерниеЗадания(Задание) Тогда
		
		// получим обработку.
		Обработка = Неопределено;
		
		КП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаОбработки, "БизнесПроцесс");
		
		ЗадачиЭлементовСхемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КП, "ЗадачиЭлементовСхемы");
		ЗадачиЭлементовСхемы = ЗадачиЭлементовСхемы.Выгрузить();
		
		ДанныеПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(КП));
			
		СтрЗадачи = ЗадачиЭлементовСхемы.Найти(ЗадачаОбработки, "ЗадачаПроцесса");
		ИмяЭлемента = СтрЗадачи.ИмяЭлемента;	
		
		ИмяПредметаВПроцессе = ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента];
		
		Предметы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КП, "Предметы");
		Предметы = Предметы.Выгрузить();

		СтрПредметы = Предметы.Найти(ИмяПредметаВПроцессе, "ИмяПредмета");
		Предмет = СтрПредметы.Предмет;
		
		Если Не ЗначениеЗаполнено(Предмет) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнен предмет'");
		КонецЕсли;		
		
		Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
		Если Не ЗначениеЗаполнено(Обработка) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнена обработка'");
		КонецЕсли;		
		
		ДобавитьЗаданиеЗапускОбработкиПоОбработке(Обработка, Задание);
		
		РезультатВыполнения.ЗаписьЛога = 
			НСтр("ru='Выполнена ЗапускОбработкиПоЗадачеЭлемента. Создано подзадание ЗапускОбработкиПоОбработке.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	ЕстьДочерниеЗаданияНевыполненные 
		= Справочники.ОчередьЗаданийДокументооборота.ЕстьДочерниеЗаданияНевыполненные(Задание);
	
	Если Не ЕстьДочерниеЗаданияНевыполненные Тогда
		РезультатВыполнения.ЗаданиеЗавершено = Истина;
		Возврат РезультатВыполнения;
	Иначе
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Задание ожидает выполнения дочерних заданий.'");
		РезультатВыполнения.ЗаданиеЗавершено = Ложь;
		Возврат РезультатВыполнения;
	КонецЕсли;			
	
КонецФункции

// Возвращает актуальность задания ЗапускОбработкиПоЗадачеЭлемента.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияЗапускОбработкиПоЗадачеЭлемента(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		Задача = Задание.ПредметЗадания;
	КонецЕсли;
	
	Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "БизнесПроцесс");
	
	Если Не РаботаСБизнесПроцессами.ВыполнениеПроцессаАктуально(Процесс.ПолучитьОбъект()) Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Выполнение комплексного процесса не актуально.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область ЗапускОбработкиПоОбработке

// Добавляет задание ЗапускОбработкиПоОбработке в очередь.
// 
// Параметры:
// 	Обработка - СправочникСсылка.ОбработкиОбъектов
// 	ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота
//
Процедура ДобавитьЗаданиеЗапускОбработкиПоОбработке(Обработка, ГлавноеЗадание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Сформировать процесс для обработки ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон(ПредставлениеЗадания, Строка(Обработка));
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ЗапускОбработкиПоОбработке,
		НаименованиеЗадания,
		Обработка,
		УзелОбработки,
		ГлавноеЗадание);	
			
КонецПроцедуры

// Обрабатывает задание очереди ЗапускОбработкиПоОбработке
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеЗапускОбработкиПоОбработке(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, Родитель.ПредметЗадания");	
	
	Обработка = РеквизитыЗадания.ПредметЗадания;
	ВедущаяЗадача = РеквизитыЗадания.РодительПредметЗадания;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Обработка);
	Исключение                                  
		БылиБлокировки = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Не удалось заблокировать обработку.'",
			ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	ОбработкаОбъект = Обработка.ПолучитьОбъект();
	
	Если ОбработкаОбъект.Состояние <> Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда 
	
		ОбработкаОбъект.ДополнительныеСвойства.Вставить("ВедущаяЗадача", ВедущаяЗадача);
		ОбработкаОбъект.ДополнительныеСвойства.Вставить("РодительскоеЗадание", Задание);
		ОбработкиОбъектов.НачатьОбработку(ОбработкаОбъект);
		
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Начата обработка и создано дочернее задание.'");
		РезультатВыполнения.ЗаданиеЗавершено = Ложь;
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	Возврат РезультатВыполнения;
		
КонецФункции

#КонецОбласти

#Область СформироватьДанныеДляПредпросмотраФайла

// Добавляет задание СформироватьДанныеДляПредпросмотраФайла в очередь.
// 
// Параметры:
// 	Файл - СправочникСсылка.Файлы
//
// Возвращаемое значение:
//  Булево - Истина, если успешно
Функция ДобавитьЗаданиеСформироватьПревьюФайла(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьЗаданийДокументооборота.Ссылка
	|ИЗ
	|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
	|ГДЕ
	|	ОчередьЗаданийДокументооборота.ПредметЗадания = &ПредметЗадания
	|	И ОчередьЗаданийДокументооборота.СтатусЗадания = &СтатусЗадания
	|	И ОчередьЗаданийДокументооборота.Тип = &Тип";
	
	Запрос.УстановитьПараметр("ПредметЗадания", Файл);
	Запрос.УстановитьПараметр("СтатусЗадания", Перечисления.СтатусыЗаданий.Выполняется);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыЗаданий.СформироватьДанныеДляПредпросмотраФайла);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ПредставлениеЗадания = НСтр("ru = 'Сформировать данные для предпросмотра файла ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон(ПредставлениеЗадания, Строка(Файл));
	
	УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.СформироватьДанныеДляПредпросмотраФайла,
		НаименованиеЗадания,
		Файл,
		УзелОбработки);
		
	Возврат Истина;	
			
КонецФункции

// Возвращает актуальность задания СформироватьДанныеДляПредпросмотраФайла.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияСформироватьДанныеДляПредпросмотраФайла(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		Файл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		Файл = Задание.ПредметЗадания;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ПометкаУдаления") Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Формирование данных предпросмотра не актуально для файла.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДействияОбработки

// Добавляет задание обновления действия в очередь.
// 
// Параметры:
// 	Действие - ОпределяемыйТип.ДействияОбъект - Действие, для которого необходимо добавить задание обновления.
// 	Параметры - Структура Из КлючИЗначение - Параметры задания. 
//
Процедура ДобавитьЗаданиеОбновитьДействиеОбработки(Действие, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания =
		НСтр("ru = 'Обновить действие обработки: %1 ""%2""'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания =
		СтрШаблон(ПредставлениеЗадания, Строка(Действие), Строка(Действие.Предмет));
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОбновитьДействиеОбработки,
		НаименованиеЗадания,
		Действие.Ссылка,
		Действие.УзелОбработки, ,
		ПодготовитьПараметрыКХранению(Параметры));
	
КонецПроцедуры

// Выполняет задание обновления действия обработки объекта.
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура - Задание, которое необходимо выполнить.
//  БылиБлокировки - Булево
//
// Возвращаемое значение:
//	Структура Из КлючИЗначение - см. СтруктураРезультатаОбработкиЗаданияОчереди. 
//
Функция ОбработатьЗаданиеОбновитьДействиеОбработки(Задание, БылиБлокировки) Экспорт
	
	РезультатВыполнения = ОбработатьЗаданиеОбновитьОбработкуДействиеОбработкиОбъекта(Задание);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает актуальность задания ОбновитьДействиеОбработки.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияОбновитьДействиеОбработки(Задание) Экспорт
	
	АктуальностьЗадания = АктуальностьЗаданияОбновитьОбработкуДействиеОбработкиОбъекта(Задание);
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область ПерейтиКВыполнениюДействияВнеОчереди

// Добавляет задание перехода к выполнению действия в очередь заданий.
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия - Действие, для которого необходимо добавить задание обновления.
// 	УзелОбработки - УникальныйИдентификатор - Узел КОД, в котором создана обработка действия
// 	Параметры - Структура Из КлючИЗначение - Параметры задания. 
//
Процедура ДобавитьЗаданиеПерейтиКВыполнениюДействияВнеОчереди(Действие, УзелОбработки, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПредметДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	ПредставлениеЗадания = НСтр("ru = 'Перейти к выполнению действия обработки вне очереди: %1 ""%2""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон(ПредставлениеЗадания, Действие, ПредметДействия);
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ПерейтиКВыполнениюДействияВнеОчереди,
		НаименованиеЗадания,
		Действие,
		УзелОбработки, ,
		ПодготовитьПараметрыКХранению(Параметры));
	
КонецПроцедуры

// Обрабатывает задание перехода к выполнению действия в очередь заданий.
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура - Задание, которое необходимо выполнить.
// 	БылиБлокировки - Булево - 
// 	
// Возвращаемое значение:
//	Структура Из КлючИЗначение - см. СтруктураРезультатаОбработкиЗаданияОчереди. 
//
Функция ОбработатьЗаданиеПерейтиКВыполнениюДействияВнеОчереди(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, "ПредметЗадания, ПараметрыВыполнения");
	ПараметрыЗадания = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	Если ТипЗнч(ПараметрыЗадания) <> Тип("Структура") Тогда
		РезультатВыполнения.ЗаданиеЗавершено = Истина;
		РезультатВыполнения.ЗаписьЛога =
			НСтр("ru = 'Некорректный формат параметров выполнения задания.'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	ОлицетворяемыйПользовательПрежний = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ПараметрыЗадания.АвторИзменения);
	Попытка
		ОбработкиОбъектов.ПерейтиКВыполнениюДействия(РеквизитыЗадания.ПредметЗадания);
	Исключение
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
		ВызватьИсключение;
	КонецПопытки;
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
	РезультатВыполнения.ЗаданиеЗавершено = Истина;

	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает актуальность задания ПерейтиКВыполнениюДействияВнеОчереди.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция ЗаданиеПерейтиКВыполнениюДействияВнеОчередиАктуально(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		Действие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		Действие = Задание.ПредметЗадания;
	КонецЕсли;
	
	ПроцессыДействия = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие);
	Если ПроцессыДействия.Количество() > 0 Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Переход к выполнению действия обработки не актуально.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеОбработкиОбъекта

// Добавляет задание обновления действия в очередь.
// 
// Параметры:
// 	Обработка - СправочникОбъект.ОбработкиОбъектов - Обработка, для которой необходимо добавить задание обновления.
// 	Параметры - Структура Из КлючИЗначение - Параметры задания. 
//
Процедура ДобавитьЗаданиеОбновитьОбработкуОбъекта(Обработка, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания =
		НСтр("ru = 'Обновить обработку: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон(ПредставлениеЗадания, Строка(Обработка));
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОбновитьОбработкуОбъекта,
		НаименованиеЗадания,
		Обработка.Ссылка,
		Обработка.УзелОбработки, ,
		ПодготовитьПараметрыКХранению(Параметры));
	
КонецПроцедуры

// Выполняет задание обновления обработки объекта.
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура - Задание, которое необходимо выполнить.
//
// Возвращаемое значение:
//	Структура Из КлючИЗначение - см. СтруктураРезультатаОбработкиЗаданияОчереди. 
//
Функция ОбработатьЗаданиеОбновитьОбработкуОбъекта(Задание, БылиБлокировки) Экспорт
	
	РезультатВыполнения = ОбработатьЗаданиеОбновитьОбработкуДействиеОбработкиОбъекта(Задание);    
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает актуальность задания ОбновитьОбработкуОбъекта.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияОбновитьОбработкуОбъекта(Задание) Экспорт
	
	АктуальностьЗадания = АктуальностьЗаданияОбновитьОбработкуДействиеОбработкиОбъекта(Задание);
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область ОстановкаПродолжениеОбработкиОбъекта

// Добавляет задания остановить или продолжить обработку объекта.
// 
// Параметры:
//  ОбработкаОбъекта - СправочникСсылка.ОбработкиОбъектов - Обработка объекта
//  СостояниеОбработкиОбъекта - ПеречислениеСсылка.СостоянияОбработкиОбъектов - Состояние обработки объекта
//  ПараметрыЗадания - Структура - Параметры выполнения задания
//
Процедура ДобавитьЗаданиеОстановитьПродолжитьОбработкуОбъекта(ОбработкаОбъекта, СостояниеОбработкиОбъекта,
		ПараметрыЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработкаОбъекта, "УзелОбработки");
	Если СостояниеОбработкиОбъекта = Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда
		ПредставлениеЗадания = НСтр("ru = 'Остановить обработку: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		НаименованиеЗадания = СтрШаблон(ПредставлениеЗадания, ОбработкаОбъекта);
		Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(Перечисления.ТипыЗаданий.ОстановитьОбработку,
			НаименованиеЗадания, ОбработкаОбъекта, УзелОбработки, , ПодготовитьПараметрыКХранению(ПараметрыЗадания));
	Иначе
		ПредставлениеЗадания = НСтр("ru = 'Продолжить обработку: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		НаименованиеЗадания = СтрШаблон(ПредставлениеЗадания, ОбработкаОбъекта);
		Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(Перечисления.ТипыЗаданий.ПродолжитьОбработку,
			НаименованиеЗадания, ОбработкаОбъекта, УзелОбработки, , ПодготовитьПараметрыКХранению(ПараметрыЗадания));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает актуальность задания ОстановитьОбработкуОбъекта.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция ЗаданиеОстановитьОбработкуОбъектаАктуально(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		ОбработкаОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		ОбработкаОбъекта = Задание.ПредметЗадания;
	КонецЕсли;
	
	РеквизитыОбработкиОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбработкаОбъекта, "ПометкаУдаления,
		|Состояние");
	Если РеквизитыОбработкиОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Остановлена
		Или РеквизитыОбработкиОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Прервана
		Или РеквизитыОбработкиОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Завершена
		Или РеквизитыОбработкиОбъекта.ПометкаУдаления = Истина Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Остановка обработки не актуальна.'",
			ОбщегоНазначения.КодОсновногоЯзыка());		
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Возвращает актуальность задания ПродолжитьОбработкуОбъекта.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция ЗаданиеПродолжитьОбработкуОбъектаАктуально(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		ОбработкаОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		ОбработкаОбъекта = Задание.ПредметЗадания;
	КонецЕсли;
	
	РеквизитыОбработкиОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбработкаОбъекта, "ПометкаУдаления,
		|Состояние");
	Если РеквизитыОбработкиОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Выполняется
		Или РеквизитыОбработкиОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Прервана
		Или РеквизитыОбработкиОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Завершена
		Или РеквизитыОбработкиОбъекта.ПометкаУдаления = Истина Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Продолжение обработки не актуально.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Обрабатывает задания очереди остановки, продолжения обработки
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота 
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеОстановитьПродолжитьОбработкуОбъекта(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, "ПредметЗадания, Тип, ПараметрыВыполнения");
	
	ОбработкаОбъекта = РеквизитыЗадания.ПредметЗадания;
	ПараметрыЗадания = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	
	СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Остановлена;
	Если РеквизитыЗадания.Тип = Перечисления.ТипыЗаданий.ПродолжитьОбработку Тогда
		СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Выполняется;
	КонецЕсли;
	
	ОлицетворяемыйПользовательПрежний = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ПараметрыЗадания.АвторИзменения);
	
	Попытка
		ОбработкиОбъектов.ОстановитьПродолжитьОбработку(ОбработкаОбъекта, СостояниеОбработки);
	Исключение
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
		РезультатВыполнения.ЗаписьЛога = СтрШаблон(НСтр("ru='Не удалось %1. %2'",
			ОбщегоНазначения.КодОсновногоЯзыка()), НРег(РеквизитыЗадания.Тип),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат РезультатВыполнения;
	КонецПопытки;
		
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область СобытияВлияющиеНаЗадания

// Выполняется при записи обработки объекта исполняемой процессами.
// 
// Параметры:
//  Обработка - СправочникОбъект.ОбработкиОбъектов
// 
Процедура ПриЗаписиОбработкиОбъектаИсполняемойПроцессами(Обработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Обработка.ДополнительныеСвойства.Свойство("ВыполняетсяПрерываниеОбработки") Тогда
		
		// При прерывании обработки устанавливаем блокировку всех невыполненных заданий по ней,
		// чтобы исключить параллельное прерывание и маршрутизацию.
		
		ЗаданияПоОбработке = 
			Справочники.ОчередьЗаданийДокументооборота.НеВыполненныеЗаданияПоПредмету(Обработка.Ссылка);
		
		Попытка
			Для Каждого Задание Из ЗаданияПоОбработке Цикл
				ЗаблокироватьДанныеДляРедактирования(Задание);
			КонецЦикла;
		Исключение
			ВызватьИсключение НСтр(
				"ru = 'Обработка недоступна для изменения, т.к. выполняется ее маршрутизация.
				|Повторите попытку позже.'",
				ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	ИначеЕсли Обработка.ДополнительныеСвойства.Свойство("ВыполняетсяОстановкаОбработки") Тогда
		
		// При остановке обработки контролируем отсутствие невыполненных заданий в очереди.
		// Если такие задания есть в очереди, то не позволяем останавливать обработку, чтобы не получить
		// ситуацию при которой выполняется какая-то активность по остановленной обработке.
		ТипыЗаданий = Новый Массив;
		ТипыЗаданий.Добавить(Перечисления.ТипыЗаданий.ОстановитьОбработку);
		ТипыЗаданий.Добавить(Перечисления.ТипыЗаданий.ПерейтиКВыполнениюДействияВнеОчереди);
		Если ЕстьНеВыполненноеЗаданиеПоОбработкеОбъектов(Обработка.Ссылка, , ТипыЗаданий) Тогда
			ВызватьИсключение НСтр(
				"ru = 'Обработка недоступна для остановки, т.к. по ней имеются незавершенные задания в очереди.
				|Повторите попытку позже.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
	ИначеЕсли Обработка.ДополнительныеСвойства.Свойство("ВыполняетсяПродолжениеОбработки") Тогда
		
		// При продолжении обработки также контролируем отсутствие невыполненных заданий в очереди.
		// Если такие задания есть в очереди, то не позволяем продолжить обработку, чтобы не получить
		// ситуацию при которой обработка продолжила работу до принятия сделанных ранее изменений.
		ТипыЗаданий = Новый Массив;
		ТипыЗаданий.Добавить(Перечисления.ТипыЗаданий.ПродолжитьОбработку);
		ТипыЗаданий.Добавить(Перечисления.ТипыЗаданий.ПерейтиКВыполнениюДействияВнеОчереди);	
		Если ЕстьНеВыполненноеЗаданиеПоОбработкеОбъектов(Обработка.Ссылка, , ТипыЗаданий) Тогда
			ВызватьИсключение НСтр(
				"ru = 'Обработка недоступна для продолжения, т.к. по ней имеются незавершенные задания в очереди.
				|Повторите попытку позже.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;	
	ИначеЕсли Обработка.Состояние = Перечисления.СостоянияОбработкиОбъектов.Прервана Тогда
		
		// Если обработка уже прервана, то не контролируем ее изменение, т.к. это
		// окончательное состояние и дальнейшее ее изменение никак не повлияет задания.
		// Ветка кода используется для реализации повторной записи обработки объекта.
		
	ИначеЕсли Обработка.Состояние = Перечисления.СостоянияОбработкиОбъектов.Завершена Тогда
		
		// Если обработка завершается/завершена, то не контролируем ее изменение, т.к. это
		// окончательное состояние и дальнейшее ее изменение никак не повлияет задания.
		// Ветка кода используется для реализации завершения обработки сразу после старта,
		// например, если все действия были пропущены в ходе маршрутизации по схеме.
		
	ИначеЕсли Обработка.ДополнительныеСвойства.Свойство("РодительскоеЗадание") Тогда
		
		// Если выполняется запуск обработки при выполнении задания очереди ЗапускОбработкиПоОбработке,
		// то не контролируем изменение обработки. Она может изменить свое состояние.
		
	ИначеЕсли Не Обработка.ДополнительныеСвойства.Свойство("ЗаписьВОчередиЗаданий")
		И ОбъектЕстьВОчереди(Обработка.Ссылка) Тогда
		ВызватьИсключение НСтр(
			"ru = 'Обработка недоступна для изменения, т.к. по ней имеются незавершенные задания в очереди.
			|Повторите попытку позже.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
КонецПроцедуры

// Выполняется перед записью действия исполняемого процессами.
// 
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
Процедура ПередЗаписьюДействияИсполняемогоПроцессами(Действие) Экспорт
	
	ЗаписьДействияПриПомещенииВИсторию = Ложь;
	Если Действие.ДополнительныеСвойства.Свойство("ЗаписьДействияПриПомещенииВИсторию") Тогда
		ЗаписьДействияПриПомещенииВИсторию = Действие.ДополнительныеСвойства.ЗаписьДействияПриПомещенииВИсторию;
	КонецЕсли;
	
	ОбработкаВОчередиЗаданий = Ложь;
	Если Не ЗаписьДействияПриПомещенииВИсторию Тогда
		ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие.Ссылка);
		ОбработкаВОчередиЗаданий = ОбъектЕстьВОчереди(ОбработкаДействия);
	КонецЕсли;
	
	Если Не ДействияСервер.ПризнакЗаписиДействияПослеРазменованияДляЗапуска(Действие)
		И Не Действие.ДополнительныеСвойства.Свойство("ЗаписьВОчередиЗаданий")
			И (ОбъектЕстьВОчереди(Действие.Ссылка, ЗаписьДействияПриПомещенииВИсторию)
				Или ОбработкаВОчередиЗаданий) Тогда
		
		ВызватьИсключение НСтр(
			"ru = 'Действие недоступно для изменения, т.к. по нему или по его обработке есть незавершенные задания в очереди.
			|Повторите попытку позже.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
			
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при записи действия исполняемого процессами.
// 
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
Процедура ПриЗаписиДействияИсполняемогоПроцессами(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДействияСервер.ПризнакЗаписиДействияПриПомещенииВИсторию(Действие) Тогда
		
		// При помещении действия в историю устанавливаем блокировку всех невыполненных заданий по нему,
		// чтобы исключить параллельное помещение в историю и маршрутизацию.
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОчередьЗаданийДокументооборота.Ссылка,
			|	ОчередьЗаданийДокументооборота.ПредметЗадания
			|ИЗ
			|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
			|ГДЕ
			|	ОчередьЗаданийДокументооборота.Ссылка В ИЕРАРХИИ
			|		(ВЫБРАТЬ
			|			ОчередьЗаданийДокументооборота.Ссылка
			|		ИЗ
			|			Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
			|		ГДЕ
			|			ОчередьЗаданийДокументооборота.ПредметЗадания = &ПредметЗадания
			|			И ОчередьЗаданийДокументооборота.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено))
			|	И ОчередьЗаданийДокументооборота.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)";
		
		Запрос.УстановитьПараметр("ПредметЗадания", Действие.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТипыДействий = Метаданные.ОпределяемыеТипы.Действия.Тип;
		ТипыПредметовДействий = Метаданные.ОпределяемыеТипы.ПредметДействия.Тип;
		
		Попытка
			Пока Выборка.Следующий() Цикл
				
				ТипПредмета = ТипЗнч(Выборка.ПредметЗадания);
				
				Если ТипПредмета <> Тип("Строка")
					И Не ТипыДействий.СодержитТип(ТипПредмета)
					И Не ТипыПредметовДействий.СодержитТип(ТипПредмета) Тогда
					
					Продолжить;
				КонецЕсли;
				
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				
			КонецЦикла;
		Исключение
			ВызватьИсключение НСтр(
				"ru = 'Действие недоступно для изменения, т.к. выполняется его маршрутизация.
				|Повторите попытку позже.'",
				ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	ИначеЕсли Действие.ПомещеноВИсторию Тогда
		
		// Если действие уже помещено в историю, то не контролируем его изменение, т.к. это
		// окончательное состояние и дальнейшее его изменение никак не повлияет задания.
		// Ветка кода используется для реализации повторной записи действия.
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при записи процесса.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект
//
Процедура ПриЗаписиПроцесса(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Процесс.ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Процесс.ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = Процесс.ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	ПредыдущееСостояние = Неопределено;
	Если Процесс.ДополнительныеСвойства.Свойство("ПредыдущееСостояние") Тогда
		ПредыдущееСостояние = Процесс.ДополнительныеСвойства.ПредыдущееСостояние;
	КонецЕсли;
	
	Если Процесс.Состояние <> ПредыдущееСостояние
		И Процесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		
		// При прерывании процесса устанавливаем блокировку всех невыполненных заданий по нему,
		// чтобы исключить параллельное прерывание и маршрутизацию.
		
		ЗаданияПоПроцессу = 
			Справочники.ОчередьЗаданийДокументооборота.НеВыполненныеЗаданияПоПредмету(Процесс.Ссылка);
		
		Попытка
			Для Каждого Задание Из ЗаданияПоПроцессу Цикл
				ЗаблокироватьДанныеДляРедактирования(Задание);
			КонецЦикла;
		Исключение
			ВызватьИсключение НСтр(
				"ru = 'Нельзя прервать процесс, т.к. выполняется его маршрутизация.
				|Повторите попытку позже.'",
				ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	
	ИначеЕсли Процесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		
		// Если процесс уже прерван, то не контролируем его изменение, т.к. это
		// окончательное состояние и дальнейшее его изменение никак не повлияет задания.
		// Ветка кода используется для реализации повторной записи процесса.
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при записи задачи процесса.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя
//
Процедура ПриЗаписиЗадачиПроцесса(ЗадачаПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(
		ЗадачаПроцесса.ИсточникДанных) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ЗадачаПроцесса.ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ЗадачаПроцесса.ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	СтароеСостояниеБизнесПроцесса = Неопределено;
	Если ЗадачаПроцесса.ДополнительныеСвойства.Свойство("СтароеСостояниеБизнесПроцесса") Тогда
		СтароеСостояниеБизнесПроцесса = ЗадачаПроцесса.ДополнительныеСвойства.СтароеСостояниеБизнесПроцесса;
	КонецЕсли;
	
	Если ЗадачаПроцесса.СостояниеБизнесПроцесса <> СтароеСостояниеБизнесПроцесса
		И ЗадачаПроцесса.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		
		Если ТипЗнч(ЗадачаПроцесса.БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			
			ПредметыЗаданий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаПроцесса.Ссылка);
			
			ПодчиненныеПроцессы = БизнесПроцессыИЗадачиСервер.БизнесПроцессыВедущейЗадачи(
				ЗадачаПроцесса.Ссылка);
			
			ЗавершенностьПроцессов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
				ПодчиненныеПроцессы, "Завершен");
			Для Каждого КлючЗначение Из ЗавершенностьПроцессов Цикл
				Процесс = КлючЗначение.Ключ;
				ПроцессЗавершен = КлючЗначение.Значение;
				Если ПроцессЗавершен Тогда
					ПредметыЗаданий.Добавить(Процесс);
				КонецЕсли;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ОчередьЗаданийДокументооборота.Ссылка
				|ИЗ
				|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
				|ГДЕ
				|	ОчередьЗаданийДокументооборота.ПредметЗадания В (&ПредметыЗаданий)
				|	И ОчередьЗаданийДокументооборота.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)";
			
			Запрос.УстановитьПараметр("ПредметыЗаданий", ПредметыЗаданий);
			
			ЗаданияПоЗадаче = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			Попытка
				Для Каждого Задание Из ЗаданияПоЗадаче Цикл
					ЗаблокироватьДанныеДляРедактирования(Задание);
				КонецЦикла;
			Исключение
				ВызватьИсключение НСтр(
					"ru = 'Нельзя прервать задачу, т.к. выполняется маршрутизация ее процесса.
					|Повторите попытку позже.'",
					ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ОчередьЗаданийДокументооборота.Ссылка,
				|	ОчередьЗаданийДокументооборота.ПредметЗадания
				|ИЗ
				|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
				|ГДЕ
				|	ОчередьЗаданийДокументооборота.Ссылка В ИЕРАРХИИ
				|		(ВЫБРАТЬ
				|			ОчередьЗаданийДокументооборота.Ссылка
				|		ИЗ
				|			Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
				|		ГДЕ
				|			ОчередьЗаданийДокументооборота.ПредметЗадания = &ПредметЗадания
				|			И ОчередьЗаданийДокументооборота.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено))
				|	И ОчередьЗаданийДокументооборота.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)";
			
			Запрос.УстановитьПараметр("ПредметЗадания", ЗадачаПроцесса.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТипыПредметовДействий = Метаданные.ОпределяемыеТипы.ПредметДействия.Тип;
			
			Попытка
				Пока Выборка.Следующий() Цикл
					
					ТипПредмета = ТипЗнч(Выборка.ПредметЗадания);
					
					Если ТипПредмета <> Тип("ЗадачаСсылка.ЗадачаИсполнителя")
						И Не ТипыПредметовДействий.СодержитТип(ТипПредмета) Тогда
						
						Продолжить;
					КонецЕсли;
					
					ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
					
				КонецЦикла;
			Исключение
				ВызватьИсключение НСтр(
					"ru = 'Нельзя прервать задачу, т.к. выполняется маршрутизация ее процесса.
					|Повторите попытку позже.'",
					ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ЗадачаПроцесса.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		
		// Если задача процесса уже прервана, то не контролируем ее изменение, т.к. это
		// окончательное состояние и дальнейшее ее изменение никак не повлияет задания.
		// Ветка кода используется для реализации повторной записи задачи процесса.
		
	ИначеЕсли ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(ЗадачаПроцесса.Ссылка) Тогда
		
		Если ЗадачаПроцесса.ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			ВызватьИсключение НСтр(
				"ru = 'Нельзя пометить на удаление задачу, т.к. по ней имеются незавершенные задания в очереди.
				|Повторите попытку позже.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		Если ЗадачаПроцесса.СостояниеБизнесПроцесса <> СтароеСостояниеБизнесПроцесса
			И ЗадачаПроцесса.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
			
			ВызватьИсключение НСтр(
				"ru = 'Нельзя остановить задачу процесса, т.к. по ней имеются незавершенные задания в очереди.
				|Повторите попытку позже.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при записи файла.
// 
// Параметры:
//  Файл - СправочникОбъект.Файлы
//
Процедура ПриЗаписиФайла(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Файл.ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = Файл.ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если Файл.ПометкаУдаления <> ПредыдущаяПометкаУдаления И Файл.ПометкаУдаления Тогда
		
		ЗаданияПоФайлу = 
			Справочники.ОчередьЗаданийДокументооборота.НеВыполненныеЗаданияПоПредмету(Файл.Ссылка);
		
		Попытка
			Для Каждого Задание Из ЗаданияПоФайлу Цикл
				ЗаблокироватьДанныеДляРедактирования(Задание);
			КонецЦикла;
		Исключение
			ВызватьИсключение НСтр(
				"ru = 'Не удалось пометить файл на удаление, т.к. по файлу формируются данные для предпросмотра.
				|Повторите попытку позже.'",
				ОбщегоНазначения.КодОсновногоЯзыка()) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереносСрокаВыполненияЗадачи

// Добавляет задание переноса срока выполнения задачи в очередь.
//
// Параметры:
//	Задача - ЗадачаСсылка.ЗадачаИсполнителя
//	Параметры - Структура
//
// Возвращаемое значение:
//	Булево
//
Функция ДобавитьЗаданиеПереносСрокаВыполненияЗадачи(Задача, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредставлениеЗадания = НСтр("ru = 'Перенести срок выполнения задачи'", ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, Строка(Задача));
	
	УзелОбработки = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "БизнесПроцесс.УзелОбработки");
	
	Параметры.Вставить(
		"ОлицетворяемыйПользователь",
		ПользователиДокументооборот.ОлицетворяемыйПользователь());
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ПереносСрокаВыполненияЗадачи,
		НаименованиеЗадания,
		Задача,
		УзелОбработки,,
		ПодготовитьПараметрыКХранению(Параметры));
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает задание очереди ПереносСрокаВыполненияЗадачи
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота     
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеПереносСрокаВыполненияЗадачи(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, ПараметрыВыполнения");
	
	Задача = РеквизитыЗадания.ПредметЗадания;
	ПараметрыВыполнения = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	
	Процесс = ПараметрыВыполнения.Процесс;
	
	ОлицетворяемыйПользовательПрежний = 
		ПользователиДокументооборот.ОлицетворяемыйПользователь();
	
	Если ПараметрыВыполнения.Свойство("ОлицетворяемыйПользователь") Тогда
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ПараметрыВыполнения.ОлицетворяемыйПользователь);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Процесс);
		МенеджерПроцесса.ИзменитьСрокИсполненияЗадачи(Задача, ПараметрыВыполнения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
			ОлицетворяемыйПользовательПрежний);
			
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
		ОлицетворяемыйПользовательПрежний);
			
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает актуальность задания ПереносСрокаВыполненияЗадачи.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияПереносСрока(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		Задача = Задание.ПредметЗадания;
	КонецЕсли;
	
	ЗадачаВыполнена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Выполнена");
	
	Если ЗадачаВыполнена Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение =
			НСтр("ru='Задача выполнена.'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Выполняем обработку вычисления изменений при переходе выполнению действия обработки.
//
// Параметры:
//  Обработка - СправочникСсылка.ОбработкиОбъектов.
//  ИзмененияОбработки - Структура - см. ОбработкиОбъектов.ИзмененияОбработкиПриПереходеКВыполнениюДействию - неявно
//                       возвращаемый параметр, в него должен быть помещены вычисленные изменения в текущем методе.
//
// Возвращаемое значение:
//  Булево - признак обработки вычисления в текущем методе.
//
Функция ОбработатьВычислениеИзмененийПриПереходеКВыполнениюДействияОбработки(
	Обработка, ИзмененияОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЕстьНеВыполненноеЗаданиеПоОбработкеОбъектов(Обработка, ,
		Перечисления.ТипыЗаданий.ПерейтиКВыполнениюДействияВнеОчереди) Тогда
		
		ИзмененияОбработки.ПереходВозможен = Ложь;
		ИзмененияОбработки.ОписаниеИзменений =
			НСтр("ru = 'Переход к выполнению действия невозможен, т.к. по обработке имеются незавершенные задания в очереди.
				|
				|Повторите попытку позже.'");
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область УказаниеЗаполняемогоПредмета

// Добавляет задание добавления или удаления заполняемого предмета процесса в очередь.
//
// Параметры:
//	Процесс - БизнесПроцессСсылка - процесс, для котрого нужно заполнить предмет
//	ЗадачаИсполнителя - ЗадачаСсылка - задача, в которой заполняется предмет.
//	ПараметрыВыполнения - Структура - Параметры выполнения задания
//
Процедура ДобавитьЗаданиеУказатьУдалитьЗаполняемыйПредмет(Процесс, ЗадачаИсполнителя, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Указать(удалить) заполняемый предмет'", ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон("%1. %2", ПредставлениеЗадания, ЗадачаИсполнителя);

	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "УзелОбработки");

	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗаданиеВоВнешнейТранзакции(
		Перечисления.ТипыЗаданий.ДобавитьУдалитьЗаполняемыйПредмет, НаименованиеЗадания, ЗадачаИсполнителя,
		УзелОбработки, , ПодготовитьПараметрыКХранению(ПараметрыВыполнения));
	
КонецПроцедуры

// Обрабатывает задание очереди ОбновлениеДанныхПроцесса
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота - 
//  БылиБлокировки - Булево
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди
//
Функция ОбработатьЗаданиеУказатьУдалитьЗаполняемыйПредмет(Задание, БылиБлокировки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, ПараметрыВыполнения");
	
	Задача = РеквизитыЗадания.ПредметЗадания;
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задача, "БизнесПроцесс, ТочкаМаршрута, БизнесПроцесс.ВедущаяЗадача");

	БизнесПроцесс = РеквизитыЗадачи.БизнесПроцесс;
	ТочкаМаршрута = РеквизитыЗадачи.ТочкаМаршрута;
	ВедущаяЗадача = РеквизитыЗадачи.БизнесПроцессВедущаяЗадача;

	ПараметрыЗадания = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредмета(ПараметрыЗадания.ИмяПредмета);
	
	Если РаботаСБизнесПроцессамиХолдинг.ЗаполняемыйПредметОбработан(БизнесПроцесс, ИмяПредмета,
		ПараметрыЗадания.Удаление) Тогда
		РезультатВыполнения.ЗаданиеЗавершено = Истина;
		РезультатВыполнения.ЗаписьЛога = НСтр("ru='Предмет ранее был добавлен или удален в процессе.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ОлицетворяемыйПользовательПрежний = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ПараметрыЗадания.АвторИзменения);
	
	НачатьТранзакцию();
	Попытка
		
		Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
			ПроцессВедущейЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
			Если ТипЗнч(ПроцессВедущейЗадачи) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				Мультипредметность.ЗаписатьЗаполняемыйПредметКомплексногоПроцесса(
					ПроцессВедущейЗадачи, ИмяПредмета, ПараметрыЗадания.Предмет, БизнесПроцесс, ТочкаМаршрута,
						ПараметрыЗадания.Удаление);
			КонецЕсли;
		КонецЕсли;
		
		Мультипредметность.ЗаписатьПредметБизнесПроцесса(БизнесПроцесс, ИмяПредмета, ПараметрыЗадания.Предмет,
			БизнесПроцесс, ТочкаМаршрута, ПараметрыЗадания.Удаление);
		ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(БизнесПроцесс, , , ПараметрыЗадания.АвторИзменения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
	РезультатВыполнения.ЗаданиеЗавершено = Истина;

	Возврат РезультатВыполнения;

КонецФункции

// Возвращает актуальность задания УказатьУдалитьЗаполняемыйПредмет.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция ЗаданиеУказатьУдалитьЗаполняемыйПредметАктуально(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеЗадачи

#Область ОбновитьЗадачуПоСостояниюДействия

// Добавляет задание обновления задачи по состоянию действия в очередь.
//
// Параметры:
//	ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//	ПараметрыВыполнения - Структура - Параметры выполнения задания:
//	 * Задача - ДокументСсылка.Задача.
//	 * ДействияДляВозврата - Массив из ДокументСсылка.ДействиеЗадачи.
//
Процедура ДобавитьЗаданиеОбновитьЗадачуПоСостояниюДействия(ДействиеЗадачи, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Обновить задачу по состоянию действия'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон(
		"%1. %2",
		ПредставлениеЗадания,
		Строка(ДействиеЗадачи));
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыВыполнения.Задача, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОбновитьЗадачуПоСостояниюДействия,
		НаименованиеЗадания,
		ДействиеЗадачи,
		УзелОбработки,,
		ПодготовитьПараметрыКХранению(ПараметрыВыполнения));
	
КонецПроцедуры

// Обрабатывает задание очереди обновления задачи по состоянию действия.
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота.  
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди().
//
Функция ОбработатьЗаданиеОбновитьЗадачуПоСостояниюДействия(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, ПараметрыВыполнения");
	
	ДействиеЗадачи = РеквизитыЗадания.ПредметЗадания;
	ПараметрыВыполнения = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	
	Задача = ПараметрыВыполнения.Задача;
	ДействияДляВозврата = ПараметрыВыполнения.ДействияДляВозврата;
	
	НачатьТранзакцию();
	Попытка
		
		ДействиеЗадачиОбъект = ДействиеЗадачи.ПолучитьОбъект();
		
		Документы.Задача.ОбновитьЗадачуПоСостояниюДействия(
			Задача,
			ДействиеЗадачиОбъект,
			ДействияДляВозврата,
			Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ОбновитьЗадачуПриПеренаправлении

// Добавляет задание обновления задачи при перенаправлении в очередь.
//
// Параметры:
//	ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//	ПараметрыВыполнения - Структура - Параметры выполнения задания:
//	 * Задача - ДокументСсылка.Задача.
//
Процедура ДобавитьЗаданиеОбновитьЗадачуПриПеренаправлении(ДействиеЗадачи, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеЗадания = НСтр("ru = 'Обновить задачу при перенаправлении'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадания = СтрШаблон(
		"%1. %2",
		ПредставлениеЗадания,
		Строка(ДействиеЗадачи));
	
	УзелОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыВыполнения.Задача, "УзелОбработки");
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОбновитьЗадачуПриПеренаправлении,
		НаименованиеЗадания,
		ДействиеЗадачи,
		УзелОбработки,,
		ПодготовитьПараметрыКХранению(ПараметрыВыполнения));
	
КонецПроцедуры

// Обрабатывает задание очереди обновления задачи при перенаправлении.
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота.
//  БылиБлокировки - Булево
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураРезультатаОбработкиЗаданийОчереди.
//
Функция ОбработатьЗаданиеОбновитьЗадачуПриПеренаправлении(Задание, БылиБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, Тип, Родитель, ДатаСоздания, ПараметрыВыполнения");
	
	ДействиеЗадачи = РеквизитыЗадания.ПредметЗадания;
	ПараметрыВыполнения = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	
	Задача = ПараметрыВыполнения.Задача;
	
	НачатьТранзакцию();
	Попытка
		
		Документы.Задача.ОбновитьЗадачуПриПеренаправлении(Задача, ДействиеЗадачи, Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

// Возвращает актуальность задания ВыполнениеЗадачи.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура.
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗаданияОбновитьЗадачу(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		ДействиеЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		ДействиеЗадачи = Задание.ПредметЗадания;
	КонецЕсли;
	
	Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Источник, Участники");
	Участники = РеквизитыЗадачи.Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки Возр");
	
	Если Не ИнтеграцияЗадач.ЭтоМассовыйИсточникЗадач(РеквизитыЗадачи.Источник) Тогда
		
		СтрокаДействияЗадачи = Неопределено;
		Для Каждого СтрокаУчастника Из Участники Цикл
			
			Если СтрокаУчастника.ДействиеУчастника <> ДействиеЗадачи Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДействияЗадачи = СтрокаУчастника;
			
			Прервать;
			
		КонецЦикла;
		
		Если СтрокаДействияЗадачи = Неопределено Тогда
			АктуальностьЗадания.Актуально = Ложь;
			АктуальностьЗадания.Пояснение = НСтр("ru='Действие задачи исключено из задачи.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

#КонецОбласти

#Область ДвухфакторнаяАутентификация

// Добавляет задание ОбработатьИзменениеКонтейнеровДля2ФА в очередь.
// 
// Параметры:
// 	Шаблон - СправочникСсылка.ШаблоныДвухфакторнойАутентификации - Шаблон, в который включены изменившиеся контейнеры
//
// Возвращаемое значение:
//  Булево - Истина, если успешно
Функция ДобавитьЗаданиеОбработатьИзменениеСоставаКонтейнеровДля2ФА(Шаблон, Контейнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьЗаданийДокументооборота.Ссылка
	|ИЗ
	|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
	|ГДЕ
	|	ОчередьЗаданийДокументооборота.ПредметЗадания = &ПредметЗадания
	|	И ОчередьЗаданийДокументооборота.СтатусЗадания = &СтатусЗадания
	|	И ОчередьЗаданийДокументооборота.Тип = &Тип";
	
	Запрос.УстановитьПараметр("ПредметЗадания", Шаблон);
	Запрос.УстановитьПараметр("СтатусЗадания", Перечисления.СтатусыЗаданий.Выполняется);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыЗаданий.ОбработатьИзменениеКонтейнеровДля2ФА);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ПредставлениеЗадания = НСтр("ru = 'Обработка изменения состава контейнера ""%1"" для двухфакторной аутентификации по шаблону ""%2""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон(ПредставлениеЗадания, Строка(Контейнер), Строка(Шаблон));
	
	УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОбработатьИзменениеКонтейнеровДля2ФА,
		НаименованиеЗадания,
		Шаблон,
		УзелОбработки);
		
	Возврат Истина;	
			
КонецФункции

// Возвращает актуальность задания ОбработатьИзменениеКонтейнеровДля2ФА.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота -СправочникОбъект.ОчередьЗаданийДокументооборота,
// Структура.
// 
// Возвращаемое значение:
//  Структура:
//  * Актуально - Булево
//  * Пояснение - Строка
Функция АктуальностьЗаданияОбработатьИзменениеСоставаКонтейнеровДля2ФА(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		Шаблон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ПредметЗадания");
	Иначе
		Шаблон = Задание.ПредметЗадания;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "ПометкаУдаления") Тогда
		АктуальностьЗадания.Актуально = Ложь;
		АктуальностьЗадания.Пояснение = НСтр("ru='Обработка изменения состава контейнеров не актуальна для контейнера.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Обработает событие  Перечисления.ТипыЗаданий.ОбработатьИзменениеКонтейнеровДля2ФА
// 
// Параметры:
//  ОписаниеЗадания - Структура                                
//  БылиБлокировки - Булево
// 
// Возвращаемое значение:
//  Структура - Обработать изменение контейнеров для2 ФА:
//  * ЗаданиеЗавершено - Булево - Задание завершено
//  * ЗаписьЛога - Строка - Текст для лога
Функция ОбработатьИзменениеКонтейнеровДля2ФА(ОписаниеЗадания, БылиБлокировки) Экспорт
	
	ПредметЗадания = ОписаниеЗадания.ПредметЗадания;
	ТекстДляЛога = "";
	
	Попытка
		
		Если ТипЗнч(ПредметЗадания) <> Тип("СправочникСсылка.ШаблоныДвухфакторнойАутентификации") Тогда
			ВызватьИсключение НСтр("ru = 'Неверный тип предмета - ожидается СправочникСсылка.ШаблоныДвухфакторнойАутентификации.'");
		КонецЕсли;
		
		ЗаданиеЗавершено = Справочники.ШаблоныДвухфакторнойАутентификации.ОбработатьИзменениеСоставаКонтейнеров(
			ПредметЗадания);
	
	Исключение
		
		ТекстДляЛога = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаданиеЗавершено = Ложь;
				
	КонецПопытки;
	
	Возврат Новый Структура("ЗаданиеЗавершено, ЗаписьЛога", ЗаданиеЗавершено, ТекстДляЛога);
	
КонецФункции

#КонецОбласти

#Область МассовоеОзнакомление

// Обрабатывает продолжение обработки после выполнения задач ознакомления
// При возможности использования очереди заданий создает задание для выполнения этой операции.
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия
// 	
// Возвращаемое значение:
// 	Булево - Истина, если продолжение обработки обрабатывается через очередь,
// 	         иначе Ложь (прикладной код должен выполнить код сам).
//
Функция ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредставлениеЗадания = НСтр("ru = 'Продолжить выполнение обработки после завершения ознакомления с ожиданием'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Действие, "Предмет, УзелОбработки");
	
	НаименованиеЗадания = СтрШаблон("%1. %2",
		ПредставлениеЗадания,
		Строка(РеквизитыДействия.Предмет));
	
	УзелОбработки = РеквизитыДействия.УзелОбработки;
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием,
		НаименованиеЗадания,
		Действие,
		УзелОбработки);
	
	Возврат Истина;
	
КонецФункции	

// Обработает событие  Перечисления.ТипыЗаданий.ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием
// 
// Параметры:
//  ОписаниеЗадания - Структура
//  БылиБлокировки - Булево
// 
// Возвращаемое значение:
//  Структура - Обработать изменение контейнеров для2 ФА:
//  * ЗаданиеЗавершено - Булево - Задание завершено
//  * ЗаписьЛога - Строка - Текст для лога
Функция ОбработатьПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(ОписаниеЗадания, БылиБлокировки) Экспорт
	
	Действие = ОписаниеЗадания.ПредметЗадания;
	ТекстДляЛога = "";
	
	Попытка
		
		ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
		
		РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
			Перечисления.СостоянияВыполненияДействий.Завершено);				
			
		ОбработкиОбъектов.ОбновитьОтметкиЗавершенностиОбработки(ОбработкаДействия);
		
		ИмяЭлемента =
			РаботаСПроцессамиПоОбработкамОбъектов.ИмяЭлементаСхемыОбработкиПоДействию(Действие);
		
		ПроцессОбработки = РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(ОбработкаДействия);
		
		ЗадачиОбработкиЭлемента = БизнесПроцессы.КомплексныйПроцесс.ЗадачиОбработкиЭлементаСхемы(
			ПроцессОбработки, ИмяЭлемента);
		Если ЗадачиОбработкиЭлемента.Количество() = 0 Тогда
			
			ТекстДляЛога = НСтр("ru = 'ЗадачиОбработкиЭлемента пусты'");
			ЗаданиеЗавершено = Ложь;
			Возврат Новый Структура("ЗаданиеЗавершено, ЗаписьЛога", ЗаданиеЗавершено, ТекстДляЛога);
			
		КонецЕсли;
		
		ВсегоЭлементов = ЗадачиОбработкиЭлемента.Количество();
		ЗадачаПроцесса = ЗадачиОбработкиЭлемента[ВсегоЭлементов - 1].ЗадачаПроцесса; // берем последний
			
		РаботаСКомплекснымиБизнесПроцессамиСервер.
			ПродолжитьВыполнениеПроцессаПослеВыполненияСлужебнойЗадачи(ЗадачаПроцесса);

		ВыполнитьЗадачу(ЗадачаПроцесса);
		
		Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
		Если Состояние = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
			
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
			Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
			
				Делопроизводство.ЗаписатьСостояниеДокумента(
					Предмет,
					,
					Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено,
					,
					Действие,
					Истина); 
					
			ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
					
				Период = ТекущаяДатаСеанса();	
				
				УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
					Предмет,
					Период,
					Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились,
					Действие);
					
			КонецЕсли;					
			
			ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ОбработкаДействия;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ЗавершениеДействия;
			Событие.Действие = Действие;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
			
		КонецЕсли;
		
		ЗаданиеЗавершено = Истина;	
	
	Исключение
		
		ТекстДляЛога = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаданиеЗавершено = Ложь;
				
	КонецПопытки;
	
	Возврат Новый Структура("ЗаданиеЗавершено, ЗаписьЛога", ЗаданиеЗавершено, ТекстДляЛога);
	
КонецФункции

// Проверяет, все ли участники выполнили задачи, если да - обновляет состояния действия и переходит к следующему (если ОжидатьЗавершения)
// При возможности использования очереди заданий создает задание для выполнения этой операции.
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия
// 	
// Возвращаемое значение:
// 	Булево - Истина, если продолжение обработки обрабатывается через очередь,
// 	         иначе Ложь (прикладной код должен выполнить код сам).
//
Функция ОбновитьДействиеОзнакомленияЦеликомЕслиНужно(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредставлениеЗадания = НСтр("ru = 'Обновить действие Ознакомления целиком если нужно'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Действие, "Предмет, УзелОбработки");
	
	НаименованиеЗадания = СтрШаблон("%1. %2",
		ПредставлениеЗадания,
		Строка(РеквизитыДействия.Предмет));
	
	УзелОбработки = РеквизитыДействия.УзелОбработки;
	
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОбновитьДействиеОзнакомленияЦеликомЕслиНужно,
		НаименованиеЗадания,
		Действие,
		УзелОбработки);
	
	Возврат Истина;
	
КонецФункции	

// Обработает событие  Перечисления.ТипыЗаданий.ОбновитьДействиеОзнакомленияЦеликомЕслиНужно
// 
// Параметры:
//  ОписаниеЗадания - Структура
//  БылиБлокировки - Булево
// 
// Возвращаемое значение:
//  Структура - Обработать изменение контейнеров для2 ФА:
//  * ЗаданиеЗавершено - Булево - Задание завершено
//  * ЗаписьЛога - Строка - Текст для лога
Функция ОбработатьОбновитьДействиеОзнакомленияЦеликомЕслиНужно(ОписаниеЗадания, БылиБлокировки) Экспорт
	
	Действие = ОписаниеЗадания.ПредметЗадания;
	ТекстДляЛога = "";
	
	Попытка
		
		ДействиеВыполнено = Ложь;
		РегистрыСведений.УчастникиОзнакомлений.ОбновитьДействиеЦеликомРеализация(Действие, ДействиеВыполнено);
		
		ЗаданиеЗавершено = Истина;	
	
	Исключение
		
		ТекстДляЛога = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаданиеЗавершено = Ложь;
				
	КонецПопытки;
	
	Возврат Новый Структура("ЗаданиеЗавершено, ЗаписьЛога", ЗаданиеЗавершено, ТекстДляЛога);
	
КонецФункции

#КонецОбласти

#Область ЗамещающиеИПомощники

// Добавляет задание ОбновитьДанныеЗадачПоЗамещению в очередь.
// 
// Параметры:
// 	Замещение - СправочникСсылка.ЗамещающиеИПомощники
//
// Возвращаемое значение:
//  Булево - Истина, если успешно
Функция ДобавитьЗаданиеОбновитьДанныеЗадачПоЗамещению(Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИспользоватьЗадания() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьЗаданийДокументооборота.Ссылка
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.ПредметЗадания = &ПредметЗадания
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания = &СтатусЗадания
		|	И ОчередьЗаданийДокументооборота.Тип = &Тип";
	
	Запрос.УстановитьПараметр("ПредметЗадания", Замещение);
	Запрос.УстановитьПараметр("СтатусЗадания", Перечисления.СтатусыЗаданий.Выполняется);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыЗаданий.ОбновитьДанныеЗадачПоЗамещению);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ПредставлениеЗадания = НСтр("ru = 'Обновление данных задач по замещению ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НаименованиеЗадания = СтрШаблон(ПредставлениеЗадания, Строка(Замещение));
	
	УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
	Справочники.ОчередьЗаданийДокументооборота.СоздатьЗадание(
		Перечисления.ТипыЗаданий.ОбновитьДанныеЗадачПоЗамещению,
		НаименованиеЗадания,
		Замещение,
		УзелОбработки);
		
	Возврат Истина;	
			
КонецФункции

// Возвращает актуальность задания ОбновитьДанныеЗадачПоЗамещению.
// 
// Параметры:
//  Задание - 
// - СправочникСсылка.ОчередьЗаданийДокументооборота, СправочникОбъект.ОчередьЗаданийДокументооборота, Структура.
// 
// Возвращаемое значение:
//  Структура - Актуальность задания обновить данные задач по замещению:
// * Актуально - Булево - 
// * Пояснение - Строка - 
Функция АктуальностьЗаданияОбновитьДанныеЗадачПоЗамещению(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Обработает событие Перечисления.ТипыЗаданий.ОбновитьДанныеЗадачПоЗамещению
// 
// Параметры:
//  ОписаниеЗадания - Структура - 
//  БылиБлокировки - Булево - 
// 
// Возвращаемое значение:
//  Структура - Обновить данные задач по замещению:
// * ЗаданиеЗавершено - Булево - 
// * ЗаписьЛога - Строка - 
Функция ОбновитьДанныеЗадачПоЗамещению(ОписаниеЗадания, БылиБлокировки) Экспорт

	ПредметЗадания = ОписаниеЗадания.ПредметЗадания;
	ТекстДляЛога = "";
	
	Попытка
		
		Справочники.ЗамещающиеИПомощники.ОбновитьДанныеЗадачПоЗамещению(ПредметЗадания);
		ЗаданиеЗавершено = Истина;
		
	Исключение
		
		ТекстДляЛога = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаданиеЗавершено = Ложь;
				
	КонецПопытки;
	
	Возврат Новый Структура("ЗаданиеЗавершено, ЗаписьЛога", ЗаданиеЗавершено, ТекстДляЛога);
	
КонецФункции

#КонецОбласти

// Вернет ФО ИспользоватьЗадания
// 
// Возвращаемое значение:
// 	Булево - Описание
Функция ИспользоватьЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЗадания");
	
КонецФункции

// Вернет ФО ИспользоватьЗадания + Константы.ВыполнятьЗаданияНаКлиенте
// 
// Возвращаемое значение:
// 	Булево - Описание
Функция ИспользоватьЗаданияДляКлиента() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьЗадания = ПолучитьФункциональнуюОпцию("ИспользоватьЗадания");
	ВыполнятьЗаданияНаКлиенте = Константы.ВыполнятьЗаданияНаКлиенте.Получить();
	
	Возврат ИспользоватьЗадания И ВыполнятьЗаданияНаКлиенте; 
	
КонецФункции

// Меняет ФО ИспользоватьЗадания если нужно
// 
Процедура ИзменитьНастройкуИспользоватьЗаданияЕслиНужно() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		КорректнаяНастройка = Истина;
	ИначеЕсли Справочники.ОчередьЗаданийДокументооборота.ЕстьНевыполненныеЗадания() Тогда
		КорректнаяНастройка = Истина;
	Иначе
		ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
		КорректнаяНастройка = Не ЭтоФайловаяБаза;
	КонецЕсли;
	
	Если КорректнаяНастройка <> Константы.ИспользоватьЗадания.Получить() Тогда
		Константы.ИспользоватьЗадания.Установить(КорректнаяНастройка);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает пустую структуру результата обработки задания очереди.
// 
// Возвращаемое значение:
// 	Структура
//   * ЗаданиеЗавершено - Булево
//   * ЗаписьЛога - Строка
//
Функция СтруктураРезультатаОбработкиЗаданияОчереди() Экспорт
	
	Возврат Новый Структура("ЗаданиеЗавершено, ЗаписьЛога", Ложь, "");
	
КонецФункции

// Вернет Истина, если объект в очереди со статусом Выполняется или ОжидаетВыполнения.
// 
// Параметры:
// 	ПредметЗадания - 
// 	СправочникСсылка.ОбработкиОбъектов, СправочникСсылка.ДействияОзнакомления, СправочникСсылка.ДействияПодписания, СправочникСсылка.ДействияРегистрации, СправочникСсылка.ДействияСогласования, СправочникСсылка.ДействияУтверждения, ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи, ЗадачаСсылка, БизнесПроцессСсылка, Строка, СправочникСсылка.ДействияИсполнения, СправочникСсылка.ДокументыПредприятия
//  ЗаписьДействияПриПомещенииВИсторию -Булево    
// Тип - ПеречислениеСсылка.ТипыЗаданий 
// 	
// Возвращаемое значение:
// Булево
// 	
Функция ОбъектЕстьВОчереди(ПредметЗадания, ЗаписьДействияПриПомещенииВИсторию = Ложь, Тип = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("СостояниеВыполнения", Неопределено);
	Результат.Вставить("ПричинаОтменыВыполнения", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьМаршрутизации.Ссылка КАК Задание
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьМаршрутизации
		|ГДЕ
		|	ОчередьМаршрутизации.ПредметЗадания = &ПредметЗадания
		|	И (ОчередьМаршрутизации.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется)
		|	ИЛИ ОчередьМаршрутизации.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения)
		|	ИЛИ ОчередьМаршрутизации.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОжидаетЗавершенияПодчиненных))";
		
	Запрос.УстановитьПараметр("ПредметЗадания", ПредметЗадания);
	
	Если ЗначениеЗаполнено(Тип) Тогда
		Запрос.Текст = Запрос.Текст + " И ОчередьМаршрутизации.Тип = &Тип";
		Запрос.УстановитьПараметр("Тип", Тип);
	КонецЕсли;	
	
	Если ЗаписьДействияПриПомещенииВИсторию = Истина Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"ИЛИ ОчередьМаршрутизации.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения)", 
		"");
	КонецЕсли;	

	// есть задание 		
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции	

// Возвращает актуальность задания.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота,
//            СправочникОбъект.ОчередьЗаданийДокументооборота,
//            Структура с реквизитами задания (Тип, Родитель, ПредметЗадания)
// 
// Возвращаемое значение:
//  Структура:
//   * Актуально - Булево
//   * Пояснение - Строка
//
Функция АктуальностьЗадания(Задание) Экспорт
	
	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Задание)) Тогда
		РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Задание, "Ссылка, Тип, Родитель, ПредметЗадания");
	Иначе
		РеквизитыЗадания = Задание;
	КонецЕсли;
	
	ТипЗадания = РеквизитыЗадания.Тип;
	
	ТипыЗаданий = Перечисления.ТипыЗаданий;
	
	Если ТипЗадания = ТипыЗаданий.СформироватьПроцессДляОбработкиОбъекта Тогда
	
		АктуальностьЗадания = АктуальностьЗаданияСформироватьПроцессДляОбработкиОбъект(Задание);
	
	ИначеЕсли ТипЗадания = ТипыЗаданий.НачатьВыполнениеДействияИсполненияПроцессами
		Или ТипЗадания = ТипыЗаданий.НачатьВыполнениеДействияСогласованияПроцессом
		Или ТипЗадания = ТипыЗаданий.НачатьВыполнениеДействияПроцессом
		Или ТипЗадания = ТипыЗаданий.НачатьВыполнениеДействияПроцессамиНовыеУчастники
		Или ТипЗадания = ТипыЗаданий.НачатьВыполнениеДействияСогласованияПроцессомНовыеУчастники Тогда
		
		АктуальностьЗадания = АктуальностьЗаданияНачатьВыполнениеДействия(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.ПодготовкаОзнакомленияСогласования Тогда
		
		АктуальностьЗадания = АктуальностьЗаданияПодготовкаОзнакомленияСогласования(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.ЗавершениеОзнакомленияСогласования Тогда
		
		АктуальностьЗадания = АктуальностьЗаданияЗавершениеОзнакомленияСогласования(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.СтартоватьПроцесс Тогда
		
		АктуальностьЗадания = АктуальностьЗаданияСтартоватьПроцесс(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.ВыполнениеЗадачи Тогда
		
		АктуальностьЗадания = АктуальностьЗаданияВыполнениеЗадачи(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного Тогда
		
		АктуальностьЗадания = 
			АктуальностьЗаданияМаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи Тогда
		
		АктуальностьЗадания = 
			АктуальностьЗаданияМаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения Тогда
		
		АктуальностьЗадания = 
			АктуальностьЗаданияМаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.ЗапускОбработкиПоЗадачеЭлемента Тогда
		
		АктуальностьЗадания = АктуальностьЗаданияЗапускОбработкиПоЗадачеЭлемента(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.СформироватьДанныеДляПредпросмотраФайла Тогда
		
		АктуальностьЗадания = АктуальностьЗаданияСформироватьДанныеДляПредпросмотраФайла(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.СформироватьПроцессДляИсполнителейДействияИсполнения
		Или ТипЗадания = ТипыЗаданий.СформироватьПроцессДляРассматривающегоДействияИсполнения
		Или ТипЗадания = ТипыЗаданий.СформироватьПроцессДляПунктаДействияИсполнения
		Или ТипЗадания = ТипыЗаданий.ПодготовитьПредметКСогласованиюВРежимеЗамечаний
		Или ТипЗадания = ТипыЗаданий.СоздатьHtmlПриНачалеСогласования
		Или ТипЗадания = ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияБыстрый
		Или ТипЗадания = ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияДолгий
		Или ТипЗадания = ТипыЗаданий.ОбновитьHtmlПередОзнакомлением
		Или ТипЗадания = ТипыЗаданий.ДобавитьТегиHtmlПередОзнакомлениемБыстрый
		Или ТипЗадания = ТипыЗаданий.ДобавитьТегиHtmlПередОзнакомлениемДолгий
		Или ТипЗадания = ТипыЗаданий.ЗапускОбработкиПоОбработке Тогда
		
		Если ЗначениеЗаполнено(РеквизитыЗадания.Родитель) Тогда
			АктуальностьЗадания = АктуальностьЗадания(РеквизитыЗадания.Родитель);
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.ОбновитьДействиеОбработки Тогда

		АктуальностьЗадания = АктуальностьЗаданияОбновитьДействиеОбработки(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.ОбновитьОбработкуОбъекта Тогда
		
		АктуальностьЗадания = АктуальностьЗаданияОбновитьОбработкуОбъекта(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.ПереносСрокаВыполненияЗадачи Тогда
		
		АктуальностьЗадания = АктуальностьЗаданияПереносСрока(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.ОбновитьЗадачуПоСостояниюДействия
		Или ТипЗадания = ТипыЗаданий.ОбновитьЗадачуПриПеренаправлении Тогда
		
		АктуальностьЗадания = АктуальностьЗаданияОбновитьЗадачу(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.СохранитьРезультатВыполненияВЗадачуПроцесса
		Или ТипЗадания = ТипыЗаданий.ПринятьКИсполнениюЗадачуПроцесса
		Или ТипЗадания = ТипыЗаданий.ОтменитьПринятиеКИсполнениюЗадачуПроцесса
		Или ТипЗадания = ТипыЗаданий.ПеренаправлениеЗадачи Тогда
		
		АктуальностьЗадания =
			АктуальностьЗаданияПоЗадачеПроцессаСИсполнителем(Задание);

	ИначеЕсли ТипЗадания = ТипыЗаданий.НачатьВыполнениеДействияМассовогоОзнакомления Или
		ТипЗадания = ТипыЗаданий.ОбновитьЗадачуУчастникаМассовогоОзнакомления Тогда

		АктуальностьЗадания = АктуальностьЗаданияОбновитьДействиеОбработки(Задание);
	
	ИначеЕсли ТипЗадания = ТипыЗаданий.ОбработатьИзменениеКонтейнеровДля2ФА Тогда
		АктуальностьЗадания = АктуальностьЗаданияОбработатьИзменениеСоставаКонтейнеровДля2ФА(Задание);

	ИначеЕсли ТипЗадания = ТипыЗаданий.ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием Тогда
		АктуальностьЗадания = АктуальностьЗаданияПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.ОбновитьДействиеОзнакомленияЦеликомЕслиНужно Тогда
		АктуальностьЗадания = АктуальностьЗаданияОбновитьДействиеОзнакомленияЦеликомЕслиНужно(Задание);
		
	ИначеЕсли ТипЗадания = ТипыЗаданий.ОбновитьПроцессБезДействия Тогда
		АктуальностьЗадания = ЗаданиеОбновитьПроцессБезДействияАктуально(Задание);
	ИначеЕсли ТипЗадания = ТипыЗаданий.ПрерватьПроцесс Тогда
		АктуальностьЗадания = ЗаданиеПрерватьПроцессАктуально(Задание);
	ИначеЕсли ТипЗадания = ТипыЗаданий.ОстановитьПроцесс Тогда
		АктуальностьЗадания = ЗаданиеОстановитьПроцессАктуально(Задание);
	ИначеЕсли ТипЗадания = ТипыЗаданий.ПродолжитьПроцесс Тогда
		АктуальностьЗадания = ЗаданиеПродолжитьПроцессАктуально(Задание);
	ИначеЕсли ТипЗадания = ТипыЗаданий.ДобавитьУдалитьЗаполняемыйПредмет Тогда
		АктуальностьЗадания = ЗаданиеУказатьУдалитьЗаполняемыйПредметАктуально(Задание);
	ИначеЕсли ТипЗадания = ТипыЗаданий.ОтменитьВыполнениеЗадачи Тогда
		АктуальностьЗадания = ЗаданиеОтменитьВыполнениеЗадачиАктуально(Задание);
	ИначеЕсли ТипЗадания = ТипыЗаданий.ОстановитьОбработку Тогда
		АктуальностьЗадания = ЗаданиеОстановитьОбработкуОбъектаАктуально(Задание);
	ИначеЕсли ТипЗадания = ТипыЗаданий.ПродолжитьОбработку Тогда
		АктуальностьЗадания = ЗаданиеПродолжитьОбработкуОбъектаАктуально(Задание);
	ИначеЕсли ТипЗадания = ТипыЗаданий.ПерейтиКВыполнениюДействияВнеОчереди Тогда
		АктуальностьЗадания = ЗаданиеПерейтиКВыполнениюДействияВнеОчередиАктуально(Задание);
	ИначеЕсли ТипЗадания = ТипыЗаданий.ОбновитьДанныеЗадачПоЗамещению Тогда
		АктуальностьЗадания = АктуальностьЗаданияОбновитьДанныеЗадачПоЗамещению(Задание);
	Иначе
		
		ВызватьИсключение НСтр(
			"ru = 'Неожиданный тип задания при проверке актуальности.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
	КонецЕсли;
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Выполняет служебную задачу
// 
// Параметры:
// 	СлужебнаяЗадача  -ЗадачаСсылка.ЗадачаИсполнителя
Процедура ВыполнитьЗадачу(СлужебнаяЗадача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗадачаОбъект = СлужебнаяЗадача.ПолучитьОбъект();
	ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрамиНемедленно(ЗадачаОбъект,,,Истина);
	
КонецПроцедуры

// Выполняет служебную задачу
// 
// Параметры:
// 	Действие  - СправочникСсылка.Сотрудники, СправочникСсылка.ДействияОзнакомления, БизнесПроцессСсылка, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.ДействияСогласования, СправочникСсылка.ДействияРегистрации, СправочникСсылка.ДействияПодписания, ЗадачаСсылка, СправочникСсылка.РабочиеГруппы, СправочникСсылка.Файлы, СправочникСсылка.ДействияУтверждения, ДокументСсылка.Задача, Строка, СправочникСсылка.ПроектыКонтейнеры, СправочникСсылка.ДокументыПредприятия, СправочникСсылка.ДействияИсполнения, ДокументСсылка.ДействиеЗадачи, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи, СправочникСсылка.ПодразделенияКонтейнеры, СправочникСсылка.ОбработкиОбъектов
Процедура УдалитьЗаданияСОшибками(Действие) Экспорт
	
	МассивЗаданий = Справочники.ОчередьЗаданийДокументооборота.ОшибочныеЗаданияПоПредмету(Действие);
	Для Каждого Задание Из МассивЗаданий Цикл
		
		Справочники.ОчередьЗаданийДокументооборота.УдалитьОдноЗадание(Задание);
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаданияПоЗадачамПроцессовСИсполнителями

Функция ЕстьНевыполненныеЗаданияПоЗадачамПроцессовДоТекущего(Задание, ПредметЗадания, ДатаСоздания)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьЗаданийДокументооборота.Ссылка
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.ПредметЗадания = &ПредметЗадания
		|	И ОчередьЗаданийДокументооборота.ДатаСоздания < &ДатаСоздания
		|	И ОчередьЗаданийДокументооборота.Ссылка <> &ТекущееЗадание
		|	И ОчередьЗаданийДокументооборота.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ПринятьКИсполнениюЗадачуПроцесса),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ОтменитьПринятиеКИсполнениюЗадачуПроцесса),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ОтменитьВыполнениеЗадачи),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ДобавитьУдалитьЗаполняемыйПредмет),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ПеренаправлениеЗадачи), ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ВыполнениеЗадачи),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.СохранитьРезультатВыполненияВЗадачуПроцесса))
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения))";
		
	Запрос.УстановитьПараметр("ПредметЗадания", ПредметЗадания);
	Запрос.УстановитьПараметр("ДатаСоздания", ДатаСоздания);
	Запрос.УстановитьПараметр("ТекущееЗадание", Задание);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Готовит данные бизнес процесса задачи обрабатывающего результат для корректной сериализации КОД
// 
// Параметры:
//  ЗадачаИсполнителя - ЗадачаСсылка.ЗадачаИсполнителя - Задача исполнителя
//  ПараметрыЗадания - Структура - 
//
Процедура ПодготовитьДанныеПроцессаЗадачиОбрабатывающегоРезультатДляОтправки(ЗадачаИсполнителя, ПараметрыЗадания)
	
	ПараметрыЗадания.Вставить("ДанныеПроцессаЗадачиОбрабатывающегоРезультатПодготовлены", Истина);
	Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД")
		Или Не ОбщегоНазначенияДокументооборот.ОбъектЭтогоУзла(ЗадачаИсполнителя.ПолучитьОбъект()) Тогда
			ПараметрыЗадания.ДанныеПроцессаЗадачиОбрабатывающегоРезультатПодготовлены = Ложь;
			Возврат;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаИсполнителя, "ТочкаМаршрута, БизнесПроцесс");
	ТочкаМаршрута = РеквизитыЗадачи.ТочкаМаршрута;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	Если Не РаботаСБизнесПроцессамиХолдингКлиентСервер.ЭтоВыполнениеЗадачиОбрабатывающегоРезультат(ПараметрыЗаписи)
		Тогда
			ПараметрыЗадания.ДанныеПроцессаЗадачиОбрабатывающегоРезультатПодготовлены = Ложь ;
			Возврат;
	КонецЕсли;
	
	Если (ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить")
		Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться"))
			И ПараметрыЗадания.Свойство("Исполнители") Тогда
		Для Каждого Исполнитель Из ПараметрыЗадания.Исполнители Цикл
			Если ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				РеквизитыПолнойРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Исполнитель.Исполнитель,
					"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				ЗаполнитьЗначенияСвойств(Исполнитель, РеквизитыПолнойРоли);
				Исполнитель.ВладелецРоли = РеквизитыПолнойРоли.Владелец;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли (ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться")
			Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Ознакомиться"))
				И ПараметрыЗадания.Свойство("Исполнитель") Тогда
		Если ТипЗнч(ПараметрыЗадания.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			РеквизитыПолнойРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗадания.Исполнитель,
				"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ЗаполнитьЗначенияСвойств(ПараметрыЗадания, РеквизитыПолнойРоли);
			ПараметрыЗадания.ВладелецРоли = РеквизитыПолнойРоли.Владелец;
		КонецЕсли;
	ИначеЕсли ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Подписание.ТочкаМаршрута.ОбработатьРезультат")
		И ПараметрыЗадания.Свойство("ДанныеПроцесса") Тогда
		ДанныеПроцесса = ПараметрыЗадания.ДанныеПроцесса.Получить();
		Для Каждого СтрокаУчастник Из ДанныеПроцесса.Участники Цикл
			Если ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				РеквизитыПолнойРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаУчастник.Участник,
					"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				ЗаполнитьЗначенияСвойств(СтрокаУчастник, РеквизитыПолнойРоли);
				СтрокаУчастник.ВладелецРоли = РеквизитыПолнойРоли.Владелец;
			КонецЕсли;
		КонецЦикла;
		ПараметрыЗадания.ДанныеПроцесса = Новый ХранилищеЗначения(ДанныеПроцесса);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает полученные данные бизнес процесса задачи обрабатывающего результат для корректной сериализации КОД
// 
// Параметры:
//  ЗадачаИсполнителя - ЗадачаОбъект.ЗадачаИсполнителя - Задача исполнителя
//  ПараметрыЗадания - Структура - 
//
Процедура ОбработатьПолученныеДанныеПроцессаЗадачиОбрабатывающегоРезультат(ЗадачаИсполнителя, ПараметрыЗадания)
	
	Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
			Возврат;
	КонецЕсли;
	
	ТочкаМаршрута = ЗадачаИсполнителя.ТочкаМаршрута;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	Если Не РаботаСБизнесПроцессамиХолдингКлиентСервер.ЭтоВыполнениеЗадачиОбрабатывающегоРезультат(ПараметрыЗаписи)
		Тогда
			Возврат;
	КонецЕсли;
	
	Если Не РаботаСБизнесПроцессамиХолдингКлиентСервер.ДанныеПроцессаЗадачиОбрабатывающегоРезультатПодготовлены(
		ПараметрыЗадания) Тогда
			Возврат;
	КонецЕсли;
	
	Если (ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить")
		Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться"))
			И ПараметрыЗадания.Свойство("Исполнители") Тогда
		Для Каждого Исполнитель Из ПараметрыЗадания.Исполнители Цикл
			ДанныеИсполнителя = РаботаСЗадачамиКлиентСервер.НовыйДанныеИсполнителя();
			ЗаполнитьЗначенияСвойств(ДанныеИсполнителя, Исполнитель);
			Если ЗначениеЗаполнено(ДанныеИсполнителя.ВладелецРоли) Тогда
				Исполнитель.Исполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(ДанныеИсполнителя.ВладелецРоли,
					ДанныеИсполнителя.ОсновнойОбъектАдресации, ДанныеИсполнителя.ДополнительныйОбъектАдресации);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли (ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться")
				Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Ознакомиться"))
					И ПараметрыЗадания.Свойство("Исполнитель") Тогда
			ДанныеИсполнителя = РаботаСЗадачамиКлиентСервер.НовыйДанныеИсполнителя();
			ЗаполнитьЗначенияСвойств(ДанныеИсполнителя, ПараметрыЗадания);
			Если ЗначениеЗаполнено(ДанныеИсполнителя.ВладелецРоли) Тогда
				ПараметрыЗадания.Исполнитель = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
					ДанныеИсполнителя.ВладелецРоли, ДанныеИсполнителя.ОсновнойОбъектАдресации,
						ДанныеИсполнителя.ДополнительныйОбъектАдресации);
			КонецЕсли;
	ИначеЕсли ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Подписание.ТочкаМаршрута.ОбработатьРезультат")
		И ПараметрыЗадания.Свойство("ДанныеПроцесса") Тогда
		ДанныеПроцесса = ПараметрыЗадания.ДанныеПроцесса.Получить();
		Для Каждого СтрокаУчастник Из ДанныеПроцесса.Участники Цикл
			Если ЗначениеЗаполнено(СтрокаУчастник.ВладелецРоли)Тогда
				СтрокаУчастник.Участник = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(СтрокаУчастник.ВладелецРоли,
					СтрокаУчастник.ОсновнойОбъектАдресации, СтрокаУчастник.ДополнительныйОбъектАдресации);
				СтрокаУчастник.Подписывающий = ?(ЗначениеЗаполнено(СтрокаУчастник.Подписывающий),
					СтрокаУчастник.Участник, СтрокаУчастник.Подписывающий);
			КонецЕсли;
		КонецЦикла;
		ПараметрыЗадания.ДанныеПроцесса = Новый ХранилищеЗначения(ДанныеПроцесса);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СозданоЗаданиеИлиПроцессСтартованОтложено(Процесс, Задание, СтрокиЛога, ИмяПроцесса, ДействиеПоПроцессу = Неопределено)
	
	НастройкаОтложеногоСтарта = РегистрыСведений.НастройкиОтложеногоСтартаПроцессов.ПолучитьСведенияОЗапускеПроцесса(
		Процесс);
	Если НастройкаОтложеногоСтарта = Неопределено Тогда
		ДобавитьЗаданиеСтартоватьПроцесс(Процесс, Задание);
		
		СтрокиЛога.Добавить(
			СтрШаблон(НСтр("ru='Создан процесс %1 и подзадание его старта.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				ИмяПроцесса));
		Возврат Истина;
	Иначе
		ПроцессОбъект = Процесс.ПолучитьОбъект();
		ПроцессОбъект.ОтложенныйСтарт();
		
		Если ДействиеПоПроцессу = Неопределено Тогда
			ДействиеПоПроцессу = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(Процесс);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДействиеПоПроцессу) Тогда
			РегистрыСведений.СостоянияДействий.УстановитьСостояние(ДействиеПоПроцессу, 
				Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск);
		КонецЕсли;
		
		СтрокиЛога.Добавить(
			СтрШаблон(НСтр("ru='Создан и стартован отложено процесс %1.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				ИмяПроцесса));
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

// Производит подготовку параметров задания к хранению (сериализация и упаковка в хранилище значения).
//
// Параметры:
//	Параметры - Произвольный - Параметры, которые необходимо подготовить к хранению.
//
// Возвращаемое значение:
//	ХранилищеЗначения - Подготовленные к хранению параметры.
//
Функция ПодготовитьПараметрыКХранению(Параметры)
	
	Возврат Новый ХранилищеЗначения(
				ОбщегоНазначенияДокументооборот.ЗначениеВСтрокуJSON(Параметры),
				Новый СжатиеДанных(9));
		
КонецФункции

// Производит подготовку параметров для выполнения задания (распаковка из хранилища значений и десериализация).
//
// Параметры:
//	Параметры - Произвольный - Параметры, которые необходимо подготовить к хранению.
//
// Возвращаемое значение:
//	Произвольный - Восстановленные и готовые к выполнению задания параметры.
//
Функция ПолучитьПараметры(Параметры)
	
	Если Не ТипЗнч(Параметры) = Тип("ХранилищеЗначения") Тогда
		Возврат Параметры;
	КонецЕсли;
	
	СодержимоеХранилища = Параметры.Получить();
	Если ТипЗнч(СодержимоеХранилища) = Тип("Строка") Тогда  
		Попытка
			Возврат ОбщегоНазначенияДокументооборот.ЗначениеИзСтрокиJSON(СодержимоеХранилища);
		Исключение
			Возврат СодержимоеХранилища;
		КонецПопытки;
	КонецЕсли;
	
	Возврат СодержимоеХранилища;
		
КонецФункции

Процедура СоздатьСлужебнуюЗадачуДляОзнакомления(ПроцессОбработки, Действие)
	
	ПроцессОбработкиОбъект = ПроцессОбработки.ПолучитьОбъект();
	ОбработчикСхемы = ПроцессОбработкиОбъект.ОбработчикСхемыПроцесса();
	ИмяЭлемента = РаботаСПроцессамиПоОбработкамОбъектов.ИмяЭлементаСхемыОбработкиПоДействию(Действие);
		
	ШаблонНаименования = НСтр("ru = 'Обработка действия ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, Действие);
	
	ЗадачаОбработкиЭлементаСхемы =
		БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
			НаименованиеЗадачи, ПроцессОбработки.Ссылка);
	ПроцессОбработкиОбъект.ДобавитьЗадачуОбработкиЭлемента(
		ИмяЭлемента, ЗадачаОбработкиЭлементаСхемы, ОбработчикСхемы);
		
	ПроцессОбработкиОбъект.ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);	 
				
КонецПроцедуры				

#Область ОбновлениеОбработкиДействияОбработкиОбъекта

// Выполняет задание обновления обработки объекта или действия обработки объекта.
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота - Задание, которое необходимо выполнить.
//
// Возвращаемое значение:
//	Структура Из КлючИЗначение - см. СтруктураРезультатаОбработкиЗаданияОчереди. 
//
Функция ОбработатьЗаданиеОбновитьОбработкуДействиеОбработкиОбъекта(Задание)
	    
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = СтруктураРезультатаОбработкиЗаданияОчереди();
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задание, "ПредметЗадания, ПараметрыВыполнения");
			
	ПараметрыЗадания = ПолучитьПараметры(РеквизитыЗадания.ПараметрыВыполнения);
	Если ТипЗнч(ПараметрыЗадания) <> Тип("Структура") Тогда
		РезультатВыполнения.ЗаданиеЗавершено = Истина;
		РезультатВыполнения.ЗаписьЛога =
			НСтр("ru = 'Некорректный формат параметров выполнения задания.'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ОлицетворяемыйПользовательПрежний = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ПараметрыЗадания.АвторИзменения);
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить(РеквизитыЗадания.ПредметЗадания.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", РеквизитыЗадания.ПредметЗадания);
		БлокировкаДанных.Заблокировать();
		
		ПредметЗадания = РеквизитыЗадания.ПредметЗадания.ПолучитьОбъект();
		
		ХэшСуммаОбъекта = КОДСервер.ХешСуммаMD5СериализованногоОбъекта(
			ПредметЗадания, , ПараметрыЗадания.ВерсияФормата);
		
		Если ХэшСуммаОбъекта <> ПараметрыЗадания.ХэшСуммаОбъекта Тогда
			РезультатВыполнения.ЗаданиеЗавершено = Истина;
			РезультатВыполнения.ЗаписьЛога =
				НСтр("ru = 'Состояние предмета задания не соответствует состоянию параметров выполнения. Возможно предмет задания был изменен.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			ЧтениеСообщение = КодПолучение.НовоеЧтениеСообщения();
			ЧтениеСообщение.ПространствоИмен = КОДСервер.ПространствоИменВерсииФормата(ПараметрыЗадания.ВерсияФормата);
	
			// Читаем серализованные методами КОД данные процесса
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ПараметрыЗадания.ОбъектJSON);
			ЧтениеJSON.Прочитать();
	
			ОбъектXDTO = Неопределено;
			Пока ЧтениеJSON.Прочитать() И ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
				И ЧтениеJSON.ТекущееЗначение = "object" Цикл
	
				ОбъектXDTO = ЧтениеСообщение.ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
				ЧтениеJSON.Прочитать();
				ЧтениеJSON.Прочитать();
	
			КонецЦикла;
	
			Если ОбъектXDTO = Неопределено Тогда
				РезультатВыполнения.ЗаданиеЗавершено = Истина;
				РезультатВыполнения.ЗаписьЛога = НСтр(
					"ru = 'Ошибка получения данных процесса из сообщения обмена'",
						ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			
			// Заполняем полученными даннными и записываем действие
			КодПолучение.ЗаполнитьОдноименныеРеквизитыСвойствамиXDTO(ПредметЗадания, ОбъектXDTO,
				ПараметрыЗадания.ВерсияФормата, ЧтениеСообщение);
			ПредметЗадания.ДополнительныеСвойства.Вставить("ЗаписьВОчередиЗаданий", Истина);
			
			Если ТипЗнч(ПредметЗадания.Ссылка) = Тип("СправочникСсылка.ОбработкиОбъектов")
				И ПараметрыЗадания.Свойство("ВыполняетсяПрерываниеОбработки") Тогда
				ПроцессОбработки = РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(
					ПредметЗадания.Ссылка);
				БизнесПроцессыИЗадачиВызовСервера.ПрерватьБизнесПроцесс(ПроцессОбработки,
					ПредметЗадания.ПричинаПрерывания);
				ПротоколированиеРаботыСотрудников.ЗаписатьПрерываниеБизнесПроцесса(ПроцессОбработки);
			ИначеЕсли ДействияКлиентСервер.ЭтоДействие(ПредметЗадания.Ссылка) 
				И ПараметрыЗадания.Свойство("ЗаписьДействияПриПомещенииВИсторию") Тогда
				ПредметЗадания.ДополнительныеСвойства.Вставить("ЗаписьДействияПриПомещенииВИсторию",
					ПараметрыЗадания.ЗаписьДействияПриПомещенииВИсторию);
			КонецЕсли;
			
			ПредметЗадания.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(ОлицетворяемыйПользовательПрежний);
	РезультатВыполнения.ЗаданиеЗавершено = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция АктуальностьЗаданияОбновитьОбработкуДействиеОбработкиОбъекта(Задание)

	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Возврат АктуальностьЗадания;
	
КонецФункции

Функция АктуальностьЗаданияПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(Задание)

	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Возврат АктуальностьЗадания;
	
КонецФункции

Функция АктуальностьЗаданияОбновитьДействиеОзнакомленияЦеликомЕслиНужно(Задание)

	АктуальностьЗадания = Новый Структура("Актуально, Пояснение", Истина, "");
	
	Возврат АктуальностьЗадания;
	
КонецФункции

// Возвращает наличие невыполненного хотя бы одного задания в рамках обработки объектов.
//
// Параметры:
//  ОбработкаОбъекта - СправочникСсылка.ОбработкиОбъектов
//  ТипыЗаданий - Массив из ПеречислениеСсылка.ТипыЗаданий, Неопределено -
//  ТипыЗаданийИсключения - Массив из ПеречислениеСсылка.ТипыЗаданий, Неопределено -
//  БезПроцессовИЗадач - Булево - Если истина, то проверяем наличие невыполненных заданий только по обработке и действиям,
//  без бизнес-процессов и задач
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьНеВыполненноеЗаданиеПоОбработкеОбъектов(ОбработкаОбъекта, ТипыЗаданий = Неопределено,
		ТипыЗаданийИсключения = Неопределено, БезПроцессовИЗадач = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектыОбработкиДляПроверки = Новый Массив;
	ВсеПроцессы = Новый Массив;
	
	ОбъектыОбработкиДляПроверки.Добавить(ОбработкаОбъекта);
	
	ДействияОбработки = РегистрыСведений.ДействияОбработкиОбъектов.ДействияОбработки(ОбработкаОбъекта);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыОбработкиДляПроверки, ДействияОбработки);
	
	Если БезПроцессовИЗадач Тогда
		Возврат Справочники.ОчередьЗаданийДокументооборота.ЕстьНеВыполненноеЗаданияПоПредметам(
			ОбъектыОбработкиДляПроверки, ТипыЗаданий, ТипыЗаданийИсключения);
	КонецЕсли;
	
	ПроцессОбработки = 
		РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(ОбработкаОбъекта);
	Если ЗначениеЗаполнено(ПроцессОбработки) Тогда
		ОбъектыОбработкиДляПроверки.Добавить(ПроцессОбработки);
		ВсеПроцессы.Добавить(ПроцессОбработки);
	КонецЕсли;
	
	ПроцессыПоТипамДействий = РегистрыСведений.ПроцессыДействий.ПроцессыДействий(
		ДействияОбработки, Истина);
	ПроцессыДействий =  Новый Массив;
	Для Каждого КлючЗначение Из ПроцессыПоТипамДействий Цикл
		Для Каждого ПроцессДействия Из КлючЗначение.Значение Цикл
			ПроцессыДействий.Добавить(ПроцессДействия);
		КонецЦикла;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыОбработкиДляПроверки, ПроцессыДействий);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеПроцессы, ПроцессыДействий);
	
	Если ВсеПроцессы.Количество() > 0 Тогда
		ЗадачиПроцессов = РаботаСБизнесПроцессами.ВсеЗадачиПроцессов(ВсеПроцессы);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыОбработкиДляПроверки, ЗадачиПроцессов);
	КонецЕсли;
	
	Возврат Справочники.ОчередьЗаданийДокументооборота.ЕстьНеВыполненноеЗаданияПоПредметам(
		ОбъектыОбработкиДляПроверки, ТипыЗаданий, ТипыЗаданийИсключения);
	
КонецФункции

// Проверяет, что есть невыполненные задания по действиям обработки.
// 
// Параметры:
//  ОбработкаОбъекта - СправочникСсылка.ОбработкиОбъектов - Обработка документа
// 
// Возвращаемое значение:
//  Булево -  Есть невыполненные задания по действиям обработки
//
Функция ЕстьНевыполненныеЗаданияПоДействиямОбработки(ОбработкаОбъекта)
	
	Если Не ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДействияОбработки = РегистрыСведений.ДействияОбработкиОбъектов.ДействияОбработки(ОбработкаОбъекта);
	
	ТипыЗаданий = Новый Массив;
	ТипыЗаданий.Добавить(Перечисления.ТипыЗаданий.ОбновитьДействиеОбработки);
	
	Возврат Справочники.ОчередьЗаданийДокументооборота.ЕстьНеВыполненноеЗаданияПоПредметам(ДействияОбработки,
		ТипыЗаданий);
	
КонецФункции

#КонецОбласти

#Область ЗаданияПоМаршрутизацииПроцессов

// Проверяет, что по процессу обработки документа выполнена маршртизация.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка - 
// 
// Возвращаемое значение:
//  Булево -  Есть невыполненные задания по маршрутизации процесса обработки
//
Функция ЕстьНевыполненныеЗаданияПоМаршрутизацииПроцессаОбработки(Процесс)
	
	ДействиеПроцесса = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(Процесс);
	Если Не ЗначениеЗаполнено(ДействиеПроцесса) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(ДействиеПроцесса);
	Если Не ЗначениеЗаполнено(ОбработкаДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроцессОбработки = РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(ОбработкаДействия);
	Если Не ЗначениеЗаполнено(ПроцессОбработки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредметыЗадания = Новый Массив;
	ПредметыЗадания.Добавить(ПроцессОбработки);
	
	ВедущиеЗадачиПроцесса = РаботаСБизнесПроцессами.ВсеЗадачиИсполнителейПроцесса(ПроцессОбработки);
	Если ВедущиеЗадачиПроцесса.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПредметыЗадания, ВедущиеЗадачиПроцесса);
	
	ТипыЗаданий = Новый Массив;
	ТипыЗаданий.Добавить(Перечисления.ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи);
	ТипыЗаданий.Добавить(Перечисления.ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения);
	
	Возврат Справочники.ОчередьЗаданийДокументооборота.ЕстьНеВыполненноеЗаданияПоПредметам(ВедущиеЗадачиПроцесса,
		ТипыЗаданий);
	
КонецФункции

#КонецОбласти

#КонецОбласти