////////////////////////////////////////////////////////////////////////////////
// Сотрудники (события, клиент)
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает всех сотрудников текущего сотрудника.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Текущий сотрудник.
//
Функция ВсеСотрудникиТекущегоПользователя() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	
	Возврат ПараметрыРаботыКлиента["ВсеСотрудникиТекущегоПользователя"];
	
КонецФункции

// Проверяет, является ли указанный сотрудник, сотрудником текущего пользователя.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  Булево - Указанный сотрудник является сотрудником текущего пользователя.
//
Функция ЭтоСотрудникТекущегоПользователя(Сотрудник) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсеСотрудникиТекущегоПользователя = ВсеСотрудникиТекущегоПользователя();
	ЭтоСотрудникТекущегоПользователя =
		ВсеСотрудникиТекущегоПользователя.Найти(Сотрудник) <> Неопределено;
	
	Возврат ЭтоСотрудникТекущегоПользователя;
	
КонецФункции

// Возвращает текущего сотрудника.
// 
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники - Текущий сотрудник.
//
Функция ОсновнойСотрудник() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	
	Возврат ПараметрыРаботыКлиента["ОсновнойСотрудник"];
	
КонецФункции

// Открывает адресную книгу для выбора сотрудника и, если указано, их контейнеров и автоподстановок.
//
// Параметры:
//   ЭлементФормы - ЭлементФормы - элемент, оповещаемый о выборе.
//   ВыбранноеЗначение - СправочникСсылка.Сотрудники - ранее выбранное значение.
//   ЗаголовокФормы - Строка - необязательный, заголовок формы (по умолчанию - "Выбор пользователя").
//   ДополнениеТипа - ОписаниеТипов - необязательный, дополнение типа выбираемых объектов (по умолчанию - только
//     пользователи. Для автоподстановок указывается тип "Строка".
//   ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура ВыбратьСотрудникаИзАдреснойКниги(ЭлементФормы, ВыбранноеЗначение,
	ЗаголовокФормы = Неопределено, Знач ДополнениеТипа = Неопределено, ТипОбъекта = Неопределено) Экспорт
	
	Если ДополнениеТипа = Неопределено Тогда
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	
	// Роли.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.РолиИсполнителей"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.ПолныеРоли")) Тогда
		
		ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	КонецЕсли;
	
	// Группы и подразделения
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.РабочиеГруппы"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.СтруктураПредприятия"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.ПодразделенияКонтейнеры")) Тогда
		
		ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	КонецЕсли;
	
	// Автоподстановки документов.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.АвтоподстановкиДляОбъектов")) Тогда
		Если ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия") Тогда
			ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоДокументам", Истина);
		ИначеЕсли ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Мероприятия") Тогда
			ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоМероприятиям", Истина);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип объекта %1.'"),
				ТипОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	// Автоподстановки процессов.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")) Тогда
		ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоПроцессам", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранноеЗначение);
	КонецЕсли;
	
	Если ЗаголовокФормы = Неопределено Тогда
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор сотрудника'"));
	Иначе
		ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	КонецЕсли;
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭлементФормы, Неопределено);
	
КонецПроцедуры

// Обеспечивает преобразование выбранных подразделений в подразделения-контейнеры,
// а ролей в полные роли.
// 
// Параметры:
//  Элемент - ПолеФормы.
//  ВыбранноеЗначение - Произвольный.
//  СтандартнаяОбработка - Булево.
//
Процедура ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		// Нужно уточнить способ включения подчиненных.
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Подразделение", ВыбранноеЗначение);
		
		ОткрытьФорму("Справочник.ПодразделенияКонтейнеры.Форма.ВыборПодразделенияКонтейнера", 
			ПараметрыОткрытияФормы, 
			Элемент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Проекты") Тогда
		
		// Нужно уточнить способ включения участников.
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Проект", ВыбранноеЗначение);
		
		ОткрытьФорму("Справочник.ПроектыКонтейнеры.Форма.ВыборПроектаКонтейнера", 
			ПараметрыОткрытияФормы, 
			Элемент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		// Нужно уточнить объекты адресации.
		// Если роль не используется с объектами адресации, форма выбора
		// объектов адресации закроется с нужными параметрами автоматически.
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("РольИсполнителя", ВыбранноеЗначение);
		
		ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", 
			ПараметрыОткрытияФормы, 
			Элемент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		// Разбор результата уточнения подразделений, проектов и ролей.
		Если ВыбранноеЗначение.Свойство("ПодразделениеКонтейнер") Тогда
			ВыбранноеЗначение = ВыбранноеЗначение.ПодразделениеКонтейнер;
		ИначеЕсли ВыбранноеЗначение.Свойство("ПроектКонтейнер") Тогда
			ВыбранноеЗначение = ВыбранноеЗначение.ПроектКонтейнер;
		ИначеЕсли ВыбранноеЗначение.Свойство("РольИсполнителяПолная") Тогда
			ВыбранноеЗначение = ВыбранноеЗначение.РольИсполнителяПолная;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора сотрудников
//
// Параметры:
//  Объект - ФормаКлиентскогоПриложения, ДанныеФормыЭлементКоллекции, ДанныеФормыСтруктура - 
//      Если реквизит формы, то ФормаКлиентскогоПриложения 
//      Если реквизит объекта, то ДанныеФормыСтруктура
//      Если реквизит ТЧ, то ДанныеФормыЭлементКоллекции (ТекущиеДанные)
//  Реквизит - Строка - Имя реквизита. Новое начение устанавливается в Объект[Реквизит]
//  ВыбранноеЗначение - СправочникСсылка.Сотрудники
//  СтандартнаяОбработка - Булево
//
Процедура СотрудникОбработкаВыбора(Объект, Реквизит, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Действует") = Ложь Тогда
		
		СтандартнаяОбработка = Ложь;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Объект", Объект);
		ДопПараметры.Вставить("Реквизит", Реквизит);
		ДопПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		
		ОбработчикОтвета = Новый ОписаниеОповещения("ОбработатьОтветНедействующийСотрудник", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = НСтр("ru='Вы выбрали недействительного сотрудника. Продолжить?'");
		
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОбработчикОтвета,
			ТекстВопроса,,, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьОтветНедействующийСотрудник(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДопПараметры.Объект[ДопПараметры.Реквизит] = ДопПараметры.ВыбранноеЗначение;
		Возврат;
	КонецЕсли;
	
	ЕстьИсторияВыбора = ИсторияВыбораВызовСервера.УПользователяЕстьИсторияВыбора();
	//Если история уже очищена, то не предлагаем очищать ее
	Если Не ЕстьИсторияВыбора Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиБольшеНеПоказывать",
		"ПоказыватьПредложениеОчиститьИсторию", Истина) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбработчикОтветаОчиститьИсториюВыбора = Новый ОписаниеОповещения("ОбработатьОтветОчиститьИсториюВыбора", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru='Вы хотите очистить историю выбора?
	|Изменения будут видны после того, как Вы перезапустите программу.
	|Также очистить историю выбора можно в Персональных настройках - раздел ""Другие настройки""'");
	
	ПараметрыВопросаПользователю = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопросаПользователю.Заголовок =  НСтр("ru = 'Очистка истории выбора'");
	ПараметрыВопросаПользователю.КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОбработчикОтветаОчиститьИсториюВыбора,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет,
		ПараметрыВопросаПользователю);
	
КонецПроцедуры

Процедура ОбработатьОтветОчиститьИсториюВыбора(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	БольшеНеПоказывать = Ответ.БольшеНеЗадаватьЭтотВопрос;
	
	Если БольшеНеПоказывать Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиБольшеНеПоказывать",
			"ПоказыватьПредложениеОчиститьИсторию", Ложь);
	КонецЕсли;
	
	Если Ответ.Значение = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияВыбораВызовСервера.ОчиститьИсториюВыбораПользователя();
	ПоказатьОповещениеПользователя(НСтр("ru = 'История выбора будет очищена'"));
	
КонецПроцедуры

#КонецОбласти
