////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с уведомлениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует структуру данных уведомления.
// 
// Возвращаемое значение:
//  Структура - Данные уведомления:
// * ТемаУведомления - Строка - Тема уведомления.
// * ТекстУведомления - Строка - Текст уведомления.
// * Файлы - Массив Из Структура - Файлы уведомления.
// * ТекстОповещения - Строка - Текст оповещения.
// * ПояснениеОповещения - Строка - Пояснение оповещения.
// * Расшифровывать - Булево - Расшифровывать уведомление.
//
Функция ДанныеУведомления() Экспорт
	
	Ключи = "ТемаУведомления, ТекстУведомления, Файлы, ТекстОповещения, ПояснениеОповещения, Расшифровывать";
	ДанныеУведомления = Новый Структура(Ключи);
	
	Возврат ДанныеУведомления;

КонецФункции

// Формирует данные уведомления событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  см. ДанныеУведомления
//
Функция ДанныеУведомленияПоОбъектам(ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления,
	СпособУведомления, ДополнительныеОписания) Экспорт

	ДанныеУведомления = ДанныеУведомления();

	ДанныеУведомления.ТемаУведомления = СформироватьТемуУведомленияПоОбъектамУведомления(
		ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
		ДополнительныеОписания);

	ДанныеУведомления.ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомления(
		ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
		ДополнительныеОписания);

	Попытка

		ДанныеУведомления.Файлы = СформироватьФайлыУведомленияПоОбъектамУведомления(
			ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
			ДополнительныеОписания);

	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
		КомментарийЖурналаРегистрации = СтрШаблон(
			"%1:
			|%2", НСтр("ru = 'Не удалось сформировать файлы для уведомления'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки);

		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , КомментарийЖурналаРегистрации);

	КонецПопытки;

	ТекстИПояснениеОповещения = СформироватьТекстИПояснениеОповещения(
		ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления, ДополнительныеОписания,
		ДанныеУведомления.ТемаУведомления, ДанныеУведомления.ТекстУведомления);
	ДанныеУведомления.ТекстОповещения = ТекстИПояснениеОповещения.ТекстОповещения;
	ДанныеУведомления.ПояснениеОповещения = ТекстИПояснениеОповещения.ПояснениеОповещения;

	Возврат ДанныеУведомления;

КонецФункции

// Формирует данные уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Структура - Данные уведомления.
//   * ТемаУведомления - Тема уведомления.
//   * ТекстУведомления - Текст уведомления.
//   * Файлы - Файлы уведомления.
//
Функция ДанныеУведомленияПоСобытию(ОбъектПодписки, ВидСобытия, ОбъектУведомления, ПолучательУведомления,
	СпособУведомления, ДополнительноеОписание) Экспорт

	ДанныеУведомления = ДанныеУведомления();

	ДанныеУведомления.ТемаУведомления = СформироватьТемуУведомленияПоСобытию(
		ОбъектПодписки, ВидСобытия, ОбъектУведомления, ПолучательУведомления, СпособУведомления, ДополнительноеОписание);

	ДанныеУведомления.ТекстУведомления = СформироватьТекстУведомленияПоСобытию(
		ОбъектПодписки, ВидСобытия, ОбъектУведомления, ПолучательУведомления, СпособУведомления, ДополнительноеОписание);
		
	ДанныеУведомления.Расшифровывать = ПолучитьРасшифровыватьПоСобытию(
		ОбъектПодписки, ВидСобытия, ОбъектУведомления, ПолучательУведомления, СпособУведомления, ДополнительноеОписание);

	Попытка

		ДанныеУведомления.Файлы = СформироватьФайлыУведомленияПоСобытию(
			ОбъектПодписки, ВидСобытия, ОбъектУведомления, ПолучательУведомления, СпособУведомления,
			ДополнительноеОписание);

	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
		КомментарийЖурналаРегистрации = СтрШаблон(
			"%1:
			|%2", НСтр("ru = 'Не удалось сформировать файлы для уведомления'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки);

		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , КомментарийЖурналаРегистрации);

	КонецПопытки;

	ОбъектыУведомления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУведомления);
	ДополнительныеОписания = Новый Соответствие;
	ДополнительныеОписания[ОбъектУведомления] = ДополнительноеОписание;
	ТекстИПояснениеОповещения = СформироватьТекстИПояснениеОповещения(
		ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления, ДополнительныеОписания,
		ДанныеУведомления.ТемаУведомления, ДанныеУведомления.ТекстУведомления);
	ДанныеУведомления.ТекстОповещения = ТекстИПояснениеОповещения.ТекстОповещения;
	ДанныеУведомления.ПояснениеОповещения = ТекстИПояснениеОповещения.ПояснениеОповещения;

	Возврат ДанныеУведомления;

КонецФункции

// Добавить представление реквизита к строке.
//
// Параметры:
//  Строка - Строка - Обрабатываемая строка.
//  ИмяРеквизита - Строка - Имя реквизита.
//  Значение - Строка - Значение реквизита.
//  ДополнительноеЗначение - Строка - Дополнительное значение реквизита.
//
Процедура ДобавитьРеквизитКСтроке(Строка, ИмяРеквизита, Значение, ДополнительноеЗначение = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;

	ПредставлениеРеквизита = Новый Массив;
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		ПредставлениеРеквизита.Добавить(СтрШаблон("<b>%1:</b>", ИмяРеквизита));
	КонецЕсли;
	ПредставлениеРеквизита.Добавить(Значение);
	Если ЗначениеЗаполнено(ДополнительноеЗначение) Тогда
		ПредставлениеРеквизита.Добавить(СтрШаблон("(%1)", ДополнительноеЗначение));
	КонецЕсли;
	ПредставлениеРеквизита = СтрСоединить(ПредставлениеРеквизита, " ");

	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		Строка, Символы.ПС, ПредставлениеРеквизита);

КонецПроцедуры

// Добавляет строку табличной части с уведомлением в массив уведомлений в специальную структуру.
Процедура ДобавитьУведомлениеВМассив(МассивУведомлений, СтрокаУведомления) Экспорт

	Уведомление = Новый Структура;
	Уведомление.Вставить("Объект", СтрокаУведомления.Объект);
	Уведомление.Вставить("Пользователь", СтрокаУведомления.Пользователь);
	Уведомление.Вставить("СпособУведомления", СтрокаУведомления.СпособУведомления);
	Уведомление.Вставить("ВидСобытия", СтрокаУведомления.ВидСобытия);
	Уведомление.Вставить("ОбъектПодписки", СтрокаУведомления.ОбъектПодписки);

	МассивУведомлений.Добавить(Уведомление);

КонецПроцедуры

// Возвращает дополнительные виды событий по виду события.
//
// Параметры:
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//
// Возвращаемое значение:
//  Массив - Дополнительные виды событий.
//
Функция ДополнительныеВидыСобытий(ВидСобытия) Экспорт

	ДополнительныеВидыСобытий = Новый Массив;

	Для Каждого Уведомление Из ДоступныеУведомления() Цикл
		Если Уведомление.ОсновноеСобытие = ВидСобытия Тогда
			ДополнительныеВидыСобытий.Добавить(Уведомление.ВидСобытия);
		КонецЕсли;
	КонецЦикла;

	Возврат ДополнительныеВидыСобытий;

КонецФункции

// Возвращает таблицу доступных уведомлений с учетом функциональных опций.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Доступные уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений
//                 - Вид события.
//   * ОсновноеСобытие - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений
//                 - Основное событие.
//   * Представление - Строка - Текстовое представление уведомления.
//   * ДоступнаПодписка - Булево - Доступность подписки на уведомление.
//   * ДоступнаЧастота - Булево - Доступность настройки частоты уведомления.
//   * ДоступенСрок - Булево - Доступность настройки срока уведомления.
//   * ДополнительныеНастройки - Массив - Массив структур дополнительных настроек.
//
Функция ДоступныеУведомления() Экспорт

	ДоступныеУведомления = Новый ТаблицаЗначений;
	ДоступныеУведомления.Колонки.Добавить("ВидСобытия",
		Новый ОписаниеТипов("СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений"));
	ДоступныеУведомления.Колонки.Добавить("ОсновноеСобытие",
		Новый ОписаниеТипов("СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений"));
	ДоступныеУведомления.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка"));
	ДоступныеУведомления.Колонки.Добавить("ДоступнаПодписка",
		Новый ОписаниеТипов("Булево"));
	ДоступныеУведомления.Колонки.Добавить("ДоступнаЧастота",
		Новый ОписаниеТипов("Булево"));
	ДоступныеУведомления.Колонки.Добавить("ДоступенСрок",
		Новый ОписаниеТипов("Булево"));
	ДоступныеУведомления.Колонки.Добавить("ДополнительныеНастройки",
		Новый ОписаниеТипов("Массив"));
	
	СтруктураДополнительнойНастройки = Новый ФиксированнаяСтруктура("Настройка, Представление");

	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		
		// Ход выполнения процесса
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачиПроцесса;
		СтрокаУведомления.Представление = НСтр("ru = 'Процессы: ход выполнения'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;

	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗадачи") Тогда
		
		// Выполнение моей задачи
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ВыполнениеМоейЗадачи;
		СтрокаУведомления.ОсновноеСобытие = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: выполнение моей задачи'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Новая задача.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.НоваяЗадача;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: новая задача'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Отмена задачи.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ОткладываниеЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: отложена'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Отмена задачи.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: отмена'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;

		// Сводка по просроченным задачам от меня.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора;
		СтрокаУведомления.ОсновноеСобытие = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: просрочена задача от меня'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Сводка по задачам.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.СводкаПоЗадачам;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: сводка'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Передача от исполнителя.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ПередачаЗадачОтИсполнителя;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: передача от исполнителя'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;

		// Снятие задач исполнителя.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СнятиеЗадачИсполнителя;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: снятие задач исполнителя'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;

		// Отмена выполнения задачи.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: отмена выполнения'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Изменение важных реквизитов задачи.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: изменение'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	// Отмена задачи.
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаОбработки;
	СтрокаУведомления.Представление = НСтр("ru = 'Обработки: остановка'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	// Назначение ответственным за документ.
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного;
	СтрокаУведомления.Представление = НСтр("ru = 'Документы: назначение ответственным'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	
	// Окончание срока действия документов
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента;
	СтрокаУведомления.Представление = НСтр("ru = 'Документы: окончание срока действия'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	// Приближение окончания срока действия документов
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента;
	СтрокаУведомления.Представление = НСтр("ru = 'Документы: приближение окончания срока действия'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Истина;
	СтрокаУведомления.ДоступенСрок = Истина;

	Если ПолучитьФункциональнуюОпцию("УчетСамочувствияСотрудников") Тогда
		
		// Напоминание о замере температуры.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.НапоминаниеОЗамереТемпературы;
		СтрокаУведомления.Представление = НСтр("ru = 'Замеры температуры: напоминание о замере'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		Если УчетСамочувствияСотрудниковСервер.ЭтоОтветственныйЗаУчетСамочувствияСотрудников(
			Сотрудники.ОсновнойСотрудник())
			
			Или Пользователи.ЭтоПолноправныйПользователь() Тогда
			
			// Появление замера с повышенной температурой.
			СтрокаУведомления = ДоступныеУведомления.Добавить();
			СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПоявлениеЗамераСПовышеннойТемпературой;
			СтрокаУведомления.Представление = НСтр("ru = 'Замеры температуры: повышенная температура'");
			СтрокаУведомления.ДоступнаПодписка = Истина;
			СтрокаУведомления.ДоступнаЧастота = Ложь;
			СтрокаУведомления.ДоступенСрок = Ложь;
			
			// Отчет о замерах температуры.
			СтрокаУведомления = ДоступныеУведомления.Добавить();
			СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ОтчетОЗамерахТемпературы;
			СтрокаУведомления.Представление = НСтр("ru = 'Замеры температуры: отчет'");
			СтрокаУведомления.ДоступнаПодписка = Истина;
			СтрокаУведомления.ДоступнаЧастота = Ложь;
			СтрокаУведомления.ДоступенСрок = Ложь;

		КонецЕсли;

	КонецЕсли;

	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ОтсутствуетОригинал;
	СтрокаУведомления.Представление = НСтр("ru = 'Документы: отсутствует оригинал'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	// Заявки на оплату.
	ЗаявкиНаОплатуСервер.ПриПолученииДоступныхУведомлений(ДоступныеУведомления);
	
	// Учет времени.
	УчетВремени.ПриПолученииДоступныхУведомлений(ДоступныеУведомления);

	// Мероприятия.
	УправлениеМероприятиями.ПриПолученииДоступныхУведомлений(ДоступныеУведомления);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов") Тогда
		// Автозаполнение моих файлов
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.АвтозаполнениеМоихФайлов;
		СтрокаУведомления.Представление = НСтр("ru = 'Файлы: автозаполнение моих файлов'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
	КонецЕсли;
	
	// Создание замещающего или помощника.
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиСоздание;
	СтрокаУведомления.Представление = НСтр("ru='Замещающие и помощники: создание нового'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	// Изменение замещающего или помощника.
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиИзменение;
	СтрокаУведомления.Представление = НСтр("ru='Замещающие и помощники: изменение настроек'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИнтеграцияС1САрхивом") Тогда
		// Документы приняты в 1С:Архив.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ПринятиеДокументовВАрхив;
		СтрокаУведомления.Представление = НСтр("ru = 'Документы приняты в 1С:Архив'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Ошибка в документах, переданных в 1С:Архив.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив;
		СтрокаУведомления.Представление = НСтр("ru = 'Ошибка в документах, переданных в 1С:Архив'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;		
	КонецЕсли;

	РаботаСУведомлениямиПереопределяемый.ДоступныеУведомления(ДоступныеУведомления);

	Для Каждого СтрокаУведомления Из ДоступныеУведомления Цикл
		Если СтрокаУведомления.ОсновноеСобытие = Неопределено Тогда
			СтрокаУведомления.ОсновноеСобытие = СтрокаУведомления.ВидСобытия;
		КонецЕсли;
	КонецЦикла;

	ДоступныеУведомления.Сортировать("Представление");

	Возврат ДоступныеУведомления;

КонецФункции

// Возвращает код языка указанного пользователя.
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь, язык которого определяется.
//
// Возвращаемое значение:
//   Строка - код языка пользователя, если указан, или пустая строка.
//
Функция КодЯзыка(Пользователь) Экспорт

	КодЯзыка = "";
	Если ЗначениеЗаполнено(Пользователь) Тогда
		КодЯзыка = ЛокализацияКонфигурации.КодЯзыкаПользователя(Пользователь);
	КонецЕсли;

	Возврат КодЯзыка;

КонецФункции

// Обрабатывает регламентное задание контроля приближения окончания срока действия
Процедура КонтрольОкончанияСрокаДействия() Экспорт

	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.КонтрольОкончанияСрокаДействия, Отказ);

	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Уведомление о подходе срока действия документа
	АктивныеДокументыСПодписчиками = ВыбратьАктивныеДокументыСПодписчиками(ТекущаяДата);

	ТаблицаПодписчики = АктивныеДокументыСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчики = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОДокументах(МассивПодписчики);

	Для Каждого СтрокаАктивныеДокументыСПодписчиками Из АктивныеДокументыСПодписчиками Цикл

		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныеДокументыСПодписчиками.Подписчик, "Пользователь");
		СрокОкончания = ПолучитьОсталосьДней(СтрокаАктивныеДокументыСПодписчиками.ДатаОкончанияДействия, ТекущаяДата);

		Если СрокОкончания > НастройкаПодписчика.СрокУведомления Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаАктивныеДокументыСПодписчиками.ДатаОбработки <> Дата(1, 1, 1) Тогда

			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаУведомления) Тогда

				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(
					СтрокаАктивныеДокументыСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60 * 60 * 24);

				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаУведомления Тогда

					Продолжить;

				КонецЕсли;

			Иначе

				Продолжить;

			КонецЕсли;

		КонецЕсли;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаАктивныеДокументыСПодписчиками.Подписчик, Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
			СтрокаАктивныеДокументыСПодписчиками.Документ, СтрокаАктивныеДокументыСПодписчиками.ОбъектПодписки);

	КонецЦикла;
	
	// Уведомление о завершившихся документах
	НеобработанныеЗавершившиесяДокументыСПодписчиками = ВыбратьЗавершившиесяДокументыСПодписчиками(ТекущаяДата);

	Для Каждого СтрокаЗавершившийсяДокументСПодписчиками Из НеобработанныеЗавершившиесяДокументыСПодписчиками Цикл

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаЗавершившийсяДокументСПодписчиками.Подписчик,
			Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента,
			СтрокаЗавершившийсяДокументСПодписчиками.Документ,
			СтрокаЗавершившийсяДокументСПодписчиками.ОбъектПодписки,
			"",
			СтрокаЗавершившийсяДокументСПодписчиками.ДатаОкончанияДействия);

	КонецЦикла;

КонецПроцедуры

// Обработчик регламентного задания "Контроль самочувствия сотрудников".
Функция КонтрольСамочувствияСотрудников() Экспорт
	
	// Уведомление "Напоминание о замере температуры".
	СформированыНапоминанияОЗамереТемпературы = Ложь;
	Попытка

		СформированыНапоминанияОЗамереТемпературы = СформироватьНапоминанияОЗамереТемпературы();

	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
		КомментарийЖурналаРегистрации = СтрШаблон(
			"%1:
			|%2", НСтр("ru = 'Не удалось сформировать напоминания о замере температуры'"), ПодробноеПредставлениеОшибки);

		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СамочувствиеСотрудника, ,
			КомментарийЖурналаРегистрации);

	КонецПопытки;
	
	// Уведомление "Появление замера с повышенной температурой".
	СформированыУведомленияОПоявленииЗамеровСПовышеннойТемпературой = Ложь;
	Попытка

		СформированыУведомленияОПоявленииЗамеровСПовышеннойТемпературой = СформироватьУведомленияОПоявленииЗамеровСПовышеннойТемпературой();

	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
		КомментарийЖурналаРегистрации = СтрШаблон(
			"%1:
			|%2", НСтр("ru = 'Не удалось сформировать уведомления о появлении замеров с повышенной температурой'"),
			ПодробноеПредставлениеОшибки);

		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СамочувствиеСотрудника, ,
			КомментарийЖурналаРегистрации);

	КонецПопытки;
	
	// Уведомление "Отчет о замерах температуры".
	СформированыОтчетыОЗамерахТемпературы = Ложь;
	Попытка

		СформированыОтчетыОЗамерахТемпературы = СформироватьОтчетыОЗамерахТемпературы();

	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
		КомментарийЖурналаРегистрации = СтрШаблон(
			"%1:
			|%2", НСтр("ru = 'Не удалось сформировать отчеты о замерах температуры'"), ПодробноеПредставлениеОшибки);

		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СамочувствиеСотрудника, ,
			КомментарийЖурналаРегистрации);

	КонецПопытки;
	
	// Оперативная отправка уведомлений.
	Попытка

		УведомленияСформированы = СформированыНапоминанияОЗамереТемпературы Или СформированыУведомленияОПоявленииЗамеровСПовышеннойТемпературой
			Или СформированыОтчетыОЗамерахТемпературы;
		Если УведомленияСформированы Тогда
			ОперативноОтправитьУведомления();
		КонецЕсли;

	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
		КомментарийЖурналаРегистрации = СтрШаблон(
			"%1:
			|%2", НСтр("ru = 'Не удалось оперативно отправить уведомления'"), ПодробноеПредставлениеОшибки);

		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СамочувствиеСотрудника, ,
			КомментарийЖурналаРегистрации);

	КонецПопытки;

КонецФункции

// Обрабатывает регламентное задание контроля срока задач
Процедура КонтрольСрокаЗадача() Экспорт

	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.КонтрольСрокаЗадач, Отказ);

	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	СформироватьСводкиЗадач();
	СформироватьСводкиПросроченныхЗадачОтАвторов();

КонецПроцедуры

// Обрабатывает регламентное задание "Контроль срока контрольных точек".
Процедура КонтрольСрокаКонтрольныхТочек() Экспорт

	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.КонтрольСрокаКонтрольныхТочек, Отказ);

	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Уведомление о подходе сроков контрольных точек.
	АктивныеКонтрольныеТочкиСПодписчиками = ВыбратьАктивныеКонтрольныеТочкиСПодписчиками(ТекущаяДата);

	ТаблицаПодписчики = АктивныеКонтрольныеТочкиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтрольныхТочках(МассивПодписчиков);

	Для Каждого СтрокаАктивныеКонтрольныеТочкиСПодписчиками Из АктивныеКонтрольныеТочкиСПодписчиками Цикл

		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныеКонтрольныеТочкиСПодписчиками.Подписчик,
			"Пользователь");
		СрокЗадачи = ПолучитьОсталосьДней(СтрокаАктивныеКонтрольныеТочкиСПодписчиками.ПлановыйСрок, ТекущаяДата,
			СтрокаАктивныеКонтрольныеТочкиСПодписчиками.Подписчик);

		Если СрокЗадачи > НастройкаПодписчика.СрокПодошелСрокКонтрольнойТочки Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаАктивныеКонтрольныеТочкиСПодписчиками.ДатаОбработки <> Дата(1, 1, 1) Тогда

			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПодошелСрокКонтрольнойТочки) Тогда

				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(
					СтрокаАктивныеКонтрольныеТочкиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60 * 60 * 24);

				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПодошелСрокКонтрольнойТочки Тогда

					Продолжить;

				КонецЕсли;

			Иначе

				Продолжить;

			КонецЕсли;

		КонецЕсли;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаАктивныеКонтрольныеТочкиСПодписчиками.Подписчик,
			Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки,
			СтрокаАктивныеКонтрольныеТочкиСПодписчиками.КонтрольнаяТочка,
			СтрокаАктивныеКонтрольныеТочкиСПодписчиками.ОбъектПодписки);

	КонецЦикла;
	
	// Уведомление о просроченных контрольных точках.
	ПросроченныеКонтрольныеТочкиСПодписчиками = ВыбратьПросроченныеКонтрольныеТочкиСПодписчиками(ТекущаяДата);

	ТаблицаПодписчики = ПросроченныеКонтрольныеТочкиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтрольныхТочках(МассивПодписчиков);

	Для Каждого СтрокаПросроченныеКонтрольныеТочкиСПодписчиками Из ПросроченныеКонтрольныеТочкиСПодписчиками Цикл

		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.Подписчик,
			"Пользователь");

		Если СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.ДатаОбработки <> Дата(1, 1, 1) Тогда

			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПросроченаКонтрольнаяТочка) Тогда

				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(
					СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60 * 60 * 24);

				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПросроченаКонтрольнаяТочка Тогда

					Продолжить;

				КонецЕсли;

			Иначе

				Продолжить;

			КонецЕсли;

		КонецЕсли;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.Подписчик,
			Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка,
			СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.КонтрольнаяТочка,
			СтрокаПросроченныеКонтрольныеТочкиСПодписчиками.ОбъектПодписки);

	КонецЦикла;
	
	// Уведомление о просроченных оценках контрольных точек.
	ВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками = ВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками(
		ТекущаяДата);

	ТаблицаПодписчики = ВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтрольныхТочках(МассивПодписчиков);

	Для Каждого СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками Из ВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками Цикл

		НастройкаПодписчика = НастройкиПодписчиков.Найти(
			СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.Подписчик, "Пользователь");

		Если СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.ДатаОбработки <> Дата(1, 1, 1) Тогда

			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПросроченаОценкаКонтрольнойТочки) Тогда

				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(
					СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60 * 60 * 24);

				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПросроченаОценкаКонтрольнойТочки Тогда

					Продолжить;

				КонецЕсли;

			Иначе

				Продолжить;

			КонецЕсли;

		КонецЕсли;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.Подписчик,
			Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки,
			СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.КонтрольнаяТочка,
			СтрокаВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками.ОбъектПодписки);

	КонецЦикла;

КонецПроцедуры

// Обрабатывает регламентное задание срока контроля
Процедура КонтрольСрокаКонтроля() Экспорт

	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольСрокаКонтроля,
		Отказ);

	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ТекущаяДата = ТекущаяДатаСеанса();
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	// Уведомление о подходе сроков
	АктивныеКонтролиСПодписчиками = ВыбратьАктивныеКонтролиСПодписчиками(ТекущаяДата);

	ТаблицаПодписчики = АктивныеКонтролиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтроле(МассивПодписчиков);

	Для Каждого СтрокаАктивныйКонтроль Из АктивныеКонтролиСПодписчиками Цикл

		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныйКонтроль.Подписчик, "Пользователь");
		СрокКонтроля = КонтрольКлиентСервер.СрокКонтроля(СтрокаАктивныйКонтроль.СрокИсполнения);

		Если СрокКонтроля > НастройкаПодписчика.СрокУведомления Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаАктивныйКонтроль.ДатаОбработки <> Дата(1, 1, 1) Тогда

			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПриближениеСрока) Тогда

				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаАктивныйКонтроль.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60 * 60 * 24);

				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПриближениеСрока Тогда

					Продолжить;

				КонецЕсли;

			Иначе

				Продолжить;

			КонецЕсли;

		КонецЕсли;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаАктивныйКонтроль.Подписчик, Перечисления.СобытияУведомлений.ПодошелСрокКонтроля,
			СтрокаАктивныйКонтроль.Контроль, СтрокаАктивныйКонтроль.ОбъектПодписки);

	КонецЦикла;
	
	// Уведомление о просроченном контроле
	ПросроченныеКонтролиСПодписчиками = ВыбратьПросроченныйКонтрольСПодписчиками(ТекущаяДата);

	ТаблицаПодписчики = ПросроченныеКонтролиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтроле(МассивПодписчиков);

	Для Каждого СтрокаПросроченныйКонтроль Из ПросроченныеКонтролиСПодписчиками Цикл

		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаПросроченныйКонтроль.Подписчик, "Пользователь");

		Если СтрокаПросроченныйКонтроль.ДатаОбработки <> Дата(1, 1, 1) Тогда

			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПросроченКонтроль) Тогда

				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(
					СтрокаПросроченныйКонтроль.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60 * 60 * 24);

				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПросроченКонтроль Тогда

					Продолжить;

				КонецЕсли;

			Иначе

				Продолжить;

			КонецЕсли;

		КонецЕсли;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаПросроченныйКонтроль.Подписчик, Перечисления.СобытияУведомлений.ПросроченКонтроль,
			СтрокаПросроченныйКонтроль.Контроль, СтрокаПросроченныйКонтроль.ОбъектПодписки);

	КонецЦикла;

КонецПроцедуры

// Предназначена для обработки произошедших бизнес-событий
Процедура ОбработатьБизнесСобытие(ПроизошедшееСобытие) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияПользователя") Тогда
		Возврат;
	КонецЕсли;

	ВидСобытия = ПроизошедшееСобытие.ВидСобытия;
	Объект = ПроизошедшееСобытие.Источник;

	ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Объект, ВидСобытия, Объект);

КонецПроцедуры

// Предназначена для обработки произошедших событий уведомлений.
Процедура ОбработатьСобытиеУведомления(Источник, ВидСобытия, Автор = Неопределено, КонтекстСобытия = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияПользователя") Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если Автор = Неопределено Тогда
		Автор = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	КонецЕсли;

	Если КонтекстСобытия = Неопределено Тогда
		КонтекстСобытия = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;

	ПроизошедшееСобытие = Новый Структура;
	ПроизошедшееСобытие.Вставить("ВидСобытия", ВидСобытия);
	ПроизошедшееСобытие.Вставить("Источник", Источник);
	ПроизошедшееСобытие.Вставить("Автор", Автор);
	ПроизошедшееСобытие.Вставить("КонтекстСобытия", КонтекстСобытия);

	ОбработатьБизнесСобытие(ПроизошедшееСобытие);

КонецПроцедуры

// Предназначена для обработки уведомления программы.
//
// Параметры:
//  Описание - Строка - Описание уведомления.
//  ВидУведомления - ПеречислениеСсылка.ВидыУведомленийПрограммы - Вид уведомления.
//  Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//  Объект - ЛюбаяСсылка - Объект уведомления.
//
Процедура ОбработатьУведомлениеПрограммы(Описание, Знач Пользователь, Объект = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияПользователя") Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Сотрудники") Тогда

		Пользователь = Сотрудники.ЛюбойПользовательСотрудника(
			Пользователь);

	КонецЕсли;

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
		Пользователь, Перечисления.СобытияУведомлений.УведомлениеПрограммы, Объект, Объект, Описание);

КонецПроцедуры

// Обработка уведомлений в очереди уведомлений
Процедура ОбработатьУведомленияВОчередиУведомлений() Экспорт

	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.УведомлениеПользователейОСобытиях, Отказ);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , НСтр(
		"ru = 'Начато регламентное уведомление о новых событиях'", ОбщегоНазначения.КодОсновногоЯзыка()));

	СформированныеУведомления = СформироватьУведомленияДляОтправки();
	ОтправитьУведомления(СформированныеУведомления);

	Документы.УведомлениеПоSMS.ВыполнитьРассылку();

	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , НСтр(
		"ru = 'Завершено регламентное уведомление о новых событиях'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

// Формирует ссылку для уведомлений.
// 
// Параметры:
//  Объект - ЛюбаяСсылка
//  ПредставлениеОбъекта - Строка
// 
// Возвращаемое значение:
//  Строка
// 
Функция ПолучитьНавигационнуюСсылкуУведомления(Объект, ПредставлениеОбъекта = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнутренняяНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Объект);
	
	АдресПубликацииНаВебСервере = РаботаСУведомлениямиПовтИсп.АдресПубликацииНаВебСервере();
	Если ЗначениеЗаполнено(АдресПубликацииНаВебСервере) Тогда
		Если Прав(АдресПубликацииНаВебСервере, 2) = "/#"
			Или Прав(АдресПубликацииНаВебСервере, 1) = "#" Тогда
			// Адрес уже корректный
		ИначеЕсли Прав(АдресПубликацииНаВебСервере, 1) = "/" Тогда
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "#";
		Иначе
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "/#";
		КонецЕсли;
		ПрефиксСсылки = АдресПубликацииНаВебСервере;
	Иначе
		ПрефиксСсылки = "v8doc:";
	КонецЕсли;
	
	НавигационнаяСсылка = ПрефиксСсылки + ВнутренняяНавигационнаяСсылка;
	
	КодированнаяСсылка = КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL);
	Если ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
		ПредставлениеСсылки = ПредставлениеОбъекта;
	Иначе
		ПредставлениеСсылки = Строка(Объект);
	КонецЕсли;
	НавигационнаяСсылкаУведомления = СтрШаблон(
		"<a href=%1>%2</a>",
		КодированнаяСсылка,
		ПредставлениеСсылки);
	
	Возврат НавигационнаяСсылкаУведомления;
	
КонецФункции

// Формирует внешнюю навигационную ссылку по внутренней навигационной ссылке.
//
// Параметры:
//  НавигационнаяСсылка - Строка - Внутренняя навигационная ссылка.
// 
// Возвращаемое значение:
//  Строка - Внешняя навигационная ссылка, если есть данные для формирования.
//
Функция ВнешняяНавигационнаяСсылка(НавигационнаяСсылка) Экспорт

	АдресПубликацииНаВебСервере = Константы.АдресПубликацииНаВебСервере.Получить();
	Если Не ЗначениеЗаполнено(АдресПубликацииНаВебСервере) Тогда
		Возврат НавигационнаяСсылка;
	КонецЕсли;

	Если Прав(АдресПубликацииНаВебСервере, 2) = "/#" Или Прав(АдресПубликацииНаВебСервере, 1) = "#" Тогда
		// Адрес уже корректный
	ИначеЕсли Прав(АдресПубликацииНаВебСервере, 1) = "/" Тогда
		АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "#";
	Иначе
		АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "/#";
	КонецЕсли;

	ВнешняяНавигационнаяСсылка = АдресПубликацииНаВебСервере + НавигационнаяСсылка;
	ВнешняяНавигационнаяСсылка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<a href=%1>%2</a>", КодироватьСтроку(ВнешняяНавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
		ВнешняяНавигационнаяСсылка);

	Возврат ВнешняяНавигационнаяСсылка;

КонецФункции

// Формирует представление срока с учетом использования графика работ
Функция ПолучитьПредставлениеСрока(Исполнитель, СрокИсполненияОбъекта, ВидСобытия, КодЯзыка, КНачалуДня = Ложь) Экспорт

	ПримерныйСрок = Ложь;
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Или ВидСобытия
		= Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
		СрокЗадачи = КонтрольКлиентСервер.СрокКонтроля(СрокИсполненияОбъекта);
		СрокЗадачи = ?(СрокЗадачи > 0, СрокЗадачи, -СрокЗадачи);
	Иначе
		СрокЗадачи = ПолучитьОсталосьДней(СрокИсполненияОбъекта, , Исполнитель, ПримерныйСрок, КНачалуДня);
	КонецЕсли;

	ПредставлениеСрока = "";
	ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(СрокЗадачи);

	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда

		Если ПодписьДней = НСтр("ru = 'день'", КодЯзыка) Тогда

			ПодписьНачало = НСтр("ru = 'Остался'", КодЯзыка);

		Иначе

			ПодписьНачало = НСтр("ru = 'Осталось'", КодЯзыка);

		КонецЕсли;

		ПредставлениеСрока = ПодписьНачало + " " + Строка(СрокЗадачи) + " " + ПодписьДней + " " + НСтр(
			"ru = 'до контрольного срока'", КодЯзыка);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда

		Если СрокЗадачи = 0 Тогда

			ПредставлениеСрока = НСтр("ru = 'Просрочен контроль'", КодЯзыка);

		Иначе

			ПредставлениеСрока = НСтр("ru = 'Просрочен контроль на'", КодЯзыка) + " " + Строка(СрокЗадачи) + " "
				+ ПодписьДней;

		КонецЕсли;

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка Тогда

		Если СрокЗадачи = 0 Тогда

			ПредставлениеСрока = НСтр("ru = 'Просрочена контрольная точка'", КодЯзыка);

		Иначе

			ПредставлениеСрока = НСтр("ru = 'Просрочена контрольная точка на'", КодЯзыка) + " " + Строка(СрокЗадачи) + " "
				+ ПодписьДней;

		КонецЕсли;

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки Тогда

		Если ПодписьДней = НСтр("ru = 'день'", КодЯзыка) Тогда

			ПодписьНачало = НСтр("ru = 'Остался'", КодЯзыка);

		Иначе

			ПодписьНачало = НСтр("ru = 'Осталось'", КодЯзыка);

		КонецЕсли;

		ПредставлениеСрока = ПодписьНачало + " " + Строка(СрокЗадачи) + " " + ПодписьДней + " " + НСтр(
			"ru = 'до контрольной точки'", КодЯзыка);

	КонецЕсли;

	Если ПримерныйСрок Тогда
		ТекстПримерныйСрок = НСтр("ru = 'Срок примерный'", КодЯзыка);
		ПредставлениеСрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", ПредставлениеСрока, ТекстПримерныйСрок);
	КонецЕсли;

	Возврат ПредставлениеСрока;

КонецФункции

// Возвращает строку для события журнала регистрации
Функция СобытиеЖурналаРегистрации() Экспорт

	СобытиеЖурналаРегистрации = НСтр("ru = 'Уведомление о новых событиях'", ОбщегоНазначения.КодОсновногоЯзыка());

	Возврат СобытиеЖурналаРегистрации;

КонецФункции

// Формирует текстовое представление задачи
Функция СформироватьПредставлениеЗадачи(Задача, ВидСобытия, ДополнительноеОписание, КодЯзыка) Экспорт

	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	НадписьНеУказанСрок = НСтр("ru = 'не указан'", КодЯзыка);
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматДаты = СтрШаблон("ДЛФ=DDT; ДП='%1'", НадписьНеУказанСрок);
	Иначе
		ФорматДаты = СтрШаблон("ДЛФ=DD; ДП='%1'", НадписьНеУказанСрок);
	КонецЕсли;

	ПредставлениеЗадачи = "";

	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи, НСтр("ru = 'Задача'", КодЯзыка), Задача.Ссылка);

	Если ЗначениеЗаполнено(Задача.БизнесПроцесс) И ЭтоПоддерживаемыйБизнесПроцесс(Задача.БизнесПроцесс) Тогда

		БизнесПроцессОбъект = Задача.БизнесПроцесс.ПолучитьОбъект();
		Если БизнесПроцессОбъект <> Неопределено Тогда

			ОписаниеУведомленияЗадачиПоБизнесПроцессу = БизнесПроцессОбъект.ПолучитьОписаниеУведомленияЗадачи(Задача,
				КодЯзыка);

			Если ЗначениеЗаполнено(ОписаниеУведомленияЗадачиПоБизнесПроцессу) Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеЗадачи, Символы.ПС, ОписаниеУведомленияЗадачиПоБизнесПроцессу);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ВидСобытия <> Справочники.ВидыБизнесСобытий.ВыполнениеЗадачиПроцесса Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи, НСтр("ru = 'Описание'", КодЯзыка), Задача.Описание);
	КонецЕсли;

	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи, НСтр("ru = 'Крайний срок'", КодЯзыка), Формат(Задача.СрокИсполнения, ФорматДаты));
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи, НСтр("ru = 'Исполнитель'", КодЯзыка), Задача.Исполнитель);
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи, НСтр("ru = 'Роль'", КодЯзыка), Задача.РольИсполнителя);

	Если ЗначениеЗаполнено(Задача.ДатаИсполнения) И Задача.Выполнена Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи, НСтр("ru = 'Выполнено'", КодЯзыка), Формат(Задача.ДатаИсполнения, ФорматДаты));
	КонецЕсли;

	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи, НСтр("ru = 'Комментарий'", КодЯзыка), Задача.РезультатВыполнения);
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи, НСтр("ru = 'Автор'", КодЯзыка), Задача.Автор);

	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(Задача);
	Если Предметы.Количество() = 1 Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи, НСтр("ru = 'Предмет'", КодЯзыка), Строка(Предметы[0].Предмет));
	ИначеЕсли Предметы.Количество() > 1 Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи, НСтр("ru = 'Предметы'", КодЯзыка), МультипредметностьКлиентСервер.ПредметыСтрокой(
			Предметы));
	КонецЕсли;

	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи, НСтр("ru = 'Ссылка'", КодЯзыка), ПолучитьНавигационнуюСсылкуУведомления(Задача));

	Возврат ПредставлениеЗадачи;

КонецФункции

// Формирует текстовое представление задачи
Функция СформироватьПредставлениеДействияЗадачи(ДействиеЗадачи, ВидСобытия, ДополнительноеОписание, КодЯзыка) Экспорт

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗадачи Тогда
		
		ПредставлениеЗадачи = ДополнительноеОписание;
		ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи, НСтр("ru = 'Ссылка'", КодЯзыка), ПолучитьНавигационнуюСсылкуУведомления(ДействиеЗадачи));
		
		Возврат ПредставлениеЗадачи;
		
	КонецЕсли;
	
	Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
	ЗадачаОбъект = Задача.ПолучитьОбъект();

	ПредставлениеЗадачи = ЗадачаОбъект.ОписаниеПростойТекст(ДействиеЗадачи, КодЯзыка);

	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи, Символы.ПС + НСтр("ru = 'Ссылка'", КодЯзыка), ПолучитьНавигационнуюСсылкуУведомления(ДействиеЗадачи));

	Возврат ПредставлениеЗадачи;

КонецФункции

// Формирует текстовое представление задачи
Функция СформироватьПредставлениеЗадачиАвтора(Задача, ВидСобытия, ДополнительноеОписание, КодЯзыка) Экспорт

	ЗадачаОбъект = Задача.ПолучитьОбъект();

	ПредставлениеЗадачи = ЗадачаОбъект.ОписаниеПростойТекст(Неопределено, КодЯзыка);

	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи, НСтр("ru = 'Ссылка'", КодЯзыка), ПолучитьНавигационнуюСсылкуУведомления(Задача));

	Возврат ПредставлениеЗадачи;

КонецФункции

// Формирует текстовое представление задачи
Функция СформироватьПредставлениеМероприятия(Мероприятие, ВидСобытия, ДополнительноеОписание, КодЯзыка) Экспорт
	
	ПредставлениеМероприятия = УправлениеМероприятиями.ТекстПриглашения(Мероприятие, КодЯзыка);
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеМероприятия,
		НСтр("ru = 'Ссылка'", КодЯзыка),
		ПолучитьНавигационнуюСсылкуУведомления(Мероприятие));
	
	Возврат ПредставлениеМероприятия;
	
КонецФункции

// Формирует текстовое представление объекта.
//
// Параметры:
//  Объект - СправочникСсылка, ДокументСсылка - Объект, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление объекта.
//
Функция СформироватьПредставлениеОбъекта(Объект, ВидСобытия, ПолучательУведомления, ДополнительноеОписание) Экспорт

	ПредставлениеОбъекта = РаботаСУведомлениямиПереопределяемый.СформироватьПредставлениеОбъекта(
		Объект, ВидСобытия, ПолучательУведомления, ДополнительноеОписание);
	Если ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
		Возврат ПредставлениеОбъекта;
	КонецЕсли;

	КодЯзыка = КодЯзыка(ПолучательУведомления);
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда

		ПредставлениеОбъекта = СформироватьПредставлениеФайла(
			Объект, ВидСобытия, ДополнительноеОписание, КодЯзыка);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда

		ТипДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "ВидДокумента.ЯвляетсяВходящейКорреспонденцией,
																		  |ВидДокумента.ЯвляетсяИсходящейКорреспонденцией");

		Если ТипДокумента.ВидДокументаЯвляетсяВходящейКорреспонденцией <> Неопределено
			И ТипДокумента.ВидДокументаЯвляетсяВходящейКорреспонденцией Тогда

			ПредставлениеОбъекта = СформироватьПредставлениеВходящегоДокумента(
				Объект, ВидСобытия, ДополнительноеОписание, КодЯзыка);

		ИначеЕсли ТипДокумента.ВидДокументаЯвляетсяИсходящейКорреспонденцией <> Неопределено
			И ТипДокумента.ВидДокументаЯвляетсяИсходящейКорреспонденцией Тогда

			ПредставлениеОбъекта = СформироватьПредставлениеИсходящегоДокумента(
				Объект, ВидСобытия, ДополнительноеОписание, КодЯзыка);

		Иначе

			ПредставлениеОбъекта = СформироватьПредставлениеВнутреннегоДокумента(
				Объект, ВидСобытия, ДополнительноеОписание, КодЯзыка);

		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда

		ПредставлениеОбъекта = СформироватьПредставлениеЗадачи(
			Объект, ВидСобытия, ДополнительноеОписание, КодЯзыка);

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда

		ПредставлениеОбъекта = СформироватьПредставлениеДействияЗадачи(
			Объект, ВидСобытия, ДополнительноеОписание, КодЯзыка);

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.Задача") Тогда

		ПредставлениеОбъекта = СформироватьПредставлениеЗадачиАвтора(
			Объект, ВидСобытия, ДополнительноеОписание, КодЯзыка); 
	
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеМероприятия(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект) Тогда
		 
		 ПредставлениеОбъекта = "";
		 
	Иначе

		ПредставлениеТипа = ЛокализацияКонфигурации.ПредставлениеТипаДляПользователя(
			Объект.Ссылка, ПолучательУведомления);
		ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта, ПредставлениеТипа, Объект.Ссылка);
		ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта, НСтр("ru = 'Ссылка'", КодЯзыка), ПолучитьНавигационнуюСсылкуУведомления(Объект));

	КонецЕсли;

	Возврат ПредставлениеОбъекта;

КонецФункции

// Формирует уведомления по событию "Создание входящего / внутреннего / исходящего документа".
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназначено уведомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияГруппировкаПоСобытиюСозданиеДокумента(ПолучательУведомления, СпособУведомления,
	ВидСобытия, Уведомления, СформированныеУведомления) Экспорт
	
	// Группировка либо по источнику, либо по папке, либо по событию.
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	Отбор.Вставить("ВидСобытия", ВидСобытия);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);

	ВсеДокументыДляУведомления = Новый Массив;
	ПапкиДокументов = Новый Массив;
	ДополнительныеОписания = Новый Соответствие;
	Для Каждого Уведомление Из УведомленияПользователя Цикл

		Если ТипЗнч(Уведомление.ОбъектПодписки) = Тип("СправочникСсылка.ПапкиДокументов") И ПапкиДокументов.Найти(
			Уведомление.ОбъектПодписки) = Неопределено Тогда
			ПапкиДокументов.Добавить(Уведомление.ОбъектПодписки);
		КонецЕсли;

		ДополнительныеОписания[Уведомление.Объект] = Уведомление.ДополнительноеОписание;

		ВсеДокументыДляУведомления.Добавить(Уведомление.Объект);

	КонецЦикла;
	ВсеДокументыДляУведомления = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеДокументыДляУведомления);

	ВсеИсточникиДокументов = Новый Массив;
	ИсточникиДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеДокументыДляУведомления, "Источник");
	Для Каждого КлючИЗначение Из ИсточникиДокументов Цикл

		Документ = КлючИЗначение.Ключ;
		ИсточникДокумента = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(ИсточникДокумента) Тогда
			Продолжить;
		КонецЕсли;

		ВсеИсточникиДокументов.Добавить(ИсточникДокумента);

	КонецЦикла;
	ВсеИсточникиДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеИсточникиДокументов);
	
	// Группировка по источнику.
	ОбработанныеДокументы = Новый Соответствие;
	Для Каждого ИсточникДокумента Из ВсеИсточникиДокументов Цикл

		ОбъектыУведомления = Новый Массив;
		УведомленияПодписки = Новый Массив;
		Для Каждого Уведомление Из УведомленияПользователя Цикл

			Если ИсточникДокумента <> ИсточникиДокументов[Уведомление.Объект] Тогда
				Продолжить;
			КонецЕсли;

			ОбъектыУведомления.Добавить(Уведомление.Объект);
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);

		КонецЦикла;
		ОбъектыУведомления = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыУведомления);

		Если ОбъектыУведомления.Количество() > 0 Тогда

			ДанныеУведомления = ДанныеУведомленияПоОбъектам(
				ИсточникДокумента, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
				ДополнительныеОписания);
			СформированноеУведомление = СформированныеУведомления.Добавить();
			ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
			СформированноеУведомление.Пользователь = ПолучательУведомления;
			СформированноеУведомление.СпособУведомления = СпособУведомления;
			СформированноеУведомление.ВидСобытия = ВидСобытия;
			СформированноеУведомление.Уведомления = УведомленияПодписки;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СформированноеУведомление.ОбъектыУведомления, ОбъектыУведомления);

			Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
				ОбработанныеДокументы.Вставить(ОбъектУведомления, Истина);
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;
	
	// Группировка по объекту подписки.
	Для Каждого ПапкаДокументов Из ПапкиДокументов Цикл

		Отбор = Новый Структура;
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		Отбор.Вставить("ОбъектПодписки", ПапкаДокументов);
		УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);

		ОбъектыУведомления = Новый Массив;
		УведомленияПодписки = Новый Массив;
		Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл

			Если ОбработанныеДокументы[Уведомление.Объект] = Истина Тогда
				Продолжить;
			КонецЕсли;

			Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
				ОбъектыУведомления.Добавить(Уведомление.Объект);
			КонецЕсли;

			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);

		КонецЦикла;

		Если ОбъектыУведомления.Количество() > 0 Тогда

			ДанныеУведомления = ДанныеУведомленияПоОбъектам(
				ПапкаДокументов, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
				ДополнительныеОписания);
			СформированноеУведомление = СформированныеУведомления.Добавить();
			ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
			СформированноеУведомление.Пользователь = ПолучательУведомления;
			СформированноеУведомление.СпособУведомления = СпособУведомления;
			СформированноеУведомление.ВидСобытия = ВидСобытия;
			СформированноеУведомление.Уведомления = УведомленияПодписки;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СформированноеУведомление.ОбъектыУведомления, ОбъектыУведомления);

			Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
				ОбработанныеДокументы.Вставить(ОбъектУведомления, Истина);
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;
	
	// Группировка по событию.
	ИсточникДокумента = Справочники.ИсточникиДанных.ПустаяСсылка();
	ОбъектыУведомления = Новый Массив;
	УведомленияПодписки = Новый Массив;
	Для Каждого Уведомление Из УведомленияПользователя Цикл

		Если ОбработанныеДокументы[Уведомление.Объект] = Истина Тогда
			Продолжить;
		КонецЕсли;

		ОбъектыУведомления.Добавить(Уведомление.Объект);
		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		ОбработанныеДокументы.Вставить(Уведомление.Объект, Истина);

	КонецЦикла;
	ОбъектыУведомления = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыУведомления);

	Если ОбъектыУведомления.Количество() > 0 Тогда

		ДанныеУведомления = ДанныеУведомленияПоОбъектам(
			ИсточникДокумента, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
			ДополнительныеОписания);
		СформированноеУведомление = СформированныеУведомления.Добавить();
		ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
		СформированноеУведомление.Пользователь = ПолучательУведомления;
		СформированноеУведомление.СпособУведомления = СпособУведомления;
		СформированноеУведомление.ВидСобытия = ВидСобытия;
		СформированноеУведомление.Уведомления = УведомленияПодписки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СформированноеУведомление.ОбъектыУведомления, ОбъектыУведомления);

		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			ОбработанныеДокументы.Вставить(ОбъектУведомления, Истина);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Формирует уведомления по событию с группировкой по объекту подписки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназначено уведомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияГруппировкаПоОбъектуПодписки(ПолучательУведомления, СпособУведомления, ВидСобытия,
	Уведомления, СформированныеУведомления) Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	Отбор.Вставить("ВидСобытия", ВидСобытия);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);

	УведомленияПодписки = Новый Массив;
	ДополнительныеОписания = Новый Соответствие;
	ОбъектыПодписки = Новый Массив;
	Для Каждого Уведомление Из УведомленияПользователя Цикл

		Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
			ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
		КонецЕсли;

		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);

	КонецЦикла;

	Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл

		Отбор = Новый Структура;
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
		УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);

		ОбъектыУведомления = Новый Массив;
		Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
			Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
				ОбъектыУведомления.Добавить(Уведомление.Объект);
			КонецЕсли;
		КонецЦикла;

		Если ОбъектыУведомления.Количество() > 0 Тогда
			ДанныеУведомления = ДанныеУведомленияПоОбъектам(
				ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
				ДополнительныеОписания);
			СформированноеУведомление = СформированныеУведомления.Добавить();
			ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
			СформированноеУведомление.Пользователь = ПолучательУведомления;
			СформированноеУведомление.СпособУведомления = СпособУведомления;
			СформированноеУведомление.ВидСобытия = ВидСобытия;
			СформированноеУведомление.Уведомления = УведомленияПодписки;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СформированноеУведомление.ОбъектыУведомления, ОбъектыУведомления);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Формирует уведомления по событию с группировкой по событию.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназначено уведомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияГруппировкаПоСобытию(ПолучательУведомления, СпособУведомления, ВидСобытия, Уведомления,
	СформированныеУведомления) Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	Отбор.Вставить("ВидСобытия", ВидСобытия);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);

	УведомленияПодписки = Новый Массив;
	ДополнительныеОписания = Новый Соответствие;
	ОбъектыУведомления = Новый Массив;

	Для Каждого Уведомление Из УведомленияПользователя Цикл

		Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
			ОбъектыУведомления.Добавить(Уведомление.Объект);
			ДополнительныеОписания.Вставить(Уведомление.Объект, Уведомление.ДополнительноеОписание);
		КонецЕсли;

		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);

	КонецЦикла;

	Если ОбъектыУведомления.Количество() > 0 Тогда
		ДанныеУведомления = ДанныеУведомленияПоОбъектам(
			Неопределено, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
			ДополнительныеОписания);
		СформированноеУведомление = СформированныеУведомления.Добавить();
		ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
		СформированноеУведомление.Пользователь = ПолучательУведомления;
		СформированноеУведомление.СпособУведомления = СпособУведомления;
		СформированноеУведомление.ВидСобытия = ВидСобытия;
		СформированноеУведомление.Уведомления = УведомленияПодписки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СформированноеУведомление.ОбъектыУведомления, ОбъектыУведомления);
	КонецЕсли;

КонецПроцедуры

// Возвращает Истина если переданная ссылка является ссылкой 
// на поддерживаемый системой уведомлений бизнес-процесс
Функция ЭтоПоддерживаемыйБизнесПроцесс(Ссылка) Экспорт
	
	Возврат ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Исполнение")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Ознакомление")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Приглашение")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Рассмотрение")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Регистрация")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Согласование")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Подписание")
		Или ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Утверждение");
	
КонецФункции

// Возвращает массив сотрудников, получателей уведомлений о работе программы
//
// Параметры:
//  Раздел  - Перечисление.РазделыУведомленийОПроблемах, неопределено - Раздел,
//                         о проблемах которого необходимо оповестить.
//                         Если не задано, то возвращает получателей оповещений о всех проблемах.
//
// Возвращаемое значение:
//   Массив из Справочник.Сотрудники - Массив сотрудников, которые должны получать уведомления о проблемах по данному разделу.
//
Функция СписокПолучателейУведомленийОПроблемах(Раздел = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ (СотрудникиПользователей.Сотрудник ЕСТЬ NULL)
	|			ТОГДА СотрудникиПользователей.Сотрудник
	|		ИНАЧЕ ПолучателиУведомленийОПроблемах.Получатель
	|	КОНЕЦ КАК Получатель
	|ПОМЕСТИТЬ Получатели
	|ИЗ
	|	РегистрСведений.ПолучателиУведомленийОПроблемах КАК ПолучателиУведомленийОПроблемах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО ПолучателиУведомленийОПроблемах.Получатель = СотрудникиПользователей.Пользователь
	|ГДЕ
	|	&УсловиеПоРазделу
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнителиРолей.Исполнитель КАК Получатель
	|ПОМЕСТИТЬ ПолучателиПоРолям
	|ИЗ
	|	Получатели КАК Получатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
	|		ПО Получатели.Получатель = ИсполнителиРолей.РольИсполнителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Получатель КАК Получатель
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПолучателиПоРолям.Получатель КАК Получатель
	|	ИЗ
	|		ПолучателиПоРолям КАК ПолучателиПоРолям
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Получатели.Получатель
	|	ИЗ
	|		Получатели КАК Получатели) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Получатель";

	Если Раздел <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоРазделу",
			"ПолучателиУведомленийОПроблемах.Раздел В(&ВыбираемыеРазделы)");

		Запрос.УстановитьПараметр("ВыбираемыеРазделы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Раздел));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоРазделу", "Истина");
	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");

КонецФункции

// Помещает активных подписчиков во временные таблицы.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события, по которому отбираются подписчики.
//  ОбъектМетаданных - Строка - Имя объекта метаданных, по которому учитывается делегирование.
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы подписчиков.
//
Процедура ПоместитьПодписчиковВоВременнуюТаблицу(МенеджерВременныхТаблиц, ВидСобытия, ИмяОбластиДелегирования,
	ИмяВременнойТаблицы = "Подписчики") Экспорт

	РазрешитьИзменятьНастройкиУведомлений = РегистрыСведений.НастройкиУведомлений.РазрешеноИзменятьНастройки();
	ПодпискаПоУмолчанию = РегистрыСведений.НастройкиУведомлений.ПолучитьПодпискуПоУмолчанию(ВидСобытия);

	Если ПодпискаПоУмолчанию И РазрешитьИзменятьНастройкиУведомлений Тогда
		
		// Установлена подписка по умолчанию, но пользователи могут изменять персональную настройку.
		ТекстЗапросаПодписчиков =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ИсполнителиРолейИДелегаты.РольСотрудник ССЫЛКА Справочник.ПолныеРоли
		|			ТОГДА ИсполнителиРолейИДелегаты.РольСотрудник
		|		ИНАЧЕ СотрудникиПользователей1.Пользователь
		|	КОНЕЦ КАК Подписчик,
		|	СотрудникиПользователей.Пользователь КАК ПолучательУведомления
		|ПОМЕСТИТЬ ПользователиИРолиСПодпиской
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО ИсполнителиРолейИДелегаты.ИсполнительДелегат = СотрудникиПользователей.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей1
		|		ПО (ИсполнителиРолейИДелегаты.РольСотрудник = СотрудникиПользователей1.Сотрудник)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|		ПО СотрудникиПользователей.Пользователь = НастройкиУведомлений.Пользователь
		|			И (НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка))
		|			И (НастройкиУведомлений.ВидСобытия = &ВидСобытия)
		|			И (НастройкиУведомлений.Объект = НЕОПРЕДЕЛЕНО)
		|			И (НастройкиУведомлений.Значение = ЛОЖЬ)
		|ГДЕ
		|	НастройкиУведомлений.Значение ЕСТЬ NULL
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", &ИмяОбластиДелегирования)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиИРолиСПодпиской.Подписчик КАК Подписчик,
		|	ПользователиИРолиСПодпиской.ПолучательУведомления КАК ПолучательУведомления
		|ПОМЕСТИТЬ %1
		|ИЗ
		|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ПользователиИРолиСПодпиской.Подписчик = Пользователи.Ссылка
		|ГДЕ
		|	Пользователи.Недействителен = ЛОЖЬ
		|	И Пользователи.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПользователиИРолиСПодпиской.Подписчик,
		|	ПользователиИРолиСПодпиской.ПолучательУведомления
		|ИЗ
		|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
		|		ПО ПользователиИРолиСПодпиской.Подписчик = ПолныеРоли.Ссылка
		|ГДЕ
		|	ПолныеРоли.ПометкаУдаления = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подписчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПользователиИРолиСПодпиской";
	ИначеЕсли ПодпискаПоУмолчанию И Не РазрешитьИзменятьНастройкиУведомлений Тогда
		
		// Установка подписка по умолчанию и пользователям запрещено изменять персональную настройку.
		ТекстЗапросаПодписчиков =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ИсполнителиРолейИДелегаты.РольСотрудник ССЫЛКА Справочник.ПолныеРоли
		|			ТОГДА ИсполнителиРолейИДелегаты.РольСотрудник
		|		ИНАЧЕ СотрудникиПользователей1.Пользователь
		|	КОНЕЦ КАК Подписчик,
		|	СотрудникиПользователей.Пользователь КАК ПолучательУведомления
		|ПОМЕСТИТЬ ПользователиИРолиСПодпиской
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО ИсполнителиРолейИДелегаты.ИсполнительДелегат = СотрудникиПользователей.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей1
		|		ПО (ИсполнителиРолейИДелегаты.РольСотрудник = СотрудникиПользователей1.Сотрудник)
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", &ИмяОбластиДелегирования)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиИРолиСПодпиской.Подписчик КАК Подписчик,
		|	ПользователиИРолиСПодпиской.ПолучательУведомления КАК ПолучательУведомления
		|ПОМЕСТИТЬ %1
		|ИЗ
		|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ПользователиИРолиСПодпиской.Подписчик = Пользователи.Ссылка
		|ГДЕ
		|	Пользователи.Недействителен = ЛОЖЬ
		|	И Пользователи.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПользователиИРолиСПодпиской.Подписчик,
		|	ПользователиИРолиСПодпиской.ПолучательУведомления
		|ИЗ
		|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
		|		ПО ПользователиИРолиСПодпиской.Подписчик = ПолныеРоли.Ссылка
		|ГДЕ
		|	ПолныеРоли.ПометкаУдаления = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подписчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПользователиИРолиСПодпиской";

	Иначе
		
		// Не установлена подписка по умолчанию.
		ТекстЗапросаПодписчиков =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ИсполнителиРолейИДелегаты.РольСотрудник ССЫЛКА Справочник.ПолныеРоли
		|			ТОГДА ИсполнителиРолейИДелегаты.РольСотрудник
		|		ИНАЧЕ СотрудникиПользователей1.Пользователь
		|	КОНЕЦ КАК Подписчик,
		|	СотрудникиПользователей.Пользователь КАК ПолучательУведомления
		|ПОМЕСТИТЬ ПользователиИРолиСПодпиской
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО ИсполнителиРолейИДелегаты.ИсполнительДелегат = СотрудникиПользователей.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей1
		|		ПО (ИсполнителиРолейИДелегаты.РольСотрудник = СотрудникиПользователей1.Сотрудник)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|		ПО (СотрудникиПользователей.Пользователь = НастройкиУведомлений.Пользователь)
		|			И (НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка))
		|			И (НастройкиУведомлений.ВидСобытия = &ВидСобытия)
		|			И (НастройкиУведомлений.Объект = НЕОПРЕДЕЛЕНО)
		|			И (НастройкиУведомлений.Значение = ИСТИНА)
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", &ИмяОбластиДелегирования)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиИРолиСПодпиской.Подписчик КАК Подписчик,
		|	ПользователиИРолиСПодпиской.ПолучательУведомления КАК ПолучательУведомления
		|ПОМЕСТИТЬ %1
		|ИЗ
		|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ПользователиИРолиСПодпиской.Подписчик = Пользователи.Ссылка
		|ГДЕ
		|	Пользователи.Недействителен = ЛОЖЬ
		|	И Пользователи.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПользователиИРолиСПодпиской.Подписчик,
		|	ПользователиИРолиСПодпиской.ПолучательУведомления
		|ИЗ
		|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
		|		ПО ПользователиИРолиСПодпиской.Подписчик = ПолныеРоли.Ссылка
		|ГДЕ
		|	ПолныеРоли.ПометкаУдаления = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подписчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПользователиИРолиСПодпиской";

	КонецЕсли;

	ТекстЗапросаПодписчиков = СтрШаблон(ТекстЗапросаПодписчиков, ИмяВременнойТаблицы);

	Запрос = Новый Запрос(ТекстЗапросаПодписчиков);
	Запрос.УстановитьПараметр("ИмяОбластиДелегирования", ИмяОбластиДелегирования);
	Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();

КонецПроцедуры

// Обработчик регламентного задания "Контроль самочувствия сотрудников".
//
Процедура КонтрольНаличияОригиналов() Экспорт
	
	// Уведомление "Напоминания об отсутствии оригиналов".
	Попытка

		СформироватьНапоминанияОбОтсутствииОригиналов();

	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
		КомментарийЖурналаРегистрации = СтрШаблон(
			"%1:
			|%2", НСтр("ru = 'Не удалось сформировать напоминания об отсутствии оригиналов'"),
			ПодробноеПредставлениеОшибки);

		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СамочувствиеСотрудника, ,
			КомментарийЖурналаРегистрации);

	КонецПопытки;

КонецПроцедуры

// Отправляет уведомления об ошибке с текстом описания.
// 
// Параметры:
//  Описание - Строка - Текст описания ошибки
//  ВидДокумента - СправочникСсылка.ВидыДокументов - вид документа
//
Процедура ОтправитьУведомленияОбОшибке(Описание, ВидДокумента) Экспорт

	ПолучателиУведомлений = СписокПолучателейУведомленийОПроблемах(
		Перечисления.РазделыУведомленийОПроблемах.Администрирование);
	Если ПолучателиУведомлений.Количество() = 0 Тогда
		ПользовательАдминистратор = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
		СотрудникАдминистратора = Сотрудники.ОсновнойСотрудникПользователя(
			ПользовательАдминистратор);
		Если ЗначениеЗаполнено(СотрудникАдминистратора) Тогда
			ПолучателиУведомлений.Добавить(СотрудникАдминистратора);
		КонецЕсли;
	КонецЕсли;
	ПолучателиУведомлений.Добавить(Сотрудники.ОсновнойСотрудник());
	ПолучателиУведомлений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолучателиУведомлений);

	Для Каждого Получатель Из ПолучателиУведомлений Цикл
		ОбработатьУведомлениеПрограммы(Описание, Получатель, ВидДокумента);
	КонецЦикла;

КонецПроцедуры

// Преобразует текст уведомления в HTML.
//
// Параметры:
//  ТекстУведомления - Строка - Текст уведомления.
//
// Возвращаемое значение:
//  Строка - Текст уведомления в HTML.
//
Функция ТекстУведомленияВHTML(Знач ТекстУведомления) Экспорт

	ТекстУведомления = СтрЗаменить(ТекстУведомления, Символы.ПС, "<br>");

	ТекстУведомления = СтрШаблон(
		"<html>
		|<body>
		|<div style=""font-family:Arial;font-size:10pt;"">
		|%1
		|</div>
		|</body>
		|</html>", ТекстУведомления);

	Возврат ТекстУведомления;

КонецФункции

Процедура ПриДобавленииУведомленияПоИзменениюЗадачи(Запись, ДополнительноеОписание) Экспорт
	
	// Дополнительное описание уже может быть записано в существующей записи.
	// При этом дополнительное описание может содержать старое наименование через специальный разделитель.
	// Нужно это старое представление задачи вытащить и поставить в начало.
	
	// Более поздние изменения должны быть выше в уведомлении.
	Если Не ЗначениеЗаполнено(Запись.ДополнительноеОписание) Тогда
		Запись.ДополнительноеОписание = ДополнительноеОписание;
	Иначе
		
		ПредставлениеЗадачиИОписаниеИзмененийБыло = 
			ПредставлениеЗадачиИОписаниеИзмененийПоОписанию(Запись.ДополнительноеОписание);
		ПредставлениеЗадачиИОписаниеИзмененийСтало = 
			ПредставлениеЗадачиИОписаниеИзмененийПоОписанию(ДополнительноеОписание);
		
		СтароеПредставлениеЗадачи = "";
		Если ПредставлениеЗадачиИОписаниеИзмененийБыло.ПредставлениеЗадачи <> Неопределено Тогда
			СтароеПредставлениеЗадачи = ПредставлениеЗадачиИОписаниеИзмененийБыло.ПредставлениеЗадачи;
		ИначеЕсли ПредставлениеЗадачиИОписаниеИзмененийСтало.ПредставлениеЗадачи <> Неопределено Тогда
			СтароеПредставлениеЗадачи = ПредставлениеЗадачиИОписаниеИзмененийСтало.ПредставлениеЗадачи;
		КонецЕсли;
		
		ОписаниеИзмененийНовое = ?(
			ПредставлениеЗадачиИОписаниеИзмененийСтало.ОписаниеИзменений <> Неопределено,
			ПредставлениеЗадачиИОписаниеИзмененийСтало.ОписаниеИзменений,
			ДополнительноеОписание);
		
		ОписаниеИзмененийНакопленное = ?(
			ПредставлениеЗадачиИОписаниеИзмененийБыло.ОписаниеИзменений <> Неопределено,
			ПредставлениеЗадачиИОписаниеИзмененийБыло.ОписаниеИзменений,
			Запись.ДополнительноеОписание);
		
		Запись.ДополнительноеОписание = 
			СтароеПредставлениеЗадачи + РазделительДополнительногоОписанияПриИзмененииЗадачи() 
			+ ОписаниеИзмененийНовое + ОписаниеИзмененийНакопленное; 
		
	КонецЕсли;
	
КонецПроцедуры

// Активирует бота в Telegram.
// 
// Параметры:
//  ИмяБота - Строка.
//  Токен - Строка.
//
Процедура АктивизироватьБотаВTelegram(ИмяБота, Токен) Экспорт
	
	ПроверитьДоступностьИзмененияНастроекБота();
	
	ЧатБот = РаботаСЧатБотомПовтИсп.ЧатБот();
	Если Не ЗначениеЗаполнено(ЧатБот) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан пользователь чат-бота.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяБота) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано имя бота.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Токен) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан токен.'");
	КонецЕсли;
	
	Если Константы.ИспользоватьУведомленияЧерезTelegram.Получить() Тогда
		ВызватьИсключение НСтр("ru = 'Бот уже активирован в Telegram.'");
	КонецЕсли;
	
	ПараметрыИнтеграции = ОбсужденияСлужебный.ПараметрыИнтеграции();
	ПараметрыИнтеграции.Идентификатор = ИдентификаторИнтеграцииБотаTelegram();
	ПараметрыИнтеграции.Ключ = КлючБотаTelegram(); 
	ПараметрыИнтеграции.Тип = ОбсужденияСлужебныйКлиентСервер.ТипыВнешнихСистем().Телеграм;
	ПараметрыИнтеграции.Участники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		РаботаСЧатБотомПовтИсп.ЧатБот());
	ПараметрыИнтеграции.token = Токен;
	
	
	ОбсужденияСлужебный.СоздатьИзменитьИнтеграцию(ПараметрыИнтеграции);
	
	РаботаСЧатБотом.СоздатьИзменитьБотаЧатБота();
	
	Константы.ИмяБотаTelegram.Установить(ИмяБота);
	Константы.ИспользоватьУведомленияЧерезTelegram.Установить(Истина);
	
КонецПроцедуры

// Отключает бота от Telegram.
//
Процедура ОтключитьБотаОтTelegram() Экспорт
	
	ПроверитьДоступностьИзмененияНастроекБота();
	
	Если Не Константы.ИспользоватьУведомленияЧерезTelegram.Получить() Тогда
		ВызватьИсключение НСтр("ru = 'Бот уже отключен от Telegram.'");
	КонецЕсли;
	
	ИнтеграцияБотаTelegram = ИнтеграцияБотаTelegram();
	Если ИнтеграцияБотаTelegram <> Неопределено Тогда
		ОбсужденияСлужебный.ОтключитьИнтеграцию(КлючБотаTelegram());
	КонецЕсли;
	
	Константы.ИспользоватьУведомленияЧерезTelegram.Установить(Ложь);
	
КонецПроцедуры

// Активирует бота в ВКонтакте.
// 
// Параметры:
//  ИмяГруппы - Строка.
//  Ключ - Строка.
//  КлючГруппы - Строка.
//  СсылкаГруппы - Строка.
//
Процедура АктивизироватьБотаВВКонтакте(ИмяГруппы, Ключ, КлючГруппы, СсылкаГруппы) Экспорт
	
	Если Не КОДСервер.ЭтоЦентральныйУзел() Тогда
		ВызватьИсключение НСтр("ru = 'Активизировать бота в ВКонтакте можно только в центральном узле.'");
	КонецЕсли;
	
	Если Не СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		ВызватьИсключение НСтр("ru = 'Система взаимодействия не зарегистрирована.'");
	КонецЕсли;
	
	Если Не РаботаСЧатБотом.ЧатБотИспользуется() Тогда
		ВызватьИсключение НСтр("ru = 'Чат-бот отключен.'");
	КонецЕсли;
	
	ЧатБот = РаботаСЧатБотомПовтИсп.ЧатБот();
	Если Не ЗначениеЗаполнено(ЧатБот) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан пользователь чат-бота.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяГруппы) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано имя группы.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ключ) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан ключ.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлючГруппы) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан ключ группы.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаГруппы) Тогда
		ВызватьИсключение НСтр("ru = 'Не указана ссылка группы.'");
	КонецЕсли;
	
	Если Константы.ИспользоватьУведомленияЧерезВКонтакте.Получить() Тогда
		ВызватьИсключение НСтр("ru = 'Бот уже активирован в ВКонтакте.'");
	КонецЕсли;
	
	ПараметрыИнтеграции = ОбсужденияСлужебный.ПараметрыИнтеграции();
	ПараметрыИнтеграции.Идентификатор = ИдентификаторИнтеграцииБотаВКонтакте();
	ПараметрыИнтеграции.Ключ = КлючБотаВКонтакте(); 
	ПараметрыИнтеграции.Тип = ОбсужденияСлужебныйКлиентСервер.ТипыВнешнихСистем().ВКонтакте;
	ПараметрыИнтеграции.Участники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		РаботаСЧатБотомПовтИсп.ЧатБот());
	ПараметрыИнтеграции.token = Ключ;
	ПараметрыИнтеграции.groupId = КлючГруппы;
	
	ОбсужденияСлужебный.СоздатьИзменитьИнтеграцию(ПараметрыИнтеграции);
	
	РаботаСЧатБотом.СоздатьИзменитьБотаЧатБота();
	
	Константы.ИмяГруппыВКонтакте.Установить(ИмяГруппы);
	Константы.СсылкаГруппыВКонтакте.Установить(СсылкаГруппы);
	Константы.ИспользоватьУведомленияЧерезВКонтакте.Установить(Истина);
	
КонецПроцедуры

// Отключает бота от ВКонтакте.
//
Процедура ОтключитьБотаОтВКонтакте() Экспорт
	
	Если Не КОДСервер.ЭтоЦентральныйУзел() Тогда
		ВызватьИсключение НСтр("ru = 'Отключить бота от ВКонтакте можно только в центральном узле.'");
	КонецЕсли;
	
	Если Не СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		ВызватьИсключение НСтр("ru = 'Система взаимодействия не зарегистрирована.'");
	КонецЕсли;
	
	Если Не РаботаСЧатБотом.ЧатБотИспользуется() Тогда
		ВызватьИсключение НСтр("ru = 'Не настроен чат-бот.'");
	КонецЕсли;
	
	Если Не Константы.ИспользоватьУведомленияЧерезВКонтакте.Получить() Тогда
		ВызватьИсключение НСтр("ru = 'Бот уже отключен от ВКонтакте.'");
	КонецЕсли;
	
	ИнтеграцияБотаВКонтакте = ИнтеграцияБотаВКонтакте();
	Если ИнтеграцияБотаВКонтакте <> Неопределено Тогда
		ОбсужденияСлужебный.ОтключитьИнтеграцию(КлючБотаВКонтакте());
	КонецЕсли;
	
	Константы.ИспользоватьУведомленияЧерезВКонтакте.Установить(Ложь);
	
КонецПроцедуры

// Возвращает ключи ВКонтакте.
// 
// Возвращаемое значение:
//  Строка, Неопределено - Ключи ВКонтакте:
//   * Ключ - Строка.
//   * КлючГруппы - Строка.
//
Функция КлючиВКонтакте() Экспорт
	
	ИнтеграцияБотаВКонтакте = ИнтеграцияБотаВКонтакте();
	Если ИнтеграцияБотаВКонтакте = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючВКонтакте = ИнтеграцияБотаВКонтакте.ПараметрыВнешнейСистемы.Получить("token");
	КлючГруппыВКонтакте = ИнтеграцияБотаВКонтакте.ПараметрыВнешнейСистемы.Получить("groupId");
	
	КлючиВКонтакте = Новый Структура;
	КлючиВКонтакте.Вставить("КлючВКонтакте", КлючВКонтакте);
	КлючиВКонтакте.Вставить("КлючГруппыВКонтакте", КлючГруппыВКонтакте);
	
	Возврат КлючиВКонтакте;
	
КонецФункции

// Определяет пользователя по обсуждению системы взаимодействия.
// 
// Параметры:
//  ИдентификаторОбсужденияСВ - ИдентификаторОбсужденияСистемыВзаимодействия.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления.
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Пользователь.
//
Функция ПользовательУведомленийЧерезВнешнююСистему(ИдентификаторОбсужденияСВ, СпособУведомления) Экспорт
	
	НайденныйПользователь =
		РегистрыСведений.СпособыУведомленияПользователей.НайтиПоДаннымСпособаУведомлений(
			Строка(ИдентификаторОбсужденияСВ),
			СпособУведомления);
	
	Возврат НайденныйПользователь;
	
КонецФункции

// Отключает уведомления через внешнюю систему.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
//  ИдентификаторОбсужденияСВ - ИдентификаторОбсужденияСистемыВзаимодействия.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления.
//
Процедура ОтключитьУведомленияЧерезВнешнююСистему(Пользователь, ИдентификаторОбсужденияСВ, СпособУведомления) Экспорт
	
	РегистрыСведений.СпособыУведомленияПользователей.УдалитьСпособУведомленияПользователя(
		Пользователь,
		СпособУведомления,
		Справочники.ВидыКонтактнойИнформации.ПустаяСсылка(),
		Строка(ИдентификаторОбсужденияСВ));
	
КонецПроцедуры

// Формирует запрос подключения уведомлений через внешнюю систему.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
//  ИдентификаторОбсужденияСВ - ИдентификаторОбсужденияСистемыВзаимодействия.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления.
//  ПользовательСВ - ПользовательСистемыВзаимодействия.
//
Процедура ЗапроситьПодключениеУведомленийЧерезВнешнююСистему(Пользователь, ИдентификаторОбсужденияСВ, СпособУведомления, ПользовательСВ) Экспорт
	
	КодЯзыкаПользователя = ЛокализацияКонфигурации.КодЯзыкаПользователя(Пользователь);
	
	ТекстЗапросаПодключения =
		СтрШаблон(
			НСтр("ru = 'Поступил запрос на подключение уведомлений через %1 от %2.
				|Пожалуйста, подтвердите, что это вы.'",
				КодЯзыкаПользователя),
			СпособУведомления,
			ПользовательСВ.Имя);
	
	ТекстПодтвержденияПодключения = 
		СтрШаблон(
			НСтр("ru = 'Подтверждаю, подключить уведомления через %1'",
				КодЯзыкаПользователя),
			СпособУведомления);
	
	ДействияЗапросаПодключения = Новый СписокЗначений;
	ПредставлениеДействия = ТекстПодтвержденияПодключения;
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ИмяМетода", "ПодключитьУведомленияЧерезВнешнююСистему");
	ПараметрыПодключения.Вставить("ИдентификаторОбсужденияСВ", ИдентификаторОбсужденияСВ);
	ТипВнешнейСистемы = Перечисления.СпособыУведомления.ТипВнешнейСистемы(СпособУведомления);
	ПараметрыПодключения.Вставить("ТипВнешнейСистемы", ТипВнешнейСистемы);
	ДействияЗапросаПодключения.Добавить(ПараметрыПодключения, ПредставлениеДействия);
	
	РезультатОтправки = РаботаСЧатБотом.ОтправитьСообщение(
		Пользователь,
		ТекстЗапросаПодключения,
		Неопределено,
		ДействияЗапросаПодключения);
	Если Не РезультатОтправки.Отправлено Тогда
		ВызватьИсключение РезультатОтправки.ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Подключает уведомления через внешнюю систему.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
//  ИдентификаторОбсужденияСВ - ИдентификаторОбсужденияСистемыВзаимодействия.
//  ТипВнешнейСистемы - Строка.
//
Процедура ПодключитьУведомленияЧерезВнешнююСистему(Пользователь, ИдентификаторОбсужденияСВ, ТипВнешнейСистемы) Экспорт
	
	КодЯзыкаПользователя = ЛокализацияКонфигурации.КодЯзыкаПользователя(Пользователь);
	
	СпособУведомления = Перечисления.СпособыУведомления.НайтиПоТипуВнешнейСистемы(ТипВнешнейСистемы);
	Если Не ЗначениеЗаполнено(СпособУведомления) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип внешней системы %1.'"), ТипВнешнейСистемы);
	КонецЕсли;
	
	РегистрыСведений.СпособыУведомленияПользователей.УстановитьСпособУведомленияПользователя(
		Пользователь,
		СпособУведомления,
		Справочники.ВидыКонтактнойИнформации.ПустаяСсылка(),
		Строка(ИдентификаторОбсужденияСВ));
	
	ТекстУведомленияПодключены =
		СтрШаблон(
			НСтр("ru = 'Уведомления через %1 подключены.
				|Перейдите в персональные настройки уведомлений, чтобы указать, какие именно уведомления следует присылать - %2.'",
				КодЯзыкаПользователя),
			СпособУведомления,
			ПолучитьНавигационнуюСсылку(Метаданные.Обработки.ПерсональныеНастройки.Команды.ПерсональныеНастройкиУведомлений));
	
	РезультатОтправки = РаботаСЧатБотом.ОтправитьСообщение(
		Пользователь,
		ТекстУведомленияПодключены);
	Если Не РезультатОтправки.Отправлено Тогда
		ВызватьИсключение РезультатОтправки.ТекстОшибки;
	КонецЕсли;
	
	ТекстУведомленияПодключены =
		СтрШаблон(
			НСтр("ru = 'Уведомления через %1 подключены.
				|Перейдите в персональные настройки уведомлений, чтобы указать, какие именно уведомления следует присылать.'",
				КодЯзыкаПользователя),
			СпособУведомления);
	
	РаботаСЧатБотом.ОтправитьСообщениеВОбсуждение(
		ИдентификаторОбсужденияСВ,
		ТекстУведомленияПодключены);
	Если Не РезультатОтправки.Отправлено Тогда
		ВызватьИсключение РезультатОтправки.ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Определяет, что уведомления через Telegram подключены.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  Булево - Уведомления через Telegram подключены.
//
Функция УведомленияЧерезTelegramПодключены(Пользователь) Экспорт
	
	ИспользоватьУведомленияЧерезTelegram =
		Константы.ИспользоватьУведомленияЧерезTelegram.Получить();
	Если Не ИспользоватьУведомленияЧерезTelegram Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбсужденияДляУведомления =
		РегистрыСведений.СпособыУведомленияПользователей.ПолучитьСпособУведомленияПользователя(
			Пользователь,
			Перечисления.СпособыУведомления.Telegram);
	
	УведомленияЧерезTelegramПодключены = ОбсужденияДляУведомления.Количество() <> 0;
	
	Возврат УведомленияЧерезTelegramПодключены;
	
КонецФункции

// Определяет, что уведомления через ВКонтакте подключены.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  Булево - Уведомления через ВКонтакте подключены.
//
Функция УведомленияЧерезВКонтактеПодключены(Пользователь) Экспорт
	
	ИспользоватьУведомленияЧерезВКонтакте =
		Константы.ИспользоватьУведомленияЧерезВКонтакте.Получить();
	Если Не ИспользоватьУведомленияЧерезВКонтакте Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбсужденияДляУведомления =
		РегистрыСведений.СпособыУведомленияПользователей.ПолучитьСпособУведомленияПользователя(
			Пользователь,
			Перечисления.СпособыУведомления.ВКонтакте);
	
	УведомленияЧерезВКонтактеПодключены = ОбсужденияДляУведомления.Количество() <> 0;
	
	Возврат УведомленияЧерезВКонтактеПодключены;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует список событий, по которым необходимо группировать уведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователь - Получатель уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//
// Возвращаемое значение:
//  Массив - Виды бизнес-событий для группировки.
//
Функция ВидыСобытийДляГруппировки(ПолучательУведомления, СпособУведомления)

	ВидыСобытий = Новый Массив;

	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда

		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачиПроцесса);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеДокумента);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеФайла);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента);

	ИначеЕсли СпособУведомления = Перечисления.СпособыУведомления.ПоSMS Тогда

		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеДокумента);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеФайла);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента);

	ИначеЕсли СпособУведомления = Перечисления.СпособыУведомления.Окном Тогда

		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента);

	КонецЕсли;

	РаботаСУведомлениямиПереопределяемый.ВидыСобытийДляГруппировки(ВидыСобытий, ПолучательУведомления,
		СпособУведомления);

	Возврат ВидыСобытий;

КонецФункции

// Считывает документы активные на указанную дату с подписчиками
Функция ВыбратьАктивныеДокументыСПодписчиками(АктивныеНаДату)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц, Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента, "Документы");

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПредприятия.Ссылка КАК Документ,
	|	ВЫБОР
	|		КОГДА СотрудникиПользователей.Пользователь ЕСТЬ NULL
	|			ТОГДА ДокументыПредприятия.Ответственный
	|		ИНАЧЕ СотрудникиПользователей.Пользователь
	|	КОНЕЦ КАК Ответственный,
	|	ДокументыПредприятия.ДатаОкончанияДействия КАК ДатаОкончанияДействия
	|ПОМЕСТИТЬ АктивныеДокументы
	|ИЗ
	|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО ДокументыПредприятия.Ответственный = СотрудникиПользователей.Сотрудник
	|ГДЕ
	|	НЕ ДокументыПредприятия.ПометкаУдаления
	|	И ДокументыПредприятия.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И ДокументыПредприятия.Ответственный <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ДокументыПредприятия.Ответственный <> НЕОПРЕДЕЛЕНО
	|	И ДокументыПредприятия.ВидДокумента.УчитыватьСрокДействия
	|	И НЕ ДокументыПредприятия.НеДействует
	|	И ДокументыПредприятия.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КОНЕЦПЕРИОДА(ДокументыПредприятия.ДатаОкончанияДействия, ДЕНЬ) >= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И ДокументыПредприятия.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивныеДокументы.Документ КАК Документ,
	|	Подписчики.ПолучательУведомления КАК Подписчик,
	|	АктивныеДокументы.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
	|	АктивныеДокументы.Документ КАК ОбъектПодписки
	|ИЗ
	|	АктивныеДокументы КАК АктивныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
	|		ПО АктивныеДокументы.Ответственный = Подписчики.Подписчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
	|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокДействияДокумента))
	|		И АктивныеДокументы.Документ = ОбработанныеУведомления.ОбъектУведомления
	|		И (Подписчики.ПолучательУведомления = ОбработанныеУведомления.Пользователь)";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", АктивныеНаДату);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДокументыСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();

	Возврат ДокументыСПодписчиками;

КонецФункции

// Считывает активные контроли на указанную дату с подписчиками
Функция ВыбратьАктивныеКонтролиСПодписчиками(АктивныеНаДату)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц, Перечисления.СобытияУведомлений.ПодошелСрокКонтроля, "Контроль");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контроль.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Контроль.Контролер) = ТИП(Справочник.Сотрудники)
	|			ТОГДА СотрудникиПользователей.Пользователь
	|		ИНАЧЕ Контроль.Контролер
	|	КОНЕЦ КАК Исполнитель,
	|	Контроль.СрокИсполнения КАК СрокИсполнения
	|ПОМЕСТИТЬ АктивныеКонтроли
	|ИЗ
	|	Справочник.Контроль КАК Контроль
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО Контроль.Контролер = СотрудникиПользователей.Сотрудник
	|ГДЕ
	|	НЕ Контроль.ПометкаУдаления
	|	И Контроль.ПоставленНаКонтроль
	|	И НЕ Контроль.СнятСКонтроля
	|	И Контроль.СрокИсполнения >= &Дата
	|	И Контроль.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И Контроль.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
	|	НастройкиУведомлений.Пользователь КАК Подписчик
	|ПОМЕСТИТЬ ОбъектыСПодпиской
	|ИЗ
	|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
	|ГДЕ
	|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
	|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля)
	|	И НастройкиУведомлений.Значение = ИСТИНА
	|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивныеКонтроли.Ссылка КАК Контроль,
	|	Подписчики.ПолучательУведомления КАК Подписчик,
	|	АктивныеКонтроли.СрокИсполнения КАК СрокИсполнения,
	|	АктивныеКонтроли.Ссылка КАК ОбъектПодписки
	|ПОМЕСТИТЬ АктивныеКонтролиСПодпиской
	|ИЗ
	|	АктивныеКонтроли КАК АктивныеКонтроли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
	|		ПО АктивныеКонтроли.Исполнитель = Подписчики.Подписчик
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АктивныеКонтроли.Ссылка,
	|	ОбъектыСПодпиской.Подписчик,
	|	АктивныеКонтроли.СрокИсполнения,
	|	АктивныеКонтроли.Ссылка
	|ИЗ
	|	АктивныеКонтроли КАК АктивныеКонтроли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
	|		ПО АктивныеКонтроли.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АктивныеКонтроли.Ссылка,
	|	ОбъектыСПодпиской.Подписчик,
	|	АктивныеКонтроли.СрокИсполнения,
	|	АктивныеКонтроли.Исполнитель
	|ИЗ
	|	АктивныеКонтроли КАК АктивныеКонтроли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
	|		ПО АктивныеКонтроли.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АктивныеКонтроли.Ссылка,
	|	ОбъектыСПодпиской.Подписчик,
	|	АктивныеКонтроли.СрокИсполнения,
	|	СотрудникиПользователей.Пользователь
	|ИЗ
	|	АктивныеКонтроли КАК АктивныеКонтроли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
	|		ПО АктивныеКонтроли.Исполнитель = ИсполнителиРолейИДелегаты.РольСотрудник
	|		И (ИсполнителиРолейИДелегаты.РольСотрудник ССЫЛКА Справочник.ПолныеРоли)
	|		И (ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Контроль""))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО ИсполнителиРолейИДелегаты.ИсполнительДелегат = СотрудникиПользователей.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
	|		ПО СотрудникиПользователей.Пользователь = ОбъектыСПодпиской.ОбъектПодписки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивныеКонтролиСПодпиской.Контроль КАК Контроль,
	|	АктивныеКонтролиСПодпиской.Подписчик КАК Подписчик,
	|	АктивныеКонтролиСПодпиской.СрокИсполнения КАК СрокИсполнения,
	|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
	|	АктивныеКонтролиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
	|ИЗ
	|	АктивныеКонтролиСПодпиской КАК АктивныеКонтролиСПодпиской
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
	|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля))
	|		И АктивныеКонтролиСПодпиской.Контроль = ОбработанныеУведомления.ОбъектУведомления
	|		И АктивныеКонтролиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", НачалоДня(АктивныеНаДату));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонтролиСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();

	Возврат КонтролиСПодписчиками;

КонецФункции

// Считывает активные контрольные точки на указанную дату с подписчиками.
Функция ВыбратьАктивныеКонтрольныеТочкиСПодписчиками(АктивныеНаДату)

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц, Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки, "");

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КонтрольныеТочки.Ссылка КАК Ссылка,
	|	КонтрольныеТочки.Ответственный КАК Ответственный,
	|	КонтрольныеТочки.ПлановыйСрок КАК ПлановыйСрок,
	|	СотрудникиПользователей.Пользователь КАК ОтветственныйПользователь
	|ПОМЕСТИТЬ АктивныеКонтрольныеТочки
	|ИЗ
	|	Справочник.КонтрольныеТочки КАК КонтрольныеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО КонтрольныеТочки.Ответственный = СотрудникиПользователей.Сотрудник
	|ГДЕ
	|	КонтрольныеТочки.ПометкаУдаления = ЛОЖЬ
	|	И КонтрольныеТочки.Исполнено = ЛОЖЬ
	|	И КонтрольныеТочки.ПлановыйСрок >= &Дата
	|	И КонтрольныеТочки.ПлановыйСрок <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
	|	НастройкиУведомлений.Пользователь КАК Подписчик
	|ПОМЕСТИТЬ ОбъектыСПодпиской
	|ИЗ
	|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
	|ГДЕ
	|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
	|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтрольнойТочки)
	|	И НастройкиУведомлений.Значение = ИСТИНА
	|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивныеКонтрольныеТочки.Ссылка КАК КонтрольнаяТочка,
	|	Подписчики.ПолучательУведомления КАК Подписчик,
	|	АктивныеКонтрольныеТочки.ПлановыйСрок КАК ПлановыйСрок,
	|	АктивныеКонтрольныеТочки.Ссылка КАК ОбъектПодписки
	|ПОМЕСТИТЬ АктивныеКонтрольныеТочкиСПодпиской
	|ИЗ
	|	АктивныеКонтрольныеТочки КАК АктивныеКонтрольныеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
	|		ПО АктивныеКонтрольныеТочки.ОтветственныйПользователь = Подписчики.Подписчик
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АктивныеКонтрольныеТочки.Ссылка,
	|	ОбъектыСПодпиской.Подписчик,
	|	АктивныеКонтрольныеТочки.ПлановыйСрок,
	|	АктивныеКонтрольныеТочки.Ссылка
	|ИЗ
	|	АктивныеКонтрольныеТочки КАК АктивныеКонтрольныеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
	|		ПО АктивныеКонтрольныеТочки.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивныеКонтрольныеТочкиСПодпиской.КонтрольнаяТочка КАК КонтрольнаяТочка,
	|	АктивныеКонтрольныеТочкиСПодпиской.Подписчик КАК Подписчик,
	|	АктивныеКонтрольныеТочкиСПодпиской.ПлановыйСрок КАК ПлановыйСрок,
	|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
	|	АктивныеКонтрольныеТочкиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
	|ИЗ
	|	АктивныеКонтрольныеТочкиСПодпиской КАК АктивныеКонтрольныеТочкиСПодпиской
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
	|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтрольнойТочки))
	|			И АктивныеКонтрольныеТочкиСПодпиской.КонтрольнаяТочка = ОбработанныеУведомления.ОбъектУведомления
	|			И АктивныеКонтрольныеТочкиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", НачалоДня(АктивныеНаДату));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонтрольныеТочкиСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();

	Возврат КонтрольныеТочкиСПодписчиками;

КонецФункции

// Считывает документы завершившиеся на указанную дату с подписчиками
Функция ВыбратьЗавершившиесяДокументыСПодписчиками(ЗавершившиесяНаДату)

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц, Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента, "Документы");

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПредприятия.Ссылка КАК Документ,
	|	ДокументыПредприятия.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	ВЫБОР
	|		КОГДА СотрудникиПользователей.Сотрудник ЕСТЬ NULL
	|			ТОГДА ДокументыПредприятия.Ответственный
	|		ИНАЧЕ СотрудникиПользователей.Пользователь
	|	КОНЕЦ КАК Ответственный
	|ПОМЕСТИТЬ ЗавершенныеДокументыПредприятия
	|ИЗ
	|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО ДокументыПредприятия.Ответственный = СотрудникиПользователей.Сотрудник
	|ГДЕ
	|	НЕ ДокументыПредприятия.ПометкаУдаления
	|	И ДокументыПредприятия.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И ДокументыПредприятия.Ответственный <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ДокументыПредприятия.Ответственный <> НЕОПРЕДЕЛЕНО
	|	И ДокументыПредприятия.ВидДокумента.УчитыватьСрокДействия
	|	И НЕ ДокументыПредприятия.НеДействует
	|	И ДокументыПредприятия.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КОНЕЦПЕРИОДА(ДокументыПредприятия.ДатаОкончанияДействия, ДЕНЬ) < КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗавершенныеДокументыПредприятия.Документ КАК Документ,
	|	Подписчики.ПолучательУведомления КАК Подписчик,
	|	ЗавершенныеДокументыПредприятия.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
	|	ЗавершенныеДокументыПредприятия.Документ КАК ОбъектПодписки
	|ИЗ
	|	ЗавершенныеДокументыПредприятия КАК ЗавершенныеДокументыПредприятия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
	|		ПО ЗавершенныеДокументыПредприятия.Ответственный = Подписчики.Подписчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
	|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ЗакончилсяСрокДействияДокумента))
	|			И ЗавершенныеДокументыПредприятия.Документ = ОбработанныеУведомления.ОбъектУведомления
	|			И (Подписчики.ПолучательУведомления = ОбработанныеУведомления.Пользователь)
	|			И ОбработанныеУведомления.ДатаОбработки = ЗавершенныеДокументыПредприятия.ДатаОкончанияДействия
	|ГДЕ
	|	ОбработанныеУведомления.ДатаОбработки ЕСТЬ NULL";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", ЗавершившиесяНаДату);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДокументыСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();

	Возврат ДокументыСПодписчиками;

КонецФункции

// Считывает просроченные на указанную дату контроли
Функция ВыбратьПросроченныйКонтрольСПодписчиками(СрокИсполнения)

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц, Перечисления.СобытияУведомлений.ПросроченКонтроль, "Контроль");

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контроль.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Контроль.Контролер) = ТИП(Справочник.Сотрудники)
	|			ТОГДА СотрудникиПользователей.Пользователь
	|		ИНАЧЕ Контроль.Контролер
	|	КОНЕЦ КАК Исполнитель,
	|	Контроль.СрокИсполнения КАК СрокИсполнения
	|ПОМЕСТИТЬ ПросроченныеКонтроли
	|ИЗ
	|	Справочник.Контроль КАК Контроль
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО Контроль.Контролер = СотрудникиПользователей.Сотрудник
	|ГДЕ
	|	НЕ Контроль.ПометкаУдаления
	|	И Контроль.ПоставленНаКонтроль
	|	И НЕ Контроль.СнятСКонтроля
	|	И Контроль.СрокИсполнения < &Дата
	|	И Контроль.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
	|	НастройкиУведомлений.Пользователь КАК Подписчик
	|ПОМЕСТИТЬ ОбъектыСПодпиской
	|ИЗ
	|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
	|ГДЕ
	|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
	|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченКонтроль)
	|	И НастройкиУведомлений.Значение = ИСТИНА
	|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченныеКонтроли.Ссылка КАК Контроль,
	|	Подписчики.ПолучательУведомления КАК Подписчик,
	|	ПросроченныеКонтроли.СрокИсполнения КАК СрокИсполнения,
	|	ПросроченныеКонтроли.Ссылка КАК ОбъектПодписки
	|ПОМЕСТИТЬ ПросроченныеКонтролиСПодпиской
	|ИЗ
	|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
	|		ПО ПросроченныеКонтроли.Исполнитель = Подписчики.Подписчик
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПросроченныеКонтроли.Ссылка,
	|	ОбъектыСПодпиской.Подписчик,
	|	ПросроченныеКонтроли.СрокИсполнения,
	|	ПросроченныеКонтроли.Ссылка
	|ИЗ
	|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
	|		ПО ПросроченныеКонтроли.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПросроченныеКонтроли.Ссылка,
	|	ОбъектыСПодпиской.Подписчик,
	|	ПросроченныеКонтроли.СрокИсполнения,
	|	ПросроченныеКонтроли.Исполнитель
	|ИЗ
	|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
	|		ПО ПросроченныеКонтроли.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПросроченныеКонтроли.Ссылка,
	|	ОбъектыСПодпиской.Подписчик,
	|	ПросроченныеКонтроли.СрокИсполнения,
	|	ПросроченныеКонтроли.Исполнитель
	|ИЗ
	|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО ПросроченныеКонтроли.Исполнитель = СотрудникиПользователей.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
	|		ПО СотрудникиПользователей.Сотрудник = ИсполнителиРолейИДелегаты.ИсполнительДелегат
	|		И (ИсполнителиРолейИДелегаты.РольСотрудник ССЫЛКА Справочник.ПолныеРоли)
	|		И (ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Контроль""))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
	|		ПО ПросроченныеКонтроли.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченныеКонтролиСПодпиской.Контроль КАК Контроль,
	|	ПросроченныеКонтролиСПодпиской.Подписчик КАК Подписчик,
	|	ПросроченныеКонтролиСПодпиской.СрокИсполнения КАК СрокИсполнения,
	|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
	|	ПросроченныеКонтролиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
	|ИЗ
	|	ПросроченныеКонтролиСПодпиской КАК ПросроченныеКонтролиСПодпиской
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
	|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченКонтроль))
	|		И ПросроченныеКонтролиСПодпиской.Контроль = ОбработанныеУведомления.ОбъектУведомления
	|		И ПросроченныеКонтролиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", НачалоДня(СрокИсполнения));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ПросроченныеЗадачи = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();

	Возврат ПросроченныеЗадачи;

КонецФункции

// Считывает просроченные на указанную дату контрольные точки.
Функция ВыбратьПросроченныеКонтрольныеТочкиСПодписчиками(ПросроченныеНаДату)

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц, Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка, "");

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КонтрольныеТочки.Ссылка КАК Ссылка,
	|	КонтрольныеТочки.Ответственный КАК Ответственный,
	|	КонтрольныеТочки.ПлановыйСрок КАК ПлановыйСрок,
	|	СотрудникиПользователей.Пользователь КАК ОтветственныйПользователь
	|ПОМЕСТИТЬ ПросроченныеКонтрольныеТочки
	|ИЗ
	|	Справочник.КонтрольныеТочки КАК КонтрольныеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО КонтрольныеТочки.Ответственный = СотрудникиПользователей.Сотрудник
	|ГДЕ
	|	КонтрольныеТочки.ПометкаУдаления = ЛОЖЬ
	|	И КонтрольныеТочки.Исполнено = ЛОЖЬ
	|	И КонтрольныеТочки.ПлановыйСрок < &Дата
	|	И КонтрольныеТочки.ПлановыйСрок <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
	|	НастройкиУведомлений.Пользователь КАК Подписчик
	|ПОМЕСТИТЬ ОбъектыСПодпиской
	|ИЗ
	|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
	|ГДЕ
	|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
	|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаКонтрольнаяТочка)
	|	И НастройкиУведомлений.Значение = ИСТИНА
	|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченныеКонтрольныеТочки.Ссылка КАК КонтрольнаяТочка,
	|	Подписчики.ПолучательУведомления КАК Подписчик,
	|	ПросроченныеКонтрольныеТочки.ПлановыйСрок КАК ПлановыйСрок,
	|	ПросроченныеКонтрольныеТочки.Ссылка КАК ОбъектПодписки
	|ПОМЕСТИТЬ ПросроченныеКонтрольныеТочкиСПодпиской
	|ИЗ
	|	ПросроченныеКонтрольныеТочки КАК ПросроченныеКонтрольныеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
	|		ПО ПросроченныеКонтрольныеТочки.ОтветственныйПользователь = Подписчики.Подписчик
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПросроченныеКонтрольныеТочки.Ссылка,
	|	ОбъектыСПодпиской.Подписчик,
	|	ПросроченныеКонтрольныеТочки.ПлановыйСрок,
	|	ПросроченныеКонтрольныеТочки.Ссылка
	|ИЗ
	|	ПросроченныеКонтрольныеТочки КАК ПросроченныеКонтрольныеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
	|		ПО ПросроченныеКонтрольныеТочки.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченныеКонтрольныеТочкиСПодпиской.КонтрольнаяТочка КАК КонтрольнаяТочка,
	|	ПросроченныеКонтрольныеТочкиСПодпиской.Подписчик КАК Подписчик,
	|	ПросроченныеКонтрольныеТочкиСПодпиской.ПлановыйСрок КАК ПлановыйСрок,
	|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
	|	ПросроченныеКонтрольныеТочкиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
	|ИЗ
	|	ПросроченныеКонтрольныеТочкиСПодпиской КАК ПросроченныеКонтрольныеТочкиСПодпиской
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
	|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаКонтрольнаяТочка))
	|			И ПросроченныеКонтрольныеТочкиСПодпиской.КонтрольнаяТочка = ОбработанныеУведомления.ОбъектУведомления
	|			И ПросроченныеКонтрольныеТочкиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ПросроченныеНаДату));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонтрольныеТочкиСПодписчиками = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();

	Возврат КонтрольныеТочкиСПодписчиками;

КонецФункции

// Считывает просроченные на указанную дату оценки контрольных точки.
Функция ВыбратьПросроченныеОценкиКонтрольныхТочекСПодписчиками(ПросроченныеНаДату)

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц, Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки, "");

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КонтрольныеТочки.Ссылка КАК Ссылка,
	|	КонтрольныеТочки.Ответственный КАК Ответственный,
	|	КонтрольныеТочки.ПлановыйСрок КАК ПлановыйСрок,
	|	СотрудникиПользователей.Пользователь КАК ОтветственныйПользователь
	|ПОМЕСТИТЬ ПросроченныеОценкиКонтрольныхТочек
	|ИЗ
	|	Справочник.КонтрольныеТочки КАК КонтрольныеТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОценкиКонтрольныхТочек.СрезПоследних КАК ОценкиКонтрольныхТочекСрезПоследних
	|		ПО КонтрольныеТочки.Ссылка = ОценкиКонтрольныхТочекСрезПоследних.КонтрольнаяТочка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО КонтрольныеТочки.Ответственный = СотрудникиПользователей.Сотрудник
	|ГДЕ
	|	КонтрольныеТочки.ПометкаУдаления = ЛОЖЬ
	|	И КонтрольныеТочки.Исполнено = ЛОЖЬ
	|	И ОценкиКонтрольныхТочекСрезПоследних.Период <= &Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
	|	НастройкиУведомлений.Пользователь КАК Подписчик
	|ПОМЕСТИТЬ ОбъектыСПодпиской
	|ИЗ
	|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
	|ГДЕ
	|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
	|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки)
	|	И НастройкиУведомлений.Значение = ИСТИНА
	|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченныеОценкиКонтрольныхТочек.Ссылка КАК КонтрольнаяТочка,
	|	Подписчики.ПолучательУведомления КАК Подписчик,
	|	ПросроченныеОценкиКонтрольныхТочек.ПлановыйСрок КАК ПлановыйСрок,
	|	ПросроченныеОценкиКонтрольныхТочек.Ссылка КАК ОбъектПодписки
	|ПОМЕСТИТЬ ПросроченныеОценкиКонтрольныхТочекСПодпиской
	|ИЗ
	|	ПросроченныеОценкиКонтрольныхТочек КАК ПросроченныеОценкиКонтрольныхТочек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
	|		ПО ПросроченныеОценкиКонтрольныхТочек.ОтветственныйПользователь = Подписчики.Подписчик
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПросроченныеОценкиКонтрольныхТочек.Ссылка,
	|	ОбъектыСПодпиской.Подписчик,
	|	ПросроченныеОценкиКонтрольныхТочек.ПлановыйСрок,
	|	ПросроченныеОценкиКонтрольныхТочек.Ссылка
	|ИЗ
	|	ПросроченныеОценкиКонтрольныхТочек КАК ПросроченныеОценкиКонтрольныхТочек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
	|		ПО ПросроченныеОценкиКонтрольныхТочек.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченныеОценкиКонтрольныхТочекСПодпиской.КонтрольнаяТочка КАК КонтрольнаяТочка,
	|	ПросроченныеОценкиКонтрольныхТочекСПодпиской.Подписчик КАК Подписчик,
	|	ПросроченныеОценкиКонтрольныхТочекСПодпиской.ПлановыйСрок КАК ПлановыйСрок,
	|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
	|	ПросроченныеОценкиКонтрольныхТочекСПодпиской.ОбъектПодписки КАК ОбъектПодписки
	|ИЗ
	|	ПросроченныеОценкиКонтрольныхТочекСПодпиской КАК ПросроченныеОценкиКонтрольныхТочекСПодпиской
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
	|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки))
	|			И ПросроченныеОценкиКонтрольныхТочекСПодпиской.КонтрольнаяТочка = ОбработанныеУведомления.ОбъектУведомления
	|			И ПросроченныеОценкиКонтрольныхТочекСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ПросроченныеНаДату) - 604800);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ПросроченныеЗадачи = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();

	Возврат ПросроченныеЗадачи;

КонецФункции

// Добавляет бизнес-процесс в массив и заполняет таблицу родителей
Процедура ДобавитьВМассивСЗаполнениемРодителей(ОбъектПодписки, ОбъектыПодписки, БизнесПроцессыРодители, ОтказыОтПодписки)

	МассивРодителей = Новый Массив;
	ПолучитьРодителейСПроверкойПодписки(
		ОбъектПодписки, МассивРодителей, ОтказыОтПодписки, ОбъектПодписки);

	Для Каждого Родитель Из МассивРодителей Цикл

		НоваяСтрока = БизнесПроцессыРодители.Добавить();
		НоваяСтрока.ОбъектПодписки = ОбъектПодписки;
		НоваяСтрока.Родитель = Родитель;

	КонецЦикла;

	ОбъектыПодписки.Добавить(ОбъектПодписки);

КонецПроцедуры

// Добавляет бизнес-процесс в массив с проверкой подписки, дочерних и ведущих процессов.
// Если в массиве уже есть дочерние бизнес-процессы с подпиской, то удаляет их.
// Если в массиве уже есть ведущий бизнес-процесс с подпиской, то не добавляет.
Процедура ДобавитьВМассивСПроверкойПодписки(ОбъектУведомления, ОбъектПодписки, ОбъектыПодписки, БизнесПроцессыРодители,
	ОтказыОтПодписки, ОбъектыУведомленияСПодпиской, ОбъектыУведомленияСОтказом)

	Если ЕстьОтказОтПодпискиВИерархии(ОбъектУведомления, ОбъектПодписки, ОтказыОтПодписки) Тогда

		Если ОбъектыУведомленияСПодпиской.Найти(ОбъектУведомления) = Неопределено Тогда
			ДобавитьЗначениеВМассив(ОбъектУведомления, ОбъектыУведомленияСОтказом);
		КонецЕсли;

		Возврат;

	КонецЕсли;

	Если ЯвляетсяПотомкомОбъектовПодписки(ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки) Тогда
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура;
	Отбор.Вставить("Родитель", ОбъектПодписки);
	НайденныеПроцессыПотомки = БизнесПроцессыРодители.НайтиСтроки(Отбор);
	Для Каждого СтрокаНайденныйПроцессПотомок Из НайденныеПроцессыПотомки Цикл

		ПроцессПотомок = СтрокаНайденныйПроцессПотомок.ОбъектПодписки;

		ИндексПотомкаВМассиве = ОбъектыПодписки.Найти(ПроцессПотомок);
		Если ИндексПотомкаВМассиве <> Неопределено Тогда
			ОбъектыПодписки.Удалить(ИндексПотомкаВМассиве);
		КонецЕсли;

		Отбор = Новый Структура;
		Отбор.Вставить("ОбъектПодписки", ПроцессПотомок);
		СтрокиПроцессаПотомка = БизнесПроцессыРодители.НайтиСтроки(Отбор);
		Для Каждого СтрокаПроцессаПотомка Из СтрокиПроцессаПотомка Цикл
			БизнесПроцессыРодители.Удалить(СтрокаПроцессаПотомка);
		КонецЦикла;

	КонецЦикла;

	ИндексВМассивеОтказов = ОбъектыУведомленияСОтказом.Найти(ОбъектУведомления);
	Если ИндексВМассивеОтказов <> Неопределено Тогда
		ОбъектыУведомленияСОтказом.Удалить(ИндексВМассивеОтказов);
	КонецЕсли;

	ДобавитьЗначениеВМассив(ОбъектУведомления, ОбъектыУведомленияСПодпиской);

	ДобавитьВМассивСЗаполнениемРодителей(
		ОбъектПодписки, ОбъектыПодписки, БизнесПроцессыРодители, ОтказыОтПодписки);

КонецПроцедуры

// Добавляет значение в массив, если такого значения в нем еще нет
Процедура ДобавитьЗначениеВМассив(Значение, Массив, ДобавленоЗначениеВМассив = Ложь)

	Если Массив.Найти(Значение) = Неопределено Тогда
		Массив.Добавить(Значение);
		ДобавленоЗначениеВМассив = Истина;
	Иначе
		ДобавленоЗначениеВМассив = Ложь;
	КонецЕсли;

КонецПроцедуры

// Определяет тип объекта и вызывает соответствующее добавление уведомления
Процедура ДобавитьУведомлениеПоОбъекту(
	ПроизошедшееСобытие,
	ОбъектПодписки,
	ВидСобытия,
	Объект,
	ОбработанныеОбъекты = Неопределено)
	
	Если Объект = Неопределено Тогда
		
		Объект = ОбъектПодписки;
		
	КонецЕсли;
	
	Если ОбработанныеОбъекты = Неопределено Тогда
		ОбработанныеОбъекты = Новый Массив;
	КонецЕсли;
	Если ОбработанныеОбъекты.Найти(ОбъектПодписки) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработанныеОбъекты.Добавить(ОбъектПодписки);
	
	Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		ДобавитьУведомленияПоСообщению(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		ДобавитьУведомленияПоТеме(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Проекты") Тогда
		
		ДобавитьУведомленияПоПроекту(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		ДобавитьУведомленияПоПроектнойЗадаче(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ДобавитьУведомленияПоЗадачеИсполнителя(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект, ОбработанныеОбъекты);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Файлы") Тогда
		
		ДобавитьУведомленияПоФайлу(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		
		ДобавитьУведомленияПоПапкеФайлов(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		ТипДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектПодписки,
			"ВидДокумента.ЯвляетсяВходящейКорреспонденцией,
			|ВидДокумента.ЯвляетсяИсходящейКорреспонденцией");
		
		Если ТипДокумента.ВидДокументаЯвляетсяВходящейКорреспонденцией Тогда
		
			ДобавитьУведомленияПоВходящемуДокументу(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
			
		ИначеЕсли ТипДокумента.ВидДокументаЯвляетсяИсходящейКорреспонденцией Тогда 
			
			ДобавитьУведомленияПоИсходящемуДокументу(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
			
		Иначе
			
			ДобавитьУведомленияПоВнутреннемуДокументу(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиДокументов") Тогда
		
		ДобавитьУведомленияПоПапкеДокументовПредприятия(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		ДобавитьУведомленияПоМероприятию(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.КатегорииДанных") Тогда
		
		ДобавитьУведомленияПоКатегорииДанных(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ДобавитьУведомленияПоПользователю(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		
		ДобавитьУведомленияПоРабочейГруппе(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ОбработкиОбъектов") Тогда
		
		ДобавитьУведомленияПоОбработкеОбъекта(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ДокументСсылка.Отсутствие") Тогда
		
		ДобавитьУведомленияПоОтсутствию(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ДобавитьУведомленияПоСотруднику(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТерриторииИПомещения") Тогда
		
		ДобавитьУведомленияПоПомещению(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ДокументСсылка.Бронь") Тогда
		
		ДобавитьУведомленияПоБронированию(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПоказателиПроцессов") Тогда
		
		ДобавитьУведомленияПоПоказателюПроцесса(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ЭтоПоддерживаемыйБизнесПроцесс(ОбъектПодписки) Тогда
		
		ДобавитьУведомленияПоБизнесПроцессу(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект, ОбработанныеОбъекты);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		ДобавитьУведомленияПоДействиюЗадачи(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ДокументСсылка.Задача") Тогда
		
		ДобавитьУведомленияПоЗадаче(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ЗамещающиеИПомощники") Тогда
		
		ДобавитьУведомленияПоЗамещению(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ДокументСсылка.ПередачаДелВАрхив") Тогда
		
		ДобавитьУведомленияПоПередачиДелВАрхив(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействие(ОбъектПодписки) Тогда
	
		ДобавитьУведомленияПоДействиюОбработки(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);

	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(ВидСобытия, Объект, ОбъектПодписки);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по бизнес-процессам
Процедура ДобавитьУведомленияПоБизнесПроцессу(ПроизошедшееСобытие, БизнесПроцесс, ВидСобытия, Объект, ОбработанныеОбъекты)
	
	АвторСобытияПользователь = Сотрудники.ЛюбойПользовательСотрудника(
		ПроизошедшееСобытие.Автор);
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачиПроцесса Тогда
		
		ЭтоВедущаяЗадача = (ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			И Не ЗначениеЗаполнено(Объект.ТекущийИсполнитель));
		Если Не ЭтоВедущаяЗадача Тогда

			Если ЗначениеЗаполнено(БизнесПроцесс.Автор) Тогда

				АвторПроцесса = Сотрудники.ЛюбойПользовательСотрудника(БизнесПроцесс.Автор);

				Если АвторПроцесса <> АвторСобытияПользователь Тогда
					РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
						АвторПроцесса, ВидСобытия, Объект, БизнесПроцесс);
				КонецЕсли;
			КонецЕсли;

			ТипБизнесПроцесса = ТипЗнч(БизнесПроцесс);
			Если (ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Исполнение")) Тогда
				ОтветственноеИсполнение = БизнесПроцесс.Исполнители.Найти(Истина, "Ответственный");
				Если ОтветственноеИсполнение <> Неопределено Тогда
					
					ОтветственныйИсполнитель =
						Сотрудники.ЛюбойПользовательСотрудника(
						ОтветственноеИсполнение.Исполнитель);

					Если ОтветственныйИсполнитель <> АвторСобытияПользователь Тогда
						РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
							ОтветственныйИсполнитель, ВидСобытия, Объект, БизнесПроцесс);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если (ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Исполнение")
					Или ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.КомплексныйПроцесс"))
				И ЗначениеЗаполнено(БизнесПроцесс.Контролер) Тогда
				
				КонтролерПроцесса = 
					Сотрудники.ЛюбойПользовательСотрудника(БизнесПроцесс.Контролер);
				
				Если КонтролерПроцесса <> АвторСобытияПользователь Тогда
					РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
						КонтролерПроцесса, ВидСобытия, Объект, БизнесПроцесс);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Если ЗначениеЗаполнено(БизнесПроцесс.ВедущаяЗадача) Тогда
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				БизнесПроцесс.ВедущаяЗадача,
				ВидСобытия,
				БизнесПроцесс.ВедущаяЗадача,
				ОбработанныеОбъекты);
		КонецЕсли;

		Если ЗначениеЗаполнено(БизнесПроцесс.ГлавнаяЗадача) Тогда
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				БизнесПроцесс.ГлавнаяЗадача,
				ВидСобытия,
				БизнесПроцесс.ГлавнаяЗадача,
				ОбработанныеОбъекты);
		КонецЕсли;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			БизнесПроцесс);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса 
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
		
		АвторПроцесса = Сотрудники.ЛюбойПользовательСотрудника(
			БизнесПроцесс.Автор);
		
		Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
			И ЗначениеЗаполнено(БизнесПроцесс.Автор)
			И АвторПроцесса <> АвторСобытияПользователь Тогда
			
			Обработка = 
				РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(БизнесПроцесс);
			Если Не ЗначениеЗаполнено(Обработка) Тогда
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
					АвторПроцесса,
					ВидСобытия,
					Объект,
					БизнесПроцесс);
			КонецЕсли;

		КонецЕсли;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			БизнесПроцесс);

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса Тогда

		Если БизнесПроцессыИЗадачиСервер.ПроцессЗавершенСПоложительнымРезультатом(БизнесПроцесс)
				И Не ЗначениеЗаполнено(РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(БизнесПроцесс)) Тогда

			ОзнакамливаемыйСРезультатом = БизнесПроцессыИЗадачиСервер.ОзнакамливаемыйСРезультатом(БизнесПроцесс);
			
			Для Каждого Пользователь Из РаботаСЗадачами.ПользователиИсполнителей(ОзнакамливаемыйСРезультатом) Цикл

				Если Пользователь = АвторСобытияПользователь Тогда
					Продолжить;
				КонецЕсли;

				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
					Пользователь,
					Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомПроцесса,
					Объект,
					БизнесПроцесс);

			КонецЦикла;

		КонецЕсли;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			БизнесПроцесс);
		
	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			БизнесПроцесс);
		
	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по бронированию
Процедура ДобавитьУведомленияПоБронированию(ПроизошедшееСобытие, Бронь, ВидСобытия, Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаБрони Тогда
		
		ПользовательАвтораСобытия = Сотрудники.ПользовательСотрудника(ПроизошедшееСобытие.Автор);
		ПользовательСотрудника = Сотрудники.ПользовательСотрудника(Бронь.Сотрудник);
		ПользовательАвтораБрони = Сотрудники.ПользовательСотрудника(Бронь.Автор);
		
		ЭтоФоноваяОперация = ПроизошедшееСобытие.КонтекстСобытия.Получить();
		Если ЭтоФоноваяОперация = Неопределено Тогда
			ЭтоФоноваяОперация = Ложь;
		КонецЕсли;
		
		Если ПользовательАвтораСобытия <> ПользовательСотрудника Или ЭтоФоноваяОперация Тогда
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				ПользовательСотрудника,
				ВидСобытия,
				Объект,
				Бронь);
		КонецЕсли;
		
		Если ПользовательАвтораСобытия <> ПользовательАвтораБрони Или ЭтоФоноваяОперация Тогда
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				ПользовательАвтораБрони,
				ВидСобытия,
				Объект,
				Бронь);
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия, Объект, Бронь);
	ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Бронь.Помещение, ВидСобытия, Объект);

КонецПроцедуры

// Добавляет уведомление по внутреннему документу
Процедура ДобавитьУведомленияПоВнутреннемуДокументу(ПроизошедшееСобытие, ДокументПредприятия, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеДокумента Тогда

		ДобавитьУведомлениеПоОбъекту(
			ПроизошедшееСобытие, ДокументПредприятия.Папка, ВидСобытия, Объект);

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение документа предприятия
		ДобавитьУведомлениеОНовомСообщении(ДокументПредприятия.Подготовил, Объект);
		ДобавитьУведомлениеОНовомСообщении(ДокументПредприятия.Ответственный, Объект);
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, ДокументПредприятия);

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного Тогда

		ДобавитьУведомленияПоНазначениюОтветственного(ПроизошедшееСобытие, ДокументПредприятия);

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеСостоянияДокументаПоЭДО Тогда

		ДанныеИзмененияСостоянияЭДО = ПроизошедшееСобытие.КонтекстСобытия.Получить();
		Если ДанныеИзмененияСостоянияЭДО.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
			И Перечисления.СостоянияЭДОДокументооборот.ИсходящийОтклоненКонтрагентом(
			ДанныеИзмененияСостоянияЭДО.НовоеСостояниеЭДО) И Не Перечисления.СостоянияЭДОДокументооборот.ИсходящийОтклоненКонтрагентом(
				ДанныеИзмененияСостоянияЭДО.СтароеСостояниеЭДО) Тогда

			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Сотрудники.ЛюбойПользовательСотрудника(ДокументПредприятия.Ответственный),
				Перечисления.СобытияУведомлений.ОтклонениеДокументаКонтрагентомПоЭДО, ДокументПредприятия,
				ДокументПредприятия);

			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
				Перечисления.СобытияУведомлений.ОтклонениеДокументаКонтрагентомПоЭДО, ДокументПредприятия,
				ДокументПредприятия.ВидДокумента);

		ИначеЕсли Перечисления.СостоянияЭДОДокументооборот.ОбменВыполненУспешно(
			ДанныеИзмененияСостоянияЭДО.НовоеСостояниеЭДО) И Не Перечисления.СостоянияЭДОДокументооборот.ОбменВыполненУспешно(
			ДанныеИзмененияСостоянияЭДО.СтароеСостояниеЭДО) Тогда

			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Сотрудники.ЛюбойПользовательСотрудника(ДокументПредприятия.Ответственный),
				Перечисления.СобытияУведомлений.ОбменПоЭДОВыполненУспешно, ДокументПредприятия, ДокументПредприятия);

			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
				Перечисления.СобытияУведомлений.ОбменПоЭДОВыполненУспешно, ДокументПредприятия,
				ДокументПредприятия.ВидДокумента);

		КонецЕсли;

	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, ДокументПредприятия);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по входящему документу
Процедура ДобавитьУведомленияПоВходящемуДокументу(ПроизошедшееСобытие, ВходящийДокумент, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение входящего документа
		ДобавитьУведомлениеОНовомСообщении(ВходящийДокумент.Адресат, Объект);
		ДобавитьУведомлениеОНовомСообщении(ВходящийДокумент.Ответственный, Объект);
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, ВходящийДокумент);

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного Тогда

		ДобавитьУведомленияПоНазначениюОтветственного(ПроизошедшееСобытие, ВходящийДокумент);

	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, ВходящийДокумент);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по группе пользователей
Процедура ДобавитьУведомленияПоРабочейГруппе(ПроизошедшееСобытие, РабочаяГруппа, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеОтсутствия Или ВидСобытия
		= Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия Тогда

		Если ЗначениеЗаполнено(РабочаяГруппа.Родитель) Тогда
			ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, РабочаяГруппа.Родитель, ВидСобытия, Объект);
		КонецЕсли;

	КонецЕсли;

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия, Объект, РабочаяГруппа);

КонецПроцедуры

// Добавляет уведомление по действию задачи.
Процедура ДобавитьУведомленияПоДействиюЗадачи(ПроизошедшееСобытие, ДействиеЗадачи, ВидСобытия, Объект,
	ПараметрыСобытия = Неопределено)
	
	АвторСобытияПользователь = Сотрудники.ЛюбойПользовательСотрудника(
		ПроизошедшееСобытие.Автор);
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.НоваяЗадача 
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаЗадачи
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОткладываниеЗадачи Тогда

		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи, "Исполнитель, Источник");
		
		Исполнитель = РеквизитыДействия.Исполнитель;
		Для Каждого Пользователь Из РаботаСЗадачами.ПользователиИсполнителей(Исполнитель) Цикл

			Если Не ЗначениеЗаполнено(РеквизитыДействия.Источник) И АвторСобытияПользователь = Пользователь Тогда
				Продолжить;
			КонецЕсли;

			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Пользователь, ВидСобытия, ДействиеЗадачи, ДействиеЗадачи, "", Ложь, Неопределено);

		КонецЦикла;

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи,
			"Исполнитель, КтоОтметил, ФактическийИсполнитель");
		
		Если ЗначениеЗаполнено(РеквизитыДействия.ФактическийИсполнитель) Тогда
			РеквизитыФактическогоИсполнителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				РеквизитыДействия.ФактическийИсполнитель,
				"План, Факт, Отметил");
			План = Сотрудники.ПользовательСотрудника(РеквизитыФактическогоИсполнителя.План);
			Факт = Сотрудники.ПользовательСотрудника(РеквизитыФактическогоИсполнителя.Факт);
			Отметил = Сотрудники.ПользовательСотрудника(РеквизитыФактическогоИсполнителя.Отметил);
		Иначе
			План = Сотрудники.ПользовательСотрудника(РеквизитыДействия.Исполнитель);
			Факт = Сотрудники.ПользовательСотрудника(РеквизитыДействия.Исполнитель);
			Отметил = Сотрудники.ПользовательСотрудника(РеквизитыДействия.КтоОтметил);
		КонецЕсли;
		
		Если ТипЗнч(План) = Тип("СправочникСсылка.Пользователи")
			И План <> Отметил Тогда
			
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				План,
				Перечисления.СобытияУведомлений.ВыполнениеМоейЗадачи,
				Объект,
				ДействиеЗадачи);
			
		КонецЕсли;
		
		Если ТипЗнч(Факт) = Тип("СправочникСсылка.Пользователи")
			И Факт <> План
			И Факт <> Отметил Тогда
			
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Факт,
				Перечисления.СобытияУведомлений.ВыполнениеМоейЗадачи,
				Объект,
				ДействиеЗадачи);
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда

		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);

		ДополнительноеОписание = "";
		Если ПараметрыСобытия.Свойство("БылИсполнитель") И ПараметрыСобытия.Свойство("СталИсполнитель")
			И ЗначениеЗаполнено(ПараметрыСобытия.БылИсполнитель) И ЗначениеЗаполнено(ПараметрыСобытия.СталИсполнитель) Тогда

			КодЯзыка = Сотрудники.КодЯзыкаСотрудника(ПараметрыСобытия.БылИсполнитель);

			ДополнительноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Перенаправлена от %1 к %2.'", КодЯзыка), ПараметрыСобытия.БылИсполнитель,
				ПараметрыСобытия.СталИсполнитель);

			Если (ТипЗнч(ПараметрыСобытия.БылИсполнитель) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(
				ПараметрыСобытия.БылИсполнитель) = Тип("СправочникСсылка.Сотрудники")) Тогда

				БылИсполнительПользователь = Сотрудники.ЛюбойПользовательСотрудника(
						ПараметрыСобытия.БылИсполнитель);

				Если АвторСобытияПользователь <> БылИсполнительПользователь Тогда
					РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
						БылИсполнительПользователь, Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи, Объект,
						ДействиеЗадачи, ДополнительноеОписание);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
		
		КонтекстСобытия = ПроизошедшееСобытие.КонтекстСобытия.Получить();
		
		СамИсполнительОтменил = Сотрудники.ЭтоСотрудникиОдногоФизЛица(
			КонтекстСобытия.Исполнитель, 
			КонтекстСобытия.КтоОтметил);
		
		Для Каждого АдресатУведомления Из КонтекстСобытия.АдресатыУведомления Цикл
			
			КодЯзыка = Сотрудники.КодЯзыкаСотрудника(АдресатУведомления);
			
			Если СамИсполнительОтменил Тогда
				ДополнительноеОписание = СтрШаблон(
					НСтр("ru = '%1 в %2 %3 отменил(а) выполнение задачи ""%4"".'", КодЯзыка),
					Формат(КонтекстСобытия.Дата, "ДЛФ=D;"),
					Формат(КонтекстСобытия.Дата, "ДЛФ=T;"),
					РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(КонтекстСобытия.Исполнитель),
					ДействиеЗадачи);
			Иначе
				ДополнительноеОписание = СтрШаблон(
					НСтр("ru = '%1 в %2 %3 отменил(а) выполнение задачи ""%4"" для исполнителя %5.'", КодЯзыка),
					Формат(КонтекстСобытия.Дата, "ДЛФ=D;"),
					Формат(КонтекстСобытия.Дата, "ДЛФ=T;"),
					РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(КонтекстСобытия.КтоОтметил),
					ДействиеЗадачи,
					РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(КонтекстСобытия.Исполнитель));
			КонецЕсли;
			
			КомуПользователь = Сотрудники.ЛюбойПользовательСотрудника(АдресатУведомления);
			
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				КомуПользователь,
				Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи,
				ДействиеЗадачи,
				ДействиеЗадачи,
				ДополнительноеОписание);
				
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗадачи Тогда
		
		Если ПараметрыСобытия = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Уведомление по изменению реквизитов задачи без параметров события.'");
		КонецЕсли;
		
		// Если поменялось наименование задачи, то при формировании темы письма стандартно будет браться новое название
		// Это получается несколько странно. Уведомляем о том, что изменилась задача с новым наименованием.
		
		СтароеНаименованиеДействияЗадачи =
			РегистрыСведений.ИсторияЗадач.ПредставлениеДействияЗадачиДляУведомления(ПараметрыСобытия, ДействиеЗадачи);
		
		ОписаниеHTML = 
			РегистрыСведений.ИсторияЗадач.ОписаниеИзмененияВажныхРеквизитовHTML(ПараметрыСобытия, ДействиеЗадачи);
		
		ДополнительноеОписание = СтароеНаименованиеДействияЗадачи 
			+ РазделительДополнительногоОписанияПриИзмененииЗадачи()
			+ ОписаниеHTML;
		
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи, "Исполнитель");
		
		Исполнитель = РеквизитыДействия.Исполнитель;
		Для Каждого Пользователь Из РаботаСЗадачами.ПользователиИсполнителей(Исполнитель) Цикл

			Если АвторСобытияПользователь = Пользователь Тогда
				Продолжить;
			КонецЕсли;

			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Пользователь, ВидСобытия, ДействиеЗадачи, ДействиеЗадачи, ДополнительноеОписание, Ложь, Неопределено);

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по действию задачи.
Процедура ДобавитьУведомленияПоЗадаче(ПроизошедшееСобытие, Задача, ВидСобытия, Объект)
	
	АвторСобытияПользователь = Сотрудники.ЛюбойПользовательСотрудника(
		ПроизошедшееСобытие.Автор);
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаЗадачи Или ВидСобытия
		= Справочники.ВидыБизнесСобытий.ОткладываниеЗадачи Тогда

		Автор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Автор");
		Для Каждого Пользователь Из РаботаСЗадачами.ПользователиИсполнителей(Автор) Цикл

			Если АвторСобытияПользователь = Пользователь Тогда
				Продолжить;
			КонецЕсли;

			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Пользователь, ВидСобытия, Задача, Задача, "", Ложь, Неопределено);

		КонецЦикла;

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗадачи Тогда
		
		ПараметрыСобытия = ПроизошедшееСобытие.КонтекстСобытия.Получить();
		ДействияЗадачи = ПараметрыСобытия.КогоУведомить;
		Для Каждого ДействиеЗадачи Из ДействияЗадачи Цикл
			ДобавитьУведомленияПоДействиюЗадачи(ПроизошедшееСобытие, ДействиеЗадачи, ВидСобытия, Объект,
				ПараметрыСобытия);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по задаче исполнителя
Процедура ДобавитьУведомленияПоЗадачеИсполнителя(ПроизошедшееСобытие, ЗадачаИсполнителя, ВидСобытия, Объект,
	ОбработанныеОбъекты)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачиПроцесса Тогда

		Если ЗначениеЗаполнено(ЗадачаИсполнителя.БизнесПроцесс) Тогда
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие, ЗадачаИсполнителя.БизнесПроцесс, ВидСобытия, Объект, ОбработанныеОбъекты);
		КонецЕсли;

	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, ЗадачаИсполнителя);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по исходящему документу
Процедура ДобавитьУведомленияПоИсходящемуДокументу(ПроизошедшееСобытие, ИсходящийДокумент, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение документа предприятия
		ДобавитьУведомлениеОНовомСообщении(ИсходящийДокумент.Подготовил, Объект);
		ДобавитьУведомлениеОНовомСообщении(ИсходящийДокумент.Подписал, Объект);
		ДобавитьУведомлениеОНовомСообщении(ИсходящийДокумент.Ответственный, Объект);
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, ИсходящийДокумент);

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного Тогда

		ДобавитьУведомленияПоНазначениюОтветственного(ПроизошедшееСобытие, ИсходящийДокумент);

	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, ИсходящийДокумент);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по категории данных
Процедура ДобавитьУведомленияПоКатегорииДанных(ПроизошедшееСобытие, Категория, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию Или ВидСобытия
		= Справочники.ВидыБизнесСобытий.УдалениеИзКатегории Тогда

		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);

		Если ПараметрыСобытия.Свойство("Объект") Тогда
			ДобавленныйВКатегориюОбъект = ПараметрыСобытия.Объект;
		Иначе
			ДобавленныйВКатегориюОбъект = Категория;
		КонецЕсли;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, ДобавленныйВКатегориюОбъект, Объект);

	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Категория);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по мероприятию
Процедура ДобавитьУведомленияПоМероприятию(ПроизошедшееСобытие, Мероприятие, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение документа предприятия
		НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Мероприятие.Значение = Мероприятие;
		НаборЗаписей.Отбор.Мероприятие.Использование = Истина;
		НаборЗаписей.Прочитать();
		Записи = НаборЗаписей.Выгрузить();
		Для Каждого Запись Из Записи Цикл
			ДобавитьУведомлениеОНовомСообщении(Запись.Исполнитель, Объект);
		КонецЦикла;
		
		ДобавитьУведомлениеОНовомСообщении(Мероприятие.Организатор, Объект);
		ДобавитьУведомлениеОНовомСообщении(Мероприятие.Секретарь, Объект);
		ДобавитьУведомлениеОНовомСообщении(Мероприятие.Председатель, Объект);
		ДобавитьУведомлениеОНовомСообщении(Мероприятие.Куратор, Объект);
		ДобавитьУведомлениеОНовомСообщении(Мероприятие.Подготовил, Объект);
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Мероприятие);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияПриглашение
		Или ВидСобытия = Перечисления.СобытияУведомлений.МероприятияИзменениеПриглашения
		Или ВидСобытия = Перечисления.СобытияУведомлений.МероприятияОтменаПриглашения Тогда
		
		Участник = ПроизошедшееСобытие.КонтекстСобытия.Получить();
		АдресатыУведомления = АдресатыУведомления(Участник);
		
		ПользователиАвтора = Сотрудники.ПользователиСотрудника(ПроизошедшееСобытие.Автор);
		
		АдресатыУведомления = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			АдресатыУведомления,
			ПользователиАвтора);
		
		Для Каждого АдресатУведомления из АдресатыУведомления Цикл
			
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				АдресатУведомления,
				ВидСобытия,
				Мероприятие,
				Мероприятие);
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияПринятоПриглашение
		Или ВидСобытия = Перечисления.СобытияУведомлений.МероприятияОтклоненоПриглашение Тогда
		
		Участник = ПроизошедшееСобытие.КонтекстСобытия.Получить();
		
		ПользовательАвтора = 
			Сотрудники.ЛюбойПользовательСотрудника(
				ПроизошедшееСобытие.Автор);
		
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Мероприятие,
			"Организатор, Куратор, Подготовил");
		
		Если ТипЗнч(РеквизитыМероприятия.Организатор) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(РеквизитыМероприятия.Организатор) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ПолучательУведомления =
				Сотрудники.ЛюбойПользовательСотрудника(
					РеквизитыМероприятия.Организатор);
			
		ИначеЕсли ТипЗнч(РеквизитыМероприятия.Куратор) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(РеквизитыМероприятия.Куратор) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ПолучательУведомления =
				Сотрудники.ЛюбойПользовательСотрудника(
					РеквизитыМероприятия.Куратор);
			
		Иначе
			
			ПолучательУведомления = 
				Сотрудники.ЛюбойПользовательСотрудника(
					РеквизитыМероприятия.Подготовил);
			
		КонецЕсли;
		
		Если ПользовательАвтора = ПолучательУведомления Тогда
			Возврат;
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ПолучательУведомления,
			ВидСобытия,
			Мероприятие,
			Мероприятие,
			Строка(Участник));
		
	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Мероприятие);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по назначению ответственного.
//
// Параметры:
//   ПроизошедшееСобытие - запись РС ПроизошедшиеБизнесСобытия или выборка из него.
//   Документ - СправочникСсылка.<...>Документы - документ-источник события.
//
Процедура ДобавитьУведомленияПоНазначениюОтветственного(ПроизошедшееСобытие, Документ)
	
	АвторСобытияПользователь = Сотрудники.ЛюбойПользовательСотрудника(
		ПроизошедшееСобытие.Автор);
	
	КонтекстСобытия = ПроизошедшееСобытие.КонтекстСобытия.Получить();
	Если ТипЗнч(КонтекстСобытия) <> Тип("Структура") Тогда
		Ответственный = КонтекстСобытия;
		КонтекстСобытия = Делопроизводство.КонтекстСобытияНазначениеОтветственного();
		КонтекстСобытия.ЭтоНовыйДокумент = Ложь;
		КонтекстСобытия.НовыйОтветственный = Ответственный;
	КонецЕсли;

	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Документ, "Ответственный, ВидДокумента");
	РеквизитыДокумента.Ответственный = Сотрудники.ЛюбойПользовательСотрудника(
		РеквизитыДокумента.Ответственный);

	Если РеквизитыДокумента.Ответственный <> КонтекстСобытия.НовыйОтветственный // возможно, событие устарело

		Или РеквизитыДокумента.Ответственный = АвторСобытияПользователь Тогда // возможно, пользователь назначил сам себя
		Возврат;
	КонецЕсли;

	ВидСобытияПодписки = Справочники.ВидыБизнесСобытий.НазначениеОтветственного;
	Если КонтекстСобытия.ЭтоНовыйДокумент И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда

		ВидСобытияУведомления = Справочники.ВидыБизнесСобытий.СозданиеДокумента;

	Иначе

		ВидСобытияУведомления = ВидСобытияПодписки;

	КонецЕсли;

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
		РеквизитыДокумента.Ответственный, ВидСобытияУведомления, Документ, РеквизитыДокумента.ВидДокумента, , ,
		ВидСобытияПодписки);

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытияПодписки, Документ, РеквизитыДокумента.ВидДокумента, , РеквизитыДокумента.Ответственный);

КонецПроцедуры

// Добавляет уведомление по обработке объекта.
Процедура ДобавитьУведомленияПоОбработкеОбъекта(ПроизошедшееСобытие, ОбработкаОбъекта, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаОбработки Тогда

		РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ОбработкаОбъекта, "Начал, Прервал");
		Если Не ЗначениеЗаполнено(РеквизитыОбработки.Начал) Или РеквизитыОбработки.Начал = РеквизитыОбработки.Прервал Тогда
			Возврат;
		КонецЕсли;
		
		Если Сотрудники.ЭтоСотрудникиОдногоФизЛица(
			РеквизитыОбработки.Начал, РеквизитыОбработки.Прервал) Тогда
			
			Возврат;
		КонецЕсли;
		
		Начал = Сотрудники.ПользовательСотрудника(РеквизитыОбработки.Начал);
		Если Не ЗначениеЗаполнено(Начал) Тогда
			Возврат;
		КонецЕсли;
	
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Начал, ВидСобытия, ОбработкаОбъекта, ОбработкаОбъекта, "", Ложь, Неопределено);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по отсутствию
Процедура ДобавитьУведомленияПоОтсутствию(ПроизошедшееСобытие, Отсутствие, ВидСобытия, Объект)
	
	АвторСобытияПользователь = Сотрудники.ЛюбойПользовательСотрудника(
		ПроизошедшееСобытие.Автор);
	
	ПользовательСотрудник = Сотрудники.ЛюбойПользовательСотрудника(
		Отсутствие.Сотрудник);

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеОтсутствия Или ВидСобытия
		= Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия Тогда

		Если ПользовательСотрудник <> АвторСобытияПользователь Тогда
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				ПользовательСотрудник, ВидСобытия, Объект, ПользовательСотрудник);
		КонецЕсли;

		ВыборкаЗамещающих = Отсутствия.ВыборкаЗамещающихПоОтсутствию(Отсутствие);
		Пока ВыборкаЗамещающих.Следующий() Цикл

			ПользовательЗаместитель = Сотрудники.ЛюбойПользовательСотрудника(
				ВыборкаЗамещающих.Замещающий);
			Если ПользовательЗаместитель = АвторСобытияПользователь Тогда
				Продолжить;
			КонецЕсли;

			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				ПользовательЗаместитель, ВидСобытия, Объект, ПользовательСотрудник);

		КонецЦикла;

		ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, ПользовательСотрудник, ВидСобытия, Объект);

	КонецЕсли;

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия, Объект, Отсутствие);

КонецПроцедуры

// Добавляет уведомление по папке документов предприятия
Процедура ДобавитьУведомленияПоПапкеДокументовПредприятия(ПроизошедшееСобытие, Папка, ВидСобытия, Объект)

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПапкиДокументов") Тогда

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Папка);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по папке файлов
Процедура ДобавитьУведомленияПоПапкеФайлов(ПроизошедшееСобытие, Папка, ВидСобытия, Объект)

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия, Объект, Папка);

КонецПроцедуры

// Добавляет уведомление по показателю процесса.
Процедура ДобавитьУведомленияПоПоказателюПроцесса(ПроизошедшееСобытие, ПоказательПроцесса, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса Тогда
		Подписчики = РегистрыСведений.ПодпискиНаПоказателиПроцессов.Подписчики(ПоказательПроцесса);
		Для Каждого Подписчик Из Подписчики Цикл
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Сотрудники.ЛюбойПользовательСотрудника(Подписчик), ВидСобытия, Объект,
				ПоказательПроцесса);
		КонецЦикла;
	КонецЕсли;

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия, Объект, ПоказательПроцесса);

КонецПроцедуры

// Добавляет уведомление по пользователю
Процедура ДобавитьУведомленияПоПользователю(ПроизошедшееСобытие, Пользователь, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеОтсутствия Или ВидСобытия
		= Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия Тогда

		ГруппыПользователя = ПользователиСерверПовтИсп.ПолучитьМассивГруппПользователя(Пользователь);
		Для Каждого ГруппаПользователя Из ГруппыПользователя Цикл
			ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, ГруппаПользователя, ВидСобытия, Объект);
		КонецЦикла;

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПередачаЗадачОтИсполнителя Тогда

		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		Если Не ПараметрыСобытия.Свойство("ОтКого") Или Не ПараметрыСобытия.Свойство("Кому") Или Не ЗначениеЗаполнено(
			ПараметрыСобытия.ОтКого) Или Не ЗначениеЗаполнено(ПараметрыСобытия.Кому) Или (ТипЗнч(ПараметрыСобытия.Кому)
			<> Тип("СправочникСсылка.Пользователи") И ТипЗнч(ПараметрыСобытия.Кому) <> Тип(
			"СправочникСсылка.Сотрудники")) Тогда
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , СтрШаблон(
					НСтр("ru = 'Некорректные параметры события ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ВидСобытия));
			Возврат;
		КонецЕсли;

		КодЯзыка = Сотрудники.КодЯзыкаСотрудника(ПараметрыСобытия.Кому);

		ДополнительноеОписание = СтрШаблон(
			НСтр("ru = 'Вам переданы задачи исполнителя %1'", КодЯзыка), ПараметрыСобытия.ОтКого);

		КомуПользователь = Сотрудники.ЛюбойПользовательСотрудника(
				ПараметрыСобытия.Кому);

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			КомуПользователь, Справочники.ВидыБизнесСобытий.ПередачаЗадачОтИсполнителя, Неопределено, Неопределено,
			ДополнительноеОписание, Ложь);

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СнятиеЗадачИсполнителя Тогда

		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		Если Не ПараметрыСобытия.Свойство("ОтКого") Или Не ПараметрыСобытия.Свойство("Кому")
			Или Не ПараметрыСобытия.Свойство("Причина") Или Не ЗначениеЗаполнено(ПараметрыСобытия.ОтКого)
			Или Не ЗначениеЗаполнено(ПараметрыСобытия.Кому) Или (ТипЗнч(ПараметрыСобытия.Кому) <> Тип(
			"СправочникСсылка.Пользователи") И ТипЗнч(ПараметрыСобытия.Кому) <> Тип("СправочникСсылка.Сотрудники")) Тогда
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , СтрШаблон(
					НСтр("ru = 'Некорректные параметры события ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ВидСобытия));
			Возврат;
		КонецЕсли;

		КодЯзыка = Сотрудники.КодЯзыкаСотрудника(ПараметрыСобытия.Кому);

		ДополнительноеОписание = СтрШаблон(
			НСтр("ru = 'С вас сняты задачи исполнителя %1, т.к. %2.'", КодЯзыка), ПараметрыСобытия.ОтКого, НРег(
			ПараметрыСобытия.Причина));

		КомуПользователь = Сотрудники.ЛюбойПользовательСотрудника(
				ПараметрыСобытия.Кому);

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			КомуПользователь,
			Справочники.ВидыБизнесСобытий.СнятиеЗадачИсполнителя,
			Неопределено,
			Неопределено,
			ДополнительноеОписание,
			Ложь);

	КонецЕсли;

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия, Объект, Пользователь);

КонецПроцедуры

// Добавляет уведомление по помещению
Процедура ДобавитьУведомленияПоПомещению(ПроизошедшееСобытие, Помещение, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеБрони
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеБрони
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаБрони Тогда
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.Бронь") Тогда
			Если ЗначениеЗаполнено(Объект.ХозяйственноеОбеспечение) Тогда
				ОтветственныйХозяйственноеОбеспечение = Справочники.ТерриторииИПомещения.ОтветственныйХозяйственноеОбеспечение(
					Помещение);
				Если ЗначениеЗаполнено(ОтветственныйХозяйственноеОбеспечение) Тогда
					РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
						Сотрудники.ЛюбойПользовательСотрудника(
						ОтветственныйХозяйственноеОбеспечение), ВидСобытия, Объект, Помещение);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ТехническоеОбеспечение) Тогда
				ОтветственныйТехническоеОбеспечение = Справочники.ТерриторииИПомещения.ОтветственныйТехническоеОбеспечение(
					Помещение);
				Если ЗначениеЗаполнено(ОтветственныйТехническоеОбеспечение) Тогда
					РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
						Сотрудники.ЛюбойПользовательСотрудника(
						ОтветственныйТехническоеОбеспечение), ВидСобытия, Объект, Помещение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия, Объект, Помещение);

КонецПроцедуры

// Добавляет уведомление по проектной задаче
Процедура ДобавитьУведомленияПоПроектнойЗадаче(ПроизошедшееСобытие, ПроектнаяЗадача, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение проектной задачи
		Для Каждого ИсполнительПроектнойЗадачи Из ПроектнаяЗадача.Исполнители Цикл
			ДобавитьУведомлениеОНовомСообщении(ИсполнительПроектнойЗадачи.Исполнитель, Объект);
		КонецЦикла;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, ПроектнаяЗадача);

	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, ПроектнаяЗадача);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по проекту
Процедура ДобавитьУведомленияПоПроекту(ПроизошедшееСобытие, Проект, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение проекта
		Для Каждого ИсполнительПроектнойКоманды Из Проект.ПроектнаяКоманда Цикл
			ДобавитьУведомлениеОНовомСообщении(ИсполнительПроектнойКоманды.Исполнитель, Объект);
		КонецЦикла;
		ДобавитьУведомлениеОНовомСообщении(Проект.Исполнитель, Объект);
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Проект);

	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Проект);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по сообщению
Процедура ДобавитьУведомленияПоСообщению(ПроизошедшееСобытие, Сообщение, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда

		Если Сообщение = Объект Тогда
			
			// Объект уведомления является самим сообщением
			Если ЗначениеЗаполнено(Сообщение.Родитель) Тогда
				ДобавитьУведомлениеПоОбъекту(
					ПроизошедшееСобытие, Сообщение.Родитель, ВидСобытия, Объект);
			КонецЕсли;
			
			// Подписка на новые темы и сообщения в разделе.
			РазделФорума = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение.ВладелецСообщения, "Папка");
			Если Сообщение.ПервоеСообщениеТемы Тогда
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
					Перечисления.СобытияУведомлений.СозданиеТемыФорума, Объект, РазделФорума);
			КонецЕсли;
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
				ВидСобытия, Объект, РазделФорума);
			
			// Подписка на новые сообщения в теме.
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие, Сообщение.ВладелецСообщения, ВидСобытия, Объект);

		Иначе
			
			// Объект уведомления является ответом на сообщение.
			ДобавитьУведомлениеОНовомСообщении(Сообщение.Автор, Объект);
			
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
				ВидСобытия, Объект, Сообщение);

			Если ЗначениеЗаполнено(Сообщение.Родитель) Тогда
				ДобавитьУведомлениеПоОбъекту(
					ПроизошедшееСобытие, Сообщение.Родитель, ВидСобытия, Объект);
			КонецЕсли;

		КонецЕсли;

	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Сообщение);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по сотруднику.
Процедура ДобавитьУведомленияПоСотруднику(ПроизошедшееСобытие, Сотрудник, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПередачаЗадачОтИсполнителя Тогда

		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		Если Не ПараметрыСобытия.Свойство("ОтКого") Или Не ПараметрыСобытия.Свойство("Кому") Или Не ЗначениеЗаполнено(
			ПараметрыСобытия.ОтКого) Или Не ЗначениеЗаполнено(ПараметрыСобытия.Кому) Или (ТипЗнч(ПараметрыСобытия.Кому)
			<> Тип("СправочникСсылка.Пользователи") И ТипЗнч(ПараметрыСобытия.Кому) <> Тип(
			"СправочникСсылка.Сотрудники")) Тогда
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , СтрШаблон(
					НСтр("ru = 'Некорректные параметры события ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ВидСобытия));
			Возврат;
		КонецЕсли;

		КодЯзыка = Сотрудники.КодЯзыкаСотрудника(ПараметрыСобытия.Кому);

		ДополнительноеОписание = СтрШаблон(
			НСтр("ru = 'Вам переданы задачи исполнителя %1'", КодЯзыка), ПараметрыСобытия.ОтКого);

		КомуПользователь = Сотрудники.ЛюбойПользовательСотрудника(
				ПараметрыСобытия.Кому);

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			КомуПользователь, Справочники.ВидыБизнесСобытий.ПередачаЗадачОтИсполнителя, Неопределено, Неопределено,
			ДополнительноеОписание);

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СнятиеЗадачИсполнителя Тогда

		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		Если Не ПараметрыСобытия.Свойство("ОтКого") Или Не ПараметрыСобытия.Свойство("Кому")
			Или Не ПараметрыСобытия.Свойство("Причина") Или Не ЗначениеЗаполнено(ПараметрыСобытия.ОтКого)
			Или Не ЗначениеЗаполнено(ПараметрыСобытия.Кому) Или (ТипЗнч(ПараметрыСобытия.Кому) <> Тип(
			"СправочникСсылка.Пользователи") И ТипЗнч(ПараметрыСобытия.Кому) <> Тип("СправочникСсылка.Сотрудники")) Тогда
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , СтрШаблон(
					НСтр("ru = 'Некорректные параметры события ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ВидСобытия));
			Возврат;
		КонецЕсли;

		КодЯзыка = Сотрудники.КодЯзыкаСотрудника(ПараметрыСобытия.Кому);

		ДополнительноеОписание = СтрШаблон(
			НСтр("ru = 'С вас сняты задачи исполнителя %1, т.к. %2.'", КодЯзыка), ПараметрыСобытия.ОтКого, НРег(
			ПараметрыСобытия.Причина));

		КомуПользователь = Сотрудники.ЛюбойПользовательСотрудника(
				ПараметрыСобытия.Кому);

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			КомуПользователь,
			Справочники.ВидыБизнесСобытий.СнятиеЗадачИсполнителя,
			Неопределено,
			Неопределено,
			ДополнительноеОписание);

	КонецЕсли;

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия, Объект, Сотрудник);

КонецПроцедуры

// Добавляет уведомление по теме
Процедура ДобавитьУведомленияПоТеме(ПроизошедшееСобытие, Тема, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
				
		// Объект уведомления является ответом на тему
		ДобавитьУведомлениеОНовомСообщении(Тема.Автор, Объект);
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Тема);

		Если ЗначениеЗаполнено(Тема.Документ) Тогда
			ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Тема.Документ, ВидСобытия, Объект);
		КонецЕсли;

	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Тема);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по файлу
Процедура ДобавитьУведомленияПоФайлу(ПроизошедшееСобытие, Файл, ВидСобытия, Объект)

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда

		ДобавитьУведомлениеПоОбъекту(
			ПроизошедшееСобытие, Файл.ВладелецФайла, ВидСобытия, Объект);

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
				
		// Объект уведомления является ответом на обсуждение файла
		ДобавитьУведомлениеОНовомСообщении(Файл.Автор, Объект);
		ДобавитьУведомлениеОНовомСообщении(Файл.Редактирует, Объект);
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Файл);

	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Файл);

	КонецЕсли;

КонецПроцедуры

// Добавляет уведомление по замещению.
// 
Процедура ДобавитьУведомленияПоЗамещению(ПроизошедшееСобытие, Замещение, ВидСобытия, Объект)
	
	АвторСобытияПользователь = Сотрудники.ЛюбойПользовательСотрудника(
		ПроизошедшееСобытие.Автор);
	
	РеквизитыЗамещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Замещение, "Сотрудник, Замещающий");

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиСоздание Или ВидСобытия
		= Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиИзменение Тогда

		ПользовательСотрудника = Сотрудники.ЛюбойПользовательСотрудника(
			РеквизитыЗамещения.Сотрудник);
		ПользовательЗамещающего = Сотрудники.ЛюбойПользовательСотрудника(
			РеквизитыЗамещения.Замещающий);

		Если ПользовательСотрудника <> АвторСобытияПользователь Тогда
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				ПользовательСотрудника, ВидСобытия, Объект, РеквизитыЗамещения.Сотрудник, , Ложь);
		КонецЕсли;

		Если ПользовательЗамещающего <> АвторСобытияПользователь Тогда
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				ПользовательЗамещающего, ВидСобытия, Объект, РеквизитыЗамещения.Сотрудник, , Ложь);
		КонецЕсли;

		ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, РеквизитыЗамещения.Сотрудник, ВидСобытия, Объект);

	КонецЕсли;

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия, Объект, Замещение);

КонецПроцедуры

// Добавляет уведомление по передачи документов в 1С:Архив.
// 
Процедура ДобавитьУведомленияПоПередачиДелВАрхив(ПроизошедшееСобытие, ПередачаДелВАрхив, ВидСобытия, Объект)
	
	ОтветственныйПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПередачаДелВАрхив, "Передал");
	
	АвторСобытияПользователь = Сотрудники.ЛюбойПользовательСотрудника(
			ОтветственныйПоДокументу);
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
		АвторСобытияПользователь,
		ВидСобытия,
		Объект,
		ПередачаДелВАрхив);

	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия, Объект, ПередачаДелВАрхив);

КонецПроцедуры

// Добавляет уведомление по действию обработки.
// 
Процедура ДобавитьУведомленияПоДействиюОбработки(ПроизошедшееСобытие, Действие, ВидСобытия, Объект)
	
	АвторСобытияПользователь = Сотрудники.ЛюбойПользовательСотрудника(
		ПроизошедшееСобытие.Автор);
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ЗавершениеДействияОбработки Тогда
		
		Если ДействиеПоддерживаетУведомлениеОПоложительномЗавершении(Действие)
				И ДействияСервер.ДействиеЗавершеноСПоложительнымРезультатом(Действие) Тогда

			ОзнакамливаемыйСРезультатом = ДействияСервер.ОзнакамливаемыйСРезультатом(Действие);
			Если ЗначениеЗаполнено(ОзнакамливаемыйСРезультатом) Тогда
				ПолучателиУведомлений = ДействияСервер.РазвернутыеУчастники(
					ОзнакамливаемыйСРезультатом,
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет"));
				
				Для Каждого Получатель Из ПолучателиУведомлений Цикл
					Для Каждого Пользователь Из РаботаСЗадачами.ПользователиИсполнителей(Получатель) Цикл
						
						Если Пользователь = АвторСобытияПользователь Тогда
							Продолжить;
						КонецЕсли;
						
						РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
							Пользователь,
							Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомДействияОбработки,
							Объект,
							Действие);
						
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Действие);

	Иначе

		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия, Объект, Действие);

	КонецЕсли;

	
КонецПроцедуры

// Проверяет наличие отказа от подписки в иерархии
Функция ЕстьОтказОтПодпискиВИерархии(ОбъектУведомления, ОбъектПодписки, ОтказыОтПодписки,
	ОбработанныеОбъекты = Неопределено)

	Если ОбработанныеОбъекты = Неопределено Тогда
		ОбработанныеОбъекты = Новый Массив;
	КонецЕсли;
	Если ОбработанныеОбъекты.Найти(ОбъектУведомления) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ОбработанныеОбъекты.Добавить(ОбъектУведомления);

	Если ОбъектУведомления = ОбъектПодписки Тогда

		Возврат Ложь;

	КонецЕсли;

	Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда

		ОтказОтПодпискиВИерархии = Ложь;

		Если ЗначениеЗаполнено(ОбъектУведомления.БизнесПроцесс) Тогда

			ОтказОтПодпискиВИерархии = ЕстьОтказОтПодпискиВИерархии(
				ОбъектУведомления.БизнесПроцесс, ОбъектПодписки, ОтказыОтПодписки, ОбработанныеОбъекты);

		КонецЕсли;

		Возврат ОтказОтПодпискиВИерархии;

	КонецЕсли;

	Если ОтказыОтПодписки.Найти(ОбъектУведомления) <> Неопределено Тогда

		Возврат Истина;

	КонецЕсли;

	ЕстьОтказПоВедущейЗадаче = Ложь;
	ЕстьОтказПоГлавнойЗадаче = Ложь;

	Если ЗначениеЗаполнено(ОбъектУведомления.ВедущаяЗадача) Тогда

		ЕстьОтказПоВедущейЗадаче = ЕстьОтказОтПодпискиВИерархии(
			ОбъектУведомления.ВедущаяЗадача, ОбъектПодписки, ОтказыОтПодписки, ОбработанныеОбъекты);

	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектУведомления.ГлавнаяЗадача) Тогда

		ЕстьОтказПоГлавнойЗадаче = ЕстьОтказОтПодпискиВИерархии(
			ОбъектУведомления.ГлавнаяЗадача, ОбъектПодписки, ОтказыОтПодписки, ОбработанныеОбъекты);

	КонецЕсли;

	Возврат ЕстьОтказПоВедущейЗадаче Или ЕстьОтказПоГлавнойЗадаче;

КонецФункции

// Производит отключение от почтового сервера, если соединение с почтовым сервером открыто.
//
// Параметры:
//  Соединение - ИнтернетПочта - Соединение с почтовым сервером.
//
Процедура ЗакрытьСоединениеСПочтовымСервером(Соединение)

	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Попытка
		Соединение.Отключиться();
	Исключение
		ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при закрытии соединения с почтовым сервером: %1'",
			ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	Соединение = Неопределено;

КонецПроцедуры

// Отправляет уведомление окном.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция УведомлениеОкномОтправлено(СформированноеУведомление)

	ВидУведомления = Перечисления.СобытияУведомлений.ОпределитьВидУведомления(СформированноеУведомление.ВидСобытия);
	Если ВидУведомления = Перечисления.ВидыУведомленийПрограммы.Ошибка Тогда
		ТекстУведомления = СформированноеУведомление.ТекстУведомления;
	Иначе
		ТекстУведомления = СтрШаблон("<b>%1</b>
									 |%2", СформированноеУведомление.ТемаУведомления,
			СформированноеУведомление.ТекстУведомления);
	КонецЕсли;
	ТекстУведомления = ТекстУведомленияВHTML(ТекстУведомления);

	ПредметУведомления = ?(СформированноеУведомление.ОбъектыУведомления.Количество() = 1 И ТипЗнч(
		СформированноеУведомление.ОбъектыУведомления[0]) <> Тип("СправочникСсылка.Метрики")
		И СформированноеУведомление.ВидСобытия <> Перечисления.СобытияУведомлений.СводкаПоЗадачам
		И СформированноеУведомление.ВидСобытия <> Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора,
		СформированноеУведомление.ОбъектыУведомления[0], Неопределено);

	Попытка
		Справочники.УведомленияПрограммы.Добавить(
			СформированноеУведомление.ТемаУведомления, ТекстУведомления, СформированноеУведомление.ТекстОповещения,
			СформированноеУведомление.ПояснениеОповещения, ВидУведомления, СформированноеУведомление.Пользователь,
			ПредметУведомления, СформированноеУведомление.Расшифровывать);
	Исключение
		ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при отправке уведомления окном: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;

КонецФункции

// Отправляет уведомление по push.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция УведомлениеПоPushОтправлено(СформированноеУведомление)

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьPushУведомления") Тогда
		Возврат Истина;
	КонецЕсли;

	Если СформированноеУведомление.ОбъектыУведомления.Количество() = 1 Тогда
		Объект = СформированноеУведомление.ОбъектыУведомления[0];
	КонецЕсли;

	Попытка
		МП_ОтправкаУведомлений.ЗаписатьСообщениеВРегистрPushУведомления(
			СформированноеУведомление.Пользователь, Объект, ТекущаяДатаСеанса(), ТекстУведомленияВПростойТекст(
			СформированноеУведомление.ТекстУведомления, Истина));
	Исключение
		ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при формировании push уведомления: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;

КонецФункции

// Отправляет уведомление по SMS.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
//  НастройкаОтправкиSMSВыполнена - Булево - Настройка отправки SMS выполнена.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция УведомлениеПоSMSОтправлено(СформированноеУведомление, НастройкаОтправкиSMSВыполнена)

	Если Не НастройкаОтправкиSMSВыполнена Тогда
		ТекстОшибки = НСтр("ru = 'Уведомление не отправлено, так как не выполнена настройка отправки SMS.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	СпособыУведомления = РегистрыСведений.СпособыУведомленияПользователей.ПолучитьСпособУведомленияПользователя(
			СформированноеУведомление.Пользователь, Перечисления.СпособыУведомления.ПоSMS);
	Если СпособыУведомления.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Уведомление не отправлено, так как не указан номер телефона у пользователя %1.'",
			ОбщегоНазначения.КодОсновногоЯзыка()), Строка(СформированноеУведомление.Пользователь));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Для Каждого СпособУведомления Из СпособыУведомления Цикл

		Попытка
			Документы.УведомлениеПоSMS.Добавить(
				СпособУведомления, СформированноеУведомление.ТемаУведомления, СформированноеУведомление.Пользователь);
		Исключение
			ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при подготовке SMS уведомления: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			Возврат Ложь;
		КонецПопытки;

		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление на номер телефона %1 подготовлено к отправке.'",
			ОбщегоНазначения.КодОсновногоЯзыка()), СпособУведомления));

	КонецЦикла;

	Возврат Истина;

КонецФункции

// Отправляет уведомление через чат.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция УведомлениеЧерезЧатОтправлено(СформированноеУведомление)

	Попытка
		
		РезультатОтправки = РаботаСЧатБотом.ОтправитьСообщение(
			СформированноеУведомление.Пользователь, СформированноеУведомление.ТемаУведомления + Символы.ПС
			+ ТекстУведомленияВПростойТекст(СформированноеУведомление.ТекстУведомления, Истина), СформированноеУведомление.Файлы);
		
		// Если не было отправлено, вызываем исключение.
		Если Не РезультатОтправки.Отправлено Тогда
			ВызватьИсключение РезультатОтправки.ТекстОшибки;
		КонецЕсли;
	
	Исключение

		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при отправке уведомления через чат: %1'",
			ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// Отправляет уведомление через Telegram.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция УведомлениеЧерезTelegramОтправлено(СформированноеУведомление)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияЧерезTelegram") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		
		ОбсужденияДляУведомления =
			РегистрыСведений.СпособыУведомленияПользователей.ПолучитьСпособУведомленияПользователя(
				СформированноеУведомление.Пользователь,
				Перечисления.СпособыУведомления.Telegram);
		Если ОбсужденияДляУведомления.Количество() = 0 Тогда
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Уведомление не отправлено, так как не настроен Telegram у пользователя %1.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				Строка(СформированноеУведомление.Пользователь));
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстОшибки);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Для Каждого СтрокаИдентификатора Из ОбсужденияДляУведомления Цикл
			
			Обсуждение = Новый ИдентификаторОбсужденияСистемыВзаимодействия(СтрокаИдентификатора);
			
			ТекстУведомления = СформированноеУведомление.ТемаУведомления
				+ Символы.ПС
				+ ТекстУведомленияВПростойТекст(СформированноеУведомление.ТекстУведомления, Ложь);
			
			РезультатОтправки = РаботаСЧатБотом.ОтправитьСообщениеВОбсуждение(
				Обсуждение,
				ТекстУведомления);
			
		КонецЦикла;
		
		// Если не было отправлено, вызываем исключение.
		Если Не РезультатОтправки.Отправлено Тогда
			ВызватьИсключение РезультатОтправки.ТекстОшибки;
		КонецЕсли;
	
	Исключение

		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при отправке уведомления через Telegram: %1'",
			ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// Отправляет уведомление через чат.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция УведомлениеЧерезВКонтактеОтправлено(СформированноеУведомление)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияЧерезВКонтакте") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		
		ОбсужденияДляУведомления =
			РегистрыСведений.СпособыУведомленияПользователей.ПолучитьСпособУведомленияПользователя(
				СформированноеУведомление.Пользователь,
				Перечисления.СпособыУведомления.ВКонтакте);
		Если ОбсужденияДляУведомления.Количество() = 0 Тогда
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Уведомление не отправлено, так как не настроен ВКонтакте у пользователя %1.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				Строка(СформированноеУведомление.Пользователь));
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстОшибки);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Для Каждого СтрокаИдентификатора Из ОбсужденияДляУведомления Цикл
			
			Обсуждение = Новый ИдентификаторОбсужденияСистемыВзаимодействия(СтрокаИдентификатора);
			
			ТекстУведомления = СформированноеУведомление.ТемаУведомления
				+ Символы.ПС
				+ ТекстУведомленияВПростойТекст(СформированноеУведомление.ТекстУведомления, Ложь);
			
			РезультатОтправки = РаботаСЧатБотом.ОтправитьСообщениеВОбсуждение(
				Обсуждение,
				ТекстУведомления);
			
		КонецЦикла;
		
		// Если не было отправлено, вызываем исключение.
		Если Не РезультатОтправки.Отправлено Тогда
			ВызватьИсключение РезультатОтправки.ТекстОшибки;
		КонецЕсли;
	
	Исключение

		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при отправке уведомления через ВКонтакте: %1'",
			ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// Отправляет уведомление по почте.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
//  Соединение - ИнтернетПочта - Соединение с почтовым сервером для рассылки уведомлений.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция УведомлениеПоПочтеОтправлено(СформированноеУведомление, Соединение)

	АдресаЭлектроннойПочты = РегистрыСведений.СпособыУведомленияПользователей.ПолучитьСпособУведомленияПользователя(
			СформированноеУведомление.Пользователь, Перечисления.СпособыУведомления.ПоПочте);
	Если АдресаЭлектроннойПочты.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'",
			ОбщегоНазначения.КодОсновногоЯзыка()), Строка(СформированноеУведомление.Пользователь));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	// Формирование массива вложений.
	Вложения = Новый Массив;
	Если ЗначениеЗаполнено(СформированноеУведомление.Файлы) Тогда
		Для Каждого Вложение Из СформированноеУведомление.Файлы Цикл
			
			Попытка
				
				ДвоичныеДанныеФайла =
					РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Вложение.Ссылка);
				
			Исключение
				
				// Может быть ошибка "Файл не найден в хранилище файлов" или другая ошибка.
				// Проблему регистрируем, но работу не блокируем.
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при формировании файлов почтового уведомления: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстОшибки);
				
				Продолжить;
				
			КонецПопытки;
			
			СтруктураВложения = Новый Структура;
			СтруктураВложения.Вставить("Данные", ДвоичныеДанныеФайла);
			СтруктураВложения.Вставить("Имя", Вложение.ИмяФайла);
			СтруктураВложения.Вставить("Идентификатор", Неопределено);
			Вложения.Добавить(СтруктураВложения);
			
		КонецЦикла;
	КонецЕсли;

	Для Каждого ПочтовыйАдресПолучателя Из АдресаЭлектроннойПочты Цикл

		Попытка

			ВидМаршрутизации = ВстроеннаяПочтаСервер.ПолучитьВидМаршрутизацииПоАдресу(ПочтовыйАдресПолучателя);
			Если ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя Тогда

				ПараметрыПисьма = Новый Структура;
				ПараметрыПисьма.Вставить("Тема", СформированноеУведомление.ТемаУведомления);
				ПараметрыПисьма.Вставить("Текст", ТекстУведомленияВHTML(СформированноеУведомление.ТекстУведомления));
				ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
				ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.HTML);

				Если ЗначениеЗаполнено(Вложения) Тогда
					ПараметрыПисьма.Вставить("Вложения", Новый Массив);
					Для Каждого Вложение Из Вложения Цикл
						СтруктураВложения = Новый Структура("Адрес, ИмяФайла");
						СтруктураВложения.Адрес = Вложение.Данные;
						СтруктураВложения.ИмяФайла = Вложение.Имя;
						ПараметрыПисьма.Вложения.Добавить(СтруктураВложения);
					КонецЦикла;
				КонецЕсли;

				СообщениеОбОшибке = "";
				Если Соединение = Неопределено Тогда
					Соединение = СоединениеСПочтовымСервером();
				КонецЕсли;
				УведомлениеОтправлено = ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(
					ПараметрыПисьма, УчетнаяЗаписьДляРассылки(), , СообщениеОбОшибке, Соединение);
				Если Не УведомлениеОтправлено Тогда
					ВызватьИсключение СообщениеОбОшибке;
				КонецЕсли;

			ИначеЕсли ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внутренняя Тогда

				УчетныеЗаписиПолучателя = ВстроеннаяПочтаСервер.ПолучитьУчетныеЗаписиПоАдресу(ПочтовыйАдресПолучателя,
					Истина);
				Если УчетныеЗаписиПолучателя.Количество() = 0 Тогда
					ВызватьИсключение НСтр("ru = 'Неверный вид маршрутизации письма. Обратитесь к Администратору.'",
						ОбщегоНазначения.КодОсновногоЯзыка());
				КонецЕсли;

				Предметы = Новый Массив;
				Для Каждого Уведомление Из СформированноеУведомление.Уведомления Цикл

					Если Предметы.Найти(Уведомление.Объект) = Неопределено Тогда
						Предметы.Добавить(Уведомление.Объект);
					КонецЕсли;

				КонецЦикла;

				Для Каждого УчетнаяЗаписьПолучателя Из УчетныеЗаписиПолучателя Цикл

					ВходящееПисьмоОбъект = Документы.ВходящееПисьмо.СоздатьДокумент();

					Если Предметы.Количество() = 1 Тогда
						Предмет = Предметы[0];
						Если ЗначениеЗаполнено(Предмет)
							И ВстроеннаяПочтаСервер.ДоступенПоПравамОтветственнымУчетнойЗаписи(Предмет,
							УчетнаяЗаписьПолучателя) Тогда
							ВходящееПисьмоОбъект.Предмет = Предмет;
						КонецЕсли;
					КонецЕсли;

					Сообщение = Почта.СформироватьСтруктуруПочтовогоСообщения();

					Сообщение.Тема = СформированноеУведомление.ТемаУведомления;

					ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(УчетнаяЗаписьПолучателя);
					СтруктураПочтовогоАдреса = Новый Структура;
					СтруктураПочтовогоАдреса.Вставить("Адрес", ДанныеУчетнойЗаписи.АдресЭлектроннойПочты);
					СтруктураПочтовогоАдреса.Вставить("ОтображаемоеИмя", ДанныеУчетнойЗаписи.ОтображаемоеИмя);
					Сообщение.Получатели.Добавить(СтруктураПочтовогоАдреса);

					УчетнаяЗаписьОтправителя = ПредопределенноеЗначение(
						"Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты");
					ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(УчетнаяЗаписьОтправителя);
					СтруктураПочтовогоАдреса = Новый Структура;
					СтруктураПочтовогоАдреса.Вставить("Адрес", ДанныеУчетнойЗаписи.АдресЭлектроннойПочты);
					СтруктураПочтовогоАдреса.Вставить("ОтображаемоеИмя", ДанныеУчетнойЗаписи.ОтображаемоеИмя);
					Сообщение.Отправитель = СтруктураПочтовогоАдреса;
					Сообщение.ИмяОтправителя = ДанныеУчетнойЗаписи.ПредставлениеАдресаЭлектроннойПочты;

					ДатаСообщения = ТекущаяДатаСеанса();
					Сообщение.ДатаОтправки = ДатаСообщения;
					Сообщение.ДатаПолучения = ДатаСообщения;

					ИдентификаторСообщения = Новый УникальныйИдентификатор;
					Сообщение.ИдентификаторСообщения = Строка(ИдентификаторСообщения);

					СтруктураТекста = Новый Структура;
					СтруктураТекста.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
					СтруктураТекста.Вставить("Текст", ТекстУведомленияВHTML(СформированноеУведомление.ТекстУведомления));
					СтруктураТекста.Вставить("Кодировка", "");
					Сообщение.Тексты.Добавить(СтруктураТекста);

					Сообщение.Размер = ВстроеннаяПочтаСервер.ВычислитьРазмерПочтовогоСообщения(Сообщение);

					Сообщение.Вложения = Вложения;

					ВстроеннаяПочтаСервер.ЗаполнитьВходящееПисьмоПриВнутреннейМаршрутизации(ВходящееПисьмоОбъект,
						Сообщение, УчетнаяЗаписьПолучателя);

				КонецЦикла;

			КонецЕсли;

		Исключение
			ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при отправке уведомления по почте: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			ЗакрытьСоединениеСПочтовымСервером(Соединение);
			Возврат Ложь;
		КонецПопытки;

		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление успешно отправлено на адрес %1 (вид маршрутизации - %2).'",
			ОбщегоНазначения.КодОсновногоЯзыка()), ПочтовыйАдресПолучателя, НРег(ВидМаршрутизации)));

	КонецЦикла;

	Возврат Истина;

КонецФункции

// Отправляет уведомления.
//
// Параметры:
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//
Процедура ОтправитьУведомления(СформированныеУведомления)

	НастройкаОтправкиSMSВыполнена = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	Соединение = Неопределено;
	Для Каждого СформированноеУведомление Из СформированныеУведомления Цикл

		УведомлениеОтправлено = Ложь;
		Если СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
			УведомлениеОтправлено = УведомлениеПоПочтеОтправлено(СформированноеУведомление, Соединение);
		ИначеЕсли СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.Окном Тогда
			УведомлениеОтправлено = УведомлениеОкномОтправлено(СформированноеУведомление);
		ИначеЕсли СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.ПоSMS Тогда
			УведомлениеОтправлено = УведомлениеПоSMSОтправлено(СформированноеУведомление, НастройкаОтправкиSMSВыполнена);
		ИначеЕсли СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.ПоPush Тогда
			УведомлениеОтправлено = УведомлениеПоPushОтправлено(СформированноеУведомление);
		ИначеЕсли СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.Чат Тогда
			УведомлениеОтправлено = УведомлениеЧерезЧатОтправлено(СформированноеУведомление);
		ИначеЕсли СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.Telegram Тогда
			УведомлениеОтправлено = УведомлениеЧерезTelegramОтправлено(СформированноеУведомление);
		ИначеЕсли СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.ВКонтакте Тогда
			УведомлениеОтправлено = УведомлениеЧерезВКонтактеОтправлено(СформированноеУведомление);
		КонецЕсли;

		Для Каждого Уведомление Из СформированноеУведомление.Уведомления Цикл
			Если УведомлениеОтправлено Тогда
				РегистрыСведений.ОчередьУведомлений.УдалитьУведомление(
					Уведомление.Пользователь, Уведомление.ВидСобытия, Уведомление.СпособУведомления, Уведомление.Объект,
					Уведомление.ОбъектПодписки);
			Иначе
				РегистрыСведений.ОчередьУведомлений.УвеличитьЧислоПопытокОтправки(
					Уведомление.Пользователь, Уведомление.ВидСобытия, Уведомление.СпособУведомления, Уведомление.Объект,
					Уведомление.ОбъектПодписки);
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;
	ЗакрытьСоединениеСПочтовымСервером(Соединение);

КонецПроцедуры

// Возвращает настройки уведомления о документах пользователей.
//
// Параметры:
//  МассивПользователей - Массив - Массив пользователей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Настройки уведомления о задачах.
//
Функция ПолучитьНастройкиУведомленияОДокументах(МассивПользователей)

	НастройкиУведомлений = Новый ТаблицаЗначений;
	НастройкиУведомлений.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	НастройкиУведомлений.Колонки.Добавить("СрокУведомления", Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаУведомления", Новый ОписаниеТипов("Число"));

	Для Каждого Пользователь Из МассивПользователей Цикл
		НоваяСтрока = НастройкиУведомлений.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.СрокУведомления = РегистрыСведений.НастройкиУведомлений.ПолучитьСрок(
			Пользователь, Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		НоваяСтрока.ЧастотаУведомления = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь, Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
	КонецЦикла;

	Возврат НастройкиУведомлений;

КонецФункции

// Возвращает настройки уведомления о контролях пользователей.
//
// Параметры:
//  МассивПользователей - Массив - Массив пользователей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Настройки уведомления о контролях.
//
Функция ПолучитьНастройкиУведомленияОКонтроле(МассивПользователей)

	НастройкиУведомлений = Новый ТаблицаЗначений;
	НастройкиУведомлений.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	НастройкиУведомлений.Колонки.Добавить("СрокУведомления", Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПриближениеСрока", Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПросроченКонтроль", Новый ОписаниеТипов("Число"));

	Для Каждого Пользователь Из МассивПользователей Цикл
		НоваяСтрока = НастройкиУведомлений.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.СрокУведомления = РегистрыСведений.НастройкиУведомлений.ПолучитьСрок(
			Пользователь, Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		НоваяСтрока.ЧастотаПриближениеСрока = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь, Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		НоваяСтрока.ЧастотаПросроченКонтроль = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь, Перечисления.СобытияУведомлений.ПросроченКонтроль);
	КонецЦикла;

	Возврат НастройкиУведомлений;

КонецФункции

// Возвращает настройки уведомления о контрольных точках пользователей.
//
// Параметры:
//  МассивПользователей - Массив - Массив пользователей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Настройки уведомления о контрольных точках.
//
Функция ПолучитьНастройкиУведомленияОКонтрольныхТочках(МассивПользователей)

	НастройкиУведомлений = Новый ТаблицаЗначений;
	НастройкиУведомлений.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	НастройкиУведомлений.Колонки.Добавить("СрокПодошелСрокКонтрольнойТочки", Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПодошелСрокКонтрольнойТочки", Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПросроченаКонтрольнаяТочка", Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПросроченаОценкаКонтрольнойТочки", Новый ОписаниеТипов("Число"));

	Для Каждого Пользователь Из МассивПользователей Цикл
		НоваяСтрока = НастройкиУведомлений.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.СрокПодошелСрокКонтрольнойТочки = РегистрыСведений.НастройкиУведомлений.ПолучитьСрок(
			Пользователь, Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки);
		НоваяСтрока.ЧастотаПодошелСрокКонтрольнойТочки = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь, Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки);
		НоваяСтрока.ЧастотаПросроченаКонтрольнаяТочка = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь, Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка);
		НоваяСтрока.ЧастотаПросроченаОценкаКонтрольнойТочки = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь, Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки);
	КонецЦикла;

	Возврат НастройкиУведомлений;

КонецФункции

// Формирует значение оставшихся неполных дней до конца срока.
//
// Параметры:
//  СрокДата - Дата - Срок.
//  ТекущаяДата - Дата - Дата, относительно которой рассчитывается срок в днях.
//  Сотрудник - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники - Сотрудник, график работы которого используется.
//  ПримерныйСрок - Булево - Признак того, что срок примерный.
//  КНачалуДня - Булево - Признак того, что дату следует привести к началу дня.
//
// Возвращаемое значение:
//  Число - Срок в днях.
//
Функция ПолучитьОсталосьДней(Срок, Знач ТекущаяДата = Неопределено, Сотрудник = Неопределено, ПримерныйСрок = Ложь,
	КНачалуДня = Ложь)

	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если КНачалуДня Тогда
		ТекущаяДата = НачалоДня(ТекущаяДата);
	КонецЕсли;

	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	Иначе
		ИспользоватьГрафикиРаботы = Ложь;
	КонецЕсли;

	ПримерныйСрок = Ложь;

	Если ИспользоватьГрафикиРаботы Тогда

		График = ГрафикиРаботы.ГрафикРаботыСотрудника(Сотрудник);

		Попытка
			Если Срок >= ТекущаяДата Тогда
				СрокВДнях = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
					График.Календарь, ТекущаяДата, Срок) + 1;
			Иначе
				СрокВДнях = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
					График.Календарь, Срок, ТекущаяДата);
			КонецЕсли;
		Исключение

			ТекстПредупреждения = НСтр("ru = 'Не удалось получить разность дат по календарю:'",
				ОбщегоНазначения.КодОсновногоЯзыка()) 
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстПредупреждения);

			ПримерныйСрок = Истина;
			СрокВДнях = ПолучитьОсталосьДней(Срок, ТекущаяДата);

		КонецПопытки;

	Иначе

		Если Срок >= ТекущаяДата Тогда
			СрокВДнях = (КонецДня(Срок) - КонецДня(ТекущаяДата)) / 86400 + 1; // 86400 - число секунд в сутках.
		Иначе
			СрокВДнях = (КонецДня(ТекущаяДата) - КонецДня(Срок)) / 86400; // 86400 - число секунд в сутках.
		КонецЕсли;

	КонецЕсли;

	Возврат СрокВДнях;

КонецФункции

// Возвращает структуру с параметрами произошедшего события
Функция ПолучитьПараметрыСобытия(Событие)

	Попытка

		СтрокаXML = Событие.КонтекстСобытия.Получить();

		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);

		НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
		ПараметрыСобытия = НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);

	Исключение

		ПараметрыСобытия = Новый Структура;

	КонецПопытки;

	Возврат ПараметрыСобытия;

КонецФункции

// Возвращает полный путь папки
Функция ПолучитьПолныйПуть(Папка)

	ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка.Ссылка, "Родитель");

	Если ЗначениеЗаполнено(ПапкаРодитель) Тогда

		ПолныйПуть = "";
		Пока ЗначениеЗаполнено(ПапкаРодитель) Цикл

			ПолныйПуть = Строка(ПапкаРодитель) + "\" + ПолныйПуть;
			ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПапкаРодитель, "Родитель");
			Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;

		ПолныйПуть = ПолныйПуть + Строка(Папка.Ссылка);

	Иначе

		ПолныйПуть = Строка(Папка.Ссылка);

	КонецЕсли;

	Возврат ПолныйПуть;

КонецФункции

// Получение родителя бизнес-процесса с проверкой подписки
Процедура ПолучитьРодителейСПроверкойПодписки(ОбъектРодитель, МассивРодителей, ОтказыОтПодписки, ОбъектПодписки,
	ОбработанныеОбъекты = Неопределено)

	Если ОбработанныеОбъекты = Неопределено Тогда
		ОбработанныеОбъекты = Новый Массив;
	КонецЕсли;
	Если ОбработанныеОбъекты.Найти(ОбъектРодитель) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработанныеОбъекты.Добавить(ОбъектРодитель);

	Если ТипЗнч(ОбъектРодитель) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда

		Если ЗначениеЗаполнено(ОбъектРодитель.БизнесПроцесс) Тогда
			ПолучитьРодителейСПроверкойПодписки(
				ОбъектРодитель.БизнесПроцесс, МассивРодителей, ОтказыОтПодписки, ОбъектПодписки, ОбработанныеОбъекты);
		КонецЕсли;

		Возврат;

	КонецЕсли;

	Если ОтказыОтПодписки.Найти(ОбъектРодитель) <> Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если ОбъектРодитель <> ОбъектПодписки Тогда
		МассивРодителей.Добавить(ОбъектРодитель);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектРодитель.ВедущаяЗадача) Тогда

		ПолучитьРодителейСПроверкойПодписки(
			ОбъектРодитель.ВедущаяЗадача, МассивРодителей, ОтказыОтПодписки, ОбъектПодписки, ОбработанныеОбъекты);

	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектПодписки.ГлавнаяЗадача) Тогда

		ПолучитьРодителейСПроверкойПодписки(
			ОбъектРодитель.ГлавнаяЗадача, МассивРодителей, ОтказыОтПодписки, ОбъектПодписки, ОбработанныеОбъекты);

	КонецЕсли;

	Возврат;

КонецПроцедуры

// Возвращает соединение с почтовым сервером для рассылки уведомлений.
//
// Возвращаемое значение:
//  ИнтернетПочта - Соединение с почтовым сервером для рассылки уведомлений.
//
Функция СоединениеСПочтовымСервером()

	Возврат Неопределено;

КонецФункции

// Формирует текстовое представление документа предприятия.
//
Функция СформироватьПредставлениеВнутреннегоДокумента(ДокументПредприятия, ВидСобытия, ДополнительноеОписание, КодЯзыка)

	ПредставлениеВнутреннегоДокумента = "";

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументПредприятия, "Папка, Подготовил, ДатаСоздания,
							 |ДатаНачалаДействия, ДатаОкончанияДействия, Бессрочный, ПорядокПродления");

	ДобавитьРеквизитКСтроке(
		ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Документ'", КодЯзыка), ДокументПредприятия);
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.Папка) Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Папка'", КодЯзыка), ПолучитьПолныйПуть(
			ЗначенияРеквизитов.Папка));
	КонецЕсли;
	ДобавитьРеквизитКСтроке(
		ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Подготовил'", КодЯзыка), ЗначенияРеквизитов.Подготовил);
	ДобавитьРеквизитКСтроке(
		ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Дата'", КодЯзыка), ЗначенияРеквизитов.ДатаСоздания);
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента Или ВидСобытия
		= Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента Тогда

		СрокДействия = "";
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаНачалаДействия) Тогда
			СрокДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с %1'", КодЯзыка), Формат(ЗначенияРеквизитов.ДатаНачалаДействия, "ДЛФ=D"));
		КонецЕсли;

		Если ЗначенияРеквизитов.Бессрочный Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				СрокДействия, ", ", НСтр("ru = 'бессрочный'", КодЯзыка));
		ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаОкончанияДействия) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(СрокДействия, " ", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по %1'", КодЯзыка), Формат(ЗначенияРеквизитов.ДатаОкончанияДействия, "ДЛФ=D")));
		КонецЕсли;

		ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Срок действия'", КодЯзыка), СрокДействия);
		ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Продление'", КодЯзыка), ЗначенияРеквизитов.ПорядокПродления);

	КонецЕсли;
	ДобавитьРеквизитКСтроке(
		ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Ссылка'", КодЯзыка), ПолучитьНавигационнуюСсылкуУведомления(
		ДокументПредприятия));

	Возврат ПредставлениеВнутреннегоДокумента;

КонецФункции

// Формирует текстовое представление входящего документа.
//
Функция СформироватьПредставлениеВходящегоДокумента(ВходящийДокумент, ВидСобытия, ДополнительноеОписание, КодЯзыка)

	ПредставлениеВходящегоДокумента = "";

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВходящийДокумент, "Контрагенты, Адресат, ДатаСоздания");
	Контрагенты = ЗначенияРеквизитов.Контрагенты.Выгрузить();	

	ДобавитьРеквизитКСтроке(
		ПредставлениеВходящегоДокумента, НСтр("ru = 'Документ'", КодЯзыка), ВходящийДокумент);
		
	Если Контрагенты.Количество() <> 0 Тогда	
		ДобавитьРеквизитКСтроке(
			ПредставлениеВходящегоДокумента, НСтр("ru = 'Отправитель'", КодЯзыка),
			Контрагенты[0].Контрагент);
	КонецЕсли;	
		
	ДобавитьРеквизитКСтроке(
		ПредставлениеВходящегоДокумента, НСтр("ru = 'Адресат'", КодЯзыка), ЗначенияРеквизитов.Адресат);
	ДобавитьРеквизитКСтроке(
		ПредставлениеВходящегоДокумента, НСтр("ru = 'Дата'", КодЯзыка), ЗначенияРеквизитов.ДатаСоздания);
	ДобавитьРеквизитКСтроке(
		ПредставлениеВходящегоДокумента, НСтр("ru = 'Ссылка'", КодЯзыка), ПолучитьНавигационнуюСсылкуУведомления(
		ВходящийДокумент));

	Возврат ПредставлениеВходящегоДокумента;

КонецФункции

// Формирует текстовое представление исходящего документа.
//
Функция СформироватьПредставлениеИсходящегоДокумента(ИсходящийДокумент, ВидСобытия, ДополнительноеОписание, КодЯзыка)

	ПредставлениеИсходящегоДокумента = "";

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ИсходящийДокумент, "Контрагенты.Контрагент, Подготовил, ДатаСоздания");

	ДобавитьРеквизитКСтроке(
		ПредставлениеИсходящегоДокумента, НСтр("ru = 'Документ'", КодЯзыка), ИсходящийДокумент);
	ВыборкаПолучателей = ЗначенияРеквизитов.КонтрагентыКонтрагент.Выбрать();
	Пока ВыборкаПолучателей.Следующий() Цикл
		ДобавитьРеквизитКСтроке(
			ПредставлениеИсходящегоДокумента, НСтр("ru = 'Получатель'", КодЯзыка), ВыборкаПолучателей.Контрагент);
	КонецЦикла;
	ДобавитьРеквизитКСтроке(
		ПредставлениеИсходящегоДокумента, НСтр("ru = 'Подготовил'", КодЯзыка), ЗначенияРеквизитов.Подготовил);
	ДобавитьРеквизитКСтроке(
		ПредставлениеИсходящегоДокумента, НСтр("ru = 'Дата'", КодЯзыка), ЗначенияРеквизитов.ДатаСоздания);
	ДобавитьРеквизитКСтроке(
		ПредставлениеИсходящегоДокумента, НСтр("ru = 'Ссылка'", КодЯзыка), ПолучитьНавигационнуюСсылкуУведомления(
		ИсходящийДокумент));

	Возврат ПредставлениеИсходящегоДокумента;

КонецФункции

// Формирует текстовое представление файла
Функция СформироватьПредставлениеФайла(Файл, ВидСобытия, ДополнительноеОписание, КодЯзыка)

	ПредставлениеФайла = "";

	ДобавитьРеквизитКСтроке(
		ПредставлениеФайла, НСтр("ru = 'Файл'", КодЯзыка), Файл.Ссылка);
	Если ЗначениеЗаполнено(Файл.ВладелецФайла) Тогда
		Если ТипЗнч(Файл.ВладелецФайла) = Тип("СправочникСсылка.Файлы") Тогда
			ДобавитьРеквизитКСтроке(
				ПредставлениеФайла, НСтр("ru = 'Папка'", КодЯзыка), ПолучитьПолныйПуть(Файл.ВладелецФайла));
		Иначе
			ДобавитьРеквизитКСтроке(
				ПредставлениеФайла, ТипЗнч(Файл.ВладелецФайла), Файл.ВладелецФайла);
		КонецЕсли;
	КонецЕсли;
	ДобавитьРеквизитКСтроке(
		ПредставлениеФайла, НСтр("ru = 'Автор'", КодЯзыка), Файл.Автор);
	ДобавитьРеквизитКСтроке(
		ПредставлениеФайла, НСтр("ru = 'Дата'", КодЯзыка), Файл.ТекущаяВерсияДатаСоздания);
	ДобавитьРеквизитКСтроке(
		ПредставлениеФайла, НСтр("ru = 'Ссылка'", КодЯзыка), ПолучитьНавигационнуюСсылкуУведомления(Файл));

	Возврат ПредставлениеФайла;

КонецФункции

// Формирует текст уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоОбъектамУведомления(ОбъектПодписки, ВидСобытия, ОбъектыУведомления,
	ПолучательУведомления, СпособУведомления, ДополнительныеОписания)

	ТекстУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТекстУведомленияПоОбъектамУведомления(
		ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
		ДополнительныеОписания);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;

	Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл

		ДополнительноеОписание = Неопределено;

		ПредставлениеОбъекта = СформироватьПредставлениеОбъекта(
			ОбъектУведомления, ВидСобытия, ПолучательУведомления, ДополнительноеОписание);

		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ТекстУведомления, Символы.ПС + Символы.ПС, ПредставлениеОбъекта);

	КонецЦикла;

	Возврат ТекстУведомления;

КонецФункции

// Формирует текст уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	ТекстУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТекстУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	КодЯзыка = КодЯзыка(ПолучательУведомления);
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.НапоминаниеОЗамереТемпературы Тогда
		
		Попытка
			БлижайшаяДатаУчетаСамочувствия = УчетСамочувствияСотрудниковСервер.БлижайшаяДатаУчетаСамочувствия();
			ТекстУведомления = 
				СтрШаблон(
					НСтр(
						"ru = 'Пора измерять температуру тела!
						|Сделайте это до %1 и отразите в списке Мое самочувствие.
						|
						|%2'",
						КодЯзыка),
					Формат(БлижайшаяДатаУчетаСамочувствия, "ДФ=HH:mm"),
					ВнешняяНавигационнаяСсылка("e1cib/command/ОбщаяКоманда.МоеСамочувствие"));
		Исключение
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстУведомления = НСтр("ru = 'Напоминанием, что необходимо провести измерение температуры тела.'",
				КодЯзыка);
			
		КонецПопытки;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПоявлениеЗамераСПовышеннойТемпературой Тогда
		
		Попытка
			
			РеквизитыСамочувствияСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ОбъектУведомления,
				"ДатаЗамера, ТочкаЗамера, Сотрудник, Температура");
			ТекстУведомления = 
				СтрШаблон(
					НСтр(
						"ru = 'У сотрудника %1 в %2 зафиксирована температура %3.
						|
						|%4'",
						КодЯзыка),
					РеквизитыСамочувствияСотрудника.Сотрудник,
					РеквизитыСамочувствияСотрудника.ТочкаЗамера,
					Формат(РеквизитыСамочувствияСотрудника.Температура, "ЧДЦ=1"),
					ПолучитьНавигационнуюСсылкуУведомления(ОбъектУведомления));
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстУведомления = НСтр("ru = 'При измерение температуры тела у сотрудника была повышенная температура.'",
				КодЯзыка);
			
		КонецПопытки;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОтчетОЗамерахТемпературы Тогда
		
		Попытка
			
			ПредыдущаяДатаУчетаСамочувствия = УчетСамочувствияСотрудниковСервер.ПредыдущаяДатаУчетаСамочувствия();
			
			ДанныеОтчетОЗамерахТемпературы =
				УчетСамочувствияСотрудниковСервер.СформироватьОтчетЗаДень();
			
			ОграничениеСписков = 3;
			
			ПредставлениеКтоНеОтчитался = "";
			Если ДанныеОтчетОЗамерахТемпературы.НеОтчитались.Количество() > 0 Тогда
				
				МассивКтоНеОтчитался = Новый Массив;
				МассивКтоНеОтчитался.Добавить("");
				МассивКтоНеОтчитался.Добавить("");
				МассивКтоНеОтчитался.Добавить(НСтр("ru = 'Кто не отчитался'") + ":");
				
				РазмерСписка = 0;
				Для Каждого КтоНеОтчитался Из ДанныеОтчетОЗамерахТемпературы.НеОтчитались Цикл
					
					Если РазмерСписка >= ОграничениеСписков Тогда
						МассивКтоНеОтчитался.Добавить("- " + НСтр("ru = 'и другие'"));
						Прервать;
					КонецЕсли;
					
					МассивКтоНеОтчитался.Добавить("- " + Строка(КтоНеОтчитался));
					
					РазмерСписка = РазмерСписка + 1;
					
				КонецЦикла;
				
				ПредставлениеКтоНеОтчитался = СтрСоединить(МассивКтоНеОтчитался, Символы.ПС);
				
			КонецЕсли;
			
			ПредставлениеУКогоПлохоеСамочувствие = "";
			Если ДанныеОтчетОЗамерахТемпературы.ПлохоеСамочувствие.Количество() > 0 Тогда
				
				МассивУКогоПлохоеСамочувствие = Новый Массив;
				МассивУКогоПлохоеСамочувствие.Добавить("");
				МассивУКогоПлохоеСамочувствие.Добавить("");
				МассивУКогоПлохоеСамочувствие.Добавить(НСтр("ru = 'У кого плохое самочувствие'") + ":");
				
				РазмерСписка = 0;
				Для Каждого УКогоПлохоеСамочувствие Из ДанныеОтчетОЗамерахТемпературы.ПлохоеСамочувствие Цикл
					
					Если РазмерСписка >= ОграничениеСписков Тогда
						МассивУКогоПлохоеСамочувствие.Добавить("- " + НСтр("ru = 'и другие'"));
						Прервать;
					КонецЕсли;
					
					МассивУКогоПлохоеСамочувствие.Добавить("- " + Строка(УКогоПлохоеСамочувствие));
					
					РазмерСписка = РазмерСписка + 1;
					
				КонецЦикла;
				
				ПредставлениеУКогоПлохоеСамочувствие = СтрСоединить(МассивУКогоПлохоеСамочувствие, Символы.ПС);
				
			КонецЕсли;
			
			ТекстУведомления = 
				СтрШаблон(
					НСтр(
						"ru = 'Отчитались: %1.
						|Не отчитались: %2.
						|Плохое самочувствие: %3.%4%5
						|
						|%6'",
						КодЯзыка),
					ДанныеОтчетОЗамерахТемпературы.КоличествоОтчитались,
					ДанныеОтчетОЗамерахТемпературы.КоличествоНеОтчитались,
					ДанныеОтчетОЗамерахТемпературы.КоличествоПлохоеСамочувствие,
					ПредставлениеКтоНеОтчитался,
					ПредставлениеУКогоПлохоеСамочувствие,
					ВнешняяНавигационнаяСсылка("e1cib/app/Отчет.СамочувствиеСотрудников"));
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстУведомления = СтрШаблон(
				НСтр("ru = 'Информация о результатах мониторинга температуры тела сотрудников актуализирована.
					|
					|%1'",
					КодЯзыка),
				ВнешняяНавигационнаяСсылка("e1cib/app/Отчет.СамочувствиеСотрудников"));
			
		КонецПопытки;
			
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.СводкаПоЗадачам
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора Тогда
		
		МассивТекстУведомления = Новый Массив;
		Для Счетчик = 2 По СтрЧислоСтрок(ДополнительноеОписание) Цикл
			ТекущаяСтрока = СтрПолучитьСтроку(ДополнительноеОписание, Счетчик);
			МассивТекстУведомления.Добавить(ТекущаяСтрока);
		КонецЦикла;
		ТекстУведомления = СтрСоединить(МассивТекстУведомления, Символы.ПС);
		
		Если Не ЗначениеЗаполнено(ТекстУведомления) Тогда
			ТекстУведомления = ДополнительноеОписание;
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОбработкиНаПаузе Тогда
		
		МассивТекстУведомления = Новый Массив;
		Для Счетчик = 2 По СтрЧислоСтрок(ДополнительноеОписание) Цикл
			ТекущаяСтрока = СтрПолучитьСтроку(ДополнительноеОписание, Счетчик);
			МассивТекстУведомления.Добавить(ТекущаяСтрока);
		КонецЦикла;
		ТекстУведомления = СтрСоединить(МассивТекстУведомления, Символы.ПС);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован Тогда
		
		МассивТекстУведомления = Новый Массив;
		
		МассивЭДО = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(ОбъектУведомления);
		ДокументЭДО = Неопределено;
		Если МассивЭДО.Количество() = 1 Тогда
			
			ДокументЭДО = МассивЭДО[0];
			Комментарий = ОбменЭДОДокументооборот.СостояниеДокументаПодробно(ДокументЭДО, ВидСобытия);
			Если ЗначениеЗаполнено(Комментарий) Тогда
				Для Счетчик = 1 По СтрЧислоСтрок(Комментарий) Цикл
					ТекущаяСтрока = СтрПолучитьСтроку(Комментарий, Счетчик);
					МассивТекстУведомления.Добавить(ТекущаяСтрока);
				КонецЦикла;  
			КонецЕсли;	
			
		КонецЕсли;	
		
		Для Счетчик = 2 По СтрЧислоСтрок(ДополнительноеОписание) Цикл
			ТекущаяСтрока = СтрПолучитьСтроку(ДополнительноеОписание, Счетчик);
			МассивТекстУведомления.Добавить(ТекущаяСтрока);
		КонецЦикла;  
		
		ТекстУведомления = СтрСоединить(МассивТекстУведомления, Символы.ПС);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен Тогда
		
		МассивТекстУведомления = Новый Массив;
		
		МассивЭДО = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(ОбъектУведомления);
		ДокументЭДО = Неопределено;
		Если МассивЭДО.Количество() = 1 Тогда
			
			ДокументЭДО = МассивЭДО[0];
			Комментарий = ОбменЭДОДокументооборот.СостояниеДокументаПодробно(ДокументЭДО, ВидСобытия);
			Если ЗначениеЗаполнено(Комментарий) Тогда
				Для Счетчик = 1 По СтрЧислоСтрок(Комментарий) Цикл
					ТекущаяСтрока = СтрПолучитьСтроку(Комментарий, Счетчик);
					МассивТекстУведомления.Добавить(ТекущаяСтрока);
				КонецЦикла;  
			КонецЕсли;	
			
		КонецЕсли;	
		
		Для Счетчик = 2 По СтрЧислоСтрок(ДополнительноеОписание) Цикл
			ТекущаяСтрока = СтрПолучитьСтроку(ДополнительноеОписание, Счетчик);
			МассивТекстУведомления.Добавить(ТекущаяСтрока);
		КонецЦикла;  
		
		ТекстУведомления = СтрСоединить(МассивТекстУведомления, Символы.ПС);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования Тогда
		
		МассивТекстУведомления = Новый Массив;
		
		МассивЭДО = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(ОбъектУведомления);
		ДокументЭДО = Неопределено;
		Если МассивЭДО.Количество() = 1 Тогда
			
			ДокументЭДО = МассивЭДО[0];
			Комментарий = ОбменЭДОДокументооборот.СостояниеДокументаПодробно(ДокументЭДО, ВидСобытия);
			Если ЗначениеЗаполнено(Комментарий) Тогда
				Для Счетчик = 1 По СтрЧислоСтрок(Комментарий) Цикл
					ТекущаяСтрока = СтрПолучитьСтроку(Комментарий, Счетчик);
					МассивТекстУведомления.Добавить(ТекущаяСтрока);
				КонецЦикла;  
			КонецЕсли;	
			
		КонецЕсли;	
		
		Для Счетчик = 2 По СтрЧислоСтрок(ДополнительноеОписание) Цикл
			ТекущаяСтрока = СтрПолучитьСтроку(ДополнительноеОписание, Счетчик);
			МассивТекстУведомления.Добавить(ТекущаяСтрока);
		КонецЦикла;  
		
		ТекстУведомления = СтрСоединить(МассивТекстУведомления, Символы.ПС);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.СводкаОРабочемВремени
		Или ВидСобытия = Перечисления.СобытияУведомлений.ОтсутствуетОригинал Тогда
		
		ТекстУведомления = ДополнительноеОписание;
		
	ИначеЕсли ВидСобытия  = Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиСоздание
		Или ВидСобытия  = Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиИзменение Тогда
		
		ВидЗамещения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектУведомления, "ВидЗамещения");
		ПредставлениеСсылки = ?(ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие,
				НСтр("ru = 'Подробнее см. в карточке замещения'", КодЯзыка),
				НСтр("ru = 'Подробнее см. в карточке помощника'", КодЯзыка));
		ТекстУведомления = ПолучитьНавигационнуюСсылкуУведомления(ОбъектУведомления, ПредставлениеСсылки);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПередачаЗадачОтИсполнителя
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.СнятиеЗадачИсполнителя Тогда
		
		ТекстУведомления = ДополнительноеОписание;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
		
		ТекстУведомления = ДополнительноеОписание;
		
		ДобавитьРеквизитКСтроке(
			ТекстУведомления,
			Символы.ПС + НСтр("ru = 'Ссылка'", КодЯзыка),
			ПолучитьНавигационнуюСсылкуУведомления(ОбъектУведомления));
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗадачи Тогда
		
		ПредставлениеЗадачиИОписание = ПредставлениеЗадачиИОписаниеИзмененийПоОписанию(ДополнительноеОписание);
		
		Если ПредставлениеЗадачиИОписание.ОписаниеИзменений <> Неопределено Тогда
			ТекстУведомления = ПредставлениеЗадачиИОписание.ОписаниеИзменений;
			ДобавитьРеквизитКСтроке(
				ТекстУведомления,
				НСтр("ru = 'Ссылка'", КодЯзыка),
				ПолучитьНавигационнуюСсылкуУведомления(ОбъектУведомления));
		КонецЕсли;
	
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументИсправлен Тогда
		
		МассивТекстУведомления = Новый Массив;
		Для Счетчик = 2 По СтрЧислоСтрок(ДополнительноеОписание) Цикл
			ТекущаяСтрока = СтрПолучитьСтроку(ДополнительноеОписание, Счетчик);
			МассивТекстУведомления.Добавить(ТекущаяСтрока);
		КонецЦикла;
		ТекстУведомления = СтрСоединить(МассивТекстУведомления, Символы.ПС);
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	ТекстУведомления = СформироватьПредставлениеОбъекта(
		ОбъектУведомления,
		ВидСобытия,
		ПолучательУведомления,
		ДополнительноеОписание);
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует тему уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоОбъектамУведомления(ОбъектПодписки, ВидСобытия, ОбъектыУведомления,
	ПолучательУведомления, СпособУведомления, ДополнительныеОписания)

	ТемаУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТемуУведомленияПоОбъектамУведомления(
		ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
		ДополнительныеОписания);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;

	КодЯзыка = КодЯзыка(ПолучательУведомления);
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда

		ПредставлениеОбъектаПодписки = "";
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			ПолныйПутьПапки = ПолучитьПолныйПуть(ОбъектПодписки.Ссылка);
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в папке ""%1""'", КодЯзыка), ПолныйПутьПапки);
		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда

			ТипДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектПодписки, "ВидДокумента.ЯвляетсяВходящейКорреспонденцией,
																					  |ВидДокумента.ЯвляетсяИсходящейКорреспонденцией");

			Если ТипДокумента.ВидДокументаЯвляетсяВходящейКорреспонденцией Тогда

				ПредставлениеОбъектаПодписки = СтрШаблон(
					НСтр("ru = 'в входящем документе ""%1""'", КодЯзыка), ОбъектПодписки.Ссылка);

			ИначеЕсли ТипДокумента.ВидДокументаЯвляетсяИсходящейКорреспонденцией Тогда

				ПредставлениеОбъектаПодписки = СтрШаблон(
					НСтр("ru = 'в исходящем документе ""%1""'", КодЯзыка), ОбъектПодписки.Ссылка);

			Иначе

				ПредставлениеОбъектаПодписки = СтрШаблон(
					НСтр("ru = 'во внутреннем документе ""%1""'", КодЯзыка), ОбъектПодписки.Ссылка);

			КонецЕсли;

		КонецЕсли;

		Если ЗначениеЗаполнено(ПредставлениеОбъектаПодписки) Тогда
			Если ОбъектыУведомления.Количество() = 1 Тогда
				ОбъектУведомления = ОбъектыУведомления[0];
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новый файл ""%1"" %2'", КодЯзыка), ОбъектУведомления.Ссылка,
					ПредставлениеОбъектаПодписки);
			Иначе
				КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новые файлы (%1) %2'", КодЯзыка), КоличествоОбъектовУведомления,
					ПредставлениеОбъектаПодписки);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеДокумента Тогда

		ПредставлениеОбъектаПодписки = "";
		ПредставлениеМеханизмаКонфигурации = "";
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиДокументов") И ЗначениеЗаполнено(ОбъектПодписки) Тогда

			ПолныйПутьПапки = ПолучитьПолныйПуть(ОбъектПодписки.Ссылка);
			ПредставлениеОбъектаПодписки = " " + СтрШаблон(
				НСтр("ru = 'в папке ""%1""'", КодЯзыка), ПолныйПутьПапки);

		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ИсточникиДанных") И ЗначениеЗаполнено(ОбъектПодписки) Тогда

			ПредставлениеМеханизмаКонфигурации = СтрШаблон("%1: ", ОбъектПодписки);

		КонецЕсли;

		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = ПредставлениеМеханизмаКонфигурации + СтрШаблон(НСтр("ru = 'Новый документ ""%1""'",
				КодЯзыка), ОбъектУведомления.Ссылка) + ПредставлениеОбъектаПодписки;
		Иначе

			СтрокаСЧисломНовыхДокументов = СтрокаСЧислом(
				НСтр("ru=';%1 новый документ;;%1 новых документа;%1 новых документов;%1 новых документа'", КодЯзыка),
				ОбъектыУведомления.Количество(), ВидЧисловогоЗначения.Количественное);

			ТемаУведомления = ПредставлениеМеханизмаКонфигурации + СтрокаСЧисломНовыхДокументов
				+ ПредставлениеОбъектаПодписки;

		КонецЕсли;

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.НоваяЗадача Тогда

		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(НСтр("ru = 'Новая задача ""%1""'", КодЯзыка), ОбъектУведомления.Ссылка);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(НСтр("ru = 'Новые задачи (%1)'", КодЯзыка), КоличествоОбъектовУведомления);
		КонецЕсли;

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента Тогда

		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Приближается окончание срока действия документа ""%1""'", КодЯзыка), Строка(
				ОбъектУведомления.Ссылка));
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Приближается окончание срока действия документов (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента Тогда

		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Закончился срок действия документа ""%1""'", КодЯзыка), Строка(ОбъектУведомления.Ссылка));
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Закончился срок действия документов (%1)'", КодЯзыка), КоличествоОбъектовУведомления);
		КонецЕсли;

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачиПроцесса Тогда

		Если ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ПредставлениеОбъектаПодписки = "";
		Иначе
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'процесса ""%1""'", КодЯзыка), ОбъектПодписки.Наименование);
		КонецЕсли;

		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Выполнена задача ""%1""'", КодЯзыка), ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Выполнены задачи (%1) %2'", КодЯзыка), КоличествоОбъектовУведомления,
				ПредставлениеОбъектаПодписки);
		КонецЕсли;

	КонецЕсли;

	Возврат ТемаУведомления;

КонецФункции

// Формирует тему уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Булево - Расшифровывать уведомление.
//
Функция ПолучитьРасшифровыватьПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗадачи Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Формирует тему уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	ТемаУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТемуУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеДокумента Тогда
		
		КодЯзыка = КодЯзыка(ПолучательУведомления);
		
		ПредставлениеОбъектаПодписки = "";
		ПредставлениеМеханизмаКонфигурации = "";
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиДокументов")
			И ЗначениеЗаполнено(ОбъектПодписки) Тогда
			
			ПолныйПутьПапки = ПолучитьПолныйПуть(ОбъектУведомления.Папка);
			ПредставлениеОбъектаПодписки = " " + СтрШаблон(
				НСтр("ru = 'в папке ""%1""'", КодЯзыка),
				ПолныйПутьПапки);
			
		ИначеЕсли ЗначениеЗаполнено(ОбъектУведомления.Источник) Тогда
			
			ПредставлениеМеханизмаКонфигурации = СтрШаблон("%1: ", ОбъектУведомления.Источник);
			
		КонецЕсли;
		
		ТемаУведомления =
			ПредставлениеМеханизмаКонфигурации
			+ СтрШаблон(НСтр("ru = 'Новый документ ""%1""'", КодЯзыка), ОбъектУведомления.Ссылка)
			+ ПредставлениеОбъектаПодписки;
			
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.НапоминаниеОЗамереТемпературы Тогда
		
		КодЯзыка = КодЯзыка(ПолучательУведомления);
		Попытка
			
			БлижайшаяДатаУчетаСамочувствия = УчетСамочувствияСотрудниковСервер.БлижайшаяДатаУчетаСамочувствия();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Напоминание: Измерение температуры в %1'", КодЯзыка),
				Формат(БлижайшаяДатаУчетаСамочувствия, "ДФ=HH:mm"));
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТемаУведомления = НСтр("ru = 'Напоминание: Измерение температуры'", КодЯзыка);
			
		КонецПопытки;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПоявлениеЗамераСПовышеннойТемпературой Тогда
		
		КодЯзыка = КодЯзыка(ПолучательУведомления);
		Попытка
			
			РеквизитыСамочувствияСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ОбъектУведомления,
				"Сотрудник, Температура");
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Внимание! Повышенная температура: %1, %2'", КодЯзыка),
				Формат(РеквизитыСамочувствияСотрудника.Температура, "ЧДЦ=1"),
				РеквизитыСамочувствияСотрудника.Сотрудник);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТемаУведомления = НСтр("ru = 'Внимание! Повышенная температура'", КодЯзыка);
			
		КонецПопытки;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОтчетОЗамерахТемпературы Тогда
		
		КодЯзыка = КодЯзыка(ПолучательУведомления);
		Попытка
			
			ПредыдущаяДатаУчетаСамочувствия = УчетСамочувствияСотрудниковСервер.ПредыдущаяДатаУчетаСамочувствия();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Отчет о самочувствии сотрудников %1 в %2'", КодЯзыка),
				Формат(ПредыдущаяДатаУчетаСамочувствия, "ДЛФ=D"),
				Формат(ПредыдущаяДатаУчетаСамочувствия, "ДФ=HH:mm"));
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТемаУведомления = НСтр("ru = 'Отчет о самочувствии сотрудников'", КодЯзыка);
			
		КонецПопытки;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.СводкаОРабочемВремени Тогда
		
		КодЯзыка = КодЯзыка(ПолучательУведомления);
		ТемаУведомления = НСтр("ru = 'Сводка о рабочем времени'", КодЯзыка);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОтсутствуетОригинал Тогда
		
		ТемаУведомления = НСтр("ru = 'Отсутствуют оригиналы'", КодЯзыка);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОбработкиНаПаузе Тогда
		
		ТемаУведомления = СтрПолучитьСтроку(ДополнительноеОписание, 1);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован Тогда
		
		ТемаУведомления = СтрПолучитьСтроку(ДополнительноеОписание, 1);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен Тогда
		
		ТемаУведомления = СтрПолучитьСтроку(ДополнительноеОписание, 1);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования Тогда
		
		ТемаУведомления = СтрПолучитьСтроку(ДополнительноеОписание, 1);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.СводкаПоЗадачам
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора Тогда
		
		ТемаУведомления = СтрПолучитьСтроку(ДополнительноеОписание, 1);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиСоздание Тогда
		
		РеквизитыЗамещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУведомления,
			"ВидЗамещения, Сотрудник, Замещающий, ДатаНачала, ДатаОкончания,
			|Сотрудник.ПредставлениеВПереписке, Замещающий.ПредставлениеВПереписке,
			|Сотрудник.Владелец.Наименование, Замещающий.Владелец.Наименование,
			|Сотрудник.Владелец.Пол");
		
		ЭтоУведомлениеДляЗамещаемого = Ложь;
		ЭтоУведомлениеДляЗамещающего = Ложь;
		ПользователиСотрудника = Сотрудники.ПользователиСотрудника(РеквизитыЗамещения.Сотрудник);
		Если ПользователиСотрудника.Найти(ПолучательУведомления) <> Неопределено Тогда
			ЭтоУведомлениеДляЗамещаемого = Истина;
		Иначе 
			ПользователиЗамещающего = Сотрудники.ПользователиСотрудника(РеквизитыЗамещения.Замещающий);
			Если ПользователиЗамещающего.Найти(ПолучательУведомления) <> Неопределено Тогда
				ЭтоУведомлениеДляЗамещающего = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеСрока = СтрШаблон(НСтр("ru = 'с %1'", КодЯзыка),
			Формат(РеквизитыЗамещения.ДатаНачала, "ДФ='дд.ММ.гг'"));
		Если ЗначениеЗаполнено(РеквизитыЗамещения.ДатаОкончания) Тогда
			ПредставлениеСрока = ПредставлениеСрока + " " + СтрШаблон(НСтр("ru = 'по %1'", КодЯзыка),
				Формат(РеквизитыЗамещения.ДатаОкончания, "ДФ='дд.ММ.гг'"))
		КонецЕсли;
		
		Если ЭтоУведомлениеДляЗамещаемого Тогда
			ПредставлениеЗамещающего = РеквизитыЗамещения.ЗамещающийПредставлениеВПереписке;
			Если Не ЗначениеЗаполнено(ПредставлениеЗамещающего) Тогда
				ПредставлениеЗамещающего = РеквизитыЗамещения.ЗамещающийВладелецНаименование;
			КонецЕсли;
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Вам назначен %1 %2 %3'", КодЯзыка),
				?(РеквизитыЗамещения.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие, 
					НСтр("ru = 'замещающий'", КодЯзыка),
					НСтр("ru = 'помощник'", КодЯзыка)),
				ПредставлениеЗамещающего,
				ПредставлениеСрока);
		ИначеЕсли ЭтоУведомлениеДляЗамещающего Тогда 
			ПредставлениеСотрудника = РеквизитыЗамещения.СотрудникПредставлениеВПереписке;
			Если Не ЗначениеЗаполнено(ПредставлениеСотрудника) Тогда
				ПредставлениеСотрудника = РеквизитыЗамещения.СотрудникВладелецНаименование;
			КонецЕсли;
			ПредставлениеСотрудника = СклонениеПредставленийОбъектов.ПросклонятьФИО(
				ПредставлениеСотрудника, 2,,
				?(РеквизитыЗамещения.СотрудникВладелецПол = Перечисления.ПолФизическогоЛица.Женский, 2, 1));
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Вы назначены %1 для %2 %3'", КодЯзыка),
				?(РеквизитыЗамещения.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие, 
					НСтр("ru = 'замещающим'", КодЯзыка),
					НСтр("ru = 'помощником'", КодЯзыка)),
				ПредставлениеСотрудника,
				ПредставлениеСрока);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиИзменение Тогда
		
		РеквизитыЗамещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУведомления,
			"ВидЗамещения, Сотрудник, Замещающий,
			|Сотрудник.ПредставлениеВПереписке, Замещающий.ПредставлениеВПереписке,
			|Сотрудник.Владелец.Наименование, Сотрудник.Владелец.Пол,
			|Замещающий.Владелец.Наименование, Замещающий.Владелец.Пол");
		
		ЭтоУведомлениеДляЗамещаемого = Ложь;
		ЭтоУведомлениеДляЗамещающего = Ложь;
		ПользователиСотрудника = Сотрудники.ПользователиСотрудника(РеквизитыЗамещения.Сотрудник);
		Если ПользователиСотрудника.Найти(ПолучательУведомления) <> Неопределено Тогда
			ЭтоУведомлениеДляЗамещаемого = Истина;
		Иначе 
			ПользователиЗамещающего = Сотрудники.ПользователиСотрудника(РеквизитыЗамещения.Замещающий);
			Если ПользователиЗамещающего.Найти(ПолучательУведомления) <> Неопределено Тогда
				ЭтоУведомлениеДляЗамещающего = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЭтоУведомлениеДляЗамещаемого И Не ЭтоУведомлениеДляЗамещающего Тогда
			Возврат ТемаУведомления;
		КонецЕсли; 
		
		ПредставлениеФИОВторойСтороны = "";
		ПолВторойСтороны = Неопределено;
		Если ЭтоУведомлениеДляЗамещаемого Тогда
			ПредставлениеФИОВторойСтороны = РеквизитыЗамещения.ЗамещающийПредставлениеВПереписке;
			ПолВторойСтороны = РеквизитыЗамещения.ЗамещающийВладелецПол;
			Если Не ЗначениеЗаполнено(ПредставлениеФИОВторойСтороны) Тогда
				ПредставлениеФИОВторойСтороны = РеквизитыЗамещения.ЗамещающийВладелецНаименование;
			КонецЕсли;
		Иначе
			ПредставлениеФИОВторойСтороны = РеквизитыЗамещения.СотрудникПредставлениеВПереписке;
			ПолВторойСтороны = РеквизитыЗамещения.СотрудникВладелецПол;
			Если Не ЗначениеЗаполнено(ПредставлениеФИОВторойСтороны) Тогда
				ПредставлениеФИОВторойСтороны = РеквизитыЗамещения.СотрудникВладелецНаименование;
			КонецЕсли;
		КонецЕсли;
		ПредставлениеФИОВторойСтороны = СклонениеПредставленийОбъектов.ПросклонятьФИО(
			ПредставлениеФИОВторойСтороны, 2,,
			?(ПолВторойСтороны = Перечисления.ПолФизическогоЛица.Женский, 2, 1));
		
		ТемаУведомления = СтрШаблон(
			НСтр("ru = 'Изменены настройки %1 %2'", КодЯзыка),
			?(ЭтоУведомлениеДляЗамещаемого, 
				?(РеквизитыЗамещения.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие,
					НСтр("ru = 'вашего замещающего'", КодЯзыка) + ",",
					НСтр("ru = 'вашего помощника'", КодЯзыка) + ","),
				?(РеквизитыЗамещения.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие,
					НСтр("ru = 'замещения для'", КодЯзыка),
					НСтр("ru = 'помощника для'", КодЯзыка))),
			ПредставлениеФИОВторойСтороны);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПередачаЗадачОтИсполнителя
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.СнятиеЗадачИсполнителя Тогда
		
		ТемаУведомления = ДополнительноеОписание;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
		
		ТемаУведомления = СтрШаблон(
			НСтр("ru = 'Отменено выполнение задачи ""%1""'", КодЯзыка),
			ОбъектУведомления);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияИзменениеПриглашения  Тогда
		
		ТемаУведомления = СтрШаблон(
			НСтр("ru = 'Изменено приглашение на %1'", КодЯзыка),
			УправлениеМероприятиями.РасширенноеПредставлениеСДатой(ОбъектУведомления));
			
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияОтклоненоПриглашение  Тогда
		
		ТемаУведомления = СтрШаблон(
			НСтр("ru = '%1 отклонил приглашение на %2'", КодЯзыка),
			ДополнительноеОписание,
			УправлениеМероприятиями.РасширенноеПредставлениеСДатой(ОбъектУведомления));
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияОтменаПриглашения  Тогда
		
		ТемаУведомления = УправлениеМероприятиями.ТемаОтменыПриглашения(ОбъектУведомления, КодЯзыка);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияПриглашение  Тогда

		ТемаУведомления = УправлениеМероприятиями.ТемаПриглашения(ОбъектУведомления, КодЯзыка);
			
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияПринятоПриглашение  Тогда

		ТемаУведомления = СтрШаблон(
			НСтр("ru = '%1 принял приглашение на %2'", КодЯзыка),
			ДополнительноеОписание,
			УправлениеМероприятиями.РасширенноеПредставлениеСДатой(ОбъектУведомления));
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомДействияОбработки Тогда
		
		ТемаУведомления = СтрШаблон(
			НСтр("ru = 'Ознакомиться с результатом ""%1 ""%2""""'", КодЯзыка),
			ОбъектПодписки,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПодписки, "Предмет"));
	
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗадачи  Тогда
		
		ПредставлениеВидаСобытия =
			Перечисления.СобытияУведомлений.ПредставлениеВидаСобытия(
				ВидСобытия,
				ОбъектПодписки,
				ПолучательУведомления);
		
		ПредставлениеЗадачиИОписание = ПредставлениеЗадачиИОписаниеИзмененийПоОписанию(ДополнительноеОписание);
		
		Если ПредставлениеЗадачиИОписание.ОписаниеИзменений <> Неопределено Тогда
			ПредставлениеОбъектаУведомления = ПредставлениеЗадачиИОписание.ПредставлениеЗадачи;
		Иначе
			ПредставлениеОбъектаУведомления = Строка(ОбъектУведомления);
		КонецЕсли;
		
		ТемаУведомления = СтрШаблон("%1 ""%2""", ПредставлениеВидаСобытия, ПредставлениеОбъектаУведомления);
	
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументИсправлен Тогда
		
		ТемаУведомления = СтрПолучитьСтроку(ДополнительноеОписание, 1);
	
	Иначе
		
		ПредставлениеВидаСобытия =
			Перечисления.СобытияУведомлений.ПредставлениеВидаСобытия(
				ВидСобытия,
				ОбъектПодписки,
				ПолучательУведомления);
		ПредставлениеОбъектаУведомления = Строка(ОбъектУведомления);
		ТемаУведомления = СтрШаблон("%1 ""%2""", ПредставлениеВидаСобытия, ПредставлениеОбъектаУведомления);
		
		// Замена двойных кавычек на одинарные: Задача "Согласовать "Документ"" => Задача "Согласовать "Документ"
		ТемаУведомления = СтрЗаменить(ТемаУведомления, """""", """");
		
	КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует уведомления из очереди уведомлений для отправки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Уведомления для отправки.
//
Функция СформироватьУведомленияДляОтправки()

	СформированныеУведомления = Новый ТаблицаЗначений;
	СформированныеУведомления.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	СформированныеУведомления.Колонки.Добавить("СпособУведомления",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУведомления"));
	СформированныеУведомления.Колонки.Добавить("ВидСобытия",
		Новый ОписаниеТипов("СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений"));
	СформированныеУведомления.Колонки.Добавить("ТемаУведомления", Новый ОписаниеТипов("Строка"));
	СформированныеУведомления.Колонки.Добавить("ТекстУведомления", Новый ОписаниеТипов("Строка"));
	СформированныеУведомления.Колонки.Добавить("Уведомления", Новый ОписаниеТипов("Массив"));
	СформированныеУведомления.Колонки.Добавить("Файлы", Новый ОписаниеТипов("Массив"));
	СформированныеУведомления.Колонки.Добавить("ОбъектыУведомления", Новый ОписаниеТипов("Массив"));
	СформированныеУведомления.Колонки.Добавить("ТекстОповещения", Новый ОписаниеТипов("Строка"));
	СформированныеУведомления.Колонки.Добавить("ПояснениеОповещения", Новый ОписаниеТипов("Строка"));
	СформированныеУведомления.Колонки.Добавить("Расшифровывать", Новый ОписаниеТипов("Булево"));

	Уведомления = РегистрыСведений.ОчередьУведомлений.ПолучитьУведомления();
	ПолучателиУведомлений = ОбщегоНазначения.ВыгрузитьКолонку(Уведомления, "Пользователь", Истина);

	Для Каждого ПолучательУведомления Из ПолучателиУведомлений Цикл

		Для Каждого СпособУведомления Из Перечисления.СпособыУведомления Цикл
			
			// Группируем уведомления по виду видам событий.
			ВидыСобытий = ВидыСобытийДляГруппировки(ПолучательУведомления, СпособУведомления);
			Для Каждого ВидСобытия Из ВидыСобытий Цикл
				СформироватьУведомленияПоВидуБизнесСобытия(
					ПолучательУведомления, СпособУведомления, ВидСобытия, Уведомления, СформированныеУведомления);
			КонецЦикла;
			
			// Формируем тексты уведомлений по оставшимся уведомлениям.
			СформироватьУведомленияПоСобытиям(
				ПолучательУведомления, СпособУведомления, ВидыСобытий, Уведомления, СформированныеУведомления);

		КонецЦикла;

	КонецЦикла;

	Возврат СформированныеУведомления;

КонецФункции

// Формирует уведомления по событию с группировкой.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназначено уведомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияПоВидуБизнесСобытия(ПолучательУведомления, СпособУведомления, ВидСобытия, Уведомления,
	СформированныеУведомления)

	Если РаботаСУведомлениямиПереопределяемый.СформироватьУведомленияПоВидуБизнесСобытия(
		ПолучательУведомления, СпособУведомления, ВидСобытия, Уведомления, СформированныеУведомления) Тогда
		Возврат;
	КонецЕсли;

	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачиПроцесса Тогда
		
		// Группировка уведомлений по процессу / задаче.
		Отбор = Новый Структура;
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);

		УведомленияПодписки = Новый Массив;
		ДополнительныеОписания = Новый Соответствие;
		ОбъектыПодписки = Новый Массив;
		ОбъектыУведомленияСПодпиской = Новый Массив;
		ОбъектыУведомленияСОтказом = Новый Массив;

		БизнесПроцессыРодители = Новый ТаблицаЗначений;
		БизнесПроцессыРодители.Колонки.Добавить("ОбъектПодписки");
		БизнесПроцессыРодители.Колонки.Добавить("Родитель");
		ОтказыОтПодписки = РегистрыСведений.НастройкиУведомлений.ОтказыОтПодписки(ПолучательУведомления, ВидСобытия,
			СпособУведомления);

		Для Каждого Уведомление Из УведомленияПользователя Цикл

			Если Не ЭтоПоддерживаемыйБизнесПроцесс(Уведомление.ОбъектПодписки) Тогда
				Продолжить;
			КонецЕсли;

			ДобавитьВМассивСПроверкойПодписки(
				Уведомление.Объект, Уведомление.ОбъектПодписки, ОбъектыПодписки, БизнесПроцессыРодители,
				ОтказыОтПодписки, ОбъектыУведомленияСПодпиской, ОбъектыУведомленияСОтказом);

			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);

		КонецЦикла;

		Для Каждого Уведомление Из УведомленияПользователя Цикл

			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда

				Продолжить;

			КонецЕсли;

			Если Не ЯвляетсяПотомкомОбъектовПодписки(Уведомление.ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки) Тогда

				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);

			КонецЕсли;

			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);

		КонецЦикла;

		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл

			Отбор = Новый Структура;
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);

			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено И ОбъектыУведомленияСОтказом.Найти(
					Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;

			Если ОбъектыУведомления.Количество() > 0 Тогда

				ДанныеУведомления = ДанныеУведомленияПоОбъектам(
					ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
					ДополнительныеОписания);

				СформированноеУведомление = СформированныеУведомления.Добавить();
				ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.ВидСобытия = ВидСобытия;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					СформированноеУведомление.ОбъектыУведомления, ОбъектыУведомления);

			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеДокумента Тогда

		СформироватьУведомленияГруппировкаПоСобытиюСозданиеДокумента(
			ПолучательУведомления, СпособУведомления, ВидСобытия, Уведомления, СформированныеУведомления);

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.НоваяЗадача Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента Тогда
		
		// Группировка по событию.
		СформироватьУведомленияГруппировкаПоСобытию(
			ПолучательУведомления, СпособУведомления, ВидСобытия, Уведомления, СформированныеУведомления);

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		// Группировка по событию и объекту подписки.
		СформироватьУведомленияГруппировкаПоОбъектуПодписки(
			ПолучательУведомления, СпособУведомления, ВидСобытия, Уведомления, СформированныеУведомления);
			
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПринятиеДокументовВАрхив Тогда

		// Группировка по событию.
		СформироватьУведомленияГруппировкаПоСобытию(
			ПолучательУведомления, СпособУведомления, ВидСобытия, Уведомления, СформированныеУведомления);
			
	КонецЕсли;

КонецПроцедуры

// Формирует уведомления по событиям без группировки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ОбработанныеВидыБизнесСобытий - Массив - Виды события, по которым уже сгруппированы уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназначено уведомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияПоСобытиям(ПолучательУведомления, СпособУведомления, ОбработанныеВидыБизнесСобытий,
	Уведомления, СформированныеУведомления)

	Если РаботаСУведомлениямиПереопределяемый.СформироватьУведомленияПоСобытиям(
		ПолучательУведомления, СпособУведомления, ОбработанныеВидыБизнесСобытий, Уведомления,
		СформированныеУведомления) Тогда
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);

	Для Каждого Уведомление Из УведомленияПользователя Цикл

		Если ОбработанныеВидыБизнесСобытий.Найти(Уведомление.ВидСобытия) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ДанныеУведомления = ДанныеУведомленияПоСобытию(
			Уведомление.ОбъектПодписки, Уведомление.ВидСобытия, Уведомление.Объект, ПолучательУведомления,
			СпособУведомления, Уведомление.ДополнительноеОписание);

		УведомленияПодписки = Новый Массив;
		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);

		СформированноеУведомление = СформированныеУведомления.Добавить();
		ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
		СформированноеУведомление.Пользователь = ПолучательУведомления;
		СформированноеУведомление.СпособУведомления = СпособУведомления;
		СформированноеУведомление.ВидСобытия = Уведомление.ВидСобытия;
		СформированноеУведомление.Уведомления = УведомленияПодписки;
		СформированноеУведомление.ОбъектыУведомления.Добавить(Уведомление.Объект);

	КонецЦикла;

КонецПроцедуры

// Формирует файлы уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоОбъектамУведомления(ОбъектПодписки, ВидСобытия, ОбъектыУведомления,
	ПолучательУведомления, СпособУведомления, ДополнительныеОписания)

	Файлы = РаботаСУведомлениямиПереопределяемый.СформироватьФайлыУведомленияПоОбъектамУведомления(
		ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления,
		ДополнительныеОписания);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;

	Файлы = Неопределено;

	Возврат Файлы;

КонецФункции

// Формирует файлы уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоСобытию(ОбъектПодписки, ВидСобытия, ОбъектУведомления, ПолучательУведомления,
	СпособУведомления, ДополнительноеОписание)

	Файлы = РаботаСУведомлениямиПереопределяемый.СформироватьФайлыУведомленияПоСобытию(
		ОбъектПодписки, ВидСобытия, ОбъектУведомления, ПолучательУведомления, СпособУведомления, ДополнительноеОписание);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;

	Файлы = Неопределено;

	Возврат Файлы;

КонецФункции

// Преобразует текст уведомления в простой текст.
//
// Параметры:
//  ТекстУведомления - Строка - Текст уведомления.
//  ВырезатьАдресПубликации - Булево.
//
// Возвращаемое значение:
//  Строка - Текст уведомления в HTML.
//
Функция ТекстУведомленияВПростойТекст(Знач ТекстУведомления, ВырезатьАдресПубликации)

	ПростойТекстУведомления = СтрЗаменить(ТекстУведомления, "<b>", "");
	ПростойТекстУведомления = СтрЗаменить(ПростойТекстУведомления, "</b>", "");

	АдресПубликацииНаВебСервере = Константы.АдресПубликацииНаВебСервере.Получить();
	Если ЗначениеЗаполнено(АдресПубликацииНаВебСервере) Тогда
		Если Прав(АдресПубликацииНаВебСервере, 2) = "/#" Или Прав(АдресПубликацииНаВебСервере, 1) = "#" Тогда
			// Адрес уже корректный
		ИначеЕсли Прав(АдресПубликацииНаВебСервере, 1) = "/" Тогда
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "#";
		Иначе
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "/#";
		КонецЕсли;
	КонецЕсли;
	
	// Для отображения обрезаем представление ссылки, клиент отобразит сам представление ссылки.
	Тег = РаботаС_HTML.ПолучитьТегВТекстеHTML(ПростойТекстУведомления, "a");

	Пока РаботаС_HTML.ЗаполненаСтруктураТега(Тег) <> 0 Цикл
		
		// Если тег сразу закрывается  - пропускаем его.
		Если Не ЗначениеЗаполнено(Тег.ПозицияНачалаЗакрывающегоТега) Тогда
			Тег = РаботаС_HTML.ПолучитьТегВТекстеHTML(
				ПростойТекстУведомления, "a", Тег.ПозицияОкончанияОткрывающегоТега + 1);
			Продолжить;
		КонецЕсли;
		
		// Если тег не содержит параметр href - пропускаем его.
		ТекстHref = РаботаС_HTML.ПолучитьЗначениеПараметраТега(Тег, "href");
		Если ТекстHref = Неопределено Тогда
			Тег = РаботаС_HTML.ПолучитьТегВТекстеHTML(
				ПростойТекстУведомления, "a", Тег.ПозицияОкончанияОткрывающегоТега + 1);
			Продолжить;
		КонецЕсли;
		
		// Раскодируем ссылку, она была закодирована в РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления().
		ТекстHref = РаскодироватьСтроку(ТекстHref, СпособКодированияСтроки.URLВКодировкеURL);
		
		Если ВырезатьАдресПубликации Тогда
			// Вырежем адрес публикации на веб-сервере.
			Если ЗначениеЗаполнено(АдресПубликацииНаВебСервере) И СтрНачинаетсяС(ТекстHref, АдресПубликацииНаВебСервере) Тогда
				ТекстHref = Сред(ТекстHref, СтрДлина(АдресПубликацииНаВебСервере) + 1);
			КонецЕсли;
		КонецЕсли;
		
		СхемаV8doc = "v8doc:";
		Если СтрНачинаетсяС(ТекстHref, СхемаV8doc) Тогда
			ТекстHref = Сред(ТекстHref, СтрДлина(СхемаV8doc) + 1);
		КонецЕсли;
		
		// Заменяем тег на текстовое представление ссылки.
		ПростойТекстУведомления = Лев(ПростойТекстУведомления, Тег.ПозицияНачалаОткрывающегоТега - 1) + ТекстHref
			+ Сред(ПростойТекстУведомления, Тег.ПозицияОкончанияЗакрывающегоТега + 1);

		Смещение = Тег.ПозицияНачалаОткрывающегоТега + СтрДлина(ТекстHref);
		Тег = РаботаС_HTML.ПолучитьТегВТекстеHTML(
			ПростойТекстУведомления, "a", Смещение);

	КонецЦикла;

	ПростойТекстУведомления = СокрЛП(ПростойТекстУведомления);

	Возврат ПростойТекстУведомления;

КонецФункции

// Возвращает учетную запись, используемую для рассылки уведомлений.
//
Функция УчетнаяЗаписьДляРассылки()

	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;

КонецФункции

// Проверяет есть ли среди родителей объекта подписки объекта из массива объектов подписки 
// с учетом отказов от уведомлений.
Функция ЯвляетсяПотомкомОбъектовПодписки(ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки,
	ОбработанныеОбъекты = Неопределено)

	Если ОбработанныеОбъекты = Неопределено Тогда
		ОбработанныеОбъекты = Новый Массив;
	КонецЕсли;
	Если ОбработанныеОбъекты.Найти(ОбъектПодписки) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ОбработанныеОбъекты.Добавить(ОбъектПодписки);

	Если ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда

		ЯвляетсяПотомкомПоБизнесПроцессу = Ложь;

		Если ЗначениеЗаполнено(ОбъектПодписки.БизнесПроцесс) Тогда
			ЯвляетсяПотомкомПоБизнесПроцессу = ЯвляетсяПотомкомОбъектовПодписки(
				ОбъектПодписки.БизнесПроцесс, ОбъектыПодписки, ОтказыОтПодписки, ОбработанныеОбъекты);
		КонецЕсли;

		Возврат ЯвляетсяПотомкомПоБизнесПроцессу;

	КонецЕсли;

	Если ОбъектыПодписки.Найти(ОбъектПодписки) <> Неопределено Тогда

		Возврат Истина;

	КонецЕсли;

	Если ОтказыОтПодписки.Найти(ОбъектПодписки) <> Неопределено Тогда

		Возврат Ложь;

	КонецЕсли;

	ЯвляетсяПотомкомПоВедущейЗадаче = Ложь;
	ЯвляетсяПотомкомПоГлавнойЗадаче = Ложь;

	Если ЗначениеЗаполнено(ОбъектПодписки.ВедущаяЗадача) Тогда

		ЯвляетсяПотомкомПоВедущейЗадаче = ЯвляетсяПотомкомОбъектовПодписки(
			ОбъектПодписки.ВедущаяЗадача, ОбъектыПодписки, ОтказыОтПодписки, ОбработанныеОбъекты);

	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектПодписки.ГлавнаяЗадача) Тогда

		ЯвляетсяПотомкомПоГлавнойЗадаче = ЯвляетсяПотомкомОбъектовПодписки(
			ОбъектПодписки.ГлавнаяЗадача, ОбъектыПодписки, ОтказыОтПодписки, ОбработанныеОбъекты);

	КонецЕсли;

	Возврат ЯвляетсяПотомкомПоВедущейЗадаче Или ЯвляетсяПотомкомПоГлавнойЗадаче;

КонецФункции

// Возвращает настройку - смесь константы и настройки пользователя.
//   Если нет персональной настройки = то общая
//  УведомленияОкномПоказыватьВЦентреОповещений
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи
//
Функция ИтоговаяНастройкаУведомленияОкномПоказыватьВЦентреОповещений(Пользователь) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИмяПользователяИБ = ОбщегоНазначенияДокументооборот.ИмяПользователяИБ(Пользователь);

	УведомленияОкномПоказыватьВЦентреОповещений 
		= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиУведомлений", "УведомленияОкномПоказыватьВЦентреОповещений", , , ИмяПользователяИБ);

	Если Не ЗначениеЗаполнено(УведомленияОкномПоказыватьВЦентреОповещений) Тогда
		УведомленияОкномПоказыватьВЦентреОповещений 
			= Константы.УведомленияОкномПоказыватьВЦентреОповещений.Получить();
	КонецЕсли;

	Возврат УведомленияОкномПоказыватьВЦентреОповещений;

КонецФункции

// Выполняет действия общего обработчика ожидания на сервере.
// 
// Параметры:
//  ПараметрыВыполнения  - Структура - Параметры выполнения общего обработчика ожидания.
//  РезультатыВыполнения - Структура - Содержит данные обработчиков для последующей обработки на клиенте.
//
Процедура ВыполнитьДействиеОбщегоОбработчикаОжидания(ПараметрыВыполнения, РезультатыВыполнения) Экспорт

	РезультатыВыполнения.Вставить("ПровереныУведомления", Ложь);
	РезультатыВыполнения.Вставить("ДанныеУведомлений", Новый Массив);
	Если ПараметрыВыполнения.ПроверитьУведомления Тогда

		Для Каждого ПоказанноеУведомление Из ПараметрыВыполнения.ПоказанныеУведомления Цикл
			Справочники.УведомленияПрограммы.ОтметитьПросмотр(ПоказанноеУведомление);
		КонецЦикла;

		ДанныеУведомлений = Справочники.УведомленияПрограммы.ДанныеУведомлений();
		РезультатыВыполнения.ДанныеУведомлений = ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеУведомлений);
		РезультатыВыполнения.ПровереныУведомления = Истина;

	КонецЕсли;

	РезультатыВыполнения.Вставить("ОтмеченаОбработкаУведомлений", Ложь);
	Если ПараметрыВыполнения.ОтметитьОбработкуУведомлений Тогда

		Для Каждого ОбработанноеУведомление Из ПараметрыВыполнения.ОбработанныеУведомления Цикл
			РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
				ОбработанноеУведомление.ВидСобытия, ОбработанноеУведомление.ОбъектУведомления,
				Пользователи.ТекущийПользователь(), ОбработанноеУведомление.ДатаОбработки);
		КонецЦикла;

		РезультатыВыполнения.ОтмеченаОбработкаУведомлений = Истина;

	КонецЕсли;

	НастройкаУведомленияОкномПоказыватьВЦентреОповещений 
	= ИтоговаяНастройкаУведомленияОкномПоказыватьВЦентреОповещений(
		Пользователи.ТекущийПользователь());
	РезультатыВыполнения.Вставить("НастройкаУведомленияОкномПоказыватьВЦентреОповещений",
		НастройкаУведомленияОкномПоказыватьВЦентреОповещений);

КонецПроцедуры

// Формирует сводку задач.
//
Процедура СформироватьСводкиЗадач()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиПодпискиПоУмолчанию =
		РегистрыСведений.НастройкиУведомлений.НастройкиПодпискиПоУмолчанию(
			Перечисления.СобытияУведомлений.СводкаПоЗадачам);
	
	ДатаСегодня = НачалоДня(ТекущаяДатаСеанса());
	Для Каждого Пользователь Из РаботаСПользователями.ПолучитьВсехПользователей() Цикл
		
		Если Не КОДСервер.ЭтоОсновнойУзелПользователя(Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(Пользователь);
		Если ЗначениеЗаполнено(ГрафикРаботы) Тогда

			ЭтоРабочийДень = ГрафикиРаботы.ЭтоРабочийДень(ДатаСегодня, ГрафикРаботы);
			Если Не ЭтоРабочийДень Тогда
				Продолжить;
			КонецЕсли;

		КонецЕсли;

		ДатаОбработки = РегистрыСведений.ОбработанныеУведомления.ДатаОбработки(
			Перечисления.СобытияУведомлений.СводкаПоЗадачам, Пользователь, Пользователь);
		Если НачалоДня(ДатаОбработки) = ДатаСегодня Тогда
			Продолжить;
		КонецЕсли;
		
		ПерсональныеНастройкиПодписки =
			РегистрыСведений.НастройкиУведомлений.ПерсональныеНастройкиПодписки(
				Перечисления.СобытияУведомлений.СводкаПоЗадачам,
				Пользователь);
		
		ПодписчикиПоСобытию = ПодписчикиПоСобытию(
			Перечисления.СобытияУведомлений.СводкаПоЗадачам,
			Пользователь,
			НастройкиПодпискиПоУмолчанию,
			ПерсональныеНастройкиПодписки);
		Если ПодписчикиПоСобытию.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		ЗадачиМнеИтоги = РаботаСЗадачами.ЗадачиМнеИтоги(Пользователь);
		Если ЗадачиМнеИтоги.ОжидающихВыполнения = 0 Тогда
			РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
				Перечисления.СобытияУведомлений.СводкаПоЗадачам, Пользователь, Пользователь, ДатаСегодня);
			Продолжить;
		КонецЕсли;

		КодЯзыка = КодЯзыка(Пользователь);

		МассивЗаголовокСводки = Новый Массив;
		МассивЗаголовокСводки.Добавить(
			СтрокаСЧислом(
				НСтр("ru = ';У вас %1 задача;;У вас %1 задачи;У вас %1 задач;У вас %1 задачи'", КодЯзыка), Формат(
			ЗадачиМнеИтоги.ОжидающихВыполнения, "ЧН=0"), ВидЧисловогоЗначения.Количественное));
		Если ЗначениеЗаполнено(ЗадачиМнеИтоги.Просроченных) Тогда
			МассивЗаголовокСводки.Добавить(
				СтрокаСЧислом(
					НСтр("ru = ';%1 просрочена;;%1 просрочено;%1 просрочено;%1 просрочено'", КодЯзыка), Формат(
				ЗадачиМнеИтоги.Просроченных, "ЧН=0"), ВидЧисловогоЗначения.Количественное));
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗадачиМнеИтоги.Новых) Тогда
			МассивЗаголовокСводки.Добавить(
				СтрокаСЧислом(
					НСтр("ru = ';%1 не начата;;%1 не начато;%1 не начато;%1 не начато'", КодЯзыка), Формат(
				ЗадачиМнеИтоги.Новых, "ЧН=0"), ВидЧисловогоЗначения.Количественное));
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗадачиМнеИтоги.Истекающих) Тогда
			МассивЗаголовокСводки.Добавить(
				СтрокаСЧислом(
					НСтр("ru = ';истекает срок у %1;;истекает срок у %1;истекает срок у %1;истекает срок у %1'",
				КодЯзыка), Формат(ЗадачиМнеИтоги.Истекающих, "ЧН=0"), ВидЧисловогоЗначения.Количественное));
		КонецЕсли;
		ЗаголовокСводки = СтрСоединить(МассивЗаголовокСводки, ", ");
		
		ПредельноеЧисло = 50;
		
		МассивСводкаПоЗадачам = Новый Массив;

		МассивСводкаПоЗадачам.Добавить(ЗаголовокСводки);

		Если ЗначениеЗаполнено(ЗадачиМнеИтоги.Просроченных) Тогда
			
			ЧислоЗадачВсего = 0;
			МассивСводкаПоЗадачам.Добавить(НСтр("ru = 'Просроченные:'", КодЯзыка));
			ТолькоПерваяПорция = Истина;
			ЗадачиМнеПросроченные = РаботаСЗадачами.ЗадачиМнеПросроченные(Пользователь, ТолькоПерваяПорция);
			Для Каждого СтрокаЗадачи Из ЗадачиМнеПросроченные Цикл
				НавигационнаяСсылкаУведомления = ПолучитьНавигационнуюСсылкуУведомления(
					СтрокаЗадачи.ДействиеЗадачи,
					СтрокаЗадачи.Заголовок);
				МассивСводкаПоЗадачам.Добавить(НавигационнаяСсылкаУведомления);
				
				ЧислоЗадачВсего = ЧислоЗадачВсего + 1;
				Если ЧислоЗадачВсего >= ПредельноеЧисло Тогда  
					Осталось = ЗадачиМнеИтоги.ОжидающихВыполнения - ЧислоЗадачВсего;
					МассивСводкаПоЗадачам.Добавить(СтрШаблон(НСтр("ru = 'и другие (%1 шт):'", КодЯзыка), Осталось));
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;

			МассивСводкаПоЗадачам.Добавить("");

		КонецЕсли;

		Если ЗначениеЗаполнено(ЗадачиМнеИтоги.Новых) Тогда
			
			ЧислоЗадачВсего = 0;
			МассивСводкаПоЗадачам.Добавить(НСтр("ru = 'Не начатые:'", КодЯзыка));
			ТолькоПерваяПорция = Истина;
			ЗадачиМнеНовые = РаботаСЗадачами.ЗадачиМнеНовые(Пользователь, ТолькоПерваяПорция);
			Для Каждого СтрокаЗадачи Из ЗадачиМнеНовые Цикл
				НавигационнаяСсылкаУведомления = ПолучитьНавигационнуюСсылкуУведомления(
					СтрокаЗадачи.ДействиеЗадачи,
					СтрокаЗадачи.Заголовок);
				МассивСводкаПоЗадачам.Добавить(НавигационнаяСсылкаУведомления);
				
				ЧислоЗадачВсего = ЧислоЗадачВсего + 1;
				Если ЧислоЗадачВсего >= ПредельноеЧисло Тогда  
					Осталось = ЗадачиМнеИтоги.ОжидающихВыполнения - ЧислоЗадачВсего;
					МассивСводкаПоЗадачам.Добавить(СтрШаблон(НСтр("ru = 'и другие (%1 шт):'", КодЯзыка), Осталось));
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;

			МассивСводкаПоЗадачам.Добавить("");

		КонецЕсли;

		Если ЗначениеЗаполнено(ЗадачиМнеИтоги.Истекающих) Тогда
			
			ЧислоЗадачВсего = 0;
			МассивСводкаПоЗадачам.Добавить(НСтр("ru = 'Истекает срок:'", КодЯзыка));
			ТолькоПерваяПорция = Истина;
			ЗадачиМнеИстекающие = РаботаСЗадачами.ЗадачиМнеИстекающие(Пользователь, ТолькоПерваяПорция);
			Для Каждого СтрокаЗадачи Из ЗадачиМнеИстекающие Цикл
				НавигационнаяСсылкаУведомления = ПолучитьНавигационнуюСсылкуУведомления(
					СтрокаЗадачи.ДействиеЗадачи,
					СтрокаЗадачи.Заголовок);
				МассивСводкаПоЗадачам.Добавить(НавигационнаяСсылкаУведомления);
				
				ЧислоЗадачВсего = ЧислоЗадачВсего + 1;
				Если ЧислоЗадачВсего >= ПредельноеЧисло Тогда  
					Осталось = ЗадачиМнеИтоги.ОжидающихВыполнения - ЧислоЗадачВсего;
					МассивСводкаПоЗадачам.Добавить(СтрШаблон(НСтр("ru = 'и другие (%1 шт):'", КодЯзыка), Осталось));
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;

			МассивСводкаПоЗадачам.Добавить("");

		КонецЕсли;

		Если ЗначениеЗаполнено(ЗадачиМнеИтоги.ОжидающихВыполнения) Тогда

			МассивСводкаПоЗадачам.Добавить(НСтр("ru = 'Все ожидающие выполнения:'", КодЯзыка));
			ЧислоЗадачВсего = 0;
			ТолькоПерваяПорция = Истина;
			ЗадачиМнеВсе = РаботаСЗадачами.ЗадачиМнеВсе(Пользователь, ТолькоПерваяПорция);
			Для Каждого СтрокаЗадачи Из ЗадачиМнеВсе Цикл
				НавигационнаяСсылкаУведомления = ПолучитьНавигационнуюСсылкуУведомления(
					СтрокаЗадачи.ДействиеЗадачи,
					СтрокаЗадачи.Заголовок);
				МассивСводкаПоЗадачам.Добавить(НавигационнаяСсылкаУведомления);
				ЧислоЗадачВсего = ЧислоЗадачВсего + 1;
				Если ЧислоЗадачВсего >= ПредельноеЧисло Тогда  
					Осталось = ЗадачиМнеИтоги.ОжидающихВыполнения - ЧислоЗадачВсего;
					МассивСводкаПоЗадачам.Добавить(СтрШаблон(НСтр("ru = 'и другие (%1 шт):'", КодЯзыка), Осталось));
					Прервать;
				КонецЕсли;	
			КонецЦикла;

			МассивСводкаПоЗадачам.Добавить("");

		КонецЕсли;
		
		СводкаПоЗадачам = СтрСоединить(МассивСводкаПоЗадачам, Символы.ПС);

		НачатьТранзакцию();
		Попытка
			
			Для Каждого Подписчик Из ПодписчикиПоСобытию Цикл
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
					Подписчик.Пользователь,
					Перечисления.СобытияУведомлений.СводкаПоЗадачам,
					Подписчик.СпособУведомления,
					Пользователь,
					Пользователь,
					СводкаПоЗадачам);
			КонецЦикла;

			РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
				Перечисления.СобытияУведомлений.СводкаПоЗадачам, Пользователь, Пользователь, ДатаСегодня);

			ЗафиксироватьТранзакцию();

		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

// Формирует сводку просроченных задач от меня для каждого автора задачи.
//
Процедура СформироватьСводкиПросроченныхЗадачОтАвторов()

	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиПодпискиПоУмолчанию =
		РегистрыСведений.НастройкиУведомлений.НастройкиПодпискиПоУмолчанию(
			Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора);
	
	ДатаСегодня = НачалоДня(ТекущаяДатаСеанса());
	Для Каждого Пользователь Из РаботаСПользователями.ПолучитьВсехПользователей() Цикл
		
		Если Не КОДСервер.ЭтоОсновнойУзелПользователя(Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(Пользователь);
		Если ЗначениеЗаполнено(ГрафикРаботы) Тогда

			ЭтоРабочийДень = ГрафикиРаботы.ЭтоРабочийДень(ДатаСегодня, ГрафикРаботы);
			Если Не ЭтоРабочийДень Тогда
				Продолжить;
			КонецЕсли;

		КонецЕсли;

		ДатаОбработки = РегистрыСведений.ОбработанныеУведомления.ДатаОбработки(
			Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора, Пользователь, Пользователь);
		Если НачалоДня(ДатаОбработки) = ДатаСегодня Тогда
			Продолжить;
		КонецЕсли;

		ПерсональныеНастройкиПодписки =
			РегистрыСведений.НастройкиУведомлений.ПерсональныеНастройкиПодписки(
				Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора,
				Пользователь);
		
		ПодписчикиПоСобытию = ПодписчикиПоСобытию(
			Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора,
			Пользователь,
			НастройкиПодпискиПоУмолчанию,
			ПерсональныеНастройкиПодписки);
		Если ПодписчикиПоСобытию.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		ЗадачиОтМеняИтоги = РаботаСЗадачами.ЗадачиОтМеняИтоги(Пользователь);
		Если ЗадачиОтМеняИтоги.Просроченных = 0 Тогда
			РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
				Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора, Пользователь, Пользователь, ДатаСегодня);
			Продолжить;
		КонецЕсли;

		КодЯзыка = КодЯзыка(Пользователь);

		ЗаголовокСводки = СтрокаСЧислом(
				НСтр(
			"ru = ';Просрочена %1 задача от меня;;Просрочено %1 задачи от меня;Просрочено %1 задач от меня;Просрочено %1 задачи от меня'",
			КодЯзыка), Формат(ЗадачиОтМеняИтоги.Просроченных, "ЧН=0"), ВидЧисловогоЗначения.Количественное);

		МассивСводка = Новый Массив;

		МассивСводка.Добавить(ЗаголовокСводки);

		Если ЗначениеЗаполнено(ЗадачиОтМеняИтоги.Просроченных) Тогда

			МассивСводка.Добавить(НСтр("ru = 'Просроченные:'", КодЯзыка));
			ТолькоПерваяПорция = Истина;
			ЗадачиОтМеняПросроченные = РаботаСЗадачами.ЗадачиОтМеняПросроченные(Пользователь, ТолькоПерваяПорция);
			Для Каждого СтрокаЗадачи Из ЗадачиОтМеняПросроченные Цикл
				НавигационнаяСсылкаУведомления = ПолучитьНавигационнуюСсылкуУведомления(
					СтрокаЗадачи.Задача,
					СтрокаЗадачи.Заголовок);
				МассивСводка.Добавить(НавигационнаяСсылкаУведомления);
			КонецЦикла;

			МассивСводка.Добавить("");

		КонецЕсли;

		Сводка = СтрСоединить(МассивСводка, Символы.ПС);
		
		НачатьТранзакцию();
		Попытка
			
			Для Каждого Подписчик Из ПодписчикиПоСобытию Цикл
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
					Подписчик.Пользователь,
					Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора,
					Подписчик.СпособУведомления,
					Пользователь,
					Пользователь,
					Сводка);
			КонецЦикла;

			РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
				Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора, Пользователь, Пользователь, ДатаСегодня);

			ЗафиксироватьТранзакцию();

		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

// Формирует текст и пояснение оповещения.
//
// Параметры:
//  ОбъектПодписки         - СправочникСсылка, ДокументСсылка      - Объект подписки формируемого уведомления.
//  ВидСобытия             - СправочникСсылка.ВидыБизнесСобытий,
//                           ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления     - Массив                                - Объекты формируемого уведомления.
//  ПолучательУведомления  - СправочникСсылка.Пользователи         - Получатель формируемого уведомления.
//  СпособУведомления      - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие                          - Дополнительные описания.
//
// Возвращаемое значение:
//  Структура - Текст и пояснение оповещения.
//   * ТекстОповещения     - Строка - Текст оповещения.
//   * ПояснениеОповещения - Строка - Пояснение оповещения.
//
Функция СформироватьТекстИПояснениеОповещения(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания,
	ТемаУведомления,
	ТекстУведомления)
	
	ТекстИПояснениеОповещения = Новый Структура("ТекстОповещения, ПояснениеОповещения", "", "");
	
	КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
	Если КоличествоОбъектовУведомления = 0 Тогда
		Возврат ТекстИПояснениеОповещения;
	КонецЕсли;
	
	КодЯзыка = КодЯзыка(ПолучательУведомления);
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Возобновлен %1 бизнес-процесс;;Возобновлено %1 бизнес-процесса;Возобновлено %1 бизнес-процессов;Возобновлено %1 бизнес-процесса'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Возобновлен бизнес-процесс'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачиПроцесса Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Выполнена %1 задача;;Выполнено %1 задачи;Выполнено %1 задач;Выполнено %1 задачи'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Выполнена задача'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';%1 предмет добавлен в категорию;;%1 предмета добавлено в категорию;%1 предметов добавлено в категорию;%1 предмета добавлено в категорию'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Предмет добавлен в категорию'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Завершен %1 бизнес-процесс;;Завершено %1 бизнес-процесса;Завершено %1 бизнес-процессов;Завершено %1 бизнес-процесса'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Завершен бизнес-процесс'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ЗахватФайлаДляРедактирования Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Захвачен %1 файл для редактирования;;Захвачено %1 файла для редактирования;Захвачено %1 файлов для редактирования;Захвачено %1 файла для редактирования'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Захвачен файл для редактирования'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеБрони Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Изменена %1 бронь;;Изменено %1 брони;Изменено %1 броней;Изменено %1 брони'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменена бронь'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеДокумента Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Изменен %1 документ;;Изменено %1 документов;Изменено %1 документов;Изменено %1 документа'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменен документ'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Изменилось значение %1 показателя процесса;;Изменилось значение %1 показателей процессов;Изменилось значение %1 показателей процессов;Изменилось значение %1 показателей процессов'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменилось значение показателя процесса'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеМероприятия Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Изменено %1 мероприятие;;Изменено %1 мероприятия;Изменено %1 мероприятий;Изменено %1 мероприятия'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменено мероприятие'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Изменено %1 отсутствие;;Изменено %1 отсутствия;Изменено %1 отсутствий;Изменено %1 отсутствия'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменено отсутствие'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеПроекта Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Изменен %1 проект;;Изменено %1 проекта;Изменено %1 проектов;Изменено %1 проекта'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменен проект'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Изменена %1 проектная задача;;Изменено %1 проектных задачи;Изменено %1 проектных задач;Изменено %1 проектных задачи'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменена проектная задача'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеСоставаКомплекта Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Изменен состав %1 комплекта;;Изменен состав %1 комплектов;Изменен состав %1 комплектов;Изменен состав %1 комплектов'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменен состав комплекта'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеФайла Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Изменен %1 файл;;Изменено %1 файла;Изменено %1 файлов;Изменено %1 файла'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменен файл'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Вы назначены ответственным за %1 документ;;Вы назначены ответственным за %1 документа;Вы назначены ответственным за %1 документов;Вы назначены ответственным за %1 документа'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Вы назначены ответственным за документ'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОсвобождениеФайла Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Освобожден %1 файл;;Освобождено %1 файла;Освобождено %1 файлов;Освобождено %1 файла'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Освобожден файл'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Остановлен %1 бизнес-процесс;;Остановлено %1 бизнес-процесса;Остановлено %1 бизнес-процессов;Остановлено %1 бизнес-процесса'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Остановлен бизнес-процесс'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеререгистрацияДокумента Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Перерегистрирован %1 документ;;Перерегистрировано %1 документа;Перерегистрировано %1 документов;Перерегистрировано %1 документа'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Перерегистрирован документ'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеререгистрацияДокумента Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Перерегистрирован %1 документ;;Перерегистрировано %1 документа;Перерегистрировано %1 документов;Перерегистрировано %1 документа'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Перерегистрирован документ'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Прерван %1 бизнес-процесс;;Прервано %1 бизнес-процесса;Прервано %1 бизнес-процессов;Прервано %1 бизнес-процесса'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Прерван бизнес-процесс'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.РегистрацияДокумента Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Зарегистрирован %1 документ;;Зарегистрировано %1 документа;Зарегистрировано %1 документов;Зарегистрировано %1 документа'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Зарегистрирован документ'", КодЯзыка);
		КонецЕсли;

	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеБрони Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Создана %1 бронь;;Создано %1 брони;Создано %1 броней;Создано %1 брони'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Создана бронь'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеДокумента Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Создан %1 документ;;Создано %1 документа;Создано %1 документов;Создано %1 документа'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Создан документ'", КодЯзыка);
		КонецЕсли;
		
		ТекстИПояснениеОповещения.ПояснениеОповещения = ТемаУведомления;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеКонтрагента Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Создан %1 контрагент;;Создано %1 контрагента;Создано %1 контрагентов;Создан %1 контрагента'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Создан контрагент'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеМероприятия Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Создано %1 мероприятие;;Создано %1 мероприятия;Создано %1 мероприятий;Создано %1 мероприятия'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Создано мероприятие'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеОтсутствия Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Создано %1 отсутствие;;Создано %1 отсутствия;Создано %1 отсутствий;Создано %1 отсутствия'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Создано отсутствие'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеПроекта Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Создан %1 проект;;Создано %1 проекта;Создано %1 проектов;Создано %1 проекта'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Создан проект'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеПроектнойЗадачи Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Создана %1 проектная задача;;Создано %1 проектных задачи;Создано %1 проектных задач;Создано %1 проектных задачи'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Создана проектная задача'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения
		Или ВидСобытия = Перечисления.СобытияУведомлений.СозданиеТемыФорума Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';%1 новое сообщение в форуме;;%1 новых сообщения в форуме;%1 новых сообщений в форуме;%1 новых сообщения в форуме'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		ИначеЕсли ОбъектыУведомления[0].ПервоеСообщениеТемы Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Новая тема в форуме'", КодЯзыка);
			ТекстИПояснениеОповещения.ПояснениеОповещения = Строка(ОбъектыУведомления[0].ВладелецСообщения);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Новое сообщение в форуме'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Создан %1 файл;;Создано %1 файла;Создано %1 файлов;Создано %1 файла'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Создан файл'", КодЯзыка);
		КонецЕсли;
		
		ТекстИПояснениеОповещения.ПояснениеОповещения = ТемаУведомления;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СтартБизнесПроцесса Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Стартован %1 бизнес-процесс;;Стартовано %1 бизнес-процесса;Стартовано %1 бизнес-процессов;Стартовано %1 бизнес-процесса'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Стартован бизнес-процесс'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.УдалениеИзКатегории Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';%1 предмет удален из категории;;%1 предмета удалено из категории;%1 предметов удалено из категории;%1 предмета удалено из категории'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Предмет удален из категории'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ВыполнениеМоейЗадачи Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Выполнена %1 задача, назначенная вам;;Выполнено %1 задачи, назначенных вам;Выполнено %1 задач, назначенных вам;Выполнено %1 задачи, назначенных вам'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Выполнена задача, назначенная вам'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Закончился срок действия %1 документа;;Закончился срок действия %1 документов;Закончился срок действия %1 документов;Закончился срок действия %1 документов'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Закончился срок действия документа'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Перенаправлена %1 задача, назначенная вам;;Перенаправлено %1 задачи, назначенных вам;Перенаправлено %1 задач, назначенных вам;Перенаправлена %1 задачи, назначенных вам'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Перенаправлена задача, назначенная вам'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Истекает срок действия %1 документа;;Истекает срок действия %1 документов;Истекает срок действия %1 документов;Истекает срок действия %1 документов'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Истекает срок действия документа'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Истекает срок %1 контрольной точки;;Истекает срок %1 контрольных точек;Истекает срок %1 контрольных точек;Истекает срок %1 контрольных точек'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Истекает срок контрольной точки'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Истекает срок %1 контроля;;Истекает срок %1 контролей;Истекает срок %1 контролей;Истекает срок %1 контролей'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Истекает срок контроля'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Просрочена %1 контрольная точка;;Просрочено %1 контрольных точки;Просрочено %1 контрольных точек;Просрочено %1 контрольных точки'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Просрочена контрольная точка'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Обновите недельную оценку %1 контрольной точки;;Обновите недельную оценку %1 контрольных точек;Обновите недельную оценку %1 контрольных точек;Обновите недельную оценку %1 контрольных точек'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Обновите недельную оценку контрольной точки'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Просрочен %1 контроль;;Просрочено %1 контроля;Просрочено %1 контролей;Просрочено %1 контроля'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Просрочен контроль'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Уведомление о %1 ошибке;;Уведомление о %1 ошибках;Уведомление о %1 ошибках;Уведомление о %1 ошибках'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Уведомление об ошибке'", КодЯзыка);
		КонецЕсли;
		
		ТекстИПояснениеОповещения.ПояснениеОповещения = ТекстУведомления;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.НапоминаниеОЗамереТемпературы Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Контроль самочувствия'", КодЯзыка);
		Если СтрЧислоСтрок(ТекстУведомления) >= 2 Тогда
			ТекстИПояснениеОповещения.ПояснениеОповещения =
				СтрПолучитьСтроку(ТекстУведомления, 1)
				+ Символы.ПС
				+ СтрПолучитьСтроку(ТекстУведомления, 2);
		Иначе
			ТекстИПояснениеОповещения.ПояснениеОповещения = ТекстУведомления;
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПоявлениеЗамераСПовышеннойТемпературой Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Внимание! Повышенная температура'", КодЯзыка);
		ТекстИПояснениеОповещения.ПояснениеОповещения = СтрПолучитьСтроку(ТекстУведомления, 1);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОтчетОЗамерахТемпературы Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Контроль самочувствия'", КодЯзыка);
		Если СтрЧислоСтрок(ТекстУведомления) >= 3 Тогда
			ТекстИПояснениеОповещения.ПояснениеОповещения =
				СтрПолучитьСтроку(ТекстУведомления, 1)
				+ Символы.ПС
				+ СтрПолучитьСтроку(ТекстУведомления, 2)
				+ Символы.ПС
				+ СтрПолучитьСтроку(ТекстУведомления, 3);
		Иначе
			ТекстИПояснениеОповещения.ПояснениеОповещения = ТекстУведомления;
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗаявкиНаОплату Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Истекает срок %1 заявки на оплату;;Истекает срок %1 заявок на оплату;Истекает срок %1 заявок на оплату;Истекает срок %1 заявок на оплату'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Истекает срок заявки на оплату'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОтсутствуетАвансовыйОтчет Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Отсутствует авансовый отчет по %1 заявке на оплату;;Отсутствует авансовый отчет по %1 заявкам на оплату;Отсутствует авансовый отчет по %1 заявкам на оплату;Отсутствует авансовый отчет по %1 заявкам на оплату'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Отсутствует авансовый отчет по заявке на оплату'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОтсутствуетОригинал Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'К документам не приложены оригиналы'", КодЯзыка);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОбработкиНаПаузе Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = ТемаУведомления;
		ТекстИПояснениеОповещения.ПояснениеОповещения = НСтр("ru = 'Возможно, пора продолжить обработку'", КодЯзыка);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = ТемаУведомления;
		ТекстИПояснениеОповещения.ПояснениеОповещения = "";

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = ТемаУведомления;
		ТекстИПояснениеОповещения.ПояснениеОповещения = "";

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = ТемаУведомления;
		ТекстИПояснениеОповещения.ПояснениеОповещения = "";
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.НоваяЗадача Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';%1 новая задача;;%1 новых задачи;%1 новых задач;%1 новых задачи'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Новая задача'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаЗадачи Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Отменена %1 задача;;Отменено %1 задачи;Отменено %1 задач;Отменено %1 задачи'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Отменена задача'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОткладываниеЗадачи Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Отложена %1 задача;;Отложено %1 задачи;Отложено %1 задач;Отложено %1 задачи'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Отложена задача'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПередачаЗадачОтИсполнителя Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Переданы задачи'", КодЯзыка);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СнятиеЗадачИсполнителя Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Сняты задачи'", КодЯзыка);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Отменено выполнение задачи'", КодЯзыка);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаОбработки Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Остановлена %1 обработка;;Остановлено %1 обработки;Остановлено %1 обработок;Остановлено %1 обработки'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Остановлена обработка'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияИзменениеПриглашения Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Изменено %1 приглашение;;Изменено %1 приглашения;Изменено %1 приглашений;Изменено %1 приглашения'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменено приглашение'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияОтклоненоПриглашение Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Отклонено %1 приглашение;;Отклонено %1 приглашения;Отклонено %1 приглашений;Отклонено %1 приглашения'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ОбъектУведомления = ОбъектыУведомления[0];
			ДополнительноеОписание = ДополнительныеОписания[ОбъектУведомления];
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Отклонено приглашение'", КодЯзыка);
			ТекстИПояснениеОповещения.ПояснениеОповещения = СтрШаблон(
				НСтр("ru = '%1 отклонил приглашение на %2'", КодЯзыка),
				ДополнительноеОписание,
				УправлениеМероприятиями.РасширенноеПредставлениеСДатой(ОбъектыУведомления[0]));
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияОтменаПриглашения Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Отменено %1 приглашение;;Отменено %1 приглашения;Отменено %1 приглашений;Отменено %1 приглашения'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Отменено приглашение'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияПриглашение Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';%1 приглашение;;%1 приглашения;%1 приглашений;%1 приглашения'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Приглашение'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.МероприятияПринятоПриглашение Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = 
				СтрокаСЧислом(
					НСтр("ru = ';Принято %1 приглашение;;Принято %1 приглашения;Принято %1 приглашений;Принято %1 приглашения'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ВидЧисловогоЗначения.Количественное);
		Иначе
			ОбъектУведомления = ОбъектыУведомления[0];
			ДополнительноеОписание = ДополнительныеОписания[ОбъектУведомления];
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Принято приглашение'", КодЯзыка);
			ТекстИПояснениеОповещения.ПояснениеОповещения = СтрШаблон(
				НСтр("ru = '%1 принял приглашение на %2'", КодЯзыка),
				ДополнительноеОписание,
				УправлениеМероприятиями.РасширенноеПредставлениеСДатой(ОбъектыУведомления[0]));
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗадачи Тогда
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменены задачи'", КодЯзыка);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Изменена задача'", КодЯзыка);
			ТекстИПояснениеОповещения.ПояснениеОповещения = ТемаУведомления;
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив Тогда 
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = СтрШаблон(
				НСтр("ru = 'Ошибка в документах, переданных в 1С:Архив (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Ошибка в документе, переданном в 1С:Архив'", КодЯзыка);			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПринятиеДокументовВАрхив Тогда 
		
		Если КоличествоОбъектовУведомления > 1 Тогда
			ТекстИПояснениеОповещения.ТекстОповещения = СтрШаблон(
				НСтр("ru = 'Документы приняты в 1С:Архив (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		Иначе
			ТекстИПояснениеОповещения.ТекстОповещения = НСтр("ru = 'Документ принят в 1С:Архив'", КодЯзыка);
			ТекстИПояснениеОповещения.ПояснениеОповещения = Строка(ОбъектыУведомления[0]);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументИсправлен Тогда
		
		ТекстИПояснениеОповещения.ТекстОповещения = ТемаУведомления;
		ТекстИПояснениеОповещения.ПояснениеОповещения = "";
		
	Иначе
		
		ТекстИПояснениеОповещения.ТекстОповещения = Строка(ВидСобытия);
		ТекстИПояснениеОповещения.ПояснениеОповещения = ТемаУведомления;
		
	КонецЕсли;
	
	// Если есть текст оповещения, но нет пояснения - заполним пояснение по умолчанию, из представления объектов уведомления.
	Если ЗначениеЗаполнено(ТекстИПояснениеОповещения.ТекстОповещения)
		И Не ЗначениеЗаполнено(ТекстИПояснениеОповещения.ПояснениеОповещения) Тогда
		
		КоличествоОтображаемыхСтрокПояснения = 3;
		Если КоличествоОбъектовУведомления > КоличествоОтображаемыхСтрокПояснения Тогда
			КоличествоОтображаемыхОбъектов = КоличествоОтображаемыхСтрокПояснения - 1;
		Иначе
			КоличествоОтображаемыхОбъектов = КоличествоОбъектовУведомления;
		КонецЕсли;
		
		МассивПояснениеОповещения = Новый Массив;
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			
			Если МассивПояснениеОповещения.Количество() >= КоличествоОтображаемыхОбъектов Тогда
				Прервать;
			КонецЕсли;
			
			МассивПояснениеОповещения.Добавить(Строка(ОбъектУведомления));
			
		КонецЦикла;
		
		Если КоличествоОбъектовУведомления > КоличествоОтображаемыхОбъектов Тогда
			ТекстИДругиеОбъекты = СтрШаблон(НСтр("ru = 'и другие (всего %1)'"), КоличествоОбъектовУведомления);
			МассивПояснениеОповещения.Добавить(ТекстИДругиеОбъекты);
		КонецЕсли;
		
		ТекстИПояснениеОповещения.ПояснениеОповещения = СтрСоединить(МассивПояснениеОповещения, Символы.ПС);
		
	КонецЕсли;
	
	Возврат ТекстИПояснениеОповещения;
	
КонецФункции

// Формирует уведомления "Напоминание о замере температуры".
// 
// Возвращаемое значение:
//  Булево - Уведомления сформированы.
//
Функция СформироватьНапоминанияОЗамереТемпературы()
	
	УведомленияСформированы = Ложь;
	
	БлижайшаяДатаУчетаСамочувствия = УчетСамочувствияСотрудниковСервер.БлижайшаяДатаУчетаСамочувствия();
	Если Не ЗначениеЗаполнено(БлижайшаяДатаУчетаСамочувствия) Тогда
		Возврат УведомленияСформированы;
	Конецесли;
	
	УведомлятьЗа = 720; // Уведомлять за 10 минут + 2 минуты про запас для работы рассылки.
	ДатаНачалаНапоминания = БлижайшаяДатаУчетаСамочувствия - УведомлятьЗа;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если ТекущаяДата < ДатаНачалаНапоминания Тогда
		Возврат УведомленияСформированы;
	КонецЕсли;
	
	СотрудникиПодлежащиеУчету = 
		УчетСамочувствияСотрудниковСервер.СотрудникиПодлежащиеУчетуСамочувствия(
			БлижайшаяДатаУчетаСамочувствия);
	ПолучателиУведомления = Сотрудники.ПользователиСотрудников(СотрудникиПодлежащиеУчету);
	ПолучателиУведомления = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолучателиУведомления);
	Если ПолучателиУведомления.Количество() = 0 Тогда
		Возврат УведомленияСформированы;
	КонецЕсли;
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбработанныеУведомления.Пользователь КАК Пользователь,
		|	ОбработанныеУведомления.ДатаОбработки КАК ДатаОбработки
		|ИЗ
		|	РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|ГДЕ
		|	ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.НапоминаниеОЗамереТемпературы)
		|	И ОбработанныеУведомления.ОбъектУведомления В(&ПолучателиУведомления)
		|	И ОбработанныеУведомления.Пользователь В(&ПолучателиУведомления)");
	
	Запрос.УстановитьПараметр("ПолучателиУведомления", ПолучателиУведомления);
	
	СведенияОбОбработкеУведомлений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ПолучательУведомления Из ПолучателиУведомления Цикл
		
		СведенияОбОбработкеУведомления = СведенияОбОбработкеУведомлений.Найти(ПолучательУведомления, "Пользователь");
		Если СведенияОбОбработкеУведомления <> Неопределено
			И СведенияОбОбработкеУведомления.ДатаОбработки >= ДатаНачалаНапоминания Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не КОДСервер.ЭтоОсновнойУзелПользователя(ПолучательУведомления) Тогда
			Продолжить;
		КонецЕсли;
		
		УведомленияСформированы = Истина;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ПолучательУведомления,
			Перечисления.СобытияУведомлений.НапоминаниеОЗамереТемпературы,
			Неопределено,
			Неопределено,,
			Ложь);
		
		РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.НапоминаниеОЗамереТемпературы,
			ПолучательУведомления,
			ПолучательУведомления);
		
	КонецЦикла;
	
	Возврат УведомленияСформированы;
	
КонецФункции

// Формирует уведомления "Появление замера с повышенной температурой".
// 
// Возвращаемое значение:
//  Булево - Уведомления сформированы.
//
Функция СформироватьУведомленияОПоявленииЗамеровСПовышеннойТемпературой()
	
	УведомленияСформированы = Ложь;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	НачалоДня = НачалоДня(ТекущаяДата) - 720; // Замеряем с начало сегодня и 12 минут прошлого дня.
	ОкончаниеДня = КонецДня(ТекущаяДата) + 720; // Замеряем до конца сегодня и 12 минут следующего дня.
	
	ОбъектыУведомления =
		УчетСамочувствияСотрудниковСервер.СамочувствияСотрудниковСПовышеннойТемпературой(
			НачалоДня,
			ОкончаниеДня);
	Если ОбъектыУведомления.Количество() = 0 Тогда
		Возврат УведомленияСформированы;
	КонецЕсли;
		
	ОтветственныеЗаУчет =
		УчетСамочувствияСотрудниковСерверПовтИсп.ОтветственныеЗаУчетСамочувствияСотрудников();
	ПолучателиУведомления = Сотрудники.ПользователиСотрудников(ОтветственныеЗаУчет);
	ПолучателиУведомления = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолучателиУведомления);
	Если ПолучателиУведомления.Количество() = 0 Тогда
		Возврат УведомленияСформированы;
	КонецЕсли;	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбработанныеУведомления.Пользователь КАК Пользователь,
		|	ОбработанныеУведомления.ОбъектУведомления КАК ОбъектУведомления,
		|	ОбработанныеУведомления.ДатаОбработки КАК ДатаОбработки
		|ИЗ
		|	РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|ГДЕ
		|	ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПоявлениеЗамераСПовышеннойТемпературой)
		|	И ОбработанныеУведомления.ОбъектУведомления В(&ОбъектыУведомления)
		|	И ОбработанныеУведомления.Пользователь В(&ПолучателиУведомления)");
	
	Запрос.УстановитьПараметр("ОбъектыУведомления", ОбъектыУведомления);
	Запрос.УстановитьПараметр("ПолучателиУведомления", ПолучателиУведомления);
	
	СведенияОбОбработкеУведомлений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
		
		Для Каждого ПолучательУведомления Из ПолучателиУведомления Цикл
			
			ПараметрыОтбора = Новый Структура("ОбъектУведомления, Пользователь");
			ПараметрыОтбора.ОбъектУведомления = ОбъектУведомления;
			ПараметрыОтбора.Пользователь = ПолучательУведомления;
			
			НайденныеСтроки = СведенияОбОбработкеУведомлений.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			УведомленияСформированы = Истина;
			
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
				ПолучательУведомления,
				Перечисления.СобытияУведомлений.ПоявлениеЗамераСПовышеннойТемпературой,
				ОбъектУведомления,
				ОбъектУведомления);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат УведомленияСформированы;
	
КонецФункции

// Формирует уведомления "Отчет о замерах температуры".
//
Функция СформироватьОтчетыОЗамерахТемпературы()
	
	УведомленияСформированы = Ложь;
	
	ПредыдущаяДатаУчетаСамочувствия = УчетСамочувствияСотрудниковСервер.ПредыдущаяДатаУчетаСамочувствия();
	Если Не ЗначениеЗаполнено(ПредыдущаяДатаУчетаСамочувствия) Тогда
		Возврат УведомленияСформированы;
	Конецесли;
	
	УведомлятьПосле = 600; // Уведомлять после 10 минут.
	ДатаНачалаНапоминания = ПредыдущаяДатаУчетаСамочувствия + УведомлятьПосле;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если ТекущаяДата < ДатаНачалаНапоминания Тогда
		Возврат УведомленияСформированы;
	КонецЕсли;
	
	ОтветственныеЗаУчет =
		УчетСамочувствияСотрудниковСерверПовтИсп.ОтветственныеЗаУчетСамочувствияСотрудников();
	ПолучателиУведомления = Сотрудники.ПользователиСотрудников(ОтветственныеЗаУчет);
	ПолучателиУведомления = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолучателиУведомления);
	Если ПолучателиУведомления.Количество() = 0 Тогда
		Возврат УведомленияСформированы;
	КонецЕсли;
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбработанныеУведомления.Пользователь КАК Пользователь,
		|	ОбработанныеУведомления.ДатаОбработки КАК ДатаОбработки
		|ИЗ
		|	РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|ГДЕ
		|	ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ОтчетОЗамерахТемпературы)
		|	И ОбработанныеУведомления.ОбъектУведомления В(&ПолучателиУведомления)
		|	И ОбработанныеУведомления.Пользователь В(&ПолучателиУведомления)");
	
	Запрос.УстановитьПараметр("ПолучателиУведомления", ПолучателиУведомления);
	
	СведенияОбОбработкеУведомлений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ПолучательУведомления Из ПолучателиУведомления Цикл
		
		СведенияОбОбработкеУведомления = СведенияОбОбработкеУведомлений.Найти(ПолучательУведомления, "Пользователь");
		Если СведенияОбОбработкеУведомления <> Неопределено
			И СведенияОбОбработкеУведомления.ДатаОбработки >= ДатаНачалаНапоминания Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не КОДСервер.ЭтоОсновнойУзелПользователя(ПолучательУведомления) Тогда
			Продолжить;
		КонецЕсли;
		
		УведомленияСформированы = Истина;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ПолучательУведомления,
			Перечисления.СобытияУведомлений.ОтчетОЗамерахТемпературы,
			Неопределено,
			Неопределено,,
			Ложь);
		
		РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.ОтчетОЗамерахТемпературы,
			ПолучательУведомления,
			ПолучательУведомления);
		
	КонецЦикла;
	
	Возврат УведомленияСформированы;
	
КонецФункции

// Оперативно выполняет рассылку уведомлений.
//
Процедура ОперативноОтправитьУведомления()

	СформированныеУведомления = СформироватьУведомленияДляОтправки();
	ОтправитьУведомления(СформированныеУведомления);

	Документы.УведомлениеПоSMS.ВыполнитьРассылку();

КонецПроцедуры

// Формирует уведомления "Об отсутствии оригиналов у документов".
//
Процедура СформироватьНапоминанияОбОтсутствииОригиналов()

	ТекущаяДата = ТекущаяДатаСеанса();
	ДатаНачалаНапоминания = ТекущаяДата;
	// Уведомление об отсутствии оригинала документа
	СтруктураДокументыБезОригиналов = ДокументыБезОригиналов(ТекущаяДата);

	ТаблицаПодписчики = СтруктураДокументыБезОригиналов.ИтогиПоПодписчикам.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	ПолучателиУведомления = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");

	Если ПолучателиУведомления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ОбработанныеУведомления.Пользователь КАК Пользователь,
						  |	ОбработанныеУведомления.ДатаОбработки КАК ДатаОбработки
						  |ИЗ
						  |	РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
						  |ГДЕ
						  |	ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ОтсутствуетОригинал)
						  |	И ОбработанныеУведомления.ОбъектУведомления В(&ПолучателиУведомления)
						  |	И ОбработанныеУведомления.Пользователь В(&ПолучателиУведомления)");

	Запрос.УстановитьПараметр("ПолучателиУведомления", ПолучателиУведомления);

	СведенияОбОбработкеУведомлений = Запрос.Выполнить().Выгрузить();

	Для Каждого ПолучательУведомления Из СтруктураДокументыБезОригиналов.ИтогиПоПодписчикам Цикл

		Пользователь = ПолучательУведомления.Подписчик;

		СведенияОбОбработкеУведомления = СведенияОбОбработкеУведомлений.Найти(Пользователь, "Пользователь");
		Если СведенияОбОбработкеУведомления <> Неопределено И СведенияОбОбработкеУведомления.ДатаОбработки
			>= ДатаНачалаНапоминания Тогда
			Продолжить;
		КонецЕсли;

		КодЯзыкаПользователя = КодЯзыка(Пользователь);

		Если ПолучательУведомления.КоличествоДокументов > 5 Тогда
			СводкаПоДокументам = СтрШаблон(
				НСтр("ru = 'У вас есть документы без оригиналов:%1
					 |
					 |Посмотреть список можно по следующей ссылке: %2'", КодЯзыкаПользователя), Формат(
				ПолучательУведомления.КоличествоДокументов, "ЧН=0"), "e1cib/app/Отчет.КонтрольНаличияОригиналов");
		Иначе
			НайденныеДокументов = СтруктураДокументыБезОригиналов.ТаблицаДокументы.НайтиСтроки(
				Новый Структура("Подписчик", Пользователь));

			СсылкиНаДокументы = "";
			Для Каждого СтрДокумент Из НайденныеДокументов Цикл
				СсылкиНаДокументы = СсылкиНаДокументы + "- "
					+ ПолучитьНавигационнуюСсылкуУведомления(СтрДокумент.Документ) + Символы.ПС;
			КонецЦикла;

			СводкаПоДокументам = СтрШаблон(
				НСтр("ru = 'У вас есть документы без оригиналов: %1
					 |
					 |%2'", КодЯзыкаПользователя), Формат(ПолучательУведомления.КоличествоДокументов, "ЧН=0"),
				СсылкиНаДокументы);
		КонецЕсли;
		
		Если Не КОДСервер.ЭтоОсновнойУзелПользователя(Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Пользователь, Перечисления.СобытияУведомлений.ОтсутствуетОригинал, Неопределено, Неопределено,
			СводкаПоДокументам, Ложь);

		РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.ОтсутствуетОригинал, Пользователь, Пользователь);

	КонецЦикла;

КонецПроцедуры

Функция ДокументыБезОригиналов(АктивныеНаДату) 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьПодписчиковВоВременнуюТаблицу(
		МенеджерВременныхТаблиц, Перечисления.СобытияУведомлений.ОтсутствуетОригинал, "Документы");
		
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.Ссылка КАК Документ,
	|	ВЫБОР
	|		КОГДА СотрудникиПользователей.Сотрудник ЕСТЬ NULL
	|			ТОГДА Документы.Ответственный
	|		ИНАЧЕ СотрудникиПользователей.Пользователь
	|	КОНЕЦ КАК Ответственный,
	|	Документы.ДатаРегистрации КАК ДатаРегистрации
	|ПОМЕСТИТЬ ВсеДокументыПредприятия
	|ИЗ
	|	Справочник.ДокументыПредприятия КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
	|		ПО Документы.Ссылка = ДанныеДокументовПредприятия.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО Документы.Ответственный = СотрудникиПользователей.Сотрудник
	|ГДЕ
	|	НЕ Документы.ПометкаУдаления
	|	И НЕ ДанныеДокументовПредприятия.ОригиналПолучен
	|	И Документы.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И Документы.Ответственный <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И Документы.Ответственный <> НЕОПРЕДЕЛЕНО
	|	И Документы.ВидДокумента.КонтролироватьНаличиеОригинала
	|	И Документы.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КОНЕЦПЕРИОДА(Документы.ДатаРегистрации, ДЕНЬ) <= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И Документы.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
	|	И НЕ Документы.НеДействует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДокументыПредприятия.Документ КАК Документ,
	|	Подписчики.ПолучательУведомления КАК Подписчик,
	|	ВсеДокументыПредприятия.ДатаРегистрации КАК ДатаРегистрации,
	|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
	|	ВсеДокументыПредприятия.Документ КАК ОбъектПодписки
	|ПОМЕСТИТЬ ВсеДокументыИПодписчики
	|ИЗ
	|	ВсеДокументыПредприятия КАК ВсеДокументыПредприятия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
	|		ПО ВсеДокументыПредприятия.Ответственный = Подписчики.Подписчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
	|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ОтсутствуетОригинал))
	|		И ВсеДокументыПредприятия.Документ = ОбработанныеУведомления.ОбъектУведомления
	|		И (Подписчики.ПолучательУведомления = ОбработанныеУведомления.Пользователь)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документы.Ссылка,
	|	Подписчики.ПолучательУведомления,
	|	Документы.ДатаРегистрации,
	|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)),
	|	Документы.Ссылка
	|ИЗ
	|	Справочник.ДокументыПредприятия КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
	|		ПО Документы.Ссылка = ДанныеДокументовПредприятия.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
	|		ПО Документы.Ответственный = Подписчики.Подписчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
	|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ОтсутствуетОригинал))
	|		И Документы.Ссылка = ОбработанныеУведомления.ОбъектУведомления
	|		И (Подписчики.ПолучательУведомления = ОбработанныеУведомления.Пользователь)
	|ГДЕ
	|	НЕ Документы.ПометкаУдаления
	|	И НЕ ДанныеДокументовПредприятия.ОригиналПолучен
	|	И Документы.ВидДокумента.КонтролироватьНаличиеОригинала
	|	И Документы.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КОНЕЦПЕРИОДА(Документы.ДатаРегистрации, ДЕНЬ) <= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И Документы.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
	|	И НЕ Документы.НеДействует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДокументыИПодписчики.Подписчик КАК Подписчик,
	|	КОЛИЧЕСТВО(ВсеДокументыИПодписчики.Документ) КАК КоличествоДокументов
	|ИЗ
	|	ВсеДокументыИПодписчики КАК ВсеДокументыИПодписчики
	|СГРУППИРОВАТЬ ПО
	|	ВсеДокументыИПодписчики.Подписчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДокументыИПодписчики.Документ КАК Документ,
	|	ВсеДокументыИПодписчики.Подписчик КАК Подписчик,
	|	ВсеДокументыИПодписчики.ОбъектПодписки КАК ОбъектПодписки
	|ИЗ
	|	ВсеДокументыИПодписчики КАК ВсеДокументыИПодписчики
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подписчик,
	|	Документ";

	Запрос = Новый Запрос(ТекстЗапроса);
	// Напоминаем через 3 дня, после регистрации
	Запрос.УстановитьПараметр("Дата", АктивныеНаДату - 3 * 86400);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.ВыполнитьПакет();

	ИтогиПоПодписчикам = РезультатЗапроса[2].Выгрузить();
	ТаблицаДокументы        = РезультатЗапроса[3].Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();

	Возврат Новый Структура("ИтогиПоПодписчикам, ТаблицаДокументы", ИтогиПоПодписчикам, ТаблицаДокументы);

КонецФункции

// Проверяет, поддерживает ли действие формирование уведомлений о положительном завершении.
//
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Ссылка на действие, которое необходимо проверить.
//
// Возвращаемое значение:
//	Булево:
//		* Истина - действие поддерживает формирование уведомлений о положительном завершении.
//		* Ложь - в противном случае
Функция ДействиеПоддерживаетУведомлениеОПоложительномЗавершении(Действие)
	
	Возврат ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания")
				Или ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияРегистрации")
				Или ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования")
				Или ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияУтверждения");
	
КонецФункции


// Определяет адресатов уведомления по ссылке.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Пользователи - Адресаты уведомления.
//
Функция АдресатыУведомления(Ссылка)
	
	АдресатыУведомления = Новый Массив;
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
		
		АдресатыУведомления.Добавить(Ссылка);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		АдресатыУведомления = Сотрудники.ПользователиСотрудника(Ссылка);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		
		ИсполнителиРоли = РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(Ссылка);
		АдресатыУведомления = Сотрудники.ПользователиСотрудников(ИсполнителиРоли);
		
	КонецЕсли;
	
	Возврат АдресатыУведомления;
	
КонецФункции

// Разделитель дополнительного описания при обработке Дополнительного описания события изменения задачи.
// 
// Возвращаемое значение:
//  Строка - Разделитель дополнительного описания
//
Функция РазделительДополнительногоОписанияПриИзмененииЗадачи()
	
	Возврат "d1b10655-ce06-4e16-bfa5-53684f226d34";
	
КонецФункции

// Представление задачи и описание изменений по дополнительному описанию.
// 
// Параметры:
//  Описание - Строка
// 
// Возвращаемое значение:
//  Структура:
//   * ПредставлениеЗадачи - Строка, Неопределено - Используется как тема уведомления
//   * ОписаниеИзменений - Строка, Неопределено - Используется как текст уведомления
//
Функция ПредставлениеЗадачиИОписаниеИзмененийПоОписанию(Описание)
	
	Результат = Новый Структура("ПредставлениеЗадачи, ОписаниеИзменений", Неопределено, Неопределено);
	
	Части = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Описание,
		РазделительДополнительногоОписанияПриИзмененииЗадачи(), Истина, Истина);
	
	Если Части.Количество() <> 2 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ПредставлениеЗадачи = Части[0];
	Результат.ОписаниеИзменений = Части[1];
	
	Возврат Результат;
	
КонецФункции

// Возвращает интеграцию бота Telegram.
// 
// Возвращаемое значение:
//  ИнтеграцияСистемыВзаимодействия, Неопределено - Интеграция бота Telegram.
//
Функция ИнтеграцияБотаTelegram() Экспорт
	
	Если Не СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИнтеграцияБотаTelegram = СистемаВзаимодействия.ПолучитьИнтеграцию(КлючБотаTelegram());
	
	Возврат ИнтеграцияБотаTelegram;
	
КонецФункции

// Идентификатор интеграции бота Telegram.
// 
// Возвращаемое значение:
//  ИдентификаторИнтеграцииСистемыВзаимодействия, Неопределено -  Идентификатор интеграции бота Telegram.
//
Функция ИдентификаторИнтеграцииБотаTelegram()
	
	ИнтеграцияБотаTelegram = ИнтеграцияБотаTelegram();
	Если ИнтеграцияБотаTelegram = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторИнтеграцииБотаTelegram = ИнтеграцияБотаTelegram.Идентификатор;
	
	Возврат ИдентификаторИнтеграцииБотаTelegram;
	
КонецФункции

// Ключ бота Telegram.
// 
// Возвращаемое значение:
//  Строка -  Ключ бота Telegram.
//
Функция КлючБотаTelegram()
	
	Возврат "DocMngTG";
	
КонецФункции

// Возвращает интеграцию бота ВКонтакте.
// 
// Возвращаемое значение:
//  ИнтеграцияСистемыВзаимодействия, Неопределено - Интеграция бота ВКонтакте.
//
Функция ИнтеграцияБотаВКонтакте()
	
	Если Не СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИнтеграцияБотаВКонтакте = СистемаВзаимодействия.ПолучитьИнтеграцию(КлючБотаВКонтакте());
	
	Возврат ИнтеграцияБотаВКонтакте;
	
КонецФункции

// Идентификатор интеграции бота ВКонтакте.
// 
// Возвращаемое значение:
//  ИдентификаторИнтеграцииСистемыВзаимодействия, Неопределено -  Идентификатор интеграции бота ВКонтакте.
//
Функция ИдентификаторИнтеграцииБотаВКонтакте()
	
	ИнтеграцияБотаВКонтакте = ИнтеграцияБотаВКонтакте();
	Если ИнтеграцияБотаВКонтакте = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторИнтеграцииБотаВКонтакте = ИнтеграцияБотаВКонтакте.Идентификатор;
	
	Возврат ИдентификаторИнтеграцииБотаВКонтакте;
	
КонецФункции

// Ключ бота ВКонтакте.
// 
// Возвращаемое значение:
//  Строка -  Ключ бота ВКонтакте.
//
Функция КлючБотаВКонтакте()
	
	Возврат "DocMngVK";
	
КонецФункции

// Проверяет доступность изменения настроек бота. Вызывает исключение, если они не доступны.
//  
Процедура ПроверитьДоступностьИзмененияНастроекБота()
	
	Если Не КОДСервер.ЭтоЦентральныйУзел() Тогда
		ВызватьИсключение НСтр("ru = 'Активизировать бота в Telegram можно только в центральном узле.'");
	КонецЕсли;
	
	Если Не СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		ВызватьИсключение НСтр("ru = 'Система взаимодействия не зарегистрирована.'");
	КонецЕсли;
	
	Если Не РаботаСЧатБотом.ЧатБотИспользуется() Тогда
		ВызватьИсключение НСтр("ru = 'Чат-бот отключен.'");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив подписчиков по событию.
// Предназначено для оптимизации расчёта подписок
// без замещающих и помощников и без подписок по конкретным объектам.
//
// Параметры:
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий
//             - ПеречислениеСсылка.СобытияУведомлений
//  Пользователь - СправочникСсылка.Пользователь
//  НастройкиПодпискиПоУмолчанию - см. РегистрыСведений.НастройкиУведомлений.НастройкиПодпискиПоУмолчанию
//  ПерсональныеНастройкиПодписки - см. РегистрыСведений.НастройкиУведомлений.ПерсональныеНастройкиПодписки
// 
// Возвращаемое значение:
//  см. РегистрыСведений.НастройкиУведомлений.ПодписчикиПоСобытию
//
Функция ПодписчикиПоСобытию(ВидСобытия, Пользователь, НастройкиПодпискиПоУмолчанию, ПерсональныеНастройкиПодписки) Экспорт
	
	РазрешитьИзменятьНастройкиУведомлений = РегистрыСведений.НастройкиУведомлений.РазрешеноИзменятьНастройки();
	
	Подписчики = Новый Массив;
	Для Каждого СпособУведомления Из Перечисления.СпособыУведомления Цикл
		
		СтрокаПодписки = НастройкиПодпискиПоУмолчанию.Найти(СпособУведомления, "СпособУведомления");
		Если СтрокаПодписки <> Неопределено Тогда
			ПодпискаПоУмолчанию = СтрокаПодписки.Значение;
		Иначе
			ПодпискаПоУмолчанию = Перечисления.НастройкиУведомлений.СтандартноеЗначениеНастройки(
				Перечисления.НастройкиУведомлений.Подписка,
				ВидСобытия,
				СпособУведомления);
		КонецЕсли;
		
		СтрокаПодписки = НастройкиПодпискиПоУмолчанию.Найти(СпособУведомления, "СпособУведомления");
		Если СтрокаПодписки <> Неопределено Тогда
			ПодпискаПерсональная = СтрокаПодписки.Значение;
		Иначе
			ПодпискаПерсональная = Неопределено;
		КонецЕсли;
		
		Если Не РазрешитьИзменятьНастройкиУведомлений И ПодпискаПоУмолчанию Тогда
			ПодпискаНаСобытие = ПодпискаПоУмолчанию;
		ИначеЕсли ПодпискаПерсональная <> Неопределено Тогда
			ПодпискаНаСобытие = ПодпискаПерсональная;
		Иначе
			ПодпискаНаСобытие = ПодпискаПоУмолчанию;
		КонецЕсли;
		
		Если Не ПодпискаНаСобытие Тогда
			Продолжить;
		КонецЕсли;
		
		Подписчик = Новый Структура("Пользователь, СпособУведомления");
		Подписчик.Пользователь = Пользователь;
		Подписчик.СпособУведомления = СпособУведомления;
		Подписчики.Добавить(Подписчик);
		
	КонецЦикла;
	
	Возврат Подписчики;
	
КонецФункции

// Добавляет уведомление о новом сообщении в форуме.
// 
// Параметры:
//  ПолучательСотрудник - СправочникСсылка.Сотрудники
//  НовоеСообщение - СправочникСсылка.СообщенияОбсуждений
// 
Процедура ДобавитьУведомлениеОНовомСообщении(ПолучательСотрудник, НовоеСообщение)
	
	// Уведомление о новом сообщении в форуме использует кэширование через ссылку по всему стеку.
	ОтправительСотрудник = НовоеСообщение.Автор;
	
	ПолучательПользователь = Сотрудники.ЛюбойПользовательСотрудника(ПолучательСотрудник);
	ОтправительПользователь = Сотрудники.ЛюбойПользовательСотрудника(ОтправительСотрудник);
	
	Если ПолучательПользователь = ОтправительПользователь Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
		ПолучательПользователь,
		Справочники.ВидыБизнесСобытий.СозданиеСообщения,
		НовоеСообщение,
		НовоеСообщение.ВладелецСообщения);
	
КонецПроцедуры

#КонецОбласти