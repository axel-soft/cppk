////////////////////////////////////////////////////////////////////////////////
// Работа с процессами по действиям: содержит процедуры и функции по обработке действий процессами.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет, выполняет ли процесс действие.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.
// 
// Возвращаемое значение:
//  Булево - Процесс выполняет действие.
//
Функция ПроцессВыполняетДействие(Процесс) Экспорт

	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает действие задачи процесса.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя,
//                   ЗадачаСсылка.ЗадачаИсполнителя,
//                   Структура со свойством БизнесПроцесс
//
// Возвращаемое значение:
//  ОпределяемыйТип.Действия - ссылка на действие.
//
Функция ДействиеЗадачиПроцесса(ЗадачаПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипЗадачи = ТипЗнч(ЗадачаПроцесса);
	
	РеквизитыЗадачи = Неопределено;
	Если ТипЗадачи = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЗадачаПроцесса, "БизнесПроцесс");
	ИначеЕсли ТипЗадачи = Тип("ЗадачаОбъект.ЗадачаИсполнителя")
		Или ТипЗадачи = Тип("Структура") Тогда
		
		РеквизитыЗадачи = ЗадачаПроцесса;
	КонецЕсли;
	
	Возврат РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(РеквизитыЗадачи.БизнесПроцесс);
	
КонецФункции

// Возвращает действие по процессу
//
// Параметры:
//  Процесс
//
// Возвращаемое значение:
//  Действие - ОпределяемыйТип.Действия - действие.
//
Функция ДействиеПоПроцессу(Процесс) Экспорт
	
	Возврат РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс)
	
КонецФункции

// Возвращает действия по процессам.
//
// Параметры:
//  Процессы - Массив из БизнесПроцессСсылка.
//
// Возвращаемое значение:
//  Соответствие - Действия по процессам.
//   * Ключ - БизнесПроцессСсылка - Процесс.
//   * Значение - ОпределяемыйТип.Действия - Действие.
//
Функция ДействияПоПроцессам(Процессы) Экспорт
	
	Возврат РегистрыСведений.ПроцессыДействий.ДействияПоПроцессам(Процессы)
	
КонецФункции

// Возвращает последние задачи процессов для участников действий.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//  МассивИдУчастника - Массив из УникальныйИдентификатор
//
// Возвращаемое значение:
//  Соответствие - Процессы действий.
//   * Ключ - УникальныйИдентификатор.
//   * Значение - Соответствие - Задачи процессов по участникам действия.
//     ** Ключ - УникальныйИдентификатор - Участник действия.
//     ** Значение - ЗадачаСсылка.ЗадачаИсполнителя - Задача процесса по участнику действия.
//
Функция ЗадачиПроцессаПоУчастникамДействия(Действие, МассивИдУчастника) Экспорт
	
	ЗадачиПоИдентификатору = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.ИдентификаторИсполнителя КАК ИдентификаторИсполнителя
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс В(&ПроцессыДействий)
		|	И ЗадачаИсполнителя.ИдентификаторИсполнителя В(&МассивИдУчастника)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.Дата УБЫВ");
	
	Действия = Новый Массив;
	Действия.Добавить(Действие);
	
	ВсеПроцессыДействий = Новый Массив;
	ПроцессыДействий = РегистрыСведений.ПроцессыДействий.ПроцессыДействий(Действия);
	
	ДействияПроцессов = Новый Соответствие;
	Для Каждого КлючИЗначение Из ПроцессыДействий Цикл
		
		Действие = КлючИЗначение.Ключ;
		ПроцессыДействия = КлючИЗначение.Значение;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ВсеПроцессыДействий,
			ПроцессыДействия);
		
		Для Каждого ПроцессДействия Из ПроцессыДействия Цикл
			ДействияПроцессов.Вставить(ПроцессДействия, Действие);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПроцессыДействий", ВсеПроцессыДействий);
	Запрос.УстановитьПараметр("МассивИдУчастника", МассивИдУчастника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Действие = ДействияПроцессов[Выборка.БизнесПроцесс];
		
		// добавим только 1 раз - самую новую задачу
		Если ЗадачиПоИдентификатору.Получить(Выборка.ИдентификаторИсполнителя) = Неопределено Тогда
			ЗадачиПоИдентификатору.Вставить(Выборка.ИдентификаторИсполнителя, Выборка.Задача);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗадачиПоИдентификатору;
	
КонецФункции

// Возвращает последнии задачи процессов для участников действий.
//
// Параметры:
//  Действие - Массив из ОпределяемыйТип.Действия.
//  ИдентификаторУчастника - Неопределено
//                         - УникальныйИдентификатор
//
// Возвращаемое значение:
//  Соответствие - Процессы действий.
//   * Ключ - ОпределяемыйТип.Действия - Действие.
//   * Значение - Соответствие - Задачи процессов по участникам действия.
//     ** Ключ - УникальныйИдентификатор - Участник действия.
//     ** Значение - ЗадачаСсылка.ЗадачаИсполнителя - Задача процесса по участнику действия.
//
Функция ЗадачиПроцессовПоУчастникамДействий(Действия, ИдентификаторУчастника = Неопределено) Экспорт
	
	ЗадачиПроцессовПоУчастникамДействий = Новый Соответствие;
	Для Каждого Действие Из Действия Цикл
		ЗадачиПроцессовПоУчастникамДействий.Вставить(Действие, Новый Соответствие);
	КонецЦикла;
	
	Если Действия.Количество() = 0 Тогда
		Возврат ЗадачиПроцессовПоУчастникамДействий;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.ИдентификаторИсполнителя КАК ИдентификаторИсполнителя
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс В(&ПроцессыДействий)
		|	И ЗадачаИсполнителя.ИдентификаторИсполнителя = &ИдентификаторУчастника
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.Дата УБЫВ");
	
	ВсеПроцессыДействий = Новый Массив;
	ПроцессыДействий = РегистрыСведений.ПроцессыДействий.ПроцессыДействий(Действия);
	ДействияПроцессов = Новый Соответствие;
	Для Каждого КлючИЗначение Из ПроцессыДействий Цикл
		
		Действие = КлючИЗначение.Ключ;
		ПроцессыДействия = КлючИЗначение.Значение;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ВсеПроцессыДействий,
			ПроцессыДействия);
		
		Для Каждого ПроцессДействия Из ПроцессыДействия Цикл
			ДействияПроцессов.Вставить(ПроцессДействия, Действие);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПроцессыДействий", ВсеПроцессыДействий);
	
	Если ИдентификаторУчастника <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдентификаторУчастника);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗадачаИсполнителя.ИдентификаторИсполнителя = &ИдентификаторУчастника", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Действие = ДействияПроцессов[Выборка.БизнесПроцесс];
		ЗадачиПроцессовПоУчастникамДействия = ЗадачиПроцессовПоУчастникамДействий[Действие];
		Если ЗадачиПроцессовПоУчастникамДействия[Выборка.ИдентификаторИсполнителя] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗадачиПроцессовПоУчастникамДействия.Вставить(Выборка.ИдентификаторИсполнителя, Выборка.Задача)
		
	КонецЦикла;
	
	Возврат ЗадачиПроцессовПоУчастникамДействий;
	
КонецФункции

// Возвращает последнюю задачу процесса для участника действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - ссылка на действие.
//  ИдентификаторУчастника - УникальныйИдентификатор - идентификатор участника.
//
// Возвращаемое значение:
//  ЗадачаСсылка.ЗадачаИсполнителя
//
Функция ЗадачаПроцессаПоУчастникуДействия(Действие, Знач ИдентификаторУчастника) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	// тут подменим ИдентификаторУчастника для ДействиеПодписания
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
		
		МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
		ИдентификаторПодписывающего = МенеджерДействия.ИдентификаторПодписывающего(Действие, ИдентификаторУчастника);
		Если ЗначениеЗаполнено(ИдентификаторПодписывающего) Тогда
			ИдентификаторУчастника = ИдентификаторПодписывающего;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Действия = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие);
	ЗадачиПроцессовПоУчастникамДействий = ЗадачиПроцессовПоУчастникамДействий(Действия, ИдентификаторУчастника);
	ЗадачиПроцессовПоУчастникамДействия = ЗадачиПроцессовПоУчастникамДействий[Действие];
	
	ЗадачаПроцессаПоУчастникуДействия = ЗадачиПроцессовПоУчастникамДействия[ИдентификаторУчастника];
	Если ЗадачаПроцессаПоУчастникуДействия = Неопределено Тогда
		ЗадачаПроцессаПоУчастникуДействия = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ЗадачаПроцессаПоУчастникуДействия;
	
КонецФункции

// Возвращает задачи участников действий.
//
// Параметры:
//  Действия - Массив из ОпределяемыйТип.Действия.
// 
// Возвращаемое значение:
//  Соответствие - Задачи участников действий.
//   * Ключ - ОпределяемыйТип.Действия - Действие.
//   * Значение - Соответствие - Задачи участников действия.
//     ** Ключ - УникальныйИдентификатор - Участник действия.
//     ** Значение - ДокументСсылка.ДействиеЗадачи - Задача участника действия.
//
Функция ЗадачиУчастниковДействий(Действия) Экспорт
	
	ЗадачиПроцессовПоУчастникамДействий = ЗадачиПроцессовПоУчастникамДействий(Действия);
	
	ВсеЗадачиПроцессов = Новый Массив;
	Для Каждого КлючИЗначение1 Из ЗадачиПроцессовПоУчастникамДействий Цикл
		
		Действие = КлючИЗначение1.Ключ;
		ЗадачиПроцессовПоУчастникамДействия = КлючИЗначение1.Значение;
		
		Для Каждого КлючИЗначение2 Из ЗадачиПроцессовПоУчастникамДействия Цикл
			
			Участник = КлючИЗначение2.Ключ;
			ЗадачаПроцесса = КлючИЗначение2.Значение;
			
			Если Не ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеЗадачиПроцессов.Добавить(ЗадачаПроцесса);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДействияЗадачПоИсточникам = Документы.ДействиеЗадачи.НайтиПоИсточникам(ВсеЗадачиПроцессов);
	
	ЗадачиУчастниковДействий = Новый Соответствие;
	Для Каждого КлючИЗначение1 Из ЗадачиПроцессовПоУчастникамДействий Цикл
		
		Действие = КлючИЗначение1.Ключ;
		ЗадачиПроцессовПоУчастникамДействия = КлючИЗначение1.Значение;
		
		ЗадачиУчастниковДействия = Новый Соответствие;
		Для Каждого КлючИЗначение2 Из ЗадачиПроцессовПоУчастникамДействия Цикл
			
			Участник = КлючИЗначение2.Ключ;
			ЗадачаПроцесса = КлючИЗначение2.Значение;
			
			Если Не ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
				Продолжить;
			КонецЕсли;
			
			ДействиеЗадачи = ДействияЗадачПоИсточникам[ЗадачаПроцесса];
			ЗадачиУчастниковДействия.Вставить(Участник, ДействиеЗадачи);
			
		КонецЦикла;
		
		ЗадачиУчастниковДействий.Вставить(Действие, ЗадачиУчастниковДействия);
		
	КонецЦикла;
	
	Возврат ЗадачиУчастниковДействий;
	
КонецФункции

// Возвращает функцию по точке маршрута. Вызывает исключение, если не удалось определить.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка
//
// Возвращаемое значение:
//  ОпределяемыйТип.ФункцииУчастниковДействий
//
Функция ФункцияПоТочкеМаршрута(ТочкаМаршрута) Экспорт
	
	ФункцияУчастника = ФункцияПоТочкеМаршрутаБезИсключения(ТочкаМаршрута);
	Если ФункцияУчастника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить функцию действия по точке маршрута.'");
	КонецЕсли;
	
	Возврат ФункцияУчастника;
	
КонецФункции	

// Возвращает функцию по точке маршрута без исключения.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка
//
// Возвращаемое значение:
//  ОпределяемыйТип.ФункцииУчастниковДействий
//  Неопределено
//
Функция ФункцияПоТочкеМаршрутаБезИсключения(ТочкаМаршрута) Экспорт
	
	Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезолюцию;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
	
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.Регистратор;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат;
	
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.ОбрабатывающийРезультат;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание тогда		
	
		ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание;
	
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат;
	
	Иначе
		
		ФункцияУчастника = Неопределено;
		
	КонецЕсли;
	
	Возврат ФункцияУчастника;
	
КонецФункции

Функция ФактическийИсполнитель(Процесс, Знач ИдентификаторУчастника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс);
	Если ЗначениеЗаполнено(Действие) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СведенияОбУчастникахДействий.ФактическийИсполнитель КАК ФактическийИсполнитель
			|ИЗ
			|	РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
			|ГДЕ
			|	СведенияОбУчастникахДействий.Действие = &Действие
			|	И СведенияОбУчастникахДействий.ИдентификаторУчастника = &ИдентификаторУчастника");
		
		Запрос.УстановитьПараметр("Действие", Действие);
		Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдентификаторУчастника);

		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.ФактическийИсполнитель;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Обновление

// Выполняет замену авторов в процессах подчиненных исполнений обработок документов
//
// Параметры:
//  Параметры - Структура - стандартные параметры отложенных обработчиков обновления.
//
Процедура ИсправитьЗаполнениеАвтораВПроцессахПоПодчиненнымИсполнениям(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Параметры.Вставить("ПустыеЗначения", Сотрудники.МассивПустыхСсылокПользователя());
	
	ТочкиМаршрутаРассмотрения = Новый Массив();
	ТочкиМаршрутаРассмотрения.Добавить(БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
	ТочкиМаршрутаРассмотрения.Добавить(БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться);
	Запрос.Параметры.Вставить("ТочкиМаршрутаРассмотрения", ТочкиМаршрутаРассмотрения);
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Исполнение.Ссылка) КАК Количество
			|ИЗ
			|	БизнесПроцесс.Исполнение КАК Исполнение
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
			|		ПО Исполнение.Ссылка = ПроцессыДействий.Процесс
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО Исполнение.ГлавнаяЗадача = ЗадачаИсполнителя.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияИсполнения.Участники КАК ДействияИсполненияУчастники
			|		ПО ДействияИсполненияУчастники.Ссылка = ПроцессыДействий.Действие
			|		И ДействияИсполненияУчастники.Идентификатор = ЗадачаИсполнителя.ИдентификаторИсполнителя
			|ГДЕ
			|	Исполнение.Автор В (&ПустыеЗначения)
			|	И ЗадачаИсполнителя.ТочкаМаршрута В (&ТочкиМаршрутаРассмотрения)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = 
				Параметры.ПрогрессВыполнения.ВсегоОбъектов + Выборка.Количество;
		КонецЕсли;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	Исполнение.Ссылка КАК Процесс,
		|	ПроцессыДействий.Действие КАК Действие,
		|	ЗадачаИсполнителя.ИдентификаторИсполнителя КАК ИдентификаторУчастника
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК Исполнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|		ПО Исполнение.Ссылка = ПроцессыДействий.Процесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО Исполнение.ГлавнаяЗадача = ЗадачаИсполнителя.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияИсполнения.Участники КАК ДействияИсполненияУчастники
		|		ПО ДействияИсполненияУчастники.Ссылка = ПроцессыДействий.Действие
		|		И ДействияИсполненияУчастники.Идентификатор = ЗадачаИсполнителя.ИдентификаторИсполнителя
		|ГДЕ
		|	Исполнение.Автор В (&ПустыеЗначения)
		|	И ЗадачаИсполнителя.ТочкаМаршрута В (&ТочкиМаршрутаРассмотрения)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗапросПолученияВопросов = Новый Запрос(
		"ВЫБРАТЬ
		|	РешениеВопросовВыполненияЗадач.Ссылка КАК Вопрос
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО РешениеВопросовВыполненияЗадач.ГлавнаяЗадача = ЗадачаИсполнителя.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Процесс
		|	И РешениеВопросовВыполненияЗадач.ИнициаторПроцесса В (&ПустыеЗначения)");
	
	ЗапросПолученияВопросов.Параметры.Вставить(
		"ПустыеЗначения", Сотрудники.МассивПустыхСсылокПользователя());
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НавигационнаяСсылкаНаПроцесс = ПолучитьНавигационнуюСсылку(Выборка.Процесс);
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Действие);
			ЗаблокироватьДанныеДляРедактирования(Выборка.Процесс);
			
			УчастникиДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Действие, "Участники");
			УчастникиДействия = УчастникиДействия.Выгрузить();
			
			АвторПодчиненногоИсполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Выборка.Действие, "Автор");
			
			ИдентификаторАвтора = Выборка.ИдентификаторУчастника;
			СтрокаУчастника = УчастникиДействия.Найти(ИдентификаторАвтора, "Идентификатор");
			Если ЗначениеЗаполнено(СтрокаУчастника.ВышестоящийУчастник) Тогда
				ИдентификаторАвтора = СтрокаУчастника.ВышестоящийУчастник;
				СтрокаУчастника = УчастникиДействия.Найти(ИдентификаторАвтора, "Идентификатор");
			КонецЕсли;
			Если СтрокаУчастника <> Неопределено
				И ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
				АвторПодчиненногоИсполнения = СтрокаУчастника.Участник;
			Иначе
				СведенияОбУчастниках = 
					РегистрыСведений.СведенияОбУчастникахДействий.ПолучитьСведенияОбУчастникахДействия(
						Выборка.Действие);
				СведенияОбРассматривающем = СведенияОбУчастниках[ИдентификаторАвтора];
				Если СведенияОбРассматривающем <> Неопределено Тогда
					АвторПодчиненногоИсполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						СведенияОбРассматривающем.ФактическийИсполнитель, "Факт");
				КонецЕсли;
			КонецЕсли;
			
			ПроцессПодчиненногоИсполнения = Выборка.Процесс.ПолучитьОбъект();
			ПроцессПодчиненногоИсполнения.Автор = АвторПодчиненногоИсполнения;
			
			СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(
				ПроцессПодчиненногоИсполнения.Ссылка);
			
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
			
			ПроцессПодчиненногоИсполнения.Записать();
			
			ПроцессПодчиненногоИсполнения.ИзменитьРеквизитыНевыполненныхЗадач(
				СтарыеУчастникиПроцесса, Новый Структура);
			
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(ПроцессПодчиненногоИсполнения.Ссылка);
			
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			
			ЗапросПолученияВопросов.УстановитьПараметр("Процесс", Выборка.Процесс);
			ВыборкаВопросов = ЗапросПолученияВопросов.Выполнить().Выбрать();
			Пока ВыборкаВопросов.Следующий() Цикл
				ЗаблокироватьДанныеДляРедактирования(ВыборкаВопросов.Вопрос);
				ПроцессВопрос = ВыборкаВопросов.Вопрос.ПолучитьОбъект();
				ПроцессВопрос.ИнициаторПроцесса = АвторПодчиненногоИсполнения;
				ПроцессВопрос.Записать();
			КонецЦикла;
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать процесс подчиненного исполнения: %1 по причине:
					|%2'"),
				НавигационнаяСсылкаНаПроцесс,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ИсправитьЗаполнениеАвтораВПроцессахПоПодчиненнымИсполнениям не удалось обработать некоторые процессы (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;	
	
КонецПроцедуры

#КонецОбласти

#Область ПрерываниеПроцессов

// Прерывает процессы действия при помещении действия в историю.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//
Процедура ПрерватьПроцессыДействияПриПомещенииДействияВИсторию(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцессыДействия = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие);
	Если ПроцессыДействия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаПрерывания = 
		НСтр("ru = 'Помещение действия в историю.'", ОбщегоНазначения.КодОсновногоЯзыка()); 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК Процесс
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.БизнесПроцесс В (&ПроцессыДействия)
		|	И ДанныеБизнесПроцессов.Завершен = ЛОЖЬ
		|	И ДанныеБизнесПроцессов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)";
	Запрос.УстановитьПараметр("ПроцессыДействия", ПроцессыДействия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			// при прерывании обработки не проверяем блокирвоку.
			
			ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
			ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван;
			ПроцессОбъект.ПричинаПрерывания = ПричинаПрерывания;
			РаботаСБизнесПроцессамиВызовСервера.ОтключитьПроверкуВозможностиИзмененияСостоянияПроцесса(ПроцессОбъект);
			ПроцессОбъект.Записать();
			
			ПротоколированиеРаботыСотрудников.ЗаписатьПрерываниеБизнесПроцесса(Выборка.Процесс);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

// Прерывает процессы действия при повторном запуске.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//
Процедура ПрерватьПроцессыДействияПриПовторномЗапуске(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцессыДействия = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие, Истина);
	Если ПроцессыДействия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаПрерывания = 
		НСтр("ru = 'Повторный запуск действия.'", ОбщегоНазначения.КодОсновногоЯзыка()); 
	
	Для Каждого ПроцессДействия Из ПроцессыДействия Цикл
		ПрерватьПроцессДействия(ПроцессДействия, ПричинаПрерывания);
	КонецЦикла;

КонецПроцедуры

// Выполняет прерывание процессов при прерывании действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
// 
Процедура ПрерватьПроцессыПриПрерыванииДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда
		РегистрыСведений.УчастникиОзнакомлений.УстановитьВсемСостояние(Действие, Перечисления.СостоянияОзнакомления.Отменено);
		РаботаСПроцессамиПоДействиям.ПрерватьДействиеОзнакомления(Действие);    
		РаботаСПроцессамиПоОбработкамОбъектов.ВыполнитьСлужебнуюЗадачуОзнакомленияСОжиданием(Действие);
		Возврат;
	КонецЕсли;	
	
	ПроцессыДействия = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие);
	
	РеквизитыПроцессов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ПроцессыДействия, "Состояние, Завершен");
	
	ПричинаПрерывания = 
		НСтр("ru = 'Прерывание выполнения действия.'", ОбщегоНазначения.КодОсновногоЯзыка()); 
	
	Для Каждого ПроцессДействия Из ПроцессыДействия Цикл
		
		РеквизитыПроцесса = РеквизитыПроцессов[ПроцессДействия];
		
		Если РеквизитыПроцесса.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
			Или РеквизитыПроцесса.Завершен Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПрерватьПроцессДействия(ПроцессДействия, ПричинаПрерывания);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОстановкаПродолжениеПроцессов

// Останавливает/продолжает процессы по состоянию действия.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  СостояниеДействия - ПеречислениеСсылка.СостоянияВыполненияДействий
//
Процедура ОстановитьПродолжитьПроцессыПоСостояниюДействия(Действие, СостояниеДействия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СостояниеДействия <> Перечисления.СостоянияВыполненияДействий.Остановлено
		И СостояниеДействия <> Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
		
		Возврат;
	КонецЕсли;
	
	ПроцессыДействия = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие);
	Если ПроцессыДействия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК Процесс,
		|	ДанныеБизнесПроцессов.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.БизнесПроцесс В (&ПроцессыДействия)
		|	И ДанныеБизнесПроцессов.Завершен = ЛОЖЬ
		|	И ДанныеБизнесПроцессов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)";
	Запрос.УстановитьПараметр("ПроцессыДействия", ПроцессыДействия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
	
		Пока Выборка.Следующий() Цикл
			
			СостояниеПроцесса = Выборка.Состояние;
			
			НовоеСостояниеПроцесса = СостояниеПроцесса;
			
			Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Остановлено
				И СостояниеПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен Тогда
				
				НовоеСостояниеПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен;
				
			ИначеЕсли СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется
				И СостояниеПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
				
				НовоеСостояниеПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
				
			КонецЕсли;
			
			Если НовоеСостояниеПроцесса <> СостояниеПроцесса Тогда
				ЗаблокироватьДанныеДляРедактирования(Выборка.Процесс);
				
				ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
				ПроцессОбъект.Состояние = НовоеСостояниеПроцесса;
				РаботаСБизнесПроцессамиВызовСервера.ОтключитьПроверкуВозможностиИзмененияСостоянияПроцесса(ПроцессОбъект);
				ПроцессОбъект.Записать();
				
				РазблокироватьДанныеДляРедактирования(Выборка.Процесс);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Останавливает/продолжает действие Ознакомления.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  СостояниеДействия - ПеречислениеСсылка.СостоянияВыполненияДействий
//
Процедура ОстановитьПродолжитьДействиеОзнакомления(Действие, СостояниеДействия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СостояниеДействия <> Перечисления.СостоянияВыполненияДействий.Остановлено
		И СостояниеДействия <> Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
		
		Возврат;
	КонецЕсли;

	УчастникиИДаты = РегистрыСведений.УчастникиОзнакомлений.УчастникиИДатыДействия(Действие);	
	
	Для Каждого СтрокаРС Из УчастникиИДаты Цикл      
		
		СтароеСостояние = Неопределено;
		НовоеСостояние = Неопределено;     
		
		Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Остановлено Тогда

			СтароеСостояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении;     
			НовоеСостояние = Перечисления.СостоянияОзнакомления.НаПаузе;
			
		Иначе	
			
			СтароеСостояние = Перечисления.СостоянияОзнакомления.НаПаузе;     
			НовоеСостояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении;
			
		КонецЕсли;	

		// поменяем состояние
		РегистрыСведений.УчастникиОзнакомлений.УстановитьСостояние(
			Действие, СтрокаРС.ИдентификаторУчастника, СтароеСостояние, НовоеСостояние);
		
		
		ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоДействиюОзнакомления(
			Действие,
			СтрокаРС.ИдентификаторУчастника);
		
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#Область ПометкаУдаленияПроцессов

// Прерывает процессы действия при повторном запуске.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//
Процедура ОбновитьПометкуУдаленияПроцессовДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцессыДействия = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка);
	Если ПроцессыДействия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПометкиУделенияПроцессов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ПроцессыДействия, "ПометкаУдаления");
	
	НачатьТранзакцию();
	
	Попытка
	
		Для Каждого ПроцессДействия Из ПроцессыДействия Цикл
			
			ПометкаУдаленияПроцесса = ПометкиУделенияПроцессов[ПроцессДействия];
			
			Если ПометкаУдаленияПроцесса <> Действие.ПометкаУдаления Тогда
				ЗаблокироватьДанныеДляРедактирования(ПроцессДействия);
				ПроцессОбъект = ПроцессДействия.ПолучитьОбъект();
				ПроцессОбъект.УстановитьПометкуУдаления(Действие.ПометкаУдаления);
				РазблокироватьДанныеДляРедактирования(ПроцессДействия);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область НаименованияЗадачПроцессов

// Заполняет наименование и описание задачи по действию или процессу.
// 
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - Заполняемая задача
//  Наименование - Строка - Наименование по бизнес процессу
//  Описание - Строка - Описание по бизнес процессу
//
Процедура ЗаполнитьНаименованиеИОписаниеЗадачи(Задача, Наименование, Описание) Экспорт
	
	НаименованиеИОписаниеПоДействию = Неопределено;
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Задача.Предметы, Истина, Ложь);
	Действие = ДействиеЗадачиПроцесса(Задача);
	Если ЗначениеЗаполнено(Действие) Тогда
		НаименованиеИОписаниеПоДействию = РегистрыСведений.НаименованияЗадачУчастниковДействий.НаименованиеИОписаниеЗадачи(
			Действие,
			ФункцияПоТочкеМаршрута(Задача.ТочкаМаршрута),, ПредметыСтрокой);
	КонецЕсли;
	
	// Описание может быть перехвачено в действии, поэтому берем его, если задано.
	Если ЗначениеЗаполнено(Описание) Тогда
		Задача.Описание = Описание;
	ИначеЕсли НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Описание) Тогда
		Задача.Описание = НаименованиеИОписаниеПоДействию.Описание;
	КонецЕсли;
	
	Если НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
		Задача.Наименование = НаименованиеИОписаниеПоДействию.Наименование;

	Иначе
		Задача.Наименование = Наименование;
	КонецЕсли;
	
КонецПроцедуры

// Наименование и описание задачи по действию.
// 
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - Задача, для которой формируется наименование.
//  ПредметыСтрокой - Строка - Предметы строкой, см.  МультипредметностьКлиентСервер.ПредметыСтрокой
//  ВключаяЭтапы - Булево - Включает вычисление этапа действия
// 
// Возвращаемое значение:
//  Неопределено, Структура - Наименование и описание задачи по действию:
// * Наименование - Строка - Наименование задачи
// * Описание - Строка - Описание задачи.
//
Функция НаименованиеИОписаниеЗадачиПоДействию(Задача, ПредметыСтрокой, ВключаяЭтапы = Ложь) Экспорт
	
	НаименованиеИОписаниеПоДействию = Неопределено;
	
	Действие = ДействиеЗадачиПроцесса(Задача);
	Если ЗначениеЗаполнено(Действие) Тогда
		Этап = "";
		Если ВключаяЭтапы Тогда
			ИдентификаторЭтапа = Справочники.ДействияСогласования.ИдентификаторЭтапаУчастника(
				Действие, Задача.ИдентификаторИсполнителя);
			Если ЗначениеЗаполнено(ИдентификаторЭтапа) Тогда
				Этап = Справочники.ДействияСогласования.ЭтапПоИдентификатору(
					Действие, ИдентификаторЭтапа);
			КонецЕсли;
		КонецЕсли;
		
		НаименованиеИОписаниеПоДействию = РегистрыСведений.НаименованияЗадачУчастниковДействий.НаименованиеИОписаниеЗадачи(
			Действие,
			РаботаСПроцессамиПоДействиям.ФункцияПоТочкеМаршрута(Задача.ТочкаМаршрута), 
			Этап, 
			ПредметыСтрокой);
	КонецЕсли;
	
	Возврат НаименованиеИОписаниеПоДействию;
	
КонецФункции

#КонецОбласти

// Создает и возвращает объекты процессов по действиям, в рамках процесса обработки 
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект - объект действие.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс - процесс обработки.
//
// Возвращаемое значение:
//  Массив:
//   * БизнесПроцессОбъект.Исполнение,
//   * БизнесПроцессОбъект.Рассмотрение,
//   * БизнесПроцессОбъект.Ознакомление,
//   * БизнесПроцессОбъект.Регистрация,
//   * БизнесПроцессОбъект.Согласование,
//   * БизнесПроцессОбъект.Утверждение - процесс по действию.
//
Функция СоздатьПроцессыПоДействию(Действие, ПроцессОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцессПоДействиям = Новый Массив;
	
	Если ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияИсполнения") Тогда
		
		Если Действие.ПоПунктам Тогда
			ПроцессПоДействиям = ПроцессыИсполненияПоДействиюСПунктами(Действие, ПроцессОбработки);
		Иначе
			ПроцессПоДействиям = СоздатьПроцессыРассмотренияПоДействию(Действие, ПроцессОбработки);
			НовыйПроцесс = СоздатьПроцессИсполненияПоДействию(Действие, ПроцессОбработки);
			Если НовыйПроцесс <> Неопределено Тогда
				ПроцессПоДействиям.Добавить(НовыйПроцесс);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияОзнакомления") Тогда
		ПроцессПоДействиям.Добавить(СоздатьПроцессОзнакомленияПоДействию(Действие, ПроцессОбработки));
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияПодписания") Тогда
		ПроцессПоДействиям.Добавить(СоздатьПроцессПодписанияПоДействию(Действие, ПроцессОбработки));
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияРегистрации") Тогда
		ПроцессПоДействиям.Добавить(СоздатьПроцессРегистрацииПоДействию(Действие, ПроцессОбработки));
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияСогласования") Тогда
		ПроцессПоДействиям.Добавить(СоздатьПроцессСогласованияПоДействию(Действие, ПроцессОбработки));
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияУтверждения") Тогда
		ПроцессПоДействиям.Добавить(СоздатьПроцессУтвержденияПоДействию(Действие, ПроцессОбработки));
	КонецЕсли;
	
	ПроцессыИсполненияПоПунктам = Новый Массив;
	Для Каждого ПроцессПоДействию Из ПроцессПоДействиям Цикл
		
		Если ТипЗнч(ПроцессПоДействию) = Тип("Структура") Тогда
			ПроцессПоДействию.ПроцессИсполнения.Записать();
			РегистрыСведений.ПроцессыДействий.Добавить(
				ПроцессПоДействию.ПроцессИсполнения.Ссылка, Действие.Ссылка, ПроцессПоДействию.ИдентификаторПункта);
			ПроцессыИсполненияПоПунктам.Добавить(ПроцессПоДействию.ПроцессИсполнения);
			УстановитьЗадержкуНачалаВыполнения(Действие, ПроцессПоДействию.ПроцессИсполнения.Ссылка);
			
		Иначе
			ПроцессПоДействию.Записать();
			РегистрыСведений.ПроцессыДействий.Добавить(ПроцессПоДействию.Ссылка, Действие.Ссылка);
			УстановитьЗадержкуНачалаВыполнения(Действие, ПроцессПоДействию);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ПроцессыИсполненияПоПунктам.Количество() > 0 Тогда
		Возврат ПроцессыИсполненияПоПунктам;
	Иначе
		Возврат ПроцессПоДействиям;
	КонецЕсли;
	
КонецФункции

// Создает и возвращает объекты процессов по действиям с новыми участникам.
//
// Параметры:
//  Действие - СправочникОбъект.ДействияИсполнения,
//             СправочникОбъект.ДействияОзнакомления,
//             СправочникОбъект.ДействияСогласования,
//             СправочникОбъект.ДействияПодписания
//
// Возвращаемое значение:
//  Массив:
//   * БизнесПроцессОбъект.Исполнение,
//   * БизнесПроцессОбъект.Рассмотрение,
//   * БизнесПроцессОбъект.Ознакомление,
//   * БизнесПроцессОбъект.Согласование,
//   * БизнесПроцессОбъект.Подписание - процесс по действию.
//
Функция СоздатьПроцессыПоИсполнениюДействияСНовымиУчастниками(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцессПоДействиям = Новый Массив;
	
	Если ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияИсполнения") Тогда
		
		ПроцессПоДействиям = СоздатьПроцессыРассмотренияПоДействию(Действие);
			
		Процесс = СоздатьПроцессИсполненияПоДействию(Действие);
		Если Процесс <> Неопределено И Процесс.Исполнители.Количество() > 0 Тогда
			ПроцессПоДействиям.Добавить(Процесс);
		КонецЕсли;	
				
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияОзнакомления") Тогда
		
		// не добавляем в ПроцессПоДействиям.    
		МассивИсключений = РегистрыСведений.УчастникиОзнакомлений.ИдентификаторыДействий(Действие.Ссылка);
		Справочники.ДействияОзнакомления.ЗаполнитьРегистрУчастниковОзнакомленияИВернутьКоличество(Действие.Ссылка, МассивИсключений);
		
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияСогласования") Тогда
		
		Процесс = СоздатьПроцессСогласованияПоДействию(Действие);
		
		Если Процесс.Исполнители.Количество() > 0 Тогда 
			ПроцессПоДействиям.Добавить(Процесс);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияПодписания") Тогда
		
		Процесс = СоздатьПроцессПодписанияПоДействию(Действие);
		
		ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;
		
		Если Процесс.Участники.Найти(ТочкиМаршрута.ОбеспечитьПодписание, "ТочкаМаршрута")
				<> Неопределено
			
			Или Процесс.Участники.Найти(ТочкиМаршрута.Подписать, "ТочкаМаршрута")
				<> Неопределено Тогда
			
			ПроцессПоДействиям.Добавить(Процесс);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПроцессПоДействиям;
	
 КонецФункции

// Создает и запускает процессов по действиям с новыми участникам.
// Параметры:
//  Действие - СправочникОбъект.ДействияИсполнения,
//             СправочникОбъект.ДействияОзнакомления,
//             СправочникОбъект.ДействияСогласования,
//             СправочникОбъект.ДействияПодписания
//
Процедура СоздатьИЗапуститьПроцессыПоИсполнениюДействияСНовымиУчастниками(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцессПоДействиям = СоздатьПроцессыПоИсполнениюДействияСНовымиУчастниками(Действие);
	
	Для Каждого ПроцессПоДействию Из ПроцессПоДействиям Цикл
		
		ПроцессПоДействию.Записать();
		РегистрыСведений.ПроцессыДействий.Добавить(ПроцессПоДействию.Ссылка, Действие.Ссылка);
		
		ПроверитьЗаполнениеПроцессаДляВыполнения(ПроцессПоДействию);
		
		СтартПроцессовСервер.СтартоватьПроцесс(ПроцессПоДействию);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает и возвращает объект процесса по действию.
//
// Параметры:
//  Действие - СправочникОбъект.ДействиеИсполнение - объект действие.
//  ИДУчастника - УникальныйИдентификатор - идентификатор участника, для которого нужно создать процесс.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс, Неопределено - процесс обработки.
//
// Возвращаемое значение:
//  БизнесПроцессОбъект.Рассмотрение
//
Функция СоздатьПроцессРассмотренияПоУчастникуДействия(Действие, ИДУчастника, ПроцессОбработки = Неопределено) Экспорт
	
	ПроцессОбъект = БизнесПроцессы.Рассмотрение.СоздатьБизнесПроцесс();
	СтруктураДляЗаполнения = ПроцессОбъект.СтруктураДанныхДляЗаполнения();
	
	ВедущаяЗадача = Неопределено;
	Если ПроцессОбработки <> Неопределено Тогда 
		ШаблонНаименования = НСтр("ru = 'Обработка действия ""%1"" участником ""%2""'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		НаименованиеЗадачи = СтрШаблон(
			ШаблонНаименования,
			Действие.Ссылка,
			ИДУчастника);
		ВедущаяЗадача = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
			НаименованиеЗадачи, ПроцессОбработки);
	КонецЕсли;
	
	ЗаполнитьСтруктуруДляПроцессаРассмотрения(
		СтруктураДляЗаполнения, Действие, ИДУчастника, ВедущаяЗадача);
	
	ПроцессОбъект.Заполнить(СтруктураДляЗаполнения);
	
	Возврат ПроцессОбъект;
	
КонецФункции

// Создает и возвращает объект процесса по действию.
//
// Параметры:
//  Действие - СправочникОбъект.ДействиеИсполнение - объект действие.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс, Неопределено - процесс обработки.
//
// Возвращаемое значение:
//  БизнесПроцессОбъект.Исполнение, Неопределено - Неопределено, если создать процесс не требуется.
//
Функция СоздатьПроцессИсполненияПоДействию(Действие, ПроцессОбработки = Неопределено) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ФункцияУчастника",
		Перечисления.ФункцииУчастниковИсполнения.Исполнитель);
	Отбор.Вставить("ВышестоящийУчастник", УникальныйИдентификаторПустой());
	
	Если Действие.Участники.НайтиСтроки(Отбор).Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПроцессОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
	СтруктураДляЗаполнения = ПроцессОбъект.СтруктураДанныхДляЗаполнения();
	
	ДопустимыеУчастники = ДопустимыеИсполнителиДействияИсполнения(Действие, ПроцессОбъект);
	Если Не ЕстьДопустимыеИсполнителиДействияИсполнения(ДопустимыеУчастники) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВедущаяЗадача = Неопределено;
	Если ПроцессОбработки <> Неопределено Тогда
		ШаблонНаименования = НСтр("ru = 'Обработка действия ""%1""'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, Действие.Ссылка);
		ВедущаяЗадача = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
			НаименованиеЗадачи, ПроцессОбработки);
	КонецЕсли;
	
	ЗаполнитьСтруктуруДляПроцессаИсполнения(
		СтруктураДляЗаполнения, Действие, ДопустимыеУчастники, ВедущаяЗадача);
	
	ПроцессОбъект.Заполнить(СтруктураДляЗаполнения);
	
	Возврат ПроцессОбъект;
	
КонецФункции

// Создает и возвращает объект процесса по действию.
//
// Параметры:
//  Действие - СправочникОбъект.ДействиеИсполнение - объект действие.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс, Неопределено - процесс обработки.
//
// Возвращаемое значение:
//  БизнесПроцессОбъект.Исполнение, Неопределено - Неопределено, если создать процесс не требуется.
//
Функция СоздатьПроцессИсполненияПоПунктуДействия(Действие, ИдентификаторПункта, ПроцессОбработки = Неопределено) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ФункцияУчастника",
		Перечисления.ФункцииУчастниковИсполнения.Исполнитель);
	Отбор.Вставить("ИдентификаторПункта", ИдентификаторПункта);
	
	Если Действие.Участники.НайтиСтроки(Отбор).Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Строка = Действие.Пункты.Найти(ИдентификаторПункта, "Идентификатор");
	ОписаниеПункта = ""; НомерПункта = "";
	Если Строка <> Неопределено Тогда
		ОписаниеПункта = Строка.Описание;
		НомерПункта = Строка.Номер;
	КонецЕсли;
	
	ВедущаяЗадача = Неопределено;
	Если ПроцессОбработки <> Неопределено Тогда
		ШаблонНаименования = НСтр("ru = 'Обработка действия по пункту ""%1""'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, НомерПункта);
		ВедущаяЗадача = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
			НаименованиеЗадачи, ПроцессОбработки);
	КонецЕсли;
	
	ПроцессОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
	СтруктураДляЗаполнения = ПроцессОбъект.СтруктураДанныхДляЗаполнения();
	
	ДопустимыеУчастники = ДопустимыеИсполнителиДействияИсполнения(Действие, ПроцессОбъект, ИдентификаторПункта);
	
	ЗаполнитьСтруктуруДляПроцессаИсполнения(
		СтруктураДляЗаполнения, Действие, ДопустимыеУчастники, ВедущаяЗадача, ИдентификаторПункта);	
	
	ПроцессОбъект.Заполнить(СтруктураДляЗаполнения);
	
	Возврат ПроцессОбъект;
	
КонецФункции

// Обновляет данные процессов по действию.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект - объект действие.
//
Процедура ОбновитьПроцессыПоДействию(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	
	Если ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияОзнакомления")
		И АктивныеПроцессы.Количество() = 0 Тогда // новое ознакомление
		ОбновитьПроцессПоДействиюОзнакомления(Действие);
		Возврат;
	КонецЕсли;	
	
	Если АктивныеПроцессы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	Если Действие.Участники.Количество() = 0 И Не НагрузочноеТестирование.ЭтоНагрузочноеТестирование() Тогда
		ВызватьИсключение
			НСтр("ru = 'В действии должен быть хотя бы один участник.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;

	Если ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияИсполнения") Тогда
		
		ПроцессОбработки = Неопределено;
				
		РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(Действие.Ссылка);
		Если Не ЗначениеЗаполнено(РезультатДействия) Тогда
			ПроцессОбработки = РаботаСПроцессамиПоОбработкамОбъектов.ПроцессОбработкиПоДействию(
				Действие.Ссылка);
		КонецЕсли;
		
		ИмяДействия = "";
		ПроцессОбработкиОбъект = Неопределено;
		ОбработчикСхемы = Неопределено;
		Если ПроцессОбработки <> Неопределено Тогда
			ИмяДействия = РаботаСПроцессамиПоОбработкамОбъектов.ИмяЭлементаСхемыОбработкиПоДействию(
				Действие.Ссылка);
			ПроцессОбработкиОбъект = ПроцессОбработки.ПолучитьОбъект();
			ОбработчикСхемы = ПроцессОбработкиОбъект.ОбработчикСхемыПроцесса();
		КонецЕсли;
		СостояниеИДатаСостояния = РегистрыСведений.СостоянияДействий.СостояниеИДатаСостоянияДействия(Действие.Ссылка);
		
		Если Действие.ПоПунктам Тогда
			ПрерватьПроцессыИсключенныхИзДействияПунктов(Действие);
			
			// Стартуем новые процессы для новых пунктов
			НовыеПроцессыПоДействию = ПроцессыИсполненияПоДействиюСПунктами(Действие, ПроцессОбработки);
			Для Каждого НовыйПроцессПоДействию Из НовыеПроцессыПоДействию Цикл
				
				Если ТипЗнч(НовыйПроцессПоДействию) = Тип("Структура") Тогда
					ПроцессПоДействию = НовыйПроцессПоДействию.ПроцессИсполнения;
					
					// Обновление задач отключаем - будет обновление в СтартПроцессовСервер.СтартоватьПроцесс(ПроцессПоДействию).
					ПроцессПоДействию.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
					
					ПроцессПоДействию.Записать();
					РегистрыСведений.ПроцессыДействий.Добавить(
						ПроцессПоДействию.Ссылка, Действие.Ссылка, НовыйПроцессПоДействию.ИдентификаторПункта);
				Иначе
					ПроцессПоДействию = НовыйПроцессПоДействию;
					
					// Обновление задач отключаем - будет обновление в СтартПроцессовСервер.СтартоватьПроцесс(ПроцессПоДействию).
					ПроцессПоДействию.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
					
					ПроцессПоДействию.Записать();
					РегистрыСведений.ПроцессыДействий.Добавить(ПроцессПоДействию.Ссылка, Действие.Ссылка);
				КонецЕсли;
				
				// Если есть отложенный запуск действия, то ставим его и для нового созданного процесса
				Если СостояниеИДатаСостояния.Состояние = Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск Тогда
					УстановитьЗадержкуНачалаВыполнения(Действие, ПроцессПоДействию, СостояниеИДатаСостояния.Дата);
				КонецЕсли;
				ЗапуститьПроцессПоДействию(Действие.Ссылка, ПроцессПоДействию);
				
				Если ПроцессОбработкиОбъект <> Неопределено Тогда
					ПроцессОбработкиОбъект.ДобавитьЗадачуОбработкиЭлемента(
						ИмяДействия, ПроцессПоДействию.ВедущаяЗадача, ОбработчикСхемы);
				КонецЕсли;
			КонецЦикла;
			Если ПроцессОбработкиОбъект <> Неопределено Тогда
				ПроцессОбработкиОбъект.ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
			КонецЕсли;	
			
			// Обновим уже существующие процессы
			ОбновитьПроцессыИсполненияПоДействиюСПунктами(Действие);
			
		Иначе
			ПрерватьПроцессыИсключенныхРассматривающихИзДействия(Действие);
			
			ПроцессыРассмотрения = СоздатьПроцессыРассмотренияПоДействию(Действие, ПроцессОбработки);
			Для Каждого ПроцессПоДействию Из ПроцессыРассмотрения Цикл
				
				// Обновление задач отключаем - будет обновление в СтартПроцессовСервер.СтартоватьПроцесс(ПроцессПоДействию).
				ПроцессПоДействию.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
				
				ПроцессПоДействию.Записать();
				РегистрыСведений.ПроцессыДействий.Добавить(ПроцессПоДействию.Ссылка, Действие.Ссылка);
				
				ПроверитьЗаполнениеПроцессаДляВыполнения(ПроцессПоДействию);
				
				Если СостояниеИДатаСостояния.Состояние = Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск Тогда
					УстановитьЗадержкуНачалаВыполнения(Действие, ПроцессПоДействию, СостояниеИДатаСостояния.Дата);
				КонецЕсли;
				ЗапуститьПроцессПоДействию(Действие.Ссылка, ПроцессПоДействию);
				
				Если ПроцессОбработкиОбъект <> Неопределено Тогда
					ПроцессОбработкиОбъект.ДобавитьЗадачуОбработкиЭлемента(
						ИмяДействия, ПроцессПоДействию.ВедущаяЗадача, ОбработчикСхемы);
				КонецЕсли;
					
			КонецЦикла;
		
			ОбновитьПроцессыРассмотренияПоДействию(Действие);
			ОбновитьПроцессИсполненияПоДействию(
				Действие, ПроцессОбработкиОбъект, ИмяДействия, ОбработчикСхемы, СостояниеИДатаСостояния);
			ОбновитьПроцессыПоПодчиненнымИсполнениямДействия(Действие);
			
			Если ПроцессОбработкиОбъект <> Неопределено Тогда
				ПроцессОбработкиОбъект.ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
			КонецЕсли;
			
		КонецЕсли;
		
		// Если после обновления процессов по действию, активных процессов не осталось,
		// то обновляем результат действия и продолжаем маршрутизацию процесса обработки.
		
		АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(
			Действие.Ссылка, Истина);
		
		Если АктивныеПроцессы.Количество() = 0 Тогда
			
			Справочники.ДействияИсполнения.ОбновитьРезультатВыполнения(Действие.Ссылка);
			
			Если ПроцессОбработкиОбъект <> Неопределено Тогда
				ПроцессОбработкиОбъект.ПродолжитьМаршрутизациюПослеЗавершенияОбработкиЭлемента(
					ИмяДействия);
			КонецЕсли;
							
		КонецЕсли;		
			
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияОзнакомления") Тогда
		ОбновитьБизнесПроцессПоДействиюОзнакомления(Действие);	// старый код, для бизнес процесса
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияПодписания") Тогда
		ОбновитьПроцессПоДействиюПодписания(Действие);
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияРегистрации") Тогда
		ОбновитьПроцессПоДействиюРегистрация(Действие);
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияСогласования") Тогда
		ОбновитьПроцессПоДействиюСогласования(Действие);
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияУтверждения") Тогда
		ОбновитьПроцессПоДействиюУтверждения(Действие);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение процесса для выполнения.
// Если при текущем заполнении настроек он не готов выполняться,
// то вызывается исключение с соответствующим описанием.
//
// Это низкоуровневая проверка, текст исключения не недолжен видеть
// пользователи. Предполагается, что интерфейсах действия
// будет выполнять подобная проверка и будут выводиться соответствующие
// сообщения/предупреждения.
// 
//
// Параметры:
//  Процесс - БизнесПроцессОбъект - объект процесса по действию.
// 
Процедура ПроверитьЗаполнениеПроцессаДляВыполнения(Процесс) Экспорт
	
	НезаполненныеПоля = Процесс.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	
	Если НезаполненныеПоля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс.Ссылка);
	
	ТекстИсключения = СтрШаблон(
		НСтр("ru = 'Процесс по действию заполнен не корректно.
		|Действие: %1
		|В процессе не заполнены обязательные поля:
		|%2'"),
		ПолучитьНавигационнуюСсылку(Действие),
		СтрСоединить(НезаполненныеПоля, ", "));
	
	ВызватьИсключение ТекстИсключения;
	
КонецПроцедуры

// Возвращает результат выполнения задачи из параметрам выполнения.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка
//  ПараметрыВыполнения - Структура, при помещении заадчи в очередь фонового выполнения
//
// Возвращаемое значение:
//  Функция участника
//
Функция РезультатВыполненияЗадачиПоПараметрамВыполнения(ТочкаМаршрута, ПараметрыВыполнения) Экспорт
	
	Если ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда
		Возврат ПараметрыВыполнения.РезультатРегистрации;
	
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		Возврат ПараметрыВыполнения.РезультатСогласования;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		Возврат ПараметрыВыполнения.РезультатУтверждения;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать
		Или ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание Тогда
		
		Возврат ПараметрыВыполнения.РезультатПодписания;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции	

// Возвращает исполнителя задачи по параметрам выполнения.
// 
// Параметры:
//  ПараметрыВыполнения - Структура, при помещении заадчи в очередь фонового выполнения
//  
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники
//
Функция ИсполнительЗадачиПоПараметраВыполнения(ПараметрыВыполнения) Экспорт
	
	ИсполнительЗадачи = Сотрудники.ОсновнойСотрудник();
	
	Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
		И ЗначениеЗаполнено(ПараметрыВыполнения.ИсполнительЗадачи) Тогда
			
		ИсполнительЗадачи = ПараметрыВыполнения.ИсполнительЗадачи;
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство("ФактическийИсполнительЗадачи")
		И ЗначениеЗаполнено(ПараметрыВыполнения.ФактическийИсполнительЗадачи) Тогда
			
		ИсполнительЗадачи = ПараметрыВыполнения.ФактическийИсполнительЗадачи;
	КонецЕсли;
	
	Возврат ИсполнительЗадачи;
	
КонецФункции

// Возвращает результат выполнения участника действия по результату выполнения задачи.
//
// Параметры:
//  ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка
//  Результат - Неопределено,
//              ПеречислениеСсылка.РезультатыУтверждения,
//              ПеречислениеСсылка.РезультатыСогласования,
//              ПеречислениеСсылка.РезультатыРегистрации,
//
// Возвращаемое значение:
//  Неопределено,
//  ПеречислениеСсылка.РезультатыУтверждения,
//  ПеречислениеСсылка.РезультатыСогласования,
//  ПеречислениеСсылка.РезультатыРегистрации,
//  ПеречислениеСсылка.РезультатыИсполнения,
//  ПеречислениеСсылка.РезультатыРассмотрения,
//  ПеречислениеСсылка.РезультатыОзнакомления
//
Функция РезультатВыполненияУчастникаДействияПоРезультатуЗадачи(
	ФункцияУчастника, ТочкаМаршрута, Результат) Экспорт
	
	Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение
		Или ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
		
		Возврат Перечисления.РезультатыИсполнения.Исполнено;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		
		Возврат Перечисления.РезультатыРассмотрения.Рассмотрено;

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		
		Возврат Перечисления.РезультатыИсполнения.Исполнено;
		
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться Тогда
		
		Возврат Перечисления.РезультатыОзнакомления.Ознакомлен;
		 		 	
	ИначеЕсли ТипЗнч(Результат) = Тип("ПеречислениеСсылка.РезультатыПроцессаПодписания") Тогда
		
		РезультатыПроцесса = Перечисления.РезультатыПроцессаПодписания;
		РезультатыДействия = Перечисления.РезультатыПодписания;
		
		ФункцииУчастников = Перечисления.ФункцииУчастниковПодписания;
		
		Если ФункцияУчастника = ФункцииУчастников.Подписывающий Тогда
		
			РезультатыПроцессаИДействияПодписания = Новый Соответствие();
			РезультатыПроцессаИДействияПодписания[РезультатыПроцесса.Подписано] =
				РезультатыДействия.Подписано;
			РезультатыПроцессаИДействияПодписания[РезультатыПроцесса.НеПодписано] =
				РезультатыДействия.НеПодписано;
			
			Возврат РезультатыПроцессаИДействияПодписания[Результат];
			
		ИначеЕсли ФункцияУчастника = ФункцииУчастников.ОбеспечивающийПодписание Тогда
			
			Возврат Перечисления.РезультатыПодписания.Выполнено;
			
		КонецЕсли;
				
	ИначеЕсли ЗначениеЗаполнено(Результат) Тогда
		
		Возврат Результат;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Записывает сведения об участнике действия.
//
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Ссылка на действие, по которому необходимо записать сведения.
//	Участник - УникальныйИдентификатор - Уникальный идентификатор участника действия.
//	Сведения - Структура - Структура, содержащая сведения об участнике, которые необходимо записать.
//
Процедура ЗаписатьСведенияОбУчастникеДействия(Действие, ИдентификаторУчастника, Участник, ФактическийУчастник,
	СрокРассчитанный = Неопределено, ДатаНачала = Неопределено) Экспорт
	
	Сведения = Новый Структура(
		"Действие, ИдентификаторУчастника, ФактическийИсполнитель, СрокРассчитанный, ДатаНачала",
		Действие, 
		ИдентификаторУчастника,
		ФактическийУчастник, 
		СрокРассчитанный,
		ДатаНачала);
	
	РегистрыСведений.СведенияОбУчастникахДействий.ЗаписатьСведения(
		Действие, ИдентификаторУчастника, Сведения);
	
КонецПроцедуры

// Заполнит структуру возврата вместо диалога настроек процесса
//
//Параметры
//	Действие - ссылка на действие
//	Процесс - БизнесПроцесс.Ссылка
//  РезультатЗавершения - Структура
//
Процедура ЗаполнитьРезультатНастроекПроцессаИСброситьРезультат(
	Действие, Процесс, РезультатЗавершения) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		Участники = ДействияСервер.ВсеУчастникиДействия(Действие);
		
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Процесс);
		ИдентификаторыУчастниковПроцесса = МенеджерПроцесса.ИдентификаторыТекущихУчастниковПроцесса(Процесс);
		КэшПоискаУчастниковПроцесса = Новый Соответствие;
		Для Каждого ИдентификаторУчастника Из ИдентификаторыУчастниковПроцесса Цикл
			КэшПоискаУчастниковПроцесса[ИдентификаторУчастника] = Истина;
		КонецЦикла;
		
		Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
			Индекс = Участники.Количество() - 1;
			Пока Индекс >= 0 Цикл
				Если КэшПоискаУчастниковПроцесса[Участники[Индекс].Идентификатор] = Неопределено
					И КэшПоискаУчастниковПроцесса[Участники[Индекс].ВышестоящийУчастник] = Неопределено Тогда
					
					Участники.Удалить(Индекс);
				КонецЕсли;
				Индекс = Индекс - 1;
			КонецЦикла;
		Иначе		
			Индекс = Участники.Количество() - 1;
			Пока Индекс >= 0 Цикл
				Если КэшПоискаУчастниковПроцесса[Участники[Индекс].Идентификатор] = Неопределено Тогда
					Участники.Удалить(Индекс);
				КонецЕсли;
				Индекс = Индекс - 1;
			КонецЦикла;
		КонецЕсли;
		
		ДействияСервер.СброситьРезультатыВыполнения(Действие, Участники);
		
		ПроцессОбъект = Процесс.ПолучитьОбъект();
		ПроцессОбъект.ЗаполнитьРезультатНастроекПроцесса(РезультатЗавершения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет настройки исполнения при процессе рассмотрения по настройкам
// подчиненного исполнения в действии исполнение.
//
// Параметры:
//  НастройкиИсполненияПроцесса - см. БизнесПроцессы.Рассмотрение.СтруктураНастройкиИсполненияОзнакомленияПроцесса
//  ПодчиненноеИсполнение - см. Справочники.ДействияИсполнения.СтруктураПодчиненногоИсполнения
//  Действие - СправочникСсылка.ДействияИсполнения
//
Процедура ЗаполнитьНастройкиИсполненияПроцессаПоПодчиненномуИсполнениюДействия(
	НастройкиИсполненияПроцесса, ПодчиненноеИсполнение, Действие) Экспорт
	
	СтрокаПервогоИсполнителяВДействии = Неопределено;
	СтрокаПроверяющегоВДействии = Неопределено;
	
	Для Каждого СтрокаУчастника Из ПодчиненноеИсполнение Цикл
		
		Если СтрокаУчастника.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель Тогда
			
			СтрокаИсполнителя = НастройкиИсполненияПроцесса.ИсполнителиИсполнения.Добавить();
			СтрокаИсполнителя.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
			
			СтрокаИсполнителя.ИдентификаторИсполнителя = СтрокаУчастника.Идентификатор;
			СтрокаИсполнителя.Исполнитель = СтрокаУчастника.Участник;
			
			СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения = СтрокаУчастника.ВариантУстановкиСрока;
			СтрокаИсполнителя.СрокИсполнения = СтрокаУчастника.Срок;
			СтрокаИсполнителя.СрокИсполненияДни = СтрокаУчастника.СрокДни;
			СтрокаИсполнителя.СрокИсполненияЧасы = СтрокаУчастника.СрокЧасы;
			СтрокаИсполнителя.СрокИсполненияМинуты = СтрокаУчастника.СрокМинуты;
			СтрокаИсполнителя.Ответственный = СтрокаУчастника.Ответственный;
			СтрокаИсполнителя.Описание = СтрокаУчастника.ОписаниеОсобое;
			
			Если СтрокаПервогоИсполнителяВДействии = Неопределено Тогда
				СтрокаПервогоИсполнителяВДействии = СтрокаУчастника;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаПроверяющегоВДействии = Неопределено
			И СтрокаУчастника.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			
			СтрокаПроверяющегоВДействии = СтрокаУчастника;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаПроверяющегоВДействии <> Неопределено Тогда
		НастройкиИсполненияПроцесса.ПроверяющийИсполнения = 
			СтрокаПроверяющегоВДействии.Участник;
		
		НастройкиИсполненияПроцесса.ИдентификаторПроверяющего = 
			СтрокаПроверяющегоВДействии.Идентификатор;
		
		НастройкиИсполненияПроцесса.ВариантУстановкиСрокаОбработкиРезультатовИсполнения = 
			СтрокаУчастника.ВариантУстановкиСрока;
		
		НастройкиИсполненияПроцесса.СрокОбработкиРезультатовИсполнения = СтрокаПроверяющегоВДействии.Срок;
		НастройкиИсполненияПроцесса.СрокОбработкиРезультатовДниИсполнения = СтрокаПроверяющегоВДействии.СрокДни;
		НастройкиИсполненияПроцесса.СрокОбработкиРезультатовЧасыИсполнения = СтрокаПроверяющегоВДействии.СрокЧасы;
		НастройкиИсполненияПроцесса.СрокОбработкиРезультатовМинутыИсполнения = СтрокаПроверяющегоВДействии.СрокМинуты;
	КонецЕсли;
	
	Если СтрокаПервогоИсполнителяВДействии <> Неопределено Тогда
		НастройкиИсполненияПроцесса.НаименованиеИсполнения = 
			СтрокаПервогоИсполнителяВДействии.НаименованиеЗадачи;
		
		НастройкиИсполненияПроцесса.ОписаниеИсполнения = 
			СтрокаПервогоИсполнителяВДействии.Описание;
	КонецЕсли;
	
	НастройкиИсполненияПроцесса.ВажностьИсполнения = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Важность");
	
	НастройкиИсполненияПроцесса.ВариантИсполнения = 
		Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	
КонецПроцедуры

// Возвращает параметры для изменения участников действия по задаче.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача процесса.
//  ФактическийИсполнитель - СправочникСсылка.Сотрудники
//  ВыбранныйИсполнитель - СправочникСсылка.Сотрудники, Неопределено - исполнитель, явно указанный при выполнении задачи.
//  ФактическийИсполнительПолный - СправочникСсылка.ФактическиеИсполнители, Неопределено - фактический исполнитель, явно указанный при выполнении задачи. 
// 	
// Возвращаемое значение:
//  Массив
//   * Структура - см. ДействияСервер.СтруктураПараметровИзмененияДанныхДействия
// 	
Функция ПараметрыИзмененияУчастниковДействияПоЗадаче(Действие, Задача,
	ФактическийИсполнитель = Неопределено, ВыбранныйИсполнитель = Неопределено, ФактическийИсполнительПолный = Неопределено) Экспорт
	
	ПараметрыИзмененияУчастников = Новый Массив;
	
	НомерИтерации = НомерИтерации(Задача.БизнесПроцесс);	
		
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
		
		СтрокиУчастниковДействия = СтрокиУчастниковДействияПодписанияПоЗадаче(Действие, Задача);
		
		ЕстьОбеспечивающийПодписание = Ложь;
		
		Для Каждого СтрокаУчастника Из СтрокиУчастниковДействия Цикл
			
			ПараметрыИзменения = ДействияСервер.СтруктураПараметровИзмененияДанныхДействия();
			ПараметрыИзменения.Функция = СтрокаУчастника.ФункцияУчастника;
			ПараметрыИзменения.ИдентификаторУчастника = СтрокаУчастника.Идентификатор;
			ПараметрыИзменения.ИдентификаторПункта = СтрокаУчастника.ИдентификаторЭтапа;
			ПараметрыИзменения.Участник = СтрокаУчастника.Участник;
			ПараметрыИзменения.НомерИтерации = НомерИтерации;
			Если ФактическийИсполнительПолный <> Неопределено Тогда
				ПараметрыИзменения.ФактическийИсполнительПолный = ФактическийИсполнительПолный;
			КонецЕсли;
			ПараметрыИзменения.СрокРассчитанный = Задача.СрокИсполнения;
			ПараметрыИзменения.ДатаНачала = Задача.Дата;
			
			ПараметрыИзмененияУчастников.Добавить(ПараметрыИзменения);
			
			Если СтрокаУчастника.ФункцияУчастника = 
				Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда
				
				ЕстьОбеспечивающийПодписание = Истина;
				Прервать;
			КонецЕсли;
					
		КонецЦикла;
		
		// Заполняем фактического исполнителя в параметрах.
		Если ФактическийИсполнитель <> Неопределено Тогда
			Для Каждого ПараметрыИзменения Из ПараметрыИзмененияУчастников Цикл
				Если ЕстьОбеспечивающийПодписание
					И ПараметрыИзменения.Функция = 
					Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
					
					// Если выполнение задач в очереди, то нужно брать фактического исполнителя задачи, т.к. у фонового нет Сотрудника.
					ОсновнойСотрудник = Сотрудники.ОсновнойСотрудник();
					Если Не ЗначениеЗаполнено(ОсновнойСотрудник) Тогда 
						ОсновнойСотрудник = ФактическийИсполнитель;
					КонецЕсли;
					
					Если ВыбранныйИсполнитель <> Неопределено Тогда
						ПараметрыИзменения.ФактическийИсполнитель = ВыбранныйИсполнитель;
						НовыйФактическийИсполнитель = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
							ПараметрыИзменения.Участник, 
							ВыбранныйИсполнитель, 
							ВыбранныйИсполнитель, 
							ОсновнойСотрудник);
						
					Иначе
						ПараметрыИзменения.ФактическийИсполнитель = ПараметрыИзменения.Участник;
						
						Если ТипЗнч(ПараметрыИзменения.ФактическийИсполнитель) = 
							Тип("СправочникСсылка.ПолныеРоли") Тогда
							
							ИсполнителиРоли = 
								РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(
								ПараметрыИзменения.ФактическийИсполнитель);
							
							Если ИсполнителиРоли.Количество() = 1 Тогда
								ПараметрыИзменения.ФактическийИсполнитель = ИсполнителиРоли[0];
							Иначе
								ТекстИсключения = НСтр("ru = 'Не удалось определить подписывающего. 
									|Он задан ролью, которую исполняют несколько сотрудников.
									|Обратитесь к ответственному за документ или администратору для указания конкретного подписывающего (сотрудника) в обработке.'");
								
								ВызватьИсключение ТекстИсключения;	
							КонецЕсли;
							
							НовыйФактическийИсполнитель = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
								ПараметрыИзменения.Участник, 
								ПараметрыИзменения.ФактическийИсполнитель, 
								ПараметрыИзменения.ФактическийИсполнитель, 
								ОсновнойСотрудник);
						КонецЕсли;
					КонецЕсли;
					
					ПараметрыИзменения.ФактическийИсполнительПолный = НовыйФактическийИсполнитель;
				Иначе
					ПараметрыИзменения.ФактическийИсполнитель = ФактическийИсполнитель;
					ПараметрыИзменения.ФактическийИсполнительПолный = ФактическийИсполнительПолный;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
					
	Иначе
		ПараметрыИзменения = ДействияСервер.СтруктураПараметровИзмененияДанныхДействия();
		ПараметрыИзменения.Функция = ФункцияПоТочкеМаршрута(Задача.ТочкаМаршрута);
		ПараметрыИзменения.ИдентификаторУчастника = Задача.ИдентификаторИсполнителя;
		
		Если ДействияКлиентСервер.ЭтоДействиеСЭтапами(Действие) Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
			ИдентификаторЭтапа = Менеджер.ИдентификаторЭтапаУчастника(Действие, Задача.ИдентификаторИсполнителя, Ложь);
			ПараметрыИзменения.ИдентификаторПункта = ИдентификаторЭтапа;
		КонецЕсли;

		Если ДействияСервер.ЭтоДействиеПоПунктам(Действие) Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
			ИдентификаторПункта = Менеджер.ИдентификаторПунктаУчастника(Действие, Задача.ИдентификаторИсполнителя, Ложь);
			ПараметрыИзменения.ИдентификаторПункта = ИдентификаторПункта;
		КонецЕсли;
		
		ПараметрыИзменения.Участник = Задача.Исполнитель;
		Если ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
			ПараметрыИзменения.Участник = Задача.РольИсполнителя;
		КонецЕсли;
				
		ПараметрыИзменения.НомерИтерации = НомерИтерации;
			
		Если ФактическийИсполнитель <> Неопределено Тогда
			ПараметрыИзменения.ФактическийИсполнитель = ФактическийИсполнитель;
		КонецЕсли;
		
		Если ФактическийИсполнительПолный <> Неопределено Тогда
			ПараметрыИзменения.ФактическийИсполнительПолный = ФактическийИсполнительПолный;
		КонецЕсли;
		
		ПараметрыИзменения.СрокРассчитанный = Задача.СрокИсполнения;	
		ПараметрыИзменения.ДатаНачала = Задача.Дата;
		
		ПараметрыИзмененияУчастников.Добавить(ПараметрыИзменения);
		
	КонецЕсли;
		
	Возврат ПараметрыИзмененияУчастников;
	
КонецФункции

// Возвращает идентификатор участника действия по перенаправляемой задачи.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия 
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя - задача процесса.
// 
// Возвращаемое значение:
//  УникальныйИдентификатор
//
Функция ИдентификаторУчастникаДействияДляПеренаправленияПоЗадаче(Действие, ЗадачаПроцесса) Экспорт
	
	ИдентификаторУчастника = УникальныйИдентификаторПустой();
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
		
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЗадачаПроцесса, "ИдентификаторИсполнителя");
		
		СтрокиУчастников = СтрокиУчастниковДействияПодписанияПоЗадаче(Действие, РеквизитыЗадачи);
		Если СтрокиУчастников.Количество() = 1 Тогда
			ИдентификаторУчастника = СтрокиУчастников[0].Идентификатор;
		Иначе
			Для Каждого СтрокаУчастника Из СтрокиУчастников Цикл
				Если СтрокаУчастника.ВышестоящийУчастник
					= РеквизитыЗадачи.ИдентификаторИсполнителя Тогда
					
					ИдентификаторУчастника = СтрокаУчастника.Идентификатор;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	Иначе
		ИдентификаторУчастника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЗадачаПроцесса, "ИдентификаторИсполнителя");
	КонецЕсли;
	
	Возврат ИдентификаторУчастника;
	
КонецФункции

// Возвращает отрицательные результаты действий.
//
// Возвращаемое значение:
//  Массив
//   * ОпределяемыйТип.РезультатыВыполненияДействий
//
Функция ОтрицательныеРезультатыДействий() Экспорт
	
	РезультатыДействий = Новый Массив;
	РезультатыДействий.Добавить(Перечисления.РезультатыПодписания.НеПодписано);
	РезультатыДействий.Добавить(Перечисления.РезультатыРегистрации.НеЗарегистрировано);
	РезультатыДействий.Добавить(Перечисления.РезультатыСогласования.НеСогласовано);
	РезультатыДействий.Добавить(Перечисления.РезультатыУтверждения.НеУтверждено);
	
	Возврат РезультатыДействий;
	
КонецФункции

// Добавляет сведения о переносе срока в доп. свойства действия.
// 
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//  ПричинаПереносаСрока - Строка
//  ЗаявкаНаПеренос - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач
//
Процедура ДобавитьСведенияОПереносеСрокаВДопСвойстваДействия(
	Действие, ПричинаПереносаСрока, ЗаявкаНаПеренос) Экспорт
	
	Действие.ДополнительныеСвойства.Вставить("ПричинаПереносаСрока", ПричинаПереносаСрока);
	Действие.ДополнительныеСвойства.Вставить("ЗаявкаНаПеренос", ЗаявкаНаПеренос);
	
КонецПроцедуры

// Возвращает сведения о переносе срока из доп свойств действия.
// 
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
// 
// Возвращаемое значение:
//  Структура
//   * ПричинаПереносаСрока - Строка
//   * ЗаявкаНаПеренос - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач
// 
Функция СведенияОПереносеСрокаИзДопСвойствДействия(Действие) Экспорт
	
	СведенияОПереносеСрока = Новый Структура();
	СведенияОПереносеСрока.Вставить("ПричинаПереносаСрока", "");
	СведенияОПереносеСрока.Вставить("ЗаявкаНаПеренос",
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ПустаяСсылка());
	
	ЗаполнитьЗначенияСвойств(СведенияОПереносеСрока, Действие.ДополнительныеСвойства);
	
	Возврат СведенияОПереносеСрока;
	
КонецФункции

// Обработчик изменения задержки начала выполнения активного действия.
// В случае очистки задержки, все активные процессы ожидающие старта, будут запущены в работу.
// 
// Параметры:
//  ДействиеОбъект - ОпределяемыйТип.ДействияОбъект - Действие, в котором поменялась Отложенное начало выполнения
//  ДополнительныеСвойства - Структура - содержащая дополнительные свойства записи.
//
Процедура ПриИзмененииОтложенногоНачалаВыполненияДействия(ДействиеОбъект, ДополнительныеСвойства) Экспорт
	
	Если (Не ДополнительныеСвойства.Свойство("ОтложенноеНачалоВыполнения")
			Или ДополнительныеСвойства.ОтложенноеНачалоВыполнения = ДействиеОбъект.ОтложенноеНачалоВыполнения)
		И (Не ДополнительныеСвойства.Свойство("ОтложенноеВыполнениеДата")
			Или ДополнительныеСвойства.ОтложенноеВыполнениеДата = ДействиеОбъект.ОтложенноеВыполнениеДата) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИДатаСостояния = РегистрыСведений.СостоянияДействий.СостояниеИДатаСостоянияДействия(ДействиеОбъект.Ссылка);
	Если СостояниеИДатаСостояния.Состояние <> Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск Тогда
		Возврат;
	КонецЕсли;
	ДатаОтсчета = СостояниеИДатаСостояния.Дата;     
	
	Если ТипЗнч(ДействиеОбъект) = Тип("СправочникОбъект.ДействияОзнакомления") Тогда
		ПриИзмененииОтложенногоНачалаВыполненияДействияОзнакомления(ДействиеОбъект, ДатаОтсчета);
		Возврат;
	КонецЕсли;	
	
	ПроцессыПоДействию = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(ДействиеОбъект.Ссылка, Истина);
	НачатьТранзакцию();
	Попытка
		Если ЗначениеЗаполнено(ДействиеОбъект.ОтложенноеНачалоВыполнения)
			Или ЗначениеЗаполнено(ДействиеОбъект.ОтложенноеВыполнениеДата) Тогда
			// Поменяем дату отложенного старта, в случае ее изменения.
			Для Каждого ПроцессПоДействию Из ПроцессыПоДействию Цикл
				УстановитьЗадержкуНачалаВыполнения(ДействиеОбъект, ПроцессПоДействию, ДатаОтсчета);
			КонецЦикла;
		Иначе
			Для Каждого ПроцессПоДействию Из ПроцессыПоДействию Цикл
				РегистрыСведений.НастройкиОтложеногоСтартаПроцессов.Удалить(ПроцессПоДействию);
				ПроцессОбъект = ПроцессПоДействию.ПолучитьОбъект();
				Если Не ПроцессОбъект.Стартован Тогда
					ПроцессОбъект.Старт();
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось записать действие, по причине: %1'"), 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Запускает процесс по действию, с учетом настроек отложенного начала выполнения действий.
// Если настроен отложенный запуск, то процесс не стартует.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Ссылка на Действие
//  ПроцессПоДействию - ОпределяемыйТип.ПроцессДействияОбъект - Стартуемый по действию ПроцессОбъект
Процедура ЗапуститьПроцессПоДействию(Действие, ПроцессПоДействию) Экспорт
	
	ПроверитьЗаполнениеПроцессаДляВыполнения(ПроцессПоДействию);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеНачалоВыполненияДействий") Тогда
		НастройкаОтложеногоСтарта = 
			РегистрыСведений.НастройкиОтложеногоСтартаПроцессов.ПолучитьСведенияОЗапускеПроцесса(
			ПроцессПоДействию.Ссылка);
		Если ЗначениеЗаполнено(НастройкаОтложеногоСтарта) Тогда
			
			ПроцессПоДействию.ОтложенныйСтарт();
			РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
				Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтартПроцессовСервер.СтартоватьПроцесс(ПроцессПоДействию);
	
КонецПроцедуры

// Обновляет данные при изменении даты отложенного старта
// 
// Параметры:
//  ДействиеОбъект - СправочникОбъект.ДействияОзнакомления - объект действия
//  ДатаОтсчета - Дата - дата отсчета относительной задержки выполнения.
Процедура ПриИзмененииОтложенногоНачалаВыполненияДействияОзнакомления(ДействиеОбъект, ДатаОтсчета)
	
	Действие = ДействиеОбъект.Ссылка;
	НачатьТранзакцию();
	Попытка
		Если ЗначениеЗаполнено(ДействиеОбъект.ОтложенноеНачалоВыполнения)
			Или ЗначениеЗаполнено(ДействиеОбъект.ОтложенноеВыполнениеДата) Тогда
			
			// Поменяем дату отложенного старта, в случае ее изменения.
			РаботаСПроцессамиПоОбработкамОбъектовСобытия.УстановитьЗадержкуНачалаВыполненияОзнакомления(
				ДействиеОбъект, ДатаОтсчета);
			
		Иначе
			
			РегистрыСведений.НастройкиОтложенногоНачалаВыполненияДействий.Удалить(Действие);
			
			// стартовать действие - уже есть служебная задача.
			
			РаботаСПроцессамиПоОбработкамОбъектовСобытия.СтартоватьДействиеОзнакомления(Действие);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось записать действие, по причине: %1'"), 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СозданиеПроцессов

// Создает и возвращает объект процесса по действию.
//
// Параметры:
//  Действие - СправочникОбъект.ДействиеСогласование - объект действие.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс, Неопределено - процесс обработки.
//
// Возвращаемое значение:
//  БизнесПроцессОбъект.Согласование - процесс по действию.
//
Функция СоздатьПроцессСогласованияПоДействию(Действие, ПроцессОбработки = Неопределено)
	
	ПроцессОбъект = БизнесПроцессы.Согласование.СоздатьБизнесПроцесс();
	СтруктураДляЗаполнения = ПроцессОбъект.СтруктураДанныхДляЗаполнения();
	
	ВедущаяЗадача = Неопределено;
	Если ПроцессОбработки <> Неопределено Тогда
		ШаблонНаименования = НСтр("ru = 'Обработка действия ""%1""'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, Действие.Ссылка);
		ВедущаяЗадача = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
			НаименованиеЗадачи, ПроцессОбработки);
	КонецЕсли;
	
	ДопустимыеУчастники = ДопустимыеУчастникиДействияСогласования(Действие, ПроцессОбъект);
	
	ЗаполнитьСтруктуруДляПроцессаСогласования(
		СтруктураДляЗаполнения, Действие, ДопустимыеУчастники, ВедущаяЗадача);
	
	ПроцессОбъект.Заполнить(СтруктураДляЗаполнения);
	ПроцессОбъект.КоличествоИтераций = 1;
	
	Возврат ПроцессОбъект;
	
КонецФункции

// Создает и возвращает объект процесса по действию.
//
// Параметры:
//  Действие - СправочникОбъект.ДействияПодписания - объект действие.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс, Неопределено - процесс обработки.
//
// Возвращаемое значение:
//  БизнесПроцессОбъект.Подписание - процесс по действию.
//
Функция СоздатьПроцессПодписанияПоДействию(Действие, ПроцессОбработки = Неопределено)
	
	ПроцессОбъект = БизнесПроцессы.Подписание.СоздатьБизнесПроцесс();
	СтруктураДляЗаполнения = ПроцессОбъект.СтруктураДанныхДляЗаполнения();
	
	ВедущаяЗадача = Неопределено;
	Если ПроцессОбработки <> Неопределено Тогда
		ШаблонНаименования = НСтр("ru = 'Обработка действия ""%1""'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, Действие.Ссылка);
		ВедущаяЗадача = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
			НаименованиеЗадачи, ПроцессОбработки);
	КонецЕсли;
	
	ДопустимыеУчастники = ДопустимыеУчастникиДействияПодписания(Действие, ПроцессОбъект);
	
	ЗаполнитьСтруктуруДляПроцессаПодписания(
		СтруктураДляЗаполнения, Действие, ДопустимыеУчастники, ВедущаяЗадача);
	
	ПроцессОбъект.Заполнить(СтруктураДляЗаполнения);
	ПроцессОбъект.КоличествоИтераций = 1;
	
	Возврат ПроцессОбъект;
	
КонецФункции

// Создает и возвращает объект процесса по действию.
//
// Параметры:
//  Действие - СправочникОбъект.ДействиеРегистрация - объект действие.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс - процесс обработки.
//
// Возвращаемое значение:
//  БизнесПроцессОбъект.Регистрация - процесс по действию.
//
Функция СоздатьПроцессРегистрацииПоДействию(Действие, ПроцессОбработки)
	
	ПроцессОбъект = БизнесПроцессы.Регистрация.СоздатьБизнесПроцесс();
	СтруктураДляЗаполнения = ПроцессОбъект.СтруктураДанныхДляЗаполнения();
	
	ШаблонНаименования = НСтр("ru = 'Обработка действия ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, Действие.Ссылка);
	ВедущаяЗадача = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
		НаименованиеЗадачи, ПроцессОбработки);
	
	ЗаполнитьСтруктуруДляПроцессаРегистрации(СтруктураДляЗаполнения, Действие, ВедущаяЗадача);
	ПроцессОбъект.Заполнить(СтруктураДляЗаполнения);
	ПроцессОбъект.КоличествоИтераций = 1;
	
	Возврат ПроцессОбъект;
	
КонецФункции

// Создает и возвращает объект процесса по действию.
//
// Параметры:
//  Действие - СправочникОбъект.ДействиеУтверждения - объект действие.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс - процесс обработки.
//
// Возвращаемое значение:
//  БизнесПроцессОбъект.Утверждение - процесс по действию.
//
Функция СоздатьПроцессУтвержденияПоДействию(Действие, ПроцессОбработки)
	
	ПроцессОбъект = БизнесПроцессы.Утверждение.СоздатьБизнесПроцесс();
	СтруктураДляЗаполнения = ПроцессОбъект.СтруктураДанныхДляЗаполнения();
	
	ШаблонНаименования = НСтр("ru = 'Обработка действия ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, Действие.Ссылка);
	ВедущаяЗадача = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
		НаименованиеЗадачи, ПроцессОбработки);
	
	ЗаполнитьСтруктуруДляПроцессаУтверждения(СтруктураДляЗаполнения, Действие, ВедущаяЗадача);
	ПроцессОбъект.Заполнить(СтруктураДляЗаполнения);
	ПроцессОбъект.КоличествоИтераций = 1;
	
	Возврат ПроцессОбъект;
	
КонецФункции

// Создает и возвращает объект процесса по действию.
//
// Параметры:
//  Действие - СправочникОбъект.ДействиеСогласование - объект действие.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс - процесс обработки.
//
Функция СоздатьПроцессОзнакомленияПоДействию(Действие, ПроцессОбработки = Неопределено)
	
	ПроцессОбъект = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
	СтруктураДляЗаполнения = ПроцессОбъект.СтруктураДанныхДляЗаполнения();
	
	ВедущаяЗадача = Неопределено;
	Если ПроцессОбработки <> Неопределено Тогда
		ШаблонНаименования = НСтр("ru = 'Обработка действия ""%1""'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, Действие.Ссылка);
		ВедущаяЗадача = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
			НаименованиеЗадачи, ПроцессОбработки);
	КонецЕсли;
	
	ДопустимыеУчастники = ДопустимыеУчастникиДействияОзнакомления(Действие, ПроцессОбъект);
	
	ЗаполнитьСтруктуруДляПроцессаОзнакомления(
		СтруктураДляЗаполнения, Действие, ДопустимыеУчастники, ВедущаяЗадача);
	
	ПроцессОбъект.Заполнить(СтруктураДляЗаполнения);
	
	Возврат ПроцессОбъект;
	
КонецФункции

// Создает и возвращает процессы рассмотрения для рассматривающих участников действия.
//
// Параметры:
//  Действие - СправочникОбъект.ДействиеИсполнение - объект действие.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс - процесс обработки.
//
// Возвращаемое значение:
//  Массив:
//   * БизнесПроцессОбъект.Рассмотрение
//
Функция СоздатьПроцессыРассмотренияПоДействию(Действие, ПроцессОбработки = Неопределено)
	
	ДопустимыеУчастники = ДопустимыеУчастникиРассмотренияВДействияИсполнения(Действие);
	
	РассматривающиеСПроцессами = Новый Соответствие();
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	ПроцессыРассмотрения = Новый Массив;
	Для Каждого АктивныйПроцесс Из АктивныеПроцессы Цикл
	    Если ТипЗнч(АктивныйПроцесс) <> Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
	        Продолжить;
	    КонецЕсли;
	    ПроцессыРассмотрения.Добавить(АктивныйПроцесс);
	КонецЦикла;
	Процессы_ИДРассматриваюших = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
	    ПроцессыРассмотрения, "ИдентификаторИсполнителя");
	Для Каждого КлючЗначение Из Процессы_ИДРассматриваюших Цикл
		РассматривающиеСПроцессами[КлючЗначение.Значение] = Истина;
	КонецЦикла;
			
	ПроцессыПоДействиям = Новый Массив;
	Для Каждого УчастникДействия Из Действие.Участники Цикл
		
		Если ЗначениеЗаполнено(УчастникДействия.ВышестоящийУчастник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если УчастникДействия.ФункцияУчастника <> 
			Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ДопустимыеУчастники[УчастникДействия.Идентификатор] <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если РассматривающиеСПроцессами[УчастникДействия.Идентификатор] = Истина Тогда
			Продолжить;
		КонецЕсли;
				
		ПроцессРассмотренияПоДействию = СоздатьПроцессРассмотренияПоУчастникуДействия(
			Действие,
			УчастникДействия.Идентификатор,
			ПроцессОбработки);
		ПроцессыПоДействиям.Добавить(ПроцессРассмотренияПоДействию);
		
	КонецЦикла;
	
	Возврат ПроцессыПоДействиям;
	
КонецФункции

// Создает и возвращает процессы исполнения для участников действия с пунктами.
//
// Параметры:
//  Действие - СправочникОбъект.ДействиеИсполнение - объект действие.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс - процесс обработки.
//
// Возвращаемое значение:
//  Массив:
//  Структура
//   * ПроцессИсполнения - БизнесПроцессОбъект.Исполнение
//   * ИдентификаторПункта - УникальныйИдентификатор
//
Функция ПроцессыИсполненияПоДействиюСПунктами(Действие, ПроцессОбработки = Неопределено)
	
	ПроцессыПоДействиям = Новый Массив;
	Если ТипЗнч(Действие) <> Тип("СправочникОбъект.ДействияИсполнения") Тогда
		Возврат ПроцессыПоДействиям;
	КонецЕсли;
	
	ПунктыСПроцессами = Новый Соответствие();
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействияСИдентификаторамиПунктов(
		Действие.Ссылка);

	Для Каждого СтрПункт Из Действие.Пункты Цикл				
		Если АктивныеПроцессы[СтрПункт.Идентификатор] <> Неопределено Тогда
			ПунктыСПроцессами.Вставить(СтрПункт.Идентификатор, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ПунктыБезПроцессов = Новый Соответствие();		
	Для Каждого УчастникДействия Из Действие.Участники Цикл
		
		Если ЗначениеЗаполнено(УчастникДействия.ВышестоящийУчастник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если УчастникДействия.ФункцияУчастника <> 
			Перечисления.ФункцииУчастниковИсполнения.Исполнитель
			И УчастникДействия.ФункцияУчастника <> 
			Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			
			Продолжить;
		КонецЕсли;
		
		Ключ = УчастникДействия.ИдентификаторПункта;
			
		Если ПунктыСПроцессами[Ключ] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ПунктыБезПроцессов.Вставить(Ключ, Истина);
	КонецЦикла;
	
	Для Каждого СтрПункт Из ПунктыБезПроцессов Цикл
		ПроцессИсполнения = СоздатьПроцессИсполненияПоПунктуДействия(
			Действие,
			СтрПункт.Ключ,
			ПроцессОбработки);
		ПроцессыПоДействиям.Добавить(Новый Структура("ПроцессИсполнения, ИдентификаторПункта",
			ПроцессИсполнения, СтрПункт.Ключ));
		
	КонецЦикла;
	
	Возврат ПроцессыПоДействиям;
	
КонецФункции

// Устанавливает задержку начала выполнения процесса по действию.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект - объект действие.
//  ПроцессПоДействию - ОпределяемыйТип.ПроцессДействия - процесс объект или процесс ссылка по действию.
//  ДатаОтсчета - Неопределено, Дата - дата отсчета относительной задержки выполнения.
//
Процедура УстановитьЗадержкуНачалаВыполнения(Действие, ПроцессПоДействию, ДатаОтсчета = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеНачалоВыполненияДействий") Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Действие.ОтложенноеНачалоВыполнения)
			И Не ЗначениеЗаполнено(Действие.ОтложенноеВыполнениеДата))
		Или (ЗначениеЗаполнено(Действие.ОтложенноеВыполнениеДата) 
			И Действие.ОтложенноеВыполнениеДата < ТекущаяДатаСеанса()) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие.ОтложенноеВыполнениеДата) Тогда
		ДатаОтложенногоСтарта = Действие.ОтложенноеВыполнениеДата;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
		
		Если ЗначениеЗаполнено(ДатаОтсчета) Тогда
			ДатаОтложенногоСтарта = ДатаОтсчета;
		Иначе
			ДатаОтложенногоСтарта = ТекущаяДатаСеанса();
		КонецЕсли;
		ПараметрыТочногоСрока = ДействияСервер.ПараметрыДлительностиТочногоСрока();
		ПараметрыТочногоСрока.ДатаОтсчета = ДатаОтложенногоСтарта;
		ДниИЧасыЗадержки = ДействияКлиентСервер.ДниИЧасыЗадержкиПоСроку(Действие.ОтложенноеНачалоВыполнения);	
		ПараметрыТочногоСрока.Дни = ДниИЧасыЗадержки.ЗадержкаДни;
		ПараметрыТочногоСрока.Часы = ДниИЧасыЗадержки.ЗадержкаЧасы;
		ПараметрыТочногоСрока.ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		
		ДатаОтложенногоСтарта = ДействияСервер.СрокИсполненияПоДлительности(ПараметрыТочногоСрока);
	Иначе
		Если ЗначениеЗаполнено(ДатаОтсчета) Тогда
			ДатаОтложенногоСтарта = ДатаОтсчета + Действие.ОтложенноеНачалоВыполнения;
		Иначе
			ДатаОтложенногоСтарта = ТекущаяДатаСеанса() + Действие.ОтложенноеНачалоВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаОтложенногоСтарта < ТекущаяДатаСеанса() Тогда
		// В случае если дата уже прошла, то нужно стартануть процесс
		Если РаботаСБизнесПроцессами.ЭтоБизнесПроцессОбъект(ПроцессПоДействию) Тогда
			ПроцессОбъект = ПроцессПоДействию;
		Иначе
			ПроцессОбъект = ПроцессПоДействию.ПолучитьОбъект();
		КонецЕсли;
		
		РегистрыСведений.НастройкиОтложеногоСтартаПроцессов.Удалить(ПроцессОбъект.Ссылка);
		Если Не ПроцессОбъект.Стартован Тогда
			ПроцессОбъект.Старт();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.НастройкиОтложеногоСтартаПроцессов.Добавить(
		ПроцессПоДействию.Ссылка,
		ДатаОтложенногоСтарта);
		
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеПроцессов

// Обновляет активный процесс по действию согласования.
//
// Параметры:
//  Действие - СправочникОбъект.ДействиеСогласование - объект действие.
//
Процедура ОбновитьПроцессПоДействиюСогласования(Действие)
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	
	Если АктивныеПроцессы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	АктивныйПроцесс = АктивныеПроцессы[0].ПолучитьОбъект();
	СтруктураДляЗаполнения = АктивныйПроцесс.СтруктураДанныхДляЗаполнения();
	
	ДопустимыеУчастники = ДопустимыеУчастникиДействияСогласования(Действие, АктивныйПроцесс);
	
	ПроверитьНаличиеПолучателейЗадачАктивногоДействия(Действие, ДопустимыеУчастники);
	
	СведенияОПереносеСрока = СведенияОПереносеСрокаИзДопСвойствДействия(Действие);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", СведенияОПереносеСрока.ПричинаПереносаСрока);
	ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", СведенияОПереносеСрока.ЗаявкаНаПеренос);
	ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
		АктивныйПроцесс, ПараметрыЗаписи);
	
	ЗаполнитьСтруктуруДляПроцессаСогласования(
		СтруктураДляЗаполнения,
		Действие,
		ДопустимыеУчастники,
		АктивныйПроцесс.ВедущаяЗадача);
	
	//Приводит к записи процесса
	АктивныйПроцесс.ОбновитьАктивныйПроцесс(СтруктураДляЗаполнения);
	
	ПроверитьЗаполнениеПроцессаДляВыполнения(АктивныйПроцесс);
	
КонецПроцедуры

// Обновляет активный процесс по действию подписания.
//
// Параметры:
//  Действие - СправочникОбъект.ДействияПодписания - объект действие.
//
Процедура ОбновитьПроцессПоДействиюПодписания(Действие)
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	
	Если АктивныеПроцессы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	АктивныйПроцесс = АктивныеПроцессы[0].ПолучитьОбъект();
	СтруктураДляЗаполнения = АктивныйПроцесс.СтруктураДанныхДляЗаполнения();
	
	ДопустимыеУчастники = ДопустимыеУчастникиДействияПодписания(Действие, АктивныйПроцесс);
	
	ПроверитьНаличиеПолучателейЗадачАктивногоДействия(Действие, ДопустимыеУчастники);
	
	СведенияОПереносеСрока = СведенияОПереносеСрокаИзДопСвойствДействия(Действие);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", СведенияОПереносеСрока.ПричинаПереносаСрока);
	ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", СведенияОПереносеСрока.ЗаявкаНаПеренос);
	ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
		АктивныйПроцесс, ПараметрыЗаписи);
	
	ЗаполнитьСтруктуруДляПроцессаПодписания(
		СтруктураДляЗаполнения,
		Действие,
		ДопустимыеУчастники,
		АктивныйПроцесс.ВедущаяЗадача);
	
	//Приводит к записи процесса
	АктивныйПроцесс.ОбновитьАктивныйПроцесс(СтруктураДляЗаполнения);
	
	ПроверитьЗаполнениеПроцессаДляВыполнения(АктивныйПроцесс);
	
КонецПроцедуры

// Обновляет активный процесс по действию регистрации.
//
// Параметры:
//  Действие - СправочникОбъект.ДействияРегистрации - объект действие.
//
Процедура ОбновитьПроцессПоДействиюРегистрация(Действие)
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	
	Если АктивныеПроцессы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	АктивныйПроцесс = АктивныеПроцессы[0].ПолучитьОбъект();
	СтруктураДляЗаполнения = АктивныйПроцесс.СтруктураДанныхДляЗаполнения();
	
	СведенияОПереносеСрока = СведенияОПереносеСрокаИзДопСвойствДействия(Действие);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", СведенияОПереносеСрока.ПричинаПереносаСрока);
	ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", СведенияОПереносеСрока.ЗаявкаНаПеренос);
	ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
		АктивныйПроцесс, ПараметрыЗаписи);
	
	ЗаполнитьСтруктуруДляПроцессаРегистрации(
		СтруктураДляЗаполнения,
		Действие,
		АктивныйПроцесс.ВедущаяЗадача);
	
	//Приводит к записи процесса
	АктивныйПроцесс.ОбновитьАктивныйПроцесс(СтруктураДляЗаполнения);
	
	ПроверитьЗаполнениеПроцессаДляВыполнения(АктивныйПроцесс);
	
КонецПроцедуры

// Обновляет активный процесс по действию утверждения.
//
// Параметры:
//  Действие - СправочникОбъект.ДействиеУтверждения - объект действие.
//
Процедура ОбновитьПроцессПоДействиюУтверждения(Действие)
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	
	Если АктивныеПроцессы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	АктивныйПроцесс = АктивныеПроцессы[0].ПолучитьОбъект();
	СтруктураДляЗаполнения = АктивныйПроцесс.СтруктураДанныхДляЗаполнения();
	
	СведенияОПереносеСрока = СведенияОПереносеСрокаИзДопСвойствДействия(Действие);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", СведенияОПереносеСрока.ПричинаПереносаСрока);
	ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", СведенияОПереносеСрока.ЗаявкаНаПеренос);
	ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
		АктивныйПроцесс, ПараметрыЗаписи);
	
	ЗаполнитьСтруктуруДляПроцессаУтверждения(
		СтруктураДляЗаполнения,
		Действие,
		АктивныйПроцесс.ВедущаяЗадача);
	
	//Приводит к записи процесса
	АктивныйПроцесс.ОбновитьАктивныйПроцесс(СтруктураДляЗаполнения);
	
	ПроверитьЗаполнениеПроцессаДляВыполнения(АктивныйПроцесс);
	
КонецПроцедуры

// Обновляет активный процесс по действию ознакомления. Старый режим, с бизнес процессом
//
// Параметры:
//  Действие - СправочникОбъект.ДействияОзнакомления - объект действие.
//
Процедура ОбновитьБизнесПроцессПоДействиюОзнакомления(Действие)
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	
	Если АктивныеПроцессы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	АктивныйПроцесс = АктивныеПроцессы[0].ПолучитьОбъект();
	СтруктураДляЗаполнения = АктивныйПроцесс.СтруктураДанныхДляЗаполнения();
	
	ДопустимыеУчастники = ДопустимыеУчастникиДействияОзнакомления(Действие, АктивныйПроцесс);
	
	ПроверитьНаличиеПолучателейЗадачАктивногоДействия(Действие, ДопустимыеУчастники);
	
	СведенияОПереносеСрока = СведенияОПереносеСрокаИзДопСвойствДействия(Действие);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", СведенияОПереносеСрока.ПричинаПереносаСрока);
	ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", СведенияОПереносеСрока.ЗаявкаНаПеренос);
	ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
		АктивныйПроцесс, ПараметрыЗаписи);
	
	ЗаполнитьСтруктуруДляПроцессаОзнакомления(
		СтруктураДляЗаполнения,
		Действие,
		ДопустимыеУчастники,
		АктивныйПроцесс.ВедущаяЗадача);
	
	//Приводит к записи процесса
	АктивныйПроцесс.ОбновитьАктивныйПроцесс(СтруктураДляЗаполнения);
	
	ПроверитьЗаполнениеПроцессаДляВыполнения(АктивныйПроцесс);  
	
	// обновим РС УчастникиОзнакомления.   
	Исполнители = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктивныеПроцессы[0], "Исполнители");
	Исполнители = Исполнители.Выгрузить();
	
	УчастникиИДатыДействия = РегистрыСведений.УчастникиОзнакомлений.УчастникиИДатыДействия(Действие.Ссылка);
	
	// удаленные участники
	Для Каждого СтрокаРС Из УчастникиИДатыДействия Цикл
		
		НайденнаяСтрока = Исполнители.Найти(СтрокаРС.ИдентификаторУчастникаДействия, "ИдентификаторИсполнителя");
		Если НайденнаяСтрока = Неопределено Тогда // в процессе нет, значит удалено
			РегистрыСведений.УчастникиОзнакомлений.УдалитьЗапись(
					Действие.Ссылка, СтрокаРС.ИдентификаторУчастника);
		КонецЕсли;	
		
	КонецЦикла;	
	
	// новые участники
	Для Каждого СтрокаПроцесса Из Исполнители Цикл
		
		НайденнаяСтрока = УчастникиИДатыДействия.Найти(СтрокаПроцесса.ИдентификаторИсполнителя, "ИдентификаторУчастникаДействия");
		Если НайденнаяСтрока = Неопределено Тогда // в процессе есть, в РС нет - значит добавлено
			
			ЗадачаИсполнителя = СтрокаПроцесса.ЗадачаИсполнителя;
			РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаИсполнителя, 
				"Исполнитель, РольИсполнителя, Дата, ИдентификаторИсполнителя, СрокИсполнения");        
			
			Участник = РеквизитыЗадачи.Исполнитель;
			Если ЗначениеЗаполнено(РеквизитыЗадачи.РольИсполнителя) Тогда
				Участник = РеквизитыЗадачи.РольИсполнителя;
			КонецЕсли;	
			
			НаборЗаписей = РегистрыСведений.УчастникиОзнакомлений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Действие.Установить(Действие.Ссылка);
			НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(РеквизитыЗадачи.ИдентификаторИсполнителя);
			
			Запись = НаборЗаписей.Добавить();  
			
			Запись.Действие = Действие.Ссылка;
			Запись.ДатаНачала = РеквизитыЗадачи.Дата;
			
			Запись.ИдентификаторУчастника = РеквизитыЗадачи.ИдентификаторИсполнителя;      
			Запись.ИдентификаторУчастникаДействия = РеквизитыЗадачи.ИдентификаторИсполнителя;
			
			Запись.Участник = Участник;
			Запись.Исполнитель = Участник;
			
			Запись.Срок = РеквизитыЗадачи.СрокИсполнения;
			
			Запись.Состояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ДействиеВыполнено = Ложь;  
	РегистрыСведений.УчастникиОзнакомлений.ОбновитьДействиеЦеликом(Действие.Ссылка, ДействиеВыполнено);
	
КонецПроцедуры

// Обновляет активный процесс по действию ознакомления.
// Новый режим, с РС УчастникиОзнакомления
//
// Параметры:
//  Действие - СправочникОбъект.ДействияОзнакомления - объект действие.
//
Процедура ОбновитьПроцессПоДействиюОзнакомления(Действие)
	
	Если Действие.ДополнительныеСвойства.Свойство("ЭтоПеренаправлениеЗадачи") 
		И Действие.ДополнительныеСвойства.ЭтоПеренаправлениеЗадачи = Истина Тогда
		Возврат; // при перенаправлении ничего не делаем. - все сделано выше.
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	// только если в РС что то есть, меняем. (т.е. начата обработка по действию.)
	МассивИсключений = РегистрыСведений.УчастникиОзнакомлений.ИдентификаторыДействий(Действие.Ссылка); // МассивИсключений - кто есть в РС
	Если МассивИсключений.Количество() <> 0 Тогда 
		
		// учтем смену сроков
		Участники = Действие.Участники;                       
		УчастникиИДаты = РегистрыСведений.УчастникиОзнакомлений.УчастникиИДатыДействия(Действие.Ссылка);
		
		КешГрафиковРаботы = Новый Соответствие;
		ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");

		Если ИспользоватьГрафикиРаботы Тогда
			
			УчастникиМассив = Новый Массив;
			
			Для Каждого Стр Из Участники Цикл
				
				Участник = Стр.Участник;
				
				Если ТипЗнч(Участник) = Тип("СправочникСсылка.Сотрудники") 
						Или ТипЗнч(Участник) = Тип("СправочникСсылка.Пользователи") Тогда
					УчастникиМассив.Добавить(Участник);
				Иначе
					КешГрафиковРаботы[Участник] = ОбщегоНазначенияДокументооборотПовтИсп.ПолучитьОсновнойГрафикРаботы();
				КонецЕсли;

			КонецЦикла;	
			
			// получим Соответствие -Ключ - Участник, Значение - ГрафикРаботы
			КешГрафиковРаботы = СрокиИсполненияПроцессовКОРП.КешГрафиковРаботы(УчастникиМассив);
			
		КонецЕсли;
		
		Для Каждого ИдентификаторИсключения Из МассивИсключений Цикл
			
			Стр = Участники.Найти(ИдентификаторИсключения, "Идентификатор");
			Если Стр <> Неопределено Тогда   // тут для группы
				
				// рассчитаем абсолютный срок          
				
				ИсполнительЗадачи = Стр.Участник;
				
				Если Не ИспользоватьГрафикиРаботы Тогда
					
					ГрафикРаботы = Справочники.ГрафикиРаботы.ПустаяСсылка();
					
				Иначе	
					
					ГрафикРаботы = КешГрафиковРаботы[ИсполнительЗадачи];
					Если ГрафикРаботы = Неопределено Тогда
						ГрафикРаботы = СрокиИсполненияПроцессовКОРП.ГрафикРаботыУчастникаПроцесса(
							ИсполнительЗадачи); 
					КонецЕсли;
						
				КонецЕсли;	

				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторУчастникаДействия", Стр.Идентификатор);
				
				СтрокиРС = УчастникиИДаты.НайтиСтроки(Отбор); // тут все строки в одной группе   
				
				ЗадачаТрекера = Неопределено;
				ЗадачаОбъект = Неопределено;
				ЗадачаОбновлена = Ложь; 
				НужноОбновитьДействия = Ложь;   
				МассивИдентификаторов = Новый Массив;
				
				Для Каждого СтрокаРС Из СтрокиРС Цикл

					ДатаОтсчета = СтрокаРС.ДатаНачала;   
					МассивИдентификаторов.Добавить(СтрокаРС.ИдентификаторУчастника);
					
					СрокНовый = СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокИсполненияУчастника(
						СтрокаРС.Участник, 
						ДатаОтсчета,
						Стр.ВариантУстановкиСрока,
						Стр.Срок,
						Стр.СрокДни,
						Стр.СрокЧасы,
						Стр.СрокМинуты);  
					
					Если СтрокаРС.Срок <> СрокНовый Тогда    
						
						РегистрыСведений.УчастникиОзнакомлений.ПеренестиСрок(
							Действие.Ссылка, СтрокаРС.ИдентификаторУчастника, СрокНовый);
							
						// + задачу обновить. - 1 раз !!!	
						Если Не ЗначениеЗаполнено(ЗадачаТрекера) Тогда
							
							ДействиеЗадачи = ДействияВызовСервера.ДействиеЗадачиДляСтрокиОзнакомления(
								Действие.Ссылка, СтрокаРС.ИдентификаторУчастника);  
								
							Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда	
								ЗадачаТрекера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
							КонецЕсли;	
							
						КонецЕсли;	
						
						Если ЗначениеЗаполнено(ЗадачаТрекера) И Не ЗадачаОбновлена Тогда
							
							ЗаблокироватьДанныеДляРедактирования(ЗадачаТрекера);
							
							ЗадачаОбъект = ЗадачаТрекера.ПолучитьОбъект();
							
							СтарыйСрок = ЗадачаОбъект.Срок;
							ЗадачаОбъект.Срок = СрокНовый;
							
							ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);  
							
							ЗадачаОбновлена = Истина;
							НужноОбновитьДействия = Истина;
							
						КонецЕсли;	
						
					КонецЕсли;	
					
				КонецЦикла;	
				
				Если НужноОбновитьДействия Тогда
					
					МассивАктивныеДействия = ДействияВызовСервера.ДействияЗадачиДляСтрокиОзнакомления(
						Действие.Ссылка,
						МассивИдентификаторов);
					
					Для Каждого АктивноеДействие Из МассивАктивныеДействия Цикл
						
						РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(
							АктивноеДействие);
						
						РегистрыНакопления.КоличествоЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(
							АктивноеДействие);
							
					КонецЦикла;   
							
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	                  
		
		МассивИсключенийДобавления = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивИсключений);
		МассивУдаления = Новый Массив;
		
		// учтем удаление
		Для Каждого ИдентификаторИсключения Из МассивИсключений Цикл
			
			СтрокаТЧ = Участники.Найти(ИдентификаторИсключения, "Идентификатор");
			Если СтрокаТЧ = Неопределено Тогда  //нет в действии - т.е. удалили
				МассивУдаления.Добавить(ИдентификаторИсключения);
			КонецЕсли;
			
		КонецЦикла;	
		
		// учтем замену
		Для Каждого СтрокаОписания Из Действие.ДополнительныеСвойства.Измененные Цикл
			
			Индекс = МассивИсключенийДобавления.Найти(СтрокаОписания.Идентификатор);
			Если Индекс <> Неопределено Тогда
				МассивИсключенийДобавления.Удалить(Индекс); // тот же GUID, но не пропускаем а создаем
			КонецЕсли;
			
			Если МассивУдаления.Найти(СтрокаОписания.Идентификатор) = Неопределено Тогда
				МассивУдаления.Добавить(СтрокаОписания.Идентификатор); // тут добавим, чтобы удалить
			КонецЕсли;
			
		КонецЦикла;	 
		
		ИзмененоСостояние = Ложь;
		
		// учтем удаление
		Для Каждого ИдентификаторИсключения Из МассивУдаления Цикл
			
			// удалим запись РС и документ.Задача
			
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторУчастникаДействия", ИдентификаторИсключения);
			
			СтрокиРС = УчастникиИДаты.НайтиСтроки(Отбор);    
			
			Для Каждого СтрокаРС Из СтрокиРС Цикл  
				
				ИзмененоСостояние = Истина;
				
				// удалим запись РС         
				РегистрыСведений.УчастникиОзнакомлений.УдалитьЗапись(
					Действие.Ссылка, СтрокаРС.ИдентификаторУчастника);
				
				ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоДействиюОзнакомления(
					Действие.Ссылка,
					СтрокаРС.ИдентификаторУчастника);
				
			КонецЦикла;	
			
		КонецЦикла;	
		
		// тут создаст новые, кого еще не было
		Справочники.ДействияОзнакомления.ЗаполнитьРегистрУчастниковОзнакомленияИВернутьКоличество(Действие.Ссылка, МассивИсключенийДобавления);
		
		ДействиеВыполнено = Ложь;  
		Если ИзмененоСостояние Тогда
			РегистрыСведений.УчастникиОзнакомлений.ОбновитьДействиеЦеликом(Действие.Ссылка, ДействиеВыполнено);
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Действие.Ссылка);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Обновляет активные процессы рассмотрения действия исполнения.
//
// Параметры:
//  Действие - СправочникОбъект.ДействияИсполнения - объект действие.
//
Процедура ОбновитьПроцессыРассмотренияПоДействию(Действие)
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	
	Если АктивныеПроцессы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ПроцессИзменныйПоЗаявке = БизнесПроцессы.Рассмотрение.ПустаяСсылка();
	СведенияОПереносеСрока = СведенияОПереносеСрокаИзДопСвойствДействия(Действие);
	Если ЗначениеЗаполнено(СведенияОПереносеСрока.ЗаявкаНаПеренос) Тогда
		ПроцессИзменныйПоЗаявке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СведенияОПереносеСрока.ЗаявкаНаПеренос,"ПредметРассмотрения.БизнесПроцесс");
	КонецЕсли;
	
	Для Каждого АктивныйПроцесс Из АктивныеПроцессы Цикл
		
		Если ТипЗнч(АктивныйПроцесс.Ссылка) <> Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаблокироватьДанныеДляРедактирования(АктивныйПроцесс);
		ПроцессОбъект = АктивныйПроцесс.ПолучитьОбъект();
		
		СтруктураДляЗаполнения = ПроцессОбъект.СтруктураДанныхДляЗаполнения();
		
		Если ПроцессИзменныйПоЗаявке = АктивныйПроцесс Тогда
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", СведенияОПереносеСрока.ПричинаПереносаСрока);
			ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", СведенияОПереносеСрока.ЗаявкаНаПеренос);
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
				ПроцессОбъект, ПараметрыЗаписи);
		КонецЕсли;
		
		ЗаполнитьСтруктуруДляПроцессаРассмотрения(
			СтруктураДляЗаполнения,
			Действие,
			ПроцессОбъект.ИдентификаторИсполнителя,
			ПроцессОбъект.ВедущаяЗадача);
				
		//Приводит к записи процесса
		ПроцессОбъект.ОбновитьАктивныйПроцесс(СтруктураДляЗаполнения);
		
		РазблокироватьДанныеДляРедактирования(АктивныйПроцесс);
		
	КонецЦикла
	
КонецПроцедуры

// Обновляет активный процесс Исполнения по действию.
//
// Параметры:
//  Действие - СправочникОбъект.ДействияИсполнения - объект действие.
//  ПроцессОбработкиОбъект - БизнесПроцессОбъект.КомплексныйПроцесс, Неопределено - комплексный процесс всей обработки.
//  ИмяДействия - Строка - имя элемента схемы обработки объекта по действию обработки.
//  ОбработчикСхемы - Структура - обработчик схемы КП.
//  СостояниеИДатаСостояния - Структура, ПеречислениеСсылка.СостоянияВыполненияДействий - состояние действия.
//
Процедура ОбновитьПроцессИсполненияПоДействию(Действие, 
	ПроцессОбработкиОбъект, 
	ИмяДействия, 
	ОбработчикСхемы, 
	СостояниеИДатаСостояния)
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	Если АктивныеПроцессы.Количество() > 0 Тогда
		РеквизитыПроцессов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(АктивныеПроцессы, "ГлавнаяЗадача");
	
		АктивныйПроцесс = Неопределено;
		Для Каждого Процесс Из АктивныеПроцессы Цикл
			Если ТипЗнч(Процесс) <> Тип("БизнесПроцессСсылка.Исполнение") Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(РеквизитыПроцессов[Процесс].ГлавнаяЗадача) Тогда
				Продолжить;
			КонецЕсли;
			АктивныйПроцесс = Процесс;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если АктивныйПроцесс = Неопределено Тогда
		Если ПроцессОбработкиОбъект = Неопределено Или Не ЗначениеЗаполнено(ПроцессОбработкиОбъект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
		// Создать новый процесс, если есть участники исполнения.
		НовыйПроцессОбъект = СоздатьПроцессИсполненияПоДействию(Действие, ПроцессОбработкиОбъект.Ссылка);
		Если НовыйПроцессОбъект <> Неопределено Тогда
			НовыйПроцессОбъект.Записать();
			РегистрыСведений.ПроцессыДействий.Добавить(НовыйПроцессОбъект.Ссылка, Действие.Ссылка);
			
			// Если есть отложенный запуск действия, то ставим его и для нового созданного процесса
			Если СостояниеИДатаСостояния.Состояние = Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск Тогда
				УстановитьЗадержкуНачалаВыполнения(Действие, НовыйПроцессОбъект, СостояниеИДатаСостояния.Дата);
			КонецЕсли;
			ЗапуститьПроцессПоДействию(Действие.Ссылка, НовыйПроцессОбъект);
			ПроцессОбработкиОбъект.ДобавитьЗадачуОбработкиЭлемента(
				ИмяДействия, НовыйПроцессОбъект.ВедущаяЗадача, ОбработчикСхемы);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АктивныйПроцесс = АктивныйПроцесс.ПолучитьОбъект();
	СтруктураДляЗаполнения = АктивныйПроцесс.СтруктураДанныхДляЗаполнения();
	
	ДопустимыеУчастники = ДопустимыеИсполнителиДействияИсполнения(Действие, АктивныйПроцесс);
	
	СведенияОПереносеСрока = СведенияОПереносеСрокаИзДопСвойствДействия(Действие);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", СведенияОПереносеСрока.ПричинаПереносаСрока);
	ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", СведенияОПереносеСрока.ЗаявкаНаПеренос);
	ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
		АктивныйПроцесс, ПараметрыЗаписи);
	
	ПроверитьНаличиеПолучателейЗадачАктивногоДействия(Действие, ДопустимыеУчастники);
	
	ЗаполнитьСтруктуруДляПроцессаИсполнения(
		СтруктураДляЗаполнения,
		Действие,
		ДопустимыеУчастники,
		АктивныйПроцесс.ВедущаяЗадача);
	
	АктивныйПроцесс.ОбновитьАктивныйПроцесс(СтруктураДляЗаполнения);
	
	ПроверитьЗаполнениеПроцессаДляВыполнения(АктивныйПроцесс);
	
КонецПроцедуры

// Обновляет активные процессы Исполнения по действию.
//
// Параметры:
//  Действие - СправочникОбъект.ДействияИсполнения - объект действие.
//
Процедура ОбновитьПроцессыИсполненияПоДействиюСПунктами(Действие)
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействияСИдентификаторамиПунктов(
		Действие.Ссылка, Истина);
	Если АктивныеПроцессы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АктивныйПроцесс = Неопределено;
	Для Каждого Элемент Из АктивныеПроцессы Цикл
		Если ТипЗнч(Элемент.Значение) <> Тип("БизнесПроцессСсылка.Исполнение") Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Значение, "ГлавнаяЗадача")) Тогда
			Продолжить;
		КонецЕсли;
		АктивныйПроцесс = Элемент.Значение;
		ИдентификаторПункта = Элемент.Ключ;
	
		АктивныйПроцесс = АктивныйПроцесс.ПолучитьОбъект();
		СтруктураДляЗаполнения = АктивныйПроцесс.СтруктураДанныхДляЗаполнения();
		
		ДопустимыеУчастники = ДопустимыеИсполнителиДействияИсполнения(Действие, АктивныйПроцесс, ИдентификаторПункта);
		
		СведенияОПереносеСрока = СведенияОПереносеСрокаИзДопСвойствДействия(Действие);
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", СведенияОПереносеСрока.ПричинаПереносаСрока);
		ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", СведенияОПереносеСрока.ЗаявкаНаПеренос);
		ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
			АктивныйПроцесс, ПараметрыЗаписи);
		
		ПроверитьНаличиеПолучателейЗадачАктивногоДействия(Действие, ДопустимыеУчастники);
	
		ЗаполнитьСтруктуруДляПроцессаИсполнения(
			СтруктураДляЗаполнения,
			Действие,
			ДопустимыеУчастники,
			АктивныйПроцесс.ВедущаяЗадача,
			ИдентификаторПункта);
		
		АктивныйПроцесс.ОбновитьАктивныйПроцесс(СтруктураДляЗаполнения);
		
		ПроверитьЗаполнениеПроцессаДляВыполнения(АктивныйПроцесс);
	КонецЦикла;
	
КонецПроцедуры
	
// Обновляет активный процесс Исполнения по действию.
//
// Параметры:
//  Действие - СправочникОбъект.ДействияИсполнения - объект действие.
//
Процедура ОбновитьПроцессыПоПодчиненнымИсполнениямДействия(Действие)
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	Если АктивныеПроцессы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессИзменныйПоЗаявке = БизнесПроцессы.Рассмотрение.ПустаяСсылка();
	СведенияОПереносеСрока = СведенияОПереносеСрокаИзДопСвойствДействия(Действие);
	Если ЗначениеЗаполнено(СведенияОПереносеСрока.ЗаявкаНаПеренос) Тогда
		ПроцессИзменныйПоЗаявке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СведенияОПереносеСрока.ЗаявкаНаПеренос,"ПредметРассмотрения.БизнесПроцесс");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.ИдентификаторИсполнителя КАК ИдентификаторВышестоящего,
		|	Исполнение.Ссылка КАК Процесс
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК Исполнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО Исполнение.ГлавнаяЗадача = ЗадачаИсполнителя.Ссылка
		|ГДЕ
		|	Исполнение.Ссылка В(&Процессы)";
	Запрос.УстановитьПараметр("Процессы", АктивныеПроцессы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Процесс = Выборка.Процесс;
		ИдентификаторВышестоящего = Выборка.ИдентификаторВышестоящего;
		
		// Если исполнение направляется из задачи обработать резолюцию, то у главной задачи
		// процесса будет идентификатор не вышестоящего рассматривающего. Поэтому уточняем
		// идентификатор по таблице участников рассмотрения.
		СтрокаУчастника = Действие.Участники.Найти(ИдентификаторВышестоящего, "Идентификатор");
		Если СтрокаУчастника = Неопределено Тогда
			ВызватьИсключение СтрШаблон( 
				НСтр("ru = 'Не удалось обновить процесс по подчиненному исполнению.
					|Причина: не найден рассматривающий ""%1"" в действии ""%2"".'"),
				ИдентификаторВышестоящего,
				Действие.Ссылка);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаУчастника.ВышестоящийУчастник) Тогда
			ИдентификаторВышестоящего = СтрокаУчастника.ВышестоящийУчастник;
		КонецЕсли;
			
		ПодчиненноеИсполнение = Справочники.ДействияИсполнения.ПодчиненноеИсполнение(
			Действие, ИдентификаторВышестоящего);
		
		ЗаблокироватьДанныеДляРедактирования(Процесс);
		
		ПроцессОбъект = Процесс.ПолучитьОбъект();
		СтруктураДляЗаполненияПроцесса = ПроцессОбъект.СтруктураДанныхДляЗаполнения();
		СтруктураДляЗаполненияПроцесса.ВедущаяЗадача = ПроцессОбъект.ВедущаяЗадача;
		
		СтрокаРассматривающего = Действие.Участники.Найти(ИдентификаторВышестоящего, "Идентификатор");
		Если ТипЗнч(СтрокаРассматривающего.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
			СтруктураДляЗаполненияПроцесса.Автор = СтрокаРассматривающего.Участник;
		Иначе
			СведенияОбУчастниках = 
				РегистрыСведений.СведенияОбУчастникахДействий.ПолучитьСведенияОбУчастникахДействия(
					Действие.Ссылка);
			СведенияОбРассматривающем = СведенияОбУчастниках[ИдентификаторВышестоящего];
			Если СведенияОбРассматривающем <> Неопределено Тогда
				СтруктураДляЗаполненияПроцесса.Автор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СведенияОбРассматривающем.ФактическийИсполнитель, "Факт");
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтруктураДляЗаполненияПроцесса.Автор)
			И ЗначениеЗаполнено(ПроцессОбъект.Автор) Тогда
			
			СтруктураДляЗаполненияПроцесса.Автор = ПроцессОбъект.Автор;
		КонецЕсли;
		
		СтрокаПервогоИсполнителяВДействии = Неопределено;
		СтрокаПроверяющегоВДействии = Неопределено;
		
		Для Каждого СтрокаУчастника Из ПодчиненноеИсполнение Цикл
			
			Если СтрокаУчастника.ФункцияУчастника = 
				Перечисления.ФункцииУчастниковИсполнения.Исполнитель Тогда
				
				СтрокаИсполнителя = СтруктураДляЗаполненияПроцесса.Исполнители.Добавить();
				
				СтрокаИсполнителя.Ответственный = СтрокаУчастника.Ответственный;
				
				СтрокаИсполнителя.ПорядокИсполнения = 
					Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
				
				СтрокаИсполнителя.ИдентификаторИсполнителя = СтрокаУчастника.Идентификатор;
				СтрокаИсполнителя.Исполнитель = СтрокаУчастника.Участник;
				СтрокаИсполнителя.Описание = СтрокаУчастника.ОписаниеОсобое;
				СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения = 
					СтрокаУчастника.ВариантУстановкиСрока;
				
				СтрокаИсполнителя.СрокИсполнения = СтрокаУчастника.Срок;
				СтрокаИсполнителя.СрокИсполненияДни = СтрокаУчастника.СрокДни;
				СтрокаИсполнителя.СрокИсполненияЧасы = СтрокаУчастника.СрокЧасы;
				СтрокаИсполнителя.СрокИсполненияМинуты = СтрокаУчастника.СрокМинуты;
				
				Если СтрокаПервогоИсполнителяВДействии = Неопределено Тогда
					СтрокаПервогоИсполнителяВДействии = СтрокаУчастника;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаПроверяющегоВДействии = Неопределено
				И СтрокаУчастника.ФункцияУчастника = 
				Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
				
				СтрокаПроверяющегоВДействии = СтрокаУчастника;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаПроверяющегоВДействии <> Неопределено Тогда
			СтруктураДляЗаполненияПроцесса.Проверяющий = СтрокаПроверяющегоВДействии.Участник;
			
			СтруктураДляЗаполненияПроцесса.ИдентификаторПроверяющего = 
				СтрокаПроверяющегоВДействии.Идентификатор;
			
			СтруктураДляЗаполненияПроцесса.ВариантУстановкиСрокаОбработкиРезультатов = 
				СтрокаУчастника.ВариантУстановкиСрока;
			
			СтруктураДляЗаполненияПроцесса.СрокОбработкиРезультатов = 
				СтрокаПроверяющегоВДействии.Срок;
			
			СтруктураДляЗаполненияПроцесса.СрокОбработкиРезультатовДни = 
				СтрокаПроверяющегоВДействии.СрокДни;
			
			СтруктураДляЗаполненияПроцесса.СрокОбработкиРезультатовЧасы = 
				СтрокаПроверяющегоВДействии.СрокЧасы;
			
			СтруктураДляЗаполненияПроцесса.СрокОбработкиРезультатовМинуты = 
				СтрокаПроверяющегоВДействии.СрокМинуты;
		КонецЕсли;
		
		Если СтрокаПервогоИсполнителяВДействии <> Неопределено Тогда
			СтруктураДляЗаполненияПроцесса.Наименование = 
				СтрокаПервогоИсполнителяВДействии.НаименованиеЗадачи;
			
			СтруктураДляЗаполненияПроцесса.Описание = СтрокаПервогоИсполнителяВДействии.Описание;
		КонецЕсли;
		
		СтруктураДляЗаполненияПроцесса.Важность = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие.Ссылка, "Важность");
		
		СтруктураДляЗаполненияПроцесса.ВариантИсполнения = 
			Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		
		Если ПроцессИзменныйПоЗаявке = Процесс Тогда
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", СведенияОПереносеСрока.ПричинаПереносаСрока);
			ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", СведенияОПереносеСрока.ЗаявкаНаПеренос);
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
				ПроцессОбъект, ПараметрыЗаписи);
		КонецЕсли;
		
		ПроцессОбъект.ОбновитьАктивныйПроцесс(СтруктураДляЗаполненияПроцесса);
		
		ПроверитьЗаполнениеПроцессаДляВыполнения(ПроцессОбъект);
		
		РазблокироватьДанныеДляРедактирования(Процесс);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрерываниеПроцессов

// Прерывает процессы рассмотрения исключенных рассматривающих из действия.
//
// Параметры:
//  Действие - СправочникОбъект.ДействияОзнакомления - объект действие.
//
Процедура ПрерватьПроцессыИсключенныхРассматривающихИзДействия(Действие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	
	Если АктивныеПроцессы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ПроцессыРассмотрения = Новый Массив;
	Для Каждого АктивныйПроцесс Из АктивныеПроцессы Цикл
		Если ТипЗнч(АктивныйПроцесс) <> Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
			Продолжить;
		КонецЕсли;
		ПроцессыРассмотрения.Добавить(АктивныйПроцесс);
	КонецЦикла;
	
	Процессы_ИДРассматриваюших = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ПроцессыРассмотрения, "ИдентификаторИсполнителя");
	
	РассматривающиеДействие = Новый Соответствие;
	Для Каждого СтрокаУчатсника Из Справочники.ДействияИсполнения.УчастникиДействия(Действие.Ссылка) Цикл
		Если СтрокаУчатсника.Функция = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
			РассматривающиеДействие[СтрокаУчатсника.Идентификатор] = Истина;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ПроцессРассмотрения Из ПроцессыРассмотрения Цикл
			
			ИДРассматрвающего = Процессы_ИДРассматриваюших[ПроцессРассмотрения];
			Если РассматривающиеДействие[ИДРассматрвающего] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаблокироватьДанныеДляРедактирования(ПроцессРассмотрения);
			ПрерватьПроцессДействия(
				ПроцессРассмотрения,
				НСтр("ru = 'Рассматривающий исключен из действия'"));
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Прерывает процесс действия.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка
//
Процедура ПрерватьПроцессДействия(Процесс, Причина)
	
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван;
	ПроцессОбъект.ПричинаПрерывания = Причина;
	РаботаСБизнесПроцессамиВызовСервера.ОтключитьПроверкуВозможностиИзмененияСостоянияПроцесса(ПроцессОбъект);
	ПроцессОбъект.Записать();
	
	Если ЗначениеЗаполнено(ПроцессОбъект.ВедущаяЗадача) Тогда
		ЗадачаОбъект = ПроцессОбъект.ВедущаяЗадача.ПолучитьОбъект();
		Если ЗадачаОбъект.Выполнена = Ложь Тогда
			ЗадачаОбъект.Выполнена = Истина;
			РаботаСБизнесПроцессами.ЗаписатьЗадачу(ЗадачаОбъект, "ПростаяЗапись");
		КонецЕсли;
	КонецЕсли;
	
	ПротоколированиеРаботыСотрудников.ЗаписатьПрерываниеБизнесПроцесса(Процесс);
	
КонецПроцедуры

// Прерывает процессы исполнения исключенных из действия пунктов.
//
// Параметры:
//  Действие - СправочникОбъект.ДействияИсполнения - объект действие.
//
Процедура ПрерватьПроцессыИсключенныхИзДействияПунктов(Действие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействияСИдентификаторамиПунктов(
		Действие.Ссылка, Истина);
	
	Если АктивныеПроцессы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ПроцессыДляУдаления = Новый Массив;
	Для Каждого Процесс Из АктивныеПроцессы Цикл
		Если ТипЗнч(Процесс.Значение) <> Тип("БизнесПроцессСсылка.Исполнение") Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс.Значение, "ГлавнаяЗадача")) Тогда
			Продолжить;
		КонецЕсли;
		АктивныйПроцесс = Процесс.Значение;
		ИдентификаторПункта = Процесс.Ключ;
	
		Если Не ЗначениеЗаполнено(ИдентификаторПункта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если пункт удален, то процесс можно прервать.
		Строка = Действие.Пункты.Найти(ИдентификаторПункта, "Идентификатор");
		Если Строка = Неопределено Тогда
			ПроцессыДляУдаления.Добавить(АктивныйПроцесс);
		КонецЕсли;
	КонецЦикла;
	
	Если ПроцессыДляУдаления.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого Процесс Из ПроцессыДляУдаления Цикл
			
			ЗаблокироватьДанныеДляРедактирования(Процесс);
			ПрерватьПроцессДействия(
				Процесс,
				НСтр("ru = 'Пункт исключен из действия'"));
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Прерывает действие ознакомления
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения - объект действие.
//
Процедура ПрерватьДействиеОзнакомления(Действие) Экспорт
	
	ИспользоватьЗаданияФО = ПолучитьФункциональнуюОпцию("ИспользоватьЗадания");
	
	ИдентификаторыУчастников = РегистрыСведений.УчастникиОзнакомлений.ИдентификаторыУчастников(Действие);
	ИдентификаторыВИсточнике = Документы.ДействиеЗадачи.ИдентификаторыВИсточнике(Действие);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ИдентификаторыУчастников,
		ИдентификаторыВИсточнике,
		Истина);
	
	// запишем задания или сразу пометим ДействиеЗадачи
	Для Каждого ИдентификаторУчастника Из ИдентификаторыУчастников Цикл
		
		Если Не ИспользоватьЗаданияФО Тогда // файловый вариант
			ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоДействиюОзнакомления(
				Действие,
				ИдентификаторУчастника);
			
		Иначе	
			// создадим задание      
			ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеОбновитьЗадачуУчастникаМассовогоОзнакомления(
				Действие, ИдентификаторУчастника);
		КонецЕсли;
		
	КонецЦикла;	
	
	// тут документ.Задача пометим на удаление          
	НеОбновлятьДействияЗадачи = Истина;
	ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Действие,, НеОбновлятьДействияЗадачи);

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСтруктурДанныхДляРеквизитовПроцессов

// Заполняет данными действия структуру, полученную методом СтруктураДанныхДляЗаполнения в модуле процесса Подписания
// 
// Параметры:
//  СтруктураДляЗаполнения - См. в модуле объекта Подписание СтруктураДанныхДляЗаполнения()
//  Действие - СправочникОбъект.ДействияИсполнения - объект действие.
//  ДопустимыеУчастники - Соответствие
//   * Ключ - УникальныйИдентификатор - идентификатор участника.
//   * Значение - Булево - всегда Истина
//  ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя - задача связи с процессом обработки.
//
Процедура ЗаполнитьСтруктуруДляПроцессаПодписания(
	СтруктураДляЗаполнения, Действие, ДопустимыеУчастники, ВедущаяЗадача = Неопределено)
	
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		СтруктураДляЗаполнения.ВедущаяЗадача = ВедущаяЗадача;
	КонецЕсли;
	
	СтруктураДляЗаполнения.Автор = Действие.Автор;
	Если Не ЗначениеЗаполнено(СтруктураДляЗаполнения.Важность) Тогда 
		Если ЗначениеЗаполнено(Действие.Важность) Тогда
			СтруктураДляЗаполнения.Важность = Действие.Важность; 
		Иначе 
			СтруктураДляЗаполнения.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		КонецЕсли;
	КонецЕсли;
	
	СпособыПодписанияДействийИПроцессов = Новый Соответствие();
	СпособыПодписанияДействийИПроцессов[Перечисления.СпособыПодписанияПредметаДействия.УЭП] =
		Перечисления.СпособыПодписанияПредметаПроцесса.УЭП;
	СпособыПодписанияДействийИПроцессов[Перечисления.СпособыПодписанияПредметаДействия.ПЭП] =
		Перечисления.СпособыПодписанияПредметаПроцесса.ПЭП;
	СпособыПодписанияДействийИПроцессов[Перечисления.СпособыПодписанияПредметаДействия.НаБумаге] =
		Перечисления.СпособыПодписанияПредметаПроцесса.НаБумаге;
	
	СтруктураДляЗаполнения.СпособПодписания = 
		СпособыПодписанияДействийИПроцессов[Действие.СпособПодписания];
	
	ПорядокВыполненияЭтапДействийИПроцессов = Новый Соответствие();
	ПорядокВыполненияЭтапДействийИПроцессов[Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно] = 
		Перечисления.ПорядокВыполненияЭтапаПроцесса.Параллельно;
	ПорядокВыполненияЭтапДействийИПроцессов[Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно] = 
		Перечисления.ПорядокВыполненияЭтапаПроцесса.Последовательно;
	
	СтруктураДляЗаполнения.ПорядокВыполненияУчастниками = 
		ПорядокВыполненияЭтапДействийИПроцессов[Действие.ПорядокВыполненияУчастниками];
	СтруктураДляЗаполнения.Предметы = Действие.Предмет;
	
	СтруктураДляЗаполнения.КоличествоИтераций = 1;
	
	// Этапы
	Для Каждого СтрокаЭтапа Из Действие.Этапы Цикл
		
		СтрокаЭтапаПроцесса = СтруктураДляЗаполнения.Этапы.Добавить();
		СтрокаЭтапаПроцесса.Идентификатор = СтрокаЭтапа.Идентификатор;
		СтрокаЭтапаПроцесса.НаименованиеЭтапа = СтрокаЭтапа.НаименованиеЭтапа;
		
		СтрокаЭтапаПроцесса.ПорядокВыполненияУчастниками = 
			ПорядокВыполненияЭтапДействийИПроцессов[СтрокаЭтапа.ПорядокВыполненияУчастниками];
	
	КонецЦикла;
		
	// Участники
		
	ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;
	
	СтрокиУчастниковПроцесса = Новый Соответствие();
	
	Для Каждого УчастникДействия Из Действие.Участники Цикл
		
		Если ЗначениеЗаполнено(УчастникДействия.ВышестоящийУчастник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДопустимыеУчастники[УчастникДействия.Идентификатор] <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		УчастникПроцесса = СтруктураДляЗаполнения.Участники.Добавить();
		УчастникПроцесса.Этап = УчастникДействия.ИдентификаторЭтапа;
		УчастникПроцесса.Идентификатор = УчастникДействия.Идентификатор;
		
		УчастникПроцесса.Участник = УчастникДействия.Участник;
		УчастникПроцесса.Подписывающий = УчастникДействия.Участник;
		
		УчастникПроцесса.Описание = УчастникДействия.Описание;
		
		УчастникПроцесса.ВариантУстановкиСрокаИсполнения = УчастникДействия.ВариантУстановкиСрока;
		УчастникПроцесса.СрокИсполнения = УчастникДействия.Срок;
		УчастникПроцесса.СрокИсполненияДни = УчастникДействия.СрокДни;
		УчастникПроцесса.СрокИсполненияЧасы = УчастникДействия.СрокЧасы;
		УчастникПроцесса.СрокИсполненияМинуты = УчастникДействия.СрокМинуты;
		
		Если УчастникДействия.ФункцияУчастника = 
			Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
			
			УчастникПроцесса.ТочкаМаршрута = ТочкиМаршрута.Подписать;
		ИначеЕсли УчастникДействия.ФункцияУчастника = 
			Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат Тогда
			
			УчастникПроцесса.ТочкаМаршрута = ТочкиМаршрута.ОбработатьРезультат;
		КонецЕсли;
		
		СтрокиУчастниковПроцесса[УчастникПроцесса.Идентификатор] = УчастникПроцесса;
				
	КонецЦикла;
	
	Для Каждого УчастникДействия Из Действие.Участники Цикл
		
		Если Не ЗначениеЗаполнено(УчастникДействия.ВышестоящийУчастник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДопустимыеУчастники[УчастникДействия.Идентификатор] <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		УчастникПроцесса = СтрокиУчастниковПроцесса[УчастникДействия.ВышестоящийУчастник];
		Если УчастникПроцесса = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		УчастникПроцесса.Подписывающий = УчастникПроцесса.Участник; 
		УчастникПроцесса.Участник = УчастникДействия.Участник;
		
		Если УчастникПроцесса.Подписывающий <> УчастникПроцесса.Участник Тогда
			УчастникПроцесса.ТочкаМаршрута = ТочкиМаршрута.ОбеспечитьПодписание;
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры

// Возвращает допустимых участники действия, для передачи в процесс..
// 
// Параметры:
//  Действие - СправочникОбъект.ДействияПодписания 
//  Процесс - БизнесПроцессОбъект.Подписание
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - УникальныйИдентификатор - идентификатор участника.
//   * Значение - Булево - всегда Истина.
//
Функция ДопустимыеУчастникиДействияПодписания(Действие, Процесс)
	
	ДопустимыеУчастники = Новый Соответствие();
	
	// Берем всех участников находящихся в процессе.
	Для Каждого СтрокаТаблицы Из Процесс.Участники Цикл
		ДопустимыеУчастники[СтрокаТаблицы.Идентификатор] = Истина;
	КонецЦикла;
	
	// Добавляем всех обеспечивающих подписание, которые в процессе.
	Для Каждого СтрокаТаблицы Из Действие.Участники Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВышестоящийУчастник)
			Или ДопустимыеУчастники[СтрокаТаблицы.ВышестоящийУчастник] <> Истина Тогда
			
			Продолжить;
		КонецЕсли;
		ДопустимыеУчастники[СтрокаТаблицы.Идентификатор] = Истина;
	КонецЦикла;
		
	// Дополняем теми участниками действия, у которых нет результата.
	ВсеСостоянияИРезультаты = ДействияСервер.ВсеСостоянияИРезультаты(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие.Ссылка));
	
	УчастникиСРезультами = Новый Соответствие();
	Для Каждого СтрокаТаблицы Из ВсеСостоянияИРезультаты Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторУчастника)
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.Результат) Тогда
			
			Продолжить;
		КонецЕсли;
		
		УчастникиСРезультами[СтрокаТаблицы.ИдентификаторУчастника] = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Действие.Участники Цикл
		Если УчастникиСРезультами[СтрокаТаблицы.Идентификатор] = Истина
			Или УчастникиСРезультами[СтрокаТаблицы.ВышестоящийУчастник] = Истина Тогда
		
			Продолжить;
		КонецЕсли;
		ДопустимыеУчастники[СтрокаТаблицы.Идентификатор] = Истина;
	КонецЦикла;
	
	Возврат ДопустимыеУчастники;
	
КонецФункции

// Заполняет данными действия структуру, полученную методом СтруктураДанныхДляЗаполнения в модуле процесса Согласование
// 
// Параметры:
//  СтруктураДляЗаполнения - См. в модуле объекта Согласование СтруктураДанныхДляЗаполнения()
//  Действие - СправочникОбъект.ДействияСогласования - объект действие.
//  ДопустимыеУчастники - Соответствие Из КлючИЗначение:
//   * Ключ - УникальныйИдентификатор - идентификатор участника.
//   * Значение - Булево - всегда Истина
//  ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя, Неопределено - задача связи с процессом обработки.
//
Процедура ЗаполнитьСтруктуруДляПроцессаСогласования(
	СтруктураДляЗаполнения, Действие, ДопустимыеУчастники, ВедущаяЗадача = Неопределено)
	
	СтруктураДляЗаполнения.Автор = Действие.Автор;
	
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		СтруктураДляЗаполнения.ВедущаяЗадача = ВедущаяЗадача;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураДляЗаполнения.Важность) Тогда
		Если ЗначениеЗаполнено(Действие.Важность) Тогда
			СтруктураДляЗаполнения.Важность = Действие.Важность; 
		Иначе 
			СтруктураДляЗаполнения.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие.Предмет) Тогда
		
		ПредметыДействия = Новый Массив;
		ПредметыДействия.Добавить(Действие.Предмет);
		
		СтруктураДляЗаполнения.Наименование = 
			МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
				Действие.ВидДействия, ПредметыДействия);
	КонецЕсли;
	
	// перенос участников действия в процесс
	СтруктураДляЗаполнения.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно;
	
	ПоследовательностьЭтапов = Новый Массив;
	ПорядокВыполненияЭтапов = Новый Соответствие();
	ЭтапыИУчастники = Новый Соответствие();
	Для Каждого СтрокаЭтапа Из Действие.Этапы Цикл
		ПоследовательностьЭтапов.Добавить(СтрокаЭтапа.Идентификатор);
		ПорядокВыполненияЭтапов[СтрокаЭтапа.Идентификатор] = 
			СтрокаЭтапа.ПорядокВыполненияУчастниками;
		ЭтапыИУчастники[СтрокаЭтапа.Идентификатор] = Новый Массив;
	КонецЦикла;
	Если ПоследовательностьЭтапов.Количество() = 0 Тогда
		
		ИдентификаторЭтапа = УникальныйИдентификаторПустой();
		ПоследовательностьЭтапов.Добавить(ИдентификаторЭтапа);
		
		Если ЗначениеЗаполнено(Действие.ПорядокВыполненияУчастниками)
			И Действие.ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно Тогда
			ПорядокВыполненияЭтапов[ИдентификаторЭтапа] = 
				Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно;
		Иначе
			ПорядокВыполненияЭтапов[ИдентификаторЭтапа] = 
				Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно;
		КонецЕсли;
		ЭтапыИУчастники[ИдентификаторЭтапа] = Новый Массив;
	КонецЕсли;
		
	Для Каждого УчастникДействия Из Действие.Участники Цикл
		
		Если ДопустимыеУчастники[УчастникДействия.Идентификатор] <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если УчастникДействия.ФункцияУчастника = 
			Перечисления.ФункцииУчастниковСогласования.Согласующий Тогда
			
			ЭтапыИУчастники[УчастникДействия.ИдентификаторЭтапа].Добавить(УчастникДействия);
			
		ИначеЕсли УчастникДействия.ФункцияУчастника = 
			Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат Тогда
				
			СтруктураДляЗаполнения.ОбрабатывающийРезультат = УчастникДействия.Участник;
			СтруктураДляЗаполнения.ИдентификаторОбрабатывающегоРезультат = УчастникДействия.Идентификатор;
			
			СтруктураДляЗаполнения.ВариантУстановкиСрокаОбработкиРезультатов = 
				УчастникДействия.ВариантУстановкиСрока;
			
			СтруктураДляЗаполнения.СрокОбработкиРезультатов = УчастникДействия.Срок;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовДни = УчастникДействия.СрокДни;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовЧасы = УчастникДействия.СрокЧасы;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовМинуты = УчастникДействия.СрокМинуты;
		КонецЕсли;
		
	КонецЦикла;
	
	ПорядокДляПервогоУчастника = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
		
	Для Каждого ИдентификаторЭтапа Из ПоследовательностьЭтапов Цикл
		
		ЭтоПервыйУчастник = Истина;
		
		Если ПорядокВыполненияЭтапов[ИдентификаторЭтапа] = 
			Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно Тогда
			
			ПорядокДляПоследующихУчастников = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
			
		ИначеЕсли ПорядокВыполненияЭтапов[ИдентификаторЭтапа] = 
			Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно Тогда
				
			ПорядокДляПоследующихУчастников = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
		КонецЕсли;
		
		Для Каждого УчастникДействия Из ЭтапыИУчастники[ИдентификаторЭтапа] Цикл
			
			УчастникПроцесса = СтруктураДляЗаполнения.Исполнители.Добавить();
			УчастникПроцесса.ИдентификаторИсполнителя = УчастникДействия.Идентификатор;
			УчастникПроцесса.Исполнитель = УчастникДействия.Участник;
			
			УчастникПроцесса.ВариантУстановкиСрокаИсполнения = 
				УчастникДействия.ВариантУстановкиСрока;
			
			УчастникПроцесса.СрокИсполнения = УчастникДействия.Срок;
			УчастникПроцесса.СрокИсполненияДни = УчастникДействия.СрокДни;
			УчастникПроцесса.СрокИсполненияЧасы = УчастникДействия.СрокЧасы;
			УчастникПроцесса.СрокИсполненияМинуты = УчастникДействия.СрокМинуты;
			
			УчастникПроцесса.Описание = УчастникДействия.Описание;
			
			Если ЭтоПервыйУчастник Тогда
				УчастникПроцесса.ПорядокСогласования = ПорядокДляПервогоУчастника;
			Иначе
				УчастникПроцесса.ПорядокСогласования = ПорядокДляПоследующихУчастников;
			КонецЕсли;
			
			ЭтоПервыйУчастник = Ложь;
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДляЗаполнения.Предметы = Действие.Предмет;	
	СтруктураДляЗаполнения.ПодписыватьЭП = Действие.ПодписыватьУЭП;
	
КонецПроцедуры

// Возвращает допустимых участники действия, для передачи в процесс..
// 
// Параметры:
//  Действие - СправочникОбъект.ДействияСогласования 
//  Процесс - БизнесПроцессОбъект.Согласование
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - УникальныйИдентификатор - идентификатор участника.
//   * Значение - Булево - всегда Истина.
//
Функция ДопустимыеУчастникиДействияСогласования(Действие, Процесс)
	
	ДопустимыеУчастники = Новый Соответствие();
	
	// Берем всех участников находящихся в процессе.
	
	Для Каждого СтрокаТаблицы Из Процесс.Исполнители Цикл
		ДопустимыеУчастники[СтрокаТаблицы.ИдентификаторИсполнителя] = Истина;
	КонецЦикла;
	
	ДопустимыеУчастники[Процесс.ИдентификаторОбрабатывающегоРезультат] = Истина;
	
	// Дополняем теми участниками действия, у которых нет результата.
	
	ВсеСостоянияИРезультаты = ДействияСервер.ВсеСостоянияИРезультаты(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие.Ссылка));
	
	УчастникиСРезультами = Новый Соответствие();
	Для Каждого СтрокаТаблицы Из ВсеСостоянияИРезультаты Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторУчастника)
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.Результат) Тогда
			
			Продолжить;
		КонецЕсли;
		
		УчастникиСРезультами[СтрокаТаблицы.ИдентификаторУчастника] = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Действие.Участники Цикл
		Если УчастникиСРезультами[СтрокаТаблицы.Идентификатор] = Истина Тогда
			Продолжить;
		КонецЕсли;
		ДопустимыеУчастники[СтрокаТаблицы.Идентификатор] = Истина;
	КонецЦикла;
	
	Возврат ДопустимыеУчастники;
	
КонецФункции

// Заполняет данными действия структуру, полученную методом СтруктураДанныхДляЗаполнения в модуле процесса Регистрация
// 
// Параметры:
//  СтруктураДляЗаполнения - См. в модуле объекта Регистрация СтруктураДанныхДляЗаполнения()
//  Действие - СправочникОбъект.ДействиеРегистрация - объект действие.
//  ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя - задача связи с процессом обработки.
//
Процедура ЗаполнитьСтруктуруДляПроцессаРегистрации(СтруктураДляЗаполнения, Действие, ВедущаяЗадача)
	
	СтруктураДляЗаполнения.Автор = Действие.Автор;
	
	СтруктураДляЗаполнения.ВедущаяЗадача = ВедущаяЗадача;
	
	Если Не ЗначениеЗаполнено(СтруктураДляЗаполнения.Важность) Тогда 
		Если ЗначениеЗаполнено(Действие.Важность) Тогда
			СтруктураДляЗаполнения.Важность = Действие.Важность; 
		Иначе 
			СтруктураДляЗаполнения.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		КонецЕсли;
	КонецЕсли;
	
	// Наименование процесса.
	СтруктураДляЗаполнения.Наименование = Строка(Действие.ВидДействия);
	Если ЗначениеЗаполнено(Действие.Предмет) Тогда
		
		ПредметыДействия = Новый Массив;
		ПредметыДействия.Добавить(Действие.Предмет);
		
		СтруктураДляЗаполнения.Наименование = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			Действие.ВидДействия, ПредметыДействия);
	КонецЕсли;
	
	// перенос участников действия в процесс
	
	ФункцииУчастников = Перечисления.ФункцииУчастниковРегистрации;
	
	Для Каждого УчастникДействия Из Действие.Участники Цикл
		
		Если УчастникДействия.ФункцияУчастника = ФункцииУчастников.Регистратор Тогда
			
			СтруктураДляЗаполнения.Исполнитель = УчастникДействия.Участник;
			СтруктураДляЗаполнения.ИдентификаторИсполнителя = УчастникДействия.Идентификатор;
			
			СтруктураДляЗаполнения.ВариантУстановкиСрокаИсполнения = 
				УчастникДействия.ВариантУстановкиСрока;
			
			СтруктураДляЗаполнения.СрокИсполнения = УчастникДействия.Срок;
			СтруктураДляЗаполнения.СрокИсполненияДни = УчастникДействия.СрокДни;
			СтруктураДляЗаполнения.СрокИсполненияЧасы = УчастникДействия.СрокЧасы;
			СтруктураДляЗаполнения.СрокИсполненияМинуты = УчастникДействия.СрокМинуты;
			
			СтруктураДляЗаполнения.Описание = УчастникДействия.Описание;
			
		ИначеЕсли УчастникДействия.ФункцияУчастника = ФункцииУчастников.ОбрабатывающийРезультат Тогда
			
			СтруктураДляЗаполнения.ОбрабатывающийРезультат = УчастникДействия.Участник;
			СтруктураДляЗаполнения.ИдентификаторОбрабатывающегоРезультат = УчастникДействия.Идентификатор;
			
			СтруктураДляЗаполнения.ВариантУстановкиСрокаОбработкиРезультатов = 
				УчастникДействия.ВариантУстановкиСрока;
			
			СтруктураДляЗаполнения.СрокОбработкиРезультатов = УчастникДействия.Срок;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовДни = УчастникДействия.СрокДни;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовЧасы = УчастникДействия.СрокЧасы;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовМинуты = УчастникДействия.СрокМинуты;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДляЗаполнения.Предметы = Действие.Предмет;
	
КонецПроцедуры

// Заполняет данными действия структуру, полученную методом СтруктураДанныхДляЗаполнения в модуле процесса Утверждение
// 
// Параметры:
//  СтруктураДляЗаполнения - См. в модуле объекта Утверждение СтруктураДанныхДляЗаполнения()
//  Действие - СправочникОбъект.ДействиеУтверждение - объект действие.
//  ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя - задача связи с процессом обработки.
//
Процедура ЗаполнитьСтруктуруДляПроцессаУтверждения(СтруктураДляЗаполнения, Действие, ВедущаяЗадача)
	
	СтруктураДляЗаполнения.Автор = Действие.Автор;
	
	СтруктураДляЗаполнения.ВедущаяЗадача = ВедущаяЗадача;
	Если Не ЗначениеЗаполнено(СтруктураДляЗаполнения.Важность) Тогда 
		Если ЗначениеЗаполнено(Действие.Важность) Тогда
			СтруктураДляЗаполнения.Важность = Действие.Важность; 
		Иначе 
			СтруктураДляЗаполнения.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		КонецЕсли;
	КонецЕсли;
	
	// Наименование процесса.
	СтруктураДляЗаполнения.Наименование = Строка(Действие.ВидДействия);
	Если ЗначениеЗаполнено(Действие.Предмет) Тогда
		
		ПредметыДействия = Новый Массив;
		ПредметыДействия.Добавить(Действие.Предмет);
		
		СтруктураДляЗаполнения.Наименование = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			Действие.ВидДействия, ПредметыДействия);
	КонецЕсли;
	
	// перенос участников действия в процесс
	
	ФункцииУчастников = Перечисления.ФункцииУчастниковУтверждения;
	
	Для Каждого УчастникДействия Из Действие.Участники Цикл
		
		Если УчастникДействия.ФункцияУчастника = ФункцииУчастников.Утверждающий Тогда
			
			СтруктураДляЗаполнения.Исполнитель = УчастникДействия.Участник;
			СтруктураДляЗаполнения.ИдентификаторИсполнителя = УчастникДействия.Идентификатор;
			
			СтруктураДляЗаполнения.ВариантУстановкиСрокаИсполнения = 
				УчастникДействия.ВариантУстановкиСрока;
			
			СтруктураДляЗаполнения.СрокИсполнения = УчастникДействия.Срок;
			СтруктураДляЗаполнения.СрокИсполненияДни = УчастникДействия.СрокДни;
			СтруктураДляЗаполнения.СрокИсполненияЧасы = УчастникДействия.СрокЧасы;
			СтруктураДляЗаполнения.СрокИсполненияМинуты = УчастникДействия.СрокМинуты;
			
			СтруктураДляЗаполнения.Описание = УчастникДействия.Описание;
			
		ИначеЕсли УчастникДействия.ФункцияУчастника = ФункцииУчастников.ОбрабатывающийРезультат Тогда
			
			СтруктураДляЗаполнения.ОбрабатывающийРезультат = УчастникДействия.Участник;
			СтруктураДляЗаполнения.ИдентификаторОбрабатывающегоРезультат = УчастникДействия.Идентификатор;
			
			СтруктураДляЗаполнения.ВариантУстановкиСрокаОбработкиРезультатов = 
				УчастникДействия.ВариантУстановкиСрока;
			
			СтруктураДляЗаполнения.СрокОбработкиРезультатов = УчастникДействия.Срок;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовДни = УчастникДействия.СрокДни;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовЧасы = УчастникДействия.СрокЧасы;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовМинуты = УчастникДействия.СрокМинуты;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДляЗаполнения.Предметы = Действие.Предмет;
	
КонецПроцедуры

// Заполняет данными действия структуру, полученную методом СтруктураДанныхДляЗаполнения в модуле процесса Ознакомление
// 
// Параметры:
//  СтруктураДляЗаполнения - См. в модуле объекта Ознакомление СтруктураДанныхДляЗаполнения()
//  Действие - СправочникОбъект.ДействиеОзнакомление - объект действие.
//  ДопустимыеУчастники - Соответствие
//   * Ключ - УникальныйИдентификатор - идентификатор участника.
//   * Значение - Булево - всегда Истина
//  ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя, Неопределено - задача связи с процессом обработки.
//
Процедура ЗаполнитьСтруктуруДляПроцессаОзнакомления(
	СтруктураДляЗаполнения, Действие, ДопустимыеУчастники, ВедущаяЗадача = Неопределено)
	
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		СтруктураДляЗаполнения.ВедущаяЗадача = ВедущаяЗадача;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураДляЗаполнения.Важность) Тогда
		Если ЗначениеЗаполнено(Действие.Важность) Тогда
			СтруктураДляЗаполнения.Важность = Действие.Важность; 
		Иначе 
			СтруктураДляЗаполнения.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		КонецЕсли;
	КонецЕсли;
	
	// Наименование процесса.
	СтруктураДляЗаполнения.Наименование = Строка(Действие.ВидДействия);
	Если ЗначениеЗаполнено(Действие.Предмет) Тогда
		
		ПредметыДействия = Новый Массив;
		ПредметыДействия.Добавить(Действие.Предмет);
		
		СтруктураДляЗаполнения.Наименование = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			Действие.ВидДействия, ПредметыДействия);
	КонецЕсли;
		
	Для Каждого УчастникДействия Из Действие.Участники Цикл
				
		Если ДопустимыеУчастники[УчастникДействия.Идентификатор] <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		УчастникПроцесса = СтруктураДляЗаполнения.Исполнители.Добавить();
		УчастникПроцесса.Исполнитель = УчастникДействия.Участник;
		УчастникПроцесса.ИдентификаторИсполнителя = УчастникДействия.Идентификатор;
				
		УчастникПроцесса.СрокИсполнения = УчастникДействия.Срок;
		УчастникПроцесса.СрокИсполненияДни = УчастникДействия.СрокДни;
		УчастникПроцесса.СрокИсполненияЧасы = УчастникДействия.СрокЧасы;
		УчастникПроцесса.СрокИсполненияМинуты = УчастникДействия.СрокМинуты;
		УчастникПроцесса.ВариантУстановкиСрокаИсполнения = УчастникДействия.ВариантУстановкиСрока;
		УчастникПроцесса.Описание = УчастникДействия.Описание;
	КонецЦикла;
	
	// Заполнение автора.
	СтруктураДляЗаполнения.Автор = Действие.Автор;	
	СтруктураДляЗаполнения.Предметы = Действие.Предмет;
	
КонецПроцедуры

// Возвращает допустимых участники действия, для передачи в процесс..
// 
// Параметры:
//  Действие - СправочникОбъект.ДействияОзнакомления 
//  Процесс - БизнесПроцессОбъект.Ознакомление
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - УникальныйИдентификатор - идентификатор участника.
//   * Значение - Булево - всегда Истина.
//
Функция ДопустимыеУчастникиДействияОзнакомления(Действие, Процесс)
	
	ДопустимыеУчастники = Новый Соответствие();
	
	// Берем всех участников находящихся в процессе.
	
	Для Каждого СтрокаТаблицы Из Процесс.Исполнители Цикл
		ДопустимыеУчастники[СтрокаТаблицы.ИдентификаторИсполнителя] = Истина;
	КонецЦикла;
		
	// Дополняем теми участниками действия, у которых нет результата.
	
	ВсеСостоянияИРезультаты = ДействияСервер.ВсеСостоянияИРезультаты(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие.Ссылка));
	
	УчастникиСРезультами = Новый Соответствие();
	Для Каждого СтрокаТаблицы Из ВсеСостоянияИРезультаты Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторУчастника)
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.Результат) Тогда
			
			Продолжить;
		КонецЕсли;
		
		УчастникиСРезультами[СтрокаТаблицы.ИдентификаторУчастника] = Истина;
	КонецЦикла;
	
	ИсточникДанныхАктивен = Ложь;
	
	Для Каждого СтрокаТаблицы Из Действие.Участники Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИсточникДанных) Тогда
			
			ИсточникДанныхАктивен = ОбщегоНазначенияДокументооборотПовтИсп.ИсточникАктивен(СтрокаТаблицы.ИсточникДанных);
			
			Если ИсточникДанныхАктивен Тогда
				Продолжить;
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если УчастникиСРезультами[СтрокаТаблицы.Идентификатор] = Истина Тогда
			Продолжить;
		КонецЕсли;
		ДопустимыеУчастники[СтрокаТаблицы.Идентификатор] = Истина;
		
	КонецЦикла;
	
	Возврат ДопустимыеУчастники;
	
КонецФункции

// Заполняет данными действия структуру, полученную методом СтруктураДанныхДляЗаполнения в модуле процесса Исполнение
// 
// Параметры:
//  СтруктураДляЗаполнения - См. в модуле объекта Исполнение СтруктураДанныхДляЗаполнения()
//  Действие - СправочникОбъект.ДействияИсполнения - объект действие.
//  ДопустимыеУчастники - Соответствие Из КлючИЗначение:
//   * Ключ - УникальныйИдентификатор - идентификатор участника.
//   * Значение - Булево - всегда Истина
//  ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя, Неопределено - задача связи с процессом обработки.
//  ИдентификаторПункта - УникальныйИдентификатор - ИД пункта, по которому заполняем структуру.
//
Процедура ЗаполнитьСтруктуруДляПроцессаИсполнения(
	СтруктураДляЗаполнения, Действие, ДопустимыеУчастники, ВедущаяЗадача = Неопределено, ИдентификаторПункта = Неопределено)
	
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		СтруктураДляЗаполнения.ВедущаяЗадача = ВедущаяЗадача;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураДляЗаполнения.Важность) Тогда 
		Если ЗначениеЗаполнено(Действие.Важность) Тогда
			СтруктураДляЗаполнения.Важность = Действие.Важность; 
		Иначе 
			СтруктураДляЗаполнения.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		КонецЕсли;
	КонецЕсли;
	
	// Если по пунктам, то берем описание пункта
	ОписаниеПункта = ""; НомерПункта = ""; АвторПункта = Справочники.Сотрудники.ПустаяСсылка();
	Если ЗначениеЗаполнено(ИдентификаторПункта) Тогда
		Строка = Действие.Пункты.Найти(ИдентификаторПункта, "Идентификатор");
		Если Строка <> Неопределено Тогда
			ОписаниеПункта = Строка.Описание;
			НомерПункта = Строка.Номер;
			АвторПункта = Строка.Автор;
		КонецЕсли;
	КонецЕсли;
			
	СтруктураДляЗаполнения.Описание = ОписаниеПункта;
	Если ЗначениеЗаполнено(Действие.Предмет) Тогда
		ПредметыДействия = Новый Массив;
		ПредметыДействия.Добавить(Действие.Предмет);
		Если ЗначениеЗаполнено(НомерПункта) Тогда
			ШаблонНаименования = СтрШаблон(НСтр("ru = 'Исполнить пункт № %1'"), НомерПункта);
		Иначе
			ШаблонНаименования = Действие.ВидДействия;
		КонецЕсли;
		
		СтруктураДляЗаполнения.Наименование = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			ШаблонНаименования, ПредметыДействия);
	КонецЕсли;
	
	// перенос участников действия в процесс
	
	Если ЗначениеЗаполнено(АвторПункта) Тогда
		СтруктураДляЗаполнения.Автор = АвторПункта;
	Иначе
		СтруктураДляЗаполнения.Автор = Действие.Автор;
	КонецЕсли;
	СтруктураДляЗаполнения.КоличествоИтераций = Действие.КоличествоИтераций;
	
	Для Каждого УчастникДействия Из Действие.Участники Цикл
		
		Если ЗначениеЗаполнено(УчастникДействия.ВышестоящийУчастник)
			И УчастникДействия.ВышестоящийУчастник <> УникальныйИдентификаторПустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДопустимыеУчастники[УчастникДействия.Идентификатор] <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если УчастникДействия.ФункцияУчастника = 
			Перечисления.ФункцииУчастниковИсполнения.Исполнитель Тогда
			
			УчастникПроцесса = СтруктураДляЗаполнения.Исполнители.Добавить();
			УчастникПроцесса.ИдентификаторИсполнителя = УчастникДействия.Идентификатор;
			УчастникПроцесса.Исполнитель = УчастникДействия.Участник;
			
			УчастникПроцесса.ВариантУстановкиСрокаИсполнения = 
				УчастникДействия.ВариантУстановкиСрока;
			
			УчастникПроцесса.СрокИсполнения = УчастникДействия.Срок;
			УчастникПроцесса.СрокИсполненияДни = УчастникДействия.СрокДни;
			УчастникПроцесса.СрокИсполненияЧасы = УчастникДействия.СрокЧасы;
			УчастникПроцесса.СрокИсполненияМинуты = УчастникДействия.СрокМинуты;
			УчастникПроцесса.НаименованиеЗадачи = УчастникДействия.НаименованиеЗадачи;
			УчастникПроцесса.Описание = ?(
				ЗначениеЗаполнено(УчастникДействия.ОписаниеОсобое),
				УчастникДействия.ОписаниеОсобое,
				УчастникДействия.Описание);
			УчастникПроцесса.Ответственный = УчастникДействия.Ответственный;
			
		ИначеЕсли УчастникДействия.ФункцияУчастника = 
			Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			
			СтруктураДляЗаполнения.Проверяющий = УчастникДействия.Участник;
			СтруктураДляЗаполнения.ИдентификаторПроверяющего = УчастникДействия.Идентификатор;
			
			СтруктураДляЗаполнения.ВариантУстановкиСрокаОбработкиРезультатов = 
				УчастникДействия.ВариантУстановкиСрока;
			
			СтруктураДляЗаполнения.СрокОбработкиРезультатов = УчастникДействия.Срок;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовДни = УчастникДействия.СрокДни;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовЧасы = УчастникДействия.СрокЧасы;
			СтруктураДляЗаполнения.СрокОбработкиРезультатовМинуты = УчастникДействия.СрокМинуты;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДляЗаполнения.Предметы = Действие.Предмет;
	
КонецПроцедуры

// Возвращает допустимых участники действия, для передачи в процесс..
// 
// Параметры:
//  Действие - СправочникОбъект.ДействияИсполнения 
//  Процесс - БизнесПроцессОбъект.Исполнение
//  ИдентификаторПункта - УникальныйИдентификатор - ИД пункта, для которого отбираем участников. 
//  	Если задан, то отбираем только исполнителей пункта. 
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - УникальныйИдентификатор - идентификатор участника.
//   * Значение - Булево - всегда Истина.
//
Функция ДопустимыеИсполнителиДействияИсполнения(Действие, Процесс, ИдентификаторПункта = Неопределено)
	
	ДопустимыеУчастники = Новый Соответствие();
	
	// Берем всех участников находящихся в процессе.
	
	Для Каждого СтрокаТаблицы Из Процесс.Исполнители Цикл
		ДопустимыеУчастники[СтрокаТаблицы.ИдентификаторИсполнителя] = Истина;
	КонецЦикла;
	
	ДопустимыеУчастники[Процесс.ИдентификаторПроверяющего] = Истина;
	
	// Дополняем теми участниками действия, у которых нет результата.
	
	ВсеСостоянияИРезультаты = ДействияСервер.ВсеСостоянияИРезультаты(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие.Ссылка));
	
	УчастникиСРезультами = Новый Соответствие();
	Для Каждого СтрокаТаблицы Из ВсеСостоянияИРезультаты Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторУчастника)
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.Результат) Тогда
			
			Продолжить;
		КонецЕсли;
				
		УчастникиСРезультами[СтрокаТаблицы.ИдентификаторУчастника] = Истина;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Действие.Участники Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВышестоящийУчастник)
			И СтрокаТаблицы.ВышестоящийУчастник <> УникальныйИдентификаторПустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Если УчастникиСРезультами[СтрокаТаблицы.Идентификатор] = Истина Тогда
			Продолжить
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИдентификаторПункта) 
			И СтрокаТаблицы.ИдентификаторПункта <> ИдентификаторПункта Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ФункцияУчастника <> 
			Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат
			
			И СтрокаТаблицы.ФункцияУчастника <> 
				Перечисления.ФункцииУчастниковИсполнения.Исполнитель Тогда
			
			Продолжить;
		КонецЕсли;
		
		ДопустимыеУчастники[СтрокаТаблицы.Идентификатор] = Истина;
		
	КонецЦикла;
	
	Возврат ДопустимыеУчастники;
	
КонецФункции

// Заполняет данными действия структуру, полученную методом СтруктураДанныхДляЗаполнения в модуле процесса Рассмотрение
// 
// Параметры:
//  СтруктураДляЗаполнения - См. в модуле объекта Рассмотрение СтруктураДанныхДляЗаполнения()
//  Действие - СправочникОбъект.ДействиеРассмотрение - объект действие.
//  ИДУчастника - УникальныйИдентификатор
//  ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя - задача связи с процессом обработки.
//
Процедура ЗаполнитьСтруктуруДляПроцессаРассмотрения(СтруктураДляЗаполнения, Действие, ИДУчастника,
	ВедущаяЗадача)
	
	СтруктураДляЗаполнения.ВедущаяЗадача = ВедущаяЗадача;
	
	СтрокаУчастника = Действие.Участники.Найти(ИДУчастника, "Идентификатор");
	
	СтруктураДляЗаполнения.Автор = Действие.Автор;
	СтруктураДляЗаполнения.Важность = Действие.Важность;
	
	ПредметыДействия = Новый Массив;
	ПредметыДействия.Добавить(Действие.Предмет);
	
	ЗаданиеПоДейтвию = НСтр("ru = 'Рассмотреть'");
	Если ЗначениеЗаполнено(СтрокаУчастника.НаименованиеЗадачи) Тогда
		ЗаданиеПоДейтвию = СтрокаУчастника.НаименованиеЗадачи;
	КонецЕсли;
	СтруктураДляЗаполнения.Наименование = СтрШаблон("%1 ""%2""",
		ЗаданиеПоДейтвию,
		ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(Действие.Предмет));
	
	СтруктураДляЗаполнения.ИдентификаторИсполнителя = ИДУчастника;
	СтруктураДляЗаполнения.Исполнитель = СтрокаУчастника.Участник;
	
	СтруктураДляЗаполнения.Описание = Действие.Описание;
	Если ЗначениеЗаполнено(СтрокаУчастника.Описание) Тогда
		СтруктураДляЗаполнения.Описание = СтрокаУчастника.Описание;
	КонецЕсли;
	
	СтруктураДляЗаполнения.ВариантУстановкиСрокаИсполнения = СтрокаУчастника.ВариантУстановкиСрока;
	СтруктураДляЗаполнения.СрокИсполнения = СтрокаУчастника.Срок;
	СтруктураДляЗаполнения.СрокИсполненияДни = СтрокаУчастника.СрокДни;
	СтруктураДляЗаполнения.СрокИсполненияЧасы = СтрокаУчастника.СрокЧасы;
	СтруктураДляЗаполнения.СрокИсполненияМинуты = СтрокаУчастника.СрокМинуты;
	
	СтруктураДляЗаполнения.Резолюция = СтрокаУчастника.ПроектРезолюции;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ФункцияУчастника", Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезолюцию);
	Отбор.Вставить("ВышестоящийУчастник", ИДУчастника);
	СтрокиОбрабатывающийРезолюцию = Действие.Участники.НайтиСтроки(Отбор);
	Если СтрокиОбрабатывающийРезолюцию.Количество() > 0 Тогда
		СтруктураДляЗаполнения.ОбрабатывающийРезолюцию = СтрокиОбрабатывающийРезолюцию[0].Участник;
		СтруктураДляЗаполнения.ИдентификаторОбрабатывающегоРезолюцию = СтрокиОбрабатывающийРезолюцию[0].Идентификатор;
		
		СтруктураДляЗаполнения.ВариантУстановкиСрокаОбработкиРезультатов = 
			СтрокиОбрабатывающийРезолюцию[0].ВариантУстановкиСрока;
		
		СтруктураДляЗаполнения.СрокОбработкиРезультатов = СтрокиОбрабатывающийРезолюцию[0].Срок;
		СтруктураДляЗаполнения.СрокОбработкиРезультатовДни = СтрокиОбрабатывающийРезолюцию[0].СрокДни;
		СтруктураДляЗаполнения.СрокОбработкиРезультатовЧасы = СтрокиОбрабатывающийРезолюцию[0].СрокЧасы;
		СтруктураДляЗаполнения.СрокОбработкиРезультатовМинуты = СтрокиОбрабатывающийРезолюцию[0].СрокМинуты;
	КонецЕсли;
	
	ПодчиненноеИсполнение = Справочники.ДействияИсполнения.ПодчиненноеИсполнение(
		Действие, ИДУчастника);
	
	ЗаполнитьНастройкиИсполненияПроцессаПоПодчиненномуИсполнениюДействия(
		СтруктураДляЗаполнения.НастройкиИсполненияОзнакомленияПроцесса,
		ПодчиненноеИсполнение,
		Действие.Ссылка);
	
	СтруктураДляЗаполнения.Предметы = Действие.Предмет;
	
КонецПроцедуры

// Возвращает допустимых участники действия, для передачи в процесс..
// 
// Параметры:
//  Действие - СправочникОбъект.ДействияИсполнения  
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - УникальныйИдентификатор - идентификатор участника.
//   * Значение - Булево - всегда Истина.
//
Функция ДопустимыеУчастникиРассмотренияВДействияИсполнения(Действие)
	
	ДопустимыеУчастники = Новый Соответствие();
		
	// Дополняем теми участниками действия, у которых нет результата.
	
	ВсеСостоянияИРезультаты = ДействияСервер.ВсеСостоянияИРезультаты(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие.Ссылка));
	
	УчастникиСРезультами = Новый Соответствие();
	Для Каждого СтрокаТаблицы Из ВсеСостоянияИРезультаты Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторУчастника)
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.Результат) Тогда
			
			Продолжить;
		КонецЕсли;
				
		УчастникиСРезультами[СтрокаТаблицы.ИдентификаторУчастника] = Истина;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Действие.Участники Цикл
		Если УчастникиСРезультами[СтрокаТаблицы.Идентификатор] = Истина Тогда
			Продолжить
		КонецЕсли;
		
		Если СтрокаТаблицы.ФункцияУчастника <> 
			Перечисления.ФункцииУчастниковИсполнения.Рассматривающий
			
			И СтрокаТаблицы.ФункцияУчастника <> 
				Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			
			Продолжить;
		КонецЕсли;
		
		ДопустимыеУчастники[СтрокаТаблицы.Идентификатор] = Истина;
	КонецЦикла;
	
	Возврат ДопустимыеУчастники;
	
КонецФункции

// Проверяет наличие получателей задач активного действия.
// 
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект 
//  ДопустимыеУчастники - Соответствие - см. функции:
//    - ДопустимыеУчастникиДействияПодписания,
//    - ДопустимыеУчастникиДействияСогласования,
//    - ДопустимыеУчастникиДействияОзнакомления,
//    - ДопустимыеИсполнителиДействияИсполнения,
//    - ДопустимыеУчастникиРассмотренияВДействияИсполнения
//
Процедура ПроверитьНаличиеПолучателейЗадачАктивногоДействия(Действие, ДопустимыеУчастники)
	
	ЕстьПолучателиЗадач = Ложь;
	
	ПоляУчастника = "Идентификатор, ФункцияУчастника";
	
	Для Каждого СтрокаТаблицы Из Действие.Участники Цикл
		
		УчастникДействия = Новый Структура(ПоляУчастника);
		ЗаполнитьЗначенияСвойств(УчастникДействия, СтрокаТаблицы);
			
		Если ДопустимыеУчастники[УчастникДействия.Идентификатор] <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(
			УчастникДействия.ФункцияУчастника) Тогда
			
			Продолжить;
		КонецЕсли;	
				
		ЕстьПолучателиЗадач = Истина;
		Прервать;
		
	КонецЦикла;
	
	Если Не ЕстьПолучателиЗадач Тогда
		ВызватьИсключение
			НСтр("ru = 'В действии должен быть хотя бы один участник, которому следует направить задачу.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие допустимых исполнителей.
// 
// Параметры:
//  ДопустимыеИсполнители - Соответствие - 
//   * Ключ - УникальныйИдентификатор -
//   * Значение - Булево
// 
// Возвращаемое значение:
//  Булево -
//  
Функция ЕстьДопустимыеИсполнителиДействияИсполнения(ДопустимыеИсполнители)
	
	Если ДопустимыеИсполнители.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДопустимыеИсполнители.Количество() = 1 
		И ДопустимыеИсполнители[УникальныйИдентификаторПустой()] <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

// Возвращает НомерИтерации (если процесс это поддерживает)
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка
//
// Возвращаемое значение:
//  Число,
//
Функция НомерИтерации(БизнесПроцесс)
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Подписание")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "НомерИтерации");
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Возвращает строки участников действия для изменения участников действия по задаче.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя,
//           Структура с полем ИдентификаторИсполнителя - задача процесса.  
// 	
// Возвращаемое значение:
//  Массив
//   * Структура с полями, соответствующими реквизитам таблицы Участники в действии. 
// 
Функция СтрокиУчастниковДействияПодписанияПоЗадаче(Действие, Задача)
	
	СтрокиУчастниковДействия = Новый Массив();
			
	Участники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Участники");
	Участники = Участники.Выгрузить();
		
	СтрокаУчастника = Участники.Найти(Задача.ИдентификаторИсполнителя, "Идентификатор");
	Если СтрокаУчастника <> Неопределено Тогда
		СтрокиУчастниковДействия.Добавить(
			ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаУчастника));	
	КонецЕсли;
	
	СтрокаУчастника = Участники.Найти(Задача.ИдентификаторИсполнителя, "ВышестоящийУчастник");
	Если СтрокаУчастника <> Неопределено Тогда
		СтрокиУчастниковДействия.Добавить(
			ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаУчастника));	
	КонецЕсли;
	
	Возврат СтрокиУчастниковДействия;
	
КонецФункции

#КонецОбласти