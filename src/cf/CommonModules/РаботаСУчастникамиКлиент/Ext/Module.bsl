// @strict-types


#Область ПрограммныйИнтерфейс

// Проверить участников по правилам коммуникаций. Возвращает результат проверки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма инициатор проверки.
//  ОбъектФормы - ДанныеФормыСтруктура - Объект формы инициаторы проверки:
//  * Участники - ДанныеФормыКоллекция - Участники:
//    ** Участник - ОпределяемыйТип.УчастникЗадач
//    ** ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//  УчитыватьТолькоПросмотр - Булево - Если Истина, тогда для формы в режиме ТолькоПросмотр вернётся результат 
//                                     с УчастникиПодходят=Истина. Иначе, проверка участников будет осуществляться даже
//                                     для не редактируемой формы.
// 
// Возвращаемое значение:
//  Структура - Проверить участников по правилам коммуникаций:
// * УчастникиПодходят - Булево - Признак, что участника подходят по правилам коммуникаций.
// * НеПрошедшиеПроверку - Массив Из см. РаботаСУчастниками.НеПрошедшийПроверкуПКУчастник
//
Функция ПроверитьУчастниковПоПравиламКоммуникаций(Форма, ОбъектФормы, УчитыватьТолькоПросмотр = Истина) Экспорт
	
	Результат = Новый Структура("УчастникиПодходят, НеПрошедшиеПроверку", Истина, Новый Массив);
	
	Если УчитыватьТолькоПросмотр И Форма.ТолькоПросмотр Тогда
		Возврат Результат;
	КонецЕсли;
	
	УчастникиПоВидамиУчастников = Новый Соответствие();
	КонтекстыПравилКоммуникацииПоВидамУчастников = Новый Соответствие;
	
	Для Каждого СтрокаУчастника Из ОбъектФормы.Участники Цикл
		
		Участник = Неопределено;
		ВидУчастника = Неопределено;
		
		СтрокаУчастника.Свойство("Участник", Участник);
		СтрокаУчастника.Свойство("ВидУчастника", ВидУчастника);
		
		// Пропускаем "пустых" участников.
		Если Не ЗначениеЗаполнено(Участник) Или Не ЗначениеЗаполнено(ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяПорцияУчастников = УчастникиПоВидамиУчастников[ВидУчастника];
		Если ТекущаяПорцияУчастников = Неопределено Тогда
			
			Контекст = КонтекстыПравилКоммуникацииПоВидамУчастников[ВидУчастника];
			Если Контекст = Неопределено Тогда
				Контекст = ПравилаКоммуникацийКлиентСервер.КонтекстВыбора(Форма, , ВидУчастника);
				КонтекстыПравилКоммуникацииПоВидамУчастников[ВидУчастника] = Контекст;
			КонецЕсли;
			 
			ТекущаяПорцияУчастников = Новый Структура;
			ТекущаяПорцияУчастников.Вставить("КонтекстПравилКоммуникации", Контекст);
			ТекущаяПорцияУчастников.Вставить("Участники", Новый Массив);
			
			УчастникиПоВидамиУчастников[ВидУчастника] = ТекущаяПорцияУчастников;
			
		КонецЕсли;
		
		МассивДляДобавления = ТекущаяПорцияУчастников.Участники;
		МассивДляДобавления.Добавить(Участник);
		
	КонецЦикла;
	
	РаботаСУчастникамиВызовСервера.ЗаполнитьРезультатПроверкиУчастниковПоПравиламКоммуникаций(
		УчастникиПоВидамиУчастников, Результат);
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает вывод пользователю нарушений правил коммуникаций.
// 
// Параметры:
//  НеПрошедшиеПроверку - Массив Из см. РаботаСУчастниками.НеПрошедшийПроверкуПКУчастник
//  НаименованиеПредмета - Строка - Наименование вида предмета, по которому показывается нарушение. Например: "Задача". 
//  НаименованиеДействия - Строка - Наименование действия по предмету, Например: "Направить на исполнение".
//  Обработчик - ОписаниеОповещения - для вызова кода формы инициатора, обработка показа и удаления участников.
// 
Процедура ОбработатьРезультатПроверкиПравилКоммуникаций(НеПрошедшиеПроверку, НаименованиеПредмета, НаименованиеДействия,
	Обработчик) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НеПрошедшиеПроверку", НеПрошедшиеПроверку);
	ДополнительныеПараметры.Вставить("Обработчик", Обработчик);
	
	ПродолжитьОбработкуРезультатовПроверки = Новый ОписаниеОповещения("ПослеПредупрежденияОПравилахКоммуникаций",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПравилаКоммуникацийКлиент.ПоказатьНесколькоНарушений(
		НеПрошедшиеПроверку,
		НаименованиеПредмета, НаименованиеДействия,
		ПродолжитьОбработкуРезультатовПроверки);

КонецПроцедуры

// Проверка действительности участников.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма инициатор проверки:
//   * Объект - ДанныеФормыСтруктура - Объект формы инициаторы проверки
// 
// Возвращаемое значение:
//  см. РаботаСУчастниками.ПроверитьДействительностьУчастников
//
Функция ПроверитьДействительностьУчастников(Форма) Экспорт
	
	РезультатПроверки = РаботаСУчастникамиВызовСервера.ПроверитьДействительностьУчастников(Форма.Объект);
	
	Если НагрузочноеТестированиеКлиент.ЭтоНагрузочноеТестирование() Тогда
		РезультатПроверки.ВсеДействительны = Истина; // Нужно подавить вывод вопроса
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Обрабатывает результат проверки участников на действительность.
// 
// Параметры:
//  РезультатПроверки - см. РаботаСУчастникамиВызовСервера.ПроверитьДействительностьУчастников
//  Обработчик - ОписаниеОповещения - для вызова кода формы инициатора, обработка показа и удаления участников.
// 
// Возвращаемое значение:
//  Булево - Истина, если все участники-сотрудники действительны и имеют доступ к ИБ.
//
Функция ОбработатьРезультатПроверкиДействительностиУчастников(РезультатПроверки, Обработчик) Экспорт
	
	КнопкиВопроса = Новый СписокЗначений(); // СписокЗначений Из Число, КодВозвратаДиалога
	КнопкиВопроса.Добавить(0, НСтр("ru = 'Заменить'"));
	КнопкиВопроса.Добавить(1, НСтр("ru = 'Оставить как есть'"));
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	КнопкаПоУмолчанию = 0;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РезультатПроверки", РезультатПроверки);
	ПараметрыОповещения.Вставить("Обработчик", Обработчик);
	
	ОповещениеПослеВопросаОЗамене = Новый ОписаниеОповещения("ПослеВопросаОЗаменеУчастников", 
		ЭтотОбъект, ПараметрыОповещения);
	
	ПоказатьВопрос(
		ОповещениеПослеВопросаОЗамене,
		РаботаСУчастникамиКлиентСервер.ТекстВопросаПроверкиДействительностиУчастников(РезультатПроверки),
		КнопкиВопроса,,
		КнопкаПоУмолчанию);
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Продолжение предупреждения о правилах коммуникаций.
// 
// Параметры:
//  РезультатЗакрытия - Число, Неопределено - Результат закрытия формы предупреждения. Если Неопределено, дополнительных 
//  	действий не требуется, 1 - показать сообщения пользователю, 2 - очистить недоступных участников. 
//  ДополнительныеПараметры - Структура - Параметры оповещения:
//    * НеПрошедшиеПроверку - Массив Из Структура - участники не прошедшие проверку:
//      ** ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//      ** Участник - ОпределяемыйТип.УчастникЗадач
//      ** Правило - СправочникСсылка.ПравилаКоммуникаций
//    * Обработчик - ОписаниеОповещения - для вызова кода формы инициатора, обработка показа и удаления участников.
//
Процедура ПослеПредупрежденияОПравилахКоммуникаций(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Обработчик, 
		Новый Структура("НеПрошедшиеПроверку, ВариантОбработки", 
			ДополнительныеПараметры.НеПрошедшиеПроверку, РезультатЗакрытия));
		
КонецПроцедуры

// После вопроса о замене участников.
// 
// Параметры:
//  РезультатВопроса - Число - 0 - заменить, 1 - оставить как есть, 2 - отмена.
//  ДополнительныеПараметры - Структура - Дополнительные параметры:
//   * РезультатПроверки - см. РаботаСУчастникамиВызовСервера.ПроверитьДействительностьУчастников
//   * Обработчик - ОписаниеОповещения - 
//
Процедура ПослеВопросаОЗаменеУчастников(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Обработчик, 
		Новый Структура("РезультатПроверки, ВариантОбработки", 
			ДополнительныеПараметры.РезультатПроверки, РезультатВопроса));
	
КонецПроцедуры

#КонецОбласти

