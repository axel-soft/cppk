
#Область ПрограммныйИнтерфейс

// Заполняет объект НСИ для отправки в Архив.
//
// Параметры:
//  Ссылка - СправочникСсылка - ссылка на выгружаемый объект конфигурации.
//
// Возвращаемое значение:
//  ОбъектXDTO, Неопределено - объект для отправки в Архив.
//    Если Неопределено, значит выгрузка этого объекта не требуется.
//
Функция ЗаполнитьXDTOОбъектНСИ(Ссылка) Экспорт
	
	ТипОбъекта = ТипЗнч(Ссылка);
	ИменаТиповXDTO = ОбменСАрхивом.ТипыXDTOПоТипамЗначений();
	ТипОбъектаXDTO = ФабрикаXDTO.Тип(ОбменСАрхивом.ВерсияФорматаДляОтправкиСообщений(),
		ИменаТиповXDTO[ТипОбъекта]);
	
	Если ТипОбъектаXDTO = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Неожиданный тип объекта НСИ: %1'"), ТипОбъекта, Ссылка);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
	СвойстваОбъектаXDTO = ОбъектXDTO.Свойства();
	ОбъектXDTO.ID = Строка(Ссылка.УникальныйИдентификатор());
	
	ИменаРеквизитов = Новый Структура;
	ЗначенияРеквизитов = Новый Структура;
	
	Если ТипОбъекта = Тип("СправочникСсылка.ВидыДокументов") Тогда
		
		ИменаРеквизитов.Вставить("DeletionMark", "ПометкаУдаления");
		ИменаРеквизитов.Вставить("Name", "Наименование");
		ИменаРеквизитов.Вставить("Родитель");
		Если СвойстваОбъектаXDTO.Получить("FolderID") <> Неопределено Тогда
			ИменаРеквизитов.Вставить("IsFolder", "ЭтоГруппа");
		КонецЕсли;
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
		
		Если СвойстваОбъектаXDTO.Получить("ParentID") <> Неопределено Тогда
			ОбъектXDTO.ParentID = "";
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.Родитель) Тогда
				ОбъектXDTO.ParentID = Строка(ЗначенияРеквизитов.Родитель.УникальныйИдентификатор());
			КонецЕсли;
		ИначеЕсли СвойстваОбъектаXDTO.Получить("FolderID") <> Неопределено Тогда
			ОбъектXDTO.FolderID = "";
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.Родитель) Тогда
				ОбъектXDTO.FolderID = Строка(ЗначенияРеквизитов.Родитель.УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
		
		ИменаРеквизитов.Вставить("DeletionMark", "ПометкаУдаления");
		ИменаРеквизитов.Вставить("Name", "Наименование");
		ИменаРеквизитов.Вставить("FullDescr", "НаименованиеПолное");
		ИменаРеквизитов.Вставить("TIN", "ИНН");
		ИменаРеквизитов.Вставить("PPC", "КПП");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда	
		
		ИменаРеквизитов.Вставить("DeletionMark", "ПометкаУдаления");
		ИменаРеквизитов.Вставить("Name", "Наименование");
		ИменаРеквизитов.Вставить("Родитель");
		ИменаРеквизитов.Вставить("Руководитель");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
		
		ОбъектXDTO.ParentID = "";
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Родитель) Тогда
			ОбъектXDTO.ParentID = Строка(ЗначенияРеквизитов.Родитель.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Руководитель) Тогда
			ОбъектXDTO.ManagerID = Строка(ЗначенияРеквизитов.Руководитель.УникальныйИдентификатор());
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Должности") Тогда	
		
		ИменаРеквизитов.Вставить("DeletionMark", "ПометкаУдаления");
		ИменаРеквизитов.Вставить("Name", "Наименование");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") Тогда	
		
		ИменаРеквизитов.Вставить("IsFolder", "ЭтоГруппа");
		ИменаРеквизитов.Вставить("DeletionMark", "ПометкаУдаления");
		ИменаРеквизитов.Вставить("Name", "Наименование");
		ИменаРеквизитов.Вставить("BirthDate", "ДатаРождения");
		ИменаРеквизитов.Вставить("Родитель");
		ИменаРеквизитов.Вставить("TIN", "ИНН");
		ИменаРеквизитов.Вставить("NIN", "СтраховойНомерПФР");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
		
		ОбъектXDTO.FolderID = "";
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Родитель) Тогда
			ОбъектXDTO.FolderID = Строка(ЗначенияРеквизитов.Родитель.УникальныйИдентификатор());
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Сотрудники") Тогда	
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
			|	Сотрудники.ДатаНачалаДействия КАК ДатаНачалаДействия,
			|	Сотрудники.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
			|	Сотрудники.Владелец КАК Владелец,
			|	Сотрудники.Должность КАК Должность,
			|	Сотрудники.Подразделение КАК Подразделение,
			|	НЕ ОсновныеСотрудники.Сотрудник ЕСТЬ NULL КАК Основной
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудники КАК ОсновныеСотрудники
			|		ПО Сотрудники.Владелец = ОсновныеСотрудники.ФизическоеЛицо
			|			И Сотрудники.Ссылка = ОсновныеСотрудники.Сотрудник
			|ГДЕ
			|	Сотрудники.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ОбъектXDTO.DeletionMark = Выборка.ПометкаУдаления;
		ОбъектXDTO.EffectiveDate = Выборка.ДатаНачалаДействия;
		ОбъектXDTO.ExpirationDate = Выборка.ДатаОкончанияДействия;
		ОбъектXDTO.IsMain = Выборка.Основной;
		
		Если ЗначениеЗаполнено(Выборка.Владелец) Тогда
			ОбъектXDTO.IndividualID = Строка(Выборка.Владелец.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Должность) Тогда
			ОбъектXDTO.TitleID = Строка(Выборка.Должность.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда
			ОбъектXDTO.DepartmentID = Строка(Выборка.Подразделение.УникальныйИдентификатор());
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ГрифыДоступа") Тогда	
		
		ИменаРеквизитов.Вставить("DeletionMark", "ПометкаУдаления");
		ИменаРеквизитов.Вставить("Name", "Наименование");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда	
		
		ИменаРеквизитов.Вставить("IsFolder", "ЭтоГруппа");
		ИменаРеквизитов.Вставить("DeletionMark", "ПометкаУдаления");
		ИменаРеквизитов.Вставить("Name", "Наименование");
		ИменаРеквизитов.Вставить("FullDescr", "НаименованиеПолное");
		ИменаРеквизитов.Вставить("TIN", "ИНН");
		ИменаРеквизитов.Вставить("PPC", "КПП");
		ИменаРеквизитов.Вставить("Родитель");
		ИменаРеквизитов.Вставить("ЮрФизЛицо");
		ИменаРеквизитов.Вставить("ФизЛицо");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
		
		ОбъектXDTO.FolderID = "";
		ОбъектXDTO.IndividualID = "";
		ОбъектXDTO.Type = Неопределено;
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Родитель) Тогда
			ОбъектXDTO.FolderID = Строка(ЗначенияРеквизитов.Родитель.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ФизЛицо) Тогда
			ОбъектXDTO.IndividualID = Строка(ЗначенияРеквизитов.ФизЛицо.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ЮрФизЛицо) Тогда
			ОбъектXDTO.Type = Метаданные.Перечисления.ЮрФизЛицо.ЗначенияПеречисления[
				Перечисления.ЮрФизЛицо.Индекс(ЗначенияРеквизитов.ЮрФизЛицо)].Имя;
		КонецЕсли;
		Если ЗначенияРеквизитов.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
			И Не ЗначениеЗаполнено(ЗначенияРеквизитов.ФизЛицо) Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не заполнено физическое лицо у контрагента: %1'"),
					Ссылка);
				ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда	
		
		ИменаРеквизитов.Вставить("DeletionMark", "ПометкаУдаления");
		ИменаРеквизитов.Вставить("Name", "Наименование");
		ИменаРеквизитов.Вставить("ГрифДоступа");
		ИменаРеквизитов.Вставить("Руководитель");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
		
		ОбъектXDTO.SecurityLevelID = "";
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ГрифДоступа) Тогда
			ОбъектXDTO.SecurityLevelID = Строка(ЗначенияРеквизитов.ГрифДоступа.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Руководитель) Тогда
			ОбъектXDTO.ManagerID = Строка(ЗначенияРеквизитов.Руководитель.УникальныйИдентификатор());
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.НоменклатураДел") Тогда
		
		ИменаРеквизитов.Вставить("DeletionMark", "ПометкаУдаления");
		ИменаРеквизитов.Вставить("Name", "Наименование");
		ИменаРеквизитов.Вставить("Index", "Индекс");
		ИменаРеквизитов.Вставить("Header", "ПолноеНаименование");
		ИменаРеквизитов.Вставить("Year", "Год");
		ИменаРеквизитов.Вставить("StoragePeriod", "СрокХранения");
		ИменаРеквизитов.Вставить("OperationalStoragePeriod", "СрокОперативногоХранения");
		ИменаРеквизитов.Вставить("ArticleNumber", "НомераСтатей");
		ИменаРеквизитов.Вставить("Personnel", "ПоЛичномуСоставу");
		ИменаРеквизитов.Вставить("EVCMark", "ОтметкаЭПК");
		ИменаРеквизитов.Вставить("Note", "Примечание");
		ИменаРеквизитов.Вставить("Раздел");
		ИменаРеквизитов.Вставить("Организация");
		ИменаРеквизитов.Вставить("Подразделение", "Раздел.Подразделение");
		ИменаРеквизитов.Вставить("ГрифДоступа");
		ИменаРеквизитов.Вставить("ФормаДокументов");
		ИменаРеквизитов.Вставить("КатегорияДела");
		ИменаРеквизитов.Вставить("ВидыДокументов");
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
		
		ОбъектXDTO.ForElectronicDocuments = ЗначенияРеквизитов.ФормаДокументов
			= Перечисления.ВариантыФормДокументов.Электронная;
		
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Раздел) Тогда
			ОбъектXDTO.ListSectionID = Строка(ЗначенияРеквизитов.Раздел.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Организация) Тогда
			ОбъектXDTO.OrganizationID = Строка(ЗначенияРеквизитов.Организация.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Подразделение)
				И СвойстваОбъектаXDTO.Получить("DepartmentID") <> Неопределено Тогда
			ОбъектXDTO.DepartmentID = Строка(ЗначенияРеквизитов.Подразделение.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ГрифДоступа)
				И СвойстваОбъектаXDTO.Получить("SecurityLevelID") <> Неопределено Тогда
			ОбъектXDTO.SecurityLevelID = Строка(ЗначенияРеквизитов.ГрифДоступа.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.КатегорияДела) Тогда
			ОбъектXDTO.StoragePeriodCategory = Метаданные.Перечисления.КатегорииДел.ЗначенияПеречисления[
				Перечисления.КатегорииДел.Индекс(ЗначенияРеквизитов.КатегорияДела)].Имя;
		КонецЕсли;
		
		Если СвойстваОбъектаXDTO.Получить("DocumentTypes") <> Неопределено Тогда
			ТаблицаВидов = ЗначенияРеквизитов.ВидыДокументов.Выгрузить();
			Для Каждого СтрВида Из ТаблицаВидов Цикл
				Если ЗначениеЗаполнено(СтрВида.ВидДокумента) Тогда
					ЭлементXDTOВиды = ФабрикаXDTO.Создать(СвойстваОбъектаXDTO.Получить("DocumentTypes").Тип);
					ЭлементXDTOВиды.ID = Строка(СтрВида.ВидДокумента.УникальныйИдентификатор());
					ОбъектXDTO.DocumentTypes.Добавить(ЭлементXDTOВиды);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.РазделыНоменклатурыДел") Тогда	
		
		ИменаРеквизитов.Вставить("DeletionMark", "ПометкаУдаления");
		ИменаРеквизитов.Вставить("Name", "Наименование");
		ИменаРеквизитов.Вставить("Year", "Год");
		ИменаРеквизитов.Вставить("Index", "Индекс");
		ИменаРеквизитов.Вставить("Родитель");
		ИменаРеквизитов.Вставить("Организация");
		ИменаРеквизитов.Вставить("Подразделение");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
		
		ОбъектXDTO.ParentID = "";
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Родитель) Тогда
			ОбъектXDTO.ParentID = Строка(ЗначенияРеквизитов.Родитель.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Организация) Тогда
			ОбъектXDTO.OrganizationID = Строка(ЗначенияРеквизитов.Организация.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Подразделение) Тогда
			ОбъектXDTO.DepartmentID = Строка(ЗначенияРеквизитов.Подразделение.УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СвойствоXDTO Из СвойстваОбъектаXDTO Цикл
		ИмяСвойства = СвойствоXDTO.Имя;
		Если ЗначенияРеквизитов.Свойство(ИмяСвойства) Тогда
			ОбъектXDTO[ИмяСвойства] = ?(ЗначенияРеквизитов[ИмяСвойства] = Null,
				Неопределено, ЗначенияРеквизитов[ИмяСвойства]);
		КонецЕсли;
	КонецЦикла;
	
	ОшибкиЗаполнения = ПроверитьЗаполнениеОбязательныхРеквизитов(ОбъектXDTO);
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		ВызватьИсключение ОшибкиЗаполнения;
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// См. описание функции ОбменСАрхивом.ДанныеМЧДДляВыгрузки.
// 
Функция ДанныеМЧДДляВыгрузки(МЧДСсылка, ВременнаяПапка) Экспорт
	
	ОписаниеМЧД = Неопределено;
	
	ТипМЧД = ТипЗнч(МЧДСсылка);
	ОбрабатываемыеТипы = Новый Массив;
	ОбрабатываемыеТипы.Добавить(Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов"));
	ОбрабатываемыеТипы.Добавить(Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций"));
	ОбрабатываемыеТипы.Добавить(Тип("СправочникСсылка.МЧД003"));
	Если ОбрабатываемыеТипы.Найти(ТипМЧД) = Неопределено Тогда
		Возврат ОписаниеМЧД;
	КонецЕсли;
	
	Если ТипМЧД = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов") Тогда
		РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			МЧДСсылка, "Подписана, НомерДоверенности, ДоверительИНН, ЕстьВРеестреФНС, Комментарий");
	ИначеЕсли ТипМЧД = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций") Тогда
		РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			МЧДСсылка, "Подписана, НомерДоверенности, ДоверительЮЛ_ИНН, СтатусВРеестреФНС, Комментарий");
	ИначеЕсли ТипМЧД = Тип("СправочникСсылка.МЧД003") Тогда
		РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			МЧДСсылка, "Подписана, НомерДоверенности, Доверители, СтатусВРеестреФНС, Комментарий");
	КонецЕсли;
	Если РеквизитыМЧД.Подписана <> Истина Тогда
		Возврат ОписаниеМЧД;
	КонецЕсли;
	
	ОписаниеМЧД = ОбменСАрхивом.НовоеОписаниеМЧД();
	Если ТипМЧД = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов") Тогда
		РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			МЧДСсылка, "НомерДоверенности, ДоверительИНН, ЕстьВРеестреФНС, Комментарий");
		ОписаниеМЧД.Тип = "ON_DOVBB";
		ОписаниеМЧД.НомерДоверенности = РеквизитыМЧД.НомерДоверенности;
		ОписаниеМЧД.ЕстьВРеестреФНС = РеквизитыМЧД.ЕстьВРеестреФНС;
		ОписаниеМЧД.ИННДоверителя = РеквизитыМЧД.ДоверительИНН;
		ОписаниеМЧД.Комментарий = РеквизитыМЧД.Комментарий;
	ИначеЕсли ТипМЧД = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций") Тогда
		РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			МЧДСсылка, "НомерДоверенности, ДоверительЮЛ_ИНН, СтатусВРеестреФНС, Комментарий");
		ДоверительныеСтатусы = МашиночитаемыеДоверенности.ДоверительныеСтатусыВРеестреФНС();
		ОписаниеМЧД.Тип = "ON_DOVBB";
		ОписаниеМЧД.НомерДоверенности = РеквизитыМЧД.НомерДоверенности;
		ОписаниеМЧД.ЕстьВРеестреФНС = ДоверительныеСтатусы.Найти(РеквизитыМЧД.СтатусВРеестреФНС) <> Неопределено;
		ОписаниеМЧД.ИННДоверителя = РеквизитыМЧД.ДоверительЮЛ_ИНН;
		ОписаниеМЧД.Комментарий = РеквизитыМЧД.Комментарий;
	ИначеЕсли ТипМЧД = Тип("СправочникСсылка.МЧД003") Тогда
		РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			МЧДСсылка, "НомерДоверенности, Доверители, СтатусВРеестреФНС, Комментарий");
		СтрокаДоверителя = РеквизитыМЧД.Доверители.Выгрузить()[0];
		ДоверительныеСтатусы = МашиночитаемыеДоверенности.ДоверительныеСтатусыВРеестреФНС();
		ОписаниеМЧД.Тип = "EMCHD";
		ОписаниеМЧД.НомерДоверенности = РеквизитыМЧД.НомерДоверенности;
		ОписаниеМЧД.ЕстьВРеестреФНС = ДоверительныеСтатусы.Найти(РеквизитыМЧД.СтатусВРеестреФНС) <> Неопределено;
		ОписаниеМЧД.ИННДоверителя = СтрокаДоверителя.ИНН;
		ОписаниеМЧД.Комментарий = РеквизитыМЧД.Комментарий;
	КонецЕсли;
	
	// Файл zip выгружается стандартными средствами БЭД,
	// затем распаковывается и берутся файлы xml и p7s.
	РезультатСохранения = МашиночитаемыеДоверенности.ВыгрузитьДанныеДоверенности(МЧДСсылка);
	Если РезультатСохранения.Ошибка Тогда
		ВызватьИсключение РезультатСохранения.ТекстОшибки;
	КонецЕсли;
	ВременнаяПапкаФайловМЧД = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
	СоздатьКаталог(ВременнаяПапкаФайловМЧД);
	ИмяZipФайлаДанныхМЧД = ВременнаяПапкаФайловМЧД + РезультатСохранения.ОписаниеФайла.ИмяФайла;
	РезультатСохранения.ОписаниеФайла.ДвоичныеДанные.Записать(ИмяZipФайлаДанныхМЧД);
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ИмяZipФайлаДанныхМЧД);
	ЧтениеZipФайла.ИзвлечьВсе(ВременнаяПапкаФайловМЧД);
	ЧтениеZipФайла.Закрыть();
	НайденныеФайлыXML = НайтиФайлы(ВременнаяПапкаФайловМЧД, "*.xml");
	НайденныеФайлыP7S = НайтиФайлы(ВременнаяПапкаФайловМЧД, "*.p7s");
	Если НайденныеФайлыXML.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не найден файл МЧД'");
	КонецЕсли;
	Если НайденныеФайлыP7S.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не найден файл подписи МЧД'");
	КонецЕсли;
	ФайлМЧД = НайденныеФайлыXML[0];
	ФайлПодписиМЧД = НайденныеФайлыP7S[0];
	ПереместитьФайл(ФайлМЧД.ПолноеИмя, ВременнаяПапка + ФайлМЧД.Имя);
	ПереместитьФайл(ФайлПодписиМЧД.ПолноеИмя, ВременнаяПапка + ФайлПодписиМЧД.Имя);
	УдалитьФайлы(ВременнаяПапкаФайловМЧД);
	
	ОписаниеМЧД.ИмяФайлаМЧД = ФайлМЧД.Имя;
	ОписаниеМЧД.ИмяФайлаПодписиМЧД = ФайлПодписиМЧД.Имя;
	
	Возврат ОписаниеМЧД;
	
КонецФункции

// Формирует файл выгрузки указанного пакета документов.
//
// Параметры:
//  Пакет - СправочникСсылка.ПакетыДокументовДляАрхива - выгружаемый пакет.
//
// Возвращаемое значение:
//  Строка - имя временного файла zip с результатом выгрузки. Этот файл будет перемещен в каталог обмена.
//
Функция ФайлПакетаДокументов(Пакет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	ИмяФайла = ПолучитьИмяВременногоФайла("zip");
	ЗаписьZipФайлаПакетДокументов = Новый ЗаписьZipФайла(ИмяФайла);
	
	РеквизитыПакета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(	
		Пакет, "Идентификатор,Организация,Подразделение,ГрифДоступа,Передал,ДатаПередачи,Комментарий,Документы");
	Организация = РеквизитыПакета.Организация;
	Подразделение = РеквизитыПакета.Подразделение;
	ГрифДоступа = РеквизитыПакета.ГрифДоступа;
	Передал = РеквизитыПакета.Передал;
	ДатаПередачи = РеквизитыПакета.ДатаПередачи;
	
	ПространствоИменСхемы = ОбменСАрхивом.ВерсияФорматаДляОтправкиСообщений();
	ПакетДокументовXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменСхемы, "DocumentPackage"));
	ПакетДокументовXDTO.ID = РеквизитыПакета.Идентификатор;
	ПакетДокументовXDTO.SourceID = СокрЛП(Константы.КодДляОбменаСАрхивом.Получить());
	ПакетДокументовXDTO.OrganizationID = ?(ЗначениеЗаполнено(Организация),
		Строка(Организация.УникальныйИдентификатор()), "");
	ПакетДокументовXDTO.DepartmentID = ?(ЗначениеЗаполнено(Подразделение),
		Строка(Подразделение.УникальныйИдентификатор()), "");
	ПакетДокументовXDTO.SecurityLevelID = ?(ЗначениеЗаполнено(ГрифДоступа),
		Строка(ГрифДоступа.УникальныйИдентификатор()), "");
	ПакетДокументовXDTO.SenderID = ?(ЗначениеЗаполнено(Передал),
		Строка(Передал.УникальныйИдентификатор()), "");
	ПакетДокументовXDTO.DateSent = ?(ЗначениеЗаполнено(ДатаПередачи),
		ДатаПередачи, ТекущаяДатаСеанса());
	ПакетДокументовXDTO.Comment = РеквизитыПакета.Комментарий;
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
	СоздатьКаталог(ВременнаяПапка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Ссылка КАК Ссылка,
		|	ДокументыПредприятия.Бессрочный КАК Бессрочный,
		|	ДокументыПредприятия.РегистрационныйНомер КАК Number,
		|	ДокументыПредприятия.ДатаРегистрации КАК Date,
		|	ДокументыПредприятия.ФормаДокумента = ЗНАЧЕНИЕ(Перечисление.ВариантыФормДокументов.Электронная) КАК
		|		ElectronicDocument,
		|	ДокументыПредприятия.ВидДокумента КАК ВидДокумента,
		|	ДокументыПредприятия.Заголовок КАК Header,
		|	ВЫБОР
		|		КОГДА ДокументыПредприятия.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ДелаХраненияДокументов.Организация
		|		ИНАЧЕ ДокументыПредприятия.Организация
		|	КОНЕЦ КАК Организация,
		|	ДокументыПредприятия.Подразделение КАК Подразделение,
		|	ДокументыПредприятия.ГрифДоступа КАК ГрифДоступа,
		|	ДокументыПредприятия.Дело КАК Дело,
		|	ДокументыПредприятия.КоличествоЛистов КАК SheetsNumber,
		|	ДокументыПредприятия.КоличествоПриложений КАК AdditionsNumber,
		|	ДокументыПредприятия.ЛистовВПриложениях КАК AdditionsSheetsNumber,
		|	ДокументыПредприятия.Проект КАК Проект,
		|	ДокументыПредприятия.Содержание КАК Содержание,
		|	ЕСТЬNULL(Валюты.Код, """") КАК Валюта,
		|	ДокументыПредприятия.Сумма КАК Сумма,
		|	ДокументыПредприятия.СуммаНДС КАК СуммаНДС,
		|	ДокументыПредприятия.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ДокументыПредприятия.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ДокументыПредприятия.Комментарий КАК Комментарий,
		|	ДокументыПредприятия.Зарегистрировал КАК Зарегистрировал,
		|	ДокументыПредприятия.Ответственный КАК Ответственный,
		|	ДокументыПредприятия.Адресат КАК Адресат,
		|	ДокументыПредприятия.Контрагенты КАК Контрагенты,
		|	ДокументыПредприятия.Стороны КАК Стороны,
		|	ДокументыПредприятия.СубъектыПерсональныхДанных КАК СубъектыПерсональныхДанных
		|ИЗ
		|	Справочник.ПакетыДокументовДляАрхива.Документы КАК ДокументыПакета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ПО ДокументыПакета.Документ = ДокументыПредприятия.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
		|		ПО ДокументыПредприятия.Валюта = Валюты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
		|		ПО ДокументыПредприятия.Дело = ДелаХраненияДокументов.Ссылка
		|ГДЕ
		|	ДокументыПредприятия.ПометкаУдаления = ЛОЖЬ
		|	И ДокументыПакета.Ссылка = &Пакет";
	Запрос.УстановитьПараметр("Пакет", Пакет);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не заполнены документы в пакете: ""%1"".'"), Пакет);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ПорядковыйНомерКонтейнера = 1;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибкиПоДокументу = "";
		ПредставлениеДокумента = ПолучитьНавигационнуюСсылку(Выборка.Ссылка);
		
		Если ЗначениеЗаполнено(Организация) И Выборка.Организация <> Организация Тогда
			ТекстОшибкиПоДокументу = ТекстОшибкиПоДокументу + Символы.ПС
				+ НСтр("ru = 'организация не соответствует выбранной'");
		КонецЕсли;
		Если ЗначениеЗаполнено(Подразделение) И Выборка.Подразделение <> Подразделение Тогда
			ТекстОшибкиПоДокументу = ТекстОшибкиПоДокументу + Символы.ПС
				+ НСтр("ru = 'подразделение не соответствует выбранному'");
		КонецЕсли;
		Если ЗначениеЗаполнено(ГрифДоступа) И Выборка.ГрифДоступа <> ГрифДоступа Тогда
			ТекстОшибкиПоДокументу = ТекстОшибкиПоДокументу + Символы.ПС
				+ НСтр("ru = 'гриф доступа не соответствует выбранному'");
		КонецЕсли;
		
		ДобавитьДокументВПакет(Выборка, ПакетДокументовXDTO, ЗаписьZipФайлаПакетДокументов,
			ВременнаяПапка, ПорядковыйНомерКонтейнера, ТекстОшибкиПоДокументу);
		Если ЗначениеЗаполнено(ТекстОшибкиПоДокументу) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС
				+ СтрШаблон(НСтр("ru = 'Не удалось выгрузить документ %1 по причине: %2'"),
					ПредставлениеДокумента, ТекстОшибкиПоДокументу);
		КонецЕсли;
		
		ПорядковыйНомерКонтейнера = ПорядковыйНомерКонтейнера + 1;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Запись пакета документов.
	ИмяФайлаОписания = ВременнаяПапка + "DocumentPackage.xml";
	
	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ИмяФайлаОписания);
	ПотокЗаписи.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ПотокЗаписи, ПакетДокументовXDTO,,,, НазначениеТипаXML.Явное);
	ПотокЗаписи.Закрыть();
	ЗаписьZipФайлаПакетДокументов.Добавить(ИмяФайлаОписания);
	ЗаписьZipФайлаПакетДокументов.Записать();
	
	Если ЗначениеЗаполнено(ВременнаяПапка) Тогда
		УдалитьФайлы(ВременнаяПапка);
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

// Вызывается после выгрузки НСИ и пакетов документов.
// Здесь можно описать выгрузку дополнительных данных. Например, сдаточных описей.
// 
Процедура ПослеВыгрузкиДанных(КаталогВыгрузки) Экспорт 
	
	ОтправитьСдаточныеОписи(КаталогВыгрузки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьДокументВПакет(ВыборкаДокумент, ПакетДокументовXDTO, ЗаписьZipФайлаПакетДокументов,
			ВременнаяПапка, ПорядковыйНомерКонтейнера, ТекстОшибки)
	
	ПространствоИменСхемы = ОбменСАрхивом.ВерсияФорматаДляОтправкиСообщений();
	РеквизитыДокументаМетаданные = Метаданные.Справочники.ДокументыПредприятия.Реквизиты;
	ТипыXDTOПоТипамЗначений = ОбменСАрхивом.ТипыXDTOПоТипамЗначений();

	ИмяZipФайлаКонтейнера = "DocumentContainer" + Строка(ПорядковыйНомерКонтейнера);
	ИмяZipФайлаКонтейнераПолное = ВременнаяПапка + ИмяZipФайлаКонтейнера + ".zip";
	ЗаписьZipФайлаКонтейнер = Новый ЗаписьZipФайла(ИмяZipФайлаКонтейнераПолное);
	
	КонтейнерДокументаXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(
		ПространствоИменСхемы, "DocumentContainer"));
	СвойстваКонтейнераXDTO = КонтейнерДокументаXDTO.Свойства();
		
	ЗаполнитьЗначенияСвойств(КонтейнерДокументаXDTO, ВыборкаДокумент);
	КонтейнерДокументаXDTO.ID = Строка(ВыборкаДокумент.Ссылка.УникальныйИдентификатор());
	КонтейнерДокументаXDTO.DocumentTypeID = Строка(ВыборкаДокумент.ВидДокумента.УникальныйИдентификатор());
	КонтейнерДокументаXDTO.DepartmentID = Строка(ВыборкаДокумент.Подразделение.УникальныйИдентификатор());
	КонтейнерДокументаXDTO.SecurityLevelID = Строка(ВыборкаДокумент.ГрифДоступа.УникальныйИдентификатор());
	Если СвойстваКонтейнераXDTO.Получить("DocumentTypeName") <> Неопределено Тогда
		КонтейнерДокументаXDTO.DocumentTypeName = Строка(ВыборкаДокумент.ВидДокумента);
	КонецЕсли;
	Если СвойстваКонтейнераXDTO.Получить("DepartmentName") <> Неопределено Тогда
		КонтейнерДокументаXDTO.DepartmentName = Строка(ВыборкаДокумент.Подразделение);
	КонецЕсли;
	Если СвойстваКонтейнераXDTO.Получить("SecurityLevelName") <> Неопределено Тогда
		КонтейнерДокументаXDTO.SecurityLevelName = Строка(ВыборкаДокумент.ГрифДоступа);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Организация = ВыборкаДокумент.Организация;
	Иначе
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		КонтейнерДокументаXDTO.OrganizationID = Строка(Организация.УникальныйИдентификатор());
		Если СвойстваКонтейнераXDTO.Получить("OrganizationName") <> Неопределено Тогда
			КонтейнерДокументаXDTO.OrganizationName = Строка(Организация);
		КонецЕсли;
	Иначе
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru = 'Не заполнена организация в документе ""%1""'"),
			ВыборкаДокумент.Ссылка);
	КонецЕсли;
	
	// Прочие реквизиты - коллекция OtherProperties.
	ПрочиеРеквизиты = СтрРазделить(
		"Проект,Содержание,Валюта,Сумма,СуммаНДС,ДатаНачалаДействия,ДатаОкончанияДействия,Комментарий,Зарегистрировал,Ответственный", ",");
	Если ПолучитьФункциональнуюОпцию("УчитыватьСрокДействияДокумента",
		Новый Структура("ВидДокумента", ВыборкаДокумент.ВидДокумента)) Тогда
		ПрочиеРеквизиты.Добавить("Бессрочный");
	КонецЕсли;
	
	ТипXDTOСтрокиДопРеквизита = СвойстваКонтейнераXDTO.Получить("OtherProperties").Тип;
	Для Каждого ИмяРеквизита Из ПрочиеРеквизиты Цикл
		МетаданныеРеквизита = РеквизитыДокументаМетаданные.Найти(ИмяРеквизита);
		Если МетаданныеРеквизита = Неопределено Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС
				+ СтрШаблон(НСтр("ru = 'неожиданное имя реквизита %1'"), ИмяРеквизита);
			Продолжить;
		КонецЕсли;
		ЗначениеРеквизита = ВыборкаДокумент[ИмяРеквизита];
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияРеквизита = ТипЗнч(ЗначениеРеквизита);
		СтрокаРеквизита = ФабрикаXDTO.Создать(ТипXDTOСтрокиДопРеквизита);
		СтрокаРеквизита.ID = МетаданныеРеквизита.Имя;
		СтрокаРеквизита.Name = МетаданныеРеквизита.Синоним;
		СтрокаРеквизита.Type = ТипыXDTOПоТипамЗначений[ТипЗначенияРеквизита];
		Если Не ЗначениеЗаполнено(СтрокаРеквизита.Type) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС
				+ СтрШаблон(НСтр("ru = 'неожиданный тип реквизита %1: %2'"),
					ИмяРеквизита, ТипЗначенияРеквизита);
			Продолжить;
		КонецЕсли;
		Если ИмяРеквизита = "Валюта" Тогда // В выборке строка с кодом, а не идентификатор ссылки.
			СтрокаРеквизита.Type = ТипыXDTOПоТипамЗначений[Тип("СправочникСсылка.Валюты")];
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			СтрокаРеквизита.Value = "";
		ИначеЕсли ТипЗначенияРеквизита = Тип("Дата") Тогда
			СтрокаРеквизита.Value = Формат(ЗначениеРеквизита, "ДФ=ггггММддЧЧммсс");
		ИначеЕсли ЭтоПримитивныйТип(ТипЗначенияРеквизита) Тогда
			СтрокаРеквизита.Value = Строка(ЗначениеРеквизита);
		Иначе
			СтрокаРеквизита.Value = Строка(ЗначениеРеквизита.УникальныйИдентификатор());
		КонецЕсли;
		КонтейнерДокументаXDTO.OtherProperties.Добавить(СтрокаРеквизита);
	КонецЦикла;
	
	// Стороны.
	Сч = 0;
	Если Не ВыборкаДокумент.Стороны.Пустой() Тогда
		СчКонтрагентов = 0;
		НезначащиеСимволы = " " + Символы.Таб + Символы.ПС + Символы.ВК + Символы.НПП + Символы.ПФ + Символы.ВТаб;
		ВыборкаДокументСтороны = ВыборкаДокумент.Стороны.Выбрать();
		Пока ВыборкаДокументСтороны.Следующий() Цикл
			НаименованиеСтороны = Строка(ВыборкаДокументСтороны.Наименование);
			Если Не ЗначениеЗаполнено(ВыборкаДокументСтороны.Сторона)
				Или ВыборкаДокументСтороны.Сторона = ВыборкаДокумент.Организация
					И Не ЗначениеЗаполнено(НаименованиеСтороны) Тогда
				Продолжить;
			КонецЕсли;
			Сч = Сч + 1;
			Если Не ЗначениеЗаполнено(НаименованиеСтороны) Тогда
				ТипСтороны = ТипЗнч(ВыборкаДокументСтороны.Сторона);
				Если ТипСтороны = Тип("СправочникСсылка.Контрагенты") Тогда
					СчКонтрагентов = СчКонтрагентов + 1;
					НаименованиеСтороны = "Контрагент" + ?(СчКонтрагентов = 1, "", " " + СчКонтрагентов);
				Иначе
					НаименованиеСтороны = "Сторона " + Сч;
				КонецЕсли;
			КонецЕсли;
			СтрокаРеквизита = ФабрикаXDTO.Создать(ТипXDTOСтрокиДопРеквизита);
			СтрокаРеквизита.ID = СокрЛП(СтрСоединить(СтрРазделить(НаименованиеСтороны,
				НезначащиеСимволы, Истина), ""));
			СтрокаРеквизита.Name = НаименованиеСтороны;
			СтрокаРеквизита.Type = ТипыXDTOПоТипамЗначений[ТипЗнч(ВыборкаДокументСтороны.Сторона)];
			СтрокаРеквизита.Value = Строка(ВыборкаДокументСтороны.Сторона.УникальныйИдентификатор());
			КонтейнерДокументаXDTO.OtherProperties.Добавить(СтрокаРеквизита);
		КонецЦикла;
	Иначе
		ВыборкаДокументКонтрагенты = ВыборкаДокумент.Контрагенты.Выбрать();
		Пока ВыборкаДокументКонтрагенты.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаДокументКонтрагенты.Контрагент) Тогда
				Продолжить
			КонецЕсли;
			Сч = Сч + 1;
			СтрокаРеквизита = ФабрикаXDTO.Создать(ТипXDTOСтрокиДопРеквизита);
			СтрокаРеквизита.ID = "Контрагент" + ?(Сч = 1, "", Сч);
			СтрокаРеквизита.Name = "Контрагент" + ?(Сч = 1, "", " " + Сч);
			СтрокаРеквизита.Type = ТипыXDTOПоТипамЗначений[ТипЗнч(ВыборкаДокументКонтрагенты.Контрагент)];
			СтрокаРеквизита.Value = Строка(ВыборкаДокументКонтрагенты.Контрагент.УникальныйИдентификатор());
			КонтейнерДокументаXDTO.OtherProperties.Добавить(СтрокаРеквизита);
		КонецЦикла;
	КонецЕсли;
	
	// Доп. реквизиты документа предприятия.
	ЗначенияСвойств = УправлениеСвойствами.ЗначенияСвойств(ВыборкаДокумент.Ссылка,, Ложь);
	ЗаголовкиСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ЗначенияСвойств.ВыгрузитьКолонку("Свойство"), "Заголовок");
	Для Каждого СтрокаСвойства Из ЗначенияСвойств Цикл
		ЗначениеРеквизита = СтрокаСвойства.Значение;
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияРеквизита = ТипЗнч(ЗначениеРеквизита);
		ТипXDTO = ТипыXDTOПоТипамЗначений[ТипЗначенияРеквизита];
		Если Не ЗначениеЗаполнено(ТипXDTO) Тогда
			// Неивестные типы преобразуются в строку.
			ЗначениеРеквизита = Строка(ЗначениеРеквизита);
			ТипЗначенияРеквизита = ТипЗнч(ЗначениеРеквизита);
			ТипXDTO = ТипыXDTOПоТипамЗначений[ТипЗначенияРеквизита];
		КонецЕсли;
		Если ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.Валюты") Тогда
			// Передается код валюты, а не ID.
			ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеРеквизита, "Код");
			ТипЗначенияРеквизита = ТипЗнч(ЗначениеРеквизита);
		КонецЕсли;
		СтрокаРеквизита = ФабрикаXDTO.Создать(ТипXDTOСтрокиДопРеквизита);
		СтрокаРеквизита.ID = СтрокаСвойства.ИмяСвойства;
		СтрокаРеквизита.Name = ЗаголовкиСвойств[СтрокаСвойства.Свойство];
		СтрокаРеквизита.Type = ТипXDTO;
		ЭтоЗначениеПримитивногоТипа = ЭтоПримитивныйТип(ТипЗначенияРеквизита);
		Если ЭтоЗначениеПримитивногоТипа Тогда
			СтрокаРеквизита.Value = Строка(ЗначениеРеквизита);
		Иначе
			СтрокаРеквизита.Value = Строка(ЗначениеРеквизита.УникальныйИдентификатор());
		КонецЕсли;
		КонтейнерДокументаXDTO.OtherProperties.Добавить(СтрокаРеквизита);
	КонецЦикла;
	
	// Субъекты ПД.
	Если Не ВыборкаДокумент.СубъектыПерсональныхДанных.Пустой() Тогда
		Субъекты = ВыборкаДокумент.СубъектыПерсональныхДанных.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		ТипXDTOСтрокиСубъекта = СвойстваКонтейнераXDTO.Получить("PersonalDataSubjects").Тип;
		Для Каждого ФизЛицо Из Субъекты Цикл
			СтрокаСубъекта = ФабрикаXDTO.Создать(ТипXDTOСтрокиСубъекта);
			СтрокаСубъекта.PersonID = Строка(ФизЛицо.УникальныйИдентификатор());
			КонтейнерДокументаXDTO.PersonalDataSubjects.Добавить(СтрокаСубъекта);
		КонецЦикла;
	КонецЕсли;
	
	// Визы.
	Визы = РаботаСВизамиСогласования.ПолучитьВизыДокумента(ВыборкаДокумент.Ссылка);
	ТипXDTOВизы = СвойстваКонтейнераXDTO.Получить("Visas").Тип;
	Для Каждого Виза Из Визы Цикл
		УстановилРезультат = Виза.УстановилРезультат;
		РезультатСогласования = Виза.РезультатСогласования;
		Если Не ЗначениеЗаполнено(УстановилРезультат) Или
			Не ЗначениеЗаполнено(РезультатСогласования) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВиз = ФабрикаXDTO.Создать(ТипXDTOВизы);
		Если ТипЗнч(УстановилРезультат) = Тип("СправочникСсылка.Сотрудники") Тогда
			СтрокаВиз.ReviewerID = Строка(УстановилРезультат.УникальныйИдентификатор());
		ИначеЕсли ТипЗнч(УстановилРезультат) = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
			СотрудникПоФактическомуИсполнителю =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УстановилРезультат, "Факт");
			СтрокаВиз.ReviewerID = Строка(СотрудникПоФактическомуИсполнителю.УникальныйИдентификатор());
		Иначе
			СотрудникПоПользователю =
				Сотрудники.ОсновнойСотрудникПользователя(УстановилРезультат);
			СтрокаВиз.ReviewerID = Строка(СотрудникПоПользователю.УникальныйИдентификатор());
		КонецЕсли;
		СтрокаВиз.Date = Виза.ДатаИсполнения;
		СтрокаВиз.Result = Метаданные.Перечисления.РезультатыСогласования.ЗначенияПеречисления[
			Перечисления.РезультатыСогласования.Индекс(РезультатСогласования)].Имя;
		СтрокаВиз.Comment = Виза.Комментарий;
		КонтейнерДокументаXDTO.Visas.Добавить(СтрокаВиз);
	КонецЦикла;
	
	// Резолюции.
	Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(ВыборкаДокумент.Ссылка);
	ТипXDTOРезолюции = СвойстваКонтейнераXDTO.Получить("Resolutions").Тип;
	Для Каждого Резолюция Из Резолюции Цикл
		СотрудникПоФактическомуИсполнителю =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Резолюция.ФактическийАвтор, "Факт");
		Если Не ЗначениеЗаполнено(СотрудникПоФактическомуИсполнителю) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРезолюций = ФабрикаXDTO.Создать(ТипXDTOРезолюции);
		СтрокаРезолюций.ReviewerID = Строка(СотрудникПоФактическомуИсполнителю.УникальныйИдентификатор());
		СтрокаРезолюций.Date = Резолюция.ДатаРезолюции;
		СтрокаРезолюций.Text = Резолюция.ТекстРезолюции;
		КонтейнерДокументаXDTO.Resolutions.Добавить(СтрокаРезолюций);
	КонецЦикла;
	
	// Связи.
	Связи = ПолучитьСвязиПоДокументу(ВыборкаДокумент.Ссылка);
	ТипXDTOСвязи = СвойстваКонтейнераXDTO.Получить("Links").Тип;
	Для Каждого Связь Из Связи Цикл
		СтрокаСвязи = ФабрикаXDTO.Создать(ТипXDTOСвязи);
		СвойстваСвязиXDTO = СтрокаСвязи.Свойства();
		Если СвойстваСвязиXDTO.Получить("TypeID") <> Неопределено Тогда
			СтрокаСвязи.TypeID = Строка(Связь.ТипСвязи.УникальныйИдентификатор());
		КонецЕсли;
		СтрокаСвязи.TypeName = Связь.НаименованиеТипаСвязи;
		Если Связь.Объект = ВыборкаДокумент.Ссылка Тогда // прямая ссылка.
			СтрокаСвязи.LinkedDocumentID = ?(ЗначениеЗаполнено(Связь.СвязанныйОбъект),
				Строка(Связь.СвязанныйОбъект.УникальныйИдентификатор()),"");
			СтрокаСвязи.Direction = "Прямая";
		Иначе // обратная ссылка.
			СтрокаСвязи.LinkedDocumentID = Строка(Связь.Объект.УникальныйИдентификатор());
			СтрокаСвязи.Direction = "Обратная";
		КонецЕсли;
		СтрокаСвязи.LinkedString = Связь.СвязаннаяСтрока;
		СтрокаСвязи.Comment = Связь.Комментарий;
		КонтейнерДокументаXDTO.Links.Добавить(СтрокаСвязи);
	КонецЦикла;
	
	// Штрихкоды.
	Если ШтрихкодированиеСервер.ШтрихкодированиеВключено() И
		СвойстваКонтейнераXDTO.Получить("Barcodes") <> Неопределено Тогда
		Штрихкоды = ШтрихкодыДокумента(ВыборкаДокумент.Ссылка);
		ТипXDTOШтрихкоды = СвойстваКонтейнераXDTO.Получить("Barcodes").Тип;
		Для Каждого Штрихкод Из Штрихкоды Цикл
			СтрокаШтрихкодов = ФабрикаXDTO.Создать(ТипXDTOШтрихкоды);
			СтрокаШтрихкодов.IsMain = Штрихкод.ВнутреннийШтрихкод;
			СтрокаШтрихкодов.Code = Штрихкод.Код;
			КонтейнерДокументаXDTO.Barcodes.Добавить(СтрокаШтрихкодов);
		КонецЦикла;
	КонецЕсли;
	
	// Свойства документа ЭДО.
	ЭлектронныйДокумент = ОбменСКонтрагентамиДОСлужебный.ЭлектронныйДокументДокументаДО(ВыборкаДокумент.Ссылка);
	ЭтоЭДО = ЗначениеЗаполнено(ЭлектронныйДокумент);
	
	Если ЭтоЭДО Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерДокумента,
			|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаДокумента,
			|	ЭлектронныйДокументВходящийЭДО.ТипРегламента КАК ТипРегламента,
			|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
			|	СообщениеЭДО.ВидСообщения.ТипДокумента КАК ТипДокументаЭДО,
			|	СообщениеЭДО.Направление КАК Направление
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|			И (СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя))
			|ГДЕ
			|	ЭлектронныйДокументВходящийЭДО.Ссылка = &ЭлектронныйДокумент
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента,
			|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента,
			|	ЭлектронныйДокументИсходящийЭДО.ТипРегламента,
			|	СообщениеЭДО.ТипЭлементаРегламента,
			|	СообщениеЭДО.ВидСообщения.ТипДокумента,
			|	СообщениеЭДО.Направление
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|			И (СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя))
			|ГДЕ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка = &ЭлектронныйДокумент";
		
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ТипXDTOСвойстваЭДО = СвойстваКонтейнераXDTO.Получить("EDIProperties").Тип;
			СтрокаСвойстваЭДО = ФабрикаXDTO.Создать(ТипXDTOСвойстваЭДО);
			СтрокаСвойстваЭДО.Direction = 
				Метаданные.Перечисления.НаправленияЭДО.ЗначенияПеречисления[
					Перечисления.НаправленияЭДО.Индекс(Выборка.Направление)].Имя;
			СтрокаСвойстваЭДО.Number = Выборка.НомерДокумента;
			СтрокаСвойстваЭДО.Date = Выборка.ДатаДокумента;
			КонтейнерДокументаXDTO.EDIProperties = СтрокаСвойстваЭДО;
		КонецЕсли;
		
	КонецЕсли;
	
	// Файлы.
	ФайлыДокумента = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
		ВыборкаДокумент.Ссылка, Ложь, Истина);
	
	ЭтоЭлектроннаяФорма = ВыборкаДокумент.ElectronicDocument;
	Если ЭтоЭлектроннаяФорма И ФайлыДокумента.Количество() = 0 Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'отсутствуют файлы'");
	КонецЕсли;
	
	ТаблицаФайловДокумента = Новый ТаблицаЗначений;
	ТаблицаФайловДокумента.Колонки.Добавить("ФайлДО");
	ТаблицаФайловДокумента.Колонки.Добавить("ФайлЭДО");
	ТаблицаФайловДокумента.Колонки.Добавить("СообщениеЭДО");
	ТаблицаФайловДокумента.Колонки.Добавить("ИнформацияОтправителя");
	ТаблицаФайловДокумента.Колонки.Добавить("ИмяВоВременнойПапке");
	ТаблицаФайловДокумента.Колонки.Добавить("ХешСумма");
	ТаблицаФайловДокумента.Колонки.Добавить("РольФайла");
	ТаблицаФайловДокумента.Колонки.Добавить("ТипЭлементаРегламентаЭДО");
	
	// Роли файлов.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РолиФайловДокументов.Файл,
		|	РолиФайловДокументов.Роль
		|ИЗ
		|	РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
		|ГДЕ
		|	РолиФайловДокументов.Файл В (&ФайлыДокумента)";
		
	Запрос.УстановитьПараметр("ФайлыДокумента", ФайлыДокумента);
		
	ТаблицаРолейФайлов = Запрос.Выполнить().Выгрузить();
	
	Если ЭтоЭДО Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЖурналДействийПоЭДО.СтатусСообщения КАК СтатусСообщения,
			|	ЖурналДействийПоЭДО.ДатаИзменения КАК ДатаИзменения,
			|	ЖурналДействийПоЭДО.Сообщение КАК СообщениеЭДО,
			|	ЖурналДействийПоЭДО.Сообщение.ОсновнойФайл КАК СообщениеОсновнойФайл
			|ИЗ
			|	РегистрСведений.ЖурналДействийПоЭДО КАК ЖурналДействийПоЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ФайлыЭДО
			|		ПО ЖурналДействийПоЭДО.Сообщение.ОсновнойФайл = ФайлыЭДО.Ссылка
			|ГДЕ
			|	ЖурналДействийПоЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаЖурналаДействийПоЭДО = Запрос.Выполнить().Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета
			|ИЗ
			|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
			|ГДЕ
			|	ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА
			|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
			
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
			
		ТаблицаДокументовУчета = Запрос.Выполнить().Выгрузить();
		ДокументУчета =
			?(ТаблицаДокументовУчета.Количество(), ТаблицаДокументовУчета[0].ОбъектУчета, Неопределено);
	
		ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент);
		ТаблицаФайловЭДО = ЭлектронныеДокументыЭДО.ПрисоединенныеФайлыЭлектронныхДокументов(ЭлектронныеДокументы);
		
		Для Каждого СтрокаФайлаЭДО Из ТаблицаФайловЭДО Цикл
			ФайлЭДО = СтрокаФайлаЭДО.ПрисоединенныйФайл;
			СообщениеЭДО = СтрокаФайлаЭДО.СообщениеЭДО;
			ТипЭлементаРегламентаЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЭДО, "ТипЭлементаРегламента");
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлЭДО);
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			
			ИмяФайлаДокументаБезПути = ДанныеФайла.ИмяФайла;
			Попытка
				ДвоичныеДанныеФайла.Записать(ВременнаяПапка + ИмяФайлаДокументаБезПути);
			Исключение
				ТекстОшибки = ТекстОшибки + Символы.ПС
					+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Продолжить;
			КонецПопытки;
			ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
			ХешированиеДанных.ДобавитьФайл(ВременнаяПапка + ИмяФайлаДокументаБезПути);
			СтрокаФайла = ТаблицаФайловДокумента.Добавить();
			СтрокаФайла.ФайлЭДО = ФайлЭДО;
			СтрокаФайла.СообщениеЭДО = СообщениеЭДО;
			СтрокаФайла.ИнформацияОтправителя =
				ТипЭлементаРегламентаЭДО = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
			СтрокаФайла.ИмяВоВременнойПапке = ИмяФайлаДокументаБезПути;
			СтрокаФайла.ХешСумма = Base64Строка(ХешированиеДанных.ХешСумма);
			СтрокаФайла.ТипЭлементаРегламентаЭДО = ТипЭлементаРегламентаЭДО;
			
			Если ЗначениеЗаполнено(ДокументУчета) И СтрокаФайла.ИнформацияОтправителя Тогда
				Если ТипЗнч(ДокументУчета) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
					ФайлДокументаУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументУчета, "Владелец");
					СтрокаФайла.ФайлДО = ФайлДокументаУчета;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ФайлДокумента Из ФайлыДокумента Цикл
		
		ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлДокумента);
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлДокумента);
		
		ИмяФайлаДокументаБезПути = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		
		ИмяФайлаПолное = ВременнаяПапка + ИмяФайлаДокументаБезПути;
		ИмяФайлаПолное = ОпределитьУникальноеИмяФайла(ИмяФайлаПолное);
		
		Попытка
			ДвоичныеДанныеФайла.Записать(ИмяФайлаПолное);
		Исключение
			ТекстОшибки = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Продолжить;
		КонецПопытки;
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
		ХешированиеДанных.ДобавитьФайл(ИмяФайлаПолное);
		
		СтрокаФайла = ТаблицаФайловДокумента.Добавить();
		СтрокаФайла.ФайлДО = ФайлДокумента;
		СтрокаФайла.ИмяВоВременнойПапке = СтрЗаменить(ИмяФайлаПолное, ВременнаяПапка, "");
		СтрокаФайла.ХешСумма = Base64Строка(ХешированиеДанных.ХешСумма);
		
		СтрокиРолейФайлов = ТаблицаРолейФайлов.НайтиСтроки(Новый Структура("Файл", ФайлДокумента));
		Если СтрокиРолейФайлов.Количество() Тогда
			СтрокаРолиФайлов = СтрокиРолейФайлов[0];
			СтрокаФайла.РольФайла = СтрокаРолиФайлов.Роль;
		КонецЕсли;
		
	КонецЦикла;
	
	ПодписиФайловДокумента = ПодписиФайловДокумента(ВыборкаДокумент.Ссылка,
		ТаблицаФайловДокумента, ВременнаяПапка, ТекстОшибки);
		
	Для Каждого СтрокаФайла Из ТаблицаФайловДокумента Цикл
		
		ЗаписьZipФайлаКонтейнер.Добавить(ВременнаяПапка + СтрокаФайла.ИмяВоВременнойПапке);
		
		ИмяФайлаВизуализации = СохранитьВизуализациюВФайл(
			ВыборкаДокумент.Ссылка, СтрокаФайла, ВременнаяПапка, ТекстОшибки);
		
		ЭтоФайлЭДО = ЗначениеЗаполнено(СтрокаФайла.ФайлЭДО);
	
		ЭлементXDTOФайлы = ФабрикаXDTO.Создать(СвойстваКонтейнераXDTO.Получить("Files").Тип);
		ЭлементXDTOФайлы.FileName = СтрокаФайла.ИмяВоВременнойПапке;
		ЭлементXDTOФайлы.VisualizationFileName = ИмяФайлаВизуализации;
		ЭлементXDTOФайлы.HashSum = СтрокаФайла.ХешСумма;
		Если ЭтоФайлЭДО Тогда
			ЭлементXDTOФайлы.Size = СтрокаФайла.ФайлЭДО.Размер;
			ЭлементXDTOФайлы.Modified = СтрокаФайла.ФайлЭДО.ДатаМодификацииУниверсальная;
		Иначе
			ЭлементXDTOФайлы.Size = СтрокаФайла.ФайлДО.ТекущаяВерсияРазмер;
			ЭлементXDTOФайлы.Modified = СтрокаФайла.ФайлДО.ТекущаяВерсияДатаМодификацииФайла;
		КонецЕсли;
		
		ПодписанныйФайлДокумента = ?(ЭтоФайлЭДО, СтрокаФайла.ФайлЭДО, СтрокаФайла.ФайлДО);
					
		ПодписиФайла = ПодписиФайловДокумента.НайтиСтроки(Новый Структура("ФайлДокумента", ПодписанныйФайлДокумента));
		Если ПодписиФайла.Количество() > 0 Тогда
			Для Каждого СтрокаПодписи Из ПодписиФайла Цикл
				ЭлементXDTOПодписи = ФабрикаXDTO.Создать(ЭлементXDTOФайлы.Свойства().Получить("Signatures").Тип);
				СвойстваПодписиXDTO = ЭлементXDTOПодписи.Свойства();
				ЭлементXDTOПодписи.Type = СтрокаПодписи.ТипПодписи;
				Если СвойстваПодписиXDTO.Получить("SignerTitle") <> Неопределено Тогда
					ЭлементXDTOПодписи.Signer = СтрокаПодписи.Подписал;
					ЭлементXDTOПодписи.SignerTitle = СтрокаПодписи.Должность;
				Иначе
					ПредставлениеПодписанта = ?(ЗначениеЗаполнено(СтрокаПодписи.Должность),
						СтрокаПодписи.Подписал + ", " + СтрокаПодписи.Должность, СтрокаПодписи.Подписал);
					ЭлементXDTOПодписи.Signer = ПредставлениеПодписанта;
				КонецЕсли;
				ЭлементXDTOПодписи.Date = СтрокаПодписи.ДатаПодписи;
				ЭлементXDTOПодписи.FileName = Строка(СтрокаПодписи.ИмяФайлаПодписи);
				ЭлементXDTOПодписи.WarrantNumber = СокрЛП(СтрокаПодписи.НомерДоверенности);
				Если СвойстваПодписиXDTO.Получить("IsValid") <> Неопределено Тогда
					ЭлементXDTOПодписи.IsValid = Истина;
				КонецЕсли;
				Если СвойстваПодписиXDTO.Получить("SESHashSum") <> Неопределено Тогда
					ЭлементXDTOПодписи.SESHashSum = СтрокаПодписи.ХешСуммаПЭП;
				КонецЕсли;
				ЭлементXDTOФайлы.Signatures.Добавить(ЭлементXDTOПодписи);
				Если ЗначениеЗаполнено(СтрокаПодписи.ИмяФайлаПодписи) Тогда
					ЗаписьZipФайлаКонтейнер.Добавить(ВременнаяПапка + СтрокаПодписи.ИмяФайлаПодписи);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяФайлаВизуализации) Тогда
			ЗаписьZipФайлаКонтейнер.Добавить(ВременнаяПапка + ИмяФайлаВизуализации);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаФайла.РольФайла) Тогда
			РольФайла = СтрокаФайла.РольФайла;
			ЭлементXDTOФайлы.RoleID = Строка(РольФайла.УникальныйИдентификатор());
			ЭлементXDTOФайлы.RoleName = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РольФайла, "Наименование");
		Иначе
			ЭлементXDTOФайлы.RoleID = "";
			ЭлементXDTOФайлы.RoleName = "";
		КонецЕсли;
		
		Если ЭтоФайлЭДО Тогда
			ТипЭлементаРегламентаЭДО = СтрокаФайла.ТипЭлементаРегламентаЭДО;
			ЭлементXDTOЖурналЭДО = ФабрикаXDTO.Создать(ЭлементXDTOФайлы.Свойства().Получить("EDIStatuses").Тип);
			ЭлементXDTOФайлы.EDIFileType = Строка(ТипЭлементаРегламентаЭДО);
			ЗаписиЖурналаДействийПоЭДО =
				ТаблицаЖурналаДействийПоЭДО.НайтиСтроки(Новый Структура("СообщениеОсновнойФайл, СообщениеЭДО", СтрокаФайла.ФайлЭДО, СтрокаФайла.СообщениеЭДО));
			Для Каждого ЗаписьЖурналаДействийПоЭДО Из ЗаписиЖурналаДействийПоЭДО Цикл
				ЭлементXDTOЖурналЭДО.Date = ЗаписьЖурналаДействийПоЭДО.ДатаИзменения;
				ЭлементXDTOЖурналЭДО.Value =
					Метаданные.Перечисления.СтатусыСообщенийЭДО.ЗначенияПеречисления[
						Перечисления.СтатусыСообщенийЭДО.Индекс(ЗаписьЖурналаДействийПоЭДО.СтатусСообщения)].Имя;
				ЭлементXDTOФайлы.EDIStatuses.Добавить(ЭлементXDTOЖурналЭДО);
			КонецЦикла;
		КонецЕсли;
		
		КонтейнерДокументаXDTO.Files.Добавить(ЭлементXDTOФайлы);
		
	КонецЦикла;
	
	ОшибкиЗаполнения = ПроверитьЗаполнениеОбязательныхРеквизитов(КонтейнерДокументаXDTO);
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + ОшибкиЗаполнения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// Запись контейнера документа.
	ИмяФайлаОписанияКонтейнера = ВременнаяПапка + "Document.xml";
	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ИмяФайлаОписанияКонтейнера);
	ПотокЗаписи.ЗаписатьОбъявлениеXML();
	
	Попытка
		ФабрикаXDTO.ЗаписатьXML(ПотокЗаписи, КонтейнерДокументаXDTO,,,, НазначениеТипаXML.Явное);
		ПотокЗаписи.Закрыть();
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	ЗаписьZipФайлаКонтейнер.Добавить(ИмяФайлаОписанияКонтейнера);
	Попытка
		ЗаписьZipФайлаКонтейнер.Записать();
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;

	ЗаписьZipФайлаПакетДокументов.Добавить(ИмяZipФайлаКонтейнераПолное);
	
	ЭлементXDTOСтрокаКонтейнера = ФабрикаXDTO.Создать(
		ПакетДокументовXDTO.Свойства().Получить("Documents").Тип);
	ЭлементXDTOСтрокаКонтейнера.ID = КонтейнерДокументаXDTO.ID;
	ЭлементXDTOСтрокаКонтейнера.ContainerFileName = ИмяZipФайлаКонтейнера + ".zip";
	ПакетДокументовXDTO.Documents.Добавить(ЭлементXDTOСтрокаКонтейнера);
	
КонецПроцедуры

Процедура ОтправитьСдаточныеОписи(КаталогВыгрузки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПередачаДелВАрхив.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПередачаДелВАрхив КАК ПередачаДелВАрхив
		|ГДЕ
		|	ПередачаДелВАрхив.СтатусВыгрузкиВАрхив = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменаСАрхивом.ГотовКВыгрузке)
		|	И ПередачаДелВАрхив.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ВыгрузитьСдаточнуюОписьВФайл(Выборка.Ссылка, КаталогВыгрузки);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выгрузки описи %1: %2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбменСАрхивом.ЛогированиеОперацийОбменаСАрхивом(СобытиеЖурналаРегистрацииВыгрузкаСдаточнойОписи(),
				УровеньЖурналаРегистрации.Ошибка, НСтр("ru = 'Ошибка выгрузки сдаточной описи'"),
				ТекстОшибки, Выборка.Ссылка);
			ОбменСАрхивом.УстановитьСтатусОшибкиВыгрузкиДокумента(Выборка.Ссылка, ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьСдаточнуюОписьВФайл(СдаточнаяОписьСсылка, КаталогВыгрузки, ТекстОшибки = "") Экспорт
	
	ПространствоИменСхемы = ОбменСАрхивом.ВерсияФорматаДляОтправкиСообщений();
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
	СоздатьКаталог(ВременнаяПапка);
	
	ИмяФайлаОписанияСдаточнойОписи = ВременнаяПапка + "HandOverList.xml";
	
	ИмяZipФайлаВыгрузки = ВременнаяПапка + ОбменСАрхивом.ТекущаяОтметкаВремени() + ".zip";
	ЗаписьZipФайлаСдаточнаяОпись = Новый ЗаписьZipФайла(ИмяZipФайлаВыгрузки);
	
	ЭлементXDTOСдаточнаяОпись = ФабрикаXDTO.Создать(
		ФабрикаXDTO.Тип(ПространствоИменСхемы, "HandOverList"));
	
	ТекстОшибки = ЗаполнитьКонтейнерСдаточнойОписи(ЭлементXDTOСдаточнаяОпись, СдаточнаяОписьСсылка,
		ВременнаяПапка, ЗаписьZipФайлаСдаточнаяОпись);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбменСАрхивом.ЛогированиеОперацийОбменаСАрхивом(
			СобытиеЖурналаРегистрацииВыгрузкаСдаточнойОписи(),
			УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'Ошибка выгрузки сдаточной описи.'"),
			ТекстОшибки,
			СдаточнаяОписьСсылка);
		ОбменСАрхивом.УдалитьВременныеФайлы(ВременнаяПапка);
		Возврат;
	КонецЕсли;
	
	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ИмяФайлаОписанияСдаточнойОписи);
	ПотокЗаписи.ЗаписатьОбъявлениеXML();
	
	Попытка
		ФабрикаXDTO.ЗаписатьXML(ПотокЗаписи, ЭлементXDTOСдаточнаяОпись,,,, НазначениеТипаXML.Явное);
		ПотокЗаписи.Закрыть();
	Исключение
		ОбменСАрхивом.УдалитьВременныеФайлы(ВременнаяПапка);
		ВызватьИсключение;
	КонецПопытки;
	
	ИмяZipФайлаВыгрузкиФинальный = КаталогВыгрузки + ОбменСАрхивом.ТекущаяОтметкаВремени() + ".zip";
	ЗаписьZipФайлаСдаточнаяОпись.Добавить(ИмяФайлаОписанияСдаточнойОписи);
	
	Попытка
		ЗаписьZipФайлаСдаточнаяОпись.Записать();
		ПереместитьФайл(ИмяZipФайлаВыгрузки, ИмяZipФайлаВыгрузкиФинальный);
		ОбменСАрхивом.УдалитьВременныеФайлы(ВременнаяПапка);
		
		СдаточнаяОписьОбъект = СдаточнаяОписьСсылка.ПолучитьОбъект();
		Если СдаточнаяОписьОбъект.СтатусВыгрузкиВАрхив = Перечисления.СтатусыОбменаСАрхивом.ГотовКВыгрузке Тогда
			СдаточнаяОписьОбъект.Заблокировать();
			СдаточнаяОписьОбъект.СтатусВыгрузкиВАрхив = Перечисления.СтатусыОбменаСАрхивом.ВыгрузкаВыполнена;
			СдаточнаяОписьОбъект.ДополнительныеСвойства.Вставить("ИнтеграцияДокументаСАрхивом");
			СдаточнаяОписьОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		ОбменСАрхивом.ЛогированиеОперацийОбменаСАрхивом(
			СобытиеЖурналаРегистрацииВыгрузкаСдаточнойОписи(),
			УровеньЖурналаРегистрации.Информация,
			НСтр("ru = 'Выгрузка сдаточной описи завершена.'"),,
			СдаточнаяОписьСсылка);
	Исключение
		ОбменСАрхивом.УдалитьВременныеФайлы(ВременнаяПапка);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ЗаполнитьКонтейнерСдаточнойОписи(ЭлементXDTOСдаточнаяОпись, СдаточнаяОписьСсылка,
			ВременнаяПапка, ЗаписьZipФайлаСдаточнаяОпись)
	
	УстановитьПривилегированныйРежим(Истина);
	ТекстОшибки = "";
	
	Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СдаточнаяОписьСсылка,
		"Номер,
		|Дата,
		|ДатаСоздания,
		|ПометкаУдаления,
		|Организация,
		|Подразделение,
		|ГрифДоступа,
		|ФормаДокументов,
		|ДатаПередачи,
		|Передал,
		|Комментарий");
	
	СвойстваОписиXDTO = ЭлементXDTOСдаточнаяОпись.Свойства();
	
	ЭлементXDTOСдаточнаяОпись.ID = Строка(СдаточнаяОписьСсылка.УникальныйИдентификатор());
	ЭлементXDTOСдаточнаяОпись.Number = Данные.Номер;
	ЭлементXDTOСдаточнаяОпись.Date = Данные.Дата;
	ЭлементXDTOСдаточнаяОпись.OrganizationID = Строка(Данные.Организация.УникальныйИдентификатор());
	ЭлементXDTOСдаточнаяОпись.DepartmentID = Строка(Данные.Подразделение.УникальныйИдентификатор());
	Если СвойстваОписиXDTO.Получить("SecurityLevelID") <> Неопределено Тогда
		ЭлементXDTOСдаточнаяОпись.SecurityLevelID = Строка(Данные.ГрифДоступа.УникальныйИдентификатор());
	КонецЕсли;
	
	Если Данные.ФормаДокументов = Перечисления.ВариантыФормДокументов.Электронная Тогда
		ЭлементXDTOСдаточнаяОпись.ElectronicDocuments = Истина;
	Иначе
		ЭлементXDTOСдаточнаяОпись.ElectronicDocuments = Ложь;
	КонецЕсли;
	ЭлементXDTOСдаточнаяОпись.SenderID = Строка(Данные.Передал.УникальныйИдентификатор());
	Если СвойстваОписиXDTO.Получить("DateCreate") <> Неопределено Тогда
		Если ЗначениеЗаполнено(Данные.ДатаСоздания) Тогда
			ЭлементXDTOСдаточнаяОпись.DateCreate = Данные.ДатаСоздания;
		Иначе
			ЭлементXDTOСдаточнаяОпись.DateCreate = Данные.Дата;
		КонецЕсли;
	КонецЕсли;
	Если СвойстваОписиXDTO.Получить("DateSent") <> Неопределено Тогда
		Если ЗначениеЗаполнено(Данные.ДатаПередачи) Тогда
			ЭлементXDTOСдаточнаяОпись.DateSent = Данные.ДатаПередачи;
		Иначе
			ЭлементXDTOСдаточнаяОпись.DateSent = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	ЭлементXDTOСдаточнаяОпись.Comment = Данные.Комментарий;
	ЭлементXDTOСдаточнаяОпись.SourceID = СокрЛП(Константы.КодДляОбменаСАрхивом.Получить());
	
	Если Данные.ПометкаУдаления = Истина Тогда
		Если СвойстваОписиXDTO.Получить("DeletionMark") <> Неопределено Тогда
			ЭлементXDTOСдаточнаяОпись.DeletionMark = Истина;
		КонецЕсли;
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДелаХраненияДокументов.НоменклатураДел КАК Дело,
		|	ПередачаДелВАрхивДелаХраненияДокументов.НомерСтроки КАК НомерСтроки,
		|	ПередачаДелВАрхивДелаХраненияДокументов.ДелоХраненияДокументов КАК Том,
		|	ДелоХраненияДокументов.НомерТома КАК DossierNumber,
		|	ДелоХраненияДокументов.НомерЧасти КАК DossierPartNumber,
		|	ДелоХраненияДокументов.ПолноеНаименование КАК DossierHeader,
		|	ДелоХраненияДокументов.Комментарий КАК DossierNote,
		|	ДелоХраненияДокументов.ДатаНачала КАК DossierDateFrom,
		|	ДелоХраненияДокументов.ДатаОкончания КАК DossierDateTo
		|ИЗ
		|	Документ.ПередачаДелВАрхив.ДелаХраненияДокументов КАК ПередачаДелВАрхивДелаХраненияДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
		|		ПО ПередачаДелВАрхивДелаХраненияДокументов.ДелоХраненияДокументов = ДелаХраненияДокументов.Ссылка
		|ГДЕ
		|	ПередачаДелВАрхивДелаХраненияДокументов.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", СдаточнаяОписьСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Номер = 0;
	Пока Выборка.Следующий() Цикл
		
		ИмяФайлаПакета = "Dossier" + Строка(Выборка.НомерСтроки) + ".zip";
		ИмяФайлаПакетаПолное = ВременнаяПапка + ИмяФайлаПакета;
		СформироватьФайлПакетаПоТому(ИмяФайлаПакетаПолное, Выборка.Том, ТекстОшибки);
		
		ЭлементXDTOПередаваемыеТома = ФабрикаXDTO.Создать(
			ЭлементXDTOСдаточнаяОпись.Свойства().Получить("StorageUnits").Тип);
		ЗаполнитьЗначенияСвойств(ЭлементXDTOПередаваемыеТома, Выборка);
		
		ЭлементXDTOПередаваемыеТома.PackageFileName = ИмяФайлаПакета;
		ЭлементXDTOПередаваемыеТома.DossierID = Строка(Выборка.Том.УникальныйИдентификатор());
		ЭлементXDTOПередаваемыеТома.CaseFilesCatalogID = Строка(Выборка.Дело.УникальныйИдентификатор());
		
		Номер = Номер + 1;
			
		АдресРеестраЭД = Справочники.ДелаХраненияДокументов.РеестрДокументов(Выборка.Том);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресРеестраЭД);
			
		ИмяФайлаРеестрЭДБезПути = "DocumentsList" + Номер + ".zip";
		ИмяФайлаРеестрЭД = ВременнаяПапка + ИмяФайлаРеестрЭДБезПути;
			
		Попытка
			ДвоичныеДанныеФайла.Записать(ИмяФайлаРеестрЭД);
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Прервать;
		КонецПопытки;
			
		ЗаписьZipФайлаСдаточнаяОпись.Добавить(ИмяФайлаРеестрЭД);
		ЭлементXDTOПередаваемыеТома.DocumentsList = ИмяФайлаРеестрЭДБезПути;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Прервать;
		КонецЕсли;
		
		ЭлементXDTOСдаточнаяОпись.StorageUnits.Добавить(ЭлементXDTOПередаваемыеТома);
		ЗаписьZipФайлаСдаточнаяОпись.Добавить(ИмяФайлаПакетаПолное);
		
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура СформироватьФайлПакетаПоТому(ИмяФайлаПакетаПолное, Том, ТекстОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	ЗаписьZipФайлаПакетДокументов = Новый ЗаписьZipФайла(ИмяФайлаПакетаПолное);
	
	ПространствоИменСхемы = ОбменСАрхивом.ВерсияФорматаДляОтправкиСообщений();
	ПакетДокументовXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменСхемы, "DocumentPackage"));
	ПакетДокументовXDTO.ID = Строка(Новый УникальныйИдентификатор);
	ПакетДокументовXDTO.SourceID = СокрЛП(Константы.КодДляОбменаСАрхивом.Получить());
	ПакетДокументовXDTO.OrganizationID = "";
	ПакетДокументовXDTO.DepartmentID = "";
	ПакетДокументовXDTO.SecurityLevelID = "";
	ПакетДокументовXDTO.Comment = "";
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
	СоздатьКаталог(ВременнаяПапка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Ссылка КАК Ссылка,
		|	ДокументыПредприятия.Бессрочный КАК Бессрочный,
		|	ДокументыПредприятия.РегистрационныйНомер КАК Number,
		|	ДокументыПредприятия.ДатаРегистрации КАК Date,
		|	ДокументыПредприятия.ФормаДокумента = ЗНАЧЕНИЕ(Перечисление.ВариантыФормДокументов.Электронная) КАК
		|		ElectronicDocument,
		|	ДокументыПредприятия.ВидДокумента КАК ВидДокумента,
		|	ДокументыПредприятия.Заголовок КАК Header,
		|	ВЫБОР
		|		КОГДА ДокументыПредприятия.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ДелаХраненияДокументов.Организация
		|		ИНАЧЕ ДокументыПредприятия.Организация
		|	КОНЕЦ КАК Организация,
		|	ДокументыПредприятия.Подразделение КАК Подразделение,
		|	ДокументыПредприятия.ГрифДоступа КАК ГрифДоступа,
		|	ДокументыПредприятия.Дело КАК Дело,
		|	ДокументыПредприятия.КоличествоЛистов КАК SheetsNumber,
		|	ДокументыПредприятия.КоличествоПриложений КАК AdditionsNumber,
		|	ДокументыПредприятия.ЛистовВПриложениях КАК AdditionsSheetsNumber,
		|	ДокументыПредприятия.Проект КАК Проект,
		|	ДокументыПредприятия.Содержание КАК Содержание,
		|	ЕСТЬNULL(Валюты.Код, """") КАК Валюта,
		|	ДокументыПредприятия.Сумма КАК Сумма,
		|	ДокументыПредприятия.СуммаНДС КАК СуммаНДС,
		|	ДокументыПредприятия.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ДокументыПредприятия.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ДокументыПредприятия.Комментарий КАК Комментарий,
		|	ДокументыПредприятия.Зарегистрировал КАК Зарегистрировал,
		|	ДокументыПредприятия.Ответственный КАК Ответственный,
		|	ДокументыПредприятия.Адресат КАК Адресат,
		|	ДокументыПредприятия.Контрагенты КАК Контрагенты,
		|	ДокументыПредприятия.Стороны КАК Стороны,
		|	ДокументыПредприятия.СубъектыПерсональныхДанных КАК СубъектыПерсональныхДанных
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
		|		ПО ДокументыПредприятия.Валюта = Валюты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
		|		ПО ДокументыПредприятия.Дело = ДелаХраненияДокументов.Ссылка
		|ГДЕ
		|	ДокументыПредприятия.ПометкаУдаления = ЛОЖЬ
		|	И ДокументыПредприятия.Дело = &Том";
	Запрос.УстановитьПараметр("Том", Том);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПорядковыйНомерКонтейнера = 1;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстОшибкиПоДокументу = "";
		ДобавитьДокументВПакет(Выборка, ПакетДокументовXDTO, ЗаписьZipФайлаПакетДокументов,
			ВременнаяПапка, ПорядковыйНомерКонтейнера, ТекстОшибкиПоДокументу);
		Если ЗначениеЗаполнено(ТекстОшибкиПоДокументу) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС
				+ СтрШаблон(НСтр("ru = 'Не удалось выгрузить документ %1 по причине: %2'"),
					ПолучитьНавигационнуюСсылку(Выборка.Ссылка), ТекстОшибкиПоДокументу);
		КонецЕсли;
		ПорядковыйНомерКонтейнера = ПорядковыйНомерКонтейнера + 1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Запись пакета документов.
	ИмяФайлаОписания = ВременнаяПапка + "DocumentPackage.xml";
	
	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ИмяФайлаОписания);
	ПотокЗаписи.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ПотокЗаписи, ПакетДокументовXDTO,,,, НазначениеТипаXML.Явное);
	ПотокЗаписи.Закрыть();
	ЗаписьZipФайлаПакетДокументов.Добавить(ИмяФайлаОписания);
	ЗаписьZipФайлаПакетДокументов.Записать();
	
	Если ЗначениеЗаполнено(ВременнаяПапка) Тогда
		УдалитьФайлы(ВременнаяПапка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьОтзывОписи(ОписьСсылка) Экспорт

	УстановитьПривилегированныйРежим(Истина);
		
	ТекстОшибки = "";
	КаталогВыгрузки = ОбменСАрхивом.КаталогВыгрузкиВАрхив();
	ВыгрузитьСдаточнуюОписьВФайл(ОписьСсылка, КаталогВыгрузки, ТекстОшибки);
	
КонецПроцедуры

Функция ЭтоПримитивныйТип(Тип)
	
	Возврат Тип = Тип("Строка")
		Или Тип = Тип("Число")
		Или Тип = Тип("Булево")
		Или Тип = Тип("Дата");
	
КонецФункции

Функция СохранитьВизуализациюВФайл(Документ, СтрокаДанныхФайла, ВременнаяПапка, ТекстОшибки)
	
	ЕстьГотоваяВизуализацияФайла = Ложь;
	РасширениеФайлаВизуализации = "pdf";
	
	ФайлДокумента = СтрокаДанныхФайла.ФайлДО;
	Если Не ЗначениеЗаполнено(ФайлДокумента) И ЗначениеЗаполнено(СтрокаДанныхФайла.ФайлЭДО) Тогда
		ФайлДокумента = СтрокаДанныхФайла.ФайлЭДО;
	КонецЕсли; 
	
	ФайлВизуализации = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		Документ, ФайлДокумента, Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
	
	Если ЗначениеЗаполнено(ФайлВизуализации) Тогда
		ДанныеФайлаВизуализации = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлВизуализации);
	
		Если НРег(ДанныеФайлаВизуализации.Расширение) = РасширениеФайлаВизуализации Тогда
			ЕстьГотоваяВизуализацияФайла = Истина;
		КонецЕсли;
	КонецЕсли;
 
 	ИмяФайлаВизуализацииБезРасширения = СтрокаДанныхФайла.ИмяВоВременнойПапке;
		
	ИмяФайлаВизуализацииБезПути = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
		ИмяФайлаВизуализацииБезРасширения, РасширениеФайлаВизуализации);
	ИмяФайлаВизуализации = ВременнаяПапка + ИмяФайлаВизуализацииБезПути;
 	ИмяФайлаВизуализации = ОпределитьУникальноеИмяФайла(ИмяФайлаВизуализации);
	
	Если ЕстьГотоваяВизуализацияФайла Тогда
		
		ДвоичныеДанныеФайлаВизуализации =
			РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлВизуализации);
			
		Попытка
			ДвоичныеДанныеФайлаВизуализации.Записать(ИмяФайлаВизуализации);
			ДокументPdf = Новый ДокументPDF();
			ДокументPdf.Прочитать(ИмяФайлаВизуализации);
			ТипФайлаPDF = ДокументPdf.ТипФайла;
			Если Не ТипФайлаPDF = ТипФайлаДокументаPDF.PDF_A_3 Тогда
				ДокументPdf.Записать(ИмяФайлаВизуализации,, ТипФайлаДокументаPDF.PDF_A_3);
			КонецЕсли;
			ДокументPdf = Неопределено;
		Исключение
			ТекстОшибки = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ДокументPdf = Неопределено;
			Возврат "";
		КонецПопытки;
	
	Иначе // Получение представления файла xml для стандартных форматов.
		
		Если ТипЗнч(ФайлДокумента) = Тип("СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы") Тогда
			РезультатПредставленияЭДО = ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке(СтрокаДанныхФайла.СообщениеЭДО);
			ЭлектронныеДокументыЭДО.ДополнитьТабличныйДокументШтампамиПодписей(РезультатПредставленияЭДО.ПредставлениеДокумента, СтрокаДанныхФайла.СообщениеЭДО);
			ПредставлениеДокумента = РезультатПредставленияЭДО.ПредставлениеДокумента;
			
			Если ПредставлениеДокумента = Неопределено Тогда
				Возврат "";
			КонецЕсли; 		
		Иначе
			РасширениеФайлаОригинала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлДокумента, "ТекущаяВерсияРасширение");
			Если НРег(РасширениеФайлаОригинала) <> "xml" Тогда
				Возврат "";
			КонецЕсли;
		
			ДанныеЭДО = Новый Структура("Файл", ФайлДокумента);
			РезультатПредставленияЭДО = ОбменСКонтрагентамиДОСлужебный.ПредставлениеДанныхЭДО(ДанныеЭДО);
			ПредставлениеДокумента = РезультатПредставленияЭДО.ТабличныйДокумент;
			
			Если ПредставлениеДокумента = Неопределено Тогда
				Возврат "";
			КонецЕсли;		
		КонецЕсли;
		
		Попытка
			ПредставлениеДокумента.Записать(ИмяФайлаВизуализации,
				СтандартныеПодсистемыСервер.ТипФайлаТабличногоДокументаPDF());
			ДокументPdf = Новый ДокументPDF();
			ДокументPdf.Прочитать(ИмяФайлаВизуализации);
			ТипФайлаPDF = ДокументPdf.ТипФайла;
			Если Не ТипФайлаPDF = ТипФайлаДокументаPDF.PDF_A_3 Тогда
				ДокументPdf.Записать(ИмяФайлаВизуализации,, ТипФайлаДокументаPDF.PDF_A_3);
			КонецЕсли;
			ДокументPdf = Неопределено;
		Исключение
			ТекстОшибки = ТекстОшибки + Символы.ПС +
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ДокументPdf = Неопределено;
			Возврат "";
		КонецПопытки;
		
	КонецЕсли;
		
	Возврат ИмяФайлаВизуализацииБезПути;
	
КонецФункции

Функция ПодписиФайловДокумента(Документ, ТаблицаФайловДокумента, ВременнаяПапка, ТекстОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПодписей = Новый ТаблицаЗначений;
	ТаблицаПодписей.Колонки.Добавить("ФайлДокумента");
	ТаблицаПодписей.Колонки.Добавить("ТипПодписи");
	ТаблицаПодписей.Колонки.Добавить("ДатаПодписи");
	ТаблицаПодписей.Колонки.Добавить("Подписал");
	ТаблицаПодписей.Колонки.Добавить("Должность");
	ТаблицаПодписей.Колонки.Добавить("ИмяФайлаПодписи");
	ТаблицаПодписей.Колонки.Добавить("НомерДоверенности");
	ТаблицаПодписей.Колонки.Добавить("ХешСуммаПЭП");
	
	// Усиленные ЭП.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК ФайлДокумента,
		|	Файлы.ПолноеНаименование КАК НаименованиеФайла,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
		|	ЭП.Подпись КАК Подпись,
		|	""Qualified"" КАК ТипПодписи,
		|	ЭП.ДатаПодписи КАК ДатаПодписи,
		|	ЭП.КомуВыданСертификат КАК Подписал,
		|	ЕСТЬNULL(ДоверенностиЭП.Доверенность.НомерДоверенности, """") КАК НомерДоверенности,
		|	ЭП.ПодписьВерна КАК ПодписьВерна,
		|	ЭП.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
		|	ЭП.Сертификат КАК Сертификат
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ПО Файлы.ТекущаяВерсия = ЭП.ПодписанныйОбъект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоверенностиЭлектронныхПодписей КАК ДоверенностиЭП
		|		ПО ЭП.ИдентификаторПодписи = ДоверенностиЭП.УникальныйИдентификаторПодписи
		|ГДЕ
		|	Файлы.Ссылка В (&ФайлыДокумента)
		|ИТОГИ
		|ПО
		|	ФайлДокумента";
	Запрос.Параметры.Вставить("ФайлыДокумента", ТаблицаФайловДокумента.ВыгрузитьКолонку("ФайлДО"));

	ВыборкаФайл = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаФайл.Следующий() Цикл
		Выборка = ВыборкаФайл.Выбрать();
		ИндексЭП = ?(Выборка.Количество() > 1, 1, 0);
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПодписьВерна <> Истина И ЗначениеЗаполнено(Выборка.ДатаПроверкиПодписи) Тогда
				ТекстОшибки = ТекстОшибки + Символы.ПС +
					СтрШаблон(НСтр("ru = 'Подпись файла %1 неверна. Подписал: %2.'"),
					Выборка.ФайлДокумента, Выборка.Подписал);
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = Выборка.Подпись.Получить();
			Если ДвоичныеДанныеПодписи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПодписи = ТаблицаПодписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПодписи, Выборка);
			
			ИмяФайлаСРасширением = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
				Выборка.НаименованиеФайла, Выборка.Расширение);
				
			СтрокаТаблицыФайлаДокумента	= ТаблицаФайловДокумента.Найти(Выборка.ФайлДокумента, "ФайлДО");
			Если СтрокаТаблицыФайлаДокумента <> Неопределено Тогда
				ИмяФайлаСРасширением = СтрокаТаблицыФайлаДокумента.ИмяВоВременнойПапке;
			КонецЕсли;
			
			ИмяФайлаПодписи = СтрШаблон("%1%2.p7s", ИмяФайлаСРасширением,
				?(ИндексЭП = 0, "", "_" + Строка(ИндексЭП)));
				
			ИмяФайлаПодписиПолное = ВременнаяПапка + ИмяФайлаПодписи;
			ИмяФайлаПодписиПолное = ОпределитьУникальноеИмяФайла(ИмяФайлаПодписиПолное);
			
			Попытка
				ДвоичныеДанныеПодписи.Записать(ИмяФайлаПодписиПолное);
			Исключение
				ТекстОшибки = ТекстОшибки + Символы.ПС +
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Продолжить;
			КонецПопытки;
			
			СтрокаПодписи.ИмяФайлаПодписи = СтрЗаменить(ИмяФайлаПодписиПолное, ВременнаяПапка, "");
			
			Если ЗначениеЗаполнено(Выборка.Сертификат) Тогда
				ЗаполнитьСведенияОПодписантеИзСертификата(Выборка.Сертификат, СтрокаПодписи);
			КонецЕсли;
			
			ИндексЭП = ИндексЭП + 1;
			
		КонецЦикла;
	КонецЦикла;
	
	// ЭДО ЭП.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка КАК ФайлДокумента,
		|	СообщениеЭДОПрисоединенныеФайлы.Наименование КАК НаименованиеФайла,
		|	СообщениеЭДОПрисоединенныеФайлы.Расширение КАК Расширение,
		|	ЭП.Подпись КАК Подпись,
		|	""Qualified"" КАК ТипПодписи,
		|	ЭП.ДатаПодписи КАК ДатаПодписи,
		|	ЭП.КомуВыданСертификат КАК Подписал,
		|	ЕСТЬNULL(ДоверенностиЭП.Доверенность.НомерДоверенности, """") КАК НомерДоверенности,
		|	ЭП.ПодписьВерна КАК ПодписьВерна,
		|	ЭП.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
		|	ЭП.Сертификат КАК Сертификат
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ПО СообщениеЭДОПрисоединенныеФайлы.Ссылка = ЭП.ПодписанныйОбъект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоверенностиЭлектронныхПодписей КАК ДоверенностиЭП
		|		ПО ЭП.ИдентификаторПодписи = ДоверенностиЭП.УникальныйИдентификаторПодписи
		|ГДЕ
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка В (&ФайлыДокумента)
		|ИТОГИ
		|ПО
		|	ФайлДокумента";
	Запрос.Параметры.Вставить("ФайлыДокумента", ТаблицаФайловДокумента.ВыгрузитьКолонку("ФайлЭДО"));	
	
	ВыборкаФайл = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаФайл.Следующий() Цикл
		Выборка = ВыборкаФайл.Выбрать();
		ИндексЭПЭДО = ?(Выборка.Количество() > 1, 1, 0);
		Пока Выборка.Следующий() Цикл
		
			Если Выборка.ПодписьВерна <> Истина И ЗначениеЗаполнено(Выборка.ДатаПроверкиПодписи) Тогда
				ТекстОшибки = ТекстОшибки + Символы.ПС +
					СтрШаблон(НСтр("ru = 'Подпись файла %1 неверна. Подписал: %2.'"),
					Выборка.ФайлДокумента, Выборка.Подписал);
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = Выборка.Подпись.Получить();
			Если ДвоичныеДанныеПодписи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПодписи = ТаблицаПодписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПодписи, Выборка);
			
			ИмяФайлаСРасширением =
				ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(Выборка.НаименованиеФайла, Выборка.Расширение);
			
			СтрокаТаблицыФайлаДокумента	= ТаблицаФайловДокумента.Найти(Выборка.ФайлДокумента, "ФайлЭДО");
			Если СтрокаТаблицыФайлаДокумента <> Неопределено Тогда
				ИмяФайлаСРасширением = СтрокаТаблицыФайлаДокумента.ИмяВоВременнойПапке;
			КонецЕсли;
				
			ИмяФайлаПодписи = СтрШаблон("%1%2SGN.sgn", ИмяФайлаСРасширением,
				?(ИндексЭПЭДО = 0, "", "_" + Строка(ИндексЭПЭДО)));
			
			ИмяФайлаПодписиПолное = ВременнаяПапка + ИмяФайлаПодписи;
			ИмяФайлаПодписиПолное = ОпределитьУникальноеИмяФайла(ИмяФайлаПодписиПолное);
			
			Попытка
				ДвоичныеДанныеПодписи.Записать(ИмяФайлаПодписиПолное);
			Исключение
				ТекстОшибки = ТекстОшибки + Символы.ПС +
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Продолжить;
			КонецПопытки;
			
			СтрокаПодписи.ИмяФайлаПодписи = СтрЗаменить(ИмяФайлаПодписиПолное, ВременнаяПапка, "");
			
			Если ЗначениеЗаполнено(Выборка.Сертификат) Тогда
				ЗаполнитьСведенияОПодписантеИзСертификата(Выборка.Сертификат, СтрокаПодписи);
			КонецЕсли;
			
			ИндексЭПЭДО = ИндексЭПЭДО + 1;
			
		КонецЦикла;
	КонецЦикла; 
	
	// Простые ЭП и бумажные подписи.
	ДанныеПодписантов = Неопределено;
	ЭтоЭлектронныйДокумент = Неопределено;
	Для Каждого СтрокаФайлаДокумента Из ТаблицаФайловДокумента Цикл
		
		ФайлДокумента = СтрокаФайлаДокумента.ФайлДО;
		Если ТаблицаПодписей.Найти(ФайлДокумента, "ФайлДокумента") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеПодписантов = Неопределено Тогда
			ДанныеПодписантов = ДействияСервер.ДанныеПодписантовПЭП(Документ);
			ФормаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ФормаДокумента");
			ЭтоЭлектронныйДокумент = ФормаДокумента = Перечисления.ВариантыФормДокументов.Электронная;
		КонецЕсли;
		
		ИмяФайлаПодписиБезРасширения = СтрокаФайлаДокумента.ИмяВоВременнойПапке;
		
		ИндексЭП = ?(ДанныеПодписантов.Количество() > 1, 1, 0);
		
		Для Каждого ДанныеПодписи Из ДанныеПодписантов Цикл
			
			Если ТипЗнч(ДанныеПодписи.Подписант) <> Тип("СправочникСсылка.Сотрудники") Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПодписи = ТаблицаПодписей.Добавить();
			СтрокаПодписи.ФайлДокумента = ФайлДокумента;
			СтрокаПодписи.ТипПодписи = ?(ЭтоЭлектронныйДокумент, "Simple", "Paper");
			СтрокаПодписи.ДатаПодписи = ДанныеПодписи.Дата;
			СтрокаПодписи.Подписал = Строка(ДанныеПодписи.Подписант);
			СтрокаПодписи.Должность = Строка(ДанныеПодписи.Должность);
			
			// Формирование файла ПЭП.
			Если ЭтоЭлектронныйДокумент Тогда
				
				ИмяФайлаПодписи = СтрШаблон("%1%2.txt", ИмяФайлаПодписиБезРасширения,
					?(ИндексЭП = 0, "", "_" + Строка(ИндексЭП)));
				ИмяФайлаПодписиПолное = ВременнаяПапка + ИмяФайлаПодписи;
				ИмяФайлаПодписиПолное = ОпределитьУникальноеИмяФайла(ИмяФайлаПодписиПолное);
				
				ИмяПользователяИБ = "";
				ПользовательПодписал = Сотрудники.ПользовательСотрудника(ДанныеПодписи.Подписант);
				Если ЗначениеЗаполнено(ПользовательПодписал) Тогда
					ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						ПользовательПодписал, "ИдентификаторПользователяИБ");
					ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
						ИдентификаторПользователяИБ);
					Если ПользовательИБ <> Неопределено Тогда
						ИмяПользователяИБ = ПользовательИБ.Имя;
					КонецЕсли;
 				КонецЕсли;
				
				ФайлПЭП = Новый ТекстовыйДокумент;
				ФайлПЭП.ДобавитьСтроку(СтрШаблон("Дата подписи UTC: %1", УниверсальноеВремя(ДанныеПодписи.Дата)));
				ФайлПЭП.ДобавитьСтроку(СтрШаблон("Подписал: %1", СтрокаПодписи.Подписал));
				ФайлПЭП.ДобавитьСтроку(СтрШаблон("Должность: %1", СтрокаПодписи.Должность));
				ФайлПЭП.ДобавитьСтроку(СтрШаблон("Имя пользователя: %1", ИмяПользователяИБ));
				ФайлПЭП.ДобавитьСтроку(СтрШаблон("Хеш-сумма SHA-256: %1", СтрокаФайлаДокумента.ХешСумма));
				ФайлПЭП.Записать(ИмяФайлаПодписиПолное);
				
				ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
				ХешированиеДанных.ДобавитьФайл(ИмяФайлаПодписиПолное);
				СтрокаПодписи.ХешСуммаПЭП = Base64Строка(ХешированиеДанных.ХешСумма);
				
				СтрокаПодписи.ИмяФайлаПодписи = СтрЗаменить(ИмяФайлаПодписиПолное, ВременнаяПапка, "");
				ИндексЭП = ИндексЭП + 1;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПодписей;
	
КонецФункции

Процедура ЗаполнитьСведенияОПодписантеИзСертификата(СертификатПодписанта, СтрокаПодписи)
	
	ДанныеСертификата = СертификатПодписанта.Получить();
	Если Не ЗначениеЗаполнено(ДанныеСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
	
	Субъект = Сертификат.Субъект;
	Фамилия = "";
	Имя = "";

	Если Субъект.Свойство("SN") Тогда
		Фамилия = СокрЛП(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML((Субъект.SN)));
	КонецЕсли;
	
	Если Субъект.Свойство("GN") Тогда
		Имя = СокрЛП(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML((Субъект.GN)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фамилия) Или ЗначениеЗаполнено(Имя) Тогда
		СтрокаПодписи.Подписал = Фамилия + " " + Имя;
	КонецЕсли;
	
	Если Субъект.Свойство("T") Тогда
		СтрокаПодписи.Должность = СокрЛП(
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML((Субъект.T)));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСвязиПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязиОбъектов.СвязанныйОбъект,
		|	СвязиОбъектов.Комментарий,
		|	СвязиОбъектов.ТипСвязи,
		|	СвязиОбъектов.СвязаннаяСтрока,
		|	СвязиОбъектов.ТипСвязи.Наименование КАК НаименованиеТипаСвязи,
		|	СвязиОбъектов.Объект
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект = &Объект
		|	И (СвязиОбъектов.СвязанныйОбъект ССЫЛКА Справочник.ДокументыПредприятия
		|	ИЛИ СвязиОбъектов.СвязанныйОбъект = НЕОПРЕДЕЛЕНО
		|	И СвязиОбъектов.СвязаннаяСтрока <> """")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СвязиОбъектов.СвязанныйОбъект,
		|	СвязиОбъектов.Комментарий,
		|	СвязиОбъектов.ТипСвязи,
		|	СвязиОбъектов.СвязаннаяСтрока,
		|	СвязиОбъектов.ТипСвязи.Наименование КАК НаименованиеТипаСвязи,
		|	СвязиОбъектов.Объект
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.СвязанныйОбъект = &Объект
		|	И СвязиОбъектов.Объект ССЫЛКА Справочник.ДокументыПредприятия";
	
	Запрос.УстановитьПараметр("Объект", ДокументСсылка);
	
	ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
			
	Возврат ТаблицаСвязей;
	
КонецФункции

Функция ШтрихкодыДокумента(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Штрихкоды.ВнутреннийШтрихкод КАК ВнутреннийШтрихкод,
		|	Штрихкоды.Код КАК Код
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Документ";
	
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Штрихкоды = Запрос.Выполнить().Выгрузить();
			
	Возврат Штрихкоды;
	
КонецФункции

Функция СобытиеЖурналаРегистрацииВыгрузкаСдаточнойОписи()
	
	Возврат СтрШаблон(НСтр("ru = '%1.Выгрузка сдаточной описи'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ОбменСАрхивом.СобытиеЖурналаРегистрации());
	
КонецФункции

Функция ПроверитьЗаполнениеОбязательныхРеквизитов(ОбъектXDTO)
	
	МассивОшибок = Новый Массив;
	
	СвойствоЭтоГруппа = ОбъектXDTO.Свойства().Получить("IsFolder");
	Если СвойствоЭтоГруппа <> Неопределено
		И ОбъектXDTO.IsFolder = Истина Тогда
		Возврат "";
	КонецЕсли;
	
	Для Каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл
		Если СвойствоXDTO.НижняяГраница <> 1 Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектXDTO[СвойствоXDTO.Имя]) Тогда
			Продолжить;
		КонецЕсли;
		МассивОшибок.Добавить(СтрШаблон(НСтр("ru = 'не заполнено поле ""%1""'"), СвойствоXDTO.Имя));
	КонецЦикла;
		
	Возврат СтрСоединить(МассивОшибок, "; ");
		
КонецФункции

Функция ОпределитьУникальноеИмяФайла(Знач ИсходноеИмяФайла, Знач ЭтоКаталог = Ложь)
	
	ПозицияДляДополнения = СтрНайти(ИсходноеИмяФайла, ".", НаправлениеПоиска.СКонца);
	Если ПозицияДляДополнения = 0 Или ЭтоКаталог Тогда
		ПозицияДляДополнения = СтрДлина(ИсходноеИмяФайла) + 1;
	КонецЕсли;
	
	Счетчик = 0;
	
	ЧастьИмениДоПозицииДляДополнения = Лев(ИсходноеИмяФайла, ПозицияДляДополнения - 1);
	ЧастьИмениПослеПозицииДляДополнения = Сред(ИсходноеИмяФайла, ПозицияДляДополнения);
	
	Пока Истина Цикл
		
		ДополнениеИмени = ?(Счетчик = 0, "", "_" + Формат(Счетчик, "ЧГ=0;"));
		ИмяФайла = ЧастьИмениДоПозицииДляДополнения + ДополнениеИмени + ЧастьИмениПослеПозицииДляДополнения;

		Файл = Новый Файл(ИмяФайла);
		Если Не Файл.Существует() Тогда
			Прервать;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат ИмяФайла;
	
КонецФункции

#КонецОбласти
