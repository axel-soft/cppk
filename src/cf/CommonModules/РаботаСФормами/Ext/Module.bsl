////////////////////////////////////////////////////////////////////////////////
// Общий модуль для работы с формами клиентского приложения (сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет диаграмму формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//  ПутьКДанным - Строка - Путь к реквизиту формы.
// 
// Возвращаемое значение:
//  ПолеФормы - Диаграмма формы.
//
Функция ДобавитьДиаграмму(Форма, Имя, Родитель, ПутьКДанным) Экспорт
	
	СозданныйЭлемент = Форма.Элементы.Вставить(Имя, Тип("ПолеФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидПоляФормы.ПолеДиаграммы;
	СозданныйЭлемент.ПутьКДанным = ПутьКДанным;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет картинку формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//  Картинка - Картинка - Картинка.
// 
// Возвращаемое значение:
//  ДекорацияФормы - Картинка формы.
//
Функция ДобавитьКартинку(Форма, Имя, Родитель, Картинка) Экспорт
	
	СозданныйЭлемент = Форма.Элементы.Вставить(Имя, Тип("ДекорацияФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидДекорацииФормы.Картинка;
	СозданныйЭлемент.Картинка = Картинка;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет кнопку формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемой команды.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//  ИмяКоманды - Строка - Имя команды.
//  ВставитьПеред - Неопределено
//                - КнопкаФормы
// 
// Возвращаемое значение:
//  КнопкаФормы - Кнопка формы.
//
Функция ДобавитьКнопку(Форма, Имя, Родитель, ИмяКоманды, ВставитьПеред = Неопределено) Экспорт
	
	СозданныйЭлемент = Форма.Элементы.Вставить(Имя, Тип("КнопкаФормы"), Родитель, ВставитьПеред);
	СозданныйЭлемент.ИмяКоманды = ИмяКоманды;
	СозданныйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет команду формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемой команды.
//  Заголовок - Строка - Заголовок добавляемой команды.
//  Подсказка - Строка - Подсказка добавляемой команды.
//  Картинка - Картинка, Неопределено - Картинка добавляемой команды.
// 
// Возвращаемое значение:
//  КомандыФормы - Команда формы.
//
Функция ДобавитьКоманду(Форма, Имя, Заголовок, Подсказка, Картинка = Неопределено) Экспорт
	
	СозданнаяКоманда = Форма.Команды.Добавить(Имя);
	СозданнаяКоманда.Действие = "Подключаемый_Команда";
	СозданнаяКоманда.Заголовок = Заголовок;
	СозданнаяКоманда.Подсказка = Подсказка;
	Если Картинка <> Неопределено Тогда
		СозданнаяКоманда.Картинка = Картинка;
		СозданнаяКоманда.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
	
	Возврат СозданнаяКоманда;
	
КонецФункции

// Добавляет надпись формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//  Надпись - Строка - Надпись.
// 
// Возвращаемое значение:
//  ДекорацияФормы - Надпись формы.
//
Функция ДобавитьНадпись(Форма, Имя, Родитель, Надпись) Экспорт
	
	СозданныйЭлемент = Форма.Элементы.Вставить(Имя, Тип("ДекорацияФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	СозданныйЭлемент.Заголовок = Надпись;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет обычную группу формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемой группы.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемой группы.
// 
// Возвращаемое значение:
//  ГруппаФормы - Добавленная группа формы.
//
Функция ДобавитьОбычнуюГруппу(Форма, Имя, Родитель) Экспорт
	
	СозданныйЭлемент = Форма.Элементы.Вставить(Имя, Тип("ГруппаФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	СозданныйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	СозданныйЭлемент.Отображение = ОтображениеОбычнойГруппы.Нет;
	СозданныйЭлемент.ОтображатьЗаголовок = Ложь;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет отступ формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
// 
// Возвращаемое значение:
//  ДекорацияФормы - Отступ формы.
//
Функция ДобавитьОтступ(Форма, Имя, Родитель) Экспорт
	
	СозданныйЭлемент = ДобавитьНадпись(Форма, Имя, Родитель, "");
	СозданныйЭлемент.РастягиватьПоГоризонтали = Истина;
	СозданныйЭлемент.РастягиватьПоВертикали = Истина;
	СозданныйЭлемент.Высота = 1;
	СозданныйЭлемент.Ширина = 1;
	СозданныйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	СозданныйЭлемент.АвтоМаксимальнаяВысота= Ложь;
	СозданныйЭлемент.МаксимальнаяШирина = 1;
	СозданныйЭлемент.МаксимальнаяВысота = 1;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет страницы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
// 	ОтображениеСтраницЗакладкиСверху - Булево - Признак отображения закладок сверху (по умолчанию - отключено)
// 
// Возвращаемое значение:
//  ГруппаФормы - Страницы формы.
//
Функция ДобавитьСтраницы(Форма, Имя, Родитель, ОтображениеСтраницЗакладкиСверху = Ложь) Экспорт
	
	СозданныйЭлемент = Форма.Элементы.Вставить(Имя, Тип("ГруппаФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидГруппыФормы.Страницы;
	СозданныйЭлемент.ОтображениеСтраниц = ?(ОтображениеСтраницЗакладкиСверху, ОтображениеСтраницФормы.ЗакладкиСверху,
			ОтображениеСтраницФормы.Нет);
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет страницу формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//	ОтображатьЗаголовок - Булево - Признак, отвечающий за отображения заголовка страницы (по умолчанию = Ложь)
//
// Возвращаемое значение:
//  ГруппаФормы - Страницы формы.
//
Функция ДобавитьСтраницу(Форма, Имя, Родитель, ОтображатьЗаголовок = Ложь) Экспорт
	
	СозданныйЭлемент = Форма.Элементы.Вставить(Имя, Тип("ГруппаФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидГруппыФормы.Страница;
	СозданныйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	СозданныйЭлемент.ОтображатьЗаголовок = ОтображатьЗаголовок;
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет поле ввода формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//  ПутьКДанным - Строка - Путь к реквизиту формы.
// 
// Возвращаемое значение:
//  ПолеФормы - Поле ввода формы.
//
Функция ДобавитьПолеВвода(Форма, Имя, Родитель, ПутьКДанным) Экспорт
	
	СозданныйЭлемент = Форма.Элементы.Вставить(Имя, Тип("ПолеФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	СозданныйЭлемент.ПутьКДанным = ПутьКДанным;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет поле картинки формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//  ПутьКДанным - Строка - Путь к реквизиту формы.
//  КоллекцияКартинок - Картинок - Используемая коллекция картинок.
// 
// Возвращаемое значение:
//  ПолеФормы - Поле картинки формы.
//
Функция ДобавитьПолеКартинки(Форма, Имя, Родитель, ПутьКДанным, КоллекцияКартинок) Экспорт
	
	СозданныйЭлемент = Форма.Элементы.Вставить(Имя, Тип("ПолеФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
	СозданныйЭлемент.ПутьКДанным = ПутьКДанным;
	СозданныйЭлемент.КартинкаЗначений = КоллекцияКартинок;
	СозданныйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	СозданныйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 1);
	СозданныйЭлемент.РастягиватьПоГоризонтали = Ложь;
	СозданныйЭлемент.РастягиватьПоВертикали = Ложь;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет поле флажка формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//  ПутьКДанным - Строка - Путь к реквизиту формы.
// 
// Возвращаемое значение:
//  ПолеФормы - Поле флажка формы.
//
Функция ДобавитьПолеФлажка(Форма, Имя, Родитель, ПутьКДанным) Экспорт
	
	СозданныйЭлемент = Форма.Элементы.Вставить(Имя, Тип("ПолеФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	СозданныйЭлемент.ПутьКДанным = ПутьКДанным;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создаёт поле надписи формы.
// 
// Возвращаемое значение:
//  ПолеФормы, РасширениеПоляФормыДляПоляНадписи - Созданное поле надписи
Функция ДобавитьПолеНадписи(Элементы, Имя, Родитель, ПутьКДанным) Экспорт
	
	СозданныйЭлемент = Элементы.Вставить(Имя, Тип("ПолеФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	СозданныйЭлемент.ПутьКДанным = ПутьКДанным;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет реквизит формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Имя реквизита.
//  Тип - Строка, Тип, ОписаниеТипов - Тип реквизита.
//
Процедура ДобавитьРеквизит(Форма, Имя, Тип) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, Имя, Тип);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

// Добавляет таблицу формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//  ПутьКДанным - Строка - Путь к реквизиту формы.
// 
// Возвращаемое значение:
//  ТаблицаФормы - Добавленная таблица формы.
//
Функция ДобавитьТаблицуФормы(Форма, Имя, Родитель, ПутьКДанным) Экспорт
	
	СозданныйЭлемент = Форма.Элементы.Вставить(Имя, Тип("ТаблицаФормы"), Родитель);
	СозданныйЭлемент.ПутьКДанным = ПутьКДанным;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Добавляет в добавляемые реквизиты таблицу.
Процедура ДобавляемыеРеквизитыДобавитьТаблицу(ДобавляемыеРеквизиты, Имя, Колонки) Экспорт
	
	ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, Имя, "ТаблицаЗначений");
	Для Каждого Колонка Из Колонки Цикл
		ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, Колонка.Имя, Колонка.Тип, Имя);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в добавляемые реквизиты.
//
// Параметры:
//  ДобавляемыеРеквизиты - Массив - Добавляемые реквизиты.
//  Имя - Строка - Имя реквизита.
//  Тип - Строка, Тип, ОписаниеТипов - Тип реквизита.
//  Путь - Строка - Путь реквизита.
//
Процедура ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, Имя, Тип, Путь = Неопределено) Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипДобавляемогоРеквизита = Новый ОписаниеТипов(Тип);
	ИначеЕсли ТипЗнч(Тип) = Тип("Тип") Тогда
		Типы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип);
		ТипДобавляемогоРеквизита = Новый ОписаниеТипов(Типы);
	ИначеЕсли ТипЗнч(Тип) = Тип("ОписаниеТипов") Тогда
		ТипДобавляемогоРеквизита = Тип;
	КонецЕсли;
	ДобавляемыйРеквизит = Новый РеквизитФормы(Имя, ТипДобавляемогоРеквизита, Путь);
	ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит);
	
КонецПроцедуры

// Проверяет, существует ли реквизит формы.
Функция РеквизитСуществует(Форма, Имя) Экспорт
	
	РеквизитСуществует = Ложь;
	
	Реквизиты = Форма.ПолучитьРеквизиты();
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Имя = Имя Тогда
			РеквизитСуществует = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитСуществует;
	
КонецФункции

// Удаляет реквизит формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Имя реквизита.
//
Процедура УдалитьРеквизит(Форма, Имя) Экспорт
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты.Добавить(Имя);
	Форма.ИзменитьРеквизиты(Новый Массив, УдаляемыеРеквизиты);
	
КонецПроцедуры

// Удаляет элемент формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Имя элемента.
//
Процедура УдалитьЭлемент(Форма, Имя) Экспорт
	
	Элемент = Форма.Элементы.Найти(Имя);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.Удалить(Элемент);
	
КонецПроцедуры

#КонецОбласти