#Область ПрограммныйИнтерфейс

Функция ИспользоватьСогласованиеСЗамечаниями() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеСЗамечаниями");
КонецФункции

// Возвращает имя справочника, который хранит объекты соответствующего вида.
//
// Параметры:
//  ВидДействия - СправочникСсылка.ВидыДействий - Вид действия, для которого необходимо определить
//												  имя справочника, который хранит объекты данного вида.
//
// Возвращаемое значение:
//  Строка - Имя вида справочника (напр., "ДействияИсполнения").
//
Функция ИмяСправочникаПоВидуДействия(ВидДействия) Экспорт
	
	Возврат ДействияСервер.ИмяСправочникаПоВидуДействия(ВидДействия);
	
КонецФункции

// Тип действия по виду действия.
// 
// Параметры:
//  ВидДействия - СправочникСсылка.ВидыДействий
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыДействий -  Тип действия по виду
//
Функция ТипДействияПоВидуДействия(ВидДействия) Экспорт
	
	Возврат ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(ВидДействия, "Тип");
	
КонецФункции

// Вовзращает массив сотрудников пользователя, включая его активные замещения.
// 
// Параметры:
//  ТекущийПользователь - СправочникСсылка.Пользователи - Текущий пользователь
//  ДляМероприятий - Булево - режим поиска замещений для мероприятий
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Сотрудники, включая его активные замещения
//
Функция СотрудникиВключаяЗамещения(ТекущийПользователь, ДляМероприятий = Ложь) Экспорт
	
	ПользовательИЕгоСотрудники = Сотрудники.ПользовательИЕгоСотрудники(
		ТекущийПользователь);
		
	// Получим заместителей и помощников.
	ОбластиЗамещения = Новый Массив;
	ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ВсеОбласти);
	
	Если ДляМероприятий Тогда
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Мероприятия);
	Иначе
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Документы);
	КонецЕсли;
	
	АктуальныеЗамещения = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещения(
		ПользовательИЕгоСотрудники, ОбластиЗамещения);
	ВсеЗамещающиеИПомощники = АктуальныеЗамещения.ВыгрузитьКолонку("Сотрудник");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПользовательИЕгоСотрудники, ВсеЗамещающиеИПомощники, Истина);
	
	Возврат ПользовательИЕгоСотрудники;
	
КонецФункции

// Вовзращает Булево.
// 
// Параметры:
//  ДляМероприятий - Булево - режим поиска замещений для мероприятий
// 
// Возвращаемое значение:
//  Булево
//
Функция ПользовательЯвляетсяЗаместителемИлиПомощником(ДляМероприятий = Ложь) Экспорт
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ПользовательИЕгоСотрудники = Сотрудники.ПользовательИЕгоСотрудники(
		ТекущийПользователь);
		
	// Получим заместителей и помощников.
	ОбластиЗамещения = Новый Массив;
	ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ВсеОбласти);
	
	Если ДляМероприятий Тогда
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Мероприятия);
	Иначе
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Документы);
	КонецЕсли;
	
	АктуальныеЗамещения = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещения(
		ПользовательИЕгоСотрудники, ОбластиЗамещения);
	ВсеЗамещающиеИПомощники = АктуальныеЗамещения.ВыгрузитьКолонку("Сотрудник");
	
	Возврат ВсеЗамещающиеИПомощники.Количество() <> 0;
	
КонецФункции

// Проверяет разрешение сотрудника на редактирование таблицы "Стороны" документа.
// 
// Параметры:
//  Подписант                - СправочникСсылка.Сотрудники - Подписывающий предмет по действию подписания.
//  ОбеспечивающийПодписание - СправочникСсылка.Сотрудники - Обеспечивающий подписание предмета по действию подписания.
//  Документ                 - СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  Булево - Истина, если у сотрудника есть право на редактирование.
//
Функция ЕстьПравоРедактированияСторонПоПодписантуДокумента(
		Знач Подписант, Знач ОбеспечивающийПодписание, Знач Документ) Экспорт
	
	Если ЗначениеЗаполнено(Подписант) Тогда
		
		Если Сотрудники.ЭтоСотрудникПользователя(Подписант) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ОбластиЗамещения = Новый Массив;
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ВсеОбласти);
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ДокументыПодписание);
		ЗамещенияСотрудникаПоФункцииПодписания = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещенияСотрудников(
			Подписант, ОбластиЗамещения);
		Для Каждого Замещение Из ЗамещенияСотрудникаПоФункцииПодписания Цикл
			Если Сотрудники.ЭтоСотрудникПользователя(Замещение.Замещающий) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбеспечивающийПодписание) Тогда
		Если Сотрудники.ЭтоСотрудникПользователя(ОбеспечивающийПодписание) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Проверяет необходимость в настройке направления задачи автору или помощнику
// Параметры:
//  ВидДействия ВидДействияЗадачи - проверяемый вид действия
//  ВидЗадачи ВидЗадачи - проверяемый вид задачи (по умолчанию - неопределено)
// Возвращаемое значение:
// Истина/Ложь Булево Необходимо настроить или нет
//
Функция НастроитьНаправитьАвторуПомощнику(ВидДействия, ВидЗадачи = Неопределено) Экспорт
	
	ВидДействияРассмотреть = Справочники.ВидыДействийЗадач.Рассмотреть;
	ВидЗадачиРассмотрение = Справочники.ВидыЗадач.Рассмотрение;
	
	Возврат ?(ВидДействия = ВидДействияРассмотреть Или ВидЗадачи = ВидЗадачиРассмотрение, Истина, Ложь);
	
КонецФункции

#КонецОбласти