////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет количество предстоящих записей календаря.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  Число - Количество предстоящих записей календаря.
//
Функция ВсегоПредстоящихЗаписейКалендаря(Пользователь) Экспорт
	
	ДатаНачала = ТекущаяДатаСеанса();
	ДатаОкончания = ДобавитьМесяц(ДатаНачала, 1);
	Если Пользователь = Пользователи.ТекущийПользователь() Тогда
		ФизЛицоПользователя = ПараметрыСеанса.ФизическоеЛицоПользователя;
	Иначе
		ФизЛицоПользователя = ПользователиДокументооборот.ФизЛицоПользователя(Пользователь);
	КонецЕсли;
	
	ТаблицаСобытий = ПолучитьСобытияФизЛицаСотрудника(
		ДатаНачала,
		ДатаОкончания,
		ФизЛицоПользователя,
		Ложь);
	
	Возврат ТаблицаСобытий.Количество();
	
КонецФункции

// Определяет ближайшие записи календаря.
// 
// Возвращаемое значение:
//  Массив из Структура - Данные ближайших записей календаря. См. РаботаСВиджетами.ДанныеСтрокиСписка().
//
Функция БлижайшиеЗаписиКалендаря() Экспорт
	
	МаксимальноеКоличествоСтрок = РаботаСВиджетами.МаксимальноеКоличествоСтрокВиджетаСписок();
	
	ТаблицаСобытий = ПолучитьСобытияФизЛицаСотрудника(
		ТекущаяДатаСеанса(),
		ДобавитьМесяц(ТекущаяДатаСеанса(), 1),
		ПользователиДокументооборот.ФизЛицоПользователя(),
		Ложь);
	
	КоличествоСтрок = 0;
	Для Каждого СтрокаСобытия Из ТаблицаСобытий Цикл
		
		Если СтрокаСобытия.Цвет <> Перечисления.ЦветаРабочегоКалендаря.Нет Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоСтрок = КоличествоСтрок + 1;
		Если КоличествоСтрок = МаксимальноеКоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоСтрок = 0;
	БлижайшиеЗаписиКалендаря = Новый Массив;
	Для Каждого СтрокаСобытия Из ТаблицаСобытий Цикл
		
		ДанныеСтрокиСписка = РаботаСВиджетами.ДанныеСтрокиСписка();
		
		ДанныеСтрокиСписка.Значение = СтрПолучитьСтроку(СтрокаСобытия.Наименование, 1);
			
		ДанныеСтрокиСписка.Ссылка = ПолучитьНавигационнуюСсылку(СтрокаСобытия.Ссылка);
		
		ДанныеСтрокиСписка.ИндексКартинки = РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета(
			СтрокаСобытия.Цвет,
			СтрокаСобытия.Отработана);
		Если ДанныеСтрокиСписка.ИндексКартинки = 0 Тогда
			ДанныеСтрокиСписка.ИндексКартинки = 7;
		КонецЕсли;
		
		ДанныеСтрокиСписка.Комментарий = РаботаСВиджетами.ПредставлениеДатыСписка(
			СтрокаСобытия.ДатаНачала);
		
		БлижайшиеЗаписиКалендаря.Добавить(ДанныеСтрокиСписка);
		
		КоличествоСтрок = КоличествоСтрок + 1;
		Если КоличествоСтрок = МаксимальноеКоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БлижайшиеЗаписиКалендаря;
	
КонецФункции

// Сохраняет переданный массив записей календаря
Функция СохранитьЗаписиКалендаря(Знач ЗаписиКалендаря, Знач НастройкиОтображения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкиИзмененныхЗаписейКалендаря", Новый Массив);
	Результат.Вставить("НовыеИсключенияПовторения", Новый Массив);
	Результат.Вставить("ОбновитьПринудительно", Ложь);
	Результат.Вставить("ДанныеПланировщика", Неопределено);
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
			
			Если ЗаписьКалендаря.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
				
				ЗаписьКалендаряОбъект = СоздатьИсключениеПовторяющейсяЗаписиКалендаря(ЗаписьКалендаря);
				ЗаписьКалендаряОбъект.Записать();
				
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаря.Ссылка);
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
				
				Цвет = ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря.Ссылка);
				УстановитьЦветЗаписиКалендаря(ЗаписьКалендаряОбъект.Ссылка, Цвет);
				
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
				ИсключениеПовторения = Новый Структура("НоваяСсылка, СтараяСсылка, ДатаНачалаИсходная");
				ИсключениеПовторения.НоваяСсылка = ЗаписьКалендаряОбъект.Ссылка;
				ИсключениеПовторения.СтараяСсылка = ЗаписьКалендаря.Ссылка;
				ИсключениеПовторения.ДатаНачалаИсходная = ЗаписьКалендаря.ДатаНачалаИсходная;
				Результат.НовыеИсключенияПовторения.Добавить(ИсключениеПовторения);
				
			Иначе
				
				ЗаписьКалендаряОбъект = ЗаписьКалендаря.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(ЗаписьКалендаряОбъект, ЗаписьКалендаря, "ДатаНачала, ДатаОкончания, ВесьДень");
				ЗаписьКалендаряОбъект.Записать();
				
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
				
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Результат.ОбновитьПринудительно = УстановленоНапоминание(Результат.СсылкиИзмененныхЗаписейКалендаря);
	Результат.ДанныеПланировщика = ОбновитьДанныеПланировщика(НастройкиОтображения);
	
	Если ЗаписиКалендаря.Количество() > 0 Тогда
		СинхронизацияКалендарей.ПослеЗаписиСобытияКалендаря(ЗаписиКалендаря[0].Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает запись календаря
Функция СоздатьЗаписьКалендаря(Знач ЗаписьКалендаря, Знач ЗначениеКопирования, Знач НастройкиОтображения) Экспорт
	
	Если ЗначениеКопирования <> Неопределено Тогда
		ОбъектКопирования = ЗначениеКопирования.ПолучитьОбъект();
		ЗаписьКалендаряОбъект = ОбъектКопирования.Скопировать();
		ЗаписьКалендаряОбъект.ДатаНачала = ЗаписьКалендаря.ДатаНачала;
		ЗаписьКалендаряОбъект.ДатаОкончания = ЗаписьКалендаря.ДатаОкончания;
		ЗаписьКалендаряОбъект.Сотрудник = ЗаписьКалендаря.Сотрудник;
	Иначе
		ЗаписьКалендаряОбъект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
		ЗаписьКалендаряОбъект.Заполнить(ЗаписьКалендаря);
	КонецЕсли;
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("Цвет", ЗаписьКалендаря.Цвет);
	ЗаписьКалендаряОбъект.Записать();
	
	ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
	
	СинхронизацияКалендарей.ПослеЗаписиСобытияКалендаря(ЗаписьКалендаряОбъект.Ссылка);
	
	СтруктурыЭлементовЗаписи = СтруктурыЭлементовЗаписи(
		ЗаписьКалендаряОбъект,
		Неопределено,
		Неопределено,
		Неопределено);
	Если СтруктурыЭлементовЗаписи.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить структуру элемента планировщика.'");
	КонецЕсли;
	
	Результат = Новый Структура("НовыйЭлемент, Напоминание, ДанныеПланировщика");
	Результат.Напоминание = ПодключитьНапоминаниеАвтоматически(ЗаписьКалендаряОбъект.Ссылка);
	Результат.НовыйЭлемент = СтруктурыЭлементовЗаписи[0];
	Результат.ДанныеПланировщика = ОбновитьДанныеПланировщика(НастройкиОтображения);
	
	Возврат Результат;
	
КонецФункции

// Возвращает по цвету стиля цвет календаря.
//
// Параметры:
//  ЦветСтиля - Цвет - Цвет стиля.
//
// Возвращаемое значение:
//  Перечисление.ЦветаРабочегоКалендаря - Цвет календаря.
//
Функция ПолучитьЦветКалендаря(ЦветСтиля) Экспорт
	
	Если ЦветСтиля = ЦветаСтиля.ЦветКалендаряКрасный Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряСиний Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряЖелтый Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряЗеленый Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряОранжевый  Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый");
	Иначе
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет");
	КонецЕсли;
	
	Возврат ЦветКалендаря;
	
КонецФункции

// Формирует структуру элемент планировщика по событию.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//  ЗаписиКалендаря - Массив - Записи календаря.
// 
// Возвращаемое значение:
//  Массив - Структуры элементов планировщика.
//
Функция ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения, ЗаписиКалендаря = Неопределено) Экспорт
	
	ПериодОтображения = РаботаСРабочимКалендаремКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = РаботаСРабочимКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	// Получение отображаемых данных
	ЗаписиКалендаряСНапоминаниями = ЗаписиКалендаряСНапоминаниямиТекущегоПользователя();
	СобытияПоЧасам = СформироватьТаблицуСобытий();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		СобытияНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала,
			ОтображаемаяДатаОкончания,
			НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
			НастройкиОтображения.ФизЛица,
			НастройкиОтображения.ОтображатьОтклоненные,
			ЗаписиКалендаряСНапоминаниями,
			ЗаписиКалендаря);
		
		Для Каждого Событие Из СобытияНаДату Цикл
			НоваяСтрока = СобытияПоЧасам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктурыЭлементов = Новый Массив;
	
	Для Каждого ЗаписьКалендаря Из СобытияПоЧасам Цикл
		СтруктурыЭлементовЗаписи = СтруктурыЭлементовЗаписи(
			ЗаписьКалендаря,
			НастройкиОтображения.ИспользоватьНапоминания,
			НастройкиОтображения.ОтключеноОтображениеВремени,
			НастройкиОтображения.ФизЛица);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтруктурыЭлементов, СтруктурыЭлементовЗаписи);
	КонецЦикла;
	
	Возврат СтруктурыЭлементов;
	
КонецФункции

// Формирует структуры интервалов фона планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Массив - Структуры интервалов планировщика.
//
Функция ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения) Экспорт
	
	ИнтервалыФонаПланировщика = Новый Массив;
	
	Если Не (НастройкиОтображения.ОтображатьЗанятость И НастройкиОтображения.ОтображатьСобытия) Тогда
		Возврат ИнтервалыФонаПланировщика;
	КонецЕсли;
	
	ТаблицаЗанятости = ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения);
	
	Для Каждого Занятость Из ТаблицаЗанятости Цикл
		СтруктураИнтервалаФона = ПолучитьСтруктуруИнтервалаФонаПланировщика(Занятость, НастройкиОтображения);
		ИнтервалыФонаПланировщика.Добавить(СтруктураИнтервалаФона);
	КонецЦикла;
	
	Возврат ИнтервалыФонаПланировщика;
	
КонецФункции

// Формирует структуры элементов планировщика по записи календаря.
// 
// Параметры:
//  ЗаписьКалендаря - СтрокаТаблицыЗначений,
//                    СправочникОбъект.ЗаписиРабочегоКалендаря,
//                    СправочникСсылка.ЗаписиРабочегоКалендаря - Запись календаря.
//  ИспользоватьНапоминания - Булево, Неопределено - Использовать напоминания.
//  ОтключеноОтображениеВремени - Булево, Неопределено - Отключено отображение времени.
//  ОтображаемыеФизЛица - Массив из СправочникСсылка.ФизическиеЛица, Неопределено - Отображаемые физ лица.
// 
// Возвращаемое значение:
//  Массив из Структура - Структуры элементов планировщика по записи календаря.
//
Функция СтруктурыЭлементовЗаписи(ЗаписьКалендаря,
	ИспользоватьНапоминания,
	ОтключеноОтображениеВремени,
	ОтображаемыеФизЛица) Экспорт
	
	Если ИспользоватьНапоминания = Неопределено Тогда
		ИспользоватьНапоминания = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	КонецЕсли;
	
	Если ОтключеноОтображениеВремени = Неопределено Тогда
		НастройкаОтображениеВремениЭлементов = ПолучитьНастройкуОтображениеВремениЭлементов();
		ОтключеноОтображениеВремени =
			НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
	КонецЕсли;
	
	Если ТипЗнч(ЗаписьКалендаря) = Тип("СтрокаТаблицыЗначений") Тогда
		УстановленоНапоминание = ЗаписьКалендаря.УстановленоНапоминание;
		Цвет = ЗаписьКалендаря.Цвет;
		Отработана = ЗаписьКалендаря.Отработана;
		Сотрудник = ЗаписьКалендаря.Сотрудник;
		ФизЛицо = ЗаписьКалендаря.ФизическоеЛицо;
	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("СправочникОбъект.ЗаписиРабочегоКалендаря") Тогда
		УстановленоНапоминание = УстановленоНапоминание(ЗаписьКалендаря.Ссылка);
		Цвет = ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря.Ссылка);
		Отработана = ЗаписьКалендаряОтработана(ЗаписьКалендаря.Ссылка);
		Сотрудник = ЗаписьКалендаря.Сотрудник;
		ФизЛицо = Сотрудники.ФизЛицоСотрудника(ЗаписьКалендаря.Сотрудник);
	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		УстановленоНапоминание = УстановленоНапоминание(ЗаписьКалендаря);
		Цвет = ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря);
		Отработана = ЗаписьКалендаряОтработана(ЗаписьКалендаря);
		Сотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьКалендаря, "Сотрудник");
		ФизЛицо = Сотрудники.ФизЛицоСотрудника(Сотрудник);
	Иначе
		УстановленоНапоминание = Ложь;
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
		Отработана = Ложь;
		Сотрудник = Неопределено;
		ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	ЭлементПланировщика = Новый ЭлементПланировщика;
	
	ЭлементПланировщика.Начало = ЗаписьКалендаря.ДатаНачала;
	ЭлементПланировщика.Конец = ЗаписьКалендаря.ДатаОкончания;
	
	ЭлементПланировщика.Значение =
		РаботаСРабочимКалендаремКлиентСервер.СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря);
	Если Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет И Отработана Тогда
		ЭлементПланировщика.ЦветФона = ЦветаСтиля.ЦветКалендаряОтработано;
	Иначе
		ЭлементПланировщика.ЦветФона = ПолучитьЦветТабличногоДокумента(Цвет);
	КонецЕсли;
	Если ЗаписьКалендаря.ПометкаУдаления Тогда
		ЭлементПланировщика.Картинка = БиблиотекаКартинок.ЗаписьКалендаряУдалена;
	ИначеЕсли ЗаписьКалендаря.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом Тогда
		ЭлементПланировщика.Картинка = БиблиотекаКартинок.ЗаписьКалендаряПодВопросом;
	ИначеЕсли ЗаписьКалендаря.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		ЭлементПланировщика.Картинка = БиблиотекаКартинок.ЗаписьКалендаряОтклонена;
	КонецЕсли;
	ЭлементПланировщика.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
	ЭлементПланировщика.ЦветРамки = ПолучитьЦветРамкиЭлементаПланировщика(ЭлементПланировщика.ЦветФона);
	
	ЭлементПланировщика.Текст = ЗаписьКалендаря.Наименование;
	Если ИспользоватьНапоминания И ОтключеноОтображениеВремени И УстановленоНапоминание Тогда
		ДатаНачалаСобытияСтрокой = Формат(ЗаписьКалендаря.ДатаНачала, "ДФ=HH:mm");
		ЭлементПланировщика.Текст = ДатаНачалаСобытияСтрокой + " " + ЭлементПланировщика.Текст;
	КонецЕсли;
	
	СтруктурыЭлементов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ФизЛицо)
		И ЗначениеЗаполнено(Сотрудник)
		И ТипЗнч(Сотрудник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		
		ФизЛицаКалендаря = ФизЛицаКалендаря(Сотрудник);
		Для Каждого ФизЛицо Из ФизЛицаКалендаря Цикл
			
			Если ОтображаемыеФизЛица <> Неопределено
				И ОтображаемыеФизЛица.Найти(ФизЛицо) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УстановитьЗначениеИзмерения(ЭлементПланировщика, "ФизическоеЛицо", ФизЛицо);
			СтруктураЭлемента = ЭлементПланировщика.Выгрузить();
			СтруктурыЭлементов.Добавить(СтруктураЭлемента);
			
		КонецЦикла;
		
	Иначе
		
		УстановитьЗначениеИзмерения(ЭлементПланировщика, "ФизическоеЛицо", ФизЛицо);
		СтруктураЭлемента = ЭлементПланировщика.Выгрузить();
		СтруктурыЭлементов.Добавить(СтруктураЭлемента);
		
	КонецЕсли;
	
	Возврат СтруктурыЭлементов;
	
КонецФункции

// Формирует структуру элемент планировщика по занятости.
//
Функция ПолучитьСтруктуруЭлементаПланировщикаЗанятость(Занятость, ФизическоеЛицо = Неопределено) Экспорт
	
	ЭлементПланировщика = Новый ЭлементПланировщика;
	
	Если ФизическоеЛицо = Неопределено Тогда
		ФизическоеЛицо = Занятость.ФизическоеЛицо;
	КонецЕсли;
	УстановитьЗначениеИзмерения(ЭлементПланировщика, "ФизическоеЛицо", ФизическоеЛицо);
	
	ЭлементПланировщика.Начало = Занятость.ДатаНачала;
	ЭлементПланировщика.Конец = Занятость.ДатаОкончания;
	ЭлементПланировщика.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
	ЭлементПланировщика.Текст = Строка(Занятость.Занят);
	ЭлементПланировщика.ЦветФона = ПолучитьЦветЗанятости(Занятость);
	
	Возврат ЭлементПланировщика.Выгрузить();
	
КонецФункции

// Формирует структуру настроек отображения планировщика.
//
Функция ПолучитьНастройкиОтображения() Экспорт
	
	НастройкиОтображения = Новый Структура;
	
	// Период отображения
	НастройкиОтображения.Вставить(
		"ПериодОтображения",
		ПолучитьПерсональнуюНастройку("ПериодОтображенияРабочегоКалендаря"));
	
	// Физ. лица
	ФизЛица = Новый Массив();
	ФизЛица.Добавить(ПользователиДокументооборот.ФизЛицоПользователя());
	НастройкиОтображения.Вставить(
		"ФизЛица",
		ФизЛица);
	
	// Представления измерений
	ПредставленияИзмерений = Новый Соответствие;
	НастройкиОтображения.Вставить(
		"ПредставленияИзмерений",
		ПредставленияИзмерений);
	
	// Отображаемая дата
	ОтображаемаяДата = НачалоДня(ТекущаяДата());
	НастройкиОтображения.Вставить(
		"ОтображаемаяДата",
		ОтображаемаяДата);
	
	// Выделенные даты
	ВыделенныеДаты = Новый Массив;
	ВыделенныеДаты.Добавить(ОтображаемаяДата);
	НастройкиОтображения.Вставить(
		"ВыделенныеДаты",
		ВыделенныеДаты);
	
	// Отображать события
	НастройкиОтображения.Вставить(
		"ОтображатьСобытия",
		Истина);
	
	// Отображать занятость
	НастройкиОтображения.Вставить(
		"ОтображатьЗанятость",
		ПолучитьПерсональнуюНастройку("ОтображатьЗанятость"));
	
	// Отображать общую занятость
	НастройкиОтображения.Вставить(
		"ОтображатьОбщуюЗанятость",
		Ложь);
	
	// Исключения занятости
	ИсключенияЗанятости = Новый Массив;
	НастройкиОтображения.Вставить(
		"ИсключенияЗанятости",
		ИсключенияЗанятости);
	
	// Использовать напоминания
	НастройкиОтображения.Вставить(
		"ИспользоватьНапоминания",
		ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя"));
	
	// Настройка отображения времени элементов и 
	НастройкаОтображениеВремениЭлементов = ПолучитьНастройкуОтображениеВремениЭлементов();
	НастройкиОтображения.Вставить(
		"НастройкаОтображениеВремениЭлементов",
		НастройкаОтображениеВремениЭлементов);
	
	// Отключено отображение времени
	НастройкиОтображения.Вставить(
		"ОтключеноОтображениеВремени",
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать);
	
	// Отображать помеченные на удаление
	НастройкиОтображения.Вставить(
		"ОтображатьПомеченныеНаУдаление",
		ПолучитьПерсональнуюНастройку("ОтображатьПомеченныеНаУдаление"));
	
	// Отображать отклоненные
	НастройкиОтображения.Вставить(
		"ОтображатьОтклоненные",
		ПолучитьПерсональнуюНастройку("ОтображатьОтклоненные"));
	
	// Цвет календаря подпись
	НастройкиОтображения.Вставить(
		"ЦветКалендаряПодпись",
		ЦветаСтиля.ЦветКалендаряПодпись);
	
	// Цвет календаря фон шапки
	НастройкиОтображения.Вставить(
		"ЦветКалендаряФонШапки",
		ЦветаСтиля.ЦветКалендаряФонШапки);
	
	// Отображать время с
	НастройкиОтображения.Вставить(
		"ОтображатьВремяС",
		ПолучитьПерсональнуюНастройку("ОтображатьВремяС"));
	
	// Отображать время по
	НастройкиОтображения.Вставить(
		"ОтображатьВремяПо",
		ПолучитьПерсональнуюНастройку("ОтображатьВремяПо"));
	
	// Отображать скрытые элементы
	НастройкиОтображения.Вставить(
		"ОтображатьСкрытыеЭлементы",
		Истина);
	
	// Размер ячейки времени
	НастройкиОтображения.Вставить(
		"РазмерЯчейкиВремени",
		ПолучитьПерсональнуюНастройку("РазмерЯчейкиВремени"));
	
	// Цвет фона текущего дня.
	НастройкиОтображения.Вставить(
		"ЦветФонаТекущегоДня",
		ЦветаСтиля.ЦветКалендаряФонТекущегоДня);
	
	// Цвет пустого фона.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряДоступноеВремя",
		ЦветаСтиля.ЦветКалендаряДоступноеВремя);
	
	// Цвет текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряТекущаяЗапись",
		ЦветаСтиля.ЦветКалендаряТекущаяЗапись);
	
	// Цвет текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряТекущаяЗапись",
		ЦветаСтиля.ЦветКалендаряТекущаяЗапись);
	
	// Цвет рамки текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветРамкиТекущаяЗапись",
		ПолучитьЦветРамкиЭлементаПланировщика(ЦветаСтиля.ЦветКалендаряТекущаяЗапись));
	
	// Отобразить текущую запись.
	НастройкиОтображения.Вставить(
		"ОтобразитьТекущуюЗапись",
		Ложь);
	
	// Ссылка текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьСсылка",
		Справочники.ЗаписиРабочегоКалендаря.ПустаяСсылка());
	
	// Дата начала текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьДатаНачала",
		Дата(1,1,1));
	
	// Дата окончания текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьДатаОкончания",
		Дата(1,1,1));
	
	// Текущая запись на весь день.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьВесьДень",
		Ложь);
	
	// Запрет создания.
	НастройкиОтображения.Вставить(
		"ЗапретСоздания",
		Ложь);
	
	// Запрет изменения.
	НастройкиОтображения.Вставить(
		"ЗапретИзменения",
		Ложь);
	
	// Скрыть пустые дни в плане дня.
	НастройкиОтображения.Вставить(
		"ПланДняСкрытьПустые",
		Ложь);
	
	Возврат НастройкиОтображения;
	
КонецФункции

// Возвращает цвет, которым отображается событие в календаре физ. лица
//
// Параметры:
//	Событие - Событие, которому соответствует цвет
//	ФизическоеЛицо - Физическое лицо, которому соответствует цвет
//
//	Возвращает ЦветаРабочегоКалендаря
Функция ПолучитьЦветСобытияКалендаря(Событие, ФизическоеЛицо = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Событие) Тогда
		Возврат Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;
	
	Если ФизическоеЛицо = Неопределено Тогда
		ФизическоеЛицо = ПользователиДокументооборот.ФизЛицоПользователя();
	КонецЕсли;
	
	Цвет = РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.ПолучитьНастройку(
		ФизическоеЛицо, Событие, Перечисления.НастройкиЗаписейРабочегоКалендаря.Цвет);
	
	Если Цвет = Неопределено Или ТипЗнч(Цвет) <> Тип("ПеречислениеСсылка.ЦветаРабочегоКалендаря") Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

// Устанавливает цвет, которым отображается событие в календаре.
//
Процедура УстановитьЦветЗаписиКалендаря(ЗаписьКалендаря, Знач Цвет,
	Знач ФизическоеЛицо = Неопределено, ФормироватьОписаниеРезультата = Ложь) Экспорт
	
	Если ТипЗнч(Цвет) = Тип("Цвет") Тогда
		Цвет = ПолучитьЦветКалендаря(Цвет);
	КонецЕсли;
	
	Если ФизическоеЛицо = Неопределено Тогда
		ФизическоеЛицо = ПользователиДокументооборот.ФизЛицоПользователя();
	КонецЕсли;
	
	РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.УстановитьНастройку(
		ФизическоеЛицо,
		ЗаписьКалендаря,
		Перечисления.НастройкиЗаписейРабочегоКалендаря.Цвет,
		Цвет);
	
КонецПроцедуры

// Устанавливает цвет, которым отображается события в календаре.
//
Функция УстановитьЦветЗаписейКалендаря(Знач ЗаписиКалендаря, Знач Цвет, Знач СоздаватьИсключенияПовторения) Экспорт
	
	СсылкиИзмененныхЗаписейКалендаря = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
			
			Если СоздаватьИсключенияПовторения И ЭтоПовторяющеесяСобытие(ЗаписьКалендаря) Тогда
				
				ЗаписьКалендаряОбъект = СоздатьИсключениеПовторяющейсяЗаписиКалендаря(ЗаписьКалендаря);
				ЗаписьКалендаряОбъект.Записать();
				
				УстановитьЦветЗаписиКалендаря(ЗаписьКалендаряОбъект.Ссылка, Цвет);
				
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
			Иначе
				
				УстановитьЦветЗаписиКалендаря(ЗаписьКалендаря.Ссылка, Цвет);
				
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат СсылкиИзмененныхЗаписейКалендаря;
	
КонецФункции

// Процедура отображает события физ. лица в календаре на указанный период
Процедура ОтобразитьКалендарь(Планировщик, НастройкиОтображения) Экспорт
	
	ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения);
	Если НастройкиОтображения.ОтобразитьТекущуюЗапись Тогда
		РаботаСРабочимКалендаремКлиентСервер.ОтобразитьТекущуюЗапись(
			Планировщик,
			НастройкиОтображения);
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиентСервер.ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

// Процедура заполняет таблицу плана дня
//
// Параметры:
//  ДеревоПланДня - ДеревоЗначений - План дня.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ОтобразитьПланДня(ДеревоПланДня, НастройкиОтображения) Экспорт
	
	ДеревоПланДня.Строки.Очистить();
	
	ПериодОтображения =
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты =
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтображатьФизЛицо = НастройкиОтображения.ФизЛица.Количество() <> 1;
	
	// Получение отображаемых данных.
	ЗаписиКалендаряСНапоминаниями = ЗаписиКалендаряСНапоминаниямиТекущегоПользователя();
	СобытияПоЧасам = СформироватьТаблицуСобытий();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		ОтображаемаяДатаНачала =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		СобытияНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала,
			ОтображаемаяДатаОкончания,
			НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
			НастройкиОтображения.ФизЛица,
			НастройкиОтображения.ОтображатьОтклоненные,
			ЗаписиКалендаряСНапоминаниями);
		Для Каждого Событие Из СобытияНаДату Цикл
			НоваяСтрока = СобытияПоЧасам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
		КонецЦикла;
	КонецЦикла;
	
	// Отображение плана дня.
	СобытияДняПоЧасам = СобытияПоЧасам.СкопироватьКолонки();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		ОтображаемаяДатаНачала =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		НачалоТекущегоДняНедели = ОтображаемаяДатаНачала;
		Пока НачалоТекущегоДняНедели < ОтображаемаяДатаОкончания Цикл
			
			// Отображение строки дня.
			СобытияДняПоЧасам.Очистить();
			НачалоТекущегоДняНедели = НачалоДня(НачалоТекущегоДняНедели);
			КонецТекущегоДняНедели = КонецДня(НачалоТекущегоДняНедели) + 1;
			
			Для Каждого Событие Из СобытияПоЧасам Цикл
				
				Если НастройкиОтображения.ОтобразитьТекущуюЗапись
					И Событие.Ссылка = НастройкиОтображения.ТекущаяЗаписьСсылка Тогда
					Продолжить;
				КонецЕсли;
				
				Если Событие.ДатаНачала < КонецТекущегоДняНедели
					И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
					ЗаполнитьЗначенияСвойств(СобытияДняПоЧасам.Добавить(), Событие);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НастройкиОтображения.ПланДняСкрытьПустые Тогда
				Если СобытияДняПоЧасам.Количество() = 0 Тогда
					НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СобытияДняПоЧасам.Сортировать("ДатаНачала, Наименование");
			
			КоличествоСобытий = СобытияДняПоЧасам.Количество();
			ДополнительноеПредставлениеДня = "";
			Если НачалоТекущегоДняНедели = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ДополнительноеПредставлениеДня = НСтр("ru = 'Сегодня'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) + 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Завтра'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) - 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Вчера'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) - 2 * 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Позавчера'");
			КонецЕсли;
			
			СтрокаТекущегоДня = ДеревоПланДня.Строки.Добавить();
			СтрокаТекущегоДня.ЭтоГруппа = Истина;
			СтрокаТекущегоДня.ДатаДень = НачалоТекущегоДняНедели;
			СтрокаТекущегоДня.ИндексЦвета = -1;
			
			ПредставлениеДня = Формат(НачалоТекущегоДняНедели, "ДФ='дддд'");
			ПредставлениеДаты = Формат(НачалоТекущегоДняНедели, "ДФ='д ММММ гггг'");
			Если ЗначениеЗаполнено(ДополнительноеПредставлениеДня) Тогда
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1, %2, %3",
					ДополнительноеПредставлениеДня,
					ПредставлениеДня,
					ПредставлениеДаты);
			Иначе
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1, %2",
					ТРег(ПредставлениеДня),
					ПредставлениеДаты);
			КонецЕсли;
			Если ЗначениеЗаполнено(КоличествоСобытий) Тогда
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1 (%2)",
					СтрокаТекущегоДня.ОписаниеКраткое,
					КоличествоСобытий);
			КонецЕсли;
			
			// Отображений событий в дне.
			Для Каждого СтрокаСобытие Из СобытияДняПоЧасам Цикл
				СтрокаСобытиеТекущегоДня = СтрокаТекущегоДня.Строки.Добавить();
				ЭлементЗаписиКалендаря =
					РаботаСРабочимКалендаремКлиентСервер.СформироватьЭлементЗаписиКалендаря(СтрокаСобытие);
				ЗаполнитьЗначенияСвойств(СтрокаСобытиеТекущегоДня, ЭлементЗаписиКалендаря);
				СтрокаСобытиеТекущегоДня.ДатаДень = НачалоТекущегоДняНедели;
				СтрокаСобытиеТекущегоДня.ОписаниеКраткое =
					СформироватьТекстовоеОписаниеСобытия(СтрокаСобытие, Не СтрокаСобытие.ВесьДень, ОтображатьФизЛицо);
				Если СтрокаСобытие.Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет И СтрокаСобытие.Отработана Тогда
					СтрокаСобытиеТекущегоДня.ИндексЦвета = 6;
				Иначе
					СтрокаСобытиеТекущегоДня.ИндексЦвета =
						РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета(СтрокаСобытие.Цвет);
				КонецЕсли;
				СтрокаСобытиеТекущегоДня.Цвет = СтрокаСобытие.Цвет;
			КонецЦикла;
			
			НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает персональную настройку рабочего календаря текущего пользователя по ключу.
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "ПериодОтображенияРабочегоКалендаря" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ПериодОтображенияРабочегоКалендаря",
			Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя);
		
	ИначеЕсли Настройка = "ОтображатьПомеченныеНаУдаление" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьПомеченныеНаУдаление",
			Ложь);
		
	ИначеЕсли Настройка = "ОтображатьОтклоненные" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьОтклоненные",
			Ложь);
	
	ИначеЕсли Настройка = "ОтображатьНавигационныйКалендарь" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьНавигационныйКалендарь",
			Ложь);
		
	ИначеЕсли Настройка = "СвернутьСобытияВесьДеньВКалендаре" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"СвернутьСобытияВесьДеньВКалендаре",
			Ложь);
		
	ИначеЕсли Настройка = "ВремяНачалаОтображения" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ВремяНачалаОтображения",
			Дата("00010101080000"));
		
	ИначеЕсли Настройка = "ВремяОкончанияОтображения" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ВремяОкончанияОтображения",
			Дата("00010101190000"));
		
	ИначеЕсли Настройка = "МасштабСтандартный" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"МасштабСтандартный",
			100);
		
	ИначеЕсли Настройка = "МасштабСПанельюИнформации" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"МасштабСПанельюИнформации",
			70);
		
	ИначеЕсли Настройка = "ОтображатьЛегенду" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьЛегенду",
			Истина);
		
	ИначеЕсли Настройка = "ОтображатьВремяС" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьВремяС",
			9);
		
	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьВремяПо",
			6);
		
	ИначеЕсли Настройка = "ОтображениеВремениЭлементов" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображениеВремениЭлементов",
			Перечисления.ОтображениеВремениЭлементов.ВремяНачалаИКонца);
		
	ИначеЕсли Настройка = "ОтображатьЗанятость" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьЗанятость",
			Истина);
		
	ИначеЕсли Настройка = "ИспользоватьБыстроеРедактирование" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ИспользоватьБыстроеРедактирование",
			Ложь);
		
	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"РазмерЯчейкиВремени",
			15);
		
	ИначеЕсли Настройка = "ТекущиеКалендариВсеКалендари" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ТекущиеКалендариВсеКалендари",
			Новый Массив);
		
	ИначеЕсли Настройка = "ОтображатьПолеСотрудник" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьПолеСотрудник",
			Ложь);
		
	ИначеЕсли Настройка = "ОтображатьКалендарьВЗаписиКалендаря" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьКалендарьВЗаписиКалендаря",
			Истина);
		
	ИначеЕсли Настройка = "СкрытьОтсутствияБудуРазбиратьЗадачи" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"СкрытьОтсутствияБудуРазбиратьЗадачи",
			Истина);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку рабочего календаря текущего пользователя.
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ПериодОтображенияРабочегоКалендаря" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ПериодОтображенияРабочегоКалендаря",
			Значение);
			
	ИначеЕсли Настройка = "ОтображатьПомеченныеНаУдаление" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьПомеченныеНаУдаление",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьОтклоненные" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьОтклоненные",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьНавигационныйКалендарь" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьНавигационныйКалендарь",
			Значение);
		
	ИначеЕсли Настройка = "СвернутьСобытияВесьДеньВКалендаре" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"СвернутьСобытияВесьДеньВКалендаре",
			Значение);
		
	ИначеЕсли Настройка = "ВремяНачалаОтображения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Дата") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ВремяНачалаОтображения",
			Значение);
		
	ИначеЕсли Настройка = "ВремяОкончанияОтображения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Дата") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ВремяОкончанияОтображения",
			Значение);
		
	ИначеЕсли Настройка = "МасштабСтандартный" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"МасштабСтандартный",
			Значение);
		
	ИначеЕсли Настройка = "МасштабСПанельюИнформации" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"МасштабСПанельюИнформации",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьЛегенду" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьЛегенду",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьВремяС" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьВремяС",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьВремяПо",
			Значение);
		
	ИначеЕсли Настройка = "ОтображениеВремениЭлементов" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ОтображениеВремениЭлементов") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображениеВремениЭлементов",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьЗанятость" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьЗанятость",
			Значение);
		
	ИначеЕсли Настройка = "ИспользоватьБыстроеРедактирование" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ИспользоватьБыстроеРедактирование",
			Значение);
		
	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"РазмерЯчейкиВремени",
			Значение);
		
	ИначеЕсли Настройка = "ТекущиеКалендариВсеКалендари" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Массив") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ТекущиеКалендариВсеКалендари",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьПолеСотрудник" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьПолеСотрудник",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьКалендарьВЗаписиКалендаря" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьКалендарьВЗаписиКалендаря",
			Значение);
		
	ИначеЕсли Настройка = "СкрытьОтсутствияБудуРазбиратьЗадачи" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"СкрытьОтсутствияБудуРазбиратьЗадачи",
			Значение);
			
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометку удаления записи и оповещает другие формы.
Функция УстановитьПометкуУдаления(Запись, ПометкаУдаления) Экспорт
	
	УстановленаПометкаУдаления = Ложь;
	
	ЗаписьОбъект = Запись.ПолучитьОбъект();
	Если ЗаписьОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
		
		ЗаписьОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		УстановленаПометкаУдаления = Истина;
		
		ДобавитьВИсториюРаботыПользователя(ЗаписьОбъект);
		
		СинхронизацияКалендарей.ПослеЗаписиСобытияКалендаря(ЗаписьОбъект.Ссылка);
		
	КонецЕсли;
	
	Возврат УстановленаПометкаУдаления;
	
КонецФункции

// Устанавливает пометки удаления записей и возвращает факт изменения пометки удаления.
Функция УстановитьПометкиУдаления(Записи, ПовторяющиесяСобытия, ПометкаУдаления) Экспорт
	
	ОднаИзЗаписей = Неопределено;
	УстановленаПометкаУдаления = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Запись Из Записи Цикл
			
			ЗаписьОбъект = Запись.ПолучитьОбъект();
			Если ЗаписьОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
				
				ЗаписьОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
				УстановленаПометкаУдаления = Истина;
				
				ДобавитьВИсториюРаботыПользователя(ЗаписьОбъект);
				
				ОднаИзЗаписей = ЗаписьОбъект.Ссылка;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПометкаУдаления и ПовторяющиесяСобытия.Количество() > 0 Тогда
			
			Для Каждого ПовторяющеесяСобытие Из ПовторяющиесяСобытия Цикл
				
				ПовторяющеесяСобытиеОбъект = ПовторяющеесяСобытие.ЗаписьКалендаря.ПолучитьОбъект();
				ПовторяющеесяСобытиеОбъект.Заблокировать();
				ПовторяющеесяСобытиеОбъект.ДобавитьИсключениеПовторения(ПовторяющеесяСобытие.ДатаИсключения);
				ПовторяющеесяСобытиеОбъект.Записать();
				УстановленаПометкаУдаления = Истина;
				
				ДобавитьВИсториюРаботыПользователя(ПовторяющеесяСобытиеОбъект);
				
				ОднаИзЗаписей = ПовторяющеесяСобытиеОбъект.Ссылка;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ОднаИзЗаписей) Тогда
		СинхронизацияКалендарей.ПослеЗаписиСобытияКалендаря(ОднаИзЗаписей);
	КонецЕсли;
	
	Возврат УстановленаПометкаУдаления;
	
КонецФункции

// Устанавливает повторение события в соответствии с настройками повторения.
Процедура УстановитьПовторение(ЗаписьКалендаря, НастройкиПовторения) Экспорт
	
	ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
	Если ТипЗнч(ЗаписьКалендаряОбъект) = Тип("СправочникОбъект.ЗаписиРабочегоКалендаря") Тогда
		Если ЗаписьКалендаряОбъект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для исключения повторения.'");
		КонецЕсли;
		Если ЗаписьКалендаряОбъект.ПометкаУдаления Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для помеченного на удаление события.'");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗаписьКалендаряОбъект) = Тип("ДокументОбъект.Бронь") Тогда
		Если ЗаписьКалендаряОбъект.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для исключения повторения.'");
		КонецЕсли;
		Если ЗаписьКалендаряОбъект.ПометкаУдаления Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для помеченной на удаление брони.'");
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("НастройкиПовторения", НастройкиПовторения);
	ЗаписьКалендаряОбъект.Записать();
	
КонецПроцедуры

// Формирует HTML представление события
Функция СформироватьHTMLПредставление(Событие, ДатаСобытия) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Возврат РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	Если ТипЗнч(Событие) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		ПредставлениеHTML = Справочники.ЗаписиРабочегоКалендаря.СформироватьHTMLПредставление(Событие, ДатаСобытия);
	ИначеЕсли ТипЗнч(Событие) = Тип("СправочникСсылка.Мероприятия") Тогда
		ПредставлениеHTML = Справочники.Мероприятия.СформироватьHTMLПредставление(Событие, ДатаСобытия);
	Иначе
		ПредставлениеHTML = РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	Возврат ПредставлениеHTML;
	
КонецФункции

// Возвращает по цвету рабочего календаря цвет для отображения
Функция ПолучитьЦветТабличногоДокумента(ЦветКалендаря) Экспорт
	
	Если ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряКрасный;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряСиний;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряЖелтый;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряЗеленый;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряОранжевый;
	Иначе
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряПоУмолчанию;
	КонецЕсли;
	
	Возврат ЦветТабличногоДокумента;
	
КонецФункции

// Изменяет доступность времени
Функция ИзменитьДоступностьВремени(ФизическоеЛицо, ДатаНачала, ДатаОкончания,
	Занят = Неопределено) Экспорт
	
	НоваяЗанятость = РегистрыСведений.ЗанятостьФизическихЛиц.ИзменитьДоступностьВремени(
		ФизическоеЛицо, ДатаНачала, ДатаОкончания, Занят);
	
	Возврат НоваяЗанятость;
	
КонецФункции

// Возвращает настройку доступности по умолчанию для физ. лица
// 
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДоступностьФизическихЛиц
//
Функция ПолучитьНастройкуДоступностиФизЛица(ФизическоеЛицо) Экспорт
	
	ДоступностьПоУмолчанию = РегистрыСведений.НастройкиРабочегоКалендаря.ПолучитьНастройку(
		ФизическоеЛицо, Перечисления.НастройкиРабочегоКалендаря.Доступность);
	
	Если Не ЗначениеЗаполнено(ДоступностьПоУмолчанию) Тогда
		ДоступностьПоУмолчанию = Перечисления.ДоступностьФизическихЛиц.ДоступенВсегда;
	КонецЕсли;
	
	Возврат ДоступностьПоУмолчанию;
	
КонецФункции

// Устанавливает настройку доступности по умолчанию для физ. лица.
//
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//  ДоступностьПоУмолчанию - ПеречислениеСсылка.ДоступностьФизическихЛиц
//  
// Возвращаемое значение:
//  Булево - значение настройки изменено.
//
Функция УстановитьНастройкуДоступностиФизЛица(ФизическоеЛицо, ДоступностьПоУмолчанию) Экспорт
	
	ИзмененоЗначениеНастройки = РегистрыСведений.НастройкиРабочегоКалендаря.УстановитьНастройку(
		ФизическоеЛицо,
		Перечисления.НастройкиРабочегоКалендаря.Доступность,
		ДоступностьПоУмолчанию);
	
	Возврат ИзмененоЗначениеНастройки;
	
КонецФункции

// Проверяет, заняты ли физ. лица сотрудников в указанное время
Функция ПроверитьДоступностьФизЛицСотрудников(
	МассивСотрудников,
	ДатаНачала,
	ДатаОкончания,
	ИсключенияЗанятости) Экспорт
	
	ФизЛицаСотрудников = Сотрудники.ФизЛицаСотрудников(МассивСотрудников);
	
	ТаблицаЗанятости = ПолучитьТаблицуЗанятости(
		ФизЛицаСотрудников,
		ДатаНачала,
		ДатаОкончания,
		Истина,
		ИсключенияЗанятости,
		Истина);
	
	ОбщаяЗанятость = Перечисления.СостоянияЗанятости.Доступен;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.ПодВопросом);
	ВременаПодВопросом = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Если ВременаПодВопросом.Количество() > 0 Тогда
		ОбщаяЗанятость = Перечисления.СостоянияЗанятости.ПодВопросом;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Занят);
	ВременаЗанятые = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Если ВременаЗанятые.Количество() > 0 Тогда
		ОбщаяЗанятость = Перечисления.СостоянияЗанятости.Занят;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Отсутствует);
	ВременаОтсутствует = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Если ВременаОтсутствует.Количество() > 0 Тогда
		ОбщаяЗанятость = Перечисления.СостоянияЗанятости.Отсутствует;
	КонецЕсли;
	
	ФизЛицаОтсутствуют = Новый Массив;
	Для Каждого ВремяОтсутствует Из ВременаОтсутствует Цикл
		Если ФизЛицаОтсутствуют.Найти(ВремяОтсутствует.ФизическоеЛицо) = Неопределено Тогда
			ФизЛицаОтсутствуют.Добавить(ВремяОтсутствует.ФизическоеЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ФизЛицаЗанятые = Новый Массив;
	Для Каждого ВремяЗанятое Из ВременаЗанятые Цикл
		Если ФизЛицаОтсутствуют.Найти(ВремяЗанятое.ФизическоеЛицо) = Неопределено
			И ФизЛицаЗанятые.Найти(ВремяЗанятое.ФизическоеЛицо) = Неопределено Тогда
			
			ФизЛицаЗанятые.Добавить(ВремяЗанятое.ФизическоеЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ФизЛицаПодВопросом = Новый Массив;
	Для Каждого ВремяПодВопросом Из ВременаПодВопросом Цикл
		Если ФизЛицаОтсутствуют.Найти(ВремяПодВопросом.ФизическоеЛицо) = Неопределено
			И ФизЛицаЗанятые.Найти(ВремяПодВопросом.ФизическоеЛицо) = Неопределено
			И ФизЛицаПодВопросом.Найти(ВремяПодВопросом.ФизическоеЛицо) = Неопределено Тогда
			ФизЛицаПодВопросом.Добавить(ВремяПодВопросом.ФизическоеЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДоступностьФизЛиц = Новый Структура(
		"ОбщаяЗанятость, ФизЛицаОтсутствуют, ФизЛицаЗанятые, ФизЛицаПодВопросом");
	ДоступностьФизЛиц.ОбщаяЗанятость = ОбщаяЗанятость;
	ДоступностьФизЛиц.ФизЛицаОтсутствуют = ФизЛицаОтсутствуют;
	ДоступностьФизЛиц.ФизЛицаЗанятые = ФизЛицаЗанятые;
	ДоступностьФизЛиц.ФизЛицаПодВопросом = ФизЛицаПодВопросом;
	
	Возврат ДоступностьФизЛиц;
	
КонецФункции

// Формирует таблицу рекомендаций, содержащую время доступное для всех физ лиц.
Функция ПолучитьТаблицуОбщейЗанятости(Знач ФизЛица, ДатаНачала, ДатаОкончания,
	ИсключенияЗанятости = Неопределено) Экспорт
	
	ТаблицаЗанятости = ПолучитьТаблицуЗанятости(
		ФизЛица,
		ДатаНачала,
		ДатаОкончания,
		Истина,
		ИсключенияЗанятости);
	
	Возврат СформироватьТаблицуОбщейЗанятости(ТаблицаЗанятости, ДатаНачала, ДатаОкончания);
	
КонецФункции

// Переносит элементы планировщика на указанную дату.
//
Функция ПеренестиЭлементыПланировщикаНаДату(ЗаписиКалендаря, ДатаПереноса, НастройкиОтображения = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкиИзмененныхЗаписейКалендаря", Новый Массив);
	Результат.Вставить("НовыеИсключенияПовторения", Новый Массив);
	Результат.Вставить("ОбновитьПринудительно", Ложь);
	Результат.Вставить("ДанныеПланировщика", Неопределено);
	
	НачатьТранзакцию();
	Попытка
		
		НоваяДатаНачала = НачалоДня(ДатаПереноса);
		Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
			
			Если ЗаписьКалендаря.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
				
				ЗаписьКалендаряОбъект = СоздатьИсключениеПовторяющейсяЗаписиКалендаря(ЗаписьКалендаря);
				Длительность = ЗаписьКалендаряОбъект.ДатаОкончания - ЗаписьКалендаряОбъект.ДатаНачала;
				ВремяНачала = ЗаписьКалендаряОбъект.ДатаНачала - НачалоДня(ЗаписьКалендаряОбъект.ДатаНачала);
				ЗаписьКалендаряОбъект.ДатаНачала = НоваяДатаНачала + ВремяНачала;
				ЗаписьКалендаряОбъект.ДатаОкончания = ЗаписьКалендаряОбъект.ДатаНачала + Длительность;
				ЗаписьКалендаряОбъект.Записать();
				
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаря.Ссылка);
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
				
				Цвет = ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря.Ссылка);
				УстановитьЦветЗаписиКалендаря(ЗаписьКалендаряОбъект.Ссылка, Цвет);
				
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
				ИсключениеПовторения = Новый Структура("НоваяСсылка, СтараяСсылка, ДатаНачалаИсходная");
				ИсключениеПовторения.НоваяСсылка = ЗаписьКалендаряОбъект.Ссылка;
				ИсключениеПовторения.СтараяСсылка = ЗаписьКалендаря.Ссылка;
				ИсключениеПовторения.ДатаНачалаИсходная = ЗаписьКалендаря.ДатаНачалаИсходная;
				Результат.НовыеИсключенияПовторения.Добавить(ИсключениеПовторения);
				
			Иначе
				
				ЗаписьКалендаряОбъект = ЗаписьКалендаря.Ссылка.ПолучитьОбъект();
				Длительность = ЗаписьКалендаряОбъект.ДатаОкончания - ЗаписьКалендаряОбъект.ДатаНачала;
				ВремяНачала = ЗаписьКалендаряОбъект.ДатаНачала - НачалоДня(ЗаписьКалендаряОбъект.ДатаНачала);
				ЗаписьКалендаряОбъект.ДатаНачала = НоваяДатаНачала + ВремяНачала;
				ЗаписьКалендаряОбъект.ДатаОкончания = ЗаписьКалендаряОбъект.ДатаНачала + Длительность;
				ЗаписьКалендаряОбъект.Записать();
				
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
				
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Результат.ОбновитьПринудительно = Истина;
	Если НастройкиОтображения <> Неопределено Тогда
		Результат.ДанныеПланировщика = ОбновитьДанныеПланировщика(НастройкиОтображения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление предмета
Функция ПолучитьПредставлениеПредмета(Предмет) Экспорт
	
	ПредставлениеПредмета = "";
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат ПредставлениеПредмета;
	КонецЕсли;
	
	ПраваПоПредмету = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
		Предмет,
		Пользователи.ТекущийПользователь());
	Если Не ПраваПоПредмету.Чтение Тогда
		ПредставлениеПредмета = Строка(Предмет);
		Возврат ПредставлениеПредмета;
	КонецЕсли;
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Предмет) Тогда
		РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "Тема, ДатаОтправки");
		Наименование = Строка(РеквизитыПисьма.Тема) + ", " + Строка(РеквизитыПисьма.ДатаОтправки);
	ИначеЕсли ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Наименование");
	Иначе
		Наименование = Строка(Предмет)
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		ПредставлениеОбъекта = Метаданные.Документы.Задача.Синоним;
	ИначеЕсли ЗначениеЗаполнено(Предмет.Метаданные().ПредставлениеОбъекта) Тогда 
		ПредставлениеОбъекта = Предмет.Метаданные().ПредставлениеОбъекта; 
	Иначе 	
		ПредставлениеОбъекта = Предмет.Метаданные().Синоним;
	КонецЕсли;
	
	ПредставлениеПредмета = СтрШаблон("%1 (%2)", Наименование, ПредставлениеОбъекта);
	
	Возврат ПредставлениеПредмета;
	
КонецФункции

// Возвращает события сотрудника физ. лица за определенный промежуток времени.
// 
// Параметры:
//  ДатаНачала - Дата - С какой даты следует получать события.
//  ДатаОкончания - Дата - По какую дату следует получать события.
//  ФизЛицоСотрудника - СправочникСсылка.ФизическиеЛица - физ. лицо, события которого необходимо получить.
//  БезЗаписейОбОтсутствии - Булево - Без записей календаря об отсутствии.
//
Функция ПолучитьСобытияФизЛицаСотрудника(
	ДатаНачала, ДатаОкончания, ФизЛицоСотрудника, БезЗаписейОбОтсутствии = Истина) Экспорт
	
	ЗаписиКалендаряСНапоминаниями = ЗаписиКалендаряСНапоминаниямиТекущегоПользователя();
	
	ТаблицаСобытий = ПолучитьТаблицуСобытий(
		ДатаНачала,
		ДатаОкончания,
		Ложь,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизЛицоСотрудника),
		Ложь,
		ЗаписиКалендаряСНапоминаниями);
	
	Если БезЗаписейОбОтсутствии Тогда
		КоличествоЭлементов = ТаблицаСобытий.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			Строка = ТаблицаСобытий[КоличествоЭлементов - Индекс];
			Если Строка.Связанная И ТипЗнч(Строка.Предмет) = Тип("ДокументСсылка.Отсутствие") Тогда
				ТаблицаСобытий.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСобытий;
		
КонецФункции

// Формирует таблицу занятости.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Сформировать таблицу занятости:
//   * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица.
//   * ДатаНачала - Дата.
//   * ДатаОкончания - Дата.
//   * Занят - Булево.
//
Функция СформироватьТаблицуЗанятости() Экспорт
	
	ТаблицаЗанятости = Новый ТаблицаЗначений;
	ТаблицаЗанятости.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаЗанятости.Колонки.Добавить("ДатаНачала");
	ТаблицаЗанятости.Колонки.Добавить("ДатаОкончания");
	ТаблицаЗанятости.Колонки.Добавить("Занят");
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

// Заполняет таблицу событий данными повторяющегося события.
//
Процедура ВнестиПовторяющеесяСобытиеВТаблицу(ТаблицаСобытий, ДанныеСобытия, ДатаНачала, ДатаОкончания) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПравилаПовторения = ПолучитьСтруктуруПравилаПовторения();
	ЗаполнитьЗначенияСвойств(СтруктураПравилаПовторения, ДанныеСобытия);
	СтруктураПравилаПовторения.ИсключенияПовторения = ДанныеСобытия.ИсключенияПовторения.Выгрузить();
	СтруктураПравилаПовторения.ПовторениеПоДням = ДанныеСобытия.ПовторениеПоДням.Выгрузить();
	
	ПроверяемаяДата = НачалоДня(ДатаНачала);
	Пока ПроверяемаяДата < ДатаОкончания Цикл
		
		СтруктураПравилаПовторения = ПолучитьСтруктуруПравилаПовторения();
		ЗаполнитьЗначенияСвойств(СтруктураПравилаПовторения, ДанныеСобытия);
		СтруктураПравилаПовторения.ИсключенияПовторения = ДанныеСобытия.ИсключенияПовторения.Выгрузить();
		СтруктураПравилаПовторения.ПовторениеПоДням = ДанныеСобытия.ПовторениеПоДням.Выгрузить();
		
		Если ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
			
			ДатаНачалаЭлементаПовторения = НачалоДня(ПроверяемаяДата)
				+ (ДанныеСобытия.ДатаНачала - НачалоДня(ДанныеСобытия.ДатаНачала));
			ДатаОкончанияЭлементаПовторения = НачалоДня(ПроверяемаяДата)
				+ (ДанныеСобытия.ДатаОкончания - НачалоДня(ДанныеСобытия.ДатаНачала));
			
			Если ДатаНачала < ДатаОкончанияЭлементаПовторения И ДатаОкончания > ДатаНачалаЭлементаПовторения Тогда
				
				НоваяСтрока = ТаблицаСобытий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСобытия);
				
				Если ПараметрыСеанса.СотрудникиПользователя.Найти(ДанныеСобытия.Сотрудник) <> Неопределено Тогда
					ПользовательСотрудника = Пользователи.ТекущийПользователь();
				Иначе
					ПользовательСотрудника = Сотрудники.ПользовательСотрудника(ДанныеСобытия.Сотрудник);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПользовательСотрудника) Тогда
				
					НоваяСтрока.ДатаНачала = 
						РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(
							РаботаСЧасовымиПоясами.ПривестиМестноеВремяПользователяКВремениСеанса(
								ДатаНачалаЭлементаПовторения,
								ПользовательСотрудника));
					НоваяСтрока.ДатаОкончания = 
						РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(
							РаботаСЧасовымиПоясами.ПривестиМестноеВремяПользователяКВремениСеанса(
								ДатаОкончанияЭлементаПовторения,
								ПользовательСотрудника));
								
				КонецЕсли;
				
				ПредставлениеМестногоЧасовогоПояса = РаботаСЧасовымиПоясами.ПредставлениеМестногоЧасовогоПояса();
				Если ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса) Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Наименование") Тогда
						НоваяСтрока.Наименование = НоваяСтрока.Наименование + ", " + ПредставлениеМестногоЧасовогоПояса;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу событий данными выборки.
//
Процедура ЗаполнитьТаблицуПовторяющимисяСобытиями(ТаблицаСобытий, Выборка, ДатаНачала, ДатаОкончания) Экспорт
	
	Пока Выборка.Следующий() Цикл
		ВнестиПовторяющеесяСобытиеВТаблицу(ТаблицаСобытий, Выборка, ДатаНачала, ДатаОкончания);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру правила повторения брони.
// 
// Возвращаемое значение:
//  Структура -- Структура правила повторения:
//   * ДатаНачалаПовторения - Дата - Дата, с которой повторяется бронь.
//   * ДатаОкончанияПовторения - Дата - Дата, по которую повторяется бронь.
//   * ИнтервалПовторения - Число - Интервал с которым повторяется бронь.
//   * КоличествоПовторов - Число - Количество повторов брони.
//   * ПовторениеПоДнямМесяца - Число - Дни месяца, по которым повторяется бронь
//   * ПовторениеПоМесяцам - Число - Месяца, по которым повторяется бронь.
//   * ПравилоОкончанияПовторения - ПеречислениеСсылка.ПравилаОкончанияПовторения - Правило окончания повторения.
//   * ТипЗаписиКалендаря - ПеречислениеСсылка.ТипЗаписиКалендаря - Тип брони (обычная / повторяющаяся / исключение повторения).
//   * ЧастотаПовторения - ПеречислениеСсылка.ЧастотаПовторения - Частота повторения брони.
//   * ИсключенияПовторения - ТаблицаЗначений - Даты, по которым бронь не повторяется:
//      ** ДатаИсключения - Дата - Дата, по которой бронь не повторяется.
//      ** ЗаписьИсключения - СправочникСсылка.ЗаписиРабочегоКалендаря - Бронь, которая заменяет бронь на данную дату.
//   * ПовторениеПоДням - ТаблицаЗначений - Дни недели, по которым повторяется бронь:
//      ** ДеньНедели - Число - День недели, в который повторяется бронь.
//      ** НомерВхождения - Число - Номер дня недели, в который повторяется бронь.
//
Функция ПолучитьСтруктуруПравилаПовторения() Экспорт
	
	СтруктураПравилаПовторения = Новый Структура();
	СтруктураПравилаПовторения.Вставить("ДатаНачалаПовторения", Дата(1, 1, 1));
	СтруктураПравилаПовторения.Вставить("ДатаОкончанияПовторения", Дата(1, 1, 1));
	СтруктураПравилаПовторения.Вставить("ИнтервалПовторения", 0);
	СтруктураПравилаПовторения.Вставить("КоличествоПовторов", 0);
	СтруктураПравилаПовторения.Вставить("ПовторениеПоДнямМесяца", 0);
	СтруктураПравилаПовторения.Вставить("ПовторениеПоМесяцам", 0);
	СтруктураПравилаПовторения.Вставить("ПравилоОкончанияПовторения", Перечисления.ПравилаОкончанияПовторения.ПустаяСсылка());
	СтруктураПравилаПовторения.Вставить("ТипЗаписиКалендаря", Перечисления.ТипЗаписиКалендаря.ПустаяСсылка());
	СтруктураПравилаПовторения.Вставить("ЧастотаПовторения", Перечисления.ЧастотаПовторения.ПустаяСсылка());
	
	СтруктураПравилаПовторения.Вставить("ИсключенияПовторения", Новый ТаблицаЗначений);
	СтруктураПравилаПовторения.ИсключенияПовторения.Колонки.Добавить(
		"ДатаИсключения",
		Новый ОписаниеТипов("Дата"));
	СтруктураПравилаПовторения.ИсключенияПовторения.Колонки.Добавить(
		"ЗаписьИсключения",
		Новый ОписаниеТипов("СправочникСсылка.ЗаписиРабочегоКалендаря"));
	
	СтруктураПравилаПовторения.Вставить("ПовторениеПоДням", Новый ТаблицаЗначений);
	СтруктураПравилаПовторения.ПовторениеПоДням.Колонки.Добавить(
		"ДеньНедели",
		Новый ОписаниеТипов("Число"));
	СтруктураПравилаПовторения.ПовторениеПоДням.Колонки.Добавить(
		"НомерВхождения",
		Новый ОписаниеТипов("Число"));
	
	Возврат СтруктураПравилаПовторения;
	
КонецФункции

// Возвращает правило повторения "Никогда".
// 
// Возвращаемое значение:
//  Структура - Правило повторения "Никогда". См. РаботаСРабочимКалендаремСервер.ПолучитьСтруктуруПравилаПовторения.
//
Функция ПравилоПовторенияНикогда() Экспорт
	
	ПравилоПовторенияНикогда = ПолучитьСтруктуруПравилаПовторения();
	ПравилоПовторенияНикогда.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
	
	Возврат ПравилоПовторенияНикогда;
	
КонецФункции

// Получает данные планировщика, при необходимость сохраняя измененную настройку.
//
Функция ПолучитьДанныеПланировщика(Знач НастройкиОтображения, Знач ИзмененнаяНастройка) Экспорт
	
	СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка);
	
	ДанныеПланировщика = ПолучитьСтруктуруДанныхПланировщика();
	ДанныеПланировщика.Элементы = ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения);
	ДанныеПланировщика.ИнтервалыФона = ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения);
	
	Возврат ДанныеПланировщика;
	
КонецФункции

// Получает данные планировщика, необходимые для обновления данных о записях календаря.
//
Функция ОбновитьДанныеПланировщика(Знач НастройкиОтображения, Знач ЗаписиКалендаря = Неопределено) Экспорт
	
	ДанныеПланировщика = ПолучитьСтруктуруДанныхПланировщика();
	Если ЗаписиКалендаря <> Неопределено Тогда
		ДанныеПланировщика.Элементы = ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения, ЗаписиКалендаря);
	КонецЕсли;
	ДанныеПланировщика.ИнтервалыФона = ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения);
	
	Возврат ДанныеПланировщика;
	
КонецФункции

// Сохраняет измененную настройку отображения.
//
Процедура СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка) Экспорт
	
	Если Не ЗначениеЗаполнено(ИзмененнаяНастройка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзмененнаяНастройка = "ПериодОтображения" Тогда
		УстановитьПерсональнуюНастройку(
			"ПериодОтображенияРабочегоКалендаря",
			НастройкиОтображения.ПериодОтображения);
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру элемента записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СтрокаТаблицыЗначений,
//                     СправочникОбъект.ЗаписиРабочегоКалендаря,
//                     СправочникСсылка.ЗаписиРабочегоКалендаря - Данные записи календаря.
// 
// Возвращаемое значение:
//  Структура - Структура данных записи календаря.
//
Функция СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря) Экспорт
	
	ЭлементЗаписиКалендаря = Новый Структура;
	
	ЭлементЗаписиКалендаря.Вставить("ДатаНачалаИсходная", ЗаписьКалендаря.ДатаНачала);
	ЭлементЗаписиКалендаря.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Устанавливает условное оформление плана дня на форме.
//
// Параметры:
//  УсловноеОформление	 - УсловноеОформлениеКомпоновкиДанных	 - Содержит настройки условного оформления формы.
//
Процедура УстановитьУсловноеОформлениеПланДня(УсловноеОформление) Экспорт
	
	// Помеченные на удаление элементы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина));
	
	// Элемент дня.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветФона", ЦветаСтиля.ЦветКалендаряФонШапки);
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", ЦветаСтиля.ЦветКалендаряПодпись);
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина));
	
	// Элемент текущего дня.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");
	
	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ДатаДень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСегодня");
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветФона", ЦветаСтиля.ЦветКалендаряФонТекущегоДня);
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", ЦветаСтиля.ЦветКалендаряПодписьТекущийДень);
	
КонецПроцедуры

// Подключает напоминание автоматически для записи календаря.
//
// Параметры:
//  ЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - Запись календаря.
//
// Возвращаемое значение:
//  Структура - Напоминание текущего пользователя.
//
Функция ПодключитьНапоминаниеАвтоматически(ЗаписьКалендаря) Экспорт
	
	Напоминание = Неопределено;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя") Тогда
		Возврат Напоминание;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьКалендаря, "Сотрудник");
	Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники")
		И ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Напоминание;
	КонецЕсли;
	
	Пользователь = Сотрудники.ПользовательСотрудника(Сотрудник);
	ИмяПользователяИБ = ОбщегоНазначенияДокументооборот.ИмяПользователяИБ(Пользователь);
	
	УстанавливатьНапоминаниеАвтоматически =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"УстанавливатьНапоминаниеАвтоматически",
			Истина,
			,
			ИмяПользователяИБ);
	Если Не УстанавливатьНапоминаниеАвтоматически Тогда
		Возврат Напоминание;
	КонецЕсли;
	
	ДатаНачала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьКалендаря, "ДатаНачала");
	Если ДатаНачала < ТекущаяДатаСеанса() Тогда
		Возврат Напоминание;
	КонецЕсли;
	
	СрокНапоминанияПоУмолчанию =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"СрокНапоминанияПоУмолчанию",
			15,
			,
			ИмяПользователяИБ);
	
	Напоминание = НапоминанияПользователяДокументооборот.ПодключитьНапоминаниеДоВремениПредмета(
		Строка(ЗаписьКалендаря),
		СрокНапоминанияПоУмолчанию * 60,
		ЗаписьКалендаря,
		"ДатаНачала",,
		Пользователь);
	
	Если Пользователь <> Пользователи.ТекущийПользователь() Тогда
		Напоминание = Неопределено;
	КонецЕсли;
	
	Возврат Напоминание;
	
КонецФункции

// Доступно изменение календаря сотрудника.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, чьи права проверяем.
//  СотрудникКалендаря - СправочникСсылка.Сотрудники - Сотрудник, права на чей календарь проверяем.
//
// Возвращаемое значение:
//  Булево - Доступно изменение календаря.
//
Функция ДоступноИзменениеКалендаря(Пользователь, СотрудникКалендаря) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Пользователь в своем календаре имеет право изменения.
	Если Сотрудники.ЭтоСотрудникПользователя(СотрудникКалендаря, Пользователь) Тогда	
		Возврат Истина;
	КонецЕсли;
	
	// Полноправному пользователю всё разрешено.
	Если ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Делегаты получают права только если включено использование прав доступа.
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Делегаты получают право изменение состояния записи календаря.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗамещающиеИПомощники.Ссылка
	|ИЗ
	|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ЗамещающиеИПомощникиВопросыЗамещения
	|		ПО ЗамещающиеИПомощникиВопросыЗамещения.Ссылка = ЗамещающиеИПомощники.Ссылка
	|ГДЕ
	|	ЗамещающиеИПомощники.Сотрудник = &ОтКого
	|	И ЗамещающиеИПомощники.Замещающий В (&Кому)
	|	И ЗамещающиеИПомощникиВопросыЗамещения.Область В (&ОбластиЗамещения)";
	
	ОбластиЗамещения = ЗамещающиеИПомощники.ОбластиЗамещенияПоИдентификаторуОбъектаМетаданных(
		Метаданные.Справочники.ЗаписиРабочегоКалендаря);
	Запрос.УстановитьПараметр("ОбластиЗамещения", ОбластиЗамещения);
	Запрос.УстановитьПараметр("ОтКого", СотрудникКалендаря);
	Запрос.УстановитьПараметр("Кому", Сотрудники.СотрудникиПользователя(Пользователь));

	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

// Возвращает признак отработана для записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - Запись календаря.
// 
// Возвращаемое значение:
//  Булево - Признак того что запись календаря отработана.
//
Функция ЗаписьКалендаряОтработана(ЗаписьКалендаря) Экспорт
	
	Отработана = РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.ПолучитьНастройку(
		ПользователиДокументооборот.ФизЛицоПользователя(),
		ЗаписьКалендаря,
		Перечисления.НастройкиЗаписейРабочегоКалендаря.Отработана);
	Если Отработана = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Отработана;
	
КонецФункции

// Отмечает записи календаря как отработанные.
//
Функция ОтработатьВыделенныеЗаписиКалендаря(Знач ЗаписиКалендаря) Экспорт
	
	СсылкиИзмененныхЗаписейКалендаря = Новый Массив;
	ОтключенныеНапоминания = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
			
			Если ЭтоПовторяющеесяСобытие(ЗаписьКалендаря) Тогда
				
				ЗаписьКалендаряОбъект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
				ЗаписьКалендаряОбъект.Заполнить(ЗаписьКалендаря.Ссылка);
				ЗаполнитьЗначенияСвойств(ЗаписьКалендаряОбъект, ЗаписьКалендаря, "ДатаНачала, ДатаОкончания");
				ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ПовторяющеесяСобытие", ЗаписьКалендаря.Ссылка);
				ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", ЗаписьКалендаря.ДатаНачалаИсходная);
				ЗаписьКалендаряОбъект.Записать();
				
				ОтработатьЗаписьКалендаря(ЗаписьКалендаряОбъект.Ссылка, ОтключенныеНапоминания);
				
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
			Иначе
				
				ОтработатьЗаписьКалендаря(ЗаписьКалендаря.Ссылка, ОтключенныеНапоминания);
				
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкиИзмененныхЗаписейКалендаря", СсылкиИзмененныхЗаписейКалендаря);
	Результат.Вставить("ОтключенныеНапоминания", ОтключенныеНапоминания);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает признак отработана для записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - Запись календаря.
//  Отработана		 - Булево									 - Новый признак отработки.
//
Процедура УстановитьОтработанаЗаписьКалендаря(ЗаписьКалендаря, Отработана = Истина) Экспорт
	
	РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.УстановитьНастройку(
		ПользователиДокументооборот.ФизЛицоПользователя(),
		ЗаписьКалендаря,
		Перечисления.НастройкиЗаписейРабочегоКалендаря.Отработана,
		Отработана);
	
КонецПроцедуры

// Проверяет подходит ли дата под правило повторения
Функция ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, СтруктураПравилаПовторения, УчитыватьИсключения = Истина) Экспорт
	
	Если ПроверяемаяДата < СтруктураПравилаПовторения.ДатаНачалаПовторения Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПравилаПовторения.ДатаОкончанияПовторения)
		И ПроверяемаяДата > СтруктураПравилаПовторения.ДатаОкончанияПовторения
		И УчитыватьИсключения Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если УчитыватьИсключения И ЯвляетсяИсключениемПовторения(ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверяемаяДата = СтруктураПравилаПовторения.ДатаНачалаПовторения Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не УдовлетворяетПравилуИнтервалаПовторения(ПроверяемаяДата, СтруктураПравилаПовторения)
		Или Не УдовлетворяетПравилуПовторенияПоДням(ПроверяемаяДата, СтруктураПравилаПовторения)
		Или Не УдовлетворяетПравилуПовторенияПоДнямМесяца(ПроверяемаяДата, СтруктураПравилаПовторения)
		Или Не УдовлетворяетПравилуПовторенияПоМесяцам(ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формирует таблицу занятости
// 
// Параметры:
//  ФизЛица - Массив из СправочникСсылка.ФизическиеЛица.
//  ДатаНачала - Дата.
//  ДатаОкончания - Дата.
//  ОтобразитьЗанятостьВДне - Булево.
//  ИсключенияЗанятости - Массив.
//  ТолькоИтоги - Булево.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - См. РаботаСРабочимКалендаремСервер.СформироватьТаблицуЗанятости.
//
Функция ПолучитьТаблицуЗанятости(
	Знач ФизЛица,
	ДатаНачала,
	ДатаОкончания,
	ОтобразитьЗанятостьВДне = Истина,
	ИсключенияЗанятости = Неопределено,
	ТолькоИтоги = Ложь) Экспорт
	
	// Формирование структуры таблицы занятости
	ТаблицаЗанятости = СформироватьТаблицуЗанятости();
	
	// Если занятость в дне не отображается, то таблица занятости не заполняется
	Если Не ОтобразитьЗанятостьВДне Тогда
		Возврат ТаблицаЗанятости;
	КонецЕсли;
	
	// Если передан некорректный период, то таблица занятости не заполняется
	Если Не РаботаСРабочимКалендаремКлиентСервер.ЯвляетсяКорректнымПериодом(ДатаНачала, ДатаОкончания) Тогда
		Возврат ТаблицаЗанятости;
	КонецЕсли;
	
	Если ТипЗнч(ФизЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		МассивФизЛиц = Новый Массив;
		МассивФизЛиц.Добавить(ФизЛица);
		
	Иначе // Массив
		
		Если ФизЛица.Количество() = 0 Тогда
			Возврат ТаблицаЗанятости;
		КонецЕсли;
		
		МассивФизЛиц = ФизЛица;
		
	КонецЕсли;
	
	Если ТипЗнч(МассивФизЛиц[0]) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВызватьИсключение НСтр("ru = 'ПолучитьТаблицуЗанятости выполняет получение занятости только по физ. лицам.'");
	КонецЕсли;
	
	// Получение данных для расчета занятости
	ТаблицаДоступности =
		РегистрыСведений.ДоступноеВремяФизическихЛиц.ПолучитьТаблицуДоступности(МассивФизЛиц);
		
	ТаблицаЗанятостиФизЛиц = РегистрыСведений.ЗанятостьФизическихЛиц.ПолучитьТаблицуЗанятости(
		МассивФизЛиц, ДатаНачала, ДатаОкончания);
	СортироватьПоСостояниюЗанятости(ТаблицаЗанятостиФизЛиц);
	
	ТаблицаЗанятостиПоЗаписямКалендаря = 
		Справочники.ЗаписиРабочегоКалендаря.ПолучитьТаблицуЗанятости(
			МассивФизЛиц, ДатаНачала, ДатаОкончания, ИсключенияЗанятости);
	СортироватьПоСостояниюЗанятости(ТаблицаЗанятостиПоЗаписямКалендаря);
	
	// Расчет занятости для каждого сотрудника.
	Для Каждого ФизЛицо Из МассивФизЛиц Цикл
		
		Если Не ТолькоИтоги Тогда
			
			// Полный подсчет занятости
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизЛицо;
			НоваяСтрока.ДатаНачала = ДатаНачала;
			НоваяСтрока.ДатаОкончания = ДатаОкончания;
			НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Занят;
			
			// Занятое время по ежедневной занятости
			РассчитатьДоступностьПоПолномуАлгоритму(
				ТаблицаДоступности, ТаблицаЗанятости, ФизЛицо,
				ДатаНачала, ДатаОкончания);
			
			// Занятое время по записям занятости
			ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятости, ТаблицаЗанятостиФизЛиц,
				ФизЛицо, ДатаНачала, ДатаОкончания);
			
			// Занятое время по записям календаря
			ВнестиЗанятостиВТаблицуЗанятости(
				ТаблицаЗанятости, ТаблицаЗанятостиПоЗаписямКалендаря, ФизЛицо,
				ДатаНачала, ДатаОкончания);
			
		Иначе
			
			// Краткий подсчет занятости
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизЛицо;
			НоваяСтрока.ДатаНачала = ДатаНачала;
			НоваяСтрока.ДатаОкончания = ДатаОкончания;
			НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Доступен;
			
			// Занятое время по записям календаря
			РасчетЗанятостиЗавершен = РассчитатьЗанятостьПоКраткомуАлгоритму(
				ТаблицаЗанятостиПоЗаписямКалендаря, ФизЛицо, НоваяСтрока.Занят);
			Если РасчетЗанятостиЗавершен Тогда
				Продолжить;
			КонецЕсли;
			
			// Занятое время по записям занятости
			РасчетЗанятостиЗавершен = РассчитатьЗанятостьПоКраткомуАлгоритму(
				ТаблицаЗанятостиФизЛиц, ФизЛицо, НоваяСтрока.Занят);
			Если РасчетЗанятостиЗавершен Тогда
				Продолжить;
			КонецЕсли;
			
			// Занятое время по ежедневной занятости
			РассчитатьДоступностьПоКраткомуАлгоритму(
				ТаблицаДоступности, ФизЛицо, ТаблицаЗанятостиФизЛиц,
				НоваяСтрока.Занят, ДатаНачала, ДатаОкончания);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

// Формирует таблицу рекомендаций, содержащую время доступное для всех физ лиц.
Функция ПолучитьТаблицуРекомендаций(Знач ФизЛица, ДатаНачала, ДатаОкончания, Длительность,
	ИсключенияЗанятости = Неопределено) Экспорт
	
	ТаблицаОбщейЗанятости = ПолучитьТаблицуОбщейЗанятости(
		ФизЛица, ДатаНачала, ДатаОкончания, ИсключенияЗанятости);
	
	ТаблицаРекомендаций = ТаблицаОбщейЗанятости.СкопироватьКолонки();
	
	ДатаНачалаРекомендаций = КонецЧаса(ТекущаяДатаСеанса()) + 1;
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Доступен);
	МассивСвободногоВремени = ТаблицаОбщейЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СвободноеВремя Из МассивСвободногоВремени Цикл
		
		Если СвободноеВремя.ДатаОкончания <= ДатаНачалаРекомендаций Тогда
			Продолжить;
		КонецЕсли;
		
		Если СвободноеВремя.ДатаНачала < ДатаНачалаРекомендаций Тогда
			СвободноеВремя.ДатаНачала = ДатаНачалаРекомендаций;
		КонецЕсли;
		
		Если (СвободноеВремя.ДатаОкончания - СвободноеВремя.ДатаНачала) >= Длительность Тогда
			
			ВнестиЗанятостьВТаблицуЗанятости(
				ТаблицаРекомендаций,
				Справочники.ФизическиеЛица.ПустаяСсылка(),
				СвободноеВремя.ДатаНачала,
				СвободноеВремя.ДатаОкончания,
				СвободноеВремя.Занят,
				ДатаНачала,
				ДатаОкончания);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРекомендаций;
	
КонецФункции

// Сортирует таблицу значений по полю занятости
Процедура СортироватьПоСостояниюЗанятости(ТаблицаЗанятости,
	ДополнительноеНаправлениеСортировки = "", ДополнительнаяСортировка = "") Экспорт
	
	Если ЗначениеЗаполнено(ДополнительноеНаправлениеСортировки) Тогда
		ДополнительноеНаправлениеСортировки = " " + ДополнительноеНаправлениеСортировки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительнаяСортировка) Тогда
		ДополнительнаяСортировка = ", " + ДополнительнаяСортировка;
	КонецЕсли;
	
	ТаблицаЗанятости.Колонки.Добавить("ИндексСортировки");
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗанятости Цикл
		
		Если СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.Отсутствует Тогда
			СтрокаТаблицы.ИндексСортировки = 3;
		ИначеЕсли СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
			СтрокаТаблицы.ИндексСортировки = 2;
		ИначеЕсли СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
			СтрокаТаблицы.ИндексСортировки = 1;
		ИначеЕсли СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.Доступен Тогда
			СтрокаТаблицы.ИндексСортировки = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеСортировки = СтрШаблон("ИндексСортировки%1%2",
		ДополнительноеНаправлениеСортировки,
		ДополнительнаяСортировка);
	
	ТаблицаЗанятости.Сортировать(ЗначениеСортировки);
	
	ТаблицаЗанятости.Колонки.Удалить("ИндексСортировки");
	
КонецПроцедуры

// Правила повторения записей календаря.
//
// Параметры:
//  ЗаписиКалендаря - Массив из СправочникСсылка.ЗаписиКалендаря - Записи календаря.
// 
// Возвращаемое значение:
//  Соответствие - Правила повторения записей календаря.
//
Функция ПравилаПовторения(ЗаписиКалендаря) Экспорт
	
	ПравилаПовторения = Новый Соответствие;
	Если ЗаписиКалендаря.Количество() = 0 Тогда
		Возврат ПравилаПовторения;
	КонецЕсли;
	
	Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
		ПравилаПовторения.Вставить(ЗаписьКалендаря, ПравилоПовторенияНикогда());
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.Ссылка КАК ЗаписьКалендаря,
		|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения КАК ДатаНачалаПовторения,
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения КАК ДатаОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ИнтервалПовторения КАК ИнтервалПовторения,
		|	ЗаписиРабочегоКалендаря.КоличествоПовторов КАК КоличествоПовторов,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца КАК ПовторениеПоДнямМесяца,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам КАК ПовторениеПоМесяцам,
		|	ЗаписиРабочегоКалендаря.ПравилоОкончанияПовторения КАК ПравилоОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря КАК ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ЧастотаПовторения КАК ЧастотаПовторения,
		|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
		|		ДатаИсключения КАК ДатаИсключения,
		|		ЗаписьИсключения КАК ЗаписьИсключения
		|	) КАК ИсключенияПовторения,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
		|		ДеньНедели КАК ДеньНедели,
		|		НомерВхождения КАК НомерВхождения
		|	) КАК ПовторениеПоДням
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Ссылка В(&ЗаписиКалендаря)");
	
	Запрос.УстановитьПараметр("ЗаписиКалендаря", ЗаписиКалендаря);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПравилоПовторения = ПравилаПовторения[Выборка.ЗаписьКалендаря];
		
		ЗаполнитьЗначенияСвойств(
			ПравилоПовторения,
			Выборка,
			"ДатаНачалаПовторения, ДатаОкончанияПовторения, ИнтервалПовторения, КоличествоПовторов,
			|ПовторениеПоДнямМесяца, ПовторениеПоМесяцам, ПравилоОкончанияПовторения, ТипЗаписиКалендаря,
			|ЧастотаПовторения");
		
		Для Каждого СтрокаИсключенияПовторения Из Выборка.ИсключенияПовторения.Выгрузить() Цикл
			ЗаполнитьЗначенияСвойств(
				ПравилоПовторения.ИсключенияПовторения.Добавить(),
				СтрокаИсключенияПовторения,
				"ДатаИсключения, ЗаписьИсключения");
		КонецЦикла;
		
		Для Каждого СтрокаПовторенияПоДня Из Выборка.ПовторениеПоДням.Выгрузить() Цикл
			ЗаполнитьЗначенияСвойств(
				ПравилоПовторения.ПовторениеПоДням.Добавить(),
				СтрокаПовторенияПоДня,
				"ДеньНедели, НомерВхождения");
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПравилаПовторения;
	
КонецФункции

// Возвращает все календари физических лиц.
// 
// Параметры:
//  ФизЛица - Массив из СправочникСсылка.ФизическиеЛица - Физические лица.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники, СправочникСсылка.РолиИсполнителей - Все календари физического лиц.
//
Функция КалендариФизЛиц(ФизЛица) Экспорт
	
	Если ФизЛица.Количество() = 1 И ФизЛица[0] = ПараметрыСеанса.ФизическоеЛицоПользователя Тогда
		СотрудникиФизЛиц = ПараметрыСеанса.СотрудникиПользователя;
	Иначе
		СотрудникиФизЛиц = Сотрудники.ВсеСотрудникиФизЛиц(ФизЛица);
	КонецЕсли;
	РолиФизЛица = РегистрыСведений.ИсполнителиРолей.РолиИсполнителей(СотрудникиФизЛиц);
	
	КалендариФизЛиц = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КалендариФизЛиц, СотрудникиФизЛиц);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КалендариФизЛиц, РолиФизЛица);
	
	Возврат КалендариФизЛиц;
	
КонецФункции

// Определяет всех физических лиц, для которых отображается календарь.
// 
// Параметры:
//  Календарь - СправочникСсылка.Сотрудники, СправочникСсылка.РолиИсполнителей - Календарь.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ФизическиеЛица - Физические лица, для которых отображается календарь.
//  
Функция ФизЛицаКалендаря(Календарь) Экспорт
	
	Календари = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Календарь);
	ФизЛицаКалендарей = ФизЛицаКалендарей(Календари);
	ФизЛицаКалендаря = ФизЛицаКалендарей[Календарь];
	
	Возврат ФизЛицаКалендаря;
	
КонецФункции

// Определяет всех физических лиц, для которых отображаются календари.
// 
// Параметры:
//  Календари - Массив из СправочникСсылка.Сотрудники, СправочникСсылка.РолиИсполнителей - Календари.
// 
// Возвращаемое значение:
//  Соответствие - Физические лица календарей:
//   * Ключ - СправочникСсылка.Сотрудники, СправочникСсылка.РолиИсполнителей - Календарь.
//   * Значение - Массив из СправочникСсылка.ФизическиеЛица - Физические лица, для которых отображается календарь.
//  
Функция ФизЛицаКалендарей(Календари) Экспорт
	
	ФизЛицаКалендарей = Новый Соответствие;
	Если Календари.Количество() = 0 Тогда
		Возврат ФизЛицаКалендарей;
	КонецЕсли;
	
	ВсеСотрудникиКалендарей = Новый Массив;
	СотрудникиКалендарей = Новый Соответствие;
	
	РолевыеКалендари= Новый Массив;
	Для Каждого Календарь Из Календари Цикл
		
		Если ТипЗнч(Календарь) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			РолевыеКалендари.Добавить(Календарь);
			
		Иначе
			
			СотрудникиКалендаря = Новый Массив;
			СотрудникиКалендаря.Добавить(Календарь);
			
			СотрудникиКалендарей[Календарь] = СотрудникиКалендаря;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ВсеСотрудникиКалендарей,
				СотрудникиКалендаря,
				Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РолевыеКалендари.Количество() > 0 Тогда
		
		ИсполнителиРолей = РегистрыСведений.ИсполнителиРолей.ИсполнителиРолей(
			РолевыеКалендари,
			Истина);
		
		Для Каждого РолевойКалендарь Из РолевыеКалендари Цикл
			
			СотрудникиКалендаря = ИсполнителиРолей[РолевойКалендарь];
			
			СотрудникиКалендарей[РолевойКалендарь] = СотрудникиКалендаря;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ВсеСотрудникиКалендарей,
				СотрудникиКалендаря,
				Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФизЛицаПоСотрудникам = Сотрудники.ФизЛицаПоСотрудникам(ВсеСотрудникиКалендарей);
	
	Для Каждого Календарь Из Календари Цикл
		
		ФизЛицаКалендаря = Новый Массив;
		СотрудникиКалендаря = СотрудникиКалендарей[Календарь];
		
		Для Каждого СотрудникКалендаря Из СотрудникиКалендаря Цикл
			
			ФизЛицоСотрудника = ФизЛицаПоСотрудникам[СотрудникКалендаря];
			Если ФизЛицаКалендаря.Найти(ФизЛицоСотрудника) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ФизЛицаКалендаря.Добавить(ФизЛицоСотрудника);
			
		КонецЦикла;
		
		ФизЛицаКалендарей[Календарь] = ФизЛицаКалендаря;
		
	КонецЦикла;
	
	Возврат ФизЛицаКалендарей;
	
КонецФункции

// Вернет запись по письму для текущего пользователя.
//
// Параметры:
// Письмо  - ДокументСсылка.ВходящееПисьмо
// Сотрудники - Массив Из СправочникСсылка.Сотрудники 
//
Функция НайтиЗаписьКалендаря(ФайлСсылка, Письмо, Сотрудники) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// из письма получим ID    
	ИдентификаторПриглашения = Неопределено;     
	РеквизитыПриглашения = Новый Структура;    
	ВстроеннаяПочтаСервер.ПолучитьТекстПриглашения(ФайлСсылка, ИдентификаторПриглашения, РеквизитыПриглашения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаписиРабочегоКалендаря.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ
		|	И ЗаписиРабочегоКалендаря.Сотрудник В(&Сотрудники)
		|	И ЗаписиРабочегоКалендаря.ИдентификаторПриглашения = &ИдентификаторПриглашения";
	Запрос.УстановитьПараметр("ИдентификаторПриглашения", ИдентификаторПриглашения);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

// Вернет есть ли запись с таким же параметрами
//
// Параметры:
// Сотрудники - Массив Из СправочникСсылка.Сотрудники 
// ИдентификаторПриглашения - Строка, идентификатор
// СсылкаЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря
//
Функция УжеЕстьТакаяЗаписьКалендаря(Сотрудники, 
				ИдентификаторПриглашения, СсылкаЗаписьКалендаря) Экспорт
				
	Если Не ЗначениеЗаполнено(ИдентификаторПриглашения) Тогда			
		Возврат Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаписиРабочегоКалендаря.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Сотрудник В(&Сотрудники)
		|	И ЗаписиРабочегоКалендаря.ИдентификаторПриглашения = &ИдентификаторПриглашения";
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ИдентификаторПриглашения", ИдентификаторПриглашения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	СсылкаЗаписьКалендаря = Выборка.Ссылка;
	Возврат Истина;
	
КонецФункции

// Обновляет запись календаря
//
// Параметры:     
// Предмет - СправочникСсылка.Контроль, ДокументСсылка.ЗаписьОРаботеСКонтрагентом, СправочникСсылка.Контрагенты, 
//       СправочникСсылка.Проекты, ДокументСсылка.ВходящееПисьмо, ЗадачаСсылка.ЗадачаИсполнителя, ДокументСсылка.ИсходящееПисьмо, 
//       СправочникСсылка.Файлы, СправочникСсылка.ВходящиеДокументы, ДокументСсылка.Бронь, СправочникСсылка.ПланыРабот, СправочникСсылка.Сделки, 
//       ДокументСсылка.Отсутствие, СправочникСсылка.ВнутренниеДокументы, СправочникСсылка.ЗаметкиДокументооборота, СправочникСсылка.КонтрольныеТочки, 
//       СправочникСсылка.ИсходящиеДокументы, СправочникСсылка.Лиды, СправочникСсылка.Мероприятия, СправочникСсылка.КонтактныеЛица, 
//       СправочникСсылка.ПроектныеЗадачи 
// Сотрудник - СправочникСсылка.Сотрудники 
// ДатаНачала - дата-время, дата начала
// ДатаОкончания - дата-время, дата окончания
// ИдентификаторПриглашения - Строка, идентификатор 
// Описание -Строка 
// Наименование - Строка
// ЭтоОтменаПриглашения - Булево
//
Процедура ОбновитьЗаписьКалендаря(
	Предмет,
	Сотрудник, 
	ДатаНачала, 
	ДатаОкончания,
	ИдентификаторПриглашения,
	Описание, 
	Наименование,
	ЭтоОтменаПриглашения = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторПриглашения) Тогда			
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаписиРабочегоКалендаря.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Сотрудник = &Сотрудник
		|	И ЗаписиРабочегоКалендаря.ИдентификаторПриглашения = &ИдентификаторПриглашения";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ИдентификаторПриглашения", ИдентификаторПриглашения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	СсылкаЗаписи = Выборка.Ссылка;
	
	ЗаписьКалендаряОбъект = СсылкаЗаписи.ПолучитьОбъект();
	
	ЗаписьКалендаряОбъект.Предмет  = Предмет;
	
	ЗаписьКалендаряОбъект.ДатаНачала = ДатаНачала;
	ЗаписьКалендаряОбъект.ДатаОкончания = ДатаОкончания;
	
	ЗаписьКалендаряОбъект.Наименование = Наименование;
	ЗаписьКалендаряОбъект.Описание = Описание;
	
	ЗаписьКалендаряОбъект.ПометкаУдаления = ЭтоОтменаПриглашения;
	
	ЗаписьКалендаряОбъект.Записать();
	
КонецПроцедуры	

// Создает запись календаря
//
// Параметры:
// Предмет - СправочникСсылка.Контроль, ДокументСсылка.ЗаписьОРаботеСКонтрагентом, СправочникСсылка.Контрагенты, 
//       СправочникСсылка.Проекты, ДокументСсылка.ВходящееПисьмо, ЗадачаСсылка.ЗадачаИсполнителя, ДокументСсылка.ИсходящееПисьмо, 
//       СправочникСсылка.Файлы, СправочникСсылка.ВходящиеДокументы, ДокументСсылка.Бронь, СправочникСсылка.ПланыРабот, СправочникСсылка.Сделки, 
//       ДокументСсылка.Отсутствие, СправочникСсылка.ВнутренниеДокументы, СправочникСсылка.ЗаметкиДокументооборота, СправочникСсылка.КонтрольныеТочки, 
//       СправочникСсылка.ИсходящиеДокументы, СправочникСсылка.Лиды, СправочникСсылка.Мероприятия, СправочникСсылка.КонтактныеЛица, 
//       СправочникСсылка.ПроектныеЗадачи 
// Сотрудник - СправочникСсылка.Сотрудники 
// Описание - Строка, описание
// ДатаНачала - дата-время, дата начала
// ДатаОкончания - дата-время, дата окончания
// Наименование - Строка
// ИдентификаторПриглашения - Строка, идентификатор        
// Состояние - ПеречислениеСсылка.СостоянияЗаписейРабочегоКалендаря
// ПометкаУдаления - Булево  
//
// Возвращаемое значение:
//  	СправочникСсылка.ЗаписиРабочегоКалендаря
//
Функция СоздатьЗаписьКалендаряПоПредмету(Предмет, Сотрудник, Описание,
	ДатаНачала, ДатаОкончания, Наименование, ИдентификаторПриглашения,
	Состояние = Неопределено, ПометкаУдаления = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка

		ЗаписьКалендаряОбъект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
		
		ЗаписьКалендаряОбъект.Заполнить(Неопределено);
		
		ЗаписьКалендаряОбъект.Наименование = Наименование;
		ЗаписьКалендаряОбъект.Описание = Описание;
		ЗаписьКалендаряОбъект.Сотрудник = Сотрудник;
		ЗаписьКалендаряОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		ЗаписьКалендаряОбъект.Предмет  = Предмет;
		ЗаписьКалендаряОбъект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
		ЗаписьКалендаряОбъект.ДатаНачала = ДатаНачала;
		ЗаписьКалендаряОбъект.ДатаОкончания = ДатаОкончания;
		ЗаписьКалендаряОбъект.ИдентификаторПриглашения = ИдентификаторПриглашения;
		
		ЗаписьКалендаряОбъект.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;
		Если ЗначениеЗаполнено(Состояние) Тогда
			ЗаписьКалендаряОбъект.Состояние = Состояние;
		КонецЕсли;	
		Если ЗначениеЗаполнено(ПометкаУдаления) Тогда
			ЗаписьКалендаряОбъект.ПометкаУдаления = ПометкаУдаления;
		КонецЕсли;	
		
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет");
		ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("Цвет", ЦветКалендаря);
		ЗаписьКалендаряОбъект.Записать();
		
		ПодключитьНапоминаниеАвтоматически(ЗаписьКалендаряОбъект.Ссылка);

		ЗафиксироватьТранзакцию();
		
		Возврат ЗаписьКалендаряОбъект.Ссылка;
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// Формирует новую структуру данных записи календаря по предмету.
// 
// Возвращаемое значение:
//  Структура - Данные записи календаря по предмету:
//   * Предмет - СправочникСсылка.Мероприятия, ДокументСсылка.Отсутствие, Неопределено - Предмет.
//   * Описание - Строка.
//   * ДатаНачала - Дата.
//   * ДатаОкончания - Дата.
//   * ВесьДень - Булево.
//   * Сотрудник - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники, Неопределено - Сотрудник.
//   * Состояние - ПеречислениеСсылка.СостоянияЗаписейРабочегоКалендаря.
//   * Связанная - Булево.
//   * ПодключатьНапоминаниеАвтоматически - Булево.
//   * ОповещатьОбИзменении - Булево.
//  
Функция НовыйДанныеЗаписиКалендаряПоПредмету() Экспорт
	
	ДанныеЗаписиКалендаряПоПредмету = Новый Структура;
	ДанныеЗаписиКалендаряПоПредмету.Вставить("Предмет", Неопределено);
	ДанныеЗаписиКалендаряПоПредмету.Вставить("Описание", "");
	ДанныеЗаписиКалендаряПоПредмету.Вставить("ДатаНачала", Дата(1, 1, 1));
	ДанныеЗаписиКалендаряПоПредмету.Вставить("ДатаОкончания", Дата(1, 1, 1));
	ДанныеЗаписиКалендаряПоПредмету.Вставить("ВесьДень", Ложь);
	ДанныеЗаписиКалендаряПоПредмету.Вставить("Сотрудник", Неопределено);
	ДанныеЗаписиКалендаряПоПредмету.Вставить("Состояние",
		Перечисления.СостоянияЗаписейРабочегоКалендаря.ПустаяСсылка());
	ДанныеЗаписиКалендаряПоПредмету.Вставить("Связанная", Истина);
	ДанныеЗаписиКалендаряПоПредмету.Вставить("ПодключатьНапоминаниеАвтоматически", Ложь);
	ДанныеЗаписиКалендаряПоПредмету.Вставить("ОповещатьОбИзменении", Ложь);
	
	Возврат ДанныеЗаписиКалендаряПоПредмету;
	
КонецФункции

// Обновляет записи календаря по предмету.
// 
// Параметры:
//  Предмет - СправочникСсылка.Мероприятия, ДокументСсылка.Отсутствия.
//  ОтключитьОповещения - Булево.
//
Процедура ОбновитьЗаписиКалендаряПоПредмету(Предмет, ОтключитьОповещения) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь")
		Или ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		ДанныеКалендаряПоПредмету = Справочники.Мероприятия.ДанныеКалендаряПоПредмету(Предмет);
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.Отсутствие") Тогда
		
		ДанныеКалендаряПоПредмету = Документы.Отсутствие.ДанныеКалендаряПоПредмету(Предмет);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
			Предмет,
			ТипЗнч(Предмет));
		
	КонецЕсли;
	
	СвязанныеЗаписиКалендаря =
		Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(Предмет);
	
	ВсеСотрудникиПоДанным = Новый Соответствие;
	ДублиЗаписейКалендаря = Новый Массив;
	
	// Создание и изменение связанных записей календаря.
	Для Каждого ДанныеЗаписиКалендаряПоПредмету Из ДанныеКалендаряПоПредмету Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Сотрудник", ДанныеЗаписиКалендаряПоПредмету.Сотрудник);
		СтрокиСвязанныхЗаписейКалендаря = СвязанныеЗаписиКалендаря.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокиСвязанныхЗаписейКалендаря.Количество() = 0 Тогда
			
			ЗаписьКалендаряОбъект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
			ЗаписьКалендаряОбъект.Заполнить(ДанныеЗаписиКалендаряПоПредмету);
			ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи");
			Если ОтключитьОповещения Или Не ДанныеЗаписиКалендаряПоПредмету.ОповещатьОбИзменении Тогда
				ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьСобытиеУведомления");
			КонецЕсли;
			ЗаписьКалендаряОбъект.Записать();
			
			Если ДанныеЗаписиКалендаряПоПредмету.ПодключатьНапоминаниеАвтоматически Тогда
				ПодключитьНапоминаниеАвтоматически(ЗаписьКалендаряОбъект.Ссылка);
			КонецЕсли;
			
			Если ВсеСотрудникиПоДанным[ДанныеЗаписиКалендаряПоПредмету.Сотрудник] = Неопределено Тогда
				
				ВсеСотрудникиПоДанным[ДанныеЗаписиКалендаряПоПредмету.Сотрудник] = Истина;
				
				Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия")
					И Не ОтключитьОповещения
					И ДанныеЗаписиКалендаряПоПредмету.ОповещатьОбИзменении Тогда
					
					РаботаСУведомлениями.ОбработатьСобытиеУведомления(
						Предмет,
						Перечисления.СобытияУведомлений.МероприятияПриглашение,
						ПользователиДокументооборот.ОлицетворяемыйПользователь(),
						Новый ХранилищеЗначения(ДанныеЗаписиКалендаряПоПредмету.Сотрудник));
					
				КонецЕсли;
				
			Иначе
				
				ДублиЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаСвязаннойЗаписиКалендаря Из СтрокиСвязанныхЗаписейКалендаря Цикл
				
				ЗаписьКалендаряОбъект = СтрокаСвязаннойЗаписиКалендаря.Ссылка.ПолучитьОбъект();
				
				ЗаписьКалендаряИзменилась = Ложь;
				Для Каждого КлючИЗначение Из ДанныеЗаписиКалендаряПоПредмету Цикл
					
					ИмяРеквизита = КлючИЗначение.Ключ;
					ЗначениеРеквизита = КлючИЗначение.Значение;
					
					ЕстьРеквизитУЗаписиКалендаря =
						ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
							ЗаписьКалендаряОбъект,
							ИмяРеквизита);
					
					Если Не ЕстьРеквизитУЗаписиКалендаря Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаписьКалендаряИзменилась = ЗаписьКалендаряИзменилась
						Или ЗаписьКалендаряОбъект[ИмяРеквизита] <> ЗначениеРеквизита;
					
				КонецЦикла;
				
				ИзменилосьПриглашение =
					ДанныеЗаписиКалендаряПоПредмету.ДатаНачала <> ЗаписьКалендаряОбъект.ДатаНачала
					Или ДанныеЗаписиКалендаряПоПредмету.ДатаОкончания <> ЗаписьКалендаряОбъект.ДатаОкончания
					Или ДанныеЗаписиКалендаряПоПредмету.Описание <> ЗаписьКалендаряОбъект.Описание; 
				
				Если ЗаписьКалендаряИзменилась Тогда 
					ЗаписьКалендаряОбъект.Заполнить(ДанныеЗаписиКалендаряПоПредмету);
					ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи");
					ЗаписьКалендаряОбъект.Записать();
				КонецЕсли;
				
				Если ВсеСотрудникиПоДанным[ДанныеЗаписиКалендаряПоПредмету.Сотрудник] = Неопределено Тогда
					
					ВсеСотрудникиПоДанным[ДанныеЗаписиКалендаряПоПредмету.Сотрудник] = Истина;
					
					Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия")
						И ИзменилосьПриглашение
						И Не ОтключитьОповещения
						И ДанныеЗаписиКалендаряПоПредмету.ОповещатьОбИзменении Тогда
						
						РаботаСУведомлениями.ОбработатьСобытиеУведомления(
							Предмет,
							Перечисления.СобытияУведомлений.МероприятияИзменениеПриглашения,
							ПользователиДокументооборот.ОлицетворяемыйПользователь(),
							Новый ХранилищеЗначения(ДанныеЗаписиКалендаряПоПредмету.Сотрудник));
						
					КонецЕсли;
					
				Иначе
					
					ДублиЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление связанных записей календаря, по которым больше нет данных.
	Для Каждого СтрокаСвязаннойЗаписиКалендаря Из СвязанныеЗаписиКалендаря Цикл
		
		ЕстьДанныеПоСотруднику =
			ВсеСотрудникиПоДанным[СтрокаСвязаннойЗаписиКалендаря.Сотрудник] <> Неопределено;
		Если ЕстьДанныеПоСотруднику Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьКалендаряОбъект = СтрокаСвязаннойЗаписиКалендаря.Ссылка.ПолучитьОбъект();
		ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи");
		ЗаписьКалендаряОбъект.УстановитьПометкуУдаления(Истина);
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") И Не ОтключитьОповещения Тогда
			
			РаботаСУведомлениями.ОбработатьСобытиеУведомления(
				Предмет,
				Перечисления.СобытияУведомлений.МероприятияОтменаПриглашения,
				ПользователиДокументооборот.ОлицетворяемыйПользователь(),
				Новый ХранилищеЗначения(СтрокаСвязаннойЗаписиКалендаря.Сотрудник));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Дубли удаляем только в родном узле.
	Если Не КОДСервер.ОбъектЭтогоУзла(Предмет) Тогда
		
		ДублиЗаписейКалендаря.Очистить();
		
	КонецЕсли;
	
	// Удалим дубли записей календаря, которые могли возникнуть в разных узлах, без уведомления.
	Если ДублиЗаписейКалендаря.Количество() > 0 Тогда
		
		Для Каждого ДубльЗаписиКалендаря Из ДублиЗаписейКалендаря Цикл
			
			ЗаписьКалендаряОбъект = ДубльЗаписиКалендаря.ПолучитьОбъект();
			ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи");
			ЗаписьКалендаряОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обновляет пользовательские настройки рабочего календаря.
//
Процедура ОбновитьПользовательскиеНастройкиРабочегоКалендаря_3_0_7_16() Экспорт
	
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			// Перенос настроек из ОтображатьПолеПользователь в ОтображатьПолеСотрудник.
			
			Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"РабочийКалендарь",
				"ОтображатьПолеПользователь",,,
				Пользователь.Имя);
			
			Если Значение <> Неопределено Тогда
				
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
					"РабочийКалендарь",
					"ОтображатьПолеСотрудник",
					Значение,,
					Пользователь.Имя);
				
				ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
					"РабочийКалендарь",
					"ОтображатьПолеПользователь",
					Пользователь.Имя);
				
			КонецЕсли;
			
			// Замена пользователей на физ. лиц в настройке ТекущиеКалендариВсеКалендари
			
			Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"РабочийКалендарь",
				"ТекущиеКалендариВсеКалендари",,,
				Пользователь.Имя);
			
			Если Значение <> Неопределено Тогда
				
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
					"РабочийКалендарь",
					"ТекущиеКалендариВсеКалендари",
					ПользователиДокументооборот.ФизЛицаПользователей(Значение),,
					Пользователь.Имя); 
				
			КонецЕсли;
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет является ли запись календаря повторяющейся.
//
Функция ЭтоПовторяющеесяСобытие(ЗаписьКалендаря)
	
	Возврат ЗаписьКалендаря.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие;
	
КонецФункции

// Возвращает факт того что установлено напоминание.
//
Функция УстановленоНапоминание(ЗаписьКалендаря)
	
	Если ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		МассивЗаписейКалендаря = Новый Массив;
		МассивЗаписейКалендаря.Добавить(ЗаписьКалендаря);
	Иначе
		МассивЗаписейКалендаря = ЗаписьКалендаря;
	КонецЕсли;
	
	УстановленоНапоминание = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НЕ НапоминанияПользователя.Пользователь ЕСТЬ NULL КАК УстановленоНапоминание
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НапоминанияПользователя.Источник
		|			И (НапоминанияПользователя.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Ссылка В (&МассивЗаписейКалендаря)";
	
	Запрос.УстановитьПараметр("МассивЗаписейКалендаря", МассивЗаписейКалендаря);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.УстановленоНапоминание Тогда
			УстановленоНапоминание = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УстановленоНапоминание;
	
КонецФункции

// Формирует пустую таблицу событий.
//
Функция СформироватьТаблицуСобытий()
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("Ссылка");
	ТаблицаСобытий.Колонки.Добавить("Наименование");
	ТаблицаСобытий.Колонки.Добавить("ДатаНачала");
	ТаблицаСобытий.Колонки.Добавить("ДатаОкончания");
	ТаблицаСобытий.Колонки.Добавить("ВесьДень");
	ТаблицаСобытий.Колонки.Добавить("Цвет");
	ТаблицаСобытий.Колонки.Добавить("ПометкаУдаления");
	ТаблицаСобытий.Колонки.Добавить("ТипЗаписиКалендаря");
	ТаблицаСобытий.Колонки.Добавить("Состояние");
	ТаблицаСобытий.Колонки.Добавить("УстановленоНапоминание", Новый ОписаниеТипов("Булево"));
	ТаблицаСобытий.Колонки.Добавить("Сотрудник");
	ТаблицаСобытий.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаСобытий.Колонки.Добавить("Предмет");
	ТаблицаСобытий.Колонки.Добавить("Связанная");
	ТаблицаСобытий.Колонки.Добавить("Отработана", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Получает настройку отображения времени элементов.
//
// Возвращаемое значение:
//  ОтображениеВремениЭлементовПланировщика - Настройка отображения времени элементов
//
Функция ПолучитьНастройкуОтображениеВремениЭлементов()
	
	ОтображениеВремениЭлементов = ПолучитьПерсональнуюНастройку("ОтображениеВремениЭлементов");
	
	Если ОтображениеВремениЭлементов = Перечисления.ОтображениеВремениЭлементов.НеОтображать Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
	ИначеЕсли ОтображениеВремениЭлементов = Перечисления.ОтображениеВремениЭлементов.ВремяНачала Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачала;
	ИначеЕсли ОтображениеВремениЭлементов = Перечисления.ОтображениеВремениЭлементов.ВремяНачалаИКонца Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	Иначе
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	КонецЕсли;
	
	Возврат НастройкаОтображениеВремениЭлементов;
	
КонецФункции

// Загружает данные планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения)
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	Планировщик.НачалоПериодаОтображения = Неопределено;
	Планировщик.КонецПериодаОтображения = Неопределено;
	
	ПериодОтображения = РаботаСРабочимКалендаремКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = РаботаСРабочимКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	// События
	Если НастройкиОтображения.ОтображатьСобытия Тогда
		
		// Получение отображаемых данных
		ЗаписиКалендаряСНапоминаниями = ЗаписиКалендаряСНапоминаниямиТекущегоПользователя();
		СобытияПоЧасам = СформироватьТаблицуСобытий();
		Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
			ОтображаемаяДатаНачала =
				РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
					ПериодОтображения,
					ВыделеннаяДата);
			Если ЗначениеЗаполнено(Планировщик.НачалоПериодаОтображения) Тогда
				Планировщик.НачалоПериодаОтображения = Мин(
					Планировщик.НачалоПериодаОтображения,
					ОтображаемаяДатаНачала);
			Иначе
				Планировщик.НачалоПериодаОтображения = ОтображаемаяДатаНачала;
			КонецЕсли;
			
			ОтображаемаяДатаОкончания =
				РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
					ПериодОтображения,
					ВыделеннаяДата);
			Если ЗначениеЗаполнено(Планировщик.КонецПериодаОтображения) Тогда
				Планировщик.КонецПериодаОтображения = Мин(
					Планировщик.КонецПериодаОтображения,
					ОтображаемаяДатаОкончания);
			Иначе
				Планировщик.КонецПериодаОтображения = ОтображаемаяДатаОкончания;
			КонецЕсли;
			
			СобытияНаДату = ПолучитьТаблицуСобытий(
				ОтображаемаяДатаНачала,
				ОтображаемаяДатаОкончания,
				НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
				НастройкиОтображения.ФизЛица,
				НастройкиОтображения.ОтображатьОтклоненные,
				ЗаписиКалендаряСНапоминаниями);
			Для Каждого Событие Из СобытияНаДату Цикл
				НоваяСтрока = СобытияПоЧасам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
			КонецЦикла;
		КонецЦикла;
		
		// Заполнение элементов планировщика - События
		Для Каждого Событие Из СобытияПоЧасам Цикл
			СтруктурыЭлементовЗаписи = СтруктурыЭлементовЗаписи(
				Событие,
				НастройкиОтображения.ИспользоватьНапоминания,
				НастройкиОтображения.ОтключеноОтображениеВремени,
				НастройкиОтображения.ФизЛица);
			Для Каждого СтруктураЭлемента Из СтруктурыЭлементовЗаписи Цикл
				Элемент = Планировщик.Элементы.Добавить(Событие.ДатаНачала, Событие.ДатаОкончания);
				Элемент.Загрузить(СтруктураЭлемента);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Занятость
	Если НастройкиОтображения.ОтображатьЗанятость Тогда
		
		ТаблицаЗанятости = ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения);
		ТаблицаОбщейЗанятости = ПолучитьТаблицуОбщейЗанятостиПланировщика(ТаблицаЗанятости, НастройкиОтображения);
		
		// Заполнение элементов планировщика
		Если НастройкиОтображения.ОтображатьСобытия Тогда
			Для Каждого Занятость Из ТаблицаЗанятости Цикл
				ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(Занятость.ДатаНачала, Занятость.ДатаОкончания);
				ИнтервалФона.Цвет = ПолучитьЦветЗанятости(Занятость);
				РаботаСРабочимКалендаремКлиентСервер.УстановитьЗначениеИзмеренияИнтервалаФона(
					ИнтервалФона,
					"ФизическоеЛицо",
					Занятость.ФизическоеЛицо);
			КонецЦикла;
		Иначе
			
			Для Каждого Занятость Из ТаблицаЗанятости Цикл
				Если Занятость.Занят = Перечисления.СостоянияЗанятости.Доступен Тогда
					Продолжить;
				КонецЕсли;
				Элемент = Планировщик.Элементы.Добавить(Занятость.ДатаНачала, Занятость.ДатаОкончания);
				СтруктураЭлемента = ПолучитьСтруктуруЭлементаПланировщикаЗанятость(Занятость);
				Элемент.Загрузить(СтруктураЭлемента);
			КонецЦикла;
			
			Для Каждого Занятость Из ТаблицаОбщейЗанятости Цикл
				Если Занятость.Занят = Перечисления.СостоянияЗанятости.Доступен Тогда
					Продолжить;
				КонецЕсли;
				Элемент = Планировщик.Элементы.Добавить(Занятость.ДатаНачала, Занятость.ДатаОкончания);
				СтруктураЭлемента = ПолучитьСтруктуруЭлементаПланировщикаЗанятость(Занятость, "Общее");
				Элемент.Загрузить(СтруктураЭлемента);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу событий
Функция ПолучитьТаблицуСобытий(
	ОтображаемаяДатаНачала,
	ОтображаемаяДатаОкончания,
	ОтображатьПомеченныеНаУдаление,
	ФизЛица,
	ОтображатьОтклоненные,
	ЗаписиКалендаряСНапоминаниями,
	ЗаписиКалендаря = Неопределено)
	
	КалендариФизЛиц = КалендариФизЛиц(ФизЛица);
	
	// Для возможности добавления в дальнейшем ссылок на мероприятия не используется Выгрузить.
	ТаблицаСобытий = СформироватьТаблицуСобытий();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.Наименование,
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.ВесьДень,
		|	ВЫБОР
		|		КОГДА НЕ НастройкаЦвета.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА НастройкаЦвета.ЗначениеНастройки
		|		КОГДА НЕ НастройкаЦвета1.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА НастройкаЦвета1.ЗначениеНастройки
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.Нет)
		|	КОНЕЦ КАК Цвет,
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.Состояние,
		|	ЗаписиРабочегоКалендаря.Сотрудник,
		|	ЕСТЬNULL(Сотрудники.Владелец, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизическоеЛицо,
		|	ЗаписиРабочегоКалендаря.Предмет,
		|	ЗаписиРабочегоКалендаря.Связанная,
		|	ВЫБОР
		|		КОГДА НЕ ОтработаныЗаписи.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА ОтработаныЗаписи.ЗначениеНастройки
		|		КОГДА НЕ ОтработаныЗаписи1.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА ОтработаныЗаписи1.ЗначениеНастройки
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Отработана
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ЗаписиРабочегоКалендаря.Сотрудник = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкаЦвета
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета.Событие
		|		И (НастройкаЦвета.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|		И (НастройкаЦвета.ФизическоеЛицо = &ФизЛицоПользователя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаряПользователя КАК НастройкаЦвета1
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета1.Событие
		|		И (НастройкаЦвета1.Пользователь = &ТекущийПользователь)
		|		И (НастройкаЦвета1.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК ОтработаныЗаписи
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = ОтработаныЗаписи.Событие
		|		И (ОтработаныЗаписи.ФизическоеЛицо = &ФизЛицоПользователя)
		|		И (ОтработаныЗаписи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Отработана))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаряПользователя КАК ОтработаныЗаписи1
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = ОтработаныЗаписи1.Событие
		|		И (ОтработаныЗаписи1.Пользователь = &ТекущийПользователь)
		|		И (ОтработаныЗаписи1.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Отработана))
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.ДатаОкончания > &ДатаНачала
		|	И ЗаписиРабочегоКалендаря.ДатаНачала < &ДатаОкончания
		|	И ЗаписиРабочегоКалендаря.Сотрудник В (&КалендариФизЛиц)
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря <> ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И ЗаписиРабочегоКалендаря.Ссылка В (&ЗаписиКалендаря)
		|	И ЗаписиРабочегоКалендаря.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Отклонено)";
	
	Если Не ОтображатьПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Если ОтображатьОтклоненные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И ЗаписиРабочегоКалендаря.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Отклонено)", "");
	КонецЕсли;
	
	Если ЗаписиКалендаря <> Неопределено Тогда
		Запрос.УстановитьПараметр("ЗаписиКалендаря", ЗаписиКалендаря);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И ЗаписиРабочегоКалендаря.Ссылка В (&ЗаписиКалендаря)", "");
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", ОтображаемаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ОтображаемаяДатаОкончания);
	Запрос.УстановитьПараметр("КалендариФизЛиц", КалендариФизЛиц);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ФизЛицоПользователя", ПараметрыСеанса.ФизическоеЛицоПользователя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.Связанная
			И Не Выборка.ВесьДень
			И (ТипЗнч(Выборка.Предмет) = Тип("СправочникСсылка.Мероприятия")
				Или ТипЗнч(Выборка.Предмет) = Тип("ДокументСсылка.Отсутствие")) Тогда
			
			НоваяСтрока.ДатаНачала = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(Выборка.ДатаНачала);
			НоваяСтрока.ДатаОкончания = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(Выборка.ДатаОкончания);
			
			ПредставлениеМестногоЧасовогоПояса = РаботаСЧасовымиПоясами.ПредставлениеМестногоЧасовогоПояса();
			Если ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса) Тогда
				НоваяСтрока.Наименование = НоваяСтрока.Наименование + ", " + ПредставлениеМестногоЧасовогоПояса;
			КонецЕсли;
			
		ИначеЕсли Не Выборка.Связанная И Не Выборка.ВесьДень Тогда
			
			ПользовательСотрудника = Сотрудники.ПользовательСотрудника(Выборка.Сотрудник);
			
			Если ЗначениеЗаполнено(ПользовательСотрудника) Тогда
			
				НоваяСтрока.ДатаНачала = 
					РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(
						РаботаСЧасовымиПоясами.ПривестиМестноеВремяПользователяКВремениСеанса(
							Выборка.ДатаНачала,
							ПользовательСотрудника));
				НоваяСтрока.ДатаОкончания = 
					РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(
						РаботаСЧасовымиПоясами.ПривестиМестноеВремяПользователяКВремениСеанса(
							Выборка.ДатаОкончания,
							ПользовательСотрудника));
				
			КонецЕсли;
			
			ПредставлениеМестногоЧасовогоПояса = РаботаСЧасовымиПоясами.ПредставлениеМестногоЧасовогоПояса();
			Если ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса) Тогда
				НоваяСтрока.Наименование = НоваяСтрока.Наименование + ", " + ПредставлениеМестногоЧасовогоПояса;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВТаблицуСобытийПовторяющиесяСобытия(
		ТаблицаСобытий,
		ОтображаемаяДатаНачала,
		ОтображаемаяДатаОкончания,
		КалендариФизЛиц,
		ОтображатьОтклоненные,
		ЗаписиКалендаря);
	
	Для Каждого СтрокаСобытия Из ТаблицаСобытий Цикл
		СтрокаСобытия.УстановленоНапоминание = ЗаписиКалендаряСНапоминаниями[СтрокаСобытия.Ссылка] = Истина;
	КонецЦикла;
	
	ТаблицаСобытий.Сортировать("ДатаНачала");
	
	// Скроем удаленную работу.
	СкрытьОтсутствияБудуРазбиратьЗадачи = ПолучитьПерсональнуюНастройку("СкрытьОтсутствияБудуРазбиратьЗадачи");
	Если СкрытьОтсутствияБудуРазбиратьЗадачи Тогда
		
		// Определим связанные отсутствия.
		СвязанныеОтсутствия = Новый Массив;
		СтрокиОтсутствий = Новый Соответствие;
		Для Каждого СтрокаСобытия Из ТаблицаСобытий Цикл
			
			Если ТипЗнч(СтрокаСобытия.Предмет) <> Тип("ДокументСсылка.Отсутствие")
				Или СтрокаСобытия.Связанная = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СвязанныеОтсутствия.Добавить(СтрокаСобытия.Предмет);
			СтрокиОтсутствий.Вставить(СтрокаСобытия.Предмет, СтрокаСобытия);
			
		КонецЦикла;
		
		ПризнакиБудуРазбиратьЗадачи =
			ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СвязанныеОтсутствия, "БудуРазбиратьЗадачи");
		Для Каждого Отсутствие Из СвязанныеОтсутствия Цикл
			
			ПризнакБудуРазбиратьЗадачи = ПризнакиБудуРазбиратьЗадачи[Отсутствие];
			Если ПризнакБудуРазбиратьЗадачи <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСобытия = СтрокиОтсутствий[Отсутствие];
			
			ТаблицаСобытий.Удалить(СтрокаСобытия);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Включает в таблицу событий повторяющиеся события
Процедура ДобавитьВТаблицуСобытийПовторяющиесяСобытия(
	ТаблицаСобытий,
	ОтображаемаяДатаНачала,
	ОтображаемаяДатаОкончания,
	КалендариФизЛиц,
	ОтображатьОтклоненные,
	ЗаписиКалендаря)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.Наименование,
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.ВесьДень,
		|	ВЫБОР
		|		КОГДА НЕ НастройкаЦвета.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА НастройкаЦвета.ЗначениеНастройки
		|		КОГДА НЕ НастройкаЦвета1.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА НастройкаЦвета1.ЗначениеНастройки
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.Нет)
		|	КОНЕЦ КАК Цвет,
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
		|		ДатаИсключения,
		|		ЗаписьИсключения) КАК ИсключенияПовторения,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
		|		ДеньНедели,
		|		НомерВхождения) КАК ПовторениеПоДням,
		|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения,
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ИнтервалПовторения,
		|	ЗаписиРабочегоКалендаря.КоличествоПовторов,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам,
		|	ЗаписиРабочегоКалендаря.ЧастотаПовторения,
		|	ЗаписиРабочегоКалендаря.Состояние,
		|	ЗаписиРабочегоКалендаря.Сотрудник,
		|	ЕСТЬNULL(Сотрудники.Владелец, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизическоеЛицо,
		|	ЗаписиРабочегоКалендаря.Предмет,
		|	ЗаписиРабочегоКалендаря.Связанная,
		|	ВЫБОР
		|		КОГДА НЕ ОтработаныЗаписи.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА ОтработаныЗаписи.ЗначениеНастройки
		|		КОГДА НЕ ОтработаныЗаписи1.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА ОтработаныЗаписи1.ЗначениеНастройки
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Отработана
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ЗаписиРабочегоКалендаря.Сотрудник = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкаЦвета
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета.Событие
		|		И (НастройкаЦвета.ФизическоеЛицо = &ФизЛицоПользователя)
		|		И (НастройкаЦвета.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаряПользователя КАК НастройкаЦвета1
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета1.Событие
		|		И (НастройкаЦвета1.Пользователь = &ТекущийПользователь)
		|		И (НастройкаЦвета1.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК ОтработаныЗаписи
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = ОтработаныЗаписи.Событие
		|		И (ОтработаныЗаписи.ФизическоеЛицо = &ФизЛицоПользователя)
		|		И (ОтработаныЗаписи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Отработана))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаряПользователя КАК ОтработаныЗаписи1
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = ОтработаныЗаписи1.Событие
		|		И (ОтработаныЗаписи1.Пользователь = &ТекущийПользователь)
		|		И (ОтработаныЗаписи1.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Отработана))
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения >= &ДатаНачала
		|	И ЗаписиРабочегоКалендаря.ДатаНачалаПовторения < &ДатаОкончания
		|	И ЗаписиРабочегоКалендаря.Сотрудник В (&КалендариФизЛиц)
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И ЗаписиРабочегоКалендаря.Ссылка В (&ЗаписиКалендаря)
		|	И ЗаписиРабочегоКалендаря.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Отклонено)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.Наименование,
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.ВесьДень,
		|	ВЫБОР
		|		КОГДА НЕ НастройкаЦвета.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА НастройкаЦвета.ЗначениеНастройки
		|		КОГДА НЕ НастройкаЦвета1.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА НастройкаЦвета1.ЗначениеНастройки
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.Нет)
		|	КОНЕЦ,
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
		|		ДатаИсключения,
		|		ЗаписьИсключения),
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
		|		ДеньНедели,
		|		НомерВхождения),
		|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения,
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ИнтервалПовторения,
		|	ЗаписиРабочегоКалендаря.КоличествоПовторов,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам,
		|	ЗаписиРабочегоКалендаря.ЧастотаПовторения,
		|	ЗаписиРабочегоКалендаря.Состояние,
		|	ЗаписиРабочегоКалендаря.Сотрудник,
		|	ЕСТЬNULL(Сотрудники.Владелец, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизическоеЛицо,
		|	ЗаписиРабочегоКалендаря.Предмет,
		|	ЗаписиРабочегоКалендаря.Связанная,
		|	ВЫБОР
		|		КОГДА НЕ ОтработаныЗаписи.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА ОтработаныЗаписи.ЗначениеНастройки
		|		КОГДА НЕ ОтработаныЗаписи1.ЗначениеНастройки ЕСТЬ NULL
		|			ТОГДА ОтработаныЗаписи1.ЗначениеНастройки
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ЗаписиРабочегоКалендаря.Сотрудник = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкаЦвета
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета.Событие
		|		И (НастройкаЦвета.ФизическоеЛицо = &ФизЛицоПользователя)
		|		И (НастройкаЦвета.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаряПользователя КАК НастройкаЦвета1
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета1.Событие
		|		И (НастройкаЦвета1.Пользователь = &ТекущийПользователь)
		|		И (НастройкаЦвета1.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК ОтработаныЗаписи
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = ОтработаныЗаписи.Событие
		|		И (ОтработаныЗаписи.ФизическоеЛицо = &ФизЛицоПользователя)
		|		И (ОтработаныЗаписи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Отработана))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаряПользователя КАК ОтработаныЗаписи1
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = ОтработаныЗаписи1.Событие
		|		И (ОтработаныЗаписи1.Пользователь = &ТекущийПользователь)
		|		И (ОтработаныЗаписи1.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Отработана))
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗаписиРабочегоКалендаря.ДатаНачалаПовторения < &ДатаОкончания
		|	И ЗаписиРабочегоКалендаря.Сотрудник В (&КалендариФизЛиц)
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И ЗаписиРабочегоКалендаря.Ссылка В (&ЗаписиКалендаря)
		|	И ЗаписиРабочегоКалендаря.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Отклонено)";
	
	Если ОтображатьОтклоненные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И ЗаписиРабочегоКалендаря.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Отклонено)", "");
	КонецЕсли;
	
	Если ЗаписиКалендаря <> Неопределено Тогда
		Запрос.УстановитьПараметр("ЗаписиКалендаря", ЗаписиКалендаря);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаписиРабочегоКалендаря.Ссылка В (&ЗаписиКалендаря)", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ОтображаемаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ОтображаемаяДатаОкончания);
	Запрос.УстановитьПараметр("КалендариФизЛиц", КалендариФизЛиц);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ФизЛицоПользователя", ПараметрыСеанса.ФизическоеЛицоПользователя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЗаполнитьТаблицуПовторяющимисяСобытиями(
		ТаблицаСобытий,
		Выборка,
		ОтображаемаяДатаНачала,
		ОтображаемаяДатаОкончания);
	
КонецПроцедуры

// Проверяет подходит ли дата под правило повторения по интервалам
Функция УдовлетворяетПравилуИнтервалаПовторения(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно Тогда
		
		ПроверяемыйИнтервалВремя =
			НачалоДня(ПроверяемаяДата) - НачалоДня(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала = ПроверяемыйИнтервалВремя / 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		
		ПроверяемыйИнтервалВремя =
			НачалоНедели(ПроверяемаяДата) - НачалоНедели(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала = ПроверяемыйИнтервалВремя / 604800; // 604800 - число секунд в неделе
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		КоличествоЛетИнтервала =
			Год(ПроверяемаяДата) - Год(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала =
			Месяц(ПроверяемаяДата) - Месяц(СтруктураПравилаПовторения.ДатаНачалаПовторения) + КоличествоЛетИнтервала * 12;
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		НомерПериодаИнтервала =
			Год(ПроверяемаяДата) - Год(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НомерПериодаИнтервала % СтруктураПравилаПовторения.ИнтервалПовторения = 0;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по дням
Функция УдовлетворяетПравилуПовторенияПоДням(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		
		Для Каждого ПовторениеПоДнямСтрока Из СтруктураПравилаПовторения.ПовторениеПоДням Цикл
			
			Если ПовторениеПоДнямСтрока.НомерВхождения <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПовторениеПоДнямСтрока.ДеньНедели = ДеньНедели(ПроверяемаяДата) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		Если ЗначениеЗаполнено(СтруктураПравилаПовторения.ПовторениеПоДнямМесяца) Тогда
			Возврат Истина;
		Иначе
			
			Если СтруктураПравилаПовторения.ПовторениеПоДням.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Для Каждого ПовторениеПоДнямСтрока Из СтруктураПравилаПовторения.ПовторениеПоДням Цикл
				
				Если ПовторениеПоДнямСтрока.НомерВхождения = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПроверяемаяДатаДеньНеделиВМесяце = 
					РаботаСРабочимКалендаремКлиентСервер.ПолучитьДеньНеделиВМесяце(ПроверяемаяДата);
				ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего = 
					РаботаСРабочимКалендаремКлиентСервер.ПолучитьДеньНеделиВМесяце(ПроверяемаяДата, Ложь);
				
				Если (ПовторениеПоДнямСтрока.ДеньНедели = ПроверяемаяДатаДеньНеделиВМесяце.ДеньНедели
						И ПовторениеПоДнямСтрока.НомерВхождения = ПроверяемаяДатаДеньНеделиВМесяце.НомерВхождения)
					ИЛИ (ПовторениеПоДнямСтрока.ДеньНедели = ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего.ДеньНедели
						И ПовторениеПоДнямСтрока.НомерВхождения = ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего.НомерВхождения) Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		Если ЗначениеЗаполнено(СтруктураПравилаПовторения.ПовторениеПоДнямМесяца) Тогда
			Возврат Истина;
		Иначе
			
			Если СтруктураПравилаПовторения.ПовторениеПоДням.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Для Каждого ПовторениеПоДнямСтрока Из СтруктураПравилаПовторения.ПовторениеПоДням Цикл
				
				Если ПовторениеПоДнямСтрока.НомерВхождения = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПроверяемаяДатаДеньНеделиВМесяце = 
					РаботаСРабочимКалендаремКлиентСервер.ПолучитьДеньНеделиВМесяце(ПроверяемаяДата);
				ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего = 
					РаботаСРабочимКалендаремКлиентСервер.ПолучитьДеньНеделиВМесяце(ПроверяемаяДата, Ложь);
				
				Если (ПовторениеПоДнямСтрока.ДеньНедели = ПроверяемаяДатаДеньНеделиВМесяце.ДеньНедели
						И ПовторениеПоДнямСтрока.НомерВхождения = ПроверяемаяДатаДеньНеделиВМесяце.НомерВхождения)
					Или (ПовторениеПоДнямСтрока.ДеньНедели = ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего.ДеньНедели
						И ПовторениеПоДнямСтрока.НомерВхождения = ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего.НомерВхождения) Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по дням месяца
Функция УдовлетворяетПравилуПовторенияПоДнямМесяца(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		Если Не ЗначениеЗаполнено(СтруктураПравилаПовторения.ПовторениеПоДнямМесяца) Тогда
			Возврат Истина;
		КонецЕсли;
		
		МассивПовторениеПоДнямМесяца =
			РаботаСРабочимКалендаремКлиентСервер.ЧислоПовторениеПоДнямМесяцаВМассив(
				СтруктураПравилаПовторения.ПовторениеПоДнямМесяца);
		Если МассивПовторениеПоДнямМесяца.Найти(День(ПроверяемаяДата)) <> Неопределено  Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		Если Не ЗначениеЗаполнено(СтруктураПравилаПовторения.ПовторениеПоДнямМесяца) Тогда
			Возврат Истина;
		КонецЕсли;
		
		МассивПовторениеПоДнямМесяца =
			РаботаСРабочимКалендаремКлиентСервер.ЧислоПовторениеПоДнямМесяцаВМассив(
				СтруктураПравилаПовторения.ПовторениеПоДнямМесяца);
		Если МассивПовторениеПоДнямМесяца.Найти(День(ПроверяемаяДата)) <> Неопределено  Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по месяцам
Функция УдовлетворяетПравилуПовторенияПоМесяцам(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		МассивПовторениеПоМесяцам =
			РаботаСРабочимКалендаремКлиентСервер.ЧислоПовторениеПоМесяцамВМассив(
				СтруктураПравилаПовторения.ПовторениеПоМесяцам);
		Если МассивПовторениеПоМесяцам.Найти(Месяц(ПроверяемаяДата)) <> Неопределено  Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет является ли дата исключением
Функция ЯвляетсяИсключениемПовторения(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаИсключения", НачалоДня(ПроверяемаяДата));
	НайденныеСтроки = СтруктураПравилаПовторения.ИсключенияПовторения.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Формирует текстовое описание события
Функция СформироватьТекстовоеОписаниеСобытия(Событие, ВключатьВремяВОписание, ОтображатьФизЛицо)
	
	Описание = Новый Массив;
	
	Если Событие.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом Тогда
		Описание.Добавить("?");
	ИначеЕсли Событие.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		Описание.Добавить("-");
	КонецЕсли;
	
	Если ВключатьВремяВОписание Тогда
		Описание.Добавить(СтрШаблон("%1 - %2",
			Формат(Событие.ДатаНачала, "ДФ=ЧЧ:мм"),
			Формат(Событие.ДатаОкончания, "ДФ=ЧЧ:мм")));
	КонецЕсли;
	
	Если ОтображатьФизЛицо Тогда
		Описание.Добавить(СтрШаблон("%1,", Событие.Сотрудник));
	КонецЕсли;
	
	Описание.Добавить(Событие.Наименование);
	
	Возврат СтрСоединить(Описание, " ");
	
КонецФункции

// Вспомогательная функция расчета доступности по полному алгоритму
Процедура РассчитатьДоступностьПоПолномуАлгоритму(
	ТаблицаДоступности, ТаблицаЗанятости, ФизЛицо, ДатаНачала, ДатаОкончания)
	
	НачалоДняИтерации = НачалоДня(ДатаНачала);
	КонецДняПоследнейИтерации = КонецДня(ДатаОкончания);
	Пока НачалоДняИтерации < КонецДняПоследнейИтерации Цикл
		
		ПараметрыОтбора = Новый Структура("ФизическоеЛицо, ДеньНедели");
		ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
		ПараметрыОтбора.ДеньНедели = ДеньНедели(НачалоДняИтерации);
		ДоступностьДняИтерации = ТаблицаДоступности.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаДоступностьДняИтерации Из ДоступностьДняИтерации Цикл
			
			ВремяНачалаСтроки = СтрокаДоступностьДняИтерации.ВремяНачала;
			ВремяОкончанияСтроки = СтрокаДоступностьДняИтерации.ВремяОкончания;
			Если ВремяОкончанияСтроки = Дата("00010101235959") Тогда
				ВремяОкончанияСтроки = Дата("00010102000000");
			КонецЕсли;
			
			ДатаНачалаСтроки = НачалоДняИтерации + (ВремяНачалаСтроки - НачалоДня(ВремяНачалаСтроки));
			ДатаОкончанияСтроки = НачалоДняИтерации + (ВремяОкончанияСтроки - НачалоДня(ВремяНачалаСтроки));
			Занят = СтрокаДоступностьДняИтерации.Занят;
			
			ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, ФизЛицо,
				ДатаНачалаСтроки, ДатаОкончанияСтроки, Занят, ДатаНачала, ДатаОкончания);
			
		КонецЦикла;
		
		НачалоДняИтерации = НачалоДняИтерации + 86400; // 86400 - число секунд в сутках
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная функция расчета доступности по краткому алгоритму
Процедура РассчитатьДоступностьПоКраткомуАлгоритму(
	ТаблицаДоступности, ФизЛицо, ТаблицаЗанятости,
	ЗанятостьСотрудника, ДатаНачала, ДатаОкончания)
	
	ТаблицаЗанятостиВременная = СформироватьТаблицуЗанятости();
	
	НачалоДняИтерации = НачалоДня(ДатаНачала);
	КонецДняПоследнейИтерации = КонецДня(ДатаОкончания);
	Пока НачалоДняИтерации < КонецДняПоследнейИтерации Цикл
		
		ТаблицаЗанятостиВременная.Очистить();
		
		ПараметрыОтбора = Новый Структура("ФизическоеЛицо, ДеньНедели");
		ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
		ПараметрыОтбора.ДеньНедели = ДеньНедели(НачалоДняИтерации);
		ДоступностьДняИтерации = ТаблицаДоступности.НайтиСтроки(ПараметрыОтбора);
		
		ДатаНачалаТаблицыЗанятости = Макс(ДатаНачала, НачалоДня(НачалоДняИтерации));
		ДатаОкончанияТаблицыЗанятости = Мин(ДатаОкончания, КонецДня(НачалоДняИтерации));
		НоваяСтрока = ТаблицаЗанятостиВременная.Добавить();
		НоваяСтрока.ФизическоеЛицо = ФизЛицо;
		НоваяСтрока.ДатаНачала = ДатаНачалаТаблицыЗанятости;
		НоваяСтрока.ДатаОкончания = ДатаОкончанияТаблицыЗанятости;
		НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Занят;
		
		Для Каждого СтрокаДоступностьДняИтерации Из ДоступностьДняИтерации Цикл
			
			ВремяНачалаСтроки = СтрокаДоступностьДняИтерации.ВремяНачала;
			ВремяОкончанияСтроки = СтрокаДоступностьДняИтерации.ВремяОкончания;
			Если ВремяОкончанияСтроки = Дата("00010101235959") Тогда
				ВремяОкончанияСтроки = Дата("00010102000000");
			КонецЕсли;
			
			ДатаНачалаСтроки = НачалоДняИтерации + (ВремяНачалаСтроки - НачалоДня(ВремяНачалаСтроки));
			ДатаОкончанияСтроки = НачалоДняИтерации + (ВремяОкончанияСтроки - НачалоДня(ВремяНачалаСтроки));
			
			ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятостиВременная, ФизЛицо,
				ДатаНачалаСтроки, ДатаОкончанияСтроки, СтрокаДоступностьДняИтерации.Занят,
				ДатаНачалаТаблицыЗанятости, ДатаОкончанияТаблицыЗанятости);
			
		КонецЦикла;
		
		ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятостиВременная, ТаблицаЗанятости,
			ФизЛицо, ДатаНачалаТаблицыЗанятости, ДатаОкончанияТаблицыЗанятости,
			Перечисления.СостоянияЗанятости.Доступен);
		
		// Проверка наличия строки с занятым временем в итоговой временной таблице занятости.
		ПараметрыОтбора = Новый Структура("Занят");
		ПараметрыОтбора.Занят = Перечисления.СостоянияЗанятости.Занят;
		КоличествоСтрокЗанятогоВремени = ТаблицаЗанятостиВременная.НайтиСтроки(ПараметрыОтбора).Количество();
		Если КоличествоСтрокЗанятогоВремени <> 0 Тогда
			ЗанятостьСотрудника = Перечисления.СостоянияЗанятости.Занят;
			Возврат;
		КонецЕсли;
		
		НачалоДняИтерации = НачалоДняИтерации + 86400; // 86400 - число секунд в сутках
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная функция расчета занятости по краткому алгоритму
Функция РассчитатьЗанятостьПоКраткомуАлгоритму(ТаблицаЗанятости, ФизЛицо, ЗанятостьСотрудника)
	
	РасчетЗанятостиЗавершен = Ложь;
	
	// Учитывается что отсутствует занятость может быть установлена только у отсутствий.
	ИтоговаяЗанятостьСотрудника = ПолучитьИтоговуюЗанятость(ТаблицаЗанятости, ФизЛицо);
	Если ИтоговаяЗанятостьСотрудника = Перечисления.СостоянияЗанятости.Отсутствует Тогда
		ЗанятостьСотрудника = Перечисления.СостоянияЗанятости.Отсутствует;
		РасчетЗанятостиЗавершен = Истина;
	ИначеЕсли ИтоговаяЗанятостьСотрудника = Перечисления.СостоянияЗанятости.Занят Тогда
		ЗанятостьСотрудника = Перечисления.СостоянияЗанятости.Занят;
		РасчетЗанятостиЗавершен = Истина;
	ИначеЕсли ИтоговаяЗанятостьСотрудника = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
		ЗанятостьСотрудника = Перечисления.СостоянияЗанятости.ПодВопросом;
	КонецЕсли;
	
	Возврат РасчетЗанятостиЗавершен;
	
КонецФункции

// Возвращает итоговую занятость по таблице занятости
Функция ПолучитьИтоговуюЗанятость(ТаблицаЗанятости, ФизЛицо)
	
	ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.Доступен;
	
	// Учитывается что отсутствует занятость может быть установлена только у отсутствий.
	ПараметрыОтбора = Новый Структура("ФизическоеЛицо");
	ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
	МассивЗанятостиСотрудников = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаЗанятостиСотрудника Из МассивЗанятостиСотрудников Цикл
		Если СтрокаЗанятостиСотрудника.Занят = Перечисления.СостоянияЗанятости.Отсутствует Тогда
			ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.Отсутствует;
			Прервать;
		ИначеЕсли СтрокаЗанятостиСотрудника.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
			ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.Занят;
			Прервать;
		ИначеЕсли СтрокаЗанятостиСотрудника.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
			ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.ПодВопросом;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговаяЗанятость;
	
КонецФункции

// Вносит занятости из таблицы в таблицу занятости
Процедура ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятости, ТаблицаЗанятостиИсточник,
	ФизЛицо, ДатаНачала, ДатаОкончания, Занят = Неопределено)
	
	Если Занят <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура("ФизическоеЛицо, Занят");
		ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
		ПараметрыОтбора.Занят = Занят;
	Иначе
		ПараметрыОтбора = Новый Структура("ФизическоеЛицо");
		ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
	КонецЕсли;
	
	МассивЗанятостиСотрудника = ТаблицаЗанятостиИсточник.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаЗанятостиСотрудника Из МассивЗанятостиСотрудника Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, ФизЛицо,
			СтрокаЗанятостиСотрудника.ДатаНачала, СтрокаЗанятостиСотрудника.ДатаОкончания,
			СтрокаЗанятостиСотрудника.Занят, ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
КонецПроцедуры

// Вносит занятость в таблицу занятости
Процедура ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости,
	ФизЛицо, Знач ДатаНачала, Знач ДатаОкончания, Занят, ДатаНачалаТаблицы, ДатаОкончанияТаблицы)
	
	Если ДатаОкончания <= ДатаНачалаТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала >= ДатаОкончанияТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала < ДатаНачалаТаблицы Тогда
		ДатаНачала = ДатаНачалаТаблицы;
	КонецЕсли;
	
	Если ДатаОкончания > ДатаОкончанияТаблицы Тогда
		ДатаОкончания = ДатаОкончанияТаблицы;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ФизическоеЛицо");
	ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
	МассивЗанятости = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаЗанятости Из МассивЗанятости Цикл
		
		// Разбиваем существующие строки занятости
		Если СтрокаЗанятости.ДатаНачала < ДатаОкончания
			И СтрокаЗанятости.ДатаОкончания > ДатаНачала
			И СтрокаЗанятости.Занят <> Занят Тогда
			
			Если СтрокаЗанятости.ДатаНачала < ДатаНачала Тогда
				СтрокаЗанятостиПерваяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиПерваяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиПерваяЧасть.ДатаОкончания = ДатаНачала;
			КонецЕсли;
			
			Если СтрокаЗанятости.ДатаОкончания > ДатаОкончания Тогда
				СтрокаЗанятостиВтораяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиВтораяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиВтораяЧасть.ДатаНачала = ДатаОкончания;
			КонецЕсли;
			
			СтрокиКУдалению.Добавить(СтрокаЗанятости);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаЗанятости.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	НоваяСтрока = ТаблицаЗанятости.Добавить();
	НоваяСтрока.ФизическоеЛицо = ФизЛицо;
	НоваяСтрока.ДатаНачала = ДатаНачала;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
	НоваяСтрока.Занят = Занят;
	
	СкорректироватьТаблицуЗанятости(ТаблицаЗанятости);
	
КонецПроцедуры

// Корректирует дубли и пересечение в таблице занятости
Процедура СкорректироватьТаблицуЗанятости(ТаблицаЗанятости)
	
	ТребуетсяВнестиКоррективы = Истина;
	
	Пока ТребуетсяВнестиКоррективы Цикл
		
		ТребуетсяВнестиКоррективы = Ложь;
		
		ТаблицаЗанятостиКопия = ТаблицаЗанятости.Скопировать();
		
		ТаблицаЗанятости.Очистить();
		
		Для Каждого СтрокаЗанятости Из ТаблицаЗанятостиКопия Цикл
			
			ВнестиЗаписьВТаблицуЗанятости = Истина;
			
			Для Каждого ВнесеннаяСтрокаЗанятости Из ТаблицаЗанятости Цикл
				
				Если ЗанятостиСовпадают(СтрокаЗанятости, ВнесеннаяСтрокаЗанятости) Тогда
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
				КонецЕсли;
				
				Если СтрокаЗанятости.ФизическоеЛицо = ВнесеннаяСтрокаЗанятости.ФизическоеЛицо
					И СтрокаЗанятости.ДатаНачала <= ВнесеннаяСтрокаЗанятости.ДатаОкончания
					И СтрокаЗанятости.ДатаОкончания >= ВнесеннаяСтрокаЗанятости.ДатаНачала
					И СтрокаЗанятости.Занят = ВнесеннаяСтрокаЗанятости.Занят Тогда
					
					ВнесеннаяСтрокаЗанятости.ДатаНачала = Мин(ВнесеннаяСтрокаЗанятости.ДатаНачала, СтрокаЗанятости.ДатаНачала);
					ВнесеннаяСтрокаЗанятости.ДатаОкончания = Макс(ВнесеннаяСтрокаЗанятости.ДатаОкончания, СтрокаЗанятости.ДатаОкончания);
					
					ТребуетсяВнестиКоррективы = Истина;
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ВнестиЗаписьВТаблицуЗанятости Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗанятости);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗанятости.Сортировать("ФизическоеЛицо, ДатаНачала");
	
КонецПроцедуры

// Проверяет совпадение строк занятости
Функция ЗанятостиСовпадают(Занятость1, Занятость2)
	
	Возврат Занятость1.ФизическоеЛицо = Занятость2.ФизическоеЛицо
		И Занятость1.ДатаНачала = Занятость2.ДатаНачала
		И Занятость1.ДатаОкончания = Занятость2.ДатаОкончания
		И Занятость1.Занят = Занятость2.Занят;
	
КонецФункции

// Добавляет ссылку в историю работы пользователя.
//
Процедура ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаря)
	
	ТипПараметра = ТипЗнч(ЗаписьКалендаря);
	Если ТипПараметра = Тип("СправочникОбъект.ЗаписиРабочегоКалендаря")
		Или ТипПараметра = Тип("ДокументОбъект.Отсутствие") Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаписьКалендаря.Ссылка);
	ИначеЕсли ТипПараметра = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря")
		Или ТипПараметра = Тип("ДокументСсылка.Отсутствие") Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаписьКалендаря);
	КонецЕсли;
	ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	
КонецПроцедуры

// Устанавливает значение измерения элемента планировщика.
//
// Параметры:
//  Элемент - ЭлементПланировщика - Элемент планировщика.
//  Измерение - Любой - Измерение планировщика.
//  ЗначениеИзмерения - Любой - Значение измерения планировщика.
//
Процедура УстановитьЗначениеИзмерения(Элемент, Измерение, ЗначениеИзмерения)
	
	СтруктураЭлемента = Новый Структура("ЗначенияИзмерений");
	
	СоответствиеИзмерений = Новый Соответствие();
	СоответствиеИзмерений.Вставить(Измерение, ЗначениеИзмерения);
	СтруктураЭлемента.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеИзмерений);
	
	Элемент.Загрузить(СтруктураЭлемента);
	
КонецПроцедуры

// Формирует таблицу общей занятости по переданной таблице занятости.
//
Функция СформироватьТаблицуОбщейЗанятости(ТаблицаЗанятости, ДатаНачала, ДатаОкончания)
	
	ТаблицаОбщейЗанятости = ТаблицаЗанятости.СкопироватьКолонки();
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Доступен);
	МассивСвободногоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СвободноеВремя Из МассивСвободногоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			СвободноеВремя.ДатаНачала, СвободноеВремя.ДатаОкончания, СвободноеВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.ПодВопросом);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ПодВопросомВремя Из МассивЗанятогоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			ПодВопросомВремя.ДатаНачала, ПодВопросомВремя.ДатаОкончания, ПодВопросомВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Занят);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЗанятоеВремя Из МассивЗанятогоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			ЗанятоеВремя.ДатаНачала, ЗанятоеВремя.ДатаОкончания, ЗанятоеВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Отсутствует);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ОтсутствуетВремя Из МассивЗанятогоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			ОтсутствуетВремя.ДатаНачала, ОтсутствуетВремя.ДатаОкончания, ОтсутствуетВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	Возврат ТаблицаОбщейЗанятости;
	
КонецФункции

// Формирует таблицу занятости планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица занятости планировщика.
//
Функция ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения)
	
	ПериодОтображения = РаботаСРабочимКалендаремКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = РаботаСРабочимКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтобразитьЗанятостьВДне = РаботаСРабочимКалендаремКлиентСервер.ПолучитьОтобразитьЗанятостьВДне(НастройкиОтображения);
	
	ТаблицаЗанятости = СформироватьТаблицуЗанятости();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		ОтображаемаяДатаОкончания =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		ТаблицаЗанятостиНаДату = ПолучитьТаблицуЗанятости(
			НастройкиОтображения.ФизЛица,
			ОтображаемаяДатаНачала,
			ОтображаемаяДатаОкончания,
			ОтобразитьЗанятостьВДне,
			НастройкиОтображения.ИсключенияЗанятости);
		Для Каждого Занятость Из ТаблицаЗанятостиНаДату Цикл
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Занятость);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

// Формирует таблицу общей занятости планировщика.
//
// Параметры:
//  ТаблицаЗанятости - ТаблицаЗначений - Таблица занятости планировщика.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица занятости планировщика.
//
Функция ПолучитьТаблицуОбщейЗанятостиПланировщика(ТаблицаЗанятости, НастройкиОтображения)
	
	Если Не НастройкиОтображения.ОтображатьОбщуюЗанятость Тогда
		ТаблицаОбщейЗанятости = ТаблицаЗанятости.СкопироватьКолонки();
		Возврат ТаблицаОбщейЗанятости;
	КонецЕсли;
	
	ДатаНачалаОбщая = РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатаНачалаОбщая(НастройкиОтображения);
	ДатаОкончанияОбщая = РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатаОкончанияОбщая(НастройкиОтображения);
	
	Возврат СформироватьТаблицуОбщейЗанятости(ТаблицаЗанятости, ДатаНачалаОбщая, ДатаОкончанияОбщая);
	
КонецФункции

// Формирует структуру интервала фона планировщика.
//
// Параметры:
//  Занятость - Структура - Занятость.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Структура - Интервал фона планировщика
//
Функция ПолучитьСтруктуруИнтервалаФонаПланировщика(Занятость, НастройкиОтображения)
	
	СтруктураИнтервалаФона = Новый Структура;
	СтруктураИнтервалаФона.Вставить("Начало", Занятость.ДатаНачала);
	СтруктураИнтервалаФона.Вставить("Конец", Занятость.ДатаОкончания);
	СтруктураИнтервалаФона.Вставить("Цвет", ПолучитьЦветЗанятости(Занятость));
	СтруктураИнтервалаФона.Вставить("ФизическоеЛицо", Занятость.ФизическоеЛицо);
	
	Возврат СтруктураИнтервалаФона;
	
КонецФункции

// Возвращает цвет занятости.
//
// Параметры:
//  Занятость - Структура - Занятость.
//
// Возвращаемое значение:
//  Цвет - Цвет занятости.
//
Функция ПолучитьЦветЗанятости(Занятость)
	
	Если Занятость.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
		ЦветЗанятости = ЦветаСтиля.ЦветКалендаряЗанятоеВремя;
	ИначеЕсли Занятость.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
		ЦветЗанятости = ЦветаСтиля.ЦветКалендаряПодВопросомВремя;
	ИначеЕсли Занятость.Занят = Перечисления.СостоянияЗанятости.Отсутствует Тогда
		ЦветЗанятости = ЦветаСтиля.ЦветКалендаряОтсутствует;
	Иначе
		ЦветЗанятости = ЦветаСтиля.ЦветКалендаряДоступноеВремя;
	КонецЕсли;
	
	Возврат ЦветЗанятости;
	
КонецФункции

// Возвращает пустую структуру данных планировщика.
//
// Возвращаемое значение:
//  Структура - Структура данных планировщика.
//
Функция ПолучитьСтруктуруДанныхПланировщика()
	
	ДанныеПланировщика = Новый Структура;
	ДанныеПланировщика.Вставить("Элементы", Новый Массив);
	ДанныеПланировщика.Вставить("ИнтервалыФона", Новый Массив);
	
	Возврат ДанныеПланировщика;
	
КонецФункции

// Создает и заполняет объект повторяющейся записи календаря на основании элемента планировщика.
//
// Параметры:
//  ЗаписьКалендаря - Структура - Структура записи календаря планировщика.
//
// Возвращаемое значение:
//  СправочникОбъект.ЗаписиРабочегоКалендаря - Не записанный в базу объект исключения повторяющегося события.
//
Функция СоздатьИсключениеПовторяющейсяЗаписиКалендаря(ЗаписьКалендаря)
	
	СтруктураОснование = Новый Структура("ПовторяющеесяСобытие, ДатаИсключения");
	СтруктураОснование.ПовторяющеесяСобытие = ЗаписьКалендаря.Ссылка;
	СтруктураОснование.ДатаИсключения = ЗаписьКалендаря.ДатаНачалаИсходная;
	
	ЗаписьКалендаряОбъект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
	ЗаписьКалендаряОбъект.Заполнить(СтруктураОснование);
	ЗаполнитьЗначенияСвойств(ЗаписьКалендаряОбъект, ЗаписьКалендаря, "ДатаНачала, ДатаОкончания, ВесьДень, Сотрудник");
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ПовторяющеесяСобытие", ЗаписьКалендаря.Ссылка);
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", ЗаписьКалендаря.ДатаНачалаИсходная);
	
	Возврат ЗаписьКалендаряОбъект;
	
КонецФункции

// Возвращает параметры напоминания по записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СправочникСсылка.ЗаписиРабочегоКалендаря
// 
// Возвращаемое значение:
//  Структура - Структура напоминания.
//
Функция ПолучитьПараметрыНапоминанияПоИсточнику(ЗаписьКалендаря)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НапоминанияПользователя.Пользователь,
	|	НапоминанияПользователя.ВремяСобытия,
	|	НапоминанияПользователя.Источник,
	|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
	|	НапоминанияПользователя.Описание КАК Описание,
	|	2 КАК ИндексКартинки,
	|	НапоминанияПользователя.СпособУстановкиВремениНапоминания,
	|	НапоминанияПользователя.ИнтервалВремениНапоминания,
	|	НапоминанияПользователя.ИмяРеквизитаИсточника
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Пользователь = &Пользователь
	|	И НапоминанияПользователя.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Источник", ЗаписьКалендаря);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыНапоминания = Новый Структура("Пользователь,Источник,ВремяСобытия,СрокНапоминания,
		|Описание,СпособУстановкиВремениНапоминания,ИнтервалВремениНапоминания,ИмяРеквизитаИсточника");
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыНапоминания, Выборка);
		Результат = ПараметрыНапоминания;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Отключает напоминание для записи календаря.
//
// Параметры:
//  ЗаписьКалендаря			 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - Запись календаря.
//  ОтключенныеНапоминания	 - Массив									 - Отключенные напоминания пользователя.
//
Процедура ОтключитьНапоминание(ЗаписьКалендаря, ОтключенныеНапоминания)
	
	Напоминание = ПолучитьПараметрыНапоминанияПоИсточнику(ЗаписьКалендаря);
	Если Напоминание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НапоминанияПользователяСлужебный.ОтключитьНапоминание(Напоминание, Ложь);
	ОтключенныеНапоминания.Добавить(Напоминание);
	
КонецПроцедуры

// Возвращает цвет рамки элемента календаря.
//
// Параметры:
//  ЦветФона	 - Цвет	 - Цвет фона элемента планировщика.
// 
// Возвращаемое значение:
//  Цвет - Цвет рамки записи календаря.
//
Функция ПолучитьЦветРамкиЭлементаПланировщика(ЦветФона)
	
	Если ЦветФона = ЦветаСтиля.ЦветКалендаряОтработано Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряОтработана;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряКрасный Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряКрасная;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряСиний Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряСиняя;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряЖелтый Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряЖелтая;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряЗеленый Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряЗеленая;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряОранжевый Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряОранжевая;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряПоУмолчанию Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряПоУмолчанию;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряТекущаяЗапись Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряТекущаяЗапись;
	Иначе
		ЦветРамки = ЦветаСтиля.ЦветРамки;
	КонецЕсли;
	
	Возврат ЦветРамки;
	
КонецФункции

// Отмечает запись календаря как отработанную.
//
// Параметры:
//  ЗаписьКалендаря			 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - Запись календаря.
//  ОтключенныеНапоминания	 - Массив									 - Отключенные напоминания пользователя.
//
Процедура ОтработатьЗаписьКалендаря(ЗаписьКалендаря, ОтключенныеНапоминания)
	
	УстановитьОтработанаЗаписьКалендаря(ЗаписьКалендаря);
	УстановитьЦветЗаписиКалендаря(ЗаписьКалендаря, Перечисления.ЦветаРабочегоКалендаря.Нет);
	ОтключитьНапоминание(ЗаписьКалендаря, ОтключенныеНапоминания);
	
КонецПроцедуры

// Определяет, по каким записям календаря у текущего пользователя установлены напоминания.
// 
// Возвращаемое значение:
//  Соответствие - Записи календаря с напоминания текущего пользователя.
//   * Ключ     - СправочникСсылка.ЗаписиРабочегоКалендаря - Запись календаря.
//   * Значение - Булево                                   - Наличие напоминания текущему пользователю.
//
Функция ЗаписиКалендаряСНапоминаниямиТекущегоПользователя()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НапоминанияПользователя.Источник КАК Источник
		|ИЗ
		|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.Пользователь = &Пользователь");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	ЗаписиКалендаряСНапоминаниями = Новый Соответствие;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписиКалендаряСНапоминаниями[Выборка.Источник] = Истина;
	КонецЦикла;
	
	Возврат ЗаписиКалендаряСНапоминаниями;
	
КонецФункции

// Принимает приглашение по записям рабочего календаря.
//
// Параметры:
//  ЭлементыЗаписейКалендаря - Массив из Структура - Записи рабочего календаря.
//                                                   См. РаботаСРабочимКалендаремКлиентСервер.НовыйЭлементЗаписиКалендаря().
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ЗаписиРабочегоКалендаря - Измененные записи рабочего календаря.
//
Функция ПринятьПриглашение(ЭлементыЗаписейКалендаря) Экспорт
	
	ИзмененныеЗаписиКалендаря = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЭлементЗаписиКалендаря Из ЭлементыЗаписейКалендаря Цикл
			
			Если ЭтоПовторяющеесяСобытие(ЭлементЗаписиКалендаря) Тогда
				
				ЗаписьКалендаряОбъект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
				ЗаписьКалендаряОбъект.Заполнить(ЭлементЗаписиКалендаря.Ссылка);
				ЗаполнитьЗначенияСвойств(ЗаписьКалендаряОбъект, ЭлементЗаписиКалендаря, "ДатаНачала, ДатаОкончания");
				ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ПовторяющеесяСобытие", ЭлементЗаписиКалендаря.Ссылка);
				ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", ЭлементЗаписиКалендаря.ДатаНачалаИсходная);
				
			Иначе
				
				ЗаписьКалендаряОбъект = ЭлементЗаписиКалендаря.Ссылка.ПолучитьОбъект();
				
			КонецЕсли;
			
			Если ЗаписьКалендаряОбъект.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗаписьКалендаряОбъект.Связанная Тогда
				ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи", Истина);
			КонецЕсли;
			ЗаписьКалендаряОбъект.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято;
			ЗаписьКалендаряОбъект.Записать();
			
			Если ТипЗнч(ЗаписьКалендаряОбъект.Предмет) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
				
				ВстроеннаяПочтаСервер.ВыполнитьОтветНаСервере(
					ЗаписьКалендаряОбъект.Предмет, Перечисления.СостоянияПриглашения.Принято);
					
			КонецЕсли;
			
			ИзмененныеЗаписиКалендаря.Добавить(ЭлементЗаписиКалендаря.Ссылка);
			Если ЭлементЗаписиКалендаря.Ссылка <> ЗаписьКалендаряОбъект.Ссылка Тогда
				ИзмененныеЗаписиКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ИзмененныеЗаписиКалендаря;
	
КонецФункции

// Отклоняет приглашение по записям рабочего календаря.
// 
// Параметры:
//  ЭлементыЗаписейКалендаря - Массив из Структура - Записи рабочего календаря.
//                                                   См. РаботаСРабочимКалендаремКлиентСервер.НовыйЭлементЗаписиКалендаря().
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ЗаписиРабочегоКалендаря - Измененные записи рабочего календаря.
//
Функция ОтклонитьПриглашение(ЭлементыЗаписейКалендаря) Экспорт
	
	ИзмененныеЗаписиКалендаря = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЭлементЗаписиКалендаря Из ЭлементыЗаписейКалендаря Цикл
			
			Если ЭтоПовторяющеесяСобытие(ЭлементЗаписиКалендаря) Тогда
				
				ЗаписьКалендаряОбъект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
				ЗаписьКалендаряОбъект.Заполнить(ЭлементЗаписиКалендаря.Ссылка);
				ЗаполнитьЗначенияСвойств(ЗаписьКалендаряОбъект, ЭлементЗаписиКалендаря, "ДатаНачала, ДатаОкончания");
				ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ПовторяющеесяСобытие", ЭлементЗаписиКалендаря.Ссылка);
				ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", ЭлементЗаписиКалендаря.ДатаНачалаИсходная);
				
			Иначе
				
				ЗаписьКалендаряОбъект = ЭлементЗаписиКалендаря.Ссылка.ПолучитьОбъект();
				
			КонецЕсли;
			
			Если ЗаписьКалендаряОбъект.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗаписьКалендаряОбъект.Связанная Тогда
				ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи", Истина);
			КонецЕсли;
			ЗаписьКалендаряОбъект.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено;
			ЗаписьКалендаряОбъект.Записать();
			
			Если ТипЗнч(ЗаписьКалендаряОбъект.Предмет) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
				
				ВстроеннаяПочтаСервер.ВыполнитьОтветНаСервере(
					ЗаписьКалендаряОбъект.Предмет, Перечисления.СостоянияПриглашения.НеПринято);
					
			КонецЕсли;
			
			ИзмененныеЗаписиКалендаря.Добавить(ЭлементЗаписиКалендаря.Ссылка);
			Если ЭлементЗаписиКалендаря.Ссылка <> ЗаписьКалендаряОбъект.Ссылка Тогда
				ИзмененныеЗаписиКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ИзмененныеЗаписиКалендаря;
	
КонецФункции

#КонецОбласти