
#Область ПрограммныйИнтерфейс

// Стандартный обработчик ПередНачаломДобавления для списков задач.
// Для вызова из обработчика события таблицы формы ПередНачаломДобавления.
//
// Параметры
//   аналогичны параметрам обработчика таблицы формы ПередНачаломДобавления
//
Процедура СписокЗадачПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	Если Копирование Тогда
		Задача = Элемент.ТекущаяСтрока;
		Если НЕ ЗначениеЗаполнено(Задача) Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Основание", Задача);
	КонецЕсли;
	СоздатьЗадание(Форма, ПараметрыФормы);
	Отказ = Истина;
	
КонецПроцедуры

// Стандартный обработчик Выбор для списков задач.
// Для вызова из обработчика события таблицы формы Выбор.
//
// Параметры
//   аналогичны параметрам обработчика таблицы формы Выбор
//
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат;	
	КонецЕсли;
	СтандартнаяОбработка = НЕ ОткрытьФормуВыполненияЗадачи(ВыбраннаяСтрока);
	
КонецПроцедуры

// Стандартный обработчик ПередНачаломИзменения для списков задач.
// Для вызова из обработчика события таблицы формы ПередНачаломИзменения.
//
// Параметры
//   аналогичны параметрам обработчика таблицы формы ПередНачаломИзменения
//
Процедура СписокЗадачПередНачаломИзменения(Элемент, Отказ) Экспорт
	
	Если ТипЗнч(Элемент.ТекущиеДанные) = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ТекущиеДанные.Ссылка) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат;	
	КонецЕсли;
	Отказ = ОткрытьФормуВыполненияЗадачи(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// Открыть форму выполнения задачи, которую предоставляет бизнес-процесс.  
//
// Параметры
//  ЗадачаСсылка       - ЗадачаИсполнителяСсылка  - задача.
//
Функция ОткрытьФормуВыполненияЗадачи(Знач ЗадачаСсылка) Экспорт
	
	РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(ЗадачаСсылка);
	
	Возврат Истина;
	
КонецФункции

// Открыть форму для ввода нового задания.
//
// Параметры
//  ФормаВладелец  - ФормаКлиентскогоПриложения - форма, которая должна быть владельцем для открываемой.
//  ПараметрыФормы - Структура - параметры открываемой формы.
//
Процедура СоздатьЗадание(Знач ФормаВладелец = Неопределено, Знач ПараметрыФормы = Неопределено) Экспорт
КонецПроцедуры	

// Показывает вопрос о подзадачах при выполнении текущей задачи
Процедура ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
	ЗадачиМнеТекущаяЗадача, ОписаниеОповещения) Экспорт
	
	ТекстВопроса = НСтр("ru = 'Есть невыполненные подзадачи.
	|Выберите, что делать с главной задачей:'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ИгнорироватьПодзадачи", НСтр("ru = 'Выполнить без подзадач'"));
	Кнопки.Добавить("ПрерватьПодзадачи", НСтр("ru = 'Выполнить, прервав подзадачи'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отменить действие'"));
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	
КонецПроцедуры

// Выполняем оповещение о прочтении (только документов)
//
// Параметры:
//  ФормаЗадачи  - ФормаКлиентскогоПриложения  - форма выполнения задачи.
Процедура ОповеститьОПрочтенииПредметовЗадачи(Форма) Экспорт
	
	// оповещение о прочтении
	ПредметыЗадачи = Форма.ДеревоПриложений.ПолучитьЭлементы();
	Для Каждого Предмет Из ПредметыЗадачи Цикл
		Если Предмет.Прочтен Тогда
			Оповестить("ПрочтениеОбновитьСписок", Предмет.Ссылка);
			Предмет.Прочтен = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вызывается при открытии объекта из полнотекстового поиска
// Функция ПриОткрытииОбъекта позволяет настроить
// поведение при открытии результата из списка найденного в полнотекстовом поиске
// Например, это необходимо при использовании подсистемы "Бизнес-процессы и задачи".
//
// Параметры
//  Значение - объект, найденный в полнотекстовом поиске, например СправочникСсылка
//  СтандартнаяОбработка - Булево - по умолчанию Истина. 
//   Если поведение изменено (по собственной механике делается открытие формы для Значение),
//   то СтандартнаяОбработка надо установить в Ложь
// 
// При использовании подсистемы "Бизнес-процессы и задачи" нужно
// вписать следующий код:
//
//Если ТипЗнч(Значение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
//	Если БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Значение) Тогда
//		СтандартнаяОбработка = Ложь;
//	КонецЕсли;
//КонецЕсли;
//
Процедура ПолнотекстовыйПоискПриОткрытииОбъекта(Значение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если ОткрытьФормуВыполненияЗадачи(Значение) Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик ПометкаУдаления для списков бизнес-процессов.
// Для вызова из обработчика события списка ПометкаУдаления.
//
// Параметры
//   Список  - ТаблицаФормы - элемент управления (таблица формы) со списком бизнес-процессов.
//
Процедура СписокБизнесПроцессовПометкаУдаления(Список) Экспорт
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки = Неопределено ИЛИ ВыделенныеСтроки.Количество() <= 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("СписокБизнесПроцессовПометкаУдаленияЗавершение", ЭтотОбъект, Список);
		
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru = 'Изменить пометку удаления?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура СписокБизнесПроцессовПометкаУдаленияЗавершение(Результат, Список) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	
	БизнесПроцессСсылка = БизнесПроцессыИЗадачиВызовСервера.ПометитьНаУдалениеБизнесПроцессы(ВыделенныеСтроки);
	Список.Обновить();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Пометка удаления изменена.'"), 
		?(БизнесПроцессСсылка <> Неопределено, ПолучитьНавигационнуюСсылку(БизнесПроцессСсылка), ""),
		?(БизнесПроцессСсылка <> Неопределено, Строка(БизнесПроцессСсылка), ""));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УсловноеОформлениеПросроченныЗадачВСписках

Процедура ОбновитьПараметрыУсловногоОформленияПросроченныхЗадач(УсловноеОформление) Экспорт
	
	ПредставлениеЭлемента = БизнесПроцессыИЗадачиКлиентСервер.ПолучитьПредставлениеУсловногоОформленияПросроченныхЗадач();
	
	ЭлементОформления = Неопределено;
	
	Для Каждого Элемент из УсловноеОформление.Элементы Цикл
		Если Элемент.Представление = ПредставлениеЭлемента Тогда
			ЭлементОформления = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПолеСрокИсполнения = Новый ПолеКомпоновкиДанных("СрокИсполненияДляОтображенияВСписке");
	ТипДата = Тип("Дата");
	
	Для Каждого ЭлементОтбора Из ЭлементОформления.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеСрокИсполнения
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше
			И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = ТипДата Тогда
			
			ЭлементОтбора.ПравоеЗначение = ТекущаяДата();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
