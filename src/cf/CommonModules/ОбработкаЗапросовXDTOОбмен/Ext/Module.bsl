///////////////////////////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, обмен
// Реализует функционал веб-сервиса DMService по обмену данными
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Создает и отправляет сообщения обмена для интегрированных систем.
//
Процедура ВыполнитьОбменДанными() Экспорт
	
	ОбменаДаннымиИспользуется = Истина;
	ОбработкаЗапросовXDTOПереопределяемый.ПриОпределенииИспользованияОбменаДаннымиСИнтегрированнымиСистемами(
		ОбменаДаннымиИспользуется);
	Если Не ОбменаДаннымиИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбменДаннымиСИнтегрированнымиСистемами, Отказ);
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УзлыОбмена = ОбработкаЗапросовXDTOПовтИсп.УзлыОбменаИнтегрированныхСистем();
	
	Если Не ИспользоватьСинхронизациюСИнтегрированнымиСистемами() Тогда
		Для Каждого ИнтегрированнаяСистема Из УзлыОбмена Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(ИнтегрированнаяСистема);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДляОтправки(УзлыОбмена);
	ОтправитьДанные();
	ОчиститьУстаревшиеДанные(УзлыОбмена);
	
КонецПроцедуры

// Заполняет объект XDTO результатами выполнения выражений на встроенном языке.
//
// Параметры:
//   ОбъектДО - Произвольный - объект Документооборота.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO который требуется дополнить результатами выполнения выражений.
//   СписокВыражений - Массив из ОбъектXDTO - список выражений на встроенном языке, которые требуется
//     выполнить на стороне ДО, для последующей передачи на сторону ИС и заполнения там связанного объекта.
//
Процедура ЗаполнитьДанныеИзСпискаВыражений(ОбъектДО, ОбъектXDTO, СписокВыражений) Экспорт
	
	Для Каждого Выражение Из СписокВыражений Цикл
		
		Если СокрЛП(Выражение.expressionOnBuiltInLanguage) = "" Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не задан текст выражения на встроенном языке.
					|Идентификатор выражения: %1.'"),
				Выражение.id);
		КонецЕсли;
		
		Если Выражение.type = "Attribute" Тогда
			// Выражение для заполнения реквизита. Выполняем единожды, помещаем в attributes.
			РезультатВыражения = ОбработкаЗапросовXDTO.РезультатВыраженияНаВстроенномЯзыке(
				Выражение.expressionOnBuiltInLanguage,
				ОбъектДО);
			ОбъектXDTO.expressionResultsForAttributes.Добавить(
				ПреобразоватьРеквизитОбъектаДОВОбъектXDTO(Выражение.id, РезультатВыражения));
			
		ИначеЕсли Выражение.type = "TabularSection" Тогда
			// Выражение для заполнения табличной части. Выполняем единожды, помещаем в tabularSections.
			РезультатВыражения = ОбработкаЗапросовXDTO.РезультатВыраженияНаВстроенномЯзыке(
				Выражение.expressionOnBuiltInLanguage,
				ОбъектДО);
			ОбъектXDTO.expressionResultsForTabularSections.Добавить(
				ПреобразоватьТаблицуОбъектаДОВОбъектXDTO(
					Выражение.id,
					РезультатВыражения,
					РезультатВыражения.Колонки));
			
		ИначеЕсли Выражение.type = "TabularSectionAttribute" Тогда
			// Выражение для заполнения реквизита таб. части.
			ТаблицаРезультат = Новый ТаблицаЗначений;
			ТаблицаРезультат.Колонки.Добавить("Result");
			
			Если Выражение.tabularSectionName = "" Тогда
				// Вариант: по правилам для отдельных реквизитов.
				// Выполняем единожды, помещаем в attributes.
				РезультатВыражения = ОбработкаЗапросовXDTO.РезультатВыраженияНаВстроенномЯзыке(
					Выражение.expressionOnBuiltInLanguage,
					ОбъектДО);
				СтрокаРезультат = ТаблицаРезультат.Добавить();
				СтрокаРезультат.Result = РезультатВыражения;
				
			Иначе
				// Вариант: из таблицы источника.
				// Выполняем многократно для каждой строки источника, помещаем в tabularSections.
				РазделеннаяСтрока = СтрРазделить(Выражение.tabularSectionName, ".", Ложь);
				Если РазделеннаяСтрока.Количество() = 1 Тогда
					СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]];
				Иначе
					СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]][РазделеннаяСтрока[1]];
				КонецЕсли;
				
				Для Каждого ТекущаяСтрока Из СписокXDTO Цикл
					РезультатВыражения = ОбработкаЗапросовXDTO.РезультатВыраженияНаВстроенномЯзыке(
						Выражение.expressionOnBuiltInLanguage,
						ОбъектДО,,
						ТекущаяСтрока);
					СтрокаРезультат = ТаблицаРезультат.Добавить();
					СтрокаРезультат.Result = РезультатВыражения;
				КонецЦикла;
				
			КонецЕсли;
			
			ОбъектXDTO.expressionResultsForTabularSections.Добавить(
				ПреобразоватьТаблицуОбъектаДОВОбъектXDTO(
					Выражение.id,
					ТаблицаРезультат,
					ТаблицаРезультат.Колонки, ОбъектXDTO));
			
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не задан вариант выполнения выражения на встроенном языке.
					|Идентификатор выражения: %1.'"),
				Выражение.id);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается перед записью ссылочного объекта и регистрирует его на нужных узлах.
//
// Параметры:
//   Источник - СправочникОбъект.Контрагенты
//              СправочникОбъект.ДокументыПредприятия
//              СправочникОбъект.Файлы
//              СправочникОбъект.Мероприятия - записываемый объект.
//   Отказ - Булево - флаг отказа от выполнения обработчика.
//
Процедура ОбменСИнтегрированнымиСистемамиПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменаДаннымиИспользуется = Истина;
	ОбработкаЗапросовXDTOПереопределяемый.ПриОпределенииИспользованияОбменаДаннымиСИнтегрированнымиСистемами(
		ОбменаДаннымиИспользуется);
	
	Если Не ОбменаДаннымиИспользуется
			Или Источник.ДополнительныеСвойства.Свойство("ОтключитьРегистрациюДляОбменаСИнтегрированнымиСистемами")
			Или Не ИспользоватьСинхронизациюСИнтегрированнымиСистемами() Тогда
		Возврат;
	КонецЕсли;
	
	ИсключитьТекущийУзелИС = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ИсключитьТекущийУзелИС", ИсключитьТекущийУзелИС);
	ЗарегистрироватьОбъект(Источник,, ИсключитьТекущийУзелИС);
	
КонецПроцедуры

// Вызывается перед записью набора записей регистра и регистрирует его данные при необходимости.
//
// Параметры:
//   Источник - РегистрСведенийНаборЗаписей.ТекущиеСостоянияДокументов
//              РегистрСведенийНаборЗаписей.СведенияОФайлахДокументооборот
//              РегистрСведенийНаборЗаписей.ДанныеДокументовПредприятия - записываемый регистр.
//   Отказ - Булево - флаг отказа от выполнения обработчика.
//   Замещение - Булево - признак замещения существующего набора записей.
//
Процедура ОбменСИнтегрированнымиСистемамиПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	ОбменаДаннымиИспользуется = Истина;
	ОбработкаЗапросовXDTOПереопределяемый.ПриОпределенииИспользованияОбменаДаннымиСИнтегрированнымиСистемами(
		ОбменаДаннымиИспользуется);
	
	Если Не ОбменаДаннымиИспользуется
			Или Источник.ДополнительныеСвойства.Свойство("ОтключитьРегистрациюДляОбменаСИнтегрированнымиСистемами")
			Или Не ИспользоватьСинхронизациюСИнтегрированнымиСистемами() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ТекущиеСостоянияДокументов") Тогда
		
		СостоянияСогласования = СостоянияСогласования();
		Для Каждого Запись Из Источник Цикл
			Узлы = ЗарегистрироватьСсылку(Запись.Документ);
			Если Узлы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Запись.Документ);
			Если СостоянияСогласования.Найти(Запись.Состояние) <> Неопределено Тогда
				НаборЗаписей = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Запись.Документ);
				НаборЗаписей.Отбор.Состояние.Установить(Запись.Состояние);
				НаборЗаписей.Отбор.Действие.Установить(Запись.Действие);
				ПланыОбмена.ЗарегистрироватьИзменения(Узлы, НаборЗаписей);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СведенияОФайлахДокументооборот") Тогда
		
		Для Каждого Запись Из Источник Цикл
			ЗарегистрироватьСсылку(Запись.Файл);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ДанныеДокументовПредприятия")
			И НужноРегистрироватьДокументКОбмену(Источник) Тогда
		
		Для Каждого Запись Из Источник Цикл
				Узлы = ЗарегистрироватьСсылку(Запись.Документ);
				Если Узлы.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Запись.Документ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед удалением ссылочного объекта и регистрирует его на нужных узлах.
//
// Параметры:
//   Источник - СправочникОбъект.Контрагенты
//              СправочникОбъект.ДокументыПредприятия
//              СправочникОбъект.Файлы
//              СправочникОбъект.Мероприятия - записываемый объект.
//   Отказ - Булево - флаг отказа от выполнения обработчика.
//
Процедура ОбменСИнтегрированнымиСистемамиПередУдалением(Источник, Отказ) Экспорт
	
	ОбменаДаннымиИспользуется = Истина;
	ОбработкаЗапросовXDTOПереопределяемый.ПриОпределенииИспользованияОбменаДаннымиСИнтегрированнымиСистемами(
		ОбменаДаннымиИспользуется);
	
	Если Не ОбменаДаннымиИспользуется
			Или Источник.ДополнительныеСвойства.Свойство("ОтключитьРегистрациюДляОбменаСИнтегрированнымиСистемами")
			Или Не ИспользоватьСинхронизациюСИнтегрированнымиСистемами() Тогда
		Возврат;
	КонецЕсли;
	
	ИсключитьТекущийУзелИС = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ИсключитьТекущийУзелИС", ИсключитьТекущийУзелИС);
	ЗарегистрироватьОбъект(Источник, Истина, ИсключитьТекущийУзелИС);
	
КонецПроцедуры

// Возвращает Истина, если текущий пользователь - тот, под которым выполняется регламентное задание обмена.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоПользовательЗаданияОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Попытка
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Новый Структура("Метаданные",
			Метаданные.РегламентныеЗадания.ОбменДаннымиСИнтегрированнымиСистемами));
		Если Задания.Количество() > 0 Тогда
			Возврат (Задания[0].ИмяПользователя = ПользовательИБ.Имя);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет выгрузку массива объектов XDTO в XML-файл для последующей передачи интегрированной системе.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - узел-получатель.
//   ПорцияОбъектов - Массив из ОбъектXDTO - содержит объекты XDTO, подлежащие выгрузке.
//
Процедура ВыгрузитьПорциюОбъектовXDTOВСообщение(ИнтегрированнаяСистема, ПорцияОбъектов)
	
	Если ПорцияОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Message");
	
	ОбъектовВСообщении = 0;
	Для Каждого ОбъектXDTO Из ПорцияОбъектов Цикл
		Если ОбъектXDTO = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		ОбъектовВСообщении = ОбъектовВСообщении + 1;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Message
	ЗаписьXML.Закрыть();
	
	Если ОбъектовВСообщении > 0 Тогда
		РегистрыСведений.ОчередьСообщенийВИнтегрированныеСистемы.ДобавитьСообщение(
			ИнтегрированнаяСистема,
			Новый ДвоичныеДанные(ИмяВременногоФайла));
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

// Регистрирует объект на подходящих узлах.
//
// Параметры:
//   Объект - СправочникОбъект - объект ДО.
//   ЭтоУдалениеОбъекта - Булево - Истина, если регистрация происходит перед удалением объекта.
//   ИсключитьТекущийУзелИС - Булево - указывает требуется ли регистрация в текущем узле ИС.
//
Процедура ЗарегистрироватьОбъект(Объект, ЭтоУдалениеОбъекта = Ложь, ИсключитьТекущийУзелИС = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления)
			И Объект.ДополнительныеСвойства.Свойство("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ") Тогда
		
		ОтключитьРегистрацию = Истина;
		
		Если (Объект.ДополнительныеСвойства.РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ = Неопределено
					И Не ЭтоУдалениеОбъекта
					И Объект.ЭтоНовый())
				Или Объект.ДополнительныеСвойства.РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ = Истина Тогда
			ОтключитьРегистрацию = Ложь;
		КонецЕсли;
		
		Если ОтключитьРегистрацию Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Файлы") Тогда
		ЗарегистрироватьСсылку(Объект.ВладелецФайла);
	Иначе
		РегистрируемыеДанные = ?(Объект.Ссылка.Пустая(),
			Объект.ПолучитьСсылкуНового(),
			Объект.Ссылка);
		Если РегистрируемыеДанные.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		КРегистрации = УзлыДляРегистрацииОбъектаДО(РегистрируемыеДанные);
		КУдалению = Новый Массив;
		Если ИсключитьТекущийУзелИС = Истина И ЗначениеЗаполнено(ПараметрыСеанса.УзелИнтегрированнойСистемы) Тогда
			КУдалению.Добавить(ПараметрыСеанса.УзелИнтегрированнойСистемы);
		КонецЕсли;
		КРегистрации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(КРегистрации, КУдалению);
		Если КРегистрации.Количество() <> 0 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(КРегистрации, РегистрируемыеДанные);
		КонецЕсли;
		Если КУдалению.Количество() <> 0 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(КУдалению, РегистрируемыеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует объект по ссылке на подходящих узлах и возвращает их.
//
// Параметры:
//   Ссылка - СправочникСсылка - ссылка на объект ДО.
//
// Возвращаемое значение:
//   Массив из ПланОбменаСсылка.ИнтегрированныеСистемы - узлы, регистрация на которых выполнена.
//
Функция ЗарегистрироватьСсылку(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда // регистрируем владельца
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВладелецФайла");
		
		Если ТипЗнч(ВладелецФайла) <> Тип("СправочникСсылка.ДокументыПредприятия")
				И ТипЗнч(ВладелецФайла) <> Тип("СправочникСсылка.Мероприятия")
				И ТипЗнч(ВладелецФайла) <> Тип("СправочникСсылка.Контрагенты") Тогда
			
			Возврат Новый Массив;
			
		КонецЕсли;
		
		Источник = ВладелецФайла;
		
	Иначе // документ, мероприятие, контрагент
		
		Источник = Ссылка;
		
	КонецЕсли;
	
	Узлы = УзлыДляРегистрацииОбъектаДО(Источник);
	Если Узлы.Количество() <> 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Источник);
	КонецЕсли;
	
	Возврат Узлы;
	
КонецФункции

// Возвращает признак использования синхронизации с интегрированными системами.
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьСинхронизациюСИнтегрированнымиСистемами()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИнтегрированныеСистемы.Ссылка КАК ИнтегрированнаяСистема
		|ИЗ
		|	ПланОбмена.ИнтегрированныеСистемы КАК ИнтегрированныеСистемы
		|ГДЕ
		|	НЕ ИнтегрированныеСистемы.ПометкаУдаления
		|	И НЕ ИнтегрированныеСистемы.ЭтотУзел
		|	И ИнтегрированныеСистемы.ПоддерживаетПравилаЗагрузкиДанныхВДО");
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Проверяет нужно ли регистрировать документ к обмену при изменении общего реквизита.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.ДанныеДокументовПредприятия - набор новых записей регистра.
//
// Возвращаемое значение:
//   Булево - требуется ли регистрация документа к обмену.
//
Функция НужноРегистрироватьДокументКОбмену(НаборЗаписей)
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		ТЗИсточник = НаборЗаписей.Выгрузить();
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДанныеДокументовПредприятия.Документ,
			|	ДанныеДокументовПредприятия.СодержитОригинал
			|ИЗ
			|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
			|ГДЕ
			|	ДанныеДокументовПредприятия.Документ В(&Документы)");
		Запрос.УстановитьПараметр("Документы", ТЗИсточник.ВыгрузитьКолонку("Документ"));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаИсточник = ТЗИсточник.Найти(Выборка.Документ, "Документ");
			Если СтрокаИсточник <> Неопределено И СтрокаИсточник.СодержитОригинал <> Выборка.СодержитОригинал Тогда
				
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОтправитьДанные()
	
	Попытка
		
		ЗапросКБазе = Новый Запрос(
			"ВЫБРАТЬ
			|	ОчередьСообщенийВИнтегрированныеСистемы.ИнтегрированнаяСистема КАК ИнтегрированнаяСистема,
			|	ОчередьСообщенийВИнтегрированныеСистемы.МоментВремени КАК МоментВремени,
			|	ОчередьСообщенийВИнтегрированныеСистемы.Идентификатор КАК Идентификатор,
			|	ОчередьСообщенийВИнтегрированныеСистемы.Данные КАК Данные
			|ИЗ
			|	РегистрСведений.ОчередьСообщенийВИнтегрированныеСистемы КАК ОчередьСообщенийВИнтегрированныеСистемы
			|ГДЕ
			|	ОчередьСообщенийВИнтегрированныеСистемы.КоличествоПопытокОтправки <= 3
			|
			|УПОРЯДОЧИТЬ ПО
			|	МоментВремени");
		Результат = ЗапросКБазе.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			РаботаСИнтегрированнымиСистемами.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Отправка данных'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ОчередьСообщенийВИнтегрированныеСистемы,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторСообщения = Выборка.Идентификатор;
		
		Попытка
			
			ПараметрыСеанса.УзелИнтегрированнойСистемы = Выборка.ИнтегрированнаяСистема;
			Прокси = РаботаСИнтегрированнымиСистемамиПовтИсп.ПолучитьПрокси(Выборка.ИнтегрированнаяСистема);
			
			Запрос = РаботаСИнтегрированнымиСистемами.СоздатьОбъект(Прокси, "DMILPutChangesRequest");
			Запрос.messageData = Выборка.Данные.Получить();
			Запрос.DMXMLSchema = ОбработкаЗапросовXDTO.СхемаПакетаDM();
			
			Ответ = Прокси.execute(Запрос);
			РаботаСИнтегрированнымиСистемами.ПроверитьВозвратВебСервиса(Прокси, Ответ);
			
			РегистрыСведений.ИсторияОтправкиСообщенийВИнтегрированныеСистемы.ПеренестиСообщениеВИсторию(
				Выборка.ИнтегрированнаяСистема,
				Выборка.МоментВремени,
				ИдентификаторСообщения);
			
		Исключение
			
			ТекстСообщенияОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				РаботаСИнтегрированнымиСистемами.ИмяСобытияЖурналаРегистрации(
					НСтр("ru = 'Отправка данных'", ОбщегоНазначения.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ОчередьСообщенийВИнтегрированныеСистемы,
				Строка(ИдентификаторСообщения),
				ТекстСообщенияОбОшибке);
			
			МенеджерЗаписи = РегистрыСведений.ОчередьСообщенийВИнтегрированныеСистемы.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ИнтегрированнаяСистема = Выборка.ИнтегрированнаяСистема;
			МенеджерЗаписи.МоментВремени = Выборка.МоментВремени;
			МенеджерЗаписи.Идентификатор = ИдентификаторСообщения;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.КоличествоПопытокОтправки = МенеджерЗаписи.КоличествоПопытокОтправки + 1;
			МенеджерЗаписи.ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке;
			МенеджерЗаписи.Записать();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьУстаревшиеДанные(УзлыОбмена)
	
	СрокХраненияСообщенийВИнтегрированныеСистемы = Константы.СрокХраненияСообщенийВИнтегрированныеСистемы.Получить();
	Если СрокХраненияСообщенийВИнтегрированныеСистемы = 0 Тогда
		// Срок не установим. Применим значение по-умолчанию.
		СрокХраненияСообщенийВИнтегрированныеСистемы = 30;	// Дней
		Константы.СрокХраненияСообщенийВИнтегрированныеСистемы.Установить(СрокХраненияСообщенийВИнтегрированныеСистемы);
	КонецЕсли;
	
	КрайнийСрок = ТекущаяДатаСеанса() - СрокХраненияСообщенийВИнтегрированныеСистемы * 24 * 60 * 60;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьСообщенийВИнтегрированныеСистемы.ИнтегрированнаяСистема КАК ИнтегрированнаяСистема,
		|	ОчередьСообщенийВИнтегрированныеСистемы.МоментВремени КАК МоментВремени,
		|	ОчередьСообщенийВИнтегрированныеСистемы.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийВИнтегрированныеСистемы КАК ОчередьСообщенийВИнтегрированныеСистемы
		|ГДЕ
		|	ОчередьСообщенийВИнтегрированныеСистемы.ДатаСоздания <= &КрайнийСрок
		|	И ОчередьСообщенийВИнтегрированныеСистемы.ИнтегрированнаяСистема В(&УзлыОбмена)
		|	И ОчередьСообщенийВИнтегрированныеСистемы.КоличествоПопытокОтправки > 3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияОтправкиСообщенийВИнтегрированныеСистемы.ИнтегрированнаяСистема КАК ИнтегрированнаяСистема,
		|	ИсторияОтправкиСообщенийВИнтегрированныеСистемы.МоментВремени КАК МоментВремени,
		|	ИсторияОтправкиСообщенийВИнтегрированныеСистемы.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ИсторияОтправкиСообщенийВИнтегрированныеСистемы КАК ИсторияОтправкиСообщенийВИнтегрированныеСистемы
		|ГДЕ
		|	ИсторияОтправкиСообщенийВИнтегрированныеСистемы.ДатаОтправки <= &КрайнийСрок
		|	И ИсторияОтправкиСообщенийВИнтегрированныеСистемы.ИнтегрированнаяСистема В(&УзлыОбмена)");
	Запрос.УстановитьПараметр("КрайнийСрок", КрайнийСрок);
	Запрос.УстановитьПараметр("УзлыОбмена", УзлыОбмена);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаСообщенийОчередь = МассивРезультатов[0].Выгрузить();
	ТаблицаСообщенийИстория = МассивРезультатов[1].Выгрузить();
	
	Для Каждого ИнтегрированнаяСистема Из УзлыОбмена Цикл
		
		УдалитьСообщения(
			ИнтегрированнаяСистема,
			ТаблицаСообщенийОчередь,
			РегистрыСведений.ОчередьСообщенийВИнтегрированныеСистемы);
		УдалитьСообщения(
			ИнтегрированнаяСистема,
			ТаблицаСообщенийИстория,
			РегистрыСведений.ИсторияОтправкиСообщенийВИнтегрированныеСистемы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляОтправки(УзлыОбмена)
	
	Для Каждого ИнтегрированнаяСистема Из УзлыОбмена Цикл
		
		ПараметрыСеанса.УзелИнтегрированнойСистемы = ИнтегрированнаяСистема; // Для кода, формирующего XDTO-объекты.
		
		НомерСообщения = 1;
		ПланыОбмена.ВыбратьИзменения(ИнтегрированнаяСистема, НомерСообщения);
		
		// Выборка всех изменений
		ДанныеДляПередачи = ПолучитьДанныеДляПередачи(ИнтегрированнаяСистема, НомерСообщения);
		
		Если ДанныеДляПередачи.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			Прокси = РаботаСИнтегрированнымиСистемамиПовтИсп.ПолучитьПрокси(ИнтегрированнаяСистема);
			
			СоответствиеСпискаВыраженийОбъектамДО = СоответствиеСпискаВыраженийОбъектамДО(
				Прокси,
				ДанныеДляПередачи);
			
			СоздатьНовоеСообщение(
				ИнтегрированнаяСистема,
				НомерСообщения,
				ДанныеДляПередачи,
				СоответствиеСпискаВыраженийОбъектамДО);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				РаботаСИнтегрированнымиСистемами.ИмяСобытияЖурналаРегистрации(
					НСтр("ru = 'Подготовка данных к отправке'", ОбщегоНазначения.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ОчередьСообщенийВИнтегрированныеСистемы,,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПередачи(ИнтегрированнаяСистема, НомерСообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	МассивДанных = Новый Массив;
	Для Каждого ЭлементСоставаПланаОбмена Из ИнтегрированнаяСистема.Метаданные().Состав Цикл
		ЗапросИзменения = Новый Запрос;
		ИмяМетаданныхЭлемента = ЭлементСоставаПланаОбмена.Метаданные.Имя;
		
		Если ИмяМетаданныхЭлемента = "ТекущиеСостоянияДокументов" Тогда
			
			ЗапросИзменения.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РегистрИзменения.Документ КАК Документ
				|ПОМЕСТИТЬ Документы
				|ИЗ
				|	РегистрСведений.ТекущиеСостоянияДокументов.Изменения КАК РегистрИзменения
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК СвязиОбъектовИнтегрированныхСистем
				|		ПО (СвязиОбъектовИнтегрированныхСистем.УзелИнтегрированнойСистемы = &ИнтегрированнаяСистема)
				|			И (СвязиОбъектовИнтегрированныхСистем.СсылкаНаОбъектДО = РегистрИзменения.Документ)
				|ГДЕ
				|	РегистрИзменения.Узел = &ИнтегрированнаяСистема
				|	И РегистрИзменения.НомерСообщения = &НомерСообщения
				|	И РегистрИзменения.Состояние В(&СостоянияСогласования)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Документы.Документ КАК Документ,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА Состояния.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Согласован)
				|				ТОГДА 0
				|			КОГДА Состояния.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.НеСогласован)
				|				ТОГДА 1
				|			ИНАЧЕ 2
				|		КОНЕЦ) КАК Приоритет
				|ПОМЕСТИТЬ ВытесняющееСостояниеСогласованияПоДокументам
				|ИЗ
				|	Документы КАК Документы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК Состояния
				|		ПО Документы.Документ = Состояния.Документ
				|ГДЕ
				|	Состояния.Состояние В(&СостоянияСогласования)
				|
				|СГРУППИРОВАТЬ ПО
				|	Документы.Документ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Документы.Документ КАК Документ,
				|	Состояния.Состояние КАК Состояние,
				|	МАКСИМУМ(Состояния.ДатаУстановки) КАК ДатаУстановки
				|ПОМЕСТИТЬ ДатаУстановкиВытесняющегоСостоянияСогласованияПоДокументам
				|ИЗ
				|	Документы КАК Документы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВытесняющееСостояниеСогласованияПоДокументам КАК ВытесняющееСостояниеСогласованияПоДокументам
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК Состояния
				|			ПО ВытесняющееСостояниеСогласованияПоДокументам.Документ = Состояния.Документ
				|				И (ВЫБОР
				|					КОГДА ВытесняющееСостояниеСогласованияПоДокументам.Приоритет = 0
				|						ТОГДА Состояния.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Согласован)
				|					КОГДА ВытесняющееСостояниеСогласованияПоДокументам.Приоритет = 1
				|						ТОГДА Состояния.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.НеСогласован)
				|					КОГДА ВытесняющееСостояниеСогласованияПоДокументам.Приоритет = 2
				|						ТОГДА Состояния.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.НаСогласовании)
				|				КОНЕЦ)
				|		ПО Документы.Документ = ВытесняющееСостояниеСогласованияПоДокументам.Документ
				|
				|СГРУППИРОВАТЬ ПО
				|	Документы.Документ,
				|	Состояния.Состояние
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Документы.Документ КАК Документ,
				|	Состояния.Состояние КАК Состояние,
				|	Состояния.Установил КАК Установил,
				|	Состояния.ДатаУстановки КАК ДатаУстановки
				|ПОМЕСТИТЬ ТекущиеСостоянияДокументов
				|ИЗ
				|	Документы КАК Документы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатаУстановкиВытесняющегоСостоянияСогласованияПоДокументам КАК ДатаУстановкиВытесняющегоСостоянияСогласованияПоДокументам
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК Состояния
				|			ПО ДатаУстановкиВытесняющегоСостоянияСогласованияПоДокументам.Документ = Состояния.Документ
				|				И (Состояния.Состояние = ДатаУстановкиВытесняющегоСостоянияСогласованияПоДокументам.Состояние)
				|				И (Состояния.ДатаУстановки = ДатаУстановкиВытесняющегоСостоянияСогласованияПоДокументам.ДатаУстановки)
				|		ПО Документы.Документ = ДатаУстановкиВытесняющегоСостоянияСогласованияПоДокументам.Документ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Документы.Документ КАК Документ,
				|	МАКСИМУМ(ЕСТЬNULL(Состояния.Состояние, НЕОПРЕДЕЛЕНО)) КАК Состояние,
				|	МАКСИМУМ(ЕСТЬNULL(Состояния.Установил, НЕОПРЕДЕЛЕНО)) КАК Установил,
				|	МАКСИМУМ(ЕСТЬNULL(Состояния.ДатаУстановки, НЕОПРЕДЕЛЕНО)) КАК ДатаУстановки
				|ПОМЕСТИТЬ СостоянияДокументов
				|ИЗ
				|	Документы КАК Документы
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеСостоянияДокументов КАК Состояния
				|		ПО Документы.Документ = Состояния.Документ
				|			И (Состояния.Состояние В (&СостоянияСогласования))
				|
				|СГРУППИРОВАТЬ ПО
				|	Документы.Документ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВизыСогласования.Источник.БизнесПроцесс КАК БизнесПроцесс,
				|	МАКСИМУМ(ВизыСогласования.ДатаИсполнения) КАК ДатаИсполнения
				|ПОМЕСТИТЬ ДатыВизСогласовано
				|ИЗ
				|	Справочник.ВизыСогласования КАК ВизыСогласования
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияДокументов КАК СостоянияДокументов
				|		ПО ВизыСогласования.Источник.БизнесПроцесс = СостоянияДокументов.Установил
				|			И (СостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Согласован))
				|ГДЕ
				|	НЕ ВизыСогласования.Удалена
				|	И НЕ ВизыСогласования.ПометкаУдаления
				|	И ВизыСогласования.РезультатСогласования В (ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.Согласовано), ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.СогласованоСЗамечаниями))
				|
				|СГРУППИРОВАТЬ ПО
				|	ВизыСогласования.Источник.БизнесПроцесс
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВизыСогласования.Источник.БизнесПроцесс КАК БизнесПроцесс,
				|	МАКСИМУМ(ВизыСогласования.УстановилРезультат) КАК Установил
				|ПОМЕСТИТЬ ВизыСогласовано
				|ИЗ
				|	Справочник.ВизыСогласования КАК ВизыСогласования
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыВизСогласовано КАК ДатыВизСогласовано
				|		ПО ВизыСогласования.Источник.БизнесПроцесс = ДатыВизСогласовано.БизнесПроцесс
				|			И ВизыСогласования.ДатаИсполнения = ДатыВизСогласовано.ДатаИсполнения
				|ГДЕ
				|	НЕ ВизыСогласования.Удалена
				|	И НЕ ВизыСогласования.ПометкаУдаления
				|	И ВизыСогласования.РезультатСогласования В (ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.Согласовано), ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.СогласованоСЗамечаниями))
				|
				|СГРУППИРОВАТЬ ПО
				|	ВизыСогласования.Источник.БизнесПроцесс
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВизыСогласования.Источник.БизнесПроцесс КАК БизнесПроцесс,
				|	МАКСИМУМ(ВизыСогласования.ДатаИсполнения) КАК ДатаИсполнения
				|ПОМЕСТИТЬ ДатыВизНеСогласовано
				|ИЗ
				|	Справочник.ВизыСогласования КАК ВизыСогласования
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияДокументов КАК СостоянияДокументов
				|		ПО ВизыСогласования.Источник.БизнесПроцесс = СостоянияДокументов.Установил
				|			И (СостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.НеСогласован))
				|ГДЕ
				|	НЕ ВизыСогласования.Удалена
				|	И НЕ ВизыСогласования.ПометкаУдаления
				|	И ВизыСогласования.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.НеСогласовано)
				|
				|СГРУППИРОВАТЬ ПО
				|	ВизыСогласования.Источник.БизнесПроцесс
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВизыСогласования.Источник.БизнесПроцесс КАК БизнесПроцесс,
				|	МАКСИМУМ(ВизыСогласования.УстановилРезультат) КАК Установил
				|ПОМЕСТИТЬ ВизыНеСогласовано
				|ИЗ
				|	Справочник.ВизыСогласования КАК ВизыСогласования
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыВизНеСогласовано КАК ДатыВизНеСогласовано
				|		ПО ВизыСогласования.Источник.БизнесПроцесс = ДатыВизНеСогласовано.БизнесПроцесс
				|			И ВизыСогласования.ДатаИсполнения = ДатыВизНеСогласовано.ДатаИсполнения
				|ГДЕ
				|	НЕ ВизыСогласования.Удалена
				|	И НЕ ВизыСогласования.ПометкаУдаления
				|	И ВизыСогласования.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.НеСогласовано)
				|
				|СГРУППИРОВАТЬ ПО
				|	ВизыСогласования.Источник.БизнесПроцесс
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СостоянияДокументов.Документ КАК Документ,
				|	СостоянияДокументов.Состояние КАК Состояние,
				|	ВЫБОР
				|		КОГДА СостоянияДокументов.Установил ССЫЛКА Справочник.Сотрудники
				|			ТОГДА СостоянияДокументов.Установил
				|		ИНАЧЕ ВЫБОР
				|				КОГДА СостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.НеСогласован)
				|					ТОГДА ВизыНеСогласовано.Установил
				|				ИНАЧЕ ВизыСогласовано.Установил
				|			КОНЕЦ
				|	КОНЕЦ КАК Установил,
				|	СостоянияДокументов.ДатаУстановки КАК ДатаУстановки
				|ИЗ
				|	СостоянияДокументов КАК СостоянияДокументов
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВизыСогласовано КАК ВизыСогласовано
				|		ПО СостоянияДокументов.Установил = ВизыСогласовано.БизнесПроцесс
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВизыНеСогласовано КАК ВизыНеСогласовано
				|		ПО СостоянияДокументов.Установил = ВизыНеСогласовано.БизнесПроцесс";
			ЗапросИзменения.УстановитьПараметр("ИнтегрированнаяСистема", ИнтегрированнаяСистема);
			ЗапросИзменения.УстановитьПараметр("НомерСообщения", НомерСообщения);
			ЗапросИзменения.УстановитьПараметр("СостоянияСогласования", СостоянияСогласования());
			
			Выборка = ЗапросИзменения.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				СтруктураЗаписи = Новый Структура;
				СтруктураЗаписи.Вставить("ЭтоСсылка", Ложь);
				СтруктураЗаписи.Вставить("Документ", Выборка.Документ);
				СтруктураЗаписи.Вставить("Состояние", Выборка.Состояние);
				СтруктураЗаписи.Вставить("Установил", Выборка.Установил);
				СтруктураЗаписи.Вставить("ДатаУстановки", Выборка.ДатаУстановки);
				МассивДанных.Добавить(СтруктураЗаписи);
			КонецЦикла;
			
		Иначе
			// Ссылочный тип.
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ТаблицаИзменения.Ссылка,
				|	СвязиОбъектовИнтегрированныхСистем.ИДВнешнегоОбъекта КАК ИДВнешнегоОбъекта,
				|	СвязиОбъектовИнтегрированныхСистем.ТипВнешнегоОбъекта КАК ТипВнешнегоОбъекта
				|ИЗ
				|	%1.Изменения КАК ТаблицаИзменения
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК СвязиОбъектовИнтегрированныхСистем
				|		ПО (СвязиОбъектовИнтегрированныхСистем.УзелИнтегрированнойСистемы = &ИнтегрированнаяСистема)
				|			И (СвязиОбъектовИнтегрированныхСистем.СсылкаНаОбъектДО = ТаблицаИзменения.Ссылка)
				|ГДЕ
				|	ТаблицаИзменения.Узел = &ИнтегрированнаяСистема
				|	И ТаблицаИзменения.НомерСообщения = &НомерСообщения";
			ЗапросИзменения.Текст = СтрШаблон(ТекстЗапроса, ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя());
			ЗапросИзменения.УстановитьПараметр("ИнтегрированнаяСистема", ИнтегрированнаяСистема);
			ЗапросИзменения.УстановитьПараметр("НомерСообщения", НомерСообщения);
			
			Выборка = ЗапросИзменения.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				СтруктураЗаписи = Новый Структура;
				СтруктураЗаписи.Вставить("ЭтоСсылка", Истина);
				СтруктураЗаписи.Вставить("ОбъектДО", Выборка.Ссылка);
				СтруктураЗаписи.Вставить("ИДВнешнегоОбъекта", Выборка.ИДВнешнегоОбъекта);
				СтруктураЗаписи.Вставить("ТипВнешнегоОбъекта", Выборка.ТипВнешнегоОбъекта);
				МассивДанных.Добавить(СтруктураЗаписи);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПреобразоватьРеквизитОбъектаДОВОбъектXDTO(ИмяРеквизита, ЗначениеРеквизита)
	
	Результат = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDataAttribute");
	Результат.name = ИмяРеквизита;
	
	Попытка
		
		ТипРеквизита = ТипЗнч(ЗначениеРеквизита);
		
		Если ТипРеквизита = Тип("Неопределено") Тогда
			// Свойство value оставляем не установленным.
			
		ИначеЕсли ТипРеквизита = Тип("ОбъектXDTO") Тогда
			ОбработкаЗапросовXDTO.СкопироватьОбъектXDTO(Результат.value, ЗначениеРеквизита);
			
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипРеквизита) Тогда
			ИмяТипаXDTO = ОбработкаЗапросовXDTO.ПолучитьТипXDTOПоТипуДО(ТипРеквизита, Ложь);
			
			Если ЗначениеРеквизита.Пустая() Тогда
				// Свойство value оставляем не установленным.
				
			ИначеЕсли Не ЗначениеЗаполнено(ИмяТипаXDTO) Тогда
				Результат.value = ОбработкаЗапросовXDTO.ПолучитьНеОписанныйОбъектПоСсылке(ЗначениеРеквизита);
				
			ИначеЕсли ОбработкаЗапросовXDTO.ЭтоПеречисление(ЗначениеРеквизита) Тогда
				Результат.value = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ЗначениеРеквизита);
				
			Иначе
				Результат.value = ОбработкаЗапросовXDTO.ПолучитьОбъектXDTOПоСуществующимДаннымДО(
					ЗначениеРеквизита,
					Неопределено);
				
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита = Тип("Строка")
				Или ТипРеквизита = Тип("Число")
				Или ТипРеквизита = Тип("Дата")
				Или ТипРеквизита = Тип("Булево") Тогда
			Результат.value = ЗначениеРеквизита;
			
		ИначеЕсли ТипРеквизита = Тип("УникальныйИдентификатор") Тогда
			Результат.value = Строка(ЗначениеРеквизита);
			
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно выгрузить данные из реквизита ""%1"" с типом ""%2"".'"),
				ИмяРеквизита,
				ТипРеквизита);
			
		КонецЕсли;
		
	Исключение
		
		Результат.error = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьТаблицуОбъектаДОВОбъектXDTO(ИмяТаблицы, ТаблицаЗначений, Колонки, ОбъектXDTO = Неопределено)
	
	Результат = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDataTabularSection");
	Результат.name = ИмяТаблицы;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDataTabularSectionRow");
		
		Для Каждого Колонка Из Колонки Цикл
			СтрокаXDTO.attributes.Добавить(
				ПреобразоватьРеквизитОбъектаДОВОбъектXDTO(Колонка.Имя, Строка[Колонка.Имя]));
		КонецЦикла;
		
		Результат.rows.Добавить(СтрокаXDTO);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Создание нового сообщения интегрированных систем и помещение его в очередь.
// У сообщения устанавливается признак того, что оно находится в стадии подготовки (процент готовности = 0).
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - узел-получатель.
//   НомерСообщения - Число - номер сообщения в плане обмена.
//   ДанныеДляПередачи - Массив из Структура - данные, для передачи в интегрированную систему.
//   СоответствиеСпискаВыраженийОбъектамДО - Соответствие из КлючИЗначение:
//     * Ключ - ЛюбаяСсылка
//     * Значение - Массив из ОбъектXDTO - список выражений на встроенном языке, которые требуется
//         выполнить на стороне ДО, для последующей передачи на сторону ИС и заполнения там связанного объекта.
//
Процедура СоздатьНовоеСообщение(ИнтегрированнаяСистема, НомерСообщения, ДанныеДляПередачи,
		СоответствиеСпискаВыраженийОбъектамДО)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредельноеКоличествоОбъектовВСообщении = 10;
	РаботаСИнтегрированнымиСистемамиПереопределяемый.ПриОпределенииПредельногоКоличестваОбъектовВСообщенииОбмена(
		ПредельноеКоличествоОбъектовВСообщении);
	
	ПорцииОбъектов = Новый Массив;
	
	ОбъектыXDTO = Новый Массив;
	ЗаписиXDTO = Новый Массив;
	
	Для Каждого ЭлементДанных Из ДанныеДляПередачи Цикл
		Попытка
			Если ЭлементДанных.ЭтоСсылка Тогда
				ОбъектДО = ЭлементДанных.ОбъектДО.ПолучитьОбъект();
				ОбъектXDTO = ОбработкаЗапросовXDTO.ПолучитьОбъектXDTOПоСуществующимДаннымДО(
					ОбъектДО,
					Неопределено,,
					ИнтегрированнаяСистема);
				ЗаполнитьДанныеИзСпискаВыражений(
					ОбъектДО,
					ОбъектXDTO,
					СоответствиеСпискаВыраженийОбъектамДО[ОбъектДО.Ссылка]);
				ОбъектыXDTO.Добавить(ОбъектXDTO);
				Если ОбъектыXDTO.Количество() = ПредельноеКоличествоОбъектовВСообщении Тогда
					ПорцииОбъектов.Добавить(ОбъектыXDTO);
					ОбъектыXDTO = Новый Массив;
				КонецЕсли;
			Иначе
				ЗаписьXDTO = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьЗаписьСостоянияСогласования(
					ЭлементДанных);
				ЗаписиXDTO.Добавить(ЗаписьXDTO);
				Если ЗаписиXDTO.Количество() = ПредельноеКоличествоОбъектовВСообщении Тогда
					ПорцииОбъектов.Добавить(ЗаписиXDTO);
					ЗаписиXDTO = Новый Массив;
				КонецЕсли;
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(
				РаботаСИнтегрированнымиСистемами.ИмяСобытияЖурналаРегистрации(
					НСтр("ru = 'Формирование сообщения обмена'", ОбщегоНазначения.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,,
				ЭлементДанных,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Если ОбъектыXDTO.Количество() > 0 Тогда
		ПорцииОбъектов.Добавить(ОбъектыXDTO);
	КонецЕсли;
	Если ЗаписиXDTO.Количество() > 0 Тогда
		ПорцииОбъектов.Добавить(ЗаписиXDTO);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ПорцияОбъектов Из ПорцииОбъектов Цикл
			ВыгрузитьПорциюОбъектовXDTOВСообщение(ИнтегрированнаяСистема, ПорцияОбъектов);
		КонецЦикла;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ИнтегрированнаяСистема, НомерСообщения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			РаботаСИнтегрированнымиСистемами.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Формирование сообщения обмена'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция СоответствиеСпискаВыраженийОбъектамДО(Прокси, СписокОбъектовДО)
	
	Результат = Новый Соответствие;
	
	Если СписокОбъектовДО.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = РаботаСИнтегрированнымиСистемами.СоздатьОбъект(Прокси, "DMILGetExpressionListRequest");
	
	Для Каждого СтруктураДанных Из СписокОбъектовДО Цикл
		Если СтруктураДанных.ЭтоСсылка Тогда
			ObjectID = РаботаСИнтегрированнымиСистемами.СоздатьObjectID(
				Прокси,
				СтруктураДанных.ИДВнешнегоОбъекта,
				СтруктураДанных.ТипВнешнегоОбъекта);
			Запрос.objects.Добавить(ObjectID);
			Результат.Вставить(СтруктураДанных.ОбъектДО, Новый Массив);
		КонецЕсли;
	КонецЦикла;
	
	Если Запрос.objects.Количество() > 0 Тогда
		Ответ = Прокси.execute(Запрос);
		РаботаСИнтегрированнымиСистемами.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		МассивВсехВыражений = Ответ.objectsExpressionRows;
	Иначе
		МассивВсехВыражений = Новый Массив;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивВсехВыражений Цикл
		
		Если Не ОбработкаЗапросовXDTO.СвойствоУстановлено(Элемент, "expressionRows")
				Или Элемент.expressionRows.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтруктураДанных Из СписокОбъектовДО Цикл
			Если СтруктураДанных.ЭтоСсылка
					И СтруктураДанных.ИДВнешнегоОбъекта = Элемент.object.id
					И СтруктураДанных.ТипВнешнегоОбъекта = Элемент.object.type Тогда
				Результат.Вставить(СтруктураДанных.ОбъектДО, Элемент.expressionRows);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СостоянияСогласования()
	
	СостоянияСогласования = Новый Массив;
	СостоянияСогласования.Добавить(Перечисления.СостоянияДокументов.НаСогласовании);
	СостоянияСогласования.Добавить(Перечисления.СостоянияДокументов.Согласован);
	СостоянияСогласования.Добавить(Перечисления.СостоянияДокументов.НеСогласован);
	
	Возврат СостоянияСогласования;
	
КонецФункции

Процедура УдалитьСообщения(ИнтегрированнаяСистема, ТаблицаСообщений, РегистрМенеджер)
	
	СтрокиПоИС = ТаблицаСообщений.НайтиСтроки(Новый Структура("ИнтегрированнаяСистема", ИнтегрированнаяСистема));
	Для Каждого Строка Из СтрокиПоИС Цикл
		МенеджерЗаписи = РегистрМенеджер.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИнтегрированнаяСистема = ИнтегрированнаяСистема;
		МенеджерЗаписи.МоментВремени = Строка.МоментВремени;
		МенеджерЗаписи.Идентификатор = Строка.Идентификатор;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив узлов интегрированных систем для регистрации указанной ссылки на объект ДО.
//
// Параметры:
//   Ссылка - СправочникСсылка - ссылка на объект ДО.
//
// Возвращаемое значение:
//   Массив из ПланОбменаСсылка.ИнтегрированныеСистемы - узлы для регистрации.
//
Функция УзлыДляРегистрацииОбъектаДО(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Перед выполнением запроса удостоверимся, что узлы вообще есть.
	ВсеУзлы = ОбработкаЗапросовXDTOПовтИсп.УзлыОбменаИнтегрированныхСистем();
	Если ВсеУзлы.Количество() = 0 Тогда
		Возврат ВсеУзлы;
	КонецЕсли;
	
	// Регистрируем только объекты, связи которых зафиксированы в РС.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Связи.УзелИнтегрированнойСистемы КАК Узел
		|ИЗ
		|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК Связи
		|ГДЕ
		|	СсылкаНаОбъектДО = &Ссылка
		|	И УзелИнтегрированнойСистемы <> ЗНАЧЕНИЕ(ПланОбмена.ИнтегрированныеСистемы.ПустаяСсылка)");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Узлы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");
	Возврат Узлы;
	
КонецФункции

#КонецОбласти