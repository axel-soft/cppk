#Область ПрограммныйИнтерфейс

// Возвращает массив Структур для файлов doc docx
// ФайлСсылка, ТекущаяВерсия, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла
//
// Параметры 
// Документ - ссылка на документ
// УникальныйИдентификатор - уникальный идентификатор формы
// СпособСогласованияВРежимеЗамечаний - Перечисление.СпособыСогласованияВРежимеЗамечаний
//
// Возвращаемое значение - Массив
//
Функция ПодготовитьМассивФайловПараллельногоСогласованияПоДокументу(Документ,
	УникальныйИдентификатор, СпособСогласованияВРежимеЗамечаний, ЧислоСтраницДляПредпросмотраПорции = 0) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпособСогласованияВРежимеЗамечаний = Константы.СпособСогласованияВРежимеЗамечаний.Получить();

	МассивФайлов = Новый Массив;
	СоответствиеСтарыхФайлов = Новый Соответствие; // ключ - WordФайл, значение - СтарыйHTMLФайл.

	Если ЗначениеЗаполнено(Документ) И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(
		Документ) Тогда

		ВладелецФайла = Документ;

		ОчиститьСтарыеПриложенныеФайлы(ВладелецФайла, СоответствиеСтарыхФайлов);
		ТекФайлы = Делопроизводство.ПолучитьФайлыДокументаДляСогласованияВРежимеЗамечаний(
			ВладелецФайла);
		Для Каждого Файл Из ТекФайлы Цикл
			МассивФайлов.Добавить(Файл);
		КонецЦикла;
		
		// найдем первый ДействияСогласования по документу
		Действие = ДействиеСогласованияПоДокументу(Документ);
		
		Если ЗначениеЗаполнено(Действие) Тогда
			ЧислоСтраницДляПредпросмотраПорции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ЧислоСтраницДляПредпросмотраПорции");    
		Иначе	
			ЧислоСтраницДляПредпросмотраПорции = СогласованиеВРежимеЗамечанийКлиентСерверПереопределяемый.ЧислоСтраницДляПредпросмотраПорции();    
		КонецЕсли;	
		
	КонецЕсли;

	Возврат ПодготовитьМассивФайловПараллельногоСогласования_ПоМассиву(
			Документ, МассивФайлов, УникальныйИдентификатор, СоответствиеСтарыхФайлов);

КонецФункции	

// Возвращает массив Структур для файлов doc docx
// ФайлСсылка, ТекущаяВерсия, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла
//
// Параметры 
// Предметы - табл часть Предметы
// УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение - Массив
//
Функция ПодготовитьМассивФайловПараллельногоСогласования(Знач Предметы, УникальныйИдентификатор) Экспорт

	МассивФайлов = Новый Массив;
	СоответствиеСтарыхФайлов = Новый Соответствие; // ключ - WordФайл, значение - СтарыйHTMLФайл.
	
	Документ = Неопределено;

	Для Каждого Элемент Из Предметы Цикл

		Если ЗначениеЗаполнено(Элемент.Предмет)
			И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Элемент.Предмет) Тогда

			ВладелецФайла = Элемент.Предмет;
			Документ = ВладелецФайла;

			ОчиститьСтарыеПриложенныеФайлы(ВладелецФайла, СоответствиеСтарыхФайлов);
			ТекФайлы = ПолучитьПриложенныеФайлы(ВладелецФайла);
			Для Каждого Файл Из ТекФайлы Цикл
				МассивФайлов.Добавить(Файл);
			КонецЦикла;	
			
		КонецЕсли;

	КонецЦикла;

	Возврат ПодготовитьМассивФайловПараллельногоСогласования_ПоМассиву(
			Документ, МассивФайлов, УникальныйИдентификатор, СоответствиеСтарыхФайлов);

КонецФункции

Функция ПолучитьПоказыватьОтличияОтШаблона(ФайлСсылка)
	
	Возврат Ложь;

КонецФункции

// Возвращает массив Структур для файлов doc docx
// ФайлСсылка, ТекущаяВерсия, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла
//
// Параметры 
// МассивФайлов - массив ссылок на файлы
// УникальныйИдентификатор - уникальный идентификатор формы
// СоответствиеСтарыхФайлов - Соответствие. ключ - файл doc, значение - ссылка на файл html старый
// ЭтоВторойЦиклИлиВыше - Булево
//
// Возвращаемое значение - Массив
//
Функция ПодготовитьМассивФайловПараллельногоСогласования_ПоМассиву(Документ, МассивФайлов,
	УникальныйИдентификатор, СоответствиеСтарыхФайлов = Неопределено, ЭтоВторойЦиклИлиВыше = Ложь) Экспорт

	МассивСтруктурРезультата = Новый Массив;
	ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(МассивФайлов,
		УникальныйИдентификатор);

	ТаблицаФайлов = ПолучитьПараметрыФайлов(Документ, МассивФайлов);

	Для Каждого Данные Из ДанныеФайлов Цикл

		СтруктураРезультата 
			= Новый Структура("ФайлСсылка, ТекущаяВерсия, Владелец, Наименование, Расширение, 
			|АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML, РазмерHTMLФайла, 
			|РежимТолькоРеквизиты, ШаблонОснованиеДляСоздания, СтарыйHTMLФайл, ЭтоЛНА, ВладелецТиповой, 
			|ТипОчереди, МассивHTMLФайлов");

		СтруктураРезультата.РежимТолькоРеквизиты = Ложь;

		Если СоответствиеСтарыхФайлов <> Неопределено Тогда
			СтарыйHTMLФайл = СоответствиеСтарыхФайлов.Получить(Данные.Ссылка);
			Если СтарыйHTMLФайл <> Неопределено Тогда
				СтруктураРезультата.СтарыйHTMLФайл = СтарыйHTMLФайл;
			КонецЕсли;
		КонецЕсли;

		Индекс = ДанныеФайлов.Найти(Данные);
		Если Индекс <> Неопределено И ТаблицаФайлов.Количество() = ДанныеФайлов.Количество() Тогда

			ФайлПарам = ТаблицаФайлов[Индекс];
			
			// 1 - т.е. отличается от шаблона
			СтруктураРезультата.РежимТолькоРеквизиты 
				= (ФайлПарам.ОтличаетсяОтШаблона = 1) И ФайлПарам.ЕстьПравилаАвтозаполнения;

			ПоказыватьОтличияОтШаблона = ПолучитьПоказыватьОтличияОтШаблона(Данные.Ссылка);
			СтруктураРезультата.Вставить("ПоказыватьОтличияОтШаблона", ПоказыватьОтличияОтШаблона);

			Если СтруктураРезультата.РежимТолькоРеквизиты = Истина Тогда
				Если ПоказыватьОтличияОтШаблона = Ложь Тогда
					СтруктураРезультата.РежимТолькоРеквизиты = Ложь;
				КонецЕсли;
			КонецЕсли;

			СтруктураРезультата.ШаблонОснованиеДляСоздания	 = ФайлПарам.ШаблонОснованиеДляСоздания;

			Если ПоказыватьОтличияОтШаблона = Истина И ЗначениеЗаполнено(
				СтруктураРезультата.ШаблонОснованиеДляСоздания) Тогда
				СтруктураРезультата.Вставить(
					"ДвоичныеДанныеФайлаШаблона",
					РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(
					СтруктураРезультата.ШаблонОснованиеДляСоздания));
			КонецЕсли;

		КонецЕсли;

		СтруктураРезультата.ФайлСсылка = Данные.Ссылка;
		СтруктураРезультата.Расширение = Данные.Расширение;
		СтруктураРезультата.Наименование = Данные.ПолноеНаименованиеВерсии;
		СтруктураРезультата.АдресВременногоХранилищаФайлаDoc = Данные.НавигационнаяСсылкаТекущейВерсии;
		СтруктураРезультата.Владелец = Данные.Владелец;
		СтруктураРезультата.ТекущаяВерсия = Данные.ТекущаяВерсия;

		СтруктураРезультата.ЭтоЛНА = Ложь;
		Если ЗначениеЗаполнено(СтруктураРезультата.ШаблонОснованиеДляСоздания) Тогда

			Документ = СтруктураРезультата.Владелец;
			Если ТипЗнч(Документ) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда

				Рез = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ВидДокумента, Шаблон"); // Типовой, 
				Рез.Вставить("Типовой", Ложь);

				ШаблонДокументаТиповой = Ложь;

				Если ШаблонДокументаТиповой Тогда

					СтруктураРезультата.ВладелецТиповой = ШаблонДокументаТиповой;

					ПарольЗащитыWord = "";

					Если ЭтоВторойЦиклИлиВыше = Ложь Тогда

						СтруктураРезультата.Вставить(
							"ДвоичныеДанныеФайлаШаблона",
							РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(
							СтруктураРезультата.ШаблонОснованиеДляСоздания));

					Иначе  // тут надо взять предыдущую версию doc файла	

						Если ЗначениеЗаполнено(СтруктураРезультата.ТекущаяВерсия) Тогда

							РодительскаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								СтруктураРезультата.ТекущаяВерсия, "РодительскаяВерсия");

							Если ЗначениеЗаполнено(РодительскаяВерсия) Тогда

								СтруктураРезультата.Вставить(
									"ДвоичныеДанныеФайлаШаблона", РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(
									РодительскаяВерсия));
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

		МассивСтруктурРезультата.Добавить(СтруктураРезультата);

	КонецЦикла;

	Возврат МассивСтруктурРезультата;

КонецФункции			

// Получает все документы, включая корень
Функция ПолучитьВсеДокументы(ВладелецФайла) Экспорт

	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ВладелецФайла);
	
	Возврат МассивДокументов;

КонецФункции	
	
// Получает файлы у владельца doc docx. Если владелец - комплект, то и файлы документов комплекта
Функция ПолучитьВсеПриложенныеФайлы(ВладелецФайла) Экспорт

	МассивФайлов = Новый Массив;

	ТекФайлы = ПолучитьПриложенныеФайлыДляТаблицыФайлы(ВладелецФайла);
	Для Каждого Файл Из ТекФайлы Цикл
		МассивФайлов.Добавить(Файл);
	КонецЦикла;	
	
	Возврат МассивФайлов;

КонецФункции	

//  Получает параметры (Наименование Расширение и пр) для массива файлов. Вернет таблицу значений.
//  
// Параметры
//  Документ - СправочникСсылка.ДокументыПредприятия
//  МассивФайлов - Массив - массив ссылок СправочникСсылка.Файлы
//  
//  Возвращаемое значение - ТаблицаЗначений
//
Функция ПолучитьПараметрыФайлов(Документ, МассивФайлов) Экспорт

	Если МассивФайлов.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
	|	Файлы.ТекущаяВерсияРазмер / 1024 КАК ТекущаяВерсияРазмер,
	|	ВЫБОР
	|		КОГДА Файлы.ПометкаУдаления = ИСТИНА
	|			ТОГДА Файлы.ИндексКартинки + 1
	|		ИНАЧЕ Файлы.ИндексКартинки
	|	КОНЕЦ КАК ИндексКартинки,
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.ВладелецФайла КАК ВладелецФайла,
	|	Файлы.Редактирует КАК Редактирует,
	|	ИСТИНА КАК ИдентиченШаблону,
	|	ЛОЖЬ КАК ОтличаетсяОтШаблона,
	|	Файлы.ШаблонОснованиеДляСоздания КАК ШаблонОснованиеДляСоздания,
	|	ИСТИНА КАК ОсновнойБулево,
	|	1 КАК Основной,
	|	ЕСТЬNULL(СведенияОФайлахДокументооборот.ПорядковыйНомерВложения, 0) КАК ПорядковыйНомерВложения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Файлы.ШаблонОснованиеДляСоздания.ВладелецФайла) В (&ТипыШаблонов)
	|			ТОГДА 1
	|		КОГДА Файлы.ШаблонОснованиеДляСоздания = ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СозданНаОснованиШаблона,
	|	НЕ ПредпросмотрФайлов.Файл ЕСТЬ NULL КАК ПредпросмотрЕстьВБазе
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
	|		ПО (СведенияОФайлахДокументооборот.Файл = Файлы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредпросмотрФайлов КАК ПредпросмотрФайлов
	|		ПО (ПредпросмотрФайлов.Файл = Файлы.Ссылка)
	|			И (ПредпросмотрФайлов.ВерсияФайла = Файлы.ТекущаяВерсия)
	|			И (ПредпросмотрФайлов.НомерБлока = 0)
	|ГДЕ
	|	Файлы.Ссылка В(&МассивФайлов)";
	
	
	ТипыШаблонов = Новый Массив;
	ТипыШаблонов.Добавить(Тип("СправочникСсылка.ШаблоныДокументов"));

	Запрос.УстановитьПараметр("МассивФайлов", МассивФайлов);
	Запрос.УстановитьПараметр("ТипыШаблонов", ТипыШаблонов);

	Результат = Запрос.Выполнить().Выгрузить();

	Результат.Колонки.Добавить();
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Результат.Колонки.Добавить("ЕстьПравилаАвтозаполнения", ОписаниеТипов);

	Результат.Колонки.Добавить();
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.РолиФайлов");
	Результат.Колонки.Добавить("Роль", ОписаниеТипов);

	Результат.Колонки.Добавить();
	ОписаниеТипов = Новый ОписаниеТипов("Число");
	Результат.Колонки.Добавить("ПорядковыйНомерРоли", ОписаниеТипов);
	
	// Прочитаем РолиФайловДокументов для массива файлов
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РолиФайловДокументов.Файл КАК Файл,
		|	РолиФайловДокументов.Роль КАК Роль
		|ИЗ
		|	РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
		|ГДЕ
		|	РолиФайловДокументов.Файл В(&Файлы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файл";
	Запрос.УстановитьПараметр("Файлы", МассивФайлов);
	ТаблРоли = Запрос.Выполнить().Выгрузить();
	
	РолиПоВиду = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
	НомераРолей = Новый Соответствие; // ключ -роль, значение - номер
	НомерРоли = 0;
	Для Каждого Стр Из РолиПоВиду Цикл
		НомераРолей[Стр.Роль] = НомерРоли;
		НомерРоли = НомерРоли + 1;
	КонецЦикла;	 

	Для Каждого Строка Из Результат Цикл

		Если Строка.ОсновнойБулево = Истина Тогда
			Строка.Основной = 1;
		Иначе
			Строка.Основной = 0;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					   |	ПравилаАвтозаполненияФайлов.Ссылка КАК Ссылка
					   |ИЗ
					   |	Справочник.ПравилаАвтозаполненияФайлов КАК ПравилаАвтозаполненияФайлов
					   |ГДЕ
					   |	ПравилаАвтозаполненияФайлов.ШаблонФайла = &ШаблонФайла";

		Запрос.УстановитьПараметр("ШаблонФайла", Строка.ШаблонОснованиеДляСоздания);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Строка.ЕстьПравилаАвтозаполнения = Ложь;
		Иначе
			Строка.ЕстьПравилаАвтозаполнения = Истина;
		КонецЕсли;
		
		СтрТаблРоли = ТаблРоли.Найти(Строка.Ссылка, "Файл");
		Если СтрТаблРоли <> Неопределено Тогда
			Строка.Роль = СтрТаблРоли.Роль;
		КонецЕсли;
		
		НомерРоли = НомераРолей[Строка.Роль];
		Если НомерРоли <> Неопределено Тогда
			Строка.ПорядковыйНомерРоли = НомерРоли;
		КонецЕсли;	

	КонецЦикла;

	Результат.Сортировать("ПорядковыйНомерРоли, ПорядковыйНомерВложения, Наименование");

	Возврат Результат;

КонецФункции

// Вернет все файлы в документе
// Параметры
// ВладелецФайла - ОпределяемыйТип.ВладелецФайла-  например документ
// 
// Возвращаемое значение - Массив
//
Функция ПолучитьПриложенныеФайлыДляТаблицыФайлы(ВладелецФайла) Экспорт

	МассивФайлов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ
	|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";

	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивФайлов.Добавить(Выборка.Ссылка);
	КонецЦикла;

	Возврат МассивФайлов;

КонецФункции

// очищает старые файлы - могли остаться от ранее запущенных и прерванных процессов
// Параметры
// ВладелецФайла - ОпределяемыйТип.ВладелецФайла-  например документ
//
Процедура ОчиститьСтарыеПриложенныеФайлы(ВладелецФайла, СоответствиеСтарыхФайлов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	МассивФайлов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
	|	СлужебныеФайлыДокументов.Отношение КАК Отношение,
	|	СлужебныеФайлыДокументов.Файл КАК Файл,
	|	СлужебныеФайлыДокументов.Владелец КАК Владелец
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Владелец = Файлы.Ссылка)
	|			И (СлужебныеФайлыДокументов.Документ = &ВладелецФайла)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ
	|	И НЕ СлужебныеФайлыДокументов.Документ ЕСТЬ NULL";

	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивФайлов.Добавить(Выборка.Файл);
		СоответствиеСтарыхФайлов[Выборка.Владелец] = Выборка.Файл;
	КонецЦикла;

	Для Каждого Файл Из МассивФайлов Цикл

		Попытка

			НачатьТранзакцию();

			ФайлОбъект = Файл.ПолучитьОбъект();
			ФайлОбъект.ДополнительныеСвойства.Вставить("УдалениеСлужебногоФайла", Истина);
			ФайлОбъект.УстановитьПометкуУдаления(Истина, Ложь); // Ложь - без подчиненных.
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВерсииФайлов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВерсииФайлов КАК ВерсииФайлов
			|ГДЕ
			|	ВерсииФайлов.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", Файл);
			ВерсииМассив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Для Каждого Версия Из ВерсииМассив Цикл
				
				ВерсияОбъект = Версия.ПолучитьОбъект();
				ВерсияОбъект.ДополнительныеСвойства.Вставить("УдалениеСлужебногоФайла", Истина);
				ВерсияОбъект.УстановитьПометкуУдаления(Истина, Ложь); // Ложь - без подчиненных.
				
			КонецЦикла;	

			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();
			ВызватьИсключение;

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры	

// Получает файлы у владельца doc docx
// Параметры
// ВладелецФайла - ОпределяемыйТип.ВладелецФайла-  например документ
// 
// Возвращаемое значение - Массив
//
Функция ПолучитьПриложенныеФайлы(ВладелецФайла) Экспорт

	МассивФайлов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Владелец = Файлы.Ссылка)
	|			И (СлужебныеФайлыДокументов.Документ = &ВладелецФайла)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
	|		ПО (СведенияОФайлах.Файл = Файлы.Ссылка)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ
	|	И СлужебныеФайлыДокументов.Документ ЕСТЬ NULL";

	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Выборка.Расширение) Тогда
			МассивФайлов.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;

	Возврат МассивФайлов;

КонецФункции

// Создает файлы HTML, делает запись в РС СлужебныеФайлыДокументов 
//
//Параметры
//  МассивФайловПараллельногоСогласования - массив структур ФайлСсылка, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла
//  ВызовИзОбработкиПараллелРан - Булево
//  Действие - ссылка на действие
//  ТипОчереди - перечисление
//
Процедура СоздатьHTMLФайлы(МассивФайловПараллельногоСогласования, ВызовИзОбработкиПараллелРан = Ложь,
	Действие = Неопределено, ТипОчереди = Неопределено) Экспорт
	
	ТребуетсяДолгаяОбработка = Ложь;
	Если ТипОчереди = Перечисления.ТипОчередиПодготовкиКСогласованию.Долгая  Тогда
		ТребуетсяДолгаяОбработка = Истина;
	КонецЕсли;	

	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтруктураФайла Из МассивФайловПараллельногоСогласования Цикл

		Если Не ЗначениеЗаполнено(СтруктураФайла.АдресВременногоХранилищаФайлаHTML)
			И Не ЗначениеЗаполнено(СтруктураФайла.МассивHTMLФайлов) Тогда
			Продолжить;
		КонецЕсли;	    
		
		Для Каждого СтруктПорции Из СтруктураФайла.МассивHTMLФайлов Цикл
		
			//получим html
			
			НомерБлока = СтруктПорции.НомерБлока;
			АдресВременногоХранилищаФайлаHTML = СтруктПорции.АдресВременногоХранилищаФайлаHTML;
			РазмерHTMLФайла = СтруктПорции.РазмерHTMLФайла;
			
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(
				АдресВременногоХранилищаФайлаHTML);

			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
			ДвоичныеДанные.Записать(ИмяВременногоФайла);

			ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,
				СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
			ТекстHTML = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();

			УдалитьФайлы(ИмяВременногоФайла);

			ЕстьКартинкиВHTML = Ложь;
			Если СтруктураФайла.Свойство("ТребуетсяОжиданиеКартинок")
				И СтруктураФайла.ТребуетсяОжиданиеКартинок = Истина Тогда
				ЕстьКартинкиВHTML = Истина;
			КонецЕсли;
			Если ЕстьКартинкиВHTML И СтруктураФайла.Картинки.Количество() = 0 Тогда

				Описание = СтрШаблон( НСтр("ru = 'Документ: %1
										   |ссылка документа: %2 
										   |файл: %3'"), Строка(СтруктураФайла.Владелец),
					ПолучитьНавигационнуюСсылку(СтруктураФайла.Владелец), СтруктураФайла.Наименование);

				УведомитьОтветственныхОПроблеме(
					НСтр("ru = 'Нет картинок, хотя в html есть ссылки img'"), Описание, НСтр(
					"ru = 'Нет картинок для html.'"));

			КонецЕсли;

			Попытка

				НачатьТранзакцию();

				ДопустимаяДлинаИмениФайла = 50;
				ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;

				Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
					ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное,
						ДопустимаяДлинаИмениФайла);
					ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
				КонецЕсли;

				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
				СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайлаHTML;
				СведенияОФайле.ИмяБезРасширения = ИмяБезРасширенияУрезанное;
				СведенияОФайле.РасширениеБезТочки = "html";
				СведенияОФайле.ВремяИзменения = ТекущаяДата();
				СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
				СведенияОФайле.Размер = РазмерHTMLФайла;

				ФайлHTMLСсылка =  РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
					СтруктураФайла.Владелец, СведенияОФайле);

				РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
					СтруктураФайла.Владелец, СтруктураФайла.ФайлСсылка,
					Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание, ФайлHTMLСсылка, Неопределено,
					ТребуетсяДолгаяОбработка,,НомерБлока);

				Если СтруктураФайла.Свойство("СтарыйHTMLФайл") Тогда
					СтарыйHTMLФайл = СтруктураФайла.СтарыйHTMLФайл;
					НовыйHTMLФайл = ФайлHTMLСсылка;
					ЗаменитьФайлВПравках(СтарыйHTMLФайл, НовыйHTMLФайл);
				КонецЕсли;

				Для Каждого СтруктураКартинки Из СтруктураФайла.Картинки Цикл

					СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
					СведенияОФайле.АдресВременногоХранилищаФайла = СтруктураКартинки.АдресВременногоХранилища;
					СведенияОФайле.ИмяБезРасширения = СтруктураКартинки.Имя;
					СведенияОФайле.РасширениеБезТочки = СтруктураКартинки.Расширение;
					СведенияОФайле.ВремяИзменения = ТекущаяДата();
					СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
					СведенияОФайле.Размер = СтруктураКартинки.Размер;

					ФайлКартинкиСсылка =  РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
						СтруктураФайла.Владелец, СведенияОФайле);

					РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
						СтруктураФайла.Владелец, ФайлHTMLСсылка, // Владелец - HTML файл
						Перечисления.ОтношенияСлужебныхФайлов.Картинка, ФайлКартинкиСсылка);

					РегистрыСведений.ИдентификаторыВложенийWord.УстановитьИдентификаторВложения(
						ФайлКартинкиСсылка, СтруктураКартинки.ИдентификаторВложения);

				КонецЦикла;

				ЗафиксироватьТранзакцию();

			Исключение

				ОтменитьТранзакцию();
				ВызватьИсключение;

			КонецПопытки;  
		
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры	

// Создает новую версию для файлов HTML
//
//Параметры
//  МассивФайловПараллельногоСогласования - массив структур ФайлСсылка, ФайлHTMLСсылка, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла
Процедура ОбновитьHTMLФайлы(МассивФайловПараллельногоСогласования) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого СтруктураФайла Из МассивФайловПараллельногоСогласования Цикл

		Если Не ЗначениеЗаполнено(СтруктураФайла.ФайлHTMLСсылка) Тогда
			Продолжить;
		КонецЕсли;

		Попытка

			НачатьТранзакцию();

			ДопустимаяДлинаИмениФайла = 50;
			ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;

			Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
				ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное,
					ДопустимаяДлинаИмениФайла);
				ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
			КонецЕсли;

			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.АдресВременногоХранилищаФайла = СтруктураФайла.АдресВременногоХранилищаФайлаHTML;
			СведенияОФайле.ИмяБезРасширения = ИмяБезРасширенияУрезанное;
			СведенияОФайле.РасширениеБезТочки = "html";
			СведенияОФайле.ВремяИзменения = ТекущаяДата();
			СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
			СведенияОФайле.Размер = СтруктураФайла.РазмерHTMLФайла;

			ФайлHTMLСсылка = СтруктураФайла.ФайлHTMLСсылка;
			ОбновлятьНеГлядяНаБлокировку = Истина;
			РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
				ФайлHTMLСсылка, СведенияОФайле, ОбновлятьНеГлядяНаБлокировку);

			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();
			ВызватьИсключение;

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры	

// Создает версию HTML Файла, делает запись в РС СлужебныеФайлыДокументов
// 
//  Параметры 
//  СтруктураФайла - Структура
//  ПравкиТаблица - ТаблицаЗначений
//
Процедура СоздатьВерсиюHTMLФайла(СтруктураФайла, ПравкиТаблица = Неопределено) Экспорт

	Попытка
		
		НачатьТранзакцию();

		СтарыеHtmlФайлы = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьВсеСлужебныеФайлыСНомеромБлока(
			СтруктураФайла.Владелец, СтруктураФайла.ФайлСсылка, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);
			
		Если СтруктураФайла.АдресаФайловHTML.Количество() = 0 И СтарыеHtmlФайлы.Количество() > 1 Тогда	
			
			СтруктураФайла.АдресаФайловHTML.Добавить(СтруктураФайла.АдресВременногоХранилищаФайлаHTML);
			
		КонецЕсли;	
		
		Если СтруктураФайла.АдресаФайловHTML.Количество() <> 0 Тогда     
			
			// удалим все html файлы (пометим на удаление)
			РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
				СтруктураФайла.Владелец, СтруктураФайла.ФайлСсылка, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);
				
			НомерБлока = 0;

			Для Каждого АдресФайлаHTML Из СтруктураФайла.АдресаФайловHTML Цикл
			
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(
					АдресФайлаHTML);   
					
				РазмерHTMLФайла = ДвоичныеДанные.Размер();	

				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
				ДвоичныеДанные.Записать(ИмяВременногоФайла);

				ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,
					СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
				ТекстHTML = ЧтениеТекста.Прочитать();
				ЧтениеТекста.Закрыть();

				МаксимальныйНомер = 0;
				НовыйТекстHTML = СогласованиеВРежимеЗамечанийHTMLСервер.ПодготовитьHtmlИзWordКРедакторуHtml(
					ТекстHTML, МаксимальныйНомер, ПравкиТаблица);

				СогласованиеВРежимеЗамечанийHTMLСервер.УменьшитьШрифтСносок(НовыйТекстHTML);

				ИмяВременногоФайлаНового = ПолучитьИмяВременногоФайла("html");
				ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайлаНового,
					СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
				ТекстовыйФайл.Записать(НовыйТекстHTML);
				ТекстовыйФайл.Закрыть();
				ДвоичныеДанныеНовые = Новый ДвоичныеДанные(ИмяВременногоФайлаНового);

				ФайлНаДиске = Новый Файл(ИмяВременногоФайлаНового);

				АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеНовые);
				
				ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;
				
				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
				
				СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;

				СведенияОФайле.ИмяБезРасширения = ИмяБезРасширенияУрезанное;
				СведенияОФайле.РасширениеБезТочки = "html";
				СведенияОФайле.ВремяИзменения = ТекущаяДата();
				СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
				СведенияОФайле.Размер = РазмерHTMLФайла;  
				
				ФайлHTMLСсылка =  РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
					СтруктураФайла.Владелец, СведенияОФайле);
				
				ФайлНаДиске = Неопределено;
				
				ТребуетсяДолгаяОбработка = Ложь;
				РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
					СтруктураФайла.Владелец, СтруктураФайла.ФайлСсылка,
					Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание, ФайлHTMLСсылка, Неопределено,
					ТребуетсяДолгаяОбработка,,НомерБлока);


				НовыйHTMLФайл = ФайлHTMLСсылка;
				ЗаменитьФайлВПравкахБлоки(СтарыеHtmlФайлы, НовыйHTMLФайл, НомерБлока);

				НомерБлока = НомерБлока + 1;
				
			КонецЦикла;	
			
			
		Иначе	
		
			ФайлHTMLСсылка = СтруктураФайла.ФайлHTMLСсылка;
			Файл = ФайлHTMLСсылка;

			ДвоичныеДанные = ПолучитьИзВременногоХранилища(
				СтруктураФайла.АдресВременногоХранилищаФайлаHTML);

			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
			ДвоичныеДанные.Записать(ИмяВременногоФайла);

			ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,
				СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
			ТекстHTML = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();

			МаксимальныйНомер = 0;
			НовыйТекстHTML = СогласованиеВРежимеЗамечанийHTMLСервер.ПодготовитьHtmlИзWordКРедакторуHtml(
				ТекстHTML, МаксимальныйНомер, ПравкиТаблица);

			СогласованиеВРежимеЗамечанийHTMLСервер.УменьшитьШрифтСносок(НовыйТекстHTML);

			ИмяВременногоФайлаНового = ПолучитьИмяВременногоФайла("html");
			ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайлаНового,
				СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
			ТекстовыйФайл.Записать(НовыйТекстHTML);
			ТекстовыйФайл.Закрыть();
			ДвоичныеДанныеНовые = Новый ДвоичныеДанные(ИмяВременногоФайлаНового);

			ФайлНаДиске = Новый Файл(ИмяВременногоФайлаНового);

			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеНовые);

			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.ВремяИзменения = ФайлНаДиске.ПолучитьВремяИзменения();
			СведенияОФайле.ВремяИзмененияУниверсальное = ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения();
			СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
			СведенияОФайле.РасширениеБезТочки 
				= ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ФайлНаДиске.Расширение);
			СведенияОФайле.Размер = ФайлНаДиске.Размер();
			СведенияОФайле.ИмяБезРасширения = Строка(Файл);
			
			// новая версия - уже обработанный HTML
			ОбновлятьНеГлядяНаБлокировку = Истина;
			РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
				Файл, СведенияОФайле, ОбновлятьНеГлядяНаБлокировку);

			РегистрыСведений.МаксимальныеНомераПравок.ДобавитьЗапись(Файл, МаксимальныйНомер);

			ФайлНаДиске = Неопределено;
			
			// очистим информацию о картинках в РС СлужебныеФайлыДокументов
			РегистрыСведений.СлужебныеФайлыДокументов.ОчиститьКартинки(СтруктураФайла.Владелец, СтруктураФайла.ФайлHTMLСсылка);
			
		КонецЕсли;

		Для Каждого СтруктураКартинки Из СтруктураФайла.Картинки Цикл

			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.АдресВременногоХранилищаФайла = СтруктураКартинки.АдресВременногоХранилища;
			СведенияОФайле.ИмяБезРасширения = СтруктураКартинки.Имя;
			СведенияОФайле.РасширениеБезТочки = СтруктураКартинки.Расширение;
			СведенияОФайле.ВремяИзменения = ТекущаяДата();
			СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
			СведенияОФайле.Размер = СтруктураКартинки.Размер;

			ФайлКартинкиСсылка =  РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
				СтруктураФайла.Владелец, СведенияОФайле);

			РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
				СтруктураФайла.Владелец, ФайлHTMLСсылка, // Владелец - HTML файл

				Перечисления.ОтношенияСлужебныхФайлов.Картинка, ФайлКартинкиСсылка);

			РегистрыСведений.ИдентификаторыВложенийWord.УстановитьИдентификаторВложения(
				ФайлКартинкиСсылка, СтруктураКартинки.ИдентификаторВложения);

		КонецЦикла;	
		
		// надо записать ПравкиТаблица

		ЗафиксироватьТранзакцию();

		УдалитьФайлы(ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайлаНового);

	Исключение

		ОтменитьТранзакцию();
		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры	

// Получает файлы у владельца(внутр документа) с записью в РС СлужебныеФайлыДокументов
// 
// Параметры
// ВладелецФайла - ОпределяемыйТип.ВладелецФайла-  например документ
// АвтозаполняемыеФайлы - Массив
// 
// Возвращаемое значение - Массив
//
Функция ПолучитьПриложенныеСлужебныеФайлы(ВладелецФайла, АвтозаполняемыеФайлы = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МассивФайлов = Новый Массив;
	
	Если ТипЗнч(ВладелецФайла) <> Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		Возврат МассивФайлов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СлужебныеФайлыДокументов.Файл КАК Ссылка,
	|	СлужебныеФайлыДокументов.НомерБлока КАК НомерБлока
	|ИЗ
	|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|ГДЕ
	|	СлужебныеФайлыДокументов.Документ = &ВладелецФайла
	|	И СлужебныеФайлыДокументов.Отношение = &Отношение
	|	И СлужебныеФайлыДокументов.Файл.ПометкаУдаления = ЛОЖЬ";

	Если АвтозаполняемыеФайлы <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст
			+ " И НЕ СлужебныеФайлыДокументов.Владелец В (&АвтозаполняемыеФайлы)";
		Запрос.УстановитьПараметр("АвтозаполняемыеФайлы", АвтозаполняемыеФайлы);
	КонецЕсли;

	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("Отношение", Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктФайла = Новый Структура("Файл, НомерБлока", Выборка.Ссылка, Выборка.НомерБлока);
		МассивФайлов.Добавить(СтруктФайла);
		
	КонецЦикла;

	Возврат МассивФайлов;

КонецФункции

// Обработать HTML файлы действия
// Параметры
//  Действие -ссылка на действие
Процедура ОбработатьHTMLФайлыДействия(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");

	ОбработатьHTMLФайлыДокумента(Предмет);

КонецПроцедуры

// Обработать HTML файлы документа
// Параметры
//  Документ -ссылка на документ
Процедура ОбработатьHTMLФайлыДокумента(Документ) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	МассивФайлов = Новый Массив;

	Если ЗначениеЗаполнено(Документ) И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда

		ВладелецФайла = Документ;

		МассивФайлов = ПолучитьПриложенныеСлужебныеФайлы(ВладелецФайла);

	КонецЕсли;

	ОбработатьHTMLФайлыМассив(Документ, МассивФайлов);

КонецПроцедуры	

// Обработать созданные из Word  HTML файлы - конвертировать списки, вырезать комментарии, вставить теги.
// 
// Параметры
// Предметы -табличная часть предметов
// БизнесПроцесс - ссылка на бизнес процесс
Процедура ОбработатьHTMLФайлы(Предметы, БизнесПроцесс = Неопределено) Экспорт

	МассивФайлов = Новый Массив;
	
	Документ = Неопределено;

	Для Каждого Элемент Из Предметы Цикл
		Если ЗначениеЗаполнено(Элемент.Предмет)
			И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Элемент.Предмет)Тогда

			ВладелецФайла = Элемент.Предмет;
			Документ = ВладелецФайла;

			ТекФайлы = ПолучитьПриложенныеСлужебныеФайлы(ВладелецФайла);
			Для Каждого Файл Из ТекФайлы Цикл
				МассивФайлов.Добавить(Файл);
			КонецЦикла;	
		КонецЕсли;

	КонецЦикла;

	ОбработатьHTMLФайлыМассив(Документ, МассивФайлов, БизнесПроцесс);

КонецПроцедуры

Функция СоздатьТаблицуПравокПустую() Экспорт

	ПравкиТаблица = Новый ТаблицаЗначений;

	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	ПравкиТаблица.Колонки.Добавить("УникальныйИдентификатор", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ПравкиТаблица.Колонки.Добавить("Автоматическая", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники");
	ПравкиТаблица.Колонки.Добавить("Автор", ОписаниеТипов);

	КвалифДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	ОписаниеТипов = Новый ОписаниеТипов("Дата", , , , , КвалифДаты);
	ПравкиТаблица.Колонки.Добавить("Дата", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Число");
	ПравкиТаблица.Колонки.Добавить("ИдКонца", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Число");
	ПравкиТаблица.Колонки.Добавить("ИдНачала", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Строка");
	ПравкиТаблица.Колонки.Добавить("Комментарий", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Строка");
	ПравкиТаблица.Колонки.Добавить("НаЧтоМеняем", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Число");
	ПравкиТаблица.Колонки.Добавить("НомерКартинки", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Число");
	ПравкиТаблица.Колонки.Добавить("НомерЭтапа", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ПравкиТаблица.Колонки.Добавить("Отработано", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПринятияЗамечаний");
	ПравкиТаблица.Колонки.Добавить("СтатусПринятия", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗамечаний");
	ПравкиТаблица.Колонки.Добавить("ТипЗамечания", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Строка");
	ПравкиТаблица.Колонки.Добавить("ЧтоМеняем", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ПравкиТаблица.Колонки.Добавить("СделанаТекущимПользователем", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ПравкиТаблица.Колонки.Добавить("ПравкаДругогоЭтапа", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Число");
	ПравкиТаблица.Колонки.Добавить("НомерКартинкиСтатуса", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Число");
	ПравкиТаблица.Колонки.Добавить("ПозицияВHtml", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Число");
	ПравкиТаблица.Колонки.Добавить("ПозицияВHtmlКонец", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ПравкиТаблица.Колонки.Добавить("ЕстьПересечения", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ВерсииФайлов");
	ПравкиТаблица.Колонки.Добавить("ВерсияHTML", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ПравкиТаблица.Колонки.Добавить("ЭтоПравкаWord", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ПравкиТаблица.Колонки.Добавить("ЭтоОтличиеОтШаблона", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ПравкиТаблица.Колонки.Добавить("СсылкиУтеряны", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ПравкиТаблица.Колонки.Добавить("ЗамечаниеИнициатора", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники");
	ПравкиТаблица.Колонки.Добавить("РеальныйАвтор", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Строка");
	ПравкиТаблица.Колонки.Добавить("Замечание", ОписаниеТипов);

	ОписаниеТипов = Новый ОписаниеТипов("Строка");
	ПравкиТаблица.Колонки.Добавить("ИмяПоля", ОписаниеТипов);

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Исполнение"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Согласование"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	ПравкиТаблица.Колонки.Добавить("Процесс", ОписаниеТипов);

	Возврат ПравкиТаблица;

КонецФункции

Функция ПолучитьЭтоЛНА(Файл, Документ)

	ЭтоЛНА = Ложь;

	Возврат ЭтоЛНА;

КонецФункции

Процедура ОбработатьHTMLФайлыМассив(Документ, МассивФайлов, БизнесПроцесс = Неопределено,
	ЭтоВторойЦиклИлиВыше = Ложь, НомерИтерации = 0) Экспорт

	Для Каждого СтруктФайл Из МассивФайлов Цикл
		
		Файл = СтруктФайл.Файл;
		НомерБлока = СтруктФайл.НомерБлока;

		ПравкиТаблица = Неопределено;

		Документ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");

		ЗаписьЖурналаРегистрации("ОбработкаHTMLКСогласованию_Очередь",
			УровеньЖурналаРегистрации.Информация, , , СтрШаблон(НСтр(
			"ru = 'ОбработатьHTMLФайлыМассив. Документ %1. Файл %2'"), Документ, Файл));

		ЭтоТиповой = Ложь;

		Подготовил = ПользователиКлиентСервер.ТекущийПользователь();

		РежимТолькоРеквизитыИзмененный = Ложь;
		ЕстьТаблица = Ложь;

		ФайлDoc = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьМастерФайл(Документ, Файл);
		Если ЗначениеЗаполнено(ФайлDoc) Тогда

			ШаблонОснованиеДляСоздания = Неопределено;

			МассивDoc = Новый Массив;
			МассивDoc.Добавить(ФайлDoc);
			ТаблицаDoc = СогласованиеВРежимеЗамечанийСервер.ПолучитьПараметрыФайлов(Документ, МассивDoc);
			Если ТаблицаDoc.Количество() = 1 Тогда

				СтрокаФайл = ТаблицаDoc[0];
				ШаблонОснованиеДляСоздания = СтрокаФайл.ШаблонОснованиеДляСоздания;
			
				// 1 - т.е. отличается от шаблона
				РежимТолькоРеквизитыИзмененный 
					= (СтрокаФайл.ОтличаетсяОтШаблона = 1) И СтрокаФайл.ЕстьПравилаАвтозаполнения;
				Если РежимТолькоРеквизитыИзмененный Тогда
					ПравкиТаблица = СоздатьТаблицуПравокПустую();
					ЕстьТаблица = Истина;
				КонецЕсли;

			КонецЕсли;

			Если ПравкиТаблица = Неопределено Тогда
				ЭтоЛНА = ПолучитьЭтоЛНА(ФайлDoc, Документ);
				Если ЭтоЛНА Тогда
					ПравкиТаблица = СоздатьТаблицуПравокПустую();
					ЕстьТаблица = Истина;
				КонецЕсли;
			КонецЕсли;

			Если ПравкиТаблица = Неопределено И ЭтоТиповой = Истина Тогда
				ПравкиТаблица = СоздатьТаблицуПравокПустую();
				ЕстьТаблица = Истина;
			КонецЕсли;

			Если ПравкиТаблица = Неопределено И ЗначениеЗаполнено(ШаблонОснованиеДляСоздания) Тогда
				Если ПолучитьПоказыватьОтличияОтШаблона(ФайлDoc) Тогда
					ПравкиТаблица = СоздатьТаблицуПравокПустую();
					ЕстьТаблица = Истина;
				КонецЕсли;
			КонецЕсли;

			Если ПравкиТаблица = Неопределено И ЭтоВторойЦиклИлиВыше Тогда
				ПравкиТаблица = СоздатьТаблицуПравокПустую();
				ЕстьТаблица = Истина;
			КонецЕсли;

		КонецЕсли;

		ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Файл);

		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
		ДвоичныеДанные.Записать(ИмяВременногоФайла);

		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,
			СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
		ТекстHTML = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();

		МаксимальныйНомер = 0;
		СравнениеСШаблоном = Истина;
		ОбработкаНеТребуется = Ложь;
		
		НовыйТекстHTML = СогласованиеВРежимеЗамечанийHTMLСервер.ПодготовитьHtmlИзWordКРедакторуHtml(
			ТекстHTML, МаксимальныйНомер, ПравкиТаблица, СравнениеСШаблоном, БизнесПроцесс,
			Подготовил, НомерИтерации, ЭтоВторойЦиклИлиВыше, ЭтоТиповой, ОбработкаНеТребуется);
			
		Если ОбработкаНеТребуется = Ложь Тогда	
			
			СогласованиеВРежимеЗамечанийHTMLСервер.УменьшитьШрифтСносок(НовыйТекстHTML);
	
			Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Документ) И ЗначениеЗаполнено(Документ)
				И НомерИтерации <> 0 Тогда
				СогласованиеВРежимеЗамечанийСервер.ОчиститьПозицииУПрежнихПравок(
					Файл, Документ, ЭтоТиповой, НовыйТекстHTML); // ВосстановитьПоИмениПоля - если ЭтоТиповой
			КонецЕсли;
	
			ИмяВременногоФайлаНового = ПолучитьИмяВременногоФайла("html");
			ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайлаНового,
				СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
			ТекстовыйФайл.Записать(НовыйТекстHTML);
			ТекстовыйФайл.Закрыть();
			ДвоичныеДанныеНовые = Новый ДвоичныеДанные(ИмяВременногоФайлаНового);
	
			ФайлНаДиске = Новый Файл(ИмяВременногоФайлаНового);
	
			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеНовые);
			
			// создание html файла
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.ВремяИзменения = ФайлНаДиске.ПолучитьВремяИзменения();
			СведенияОФайле.ВремяИзмененияУниверсальное = ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения();
			СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
			СведенияОФайле.РасширениеБезТочки 
				= ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ФайлНаДиске.Расширение);
			СведенияОФайле.Размер = ФайлНаДиске.Размер();
	
			ДопустимаяДлинаИмениФайла = 50;
			ИмяБезРасширенияУрезанное = Строка(Файл);
	
			Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
				ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное, ДопустимаяДлинаИмениФайла);
				ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
			КонецЕсли;
	
			СведенияОФайле.ИмяБезРасширения = ИмяБезРасширенияУрезанное;
			
			// новая версия - уже обработанный HTML
			ОбновлятьНеГлядяНаБлокировку = Истина;
			РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
				Файл, СведенияОФайле);
	
			РегистрыСведений.МаксимальныеНомераПравок.ДобавитьЗапись(Файл, МаксимальныйНомер);
			
			РегистрыСведений.СлужебныеФайлыДокументов.ОбновитьПризнакФайлТокенизирован(Файл, Истина, НомерБлока);
	
			Если ЕстьТаблица Тогда
	
				ВерсияHTMLТекущая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
				НомерИтерации = 0;
	
				СогласованиеВРежимеЗамечанийСервер.ЗаписатьПравкиИзWord(ПравкиТаблица, Файл, Документ,
					БизнесПроцесс, ВерсияHTMLТекущая, НомерИтерации);
	
			КонецЕсли;

			ФайлНаДиске = Неопределено;
			УдалитьФайлы(ИмяВременногоФайлаНового);
			
		КонецЕсли;

		УдалитьФайлы(ИмяВременногоФайла);

		ЗаписьЖурналаРегистрации("ОбработкаHTMLКСогласованию_Очередь",
			УровеньЖурналаРегистрации.Информация, , , СтрШаблон(НСтр(
			"ru = 'ОбработатьHTMLФайлыМассив завершили. Документ %1. Файл %2'"), Документ, Файл));

	КонецЦикла;

КонецПроцедуры

Функция ЕстьЗамечанияПоФайлу(Документ, ФайлDocСсылка) Экспорт

	Если Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда
		Возврат Ложь;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Документ);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат Ложь;
	КонецЕсли;
	Состояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "Состояние");

	Если Состояние <> Перечисления.СостоянияОбработкиОбъектов.Выполняется И Состояние
		<> Перечисления.СостоянияОбработкиОбъектов.Завершена Тогда

		Возврат Ложь;

	КонецЕсли;

	ФайлHTML = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		Документ, ФайлDocСсылка, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);

	Если Не ЗначениеЗаполнено(ФайлHTML) Тогда
		Возврат Ложь;
	КонецЕсли;

	ИдетСогласование = ЕстьНеЗавершенноеСогласованиеПоДокументу(Документ);

	Если ИдетСогласование Тогда
		Возврат ЕстьЛюбыеЗамечанияПоФайлу(Документ, ФайлHTML);
	Иначе
		Возврат ЕстьЗамечанияПроцессаСогласованиеПоФайлу(Документ, ФайлHTML);
	КонецЕсли;

КонецФункции

Функция ЕстьЛюбыеЗамечанияПоФайлу(Документ, ФайлHTML) Экспорт

	Возврат Ложь;

КонецФункции

Функция ЕстьЗамечанияПроцессаСогласованиеПоФайлу(Документ, ФайлHTML) Экспорт

	Возврат Ложь;

КонецФункции	

// Есть незавершенный процесс Согласование
Функция ПолучитьНеЗавершенноеСогласованиеПоДокументу(Документ) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СогласованиеПредметы.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.Согласование.Предметы КАК СогласованиеПредметы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование КАК Согласование
	|		ПО СогласованиеПредметы.Ссылка = Согласование.Ссылка
	|ГДЕ
	|	СогласованиеПредметы.Предмет = &Предмет
	|	И Согласование.Завершен = ЛОЖЬ
	|	И Согласование.ПометкаУдаления = ЛОЖЬ
	|	И Согласование.Состояние <> &Состояние1
	|	И Согласование.Состояние <> &Состояние2
	|	И Согласование.ПараллельноеРедактирование = ИСТИНА";

	Запрос.УстановитьПараметр("Предмет", Документ);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("Состояние1", Перечисления.СостоянияБизнесПроцессов.Остановлен);
	Запрос.УстановитьПараметр("Состояние2", Перечисления.СостоянияБизнесПроцессов.Прерван);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;

КонецФункции		

// Есть Согласование - неважно, завершенное или нет
Функция ЕстьСогласованиеПоДокументу(Документ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СогласованиеПредметы.Ссылка
	|ИЗ
	|	БизнесПроцесс.Согласование.Предметы КАК СогласованиеПредметы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование КАК Согласование
	|		ПО СогласованиеПредметы.Ссылка = Согласование.Ссылка
	|ГДЕ
	|	СогласованиеПредметы.Предмет = &Предмет
	|	И Согласование.ПометкаУдаления = ЛОЖЬ
	|	И Согласование.Состояние <> &Состояние1
	|	И Согласование.Состояние <> &Состояние2
	|	И Согласование.ПараллельноеРедактирование = ИСТИНА";

	Запрос.УстановитьПараметр("Предмет", Документ);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("Состояние1", Перечисления.СостоянияБизнесПроцессов.Остановлен);
	Запрос.УстановитьПараметр("Состояние2", Перечисления.СостоянияБизнесПроцессов.Прерван);

	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();

КонецФункции

Функция ПолучитьHTMLПервойВерсии(ФайлСсылка)

	HTMLПервойВерсии = "";

	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ
	   |	РАЗРЕШЕННЫЕ ВерсииФайлов.Ссылка КАК Ссылка
	   |ИЗ
	   |	Справочник.ВерсииФайлов КАК ВерсииФайлов
	   |ГДЕ
	   |	ВерсииФайлов.Владелец = &Владелец
	   |	И ВерсииФайлов.НомерВерсии = 1";

	Запрос.УстановитьПараметр("Владелец", ФайлСсылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат HTMLПервойВерсии;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ВерсияССылка = Выборка.Ссылка;

	ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(ВерсияССылка);

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);

	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,
		СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
	HTMLПервойВерсии = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	УдалитьФайлы(ИмяВременногоФайла);

	Возврат HTMLПервойВерсии;

КонецФункции	
	
// Возвращает массив Структур для файлов doc docx
// ФайлСсылка, ТекущаяВерсия, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла
Функция ПодготовитьМассивФайловПараллельногоСогласованияДляКонвертацииВWord(Знач Предметы,
	УникальныйИдентификатор, АвтозаполняемыеФайлы = Неопределено) Экспорт

	МассивСтруктурРезультата = Новый Массив;

	МассивФайлов = Новый Массив;

	Для Каждого Предмет Из Предметы Цикл
		Если ЗначениеЗаполнено(Предмет) И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет) Тогда

			ВладелецФайла = Предмет;

			ТекФайлы = ПолучитьПриложенныеСлужебныеФайлы(ВладелецФайла, АвтозаполняемыеФайлы);
			Для Каждого Файл Из ТекФайлы Цикл
				МассивФайлов.Добавить(Файл);
			КонецЦикла;	
		КонецЕсли;

	КонецЦикла;

	ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(МассивФайлов,
		УникальныйИдентификатор);

	Для Каждого Данные Из ДанныеФайлов Цикл

		СтруктураРезультата = ПодготовитьСтруктуруОдногоФайлаДляКонвертацииВWord(
			Данные, УникальныйИдентификатор);

		МассивСтруктурРезультата.Добавить(СтруктураРезультата);

	КонецЦикла;

	Возврат МассивСтруктурРезультата;

КонецФункции	

// Возвращает Структура для файла doc docx
// ФайлСсылка, ТекущаяВерсия, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла
Функция ПодготовитьОдинФайлДляКонвертацииВWord(Документ, ФайлDocСсылка, ФайлHTML,
	УникальныйИдентификатор) Экспорт

	Данные = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлHTML, , УникальныйИдентификатор);

	СтруктураРезультата = ПодготовитьСтруктуруОдногоФайлаДляКонвертацииВWord(
		Данные, УникальныйИдентификатор);

	Возврат СтруктураРезультата;

КонецФункции	

// Возвращает Структура для файла doc docx
// ФайлСсылка, ТекущаяВерсия, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла
Функция ПодготовитьСтруктуруОдногоФайлаДляКонвертацииВWord(Данные, УникальныйИдентификатор)

	СтруктураРезультата 
		= Новый Структура("ФайлСсылка, ФайлHTMLСсылка, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML, РазмерDocФайла, РасширениеDocФайла, УниверсальноеВремяИзмененияWordФайла");

	Файл = Данные.Ссылка;

	СтруктураРезультата.Вставить("Картинки", Новый Массив);

	СтруктураРезультата.ФайлHTMLСсылка = Данные.Ссылка;
	СтруктураРезультата.Расширение = Данные.Расширение;
	СтруктураРезультата.Наименование = Данные.ПолноеНаименованиеВерсии;
	СтруктураРезультата.Владелец = Данные.Владелец;

	ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Файл);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);

	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,
		СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
	ТекстHTML = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	HTMLПервойВерсии = ПолучитьHTMLПервойВерсии(СтруктураРезультата.ФайлHTMLСсылка);
	НовыйТекстHTML = СогласованиеВРежимеЗамечанийHTMLСервер.ПодготовитьHtmlИзРедактораHtmlКWord(
		ТекстHTML, HTMLПервойВерсии);

	ИмяВременногоФайлаНового = ПолучитьИмяВременногоФайла("html");
	ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайлаНового,
		СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
	ТекстовыйФайл.Записать(НовыйТекстHTML);
	ТекстовыйФайл.Закрыть();
	ДвоичныеДанныеНовые = Новый ДвоичныеДанные(ИмяВременногоФайлаНового);

	ФайлНаДиске = Новый Файл(ИмяВременногоФайлаНового);

	СтруктураРезультата.АдресВременногоХранилищаФайлаHTML = ПоместитьВоВременноеХранилище(
		ДвоичныеДанныеНовые, УникальныйИдентификатор);
	
	// doc файл
	СтруктураРезультата.ФайлСсылка = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьМастерФайл(
		Данные.Владелец, Данные.Ссылка);
	СтруктураРезультата.РасширениеDocФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		СтруктураРезультата.ФайлСсылка, "ТекущаяВерсияРасширение");

	ФайлНаДиске = Неопределено;
	УдалитьФайлы(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайлаНового);

	ФайлыКартинок = ПолучитьФайлыКартинок(Данные.Владелец, СтруктураРезультата.ФайлHTMLСсылка);

	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл

		СтруктураКартинки = Новый Структура("Ссылка, Имя, Расширение, АдресВременногоХранилища");

		СтруктураКартинки.Имя = ФайлКартинки.Наименование;
		СтруктураКартинки.Расширение = ФайлКартинки.Расширение;
		СтруктураКартинки.Ссылка = ФайлКартинки.Ссылка;

		СтруктураКартинки.АдресВременногоХранилища = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(
			ФайлКартинки.ТекущаяВерсия, // ВерсияСсылка

			УникальныйИдентификатор); // ИдентификаторФормы

		СтруктураРезультата.Картинки.Добавить(СтруктураКартинки);

	КонецЦикла;

	Возврат СтруктураРезультата;

КонецФункции	

// Создает новые версии DOC файлов
//
//  МассивФайловПараллельногоСогласования - массив структур
// // ФайлСсылка, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла, РасширениеDocФайла
Процедура ОбновитьWordФайлы(МассивФайловПараллельногоСогласования, Комментарий,
	УдалитьЗаписиФайлыСКомментариямиWord = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого СтруктураФайла Из МассивФайловПараллельногоСогласования Цикл

		Попытка

			НачатьТранзакцию();

			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.АдресВременногоХранилищаФайла = СтруктураФайла.АдресВременногоХранилищаФайлаDOC;
			СведенияОФайле.ИмяБезРасширения = СтруктураФайла.Наименование;
			СведенияОФайле.РасширениеБезТочки = СтруктураФайла.РасширениеDocФайла;
			СведенияОФайле.ВремяИзменения = ТекущаяДата();

			СведенияОФайле.ВремяИзмененияУниверсальное = СтруктураФайла.УниверсальноеВремяИзмененияWordФайла;

			СведенияОФайле.Размер = СтруктураФайла.РазмерDOCФайла;
			СведенияОФайле.НоваяВерсияКомментарий = НСтр(
				"ru = 'Версия создана из HTML файла при отправке на новый цикл согласования.'");
			Если Комментарий <> "" Тогда
				СведенияОФайле.НоваяВерсияКомментарий = Комментарий;
			КонецЕсли;	
			
			СведенияОФайле.НеМеняетСути = Истина;
			ОбновлятьНеГлядяНаБлокировку = Истина;
			РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
					СтруктураФайла.ФайлСсылка, СведенияОФайле, ОбновлятьНеГлядяНаБлокировку);

			Если УдалитьЗаписиФайлыСКомментариямиWord Тогда
				РегистрыСведений.ФайлыСКомментариямиWord.УдалитьЗаписиПоФайлу(
					СтруктураФайла.ФайлСсылка);
			КонецЕсли;

			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();
			ВызватьИсключение;

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры	

// Создает новую версию DOC файла и сразу делает ее активной
Процедура ОбновитьWordФайл(СтруктураФайла) Экспорт

	Попытка

		НачатьТранзакцию();

		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = СтруктураФайла.АдресВременногоХранилищаФайлаDOC;
		СведенияОФайле.ИмяБезРасширения = СтруктураФайла.Наименование;
		СведенияОФайле.РасширениеБезТочки = СтруктураФайла.РасширениеDocФайла;
		СведенияОФайле.ВремяИзменения = ТекущаяДата();
		СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
		СведенияОФайле.Размер = СтруктураФайла.РазмерDOCФайла;

		ОбновлятьНеГлядяНаБлокировку = Истина;
		РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
			СтруктураФайла.ФайлСсылка, СведенияОФайле, ОбновлятьНеГлядяНаБлокировку);

		РегистрыСведений.СведенияОФайлах.УстановитьПризнак(СтруктураФайла.ФайлСсылка,
			"ИдентиченШаблону", Ложь);

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры	

// Получает файлы у владельца doc docx
Функция ПолучитьПриложенныеWordФайлы(ВладелецФайла)

	МассивФайлов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Владелец = Файлы.Ссылка)
	|			И (СлужебныеФайлыДокументов.Документ = &ВладелецФайла)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ";

	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Выборка.Расширение) Тогда
			МассивФайлов.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивФайлов;

КонецФункции

// Получает версию в файле по номеру
Функция ПолучитьВерсию(Файл, НомерВерсии) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				   |	Версии.Ссылка
				   |ИЗ
				   |	Справочник.ВерсииФайлов КАК Версии
				   |ГДЕ
				   |	Версии.Владелец = &Файл
				   |	И Версии.НомерВерсии = &НомерВерсии";

	Запрос.Параметры.Вставить("Файл", Файл);
	Запрос.Параметры.Вставить("НомерВерсии", НомерВерсии);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда

		Возврат Выборка.Ссылка;

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Процедура УстановитьТекущуюВерсиюWordФайловДокумента(ВладелецФайла) Экспорт

	МассивФайлов = Новый Массив;

	ТекФайлы = ПолучитьПриложенныеWordФайлы(ВладелецФайла);
	Для Каждого Файл Из ТекФайлы Цикл
		МассивФайлов.Добавить(Файл);
	КонецЦикла;	
	
	//Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) И 
	//	РаботаСКомплектамиДокументовСервер.КомплектИзменяетДокументыВСоставе(ВладелецФайла) Тогда
	//	
	//	КомплектующиеИнфо = РаботаСКомплектамиДокументовСервер.ПолучитьИнформациюОКомплектующих(ВладелецФайла, Ложь);
	//	Для каждого ЭлементКомплекта Из КомплектующиеИнфо.Элементы Цикл
	//		
	//		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ЭлементКомплекта)
	//			Или ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(ЭлементКомплекта) Тогда
	//			
	//			ТекФайлы = ПолучитьПриложенныеWordФайлы(ЭлементКомплекта);
	//			Для Каждого Файл Из ТекФайлы Цикл
	//				МассивФайлов.Добавить(Файл);
	//			КонецЦикла;	
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;	

	Для Каждого Файл Из МассивФайлов Цикл

		НомерВерсии = РаботаСФайламиВызовСервера.НайтиМаксимальныйНомерВерсии(Файл);
		Версия = ПолучитьВерсию(Файл, НомерВерсии);
		Если ЗначениеЗаполнено(Версия) Тогда

			ОбновлятьНеГлядяНаБлокировку = Истина;
			РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Файл, Версия, Неопределено, ,
				ОбновлятьНеГлядяНаБлокировку);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры	

// Вернет Истина, если в корне не параллельное согласование
// Если же параллельное: если есть отказанные правки подчиненных - вернет Истина, иначе Ложь
Функция МожноВернутьИсполнениеНаДоработку(Задача) Экспорт

	Возврат Истина; // в этом случае не блокируем исполнение задачи

КонецФункции	

// Вернет число замечаний по документу, процессу, автору
Функция ПолучитьЧислоЗамечаний(Документ, Процесс, Автор, НомерЭтапа, Задача) Экспорт

	Возврат 0;

КонецФункции	

// Делаем конвертацию Отработано при завершении дочернего процесса (и также Процесс меняем дочерний на родительский). 
Процедура ПоменятьПравкиПриЗавершенииВложенногоПроцесса(ПроцессСсылка, ГлавнаяЗадача) Экспорт

КонецПроцедуры	

// Возвращает массив ссылок на элементы спр Файлы
Функция ПолучитьФайлыКартинок(Документ, ФайлHTML)

	ФайлыКартинок = Новый Массив;

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СлужебныеФайлыДокументов.Файл КАК Ссылка,
	|	ИдентификаторыВложенийWord.Идентификатор КАК Идентификатор,
	|	СлужебныеФайлыДокументов.Файл.ТекущаяВерсияРасширение КАК Расширение,
	|	СлужебныеФайлыДокументов.Файл.Наименование КАК Наименование,
	|	СлужебныеФайлыДокументов.Файл.ТекущаяВерсия КАК ТекущаяВерсия
	|ИЗ
	|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыВложенийWord КАК ИдентификаторыВложенийWord
	|		ПО СлужебныеФайлыДокументов.Файл = ИдентификаторыВложенийWord.Файл
	|ГДЕ
	|	СлужебныеФайлыДокументов.Документ = &Документ
	|	И СлужебныеФайлыДокументов.Владелец = &Владелец
	|	И СлужебныеФайлыДокументов.Отношение = &Отношение
	|	И СлужебныеФайлыДокументов.Файл.ПометкаУдаления = ЛОЖЬ";

	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Владелец", ФайлHTML);
	Запрос.УстановитьПараметр("Отношение", Перечисления.ОтношенияСлужебныхФайлов.Картинка);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл

		ОписаниеКартинки = Новый Структура("Ссылка, Расширение, ТекущаяВерсия, Идентификатор, Наименование",
			Выборка.Ссылка, Выборка.Расширение, Выборка.ТекущаяВерсия, Выборка.Идентификатор,
			Выборка.Наименование);
		ФайлыКартинок.Добавить(ОписаниеКартинки);

	КонецЦикла;

	Возврат ФайлыКартинок;

КонецФункции 	

// Картинки помещает во временное хранилище и заменяет ссылки на временное хранилище.
//
Процедура ВставитьКартинкиВТекстHTML(ТекстHTML, Документ, ФайлHTML, УникальныйИдентификаторФормы,
	ИдентификаторыКартинокПисьма = Неопределено) Экспорт

	ФайлыКартинок = ПолучитьФайлыКартинок(Документ, ФайлHTML);

	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл

		ИсточникФайла = ФайлКартинки.Идентификатор;

		Если СтрЧислоВхождений(ТекстHTML, ИсточникФайла) > 0 Тогда
			
			ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлКартинки.Ссылка);
			Расширение = ФайлКартинки.Расширение;
			
			Если ПустаяСтрока(Расширение) Тогда
				Картинка = Новый Картинка(ДвоичныеДанныеФайла);
				Расширение = Строка(Картинка.Формат());
			КонецЕсли;
			
			АбсолютнаяСсылкаНаКартинку = "data:image/" + Расширение + ";base64," + Base64Строка(ДвоичныеДанныеФайла);

			ТекстHTML = СтрЗаменить(ТекстHTML, "http:cid:" + ИсточникФайла,
				АбсолютнаяСсылкаНаКартинку);
			ТекстHTML = СтрЗаменить(ТекстHTML, "cid:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
			ТекстHTML = СтрЗаменить(ТекстHTML, "CID:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
			Если СтрДлина(ИсточникФайла) > 10 Тогда
				ТекстHTML = СтрЗаменить(ТекстHTML, ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
			КонецЕсли;

			Если ИдентификаторыКартинокПисьма <> Неопределено Тогда
				ОписаниеИсточника = Новый Структура("ИсточникФайла, НавигационнаяСсылка",
					ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
				УдалитьДублиВИдентификаторахКартинокПисьма(ИдентификаторыКартинокПисьма,
					ИсточникФайла);
				ИдентификаторыКартинокПисьма.Добавить(ОписаниеИсточника);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура УдалитьДублиВИдентификаторахКартинокПисьма(ИдентификаторыКартинокПисьма, ИсточникФайла)

	Для Каждого Строка Из ИдентификаторыКартинокПисьма Цикл

		ОписаниеИсточника = Строка.Значение;
		Если ОписаниеИсточника.ИсточникФайла = ИсточникФайла Тогда
			ИдентификаторыКартинокПисьма.Удалить(Строка);
			Возврат;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗаменитьФайлВПравках(СтарыйHTMLФайл, НовыйHTMLФайл)
	
	Если Не ЗначениеЗаполнено(СтарыйHTMLФайл) Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ
	 |	Замечания.Ссылка КАК Ссылка
	 |ИЗ
	 |	Справочник.Замечания КАК Замечания
	 |ГДЕ
	 |	Замечания.ВладелецЗамечания = &ВладелецЗамечания";
	   
	Запрос.УстановитьПараметр("ВладелецЗамечания", СтарыйHTMLФайл);
	
	ТаблицаПравок = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаПравок Цикл
		
		СпрОбъект = Строка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ВладелецЗамечания = НовыйHTMLФайл;
		СпрОбъект.СсылкиУтеряны = Истина;
		СпрОбъект.Записать();
		
	КонецЦикла;	
	

КонецПроцедуры

Процедура ЗаменитьФайлВПравкахБлоки(СтарыеHtmlФайлы, НовыйHTMLФайл, НомерБлока)
	
	Если СтарыеHtmlФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ
	   |	Замечания.Ссылка КАК Ссылка,
	   |	Замечания.НомерБлока КАК НомерБлока
	   |ИЗ
	   |	Справочник.Замечания КАК Замечания
	   |ГДЕ
	   |	Замечания.ВладелецЗамечания В(&Владельцы)
	   |	И Замечания.НомерБлока = &НомерБлока";   
	 
	Владельцы = Новый Массив;
	Для Каждого Стр Из СтарыеHtmlФайлы Цикл
		Владельцы.Добавить(Стр.Файл);
	КонецЦикла;	
	   
	Запрос.УстановитьПараметр("Владельцы", Владельцы);
	Запрос.УстановитьПараметр("НомерБлока", НомерБлока);
	
	ТаблицаПравок = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаПравок Цикл
		
		СпрОбъект = Строка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ВладелецЗамечания = НовыйHTMLФайл;
		//СпрОбъект.СсылкиУтеряны = Истина;
		СпрОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновлениеАктивнойВерсииПриСогласованииДокументаПриЗаписи(Источник, Отказ, Замещение) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого Строка Из Источник Цикл

		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Строка.Документ) Тогда

			Если Строка.Состояние = Перечисления.СостоянияДокументов.Согласован Тогда
				УстановитьТекущуюВерсиюWordФайловДокумента(Строка.Документ);
			КонецЕсли;

		Иначе
			Продолжить;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Вернет ссылку на картинку
Функция ПолучитьСсылкуНаКартинку(ФайлHTML, ИмяБезРасширения) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СлужебныеФайлыДокументов.Файл КАК Файл
	|ИЗ
	|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|ГДЕ
	|	СлужебныеФайлыДокументов.Владелец = &Владелец
	|	И СлужебныеФайлыДокументов.Отношение = &Отношение
	|	И СлужебныеФайлыДокументов.Файл.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Владелец", ФайлHTML);
	Запрос.УстановитьПараметр("Наименование", ИмяБезРасширения);
	Запрос.УстановитьПараметр("Отношение", Перечисления.ОтношенияСлужебныхФайлов.Картинка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Файл;

КонецФункции

Процедура ОчиститьПозицииУПрежнихПравок(ФайлHTML, Документ, ВосстановитьПоИмениПоля = Ложь,
	Знач ТекстHTML = "") Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ТекстHTML = НРег(ТекстHTML);

	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ
	   |	Замечания.Ссылка КАК Ссылка
	   |ИЗ
	   |	Справочник.Замечания КАК Замечания
	   |ГДЕ
	   |	Замечания.ВладелецЗамечания = &Владелец
	   |	И Замечания.Документ = &Документ";

	Запрос.УстановитьПараметр("Владелец", ФайлHTML);
	Запрос.УстановитьПараметр("Документ", Документ);

	ТаблицаПравок = Запрос.Выполнить().Выгрузить();

	Для Каждого Строка Из ТаблицаПравок Цикл

		Запись = Строка.Ссылка.ПолучитьОбъект();

		Запись.Автоматическая = Ложь;
		Запись.СсылкиУтеряны = Истина;

		Если ВосстановитьПоИмениПоля И ЗначениеЗаполнено(Запись.ИмяПоля) Тогда
			НомерСлова = НайтиНомерСлова(ТекстHTML, Запись.ИмяПоля);
			Если НомерСлова <> 0 Тогда
				Запись.ИдНачала = НомерСлова;
				Запись.ИдКонца = НомерСлова;
				Запись.СсылкиУтеряны = Ложь;
			КонецЕсли;
		КонецЕсли;

		Запись.Записать();

	КонецЦикла;

КонецПроцедуры

Функция НайтиНомерСлова(ТекстHTML, ИмяПоля)
	
	// найти    mso-bookmark:ИмяПоля       потом field-end - между ними ищем первое span id=do_ и берем его номер.

	ТекстПоиска = "mso-bookmark:" + НРег(ИмяПоля);

	ПозНачала = СтрНайти(ТекстHTML, ТекстПоиска);
	Если ПозНачала = 0 Тогда
		Возврат 0;
	КонецЕсли;

	ПозКонца = СтрНайти(ТекстHTML, "field-end", НаправлениеПоиска.СНачала, ПозНачала);
	Если ПозКонца = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Счетчик = 0;
	ПозДляПоиска = ПозНачала;
	Пока Истина Цикл

		Счетчик = Счетчик + 1;
		Если Счетчик > 100 Тогда
			Возврат 0;
		КонецЕсли;

		ПерваяПозицияID = СтрНайти(ТекстHTML, "span id=do_", НаправлениеПоиска.СНачала,
			ПозДляПоиска);
		Если ПерваяПозицияID = 0 Тогда
			Возврат 0;
		КонецЕсли;
		Если ПерваяПозицияID > ПозКонца Тогда
			Возврат 0;
		КонецЕсли;

		Если ЭтоПозицияВнутриКомментария(ТекстHTML, ПерваяПозицияID) Тогда
			ПозДляПоиска = ПерваяПозицияID + 1;
			Продолжить;
		КонецЕсли;

		ПерваяПозицияIDКонецТега = СтрНайти(ТекстHTML, ">", , ПерваяПозицияID);
		Если ПерваяПозицияIDКонецТега = 0 Тогда
			Возврат 0;
		КонецЕсли;

		Прервать;

	КонецЦикла;
	
	// ПерваяПозицияID+8 - 8 это "span id="
	НачалоDoНомер = ПерваяПозицияID + 8;
	СтрокаНомера = Сред(ТекстHTML, НачалоDoНомер, ПерваяПозицияIDКонецТега - НачалоDoНомер);
	ИдНачала = ПолучитьИдЧисло(СтрокаНомера);

	Возврат ИдНачала;

КонецФункции

Функция ЭтоПозицияВнутриКомментария(ТекстHTML, ПерваяПозицияID)

	ПозНачалаПоля = СтрНайти(ТекстHTML, "<!--[if", НаправлениеПоиска.СКонца, ПерваяПозицияID);
	Если ПозНачалаПоля = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	ПозКонцаПоля = СтрНайти(ТекстHTML, "![endif", НаправлениеПоиска.СНачала, ПозНачалаПоля);
	Если ПозКонцаПоля = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПозКонцаПоля > ПерваяПозицияID Тогда // да, внутри комментария
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ПолучитьИдЧисло(ИдСтрока)
	
	// ИдСтрока  - вида "do_91"

	Если СтрНайти(ИдСтрока, "do_") = 0 Тогда
		Возврат -1;
	КонецЕсли;

	СтрокаТолькоЧисло = Сред(ИдСтрока, 4); // 4  - т.к. пропускаем do_
	Возврат Число(СтрокаТолькоЧисло);

КонецФункции

Процедура ЗаписатьПравкиИзWord(ПравкиТаблица, ФайлHTML, Документ, БизнесПроцесс, ВерсияHTMLТекущая,
	НомерИтерации) Экспорт

КонецПроцедуры

Функция ПолучитьТекущуюИПредыдущуюВерсии(ФайлСсылка,
	ТекущаяВерсияДоЗакончитьРедактирование = Неопределено) Экспорт

	СтруктураВерсий = Новый Структура("ТекущаяВерсия, ПредыдущаяВерсия");

	СтруктураВерсий.ТекущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка,
		"ТекущаяВерсия");
	Если СтруктураВерсий.ТекущаяВерсия = ТекущаяВерсияДоЗакончитьРедактирование Тогда
		СтруктураВерсий.ПредыдущаяВерсия = СтруктураВерсий.ТекущаяВерсия;
	Иначе
		СтруктураВерсий.ПредыдущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтруктураВерсий.ТекущаяВерсия, "РодительскаяВерсия");
	КонецЕсли;

	Возврат СтруктураВерсий;

КонецФункции

Процедура УстановитьДатаАвтоматическойПодготовкиДокументовКСогласованию() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Константы.ДатаАвтоматическойПодготовкиДокументовКСогласованию.Установить(
		ТекущаяДата());

КонецПроцедуры

// Создает бизнес-процесс, а также шлет письмо по легкой почте
//
// Параметры
//  Наименование - Строка - наименование (для наименования бизнес процесса или Темы письма)
//  Описание - Строка - подробное описание
//  ИмяЗаписиЖурналаРегистрации  - Строка - для имени события в журнале регистрации
Процедура УведомитьОтветственныхОПроблеме(Наименование, Описание, ИмяЗаписиЖурналаРегистрации) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(
		ИмяЗаписиЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Описание);

	МассивСотрудников = РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
			Перечисления.РазделыУведомленийОПроблемах.Администрирование);
	Если МассивСотрудников.Количество() = 0 Тогда
		
		Возврат;

	КонецЕсли;

	АдресаОповещения = "";

	Для Каждого Сотрудник Из МассивСотрудников Цикл

		Адрес = ВстроеннаяПочтаСервер.ПолучитьОсновнойАдрес(Сотрудник);

		Если ЗначениеЗаполнено(Адрес) Тогда

			Если ЗначениеЗаполнено(АдресаОповещения) Тогда
				АдресаОповещения = АдресаОповещения + ";";
			КонецЕсли;

			АдресаОповещения = АдресаОповещения + Адрес;

		КонецЕсли;

	КонецЦикла;

	Попытка

		ЗаписьЖурналаРегистрации(
			ИмяЗаписиЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Описание);

		ПолнаяТема = СтрШаблон(НСтр("ru = '%1.'"), Наименование);

		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Тема", ПолнаяТема);
		ПараметрыПисьма.Вставить("Текст", Описание);
		ПараметрыПисьма.Вставить("Кому", АдресаОповещения);
		ПараметрыПисьма.Вставить("ТипТекста",
			Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст);

	Исключение

		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1: %2. %3.'"), ИмяЗаписиЖурналаРегистрации, Наименование, ОписаниеОшибки);

		ЗаписьЖурналаРегистрации(
			ИмяЗаписиЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);

	КонецПопытки;

	СообщениеОбОшибке = "";

	Попытка

		КодВозврата = ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(ПараметрыПисьма, , ,
			СообщениеОбОшибке);

		Если КодВозврата = Ложь Тогда

			ЗаписьЖурналаРегистрации(
				ИмяЗаписиЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
				СообщениеОбОшибке);

		КонецЕсли;

	Исключение

		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1: %2.'"), ИмяЗаписиЖурналаРегистрации, ОписаниеОшибки);

		ЗаписьЖурналаРегистрации(
			ИмяЗаписиЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);

	КонецПопытки;

КонецПроцедуры	

// Получает версию - для Документ - с максимальным номером, для СвязанныйДокумент - текущая версия
Процедура ПолучитьВерсии(Документ, СвязанныйДокумент, Версия1, Версия2) Экспорт

	ТекФайлы1 = СогласованиеВРежимеЗамечанийСервер.ПолучитьПриложенныеФайлыДляТаблицыФайлы(Документ);
	ТекФайлы2 = СогласованиеВРежимеЗамечанийСервер.ПолучитьПриложенныеФайлыДляТаблицыФайлы(
		СвязанныйДокумент);
	Если ТекФайлы1.Количество() <> 1 Или ТекФайлы2.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;

	Файл1 = ТекФайлы1[0];
	Файл2 = ТекФайлы2[0];

	НомерВерсии = РаботаСФайламиВызовСервера.НайтиМаксимальныйНомерВерсии(Файл1);
	Версия1 = СогласованиеВРежимеЗамечанийСервер.ПолучитьВерсию(Файл1, НомерВерсии);
	Если Не ЗначениеЗаполнено(Версия1) Тогда
		Возврат;
	КонецЕсли;

	Версия2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл2, "ТекущаяВерсия");

КонецПроцедуры	

// Проверяет, можно ли создать протокол разногласий. Возвращает Булево, и ТекстОшибки (если вернули Ложь)
Функция МожноСоздатьПротоколРазногласий(БизнесПроцесс, ТекстОшибки) Экспорт

	Возврат Ложь;

КонецФункции

// Формирует данные для команды "Показать отличия файла от предыдущей итерации".
//
// Параметры:
//  СсылкаНаФайл         - СправочникСсылка.Файлы           - Файл, отличия которого нужно показать.
//  Процесс              - БизнесПроцессСсылка.Согласование - Бизнес-процесс, по которому определяется предыдущая итерация.
//  НомерТекущейИтерации - Число                            - Номер текущей итерации бизнес-процесса.
//
// Возвращаемое значение:
//  Структура - Данные для команды "Показать отличия файла от предыдущей итерации".
//   * ТекущаяВерсияФайла          - СправочникСсылка.ВерсииФайлов - Текущая версия файла.
//   * ПредыдущаяВерсияФайла       - СправочникСсылка.ВерсииФайлов - Предыдущая версия файла.
//   * СпособСравненияВерсийФайлов - Строка                        - Способ сравнения версий файлов.
//
Функция ДанныеКомандыПоказатьОтличияФайлаОтПредыдущейИтерации(Знач СсылкаНаФайл, Знач Процесс,
	Знач НомерТекущейИтерации) Экспорт

	НомерПредыдущейИтерации = НомерТекущейИтерации - 1;
	ДатаНачалаПредыдущейИтерации = ТекущаяДата();
	ПредыдущаяВерсияФайла = Справочники.ВерсииФайлов.ВерсияФайлаСозданнаяПоследней(
		СсылкаНаФайл, ДатаНачалаПредыдущейИтерации);

	ТекущаяВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаФайл, "ТекущаяВерсия");
	СпособСравненияВерсийФайлов = "MicrosoftOfficeWord";

	ДанныеКоманды = Новый Структура;
	ДанныеКоманды.Вставить("ТекущаяВерсияФайла", ТекущаяВерсияФайла);
	ДанныеКоманды.Вставить("ПредыдущаяВерсияФайла", ПредыдущаяВерсияФайла);
	ДанныеКоманды.Вставить("СпособСравненияВерсийФайлов", СпособСравненияВерсийФайлов);

	Возврат ДанныеКоманды;

КонецФункции

// Без открытия карточки, создает и стартует поручение
Процедура СоздатьИСтартоватьПоручение(ПараметрыСозданияПоручения) Экспорт

КонецПроцедуры	

// вернет МассивВерсийHTML - Соответствие, Ключ - версия,  значение - структура (ТекстHTMLЗначение, ПростойТекстЗначение)
Функция ВсеВерсииHTML(Действие, УникальныйИдентификатор) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Результат = Новый Соответствие;
	
	//НомерИтерации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "НомерИтерации");
	ВеткаОбработки = НайтиВеткуОбработки(Действие);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Замечания.ВерсияHTML КАК ВерсияHTML
	|ИЗ
	|	Справочник.Замечания КАК Замечания
	|ГДЕ
	|	Замечания.ВеткаОбработки = &ВеткаОбработки
	|	И Замечания.ЭтоЗамечаниеWord = ЛОЖЬ
	|	И Замечания.ВерсияHTML <> ЗНАЧЕНИЕ(Справочник.ВерсииФайлов.ПустаяСсылка)
	|	И Замечания.ЗамечаниеИнициатора = ЛОЖЬ";
	Запрос.УстановитьПараметр("ВеткаОбработки", ВеткаОбработки);

	МассивВерсий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВерсияHTML");

	Для Каждого ВерсияHTML Из МассивВерсий Цикл

		ТекстHTML = ПрочитатьHTMLФайла(ВерсияHTML);
		СтруктВерсии = Новый Структура("ТекстHTML, ЧистыйТекст");
		СтруктВерсии.ТекстHTML = ТекстHTML;

		Результат[ВерсияHTML] = СтруктВерсии;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьВсеПравкиИтерации(ВеткаОбработки, НомерИтерации)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Замечания.Ссылка КАК Ссылка,
	|	Замечания.НомерЭтапа КАК НомерЭтапа,
	|	Замечания.ИдентификаторЭтапа КАК ИдентификаторЭтапа
	|ИЗ
	|	Справочник.Замечания КАК Замечания
	|ГДЕ
	|	Замечания.ВеткаОбработки = &ВеткаОбработки
	|	И Замечания.НомерЭтапа = &НомерЭтапа
	|	И Замечания.ЭтоЗамечаниеWord = ЛОЖЬ
	|	И Замечания.ЗамечаниеИнициатора = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Замечания.ВладелецЗамечания,
	|	Замечания.ИдНачала";
	Запрос.УстановитьПараметр("ВеткаОбработки", ВеткаОбработки);
	Запрос.УстановитьПараметр("НомерЭтапа", НомерИтерации);

	ТаблицаПравок = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаПравок;

КонецФункции	

Функция ПолучитьВсеВладельцыПравокИтерации(ВеткаОбработки, НомерИтерации)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Замечания.ВладелецЗамечания КАК ВладелецЗамечания
	|ИЗ
	|	Справочник.Замечания КАК Замечания
	|ГДЕ
	|	Замечания.ВеткаОбработки = &ВеткаОбработки
	|	И Замечания.НомерЭтапа = &НомерЭтапа
	|	И Замечания.ЭтоЗамечаниеWord = ЛОЖЬ
	|	И Замечания.ЗамечаниеИнициатора = ЛОЖЬ";
	Запрос.УстановитьПараметр("ВеткаОбработки", ВеткаОбработки);
	Запрос.УстановитьПараметр("НомерЭтапа", НомерИтерации);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВладелецЗамечания");

КонецФункции	

// заполнит колонку Номер для текущего этапа
Функция ПеренумероватьПравки(Действие, МассивВерсийHTML, НомерИтерации) Экспорт

	Результат = Новый Соответствие; // ключ - владелец (doc файл), значение - массив структур

	УстановитьПривилегированныйРежим(Истина);

	ВеткаОбработки = НайтиВеткуОбработки(Действие);

	Если ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияСогласования") Тогда
		Возврат Результат;
	КонецЕсли;

	Этапы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Этапы");
	Этапы = Этапы.Выгрузить();
	Этапы.Сортировать("НомерСтроки");
	Если Этапы.Количество() = 0 Тогда
		НовЭтап = Этапы.Добавить();
		НовЭтап.Идентификатор = ДействияСервер.ПредопределенныйИдентификаторУчастника(
			"ЭтапСогласовать");
	КонецЕсли; 

	ПорядковыеНомераЭтапов = Новый Соответствие;
	ПорНомерЭтап = 1;
	Для Каждого СтрЭтап Из Этапы Цикл

		ПорядковыеНомераЭтапов[СтрЭтап.Идентификатор] = ПорНомерЭтап;
		ПорНомерЭтап = ПорНомерЭтап + 1;

	КонецЦикла;	
	
	//включая Комментарий
	ТаблицаПравок = ПолучитьВсеПравкиИтерации(ВеткаОбработки, НомерИтерации);

	ТекВладелец = Неопределено;
	ТекДокумент = Неопределено;
	НомерВнутриВладельца = 1;

	МассивПравок = Новый Массив;

	Для Каждого Строка Из ТаблицаПравок Цикл

		ЗамечаниеСсылка = Строка.Ссылка;
		Запись = ЗамечаниеСсылка.ПолучитьОбъект();

		Если Запись.ВладелецЗамечания <> ТекВладелец Тогда

			Если ЗначениеЗаполнено(ТекВладелец) Тогда

				ФайлDoc = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьМастерФайл(
					Запись.Документ, ТекВладелец);

				Если Результат[ФайлDoc] = Неопределено Тогда
					Результат[ФайлDoc] = МассивПравок;
				Иначе	
					Для Каждого Стр Из МассивПравок Цикл
						Результат[ФайлDoc].Добавить(Стр);
					КонецЦикла;	
				КонецЕсли;	
				
				МассивПравок = Новый Массив;
			КонецЕсли;

			НомерВнутриВладельца = 1;
			ТекВладелец = Запись.ВладелецЗамечания;
			ТекДокумент = Запись.Документ;

		КонецЕсли;

		Запись.СсылкиУтеряны = Истина; // т.к. Ворд файл поменяли, и в html теги заново перестроим.

		СтрокаЭтап = Этапы.Найти(Строка.ИдентификаторЭтапа, "Идентификатор");
		Если СтрокаЭтап <> Неопределено Тогда
			
			//НомерЭтапа = 1;
			НомерЭтапа = ПорядковыеНомераЭтапов[СтрокаЭтап.Идентификатор];
			НомерВходаВЭтап = Запись.НомерЭтапа; //Запись.Цикл;

			Запись.Номер = СтрШаблон("%1.%2.%3", НомерЭтапа, НомерВходаВЭтап, Формат(
				НомерВнутриВладельца, "ЧГ=0"));

			СтруктПравки = Новый Структура("Автор, ВерсияHTML, ТипЗамечания, ИдНачала, Документ, 
			|ИдКонца, Дата, Замечание, ЧтоМеняем, НаЧтоМеняем, Номер, ПорядковыйНомер, Комментарий, НомерБлока, ВладелецЗамечания");
			ЗаполнитьЗначенияСвойств(СтруктПравки, Запись);
			
			Если СтрДлина(СтруктПравки.ЧтоМеняем) > 1 И Лев(СтруктПравки.ЧтоМеняем, 1) = "[" Тогда
				СтруктПравки.ЧтоМеняем = Сред(СтруктПравки.ЧтоМеняем, 2);
			КонецЕсли;
			Если СтрДлина(СтруктПравки.ЧтоМеняем) > 1 И Прав(СтруктПравки.ЧтоМеняем, 1) = "]" Тогда
				СтруктПравки.ЧтоМеняем = Лев(СтруктПравки.ЧтоМеняем, СтрДлина(СтруктПравки.ЧтоМеняем) - 1);
			КонецЕсли;
			
			Если СтрДлина(СтруктПравки.ЧтоМеняем) > 255 Тогда
				СтруктПравки.ЧтоМеняем = Лев(СтруктПравки.ЧтоМеняем, 255);
			КонецЕсли;
			
			МассивПравок.Добавить(СтруктПравки);

			НомерВнутриВладельца = НомерВнутриВладельца + 1;

		КонецЕсли;

		Запись.Записать();

	КонецЦикла;

	Если ЗначениеЗаполнено(ТекВладелец) И МассивПравок.Количество() <> 0 Тогда

		ФайлDoc = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьМастерФайл(
			ТекДокумент, ТекВладелец);

		Если Результат[ФайлDoc] = Неопределено Тогда
			Результат[ФайлDoc] = МассивПравок;
		Иначе	
			Для Каждого Стр Из МассивПравок Цикл
				Результат[ФайлDoc].Добавить(Стр);
			КонецЦикла;	
		КонецЕсли;	

		МассивПравок = Новый Массив;

	КонецЕсли;	
	
	// тут пройдем по Результат, поднимем ВерсияHTML (если есть - для документа нет)
	// - прочитаем - и там найдем ПорядковыйНомер     
	
	КешHtmlФайлов = Новый Соответствие; // ключ - ФайлDoc, значение - Массив Структур  "Файл, НомерБлока, ФайлТекущаяВерсия, ТекстHTML"

	Для Каждого КлючИЗначение Из Результат Цикл

		ТекВерсияHTML = Неопределено;

		ТекстHTML = "";
		ЧистыйТекст = "";

		Для Каждого СтруктПравки Из КлючИЗначение.Значение Цикл

			Если СтруктПравки.ВерсияHTML <> ТекВерсияHTML Тогда

				СтруктТекста = МассивВерсийHTML.Получить(СтруктПравки.ВерсияHTML);
				Если СтруктТекста <> Неопределено Тогда

					ТекстHTML = СтруктТекста.ТекстHTML;
					ЧистыйТекст = СтруктТекста.ЧистыйТекст;

				КонецЕсли;

			КонецЕсли;

			Если СтрДлина(СтруктПравки.ЧтоМеняем) > 255 Тогда
				СтруктПравки.ЧтоМеняем = Лев(СтруктПравки.ЧтоМеняем, 255);
			КонецЕсли;

			ПозПеревода = -1;
			Поз1 = СтрНайти(СтруктПравки.ЧтоМеняем, Символы.ВК);
			Поз2 = СтрНайти(СтруктПравки.ЧтоМеняем, Символы.ПС);
			Если Поз1 <> 0 Или Поз2 <> 0 Тогда

				Если Поз1 <> 0 И Поз2 <> 0 Тогда
					ПозПеревода = Мин(Поз1, Поз2);
				ИначеЕсли Поз1 <> 0 И Поз2 = 0 Тогда
					ПозПеревода = Поз1;
				ИначеЕсли Поз1 = 0 И Поз2 <> 0 Тогда
					ПозПеревода = Поз2;
				КонецЕсли;

				СтруктПравки.ЧтоМеняем = Лев(СтруктПравки.ЧтоМеняем, ПозПеревода - 1);
				СтруктПравки.ЧтоМеняем = СокрП(СтруктПравки.ЧтоМеняем); // справа пробелы могли остаться до перевода строки

			КонецЕсли;

			СтруктПравки.ПорядковыйНомер = НайтиПозициюПравки(СтруктПравки, ТекстHTML, ЧистыйТекст);
			
			Если СтруктПравки.НомерБлока > 0 Тогда
				// получим весь массив (html + номер)
				// и по всем что менее НомерБлока соберем и просумируем порядок слова ЧтоМеняем и добавим к ПорядковыйНомер
				
				СтруктПравки.ПорядковыйНомер = СтруктПравки.ПорядковыйНомер 
					+ ДобавкаПорядковогоНомераЗамечания(СтруктПравки.ЧтоМеняем, 
						СтруктПравки.НомерБлока, 
						СтруктПравки.Документ, 
						СтруктПравки.ВладелецЗамечания,
						КешHtmlФайлов);
				
			КонецЕсли;	

			ТекВерсияHTML = СтруктПравки.ВерсияHTML;
			
			Если СтрДлина(СтруктПравки.ЧтоМеняем) > 255 Тогда
				СтруктПравки.ЧтоМеняем = Лев(СтруктПравки.ЧтоМеняем, 255);
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;

	Возврат Результат;

КонецФункции

// По всем нижележащим порциям найдем сумму количества вхождений слова.
Функция ДобавкаПорядковогоНомераЗамечания(ЧтоМеняем, 
	НомерБлока, Документ, ВладелецЗамечания,
	КешHtmlФайлов)    
	
	Добавка = 0;
	
	//  потом надо кешировать файлы и их html. при переносе в типовую.
	ФайлDoc = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьМастерФайл(Документ, ВладелецЗамечания);
	
	ВладелецЗамечанияМассив = КешHtmlФайлов[ФайлDoc];
	
	Если ВладелецЗамечанияМассив = Неопределено Тогда
		
		ВладелецЗамечанияМассив = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьВсеСлужебныеФайлыСНомеромБлока(
			Документ, ФайлDoc, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);
			
		КешHtmlФайлов[ФайлDoc] = ВладелецЗамечанияМассив;	
			
	КонецЕсли;	
		
	Для Каждого ОписаниеФайла Из ВладелецЗамечанияМассив Цикл
			
		//"Файл, НомерБлока" 
		Если ОписаниеФайла.НомерБлока < НомерБлока Тогда  
			
			Если ЗначениеЗаполнено(ОписаниеФайла.ТекстHTML) Тогда
				ТекстHTML = ОписаниеФайла.ТекстHTML;
			Иначе
				ТекстHTML = ПрочитатьHTMLФайла(ОписаниеФайла.ФайлТекущаяВерсия);
				ОписаниеФайла.ТекстHTML = ТекстHTML;
			КонецЕсли;
			
			ПозицияОстановки = 100000000;
			ДобавкаТек = НайтиПорядковыйНомер_HTML(ТекстHTML, ЧтоМеняем, ПозицияОстановки);
			Добавка = Добавка + ДобавкаТек;
			
		КонецЕсли;	
			
	КонецЦикла;	
		
	Возврат Добавка;
						
КонецФункции						

Функция ЭтоЦифра(Символ)

	Возврат СтрНайти("0123456789", Символ) > 0;

КонецФункции

Функция ЭтоБуква(Символ)

	Возврат СтрНайти("abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя", НРег(Символ))
		> 0;

КонецФункции

Функция НайтиПозициюПравки(СтруктПравки, ТекстHTML, ЧистыйТекст)
	
	//в правке "Что меняем" - надо в тексте (из html) - найти , какой по порядку. 
	//у нас есть ID первого слова. Можно найти просто одно слово (не фразу) - его позицию. 
	//(порядковый номер в html - пусть 10) - и потом порядковый номер в txt - тоже 10
	// - и вот у нас на руках позиция в txt, пусть 1220. Далее в цикле в txt ищем фразу, 
	//и если нашли ту, что начинается с 1220 - это она , и вот ее порядковый номер (пусть 3).
	
	
	//ИдНачала  ЧтоМеняем

	ИдНачала = СтруктПравки.ИдНачала;
	ЧтоМеняем = СтруктПравки.ЧтоМеняем;
	ИдКонца = СтруктПравки.ИдКонца;

	ПервоеСлово = "";

	МассивСловВыделения = СогласованиеВРежимеЗамечанийHTMLКлиентСервер.СтрокуПочтовогоАдресаВСлова(
		ЧтоМеняем);
	Если МассивСловВыделения.Количество() <> 0 Тогда
		ПервоеСлово = МассивСловВыделения[0];
	КонецЕсли;

	Если ПервоеСлово = "" Тогда
		Возврат -1;
	КонецЕсли;	
	
	// сперва найдем в html позицию

	НапалоВЗаголовкеНумерованногоСписка = Ложь;
	НомерВHTML = НайтиПорядковыйНомерВHTML_ПоИДСлова(ТекстHTML, ПервоеСлово, ИдНачала,
		НапалоВЗаголовкеНумерованногоСписка, ИдКонца, ЧтоМеняем);
	Если НомерВHTML = 0 Тогда
		Возврат -1;
	КонецЕсли;

	Если ЧтоМеняем <> СтруктПравки.ЧтоМеняем Тогда

		СтруктПравки.ЧтоМеняем = ЧтоМеняем;

	КонецЕсли;

	ПозицияВТексте = НайтиПозициюПоПорядковыйНомер(ЧистыйТекст, ПервоеСлово, НомерВHTML);
	Если ПозицияВТексте = 0 Тогда
		Возврат -1;
	КонецЕсли;

	НомерВТексте = НайтиПорядковыйНомер(ЧистыйТекст, ЧтоМеняем, ПозицияВТексте);

	Возврат НомерВТексте;

КонецФункции

// только цифры, точки, пробелы, и пр незначащие
Функция ЭтаСтрокаТолькоИзЦифр(ЧтоМеняем)

	Для поз = 1 По СтрДлина(ЧтоМеняем) Цикл

		СимволСтроки = Сред(ЧтоМеняем, поз, 1);

		Если ЭтоБуква(СимволСтроки) Тогда
			Возврат Ложь;  // есть что-то кроме цифр и незначащих
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции

Процедура УрезатьЦифрыВначале(ЧтоМеняем)
	
	// ЧтоМеняем - вырежем цифры в вначале

	ПозицияНачалаРеальногоТекста = -1;

	Для поз = 1 По СтрДлина(ЧтоМеняем) Цикл

		СимволСтроки = Сред(ЧтоМеняем, поз, 1);

		Если ЭтоЦифра(СимволСтроки) Или СимволСтроки = "." Или СимволСтроки = "," Или СимволСтроки
			= " " Или СимволСтроки = Символы.ВТаб Или СимволСтроки = Символы.Таб Тогда
			// продолжаем
		Иначе
			ПозицияНачалаРеальногоТекста = поз;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если ПозицияНачалаРеальногоТекста <> -1 Тогда
		ЧтоМеняем = Сред(ЧтоМеняем, ПозицияНачалаРеальногоТекста);
	КонецЕсли;

КонецПроцедуры

Функция ВычленитьОбщуюЧасть(ЧтоМеняем, ЧтоМеняем_Прежнее)

	Если ЧтоМеняем = ЧтоМеняем_Прежнее Тогда
		Возврат ЧтоМеняем;
	КонецЕсли;

	ПозицияНачалаРасхождений = -1;
	ДлинаПроверки = Мин(СтрДлина(ЧтоМеняем), СтрДлина(ЧтоМеняем_Прежнее));

	Для поз = 1 По ДлинаПроверки Цикл

		СимволСтроки1 = Сред(ЧтоМеняем, поз, 1);
		СимволСтроки2 = Сред(ЧтоМеняем_Прежнее, поз, 1);

		Если СимволСтроки1 <> СимволСтроки2 Тогда
			ПозицияНачалаРасхождений = поз;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если ПозицияНачалаРасхождений > 1 Тогда  // если 1 - на первом же расхождение - нет смысла
		ЧтоМеняемВозврат = Лев(ЧтоМеняем, ПозицияНачалаРасхождений - 1);
		ЧтоМеняемВозврат = СокрЛП(ЧтоМеняемВозврат);
		Возврат ЧтоМеняемВозврат;
	КонецЕсли;

	Возврат ЧтоМеняем; // какая то ошибка, или же обе строки идентичны - вернем то же что было

КонецФункции	

// Текст - может быть плейн текст или html,  Слово - одно слово или фраза
Функция НайтиПорядковыйНомерВHTML_ПоИДСлова(ТекстHTML, Слово, ИдНачала,
	НапалоВЗаголовкеНумерованногоСписка, ИдКонца, ЧтоМеняем)

	Если СтрДлина(ЧтоМеняем) = 0 Тогда
		Возврат -1;
	КонецЕсли;

	НапалоВЗаголовкеНумерованногоСписка = Ложь;
	БылаИзмененаСтрока = Ложь;

	ТекстHTMLНРег = НРег(ТекстHTML);

	ИДСтрока = Формат(ИдНачала, "ЧГ=0");
	СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
	ПозицияВHtml = СтрНайти(ТекстHTMLНРег, СтрокаПоиска);
	Если ПозицияВHtml = 0 Тогда
		Возврат -1;
	КонецЕсли;

	ПозицияВHtmlСлова = ПозицияВHtml + СтрДлина(СтрокаПоиска);

	Если ИдКонца > ИдНачала Тогда

		ИДСтрока2 = Формат(ИдКонца, "ЧГ=0");
		СтрокаПоиска2 = СтрШаблон("<span id=do_%1>", ИДСтрока2);
		ПозицияВHtmlКонец = СтрНайти(ТекстHTMLНРег, СтрокаПоиска2);
		Если ПозицияВHtmlКонец = 0 Тогда
			Возврат -1;
		КонецЕсли;

		ПозицияВHtml_Сноска = СтрНайти(ТекстHTMLНРег, "mso-footnote", НаправлениеПоиска.СНачала,
			ПозицияВHtml);
		ПозицияВHtml_Поле = СтрНайти(ТекстHTMLНРег, "field-begin", НаправлениеПоиска.СНачала,
			ПозицияВHtml);
		ПозицияВHtml_msocomment = СтрНайти(ТекстHTMLНРег, "msocomment", НаправлениеПоиска.СНачала,
			ПозицияВHtml);
		НашлиСноску = ПозицияВHtml_Сноска <> 0 И ПозицияВHtml_Сноска < ПозицияВHtmlКонец;
		НашлиПоле = ПозицияВHtml_Поле <> 0 И ПозицияВHtml_Поле < ПозицияВHtmlКонец;
		Нашлиmsocomment = ПозицияВHtml_msocomment <> 0 И ПозицияВHtml_msocomment < ПозицияВHtmlКонец;

		Если НашлиСноску Или НашлиПоле Или Нашлиmsocomment Тогда

			ПозицияВHtml_СноскаИлиПоле = 0;

			Если ПозицияВHtml_Сноска <> 0 Тогда
				Если ПозицияВHtml_СноскаИлиПоле = 0 Тогда
					ПозицияВHtml_СноскаИлиПоле = ПозицияВHtml_Сноска;
				Иначе
					ПозицияВHtml_СноскаИлиПоле = Мин(ПозицияВHtml_СноскаИлиПоле,
						ПозицияВHtml_Сноска);
				КонецЕсли;
			КонецЕсли;

			Если ПозицияВHtml_Поле <> 0 Тогда
				Если ПозицияВHtml_СноскаИлиПоле = 0 Тогда
					ПозицияВHtml_СноскаИлиПоле = ПозицияВHtml_Поле;
				Иначе
					ПозицияВHtml_СноскаИлиПоле = Мин(ПозицияВHtml_СноскаИлиПоле, ПозицияВHtml_Поле);
				КонецЕсли;
			КонецЕсли;

			Если ПозицияВHtml_msocomment <> 0 Тогда
				Если ПозицияВHtml_СноскаИлиПоле = 0 Тогда
					ПозицияВHtml_СноскаИлиПоле = ПозицияВHtml_msocomment;
				Иначе
					ПозицияВHtml_СноскаИлиПоле = Мин(ПозицияВHtml_СноскаИлиПоле,
						ПозицияВHtml_msocomment);
				КонецЕсли;
			КонецЕсли;

			ПозицияНачалаА = СтрНайти(ТекстHTMLНРег, "<", НаправлениеПоиска.СКонца,
				ПозицияВHtml_СноскаИлиПоле);
			HTMLВырезка = Сред(ТекстHTML, ПозицияВHtml, ПозицияНачалаА - ПозицияВHtml);
			ЧтоМеняем_Прежнее = ЧтоМеняем;
			ЧтоМеняем = РаботаС_HTML.ПолучитьТекстИзHTML(HTMLВырезка);
			ЧтоМеняем = СокрЛП(ЧтоМеняем);
			ЧтоМеняем = ВычленитьОбщуюЧасть(ЧтоМеняем, ЧтоМеняем_Прежнее);

			ПозПеревода = -1;
			Поз1 = СтрНайти(ЧтоМеняем, Символы.ВК);
			Поз2 = СтрНайти(ЧтоМеняем, Символы.ПС);
			Если Поз1 <> 0 Или Поз2 <> 0 Тогда // есть перевод строки

				БылаИзмененаСтрока = Истина;

				МассивСтрок = СтрРазделить(ЧтоМеняем, Символы.ПС + Символы.ВК, Ложь);
				Если МассивСтрок.Количество() > 1 И СтрДлина(МассивСтрок[0]) > 0 И ЭтоЦифра( Сред(
					МассивСтрок[0], 1, 1)) Тогда

					Для Каждого ПодСтр Из МассивСтрок Цикл

						Если Не ЭтаСтрокаТолькоИзЦифр(ПодСтр) Тогда
							ЧтоМеняем = ПодСтр;
							УрезатьЦифрыВначале(ЧтоМеняем);
							ЧтоМеняем = СокрЛП(ЧтоМеняем);
							Прервать;
						КонецЕсли;

					КонецЦикла;

				Иначе

					Если Поз1 <> 0 И Поз2 <> 0 Тогда
						ПозПеревода = Мин(Поз1, Поз2);
					ИначеЕсли Поз1 <> 0 И Поз2 = 0 Тогда
						ПозПеревода = Поз1;
					ИначеЕсли Поз1 = 0 И Поз2 <> 0 Тогда
						ПозПеревода = Поз2;
					КонецЕсли;

					ЧтоМеняем = Лев(ЧтоМеняем, ПозПеревода - 1);
					ЧтоМеняем = СокрЛП(ЧтоМеняем);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	Иначе // отрежем [	

		ПозСкобка = СтрНайти(ЧтоМеняем, "[");
		Если ПозСкобка <> 0 Тогда
			БылаИзмененаСтрока = Истина;
			ЧтоМеняем = Лев(ЧтоМеняем, ПозСкобка - 1);
		КонецЕсли;

	КонецЕсли;

	Если Не БылаИзмененаСтрока И ЭтаПозицияВнутри(ТекстHTML, ПозицияВHtmlСлова,
		"<![if !supportLists]>", "<![endif]>") Тогда

		НапалоВЗаголовкеНумерованногоСписка = Истина;

		Если НапалоВЗаголовкеНумерованногоСписка Тогда
			// ЧтоМеняем - вырежем цифры в вначале

			ПозицияНачалаРеальногоТекста = -1;

			Для поз = 1 По СтрДлина(ЧтоМеняем) Цикл

				СимволСтроки = Сред(ЧтоМеняем, поз, 1);

				Если ЭтоЦифра(СимволСтроки) Или СимволСтроки = "." Или СимволСтроки = ","
					Или СимволСтроки = " " Или СимволСтроки = Символы.ВТаб Или СимволСтроки
					= Символы.Таб Тогда
					// продолжаем
				Иначе
					ПозицияНачалаРеальногоТекста = поз;
					Прервать;
				КонецЕсли;

			КонецЦикла;

			Если ПозицияНачалаРеальногоТекста <> -1 Тогда
				ЧтоМеняем = Сред(ЧтоМеняем, ПозицияНачалаРеальногоТекста);
				БылаИзмененаСтрока = Истина;
			КонецЕсли;

		КонецЕсли;

	Иначе // даже если это не нумерованный список, все равно проверим ТАБ в начале	

		СимволСтроки = Сред(ЧтоМеняем, 1, 1);

		Если ЭтоЦифра(СимволСтроки) Тогда
			// ЧтоМеняем - вырежем цифры в вначале

			ПозицияНачалаРеальногоТекста = -1;
			ВстретилиТАБ = Ложь;

			Для поз = 1 По СтрДлина(ЧтоМеняем) Цикл

				СимволСтроки = Сред(ЧтоМеняем, поз, 1);

				Если СимволСтроки = Символы.ВТаб Или СимволСтроки = Символы.Таб Тогда
					ВстретилиТАБ = Истина;
				КонецЕсли;

				Если ЭтоЦифра(СимволСтроки) Или СимволСтроки = "." Или СимволСтроки = ","
					Или СимволСтроки = " " Или СимволСтроки = Символы.ВТаб Или СимволСтроки
					= Символы.Таб Тогда
					// продолжаем
				Иначе
					ПозицияНачалаРеальногоТекста = поз;
					Прервать;
				КонецЕсли;

			КонецЦикла;

			Если ПозицияНачалаРеальногоТекста <> -1 Тогда
			//Если ВстретилиТАБ И ПозицияНачалаРеальногоТекста <> -1 Тогда

				ЧтоМеняем2 = Сред(ЧтоМеняем, ПозицияНачалаРеальногоТекста);
				Если СтрДлина(ЧтоМеняем2) > 5 Тогда // после отрезания цифр должно что-то остаться
					ЧтоМеняем = ЧтоМеняем2;
					БылаИзмененаСтрока = Истина;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если БылаИзмененаСтрока Тогда

		МассивСловВыделения = СогласованиеВРежимеЗамечанийHTMLКлиентСервер.СтрокуПочтовогоАдресаВСлова(
			ЧтоМеняем);
		Если МассивСловВыделения.Количество() <> 0 Тогда
			Слово = МассивСловВыделения[0];
		КонецЕсли;	
		
		// ПозицияВHtmlСлова - надо пересчитать

		ПозицияВHtmlСлова = СтрНайти(ТекстHTMLНРег, НРег(Слово), НаправлениеПоиска.СНачала,
			ПозицияВHtml);
		//Если ПозицияВHtmlСлова = 0 Тогда
		//	Возврат -1;
		//КонецЕсли;	

	КонецЕсли;

	НайденныйПоСчету = 0;
	Если ПозицияВHtmlСлова <> 0 Тогда
		НайденныйПоСчету = НайтиПорядковыйНомер_HTML(ТекстHTML, Слово, ПозицияВHtmlСлова);
	КонецЕсли;

	Если НайденныйПоСчету = 0 Тогда // вероятно первое слово в html разбито на части (срок =  с рок ), пробуем второе

		МассивСловВыделения = СогласованиеВРежимеЗамечанийHTMLКлиентСервер.СтрокуПочтовогоАдресаВСлова(
			ЧтоМеняем);
		Если МассивСловВыделения.Количество() >= 2 Тогда
			Слово = МассивСловВыделения[1];
		КонецЕсли;	
		
		// ПозицияВHtmlСлова - надо пересчитать

		ПозицияВHtmlСлова = СтрНайти(ТекстHTMLНРег, НРег(Слово), НаправлениеПоиска.СНачала,
			ПозицияВHtml);
		Если ПозицияВHtmlСлова = 0 Тогда
			Возврат -1;
		КонецЕсли;

		НайденныйПоСчету = НайтиПорядковыйНомер_HTML(ТекстHTML, Слово, ПозицияВHtmlСлова);

	КонецЕсли;

	Возврат НайденныйПоСчету;

КонецФункции

Функция ЭтаПозицияВнутри(Текст, Поз, ТекстНачала, ТекстКонца)
	
	// проверим что мы не внутри <>
	ПозицияНачала = СтрНайти(Текст, ТекстНачала, НаправлениеПоиска.СКонца, Поз);
	Если ПозицияНачала = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	ПозицияНачалаЗакрытие = СтрНайти(Текст, ТекстКонца, , ПозицияНачала);
	Если ПозицияНачалаЗакрытие = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПозицияНачалаЗакрытие > Поз Тогда // значит ПОз - между ТекстНачала, ТекстКонца - и его пропускаем
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Текст - html,  Слово - одно слово или фраза
Функция НайтиПорядковыйНомер_HTML(Текст, Слово, ПозицияОстановки)

	Поз = 1;
	НайденныйПоСчету = 0;

	НачальнаяПозиция = 1;
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(Текст);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		Поз = ПозицияНачалаBody;
	КонецЕсли;

	ЧислоИтераций = 0;
	Пока Истина Цикл

		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 10000 Тогда
			Прервать;
		КонецЕсли;

		Поз = СтрНайти(Текст, Слово, НаправлениеПоиска.СНачала, Поз);
		Если Поз = 0 Тогда
			Возврат НайденныйПоСчету;
		КонецЕсли;	
		
		// проверим что мы не внутри <>
		ПозицияНачала = СтрНайти(Текст, "<", НаправлениеПоиска.СКонца, Поз);
		Если ПозицияНачала = 0 Тогда
			Возврат НайденныйПоСчету;
		КонецЕсли;

		ПозицияНачалаЗакрытие = СтрНайти(Текст, ">", , ПозицияНачала);
		Если ПозицияНачалаЗакрытие = 0 Тогда
			Возврат НайденныйПоСчету;
		КонецЕсли;

		Если ПозицияНачалаЗакрытие > Поз Тогда // значит ПОз - между <> - и его пропускаем
			Поз = Поз + 1;
			Продолжить;
		КонецЕсли;	
		
		 // значит Поз - в комментарии - и его пропускаем
		Если ЭтаПозицияВнутри(ТекстПисьмаДляПравкиНРег, Поз, "<!--[if gte mso 9]>", "<![endif]") Тогда
			Поз = Поз + 1;
			Продолжить;
		КонецЕсли;

		НайденныйПоСчету = НайденныйПоСчету + 1;

		Если Поз = ПозицияОстановки Тогда
			Возврат НайденныйПоСчету;
		КонецЕсли;

		Если Поз > ПозицияОстановки Тогда
			Возврат 0; // проскочили, нет смысла искать дальше
		КонецЕсли;

		Поз = Поз + 1;

	КонецЦикла;

	Возврат НайденныйПоСчету;

КонецФункции

// Текст - может быть плейн текст или html,  Слово - одно слово или фраза
Функция НайтиПозициюПоПорядковыйНомер(Текст, Слово, ПорядковыйНомер)

	Поз = 1;
	НайденныйПоСчету = 0;

	ЧислоИтераций = 0;
	Пока Истина Цикл

		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 10000 Тогда
			Прервать;
		КонецЕсли;

		Поз = СтрНайти(Текст, Слово, НаправлениеПоиска.СНачала, Поз);
		Если Поз = 0 Тогда
			Возврат 0;
		КонецЕсли;

		НайденныйПоСчету = НайденныйПоСчету + 1;

		Если НайденныйПоСчету = ПорядковыйНомер Тогда
			Возврат Поз;
		КонецЕсли;

		Поз = Поз + 1;

	КонецЦикла;

	Возврат 0;

КонецФункции

// Текст - может быть плейн текст или html,  Слово - одно слово или фраза
Функция НайтиПорядковыйНомер(Текст, Слово, ПозицияОстановки)

	Если Слово = "" Тогда
		Возврат 0;
	КонецЕсли;

	Поз = 1;
	НайденныйПоСчету = 0;

	ЧислоИтераций = 0;
	Пока Истина Цикл

		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 10000 Тогда
			Прервать;
		КонецЕсли;

		Поз = СтрНайти(Текст, Слово, НаправлениеПоиска.СНачала, Поз);
		Если Поз = 0 Тогда
			Возврат НайденныйПоСчету;
		КонецЕсли;

		НайденныйПоСчету = НайденныйПоСчету + 1;

		Если Поз = ПозицияОстановки Тогда
			Возврат НайденныйПоСчету;
		КонецЕсли;

		Если Поз > ПозицияОстановки Тогда
			Возврат 0; // проскочили, нет смысла искать дальше
		КонецЕсли;

		Поз = Поз + 1;

	КонецЦикла;

	Возврат НайденныйПоСчету;

КонецФункции

Функция ПрочитатьHTMLФайла(ВерсияHTML)

	ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(ВерсияHTML);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);

	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,
		СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
	ТекстHTML = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	ФайлHTML = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияHTML, "Владелец");

	ТекстHTML = СтрЗаменить(ТекстHTML, Символ(1), " ");

	Возврат ТекстHTML;

КонецФункции

// Возвращает массив Структур для файлов doc docx
// ФайлСсылка, ТекущаяВерсия, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла
Функция ПодготовитьМассивФайловПоДействию_ДобавлениеКомментария(Действие, УникальныйИдентификатор) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");

	Возврат ПодготовитьМассивФайлов_ДобавлениеКомментария(
		Предмет, УникальныйИдентификатор);

КонецФункции	

// Возвращает массив Структур для файлов doc docx
// ФайлСсылка, ТекущаяВерсия, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла
Функция ПодготовитьМассивФайлов_ДобавлениеКомментария(Знач Предмет, УникальныйИдентификатор) Экспорт

	МассивФайлов = Новый Массив;

	Если ЗначениеЗаполнено(Предмет) И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет) Тогда

		ВладелецФайла = Предмет;

		ТекФайлы = ПолучитьПриложенныеФайлы_Комментарий(ВладелецФайла);
		Для Каждого Файл Из ТекФайлы Цикл
			МассивФайлов.Добавить(Файл);
		КонецЦикла;

	КонецЕсли;

	Возврат ПодготовитьМассивФайлов_ДобавлениеКомментария_ПоМассиву(
			Предмет, МассивФайлов, УникальныйИдентификатор);

КонецФункции	

// Получает файлы у владельца doc docx
Функция ПолучитьПриложенныеФайлы_Комментарий(ВладелецФайла) Экспорт

	МассивФайлов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
	|			И (СлужебныеФайлыДокументов.Документ = &ВладелецФайла)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ
	|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";

	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Выборка.Расширение) Тогда
			МассивФайлов.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивФайлов;

КонецФункции
Функция ПодготовитьМассивФайлов_ДобавлениеКомментария_ПоМассиву(Документ, МассивФайлов,
	УникальныйИдентификатор) Экспорт

	МассивСтруктурРезультата = Новый Массив;

	ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(МассивФайлов,
		УникальныйИдентификатор);

	ТаблицаФайлов = ПолучитьПараметрыФайлов(Документ, МассивФайлов);

	Для Каждого Данные Из ДанныеФайлов Цикл

		СтруктураРезультата 
			= Новый Структура("ФайлСсылка, ФайлHTMLСсылка, ТекущаяВерсия, Владелец, Наименование, Расширение, РасширениеDocФайла, РазмерDOCФайла, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаDocИзмененного, ШаблонОснованиеДляСоздания, ВладелецТиповой");

		Индекс = ДанныеФайлов.Найти(Данные);
		Если Индекс <> Неопределено И ТаблицаФайлов.Количество() = ДанныеФайлов.Количество() Тогда

			ФайлПарам = ТаблицаФайлов[Индекс];

			СтруктураРезультата.ШаблонОснованиеДляСоздания	 = ФайлПарам.ШаблонОснованиеДляСоздания;

		КонецЕсли;

		СтруктураРезультата.ФайлСсылка = Данные.Ссылка;
		СтруктураРезультата.Расширение = Данные.Расширение;
		СтруктураРезультата.Наименование = Данные.ПолноеНаименованиеВерсии;
		СтруктураРезультата.АдресВременногоХранилищаФайлаDoc = Данные.НавигационнаяСсылкаТекущейВерсии;
		СтруктураРезультата.Владелец = Данные.Владелец;
		СтруктураРезультата.ТекущаяВерсия = Данные.ТекущаяВерсия;

		СтруктураРезультата.ФайлHTMLСсылка = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
				СтруктураРезультата.Владелец, СтруктураРезультата.ФайлСсылка,
			Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);

		СтруктураРезультата.РасширениеDocФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтруктураРезультата.ФайлСсылка, "ТекущаяВерсияРасширение");

		Если ЗначениеЗаполнено(СтруктураРезультата.ШаблонОснованиеДляСоздания) Тогда

			Документ = СтруктураРезультата.Владелец;
			Если ТипЗнч(Документ) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда

				Рез = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ВидДокумента, Шаблон"); // Типовой, 
				Рез.Вставить("Типовой", Ложь);

				ШаблонДокументаТиповой = Ложь;

				Если ШаблонДокументаТиповой Тогда

					СтруктураРезультата.ВладелецТиповой = ШаблонДокументаТиповой;

					ПарольЗащитыWord = "";

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		МассивСтруктурРезультата.Добавить(СтруктураРезультата);

	КонецЦикла;

	Возврат МассивСтруктурРезультата;

КонецФункции			

// Создает новую версию для файлов HTML
//
//  МассивФайловПараллельногоСогласования - массив структур
// // ФайлСсылка, ФайлHTMLСсылка, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML РазмерHTMLФайла
Процедура ОбновитьHTMLФайлы_ПлюсWordФайл(МассивФайловПараллельногоСогласования, НомерИтерации = 0) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ОбновитьWordФайлы(МассивФайловПараллельногоСогласования, НСтр(
		"ru = 'Версия создана при добавлении комментариев.'"));

	Для Каждого СтруктураФайла Из МассивФайловПараллельногоСогласования Цикл

		Если Не ЗначениеЗаполнено(СтруктураФайла.ФайлHTMLСсылка) И СтруктураФайла.АдресаФайловHTML.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		// не было комментариев по файлу, не надо обновлять ни doc, ни html
		Если Не СтруктураФайла.Свойство("АдресВременногоХранилищаФайлаHTML") Тогда
			Продолжить;
		КонецЕсли;  
		
		Если СтруктураФайла.АдресаФайловHTML.Количество() <> 0 Тогда  
			
			СтарыеHtmlФайлы = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьВсеСлужебныеФайлыСНомеромБлока(
				СтруктураФайла.Владелец, СтруктураФайла.ФайлСсылка, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);
			
			// удалим все html файлы (пометим на удаление)
			РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
				СтруктураФайла.Владелец, СтруктураФайла.ФайлСсылка, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);
				
			НомерБлока = 0;
			
			Для Каждого АдресФайлаHTML Из СтруктураФайла.АдресаФайловHTML Цикл
			
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(
					АдресФайлаHTML);           
					
				РазмерHTMLФайла = ДвоичныеДанные.Размер();	

				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
				ДвоичныеДанные.Записать(ИмяВременногоФайла);

				ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,
					СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
				ТекстHTML = ЧтениеТекста.Прочитать();
				ЧтениеТекста.Закрыть();

				СогласованиеВРежимеЗамечанийHTMLСервер.УменьшитьШрифтСносок(ТекстHTML);

				ИмяВременногоФайлаНового = ПолучитьИмяВременногоФайла("html");
				ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайлаНового,
					СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
				ТекстовыйФайл.Записать(ТекстHTML);
				ТекстовыйФайл.Закрыть();
				ДвоичныеДанныеНовые = Новый ДвоичныеДанные(ИмяВременногоФайлаНового);

				УдалитьФайлы(ИмяВременногоФайла);
				УдалитьФайлы(ИмяВременногоФайлаНового);

				Попытка

					НачатьТранзакцию();

					ДопустимаяДлинаИмениФайла = 50;
					ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;

					Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
						ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное,
							ДопустимаяДлинаИмениФайла);
						ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
					КонецЕсли;

					СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
					
					СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(
						ДвоичныеДанныеНовые);

					СведенияОФайле.ИмяБезРасширения = ИмяБезРасширенияУрезанное;
					СведенияОФайле.РасширениеБезТочки = "html";
					СведенияОФайле.ВремяИзменения = ТекущаяДата();
					СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
					СведенияОФайле.Размер = СтруктураФайла.РазмерHTMLФайла;  
					
					ФайлHTMLСсылка =  РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
						СтруктураФайла.Владелец, СведенияОФайле);
						
					ТребуетсяДолгаяОбработка = Ложь;	

					РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
						СтруктураФайла.Владелец, СтруктураФайла.ФайлСсылка,
						Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание, ФайлHTMLСсылка, Неопределено,
						ТребуетсяДолгаяОбработка,,НомерБлока);

					РегистрыСведений.ФайлыСКомментариямиWord.ДобавитьФайл(СтруктураФайла.ФайлСсылка,
						НомерИтерации);   
						
					НовыйHTMLФайл = ФайлHTMLСсылка;
					ЗаменитьФайлВПравкахБлоки(СтарыеHtmlФайлы, НовыйHTMLФайл, НомерБлока);

					ЗафиксироватьТранзакцию();

				Исключение

					ОтменитьТранзакцию();
					ВызватьИсключение;

				КонецПопытки;   
				
				НомерБлока = НомерБлока + 1;
				
			КонецЦикла;	
			
		Иначе
			// как раньше

			ДвоичныеДанные = ПолучитьИзВременногоХранилища(
				СтруктураФайла.АдресВременногоХранилищаФайлаHTML);

			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
			ДвоичныеДанные.Записать(ИмяВременногоФайла);

			ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,
				СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
			ТекстHTML = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();

			СогласованиеВРежимеЗамечанийHTMLСервер.УменьшитьШрифтСносок(ТекстHTML);

			ИмяВременногоФайлаНового = ПолучитьИмяВременногоФайла("html");
			ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайлаНового,
				СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
			ТекстовыйФайл.Записать(ТекстHTML);
			ТекстовыйФайл.Закрыть();
			ДвоичныеДанныеНовые = Новый ДвоичныеДанные(ИмяВременногоФайлаНового);

			УдалитьФайлы(ИмяВременногоФайла);
			УдалитьФайлы(ИмяВременногоФайлаНового);

			Попытка

				НачатьТранзакцию();

				ДопустимаяДлинаИмениФайла = 50;
				ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;

				Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
					ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное,
						ДопустимаяДлинаИмениФайла);
					ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
				КонецЕсли;

				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
				
				СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеНовые);

				СведенияОФайле.ИмяБезРасширения = ИмяБезРасширенияУрезанное;
				СведенияОФайле.РасширениеБезТочки = "html";
				СведенияОФайле.ВремяИзменения = ТекущаяДата();
				СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
				СведенияОФайле.Размер = СтруктураФайла.РазмерHTMLФайла;

				ФайлHTMLСсылка = СтруктураФайла.ФайлHTMLСсылка;
				ОбновлятьНеГлядяНаБлокировку = Истина;
				РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
					ФайлHTMLСсылка, СведенияОФайле, ОбновлятьНеГлядяНаБлокировку);

				РегистрыСведений.ФайлыСКомментариямиWord.ДобавитьФайл(СтруктураФайла.ФайлСсылка,
					НомерИтерации);

				ЗафиксироватьТранзакцию();

			Исключение

				ОтменитьТранзакцию();
				ВызватьИсключение;

			КонецПопытки;    
			
		КонецЕсли;  

	КонецЦикла;

КонецПроцедуры	

// Записывает в журнал регистрации - уровень Информация
Процедура ЗаписьЖурналаРегистрацииСервер(ТекстСообщения) Экспорт

	ЗаписьЖурналаРегистрации(НСтр("ru = 'СогласованиеВРежимеЗамечанийСервер'",
		Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);

КонецПроцедуры

// Записывает в журнал регистрации - уровень Информация
Процедура ЗаписьЖурналаРегистрацииСервер_Информация(ТекстСообщения) Экспорт

	ЗаписьЖурналаРегистрации(НСтр("ru = 'СогласованиеВРежимеЗамечанийСервер'",
		Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);

КонецПроцедуры

Процедура ПослеСохраненияHTML_Новый_ВсеФайлы(СтруктураФайла, ТекущиеДанные) Экспорт
	
	// Тут вызов на сервер, создаем версию HTML Файла.
	СогласованиеВРежимеЗамечанийСервер.СоздатьВерсиюHTMLФайла(СтруктураФайла);

	ВерсияHTMLТекущая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущиеДанные.ФайлHTML, "ТекущаяВерсия");
	
	// Запишем правки
	УстановитьПривилегированныйРежим(Истина);

	Документ = ТекущиеДанные.ВладелецФайла;
	СогласованиеВРежимеЗамечанийСервер.ОчиститьПозицииУПрежнихПравок(ТекущиеДанные.ФайлHTML,
		Документ);

КонецПроцедуры

// Надо заполнить ФайлHTML,  ВладелецФайла, 		ИмяБезРасширения, 		Расширение,
Процедура ЗаполнитьПоля_МассивФайлов(МассивФайлов) Экспорт

	Для Каждого Стр Из МассивФайлов Цикл

		Файл = Стр.Ссылка;
		РеквФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл,
			"Наименование, ВладелецФайла, ТекущаяВерсияРасширение");

		Стр.ИмяБезРасширения = РеквФайла.Наименование;
		Стр.ВладелецФайла = РеквФайла.ВладелецФайла;
		Стр.Расширение = РеквФайла.ТекущаяВерсияРасширение;

		Стр.ФайлHTML = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
			Стр.ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);

	КонецЦикла;

КонецПроцедуры

// Вернет число замечаний подчиненных - необработанных
Функция КоличествоНеобработанныхЗамечанийПодчиненных(Задача) Экспорт

	Возврат 0;

КонецФункции

// Вернет Соответствие - Ключ - Файл doc, значение - файл html (может не быть)
Процедура УбратьДанныеБезHtmlОбразов(МассивДанных) Экспорт

	Результат = Новый Массив;

	Для Каждого Строка Из МассивДанных Цикл

		Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Строка.Расширение) Тогда

			ФайлHTML = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
				Строка.Владелец, Строка.Ссылка,
				Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);

			Если ЗначениеЗаполнено(ФайлHTML) Тогда
				Строка.Вставить("ФайлHTML", ФайлHTML); //  в ДанныеФайла вставим поле ФайлHTML
				Результат.Добавить(Строка);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	МассивДанных = Результат;

КонецПроцедуры

Функция ПолучитьДатуНачалаИспользованияКодировкиUTF() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Возврат Дата(1980, 1, 1);

КонецФункции	

// Получает файлы Word по массиву файлов
Функция ПолучитьФайлыWord(ИсходныйМассивФайлов)

	УстановитьПривилегированныйРежим(Истина);

	МассивФайловWord = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Ссылка В (&ИсходныйМассивФайлов)";

	Запрос.УстановитьПараметр("ИсходныйМассивФайлов", ИсходныйМассивФайлов);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Выборка.Расширение) Тогда
			МассивФайловWord.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивФайловWord;

КонецФункции

// Получает файлы у владельца(внутр документа) с записью в РС СлужебныеФайлыДокументов
Функция ПолучитьСлужебныеHtmlФайлыПоМассивуФайлов(ИсходныйМассивФайлов, ЧислоWordФайлов)

	ЧислоWordФайлов = 0;

	УстановитьПривилегированныйРежим(Истина);

	МассивФайловWord = ПолучитьФайлыWord(ИсходныйМассивФайлов);
	ЧислоWordФайлов = МассивФайловWord.Количество();

	МассивФайлов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СлужебныеФайлыДокументов.Файл КАК Ссылка,
	|	СлужебныеФайлыДокументов.Файл.ТекущаяВерсия.ДатаСоздания КАК ФайлHtmlТекущаяВерсияДатаСоздания,
	|	СлужебныеФайлыДокументов.Владелец.ТекущаяВерсия.ДатаСоздания КАК ФайлWordТекущаяВерсияДатаСоздания
	|ИЗ
	|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|ГДЕ
	|	СлужебныеФайлыДокументов.Владелец В (&ИсходныйМассивФайлов)
	|	И СлужебныеФайлыДокументов.Отношение = &Отношение
	|	И СлужебныеФайлыДокументов.Файл.ПометкаУдаления = ЛОЖЬ
	|	И СлужебныеФайлыДокументов.НомерБлока = 0";

	Запрос.УстановитьПараметр("ИсходныйМассивФайлов", МассивФайловWord);
	Запрос.УстановитьПараметр("Отношение", Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФайлHtmlТекущаяВерсияДатаСоздания >= Выборка.ФайлWordТекущаяВерсияДатаСоздания Тогда 
			МассивФайлов.Добавить(Выборка.Ссылка);
		КонецЕсли;	
	КонецЦикла;

	Возврат МассивФайлов;

КонецФункции

// По Word файлам докмуента созданы html
Функция ДокументПодготовленКСогласованиюВРежимеЗамечаний(Документ) Экспорт

	Файлы = Делопроизводство.ПолучитьФайлыДокументаДляСогласованияВРежимеЗамечаний(Документ);
	
	ЧислоWordФайлов = 0;
	МассивФайлов = ПолучитьСлужебныеHtmlФайлыПоМассивуФайлов(Файлы, ЧислоWordФайлов);
	Возврат (МассивФайлов.Количество() = ЧислоWordФайлов);

КонецФункции	

// Добавлены комментарии Word по файлам документа (по каждому файлу)
// именно на этой итерации
Функция КомментарииДобавлены(Документ, НомерИтерации, ВеткаОбработки) Экспорт

	ИсходныйМассивФайлов = Делопроизводство.ПолучитьФайлыДокументаДляСогласованияВРежимеЗамечаний(Документ);
	МассивФайловWord = ПолучитьФайлыWord(ИсходныйМассивФайлов);

	ЕстьКомментарии = Ложь; 
	
	ФайлыHtml = Новый Массив;

	Для Каждого Файл Из МассивФайловWord Цикл
		
		ЕстьКомментарийПоФайлу = РегистрыСведений.ФайлыСКомментариямиWord.ЕстьЗапись(Файл,
			НомерИтерации);
		Если ЕстьКомментарийПоФайлу Тогда
			ЕстьКомментарии = Истина;
			Возврат ЕстьКомментарии;
		КонецЕсли;

		ВладелецЗамечанияМассив = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьВсеСлужебныеФайлы(
			Документ, Файл, Перечисления.ОтношенияСлужебныхФайлов.HTMLСодержание);
		Для Каждого ФайлHtml Из ВладелецЗамечанияМассив Цикл	
			ФайлыHtml.Добавить(ФайлHtml);
		КонецЦикла;	

	КонецЦикла; 
	
	ЕстьКомментарииWord = Ложь;
	ЕстьКомментарииНеWord = Ложь;
	
	ВсеВладельцыПравокИтерации = ПолучитьВсеВладельцыПравокИтерации(ВеткаОбработки, НомерИтерации);
	Для Каждого ВладелецПравок Из ВсеВладельцыПравокИтерации Цикл
		
		// ВладелецПравок - не doc файл, а например pdf файл или документ
		//  ФайлыСКомментариямиWord - тут будет пусто, но тем не менее замечания есть
		Если ФайлыHtml.Найти(ВладелецПравок) = Неопределено Тогда
			
			ЕстьКомментарииНеWord = Истина;
			
		Иначе	 
			
			ЕстьКомментарииWord = Истина;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ЕстьКомментарииНеWord И Не ЕстьКомментарииWord Тогда
		Возврат Истина; // комментарии есть только у документа или например pdf файлов
	КонецЕсли;	

	Возврат ЕстьКомментарии;

КонецФункции	

// Есть комментарии Word по файлам документа (хотя бы по одному файлу)
Функция ЕстьКомментарии(Документ) Экспорт

	ИсходныйМассивФайлов = Делопроизводство.ПолучитьФайлыДокументаДляСогласованияВРежимеЗамечаний(Документ);
	МассивФайловWord = ПолучитьФайлыWord(ИсходныйМассивФайлов);

	ЕстьКомментарии = Ложь;

	Для Каждого Файл Из МассивФайловWord Цикл

		ЕстьКомментарийПоФайлу 
			= РегистрыСведений.ФайлыСКомментариямиWord.ЕстьЗаписьПоФайлу(Файл);
		Если ЕстьКомментарийПоФайлу Тогда
			ЕстьКомментарии = Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьКомментарии;

КонецФункции	

// Найдет ветку обработки по владельцу
Функция НайтиВеткуОбработки(Владелец) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВеткиОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВеткиОбработки КАК ВеткиОбработки
	|ГДЕ
	|	ВеткиОбработки.ВладелецВетки = &ВладелецВетки";
	Запрос.УстановитьПараметр("ВладелецВетки", Владелец);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Процедура НайтиСоздатьВеткуОбработки(Владелец, Родитель = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Ветка = НайтиВеткуОбработки(Владелец);
	Если Не ЗначениеЗаполнено(Ветка) Тогда
		
		// создаем ветку
		ВеткаОбъект = Справочники.ВеткиОбработки.СоздатьЭлемент();
		ВеткаОбъект.ВладелецВетки = Владелец;
		ВеткаОбъект.Родитель = Родитель;
		ВеткаОбъект.Наименование = Строка(Владелец);
		ВеткаОбъект.ДатаСоздания = ТекущаяДата();

		ВеткаОбъект.Записать();

	КонецЕсли;

КонецПроцедуры	

// Есть незавершенный процесс Согласование
Функция ЕстьНеЗавершенноеСогласованиеПоДокументу(Документ) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДействияСогласования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДействияСогласования КАК ДействияСогласования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
	|		ПО ДействияСогласования.Ссылка = СостоянияДействий.Действие
	|			И (СостоянияДействий.ИдентификаторПункта = &ПустойИД)
	|			И (СостоянияДействий.ИдентификаторУчастника = &ПустойИД)
	|			И (СостоянияДействий.Функция = НЕОПРЕДЕЛЕНО)
	|			И (СостоянияДействий.Участник = НЕОПРЕДЕЛЕНО)
	|ГДЕ
	|	ДействияСогласования.ПомещеноВИсторию = ЛОЖЬ
	|	И ДействияСогласования.СогласованиеВРежимеЗамечаний = ИСТИНА
	|	И ДействияСогласования.Предмет = &Предмет
	|	И СостоянияДействий.Состояние = &Состояние";

	Запрос.УстановитьПараметр("Предмет", Документ);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияВыполненияДействий.Выполняется);
	Запрос.УстановитьПараметр("ПустойИД",
		ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор());

	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();

КонецФункции

Функция ЕстьЗамечанияВКорнеДействия(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ВеткаОбработки = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(Действие);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Замечания.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Замечания КАК Замечания
	|ГДЕ
	|	Замечания.ПометкаУдаления = ЛОЖЬ
	|	И Замечания.ВеткаОбработки = &ВеткаОбработки";

	Запрос.УстановитьПараметр("ВеткаОбработки", ВеткаОбработки);

	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();

КонецФункции	

// Вернет Структуру для открытия формы согласования в режиме замечаний 
Функция ПараметрыОткрытияЗадачиСогласования(ТекущаяЗадачаИлиДействие) Экспорт

	Параметры = Новый Структура;

	ЗадачаПроцесса = Неопределено;
	Если ТипЗнч(ТекущаяЗадачаИлиДействие) <> Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		Возврат Параметры;
	КонецЕсли;
		
	ЗадачаПроцесса = РаботаСЗадачами.ИсточникДействияЗадачи(ТекущаяЗадачаИлиДействие);
	Если ЗначениеЗаполнено(ЗадачаПроцесса) Тогда

		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЗадачаПроцесса,
			"ИдентификаторИсполнителя, БизнесПроцесс, Исполнитель, РольИсполнителя, ТочкаМаршрута, Выполнена");

		Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(РеквизитыЗадачи.БизнесПроцесс);
		Если ЗначениеЗаполнено(Действие) И ТипЗнч(Действие) = Тип(
			"СправочникСсылка.ДействияСогласования") И Не РеквизитыЗадачи.Выполнена Тогда

			СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Действие, "СогласованиеВРежимеЗамечаний");

			РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				РеквизитыЗадачи.БизнесПроцесс, "НомерИтерации, Завершен");
			НомерИтерации = РеквизитыПроцесса.НомерИтерации;

			Если СогласованиеВРежимеЗамечаний И Не РеквизитыПроцесса.Завершен Тогда

				Участник = РеквизитыЗадачи.Исполнитель;
				Если Не ЗначениеЗаполнено(Участник) Тогда
					Участник = РеквизитыЗадачи.РольИсполнителя;
				КонецЕсли;	
				
				// проверим что я - это исполнитель.
				ЭтоИсполнительЗадачи = Ложь;

				ПользовательИЕгоСотрудники = СотрудникиВызовСервера.ПользовательИЕгоСотрудники();
				Если ПользовательИЕгоСотрудники.Найти(Участник) <> Неопределено Тогда
					ЭтоИсполнительЗадачи = Истина;
				КонецЕсли;

				Если Не ЭтоИсполнительЗадачи И ПараметрыСеанса.РолиТекущегоПользователя.Найти(
					Участник) <> Неопределено Тогда
					ЭтоИсполнительЗадачи = Истина;
				КонецЕсли;

				Если Не ЭтоИсполнительЗадачи И РольДоступна("ПолныеПрава") Тогда
					ЭтоИсполнительЗадачи = Истина;
				КонецЕсли;

				Если Не ЭтоИсполнительЗадачи Тогда
					Возврат Параметры;
				КонецЕсли;

				Если РеквизитыЗадачи.ТочкаМаршрута
					= БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
					ВыбраннаяФорма = "ОбщаяФорма.СогласованиеВРежимеЗамечанийФормаСогласующего";
				ИначеЕсли РеквизитыЗадачи.ТочкаМаршрута
					= БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
					ВыбраннаяФорма = "ОбщаяФорма.СогласованиеВРежимеЗамечанийФормаИнициатора";
				КонецЕсли;

				Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Действие, "Предмет");

				Параметры.Вставить("ВыбраннаяФорма", ВыбраннаяФорма);

				Параметры.Вставить("Действие", Действие);
				Параметры.Вставить("Идентификатор", РеквизитыЗадачи.ИдентификаторИсполнителя);
				Параметры.Вставить("Участник", Участник);
				Параметры.Вставить("Документ", Предмет);
				Параметры.Вставить("ОсновнойДокумент", Предмет);
				Параметры.Вставить("НомерИтерации", НомерИтерации);

			КонецЕсли;

		КонецЕсли;
		
	Иначе	

		Действие = Неопределено;
		Если ИнтеграцияЗадач.ЭтоЗадачаСогласованияВРежимеЗамечаний(
			ТекущаяЗадачаИлиДействие, Действие) Тогда
			
			ВыбраннаяФорма = "ОбщаяФорма.СогласованиеВРежимеЗамечанийФормаСогласующего";
			Параметры.Вставить("ВыбраннаяФорма", ВыбраннаяФорма);
			
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Действие, "Предмет");
				

			РеквДействияТрекера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ТекущаяЗадачаИлиДействие, "Исполнитель, Задача");
				
			ВеткаОбработки = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(РеквДействияТрекера.Задача);		

			Параметры.Вставить("Действие", Действие);
			Параметры.Вставить("Участник", РеквДействияТрекера.Исполнитель);
			Параметры.Вставить("Документ", Предмет);
			Параметры.Вставить("ОсновнойДокумент", Предмет);
			Параметры.Вставить("ДействиеЗадачи", ТекущаяЗадачаИлиДействие);
			Параметры.Вставить("ВеткаОбработки", ВеткаОбработки);
			
		КонецЕсли;		
	
	КонецЕсли;

	Возврат Параметры;

КонецФункции

// Ставит еще не отработанным замечаниям статус Отказ и в "Принятая редакция" из "Что меняем" копирует
//
// Параметры 
// Документ - СправочникССылка.ДокументыПредприятия
// ВеткаОбработки - СправочникССылка.ВеткиОбработки    
// Комментарий - Строка
Процедура ПометитьНеотработанныеЗамечанияКакОтказанные(Документ, ВеткаОбработки, Комментарий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ
	   |	Замечания.Ссылка КАК Ссылка
	   |ИЗ
	   |	Справочник.Замечания КАК Замечания
	   |ГДЕ
	   |	Замечания.ВеткаОбработки = &ВеткаОбработки
	   |	И Замечания.Документ = &Документ
	   |	И Замечания.Отработано = ЛОЖЬ";
	   
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ВеткаОбработки", ВеткаОбработки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СпрОбъект.Отработано = Истина;
		СпрОбъект.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.НеПринята");
		СпрОбъект.Комментарий = Комментарий;
		
		Если Не ЗначениеЗаполнено(СпрОбъект.ПринятаяРедакция) Тогда
			СпрОбъект.ПринятаяРедакция = СпрОбъект.ЧтоМеняем;
		КонецЕсли;
		
		СпрОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункции

Функция ДействиеСогласованияПоДокументу(Предмет)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ДействияСогласования.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДействияСогласования КАК ДействияСогласования
	               |ГДЕ
	               |	ДействияСогласования.Предмет = &Предмет
	               |	И ДействияСогласования.ПомещеноВИсторию = ЛОЖЬ
	               |	И ДействияСогласования.СогласованиеВРежимеЗамечаний = ИСТИНА";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции	

#КонецОбласти