///////////////////////////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO
// Реализует функционал веб-сервиса DMService
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработкаУниверсальногоСообщения

// Возвращает результат обработки универсальных сообщений.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO, потомок DMRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO, потомок DMResponse.
//
Функция ОбработатьУниверсальноеСообщение(Сообщение) Экспорт
	
	Попытка
		
		НачалоЗамераВремени = ТекущаяДатаСеанса();
		
		ПараметрыСеанса.ВерсияБИД = ВерсияБИДПоСообщению(Сообщение);
		ПараметрыСеанса.УзелИнтегрированнойСистемы = УзелИнтегрированнойСистемыПоСообщению(Сообщение);
		
		Результат = Неопределено;
		
		ОбработкаЗапросовXDTOПереопределяемый.ПриОбработкеУниверсальногоСообщения(Сообщение, Результат);
		
		Если Результат = Неопределено Тогда
			
			Если ПроверитьТип(Сообщение, "DMBatchRequest") Тогда
				Результат = ОбработатьПакет(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMCreateRequest") Тогда
				Результат = Создать(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMCreateFromIncomingDataRequest") Тогда
				Результат = СоздатьПоПравиламЗагрузки(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMRetrieveRequest") Тогда
				Результат = ПолучитьОбъекты(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMUpdateRequest") Тогда
				Результат = ЗаписатьОбъекты(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMUpdateFromIncomingDataRequest") Тогда
				Результат = ЗаписатьОбъектыПоПравиламЗагрузки(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMDeleteRequest") Тогда
				Результат = ПометитьНаУдаление(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetNewObjectRequest") Тогда
				Результат = ПолучитьНовыйОбъект(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetCurrentUserRequest") Тогда
				Результат = ПолучитьТекущегоПользователя(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetObjectListRequest") Тогда
				Результат = ПолучитьДоступныеЗначенияДляВыбора(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetDynamicListRequest") Тогда
				Результат = СтраницаДинамическогоСписка(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetDocumentListRequest") Тогда
				Результат = ПолучитьСвязанныеОбъекты(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetSettingsRequest") Тогда
				Результат = ПолучитьНастройки(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetVersionRequest") Тогда
				Результат = ПолучитьВерсиюСервиса();
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetSubFoldersRequest") Тогда
				Результат = ПолучитьПодпапки(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetDocumentListByOwnerRequest") Тогда
				Результат = ПолучитьСписокДокументовПоВладельцу(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetObjectAdditionalPropertiesRequest") Тогда
				Результат = ПолучитьДополнительныеРеквизитыОбъекта(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMCheckExpressionOnBuiltInLanguageRequest") Тогда
				Результат = ПроверитьВыражениеНаВстроенномЯзыке(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetObjectMetadataRequest") Тогда
				Результат = ПолучитьМетаданныеОбъекта(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetRequiredTabularSectionListRequest") Тогда
				Результат = ПолучитьСписокВыгружаемыхНаСторонеИСТабличныхЧастей(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetExpressionListRequest") Тогда
				Результат = ПолучитьСписокВыраженийНаВстроенномЯзыкеДляВыполненияНаСторонеИС(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetPrintedFormListRequest") Тогда
				Результат = ПолучитьСписокПечатныхФормДляФормированияНаСторонеИС(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetPrintedFormRequest") Тогда
				Результат = ПолучитьПечатнуюФорму(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMAddObjectLinkRequest") Тогда
				Результат = ДобавитьСсылкуНаВнешнийОбъектПоЗапросу(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMRemoveObjectLinkRequest") Тогда
				Результат = УдалитьСсылкуНаВнешнийОбъектПоЗапросу(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMSynchronizeObjectLinksRequest") Тогда
				Результат = СинхронизоватьСвязиОбъектовИнтегрированныхСистем(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMClearFeedbackMarkInObjectLinksRequest") Тогда
				Результат = ОчиститьПризнакЕстьОбратнаяСвязьВУзле(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetObjectLinksWithoutFeedbackMarkRequest") Тогда
				Результат = ПолучитьСсылкиБезОбратнойСвязиВУзле(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMRetrieveBarcodesRequest") Тогда
				Результат = ПрочитатьШтрихкодыОбъекта(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMUpdateBarcodesRequest") Тогда
				Результат = ЗаписатьШтрихкодыОбъекта(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMFindByBarcodeRequest") Тогда
				Результат = НайтиОбъектПоШтрихкоду(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetObjectsHTMLPresentationsRequest") Тогда
				Результат = ПолучитьHTMLПредпросмотрОбъектов(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetDataLoadingRulesRequest") Тогда
				Результат = ОбработкаЗапросовXDTOДокументы.ПолучитьПравилаЗагрузкиДанныхВДО(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMAddFileRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ДобавитьФайлВДокумент(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMLockFileRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ЗанятьФайл(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMUnlockFileRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ОсвободитьФайл(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetFileListRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ПолучитьСписокФайлов(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetFileListByOwnerRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ПолучитьСписокФайловПоВладельцу(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMChangeFilesRoleRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ЗаменитьРольФайлов(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetFileEditingInfoRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ПолучитьСведенияОРедактированииФайла(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMUpdateFileEditingInfoRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ЗаписатьСведенияОРедактированииФайла(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMAutoFillRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ЗаполнитьПоляФайлаДаннымиВладельца(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMUpdateFilesRequest") Тогда
				Результат = ОбработкаЗапросовXDTOФайлы.ЗаписатьИзмененияФайлов(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMFillProcessingRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьОбработку(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMStartProcessingRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.НачатьОбработку(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMRestartProcessingRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПерезапуститьОбработку(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMTerminateProcessingRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПрерватьОбработку(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMStopContinueProcessingRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ОстановитьПродолжитьОбработку(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetCurrentObjectProcessingRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьТекущуюОбработку(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMExecuteTaskActionRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ВыполнитьДействиеЗадачи(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMAcceptTasksRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ВзятьВРаботу(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMRevokeTaskAcceptanceRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ОтменитьВзятиеВРаботу(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMRedirectTasksRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.Перенаправить(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMSetFlagRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.УстановитьФлаг(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMCheckValidityOfActionParticipantsRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПроверитьДействительностьУчастниковДействия(Сообщение);
				
			ИначеЕсли ПроверитьТип(Сообщение, "DMGetDueDateByDueDatePresentationRequest") Тогда
				Результат = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьСрокИсполненияПоПредставлению(Сообщение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			ВремяВыполнения = ТекущаяДатаСеанса() - НачалоЗамераВремени;
			Если ВремяВыполнения > 15 Тогда
				ЗафиксироватьОшибкуПревышенияВремениВыполнения(ВремяВыполнения, Сообщение, Результат);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при обработке сообщения'"),
			СтрШаблон(НСтр("ru = 'Неизвестное сообщение: %1'"), Строка(Сообщение.Тип())));
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при обработке сообщения'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

// Возвращает строку версии сервиса.
//
// Возвращаемое значение:
//   Строка - версия сервиса.
//
Функция ВерсияСервиса() Экспорт
	
	Постфикс = "";
	ОбработкаЗапросовXDTOПереопределяемый.ПриОпределенииПостфиксаВерсииСервиса(Постфикс);
	
	Возврат СтрШаблон("%1%2", Метаданные.Версия, Постфикс);
	
КонецФункции

// Выполняет произвольный алгоритм на встроенном языке 1С:Предприятия, предварительно устанавливая
// безопасный режим выполнения кода и безопасный режим разделения данных для всех разделителей,
// присутствующих в составе конфигурации.
//
// Параметры:
//   Алгоритм  - Строка - алгоритм на встроенном языке "1С:Предприятия".
//   Параметры - Произвольный -  контекст, который требуется для выполнения алгоритма.
//
Процедура ВыполнитьВБезопасномРежиме(Алгоритм, Параметры) Экспорт
	
	АлгоритмДляПроверки = НРег(Алгоритм);
	ЗапрещенныеСтроки = Новый Массив;
	Исключения = Новый Массив;
	СписокОшибок = Новый Массив;
	ПодходящиеИсключения = Новый Массив;
	
	ЗапрещенныеСтроки.Добавить("Выполнить(");
	ЗапрещенныеСтроки.Добавить("Выполнить ");
	ЗапрещенныеСтроки.Добавить(".Выполнить");
	ЗапрещенныеСтроки.Добавить("Execute(");
	ЗапрещенныеСтроки.Добавить("Execute ");
	ЗапрещенныеСтроки.Добавить(".Execute");
	
	Исключения.Добавить(".Выполнить()");
	
	ПроверитьАлгоритм(АлгоритмДляПроверки, ЗапрещенныеСтроки, Исключения, СписокОшибок, ПодходящиеИсключения);
	
	ЗапрещенныеСтроки.Очистить();
	Исключения.Очистить();
	
	ЗапрещенныеСтроки.Добавить(".Записать(");
	ЗапрещенныеСтроки.Добавить(".Записать ");
	ЗапрещенныеСтроки.Добавить(" Записать(");
	ЗапрещенныеСтроки.Добавить(" Записать ");
	ЗапрещенныеСтроки.Добавить(".Write(");
	ЗапрещенныеСтроки.Добавить(".Write ");
	ЗапрещенныеСтроки.Добавить(" Write(");
	ЗапрещенныеСтроки.Добавить(" Write ");
	
	ЗапрещенныеСтроки.Добавить("Base64Значение");
	ЗапрещенныеСтроки.Добавить("Base64Value");
	
	ЗапрещенныеСтроки.Добавить("ХранилищеЗначения");
	ЗапрещенныеСтроки.Добавить("ValueStorage");
	
	ЗапрещенныеСтроки.Добавить("ДвоичныеДанные");
	ЗапрещенныеСтроки.Добавить("BinaryData");
	
	ПроверитьАлгоритм(АлгоритмДляПроверки, ЗапрещенныеСтроки, Исключения, СписокОшибок, ПодходящиеИсключения);
	
	Если СписокОшибок.Количество() > 0 Тогда
		Если ПодходящиеИсключения.Количество() = 0 Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В выражении запрещено использовать конструкции:
					|%1'"),
				СтрСоединить(СписокОшибок, Символы.ПС));
		Иначе
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В выражении запрещено использовать конструкции:
					|%1
					|
					|Список исключений:
					|%2'"),
				СтрСоединить(СписокОшибок, Символы.ПС),
				СтрСоединить(ПодходящиеИсключения, Символы.ПС));
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Алгоритм, Параметры);
	
КонецПроцедуры

// Обработчик регламентного задания для синхронизации пользователей ДО и ИС.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - ИС, пользователей которой требуется
//     синхронизировать.
//   АдресХранилища - Строка - адрес хранилища, куда будет помещен результат фонового выполнения.
//
Процедура ВыполнитьСинхронизациюПользователей(ИнтегрированнаяСистема = Неопределено, АдресХранилища = "") Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.СинхронизацияПользователейСИнтегрированнымиСистемами, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПользователи = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ПОМЕСТИТЬ Пользователи
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО Пользователи.Ссылка = СведенияОПользователях.Пользователь
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления
		|	И НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.Служебный
		|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор
		|	И СведенияОПользователях.ВходВПрограммуРазрешен
		|	И НЕ СведенияОПользователях.ВходВПрограммуОграничен
		|	И НЕ СведенияОПользователях.НетПрав
		|	И НЕ СведенияОПользователях.НедостаточноПравДляВхода
		|	И (СведенияОПользователях.АутентификацияСтандартная
		|			ИЛИ СведенияОПользователях.АутентификацияТокеномДоступа
		|			ИЛИ СведенияОПользователях.АутентификацияОС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнтегрированныеСистемы.Ссылка КАК ИнтегрированнаяСистема
		|ПОМЕСТИТЬ ИнтегрированныеСистемы
		|ИЗ
		|	ПланОбмена.ИнтегрированныеСистемы КАК ИнтегрированныеСистемы
		|ГДЕ
		|	ИнтегрированныеСистемы.Ссылка = &ИнтегрированнаяСистема
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнтегрированныеСистемы.ИнтегрированнаяСистема КАК ИнтегрированнаяСистема,
		|	Пользователи.Пользователь КАК Пользователь,
		|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ИЗ
		|	Пользователи КАК Пользователи,
		|	ИнтегрированныеСистемы КАК ИнтегрированныеСистемы
		|ИТОГИ ПО
		|	ИнтегрированнаяСистема");
	ЗапросПользователи.УстановитьПараметр("ПустойИдентификатор",
		ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Если ИнтегрированнаяСистема = Неопределено Тогда
		ЗапросПользователи.Текст = СтрЗаменить(
			ЗапросПользователи.Текст,
			"ИнтегрированныеСистемы.Ссылка = &ИнтегрированнаяСистема",
			"НЕ ИнтегрированныеСистемы.ПометкаУдаления И ИнтегрированныеСистемы.ПоддерживаетПравилаЗагрузкиДанныхВДО");
	Иначе
		ЗапросПользователи.УстановитьПараметр("ИнтегрированнаяСистема", ИнтегрированнаяСистема);
	КонецЕсли;
	
	ВыборкаИС = ЗапросПользователи.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИС.Следующий() Цикл
		
		ПараметрыСеанса.УзелИнтегрированнойСистемы = ВыборкаИС.ИнтегрированнаяСистема;
		
		Попытка
			
			ПоддерживаетсяСинхронизацияПользователей =
				РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(
					ВыборкаИС.ИнтегрированнаяСистема,
					"3.0.3.1");
			
			Если Не ПоддерживаетсяСинхронизацияПользователей Тогда
				Продолжить;
			КонецЕсли;
			
			Прокси = РаботаСИнтегрированнымиСистемамиПовтИсп.ПолучитьПрокси(ВыборкаИС.ИнтегрированнаяСистема);
			
			Запрос = РаботаСИнтегрированнымиСистемами.СоздатьОбъект(Прокси, "DMILSynchronizeUsersRequest");
			Запрос.DMXMLSchema = СхемаПакетаDM();
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
			
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Message");
			
			ВыборкаПользователи = ВыборкаИС.Выбрать();
			
			УстановитьПривилегированныйРежим(Истина);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				РаботаСИнтегрированнымиСистемами.ИмяСобытияЖурналаРегистрации(
					СтрШаблон(НСтр("ru = 'Синхронизация пользователей ДО с пользователями %1'"),
						ВыборкаИС.ИнтегрированнаяСистема)),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ПланыОбмена.ИнтегрированныеСистемы,
				ВыборкаИС.ИнтегрированнаяСистема,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
			
		КонецПопытки;
		
		НачатьТранзакцию();
		
		Попытка
			
			Пока ВыборкаПользователи.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.УзелИнтегрированнойСистемы.Установить(ВыборкаИС.ИнтегрированнаяСистема);
				НаборЗаписей.Отбор.СсылкаНаОбъектДО.Установить(ВыборкаПользователи.Пользователь);
				НаборЗаписей.Записать();
				Если ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
						ВыборкаПользователи.ИдентификаторПользователяИБ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбъектДО = ВыборкаПользователи.Пользователь.ПолучитьОбъект();
				ОбъектXDTO = ПолучитьОбъектXDTOПоСуществующимДаннымДО(ОбъектДО, Неопределено);
				Если ПроверитьТип(ОбъектXDTO, "DMError") Тогда
					Продолжить;
				КонецЕсли;
				ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
			КонецЦикла;
			УстановитьПривилегированныйРежим(Ложь);
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Message
			ЗаписьXML.Закрыть();
			ЗаписьXML = Неопределено;
			
			Запрос.messageData = Новый ДвоичныеДанные(ИмяВременногоФайла);
			
			УдалитьФайлы(ИмяВременногоФайла);
			
			Ответ = Прокси.execute(Запрос);
			РаботаСИнтегрированнымиСистемами.ПроверитьВозвратВебСервиса(Прокси, Ответ);
			
			Для Каждого СвязьXDTO Из Ответ.links Цикл
				СсылкаНаОбъектДО = СсылкаИзUUID(
					СвязьXDTO.ownerObject.type,
					СвязьXDTO.ownerObject.ID);
				РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
					СвязьXDTO.linkedObject.id,
					СвязьXDTO.linkedObject.type,
					СсылкаНаОбъектДО);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ЗаписьЖурналаРегистрации(
				РаботаСИнтегрированнымиСистемами.ИмяСобытияЖурналаРегистрации(
					СтрШаблон(НСтр("ru = 'Синхронизация пользователей ДО с пользователями %1'"),
						ВыборкаИС.ИнтегрированнаяСистема)),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ПланыОбмена.ИнтегрированныеСистемы,
				ВыборкаИС.ИнтегрированнаяСистема,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет навигационные ссылки на объекты ДО и ИС к тексту ошибки.
//
// Параметры:
//   ТекстОшибки - Строка - изначальный текст ошибки.
//   ОбъектДО - ЛюбаяСсылка - ссылка на объект ДО.
//   externalObject - ОбъектXDTO - объект XDTO типа ExternalObject. Содержит ссылку на объект ИС.
//
Процедура ДобавитьНавигационнуюСсылкуКТекстуОшибки(ТекстОшибки, ОбъектДО, externalObject = Неопределено) Экспорт
	
	ПолноеСообщение = Новый Массив;
	ПолноеСообщение.Добавить(ТекстОшибки);
	ПолноеСообщение.Добавить(
		СтрШаблон(НСтр("ru = 'Ссылка на объект в ДО: %1'"), ПолучитьНавигационнуюСсылку(ОбъектДО)));
	
	Если externalObject <> Неопределено
			И СвойствоУстановлено(externalObject, "id")
			И СвойствоУстановлено(externalObject, "type") Тогда
		ПолноеСообщение.Добавить(СтрШаблон(НСтр("ru = 'Ссылка на объект в ИС: e1cib/data/%1?ref=%2%3%4%5%6'"),
			externalObject.type,
			Сред(externalObject.ID, 20, 4),
			Сред(externalObject.ID, 25, 12),
			Сред(externalObject.ID, 15, 4),
			Сред(externalObject.ID, 10, 4),
			Сред(externalObject.ID, 1, 8)));
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(ПолноеСообщение, Символы.ПС);
	
КонецПроцедуры

// Добавляет запись в регистр СвязиОбъектовИнтегрированныхСистем.
//
// Параметры:
//   linkedObject - ОбъектXDTO - объект XDTO типа DMObjectID. Ссылка на объект ДО.
//   ownerObject - ОбъектXDTO - объект XDTO типа ExternalObjectID. Ссылка на объект ИС.
//
// Возвращаемое значение:
//   Булево - связь объекта ДО и внешнего объекта была добавлена.
//
Функция ДобавитьСсылкуНаВнешнийОбъект(linkedObject, ownerObject) Экспорт
	
	СсылкаНаОбъектДО = ПолучитьСсылкуПоObjectID(linkedObject, Ложь);
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъектДО)
			Или Не ЗначениеЗаполнено(ownerObject.ID)
			Или Не ЗначениеЗаполнено(ownerObject.type) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
		ownerObject.ID,
		ownerObject.type,
		СсылкаНаОбъектДО,
		Истина);
	
	Возврат Истина;
	
КонецФункции

// Добавляет строку в таблицу соответствия значений перечислений.
//
// Параметры:
//   Таблица - ТаблицаЗначений - таблица соответствия перечислений:
//     * ИмяПеречисленияXDTO - Строка - имя перечисления XDTO.
//     * ЗначениеПеречисленияXDTO - Строка - значение перечисления XDTO.
//     * ЗначениеПеречисленияДО - ЛюбаяСсылка - значение перечисления ДО.
//   ИмяПеречисленияXDTO - Строка - имя перечисления XDTO.
//   ЗначениеПеречисленияXDTO - Строка - значение перечисления XDTO.
//   ЗначениеПеречисленияДО - ЛюбаяСсылка - значение перечисления ДО.
//
Процедура ДобавитьСтрокуСоответствияПеречислений(Таблица, ИмяПеречисленияXDTO, ЗначениеПеречисленияXDTO,
		ЗначениеПеречисленияДО) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ИмяПеречисленияXDTO = ИмяПеречисленияXDTO;
	НоваяСтрока.ЗначениеПеречисленияXDTO = ЗначениеПеречисленияXDTO;
	НоваяСтрока.ЗначениеПеречисленияДО = ЗначениеПеречисленияДО;
	
КонецПроцедуры

// Добавляет строку в таблицу соответствия типов.
//
// Параметры:
//   Таблица - ТаблицаЗначений - таблица соответствия типов:
//     * ИмяXDTO - Строка - имя типа XDTO.
//     * ИмяДО - Строка - полное имя типа ДО.
//   ИмяXDTO - Строка - имя типа XDTO.
//   ИмяДО - Строка - полное имя типа ДО.
//
Процедура ДобавитьСтрокуСоответствияТипов(Таблица, ИмяXDTO, ИмяДО) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ИмяXDTO = ИмяXDTO;
	НоваяСтрока.ИмяДО = ИмяДО;
	
КонецПроцедуры

// Выполняет проверку списка дополнительных реквизитов на модифицированность их значений.
//
// Параметры:
//   ОбъектДО - ЛюбаяСсылка - объект Документооборота, чьи дополнительные свойства подлежат проверке.
//   ОбъектXDTO - ОбъектXDTO - связанный объект XDTO, чье свойство additionalProperties служит эталоном.
//
// Возвращаемое значение:
//   Булево
//
Функция ДополнительныеРеквизитыИзменены(ОбъектДО, ОбъектXDTO) Экспорт
	
	Для Каждого ДополнительныйРеквизит Из ОбъектXDTO.additionalProperties Цикл
		
		ОбъектСвойство = ПолучитьСсылкуПоObjectID(ДополнительныйРеквизит.objectId);
		
		Если ЗначениеЗаполнено(ОбъектСвойство) Тогда
			
			ЗначениеСвойства = Неопределено;
			Если СвойствоУстановлено(ДополнительныйРеквизит, "propertySimpleValue") Тогда
				ЗначениеСвойства = ДополнительныйРеквизит.propertySimpleValue;
			ИначеЕсли СвойствоУстановлено(ДополнительныйРеквизит, "propertyObjectValue") Тогда
				ЗначениеСвойстваXDTO = ДополнительныйРеквизит.propertyObjectValue;
				
				Если Не ЗначениеЗаполнено(ЗначениеСвойстваXDTO.objectId.ID)
						И Не ЗначениеЗаполнено(ЗначениеСвойстваXDTO.objectId.type)
						И СвойствоУстановлено(ЗначениеСвойстваXDTO, "externalObject") Тогда
					ЗначениеСвойства = НайтиСоздатьВнешнийОбъект(ЗначениеСвойстваXDTO);
				Иначе
					ЗначениеСвойства = ПолучитьСсылкуПоObjectID(ЗначениеСвойстваXDTO.objectId);
				КонецЕсли;
			КонецЕсли;
			
			Строка = ОбъектДО.ДополнительныеРеквизиты.Найти(ОбъектСвойство, "Свойство");
			Если Строка <> Неопределено Тогда
				Если Не ПустаяСтрока(Строка.ТекстоваяСтрока) Тогда
					ЗначениеСтроки = Строка.ТекстоваяСтрока;
				Иначе
					ЗначениеСтроки = Строка.Значение;
				КонецЕсли;
				
				Если ЗначениеСтроки <> ЗначениеСвойства Тогда
					Возврат Истина;
				КонецЕсли;
			ИначеЕсли СвойствоУстановлено(ДополнительныйРеквизит, "propertySimpleValue")
					Или СвойствоУстановлено(ДополнительныйРеквизит, "propertyObjectValue") Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Дополняет объект Документооборота сведениями о подписях из объекта XDTO
//
// Параметры:
//   signatures - СписокXDTO - список объектов типа DMSignature.
//   ПодписанныйОбъект - ЛюбаяСсылка - ссылка на подписанный объект.
//
Процедура ЗанестиИнформациюОПодписяхОбъекта(signatures, ПодписанныйОбъект) Экспорт
	
	ДанныеПодписей = Новый Массив;
	
	Для Каждого ПодписьСтруктура Из signatures Цикл
	
		ДанныеПодписи = Новый Структура;
		ДанныеПодписи.Вставить("ПодписанныйОбъект", ПодписанныйОбъект);
		
		СвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
		
		СвойстваПодписи.Подпись = ПодписьСтруктура.signature;
		СвойстваПодписи.Отпечаток = ПодписьСтруктура.thumbprint;
		СвойстваПодписи.ДатаПодписи = ПодписьСтруктура.date;
		СвойстваПодписи.Комментарий = ПодписьСтруктура.comment;
		СвойстваПодписи.КомуВыданСертификат = ПодписьСтруктура.author;
		СвойстваПодписи.Сертификат = ПодписьСтруктура.certificate;
		СвойстваПодписи.ТипПодписи = Перечисления.ТипыПодписиКриптографии.ПустаяСсылка();
		СвойстваПодписи.СрокДействияПоследнейМеткиВремени = Дата(1,1,1);
		
		УстановившийПодпись = Справочники.Пользователи.ПустаяСсылка();
		ЗаполнитьРеквизитИзСвойстваXDTO(УстановившийПодпись, ПодписьСтруктура, "signer", Ложь);
		Если Не ЗначениеЗаполнено(УстановившийПодпись) Тогда
			УстановившийПодпись = Пользователи.ТекущийПользователь();
		КонецЕсли;
		СвойстваПодписи.УстановившийПодпись = УстановившийПодпись;
		
		ДанныеПодписи.Вставить("СвойстваПодписи", СвойстваПодписи);
		
		ДанныеПодписей.Добавить(ДанныеПодписи);
		
	КонецЦикла;
	
	ЭтоФайл = ДелопроизводствоКлиентСервер.ЭтоФайл(ПодписанныйОбъект);
	Если ЭтоФайл Тогда
		ТекущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписанныйОбъект, "ТекущаяВерсия");
		РаботаСЭП.УдалитьПодписиОбъекта(ТекущаяВерсия);
	Иначе
		РаботаСЭП.УдалитьПодписиОбъекта(ПодписанныйОбъект);
	КонецЕсли;
	
	Если ДанныеПодписей.Количество() = 0 Тогда
		Если ЭтоФайл Тогда
			РаботаСЭП.СнятьПризнакПодписанЭП(ТекущаяВерсия);
		Иначе
			РаботаСЭП.СнятьПризнакПодписанЭП(ПодписанныйОбъект);
		КонецЕсли;
	Иначе
		РаботаСЭП.ЗанестиИнформациюОПодписях(ДанныеПодписей);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет и записывает объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ОбъектДО - СправочникОбъект - записываемый объект.
//   ИсточникДанных - Структура - источник данных:
//     * ТипИсточника - Строка - принимает значения "ОбъектXDTO" или "ВходящиеДанные", в зависимости от типа источника.
//     * ОбъектXDTO - ОбъектXDTO - объект XDTO, потомок DMObject. Источник данных.
//     * ТипXDTOОбъекта - Строка - имя типа XDTO объекта, из которого требуется заполнить объект ДО.
//     * ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//     * ПравилоЗагрузки - СправочникОбъект.ПравилаЗагрузкиДанныхВДО - правило загрузки.
//     * Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//   Ошибка - ОбъектXDTO - объект XDTO типа DMError. Неявно возвращаемое значение ошибки.
//          - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеОбъектаДО(ОбъектДО, ИсточникДанных, Ошибка) Экспорт
	
	Результат = Истина;
	Заблокирован = Ложь;
	НужноОбновитьПодписи = Ложь;
	
	Попытка
		
		ПолноеИмяТипаОбъектаДО = ОбъектДО.Метаданные().ПолноеИмя();
		ЗаголовокОшибки = НСтр("ru = 'Ошибка при записи объекта ДО'");
		ТекстОшибкиМассив = Новый Массив;
		ТекстОшибкиМассив.Добавить(СтрШаблон(НСтр("ru = 'Ошибка при записи объекта ДО типа %1%2'"),
			ПолноеИмяТипаОбъектаДО,
			?(ОбъектДО.Ссылка.Пустая(), НСтр("ru = ' (Новый объект)'"), "")));
		
		// Заполнение объекта.
		Если ИсточникДанных.ТипИсточника = "ОбъектXDTO" Тогда
			ЗаполнитьДанныеОбъектаДО(
				ОбъектДО,
				ИсточникДанных.ОбъектXDTO,
				ИсточникДанных.ТипXDTOОбъекта);
			ТекстОшибкиМассив.Добавить(
				СтрШаблон(НСтр("ru = 'Источник данных: %1 (Объект XDTO типа %2)'"),
				ИсточникДанных.ОбъектXDTO.name,
				ИсточникДанных.ТипXDTOОбъекта));
			НужноОбновитьПодписи = СвойствоУстановлено(ИсточникДанных.ОбъектXDTO, "signatures")
				Или (СвойствоУстановлено(ИсточникДанных.ОбъектXDTO, "updateSignatures")
					И ИсточникДанных.ОбъектXDTO.updateSignatures);
			
		ИначеЕсли ИсточникДанных.ТипИсточника = "ВходящиеДанные" Тогда
			РаботаСИнтегрированнымиСистемами.ЗаполнитьОбъектИзВходящихДанных(
				ОбъектДО,
				ИсточникДанных.ВходящиеДанные,
				ИсточникДанных.ПравилоЗагрузки,
				ИсточникДанных.Обновление);
			Если Не ОбъектДО.Ссылка.Пустая()
					И ИсточникДанных.ВнешнийОбъект.ID <> ""
					И ИсточникДанных.ВнешнийОбъект.Тип <> "" Тогда
				РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
					ИсточникДанных.ВнешнийОбъект.ID,
					ИсточникДанных.ВнешнийОбъект.Тип,
					ОбъектДО.Ссылка,
					Истина);
			КонецЕсли;
			
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип источника данных ""%1""'"),
				ИсточникДанных.ТипИсточника);
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибкиМассив.Добавить(
			СтрШаблон(НСтр("ru = 'Операция: заполнение данных объекта ДО типа %1'"), ПолноеИмяТипаОбъектаДО));
		ТекстОшибкиМассив.Добавить("");
		ТекстОшибкиМассив.Добавить((НСтр("ru = 'Содержание ошибки:'")));
		ТекстОшибкиМассив.Добавить("");
		ТекстОшибкиМассив.Добавить(ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = СтрСоединить(ТекстОшибкиМассив, Символы.ПС);
		ДобавитьНавигационнуюСсылкуКТекстуОшибки(
			ТекстСообщения,
			ОбъектДО,
			?(ИсточникДанных.ТипИсточника = "ОбъектXDTO",
				ИсточникДанных.ОбъектXDTO.externalObject,
				Неопределено));
		
		Если ТипЗнч(Ошибка) = Тип("ОбъектXDTO") Тогда
			Ошибка.subject = ЗаголовокОшибки;
			Ошибка.description = ТекстСообщения;
		Иначе
			Ошибка = СтрШаблон(
				НСтр("ru = '%1
					|%2'"),
				ЗаголовокОшибки,
				ТекстСообщения);
		КонецЕсли;
		
		Результат = Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	ОбъектДО.ДополнительныеСвойства.Свойство("Модифицированность", Модифицированность);
	ТребуетсяЗаписьОбъекта = ОбъектДО.Модифицированность() Или (Модифицированность = Истина);
	
	Если Результат = Истина И (ТребуетсяЗаписьОбъекта Или НужноОбновитьПодписи) Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Если НужноОбновитьПодписи Тогда
				ЧислоПодписейДо = РаботаСЭП.КоличествоПодписей(ОбъектДО.Ссылка);
				ЧислоПодписейПосле = ИсточникДанных.ОбъектXDTO.signatures.Количество();
				Если ЧислоПодписейДо > ЧислоПодписейПосле Тогда //удаляем подписи перед изменением карточки
					ЗанестиИнформациюОПодписяхОбъекта(ИсточникДанных.ОбъектXDTO.signatures, ОбъектДО.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			Если ТребуетсяЗаписьОбъекта Тогда
				
				Если ЗначениеЗаполнено(ОбъектДО.Ссылка) Тогда
					ОбъектДО.Заблокировать();
					Заблокирован = Истина;
				КонецЕсли;
				
				// Проверка заполнения.
				ТекстСообщения = "";
				Если Не ОбработкаЗапросовXDTOДокументы.ПроверитьЗаполнениеОбъектаДО(
						ОбъектДО, ИсточникДанных, ТекстСообщения) Тогда
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Ошибка проверки заполнения ""%1 (%2)"":
							|%3'"),
						ОбъектДО,
						ПолноеИмяТипаОбъектаДО,
						ТекстСообщения);
				КонецЕсли;
				
				// Запись.
				ОбъектДО.Записать();
				ОбработатьОбъектДОПослеЗаписи(ОбъектДО, ИсточникДанных);
				
				Если Заблокирован Тогда
					ОбъектДО.Разблокировать();
					Заблокирован = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НужноОбновитьПодписи Тогда
				Если ЧислоПодписейДо <= ЧислоПодписейПосле Тогда // добавляем подписи после изменения карточки
					ЗанестиИнформациюОПодписяхОбъекта(ИсточникДанных.ОбъектXDTO.signatures, ОбъектДО.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ТекстОшибкиМассив.Добавить(
				СтрШаблон(НСтр("ru = 'Операция: запись данных объекта ДО типа %1'"), ПолноеИмяТипаОбъектаДО));
			ТекстОшибкиМассив.Добавить("");
			ТекстОшибкиМассив.Добавить((НСтр("ru = 'Содержание ошибки:'")));
			ТекстОшибкиМассив.Добавить("");
			ТекстОшибкиМассив.Добавить(ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрСоединить(ТекстОшибкиМассив, Символы.ПС);
			ДобавитьНавигационнуюСсылкуКТекстуОшибки(
				ТекстСообщения,
				ОбъектДО,
				?(ИсточникДанных.ТипИсточника = "ОбъектXDTO",
					ИсточникДанных.ОбъектXDTO.externalObject,
					Неопределено));
			
			Если ТипЗнч(Ошибка) = Тип("ОбъектXDTO") Тогда
				Ошибка.subject = ЗаголовокОшибки;
				Ошибка.description = ТекстСообщения;
				
			Иначе
				Ошибка = СтрШаблон(
					НСтр("ru = '%1
						|%2'"),
					ЗаголовокОшибки,
					ТекстСообщения);
			КонецЕсли;
			
			Результат = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Результат = Истина Тогда
		ЗаписатьДанныеФайлов(ОбъектДО.Ссылка, ИсточникДанных);
	КонецЕсли;
	
	Если Заблокирован Тогда
		ОбъектДО.Разблокировать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает набор дополнительных реквизитов и их значения у объекта Документооборота
//
// Параметры:
//   ОбъектДО - Произвольный - объект Документооборота, чьи дополнительные свойства подлежат заполнению.
//   ОбъектXDTO - ОбъектXDTO - связанный объект XDTO, чье свойство additionalProperties служит источником.
//
Процедура ЗаписатьДополнительныеРеквизиты(ОбъектДО, ОбъектXDTO) Экспорт
	
	Если Не СвойствоУстановлено(ОбъектXDTO, "additionalProperties") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДополнительныйРеквизит Из ОбъектXDTO.additionalProperties Цикл
		
		ОбъектСвойство = ПолучитьСсылкуПоObjectID(ДополнительныйРеквизит.objectId);
		
		Если ЗначениеЗаполнено(ОбъектСвойство) Тогда
			
			ЗначениеСвойства = Неопределено;
			Если СвойствоУстановлено(ДополнительныйРеквизит, "propertySimpleValue") Тогда
				ЗначениеСвойства = ДополнительныйРеквизит.propertySimpleValue;
				
			ИначеЕсли СвойствоУстановлено(ДополнительныйРеквизит, "propertyObjectValue") Тогда
				ЗначениеСвойстваXDTO = ДополнительныйРеквизит.propertyObjectValue;
				
				Если Не ЗначениеЗаполнено(ЗначениеСвойстваXDTO.objectId.ID)
						И Не ЗначениеЗаполнено(ЗначениеСвойстваXDTO.objectId.type)
						И СвойствоУстановлено(ЗначениеСвойстваXDTO, "externalObject") Тогда
					
					// Определим значение по записи в регистре связей или по полям поиска.
					ЗначениеСвойства = НайтиСоздатьВнешнийОбъект(ЗначениеСвойстваXDTO);
					
					Если ЗначениеСвойства = Неопределено Тогда
						ЗначениеСвойства = НайтиСоздатьДополнительноеЗначениеСвойстваОбъекта(
							ЗначениеСвойстваXDTO,
							ОбъектСвойство);
					КонецЕсли;
					
				Иначе
					ЗначениеСвойства = ПолучитьСсылкуПоObjectID(ЗначениеСвойстваXDTO.objectId);
				КонецЕсли;
				
			КонецЕсли;
			
			Строка = ОбъектДО.ДополнительныеРеквизиты.Найти(ОбъектСвойство, "Свойство");
			Если Строка <> Неопределено Тогда
				Строка.Значение = ЗначениеСвойства;
				Если ТипЗнч(ЗначениеСвойства) = Тип("Строка")
						И (СтрДлина(ЗначениеСвойства) > 1024 Или ЗначениеЗаполнено(Строка.ТекстоваяСтрока)) Тогда
					Строка.ТекстоваяСтрока = ЗначениеСвойства;
				КонецЕсли;
			ИначеЕсли СвойствоУстановлено(ДополнительныйРеквизит, "propertySimpleValue")
					Или СвойствоУстановлено(ДополнительныйРеквизит, "propertyObjectValue") Тогда
				НоваяСтрока = ОбъектДО.ДополнительныеРеквизиты.Добавить();
				НоваяСтрока.Свойство = ОбъектСвойство;
				НоваяСтрока.Значение = ЗначениеСвойства;
				Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") И СтрДлина(ЗначениеСвойства) > 1024 Тогда
					НоваяСтрока.ТекстоваяСтрока = ЗначениеСвойства;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщения = "";
	Если Не ПроверитьЗаполнениеДополнительныхРеквизитов(ОбъектДО, ТекстСообщения) Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ОбъектДО - СправочникОбъект - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO соответствующего типа. Источник данных заполнения.
//   ТипXDTOОбъекта - Строка - имя типа XDTO объекта, из которого требуется заполнить объект ДО.
//
Процедура ЗаполнитьДанныеОбъектаДО(ОбъектДО, ОбъектXDTO, ТипXDTOОбъекта) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ОбработкаЗапросовXDTOПереопределяемый.ПриЗаполненииДанныхОбъектаДО(
		ОбъектДО,
		ОбъектXDTO,
		ТипXDTOОбъекта,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипXDTOОбъекта = "DMDocument" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеДокумента(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeeting" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеМероприятия(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCorrespondent" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеКонтрагента(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMDocumentType" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеВидаДокумента(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMDocumentFolder" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеПапкиДокументов(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeetingType" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеВидаМероприятия(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeetingMinutesItem" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеПунктаПротоколаМероприятия(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMContactPerson" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеКонтактногоЛица(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMContactInformationKind" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеВидаКонтактнойИнформации(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMOrganization" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеОрганизации(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMSubdivision" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеПодразделения(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMPrivatePerson" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеФизическогоЛица(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMUser" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеПользователя(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMEmployee" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеСотрудника(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCurrency" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеВалюты(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMBank" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеБанка(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMBankAccount" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеБанковскогоСчета(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCashFlowItem" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеСтатьиДвиженияДенежныхСредств(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCountry" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеСтраны(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMVATRateUniversal" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеСтавкиНДС(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMProduct" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеНоменклатуры(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeasurementUnit" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеЕдиницыИзмерения(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCaseFilesListSections" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеРазделаНоменклатурыДел(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCaseFilesCatalog" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеНоменклатурыДел(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCaseFilesDossiers" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеДелаХраненияДокументов(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMDocumentTopic" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеТематикиДокументов(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMIncomingElectronicDocument" Или ТипXDTOОбъекта = "DMOutgoingElectronicDocument" Тогда
		ОбработкаЗапросовXDTOДокументы.ЗаполнитьДанныеДокументаЭДО(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMObject" Тогда
		ЗаполнитьРеквизитИзСвойстваXDTO(ОбъектДО.Наименование, ОбъектXDTO, "name");
		
	ИначеЕсли ТипXDTOОбъекта = "DMFile" Тогда
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьДанныеФайла(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMFileVersion" Тогда
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьДанныеВерсииФайла(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMActionApproval"
			Или ТипXDTOОбъекта = "DMActionPerformance"
			Или ТипXDTOОбъекта = "DMActionExamination"
			Или ТипXDTOОбъекта = "DMActionSigning"
			Или ТипXDTOОбъекта = "DMActionRegistration"
			Или ТипXDTOОбъекта = "DMActionConfirmation" Тогда
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьДанныеДействия(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMObjectProcessing" Тогда
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьДанныеОбработкиОбъекта(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMTaskAction" Тогда
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьДанныеЗадачи(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCompleteRole" Тогда
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьДанныеПолнойРоли(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMBusinessProcessExecutorRole" Тогда
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьДанныеРолиИсполнителя(ОбъектДО, ОбъектXDTO);
		
	ИначеЕсли ОбъектXDTO.Тип().БазовыйТип = ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject")
			Или ОбъектXDTO.Тип() = ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject") Тогда
		ОбъектМетаданных = ОбъектДО.Ссылка.Метаданные();
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Если ЕстьНаименование(ОбъектМетаданных, ПолноеИмя) Тогда
			ЗаполнитьРеквизитИзСвойстваXDTO(ОбъектДО.Наименование, ОбъектXDTO, "name");
		КонецЕсли;
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Попытка заполнить данные из неизвестного типа XDTO: %1'"), ТипXDTOОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ОбъектДО - СправочникОбъект - объект Документооборота.
//   ДанныеОбъектаДО - Структура - содержит данные для заполнения объекта XDTO.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - СписокXDTO - содержит список строк, имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//   ЕстьНаименование - Булево - содержит ли объект Документооборота реквизит "Наименование".
//   ЗаполнятьСписокВнешнихОбъектов - Булево - будет заполнен реквизит externalObject.
//   ЗаполнятьКлючевыеРеквизиты - Булево - требуется заполнение ключевых реквизитов значений свойств.
//
Процедура ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(ОбъектДО, ДанныеОбъектаДО, ОбъектXDTO, НаборКолонок,
		ЕстьНаименование = Истина, ЗаполнятьСписокВнешнихОбъектов = Истина, ЗаполнятьКлючевыеРеквизиты = Истина) Экспорт
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Колонки.Добавить(НРег(ИмяКолонки));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Внешний объект.
	Если ЗаполнятьСписокВнешнихОбъектов
			И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("externalObject")) <> Неопределено) Тогда
		ЗаполнитьСписокВнешнихОбъектов(ОбъектДО.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	Для Каждого Реквизит Из ДанныеОбъектаДО Цикл
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег(Реквизит.Ключ)) <> Неопределено Тогда
			ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение, ЗаполнятьКлючевыеРеквизиты);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO.objectId = ПолучитьObjectIDПоСсылке(ОбъектДО.Ссылка);
	Если ЕстьНаименование Тогда
		ОбъектXDTO.name = ОбъектДО.Наименование;
	Иначе
		ОбъектXDTO.name = Строка(ОбъектДО.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит объекта информационной базы из свойства объекта XDTO.
//
// Параметры:
//   РеквизитДО - Произвольный - реквизит объекта, подлежащий заполнению.
//   ЗначениеСвойстваXDTO - ОбъектXDTO - объект XDTO, который требуется перенести в реквизит ДО.
//   ТипРеквизитаОбъектаДОВСтроку - Строка - тип реквизита объекта, который требуется заполнить.
//   Владелец - СправочникСсылка - владелец реквизита, который требуется заполнить.
//   ВызыватьИсключение - Булево - требуется вызов исключения в случае возникновения ошибки.
//
// Возвращаемое значение:
//   Булево - реквизит был заполнен.
//
Функция ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(РеквизитДО, ЗначениеСвойстваXDTO,
		ТипРеквизитаОбъектаДОВСтроку = Неопределено, Владелец = Неопределено, ВызыватьИсключение = Истина) Экспорт
	
	Если ЗначениеСвойстваXDTO = Неопределено И ЗначениеЗаполнено(РеквизитДО) Тогда
		РеквизитДО = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	// Определим что именно мы будем заполнять
	
	НовоеЗначение = Неопределено;
	ТипРеквизитаДО = ТипЗнч(РеквизитДО);
	ТипЗначенияСвойстваXDTO = ТипЗнч(ЗначениеСвойстваXDTO);
	ЭтоСсылка = Ложь;
	ЭтоПеречисление = Ложь;
	
	СоответствующееИмяТипаИзЗначенияСвойстваXDTO = "";
	Если ТипЗначенияСвойстваXDTO = Тип("ОбъектXDTO") Тогда
		ПолучитьТипДОПоТипуXDTO(
			СтрЗаменить(ЗначениеСвойстваXDTO.Тип(), "{http://www.1c.ru/dm}", ""),
			СоответствующееИмяТипаИзЗначенияСвойстваXDTO,
			Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРеквизитаОбъектаДОВСтроку) Тогда
		
		СоответствующееИмяТипаИзРеквизитаДО = "";
		Если (РеквизитДО <> Неопределено) И ОбщегоНазначения.ЭтоСсылка(ТипРеквизитаДО) Тогда
			СоответствующееИмяТипаИзРеквизитаДО = РеквизитДО.Метаданные().ПолноеИмя();
		КонецЕсли;
		
		МассивТиповРеквизитаДО = СтрРазделить(ТипРеквизитаОбъектаДОВСтроку, ",");
		Если МассивТиповРеквизитаДО.Количество() = 1 Тогда
			ПолноеИмяТипаОбъектаДО = МассивТиповРеквизитаДО[0];
			
		ИначеЕсли МассивТиповРеквизитаДО.Найти(СоответствующееИмяТипаИзЗначенияСвойстваXDTO) <> Неопределено Тогда
			ПолноеИмяТипаОбъектаДО = СоответствующееИмяТипаИзЗначенияСвойстваXDTO;
			
		ИначеЕсли МассивТиповРеквизитаДО.Найти(СоответствующееИмяТипаИзРеквизитаДО) <> Неопределено Тогда
			ПолноеИмяТипаОбъектаДО = СоответствующееИмяТипаИзРеквизитаДО;
			
		ИначеЕсли ЗначениеЗаполнено(Владелец) Тогда
			МетаданныеВладельца = Метаданные.НайтиПоТипу(ТипЗнч(Владелец));
			Для Каждого ПолноеИмяТипаОбъектаДО Из МассивТиповРеквизитаДО Цикл
				МетаданныеТипаОбъектаДО = Метаданные.НайтиПоПолномуИмени(ПолноеИмяТипаОбъектаДО);
				Если МетаданныеТипаОбъектаДО = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЭтоПодходящийПоВладельцуТип = Ложь;
				Для Каждого ОбъектМетаданных Из МетаданныеТипаОбъектаДО.Владельцы Цикл
					Если ОбъектМетаданных = МетаданныеВладельца Тогда
						ЭтоПодходящийПоВладельцуТип = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЭтоПодходящийПоВладельцуТип Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;

		Иначе
			ПолноеИмяТипаОбъектаДО = МассивТиповРеквизитаДО[0];
			
		КонецЕсли;
		
		Если СтрНайти(ПолноеИмяТипаОбъектаДО, "Справочник.") Или СтрНайти(ПолноеИмяТипаОбъектаДО, "Документ.") Тогда
			ЭтоСсылка = Истина;
			МенеджерОбъектаДО = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяТипаОбъектаДО);
		ИначеЕсли СтрНайти(ПолноеИмяТипаОбъектаДО, "Перечисление.") Тогда
			ЭтоПеречисление = Истина;
			ИмяПеречисления = СтрЗаменить(ПолноеИмяТипаОбъектаДО, "Перечисление.", "");
		КонецЕсли;
		
	ИначеЕсли РеквизитДО <> Неопределено Тогда
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипРеквизитаДО) Тогда
			ЭтоСсылка = Истина;
			ПолноеИмяТипаОбъектаДО = РеквизитДО.Метаданные().ПолноеИмя();
			МенеджерОбъектаДО = ОбщегоНазначения.МенеджерОбъектаПоСсылке(РеквизитДО);
		КонецЕсли;
		
		Если Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизитаДО) Тогда
			ЭтоПеречисление = Истина;
			ИмяПеречисления = РеквизитДО.Метаданные().Имя;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СоответствующееИмяТипаИзЗначенияСвойстваXDTO) Тогда
		ПолноеИмяТипаОбъектаДО = СоответствующееИмяТипаИзЗначенияСвойстваXDTO;
		Если СтрНайти(ПолноеИмяТипаОбъектаДО, "Справочник.") Или СтрНайти(ПолноеИмяТипаОбъектаДО, "Документ.") Тогда
			ЭтоСсылка = Истина;
			МенеджерОбъектаДО = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяТипаОбъектаДО);
		ИначеЕсли СтрНайти(ПолноеИмяТипаОбъектаДО, "Перечисление.") Тогда
			ЭтоПеречисление = Истина;
			ИмяПеречисления = СтрЗаменить(ПолноеИмяТипаОбъектаДО, "Перечисление.", "");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приступим к заполнению.
	
	Если ЭтоПеречисление Тогда
		
		ЗначениеДляПоиска = ЗначениеСвойстваXDTO;
		
		Если ТипЗначенияСвойстваXDTO = Тип("ОбъектXDTO") Тогда
			
			ЗначениеДляПоиска = ЗначениеСвойстваXDTO.objectId.ID;
			НовоеЗначение = ЗначениеПеречисленияПоИмениИлиСинониму(ИмяПеречисления, ЗначениеДляПоиска);
			
			Если Не ЗначениеЗаполнено(НовоеЗначение) И СвойствоУстановлено(ЗначениеСвойстваXDTO, "externalObject") Тогда
				ЗначениеДляПоиска = ЗначениеСвойстваXDTO.externalObject.ID;
				НовоеЗначение = ЗначениеПеречисленияПоИмениИлиСинониму(ИмяПеречисления, ЗначениеДляПоиска);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НовоеЗначение) Тогда
				ЗначениеДляПоиска = ЗначениеСвойстваXDTO.name;
				НовоеЗначение = ЗначениеПеречисленияПоИмениИлиСинониму(ИмяПеречисления, ЗначениеДляПоиска);
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначенияСвойстваXDTO)
				И ЗначениеСвойстваXDTO.Метаданные().ПолноеИмя() = ПолноеИмяТипаОбъектаДО Тогда
			
			НовоеЗначение = ЗначениеСвойстваXDTO;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НовоеЗначение) Тогда
			НовоеЗначение = ЗначениеПеречисленияПоИмениИлиСинониму(ИмяПеречисления, СокрЛП(ЗначениеДляПоиска));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НовоеЗначение) Тогда
			ИмяПеречисленияXDTO = ПолучитьТипXDTOПоТипуДО(ПолноеИмяТипаОбъектаДО, Ложь);
			Если ЗначениеЗаполнено(ИмяПеречисленияXDTO) Тогда
				НовоеЗначение = ПолучитьЗначениеПеречисленияДО(ИмяПеречисленияXDTO, СокрЛП(ЗначениеДляПоиска));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияСвойстваXDTO = Тип("ОбъектXDTO") Тогда
		Тип = ЗначениеСвойстваXDTO.objectId.type;
		ID  = ЗначениеСвойстваXDTO.objectId.ID;
		Если Не ЗначениеЗаполнено(ID) И Не ЗначениеЗаполнено(Тип)
				И СвойствоУстановлено(ЗначениеСвойстваXDTO, "externalObject") Тогда
			
			Если ЭтоСсылка Тогда
				НовоеЗначение = НайтиСоздатьВнешнийОбъект(ЗначениеСвойстваXDTO, ПолноеИмяТипаОбъектаДО, Владелец);
			Иначе
				НовоеЗначение = НайтиВнешнийОбъект(ЗначениеСвойстваXDTO);
				Если НовоеЗначение = Неопределено И СвойствоУстановлено(ЗначениеСвойстваXDTO, "name") Тогда
					НовоеЗначение = ЗначениеСвойстваXDTO.name;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			НовоеЗначение = ПолучитьСсылкуПоObjectID(ЗначениеСвойстваXDTO.objectId, ВызыватьИсключение);
		КонецЕсли;
		
	ИначеЕсли ЭтоСсылка И ТипЗначенияСвойстваXDTO = Тип("Строка") И Не ПустаяСтрока(ЗначениеСвойстваXDTO) Тогда
		// Требуется заполнить значение ссылочного типа. Попробуем найти объект по наименованию.
		Наименование = СокрЛП(ЗначениеСвойстваXDTO);
		НовоеЗначение = МенеджерОбъектаДО.НайтиПоНаименованию(Наименование, Истина);
		Если Не ЗначениеЗаполнено(НовоеЗначение) Тогда
			// Попробуем создать новый объект. Метод СоздатьОбъектДО не используется, т.к. он предназначен только
			// для создания элементов из ограниченного числа справочников, имеющих соответствие в веб-сервисе ДО.
			Попытка
				НовыйОбъект = МенеджерОбъектаДО.СоздатьЭлемент();
				НовыйОбъект.Заполнить(Неопределено);
				Если ЗначениеЗаполнено(Владелец) И НовыйОбъект.Метаданные().Владельцы.Количество() > 0 Тогда
					НовыйОбъект.Владелец = Владелец;
				КонецЕсли;
				НовыйОбъект.Наименование = Наименование;
				НовыйОбъект.Записать();
				НовоеЗначение = НовыйОбъект.Ссылка;
			Исключение
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Ошибка при создании нового объекта ДО типа %1
						|Наименование объекта: %2
						|%3'"),
					ПолноеИмяТипаОбъектаДО,
					Наименование,
					ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		НовоеЗначение = ЗначениеСвойстваXDTO;
		
	КонецЕсли;
	
	Если РеквизитДО <> НовоеЗначение Тогда
		РеквизитДО = НовоеЗначение;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет реквизит объекта информационной базы из свойства объекта XDTO с типом перечисление.
//
// Параметры:
//   ИмяТипаПеречисленияXDTO - Строка - имя типа объекта XDTO, которым является данное перечисление.
//   ОбъектXDTO - ОбъектXDTO - объект, свойство которого соответствует заполняемому реквизиту.
//   ИмяСвойстваXDTO - Строка - имя свойства, значение которого переносится в реквизит.
//   ОбъектДО - СправочникОбъект - объект, свойство которого следует заполнить.
//   ИмяСвойстваДО - Строка - имя свойства, значение которого следует заполнить.
//
Процедура ЗаполнитьРеквизитИзПеречисленияXDTO(ИмяТипаПеречисленияXDTO, ОбъектXDTO, ИмяСвойстваXDTO,
		ОбъектДО, ИмяСвойстваДО) Экспорт
	
	Если Не СвойствоУстановлено(ОбъектXDTO, ИмяСвойстваXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	НовоеЗначение = ПолучитьЗначениеПеречисленияДО(ИмяТипаПеречисленияXDTO, ОбъектXDTO[ИмяСвойстваXDTO]);
	
	Если ОбъектДО[ИмяСвойстваДО] <> НовоеЗначение Тогда
		ОбъектДО[ИмяСвойстваДО] = НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит объекта информационной базы из свойства объекта XDTO.
//
// Параметры:
//   РеквизитДО - Произвольный - реквизит объекта, подлежащий заполнению.
//   ОбъектXDTO - ОбъектXDTO - объект, свойство которого соответствует заполняемому реквизиту.
//   ИмяСвойстваXDTO - Строка - имя свойства, значение которого переносится в реквизит.
//   ВызыватьИсключение - Булево - требуется вызов исключения в случае возникновения ошибки.
//
// Возвращаемое значение:
//   Булево - реквизит был заполнен.
//
Функция ЗаполнитьРеквизитИзСвойстваXDTO(РеквизитДО, ОбъектXDTO, ИмяСвойстваXDTO, ВызыватьИсключение = Истина) Экспорт
	
	Если СвойствоУстановлено(ОбъектXDTO, ИмяСвойстваXDTO) Тогда
		Возврат ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(РеквизитДО, ОбъектXDTO[ИмяСвойстваXDTO],,, ВызыватьИсключение);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет свойство объекта XDTO из реквизита объекта информационной базы
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект, свойство которого требуется заполнить
//   ИмяСвойстваXDTO - Строка - имя свойства, значение которого заполняется
//   Реквизит - Произвольный - реквизит объекта, служащий источником
//   ЗаполнятьКлючевыеРеквизиты - Булево - требуется заполнение ключевых реквизитов значений свойств.
//
Процедура ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, ИмяСвойстваXDTO, Реквизит,
		ЗаполнятьКлючевыеРеквизиты = Истина) Экспорт
	
	ТипРеквизита = ТипЗнч(Реквизит);
	Если ТипРеквизита = Тип("Строка")
			Или ТипРеквизита = Тип("Число")
			Или ТипРеквизита = Тип("Булево")
			Или ТипРеквизита = Тип("Неопределено") Тогда
		ЭтоСсылка = Ложь;
	Иначе
		ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипРеквизита);
	КонецЕсли;
	
	Если Реквизит = Неопределено Или Реквизит = Null Или (ЭтоСсылка И Не ЗначениеЗаполнено(Реквизит)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоСсылка И ЭтоПеречисление(Реквизит) Тогда
		
		ОбъектXDTO[ИмяСвойстваXDTO] = ПолучитьЗначениеПеречисленияXDTO(Реквизит);
		
	ИначеЕсли ЭтоСсылка Тогда
		
		ТипСвойства = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойстваXDTO).Тип;
		ЗначениеСвойства = ФабрикаXDTO.Создать(ТипСвойства);
		
		ЗначениеСвойства.name = Строка(Реквизит);
		ЗначениеСвойства.objectId = ПолучитьObjectIDПоСсылке(Реквизит,, ЗначениеСвойства.name);
		
		Если ЗаполнятьКлючевыеРеквизиты Тогда
			ОбъектДО = Неопределено;
			Если ЧтениеРазрешено(Реквизит, ОбъектДО) Тогда
				ЗаполнитьКлючевыеРеквизитыОбъектаXDTO(ОбъектДО, ЗначениеСвойства, ТипРеквизита, ТипСвойства.Имя);
			КонецЕсли;
		КонецЕсли;
		
		ОбъектXDTO[ИмяСвойстваXDTO] = ЗначениеСвойства;
		
	Иначе // Примитивный тип.
		
		ОбъектXDTO[ИмяСвойстваXDTO] = Реквизит;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список externalObjects в объекте XDTO ссылками на внешние объекты.
//
// Параметры:
//   Объект - ЛюбаяСсылка - ссылка на объект Документооборота.
//   ОбъектXDTO - ОбъектXDTO - потомок DMObject, в котором заполняется список externalObjects.
//
Процедура ЗаполнитьСписокВнешнихОбъектов(Объект, ОбъектXDTO) Экспорт
	
	СписокВнешнихОбъектов = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ПолучитьСписокВнешнихОбъектов(Объект);
	ОбъектXDTO.externalObjects.Очистить();
	
	Для Каждого ВнешнийОбъект Из СписокВнешнихОбъектов Цикл
		
		ВнешнийОбъектXDTO = СоздатьОбъект("ExternalObject");
		ВнешнийОбъектXDTO.ID = ВнешнийОбъект.Идентификатор;
		ВнешнийОбъектXDTO.type = ВнешнийОбъект.Тип;
		ВнешнийОбъектXDTO.name = "";
		ОбъектXDTO.externalObjects.Добавить(ВнешнийОбъектXDTO);
		
		Если Не СвойствоУстановлено(ОбъектXDTO, "externalObject") Тогда
			ВнешнийОбъектXDTO = СоздатьОбъект("ExternalObject");
			ВнешнийОбъектXDTO.ID = ВнешнийОбъект.Идентификатор;
			ВнешнийОбъектXDTO.type = ВнешнийОбъект.Тип;
			ВнешнийОбъектXDTO.name = "";
			ОбъектXDTO.externalObject = ВнешнийОбъектXDTO;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение перечисления по имени и имени или синониму значения.
//
// Параметры:
//   ИмяПеречисления - Строка - имя перечисления.
//   ИмяИлиСинонимЗначения - Строка - имя или синоним значения перечисления.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на значение перечисления.
//
Функция ЗначениеПеречисленияПоИмениИлиСинониму(ИмяПеречисления, Знач ИмяИлиСинонимЗначения) Экспорт
	
	ЗначениеПеречисления = Перечисления[ИмяПеречисления].ПустаяСсылка();
	ИмяИлиСинонимЗначения = СокрЛП(ИмяИлиСинонимЗначения);
	Если ИмяИлиСинонимЗначения <> "" Тогда
		МетаданныеПеречисления = Метаданные.Перечисления[ИмяПеречисления];
		Если МетаданныеПеречисления.ЗначенияПеречисления.Найти(ИмяИлиСинонимЗначения) = Неопределено Тогда
			// Заполним перечисление по переданному синониму
			Для Каждого МетаданныеЗначениеПеречисления Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
				Если ВРег(СокрЛП(МетаданныеЗначениеПеречисления.Синоним)) = ВРег(ИмяИлиСинонимЗначения) Тогда
					ЗначениеПеречисления = Перечисления[ИмяПеречисления][МетаданныеЗначениеПеречисления.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе // по имени
			ЗначениеПеречисления = Перечисления[ИмяПеречисления][ИмяИлиСинонимЗначения];
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеПеречисления;
	
КонецФункции

// Возвращает локализованное имя события журнала регистрации для обработки запросов веб сервиса ДО.
//
// Параметры:
//   СобытиеВторогоУровня - Строка - имя события, добавляемое через точку к имени события по умолчанию.
//
// Возвращаемое значение:
//   Строка - Обработка запросов XDTO или Обработка запросов XDTO.<ИмяСобытияВторогоУровня>.
//
Функция ИмяСобытияЖурналаРегистрации(СобытиеВторогоУровня = "") Экспорт
	
	Если СобытиеВторогоУровня = "" Тогда
		Возврат НСтр("ru = 'Обработка запросов XDTO'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат СтрШаблон("%1.%2",
			НСтр("ru = 'Обработка запросов XDTO'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СобытиеВторогоУровня);
	КонецЕсли;
	
КонецФункции

// Конструктор структуры для загрузки объекта ДО из входящих данных.
//
// Параметры:
//   ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//   ПравилоЗагрузкиДанных - СправочникСсылка.ПравилаЗагрузкиДанныхВДО - правило загрузки данных.
//   Файлы - Массив из ОбъектXDTO, Неопределено - список файлов объекта ДО.
//   Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//
// Возвращаемое значение:
//   Структура:
//     * ТипИсточника - Строка
//     * ВходящиеДанные - ОбъектXDTO
//     * ПравилоЗагрузки - СправочникСсылка.ПравилаЗагрузкиДанныхВДО
//     * Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//     * Файлы - Массив из ОбъектXDTO
//     * ВнешнийОбъект - Структура:
//       ** ID - Строка
//       ** Тип - Строка
//
Функция ИсточникВходящиеДанные(ВходящиеДанные, ПравилоЗагрузкиДанных, Файлы = Неопределено, Обновление = Ложь) Экспорт
	
	ИсточникДанных = Новый Структура("ТипИсточника", "ВходящиеДанные");
	ИсточникДанных.Вставить("ВходящиеДанные", ВходящиеДанные);
	ИсточникДанных.Вставить("ПравилоЗагрузки", ПравилоЗагрузкиДанных);
	ИсточникДанных.Вставить("Обновление", Обновление);
	ИсточникДанных.Вставить("Файлы", ?(Файлы = Неопределено, Новый Массив, Файлы));
	ИсточникДанных.Вставить("ВнешнийОбъект", Новый Структура("ID, Тип", "", ""));
	
	Возврат ИсточникДанных;
	
КонецФункции

// Конструктор структуры для загрузки объекта ДО из объекта XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO, являющийся источником данных.
//   ТипXDTOОбъекта - Строка - тип объекта XDTO.
//
// Возвращаемое значение:
//   Структура:
//     * ТипИсточника - Строка
//     * ОбъектXDTO - ОбъектXDTO
//     * ТипXDTOОбъекта - Строка
//
Функция ИсточникОбъектXDTO(ОбъектXDTO, ТипXDTOОбъекта) Экспорт
	
	ИсточникДанных = Новый Структура("ТипИсточника, ОбъектXDTO, ТипXDTOОбъекта",
		"ОбъектXDTO",
		ОбъектXDTO,
		ТипXDTOОбъекта);
	
	Возврат ИсточникДанных;
	
КонецФункции

// Находит подходящий объект и возвращает ссылку на него.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект требуемого типа.
//   ПолноеИмяТипаОбъектаДО - Строка - имя типа объекта.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на найденный объект Документооборота.
//   Неопределено - если объект не найден.
//
Функция НайтиВнешнийОбъект(ОбъектXDTO, ПолноеИмяТипаОбъектаДО = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяТипаXDTO = СтрЗаменить(ОбъектXDTO.Тип(), "{http://www.1c.ru/dm}", "");
	СоответствующееИмяТипаОбъектаДО = "";
	ПолучитьТипДОПоТипуXDTO(ИмяТипаXDTO, СоответствующееИмяТипаОбъектаДО, Ложь);
	
	Если ПолноеИмяТипаОбъектаДО = Неопределено Тогда
		// Мы не знаем какой объект ДО мы хотим найти или создать.
		// Определим тип объекта ДО, исходя из типа входящих данных в ОбъектXDTO.
		ПолноеИмяТипаОбъектаДО = СоответствующееИмяТипаОбъектаДО;
	Иначе
		// Мы заранее знаем какой тип объекта ДО хотим найти или создать.
		// Но входящие данные в ОбъектXDTO могут быть произвольного типа, например DMObject.
		
		МассивТиповРеквизитаДО = СтрРазделить(ПолноеИмяТипаОбъектаДО, ",");
		Если МассивТиповРеквизитаДО.Количество() = 1 Тогда
			ПолноеИмяТипаОбъектаДО = МассивТиповРеквизитаДО[0];
		ИначеЕсли МассивТиповРеквизитаДО.Найти(СоответствующееИмяТипаОбъектаДО) <> Неопределено Тогда
			ПолноеИмяТипаОбъектаДО = СоответствующееИмяТипаОбъектаДО;
		Иначе
			ПолноеИмяТипаОбъектаДО = МассивТиповРеквизитаДО[0];
		КонецЕсли;
		
		ИмяТипаXDTO = ПолучитьТипXDTOПоТипуДО(ПолноеИмяТипаОбъектаДО);
	КонецЕсли;
	
	// Синхронизация по идентификатору объекта ИС.
	Ссылка = СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, ПолноеИмяТипаОбъектаДО);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	// Стандартный поиск.
	Возврат НайтиОбъектДОПоСтандартнымПолямПоиска(ОбъектXDTO, ИмяТипаXDTO, ПолноеИмяТипаОбъектаДО);
	
КонецФункции

// Ищет подходящий объект Документооборота по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO соответствующего типа.
//   ТипXDTOОбъекта - Строка - имя типа XDTO объекта, который требуется найти.
//   ПолноеИмяТипаОбъектаДО - Строка - имя типа объекта ДО.
//   Владелец - СправочникСсылка - владелец объекта, который требуется найти.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиОбъектДОПоСтандартнымПолямПоиска(ОбъектXDTO, ТипXDTOОбъекта, ПолноеИмяТипаОбъектаДО,
		Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ОбработкаЗапросовXDTOПереопределяемый.ПриПоискеОбъектаДОПоСтандартнымПолямПоиска(
		ОбъектXDTO,
		ТипXDTOОбъекта,
		ПолноеИмяТипаОбъектаДО,
		Владелец,
		Результат);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипXDTOОбъекта = "DMDocument" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиДокумент(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeeting" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиМероприятие(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCorrespondent" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиКонтрагента(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMDocumentType" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиВидДокумента(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMDocumentFolder" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиПапкуДокументов(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeetingType" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиВидМероприятия(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeetingMinutesItem" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиПунктПротоколаМероприятия(ОбъектXDTO, Владелец);
		
	ИначеЕсли ТипXDTOОбъекта = "DMContactPerson" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиКонтактноеЛицо(ОбъектXDTO, Владелец);
		
	ИначеЕсли ТипXDTOОбъекта = "DMContactInformationKind" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиВидКонтактнойИнформации(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMOrganization" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиОрганизацию(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMSubdivision" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиПодразделение(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMPrivatePerson" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиФизическоеЛицо(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMUser" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиПользователя(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMEmployee" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиСотрудника(ОбъектXDTO, Владелец);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCurrency" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиВалюту(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMBank" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиБанк(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMBankAccount" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиБанковскийСчет(ОбъектXDTO, Владелец);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCashFlowItem" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиСтатьюДвиженияДенежныхСредств(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCountry" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиСтрану(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMVATRateUniversal" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиСтавкуНДС(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMProduct" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиНоменклатуру(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeasurementUnit" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиЕдиницуИзмерения(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCaseFilesListSections" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиРазделНоменклатурыДел(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCaseFilesCatalog" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиНоменклатуруДел(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCaseFilesDossiers" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиДелоХраненияДокументов(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMDocumentTopic" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиТематикуДокументов(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMIncomingElectronicDocument" Или ТипXDTOОбъекта = "DMOutgoingElectronicDocument" Тогда
		Возврат ОбработкаЗапросовXDTOДокументы.НайтиДокументЭДО(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMFile" Тогда
		Возврат ОбработкаЗапросовXDTOФайлы.НайтиФайл(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMFileVersion" Тогда
		Возврат ОбработкаЗапросовXDTOФайлы.НайтиВерсиюФайла(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMActionApproval"
			Или ТипXDTOОбъекта = "DMActionPerformance"
			Или ТипXDTOОбъекта = "DMActionExamination"
			Или ТипXDTOОбъекта = "DMActionSigning"
			Или ТипXDTOОбъекта = "DMActionRegistration"
			Или ТипXDTOОбъекта = "DMActionConfirmation" Тогда
		Возврат ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.НайтиДействие(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMObjectProcessing" Тогда
		Возврат ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.НайтиОбработкуОбъекта(ОбъектXDTO, Владелец);
		
	ИначеЕсли ТипXDTOОбъекта = "DMTaskAction" Тогда
		Возврат ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.НайтиЗадачу(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCompleteRole" Тогда
		Возврат ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.НайтиПолнуюРоль(ОбъектXDTO);
		
	ИначеЕсли ТипXDTOОбъекта = "DMBusinessProcessExecutorRole" Тогда
		Возврат ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.НайтиРольИсполнителя(ОбъектXDTO);
		
	ИначеЕсли ОбъектXDTO.Тип().БазовыйТип = ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject")
			Или ОбъектXDTO.Тип() = ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяТипаОбъектаДО);
		Если ЕстьНаименование(ОбъектМетаданных, ПолноеИмяТипаОбъектаДО) Тогда
			Наименование = "";
			ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяТипаОбъектаДО);
			Если Менеджер = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				Возврат Менеджер.НайтиПоНаименованию(Наименование, Истина);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Выполняет дополнительную обработку объектов Документооборота после записи.
//
// Параметры:
//   ОбъектДО - СправочникОбъект - объект Документооборота, источник данных.
//   ИсточникДанных - Структура - источник данных:
//     * ТипИсточника - Строка - принимает значения "ОбъектXDTO" или "ВходящиеДанные", в зависимости от типа источника.
//     * ОбъектXDTO - ОбъектXDTO - объект XDTO, потомок DMObject. Источник данных.
//     * ТипXDTOОбъекта - Строка - имя типа XDTO объекта, из которого требуется заполнить объект ДО.
//     * ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//     * ПравилоЗагрузки - СправочникОбъект.ПравилаЗагрузкиДанныхВДО - правило загрузки.
//     * Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//
Процедура ОбработатьОбъектДОПослеЗаписи(ОбъектДО, ИсточникДанных) Экспорт
	
	Если ТипЗнч(ОбъектДО) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
		ОбработкаЗапросовXDTOДокументы.ОбработатьДокументПослеЗаписи(ОбъектДО, ИсточникДанных);
		
	ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникОбъект.Мероприятия") Тогда
		ОбработкаЗапросовXDTOДокументы.ОбработатьМероприятиеПослеЗаписи(ОбъектДО, ИсточникДанных);
		
	ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникОбъект.Контрагенты") Тогда
		ОбработкаЗапросовXDTOДокументы.ОбработатьКонтрагентаПослеЗаписи(ОбъектДО, ИсточникДанных);
		
	ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникОбъект.Файлы") Тогда
		ОбработкаЗапросовXDTOФайлы.ОбработатьФайлПослеЗаписи(ОбъектДО, ИсточникДанных);
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействие(ОбъектДО.Ссылка) Тогда
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ОбработатьДействиеПослеЗаписи(ОбъектДО, ИсточникДанных);
		
	ИначеЕсли ИсточникДанных.ТипИсточника = "ОбъектXDTO" Тогда
		
		Если ИсточникДанных.ТипXDTOОбъекта = "DMDocumentType" Тогда
			ОбработкаЗапросовXDTOДокументы.ЗаписатьНастройкиАвтонумерацииВидаДокумента(
				ИсточникДанных.ОбъектXDTO,
				ОбъектДО);
			
		ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникОбъект.Сотрудники") Тогда
			// Обновим права доступа
			Если ОбъектДО.ДополнительныеСвойства.Свойство("ЭтоНовый") И ОбъектДО.ДополнительныеСвойства.ЭтоНовый Тогда
				Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ГрифыДоступа.Ссылка КАК ГрифДоступа
					|ИЗ
					|	Справочник.ГрифыДоступа.Доступ КАК ГрифыДоступа
					|ГДЕ
					|	ГрифыДоступа.Участник = ЗНАЧЕНИЕ(Справочник.РабочиеГруппы.ВсеПользователи)
					|	И НЕ ГрифыДоступа.Ссылка.ПометкаУдаления");
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ТаблицаДескрипторов = ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(Выборка.ГрифДоступа);
					Для Каждого СтрокаДескриптора Из ТаблицаДескрипторов Цикл
						// Немедленный расчет прав без обновления зависимых прав.
						Справочники.ДескрипторыДоступаОбъектов.РассчитатьПрава(СтрокаДескриптора.Дескриптор);
						// Постановка в очередь для расчета прав зависимых объектов.
						Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(СтрокаДескриптора.Дескриптор);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Если ОбъектДО.ДополнительныеСвойства.Свойство("Подразделение") Тогда
				Подразделение = НайтиВнешнийОбъект(ОбъектДО.ДополнительныеСвойства.Подразделение);
				Если ЗначениеЗаполнено(Подразделение) Тогда
					РуководительXDTO = НайтиВнешнийОбъект(ОбъектДО.ДополнительныеСвойства.Подразделение.head);
					Если ЗначениеЗаполнено(РуководительXDTO)
							И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								Подразделение, "Руководитель") <> РуководительXDTO Тогда
						ПодразделениеОбъект = Подразделение.ПолучитьОбъект();
						ПодразделениеОбъект.Руководитель = РуководительXDTO;
						ПодразделениеОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Добавим связь с пользователем
			Пользователь = Неопределено;
			Если ПроверитьТип(ИсточникДанных.ОбъектXDTO, "DMEmployee")
					И СвойствоУстановлено(ИсточникДанных.ОбъектXDTO, "user") Тогда
				Пользователь = НайтиВнешнийОбъект(ИсточникДанных.ОбъектXDTO.user);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Пользователь) Тогда
				Пользователь = НайтиВнешнийОбъект(ИсточникДанных.ОбъектXDTO, "Справочник.Пользователи");
			КонецЕсли;
			Если ЗначениеЗаполнено(Пользователь) Тогда
				РегистрыСведений.СотрудникиПользователей.ДобавитьЗапись(Пользователь, ОбъектДО.Ссылка);
			КонецЕсли;
			
			// Установим признак "Основной"
			Если ЗначениеЗаполнено(ОбъектДО.Владелец)
					И СвойствоУстановлено(ИсточникДанных.ОбъектXDTO, "mainEmployee")
					И ИсточникДанных.ОбъектXDTO.mainEmployee = Истина Тогда
				РегистрыСведений.ОсновныеСотрудники.УстановитьОсновногоСотрудника(ОбъектДО.Владелец, ОбъектДО.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает описание дополнительных реквизитов объекта ДО.
//
// Параметры:
//   ОбъектДО - Произвольный - владелец дополнительных реквизитов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описание реквизитов, с колонками:
//     * Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
//     * Значение - Характеристика.ДополнительныеРеквизитыИСведения
//     * ТипРеквизита - ОписаниеТипов
//     * ЗаполнятьОбязательно - Булево
//
Функция ОписаниеДополнительныхРеквизитовОбъектаДО(Знач ОбъектДО) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектДО)) Тогда
		ОбъектДОСсылка = ОбъектДО;
		ОбъектДО = ОбъектДОСсылка.ПолучитьОбъект();
	Иначе
		ОбъектДОСсылка = ОбъектДО.Ссылка;
	КонецЕсли;
	
	// Для шаблонов - отдельная упрощенная выборка из табличной части.
	Если ТипЗнч(ОбъектДОСсылка) = Тип("СправочникСсылка.ШаблоныДокументов") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДополнительныеРеквизиты.Свойство КАК Свойство,
			|	ДополнительныеРеквизиты.Значение КАК Значение,
			|	ДополнительныеРеквизиты.ТекстоваяСтрока КАК ТекстоваяСтрока,
			|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипРеквизита
			|ИЗ
			|	Справочник.ШаблоныДокументов.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
			|ГДЕ
			|	ДополнительныеРеквизиты.Ссылка = &Ссылка
			|	И НЕ ДополнительныеРеквизиты.Свойство.ПометкаУдаления");
		Запрос.УстановитьПараметр("Ссылка", ОбъектДОСсылка);
		
		УстановитьПривилегированныйРежим(Истина);
		
		Результат = Запрос.Выполнить().Выгрузить();
		РезультатСТекстовымиСтроками = Результат.Скопировать(,"Свойство, Значение, ТипРеквизита");
		ИндексСтроки = 0;
		Для Каждого ЗначениеСвойства Из Результат Цикл
			Если Не ПустаяСтрока(ЗначениеСвойства.ТекстоваяСтрока) Тогда
				РезультатСТекстовымиСтроками[ИндексСтроки].Значение = ЗначениеСвойства.ТекстоваяСтрока;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		
		РезультатСТекстовымиСтроками.Колонки.Добавить("ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"));
		Возврат РезультатСТекстовымиСтроками;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Свойство");
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("ТипРеквизита");
	Результат.Колонки.Добавить("ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("УсловиеВидимости");
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ОбъектДО);
	
	ДополнительныеСвойстваОбъекта = Новый ТаблицаЗначений;
	ДополнительныеСвойстваОбъекта.Колонки.Добавить("Свойство");
	ДополнительныеСвойстваОбъекта.Колонки.Добавить("Значение");
	
	Попытка
		ДополнительныеСвойстваОбъекта = ОбъектДО.ДополнительныеРеквизиты.Выгрузить();
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	СписокСвойствОбъекта = Новый СписокЗначений;
	СписокСвойствОбъекта.ЗагрузитьЗначения(НаборСвойств.ВыгрузитьКолонку("Набор"));
	
	СоставДополнительныхРеквизитов = ОбработкаЗапросовXDTOПовтИсп.СоставДополнительныхРеквизитов(
		ЗначениеВСтрокуВнутр(ДополнительныеСвойстваОбъекта),
		ЗначениеВСтрокуВнутр(СписокСвойствОбъекта),
		Перечисления.ВидыСвойств.ДополнительныеРеквизиты);
	
	ПроверятьЗависимости =
		Не СоставДополнительныхРеквизитов.Колонки.Найти("ЗависимостиДополнительныхРеквизитов") = Неопределено;
	
	Для Каждого СтрокаРеквизита Из СоставДополнительныхРеквизитов Цикл
		
		ОписаниеРеквизита = Результат.Добавить();
		ОписаниеРеквизита.Свойство = СтрокаРеквизита.Свойство;
		ОписаниеРеквизита.ТипРеквизита = СтрокаРеквизита.ТипЗначения;
		ОписаниеРеквизита.Значение = СтрокаРеквизита.Значение;
		
		ОписаниеРеквизита.ЗаполнятьОбязательно = СтрокаРеквизита.ЗаполнятьОбязательно;
		Если ПроверятьЗависимости Тогда
			Для Каждого Зависимость Из СтрокаРеквизита.ЗависимостиДополнительныхРеквизитов Цикл
				ОписаниеРеквизита.ЗаполнятьОбязательно =
					ОписаниеРеквизита.ЗаполнятьОбязательно И Не Зависимость.ЗависимоеСвойство = "ЗаполнятьОбязательно";
				
				Если СтрокаРеквизита.Удалено
					Или Зависимость.ЗависимоеСвойство <> "Виден"
					Или Зависимость.НаборСвойств <> СтрокаРеквизита.Набор Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(Зависимость.Реквизит) = Тип("Строка") Тогда
					Если СтрНачинаетсяС(Зависимость.Реквизит, "ДопРеквизитыОтбораДляУсловий") Тогда
						ПутьКРеквизиту = "Параметры.Форма." + Зависимость.Реквизит;
					Иначе
						ПутьКРеквизиту = "Параметры.ОписаниеОбъекта." + Зависимость.Реквизит;
					КонецЕсли;
				Иначе
					ОписаниеДополнительногоРеквизита = СоставДополнительныхРеквизитов.Найти(Зависимость.Реквизит, "Свойство");
					Если ОписаниеДополнительногоРеквизита = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ПутьКРеквизиту = "Параметры.Форма." + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеДополнительногоРеквизита.Свойство, "Имя");
				КонецЕсли;
				
				УправлениеСвойствамиСлужебный.ПостроитьУсловияЗависимостей(ОписаниеРеквизита, ПутьКРеквизиту, Зависимость);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Создает объект DMError.
//
// Параметры:
//   Предмет - Строка - тема сообщения об ошибке.
//   Описание - Строка - текстовое описание ошибки, а также отладочная информация.
//
// Возвращаемое значение:
//   ОбъектXDTO
//
Функция ОписаниеОшибкиXDTO(Предмет = "", Описание = "") Экспорт
	
	Ошибка = СоздатьОбъект("DMError");
	Ошибка.subject = Предмет;
	Ошибка.description = Описание;
	
	Возврат Ошибка;
	
КонецФункции

// Возвращает UUID по ссылке на объект Документооборота.
//
// Параметры:
//   Ссылка - ЛюбаяСсылка - ссылка на объект Документооборота.
//
// Возвращаемое значение:
//   Строка - строковое представление UUID или имя значения перечисления.
//
Функция ПолучитьIDПоСсылке(Ссылка) Экспорт
	
	Если Ссылка.Пустая() Тогда
		Возврат "";
	КонецЕсли;
	
	Тип = ТипЗнч(Ссылка);
	Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат ОбщегоНазначения.ИмяЗначенияПеречисления(Ссылка);
	Иначе
		Возврат Строка(Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
КонецФункции

// Возвращает ObjectID по ссылке на объект Документооборота.
//
// Параметры:
//   Ссылка - ЛюбаяСсылка - ссылка на объект Документооборота.
//   ТолькоОбязательныеПоля - Булево - заполнять только обязательные поля.
//   Представление - Строка - представление объекта.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMObjectID.
//
Функция ПолучитьObjectIDПоСсылке(Ссылка, ТолькоОбязательныеПоля = Ложь, Представление = Неопределено) Экспорт
	
	objectID = СоздатьObjectID(ПолучитьIDПоСсылке(Ссылка), ПолучитьИмяТипаСсылки(Ссылка));
	
	Если ТолькоОбязательныеПоля Тогда
		Возврат objectID;
	КонецЕсли;
	
	Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		objectID.navigationRef = ПолучитьНавигационнуюСсылку(Ссылка);
	Иначе
		objectID.navigationRef = "";
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		objectID.presentation = Представление;
	ИначеЕсли Ссылка.Пустая() Тогда
		objectID.presentation = Ссылка.Метаданные().Синоним;
	Иначе
		objectID.presentation = Строка(Ссылка);
	КонецЕсли;
	
	Возврат objectID;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ОбъектДО - СправочникОбъект - объект Документооборота, источник данных.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO соответствующего типа.
//   ТипXDTOОбъекта - Строка - имя типа XDTO объекта, который требуется получить.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - система, для которой предназначен объект.
//   ТолькоОсновныеРеквизиты - Булево - объект XDTO будет заполнен всеми реквизитами объекта ДО, без дополнительных
//     запросов к базе.
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
Процедура ПолучитьДанныеОбъектаДО(ОбъектДО, ОбъектXDTO, ТипXDTOОбъекта, НаборКолонок,
		ИнтегрированнаяСистема = Неопределено, ТолькоОсновныеРеквизиты = Ложь, КешДанных = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ОбработкаЗапросовXDTOПереопределяемый.ПриПолученииДанныхОбъектаДО(
		ОбъектДО,
		ОбъектXDTO,
		ТипXDTOОбъекта,
		НаборКолонок,
		ИнтегрированнаяСистема,
		ТолькоОсновныеРеквизиты,
		КешДанных,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипXDTOОбъекта = "DMDocument" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеДокумента(
			ОбъектДО,
			ОбъектXDTO,
			НаборКолонок,
			ИнтегрированнаяСистема,
			ТолькоОсновныеРеквизиты);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeeting" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеМероприятия(
			ОбъектДО,
			ОбъектXDTO,
			НаборКолонок,
			ИнтегрированнаяСистема,
			ТолькоОсновныеРеквизиты);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCorrespondent" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеКонтрагента(
			ОбъектДО,
			ОбъектXDTO,
			НаборКолонок,
			ИнтегрированнаяСистема,
			ТолькоОсновныеРеквизиты);
		
	ИначеЕсли ТипXDTOОбъекта = "DMDocumentType" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеВидаДокумента(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMDocumentFolder" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеПапкиДокументов(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeetingType" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеВидаМероприятия(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeetingMinutesItem" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеПунктаПротоколаМероприятия(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMContactPerson" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеКонтактногоЛица(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMContactInformationKind" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеВидаКонтактнойИнформации(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMOrganization" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеОрганизации(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMSubdivision" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеПодразделения(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMPrivatePerson" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеФизическогоЛица(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMUser" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеПользователя(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMEmployee" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеСотрудника(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCurrency" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеВалюты(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMBank" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеБанка(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMBankAccount" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеБанковскогоСчета(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCashFlowItem" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеСтатьиДвиженияДенежныхСредств(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCountry" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеСтраны(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMVATRateUniversal" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеСтавкиНДС(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMProduct" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеНоменклатуры(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMMeasurementUnit" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеЕдиницыИзмерения(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCaseFilesListSections" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеРазделаНоменклатурыДел(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCaseFilesCatalog" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеНоменклатурыДел(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCaseFilesDossiers" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеДелаХраненияДокументов(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMDocumentTopic" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеТематикиДокументов(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMIncomingElectronicDocument" Или ТипXDTOОбъекта = "DMOutgoingElectronicDocument" Тогда
		ОбработкаЗапросовXDTOДокументы.ПолучитьДанныеДокументаЭДО(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMFile" Тогда
		ОбработкаЗапросовXDTOФайлы.ПолучитьДанныеФайла(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMFileVersion" Тогда
		ОбработкаЗапросовXDTOФайлы.ПолучитьДанныеВерсииФайла(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMActionApproval"
			Или ТипXDTOОбъекта = "DMActionPerformance"
			Или ТипXDTOОбъекта = "DMActionExamination"
			Или ТипXDTOОбъекта = "DMActionSigning"
			Или ТипXDTOОбъекта = "DMActionRegistration"
			Или ТипXDTOОбъекта = "DMActionConfirmation" Тогда
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьДанныеДействия(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMObjectProcessing" Тогда
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьДанныеОбработкиОбъекта(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMTaskAction" Тогда
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьДанныеЗадачи(
			ОбъектДО,
			ОбъектXDTO,
			НаборКолонок,
			КешДанных);
		
	ИначеЕсли ТипXDTOОбъекта = "DMCompleteRole" Тогда
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьДанныеПолнойРоли(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ТипXDTOОбъекта = "DMBusinessProcessExecutorRole" Тогда
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ПолучитьДанныеРолиИсполнителя(ОбъектДО, ОбъектXDTO, НаборКолонок);
		
	ИначеЕсли ОбъектXDTO.Тип().БазовыйТип = ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject")
			Или ОбъектXDTO.Тип() = ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject") Тогда
		ОбъектМетаданных = ОбъектДО.Ссылка.Метаданные();
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
			ОбъектДО,
			Новый Структура,
			ОбъектXDTO,
			НаборКолонок,
			ЕстьНаименование(ОбъектМетаданных, ПолноеИмя));
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Попытка получить данные для неизвестного типа XDTO: %1'"), ОбъектXDTO.Тип());
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение перечисления объекта XDTO.
//
// Параметры:
//   ЗначениеПеречисленияДО - ЛюбаяСсылка - значение перечисления Документооборота,
//     для которого требуется вернуть соответствие.
//
// Возвращаемое значение:
//   Строка - значение перечисления объекта XDTO.
//
Функция ПолучитьЗначениеПеречисленияXDTO(ЗначениеПеречисленияДО) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗначениеПеречисленияДО) Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаСоответствия = ОбработкаЗапросовXDTOПовтИсп.СоответствиеПеречислений();
	Строка = ТаблицаСоответствия.Найти(ЗначениеПеречисленияДО, "ЗначениеПеречисленияДО");
	
	Если Строка = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не удалось подобрать соответствие для значения перечисления: %1'"), ЗначениеПеречисленияДО);
		
	Иначе
		Возврат Строка["ЗначениеПеречисленияXDTO"];
		
	КонецЕсли;
	
КонецФункции

// Возвращает значение перечисления Документооборота.
//
// Параметры:
//   ИмяПеречисленияXDTO - Строка - имя типа перечисления XDTO,
//     для которого требуется вернуть соответствие.
//   ЗначениеПеречисленияXDTO - Строка - значение перечисления перечисления объекта XDTO,
//     для которого требуется вернуть соответствие.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - значение перечисления Документооборота.
//
Функция ПолучитьЗначениеПеречисленияДО(ИмяПеречисленияXDTO, ЗначениеПеречисленияXDTO) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяПеречисленияXDTO) Тогда
		ВызватьИсключение НСтр("ru = 'Не задано имя перечисления XDTO'")
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеПеречисленияXDTO) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСоответствия = ОбработкаЗапросовXDTOПовтИсп.СоответствиеПеречислений();
	
	Для Каждого Строка Из ТаблицаСоответствия Цикл
		Если ВРег(ИмяПеречисленияXDTO) = ВРег(Строка.ИмяПеречисленияXDTO)
				И ВРег(ЗначениеПеречисленияXDTO) = ВРег(Строка.ЗначениеПеречисленияXDTO) Тогда
			Возврат Строка.ЗначениеПеречисленияДО;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтрШаблон(
		НСтр("ru = 'Не удалось подобрать соответствие для значения ""%1"" перечисления ""%2""'"),
			ЗначениеПеречисленияXDTO,
			ИмяПеречисленияXDTO);
	
КонецФункции

// Возвращает имя типа XDTO по ссылке на объект Документооборота.
//
// Параметры:
//   Ссылка - ЛюбаяСсылка - ссылка на объект Документооборота.
//   ВызыватьИсключение - Булево - требуется вызов исключения в случае если соответствующее имя типа XDTO не найдено.
//
// Возвращаемое значение:
//   Строка - имя типа XDTO.
//   Неопределено - если соответствующее имя типа XDTO не найдено.
//
Функция ПолучитьИмяТипаСсылки(Ссылка, ВызыватьИсключение = Истина) Экспорт
	
	ИмяТипа = Ссылка.Метаданные().ПолноеИмя();
	
	Возврат ПолучитьТипXDTOПоТипуДО(ИмяТипа, ВызыватьИсключение);
	
КонецФункции

// Получает метаданные объекта 1С:Документооборот по запросу DMGetObjectMetadataRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetObjectMetadataRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectMetadataResponse или DMError.
//
Функция ПолучитьМетаданныеОбъекта(Сообщение) Экспорт
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetObjectMetadataResponse");
		
		ТипОбъектаДО = "";
		ПолучитьТипДОПоТипуXDTO(Сообщение.objectType.xdtoClassName, ТипОбъектаДО);
		
		РеквизитыОбъектаДО = Справочники.ПравилаЗагрузкиДанныхВДО.РеквизитыОбъектаДО(ТипОбъектаДО,, Истина);
		
		ТабличныеЧасти = Новый Соответствие;
		
		Для Каждого СтрокаРеквизитОбъекта Из РеквизитыОбъектаДО Цикл
			
			Если СтрокаРеквизитОбъекта.ЭтоТаблица Тогда
				Таблица = СоздатьОбъект("DMMetadataTabularSection");
				Таблица.name = СтрокаРеквизитОбъекта.Имя;
				Таблица.synonym = СтрокаРеквизитОбъекта.Представление;
				ТабличныеЧасти.Вставить(СтрокаРеквизитОбъекта.Имя, Таблица);
				Продолжить;
			КонецЕсли;
			
			Реквизит = СоздатьОбъект("DMMetadataAttribute");
			Реквизит.name = СтрокаРеквизитОбъекта.Имя;
			Реквизит.synonym = СтрокаРеквизитОбъекта.Представление;
			
			Если ЗначениеЗаполнено(СтрокаРеквизитОбъекта.Таблица) Тогда
				ТабличныеЧасти[СтрокаРеквизитОбъекта.Таблица].attributes.Добавить(Реквизит);
			Иначе
				Ответ.attributes.Добавить(Реквизит);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			Ответ.tabularSections.Добавить(ТабличнаяЧасть.Значение);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении метаданных объекта ДО'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Получает набор дополнительных реквизитов и их значений для объекта Документооборота.
//
// Параметры:
//   ОбъектДО - Произвольный - объект Документооборота.
//   ОбъектXDTO - ОбъектXDTO - связанный объект XDTO, чье свойство additionalProperties подлежит заполнению.
//   ТолькоОсновныеРеквизиты - Булево - не заполнять реквизиты значений, являющихся ссылочными объектами.
//
Процедура ПолучитьНаборДополнительныхРеквизитовОбъектаДО(ОбъектДО, ОбъектXDTO, ТолькоОсновныеРеквизиты = Ложь) Экспорт
	
	ОписаниеДополнительныхРеквизитовОбъектаДО = ОписаниеДополнительныхРеквизитовОбъектаДО(ОбъектДО);
	Для Каждого ОписаниеРеквизита Из ОписаниеДополнительныхРеквизитовОбъектаДО Цикл
		
		ДополнительноеСвойство = СоздатьОбъект("DMAdditionalProperty");
		ДополнительноеСвойство.name = ОписаниеРеквизита.Свойство.Заголовок;
		ДополнительноеСвойство.objectId = ПолучитьObjectIDПоСсылке(ОписаниеРеквизита.Свойство, Истина);
		ДополнительноеСвойство.mandatory = ОписаниеРеквизита.ЗаполнятьОбязательно;
		
		Для Каждого ТипРеквизита Из ОписаниеРеквизита.ТипРеквизита.Типы() Цикл
			
			ОбъектТипXDTO = СоздатьОбъект("DMType");
			
			ТипXDTO = ПолучитьТипXDTOПоТипуДО(ТипРеквизита, Ложь);
			Если ТипXDTO = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектТипXDTO.xdtoClassName = ТипXDTO;
			
			Если ТипРеквизита = Тип("Дата") Тогда
				ОбъектТипXDTO.presentation = НСтр("ru = 'Дата'");
				
			ИначеЕсли ТипРеквизита = Тип("Число") Тогда
				ОбъектТипXDTO.presentation = НСтр("ru = 'Число'");
				
			ИначеЕсли ТипРеквизита = Тип("Строка") Тогда
				ОбъектТипXDTO.presentation = НСтр("ru = 'Строка'");
				
			ИначеЕсли ТипРеквизита = Тип("Булево") Тогда
				ОбъектТипXDTO.presentation = НСтр("ru = 'Логическое значение'");
				
			Иначе
				ОбъектТипXDTO.presentation = Метаданные.НайтиПоТипу(ТипРеквизита).ПредставлениеОбъекта;
				
			КонецЕсли;
			
			ДополнительноеСвойство.propertyValueTypes.Добавить(ОбъектТипXDTO);
			
		КонецЦикла;
		
		ТолькоСтроковоеПредставление = Ложь;
		Если ДополнительноеСвойство.propertyValueTypes.Количество() = 0 Тогда
			// Тип дополнительного свойства не формализован.
			// Будем передавать только строковое представление значения.
			ТолькоСтроковоеПредставление = Истина;
			ОбъектТипXDTO = СоздатьОбъект("DMType");
			ОбъектТипXDTO.xdtoClassName = "string";
			ОбъектТипXDTO.presentation = НСтр("ru = 'Строка'");
			ДополнительноеСвойство.propertyValueTypes.Добавить(ОбъектТипXDTO);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеРеквизита.Значение) Тогда
			Если ТолькоСтроковоеПредставление Тогда
				
				ДополнительноеСвойство.propertySimpleValue = Строка(ОписаниеРеквизита.Значение);
				
			ИначеЕсли ТипЗнч(ОписаниеРеквизита.Значение) = Тип("Дата")
					Или ТипЗнч(ОписаниеРеквизита.Значение) = Тип("Число")
					Или ТипЗнч(ОписаниеРеквизита.Значение) = Тип("Строка")
					Или ТипЗнч(ОписаниеРеквизита.Значение) = Тип("Булево") Тогда
				
				ДополнительноеСвойство.propertySimpleValue = ОписаниеРеквизита.Значение;
				
			Иначе
				
				ИмяТипа = ОписаниеРеквизита.Значение.Метаданные().ПолноеИмя();
				Если ПолучитьТипXDTOПоТипуДО(ИмяТипа, Ложь) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТолькоОсновныеРеквизиты Тогда
					ОбъектЗначениеXDTO = СоздатьОбъект("DMObject");
					ОбъектЗначениеXDTO.name = Строка(ОписаниеРеквизита.Значение);
					ОбъектЗначениеXDTO.objectId = ПолучитьObjectIDПоСсылке(ОписаниеРеквизита.Значение);
				Иначе
					ОбъектЗначениеXDTO = ПолучитьОбъектXDTOПоСуществующимДаннымДО(
						ОписаниеРеквизита.Значение,
						Неопределено,
						Ложь,,
						Истина);
					Если ПроверитьТип(ОбъектЗначениеXDTO, "DMError") Тогда
						ОбъектЗначениеXDTO = СоздатьОбъект("DMObject");
						ОбъектЗначениеXDTO.name = Строка(ОписаниеРеквизита.Значение);
						ОбъектЗначениеXDTO.objectId = ПолучитьObjectIDПоСсылке(ОписаниеРеквизита.Значение);
					КонецЕсли;
				КонецЕсли;
				
				ДополнительноеСвойство.propertyObjectValue = ОбъектЗначениеXDTO;
				
			КонецЕсли;
		КонецЕсли;
		
		ОбъектXDTO.additionalProperties.Добавить(ДополнительноеСвойство);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает настройки по запросу DMGetSettingsRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetSettingsRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetSettingsResponse или DMError.
//
Функция ПолучитьНастройки(Сообщение) Экспорт
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetSettingsResponse");
		
		Ответ.needExtractText = Не ФайловыеФункции.ИзвлекатьТекстыФайловНаСервере();
		Ответ.useDigitalSignatures = ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи();
		Ответ.useBothDateAndTimeInTasksDueDates = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		ПерсональныеНастройкиУчетаВремени = УчетВремени.ПолучитьПерсональныеНастройкиУчетаВремениСервер();
		Ответ.addActualWorkUponTaskExecution =
			ПерсональныеНастройкиУчетаВремени.ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи;
		Ответ.accountForScannedOriginals = ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
		Ответ.showLockedFilesOnExit = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрограммы",
			"ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",
			Истина);
		Ответ.useAutoFill = ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов");
		Ответ.allowToChangeEndDate = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
		Ответ.htmlViewMessageHead = ОбзорФайловКлиентСервер.ЗаголовокСообщенияВОбластиПредпросмотра();
		Ответ.scannedOriginalExtensionsList =
			ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().СписокРасширенийСканКопийОригиналов;
		Ответ.tasksAvailable = РаботаСЗадачами.ДоступныЗадачиМне();
		Ответ.showPdfBy1C = РаботаСФайламиСлужебныйПовтИсп.ПоказыватьPdfСредствами1С();
		
		РеквизитыГруппировкиЗадачиМне = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Справочники.ГруппировкиЗадач.ЗадачиМне,
			"Исполнитель, ИсполнительРазыменован");
		
		Исполнители = РаботаСЗадачами.РазыменоватьОтборПоУчастнику(
			РеквизитыГруппировкиЗадачиМне.Исполнитель,
			РеквизитыГруппировкиЗадачиМне.ИсполнительРазыменован,
			Истина);
		Для Каждого Исполнитель Из Исполнители Цикл
			ИсполнительXDTO = Неопределено;
			ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.УчастникЗадачXDTO(ИсполнительXDTO, Исполнитель);
			Если ИсполнительXDTO <> Неопределено Тогда
				Ответ.taskPerformers.Добавить(ИсполнительXDTO);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении настроек'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Возвращает объект XDTO типа DMObject по ссылке на существующий объект ДО.
//
// Параметры:
//   Ссылка - ЛюбаяСсылка - объект 1С:Документооборот.
//   ВызыватьИсключение - Булево - требуется вызов исключения в случае возникновения ошибки.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMObject или DMError.
//
Функция ПолучитьНеОписанныйОбъектПоСсылке(Ссылка, ВызыватьИсключение = Истина) Экспорт
	
	Попытка
		
		ОбъектМетаданных = Ссылка.Метаданные();
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Если ЕстьНаименование(ОбъектМетаданных, ПолноеИмя) Тогда
			Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Наименование");
		Иначе
			Наименование = Строка(Ссылка);
		КонецЕсли;
		
		ОбъектXDTO = СоздатьОбъект("DMObject");
		ОбъектXDTO.objectID = СоздатьObjectID("", "");
		ОбъектXDTO.name = Наименование;
		
		ВнешнийОбъект = СоздатьОбъект("ExternalObject");
		
		Если Ссылка.Пустая() Тогда
			ВнешнийОбъект.ID = "";
			ВнешнийОбъект.type = ПолноеИмя;
			ВнешнийОбъект.name = "";
			
		ИначеЕсли Найти(ПолноеИмя, "Перечисление.") > 0 Тогда
			ВнешнийОбъект.ID = ОбщегоНазначения.ИмяЗначенияПеречисления(Ссылка);
			ВнешнийОбъект.type = ПолноеИмя;
			ВнешнийОбъект.name = Наименование;
			
		Иначе
			ВнешнийОбъект.ID = Строка(Ссылка.УникальныйИдентификатор());
			ВнешнийОбъект.type = ПолноеИмя;
			ВнешнийОбъект.name = Наименование;
			
		КонецЕсли;
		
		ОбъектXDTO.externalObject = ВнешнийОбъект;
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка при получении объекта ДО'");
		ТекстОшибки = ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиМассив = Новый Массив;
		ТекстОшибкиМассив.Добавить(СтрШаблон(
			НСтр("ru = 'Ошибка при получении объекта типа %1'"),
			Ссылка.Метаданные().ПолноеИмя()));
		ТекстОшибкиМассив.Добавить(НСтр("ru = 'Текст ошибки:'"));
		ТекстОшибкиМассив.Добавить(ТекстОшибки);
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстОшибки;
		Иначе
			Возврат ОписаниеОшибкиXDTO(ЗаголовокОшибки, СтрСоединить(ТекстОшибкиМассив, Символы.ПС));
		КонецЕсли;
		
	КонецПопытки;
	
КонецФункции

// Возвращает новый объект Документооборота по имени типа XDTO.
//
// Параметры:
//   ИмяТипаXDTO - Строка - имя типа XDTO.
//   ЭтоГруппа - Булево - указывает что требуется создать не элемент справочника, а группу.
//
// Возвращаемое значение:
//   СправочникОбъект
//   ДокументОбъект
//   ЗадачаОбъект
//   БизнесПроцессОбъект
//   ПланВидовХарактеристикОбъект - новый объект Документооборота.
//
Функция ПолучитьНовыйОбъектДОПоТипуXDTO(ИмяТипаXDTO, ЭтоГруппа) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяТипаXDTO) Тогда
		ВызватьИсключение НСтр("ru = 'Попытка получить тип 1С:Документооборота для не заданного типа XDTO'");
	КонецЕсли;
	
	ТаблицаСоответствия = ОбработкаЗапросовXDTOПовтИсп.СоответствиеТипов();
	Строка = ТаблицаСоответствия.Найти(ИмяТипаXDTO, "ИмяXDTO");
	
	Если Строка = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Попытка получить тип 1С:Документооборота для неизвестного типа XDTO: %1'"), ИмяТипаXDTO);
	КонецЕсли;
	
	ОбъектДО = Неопределено;
	
	ИмяТипаДО = Строка["ИмяДО"];
	Если СтрНайти(ИмяТипаДО, "Справочник.") > 0 Тогда
		Если ЭтоГруппа Тогда
			ОбъектДО = Справочники[СтрЗаменить(ИмяТипаДО, "Справочник.", "")].СоздатьГруппу();
		Иначе
			ОбъектДО = Справочники[СтрЗаменить(ИмяТипаДО, "Справочник.", "")].СоздатьЭлемент();
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяТипаДО, "Документ.") > 0 Тогда
		ОбъектДО = Документы[СтрЗаменить(ИмяТипаДО, "Документ.", "")].СоздатьЭлемент();
		
	ИначеЕсли СтрНайти(ИмяТипаДО, "Задача.") > 0 Тогда
		ОбъектДО = Задачи[СтрЗаменить(ИмяТипаДО, "Задача.", "")].СоздатьЭлемент();
		
	ИначеЕсли СтрНайти(ИмяТипаДО, "БизнесПроцесс.") > 0 Тогда
		ОбъектДО = БизнесПроцессы[СтрЗаменить(ИмяТипаДО, "БизнесПроцесс.", "")].СоздатьЭлемент();
		
	ИначеЕсли СтрНайти(ИмяТипаДО, "ПланВидовХарактеристик.") > 0 Тогда
		Если ЭтоГруппа Тогда
			ОбъектДО = ПланыВидовХарактеристик[СтрЗаменить(ИмяТипаДО, "ПланВидовХарактеристик.", "")].СоздатьГруппу();
		Иначе
			ОбъектДО = ПланыВидовХарактеристик[СтрЗаменить(ИмяТипаДО, "ПланВидовХарактеристик.", "")].СоздатьЭлемент();
		КонецЕсли;
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Для типа 1С:Документооборота %1 нельзя создать новый элемент'"), ИмяТипаДО);
		
	КонецЕсли;
	
	Возврат ОбъектДО;
	
КонецФункции

// Получает заполненный объект XDTO, соответствующий объекту Документооборота.
//
// Параметры:
//   ОбъектДО - СправочникОбъект - источник данных.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//   ВызыватьИсключение - Булево - требуется вызов исключения в случае возникновения ошибки.
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - система, для которой предназначен объект.
//   ТолькоОсновныеРеквизиты - Булево - объект XDTO будет заполнен всеми реквизитами объекта ДО, без дополнительных
//     запросов к базе.
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO соответствующего типа или DMError.
//
Функция ПолучитьОбъектXDTOПоСуществующимДаннымДО(ОбъектДО, НаборКолонок, ВызыватьИсключение = Истина,
		ИнтегрированнаяСистема = Неопределено, ТолькоОсновныеРеквизиты = Ложь, КешДанных = Неопределено) Экспорт
	
	Попытка
		
		Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ОбъектДО.Ссылка,, КешДанных).Чтение Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Нет прав на чтение объекта %1'"), ОбъектДО.Ссылка);
		КонецЕсли;
		
		ТипXDTOОбъекта = ПолучитьИмяТипаСсылки(ОбъектДО.Ссылка);
		ОбъектXDTO = СоздатьОбъект(ТипXDTOОбъекта);
		
		ПолучитьДанныеОбъектаДО(
			ОбъектДО,
			ОбъектXDTO,
			ТипXDTOОбъекта,
			НаборКолонок,
			ИнтегрированнаяСистема,
			ТолькоОсновныеРеквизиты,
			КешДанных);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка при получении объекта ДО'");
		ТекстОшибки = ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиМассив = Новый Массив;
		ТекстОшибкиМассив.Добавить(СтрШаблон(НСтр(
				"ru = 'Ошибка при получении объекта XDTO из объекта 1С:Документооборот типа %1'"),
			ТипЗнч(ОбъектДО)));
		ТекстОшибкиМассив.Добавить(НСтр("ru = 'Текст ошибки:'"));
		ТекстОшибкиМассив.Добавить(ТекстОшибки);
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстОшибки;
		Иначе
			Возврат ОписаниеОшибкиXDTO(ЗаголовокОшибки, СтрСоединить(ТекстОшибкиМассив, Символы.ПС));
		КонецЕсли;
		
	КонецПопытки;
	
КонецФункции

// Возвращает описание ошибки.
//
// Параметры:
//   Инфо - ИнформацияОбОшибке - информация об ошибке.
//   ПодробноеПредставление - Булево - требуется подробное представление ошибки.
//
// Возвращаемое значение:
//   Строка - текст детального описания ошибки.
//
Функция ПолучитьОписаниеОшибки(Инфо, ПодробноеПредставление = Истина) Экспорт
	
	Если ПодробноеПредставление Тогда
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
	Иначе
		ПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(Инфо);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Инфо.Описание) И ПустаяСтрока(ПредставлениеОшибки) Тогда
		ПредставлениеОшибки = Инфо.Описание;
	КонецЕсли;
	
	ОписаниеОшибкиМассив = Новый Массив;
	ОписаниеОшибкиМассив.Добавить(ПредставлениеОшибки);
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из Сообщения Цикл
		Если ОписаниеОшибкиМассив.Найти(Сообщение.Текст) = Неопределено
				И СтрНайти(ПредставлениеОшибки, Сообщение.Текст) = 0 Тогда
			ОписаниеОшибкиМассив.Добавить(Сообщение.Текст);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ОписаниеОшибкиМассив, Символы.ПС);
	
КонецФункции

// Возвращает список подпапок по папке-родителю.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetSubFoldersRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetSubFoldersResponse или DMError.
//
Функция ПолучитьПодпапки(Сообщение) Экспорт
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetSubFoldersResponse");
		
		ИдентификаторКорневойПапки = Сообщение.folder.ID;
		Если Сообщение.folder.type = "DMFileFolder" Тогда
			МассивПапок = ОбработкаЗапросовXDTOФайлы.ПолучитьСписокПапок(ИдентификаторКорневойПапки);
			
		ИначеЕсли Сообщение.folder.type = "DMDocumentFolder" Тогда
			МассивПапок = ОбработкаЗапросовXDTOДокументы.ПолучитьСписокПапок(ИдентификаторКорневойПапки);
			
		КонецЕсли;
		
		Для Каждого СтруктураПапки Из МассивПапок Цикл
			ОбъектDMFolder = СоздатьОбъект(Сообщение.folder.type);
			
			ОбъектDMFolder.name = СтруктураПапки.Наименование;
			
			ОбъектDMFolder.objectId = СоздатьObjectID(
				Строка(СтруктураПапки.УникальныйИдентификатор),
				Сообщение.folder.type);
			
			Ответ.folders.Добавить(ОбъектDMFolder);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка папок'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Получает список документов в папке-владельце по запросу DMGetDocumentListByOwnerRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetDocumentListByOwnerRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetDocumentListByOwnerResponse или DMError.
//
Функция ПолучитьСписокДокументовПоВладельцу(Сообщение) Экспорт
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetDocumentListByOwnerResponse");
		
		МассивВладельцев = Новый Массив;
		Для Каждого Владелец Из Сообщение.owners Цикл
			ВладелецДокумента = ПолучитьСсылкуПоObjectID(Владелец.objectId);
			Если Не ЗначениеЗаполнено(ВладелецДокумента) Тогда
				ВызватьИсключение НСтр("ru = 'Объект не найден'");
			КонецЕсли;
			
			МассивВладельцев.Добавить(ВладелецДокумента);
		КонецЦикла;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументыПредприятия.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
			|ГДЕ
			|	НЕ ДокументыПредприятия.ПометкаУдаления
			|	И ДокументыПредприятия.Папка В (&МассивВладельцев)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументыПредприятия.Наименование");
		Запрос.УстановитьПараметр("МассивВладельцев", МассивВладельцев);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОбъектXDTO = СоздатьОбъект("DMDocument");
			ПолучитьДанныеОбъектаДО(
				Выборка.Ссылка.ПолучитьОбъект(),
				ОбъектXDTO,
				"DMDocument",
				Сообщение.columnSet);
			Ответ.documents.Добавить(ОбъектXDTO);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка документов по владельцу'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Добавляет в объект XDTO информацию об электронных подписях объекта Документооборота.
//
// Параметры:
//   ОбъектДО - Произвольный - объект Документооборота, источник данных.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO соответствующего типа.
//
Процедура ПолучитьСписокПодписей(ОбъектДО, ОбъектXDTO) Экспорт
	
	Если ОбъектДО.ПодписанЭП Тогда
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектДО)) Тогда
			ВыборкаЗапроса = РаботаСЭП.ПолучитьЭлектронныеПодписи(ОбъектДО);
		Иначе
			ВыборкаЗапроса = РаботаСЭП.ПолучитьЭлектронныеПодписи(ОбъектДО.Ссылка);
		КонецЕсли;
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ПодписьXDTO = СоздатьОбъект("DMSignature");
			ПодписьXDTO.author = ВыборкаЗапроса.КомуВыданСертификат;
			ПодписьXDTO.date = ВыборкаЗапроса.ДатаПодписи;
			ПодписьXDTO.comment = ВыборкаЗапроса.Комментарий;
			ПодписьXDTO.thumbprint = ВыборкаЗапроса.Отпечаток;
			ПодписьXDTO.signatureFileName = ВыборкаЗапроса.ИмяФайлаПодписи;
			
			ПодписьXDTO.signature = ВыборкаЗапроса.Подпись.Получить();
			ПодписьXDTO.certificate = ВыборкаЗапроса.Сертификат.Получить();
			
			ЗаполнитьСвойствоXDTOИзРеквизита(ПодписьXDTO, "signer", ВыборкаЗапроса.УстановившийПодпись);
			
			ОбъектXDTO.signatures.Добавить(ПодписьXDTO);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на объект Документооборота по ObjectID.
//
// Параметры:
//   ObjectID - ОбъектXDTO - объект XDTO типа DMObjectID.
//   ВызыватьИсключение - Булево - требуется вызов исключения в случае возникновения ошибки.
//   ТекстСообщения - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на объект Документооборота.
//
Функция ПолучитьСсылкуПоObjectID(ObjectID, ВызыватьИсключение = Истина, ТекстСообщения = "") Экспорт
	
	Ссылка = Неопределено;
	ИмяТипа = "";
	
	Если ObjectID <> Неопределено И ObjectID.type <> "" Тогда
		Попытка
			Ссылка = СсылкаИзUUID(ObjectID.type, ObjectID.ID, ИмяТипа);
		Исключение
			Если ВызыватьИсключение Тогда
				ВызватьИсключение;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Ссылка))
			И Не ОбщегоНазначения.СсылкаСуществует(Ссылка)
			И ObjectID.ID <> "" Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Объект типа ""%1"" не найден по идентификатору ""%2""'"),
			ИмяТипа,
			ObjectID.ID);
		ОбработкаЗапросовXDTOПереопределяемый.ПриФормированииТекстаОшибкиПолученияСсылкиПоObjectID(ТекстСообщения);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Возвращает имя типа XDTO по типу Документооборота.
//
// Параметры:
//   ТипДокументооборота - Строка - полное имя типа Документооборота.
//                       - Тип - тип Документооборота.
//   ВызыватьИсключение - Булево - требуется вызов исключения в случае если соответствующее имя типа XDTO не найдено.
//
// Возвращаемое значение:
//   Строка - имя типа XDTO.
//   Неопределено - если соответствующее имя типа XDTO не найдено.
//
Функция ПолучитьТипXDTOПоТипуДО(ТипДокументооборота, ВызыватьИсключение = Истина) Экспорт
	
	Если ТипЗнч(ТипДокументооборота) = Тип("Строка") Тогда
		ИмяТипаДО = ТипДокументооборота;
		
	ИначеЕсли ТипЗнч(ТипДокументооборота) = Тип("Тип") Тогда
		Если ТипДокументооборота = Тип("Дата") Тогда
			Возврат "date";
			
		ИначеЕсли ТипДокументооборота = Тип("Число") Тогда
			Возврат "integer";
			
		ИначеЕсли ТипДокументооборота = Тип("Строка") Тогда
			Возврат "string";
			
		ИначеЕсли ТипДокументооборота = Тип("Булево") Тогда
			Возврат "boolean";
			
		Иначе
			ИмяТипаДО = Метаданные.НайтиПоТипу(ТипДокументооборота).ПолноеИмя();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаСоответствия = ОбработкаЗапросовXDTOПовтИсп.СоответствиеТипов();
	Строка = ТаблицаСоответствия.Найти(ИмяТипаДО, "ИмяДО");
	
	Если Строка = Неопределено Тогда
		Если ВызыватьИсключение Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Попытка получить имя типа ссылки для неизвестного типа: %1'"), ИмяТипаДО);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		Возврат Строка["ИмяXDTO"];
		
	КонецЕсли;
	
КонецФункции

// Возвращает имя типа Документооборота по имени типа XDTO.
//
// Параметры:
//   ИмяТипаXDTO - Строка - имя типа XDTO.
//   ИмяТипаДляЗапроса - Строка - неявно возвращаемое значение, имя типа для вставки в запрос.
//   ВызыватьИсключение - Булево - требуется вызов исключения в случае если соответствующее имя типа не найдено.
//
// Возвращаемое значение:
//   Строка - полное имя типа Документооборота.
//   Неопределено - если соответствующее имя типа Документооборота не найдено.
//
Функция ПолучитьТипДОПоТипуXDTO(ИмяТипаXDTO, ИмяТипаДляЗапроса = Неопределено, ВызыватьИсключение = Истина) Экспорт
	
	ТаблицаСоответствия = ОбработкаЗапросовXDTOПовтИсп.СоответствиеТипов();
	Строка = ТаблицаСоответствия.Найти(ИмяТипаXDTO, "ИмяXDTO");
	
	Если Строка = Неопределено Тогда
		Если ВызыватьИсключение Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Попытка получить тип 1С:Документооборота для неизвестного типа XDTO: %1'"), ИмяТипаXDTO);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТипа = Строка["ИмяДО"];
	ИмяТипаДляЗапроса = ИмяТипа;
	ИмяТипа = СтрЗаменить(ИмяТипа, "Справочник.", "Справочники.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "Документ.", "Документы.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "Перечисление.", "Перечисления.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "Задача.", "Задачи.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "БизнесПроцесс.", "БизнесПроцессы.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "ПланВидовХарактеристик.", "ПланыВидовХарактеристик.");
	ИмяТипа = СтрЗаменить(ИмяТипа, "РегистрСведений.", "РегистрыСведений.");
	
	Возврат ИмяТипа;
	
КонецФункции

// В транзакции помечает на удаление объекты Документооборота.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMDeleteRequest. Запрос на удаление.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMDeleteResponse или DMError.
//
Функция ПометитьНаУдаление(Сообщение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Ответ = СоздатьОбъект("DMDeleteResponse");
		
		Для Каждого ObjectID Из Сообщение.objectIds Цикл
			
			СсылкаНаОбъектДО = ПолучитьСсылкуПоObjectID(ObjectID);
			Если Не ЗначениеЗаполнено(СсылкаНаОбъектДО) Тогда
				ВызватьИсключение НСтр("ru = 'Объект не найден'");
			КонецЕсли;
			
			ЗаблокироватьДанныеДляРедактирования(СсылкаНаОбъектДО);
			ОбъектДО = СсылкаНаОбъектДО.ПолучитьОбъект();
			ОбъектДО.УстановитьПометкуУдаления(Не ОбъектДО.ПометкаУдаления);
			РазблокироватьДанныеДляРедактирования(СсылкаНаОбъектДО);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при установке пометки удаления'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Вызывается при обновлении ИБ.
//
// Параметры:
//   Параметры - Структура
//
Процедура ПриОбновленииИнформационнойБазы(Параметры = Неопределено) Экспорт
	
	СписокОшибок = Новый Массив;
	
	// Выполним проверку на то, описаны ли все значения перечислений, включенных в веб-сервис ДО, в XDTO-пакете.
	// Если разработчик добавил новое значение перечисления, и не отразил его в XDTO – это потенциальная
	// ошибка в конфигурации, которую должен исправить разработчик.
	
	СоответствиеПеречислений = ОбработкаЗапросовXDTOПовтИсп.СоответствиеПеречислений();
	ИмяПакета = Метаданные.ПакетыXDTO.DM.Имя;
	ИмяФункции = "ОбработкаЗапросовXDTOПовтИсп.СоответствиеПеречислений";
	
	Для Каждого СтрокаСоответствияТипов Из ОбработкаЗапросовXDTOПовтИсп.СоответствиеТипов() Цикл
		
		Если Не СтрНачинаетсяС(СтрокаСоответствияТипов.ИмяДО, "Перечисление.") Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(СтрокаСоответствияТипов.ИмяДО);
		МенеджерПеречисления = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаСоответствияТипов.ИмяДО);
		СписокОшибокОбъекта = Новый Массив;
		
		Для Каждого ЗначениеПеречисления Из ОбъектМетаданных.ЗначенияПеречисления Цикл
			Если СоответствиеПеречислений.Найти(
					МенеджерПеречисления[ЗначениеПеречисления.Имя], "ЗначениеПеречисленияДО") = Неопределено Тогда
				СписокОшибокОбъекта.Добавить(СтрШаблон(НСтр(
					"ru='Перечисление %1 включено в веб-сервис ДО, но для значения перечисления %2 не прописано соответствующее значение из XDTO-пакета %3 (объект %4).
					|Нужно добавить в функцию %5 соответствие для данного значения перечисления.'"),
					ОбъектМетаданных.Имя,
					ЗначениеПеречисления.Имя,
					ИмяПакета,
					СтрокаСоответствияТипов.ИмяXDTO,
					ИмяФункции));
			КонецЕсли;
		КонецЦикла;
		
		Если СписокОшибокОбъекта.Количество() > 0 Тогда
			СписокОшибок.Добавить(СтрСоединить(
				СписокОшибокОбъекта,
				"
				|
				|"));
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокОшибок.Количество() > 0 Тогда
		ВызватьИсключение СтрСоединить(
			СписокОшибок,
			"
			|
			|====================================================================================================
			|
			|");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение реквизитов.
// Для реквизитов, у которых при конфигурировании свойство "Проверка заполнения" установлено
// в значение "Показывать ошибку" и реквизит не заполнен, будет сформировано сообщение об ошибке.
//
// Параметры:
//   Объект - Произвольный - проверяемый объект.
//   ТекстСообщения - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево - Истина, если обязательные реквизиты заполнены, и Ложь в противном случае.
//
Функция ПроверитьЗаполнение(Объект, ТекстСообщения = "") Экспорт
	
	МассивОшибок = Новый Массив;
	
	Если Не Объект.ПроверитьЗаполнение() Тогда
		Для Каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
			ТекстОшибки = СокрЛП(Сообщение.Текст);
			Если МассивОшибок.Найти(ТекстОшибки) = Неопределено Тогда
				МассивОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекстСообщения = ТекстСообщения + СтрСоединить(МассивОшибок, Символы.ПС) + Символы.ПС;
	
	Возврат (МассивОшибок.Количество() = 0);
	
КонецФункции

// Выполняет проверку заполненности дополнительных реквизитов объекта ДО.
//
// Параметры:
//   ОбъектДО - Произвольный - проверяемый объект.
//   ТекстСообщения - Строка - неявно возвращаемое значения, текст сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево - Истина, если обязательные реквизиты заполнены, и Ложь в противном случае.
//
Функция ПроверитьЗаполнениеДополнительныхРеквизитов(ОбъектДО, ТекстСообщения) Экспорт
	
	Если Не ОбъектПоддерживаетПроверкуУсловийДопСвойств(ОбъектДО) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДополнительныеРеквизиты.Ссылка КАК Свойство,
		|	Зависимости.Реквизит КАК ПроверяемыйРеквизит,
		|	Зависимости.Условие КАК ПроверяемоеУсловие,
		|	Зависимости.Значение КАК ЗначениеПроверки
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК Зависимости
		|		ПО ДополнительныеРеквизиты.Ссылка = Зависимости.Ссылка
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка В(&Свойства)
		|	И ДополнительныеРеквизиты.ЗаполнятьОбязательно
		|	И (ВЫРАЗИТЬ(Зависимости.ЗависимоеСвойство КАК СТРОКА(8))) <> ""Доступен""
		|	И (ВЫРАЗИТЬ(Зависимости.ЗависимоеСвойство КАК СТРОКА(5))) <> ""Виден""
		|ИТОГИ
		|	МАКСИМУМ(ПроверяемоеУсловие),
		|	МАКСИМУМ(ЗначениеПроверки)
		|ПО
		|	Свойство,
		|	ПроверяемыйРеквизит");
	
	ОписаниеДополнительныхРеквизитов = ОписаниеДополнительныхРеквизитовОбъектаДО(ОбъектДО);
	Запрос.УстановитьПараметр("Свойства", ОписаниеДополнительныхРеквизитов.ВыгрузитьКолонку("Свойство"));
	ВыборкаСвойства = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСвойства.Следующий() Цикл
		
		СтрокаТЧ = ОбъектДО.ДополнительныеРеквизиты.Найти(ВыборкаСвойства.Свойство, "Свойство");
		Если СтрокаТЧ <> Неопределено И ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда // проверять нечего
			Продолжить;
		КонецЕсли;
		
		ВыполнятьПроверку = Истина;
		
		ВыборкаПроверяемыйРеквизит = ВыборкаСвойства.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПроверяемыйРеквизит.Следующий() Цикл
			
			Если ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = NULL Тогда // обязательное без условий
				Прервать;
			КонецЕсли;
			
			Если ТипЗнч(ВыборкаПроверяемыйРеквизит.ПроверяемыйРеквизит) = Тип("Строка") Тогда
				Если СтрНачинаетсяС(
						ВыборкаПроверяемыйРеквизит.ПроверяемыйРеквизит, "ДопРеквизитыОтбораДляУсловий") Тогда
					ДопРеквизитыОтбораДляУсловий =
						УправлениеСвойствамиДокументооборот.ДопРеквизитыОтбораДляУсловий(ОбъектДО); // Используется для выполнения КодУсловия
					ПутьКРеквизиту = ВыборкаПроверяемыйРеквизит.ПроверяемыйРеквизит;
				Иначе
					ПутьКРеквизиту = "ОбъектДО." + ВыборкаПроверяемыйРеквизит.ПроверяемыйРеквизит;
				КонецЕсли;
			Иначе
				ДополнительныйРеквизит = ОбъектДО.ДополнительныеРеквизиты.Найти(
					ВыборкаПроверяемыйРеквизит.ПроверяемыйРеквизит, "Свойство");
				Если ДополнительныйРеквизит = Неопределено Тогда
					Продолжить; // Дополнительный реквизит не существует, условие игнорируется.
				КонецЕсли;
				ПутьКРеквизиту = "ДополнительныйРеквизит.Значение";
			КонецЕсли;
			
			ШаблонУсловия = "";
			Если ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "Равно" Тогда
				ШаблонУсловия = "Результат = (%1 = ЗначениеПроверки)";
			ИначеЕсли ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "НеРавно" Тогда
				ШаблонУсловия = "Результат = (%1 <> ЗначениеПроверки)";
			КонецЕсли;
			
			Если ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "Заполнено" Тогда
				ШаблонУсловия = "Результат = ЗначениеЗаполнено(%1)";
			ИначеЕсли ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "НеЗаполнено" Тогда
				ШаблонУсловия = "Результат = Не ЗначениеЗаполнено(%1)";
			КонецЕсли;
			
			Если ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "ВСписке" Тогда
				ШаблонУсловия = "Результат = (ЗначениеПроверки.Найти(%1) <> Неопределено)";
			ИначеЕсли ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "НеВСписке" Тогда
				ШаблонУсловия = "Результат = (ЗначениеПроверки.Найти(%1) = Неопределено)";
			КонецЕсли;
			
			Если ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "ВСписке"
					Или ВыборкаПроверяемыйРеквизит.ПроверяемоеУсловие = "НеВСписке" Тогда
				ЗначениеПроверки = Новый Массив;
				Выборка = ВыборкаПроверяемыйРеквизит.Выбрать();
				Пока Выборка.Следующий() Цикл
					ЗначениеПроверки.Добавить(Выборка.ЗначениеПроверки);
				КонецЦикла;
			Иначе
				ЗначениеПроверки = ВыборкаПроверяемыйРеквизит.ЗначениеПроверки;
			КонецЕсли;
			
			КодУсловия = СтрШаблон(ШаблонУсловия, ПутьКРеквизиту);
			
			Результат = Ложь;
			Попытка
				Выполнить(КодУсловия);
			Исключение
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Ошибка при проверке заполнения свойства ""%1"": %2'"),
					ВыборкаСвойства.Свойство,
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Ложь;
			КонецПопытки;
			
			ВыполнятьПроверку = ВыполнятьПроверку И Результат;
			
		КонецЦикла;
		
		Если ВыполнятьПроверку Тогда
			ТекстОдногоСообщения = СтрШаблон(
				НСтр("ru = 'Не заполнено обязательное свойство ""%1"".'"),
				ВыборкаСвойства.Свойство);
			ТекстСообщения = ТекстСообщения
				+ ?(ТекстСообщения = "", "", Символы.ПС)
				+ ТекстОдногоСообщения;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстСообщения = "";
	
КонецФункции

// Проверяет тип объекта XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - проверяемый объект.
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - Истина, если объект является объектом указанного типа.
//
Функция ПроверитьТип(ОбъектXDTO, Тип) Экспорт
	
	Возврат (ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO"))
		И (ОбъектXDTO.Тип() = ФабрикаXDTO.Тип("http://www.1c.ru/dm", Тип));
	
КонецФункции

// Возвращает результат выполнения выражения на встроенном языке. Выражение может использоваться только для вычисления
// какого-либо значения, которое в итоге вернет функция. Никакие изменения в базу данных при этом вноситься не
// должны, поэтому выражение выполняется в транзакции, которая откатывается после завершения выполнения.
//
// Параметры:
//   ВычисляемоеВыражение - Строка - выражение на встроенном языке.
//   Источник - Произвольный - источник данных.
//   Приемник - Произвольный - приемник данных.
//   ТекущаяСтрока - Произвольный - передается в случае, если выражение используется для заполнения реквизита
//     строки табличной части.
//
// Возвращаемое значение:
//   Произвольный - результат выполнения выражения на встроенном языке.
//
Функция РезультатВыраженияНаВстроенномЯзыке(ВычисляемоеВыражение, Источник, Приемник = Неопределено,
		ТекущаяСтрока = Неопределено) Экспорт
	
	// BSLLS:PairingBrokenTransaction-off
	// Проектное решение. Методы НачатьТранзакцию / ОтменитьТранзакцию используются для предотвращения
	// несанкционированных действий с БД из выражения на встроенном языке
	
	Параметры = Новый Структура;
	Параметры.Вставить("Источник", Источник);
	Параметры.Вставить("Приемник", Приемник);
	Параметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	Параметры.Вставить("Результат", Неопределено);
	
	Ошибки = "";
	
	ВыполнитьОтменуТранзакции = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		ВыполнитьОтменуТранзакции = Истина;
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		ВыполнитьВБезопасномРежиме(ВычисляемоеВыражение, Параметры);
	Исключение
		Ошибки = СтрШаблон(
			НСтр("ru = 'Найдена ошибка в выражении на встроенном языке:
				|%1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ВыполнитьОтменуТранзакции И ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Если Ошибки = "" Тогда
		Возврат Параметры.Результат;
	Иначе
		ВызватьИсключение Ошибки;
	КонецЕсли;
	
	// BSLLS:PairingBrokenTransaction-on
	
КонецФункции

// Определяет существует ли свойство в объекте XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, свойство которого нужно проверить.
//   ИмяСвойства - Строка - имя свойства.
//
// Возвращаемое значение:
//   Булево - свойство существует.
//
Функция СвойствоСуществует(ОбъектXDTO, ИмяСвойства) Экспорт
	
	Возврат (ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойства) <> Неопределено);
	
КонецФункции

// Определяет было ли установлено свойство в объекте XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, свойство которого нужно проверить.
//   ИмяСвойства - Строка - имя свойства.
//
// Возвращаемое значение:
//   Булево - свойство установлено.
//
Функция СвойствоУстановлено(ОбъектXDTO, ИмяСвойства) Экспорт
	
	Возврат (СвойствоСуществует(ОбъектXDTO, ИмяСвойства) И ОбъектXDTO.Установлено(ИмяСвойства));
	
КонецФункции

// Копирует объект XDTO.
//
// Параметры:
//   Приемник - ОбъектXDTO - куда копировать.
//   Источник - ОбъектXDTO - от куда копировать.
//
Процедура СкопироватьОбъектXDTO(Приемник, Источник) Экспорт
	
	Приемник = СоздатьОбъект(Источник.Тип().Имя);
	Для Каждого Свойство Из Источник.Тип().Свойства Цикл
		
		Если Не СвойствоУстановлено(Источник, Свойство.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Источник[Свойство.Имя]) = Тип("ОбъектXDTO") Тогда
			СкопироватьОбъектXDTO(Приемник[Свойство.Имя], Источник[Свойство.Имя]);
			
		ИначеЕсли ТипЗнч(Источник[Свойство.Имя]) = Тип("СписокXDTO") Тогда
			Для Каждого СтрокаСпискаИсточника Из Источник[Свойство.Имя] Цикл
				СтрокаСпискаПриемника = Неопределено;
				СкопироватьОбъектXDTO(СтрокаСпискаПриемника, СтрокаСпискаИсточника);
				Приемник[Свойство.Имя].Добавить(СтрокаСпискаПриемника);
			КонецЦикла;
			
		Иначе
			Приемник[Свойство.Имя] = Источник[Свойство.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает объект DMObjectID.
//
// Параметры:
//   ID - Строка - идентификатор объекта XDTO.
//   type - Строка - тип объекта XDTO.
//
// Возвращаемое значение:
//   ОбъектXDTO
//
Функция СоздатьObjectID(ID = "", type = "") Экспорт
	
	objectID = СоздатьОбъект("DMObjectID");
	objectID.ID = ID;
	objectID.type = type;
	
	Возврат objectID;
	
КонецФункции

// Создает XDTO объект указанного типа из пространства имен "http://www.1c.ru/dm".
//
// Параметры:
//   ТипОбъекта - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект указанного типа.
//
Функция СоздатьОбъект(ТипОбъекта) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/dm", ТипОбъекта));
	
КонецФункции

// Создает новый объект Документооборота.
//
// Параметры:
//   ИсточникДанных - Структура - источник данных:
//     * ТипИсточника - Строка - принимает значения "ОбъектXDTO" или "ВходящиеДанные", в зависимости от типа источника.
//     * ОбъектXDTO - ОбъектXDTO - объект XDTO, потомок DMObject. Источник данных.
//     * ТипXDTOОбъекта - Строка - имя типа XDTO объекта, из которого требуется заполнить объект ДО.
//     * ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//     * ПравилоЗагрузки - СправочникОбъект.ПравилаЗагрузкиДанныхВДО - правило загрузки.
//     * Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//   Ошибка - ОбъектXDTO - объект XDTO типа DMError. Неявно возвращаемое значение ошибки.
//          - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//   Владелец - СправочникСсылка - владелец объекта, который требуется создать.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO соответствующего типа. Возвращается если тип источника "ОбъектXDTO".
//   ЛюбаяСсылка - ссылка на созданный объект ДО. Возвращается если тип источника "ВходящиеДанные".
//   Неопределено - возвращается если в ходе создания объекта ДО возникла ошибка.
//
Функция СоздатьОбъектДО(ИсточникДанных, Ошибка, Владелец = Неопределено) Экспорт
	
	Попытка
		
		ОбъектДО = Неопределено;
		ТипОбъектаДО = "";
		ТипXDTOОбъекта = "";
		
		Если ИсточникДанных.ТипИсточника = "ОбъектXDTO" Тогда
			ЭтоГруппа = СвойствоУстановлено(ИсточникДанных.ОбъектXDTO, "isFolder")
				И ИсточникДанных.ОбъектXDTO.isFolder = Истина;
			ТипXDTOОбъекта = ИсточникДанных.ТипXDTOОбъекта;
			ОбъектДО = ПолучитьНовыйОбъектДОПоТипуXDTO(ТипXDTOОбъекта, ЭтоГруппа);
			УстановитьСсылкуНовогоДляСправочника(ОбъектДО, ИсточникДанных.ОбъектXDTO);
			
		ИначеЕсли ИсточникДанных.ТипИсточника = "ВходящиеДанные" Тогда
			ТипОбъектаДО = ИсточникДанных.ПравилоЗагрузки.ТипОбъектаДО;
			Если ИсточникДанных.ВнешнийОбъект.ID <> "" И ИсточникДанных.ВнешнийОбъект.Тип <> "" Тогда
				СсылкаНаСуществующийОбъектДО =
					РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(
						ИсточникДанных.ВнешнийОбъект.ID,
						ИсточникДанных.ВнешнийОбъект.Тип,
						ТипОбъектаДО);
				Если СсылкаНаСуществующийОбъектДО <> Неопределено Тогда
					ОбъектДО = СсылкаНаСуществующийОбъектДО.ПолучитьОбъект();
				КонецЕсли;
			КонецЕсли;
			Если ОбъектДО = Неопределено Тогда
				МенеджерОбъектаДО = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипОбъектаДО);
				ОбъектДО = МенеджерОбъектаДО.СоздатьЭлемент();
			КонецЕсли;
			
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип источника данных ""%1""'"),
				ИсточникДанных.ТипИсточника);
			
		КонецЕсли;
		
		ОбъектДО.Заполнить(Неопределено);
		
		Если ЗначениеЗаполнено(Владелец) И ОбъектДО.Метаданные().Владельцы.Количество() > 0 Тогда
			ОбъектДО.Владелец = Владелец;
		КонецЕсли;
		
		Если Не ЗаписатьДанныеОбъектаДО(ОбъектДО, ИсточникДанных, Ошибка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ВнешнийОбъектID = "";
		ВнешнийОбъектТип = "";
		ЕстьОбратнаяСвязьВУзле = Ложь;
		Если ИсточникДанных.ТипИсточника = "ОбъектXDTO"
				И СвойствоУстановлено(ИсточникДанных.ОбъектXDTO, "externalObject") Тогда
			ВнешнийОбъектID = ИсточникДанных.ОбъектXDTO.externalObject.ID;
			ВнешнийОбъектТип = ИсточникДанных.ОбъектXDTO.externalObject.type;
		ИначеЕсли ИсточникДанных.ТипИсточника = "ВходящиеДанные" Тогда
			ВнешнийОбъектID = ИсточникДанных.ВнешнийОбъект.ID;
			ВнешнийОбъектТип = ИсточникДанных.ВнешнийОбъект.Тип;
			ЕстьОбратнаяСвязьВУзле = Истина;
		КонецЕсли;
		
		Если ВнешнийОбъектID <> "" И ВнешнийОбъектТип <> "" Тогда
			РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
				ВнешнийОбъектID,
				ВнешнийОбъектТип,
				ОбъектДО.Ссылка,
				ЕстьОбратнаяСвязьВУзле);
		КонецЕсли;
		
		Возврат ОбъектДО.Ссылка;
		
	Исключение
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка при создании объекта ДО'");
		ТекстОшибкиМассив = Новый Массив;
		Тип = "";
		Если ОбъектДО <> Неопределено И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектДО)) Тогда
			Тип = ОбъектДО.Метаданные().Представление();
		ИначеЕсли Не ПустаяСтрока(ТипОбъектаДО) Тогда
			Тип = ТипОбъектаДО;
		ИначеЕсли Не ПустаяСтрока(ТипXDTOОбъекта) Тогда
			Тип = ТипXDTOОбъекта;
		КонецЕсли;
		Если Тип <> "" Тогда
			ТекстОшибкиМассив.Добавить(СтрШаблон(НСтр("ru = 'Ошибка при создании объекта ДО типа %1'"), Тип));
		КонецЕсли;
		ТекстОшибкиМассив.Добавить(НСтр("ru = 'Текст ошибки:'"));
		ТекстОшибкиМассив.Добавить(ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
		ТекстОшибки = СтрСоединить(ТекстОшибкиМассив, Символы.ПС);
		
		Если ТипЗнч(Ошибка) = Тип("ОбъектXDTO") Тогда
			Ошибка.subject = ЗаголовокОшибки;
			Ошибка.description = ТекстОшибки;
		Иначе
			Ошибка = СтрШаблон(
				"%1
				|%2",
				ЗаголовокОшибки,
				ТекстОшибки);
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// Возвращает соответствие свойств XDTO и реквизитов объекта, которые можно использовать в поиске.
//
// Параметры:
//   Тип - Строка - имя типа XDTO.
//   Условия - ОбъектXDTO - объект XDTO типа DMObjectListQuery.
//
// Возвращаемое значение:
//   Структура - где ключом является имя свойства XDTO, а значением - имя реквизита.
//
Функция СоответствиеСвойствXDTOРеквизитамПоиска(Тип, Условия) Экспорт
	
	Результат = Новый Структура;
	
	ОбработкаЗапросовXDTOПереопределяемый.ПриЗаполненииСоответствияСвойствXDTOРезультатамПоиска(Тип, Результат);
	
	Если Условия <> Неопределено И СвойствоУстановлено(Условия, "columnConformity") Тогда
		Для Каждого СоответствиеСвойствXDTO Из Условия.columnConformity Цикл
			Результат.Вставить(СоответствиеСвойствXDTO.xdtoPropertyName, СоответствиеСвойствXDTO.dmPropertyName);
		КонецЦикла;
	КонецЕсли;
	
	Если Тип = "DMDocumentType" Тогда
		Результат.Вставить("sumEnabled", "УчитыватьСуммуДокумента");
		Результат.Вставить("performanceDateEnabled", "ИспользоватьСрокИсполнения");
		Результат.Вставить("templateRequired", "ЗапретитьСозданиеДокументовНеПоШаблону");
		Результат.Вставить("accountingForCaseFilesEnabled", "ВключенУчетПоНоменклатуреДел");
		Результат.Вставить("cashFlowDetailsEnabled", "ВестиУчетПоСтатьямДДС");
		Результат.Вставить("correspondentEnabled", "ВестиУчетПоКонтрагентам");
		Результат.Вставить("durationEnabled", "УчитыватьСрокДействия");
		Результат.Вставить("isAPaymentRequest", "ЯвляетсяЗаявкойНаОплату");
		Результат.Вставить("organizationEnabled", "ВестиУчетПоОрганизациям");
		Результат.Вставить("partiesEnabled", "ВестиУчетСторон");
		Результат.Вставить("productRowsEnabled", "ВестиУчетТоваровИУслуг");
		Результат.Вставить("signatureOption", "ВариантПодписания");
		Результат.Вставить("externalNumberEnabled", "УчитыватьВходящийНомерИДатуПолучателя");
		Результат.Вставить("isIncoming", "ЯвляетсяВходящейКорреспонденцией");
		Результат.Вставить("isOutgoing", "ЯвляетсяИсходящейКорреспонденцией");
		
	ИначеЕсли Тип = "DMDocumentFolder" Тогда
		Результат.Вставить("description", "Описание");
		Результат.Вставить("responsible", "Ответственный");
		Результат.Вставить("creationDate", "ДатаСоздания");
		Результат.Вставить("parent", "Родитель");
		
	ИначеЕсли Тип = "DMDocumentTemplate" Тогда
		Результат.Вставить("documentType", "ВидДокумента");
		Результат.Вставить("title", "Заголовок");
		Результат.Вставить("summary", "Содержание");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("organization", "Организация");
		Результат.Вставить("subdivision", "Подразделение");
		Результат.Вставить("correspondent", "Контрагент");
		Результат.Вставить("cashFlowItem", "СтатьяДвиженияДенежныхСредств");
		Результат.Вставить("project", "Проект");
		
	ИначеЕсли Тип = "DMContactPerson" Тогда
		Результат.Вставить("correspondent", "Владелец");
		Результат.Вставить("position", "Должность");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("privatePerson", "ФизЛицо");
		
	ИначеЕсли Тип = "DMContactInformationKind" Тогда
		Результат.Вставить("type", "Тип");
		Результат.Вставить("mandatory", "ОбязательноеЗаполнение");
		Результат.Вставить("parent", "Родитель");
		
	ИначеЕсли Тип = "DMOrganization" Тогда
		Результат.Вставить("inn", "ИНН");
		Результат.Вставить("kpp", "КПП");
		Результат.Вставить("okpo", "КодПоОКПО");
		Результат.Вставить("fullName", "НаименованиеПолное");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("legalPrivatePerson", "ЮрФизЛицо");
		Результат.Вставить("prefix", "Префикс");
		Результат.Вставить("VATpayer", "ПлательщикНДС");
		
	ИначеЕсли Тип = "DMSubdivision" Тогда
		Результат.Вставить("head", "Руководитель");
		
	ИначеЕсли Тип = "DMPrivatePerson" Тогда
		Результат.Вставить("birthDay", "ДатаРождения");
		Результат.Вставить("comment", "Комментарий");
		
	ИначеЕсли Тип = "DMUser" Тогда
		Результат.Вставить("privatePerson", "ФизЛицо");
		
	ИначеЕсли Тип = "DMEmployee" Тогда
		Результат.Вставить("position", "Должность");
		Результат.Вставить("subdivision", "Подразделение");
		Результат.Вставить("privatePerson", "Владелец");
		Результат.Вставить("beginDate", "ДатаНачалаДействия");
		Результат.Вставить("endDate", "ДатаОкончанияДействия");
		Результат.Вставить("isActual", "Действует");
		
	ИначеЕсли Тип = "DMCurrency" Тогда
		Результат.Вставить("code", "Код");
		Результат.Вставить("fullName", "НаименованиеПолное");
		
	ИначеЕсли Тип = "DMBank" Тогда
		Результат.Вставить("BIC", "Код");
		
	ИначеЕсли Тип = "DMBankAccount" Тогда
		Результат.Вставить("number", "НомерСчета");
		Результат.Вставить("owner", "Владелец");
		Результат.Вставить("bank", "Банк");
		
	ИначеЕсли Тип = "DMCashFlowItem" Тогда
		Результат.Вставить("description", "Описание");
		
	ИначеЕсли Тип = "DMCountry" Тогда
		Результат.Вставить("code", "Код");
		Результат.Вставить("codeAlpha2", "КодАльфа2");
		Результат.Вставить("codeAlpha3", "КодАльфа3");
		Результат.Вставить("longDescription", "НаименованиеПолное");
		Результат.Вставить("internationalDescription", "МеждународноеНаименование");
		
	ИначеЕсли Тип = "DMVATRateUniversal" Тогда
		Результат.Вставить("rate", "Ставка");
		Результат.Вставить("calculatedRate", "РасчетнаяСтавка");
		Результат.Вставить("country", "Страна");
		
	ИначеЕсли Тип = "DMMeasurementUnit" Тогда
		Результат.Вставить("fullName", "НаименованиеПолное");
		
	ИначеЕсли Тип = "DMCaseFilesListSections" Тогда
		Результат.Вставить("year", "Год");
		Результат.Вставить("index", "Индекс");
		Результат.Вставить("company", "Организация");
		Результат.Вставить("department", "Подразделение");
		
	ИначеЕсли Тип = "DMCaseFilesCatalog" Тогда
		Результат.Вставить("year", "Год");
		Результат.Вставить("longDescription", "ПолноеНаименование");
		Результат.Вставить("index", "Индекс");
		Результат.Вставить("section", "Раздел");
		Результат.Вставить("company", "Организация");
		Результат.Вставить("retentionPeriod", "СрокХранения");
		Результат.Вставить("articleNumbers", "НомераСтатей");
		Результат.Вставить("caseCategory", "КатегорияДела");
		Результат.Вставить("expertsCommissionMark", "ОтметкаЭПК");
		Результат.Вставить("comment", "Примечание");
		Результат.Вставить("documentTypesFilledIn", "ВидыДокументовЗаполнены");
		Результат.Вставить("correspondentsFilledIn", "КонтрагентыЗаполнены");
		Результат.Вставить("activityTypesFilledIn", "ВопросыДеятельностиЗаполнены");
		
	ИначеЕсли Тип = "DMCaseFilesDossiers" Тогда
		Результат.Вставить("startDate", "ДатаНачала");
		Результат.Вставить("endDate", "ДатаОкончания");
		Результат.Вставить("caseClosed", "ДелоЗакрыто");
		Результат.Вставить("numberOfSheets", "КоличествоЛистов");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("caseFilesCatalog", "НоменклатураДел");
		Результат.Вставить("dossierNumber", "НомерТома");
		Результат.Вставить("company", "Организация");
		Результат.Вставить("department", "Подразделение");
		
	ИначеЕсли Тип = "DMDocumentTopic" Тогда
		Результат.Вставить("documentType", "ВидДокумента");
		
	ИначеЕсли Тип = "DMProduct" Тогда
		Результат.Вставить("article", "Артикул");
		Результат.Вставить("measurementUnit", "ЕдиницаИзмерения");
		Результат.Вставить("VATRateUniversal", "СтавкаНДС");
		Результат.Вставить("price", "Цена");
		
	ИначеЕсли Тип = "DMFile" Тогда
		Результат.Вставить("owner", "ВладелецФайла");
		Результат.Вставить("author", "Автор");
		Результат.Вставить("encrypted", "Зашифрован");
		Результат.Вставить("signed", "ПодписанЭП");
		Результат.Вставить("size", "ТекущаяВерсияРазмер");
		Результат.Вставить("creationDate", "ТекущаяВерсияДатаСоздания");
		Результат.Вставить("modificationDate", "ТекущаяВерсияДатаМодификацииФайла");
		Результат.Вставить("description", "Описание");
		Результат.Вставить("extension", "ТекущаяВерсияРасширение");
		Результат.Вставить("deletionMark", "ПометкаУдаления");
		
	ИначеЕсли Тип = "DMFileVersion" Тогда
		Результат.Вставить("owner", "Владелец");
		Результат.Вставить("author", "Автор");
		Результат.Вставить("size", "Размер");
		Результат.Вставить("creationDate", "ДатаСоздания");
		Результат.Вставить("modificationDate", "ДатаМодификацииФайла");
		Результат.Вставить("extension", "Расширение");
		Результат.Вставить("modificationDateUniversal", "ДатаМодификацииУниверсальная");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("deletionMark", "ПометкаУдаления");
		Результат.Вставить("number", "НомерВерсии");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает ссылку по идентификатору внешнего объекта, если объект существует в БД.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO произвольного типа.
//   ВидСправочника - Строка - вид справочника.
//
// Возвращаемое значение:
//   СправочникСсылка - ссылка, если объект найден по идентификатору.
//   Неопределено - если объект не найден.
//
Функция СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, ВидСправочника) Экспорт
	
	Если Не СвойствоУстановлено(ОбъектXDTO, "externalObject")
			Или Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.ID)
			Или Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.type) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СправочникСсылкаПоИдентификаторуВнешнегоОбъекта(
		ОбъектXDTO.externalObject.ID,
		ОбъектXDTO.externalObject.type,
		ВидСправочника);
	
КонецФункции

// Возвращает XML схему веб-сервиса ДО.
//
// Возвращаемое значение:
//   Строка - Схема XML сервиса ДО.
//
Функция СхемаПакетаDM() Экспорт
	
	НаборСхем = ФабрикаXDTO.ЭкспортСхемыXML("http://www.1c.ru/dm");
	Схема = НаборСхем[0];
	Схема.ОбновитьЭлементDOM();
	
	ЗаписьXMLСтрока = Новый ЗаписьXML;
	ЗаписьXMLСтрока.УстановитьСтроку();
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(Схема.ДокументDOM, ЗаписьXMLСтрока);
	
	СхемаПакетаDM = ЗаписьXMLСтрока.Закрыть();
	ЗаписьXMLСтрока = Неопределено;
	
	Возврат СхемаПакетаDM;
	
КонецФункции

// Устанавливает новому объекту ссылку, заданную свойством externalObject, если возможно.
//
// Параметры:
//   НовыйОбъект - СправочникОбъект
//   ОбъектXDTO - ОбъектXDTO - объект XDTO произвольного типа.
//
Процедура УстановитьСсылкуНовогоДляСправочника(НовыйОбъект, ОбъектXDTO) Экспорт
	
	Если Не СвойствоУстановлено(ОбъектXDTO, "externalObject")
			Или Не ЗначениеЗаполнено(ОбъектXDTO.externalObject.ID)
			Или Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ОбъектXDTO.externalObject.ID) Тогда
		Возврат;
	КонецЕсли;
	
	ВидСправочника = НовыйОбъект.Метаданные().Имя;
	ИдентификаторВнешнегоОбъекта = Новый УникальныйИдентификатор(ОбъектXDTO.externalObject.ID);
	СсылкаДО = Справочники[ВидСправочника].ПолучитьСсылку(ИдентификаторВнешнегоОбъекта);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Справочник." + ВидСправочника + "
		|ГДЕ
		|	Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаДО);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НовыйОбъект.УстановитьСсылкуНового(СсылкаДО);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при установке параметров сеанса.
//
// Параметры:
//   ИменаПараметровСеанса - Массив из Строка
//                         - Неопределено - имена параметров сеанса для инициализации.
//                                          Массив устанавливаемых идентификаторов параметров сеанса,
//                                          которые нужно инициализировать, если обработчик вызывается
//                                          перед использованием неинициализированных параметров сеанса.
//                                          Неопределено, если обработчик события вызывается системой при начале сеанса.
//
Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	ОбработкаЗапросовXDTOПереопределяемый.ПриУстановкеПараметровСеанса(ИменаПараметровСеанса);
	
КонецПроцедуры

// Возвращает признак работы сеанса через WS-соединение.
//
// Возвращаемое значение:
//   Булево - Истина, если работа идет через WS-соединение.
//
Функция ЭтоВебСервис() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	НомерТекущегоСеанса = НомерСеансаИнформационнойБазы();
	
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерТекущегоСеанса И Сеанс.ИмяПриложения = "WSConnection" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина, если переданное значение является перечислением.
//
// Параметры:
//   Значение - Произвольный - проверяемое значение.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоПеречисление(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает версию БИД по свойству сообщения dmilVersionNumber.
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение интегрированной системы.
//
// Возвращаемое значение:
//   Строка - версия БИД.
//
Функция ВерсияБИДПоСообщению(Сообщение)
	
	ВерсияБИД = "0.0.0.0";
	
	Если СвойствоУстановлено(Сообщение, "dmilVersionNumber") И ЗначениеЗаполнено(Сообщение.dmilVersionNumber) Тогда
		ВерсияБИД = Сообщение.dmilVersionNumber;
	КонецЕсли;
	
	Возврат ВерсияБИД;
	
КонецФункции

// Возвращает количество страниц в динамическом списке объектов, которое зависит от общего количества объектов, и от
// количества объектов на одной странице списка.
//
// Параметры:
//   ЗапросСОтборами - Запрос - запрос на получение списка объектов, вместе со всеми установленными параметрами.
//   РазмерСтраницыДинамическогоСписка - Число - количество объектов на одной странице списка.
//
// Возвращаемое значение:
//   Число
//
Функция ВсегоСтраниц(ЗапросСОтборами, Знач РазмерСтраницыДинамическогоСписка)
	
	ТекстЗапроса = ЗапросСОтборами.Текст;
	
	ТекстЗапросаКоличество =
		"Выбрать
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	(ТекстЗапроса) КАК ВложенныйЗапрос";
	ТекстЗапросаКоличество = СтрЗаменить(ТекстЗапросаКоличество, "ТекстЗапроса", ТекстЗапроса);
	
	ЗапросСОтборами.Текст = ТекстЗапросаКоличество;
	Выборка = ЗапросСОтборами.Выполнить().Выбрать();
	ЗапросСОтборами.Текст = ТекстЗапроса;
	
	КоличествоСтраниц = 1;
	
	Если Выборка.Следующий() Тогда
		Если РазмерСтраницыДинамическогоСписка < 1 Тогда
			РазмерСтраницыДинамическогоСписка = 1;
		КонецЕсли;
		
		РасчетноеКоличествоСтраниц = Выборка.Количество / РазмерСтраницыДинамическогоСписка;
		Если (РасчетноеКоличествоСтраниц - Цел(РасчетноеКоличествоСтраниц)) > 0 Тогда
			РасчетноеКоличествоСтраниц = Цел(РасчетноеКоличествоСтраниц) + 1;
		КонецЕсли;
		
		КоличествоСтраниц = Макс(КоличествоСтраниц, РасчетноеКоличествоСтраниц);
	КонецЕсли;
	
	Возврат КоличествоСтраниц;
	
КонецФункции

// Выгружает объекты, относящиеся к определенной странице динамического списка.
//
// Параметры:
//   УпорядоченныйЗапросСОтборами - Запрос - запрос на получение списка объектов, вместе со всеми установленными
//     параметрами и сортировкой.
//   НомерСтраницы - Число - номер текущей страницы списка.
//   РазмерСтраницыДинамическогоСписка - Число - количество объектов на одной странице списка.
//
// Возвращаемое значение:
//   ТаблицаЗначений - выгрузка результата запроса.
//
Функция ДанныеПоСтранице(УпорядоченныйЗапросСОтборами, НомерСтраницы, РазмерСтраницыДинамическогоСписка)
	
	КоличествоЗаписейНачалоСтраницы = Формат((НомерСтраницы - 1) * РазмерСтраницыДинамическогоСписка, "ЧН=0; ЧГ=0");
	КоличествоЗаписейКонецСтраницы = Формат(НомерСтраницы * РазмерСтраницыДинамическогоСписка, "ЧН=0; ЧГ=0");
	
	ТекстВложенногоЗапроса = СтрЗаменить(
		УпорядоченныйЗапросСОтборами.Текст,
		"ВЫБРАТЬ",
		СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ %1", КоличествоЗаписейКонецСтраницы));
	
	ТекстЗапроса =
		"Выбрать
		|	*,
		|	АВТОНОМЕРЗАПИСИ() КАК Номер
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	&ВложенныйЗапрос КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВременнаяТаблица.Номер) КАК Номер
		|ПОМЕСТИТЬ ВТМинимальныйНомер
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица,
		|	ВТМинимальныйНомер КАК ВТМинимальныйНомер
		|ГДЕ
		|	(ВременнаяТаблица.Номер - ВТМинимальныйНомер.Номер + 1) > &КоличествоЗаписейНачалоСтраницы
		|	И (ВременнаяТаблица.Номер - ВТМинимальныйНомер.Номер + 1) <= &КоличествоЗаписейКонецСтраницы";
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ВложенныйЗапрос",
		СтрШаблон("(%1)", ТекстВложенногоЗапроса));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоЗаписейНачалоСтраницы", КоличествоЗаписейНачалоСтраницы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоЗаписейКонецСтраницы", КоличествоЗаписейКонецСтраницы);
	
	УпорядоченныйЗапросСОтборами.Текст = ТекстЗапроса;
	
	Данные = УпорядоченныйЗапросСОтборами.Выполнить().Выгрузить();
	Данные.Колонки.Удалить("Номер");
	Данные.Колонки.Удалить("Номер1");
	
	Возврат Данные;
	
КонецФункции

// Добавляет в запрос условия отбора и заполняет параметры запроса
//
Процедура ДобавитьОтборИПараметрыЗапроса(Запрос, Сообщение, СостоянияДокументов, НаборКолонок, УсловияОтбора,
		Иерархический, ВключатьПомеченныеНаУдаление)
	
	Запрос.Текст = Запрос.Текст
		+ ?(ВключатьПомеченныеНаУдаление,
			"ИСТИНА
			|",
			"НЕ ОбъектВыборки.ПометкаУдаления
			|");
	
	Для Каждого ИмяСвойства Из НаборКолонок Цикл
		Если СостоянияДокументов.Свойство(ИмяСвойства) Тогда
			
			ИмяПараметра = "ЗначениеОтбора" + ИмяСвойства;
			Запрос.УстановитьПараметр(ИмяПараметра, СостоянияДокументов[ИмяСвойства]);
			
		КонецЕсли;
	КонецЦикла;
	
	// Далеко не все файлы следует предъявлять через этот интерфейс.
	Если Сообщение.type = "DMFile" Тогда
		Запрос.Текст = Запрос.Текст + " И (
		|	ОбъектВыборки.ВладелецФайла ССЫЛКА Справочник.ПапкиФайлов
		|	ИЛИ ОбъектВыборки.ВладелецФайла ССЫЛКА Справочник.ДокументыПредприятия
		|	ИЛИ ОбъектВыборки.ВладелецФайла ССЫЛКА Справочник.Контрагенты
		|)
		|";
	ИначеЕсли Сообщение.type = "DMFileFolder" Тогда // отбросим служебные папки
		Запрос.Текст = Запрос.Текст + " И СлужебныеПапки.СсылкаНаПапкуФайловДО ЕСТЬ NULL
		|";
	КонецЕсли;
	
	Для Каждого УсловиеОтбора Из УсловияОтбора Цикл
		
		Если УсловиеОтбора.Поле = "ОбъектВыборки.Родитель" Тогда
			Если Не Иерархический Тогда
				Продолжить;
			КонецЕсли;
			ИмяПараметра = "Родитель";
		Иначе
			ИмяПараметра = "Параметр" + Формат(УсловияОтбора.Индекс(УсловиеОтбора), "ЧГ=0");
		КонецЕсли;
		
		ИмяСрезаСостояний = "СрезСостояний" + Формат(УсловияОтбора.Индекс(УсловиеОтбора), "ЧГ=0");
		ОператорСравнения = УсловиеОтбора.ОператорСравнения;
		Значение = УсловиеОтбора.Значение;
		
		// Определим оператор сравнения по умолчанию.
		Если УсловиеОтбора.Поле = "ОбъектВыборки.Наименование" Тогда
			// Совместимость с ранними версиями клиентов: по умолчанию ищем по части наименования.
			Если Не ЗначениеЗаполнено(ОператорСравнения) Тогда
				ОператорСравнения = "LIKE";
				Значение = "%" + Значение + "%";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Или ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			// Совместимость с ранними версиями клиентов: ищем вхождение в список.
			Если Не ЗначениеЗаполнено(ОператорСравнения) Тогда
				ОператорСравнения = "IN";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ПапкиДокументов")
				Или ТипЗнч(Значение) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			// Совместимость с ранними версиями клиентов: ищем по родителю В ИЕРАРХИИ.
			Если Не ЗначениеЗаполнено(ОператорСравнения) Тогда
				ОператорСравнения = "IN HIERARCHY";
			КонецЕсли;
			
		КонецЕсли;
		
		// Совместимость с ранними версиями клиентов: оператор сравнения может быть не указан.
		Если Не ЗначениеЗаполнено(ОператорСравнения) Тогда
			ОператорСравнения = "=";
		КонецЕсли;
		
		// Сформируем текст условия запроса.
		Если ОператорСравнения = "LIKE" Тогда
			
			Если Сообщение.type = "DMEmployee" И УсловиеОтбора.Поле = "ОбъектВыборки.Наименование" Тогда
				
				Запрос.Текст = Запрос.Текст +
					СтрШаблон(" И (ОбъектВыборки.Владелец.Наименование ПОДОБНО &%1
					|	ИЛИ ОбъектВыборки.Подразделение.Наименование ПОДОБНО &%1
					|	ИЛИ ОбъектВыборки.Должность.Наименование ПОДОБНО &%1)", ИмяПараметра);
				
			Иначе
				
				Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " ПОДОБНО &" + ИмяПараметра + "
				|";
				
			КонецЕсли;
			
		ИначеЕсли ОператорСравнения = "IN" Тогда
			
			Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " В (&" + ИмяПараметра + ")
			|";
			
		ИначеЕсли ОператорСравнения = "IN HIERARCHY" Тогда
			
			Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " В ИЕРАРХИИ(&" + ИмяПараметра + ")
			|";
			
		ИначеЕсли УсловиеОтбора.Поле = "anyDate" Тогда
			
			Запрос.Текст = Запрос.Текст + " И (";
			Если Сообщение.type = "DMFile" Тогда
				Запрос.Текст = Запрос.Текст + "
				|	" + УсловиеНаДату("ДатаСоздания", ОператорСравнения, ИмяПараметра) + "
				|	ИЛИ	" + УсловиеНаДату("ТекущаяВерсияДатаМодификацииФайла", ОператорСравнения, ИмяПараметра) + "
				|	ИЛИ	" + УсловиеНаДату("ТекущаяВерсияДатаСоздания", ОператорСравнения, ИмяПараметра) + "
				|";
			ИначеЕсли Сообщение.type = "DMDocument" Тогда
				Запрос.Текст = Запрос.Текст + "
				|	" + УсловиеНаДату("ДатаСоздания", ОператорСравнения, ИмяПараметра) + "
				|	ИЛИ	" + УсловиеНаДату("ДатаРегистрации", ОператорСравнения, ИмяПараметра) + "
				|";
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Условие на поле anyDate не поддерживается для объектов типа %1'"), Сообщение.type);
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + ")
			|";
			
		ИначеЕсли (УсловиеОтбора.Поле = "status") И (УсловиеОтбора.ОператорСравнения = "<>") Тогда
			
			Запрос.Текст = Запрос.Текст + " И " + ИмяСрезаСостояний + ".Документ ЕСТЬ NULL
			|";
			
		ИначеЕсли (УсловиеОтбора.Поле = "status") И (УсловиеОтбора.ОператорСравнения = "=") Тогда
			// Реализуется соединением.
			
		ИначеЕсли УсловиеОтбора.Поле = "anyCorrespondent" Тогда
			// Реализуется соединением.
			
		Иначе
			// Простейшее условие.
			Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " " + ОператорСравнения + " &" + ИмяПараметра + "
			|";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр(ИмяПараметра, Значение);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет запись в регистр СвязиОбъектовИнтегрированныхСистем по запросу DMAddObjectLinkRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMAddObjectLinkRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMAddObjectLinkResponse или типа DMError.
//
Функция ДобавитьСсылкуНаВнешнийОбъектПоЗапросу(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMAddObjectLinkResponse");
		
		Если Не ДобавитьСсылкуНаВнешнийОбъект(Сообщение.linkedObject, Сообщение.ownerObject) Тогда
			ВызватьИсключение НСтр("ru = 'Объект не найден'");
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при добавлении ссылки на внешний объект'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

Процедура ДобавитьУпорядочиваниеЗапроса(Запрос, Сообщение, Иерархический, ВидИерархииСправочника, ЕстьНаименование,
		ИспользуютсяПравилаКоммуникаций)
	
	ПоляУпорядочивания = Новый Массив;
	
	Если Сообщение.type = "DMEmployee" Тогда
		
		Если ИспользуютсяПравилаКоммуникаций Тогда
			ПоляУпорядочивания.Добавить("ЗапретПоПравиламКоммуникаций");
		КонецЕсли;
		ПоляУпорядочивания.Добавить("ОбъектВыборки.Владелец.Наименование");
		ПоляУпорядочивания.Добавить("ОбъектВыборки.Подразделение.Наименование");
		ПоляУпорядочивания.Добавить("ОбъектВыборки.Должность.Наименование");
		
	Иначе
		
		Если Иерархический
				И ВидИерархииСправочника = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			ПоляУпорядочивания.Добавить("ЭтоГруппа УБЫВ");
			Если ИспользуютсяПравилаКоммуникаций Тогда
				ПоляУпорядочивания.Добавить("ЗапретПоПравиламКоммуникаций");
			КонецЕсли;
			Если ЕстьНаименование Тогда
				ПоляУпорядочивания.Добавить("Наименование");
			КонецЕсли;
		ИначеЕсли ЕстьНаименование Тогда
			Если ИспользуютсяПравилаКоммуникаций Тогда
				ПоляУпорядочивания.Добавить("ЗапретПоПравиламКоммуникаций");
			КонецЕсли;
			ПоляУпорядочивания.Добавить("Наименование");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоляУпорядочивания.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + СтрШаблон("УПОРЯДОЧИТЬ ПО %1", СтрСоединить(ПоляУпорядочивания, ","));
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьНаименование(ОбъектМетаданных, ПолноеИмя)
	
	ЕстьНаименование = Ложь;
	Если Найти(ПолноеИмя, "Справочник.") > 0 Тогда
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			Если Реквизит.Имя = "Наименование" Тогда
				ЕстьНаименование = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьНаименование;
	
КонецФункции

Процедура ЗаписатьДанныеФайлов(ОбъектДО, ИсточникДанных)
	
	Если ИсточникДанных.ТипИсточника = "ОбъектXDTO"
			И СвойствоУстановлено(ИсточникДанных.ОбъектXDTO, "files") Тогда
		Файлы = ИсточникДанных.ОбъектXDTO.files;
	ИначеЕсли ИсточникДанных.ТипИсточника = "ВходящиеДанные" Тогда
		Файлы = ИсточникДанных.Файлы;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбработкаЗапросовXDTOФайлы.ЗаписатьДанныеФайлов(ОбъектДО, Файлы);
	
КонецПроцедуры

// Изменяет объекты Документооборота по данным объектов XDTO и возвращает измененные объекты.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMUpdateRequest. Запрос на запись.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMUpdateResponse.
//
Функция ЗаписатьОбъекты(Сообщение)
	
	Ответ = СоздатьОбъект("DMUpdateResponse");
	Если Сообщение.dataBaseId <> Неопределено Тогда
		Ответ.dataBaseId = Сообщение.dataBaseId;
	КонецЕсли;
	
	Для Каждого ОбъектXDTO Из Сообщение.objects Цикл
		
		СтруктураОтвета = СоздатьОбъект("DMObjectChangeResponseStructure");
		СтруктураОтвета.success = Истина;
		СкопироватьОбъектXDTO(СтруктураОтвета.key, ОбъектXDTO.objectId);
		
		Попытка
			
			Ссылка = ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
			ОбъектДО = Ссылка.ПолучитьОбъект();
			
			Ошибка = ОписаниеОшибкиXDTO();
			ИсточникДанных = ИсточникОбъектXDTO(ОбъектXDTO, ОбъектXDTO.objectId.type);
			
			Если Не ЗаписатьДанныеОбъектаДО(ОбъектДО, ИсточникДанных, Ошибка) Тогда
				СтруктураОтвета.success = Ложь;
				СтруктураОтвета.error = Ошибка;
				Ответ.objects.Добавить(СтруктураОтвета);
				Продолжить;
			КонецЕсли;
			
			ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(
				Ссылка,
				НСтр("ru = 'Изменение объекта через веб-сервис 1С:Документооборота'"));
			
			// Получим объект заново, так как после записи он мог измениться.
			Результат = ПолучитьОбъектXDTOПоСуществующимДаннымДО(Ссылка.ПолучитьОбъект(), Неопределено);
			
		Исключение
			ЗаголовокОшибки = НСтр("ru = 'Ошибка при записи объекта ДО'");
			ТекстОшибкиМассив = Новый Массив;
			ТекстОшибкиМассив.Добавить(СтрШаблон(НСтр(
					"ru = 'Ошибка при изменении объекта типа %1.
					|Ссылка на объект %2'"),
				ОбъектXDTO.Тип(),
				ПолучитьНавигационнуюСсылку(Ссылка)));
			ТекстОшибкиМассив.Добавить(НСтр("ru = 'Текст ошибки:'"));
			ТекстОшибкиМассив.Добавить(ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
			СтруктураОтвета.success = Ложь;
			СтруктураОтвета.error = ОписаниеОшибкиXDTO(ЗаголовокОшибки, СтрСоединить(ТекстОшибкиМассив, Символы.ПС));
			Ответ.objects.Добавить(СтруктураОтвета);
			Продолжить;
		КонецПопытки;
		
		Если ПроверитьТип(Результат, "DMError") Тогда
			СтруктураОтвета.success = Ложь;
			СтруктураОтвета.error = Результат;
		Иначе
			СтруктураОтвета.object = Результат;
		КонецЕсли;
		Ответ.objects.Добавить(СтруктураОтвета);
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Изменяет объекты Документооборота из входящих данных по правилам загрузки и возвращает измененные объекты.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMUpdateFromIncomingDataRequest. Запрос на запись.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMUpdateFromIncomingDataResponse.
//
Функция ЗаписатьОбъектыПоПравиламЗагрузки(Сообщение)
	
	Ответ = СоздатьОбъект("DMUpdateFromIncomingDataResponse");
	Если Сообщение.dataBaseId <> Неопределено Тогда
		Ответ.dataBaseId = Сообщение.dataBaseId;
	КонецЕсли;
	
	Для Каждого Объект Из Сообщение.objects Цикл
		
		СтруктураОтвета = СоздатьОбъект("DMObjectChangeResponseStructure");
		СтруктураОтвета.success = Истина;
		СкопироватьОбъектXDTO(СтруктураОтвета.key, Объект.updatingObject);
		
		Ошибка = ОписаниеОшибкиXDTO(НСтр("ru = 'Ошибка при записи объекта ДО'"));
		
		СписокОшибок = Новый Массив;
		
		ОшибкаПолучитьСсылкуПоObjectID = "";
		СсылкаНаОбъектДО = ПолучитьСсылкуПоObjectID(Объект.updatingObject, Ложь, ОшибкаПолучитьСсылкуПоObjectID);
		Если Не ЗначениеЗаполнено(СсылкаНаОбъектДО) Тогда
			СписокОшибок.Добавить(
				СтрШаблон(НСтр(
					"ru = 'Не удалось получить ссылку на объект 1С:Документооборота, который требуется изменить.
					|Идентификатор объекта: %1
					|Тип объекта: %2
					|Сообщение об ошибке: %3'"),
					Объект.updatingObject.ID,
					Объект.updatingObject.type,
					ОшибкаПолучитьСсылкуПоObjectID));
		КонецЕсли;
		
		ОшибкаПолучитьСсылкуПоObjectID = "";
		СсылкаНаПравилоЗагрузки = ПолучитьСсылкуПоObjectID(Объект.dataLoadingRule, Ложь, ОшибкаПолучитьСсылкуПоObjectID);
		Если Не ЗначениеЗаполнено(СсылкаНаПравилоЗагрузки) Тогда
			СписокОшибок.Добавить(
				СтрШаблон(НСтр(
					"ru = 'Не удалось получить ссылку на правило загрузки данных в 1С:Документооборот.
					|Идентификатор правила загрузки: %1
					|Тип объекта правила загрузки: %2
					|Сообщение об ошибке: %3'"),
					Объект.dataLoadingRule.ID,
					Объект.dataLoadingRule.type,
					ОшибкаПолучитьСсылкуПоObjectID));
		КонецЕсли;
		
		Если СписокОшибок.Количество() > 0 Тогда
			Ошибка.description = СтрСоединить(СписокОшибок, Символы.ПС);
			СтруктураОтвета.success = Ложь;
			СтруктураОтвета.error = Ошибка;
			Ответ.objects.Добавить(СтруктураОтвета);
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ОбъектДО = СсылкаНаОбъектДО.ПолучитьОбъект();
			ПравилоЗагрузкиДанных = СсылкаНаПравилоЗагрузки.ПолучитьОбъект();
			
			ИсточникДанных = ИсточникВходящиеДанные(Объект.incomingData, ПравилоЗагрузкиДанных, Объект.files, Истина);
			Если СвойствоУстановлено(Объект, "externalObject") Тогда
				ИсточникДанных.ВнешнийОбъект.ID = Объект.externalObject.ID;
				ИсточникДанных.ВнешнийОбъект.Тип = Объект.externalObject.type;
			КонецЕсли;
			
			Если Не ЗаписатьДанныеОбъектаДО(ОбъектДО, ИсточникДанных, Ошибка) Тогда
				СтруктураОтвета.success = Ложь;
				СтруктураОтвета.error = Ошибка;
				Ответ.objects.Добавить(СтруктураОтвета);
				Продолжить;
			КонецЕсли;
			
			Результат = ПолучитьОбъектXDTOПоСуществующимДаннымДО(ОбъектДО, Неопределено);
			
		Исключение
			ЗаголовокОшибки = НСтр("ru = 'Ошибка при записи объекта ДО'");
			ТекстОшибкиМассив = Новый Массив;
			ТекстОшибкиМассив.Добавить(СтрШаблон(НСтр(
					"ru = 'Ошибка при изменении объекта типа %1.
					|Ссылка на объект %2'"),
				Объект.updatingObject.type,
				ПолучитьНавигационнуюСсылку(СсылкаНаОбъектДО)));
			ТекстОшибкиМассив.Добавить(НСтр("ru = 'Текст ошибки:'"));
			ТекстОшибкиМассив.Добавить(ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
			СтруктураОтвета.success = Ложь;
			СтруктураОтвета.error = ОписаниеОшибкиXDTO(ЗаголовокОшибки, СтрСоединить(ТекстОшибкиМассив, Символы.ПС));
			Ответ.objects.Добавить(СтруктураОтвета);
			Продолжить;
		КонецПопытки;
		
		Если ПроверитьТип(Результат, "DMError") Тогда
			СтруктураОтвета.success = Ложь;
			СтруктураОтвета.error = Результат;
		Иначе
			СтруктураОтвета.object = Результат;
		КонецЕсли;
		Ответ.objects.Добавить(СтруктураОтвета);
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Записывает штрихкоды объекта по запросу DMUpdateBarcodesRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMUpdateBarcodesRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMUpdateBarcodesResponse или DMError.
//
Функция ЗаписатьШтрихкодыОбъекта(Сообщение)
	
	Попытка
		
		ШтрихкодыОбъекта = Сообщение.objectBarcodes;
		Если ШтрихкодыОбъекта.objectId.type = "DMDocument" Тогда
			Менеджер = Справочники.ДокументыПредприятия;
		ИначеЕсли ШтрихкодыОбъекта.objectId.type = "DMFile" Тогда
			Менеджер = Справочники.Файлы;
		Иначе
			ВызватьИсключение НСтр("ru = 'Штрихкоды для объектов этого типа не поддерживаются'");
		КонецЕсли;
		
		Владелец = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ШтрихкодыОбъекта.objectId.ID));
		
		// Штрихкоды, которые следует добавить к уже существующим в базе.
		ШтрихкодыКДобавлению = Новый ТаблицаЗначений;
		ШтрихкодыКДобавлению.Колонки.Добавить("ВнутреннийШтрихкод");
		ШтрихкодыКДобавлению.Колонки.Добавить("Код");
		Для каждого Штрихкод Из ШтрихкодыОбъекта.barcodes Цикл
			ШтрихкодКДобавлению = ШтрихкодыКДобавлению.Добавить();
			ШтрихкодКДобавлению.ВнутреннийШтрихкод = Штрихкод.internal;
			ШтрихкодКДобавлению.Код = Штрихкод.barcodeData;
		КонецЦикла;
		
		// Выберем уже существующие штрихкоды и удалим лишнее.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Штрихкоды.ВнутреннийШтрихкод,
			|	Штрихкоды.Код
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Владелец);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НачатьТранзакцию();
		
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска = Новый Структура("ВнутреннийШтрихкод, Код", Выборка.ВнутреннийШтрихкод, Выборка.Код);
			НайденныеСтроки = ШтрихкодыКДобавлению.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Запись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
				Запись.Владелец = Владелец;
				Запись.ВнутреннийШтрихкод = Выборка.ВнутреннийШтрихкод;
				Запись.Код = Выборка.Код;
				Запись.Удалить();
			Иначе
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ШтрихкодыКДобавлению.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ШтрихкодКДобавлению Из ШтрихкодыКДобавлению Цикл
			Запись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
			Запись.Владелец = Владелец;
			Запись.ВнутреннийШтрихкод = ШтрихкодКДобавлению.ВнутреннийШтрихкод;
			Запись.Код = ШтрихкодКДобавлению.Код;
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Ответ = СоздатьОбъект("DMUpdateBarcodesResponse");
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при записи штрихкодов'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Дополняет объект XDTO значениями ключевых реквизитов, которые могут потребоваться на стороне интегрированной
// системы при подборе или создании объектов ИС на основании объектов ДО.
//
// Параметры:
//   ОбъектДО - СправочникОбъект - объект Документооборота, источник данных.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO который требуется дополнить.
//   ТипРеквизита - Тип - тип объекта Документооборота.
//   ТипXDTOОбъекта - Строка - имя типа XDTO объекта.
//
Процедура ЗаполнитьКлючевыеРеквизитыОбъектаXDTO(ОбъектДО, ОбъектXDTO, ТипРеквизита, ТипXDTOОбъекта)
	
	НаборКолонок = Новый Массив;
	
	Если ТипРеквизита = Тип("СправочникСсылка.Контрагенты") И ТипXDTOОбъекта = "DMCorrespondent" Тогда
		НаборКолонок.Добавить("inn");
		НаборКолонок.Добавить("kpp");
		НаборКолонок.Добавить("okpo");
		НаборКолонок.Добавить("registrationNumber");
		НаборКолонок.Добавить("fullName");
		НаборКолонок.Добавить("comment");
		НаборКолонок.Добавить("privatePerson");
		НаборКолонок.Добавить("responsible");
		НаборКолонок.Добавить("legalPrivatePerson");
		
	ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.Организации") И ТипXDTOОбъекта = "DMOrganization" Тогда
		НаборКолонок.Добавить("inn");
		НаборКолонок.Добавить("kpp");
		НаборКолонок.Добавить("okpo");
		НаборКолонок.Добавить("fullName");
		НаборКолонок.Добавить("comment");
		НаборКолонок.Добавить("prefix");
		НаборКолонок.Добавить("VATpayer");
		НаборКолонок.Добавить("legalPrivatePerson");
		
	ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.СтруктураПредприятия") И ТипXDTOОбъекта = "DMSubdivision" Тогда
		РуководительПодразделения = СтруктураПредприятия.РуководительПодразделения(ОбъектДО.Ссылка);
		Если ЗначениеЗаполнено(РуководительПодразделения) Тогда
			ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, "head", РуководительПодразделения, Ложь);
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.Сотрудники") И ТипXDTOОбъекта = "DMEmployee" Тогда
		НаборКолонок.Добавить("position");
		НаборКолонок.Добавить("subdivision");
		НаборКолонок.Добавить("privatePerson");
		НаборКолонок.Добавить("beginDate");
		НаборКолонок.Добавить("endDate");
		НаборКолонок.Добавить("isActual");
		НаборКолонок.Добавить("user");
		
	ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ФизическиеЛица") И ТипXDTOОбъекта = "DMPrivatePerson" Тогда
		НаборКолонок.Добавить("birthDay");
		НаборКолонок.Добавить("gender");
		
	ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.БанковскиеСчета") И ТипXDTOОбъекта = "DMBankAccount" Тогда
		НаборКолонок.Добавить("number");
		НаборКолонок.Добавить("bank");
		НаборКолонок.Добавить("owner");
		
	ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.СтавкиНДС") И ТипXDTOОбъекта = "DMVATRateUniversal" Тогда
		НаборКолонок.Добавить("rate");
		НаборКолонок.Добавить("calculatedRate");
		НаборКолонок.Добавить("country");
		НаборКолонок.Добавить("predefinedName");
		
	ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.СтраныМира") И ТипXDTOОбъекта = "DMCountry" Тогда
		НаборКолонок.Добавить("code");
		
	КонецЕсли;
	
	ОбработкаЗапросовXDTOПереопределяемый.ПриОпределенииНабораКолонокДляЗаполненияКлючевыхРеквизитовОбъектаXDTO(
		НаборКолонок,
		ОбъектДО,
		ОбъектXDTO,
		ТипРеквизита,
		ТипXDTOОбъекта);
	
	Если НаборКолонок.Количество() > 0 Тогда
		ПолучитьДанныеОбъектаДО(ОбъектДО, ОбъектXDTO, ТипXDTOОбъекта, НаборКолонок);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет свойства объекта DMObjectListItem из результата запроса.
//
// Параметры:
//   Ответ - ОбъектXDTO - Неявно возвращаемое значение, объект XDTO типа DMObjectListItem.
//   Запрос - Запрос - Запрос, выбирающий реквизиты объекта.
//   ПараметрыЗаполнения - см. ПараметрыЗаполненияОтветаСписокВыбораОбъектов
//   ПараметрыВыборки - см. ПараметрыВыборкиОбъектов
//
Процедура ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПараметрыЗаполнения, ПараметрыВыборки)
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Возможно, в выборке больше элементов, чем запрашивалось.
		Если ПараметрыЗаполнения.ПредельноеКоличествоЭлементов <> 0
				И Ответ.items.Количество() >= ПараметрыЗаполнения.ПредельноеКоличествоЭлементов Тогда
			Ответ.tooManyObjects = Истина;
			Прервать;
		КонецЕсли;
		
		Элемент = СоздатьОбъект("DMObjectListItem");
		
		Если ПараметрыВыборки.ПолучатьВсеДанные Тогда
			Элемент.object = ПолучитьОбъектXDTOПоСуществующимДаннымДО(Выборка.Ссылка, Неопределено);
		Иначе
			Элемент.object = СоздатьОбъект(ПараметрыЗаполнения.ИмяТипа);
			Элемент.object.name = Выборка.Наименование;
			Элемент.object.objectId = ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
			Для Каждого ИмяСвойства Из ПараметрыЗаполнения.ИменаСвойств Цикл
				ЗначениеРеквизита = Выборка[ИмяСвойства];
				ЗаполнитьСвойствоXDTOИзРеквизита(Элемент.object, ИмяСвойства, ЗначениеРеквизита);
			КонецЦикла;
		КонецЕсли;
		
		Элемент.canHaveChildren = Ложь;
		Элемент.isFolder = Ложь;
		
		Если ПараметрыЗаполнения.ЭтоСправочник Тогда
			
			Если ПараметрыЗаполнения.Иерархический Тогда
				Элемент.parentId = ПолучитьObjectIDПоСсылке(Выборка.Родитель);
				
				Если ПараметрыЗаполнения.ВидИерархииСправочника =
						Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
					Элемент.canHaveChildren = Истина;
				Иначе
					Элемент.isFolder = Выборка.ЭтоГруппа;
					Элемент.canHaveChildren = Выборка.ЭтоГруппа;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыЗаполнения.ВключатьДанныеПравилКоммуникаций
				И СвойствоСуществует(Элемент.object, "isNotAvailableAccordingCommunicationRules") Тогда
			Элемент.object.isNotAvailableAccordingCommunicationRules = Выборка.ЗапретПоПравиламКоммуникаций;
		КонецЕсли;
		
		Ответ.items.Добавить(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуПревышенияВремениВыполнения(ВремяВыполнения, Сообщение, Результат)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		СтрШаблон(НСтр("ru = 'Превышено время ожидания выполнения запроса.
			|Время выполнения: %1
			|
			|Текст запроса:
			|%2
			|
			|Результат запроса:
			|%3'"),
				ВремяВыполнения,
				ТекстОбъектаXDTOДляЖР(Сообщение),
				ТекстОбъектаXDTOДляЖР(Результат)));
	
КонецПроцедуры

// Возвращает структуру с массивами для последующего отбора
//
Функция ИсключающиеСостоянияДокументов()
	
	СостоянияДокументов = Новый Структура;
	
	ИсключающиеСостояния = Новый Массив;
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаСогласовании);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НеСогласован);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Согласован);
	СостоянияДокументов.Вставить("statusApproval", ИсключающиеСостояния);
	
	ИсключающиеСостояния = Новый Массив;
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаПодписании);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Отклонен);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Подписан);
	СостоянияДокументов.Вставить("statusSigning", ИсключающиеСостояния);
	
	ИсключающиеСостояния = Новый Массив;
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаУтверждении);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НеУтвержден);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Утвержден);
	СостоянияДокументов.Вставить("statusConfirmation", ИсключающиеСостояния);
	
	ИсключающиеСостояния = Новый Массив;
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Проект);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаРегистрации);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Зарегистрирован);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НеЗарегистрирован);
	СостоянияДокументов.Вставить("statusRegistration", ИсключающиеСостояния);
	
	ИсключающиеСостояния = Новый Массив;
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаРассмотрении);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Рассмотрен);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаИсполнении);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.Исполнен);
	СостоянияДокументов.Вставить("statusPerformance", ИсключающиеСостояния);
	
	ИсключающиеСостояния = Новый Массив;
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.НаОзнакомлении);
	ИсключающиеСостояния.Добавить(Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено);
	СостоянияДокументов.Вставить("statusExamination", ИсключающиеСостояния);
	
	Возврат СостоянияДокументов;
	
КонецФункции

// Возвращает контекст правил коммуникаций по его сериализованному представлению.
//
// Параметры:
//   КонтекстXDTO - СписокXDTO - список XDTO, содержащий контекст правил коммуникаций.
//
// Возвращаемое значение:
//   Структура:
//     * Ссылка - СправочникСсылка.ДокументыПредприятия,
//                ДокументСсылка.Задача,
//                БизнесПроцессСсылка - предмет, в рамках которого осуществляется коммуникация.
//     * Действие - ОпределяемыйТип.Действия - действие, в рамках которого осуществляется коммуникация.
//     * Инициатор - СправочникСсылка.Сотрудники - инициатор коммуникации.
//     * ФункцияУчастника - ПеречислениеСсылка.ФункцииУчастниковИсполнения,
//                          ПеречислениеСсылка.ФункцииУчастниковОзнакомления,
//                          ПеречислениеСсылка.ФункцииУчастниковПодписания,
//                          ПеречислениеСсылка.ФункцииУчастниковРегистрации,
//                          ПеречислениеСсылка.ФункцииУчастниковСогласования,
//                          ПеречислениеСсылка.ФункцииУчастниковУтверждения - функция участника коммуникации.
//     * Этап - Строка - наименование этапа.
//     * ИмяПоля - Строка - имя поля, из которого осуществлен вызов.
//
Функция КонтекстПравилКоммуникацийПоСпискуXDTO(КонтекстXDTO)
	
	Контекст = Новый Структура;
	
	Для Каждого Элемент Из КонтекстXDTO Цикл
		
		Если Врег(Элемент.name) = ВРег("ref") Тогда
			Контекст.Вставить("Ссылка", ПолучитьСсылкуПоObjectID(Элемент.objectValue));
			
		ИначеЕсли Врег(Элемент.name) = ВРег("action") Тогда
			Контекст.Вставить("Действие", ПолучитьСсылкуПоObjectID(Элемент.objectValue));
			
		ИначеЕсли Врег(Элемент.name) = ВРег("initiator") Тогда
			Контекст.Вставить("Инициатор", ПолучитьСсылкуПоObjectID(Элемент.objectValue));
			
		ИначеЕсли Врег(Элемент.name) = ВРег("participantFunction") Тогда
			Контекст.Вставить("ФункцияУчастника",
				ПолучитьЗначениеПеречисленияДО("DMActionParticipantFunction", Элемент.simpleValue));
			
		ИначеЕсли Врег(Элемент.name) = ВРег("pointName") Тогда
			Контекст.Вставить("Этап", Элемент.simpleValue);
			
		ИначеЕсли Врег(Элемент.name) = ВРег("fieldName") Тогда
			Контекст.Вставить("ИмяПоля",
				ПолучитьЗначениеПеречисленияДО("DMCommunicationRulesContextFieldName", Элемент.simpleValue));
			
		ИначеЕсли Врег(Элемент.name) = ВРег("target") Тогда
			Контекст.Вставить("Предметы",
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПолучитьСсылкуПоObjectID(Элемент.objectValue)));
			
		ИначеЕсли Врег(Элемент.name) = ВРег("from") Тогда
			Контекст.Вставить("ОтКого", ПолучитьСсылкуПоObjectID(Элемент.objectValue));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Контекст;
	
КонецФункции

// Ищет объект по штрихкоду по запросу DMFindByBarcodeRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMFindByBarcodeRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMFindByBarcodeResponse.
//
Функция НайтиОбъектПоШтрихкоду(Сообщение)
	
	Ответ = СоздатьОбъект("DMFindByBarcodeResponse");
	
	ЗапросВладелец = Новый Запрос(
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Код = &Код");
	ЗапросВладелец.УстановитьПараметр("Код", Сообщение.barcodeData);
	
	ВыборкаВладелец = ЗапросВладелец.Выполнить().Выбрать();
	Пока ВыборкаВладелец.Следующий() Цикл
		
		Владелец = СоздатьObjectID(Строка(ВыборкаВладелец.Владелец.УникальныйИдентификатор()));
		Если ТипЗнч(ВыборкаВладелец.Владелец) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			Владелец.type = "DMDocument";
		ИначеЕсли ТипЗнч(ВыборкаВладелец.Владелец) = Тип("СправочникСсылка.Файлы") Тогда
			Владелец.type = "DMFile";
		КонецЕсли;
		
		Ответ.objects.Добавить(Владелец);
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Находит подходящий или создает новый объект и возвращает ссылку на него.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект требуемого типа.
//   ПолноеИмяТипаОбъектаДО - Строка - имя типа объекта ДО.
//   Владелец - СправочникСсылка - владелец объекта, который требуется найти или создать.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на найденный или вновь созданный объект Документооборота.
//
Функция НайтиСоздатьВнешнийОбъект(ОбъектXDTO, Знач ПолноеИмяТипаОбъектаДО = Неопределено, Владелец = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяТипаXDTO = СтрЗаменить(ОбъектXDTO.Тип(), "{http://www.1c.ru/dm}", "");
	СоответствующееИмяТипаОбъектаДО = "";
	ПолучитьТипДОПоТипуXDTO(ИмяТипаXDTO, СоответствующееИмяТипаОбъектаДО, Ложь);
	
	Если ПолноеИмяТипаОбъектаДО = Неопределено Тогда
		// Мы не знаем какой объект ДО мы хотим найти или создать.
		// Определим тип объекта ДО, исходя из типа входящих данных в ОбъектXDTO.
		ПолноеИмяТипаОбъектаДО = СоответствующееИмяТипаОбъектаДО;
	Иначе
		// Мы заранее знаем какой тип объекта ДО хотим найти или создать.
		// Но входящие данные в ОбъектXDTO могут быть произвольного типа, например DMObject.
		ИмяТипаXDTO = ПолучитьТипXDTOПоТипуДО(ПолноеИмяТипаОбъектаДО, (ИмяТипаXDTO <> "DMObject"));
		Если ИмяТипаXDTO = Неопределено Тогда
			ИмяТипаXDTO = "DMObject";
		КонецЕсли;
	КонецЕсли;
	
	Ошибка = "";
	ИсточникДанных = ИсточникОбъектXDTO(ОбъектXDTO, ИмяТипаXDTO);
	
	// Синхронизация по идентификатору объекта ИС.
	Ссылка = СправочникСсылкаПоОбъектуXDTO(ОбъектXDTO, ПолноеИмяТипаОбъектаДО);
	Если Ссылка <> Неопределено Тогда
		ОбъектДО = Ссылка.ПолучитьОбъект();
		Если Не ЗаписатьДанныеОбъектаДО(ОбъектДО, ИсточникДанных, Ошибка) Тогда
			ВызватьИсключение Ошибка;
		КонецЕсли;
		Возврат Ссылка;
	КонецЕсли;
	
	// Стандартный поиск.
	Если ИмяТипаXDTO = "DMObjectPropertyValue" Тогда
		Возврат НайтиСоздатьДополнительноеЗначениеСвойстваОбъекта(ОбъектXDTO, Владелец);
	ИначеЕсли ИмяТипаXDTO = "DMObject" Тогда
		Если СтрНайти(ПолноеИмяТипаОбъектаДО, "Справочник.") > 0 Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяТипаОбъектаДО);
			Ссылка = Менеджер.НайтиПоНаименованию(ОбъектXDTO.name, Истина,, Владелец);
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Возврат Ссылка;
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Элемент с именем ""%1"" не найден среди объектов типа ""%2""'"),
				ОбъектXDTO.name,
				ПолноеИмяТипаОбъектаДО);
		КонецЕсли;
	Иначе
		Ссылка = НайтиОбъектДОПоСтандартнымПолямПоиска(ОбъектXDTO, ИмяТипаXDTO, ПолноеИмяТипаОбъектаДО, Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ОбъектДО = Ссылка.ПолучитьОбъект();
		Если Не ЗаписатьДанныеОбъектаДО(ОбъектДО, ИсточникДанных, Ошибка) Тогда
			ВызватьИсключение Ошибка;
		КонецЕсли;
	Иначе
		ОбъектДО = СоздатьОбъектДО(ИсточникДанных, Ошибка, Владелец);
		Если ОбъектДО = Неопределено Тогда
			Ошибка = СтрШаблон(
				"<----->
				|%1
				|<----->
				|",
				Ошибка);
			ВызватьИсключение Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектДО.Ссылка;
	
КонецФункции

Функция НайтиСоздатьДополнительноеЗначениеСвойстваОбъекта(ЗначениеСвойстваXDTO, ОбъектСвойство)
	
	Если Не ЗначениеЗаполнено(ЗначениеСвойстваXDTO.objectId.ID)
			И Не ЗначениеЗаполнено(ЗначениеСвойстваXDTO.objectId.type)
			И СвойствоУстановлено(ЗначениеСвойстваXDTO, "externalObject") Тогда
		
		// Определим значение по записи в регистре связей значений свойств.
		ЗначениеСвойства = РегистрыСведений.СвязиЗначенийСвойствИОбъектовИнтегрированныхСистем.ПолучитьЗначениеСвойства(
			ЗначениеСвойстваXDTO.externalObject.ID,
			ЗначениеСвойстваXDTO.externalObject.type,
			ОбъектСвойство);
		
		Если ЗначениеСвойства = Неопределено Тогда
			
			// Найдем значение свойства по наименованию или создадим его.
			ТипыЗначения = ОбъектСвойство.ТипЗначения.Типы();
			Если ТипыЗначения.Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено Тогда
				ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(
					ЗначениеСвойстваXDTO.name,
					Истина,,
					ОбъектСвойство);
				Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					ЗначениеСвойстваОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
					ЗначениеСвойстваОбъект.Владелец = ОбъектСвойство;
					ЗначениеСвойстваОбъект.Наименование = ЗначениеСвойстваXDTO.name;
					ЗначениеСвойстваОбъект.Записать();
					ЗначениеСвойства = ЗначениеСвойстваОбъект.Ссылка;
				КонецЕсли;
				
			ИначеЕсли ТипыЗначения.Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")) <> Неопределено Тогда
				ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектовИерархия.НайтиПоНаименованию(
					ЗначениеСвойстваXDTO.name,
					Истина,,
					ОбъектСвойство);
				Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					ЗначениеСвойстваОбъект = Справочники.ЗначенияСвойствОбъектовИерархия.СоздатьЭлемент();
					ЗначениеСвойстваОбъект.Владелец = ОбъектСвойство;
					ЗначениеСвойстваОбъект.Наименование = ЗначениеСвойстваXDTO.name;
					ЗначениеСвойстваОбъект.Записать();
					ЗначениеСвойства = ЗначениеСвойстваОбъект.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
			// Запишем связь созданного или найденного по наименованию свойства для использования в дальнейшем.
			Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
				РегистрыСведений.СвязиЗначенийСвойствИОбъектовИнтегрированныхСистем.ЗаписатьСвязь(
					ЗначениеСвойстваXDTO.externalObject.ID,
					ЗначениеСвойстваXDTO.externalObject.type,
					ОбъектСвойство,
					ЗначениеСвойства);
			КонецЕсли;
			
		Иначе
			// Значение найдено в регистре связей, но, возможно, следует изменить наименование.
			НаименованиеЗначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСвойства, "Наименование");
			Если НаименованиеЗначения <> ЗначениеСвойстваXDTO.name Тогда
				ЗначениеСвойстваОбъект = ЗначениеСвойства.ПолучитьОбъект();
				ЗначениеСвойстваОбъект.Наименование = ЗначениеСвойстваXDTO.name;
				ЗначениеСвойстваОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ЗначениеСвойства = ПолучитьСсылкуПоObjectID(ЗначениеСвойстваXDTO.objectId);
	КонецЕсли;
	
	Возврат ЗначениеСвойства;
	
КонецФункции

// Возвращает объект DMBatchResponse, содержащий результаты выполнения пакетного запроса
//
Функция ОбработатьПакет(Сообщение)
	
	Попытка
		
		ПакетОтветов = СоздатьОбъект("DMBatchResponse");
		
		Для Каждого СообщениеПакета Из Сообщение.Requests Цикл
			
			Ответ = ОбработатьУниверсальноеСообщение(СообщениеПакета);
			ПакетОтветов.responses.Добавить(Ответ);
			
		КонецЦикла;
		
		Возврат ПакетОтветов;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при обработке пакета сообщений'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

Функция ОбъектПоддерживаетПроверкуУсловийДопСвойств(ОписаниеОбъекта)
	
	Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(ОписаниеОбъекта.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоШаблонДокумента(ОписаниеОбъекта.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Очищает во всех записях регистра СвязиОбъектовИнтегрированныхСистем реквизит ЕстьОбратнаяСвязьВУзле.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMClearFeedbackMarkInObjectLinksRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMOK или типа DMError.
//
Функция ОчиститьПризнакЕстьОбратнаяСвязьВУзле(Сообщение) Экспорт
	
	Попытка
		
		РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ОчиститьПризнакЕстьОбратнаяСвязьВУзле();
		Возврат СоздатьОбъект("DMOK");
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			СтрШаблон(
				НСтр("ru = 'Ошибка при очистке признака ""%1"" в регистре сведений ""%2""'"),
				Метаданные.РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.Реквизиты.ЕстьОбратнаяСвязьВУзле.Синоним,
				Метаданные.РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.Синоним),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Возвращает параметры выборки объектов.
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение, содержащее параметры, которые необходимо получить.
//   ИмяТипа - Строка - имя типа.
//   Иерархический - Булево - признак того, что тип является иерархическим.
//   СвойстваИРеквизиты - см. СоответствиеСвойствXDTOРеквизитамПоиска.
//
// Возвращаемое значение:
//   Структура:
//     * ВключатьПомеченныеНаУдаление - Булево.
//     * ПолучатьВсеДанные - Булево.
//     * ПредельноеКоличествоВыбираемыхОбъектов - Число.
//     * НаборКолонок - Массив Из Строка.
//     * ВыбранныйЭлемент - Строка.
//     * ПравилаКоммуникаций - см. КонтекстПравилКоммуникацийПоСпискуXDTO.
//     * УсловияОтбора - ТаблицаЗначений:
//       ** Поле - Строка.
//       ** ОператорСравнения - Строка.
//       ** Значение - Произвольный.
//
Функция ПараметрыВыборкиОбъектов(Сообщение, ИмяТипа, Иерархический, СвойстваИРеквизиты)
	
	ПараметрыВыборки = Новый Структура;
	ПараметрыВыборки.Вставить("ВключатьПомеченныеНаУдаление", Ложь);
	ПараметрыВыборки.Вставить("ПолучатьВсеДанные", Ложь);
	ПараметрыВыборки.Вставить("ПредельноеКоличествоВыбираемыхОбъектов", 0);
	ПараметрыВыборки.Вставить("НаборКолонок", Новый Массив);
	ПараметрыВыборки.Вставить("ВыбранныйЭлемент", Неопределено);
	ПараметрыВыборки.Вставить("ПравилаКоммуникаций", Неопределено);
	
	УсловияОтбора = Новый ТаблицаЗначений;
	УсловияОтбора.Колонки.Добавить("Поле");
	УсловияОтбора.Колонки.Добавить("ОператорСравнения");
	УсловияОтбора.Колонки.Добавить("Значение");
	
	ПараметрыВыборки.Вставить("УсловияОтбора", УсловияОтбора);
	
	Если Сообщение.query <> Неопределено Тогда
		
		ДокументИз = Неопределено;
		ДокументНа = Неопределено;
		Предопределенные = Неопределено;
		Обязательные = Неопределено;
		
		// Соберем условия в таблицу, уточнив операторы сравнения и значения.
		Для Каждого Условие Из Сообщение.query.conditions Цикл
			
			// Старые версии клиентов могут не устанавливать это свойство.
			ОператорСравнения = ?(СвойствоУстановлено(Условие, "comparisonOperator"),
				Условие.comparisonOperator,
				"");
			
			// Специальные поля поиска.
			Если ВРег(Условие.property) = ВРег("SelectedItem") Тогда
				ПараметрыВыборки.ВыбранныйЭлемент = ПолучитьСсылкуПоObjectID(Условие.value);
				
			ИначеЕсли ВРег(Условие.property) = ВРег("ignoreDeletionMark") Тогда
				ПараметрыВыборки.ВключатьПомеченныеНаУдаление = Условие.value;
				
			ИначеЕсли ВРег(Условие.property) = ВРег("getAllData") Тогда
				ПараметрыВыборки.ПолучатьВсеДанные = Условие.value;
				
			ИначеЕсли Врег(Условие.property) = Врег("communicationRulesContext") Тогда
				ПараметрыВыборки.ПравилаКоммуникаций = КонтекстПравилКоммуникацийПоСпискуXDTO(Условие.valueList);
				
			ИначеЕсли ВРег(Условие.property) = ВРег("Parent") Тогда
				УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "ОбъектВыборки.Родитель";
				УсловиеОтбора.ОператорСравнения = ОператорСравнения;
				УсловиеОтбора.Значение = ПолучитьСсылкуПоObjectID(Условие.value);
				
			ИначеЕсли ВРег(Условие.property) = ВРег("Name") Тогда
				УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "ОбъектВыборки.Наименование";
				УсловиеОтбора.ОператорСравнения = ОператорСравнения;
				УсловиеОтбора.Значение = Условие.value;
				
			ИначеЕсли ВРег(Условие.property) = ВРег("correspondent")
					И Сообщение.Type = "DMContactPerson" Тогда
				УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "ОбъектВыборки.Владелец";
				УсловиеОтбора.ОператорСравнения = ОператорСравнения;
				УсловиеОтбора.Значение = ПолучитьСсылкуПоObjectID(Условие.value);
				
			ИначеЕсли ВРег(Условие.property) = ВРег("additionalPropertyID")
					И Сообщение.Type = "DMObjectPropertyValue"
					И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Условие.value) Тогда
				УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "ОбъектВыборки.Владелец";
				УсловиеОтбора.ОператорСравнения = ОператорСравнения;
				УсловиеОтбора.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(
					Новый УникальныйИдентификатор(Условие.value));
				
			ИначеЕсли ВРег(Условие.property) = ВРег("AdditionalProperty")
					И (Сообщение.Type = "DMObjectPropertyValue"
						Или Сообщение.Type = "DMObjectPropertyValueHierarchy") Тогда
				Продолжить;
				
			ИначеЕсли ВРег(Условие.property) = ВРег("documentType") Тогда
				УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "ОбъектВыборки.ВидДокумента";
				УсловиеОтбора.ОператорСравнения = ОператорСравнения;
				УсловиеОтбора.Значение = ПолучитьСсылкуПоObjectID(Условие.value);
				
			ИначеЕсли ВРег(Условие.property) = ВРег("anyDate") Тогда
				УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "anyDate";
				УсловиеОтбора.ОператорСравнения = ОператорСравнения;
				УсловиеОтбора.Значение = Условие.value;
				
			ИначеЕсли ВРег(Условие.property) = ВРег("status") Тогда
				УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "status";
				УсловиеОтбора.ОператорСравнения = ОператорСравнения;
				УсловиеОтбора.Значение = ПолучитьСсылкуПоObjectID(Условие.value);
				
			ИначеЕсли ВРег(Условие.property) = ВРег("ExternalObject") Тогда
				УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "ОбъектВыборки.Ссылка";
				УсловиеОтбора.ОператорСравнения = ?(ЗначениеЗаполнено(ОператорСравнения),
					ОператорСравнения,
					"IN");
				УсловиеОтбора.Значение =
					РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ПолучитьОбъектыДОПоВнешнемуОбъекту(
						Условие.value.ID,
						Условие.value.type);
				
			ИначеЕсли Сообщение.type = "DMRelationType" Тогда
				
				Если ВРег(Условие.property) = ВРег("DocumentFrom") Тогда
					ДокументИз = ПолучитьСсылкуПоObjectID(Условие.value);
					Если ТипЗнч(ДокументИз) = Тип("СправочникСсылка.ВидыДокументов") Тогда
						ДокументИз = Новый Структура("ВидДокумента", ДокументИз);
					КонецЕсли;
				КонецЕсли;
				
				Если ВРег(Условие.property) = ВРег("DocumentTo") Тогда
					ДокументНа = ПолучитьСсылкуПоObjectID(Условие.value);
					Если ТипЗнч(ДокументНа) = Тип("СправочникСсылка.ВидыДокументов") Тогда
						ДокументНа = Новый Структура("ВидДокумента", ДокументНа);
					КонецЕсли;
				КонецЕсли;
				
				Если ВРег(Условие.property) = ВРег("Predefined") Тогда
					Предопределенные = Условие.value;
				КонецЕсли;
				
				Если ВРег(Условие.property) = ВРег("Mandatory") Тогда
					Обязательные = Условие.value;
				КонецЕсли;
				
			ИначеЕсли Сообщение.type = "DMUser" Тогда
				
				Если ВРег(Условие.property) = ВРег("Subdivision") Тогда
					ПодразделениеФильтр = ПолучитьСсылкуПоObjectID(Условие.value);
				КонецЕсли;
				
				Если ПодразделениеФильтр <> Неопределено Тогда
					ПользователиПодразделения = РаботаСПользователями.ПолучитьПользователейПодразделения(
						ПодразделениеФильтр);
					УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
					УсловиеОтбора.Поле = "ОбъектВыборки.Ссылка";
					УсловиеОтбора.ОператорСравнения = "IN";
					УсловиеОтбора.Значение = ПользователиПодразделения;
				КонецЕсли;
				
			ИначеЕсли Сообщение.type = "DMEmployee" Тогда
				
				Если ВРег(Условие.property) = ВРег("Subdivision") Тогда
					ПодразделениеФильтр = ПолучитьСсылкуПоObjectID(Условие.value);
				КонецЕсли;
				
				Если ПодразделениеФильтр <> Неопределено Тогда
					СотрудникиПодразделения = Сотрудники.СотрудникиПодразделения(ПодразделениеФильтр);
					УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
					УсловиеОтбора.Поле = "ОбъектВыборки.Ссылка";
					УсловиеОтбора.ОператорСравнения = "IN";
					УсловиеОтбора.Значение = СотрудникиПодразделения;
				КонецЕсли;
				
			// Прочие поддерживаемые условия поиска.
			ИначеЕсли СвойстваИРеквизиты.Свойство(Условие.property) Тогда
				
				УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "ОбъектВыборки." + СвойстваИРеквизиты[Условие.property];
				УсловиеОтбора.ОператорСравнения = ОператорСравнения;
				Если ТипЗнч(Условие.value) = Тип("ОбъектXDTO") Тогда
					УсловиеОтбора.Значение = ПолучитьСсылкуПоObjectID(Условие.value);
				Иначе
					УсловиеОтбора.Значение = Условие.value;
				КонецЕсли;
				
			Иначе
				
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестное поле в условии отбора: %1'"), Условие.property);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Получим типы связей по собранным ранее условиям.
		Если Сообщение.type = "DMRelationType" Тогда
			
			НастройкиСвязи = СвязиОбъектов.ПолучитьНастройкиСвязи(ДокументИз, ДокументНа);
			ТипыСвязей = Новый Массив;
			
			Для Каждого НастройкаСвязи Из НастройкиСвязи Цикл
				
				Если Предопределенные <> Неопределено И НастройкаСвязи.Предопределенная <> Предопределенные Тогда
					Продолжить;
				КонецЕсли;
				
				Если Обязательные <> Неопределено И НастройкаСвязи.Обязательная <> Обязательные Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(ДокументИз) <> Тип("Структура") И ТипЗнч(ДокументНа) <> Тип("Структура")
						И Не СвязиОбъектов.ЭтоПодходящийТипСвязи(ДокументИз, ДокументНа, НастройкаСвязи.ТипСвязи) Тогда
					Продолжить;
				КонецЕсли;
				
				ТипыСвязей.Добавить(НастройкаСвязи.ТипСвязи);
				
			КонецЦикла;
			
			УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
			УсловиеОтбора.Поле = "ОбъектВыборки.Ссылка";
			УсловиеОтбора.ОператорСравнения = "IN";
			УсловиеОтбора.Значение = ТипыСвязей;
			
		КонецЕсли;
		
		Если Иерархический Тогда
			
			// Для иерархических справочников условие на родителя необходимо, чтобы получить
			// группы и элементы нужного уровня.
			Если УсловияОтбора.Найти("ОбъектВыборки.Родитель", "Поле") = Неопределено
					И ПараметрыВыборки.ВыбранныйЭлемент <> Неопределено Тогда
				
				ИмяВида = Сред(ИмяТипа, СтрДлина("Справочник.") + 1);
				УсловиеОтбора = ПараметрыВыборки.УсловияОтбора.Добавить();
				УсловиеОтбора.Поле = "ОбъектВыборки.Родитель";
				УсловиеОтбора.ОператорСравнения = "=";
				УсловиеОтбора.Значение = Справочники[ИмяВида].ПустаяСсылка();
				
			КонецЕсли;
		КонецЕсли;
		
		// Старые версии клиентов могут не устанавливать эти свойства.
		ПараметрыВыборки.ПредельноеКоличествоВыбираемыхОбъектов = ?(СвойствоУстановлено(Сообщение.query, "limit"),
			Сообщение.query.limit,
			0);
		ПараметрыВыборки.НаборКолонок = ?(СвойствоУстановлено(Сообщение.query, "columnSet"),
			Сообщение.query.columnSet,
			Новый Массив);
		
	КонецЕсли;
	
	Если Не Иерархический Тогда
		ПараметрыВыборки.ВыбранныйЭлемент = Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыВыборки;
	
КонецФункции

// Конструктор параметров заполнения ответа на запрос списка объектов.
//
// Параметры:
//   ИмяТипа - Строка - имя типа XDTO.
//   ПредельноеКоличествоЭлементов - Число - определяет максимальное количество возвращаемых объектов.
//   ИменаСвойств - СписокXDTO - имена свойств объекта XDTO, подлежащих заполнению помимо стандартных.
//   ЭтоСправочник - Булево - Истина, если заполняемый объект справочник.
//   Иерархический - Булево - Истина, если справочник иерархический.
//   ВидИерархииСправочника - ВидИерархии - вид иерархии справочника.
//   ВключатьДанныеПравилКоммуникаций - Булево - определяет необходимость включения в ответ данных правил коммуникаций.
//
// Возвращаемое значение:
//   Структура:
//     * ИмяТипа - Строка - имя типа XDTO.
//     * ПредельноеКоличествоЭлементов - Число - определяет максимальное количество возвращаемых объектов.
//     * ИменаСвойств - Массив Из Строка - имена свойств объекта XDTO, подлежащих заполнению помимо стандартных.
//     * ЭтоСправочник - Булево - Истина, если заполняемый объект справочник.
//     * Иерархический - Булево - Истина, если справочник иерархический.
//     * ВидИерархииСправочника - ВидИерархии - вид иерархии справочника.
//     * ВключатьДанныеПравилКоммуникаций - Булево - определяет необходимость включения данных правил коммуникаций.
//
Функция ПараметрыЗаполненияОтветаСписокВыбораОбъектов(ИмяТипа, ПредельноеКоличествоЭлементов, ИменаСвойств,
		ЭтоСправочник, Иерархический, ВидИерархииСправочника, ВключатьДанныеПравилКоммуникаций)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяТипа", ИмяТипа);
	ПараметрыЗаполнения.Вставить("ПредельноеКоличествоЭлементов", ПредельноеКоличествоЭлементов);
	ПараметрыЗаполнения.Вставить("ИменаСвойств", ИменаСвойств);
	ПараметрыЗаполнения.Вставить("ЭтоСправочник", ЭтоСправочник);
	ПараметрыЗаполнения.Вставить("Иерархический", Иерархический);
	ПараметрыЗаполнения.Вставить("ВидИерархииСправочника", ВидИерархииСправочника);
	ПараметрыЗаполнения.Вставить("ВключатьДанныеПравилКоммуникаций", ВключатьДанныеПравилКоммуникаций);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает HTML предпросмотр объектов.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetObjectsHTMLPresentationsRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectsHTMLPresentationsResponse или DMError.
//
Функция ПолучитьHTMLПредпросмотрОбъектов(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetObjectsHTMLPresentationsResponse");
		
		ИгнорироватьМаксРазмер = Ложь;
		Если СвойствоУстановлено(Сообщение, "ignoreMaxSize") Тогда
			ИгнорироватьМаксРазмер = Сообщение.ignoreMaxSize;
		КонецЕсли;
		
		Для Каждого ОбъектXDTO Из Сообщение.Objects Цикл
			
			ПредставлениеОбъектаHTML = СоздатьОбъект("DMObjectHTMLPresentation");
			ПредставлениеОбъектаHTML.name = ОбъектXDTO.name;
			СкопироватьОбъектXDTO(ПредставлениеОбъектаHTML.objectId, ОбъектXDTO.objectId);
			
			СсылкаНаОбъектДО = ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
			
			Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(СсылкаНаОбъектДО).Чтение
				И Не РаботаСЗадачами.ЕстьОсобыеПраваПросмотра(СсылкаНаОбъектДО) Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Нет прав на чтение объекта %1'"), СсылкаНаОбъектДО);
			КонецЕсли;
			
			Если ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				Документ = СсылкаНаОбъектДО.ПолучитьОбъект();
				ДанныеДокумента = ОбработкаЗапросовXDTOДокументы.ДанныеДокументаДляФормированияОбзора(Документ);
				ПредставлениеОбъектаHTML.htmlView = ОбзорДокумента.ПолучитьОбзорДокумента(ДанныеДокумента);
				
			ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("СправочникСсылка.Файлы") Тогда
				ПредставлениеОбъектаHTML.truncated = Ложь;
				ПредставлениеОбъектаHTML.htmlView = ОбзорФайловВызовСервера.ПолучитьHTMLПредпросмотра(
					СсылкаНаОбъектДО,
					ПредставлениеОбъектаHTML.truncated,
					ИгнорироватьМаксРазмер,
					Истина);
				
			ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("ДокументСсылка.Задача") Тогда
				ОбъектДО = СсылкаНаОбъектДО.ПолучитьОбъект();
				ПредставлениеОбъектаHTML.htmlView = ОбъектДО.ОписаниеHTML(, Ложь);
				
			ИначеЕсли ТипЗнч(СсылкаНаОбъектДО) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
				ТекущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъектДО, "Задача");
				ТекущаяЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
				ПредставлениеОбъектаHTML.htmlView = ТекущаяЗадачаОбъект.ОписаниеHTML(СсылкаНаОбъектДО, Ложь);
				
			ИначеЕсли ОбзорОбъектовКлиентСервер.ЭтоИзвестныйОбъектОбзора(СсылкаНаОбъектДО) Тогда
				
				ДанныеОбзораОбъекта = ОбзорОбъектов.ДанныеОбзораОбъекта(СсылкаНаОбъектДО,, Ложь);
				ПредставлениеОбъектаHTML.htmlView = ДанныеОбзораОбъекта.ТекстHTML;
				
			Иначе
				ВызватьИсключение НСтр("ru = 'Предпросмотр объектов этого типа не поддерживается'");
				
			КонецЕсли;
			
			Ответ.ObjectsHTMLPresentations.Добавить(ПредставлениеОбъектаHTML);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении предпросмотра объекта'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Возвращает текущую версию веб-сервиса по версии конфигурации.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetVersionResponse.
//
Функция ПолучитьВерсиюСервиса()
	
	ОтветВерсия = СоздатьОбъект("DMGetVersionResponse");
	ОтветВерсия.versionNumber = ВерсияСервиса();
	
	ПротоколированиеРаботыСотрудников.ЗаписатьВходВСистему();
	
	Возврат ОтветВерсия;
	
КонецФункции

// Возвращает дополнительные реквизиты в ответ на запрос DMGetObjectAdditionalPropertiesRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetObjectAdditionalPropertiesRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectAdditionalPropertiesResponse или DMError.
//
Функция ПолучитьДополнительныеРеквизитыОбъекта(Сообщение)
	
	Ответ = СоздатьОбъект("DMGetObjectAdditionalPropertiesResponse");
	
	ИмяТипа = ПолучитьТипДОПоТипуXDTO(Сообщение.object.objectId.type);
	СсылкаНаОбъектДО = ПолучитьСсылкуПоObjectID(Сообщение.object.objectId);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъектДО) Тогда
		ОбъектДО = СсылкаНаОбъектДО.ПолучитьОбъект();
	Иначе
		Если Лев(ИмяТипа, СтрДлина("Задачи.")) = "Задачи." Тогда
			Выполнить("ОбъектДО = " + ИмяТипа + ".СоздатьЗадачу();");
		Иначе
			Выполнить("ОбъектДО = " + ИмяТипа + ".СоздатьЭлемент();");
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьОбъект("DMDocument").Тип().ЭтоПотомок(Сообщение.object.Тип()) Тогда
		Если СвойствоУстановлено(Сообщение.object, "documentType") Тогда
			ВидДокумента = ПолучитьСсылкуПоObjectID(Сообщение.object.documentType.objectId);
			ОбъектДО.ВидДокумента = ВидДокумента;
		Иначе
			ОбъектДО.ВидДокумента = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьНаборДополнительныхРеквизитовОбъектаДО(ОбъектДО, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает объекты, доступные для выбора по запросу DMGetObjectListRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetObjectListRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectListResponse.
//
Функция ПолучитьДоступныеЗначенияДляВыбора(Сообщение)
	
	ТипыОбъектовXDTO = СтрРазделить(Сообщение.type, ";", Ложь);
	
	Ответ = Неопределено;
	
	Для Каждого ТипОбъектаXDTO Из ТипыОбъектовXDTO Цикл
		
		ИмяТипа = "";
		ПолучитьТипДОПоТипуXDTO(ТипОбъектаXDTO, ИмяТипа);
		
		Если СтрНайти(ИмяТипа, "Перечисление.") Тогда
			Результат = ПолучитьСписокПеречисленияДляВыбора(Сообщение, Ответ, ИмяТипа);
			
		Иначе // иные объекты без специальных методов получения
			Результат = ПолучитьСписокОбъектовДляВыбора(Сообщение, Ответ, ИмяТипа);
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Если ПроверитьТип(Результат, "DMError") Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Получает новый объект XDTO заданного типа.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetNewObjectRequest. Запрос на создание.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO заданного типа или DMError.
//
Функция ПолучитьНовыйОбъект(Сообщение)
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОбъектДО = ПолучитьНовыйОбъектДОПоТипуXDTO(Сообщение.type, Ложь);
		ОбъектДО.Заполнить(Неопределено);
		
		Если ТипЗнч(ОбъектДО) = Тип("СправочникОбъект.ДокументыПредприятия")
				И СвойствоУстановлено(Сообщение, "documentType") Тогда
			ОбъектДО.ВидДокумента = ПолучитьСсылкуПоObjectID(Сообщение.documentType);
		КонецЕсли;
		
		Ответ = СоздатьОбъект(Сообщение.type);
		
		ПолучитьДанныеОбъектаДО(
			ОбъектДО,
			Ответ,
			Сообщение.type,
			Сообщение.columnSet);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка при получении нового объекта'");
		ТекстОшибкиМассив = Новый Массив;
		Если ЗначениеЗаполнено(Сообщение.type) Тогда
			ТекстОшибкиМассив.Добавить(СтрШаблон(НСтр("ru = 'Тип объекта: %1'"), Сообщение.type));
		КонецЕсли;
		ТекстОшибкиМассив.Добавить(НСтр("ru = 'Текст ошибки:'"));
		ТекстОшибкиМассив.Добавить(ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
		Возврат ОписаниеОшибкиXDTO(ЗаголовокОшибки, СтрСоединить(ТекстОшибкиМассив, Символы.ПС));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Получает объекты Документооборота по запросу DMRetrieveRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMRetrieveRequest. Запрос на получение.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMRetrieveResponse или DMError.
//
Функция ПолучитьОбъекты(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMRetrieveResponse");
		ЗаголовокОшибки = НСтр("ru = 'Ошибка при получении объекта ДО'");
		
		Для Каждого ОбъектИд Из Сообщение.objectIds Цикл
			
			ТекстОшибки = "";
			Ссылка = ПолучитьСсылкуПоObjectID(ОбъектИд, Ложь, ТекстОшибки);
			Если Ссылка = Неопределено Тогда
				Возврат ОписаниеОшибкиXDTO(ЗаголовокОшибки, ТекстОшибки);
			КонецЕсли;
			ОбъектДО = Ссылка.ПолучитьОбъект();
			ОбъектXDTO = ПолучитьОбъектXDTOПоСуществующимДаннымДО(ОбъектДО, Сообщение.columnSet, Ложь);
			
			Если ПроверитьТип(ОбъектXDTO, "DMError") Тогда
				Возврат ОбъектXDTO;
			КонецЕсли;
			
			ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(
				Ссылка,
				НСтр("ru = 'Чтение объекта через веб-сервис 1С:Документооборота'"));
			
			СписокВыражений = Новый Массив;
			Для Каждого Элемент Из Сообщение.objectsExpressionRows Цикл
				Если Не СвойствоУстановлено(Элемент, "expressionRows")
						Или Элемент.expressionRows.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если ОбъектИд.ID = Элемент.object.ID И ОбъектИд.type = Элемент.object.type Тогда
					СписокВыражений = Элемент.expressionRows;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ОбработкаЗапросовXDTOОбмен.ЗаполнитьДанныеИзСпискаВыражений(ОбъектДО, ОбъектXDTO, СписокВыражений);
			
			Ответ.objects.Добавить(ОбъектXDTO);
			
		КонецЦикла;
		
		Для Каждого СсылкаXDTO Из Сообщение.links Цикл
			ДобавитьСсылкуНаВнешнийОбъект(СсылкаXDTO.linkedObject, СсылкаXDTO.ownerObject);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		ТекстОшибкиМассив = Новый Массив;
		ТекстОшибкиМассив.Добавить(
			СтрШаблон(НСтр("ru = 'Ошибка при получении объекта %1'"), ПолучитьНавигационнуюСсылку(Ссылка)));
		ТекстОшибкиМассив.Добавить(НСтр("ru = 'Текст ошибки:'"));
		ТекстОшибкиМассив.Добавить(ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
		Возврат ОписаниеОшибкиXDTO(ЗаголовокОшибки, СтрСоединить(ТекстОшибкиМассив, Символы.ПС));
		
	КонецПопытки;
	
КонецФункции

// Формирует указанную печатную форму, сохраняет ее в файл, и передает на сторону ИС двоичные данные.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetPrintedFormRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetPrintedFormResponse или DMError.
//
Функция ПолучитьПечатнуюФорму(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetPrintedFormResponse");
		
		КомандыПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.ДополнительныеПараметры.Вставить("БесшовнаяИнтеграция", Истина);
		
		Если Сообщение.printCommand = "ApprovalSheet" Тогда
			КомандаПечати.МенеджерПечати = "Справочник.ДокументыПредприятия";
			КомандаПечати.Идентификатор = "ЛистСогласования";
			КомандаПечати.Представление = НСтр("ru = 'Лист согласования'");
			
		ИначеЕсли Сообщение.printCommand = "ApprovalSheetWithHistory" Тогда
			КомандаПечати.МенеджерПечати = "Справочник.ДокументыПредприятия";
			КомандаПечати.Идентификатор = "ЛистСогласованияСИсторией";
			КомандаПечати.Представление = НСтр("ru = 'Лист согласования с историей'");
			
		ИначеЕсли Сообщение.printCommand = "ExaminationSheet" Тогда
			КомандаПечати.МенеджерПечати = "Справочник.ДокументыПредприятия";
			КомандаПечати.Идентификатор = "ЛистОзнакомления";
			КомандаПечати.Представление = НСтр("ru = 'Лист ознакомления'");
			
		ИначеЕсли Сообщение.printCommand = "ProtocolOfDisagreements" Тогда
			КомандаПечати.МенеджерПечати = "Справочник.ДокументыПредприятия";
			КомандаПечати.Идентификатор = "ПротоколРазногласий";
			КомандаПечати.Представление = НСтр("ru = 'Протокол разногласий'");
			
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестная команда печати: %1'"), Сообщение.printCommand);
			
		КонецЕсли;
		
		КомандыПечатиМассив = ОбщегоНазначения.ТаблицаЗначенийВМассив(КомандыПечати);
		
		МассивОбъектов = Новый Массив;
		Для Каждого ObjectID Из Сообщение.objects Цикл
			Ссылка = ПолучитьСсылкуПоObjectID(ObjectID);
			МассивОбъектов.Добавить(Ссылка);
		КонецЦикла;
		
		Формат = ТипФайлаТабличногоДокумента[Сообщение.printedFormFileType];
		НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
		НастройкиСохранения.ФорматыСохранения.Добавить(Формат);
		
		Напечатанное = УправлениеПечатью.НапечататьВФайл(КомандыПечатиМассив, МассивОбъектов, НастройкиСохранения);
		НапечатаноФорм = Напечатанное.Количество();
		
		Если НапечатаноФорм = 0 Тогда
			
			ВызватьИсключение НСтр("ru = 'Нет напечатанных форм'");
			
		ИначеЕсли НапечатаноФорм = 1 Тогда
			
			Ответ.printedForm = Напечатанное[0].ДвоичныеДанные;
			
		Иначе
			
			ТабличныйДокумент = Новый ТабличныйДокумент;
			
			ПервыйДокумент = Истина;
			Для Каждого Строка Из Напечатанное Цикл
				Если Не ПервыйДокумент Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				ПервыйДокумент = Ложь;
				
				ТабличныйДокумент.Вывести(УправлениеПечатью.ТабличныйДокументПоДвоичнымДанным(Строка.ДвоичныеДанные));
			КонецЦикла;
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			ТабличныйДокумент.Записать(ИмяВременногоФайла, Формат);
			
			Ответ.printedForm = Новый ДвоичныеДанные(ИмяВременногоФайла);
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при формировании печатной формы'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Получает объекты Документооборота по запросу DMGetDocumentListRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetDocumentListRequest. Запрос на получение.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetDocumentListResponse или DMError.
//
Функция ПолучитьСвязанныеОбъекты(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetDocumentListResponse");
		
		Для Каждого ВнешнийОбъект Из Сообщение.ExternalObjects Цикл
			
			ОбъектыДО = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ПолучитьОбъектыДОПоВнешнемуОбъекту(
				ВнешнийОбъект.ID,
				ВнешнийОбъект.type);
			
			Для Каждого ОбъектДО Из ОбъектыДО Цикл
				
				Если Не ЗначениеЗаполнено(ОбъектДО) Тогда
					Продолжить;
				КонецЕсли;
				
				Объект = ПолучитьОбъектXDTOПоСуществующимДаннымДО(ОбъектДО.ПолучитьОбъект(), Сообщение.columnSet, Ложь);
				Если ПроверитьТип(Объект, "DMError") Тогда
					Продолжить;
				КонецЕсли;
				
				Ответ.documents.Добавить(Объект);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка объектов'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Ищет в правилах загрузки данных в 1С:Документооборот табличные части объекта ИС, которые требуются
// для последующего заполнения данными объекта на стороне ДО.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetRequiredTabularSectionListRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetRequiredTabularSectionListResponse или DMError.
//
Функция ПолучитьСписокВыгружаемыхНаСторонеИСТабличныхЧастей(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetRequiredTabularSectionListResponse");
		
		ПравилаДляАнализа = Новый Массив;
		СоответствиеВсехТЧПравилам = Новый Соответствие;
		Для Каждого ПравилоИСписокВсехТЧ Из Сообщение.allObjectsTabularSections Цикл
			Ссылка = ПолучитьСсылкуПоObjectID(ПравилоИСписокВсехТЧ.object);
			ПравилаДляАнализа.Добавить(Ссылка);
			СоответствиеВсехТЧПравилам[Ссылка] = ПравилоИСписокВсехТЧ;
		КонецЦикла;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПравилаЗаполненияРеквизитовДО.Ссылка КАК Ссылка,
			|	ПравилаЗаполненияРеквизитовДО.ВычисляемоеВыражение КАК ВычисляемоеВыражение
			|ИЗ
			|	Справочник.ПравилаЗагрузкиДанныхВДО.ПравилаЗаполненияРеквизитовДО КАК ПравилаЗаполненияРеквизитовДО
			|ГДЕ
			|	ПравилаЗаполненияРеквизитовДО.Ссылка В (&ПравилаДляАнализа)
			|	И ПравилаЗаполненияРеквизитовДО.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке)
			|	И ПравилаЗаполненияРеквизитовДО.МестоВыполненияВыражения = ЗНАЧЕНИЕ(Перечисление.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеДО)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПравилаЗаполненияРеквизитовДО.Ссылка КАК Ссылка,
			|	ПравилаЗаполненияРеквизитовДО.Ссылка.ТипОбъектаДО КАК ТипОбъектаДО,
			|	ПравилаЗаполненияРеквизитовДО.Ссылка.ВидДокумента КАК ВидДокумента,
			|	ПравилаЗаполненияРеквизитовДО.ПравилаЗаполненияСтрокТаблицы КАК ПравилаЗаполненияСтрокТаблицы,
			|	ПравилаЗаполненияРеквизитовДО.ИмяРеквизитаОбъектаДО КАК Таблица
			|ИЗ
			|	Справочник.ПравилаЗагрузкиДанныхВДО.ПравилаЗаполненияРеквизитовДО КАК ПравилаЗаполненияРеквизитовДО
			|ГДЕ
			|	ПравилаЗаполненияРеквизитовДО.Ссылка В (&ПравилаДляАнализа)
			|	И ПравилаЗаполненияРеквизитовДО.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПравилаЗаполненияРеквизитовДО.Ссылка КАК Ссылка,
			|	ПравилаЗаполненияРеквизитовДО.ИмяРеквизитаОбъектаИС КАК ИмяРеквизитаОбъектаИС
			|ИЗ
			|	Справочник.ПравилаЗагрузкиДанныхВДО.ПравилаЗаполненияРеквизитовДО КАК ПравилаЗаполненияРеквизитовДО
			|ГДЕ
			|	ПравилаЗаполненияРеквизитовДО.Ссылка В (&ПравилаДляАнализа)
			|	И ПравилаЗаполненияРеквизитовДО.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта)
			|	И ПравилаЗаполненияРеквизитовДО.ЭтоТаблица");
		Запрос.УстановитьПараметр("ПравилаДляАнализа", ПравилаДляАнализа);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ТаблицаВыраженияИзПравил = МассивРезультатов[0].Выгрузить();
		ТаблицаВыраженияИзПравилЗаполненияСтрок = МассивРезультатов[1].Выгрузить();
		ТаблицаИменаРеквизитовИСИзПравил = МассивРезультатов[2].Выгрузить();
		
		Для Каждого Элемент Из СоответствиеВсехТЧПравилам Цикл
			
			ВыгружаемыеТЧ = Новый Массив;
			НеВыгружаемыеТЧ = Новый Массив;
			
			СтрокиПравилаЗаполненияТаблиц = ТаблицаИменаРеквизитовИСИзПравил.НайтиСтроки(
				Новый Структура("Ссылка", Элемент.Ключ));
			Для Каждого ИмяТаблицыИС Из Элемент.Значение.tabularSections Цикл
				Выгружается = Ложь;
				Для Каждого СтрокаПравила Из СтрокиПравилаЗаполненияТаблиц Цикл
					ИмяТаблицыИСИзПравил = СтрокаПравила.ИмяРеквизитаОбъектаИС;
					Если ИмяТаблицыИС = ИмяТаблицыИСИзПравил Тогда
						Выгружается = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Выгружается Тогда
					ВыгружаемыеТЧ.Добавить(ИмяТаблицыИС);
				Иначе
					НеВыгружаемыеТЧ.Добавить(ИмяТаблицыИС);
				КонецЕсли;
			КонецЦикла;
			
			КоличествоОставшихся = НеВыгружаемыеТЧ.Количество();
			Если КоличествоОставшихся > 0 Тогда
				ВыраженияИзПравила = ТаблицаВыраженияИзПравил.НайтиСтроки(Новый Структура("Ссылка", Элемент.Ключ));
				Для Номер = 1 По КоличествоОставшихся Цикл
					Индекс = КоличествоОставшихся - Номер;
					ИмяТаблицыИС = НеВыгружаемыеТЧ[Индекс];
					Выгружается = Ложь;
					Для Каждого ВыражениеПравила Из ВыраженияИзПравила Цикл
						Если ТаблицаИспользуетсяВВыражении(ВыражениеПравила.ВычисляемоеВыражение, ИмяТаблицыИС) Тогда
							Выгружается = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Выгружается Тогда
						ВыгружаемыеТЧ.Добавить(ИмяТаблицыИС);
						НеВыгружаемыеТЧ.Удалить(Индекс);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НеВыгружаемыеТЧ.Количество() > 0 Тогда
				ПравилаЗаполненияТаблиц = ТаблицаВыраженияИзПравилЗаполненияСтрок.НайтиСтроки(
					Новый Структура("Ссылка", Элемент.Ключ));
				Для Каждого ИмяТаблицыИС Из НеВыгружаемыеТЧ Цикл
					Выгружается = Ложь;
					Для Каждого ПравилоТаблицы Из ПравилаЗаполненияТаблиц Цикл
						МассивРеквизитовТаблицыОбъектаДО = Справочники.ПравилаЗагрузкиДанныхВДО.РеквизитыТаблицыОбъектаДО(
							ПравилоТаблицы.ТипОбъектаДО,
							ПравилоТаблицы.Таблица,
							ПравилоТаблицы.ВидДокумента);
						ПравилаЗаполненияСтрокТаблицы = ПравилоТаблицы.ПравилаЗаполненияСтрокТаблицы.Получить();
						Для Каждого ПравилоЗаполненияСтроки Из ПравилаЗаполненияСтрокТаблицы Цикл
							Для Каждого Реквизит Из МассивРеквизитовТаблицыОбъектаДО Цикл
								Если (ПравилоЗаполненияСтроки[СтрШаблон("%1_Вариант", Реквизит.Имя)] <>
											Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке)
										Или (ПравилоЗаполненияСтроки[СтрШаблон("%1_МестоВыполненияВыражения", Реквизит.Имя)] <>
											Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеДО) Тогда
									Продолжить;
								КонецЕсли;
								Выражение = ПравилоЗаполненияСтроки[СтрШаблон("%1_ВычисляемоеВыражение", Реквизит.Имя)];
								Если ТаблицаИспользуетсяВВыражении(Выражение, ИмяТаблицыИС) Тогда
									Выгружается = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Выгружается Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Выгружается Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Выгружается Тогда
						ВыгружаемыеТЧ.Добавить(ИмяТаблицыИС);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПравилоИСписокВсехТЧ = СоздатьОбъект("DMObjectTabularSections");
			ПравилоИСписокВсехТЧ.object = Элемент.Значение.object;
			Для Каждого ИмяТаблицыИС Из ВыгружаемыеТЧ Цикл
				ПравилоИСписокВсехТЧ.tabularSections.Добавить(ИмяТаблицыИС);
			КонецЦикла;
			Ответ.requiredObjectsTabularSections.Добавить(ПравилоИСписокВсехТЧ);
			
		КонецЦикла;
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка выгружаемых табличных частей'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Ищет в правилах загрузки данных в 1С:Документооборот выражения на встроенном языке, которые требуется
// выполнить на стороне ИС, для последующего заполнения данных объекта на стороне ДО.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetExpressionListRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetExpressionListResponse или DMError.
//
Функция ПолучитьСписокВыраженийНаВстроенномЯзыкеДляВыполненияНаСторонеИС(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetExpressionListResponse");
		
		ПравилаДляАнализа = Новый Массив;
		СоответствиеObjectIDПравилам = Новый Соответствие;
		
		Для Каждого ObjectID Из Сообщение.objects Цикл
			Ссылка = ПолучитьСсылкуПоObjectID(ObjectID);
			ПравилаДляАнализа.Добавить(Ссылка);
			СоответствиеObjectIDПравилам[Ссылка] = ObjectID;
		КонецЦикла;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПравилаЗаполненияРеквизитовДО.Ссылка КАК Ссылка,
			|	ПравилаЗаполненияРеквизитовДО.ID КАК ID,
			|	ПравилаЗаполненияРеквизитовДО.ВычисляемоеВыражение КАК ВычисляемоеВыражение,
			|	ПравилаЗаполненияРеквизитовДО.Таблица КАК Таблица,
			|	ПравилаЗаполненияРеквизитовДО.ЭтоТаблица КАК ЭтоТаблица,
			|	ЕСТЬNULL(ПравилаЗаполненияРеквизитовДОРодитель.ИмяРеквизитаОбъектаИС, """") КАК ИмяТаблицыИсточника
			|ИЗ
			|	Справочник.ПравилаЗагрузкиДанныхВДО.ПравилаЗаполненияРеквизитовДО КАК ПравилаЗаполненияРеквизитовДО
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаЗагрузкиДанныхВДО.ПравилаЗаполненияРеквизитовДО КАК ПравилаЗаполненияРеквизитовДОРодитель
			|		ПО ПравилаЗаполненияРеквизитовДО.Ссылка = ПравилаЗаполненияРеквизитовДОРодитель.Ссылка
			|			И ПравилаЗаполненияРеквизитовДО.Таблица = ПравилаЗаполненияРеквизитовДОРодитель.ИмяРеквизитаОбъектаДО
			|			И (ПравилаЗаполненияРеквизитовДОРодитель.ЭтоТаблица)
			|ГДЕ
			|	ПравилаЗаполненияРеквизитовДО.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке)
			|	И ПравилаЗаполненияРеквизитовДО.МестоВыполненияВыражения = ЗНАЧЕНИЕ(Перечисление.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеИС)
			|	И ПравилаЗаполненияРеквизитовДО.Ссылка В(&ПравилаДляАнализа)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПравилаЗаполненияРеквизитовДО.Ссылка КАК Ссылка,
			|	ПравилаЗаполненияРеквизитовДО.Ссылка.ТипОбъектаДО КАК ТипОбъектаДО,
			|	ПравилаЗаполненияРеквизитовДО.Ссылка.ВидДокумента КАК ВидДокумента,
			|	ПравилаЗаполненияРеквизитовДО.ПравилаЗаполненияСтрокТаблицы КАК ПравилаЗаполненияСтрокТаблицы,
			|	ПравилаЗаполненияРеквизитовДО.ИмяРеквизитаОбъектаДО КАК Таблица
			|ИЗ
			|	Справочник.ПравилаЗагрузкиДанныхВДО.ПравилаЗаполненияРеквизитовДО КАК ПравилаЗаполненияРеквизитовДО
			|ГДЕ
			|	ПравилаЗаполненияРеквизитовДО.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы)
			|	И ПравилаЗаполненияРеквизитовДО.Ссылка В(&ПравилаДляАнализа)");
		Запрос.УстановитьПараметр("ПравилаДляАнализа", ПравилаДляАнализа);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ТаблицаВыраженияПравил = МассивРезультатов[0].Выгрузить();
		ТаблицаВыраженийПравилЗаполненияСтрок = МассивРезультатов[1].Выгрузить();
		
		Для Каждого Элемент Из СоответствиеObjectIDПравилам Цикл
			СоответствиеПравилXDTO = СоздатьОбъект("DMObjectExpressionRow");
			СоответствиеПравилXDTO.object = Элемент.Значение;
			
			ВыраженияПравила = ТаблицаВыраженияПравил.НайтиСтроки(Новый Структура("Ссылка", Элемент.Ключ));
			Для Каждого ВыражениеПравила Из ВыраженияПравила Цикл
				ВыражениеПравилаXDTO = СоздатьОбъект("DMExpressionRow");
				ВыражениеПравилаXDTO.ID = ВыражениеПравила.ID;
				ВыражениеПравилаXDTO.expressionOnBuiltInLanguage = ВыражениеПравила.ВычисляемоеВыражение;
				ВыражениеПравилаXDTO.tabularSectionName = ВыражениеПравила.ИмяТаблицыИсточника;
				
				Если ВыражениеПравила.ЭтоТаблица = Истина Тогда
					ВыражениеПравилаXDTO.type = "TabularSection";
					
				ИначеЕсли ВыражениеПравила.ЭтоТаблица = Ложь И ВыражениеПравила.Таблица <> "" Тогда
					ВыражениеПравилаXDTO.type = "TabularSectionAttribute";
					
				Иначе
					ВыражениеПравилаXDTO.type = "Attribute";
					
				КонецЕсли;
				
				СоответствиеПравилXDTO.expressionRows.Добавить(ВыражениеПравилаXDTO);
			КонецЦикла;
			
			ПравилаЗаполненияТаблиц = ТаблицаВыраженийПравилЗаполненияСтрок.НайтиСтроки(
				Новый Структура("Ссылка", Элемент.Ключ));
			Для Каждого ПравилоТаблицы Из ПравилаЗаполненияТаблиц Цикл
				МассивРеквизитовТаблицыОбъектаДО = Справочники.ПравилаЗагрузкиДанныхВДО.РеквизитыТаблицыОбъектаДО(
					ПравилоТаблицы.ТипОбъектаДО,
					ПравилоТаблицы.Таблица,
					ПравилоТаблицы.ВидДокумента);
				
				ПравилаЗаполненияСтрокТаблицы = ПравилоТаблицы.ПравилаЗаполненияСтрокТаблицы.Получить();
				Для Каждого ПравилоЗаполненияСтроки Из ПравилаЗаполненияСтрокТаблицы Цикл
					Для Каждого Реквизит Из МассивРеквизитовТаблицыОбъектаДО Цикл
						Если (ПравилоЗаполненияСтроки[СтрШаблон("%1_Вариант", Реквизит.Имя)] <>
									Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке)
								Или (ПравилоЗаполненияСтроки[СтрШаблон("%1_МестоВыполненияВыражения", Реквизит.Имя)] <>
									Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеИС) Тогда
							Продолжить;
						КонецЕсли;
						
						ВыражениеПравилаXDTO = СоздатьОбъект("DMExpressionRow");
						ВыражениеПравилаXDTO.ID = ПравилоЗаполненияСтроки[СтрШаблон("%1_ID", Реквизит.Имя)];
						ВыражениеПравилаXDTO.expressionOnBuiltInLanguage =
							ПравилоЗаполненияСтроки[СтрШаблон("%1_ВычисляемоеВыражение", Реквизит.Имя)];
						ВыражениеПравилаXDTO.tabularSectionName = "";
						ВыражениеПравилаXDTO.type = "Attribute";
						СоответствиеПравилXDTO.expressionRows.Добавить(ВыражениеПравилаXDTO);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			Ответ.objectsExpressionRows.Добавить(СоответствиеПравилXDTO);
		КонецЦикла;
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка выражений на встроенном языке'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает элементы справочника по запросу DMGetObjectListRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetObjectListRequest.
//   Ответ - ОбъектXDTO - неявно возвращаемый параметр, объект XDTO типа DMGetObjectListResponse.
//   ИмяТипа - Строка - полное имя типа Документооборота.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectListResponse или DMError.
//
Функция ПолучитьСписокОбъектовДляВыбора(Сообщение, Ответ, ИмяТипа)
	
	Попытка
		
		СвойстваИРеквизиты = СоответствиеСвойствXDTOРеквизитамПоиска(Сообщение.type, Сообщение.query);
		СостоянияДокументов = ИсключающиеСостоянияДокументов();
		
		ЕстьНаименование = Ложь;
		ЭтоСправочник = СтрНайти(ИмяТипа, "Справочник.") <> 0;
		Если ЭтоСправочник Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяТипа);
			ЕстьНаименование = ЕстьНаименование(ОбъектМетаданных, ИмяТипа);
			Иерархический = ОбъектМетаданных.Иерархический;
			ВидИерархииСправочника = ОбъектМетаданных.ВидИерархии;
		Иначе
			Иерархический = Ложь;
			ВидИерархииСправочника = Неопределено;
		КонецЕсли;
		
		Если ЕстьНаименование Тогда
			ПолеНаименования = "ОбъектВыборки.Наименование";
		Иначе
			ПолеНаименования = "Представление(ОбъектВыборки.Ссылка)";
		КонецЕсли;
		ОбработкаЗапросовXDTOПереопределяемый.ПриОпределенииПоляНаименования(ПолеНаименования, ИмяТипа);
		
		ПараметрыВыборки = ПараметрыВыборкиОбъектов(Сообщение, ИмяТипа, Иерархический, СвойстваИРеквизиты);
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ПоляВыборкиДанных = Новый Массив;
		ПоляВыборкиДанных.Добавить(СтрШаблон("%1 КАК Наименование", ПолеНаименования));
		ПоляВыборкиДанных.Добавить("ОбъектВыборки.Ссылка");
		ПоляВыборкиДанных.Добавить("ОбъектВыборки.ПометкаУдаления");
		
		Если Сообщение.type = "DMEmployee" Тогда
			ПоляВыборкиДанных.Добавить("ОбъектВыборки.Владелец");
			ПоляВыборкиДанных.Добавить("ОбъектВыборки.Подразделение");
			ПоляВыборкиДанных.Добавить("ОбъектВыборки.Должность");
		КонецЕсли;
		
		Для Каждого ИмяСвойства Из ПараметрыВыборки.НаборКолонок Цикл
			Если ИмяСвойства = "status" Тогда
				ПоляВыборкиДанных.Добавить("ПоследниеСостояния.Состояние КАК status");
			ИначеЕсли СостоянияДокументов.Свойство(ИмяСвойства) Тогда
				ПоляВыборкиДанных.Добавить(СтрШаблон("СрезПоследних%1.Состояние КАК %1", ИмяСвойства));
			Иначе
				// Простое свойство, получаемое через точку.
				ПоляВыборкиДанных.Добавить(СтрШаблон("%1 КАК %2", СвойстваИРеквизиты[ИмяСвойства], ИмяСвойства));
			КонецЕсли;
		КонецЦикла;
		
		Если Иерархический Тогда
			ПоляВыборкиДанных.Добавить("ОбъектВыборки.Родитель");
			Если ВидИерархииСправочника = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				ПоляВыборкиДанных.Добавить("ОбъектВыборки.ЭтоГруппа");
			КонецЕсли;
		КонецЕсли;
		
		ТекстСоединений = СформироватьТекстСоединений(
			Сообщение,
			СостоянияДокументов,
			ПараметрыВыборки.НаборКолонок,
			ПараметрыВыборки.УсловияОтбора,
			МенеджерВременныхТаблиц);
		
		ШаблонТекстаЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ %1
			|	%2
			|//ДАННЫЕ_ВЫБОРКИ
			|ИЗ %3 КАК ОбъектВыборки
			|%4
			|ГДЕ ";
		
		Запрос.Текст = СтрШаблон(ШаблонТекстаЗапроса,
			?(ЗначениеЗаполнено(ПараметрыВыборки.ПредельноеКоличествоВыбираемыхОбъектов),
				// Выбираем на один объект больше, чем затребовали.
				СтрШаблон("ПЕРВЫЕ %1", Формат(ПараметрыВыборки.ПредельноеКоличествоВыбираемыхОбъектов + 1, "ЧГ=0")),
				""),
			СтрСоединить(ПоляВыборкиДанных, "," + Символы.ПС),
			ИмяТипа,
			ТекстСоединений);
		
		ДобавитьОтборИПараметрыЗапроса(
			Запрос,
			Сообщение,
			СостоянияДокументов,
			ПараметрыВыборки.НаборКолонок,
			ПараметрыВыборки.УсловияОтбора,
			Иерархический,
			ПараметрыВыборки.ВключатьПомеченныеНаУдаление);
		
		ИспользуютсяПравилаКоммуникаций = Ложь;
		Если ПараметрыВыборки.ПравилаКоммуникаций <> Неопределено Тогда
			ИспользуютсяПравилаКоммуникаций =
				Справочники.ПравилаКоммуникаций.ЕстьПравила(ПараметрыВыборки.ПравилаКоммуникаций) <> Ложь;
			
			Если ИспользуютсяПравилаКоммуникаций Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДАННЫЕ_ВЫБОРКИ", "ПОМЕСТИТЬ ДАННЫЕ_ВЫБОРКИ");
				
				ТекстЗапросаПроверки = Справочники.ПравилаКоммуникаций.ТекстЗапросаПроверки(
					Запрос,
					ПараметрыВыборки.ПравилаКоммуникаций,,
					"ДАННЫЕ_ВЫБОРКИ",,
					"СПИСОК_ОБЪЕКТОВ");
				
				ТекстЗапросаЗавершение = "ВЫБРАТЬ * ИЗ СПИСОК_ОБЪЕКТОВ КАК ОбъектВыборки";
				
				Запрос.Текст = СтрШаблон("%1%2%3%2%4%5",
					Запрос.Текст,
					ОбщегоНазначения.РазделительПакетаЗапросов(),
					ТекстЗапросаПроверки,
					ТекстЗапросаЗавершение,
					Символы.ПС);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьУпорядочиваниеЗапроса(
			Запрос,
			Сообщение,
			Иерархический,
			ВидИерархииСправочника,
			ЕстьНаименование,
			ИспользуютсяПравилаКоммуникаций);
		
		Если Ответ = Неопределено Тогда
			Ответ = СоздатьОбъект("DMGetObjectListResponse");
		КонецЕсли;
		
		ПараметрыЗаполнения = ПараметрыЗаполненияОтветаСписокВыбораОбъектов(
			Сообщение.type,
			ПараметрыВыборки.ПредельноеКоличествоВыбираемыхОбъектов,
			ПараметрыВыборки.НаборКолонок,
			ЭтоСправочник,
			Иерархический,
			ВидИерархииСправочника,
			ИспользуютсяПравилаКоммуникаций);
		
		Если ПараметрыВыборки.ВыбранныйЭлемент = Неопределено Тогда
			
			ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПараметрыЗаполнения, ПараметрыВыборки);
			
		Иначе
			
			// Если есть SelectedItem и справочник иерархический - сперва строим до корня списка,
			// затем для каждого уровня получаем список и заполняем массив возврата.
			// Вернем список списков - соседние ветки каждого уровня от текущего до самого верхнего.
			
			МассивРодителей = Новый Массив;
			ТекущийЭлемент = ПараметрыВыборки.ВыбранныйЭлемент;
			
			Пока НЕ ТекущийЭлемент.Родитель.Пустая() Цикл
				ТекущийЭлемент = ТекущийЭлемент.Родитель;
				МассивРодителей.Добавить(ТекущийЭлемент);
			КонецЦикла;
			
			// Запрос без Родителя - для корневых папок.
			ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПараметрыЗаполнения, ПараметрыВыборки);
			
			Для Каждого ТекущийЭлемент Из МассивРодителей Цикл
				
				Запрос.УстановитьПараметр("Родитель", ТекущийЭлемент);
				Если ИспользуютсяПравилаКоммуникаций Тогда
					Справочники.ПравилаКоммуникаций.УдалитьВременныеТаблицы(
						МенеджерВременныхТаблиц, "ДАННЫЕ_ВЫБОРКИ,СПИСОК_ОБЪЕКТОВ");
				КонецЕсли;
				
				ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПараметрыЗаполнения, ПараметрыВыборки);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка элементов справочника'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Возвращает значения перечисления по запросу DMGetObjectListRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetObjectListRequest.
//   Ответ - ОбъектXDTO - объект XDTO типа DMGetObjectListResponse.
//   ИмяТипа - Строка - имя типа перечисления.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectListResponse.
//
Функция ПолучитьСписокПеречисленияДляВыбора(Сообщение, Ответ, ИмяТипа)
	
	Если Ответ = Неопределено Тогда
		Ответ = СоздатьОбъект("DMGetObjectListResponse");
	КонецЕсли;
	
	ИмяТипа = СтрЗаменить(ИмяТипа, "Перечисление.", "");
	
	Отбор = Новый Структура;
	Если Сообщение.query <> Неопределено Тогда
		Для Каждого Условие Из Сообщение.query.conditions Цикл
			Если ВРег(Условие.property) = ВРег("Name") Тогда
				Отбор.Вставить("Наименование", Условие.value);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления[ИмяТипа].ЗначенияПеречисления Цикл
		
		ОтборПройден = Истина;
		Для Каждого СтрокаОтбора Из Отбор Цикл
			Если СтрокаОтбора.Ключ = "Наименование" Тогда
				Если СтрНайти(НРег(ЗначениеПеречисления.Синоним), НРег(СтрокаОтбора.Значение)) = 0 Тогда
					ОтборПройден = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ОтборПройден Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = СоздатьОбъект("DMObjectListItem");
		Элемент.object = СоздатьОбъект("DMObject");
		Элемент.object.name = ЗначениеПеречисления.Синоним;
		
		Элемент.object.objectId = СоздатьObjectID(ЗначениеПеречисления.Имя, Сообщение.type);
		
		Элемент.canHaveChildren = Ложь;
		Элемент.isFolder = Ложь;
		
		Ответ.items.Добавить(Элемент);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Ищет в правилах загрузки данных в 1С:Документооборот печатные формы, которые требуется
// сформировать на стороне ИС, для последующего присоединения их к файлам объекта ДО.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetPrintedFormListRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetPrintedFormListResponse или DMError.
//
Функция ПолучитьСписокПечатныхФормДляФормированияНаСторонеИС(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetPrintedFormListResponse");
		
		ПравилаДляАнализа = Новый Массив;
		СоответствиеObjectIDПравилам = Новый Соответствие;
		
		Для Каждого ObjectID Из Сообщение.objects Цикл
			Ссылка = ПолучитьСсылкуПоObjectID(ObjectID);
			ПравилаДляАнализа.Добавить(Ссылка);
			СоответствиеObjectIDПравилам.Вставить(Ссылка, ObjectID);
		КонецЦикла;
		
		ТипыФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПравилаДляАнализа, "ТипФайловСохраненияПечатныхФорм");
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПравилаЗагрузкиДанныхВДОПрисоединяемыеПечатныеФормы.Ссылка,
			|	ПравилаЗагрузкиДанныхВДОПрисоединяемыеПечатныеФормы.ИмяКоманды,
			|	ПравилаЗагрузкиДанныхВДОПрисоединяемыеПечатныеФормы.МенеджерПечати,
			|	ПравилаЗагрузкиДанныхВДОПрисоединяемыеПечатныеФормы.Обновлять,
			|	ПравилаЗагрузкиДанныхВДОПрисоединяемыеПечатныеФормы.РольФайла,
			|	ПравилаЗагрузкиДанныхВДОПрисоединяемыеПечатныеФормы.ДополнительныеПараметры
			|ИЗ
			|	Справочник.ПравилаЗагрузкиДанныхВДО.ПрисоединяемыеПечатныеФормы КАК
			|		ПравилаЗагрузкиДанныхВДОПрисоединяемыеПечатныеФормы
			|ГДЕ
			|	ПравилаЗагрузкиДанныхВДОПрисоединяемыеПечатныеФормы.Ссылка В (&ПравилаДляАнализа)");
		Запрос.УстановитьПараметр("ПравилаДляАнализа", ПравилаДляАнализа);
		ТаблицаПечатныхФорм = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Элемент Из СоответствиеObjectIDПравилам Цикл
			СоответствиеПравилXDTO = СоздатьОбъект("DMObjectPrintedForms");
			СоответствиеПравилXDTO.object = Элемент.Значение;
			
			ТипФайла = ТипыФайлов[Элемент.Ключ];
			Если Не ЗначениеЗаполнено(ТипФайла) Тогда
				ТипФайла = РаботаСИнтегрированнымиСистемамиВызовСервера.ТипФайлаСохраняемойПечатнойФормыПоУмолчанию();
			КонецЕсли;
			СоответствиеПравилXDTO.spreadsheetDocumentFileType = ПолучитьЗначениеПеречисленияXDTO(ТипФайла);
			
			ПечатныеФормы = ТаблицаПечатныхФорм.НайтиСтроки(Новый Структура("Ссылка", Элемент.Ключ));
			Для Каждого ПечатнаяФорма Из ПечатныеФормы Цикл
				ПечатнаяФормаXDTO = СоздатьОбъект("DMPrintedForm");
				ПечатнаяФормаXDTO.commandName = ПечатнаяФорма.ИмяКоманды;
				ПечатнаяФормаXDTO.printManager = ПечатнаяФорма.МенеджерПечати;
				ПечатнаяФормаXDTO.update = ПечатнаяФорма.Обновлять;
				ПечатнаяФормаXDTO.additionalParameters = ПечатнаяФорма.ДополнительныеПараметры;
				ЗаполнитьСвойствоXDTOИзРеквизита(ПечатнаяФормаXDTO, "role", ПечатнаяФорма.РольФайла);
				
				СоответствиеПравилXDTO.printedForms.Добавить(ПечатнаяФормаXDTO);
			КонецЦикла;
			
			Ответ.objectsPrintedForms.Добавить(СоответствиеПравилXDTO);
		КонецЦикла;
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка печатных форм'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает записи регистра СвязиОбъектовИнтегрированныхСистем, для которых отсутствует обратная связь в
// интегрированном узле.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetObjectLinksWithoutFeedbackMarkRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectLinksWithoutFeedbackMarkResponse или типа DMError.
//
Функция ПолучитьСсылкиБезОбратнойСвязиВУзле(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetObjectLinksWithoutFeedbackMarkResponse");
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СвязиОбъектовИнтегрированныхСистем.СсылкаНаОбъектДО КАК СсылкаНаОбъектДО,
			|	СвязиОбъектовИнтегрированныхСистем.ТипВнешнегоОбъекта КАК ТипВнешнегоОбъекта,
			|	СвязиОбъектовИнтегрированныхСистем.ИДВнешнегоОбъекта КАК ИДВнешнегоОбъекта
			|ИЗ
			|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК СвязиОбъектовИнтегрированныхСистем
			|ГДЕ
			|	СвязиОбъектовИнтегрированныхСистем.УзелИнтегрированнойСистемы = &УзелИнтегрированнойСистемы
			|	И (СвязиОбъектовИнтегрированныхСистем.СсылкаНаОбъектДО ССЫЛКА Справочник.ДокументыПредприятия
			|			ИЛИ СвязиОбъектовИнтегрированныхСистем.СсылкаНаОбъектДО ССЫЛКА Справочник.Контрагенты
			|			ИЛИ СвязиОбъектовИнтегрированныхСистем.СсылкаНаОбъектДО ССЫЛКА Справочник.Мероприятия)
			|	И НЕ СвязиОбъектовИнтегрированныхСистем.ЕстьОбратнаяСвязьВУзле");
		Запрос.УстановитьПараметр("УзелИнтегрированнойСистемы", ПараметрыСеанса.УзелИнтегрированнойСистемы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СвязьXDTO = СоздатьОбъект("DMLink");
			
			СвязьXDTO.linkedObject = ПолучитьObjectIDПоСсылке(Выборка.СсылкаНаОбъектДО);
			
			СвязьXDTO.ownerObject = СоздатьОбъект("ExternalObjectID");
			СвязьXDTO.ownerObject.ID = Выборка.ИДВнешнегоОбъекта;
			СвязьXDTO.ownerObject.type = Выборка.ТипВнешнегоОбъекта;
			
			Ответ.links.Добавить(СвязьXDTO);
		КонецЦикла;
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении ссылок без обратной связи в узле'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает текущего пользователя в виде объекта XDTO 
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetCurrentUserRequest. Запрос на получение текущего пользователя.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetCurrentUserResponse или DMError.
//
Функция ПолучитьТекущегоПользователя(Сообщение)
	
	Ответ = СоздатьОбъект("DMGetCurrentUserResponse");
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Ответ.user = ПолучитьОбъектXDTOПоСуществующимДаннымДО(ТекущийПользователь.ПолучитьОбъект(), Неопределено);
	
	Для Каждого Сотрудник Из Сотрудники.СотрудникиПользователя() Цикл
		СотрудникXDTO = ПолучитьОбъектXDTOПоСуществующимДаннымДО(Сотрудник.ПолучитьОбъект(), Неопределено);
		Ответ.employees.Добавить(СотрудникXDTO);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Процедура ПроверитьАлгоритм(Алгоритм, ЗапрещенныеСтроки, Исключения, СписокОшибок, ПодходящиеИсключения)
	
	Для Каждого ЗапрещеннаяСтрока Из ЗапрещенныеСтроки Цикл
		
		Позиция = СтрНайти(Алгоритм, НРег(ЗапрещеннаяСтрока));
		Пока Позиция <> 0 Цикл
			
			// Проверим на возможные исключения.
			ЭтоИсключение = Ложь;
			Для Каждого СтрокаИсключение Из Исключения Цикл
				СтрокаИсключение = НРег(СтрокаИсключение);
				ДлинаИсключения = СтрДлина(СтрокаИсключение);
				Если Сред(Алгоритм, Позиция - 1, ДлинаИсключения) = СтрокаИсключение
						Или Сред(Алгоритм, Позиция, ДлинаИсключения) = СтрокаИсключение Тогда
					ЭтоИсключение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЭтоИсключение И СписокОшибок.Найти(СтрШаблон("""%1""", ЗапрещеннаяСтрока)) = Неопределено Тогда
				СписокОшибок.Добавить(СтрШаблон("""%1""", ЗапрещеннаяСтрока));
				Для Каждого СтрокаИсключение Из Исключения Цикл
					Если ПодходящиеИсключения.Найти(СтрШаблон("""%1""", СтрокаИсключение)) = Неопределено Тогда
						ПодходящиеИсключения.Добавить(СтрШаблон("""%1""", СтрокаИсключение));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Позиция = СтрНайти(Алгоритм, НРег(ЗапрещеннаяСтрока), НаправлениеПоиска.СНачала, Позиция + 1);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет корректность выражения на встроенном языке, используемого для заполнения реквизитов в
// правилах интеграции.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMCheckExpressionOnBuiltInLanguageRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMOK или DMError.
//
Функция ПроверитьВыражениеНаВстроенномЯзыке(Сообщение)
	
	// BSLLS:PairingBrokenTransaction-off
	// Проектное решение. Методы НачатьТранзакцию / ОтменитьТранзакцию используются для предотвращения
	// несанкционированных действий с БД из выражения на встроенном языке
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
			ВызватьИсключение НСтр("ru = 'Недостаточно прав для выполнения выражения на встроенном языке.
				|Обратитесь к администратору.'");
		КонецЕсли;
		
		ИмяТипаИсточника = "";
		ПолучитьТипДОПоТипуXDTO(Сообщение.objectType.xdtoClassName, ИмяТипаИсточника);
		МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТипаИсточника);
		МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(ИмяТипаИсточника);
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеИсточника)
				Или ОбщегоНазначения.ЭтоПланВидовРасчета(МетаданныеИсточника) Тогда
			Источник = МенеджерИсточника.СоздатьЭлемент();
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеИсточника) Тогда
			Источник = МенеджерИсточника.СоздатьДокумент();
		КонецЕсли;
		Источник.Заполнить(Неопределено);
		
		Если СокрЛП(Сообщение.expressionOnBuiltInLanguage) <> "" Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("Источник", Источник);
			Параметры.Вставить("Результат", Неопределено);
			
			Если СвойствоУстановлено(Сообщение, "tabularSectionName") И Сообщение.tabularSectionName <> "" Тогда
				ЧастиСтроки = СтрРазделить(Сообщение.tabularSectionName, ".");
				ТипОбъектаXDTO = ФабрикаXDTO.Пакеты.Получить("http://www.1c.ru/dm").Получить(
					Сообщение.objectType.xdtoClassName);
				
				Если ЧастиСтроки.Количество() = 1 Тогда
					ТипСтроки = ТипОбъектаXDTO.Свойства.Получить(ЧастиСтроки[0]).Тип.Имя;
					
				ИначеЕсли ЧастиСтроки.Количество() = 2 Тогда
					ТипСтроки =
						ТипОбъектаXDTO.Свойства.Получить(ЧастиСтроки[0]).Тип.Свойства.Получить(ЧастиСтроки[1]).Тип.Имя;
					
				Иначе
					ТипСтроки = "";
					
				КонецЕсли;
				
				Если ТипСтроки <> "" Тогда
					Параметры.Вставить("ТекущаяСтрока", СоздатьОбъект(ТипСтроки));
				КонецЕсли;
			КонецЕсли;
			
			ВыполнитьВБезопасномРежиме(Сообщение.expressionOnBuiltInLanguage, Параметры);
		КонецЕсли;
		
		Ответ = СоздатьОбъект("DMOK");
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при проверке выражения на встроенном языке'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Ответ;
	
	// BSLLS:PairingBrokenTransaction-on
	
КонецФункции

// Читает штрихкоды объекта по запросу DMRetrieveBarcodesRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMRetrieveBarcodesRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMRetrieveBarcodesResponse или DMError.
//
Функция ПрочитатьШтрихкодыОбъекта(Сообщение)
	
	Попытка
		
		Если Сообщение.objectId.type = "DMDocument" Тогда
			Менеджер = Справочники.ДокументыПредприятия;
			
		ИначеЕсли Сообщение.objectId.type = "DMFile" Тогда
			Менеджер = Справочники.Файлы;
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Штрихкоды для объектов этого типа не поддерживаются'");
			
		КонецЕсли;
		
		Владелец = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Сообщение.objectId.ID));
		
		Ответ = СоздатьОбъект("DMRetrieveBarcodesResponse");
		ШтрихкодыОбъекта = СоздатьОбъект("DMObjectBarcodes");
		ШтрихкодыОбъекта.objectId = Сообщение.objectId;
		
		ЗапросШтрихкоды = Новый Запрос(
			"ВЫБРАТЬ
			|	Штрихкоды.ВнутреннийШтрихкод,
			|	Штрихкоды.Код
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Владелец = &Владелец");
		ЗапросШтрихкоды.УстановитьПараметр("Владелец", Владелец);
		
		ВыборкаШтрихкоды = ЗапросШтрихкоды.Выполнить().Выбрать();
		Пока ВыборкаШтрихкоды.Следующий() Цикл
			Штрихкод = СоздатьОбъект("DMBarcode");
			Штрихкод.internal = ВыборкаШтрихкоды.ВнутреннийШтрихкод;
			Штрихкод.barcodeData = ВыборкаШтрихкоды.Код;
			ШтрихкодыОбъекта.barcodes.Добавить(Штрихкод);
		КонецЦикла;
		
		Ответ.objectBarcodes = ШтрихкодыОбъекта;
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при чтении штрихкодов объекта'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Выполняет синхронизацию связей объектов интегрированных систем.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMSynchronizeObjectLinksRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMSynchronizeObjectLinksResponse или типа DMError.
//
Функция СинхронизоватьСвязиОбъектовИнтегрированныхСистем(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMSynchronizeObjectLinksResponse");
		
		Для Каждого СсылкаXDTO Из Сообщение.links Цикл
			Если Не ДобавитьСсылкуНаВнешнийОбъект(СсылкаXDTO.linkedObject, СсылкаXDTO.ownerObject) Тогда
				БитаяСсылкаXDTO = СоздатьОбъект("DMLink");
				СкопироватьОбъектXDTO(БитаяСсылкаXDTO, СсылкаXDTO);
				Ответ.brokenLinks.Добавить(БитаяСсылкаXDTO);
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при синхронизации связей объектов интегрированных систем'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Создает объект XDTO по указанному типу объекта.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMCreateRequest. Запрос на создание.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMCreateResponse или DMError.
//
Функция Создать(Сообщение)
	
	Ответ = СоздатьОбъект("DMCreateResponse");
	Если Сообщение.dataBaseId <> Неопределено Тогда
		Ответ.dataBaseId = Сообщение.dataBaseId;
	КонецЕсли;
	
	Ошибка = ОписаниеОшибкиXDTO();
	ИсточникДанных = ИсточникОбъектXDTO(Сообщение.object, Сообщение.object.objectID.type);
	ОбъектДО = СоздатьОбъектДО(ИсточникДанных, Ошибка);
	Если ОбъектДО = Неопределено Тогда
		Возврат Ошибка;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTOПоСуществующимДаннымДО(
		ОбъектДО.Ссылка,
		Неопределено,
		Ложь);
	
	Если ПроверитьТип(ОбъектXDTO, "DMError") Тогда
		Возврат ОбъектXDTO;
	КонецЕсли;
	
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(ОбъектДО.Ссылка, Истина);
	
	Ответ.object = ОбъектXDTO;
	Возврат Ответ;
	
КонецФункции

// Создает объекты Документооборота из входящих данных по правилам загрузки.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMCreateFromIncomingDataRequest. Запрос на создание.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMCreateFromIncomingDataResponse.
//
Функция СоздатьПоПравиламЗагрузки(Сообщение)
	
	Ответ = СоздатьОбъект("DMCreateFromIncomingDataResponse");
	Если Сообщение.dataBaseId <> Неопределено Тогда
		Ответ.dataBaseId = Сообщение.dataBaseId;
	КонецЕсли;
	
	Для Каждого Объект Из Сообщение.objects Цикл
		
		СтруктураОтвета = СоздатьОбъект("DMObjectChangeResponseStructure");
		СтруктураОтвета.success = Истина;
		СтруктураОтвета.key = СоздатьObjectID(Объект.externalObject.ID, Объект.externalObject.type);
		
		Ошибка = ОписаниеОшибкиXDTO(НСтр("ru = 'Ошибка при создании объекта'"));
		
		СсылкаНаПравилоЗагрузки = ПолучитьСсылкуПоObjectID(Объект.dataLoadingRule);
		Если Не ЗначениеЗаполнено(СсылкаНаПравилоЗагрузки) Тогда
			Ошибка.description = СтрШаблон(НСтр(
				"ru = 'Не удалось получить ссылку на правило загрузки данных в 1С:Документооборот.
				|Идентификатор правила загрузки: %1
				|Тип объекта правила загрузки: %2'"),
				Объект.dataLoadingRule.ID,
				Объект.dataLoadingRule.type);
			СтруктураОтвета.success = Ложь;
			СтруктураОтвета.error = Ошибка;
			Ответ.objects.Добавить(СтруктураОтвета);
			Продолжить;
		КонецЕсли;
		
		ПравилоЗагрузкиДанных = СсылкаНаПравилоЗагрузки.ПолучитьОбъект();
		
		ИсточникДанных = ИсточникВходящиеДанные(Объект.incomingData, ПравилоЗагрузкиДанных, Объект.files);
		Если СвойствоУстановлено(Объект, "externalObject") Тогда
			ИсточникДанных.ВнешнийОбъект.ID = Объект.externalObject.ID;
			ИсточникДанных.ВнешнийОбъект.Тип = Объект.externalObject.type;
		КонецЕсли;
		
		ОбъектДО = СоздатьОбъектДО(ИсточникДанных, Ошибка);
		Если ОбъектДО = Неопределено Тогда
			СтруктураОтвета.success = Ложь;
			СтруктураОтвета.error = Ошибка;
			Ответ.objects.Добавить(СтруктураОтвета);
			Продолжить;
		КонецЕсли;
		
		Результат = ПолучитьОбъектXDTOПоСуществующимДаннымДО(
			ОбъектДО.Ссылка,
			Неопределено,
			Ложь);
		
		Если ПроверитьТип(Результат, "DMError") Тогда
			СтруктураОтвета.success = Ложь;
			СтруктураОтвета.error = Результат;
		Иначе
			СтруктураОтвета.object = Результат;
		КонецЕсли;
		Ответ.objects.Добавить(СтруктураОтвета);
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Получает ссылку на объект ДО.
//
// Параметры:
//   ИмяТипаXDTO - Строка - имя типа XDTO.
//   ID - Строка - идентификатор объекта конфигурации.
//   ИмяТипа - Строка - неявно возвращаемое значение, имя типа.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на объект.
//
Функция СсылкаИзUUID(ИмяТипаXDTO, ID, ИмяТипа = "")
	
	Ссылка = Неопределено;
	
	ОбработкаЗапросовXDTOПереопределяемый.ПриОпределенииТипаXDTO(ИмяТипаXDTO);
	ПолучитьТипДОПоТипуXDTO(ИмяТипаXDTO, ИмяТипа);
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТипа);
	Ссылка = Менеджер.ПустаяСсылка();
	
	Если ID <> "" Тогда
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ID) Тогда
			Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ID));
		Иначе
			// Возможно, это имя предопределенного элемента или перечисление.
			Попытка
				Ссылка = Менеджер[ID];
			Исключение
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Нет значения ""%1"" среди значений типа ""%2""'"),
					ID,
					ИмяТипа);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Возвращает список объектов, относящихся к определенной странице динамического списка.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetDynamicListRequest:
//     * type - Строка - имя типа объекта XDTO.
//     * page - Число - номер страницы динамического списка.
//     * numberOfObjectsPerPage - Число - количество объектов на одной странице динамического списка.
//     * columnSet - СписокXDTO - массив имен реквизитов к получению.
//     * conditions - СписокXDTO - список условий отбора.
//     * orderBy - СписокXDTO - список условий сортировки.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetDynamicListResponse или DMError.
//
Функция СтраницаДинамическогоСписка(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMGetDynamicListResponse");
		
		ИмяТипа = "";
		ПолучитьТипДОПоТипуXDTO(Сообщение.type, ИмяТипа);
		
		// 1. Сформируем основной запрос с установленными отборами.
		Если ИмяТипа = "Документ.ДействиеЗадачи" Тогда
			ИтогиСписка = Новый Структура("ОписаниеИтогов, НеНачато, Просрочено, Всего", "", 0, 0, 0);
			ЗапросСОтборами = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами(Сообщение, ИтогиСписка);
			Если ИтогиСписка.Всего = 0 Тогда
				Ответ.descriptionOfTotals = "";
			Иначе
				Ответ.descriptionOfTotals = ИтогиСписка.ОписаниеИтогов;
			КонецЕсли;
			
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Попытка получить динамический список объектов не поддерживаемого типа: %1'"),
				ИмяТипа);
			
		КонецЕсли;
		
		// 2. Отдельным запросом определим общее количество страниц.
		Ответ.pageCount = ВсегоСтраниц(ЗапросСОтборами, Сообщение.numberOfObjectsPerPage);
		
		Если Сообщение.page > Ответ.pageCount Тогда
			НомерСтраницы = Ответ.pageCount;
		Иначе
			НомерСтраницы = Сообщение.page;
		КонецЕсли;
		
		// 3. Установим сортировку данных по требуемым полям.
		МассивПолейСортировки = Новый Массив;
		Если ИмяТипа = "Документ.ДействиеЗадачи" Тогда
			МассивПолейСортировки = ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.МассивПолейСортировки(Сообщение);
		КонецЕсли;
		
		Если МассивПолейСортировки.Количество() > 0 Тогда
			МассивТекстЗапроса = Новый Массив;
			МассивТекстЗапроса.Добавить(ЗапросСОтборами.Текст);
			МассивТекстЗапроса.Добавить("УПОРЯДОЧИТЬ ПО");
			МассивТекстЗапроса.Добавить(СтрСоединить(МассивПолейСортировки, ","));
			ЗапросСОтборами.Текст = СтрСоединить(МассивТекстЗапроса, Символы.ПС);
		КонецЕсли;
		
		// 4. Получим выборку данных, относящихся к текущей странице.
		Данные = ДанныеПоСтранице(ЗапросСОтборами, НомерСтраницы, Сообщение.numberOfObjectsPerPage);
		
		// 5. Дополним данные по странице дополнительными данными.
		КешДанных = Неопределено;
		Если ИмяТипа = "Документ.ДействиеЗадачи" Тогда
			ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ДополнитьДанныеЗадач(Данные, КешДанных);
		КонецЕсли;
		
		// 6. Сформируем и передадим в ответ объекты XDTO.
		Для Каждого Строка Из Данные Цикл
			ОбъектXDTO = ПолучитьОбъектXDTOПоСуществующимДаннымДО(
				Строка,
				Сообщение.columnSet,,,,
				КешДанных);
			Ответ.objects.Добавить(ОбъектXDTO);
		КонецЦикла;
	
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении страницы динамического списка'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Формирует блок соединений в запросе, получающем список объектов для выбора
//
Функция СформироватьТекстСоединений(Сообщение, СостоянияДокументов, НаборКолонок, УсловияОтбора,
		МенеджерВременныхТаблиц)
	
	ТекстСоединений = "";
	
	Для Каждого ИмяСвойства Из НаборКолонок Цикл
		
		Если ИмяСвойства = "status" Тогда
			
			ТекстСоединений = ТекстСоединений +
			"ЛЕВОЕ СОЕДИНЕНИЕ (
			|	ВЫБРАТЬ
			|		ИсторияСостояний.Документ КАК Документ,
			|		МАКСИМУМ(ИсторияСостояний.Состояние) КАК Состояние
			|	ИЗ
			|		РегистрСведений.ИсторияСостоянийДокументов КАК ИсторияСостояний
			|	ЛЕВОЕ СОЕДИНЕНИЕ (
			|		ВЫБРАТЬ
			|			Документ,
			|			МАКСИМУМ(Период) КАК Период
			|		ИЗ
			|			РегистрСведений.ИсторияСостоянийДокументов
			|		СГРУППИРОВАТЬ ПО
			|			Документ
			|	) КАК ДатыПоследнихСостояний
			|	ПО 
			|		ИсторияСостояний.Документ = ДатыПоследнихСостояний.Документ
			|		И ИсторияСостояний.Период = ДатыПоследнихСостояний.Период
			|	СГРУППИРОВАТЬ ПО ИсторияСостояний.Документ
			|) КАК ПоследниеСостояния
			|ПО
			|	ОбъектВыборки.Ссылка = ПоследниеСостояния.Документ
			|";
			
		ИначеЕсли СостоянияДокументов.Свойство(ИмяСвойства) Тогда
			
			ИмяТаблицы = "СрезПоследних" + ИмяСвойства;
			ИмяПараметра = "ЗначениеОтбора" + ИмяСвойства;
			
			ТекстСоединений = ТекстСоединений +
			"ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних(,
			|		Состояние В (&" + ИмяПараметра + ")) КАК " + ИмяТаблицы + "
			|ПО
			|	ОбъектВыборки.Ссылка = " + ИмяТаблицы + ".Документ
			|";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УсловиеОтбора Из УсловияОтбора Цикл
		
		ИмяСрезаСостояний = "СрезСостояний" + Формат(УсловияОтбора.Индекс(УсловиеОтбора), "ЧГ=0");
		ОператорСравнения = ?(ЗначениеЗаполнено(УсловиеОтбора.ОператорСравнения),
			УсловиеОтбора.ОператорСравнения,
			"=");
		ИмяПараметра = "Параметр" + Формат(УсловияОтбора.Индекс(УсловиеОтбора), "ЧГ=0");
		
		Если УсловиеОтбора.Поле = "status" Тогда
			
			Если УсловиеОтбора.ОператорСравнения = "<>" Тогда
				ТекстСоединений = ТекстСоединений +
				"ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних() КАК " + ИмяСрезаСостояний + "
				|ПО
				|	ОбъектВыборки.Ссылка = " + ИмяСрезаСостояний + ".Документ
				|	И " + ИмяСрезаСостояний + ".Состояние = &" + ИмяПараметра + "
				|";
			Иначе
				ТекстСоединений = ТекстСоединений +
				"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних() КАК " + ИмяСрезаСостояний + "
				|ПО
				|	ОбъектВыборки.Ссылка = " + ИмяСрезаСостояний + ".Документ
				|	И " + ИмяСрезаСостояний + ".Состояние " + ОператорСравнения + " &" + ИмяПараметра + "
				|";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (Сообщение.query <> Неопределено) И (Сообщение.query.conditions.Количество() = 1) Тогда
		Условие = Сообщение.query.conditions[0];
		
		Если (ВРег(Условие.property) = ВРег("AdditionalProperty"))
				И (Сообщение.Type = "DMObjectPropertyValue"
					Или Сообщение.Type = "DMObjectPropertyValueHierarchy") Тогда
				
			ЗапросВладелецДопЗначений = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВЫБОР
				|		КОГДА ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
				|			ТОГДА ДополнительныеРеквизитыИСведения.Ссылка
				|		ИНАЧЕ ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений
				|	КОНЕЦ КАК Владелец
				|ПОМЕСТИТЬ ВТВладелецДопЗначений
				|ИЗ
				|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
				|ГДЕ
				|	ДополнительныеРеквизитыИСведения.Ссылка = &Параметр");
			ЗапросВладелецДопЗначений.УстановитьПараметр("Параметр", ПолучитьСсылкуПоObjectID(Условие.value));
			ЗапросВладелецДопЗначений.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			ЗапросВладелецДопЗначений.Выполнить();
			
			ТекстСоединений = ТекстСоединений +
				"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВладелецДопЗначений КАК ВТВладелецДопЗначений
				|	ПО ОбъектВыборки.Владелец = ВТВладелецДопЗначений.Владелец
				|";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСоединений;
	
КонецФункции

Функция ТаблицаИспользуетсяВВыражении(ВычисляемоеВыражение, Знач ИмяТаблицыИсточника)
	
	ИмяТаблицыИсточника = НРег(СтрШаблон("%1.%2", "Источник", ИмяТаблицыИсточника));
	
	Возврат СтрНайти(НРег(ВычисляемоеВыражение), ИмяТаблицыИсточника) > 0;
	
КонецФункции

Функция ТекстОбъектаXDTOДляЖР(ОбъектXDTO)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ТекстОбъекта = ЗаписьXML.Закрыть();
	ЗаписьXML = Неопределено;
	
	КоличествоДвоичныхДанных = СтрЧислоВхождений(ТекстОбъекта, "<binaryData>");
	Для НомерВхождения = 1 По КоличествоДвоичныхДанных Цикл
		НачальныйНомер = СтрНайти(ТекстОбъекта, "<binaryData>");
		Если НачальныйНомер = 0 Тогда
			Прервать;
		КонецЕсли;
		КонечныйНомер = СтрНайти(ТекстОбъекта, "</binaryData>") + 13;
		ЧислоСимволов = КонечныйНомер - НачальныйНомер;
		
		Подстрока = Сред(ТекстОбъекта, НачальныйНомер, ЧислоСимволов);
		ТекстОбъекта = СтрЗаменить(ТекстОбъекта, Подстрока, "<binaryData/>");
	КонецЦикла;
	
	Возврат Лев(ТекстОбъекта, 10000);
	
КонецФункции

// Удаляет запись из регистра СвязиОбъектовИнтегрированныхСистем по запросу DMRemoveObjectLinkRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMRemoveObjectLinkRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMRemoveObjectLinkResponse или типа DMError.
//
Функция УдалитьСсылкуНаВнешнийОбъектПоЗапросу(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъект("DMRemoveObjectLinkResponse");
		
		СсылкаНаОбъектДО = ПолучитьСсылкуПоObjectID(Сообщение.linkedObject);
		Если Не ЗначениеЗаполнено(СсылкаНаОбъектДО) Тогда
			ВызватьИсключение НСтр("ru = 'Объект не найден'");
		КонецЕсли;
		
		РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.УдалитьСвязьОбъектаДОИВнешнегоОбъекта(
			Сообщение.ownerObject.ID,
			Сообщение.ownerObject.type,
			СсылкаНаОбъектДО);
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при удалении ссылки на внешний объект'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Возвращает ссылку на узел интегрированной системы по свойству сообщения dataBaseId.
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение интегрированной системы.
//
// Возвращаемое значение:
//   ПланОбменаСсылка.ИнтегрированныеСистемы - ссылка узел, соответствующий отправителю сообщения.
//
Функция УзелИнтегрированнойСистемыПоСообщению(Сообщение)
	
	ИдентификаторУзла = Неопределено;
	
	Если Сообщение.Свойства().Получить("dataBaseID") <> Неопределено Тогда
		ИдентификаторУзла = Сообщение.dataBaseID;
	КонецЕсли;
	
	Если ИдентификаторУзла = Неопределено Тогда
		Возврат ПланыОбмена.ИнтегрированныеСистемы.ПустаяСсылка();
	Иначе
		Возврат ОбработкаЗапросовXDTOПовтИсп.УзелИнтегрированнойСистемы(ИдентификаторУзла);
	КонецЕсли;
	
КонецФункции

// Собирает условие на дату в зависимости от оператора сравнения
//
Функция УсловиеНаДату(ИмяПоля, ОператорСравнения, ИмяПараметра)
	
	Если ОператорСравнения = "<" Или ОператорСравнения = "<=" Тогда
		Результат = "((ИмяПоля <> ДАТАВРЕМЯ(1, 1, 1)) И (КОНЕЦПЕРИОДА(ИмяПоля, ДЕНЬ) == &ИмяПараметра))";
	Иначе
		Результат = "((ИмяПоля <> ДАТАВРЕМЯ(1, 1, 1)) И (НАЧАЛОПЕРИОДА(ИмяПоля, ДЕНЬ) == &ИмяПараметра))";
	КонецЕсли;
	Результат = СтрЗаменить(Результат, "==", ОператорСравнения);
	Результат = СтрЗаменить(Результат, "ИмяПоля", "ОбъектВыборки." + ИмяПоля);
	Результат = СтрЗаменить(Результат, "ИмяПараметра", ИмяПараметра);
	
	Возврат Результат;
	
КонецФункции

// Проверяет разрешено ли чтение объекта.
//
// Параметры:
//   Ссылка - СправочникСсылка - ссылка на объект Документооборота.
//   ОбъектДО - СправочникОбъект - неявно возвращаемое значение, объект Документооборота.
//
// Возвращаемое значение:
//   Булево
//
Функция ЧтениеРазрешено(Ссылка, ОбъектДО = Неопределено)
	
	Попытка
		ОбъектДО = Ссылка.ПолучитьОбъект();
		ЧтениеРазрешено = Истина;
	Исключение
		ЧтениеРазрешено = Ложь;
	КонецПопытки;
	
	Возврат ЧтениеРазрешено;
	
КонецФункции

#КонецОбласти
