#Область ПрограммныйИнтерфейс

// Обработчик нажатия на гиперссылку правила обработки
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, инициатор открытия правила.
// 	Элемент - ПолеФормы - инициатор нажатия.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПравилаОбработкиНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПравилаОбработкиНажатиеПродолжение",
		ЭтотОбъект,
		Новый Структура("Форма", Форма));
	
	Если Форма.Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = ОбщегоНазначенияДокументооборотКлиентСервер.ТекстВопросаНезаписанныхДанных(
			НСтр("ru = 'Открытие правил обработки'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	ИначеЕсли Форма.Модифицированность = Истина Тогда 
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК)
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПравилаОбработкиНажатие
//
Процедура ПравилаОбработкиНажатиеПродолжение(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	Объект = Форма.Объект;  
	Элементы = Форма.Элементы;
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Форма.Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ТематикиДокументов") Тогда
		ПараметрыОткрытия.Вставить("Тематика", Форма.Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ВидОбъектаОбработки", Форма.Объект.ВидДокумента);
	Иначе 
		ПараметрыОткрытия.Вставить("ВидОбъектаОбработки", Форма.Объект.Ссылка);
	КонецЕсли; 
	
	Если Элементы.Найти("ВидыДействий") <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ПараметрыОткрытия.Вставить("ДействуетС", ТекущиеДанные.ДействуетС);
			ПараметрыОткрытия.Вставить("ДействуетПо", ТекущиеДанные.ДействуетПо);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ПравилаОбработкиОбъектов.Форма.ПравилаОбработкиОбъектов",
		ПараметрыОткрытия);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормНастроекДействий

// Обработчик начала выбора Автора в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, инициатор выбора.
// 	Элемент - ПолеФормы - инициатор начала выбора.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура НастройкиДействияАвторНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
	Если ДействияКлиентСервер.ЭтоДействие(Форма.Объект.Ссылка) Тогда 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.Сотрудники");
	Иначе 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.Сотрудники");
	КонецЕсли;
	
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(
		Элемент,
		Форма.Объект.Автор,,
		ДополнениеТипа,
		ТипОбъекта);
	
КонецПроцедуры

// Обработчик обработки выбора Автора в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор обработки выбора.
// 	ВыбранноеЗначение - Произвольный - выбранное значение, которое будет установлено как значение поля ввода.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура НастройкиДействияАвторОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт 
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Объект.Автор = ВыбранноеЗначение;
	
КонецПроцедуры

// Обработчик автопобора поля Автор в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Текст - Строка - текст, введенный в поле ввода.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура НастройкиДействияАвторАвтоПодбор(Форма, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта) Экспорт 
	
	ТекстПоиска = СокрЛП(Текст);
	Если Не ЗначениеЗаполнено(ТекстПоиска)
		Или СтрДлина(ТекстПоиска) < 2 Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Если ДействияКлиентСервер.ЭтоДействие(Форма.Объект.Ссылка) Тогда 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.Сотрудники");
	Иначе 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.Сотрудники");
	КонецЕсли;
	ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(
		ТекстПоиска,
		ДополнениеТипа,
		ТипОбъекта);
	
	Если Не ЗначениеЗаполнено(ДанныеВыбора) Тогда
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик окончания автопобора поля Автор в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Текст - Строка - текст, введенный в поле ввода.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура НастройкиДействияАвторОкончаниеВводаТекста(Форма, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта) Экспорт 
	
	Если Не ЗначениеЗаполнено(СокрЛ(Текст)) Тогда
		
		Если ТипЗнч(Форма.Объект.Автор) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			Форма.Объект.Автор = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекстПоиска = СокрЛП(Текст);
	Если ДействияКлиентСервер.ЭтоДействие(Форма.Объект.Ссылка) Тогда 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.Сотрудники");
	Иначе 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.Сотрудники");
	КонецЕсли;
	ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(
		ТекстПоиска,
		ДополнениеТипа,
		ТипОбъекта);
	
	Если Не ЗначениеЗаполнено(ДанныеВыбора) Тогда
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик начала выбора Контролера в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, инициатор выбора.
// 	Элемент - ПолеФормы - инициатор начала выбора.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура НастройкиДействияКонтролерНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
	Если ДействияКлиентСервер.ЭтоДействие(Форма.Объект.Ссылка) Тогда 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли");
	Иначе 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли");
	КонецЕсли;
	
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(
		Элемент,
		Форма.Объект.Контролер,,
		ДополнениеТипа,
		ТипОбъекта);
	
КонецПроцедуры

// Обработчик обработки выбора Контролера в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор обработки выбора.
// 	ВыбранноеЗначение - Произвольный - выбранное значение, которое будет установлено как значение поля ввода.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура НастройкиДействияКонтролерОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт 
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Объект.Контролер = ВыбранноеЗначение;
	
КонецПроцедуры

// Обработчик автопобора поля Контролер в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Текст - Строка - текст, введенный в поле ввода.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура НастройкиДействияКонтролерАвтоПодбор(Форма, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта) Экспорт 
	
	ТекстПоиска = СокрЛП(Текст);
	Если Не ЗначениеЗаполнено(ТекстПоиска)
		Или СтрДлина(ТекстПоиска) < 2 Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Если ДействияКлиентСервер.ЭтоДействие(Форма.Объект.Ссылка) Тогда 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли");
	Иначе 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли");
	КонецЕсли;
	ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(
		ТекстПоиска,
		ДополнениеТипа,
		ТипОбъекта);
	
	Если Не ЗначениеЗаполнено(ДанныеВыбора) Тогда
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик окончания автопобора поля Контролер в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Текст - Строка - текст, введенный в поле ввода.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура НастройкиДействияКонтролерОкончаниеВводаТекста(Форма, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта) Экспорт 
	
	Если Не ЗначениеЗаполнено(СокрЛ(Текст)) Тогда
		
		Если ТипЗнч(Форма.Объект.Контролер) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			Форма.Объект.Контролер = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекстПоиска = СокрЛП(Текст);
	Если ДействияКлиентСервер.ЭтоДействие(Форма.Объект.Ссылка) Тогда 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли");
	Иначе 
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли");
	КонецЕсли;
	ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(
		ТекстПоиска,
		ДополнениеТипа,
		ТипОбъекта);
	
	Если Не ЗначениеЗаполнено(ДанныеВыбора) Тогда
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик начала выбора в поле Представление строки в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор обработчика.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
// 	ЗаголовокФормы - Строка - содержит заголовок формы выбора.
// 	ЭтоОбрабатывающийРезультат - Булево - признак открытия строки обрабатывающего результат.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура ПредставлениеСтрокиНачалоВыбора(Форма, Элемент, ДанныеВыбора, 
	СтандартнаяОбработка, ЗаголовокФормы,
	ОтображатьРоли = Истина, ВыбиратьПодразделения = Истина, ТипОбъекта = Неопределено) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", ОтображатьРоли);
	Если ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия") Тогда
		ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоДокументам", Истина);
	ИначеЕсли ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Мероприятия") Тогда
		ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоМероприятиям", Истина);
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип объекта %1.'"),
			ТипОбъекта);
	КонецЕсли;
	ПараметрыФормы.Вставить("ОтображатьВидыПодразделений", Ложь);
	ПараметрыФормы.Вставить("ВыбиратьВидыПодразделений", Ложь);
	ПараметрыФормы.Вставить("ОтображатьПодразделения", Ложь);
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("СправочникСсылка.НастройкиДействийРегистрации")
		И ТипЗнч(Форма.Объект.Ссылка) <> Тип("СправочникСсылка.НастройкиДействийУтверждения")
		И ВыбиратьПодразделения Тогда 
		ПараметрыФормы.Вставить("ВыбиратьПодразделения", Истина);
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ВыбиратьДолжностныеЛица", Истина);
	ПараметрыФормы.Вставить("ИменаПредметов", Форма.СписокПредметов);
	ПараметрыФормы.Вставить("УточнятьСоставПодразделений", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	ПараметрыФормы.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Участник) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ТекущиеДанные.Участник);
	КонецЕсли;
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, Элементы.ПредставлениеСтроки);
	
КонецПроцедуры

// Обработчик открытия поля Представление строки в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор открытия.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПредставлениеСтрокиОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт 
	
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Этап);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущиеДанные.Участник);
	
КонецПроцедуры

// Обработчик очистки поля Представление строки в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор очистки.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПредставлениеСтрокиОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ЭтоЭтап Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПредставлениеСтроки = "";
	ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	ТекущиеДанные.Защищенный = Ложь;
	Элементы.Защищенный.Пометка = Ложь;
	Элементы.Защищенный.Доступность = Ложь;
	
КонецПроцедуры

// Обработчик автопобора поля Представление строки в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор ввода текста.
// 	Текст - Строка - текст, введенный в поле ввода.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	ПараметрыПолученияДанных - Структура, Неопределено - содержит параметры поиска.
// 	Ожидание - Число - интервал в секундах после ввода текста, через который произошло событие.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
// 	ДополнениеТипа - Структура, Неопределено - содержит параметры уточняющие тип данных.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура ПредставлениеСтрокиАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора,
	ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ДополнениеТипа = Неопределено, ТипОбъекта = Неопределено) Экспорт 
	
	Элементы = Форма.Элементы;
	ТекстПоиска = СокрЛП(Текст);
	Если Не ЗначениеЗаполнено(ТекстПоиска)
		Или СтрДлина(ТекстПоиска) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ТекущиеДанные.Свойство("ПрефиксСтроки") И ЗначениеЗаполнено(ТекущиеДанные.ПрефиксСтроки) Тогда
		Если СтрНачинаетсяС(ТекстПоиска, ТекущиеДанные.ПрефиксСтроки) Тогда
			ТекстПоиска = Прав(ТекстПоиска, СтрДлина(ТекстПоиска) - СтрДлина(ТекущиеДанные.ПрефиксСтроки));
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Если ЗначениеЗаполнено(ТекстПоиска) Тогда
			МассивЭтапов = РаботаСЭтапамиКлиент.МассивЭтапов(Форма.Участники);
			
			Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.НастройкиДействийПодписания") Тогда 
				ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Подписание");
			ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.НастройкиДействийСогласования") Тогда 
				ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Согласование");
			Иначе 
				Возврат;
			КонецЕсли;
			
			ДанныеВыбора = РаботаСЭтапамиВызовСервера.ДанныеВыбора(ТекстПоиска, 
				ТипДействия,
				МассивЭтапов);
				
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ДополнениеТипа = Неопределено Тогда
		ЭтоОбрабатывающийРезультат = Ложь;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(ТекущиеДанные.Функция)
				Или ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбеспечивающийПодписание") Тогда
				ЭтоОбрабатывающийРезультат = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОбрабатывающийРезультат Тогда
			ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.ПолныеРоли,
			|СправочникСсылка.Сотрудники");
		Иначе
			ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.ПолныеРоли, СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.ПроектыКонтейнеры, 
			|СправочникСсылка.РабочиеГруппы, СправочникСсылка.ПодразделенияКонтейнеры, СправочникСсылка.Сотрудники");
		КонецЕсли; 
	КонецЕсли;
	
	// Для мобильной платформы.
	Если ПараметрыПолученияДанных = Неопределено Тогда
		ПараметрыПолученияДанных = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолученияДанных.Свойство("КонтролироватьСотрудниковБезПользователя") Тогда
		ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	КонецЕсли;
	
	ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(
		ТекстПоиска,
		ДополнениеТипа,
		ТипОбъекта,
		ПараметрыПолученияДанных);
	
	Если Не ЗначениеЗаполнено(ДанныеВыбора) Тогда
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик окончания автопобора поля Представление строки в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор ввода текста.
// 	Текст - Строка - текст, введенный в поле ввода.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	ПараметрыПолученияДанных - Структура, Неопределено - содержит параметры поиска.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
// 	ДополнениеТипа - Структура, Неопределено - содержит параметры уточняющие тип данных.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура ПредставлениеСтрокиОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора,
	ПараметрыПолученияДанных, СтандартнаяОбработка, ДополнениеТипа = Неопределено, ТипОбъекта = Неопределено) Экспорт 
	
	Элементы = Форма.Элементы;
	ТекстПоиска = СокрЛП(Текст);
	Если ТекстПоиска = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ТекущиеДанные.Свойство("ПрефиксСтроки") И ЗначениеЗаполнено(ТекущиеДанные.ПрефиксСтроки) Тогда
		Если СтрНачинаетсяС(ТекстПоиска, ТекущиеДанные.ПрефиксСтроки) Тогда
			ТекстПоиска = Прав(ТекстПоиска, СтрДлина(ТекстПоиска) - СтрДлина(ТекущиеДанные.ПрефиксСтроки));
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.НастройкиДействийПодписания") Тогда 
			ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Подписание");
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.НастройкиДействийСогласования") Тогда 
			ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Согласование");
		Иначе 
			Возврат;
		КонецЕсли;
		МассивЭтапов = РаботаСЭтапамиКлиент.МассивЭтапов(Форма.Участники);	
		ДанныеВыбора = РаботаСЭтапамиВызовСервера.ДанныеВыбора(ТекстПоиска, 
			ТипДействия,
			МассивЭтапов);
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ДополнениеТипа = Неопределено Тогда 
		ЭтоОбрабатывающийРезультат = Ложь;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(ТекущиеДанные.Функция) Тогда
				ЭтоОбрабатывающийРезультат = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОбрабатывающийРезультат Тогда
			ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.ПолныеРоли,
			|СправочникСсылка.Сотрудники");
		Иначе
			ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.ПолныеРоли, СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.ПроектыКонтейнеры, 
			|СправочникСсылка.РабочиеГруппы, СправочникСсылка.ПодразделенияКонтейнеры, СправочникСсылка.Сотрудники");
		КонецЕсли; 
	КонецЕсли;
	
	// Для мобильной платформы.
	Если ПараметрыПолученияДанных = Неопределено Тогда
		ПараметрыПолученияДанных = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолученияДанных.Свойство("КонтролироватьСотрудниковБезПользователя") Тогда
		ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	КонецЕсли;
	
	ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(
		ТекстПоиска,
		ДополнениеТипа,
		ТипОбъекта,
		ПараметрыПолученияДанных);
	
КонецПроцедуры

// Обработчик выбора поля Представление строки в форме настройки действия.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор выбора.
// 	ВыбранноеЗначение - Произвольный - выбранное значение, которое будет установлено как значение поля ввода.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПредставлениеСтрокиОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	РаботаСАдреснойКнигойКлиент.ОбработатьВыборУчастника(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик открытия поля Условие в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор открытия.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура УсловиеПредставлениеОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ЭтоЭтап Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущиеДанные.Условие);
		
КонецПроцедуры

// Обработчик выбора в поле Условие в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор обработчика.
// 	ВыбранноеЗначение - Произвольный - выбранное значение, которое будет установлено как значение поля ввода.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура УсловиеПредставлениеОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	СтандартнаяОбработка = Ложь;
	СтрокаУчастника = Элементы.Участники.ТекущиеДанные;
	Если СтрокаУчастника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.Условие = ВыбранноеЗначение;
	СтрокаУчастника.УсловиеПредставление = СтрокаУчастника.Условие;
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик начала выбора в поле Условие в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор обработчика.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура УсловиеПредставлениеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Условие);
	ПараметрыФормы.Вставить("ТипОбъекта", ТипОбъекта);	
	ОткрытьФорму("Справочник.АлгоритмыПроверки.Форма.ФормаВыбора",
		ПараметрыФормы,
		Элементы.УсловиеПредставление,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

// Обработчик очистки поля Условие в форме настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор очистки.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//	
Процедура УсловиеПредставлениеОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	СтрокаУчастника = Элементы.Участники.ТекущиеДанные;
	Если СтрокаУчастника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.Условие = ПредопределенноеЗначение("Справочник.АлгоритмыПроверки.ПустаяСсылка");	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик автоподобра поля Условие в форме настройки действия
// 
// Параметры:
// 	Текст - Строка - текст, введенный в поле ввода.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//	
Процедура УсловиеПредставлениеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстПоиска = СокрЛП(Текст);
	Если Не ЗначениеЗаполнено(ТекстПоиска) Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	ИначеЕсли СтрДлина(ТекстПоиска) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = РаботаСАлгоритмамиПроверки.ДанныеВыбора(ТекстПоиска, ТипОбъекта);	
	
КонецПроцедуры

// Обработчик окончания ввода текста в поле Условие в форме настройки действия
// 
// Параметры:
// 	Текст - Строка - текст, введенный в поле ввода.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура УсловиеПредставлениеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстПоиска = СокрЛП(Текст);
	Если Не ЗначениеЗаполнено(ТекстПоиска)
		Или СтрДлина(ТекстПоиска) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = РаботаСАлгоритмамиПроверки.ДанныеВыбора(ТекстПоиска, ТипОбъекта);	
	
КонецПроцедуры

// Обработчик перед началом добавления строки таблицы Участники
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
// 	Отказ - Булево - признак отказа от добавления объекта.
// 	Копирование - Булево - определяет режим копирования.
// 	Родитель -  Неопределено, СправочникСсылка.Действия - ссылка, которая будет использована в качестве родителя. 
// 	Группа - Булево - признак добавления группы.
// 	Параметр - Произвольный - параметр команды, выполняемой при добавлении строки в таблицу.
//
Процедура УчастникиПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр) Экспорт 
	
	Отказ = Истина;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоЭтап Тогда
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(ТекущиеДанные.Функция) Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Добавление в этап обработки результата невозможно.'"));
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	СтрокиДействия = ТекущиеДанные.ПолучитьЭлементы();
	
	СтрокаУчастника = СтрокиДействия.Добавить();
	СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);
	СтрокаУчастника.Функция = ТекущиеДанные.Функция;
	
	ИндексПредыдущегоЭлемента = СтрокиДействия.Количество() - 2;
	Если ИндексПредыдущегоЭлемента >= 0 Тогда
		
		СтрокаУчастника.ВариантУстановкиСрока = 
			СтрокиДействия[ИндексПредыдущегоЭлемента].ВариантУстановкиСрока;
		
		Если СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
				СтрокаУчастника.Срок = СтрокиДействия[ИндексПредыдущегоЭлемента].Срок;
		Иначе
			СтрокаУчастника.СрокДни = СтрокиДействия[ИндексПредыдущегоЭлемента].СрокДни;
			СтрокаУчастника.СрокЧасы = СтрокиДействия[ИндексПредыдущегоЭлемента].СрокЧасы;
			СтрокаУчастника.СрокМинуты = СтрокиДействия[ИндексПредыдущегоЭлемента].СрокМинуты;
		КонецЕсли;
		
	Иначе
		
		СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ОтносительныйСрок;
		
	КонецЕсли;
	
	Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
	
	Форма.ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

// Обработчик перед удалением строки таблицы Участники
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
// 	Отказ - Булево - признак отказа от добавления объекта.
Процедура УчастникиПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	Элементы = Форма.Элементы;
	Участники = Форма.Участники;
	Отказ = Истина;
	
	ВыделенныеСтроки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(
		Элементы.Участники.ВыделенныеСтроки);
	
	// Если выделена только одна строка, то выводим сообщение о невозможности
	// ее удаления. Иначе молча удаляем все возможные строки дерева.
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		
		СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
		
		ТекстПредупреждения = "";
		
		Если СтрокаДерева.ЭтоЭтап Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииЭтапа();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Вначале исключаем этапы и участников, которых невозможно удалить.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		
		Если СтрокаДерева.ЭтоЭтап Тогда
			
			ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем всех выделенных участников.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаУчастника = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		
		СтрокаЭтапа = СтрокаУчастника.ПолучитьРодителя();
		ЭлементыУчастников = СтрокаЭтапа.ПолучитьЭлементы();
		Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаЭтапа.Функция) Тогда 
			Если Элементы.Участники.ТекущийЭлемент.Имя = "ПредставлениеСтроки" Тогда
				ЭлементыУчастников[0].Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
				ЭлементыУчастников[0].ПредставлениеСтроки = "";
				Форма.Модифицированность = Истина;
			Иначе
				ЭлементыУчастников[0][Элементы.Участники.ТекущийЭлемент.Имя] = Неопределено;
			КонецЕсли;
		Иначе 
			ЭлементыУчастников.Удалить(СтрокаУчастника);
		КонецЕсли;
		ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДействия

// Обработчик активизации строки таблицы Действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
//
Процедура ДействияПриАктивизацииСтроки(Форма, Элемент) Экспорт 
	
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	
	Элементы.ДействияОткрытьНастройку.Доступность = 
		ТекущиеДанные <> Неопределено;
	Элементы.ДействияКонтекстноеМенюОткрытьНастройку.Доступность = 
		Элементы.ДействияОткрытьНастройку.Доступность;
		
КонецПроцедуры

// Обработчик перед началом добавления строки таблицы Действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
// 	Отказ - Булево - признак отказа от добавления объекта.
// 	Копирование - Булево - определяет режим копирования.
// 	Родитель -  Неопределено, СправочникСсылка.Действия - ссылка, которая будет использована в качестве родителя. 
// 	Группа - Булево - признак добавления группы.
// 	Параметр - Произвольный - параметр команды, выполняемой при добавлении строки в таблицу.
//
Процедура ДействияПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр) Экспорт 
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик перед удалением строки таблицы Действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Ключ - Структура - ключ настроек.
// 	Элемент - ПолеФормы - инициатор события.
// 	Отказ - Булево - признак отказа.
//
Процедура ДействияПередУдалением(Форма, Ключ, Элемент, Отказ) Экспорт 
	
	Элементы = Форма.Элементы;
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("Ключ", Ключ);
	ПараметрыОповещения.Вставить("ВидДействия", ТекущиеДанные.ВидДействия);
	ПараметрыОповещения.Вставить("Настройка", ТекущиеДанные.Настройка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДействияПередУдалениемПослеВопроса",
		ЭтотОбъект,
		ПараметрыОповещения);
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения,
		НСтр("ru = 'Удалить настройку действия?'"),
		НСтр("ru = 'Удалить'"),
		НСтр("ru = 'Не удалять'"));
	
КонецПроцедуры

// Продолжение ДействияПередУдалением
//
Процедура ДействияПередУдалениемПослеВопроса(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиДействийВызовСервера.УдалитьНастройкуДействияПравилаОбработки(
		ПараметрыОповещения.Ключ.ПравилоОбработки,
		ПараметрыОповещения.ВидДействия,
		ПараметрыОповещения.Настройка);
	Оповестить("Запись_НастройкиДействий", ПараметрыОповещения.Настройка);
	
КонецПроцедуры

// Обработчик перед началом изменения строки таблицы Действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Ключ - Структура - ключ настроек.
// 	Элемент - ПолеФормы - инициатор события.
// 	Отказ - Булево - признак отказа.
//
Процедура ДействияПередНачаломИзменения(Форма, Ключ, Элемент, Отказ) Экспорт 
	
	Элементы = Форма.Элементы;
	Отказ = Истина;
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ДействияНастройкаВключена Тогда
		
		ВидДействия = ТекущиеДанные.ВидДействия;
		НастройкиДействийВызовСервера.ПереключитьНастройкуДействия(
			Ключ.ПравилоОбработки, ВидДействия, Не ТекущиеДанные.НастройкаВключена);
		Форма.ЗаполнитьДействияСохранивПозицию();
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Настройка) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Настройка);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ВидДействия) Тогда
		
		ОткрытьФормуСозданияНастройкиДействия(
			ТекущиеДанные.ВидДействия,
			Форма,
			Ключ,
			"РегистрСведений.ПравилаОбработкиОбъектов");
			
	КонецЕсли;
	
КонецПроцедуры

// Обработчик открытия настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
// 	НавигационнаяСсылкаФорматированнойСтроки -  Строка - значение гиперссылки форматированной строки.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ДекорацияОбработкаНавигационнойСсылки(
		Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Группы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные.ВидОбъектаОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДляНастройкиВидовДействий", Истина);
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ВидОбъектаОбработки);
	
	Если ТипЗнч(ТекущиеДанные.ВидОбъектаОбработки) = Тип("СправочникСсылка.ВидыДокументов") Тогда
		ИмяОткрываемойФормы = "Справочник.ВидыДокументов.Форма.ФормаЭлемента";
	ИначеЕсли ТипЗнч(ТекущиеДанные.ВидОбъектаОбработки) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
		ИмяОткрываемойФормы = "Справочник.ВидыМероприятий.Форма.ФормаЭлемента";
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный вид объекта обработки %1 (%2)'"),
			ТекущиеДанные.ВидОбъектаОбработки,
			ТипЗнч(ТекущиеДанные.ВидОбъектаОбработки));
	КонецЕсли;
	
	ОткрытьФорму(ИмяОткрываемойФормы,
		ПараметрыФормы,
		Форма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик открытия настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Ключ - Структура - ключ настроек.
//
Процедура ОткрытьНастройкуДействия(Форма, КлючНастроек) Экспорт 
	
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Настройка) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Настройка);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ВидДействия) Тогда
		ОткрытьФормуСозданияНастройкиДействия(
			ТекущиеДанные.ВидДействия,
			Форма,
			КлючНастроек,
			"РегистрСведений.ПравилаОбработкиОбъектов");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Обработчик подбора участников действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Заголовок - Строка - заголовок формы подбора.
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура УчастникиПодобрать(Форма, Заголовок, ТипОбъекта) Экспорт 
	
	Участники = Форма.Участники;
	Элементы = Форма.Элементы;
	ВыбранныеАдресаты = Новый Массив;
	СтрокиУчастников = Участники.ПолучитьЭлементы();
	Для Каждого СтрокаУчастника Из СтрокиУчастников Цикл
		Если ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			ВыбранныеАдресаты.Добавить(СтрокаУчастника.Участник);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	Если ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия") Тогда
		ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоДокументам", Истина);
	ИначеЕсли ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Мероприятия") Тогда
		ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоМероприятиям", Истина);
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип объекта %1.'"),
			ТипОбъекта);
	КонецЕсли;
	ПараметрыФормы.Вставить("ОтображатьВидыПодразделений", Ложь);
	ПараметрыФормы.Вставить("ВыбиратьВидыПодразделений", Ложь);
	ПараметрыФормы.Вставить("ОтображатьПодразделения", Ложь);
	ПараметрыФормы.Вставить("ВыбиратьПодразделения", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", Заголовок);
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные сотрудники и роли:'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все сотрудники и роли:'"));
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
	ПараметрыФормы.Вставить("ИменаПредметов", Форма.СписокПредметов);
	ПараметрыФормы.Вставить("КонтролироватьДублиАдресатов", Истина);
	ПараметрыФормы.Вставить("УточнятьСоставПодразделений", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, Элементы.Участники);
	
КонецПроцедуры

// Открывает форму предупреждения при переходе на исполнение по пунктам
// 
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - Оповещение для вызова после закрытия формы предупреждения.
//  Предупреждать - Булево - Признак необходимости показа предупреждения.
//
Процедура ПредупредитьПриПереходеНаИсполнениеПоПунктам(ОписаниеОповещения, Предупреждать) Экспорт
	
	Если Предупреждать Тогда 
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ОписаниеОтветаНаВопрос = Новый ОписаниеОповещения(
			"ПредупредитьПриПереходеНаИсполнениеПоПунктамПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		ПараметрыОткрытия = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыОткрытия.Заголовок = НСтр("ru = 'Исполнение по пунктам'");
		ПараметрыОткрытия.ТекстФлажка = НСтр("ru = 'Больше не показывать'");
		
		ТекстВопроса = НСтр(
		"ru = 'Все участники будут удалены, заполнение пунктов будет производиться непосредственно в предмете.
		|Включить исполнение по пунктам?'");
		
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОтветаНаВопрос, ТекстВопроса,
			РежимДиалогаВопрос.ДаНет, ПараметрыОткрытия);
		
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Значение", КодВозвратаДиалога.Да);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	
КонецПроцедуры	

Процедура ПредупредитьПриПереходеНаИсполнениеПоПунктамПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.БольшеНеЗадаватьЭтотВопрос Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиБольшеНеПоказывать",
			"ПоказыватьПредупреждениеПриПереходеНаИсполнениеПоПунктам", Ложь, , , Истина);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Результат);
	
КонецПроцедуры

// Обновляет объект настройку по дереву участников.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Отказ - Булево - признак отказа.
//
Процедура ОбновитьНастройкуДействияПоДеревуУчастников(Форма, Отказ) Экспорт
	
	Объект = Форма.Объект;
	СсылкаНеуказанногоПользователя = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	Если Не ЗначениеЗаполнено(Объект.ВозможностьИзменятьУчастников) Тогда
		Объект.ВозможностьИзменятьУчастников = ПредопределенноеЗначение(
			"Перечисление.ВариантыДоступностиИзмененияДействий.Авто");
	КонецЕсли;
	
	Объект.Участники.Очистить();
	ЭлементыЭтапы = Форма.Участники.ПолучитьЭлементы();
	
	КоличествоУчастников = 0;
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		ЭлементыУчастники = ЭлементЭтап.ПолучитьЭлементы();
		Для Каждого ЭлементУчастник Из ЭлементыУчастники Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементУчастник.Участник) 
				Или ЭлементУчастник.Участник = СсылкаНеуказанногоПользователя Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныеСотрудники = Объект.Участники.НайтиСтроки(
				Новый Структура("Участник, Защищенный, Описание", 
				ЭлементУчастник.Участник, Ложь, ЭлементУчастник.Описание));
			Если НайденныеСотрудники.Количество() > 0 Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, СтрШаблон(
					НСтр("ru = 'Повторяется участник: %1
					|Удалите дубли, укажите особое описание или установите участнику признак ""Защищенный""'"),
						ЭлементУчастник.Участник));
				Возврат;
			КонецЕсли;
			
			Участник = Объект.Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ЭлементУчастник);
			Участник.Участник = ЭлементУчастник.Участник;
			Участник.ФункцияУчастника = ЭлементЭтап.Функция;
			Если Не ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(Участник.ФункцияУчастника) Тогда
				КоличествоУчастников = КоличествоУчастников + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если КоличествоУчастников > 1 Тогда
		Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
			ЭлементыУчастники = ЭлементЭтап.ПолучитьЭлементы();
			Для Каждого ЭлементУчастник Из ЭлементыУчастники Цикл
				
				Если ЗначениеЗаполнено(ЭлементУчастник.Участник)
					И Не ЗначениеЗаполнено(ЭлементУчастник.Условие)
					И Не ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(ЭлементУчастник.Функция) Тогда
					Отказ = Истина;
					ПоказатьПредупреждение(, СтрШаблон(
						НСтр("ru = 'Для участника: %1 не заполнено ""Условие"".
						|Введите ""Условие"" или оставьте только одного участника настройки'"),
							ЭлементУчастник.Участник));
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Открывает форму создания настройки соотв. вида действия.
// 
Процедура ОткрытьФормуСозданияНастройкиДействия(ВидДействия, Владелец,
	КлючДляРегистрацииНастроек, ИмяМенеджераДляРегистрацииНастроек,
	ЗначениеКопирования = Неопределено, КлючОбщейНастройки = Неопределено)
	
	ИмяСправочникаНастроек = НастройкиДействийВызовСервера.ИмяСправочникаПоВидуДействия(ВидДействия);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура("ВидДействия, ПравилоОбработки",
		ВидДействия, КлючДляРегистрацииНастроек.ПравилоОбработки));
	ПараметрыОткрытия.Вставить("КлючДляРегистрацииНастроек", КлючДляРегистрацииНастроек);
	ПараметрыОткрытия.Вставить("ИмяМенеджераДляРегистрацииНастроек", ИмяМенеджераДляРегистрацииНастроек);
	
	ПараметрыОткрытия.Вставить("ЗначениеКопирования", ЗначениеКопирования);
	ПараметрыОткрытия.Вставить("КлючОбщейНастройки", КлючОбщейНастройки);
	
	ИмяФормыНастроек = СтрШаблон("Справочник.%1.Форма.ФормаЭлемента", ИмяСправочникаНастроек);
	
	ОткрытьФорму(ИмяФормыНастроек,
		ПараметрыОткрытия,
		Владелец,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти