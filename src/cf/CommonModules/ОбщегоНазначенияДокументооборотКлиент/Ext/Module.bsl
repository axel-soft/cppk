////////////////////////////////////////////////////////////////////////////////
// Общего назначения Документооборот (клиент).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Удаляет дубли строк переданной таблицы формы, в которых проверяемые реквизиты совпадают.
//
// Параметры:
//  ТаблицаФормы            - ТаблицаФормы - Таблица формы, в которой осуществляется удаление не дублей строк.
//  ИменаРеквизитовПроверки - Строка       - Имена реквизитов, по которым определяются дубли, разделенные запятой.
//
Процедура УдалитьДублиСтрокТаблицы(ТаблицаФормы, ИменаРеквизитовПроверки) Экспорт
	
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьДублиСтрокТаблицы(
		ТаблицаФормы,
		ИменаРеквизитовПроверки);
	
КонецПроцедуры

// Показывает вопрос "Да" / "Нет", принимая Esc и закрытие формы крестиком как ответ "Нет".
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия с
//     передачей параметра КодВозвратаДиалога.Да или КодВозвратаДиалога.Нет.
//   ТекстВопроса - Строка - текст задаваемого вопроса.
//   ТекстКнопкиДа - Строка - необязательный, текст кнопки "Да".
//   ТекстКнопкиНет - Строка - необязательный, текст кнопки "Нет".
//   КнопкаПоУмолчанию - РежимДиалогаВопрос - необязательный, кнопка по умолчанию.
//
Процедура ПоказатьВопросДаНет(ОписаниеОповещенияОЗавершении, ТекстВопроса,
	ТекстКнопкиДа = Неопределено, ТекстКнопкиНет = Неопределено, КнопкаПоУмолчанию = Неопределено) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьВопросДаНетЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		
	Кнопки = Новый СписокЗначений;
	Если ТекстКнопкиДа = Неопределено Тогда
		Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Да'"));
	Иначе
		Кнопки.Добавить(КодВозвратаДиалога.ОК, ТекстКнопкиДа);
	КонецЕсли;
	Если ТекстКнопкиНет = Неопределено Тогда
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Нет'"));
	Иначе
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, ТекстКнопкиНет);
	КонецЕсли;
	
	Если КнопкаПоУмолчанию = Неопределено Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	ИначеЕсли КнопкаПоУмолчанию = КодВозвратаДиалога.Да Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КодВозвратаДиалога.ОК);
	ИначеЕсли КнопкаПоУмолчанию = КодВозвратаДиалога.Нет Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Отмена);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение кнопки по умолчанию: %1'"),
			КнопкаПоУмолчанию);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после закрытия окна с вопросом "Да" / "Нет" и вызывает ранее переданный обработчик
// оповещения с передачей ответа пользователя.
//
// Параметры:
//   Результат - КодВозвратаДиалога - ответ пользователя,
//     КодВозвратаДиалога.ОК или КодВозвратаДиалога.Отмена.
//   ОписаниеОповещения - ОписаниеОповещения - описание вызываемого оповещения.
//
Процедура ПоказатьВопросДаНетЗавершение(Результат, ОписаниеОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет строки переданной таблицы формы, в которых проверяемый реквизит не заполнен.
//
// Параметры:
//  ТаблицаФормы 			- Таблица формы - в которой осуществляется удаление не заполненых строк.
//  ИмяРеквизитаПроверки    - Строка - имя реквизита, заполненность которого проверяется.
//
Процедура УдалитьПустыеСтрокиТаблицы(ТаблицаФормы, ИмяРеквизитаПроверки) Экспорт
	
	КоличествоСтрок = ТаблицаФормы.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = ТаблицаФормы[КоличествоСтрок - Инд];
		
		Если Не ЗначениеЗаполнено(Строка[ИмяРеквизитаПроверки]) Тогда 
			ТаблицаФормы.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(Форма) Экспорт
	
	Если Форма.ОписаниеОповещенияОЗакрытии <> Неопределено
		И ТипЗнч(Форма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры) = Тип("Структура") Тогда
		Форма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("СсылкаНаОбъект", Форма.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// В случае, если объект не записан в базу, записывает его, предварительно задвая вопрос
// и выполняет дополнительное действие
// 
// Параметры:
//  Форма - Форма - форма объекта
//  ИмяОсновногоРеквизита - Строка - имя реквизита, указывающего на объект
//  ТекстВопроса - Строка - текст вопроса, который надо задать перед записью
//  Действие - ОписаниеОповещения - описание дополнительного действия
// 
Процедура ЗаписатьОбъектЕслиНовыйИВыполнитьДействие(
		ФормаОбъекта, ИмяОсновногоРеквизита, ТекстВопроса, Действие) Экспорт
	
	СсылкаНаОбъект = ФормаОбъекта[ИмяОсновногоРеквизита].Ссылка;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаписатьОбъектЕслиНовыйИВыполнитьДействиеЗавершение",
		ЭтотОбъект,
		Новый Структура("ФормаОбъекта, СсылкаНаОбъект, Действие", ФормаОбъекта, СсылкаНаОбъект, Действие));
	
	// Предварительная запись нового объекта
	Если СсылкаНаОбъект.Пустая() Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Служебная процедура
Процедура ЗаписатьОбъектЕслиНовыйИВыполнитьДействиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Параметры.ФормаОбъекта.Записать() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.Действие);
	
КонецПроцедуры

// Обработка события формы ПередЗакрытием.
//
// Параметры:
//  Отказ - Булево - Признак отказа от закрытия формы.
//  ЗавершениеРаботы - Булево - Признак того, что форма закрывается в процессе завершения работы приложения.
//  ТекстПредупреждения - Строка - Текст предупреждения.
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки события.
//  Модифицированость - Булево - Признак изменения данных в форме.
// 
// Возвращаемое значение:
//  Булево - Признак необходимости отключения дальнейшей обработки события.
//
Функция ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированость) Экспорт
	
	Если Не ЗавершениеРаботы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированость Тогда
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обработка события формы ПриЗакрытии.
//
// Параметры:
//  ЗавершениеРаботы - Булево - Признак того, что форма закрывается в процессе завершения работы приложения.
// 
// Возвращаемое значение:
//  Булево - Признак необходимости отключения дальнейшей обработки события.
//
Функция ПриЗакрытии(ЗавершениеРаботы) Экспорт
	
	Если Не ЗавершениеРаботы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Ищет форму среди открытых форм.
//
// Параметры:
//  ИмяФормы - Строка - Имя формы, которую необходимо найти.
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения - Если найдена 
//  Неопределено - Если не найдена
Функция НайтиФормуПоИмени(ИмяФормы) Экспорт
	
	СписокОкон = ПолучитьОкна(); 
	
	Для Каждого ТекущееОкно Из СписокОкон Цикл
		
		Если ТекущееОкно.Содержимое.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяФорма Из ТекущееОкно.Содержимое Цикл
			Если ТекущаяФорма.ИмяФормы = ИмяФормы Тогда
				Возврат ТекущаяФорма;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Проверяет, существует ли открытый экземпляр формы.
//
// Параметры:
//  ИмяФормы - Строка - Имя формы.
// 
// Возвращаемое значение:
//  Булево - Текстовое описание содержания возвращаемого значения функции.
//
// Пример:
//  ОткрытаФормаНапоминания = ОбщегоНазначенияДокументооборотКлиент.ОткрытаФорма(
//  	"РегистрСведений.НапоминанияПользователя.Форма.ТекущееНапоминание");
//
Функция ОткрытаФорма(ИмяФормы) Экспорт
	
	ОткрытаФорма = Ложь;
	Для Каждого ОкноКлиентскогоПриложения Из ПолучитьОкна() Цикл
		
		Для Каждого ФормаКлиентскогоПриложения Из ОкноКлиентскогоПриложения.Содержимое Цикл
			
			Если ТипЗнч(ФормаКлиентскогоПриложения) = Тип("ФормаКлиентскогоПриложения") 
				И ФормаКлиентскогоПриложения.ИмяФормы = ИмяФормы
				И ФормаКлиентскогоПриложения.Открыта() Тогда
				ОткрытаФорма = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОткрытаФорма Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОткрытаФорма;
	
КонецФункции

// Устанавливает пометки удаления.
//
// Параметры:
//  ОбъектыКУдалению - Массив из ЛюбаяСсылка - Объекты к удалению. Все объекты должны быть одного типа.
//
Процедура УстановитьПометкуУдаления(ОбъектыКУдалению) Экспорт
	
	Если ОбъектыКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъектов = ТипЗнч(ОбъектыКУдалению[0]);
	Для Каждого ОбъектКУдалению Из ОбъектыКУдалению Цикл
		
		Если ТипЗнч(ОбъектКУдалению) <> ТипОбъектов Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректный тип элемента %1. Все объекты должны быть одного типа %2.'"),
				ТипЗнч(ОбъектКУдалению),
				ТипОбъектов);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПометки =
		ОбщегоНазначенияДокументооборотВызовСервера.ПараметрыУстановкиПометкиУдаления(ОбъектыКУдалению);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбъектыКУдалению", ОбъектыКУдалению);
	ПараметрыОбработчика.Вставить("ПометкаУдаления", ПараметрыПометки.ПометкаУдаления);
	ПараметрыОбработчика.Вставить("ИмяСобытия", ПараметрыПометки.ИмяСобытия);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьПометкуУдаленияПослеВопроса",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ПоказатьВопросДаНет(
		ОписаниеОповещения,
		ПараметрыПометки.ТекстВопроса,
		Неопределено,
		Неопределено,
		КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Обработчик перетаскивания файлов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//  ВладелецФайла - ОпределяемыйТип.ВладелецФайлов.
//  РольФайла - СправочникСсылка.РолиФайлов.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания.
//
Процедура ПеретаскиваниеФайлов(Форма, ВладелецФайла, РольФайла, ПараметрыПеретаскивания) Экспорт
	
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверкаПеретаскиванияФайлов(
		Форма,
		ВладелецФайла,
		РольФайла,
		ПараметрыПеретаскивания);
	Если РезультатПроверки.Отказ Тогда
		Если ЗначениеЗаполнено(РезультатПроверки.ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, РезультатПроверки.ТекстПредупреждения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПослеПроверкиПеретаскиванияФайлов(
		Форма,
		ВладелецФайла,
		РольФайла,
		ПараметрыПеретаскивания,
		РезультатПроверки.СохранитьСведенияОбОригиналеФайла);
	
КонецПроцедуры

// Проверяет выполнение фонового задания переименования файлов.
// Если оно выполнено, рассылает оповещение на клиенте.
//
Процедура ПроверитьВыполнениеФоновогоЗаданияПереименованиеФайлов() Экспорт
	
	ВладелецФайла = ПараметрыПриложения[ИмяПараметраВладелецФайла()];
	
	ЗапущеноФоновоеЗадание = ПараметрыПриложения[ИмяПараметраЗапущеноФоновоеЗадание()];
	
	РезультатФоновогоЗадания = ПараметрыПриложения[ИмяПараметраРезультатФоновогоЗадания()];
	
	ПараметрыОбработчикаОжидания = ПараметрыПриложения[ИмяПараметраПараметрыОбработчикаОжидания()];
	
	ЗаданиеВыполнено = Ложь;
	ЗапуститьОбработчикОжидания = Ложь;
	РаботаСФайламиКлиент.ПроверитьВыполнениеФоновогоЗадания(
		РезультатФоновогоЗадания,
		ПараметрыОбработчикаОжидания,
		ЗапущеноФоновоеЗадание,
		ЗаданиеВыполнено,
		ЗапуститьОбработчикОжидания);
	
	Если ЗаданиеВыполнено Тогда
		
		ПараметрыПриложения.Удалить(ИмяПараметраВладелецФайла());
		
		ПараметрыПриложения.Удалить(ИмяПараметраЗапущеноФоновоеЗадание());
		
		ПараметрыПриложения.Удалить(ИмяПараметраРезультатФоновогоЗадания());
		
		ПараметрыПриложения.Удалить(ИмяПараметраПараметрыОбработчикаОжидания());
		
		Оповестить("ПереименованиеФайловЗавершено", ВладелецФайла);
		
	ИначеЕсли ЗапуститьОбработчикОжидания Тогда
		
		ПараметрыПриложения.Вставить(ИмяПараметраВладелецФайла(), ВладелецФайла);
		
		ПараметрыПриложения.Вставить(ИмяПараметраЗапущеноФоновоеЗадание(), ЗапущеноФоновоеЗадание);
		
		ПараметрыПриложения.Вставить(ИмяПараметраРезультатФоновогоЗадания(), РезультатФоновогоЗадания);
		
		ПараметрыПриложения.Вставить(ИмяПараметраПараметрыОбработчикаОжидания(), ПараметрыОбработчикаОжидания);
		
		ПодключитьОбработчикОжидания(
			"ПроверитьВыполнениеФоновогоЗаданияПереименованиеФайловГлобальный",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет файл.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы.
// 
Процедура УдалитьФайл(Файл) Экспорт
	
	ДанныеПроверки = ОбщегоНазначенияДокументооборотВызовСервера.ПроверкаУдаленияФайла(Файл);
	Если Не ДанныеПроверки.РазрешеноУдаление Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Удаление файла не разрешено.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьФайлПродолжение",
		ЭтотОбъект,
		ДанныеПроверки);
	
	Если Не ДанныеПроверки.ПометкаУдаления Тогда 
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"),
			ДанныеПроверки.НаименованиеФайла);
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
			ДанныеПроверки.НаименованиеФайла);
	КонецЕсли;
	
	ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

// Добавляет файл.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//  ВладелецФайла - СправочникСсылка.Файлы.
//  РольФайла - СправочникСсылка.РолиФайлов.
//  ВставитьКартинкуИзБуфера - Булево.
// 
Процедура ДобавитьФайл(Форма, ВладелецФайла, РольФайла, ВставитьКартинкуИзБуфера) Экспорт
	
	РезультатПроверки = ПроверкаДобавленияФайлов(
		Форма,
		ВладелецФайла,
		РольФайла,
		ВставитьКартинкуИзБуфера);
	Если РезультатПроверки.Отказ Тогда
		Если ЗначениеЗаполнено(РезультатПроверки.ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, РезультатПроверки.ТекстПредупреждения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПослеПроверкиДобавленияФайлов(
		Форма,
		ВладелецФайла,
		РольФайла,
		РезультатПроверки.ШаблонаДокумента,
		РезультатПроверки.МожноДобавитьТолькоОдинФайл,
		ВставитьКартинкуИзБуфера,
		Ложь,
		РезультатПроверки.ДанныеПроверки);
	
КонецПроцедуры

// Возвращает Истина, если клиентское приложение запущено под управлением ОС Windows.
//
// См. ОбщегоНазначения.ЭтоWindowsКлиент
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоWindowsКлиент64() Экспорт
	
	ТипПлатформыКлиента = ОбщегоНазначенияКлиент.ТипПлатформыКлиента();
	Возврат ТипПлатформыКлиента = ТипПлатформы.Windows_x86_64;
	
КонецФункции

// Запоминает элементы дерева.
// 
// Параметры:
//  ДанныеДерева - ДанныеФормыДерево
//  ЗапомненныеЭлементы - Соответствие из КлючИЗначение:
//   * Ключ - Число
//   * Значение - Булево
// 
Процедура ЗапомнитьЭлементыДерева(ДанныеДерева, ЗапомненныеЭлементы) Экспорт
	
	Если ЗапомненныеЭлементы = Неопределено Тогда
		ЗапомненныеЭлементы = Новый Соответствие;
	Иначе
		ЗапомненныеЭлементы.Очистить();
	КонецЕсли;
	
	НаборыКОбработке = Новый Массив;
	НаборыКОбработке.Добавить(ДанныеДерева.ПолучитьЭлементы());
	Пока НаборыКОбработке.Количество() > 0 Цикл
		
		НаборКОбработке = НаборыКОбработке[0];
		НаборыКОбработке.Удалить(0);
		
		Для Каждого ЭлементУзлаДерева Из НаборКОбработке Цикл
			
			ЗапомненныеЭлементы.Вставить(ЭлементУзлаДерева.ПолучитьИдентификатор(), Истина);
			
			НаборыКОбработке.Добавить(ЭлементУзлаДерева.ПолучитьЭлементы());
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Разворачивает новые элемента дерева.
// 
// Параметры:
//  ДанныеДерева - ДанныеФормыДерево
//  ЭлементДерева - ТаблицаФормы
//  ЗапомненныеЭлементы - Соответствие из КлючИЗначение:
//   * Ключ - Число
//   * Значение - Булево
//  
Процедура РазвернутьНовыеЭлементаДерева(ДанныеДерева, ЭлементДерева, ЗапомненныеЭлементы) Экспорт
	
	НаборыКОбработке = Новый Массив;
	НаборыКОбработке.Добавить(ДанныеДерева.ПолучитьЭлементы());
	Пока НаборыКОбработке.Количество() > 0 Цикл
		
		НаборКОбработке = НаборыКОбработке[0];
		НаборыКОбработке.Удалить(0);
		
		Для Каждого ЭлементУзлаДерева Из НаборКОбработке Цикл
			
			НаборыКОбработке.Добавить(ЭлементУзлаДерева.ПолучитьЭлементы());
			
			Если ЗапомненныеЭлементы[ЭлементУзлаДерева.ПолучитьИдентификатор()] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементДерева.Развернуть(ЭлементУзлаДерева.ПолучитьИдентификатор(), Ложь);
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выделяет в календаре выходные и праздничные дни.
// 
// Параметры:
//  Элемент - ПолеКалендаря
//  ОформлениеПериода - ОформлениеПериода
// 
Процедура ПриВыводеПериода(Элемент, ОформлениеПериода) Экспорт
	
	ИмяПараметраЗаданГрафикРаботы = "ОбщегоНазначенияДокументооборотКлиент.ЗаданГрафикРаботы";
	ИмяПараметрыРабочиеДни = "ОбщегоНазначенияДокументооборотКлиент.РабочиеДни";
	ИмяПараметраЗаполненныеГода = "ОбщегоНазначенияДокументооборотКлиент.ЗаполненныеГода";
	
	Если ПараметрыПриложения[ИмяПараметраЗаданГрафикРаботы] = Неопределено Тогда
		
		РабочиеДни = Новый СписокЗначений;
		ЗаполненныеГода = Новый СписокЗначений;
		ДанныеЗаполненияРабочихДней =
			ОбщегоНазначенияДокументооборотВызовСервера.ЗаполнитьРабочиеДни(
				РабочиеДни,
				ЗаполненныеГода,
				ОбщегоНазначенияКлиент.ДатаСеанса());
		
		ПараметрыПриложения[ИмяПараметраЗаданГрафикРаботы] =
			ЗначениеЗаполнено(ДанныеЗаполненияРабочихДней.ГрафикРаботы);
		ПараметрыПриложения[ИмяПараметрыРабочиеДни] =
			ДанныеЗаполненияРабочихДней.РабочиеДни;
		ПараметрыПриложения[ИмяПараметраЗаполненныеГода] =
			ДанныеЗаполненияРабочихДней.ЗаполненныеГода;
		
	КонецЕсли;
	
	РабочиеДни = ПараметрыПриложения[ИмяПараметрыРабочиеДни]; // СписокЗначений
	ЗаполненныеГода = ПараметрыПриложения[ИмяПараметраЗаполненныеГода]; // СписокЗначений
	
	Если Не ПараметрыПриложения[ИмяПараметраЗаданГрафикРаботы] Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОформленияПериода Из ОформлениеПериода.Даты Цикл
		
		Если ЗаполненныеГода.НайтиПоЗначению(Год(СтрокаОформленияПериода.Дата)) = Неопределено Тогда
			ДанныеЗаполненияРабочихДней =
				ОбщегоНазначенияДокументооборотВызовСервера.ЗаполнитьРабочиеДни(
					ПараметрыПриложения[ИмяПараметрыРабочиеДни],
					ЗаполненныеГода,
					СтрокаОформленияПериода.Дата);
			ПараметрыПриложения[ИмяПараметрыРабочиеДни] =
				ДанныеЗаполненияРабочихДней.РабочиеДни;
			ПараметрыПриложения[ИмяПараметраЗаполненныеГода] =
				ДанныеЗаполненияРабочихДней.ЗаполненныеГода;
			РабочиеДни = ПараметрыПриложения[ИмяПараметрыРабочиеДни]; // СписокЗначений
			ЗаполненныеГода = ПараметрыПриложения[ИмяПараметраЗаполненныеГода]; // СписокЗначений
		КонецЕсли;
		
		СтрокаРабочиеДни = РабочиеДни.НайтиПоЗначению(СтрокаОформленияПериода.Дата);
		Если СтрокаРабочиеДни = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРабочиеДни.Пометка Тогда
			СтрокаОформленияПериода.ЦветТекста = WebЦвета.Черный;
		Иначе
			СтрокаОформленияПериода.ЦветТекста = WebЦвета.Красный;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Минимальный интервал обработчика ожидания.
// 
// Возвращаемое значение:
//  Число
//
Функция МинимальныйИнтервалОбработчикаОжидания() Экспорт
	
	Возврат 0.1
	
КонецФункции

// Задает вопрос сохранить ли изменения перед действием
// 
// Возвращаемое значение:
//  КодВозвратаДиалога
//
Асинх Функция ЗадатьВопросОСохраненииИзмененийАсинх() Экспорт
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	Результат = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,
		КодВозвратаДиалога.Отмена);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет, возможно ли перетаскивание файлов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//  ВладелецФайла - ОпределяемыйТип.ВладелецФайлов.
//  РольФайла - СправочникСсылка.РолиФайлов.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания.
// 
// Возвращаемое значение:
//  Структура - Проверка перетаскивания файлов:
//   * Отказ - Булево.
//   * ТекстПредупреждения - Строка.
//   * СохранитьСведенияОбОригиналеФайла - Булево.
//
Функция ПроверкаПеретаскиванияФайлов(Форма, ВладелецФайла, РольФайла, ПараметрыПеретаскивания)
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Отказ", Ложь);
	РезультатПроверки.Вставить("ТекстПредупреждения", "");
	РезультатПроверки.Вставить("СохранитьСведенияОбОригиналеФайла", Ложь);
	
	ДоступноИнтерактивноеИзменениеФайлов = ОбщегоНазначенияДокументооборотКлиентСервер.ДоступноИнтерактивноеИзменениеФайлов(
		ВладелецФайла);
	Если Не ДоступноИнтерактивноеИзменениеФайлов Тогда
		РезультатПроверки.Отказ = Истина;
		РезультатПроверки.ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Недоступно интерактивное изменение файлов, приложенных к ""%1 (%2)"".'"),
			ВладелецФайла,
			ТипЗнч(ВладелецФайла));
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФайла) <> Тип("СправочникСсылка.ДокументыПредприятия")
		И ТипЗнч(ВладелецФайла) <> Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ИмяБезРасширения = "";
	Расширение = "";
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		ИмяБезРасширения = ПараметрыПеретаскивания.Значение.ИмяБезРасширения;
		Расширение = ПараметрыПеретаскивания.Значение.Расширение;
		
	КонецЕсли;
	
	ДанныеПроверки = ОбщегоНазначенияДокументооборотВызовСервера.ПроверкаПеретаскиванияФайлов(
		ВладелецФайла,
		РольФайла,
		ИмяБезРасширения,
		Расширение);
	
	РезультатПроверки.СохранитьСведенияОбОригиналеФайла =
		ДанныеПроверки.СохранитьСведенияОбОригиналеФайла;
	
	ДрагДропНесколькоФайлов = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 1 Тогда
		ДрагДропНесколькоФайлов = Истина;
	КонецЕсли;
	
	Если Не ДанныеПроверки.ДоступноИзменение Тогда
		РезультатПроверки.Отказ = Истина;
		РезультатПроверки.ТекстПредупреждения = НСтр("ru = 'Недоступно изменение владельца файлов.'");
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ДанныеПроверки.РегистрационныйНомер) 
		Или ДанныеПроверки.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется"))
		И ДанныеПроверки.РолиФайлов.Количество() <> 0
		И ДанныеПроверки.ИспользоватьРолиФайлов Тогда
		
		Если ДанныеПроверки.ВВидеЭтаРольТолькоОдинФайл
			И Не ДанныеПроверки.НетФайловВРоли Тогда
				
			РезультатПроверки.Отказ = Истина;
			РезультатПроверки.ТекстПредупреждения =
				СтрШаблон(
					НСтр("ru = 'В роли ""%1"" с признаком ""Только один файл"" уже есть файл, поэтому добавить еще один файл в эту роль нельзя.' "),
					РольФайла);
			
			Возврат РезультатПроверки;
				
		ИначеЕсли ДанныеПроверки.ВВидеЭтаРольТолькоОдинФайл
			И ДрагДропНесколькоФайлов Тогда
			
			РезультатПроверки.Отказ = Истина;
			РезультатПроверки.ТекстПредупреждения =
				СтрШаблон(
					НСтр("ru = 'В роль ""%1"" с признаком ""Только один файл"" можно добавить только один файл.' "),
					РольФайла);
			
			Возврат РезультатПроверки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ДанныеПроверки.ДоступноМенятьРолиФайловДрагДропом
		И ДанныеПроверки.РолиФайлов.Количество() <> 0 
		И ДанныеПроверки.ИспользоватьРолиФайлов
		И Не ДанныеПроверки.ЭтоНовыйФайл Тогда
		
		РезультатПроверки.Отказ = Истина;
		РезультатПроверки.ТекстПредупреждения = 
			СтрШаблон(
				НСтр("ru = 'В текущем состоянии ""%1"" менять роль файлов нельзя.'"),
				ДанныеПроверки.СостояниеТекст);
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	Если Не ДанныеПроверки.ДоступноСоздатьФайлОбычный
		И Не ДанныеПроверки.ДоступноСоздатьФайлОригинал Тогда
		
		РезультатПроверки.Отказ = Истина;
		РезультатПроверки.ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'В текущем состоянии ""%1"" файлы добавлять нельзя.'"),
			ДанныеПроверки.СостояниеТекст);
		
		Возврат РезультатПроверки;
	
	ИначеЕсли ДанныеПроверки.ВестиУчетСканКопийОригиналовДокументов 
		И ДанныеПроверки.ДоступноСоздатьФайлОригинал
		И Не ДанныеПроверки.ДоступноСоздатьФайлОбычный Тогда
		
		Текст = СтрШаблон(
			НСтр("ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'"),
			ДанныеПроверки.СостояниеТекст);
		
		СписокВариантовОтветов = Новый СписокЗначений;
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Форма", Форма);
		ПараметрыОбработчика.Вставить("ВладелецФайла", ВладелецФайла);
		ПараметрыОбработчика.Вставить("РольФайла", РольФайла);
		ПараметрыОбработчика.Вставить("ДанныеПроверки", ДанныеПроверки);
		ПараметрыОбработчика.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПроверкаПеретаскиванияФайловПеретаскиваниеОригинала",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(
			Форма,
			НСтр("ru = 'Перетаскивание файла'"),
			Текст,
			"ДобавлениеОригинала",
			"ЗадаватьВопросПриДобавленииСканКопииОригинала",
			СписокВариантовОтветов,,
			ОписаниеОповещения);
		
		РезультатПроверки.Отказ = Истина;
		РезультатПроверки.ТекстПредупреждения = "";
		
		Возврат РезультатПроверки;
	
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Обработка оповещения процедуры ПроверкаПеретаскиванияФайлов.
// 
// Параметры:
//  Результат - КодВозвратаДиалога, Булево - Результат диалога.
//  ПараметрыОбработчика - Структура.
//
Процедура ПроверкаПеретаскиванияФайловПеретаскиваниеОригинала(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПараметрыОбработчика.Форма;
	ВладелецФайла = ПараметрыОбработчика.ВладелецФайла;
	РольФайла = ПараметрыОбработчика.РольФайла;
	ДанныеПроверки = ПараметрыОбработчика.ДанныеПроверки;
	ПараметрыПеретаскивания = ПараметрыОбработчика.ПараметрыПеретаскивания;
	
	ТекстПредупреждения = "";
	ПараметрыПеретаскивания.Значение =
		ДелопроизводствоКлиент.ОтобратьДляПеретаскиванияТолькоФайлыОригиналы(
			ПараметрыПеретаскивания,
			ДанныеПроверки.СостояниеТекст,
			ТекстПредупреждения);
		
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПослеПроверкиПеретаскиванияФайлов(
		Форма,
		ВладелецФайла,
		РольФайла,
		ПараметрыПеретаскивания,
		ДанныеПроверки.СохранитьСведенияОбОригиналеФайла);
	
КонецПроцедуры

// Обработчик перетаскивания файлов, после проверки перетаскивания файлов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//  ВладелецФайла - ОпределяемыйТип.ВладелецФайлов.
//  РольФайла - СправочникСсылка.РолиФайлов.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания.
//  СохранитьСведенияОбОригиналеФайла - Булево.
//
Процедура ПослеПроверкиПеретаскиванияФайлов(Форма, ВладелецФайла, РольФайла, ПараметрыПеретаскивания, СохранитьСведенияОбОригиналеФайла)
	
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	НадоПереименоватьФайлыПоШаблонуПослеДрагдропа = Ложь;
	ОбработанныеФайлы = РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
		ПараметрыПеретаскивания,
		ВладелецФайла,
		Форма,
		НеОткрыватьКарточкуПослеСозданияИзФайла,
		РольФайла,
		НадоПереименоватьФайлыПоШаблонуПослеДрагдропа);

	Оповестить("ПеретаскиваниеФайловЗавершено", ВладелецФайла);
	
	Если НадоПереименоватьФайлыПоШаблонуПослеДрагдропа Тогда
		ЗапуститьФоновоеПереименованиеФайлов(
			ВладелецФайла,
			Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если СохранитьСведенияОбОригиналеФайла Тогда
		Для Каждого ОбработанныйФайл Из ОбработанныеФайлы Цикл
			Делопроизводство.СохранитьСведенияОбОригиналеФайла(ОбработанныйФайл, ВладелецФайла);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик перетаскивания файлов, после проверки перетаскивания файлов.
// 
// Параметры:
//  ВладелецФайла - ОпределяемыйТип.ВладелецФайлов.
//  УникальныйИдентификатор - УникальныйИдентификатор.
//
Процедура ЗапуститьФоновоеПереименованиеФайлов(ВладелецФайла, УникальныйИдентификатор) Экспорт
	
	ЗапущеноФоновоеЗадание = Ложь;
	РезультатФоновогоЗадания =
		РаботаСФайламиВызовСервера.ЗапуститьФоновоеПереименованиеФайлов(
			ВладелецФайла,
			УникальныйИдентификатор,
			ЗапущеноФоновоеЗадание);
	
	ПараметрыПриложения[ИмяПараметраВладелецФайла()] = ВладелецФайла;
	
	ПараметрыПриложения[ИмяПараметраЗапущеноФоновоеЗадание()] = ЗапущеноФоновоеЗадание;
	
	ПараметрыПриложения[ИмяПараметраРезультатФоновогоЗадания()] = РезультатФоновогоЗадания;
	
	ПроверитьВыполнениеФоновогоЗаданияПереименованиеФайлов();
	
КонецПроцедуры

// Обработчик оповещения процедуры УстановитьПометкуУдаления.
//
// Параметры:
//  Результат - КодВозвратаДиалога - Результат вопроса.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//   * ОбъектыКУдалению - Массив из ЛюбаяСсылка - Объекты к удалению.
//   * ПометкаУдаления - Булево - Пометка удаления, которую необходимо установить.
//   * ИмяСобытия - Строка - Имя события оповещения.
//
Процедура УстановитьПометкуУдаленияПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотВызовСервера.УстановитьПометкуУдаления(
		ДополнительныеПараметры.ОбъектыКУдалению,
		ДополнительныеПараметры.ПометкаУдаления);
	
	ТекстОповещения = "";
	НавигационнаяСсылка = Неопределено;
	Пояснение = "";
	КоличествоОбъектов = ДополнительныеПараметры.ОбъектыКУдалению.Количество();
	Если КоличествоОбъектов = 1 И ДополнительныеПараметры.ПометкаУдаления = Истина Тогда
		
		ТекстОповещения = НСтр("ru = 'Пометка удаления установлена'");
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДополнительныеПараметры.ОбъектыКУдалению[0]);
		Пояснение = Строка(ДополнительныеПараметры.ОбъектыКУдалению[0]);
		
	ИначеЕсли КоличествоОбъектов = 1 И ДополнительныеПараметры.ПометкаУдаления = Ложь Тогда
		
		ТекстОповещения = НСтр("ru = 'Пометка удаления снята'");
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДополнительныеПараметры.ОбъектыКУдалению[0]);
		Пояснение = Строка(ДополнительныеПараметры.ОбъектыКУдалению[0]);
		
	ИначеЕсли КоличествоОбъектов > 1 И ДополнительныеПараметры.ПометкаУдаления = Истина Тогда
		
		ТекстОповещения = СтрШаблон(НСтр("ru = 'Пометка удаления установлена (%1)'"), КоличествоОбъектов);
		Пояснение = Строка(ТипЗнч(ДополнительныеПараметры.ОбъектыКУдалению[0]));
		
	ИначеЕсли КоличествоОбъектов > 1 И ДополнительныеПараметры.ПометкаУдаления = Ложь Тогда
		
		ТекстОповещения = СтрШаблон(НСтр("ru = 'Пометка удаления снята (%1)'"), КоличествоОбъектов);
		Пояснение = Строка(ТипЗнч(ДополнительныеПараметры.ОбъектыКУдалению[0]));
		
	КонецЕсли;
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		НавигационнаяСсылка,
		Пояснение,
		БиблиотекаКартинок.ДиалогИнформация);
	
	Если ДополнительныеПараметры.ОбъектыКУдалению.Количество() = 1 Тогда
		Оповестить(ДополнительныеПараметры.ИмяСобытия, Неопределено, ДополнительныеПараметры.ОбъектыКУдалению[0]);
		ОповеститьОбИзменении(ДополнительныеПараметры.ОбъектыКУдалению[0]);
	Иначе
		Оповестить(ДополнительныеПараметры.ИмяСобытия, Неопределено);
		ОповеститьОбИзменении(ТипЗнч(ДополнительныеПараметры.ОбъектыКУдалению[0]));
	КонецЕсли;
	
КонецПроцедуры

// Обработчик описания оповещения процедуры УдалитьФайл.
// 
// Параметры:
//  Результат - КодВозвратаДиалога.
//  ДанныеПроверки - Структура.
//
Процедура УдалитьФайлПродолжение(Результат, ДанныеПроверки) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РезультатУдаления = ОбщегоНазначенияДокументооборотВызовСервера.УдалитьФайл(ДанныеПроверки.Файл);
	
	СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
		"КоличествоЗанятыхФайлов", 
		РезультатУдаления.КоличествоЗанятыхФайлов);
	
	Оповестить("ФайлыДокументаПомеченыНаУдаление", ДанныеПроверки.ВладелецФайла);
	
	Если ДанныеПроверки.ПодписанЭП Тогда
		Оповестить("ПрисоединенныйФайлПодписан", ДанныеПроверки.ВладелецФайла);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, возможно ли перетаскивание файлов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//  ВладелецФайла - ОпределяемыйТип.ВладелецФайлов.
//  РольФайла - СправочникСсылка.РолиФайлов.
//  ВставитьКартинкуИзБуфера - Булево.
// 
// Возвращаемое значение:
//  Структура - Проверка перетаскивания файлов:
//   * Отказ - Булево.
//   * ТекстПредупреждения - Строка.
//   * МожноДобавитьТолькоОдинФайл - Булево.
//   * ШаблонаДокумента - СправочникСсылка.ШаблоныДокументов.
//   * ДанныеПроверки - См. ОбщегоНазначенияДокументооборотВызовСервера.ПроверкаДобавленияФайлов.
//
Функция ПроверкаДобавленияФайлов(Форма, ВладелецФайла, РольФайла, ВставитьКартинкуИзБуфера)
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Отказ", Ложь);
	РезультатПроверки.Вставить("МожноДобавитьТолькоОдинФайл", Ложь);
	РезультатПроверки.Вставить("ШаблонаДокумента", ПредопределенноеЗначение("Справочник.ШаблоныДокументов.ПустаяСсылка"));
	РезультатПроверки.Вставить("ТекстПредупреждения", "");
	РезультатПроверки.Вставить("ДанныеПроверки", Неопределено);
	
	ДоступноИнтерактивноеИзменениеФайлов = ОбщегоНазначенияДокументооборотКлиентСервер.ДоступноИнтерактивноеИзменениеФайлов(
		ВладелецФайла);
	Если Не ДоступноИнтерактивноеИзменениеФайлов Тогда
		РезультатПроверки.Отказ = Истина;
		РезультатПроверки.ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Недоступно интерактивное изменение файлов, приложенных к ""%1 (%2)"".'"),
			ВладелецФайла,
			ТипЗнч(ВладелецФайла));
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФайла) <> Тип("СправочникСсылка.ДокументыПредприятия")
		И ТипЗнч(ВладелецФайла) <> Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ДанныеПроверки = ОбщегоНазначенияДокументооборотВызовСервера.ПроверкаДобавленияФайлов(
		ВладелецФайла,
		РольФайла);
	
	РезультатПроверки.ДанныеПроверки = ДанныеПроверки;
	
	Если Не ДанныеПроверки.ДоступноИзменение Тогда
		РезультатПроверки.Отказ = Истина;
		РезультатПроверки.ТекстПредупреждения = НСтр("ru = 'Недоступно изменение владельца файлов.'");
		Возврат РезультатПроверки;
	КонецЕсли;
	
	МожноДобавитьТолькоОдинФайл = Ложь;
		
	Если (ЗначениеЗаполнено(ДанныеПроверки.РегистрационныйНомер) 
		Или ДанныеПроверки.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется"))
		И ДанныеПроверки.РолиФайлов.Количество() <> 0
		И ДанныеПроверки.ИспользоватьРолиФайлов Тогда
		
		Если ДанныеПроверки.ВВидеЭтаРольТолькоОдинФайл
			И Не ДанныеПроверки.НетФайловВРоли Тогда
			
			РезультатПроверки.Отказ = Истина;
			РезультатПроверки.ТекстПредупреждения =
				СтрШаблон(
					НСтр("ru = 'В роли ""%1"" с признаком ""Только один файл"" уже есть файл, поэтому добавить еще один файл в эту роль нельзя.' "),
					РольФайла);
			
			Возврат РезультатПроверки;
			
		ИначеЕсли ДанныеПроверки.ВВидеЭтаРольТолькоОдинФайл
			И ДанныеПроверки.НетФайловВРоли Тогда
			
			МожноДобавитьТолькоОдинФайл = Истина;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ДанныеПроверки.ДоступноСоздатьФайлОбычный
		И Не ДанныеПроверки.ДоступноСоздатьФайлОригинал Тогда
		
		РезультатПроверки.Отказ = Истина;
		РезультатПроверки.ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'В текущем состоянии ""%1"" файлы добавлять нельзя.'"),
			ДанныеПроверки.СостояниеТекст);
		
		Возврат РезультатПроверки;
	
	ИначеЕсли ДанныеПроверки.ВестиУчетСканКопийОригиналовДокументов 
		И ДанныеПроверки.ДоступноСоздатьФайлОригинал
		И Не ДанныеПроверки.ДоступноСоздатьФайлОбычный Тогда
		
		Текст = СтрШаблон(
			НСтр("ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'"),
			ДанныеПроверки.СостояниеТекст);
		
		СписокВариантовОтветов = Новый СписокЗначений;
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Форма", Форма);
		ПараметрыОбработчика.Вставить("ВладелецФайла", ВладелецФайла);
		ПараметрыОбработчика.Вставить("РольФайла", РольФайла);
		ПараметрыОбработчика.Вставить("ДанныеПроверки", ДанныеПроверки);
		ПараметрыОбработчика.Вставить("МожноДобавитьТолькоОдинФайл", МожноДобавитьТолькоОдинФайл);
		ПараметрыОбработчика.Вставить("ВставитьКартинкуИзБуфера", ВставитьКартинкуИзБуфера);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПроверкаДобавленияФайловДобавлениеОригинала",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(
			Форма,
			НСтр("ru = 'Добавление файла'"),
			Текст,
			"ДобавлениеОригинала",
			"ЗадаватьВопросПриДобавленииСканКопииОригинала",
			СписокВариантовОтветов,,
			ОписаниеОповещения);
		
		РезультатПроверки.Отказ = Истина;
		РезультатПроверки.ТекстПредупреждения = "";
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	РезультатПроверки.Вставить("МожноДобавитьТолькоОдинФайл", МожноДобавитьТолькоОдинФайл);
	РезультатПроверки.Вставить("ШаблонаДокумента", ДанныеПроверки.ШаблонаДокумента);
	
	Возврат РезультатПроверки;
	
КонецФункции


// Обработка оповещения процедуры ПроверкаДобавленияФайлов.
// 
// Параметры:
//  Результат - КодВозвратаДиалога, Булево - Результат диалога.
//  ПараметрыОбработчика - Структура.
//
Процедура ПроверкаДобавленияФайловДобавлениеОригинала(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПослеПроверкиДобавленияФайлов(
		ПараметрыОбработчика.Форма,
		ПараметрыОбработчика.ВладелецФайла,
		ПараметрыОбработчика.РольФайла,
		ПараметрыОбработчика.ДанныеПроверки.ШаблонаДокумента,
		ПараметрыОбработчика.МожноДобавитьТолькоОдинФайл,
		ПараметрыОбработчика.ВставитьКартинкуИзБуфера,
		Истина,
		ПараметрыОбработчика.ДанныеПроверки);
	
КонецПроцедуры

// Обработчик добавления файлов, после проверки добавления файлов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//  ВладелецФайла - ОпределяемыйТип.ВладелецФайлов.
//  РольФайла - СправочникСсылка.РолиФайлов.
//  ШаблонаДокумента - СправочникСсылка.ШаблоныДокументов.
//  МожноДобавитьТолькоОдинФайл - Булево.
//  ВставитьКартинкуИзБуфера - Булево.
//  ДобавлениеОригинала - Булево.
//  ДанныеПроверки - См. ОбщегоНазначенияДокументооборотВызовСервера.ПроверкаДобавленияФайлов.
//
Асинх Процедура ПослеПроверкиДобавленияФайлов(Форма, ВладелецФайла, РольФайла, ШаблонаДокумента, МожноДобавитьТолькоОдинФайл, ВставитьКартинкуИзБуфера, ДобавлениеОригинала, ДанныеПроверки)
	
	Попытка
		
		Если ВставитьКартинкуИзБуфера Тогда
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ВладелецФайла", ВладелецФайла);
			ПараметрыОбработчика.Вставить("Форма", Форма);
			ПараметрыОбработчика.Вставить("РольФайла", РольФайла);
			ПараметрыОбработчика.Вставить("ДанныеПроверки", ДанныеПроверки);
			ПараметрыОбработчика.Вставить("ПутьКФайлу", "");  
			
			КартинкаИзБуфераОбмена = Ждать СредстваБуфераОбмена.ПолучитьДанныеАсинх(СтандартныйФорматДанныхБуфераОбмена.Картинка);
			
			Если КартинкаИзБуфераОбмена = Неопределено Тогда
				ПоказатьПредупреждение(
					, НСтр(
						"ru='Буфер обмена не содержит картинки'"
						, "ru"
					)
				);
				Возврат;
			КонецЕсли;
			
			ПутьКФайлу = "";
			
		#Если Не ВебКлиент Тогда 
			
			ПутьКФайлу = ПолучитьИмяВременногоФайла("png");
			КартинкаИзБуфераОбмена.Записать(ПутьКФайлу);

		#КонецЕсли     
		
			ПараметрыОбработчика.ПутьКФайлу = ПутьКФайлу;
			
			ВставитьКартинкуИзБуфераЗавершение(Истина, ПараметрыОбработчика);
				
		Иначе
			
			РежимСоздания = ?(ДобавлениеОригинала, 2, 1);
			ДополнительныеПараметры = Новый Структура(
				"МожноДобавитьТолькоОдинФайл",
				МожноДобавитьТолькоОдинФайл);
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ВладелецФайла", ВладелецФайла);
			ПараметрыОбработчика.Вставить("ДанныеПроверки", ДанныеПроверки);
			
			ОбработчикРезультата = Новый ОписаниеОповещения(
				"ПослеДобавленияФайла",
				ЭтотОбъект,
				ПараметрыОбработчика);
			
			РаботаСФайламиКлиент.ДобавитьФайл(
				ОбработчикРезультата,
				ВладелецФайла,
				Форма,
				РежимСоздания,
				Истина,
				ДобавлениеОригинала,,,,,
				ШаблонаДокумента,
				РольФайла,,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
	Исключение
		
		ПоказатьПредупреждение(,
			ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// Обработчик оповещения процедуры "ПослеПроверкиДобавленияФайлов".
// 
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл.
//  ПараметрыОбработчика - Структура.
//   * ВладелецФайла - ОпределяемыйТип.ВладелецФайлов.
//   * ДанныеПроверки - См. ОбщегоНазначенияДокументооборотВызовСервера.ПроверкаДобавленияФайлов.
//
Процедура ПослеДобавленияФайла(Файл, ПараметрыОбработчика) Экспорт
	
	Если Файл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьСведенияОбОригиналеФайлаПриНеобходимости(
		Файл,
		ПараметрыОбработчика.ВладелецФайла,
		ПараметрыОбработчика.ДанныеПроверки <> Неопределено И
			ПараметрыОбработчика.ДанныеПроверки.ВестиУчетСканКопийОригиналовДокументов,
		ПараметрыОбработчика.ДанныеПроверки <> Неопределено И
			ПараметрыОбработчика.ДанныеПроверки.ДоступноТолькоДобавлениеОригинала);
	
КонецПроцедуры

// Обработчик оповещения процедуры "ПослеПроверкиДобавленияФайлов".
// 
// Параметры:
//  Файл - ОпределяемыйТип.ПрисоединенныйФайл.
//  ВладелецФайла - ОпределяемыйТип.ВладелецФайлов.
//  ВестиУчетСканКопийОригиналовДокументов - Булево.
//  ДоступноТолькоДобавлениеОригинала - Булево.
//
Процедура СохранитьСведенияОбОригиналеФайлаПриНеобходимости(Файл, ВладелецФайла, ВестиУчетСканКопийОригиналовДокументов, ДоступноТолькоДобавлениеОригинала)
	
	ЭтоРасширениеСканКопии =
		ОбщегоНазначенияДокументооборотВызовСервера.ЭтоФайлРасширенияСканКопии(Файл);
	
	СохранитьСведенияОбОригиналеФайла =
		ВестиУчетСканКопийОригиналовДокументов
		И (ДоступноТолькоДобавлениеОригинала
			Или ЭтоРасширениеСканКопии);
	
	Если СохранитьСведенияОбОригиналеФайла Тогда
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(
			Файл,
			ВладелецФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПараметрыОбработчика.ПутьКФайлу;
	
	Если Не ПустаяСтрока(ПутьКФайлу) Тогда
		
		НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
		СозданныйФайлы = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
			ПутьКФайлу,
			ПараметрыОбработчика.ВладелецФайла,
			ПараметрыОбработчика.Форма,
			НеОткрыватьКарточкуПослеСозданияИзФайла,
			Неопределено,
			Неопределено,
			Неопределено,
			Неопределено,
			Неопределено,
			Неопределено,
			ПараметрыОбработчика.РольФайла);
		
		СохранитьСведенияОбОригиналеФайлаПриНеобходимости(
			СозданныйФайлы,
			ПараметрыОбработчика.ВладелецФайла,
			ПараметрыОбработчика.ДанныеПроверки <> Неопределено И
				ПараметрыОбработчика.ДанныеПроверки.ВестиУчетСканКопийОригиналовДокументов,
			ПараметрыОбработчика.ДанныеПроверки <> Неопределено И
				ПараметрыОбработчика.ДанныеПроверки.ДоступноТолькоДобавлениеОригинала);
		
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Имя параметра "Владелец файла".
// 
// Возвращаемое значение:
//  Строка - Имя параметра "Владелец файла".
//
Функция ИмяПараметраВладелецФайла()
	
	Возврат "Документооборот.ВладелецФайлаЗаданиеПереименованиеФайлов";
	
КонецФункции

// Имя параметра "Запущено фоновое задание".
// 
// Возвращаемое значение:
//  Строка - Имя параметра "Запущено фоновое задание".
//
Функция ИмяПараметраЗапущеноФоновоеЗадание()
	
	Возврат "Документооборот.ЗапущеноФоновоеЗаданиеПереименованиеФайлов";
	
КонецФункции

// Имя параметра "Результат фонового задания".
// 
// Возвращаемое значение:
//  Строка - Имя параметра "Результат фонового задания".
//
Функция ИмяПараметраРезультатФоновогоЗадания()
	
	Возврат "Документооборот.РезультатФоновогоЗаданияПереименованиеФайлов";
	
КонецФункции

// Имя параметра "Параметры обработчика ожидания".
// 
// Возвращаемое значение:
//  Строка - Имя параметра "Параметры обработчика ожидания".
//
Функция ИмяПараметраПараметрыОбработчикаОжидания()
	
	Возврат "Документооборот.ПараметрыОбработчикаОжиданияФоновогоЗаданияПереименованиеФайлов";
	
КонецФункции

#КонецОбласти
