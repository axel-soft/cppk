///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается для получения версионируемых табличных документов во время записи версии объекта.
// Табличный документ прикладывается к версии объекта в случае, когда в отчете по версии объекта требуется
// заменить "техногенную" табличную часть объекта на ее представление в виде табличного документа.
//
// Параметры:
//  Ссылка             - ЛюбаяСсылка - версионируемый объект конфигурации.
//  ТабличныеДокументы - Структура:
//   * Ключ     - Строка    - имя табличного документа;
//   * Значение - Структура:
//    ** Наименование - Строка            - наименование табличного документа;
//    ** Данные       - ТабличныйДокумент - версионируемый табличный документ.
//
Процедура ПриПолученииТабличныхДокументовОбъекта(Ссылка, ТабличныеДокументы) Экспорт
	
КонецПроцедуры

// Вызывается после разбора прочитанной из регистра версии объекта,
//  может использоваться для дополнительной обработки результата разбора версии.
// 
// Параметры:
//  Ссылка    - ЛюбаяСсылка - версионируемый объект конфигурации.
//  Результат - Структура - результат разбора версии подсистемой версионирования.
//
Процедура ПослеРазбораВерсииОбъекта(Ссылка, Результат) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		Если Результат.ДополнительныеРеквизиты <> Неопределено Тогда
			
			ИскомаяСтрока =
				Результат.ДополнительныеРеквизиты.Найти("УчастникиМероприятия", "Наименование");
			Если ИскомаяСтрока <> Неопределено
				И ТипЗнч(ИскомаяСтрока.Значение) = Тип("ХранилищеЗначения") Тогда
				
				ТаблицаИстории = ИскомаяСтрока.Значение.Получить();
				ТаблицаИстории.Сортировать("Порядок");
				
				ТаблицаИстории.Колонки.Удалить("Порядок");
				ТаблицаИстории.Колонки.Удалить("ИдентификаторОтметкиВремени");
				ТаблицаИстории.Колонки.Удалить("КонтрольнаяСуммаПриглашения");
				ТаблицаИстории.Колонки.Удалить("Мероприятие");
				ТаблицаИстории.Колонки.СостояниеПриглашения.Имя = НСтр("ru = 'Состояние'");
				ТаблицаИстории.Колонки.ЯвкаОбязательна.Имя = НСтр("ru = 'Обязательный'");
				
				Результат.ТабличныеЧасти["Участники"] = ТаблицаИстории;
				
				УдалитьРеквизит(Результат, "УчастникиМероприятия");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличнаяЧастьПрограмма = Результат.ТабличныеЧасти["Программа"];
		Если ТабличнаяЧастьПрограмма <> Неопределено Тогда
			
			Для Каждого СтрокаПрограммы Из ТабличнаяЧастьПрограмма Цикл
				СтрокаПрограммы.ВремяПлан =
					УчетВремениКлиентСервер.ЧислоВСтроку(СтрокаПрограммы.ВремяПлан);
				СтрокаПрограммы.ВремяФакт =
					УчетВремениКлиентСервер.ЧислоВСтроку(СтрокаПрограммы.ВремяФакт);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
		
		УдалитьРеквизит(Результат, "ВариантИсполнения");
		УдалитьРеквизит(Результат, "ВариантУстановкиСрокаОбработкиРезультатов");
		УдалитьРеквизит(Результат, "Исполнение");
		УдалитьРеквизит(Результат, "КоличествоИтераций");
		УдалитьРеквизит(Результат, "Ответственный");
		УдалитьРеквизит(Результат, "СрокОбработкиРезультатов");
		УдалитьРеквизит(Результат, "СрокОбработкиРезультатовДни");
		УдалитьРеквизит(Результат, "СрокОбработкиРезультатовМинуты");
		УдалитьРеквизит(Результат, "СрокОбработкиРезультатовЧасы");
		
		ТабличнаяЧастьИсполнители = Результат.ТабличныеЧасти["Исполнители"];
		Если ТабличнаяЧастьИсполнители <> Неопределено Тогда
			
			ТабличнаяЧастьИсполнители.Колонки.Удалить("ВариантУстановкиСрокаИсполнения");
			ТабличнаяЧастьИсполнители.Колонки.Удалить("НаименованиеЗадачи");
			ТабличнаяЧастьИсполнители.Колонки.Удалить("Описание");
			ТабличнаяЧастьИсполнители.Колонки.Удалить("Ответственный");
			ТабличнаяЧастьИсполнители.Колонки.Удалить("ПорядокИсполнения");
			ТабличнаяЧастьИсполнители.Колонки.Удалить("СрокИсполнения");
			ТабличнаяЧастьИсполнители.Колонки.Удалить("СрокИсполненияДни");
			ТабличнаяЧастьИсполнители.Колонки.Удалить("СрокИсполненияМинуты");
			ТабличнаяЧастьИсполнители.Колонки.Удалить("СрокИсполненияЧасы");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после определения реквизитов объекта из формы 
// РегистрСведений.ВерсииОбъектов.ВыборРеквизитовОбъекта.
// 
// Параметры:
//  Ссылка           - ЛюбаяСсылка       - версионируемый объект конфигурации.
//  ДеревоРеквизитов - ДанныеФормыДерево - дерево реквизитов объектов.
//
Процедура ПриВыбореРеквизитовОбъекта(Ссылка, ДеревоРеквизитов) Экспорт
	
КонецПроцедуры

// Вызывается при получении представления реквизита объекта.
// 
// Параметры:
//  Ссылка                - ЛюбаяСсылка - версионируемый объект конфигурации.
//  ИмяРеквизита          - Строка      - ИмяРеквизита, как оно задано в конфигураторе.
//  НаименованиеРеквизита - Строка      - выходной параметр, можно переопределить полученный синоним.
//  Видимость             - Булево      - выводить реквизит в отчетах по версиям.
//
Процедура ПриОпределенииНаименованияРеквизитаОбъекта(Ссылка, ИмяРеквизита, НаименованиеРеквизита, Видимость) Экспорт
	
КонецПроцедуры

// Дополняет объект реквизитами, хранящимися отдельно от объекта либо в служебной части самого объекта,
// не предназначенной для вывода в отчетах.
//
// Параметры:
//  Объект - СправочникОбъект
//         - ДокументОбъект
//         - ПланВидовРасчетаОбъект
//         - ПланСчетовОбъект
//         - ПланВидовХарактеристикОбъект -
//           версионируемый объект.
//  ДополнительныеРеквизиты - ТаблицаЗначений - коллекция дополнительных реквизитов, которые требуется сохранить вместе
//                                              с версией объекта:
//   * Идентификатор - Произвольный - уникальный идентификатор реквизита. Требуется при восстановлении из версии
//                                    объекта в случае, когда значение реквизита хранится отдельно от объекта.
//   * Наименование - Строка - название реквизита.
//   * Значение - Произвольный - значение реквизита.
//
Процедура ПриПодготовкеДанныхОбъекта(Объект, ДополнительныеРеквизиты) Экспорт 
	
	Юрлица.ПриПодготовкеДанныхОбъекта(Объект, ДополнительныеРеквизиты);
	
	Если ТипЗнч(ОБъект) = Тип("СправочникОбъект.Мероприятия") Тогда
		Справочники.Мероприятия.ПриПодготовкеДанныхОбъекта(Объект, ДополнительныеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

// Восстанавливает значения реквизитов объекта, хранящихся отдельно от объекта.
//
// Параметры:
//  Объект - СправочникОбъект
//         - ДокументОбъект
//         - ПланВидовРасчетаОбъект
//         - ПланСчетовОбъект
//         - ПланВидовХарактеристикОбъект -
//           версионируемый объект:
//   * Ссылка - ЛюбаяСсылка
//  ДополнительныеРеквизиты - ТаблицаЗначений - коллекция дополнительных реквизитов, которые были сохранены вместе с
//                                              версией объекта:
//   * Идентификатор - Произвольный - уникальный идентификатор реквизита.
//   * Наименование - Строка - название реквизита.
//   * Значение - Произвольный - значение реквизита.
//
Процедура ПриВосстановленииВерсииОбъекта(Объект, ДополнительныеРеквизиты) Экспорт
	
	Юрлица.ПриВосстановленииВерсииОбъекта(Объект, ДополнительныеРеквизиты);
	
	Если ТипЗнч(ОБъект) = Тип("СправочникОбъект.Мероприятия") Тогда
		Справочники.Мероприятия.ПриВосстановленииВерсииОбъекта(Объект, ДополнительныеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Удаляет реквизит из результата разбора версии объекта..
// 
// Параметры:
//  Результат - Структура - результат разбора версии подсистемой версионирования.
//  ИмяРеквизита - Строка - Имя удаляемого реквизита.
// 
Процедура УдалитьРеквизит(Результат, ИмяРеквизита)
	
	СтрокаРеквизита = Результат.Реквизиты.Найти(ИмяРеквизита, "НаименованиеРеквизита");
	Результат.Реквизиты.Удалить(СтрокаРеквизита);
	
КонецПроцедуры

#КонецОбласти