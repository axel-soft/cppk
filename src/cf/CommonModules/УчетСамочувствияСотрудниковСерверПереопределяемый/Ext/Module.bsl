#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Переопределяет получение сотрудников подлежащих учету самочувствия.
// Вызывается из УчетСамочувствияСотрудниковСервер.СотрудникиПодлежащиеУчетуСамочувствия.
//
// Параметры:
//  ДатаУчета - Дата
//  СотрудникиПодлежащиеУчету - Массив из СправочникСсылка.Сотрудники - В этот параметр следует поместить результат.
//  СтандартнаяОбработка - Булево - используется для отключения стандартной
//                         логики определения сотрудников.
//
Процедура ПриОпределенииСотрудниковПодлежащихУчетуСамочувствия(
	ДатаУчета, СотрудникиПодлежащиеУчету, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СотрудникиДляКонтроляСамочувствия.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиДляКонтроляСамочувствия КАК СотрудникиДляКонтроляСамочувствия");
	
	СотрудникиПодлежащиеУчету = Запрос.Выполнить().Выгрузить()
									.ВыгрузитьКолонку("Сотрудник"); // Массив из СправочникСсылка.Сотрудники
	
	// Исключим удаленных, недействительных и служебных пользователей.
	РеквизитыСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		СотрудникиПодлежащиеУчету, "ПометкаУдаления, Действует");
	КоличествоЭлементов = СотрудникиПодлежащиеУчету.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		Сотрудник = СотрудникиПодлежащиеУчету[ОбратныйИндекс];
		
		РеквизитыСотрудника = РеквизитыСотрудников[Сотрудник];
		
		// Если это действительный сотрудник - считаем что он подлежит учету.
		Если РеквизитыСотрудника.ПометкаУдаления = Ложь
			И РеквизитыСотрудника.Действует = Истина Тогда
			
			Продолжить;
		КонецЕсли;
		
		// Если это не действительный - исключаем сотрудника из учета.
		СотрудникиПодлежащиеУчету.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	// Исключим сотрудников, у которых выпадает на не рабочее время учёт.
	КоличествоЭлементов = СотрудникиПодлежащиеУчету.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		Сотрудник = СотрудникиПодлежащиеУчету[ОбратныйИндекс];
		
		// Если не задан график - считаем что сотрудник работает всегда.
		ГрафикСотрудника = ГрафикиРаботы.ГрафикРаботыСотрудника(Сотрудник);
		Если Не ЗначениеЗаполнено(ГрафикСотрудника) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если задан график и это рабочее время - считаем что сотрудник подлежит учету.
		Если ГрафикиРаботы.ЭтоРабочаяДатаВремя(ГрафикСотрудника, ДатаУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если задан график и это не рабочее время - исключаем сотрудника из учета.
		СотрудникиПодлежащиеУчету.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	// Исключим сотрудников, которые отсутствуют.
	ДатаНачала = ДатаУчета - 1;
	ДатаОкончания = ДатаУчета + 1;
	НастройкиПроверкиОтсутствий = ОтсутствияКлиентСервер.НастройкиПроверкиОтсутствий();
	НастройкиПроверкиОтсутствий.УчитыватьФлагБудуРазбиратьЗадачи = Ложь;
	
	ПользователиПоСотрудникам = Сотрудники.ПользователиПоСотрудникам(СотрудникиПодлежащиеУчету);
	ПользователиСотрудников = Новый Массив; // Массив из СправочникСсылка.Пользователи
	Для Каждого КлючЗначение Из ПользователиПоСотрудникам Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПользователиСотрудников, КлючЗначение.Значение);
	КонецЦикла;
	
	ОтсутствияПользователей = Отсутствия.ПолучитьТаблицуОтсутствий(
		ДатаНачала,
		ДатаОкончания,
		ПользователиСотрудников,
		НастройкиПроверкиОтсутствий);
		
	КоличествоЭлементов = СотрудникиПодлежащиеУчету.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		Сотрудник = СотрудникиПодлежащиеУчету[ОбратныйИндекс];
		
		ПользователиСотрудника = ПользователиПоСотрудникам[Сотрудник];
		
		ХотьОдинПользовательНеОтсутствует = Ложь;
		// Если задан график и сотрудник не отсутствует - считаем что сотрудник подлежит учету.
		Для Каждого ПользовательСотрудника Из ПользователиСотрудника Цикл
			Если ОтсутствияПользователей.Найти(ПользовательСотрудника, "Сотрудник") = Неопределено Тогда
				ХотьОдинПользовательНеОтсутствует = Истина;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		Если ХотьОдинПользовательНеОтсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		// Если задан график и сотрудник отсутствует -исключаем сотрудника из учета.
		СотрудникиПодлежащиеУчету.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
КонецПроцедуры

// Переопределяет получение точки замера для сотрудника.
// Вызывается из УчетСамочувствияСотрудниковСервер.ТочкаЗамераДляСотрудникаНаДату.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники - Сотрудник.
//  Дата - Дата - дата на которую выполняется получение точки.
//  ТочкаЗамера - СправочникСсылка.ГрафикУчетаСамочувствияСотрудников
//  СтандартнаяОбработка - Булево - используется для отключения стандартной
//                         логики определения точки замера.
//
Процедура ПриПолученииТочкиЗамераДляСотрудникаНаДату(
	Сотрудник, Дата, ТочкаЗамера, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТочкиИДатыЗамера = Новый ТаблицаЗначений;
	ТочкиИДатыЗамера.Колонки.Добавить("ТочкаЗамера");
	ТочкиИДатыЗамера.Колонки.Добавить("ДатаЗамера");
	
	Для Каждого СтрокаТочки Из Справочники.ГрафикУчетаСамочувствияСотрудников.ДействительныеТочкиЗамеров() Цикл
		
		ДатаЗамера = Дата(
			Год(Дата),
			Месяц(Дата),
			День(Дата),
			Час(СтрокаТочки.ВремяЗамера),
			Минута(СтрокаТочки.ВремяЗамера),
			0);
			
		Если ДатаЗамера < Дата Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТочкиИДатыЗамера.Добавить();
		СтрокаТаблицы.ТочкаЗамера = СтрокаТочки.ТочкаЗамера;
		СтрокаТаблицы.ДатаЗамера = ДатаЗамера;
		
	КонецЦикла;
	
	ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(Сотрудник);
	ТаблицаРабочегоВремени = 
		ГрафикиРаботы.СформироватьТаблицуРабочегоВремени(ГрафикРаботы, НачалоДня(Дата), КонецДня(Дата));
	
	Индекс = ТочкиИДатыЗамера.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		ПроверяемаяСтрока = ТочкиИДатыЗамера[Индекс];
		Индекс = Индекс - 1;
		
		ПроверяемаяДата = ПроверяемаяСтрока.ДатаЗамера;
		
		ЕстьПересечение = Ложь;
		Для Каждого СтрокаТаблицы Из ТаблицаРабочегоВремени Цикл
			Если СтрокаТаблицы.ДатаНачала <= ПроверяемаяДата И ПроверяемаяДата <= СтрокаТаблицы.ДатаОкончания Тогда
				ЕстьПересечение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьПересечение Тогда
			Продолжить;
		КонецЕсли;
		
		ТочкиИДатыЗамера.Удалить(ПроверяемаяСтрока);
		
	КонецЦикла;
	
	НастройкиПроверкиОтсутствий = ОтсутствияКлиентСервер.НастройкиПроверкиОтсутствий();
	НастройкиПроверкиОтсутствий.УчитыватьФлагБудуРазбиратьЗадачи = Ложь;
	
	Индекс = ТочкиИДатыЗамера.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		ПроверяемаяСтрока = ТочкиИДатыЗамера[Индекс];
		Индекс = Индекс - 1;
		
		ПроверяемаяДата = ПроверяемаяСтрока.ДатаЗамера;
		
		ЕстьПересечение = Ложь;
		Для Каждого СтрокаТаблицы Из ТаблицаРабочегоВремени Цикл
			Если СтрокаТаблицы.ДатаНачала <= ПроверяемаяДата И ПроверяемаяДата <= СтрокаТаблицы.ДатаОкончания Тогда
				ЕстьПересечение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьПересечение Тогда
			Продолжить;
		КонецЕсли;
		
		ТочкиИДатыЗамера.Удалить(ПроверяемаяСтрока);
		
	КонецЦикла;
	
	Если ТочкиИДатыЗамера.Количество() = 0 Тогда
		ТочкаЗамера = Справочники.ГрафикУчетаСамочувствияСотрудников.ПустаяСсылка();
	Иначе
		ТочкаЗамера = ТочкиИДатыЗамера[0].ТочкаЗамера;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
