////////////////////////////////////////////////////////////////////////////////
// Обработки объектов: Содержит серверные процедуры по работе с обработками объектов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВыполнениеОбработки

// Начинает выполнение обработки объекта.
// Процедура приводит к перезаписи обработки.
//
// Параметры:
//  ОбработкаАргумент - СправочникСсылка.ОбработкиДокументов, СправочникОбъект.ОбработкиДокументов - Обработка документа.
//  УсловияПроверены - Булево - Истина, если это интерактивный запуск, там уже прошли проверки.
//
Процедура НачатьОбработку(ОбработкаАргумент, УсловияПроверены = Ложь) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Обработка = Неопределено;
		ОбработкаОбъект = Неопределено;
		
		Если ТипЗнч(ОбработкаАргумент) = Тип("СправочникСсылка.ОбработкиОбъектов") Тогда
			
			Обработка = ОбработкаАргумент;
			ОбработкаОбъект = Обработка.ПолучитьОбъект();
			
		Иначе	// тут объект

			Обработка = ОбработкаАргумент.Ссылка;
			ОбработкаОбъект = ОбработкаАргумент;
				
		КонецЕсли;	
		
		ЗаблокироватьДанныеДляРедактирования(Обработка);
		
		Если Не ЗначениеЗаполнено(ОбработкаОбъект.Состояние) Тогда
			
			Если ЕстьДругиеАктивныеОбработки(Обработка.Владелец, Обработка) Тогда
				ВызватьИсключение НСтр("ru = 'Запуск в обработку невозможен. Уже есть другая активная обработка.'");
			КонецЕсли;	
			
			Если УсловияПроверены = Ложь Тогда
				
				ПроверитьУсловия(Обработка.Владелец); // бросит исключение если условия не выполняются
				
			КонецЕсли;	
			
			ОбработкаОбъект.ДатаНачала = ТекущаяДатаСеанса();
			
			// Разыменование участников действий при запуске документа в обработку.
			ОбработанныеДействия = Новый Массив();
			ДействияСервер.ВыполнитьРазыменованиеДействийПриЗапускеВОбработку(
				Обработка.Владелец, ОбработанныеДействия, ОбработкаОбъект.ДатаНачала);
			
			ОбработкаОбъект.Состояние = Перечисления.СостоянияОбработкиОбъектов.Выполняется;
			ОбработкаОбъект.Начал = Сотрудники.ОсновнойСотрудник(); 
					
			УстановитьПривилегированныйРежим(Истина);
			ОбработкаОбъект.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ОбработкаОбъект.Ссылка;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.НачалоОбработки;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
			
			РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПриНачалеОбработкиОбъекта(ОбработкаОбъект);
							
		Иначе
			
			Комментарий = СтрШаблон(
				НСтр("ru = 'Попытка повторного запуска обработки %1'"),
				ПолучитьНавигационнуюСсылку(Обработка));
			
			ЗаписьЖурналаРегистрации("ОбработкиОбъектов.ПовторныйЗапускОбработки",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ОбработкиОбъектов,
				Обработка,
				Комментарий);
			
		КонецЕсли;
		
		ВладелецОбъект = ОбработкаОбъект.Владелец.ПолучитьОбъект();
		ВладелецОбъект.ДополнительныеСвойства.Вставить("ИсключитьТекущийУзелИС", Ложь);
		ОбработкаЗапросовXDTOОбмен.ОбменСИнтегрированнымиСистемамиПередЗаписью(
			ВладелецОбъект,
			Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Прерывает обработку объекта: помещает ее с действиями в историю.
// Процедура приводит к перезаписи обработки документов.
//
// Параметры:
//  Обработка - СправочникСсылка.ОбработкиОбъектов - Обработка объекта.
//  ПричинаПрерывания - Строка - причина прерывания обработки.
//  ПометкаУдаления - Булево - флаг пометки удаления.
//
Процедура ПрерватьОбработку(Знач Обработка, ПричинаПрерывания, ПометкаУдаления = Ложь) Экспорт
	
	Если (ТипЗнч(Обработка) <> Тип("СправочникСсылка.ОбработкиОбъектов"))
		Или Не ЗначениеЗаполнено(Обработка) Тогда
	
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		// Помещаем в историю обработку документа.  
		// при прерывании обработки не проверяем блокирвоку.
		
		ОбработкаОбъект = Обработка.ПолучитьОбъект();
		// Если Обработка завершена, то ее не прерываем, а просто помещаем в историю
		ОбработкаЗавершена = ОбработкаОбъект.Состояние = Перечисления.СостоянияОбработкиОбъектов.Завершена;
		ОбработкаОбъект.ПоместилВИсторию = Сотрудники.ОсновнойСотрудник();
		Если Не ОбработкаЗавершена Тогда
			ОбработкаОбъект.Состояние = Перечисления.СостоянияОбработкиОбъектов.Прервана;
			ОбработкаОбъект.Прервал = ОбработкаОбъект.ПоместилВИсторию;
			ОбработкаОбъект.ПричинаПрерывания = ПричинаПрерывания;
			ОбработкаОбъект.ДатаОкончания = ТекущаяДатаСеанса();
		КонецЕсли;				
		ОбработкаОбъект.ПомещенаВИсторию = Истина;
		Если ОбработкаОбъект.ДатаНачала = '00010101' Тогда
			ОбработкаОбъект.ДатаНачала = ОбработкаОбъект.ДатаОкончания;
		КонецЕсли;
		ОбработкаОбъект.ПометкаУдаления = ПометкаУдаления;
		
		ОбработкаОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		// Помещаем в историю ее действия.
		ДействияОбработки = РегистрыСведений.ДействияОбработкиОбъектов.ДействияОбработки(Обработка);
		Для Каждого ДействиеОбработки Из ДействияОбработки Цикл
			ДействияСервер.ПоместитьДействиеВИсторию(ДействиеОбработки, ПричинаПрерывания);
		КонецЦикла;
		
		Если Не ОбработкаЗавершена Тогда
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = Обработка;
			Событие.Описание = ПричинаПрерывания;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПрерываниеОбработки;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
			
			// Регистрируем бизнес-событие.
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
				Обработка,
				Справочники.ВидыБизнесСобытий.ОстановкаОбработки);
		КонецЕсли;
		Документ = ОбработкаОбъект.Владелец;
		
		ВладелецОбъект = ОбработкаОбъект.Владелец.ПолучитьОбъект();
		ВладелецОбъект.ДополнительныеСвойства.Вставить("ИсключитьТекущийУзелИС", Ложь);
		ОбработкаЗапросовXDTOОбмен.ОбменСИнтегрированнымиСистемамиПередЗаписью(
			ВладелецОбъект,
			Ложь);
		
		ЗафиксироватьТранзакцию();
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда
			РаботаСФайламиВызовСервера.ОчиститьФайлыВЛокалКэше(Документ);
		КонецЕсли;	
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Прерывает обработку документа.
//
// Параметры:
//  ОбъектОбработки - ОпределяемыйТип.ПредметДействия - ссылка на предмет обработки.
//  ПричинаПрерывания - Строка - причина прерывания обработки.
//
Процедура ПрерватьОбработкуОбъекта(ОбъектОбработки, ПричинаПрерывания) Экспорт
	
	ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ОбъектОбработки);
	Если Не ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъектаОбработки = ДействияСервер.ПараметрыОбъектаОбработки(ОбъектОбработки);	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не ДействияСервер.ЕстьПравоОстановкиОбработки(
			ПараметрыОбъектаОбработки, 
			ТекущийПользователь) Тогда
			
		Если ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
			Если ПараметрыОбъектаОбработки.Свойство("РегистрационныйНомер")
				И ЗначениеЗаполнено(ПараметрыОбъектаОбработки.РегистрационныйНомер) Тогда
				ТекстИсключения = 
					НСтр("ru = 'Документ зарегистрирован, у Вас недостаточно прав для прерывания обработки.
						|Обратитесь к администратору.'");
			Иначе
				ТекстИсключения = 
					НСтр("ru = 'У Вас недостаточно прав для прерывания обработки.
						|Обратитесь к автору документа.'");
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			ТекстИсключения = 
				НСтр("ru = 'У Вас недостаточно прав для прерывания обработки.
					|Обратитесь к ответственному за мероприятие.'");
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный объект обработки %1 (%2).'"),
				ОбъектОбработки,
				ТипЗнч(ОбъектОбработки));
			
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ПрерватьОбработку(ОбработкаОбъекта, ПричинаПрерывания);
	
КонецПроцедуры

// Прерывает обработку объекта при пометке удаления предмета.
//
// Параметры:
//  ОбъектОбработки - ОпределяемыйТип.ПредметДействия - ссылка на предмет обработки.
//  ПричинаПрерывания - Строка - причина прерывания обработки.
//
Процедура ПрерватьОбработкуОбъектаПриПометкеНаУдаление(ОбъектОбработки, ПричинаПрерывания) Экспорт
	
	ПараметрыОбъектаОбработки = ДействияСервер.ПараметрыОбъектаОбработки(ОбъектОбработки);	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не ДействияСервер.ЕстьПравоОстановкиОбработки(
			ПараметрыОбъектаОбработки, 
			ТекущийПользователь) Тогда
			
		Если ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
			Если ЗначениеЗаполнено(ПараметрыОбъектаОбработки.РегистрационныйНомер) Тогда
				ТекстИсключения = СтрШаблон(
					НСтр("ru = 'Документ ""%1"" не может быть удален, т.к. зарегистрирован. 
						 |У вас нет прав на прерывание обработки или пометку на удаление. 
						 |Обратитесь к администратору.'"),
					Строка(ОбъектОбработки));
			Иначе
				ТекстИсключения = СтрШаблон(
					НСтр("ru = 'Документ ""%1"" не может быть удален, т.к. находится в обработке. 
						 |У вас нет прав на ее прерывание или пометку на удаление. 
						 |Обратитесь к автору документа или к администратору.'"),
					Строка(ОбъектОбработки));
					
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			ТекстИсключения = СтрШаблон(
				НСтр("ru = 'Мероприятие ""%1"" не может быть удалено, т.к. находится в обработке. 
					|У вас нет прав на ее прерывание или пометку на удаление.
					|Обратитесь к ответственному за мероприятие или к администратору.'"),
					Строка(ОбъектОбработки));
			
		Иначе
			
			ТекстИсключения = СтрШаблон(
				НСтр("ru = 'Неизвестный объект обработки %1 (%2).'"),
				ОбъектОбработки,
				ТипЗнч(ОбъектОбработки));
			
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ОбъектОбработки);
	Если ЗначениеЗаполнено(Обработка) Тогда
		ПрерватьОбработку(Обработка, ПричинаПрерывания, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обновить отметки завершенности.
// 
// Параметры:
//  Обработка - СправочникСсылка.ОбработкиОбъектов - Обработка объекта.
//
Процедура ОбновитьОтметкиЗавершенностиОбработки(Обработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
			
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Обработка);
		ОбработкаОбъект = Обработка.ПолучитьОбъект();
		
		Если ОбработкаОбъект.Состояние <> Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДействияОбработкиОбъектов.Действие
			|ИЗ
			|	РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
			|		ПО ДействияОбработкиОбъектов.Действие = СостоянияДействий.Действие
			|		И СостоянияДействий.Функция = НЕОПРЕДЕЛЕНО
			|		И СостоянияДействий.Участник = НЕОПРЕДЕЛЕНО
			|ГДЕ
			|	ДействияОбработкиОбъектов.Обработка = &Обработка
			|	И ДействияОбработкиОбъектов.Действие.ПомещеноВИсторию = ЛОЖЬ
			|	И ДействияОбработкиОбъектов.Действие.ПометкаУдаления = ЛОЖЬ
			|	И (СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
			|	ИЛИ СостоянияДействий.Состояние ЕСТЬ NULL)";
		Запрос.УстановитьПараметр("Обработка", Обработка);
				
		Если Не Запрос.Выполнить().Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ОбработкаОбъект.Состояние = Перечисления.СостоянияОбработкиОбъектов.Завершена;
		ОбработкаОбъект.ДатаОкончания = ТекущаяДатаСеанса();
		ОбработкаОбъект.Записать();
		
		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = Обработка;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ЗавершениеОбработки;
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Возвращает актуальность обработки для запуска.
//
// Параметры:
//  Обработка - СправочникСсылка.ОбработкиДокументов - Обработка документа.
//  
//  Возвращаемое значение:
//   Булево
//
Функция ОбработкаАктуальнаДляЗапуска(Обработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Обработка, "Состояние, ПометкаУдаления");
	
	Если РеквизитыОбработки.Состояние = Перечисления.СостоянияОбработкиОбъектов.Завершена
		Или РеквизитыОбработки.Состояние = Перечисления.СостоянияОбработкиОбъектов.Прервана
		Или РеквизитыОбработки.ПометкаУдаления Тогда
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает все обработки по предмету.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия - ссылка на предмет обработки.
//
// Возвращаемое значение:
//  ВсеОбработкиПредмета - Массив - все обработки предмета.
//
Функция ВсеОбработкиПредмета(Предмет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбработкиОбъектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбработкиОбъектов КАК ОбработкиОбъектов
		|ГДЕ
		|	ОбработкиОбъектов.Владелец = &Предмет");
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Помечает или снимает пометку на удаление у переданных обработок объектов
// 
// Параметры:
// 	Обработки - Массив - обработок объектов, которые нужно пометить на удаление/снять пометку удаления.
// 	ПометкаУдаления - Булево - если Истина, то ставим пометку на удаление, если Ложь, то снимаем.
//
Процедура ПометитьОбработкиНаУдаление(Обработки, ПометкаУдаления) Экспорт
	
	Для Каждого Обработка Из Обработки Цикл

		ЗаблокироватьДанныеДляРедактирования(Обработка);

		ОбъектОбработка = Обработка.ПолучитьОбъект();
		ОбъектОбработка.УстановитьПометкуУдаления(ПометкаУдаления);

		РазблокироватьДанныеДляРедактирования(Обработка);

	КонецЦикла;
	
КонецПроцедуры

// Прерывает или продолжает обработку объекта.
//
// Параметры:
//  ОбъектОбработки - ОпределяемыйТип.ПредметДействия - ссылка на предмет обработки.
//  СостояниеОбработки - ПеречислениеСсылка.СостоянияОбработкиОбъектов - устанавливаемое состояние обработки.
//
Процедура ОстановитьПродолжитьОбработкуОбъекта(ОбъектОбработки, СостояниеОбработки) Экспорт
	
	ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ОбъектОбработки);
	Если Не ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъектаОбработки = ДействияСервер.ПараметрыОбъектаОбработки(ОбъектОбработки);	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не ДействияСервер.ЕстьПравоОстановкиОбработки(
			ПараметрыОбъектаОбработки, 
			ТекущийПользователь) Тогда
			
		Если ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
			ТекстИсключения = 
				НСтр("ru = 'У Вас недостаточно прав для остановки обработки.
					|Обратитесь к автору документа.'");
			
		ИначеЕсли ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			ТекстИсключения = 
				НСтр("ru = 'У Вас недостаточно прав для остановки обработки.
					|Обратитесь к ответственному за мероприятие.'");
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный объект обработки %1 (%2).'"),
				ОбъектОбработки,
				ТипЗнч(ОбъектОбработки));
			
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если ОбработкиОбъектовХолдингСервер.ЗаданиеОстановитьПродолжитьОбработкуОбъектаДобавлено(ОбработкаОбъекта,
		СостояниеОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	ОстановитьПродолжитьОбработку(ОбработкаОбъекта, СостояниеОбработки);
	
КонецПроцедуры

// Поверяет возможность перехода к выполнению действия.
//
// Параметры:
//  Объект - СправочникСсылка.ДокументыПредприятия, СправочникСсылка.Мероприятия.
//  ПараметрыВидаОбъекта - Структура - ДействияКлиентСервер.НовыйПараметрыВидаОбъекта.
//  СостояниеОбработки - ПеречислениеСсылка.СостоянияОбработкиОбъектов
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможностьПереходаКВыполнениюДействия(Объект, ПараметрыВидаОбъекта, СостояниеОбработки) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		ДоступностьПерехода = Истина;
	ИначеЕсли ДействияКлиентСервер.ОбработкаЗаданаПравилами(ПараметрыВидаОбъекта) Тогда
		ДоступностьПерехода = РольДоступна("ЗапускДействийРегламентированнойОбработкиВнеОчереди");
	ИначеЕсли ЗначениеЗаполнено(Объект) Тогда
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект);
		ДоступностьПерехода = ПраваПоОбъекту.Изменение;
	Иначе
		ДоступностьПерехода = Истина;
	КонецЕсли;
	
	ДоступностьПерехода = ДоступностьПерехода
		И СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Выполняется;
	
	Возврат ДоступностьПерехода;
	
КонецФункции

// Возвращает изменения, которые будут сделаны при переходе к выполнению действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//
// Возвращаемое значение:
//  Структура:
//   * ДляПрерывания - Массив из ОпределяемыйТип.Действия.
//   * ДляПропуска - Массив из ОпределяемыйТип.Действия.
//   * ДляОчисткиРезультатов - Массив из ОпределяемыйТип.Действия.
//   * ОписаниеИзменений - Строка.
//   * ПереходВозможен - Булево.
//
Функция ИзмененияОбработкиПриПереходеКВыполнениюДействию(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИзмененияОбработки = Новый Структура;
	ИзмененияОбработки.Вставить("ДляПрерывания", Новый Массив);
	ИзмененияОбработки.Вставить("ДляПропуска", Новый Массив);
	ИзмененияОбработки.Вставить("ДляОчисткиРезультатов", Новый Массив);
	ИзмененияОбработки.Вставить("ОписаниеИзменений", "");
	ИзмененияОбработки.Вставить("ПереходВозможен", Истина);
	ИзмененияОбработки.Вставить("ПереходЧерезОчередьЗаданийКОД", Ложь);
	
	Обработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);

	Если ОбработкаОчередиЗаданийСервер.ОбработатьВычислениеИзмененийПриПереходеКВыполнениюДействияОбработки(
		Обработка, ИзмененияОбработки) Тогда
		
		Возврат ИзмененияОбработки;
	КонецЕсли;
	
	СостояниеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "Состояние");
	Если СостояниеОбработки <> Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
		ИзмененияОбработки.ПереходВозможен = Ложь;
		ИзмененияОбработки.ОписаниеИзменений =
			НСтр("ru = 'Переход к выполнению действия невозможен. Обработка не активна.'");
		Возврат ИзмененияОбработки;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ВыполненоВнеПрограммы") Тогда
		ИзмененияОбработки.ПереходВозможен = Ложь;
		ИзмененияОбработки.ОписаниеИзменений =
			НСтр("ru = 'Переход к выполнению действия невозможен. Действие уже отмечено как выполненное вне программы.'");
		Возврат ИзмененияОбработки;
	КонецЕсли;
	
	ДействияОбработки = РегистрыСведений.ДействияОбработкиОбъектов.ДействияОбработки(Обработка);
	
	СостоянияДействий = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ДействияСервер.ВсеСостоянияИРезультаты(ДействияОбработки) Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Функция) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Состояние) Тогда
			СостоянияДействий[СтрокаТаблицы.Действие] = СтрокаТаблицы.Состояние;
		КонецЕсли;
	КонецЦикла;
	
	Если СостоянияДействий[Действие] = Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
		ИзмененияОбработки.ПереходВозможен = Ложь;
		ИзмененияОбработки.ОписаниеИзменений =
			НСтр("ru = 'Переход к выполнению действия невозможен. Действие уже выполняется.'");
		Возврат ИзмененияОбработки;
	КонецЕсли;
	
	ДействияДоИПосле = ДействияДоИПосле(Действие, Обработка, ДействияОбработки);
	ДействияДо = ДействияДоИПосле.ДействияДо;
	ДействияПосле = ДействияДоИПосле.ДействияПосле;
	ВсеДействия = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ДействияДо);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеДействия, ДействияПосле);
	
	ВыполненныеВнеПрограммы = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеДействия, "ВыполненоВнеПрограммы");
	
	Для Каждого ДействиеДо Из ДействияДо Цикл
		СостояниеДействия = СостоянияДействий[ДействиеДо];
		Если СостояниеДействия = Неопределено Тогда
			ИзмененияОбработки.ДляПропуска.Добавить(ДействиеДо);
		ИначеЕсли СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено
			Или СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
			
			// С завершенными действиями ничего не делаем.
		Иначе
			ИзмененияОбработки.ДляПрерывания.Добавить(ДействиеДо);
			ИзмененияОбработки.ДляПропуска.Добавить(ДействиеДо);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДействиеПосле Из ДействияПосле Цикл
		
		Если ВыполненныеВнеПрограммы[ДействиеПосле].ВыполненоВнеПрограммы Тогда
			Продолжить;
		КонецЕсли;
		
		СостояниеДействия = СостоянияДействий[ДействиеПосле];
		Если СостояниеДействия = Неопределено Тогда
			// С не начатыми действиями ничего не делаем.
		ИначеЕсли СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено
			Или СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
			
			ИзмененияОбработки.ДляОчисткиРезультатов.Добавить(ДействиеПосле);
		Иначе
			ИзмененияОбработки.ДляПрерывания.Добавить(ДействиеПосле);
		КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого ДействиеДляПропуска Из ИзмененияОбработки.ДляПропуска Цикл
		Если ТипЗнч(ДействиеДляПропуска) = Тип("СправочникСсылка.ДействияПодписания") Тогда
			ИзмененияОбработки.ПереходВозможен = Ложь;
			ИзмененияОбработки.ОписаниеИзменений =
				НСтр("ru = 'Подписание не может быть пропущено.'");
			Возврат ИзмененияОбработки;
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмененияОбработки.ДляПрерывания.Количество() = 0 Тогда
		ИзмененияОбработки.ПереходВозможен = Ложь;
		ИзмененияОбработки.ОписаниеИзменений =
			НСтр("ru = 'Переход в альтернативный путь маршрута обработки невозможен.
				|Выберите действие до ветвления маршрута, либо остановите и запустите обработку сначала.'");
		Возврат ИзмененияОбработки;
	КонецЕсли;
	
	Если ОбщегоНазначенияДокументооборотХолдинг.ОбъектМожноОбработатьВОчередиЗаданий(Обработка) Тогда
		ИзмененияОбработки.ПереходЧерезОчередьЗаданийКОД = Истина;
	КонецЕсли;
	
	ДляПрерывания = Новый Соответствие;
	
	ТекстыОписания = Новый Массив;
	Если ИзмененияОбработки.ПереходЧерезОчередьЗаданийКОД Тогда
		ТекстыОписания.Добавить(НСтр("ru = 'Переход к выполнению действия будет выполняться в фоновом режиме.'"));
		ТекстыОписания.Добавить(Символы.ПС);
		ТекстыОписания.Добавить(НСтр("ru = 'Это может занять некоторое время.'"));
		ТекстыОписания.Добавить(Символы.ПС);
		ТекстыОписания.Добавить(Символы.ПС);
	КонецЕсли;
	ТекстыОписания.Добавить(НСтр("ru = 'При переходе к выполнению действия '"));
	ТекстыОписания.Добавить("""" + Строка(Действие) + """");
	
	ТекстыОписания.Добавить(Символы.ПС);
	ТекстыОписания.Добавить(Символы.ПС);
	ТекстыОписания.Добавить(НСтр("ru = 'будут прерваны:'"));
	Для Каждого ДействиеДляПрерывания Из ИзмененияОбработки.ДляПрерывания Цикл
		ТекстыОписания.Добавить(Символы.ПС);
		ТекстыОписания.Добавить("- ");
		ТекстыОписания.Добавить(Строка(ДействиеДляПрерывания));
		ДляПрерывания[ДействиеДляПрерывания] = Истина;
	КонецЦикла;
	
	ДляПропускаВОписании = Новый Массив;
	Для Каждого ДействиеДляПропуска Из ИзмененияОбработки.ДляПропуска Цикл
		Если ДляПрерывания[ДействиеДляПропуска] = Истина Тогда
			Продолжить;
		КонецЕсли;
		ДляПропускаВОписании.Добавить(ДействиеДляПропуска);
	КонецЦикла;
	
	Если ДляПропускаВОписании.Количество() > 0 Тогда
		ТекстыОписания.Добавить(Символы.ПС);
		ТекстыОписания.Добавить(Символы.ПС);
		ТекстыОписания.Добавить(НСтр("ru = 'будут пропущены:'"));
		Для Каждого ДействиеДляПропуска Из ДляПропускаВОписании Цикл
			ТекстыОписания.Добавить(Символы.ПС);
			ТекстыОписания.Добавить("- ");
			ТекстыОписания.Добавить(Строка(ДействиеДляПропуска));
		КонецЦикла;
	КонецЕсли;
	
	Если ИзмененияОбработки.ДляОчисткиРезультатов.Количество() > 0 Тогда
		ТекстыОписания.Добавить(Символы.ПС);
		ТекстыОписания.Добавить(Символы.ПС);
		ТекстыОписания.Добавить(НСтр("ru = 'будут очищены результаты:'"));
		Для Каждого ДействиеДляОчистки Из ИзмененияОбработки.ДляОчисткиРезультатов Цикл
			ТекстыОписания.Добавить(Символы.ПС);
			ТекстыОписания.Добавить("- ");
			ТекстыОписания.Добавить(Строка(ДействиеДляОчистки));
		КонецЦикла;
	КонецЕсли;
	
	ИзмененияОбработки.ОписаниеИзменений = СтрСоединить(ТекстыОписания);
	
	Если ЗначениеЗаполнено(СостоянияДействий[Действие]) Тогда
		ИзмененияОбработки.ДляОчисткиРезультатов.Добавить(Действие);
	КонецЕсли;
	
	Возврат ИзмененияОбработки;
	
КонецФункции

// Выполняет переход к выполнению переданного действия обработки.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//  ПодтвержденныеИзмененияОбработки - Структура, Неопределено - см. ИзмененияОбработкиПриПереходеКВыполнениюДействию.
//
Процедура ПерейтиКВыполнениюДействия(Действие,
	ПодтвержденныеИзмененияОбработки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Обработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Обработка);
		
		ИзмененияОбработки = ИзмененияОбработкиПриПереходеКВыполнениюДействию(Действие);
		Если ПодтвержденныеИзмененияОбработки <> ПодтвержденныеИзмененияОбработки
			
			И Не ОбщегоНазначенияДокументооборот.ДанныеСовпадают(
				ПодтвержденныеИзмененияОбработки, ИзмененияОбработки) Тогда
			
			ВызватьИсключение
				НСтр("ru = 'Не удалось выполнить переход к действию. Обработка была изменена в другом сеансе программы.'");
		КонецЕсли;
		Если Не ИзмененияОбработки.ПереходВозможен Тогда
			ВызватьИсключение ИзмененияОбработки.ОписаниеИзменений;
		КонецЕсли;
		
		ОстановитьПродолжитьОбработку(
			Обработка, Перечисления.СостоянияОбработкиОбъектов.Остановлена);
		
		Для Каждого ДействиеДляПрерывания Из ИзмененияОбработки.ДляПрерывания Цикл
			ДействияСервер.ПрерватьВыполнениеДействия(ДействиеДляПрерывания);
		КонецЦикла;
		
		Для Каждого ДействиеДляОчистки Из ИзмененияОбработки.ДляОчисткиРезультатов Цикл
			ДействияСервер.УдалитьРезультатыВыполненияДействия(ДействиеДляОчистки);
		КонецЦикла;
		
		Для Каждого ДействиеДляПропуска Из ИзмененияОбработки.ДляПропуска Цикл
			ДействияСервер.ПропуститьДействие(ДействиеДляПропуска);
		КонецЦикла;
		
		РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПриПереходеКВыполнениюДействия(
			Обработка, Действие, ИзмененияОбработки);
		
		ОстановитьПродолжитьОбработку(
			Обработка, Перечисления.СостоянияОбработкиОбъектов.Выполняется);
		
		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = Обработка;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПереходКВыполнениюДействия;
		Событие.Действие = Действие;
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = НСтр("ru = 'Не удалось выполнить переход к действию.
			|
			|Причина:
			|%1'");
		
		ТекстИсключения = СтрШаблон(
			ТекстИсключения,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
 
// Возвращает вид владельца обработки объекта.
// 
// Параметры:
// 	Обработка - СправочникСсылка.ОбработкиОбъектов
// 	
// Возвращаемое значение:
// 	ОпределяемыйТип.ВидОбъектаСОбработкой - ссылка на вид владельца обработки.
// 	Неопределено - если для владельца вид не предусмотрен.
// 	
Функция ВидВладельцаОбработки(Обработка) Экспорт
	
	ВладелецОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "Владелец");
	Если ТипЗнч(ВладелецОбработки) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецОбработки, "ВидДокумента");
	ИначеЕсли ТипЗнч(ВладелецОбработки) = Тип("СправочникСсылка.Мероприятия") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецОбработки, "ВидМероприятия");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Выполняет процедуры записи действия.
//
// Параметры:
//	Обработка - СправочникОбъект.ОбработкиОбъектов - Обработка, которую необходимо записать.
//	Отказ - Булево - Признак отказа от записи.
//
Процедура ЗаписатьОбработку(Обработка, Отказ) Экспорт
	
	Если ОбработкиОбъектовХолдингСервер.ДобавитьЗаданиеОбновитьОбработкуОбъекта(Обработка) Тогда
		Возврат;
	КонецЕсли;
	
	Обработка.ЗаписатьОбъект();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры - Структура - Структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ПредупреждатьПриЗащитеУчастника",
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиБольшеНеПоказывать",
			"ПоказыватьПредупреждениеПриУстановкеЗащитыУчастникаДействия", Истина));
	
КонецПроцедуры

Функция ЕстьДругиеАктивныеОбработки(Владелец, Обработка)
	
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбработкиОбъектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбработкиОбъектов КАК ОбработкиОбъектов
		|ГДЕ
		|	ОбработкиОбъектов.Владелец = &Владелец
		|	И ОбработкиОбъектов.Ссылка <> &Обработка
		|	И ОбработкиОбъектов.ПомещенаВИсторию = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Обработка", Обработка);
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	 
КонецФункции	

Процедура ПроверитьУсловия(Предмет)
	
	Настройка = Справочники.НастройкиОбработкиВидовОбъектов.НастройкаОбработкиДляОбъекта(Предмет);
	
	Если Не ЗначениеЗаполнено(Настройка) Тогда	
		Возврат;
	КонецЕсли;
	
	РеквНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка, 
		"УсловияЗапуска");

	УсловияЗапуска = РеквНастройки.УсловияЗапуска.Выгрузить();
	
	// тут проверим условия, потом выполним запуск.
	
	Если УсловияЗапуска.Количество() <> 0 Тогда
				
		МассивОшибок = ОбработкиОбъектовВызовСервера.ОшибкиПроверкиУсловийЗапуска(
			Предмет, УсловияЗапуска);
			
		Если МассивОшибок.Количество() <> 0 Тогда
			
			ОписаниеУведомления = СтрСоединить(МассивОшибок, Символы.ПС);
			
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				ОписаниеУведомления = НСтр("ru = 'Документ не может быть запущен в обработку: '")
				 + Строка(Предмет) + Символы.ПС + Символы.ПС + ОписаниеУведомления;
			ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				ОписаниеУведомления = НСтр("ru = 'Мероприятие не может быть запущено в обработку: '")
				 + Строка(Предмет) + Символы.ПС + Символы.ПС + ОписаниеУведомления;
			Иначе
				 ВызватьИсключение СтрШаблон(
				 	НСтр("ru = 'Неизвестный тип предмета обработки %1 (%2).'"),
				 	Предмет,
				 	ТипЗнч(Предмет));
			КонецЕсли;
			
			ВызватьИсключение ОписаниеУведомления; 
			
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры
	
// Останавливает или продолжает обработку объекта.
// Процедура приводит к перезаписи обработки документов.
//
Процедура ОстановитьПродолжитьОбработку(Знач Обработка, СостояниеОбработки) Экспорт
	
	Если (ТипЗнч(Обработка) <> Тип("СправочникСсылка.ОбработкиОбъектов"))
		Или Не ЗначениеЗаполнено(Обработка) Тогда
	
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		// Помещаем в историю обработку документа.
		ЗаблокироватьДанныеДляРедактирования(Обработка);
		ОбработкаОбъект = Обработка.ПолучитьОбъект();
		ОбработкаОбъект.Состояние = СостояниеОбработки;
		
		ОбработкаОбъект.Записать();
		
		// Меняем состояние ее активных\остановленных действий.
		Если СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
			ДействияОбработкиССостояниями = РегистрыСведений.ДействияОбработкиОбъектов.ДействияОбработкиССостояниями(Обработка,
				Перечисления.СостоянияВыполненияДействий.Остановлено);
			НовоеСостояние = Перечисления.СостоянияВыполненияДействий.Выполняется;
		Иначе
			ДействияОбработкиССостояниями = РегистрыСведений.ДействияОбработкиОбъектов.ДействияОбработкиССостояниями(Обработка,
				Перечисления.СостоянияВыполненияДействий.Выполняется);
			НовоеСостояние = Перечисления.СостоянияВыполненияДействий.Остановлено;
		КонецЕсли;
		
		Для Каждого ДействиеОбработки Из ДействияОбработкиССостояниями Цикл	
			ПараметрыСостояния = ДействияСервер.СтруктураПараметровИзмененияДанныхДействия();
			ЗаполнитьЗначенияСвойств(ПараметрыСостояния, ДействиеОбработки);
			РегистрыСведений.СостоянияДействий.УстановитьСостояние(ДействиеОбработки.Действие, 
				НовоеСостояние, ПараметрыСостояния);
		КонецЦикла;
		
		МассивДействий = ДействияОбработкиССостояниями.ВыгрузитьКолонку("Действие");
		РаботаСВнешнимПодписанием.ОбработатьОстановкуПродолжениеВыполненияДействий(МассивДействий, СостояниеОбработки);
		
		УстановитьПривилегированныйРежим(Ложь);

		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = Обработка;
		
		Если СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПродолжениеОбработки;
			Событие.Описание = НСтр("ru = 'Продолжение обработки объекта'");
		Иначе
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ОстановкаОбработки;
			Событие.Описание = НСтр("ru = 'Остановка обработки объекта'");
		КонецЕсли;
		
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
		
		ВладелецОбъект = ОбработкаОбъект.Владелец.ПолучитьОбъект();
		ВладелецОбъект.ДополнительныеСвойства.Вставить("ИсключитьТекущийУзелИС", Ложь);
		ОбработкаЗапросовXDTOОбмен.ОбменСИнтегрированнымиСистемамиПередЗаписью(
			ВладелецОбъект,
			Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура КонтрольОбработокНаПаузе() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.КонтрольОбработокНаПаузе);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбработкиОбъектов.Ссылка,
		|	ОбработкиОбъектов.Владелец,
		|	ОбработкиОбъектов.Владелец.Подготовил КАК Подготовил,
		|	ОбработкиОбъектов.Владелец.Ответственный КАК Ответственный
		|ИЗ
		|	Справочник.ОбработкиОбъектов КАК ОбработкиОбъектов
		|ГДЕ
		|	ОбработкиОбъектов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиОбъектов.Остановлена)");
	
	Запрос.Текст =
		Запрос.Текст + Символы.ПС + "	И ОбработкиОбъектов.УзелОбработки = &УзелОбработки";
	
	Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
	
	ДанныеДляУведомления = Новый Соответствие; // Ключ - Пользователь, значение -массив документов/мероприятий.
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		КогоУведомлять = Выборка.Подготовил; 
		Если ЗначениеЗаполнено(Выборка.Ответственный) Тогда
			КогоУведомлять = Выборка.Ответственный;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(КогоУведомлять) Тогда
			Продолжить;
		КонецЕсли;
			
		Действует = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КогоУведомлять, "Действует");
		Если Действует = Ложь Тогда
			КогоУведомлять = Сотрудники.БлижайшийРуководитель(КогоУведомлять);
		КонецЕсли;		
		
		КогоУведомлятьПользователь = Сотрудники.ПользовательСотрудника(КогоУведомлять);
		
		Если Не ЗначениеЗаполнено(КогоУведомлятьПользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредметОбработки = Выборка.Владелец;
		
		МассивОбъектов = ДанныеДляУведомления.Получить(КогоУведомлятьПользователь);
		Если МассивОбъектов = Неопределено Тогда
			МассивОбъектов = Новый Массив; 
			ДанныеДляУведомления[КогоУведомлятьПользователь] = МассивОбъектов;
		КонецЕсли;	
		
		// в днях
		СрокУведомления = РегистрыСведений.НастройкиУведомлений.ПолучитьСрок(
			КогоУведомлятьПользователь, Перечисления.СобытияУведомлений.ОбработкиНаПаузе);
			
		НадоУведомлять = Ложь;
		ДатаОтсечения = ТекущаяДатаСеанса() - СрокУведомления * 86400;
		
		ДатаОбработки = РегистрыСведений.ОбработанныеУведомления.ДатаОбработки(
			Перечисления.СобытияУведомлений.ОбработкиНаПаузе, 
			КогоУведомлятьПользователь, 
			КогоУведомлятьПользователь);
			
		Если ДатаОбработки = Дата(1, 1, 1) Тогда // еще ни разу не уведомляли
			НадоУведомлять = Истина;
		ИначеЕсли ДатаОбработки < ДатаОтсечения Тогда // уведомляли ранее, но прошло уже более например 3 дней
			НадоУведомлять = Истина;
		КонецЕсли;
			 		
		Если НадоУведомлять Тогда
			
			МассивОбъектов.Добавить(ПредметОбработки);
			
		КонецЕсли;		 		
		
	КонецЦикла;		
	
	Для Каждого КлючИЗначение Из ДанныеДляУведомления Цикл
		
		КогоУведомлятьПользователь = КлючИЗначение.Ключ; 
		МассивОбъектов = КлючИЗначение.Значение;
		
		Если МассивОбъектов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьДокументы = Ложь;
		ЕстьМероприятия = Ложь;
		Для Каждого Документ Из МассивОбъектов Цикл
			
			Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда
				ЕстьДокументы = Истина;
			КонецЕсли;

			Если ДелопроизводствоКлиентСервер.ЭтоМероприятие(Документ) Тогда
				ЕстьМероприятия = Истина;
			КонецЕсли;
				
		КонецЦикла;	
			
		СводкаПоДокументам = "";
		
		КодЯзыкаПользователя = РаботаСУведомлениями.КодЯзыка(КогоУведомлятьПользователь);
		КоличествоВсегоОбъектов = МассивОбъектов.Количество();
		
		Если КоличествоВсегоОбъектов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеДокументов = МассивОбъектов;

		СсылкиНаДокументы = "";
		Для Каждого Документ Из НайденныеДокументов Цикл
			СсылкиНаДокументы = СсылкиНаДокументы + "- "
				+ РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Документ) + Символы.ПС;
		КонецЦикла;
		
		ШаблонТекста = "";
		
		Если КоличествоВсегоОбъектов > 1 Тогда
			
			СтрокаОбработок = 
				СтрокаСЧислом(
				НСтр("ru = ';%1 обработка;;%1 обработки;%1 обработок;%1 обработки'", КодЯзыкаПользователя),
				КоличествоВсегоОбъектов,
				ВидЧисловогоЗначения.Количественное);
			
			ШаблонТекста = НСтр("ru = 'Вы поставили %1 на паузу.
				|Возможно, пора их продолжить.
				|
				|%2'", КодЯзыкаПользователя);
			
			СводкаПоДокументам = СтрШаблон(
				ШаблонТекста, 
				СтрокаОбработок,
				СсылкиНаДокументы);
			
			
		ИначеЕсли КоличествоВсегоОбъектов = 1 Тогда
				
				
			Если ЕстьДокументы И Не ЕстьМероприятия Тогда
				
				ШаблонТекста = НСтр("ru = 'Вы поставили обработку документа на паузу
				|Возможно, ее пора продолжить.
				|
				|%1'");
					
				СводкаПоДокументам = СтрШаблон(
					ШаблонТекста, 
					СсылкиНаДокументы);
				
			ИначеЕсли Не ЕстьДокументы И ЕстьМероприятия Тогда
				
				ШаблонТекста = НСтр("ru = 'Вы поставили обработку мероприятия на паузу
				|Возможно, ее пора продолжить.
				|
				|%1'");
				
				СводкаПоДокументам = СтрШаблон(
					ШаблонТекста, 
					СсылкиНаДокументы);
				
			КонецЕсли;	

		КонецЕсли;
		
		Если Не КОДСервер.ЭтоОсновнойУзелПользователя(КогоУведомлятьПользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			КогоУведомлятьПользователь, Перечисления.СобытияУведомлений.ОбработкиНаПаузе, 
			Неопределено, Неопределено,
			СводкаПоДокументам, Ложь);

		РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.ОбработкиНаПаузе, 
			КогоУведомлятьПользователь, КогоУведомлятьПользователь);
		
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеОбработки

// Возвращает действия до и после целевого.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//  Обработка - СправочникСсылка.ОбработкиОбъектов.
//  ДействияОбработки - Массив из ОпределяемыйТип.Действия.
//
// Возвращаемое значение:
//  Структура:
//   * ДействияДо - Массив из ОпределяемыйТип.Действия.
//   * ДействияПосле - Массив из ОпределяемыйТип.Действия.
//
Функция ДействияДоИПосле(Действие, Обработка, ДействияОбработки)
	
	Результат = Новый Структура;
	Результат.Вставить("ДействияДо", Новый Массив);
	Результат.Вставить("ДействияПосле", Новый Массив);
	
	Если РаботаСПроцессамиПоОбработкамОбъектовСобытия.ОбработатьПолучениеДействийДоИПосле(
		Действие, Обработка, ДействияОбработки, Результат) Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	// Стандартный способ получения действий до и после.
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
