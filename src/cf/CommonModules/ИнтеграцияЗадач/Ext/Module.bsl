////////////////////////////////////////////////////////////////////////////////
// Интеграция с подсистемой "Задачи" (сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует внешние данные этапов.
// 
// Параметры:
//  ИсточникЗадачи - ОпределяемыйТип.ИсточникЗадач.
//  РежимЭтапов - Строка - Режим этапов стандартной логики задач - "БезЭтапов", "ВидыУчастников".
// 
// Возвращаемое значение:
//  Структура - Внешние данные этапов.
//   * Этапы - Массив из Структура - См. РаботаСЗадачамиКлиентСервер.НовыйДанныеЭтапа().
//   * ЭтапыУчастников - Соответствие - Участники по этапам.
//      ** Ключ - УникальныйИдентификатор - Участник.
//      ** Значение - УникальныйИдентификатор - Этап.
// 
Функция ВнешниеДанныеЭтапов(ИсточникЗадачи, РежимЭтапов) Экспорт
	
	ВнешниеДанныеЭтапов = Новый Структура("Этапы, ЭтапыУчастников");
	ВнешниеДанныеЭтапов.Этапы = Новый Массив;
	ВнешниеДанныеЭтапов.ЭтапыУчастников = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ИсточникЗадачи) Тогда
		Возврат ВнешниеДанныеЭтапов;
	КонецЕсли;
	
	ИсточникПоддерживаетЭтапы =
		ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Согласование")
		Или ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Подписание");
	Если Не ИсточникПоддерживаетЭтапы Тогда
		Возврат ВнешниеДанныеЭтапов;
	КонецЕсли;
	
	ДействиеПоПроцессу = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(ИсточникЗадачи);
	Если Не ЗначениеЗаполнено(ДействиеПоПроцессу) Тогда
		Возврат ВнешниеДанныеЭтапов;
	КонецЕсли;
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДействиеПоПроцессу,
		"Участники, Этапы");
	Участники = РеквизитыДействия.Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки Возр");
	
	Этапы = РеквизитыДействия.Этапы.Выгрузить();
	Этапы.Сортировать("НомерСтроки Возр");
	
	Если Этапы.Количество() = 0 Тогда
		Возврат ВнешниеДанныеЭтапов;
	КонецЕсли;
	
	ИнициализированныеЭтапы = Новый Соответствие;
	Для Каждого СтрокаЭтапа Из Этапы Цикл
		
		ДанныеЭтапа = РаботаСЗадачамиКлиентСервер.НовыйДанныеЭтапа();
		ДанныеЭтапа.Этап = СтрокаЭтапа.Идентификатор;
		ДанныеЭтапа.Представление = СтрокаЭтапа.НаименованиеЭтапа;
		ДанныеЭтапа.ЭтоИсполнитель = Истина;
		
		ВнешниеДанныеЭтапов.Этапы.Добавить(ДанныеЭтапа);
		
		ИнициализированныеЭтапы[СтрокаЭтапа.Идентификатор] = Истина;
		
	КонецЦикла;
	
	ВостребованныеЭтапы = Новый Соответствие;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		// Не отображаем обрабатывающих результат, если их нет в стандартной логике.
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ИдентификаторЭтапа)
			И РежимЭтапов = "БезЭтапов" Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторЭтапа = ?(ЗначениеЗаполнено(СтрокаУчастника.ИдентификаторЭтапа),
			СтрокаУчастника.ИдентификаторЭтапа,
			СтрокаУчастника.Идентификатор);
		ВостребованныеЭтапы[ИдентификаторЭтапа] = Истина;
		
		Если ИнициализированныеЭтапы[ИдентификаторЭтапа] = Неопределено Тогда
			
			ДанныеЭтапа = РаботаСЗадачамиКлиентСервер.НовыйДанныеЭтапа();
			ДанныеЭтапа.Этап = ИдентификаторЭтапа;
			ДанныеЭтапа.Представление = Строка(СтрокаУчастника.ФункцияУчастника);
			ДанныеЭтапа.ЭтоИсполнитель = Ложь;
			
			ВнешниеДанныеЭтапов.Этапы.Добавить(ДанныеЭтапа);
			
			ИнициализированныеЭтапы[ИдентификаторЭтапа] = Истина;
			
		КонецЕсли;
		
		ВнешниеДанныеЭтапов.ЭтапыУчастников[СтрокаУчастника.Идентификатор] =
			ИдентификаторЭтапа;
	
	КонецЦикла;
	
	КоличествоЭлементов = ВнешниеДанныеЭтапов.Этапы.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ДанныеЭтапа = ВнешниеДанныеЭтапов.Этапы[ОбратныйИндекс];
		Если ВостребованныеЭтапы[ДанныеЭтапа.Этап] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ВнешниеДанныеЭтапов.Этапы.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	Возврат ВнешниеДанныеЭтапов;
	
КонецФункции

// Возвращает данные текущего цикла.
//
// Параметры:
//  ИсточникЗадачи - ОпределяемыйТип.ИсточникЗадач.
// 
// Возвращаемое значение:
//  Соответствие, Неопределено - Данные текущего цикла.
//
Функция ДанныеТекущегоЦикла(ИсточникЗадачи) Экспорт
	
	ДанныеТекущегоЦикла = Неопределено;
	Если Не ЗначениеЗаполнено(ИсточникЗадачи) Тогда
		Возврат ДанныеТекущегоЦикла;
	КонецЕсли;
	
	ДанныеТекущегоЦикла = Новый Соответствие;
	
	Если Не ОбщегоНазначения.СсылкаСуществует(ИсточникЗадачи) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Битая ссылка на процесс %1.'"),
			ИсточникЗадачи);
	КонецЕсли;
	
	Если ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"НомерИтерации, ИдентификаторПроверяющего, РезультатыИсполнения, РезультатыПроверки");
		
		РезультатыИсполнения = РеквизитыПроцесса.РезультатыИсполнения.Выгрузить();
		РезультатыИсполнения.Сортировать("НомерСтроки Возр");
		
		РезультатыПроверки = РеквизитыПроцесса.РезультатыПроверки.Выгрузить();
		РезультатыПроверки.Сортировать("НомерСтроки Возр");
		
		Для Каждого СтрокаРезультата Из РезультатыИсполнения Цикл
			
			Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТекущегоЦикла[СтрокаРезультата.ИдентификаторИсполнителя] = СтрокаРезультата.ЗадачаИсполнителя;
			
		КонецЦикла;
		
		Для Каждого СтрокаРезультата Из РезультатыПроверки Цикл
			
			Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТекущегоЦикла[РеквизитыПроцесса.ИдентификаторПроверяющего] = СтрокаРезультата.ЗадачаПроверяющего;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Подписание") Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"НомерИтерации, Участники, РезультатыПодписания, РезультатыОбработок");
		
		Участники = РеквизитыПроцесса.Участники.Выгрузить();
		Участники.Сортировать("НомерСтроки Возр");
		
		РезультатыПодписания = РеквизитыПроцесса.РезультатыПодписания.Выгрузить();
		РезультатыПодписания.Сортировать("НомерСтроки Возр");
		
		РезультатыОбработок = РеквизитыПроцесса.РезультатыОбработок.Выгрузить();
		РезультатыОбработок.Сортировать("НомерСтроки Возр");
		
		Для Каждого СтрокаРезультата Из РезультатыПодписания Цикл
			
			Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТекущегоЦикла[СтрокаРезультата.Идентификатор] = СтрокаРезультата.ЗадачаПроцесса;
			
		КонецЦикла;
		
		Для Каждого СтрокаУчастника Из Участники Цикл
			
			Если СтрокаУчастника.ТочкаМаршрута <> БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаРезультата Из РезультатыОбработок Цикл
				
				Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеТекущегоЦикла[СтрокаУчастника.Идентификатор] = СтрокаРезультата.ЗадачаПроцесса;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"НомерИтерации, ИдентификаторОбрабатывающегоРезультат, Исполнители, РезультатыПриглашения, РезультатыОзнакомлений");
		
		Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
		Исполнители.Сортировать("НомерСтроки Возр");
		
		РезультатыПриглашения = РеквизитыПроцесса.РезультатыПриглашения.Выгрузить();
		РезультатыПриглашения.Сортировать("НомерСтроки Возр");
		
		РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
		РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
		
		Для Каждого СтрокаИсполнителя Из Исполнители Цикл
			
			Для Каждого СтрокаРезультата Из РезультатыПриглашения Цикл
				
				Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации
					Или СтрокаРезультата.ЗадачаИсполнителя <> СтрокаИсполнителя.ЗадачаИсполнителя Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеТекущегоЦикла[СтрокаИсполнителя.ИдентификаторИсполнителя] = СтрокаРезультата.ЗадачаИсполнителя;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтрокаРезультата Из РезультатыОзнакомлений Цикл
			
			Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТекущегоЦикла[РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат] = СтрокаРезультата.ЗадачаИсполнителя;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"НомерИтерации, ИдентификаторИсполнителя, ИдентификаторОбрабатывающегоРезультат, РезультатыРегистрации, РезультатыОзнакомлений");
		
		РезультатыРегистрации = РеквизитыПроцесса.РезультатыРегистрации.Выгрузить();
		РезультатыРегистрации.Сортировать("НомерСтроки Возр");
		
		РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
		РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
		
		Для Каждого СтрокаРезультата Из РезультатыРегистрации Цикл
			
			Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТекущегоЦикла[РеквизитыПроцесса.ИдентификаторИсполнителя] = СтрокаРезультата.ЗадачаИсполнителя;
			
		КонецЦикла;
		
		Для Каждого СтрокаРезультата Из РезультатыОзнакомлений Цикл
			
			Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТекущегоЦикла[РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат] = СтрокаРезультата.ЗадачаИсполнителя;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"НомерИтерации, ИдентификаторОбрабатывающегоРезультат, Исполнители, РезультатыСогласования, РезультатыОзнакомлений");
		
		Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
		Исполнители.Сортировать("НомерСтроки Возр");
		
		РезультатыСогласования = РеквизитыПроцесса.РезультатыСогласования.Выгрузить();
		РезультатыСогласования.Сортировать("НомерСтроки Возр");
		
		РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
		РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
		
		Для Каждого СтрокаУчастника Из Исполнители Цикл
			
			Для Каждого СтрокаРезультата Из РезультатыСогласования Цикл
				
				Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации
					Или СтрокаРезультата.ЗадачаИсполнителя <> СтрокаУчастника.ЗадачаИсполнителя Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеТекущегоЦикла[СтрокаУчастника.ИдентификаторИсполнителя] = СтрокаРезультата.ЗадачаИсполнителя;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтрокаРезультата Из РезультатыОзнакомлений Цикл
			
			Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТекущегоЦикла[РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат] = СтрокаРезультата.ЗадачаИсполнителя;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"НомерИтерации, ИдентификаторИсполнителя, ИдентификаторОбрабатывающегоРезультат, РезультатыУтверждения, РезультатыОзнакомлений");
		
		РезультатыУтверждения = РеквизитыПроцесса.РезультатыУтверждения.Выгрузить();
		РезультатыУтверждения.Сортировать("НомерСтроки Возр");
		
		РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
		РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
		
		Для Каждого СтрокаРезультата Из РезультатыУтверждения Цикл
			
			Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТекущегоЦикла[РеквизитыПроцесса.ИдентификаторИсполнителя] = СтрокаРезультата.ЗадачаИсполнителя;
			
		КонецЦикла;
		
		Для Каждого СтрокаРезультата Из РезультатыОзнакомлений Цикл
			
			Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТекущегоЦикла[РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат] = СтрокаРезультата.ЗадачаИсполнителя;
			
		КонецЦикла;
		
	Иначе
		
		ДанныеТекущегоЦикла = Неопределено;
		
	КонецЕсли;
	
	Возврат ДанныеТекущегоЦикла;
	
КонецФункции

// Возвращает действия задач по подзадаче
//
// Параметры:
//  Подзадача - ДокументСсылка.Задача - Задача, по которой необходимо найти действия задач.
// 
// Возвращаемое значение:
//  ТаблицаЗначений. Поля:  Участник, Действие, СостояниеУчастникаЗадачи
//
Функция ДействияЗадачПоПодзадаче(Подзадача) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗадачаУчастники.Участник КАК Участник,
		|	ЗадачаУчастники.ДействиеУчастника КАК Действие,
		|	ЗадачаУчастники.ДействиеУчастника.СостояниеУчастникаЗадачи КАК СостояниеУчастникаЗадачи,
		|	ЗадачаУчастники.ВидУчастника КАК ВидУчастника,
		|	ЗадачаУчастники.ДействиеУчастника.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	ЗадачаУчастники.ДействиеУчастника.ЕстьПриложения КАК ЕстьПриложения,
		|	ЗадачаУчастники.ДействиеУчастника.РезультатДействия КАК РезультатДействия,
		|	ЗадачаУчастники.ДействиеУчастника.РезультатДействияТекстом КАК РезультатДействияТекстом,
		|	ЗадачаУчастники.ДействиеУчастника.ЕстьОсобыйСрок КАК ЕстьОсобыйСрок,
		|	ЗадачаУчастники.ДействиеУчастника.ОсобыйСрок КАК ОсобыйСрок,
		|	ЗадачаУчастники.ДействиеУчастника.ДатаВыполнения КАК ДатаВыполнения
		|ИЗ
		|	Документ.Задача.Участники КАК ЗадачаУчастники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|		ПО (ПроцессыДействий.Процесс = ЗадачаУчастники.Ссылка.Источник)
		|ГДЕ
		|	ЗадачаУчастники.Ссылка = &Подзадача
		|	И ПроцессыДействий.Действие ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаУчастники.ДействиеУчастника.Дата");
		
	Запрос.УстановитьПараметр("Подзадача", Подзадача);
	Запрос.УстановитьПараметр("ПустойИдентификатор", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
			
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Определяет, доступна ли отмена выполнения.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - текущее действие задачи.
//                  - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   Булево, Неопределено - Булево, если определена доступность отмены выполнения.
//
Функция ДоступнаОтменаВыполнения(ДействиеЗадачи, КешДанных = Неопределено) Экспорт
	
	ДоступнаОтменаВыполнения = Неопределено;
	
	Если ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		РеквизитыДействия = ДействиеЗадачи;
	Иначе
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи,
			"Источник");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыДействия.Источник) Тогда
		Возврат ДоступнаОтменаВыполнения;
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыДействия.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачуМожноОтменить = БизнесПроцессыИЗадачиВызовСервера.ЗадачуМожноОтменить(
			РеквизитыДействия.Источник,
			КешДанных);
		ДоступнаОтменаВыполнения = Не ЗадачуМожноОтменить.Отказ;
	Иначе
		ДоступнаОтменаВыполнения = Ложь;
	КонецЕсли;
	
	Возврат ДоступнаОтменаВыполнения;
	
КонецФункции

// Обновляет задачу по источнику.
// 
// Параметры:
//  ИсточникЗадачи - ЛюбаяСсылка - Источник задачи.          
//  НеПисатьВИсторию - Булево - принудительно ставим "не пишем в историю"
//  НеОбновлятьДействияЗадачи - Булево - если Истина, пишем только Задачу, но не ДействиеЗадачи
//  АвторИзменения - СправочникСсылка.Сотрудники - Инициатор изменения задачи
// 
// Возвращаемое значение:
//  Булево - Задача была обновлена.
//
Функция ОбновитьЗадачуПоИсточнику(ИсточникЗадачи, НеПисатьВИсторию = Ложь, НеОбновлятьДействияЗадачи = Ложь,
		АвторИзменения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ИсточникЗадачи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РаботаСЗадачами.ЭтоИсточникЗадач(ИсточникЗадачи) Тогда
		Возврат Ложь;
	Конецесли;
	
	РеквизитыИсточника = РеквизитыИсточника(ИсточникЗадачи);
	Если РеквизитыИсточника.ПометкаУдаления = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		
		// Сначала пытаемся заблокировать по задаче, если она есть, на случай блокировки задачи другим потоком.
		Задача = Документы.Задача.НайтиПоИсточнику(ИсточникЗадачи);
		Если ЗначениеЗаполнено(Задача) Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.Задача");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
			Блокировка.Заблокировать();
			
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ИсточникЗадачи)).ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ИсточникЗадачи);
		Блокировка.Заблокировать();
		
		Если Не ЗначениеЗаполнено(Задача) Тогда
			
			// Если ранее по задаче не блокировали, то после блокировка процесса попробуем найти ещё раз,
			// на случай если другой поток с блокировкой по процессу её уже создал.
			Задача = Документы.Задача.НайтиПоИсточнику(ИсточникЗадачи);
			Если ЗначениеЗаполнено(Задача) Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.Задача");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
				Блокировка.Заблокировать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Контекст изменения задачи.
		КонтекстИзмененияЗадачи = Неопределено;
		
		Если Не РеквизитыИсточника.ПометкаУдаления Тогда
			
			ЭтоНовый = Не ЗначениеЗаполнено(Задача);
			
			// Источник задача не удален - обновим задачу по нему
			ЗадачаОбъект = ?(ЭтоНовый,
				Документы.Задача.СоздатьДокумент(),
				Задача.ПолучитьОбъект());
			
			СтарыйВидСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(
				ЗадачаОбъект.СостояниеЗадачи);
			
			СтарыеДанные = ОбщегоНазначенияДокументооборот.ДанныеОбъекта(ЗадачаОбъект);
			ЗадачаОбъект.ПометкаУдаления = Ложь;
			ЗадачаОбъект.Заполнить(ИсточникЗадачи);
			НовыеДанные = ОбщегоНазначенияДокументооборот.ДанныеОбъекта(ЗадачаОбъект);
			
			ИзмененыДанные = ЭтоНовый
				Или Не ОбщегоНазначенияДокументооборот.ДанныеСовпадают(СтарыеДанные, НовыеДанные);
			
			Если ИзмененыДанные Тогда
				
				ЗадачаОбъект.ДополнительныеСвойства.Вставить("ОбновлениеПоИсточнику", Истина);
				ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				ЗадачаОбъект.ДополнительныеСвойства.Свойство("КонтекстИзмененияРеквизитов",
					КонтекстИзмененияЗадачи);
				
			КонецЕсли;
			
			НовыйВидСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(ЗадачаОбъект.СостояниеЗадачи);
			
			ИзменилсяВидСостояния = СтарыйВидСостояния <> НовыйВидСостояния;
			
			Если Не ЭтоНовый
				И ИзменилсяВидСостояния
				И Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(НовыйВидСостояния) Тогда
				
				ОбработанныеПредметы = Новый Соответствие;
				ПодзадачиКОтмене = РаботаСЗадачами.ПодзадачиКОтмене(ЗадачаОбъект.Ссылка);
				Для Каждого Подзадача Из ПодзадачиКОтмене Цикл
					
					РаботаСЗадачами.ОбработатьОтмену(
						Подзадача,
						Подзадача,
						ЗадачаОбъект.ПричинаОтмены,
						ОбработанныеПредметы);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыИсточника.ДатаНачала) Тогда
				
				РегистрыСведений.ИсторияЗадач.Добавить(
					ЗадачаОбъект.Ссылка,
					Документы.ДействиеЗадачи.ПустаяСсылка(),
					РеквизитыИсточника.ДатаНачала,
					Справочники.СобытияЗадач.НаправленаНаИсполнение,
					Неопределено,
					РеквизитыИсточника.Автор);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыИсточника.ДатаЗавершения) Тогда
				
				РегистрыСведений.ИсторияЗадач.Добавить(
					ЗадачаОбъект.Ссылка,
					Документы.ДействиеЗадачи.ПустаяСсылка(),
					РеквизитыИсточника.ДатаЗавершения,
					Справочники.СобытияЗадач.Закрыта,
					Неопределено,
					Неопределено);
				
			КонецЕсли;
			
		ИначеЕсли РеквизитыИсточника.ПометкаУдаления И ЗначениеЗаполнено(Задача) Тогда
			
			// Источник задачи удален, по нему есть задачи - необходимо удалить её.
			ЗадачаОбъект = Задача.ПолучитьОбъект(); 
			Если НеОбновлятьДействияЗадачи = Истина Тогда
				ЗадачаОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьДействияЗадачи", НеОбновлятьДействияЗадачи);
			КонецЕсли;	
			ЗадачаОбъект.УстановитьПометкуУдаления(Истина);
			
		ИначеЕсли РеквизитыИсточника.ПометкаУдаления И Не ЗначениеЗаполнено(Задача) Тогда
			
			// Источнику задачи удален, задач по нему нет, обновление не требуется.
			
		КонецЕсли;
		
		ВсеКарточкиКонтроляПоПредмету = Контроль.ВсеКарточкиКонтроляПоПредмету(ИсточникЗадачи);
		РеквизитыКонтролей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ВсеКарточкиКонтроляПоПредмету,
			"Предмет, СрокИсполнения");
		Для Каждого КонтрольнаяКарточка Из ВсеКарточкиКонтроляПоПредмету Цикл
			
			РеквизитыКонтроля = РеквизитыКонтролей[КонтрольнаяКарточка];
			Справочники.Контроль.УстановитьСостояниеКонтроляВКеше(
				РеквизитыКонтроля.Предмет,
				РеквизитыКонтроля.СрокИсполнения);
			
		КонецЦикла;
		
		Если Не ЭтоМассовыйИсточникЗадач(ИсточникЗадачи) И Не НеОбновлятьДействияЗадачи Тогда
			ОбновитьДействияЗадачиПоПроцессуОтложенно(ИсточникЗадачи, НеПисатьВИсторию, АвторИзменения);
		КонецЕсли;
		
		Если КонтекстИзмененияЗадачи <> Неопределено И НеПисатьВИсторию = Истина Тогда
			КонтекстИзмененияЗадачи.ИзмененныеРеквизиты.Очистить();
		КонецЕсли;	
		Если КонтекстИзмененияЗадачи<>Неопределено И АвторИзменения <> Неопределено Тогда
			КонтекстИзмененияЗадачи.Автор = АвторИзменения;
		КонецЕсли;
		ОбработатьИзмененияРеквизитовПриОбновленииПоИсточнику(КонтекстИзмененияЗадачи);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Обновляет информацию о состояния контроля в задаче.
//
// Параметры:
//  ПредметКонтроля - ЛюбаяСсылка.
//
Процедура ОбновитьСостояниеКонтроля(ПредметКонтроля) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ПредметКонтроля) = Тип("ДокументСсылка.Задача") Тогда
		
		РегистрыСведений.РеестрЗадачПоАвторам.ОбновитьПоЗадаче(ПредметКонтроля);
		
	ИначеЕсли ТипЗнч(ПредметКонтроля) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(
			ПредметКонтроля);
		
	ИначеЕсли РаботаСЗадачами.ЭтоИсточникЗадач(ПредметКонтроля) Тогда
		
		ЗадачаПоИсточнику = Документы.Задача.НайтиПоИсточнику(ПредметКонтроля);
		Если ЗначениеЗаполнено(ЗадачаПоИсточнику) Тогда
			РегистрыСведений.РеестрЗадачПоАвторам.ОбновитьПоЗадаче(ЗадачаПоИсточнику);
		КонецЕсли;
		
	ИначеЕсли РаботаСЗадачами.ЭтоИсточникДействийЗадач(ПредметКонтроля) Тогда
		
		ДействиеЗадачиПоИсточнику = Документы.ДействиеЗадачи.НайтиПоИсточнику(ПредметКонтроля);
		Если ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
			РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(
				ДействиеЗадачиПоИсточнику);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Особые участники для соисполнителей.
// 
// Параметры:
//  РежимОтображения - Строка - Режим отображения: "Автор", "Исполнитель", "Проверяющий".
//  ИсточникЗадачи - ОпределяемыйТип.ИсточникЗадач.
// 
// Возвращаемое значение:
//  Структура, Неопределено - Особые данные для соисполнителей.
//   * Участники - Массив - Особые участники для соисполнителей.
//   * ДанныеТекущегоЦикла - Соответствие - Данные текущего цикла.
//   * ДанныеПодчиненныхУчастников - Соответствие - Данные подчиненных участников.
//  
Функция ОсобыеУчастникиДляСоисполнителей(РежимОтображения, ИсточникЗадачи) Экспорт
	
	ДанныеОсобыхУчастников = Неопределено;
	
	Если РежимОтображения <> "Исполнитель"
		Или Не ЗначениеЗаполнено(ИсточникЗадачи) Тогда
		Возврат ДанныеОсобыхУчастников;
	КонецЕсли;
	
	ИсточникПоддерживаетОсобыхУчастников =
		ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Исполнение")
		Или ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Рассмотрение");
	Если Не ИсточникПоддерживаетОсобыхУчастников Тогда
		Возврат ДанныеОсобыхУчастников;
	КонецЕсли;
	
	ДействиеПоПроцессу = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(ИсточникЗадачи);
	Если Не ЗначениеЗаполнено(ДействиеПоПроцессу) Тогда
		Возврат ДанныеОсобыхУчастников;
	КонецЕсли;
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДействиеПоПроцессу,
		"Участники, ПоПунктам");
	УчастникиДействия = РеквизитыДействия.Участники.Выгрузить();
	УчастникиДействия.Сортировать("НомерСтроки Возр");
	
	Если РеквизитыДействия.ПоПунктам Тогда
		ПроцессыДействия = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсточникЗадачи);
	Иначе
		ПроцессыДействия = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(ДействиеПоПроцессу);
	КонецЕсли;
	
	ЗадачиПоПроцессам = Документы.Задача.НайтиПоИсточникам(ПроцессыДействия);
	ЗадачиКОбработке = ОбщегоНазначенияДокументооборотКлиентСервер.ЗначенияСоответствия(ЗадачиПоПроцессам);
	
	ЗадачиДляПолученияРеквизитов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ЗадачиДляПолученияРеквизитов,
		ЗадачиКОбработке);
	
	РеквизитыЗадачи = Неопределено;
	КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
	КоличествоЭлементов = ЗадачиДляПолученияРеквизитов.Количество();
	
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЗадачаКОбработке = ЗадачиДляПолученияРеквизитов[ОбратныйИндекс];
		
		Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.Задача = ЗадачаКОбработке Тогда
			РеквизитыЗадачи = КэшОбластиПросмотра.ЗадачаОбъект;
			ЗадачиДляПолученияРеквизитов.Удалить(ОбратныйИндекс);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ЗадачиДляПолученияРеквизитов,
		"Участники, ВышестоящееДействие, ПометкаУдаления");
	Если РеквизитыЗадачи <> Неопределено Тогда
		РеквизитыЗадач.Вставить(РеквизитыЗадачи.Ссылка, РеквизитыЗадачи);
	КонецЕсли;
	
	ОсобыеУчастники = Неопределено;
	ДанныеПодчиненныхУчастников = Новый Соответствие;
	ИдентификаторыДействий = Новый Соответствие;
	НаборыУчастниковДляСортировки = Новый Массив;
	Для Каждого ЗадачаКОбработке Из ЗадачиКОбработке Цикл
		
		РеквизитыЗадачи = РеквизитыЗадач[ЗадачаКОбработке];
		Если РеквизитыЗадачи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие)
			Или РеквизитыЗадачи.ПометкаУдаления = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		УчастникиЗадачи = РеквизитыЗадачи.Участники.Выгрузить();
		УчастникиЗадачи.Сортировать("НомерСтроки Возр");
		
		Если ОсобыеУчастники = Неопределено Тогда
			
			ОсобыеУчастники = УчастникиЗадачи.СкопироватьКолонки();
			ОсобыеУчастники.Очистить();
			
			НаборыУчастниковДляСортировки.Добавить(ОсобыеУчастники);
			
		КонецЕсли;
		
		Для Каждого СтрокаУчастника Из УчастникиЗадачи Цикл
			
			Если СтрокаУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбрабатывающийРезолюцию Тогда
				
				СтрокаРассматривающего = УчастникиЗадачи.Найти(
					Справочники.ВидыУчастниковЗадач.Рассматривающий,
					"ВидУчастника");
				Если СтрокаРассматривающего = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДанныеПодчиненныхУчастников[СтрокаРассматривающего.ВнешнийИдентификатор] = Неопределено Тогда
					
					ДанныеПодчиненныхУчастников[СтрокаРассматривающего.ВнешнийИдентификатор] =
						УчастникиЗадачи.СкопироватьКолонки();
					
					НаборыУчастниковДляСортировки.Добавить(
						ДанныеПодчиненныхУчастников[СтрокаРассматривающего.ВнешнийИдентификатор]);
					
				КонецЕсли;
				
				ДанныеПодчиненныхУчастника =
					ДанныеПодчиненныхУчастников[СтрокаРассматривающего.ВнешнийИдентификатор];
				
				// Если участник уже исключен из действия, то не отображаем.
				СтрокаУчастникаДействия = УчастникиДействия.Найти(
					СтрокаУчастника.ВнешнийИдентификатор,
					"Идентификатор");
				Если СтрокаУчастникаДействия = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаУчастника = ДанныеПодчиненныхУчастника.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУчастника, СтрокаУчастника);
				
				// При направлении на исполнение из обработки резолюции,
				// исполнителей показываем под рассматривающим.
				ИдентификаторыДействий[СтрокаУчастника.ДействиеУчастника] =
					СтрокаРассматривающего.ВнешнийИдентификатор;
					
			Иначе
				
				// Если участник уже исключен из действия, то не отображаем.
				СтрокаУчастникаДействия = УчастникиДействия.Найти(
					СтрокаУчастника.ВнешнийИдентификатор,
					"Идентификатор");
				Если СтрокаУчастникаДействия = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаУчастника = ОсобыеУчастники.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУчастника, СтрокаУчастника);
				
				ИдентификаторыДействий[СтрокаУчастника.ДействиеУчастника] =
					СтрокаУчастника.ВнешнийИдентификатор;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОсобыеУчастники = Неопределено Тогда
		Возврат ДанныеОсобыхУчастников;
	КонецЕсли;
	
	Для Каждого ЗадачаКОбработке Из ЗадачиКОбработке Цикл
		
		РеквизитыЗадачи = РеквизитыЗадач[ЗадачаКОбработке];
		Если РеквизитыЗадачи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие)
			Или РеквизитыЗадачи.ПометкаУдаления = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		УчастникиЗадачи = РеквизитыЗадачи.Участники.Выгрузить();
		УчастникиЗадачи.Сортировать("НомерСтроки Возр");
		
		ВнешнийИдентификатор = ИдентификаторыДействий[РеквизитыЗадачи.ВышестоящееДействие];
		
		Если ДанныеПодчиненныхУчастников[ВнешнийИдентификатор] = Неопределено Тогда
			
			ДанныеПодчиненныхУчастников[ВнешнийИдентификатор] =
				УчастникиЗадачи.СкопироватьКолонки();
			
			НаборыУчастниковДляСортировки.Добавить(
				ДанныеПодчиненныхУчастников[ВнешнийИдентификатор]);
			
		КонецЕсли;
		
		ДанныеПодчиненныхУчастника = ДанныеПодчиненныхУчастников[ВнешнийИдентификатор];
		
		Для Каждого СтрокаУчастника Из УчастникиЗадачи Цикл
			
			// Если участник уже исключен из действия, то не отображаем.
			СтрокаУчастникаДействия = УчастникиДействия.Найти(
				СтрокаУчастника.ВнешнийИдентификатор,
				"Идентификатор");
			Если СтрокаУчастникаДействия = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаУчастника = ДанныеПодчиненныхУчастника.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУчастника, СтрокаУчастника);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Сортируем объединенных участников согласно действию исполнения.
	
	ИндексыВидов = Новый Соответствие;
	ИндексыВидов.Вставить(Перечисления.ФункцииУчастниковИсполнения.Рассматривающий, 0);
	ИндексыВидов.Вставить(Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат, 1);
	ИндексыВидов.Вставить(Перечисления.ФункцииУчастниковИсполнения.Исполнитель, 2);
	ИндексыВидов.Вставить(Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат, 3);
	
	Для Каждого УчастникиДляСортировки Из НаборыУчастниковДляСортировки Цикл
		
		СписокСортировки = Новый СписокЗначений;
		
		Для Каждого СтрокаУчастника Из УчастникиДляСортировки Цикл
			
			СтрокаУчастникаДействия = УчастникиДействия.Найти(
				СтрокаУчастника.ВнешнийИдентификатор,
				"Идентификатор");
			Если СтрокаУчастникаДействия = Неопределено Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не найдена строка участника %1 (%2).'"),
					СтрокаУчастника.Участник,
					СтрокаУчастника.ВнешнийИдентификатор);
			КонецЕсли;
			
			ИндексВида = ИндексыВидов[СтрокаУчастникаДействия.ФункцияУчастника];
			Если ИндексВида = Неопределено Тогда
				ИндексВида = 0;
			КонецЕсли;
			ПорядокВида = Формат(ИндексВида, "ЧЦ=6; ЧН=000000; ЧВН=; ЧГ=;");
			
			ИндексУчастника = УчастникиДействия.Индекс(СтрокаУчастникаДействия);
			Если ИндексУчастника = -1 Тогда
				ИндексУчастника = 0;
			КонецЕсли;
			ПорядокУчастника = Формат(ИндексУчастника, "ЧЦ=6; ЧН=000000; ЧВН=; ЧГ=;");
			
			ОбщийПорядок = СтрШаблон("%1/%2", ПорядокВида, ПорядокУчастника);
			
			СписокСортировки.Добавить(СтрокаУчастника, ОбщийПорядок);
			
		КонецЦикла;
		
		СписокСортировки.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		СортированныйИндексЭлемента = 0;
		Для Каждого СтрокаУчастника Из СписокСортировки.ВыгрузитьЗначения() Цикл
			
			ТекущийИндекс = УчастникиДляСортировки.Индекс(СтрокаУчастника);
			Если СортированныйИндексЭлемента <> ТекущийИндекс Тогда
				УчастникиДляСортировки.Сдвинуть(
					ТекущийИндекс,
					СортированныйИндексЭлемента - ТекущийИндекс);
			КонецЕсли;
			
			СортированныйИндексЭлемента = СортированныйИндексЭлемента + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Данные циклов.
	ДанныеТекущегоЦикла = Новый Соответствие;
	Для Каждого ПроцессДействия Из ПроцессыДействия Цикл
		
		Если ТипЗнч(ПроцессДействия) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
			
			РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПроцессДействия,
				"НомерИтерации, ИдентификаторПроверяющего, РезультатыИсполнения, РезультатыПроверки");
			
			РезультатыИсполнения = РеквизитыПроцесса.РезультатыИсполнения.Выгрузить();
			РезультатыИсполнения.Сортировать("НомерСтроки Возр");
			
			РезультатыПроверки = РеквизитыПроцесса.РезультатыПроверки.Выгрузить();
			РезультатыПроверки.Сортировать("НомерСтроки Возр");
			
			Для Каждого СтрокаРезультата Из РезультатыИсполнения Цикл
				
				Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеТекущегоЦикла[СтрокаРезультата.ИдентификаторИсполнителя] = СтрокаРезультата.ЗадачаИсполнителя;
				
			КонецЦикла;
			
			Для Каждого СтрокаРезультата Из РезультатыПроверки Цикл
				
				Если СтрокаРезультата.НомерИтерации <> РеквизитыПроцесса.НомерИтерации Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеТекущегоЦикла[РеквизитыПроцесса.ИдентификаторПроверяющего] = СтрокаРезультата.ЗадачаПроверяющего;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ПроцессДействия) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
			
			РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПроцессДействия,
				"ИдентификаторИсполнителя, ИдентификаторОбрабатывающегоРезолюцию");
			
			ЗадачаРассматривающего = РаботаСБизнесПроцессами.ПоследняяЗадачаТочкиМаршрута(
				ПроцессДействия,
				БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
			Если ЗначениеЗаполнено(ЗадачаРассматривающего) Тогда
				ДанныеТекущегоЦикла[РеквизитыПроцесса.ИдентификаторИсполнителя] = ЗадачаРассматривающего;
			КонецЕсли;
			
			ЗадачаОбрабатывающегоРезолюцию = РаботаСБизнесПроцессами.ПоследняяЗадачаТочкиМаршрута(
				ПроцессДействия,
				БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться);
			Если ЗначениеЗаполнено(ЗадачаОбрабатывающегоРезолюцию) Тогда
				ДанныеТекущегоЦикла[РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезолюцию] = ЗадачаОбрабатывающегоРезолюцию;
			КонецЕсли;
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип источника задачи %1 (%2).'"),
				ПроцессДействия,
				ТипЗнч(ПроцессДействия));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеОсобыхУчастников = Новый Структура("Участники, ДанныеТекущегоЦикла, ДанныеПодчиненныхУчастников");
	ДанныеОсобыхУчастников.Участники = ОсобыеУчастники;
	ДанныеОсобыхУчастников.ДанныеТекущегоЦикла = ДанныеТекущегоЦикла;
	ДанныеОсобыхУчастников.ДанныеПодчиненныхУчастников = ДанныеПодчиненныхУчастников;
	
	Возврат ДанныеОсобыхУчастников;
	
КонецФункции

// Ищет подзадачи по задаче.
//
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача - Задача, по которой необходимо найти подзадачи.
//  НомерИтерации - Число
// 
// Возвращаемое значение:
//  ТаблицаЗначений. Поля Подзадача- ДокументСсылка.Задача и Срок (Дата)
//
Функция Подзадачи(МассивЗадач, НомерИтерации) Экспорт
	
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументЗадача.Ссылка КАК Подзадача,
		|	ДокументЗадача.Срок
		|ИЗ
		|	Документ.Задача КАК ДокументЗадача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтерацииЗадачДействий КАК ИтерацииЗадачДействий
		|		ПО ИтерацииЗадачДействий.Задача = ДокументЗадача.Ссылка
		|ГДЕ
		|	ДокументЗадача.ВышестоящаяЗадача В (&МассивЗадач)
		|	И ДокументЗадача.ПометкаУдаления = ЛОЖЬ
		|	И ИтерацииЗадачДействий.НомерИтерации = &НомерИтерации");
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
	
	Если НомерИтерации = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИтерацииЗадачДействий.НомерИтерации = &НомерИтерации", ""); 
	КонецЕсли;	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Ищет подзадачи по действию задачи.
//
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача - Задача, по которой необходимо найти подзадачи.
//  НомерИтерации - Число
// 
// Возвращаемое значение:
//  ТаблицаЗначений. Поля Подзадача- ДокументСсылка.Задача и Срок (Дата)
//
Функция ПодзадачиПоДействию(Действие, НомерИтерации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументЗадача.Ссылка КАК Подзадача,
		|	ДокументЗадача.Срок КАК Срок,
		|	ДокументЗадача.СостояниеЗадачи КАК СостояниеЗадачи,
		|	ДокументЗадача.ДатаВыполнения КАК ДатаВыполнения,
		|	ДокументЗадача.Дата КАК Дата,
		|	ДокументЗадача.Заголовок КАК Заголовок,
		|	ДокументЗадача.ВидЗадачи КАК ВидЗадачи,
		|	ДокументЗадача.Приоритет КАК Приоритет
		|ИЗ
		|	Документ.Задача КАК ДокументЗадача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтерацииЗадачДействий КАК ИтерацииЗадачДействий
		|		ПО (ИтерацииЗадачДействий.Задача = ДокументЗадача.Ссылка)
		|ГДЕ
		|	ДокументЗадача.ВышестоящееДействие = &Действие
		|	И ДокументЗадача.ПометкаУдаления = ЛОЖЬ
		|	И ИтерацииЗадачДействий.НомерИтерации = &НомерИтерации");
	
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
	
	Если НомерИтерации = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИтерацииЗадачДействий.НомерИтерации = &НомерИтерации", ""); 
	КонецЕсли;	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Определяет предметы к отмене.
// 
// Параметры:
//  ЗадачиКОтмене - Массив из ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Соответствие - Предметы к отмене.
//   * Ключ - ДокументСсылка.Задача - Задача к отмене.
//   * Значение - Произвольный - Предмет к отмене.
//
Функция ПредметыКОтмене(ЗадачиКОтмене) Экспорт
	
	ПредметыКОтмене = Новый Соответствие;
	
	ИсточникиЗадач = РаботаСЗадачами.ИсточникиЗадач(ЗадачиКОтмене);
	
	ИсточникиПроцессы = Новый Массив;
	Для Каждого КлючИЗначение Из ИсточникиЗадач Цикл
		
		ИсточникЗадачи = КлючИЗначение.Значение;
		
		Если Не БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(ИсточникЗадачи) Тогда
			Продолжить;
		КонецЕсли;
		
		ИсточникиПроцессы.Добавить(ИсточникЗадачи);
		
	КонецЦикла;
	
	ДействияПоПроцессам = РаботаСПроцессамиПоДействиям.ДействияПоПроцессам(ИсточникиПроцессы);
	
	ДействияИсточников = Новый Массив;
	Для Каждого КлючИЗначение Из ДействияПоПроцессам Цикл
		
		Действие = КлючИЗначение.Значение;
		
		Если Не ЗначениеЗаполнено(Действие) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействияИсточников.Добавить(Действие);
		
	КонецЦикла;
	
	ОбработкиДействий =
		РегистрыСведений.ДействияОбработкиОбъектов.ОбработкиДействий(ДействияИсточников);
	
	Для Каждого ЗадачаКОтмене Из ЗадачиКОтмене Цикл
		
		ИсточникЗадачи = ИсточникиЗадач[ЗадачаКОтмене];
		ДействиеЗадачи = ДействияПоПроцессам[ИсточникЗадачи];
		ОбработкаЗадачи = ОбработкиДействий[ДействиеЗадачи];
		
		Если ЗначениеЗаполнено(ОбработкаЗадачи) Тогда
			
			ПроцессОбработки = РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(
				ОбработкаЗадачи);
			
			КорневойВедущийПроцесс = 
				БизнесПроцессыИЗадачиСервер.КорневойВедущийПроцесс(ПроцессОбработки);
			
			Если ЗначениеЗаполнено(КорневойВедущийПроцесс)
				И КорневойВедущийПроцесс <> ПроцессОбработки Тогда
				
				ПредметыКОтмене[ЗадачаКОтмене] = КорневойВедущийПроцесс;
			Иначе
				ПредметыКОтмене[ЗадачаКОтмене] = ОбработкаЗадачи;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ИсточникЗадачи)
			И БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(ИсточникЗадачи) Тогда
			
			КорневойВедущийПроцесс = 
				БизнесПроцессыИЗадачиСервер.КорневойВедущийПроцесс(ИсточникЗадачи);
			Если ЗначениеЗаполнено(КорневойВедущийПроцесс) Тогда
				ПредметыКОтмене[ЗадачаКОтмене] = КорневойВедущийПроцесс;
			Иначе
				ПредметыКОтмене[ЗадачаКОтмене] = ИсточникЗадачи;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ИсточникЗадачи) Тогда
			
			ПредметыКОтмене[ЗадачаКОтмене] = ИсточникЗадачи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПредметыКОтмене;
	
КонецФункции

// Возвращает представление вида предмета к отмене.
// 
// Параметры:
//  ПредметКОтмене - Произвольный.
// 
// Возвращаемое значение:
//  Строка - Представление вида предмета к отмене.
//  
Функция ПредставлениеВидаПредметаКОтмене(ПредметКОтмене) Экспорт
	
	ПредставлениеВидаПредметаКОтмене = "";
	Если ТипЗнч(ПредметКОтмене) = Тип("ДокументСсылка.Задача") Тогда
		Возврат ПредставлениеВидаПредметаКОтмене;
	КонецЕсли;

	ПредставлениеВидаПредметаКОтмене = Строка(ТипЗнч(ПредметКОтмене));
	
	Возврат ПредставлениеВидаПредметаКОтмене;
	
КонецФункции

// Обработчик записи трудозатрат.
//
// Параметры:
//  ИсточникТрудозатрат - ЛюбаяСсылка - Источник трудозатрат.
//
Процедура ПриЗаписиТрудозатрат(ИсточникТрудозатрат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЭтоИсточникТрудозатрат(ИсточникТрудозатрат) Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаДляОбновления = Неопределено;
	Если ТипЗнч(ИсточникТрудозатрат) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(ИсточникТрудозатрат);
		
	ИначеЕсли ТипЗнч(ИсточникТрудозатрат) = Тип("ДокументСсылка.Задача") Тогда 
		
		ЗадачаДляОбновления = ИсточникТрудозатрат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаДляОбновления) Тогда
		
		РегистрыСведений.РеестрЗадачПоАвторам.ОбновитьПоЗадаче(ЗадачаДляОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработки события "При записи" источника задачи.
//
// Параметры:
//  ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникЗадач.
//
Процедура ПриЗаписиИсточникаЗадачи(ИсточникЗадачи) Экспорт
	
	Если ИсточникЗадачи = Неопределено
		Или (ИсточникЗадачи.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеЗадач")
			И ИсточникЗадачи.ДополнительныеСвойства.ОтключитьОбновлениеЗадач)
		Или ПараметрыСеанса.ОтключитьОбновлениеЗадач Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТребуетсяОперативноеОбновление = Ложь;
	
	Если ИсточникЗадачи.ДополнительныеСвойства.Свойство("ИзменениеСостоянияВложенногоПроцесса") Тогда
		// Остановка обработки документа, нужно обновить отображение в списке в области просмотра.
		ТребуетсяОперативноеОбновление = Истина;
	ИначеЕсли ИсточникЗадачи.ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления")
		И ИсточникЗадачи.ДополнительныеСвойства.ПредыдущаяПометкаУдаления <> ИсточникЗадачи.ПометкаУдаления Тогда
		// Снятие или установка пометки удаления, нужно обновить оперативно.
		ТребуетсяОперативноеОбновление = Истина;
	ИначеЕсли ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		// В файловой базе без очереди обновления кэширующих данных.
		ТребуетсяОперативноеОбновление = Истина;
	КонецЕсли;
	
	Если ТребуетсяОперативноеОбновление Тогда
		
		ОбновитьЗадачуПоИсточнику(ИсточникЗадачи.Ссылка);
		
	Иначе
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			Метаданные.Документы.Задача.ПолноеИмя(),
			ИсточникЗадачи.Ссылка.Метаданные().ПолноеИмя(),
			ИсточникЗадачи.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработки события "При записи" источника действия задачи.
//
// Параметры:
//  ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач.
//
Процедура ПриЗаписиИсточникаДействияЗадачи(ИсточникДействияЗадачи) Экспорт
	
	Если ИсточникДействияЗадачи = Неопределено
		Или (ИсточникДействияЗадачи.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеЗадач")
			И ИсточникДействияЗадачи.ДополнительныеСвойства.ОтключитьОбновлениеЗадач)
		Или ПараметрыСеанса.ОтключитьОбновлениеЗадач Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийИсполнитель = Неопределено;
	Если ТипЗнч(ИсточникДействияЗадачи) <> Тип("СправочникОбъект.ДействияОзнакомления") Тогда
		
		ТекущийИсполнитель = ИсточникДействияЗадачи.ТекущийИсполнитель;
		
		ЭтоВедущаяЗадача = Не ЗначениеЗаполнено(ИсточникДействияЗадачи.ТекущийИсполнитель);
		Если ЭтоВедущаяЗадача Тогда
			Возврат;
		КонецЕсли;      
	Иначе
		ТекущийИсполнитель = ИсточникДействияЗадачи.Автор;
	КонецЕсли;
	
	ТребуетсяОперативноеОбновление = Ложь;
	
	Если ИсточникДействияЗадачи.ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления")
		И ИсточникДействияЗадачи.ДополнительныеСвойства.ПредыдущаяПометкаУдаления <> ИсточникДействияЗадачи.ПометкаУдаления Тогда
		// Снятие или установка пометки удаления, нужно обновить оперативно.
		ТребуетсяОперативноеОбновление = Истина;
	ИначеЕсли ИсточникДействияЗадачи.ДополнительныеСвойства.Свойство("ЭтоНовый")
		И ИсточникДействияЗадачи.ДополнительныеСвойства.ЭтоНовый Тогда
		// Новая задача, нужно обновить оперативно.
		ТребуетсяОперативноеОбновление = Истина;
	ИначеЕсли ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		// В файловой базе без очереди обновления кэширующих данных.
		ТребуетсяОперативноеОбновление = Истина;
	КонецЕсли;
	
	Если ТребуетсяОперативноеОбновление Тогда
		
		ОбновитьДействиеЗадачиПоЗадачеПроцесса(ИсточникДействияЗадачи.Ссылка);
		
	Иначе
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			Метаданные.Документы.ДействиеЗадачи.ПолноеИмя(),
			ИсточникДействияЗадачи.Ссылка.Метаданные().ПолноеИмя(),
			ИсточникДействияЗадачи.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

// При изменении состояния задачи процесса.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя
Процедура ПриИзмененииСостоянияЗадачиПроцесса(ЗадачаПроцесса) Экспорт
	
	БизнесПроцесс = ЗадачаПроцесса.БизнесПроцесс;
	
	Если Не (ЗадачаПроцесса.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван 
		Или ЗадачаПроцесса.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен
		Или ЗадачаПроцесса.ДополнительныеСвойства.СтароеСостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен)
		Или Не РаботаСЗадачами.ЭтоИсточникЗадач(БизнесПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	// Отменим активные подзадачи процесса.
	ЗадачаПоИсточнику = Документы.Задача.НайтиПоИсточнику(БизнесПроцесс);
	ОбработанныеПредметы = Новый Соответствие;
	
	Если ЗадачаПроцесса.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен
		Или ЗадачаПроцесса.ДополнительныеСвойства.СтароеСостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен 
		Тогда
		
		НаПаузу = Ложь;
		Если ЗадачаПроцесса.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
			ПодзадачиКОтмене = РаботаСЗадачами.ПодзадачиКОтмене(ЗадачаПоИсточнику);
			НаПаузу = Истина;
		Иначе	
			ПодзадачиКОтмене = РаботаСЗадачами.ПодзадачиНаПаузе(ЗадачаПоИсточнику);
		КонецЕсли;	
		
		Для Каждого Подзадача Из ПодзадачиКОтмене Цикл
			
			РаботаСЗадачами.ОбработатьОстановку(
				Подзадача,
				Подзадача,
				НаПаузу,
				ОбработанныеПредметы);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;	

	ПодзадачиКОтмене = РаботаСЗадачами.ПодзадачиКОтмене(ЗадачаПоИсточнику);
	
	КтоИКогдаПрервалПроцесс = БизнесПроцессыИЗадачиСервер.ПолучитьИнформациюОПрерыванииПроцесса(БизнесПроцесс);
	Если КтоИКогдаПрервалПроцесс <> Неопределено Тогда
		ПричинаПрерывания = КтоИКогдаПрервалПроцесс.ПричинаПрерывания;
	Иначе
		ПричинаПрерывания = БизнесПроцесс.ПричинаПрерывания;
	КонецЕсли;
	
	Для Каждого Подзадача Из ПодзадачиКОтмене Цикл
		
		РаботаСЗадачами.ОбработатьОтмену(
			Подзадача,
			Подзадача,
			ПричинаПрерывания,
			ОбработанныеПредметы);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик при изменении прав источника.
// 
// Параметры:
//  Источник - ОпределяемыйТип.ИсточникЗадач.
//
Процедура ПриИзмененииПравИсточника(Источник) Экспорт
	
	Если Не ЗначениеЗаполнено(Источник)
		Или Не РаботаСЗадачами.ЭтоИсточникЗадач(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Задача = Документы.Задача.НайтиПоИсточнику(Источник);
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(Задача);
	
КонецПроцедуры

// При определении результата обработки результата.
//
// Параметры:
//   РеквизитыДействияЗадачи - Структура
//   ВнешнийИдентификатор - УникальныйИдентификатор
//   РезультатОбработкиРезультата - Структура
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
Процедура ПриОпределенииРезультатаОбработкиРезультата(РеквизитыДействияЗадачи, ВнешнийИдентификатор,
		РезультатОбработкиРезультата, КешДанных = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(РеквизитыДействияЗадачи.Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
	
	Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.Задача = РеквизитыДействияЗадачи.Задача Тогда
		ИсточникЗадачи = КэшОбластиПросмотра.ЗадачаОбъект.Источник;
	Иначе
		Если ТипЗнч(РеквизитыДействияЗадачи.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда        
			Возврат;
		КонецЕсли;
		
		РеквизитыЗадачиПроцесса = Неопределено;
		Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеЗадачИсполнителей") Тогда
			РеквизитыЗадачиПроцесса = КешДанных.ДанныеЗадачИсполнителей[РеквизитыДействияЗадачи.Источник];
		КонецЕсли;
		Если РеквизитыЗадачиПроцесса = Неопределено Тогда
			РеквизитыЗадачиПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				РеквизитыДействияЗадачи.Источник,
				"БизнесПроцесс");
		КонецЕсли;
		
		ИсточникЗадачи = РеквизитыЗадачиПроцесса.БизнесПроцесс;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникЗадачи) <> Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ИсточникЗадачи,
		"РезультатыПроверки");
	
	РезультатыПроверки = РеквизитыПроцесса.РезультатыПроверки.Выгрузить();
	РезультатыПроверки.Сортировать("НомерСтроки Возр");
	
	НомерИтерацииКомментария = -1;
	КомментарийПроверяющего = "";
	Для Каждого СтрокаРезультата Из РезультатыПроверки Цикл
		
		Если СтрокаРезультата.ИдентификаторИсполнителя <> ВнешнийИдентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРезультата.НомерИтерации < НомерИтерацииКомментария Тогда
			Продолжить;
		КонецЕсли; 
		
		НомерИтерацииКомментария = СтрокаРезультата.НомерИтерации;
		КомментарийПроверяющего = СтрокаРезультата.КомментарийПроверяющего;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(КомментарийПроверяющего) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатОбработкиРезультата.РезультатТекстом) Тогда
		
		Если РезультатОбработкиРезультата.РезультатТекстом <> КомментарийПроверяющего Тогда
			
			РезультатОбработкиРезультата.РезультатТекстом =
				РезультатОбработкиРезультата.РезультатТекстом
				+ Символы.ПС
				+ Символы.ПС
				+ КомментарийПроверяющего;
			
		КонецЕсли;
		
	Иначе
		
		РезультатОбработкиРезультата.РезультатТекстом = КомментарийПроверяющего;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует Истина если это согласование в режиме замечаний - бежим вверх до корня 
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - текущее действие задачи.
//                  - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//   Действие - ОпределяемыйТип.Действия - возвращаемое значение.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоЗадачаСогласованияВРежимеЗамечаний(ДействиеЗадачи, Действие) Экспорт
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СогласованиеВРежимеЗамечаний = Ложь;
	
	Если ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		ВидДействия = ДействиеЗадачи.ВидДействия;
	Иначе
		ВидДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "ВидДействия");
	КонецЕсли;
	Если ВидДействия <> Справочники.ВидыДействийЗадач.Исполнить Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КорневаяЗадача = РаботаСЗадачами.КорневаяЗадача(ДействиеЗадачи);
	
	Если Не ЗначениеЗаполнено(КорневаяЗадача) И ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Если ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
			КорневаяЗадача = ДействиеЗадачи.Задача;
		Иначе
			КорневаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
		КонецЕсли;
	КонецЕсли;
	
	БизнесПроцесс = РаботаСЗадачами.ИсточникЗадачи(КорневаяЗадача);
	Если ЗначениеЗаполнено(БизнесПроцесс) Тогда
		
		Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(БизнесПроцесс);	
		Если ЗначениеЗаполнено(Действие) И ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
			
			СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Действие, "СогласованиеВРежимеЗамечаний");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СогласованиеВРежимеЗамечаний;
	
КонецФункции

// Определяет, является ли проверяемая ссылка массовым источником задач.
//
// Параметры:
//  ПроверяемаяСсылка - ЛюбаяСсылка - Проверяемая ссылка.
// 
// Возвращаемое значение:
//  Булево - Проверяемая ссылка является массовым источником задач.
//
Функция ЭтоМассовыйИсточникЗадач(ПроверяемаяСсылка) Экспорт
	
	Если Не ЗначениеЗаполнено(ПроверяемаяСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоМассовыйИсточникЗадач =
		ТипЗнч(ПроверяемаяСсылка) = Тип("СправочникСсылка.ДействияОзнакомления");
	
	Возврат ЭтоМассовыйИсточникЗадач;
	
КонецФункции

// Определяет результаты действий по области применения шаблонов текстов.
// 
// Параметры:
//  ОбластьПрименения - ПеречислениеСсылка.ОбластиПримененияШаблоновТекстов.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.РезультатыДействийЗадач - Результаты действий по области применения шаблонов текстов.
//  
Функция РезультатыДействийПоОбластиПримененияШаблоновТекстов(ОбластьПрименения) Экспорт
	
	РезультатыДействий = Новый Массив;
	
	Если ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаЗарегистрировать Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Зарегистрировано);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.НеЗарегистрировано);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаИсполнить Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Выполнена);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаОбеспечитьПодписание Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Подписано);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.НеПодписано);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаОбработатьРезолюцию Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ОбработанаРезолюция);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.НаправленоНаИсполнение);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.НаправленоНаОзнакомление);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаОбработатьРезультат Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Завершил);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ОтправленоПовторно);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаОбработатьРезультатВопроса Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ЗакрытВопрос);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ОтправленоПовторно);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаОбработатьРезультатЗапроса Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ЗакрытЗапрос);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ОтправленоПовторно);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаОзнакомиться Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Ознакомился);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаОзнакомитьсяСРезультатом Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Ознакомился);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаОзнакомитьсяСРезультатомСогласования Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Ознакомился);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ОтправленоПовторно);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Завершил);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаПодписать Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Подписано);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.НеПодписано);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаПригласить Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ПринятоПриглашение);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ОтклоненоПриглашение);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаПроверитьИсполнение Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Проверено);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ВозвращеноНаДоработку);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаРассмотреть Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Рассмотрено);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.НаправленоАвтору);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.НаправленоПомощнику);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.НаправленоНаИсполнение);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаРешениеВопросовОзнакомиться Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ЗакрытВопрос);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ОтправленоПовторно);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаРешениеВопросовПереносСрока Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ПеренесенСрок);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.ОтказаноВПереносеСрока);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаРешениеВопросовРассмотреть Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Рассмотрено);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаСогласовать Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Согласовано);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.СогласованоСЗамечаниями);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.НеСогласовано);
		
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаУтвердить Тогда
		
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.Утверждено);
		РезультатыДействий.Добавить(Справочники.РезультатыДействийЗадач.НеУтверждено);
		
	Иначе
		
		// Нет допустимых результатов действий нет.
		
	КонецЕсли;
	
	Возврат РезультатыДействий;
	
КонецФункции

// Определяет реквизиты источника.
//
// Параметры:
//  ИсточникЗадачи - ЛюбаяСсылка.
//
// Возвращаемое значение:
//  Структура - Реквизиты источника.
//   * Автор - СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи.
//   * ДатаНачала - Дата.
//   * ДатаЗавершения - Дата.
//   * ПометкаУдаления - Булево.
//   * УзелОбмена - УникальныйИдентификатор.
//
Функция РеквизитыИсточника(ИсточникЗадачи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипИсточникаЗадачи = ТипЗнч(ИсточникЗадачи); 
	
	Если Не ЗначениеЗаполнено(ИсточникЗадачи) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не указан источник задачи %1 (%2).'"),
			ИсточникЗадачи,
			ТипИсточникаЗадачи);
	КонецЕсли;
	
	Если Не РаботаСЗадачами.ЭтоИсточникЗадач(ИсточникЗадачи) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = '%1 (%2) не является источником задач.'"),
			ИсточникЗадачи,
			ТипИсточникаЗадачи);
	Конецесли;
	
	РеквизитыИсточника = Новый Структура;
	РеквизитыИсточника.Вставить("Автор", Неопределено);
	РеквизитыИсточника.Вставить("ДатаНачала", Дата(1, 1, 1));
	РеквизитыИсточника.Вставить("ДатаЗавершения", Дата(1, 1, 1));
	РеквизитыИсточника.Вставить("ПометкаУдаления", Ложь);
	РеквизитыИсточника.Вставить("УзелОбмена", Новый УникальныйИдентификатор());
	РеквизитыИсточника.Вставить("Предмет", Неопределено);
	
	Если ТипИсточникаЗадачи = Тип("БизнесПроцессСсылка.Исполнение")
		Или ТипИсточникаЗадачи = Тип("БизнесПроцессСсылка.Ознакомление")
		Или ТипИсточникаЗадачи = Тип("БизнесПроцессСсылка.Подписание")
		Или ТипИсточникаЗадачи = Тип("БизнесПроцессСсылка.Приглашение")
		Или ТипИсточникаЗадачи = Тип("БизнесПроцессСсылка.Рассмотрение")
		Или ТипИсточникаЗадачи = Тип("БизнесПроцессСсылка.Регистрация")
		Или ТипИсточникаЗадачи = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач")
		Или ТипИсточникаЗадачи = Тип("БизнесПроцессСсылка.Согласование")
		Или ТипИсточникаЗадачи = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"Автор, ДатаНачала, ДатаЗавершения, ПометкаУдаления");
				
		РеквизитыИсточника.Автор = РеквизитыПроцесса.Автор;
		РеквизитыИсточника.ДатаНачала = РеквизитыПроцесса.ДатаНачала;
		РеквизитыИсточника.ДатаЗавершения = РеквизитыПроцесса.ДатаЗавершения;
		РеквизитыИсточника.ПометкаУдаления = РеквизитыПроцесса.ПометкаУдаления;
		
	ИначеЕсли ТипИсточникаЗадачи = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"Автор, ПометкаУдаления, ДатаСоздания, Предмет"); 
		
		РеквизитыИсточника.Автор = РеквизитыДействия.Автор;
		РеквизитыИсточника.ПометкаУдаления = РеквизитыДействия.ПометкаУдаления;
		
		РеквизитыИсточника.Предмет = РеквизитыДействия.Предмет;		
		
		ДанныеОзнакомлений = РегистрыСведений.УчастникиОзнакомлений.ДанныеОзнакомлений(
			ИсточникЗадачи);
		РеквизитыИсточника.ДатаНачала = ДанныеОзнакомлений.ДатаНачала;
		РеквизитыИсточника.ДатаЗавершения = ДанныеОзнакомлений.ДатаЗавершения;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не указан способ получения реквизитов источника задачи %1 (%2).'"),
			ИсточникЗадачи,
			ТипИсточникаЗадачи);
		
	КонецЕсли;
	
	Возврат РеквизитыИсточника;
	
КонецФункции

// Обновляет задачу по состоянию действия.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  Немедленно - Булево.
//
Процедура ОбновитьЗадачуПоСостояниюДействия(ДействиеЗадачи, Немедленно) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") И Не Немедленно Тогда
		
		ПараметрыВыполнения = Новый Структура("Задача, ДействияДляВозврата");
		ПараметрыВыполнения.Задача = Задача;
		ПараметрыВыполнения.ДействияДляВозврата = Новый Массив;
		
		ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеОбновитьЗадачуПоСостояниюДействия(
			ДействиеЗадачи,
			ПараметрыВыполнения);
		
		Возврат;
		
	КонецЕсли;
	
	ИсточникЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Источник");
	
	ОбновитьЗадачуПоИсточнику(ИсточникЗадачи, Ложь, Истина);
	
КонецПроцедуры

// Определяет действие обработки действия задачи.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
// 
// Возвращаемое значение:
//  ОпределяемыйТип.Действия
// 
Функция ДействиеОбработкиДействияЗадачи(ДействиеЗадачи) Экспорт
	
	ДействиеОбработки = Неопределено;
	
	РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, "Источник");
	Если Не ЗначениеЗаполнено(РеквизитыДействияЗадачи.Источник) Тогда
		Возврат ДействиеОбработки;
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыДействияЗадачи.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ДействиеОбработки = РаботаСПроцессамиПоДействиям.ДействиеЗадачиПроцесса(
			РеквизитыДействияЗадачи.Источник);
		
	ИначеЕсли ТипЗнч(РеквизитыДействияЗадачи.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		ДействиеОбработки = РеквизитыДействияЗадачи.Источник;
		
	КонецЕсли;
	
	Возврат ДействиеОбработки;
	
КонецФункции

// Определяет действие обработки задачи.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача
// 
// Возвращаемое значение:
//  ОпределяемыйТип.Действия.
// 
Функция ДействиеОбработкиЗадачи(Задача) Экспорт
	
	ДействиеОбработки = Неопределено;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Источник");
	Если Не ЗначениеЗаполнено(РеквизитыЗадачи.Источник) Тогда
		Возврат ДействиеОбработки;
	КонецЕсли;
	
	Если БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(РеквизитыЗадачи.Источник)Тогда
		
		ДействиеОбработки = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
			РеквизитыЗадачи.Источник);
		
	ИначеЕсли ТипЗнч(РеквизитыЗадачи.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		ДействиеОбработки = РеквизитыЗадачи.Источник;
		
	КонецЕсли;
	
	Возврат ДействиеОбработки;
	
КонецФункции

// Определяет корневое действие обработки действия задачи.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.Действия.
// 
Функция КорневоеДействиеОбработкиЗадачи(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КорневоеДействиеОбработкиЗадачи = Неопределено;
	
	КорневаяЗадача = РаботаСЗадачами.КорневаяЗадача(Задача);
	
	КорневаяЗадача = ?(ЗначениеЗаполнено(КорневаяЗадача), КорневаяЗадача, Задача); 
	
	ИсточникЗадачи = РаботаСЗадачами.ИсточникЗадачи(КорневаяЗадача);
	Если Не ЗначениеЗаполнено(ИсточникЗадачи)
		Или (Не ОбщегоНазначения.ЭтоБизнесПроцесс(ИсточникЗадачи.Метаданные())
			И Не ДействияКлиентСервер.ЭтоДействиеОзнакомления(ИсточникЗадачи)) Тогда
		Возврат КорневоеДействиеОбработкиЗадачи;
	КонецЕсли;
	
	Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(ИсточникЗадачи) Тогда
		КорневоеДействиеОбработкиЗадачи = ИсточникЗадачи;
	Иначе	
		КорневоеДействиеОбработкиЗадачи =
			РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(ИсточникЗадачи);
	КонецЕсли;
	
	Возврат КорневоеДействиеОбработкиЗадачи;
	
КонецФункции

// Определяет корневое действие обработки действия задачи.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.Действия.
// 
Функция КорневоеДействиеОбработкиДействияЗадачи(ДействиеЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
	
	КорневоеДействиеОбработкиДействияЗадачи = КорневоеДействиеОбработкиЗадачи(Задача);
	
	Возврат КорневоеДействиеОбработкиДействияЗадачи;
	
КонецФункции

// Инфо о перенаправлении.
// 
// Возвращаемое значение:
// Структура - информация о перенаправлении
//  * Исполнитель - СправочникСсылка.Сотрудники - Сотрудник, если перенаправление на сотрудника
//  * РольИсполнителя - СправочникСсылка.ПолныеРоли - Полная роль, если перенаправление на роль
//  * ВладелецРоли - СправочникСсылка.РолиИсполнителей- Роль исполнителя, если перенаправление на роль
//  * ОсновнойОбъектАдресации - Неопределено, ПланВидовХарактеристикСсылка.ОбъектыАдресацииЗадач - объект адресации,
//  если перенаправление на роль 
//  * ДополнительныйОбъектАдресации -Неопределено, ПланВидовХарактеристикСсылка.ОбъектыАдресацииЗадач - 
//  дополнительный объект адресации, если перенаправление на роль 
//  Комментарий - Строка - комментарий перенаправление
//  Автор - СправочникСсылка.Сотрудники - Сотрудник, который перенаправил  
//  
Функция ИнфоОПеренаправлении() Экспорт
	
	Структура = РаботаСЗадачамиКлиентСервер.НовыйДанныеИсполнителя();
	Структура.Вставить("Комментарий", "");
	Структура.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	
	Возврат Структура;
	
КонецФункции

// Обновляет действия задачи по процессу отложенно.
// 
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка
//  НеПисатьВИсторию - Булево - принудительно ставим "не пишем в историю"
//  АвторИзменения - СправочникСсылка.Сотрудники - Инициатор изменения задачи
//
Процедура ОбновитьДействияЗадачиПоПроцессуОтложенно(БизнесПроцесс, НеПисатьВИсторию, АвторИзменения) Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		ОбновитьДействияЗадачиПоПроцессу(БизнесПроцесс, НеПисатьВИсторию, АвторИзменения);
		
	Иначе
		
		ИзмененияВлияющихДанных = Новый Структура;
		ИзмененияВлияющихДанных.Вставить("НеПисатьВИсторию", НеПисатьВИсторию);
		ИзмененияВлияющихДанных.Вставить("АвторИзменения", АвторИзменения);
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Документ.ДействиеЗадачи",
			БизнесПроцесс.Метаданные().ПолноеИмя(),
			БизнесПроцесс,
			ИзмененияВлияющихДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет действия задачи по процессу.
// 
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка
//  НеПисатьВИсторию - Булево - принудительно ставим "не пишем в историю"
//  АвторИзменения - СправочникСсылка.Сотрудники - Инициатор изменения задачи
//
Процедура ОбновитьДействияЗадачиПоПроцессу(БизнесПроцесс, НеПисатьВИсторию, АвторИзменения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Служебные задачи комплексного процесса не отражаются в действиях задач.
	Если Не РаботаСЗадачами.ЭтоИсточникЗадач(БизнесПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	// Действия задач отражаются только после отражения задач.
	Задача = Документы.Задача.НайтиПоИсточнику(БизнесПроцесс);
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат;
	КонецЕсли;
	
	ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ВидЗадачи");
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	ДанныеЗаполненияДействийПоПроцессу = ДанныеЗаполненияДействийПоПроцессу(
		БизнесПроцесс,
		ДанныеВидаЗадачи);
	Для Каждого ДанныеЗаполненияДействияПоПроцессу Из ДанныеЗаполненияДействийПоПроцессу Цикл
		//@skip-check query-in-loop
		ОбновитьДействиеЗадачиПоЗадачеПроцессаОтложенно(ДанныеЗаполненияДействияПоПроцессу.ЗадачаПроцесса);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет действие задачи по действию ознакомления и идентификатору участника.
// 
// Параметры:
//  ДействиеОзнакомления - СправочникСсылка.ДействияОзнакомления
//  ИдентификаторУчастника - УникальныйИдентификатор
// 
Процедура ОбновитьДействиеЗадачиПоДействиюОзнакомления(ДействиеОзнакомления, ИдентификаторУчастника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задача = Документы.Задача.НайтиПоИсточнику(ДействиеОзнакомления);
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ОбновитьДействияЗадачиПоДействиюОзнакомления(
			ДействиеОзнакомления,
			ИдентификаторУчастника,
			Задача);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет действие задачи по задаче процесса.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  НеПисатьВИсторию - Булево
//  АвторИзменения - Неопределено
// 
Процедура ОбновитьДействиеЗадачиПоЗадачеПроцессаОтложенно(ЗадачаПроцесса, НеПисатьВИсторию = Ложь, АвторИзменения = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		ОбновитьДействиеЗадачиПоЗадачеПроцесса(ЗадачаПроцесса, НеПисатьВИсторию, АвторИзменения);
		
	Иначе
		
		ИзмененияВлияющихДанных = Новый Структура;
		ИзмененияВлияющихДанных.Вставить("НеПисатьВИсторию", НеПисатьВИсторию);
		ИзмененияВлияющихДанных.Вставить("АвторИзменения", АвторИзменения);
		
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			"Документ.ДействиеЗадачи",
			"Задача.ЗадачаИсполнителя",
			ЗадачаПроцесса,
			ИзмененияВлияющихДанных);
		
	КонецЕсли;
	
КонецПроцедуры


// Обновляет действие задачи по задаче процесса.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  НеПисатьВИсторию - Булево
//  АвторИзменения - Неопределено
// 
Процедура ОбновитьДействиеЗадачиПоЗадачеПроцесса(ЗадачаПроцесса, НеПисатьВИсторию = Ложь, АвторИзменения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	//@skip-check bsl-legacy-check-string-literal
	БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "БизнесПроцесс");
	
	// Служебные задачи комплексного процесса не отражаются в действиях задач.
	Если Не РаботаСЗадачами.ЭтоИсточникЗадач(БизнесПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	// Действия задач отражаются только после отражения задач.
	Задача = Документы.Задача.НайтиПоИсточнику(БизнесПроцесс);
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат;
	КонецЕсли;
	
	ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ВидЗадачи");
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗадачаПроцесса);
		Блокировка.Заблокировать();
		
		ДанныеЗаполненияДействия = ДанныеЗаполненияДействияПоЗадачеПроцесса(
			ЗадачаПроцесса,
			БизнесПроцесс,
			ДанныеВидаЗадачи);
		Если ДанныеЗаполненияДействия <> Неопределено Тогда
			
			РеквизитыЗадачиПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЗадачаПроцесса,
				"Дата, ПометкаУдаления, Наименование, Выполнена, ИсточникДанных, Автор, Описание,
				|ДатаИсполнения, ИсключенаИзПроцесса, Проект, СостояниеБизнесПроцесса,
				|СрокИсполнения");
			
			ЗадачиПроцесса = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаПроцесса);
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ОчередьЗаданийДокументооборота.ПредметЗадания КАК Задача
				|ИЗ
				|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
				|ГДЕ
				|	ОчередьЗаданийДокументооборота.ПредметЗадания = &ЗадачаПроцесса
				|	И ОчередьЗаданийДокументооборота.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ВыполнениеЗадачи)
				|	И ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется)");
			Запрос.УстановитьПараметр("ЗадачаПроцесса", ЗадачаПроцесса);
			ЗадачаПроцессаВОчередиВыполнения = НЕ Запрос.Выполнить().Пустой();
			
			РезультатВыполненияЗадачИсполнителей = 
				РаботаСБизнесПроцессами.РезультатыВыполненияЗадачПроцессов(ЗадачиПроцесса);
			
			ДанныеПринятияКИсполнению =
				РаботаСБизнесПроцессами.ДанныеПринятияКИсполнению(ЗадачиПроцесса);
			
			СведенияОбИсполнителяхЗадачПроцессов =
				РаботаСБизнесПроцессами.СведенияОбИсполнителяхЗадачПроцессов(ЗадачиПроцесса);
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЗадачаУчастники.Ссылка КАК Задача,
				|	ЗадачаУчастники.ВидУчастника КАК ВидУчастника,
				|	ЗадачаУчастники.Участник КАК Участник,
				|	ЗадачаУчастники.ДействиеУчастника КАК Действие,
				|	ЗадачаУчастники.ВнешнийИдентификатор КАК ВнешнийИдентификатор,
				|	ДействиеЗадачи.Источник КАК Источник
				|ИЗ
				|	Документ.Задача.Участники КАК ЗадачаУчастники
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействиеЗадачи КАК ДействиеЗадачи
				|		ПО ЗадачаУчастники.ДействиеУчастника = ДействиеЗадачи.Ссылка
				|ГДЕ
				|	ЗадачаУчастники.Ссылка = (&Задача)");
			Запрос.УстановитьПараметр("Задача", Задача);
			ТаблицаДействияЗадач = Запрос.Выполнить().Выгрузить();
			
			ДанныеДействия = Документы.ДействиеЗадачи.ДанныеЗаполнения();
			ДанныеДействия.ВидДействия = ДанныеЗаполненияДействия.ВидДействия;
			ДанныеДействия.Задача = Задача;
			ДанныеДействия.Источник = ЗадачаПроцесса;
			
			ДанныеДействия.РезультатДействияТекстом =
				РезультатВыполненияЗадачИсполнителей[ЗадачаПроцесса];
			
			ДанныеПринятияКИсполнениюЗадачиПроцесса = ДанныеПринятияКИсполнению[ЗадачаПроцесса];
			ДанныеДействия.ДатаНачала = ДанныеПринятияКИсполнениюЗадачиПроцесса.ДатаПринятияКИсполнению;
			
			СведенияОбИсполнителяхЗадачиПроцесса =
				СведенияОбИсполнителяхЗадачПроцессов[ЗадачаПроцесса];
			Если ЗначениеЗаполнено(СведенияОбИсполнителяхЗадачиПроцесса.Исполнитель) Тогда
				ТекущийИсполнительЗадачиПроцесса = СведенияОбИсполнителяхЗадачиПроцесса.Исполнитель;
			Иначе
				ТекущийИсполнительЗадачиПроцесса = СведенияОбИсполнителяхЗадачиПроцесса.РольИсполнителя;
			КонецЕсли;
			ДанныеДействия.Исполнитель = ТекущийИсполнительЗадачиПроцесса;
			
			ЗаменитьПользователяВРеквизите(РеквизитыЗадачиПроцесса, "Автор");
			
			ДанныеДействия.ОсобыйАвтор = РеквизитыЗадачиПроцесса.Автор;
			ДанныеДействия.Дата = РеквизитыЗадачиПроцесса.Дата;
			
			ДанныеДействия.ДатаВыполнения = РеквизитыЗадачиПроцесса.ДатаИсполнения;
			
			ДанныеДействия.ИсточникДанных = РеквизитыЗадачиПроцесса.ИсточникДанных;
			ДанныеДействия.ОсобыйСрок = РеквизитыЗадачиПроцесса.СрокИсполнения;
			ДанныеДействия.ОсобыйЗаголовок = РеквизитыЗадачиПроцесса.Наименование;
			
			ДанныеДействия.ПометкаУдаления =
				РеквизитыЗадачиПроцесса.ПометкаУдаления
				Или РеквизитыЗадачиПроцесса.ИсключенаИзПроцесса;
			
			ДанныеДействия.РезультатДействия = ?(РеквизитыЗадачиПроцесса.Выполнена,
				ДанныеЗаполненияДействия.РезультатДействия,
				Справочники.РезультатыДействийЗадач.ПустаяСсылка());
			
			Если РеквизитыЗадачиПроцесса.Выполнена Тогда
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Выполнена;
				
			ИначеЕсли Не РеквизитыЗадачиПроцесса.Выполнена
				И РеквизитыЗадачиПроцесса.СостояниеБизнесПроцесса =
					Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Отложена;
				
			ИначеЕсли Не РеквизитыЗадачиПроцесса.Выполнена
				И РеквизитыЗадачиПроцесса.СостояниеБизнесПроцесса =
					Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Отменена;
				
			ИначеЕсли Не РеквизитыЗадачиПроцесса.Выполнена
				И ЗадачаПроцессаВОчередиВыполнения Тогда
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Выполнена;
				
			ИначеЕсли Не РеквизитыЗадачиПроцесса.Выполнена
				И ДанныеПринятияКИсполнениюЗадачиПроцесса.ПринятаКИсполнению Тогда
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.ВРаботе;
				
			ИначеЕсли Не РеквизитыЗадачиПроцесса.Выполнена
				И Не ДанныеПринятияКИсполнениюЗадачиПроцесса.ПринятаКИсполнению Тогда
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Новая;
				
			Иначе
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.ПустаяСсылка();
				
			КонецЕсли;
			
			Если РеквизитыЗадачиПроцесса.Выполнена Тогда
				ДанныеДействия.КтоОтметил = ИсторияСобытийЗадач.КтоОтметилЗадачуВыполненной(
					ЗадачаПроцесса);
				Если Не ЗначениеЗаполнено(ДанныеДействия.КтоОтметил) И РеквизитыЗадачиПроцесса.Выполнена Тогда
					ДанныеДействия.КтоОтметил = ДанныеДействия.Исполнитель;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеДействия.СостояниеУчастникаЗадачи = РаботаСЗадачами.СостояниеУчастникаЗадачи(
				ВидСостоянияУчастниковЗадач,
				ВидЗадачи,
				ДанныеЗаполненияДействия.ВидУчастника,
				ДанныеДействия.РезультатДействия);
			
			ФлагЗадачиПроцесса = РегистрыСведений.ФлагиОбъектов.ФлагЗадачиПроцесса(ЗадачаПроцесса);
			Если ФлагЗадачиПроцесса <> Неопределено Тогда
				ДанныеДействия.Флаг = ФлагЗадачиПроцесса;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеЗаполненияДействия.ВнешнийИдентификатор) Тогда
				
				КлючДействия = Новый Структура("ВнешнийИдентификатор");
				КлючДействия.ВнешнийИдентификатор = ДанныеЗаполненияДействия.ВнешнийИдентификатор;
				
			Иначе
				
				КлючДействия = Новый Структура("Задача, ВидУчастника, Участник");
				КлючДействия.Задача = Задача;
				КлючДействия.ВидУчастника = ДанныеЗаполненияДействия.ВидУчастника;
				КлючДействия.Участник = ?(ЗначениеЗаполнено(ДанныеЗаполненияДействия.Участник),
					ДанныеЗаполненияДействия.Участник,
					ДанныеДействия.Исполнитель);
				
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаДействияЗадач.НайтиСтроки(КлючДействия);
			Если НайденныеСтроки.Количество() = 0 Тогда
				АльтернативныйКлюч = Новый Структура("Источник", ЗадачаПроцесса);
				НайденныеСтроки = ТаблицаДействияЗадач.НайтиСтроки(АльтернативныйКлюч);
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденноеДействие = НайденныеСтроки[0].Действие;
				Если ЗначениеЗаполнено(НайденноеДействие) Тогда
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					ЭлементБлокировки.УстановитьЗначение("Ссылка", НайденноеДействие);
					Блокировка.Заблокировать();
					
					ДействиеЗадачиОбъект = НайденноеДействие.ПолучитьОбъект();
					СтарыеДанные = ОбщегоНазначенияДокументооборот.ДанныеОбъекта(ДействиеЗадачиОбъект);
					
					ДействиеЗадачиОбъект.Заполнить(ДанныеДействия);
					Если РеквизитыЗадачиПроцесса <> Неопределено Тогда
						ДействиеЗадачиОбъект.УстановитьОписание(РеквизитыЗадачиПроцесса.Описание);
					КонецЕсли;
					Если Не ЗначениеЗаполнено(ДействиеЗадачиОбъект.Дата) Тогда
						ДействиеЗадачиОбъект.Дата = ТекущаяДатаСеанса();
					КонецЕсли;
					НовыеДанные = ОбщегоНазначенияДокументооборот.ДанныеОбъекта(ДействиеЗадачиОбъект);
					
					ИзмененыДанные = ДействиеЗадачиОбъект.ЭтоНовый()
						Или Не ОбщегоНазначенияДокументооборот.ДанныеСовпадают(СтарыеДанные, НовыеДанные);
					
					Если ИзмененыДанные Тогда
						
						ДействиеЗадачиОбъект.ДополнительныеСвойства.Вставить("ОбновлениеПоИсточнику", Истина);
						Если Не ДействиеЗадачиОбъект.ПометкаУдаления Тогда
							ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
						ИначеЕсли ДействиеЗадачиОбъект.ПометкаУдаления И ДействиеЗадачиОбъект.Проведен Тогда
							ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						ИначеЕсли ДействиеЗадачиОбъект.ПометкаУдаления И Не ДействиеЗадачиОбъект.Проведен Тогда
							ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;
						
						КонтекстИзмененияЗадачи = Документы.Задача.КонтекстИзмененияРеквизитов();
						КонтекстИзмененияЗадачи.Ссылка = ДействиеЗадачиОбъект.Задача;
						КонтекстИзмененияЗадачи.ПредставлениеСсылки = Строка(ДействиеЗадачиОбъект.Задача);
						КогоУведомить = Новый Массив;
						КогоУведомить.Добавить(ДействиеЗадачиОбъект.Ссылка);
						КонтекстИзмененияЗадачи.Вставить("КогоУведомить", КогоУведомить);
						ПополнитьКонтекстИзмененияДействий(КонтекстИзмененияЗадачи, ДействиеЗадачиОбъект);
						
						Если КонтекстИзмененияЗадачи <> Неопределено И НеПисатьВИсторию = Истина Тогда
							КонтекстИзмененияЗадачи.ИзмененныеРеквизиты.Очистить();
						КонецЕсли;	
						Если КонтекстИзмененияЗадачи<>Неопределено И АвторИзменения <> Неопределено Тогда
							КонтекстИзмененияЗадачи.Автор = АвторИзменения;
						КонецЕсли;
						ОбработатьИзмененияРеквизитовПриОбновленииПоИсточнику(КонтекстИзмененияЗадачи);
						
					КонецЕсли;
					
					ВсеКарточкиКонтроляПоПредмету = Контроль.ВсеКарточкиКонтроляПоПредмету(ЗадачаПроцесса);
					РеквизитыКонтролей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
						ВсеКарточкиКонтроляПоПредмету,
						"Предмет, СрокИсполнения");
					Для Каждого КонтрольнаяКарточка Из ВсеКарточкиКонтроляПоПредмету Цикл
						
						РеквизитыКонтроля = РеквизитыКонтролей[КонтрольнаяКарточка];
						Справочники.Контроль.УстановитьСостояниеКонтроляВКеше(
							РеквизитыКонтроля.Предмет,
							РеквизитыКонтроля.СрокИсполнения);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#Область ПоступившиеОбновления

// Восстанавливает поступившие обновления задач для указанного пользователя в текущем узле.
//
// Параметры:
//  НовыеПоступившиеОбновленияЗадач - См. РаботаСЗадачами.НовыеПоступившиеОбновленияЗадач.
//  ПорцияДействийЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
//  РеквизитыДействий - Соответствие.
//
Процедура ВосстановитьПоступившиеОбновленияЗадач(
	НовыеПоступившиеОбновленияЗадач, ПорцияДействийЗадач, ЗадачиДействийПорции) Экспорт
	
	ВсеЗадачиПорции = Новый Массив;
	Для Каждого КлючИЗначение Из ЗадачиДействийПорции Цикл
		
		РеквизитыДействия = КлючИЗначение.Значение;
		
		ВсеЗадачиПорции.Добавить(РеквизитыДействия.Задача);
		
	КонецЦикла;
	ВсеЗадачиПорции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеЗадачиПорции);
	
	// Восстановление событий "Зарегистрирован исходящий документ" и "Исходящий не зарегистрирован".
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПриложенияЗадачи.Ссылка КАК ЗадачаДействия,
		|	СвязанныеИсходящиеДокументы.РегистрационныйНомер КАК РегистрационныйНомер
		|ИЗ
		|	Документ.Задача.Приложения КАК ПриложенияЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязиПредметов
		|		ПО ПриложенияЗадачи.Приложение = СвязиПредметов.Объект
		|		И (СвязиПредметов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтвет))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК СвязанныеИсходящиеДокументы
		|		ПО (СвязиПредметов.СвязанныйОбъект = СвязанныеИсходящиеДокументы.Ссылка)
		|ГДЕ
		|	ПриложенияЗадачи.Ссылка В (&ВсеЗадачиПорции)
		|	И ПриложенияЗадачи.Приложение ССЫЛКА Справочник.ДокументыПредприятия
		|	И НЕ СвязанныеИсходящиеДокументы.РегистрационныйНомер ЕСТЬ NULL");
	Запрос.УстановитьПараметр("ВсеЗадачиПорции", ВсеЗадачиПорции);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	Для Каждого ДействиеЗадачи Из ПорцияДействийЗадач Цикл
		
		ЗадачаДействия = ЗадачиДействийПорции[ДействиеЗадачи]; 
		
		СозданОтветныйДокумент = Ложь;
		ЗарегистрированОтветныйДокумент = Ложь;
		
		ПараметрыОтбора = Новый Структура("ЗадачаДействия", ЗадачаДействия);
		СтрокиЗадачиДействия = ТаблицаРезультата.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаЗадачиДействия Из СтрокиЗадачиДействия Цикл
			
			СозданОтветныйДокумент = Истина;
			Если ДелопроизводствоКлиентСервер.ДокументЗарегистрирован(СтрокаЗадачиДействия.РегистрационныйНомер) Тогда
				ЗарегистрированОтветныйДокумент = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗарегистрированОтветныйДокумент Тогда
			
			РаботаСЗадачами.ДобавитьПоступившееОбновлениеЗадачи(
				НовыеПоступившиеОбновленияЗадач,
				ДействиеЗадачи,
				Справочники.СобытияОбновленияЗадач.ЗарегистрированОтветныйДокумент);
			
		ИначеЕсли СозданОтветныйДокумент Тогда
			
			РаботаСЗадачами.ДобавитьПоступившееОбновлениеЗадачи(
				НовыеПоступившиеОбновленияЗадач,
				ДействиеЗадачи,
				Справочники.СобытияОбновленияЗадач.СозданОтветныйДокумент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает регистрацию исходящего документа, отмечая событие "Зарегистрирован исходящий документ".
//
// Параметры:
//  ЗарегистрированныйДокумент - СправочникСсылка.ДокументыПредприятия - Зарегистрированный исходящий документ.
//
Процедура ОбработатьРегистрациюИсходящегоДокумента(ЗарегистрированныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Ищем связанный входящий документ, ответ на который отправлен.
	ДокументыНаКоторыеОтправленОтвет = СвязиОбъектов.ПолучитьСвязанныеОбъекты(
		ЗарегистрированныйДокумент,
		Справочники.ТипыСвязей.ОтправленВОтветНа);
	Если ДокументыНаКоторыеОтправленОтвет.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НовыеПоступившиеОбновленияЗадач = РаботаСЗадачами.НовыеПоступившиеОбновленияЗадач();
	
	// Регистрация исходящего документа, который подготовлен в ответ на входящий - будет формироваться
	// событие "Зарегистрирован исходящий документ" для всех активных задач по входящему документу.
	ОжидающиеВыполненияДействияЗадач = РаботаСЗадачами.ОжидающиеВыполненияДействияЗадачПоПриложениям(
		ДокументыНаКоторыеОтправленОтвет);
	Для Каждого ДействиеЗадачи Из ОжидающиеВыполненияДействияЗадач Цикл
		РаботаСЗадачами.ДобавитьПоступившееОбновлениеЗадачи(
			НовыеПоступившиеОбновленияЗадач,
			ДействиеЗадачи,
			Справочники.СобытияОбновленияЗадач.ЗарегистрированОтветныйДокумент);
	КонецЦикла;
	
	РаботаСЗадачами.ЗаписатьПоступившиеОбновленияЗадач(НовыеПоступившиеОбновленияЗадач, Ложь);
	
КонецПроцедуры

// Обрабатывает создание связи документа:
// В случае создание связи "Отправлен ответ" между входящим документом и зарегистрированным исходящим документом -
// будет формироваться событие "Зарегистрирован исходящий документ" для всех активных задач по входящему документу.
// В случае, если исходящий ещё не зарегистрирован - будет формироваться событие "Исходящий не зарегистрирован".
//
// Параметры:
//  Документ - Произвольный.
//  СвязанныйДокумент - Произвольный.
//  ТипСвязи - СправочникСсылка.ТипыСвязей.
//
Процедура ОбработатьСозданиеСвязи(Документ, СвязанныйДокумент, ТипСвязи) Экспорт
	
	УстановленаСвязьОтправленОтвет =
		ТипЗнч(Документ) = Тип("СправочникСсылка.ДокументыПредприятия")
		И ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.ДокументыПредприятия")
		И ТипСвязи = Справочники.ТипыСвязей.ОтправленОтвет;
	Если Не УстановленаСвязьОтправленОтвет Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыеПоступившиеОбновленияЗадач = РаботаСЗадачами.НовыеПоступившиеОбновленияЗадач();
	
	// Создание связи "Отправлен ответ" между входящим документом и зарегистрированным исходящим документом -
	// будет формироваться событие "Зарегистрирован исходящий документ" для всех активных задач по входящему документу.
	// В случае, если исходящий ещё не зарегистрирован - будет формироваться событие "Исходящий не зарегистрирован".
	ДокументЗарегистрирован = Делопроизводство.ДокументЗарегистрирован(СвязанныйДокумент);
	СобытиеОбновления = ?(ДокументЗарегистрирован,
		Справочники.СобытияОбновленияЗадач.ЗарегистрированОтветныйДокумент,
		Справочники.СобытияОбновленияЗадач.СозданОтветныйДокумент);
	
	ДокументыНаКоторыеОтправленОтвет = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
	
	ОжидающиеВыполненияДействияЗадач = РаботаСЗадачами.ОжидающиеВыполненияДействияЗадачПоПриложениям(
		ДокументыНаКоторыеОтправленОтвет);
	Для Каждого ДействиеЗадачи Из ОжидающиеВыполненияДействияЗадач Цикл
		РаботаСЗадачами.ДобавитьПоступившееОбновлениеЗадачи(
			НовыеПоступившиеОбновленияЗадач,
			ДействиеЗадачи,
			СобытиеОбновления);
	КонецЦикла;
	
	РаботаСЗадачами.ЗаписатьПоступившиеОбновленияЗадач(НовыеПоступившиеОбновленияЗадач, Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Определяет вид задачи по источнику.
//
// Параметры:
//  ИсточникЗадачи - ОпределяемыйТип.ИсточникЗадач - Источник задачи.
// 
// Возвращаемое значение:
//  ВидЗадачи - Вид задачи.
//
Функция ВидЗадачиПоИсточнику(ИсточникЗадачи) Экспорт
	
	Если ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		Возврат Справочники.ВидыЗадач.Исполнение;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		
		Возврат Справочники.ВидыЗадач.Ознакомление;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Подписание") Тогда
		
		Возврат Справочники.ВидыЗадач.Подписание;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		Возврат Справочники.ВидыЗадач.Приглашение;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		Возврат Справочники.ВидыЗадач.Рассмотрение;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		Возврат Справочники.ВидыЗадач.Регистрация;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		
		ВидВопроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникЗадачи, "ВидВопроса");
		Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			
			Возврат Справочники.ВидыЗадач.ЗапросНаПереносСрока;
			
		ИначеЕсли ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.Иное Тогда
			
			Возврат Справочники.ВидыЗадач.Вопрос;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		Возврат Справочники.ВидыЗадач.Согласование;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		Возврат Справочники.ВидыЗадач.Утверждение;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		Возврат Справочники.ВидыЗадач.Ознакомление;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный источник задачи %1 (%2)'"),
			ИсточникЗадачи,
			ТипЗнч(ИсточникЗадачи));
		
	КонецЕсли;
	
КонецФункции

// Определяет данные циклов по источнику действия.
//
// Параметры:
//   ИсточникДействия - ОпределяемыйТип.ИсточникДействийЗадач.
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   Структура, Неопределено - Данные циклов.
//
Функция ДанныеЦиклов(ИсточникДействия, КешДанных = Неопределено) Экспорт
	
	ДанныеЦиклов = Неопределено;
	Если Не ЗначениеЗаполнено(ИсточникДействия) Или ТипЗнч(ИсточникДействия) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат ДанныеЦиклов;
	КонецЕсли;
	
	НомерИтерации = 0;
	НавигационнаяСсылкаИстории = "";
	
	// В трекере задач отображаются задачи только последней итерации.
	// Логика определения по конкретному источнику номера итерации не требуется.
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыЗадачи = Неопределено;
	Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеЗадачИсполнителей") Тогда
		РеквизитыЗадачи = КешДанных.ДанныеЗадачИсполнителей[ИсточникДействия];
	КонецЕсли;
	Если РеквизитыЗадачи = Неопределено Тогда
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникДействия,
			"БизнесПроцесс, ТочкаМаршрута");
	КонецЕсли;
	
	Если Не ОбщегоНазначения.СсылкаСуществует(РеквизитыЗадачи.БизнесПроцесс) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Битая ссылка на процесс %1 для задачи процесса %2'"),
			РеквизитыЗадачи.БизнесПроцесс,
			ИсточникДействия);
	КонецЕсли;
	
	Если РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение
		Или РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыЗадачи.БизнесПроцесс,
			"НомерИтерации, РезультатыПроверки");
		
		РезультатыПроверки = РеквизитыПроцесса.РезультатыПроверки.Выгрузить();
		РезультатыПроверки.Сортировать("НомерСтроки Возр");
		
		НайденнаяСтрока = РезультатыПроверки.Найти(ИсточникДействия, "ЗадачаПроверяющего");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
		Иначе
			НомерИтерации = РеквизитыПроцесса.НомерИтерации;
		КонецЕсли;
		
		НавигационнаяСсылкаИстории = СтрШаблон(
			"v8doc:tasks/ShowPerformanceHistory/%1",
			ПолучитьНавигационнуюСсылку(ИсточникДействия));
		
	ИначеЕсли РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать
		Или РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание
		Или РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыЗадачи.БизнесПроцесс,
			"НомерИтерации, РезультатыОбработок");
		
		РезультатыОбработок = РеквизитыПроцесса.РезультатыОбработок.Выгрузить();
		РезультатыОбработок.Сортировать("НомерСтроки Возр");
		
		НайденнаяСтрока = РезультатыОбработок.Найти(ИсточникДействия, "ЗадачаПроцесса");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
		Иначе
			НомерИтерации = РеквизитыПроцесса.НомерИтерации;
		КонецЕсли;
		
		НавигационнаяСсылкаИстории = СтрШаблон(
			"v8doc:tasks/ShowSigningHistory/%1",
			ПолучитьНавигационнуюСсылку(ИсточникДействия));
		
	ИначеЕсли РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить
		Или РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыЗадачи.БизнесПроцесс,
			"НомерИтерации, РезультатыОзнакомлений");
		
		РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
		РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
		
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(ИсточникДействия, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
		Иначе
			НомерИтерации = РеквизитыПроцесса.НомерИтерации;
		КонецЕсли;
		
		НавигационнаяСсылкаИстории = СтрШаблон(
			"v8doc:tasks/ShowInvitationHistory/%1",
			ПолучитьНавигационнуюСсылку(ИсточникДействия));
		
	ИначеЕсли РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать
		Или РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыЗадачи.БизнесПроцесс,
			"НомерИтерации, РезультатыОзнакомлений");
		
		РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
		РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
		
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(ИсточникДействия, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
		Иначе
			НомерИтерации = РеквизитыПроцесса.НомерИтерации;
		КонецЕсли;
		
		НавигационнаяСсылкаИстории = СтрШаблон(
			"v8doc:tasks/ShowRegistrationHistory/%1",
			ПолучитьНавигационнуюСсылку(ИсточникДействия));
		
	ИначеЕсли РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать
		Или РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыЗадачи.БизнесПроцесс,
			"НомерИтерации, РезультатыОзнакомлений");
		
		РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
		РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
		
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(ИсточникДействия, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
		Иначе
			НомерИтерации = РеквизитыПроцесса.НомерИтерации;
		КонецЕсли;
		
		НавигационнаяСсылкаИстории = СтрШаблон(
			"v8doc:tasks/ShowReconciliationHistory/%1",
			ПолучитьНавигационнуюСсылку(ИсточникДействия));
		
	ИначеЕсли РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить
		Или РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыЗадачи.БизнесПроцесс,
			"НомерИтерации, РезультатыОзнакомлений");
		
		РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
		РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
		
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(ИсточникДействия, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
		Иначе
			НомерИтерации = РеквизитыПроцесса.НомерИтерации;
		КонецЕсли;
		
		НавигационнаяСсылкаИстории = СтрШаблон(
			"v8doc:tasks/ShowConfirmationHistory/%1",
			ПолучитьНавигационнуюСсылку(ИсточникДействия));
		
	КонецЕсли;
	
	Если НомерИтерации > 1 Тогда 
		ДанныеЦиклов = Новый Структура("НомерИтерации, НавигационнаяСсылкаИстории");
		ДанныеЦиклов.НомерИтерации = НомерИтерации;
		ДанныеЦиклов.НавигационнаяСсылкаИстории = НавигационнаяСсылкаИстории;
	КонецЕсли;
	
	Возврат ДанныеЦиклов;
	
КонецФункции

// Проверяет, доступно ли перенаправление задач. Если оно недоступно - возвращает массив сообщений об причинах.
//
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задачи или действия задач.
//  Кому - ОпределяемыйТип.УчастникЗадач - Кому перенаправляются задачи.
// 
// Возвращаемое значение:
//  Массив из Строка - Сообщения об ошибке.
//
Функция ДоступноПеренаправлениеЗадачи(ЗадачиИлиДействия, Кому) Экспорт
	
	СообщенияОбОшибках = Новый Массив;
	
	ИсточникиЗадач = РаботаСЗадачами.ИсточникиЗадач(ЗадачиИлиДействия);
	
	// Проверка прав доступа кому перенаправляем процесс.
	ДоступноПеренаправлениеЗадачиПроверкаПравДоступа(
		ЗадачиИлиДействия,
		Кому,
		ИсточникиЗадач,
		СообщенияОбОшибках);
	
	// Проверка наличия нового исполнителя среди исполнителей проектной задачи.
	ДоступноПеренаправлениеЗадачиПроверкаКомандыПроекта(
		ЗадачиИлиДействия,
		Кому,
		ИсточникиЗадач,
		СообщенияОбОшибках);
	
	Возврат СообщенияОбОшибках;
	
КонецФункции

// Заполняет контейнеры объекта.
// 
Процедура ЗаполнитьКонтейнерыОбъекта(ОбъектДоступа, КонтейнерыДескрипторов) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектДоступа.Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// Участники процессов.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчастникиПроцессов.Участник
		|ИЗ
		|	РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
		|ГДЕ
		|	УчастникиПроцессов.Процесс = &Процесс");
	Запрос.УстановитьПараметр("Процесс", ОбъектДоступа.Источник);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Участник) = Тип("СправочникСсылка.Проекты") Тогда
			
			ПроектКонтейнер = Справочники.ПроектыКонтейнеры.НайтиСоздатьПроектКонтейнер(
				Выборка.Участник,
				Перечисления.СпособВключенияУчастниковПроекта.ТолькоРуководитель);
			СтрокаКонтейнера = КонтейнерыДескрипторов.Добавить();
			СтрокаКонтейнера.КонтейнерСотрудников = ПроектКонтейнер;
			СтрокаКонтейнера.Изменение = Ложь;
			
		Иначе
			
			СтрокаКонтейнера = КонтейнерыДескрипторов.Добавить();
			СтрокаКонтейнера.КонтейнерСотрудников = Выборка.Участник;
			СтрокаКонтейнера.Изменение = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет задачу по источнику.
//
// Параметры:
//  ЗадачаОбъект - ДокументОбъект.Задача - Задача.
//  ИсточникЗадачи - ОпределяемыйТип.ИсточникЗадач - Источник задачи.
//
Процедура ЗаполнитьПоИсточнику(ЗадачаОбъект, ИсточникЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УчастникиПоВидам = Новый Соответствие;
	ВнешниеИдентификаторыУчастников = Новый Соответствие;
	ВсеВидыУчастников = Новый Массив;
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ЗадачаОбъект.ВидЗадачи);
	
	Если ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		ЗаполнитьЗадачуПоБизнесПроцессу(ЗадачаОбъект, ИсточникЗадачи);
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"Наименование, Описание, Проверяющий, ИдентификаторПроверяющего, Исполнители");
		
		ИсполнителиПроцесса = РеквизитыПроцесса.Исполнители.Выгрузить();
		ИсполнителиПроцесса.Сортировать("НомерСтроки Возр");
		ЗаменитьПользователяВКолонке(ИсполнителиПроцесса, "Исполнитель");
		
		ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Проверяющий");
		
		Если ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.ВРаботе Тогда
			
			АктивныеТочкиМаршрута = РаботаСБизнесПроцессами.АктивныеТочкиМаршрута(ИсточникЗадачи);
			Если АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение) <> Неопределено
				Или АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить) <> Неопределено Тогда
				
				ТочкиМаршрутаСостояния = Новый Массив;
				ТочкиМаршрутаСостояния.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение);
				ТочкиМаршрутаСостояния.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
				
				ТочкиМаршрутаНеПринятыКИсполнению = РаботаСБизнесПроцессами.ТочкиМаршрутаНеПринятыКИсполнению(
					ИсточникЗадачи,
					ТочкиМаршрутаСостояния);
				Если ТочкиМаршрутаНеПринятыКИсполнению Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				Иначе
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			ИначеЕсли АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить) <> Неопределено Тогда
				
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
				ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				
			КонецЕсли;
			
		ИначеЕсли ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Закрыта Тогда
			
			ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
			ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполнено;
			
		КонецЕсли;
		
		Для Каждого СтрокаИсполнителя Из ИсполнителиПроцесса Цикл
			
			ВидУчастника = ?(СтрокаИсполнителя.Ответственный,
				ДанныеВидаЗадачи.ВидУчастникаОтветственный,
				ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
			
			ДобавитьУчастника(
				УчастникиПоВидам,
				ВнешниеИдентификаторыУчастников,
				ВидУчастника,
				СтрокаИсполнителя.Исполнитель,
				СтрокаИсполнителя.ИдентификаторИсполнителя);
				
		КонецЦикла;
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаОтветственный);
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
		
		ДобавитьУчастника(
			УчастникиПоВидам,
			ВнешниеИдентификаторыУчастников,
			ДанныеВидаЗадачи.ВидУчастникаПроверяющий,
			РеквизитыПроцесса.Проверяющий,
			РеквизитыПроцесса.ИдентификаторПроверяющего);
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		
		ЗаполнитьЗадачуПоБизнесПроцессу(ЗадачаОбъект, ИсточникЗадачи);
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"Исполнители, Описание");
		
		ИсполнителиПроцесса = РеквизитыПроцесса.Исполнители.Выгрузить();
		ИсполнителиПроцесса.Сортировать("НомерСтроки Возр");
		
		ЗаменитьПользователяВКолонке(ИсполнителиПроцесса, "Исполнитель");
		
		Для Каждого СтрокаИсполнителя Из ИсполнителиПроцесса Цикл
			
			ДобавитьУчастника(
				УчастникиПоВидам,
				ВнешниеИдентификаторыУчастников,
				ДанныеВидаЗадачи.ВидУчастникаИсполнитель,
				СтрокаИсполнителя.Исполнитель,
				СтрокаИсполнителя.ИдентификаторИсполнителя);
				
		КонецЦикла;
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
		
		Если ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.ВРаботе Тогда
			
			АктивныеТочкиМаршрута = РаботаСБизнесПроцессами.АктивныеТочкиМаршрута(ИсточникЗадачи);
			Если АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться) <> Неопределено Тогда
				
				ТочкиМаршрутаСостояния = Новый Массив;
				ТочкиМаршрутаСостояния.Добавить(БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться);
				
				ТочкиМаршрутаНеПринятыКИсполнению = РаботаСБизнесПроцессами.ТочкиМаршрутаНеПринятыКИсполнению(
					ИсточникЗадачи,
					ТочкиМаршрутаСостояния);
				Если ТочкиМаршрутаНеПринятыКИсполнению Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				Иначе
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Закрыта Тогда
			
			ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
			ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполнено;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Подписание") Тогда
		
		ЗаполнитьЗадачуПоБизнесПроцессу(ЗадачаОбъект, ИсточникЗадачи);
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"РезультатПодписания, Участники");
		
		УчастникиПроцесса = РеквизитыПроцесса.Участники.Выгрузить();
		УчастникиПроцесса.Сортировать("НомерСтроки Возр");
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		
		Для Каждого СтрокаУчастника Из УчастникиПроцесса Цикл
			
			Если СтрокаУчастника.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать Тогда
				
				ВидУчастникаЗадачи = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
				ВидУчастникаДляСортировки = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
				
			ИначеЕсли СтрокаУчастника.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание Тогда
				
				ВидУчастникаЗадачи = Справочники.ВидыУчастниковЗадач.ОбеспечивающийПодписание;
				ВидУчастникаДляСортировки = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
				
			ИначеЕсли СтрокаУчастника.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат Тогда
				
				ВидУчастникаЗадачи = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
				ВидУчастникаДляСортировки = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестная точка маршрута ""%1"" участника процесса Подписание.'"),
					СтрокаУчастника.ТочкаМаршрута);
					
			КонецЕсли;
			
			ДобавитьУчастника(
				УчастникиПоВидам,
				ВнешниеИдентификаторыУчастников,
				ВидУчастникаЗадачи,
				СтрокаУчастника.Участник,
				СтрокаУчастника.Идентификатор,
				ВидУчастникаДляСортировки);
			
		КонецЦикла;
		
		Если ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.ВРаботе Тогда
			
			АктивныеТочкиМаршрута = РаботаСБизнесПроцессами.АктивныеТочкиМаршрута(ИсточникЗадачи);
			Если АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать) <> Неопределено
				Или АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание) <> Неопределено Тогда
				
				ТочкиМаршрутаСостояния = Новый Массив;
				ТочкиМаршрутаСостояния.Добавить(БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать);
				ТочкиМаршрутаСостояния.Добавить(БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание);
				
				ТочкиМаршрутаНеПринятыКИсполнению = РаботаСБизнесПроцессами.ТочкиМаршрутаНеПринятыКИсполнению(
					ИсточникЗадачи,
					ТочкиМаршрутаСостояния);
				Если ТочкиМаршрутаНеПринятыКИсполнению Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				Иначе
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			ИначеЕсли АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат) <> Неопределено Тогда
				
				Если РеквизитыПроцесса.РезультатПодписания = Перечисления.РезультатыПодписания.Подписано Тогда
					ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.НаОзнакомленииСРезультатом;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				ИначеЕсли РеквизитыПроцесса.РезультатПодписания = Перечисления.РезультатыПодписания.НеПодписано Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Закрыта Тогда
			
			Если РеквизитыПроцесса.РезультатПодписания = Перечисления.РезультатыПодписания.Подписано Тогда
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
				ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполнено;
			ИначеЕсли РеквизитыПроцесса.РезультатПодписания = Перечисления.РезультатыПодписания.НеПодписано Тогда
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно;
				ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполненоОтрицательно;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		ЗаполнитьЗадачуПоБизнесПроцессу(ЗадачаОбъект, ИсточникЗадачи);
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"Автор, ИдентификаторОбрабатывающегоРезультат, Исполнители,
			|НомерИтерации, Описание, РезультатПриглашения, РезультатыПриглашения");
		РезультатПриглашения = РеквизитыПроцесса.РезультатПриглашения;
		
		ИсполнителиПроцесса = РеквизитыПроцесса.Исполнители.Выгрузить();
		ИсполнителиПроцесса.Сортировать("НомерСтроки Возр");
		
		РезультатыПриглашения = РеквизитыПроцесса.РезультатыПриглашения.Выгрузить();
		РезультатыПриглашения.Сортировать("НомерСтроки Возр");
		
		ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Автор");
		ЗаменитьПользователяВКолонке(ИсполнителиПроцесса, "Исполнитель");
		
		Для Каждого СтрокаИсполнителя Из ИсполнителиПроцесса Цикл
			
			ДобавитьУчастника(
				УчастникиПоВидам,
				ВнешниеИдентификаторыУчастников,
				ДанныеВидаЗадачи.ВидУчастникаИсполнитель,
				СтрокаИсполнителя.Исполнитель,
				СтрокаИсполнителя.ИдентификаторИсполнителя);
				
		КонецЦикла;
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
		
		ДобавитьУчастника(
			УчастникиПоВидам,
			ВнешниеИдентификаторыУчастников,
			ДанныеВидаЗадачи.ВидУчастникаПроверяющий,
			РеквизитыПроцесса.Автор,
			РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат);
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		
		Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками
			Или РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками Тогда 
			
			Для Каждого Строка Из РезультатыПриглашения Цикл
				
				Если Строка.НомерИтерации = РеквизитыПроцесса.НомерИтерации Тогда
					
					Если Строка.НеУчитывать Тогда
						Продолжить;
					КонецЕсли;
					
					Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаИсполнителя = ИсполнителиПроцесса.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
					Если СтрокаИсполнителя = Неопределено Тогда 
						СтрокаИсполнителя = Строка.ЗадачаИсполнителя;
					КонецЕсли;
					
					ДобавитьУчастника(
						УчастникиПоВидам,
						ВнешниеИдентификаторыУчастников,
						Справочники.ВидыУчастниковЗадач.ОзнакомляемыйСРезультатом,
						СтрокаИсполнителя.Исполнитель,
						УникальныйИдентификаторПустой());
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВсеВидыУчастников.Добавить(Справочники.ВидыУчастниковЗадач.ОзнакомляемыйСРезультатом);
		
		Если ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.ВРаботе Тогда
			
			АктивныеТочкиМаршрута = РаботаСБизнесПроцессами.АктивныеТочкиМаршрута(ИсточникЗадачи);
			Если АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить) <> Неопределено Тогда
				
				ТочкиМаршрутаСостояния = Новый Массив;
				ТочкиМаршрутаСостояния.Добавить(БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить);
				
				ТочкиМаршрутаНеПринятыКИсполнению = РаботаСБизнесПроцессами.ТочкиМаршрутаНеПринятыКИсполнению(
					ИсточникЗадачи,
					ТочкиМаршрутаСостояния);
				Если ТочкиМаршрутаНеПринятыКИсполнению Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				Иначе
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			ИначеЕсли АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться) <> Неопределено Тогда
				
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
				ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				
			ИначеЕсли АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить) <> Неопределено Тогда
				
				ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.НаОзнакомленииСРезультатом;
				ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				
			КонецЕсли;
			
		ИначеЕсли ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Закрыта Тогда
			
			Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
				Или РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
				
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
				ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполнено;
				
			ИначеЕсли РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками
				Или РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками Тогда
				
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно;
				ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполненоОтрицательно;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		ЗаполнитьЗадачуПоБизнесПроцессу(ЗадачаОбъект, ИсточникЗадачи);
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"ОбрабатывающийРезолюцию, ИдентификаторОбрабатывающегоРезолюцию, ВариантРассмотрения,
			|Исполнитель, ИдентификаторИсполнителя, Описание");
		
		ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "ОбрабатывающийРезолюцию");
		ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Исполнитель");
		
		Если ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.ВРаботе Тогда
			
			АктивныеТочкиМаршрута = РаботаСБизнесПроцессами.АктивныеТочкиМаршрута(ИсточникЗадачи);
			Если АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть) <> Неопределено Тогда
				
				ТочкиМаршрутаСостояния = Новый Массив;
				ТочкиМаршрутаСостояния.Добавить(БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
				
				ТочкиМаршрутаНеПринятыКИсполнению = РаботаСБизнесПроцессами.ТочкиМаршрутаНеПринятыКИсполнению(
					ИсточникЗадачи,
					ТочкиМаршрутаСостояния);
				Если ТочкиМаршрутаНеПринятыКИсполнению Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				Иначе
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			ИначеЕсли АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться) <> Неопределено Тогда
				
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
				ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				
			КонецЕсли;
			
		ИначеЕсли ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Закрыта Тогда
			
			ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
			ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполнено;
			
		КонецЕсли;
		
		ДобавитьУчастника(
			УчастникиПоВидам,
			ВнешниеИдентификаторыУчастников,
			ДанныеВидаЗадачи.ВидУчастникаИсполнитель,
			РеквизитыПроцесса.Исполнитель,
			РеквизитыПроцесса.ИдентификаторИсполнителя);
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
		
		ДобавитьУчастника(
			УчастникиПоВидам,
			ВнешниеИдентификаторыУчастников,
			ДанныеВидаЗадачи.ВидУчастникаПроверяющий,
			РеквизитыПроцесса.ОбрабатывающийРезолюцию,
			РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезолюцию);
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		ЗаполнитьЗадачуПоБизнесПроцессу(ЗадачаОбъект, ИсточникЗадачи);
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"ОбрабатывающийРезультат, ИдентификаторОбрабатывающегоРезультат,
			|Исполнитель, ИдентификаторИсполнителя, Описание, РезультатРегистрации");
		РезультатРегистрации = РеквизитыПроцесса.РезультатРегистрации;
		
		ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "ОбрабатывающийРезультат");
		ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Исполнитель");
		
		Если ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.ВРаботе Тогда
			
			АктивныеТочкиМаршрута = РаботаСБизнесПроцессами.АктивныеТочкиМаршрута(ИсточникЗадачи);
			Если АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать) <> Неопределено Тогда
				
				ТочкиМаршрутаСостояния = Новый Массив;
				ТочкиМаршрутаСостояния.Добавить(БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать);
				
				ТочкиМаршрутаНеПринятыКИсполнению = РаботаСБизнесПроцессами.ТочкиМаршрутаНеПринятыКИсполнению(
					ИсточникЗадачи,
					ТочкиМаршрутаСостояния);
				Если ТочкиМаршрутаНеПринятыКИсполнению Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				Иначе
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			ИначеЕсли АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться) <> Неопределено Тогда
				
				Если РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда
					ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.НаОзнакомленииСРезультатом;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				ИначеЕсли РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Закрыта Тогда
			
			Если РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
				ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполнено;
			ИначеЕсли РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно;
				ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполненоОтрицательно;
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьУчастника(
			УчастникиПоВидам,
			ВнешниеИдентификаторыУчастников,
			ДанныеВидаЗадачи.ВидУчастникаИсполнитель,
			РеквизитыПроцесса.Исполнитель,
			РеквизитыПроцесса.ИдентификаторИсполнителя);
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
		
		ДобавитьУчастника(
			УчастникиПоВидам,
			ВнешниеИдентификаторыУчастников,
			ДанныеВидаЗадачи.ВидУчастникаПроверяющий,
			РеквизитыПроцесса.ОбрабатывающийРезультат,
			РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат);
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		
		ЗаполнитьЗадачуПоБизнесПроцессу(ЗадачаОбъект, ИсточникЗадачи);
		
		ЗаголовокИОписание =
			БизнесПроцессы.РешениеВопросовВыполненияЗадач.ЗаголовокИОписаниеЗадачи(ИсточникЗадачи);
		
		ЗадачаОбъект.Заголовок = ЗаголовокИОписание.Заголовок;
		ЗадачаОбъект.УстановитьОписание(ЗаголовокИОписание.Описание);
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"Автор, ИдентификаторАвтораВопроса, ВидВопроса, ПредметРассмотрения,
			|ИнициаторПроцесса, ИдентификаторИнициатораПроцесса, Описание");
		
		ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Автор");
		ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "ИнициаторПроцесса");
		
		ДобавитьУчастника(
			УчастникиПоВидам,
			ВнешниеИдентификаторыУчастников,
			ДанныеВидаЗадачи.ВидУчастникаИсполнитель,
			РеквизитыПроцесса.ИнициаторПроцесса,
			РеквизитыПроцесса.ИдентификаторИнициатораПроцесса);
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
		
		Если ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.ВРаботе Тогда
			
			АктивныеТочкиМаршрута = РаботаСБизнесПроцессами.АктивныеТочкиМаршрута(ИсточникЗадачи);
			Если АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором) <> Неопределено Тогда
				
				ТочкиМаршрутаСостояния = Новый Массив;
				ТочкиМаршрутаСостояния.Добавить(БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором);
				
				ТочкиМаршрутаНеПринятыКИсполнению = РаботаСБизнесПроцессами.ТочкиМаршрутаНеПринятыКИсполнению(
					ИсточникЗадачи,
					ТочкиМаршрутаСостояния);
				Если ТочкиМаршрутаНеПринятыКИсполнению Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				Иначе
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			ИначеЕсли АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения) <> Неопределено Тогда
				
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
				ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				
			КонецЕсли;
			
		ИначеЕсли ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Закрыта Тогда
			
			ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
			ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполнено;
			
		КонецЕсли;
		
		ДобавитьУчастника(
			УчастникиПоВидам,
			ВнешниеИдентификаторыУчастников,
			ДанныеВидаЗадачи.ВидУчастникаПроверяющий,
			РеквизитыПроцесса.Автор,
			РеквизитыПроцесса.ИдентификаторАвтораВопроса);
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		
		// Дополнительно покажем приложения вышестоящей задачи.
		Если ЗначениеЗаполнено(РеквизитыПроцесса.ПредметРассмотрения)
			И ТипЗнч(РеквизитыПроцесса.ПредметРассмотрения) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			ЗадачаРассмотрения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыПроцесса.ПредметРассмотрения,
				"Задача");
			ПриложенияРассмотрения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ЗадачаРассмотрения,
				"Приложения");
			Для Каждого ПриложениеРассмотрения Из ПриложенияРассмотрения.Выгрузить() Цикл
				
				Если ЗадачаОбъект.Приложения.Найти(ПриложениеРассмотрения.Приложение, "Приложение") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПриложения = ЗадачаОбъект.Приложения.Добавить();
				СтрокаПриложения.Приложение = ПриложениеРассмотрения.Приложение;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Дополнительно покажем файлы процесса в задаче.
		ФайлыПроцесса = ФайлыПроцесса(ИсточникЗадачи);
		Для Каждого ФайлПроцесса Из ФайлыПроцесса Цикл
			
			Если ЗадачаОбъект.Приложения.Найти(ФайлПроцесса, "Приложение") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПриложения = ЗадачаОбъект.Приложения.Добавить();
			СтрокаПриложения.Приложение = ФайлПроцесса;
			
		КонецЦикла;
		
		// Настроим вышестоящие задачи.
		Если Не ЗначениеЗаполнено(ЗадачаОбъект.ВышестоящаяЗадача)
			И ТипЗнч(РеквизитыПроцесса.ПредметРассмотрения) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			ЗадачаОбъект.ВышестоящееДействие = РеквизитыПроцесса.ПредметРассмотрения;
			ЗадачаОбъект.ВышестоящаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыПроцесса.ПредметРассмотрения,
				"Задача");
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		ЗаполнитьЗадачуПоБизнесПроцессу(ЗадачаОбъект, ИсточникЗадачи);
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"ОбрабатывающийРезультат, ИдентификаторОбрабатывающегоРезультат, 
			|Исполнители, Описание, РезультатСогласования");
		РезультатСогласования = РеквизитыПроцесса.РезультатСогласования;
		ИсполнителиПроцесса = РеквизитыПроцесса.Исполнители.Выгрузить();
		ИсполнителиПроцесса.Сортировать("НомерСтроки Возр");
		
		ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "ОбрабатывающийРезультат");
		ЗаменитьПользователяВКолонке(ИсполнителиПроцесса, "Исполнитель");
		
		Для Каждого СтрокаИсполнителя Из ИсполнителиПроцесса Цикл
			
			ДобавитьУчастника(
				УчастникиПоВидам,
				ВнешниеИдентификаторыУчастников,
				ДанныеВидаЗадачи.ВидУчастникаИсполнитель,
				СтрокаИсполнителя.Исполнитель,
				СтрокаИсполнителя.ИдентификаторИсполнителя);
			
		КонецЦикла;
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
		
		ДобавитьУчастника(
			УчастникиПоВидам,
			ВнешниеИдентификаторыУчастников,
			ДанныеВидаЗадачи.ВидУчастникаПроверяющий,
			РеквизитыПроцесса.ОбрабатывающийРезультат,
			РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат);
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		
		Если ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.ВРаботе Тогда
			
			АктивныеТочкиМаршрута = РаботаСБизнесПроцессами.АктивныеТочкиМаршрута(ИсточникЗадачи);
			Если АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать) <> Неопределено Тогда
				
				ТочкиМаршрутаСостояния = Новый Массив;
				ТочкиМаршрутаСостояния.Добавить(БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);
				
				ТочкиМаршрутаНеПринятыКИсполнению = РаботаСБизнесПроцессами.ТочкиМаршрутаНеПринятыКИсполнению(
					ИсточникЗадачи,
					ТочкиМаршрутаСостояния);
				Если ТочкиМаршрутаНеПринятыКИсполнению Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				Иначе
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			ИначеЕсли АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться) <> Неопределено Тогда
				
				Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
					ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.НаОзнакомленииСРезультатом;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями
					Или РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Закрыта Тогда
			
			Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
				ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполнено;
			ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями;
				ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполненоСЗамечаниями;
			ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно;
				ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполненоОтрицательно;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		ЗаполнитьЗадачуПоБизнесПроцессу(ЗадачаОбъект, ИсточникЗадачи);
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"ОбрабатывающийРезультат, ИдентификаторОбрабатывающегоРезультат,
			|Исполнитель, ИдентификаторИсполнителя, Описание, РезультатУтверждения");
		РезультатУтверждения = РеквизитыПроцесса.РезультатУтверждения;
		
		ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "ОбрабатывающийРезультат");
		ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Исполнитель");
		
		Если ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.ВРаботе Тогда
			
			АктивныеТочкиМаршрута = РаботаСБизнесПроцессами.АктивныеТочкиМаршрута(ИсточникЗадачи);
			Если АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить) <> Неопределено Тогда
				
				ТочкиМаршрутаСостояния = Новый Массив;
				ТочкиМаршрутаСостояния.Добавить(БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить);
				
				ТочкиМаршрутаНеПринятыКИсполнению = РаботаСБизнесПроцессами.ТочкиМаршрутаНеПринятыКИсполнению(
					ИсточникЗадачи,
					ТочкиМаршрутаСостояния);
				Если ТочкиМаршрутаНеПринятыКИсполнению Тогда
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				Иначе
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
				КонецЕсли;
				
			ИначеЕсли АктивныеТочкиМаршрута.Найти(
					БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться) <> Неопределено Тогда
				
				Если РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
					
					ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.НаОзнакомленииСРезультатом;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
					
				ИначеЕсли РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
					
					ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
					ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Закрыта Тогда
			
			Если РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
				
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
				ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполнено;
				
			ИначеЕсли РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
				
				ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно;
				ЗадачаОбъект.РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполненоОтрицательно;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьУчастника(
			УчастникиПоВидам,
			ВнешниеИдентификаторыУчастников,
			ДанныеВидаЗадачи.ВидУчастникаИсполнитель,
			РеквизитыПроцесса.Исполнитель,
			РеквизитыПроцесса.ИдентификаторИсполнителя);
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
		
		ДобавитьУчастника(
			УчастникиПоВидам,
			ВнешниеИдентификаторыУчастников,
			ДанныеВидаЗадачи.ВидУчастникаПроверяющий,
			РеквизитыПроцесса.ОбрабатывающийРезультат,
			РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат);
		
		ВсеВидыУчастников.Добавить(ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		
		
	ИначеЕсли ТипЗнч(ИсточникЗадачи) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникЗадачи,
			"Автор, ВидДействия, ПометкаУдаления, Предмет, ДатаСоздания"); 
		
		ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(ИсточникЗадачи);
		
		СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(ИсточникЗадачи); 
		
		РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ОбработкаДействия,
			"ПричинаПрерывания, Состояние, ДатаОкончания, Прервал"); 
		
		РеквизитыПредметаДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыДействия.Предмет,
			"Проект");         
			
		ЗадачаОбъект.Приоритет = Справочники.ПриоритетыЗадач.Обычный;
			
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(РеквизитыДействия.Предмет) Тогда
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДействия.Предмет,
				"Важность, ВидДокумента.ИспользоватьВажность");
			Если РеквизитыДокумента.ВидДокументаИспользоватьВажность = Истина Тогда
				ЗадачаОбъект.Приоритет = Справочники.ПриоритетыЗадач.НайтиПоВариантуВажности(РеквизитыДокумента.Важность);
			КонецЕсли;			
		КонецЕсли;
		
		РеквизитыИсточника = РеквизитыИсточника(ИсточникЗадачи);
		
		ДанныеОзнакомлений = РегистрыСведений.УчастникиОзнакомлений.ДанныеОзнакомлений(
			ИсточникЗадачи);
			
		Предметы = Новый Массив;
		Предметы.Добавить(РеквизитыИсточника.Предмет);
		ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыОзнакомленияСтрокой(Предметы, Истина, Ложь);
		НаименованиеИОписаниеПоДействию = РегистрыСведений.НаименованияЗадачУчастниковДействий.НаименованиеИОписаниеЗадачи(
			ИсточникЗадачи,
			Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый, 
			, 
			ПредметыСтрокой);
			
		ЗадачаОбъект.Автор = РеквизитыДействия.Автор; 
		ЗадачаОбъект.Дата = РеквизитыДействия.ДатаСоздания;
		ЗадачаОбъект.ДатаСоздания = РеквизитыДействия.ДатаСоздания;
		ЗадачаОбъект.ДатаНачала = ДанныеОзнакомлений.ДатаНачала;
		ЗадачаОбъект.ДатаВыполнения = ДанныеОзнакомлений.ДатаЗавершения;
		ЗадачаОбъект.Проект = РеквизитыПредметаДействия.Проект;
		ЗадачаОбъект.Заголовок = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметамиОзнакомления(
			РеквизитыДействия.ВидДействия,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДействия.Предмет));
		ЗадачаОбъект.Срок = ДанныеОзнакомлений.Срок;
		ЗадачаОбъект.Создал = Сотрудники.ПользовательСотрудника(РеквизитыДействия.Автор);     
		
		ЗадачаОбъект.ПричинаОтмены = "";
		ЗадачаОбъект.ДатаОтмены = Дата(1, 1, 1);
		ЗадачаОбъект.КтоОтменил = Неопределено;
		ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка(); 
		
		Если ДанныеОзнакомлений.Состояние = Перечисления.СостоянияОзнакомления.ПустаяСсылка() 
			И Не ЗначениеЗаполнено(СостояниеДействия) 
			И ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Новая Тогда
			
			ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Отменена;
			
		ИначеЕсли ДанныеОзнакомлений.Состояние = Перечисления.СостоянияОзнакомления.ПустаяСсылка()
			Или ДанныеОзнакомлений.Состояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении Тогда
			
			ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Новая;
			
		ИначеЕсли ДанныеОзнакомлений.Состояние = Перечисления.СостоянияОзнакомления.ВРаботе Тогда

			
			ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.НаОзнакомлении;
			
		ИначеЕсли ДанныеОзнакомлений.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился Тогда
			
			ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Ознакомлены;
			ЗадачаОбъект.РезультатЗадачи = Справочники.РезультатыЗадач.Ознакомлены;
			
		ИначеЕсли ДанныеОзнакомлений.Состояние = Перечисления.СостоянияОзнакомления.Отменено Тогда

			
			ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Отменена;
			
			ЗадачаОбъект.ПричинаОтмены = РеквизитыОбработки.ПричинаПрерывания;
			ЗадачаОбъект.ДатаОтмены = РеквизитыОбработки.ДатаОкончания;
			ЗадачаОбъект.КтоОтменил = РеквизитыОбработки.Прервал;

		ИначеЕсли ДанныеОзнакомлений.Состояние = Перечисления.СостоянияОзнакомления.НаПаузе Тогда
			
			ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиОтложена;
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестное состояние ознакомления %1.'"),
				ДанныеОзнакомлений.Состояние);
			
		КонецЕсли;
		
		ЗадачаОбъект.Приложения.Очистить();
		Если Не Метаданные.ОпределяемыеТипы.ПриложениеЗадач.Тип.СодержитТип(ТипЗнч(РеквизитыДействия.Предмет)) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Тип предмета действия не поддерживается задачами %1 (%2).'"),
				РеквизитыДействия.Предмет,
				ТипЗнч(РеквизитыДействия.Предмет));
		КонецЕсли;
		
		СтрокаПриложения = ЗадачаОбъект.Приложения.Добавить();
		СтрокаПриложения.Приложение = РеквизитыДействия.Предмет;
		
		ЗадачаОбъект.УстановитьОписание("");
		
		Если НаименованиеИОписаниеПоДействию <> Неопределено 
			И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Описание) Тогда
			ЗадачаОбъект.УстановитьОписание(НаименованиеИОписаниеПоДействию.Описание);
		КонецЕсли;	
		Если НаименованиеИОписаниеПоДействию <> Неопределено 
			И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
			ЗадачаОбъект.Заголовок = НаименованиеИОписаниеПоДействию.Наименование;
		КонецЕсли;	
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный источник задачи %1 (%2)'"),
			ИсточникЗадачи,
			ТипЗнч(ИсточникЗадачи));
		
	КонецЕсли;
	
	УстановитьУчастников(
		ЗадачаОбъект,
		УчастникиПоВидам,
		ВнешниеИдентификаторыУчастников,
		ВсеВидыУчастников);
	
КонецПроцедуры

// Обрабатывает взятие в работу действия задачи источником.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  КтоОтметил - СправочникСсылка.Сотрудники.
//  ВыбранныйФактическийИсполнитель - Структура.
// 
// Возвращаемое значение:
//  Структура - Результат взятия в работу:
//   * ВзятиеПереопределено - Булево.
//   * ВзятиеВРаботуОбработано - Булево.
//   * НужноВыбратьФактическогоИсполнителя -  Булево.
//
Функция ОбработатьВзятиеВРаботу(ДействиеЗадачи, КтоОтметил, ВыбранныйФактическийИсполнитель) Экспорт
	
	РезультатВзятияВРаботу = Новый Структура;
	РезультатВзятияВРаботу.Вставить("ВзятиеПереопределено", Ложь);
	РезультатВзятияВРаботу.Вставить("ВзятиеВРаботуОбработано", Ложь);
	РезультатВзятияВРаботу.Вставить("НужноВыбратьФактическогоИсполнителя", Ложь);
	
	РеквизитыДействияЗадачи =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, "Источник, ИдентификаторВИсточнике"); 
	
	ИсточникДействия = РеквизитыДействияЗадачи.Источник;
	Если Не ЗначениеЗаполнено(ИсточникДействия) Тогда
		Возврат РезультатВзятияВРаботу;
	КонецЕсли;
	
	РезультатВзятияВРаботу.ВзятиеПереопределено = Истина;
	
	Если ТипЗнч(ИсточникДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		НачатьТранзакцию();
		Попытка
			
			ОтключитьОбновлениеЗадач = Истина;
			
			РезультатПринятияКИсполнению =
				БизнесПроцессыИЗадачиСервер.ПринятьКИсполнению(
					ИсточникДействия,
					ОтключитьОбновлениеЗадач,
					КтоОтметил,
					ВыбранныйФактическийИсполнитель);
			
			Если РезультатПринятияКИсполнению.ПринятаКИсполнению Тогда
				ОбновитьДействиеЗадачиПоЗадачеПроцесса(ИсточникДействия);
				ОбновитьЗадачуПоСостояниюДействия(ДействиеЗадачи, Ложь);
			КонецЕсли;
			
			РезультатВзятияВРаботу.ВзятиеВРаботуОбработано =
				РезультатПринятияКИсполнению.ПринятаКИсполнению;
			РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя =
				РезультатПринятияКИсполнению.НужноВыбратьФактическогоИсполнителя;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ИсточникДействия) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		НачатьТранзакцию();
		Попытка
			
			РегистрыСведений.УчастникиОзнакомлений.ВзятьВРаботу(
				ИсточникДействия,
				РеквизитыДействияЗадачи.ИдентификаторВИсточнике,
				КтоОтметил);
			
			ОбновитьДействиеЗадачиПоДействиюОзнакомления(
				ИсточникДействия,
				РеквизитыДействияЗадачи.ИдентификаторВИсточнике);
			ОбновитьЗадачуПоСостояниюДействия(ДействиеЗадачи, Ложь);
			
			РезультатВзятияВРаботу.ВзятиеВРаботуОбработано = Истина; 
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен алгоритм обработки взятия в работу для %1 (%2)'"),
			ИсточникДействия,
			ТипЗнч(ИсточникДействия));
		
	КонецЕсли;
	
	Возврат РезультатВзятияВРаботу;
	
КонецФункции

// Обрабатывает выполнение действия задачи источником.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - Действие задачи.
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач - Результат действия.
//  КтоОтметил - СправочникСсылка.Сотрудники - Кто отметил в программе.
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
// 
// Возвращаемое значение:
//  Булево - Выполнение действия задачи обработано источником.
//
Функция ОбработатьВыполнениеДействияЗадачи(ДействиеЗадачи, РезультатДействия, КтоОтметил, ПараметрыВыполнения) Экспорт
	
	ВыполнениеОбработано = Ложь;
	
	Если ПараметрыВыполнения.ВыполнитьОтИмени <> Неопределено Тогда
		
		ОсновнойСотрудник = Сотрудники.ОсновнойСотрудникПользователя(ПараметрыВыполнения.ВыполнитьОтИмени);
		
	Иначе
		
		ОсновнойСотрудник = Сотрудники.ОсновнойСотрудник();
		
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, 
		"Задача, Источник, ИдентификаторВИсточнике, Исполнитель, РезультатДействияТекстом, ЕстьПриложения");
	
	Если Не ЗначениеЗаполнено(РеквизитыЗадачи.Источник) Тогда
		
		ИсточникЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЗадачи.Задача, "Источник");
		ЭтоИсточникЗадач = РаботаСЗадачами.ЭтоИсточникЗадач(ИсточникЗадачи);
		Если ЭтоИсточникЗадач Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно выполнить задачу: у действия %1 не указан источник, а у задачи %2 указан источник.'"),
				ПолучитьНавигационнуюСсылку(ДействиеЗадачи),
				ПолучитьНавигационнуюСсылку(РеквизитыЗадачи.Задача));
			
		КонецЕсли;
		
		ЗаписатьХодОбработкиВыполнение(РеквизитыЗадачи.Задача);
		
		Возврат ВыполнениеОбработано;
		
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыЗадачи.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		РеквизитыЗадачиПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыЗадачи.Источник,
			"БизнесПроцесс, ТочкаМаршрута, Исполнитель, Автор");
		
		НачатьТранзакцию();
		Попытка
			
			Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РезультатИзмененияПараметровПроцесса") Тогда
				
				ПараметрыЗаписи = ПараметрыВыполнения.ДополнительныеПараметры.РезультатИзмененияПараметровПроцесса;
				
			Иначе
				
				ПараметрыЗаписи = Новый Структура;
				
			КонецЕсли;     
			
			ПараметрыЗаписи.Вставить("ЕстьФайлыОтчета", РеквизитыЗадачи.ЕстьПриложения);
			ПараметрыЗаписи.Вставить("РезультатТекстом", РеквизитыЗадачи.РезультатДействияТекстом);
			
			Если РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Подписано Тогда
				
				ПараметрыЗаписи.Вставить("РезультатПодписания", Перечисления.РезультатыПроцессаПодписания.Подписано);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать
				И РезультатДействия = Справочники.РезультатыДействийЗадач.НеПодписано Тогда
				
				ПараметрыЗаписи.Вставить("РезультатПодписания", Перечисления.РезультатыПроцессаПодписания.НеПодписано);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Подписано Тогда
				
				ПараметрыЗаписи.Вставить("РезультатПодписания", Перечисления.РезультатыПроцессаПодписания.Подписано);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание
				И РезультатДействия = Справочники.РезультатыДействийЗадач.НеПодписано Тогда
				
				ПараметрыЗаписи.Вставить("РезультатПодписания", Перечисления.РезультатыПроцессаПодписания.НеПодписано);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Ознакомился Тогда
				
				ПараметрыЗаписи.Вставить("ОтправленоНаПовторноеПодписание", Ложь);
	
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Завершил Тогда
				
				ПараметрыЗаписи.Вставить("ОтправленоНаПовторноеПодписание", Ложь);
	
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно Тогда
				
				ПараметрыЗаписи.Вставить("ОтправленоНаПовторноеПодписание", Истина);
				Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ДанныеПроцесса")
					И ПараметрыВыполнения.ДополнительныеПараметры.ДанныеПроцесса <> Неопределено Тогда
					ПараметрыЗаписи.Вставить("ДанныеПроцесса", ПараметрыВыполнения.ДополнительныеПараметры.ДанныеПроцесса);
				КонецЕсли;
				Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РезультатВыполнения")
					И ЗначениеЗаполнено(ПараметрыВыполнения.ДополнительныеПараметры.РезультатВыполнения) Тогда
					ПараметрыЗаписи.Вставить("РезультатВыполнения", ПараметрыВыполнения.ДополнительныеПараметры.РезультатВыполнения);
				КонецЕсли;
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ПринятоПриглашение Тогда
				
				ПараметрыЗаписи.Вставить("РезультатПриглашения", Перечисления.РезультатыПриглашения.Принято);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ОтклоненоПриглашение Тогда
				
				ПараметрыЗаписи.Вставить("РезультатПриглашения", Перечисления.РезультатыПриглашения.НеПринято);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно Тогда
				
				ПараметрыЗаписи.Вставить("ПовторитьПриглашение", Истина);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ПодтвержденоПриглашение Тогда
				
				ПараметрыЗаписи.Вставить("ПодтвердитьПриглашение", Истина);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ОтмененоПриглашение Тогда
				
				ПараметрыЗаписи.Вставить("ОтложитьПриглашение", Истина);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Рассмотрено Тогда
				
				ПараметрыЗаписи.Вставить(
					"ВариантРассмотрения",
					Перечисления.ВариантыРассмотрения.Рассмотрено);
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть
				И (РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоПомощнику
				Или РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоАвтору) Тогда
		
				ВариантРассмотрения = (?(РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоПомощнику,
					Перечисления.ВариантыРассмотрения.НаправитьПомощнику,
					Перечисления.ВариантыРассмотрения.НаправитьАвтору));
				
				ПараметрыЗаписи.Вставить("ВариантРассмотрения", ВариантРассмотрения);
			
				ОбрабатывающийРезолюцию = Неопределено; 
				
				Если ПараметрыВыполнения.Свойство("ОбрабатывающийРезолюцию") Тогда
					ОбрабатывающийРезолюцию = ПараметрыВыполнения.ОбрабатывающийРезолюцию; 
					
					Если Не ЗначениеЗаполнено(ОбрабатывающийРезолюцию) Тогда
						ОбрабатывающийРезолюцию = БизнесПроцессы.Рассмотрение.ОбрабатывающийРезолюцию(
							РеквизитыЗадачи.Источник,
							ДействиеЗадачи);
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") Тогда
					РаботаСПроцессамиПоДействиямСобытия.ОбработатьДобавлениеОбрабатывающегоРезолюциюВПараметрыВыполнения(
						РеквизитыЗадачи.Источник, ОбрабатывающийРезолюцию);
				КонецЕсли;	
				
				ПараметрыЗаписи.Вставить("ОбрабатывающийРезолюцию", ОбрабатывающийРезолюцию);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть
				И РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаИсполнение Тогда
				
				ПараметрыЗаписи.Вставить(
					"ВариантРассмотрения",
					Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть
				И РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаОзнакомление Тогда
				
				ПараметрыЗаписи.Вставить(
					"ВариантРассмотрения",
					Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ОбработанаРезолюция Тогда
				
				ПараметрыЗаписи.Вставить(
					"ВариантОбработкиРезолюции",
					Перечисления.ВариантыОбработкиРезолюции.Обработано);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаИсполнение Тогда
				
				ПараметрыЗаписи.Вставить(
					"ВариантОбработкиРезолюции",
					Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаОзнакомление Тогда
				
				ПараметрыЗаписи.Вставить(
					"ВариантОбработкиРезолюции",
					Перечисления.ВариантыОбработкиРезолюции.НаправитьНаОзнакомление);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Зарегистрировано Тогда
				
				ПараметрыЗаписи.Вставить("РезультатРегистрации", Перечисления.РезультатыРегистрации.Зарегистрировано);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать
				И РезультатДействия = Справочники.РезультатыДействийЗадач.НеЗарегистрировано Тогда
				
				ПараметрыЗаписи.Вставить("РезультатРегистрации", Перечисления.РезультатыРегистрации.НеЗарегистрировано);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Ознакомился Тогда
				
				ПараметрыЗаписи.Вставить("ПовторитьРегистрацию", Ложь);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Завершил Тогда
				
				ПараметрыЗаписи.Вставить("ПовторитьРегистрацию", Ложь);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно Тогда
				
				ПараметрыЗаписи.Вставить("ПовторитьРегистрацию", Истина);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ПеренесенСрок Тогда
				
				ПараметрыЗаписи.Вставить("ПереносСрока", Истина);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ЗакрытВопрос Тогда
				
				ПараметрыЗаписи.Вставить("ОтправитьНаУточнение", Ложь);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ЗакрытЗапрос Тогда
				
				ПараметрыЗаписи.Вставить("ОтправитьНаУточнение", Ложь);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно Тогда
				
				ПараметрыЗаписи.Вставить("ОтправитьНаУточнение", Истина);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Согласовано Тогда
				
				ПараметрыЗаписи.Вставить("РезультатСогласования", Перечисления.РезультатыСогласования.Согласовано);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать
				И РезультатДействия = Справочники.РезультатыДействийЗадач.СогласованоСЗамечаниями Тогда
				
				ПараметрыЗаписи.Вставить("РезультатСогласования", Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать
				И РезультатДействия = Справочники.РезультатыДействийЗадач.НеСогласовано Тогда
				
				ПараметрыЗаписи.Вставить("РезультатСогласования", Перечисления.РезультатыСогласования.НеСогласовано);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Ознакомился Тогда
				
				ПараметрыЗаписи.Вставить("ПовторитьСогласование", Ложь);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Завершил Тогда
				
				ПараметрыЗаписи.Вставить("ПовторитьСогласование", Ложь);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно Тогда
				
				ПараметрыЗаписи.Вставить("ПовторитьСогласование", Истина);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Утверждено Тогда
				
				ПараметрыЗаписи.Вставить("РезультатУтверждения", Перечисления.РезультатыУтверждения.Утверждено);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить
				И РезультатДействия = Справочники.РезультатыДействийЗадач.НеУтверждено Тогда
				
				ПараметрыЗаписи.Вставить("РезультатУтверждения", Перечисления.РезультатыУтверждения.НеУтверждено);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Ознакомился Тогда
				
				ПараметрыЗаписи.Вставить("ПовторитьУтверждение", Ложь);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.Завершил Тогда
				
				ПараметрыЗаписи.Вставить("ПовторитьУтверждение", Ложь);
				
			ИначеЕсли РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться
				И РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно Тогда
				
				ПараметрыЗаписи.Вставить("ПовторитьУтверждение", Истина);
				
			КонецЕсли;
			
			Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПодписиКРезолюциям") Тогда
				ПараметрыЗаписи.Вставить(
					"ПодписиКРезолюциямПредметов",
					ПараметрыВыполнения.ДополнительныеПараметры.ПодписиКРезолюциям);
			КонецЕсли;
			
			Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПодписиКВизамСогласования") Тогда
				ПараметрыЗаписи.Вставить(
					"ПодписиКВизамСогласования",
					ПараметрыВыполнения.ДополнительныеПараметры.ПодписиКВизамСогласования);
			КонецЕсли;
			
			Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПодписиЭПКПредметам") Тогда
				ПараметрыЗаписи.Вставить(
					"ПодписиЭПКПредметам",
					ПараметрыВыполнения.ДополнительныеПараметры.ПодписиЭПКПредметам);
			КонецЕсли;
			
			Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ДатаИсполнения") Тогда
				ПараметрыЗаписи.Вставить(
					"ДатаИсполнения",
					ПараметрыВыполнения.ДополнительныеПараметры.ДатаИсполнения);
			Иначе
				ПараметрыЗаписи.Вставить("ДатаИсполнения", ТекущаяДатаСеанса());
			КонецЕсли;
			
			Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ТекстРезолюции") Тогда
				РезультатДействияТекстом = ПараметрыВыполнения.ДополнительныеПараметры.ТекстРезолюции;
			Иначе
				РезультатДействияТекстом = РеквизитыЗадачи.РезультатДействияТекстом;
			КонецЕсли;
			
			Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("НовыйСрок") Тогда
				ПараметрыЗаписи.Вставить("НовыйСрок", ПараметрыВыполнения.ДополнительныеПараметры.НовыйСрок);
			КонецЕсли;
			
			Если ПараметрыЗаписи.Свойство("РезультатВыполнения")
				И ЗначениеЗаполнено(ПараметрыЗаписи.РезультатВыполнения) Тогда
				
				ПараметрыЗаписи.РезультатВыполнения = ПараметрыЗаписи.РезультатВыполнения
					+ Символы.ПС
					+ Символы.ПС
					+ РезультатДействияТекстом;
				
			Иначе
				
				ПараметрыЗаписи.Вставить("РезультатВыполнения", РезультатДействияТекстом);
				
			КонецЕсли;
			
			ВычисленныйФактИсполнитель = ПараметрыВыполнения.ФактическиеИсполнителиПоДействиям[ДействиеЗадачи];
			Если ВычисленныйФактИсполнитель <> Неопределено Тогда
				ПараметрыЗаписи.Вставить("ФактическийИсполнительЗадачи", ВычисленныйФактИсполнитель);
				ОснованиеФактИсполнителя = ПараметрыВыполнения.ОснованияФактИсполнителейПоДействиям[
					ДействиеЗадачи];
				Если ОснованиеФактИсполнителя <> Неопределено Тогда
					ПараметрыЗаписи.Вставить("ОснованиеФактическогоИсполнителя", ОснованиеФактИсполнителя);
				КонецЕсли;
			Иначе
				ПараметрыЗаписи.Вставить("ФактическийИсполнительЗадачи", ОсновнойСотрудник);
			КонецЕсли;
			
			Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПредметыСВыбраннымиОрганизациями") Тогда
				ПараметрыЗаписи.Вставить("ПредметыСВыбраннымиОрганизациями",
					ПараметрыВыполнения.ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями);
			КонецЕсли;
			
			Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ВыбранныйПодписывающийИлиЗамещающий") Тогда
				ПараметрыЗаписи.Вставить("ВыбранныйПодписывающийИлиЗамещающий",
					ПараметрыВыполнения.ДополнительныеПараметры.ВыбранныйПодписывающийИлиЗамещающий);
			КонецЕсли;
			
			ФактИсполнительПолный = ПараметрыВыполнения.ФактическиеИсполнителиПолные[ДействиеЗадачи];
			Если ФактИсполнительПолный <> Неопределено Тогда
				ПараметрыЗаписи.Вставить("ФактическийИсполнительПолный", ФактИсполнительПолный);
			КонецЕсли;
			
			Если ПараметрыЗаписи.Свойство("РезультатыПроверки") Тогда
				
				Для Каждого СтрокаРезультатаПроверки Из ПараметрыЗаписи.РезультатыПроверки Цикл
					
					Если СтрокаРезультатаПроверки.Свойство("КомментарийПроверяющего")
						И Не ЗначениеЗаполнено(СтрокаРезультатаПроверки.КомментарийПроверяющего) Тогда
						СтрокаРезультатаПроверки.КомментарийПроверяющего = РеквизитыЗадачи.РезультатДействияТекстом;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Для работы в сценариях файловой базы важно предусмотреть блокировку при выполнении с тем
			// же идентификатором, с которым работала форма.
			Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ИдентификаторБлокировкиПроцесса") Тогда
				ПараметрыЗаписи.Вставить(
					"ИдентификаторБлокировкиПроцесса",
					ПараметрыВыполнения.ДополнительныеПараметры.ИдентификаторБлокировкиПроцесса);
			КонецЕсли;
			
			ОтключитьОбновлениеЗадач = Истина;
			ВыполнениеЗадачСервер.ВыполнитьЗадачу(
				РеквизитыЗадачи.Источник,
				ПараметрыЗаписи,
				ОтключитьОбновлениеЗадач);
			
			ОбновитьДействиеЗадачиПоЗадачеПроцесса(РеквизитыЗадачи.Источник);
			
			ВыполнениеОбработано = Истина;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		
	ИначеЕсли ТипЗнч(РеквизитыЗадачи.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		НачатьТранзакцию();
		Попытка
			
			ФактическийИсполнитель = ПараметрыВыполнения.ФактическиеИсполнителиПолные[ДействиеЗадачи];
			Если ФактическийИсполнитель = Неопределено Тогда
				
				ДанныеОзнакомления = РегистрыСведений.УчастникиОзнакомлений.ДанныеОзнакомления(
					РеквизитыЗадачи.Источник,
				РеквизитыЗадачи.ИдентификаторВИсточнике);
				Если ДанныеОзнакомления = Неопределено Тогда
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Не удалось выполнить задачу по действию ознакомления %1 (%2), т.к. ознакомление %3 удалено.'"),
						РеквизитыЗадачи.Источник,
						ТипЗнч(РеквизитыЗадачи.Источник),
						РеквизитыЗадачи.ИдентификаторВИсточнике);
				КонецЕсли;
				
				ФактическийИсполнитель = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
					ДанныеОзнакомления.Участник,
					?(ТипЗнч(ДанныеОзнакомления.Участник) = Тип("СправочникСсылка.ПолныеРоли"),
						Сотрудники.ОсновнойСотрудник(),
						ДанныеОзнакомления.Участник),
					Сотрудники.ОсновнойСотрудник(),
					КтоОтметил);
				
			КонецЕсли;
			
			ДействиеВыполнено = РегистрыСведений.УчастникиОзнакомлений.Ознакомиться(
				РеквизитыЗадачи.Источник,
				РеквизитыЗадачи.ИдентификаторВИсточнике,
				ФактическийИсполнитель);
				
			Если ДействиеВыполнено Тогда
				ОбновитьЗадачуПоИсточнику(РеквизитыЗадачи.Источник); 
			КонецЕсли;
			ОбновитьДействиеЗадачиПоДействиюОзнакомления(
				РеквизитыЗадачи.Источник,
				РеквизитыЗадачи.ИдентификаторВИсточнике);
			
		    ТекущийПользователь = Пользователи.ТекущийПользователь();
			
			// История выполнения задачи.
			КонтекстВыполненияЗадачи = РегистрыСведений.ИсторияЗадач.КонтекстВыполнения();
			КонтекстВыполненияЗадачи.Исполнитель = РеквизитыЗадачи.Исполнитель;
			КонтекстВыполненияЗадачи.ПлановыйИсполнитель = РеквизитыЗадачи.Исполнитель;
			КонтекстВыполненияЗадачи.ТекстРезультатаВыполнения = РеквизитыЗадачи.РезультатДействияТекстом;
			КонтекстВыполненияЗадачи.РезультатДействия = РезультатДействия; 
			
			Если ЗначениеЗаполнено(ФактИсполнительПолный) Тогда
				КонтекстВыполненияЗадачи.ФактическийИсполнитель = ФактИсполнительПолный;
			Иначе
				КонтекстВыполненияЗадачи.ФактическийИсполнитель = ФактическийИсполнитель;
			КонецЕсли;	
			
			РегистрыСведений.ИсторияЗадач.Добавить(
				РеквизитыЗадачи.Задача,
				ДействиеЗадачи,
				ТекущаяДатаСеанса(),
				Справочники.СобытияЗадач.Выполнение,
				КонтекстВыполненияЗадачи,
				ТекущийПользователь);
			
			ВыполнениеОбработано = Истина;
			
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				Метаданные.Справочники.Контроль.ПолноеИмя(),
				Метаданные.Документы.ДействиеЗадачи.ПолноеИмя(),
				ДействиеЗадачи);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки; 
		
		ЭтоВнешнееПодписание = ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РезультатВнешнегоПодписания")
			И ПараметрыВыполнения.ДополнительныеПараметры.РезультатВнешнегоПодписания;
		ЕстьДанныеПоВерсиямФайлов = ПараметрыВыполнения.ДополнительныеПараметры.Свойство("НаборыВерсийФайлов");
		
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, 
			"Исполнитель,ДатаВыполнения,ИдентификаторВИсточнике,ВидУчастника"); 
		
		ДействиеОзнакомления = РеквизитыЗадачи.Источник;
		
		РеквизитыДействияОзнакомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеОзнакомления, 
			"ПодписыватьУЭП,Предмет"); 
		
		Предмет = РеквизитыДействияОзнакомления.Предмет;
		Параметры = ДействияСервер.НовыеПараметровИзмененияДанныхДействияОзнакомления(); 
		
		ФункцияУчастника = Неопределено;
		Если РеквизитыДействия.ВидУчастника = Справочники.ВидыУчастниковЗадач.Ознакомляемый Тогда
			ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
		Иначе
			ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляющий;
		КонецЕсли;
		
		Участник = РеквизитыДействия.Исполнитель; 
		
		Параметры.Функция = ФункцияУчастника;
		Параметры.Участник = Участник;
		Параметры.Результат = РезультатДействия;
		Параметры.РезультатВнешнегоПодписания = ЭтоВнешнееПодписание;
		Параметры.ИдентификаторУчастника = РеквизитыДействия.ИдентификаторВИсточнике;
		Параметры.ФактическийИсполнитель = ПараметрыВыполнения.ФактическиеИсполнителиПолные[ДействиеЗадачи];
		
		Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПодписиКДаннымОзнакомления") Тогда
			
			Параметры.ПодписиЭП = ПараметрыВыполнения.ДополнительныеПараметры.ПодписиКДаннымОзнакомления[ДействиеЗадачи];
			
		КонецЕсли;
		
		Если ЭтоВнешнееПодписание 
			Или Не ЕстьДанныеПоВерсиямФайлов Тогда
			
			Параметры.ДатаИсполнения = РеквизитыДействия.ДатаВыполнения;
			Параметры.ВерсииФайлов = Справочники.ДанныеОзнакомленияПодПодпись.ТекущиеВерсииФайловДокумента(Предмет);
			
		Иначе
			
			Параметры.ВерсииФайлов = ПараметрыВыполнения.ДополнительныеПараметры.НаборыВерсийФайлов[ДействиеЗадачи];
			
		КонецЕсли;
		
		Справочники.ДействияОзнакомления.ОтметитьВыполнение(ДействиеОзнакомления, Параметры);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен алгоритм обработки выполнения для %1 (%2)'"),
			РеквизитыЗадачи.Источник,
			ТипЗнч(РеквизитыЗадачи.Источник));
		
	КонецЕсли;
	
	Возврат ВыполнениеОбработано;
	
КонецФункции

// Обрабатывает отмену задачи.
// 
// Параметры:
//  ЗадачаКОтмене - ДокументСсылка.Задача.
//  ПредметКОтмене - Произвольный.
//  ПричинаОтмены - Строка.
// 
// Возвращаемое значение:
//  Булево - Отмена обработана.
//  
Функция ОбработатьОтмену(ЗадачаКОтмене, ПредметКОтмене, ПричинаОтмены) Экспорт
	
	ОтменаОбработана = Ложь;
	Если ТипЗнч(ПредметКОтмене) = Тип("ДокументСсылка.Задача") Тогда
		Возврат ОтменаОбработана;
	КонецЕсли;
	
	Если БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(ПредметКОтмене) Тогда
		
		РаботаСБизнесПроцессамиВызовСервера.ПрерватьПроцессы(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредметКОтмене),
			ПричинаОтмены);
		
	ИначеЕсли ТипЗнч(ПредметКОтмене) = Тип("СправочникСсылка.ОбработкиОбъектов") Тогда
		
		ОбработкиОбъектов.ПрерватьОбработкуОбъекта(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметКОтмене, "Владелец"),
			ПричинаОтмены);       
			
	ИначеЕсли ТипЗнч(ПредметКОтмене) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			
		Обработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(ПредметКОтмене);

		ОбработкиОбъектов.ПрерватьОбработкуОбъекта(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "Владелец"),
			ПричинаОтмены);

	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен способ обработки отмены %1 (%2).'"),
			ПредметКОтмене,
			ТипЗнч(ПредметКОтмене));
		
	КонецЕсли;
	
	ОбновитьЗадачуПоИсточнику(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаКОтмене, "Источник"));
	
	ОтменаОбработана = Истина;
	
	Возврат ОтменаОбработана;
	
КонецФункции

// Обрабатывает отмену взятие в работу действия задачи источником.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  КтоОтметил - ОпределяемыйТип.УчастникЗадач.
// 
// Возвращаемое значение:
//  Булево - Отмена взятия в работу обработано источником действия задачи.
//
Функция ОбработатьОтменуВзятияВРаботу(ДействиеЗадачи, КтоОтметил) Экспорт
	
	ОтменаВзятияВРаботуОбработано = Ложь;
	
	РеквизитыДействияЗадачи =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, "Источник, ИдентификаторВИсточнике"); 
	
	ИсточникДействия = РеквизитыДействияЗадачи.Источник;
	Если Не ЗначениеЗаполнено(ИсточникДействия) Тогда
		Возврат ОтменаВзятияВРаботуОбработано;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		НачатьТранзакцию();
		Попытка
			
			ОтключитьОбновлениеЗадач = Истина;
			БизнесПроцессыИЗадачиВызовСервера.ОтменитьПринятиеЗадачКИсполнению(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсточникДействия),
				ОтключитьОбновлениеЗадач);
			
			ОбновитьДействиеЗадачиПоЗадачеПроцесса(ИсточникДействия);
			ОбновитьЗадачуПоСостояниюДействия(ДействиеЗадачи, Ложь);
			
			ОтменаВзятияВРаботуОбработано = Истина;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ИсточникДействия) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		НачатьТранзакцию();
		Попытка
			
			РегистрыСведений.УчастникиОзнакомлений.ОтменитьВзятиеВРаботу(
				ИсточникДействия,
				РеквизитыДействияЗадачи.ИдентификаторВИсточнике,
				КтоОтметил);
			
			ОбновитьДействиеЗадачиПоДействиюОзнакомления(
				ИсточникДействия,
				РеквизитыДействияЗадачи.ИдентификаторВИсточнике);
			ОбновитьЗадачуПоСостояниюДействия(ДействиеЗадачи, Ложь);
			
			ОтменаВзятияВРаботуОбработано = Истина;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен алгоритм обработки отмены взятия в работу для %1 (%2)'"),
			ИсточникДействия,
			ТипЗнч(ИсточникДействия));
		
	КонецЕсли;
	
	Возврат ОтменаВзятияВРаботуОбработано;
	
КонецФункции

// Обрабатывает отмену выполнения задачи источником.
//
// Параметры:
//  РеквизитыДействияЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Булево - Отмена выполнения задачи источником обработана.
//
Функция ОбработатьОтменуВыполнение(РеквизитыДействияЗадачи) Экспорт
	
	ОтменаВыполненияОбработана = Ложь;
	
	Если Не ЗначениеЗаполнено(РеквизитыДействияЗадачи.Источник) Тогда
		Возврат ОтменаВыполненияОбработана;
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыДействияЗадачи.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Если БизнесПроцессыИЗадачиХолдинг.ЗаданиеОтменыВыполненияЗадачиДобавлено(РеквизитыДействияЗадачи.Источник) Тогда
			Возврат Истина;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ОтключитьОбновлениеЗадач = Истина;
			РезультатОтменыВыполнения =
				БизнесПроцессыИЗадачиВызовСервера.ОтменитьВыполнениеЗадачи(
					РеквизитыДействияЗадачи.Источник,
					ОтключитьОбновлениеЗадач);
			Если РезультатОтменыВыполнения.Отказ Тогда
				ВызватьИсключение РезультатОтменыВыполнения.ПричинаОтказа;
			КонецЕсли;
			
			ОбновитьДействиеЗадачиПоЗадачеПроцесса(РеквизитыДействияЗадачи.Источник);
			
			ДействиеЗадачиОбъект = РеквизитыДействияЗадачи.Ссылка.ПолучитьОбъект();
			ДействиеЗадачиОбъект.ФактическийИсполнитель = Справочники.ФактическиеИсполнители.ПустаяСсылка();
			ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ОтменаВыполненияОбработана = Истина;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен алгоритм обработки отмены выполнения для %1 (%2)'"),
			РеквизитыДействияЗадачи.Источник,
			ТипЗнч(РеквизитыДействияЗадачи.Источник));
		
	КонецЕсли;
	
	Возврат ОтменаВыполненияОбработана;
	
КонецФункции

// Обрабатывает перенаправление действия задачи источником.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  Кому - ОпределяемыйТип.УчастникЗадач.
//  Комментарий - Строка.
// 
// Возвращаемое значение:
//  Булево - Перенаправление обработано источником действия задачи.
//
Функция ОбработатьПеренаправление(ДействиеЗадачи, Кому, Комментарий) Экспорт
	
	ПеренаправлениеОбработано = Ложь;
	
	РеквизитыДействияЗадачи =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, "Задача, Исполнитель, Источник, ИдентификаторВИсточнике"); 
	ИсточникДействия = РеквизитыДействияЗадачи.Источник; 
	
	Если Не ЗначениеЗаполнено(ИсточникДействия) Тогда
		Возврат ПеренаправлениеОбработано;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ИнфоОПеренаправлении = ИнфоОПеренаправлении();
		Если Метаданные.Задачи.ЗадачаИсполнителя.РеквизитыАдресации.Исполнитель.Тип.СодержитТип(ТипЗнч(Кому)) Тогда
			ИнфоОПеренаправлении.Исполнитель = Кому;
		ИначеЕсли Метаданные.Задачи.ЗадачаИсполнителя.РеквизитыАдресации.РольИсполнителя.Тип.СодержитТип(ТипЗнч(Кому)) Тогда
			РеквизитыПолнойРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Кому, "Владелец, ОсновнойОбъектАдресации,
				|ДополнительныйОбъектАдресации");
			ИнфоОПеренаправлении.РольИсполнителя = Кому;
			ИнфоОПеренаправлении.ВладелецРоли = РеквизитыПолнойРоли.Владелец;
			ЗаполнитьЗначенияСвойств(ИнфоОПеренаправлении, РеквизитыПолнойРоли);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип кому перенаправить %1 (%2)'"),
				Кому,
				ТипЗнч(Кому));
		КонецЕсли;
		
		ИнфоОПеренаправлении.Комментарий = Комментарий;
		ИнфоОПеренаправлении.Автор = Сотрудники.ОсновнойСотрудник();
		
		НачатьТранзакцию();
		Попытка
			
			ПроверятьФункциональнуюОпцию = Истина;
			ОтключитьОбновлениеЗадач = Истина;
			ПроверятьПраваВПривилегированномРежиме = Ложь; // Права проверили в РаботаСЗадачами.Перенаправить
			ЗадачаПеренаправлена = БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачу(
				ИсточникДействия,
				ИнфоОПеренаправлении,
				ПроверятьФункциональнуюОпцию,
				ОтключитьОбновлениеЗадач,
				ПроверятьПраваВПривилегированномРежиме);
			Если Не ЗадачаПеренаправлена Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось перенаправить задачу.'");
			КонецЕсли;
			
			ОбновитьДействиеЗадачиПоЗадачеПроцесса(ИсточникДействия);
			
			ПеренаправлениеОбработано = Истина;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки; 
		
	ИначеЕсли ТипЗнч(ИсточникДействия) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		РеквизитыИсточникаДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникДействия, "Предмет, ВидДействия.РазрешитьУчастникамИзменятьПредмет");
		
		НачатьТранзакцию();
		Попытка
		
			РегистрыСведений.УчастникиОзнакомлений.Перенаправить(
				ИсточникДействия,
				РеквизитыДействияЗадачи.ИдентификаторВИсточнике,
				Кому);
			
			ОбновитьДействиеЗадачиПоДействиюОзнакомления(
				ИсточникДействия,
				РеквизитыДействияЗадачи.ИдентификаторВИсточнике); 
			
			КонтекстПеренаправления = РегистрыСведений.ИсторияЗадач.КонтекстПеренаправления();
			КонтекстПеренаправления.ОтКого = РеквизитыДействияЗадачи.Исполнитель;
			КонтекстПеренаправления.Кому = Кому;
			КонтекстПеренаправления.Комментарий = Комментарий;
			
			РегистрыСведений.ИсторияЗадач.Добавить(
				РеквизитыДействияЗадачи.Задача,
				ДействиеЗадачи,
				ТекущаяДатаСеанса(),
				Справочники.СобытияЗадач.Перенаправление,
				КонтекстПеренаправления,
				ПользователиДокументооборот.ОлицетворяемыйПользователь());
				
			РаботаСРабочимиГруппами.РасширитьРабочуюГруппуПредметов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыИсточникаДействия.Предмет),
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Кому),
				РеквизитыИсточникаДействия.ВидДействияРазрешитьУчастникамИзменятьПредмет,
				ИсточникДействия);
			
			ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(РеквизитыДействияЗадачи.Задача);
			
			ПеренаправлениеОбработано = Истина;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен алгоритм обработки перенаправления для %1 (%2)'"),
			ИсточникДействия,
			ТипЗнч(ИсточникДействия));
		
	КонецЕсли;
	
	Возврат ПеренаправлениеОбработано;
	
КонецФункции

// Процедура - Обработка получения формы
//
// Параметры:
//  ВидФормы - Строка.
//  Параметры - Структура.
//  ВыбраннаяФорма - Строка.
//  ДополнительнаяИнформация - ДополнительнаяИнформация.
//  СтандартнаяОбработка - Булево.
//
Процедура ОбработатьПолучениеФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта" Тогда

		Если Не Параметры.Свойство("Ключ") Тогда
			ВызватьИсключение НСтр("ru = 'Интерактивное создание действий задач не предусмотрено.'");
		КонецЕсли;

		Если Параметры.Свойство("ОтключитьСогласованиеВРежимеЗамечаний") И Параметры.ОтключитьСогласованиеВРежимеЗамечаний = Истина Тогда
			Возврат;
		КонецЕсли;

		ЕстьПраво = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Параметры.Ключ).Чтение;
		Если Не ЕстьПраво Тогда
			ТестОшибки = НСтр("ru = 'У вас нет прав для просмотра задачи'");
#Если Не ВнешнееСоединение Тогда
			ВызватьИсключение(ТестОшибки, КатегорияОшибки.НарушениеПравДоступа);
#Иначе
			ВызватьИсключение ТестОшибки;
#КонецЕсли
		КонецЕсли;

		ЗадачаПроцесса = РаботаСЗадачами.ИсточникДействияЗадачи(Параметры.Ключ);
		Если ЗначениеЗаполнено(ЗадачаПроцесса) И ТипЗнч(ЗадачаПроцесса) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда

			УстановитьПривилегированныйРежим(Истина);
			РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЗадачаПроцесса,
				"ИдентификаторИсполнителя, БизнесПроцесс, Исполнитель, РольИсполнителя, ТочкаМаршрута, Выполнена");

			Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
				РеквизитыЗадачи.БизнесПроцесс);
			Если ЗначениеЗаполнено(Действие) И ТипЗнч(Действие) = Тип(
				"СправочникСсылка.ДействияСогласования") И Не РеквизитыЗадачи.Выполнена Тогда

				СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Действие, "СогласованиеВРежимеЗамечаний");

				РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					РеквизитыЗадачи.БизнесПроцесс, "НомерИтерации, Завершен, Состояние");
				НомерИтерации = РеквизитыПроцесса.НомерИтерации;

				Если СогласованиеВРежимеЗамечаний И Не РеквизитыПроцесса.Завершен Тогда

					Участник = РеквизитыЗадачи.Исполнитель;
					Если Не ЗначениеЗаполнено(Участник) Тогда
						Участник = РеквизитыЗадачи.РольИсполнителя;
					КонецЕсли;	
					
					// проверим что я - это исполнитель.
					ЭтоИсполнительЗадачи = РаботаСЗадачами.ЕстьВсеПраваНаДействие(Параметры.Ключ);

					Если Не ЭтоИсполнительЗадачи Тогда
						Возврат;
					КонецЕсли;
					
					Если РеквизитыПроцесса.Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда
						Возврат;
					КонецЕсли;	 
					
					Если ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(ЗадачаПроцесса) Тогда
						Возврат;
					КонецЕсли;	 

					СтандартнаяОбработка = Ложь;

					Если РеквизитыЗадачи.ТочкаМаршрута
						= БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
						ВыбраннаяФорма = "ОбщаяФорма.СогласованиеВРежимеЗамечанийФормаСогласующего";
					ИначеЕсли РеквизитыЗадачи.ТочкаМаршрута
						= БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
						ВыбраннаяФорма = "ОбщаяФорма.СогласованиеВРежимеЗамечанийФормаИнициатора";
					КонецЕсли;

					Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						Действие, "Предмет");

					Параметры.Вставить("Действие", Действие);
					Параметры.Вставить("Идентификатор", РеквизитыЗадачи.ИдентификаторИсполнителя);
					Параметры.Вставить("Участник", Участник);
					Параметры.Вставить("Документ", Предмет);
					Параметры.Вставить("ОсновнойДокумент", Предмет);
					Параметры.Вставить("ДействиеЗадачи", Параметры.Ключ);
					
				КонецЕсли;

			КонецЕсли;
			
		Иначе
			
			СостояниеУчастникаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.Ключ, "СостояниеУчастникаЗадачи");
				
			ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
				СостояниеУчастникаЗадачи);
				
			Выполнено = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(
				ВидСостоянияУчастниковЗадач);
				
			ОжидаетПроверку = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидающееПроверкиДействие(
				ВидСостоянияУчастниковЗадач);
						
			Если Выполнено Или ОжидаетПроверку Тогда
				Возврат;
			КонецЕсли;		
			
			// проверим что я - это исполнитель.
			ЭтоИсполнительЗадачи = РаботаСЗадачами.ЕстьВсеПраваНаДействие(Параметры.Ключ);
			
			Если Не ЭтоИсполнительЗадачи Тогда
				Возврат;
			КонецЕсли;
			
			Действие = Неопределено;
			Если ЭтоЗадачаСогласованияВРежимеЗамечаний(Параметры.Ключ, Действие) Тогда
				
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ОбщаяФорма.СогласованиеВРежимеЗамечанийФормаСогласующего";
				
				Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Действие, "Предмет");
					
				РеквизитыДействияТрекера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Параметры.Ключ, "Исполнитель, Задача");
					
				ВеткаОбработки = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(
					РеквизитыДействияТрекера.Задача);

				Параметры.Вставить("Действие", Действие);
				Параметры.Вставить("Участник", РеквизитыДействияТрекера.Исполнитель);
				Параметры.Вставить("Документ", Предмет);
				Параметры.Вставить("ОсновнойДокумент", Предмет);
				Параметры.Вставить("ДействиеЗадачи", Параметры.Ключ);
				Параметры.Вставить("ВеткаОбработки", ВеткаОбработки);
				
			КонецЕсли;		

		КонецЕсли;

	КонецЕсли;	
	
КонецПроцедуры

// Обрабатывает сохранения результата действия задачи источником.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  РезультатДействияТекстом - Строка.
//  КтоОтметил - СправочникСсылка.Сотрудники.
//  ВзятьВРаботуАвтоматически - Булево.
// 
// Возвращаемое значение:
//  Структура - Результат обработки сохранения результата действия:
//   * СохранениеРезультатаДействияОбработано - Булево.
//   * НужноВыбратьФактическогоИсполнителя - Булево.
//
Функция ОбработатьСохранениеРезультатаДействия(ДействиеЗадачи, РезультатДействияТекстом, КтоОтметил, ВзятьВРаботуАвтоматически) Экспорт
	
	РезультатОбработкиСохранения = Новый Структура;
	РезультатОбработкиСохранения.Вставить("СохранениеРезультатаДействияОбработано", Ложь);
	РезультатОбработкиСохранения.Вставить("НужноВыбратьФактическогоИсполнителя", Ложь);
	
	РеквизитыДействияЗадачи =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, "Источник, ИдентификаторВИсточнике"); 
	
	ИсточникДействия = РеквизитыДействияЗадачи.Источник;
	
	Если Не ЗначениеЗаполнено(ИсточникДействия) Тогда
		Возврат РезультатОбработкиСохранения;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		НачатьТранзакцию();
		Попытка
			
			РезультатыВыполненияИсточников = РаботаСБизнесПроцессами.РезультатыВыполненияЗадачПроцессов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсточникДействия));
			
			Если РезультатыВыполненияИсточников[ИсточникДействия] <> РезультатДействияТекстом Тогда
				
				СохранитьРезультатВыполненияВЗадачуПроцесса(
					ИсточникДействия,
					РезультатДействияТекстом,
					Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга());
				
				ДанныеПринятияКИсполнению = РаботаСБизнесПроцессами.ДанныеПринятияКИсполнению(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсточникДействия));
				ЗадачаПроцессаПринятаКИсполнению =
					ДанныеПринятияКИсполнению[ИсточникДействия].ПринятаКИсполнению;
				
				ВзятиеВРаботуОбработано = Ложь;
				Если ВзятьВРаботуАвтоматически
					И ЗначениеЗаполнено(РезультатДействияТекстом)
					И Не ЗадачаПроцессаПринятаКИсполнению Тогда
					РезультатВзятияВРаботу = РаботаСЗадачами.ВзятьВРаботу(
						ДействиеЗадачи,
						КтоОтметил);
					ВзятиеВРаботуОбработано = РезультатВзятияВРаботу.ВзятиеВРаботуОбработано;
					РезультатОбработкиСохранения.НужноВыбратьФактическогоИсполнителя =
						РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя;
				КонецЕсли;
				
				Если Не ВзятиеВРаботуОбработано Тогда
					ОбновитьДействиеЗадачиПоЗадачеПроцесса(ИсточникДействия);
				КонецЕсли;
				
			КонецЕсли;
			
			РезультатОбработкиСохранения.СохранениеРезультатаДействияОбработано = Истина;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ИсточникДействия) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		НачатьТранзакцию();
		Попытка
			
			РегистрыСведений.УчастникиОзнакомлений.ЗаписатьКомментарий(
				ИсточникДействия,
				РеквизитыДействияЗадачи.ИдентификаторВИсточнике,
				РезультатДействияТекстом);
			
			ОбновитьДействиеЗадачиПоДействиюОзнакомления(
				ИсточникДействия,
				РеквизитыДействияЗадачи.ИдентификаторВИсточнике);
			
			СохранениеРезультатаДействияОбработано = Истина;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен алгоритм обработки перенаправления для %1 (%2)'"),
			ИсточникДействия,
			ТипЗнч(ИсточникДействия));
		
	КонецЕсли;
	
	Возврат РезультатОбработкиСохранения;
	
КонецФункции

// Выполняет сохранение результата выполнения в задачу процесса.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  РезультатВыполнения - Строка
//
Процедура СохранитьРезультатВыполненияВЗадачуПроцесса(
	ЗадачаПроцесса, РезультатВыполнения, Немедленно = Ложь) Экспорт
	
	Если ОбработкаОчередиЗаданийСервер.ОбработатьСохранениеРезультатаВыполненияВЗадачуПроцесса(
		ЗадачаПроцесса, РезультатВыполнения, Немедленно) Тогда
		
		Возврат;
	КонецЕсли;
	
	ЗадачаПроцессаОбъект = ЗадачаПроцесса.ПолучитьОбъект();
	ЗадачаПроцессаОбъект.РезультатВыполнения = РезультатВыполнения;
	ЗадачаПроцессаОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
	ЗадачаПроцессаОбъект.Записать();
	
КонецПроцедуры

// Обновляет установку флага источником указанной задаче или действия задачи текущим пользователем.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задачи или действия задач.
//  Флаг - ПеречислениеСсылка.ФлагиОбъектов - Флаг.
//
Функция ОбработатьУстановкуФлага(ЗадачаИлиДействие, Флаг) Экспорт
	
	УстановкаФлагаОбработана = Ложь;
	Если ТипЗнч(ЗадачаИлиДействие) <> Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		Возврат УстановкаФлагаОбработана;
	КонецЕсли;
	
	ИсточникДействияЗадачи = РаботаСЗадачами.ИсточникДействияЗадачи(ЗадачаИлиДействие);
	Если Не ЗначениеЗаполнено(ИсточникДействияЗадачи) Тогда
		Возврат УстановкаФлагаОбработана;
	КонецЕсли;          
	
	Если ТипЗнч(ИсточникДействияЗадачи) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
	
		НачатьТранзакцию();
		Попытка
			
			ОтключитьОбновлениеЗадач = Истина;
			РаботаСФлагамиОбъектовСервер.УстановитьФлагОбъектуОтОсновногоСотрудника(
				ИсточникДействияЗадачи,
				Флаг,
				ОтключитьОбновлениеЗадач);
			
			ОбновитьДействиеЗадачиПоЗадачеПроцесса(ИсточникДействияЗадачи);
			
			УстановкаФлагаОбработана = Истина;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	
	ИначеЕсли ТипЗнч(ИсточникДействияЗадачи) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		УстановкаФлагаОбработана = Ложь;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен алгоритм установки флага для %1 (%2)'"),
			ИсточникДействияЗадачи,
			ТипЗнч(ИсточникДействияЗадачи));
		
	КонецЕсли;
	
	Возврат УстановкаФлагаОбработана;
	
КонецФункции

// Форматированное описание задачи, создаваемой на основании.
//
// Параметры:
//  Основание - Произвольный - Основание.
// 
// Возвращаемое значение:
//  ФорматированныйДокумент - Форматированное описание задачи.
//
Функция ОписаниеФорматированное(Основание) Экспорт
	
	ОписаниеФорматированное = Новый ФорматированныйДокумент;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВходящееПисьмо")
		Или ТипЗнч(Основание) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		
		ОписаниеHTML = "";
		ВстроеннаяПочтаСервер.ДобавитьТекстИсходногоПисьма(
			ОписаниеHTML,
			Основание,
			Перечисления.ТипыТекстовПочтовыхСообщений.HTML,
			Неопределено);
		
		ОписаниеФорматированное.УстановитьHTML(ОписаниеHTML, Новый Структура);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ТемыОбсуждений")
		Или ТипЗнч(Основание) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		Если ТипЗнч(Основание) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
			СообщениеОснования = РаботаСОбсуждениями.НайтиПервоеСообщениеТемы(Основание);
		Иначе
			СообщениеОснования = Основание;
		КонецЕсли;
		
		РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СообщениеОснования,
			"Автор, ДатаСоздания, ТекстСообщения");
		Описание = СтрШаблон(
			"%1, %2: %3",
			РеквизитыСообщения.Автор,
			РеквизитыСообщения.ДатаСоздания,
			РеквизитыСообщения.ТекстСообщения);
		
		ОписаниеФорматированное.Добавить(Описание, Тип("ТекстФорматированногоДокумента"));
	
	КонецЕсли;
	
	Возврат ОписаниеФорматированное;
	
КонецФункции

// Выполняет действие задачи по указанному варианту.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи - Действия задач.
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПриложенияЗадач - Соответствие - Данные приложений задач.
//   * Ключ - ДокументСсылка.ДействиеЗадачи.
//   * Значение - Массив из Структура - См. РаботаСЗадачами.ДанныеПриложенияЗадачи().
//
Процедура ПередИнтерактивнымВыполнениемДействия(
	ДействияЗадач,
	РезультатДействия,
	ПараметрыВыполнения,
	ДанныеВыполнения,
	ПриложенияЗадач) Экспорт
	
	РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДействияЗадач,
		"Ссылка, ВидДействия, Задача, Источник, РезультатДействияТекстом, ВерсияДанных");
		
	КоличествоДействий = ДействияЗадач.Количество(); 	
		
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		РеквизитыДействия = РеквизитыДействий[ДействиеЗадачи];
		ПриложенияЗадачи = ПриложенияЗадач[ДействиеЗадачи];
		
		Если Не ЗначениеЗаполнено(РеквизитыДействия.Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(РеквизитыДействия.Источник) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			Если ТипЗнч(РеквизитыДействия.Источник) <> Тип("СправочникСсылка.ДействияОзнакомления") Тогда
				Продолжить;
			КонецЕсли;
			
			ПередИнтерактивнымВыполнениемДействияОзнакомлениеОзнакомиться(ДействиеЗадачи, 
				РеквизитыДействия.Источник, ДанныеВыполнения, ПараметрыВыполнения);
			
		КонецЕсли;
		
		Если ТипЗнч(РеквизитыДействия.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РеквизитыЗадачиПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				РеквизитыДействия.Источник,
				"Ссылка, ТочкаМаршрута, БизнесПроцесс, Исполнитель,
				|РезультатВыполнения, РольИсполнителя, ИдентификаторИсполнителя");
		КонецЕсли;
		
		// Проверим заполнение дополнительных реквизитов.
		Если ТипЗнч(РеквизитыДействия.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			// Проверим программно есть ли ошибки проверки.
			ПараметрыСеанса.ИнтерактивнаяПроверкаЗаполненияСвойств = Ложь;
			ЗадачаПроцессаОбъект = РеквизитыДействия.Источник.ПолучитьОбъект();
			ЕстьОшибкиПроверки = Ложь;
			УправлениеСвойствамиСлужебный.ДополнительныеРеквизитыОбработкаПроверкиЗаполнения(
				ЗадачаПроцессаОбъект,
				ЕстьОшибкиПроверки,
				Новый Массив);
			
			// Обнулим сообщения пользователю.
			ПолучитьСообщенияПользователю(Истина);
			
			Если ЕстьОшибкиПроверки Тогда
				
				ДанныеВыполнения.Предупреждения.Добавить(
					НСтр("ru = 'Для выполнения задачи необходимо заполнить дополнительные реквизиты'"));
				ДанныеВыполнения.ПоказатьПредупреждение = Истина;
				
				Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
					Причина = НСтр("ru = 'Требуется заполнить дополнительные реквизиты.'");
					ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
						Новый Структура("Задача, Причина", 
						ДействиеЗадачи, Причина));
				КонецЕсли;
				
				ДанныеВыполнения.ПредупредитьОЗаполненииДополнительныхРеквизитов =
					ДанныеВыполнения.ЧислоЗадач = 1
					И Не ПараметрыСеанса.ЭтоМобильныйКлиент;
				
				ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		Если ТипЗнч(РеквизитыДействия.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			
			ПередИнтерактивнымВыполнениемДействияОзнакомленияОбновитьОбработку(
				ДействиеЗадачи,
				ДанныеВыполнения,
				РеквизитыДействия);
			
			ПередИнтерактивнымВыполнениемДействияЗапретВыполненияДействияОзнакомления(
				ДействиеЗадачи,
				ДанныеВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
				
		КонецЕсли;	
		
		Если ТипЗнч(РеквизитыДействия.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			ПередИнтерактивнымВыполнениемДействияОбновитьОбработку(
				ДействиеЗадачи,
				ДанныеВыполнения,
				РеквизитыДействия);
			
			ПередИнтерактивнымВыполнениемДействияПроверитьПодзадачи(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РеквизитыДействия);
			
			ПередИнтерактивнымВыполнениемДействияЗапретВыполнения(
				ДействиеЗадачи,
				ДанныеВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);   
				
			ПередИнтерактивнымВыполнениемДействияЗапретВыполненияДействия(
				ДействиеЗадачи,
				ДанныеВыполнения,
				РезультатДействия,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияИсполнениеПроверить(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияПодписаниеОбработатьРезультат(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса,
				КоличествоДействий);
			
			ПередИнтерактивнымВыполнениемДействияПриглашениеПригласить(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				ПриложенияЗадачи,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияПриглашениеОзнакомиться(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияРассмотрениеРассмотреть(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				ПриложенияЗадачи,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияРассмотрениеОзнакомиться(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияРегистрацияОзнакомиться(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияВопросРассмотрение(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияВопросОзнакомление(
				ДействиеЗадачи,
				ДанныеВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияСогласованиеСогласовать(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса,
				КоличествоДействий);
			
			ПередИнтерактивнымВыполнениемДействияСогласованиеОзнакомиться(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса,
				КоличествоДействий);
			
			ПередИнтерактивнымВыполнениемДействияУтверждениеУтвердить(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияУтверждениеОзнакомиться(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияПодписаниеПодписать(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);
				
			//@skip-check query-in-loop
			ПередИнтерактивнымВыполнениемДействияИсполнениеОтветственныйИсполнить(
				ДействиеЗадачи,
				ДанныеВыполнения,
				РеквизитыЗадачиПроцесса);
			
			ПередИнтерактивнымВыполнениемДействияРегистрацияЗарегистрировать(
				ДействиеЗадачи,
				ДанныеВыполнения,
				ПараметрыВыполнения,
				РезультатДействия,
				РеквизитыДействия,
				РеквизитыЗадачиПроцесса);         
				
		КонецЕсли;
			
		Если Не ДанныеВыполнения.ТребуетсяИнтерактивноеДействие Тогда
			
			Для Каждого ДанныеПриложения Из ПриложенияЗадачи Цикл
				
				ПрочтеноПриложение = РаботаСПрочтениями.УстановитьСвойствоПрочтен(
					ДанныеПриложения.Приложение,
					Истина);
				Если ПрочтеноПриложение Тогда
					
					ДанныеОповещения = Новый Структура("ИмяСобытия, Параметр, Источник");
					ДанныеОповещения.ИмяСобытия = "ПрочтениеОбновитьСписок";
					ДанныеОповещения.Параметр = ДанныеПриложения.Приложение;
					
					ДанныеВыполнения.ОповещенияПослеВыполнения.Добавить(ДанныеОповещения);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСПроцессамиПоДействиямСобытия.ПередИнтерактивнымВыполнениемДействия(
		ДействияЗадач,
		РезультатДействия,
		ПараметрыВыполнения,
		ДанныеВыполнения,
		ПриложенияЗадач);
	
КонецПроцедуры

// Определяет приложения задачи, основываясь на источнике задачи.
//
// Параметры:
//   Задача - ДокументСсылка.Задача.
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   Массив из см. РаботаСЗадачами.ДанныеПриложенияЗадачи
//
Функция ПриложенияЗадачи(Задача, ДействиеЗадачи, КешДанных = Неопределено) Экспорт
	
	КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
	
	Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.ДействиеЗадачи = ДействиеЗадачи Тогда
		ИсточникДействияЗадачи = КэшОбластиПросмотра.РеквизитыДействияЗадачи.Источник;
	Иначе
		ИсточникДействияЗадачи = РаботаСЗадачами.ИсточникДействияЗадачи(ДействиеЗадачи);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсточникДействияЗадачи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПриложенияЗадачи = Новый Массив;
	Если ТипЗнч(ИсточникДействияЗадачи) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		РеквизитыИсточника = Неопределено;
		Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеЗадачИсполнителей") Тогда
			РеквизитыИсточника = КешДанных.ДанныеЗадачИсполнителей[ИсточникДействияЗадачи];
		КонецЕсли;
		Если РеквизитыИсточника = Неопределено Тогда
			РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ИсточникДействияЗадачи,
				"БизнесПроцесс, Предметы");
		КонецЕсли;
		
		Если ТипЗнч(РеквизитыИсточника.БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого СтрокаПредмета Из РеквизитыИсточника.Предметы.Выгрузить() Цикл
			
			ДанныеПриложенияЗадачи = РаботаСЗадачами.ДанныеПриложенияЗадачи();
			ДанныеПриложенияЗадачи.Приложение = СтрокаПредмета.Предмет;
			ДанныеПриложенияЗадачи.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
			ДанныеПриложенияЗадачи.РольПредмета = СтрокаПредмета.РольПредмета;
			ДанныеПриложенияЗадачи.ОбязательноеЗаполнение = СтрокаПредмета.ОбязательноеЗаполнение;
			
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
				
				Если ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
					ДанныеПриложенияЗадачи.Представление = СтрШаблон("%1, %2",
						СтрокаПредмета.Предмет,
						СтрокаПредмета.РольПредмета);
				Иначе
					ДанныеПриложенияЗадачи.Представление = СтрШаблон("%1 (%2), %3",
						СтрокаПредмета.Предмет,
						СтрокаПредмета.ИмяПредмета,
						СтрокаПредмета.РольПредмета);
				КонецЕсли;
				
			Иначе
				ДанныеПриложенияЗадачи.Представление = СтрШаблон("%1 (%2), %3",
					СтрокаПредмета.ИмяПредмета,
					НСтр("ru = 'не введен'"),
					СтрокаПредмета.РольПредмета);
			КонецЕсли;
			
			ПриложенияЗадачи.Добавить(ДанныеПриложенияЗадачи);
			
		КонецЦикла;  
		
	ИначеЕсли ТипЗнч(ИсточникДействияЗадачи) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда	

		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДействияЗадачи, "Предмет");
		
		ДанныеПриложенияЗадачи = РаботаСЗадачами.ДанныеПриложенияЗадачи();
		ДанныеПриложенияЗадачи.Приложение = Предмет;
		ДанныеПриложенияЗадачи.РольПредмета = Перечисления.РолиПредметов.Основной;  
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
			ДанныеПриложенияЗадачи.Представление = СтрШаблон("%1, %2",
				Предмет,
				ДанныеПриложенияЗадачи.РольПредмета);
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда // документы
				
			ИмяПредмета  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ВидДокумента");
			ДанныеПриложенияЗадачи.ИмяПредмета = ИмяПредмета;
				
			ДанныеПриложенияЗадачи.Представление = СтрШаблон("%1 (%2), %3",
				Предмет,
				ИмяПредмета,
				ДанныеПриложенияЗадачи.РольПредмета);
		КонецЕсли;
		
		ПриложенияЗадачи.Добавить(ДанныеПриложенияЗадачи);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ПриложенияЗадачи;
	
КонецФункции

// Обработчик при выполнении действия задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//
Процедура ПриВыполненииДействияЗадачи(ДействиеЗадачи) Экспорт
	
	ЗакрытьВопросыПоДействиюЗадачи(ДействиеЗадачи);
	
КонецПроцедуры

// Обработчик при закрытии задачи.
//
// Параметры:
//  Задача - ДокументСсылка.Задача.
//
Процедура ПриЗакрытииЗадачи(Задача) Экспорт
	
	ЗакрытьВопросыПоЗадаче(Задача);
	
КонецПроцедуры

// Обработчик при отмене задачи.
//
// Параметры:
//  Задача - ДокументСсылка.Задача.
//
Процедура ПриОтменеЗадачи(Задача) Экспорт
	
	ЗакрытьВопросыПоЗадаче(Задача);
	
КонецПроцедуры

// Формирует заголовок команды "Задачи по приложению".
// 
// Параметры:
// 	Приложение - ОпределяемыйТип.ПриложениеЗадач.
// 	КоличествоЗадач - Число.
// 	КоличествоОжидающихВыполненияЗадач - Число.
// 	
// Возвращаемое значение:
//   Строка - Заголовок команды "Задачи по приложению".
// 
Функция ЗаголовокКомандыЗадачиПоПриложению(Приложение, КоличествоЗадач, КоличествоОжидающихВыполненияЗадач) Экспорт
	
	ЗаголовокКомандыЗадачиПоПриложению = "";
	
	Если Не Метаданные.ОпределяемыеТипы.ПредметДействия.Тип.СодержитТип(ТипЗнч(Приложение)) Тогда
		Возврат ЗаголовокКомандыЗадачиПоПриложению;
	КонецЕсли;
	
	ЕстьОжидающиеВыполненияЗадачи = КоличествоОжидающихВыполненияЗадач > 0;
	Если ЕстьОжидающиеВыполненияЗадачи Тогда
		
		ЗаголовокКомандыЗадачиПоПриложению = СтрШаблон(
			НСтр("ru = 'Других задач: %1 (выполняется %2)'"),
			КоличествоЗадач,
			КоличествоОжидающихВыполненияЗадач);
			
	Иначе
		
		ЗаголовокКомандыЗадачиПоПриложению = СтрШаблон(
			НСтр("ru = 'Других задач: %1'"),
			КоличествоЗадач);
			
	КонецЕсли;
	
	Возврат ЗаголовокКомандыЗадачиПоПриложению;
	
КонецФункции

// Обрабатывает кнопки вариантов выполнения задачи по источнику.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач
//   РезультатыПоВариантам - Соответствие из КлючИЗначение:
//     * Ключ - Число - Вариант выполнения.
//     * Значение - СправочникСсылка.РезультатыДействийЗадач - Результат варианта.
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//   ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
//
Процедура ПриОбновленииКнопокВариантовВыполнения(ДействиеЗадачи, ИсточникДействияЗадачи,
		РезультатыПоВариантам, КешДанных, ДанныеВариантовВыполненияЗадачи) Экспорт
	
	Если ЗначениеЗаполнено(ИсточникДействияЗадачи) И ТипЗнч(ИсточникДействияЗадачи) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		РеквизитыИсточникаДействия = Неопределено;
		Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеЗадачИсполнителей") Тогда
			РеквизитыИсточникаДействия = КешДанных.ДанныеЗадачИсполнителей[ИсточникДействияЗадачи];
		КонецЕсли;
		Если РеквизитыИсточникаДействия = Неопределено Тогда
			РеквизитыИсточникаДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ИсточникДействияЗадачи,
				"БизнесПроцесс, ТочкаМаршрута, Выполнена");
		КонецЕсли;
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыИсточникаДействия.БизнесПроцесс, "Завершен");
		
		ПриОбновленииКнопокВариантовВыполненияВопроса(
			ИсточникДействияЗадачи,
			РезультатыПоВариантам,
			РеквизитыИсточникаДействия,
			ДанныеВариантовВыполненияЗадачи);
		
		ПриОбновленииКнопокВариантовВыполненияПодписания(
			ДействиеЗадачи,
			ИсточникДействияЗадачи,
			РеквизитыИсточникаДействия,
			РеквизитыПроцесса,
			РезультатыПоВариантам,
			ДанныеВариантовВыполненияЗадачи);
		
		ПриОбновленииКнопокВариантовВыполненияПриглашения(
			ИсточникДействияЗадачи,
			РезультатыПоВариантам,
			РеквизитыИсточникаДействия,
			ДанныеВариантовВыполненияЗадачи);
		
		ПриОбновленииКнопокВариантовВыполненияРассмотрения(
			ИсточникДействияЗадачи,
			РезультатыПоВариантам,
			РеквизитыИсточникаДействия,
			ДанныеВариантовВыполненияЗадачи);
		
		ПриОбновленииКнопокВариантовВыполненияСогласования(
			ДействиеЗадачи,
			ИсточникДействияЗадачи,
			РеквизитыИсточникаДействия,
			РеквизитыПроцесса,
			РезультатыПоВариантам,
			ДанныеВариантовВыполненияЗадачи);
		
		ПриОбновленииКнопокВариантовВыполненияУтверждения(
			ДействиеЗадачи,
			ИсточникДействияЗадачи,
			РеквизитыИсточникаДействия,
			РеквизитыПроцесса,
			РезультатыПоВариантам,
			ДанныеВариантовВыполненияЗадачи);
		
	Иначе
		
		ПриОбновленииКнопокВариантовВыполненияИсполненияПодСогласованием(
			ДействиеЗадачи,
			ИсточникДействияЗадачи,
			РеквизитыИсточникаДействия,
			РеквизитыПроцесса,
			ДанныеВариантовВыполненияЗадачи);
		
		ПриОбновленииКнопокВариантовВыполненияОзнакомления(
			ДействиеЗадачи,
			РезультатыПоВариантам,
			ИсточникДействияЗадачи,
			ДанныеВариантовВыполненияЗадачи);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка определения задач по приложению.
// 
// Параметры:
// 	Приложение - ОпределяемыйТип.ПриложениеЗадач.
// 	Массив из ДокументСсылка.Задачи - Задачи по приложению, определенные по стандартному алгоритму.
// 	ВсеЗадачи - Булево.
//
Процедура ПриОпределенииЗадачПоПриложению(Приложение, ЗадачиПоПриложению, ВсеЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗадачиПоПриложению.Количество() = 0 Или ВсеЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиПоПриложениюИКорневые = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗадачиПоПриложениюИКорневые, ЗадачиПоПриложению);
	
	// В задачи по приложению не включаются задачи обработки.
	РеквизитыЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ЗадачиПоПриложению,
		"ВышестоящаяЗадача, Источник");
	
	// Определим корневые задачи.
	КорневыеЗадачи = Новый Соответствие;
	Для Каждого ЗадачаПоПриложению Из ЗадачиПоПриложению Цикл
		
		КорневаяЗадача = ЗадачаПоПриложению;
		
		РеквизитыЗадачи = РеквизитыЗадач[ЗадачаПоПриложению];
		ВышестоящаяЗадача = РеквизитыЗадачи.ВышестоящаяЗадача;
		
		Пока ЗначениеЗаполнено(ВышестоящаяЗадача) Цикл
			
			КорневаяЗадача = ВышестоящаяЗадача;
			РеквизитыЗадачи = РеквизитыЗадач[ВышестоящаяЗадача];
			Если РеквизитыЗадачи = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ВышестоящаяЗадача = РеквизитыЗадачи.ВышестоящаяЗадача;
			
		КонецЦикла;
		
		КорневыеЗадачи[ЗадачаПоПриложению] = КорневаяЗадача;
		
		ЗадачиПоПриложениюИКорневые.Добавить(КорневаяЗадача);
		
	КонецЦикла;
	
	ЗадачиПоПриложениюИКорневые =
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗадачиПоПриложениюИКорневые);
	РеквизитыЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ЗадачиПоПриложениюИКорневые,
		"ВышестоящаяЗадача, Источник");
	
	// Удалим задачи, у которых корневые задачи по действию.
	КоличествоЭлементов = ЗадачиПоПриложению.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЗадачаПоПриложению = ЗадачиПоПриложению[ОбратныйИндекс];
		
		КорневаяЗадача = КорневыеЗадачи[ЗадачаПоПриложению];
		
		РеквизитыЗадачи = РеквизитыЗадач[КорневаяЗадача];
		Если Не ЗначениеЗаполнено(РеквизитыЗадачи.Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(РеквизитыЗадачи.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			
			ЗадачиПоПриложению.Удалить(ОбратныйИндекс);
			
		Иначе
		
			ДействиеПоПроцессу = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
				РеквизитыЗадачи.Источник);
			Если Не ЗначениеЗаполнено(ДействиеПоПроцессу) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗадачиПоПриложению.Удалить(ОбратныйИндекс);

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработка формирования данных схемы жизненного цикла задачи.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Задача.
//  СхемаЖизненногоЦикла - Массив из Структура - Данные схемы жизненного цикла задачи.
//                         См. РаботаСЗадачами.ЭлементСхемыЖизненногоЦикла().
//
Процедура ПриОпределенииСхемыЖизненногоЦикла(Задача, СхемаЖизненногоЦикла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КорневаяЗадача = РаботаСЗадачами.КорневаяЗадача(Задача);
	
	ЗадачаДляИстории = ?(ЗначениеЗаполнено(КорневаяЗадача), КорневаяЗадача, Задача); 
	
	ИсточникЗадачи = РаботаСЗадачами.ИсточникЗадачи(ЗадачаДляИстории);
	Если Не ЗначениеЗаполнено(ИсточникЗадачи)
		Или (Не ОбщегоНазначения.ЭтоБизнесПроцесс(ИсточникЗадачи.Метаданные())
		И Не ДействияКлиентСервер.ЭтоДействиеОзнакомления(ИсточникЗадачи)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(ИсточникЗадачи) Тогда
		Действие = ИсточникЗадачи;
	Иначе	
		Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(ИсточникЗадачи);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Обработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОбработки =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Обработка,
			"Владелец, ДатаНачала, ДатаОкончания, ДатаСоздания, 
			|Начал, Прервал, ПричинаПрерывания, Состояние");
		
	Если Не ЗначениеЗаполнено(РеквизитыОбработки.Состояние) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОбъекта = ДействияСервер.ВидОбъекта(РеквизитыОбработки.Владелец);
	РезультатЗапроса = ДействияСервер.ВсеДействияОбработкиИПредмета(
		РеквизитыОбработки.Владелец,
		ВидОбъекта,
		Обработка,
		РеквизитыОбработки.ДатаСоздания);
	ТаблицаДействияОбработки = РезультатЗапроса.Выгрузить();
	ТекущиеДействияОбработки = ТаблицаДействияОбработки.ВыгрузитьКолонку("Действие");
	
	// Добавим отметку о выполнении действия вне программы
	Для Каждого СтрокаДействия Из ТаблицаДействияОбработки Цикл
		Если СтрокаДействия.ВыполненоВнеПрограммы Тогда
			СтрокаДействия.Представление = СтрШаблон("%1 (%2)",
				СтрокаДействия.Представление, ДействияКлиентСервер.КомментарийОВыполненииВнеПрограммы(Истина));
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущиеДействияОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Начало обработки.
	Если ЗначениеЗаполнено(РеквизитыОбработки.ДатаНачала) Тогда
		
		ЭлементСхемыЖизненногоЦикла = РаботаСЗадачами.ЭлементСхемыЖизненногоЦикла();
		ЭлементСхемыЖизненногоЦикла.ТипУзла =
			Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
		
		ЭлементСхемыЖизненногоЦикла.Дата = РеквизитыОбработки.ДатаНачала;
		
		ПолУчастника = РаботаСЗадачамиПовтИсп.ПолУчастника(РеквизитыОбработки.Начал);
		ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон(
			?(ПолУчастника = Перечисления.ПолФизическогоЛица.Женский,
				НСтр("ru = 'Начала обработку %1'"),
				НСтр("ru = 'Начал обработку %1'")),
			РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(РеквизитыОбработки.Начал));
		
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
			Перечисления.ХарактерыРезультатов.Положительный;
		
		СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
		
	КонецЕсли;
	
	// Действия обработки.
	ОтображатьНеНачатыеДействия =
		(РеквизитыОбработки.Состояние = Перечисления.СостоянияОбработкиОбъектов.Выполняется);
	
	ВсеСостоянияИРезультаты = ДействияСервер.ВсеСостоянияИРезультаты(ТекущиеДействияОбработки);
	ВсеСостоянияИРезультаты.Сортировать("Дата Возр");
	
	ИсточникиДействийЗадач = Новый Массив;
	ЗадачиПроцессовПоУчастникамДействий =
		РаботаСПроцессамиПоДействиям.ЗадачиПроцессовПоУчастникамДействий(ТекущиеДействияОбработки);
	Для Каждого КлючИЗначение1 Из ЗадачиПроцессовПоУчастникамДействий Цикл
		
		ЗадачиПроцессовПоУчастникамДействия = КлючИЗначение1.Значение;
		Для Каждого КлючИЗначение2 Из ЗадачиПроцессовПоУчастникамДействия Цикл
			
			ЗадачаПроцесса = КлючИЗначение2.Значение;
			ИсточникиДействийЗадач.Добавить(ЗадачаПроцесса);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДействияЗадачиПоИсточникам = Документы.ДействиеЗадачи.НайтиПоИсточникам(ИсточникиДействийЗадач);
	
	ВсеДействияЗадач = Новый Массив;
	Для Каждого КлючИЗначение Из ДействияЗадачиПоИсточникам Цикл
		
		ДействиеЗадачи = КлючИЗначение.Значение;
		
		ВсеДействияЗадач.Добавить(ДействиеЗадачи);
		
	КонецЦикла;
	
	РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеДействияЗадач,
		"ВидУчастника, ДатаВыполнения, Задача, РезультатДействия, РезультатДействияТекстом,
		|Исполнитель, Приложения, ФактическийИсполнитель");
	
	Для Каждого КлючИЗначение Из РеквизитыДействий Цикл

		РеквизитыДействия = КлючИЗначение.Значение;
		
		РеквизитыДействия.Приложения = РеквизитыДействия.Приложения.Выгрузить();
		РеквизитыДействия.Приложения.Сортировать("НомерСтроки Возр");
		
	КонецЦикла;
	
	ВсеЗадачи = Новый Массив;
	Для Каждого КлючИЗначение Из РеквизитыДействий Цикл
		
		РеквизитыДействия = КлючИЗначение.Значение;
		
		ВсеЗадачи.Добавить(РеквизитыДействия.Задача);
		
	КонецЦикла;
	
	ВсеЗадачи = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеЗадачи);
	
	РеквизитыЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеЗадачи,
		"ВидЗадачи, Источник");
	
	ДанныеНаборовСостояний = Новый Соответствие;
	ПредметОбъект = РеквизитыОбработки.Владелец.ПолучитьОбъект();
	
	Для Каждого ДействиеОбработки Из ТекущиеДействияОбработки Цикл
		
		ДанныеДействияОбработки = ТаблицаДействияОбработки.Найти(ДействиеОбработки);
		
		// Действие обработки.
		ПараметрыОтбора = Новый Структура("Действие, Участник");
		ПараметрыОтбора.Действие = ДействиеОбработки;
		ПараметрыОтбора.Участник = Неопределено;
		НайденныеСтроки = ВсеСостоянияИРезультаты.НайтиСтроки(ПараметрыОтбора);
		ДанныеСостоянияИРезультатаДействия =
			?(НайденныеСтроки.Количество() > 0,
				НайденныеСтроки[0],
				Неопределено);
		
		ЭлементСхемыЖизненногоЦикла = РаботаСЗадачами.ЭлементСхемыЖизненногоЦикла();
		ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.УзелСостояния;
		ЭлементСхемыЖизненногоЦикла.Заголовок = ДанныеДействияОбработки.Представление;
		ЭлементСхемыЖизненногоЦикла.НавигационнаяСсылка = СтрШаблон(
			"v8doc:processing/ShowAction/%1",
			ПолучитьНавигационнуюСсылку(ДействиеОбработки));
		
		СостояниеДействия =
			?(ДанныеСостоянияИРезультатаДействия <> Неопределено,
				ДанныеСостоянияИРезультатаДействия.Состояние,
				Неопределено);
		ДействиеНачато = СостояниеДействия <> Неопределено;
		
		// Вид действия обработки.
		ПараметрыОтбора = Новый Структура("Действие");
		ПараметрыОтбора.Действие = ДействиеОбработки;
		НайденныеСтроки = ТаблицаДействияОбработки.НайтиСтроки(ПараметрыОтбора);
		ВидДействия =
			?(НайденныеСтроки.Количество() > 0,
				НайденныеСтроки[0].ВидДействия,
				Неопределено);
		Если ДействияСервер.НеПоказыватьПоНастройке(
			ВидДействия, ДействиеОбработки, ПредметОбъект, СостояниеДействия) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ДействиеНачато Тогда
			
			Если Не ОтображатьНеНачатыеДействия Тогда
				Продолжить;
			КонецЕсли;
			
			// Действие не начато.
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаСерое;
			ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
				Перечисления.ХарактерыРезультатов.Нейтральный;
			
		ИначеЕсли СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
			
			// Действие завершено.
			ХарактерРезультатаДействия =
				ДействияКлиентСервер.ХарактерРезультата(
					ДанныеСостоянияИРезультатаДействия.Результат);
			Если ХарактерРезультатаДействия = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
				
				ЭлементСхемыЖизненногоЦикла.Картинка =
					БиблиотекаКартинок.СостояниеВыполненаЗеленое;				
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
					Перечисления.ХарактерыРезультатов.Положительный;
				
			ИначеЕсли ХарактерРезультатаДействия = Перечисления.ХарактерыРезультатов.Положительный
				Или ХарактерРезультатаДействия = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями Тогда
				
				ЭлементСхемыЖизненногоЦикла.Картинка =
					БиблиотекаКартинок.СостояниеПровереноЗеленое;
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
					Перечисления.ХарактерыРезультатов.Положительный;
				
			ИначеЕсли ХарактерРезультатаДействия = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
				
				ЭлементСхемыЖизненногоЦикла.Картинка =
					БиблиотекаКартинок.СостояниеПровереноКрасное;
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
					Перечисления.ХарактерыРезультатов.Отрицательный;
				
			Иначе
				
				ЭлементСхемыЖизненногоЦикла.Картинка =
					БиблиотекаКартинок.СостояниеВыполненаЗеленое;				
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
					Перечисления.ХарактерыРезультатов.Положительный;
				
			КонецЕсли;
			
		ИначеЕсли СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
			
			// Действие пропущено.
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаЗеленое;
			ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
				Перечисления.ХарактерыРезультатов.Положительный;
			ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон("%1 (%2)",
				ЭлементСхемыЖизненногоЦикла.Заголовок,
				Строка(СостояниеДействия));
			
		ИначеЕсли СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Остановлено Тогда
			
			// Действие остановлено.
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаЗеленое;
			ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
				Перечисления.ХарактерыРезультатов.Положительный;
			ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон("%1 (%2)",
				ЭлементСхемыЖизненногоЦикла.Заголовок,
				Строка(СостояниеДействия));
			
		Иначе
			
			// Действие выполняется
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаЗеленое;
			ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
				Перечисления.ХарактерыРезультатов.Положительный;
			
		КонецЕсли;  
			
		Если ТипЗнч(ДействиеОбработки) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда  
			
			Если ЗначениеЗаполнено(СостояниеДействия) Тогда
			
				СуммарноеКоличество = РегистрыСведений.УчастникиОзнакомлений.СуммарноеКоличествоУчастниковДействия(ДействиеОбработки); 
				Если СуммарноеКоличество.ВсегоЗаписей <> 0 Тогда
					ЭлементСхемыЖизненногоЦикла.Описание 
						= СтрШаблон(НСТр("ru = 'Ознакомлено %1 из %2'"), 
							СуммарноеКоличество.ВсегоЗавершено,
							СуммарноеКоличество.ВсегоЗаписей);
				КонецЕсли;	
					
			КонецЕсли;		
		КонецЕсли;	
		
		СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
		
		// Результаты участников действия.
		ПараметрыОтбора = Новый Структура("Действие");
		ПараметрыОтбора.Действие = ДействиеОбработки;
		НайденныеСтроки = ВсеСостоянияИРезультаты.НайтиСтроки(ПараметрыОтбора);
		
		ЗадачиПроцессовПоУчастникамДействия =
			ЗадачиПроцессовПоУчастникамДействий[ДействиеОбработки];
		
		ДанныеПунктовУчастников = ДействияСервер.ДанныеПунктовУчастников(ДействиеОбработки);
		
		Для Каждого ДанныеСостоянияИРезультата Из НайденныеСтроки Цикл
			
			Если ДанныеСостоянияИРезультата.Участник = Неопределено
				Или Не ЗначениеЗаполнено(ДанныеСостоянияИРезультата.Результат) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗадачаПроцесса =
				ЗадачиПроцессовПоУчастникамДействия[ДанныеСостоянияИРезультата.ИдентификаторУчастника];
			Если Не ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
				Продолжить;
			КонецЕсли;
			
			ДействиеЗадачи = ДействияЗадачиПоИсточникам[ЗадачаПроцесса];
			Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыДействия = РеквизитыДействий[ДействиеЗадачи];
			Если Не ЗначениеЗаполнено(РеквизитыДействия.РезультатДействия) Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыЗадачи = РеквизитыЗадач[РеквизитыДействия.Задача];
			
			УточнениеИсполнителя = УточнениеИсполнителя(
				РеквизитыЗадачи.Источник,
				ДанныеСостоянияИРезультата.ИдентификаторУчастника,
				ЗадачаПроцесса);
			Если УточнениеИсполнителя <> Неопределено Тогда
				УточненныйИсполнитель = УточнениеИсполнителя.Исполнитель;
			ИначеЕсли ЗначениеЗаполнено(РеквизитыДействия.ФактическийИсполнитель) Тогда
				УточненныйИсполнитель = РеквизитыДействия.ФактическийИсполнитель;
			Иначе
				УточненныйИсполнитель = РеквизитыДействия.Исполнитель;
			КонецЕсли;
			
			ДанныеНабораСостояний = ДанныеНаборовСостояний[РеквизитыЗадачи.ВидЗадачи];
			Если ДанныеНабораСостояний = Неопределено Тогда
				ДанныеНаборовСостояний[РеквизитыЗадачи.ВидЗадачи] =
					РаботаСЗадачамиПовтИсп.ДанныеНабораСостояний(РеквизитыЗадачи.ВидЗадачи);
				ДанныеНабораСостояний = ДанныеНаборовСостояний[РеквизитыЗадачи.ВидЗадачи];
			КонецЕсли;
			
			ЭлементСхемыЖизненногоЦикла = РаботаСЗадачами.ЭлементСхемыЖизненногоЦикла();
			ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
			
			СостоянияУчастниковСовершеноПоРезультатам =
				ДанныеНабораСостояний.СостоянияУчастниковСовершено.Получить(
					РеквизитыДействия.ВидУчастника);
			СостояниеВыполнено =
				СостоянияУчастниковСовершеноПоРезультатам.Получить(
					РеквизитыДействия.РезультатДействия);
			
			ЭлементСхемыЖизненногоЦикла.Дата = РеквизитыДействия.ДатаВыполнения;
			
			ПолУчастника = РаботаСЗадачамиПовтИсп.ПолУчастника(УточненныйИсполнитель);
			ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон(
				"%1 %2",
				?(ПолУчастника = Перечисления.ПолФизическогоЛица.Женский,
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						СостояниеВыполнено,
						"ТерминПереходаВСостояниеЖенский"),
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						СостояниеВыполнено,
						"ТерминПереходаВСостояниеМужской")),
				РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(УточненныйИсполнитель));
			
			ДанныеПункта = ДанныеПунктовУчастников.Получить(
				ДанныеСостоянияИРезультата.ИдентификаторУчастника);
			Если ДанныеПункта <> Неопределено Тогда
				
				ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон(
					НСтр("ru = 'Пункт № %1. %2'"),
					ДанныеПункта.Номер,
					ЭлементСхемыЖизненногоЦикла.Заголовок);
				
			КонецЕсли;
			
			ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
				РаботаСЗадачамиПовтИсп.ХарактерРезультата(РеквизитыДействия.РезультатДействия);
			Если ЭлементСхемыЖизненногоЦикла.ХарактерРезультата <> Перечисления.ХарактерыРезультатов.Отрицательный Тогда
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
			КонецЕсли;
			
			// Дополнение промежуточного узла "Проверил".
			Если (ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом)
				Или РеквизитыДействия.Приложения.Количество() > 0) Тогда
				
				Если ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
					ЭлементСхемыЖизненногоЦикла.Описание = РеквизитыДействия.РезультатДействияТекстом;
				КонецЕсли;
				
				Для Каждого ДанныеПриложения Из РеквизитыДействия.Приложения Цикл
					
					СтрокаПриложения = ЭлементСхемыЖизненногоЦикла.Приложения.Добавить();
					
					Если ТипЗнч(ДанныеПриложения.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
						
						РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							ДанныеПриложения.Приложение,
							"ПолноеНаименование, ИндексКартинки, ТекущаяВерсияРасширение");
						
						СтрокаПриложения.ИндексКартинки = РеквизитыФайла.ИндексКартинки;
						СтрокаПриложения.Заголовок = РеквизитыФайла.ПолноеНаименование;
						Если ЗначениеЗаполнено(РеквизитыФайла.ТекущаяВерсияРасширение) Тогда
							СтрокаПриложения.Заголовок = СтрШаблон(
								"%1.%2",
								СтрокаПриложения.Заголовок,
								РеквизитыФайла.ТекущаяВерсияРасширение);
						КонецЕсли;
						
						СтрокаПриложения.Приложение = ДанныеПриложения.Приложение;
						
					Иначе
						
						СтрокаПриложения.Приложение = ДанныеПриложения.Приложение;
						СтрокаПриложения.Заголовок = Строка(ДанныеПриложения.Приложение);
						СтрокаПриложения.ИндексКартинки = 10;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Завершение обработки.
	Если ЗначениеЗаполнено(РеквизитыОбработки.ДатаОкончания)
		И РеквизитыОбработки.Состояние = Перечисления.СостоянияОбработкиОбъектов.Завершена Тогда
		
		ЭлементСхемыЖизненногоЦикла = РаботаСЗадачами.ЭлементСхемыЖизненногоЦикла();
		ЭлементСхемыЖизненногоЦикла.ТипУзла =
			Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
		
		ЭлементСхемыЖизненногоЦикла.Дата = РеквизитыОбработки.ДатаОкончания;
		
		ЭлементСхемыЖизненногоЦикла.Заголовок = НСтр("ru = 'Обработка завершена'");
		
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
			Перечисления.ХарактерыРезультатов.Положительный;
		
		СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
		
	КонецЕсли;
	
	// Прерывание обработки.
	Если ЗначениеЗаполнено(РеквизитыОбработки.ДатаОкончания)
		И РеквизитыОбработки.Состояние = Перечисления.СостоянияОбработкиОбъектов.Прервана Тогда
		
		ЭлементСхемыЖизненногоЦикла = РаботаСЗадачами.ЭлементСхемыЖизненногоЦикла();
		ЭлементСхемыЖизненногоЦикла.ТипУзла =
			Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
		
		ЭлементСхемыЖизненногоЦикла.Дата = РеквизитыОбработки.ДатаОкончания;
		
		ПолУчастника = РаботаСЗадачамиПовтИсп.ПолУчастника(РеквизитыОбработки.Прервал);
		ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон(
			?(ПолУчастника = Перечисления.ПолФизическогоЛица.Женский,
				НСтр("ru = 'Прервала обработку %1'"),
				НСтр("ru = 'Прервал обработку %1'")),
			РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(РеквизитыОбработки.Прервал));
		
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата =
			Перечисления.ХарактерыРезультатов.Отрицательный;
		
		ЭлементСхемыЖизненногоЦикла.Описание = РеквизитыОбработки.ПричинаПрерывания;
		
		СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка формирования параметров открытия карточки исполнителя.
// 
// Параметры:
//  КлючОткрытия - Произвольный.
//  ДополнительныеПараметры - Структура.
//  ПараметрыОткрытия - См. РаботаСЗадачамиВызовСервера.ПараметрыОткрытияКарточкиИсполнителя.
//
Процедура ПриОпределенииПараметровОткрытияКарточкиИсполнителя(КлючОткрытия, ДополнительныеПараметры, ПараметрыОткрытия) Экспорт
	
	Если Не ЗначениеЗаполнено(КлючОткрытия) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(КлючОткрытия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ВидФормы = "ФормаОбъекта";
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			ПараметрыОбработкиПолучения = ДополнительныеПараметры;
		Иначе
			ПараметрыОбработкиПолучения = Новый Структура;
		КонецЕсли;
		ПараметрыОбработкиПолучения.Вставить("Ключ", КлючОткрытия);
		
		ВыбраннаяФорма = Неопределено;
		
		ДополнительнаяИнформация = Новый Структура;
		ДополнительнаяИнформация.Вставить("ПовторноеИспользование", Ложь);
		
		ПараметрСтандартнаяОбработка = Истина;
		
		Задачи.ЗадачаИсполнителя.ОбработкаПолученияФормы(
			ВидФормы,
			ПараметрыОбработкиПолучения, 
			ВыбраннаяФорма,
			ДополнительнаяИнформация,
			ПараметрСтандартнаяОбработка);
		
		Если ВыбраннаяФорма <> Неопределено Тогда
			
			ПараметрыОткрытия.КлючОткрытияКорректный = Истина;
			Если ТипЗнч(ВыбраннаяФорма) = Тип("Строка") Тогда
				ПараметрыОткрытия.ИмяФормы = ВыбраннаяФорма;
			Иначе
				ПараметрыОткрытия.ИмяФормы = ВыбраннаяФорма.ПолноеИмя();
			КонецЕсли;
			ПараметрыОткрытия.ПараметрыФормы = ПараметрыОбработкиПолучения;
		
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(КлючОткрытия) = Тип("Структура")
		И КлючОткрытия.Свойство("Действие")
		И КлючОткрытия.Свойство("ИдентификаторУчастника") Тогда
		
		ЗадачаПроцесса = РаботаСПроцессамиПоДействиямВызовСервера.ЗадачаПроцессаПоУчастникуДействия(
			КлючОткрытия.Действие,
			КлючОткрытия.ИдентификаторУчастника);
		ДействиеЗадачи = Документы.ДействиеЗадачи.НайтиПоИсточнику(ЗадачаПроцесса);
		
		Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
			
			КлючОткрытия = ДействиеЗадачи;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Обработки события "При записи" задачи.
//
// Параметры:
//  ЗадачаОбъект - ДокументОбъект.Задача
//  Отказ - Булево
//
Процедура ПриЗаписиЗадачи(ЗадачаОбъект, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗадачаОбъект.ДополнительныеСвойства.ЭтоНовый Тогда
		
		ВеткаРодитель = Неопределено;
	
		ВышестоящаяЗадача = ЗадачаОбъект.ВышестоящаяЗадача;
		Если ЗначениеЗаполнено(ВышестоящаяЗадача) Тогда
			
			ИсточникЗадачи = РаботаСЗадачами.ИсточникЗадачи(ВышестоящаяЗадача);
			
			Если ЗначениеЗаполнено(ИсточникЗадачи) И ОбщегоНазначения.ЭтоБизнесПроцесс(ИсточникЗадачи.Метаданные())  Тогда
	
				Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
					ИсточникЗадачи);
				Если ЗначениеЗаполнено(Действие) И ТипЗнч(Действие) = Тип(
					"СправочникСсылка.ДействияСогласования") Тогда
						
					ВеткаРодитель = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(Действие);	
						
					НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(
						Действие);
					РегистрыСведений.ИтерацииЗадачДействий.ДобавитьЗапись(
						ЗадачаОбъект.Ссылка, НомерИтерации);

				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
		ВышестоящееДействие = Неопределено;
		КорневаяЗадача = РаботаСЗадачами.КорневаяЗадачаИДействие(ЗадачаОбъект.Ссылка, ВышестоящееДействие);
		ИсточникЗадачи = РаботаСЗадачами.ИсточникЗадачи(КорневаяЗадача);
		
		Если ЗначениеЗаполнено(ИсточникЗадачи) И ОбщегоНазначения.ЭтоБизнесПроцесс(ИсточникЗадачи.Метаданные())  Тогда
			
			ИдУчастника = Неопределено;
			
			Если ЗначениеЗаполнено(КорневаяЗадача) И ЗначениеЗаполнено(ВышестоящееДействие) Тогда
			
				ТЧУчастники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					КорневаяЗадача, "Участники");
				ТЧУчастники = ТЧУчастники.Выгрузить();
				ТЧУчастники.Сортировать("НомерСтроки Возр");
				
				ПараметрыОтбора = Новый Структура("ДействиеУчастника", ВышестоящееДействие);
				НайденныеСтроки = ТЧУчастники.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() <> 0 Тогда
					ИдУчастника = НайденныеСтроки[0].ВнешнийИдентификатор;
				КонецЕсли;		
			
			КонецЕсли;
			

			Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
				ИсточникЗадачи);
			НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(Действие, ИдУчастника);
				
			Если ЗначениеЗаполнено(Действие) Тогда
				
				ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
				
				Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
				Событие.Обработка = ТекущаяОбработка;
				Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.СозданиеЗадачи;
				Событие.Поручение = ЗадачаОбъект.Ссылка;
				Событие.Действие = Действие;
				РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
				
				Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования")
					Или ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания")
					Или ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияУтверждения")
					Или ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияРегистрации")
					Или ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
						
					РегистрыСведений.ИтерацииЗадачДействий.ДобавитьЗапись(
						ЗадачаОбъект.Ссылка, НомерИтерации);
						
					Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда	
						СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "СогласованиеВРежимеЗамечаний");
						Если СогласованиеВРежимеЗамечаний Тогда
							
							Если Не ЗначениеЗаполнено(ВеткаРодитель) Тогда
								ВеткаРодитель 
									= СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(
									ВышестоящаяЗадача);
							КонецЕсли;	
							
							СогласованиеВРежимеЗамечанийСервер.НайтиСоздатьВеткуОбработки(
								ЗадачаОбъект.Ссылка, ВеткаРодитель);
								
						КонецЕсли;
					КонецЕсли;
						
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;			
			
	КонецЕсли;
	
КонецПроцедуры

// Формирует вставку перед HTML текста задачи.
//
// Параметры:
//   ЗадачаОбъект - ДокументОбъект.Задача
//   ТекущееДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   Строка, Неопределено - Переопределенная вставка перед HTML текста задачи.
//
Функция ОписаниеHTMLПеред(ЗадачаОбъект, ТекущееДействиеЗадачи, КешДанных = Неопределено) Экспорт
	
	ТекстНачалаHTML = Неопределено;
	
	КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
	
	Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.ДействиеЗадачи = ТекущееДействиеЗадачи Тогда
		ИсточникДействияЗадачи = КэшОбластиПросмотра.РеквизитыДействияЗадачи.Источник;
	Иначе
		ИсточникДействияЗадачи = РаботаСЗадачами.ИсточникДействияЗадачи(ТекущееДействиеЗадачи);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсточникДействияЗадачи) Тогда
		Возврат ТекстНачалаHTML;
	КонецЕсли;
	
	СостояниеВыполненияЗадачи = ОбработкаОчередиЗаданийСервер.СостояниеВыполненияЗадачи(ИсточникДействияЗадачи);
	Если СостояниеВыполненияЗадачи.СостояниеВыполнения = Перечисления.СостоянияЗадачДляВыполнения.ВыполнениеОтменено Тогда
		
		СсылкаПоказатьПричинуОтмены = СтрШаблон(
			"v8doc:tasks/ShowProcessRollbackReason/%1",
			КодироватьСтроку(СостояниеВыполненияЗадачи.ПричинаОтменыВыполнения, СпособКодированияСтроки.URLВКодировкеURL));
		
		ТекстНачалаHTML = СтрШаблон(
			"<table bgcolor=#F0F0F0><tr>
			|<td width=20>%1</td>
			|<td><a href=%2><FONT color=#FF0000>%3: %4</FONT></a></td>
			|</tr></table>",
			ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(
				БиблиотекаКартинок.Предупреждение,
				СсылкаПоказатьПричинуОтмены),
			СсылкаПоказатьПричинуОтмены,
			НСтр("ru = 'Выполнение задачи отменено'"),
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(СостояниеВыполненияЗадачи.ПричинаОтменыВыполнения));
		
	ИначеЕсли СостояниеВыполненияЗадачи.СостояниеВыполнения = Перечисления.СостоянияЗадачДляВыполнения.ГотоваКВыполнению Тогда
		
		ТекстНачалаHTML = СтрШаблон(
			"<table bgcolor=#F0F0F0><tr>
			|<td width=20>%1</td>
			|<td>%2</td>
			|</tr></table>",
			ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(БиблиотекаКартинок.СтартБизнесПроцесса),
			НСтр("ru = 'Задача находится в очереди для выполнения. Выполнение задачи произойдет автоматически в ближайшее время.'"));
		
	ИначеЕсли ОбщегоНазначения.ЭтоЗадача(ИсточникДействияЗадачи.Метаданные()) Тогда
		
		Процесс = Неопределено;
		Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеЗадачИсполнителей") Тогда
			РеквизитыИсточникаДействия = КешДанных.ДанныеЗадачИсполнителей[ИсточникДействияЗадачи];
			Если РеквизитыИсточникаДействия <> Неопределено Тогда
				Процесс = РеквизитыИсточникаДействия.БизнесПроцесс;
			КонецЕсли;
		КонецЕсли;
		Если Процесс = Неопределено Тогда
			Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДействияЗадачи, "БизнесПроцесс");
		КонецЕсли;
		
		Если ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(Процесс) Тогда
			ТекстНачалаHTML = СтрШаблон(
				"<table bgcolor=#F0F0F0><tr>
				|<td width=20>%1</td>
				|<td>%2</td>
				|</tr></table>", ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(БиблиотекаКартинок.ИнформацияБЭД), НСтр(
					"ru = 'Задача недоступна для выполнения, т.к. по процессу имеются незавершенные задания в очереди.'"));
		ИначеЕсли ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(ИсточникДействияЗадачи, ,
			Перечисления.ТипыЗаданий.ОтменитьВыполнениеЗадачи) Тогда
			ТекстНачалаHTML = СтрШаблон(
				"<table bgcolor=#F0F0F0><tr>
				|<td width=20>%1</td>
				|<td>%2</td>
				|</tr></table>", ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(БиблиотекаКартинок.СтартБизнесПроцесса), НСтр(
					"ru = 'Задача находится в очереди для отмены выполнения. Отмена выполнения произойдет автоматически в ближайшее время.'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстНачалаHTML;
	
КонецФункции

// Формирует вставку после HTML текста задачи.
//
// Параметры:
//   ЗадачаОбъект - ДокументОбъект.Задача
//   ТекущееДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//   ВключатьНавигационныеСсылки - Булево
//   КодЯзыка - Строка
//
// Возвращаемое значение:
//   Строка, Неопределено - Переопределенная вставка после HTML текста задачи.
//
Функция ОписаниеHTMLПосле(ЗадачаОбъект, ТекущееДействиеЗадачи, КешДанных, ВключатьНавигационныеСсылки, КодЯзыка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстКонцаHTML = "";
	
	КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
	
	Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.ДействиеЗадачи = ТекущееДействиеЗадачи Тогда
		ИсточникДействияЗадачи = КэшОбластиПросмотра.РеквизитыДействияЗадачи.Источник;
	Иначе
		ИсточникДействияЗадачи = РаботаСЗадачами.ИсточникДействияЗадачи(ТекущееДействиеЗадачи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсточникДействияЗадачи)
			И ТипЗнч(ИсточникДействияЗадачи) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		РеквизитыИсточника = Неопределено;
		Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеЗадачИсполнителей") Тогда
			РеквизитыИсточника = КешДанных.ДанныеЗадачИсполнителей[ИсточникДействияЗадачи];
		КонецЕсли;
		Если РеквизитыИсточника = Неопределено Тогда
			РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ИсточникДействияЗадачи,
				"БизнесПроцесс, Предметы, ТочкаМаршрута");
		КонецЕсли;
		
		// Обзор предмета.
		ПредметыИсточника = РеквизитыИсточника.Предметы.Выгрузить();
		ПредметыИсточника.Сортировать("НомерСтроки Возр");
		
		ПредметДокумент = ОбзорЗадач.ПолучитьОсновнойПредметДокумент(ПредметыИсточника);
		Если ЗначениеЗаполнено(ПредметДокумент) Тогда
			
			ДанныеПредмета = Неопределено;
			Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеПредметов") Тогда
				ДанныеПредмета = КешДанных.ДанныеПредметов[ПредметДокумент];
			КонецЕсли;
			Если ДанныеПредмета <> Неопределено Тогда
				ОбзорПредмета = ДанныеПредмета.Обзор;
			Иначе
				ОбзорПредмета = ОбзорЗадач.ПолучитьОбзорПредметаЗадачи(ПредметДокумент, КешДанных, КодЯзыка);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОбзорПредмета) Тогда
				ТекстКонцаHTML = ТекстКонцаHTML + "<p>" + ОбзорПредмета + "</p>";
			КонецЕсли;
			
		КонецЕсли;
		
		ПредметМероприятие = ОбзорЗадач.ПолучитьОсновнойПредметМероприятие(ПредметыИсточника);
		Если ЗначениеЗаполнено(ПредметМероприятие) Тогда
			
			ДанныеПредмета = Неопределено;
			Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеПредметов") Тогда
				ДанныеПредмета = КешДанных.ДанныеПредметов[ПредметДокумент];
			КонецЕсли;
			Если ДанныеПредмета <> Неопределено Тогда
				ОбзорПредмета = ДанныеПредмета.Обзор;
			Иначе
				ОбзорПредмета = ОбзорЗадач.ПолучитьОбзорПредметаЗадачиМероприятия(ПредметМероприятие, КешДанных, КодЯзыка);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОбзорПредмета) Тогда
				ТекстКонцаHTML = ТекстКонцаHTML + "<p>" + ОбзорПредмета + "</p>";
			КонецЕсли;
			
		КонецЕсли;
		
		// Обзор задачи, специфичный для процесса.
		Попытка
			
			МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(РеквизитыИсточника.БизнесПроцесс);
			МенеджерШаблона.ЗаполнитьОбзорЗадачи(
				ТекстКонцаHTML,
				РеквизитыИсточника.БизнесПроцесс,
				РеквизитыИсточника.ТочкаМаршрута,
				ИсточникДействияЗадачи,
				ВключатьНавигационныеСсылки,
				КодЯзыка);
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			СобытиеЖурналаРегистрации = РаботаСЗадачами.СобытиеЖурналаРегистрации();
			КомментарийЖурналаРегистрации = СтрШаблон(
				"%1:
				|%2",
				НСтр("ru = 'Не удалось заполнить обзор задачи по данным процесса'"),
				ПодробноеПредставлениеОшибки);
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,,,
				КомментарийЖурналаРегистрации);
			
		КонецПопытки;
		
		ТекстКонцаHTML = СокрЛП(ТекстКонцаHTML);
		Если Не ЗначениеЗаполнено(ТекстКонцаHTML) Тогда
			ТекстКонцаHTML = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ЗадачаОбъект.Приложения.Количество() = 1
			И ТипЗнч(ЗадачаОбъект.Приложения[0].Приложение) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
			ПредметДокумент = ЗадачаОбъект.Приложения[0].Приложение;
			
		Иначе
			
			ПредметДокумент = Неопределено;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредметДокумент) Тогда
			
			Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеПредметов") Тогда
				ДанныеПредмета = КешДанных.ДанныеПредметов[ПредметДокумент];
			КонецЕсли;
			Если ДанныеПредмета <> Неопределено Тогда
				ОбзорПредмета = ДанныеПредмета.Обзор;
			Иначе
				ОбзорПредмета = ОбзорЗадач.ПолучитьОбзорПредметаЗадачи(ПредметДокумент, КешДанных, КодЯзыка);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОбзорПредмета) Тогда
				ТекстКонцаHTML = ТекстКонцаHTML + "<p>" + ОбзорПредмета + "</p>";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗадачаОбъект.Приложения.Количество() = 1
			И ТипЗнч(ЗадачаОбъект.Приложения[0].Приложение) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			ПредметМероприятие = ЗадачаОбъект.Приложения[0].Приложение;
			
		Иначе
			
			ПредметМероприятие = Неопределено;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредметМероприятие) Тогда
			
			Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеПредметов") Тогда
				ДанныеПредмета = КешДанных.ДанныеПредметов[ПредметДокумент];
			КонецЕсли;
			Если ДанныеПредмета <> Неопределено Тогда
				ОбзорПредмета = ДанныеПредмета.Обзор;
			Иначе
				ОбзорПредмета = ОбзорЗадач.ПолучитьОбзорПредметаЗадачиМероприятия(ПредметМероприятие, КешДанных, КодЯзыка);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОбзорПредмета) Тогда
				ТекстКонцаHTML = ТекстКонцаHTML + "<p>" + ОбзорПредмета + "</p>";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстКонцаHTML = СокрЛП(ТекстКонцаHTML);
	Если Не ЗначениеЗаполнено(ТекстКонцаHTML) Тогда
		ТекстКонцаHTML = Неопределено;
	КонецЕсли;
	
	Возврат ТекстКонцаHTML;
	
КонецФункции

// Определяет уточнения исполнителя по источнику действия задачи.
// 
// Параметры:
// 	ИсточникЗадачи - ОпределяемыйТип.ИсточникЗадач.
// 	ВнешнийИдентификатор - УникальныйИдентификатор.
// 	ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач.
// 	
// Возвращаемое значение:
// 	Неопределено - Уточнения нет.
//  Структура - Уточнение исполнителя.
//   * ПредставлениеРеквизита - Строка.
//   * Исполнитель - ЛюбаяСсылка.
//
Функция УточнениеИсполнителя(ИсточникЗадачи, ВнешнийИдентификатор, ИсточникДействияЗадачи) Экспорт
	
	УточнениеИсполнителя = Неопределено;
	Если ТипЗнч(ИсточникЗадачи) <> Тип("БизнесПроцессСсылка.Подписание") Тогда
		Возврат УточнениеИсполнителя;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ИсточникЗадачи,
		"Участники");
	
	Участники = РеквизитыПроцесса.Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки Возр");
	
	СтрокаУчастника = Участники.Найти(ВнешнийИдентификатор, "Идентификатор");
	Если СтрокаУчастника = Неопределено Тогда
		Возврат УточнениеИсполнителя;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаУчастника.Подписывающий) Тогда
		Возврат УточнениеИсполнителя;
	КонецЕсли;
	
	Если СтрокаУчастника.Участник = СтрокаУчастника.Подписывающий Тогда
		Возврат УточнениеИсполнителя;
	КонецЕсли;
	
	УточнениеИсполнителя = Новый Структура("ПредставлениеРеквизита, Исполнитель");
	УточнениеИсполнителя.ПредставлениеРеквизита = НСтр("ru = 'Подписывающий'");
	УточнениеИсполнителя.Исполнитель = СтрокаУчастника.Подписывающий;
	
	Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
		ИсточникЗадачи);
	Если ЗначениеЗаполнено(Действие) Тогда
		
		СведенияОбУчастникахДействия =
			РегистрыСведений.СведенияОбУчастникахДействий.ПолучитьСведенияОбУчастникахДействия(Действие);
		
		СведенияОбУчастникеДействия = СведенияОбУчастникахДействия[СтрокаУчастника.Идентификатор];
		
		Если СведенияОбУчастникеДействия <> Неопределено
			И ЗначениеЗаполнено(СведенияОбУчастникеДействия.ФактическийИсполнитель) Тогда
			УточнениеИсполнителя.Исполнитель = СведенияОбУчастникеДействия.ФактическийИсполнитель;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УточнениеИсполнителя;
	
КонецФункции

// Подписывающие по задаче подписания.
// 
// Параметры:
//  ПараметрыЗадачи - Структура - Параметры задачи:
// * БизнесПроцесс - БизнесПроцессСсылка.Подписание - Процесс подписания
// * ИдентификаторИсполнителя - УникальныйИдентификатор - ИД участника
// * Исполнитель - СправочникСсылка.Сотрудники - исполнитель задачи
// * РольИсполнителя - СправочникСсылка.РолиИсполнителей - роль исполнителя
// 
// Возвращаемое значение:
//  Массив - Подписывающие по задаче подписания
Функция ПодписывающиеПоЗадачеПодписания(ПараметрыЗадачи) Экспорт
	
	ПодписывающиеМассив = Новый Массив;
	Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
		ПараметрыЗадачи.БизнесПроцесс);
	
	Подписывающий = Неопределено;
	Если ЗначениеЗаполнено(Действие) Тогда
		Участники = ДействияСервер.УчастникиДействия(Действие);
		Если ЗначениеЗаполнено(ПараметрыЗадачи.ИдентификаторИсполнителя) Тогда
			СтрокиУчастника = Участники.НайтиСтроки(
				Новый Структура("Идентификатор", ПараметрыЗадачи.ИдентификаторИсполнителя));
			Если СтрокиУчастника.Количество() > 0 
				И СтрокиУчастника[0].Функция = Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
				Подписывающий =  СтрокиУчастника[0].Участник;
			КонецЕсли;
		КонецЕсли;
	
		// Если не нашли по ИД, то ищем по исполнителю
		Если Не ЗначениеЗаполнено(Подписывающий)  Тогда
			Если ЗначениеЗаполнено(ПараметрыЗадачи.Исполнитель) Тогда
				СтрокиУчастника = Участники.НайтиСтроки(
					Новый Структура("Участник", ПараметрыЗадачи.Исполнитель));
			Иначе
				СтрокиУчастника = Участники.НайтиСтроки(
					Новый Структура("Участник", ПараметрыЗадачи.РольИсполнителя));
			КонецЕсли;
					
			Если СтрокиУчастника.Количество() > 0  Тогда
				Подписывающий = Справочники.ДействияПодписания.ПодписывающийПоОбеспечивающемуПодписание(
					Действие, СтрокиУчастника[0].Идентификатор);
			КонецЕсли;
		КонецЕсли;
	
	Иначе //Если процесс не по действию
		Если ЗначениеЗаполнено(ПараметрыЗадачи.Исполнитель) Тогда
			Подписывающий = ПараметрыЗадачи.Исполнитель;
		Иначе
			Подписывающий = ПараметрыЗадачи.РольИсполнителя;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подписывающий) 
		И (ТипЗнч(Подписывающий) = Тип("СправочникСсылка.Сотрудники") 
		Или ТипЗнч(Подписывающий) = Тип("СправочникСсылка.ПолныеРоли")) Тогда
		Подписывающие = РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(Подписывающий);
						
		// Получим заместителей и предложим выбор, если заместители указаны.
		ОбластиЗамещения = Новый Массив;
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ДокументыПодписание);
		ТаблицаЗамещений = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещенияСотрудников(
			Подписывающие, ОбластиЗамещения);
		
		ВсеПодписывающиеМассив = Новый Массив;
		Для Каждого СтрПодписывающий Из Подписывающие Цикл
			ВсеПодписывающиеМассив.Добавить(Новый Структура("Подписывающий, Замещающий",
				СтрПодписывающий, Неопределено));
		КонецЦикла;
		
		Для Каждого СтрЗамещающий Из ТаблицаЗамещений Цикл
			Если Не СтрЗамещающий.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеПодписывающиеМассив.Добавить(Новый Структура("Подписывающий, Замещающий",
				СтрЗамещающий.Сотрудник, СтрЗамещающий.Замещающий));
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодписывающиеМассив, ВсеПодписывающиеМассив, Истина);
	КонецЕсли;
	
	Возврат ПодписывающиеМассив;
				
КонецФункции

#Область СлужебныйПрограммныйИнтерфейс_ИзменениеВажныхРеквизитов

// Обрабатывает изменение реквизитов задачи.
//
// Параметры:
//  ЗадачаОбъект - ДокументОбъект.Задача
//
Процедура ОбработатьИзменениеРеквизитовЗадачи(ЗадачаОбъект) Экспорт
	
	// см. РегистрыСведений.ИсторияЗадач.КонтекстИзмененияЗадачи
	КонтекстИзмененияРеквизитов = ЗадачаОбъект.ДополнительныеСвойства.КонтекстИзмененияРеквизитов;
	Если Не ЗначениеЗаполнено(КонтекстИзмененияРеквизитов.Ссылка) Тогда
		КонтекстИзмененияРеквизитов.Ссылка = ЗадачаОбъект.Ссылка;
	КонецЕсли;
	ЗарегистрированныеБизнесСобытия = КонтекстИзмененияРеквизитов.ПроизошедшиеБизнесСобытия;
	
	// В историю пишем всегда, кроме тех случаев, когда это новая задача или это черновик.
	ЭтоНовый = ЗадачаОбъект.ДополнительныеСвойства.ЭтоНовый;
	
	СтароеСостояние = ЗадачаОбъект.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.СостояниеЗадачи;
	ВидСтарогоСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СтароеСостояние);
	ЭтоЧерновик = Не ЗначениеЗаполнено(ВидСтарогоСостояния) 
		Или Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСтарогоСостояния);
	
	ЗаписыватьВИсторию = Не ЭтоНовый И Не ЭтоЧерновик;
	
	Если Не ЗаписыватьВИсторию Тогда
		Возврат;
	КонецЕсли;
	
	// БизнесСобытие регистрируем тогда, когда нужно уведомить исполнителей задачи об изменениях.
	// Это нужно делать, если задача уже на исполнении. Если задача была на паузе и теперь продолжена,
	// уведомлять не нужно, так как исполнителям придёт уведомление по событию Задачи: новая задача.
	РегистрироватьБизнесСобытие = ЗарегистрированныеБизнесСобытия.Количество() = 0;
	
	ЗаполнитьКонтекстИзмененияРеквизитов(КонтекстИзмененияРеквизитов, ЗадачаОбъект);
	
	// Если всё-таки ни один из важных реквизитов ДействияЗадачи не изменился, то не пишем в историю и не регистрируем.
	Если КонтекстИзмененияРеквизитов.ИзмененныеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если обновление по источнику, то выходим.
	Если ЗадачаОбъект.ДополнительныеСвойства.Свойство("ОбновлениеПоИсточнику") 
		И ЗадачаОбъект.ДополнительныеСвойства.ОбновлениеПоИсточнику Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Если обновление при перенаправлении, то выходим.
	Если ЗадачаОбъект.ДополнительныеСвойства.Свойство("ОбновлениеПриПеренаправлении") 
		И ЗадачаОбъект.ДополнительныеСвойства.ОбновлениеПриПеренаправлении Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Если перенос срока, то выходим.
	Если ЗадачаОбъект.ДополнительныеСвойства.Свойство("ПеренесенСрокЗарегистрировано") 
		И ЗадачаОбъект.ДополнительныеСвойства.ПеренесенСрокЗарегистрировано Тогда
		
		Если КонтекстИзмененияРеквизитов.ИзмененныеРеквизиты.Количество() = 1 
			И КонтекстИзмененияРеквизитов.ИзмененныеРеквизиты[0].Имя = "Срок" Тогда
			
			// В истории уже есть это изменение.
			ЗаписыватьВИсторию = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РегистрироватьБизнесСобытие И КонтекстИзмененияРеквизитов.КогоУведомить.Количество() Тогда
		// Регистрируем бизнес-событие.
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
			ЗадачаОбъект.Ссылка,
			Справочники.ВидыБизнесСобытий.ИзменениеЗадачи,
			Новый ХранилищеЗначения(КонтекстИзмененияРеквизитов));
		ЗарегистрированныеБизнесСобытия.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеЗадачи);
	КонецЕсли;
	
	Если ЗаписыватьВИсторию Тогда
		// Добавляем запись в РС.ИсторияЗадач.
		РегистрыСведений.ИсторияЗадач.Добавить(
			ЗадачаОбъект.Ссылка,
			Неопределено,
			КонтекстИзмененияРеквизитов.Дата,
			Справочники.СобытияЗадач.ИзмененаЗадача,
			КонтекстИзмененияРеквизитов,
			ПользователиДокументооборот.ОлицетворяемыйПользователь());
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает изменение реквизитов действия задачи.
//
// Параметры:
//  ДействиеЗадачиОбъект - ДокументОбъект.ДействиеЗадачи
//
Процедура ОбработатьИзменениеРеквизитовДействияЗадачи(ДействиеЗадачиОбъект) Экспорт
	
	// см. РегистрыСведений.ИсторияЗадач.НовыйИзмененияДействия
	КонтекстИзмененияРеквизитов = ДействиеЗадачиОбъект.ДополнительныеСвойства.КонтекстИзмененияРеквизитов;
	Если Не ЗначениеЗаполнено(КонтекстИзмененияРеквизитов.Ссылка) Тогда
		КонтекстИзмененияРеквизитов.Ссылка = ДействиеЗадачиОбъект.Ссылка;
	КонецЕсли;
	
	// В историю пишем всегда, кроме тех случаев, когда это новая задача или это черновик.
	ЭтоНовый = ДействиеЗадачиОбъект.ДополнительныеСвойства.ЭтоНовый;
	
	СтароеСостояние = ДействиеЗадачиОбъект.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.СостояниеУчастникаЗадачи;
	ВидСтарогоСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(СтароеСостояние);
	ЭтоЧерновик = Не ЗначениеЗаполнено(ВидСтарогоСостояния);
	
	ЗаписыватьВИсторию = Не ЭтоНовый И Не ЭтоЧерновик;
	
	Если Не ЗаписыватьВИсторию Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКонтекстИзмененияРеквизитов(КонтекстИзмененияРеквизитов, ДействиеЗадачиОбъект);
	
КонецПроцедуры

// Пополнить контекст изменения действий в контексте изменения задачи.
// 
// Параметры:
//  Контекст - Структура - Контекст изменения задачи.
//  ДействиеЗадачиОбъект - ДокументОбъект.ДействиеЗадачи
//
Процедура ПополнитьКонтекстИзмененияДействий(Контекст, ДействиеЗадачиОбъект) Экспорт
	
	Если ДействиеЗадачиОбъект.ДополнительныеСвойства.Свойство("КонтекстИзмененияРеквизитов") Тогда
		КонтекстИзмененийДействия = ДействиеЗадачиОбъект.ДополнительныеСвойства.КонтекстИзмененияРеквизитов;
		Если КонтекстИзмененийДействия.ИзмененныеРеквизиты.Количество() Тогда
			Контекст.ИзмененныеРеквизитыДействий.Вставить(ДействиеЗадачиОбъект.Ссылка, КонтекстИзмененийДействия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_ИзменениеВажныхРеквизитов

// Инициализировать контекст изменения задачи и действия задачи.
// 
// Параметры:
//  ЗадачаОбъект - ДокументОбъект.Задача, ДокументОбъект.ДействиеЗадачи - Задача объект или действие задачи объект.
//
Процедура ИнициализироватьКонтекстИзмененияЗадачиДействияЗадачи(ЗадачаОбъект) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗадачаОбъект.Ссылка);
	КонтекстИзмененияРеквизитов = МенеджерОбъекта.КонтекстИзмененияРеквизитов();
	КонтекстИзмененияРеквизитов.Ссылка = ЗадачаОбъект.Ссылка;
	КонтекстИзмененияРеквизитов.ПредставлениеСсылки = Строка(ЗадачаОбъект.Ссылка);
	
	ЗадачаОбъект.ДополнительныеСвойства.Вставить("КонтекстИзмененияРеквизитов",
		КонтекстИзмененияРеквизитов);
	
КонецПроцедуры

// Заполнить контекст изменения реквизитов задачи или действия задачи.
// 
// Параметры:
//  Контекст - Структура - Контекст изменения реквизитов задачи или действия задачи.
//  ЗадачаОбъект - ДокументОбъект.Задача, ДокументОбъект.ДействиеЗадачи - Объект задачи или действия задачи.
//
Процедура ЗаполнитьКонтекстИзмененияРеквизитов(Контекст, ЗадачаОбъект)
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗадачаОбъект.Ссылка);
	ВажныеРеквизиты = МенеджерОбъекта.ВажныеРеквизитыПредставления();
	
	ПредыдущиеЗначенияРеквизитов = ЗадачаОбъект.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
	
	Для Каждого КлючЗначение Из ВажныеРеквизиты Цикл
		
		ИзменилосьЗначениеРеквизита = Ложь;
		Реквизит = СокрЛП(КлючЗначение.Ключ);
		СинонимРеквизита = СокрЛП(КлючЗначение.Значение);
		
		ТекущееЗначение = ЗадачаОбъект[Реквизит];
		ТекущееЗначениеПриведенное = Неопределено;
		ПредыдущееЗначение = ПредыдущиеЗначенияРеквизитов[Реквизит];
		
		Если ТипЗнч(ПредыдущееЗначение) = Тип("ТаблицаЗначений")
			И Не ОбщегоНазначенияДокументооборот.ТаблицыЗначенийИдентичны(
				ТекущееЗначение.Выгрузить(),
				ПредыдущееЗначение) Тогда
			
			ИзменилосьЗначениеРеквизита = Истина;
			ТекущееЗначениеПриведенное = ТекущееЗначение.Выгрузить();
			
		ИначеЕсли ТипЗнч(ПредыдущееЗначение) <> Тип("ТаблицаЗначений")
			И ТекущееЗначение <> ПредыдущееЗначение Тогда
			
			ИзменилосьЗначениеРеквизита = Истина;
			ТекущееЗначениеПриведенное = ТекущееЗначение;
			
		КонецЕсли;
		
		Если ИзменилосьЗначениеРеквизита Тогда
			
			ИзменившийсяРеквизит = РегистрыСведений.ИсторияЗадач.НовыйИзменившийсяРеквизит();
			ИзменившийсяРеквизит.Имя = Реквизит;
			ИзменившийсяРеквизит.Представление = СинонимРеквизита;
			ИзменившийсяРеквизит.ЗначениеБыло = ПредыдущееЗначение;
			ИзменившийсяРеквизит.ЗначениеСтало = ТекущееЗначениеПриведенное;
			Контекст.ИзмененныеРеквизиты.Добавить(ИзменившийсяРеквизит);
			
		КонецЕсли;
		
		// При изменении участника проверим отдельно ответственного исполнителя.
		Если Реквизит = "Участники" И ИзменилосьЗначениеРеквизита Тогда
			
			СтрокаОтветственногоБыло = ПредыдущееЗначение.Найти(Справочники.ВидыУчастниковЗадач.Ответственный,
				"ВидУчастника");
			БылОтветственный = ?(СтрокаОтветственногоБыло = Неопределено,
				Неопределено, СтрокаОтветственногоБыло.Участник);
			СтрокаОтветственногоСтало = ТекущееЗначениеПриведенное.Найти(Справочники.ВидыУчастниковЗадач.Ответственный,
				"ВидУчастника");
			СталОтветственный = ?(СтрокаОтветственногоСтало = Неопределено,
				Неопределено, СтрокаОтветственногоСтало.Участник);
			
			Если БылОтветственный <> СталОтветственный Тогда
				
				ИзменившийсяРеквизит = РегистрыСведений.ИсторияЗадач.НовыйИзменившийсяРеквизит();
				ИзменившийсяРеквизит.Имя = "Ответственный";
				ИзменившийсяРеквизит.Представление = "Ответственный";
				ИзменившийсяРеквизит.ЗначениеБыло = БылОтветственный;
				ИзменившийсяРеквизит.ЗначениеСтало = СталОтветственный;
				Контекст.ИзмененныеРеквизиты.Добавить(ИзменившийсяРеквизит);
				
			КонецЕсли;
			
		КонецЕсли;
		 
	КонецЦикла;
	
	Если ТипЗнч(Контекст.Ссылка) = Тип("ДокументСсылка.Задача") Тогда
		Контекст.Вставить("КогоУведомить",
			ЗадачаОбъект.ПолучателиУведомленияОбИзмененииВажныхРеквизитов());
	КонецЕсли;
	
КонецПроцедуры

// Обработать изменения реквизитов при обновлении по источнику.
// Собранные при записи Задачи и при записи ДействийЗадач контекст
// обрабатывается, пишется в историю, регистрируется бизнес-событие. 
// 
// Параметры:
//  Контекст - Неопределено, Структура - Контекст изменения реквизитов.
//
Процедура ОбработатьИзмененияРеквизитовПриОбновленииПоИсточнику(Контекст)
	
	Если Контекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если не зафиксировано изменения реквизитов задач.
	Если Контекст.ИзмененныеРеквизиты.Количество() = 0 И Контекст.ИзмененныеРеквизитыДействий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписыватьВИсторию = Истина;
	РегистрироватьБизнесСобытие = Истина;
	
	ОбработатьКонтекстИзмененияРеквизитов(Контекст);
	
	// Если после обработки что-то осталось - записываем.
	ЗаписыватьВИсторию = Контекст.ИзмененныеРеквизиты.Количество() <> 0 Или 
		Контекст.ИзмененныеРеквизитыДействий.Количество() <> 0;
	
	РегистрироватьБизнесСобытие = ЗаписыватьВИсторию;
	
	Если Контекст.ИзмененныеРеквизиты.Количество() = 1 
		И Контекст.ИзмененныеРеквизиты[0].Имя = "Срок" Тогда
		
		// В истории уже есть это изменение.
		ЗаписыватьВИсторию = Ложь;
		
	КонецЕсли;
	
	Если Контекст.ИзмененныеРеквизитыДействий.Количество() > 0 Тогда
		
		ВДействияхИзмененТолькоСрок = Истина;
		
		Для Каждого КлючИЗначение Из Контекст.ИзмененныеРеквизитыДействий Цикл
			
			ИзмененныеРеквизиты = КлючИЗначение.Значение.ИзмененныеРеквизиты;
			
			Если ИзмененныеРеквизиты.Количество() = 1 
				И ИзмененныеРеквизиты[0].Имя = "ОсобыйСрок" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ВДействияхИзмененТолькоСрок = Ложь;
			
		КонецЦикла;
		
		Если ВДействияхИзмененТолькоСрок Тогда
			// В истории уже есть это изменение.
			ЗаписыватьВИсторию = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаписыватьВИсторию Тогда
		// Добавляем запись в РС.ИсторияЗадач.
		РегистрыСведений.ИсторияЗадач.Добавить(
			Контекст.Ссылка,
			Неопределено,
			Контекст.Дата,
			Справочники.СобытияЗадач.ИзмененаЗадача,
			Контекст,
			?(ЗначениеЗаполнено(Контекст.Автор), Контекст.Автор,
				ПользователиДокументооборот.ОлицетворяемыйПользователь()));
	КонецЕсли;
	
	Если РегистрироватьБизнесСобытие И Контекст.КогоУведомить.Количество() Тогда
		// Регистрируем бизнес-событие.
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
			Контекст.Ссылка,
			Справочники.ВидыБизнесСобытий.ИзменениеЗадачи,
			Новый ХранилищеЗначения(Контекст));
		Контекст.ПроизошедшиеБизнесСобытия.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеЗадачи);
	КонецЕсли;
	
КонецПроцедуры

// Обработать контекст изменения реквизитов.
// Убирает дублирующие записи об изменениях.
// Заполняет адресатов уведомления, если они не были заполнены ранее.
// 
// Параметры:
//  Контекст - Неопределено, Структура - Контекст изменения реквизитов задачи.
//
Процедура ОбработатьКонтекстИзмененияРеквизитов(Контекст)
	
	Если Не Контекст.Свойство("ПроизошедшиеБизнесСобытия") Тогда
		Контекст.Вставить("ПроизошедшиеБизнесСобытия", Новый Массив);
	КонецЕсли;
	
	// Значит обновление по источнику и участники не изменялись, сама задача не перезаписывалась.
	Если Не Контекст.Свойство("КогоУведомить") Тогда
		Контекст.Вставить("КогоУведомить", РаботаСЗадачами.НачатыеИлиОжидаемыеДействияЗадачПоЗадачам(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контекст.Ссылка)));
	КонецЕсли;
	
	//Нужно убрать тех, кто был добавлен, действие задачи которого было перенаправлено и т.д.
	Для Каждого КонтекстИзмененияДействия Из Контекст.ИзмененныеРеквизитыДействий Цикл
		ОтфильтроватьДействияПоПроизошедшимБизнесСобытиям(Контекст.КогоУведомить, КонтекстИзмененияДействия.Значение);
	КонецЦикла;
	
	// Обнаружен прецедент, когда в ИсториюЗадач событие пишется до того, как вообще начинает записываться
	// Задача или ДействиеЗадачи. Из-за этого дублирование информации о перенаправлении задачи. Обход.
	ОбработатьНеявныеПеренаправленияЗадач(Контекст);
	
	// Нужно убрать дублирующиеся изменения, то есть если изменился "Заголовок" и "Особый заголовок" и ЗначениеСтало 
	// идентичное, то уберём в изменениях действии задач это изменение.
	
	ОбщийЗаголовок = Неопределено;
	ОбщийСрок = Неопределено;
	ОбщееОписание = Неопределено;
	
	ЕстьСмыслПроверять = Ложь;
	
	Для Каждого ОбщийРеквизит Из Контекст.ИзмененныеРеквизиты Цикл
		
		Если ОбщийРеквизит.Имя = "Заголовок" Тогда
			ОбщийЗаголовок = ОбщийРеквизит.ЗначениеСтало;
			ЕстьСмыслПроверять = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ОбщийРеквизит.Имя = "Срок" Тогда
			ОбщийСрок = ОбщийРеквизит.ЗначениеСтало;
			ЕстьСмыслПроверять = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ОбщийРеквизит.Имя = "Описание" Тогда
			ОбщееОписание = ОбщийРеквизит.ЗначениеСтало;
			ЕстьСмыслПроверять = Истина;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ДействияКУдалению = Новый Массив;
	
	Для Каждого ИзменившеесяДействие Из Контекст.ИзмененныеРеквизитыДействий Цикл
		
		РеквизитыКУдалению = Новый Массив;
		
		ИзмененныеРеквизиты = ИзменившеесяДействие.Значение.ИзмененныеРеквизиты;
		Если ИзмененныеРеквизиты.Количество() = 0 Тогда
			ДействияКУдалению.Добавить(ИзменившеесяДействие.Ключ);
			Продолжить;
		КонецЕсли;
		
		Если Не ЕстьСмыслПроверять Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Реквизит Из ИзмененныеРеквизиты Цикл
			
			ДобавитьРеквизитКУдалениюПриНеобходимости(РеквизитыКУдалению, Реквизит,
				ОбщийЗаголовок, ОбщееОписание, ОбщийСрок);
			
		КонецЦикла;
		
		Если РеквизитыКУдалению.Количество() = ИзмененныеРеквизиты.Количество() Тогда
			ДействияКУдалению.Добавить(ИзменившеесяДействие.Ключ);
		Иначе
			Для Каждого РеквизитКУдалению Из РеквизитыКУдалению Цикл
				ИзменившеесяДействие.Значение.ИзмененныеРеквизиты.Удалить(
					ИзменившеесяДействие.Значение.ИзмененныеРеквизиты.Найти(РеквизитКУдалению));
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДействияКУдалению.Количество() = Контекст.ИзмененныеРеквизитыДействий.Количество() Тогда
		Контекст.ИзмененныеРеквизитыДействий.Очистить();
	Иначе
		Для Каждого ИзмененияДействияКУдалению Из ДействияКУдалению Цикл
			Контекст.ИзмененныеРеквизитыДействий.Удалить(ИзмененияДействияКУдалению);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработать неявные перенаправления задач.
// 
// Параметры:
//  Контекст см. РегистрыСведений.ИсторияЗадач.КонтекстИзмененияЗадачи
//
Процедура ОбработатьНеявныеПеренаправленияЗадач(Контекст)
	
	УчастникиБыли = Неопределено;
	УчастникиСтали = Неопределено;
	Для Каждого ИзмененныйРеквизит Из  Контекст.ИзмененныеРеквизиты Цикл
		Если ИзмененныйРеквизит.Имя = "Участники" Тогда
			УчастникиБыли = ИзмененныйРеквизит.ЗначениеБыло; // ТаблицаЗначений
			УчастникиСтали = ИзмененныйРеквизит.ЗначениеСтало; // ТаблицаЗначений
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УчастникиБыли = Неопределено Или УчастникиСтали = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем по идентификатору те действия задачи, которые остались.
	МассивИдентификаторовБыли = УчастникиБыли.ВыгрузитьКолонку("ВнешнийИдентификатор");
	МассивИдентификаторовСтали = УчастникиСтали.ВыгрузитьКолонку("ВнешнийИдентификатор");
	
	МассивИдентификаторовОстались = Новый Массив;
	Для Каждого Идентификатор Из МассивИдентификаторовБыли Цикл
		Если МассивИдентификаторовСтали.Найти(Идентификатор) <> Неопределено Тогда
			МассивИдентификаторовОстались.Добавить(Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	// И удалим их. Рассчитываем, что перенаправления задачи с точки зрения "участников" обработаны
	// событиями ИсторииЗадач перенаправления.
	МассивУдалитьБыли = Новый Массив;
	МассивУдалитьСтали = Новый Массив;
	Для Каждого Идентификатор Из МассивИдентификаторовОстались Цикл
		СтруктураОтбора = Новый Структура("ВнешнийИдентификатор", Идентификатор);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивУдалитьБыли, УчастникиБыли.НайтиСтроки(СтруктураОтбора));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивУдалитьСтали, УчастникиСтали.НайтиСтроки(СтруктураОтбора));
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивУдалитьБыли Цикл
		УчастникиБыли.Удалить(СтрокаТаблицы);
	КонецЦикла; 
	
	Для Каждого СтрокаТаблицы Из МассивУдалитьСтали Цикл
		УчастникиСтали.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	// Если не осталось участников к анализу, то удалим реквизит из списка изменённых реквизитов.
	Если УчастникиБыли.Количество() = 0 И УчастникиСтали.Количество() = 0 Тогда
		Контекст.ИзмененныеРеквизиты.Удалить(Контекст.ИзмененныеРеквизиты.Найти(ИзмененныйРеквизит));
	КонецЕсли;
	
КонецПроцедуры

// Добавить реквизит к удалению при необходимости.
// 
// Параметры:
//  РеквизитыКУдалению - Массив Из Структура - Реквизиты к удалению
//  Реквизит - Структура - Реквизит
//  ОбщийЗаголовок - Строка - Общий заголовок
//  ОбщееОписание - Строка - Общее описание
//  ОбщийСрок - Строка - Общий срок
//
Процедура ДобавитьРеквизитКУдалениюПриНеобходимости(РеквизитыКУдалению, Реквизит, 
	ОбщийЗаголовок, ОбщееОписание, ОбщийСрок)
	
	Если Реквизит.Имя = "ОсобыйЗаголовок" И Реквизит.ЗначениеСтало = ОбщийЗаголовок Тогда
		РеквизитыКУдалению.Добавить(Реквизит);
		Возврат;
	КонецЕсли;
	Если Реквизит.Имя = "ОсобыйСрок" И Реквизит.ЗначениеСтало = ОбщийСрок Тогда
		РеквизитыКУдалению.Добавить(Реквизит);
		Возврат;
	КонецЕсли;
	Если Реквизит.Имя = "ОсобоеОписание" И Реквизит.ЗначениеСтало = ОбщееОписание Тогда
		РеквизитыКУдалению.Добавить(Реквизит);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Отфильтровать действия по произошедшим бизнес событиям. Убирает из переданного массива действие, если были
// зарегистрированы определенные бизнес-события.
// 
// Параметры:
//  МассивДействий - Массив Из ДокументСсылка.ДействиеЗадачи
//  КонтекстИзмененияДействия - Структура Из см. РегистрыСведений.ИсторияЗадач.НовыйИзмененияДействия
//
Процедура ОтфильтроватьДействияПоПроизошедшимБизнесСобытиям(МассивДействий, КонтекстИзмененияДействия)
	
	Действие = КонтекстИзмененияДействия.Ссылка;
	ИндексДействия = МассивДействий.Найти(Действие);
	Если ИндексДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроизошедшиеБизнесСобытия = КонтекстИзмененияДействия.ПроизошедшиеБизнесСобытия;
	Если ПроизошедшиеБизнесСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроизошедшиеБизнесСобытия.Найти(Справочники.ВидыБизнесСобытий.НоваяЗадача) <> Неопределено Тогда
		МассивДействий.Удалить(ИндексДействия);
		Возврат;
	КонецЕсли;
	
	Если ПроизошедшиеБизнесСобытия.Найти(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи) <> Неопределено Тогда
		МассивДействий.Удалить(ИндексДействия);
		Возврат;
	КонецЕсли;
	
	Если ПроизошедшиеБизнесСобытия.Найти(Справочники.ВидыБизнесСобытий.ОтменаЗадачи) <> Неопределено Тогда
		МассивДействий.Удалить(ИндексДействия);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Определяет визы для подписания электронной подписью.
// 
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка.Согласование - Бизнес процесс согласования
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя - Задача исполнителя
// 
// Возвращаемое значение:
//  Массив - Документы, визы к которым необходимо подписать.
Функция ПредметыДляВизированияЭП(БизнесПроцесс, ЗадачаПроцесса)
	
	ПредметыДляВизирования = Новый Массив;
	
	Если Не ЗначениеЗаполнено(БизнесПроцесс) Тогда
		Возврат ПредметыДляВизирования;
	КонецЕсли;
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		ПодписыватьРезультатВыполненияЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			БизнесПроцесс,
			"ПодписыватьЭП");
			
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестны визы для подписания процесса %1 (%2).'"),
			БизнесПроцесс,
			ТипЗнч(БизнесПроцесс));
		
	КонецЕсли;
	
	Если Не ПодписыватьРезультатВыполненияЭП Тогда
		Возврат ПредметыДляВизирования;
	КонецЕсли;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		ЗадачаПроцесса,,
		Истина);
	
	Для Каждого Предмет из ОсновныеПредметы Цикл
		
		// Виза есть атрибут документа, потому к визированию с использованием ЭП подлежат только документы
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			ПредметыДляВизирования.Добавить(Предмет);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПредметыДляВизирования;
	
КонецФункции

// Определяет, возможен ли запрет выполнения для точки маршрута.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка.
//  РезультатВыполнения - СправочникСсылка.РезультатыДействийЗадач.
// 
// Возвращаемое значение:
//  Булево - Возможен запрет выполнения.
//
Функция ВозможенЗапретВыполнения(ТочкаМаршрута, РезультатВыполнения)
	
	ВозможенЗапретВыполнения =
		ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать
		Или ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение
		Или (ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Проверено)
		Или ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться
		Или (ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Подписано)
		Или (ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Подписано)
		Или (ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Ознакомился)
		Или (ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Завершил)
		Или (ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.ПринятоПриглашение)
		Или (ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.ПодтвержденоПриглашение)
		Или ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить
		Или ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть
		Или ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться
		Или (ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Зарегистрировано)
		Или (ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Ознакомился)
		Или (ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Завершил)
		Или (ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Согласовано)
		Или (ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.СогласованоСЗамечаниями)
		Или (ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Ознакомился)
		Или (ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Завершил)
		Или (ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Утверждено)
		Или (ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Ознакомился)
		Или (ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться
			И РезультатВыполнения = Справочники.РезультатыДействийЗадач.Завершил);
	
	Возврат ВозможенЗапретВыполнения;
	
КонецФункции

// Добавляет информацию об исполнители.
//
// Параметры:
//  УчастникиПоВидам - Соответствие.
//   * Ключ - СправочникСсылка.ВидУчастниковЗадач - Вид участника.
//   * Значение - Массив из ОпределяемыйТип.Участник - Участники вида.
//  ВнешниеИдентификаторыУчастников - Соответствие.
//   * Ключ - УникальныйИдентификатор - Внешний идентификатор.
//   * Значение - ОпределяемыйТип.Участник - Участник.
//  ВидУчастника - СправочникСсылка.ВидыУчастников.
//  Участник - ОпределяемыйТип.Участник.
//  ВнешнийИдентификатор - УникальныйИдентификатор.
//  ВидУчастникаДляСортировки - СправочникСсылка.ВидыУчастников.
//
Процедура ДобавитьУчастника(УчастникиПоВидам, ВнешниеИдентификаторыУчастников, ВидУчастника, Участник, ВнешнийИдентификатор, ВидУчастникаДляСортировки = Неопределено)
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВнешнийИдентификатор)
		И ВнешниеИдентификаторыУчастников[ВнешнийИдентификатор] <> Неопределено Тогда
		
		ДанныеИсполнителя = ВнешниеИдентификаторыУчастников[ВнешнийИдентификатор];
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Данные участника %1 (%2) с идентификатором %3 уже заданы - %4 (%5).'"),
			Участник,
			ВидУчастника,
			ВнешнийИдентификатор,
			ДанныеИсполнителя.Участник,
			ДанныеИсполнителя.ВидУчастника);
		
	КонецЕсли;
	
	Если ВидУчастникаДляСортировки = Неопределено Тогда
		ВидУчастникаДляСортировки = ВидУчастника;
	КонецЕсли;
	
	Если УчастникиПоВидам[ВидУчастникаДляСортировки] = Неопределено Тогда
		УчастникиПоВидам[ВидУчастникаДляСортировки] = Новый Массив;
	КонецЕсли;
	ИсполнителиПоВиду = УчастникиПоВидам[ВидУчастникаДляСортировки];
	ИсполнителиПоВиду.Добавить(Участник);
	
	ДанныеИсполнителя = Новый Структура("Участник, ВидУчастника");
	ДанныеИсполнителя.Участник = Участник;
	ДанныеИсполнителя.ВидУчастника = ВидУчастника;
	
	ВнешниеИдентификаторыУчастников.Вставить(
		ВнешнийИдентификатор,
		ДанныеИсполнителя);
	
КонецПроцедуры

// Устанавливает участников задачи.
//
// Параметры:
//  ЗадачаОбъект - ДокументОбъект.Задача.
//  УчастникиПоВидам - Соответствие.
//   * Ключ - СправочникСсылка.ВидУчастниковЗадач - Вид участника.
//   * Значение - Массив из ОпределяемыйТип.Участник - Участники вида.
//  ВнешниеИдентификаторыУчастников - Соответствие.
//   * Ключ - УникальныйИдентификатор - Внешний идентификатор.
//   * Значение - ОпределяемыйТип.Участник - Участник.
//  ВсеВидыУчастников - Массив из СправочникСсылка.ВидУчастниковЗадач.
//
Процедура УстановитьУчастников(ЗадачаОбъект, УчастникиПоВидам, ВнешниеИдентификаторыУчастников, ВсеВидыУчастников)
	
	Для Каждого ВидУчастников Из ВсеВидыУчастников Цикл
		
		Если ВидУчастников = Справочники.ВидыУчастниковЗадач.Подписывающий Тогда
			АльтернативныйВидУчастников = Справочники.ВидыУчастниковЗадач.ОбеспечивающийПодписание;
		Иначе
			АльтернативныйВидУчастников = ВидУчастников;
		КонецЕсли;
		
		// Добавим новых.
		УчастникиВида = УчастникиПоВидам[ВидУчастников];
		Если УчастникиВида <> Неопределено Тогда
			
			Для Каждого КлючИЗначение Из ВнешниеИдентификаторыУчастников Цикл
				
				ВнешнийИдентификатор = КлючИЗначение.Ключ;
				ДанныеУчастника = КлючИЗначение.Значение;
				
				Если Не ЗначениеЗаполнено(ДанныеУчастника.Участник)
					Или (ДанныеУчастника.ВидУчастника <> ВидУчастников
						И ДанныеУчастника.ВидУчастника <> АльтернативныйВидУчастников)
					Или УчастникиВида.Найти(ДанныеУчастника.Участник) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// Найдем участника по идентификатору.
				СтрокаУчастника = ЗадачаОбъект.Участники.Найти(ВнешнийИдентификатор, "ВнешнийИдентификатор");
				Если СтрокаУчастника = Неопределено Тогда
					
					// Найдем участника по участнику и виду, без идентификатора.
					НайденныеСтроки = ЗадачаОбъект.Участники.НайтиСтроки(
						Новый Структура(
							"Участник, ВидУчастника, ВнешнийИдентификатор",
							ДанныеУчастника.Участник,
							ДанныеУчастника.ВидУчастника,
							Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")));
					СтрокаУчастника = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], Неопределено);
					Если СтрокаУчастника = Неопределено Тогда
						
						// Добавим новую строку участника.
						СтрокаУчастника = ЗадачаОбъект.Участники.Добавить();
						
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаУчастника.ВнешнийИдентификатор = ВнешнийИдентификатор;
				СтрокаУчастника.Участник = ДанныеУчастника.Участник;
				СтрокаУчастника.ВидУчастника = ДанныеУчастника.ВидУчастника;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Удалим старых.
		КоличествоЭлементов = ЗадачаОбъект.Участники.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			
			СтрокаУчастника = ЗадачаОбъект.Участники[КоличествоЭлементов - Индекс];
			Если СтрокаУчастника.ВидУчастника <> ВидУчастников
				И СтрокаУчастника.ВидУчастника <> АльтернативныйВидУчастников Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеУчастника = ВнешниеИдентификаторыУчастников[СтрокаУчастника.ВнешнийИдентификатор];
			Если ДанныеУчастника <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗадачаОбъект.Участники.Удалить(СтрокаУчастника);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Сортировать по виду и участнику.
	СписокСортировки = Новый СписокЗначений;
	
	Для Каждого СтрокаУчастника Из ЗадачаОбъект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбеспечивающийПодписание Тогда
			ВидУчастникаДляСортировки = Справочники.ВидыУчастниковЗадач.Подписывающий;
		Иначе
			ВидУчастникаДляСортировки = СтрокаУчастника.ВидУчастника;
		КонецЕсли;
		
		ИндексВида = ВсеВидыУчастников.Найти(ВидУчастникаДляСортировки);
		Если ИндексВида = Неопределено Тогда
			ИндексВида = 0;
		КонецЕсли;
		ПорядокВида = Формат(ИндексВида, "ЧЦ=6; ЧН=000000; ЧВН=; ЧГ=;");
		
		ВсеУчастникиВида = УчастникиПоВидам[ВидУчастникаДляСортировки];
		Если ВсеУчастникиВида <> Неопределено Тогда
			
			ИндексУчастника = ВсеУчастникиВида.Найти(СтрокаУчастника.Участник);
			Если ИндексУчастника = Неопределено Тогда
				ИндексУчастника = 0;
			КонецЕсли;
			
		Иначе
			
			ИндексУчастника = 0;
			
		КонецЕсли;
		ПорядокУчастника = Формат(ИндексУчастника, "ЧЦ=6; ЧН=000000; ЧВН=; ЧГ=;");
		
		ОбщийПорядок = СтрШаблон("%1/%2", ПорядокВида, ПорядокУчастника);
		
		СписокСортировки.Добавить(СтрокаУчастника, ОбщийПорядок);
		
	КонецЦикла;
	
	СписокСортировки.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	СортированныйИндексЭлемента = 0;
	Для Каждого СтрокаУчастника Из СписокСортировки.ВыгрузитьЗначения() Цикл
		
		ТекущийИндекс = ЗадачаОбъект.Участники.Индекс(СтрокаУчастника);
		Если СортированныйИндексЭлемента <> ТекущийИндекс Тогда
			ЗадачаОбъект.Участники.Сдвинуть(
				ТекущийИндекс,
				СортированныйИндексЭлемента - ТекущийИндекс);
		КонецЕсли;
		
		СортированныйИндексЭлемента = СортированныйИндексЭлемента + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверка наличия нового исполнителя среди исполнителей проектной задачи.
//
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задачи или действия задач.
//  Кому - ОпределяемыйТип.УчастникЗадач - Кому перенаправляются задачи.
//  ИсточникиЗадач - Соответствие - Источники задач.
//   * Ключ - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи -  Задача или действие.
//   * Значение - ОпределяемыйТип.ИсточникЗадач - Источник задачи.
//  СообщенияОбОшибках - Массив из Строка.
//
Процедура ДоступноПеренаправлениеЗадачиПроверкаКомандыПроекта(ЗадачиИлиДействия, Кому, ИсточникиЗадач, СообщенияОбОшибках)
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗадачаИлиДействие Из ЗадачиИлиДействия Цикл
		
		ИсточникЗадачи = ИсточникиЗадач[ЗадачаИлиДействие];
		Если Не ЗначениеЗаполнено(ИсточникЗадачи) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не РаботаСБизнесПроцессами.ЭтоБизнесПроцессСсылка(ИсточникЗадачи) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеОбработки = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(ИсточникЗадачи);
		Если ЗначениеЗаполнено(ДействиеОбработки) Тогда
			Продолжить;
		КонецЕсли;
		
		БизнесПроцесс = ИсточникЗадачи;
		РеквизитыПроцесс = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс, "Проект, ПроектнаяЗадача");
		Проект = РеквизитыПроцесс.Проект;
		ПроектнаяЗадача = РеквизитыПроцесс.ПроектнаяЗадача;
		
		Если ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
			
			Трудозатраты = Справочники.ПроектныеЗадачи.ПолучитьПлановыеТрудозатратыИсполнителяПроектнойЗадачи(
				ПроектнаяЗадача,
				Кому);
			
			Если Трудозатраты <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СообщениеПользователю = СтрШаблон(
			НСтр("ru = 'Исполнитель ""%1"" не найден среди исполнителей проектной задачи ""%2""'"),
			Строка(Кому),
			Строка(ПроектнаяЗадача));
			
			Если ЗадачиИлиДействия.Количество() > 1 Тогда
				СообщениеПользователю = СообщениеПользователю + ". " + Строка(ЗадачаИлиДействие);
			КонецЕсли;
			
			СообщенияОбОшибках.Добавить(СообщениеПользователю);
			
		ИначеЕсли ЗначениеЗаполнено(Проект) Тогда 
			
			ИсполнительНайден = РаботаСПроектами.НайтиИсполнителяРольВКомандеПроекта(
				Проект,
				Кому);
			
			Если ИсполнительНайден Тогда
				Продолжить;
			КонецЕсли;
			
			СообщениеПользователю = СтрШаблон(
				НСтр("ru = 'Исполнитель ""%1"" не найден среди участников проектной команды проекта ""%2""'"),
				Строка(Кому),
				Строка(Проект));
			
			Если ЗадачиИлиДействия.Количество() > 1 Тогда
				СообщениеПользователю = СообщениеПользователю + ". " + Строка(ЗадачаИлиДействие);
			КонецЕсли;
			
			СообщенияОбОшибках.Добавить(СообщениеПользователю);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверка прав доступа кому перенаправляем процесс.
//
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задачи или действия задач.
//  Кому - ОпределяемыйТип.УчастникЗадач - Кому перенаправляются задачи.
//  ИсточникиЗадач - Соответствие - Источники задач.
//   * Ключ - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи -  Задача или действие.
//   * Значение - ОпределяемыйТип.ИсточникЗадач - Источник задачи.
//  СообщенияОбОшибках - Массив из Строка.
//
Процедура ДоступноПеренаправлениеЗадачиПроверкаПравДоступа(ЗадачиИлиДействия, Кому, ИсточникиЗадач, СообщенияОбОшибках)
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗадачаИлиДействие Из ЗадачиИлиДействия Цикл
		
		ИсточникЗадачи = ИсточникиЗадач[ЗадачаИлиДействие];
		Если Не ЗначениеЗаполнено(ИсточникЗадачи) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не РаботаСБизнесПроцессами.ЭтоБизнесПроцессСсылка(ИсточникЗадачи) Тогда
			Продолжить;
		КонецЕсли;
		
		БизнесПроцесс = ИсточникЗадачи;
		
		ПредметыМассив = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(БизнесПроцесс);
		
		Если ПредметыМассив.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим предметы для проверок
		ПредметыДляПроверкиПрав = 
			Мультипредметность.ПредметыДляПроверкиПрав(ПредметыМассив, БизнесПроцесс);
		
		ПредметыДляПроверкиПравДоступаУчастников = 
			ПредметыДляПроверкиПрав.ДляПроверкиПравДоступаУчастников;
		
		ПредметыДляПроверкиНарушенияПолитикиДоступа = 
			ПредметыДляПроверкиПрав.ДляПроверкиНарушенияПолитикиДоступа;
		
		ПредметыСОграниченнымДоступом = Новый Массив;
		
		// Проверка нарушения политики доступа при расширении рабочей группы предмета.
		Участники = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(Участники, Кому);
		
		Для Каждого Предмет Из ПредметыДляПроверкиНарушенияПолитикиДоступа Цикл
			Попытка
				Мультипредметность.ПроверитьНарушениеПолитикиДоступаПриРасширенииРабочейГруппыПредмета(
					Предмет,
					Участники);
			Исключение
				ПредметыСОграниченнымДоступом.Добавить(Предмет);
			КонецПопытки;
		КонецЦикла;
		
		// Проверка прав на предметы без автоматического заполнения рабочей группы.
		
		СотрудникиДляПроверки = Мультипредметность.СотрудникиДляПроверкиПрав(Участники);
		
		ПраваУчастниковНаПредметы = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъектам(
			ПредметыДляПроверкиПравДоступаУчастников,
			Истина,
			СотрудникиДляПроверки.ВыгрузитьКолонку("Участник"));
		
		Для Каждого Предмет Из ПредметыДляПроверкиПравДоступаУчастников Цикл
			
			Для Каждого СтрокаТаблицы Из СотрудникиДляПроверки Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("ОбъектДоступа", Предмет);
				Отбор.Вставить("Сотрудник", СтрокаТаблицы.Участник);
				
				НайденныеПрава = ПраваУчастниковНаПредметы.НайтиСтроки(Отбор);
				Если НайденныеПрава.Количество() = 0 Тогда
					ПредметыСОграниченнымДоступом.Добавить(Предмет);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		КоличествоПредметов = ПредметыСОграниченнымДоступом.Количество();
		
		Если КоличествоПредметов <> 0 Тогда
			
			ТекстОшибки = "%1%2";
			
			Если ТипЗнч(Кому) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				ПерваяЧастьТекстаОшибки = НСтр("ru = 'У некоторых исполнителей роли нет прав '");
			Иначе
				ПерваяЧастьТекстаОшибки = НСтр("ru = 'У сотрудника нет прав '");
			КонецЕсли;
			
			Если КоличествоПредметов = 1 Тогда
				ВтораяЧастьТекстаОшибки = СтрШаблон(
					НСтр("ru = 'на предмет ""%1""'"),
					Строка(ПредметыСОграниченнымДоступом[0]));
			Иначе
				
				ПредметыСтрокой = "";
				
				ПереносСтроки = "";
				
				Для Каждого Предмет Из ПредметыСОграниченнымДоступом Цикл
					ПредметыСтрокой = ПредметыСтрокой
						+ ПереносСтроки
						+ "  "
						+ Строка(Предмет);
					
					ПереносСтроки = Символы.ПС;
				КонецЦикла;
				
				ВтораяЧастьТекстаОшибки = НСтр("ru = 'на предметы
					|%1'");
				
				ВтораяЧастьТекстаОшибки = СтрШаблон(
					ВтораяЧастьТекстаОшибки,
					ПредметыСтрокой);
				
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(ТекстОшибки, ПерваяЧастьТекстаОшибки, ВтораяЧастьТекстаОшибки);
			Если ЗадачиИлиДействия.Количество() > 1 Тогда
				ТекстОшибки = ТекстОшибки + ". " + Строка(ЗадачаИлиДействие);
			КонецЕсли;	
			
			СообщенияОбОшибках.Добавить(ТекстОшибки);
			
		КонецЕсли;
		
		// Проверка прав на файлы предметов без автоматического заполнения рабочей группы.
		УчастникиБезПравНаФайлы = УправлениеМероприятиями.ПроверитьПраваУчастниковПроцессаНаФайлыПредметов(
			БизнесПроцесс,
			ПредметыДляПроверкиПравДоступаУчастников,
			СотрудникиДляПроверки);
		Если УчастникиБезПравНаФайлы <> Неопределено Тогда
			
			ПредметыСОграниченнымДоступомКФайлам = Новый Массив;
			
			Для Каждого Предмет Из ПредметыДляПроверкиПравДоступаУчастников Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("Предмет", Предмет);
				НайденныеУчастникиБезПрав = УчастникиБезПравНаФайлы.НайтиСтроки(Отбор);
				Если НайденныеУчастникиБезПрав.Количество() <> 0 Тогда
					ПредметыСОграниченнымДоступомКФайлам.Добавить(Предмет);
				КонецЕсли;
				
				КоличествоПредметов = ПредметыСОграниченнымДоступомКФайлам.Количество();
				Если КоличествоПредметов <> 0 Тогда
					
					ТекстОшибки = "%1%2";
					
					Если ТипЗнч(Кому) = Тип("СправочникСсылка.ПолныеРоли") Тогда
						ПерваяЧастьТекстаОшибки = НСтр("ru = 'У некоторых исполнителей роли нет прав '");
					Иначе
						ПерваяЧастьТекстаОшибки = НСтр("ru = 'У сотрудника нет прав '");
					КонецЕсли;
					
					Если КоличествоПредметов = 1 Тогда
						ВтораяЧастьТекстаОшибки = СтрШаблон(
							НСтр("ru = 'на файлы предмета ""%1""'"),
							Строка(ПредметыСОграниченнымДоступомКФайлам[0]));
					Иначе
						
						ПредметыСтрокой = "";
						
						ПереносСтроки = "";
						
						Для Каждого Предмет Из ПредметыСОграниченнымДоступомКФайлам Цикл
							ПредметыСтрокой = ПредметыСтрокой
								+ ПереносСтроки
								+ "  "
								+ Строка(Предмет);
							
							ПереносСтроки = Символы.ПС;
						КонецЦикла;
						
						ВтораяЧастьТекстаОшибки = НСтр("ru = 'на файлы предметов
							|%1'");
						
						ВтораяЧастьТекстаОшибки = СтрШаблон(
							ВтораяЧастьТекстаОшибки,
							ПредметыСтрокой);
						
					КонецЕсли;
					
					ТекстОшибки = СтрШаблон(ТекстОшибки, ПерваяЧастьТекстаОшибки, ВтораяЧастьТекстаОшибки);
					Если ЗадачиИлиДействия.Количество() > 1 Тогда
						ТекстОшибки = ТекстОшибки + ". " + Строка(ЗадачаИлиДействие);
					КонецЕсли;	
					
					СообщенияОбОшибках.Добавить(ТекстОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Заполняет задачу по бизнес-процессу.
//
// Параметры:
//  ЗадачаОбъект - ДокументОбъект.Задача - Задача.
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс.
//
Процедура ЗаполнитьЗадачуПоБизнесПроцессу(ЗадачаОбъект, БизнесПроцесс)
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ЗадачаОбъект.ВидЗадачи);
	
	ИмяРеквизитаСрок =
		?(ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач"),
			"СрокИсполнения",
			"СрокИсполненияПроцесса");
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		БизнесПроцесс,
		"Автор, ВедущаяЗадача, Важность, ГлавнаяЗадача, Дата, ДатаЗавершения, ДатаНачала, Наименование,
		|Описание, ПричинаПрерывания, Проект, ИсточникДанных, Стартован, Завершен,
		|Состояние, Предметы, " + ИмяРеквизитаСрок);
	
	ЗадачаОбъект.Автор = РеквизитыПроцесса.Автор;
	ЗадачаОбъект.Дата = РеквизитыПроцесса.Дата;
	ЗадачаОбъект.ДатаСоздания = РеквизитыПроцесса.Дата;
	ЗадачаОбъект.ДатаНачала = РеквизитыПроцесса.ДатаНачала;
	ЗадачаОбъект.ДатаВыполнения = РеквизитыПроцесса.ДатаЗавершения;
	ЗадачаОбъект.ИсточникДанных = РеквизитыПроцесса.ИсточникДанных;
	ЗадачаОбъект.Приоритет = Справочники.ПриоритетыЗадач.НайтиПоВариантуВажности(РеквизитыПроцесса.Важность);
	ЗадачаОбъект.Проект = РеквизитыПроцесса.Проект;
	ЗадачаОбъект.Заголовок = РеквизитыПроцесса.Наименование;
	ЗадачаОбъект.ПричинаОтмены = РеквизитыПроцесса.ПричинаПрерывания;
	ЗадачаОбъект.Срок = РеквизитыПроцесса[ИмяРеквизитаСрок];
	ЗадачаОбъект.Создал = РеквизитыПроцесса.Автор;
	
	ЗадачаОбъект.ДатаОтмены = Дата(1, 1, 1);
	ЗадачаОбъект.КтоОтменил = Неопределено;
	Если РеквизитыПроцесса.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		
		ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиОтложена;
		
	ИначеЕсли РеквизитыПроцесса.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		
		ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиОтменена;
		
		КтоИКогдаПрервалПроцесс = БизнесПроцессыИЗадачиСервер.ПолучитьИнформациюОПрерыванииПроцесса(БизнесПроцесс);
		Если КтоИКогдаПрервалПроцесс <> Неопределено Тогда
			ЗадачаОбъект.ДатаОтмены = КтоИКогдаПрервалПроцесс.Дата;
			ЗадачаОбъект.КтоОтменил = ОбщегоНазначенияДокументооборот.Сотрудник(КтоИКогдаПрервалПроцесс.Пользователь);
			ЗадачаОбъект.ПричинаОтмены = КтоИКогдаПрервалПроцесс.ПричинаПрерывания;
		КонецЕсли;
		
	ИначеЕсли Не РеквизитыПроцесса.Стартован Тогда
		
		ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик;
		
	ИначеЕсли РеквизитыПроцесса.Стартован И Не РеквизитыПроцесса.Завершен Тогда
		
		ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.ВРаботе;
		
	ИначеЕсли РеквизитыПроцесса.Стартован И РеквизитыПроцесса.Завершен Тогда
		
		ЗадачаОбъект.СостояниеЗадачи = Справочники.СостоянияЗадач.Закрыта;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ГлавнаяЗадача) Тогда
		ИсточникВышестоящейЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			РеквизитыПроцесса.ГлавнаяЗадача,
			"БизнесПроцесс");
		ИсточникВышестоящегоДействия = РеквизитыПроцесса.ГлавнаяЗадача;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыПроцесса.ВедущаяЗадача) Тогда
		ИсточникВышестоящейЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			РеквизитыПроцесса.ВедущаяЗадача,
			"БизнесПроцесс");
		ИсточникВышестоящегоДействия = РеквизитыПроцесса.ВедущаяЗадача;
	Иначе
		ИсточникВышестоящейЗадачи = Неопределено;
		ИсточникВышестоящегоДействия = Неопределено;
	КонецЕсли;
	Если Не РаботаСЗадачами.ЭтоИсточникЗадач(ИсточникВышестоящейЗадачи) Тогда
		ИсточникВышестоящейЗадачи = Неопределено;
		ИсточникВышестоящегоДействия = Неопределено;
	КонецЕсли;
	
	ЗадачаОбъект.ВышестоящаяЗадача = Документы.Задача.НайтиПоИсточнику(ИсточникВышестоящейЗадачи);
	ЗадачаОбъект.ВышестоящееДействие = Документы.ДействиеЗадачи.НайтиПоИсточнику(ИсточникВышестоящегоДействия);
	Если ЗначениеЗаполнено(ИсточникВышестоящейЗадачи) И Не ЗначениеЗаполнено(ЗадачаОбъект.ВышестоящаяЗадача) Тогда
		ОбновитьЗадачуПоИсточнику(ИсточникВышестоящейЗадачи);
		ЗадачаОбъект.ВышестоящаяЗадача = Документы.Задача.НайтиПоИсточнику(ИсточникВышестоящейЗадачи);
		ЗадачаОбъект.ВышестоящееДействие = Документы.ДействиеЗадачи.НайтиПоИсточнику(ИсточникВышестоящегоДействия);
	КонецЕсли;
	
	ЗадачаОбъект.Приложения.Очистить();
	Для Каждого СтрокаПредмета Из РеквизитыПроцесса.Предметы.Выгрузить() Цикл
		
		Если СтрокаПредмета.РольПредмета <> Перечисления.РолиПредметов.Основной
			И СтрокаПредмета.РольПредмета <> Перечисления.РолиПредметов.Вспомогательный Тогда
			Продолжить;
		КонецЕсли;
		
		// Предмет может быть не заполнен у роли "Основной" и "Вспомогательный",
		// если в комплексном процессе они встречаются у ознакомления, а далее они "Заполняемые".
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипПредмета = ТипЗнч(СтрокаПредмета.Предмет);
		Если Не Метаданные.ОпределяемыеТипы.ПриложениеЗадач.Тип.СодержитТип(ТипПредмета) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПриложения = ЗадачаОбъект.Приложения.Добавить();
		СтрокаПриложения.Приложение = СтрокаПредмета.Предмет;
		
	КонецЦикла;
	
	ЗадачаОбъект.УстановитьОписание(РеквизитыПроцесса.Описание);
	
КонецПроцедуры

// Заменяет пользователя в реквизите.
//
// Параметры:
//  ДанныеПроцесса - Структура.
//  ИмяРеквизита - Строка.
//
Процедура ЗаменитьПользователяВРеквизите(ДанныеОбъекта, ИмяРеквизита)
	
	Если ТипЗнч(ДанныеОбъекта[ИмяРеквизита]) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта[ИмяРеквизита] =
		Сотрудники.ОсновнойСотрудникПользователя(
			ДанныеОбъекта[ИмяРеквизита]);
	
КонецПроцедуры

// Заменяет пользователя в колонке.
//
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений.
//  ИмяКолонки - Строка.
//
Процедура ЗаменитьПользователяВКолонке(ТаблицаЗначений, ИмяКолонки)
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		Если ТипЗнч(СтрокаТаблицы[ИмяКолонки]) <> Тип("СправочникСсылка.Пользователи") Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТаблицы[ИмяКолонки] =
			Сотрудники.ОсновнойСотрудникПользователя(
				СтрокаТаблицы[ИмяКолонки]);
		
	КонецЦикла;
	
КонецПроцедуры

// Закрывает вопрос.
//
// Параметры:
//  Вопросы - Массив из БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач.
//
Процедура ЗакрытьВопросы(Вопросы)
	
	ПроцессыКПрерыванию = Новый Массив;
	ДоступноПрерываниеПроцессов = БизнесПроцессыИЗадачиСервер.ДоступноПрерываниеПроцессов(Вопросы);
	
	Для Каждого Вопрос Из Вопросы Цикл
		
		ДоступноПрерываниеПроцесса = ДоступноПрерываниеПроцессов[Вопрос];
		
		Если Не ДоступноПрерываниеПроцесса Тогда
			Продолжить;
		КонецЕсли;
		
		ПроцессыКПрерыванию.Добавить(Вопрос);
		
	КонецЦикла;
	
	ПричинаПрерывания = НСтр("ru = 'Закрытие неактуальных вопросов.'");
	
	РаботаСБизнесПроцессамиВызовСервера.ПрерватьПроцессы(ПроцессыКПрерыванию, ПричинаПрерывания);
	
КонецПроцедуры

// Закрывает вопросы по действию задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//
Процедура ЗакрытьВопросыПоДействиюЗадачи(ДействиеЗадачи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДействияЗадачи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи);
	ВопросыПоДействиямЗадач =
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.НайтиПоПредметуРассмотрения(ДействияЗадачи);
	ЗакрытьВопросы(ВопросыПоДействиямЗадач);
	
КонецПроцедуры

// Закрывает вопросы по задаче.
//
// Параметры:
//  Задача - ДокументСсылка.Задача.
//
Процедура ЗакрытьВопросыПоЗадаче(Задача)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДействияЗадачи = Документы.ДействиеЗадачи.НайтиПоЗадаче(Задача);
	ВопросыПоДействиямЗадач =
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.НайтиПоПредметуРассмотрения(ДействияЗадачи);
	ЗакрытьВопросы(ВопросыПоДействиямЗадач);
	
КонецПроцедуры

// Определяет номер последней итерации в таблице.
//
// Параметры:
//  ТаблицаИтераций - ТаблицаЗначений - Таблица с колонкой "Номер итерации".
//   * НомерИтерации - Число - Номер итерации.
// 
// Возвращаемое значение:
//  Число - Номер последней итерации.
//
Функция НомерПоследнейИтерации(ТаблицаИтераций)
	
	НомерПоследнейИтерации = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаИтераций Цикл
		НомерПоследнейИтерации = Макс(СтрокаТаблицы.НомерИтерации, НомерПоследнейИтерации);
	КонецЦикла;
	
	Возврат НомерПоследнейИтерации;
	
КонецФункции

// Обработка перед выполнением действия "Ознакомиться" процесса "Утверждение".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияУтверждениеОзнакомиться(
	ДействиеЗадачи,
	ДанныеВыполнения, ПараметрыВыполнения, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно
		И Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РезультатИзмененияПараметровПроцесса") Тогда
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ИзменитьПараметрыПроцесса", Истина);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("БизнесПроцесс", РеквизитыЗадачиПроцесса.БизнесПроцесс);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ТочкаМаршрута", РеквизитыЗадачиПроцесса.ТочкаМаршрута);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("РезультатВыполнения", РеквизитыДействия.РезультатДействияТекстом);
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;

КонецПроцедуры

// Обработка перед выполнением действия "Утвердить" процесса "Утверждение".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияУтверждениеУтвердить(
	ДействиеЗадачи,
	ДанныеВыполнения, ПараметрыВыполнения, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПодписиЭПКПредметам")
		И РезультатДействия = Справочники.РезультатыДействийЗадач.Утверждено Тогда
		
		ПредметыДляПодписания = ПредметыДляПодписанияЭП(
			РеквизитыЗадачиПроцесса.БизнесПроцесс,
			РеквизитыДействия.Источник);
		
		Если ПредметыДляПодписания.Количество() > 0 Тогда
			
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПодписатьПредметыЭП", Истина);
			
			НаборыПредметовДляПодписания = Неопределено;
			ДанныеВыполнения.ДополнительныеПараметры.Свойство(
				"НаборыПредметовДляПодписания", НаборыПредметовДляПодписания);
			Если ТипЗнч(НаборыПредметовДляПодписания) <> Тип("Соответствие") Тогда
				НаборыПредметовДляПодписания = Новый Соответствие;
				ДанныеВыполнения.ДополнительныеПараметры.Вставить(
					"НаборыПредметовДляПодписания", НаборыПредметовДляПодписания);
			КонецЕсли;
			
			НаборыПредметовДляПодписания.Вставить(ДействиеЗадачи, ПредметыДляПодписания);
			
			Если ДанныеВыполнения.ЧислоЗадач > 1
				И (Не ПолучитьФункциональнуюОпцию("РазрешитьГрупповоеВыполнениеЗадачСЭП")) Тогда
				
				Причина = НСтр("ru = 'Требуется подписание ЭП'");
				ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
					Новый Структура("Задача, Причина", 
					ДействиеЗадачи, Причина));
			КонецЕсли;	
			
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.НеУтверждено
		И Не ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
		
		ДанныеВыполнения.Предупреждения.Добавить(НСтр("ru = 'Укажите причину отклонения документа'"));
		ДанныеВыполнения.ПоказатьПредупреждение = Истина;
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Требуется указать причину отклонения документа.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(РеквизитыДействия.Источник,, Истина);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет)
			Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда
			
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Предмет);
				РазблокироватьДанныеДляРедактирования(Предмет);
			Исключение	
				
				ПодробноОписание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				КтоБлокирует = ДействияСервер.БлокируетПредметИзОписанияОшибки(ПодробноОписание);
				
				ЗаписьЖурналаРегистрации("ПередИнтерактивнымВыполнениемДействияУтверждениеУтвердить", УровеньЖурналаРегистрации.Ошибка, 
					Метаданные.Справочники.ДействияПодписания, , ПодробноОписание);
					
				СообщениеОбОшибке = СтрШаблон(
					НСтр("ru = 'Не удалось утвердить документ ""%1"".
						|Возможно этот документ открыт вами или другим пользователем.
						|%2
						|
						|Необходимо закрыть карточку документа.'"),
					Строка(Предмет), КтоБлокирует);
				
				ДанныеВыполнения.Предупреждения.Добавить(СообщениеОбОшибке);
				ДанныеВыполнения.ПоказатьПредупреждение = Истина;
				
				Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
					Причина = СообщениеОбОшибке;
					ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
						Новый Структура("Задача, Причина", 
						ДействиеЗадачи, Причина));
				КонецЕсли;	
				
				ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработка перед выполнением действия "Ознакомиться" процесса "Согласование".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияСогласованиеОзнакомиться(
	ДействиеЗадачи,
	ДанныеВыполнения, 
	ПараметрыВыполнения, РезультатДействия, РеквизитыДействия, 
	РеквизитыЗадачиПроцесса,
	КоличествоДействий)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		Возврат;
	КонецЕсли;
	
	СогласованиеВРежимеЗамечаний = Ложь;
	Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(РеквизитыЗадачиПроцесса.БизнесПроцесс);
	Если ЗначениеЗаполнено(Действие) 
		И ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
		
		СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Действие,
			"СогласованиеВРежимеЗамечаний");
		
	КонецЕсли;
	
	Если СогласованиеВРежимеЗамечаний И КоличествоДействий > 1 Тогда  //  групповое выполнение запретим
		ВызватьИсключение НСтр("ru = 'Массовое выполнение задач согласования в режиме замечаний не поддерживается.'");
	КонецЕсли;	
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно
		И Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РезультатИзмененияПараметровПроцесса") Тогда
		
//		Если ДанныеВыполнения.ДополнительныеПараметры.Свойство("ИзменитьПараметрыПроцесса")
//			И ДанныеВыполнения.ДополнительныеПараметры.ИзменитьПараметрыПроцесса Тогда
//			ВызватьИсключение НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
//		КонецЕсли;
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ИзменитьПараметрыПроцесса", Истина);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("БизнесПроцесс", РеквизитыЗадачиПроцесса.БизнесПроцесс);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ТочкаМаршрута", РеквизитыЗадачиПроцесса.ТочкаМаршрута);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("РезультатВыполнения", РеквизитыДействия.РезультатДействияТекстом);

		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
	ИнформацияОЗадаче = Новый Структура;
	ИнформацияОЗадаче.Вставить("Ссылка", РеквизитыДействия.Источник);
	ИнформацияОЗадаче.Вставить("БизнесПроцесс", РеквизитыЗадачиПроцесса.БизнесПроцесс);
	
	ДанныеОповещения = Новый Структура("ИмяСобытия, Параметр, Источник");
	ДанныеОповещения.ИмяСобытия = "ЗадачаСогласованияВыполнена";
	ДанныеОповещения.Параметр = ИнформацияОЗадаче;
	
	ДанныеВыполнения.ОповещенияПослеВыполнения.Добавить(ДанныеОповещения);
	
КонецПроцедуры

// Обработка формирования оповещений для обновления обработки при выполнении задачи ознакомления.
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  РеквизитыДействия - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияОзнакомленияОбновитьОбработку(
	ДействиеЗадачи, ДанныеВыполнения, РеквизитыДействия)  
	
	ДействиеОзнакомления = РеквизитыДействия.Источник;
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеОзнакомления, "Предмет");
	ОсновныеПредметы = Новый Массив;
	ОсновныеПредметы.Добавить(Предмет);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		
		// обновим закладку Обработка
		ИнформацияОПредмете = Новый Структура;
		ИнформацияОПредмете.Вставить("Предмет", Предмет);
		ИнформацияОПредмете.Вставить("Действие", ДействиеОзнакомления);
		
		ДанныеОповещения = Новый Структура("ИмяСобытия, Параметр, Источник");
		ДанныеОповещения.ИмяСобытия = "ОбновитьДействияВПредметеПриВыполненииЗадачи";
		ДанныеОповещения.Параметр = ИнформацияОПредмете;
		
		ДанныеВыполнения.ОповещенияПослеВыполнения.Добавить(ДанныеОповещения);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработка формирования оповещений для обновления обработки.
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  РеквизитыДействия - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияОбновитьОбработку(
	ДействиеЗадачи, ДанныеВыполнения, РеквизитыДействия)
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(РеквизитыДействия.Источник,, Истина);
	ДействиеОбработки = РаботаСПроцессамиПоДействиям.ДействиеЗадачиПроцесса(РеквизитыДействия.Источник);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		
		// обновим закладку Обработка
		ИнформацияОПредмете = Новый Структура;
		ИнформацияОПредмете.Вставить("Предмет", Предмет);
		ИнформацияОПредмете.Вставить("Действие", ДействиеОбработки);
		
		ДанныеОповещения = Новый Структура("ИмяСобытия, Параметр, Источник");
		ДанныеОповещения.ИмяСобытия = "ОбновитьДействияВПредметеПриВыполненииЗадачи";
		ДанныеОповещения.Параметр = ИнформацияОПредмете;
		
		ДанныеВыполнения.ОповещенияПослеВыполнения.Добавить(ДанныеОповещения);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработка проверки подзадач перед выполнением действия.
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РеквизитыДействия - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияПроверитьПодзадачи(
	ДействиеЗадачи, ДанныеВыполнения, ПараметрыВыполнения, РеквизитыДействия)
	
	Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ВариантОбработкиПодзадач") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьАктивныеПодзадачи = РаботаСБизнесПроцессамиВызовСервера.ЕстьАктивныеПодзадачи(
		РеквизитыДействия.Источник);
	Если Не ЕстьАктивныеПодзадачи Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыполнения.ДополнительныеПараметры.Вставить("ЗадачаПроцесса", РеквизитыДействия.Источник);
	ДанныеВыполнения.ДополнительныеПараметры.Вставить("ЗадатьВопросОПодзадачах", Истина);
	
	Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
		Причина = НСтр("ru = 'Есть невыполненные подзадачи.'");
		ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
			Новый Структура("Задача, Причина", 
			ДействиеЗадачи, Причина));
	КонецЕсли;	
	
	ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
	
КонецПроцедуры

// Обработка перед выполнением действия "Согласовать" процесса "Согласование".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияСогласованиеСогласовать(
	ДействиеЗадачи,
	ДанныеВыполнения, 
	ПараметрыВыполнения, РезультатДействия, РеквизитыДействия, 
	РеквизитыЗадачиПроцесса, КоличествоДействий)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		Возврат;
	КонецЕсли;
	
	СогласованиеВРежимеЗамечаний = Ложь;
	Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(РеквизитыЗадачиПроцесса.БизнесПроцесс);
	Если ЗначениеЗаполнено(Действие) 
		И ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
		
		СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Действие,
			"СогласованиеВРежимеЗамечаний");
		
	КонецЕсли;
	
	Если СогласованиеВРежимеЗамечаний И КоличествоДействий > 1 Тогда  //  групповое выполнение запретим
		ВызватьИсключение НСтр("ru = 'Массовое выполнение задач согласования в режиме замечаний не поддерживается.'");
	КонецЕсли;	
	
	Если (РезультатДействия = Справочники.РезультатыДействийЗадач.СогласованоСЗамечаниями
			Или РезультатДействия = Справочники.РезультатыДействийЗадач.НеСогласовано)
		И Не ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) 
		И Не СогласованиеВРежимеЗамечаний Тогда
		
		ДанныеВыполнения.Предупреждения.Добавить(НСтр("ru = 'Поле ""Комментарий"" не заполнено'"));
		ДанныеВыполнения.ПоказатьПредупреждение = Истина;
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Поле ""Комментарий"" не заполнено'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;

	Если Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПодписиКВизамСогласования") Тогда
		
		ПредметыДляВизСЭП = ПредметыДляВизированияЭП(
			РеквизитыЗадачиПроцесса.БизнесПроцесс,
			РеквизитыДействия.Источник);
		
		Если ПредметыДляВизСЭП.Количество() > 0 Тогда
			
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПодписатьВизыЭП", Истина);
			
			НаборыПредметовДляПодписанияВиз = Неопределено;
			ДанныеВыполнения.ДополнительныеПараметры.Свойство(
				"НаборыПредметовДляПодписанияВиз", НаборыПредметовДляПодписанияВиз);
			Если ТипЗнч(НаборыПредметовДляПодписанияВиз) <> Тип("Соответствие") Тогда
				НаборыПредметовДляПодписанияВиз = Новый Соответствие;
				ДанныеВыполнения.ДополнительныеПараметры.Вставить(
					"НаборыПредметовДляПодписанияВиз", НаборыПредметовДляПодписанияВиз);
			КонецЕсли;
			
			НаборыПредметовДляПодписанияВиз.Вставить(ДействиеЗадачи, ПредметыДляВизСЭП);
			
			Если ДанныеВыполнения.ЧислоЗадач > 1
				И (Не ПолучитьФункциональнуюОпцию("РазрешитьГрупповоеВыполнениеЗадачСЭП")) Тогда
				
				Причина = НСтр("ru = 'Требуется подписание ЭП'");
				ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
					Новый Структура("Задача, Причина", 
					ДействиеЗадачи, Причина));
			КонецЕсли;	
			
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(РеквизитыДействия.Источник,, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		
		ИнформацияОЗадаче = Новый Структура;
		ИнформацияОЗадаче.Вставить("Ссылка", РеквизитыДействия.Источник);
		ИнформацияОЗадаче.Вставить("Предмет", Предмет);
		ИнформацияОЗадаче.Вставить("БизнесПроцесс", РеквизитыЗадачиПроцесса.БизнесПроцесс);
		
		ДанныеОповещения = Новый Структура("ИмяСобытия, Параметр, Источник");
		ДанныеОповещения.ИмяСобытия = "ЗадачаСогласованияВыполнена";
		ДанныеОповещения.Параметр = ИнформацияОЗадаче;
		
		ДанныеВыполнения.ОповещенияПослеВыполнения.Добавить(ДанныеОповещения);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработка перед выполнением действия "Ознакомление" процесса "Ознакомление".
//
// Параметры:
//	ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи -
//	Действие - СправочникСсылка.ДействияОзнакомления -
//	ДанныеВыполнения - См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи - 
//	ПараметрыВыполнения - См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач -
//
Процедура ПередИнтерактивнымВыполнениемДействияОзнакомлениеОзнакомиться(ДействиеЗадачи, Действие, 
	ДанныеВыполнения, ПараметрыВыполнения) 
	
	Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПодписиКДаннымОзнакомления") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "ПодписыватьУЭП, Предмет");
	Подписывать = РеквизитыДействия.ПодписыватьУЭП;
	Документ = РеквизитыДействия.Предмет;
	
	ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПодписыватьДанныеОзнакомления", Подписывать);
	
	Если Подписывать И ДанныеВыполнения.ЧислоЗадач > 1
		И (Не ПолучитьФункциональнуюОпцию("РазрешитьГрупповоеВыполнениеЗадачСЭП")) Тогда
		
		Причина = НСтр("ru = 'Требуется подписание ЭП'");
		ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
		Новый Структура("Задача, Причина", ДействиеЗадачи, Причина));
		
	КонецЕсли;
	
	СоответствиеДляДатИВерсийФайлов = ?(Подписывать, ДанныеВыполнения, ПараметрыВыполнения);
	
	НаборыВерсийФайлов = Неопределено;
	СоответствиеДляДатИВерсийФайлов.ДополнительныеПараметры.Свойство(
		"НаборыВерсийФайлов", НаборыВерсийФайлов);
	Если ТипЗнч(НаборыВерсийФайлов) <> Тип("Соответствие") Тогда
		НаборыВерсийФайлов = Новый Соответствие;
		СоответствиеДляДатИВерсийФайлов.ДополнительныеПараметры.Вставить(
			"НаборыВерсийФайлов", НаборыВерсийФайлов);
	КонецЕсли;
	
	ВерсииФайлов = Справочники.ДанныеОзнакомленияПодПодпись.ТекущиеВерсииФайловДокумента(Документ);
	
	НаборыВерсийФайлов.Вставить(ДействиеЗадачи, ВерсииФайлов);
	
	Если Не Подписывать Тогда
		Возврат;
	КонецЕсли;
	
	НаборыДанныхПодПодпись = Неопределено;
	ДанныеВыполнения.ДополнительныеПараметры.Свойство(
		"НаборыДанныхПодПодпись", НаборыДанныхПодПодпись);
	Если ТипЗнч(НаборыДанныхПодПодпись) <> Тип("Соответствие") Тогда
		НаборыДанныхПодПодпись = Новый Соответствие;
		ДанныеВыполнения.ДополнительныеПараметры.Вставить(
			"НаборыДанныхПодПодпись", НаборыДанныхПодПодпись);
	КонецЕсли;
	
	НаборДанных = Новый Структура;
	НаборДанных.Вставить("Документ", Документ);
	НаборДанных.Вставить("Исполнитель", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Исполнитель"));
	НаборДанных.Вставить("ВерсииФайлов", ВерсииФайлов);
	
	НаборыДанныхПодПодпись.Вставить(ДействиеЗадачи, НаборДанных);
	
	ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
	
КонецПроцедуры

// Обработка перед выполнением действия "Ознакомление" процесса "Вопрос".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияВопросОзнакомление(
	ДействиеЗадачи,
	ДанныеВыполнения, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно
		И Не ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
		
		ДанныеВыполнения.Предупреждения.Добавить(НСтр("ru = 'При отправке на уточнение требуется указать комментарий.'"));
		ДанныеВыполнения.ПоказатьПредупреждение = Истина;
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'При отправке на уточнение требуется указать комментарий.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;

КонецПроцедуры

// Обработка перед выполнением действия "Рассмотрение" процесса "Вопрос".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияВопросРассмотрение(
	ДействиеЗадачи,
	Знач ДанныеВыполнения, Знач ПараметрыВыполнения, Знач РезультатДействия, Знач РеквизитыДействия, Знач РеквизитыЗадачиПроцесса)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.Рассмотрено
		И Не ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
		
		ДанныеВыполнения.Предупреждения.Добавить(НСтр("ru = 'Поле ""Комментарий"" не заполнено'"));
		ДанныеВыполнения.ПоказатьПредупреждение = Истина;
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Поле ""Комментарий"" не заполнено'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ПеренесенСрок Тогда
		
		РеквизитыПроцессаРешениеВопросов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыЗадачиПроцесса.БизнесПроцесс,
			"ПредметРассмотрения, НовыйСрок, УзелОбработки");
		
		КоличествоПереносовПоЗадаче = 
			ПереносСроковВыполненияЗадач.КоличествоПереносовСрокаПоЗадачеИЗаявкеНаПеренос(
				РеквизитыПроцессаРешениеВопросов.ПредметРассмотрения,
				РеквизитыЗадачиПроцесса.БизнесПроцесс);
		
		Если РаботаСБизнесПроцессами.ЭтоБизнесПроцессСсылка(РеквизитыЗадачиПроцесса.БизнесПроцесс)
			И ТипЗнч(РеквизитыПроцессаРешениеВопросов.ПредметРассмотрения)
				= Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				РеквизитыПроцессаРешениеВопросов.ПредметРассмотрения,
				"БизнесПроцесс");
			
			УзелОбменаПредметаРассмотрения = 
				ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
					РеквизитыПредмета.БизнесПроцесс, "УзелОбработки");
			
			УзелОбменаЗаявки = РеквизитыПроцессаРешениеВопросов.УзелОбработки;
			
			ТребуетсяРучноеИзменениеСрока = УзелОбменаПредметаРассмотрения <> УзелОбменаЗаявки;
			
			Если ТребуетсяРучноеИзменениеСрока И КоличествоПереносовПоЗадаче = 0 Тогда
				
				ДанныеВыполнения.Предупреждения.Добавить(НСтр("ru = 'Необходимо вручную изменить срок на карточке процесса'"));
				ДанныеВыполнения.ПоказатьПредупреждение = Истина;
				
				Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
					Причина = НСтр("ru = 'Необходимо вручную изменить срок на карточке процесса'");
					ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
						Новый Структура("Задача, Причина", 
						ДействиеЗадачи, Причина));
				КонецЕсли;	
				
				ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("НовыйСрок") Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			ДанныеПредметаРассмотрения = РаботаСВопросами.ДанныеПредметаРассмотрения(
				РеквизитыПроцессаРешениеВопросов.ПредметРассмотрения);
			УстановитьПривилегированныйРежим(Ложь);
			
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ВвестиНовыйСрок", Истина);
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("СтарыйСрок", ДанныеПредметаРассмотрения.Срок);
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ЗапрошенныйНовыйСрок", РеквизитыПроцессаРешениеВопросов.НовыйСрок);
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("КоличествоПереносовПоЗадаче", КоличествоПереносовПоЗадаче);
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПредметРассмотрения", РеквизитыПроцессаРешениеВопросов.ПредметРассмотрения);
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("БизнесПроцессПредметаРассмотрения", ДанныеПредметаРассмотрения.БизнесПроцесс);
			
			Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
				Причина = НСтр("ru = 'Необходимо вручную изменить срок на карточке процесса'");
				ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
					Новый Структура("Задача, Причина", 
					ДействиеЗадачи, Причина));
			КонецЕсли;	
			
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЕсли;
		
		ДанныеОповещения = Новый Структура("ИмяСобытия, Параметр, Источник");
		ДанныеОповещения.ИмяСобытия = "ПереносСрокаИсполненияПроцесса";
		ДанныеОповещения.Параметр = РеквизитыЗадачиПроцесса.БизнесПроцесс;
		
		ДанныеВыполнения.ОповещенияПослеВыполнения.Добавить(ДанныеОповещения);
		
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ОтказаноВПереносеСрока
		И Не ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
		
		ДанныеВыполнения.Предупреждения.Добавить(НСтр("ru = 'Не заполнено поле ""Комментарий"".'"));
		ДанныеВыполнения.ПоказатьПредупреждение = Истина;
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Не заполнено поле ""Комментарий"".'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка перед выполнением действия "Ознакомиться" процесса "Регистрация".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияРегистрацияОзнакомиться(
	ДействиеЗадачи,
	Знач ДанныеВыполнения, Знач ПараметрыВыполнения, Знач РезультатДействия, РеквизитыДействия, Знач РеквизитыЗадачиПроцесса)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно
		И Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РезультатИзмененияПараметровПроцесса") Тогда
		
//		Если ДанныеВыполнения.ДополнительныеПараметры.Свойство("ИзменитьПараметрыПроцесса")
//			И ДанныеВыполнения.ДополнительныеПараметры.ИзменитьПараметрыПроцесса Тогда
//			ВызватьИсключение НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
//		КонецЕсли;
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ИзменитьПараметрыПроцесса", Истина);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("БизнесПроцесс", РеквизитыЗадачиПроцесса.БизнесПроцесс);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ТочкаМаршрута", РеквизитыЗадачиПроцесса.ТочкаМаршрута);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("РезультатВыполнения", РеквизитыДействия.РезультатДействияТекстом);
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;

КонецПроцедуры

// Обработка перед выполнением действия "Зарегистрировать" процесса "Регистрация".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияРегистрацияЗарегистрировать(
	ДействиеЗадачи,
	ДанныеВыполнения, ПараметрыВыполнения, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда
		Возврат;
	КонецЕсли;
	
	// Если еще ожидается действие от пользователя, то не выполняем регистрацию
	Если (ДанныеВыполнения.Свойство("ЗапретВыполнения")
		И ДанныеВыполнения.ЗапретВыполнения = Истина)
		Или (ДанныеВыполнения.Свойство("ВыбратьИсполнителяЗадачи")
		И ДанныеВыполнения.ВыбратьИсполнителяЗадачи = Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РучныеНомераДокументов") Тогда
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("РучныеНомераДокументов",
			ПараметрыВыполнения.ДополнительныеПараметры.РучныеНомераДокументов);
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПропущенныеНомераДокументов") Тогда
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПропущенныеНомераДокументов",
			ПараметрыВыполнения.ДополнительныеПараметры.ПропущенныеНомераДокументов);
	КонецЕсли;
	
	Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ДатыДокументовВведенныеВручную") Тогда
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ДатыДокументовВведенныеВручную",
			ПараметрыВыполнения.ДополнительныеПараметры.ДатыДокументовВведенныеВручную);
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.Зарегистрировано Тогда
		
		ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
		ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
			РеквизитыДействия.Источник,
			ТипыДокументов,
			Истина);
			
		РегистрационныеНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОсновныеПредметы,
			"РегистрационныйНомер");
		
		Если Не ДанныеВыполнения.ДополнительныеПараметры.Свойство("ПредметыДляРучнойНумерации") Тогда
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПредметыДляРучнойНумерации", Новый Массив);
		КонецЕсли;
		
		Если Не ДанныеВыполнения.ДополнительныеПараметры.Свойство("УказатьРегистрационныйНомер") Тогда
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("УказатьРегистрационныйНомер", Ложь);
		КонецЕсли;
		
		РучныеНомераДокументов = Новый Соответствие;
		Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РучныеНомераДокументов") Тогда
			РучныеНомераДокументов = ПараметрыВыполнения.ДополнительныеПараметры.РучныеНомераДокументов;
		КонецЕсли;
		
		ДатыДокументовВведенныеВручную = Новый Соответствие;
		Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ДатыДокументовВведенныеВручную") Тогда
			ДатыДокументовВведенныеВручную = ПараметрыВыполнения.ДополнительныеПараметры.ДатыДокументовВведенныеВручную;
		КонецЕсли;
		
		Если Не ДанныеВыполнения.ДополнительныеПараметры.Свойство("ПропущенныеНомераДокументов") Тогда
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПропущенныеНомераДокументов",
				Новый Соответствие);
		КонецЕсли;
		
		Если Не ДанныеВыполнения.ДополнительныеПараметры.Свойство("ВыбратьПропущенныйНомер") Тогда
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ВыбратьПропущенныйНомер", Ложь);
		КонецЕсли;
		
		ПропущенныеНомераДокументов = Новый Соответствие;
		Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПропущенныеНомераДокументов") Тогда
			ПропущенныеНомераДокументов = ПараметрыВыполнения.ДополнительныеПараметры.ПропущенныеНомераДокументов;
		КонецЕсли;
		
		ПредметыДляРегистрации = Новый Массив;
		Для Каждого Предмет Из ОсновныеПредметы Цикл
			
			Если ЗначениеЗаполнено(РегистрационныеНомера[Предмет]) Тогда
				Продолжить;
			КонецЕсли;
			
			НумераторИНеобходимостьСвязи =
				Делопроизводство.ДляРегистрацииНеобходимоУказатьСвязанныйДокумент(Предмет);
			
			Нумератор = НумераторИНеобходимостьСвязи.Нумератор;
			СоздатьСвязьДляНумерации = НумераторИНеобходимостьСвязи.СоздатьСвязьДляНумерации;
			
			ДоступныеПропущенныеНомера = Неопределено;
			ВыбратьПропущенныйНомер = Ложь;
			Если Нумерация.ИспользуютсяПропущенныеНомера(Нумератор) Тогда
				ДоступныеПропущенныеНомера = 
					РегистрыСведений.ПропускиРегистрационныхНомеров.ТаблицаПропущенныхНомеров(
						Нумератор, , Предмет);
			КонецЕсли;
			Если ДоступныеПропущенныеНомера <> Неопределено И ДоступныеПропущенныеНомера.Количество()
				И ПропущенныеНомераДокументов[Предмет] = Неопределено Тогда
				ВыбратьПропущенныйНомер = Истина;
			КонецЕсли;
			
			Если НумераторИНеобходимостьСвязи.Свойство("ТипСвязиНумератора") Тогда 
				ТипСвязиНумератора = НумераторИНеобходимостьСвязи.ТипСвязиНумератора;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Нумератор) Тогда // ручная нумерация
				
				РегистрационныйНомер = "";
				ДатаРегистрации = Дата(1, 1, 1);
				Если РучныеНомераДокументов[Предмет] <> Неопределено
					И ДатыДокументовВведенныеВручную[Предмет] <> Неопределено Тогда
					
					РегистрационныйНомер = РучныеНомераДокументов[Предмет];
					ДатаРегистрации = ДатыДокументовВведенныеВручную[Предмет];
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(РегистрационныйНомер) Или Не ЗначениеЗаполнено(ДатаРегистрации) Тогда
					
					ДанныеВыполнения.ДополнительныеПараметры.ПредметыДляРучнойНумерации.Добавить(Предмет);
					ДанныеВыполнения.ДополнительныеПараметры.УказатьРегистрационныйНомер = Истина;
					
					Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
						Причина = НСтр("ru = 'Требуется ручной ввод рег номера и даты.'");
						ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
							Новый Структура("Задача, Причина",
							ДействиеЗадачи, Причина));
					КонецЕсли;
					
					ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
					
				Иначе
					
					ПредметДляРегистрации = Новый Структура("Предмет, РегистрационныйНомер, ДатаРегистрации");
					ПредметДляРегистрации.Предмет = Предмет;
					ПредметДляРегистрации.РегистрационныйНомер = РегистрационныйНомер;
					ПредметДляРегистрации.ДатаРегистрации = ДатаРегистрации;
					
					ПредметыДляРегистрации.Добавить(ПредметДляРегистрации);
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Нумератор) Тогда
				
				Если СоздатьСвязьДляНумерации Тогда
					
					ДанныеВыполнения.Предупреждения.Добавить(
						СтрШаблон(
							НСтр("ru = 'Для регистрации документа необходимо создать связь ""%1""'"),
							ТипСвязиНумератора));
					ДанныеВыполнения.ПоказатьПредупреждение = Истина;
					
					Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
						Причина = СтрШаблон(
							НСтр("ru = 'Для регистрации документа необходимо создать связь ""%1""'"),
							ТипСвязиНумератора);
						ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
							Новый Структура("Задача, Причина", 
							ДействиеЗадачи, Причина));
					КонецЕсли;	
					
					ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
					
				КонецЕсли;
				
				Если ВыбратьПропущенныйНомер Тогда
				
					ДанныеВыполнения.ДополнительныеПараметры.ПропущенныеНомераДокументов.Вставить(
						Предмет, Новый Структура("ПропущенныйНомер", ""));
					
					ДанныеВыполнения.ДополнительныеПараметры.Вставить(
						"ПредметДляВыбораПропущенногоНомера", Предмет);
						
					ДанныеВыполнения.ДополнительныеПараметры.ВыбратьПропущенныйНомер = Истина;
					
					Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
						Причина = НСтр("ru = 'Требуется выбрать пропущенный номер.'");
						ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
							Новый Структура("Задача, Причина", 
							ДействиеЗадачи, Причина));
					КонецЕсли;	
					
					ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
					
				КонецЕсли;
				
				Если Не СоздатьСвязьДляНумерации И Не ВыбратьПропущенныйНомер Тогда
					
					ПредметДляРегистрации = Новый Структура("Предмет, РегистрационныйНомер, ДатаРегистрации");
					ПредметДляРегистрации.Предмет = Предмет;
					ПредметДляРегистрации.РегистрационныйНомер = "";
					ПредметДляРегистрации.ДатаРегистрации = Дата(1, 1, 1);
					
					Если ПропущенныеНомераДокументов[Предмет] <> Неопределено
						И ЗначениеЗаполнено(ПропущенныеНомераДокументов[Предмет].ПропущенныйНомер) Тогда
						
						ОписанияОшибок = Новый СписокЗначений;
						СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Предмет);
						СтруктураПараметров.ЧисловойНомер = ПропущенныеНомераДокументов[Предмет].ПропущенныйНомер;
						Если Не ЗначениеЗаполнено(СтруктураПараметров.ДатаРегистрации) Тогда
							СтруктураПараметров.ДатаРегистрации = ТекущаяДатаСеанса();
						КонецЕсли;
						Нумерация.СформироватьСтроковыйНомерДокумента(СтруктураПараметров,
							ПредметДляРегистрации.РегистрационныйНомер, 
							ОписанияОшибок);
						
						Если ОписанияОшибок.Количество() Тогда
							ОписаниеОшибки = ОписанияОшибок[0].Представление;
							Для Н = 1 По ОписанияОшибок.Количество() - 1 Цикл
								ОписаниеОшибки = СтрШаблон("%1;%2%3", ОписаниеОшибки,
									Символы.ПС, ОписанияОшибок[Н].Представление);
							КонецЦикла;
							
							ДанныеВыполнения.Предупреждения.Добавить(
								СтрШаблон(
									НСтр("ru = 'Документ не может быть зарегистрирован ""%1"" по следующим причинам: %2%3'"),
									ПредметДляРегистрации.Предмет,
									Символы.ПС,
									ОписаниеОшибки));
								ДанныеВыполнения.ПоказатьПредупреждение = Истина;
								
								Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
									Причина = СтрШаблон(
									НСтр("ru = 'Документ не может быть зарегистрирован ""%1"" по следующим причинам: %2%3'"),
									ПредметДляРегистрации.Предмет,
									Символы.ПС,
									ОписаниеОшибки);
									ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
										Новый Структура("Задача, Причина", 
										ДействиеЗадачи, Причина));
								КонецЕсли;	
								
								ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
					ПредметыДляРегистрации.Добавить(ПредметДляРегистрации);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ПредметДляРегистрации Из ПредметыДляРегистрации Цикл
			
			Если Не Делопроизводство.ПредметМожетБытьЗарегистрирован(
				ПредметДляРегистрации.Предмет,
				ПредметДляРегистрации.РегистрационныйНомер,
				ПредметДляРегистрации.ДатаРегистрации) Тогда
				
				ДанныеВыполнения.Предупреждения.Добавить(
					СтрШаблон(
						НСтр("ru = 'Документ не может быть зарегистрирован ""%1""'"),
						ПредметДляРегистрации.Предмет));
				ДанныеВыполнения.ПоказатьПредупреждение = Истина;
				
				Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
					Причина = СтрШаблон(
						НСтр("ru = 'Документ не может быть зарегистрирован ""%1""'"),
						ПредметДляРегистрации.Предмет);
					ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
						Новый Структура("Задача, Причина", 
						ДействиеЗадачи, Причина));
				КонецЕсли;	
				
				ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
				
				Продолжить;
				
			КонецЕсли;
			
			НачатьТранзакцию();
			Попытка
				
				Если ПропущенныеНомераДокументов[Предмет] <> Неопределено
					И ЗначениеЗаполнено(ПропущенныеНомераДокументов[Предмет].ПропущенныйНомер) Тогда
					РегистрыСведений.ПропускиРегистрационныхНомеров.УдалитьПропущенныйНомер(
						ПропущенныеНомераДокументов[Предмет]);
				КонецЕсли;
				
				СообщениеОбОшибке = "";
				ПредметЗарегистрирован = Делопроизводство.ЗарегистрироватьПредмет(
					ПредметДляРегистрации.Предмет,
					СообщениеОбОшибке,
					ПредметДляРегистрации.РегистрационныйНомер,
					Новый Структура("ДатаРегистрации", ПредметДляРегистрации.ДатаРегистрации));
				
				Если Не ПредметЗарегистрирован Тогда
					
					ДанныеВыполнения.Предупреждения.Добавить(СообщениеОбОшибке);
					ДанныеВыполнения.ПоказатьПредупреждение = Истина;
					
					Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
						Причина = СтрШаблон(
							НСтр("ru = 'Документ не может быть зарегистрирован ""%1""'"),
							СообщениеОбОшибке);
						ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
							Новый Структура("Задача, Причина", 
							ДействиеЗадачи, Причина));
					КонецЕсли;
					
					ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.НеЗарегистрировано Тогда
		
		ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
		ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
			РеквизитыДействия.Источник,
			ТипыДокументов,
			Истина);
		РегистрационныеНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОсновныеПредметы, "РегистрационныйНомер");
		
		ЕстьЗарегистрированныеПредметы = Ложь;
		Для Каждого Предмет из ОсновныеПредметы Цикл
			
			Если Не ЗначениеЗаполнено(РегистрационныеНомера[Предмет]) Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьЗарегистрированныеПредметы = Истина;
			
			ЗаголовокКомандыЗарегистрировать =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Справочники.РезультатыДействийЗадач.Зарегистрировано,
					"ЗаголовокКоманды");
			
			ДанныеВыполнения.Предупреждения.Добавить(
				СтрШаблон(
					НСтр("ru = 'Документ ""%1"" зарегистрирован!
						|Для завершения задачи нажмите кнопку ""%2"".'"),
					Строка(Предмет),
					ЗаголовокКомандыЗарегистрировать));
			ДанныеВыполнения.ПоказатьПредупреждение = Истина;
			
			Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
				Причина = СтрШаблон(
					НСтр("ru = 'Документ ""%1"" зарегистрирован!
						|Для завершения задачи нажмите кнопку ""%2"".'"),
					Строка(Предмет),
					ЗаголовокКомандыЗарегистрировать);
				ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
					Новый Структура("Задача, Причина", 
					ДействиеЗадачи, Причина));
			КонецЕсли;	
			
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЦикла;
		
		Если Не ЕстьЗарегистрированныеПредметы
			И Не ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
		
			ДанныеВыполнения.Предупреждения.Добавить(НСтр("ru = 'Укажите причину отказа в регистрации'"));
			ДанныеВыполнения.ПоказатьПредупреждение = Истина;
			
			Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
				Причина = НСтр("ru = 'Укажите причину отказа в регистрации'");
				ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
					Новый Структура("Задача, Причина", 
					ДействиеЗадачи, Причина));
			КонецЕсли;	
			
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка перед выполнением действия "Рассмотреть" процесса "Рассмотрение".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияРассмотрениеОзнакомиться(
	ДействиеЗадачи,
	ДанныеВыполнения, ПараметрыВыполнения, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		Возврат;
	КонецЕсли;
	
	Если (РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаИсполнение
			Или РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаОзнакомление)
		И Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РезультатИзмененияПараметровПроцесса") Тогда
		
//		Если ДанныеВыполнения.ДополнительныеПараметры.Свойство("ИзменитьПараметрыПроцесса")
//			И ДанныеВыполнения.ДополнительныеПараметры.ИзменитьПараметрыПроцесса Тогда
//			ВызватьИсключение НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
//		КонецЕсли;
		
		ЧастиРезультатаВыполнения = Новый Массив;
		
		Если ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
			ЧастиРезультатаВыполнения.Добавить(РеквизитыДействия.РезультатДействияТекстом);
		КонецЕсли;
		
		Задача = РеквизитыДействия.Задача;
		ТаблицаУчастники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Участники").Выгрузить();
		
		Для Каждого СтрокаУчастника Из ТаблицаУчастники Цикл
			
			Если СтрокаУчастника.ВидУчастника <> Справочники.ВидыУчастниковЗадач.Рассматривающий Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстРезолюции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаУчастника.ДействиеУчастника,
				"РезультатДействияТекстом");
			
			Если ЗначениеЗаполнено(ТекстРезолюции) Тогда
				ЧастиРезультатаВыполнения.Добавить(ТекстРезолюции);
			КонецЕсли;
			
		КонецЦикла;
		
		
		РезультатВыполнения = СтрСоединить(ЧастиРезультатаВыполнения, Символы.ПС + Символы.ПС);
		
		ВариантРассмотрения =
			?(РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаИсполнение,
				Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение,
				Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление);
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ИзменитьПараметрыПроцесса", Истина);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ЗадачаПроцесса", РеквизитыДействия.Источник);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ТочкаМаршрута", РеквизитыЗадачиПроцесса.ТочкаМаршрута);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("РезультатВыполнения", РезультатВыполнения);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ВариантРассмотрения", ВариантРассмотрения);
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;

КонецПроцедуры

// Обработка перед выполнением действия "Рассмотреть" процесса "Рассмотрение".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  ПриложенияЗадачи - Массив из Структура - См. РаботаСЗадачами.ДанныеПриложенияЗадачи().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияРассмотрениеРассмотреть(
	ДействиеЗадачи,
	ДанныеВыполнения, ПараметрыВыполнения, ПриложенияЗадачи, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		Возврат;
	КонецЕсли;
	
	Если (РезультатДействия = Справочники.РезультатыДействийЗадач.Рассмотрено
			Или РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоПомощнику
			Или РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоАвтору)
		И Не ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
		
		ДанныеВыполнения.Предупреждения.Добавить(НСтр("ru = 'Не заполнена резолюция'"));
		ДанныеВыполнения.ПоказатьПредупреждение = Истина;
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Не заполнена резолюция'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПодписиКРезолюциям")  Тогда
		
		ДатаФормированияРезолюций = ТекущаяДатаСеанса();
		
		РезолюцииДляПодписания = РезолюцииДляПодписанияЭП(
			РеквизитыДействия.Источник,
			Сотрудники.ОсновнойСотрудникПользователя(
				РеквизитыЗадачиПроцесса.Исполнитель),
			РеквизитыДействия.РезультатДействияТекстом,
			ДатаФормированияРезолюций);
		
		Если РезолюцииДляПодписания.Количество() > 0 Тогда
			
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПодписатьРезолюцииЭП", Истина);
			ДанныеВыполнения.ДополнительныеПараметры.Вставить(
				"ДатаФормированияРезолюций",
				ДатаФормированияРезолюций);
			
			НаборыРезолюцийДляПодписания = Неопределено;
			ДанныеВыполнения.ДополнительныеПараметры.Свойство(
				"НаборыРезолюцийДляПодписания", НаборыРезолюцийДляПодписания);
			Если ТипЗнч(НаборыРезолюцийДляПодписания) <> Тип("Соответствие") Тогда
				НаборыРезолюцийДляПодписания = Новый Соответствие;
				ДанныеВыполнения.ДополнительныеПараметры.Вставить(
					"НаборыРезолюцийДляПодписания", НаборыРезолюцийДляПодписания);
			КонецЕсли;
			
			НаборыРезолюцийДляПодписания.Вставить(ДействиеЗадачи, РезолюцииДляПодписания);
			
			Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
				Причина = НСтр("ru = 'Требуется подписание ЭП'");
				ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
					Новый Структура("Задача, Причина", 
					ДействиеЗадачи, Причина));
			КонецЕсли;	
			
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаИсполнение
			Или РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаОзнакомление)
		И Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РезультатИзмененияПараметровПроцесса") Тогда
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ИзменитьПараметрыПроцесса", Истина);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ЗадачаПроцесса", РеквизитыДействия.Источник);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ТочкаМаршрута", РеквизитыЗадачиПроцесса.ТочкаМаршрута);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("РезультатВыполнения", РеквизитыДействия.РезультатДействияТекстом);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ВариантРассмотрения",
			?(РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаИсполнение,
				Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение,
				Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление));
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.ОтсутствияПроверены
		И (РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоПомощнику
			Или РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоАвтору) Тогда
		
		ОбрабатывающийРезолюцию = Неопределено;
		
		Если ПараметрыВыполнения.Свойство("ОбрабатывающийРезолюцию") Тогда
			ОбрабатывающийРезолюцию = ПараметрыВыполнения.ОбрабатывающийРезолюцию; 
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОбрабатывающийРезолюцию) Тогда
			АктуальныеПомощники = ЗамещающиеИПомощники.ПодходящиеЗамещения(
				ДействиеЗадачи,
				Перечисления.ВидыЗамещения.Помощники);
			АктуальныхПомощниковБолееОдного = АктуальныеПомощники.Количество() > 1;
			Если Не АктуальныхПомощниковБолееОдного Тогда
				ОбрабатывающийРезолюцию = БизнесПроцессы.Рассмотрение.ОбрабатывающийРезолюцию(
					РеквизитыДействия.Источник,
					ДействиеЗадачи);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбрабатывающийРезолюцию) Тогда
			
			КогоПроверить = Новый Массив;
			КогоПроверить.Добавить(ОбрабатывающийРезолюцию);
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			РезультатПроверкиОтсутствий =
				Отсутствия.ПроверитьОтсутствия(КогоПроверить, ТекущаяДатаСеанса, ТекущаяДатаСеанса);
			
			Если РезультатПроверкиОтсутствий.ЕстьОтсутствия Тогда
				ДанныеВыполнения.ПредупредитьОбОтсутствиях = Истина;
				ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
				ДанныеВыполнения.РезультатПроверкиОтсутствий = РезультатПроверкиОтсутствий;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка перед выполнением действия "Ознакомиться" процесса "Приглашение".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения	 - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  ПриложенияЗадачи - Массив из Структура - См. РаботаСЗадачами.ДанныеПриложенияЗадачи().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияПриглашениеОзнакомиться(
	ДействиеЗадачи,
	ДанныеВыполнения, ПараметрыВыполнения, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно
		И Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РезультатИзмененияПараметровПроцесса") Тогда
		
//		Если ДанныеВыполнения.ДополнительныеПараметры.Свойство("ИзменитьПараметрыПроцесса")
//			И ДанныеВыполнения.ДополнительныеПараметры.ИзменитьПараметрыПроцесса Тогда
//			ВызватьИсключение НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
//		КонецЕсли;
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ИзменитьПараметрыПроцесса", Истина);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("БизнесПроцесс", РеквизитыЗадачиПроцесса.БизнесПроцесс);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ТочкаМаршрута", РеквизитыЗадачиПроцесса.ТочкаМаршрута);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("РезультатВыполнения", РеквизитыДействия.РезультатДействияТекстом);
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ПодтвержденоПриглашение Тогда
		
		РезультатПриглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		РеквизитыЗадачиПроцесса.БизнесПроцесс,
		"РезультатПриглашения");
		
		Если Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПодтвержденоИсключениеУчастников")
			И РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
			
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПодтвердитьИсключениеУчастников", Истина);
			
			Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
				Причина = НСтр("ru = 'Требуется подтвердить исключение участников.'");
				ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
					Новый Структура("Задача, Причина", 
					ДействиеЗадачи, Причина));
			КонецЕсли;	
			
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЕсли;
		
		Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
			
			ДанныеОповещения = Новый Структура("ИмяСобытия, Параметр, Источник");
			ДанныеОповещения.ИмяСобытия = "ИсключеныУчастники";
			ДанныеОповещения.Параметр = РеквизитыДействия.Источник;
			
			ДанныеВыполнения.ОповещенияПослеВыполнения.Добавить(ДанныеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно Тогда
		
		ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
			РеквизитыДействия.Источник,,
			Истина);
		Для Каждого Предмет Из ОсновныеПредметы Цикл
			
			ДанныеОповещения = Новый Структура("ИмяСобытия, Параметр, Источник");
			ДанныеОповещения.Параметр = Предмет;
			ДанныеОповещения.ИмяСобытия = "ПриглашенияОтправлены";
			
			ДанныеВыполнения.ОповещенияПослеВыполнения.Добавить(ДанныеОповещения);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка перед выполнением действия "Пригласить" процесса "Приглашение".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  ПриложенияЗадачи - Массив из Структура - См. РаботаСЗадачами.ДанныеПриложенияЗадачи().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияПриглашениеПригласить(
	ДействиеЗадачи,
	ДанныеВыполнения, ПараметрыВыполнения, ПриложенияЗадачи, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ПринятоПриглашение
		И Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ДоступностьПроверена") Тогда
		
		РеквизитыПриглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЗадачиПроцесса.БизнесПроцесс,
		"ДатаНачалаМероприятия, ДатаОкончанияМероприятия");
		
		ЭтоКорректныйПериод = РаботаСРабочимКалендаремКлиентСервер.ЯвляетсяКорректнымПериодом(
		РеквизитыПриглашения.ДатаНачалаМероприятия,
		РеквизитыПриглашения.ДатаОкончанияМероприятия);
		Если ЭтоКорректныйПериод Тогда
			
			ИсключенияЗанятости = Новый Массив;
			
			Для Каждого ДанныеПриложения Из ПриложенияЗадачи Цикл
				Если ДанныеПриложения.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной")
					И ТипЗнч(ДанныеПриложения.Приложение) = Тип("СправочникСсылка.Мероприятия") Тогда 
					ИсключенияЗанятости.Добавить(ДанныеПриложения.Приложение);
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыПроверкиДоступности = Новый Структура(
			"Исполнитель, ДатаНачалаМероприятия, ДатаОкончанияМероприятия,
			|ИспользоватьРабочийКалендарь, ИсключенияЗанятости");
			ПараметрыПроверкиДоступности.Исполнитель = РеквизитыЗадачиПроцесса.Исполнитель;
			ПараметрыПроверкиДоступности.ДатаНачалаМероприятия = РеквизитыПриглашения.ДатаНачалаМероприятия;
			ПараметрыПроверкиДоступности.ДатаОкончанияМероприятия = РеквизитыПриглашения.ДатаОкончанияМероприятия;
			ПараметрыПроверкиДоступности.ИспользоватьРабочийКалендарь = ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь");
			ПараметрыПроверкиДоступности.ИсключенияЗанятости = ИсключенияЗанятости;
			
			Если ПараметрыПроверкиДоступности.ИспользоватьРабочийКалендарь Тогда
				
				ДоступностьСотрудников = РаботаСРабочимКалендаремСервер.ПроверитьДоступностьФизЛицСотрудников(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПроверкиДоступности.Исполнитель),
				ПараметрыПроверкиДоступности.ДатаНачалаМероприятия,
				ПараметрыПроверкиДоступности.ДатаОкончанияМероприятия,
				ПараметрыПроверкиДоступности.ИсключенияЗанятости);
				
				Если ДоступностьСотрудников.ОбщаяЗанятость <> ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.Доступен") Тогда
					
					ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПараметрыПроверкиДоступности", ПараметрыПроверкиДоступности);
					ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПроверитьДоступностьФизЛицСотрудников", Истина);
					
					Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
						Причина = НСтр("ru = 'Требуется проверить доступность сотрудников.'");
						ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
							Новый Структура("Задача, Причина", 
							ДействиеЗадачи, Причина));
					КонецЕсли;	
					
					ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ОтклоненоПриглашение
		И Не ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
		
		ДанныеВыполнения.Предупреждения.Добавить(НСтр("ru = 'Не заполнен комментарий'"));
		ДанныеВыполнения.ПоказатьПредупреждение = Истина;
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Не заполнен комментарий'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ПринятоПриглашение
		Или РезультатДействия = Справочники.РезультатыДействийЗадач.ОтклоненоПриглашение Тогда
		
		ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		РеквизитыДействия.Источник,,
		Истина);
		Для Каждого Предмет Из ОсновныеПредметы Цикл
			
			ДанныеОповещения = Новый Структура("ИмяСобытия, Параметр, Источник");
			ДанныеОповещения.Параметр = Предмет;
			
			Если РезультатДействия = Справочники.РезультатыДействийЗадач.ПринятоПриглашение Тогда
				
				ДанныеОповещения.ИмяСобытия = "ПриглашениеПринято";
				
			ИначеЕсли РезультатДействия = Справочники.РезультатыДействийЗадач.ОтклоненоПриглашение Тогда
				
				ДанныеОповещения.ИмяСобытия = "ПриглашениеОтклонено";
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный результата действия %1'"),
				РезультатДействия);
				
			КонецЕсли;
			
			ДанныеВыполнения.ОповещенияПослеВыполнения.Добавить(ДанныеОповещения);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка перед выполнением действия "Подписать" процесса "Подписания".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияПодписаниеПодписать(
	ДействиеЗадачи,
	ДанныеВыполнения, ПараметрыВыполнения, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> ТочкиМаршрута.Подписать
		И РеквизитыЗадачиПроцесса.ТочкаМаршрута <> ТочкиМаршрута.ОбеспечитьПодписание Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПодписиЭПКПредметам")
		И РезультатДействия = Справочники.РезультатыДействийЗадач.Подписано Тогда
		
		ПредметыДляПодписания = ПредметыДляПодписанияЭП(
			РеквизитыЗадачиПроцесса.БизнесПроцесс,
			РеквизитыДействия.Источник);
		
		Если ПредметыДляПодписания.Количество() > 0 Тогда
			
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПодписатьПредметыЭП", Истина);
			
			НаборыПредметовДляПодписания = Неопределено;
			ДанныеВыполнения.ДополнительныеПараметры.Свойство(
				"НаборыПредметовДляПодписания", НаборыПредметовДляПодписания);
			Если ТипЗнч(НаборыПредметовДляПодписания) <> Тип("Соответствие") Тогда
				НаборыПредметовДляПодписания = Новый Соответствие;
				ДанныеВыполнения.ДополнительныеПараметры.Вставить(
					"НаборыПредметовДляПодписания", НаборыПредметовДляПодписания);
			КонецЕсли;
			
			НаборыПредметовДляПодписания.Вставить(ДействиеЗадачи, ПредметыДляПодписания);
			
			Если ДанныеВыполнения.ЧислоЗадач > 1
				И (Не ПолучитьФункциональнуюОпцию("РазрешитьГрупповоеВыполнениеЗадачСЭП")) Тогда
				
				Причина = НСтр("ru = 'Требуется подписание ЭП'");
				ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
					Новый Структура("Задача, Причина", 
					ДействиеЗадачи, Причина));
			КонецЕсли;	
			
			ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Предмет = Неопределено;
	Если (РезультатДействия = Справочники.РезультатыДействийЗадач.Подписано 
		Или РезультатДействия = Справочники.РезультатыДействийЗадач.НеПодписано)
		И РеквизитыЗадачиПроцесса.ТочкаМаршрута = ТочкиМаршрута.ОбеспечитьПодписание Тогда
			
		Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ВыбранныйПодписывающийИлиЗамещающий") Тогда
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ВыбранныйПодписывающийИлиЗамещающий",
				ПараметрыВыполнения.ДополнительныеПараметры.ВыбранныйПодписывающийИлиЗамещающий);
		КонецЕсли;
		Если Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ВыбранныйПодписывающийИлиЗамещающий") Тогда
			ПараметрыВыполнения.ДополнительныеПараметры.Вставить("ВыбранныйПодписывающийИлиЗамещающий", 
				Неопределено);
		КонецЕсли;
		
		Если Не ДанныеВыполнения.ДополнительныеПараметры.Свойство("ВыбранныйПодписывающийИлиЗамещающий") Тогда
			ДанныеВыполнения.ДополнительныеПараметры.Вставить("ВыбранныйПодписывающийИлиЗамещающий",
				Неопределено);
			
			ПодписывающиеМассив = ПодписывающиеПоЗадачеПодписания(РеквизитыЗадачиПроцесса);
			Если ПодписывающиеМассив.Количество() = 0 Тогда
				ВызватьИсключение НСтр("ru = 'Не найдены сотрудники, подписывающие документ'");
			ИначеЕсли ПодписывающиеМассив.Количество() > 1 Тогда
				ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
				ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
					РеквизитыДействия.Источник,
					ТипыДокументов,
					Истина);
				Если ОсновныеПредметы.Количество() Тогда
					Предмет = ОсновныеПредметы[0];
				КонецЕсли;
				
				ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
				ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПредметДляВыбораПодписанта",
					Предмет);
				ДанныеВыполнения.ДополнительныеПараметры.Вставить(
					"ИсполнительДляВыбора", РеквизитыЗадачиПроцесса.Исполнитель);
				ДанныеВыполнения.ДополнительныеПараметры.Вставить(
					"ПодписывающиеДляВыбораПодписания", ПодписывающиеМассив);
				
			ИначеЕсли ПодписывающиеМассив.Количество() = 1 Тогда

				ДанныеВыполнения.ДополнительныеПараметры.ВыбранныйПодписывающийИлиЗамещающий =
					ПодписывающиеМассив[0].Подписывающий;
				ПараметрыВыполнения.ДополнительныеПараметры.ВыбранныйПодписывающийИлиЗамещающий =
					ПодписывающиеМассив[0].Подписывающий;
			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Если в предмете задачи несколько организаций - нужно спросить, за какую подписываем.
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.Подписано Тогда
		
		Если Предмет = Неопределено Тогда 
			ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
			ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
				РеквизитыДействия.Источник,
				ТипыДокументов,
				Истина);
			Если ОсновныеПредметы.Количество() Тогда
				Предмет = ОсновныеПредметы[0];
			КонецЕсли;
		КонецЕсли;
		
		Если Предмет <> Неопределено Тогда
		
			Если ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПредметыСВыбраннымиОрганизациями") Тогда
				ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПредметыСВыбраннымиОрганизациями",
					ПараметрыВыполнения.ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями);
			КонецЕсли;
			Если Не ДанныеВыполнения.ДополнительныеПараметры.Свойство("ПредметыСВыбраннымиОрганизациями") Тогда
				ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПредметыСВыбраннымиОрганизациями",
					Новый Соответствие);
			КонецЕсли;
			Если Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПредметыСВыбраннымиОрганизациями") Тогда
				ПараметрыВыполнения.ДополнительныеПараметры.Вставить("ПредметыСВыбраннымиОрганизациями", 
					Новый Соответствие);
			КонецЕсли;
			
			ВыбраннаяОрганизация = ДанныеВыполнения.ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями[Предмет];
			ОрганизацииДокумента = Делопроизводство.ОрганизацииВСторонахДокумента(Предмет);
			Если ОрганизацииДокумента.Количество() > 1 Тогда
				
				Если Не ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда
					
					Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(РеквизитыЗадачиПроцесса.БизнесПроцесс);
					Участники = ДействияСервер.УчастникиДействия(Действие);
					СтрокиУчастника = Участники.НайтиСтроки(Новый Структура("Участник", РеквизитыЗадачиПроцесса.Исполнитель));
					Если СтрокиУчастника.Количество() И ЗначениеЗаполнено(СтрокиУчастника[0].Организация) Тогда
						// Если на предыдущем цикле уже выбирали организацию - не спрашиваем повторно
						ДанныеВыполнения.ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями[Предмет] =
							СтрокиУчастника[0].Организация;
						ПараметрыВыполнения.ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями[Предмет] =
							СтрокиУчастника[0].Организация;
					Иначе
						ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
						ДанныеВыполнения.ДополнительныеПараметры.Вставить("ПредметДляВыбораОрганизации",
							Предмет);
						ДанныеВыполнения.ДополнительныеПараметры.Вставить(
							"ИсполнительДляВыбораОрганизации", РеквизитыЗадачиПроцесса.Исполнитель);
						ДанныеВыполнения.ДополнительныеПараметры.Вставить(
							"ОрганизацииДляВыбораПодписания", ОрганизацииДокумента);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ОрганизацииДокумента.Количество() = 1 Тогда
				
				ДанныеВыполнения.ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями[Предмет] =
					ОрганизацииДокумента[0];
				ПараметрыВыполнения.ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями[Предмет] =
					ОрганизацииДокумента[0];
				
			ИначеЕсли ОрганизацииДокумента.Количество() = 0 Тогда
				
				Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Организация"); 
				ДанныеВыполнения.ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями[Предмет] = 
					Организация;
				ПараметрыВыполнения.ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями[Предмет] =
					Организация;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	// Для отклонения подписания нужно указать причину
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.НеПодписано
		И Не ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
		
		ДанныеВыполнения.Предупреждения.Добавить(НСтр("ru = 'Укажите причину отклонения документа'"));
		ДанныеВыполнения.ПоказатьПредупреждение = Истина;
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Требуется указать причину отклонения документа.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(РеквизитыДействия.Источник,, Истина);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет)
			Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда
			
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Предмет);
				РазблокироватьДанныеДляРедактирования(Предмет);
			Исключение	
				
				ПодробноОписание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				КтоБлокирует = ДействияСервер.БлокируетПредметИзОписанияОшибки(ПодробноОписание);
				
				ЗаписьЖурналаРегистрации("ПередИнтерактивнымВыполнениемДействияПодписаниеПодписать", УровеньЖурналаРегистрации.Ошибка, 
					Метаданные.Справочники.ДействияПодписания, , ПодробноОписание);
					
				СообщениеОбОшибке = СтрШаблон(
					НСтр("ru = 'Не удалось подписать документ ""%1"".
						|Возможно этот документ открыт вами или другим пользователем.
						|%2
						|
						|Необходимо закрыть карточку документа.'"),
					Строка(Предмет), КтоБлокирует);
				
				ДанныеВыполнения.Предупреждения.Добавить(СообщениеОбОшибке);
				ДанныеВыполнения.ПоказатьПредупреждение = Истина;
				
				Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
					Причина = СообщениеОбОшибке;
					ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
						Новый Структура("Задача, Причина", 
						ДействиеЗадачи, Причина));
				КонецЕсли;	
				
				ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
				
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработка перед выполнением действия "Обработать результат" процесса "Подписание".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияПодписаниеОбработатьРезультат(
	ДействиеЗадачи,
	ДанныеВыполнения, 
	ПараметрыВыполнения,
	РезультатДействия,
	РеквизитыДействия, 
	РеквизитыЗадачиПроцесса,
	КоличествоДействий)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно
		И Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ДанныеПроцесса") Тогда
		
//		Если ДанныеВыполнения.ДополнительныеПараметры.Свойство("ИзменитьПараметрыПроцесса")
//			И ДанныеВыполнения.ДополнительныеПараметры.ИзменитьПараметрыПроцесса Тогда
//			ВызватьИсключение НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
//		КонецЕсли;
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ИзменитьПараметрыПроцесса", Истина);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("БизнесПроцесс", РеквизитыЗадачиПроцесса.БизнесПроцесс);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ТочкаМаршрута", РеквизитыЗадачиПроцесса.ТочкаМаршрута);
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("РезультатВыполнения", РеквизитыДействия.РезультатДействияТекстом);
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка перед выполнением действия "Проверить" процесса "Исполнение".
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияИсполнениеПроверить(
	ДействиеЗадачи,
	ДанныеВыполнения, ПараметрыВыполнения, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	Если Не (РеквизитыЗадачиПроцесса.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить
		И РезультатДействия = Справочники.РезультатыДействийЗадач.ВозвращеноНаДоработку
		И Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РезультатИзмененияПараметровПроцесса")) Тогда
		Возврат;
	КонецЕсли;
	
//	Если ДанныеВыполнения.ДополнительныеПараметры.Свойство("ИзменитьПараметрыПроцесса")
//		И ДанныеВыполнения.ДополнительныеПараметры.ИзменитьПараметрыПроцесса Тогда
//		ВызватьИсключение НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
//	КонецЕсли;
	
	ДанныеВыполнения.ДополнительныеПараметры.Вставить("ИзменитьПараметрыПроцесса", Истина);
	ДанныеВыполнения.ДополнительныеПараметры.Вставить("БизнесПроцесс", РеквизитыЗадачиПроцесса.БизнесПроцесс);
	ДанныеВыполнения.ДополнительныеПараметры.Вставить("ТочкаМаршрута", РеквизитыЗадачиПроцесса.ТочкаМаршрута);
	ДанныеВыполнения.ДополнительныеПараметры.Вставить("РезультатВыполнения", РеквизитыДействия.РезультатДействияТекстом);
	
	Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
		Причина = НСтр("ru = 'Массовое выполнение задач с изменением параметров процесса не поддерживается.'");
		ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
			Новый Структура("Задача, Причина", 
			ДействиеЗадачи, Причина));
	КонецЕсли;	
	
	ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
	
КонецПроцедуры

// Обрабатывает запрет выполнения перед интерактивным выполнением действия.
//
// Параметры:
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПриложенияЗадач - Соответствие - Данные приложений задач.
//   * Ключ - ДокументСсылка.ДействиеЗадачи.
//   * Значение - Массив из Структура - См. РаботаСЗадачами.ДанныеПриложенияЗадачи().
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияЗапретВыполнения(
	ДействиеЗадачи, ДанныеВыполнения, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	Если Не ВозможенЗапретВыполнения(РеквизитыЗадачиПроцесса.ТочкаМаршрута, РезультатДействия) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиУсловия = БизнесПроцессыИЗадачиСервер.ПроверитьУсловияЗапретаВыполнения(
		РеквизитыДействия.Источник);
	Если РезультатПроверкиУсловия.ЗапретВыполнения Тогда
		
		ДанныеВыполнения.ЗапретВыполнения = Истина;
		
		Если ДанныеВыполнения.ПричинаЗапретаВыполнения.Количество() <> 0 Тогда
			ДанныеВыполнения.ПричинаЗапретаВыполнения.Добавить(Символы.ПС);
		КонецЕсли;
		
		ДанныеВыполнения.ПричинаЗапретаВыполнения.Добавить(
			РезультатПроверкиУсловия.ФорматированныйТекстПредупреждения);
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Есть запрет выполнения.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает запрет выполнения действия перед интерактивным выполнением действия.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи -
//  ДанныеВыполнения - См. РаботаСЗадачамиКлиентСервер.НовыйДанныеВыполненияДействийЗадач
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыЗадачиПроцесса - Структура -
//
Процедура ПередИнтерактивнымВыполнениемДействияЗапретВыполненияДействия(
	ДействиеЗадачи, ДанныеВыполнения, РезультатДействия, РеквизитыЗадачиПроцесса)
	
	Если Не ВозможенЗапретВыполнения(РеквизитыЗадачиПроцесса.ТочкаМаршрута, РезультатДействия) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиУсловия = ДействияСервер.ПроверитьУсловияПроверкиВыполнения(
		РеквизитыЗадачиПроцесса, ДействиеЗадачи);
	Если РезультатПроверкиУсловия.ЗапретВыполнения Тогда
		
		ДанныеВыполнения.ЗапретВыполнения = Истина;
		
		Если ДанныеВыполнения.ПричинаЗапретаВыполнения.Количество() <> 0 Тогда
			ДанныеВыполнения.ПричинаЗапретаВыполнения.Добавить(Символы.ПС);
		КонецЕсли;
		
		ДанныеВыполнения.ПричинаЗапретаВыполнения.Добавить(
			РезультатПроверкиУсловия.ФорматированныйТекстПредупреждения);
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Есть запрет выполнения.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
КонецПроцедуры  

// Обрабатывает запрет выполнения действия перед интерактивным выполнением действия.
//
// Параметры:
// 	ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//  ДанныеВыполнения - см. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияИсполнениеОтветственныйИсполнить(
	ДействиеЗадачи, ДанныеВыполнения, РеквизитыЗадачиПроцесса)
	
	Если РеквизитыЗадачиПроцесса.ТочкаМаршрута <> БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если ВсеЗадачиИсполненияВыполнены(РеквизитыЗадачиПроцесса.БизнесПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыполнения.Предупреждения.Добавить(НСтр("ru = 'Задача не может быть завершена, пока не выполнены все задачи соиcполнителей'"));
	ДанныеВыполнения.ПоказатьПредупреждение = Истина;
	
	Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
		Причина = НСтр("ru = 'Задача не может быть завершена, пока не выполнены все задачи соиcполнителей'");
		ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
			Новый Структура("Задача, Причина", 
			ДействиеЗадачи, Причина));
	КонецЕсли;	
	
	ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
	
КонецПроцедуры  

// Определяет предметы для подписания электронной подписью.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка.Подписание, БизнесПроцессСсылка.Утверждение.
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя.
//
Функция ПредметыДляПодписанияЭП(БизнесПроцесс, ЗадачаПроцесса)
	
	ПредметыДляПодписания = Новый Массив;
	
	Если Не ЗначениеЗаполнено(БизнесПроцесс) Тогда
		Возврат ПредметыДляПодписания;
	КонецЕсли;
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Подписание") Тогда
		
		СпособПодписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			БизнесПроцесс,
			"СпособПодписания");
				
		ПодписыватьРезультатВыполненияЭП =
			СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.УЭП;
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		ПодписыватьРезультатВыполненияЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			БизнесПроцесс,
			"ПодписыватьЭП");
			
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестны предметы для подписания процесса %1 (%2).'"),
			БизнесПроцесс,
			ТипЗнч(БизнесПроцесс));
		
	КонецЕсли;
	
	Если Не ПодписыватьРезультатВыполненияЭП Тогда
		Возврат ПредметыДляПодписания;
	КонецЕсли;
			
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		ЗадачаПроцесса,,
		Истина);
	
	Для Каждого Предмет из ОсновныеПредметы Цикл
		
		ПредметыДляПодписания.Добавить(Предмет);
		
	КонецЦикла;
	
	Возврат ПредметыДляПодписания;
	
КонецФункции

// Обработчик обновления кнопок вариантов выполнения вопроса.
//
// Параметры:
//  ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач.
//  РезультатыПоВариантам - Соответствие.
//   * Ключ - Число - Вариант выполнения.
//   * Значение - СправочникСсылка.РезультатыДействийЗадач - Результат варианта.
//  РеквизитыИсточникаДействия - Структура.
//  ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
//
Процедура ПриОбновленииКнопокВариантовВыполненияВопроса(ИсточникДействияЗадачи,
	РезультатыПоВариантам, РеквизитыИсточникаДействия, ДанныеВариантовВыполненияЗадачи)
	
	Если РеквизитыИсточникаДействия.ТочкаМаршрута <> БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыИсточникаДействия.БизнесПроцесс,
		"ВидВопроса");
	
	Если РеквизитыБизнесПроцесса.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
			ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты,
			Справочники.РезультатыДействийЗадач.ЗакрытВопрос);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
			ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты,
			Справочники.РезультатыДействийЗадач.ЗакрытЗапрос);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления кнопок вариантов выполнения задачи трекера, в корне которой - действие согласования.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//  ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач.
//  РеквизитыИсточникаДействия - Структура.
//  РеквизитыПроцесса - Структура.
//  ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
//
Процедура ПриОбновленииКнопокВариантовВыполненияИсполненияПодСогласованием(
	ДействиеЗадачи,
	ИсточникДействияЗадачи,
	РеквизитыИсточникаДействия,
	РеквизитыПроцесса,
	ДанныеВариантовВыполненияЗадачи)
	
	Действие = Неопределено;
	СогласованиеВРежимеЗамечаний = ЭтоЗадачаСогласованияВРежимеЗамечаний(ДействиеЗадачи, Действие);
	Если Не СогласованиеВРежимеЗамечаний Тогда
		Возврат;
	КонецЕсли;	
	
	СостояниеУчастникаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДействиеЗадачи, "СостояниеУчастникаЗадачи");
		
	ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
		СостояниеУчастникаЗадачи);
		
	Выполнено = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(
		ВидСостоянияУчастниковЗадач);
		
	ОжидаетПроверку = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидающееПроверкиДействие(
		ВидСостоянияУчастниковЗадач);
				
	Если Выполнено Или ОжидаетПроверку Тогда
		Возврат;
	КонецЕсли;		
	
	ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты.Очистить();
	
	ДанныеДополнительнойКомандыВнестиЗамечания =
		РаботаСЗадачамиКлиентСервер.ДанныеДополнительнойКомандыВнестиЗамечания();
	ДанныеВариантовВыполненияЗадачи.ДанныеДополнительныхКоманд.Добавить(
		ДанныеДополнительнойКомандыВнестиЗамечания);
	
КонецПроцедуры

// Обработчик обновления кнопок вариантов выполнения подписания.
//
// Параметры:
//  ДействиеЗадачи  ДокументСсылка.ДействиеЗадачи.
//  ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач.
//  РеквизитыИсточникаДействия - Структура.
//  РеквизитыПроцесса - Структура.
//  РезультатыПоВариантам - Соответствие.
//   * Ключ - Число - Вариант выполнения.
//   * Значение - СправочникСсылка.РезультатыДействийЗадач - Результат варианта.
//  ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
//
Процедура ПриОбновленииКнопокВариантовВыполненияПодписания(
	ДействиеЗадачи,
	ИсточникДействияЗадачи,
	РеквизитыИсточникаДействия,
	РеквизитыПроцесса,
	РезультатыПоВариантам,
	ДанныеВариантовВыполненияЗадачи)
	
	ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;
	
	Если РеквизитыИсточникаДействия.ТочкаМаршрута = ТочкиМаршрута.Подписать
		Или РеквизитыИсточникаДействия.ТочкаМаршрута = ТочкиМаршрута.ОбеспечитьПодписание Тогда
		
		ПредметыДляПодписания = ПредметыДляПодписанияЭП(
			РеквизитыИсточникаДействия.БизнесПроцесс,
			ИсточникДействияЗадачи);
		
		Если ПредметыДляПодписания.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВариантовВыполненияЗадачи.РезультатыСЭП.Добавить(Справочники.РезультатыДействийЗадач.Подписано);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления кнопок вариантов выполнения приглашения.
//
// Параметры:
//  ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач.
//  РезультатыПоВариантам - Соответствие.
//   * Ключ - Число - Вариант выполнения.
//   * Значение - СправочникСсылка.РезультатыДействийЗадач - Результат варианта.
//  РеквизитыИсточникаДействия - Структура.
//  ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
//
Процедура ПриОбновленииКнопокВариантовВыполненияПриглашения(ИсточникДействияЗадачи,
	РезультатыПоВариантам, РеквизитыИсточникаДействия, ДанныеВариантовВыполненияЗадачи)
	
	Если РеквизитыИсточникаДействия.ТочкаМаршрута <> БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыИсточникаДействия.БизнесПроцесс,
		"РезультатыОзнакомлений, РезультатыПриглашения");
	
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
	
	РезультатыПриглашения = РеквизитыБизнесПроцесса.РезультатыПриглашения.Выгрузить();
	РезультатыПриглашения.Сортировать("НомерСтроки Возр");
	
	// номер итерации
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		ИсточникДействияЗадачи,
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат приглашения
	РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками;
	СтрокиИтерации = РезультатыПриглашения.НайтиСтроки(
		Новый Структура("НомерИтерации", 
		НомерИтерацииЗадачи));
	
	ЕстьПринятые = Ложь;
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда 
			ЕстьПринятые = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьПринятые Тогда 
		РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками;
	Иначе
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
				Если Строка.ЯвкаОбязательна Тогда 
					РезультатПриглашенияЗадачи = 
						Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками;
					Прервать;
				Иначе
					РезультатПриглашенияЗадачи = 
						Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда 
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
			ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты,
			Справочники.РезультатыДействийЗадач.ОтправленоПовторно);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
			ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты,
			Справочники.РезультатыДействийЗадач.ОтмененоПриглашение);
		
	ИначеЕсли РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
			ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты,
			Справочники.РезультатыДействийЗадач.ОтмененоПриглашение);
		
	ИначеЕсли РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками
		Или РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
			ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты,
			Справочники.РезультатыДействийЗадач.ПодтвержденоПриглашение);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления кнопок вариантов выполнения рассмотрения.
//
// Параметры:
//  ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач.
//  РезультатыПоВариантам - Соответствие.
//   * Ключ - Число - Вариант выполнения.
//   * Значение - СправочникСсылка.РезультатыДействийЗадач - Результат варианта.
//  РеквизитыИсточникаДействия - Структура.
//  ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
//
Процедура ПриОбновленииКнопокВариантовВыполненияРассмотрения(ИсточникДействияЗадачи,
	РезультатыПоВариантам, РеквизитыИсточникаДействия, ДанныеВариантовВыполненияЗадачи)
	
	Если РеквизитыИсточникаДействия.ТочкаМаршрута <> БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть
		И РеквизитыИсточникаДействия.ТочкаМаршрута <> БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты,
		Справочники.РезультатыДействийЗадач.НаправленоНаОзнакомление);
	
	Если РеквизитыИсточникаДействия.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		
		РезолюцииДляПодписания = РезолюцииДляПодписанияЭП(
			ИсточникДействияЗадачи,
			Справочники.Сотрудники.ПустаяСсылка(),
			"",
			ТекущаяДатаСеанса());
		
		Если РезолюцииДляПодписания.Количество() > 0 Тогда
			ДанныеВариантовВыполненияЗадачи.РезультатыСЭП.Добавить(Справочники.РезультатыДействийЗадач.Рассмотрено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления кнопок вариантов выполнения согласования.
//
// Параметры:
//  ДействиеЗадачи  ДокументСсылка.ДействиеЗадачи.
//  ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач.
//  РеквизитыИсточникаДействия - Структура.
//  РеквизитыПроцесса - Структура.
//  РезультатыПоВариантам - Соответствие.
//   * Ключ - Число - Вариант выполнения.
//   * Значение - СправочникСсылка.РезультатыДействийЗадач - Результат варианта.
//  ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
//
Процедура ПриОбновленииКнопокВариантовВыполненияСогласования(
	ДействиеЗадачи,
	ИсточникДействияЗадачи,
	РеквизитыИсточникаДействия,
	РеквизитыПроцесса,
	РезультатыПоВариантам,
	ДанныеВариантовВыполненияЗадачи)
	
	Если РеквизитыИсточникаДействия.ТочкаМаршрута <> БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать
		И РеквизитыИсточникаДействия.ТочкаМаршрута <> БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		Возврат;
	КонецЕсли;
	
	СогласованиеВРежимеЗамечаний = Ложь;
	
	Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(РеквизитыИсточникаДействия.БизнесПроцесс);
	Если ЗначениеЗаполнено(Действие) И ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования")
		И Не РеквизитыИсточникаДействия.Выполнена Тогда
		
		СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Действие,
			"СогласованиеВРежимеЗамечаний");
		
	КонецЕсли;
	
	Если СогласованиеВРежимеЗамечаний И Не РеквизитыПроцесса.Завершен Тогда
		
		ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты.Очистить();
		
		Если РеквизитыИсточникаДействия.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
			ДанныеДополнительнойКомандыВнестиЗамечания =
				РаботаСЗадачамиКлиентСервер.ДанныеДополнительнойКомандыВнестиЗамечания();
			ДанныеВариантовВыполненияЗадачи.ДанныеДополнительныхКоманд.Добавить(
				ДанныеДополнительнойКомандыВнестиЗамечания);
		ИначеЕсли РеквизитыИсточникаДействия.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
			ДанныеДополнительнойКомандыОбработатьЗамечания =
				РаботаСЗадачамиКлиентСервер.ДанныеДополнительнойКомандыОбработатьЗамечания();
			ДанныеВариантовВыполненияЗадачи.ДанныеДополнительныхКоманд.Добавить(
				ДанныеДополнительнойКомандыОбработатьЗамечания);
		КонецЕсли;
	
	ИначеЕсли РеквизитыИсточникаДействия.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		
		ИспользоватьСогласованиеСЗамечаниями = ДействияСерверПовтИсп.ИспользоватьСогласованиеСЗамечаниями();
		Если Не ИспользоватьСогласованиеСЗамечаниями Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
				ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты,
				Справочники.РезультатыДействийЗадач.СогласованоСЗамечаниями);
		КонецЕсли;
		
		ПредметыДляВизСЭП = ПредметыДляВизированияЭП(РеквизитыИсточникаДействия.БизнесПроцесс, ИсточникДействияЗадачи);
		Если ПредметыДляВизСЭП.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВариантовВыполненияЗадачи.РезультатыСЭП.Добавить(Справочники.РезультатыДействийЗадач.Согласовано);
		Если ИспользоватьСогласованиеСЗамечаниями Тогда
			ДанныеВариантовВыполненияЗадачи.РезультатыСЭП.Добавить(
				Справочники.РезультатыДействийЗадач.СогласованоСЗамечаниями);
		КонецЕсли;
		ДанныеВариантовВыполненияЗадачи.РезультатыСЭП.Добавить(Справочники.РезультатыДействийЗадач.НеСогласовано);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления кнопок вариантов выполнения согласования.
//
// Параметры:
//  ДействиеЗадачи  ДокументСсылка.ДействиеЗадачи.
//  ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач.
//  РеквизитыИсточникаДействия - Структура.
//  РеквизитыПроцесса - Структура.
//  РезультатыПоВариантам - Соответствие.
//   * Ключ - Число - Вариант выполнения.
//   * Значение - СправочникСсылка.РезультатыДействийЗадач - Результат варианта.
//   ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
//
Процедура ПриОбновленииКнопокВариантовВыполненияУтверждения(
	ДействиеЗадачи,
	ИсточникДействияЗадачи,
	РеквизитыИсточникаДействия,
	РеквизитыПроцесса,
	РезультатыПоВариантам,
	ДанныеВариантовВыполненияЗадачи)
	
	Если РеквизитыИсточникаДействия.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		
		ПредметыДляПодписания = ПредметыДляПодписанияЭП(
			РеквизитыИсточникаДействия.БизнесПроцесс,
			ИсточникДействияЗадачи);
		
		Если ПредметыДляПодписания.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
			
		ДанныеВариантовВыполненияЗадачи.РезультатыСЭП.Добавить(Справочники.РезультатыДействийЗадач.Утверждено);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления кнопки выполнения ознакомления.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - текущее действие задачи.
//                  - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//   РезультатыПоВариантам - Соответствие из КлючИЗначение:
//     * Ключ - Число - вариант выполнения.
//     * Значение - СправочникСсылка.РезультатыДействийЗадач - результат варианта.
//   ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач.
//   ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
//
Процедура ПриОбновленииКнопокВариантовВыполненияОзнакомления(ДействиеЗадачи,
		РезультатыПоВариантам, ИсточникДействияЗадачи, ДанныеВариантовВыполненияЗадачи)
	
	Если ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		ВидДействия = ДействиеЗадачи.ВидДействия;
	Иначе
		ВидДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "ВидДействия");
	КонецЕсли;
	Если ВидДействия <> Справочники.ВидыДействийЗадач.Ознакомиться
			Или Не ТипЗнч(ИсточникДействияЗадачи) = Тип("СправочникСсылка.ДействияОзнакомления")
			Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДействияЗадачи, "ПодписыватьУЭП") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВариантовВыполненияЗадачи.РезультатыСЭП.Добавить(Справочники.РезультатыДействийЗадач.Ознакомился);
	
КонецПроцедуры

// Определяет резолюции для подписания электронной подписью.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя.
//  АвторРезолюции - СправочникСсылка.Пользователи.
//  ТекстРезолюции - Строка.
//  ДатаФормирования - Дата.
//
Функция РезолюцииДляПодписанияЭП(ЗадачаПроцесса, АвторРезолюции, ТекстРезолюции, ДатаФормирования)
	
	РезолюцииДляПодписания = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
		Возврат РезолюцииДляПодписания;
	КонецЕсли;
	
	ДействиеЗадачиПроцесса = РаботаСПроцессамиПоДействиям.ДействиеЗадачиПроцесса(ЗадачаПроцесса);
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачиПроцесса) Тогда
		Возврат РезолюцииДляПодписания;
	КонецЕсли;
	
	Если ТипЗнч(ДействиеЗадачиПроцесса) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		
		ПодписыватьРезультатВыполненияЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДействиеЗадачиПроцесса,
			"ПодписыватьРезолюцииЭП")
			
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестны резолюции для подписания действия %1 (%2).'"),
			ДействиеЗадачиПроцесса,
			ТипЗнч(ДействиеЗадачиПроцесса));
		
	КонецЕсли;
	
	Если Не ПодписыватьРезультатВыполненияЭП Тогда
		Возврат РезолюцииДляПодписания;
	КонецЕсли;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		ЗадачаПроцесса,,
		Истина);
	
	Для Каждого Предмет из ОсновныеПредметы Цикл
		
		Если ТипЗнч(Предмет) <> Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураРезолюцииДляПодписания = РаботаСРезолюциями.ПолучитьСтруктуруКлючевыхРеквизитовРезолюции();
		СтруктураРезолюцииДляПодписания.Документ = Предмет;
		СтруктураРезолюцииДляПодписания.ДатаРезолюции = ДатаФормирования;
		СтруктураРезолюцииДляПодписания.АвторРезолюции = АвторРезолюции;
		СтруктураРезолюцииДляПодписания.ВнесРезолюцию = АвторРезолюции;
		СтруктураРезолюцииДляПодписания.ТекстРезолюции = ТекстРезолюции;
		
		РезолюцииДляПодписания.Добавить(СтруктураРезолюцииДляПодписания);
		
	КонецЦикла;
	
	Возврат РезолюцииДляПодписания;
	
КонецФункции



// Определяет, является ли указанная ссылка источником трудозатрат.
//
// Параметры:
//  ИсточникТрудозатрат - ЛюбаяСсылка - Источник трудозатрат.
// 
// Возвращаемое значение:
//  Булево - Это источник трудозатрат задач.
//
Функция ЭтоИсточникТрудозатрат(ИсточникТрудозатрат)
	
	Возврат ТипЗнч(ИсточникТрудозатрат) = Тип("ДокументСсылка.ДействиеЗадачи")
		Или ТипЗнч(ИсточникТрудозатрат) = Тип("ДокументСсылка.Задача");
	
КонецФункции

Процедура ЗаписатьХодОбработкиВыполнение(ЗадачаТрекера)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КорневаяЗадача = РаботаСЗадачами.КорневаяЗадача(ЗадачаТрекера);
	ИсточникЗадачи = РаботаСЗадачами.ИсточникЗадачи(КорневаяЗадача);
	
	Если ЗначениеЗаполнено(ИсточникЗадачи) И ОбщегоНазначения.ЭтоБизнесПроцесс(ИсточникЗадачи.Метаданные())  Тогда

		Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
			ИсточникЗадачи);
	
		Если ЗначениеЗаполнено(Действие) Тогда

			ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
				
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ТекущаяОбработка;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.Выполнение;
			Событие.Поручение = ЗадачаТрекера;
			Событие.Действие = Действие;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
			
		КонецЕсли;
				
	КонецЕсли;		
	
КонецПРоцедуры	

Функция ВсеЗадачиИсполненияВыполнены(БизнесПроцесс)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
	|	И (НЕ ЗадачаИсполнителя.Выполнена)";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Пустой();
	
КонецФункции

// Определяет файлы процесса.
// 
// Параметры:
//  Процесс - БизнесПроцессыСсылка.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Файлы - Файлы процесса.
//
Функция ФайлыПроцесса(Процесс)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ Файлы.ПометкаУдаления");
	Запрос.УстановитьПараметр("ВладелецФайла", Процесс);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Файл");
	
КонецФункции

// Обновляет действие задачи по действию ознакомления.
// Транзакция должна быть активна перед вызовом процедуры.
//
// Параметры:
//  ИсточникЗадачи - СправочникСсылка.ДействияОзнакомления.
//  ИдентификаторВИсточнике - УникальныйИдентификатор.
//  Задача - ДокументСсылка.Задача.
//
Процедура ОбновитьДействияЗадачиПоДействиюОзнакомления(ДействиеОзнакомления, ИдентификаторВИсточнике, Задача)

	Если Не ТранзакцияАктивна() Тогда
		ВызватьИсключение НСтр("ru = 'Процедуру ОбновитьДействияЗадачиПоДействиюОзнакомления необходимо вызывать в транзакции.'");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		РеквизитыДействиеОзнакомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеОзнакомления,
			"ПометкаУдаления, ПомещеноВИсторию");
		ПометкаУдаленияДействия = РеквизитыДействиеОзнакомления.ПометкаУдаления;
		ПомещеноВИсториюДействия = РеквизитыДействиеОзнакомления.ПомещеноВИсторию;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УчастникиОзнакомлений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Действие", ДействиеОзнакомления);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторУчастника", ИдентификаторВИсточнике);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДействиеЗадачи.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
			|ГДЕ
			|	ДействиеЗадачи.ИдентификаторВИсточнике = &ИдентификаторВИсточнике
			|	И ДействиеЗадачи.Источник = &Источник");
		
		Запрос.УстановитьПараметр("Источник", ДействиеОзнакомления);
		Запрос.УстановитьПараметр("ИдентификаторВИсточнике", ИдентификаторВИсточнике);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДействиеЗадачи = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
		
		СсылкаНового = Документы.ДействиеЗадачи.ПолучитьСсылку(ИдентификаторВИсточнике);
		
		Если ДействиеЗадачи = Неопределено Тогда
	
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНового);
			Блокировка.Заблокировать();
			
			ДействиеЗадачиОбъект = Документы.ДействиеЗадачи.СоздатьДокумент();
			ДействиеЗадачиОбъект.Дата = ТекущаяДатаСеанса();
			ДействиеЗадачиОбъект.УстановитьСсылкуНового(СсылкаНового);
	
		Иначе
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДействиеЗадачи);
			Блокировка.Заблокировать();
			
			ДействиеЗадачиОбъект = ДействиеЗадачи.ПолучитьОбъект();
			
		КонецЕсли;
		
		СрокЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Срок");
	
		СтарыеДанные = ОбщегоНазначенияДокументооборот.ДанныеОбъекта(ДействиеЗадачиОбъект);
		
		ДействиеЗадачиОбъект.ВидДействия = Справочники.ВидыДействийЗадач.Ознакомиться;
		ДействиеЗадачиОбъект.ВидУчастника = Справочники.ВидыУчастниковЗадач.Ознакомляемый;
		ДействиеЗадачиОбъект.Задача = Задача;
		ДействиеЗадачиОбъект.Источник = ДействиеОзнакомления;
		ДействиеЗадачиОбъект.ИдентификаторВИсточнике = ИдентификаторВИсточнике;
		
		ДанныеОзнакомления = РегистрыСведений.УчастникиОзнакомлений.ДанныеОзнакомления(
			ДействиеОзнакомления,
			ИдентификаторВИсточнике);
			
		Если ДанныеОзнакомления <> Неопределено Тогда
			
			Если СрокЗадачи <> ДанныеОзнакомления.Срок И ЗначениеЗаполнено(ДанныеОзнакомления.Срок) Тогда
				ДействиеЗадачиОбъект.ОсобыйСрок = ДанныеОзнакомления.Срок;
				ДействиеЗадачиОбъект.ЕстьОсобыйСрок = Истина;
			КонецЕсли;	
			
			ДействиеЗадачиОбъект.ДатаНачала = ДанныеОзнакомления.ДатаНачала;
			ДействиеЗадачиОбъект.ДатаВыполнения = ДанныеОзнакомления.ДатаЗавершения;
			ДействиеЗадачиОбъект.РезультатДействия =
				?(ДанныеОзнакомления.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился,
					Справочники.РезультатыДействийЗадач.Ознакомился,
					Справочники.РезультатыДействийЗадач.ПустаяСсылка());
			ДействиеЗадачиОбъект.РезультатДействияТекстом = ДанныеОзнакомления.РезультатОзнакомленияТекстом;
			ДействиеЗадачиОбъект.ФактическийИсполнитель = ДанныеОзнакомления.ФактическийИсполнитель;
			Если ЗначениеЗаполнено(ДанныеОзнакомления.ФактическийИсполнитель.План) Тогда
				ДействиеЗадачиОбъект.Исполнитель = ДанныеОзнакомления.ФактическийИсполнитель.План;
				ДействиеЗадачиОбъект.КтоОтметил = ДанныеОзнакомления.ФактическийИсполнитель.Отметил;
			Иначе
				ДействиеЗадачиОбъект.Исполнитель = ДанныеОзнакомления.Участник;
			КонецЕсли;
			
			ДействиеЗадачиОбъект.УстановитьОписание(ДанныеОзнакомления.Описание);
			
			Если ДанныеОзнакомления.Состояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении Тогда
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Новая;
				
			ИначеЕсли ДанныеОзнакомления.Состояние = Перечисления.СостоянияОзнакомления.ВРаботе Тогда
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.ВРаботе;
				
			ИначеЕсли ДанныеОзнакомления.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился Тогда
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Выполнена;
				
			ИначеЕсли ДанныеОзнакомления.Состояние = Перечисления.СостоянияОзнакомления.Отменено Тогда
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Отменена;
	
			ИначеЕсли ДанныеОзнакомления.Состояние = Перечисления.СостоянияОзнакомления.НаПаузе Тогда
				
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Отложена;
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестное состояние ознакомления %1.'"),
					ДанныеОзнакомления.Состояние);
				
			КонецЕсли; 
				
			Если ПомещеноВИсториюДействия Тогда
				ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Отменена;
			КонецЕсли;	
	
			ДействиеЗадачиОбъект.СостояниеУчастникаЗадачи = РаботаСЗадачами.СостояниеУчастникаЗадачи(
				ВидСостоянияУчастниковЗадач,
				Справочники.ВидыЗадач.Ознакомление,
				Справочники.ВидыУчастниковЗадач.Ознакомляемый,
				ДействиеЗадачиОбъект.РезультатДействия);
			
		Иначе
			
			ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
				ДействиеЗадачиОбъект.СостояниеУчастникаЗадачи);
			ОжидаетВыполнения = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастниковЗадач);
			
			Если ОжидаетВыполнения 
				Или ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Отложена Тогда
				ДействиеЗадачиОбъект.СостояниеУчастникаЗадачи = Справочники.СостоянияУчастниковЗадач.Отменена;
			КонецЕсли;
			
		КонецЕсли;
		
		ДействиеЗадачиОбъект.ПометкаУдаления = ПометкаУдаленияДействия;
		
		НовыеДанные = ОбщегоНазначенияДокументооборот.ДанныеОбъекта(ДействиеЗадачиОбъект);
		
		ИзмененыДанные = ДействиеЗадачиОбъект.ЭтоНовый()
			Или Не ОбщегоНазначенияДокументооборот.ДанныеСовпадают(СтарыеДанные, НовыеДанные);
		
		Если ИзмененыДанные Тогда
				
			ДействиеЗадачиОбъект.ДополнительныеСвойства.Вставить("ОбновлениеПоИсточнику", Истина);
			Если Не ДействиеЗадачиОбъект.ПометкаУдаления Тогда
				ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ИначеЕсли ДействиеЗадачиОбъект.ПометкаУдаления И ДействиеЗадачиОбъект.Проведен Тогда
				ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ИначеЕсли ДействиеЗадачиОбъект.ПометкаУдаления И Не ДействиеЗадачиОбъект.Проведен Тогда
				ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
				
		КонецЕсли;
		
		Если ПометкаУдаленияДействия Тогда // удалим запись РС
			РегистрыСведений.УчастникиОзнакомлений.УдалитьЗапись(
				ДействиеОзнакомления,
				ИдентификаторВИсточнике);
		КонецЕсли;	
		
		Если Не ЕстьПраваНаЗадачуУчастникаМассовогоОзнакомления(ДействиеЗадачиОбъект.Ссылка) Тогда
			ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(ДействиеЗадачиОбъект.Задача);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обрабатывает запрет выполнения перед интерактивным выполнением действия.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи -
//  ДанныеВыполнения - См. РаботаСЗадачамиКлиентСервер.НовыйДанныеВыполненияДействийЗадач
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  РеквизитыДействия - Структура.
//  РеквизитыЗадачиПроцесса - Структура.
//
Процедура ПередИнтерактивнымВыполнениемДействияЗапретВыполненияДействияОзнакомления(
	ДействиеЗадачи, ДанныеВыполнения, РезультатДействия, РеквизитыДействия, РеквизитыЗадачиПроцесса)
	
	ДействиеОзнакомления = РеквизитыДействия.Источник;
	
	РезультатПроверкиУсловия = ДействияСервер.ПроверитьУсловияПроверкиВыполненияПоДействию(
		ДействиеОзнакомления, ДействиеЗадачи);
		
	Если РезультатПроверкиУсловия.ЗапретВыполнения Тогда
		
		ДанныеВыполнения.ЗапретВыполнения = Истина;
		
		Если ДанныеВыполнения.ПричинаЗапретаВыполнения.Количество() <> 0 Тогда
			ДанныеВыполнения.ПричинаЗапретаВыполнения.Добавить(Символы.ПС);
		КонецЕсли;
		
		ДанныеВыполнения.ПричинаЗапретаВыполнения.Добавить(
			РезультатПроверкиУсловия.ФорматированныйТекстПредупреждения);
		
		Если ДанныеВыполнения.ЧислоЗадач > 1 Тогда
			Причина = НСтр("ru = 'Есть запрет выполнения.'");
			ДанныеВыполнения.ЗадачиНельзяВыполнить.Добавить(
				Новый Структура("Задача, Причина", 
				ДействиеЗадачи, Причина));
		КонецЕсли;	
		
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Есть права на задачу участника массового ознакомления.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Булево - Есть права на задачу участника массового ознакомления.
// 
Функция ЕстьПраваНаЗадачуУчастникаМассовогоОзнакомления(ДействиеЗадачи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи.Задача КАК Задача
		|ИЗ
		|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|		ПО (ВсеИсполнителиДействийЗадач.ДействиеЗадачи.Задача = ДескрипторыДляОбъектов.Объект
		|		И ДескрипторыДляОбъектов.Дескриптор.КонтейнерСотрудников = ВсеИсполнителиДействийЗадач.Исполнитель)
		|ГДЕ
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи = &ДействиеЗадачи
		|	И ДескрипторыДляОбъектов.Дескриптор ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("ДействиеЗадачи", ДействиеЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьПраваНаЗадачуУчастникаМассовогоОзнакомления = РезультатЗапроса.Пустой();
	
	Возврат ЕстьПраваНаЗадачуУчастникаМассовогоОзнакомления;
	
КонецФункции

// Формирует данные заполнения действия по задаче процесса.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  БизнесПроцесс - БизнесПроцессСсылка
//  ДанныеВидаЗадачи - см. Справочники.ВидыЗадач.ДанныеВидаЗадачи
// 
// Возвращаемое значение:
//  См. НовыйДанныеЗаполненияДействия
// 
Функция ДанныеЗаполненияДействияПоЗадачеПроцесса(ЗадачаПроцесса, БизнесПроцесс, ДанныеВидаЗадачи)
	
	ДанныеЗаполненияДействияПоЗадачеПроцесса = Неопределено;
	
	ДанныеЗаполненияДействийПоПроцессу = ДанныеЗаполненияДействийПоПроцессу(
		БизнесПроцесс,
		ДанныеВидаЗадачи);
	
	Для Каждого ДанныеЗаполненияДействияПоПроцессу Из ДанныеЗаполненияДействийПоПроцессу Цикл
		
		Если ДанныеЗаполненияДействияПоПроцессу.ЗадачаПроцесса = ЗадачаПроцесса Тогда
			ДанныеЗаполненияДействияПоЗадачеПроцесса = ДанныеЗаполненияДействияПоПроцессу;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеЗаполненияДействияПоЗадачеПроцесса;
	
КонецФункции

// Формирует данные заполнения действия по процессу.
// 
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка
//  ДанныеВидаЗадачи - см. Справочники.ВидыЗадач.ДанныеВидаЗадачи
// 
// Возвращаемое значение:
//  Массив из см. НовыйДанныеЗаполненияДействия
// 
Функция ДанныеЗаполненияДействийПоПроцессу(БизнесПроцесс, ДанныеВидаЗадачи)
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		ДанныеЗаполненияДействий = ДанныеЗаполненияДействийПоИсполнению(
			БизнесПроцесс,
			ДанныеВидаЗадачи);
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		
		ДанныеЗаполненияДействий = ДанныеЗаполненияДействийПоОзнакомлению(
			БизнесПроцесс,
			ДанныеВидаЗадачи);
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Подписание") Тогда
		
		ДанныеЗаполненияДействий = ДанныеЗаполненияДействийПоПодписанию(
			БизнесПроцесс,
			ДанныеВидаЗадачи);
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		ДанныеЗаполненияДействий = ДанныеЗаполненияДействийПоПриглашению(
			БизнесПроцесс,
			ДанныеВидаЗадачи);
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		ДанныеЗаполненияДействий = ДанныеЗаполненияДействийПоРассмотрению(
			БизнесПроцесс,
			ДанныеВидаЗадачи);
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		ДанныеЗаполненияДействий = ДанныеЗаполненияДействийПоРегистрации(
			БизнесПроцесс,
			ДанныеВидаЗадачи);
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		
		ДанныеЗаполненияДействий = ДанныеЗаполненияДействийПоВопросу(
			БизнесПроцесс,
			ДанныеВидаЗадачи);
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		ДанныеЗаполненияДействий = ДанныеЗаполненияДействийПоСогласованию(
			БизнесПроцесс,
			ДанныеВидаЗадачи);
		
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		ДанныеЗаполненияДействий = ДанныеЗаполненияДействийПоУтверждению(
			БизнесПроцесс,
			ДанныеВидаЗадачи);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный процесс %1 (%2)'"),
			БизнесПроцесс,
			ТипЗнч(БизнесПроцесс));
		
	КонецЕсли;
	
	Возврат ДанныеЗаполненияДействий;
	
КонецФункции

// Формирует данные заполнения действий по процессу исполнения.
//
// Параметры:
//  ПроцессИсполнение - БизнесПроцессСсылка.Исполнение
//  ДанныеВидаЗадачи - см. Справочники.ВидыЗадач.ДанныеВидаЗадачи
// 
// Возвращаемое значение:
//  Массив из см. НовыйДанныеЗаполненияДействия
//
Функция ДанныеЗаполненияДействийПоИсполнению(ПроцессИсполнение, ДанныеВидаЗадачи)
	
	ДанныеЗаполненияДействий = Новый Массив;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроцессИсполнение,
		"Наименование, Описание, Проверяющий, ИдентификаторПроверяющего,
		|Исполнители, РезультатыИсполнения, РезультатыПроверки");
	
	ИсполнителиПроцесса = РеквизитыПроцесса.Исполнители.Выгрузить();
	ИсполнителиПроцесса.Сортировать("НомерСтроки Возр");
	
	РезультатыИсполнения = РеквизитыПроцесса.РезультатыИсполнения.Выгрузить();
	РезультатыИсполнения.Сортировать("НомерСтроки Возр");
	
	РезультатыПроверки = РеквизитыПроцесса.РезультатыПроверки.Выгрузить();
	РезультатыПроверки.Сортировать("НомерСтроки Возр");
	
	ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Проверяющий");
	ЗаменитьПользователяВКолонке(ИсполнителиПроцесса, "Исполнитель");
	
	НомерПоследнейИтерации = НомерПоследнейИтерации(РезультатыИсполнения);
	Для Каждого СтрокаРезультата Из РезультатыИсполнения Цикл
		
		Если СтрокаРезультата.НомерИтерации <> НомерПоследнейИтерации Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя;
		
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаРезультата.ЗадачаИсполнителя;
		ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена;
		
		СтрокаИсполнителя = ИсполнителиПроцесса.Найти(СтрокаРезультата.ЗадачаИсполнителя, "ЗадачаИсполнителя");
		Если СтрокаИсполнителя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия.ВидУчастника = ?(СтрокаИсполнителя.Ответственный,
			ДанныеВидаЗадачи.ВидУчастникаОтветственный,
			ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
		ДанныеЗаполненияДействия.Участник = СтрокаИсполнителя.Исполнитель;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = СтрокаИсполнителя.ИдентификаторИсполнителя;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	ДанныеЗадачИсполнителяПроверить = Новый Соответствие;
	НомерПоследнейИтерации = НомерПоследнейИтерации(РезультатыПроверки);
	Для Каждого СтрокаРезультата Из РезультатыПроверки Цикл
		
		Если СтрокаРезультата.НомерИтерации <> НомерПоследнейИтерации Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеЗадачИсполнителяПроверить[СтрокаРезультата.ЗадачаПроверяющего] = Неопределено Тогда
			ДанныеЗадачиИсполнителяПроверить = Новый Структура("ОтправленоНаДоработку, МассивКомментария");
			ДанныеЗадачиИсполнителяПроверить.ОтправленоНаДоработку = Ложь;
			ДанныеЗадачиИсполнителяПроверить.МассивКомментария = Новый Массив;
			ДанныеЗадачИсполнителяПроверить[СтрокаРезультата.ЗадачаПроверяющего] =
				ДанныеЗадачиИсполнителяПроверить;
		КонецЕсли;
		
		ДанныеЗадачиИсполнителяПроверить =
			ДанныеЗадачИсполнителяПроверить[СтрокаРезультата.ЗадачаПроверяющего];
		
		ДанныеЗадачиИсполнителяПроверить.ОтправленоНаДоработку =
			ДанныеЗадачиИсполнителяПроверить.ОтправленоНаДоработку
			Или СтрокаРезультата.ОтправленоНаДоработку;
		
		Если ЗначениеЗаполнено(СтрокаРезультата.КомментарийПроверяющего) Тогда
			ДанныеЗадачиИсполнителяПроверить.МассивКомментария.Добавить(
				СтрокаРезультата.КомментарийПроверяющего);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ДанныеЗадачИсполнителяПроверить Цикл
		
		ЗадачаИсполнителяПроверить = КлючИЗначение.Ключ;
		ДанныеЗадачиИсполнителяПроверить = КлючИЗначение.Значение;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = ЗадачаИсполнителяПроверить;
		Если ДанныеЗадачиИсполнителяПроверить.ОтправленоНаДоработку Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку;
		Иначе
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоПроверено;
		КонецЕсли;
		ДанныеЗаполненияДействия.Участник = РеквизитыПроцесса.Проверяющий;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = РеквизитыПроцесса.ИдентификаторПроверяющего;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	Возврат ДанныеЗаполненияДействий;
	
КонецФункции

// Формирует данные заполнения действий по процессу ознакомления.
//
// Параметры:
//  ПроцессОзнакомление - БизнесПроцессСсылка.Ознакомление
//  ДанныеВидаЗадачи - см. Справочники.ВидыЗадач.ДанныеВидаЗадачи
// 
// Возвращаемое значение:
//  Массив из см. НовыйДанныеЗаполненияДействия
//
Функция ДанныеЗаполненияДействийПоОзнакомлению(ПроцессОзнакомление, ДанныеВидаЗадачи)
	
	ДанныеЗаполненияДействий = Новый Массив;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроцессОзнакомление,
		"Исполнители");
	
	ИсполнителиПроцесса = РеквизитыПроцесса.Исполнители.Выгрузить();
	ИсполнителиПроцесса.Сортировать("НомерСтроки Возр");
	
	ЗаменитьПользователяВКолонке(ИсполнителиПроцесса, "Исполнитель");
	
	Для Каждого СтрокаИсполнителя Из ИсполнителиПроцесса Цикл
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаИсполнителя.ЗадачаИсполнителя;
		ДанныеЗаполненияДействия.РезультатДействия = Справочники.РезультатыДействийЗадач.Ознакомился;
		ДанныеЗаполненияДействия.Участник = СтрокаИсполнителя.Исполнитель;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = СтрокаИсполнителя.ИдентификаторИсполнителя;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	Возврат ДанныеЗаполненияДействий;
	
КонецФункции

// Формирует данные заполнения действий по процессу подписания.
//
// Параметры:
//  ПроцессПодписание - БизнесПроцессСсылка.Подписание
//  ДанныеВидаЗадачи - см. Справочники.ВидыЗадач.ДанныеВидаЗадачи
// 
// Возвращаемое значение:
//  Массив из см. НовыйДанныеЗаполненияДействия
//
Функция ДанныеЗаполненияДействийПоПодписанию(ПроцессПодписание, ДанныеВидаЗадачи)
	
	ДанныеЗаполненияДействий = Новый Массив;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроцессПодписание,
		"РезультатПодписания, Участники, РезультатыПодписания, РезультатыОбработок");
	
	УчастникиПроцесса = РеквизитыПроцесса.Участники.Выгрузить();
	УчастникиПроцесса.Сортировать("НомерСтроки Возр");
	
	РезультатыПодписания = РеквизитыПроцесса.РезультатыПодписания.Выгрузить();
	РезультатыПодписания.Сортировать("НомерСтроки Возр");
	
	РезультатыОбработок = РеквизитыПроцесса.РезультатыОбработок.Выгрузить();
	РезультатыОбработок.Сортировать("НомерСтроки Возр");
	
	// Действие "Подписать" и "Обеспечить подписание".
	НомерПоследнейИтерации = НомерПоследнейИтерации(РезультатыПодписания);
	Для Каждого СтрокаРезультата Из РезультатыПодписания Цикл
		
		Если СтрокаРезультата.НомерИтерации <> НомерПоследнейИтерации Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУчастника = УчастникиПроцесса.Найти(СтрокаРезультата.Идентификатор, "Идентификатор");
		Если СтрокаУчастника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаРезультата.ЗадачаПроцесса;
		ДанныеЗаполненияДействия.Участник = СтрокаУчастника.Участник;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = СтрокаУчастника.Идентификатор;
		 
		Если СтрокаРезультата.РезультатПодписания = Перечисления.РезультатыПроцессаПодписания.Подписано Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена;
		ИначеЕсли СтрокаРезультата.РезультатПодписания = Перечисления.РезультатыПроцессаПодписания.НеПодписано Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно;
		КонецЕсли;
		
		Если СтрокаУчастника.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать Тогда
			ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя;
			ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
		ИначеЕсли СтрокаУчастника.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание Тогда
			ДанныеЗаполненияДействия.ВидДействия = Справочники.ВидыДействийЗадач.ОбеспечитьПодписание;
			ДанныеЗаполненияДействия.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбеспечивающийПодписание;
		Иначе
			Продолжить;
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестная точка маршрута для результата подписания %1.'"),
				СтрокаУчастника.ТочкаМаршрута);
		КонецЕсли;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	// Действие "Обработать результат" и "Ознакомиться с результатом".
	СтрокаУчастника = УчастникиПроцесса.Найти(
		БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат,
		"ТочкаМаршрута");
	Если СтрокаУчастника <> Неопределено Тогда
		
		ЗадачаПроцессаОбработатьРезультат = РаботаСБизнесПроцессами.ПоследняяЗадачаТочкиМаршрута(
			ПроцессПодписание,
			БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат);
		Если ЗначениеЗаполнено(ЗадачаПроцессаОбработатьРезультат) Тогда
			
			РеквизитыЗадачиПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЗадачаПроцессаОбработатьРезультат,
				"Выполнена");
			
			СтрокаРезультата = РезультатыОбработок.Найти(ЗадачаПроцессаОбработатьРезультат, "ЗадачаПроцесса");
			
			ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
			ДанныеЗаполненияДействия.ВнешнийИдентификатор = СтрокаУчастника.Идентификатор;
			ДанныеЗаполненияДействия.ЗадачаПроцесса = ЗадачаПроцессаОбработатьРезультат;
			ДанныеЗаполненияДействия.Участник = СтрокаУчастника.Участник;
			
			// Если в процессе подписание:
			// - есть строка в таблице "Результаты обработок" - значит это задача "Обработать результат";
			// - нет строки в таблице "Результаты обработок" - значит это задача "Ознакомиться с результатом". 
			Если РеквизитыЗадачиПроцесса.Выполнена
				И СтрокаРезультата <> Неопределено
				И СтрокаРезультата.ОтправленоНаПовторноеПодписание Тогда
				
				ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку;
					
			ИначеЕсли РеквизитыЗадачиПроцесса.Выполнена
				И СтрокаРезультата <> Неопределено
				И Не СтрокаРезультата.ОтправленоНаПовторноеПодписание Тогда
				
				ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоПроверено;
					
			ИначеЕсли РеквизитыЗадачиПроцесса.Выполнена
				И СтрокаРезультата = Неопределено Тогда
				
				ДанныеЗаполненияДействия.РезультатДействия = Справочники.РезультатыДействийЗадач.Ознакомился;
					
			Иначе
				
				ДанныеЗаполненияДействия.РезультатДействия = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
				
			КонецЕсли;
			
			ДанныеЗаполненияДействия.ВидУчастника =
				?(СтрокаРезультата = Неопределено,
					Справочники.ВидыУчастниковЗадач.ОзнакомляемыйСРезультатом,
					ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
			ДанныеЗаполненияДействия.ВидДействия =
				?(СтрокаРезультата = Неопределено,
					Справочники.ВидыДействийЗадач.ОзнакомитьсяСРезультатом,
					ДанныеВидаЗадачи.ВидДействияПроверяющего);
			
			ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполненияДействий;
	
КонецФункции

// Формирует данные заполнения действий по процессу приглашения.
//
// Параметры:
//  ПроцессПриглашение - БизнесПроцессСсылка.Приглашение
//  ДанныеВидаЗадачи - см. Справочники.ВидыЗадач.ДанныеВидаЗадачи
// 
// Возвращаемое значение:
//  Массив из см. НовыйДанныеЗаполненияДействия
//
Функция ДанныеЗаполненияДействийПоПриглашению(ПроцессПриглашение, ДанныеВидаЗадачи)
	
	ДанныеЗаполненияДействий = Новый Массив;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроцессПриглашение,
		"Автор, РезультатПриглашения, Исполнители, ИдентификаторОбрабатывающегоРезультат,
		|РезультатыОзнакомлений, РезультатыПриглашения");
	
	ИсполнителиПроцесса = РеквизитыПроцесса.Исполнители.Выгрузить();
	ИсполнителиПроцесса.Сортировать("НомерСтроки Возр");
	
	РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
	
	РезультатыПриглашения = РеквизитыПроцесса.РезультатыПриглашения.Выгрузить();
	РезультатыПриглашения.Сортировать("НомерСтроки Возр");
	
	ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Автор");
	ЗаменитьПользователяВКолонке(ИсполнителиПроцесса, "Исполнитель");
	
	НомерПоследнейИтерации = НомерПоследнейИтерации(РезультатыПриглашения);
	Для Каждого СтрокаРезультата Из РезультатыПриглашения Цикл
		
		Если СтрокаРезультата.НомерИтерации <> НомерПоследнейИтерации Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаРезультата.ЗадачаИсполнителя;
		Если СтрокаРезультата.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена;
		ИначеЕсли СтрокаРезультата.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно;
		КонецЕсли;
		
		СтрокаИсполнителя = ИсполнителиПроцесса.Найти(СтрокаРезультата.ЗадачаИсполнителя, "ЗадачаИсполнителя");
		Если СтрокаИсполнителя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия.Участник = СтрокаИсполнителя.Исполнитель;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = СтрокаИсполнителя.ИдентификаторИсполнителя;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	НомерПоследнейИтерации = НомерПоследнейИтерации(РезультатыОзнакомлений);
	Для Каждого СтрокаРезультата Из РезультатыОзнакомлений Цикл
		
		Если СтрокаРезультата.НомерИтерации <> НомерПоследнейИтерации Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаРезультата.ЗадачаИсполнителя;
		Если СтрокаРезультата.ОтправленоПовторноеПриглашение Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку;
		ИначеЕсли Не СтрокаРезультата.ОтправленоПовторноеПриглашение
				И (РеквизитыПроцесса.РезультатПриглашения =
						Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
					Или РеквизитыПроцесса.РезультатПриглашения =
						Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками) Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоПроверено;
		ИначеЕсли Не СтрокаРезультата.ОтправленоПовторноеПриглашение
				И (РеквизитыПроцесса.РезультатПриглашения =
						Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками
					Или РеквизитыПроцесса.РезультатПриглашения =
						Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками) Тогда
			ДанныеЗаполненияДействия.РезультатДействия = Справочники.РезультатыДействийЗадач.ОтмененоПриглашение;
		КонецЕсли;
		ДанныеЗаполненияДействия.Участник = РеквизитыПроцесса.Автор;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	ЗадачиИсполнителяОповестить = РаботаСБизнесПроцессами.ЗадачиТочкиМаршрута(
		ПроцессПриглашение,
		БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить);
	Для Каждого ЗадачаИсполнителяОповестить Из ЗадачиИсполнителяОповестить Цикл
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОзнакомляемыйСРезультатом;
		ДанныеЗаполненияДействия.ВидДействия = Справочники.ВидыДействийЗадач.ОзнакомитьсяСРезультатом;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = ЗадачаИсполнителяОповестить;
		ДанныеЗаполненияДействия.РезультатДействия = Справочники.РезультатыДействийЗадач.Ознакомился;
		ДанныеЗаполненияДействия.Участник = Неопределено;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	Возврат ДанныеЗаполненияДействий;
	
КонецФункции

// Формирует данные заполнения действий по процессу рассмотрения.
//
// Параметры:
//  ПроцессРассмотрение - БизнесПроцессСсылка.Рассмотрение
//  ДанныеВидаЗадачи - см. Справочники.ВидыЗадач.ДанныеВидаЗадачи
// 
// Возвращаемое значение:
//  Массив из см. НовыйДанныеЗаполненияДействия
//
Функция ДанныеЗаполненияДействийПоРассмотрению(ПроцессРассмотрение, ДанныеВидаЗадачи)
	
	ДанныеЗаполненияДействий = Новый Массив;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроцессРассмотрение,
		"ОбрабатывающийРезолюцию, ИдентификаторОбрабатывающегоРезолюцию, ВариантОбработкиРезолюции,
		| ВариантРассмотрения, Исполнитель, ИдентификаторИсполнителя");
	
	ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "ОбрабатывающийРезолюцию");
	ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Исполнитель");
	
	ЗадачаИсполнителяПроцесса = РаботаСБизнесПроцессами.ПоследняяЗадачаТочкиМаршрута(
		ПроцессРассмотрение,
		БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
	Если ЗначениеЗаполнено(ЗадачаИсполнителяПроцесса) Тогда
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = ЗадачаИсполнителяПроцесса;
		
		Если РеквизитыПроцесса.ВариантРассмотрения = Перечисления.ВариантыРассмотрения.Рассмотрено Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена;
		ИначеЕсли РеквизитыПроцесса.ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьПомощнику Тогда
			ДанныеЗаполненияДействия.РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоПомощнику;
		ИначеЕсли РеквизитыПроцесса.ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда
			ДанныеЗаполненияДействия.РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаИсполнение;
		ИначеЕсли РеквизитыПроцесса.ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда
			ДанныеЗаполненияДействия.РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаОзнакомление;
		ИначеЕсли РеквизитыПроцесса.ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьАвтору Тогда
			ДанныеЗаполненияДействия.РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоАвтору;
		КонецЕсли;
		ДанныеЗаполненияДействия.Участник = РеквизитыПроцесса.Исполнитель;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = РеквизитыПроцесса.ИдентификаторИсполнителя;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЕсли;
	
	ЗадачаИсполнителяПроцесса = РаботаСБизнесПроцессами.ПоследняяЗадачаТочкиМаршрута(
		ПроцессРассмотрение,
		БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться);
	Если ЗначениеЗаполнено(ЗадачаИсполнителяПроцесса) Тогда
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = ЗадачаИсполнителяПроцесса;
		Если РеквизитыПроцесса.ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.Обработано Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоПроверено;
		ИначеЕсли РеквизитыПроцесса.ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение Тогда
			ДанныеЗаполненияДействия.РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаИсполнение;
		ИначеЕсли РеквизитыПроцесса.ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаОзнакомление Тогда
			ДанныеЗаполненияДействия.РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаОзнакомление;
		КонецЕсли;
		ДанныеЗаполненияДействия.Участник = РеквизитыПроцесса.ОбрабатывающийРезолюцию;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезолюцию;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЕсли;
	
	Возврат ДанныеЗаполненияДействий;
	
КонецФункции

// Формирует данные заполнения действий по процессу регистрации.
//
// Параметры:
//  ПроцессРегистрация - БизнесПроцессСсылка.Регистрация
//  ДанныеВидаЗадачи - см. Справочники.ВидыЗадач.ДанныеВидаЗадачи
// 
// Возвращаемое значение:
//  Массив из см. НовыйДанныеЗаполненияДействия
//
Функция ДанныеЗаполненияДействийПоРегистрации(ПроцессРегистрация, ДанныеВидаЗадачи)
	
	ДанныеЗаполненияДействий = Новый Массив;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроцессРегистрация,
		"Автор, ИдентификаторОбрабатывающегоРезультат, РезультатРегистрации,
		|Исполнитель, ИдентификаторИсполнителя, РезультатыОзнакомлений, РезультатыРегистрации");
	
	РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
	
	РезультатыРегистрации = РеквизитыПроцесса.РезультатыРегистрации.Выгрузить();
	РезультатыРегистрации.Сортировать("НомерСтроки Возр");
	
	ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Автор");
	ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Исполнитель");
	
	НомерПоследнейИтерации = НомерПоследнейИтерации(РезультатыРегистрации);
	Для Каждого СтрокаРезультата Из РезультатыРегистрации Цикл
		
		Если СтрокаРезультата.НомерИтерации <> НомерПоследнейИтерации Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаРезультата.ЗадачаИсполнителя;
		Если СтрокаРезультата.РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена;
		ИначеЕсли СтрокаРезультата.РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно;
		КонецЕсли;
		ДанныеЗаполненияДействия.Участник = РеквизитыПроцесса.Исполнитель;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = РеквизитыПроцесса.ИдентификаторИсполнителя;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	НомерПоследнейИтерации = НомерПоследнейИтерации(РезультатыОзнакомлений);
	Для Каждого СтрокаРезультата Из РезультатыОзнакомлений Цикл
		
		Если СтрокаРезультата.НомерИтерации <> НомерПоследнейИтерации Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника =
			?(РеквизитыПроцесса.РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано,
				Справочники.ВидыУчастниковЗадач.ОзнакомляемыйСРезультатом,
				ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		ДанныеЗаполненияДействия.ВидДействия = 
			?(РеквизитыПроцесса.РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано,
				Справочники.ВидыДействийЗадач.ОзнакомитьсяСРезультатом,
				ДанныеВидаЗадачи.ВидДействияПроверяющего);
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаРезультата.ЗадачаИсполнителя;
		Если СтрокаРезультата.ОтправленоНаПовторнуюРегистрацию Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку;
		Иначе
			ДанныеЗаполненияДействия.РезультатДействия =
				?(ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего,
					ДанныеВидаЗадачи.РезультатПроверяющегоПроверено,
					Справочники.РезультатыДействийЗадач.Ознакомился);
		КонецЕсли;
		ДанныеЗаполненияДействия.Участник = РеквизитыПроцесса.Автор;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	Возврат ДанныеЗаполненияДействий;
	
КонецФункции

// Формирует данные заполнения действий по процессу решения вопросов выполнения задач.
//
// Параметры:
//  ПроцессВопрос - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач
//  ДанныеВидаЗадачи - см. Справочники.ВидыЗадач.ДанныеВидаЗадачи
// 
// Возвращаемое значение:
//  Массив из см. НовыйДанныеЗаполненияДействия
//
Функция ДанныеЗаполненияДействийПоВопросу(ПроцессВопрос, ДанныеВидаЗадачи)
	
	ДанныеЗаполненияДействий = Новый Массив;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроцессВопрос,
		"Автор, ИдентификаторАвтораВопроса, ВидВопроса, Завершен,
		|ИнициаторПроцесса, ИдентификаторИнициатораПроцесса, ЦиклыРассмотрения");
	
	ЦиклыРассмотрения = РеквизитыПроцесса.ЦиклыРассмотрения.Выгрузить();
	ЦиклыРассмотрения.Сортировать("НомерСтроки Возр");
	
	ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Автор");
	ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "ИнициаторПроцесса");
	
	ВсеЗадачи = Новый Массив;
	
	НомерПоследнегоЦикла = 0;
	Для Каждого СтрокаТаблицы Из ЦиклыРассмотрения Цикл
		НомерПоследнегоЦикла = Макс(СтрокаТаблицы.Цикл, НомерПоследнегоЦикла);
		ВсеЗадачи.Добавить(СтрокаТаблицы.Задача);
	КонецЦикла;
	
	РеквизитыЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВсеЗадачи, "Выполнена, ТочкаМаршрута");
	
	Для Каждого СтрокаТаблицы Из ЦиклыРассмотрения Цикл
		
		Если СтрокаТаблицы.Цикл <> НомерПоследнегоЦикла Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыЗадачи = РеквизитыЗадач[СтрокаТаблицы.Задача];
		Если РеквизитыЗадачи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТочкаМаршрутаЗадачи = РеквизитыЗадачи.ТочкаМаршрута;
		Если ТочкаМаршрутаЗадачи <> БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаТаблицы.Задача;
		ДанныеЗаполненияДействия.Участник = РеквизитыПроцесса.ИнициаторПроцесса;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = РеквизитыПроцесса.ИдентификаторИнициатораПроцесса;
		
		Если РеквизитыЗадачи.Выполнена Тогда
			
			Если РеквизитыПроцесса.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
				
				РезультатВыполненияЗадачи =
					РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.РезультатВыполненияПоОбъекту(
						СтрокаТаблицы.Задача);
				
				Если РезультатВыполненияЗадачи = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
					
					ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена;
					
				ИначеЕсли РезультатВыполненияЗадачи = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
					
					ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно;
					
				КонецЕсли;
				
			Иначе
				
				ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	ЗадачаИсполнителяПроцесса = РаботаСБизнесПроцессами.ПоследняяЗадачаТочкиМаршрута(
		ПроцессВопрос,
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения);
	Если ЗначениеЗаполнено(ЗадачаИсполнителяПроцесса) Тогда
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = ЗадачаИсполнителяПроцесса;
		Если РеквизитыПроцесса.Завершен Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоПроверено;
		КонецЕсли;
		ДанныеЗаполненияДействия.Участник = РеквизитыПроцесса.Автор;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = РеквизитыПроцесса.ИдентификаторАвтораВопроса;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЕсли;
	
	Возврат ДанныеЗаполненияДействий;
	
КонецФункции

// Формирует данные заполнения действий по процессу согласования.
//
// Параметры:
//  ПроцессСогласование - БизнесПроцессСсылка.Согласование
//  ДанныеВидаЗадачи - см. Справочники.ВидыЗадач.ДанныеВидаЗадачи
// 
// Возвращаемое значение:
//  Массив из см. НовыйДанныеЗаполненияДействия
//
Функция ДанныеЗаполненияДействийПоСогласованию(ПроцессСогласование, ДанныеВидаЗадачи)
	
	ДанныеЗаполненияДействий = Новый Массив;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроцессСогласование,
		"Автор, Исполнители, ИдентификаторОбрабатывающегоРезультат,
		|РезультатСогласования, РезультатыОзнакомлений, РезультатыСогласования");
	
	ИсполнителиПроцесса = РеквизитыПроцесса.Исполнители.Выгрузить();
	ИсполнителиПроцесса.Сортировать("НомерСтроки Возр");
	
	РезультатыСогласования = РеквизитыПроцесса.РезультатыСогласования.Выгрузить();
	РезультатыСогласования.Сортировать("НомерСтроки Возр");
	
	РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
	
	ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Автор");
	ЗаменитьПользователяВКолонке(ИсполнителиПроцесса, "Исполнитель");
	
	НомерПоследнейИтерации = НомерПоследнейИтерации(РезультатыСогласования);
	Для Каждого СтрокаРезультата Из РезультатыСогласования Цикл
		
		Если СтрокаРезультата.НомерИтерации <> НомерПоследнейИтерации Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаРезультата.ЗадачаИсполнителя;
		Если СтрокаРезультата.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена;
		ИначеЕсли СтрокаРезультата.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями;
		ИначеЕсли СтрокаРезультата.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно;
		КонецЕсли;
		
		СтрокаИсполнителя = ИсполнителиПроцесса.Найти(СтрокаРезультата.ЗадачаИсполнителя, "ЗадачаИсполнителя");
		Если СтрокаИсполнителя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеЗаполненияДействия.Участник = СтрокаИсполнителя.Исполнитель;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = СтрокаИсполнителя.ИдентификаторИсполнителя;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	НомерПоследнейИтерации = НомерПоследнейИтерации(РезультатыОзнакомлений);
	Для Каждого СтрокаРезультата Из РезультатыОзнакомлений Цикл
		
		Если СтрокаРезультата.НомерИтерации <> НомерПоследнейИтерации Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника =
			?(РеквизитыПроцесса.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано
				Или РеквизитыПроцесса.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями,
				Справочники.ВидыУчастниковЗадач.ОзнакомляемыйСРезультатом,
				ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		ДанныеЗаполненияДействия.ВидДействия =
			?(РеквизитыПроцесса.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано
				Или РеквизитыПроцесса.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями,
				Справочники.ВидыДействийЗадач.ОзнакомитьсяСРезультатом,
				ДанныеВидаЗадачи.ВидДействияПроверяющего);
		
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаРезультата.ЗадачаИсполнителя;
		Если СтрокаРезультата.ОтправленоНаПовторноеСогласование Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку;
		Иначе
			ДанныеЗаполненияДействия.РезультатДействия =
				?(ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего,
					ДанныеВидаЗадачи.РезультатПроверяющегоПроверено,
					Справочники.РезультатыДействийЗадач.Ознакомился);
		КонецЕсли;
		ДанныеЗаполненияДействия.Участник = РеквизитыПроцесса.Автор;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	Возврат ДанныеЗаполненияДействий;
	
КонецФункции

// Формирует данные заполнения действий по процессу утверждения.
//
// Параметры:
//  ПроцессУтверждение - БизнесПроцессСсылка.Утверждение
//  ДанныеВидаЗадачи - см. Справочники.ВидыЗадач.ДанныеВидаЗадачи
// 
// Возвращаемое значение:
//  Массив из см. НовыйДанныеЗаполненияДействия
//
Функция ДанныеЗаполненияДействийПоУтверждению(ПроцессУтверждение, ДанныеВидаЗадачи)
	
	ДанныеЗаполненияДействий = Новый Массив;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроцессУтверждение,
		"Автор, ИдентификаторОбрабатывающегоРезультат,
		|Завершен, Исполнитель, ИдентификаторИсполнителя, 
		|РезультатУтверждения, РезультатыОзнакомлений, РезультатыУтверждения");
	
	РезультатыУтверждения = РеквизитыПроцесса.РезультатыУтверждения.Выгрузить();
	РезультатыУтверждения.Сортировать("НомерСтроки Возр");
	
	РезультатыОзнакомлений = РеквизитыПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыОзнакомлений.Сортировать("НомерСтроки Возр");
	
	ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Автор");
	ЗаменитьПользователяВРеквизите(РеквизитыПроцесса, "Исполнитель");
	
	НомерПоследнейИтерации = НомерПоследнейИтерации(РезультатыУтверждения);
	Для Каждого СтрокаРезультата Из РезультатыУтверждения Цикл
		
		Если СтрокаРезультата.НомерИтерации <> НомерПоследнейИтерации Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
		ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя;
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаРезультата.ЗадачаИсполнителя;
		Если СтрокаРезультата.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена;
		ИначеЕсли СтрокаРезультата.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно;
		КонецЕсли;
		ДанныеЗаполненияДействия.Участник = РеквизитыПроцесса.Исполнитель;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = РеквизитыПроцесса.ИдентификаторИсполнителя;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	НомерПоследнейИтерации = НомерПоследнейИтерации(РезультатыОзнакомлений);
	Для Каждого СтрокаРезультата Из РезультатыОзнакомлений Цикл
		
		Если СтрокаРезультата.НомерИтерации <> НомерПоследнейИтерации Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияДействия = НовыйДанныеЗаполненияДействия();
		ДанныеЗаполненияДействия.ВидУчастника =
			?(РеквизитыПроцесса.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено,
				Справочники.ВидыУчастниковЗадач.ОзнакомляемыйСРезультатом,
				ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		ДанныеЗаполненияДействия.ВидДействия =
			?(РеквизитыПроцесса.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено,
				Справочники.ВидыДействийЗадач.ОзнакомитьсяСРезультатом,
				ДанныеВидаЗадачи.ВидДействияПроверяющего);
		ДанныеЗаполненияДействия.ЗадачаПроцесса = СтрокаРезультата.ЗадачаИсполнителя;
		Если СтрокаРезультата.ОтправленоНаПовторноеУтверждение Тогда
			ДанныеЗаполненияДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку;
		Иначе
			ДанныеЗаполненияДействия.РезультатДействия =
				?(ДанныеЗаполненияДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего,
					ДанныеВидаЗадачи.РезультатПроверяющегоПроверено,
					Справочники.РезультатыДействийЗадач.Ознакомился);
		КонецЕсли;
		ДанныеЗаполненияДействия.Участник = РеквизитыПроцесса.Автор;
		ДанныеЗаполненияДействия.ВнешнийИдентификатор = РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат;
		
		ДанныеЗаполненияДействий.Добавить(ДанныеЗаполненияДействия);
		
	КонецЦикла;
	
	Возврат ДанныеЗаполненияДействий;
	
КонецФункции


// Формирует пустую структуру данных заполнения действия.
// 
// Возвращаемое значение:
//  Структура - Данные заполнения действия:
//   * ВидДействия - СправочникСсылка.ВидыДействийЗадач
//   * ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//   * ВнешнийИдентификатор - УникальныйИдентификатор
//   * ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//   * РезультатДействия - СправочникСсылка.РезультатыДействийЗадач
//   * Участник - см. ОпределяемыйТип.УчастникЗадач
//
Функция НовыйДанныеЗаполненияДействия()
	
	ДанныеЗаполненияДействия = Новый Структура;
	ДанныеЗаполненияДействия.Вставить(
		"ВидДействия",
		Справочники.ВидыДействийЗадач.ПустаяСсылка());
	ДанныеЗаполненияДействия.Вставить(
		"ВидУчастника",
		Справочники.ВидыУчастниковЗадач.ПустаяСсылка());
	ДанныеЗаполненияДействия.Вставить(
		"ВнешнийИдентификатор",
		УникальныйИдентификаторПустой());
	ДанныеЗаполненияДействия.Вставить(
		"ЗадачаПроцесса",
		Задачи.ЗадачаИсполнителя.ПустаяСсылка());
	ДанныеЗаполненияДействия.Вставить(
		"РезультатДействия",
		Справочники.РезультатыДействийЗадач.ПустаяСсылка());
	ДанныеЗаполненияДействия.Вставить(
		"Участник",
		Справочники.Сотрудники.ПустаяСсылка());
	
	Возврат ДанныеЗаполненияДействия;
	
КонецФункции

#КонецОбласти