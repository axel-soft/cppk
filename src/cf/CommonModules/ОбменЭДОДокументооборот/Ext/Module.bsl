// @strict-types


#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Процедура обновления на 3.0.15
Процедура ИсключитьФайлыИзОбъектовУчетаЭДО() Экспорт
	
	НаборЗаписей = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ВерсииФайлов = Новый Массив(); // Массив Из СправочникСсылка.ВерсииФайлов
	Для Каждого Запись Из НаборЗаписей Цикл
		ВерсииФайлов.Добавить(Запись.ОбъектУчета);
	КонецЦикла;
	
	ДокументыПоВерсиям = ДокументыДОПоВерсиямФайлов(ВерсииФайлов);
	ДанныеДляПереносаВФайлыЭДО = ДанныеДляЗаписиФайловЭДОПоСтаройКонцепции(ВерсииФайлов);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаписиДляУдаления = Новый Массив(); // Массив Из РегистрСведенийЗапись.ОбъектыУчетаДокументовЭДО
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Версия = Запись.ОбъектУчета;
			Если Не ЗначениеЗаполнено(Версия) Тогда
				ЗаписиДляУдаления.Добавить(Запись);
				Продолжить;
			КонецЕсли;
			
			Запись.ОбъектУчета = ДокументыПоВерсиям[Версия];
			
			ДанныеФайлаЭДО = ДанныеДляПереносаВФайлыЭДО[Версия];
			Если ЗначениеЗаполнено(ДанныеФайлаЭДО.ВерсияФайла)
				И ЗначениеЗаполнено(ДанныеФайлаЭДО.Файл)
				И ЗначениеЗаполнено(ДанныеФайлаЭДО.ДокументЭДО) Тогда
				
				ЗаписьФайла = РегистрыСведений.ФайлыУчаствующиеВЭДО.СоздатьМенеджерЗаписи();
				ЗаписьФайла.ВерсияФайла = ДанныеФайлаЭДО.ВерсияФайла;
				ЗаписьФайла.Файл = ДанныеФайлаЭДО.Файл;
				ЗаписьФайла.ДокументЭДО = ДанныеФайлаЭДО.ДокументЭДО;
				ЗаписьФайла.ВидФайла = Перечисления.ВидыФайловЭДО.ФайлСтаройКонцепции;
				
				ЗаписьФайла.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Запись Из ЗаписиДляУдаления Цикл
			НаборЗаписей.Удалить(Запись);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	
КонецПроцедуры

// Процедура обновления на 3.0.20
Процедура ТрансформироватьПравилаУчетаЭДДОВПравилаАвтоматическогоСозданияОбъектов() Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаУчетаВидовЭДДО.Контрагент КАК Контрагент,
		|	ПравилаУчетаВидовЭДДО.Организация КАК Организация,
		|	ПравилаУчетаВидовЭДДО.ВидДокументаЭДО КАК ВидДокументаЭДО,
		|	ПравилаУчетаВидовЭДДО.ВидДокументаЭДО.Наименование КАК ИмяВидаДокументаЭДО,
		|	ПравилаУчетаВидовЭДДО.ВидДокумента КАК ВидДокумента,
		|	ПравилаУчетаВидовЭДДО.ГрифДоступа КАК ГрифДоступа,
		|	ПравилаУчетаВидовЭДДО.Ответственный КАК Ответственный,
		|	ПравилаУчетаВидовЭДДО.ТематикаДокумента КАК ТематикаДокумента,
		|	ПравилаУчетаВидовЭДДО.Шаблон КАК Шаблон,
		|	ПравилаУчетаВидовЭДДО.ШаблонНаименования КАК ШаблонНаименования,
		|	ПравилаУчетаВидовЭДДО.ШаблонСодержания КАК ШаблонСодержания,
		|	ЕСТЬNULL(ВидыДокументов.ВестиУчетПоОрганизациям, ЛОЖЬ) КАК ВидДокументаВестиУчетПоОрганизациям,
		|	ЕСТЬNULL(ВидыДокументов.УчитыватьСуммуДокумента, ЛОЖЬ) КАК ВидДокументаУчитыватьСуммуДокумента,
		|	ЕСТЬNULL(ВидыДокументов.ВестиУчетСторон, ЛОЖЬ) КАК ВидДокументаВестиУчетСторон
		|ИЗ
		|	РегистрСведений.ПравилаУчетаВидовЭДДО КАК ПравилаУчетаВидовЭДДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО ПравилаУчетаВидовЭДДО.ВидДокумента = ВидыДокументов.Ссылка
		|ГДЕ
		|	ПравилаУчетаВидовЭДДО.СоздаватьАвтоматически
		|	И НЕ ПравилаУчетаВидовЭДДО.ВидДокументаЭДО В (ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка), НЕОПРЕДЕЛЕНО, NULL)
		|	И НЕ ПравилаУчетаВидовЭДДО.ВидДокумента В (ЗНАЧЕНИЕ(Справочник.ВидыДокументов.ПустаяСсылка), НЕОПРЕДЕЛЕНО, NULL)");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			ИмяОбъекта =
				ОбменЭДОДокументооборотКлиентСервер.ИмяОбъектаПравилаАвтоматическогоСозданияОбъекта(Выборка.ВидДокументаЭДО);
				
			ПравилоАвтоматическогоСозданияОбъекта =
				НайтиПравилоАвтоматическогоСозданияОбъектов(Выборка.ВидДокумента, ИмяОбъекта); //@skip-check query-in-loop
				
			ПравилоОбъект = Неопределено;
			Если ЗначениеЗаполнено(ПравилоАвтоматическогоСозданияОбъекта) Тогда
				ПравилоОбъект = ПравилоАвтоматическогоСозданияОбъекта.ПолучитьОбъект();
			Иначе
				ПравилоОбъект = Справочники.ПравилаЗагрузкиДанныхВДО.СоздатьЭлемент();
			КонецЕсли;
			
			ПравилоОбъект.УзелИнтегрированнойСистемы = ОбменЭДОДокументооборотКлиентСервер.ОписаниеПодсистемыЭДО().Имя;
			ПравилоОбъект.ВидДокумента = Выборка.ВидДокумента;
			ПравилоОбъект.ИзМакета = Истина;
			ПравилоОбъект.ПредставлениеОбъектаДО =
				СтрШаблон("%1, %2", НСтр("ru = 'Документ'"), Строка(Выборка.ВидДокумента));
			ПравилоОбъект.ПредставлениеОбъектаИС = Выборка.ИмяВидаДокументаЭДО;
			ПравилоОбъект.ТипОбъектаДО = "Справочник.ДокументыПредприятия";
			ПравилоОбъект.ТипОбъектаИС = ИмяОбъекта;
			ПравилоОбъект.ТипФайловСохраненияПечатныхФорм = Перечисления.ТипыФайловСохраненияПечатныхФормОбъектов.PDF_A_1;
			ПравилоОбъект.Шаблон = Выборка.Шаблон;
			ПравилоОбъект.Наименование =
				СтрШаблон("%1 - %2", ПравилоОбъект.ПредставлениеОбъектаДО, ПравилоОбъект.ПредставлениеОбъектаИС);
			
			ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Очистить();
			
			// Вид документа.
			ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
			ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
			ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
			ПравилоЗаполнения.ЗначениеРеквизитаДО = Выборка.ВидДокумента;
			ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "ВидДокумента";
			ПравилоЗаполнения.ТипРеквизитаОбъектаДОВСтроку = ОбщегоНазначения.ИмяТаблицыПоСсылке(Выборка.ВидДокумента);
			
			// Гриф доступа.
			Если ЗначениеЗаполнено(Выборка.ГрифДоступа) Тогда
				ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
				ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
				ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
				ПравилоЗаполнения.ЗначениеРеквизитаДО = Выборка.ГрифДоступа;
				ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "ГрифДоступа";
				ПравилоЗаполнения.ТипРеквизитаОбъектаДОВСтроку = ОбщегоНазначения.ИмяТаблицыПоСсылке(Выборка.ГрифДоступа);
			Иначе
				Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
					ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
					ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
					ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
					ПравилоЗаполнения.ЗначениеРеквизитаДО = Константы.ГрифДоступаПоУмолчанию.Получить();
					ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "ГрифДоступа";
					ПравилоЗаполнения.ТипРеквизитаОбъектаДОВСтроку = ОбщегоНазначения.ИмяТаблицыПоСсылке(Выборка.ГрифДоступа);
				КонецЕсли;
			КонецЕсли;
			
			// Ответственный.
			Если ЗначениеЗаполнено(Выборка.Ответственный) Тогда
				ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
				ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
				ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
				ПравилоЗаполнения.ЗначениеРеквизитаДО = Выборка.Ответственный;
				ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "Ответственный";
				ПравилоЗаполнения.ТипРеквизитаОбъектаДОВСтроку = ОбщегоНазначения.ИмяТаблицыПоСсылке(Выборка.Ответственный);
			КонецЕсли;

			// Тематика.
			Если ЗначениеЗаполнено(Выборка.ТематикаДокумента) Тогда
				ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
				ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
				ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
				ПравилоЗаполнения.ЗначениеРеквизитаДО = Выборка.ТематикаДокумента;
				ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "Тематика";
				ПравилоЗаполнения.ТипРеквизитаОбъектаДОВСтроку = ОбщегоНазначения.ИмяТаблицыПоСсылке(Выборка.ТематикаДокумента);
			КонецЕсли;

			// Заголовок.
			Если ЗначениеЗаполнено(Выборка.ШаблонНаименования) Тогда
				ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
				ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
				ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке;
				ПравилоЗаполнения.ВычисляемоеВыражение = СтрШаблон(
					"Параметры.Результат = ""%1"";", Выборка.ШаблонНаименования);
				ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "Заголовок";
				ПравилоЗаполнения.МестоВыполненияВыражения = Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеДО;		
				ПравилоЗаполнения.ТипРеквизитаОбъектаДОВСтроку = "Строка";
			КонецЕсли;
			
			// Содержание.
			Если ЗначениеЗаполнено(Выборка.ШаблонСодержания) Тогда
				ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
				ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
				ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке;
				ПравилоЗаполнения.ВычисляемоеВыражение = СтрШаблон(
					"Параметры.Результат = ""%1"";", Выборка.ШаблонСодержания);
				ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "Содержание";
				ПравилоЗаполнения.МестоВыполненияВыражения = Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеДО;		
				ПравилоЗаполнения.ТипРеквизитаОбъектаДОВСтроку = "Строка";
			КонецЕсли;
			
			Если Выборка.ВидДокументаВестиУчетПоОрганизациям Тогда
				ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
				ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
				ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта;
				ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "Организация";
				ПравилоЗаполнения.ИмяРеквизитаОбъектаИС = "Организация";
				ПравилоЗаполнения.ТипРеквизитаОбъектаДОВСтроку = "Справочник.Организации";
			КонецЕсли;
			
			Если Выборка.ВидДокументаУчитыватьСуммуДокумента Тогда
				ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
				ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
				ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта;
				ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "Сумма";
				ПравилоЗаполнения.ИмяРеквизитаОбъектаИС = "Сумма";
				ПравилоЗаполнения.ТипРеквизитаОбъектаДОВСтроку = "Число";
				
				ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
				ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
				ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта;
				ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "Валюта";
				ПравилоЗаполнения.ИмяРеквизитаОбъектаИС = "Валюта";
				ПравилоЗаполнения.ТипРеквизитаОбъектаДОВСтроку = "Справочник.Валюты";
			КонецЕсли;
			
			ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
			ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
			ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
			ПравилоЗаполнения.ЗначениеРеквизитаДО = Перечисления.ВариантыФормДокументов.Электронная;
			ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "ФормаДокумента";
			ПравилоЗаполнения.ТипРеквизитаОбъектаДОВСтроку = ОбщегоНазначения.ИмяТаблицыПоСсылке(Выборка.ТематикаДокумента);
			
			Если Выборка.ВидДокументаВестиУчетСторон Тогда
				ОписаниеТаблицыСтороны = Новый ТаблицаЗначений;
				
				РеквизитыТаблицы = Справочники.ПравилаЗагрузкиДанныхВДО.РеквизитыТаблицыОбъектаДО(
					"Справочник.ДокументыПредприятия", "Стороны", Выборка.ВидДокумента);
				МассивРеквизитовХранилищаПравил = РаботаСИнтегрированнымиСистемами.МассивРеквизитовХранилищаПравил();
				
				Для Каждого Элемент Из РеквизитыТаблицы Цикл
					Для Каждого РеквизитХранилищаПравил Из МассивРеквизитовХранилищаПравил Цикл
						//@skip-check invocation-parameter-type-intersect
						//@skip-check property-return-type
						ОписаниеТаблицыСтороны.Колонки.Добавить(
							СтрШаблон(РеквизитХранилищаПравил.ШаблонИмени, Элемент.Имя),
							РеквизитХранилищаПравил.ТипРеквизита);
					КонецЦикла;
				КонецЦикла;
				
				ОписаниеСтрокиТаблицы = ОписаниеТаблицыСтороны.Добавить();
				ОписаниеСтрокиТаблицы["Сторона_ИмяРеквизитаОбъектаДО"] = "Сторона";
				ОписаниеСтрокиТаблицы["Сторона_Вариант"] = Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта;
				ОписаниеСтрокиТаблицы["Сторона_ИмяРеквизитаОбъектаИС"] = "Организация";
				ОписаниеСтрокиТаблицы["Сторона_ID"] = Строка(Новый УникальныйИдентификатор());
				
				ОписаниеСтрокиТаблицы = ОписаниеТаблицыСтороны.Добавить();
				ОписаниеСтрокиТаблицы["Сторона_ИмяРеквизитаОбъектаДО"] = "Сторона";
				ОписаниеСтрокиТаблицы["Сторона_Вариант"] = Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта;
				ОписаниеСтрокиТаблицы["Сторона_ИмяРеквизитаОбъектаИС"] = "Контрагент";
				ОписаниеСтрокиТаблицы["Сторона_ID"] = Строка(Новый УникальныйИдентификатор());
				
				ПравилоЗаполнения = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
				ПравилоЗаполнения.ID = Строка(Новый УникальныйИдентификатор);
				ПравилоЗаполнения.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы;
				ПравилоЗаполнения.ИмяРеквизитаОбъектаДО = "Стороны";
				ПравилоЗаполнения.ПравилаЗаполненияСтрокТаблицы = Новый ХранилищеЗначения(ОписаниеТаблицыСтороны);
				ПравилоЗаполнения.ЭтоТаблица = Истина;
			КонецЕсли;
			
			ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Сортировать("ИмяРеквизитаОбъектаДО");
			
			ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ПравилоОбъект);
			
			КлючНастройки = КлючНастройкиАвтоматическогоСозданияОбъекта();
			КлючНастройки.Получатель = Выборка.Организация;
			КлючНастройки.Отправитель = Выборка.Контрагент;
			КлючНастройки.ВидДокумента = Выборка.ВидДокументаЭДО;
			
			СохранитьНастройкуАвтоматическогоСозданияОбъекта(КлючНастройки, ПравилоОбъект.Ссылка);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Процедуре ""ПерейтиНаВерсию_3_0_15_20"" не удалось создать правило автоматического создания объектов на основании ЭД по причине:
							|%1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновления на 3.0.15
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//   * ОбработкаЗавершена - Булево
//
Процедура ОбновитьСостоянияЭДОВДанныхДокументов(Параметры) Экспорт
	
	ИмяПроцедуры = "ПерейтиНаВерсию_3_0_15_21";
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(1) КАК ВсегоОбъектов
			|ИЗ
			|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
			|ГДЕ
			|	ДанныеДокументовПредприятия.СостояниеЭДО В (&СостоянияДляЗамены)");
		Запрос.УстановитьПараметр("СостоянияДляЗамены", СостоянияЭДОДокументооборотДляЗамены());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеДокументовПредприятия.Документ,
		|	ДанныеДокументовПредприятия.СостояниеЭДО
		|ИЗ
		|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|ГДЕ
		|	ДанныеДокументовПредприятия.СостояниеЭДО В (&СостоянияДляЗамены)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСортировки УБЫВ");
	Запрос.УстановитьПараметр("СостоянияДляЗамены", СостоянияЭДОДокументооборотДляЗамены());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Документ = Выборка.Документ;
			СостояниеЭДО = Выборка.СостояниеЭДО;
			СостояниеКЗаписи = СостояниеЭДОДляЗаписиВДанныеДокументов(СостояниеЭДО);
			
			Делопроизводство.ЗаписатьДанныеДокумента(Документ, "СостояниеЭДО", СостояниеКЗаписи);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить состояние ЭДО документа %1 в процедуре %2:
					|%3'"),
				Выборка.Документ,
				ИмяПроцедуры,
				ПодробноеПредставлениеОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Документ.Метаданные(),
				Выборка.Документ,
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;  
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось обновить некоторые записи (пропущены): %2'"),
			ИмяПроцедуры,
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

Процедура ИсключитьФайлыИзВСостоянияхОбъектовУчетаЭДО() Экспорт
	
	НаборЗаписей = РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиДляУдаления = Новый Массив(); // Массив Из РегистрСведенийЗапись.СостоянияПоОбъектамУчетаЭДО
	
	ВерсииФайлов = Новый Массив(); // Массив Из СправочникСсылка.ВерсииФайлов
	Для Каждого Запись Из НаборЗаписей Цикл
		
		ОбъектУчета = Запись.СсылкаНаОбъект;
		
		Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
			ЗаписиДляУдаления.Добавить(Запись);
		КонецЕсли;
		
		Если ТипЗнч(ОбъектУчета) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
			ВерсииФайлов.Добавить(ОбъектУчета);
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументыПоВерсиям = ДокументыДОПоВерсиямФайлов(ВерсииФайлов);
	ДатыВерсий = ДатыРедактированияВерсийФайлов(ВерсииФайлов);
	
	АктуальныеЗаписиПоДокументам = Новый Соответствие();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		ОбъектУчета = Запись.СсылкаНаОбъект;
		Документ = Справочники.ДокументыПредприятия.ПустаяСсылка();
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектУчета) Тогда
			Документ = ОбъектУчета;
		Иначе
			Документ = ДокументыПоВерсиям[ОбъектУчета];
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		АктуальнаяЗапись = АктуальныеЗаписиПоДокументам[Документ]; // РегистрСведенийЗапись.СостоянияПоОбъектамУчетаЭДО
		Если АктуальнаяЗапись = Неопределено Тогда
			АктуальнаяЗапись = Запись;
			АктуальныеЗаписиПоДокументам[Документ] = АктуальнаяЗапись;
			Продолжить;
		КонецЕсли;
		
		ТекущаяЗаписьАктуальнее =
			НоваяЗаписьСостоянийОбъектаУчетаЭДОАктуальнееПредыдущей(Запись, АктуальнаяЗапись, ДатыВерсий);
		
		Если ТекущаяЗаписьАктуальнее Тогда
			ЗаписиДляУдаления.Добавить(АктуальнаяЗапись);
			АктуальныеЗаписиПоДокументам[Документ] = Запись;
		Иначе
			ЗаписиДляУдаления.Добавить(Запись);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Запись Из ЗаписиДляУдаления Цикл
		НаборЗаписей.Удалить(Запись);
	КонецЦикла;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		ВерсияФайла = Запись.СсылкаНаОбъект;
		Документ = ДокументыПоВерсиям[ВерсияФайла];
		Если Не ЗначениеЗаполнено(Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись.СсылкаНаОбъект = Документ;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределениеБЭД

// Распределение объекто
// 
// Параметры:
//  СоставКомандЭДО - Структура - структура состава команд ЭДО. Для каждого из ключей указывается массив полных имен 
//                    объектов метаданных, к которым подключаются команды ЭДО:
//    * Исходящие    - Массив Из Строка - объекты для команд работы с исходящими документами.
//    * Входящие     - Массив Из Строка - объекты для команд работы со входящими документами.
//    * БезПодписи   - Массив Из Строка - объекты для команд выполнения ЭДО без подписи.
//    * Интеркампани - Массив Из Строка - объекты для команд обмена между организациями в рамках одной базы.
//    * Контрагенты  - Массив Из Строка - объекты для команд работы с контрагентами.
//    * Организации  - Массив Из Строка - объекты для команд работы с организациями.
//    * Договоры     - Массив Из Строка - объекты для команд работы с договорами.
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
		
	СоставКомандЭДО.Контрагенты.Добавить("Справочник.Контрагенты");
	СоставКомандЭДО.Организации.Добавить("Справочник.Организации");
	
КонецПроцедуры

// Предназначена для получения параметров ЭДО по ссылке на объект учета.
// По одному источнику может быть несколько параметров, для каждого нужно добавить строку в таблицу значений.
//
// Параметры:
//  Источник                       - СправочникОбъект.ДокументыПредприятия, СправочникСсылка.ДокументыПредприятия -
//  ПараметрыЭлектронногоДокумента - ТаблицаЗначений - параметры источника, необходимые для определения настроек обмена электронными документами: 
//    * Тип                - Произвольный - значение элемента структуры возвращаемой
//                           см. ОбменСКонтрагентами.ТипыДокументов. Используются все ключи, кроме УПД, УКД. Обязательный.
//                           Необходимость формирования УПД, УКД определяется на основании нескольких критериев
//                           (указанный тип, вариант формирования универсальных документов, настройки отправки
//                           электронных документов). 
//    * ФормированиеУниверсальногоДокумента - Произвольный - значение элемента структуры, возвращаемой
//                           см. ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов. Обязательный при указании типов:
//                            - ТоварнаяНакладная
//                            - АктВыполненныхРабот
//                            - АктНаПередачуПрав
//                            - СоглашениеОбИзмененииСтоимости
//                            - СчетФактура
//                            - КорректировочныйСчетФактура
//    * Направление        - Произвольный - значение элемента структуры возвращаемой
//                           см. ОбменСКонтрагентами.НаправленияДокументов(). Обязательный.
//    * Организация        - ОпределяемыйТип.Организация - организация документа.
//    * Контрагент         - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//    * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор контрагента.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭлектронногоДокумента) Экспорт
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
		Реквизиты = РеквизитыДокументаДОПоОбъекту(Источник);
	Иначе
		Реквизиты = РеквизитыДокументаДОПоСсылке(Источник);
	КонецЕсли;
	
	ДанныеЭДО = ДанныеОбОбъектеУчетаПоРеквизитам(Реквизиты);
	
	Если Не ДанныеЭДО.ОтправлятьПоЭДО
		Или Не ЗначениеЗаполнено(ДанныеЭДО.ВидДокументаЭДО) Тогда
		
		Возврат;
	КонецЕсли;
	
	ФормированиеУниверсальногоДокумента = ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЭДО.ВидДокументаЭДО, "ТипДокумента");
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура;
		ФормированиеУниверсальногоДокумента =
			ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
		ФормированиеУниверсальногоДокумента =
			ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
	КонецЕсли;
	
	СтрокаОтправки = ПараметрыЭлектронногоДокумента.Добавить();
	СтрокаОтправки.Тип = ТипДокумента;
	СтрокаОтправки.ФормированиеУниверсальногоДокумента = ФормированиеУниверсальногоДокумента;
	СтрокаОтправки.Направление = ОбменСКонтрагентами.НаправленияДокументов().Исходящий;
	СтрокаОтправки.Организация = ДанныеЭДО.Организация;
	СтрокаОтправки.Контрагент = ДанныеЭДО.Контрагент;
	
КонецПроцедуры

// Вызывается при формировании информации отправителя по документу ДО
// 
// Параметры:
//  Основание - СправочникСсылка.ДокументыПредприятия
//  Отказ - Булево
Процедура ПриФормированииИнформацииОтправителя(Основание, Отказ) Экспорт
	
	Отказ = Истина;
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Формирование исходящего документа ЭДО по документу %1 необходимо выполнить из формы документа 1С:Документооборот.'"),
		Основание);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Основание);
	
КонецПроцедуры

// Заполняет соответствие исходящих типов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  ПредставленияТипов - Соответствие Из КлючИЗначение:
//    * Ключ             - ПеречислениеСсылка.ТипыДокументовЭДО - тип электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хозяйственной операции).
//
Процедура СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ(ПредставленияТипов) Экспорт 
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	ПредставленияТипов.Вставить(ТипыДокументов.ТоварнаяНакладная,         НСтр("ru = 'Товарная накладная'"));
	ПредставленияТипов.Вставить(ТипыДокументов.АктВыполненныхРабот,         НСтр("ru = 'Акт выполненных работ'"));
	ПредставленияТипов.Вставить(ТипыДокументов.АктНаПередачуПрав,      НСтр("ru = 'Акт на передачу прав'"));
	ПредставленияТипов.Вставить(ТипыДокументов.СчетФактура,            НСтр("ru = 'Счет-фактура'"));
	ПредставленияТипов.Вставить(ТипыДокументов.СоглашениеОбИзмененииСтоимости, 
		НСтр("ru = 'Акт, накладная (Корректировка)'"));
	ПредставленияТипов.Вставить(ТипыДокументов.КорректировочныйСчетФактура,
		НСтр("ru = 'Счет-фактура (Корректировка)'"));
	ПредставленияТипов.Вставить(ТипыДокументов.КаталогТоваров,         НСтр("ru = 'Каталог товаров (Настройка ЭДО)'"));
	ПредставленияТипов.Вставить(ТипыДокументов.ОтветНаЗаказ,           НСтр("ru = 'Заказ покупателя'"));
	ПредставленияТипов.Вставить(ТипыДокументов.ЗаказТовара,            НСтр("ru = 'Заказ поставщику'"));
	ПредставленияТипов.Вставить(ТипыДокументов.СчетНаОплату,           НСтр("ru = 'Счет покупателю'"));
	ПредставленияТипов.Вставить(ТипыДокументов.АктОРасхождениях,       НСтр("ru = 'Акт о расхождениях по приемке'"));
		
	ПредставленияТипов.Вставить(ТипыДокументов.УПД,       НСтр("ru = 'УПД'"));
	ПредставленияТипов.Вставить(ТипыДокументов.УКД,       НСтр("ru = 'УКД'"));

	ПредставленияТипов.Вставить(
		ТипыДокументов.СведенияОРеализацииКомиссионером,
		НСтр("ru = 'Сведения о реализации комиссионером'"));
	ПредставленияТипов.Вставить(
		ТипыДокументов.СведенияОЗакупкеКомиссионером,
		НСтр("ru = 'Сведения о закупке комиссионером'"));
	ПредставленияТипов.Вставить(
		ТипыДокументов.КорректировкаСведенийОРеализацииКомиссионером,
		НСтр("ru = 'Сведения о реализации комиссионером (Корректировка)'"));
	ПредставленияТипов.Вставить(
		ТипыДокументов.КорректировкаСведенийОЗакупкеКомиссионером,
		НСтр("ru = 'Сведения о закупке комиссионером (Корректировка)'"));
	
	ПредставленияТипов.Вставить(ТипыДокументов.ОтчетОСписанииКомиссионногоТовара,
		НСтр("ru = 'Отчет о списании комиссионного товара'"));
	ПредставленияТипов.Вставить(ТипыДокументов.ОтчетОПродажахКомиссионногоТовара,
		НСтр("ru = 'Отчет о продажах комиссионного товара'"));
	ПредставленияТипов.Вставить(ТипыДокументов.ПрайсЛист,
		НСтр("ru = 'Прайс-лист'"));
	
КонецПроцедуры

// Возвращает список видов учетных документов для подбора в исходящих документах.
//
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - тип электронного документа.
//  СписокСпособовОбработки - СписокЗначений из Строка - список видов учетных документов. В качестве значения задается строковый
//                           идентификатор. В качестве представления - представление вида документа, которое
//                           может быть отображено пользователю.
//                           Выходной параметр.
//
Процедура СписокВидовИсходящихДокументов(ТипДокумента, СписокСпособовОбработки) Экспорт 
	
	СпособыОбработки = ОбменЭДОДокументооборотКлиентСервер.СпособыОбработкиИсходящегоДокумента();
	
	СписокСпособовОбработки.Добавить(СпособыОбработки.Документ, НСтр("ru = 'Документ'"));
	
КонецПроцедуры

// Переопределяет имя объекта метаданных для способа обработки входящего электронного документа, в случае, если оно не
// совпадает с именем способа обработки.
//
// Параметры:
//  СпособОтраженияВУчете - Строка - один из способов отражения в учете входящего документа, заданный в переопределении.
//  ИмяДокумента - Строка - в параметр необходимо поместить имя объекта метаданных, соответствующее переданному способу обработки.
//                          Выходной параметр.
//
Процедура ИмяОбъектаМетаданныхПоСпособуОтраженияВУчете(СпособОтраженияВУчете, ИмяДокумента) Экспорт 
	
	СпособыОбработки = ОбменЭДОДокументооборотКлиентСервер.СпособыОбработкиИсходящегоДокумента();
	
	Если СпособОтраженияВУчете = СпособыОбработки.Документ Тогда
		ИмяДокумента = "ДокументыПредприятия";
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при настройке видимости исходящего ЭДО
// 
// Параметры:
//  Форма - см. Документ.ЭлектронныйДокументИсходящийЭДО.Форма.ФормаПросмотра
Процедура ПриНастройкеВидимостиФормыИсходящегоЭДО(Форма) Экспорт
	
	Форма.Элементы.Договор.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область Визуализация

// Возвращает ссылку на электронный документ объекта учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО  
//  ТолькоАктуальные - Булево
//
// Возвращаемое значение:
//  Массив.
//
Функция ЭлектронныеДокументыОбъектаУчета(ОбъектУчета, ТолькоАктуальные = Истина) Экспорт
	
	МассивЭД = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета
	|	И ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА";
	
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	
	Если Не ТолькоАктуальные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА", "");
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
				Выборка.ЭлектронныйДокумент).Чтение Тогда
			МассивЭД.Добавить(Выборка.ЭлектронныйДокумент);
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат МассивЭД;
	
КонецФункции

// Дополняет подписи ЭП в документе ДО - подписями из документовЭДО
// 
// Параметры:
//  МассивЭД - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТаблицаПодписей - ДеревоЗначений -  на форме 
//  СколькоДобавилиПодписей - Число
//  УникальныйИдентификаторФормы  -УникальныйИдентификатор
//
Процедура ДополнитьСписокПодписей(МассивЭД, ТаблицаПодписей, СколькоДобавилиПодписей, УникальныйИдентификаторФормы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлементыДерева = ТаблицаПодписей.ПолучитьЭлементы();
	СколькоДобавилиПодписей = 0;
	
	Для Каждого ДокументЭДО Из МассивЭД Цикл
		
		Сообщение = ИнтерфейсДокументовЭДОВызовСервера.СообщениеОтправителя(ДокументЭДО);
		ТипЭлементаРегламента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ТипЭлементаРегламента");
		
		Подписи = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(Сообщение);
		
		Если ТипЭлементаРегламента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя") Тогда
			
			ТипЭлементаРегламентаИскомый = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя");
			СообщениеПолучателя = ПолучитьСообщение(ДокументЭДО, ТипЭлементаРегламентаИскомый);
			Если ЗначениеЗаполнено(СообщениеПолучателя) Тогда
				ПодписиПолучателя = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(
					СообщениеПолучателя);
					
				Для Каждого СтрПодпись Из ПодписиПолучателя Цикл
					Подписи.Добавить(СтрПодпись);	
				КонецЦикла;	
			КонецЕсли;
			
		КонецЕсли;
		
		Если Подписи.Количество() <> 0 Тогда
			
			НоваяСтрока = ЭлементыДерева.Добавить();
			НоваяСтрока.АвторПодписиИСтатус = Строка(ДокументЭДО) + " " + НСтр("ru = '(Документ ЭДО)'"); 
			НоваяСтрока.ИндексКартинки = 0;  // иконка справочника  
			
			ЭлементыДляДочерних = НоваяСтрока.ПолучитьЭлементы();
			
			Для Каждого Подпись Из Подписи Цикл
				
				СколькоДобавилиПодписей = СколькоДобавилиПодписей + 1;

				НоваяСтрокаДочерняя = ЭлементыДляДочерних.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДочерняя, Подпись.СвойстваПодписи);
				НоваяСтрокаДочерняя.Объект = Подпись.ПодписанныйОбъект;
				
				НоваяСтрокаДочерняя.АдресПодписи = ПоместитьВоВременноеХранилище(
					Подпись.СвойстваПодписи.Подпись, УникальныйИдентификаторФормы);

				НоваяСтрокаДочерняя.АдресСертификата = ПоместитьВоВременноеХранилище(
					Подпись.СвойстваПодписи.Сертификат.Получить(), УникальныйИдентификаторФормы);
				
				НоваяСтрокаДочерняя.АвторПодписиИСтатус = Подпись.СвойстваПодписи.КомуВыданСертификат; 
				НоваяСтрокаДочерняя.ДатаПодписиИКомментарий = 
					Формат(Подпись.СвойстваПодписи.ДатаПодписи, "ДФ='dd.MM.yyyy HH:mm'"); 
				НоваяСтрокаДочерняя.ИндексКартинки = 0;  // иконка справочника    
				
				НоваяСтрокаДочерняя.УникальныйИдентификатор = РаботаСЭП.ИдентификаторПодписи(
					Подпись.ПодписанныйОбъект, Подпись.СвойстваПодписи.ПорядковыйНомер);
					
				Если НоваяСтрокаДочерняя.ПодписьВерна Тогда
					НоваяСтрокаДочерняя.СертификатДействителен = Истина;
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

// Возвращает состояние документа
//
// Параметры:
//   ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//   Строка
//
Функция СостояниеДокумента(ДокументЭДО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(ДокументЭДО);
	
	Если ЗначениеЗаполнено(СостояниеДокументаПодробное.Комментарий) Тогда
		ШаблонПредставления = "%1 (%2)";
		СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(ДокументЭДО);
		ПредставлениеСостояния = СтрШаблон(ШаблонПредставления, СостояниеДокументаПодробное.Значение,
			СостояниеДокументаПодробное.Комментарий);
	ИначеЕсли ЗначениеЗаполнено(СостояниеДокументаПодробное.Значение) Тогда
		ПредставлениеСостояния = Строка(СостояниеДокументаПодробное.Значение);
	Иначе
		ПредставлениеСостояния = Строка(ЭлектронныеДокументыЭДО.НачальноеСостояниеДокумента());
	КонецЕсли;
	
	Возврат ПредставлениеСостояния;
	
КонецФункции

// Возвращает состояние документа - строку 
//
// Параметры:
//   ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//   ВидСобытия - ПеречислениеССылка.СобытияУведомлений
//
// Возвращаемое значение:
//   Строка
//
Функция СостояниеДокументаПодробно(ДокументЭДО, ВидСобытия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);      
	
	ОписаниеДокумента = "";
	
	СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(ДокументЭДО);   
	РеквЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЭДО, "Контрагент, Организация");
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован Тогда
		
		ТипЭлементаРегламентаИскомый = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ПОА");
		СообщениеПолучателя = ОбменЭДОДокументооборот.ПолучитьСообщение(ДокументЭДО, ТипЭлементаРегламентаИскомый);

		Если ЗначениеЗаполнено(СообщениеПолучателя) Тогда   
			
			Направление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеПолучателя, "Направление");
			
			ДатыПодписей = Новый Массив;
			
			ПодписиПолучателя = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(
				СообщениеПолучателя);
				
			Для Каждого СтрПодпись Из ПодписиПолучателя Цикл
				ДатыПодписей.Добавить(СтрПодпись.СвойстваПодписи.ДатаПодписи);	
			КонецЦикла;
			
			Если Направление = Перечисления.НаправленияЭДО.Входящий И ДатыПодписей.Количество() = 2 Тогда      
				
				Если ЗначениеЗаполнено(СостояниеДокументаПодробное.Комментарий) Тогда
					ОписаниеДокумента = СтрШаблон(
						НСтр("ru = '
						|Предложил аннулировать: %1 %2
						|Причина: %3
						|Согласился с аннулированием: %4 %5'"), 
						РеквЭДО.Контрагент, Формат(ДатыПодписей[0], "ДФ=dd.MM.yyyy"), 
						СостояниеДокументаПодробное.Комментарий,
						РеквЭДО.Организация, Формат(ДатыПодписей[1], "ДФ=dd.MM.yyyy"));
					Иначе                                     
						
					ОписаниеДокумента = СтрШаблон(
						НСтр("ru = '
						|Предложил аннулировать: %1 %2
						|Согласился с аннулированием: %3 %4'"), 
						РеквЭДО.Контрагент, Формат(ДатыПодписей[0], "ДФ=dd.MM.yyyy"), 
						РеквЭДО.Организация, Формат(ДатыПодписей[1], "ДФ=dd.MM.yyyy"));
						
				КонецЕсли;	

			ИначеЕсли Направление = Перечисления.НаправленияЭДО.Исходящий И ДатыПодписей.Количество() = 2 Тогда      
				
				Если ЗначениеЗаполнено(СостояниеДокументаПодробное.Комментарий) Тогда
					ОписаниеДокумента = СтрШаблон(
						НСтр("ru = '
						|Предложил аннулировать: %1 %2
						|Причина: %3
						|Согласился с аннулированием: %4 %5'"), 
						РеквЭДО.Организация, Формат(ДатыПодписей[0], "ДФ=dd.MM.yyyy"), 
						СостояниеДокументаПодробное.Комментарий,
						РеквЭДО.Контрагент, Формат(ДатыПодписей[1], "ДФ=dd.MM.yyyy"));
				Иначе	
					ОписаниеДокумента = СтрШаблон(
						НСтр("ru = '
						|Предложил аннулировать: %1 %2
						|Согласился с аннулированием: %3 %4'"), 
						РеквЭДО.Организация, Формат(ДатыПодписей[0], "ДФ=dd.MM.yyyy"), 
						РеквЭДО.Контрагент, Формат(ДатыПодписей[1], "ДФ=dd.MM.yyyy"));
				КонецЕсли;		
					
			КонецЕсли;	
			
		КонецЕсли; 
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен Тогда	
		
		ТипЭлементаРегламентаИскомый = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.УОУ");
		СообщениеПолучателя = ОбменЭДОДокументооборот.ПолучитьСообщение(ДокументЭДО, ТипЭлементаРегламентаИскомый);

		Если ЗначениеЗаполнено(СообщениеПолучателя) Тогда   
			
			ДатыПодписей = Новый Массив;
			
			ПодписиПолучателя = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(
				СообщениеПолучателя);
				
			Для Каждого СтрПодпись Из ПодписиПолучателя Цикл
				ДатыПодписей.Добавить(СтрПодпись.СвойстваПодписи.ДатаПодписи);	
			КонецЦикла;
			
			Если ДатыПодписей.Количество() = 1 Тогда      
				
				Если ЗначениеЗаполнено(СостояниеДокументаПодробное.Комментарий) Тогда
					ОписаниеДокумента = СтрШаблон(
						НСтр("ru = '
						|%1 отклонил документ %2
						|Причина: %3'"), 
						РеквЭДО.Контрагент, Формат(ДатыПодписей[0], "ДФ=dd.MM.yyyy"), 
						СостояниеДокументаПодробное.Комментарий
					);
					Иначе                                     
							
						ОписаниеДокумента = СтрШаблон(
							НСтр("ru = '
							|%1 отклонил документ %2'"), 
							РеквЭДО.Контрагент, Формат(ДатыПодписей[0], "ДФ=dd.MM.yyyy") 
						);
						
					КонецЕсли;	
					
			КонецЕсли;	
			
		КонецЕсли;	

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования Тогда	
		
		ТипЭлементаРегламентаИскомый = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ПОА");
		СообщениеПолучателя = ОбменЭДОДокументооборот.ПолучитьСообщение(ДокументЭДО, ТипЭлементаРегламентаИскомый);

		Если ЗначениеЗаполнено(СообщениеПолучателя) Тогда   
			
			ДатыПодписей = Новый Массив;
			
			ПодписиПолучателя = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(
				СообщениеПолучателя);
				
			Для Каждого СтрПодпись Из ПодписиПолучателя Цикл
				ДатыПодписей.Добавить(СтрПодпись.СвойстваПодписи.ДатаПодписи);	
			КонецЦикла;
			
			Если ДатыПодписей.Количество() = 1 Тогда      
				
				Если ЗначениеЗаполнено(СостояниеДокументаПодробное.Комментарий) Тогда
					ОписаниеДокумента = СтрШаблон(
						НСтр("ru = '
						|Предложил аннулировать: %1 %2
						|Причина: %3
						|%4: %5'"), 
						РеквЭДО.Контрагент, Формат(ДатыПодписей[0], "ДФ=dd.MM.yyyy"), 
						СостояниеДокументаПодробное.Комментарий,
						РедакцииКОнфигурацииКлиентСервер.Организация(),
						РеквЭДО.Организация
					);
					Иначе 
							
						ОписаниеДокумента = СтрШаблон(
							НСтр("ru = '
							|Предложил аннулировать: %1 %2
							|%3: %4'"), 
							РеквЭДО.Контрагент, Формат(ДатыПодписей[0], "ДФ=dd.MM.yyyy"),
							РедакцииКОнфигурацииКлиентСервер.Организация(),
							РеквЭДО.Организация
						);
						
					КонецЕсли;	
					
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат ОписаниеДокумента;
	
КонецФункции

// Возвращает состояние документа
//
// Параметры:
//   ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//   ПеречислениеСсылка.СостоянияДокументовЭДО
//
Функция СостояниеДокументаПеречисление(ДокументЭДО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(ДокументЭДО);
	
	Возврат СостояниеДокументаПодробное.Значение;
	
КонецФункции

// Возвращает состояние документа
//
// Параметры:
//   ДокументДО - СправочникСсылка.ДокументыПредприятия
//
// Возвращаемое значение:
//   Строка
//
Функция СостояниеДокументаДО(ДокументДО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	МассивЭД = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(ДокументДО);

	Если МассивЭД.Количество() <> 0 Тогда
		СостояниеЭДО = ОбменЭДОДокументооборот.СостояниеДокумента(МассивЭД[0]);
		Возврат СостояниеЭДО;
	КонецЕсли;	
	
	Возврат "";
	
КонецФункции

// Возвращает сохраненные настройки визуализации файлов формализованного ЭДО
// 
// Возвращаемое значение:
//  см. НовыеНастройкиВизуализацииФормализованногоФайлаЭДО
Функция НастройкиВизуализацииФайлаФормализованногоЭДО() Экспорт
	
	НастройкиВизуализации = НовыеНастройкиВизуализацииФормализованногоФайлаЭДО();
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючНастроекВизуализации(), ""); // Структура
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
		Возврат НастройкиВизуализации;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НастройкиВизуализации, СохраненныеНастройки);
	Возврат НастройкиВизуализации;
	
КонецФункции

// Сохраняет в памяти настройки визуализации файлов формализованного ЭДО
// 
// Параметры:
//  Настройки - см. НовыеНастройкиВизуализацииФормализованногоФайлаЭДО
Процедура СохранитьНастройкиВизуализацииФайлаФормализованногоЭДО(Настройки) Экспорт
	
	НастройкиДляСохранения = НовыеНастройкиВизуализацииФормализованногоФайлаЭДО();
	ЗаполнитьЗначенияСвойств(НастройкиДляСохранения, Настройки);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючНастроекВизуализации(), "", НастройкиДляСохранения);
	
КонецПроцедуры

// Возвращает состояние документа и ставит доступность команд Аннулировать ПринятьАннулирование ОтклонитьАннулирование
//
// Параметры:
//   ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
//   Форма - ФормаКлиентскогоПриложения -  
//
// Возвращаемое значение:
//   Строка
//
Функция СостояниеДокументаИДоступностьКоманд(ДокументЭДО, Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(ДокументЭДО);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(СостояниеДокументаПодробное.Комментарий) Тогда
		ШаблонПредставления = "%1 (%2)";
		СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(ДокументЭДО);
		ПредставлениеСостояния = СтрШаблон(ШаблонПредставления, СостояниеДокументаПодробное.Значение,
			СостояниеДокументаПодробное.Комментарий);
	ИначеЕсли ЗначениеЗаполнено(СостояниеДокументаПодробное.Значение) Тогда
		ПредставлениеСостояния = Строка(СостояниеДокументаПодробное.Значение);
	Иначе
		ПредставлениеСостояния = Строка(ЭлектронныеДокументыЭДО.НачальноеСостояниеДокумента());
	КонецЕсли; 
	
	Форма.СостояниеЭДОСсылка = СостояниеДокументаПодробное.Значение;
	ЭтоОсобоеСостояние = ОбменЭДОДокументооборотКлиентСервер.ЭтоОсобоеСостояние(Форма.СостояниеЭДОСсылка);
	Форма.Элементы.ГруппаПлашкаЭДО.Видимость = ЭтоОсобоеСостояние;
	Если ЭтоОсобоеСостояние Тогда          
		
		Форма.Элементы.ДекорацияЭДО.Заголовок = НСтр("ru = 'Документ ЭДО: '") + Строка(СостояниеДокументаПодробное.Значение);
		
		Если СостояниеДокументаПодробное.Значение = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
			Форма.Элементы.ДекорацияЭДО.Заголовок = НСтр("ru = 'Документ ЭДО аннулирован'");
		КонецЕсли;	
		
	КонецЕсли;	   
	
	Форма.Элементы.СостояниеЭДО.Видимость = Истина;
	
	Если СостояниеДокументаПодробное.Значение <> Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение
		И СостояниеДокументаПодробное.Значение <> Перечисления.СостоянияДокументовЭДО.Аннулирован
		И ТипЗнч(ДокументЭДО)=  Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
		Форма.ДокументБлокированПоЭДО = Истина;
		Форма.ДокументБлокированПоЭДОФайл = РегистрыСведений.ФайлыУчаствующиеВЭДО.ОтправленныйФайлПоДокументуЭДО(ДокументЭДО);
	Иначе
		Форма.ДокументБлокированПоЭДО = Ложь;
		Форма.ДокументБлокированПоЭДОФайл = Неопределено;
	КонецЕсли;	
	
	ОбъектСтруктура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЭДО, 
		"СпособОбмена, НаОзнакомлении, ВидДокумента, Ссылка");
	
	ДействияНаЭтапе = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(
		СостояниеДокументаПодробное.Значение, ОбъектСтруктура);
		
	ЕстьПравоОбработкиДокументов = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	
	Форма.Элементы.Аннулировать.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, 
		Перечисления.ДействияПоЭДО.Аннулировать) И ЕстьПравоОбработкиДокументов;
	
	Форма.Элементы.ПринятьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование) И ЕстьПравоОбработкиДокументов;

	Форма.Элементы.ОтклонитьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование) И ЕстьПравоОбработкиДокументов;
		
	ЕстьВозможностьСоздатьПовторныйИсходящийЭлектронныйДокумент = ЕстьВозможностьСоздатьПовторныйИсходящийЭлектронныйДокумент(Форма);
		
	Форма.Элементы.ПереформироватьДокументЭДО.Видимость = 
		((СостояниеДокументаПодробное.Значение = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение)
		Или (СостояниеДокументаПодробное.Значение = Перечисления.СостоянияДокументовЭДО.Аннулирован))
		И ЕстьВозможностьСоздатьПовторныйИсходящийЭлектронныйДокумент;	
	
	Возврат ПредставлениеСостояния;
	
КонецФункции   

// Возвращает ДокументБлокированПоЭДО (если по документу ДО есть исходящий документ ЭДО)
//
// Параметры:
//   ДокументДО - ДокументСсылка.ДокументыПредприятия
//   Файл - СправочникССылка.Файлы
//
// Возвращаемое значение:
//   Булево
//
Функция ДокументБлокированПоЭДО(ДокументДО, Файл) Экспорт
	
	МассивЭД = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(ДокументДО);
	Если МассивЭД.Количество() <> 0 Тогда    
		
		ДокументЭДО = МассивЭД[0];
		
		УстановитьПривилегированныйРежим(Истина);
		
		СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(ДокументЭДО);
		
		Если СостояниеДокументаПодробное.Значение <> Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение
			И СостояниеДокументаПодробное.Значение <> Перечисления.СостоянияДокументовЭДО.Аннулирован
			И ТипЗнч(ДокументЭДО)=  Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
			
			Если РегистрыСведений.ФайлыУчаствующиеВЭДО.ФайлОтправленПоЭДО(Файл) Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;	
			КонецЕсли;	
			
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

// Ставит доступность Ложь команд Аннулировать ПринятьАннулирование ОтклонитьАннулирование
//
// Параметры:
//   Форма - УправляемаяФорма 
//
Процедура ДоступностьКомандНет(Форма) Экспорт
	
	Форма.Элементы.Аннулировать.Видимость = Ложь;
	Форма.Элементы.ПринятьАннулирование.Видимость = Ложь;
	Форма.Элементы.ОтклонитьАннулирование.Видимость = Ложь;
	Форма.Элементы.ПереформироватьДокументЭДО.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическоеСозданиеОбъектовПоДаннымЭД

// Дополняет список интегрированных систем описанием подсистемы ЭДО.
//
// Параметры:
//	СписокВыбора - СписокЗначений Из ПланОбменаСсылка.ИнтегрированныеСистемы, Строка - Список выбора интегрированных систем.
//	ДанныеИнтегрированныхСистем - ДанныеФормыКоллекция - Содержит дополнительные данные интегрированных систем.
//
Процедура ДополнитьСписокИнтегрированныхСистемОписаниемПодсистемыЭДО(СписокВыбора, ДанныеИнтегрированныхСистем = Неопределено) Экспорт
	
	ОписаниеПодсистемыЭДО = ОбменЭДОДокументооборотКлиентСервер.ОписаниеПодсистемыЭДО();
	
	СписокВыбора.Добавить(ОписаниеПодсистемыЭДО.Имя, ОписаниеПодсистемыЭДО.Представление);
	
	Если ДанныеИнтегрированныхСистем <> Неопределено Тогда
		НоваяСтрока = ДанныеИнтегрированныхСистем.Добавить(); //@skip-check bsl-legacy-check-dynamic-feature-access
		НоваяСтрока.ИнтегрированнаяСистема = ОписаниеПодсистемыЭДО.Имя; //@skip-check property-return-type
		НоваяСтрока.Наименование = ОписаниеПодсистемыЭДО.Представление; //@skip-check property-return-type
	КонецЕсли;
	
КонецПроцедуры

// Дополняет дерево метаданных интегрируемых систем описанием объектов подсистемы ЭДО.
//
// Параметры:
//	ДеревоМетаданных - см. РаботаСИнтегрированнымиСистемамиПовтИсп.СтруктураМетаданныхОбъектаИнтегрированнойСистемы
//	ВключатьОписаниеРеквизитов - Булево - Включать в описание сведения о реквизитах метаданных.
//
Процедура ДополнитьДеревоМетаданныхИнтегрируемыхСистемОписаниемОбъектовПодсистемыЭДО(ДеревоМетаданных, ВключатьОписаниеРеквизитов = Ложь) Экспорт
	
	Запросы = Новый Массив; // Массив Из Структура
	Запросы.Добавить(ЭлектронныеДокументыЭДО.ЗапросАктуальныхФорматов("АктуальныеФорматы"));
	Запросы.Добавить(СинхронизацияЭДО.ЗапросПоддерживаемыхФорматов("ПоддерживаемыеФорматыЭлектронныхДокументов"));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыДокументовЭДО.Ссылка КАК Вид,
		|	ВидыДокументовЭДО.Наименование КАК Имя,
		|	ВидыДокументовЭДО.ТипДокумента КАК Тип,
		|	ПоддерживаемыеФорматыЭлектронныхДокументов.Формат КАК Формат
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеФорматы КАК АктуальныеФорматы
		|		ПО ВидыДокументовЭДО.Ссылка = АктуальныеФорматы.ВидДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоддерживаемыеФорматыЭлектронныхДокументов КАК ПоддерживаемыеФорматыЭлектронныхДокументов
		|		ПО ПоддерживаемыеФорматыЭлектронныхДокументов.Формат = АктуальныеФорматы.Формат");
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГруппаДокументы = ДеревоМетаданных.Строки.Добавить();
	СтрокаГруппаДокументы.Имя = "Документ";
	СтрокаГруппаДокументы.Синоним = НСтр("ru = 'Документы'");
	СтрокаГруппаДокументы.Картинка = БиблиотекаКартинок.Документ;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеРеквизитов =
			ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов(Выборка.Вид, Выборка.Тип, Выборка.Формат);
		
		НоваяСтрокаДокумент = СтрокаГруппаДокументы.Строки.Добавить();
		НоваяСтрокаДокумент.Имя =
			ОбменЭДОДокументооборотКлиентСервер.ИмяОбъектаПравилаАвтоматическогоСозданияОбъекта(Выборка.Вид);
		НоваяСтрокаДокумент.Синоним = Выборка.Имя;
		НоваяСтрокаДокумент.ПечатныеФормы = Новый Массив;
		НоваяСтрокаДокумент.Картинка = БиблиотекаКартинок.Документ;
		
		Если Не ВключатьОписаниеРеквизитов Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаРеквизиты = НоваяСтрокаДокумент.Строки.Добавить();
		НоваяСтрокаРеквизиты.Имя = "Реквизиты";
		
		Для Каждого ОписаниеРеквизита Из ОписаниеРеквизитов.РеквизитыШапки Цикл
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизиты.Строки.Добавить(), ОписаниеРеквизита);
		КонецЦикла;
		
		Если ОписаниеРеквизитов.ТабличныеЧасти.Количество() > 0 Тогда
			НоваяСтрокаТабЧасти = НоваяСтрокаДокумент.Строки.Добавить();
			НоваяСтрокаТабЧасти.Имя = "ТабличныеЧасти";
			
			Для Каждого ТабличнаяЧасть Из ОписаниеРеквизитов.ТабличныеЧасти Цикл
				НоваяСтрокаТабЧасть = НоваяСтрокаТабЧасти.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТабЧасть, ТабличнаяЧасть);
				
				Для Каждого ОписаниеРеквизита Из ТабличнаяЧасть.Реквизиты Цикл
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТабЧасть.Строки.Добавить(), ОписаниеРеквизита);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов

// Возвращает описание реквизитов для правил автоматического создания объектов.
//
// Параметры:
//	Вид - СправочникСсылка.ВидыДокументовЭДО - Вид электронного документа.
//	Тип - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
//	Формат - Строка - Формат электронного документа.
//
// Возвращаемое значение:
//	Структура:
//		* РеквизитыШапки - Массив Из см. ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов
//		* ТабличныеЧасти - Массив Из см. ОписаниеТабличнойЧастиПравилаАвтоматическогоСозданияОбъектов
//
Функция ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов(Вид, Тип, Формат) Экспорт
	
	ОписаниеРеквизитов = Новый Структура;
	ОписаниеРеквизитов.Вставить("РеквизитыШапки", Новый Массив);
	ОписаниеРеквизитов.Вставить("ТабличныеЧасти", Новый Массив);
	
	ОписаниеОбщихРеквизитовПравилАвтоматическогоСозданияОбъектов(ОписаниеРеквизитов);
	ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектовЗависящихОтВидаТипаФормата(ОписаниеРеквизитов, Вид, Тип, Формат);
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

// Возвращает описание реквизита для правил автоматического создания объектов.
//
// Параметры:
//	Имя - Строка - Имя табличной части.
//	Синоним - Строка - Синоним табличной части.
//
// Возвращаемое значение:
//	Структура:
//		* Имя - Строка - Имя реквизита.
//		* Синоним - Строка - Синоним реквизита.
//
Функция ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(Имя, Синоним) Экспорт
	
	Возврат Новый Структура("Имя, Синоним", Имя, Синоним);
	
КонецФункции

// Возвращает описание табличной части для правил автоматического создания объектов.
//
// Параметры:
//	Имя - Строка - Имя табличной части.
//	Синоним - Строка - Синоним табличной части.
//
// Возвращаемое значение:
//	Структура:
//		* Имя - Строка - Имя табличной части.
//		* Синоним - Строка - Синоним табличной части.
//		* Реквизиты - Массив Из см. ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов
//
Функция ОписаниеТабличнойЧастиПравилаАвтоматическогоСозданияОбъектов(Имя, Синоним) Экспорт
	
	Возврат Новый Структура("Имя, Синоним, Реквизиты", Имя, Синоним, Новый Массив);
	
КонецФункции

#КонецОбласти

// Возвращает ключ настройки автоматического создания объекта.
//
// Возвращаемое значение:
//	см. РегистрыСведений.НастройкиАвтоматическогоСозданияОбъектов.КлючНастройки.
//
Функция КлючНастройкиАвтоматическогоСозданияОбъекта() Экспорт
	
	Возврат РегистрыСведений.НастройкиАвтоматическогоСозданияОбъектов.КлючНастройки();
	
КонецФункции

// Возвращает настройку автоматического создания объекта.
//
// Параметры:
//	КлючНастройки - см. КлючНастройкиАвтоматическогоСозданияОбъекта.
//
// Возвращаемое значение:
//	см. РегистрыСведений.НастройкиАвтоматическогоСозданияОбъектов.НастройкаПоКлючу.
//
Функция НастройкаАвтоматическогоСозданияОбъекта(КлючНастройки) Экспорт
	
	Возврат РегистрыСведений.НастройкиАвтоматическогоСозданияОбъектов.НастройкаПоКлючу(КлючНастройки);
	
КонецФункции

// Сохраняет настройку автоматического создания объекта.
//
// Параметры:
//	КлючНастройки - см. КлючНастройкиАвтоматическогоСозданияОбъекта.
//	Настройка - СправочникСсылка.ПравилаЗагрузкиДанныхВДО.
//
Процедура СохранитьНастройкуАвтоматическогоСозданияОбъекта(КлючНастройки, Настройка) Экспорт
	
	РегистрыСведений.НастройкиАвтоматическогоСозданияОбъектов.Добавить(КлючНастройки, Настройка);
	
КонецПроцедуры

// Удаляет настройку автоматического создания объекта.
//
// Параметры:
//	КлючНастройки - см. КлючНастройкиАвтоматическогоСозданияОбъекта.
//
Процедура УдалитьНастройкуАвтоматическогоСозданияОбъекта(КлючНастройки) Экспорт
	
	РегистрыСведений.НастройкиАвтоматическогоСозданияОбъектов.Удалить(КлючНастройки);
	
КонецПроцедуры

#КонецОбласти

// Есть возможность создать исходящий электронный документ.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения 
// 
// Возвращаемое значение:
//  Булево - Истина, если есть возможность создать исходящий электронный документ
//
Функция ЕстьВозможностьСоздатьИсходящийЭлектронныйДокумент(Форма) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОтправкиДокументовПоЭДО)
		Или Не ПравоДоступа("Добавление", Метаданные.Документы.ЭлектронныйДокументИсходящийЭДО )
		Или Не ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.СозданиеИсходящегоЭДВРучномРежиме) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Объект = Форма.Объект;
	Если Объект.ФормаДокумента <> Перечисления.ВариантыФормДокументов.Электронная Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ИспользоватьЭДО = Ложь;
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ИспользоватьЭДО = Форма.ВидДокументаКэш.ИспользоватьЭДО;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ИспользоватьЭДО Тогда
		ЭлектронныйДокумент = ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(Объект.Ссылка);
		Возврат Не ЗначениеЗаполнено(ЭлектронныйДокумент);
	КонецЕсли;
	
	Возврат ИспользоватьЭДО;
	
КонецФункции	

// Есть возможность создать повторный исходящий электронный документ.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения 
// 
// Возвращаемое значение:
//  Булево - Истина, если есть возможность создать исходящий электронный документ
//
Функция ЕстьВозможностьСоздатьПовторныйИсходящийЭлектронныйДокумент(Форма) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОтправкиДокументовПоЭДО)
		Или Не ПравоДоступа("Добавление", Метаданные.Документы.ЭлектронныйДокументИсходящийЭДО )
		Или Не ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.СозданиеИсходящегоЭДВРучномРежиме) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Объект = Форма.Объект;
	Если Объект.ФормаДокумента <> Перечисления.ВариантыФормДокументов.Электронная Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ИспользоватьЭДО = Ложь;
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ИспользоватьЭДО = Форма.ВидДокументаКэш.ИспользоватьЭДО;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ИспользоватьЭДО Тогда
		ЭлектронныйДокумент = ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(Объект.Ссылка);
		Возврат ЗначениеЗаполнено(ЭлектронныйДокумент);
	КонецЕсли;
	
	Возврат ИспользоватьЭДО;
	
КонецФункции	

// Синхронизирует состояние ЭДО для документа ДО в данных документа
// 
// Параметры:
//  Источник - РегистрСведенийНаборЗаписей.СостоянияПоОбъектамУчетаЭДО
//  Отказ - Булево
//  Замещение - Булево
Процедура СинхронизироватьСостояниеЭДОВДанныхДокумента(Источник, Отказ, Замещение) Экспорт
	
	Для Каждого Запись Из Источник Цикл
		
		ОбъектУчета = Запись.СсылкаНаОбъект;
		
		Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Делопроизводство.ЗаписатьДанныеДокумента(ОбъектУчета, "СостояниеЭДО", Запись.СостояниеЭДО);
		
	КонецЦикла;
	
КонецПроцедуры

// См. ИнтеграцияЭДО.ПриЗагрузкеНовогоЭлектронногоДокумента
Процедура ПриЗагрузкеНовогоЭлектронногоДокумента(ЭлектронныйДокумент, ВидДокумента, СостояниеЭДО, ИсправленнаяВерсияДокумента, КонтекстДиагностики) Экспорт
	
	Если Не ЗначениеЗаполнено(ИсправленнаяВерсияДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЭДО.ОчиститьАктуальностьЭлектронногоДокумента(ИсправленнаяВерсияДокумента);
	
КонецПроцедуры

// Пишет состояние в РС СостоянияДокументовЭДО
// 
// Параметры:
//   ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//   Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
Процедура УстановитьСостояниеДокументаЭДО(ЭлектронныйДокумент, Состояние) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияДокументовЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЭлектронныйДокумент = ЭлектронныйДокумент;  
	
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.ЭлектронныйДокумент = ЭлектронныйДокумент;  
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.ДатаИзменения = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
			
КонецПроцедуры			

#Область ДанныеДокументовЭДО

// Возвращает данные документов ЭДО по документам ДО
// 
// Параметры:
//  ДокументыДО - Массив Из СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ДокументыПредприятия
//    * Значение - см. НовыеДанныеЭДОДокументаДО
Функция ДанныеЭДОПоДокументамДО(ДокументыДО) Экспорт
	
	ВозможностьОтправки = ДанныеОВозможностиОтправкиПоЭДОДокументовДО(ДокументыДО);
	
	ДанныеЭДО = Новый Соответствие();
	Для Каждого Документ Из ДокументыДО Цикл
		
		ДанныеДокумента = НовыеДанныеЭДОДокументаДО();
		ДанныеДокумента.ВозможнаОтправкаЭДО = ВозможностьОтправки[Документ];
		
		ДанныеСостояния = ИнтеграцияЭДО.РассчитатьСостояниеОбъектаУчета(Документ);
		Если ЗначениеЗаполнено(ДанныеСостояния.Состояние) Тогда
			ДанныеДокумента.СостояниеЭДО = ДанныеСостояния.Состояние;
		КонецЕсли;
		
		ДанныеЭДО[Документ] = ДанныеДокумента;
		
	КонецЦикла;
	
	ТаблицаАктуальныхЭДО = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(ДокументыДО);
	Для Каждого Строка Из ТаблицаАктуальныхЭДО Цикл
		
		Документ = Строка.ОбъектУчета;
		ДокументЭДО = Строка.ЭлектронныйДокумент;
		Если Не ЗначениеЗаполнено(ДокументЭДО) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента = ДанныеЭДО[Документ]; // см. НовыеДанныеЭДОДокументаДО
		ДанныеДокумента.АктуальныйДокументЭДО = ДокументЭДО;
		
		ИдентификаторПакета = ПакетыДокументовЭДО.ИдентификаторПакетаДокумента(ДокументЭДО);
		Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
			ДанныеДокумента.ИдентификаторПакетаЭДО = ИдентификаторПакета;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеЭДО;
	
КонецФункции

// Возвращает данные ЭДО документа ДО
//  При наличии множетсва документов следует использовать см. ДанныеЭДОПоДокументамДО
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  см. НовыеДанныеЭДОДокументаДО
Функция ДанныеЭДОДокументаДО(Документ) Экспорт
	
	ДокументыДО = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
	ДанныеЭДО = ДанныеЭДОПоДокументамДО(ДокументыДО);
	
	ДанныеДокумента = ДанныеЭДО[Документ]; // см. НовыеДанныеЭДОДокументаДО
	
	Возврат ДанныеДокумента;
	
КонецФункции

// Возвращает набор документов ЭДО, связанных с документами 1С:Документооборот
// 
// Параметры:
//  ДокументыДО - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Ссылки на документы ДО по которым необходимо получить
//                                                             соответствующие документы ЭДО
//  ТолькоАктуальные - Булево -  Выбирать только документы ЭДО, имеющие признак "Актуальный"
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ДокументДОДляЭДО
//    * Значение - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
Функция ДокументыЭДОДокументовДО(ДокументыДО, ТолькоАктуальные = Истина) Экспорт
	
	ДокументыЭДОПоДокументамДО = Новый Соответствие();
	Для Каждого ДокументДО Из ДокументыДО Цикл
		ДокументыЭДОПоДокументамДО[ДокументДО] = Новый Массив();
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ДокументДО,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ДокументЭДО
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета В (&ДокументыДО)
		|	И &ОтборПоАктуальнымДокументамЭДО";
	
	Если ТолькоАктуальные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ОтборПоАктуальнымДокументамЭДО", "ОбъектыУчетаДокументовЭДО.Актуальный");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ОтборПоАктуальнымДокументамЭДО", "ИСТИНА");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументыДО", ДокументыДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументыЭДОКонкретногоДокумента = ДокументыЭДОПоДокументамДО[Выборка.ДокументДО]; // Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		ДокументыЭДОКонкретногоДокумента.Добавить(Выборка.ДокументЭДО);
	КонецЦикла;
	
	Возврат ДокументыЭДОПоДокументамДО;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО)
	Возврат ИнтерфейсДокументовЭДО.ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновления

// Возвращает соответствие документов ДО по версиям файлов. Если это версия файла не документа, то вернет пустую ссылку
// 
// Параметры:
//  ВерсииФайлов - Массив Из СправочникСсылка.ВерсииФайлов
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ВерсииФайлов
//    * Значение - СправочникСсылка.ДокументыПредприятия
Функция ДокументыДОПоВерсиямФайлов(ВерсииФайлов)
	
	ДокументыВерсий = Новый Соответствие();
	Для Каждого Версия Из ВерсииФайлов Цикл
		ДокументыВерсий[Версия] = Справочники.ДокументыПредприятия.ПустаяСсылка();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка КАК ВерсияФайла,
		|	ДокументыПредприятия.Ссылка КАК ДокументДО
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО Файлы.Ссылка = ВерсииФайлов.Владелец
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ПО Файлы.ВладелецФайла = ДокументыПредприятия.Ссылка
		|ГДЕ
		|	ВерсииФайлов.Ссылка В (&ВерсииФайлов)";
	Запрос.УстановитьПараметр("ВерсииФайлов", ВерсииФайлов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументыВерсий[Выборка.ВерсияФайла] = Выборка.ДокументДО;
	КонецЦикла;
	
	Возврат ДокументыВерсий;
	
КонецФункции

// Возвращает данные для записи в регистр файлов ЭДО по старой концепции
// 
// Параметры:
//  ВерсииФайлов - Массив Из СправочникСсылка.ВерсииФайлов
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ВерсииФайлов
//    * Значение - см. НовыеДанныеДляЗаписиВФайлыЭДО
Функция ДанныеДляЗаписиФайловЭДОПоСтаройКонцепции(ВерсииФайлов)
	
	ДанныеВерсий = Новый Соответствие();
	Для Каждого Версия Из ВерсииФайлов Цикл
		ДанныеВерсий[Версия] = НовыеДанныеДляЗаписиВФайлыЭДО();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка КАК ВерсияФайла,
		|	ВерсииФайлов.Владелец КАК Файл,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ДокументЭДО
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО ВерсииФайлов.Ссылка = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|ГДЕ
		|	ВерсииФайлов.Ссылка В (&ВерсииФайлов)";
	Запрос.УстановитьПараметр("ВерсииФайлов", ВерсииФайлов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеВерсии = ДанныеВерсий[Выборка.ВерсияФайла]; // см. НовыеДанныеДляЗаписиВФайлыЭДО
		
		ДанныеВерсии.ВерсияФайла = Выборка.ВерсияФайла;
		ДанныеВерсии.Файл = Выборка.Файл;
		ДанныеВерсии.ДокументЭДО = Выборка.ДокументЭДО;
		
	КонецЦикла;
	
	Возврат ДанныеВерсий;
	
КонецФункции

// Конструктор данных для записи в файлы ЭДО
// 
// Возвращаемое значение:
//  Структура:
// * ВерсияФайла - СправочникСсылка.ВерсииФайлов - 
// * Файл - СправочникСсылка.Файлы - 
// * ДокументЭДО - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, ДокументСсылка.ЭлектронныйДокументВходящийЭДО - 
Функция НовыеДанныеДляЗаписиВФайлыЭДО()
	
	Данные = Новый Структура;
	Данные.Вставить("ВерсияФайла", Справочники.ВерсииФайлов.ПустаяСсылка());
	Данные.Вставить("Файл", Справочники.Файлы.ПустаяСсылка());
	Данные.Вставить("ДокументЭДО", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	
	Возврат Данные;
	
КонецФункции

// Возвращает правило автоматического создания объекта.
//
// Параметры:
//	ВидДокумента - Справочник.ВидыДокументов - Вид документа ДО.
//	ИмяОбъекта - Строка - Имя объекта ЭДО.
//
// Возвращаемое значение:
//	СправочникСсылка.ПравилаЗагрузкиДанныхВДО - Правило автоматического создания объектов.
//
Функция НайтиПравилоАвтоматическогоСозданияОбъектов(ВидДокумента, ИмяОбъекта)
	
	ПравилоСозданияОбъекта = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаЗагрузкиДанныхВДО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаЗагрузкиДанныхВДО КАК ПравилаЗагрузкиДанныхВДО
		|ГДЕ
		|	ПравилаЗагрузкиДанныхВДО.УзелИнтегрированнойСистемы = &ИнтегрированнаяСистема
		|	И ПравилаЗагрузкиДанныхВДО.ВидДокумента = &ВидДокумента
		|	И ПравилаЗагрузкиДанныхВДО.ТипОбъектаИС = &ТипОбъектаИС
		|	И ПравилаЗагрузкиДанныхВДО.ТипОбъектаДО = &ТипОбъектаДО
		|	И ПравилаЗагрузкиДанныхВДО.ИзМакета");	
	Запрос.Параметры.Вставить("ИнтегрированнаяСистема", ОбменЭДОДокументооборотКлиентСервер.ОписаниеПодсистемыЭДО().Имя);
	Запрос.Параметры.Вставить("ВидДокумента", ВидДокумента);
	Запрос.Параметры.Вставить("ТипОбъектаДО", "Справочник.ДокументыПредприятия");
	Запрос.Параметры.Вставить("ТипОбъектаИС", ИмяОбъекта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПравилоСозданияОбъекта = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПравилоСозданияОбъекта;
	
КонецФункции

// Состояния ЭДО документооборота, подлежащие замене
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СостоянияЭДОДокументооборот
Функция СостоянияЭДОДокументооборотДляЗамены()
	
	Состояния = Перечисления.СостоянияЭДОДокументооборот;
	
	СостоянияДляЗамены = Новый Массив(); // Массив Из ПеречислениеСсылка.СостоянияЭДОДокументооборот
	СостоянияДляЗамены.Добавить(Состояния.Аннулирован);
	СостоянияДляЗамены.Добавить(Состояния.ЗакрытПринудительно);
	СостоянияДляЗамены.Добавить(Состояния.ЗакрытСОтклонением);
	СостоянияДляЗамены.Добавить(Состояния.НаПодписи);
	СостоянияДляЗамены.Добавить(Состояния.НаУтверждении);
	СостоянияДляЗамены.Добавить(Состояния.НеСформирован);
	СостоянияДляЗамены.Добавить(Состояния.ОбменЗавершен);
	СостоянияДляЗамены.Добавить(Состояния.ОбменЗавершенСИсправлением);
	СостоянияДляЗамены.Добавить(Состояния.ОжидаетСозданияПакетаЭДО);
	СостоянияДляЗамены.Добавить(Состояния.ОжидаетсяИсправление);
	СостоянияДляЗамены.Добавить(Состояния.ОжидаетсяОтправка);
	СостоянияДляЗамены.Добавить(Состояния.ОжидаетсяПодтверждениеАннулирования);
	СостоянияДляЗамены.Добавить(Состояния.ОтклоненПолучателем);
	СостоянияДляЗамены.Добавить(Состояния.Отправлен);
	СостоянияДляЗамены.Добавить(Состояния.ОшибкаПередачи);
	СостоянияДляЗамены.Добавить(Состояния.Подписан);
	СостоянияДляЗамены.Добавить(Состояния.Получен);
	СостоянияДляЗамены.Добавить(Состояния.ПоставленВОчередьНаОтправку);
	СостоянияДляЗамены.Добавить(Состояния.СформированЭД);
	СостоянияДляЗамены.Добавить(Состояния.ТребуетсяАннулировать);
	СостоянияДляЗамены.Добавить(Состояния.ТребуетсяУточнение);
	
	Возврат СостоянияДляЗамены;
	
КонецФункции

// Возвращает состояние ЭДО для записи в данные документов ДО по состоянию старого формата
// 
// Параметры:
//  СостояниеЭДОДокумнетооборот - ПеречислениеСсылка.СостоянияЭДОДокументооборот
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
Функция СостояниеЭДОДляЗаписиВДанныеДокументов(СостояниеЭДОДокумнетооборот)
	
	СостоянияДО = Перечисления.СостоянияЭДОДокументооборот;
	СостоянияЭДО = Перечисления.СостоянияДокументовЭДО;
	
	СоответствиеСостояний = Новый Соответствие();
	СоответствиеСостояний[СостоянияДО.Аннулирован] = СостоянияЭДО.Аннулирован;
	СоответствиеСостояний[СостоянияДО.ЗакрытПринудительно] = СостоянияЭДО.ЗакрытПринудительно;
	СоответствиеСостояний[СостоянияДО.ЗакрытСОтклонением] = СостоянияЭДО.ЗакрытСОтклонением;
	СоответствиеСостояний[СостоянияДО.НаПодписи] = СостоянияЭДО.ТребуетсяПодписание;
	СоответствиеСостояний[СостоянияДО.НаУтверждении] = СостоянияЭДО.ТребуетсяУтверждение;
	СоответствиеСостояний[СостоянияДО.НеСформирован] = СостоянияЭДО.НеСформирован;
	СоответствиеСостояний[СостоянияДО.ОбменЗавершен] = СостоянияЭДО.ОбменЗавершен;
	СоответствиеСостояний[СостоянияДО.ОбменЗавершенСИсправлением] = СостоянияЭДО.ОбменЗавершенСИсправлением;
	СоответствиеСостояний[СостоянияДО.ОжидаетСозданияПакетаЭДО] = СостоянияЭДО.ТребуетсяОтправка;
	СоответствиеСостояний[СостоянияДО.ОжидаетсяИсправление] = СостоянияЭДО.ОжидаетсяИсправление;
	СоответствиеСостояний[СостоянияДО.ОжидаетсяОтправка] = СостоянияЭДО.ТребуетсяОтправка;
	СоответствиеСостояний[СостоянияДО.ОжидаетсяПодтверждениеАннулирования] = СостоянияЭДО.ОжидаетсяПодтверждениеАннулирования;
	СоответствиеСостояний[СостоянияДО.ОтклоненПолучателем] = СостоянияЭДО.ТребуетсяУточнение;
	СоответствиеСостояний[СостоянияДО.Отправлен] = СостоянияЭДО.ОжидаетсяПодтверждение;
	СоответствиеСостояний[СостоянияДО.ОшибкаПередачи] = СостоянияЭДО.ЗакрытСОшибкойПередачи;
	СоответствиеСостояний[СостоянияДО.Подписан] = СостоянияЭДО.ТребуетсяОтправка;
	СоответствиеСостояний[СостоянияДО.Получен] = СостоянияЭДО.ТребуетсяУтверждение;
	СоответствиеСостояний[СостоянияДО.ПоставленВОчередьНаОтправку] = СостоянияЭДО.ТребуетсяОтправка;
	СоответствиеСостояний[СостоянияДО.СформированЭД] = СостоянияЭДО.ТребуетсяПодписание;
	СоответствиеСостояний[СостоянияДО.ТребуетсяАннулировать] = СостоянияЭДО.ТребуетсяПодтверждениеАннулирования;
	СоответствиеСостояний[СостоянияДО.ТребуетсяУточнение] = СостоянияЭДО.ТребуетсяУточнение;
	
	Если СоответствиеСостояний[СостояниеЭДОДокумнетооборот] = Неопределено Тогда
		Возврат СостоянияЭДО.ПустаяСсылка();
	Иначе
		Возврат СоответствиеСостояний[СостояниеЭДОДокумнетооборот];
	КонецЕсли;
	
КонецФункции

// Даты редактирования версий файлов.
// 
// Параметры:
//  ВерсииФайлов - Массив Из СправочникСсылка.ВерсииФайлов
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ВерсииФайлов
//    * Значение - Дата
Функция ДатыРедактированияВерсийФайлов(ВерсииФайлов)
	
	ДатыПоВерсиям = Новый Соответствие();
	Для Каждого Версия Из ВерсииФайлов Цикл
		ДатыПоВерсиям[Версия] = Дата(1, 1, 1);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка КАК Версия,
		|	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификации
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Ссылка В (&ВерсииФайлов)";
	Запрос.УстановитьПараметр("ВерсииФайлов", ВерсииФайлов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатыПоВерсиям[Выборка.Версия] = Выборка.ДатаМодификации;
	КонецЦикла;
	
	Возврат ДатыПоВерсиям;
	
КонецФункции

// Возвращает, является ли новая запись состояний объекта учета ЭДО актуальнее предыдущей
// 
// Параметры:
//  НоваяЗапись - РегистрСведенийЗапись.СостоянияПоОбъектамУчетаЭДО
//  ПредыдущаяЗапись - РегистрСведенийЗапись.СостоянияПоОбъектамУчетаЭДО
//  ДатыРедактированияВерсий - см. ДатыРедактированияВерсийФайлов
// 
// Возвращаемое значение:
//  Булево
Функция НоваяЗаписьСостоянийОбъектаУчетаЭДОАктуальнееПредыдущей(НоваяЗапись, ПредыдущаяЗапись, ДатыРедактированияВерсий)
	
	Если ПредыдущаяЗапись.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
		И НоваяЗапись.СостояниеЭДО <> Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		Возврат Истина;
	ИначеЕсли ПредыдущаяЗапись.СостояниеЭДО <> Перечисления.СостоянияДокументовЭДО.НеСформирован
		И НоваяЗапись.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(НоваяЗапись.СсылкаНаОбъект) Тогда
		ДатаНовойВерсии = НоваяЗапись.Дата;
	Иначе
		ДатаНовойВерсии = ДатыРедактированияВерсий[НоваяЗапись.СсылкаНаОбъект];
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ПредыдущаяЗапись.СсылкаНаОбъект) Тогда
		ДатаСтаройВерсии = ПредыдущаяЗапись.Дата;
	Иначе
		ДатаСтаройВерсии = ДатыРедактированияВерсий[ПредыдущаяЗапись.СсылкаНаОбъект];
	КонецЕсли;
	
	Если ДатаНовойВерсии >= ДатаСтаройВерсии Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область НастройкиОтправкиЭДО

// Возвращает список отправителей ЭД, найденных по строке поиска.
// 
// Параметры:
//  ПараметрыПолученияДанных - Структура:
//   * СтрокаПоиска - Строка -
//  ПолучательЭД - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Получатель ЭД для отбора отправителя
//  ОтправителиОтбор - Неопределено, Массив Из СправочникСсылка.Организации - 
//  ОтправителиИсключения - Неопределено, Массив Из СправочникСсылка.Организации -
// 
// Возвращаемое значение:
//  СписокЗначений Из СправочникСсылка.Организации - список найденных организаций
//
Функция ДанныеВыбораОтправителяЭД(ПараметрыПолученияДанных, ПолучательЭД, ОтправителиОтбор = Неопределено,
		ОтправителиИсключения = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений; // СписокЗначений Из СправочникСсылка.Организации
	ОтправителиЭД = ОтправителиЭД(ПолучательЭД, ОтправителиОтбор, ОтправителиИсключения);
	
	ДанныеВыбораОрганизации = ДанныеВыбораОрганизацииЭД(ПараметрыПолученияДанных.СтрокаПоиска, ОтправителиЭД);
	Для Каждого ДанныеОрганизация Из ДанныеВыбораОрганизации Цикл
		ДанныеВыбора.Добавить(ДанныеОрганизация.Значение, ДанныеОрганизация.Представление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список организаций ЭД, найденных по строке поиска.
// 
// Параметры:
//  Текст - Строка - строка поиска
//  ОрганизацииОтбора - Массив Из СправочникСсылка.Организации - Организации-участники ЭД, среди которых осуществляется поиск
// 
// Возвращаемое значение:
//  СписокЗначений Из СправочникСсылка.Организации - найденные организации
//
Функция ДанныеВыбораОрганизацииЭД(Текст, ОрганизацииОтбора)
		
		ДанныеВыбора = Новый СписокЗначений; // СписокЗначений Из СправочникСсылка.Организации
		СловаПоиска = ОбщегоНазначенияДокументооборот.СловаПоиска(Текст);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
		|	Организации.Ссылка,
		|	""Наименование"" КАК ПолеСовпадения,
		|	Организации.Наименование КАК ЗначениеПоля,
		|	Организации.Представление КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В (&ОрганизацииОтбора)
		|	И Организации.ПометкаУдаления = ЛОЖЬ		
		|	И Организации.Наименование ПОДОБНО &Текст
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 50
		|	Организации.Ссылка,
		|	""ИНН"",
		|	Организации.ИНН,
		|	Организации.Представление
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В (&ОрганизацииОтбора)
		|	И Организации.ПометкаУдаления = ЛОЖЬ		
		|	И Организации.ИНН ПОДОБНО &Текст
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 50
		|	Организации.Ссылка,
		|	""ОГРН"",
		|	Организации.ОГРН,
		|	Организации.Представление
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В (&ОрганизацииОтбора)
		|	И Организации.ПометкаУдаления = ЛОЖЬ
		|	И Организации.ОГРН ПОДОБНО &Текст";
		
		Запрос.УстановитьПараметр("Текст", "%" + Текст + "%");
		Запрос.УстановитьПараметр("ОрганизацииОтбора", ОрганизацииОтбора);
		
		ОбъектМетаданных = Метаданные.Справочники.Организации;
		Если Не МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(
			ОбъектМетаданных.ТабличныеЧасти.Найти("Представления") = Неопределено) Тогда
			
			Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"Организации.Наименование ПОДОБНО &Текст",
					"(Организации.Наименование ПОДОБНО &Текст ИЛИ Организации.НаименованиеЯзык1 ПОДОБНО &Текст)");
			КонецЕсли;
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПолеСовпадения = "Наименование" Тогда 
				ПредставлениеФорматированнаяСтрока = ОбщегоНазначенияДокументооборот.ФорматированныйРезультатПоиска(
					Выборка.Организация,
					СловаПоиска);
				
				ДобавкаТекста = СтрШаблон(НСтр("ru = ' (%1)'"), "Организация");
					
				ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
					ПредставлениеФорматированнаяСтрока,
					Новый ФорматированнаяСтрока(ДобавкаТекста,
						, WebЦвета.Серый)
					);
							
			ИначеЕсли Выборка.ПолеСовпадения = "ИНН" ИЛИ Выборка.ПолеСовпадения = "ОГРН" Тогда 
				ПредставлениеФорматированнаяСтрока = ОбщегоНазначенияДокументооборот.ФорматированныйРезультатПоиска(
					Выборка.ЗначениеПоля,
					СловаПоиска);
				
				ДобавкаТекста = СтрШаблон(НСтр("ru = ' (%1)'"), Выборка.Организация);
					
				ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
					ПредставлениеФорматированнаяСтрока,
					Новый ФорматированнаяСтрока(ДобавкаТекста,
						, WebЦвета.Серый)
					);
					
			КонецЕсли;
					
			ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
			
		КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает контрагентов-учатсников ЭД, найденных по строке поиска.
// 
// Параметры:
//  Текст - Строка - Строка поиска
//  КонтрагентыОтбора - Массив Из СправочникСсылка.Контрагенты - Контрагенты-участники, среди которых выполняется поиск
// 
// Возвращаемое значение:
//  СписокЗначений Из СправочникСсылка.Контрагенты - Найденные контрагенты
//
Функция ДанныеВыбораКонтрагентаЭД(Текст, КонтрагентыОтбора)
		
	ДанныеВыбора = Новый СписокЗначений; //СписокЗначений Из СправочникСсылка.Контрагенты
	СловаПоиска = ОбщегоНазначенияДокументооборот.СловаПоиска(Текст);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
	|	Контрагенты.Ссылка,
	|	""Наименование"" КАК ПолеСовпадения,
	|	Контрагенты.Наименование КАК ЗначениеПоля,
	|	Контрагенты.Представление КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	
	|	Контрагенты.Ссылка В (&КонтрагентыОтбора)
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.Наименование ПОДОБНО &Текст
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	Контрагенты.Ссылка,
	|	""ИНН"",
	|	Контрагенты.ИНН,
	|	Контрагенты.Представление
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В (&КонтрагентыОтбора)
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.ИНН ПОДОБНО &Текст
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	Контрагенты.Ссылка,
	|	""Регистрационный номер"",
	|	Контрагенты.РегистрационныйНомер,
	|	Контрагенты.Представление
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В (&КонтрагентыОтбора)
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.РегистрационныйНомер ПОДОБНО &Текст
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ";

	Запрос.УстановитьПараметр("Текст", "%" + Текст + "%");
	Запрос.УстановитьПараметр("КонтрагентыОтбора", КонтрагентыОтбора);

	ОбъектМетаданных = Метаданные.Справочники.Контрагенты;
	Если Не МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(ОбъектМетаданных.ТабличныеЧасти.Найти(
		"Представления") = Неопределено) Тогда

		Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.Наименование ПОДОБНО &Текст",
				"(Контрагенты.Наименование ПОДОБНО &Текст ИЛИ Контрагенты.НаименованиеЯзык1 ПОДОБНО &Текст)");
		КонецЕсли;

	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.ПолеСовпадения = "Наименование" Тогда
			ПредставлениеФорматированнаяСтрока = ОбщегоНазначенияДокументооборот.ФорматированныйРезультатПоиска(
				Выборка.Контрагент, СловаПоиска);

			ДобавкаТекста = СтрШаблон(НСтр("ru = ' (%1)'"), "Контрагент");

			ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(ПредставлениеФорматированнаяСтрока,
				Новый ФорматированнаяСтрока(ДобавкаТекста, , WebЦвета.Серый));

		ИначеЕсли Выборка.ПолеСовпадения = "ИНН" Или Выборка.ПолеСовпадения = "Регистрационный номер" Тогда
			ПредставлениеФорматированнаяСтрока = ОбщегоНазначенияДокументооборот.ФорматированныйРезультатПоиска(
				Выборка.ЗначениеПоля, СловаПоиска);

			ДобавкаТекста = СтрШаблон(НСтр("ru = ' (%1)'"), Выборка.Контрагент);

			ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(ПредставлениеФорматированнаяСтрока,
				Новый ФорматированнаяСтрока(ДобавкаТекста, , WebЦвета.Серый));

		КонецЕсли;

		ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);

	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список получателей ЭД, найденных по строке поиска.
// 
// Параметры:
//  ПараметрыПолученияДанных - Структура:
//   * СтрокаПоиска - Строка -
//  ОтправительЭД - СправочникСсылка.Организации - Отправитель ЭД для отбора получателя
//  ПолучателиОтбор - Неопределено, Массив Из ОпределяемыйТип.УчастникЭДО - 
//  ПолучателиИсключения - Неопределено, Массив Из ОпределяемыйТип.УчастникЭДО - 
// 
// Возвращаемое значение:
//  СписокЗначений Из ОпределяемыйТип.УчастникЭДО - найденные организации и контрагенты
//
Функция ДанныеВыбораПолучателяЭД(ПараметрыПолученияДанных, ОтправительЭД, ПолучателиОтбор = Неопределено,
		ПолучателиИсключения = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений; //СписокЗначений Из ОпределяемыйТип.УчастникЭДО
	ПолучателиЭД = ПолучателиЭД(ОтправительЭД, ПолучателиОтбор, ПолучателиИсключения);

	ДанныеВыбораКонтрагенты = ДанныеВыбораКонтрагентаЭД(ПараметрыПолученияДанных.СтрокаПоиска, ПолучателиЭД);
	Для Каждого ДанныеКонтрагента Из ДанныеВыбораКонтрагенты Цикл
		ДанныеВыбора.Добавить(ДанныеКонтрагента.Значение, ДанныеКонтрагента.Представление);
	КонецЦикла;
	
	ДанныеВыбораОрганизации = ДанныеВыбораОрганизацииЭД(ПараметрыПолученияДанных.СтрокаПоиска, ПолучателиЭД);
	Для Каждого ДанныеОрганизация Из ДанныеВыбораОрганизации Цикл
		ДанныеВыбора.Добавить(ДанныеОрганизация.Значение, ДанныеОрганизация.Представление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Проверяет, что у пользователя есть права на изменение настроек отправки по ЭДО,
// например при открытии формы элемента вида документа
// 
// Возвращаемое значение:
//  Булево - Истина, если право есть
//
Функция ЕстьПравоНастройкиОтправкиЭДО() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиОтправкиДокументовПоЭДО);
	
КонецФункции	

// Возвращает список идентификаторв учетных записей ЭДО отправителя ЭД.
// 
// Параметры:
//  Отправитель - СправочникСсылка.Организации - Отправитель ЭД
//  Получатель - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Получатель ЭД
//  ИдентификаторыПолучателяОтбор - Неопределено, Массив Из Строка -
// 
// Возвращаемое значение:
//  СписокЗначений Из Строка - Идентификаторы учетных записей ЭДО отправителя
//
Функция ИдентификаторыОтправителя(Отправитель, Получатель, ИдентификаторыПолучателяОтбор = Неопределено) Экспорт
	
	СписокИдентификаторов = Новый СписокЗначений; // СписокЗначений Из Строка
	ДоступныеИдентификаторыЭДО = СинхронизацияЭДО.ДоступныеИдентификаторыЭДО(Отправитель, Получатель);
	Если ИдентификаторыПолучателяОтбор = Неопределено Тогда
		ТЗ_ИдентификаторыПолучателя = ДоступныеИдентификаторыЭДО.ИдентификаторыПолучателя;
		Если ТЗ_ИдентификаторыПолучателя.Количество() > 0 Тогда
			ИдентификаторыПолучателяОтбор = ТЗ_ИдентификаторыПолучателя.ВыгрузитьКолонку("Значение")
		КонецЕсли;	
	КонецЕсли;	
	ТЗ_ИдентификаторыОтправителя = ДоступныеИдентификаторыЭДО.ИдентификаторыОтправителя;
	УдалитьНеПринятыеИдентификаторы(ТЗ_ИдентификаторыОтправителя);
	Для Каждого Идентификатор Из ТЗ_ИдентификаторыОтправителя Цикл
		СписокИдентификаторов.Добавить(Идентификатор.Значение, Идентификатор.Представление);
	КонецЦикла;
	
	Если ИдентификаторыПолучателяОтбор <> Неопределено Тогда
		ОтобратьПринятыеИдентификаторыОтправителя(СписокИдентификаторов, ИдентификаторыПолучателяОтбор);
	КонецЕсли;
	
	Возврат СписокИдентификаторов;
		 
КонецФункции

// Отбирает идентификаторы отправителя, по которым приняты приглашения к обмену ЭДО получателем (ИдентификаторыПолучателяОтбор).
// 
// Параметры:
//  ИдентификаторыОтправителя - СписокЗначений Из Строка
//  ИдентификаторыПолучателяОтбор - Массив Из Строка
//
Процедура ОтобратьПринятыеИдентификаторыОтправителя(ИдентификаторыОтправителя, ИдентификаторыПолучателяОтбор)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК Значение,
		|	УчетныеЗаписиЭДО.НаименованиеУчетнойЗаписи КАК Представление
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации В (&ИдентификаторыОтправителя)
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента В (&ИдентификаторыПолучателя)
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	
	Запрос.УстановитьПараметр("ИдентификаторыОтправителя", ИдентификаторыОтправителя);
	Запрос.УстановитьПараметр("ИдентификаторыПолучателя", ИдентификаторыПолучателяОтбор);
	
	РезультатЗапроса = Запрос.Выполнить();
	ИдентификаторыОтправителя.Очистить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;		
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ИдентификаторыОтправителя.Добавить(), Выборка);
	КонецЦикла;

КонецПроцедуры	


// Возвращает список идентификаторв учетных записей ЭДО получателя ЭД.
// 
// Параметры:
//  Отправитель - СправочникСсылка.Организации - Отправитель ЭД
//  Получатель - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Получатель ЭД
//  ИдентификаторыОтправителяОтбор - Неопределено, Массив Из Строка -
// 
// Возвращаемое значение:
//  СписокЗначений Из Строка - Идентификаторы учетных записей ЭДО получателя
//
Функция ИдентификаторыПолучателя(Отправитель, Получатель, ИдентификаторыОтправителяОтбор = Неопределено) Экспорт
	
	СписокИдентификаторов = Новый СписокЗначений; // СписокЗначений Из Строка
	ДоступныеИдентификаторыЭДО = СинхронизацияЭДО.ДоступныеИдентификаторыЭДО(Отправитель, Получатель);
	Если ИдентификаторыОтправителяОтбор = Неопределено Тогда
		ТЗ_ИдентификаторыОтправителя = ДоступныеИдентификаторыЭДО.ИдентификаторыОтправителя;
		Если ТЗ_ИдентификаторыОтправителя.Количество() > 0 Тогда
			ИдентификаторыОтправителяОтбор = ТЗ_ИдентификаторыОтправителя.ВыгрузитьКолонку("Значение")
		КонецЕсли;	
	КонецЕсли;	
	ТЗ_ИдентификаторыПолучателя = ДоступныеИдентификаторыЭДО.ИдентификаторыПолучателя;
	УдалитьНеПринятыеИдентификаторы(ТЗ_ИдентификаторыПолучателя);
	Для Каждого Идентификатор Из ТЗ_ИдентификаторыПолучателя Цикл
		СписокИдентификаторов.Добавить(Идентификатор.Значение, Идентификатор.Представление);
	КонецЦикла;
	Если ИдентификаторыОтправителяОтбор <> Неопределено Тогда
		ОтобратьПринятыеИдентификаторыПолучателя(СписокИдентификаторов, ИдентификаторыОтправителяОтбор);
	КонецЕсли;	
	
	Возврат СписокИдентификаторов;
	
КонецФункции

// Отбирает идентификаторы получателя, по которым приняты приглашения к обмену ЭДО от отправителя (ИдентификаторыОтправителяОтбор).
// 
// Параметры:
//  ИдентификаторыПолучателя - СписокЗначений Из Строка
//  ИдентификаторыОтправителяОтбор - Массив Из Строка
//
Процедура ОтобратьПринятыеИдентификаторыПолучателя(ИдентификаторыПолучателя, ИдентификаторыОтправителяОтбор)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК Значение,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК Представление
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации В (&ИдентификаторыОтправителя)
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента В (&ИдентификаторыПолучателя)
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	
	Запрос.УстановитьПараметр("ИдентификаторыОтправителя", ИдентификаторыОтправителяОтбор);
	Запрос.УстановитьПараметр("ИдентификаторыПолучателя", ИдентификаторыПолучателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	ИдентификаторыПолучателя.Очистить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;		
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ИдентификаторыПолучателя.Добавить(), Выборка);
	КонецЦикла;

КонецПроцедуры

// Удаляет из таблицы идентификаторы, по которым нет ни одного принятого приглашения к обмену ЭДО
// 
// Параметры:
//  Идентификаторы - ТаблицаЗначений:
//  * Значение - Строка
//  * Представление - Строка
//
Процедура УдалитьНеПринятыеИдентификаторы(Идентификаторы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЗ_Идентификаторы.Значение,
		|	ТЗ_Идентификаторы.Представление
		|ПОМЕСТИТЬ ВТ_Идентификаторы
		|ИЗ
		|	&ТЗ_Идентификаторы КАК ТЗ_Идентификаторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Идентификаторы.Значение КАК Значение,
		|	ВТ_Идентификаторы.Представление КАК Представление
		|ПОМЕСТИТЬ ВТ_ПринятыеИдентификаторы
		|ИЗ
		|	ВТ_Идентификаторы КАК ВТ_Идентификаторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК
		|			ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО ВТ_Идентификаторы.Значение = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
		|		И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)
		|
		|Объединить Все
		|
		|ВЫБРАТЬ
		|	ВТ_Идентификаторы.Значение,
		|	ВТ_Идентификаторы.Представление
		|ИЗ
		|	ВТ_Идентификаторы КАК ВТ_Идентификаторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК
		|			ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО ВТ_Идентификаторы.Значение = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
		|		И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ПринятыеИдентификаторы.Значение,
		|	ВТ_ПринятыеИдентификаторы.Представление
		|ИЗ
		|	ВТ_ПринятыеИдентификаторы КАК ВТ_ПринятыеИдентификаторы";
	
	Запрос.УстановитьПараметр("ТЗ_Идентификаторы", Идентификаторы);
	РезультатЗапроса = Запрос.Выполнить();
	
	Идентификаторы.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = РезультатЗапроса.Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Идентификаторы.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры	

// Возвращает отправителей ЭД, отобранных, по получателю.
// 
// Параметры:
//  ПолучательЭД - Неопределено, СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Получатель ЭД для отбора отправителей
//  ОтправителиОтбор - Неопределено, Массив Из СправочникСсылка.Организации - 
//  ОтправителиИсключения - Неопределено, Массив Из СправочникСсылка.Организации -
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Организации - Отправители ЭД
//
Функция ОтправителиЭД(ПолучательЭД, ОтправителиОтбор = Неопределено, ОтправителиИсключения = Неопределено) Экспорт
	
	Отправители = Новый Массив; // Массив Из СправочникСсылка.Организации
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиОтправкиЭлектронныхДокументов.Отправитель
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК
		|			ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО НастройкиОтправкиЭлектронныхДокументов.Отправитель = ПриглашенияКОбменуЭлектроннымиДокументами.Организация
		|		И НастройкиОтправкиЭлектронныхДокументов.Получатель = ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент
		|		И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	
	Если ЗначениеЗаполнено(ПолучательЭД) Тогда
		Запрос.Текст = Запрос.Текст + " И НастройкиОтправкиЭлектронныхДокументов.Получатель = &Получатель";
		Запрос.УстановитьПараметр("Получатель", ПолучательЭД);
	КонецЕсли;	
	Если ОтправителиОтбор <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И НастройкиОтправкиЭлектронныхДокументов.Отправитель В (&ОтправителиОтбор)";
		Запрос.УстановитьПараметр("ОтправителиОтбор", ОтправителиОтбор);
	КонецЕсли;
	Если ОтправителиИсключения <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И НЕ НастройкиОтправкиЭлектронныхДокументов.Отправитель В (&ОтправителиИсключения)";
		Запрос.УстановитьПараметр("ОтправителиИсключения", ОтправителиИсключения);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Отправители.Добавить(Выборка.Отправитель);
	КонецЦикла;
	
	Возврат Отправители;
	
КонецФункции

// Возвращает получателей ЭД, отобранных, по отправителю.
// 
// Параметры:
//  ОтправительЭД - СправочникСсылка.Организации - Отправитель ЭД для отбора поолучателей
//  ПолучателиОтбор - Неопределено, Массив Из ОпределяемыйТип.УчастникЭДО - 
//  ПолучателиИсключения - Неопределено, Массив Из ОпределяемыйТип.УчастникЭДО - 
//  
// Возвращаемое значение:
//  Массив Из ОпределяемыйТип.УчастникЭДО - Получатели ЭД
//
Функция ПолучателиЭД(ОтправительЭД, ПолучателиОтбор = Неопределено, ПолучателиИсключения = Неопределено) Экспорт
	
	Получатели = Новый Массив; // Массив Из ОпределяемыйТип.УчастникЭДО
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиОтправкиЭлектронныхДокументов.Получатель
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК
		|			ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО НастройкиОтправкиЭлектронныхДокументов.Отправитель = ПриглашенияКОбменуЭлектроннымиДокументами.Организация
		|		И НастройкиОтправкиЭлектронныхДокументов.Получатель = ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент
		|		И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	
	Если ЗначениеЗаполнено(ОтправительЭД) Тогда
		Запрос.Текст = Запрос.Текст + " И НастройкиОтправкиЭлектронныхДокументов.Отправитель = &Отправитель";
		Запрос.УстановитьПараметр("Отправитель", ОтправительЭД);
	КонецЕсли;	
	Если ПолучателиОтбор <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И НастройкиОтправкиЭлектронныхДокументов.Получатель В (&ПолучателиОтбор)";
		Запрос.УстановитьПараметр("ПолучателиОтбор", ПолучателиОтбор);
	КонецЕсли;
	Если ПолучателиИсключения <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И НЕ НастройкиОтправкиЭлектронныхДокументов.Получатель В (&ПолучателиИсключения)";
		Запрос.УстановитьПараметр("ПолучателиИсключения", ПолучателиИсключения);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Получатели.Добавить(Выборка.Получатель);
	КонецЦикла;
	
	Возврат Получатели;
		
КонецФункции

// Установить параметры выбора вида документа ЭДО.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура УстановитьПараметрыВыбораВидаДокументаЭДО(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка",
		ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовИсходящиеПрикладные());
	МассивПараметров = Новый Массив; // Массив Из ПараметрВыбора
	МассивПараметров.Добавить(ПараметрВыбора);
	Элементы.ВидДокументаЭДО.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Если Элементы.Найти("ТаблицаНастроекЭДОВидДокументаЭДО") <> Неопределено Тогда
		Элементы.ТаблицаНастроекЭДОВидДокументаЭДО.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область Визуализация

Функция КлючНастроекВизуализации()
	
	Возврат "НастройкиВизуализацииФормализованныхФайловЭДО";
	
КонецФункции

// Конструктор настроек визуализации
// 
// Возвращаемое значение:
//  Структура:
// * ОтключитьВыводДопДанных - Булево - 
// * ОтключитьВыводКопияВерна - Булево - 
// * ВыводитьБанковскиеРеквизиты - Булево - 
Функция НовыеНастройкиВизуализацииФормализованногоФайлаЭДО()
	
	НастройкиВизуализации = Новый Структура;
	НастройкиВизуализации.Вставить("ОтключитьВыводДопДанных", Истина);
	НастройкиВизуализации.Вставить("ОтключитьВыводКопияВерна", Истина);
	НастройкиВизуализации.Вставить("ВыводитьБанковскиеРеквизиты", Истина);
	
	Возврат НастройкиВизуализации;
	
КонецФункции

Функция ПолучитьСообщение(ДокументЭДО, ТипЭлементаРегламентаИскомый) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеЭДО.Ссылка КАК Сообщение
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеЭДО.Дата";  
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументЭДО);
	Запрос.УстановитьПараметр("ТипЭлементаРегламента", ТипЭлементаРегламентаИскомый);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	  
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Сообщение;
	
КонецФункции	

#КонецОбласти

#Область ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов

// Дополняет описание реквизитов правил автоматического создания объектов описанием общих реквизитов.
//
// Параметры:
//	ОписаниеРеквизитов - см. ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов
//
Процедура ОписаниеОбщихРеквизитовПравилАвтоматическогоСозданияОбъектов(ОписаниеРеквизитов)
	
	ОбменЭДОДокументооборотПереопределяемый.ОписаниеОбщихРеквизитовПравилАвтоматическогоСозданияОбъектов(ОписаниеРеквизитов);
	
КонецПроцедуры

// Дополняет описание реквизитов правил автоматического создания объектов описанием реквизитов зависящих от вида (типа, формата) электронного документа.
//
// Параметры:
//	ОписаниеРеквизитов - см. ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов.
//	Вид - СправочникСсылка.ВидыДокументовЭДО - Вид электронного документа.
//	Тип - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
//	Формат - Строка - Формат электронного документа.
//
Процедура ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектовЗависящихОтВидаТипаФормата(ОписаниеРеквизитов, Вид, Тип, Формат)
	
	ОбменЭДОДокументооборотПереопределяемый.ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектовЗависящихОтВидаТипаФормата(
		ОписаниеРеквизитов, Вид, Тип, Формат);
	
КонецПроцедуры

#КонецОбласти

#Область Уведомления

// подписка на событие. РегистрСведенийНаборЗаписей.СостоянияДокументовЭДО
// 
// Параметры:
//  Источник - РегистрСведенийНаборЗаписей.СостоянияДокументовЭДО - Источник
//  Отказ - Булево - Отказ
//  Замещение - Булево - Замещение
Процедура ЭДОИзменениеСостоянияДокументаПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.Количество() = 1 Тогда
		
		Состояние = Источник[0].Состояние;
		
		Если Состояние = Перечисления.СостоянияДокументовЭДО.Аннулирован
			Или Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение
			Или Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
			
			ЭлектронныйДокумент = Источник[0].ЭлектронныйДокумент;   
			
			ЭлектронныеДокументы = Новый Массив;
			ЭлектронныеДокументы.Добавить(ЭлектронныйДокумент);
			ДокументыДО = ИнтеграцияЭДО.ОбъектыУчетаАктуальныхЭлектронныхДокументов(ЭлектронныеДокументы);
			Если ДокументыДО.Количество() <> 0 Тогда
				
				ДокументДО = ДокументыДО[0].ОбъектУчета; // СправочникСсылка.ДокументыПредприятия
				// пошлем уведомление
				
				Если Состояние = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
					УведомитьОСобытииПоДокументуЭДО(ДокументДО, ЭлектронныйДокумент,
						Перечисления.СобытияУведомлений.ЭДОДокументАннулирован);
						
				ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
					УведомитьОСобытииПоДокументуЭДО(ДокументДО, ЭлектронныйДокумент,
						Перечисления.СобытияУведомлений.ЭДОДокументОтклонен);
						
				ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
					УведомитьОСобытииПоДокументуЭДО(ДокументДО, ЭлектронныйДокумент,
						Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования);
						
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомления по событиям документа ЭДО: аннулирование, исправление
// 
// Параметры:
//  ДокументДО - СправочникСсылка.ДокументыПредприятия - ссылка на объект учета.
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - актуальный электронный документ.
//  Событие - ПеречислениеСсылка.СобытияУведомлений - Тип события
Процедура УведомитьОСобытииПоДокументуЭДО(ДокументДО, ЭлектронныйДокумент, Событие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОтветственныеЗаДокумент = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДО,
		"Подготовил, Ответственный");
	УстановитьПривилегированныйРежим(Ложь);
	
	КогоУведомлять = ОтветственныеЗаДокумент.Подготовил; 
	Если ЗначениеЗаполнено(ОтветственныеЗаДокумент.Ответственный) Тогда
		КогоУведомлять = ОтветственныеЗаДокумент.Ответственный;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КогоУведомлять) Тогда
		Возврат;
	КонецЕсли; 
	
	КогоУведомлятьПользователь = Сотрудники.ПользовательСотрудника(КогоУведомлять);

	Если Не КОДСервер.ЭтоОсновнойУзелПользователя(КогоУведомлятьПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	СводкаПоДокументам = "";
	
	СсылкиНаДокументы = РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ДокументДО);
	
	Если Событие = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован Тогда
		ШаблонТекста = НСтр("ru = 'Документ ЭДО аннулирован (%1).
		|
		|%2'");
	ИначеЕсли Событие = Перечисления.СобытияУведомлений.ЭДОДокументИсправлен Тогда
		ШаблонТекста = НСтр("ru = 'Документ ЭДО исправлен (%1).
		|
		|%2'");
	ИначеЕсли Событие = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен Тогда
		ШаблонТекста = НСтр("ru = 'Документ ЭДО отклонен (%1).
		|
		|%2'");
		
	ИначеЕсли Событие = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования Тогда
		ШаблонТекста = НСтр("ru = 'Документ ЭДО: требуется подтверждение аннулирования (%1).
		|
		|%2'");
		
	КонецЕсли;
		
	СводкаПоДокументам = СтрШаблон(
		ШаблонТекста,
		ЭлектронныйДокумент,
		СсылкиНаДокументы);
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
		КогоУведомлятьПользователь, Событие,
		ДокументДО, ДокументДО,
		СводкаПоДокументам, Ложь);

КонецПроцедуры

// Обработчик одноименной подписки на событие
// 
// Параметры:
//  Источник - ДокументОбъект.ЭлектронныйДокументВходящийЭДО
//  Отказ - Булево
//  РежимЗаписи - РежимЗаписиДокумента
//  РежимПроведения - РежимПроведенияДокумента
Процедура ЭлектронныйДокументВходящийЭДОПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.Исправлен Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ПредыдущееЗначениеИсправлен",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Исправлен"));
	
КонецПроцедуры

// Обработчик одноименной подписки на событие
// 
// Параметры:
//  Источник - ДокументОбъект.ЭлектронныйДокументВходящийЭДО
//  Отказ - Булево
Процедура ЭлектронныйДокументВходящийЭДОПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда 
		Возврат;
	КонецЕсли;
	
	ПредыдущееЗначениеИсправлен = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ПредыдущееЗначениеИсправлен", ПредыдущееЗначениеИсправлен);
	Если ПредыдущееЗначениеИсправлен = Ложь И Источник.Исправлен Тогда
		// Сформируем уведомление
		УстановитьПривилегированныйРежим(Истина);
		ДокументыДО = ИнтеграцияЭДО.ОбъектыУчетаАктуальныхЭлектронныхДокументов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка));
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДокументыДО.Количество() Тогда
			ДокументДО = ДокументыДО[0].ОбъектУчета; // СправочникСсылка.ДокументыПредприятия
			УведомитьОСобытииПоДокументуЭДО(ДокументДО, Источник.Ссылка,
				Перечисления.СобытияУведомлений.ЭДОДокументИсправлен);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеДокументовДО

// Возвращает пустые данные ЭДО документа ДО
// 
// Возвращаемое значение:
//  Структура - Новые данные ЭДОДокумента ДО:
// * ВозможнаОтправкаЭДО - Булево - 
// * АктуальныйДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
// * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
// * ИдентификаторПакетаЭДО - УникальныйИдентификатор - 
Функция НовыеДанныеЭДОДокументаДО()
	
	ДанныеЭДО = Новый Структура;
	ДанныеЭДО.Вставить("ВозможнаОтправкаЭДО", Ложь);
	ДанныеЭДО.Вставить("АктуальныйДокументЭДО", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	ДанныеЭДО.Вставить("СостояниеЭДО", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	ДанныеЭДО.Вставить("ИдентификаторПакетаЭДО", УникальныйИдентификаторПустой());
	
	Возврат ДанныеЭДО;
	
КонецФункции

// Возвращает соответтвие возможности отправки по ЭДО документов ДО
// 
// Параметры:
//  ДокументыДО - Массив Из СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ДокументыПредприятия
//    * Значение - Булево
Функция ДанныеОВозможностиОтправкиПоЭДОДокументовДО(ДокументыДО)
	
	ВозможностьОтправки = Новый Соответствие();
	Для Каждого Документ Из ДокументыДО Цикл
		ВозможностьОтправки[Документ] = Ложь;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Ссылка КАК Документ,
		|	ВидыДокументов.ИспользоватьЭДО КАК ОтправлятьПоЭДО
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО ДокументыПредприятия.ВидДокумента = ВидыДокументов.Ссылка
		|ГДЕ
		|	ДокументыПредприятия.Ссылка В (&ДокументыДО)";
	Запрос.УстановитьПараметр("ДокументыДО", ДокументыДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВозможностьОтправки[Выборка.Документ] = Выборка.ОтправлятьПоЭДО;
	КонецЦикла;
	
	Возврат ВозможностьОтправки
	
КонецФункции

#Область ЗаполнениеДанныхЭДООбъектаУчета

// Возвращает реквизиты дкоумента ДО по объекту
// 
// Параметры:
//  ДокументОбъект - СправочникОбъект.ДокументыПредприятия
// 
// Возвращаемое значение:
//  см. НовыеРеквизитыДокументаДляЗаполненияПараметровЭДО
Функция РеквизитыДокументаДОПоОбъекту(ДокументОбъект)
	
	Реквизиты = НовыеРеквизитыДокументаДляЗаполненияПараметровЭДО();
	Реквизиты.ВидДокумента = ДокументОбъект.ВидДокумента;
	Реквизиты.ФормаДокумента = ДокументОбъект.ФормаДокумента;
	Реквизиты.Организация = ДокументОбъект.Организация;
	
	Для Каждого СтрокаСторон Из ДокументОбъект.Стороны Цикл
		Реквизиты.Стороны.Добавить(СтрокаСторон.Сторона);
	КонецЦикла;
	
	Для Каждого СтрокаКонтрагента Из ДокументОбъект.Контрагенты Цикл
		Реквизиты.Контрагенты.Добавить(СтрокаКонтрагента.Контрагент);
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает структуру реквизитов по ссылке на документ
// 
// Параметры:
//  ДокументСсылка - СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  см. НовыеРеквизитыДокументаДляЗаполненияПараметровЭДО
Функция РеквизитыДокументаДОПоСсылке(ДокументСсылка)
	
	Реквизиты = НовыеРеквизитыДокументаДляЗаполненияПараметровЭДО();
	
	Выборки = ВыборкиРеквизитовДокументаДляЗаполненияДанныхЭДО(ДокументСсылка);
	
	Если Выборки.Реквизиты.Следующий() Тогда
		Реквизиты.ВидДокумента = Выборки.Реквизиты.ВидДокумента;
		Реквизиты.Организация = Выборки.Реквизиты.Организация;
		Реквизиты.ФормаДокумента = Выборки.Реквизиты.ФормаДокумента;
	КонецЕсли;
	
	Пока Выборки.Стороны.Следующий() Цикл
		Реквизиты.Стороны.Добавить(Выборки.Стороны.Сторона);
	КонецЦикла;
	
	Пока Выборки.Контрагенты.Следующий() Цикл
		Реквизиты.Контрагенты.Добавить(Выборки.Контрагенты.Контрагент);
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает выборки реквизитов документа ДО
// 
// Параметры:
//  ДокументСсылка - СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  Структура:
//    * Реквизиты - ВыборкаИзРезультатаЗапроса:
//      ** ВидДокумента - СправочникСсылка.ВидыДокументов
//      ** Организация - СправочникСсылка.Организации
//      ** ФормаДокумента - ПеречислениеСсылка.ВариантыФормДокументов
//    * Стороны - ВыборкаИзРезультатаЗапроса:
//      ** Сторона - СправочникСсылка.Организации, СправочникСсылка.Контрагенты -
//    * Контрагенты - ВыборкаИзРезультатаЗапроса:
//      ** Контрагент - СправочникСсылка.Контрагенты
//
Функция ВыборкиРеквизитовДокументаДляЗаполненияДанныхЭДО(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыПредприятия.ВидДокумента КАК ВидДокумента,
		|	ДокументыПредприятия.ФормаДокумента КАК ФормаДокумента,
		|	ДокументыПредприятия.Организация КАК Организация
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.Ссылка = &ДокументДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПредприятияСтороны.Сторона КАК Сторона
		|ИЗ
		|	Справочник.ДокументыПредприятия.Стороны КАК ДокументыПредприятияСтороны
		|ГДЕ
		|	ДокументыПредприятияСтороны.Ссылка = &ДокументДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПредприятияКонтрагенты.Контрагент КАК Контрагент
		|ИЗ
		|	Справочник.ДокументыПредприятия.Контрагенты КАК ДокументыПредприятияКонтрагенты
		|ГДЕ
		|	ДокументыПредприятияКонтрагенты.Ссылка = &ДокументДО";
	Запрос.УстановитьПараметр("ДокументДО", ДокументСсылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаРеквизитов = РезультатыЗапроса[0].Выбрать();
	ВыборкаСторон = РезультатыЗапроса[1].Выбрать();
	ВыборкаКонтрагентов = РезультатыЗапроса[2].Выбрать();
	
	Выборки = Новый Структура;
	Выборки.Вставить("Реквизиты", ВыборкаРеквизитов);
	Выборки.Вставить("Стороны", ВыборкаСторон);
	Выборки.Вставить("Контрагенты", ВыборкаКонтрагентов);
	
	Возврат Выборки;
	
КонецФункции

// Конструктор данных об объекте учета
// 
// Возвращаемое значение:
//  Структура:
// * ОтправлятьПоЭДО - Булево - 
// * ВидДокументаЭДО - СправочникСсылка.ВидыДокументовЭДО - 
// * Организация - СправочникСсылка.Организации - 
// * Контрагент - СправочникСсылка.Контрагенты - 
Функция НовыеДанныеОбОбъектеУчета()
	
	ДанныеОбОбъектеУчета = Новый Структура;
	ДанныеОбОбъектеУчета.Вставить("ОтправлятьПоЭДО", Ложь);
	ДанныеОбОбъектеУчета.Вставить("ВидДокументаЭДО", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ДанныеОбОбъектеУчета.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ДанныеОбОбъектеУчета.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Возврат ДанныеОбОбъектеУчета;
	
КонецФункции

// Конструктор реквизитов документа ДО для заполнения параметров ЭДО
// 
// Возвращаемое значение:
//  Структура:
// * ВидДокумента - СправочникСсылка.ВидыДокументов - 
// * ФормаДокумента - ПеречислениеСсылка.ВариантыФормДокументов - 
// * Стороны - Массив Из СправочникСсылка.Организации, СправочникСсылка.Контрагенты
// * Организация - СправочникСсылка.Организации - 
// * Контрагенты - Массив Из СправочникСсылка.Контрагенты
Функция НовыеРеквизитыДокументаДляЗаполненияПараметровЭДО()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ВидДокумента", Справочники.ВидыДокументов.ПустаяСсылка());
	Реквизиты.Вставить("ФормаДокумента", Перечисления.ВариантыФормДокументов.ПустаяСсылка());
	Реквизиты.Вставить("Стороны", Новый Массив());
	Реквизиты.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Реквизиты.Вставить("Контрагенты", Новый Массив());
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает данные об объекте учета по реквизитам документам
// 
// Параметры:
//  Реквизиты - см. НовыеРеквизитыДокументаДляЗаполненияПараметровЭДО
// 
// Возвращаемое значение:
//  см. НовыеДанныеОбОбъектеУчета
Функция ДанныеОбОбъектеУчетаПоРеквизитам(Реквизиты)
	
	Данные = НовыеДанныеОбОбъектеУчета();
	
	ВидДокумента = Реквизиты.ВидДокумента;
	ОтправлятьПоЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ИспользоватьЭДО");
	Если Не ОтправлятьПоЭДО Тогда
		Возврат Данные;
	КонецЕсли;
	
	Если Реквизиты.ФормаДокумента <> Перечисления.ВариантыФормДокументов.Электронная Тогда
		Возврат Данные;
	КонецЕсли;
	
	Стороны = СтороныОбменаПоРеквизитамДокументаДО(Реквизиты);
	
	НастройкиОтправки = Неопределено;
	Если ЗначениеЗаполнено(Стороны.Организация) И ЗначениеЗаполнено(Стороны.Контрагент) Тогда
		//@skip-check dynamic-access-method-not-found
		НастройкиОтправки =
			РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента(
				Стороны.Организация, Стороны.Контрагент, ВидДокумента); // см. РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
		//@skip-check dynamic-access-method-not-found
		НастройкиОтправки =
			РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.ОбщиеНастройкиОтправкиВидаДокумента(ВидДокумента); // см. РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
		Возврат Данные;
	КонецЕсли;
	
	Данные.ОтправлятьПоЭДО = Истина;
	Данные.Организация = Стороны.Организация;
	Данные.Контрагент = Стороны.Контрагент;
	Данные.ВидДокументаЭДО = НастройкиОтправки.ВидДокументаЭДО;
	
	Возврат Данные;
	
КонецФункции

// Возвращает стороны обмена по реквизитам документа ДО
// 
// Параметры:
//  Реквизиты - см. НовыеРеквизитыДокументаДляЗаполненияПараметровЭДО
// 
// Возвращаемое значение:
//  Структура:
//    * Организация - СправочникСсылка.Организации
//    * Контрагент - СправочникСсылка.Контрагенты
//
Функция СтороныОбменаПоРеквизитамДокументаДО(Реквизиты)
	
	Стороны = Новый Структура;
	Стороны.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Стороны.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	ПараметрФО = Новый Структура("ВидДокумента", Реквизиты.ВидДокумента);
	ВестиУчетСторон = ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоСторонам", ПараметрФО);
	
	Если ВестиУчетСторон Тогда
		
		Организации = Новый Массив(); // Массив Из СправочникСсылка.Организации
		Контрагенты = Новый Массив(); // Массив Из СправочникСсылка.Контрагенты
		
		Для Каждого Сторона Из Реквизиты.Стороны Цикл
			
			Если Не ЗначениеЗаполнено(Сторона) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Сторона) = Тип("СправочникСсылка.Организации") Тогда
				Организации.Добавить(Сторона);
			ИначеЕсли ТипЗнч(Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
				Контрагенты.Добавить(Сторона);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Организации.Количество() = 1 Тогда
			Стороны.Организация = Организации[0];
		КонецЕсли;
		Если Контрагенты.Количество() = 1 Тогда
			Стороны.Контрагент = Контрагенты[0];
		КонецЕсли;
		
	Иначе
		
		ВестиУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям", ПараметрФО);
		ВестиУчетиПоКонтрагентам = ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКонтрагентам", ПараметрФО);
		
		ИспользуетсяУчетОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
		ИспользуетсяНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
		
		Если ИспользуетсяУчетОрганизаций И ВестиУчетПоОрганизациям Тогда
			
			Если ИспользуетсяНесколькоОрганизаций Тогда
				Стороны.Организация = Реквизиты.Организация;
			Иначе
				Стороны.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ВестиУчетиПоКонтрагентам И Реквизиты.Контрагенты.Количество() = 1 Тогда
			Стороны.Контрагент = Реквизиты.Контрагенты[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Стороны;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
