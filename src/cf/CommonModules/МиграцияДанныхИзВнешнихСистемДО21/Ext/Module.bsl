#Область ОбработчикиСобытий

// Вызывается перед стандартной загрузкой порции данных одного типа.
// До начала транзакции. Рекомендуется для реструктуризации, конвертации объектов, проверки и заполнения значений по умолчанию. 
//
// Параметры:
//  ИмяИсточника		 - Строка - Имя объекта в терминах конфигурации источника. Доступно для изменения на имя объекта в новой конфигурации.
//  Порция			 	 - ТаблицаЗначений - таблица данных загрузки. В структуре метаданных источника.
//  Источник			 - СтрокаТаблицыЗначений - строка таблицы данных загрузки. В структуре метаданных источника. 
//  Замены				 - ТаблицаЗначений - таблица значений для замены в приемнике. По умолчанию содержит значения удаленных типов. Доступна для изменения. 
//  Настройки			 - Структура - кэш общих настроек обмена и служебных данных текущего сообщения.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной загрузки.
//  Загрузка			 - Булево - режим ОбменДанными.Загрузка.
//
Процедура ЗагрузкаДанных_ДО8_2_1(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки) Экспорт 

	ИмяИсточника = ПараметрыЗагрузки.ИмяОбъекта;
	ИмяИсточникаОригинальное = ПараметрыЗагрузки.ИмяИсточникаОригинальное;	
	
	Если ИмяИсточникаОригинальное = "Справочник.Пользователи" Тогда
		
		КонвертацияПользователя(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточникаОригинальное = "РегистрСведений.СведенияОПользователяхДокументооборот" Тогда
		
		КонвертацияСведенийОПользователе(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки); 

	ИначеЕсли ИмяИсточникаОригинальное = "Справочник.ВидыКонтактнойИнформации" Тогда
		
		ОбновитьВидКонтактнойИнформацииСотрудника(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.УровниКонтроля" Тогда
		КонвертацияУровниКонтроля(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

	ИначеЕсли ИмяИсточника = "Справочник.ВидыОтсутствий"
		Или ИмяИсточника = "Справочник.ПапкиФорума" 
		Или ИмяИсточника = "Справочник.СтраныМира" Тогда
		КонвертацияСправочникаСПоискомПоНаименованию(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточникаОригинальное = "Справочник.ВходящиеДокументы"
		Или ИмяИсточникаОригинальное = "Справочник.ИсходящиеДокументы" 
		Или ИмяИсточникаОригинальное = "Справочник.ВнутренниеДокументы" Тогда
		КонвертацияДокументов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточникаОригинальное = "Справочник.ВидыВходящихДокументов"
		Или ИмяИсточникаОригинальное = "Справочник.ВидыВнутреннихДокументов"
		Или ИмяИсточникаОригинальное = "Справочник.ВидыИсходящихДокументов" Тогда
		
		ДополнитьДоступностьСозданияВида(Источник, Порция);
		КонвертацияВидовДокументов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.ПапкиДокументов" Тогда
		
		Если Константы.ИспользоватьПапкиДокументов.Получить() = Ложь Тогда
			Константы.ИспользоватьПапкиДокументов.Установить(Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяИсточника = "Справочник.СтруктураПредприятия" Тогда
		КонвертацияСтруктураПредприятия(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточникаОригинальное = "Справочник.ШаблоныВходящихДокументов"
		Или ИмяИсточникаОригинальное = "Справочник.ШаблоныИсходящихДокументов" Тогда
		
		Если ЗначениеЗаполнено(Источник.ВидДокумента) Тогда // если не заполнено - не грузим, пропускаем
		
			КонвертацияАвтоподстановокВШаблонахДокументов(Источник, ИмяИсточникаОригинальное);
			КонвертацияШаблоновДокументов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
		Иначе
			
			СтандартнаяОбработка = Ложь;
				
			МиграцияДанныхИзВнешнихСистемСервер.Журналировать(
				НСтр("ru = 'Загрузка'"),
				СтрШаблон(НСтр("ru = 'Шаблон документа не был загружен (пропущен, т.к. ВидДокумента не заполнен): %1'"),
					Источник.Наименование),
				Ложь,
				Источник.Наименование);
			
		КонецЕсли;	
		
	ИначеЕсли ИмяИсточникаОригинальное = "РегистрСведений.СведенияОСообщенияхОбменаСИнтегрированнымиСистемами" Тогда

		СтандартнаяОбработка = Ложь; // просто не загружаем.
			
	ИначеЕсли ИмяИсточникаОригинальное = "Справочник.ШаблоныВнутреннихДокументов" Тогда

		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(Источник.ВидДокумента) Тогда // если не заполнено - не грузим, пропускаем

			КонвертацияАвтоподстановокВШаблонахДокументов(Источник, ИмяИсточникаОригинальное);
			МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
				Источник, Приемник, Порция, ПараметрыЗагрузки);
				
		Иначе
				
			МиграцияДанныхИзВнешнихСистемСервер.Журналировать(
				НСтр("ru = 'Загрузка'"),
				СтрШаблон(НСтр("ru = 'Шаблон документа не был загружен (пропущен, т.к. ВидДокумента не заполнен): %1'"),
					Источник.Наименование),
				Ложь,
				Источник.Наименование);
			
		КонецЕсли;	
	
	ИначеЕсли ИмяИсточника = "Справочник.ВизыСогласования" Тогда
		КонвертацияВизСогласования(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
			
	ИначеЕсли ИмяИсточника = "Справочник.РабочиеГруппы" Тогда
		
		ЗагрузитьРабочиеГруппы(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "ПланВидовХарактеристик.ВидыДоступа" Тогда
		
		Если Источник.ИмяПредопределенныхДанных = "ВидыВнутреннихДокументов" Тогда
			Источник.ИмяПредопределенныхДанных = "ВидыДокументов";
			Источник.Наименование = "Виды документов";
		КонецЕсли;
		
		Если Источник.ИмяПредопределенныхДанных = "ВидыВходящихДокументов" Или
			Источник.ИмяПредопределенныхДанных = "ВидыИсходящихДокументов" Тогда
			
			СтандартнаяОбработка = Ложь;
			Возврат;
			
		КонецЕсли;

	//!!!Заглушка	
	ИначеЕсли ИмяИсточника = "Документ.ТранспортныйКонтейнерЭДО"
		И ПараметрыЗагрузки.Настройки.Сообщение.ИмяИсточника = "Справочник.ПерепискаСКонтролирующимиОрганами" Тогда
		
		Если Порция.Колонки.Найти("Дата") = Неопределено Тогда 
			Порция.Колонки.Добавить("Дата");
		КонецЕсли;	
		Источник.Дата = ТекущаяДата();
		
		СтандартнаяОбработка = Ложь;
	
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	////
	
	ИначеЕсли ИмяИсточника = "Справочник.ГруппыЛичныхАдресатов"
		Или ИмяИсточника = "Справочник.ЛичныеАдресаты" Тогда
		
		ЗаменитьИмяКолонки(Порция, "Пользователь", "Сотрудник");
						
		СтандартнаяОбработка = Ложь;
	
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки);
						
	ИначеЕсли ИмяИсточника = "Справочник.УчетныеЗаписиЭлектроннойПочты" Тогда
		
		ЗаменитьИмяКолонки(Источник.ОтветственныеЗаОбработкуПисем, "Пользователь", "Сотрудник");

		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(Источник.ИмяПредопределенныхДанных) Тогда
			Возврат; // не грузим предопределенную учетку. в 30 у нее другой адрес.
		КонецЕсли;	
	
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточникаОригинальное = "Справочник.ШаблоныПоручения" Тогда
		
		КонвертацияШаблонаПоручения(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточникаОригинальное = "Справочник.ШаблоныСоставныхБизнесПроцессов" Тогда
		
		КонвертацияШаблонаСоставногоБизнесПроцесса(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ШаблоныИсполнения" Тогда
		
		КонвертацияШаблонаИсполнения(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ШаблоныКомплексныхБизнесПроцессов" Тогда
		
		КонвертацияШаблонаКомплексногоБизнесПроцесса(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ШаблоныОзнакомления" Тогда
		
		КонвертацияШаблонаОзнакомления(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
			
	ИначеЕсли ИмяИсточника = "Справочник.ШаблоныПриглашения" Тогда
	
		КонвертацияШаблонаПриглашения(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ШаблоныРассмотрения" Тогда
		
		КонвертацияШаблонаРассмотрения(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.ШаблоныРегистрации" Тогда
		
		КонвертацияШаблонаРегистрации(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.ШаблоныСогласования" Тогда
		
		КонвертацияШаблонаСогласования(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.ШаблоныУтверждения" Тогда
		
		КонвертацияШаблонаУтверждения(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "БизнесПроцесс.Утверждение" Тогда
		
		КонвертацияПроцессаУтверждение(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточникаОригинальное = "БизнесПроцесс.ОбработкаВнутреннегоДокумента" Тогда
		
		КонвертацияПроцессаОбработкиВнутреннегоДокумента(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточникаОригинальное = "БизнесПроцесс.ОбработкаВходящегоДокумента" Тогда
		
		КонвертацияПроцессаОбработкиВходящегоДокумента(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточникаОригинальное = "БизнесПроцесс.ОбработкаИсходящегоДокумента" Тогда
		
		КонвертацияПроцессаОбработкиИсходящегоДокумента(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "БизнесПроцесс.КомплексныйПроцесс" Тогда
		
		КонвертацияКомплексногоПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "БизнесПроцесс.Согласование" Тогда
		
		КонвертацияПроцессаСогласования(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "БизнесПроцесс.Исполнение" Тогда
		
		КонвертацияПроцессаИсполнение(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

	ИначеЕсли ИмяИсточника = "БизнесПроцесс.Ознакомление" Тогда
		
		КонвертацияПроцессаОзнакомление(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

	ИначеЕсли ИмяИсточника = "БизнесПроцесс.Приглашение" Тогда
		
		КонвертацияПроцессаПриглашение(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

	ИначеЕсли ИмяИсточника = "БизнесПроцесс.Рассмотрение" Тогда
		
		КонвертацияПроцессаРассмотрение(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

	ИначеЕсли ИмяИсточника = "БизнесПроцесс.Регистрация" Тогда
		
		КонвертацияПроцессаРегистрация(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "БизнесПроцесс.РешениеВопросовВыполненияЗадач" Тогда
		
		КонвертацияПроцессаРешениеВопросовВыполненияЗадач(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.УдалитьСхемыКомплексныхПроцессов" Тогда
		
		КонвертацияСхемыКомплексногоПроцесса(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "РегистрСведений.УдалитьСкриптыСхемКомплексныхПроцессов" Тогда
		
		КонвертацияСкриптаСхемыКомплексногоПроцесса(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
			
	ИначеЕсли ИмяИсточника = "Задача.ЗадачаИсполнителя" Тогда
		
		КонвертацияЗадачиПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.НастройкаШаблоновБизнесПроцессов" Тогда
		//  вызов зонтика - но сперва данные надо записать.
		СтандартнаяОбработка = Ложь;
		Если Источник.ВидИнтерактивногоСобытия = Перечисления.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоВходящегоДокумента
			Или Источник.ВидИнтерактивногоСобытия = Перечисления.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоИсходящегоДокумента Тогда 
			Источник.ВидИнтерактивногоСобытия = Перечисления.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоДокумента;
		ИначеЕсли Источник.ВидИнтерактивногоСобытия = Перечисления.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияВходящегоДокумента
			Или Источник.ВидИнтерактивногоСобытия = Перечисления.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияИсходящегоДокумента Тогда 
			Источник.ВидИнтерактивногоСобытия = Перечисления.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияДокумента;
		КонецЕсли;
		
		МиграцияДанныхИзВнешнихСистемСервер.ЗаписатьНезависимыйРегистр(
			Порция, Источник, Приемник, ПараметрыЗагрузки);
			
		ЗагрузитьНастройкиШаблоновБизнесПроцессов(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
			
	ИначеЕсли ИмяИсточника = "РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов" Тогда
		
		ЗагрузитьПравилаАвтоматическогоЗапускаБизнесПроцессов(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		ЗагрузитьНастройкиШаблоновБизнесПроцессов(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
			
	ИначеЕсли ИмяИсточника = "Справочник.НастройкиДоступностиПоСостоянию" Тогда
	
		ОбработатьНДПС(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.Нумераторы" Тогда
	
		КонвертацияНумераторов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.Нумерация" Тогда
	
		КонвертацияРегистраНумерации(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.НастройкиНумерации" Тогда
	
		КонвертацияРегистраНастройкиНумерации(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ПравилаАвтоматическойКатегоризацииДанных" Тогда
		
		КонвертацияПравилАвтоматическойКатегоризацииДанных(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.Резолюции" Тогда
		КонвертацияРезолюций(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
			
	ИначеЕсли ИмяИсточника = "Справочник.Календари" 
		Или ИмяИсточника = "Справочник.ГрафикиРаботы" Тогда
		КонвертацияСправочникаСПредопределеннымЗначением(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
			
	ИначеЕсли ИмяИсточника = "Документ.Бронь" Тогда
		
		ЗаменитьИмяКолонки(Порция, "Пользователь", "Сотрудник");
		
		Если Порция.Колонки.Найти("СостояниеБрони") = Неопределено Тогда
			Порция.Колонки.Добавить("СостояниеБрони");
		КонецЕсли;
		Если Порция.Колонки.Найти("ПричинаОтмены") = Неопределено Тогда
			Порция.Колонки.Добавить("ПричинаОтмены");
		КонецЕсли;
		Если Источник.ПометкаУдаления Тогда
			Источник.СостояниеБрони = Перечисления.СостоянияБроней.Отменена;
			Источник.ПричинаОтмены = НСтр("ru = 'Бронь помечена на удаление'");
		Иначе
			Источник.СостояниеБрони = Перечисления.СостоянияБроней.Подтверждена;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки);
			
	ИначеЕсли ИмяИсточника = "РегистрСведений.МоиДокументы" Тогда
		
		ЗаменитьИмяКолонки(Порция, "Пользователь", "Сотрудник");
		КонвертацияМоиДокументы(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Документ.ЕженедельныйОтчет" 
		Или ИмяИсточника = "Документ.ЕжедневныйОтчет"
		Или ИмяИсточника = "РегистрСведений.ОтветственныеЛицаОрганизаций"
		Или ИмяИсточника = "РегистрСведений.ФактическиеТрудозатраты"
		Или ИмяИсточника = "РегистрНакопления.РабочееВремяСотрудников"
		Или ИмяИсточника = "РегистрСведений.ХронометражРабочегоВремениСотрудников" 
		Или ИмяИсточника = "РегистрСведений.ПодпискиНаПоказателиПроцессов" Тогда
		ЗаменитьИмяКолонки(Порция, "Пользователь", "Сотрудник");

	ИначеЕсли ИмяИсточника = "РегистрСведений.ФлагиОбъектов" Тогда
		КонвертацияФлагиОбъектов(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.АлгоритмыПроверки" Тогда
		КонвертацияАлгоритмовПроверки(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "РегистрСведений.НастройкаСвязей" Тогда
		КонвертацияНастроекСвязей(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
			
	ИначеЕсли ИмяИсточника = "РегистрСведений.СвязиОбъектов" Тогда
		КонвертацияСвязейОбъектов(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.ТипыСвязей" Тогда
		КонвертацияТиповСвязей(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);						
	
	ИначеЕсли ИмяИсточника = "Справочник.ПротоколыМероприятий" Тогда
		
		Если Не ЗначениеЗаполнено(Источник.СостояниеИсполнения) Тогда
			ЗаполнитьСостояниеПротоколаМероприятия(Источник);
		КонецЕсли;
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.ИсторияСобытийЗадач" Тогда
		ЗаменитьИмяКолонки(Порция, "Пользователь", "Сотрудник");
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.ИсторияЗадач" Тогда
		КонвертацияИсторияЗадач(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточникаОригинальное = "Справочник.ДелегированиеПрав" Тогда
		
		КонвертацияДелегированийВЗамещения(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ПрограммыЭлектроннойПодписиИШифрования" Тогда
		
		КонвертацияПрограммКриптографии(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ТомаХраненияФайлов" Тогда
		КонвертацияТомаХраненияФайлов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

	ИначеЕсли ИмяИсточника = "Справочник.Файлы" Тогда
		КонвертацияФайлы(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

	ИначеЕсли ИмяИсточника = "Справочник.ВерсииФайлов" Тогда
		КонвертацияВерсииФайлов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
			
	ИначеЕсли ИмяИсточника = "РегистрСведений.ОчередьУведомлений" Тогда
		
		КонвертацияОчередьУведомлений(
			Источник,
			Приемник,
			Порция,
			СтандартнаяОбработка,
			ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.ОбработанныеУведомления" Тогда
		
		КонвертацияОбработанныеУведомления(
			Источник,
			Приемник,
			Порция,
			СтандартнаяОбработка,
			ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.НастройкиУведомлений" Тогда
		
		КонвертацияНастройкиУведомлений(
			Источник,
			Приемник,
			Порция,
			СтандартнаяОбработка,
			ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.ПрофилиГруппДоступа" Тогда
			
		ЗагрузкаПолномочий(
			Источник,
			Приемник,
			Порция,
			СтандартнаяОбработка,
			ПараметрыЗагрузки);
			
	ИначеЕсли ИмяИсточника = "Справочник.СпособыДоставки" Тогда
		
		КонвертацияСправочникаСпособыДоставки(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);	
	
	ИначеЕсли ИмяИсточника = "Справочник.УровниДоступа" Тогда
		КонвертацияСправочникаУровниДоступа(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.ПредметыИнструкций" Тогда
		
		КонвертацияСправочникаПредметыИнструкций(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	ИначеЕсли ИмяИсточника = "Справочник.ВидыДокументовЭДО" Тогда
		
		КонвертацияВидовДокументовЭДО(
			Источник,
			Приемник,
			Порция,
			СтандартнаяОбработка,
			ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточникаОригинальное = "РегистрСведений.ОчередьПриемаСообщенийЭДО" Тогда 
		
		ЗагрузитьОчередьЗагрузкиСообщенийЭДО(
			Источник,
			Приемник,
			Порция,
			СтандартнаяОбработка,
			ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.ПравилаУчетаВидовЭДДО" Тогда
		
		ЗагрузитьПравилаУчетаВидовЭДДО(
			Источник,
			Приемник,
			Порция,
			СтандартнаяОбработка,
			ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.ОшибкиЭДОКИсправлению" Тогда
		
		ПриЗагрузкеОшибкиЭДОКИсправлению(
			Источник,
			Приемник,
			Порция,
			СтандартнаяОбработка,
			ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.НастройкиВерсионированияОбъектов" Тогда
	
		УдалитьЛишниеНастройкиВерсионирования(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "РегистрСведений.РежимыРаспознаванияФайлов" Тогда
	
		УдалитьЛишниеРежимыРаспознавания(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ЗаписиРабочегоКалендаря" Тогда
		
		ЗаменитьИмяКолонки(Порция, "Пользователь", "Сотрудник");
						
		СтандартнаяОбработка = Ложь;
	
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточникаОригинальное = "РегистрСведений.ДоступноеВремяПользователя" Тогда
		
		КонвертацияДоступногоВремениПользователей(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточникаОригинальное = "РегистрСведений.ЗанятостьПользователя" Тогда
		
		КонвертацияЗанятостиПользователей(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточникаОригинальное = "РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря" Тогда
		
		КонвертацияНастроекОтображенияЗаписейРабочегоКалендаря(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточникаОригинальное = "РегистрСведений.НастройкиРабочегоКалендаря" Тогда
		
		КонвертацияНастроекРабочегоКалендаря(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ВидыБизнесСобытий" Тогда
		
		КонвертацияВидыБизнесСобытий(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ПапкиМероприятий" Тогда
		
		Если Константы.ИспользоватьПапкиМероприятий.Получить() = Ложь Тогда
			Константы.ИспользоватьПапкиМероприятий.Установить(Истина);
		КонецЕсли;
	
	ИначеЕсли ИмяИсточника = "Справочник.Мероприятия" Тогда
	
		КонвертацияСправочникаМероприятия(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

	ИначеЕсли ИмяИсточника = "РегистрСведений.СпособыУведомленияПользователей" Тогда
	
		КонвертацияРегистраСпособыУведомленияПользователей(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.ТекущиеСостоянияДокументов" Тогда
		
		ЗагрузкаСостоянийДокументов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

	ИначеЕсли ИмяИсточника = "РегистрСведений.УчастникиПроцессов" Тогда
		
		КонвертацияУчастниковПроцессов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

	ИначеЕсли ИмяИсточника = "Справочник.АдреснаяКнига" Тогда
		
		ПриЗагрузкеАдреснойКниги(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ДелаХраненияДокументов" Тогда
		
		ПриЗагрузкеДел(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.НоменклатураДел" Тогда
		
		ПриЗагрузкеНоменклатурыДел(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Документ.ПередачаДелВАрхив" Тогда
		
		ПриЗагрузкеПередачиДелВАрхив(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Документ.УничтожениеДел" Тогда
		
		ПриЗагрузкеУничтоженияДел(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения" Тогда
		
		ПриЗагрузкеДополнительныхРеквизитовИСведений(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.НаборыДополнительныхРеквизитовИСведений" Тогда
		
		ПриЗагрузкеНаборовДопРеквизитов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.УчетныеЗаписиDSS" Тогда
		
		ПриЗагрузкеУчетныхЗаписейDSS(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточникаОригинальное = "Справочник.ПравилаЭскалацииЗадач" Тогда
		
		Если ТипЗнч(Источник.НаправлениеЭскалации) = Тип("Строка") Тогда
			Источник.НаправлениеЭскалации =
				ЭскалацияЗадач.СконвертированнаяАвтоподстановка(Источник.НаправлениеЭскалации);
		КонецЕсли;
		
	ИначеЕсли ИмяИсточникаОригинальное = "ПланОбмена.ИнтегрированныеСистемы" Тогда
		
		Если Источник.ЭтотУзел = Истина Тогда
			СтандартнаяОбработка = Ложь; // не загружаем
		КонецЕсли;
		
	ИначеЕсли ИмяИсточникаОригинальное = "Константа.ИспользованиеРазрезовДоступа" Тогда
		ПриЗагрузкеИспользованияРазрезовДоступа(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.КлассификаторБанков"
		Или ИмяИсточника = "Справочник.ВопросыОбращений"
		Или ИмяИсточника = "Справочник.РазделыОбращений"
		Или ИмяИсточника = "Справочник.ТематикиОбращений"
		Или ИмяИсточника = "Справочник.ТемыОбращений" 
		Или ИмяИсточника = "Справочник.ЯзыкиПечатныхФорм"
		Или ИмяИсточника = "Справочник.Валюты"  Тогда
		
		ПриЗагрузкеСправочникаГдеНельзяМенятьКод(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.КатегорииДанных" Тогда
		
		КонвертацияКатегориДанных(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "Справочник.Организации" Тогда
		
		ПриЗагрузкеОрганизаций(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	ИначеЕсли ИмяИсточника = "РегистрСведений.СостоянияДелХраненияДокументов" Тогда
	
		КонвертацияРегистраСостоянияДелХраненияДокументов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "Справочник.ВариантыОтчетов" Тогда
	
		ПриЗагрузкеВариантовОтчетов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);	
	
	ИначеЕсли ИмяИсточника = "Справочник.РассылкиОтчетов" Тогда
		
		ПриЗагрузкеРассылокОтчетов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

	ИначеЕсли ИмяИсточникаОригинальное = "РегистрСведений.СведенияОПрочтении" Тогда
		
		Если ТипЗнч(Источник.Объект) = Тип("ДокументСсылка.ВходящееПисьмо")
				Или ТипЗнч(Источник.Объект) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
				
			Папка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Объект, "Папка");
			РегистрыСведений.КоличествоПисемВПапках.ОчиститьЗаписиПоПапке(Папка);
				
		КонецЕсли;
	
	ИначеЕсли ИмяИсточника = "РегистрСведений.ЭлектронныеПодписи" Тогда
	
		КонвертацияЭлектронныхПодписей(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
	ИначеЕсли ИмяИсточника = "РегистрСведений.НастройкиОтправкиДокументовПоЭДО" Тогда
		
		ПриЗагрузкеНастроекОтправкиДокуменовПоЭДО(Источник);

	ИначеЕсли ИмяИсточника = "РегистрСведений.СлужебныеФайлыДокументов" Тогда
		
		Если Порция.Колонки.Найти("НомерБлока") = Неопределено Тогда 
			Порция.Колонки.Добавить("НомерБлока");
		КонецЕсли;	
		Источник.НомерБлока = 0;
		
	ИначеЕсли ИмяИсточника = "Справочник.КлассификаторЕдиницИзмерения" Тогда
		
		Если Порция.Колонки.Найти("Код") = Неопределено Тогда 
			Порция.Колонки.Добавить("Код");
		КонецЕсли;	
		Источник.Код = "";
		
	КонецЕсли;
		
КонецПроцедуры

// Вызывается перед стандартной загрузкой порции данных.
// После начала транзакции. Рекомендуется для конвертации значений после определения объекта метаданных приемника. 
//
// Параметры:
//  Метаданное	 - ОбъектМетаданных - загружаемый объект метаданных.
//  Порция		 - ТаблицаЗначений - таблица данных загрузки. В структуре метаданных источника. 
//  Настройки	 - Структура - кэш общих настроек обмена и служебных данных текущего сообщения. 
//
Процедура КонвертацияЗначений(Метаданное, Порция, Настройки) Экспорт 

	//!!! Переопределение
	
	КонвертацияСсылок(Метаданное, Порция, Настройки);
	
КонецПроцедуры

// Вызывается после стандартной загрузки порции данных.
// До окончания транзакции. Рекомендуется для заполнения вторичных данных. 
//
// Параметры:
//  Метаданное	 - ОбъектМетаданных - загружаемый объект метаданных.
//  Порция		 - ТаблицаЗначений - таблица данных загрузки. В структуре метаданных источника. 
//  Настройки	 - Структура - кэш общих настроек обмена и служебных данных текущего сообщения.
//
Процедура ПослеЗагрузки(Метаданное, Порция, Настройки) Экспорт 

	Возврат; //!!! В режиме без Загрузка не актуально. Только для примера.

	//!!! Переопределение
	
	Если Настройки.Сообщение.ЭтоИзменения Тогда
		//!!! Для изменений нужно точечное обновление.
		Возврат;
	КонецЕсли;
	
	Если Метаданное = Метаданные.Справочники.ДокументыПредприятия Тогда
//		//Заполнение кэш регистров.
//		Блокировка = Новый БлокировкаДанных;
//		Блок = Блокировка.Добавить("РегистрСведений.ДанныеДокументовПредприятия");
//		Блок.ИсточникДанных = Порция;
//		Блок.ИспользоватьИзИсточникаДанных("Документ", "Ссылка");
//		Блокировка.Заблокировать();
//		
//		Набор = РегистрыСведений.ДанныеДокументовПредприятия.СоздатьНаборЗаписей();
//		Запись = Набор.Добавить();
//		//!!! Собрать связанные данные.
//		Для Каждого Источник Из Порция Цикл
//			Если Источник._Отказ = Истина Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			ЗаполнитьЗначенияСвойств(Запись, Источник);
//			
//			Если ЗначениеЗаполнено(Источник.ДатаРегистрации) Тогда
//				Запись.ДатаСортировки = Источник.ДатаРегистрации;
//			Иначе
//				Запись.ДатаСортировки = Источник.ДатаСоздания;
//			КонецЕсли;
//			Если ЗначениеЗаполнено(Источник.РегистрационныйНомер) Тогда
//				Запись.РегистрационныйНомерИДата = СокрЛП(Источник.РегистрационныйНомер)
//					+ НСтр("ru = ' от '")
//					+ Формат(Источник.ДатаРегистрации, "ДЛФ=D");
//			Иначе
//				Запись.РегистрационныйНомерИДата = "";
//			КонецЕсли;
//			
//			Запись.Документ = Источник.Ссылка;
//			
//			Набор.Отбор.Документ.Установить(Запись.Документ);
//			МиграцияДанныхИзВнешнихСистемСервер.ЗаписатьСлужебныеДанные(Набор);
//		КонецЦикла;
		
	ИначеЕсли Метаданное = Метаданные.Справочники.СтруктураПредприятия Тогда
		
//		РегистрыСведений.ПодчиненностьПодразделений.ОбновитьДанныеПолностью();
		
	ИначеЕсли Метаданное = Метаданные.Справочники.РолиИсполнителей
		И Настройки.Сообщение.Последнее Тогда
		//Заполнение Адресной книги.
		
//		МиграцияДанныхИзВнешнихСистемСервер.ЗапланироватьЗадание("Справочники.АдреснаяКнига.Заполнить",
//			"РегистрСведений.СведенияОПользователяхДокументооборот,
//			|Справочник.Контрагенты,
//			|Справочник.ГруппыЛичныхАдресатов,
//			|Справочник.Проекты,
//			|Справочник.ЛичныеАдресаты,
//			|Справочник.СтруктураПредприятия,
//			|Справочник.РолиИсполнителей,
//			|Справочник.РабочиеГруппы,
//			|Справочник.Пользователи,
//			|Справочник.Организации,
//			|Справочник.ГруппыКонтактовПользователей,
//			|Справочник.ПапкиПроектов,
//			|Справочник.Мероприятия,
//			|Справочник.КонтактныеЛица,
//			|Справочник.ПапкиМероприятий");
	
	КонецЕсли;	
	
КонецПроцедуры

// Вызывается после стандартного заполнения элемента данных и до записи.
// В транзакции загрузки. Рекомендуется для заполнения новых реквизитов приемника.
//
// Параметры:
//  Метаданное	 - ОбъектМетаданных - загружаемый объект метаданных.
//  Приемник	 - СсылочныйОбъект, ЗаписьНабораЗаписей, КонстантаМенеджерЗначения - элемент приемника данных.
//  Источник	 - СтрокаТаблицыЗначений - строка порции данных источника.
//  Настройки	 - Структура - кэш общих настроек обмена и служебных данных текущего сообщения.
//
Процедура ПриЗаполнении(Метаданное, Приемник, Источник, Настройки) Экспорт
	
//	Если Метаданное = Метаданные.Справочники.НастройкиДоступностиПоСостоянию Тогда
//		Справочники.НастройкиДоступностиПоСостоянию.ЗаполнитьДействияВНДПС(Приемник, Ложь);
//	КонецЕсли;
	
КонецПроцедуры

// Вызывается после стандартного заполнения пользователя ИБ и до записи.
// В транзакции загрузки. Рекомендуется для заполнения новых реквизитов пользователя.
//
Процедура ПриЗаполненииПользователяИБ(ПользовательИБ, ИсходныеДанные, Владелец, Порция, Настройки, СтандартнаяОбработка) Экспорт 
	
	
	
КонецПроцедуры

// Возвращает соответствие старых имен объектов метаданных источника и новых в приемнике при переименовании.
// Используется при определении объекта загрузки, типов значений ссылок, значений перечислений, ссылок на идентификаторы объектов метаданных.
// 
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение:
//     * Ключ - Строка - старое имя
//     * Значение - Строка - новое.
//
Функция ПереименованныеОбъекты() Экспорт
	
	Объекты = Новый Соответствие;
	
	Объекты.Вставить("Константа.НеИспользоватьНесколькоОрганизаций", "Константа.ИспользоватьОднуОрганизацию");
	
	Объекты.Вставить("Справочник.ВнутренниеДокументы", "Справочник.ДокументыПредприятия");
	Объекты.Вставить("Справочник.ВидыВнутреннихДокументов", "Справочник.ВидыДокументов");
	Объекты.Вставить("Справочник.ПапкиВнутреннихДокументов", "Справочник.ПапкиДокументов");
	Объекты.Вставить("Справочник.ШаблоныВнутреннихДокументов", "Справочник.ШаблоныДокументов");
	
	Объекты.Вставить("Справочник.ВходящиеДокументы", "Справочник.ДокументыПредприятия");
	Объекты.Вставить("Справочник.ВидыВходящихДокументов", "Справочник.ВидыДокументов");
	Объекты.Вставить("Справочник.ШаблоныВходящихДокументов", "Справочник.ШаблоныДокументов");

	Объекты.Вставить("Справочник.ИсходящиеДокументы", "Справочник.ДокументыПредприятия");
	Объекты.Вставить("Справочник.ВидыИсходящихДокументов", "Справочник.ВидыДокументов");
	Объекты.Вставить("Справочник.ШаблоныИсходящихДокументов", "Справочник.ШаблоныДокументов");
	
	Объекты.Вставить("Справочник.ДелегированиеПрав", "Справочник.ЗамещающиеИПомощники");
	Объекты.Вставить("Справочник.ОбластиДелегированияПрав", "Справочник.УдалитьОбластиДелегированияПрав");
	
	Объекты.Вставить("Справочник.ПравилаЭскалацииЗадач", "Справочник.ПравилаЭскалации");
	
	Объекты.Вставить("Перечисление.ТипыОбъектов.ВнутренниеДокументы", "Перечисление.ТипыОбъектов.ДокументыПредприятия");
	Объекты.Вставить("Перечисление.ТипыОбъектов.ИсходящиеДокументы", "Перечисление.ТипыОбъектов.ДокументыПредприятия");
	Объекты.Вставить("Перечисление.ТипыОбъектов.ВходящиеДокументы", "Перечисление.ТипыОбъектов.ДокументыПредприятия");
	Объекты.Вставить("РегистрНакопления.РабочееВремяПользователей", "РегистрНакопления.РабочееВремяСотрудников");
	
	Объекты.Вставить("Перечисление.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоВнутреннегоДокумента", 
		"Перечисление.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоДокумента");
	Объекты.Вставить("Перечисление.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияВнутреннегоДокумента", 
		"Перечисление.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияДокумента");
	
	Объекты.Вставить("Перечисление.ВариантыРасположенияШтрихкода", "Перечисление.УдалитьВариантыРасположенияШтрихкода");
	Объекты.Вставить(
		"Перечисление.ОтношенияСлужебныхФайлов.РегистрационныйШтамп",
		"Перечисление.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации");
	Объекты.Вставить("Перечисление.ВариантыПечатиШтампаЭП", "Перечисление.МестаВставкиКартинки");
	Объекты.Вставить("Перечисление.СтраницаВставкиШтампаЭП", "Перечисление.СтраницаВставкиКартинки");
	
	Объекты.Вставить("Роль.РаботаСВнутреннимиДокументами", "Роль.РаботаСДокументамиПредприятия");
	Объекты.Вставить("Роль.ЧтениеВидовВнутреннихДокументов", "Роль.ЧтениеВидовДокументовПредприятия");
	Объекты.Вставить("Роль.РегистрацияВнутреннихДокументов", "Роль.РегистрацияДокументовПредприятия");
	
	Объекты.Вставить("Перечисление.ВариантыВажностиЗадачи", "Перечисление.ВариантыВажностиОбъектов");
	
	Объекты.Вставить("Справочник.СхемыКомплексныхПроцессов", "Справочник.УдалитьСхемыКомплексныхПроцессов");
	Объекты.Вставить("РегистрСведений.СкриптыСхемКомплексныхПроцессов", "РегистрСведений.УдалитьСкриптыСхемКомплексныхПроцессов");	
	Объекты.Вставить("Перечисление.ТипыЭлементовСхемыКомплексногоПроцесса", "Перечисление.УдалитьТипыЭлементовСхемыКомплексногоПроцесса");
	Объекты.Вставить("Перечисление.ТипыУсловийКомплексныхПроцессов", "Перечисление.УдалитьТипыУсловийКомплексныхПроцессов");
	Объекты.Вставить("Справочник.УсловияМаршрутизации", "Справочник.АлгоритмыПроверки");
	Объекты.Вставить("Справочник.КлассификаторПолномочийФНСМЧД003", "Справочник.КлассификаторПолномочийМЧД003");
	
	Объекты.Вставить("Константа.ИспользоватьСвязиДокументов", "Константа.ИспользоватьСвязиОбъектов");
	Объекты.Вставить("РегистрСведений.СвязиДокументов", "РегистрСведений.СвязиОбъектов");
	
	Объекты.Вставить("РегистрСведений.РабочиеГруппыДляПерехода", "РегистрСведений.РабочиеГруппы");
	Объекты.Вставить("РегистрСведений.ПолномочияПользователей", "РегистрСведений.ПолномочияСотрудников");
	
	Объекты.Вставить("Константа.СрокХраненияПротоколаРаботыПользователей", "Константа.СрокХраненияПротоколаРаботыСотрудников");
	Объекты.Вставить("Константа.КаталогСохраненияКопииПротоколаРаботыПользователейWindows", "Константа.КаталогСохраненияКопииПротоколаРаботыСотрудниковWindows");
	Объекты.Вставить("Константа.КаталогСохраненияКопииПротоколаРаботыПользователейLinux", "Константа.КаталогСохраненияКопииПротоколаРаботыСотрудниковLinux");
	Объекты.Вставить("Константа.ИспользоватьПротоколированиеРаботыПользователей", "Константа.ИспользоватьПротоколированиеРаботыСотрудников");
	
	Объекты.Вставить("Константа.ПользовательЗаданияРаспознавания", "Константа.СотрудникДляЗаданияРаспознавания");
	
	Объекты.Вставить("Перечисление.УсловияПравилЭскалацииЗадач.УсловиеМаршрутизации",
		"Перечисление.УсловияПравилЭскалацииЗадач.АлгоритмПроверки");
	Объекты.Вставить("Перечисление.ЭтапыОбработкиПредметовПоказателейПроцессов",
		"Перечисление.ЭтапыОбработкиПредметов");
	
	Объекты.Вставить("Перечисление.ТипыПредметовПоказателейПроцессов.ВходящиеДокументы",
		"Перечисление.ТипыПредметовПоказателейПроцессов.ДокументыПредприятия");
	Объекты.Вставить("Перечисление.ТипыПредметовПоказателейПроцессов.ВнутренниеДокументы",
		"Перечисление.ТипыПредметовПоказателейПроцессов.ДокументыПредприятия");
	Объекты.Вставить("Перечисление.ТипыПредметовПоказателейПроцессов.ИсходящиеДокументы",
		"Перечисление.ТипыПредметовПоказателейПроцессов.ДокументыПредприятия");
	
	Объекты.Вставить("Перечисление.ТипыПроцессовПоказателейПроцессов.ОбработкаВнутреннегоДокумента",
		"Перечисление.ТипыПроцессовПоказателейПроцессов.КомплексныйПроцесс");
	Объекты.Вставить("Перечисление.ТипыПроцессовПоказателейПроцессов.ОбработкаВходящегоДокумента",
		"Перечисление.ТипыПроцессовПоказателейПроцессов.КомплексныйПроцесс");
	Объекты.Вставить("Перечисление.ТипыПроцессовПоказателейПроцессов.ОбработкаИсходящегоДокумента",
		"Перечисление.ТипыПроцессовПоказателейПроцессов.КомплексныйПроцесс");
	Объекты.Вставить("Перечисление.ТипыПроцессовПоказателейПроцессов.Поручение",
		"Перечисление.ТипыПроцессовПоказателейПроцессов.Исполнение");
	
	Объекты.Вставить("Перечисление.НастройкиУведомлений.УдалитьУведомленияПрограммы", Null);
	
	Объекты.Вставить("Перечисление.СобытияУведомлений.ПодошелСрокЗадачи",
		"Перечисление.СобытияУведомлений.УдалитьПодошелСрокЗадачи");
	Объекты.Вставить("Перечисление.СобытияУведомлений.ПросроченаЗадача",
		"Перечисление.СобытияУведомлений.УдалитьПросроченаЗадача");
	Объекты.Вставить("Перечисление.СобытияУведомлений.СозданиеЗаписиКалендаря",
		"Перечисление.СобытияУведомлений.УдалитьСозданиеЗаписиКалендаря");
		
	Объекты.Вставить("РегистрСведений.ИсторияВыполненияЗадач", "РегистрСведений.ИсторияЗадач");
	
	Объекты.Вставить("Перечисление.ДоступностьПользователя", "Перечисление.ДоступностьФизическихЛиц");
	Объекты.Вставить("РегистрСведений.ДоступноеВремяПользователя", "РегистрСведений.ДоступноеВремяСотрудников");
	Объекты.Вставить("РегистрСведений.ЗанятостьПользователя", "РегистрСведений.ЗанятостьСотрудников");
	Объекты.Вставить("РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря",
		"РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаряПользователя");
	Объекты.Вставить("РегистрСведений.НастройкиРабочегоКалендаря", "РегистрСведений.НастройкиРабочегоКалендаряСотрудника");
	
	Объекты.Вставить("РегистрСведений.ХронометражРабочегоВремениПользователей", "РегистрСведений.ХронометражРабочегоВремениСотрудников");
	
	Объекты.Вставить("Константа.ВнешнийОбменВНовойВерсии", "Константа.ВнешнийОбменВ21Завершен");
	
	Объекты.Вставить("РегистрСведений.ПапкиПисемТекущихДел", "РегистрСведений.ПапкиПисемВиджетаПочта");
	
	Объекты.Вставить("Перечисление.ДоступностьПользователя", "Перечисление.ДоступностьФизическихЛиц");
	
	// фиктивно. По факту грузить не будем, но данные используем для других вещей
	Объекты.Вставить("РегистрСведений.СведенияОПользователяхДокументооборот", 
		"РегистрСведений.СведенияОПользователях");

	// фиктивно. По факту грузить не будем, но данные используем для других вещей
	Объекты.Вставить("РегистрСведений.СведенияОСообщенияхОбменаСИнтегрированнымиСистемами", 
		"РегистрСведений.СведенияОПользователях");
	
	Объекты.Вставить("РегистрСведений.ОчередьПриемаСообщенийЭДО", 
		"РегистрСведений.УдалитьОчередьПриемаСообщенийЭДО"); 
		
	Объекты.Вставить("Перечисление.РазделыОтчетов.ВнутренниеДокументыСписок", 
		"Перечисление.РазделыОтчетов.ДокументыПредприятияСписок");
	Объекты.Вставить("Перечисление.РазделыОтчетов.ВходящиеДокументыСписок", 
		"Перечисление.РазделыОтчетов.ДокументыПредприятияСписок");
	Объекты.Вставить("Перечисление.РазделыОтчетов.ИсходящиеДокументыСписок", 
		"Перечисление.РазделыОтчетов.ДокументыПредприятияСписок");
	
	Объекты.Вставить("РегистрСведений.ИсполнителиЗадач", "РегистрСведений.ИсполнителиРолей"); 
	
	//Объекты.Вставить("", "");
	//Объекты.Вставить("", "");
	
	
	// Убираем ссылки на объекты, связанные с БРО.
	Объекты.Вставить("Роль.БазовыеПраваБРОДокументооборот", "Роль.БазовыеПраваДокументооборот");
	Объекты.Вставить("Роль.ДобавлениеИзменениеРазделяемыхДанныхРегламентированнойОтчетностиДокументооборот", "Роль.БазовыеПраваДокументооборот");
	Объекты.Вставить("Роль.ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганамиДокументооборот", "Роль.БазовыеПраваДокументооборот");
	Объекты.Вставить("Роль.ЧтениеДанныхРегламентированнойОтчетностиДокументооборот", "Роль.БазовыеПраваДокументооборот");
	Объекты.Вставить("Роль.ЧтениеРегистрацийВНалоговыхОрганахДокументооборот", "Роль.БазовыеПраваДокументооборот");
	
	Объекты.Вставить("Перечисление.ВариантыУказанияОтменяющегоДокумента", Null);
	Объекты.Вставить("Перечисление.ВидыОбменаСКонтролирующимиОрганами", Null);
	Объекты.Вставить("Перечисление.ТипыКонтролирующихОрганов", Null);
	Объекты.Вставить("Перечисление.УдалитьВидыОбменаСКонтролирующимиОрганами", Null); 
	Объекты.Вставить("Справочник.ВидыНалоговыхОрганов", Null);
	Объекты.Вставить("Справочник.ВидыОтправляемыхДокументов", Null);
	Объекты.Вставить("Справочник.ДоверенностиНалогоплательщика", Null);
	Объекты.Вставить("Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов", Null);
	Объекты.Вставить("Справочник.ЗаявлениеАбонентаСпецоператораСвязиПрисоединенныеФайлы", Null);
	Объекты.Вставить("Справочник.ЗаявлениеОНазначенииПенсии", Null);
	Объекты.Вставить("Справочник.МакетыПенсионныхДел", Null);
	Объекты.Вставить("Справочник.ПерепискаСКонтролирующимиОрганами", Null);
	Объекты.Вставить("Справочник.РегистрацииВНалоговомОргане", Null);
	Объекты.Вставить("Справочник.УчетныеЗаписиДокументооборота", Null);
	Объекты.Вставить("Документ.ТранспортноеСообщение", "Документ.ТранспортныйКонтейнерЭДО");
	Объекты.Вставить("РегистрСведений.ОчередьОтправкиДокументовЭДО", Null);
	Объекты.Вставить("Справочник.УдалитьПомещения", Null);	
		
	//Объекты.Вставить("", Null);
	//Объекты.Вставить("", Null);
	//////////////
	
	// Шаблоны процессов
	
	Объекты.Вставить("Справочник.ШаблоныПоручения", "Справочник.ШаблоныИсполнения");
	
	Объекты.Вставить("Справочник.ШаблоныСоставныхБизнесПроцессов",
		"Справочник.ШаблоныКомплексныхБизнесПроцессов");
	
	// Бизнес-процессы
	
	Объекты.Вставить("БизнесПроцесс.Поручение", "БизнесПроцесс.Исполнение");
		
	Объекты.Вставить("БизнесПроцесс.ОбработкаВнутреннегоДокумента",
		"БизнесПроцесс.КомплексныйПроцесс");
		
	Объекты.Вставить("БизнесПроцесс.ОбработкаВходящегоДокумента",
		"БизнесПроцесс.КомплексныйПроцесс");
		
	Объекты.Вставить("БизнесПроцесс.ОбработкаИсходящегоДокумента",
		"БизнесПроцесс.КомплексныйПроцесс"); 
	
	Объекты.Вставить("РегистрСведений.ПоискВАдреснойКниге", "РегистрСведений.ОбъектыПоискаВАдреснойКниге");
	
	//!!! Переопределение
	
	Объекты.Вставить("Перечисление.ТипыДокументовЭДО.ДоговорнойДокумент",
		"Перечисление.ТипыДокументовЭДО.ДоговорныйДокумент");
	
	Возврат Объекты;
	
КонецФункции

// Заменить значения.
// 
// Параметры:
//  Метаданное - Неопределено, ОбъектМетаданных - Метаданное
//  Порция - Произвольный - Порция
//  Замены - ТаблицаЗначений - Замены:
// * СтароеТип 
// * Старое 
// * Новое 
// * Реквизиты 
//  Настройки - Неопределено, Структура - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Сообщение - Структура -:
// ** НомерСообщения - Число -
// ** ИмяИсточника 
// ** ЭтоИзменения 
// ** ДатаЗагрузки - Дата -
// ** ПоследнийКлюч 
// ** Последовательность - Число -
// ** Период - Неопределено, Дата -
// ** Последнее - Булево -
Процедура ЗаменитьЗначения(Метаданное = Неопределено, Порция, Замены, Настройки) Экспорт

	Для Каждого Строка Из Замены Цикл
		
		Если Строка.Новое = Null Тогда
			
			ЗаменитьЗначенияВидыБизнесПроцессовУтверждения(Строка);
			ЗаменитьЗначенияТочкиМаршрутаПоручения(Строка);
			ЗаменитьЗначенияТочкиМаршрутаОбработкиДокумента(Строка);
			ЗаменитьЗначенияВидыОтбораПисем(Строка);
			ЗаменитьЗначенияОбъектыСВД(Строка);
			ЗаменитьЗначенияТипыДанныхАдреснойКниги(Строка);
			ЗаменитьЗначенияВариантыРассмотрения(Строка);
			ЗаменитьЗначенияВариантыОбработкиРезолюции(Строка);
			ЗаменитьЗначенияРезультатыПодписания(Строка);
			ЗаменитьЗначенияСтавкиНДС(Строка);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// Заменяет ссылки исходных типов значений во всех объектах.
// Пользователей на сотрудников и объединение документов.
// 
// Параметры:
//  Метаданное - ОбъектМетаданных - загружаемый объект метаданных.
//  Порция - ТаблицаЗначений - таблица данных загрузки. В структуре метаданных источника с учетом трансформации. 
//  Настройки - Структура - кэш общих настроек обмена и служебных данных текущего сообщения
Процедура КонвертацияСсылок(Метаданное, Порция, Настройки) Экспорт	
	
	Если Порция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("СправочникСсылка.Сотрудники"));
	Типы.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));
	Типы.Добавить(Тип("СправочникСсылка.ВидыДокументов"));
	Типы.Добавить(Тип("СправочникСсылка.ШаблоныДокументов"));
	Типы.Добавить(Тип("СправочникСсылка.ШаблоныПодписания"));
	Типы.Добавить(Тип("СправочникСсылка.ВидыБизнесСобытий"));
	Типы.Добавить(Тип("СправочникСсылка.ТипыСвязей"));
	Типы.Добавить(Тип("БизнесПроцессСсылка.Утверждение"));
	
	Реквизиты = Новый Массив;
	Таблицы = Новый Структура;
	
	Если Метаданные.Константы.Содержит(Метаданное) Тогда
		Для Каждого Тип Из Типы Цикл
			Если Метаданное.Тип.СодержитТип(Тип) Тогда
				Реквизиты.Добавить("Значение");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли МиграцияДанныхИзВнешнихСистемСервер.ЭтоСсылочныйОбъект(Метаданное) Тогда
		
		Исключения = Новый Структура("Ссылка,Родитель,ПометкаУдаления,ИмяПредопределенныхДанных,Дата,
			|_Отметка,_Удаление,_Отказ");
				
		Для Каждого Колонка Из Порция.Колонки Цикл
			Если Исключения.Свойство(Колонка.Имя) Тогда
				Продолжить;
				
			ИначеЕсли Колонка.Заголовок = "*" Или Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
				ТИсточник = Неопределено;
				Для Каждого Источник Из Порция Цикл
					Если ТипЗнч(Источник[Колонка.Имя]) = Тип("ТаблицаЗначений") Тогда
						ТИсточник = Источник[Колонка.Имя];
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ТИсточник = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТЧ = Метаданное.ТабличныеЧасти.Найти(Колонка.Имя);
				
				Для Каждого Колонка2 Из ТИсточник.Колонки Цикл
					Если ТЧ <> Неопределено Тогда
						Поле = ТЧ.Реквизиты.Найти(Колонка2.Имя);
						Если Поле <> Неопределено Тогда
							Есть = Ложь;
							Для Каждого Тип Из Типы Цикл
								Если Поле.Тип.СодержитТип(Тип) Тогда
									Есть = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не Есть Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если Не Таблицы.Свойство(Колонка.Имя) Тогда
						Таблицы.Вставить(Колонка.Имя, Новый Массив);
					КонецЕсли;
					Таблицы[Колонка.Имя].Добавить(Колонка2.Имя);
				КонецЦикла;
							
			Иначе
				Поле = МиграцияДанныхИзВнешнихСистемСервер.НайтиРеквизитМетаданных(Метаданное, Колонка.Имя, Ложь);
				Если Поле <> Неопределено Тогда
					Есть = Ложь;
					Для Каждого Тип Из Типы Цикл
						Если Поле.Тип.СодержитТип(Тип) Тогда
							Есть = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не Есть Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Реквизиты.Добавить(Колонка.Имя);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Исключения = Новый Структура("Период,НомерСтроки,
			|_Отметка,_Удаление,_Отказ");
		
		Для Каждого Колонка Из Порция.Колонки Цикл
			Если Исключения.Свойство(Колонка.Имя) Тогда
				Продолжить;
				
			ИначеЕсли Колонка.Заголовок = "*" Или Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
				ТИсточник = Неопределено;
				Для Каждого Источник Из Порция Цикл
					Если ТипЗнч(Источник[Колонка.Имя]) = Тип("ТаблицаЗначений") Тогда
						ТИсточник = Источник[Колонка.Имя];
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ТИсточник = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Таблицы.Вставить(Колонка.Имя, Новый Массив);
				Для Каждого Колонка2 Из ТИсточник Цикл
					Таблицы[Колонка.Имя].Добавить(Колонка2.Имя);
				КонецЦикла;
							
			Иначе
				Поле = МиграцияДанныхИзВнешнихСистемСервер.НайтиРеквизитМетаданных(Метаданное, Колонка.Имя, Ложь);
				Если Поле <> Неопределено Тогда
					Есть = Ложь;
					Для Каждого Тип Из Типы Цикл
						Если Поле.Тип.СодержитТип(Тип) Тогда
							Есть = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не Есть Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Реквизиты.Добавить(Колонка.Имя);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	Если Реквизиты.Количество() = 0 И Таблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Пустые = Новый Соответствие;
	Пустые.Вставить(Справочники.Пользователи.ПустаяСсылка(), Справочники.Сотрудники.ПустаяСсылка());
		
	Менеджеры = Новый Соответствие;
	
	Новые = Новый Соответствие;
	
	Для Каждого Источник Из Порция Цикл
		
		Для Каждого Поле Из Реквизиты Цикл
			Если ЗначениеЗаполнено(Источник[Поле]) Тогда
				Тип = ТипЗнч(Источник[Поле]);
				Если Тип = Тип("СправочникСсылка.Пользователи") Тогда
					Источник[Поле] = СотрудникПоПользователю(Источник[Поле]);
				ИначеЕсли Тип = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
					Источник[Поле] = СсылкаНаШаблонПоШаблонуУтверждения(Источник[Поле]);
				ИначеЕсли Тип = Тип("СправочникСсылка.ВидыБизнесСобытий") Тогда
					Источник[Поле] = СсылкаНаВидБизнесСобытия(Источник[Поле]);
				ИначеЕсли Тип = Тип("СправочникСсылка.ТипыСвязей") Тогда
					Источник[Поле] = СсылкаНаТипСвязи(Источник[Поле]);
				ИначеЕсли Тип = Тип("БизнесПроцессСсылка.Утверждение") Тогда
					Источник[Поле] = СсылкаНаПроцессУтверждения(Источник[Поле]);
				ИначеЕсли Менеджеры[Тип] <> Неопределено Тогда
					
					Источник[Поле] = Менеджеры[Тип].ПолучитьСсылку(Источник[Поле].УникальныйИдентификатор());
					
				КонецЕсли;
			Иначе
				Новое = Пустые.Получить(Источник[Поле]);
				Если Новое <> Неопределено Тогда
					Источник[Поле] = Новое;
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		
		Для Каждого Таблица Из Таблицы Цикл
			Если ЗначениеЗаполнено(Источник[Таблица.Ключ]) Тогда
				
				Для Каждого Строка Из Источник[Таблица.Ключ] Цикл
					
					Для Каждого Поле Из Таблица.Значение Цикл
						Если ЗначениеЗаполнено(Строка[Поле]) Тогда
							Тип = ТипЗнч(Строка[Поле]);
							Если Тип = Тип("СправочникСсылка.Пользователи") Тогда
								Строка[Поле] = СотрудникПоПользователю(Строка[Поле]);
							ИначеЕсли Тип = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
								Строка[Поле] = СсылкаНаШаблонПоШаблонуУтверждения(Строка[Поле]);
							ИначеЕсли Тип = Тип("БизнесПроцессСсылка.Утверждение") Тогда
								Строка[Поле] = СсылкаНаПроцессУтверждения(Строка[Поле]);
							ИначеЕсли Менеджеры[Тип] <> Неопределено Тогда
								
								Строка[Поле] = Менеджеры[Тип].ПолучитьСсылку(Строка[Поле].УникальныйИдентификатор());
									
							КонецЕсли;
						Иначе
							Новое = Пустые.Получить(Строка[Поле]);
							Если Новое <> Неопределено Тогда
								Строка[Поле] = Новое;
							КонецЕсли;
						КонецЕсли;			
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;			
		КонецЦикла;
		
	КонецЦикла;
		
	Если Новые.Количество() Тогда
		Для Каждого Источник Из Порция Цикл
			
			Для Каждого Поле Из Реквизиты Цикл
				Новое = Новые.Получить(Источник[Поле]);
				Если Новое <> Неопределено Тогда
					Источник[Поле] = Новое;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Таблица Из Таблицы Цикл
				Если ЗначениеЗаполнено(Источник[Таблица.Ключ]) Тогда
					
					Для Каждого Строка Из Источник[Таблица.Ключ] Цикл
						
						Для Каждого Поле Из Таблица.Значение Цикл
							Новое = Новые.Получить(Строка[Поле]);
							Если Новое <> Неопределено Тогда
								Строка[Поле] = Новое;
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Новые.Очистить();
	КонецЕсли;
	
	Реквизиты.Очистить();
	Таблицы.Очистить();
	
КонецПроцедуры

#Область Справочники

Процедура КонвертацияСправочникаСПоискомПоНаименованию(Источник, Приемник, Порция, СтандартнаяОбработка, 
	ПараметрыЗагрузки)
	
	СсылкаНаЭлемент = Источник.Ссылка;
	// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
	ЭтоНовыйЭлемент = СсылкаНаЭлемент.Пустая() Или СсылкаНаЭлемент.ПолучитьОбъект() = Неопределено;
	
	СтандартнаяОбработка = Ложь;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	Если ЭтоНовыйЭлемент Тогда
		
		// Возможно создавались объекты при заполнении базы, помечаем на удаление.
		Элемент30 = НайтиПоНаименованию(Источник.Наименование, СсылкаНаЭлемент);
		Если ЗначениеЗаполнено(Элемент30) Тогда
			
			Элемент30Объект = Элемент30.ПолучитьОбъект();
			Элемент30Объект.УстановитьПометкуУдаления(Истина);
			Элемент30Объект.Записать();
			
			// Обработаем замену ссылки реквизита "Страна" в справочнике "СтавкиНДС".
			Если ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.СтраныМира")
				И ЗначениеЗаполнено(Источник.ИмяПредопределенныхДанных) Тогда
				ЗаменитьСтрануСтавкиНДС(Элемент30Объект.Ссылка, Источник.Ссылка,
					ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет замену ссылок в реквизите "Страна" справочника "СтавкиНДС"
// 
// Параметры:
//  СтараяСсылка - СправочникСсылка.СтраныМира
//  НоваяСсылка - СправочникСсылка.СтраныМира
//  Загрузка - Булево
//  ПричинаЗагрузки - Строка
// 
Процедура ЗаменитьСтрануСтавкиНДС(СтараяСсылка, НоваяСсылка, Загрузка, ПричинаЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Страна = &Страна";
	Запрос.УстановитьПараметр("Страна",СтараяСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтавкаНДСОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтавкаНДСОбъект.Страна = НоваяСсылка;
		СтавкаНДСОбъект.ОбменДанными.Загрузка = Истина;
		СтавкаНДСОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСостояниеПротоколаМероприятия(ПунктПротоколаМероприятия)
	
	// Состояние мероприятия.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Мероприятия.Ссылка КАК Ссылка,
		|	НЕ СостоянияМероприятийИсполнено.Состояние ЕСТЬ NULL  КАК Исполнено,
		|	НЕ СостоянияМероприятийНаИсполнении.Состояние ЕСТЬ NULL  КАК НаИсполнении,
		|	СостоянияМероприятийИсполнено.Установил КАК ИсполненоУстановил,
		|	СостоянияМероприятийНаИсполнении.Установил КАК НаИсполненииУстановил
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятийИсполнено
		|		ПО Мероприятия.Ссылка = СостоянияМероприятийИсполнено.Мероприятие
		|			И (СостоянияМероприятийИсполнено.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.ПротоколИсполнен))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятийНаИсполнении
		|		ПО Мероприятия.Ссылка = СостоянияМероприятийНаИсполнении.Мероприятие
		|			И (СостоянияМероприятийНаИсполнении.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.ПротоколНаИсполнении))
		|ГДЕ
		|	Мероприятия.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ПунктПротоколаМероприятия.Владелец);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Если ничего не найдем, заполним по умолчанию.
	СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение;
	СостояниеИсполненияУстановил = Справочники.Пользователи.ПустаяСсылка();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Исполнено Тогда
			СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.Исполнен;
			СостояниеИсполненияУстановил = Выборка.ИсполненоУстановил;
		ИначеЕсли Выборка.НаИсполнении Тогда
			СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.НаИсполнении;
			СостояниеИсполненияУстановил = Выборка.НаИсполненииУстановил;
		КонецЕсли;
	Иначе
		// Сведений нет, подставляем специального пользователя.
		СостояниеИсполненияУстановил = Пользователи.СсылкаНеуказанногоПользователя();
	КонецЕсли;
	
	ПунктПротоколаМероприятия.СостояниеИсполнения = СостояниеИсполнения;
	ПунктПротоколаМероприятия.СостояниеИсполненияУстановил = СостояниеИсполненияУстановил;
	
КонецПроцедуры

Процедура КонвертацияДелегированийВЗамещения(Источник, Приемник, 
	Порция, СтандартнаяОбработка, ПараметрыЗагрузки) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗаменитьИмяКолонки(Порция, "ДатаНачалаДействия", "ДатаНачала");
	ЗаменитьИмяКолонки(Порция, "ДатаОкончанияДействия", "ДатаОкончания");
	ЗаменитьИмяКолонки(Порция, "ОтКого", "Сотрудник");
	ЗаменитьИмяКолонки(Порция, "Кому", "Замещающий");
	ЗаменитьИмяКолонки(Порция, "Ответственный", "Создал");
	
	ДобавитьКолонкуВТаблицу(Порция, "ВидЗамещения", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗамещения"));
	ДобавитьКолонкуВТаблицу(Порция, "ВопросыЗамещения", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавитьКолонкуВТаблицу(Источник.ВопросыЗамещения, "Область", Новый ОписаниеТипов("СправочникСсылка.ОбластиЗамещения"));
	
	Источник.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие;
	
	Если Источник.ВариантДелегирования = Перечисления.ВариантыДелегированияПрав.ВсеПрава Тогда
		ДобавитьСтрокуВТаблицуСКонтролемУникальности(Источник.ВопросыЗамещения,
			Новый Структура("Область", Справочники.ОбластиЗамещения.ВсеОбласти));
	ИначеЕсли ЗначениеЗаполнено(Источник.ОбластиДелегирования) Тогда 
		
		ОбластиДелегированияИЗамещения = ЗамещающиеИПомощники.ОбластиЗамещенияПоОбластямДелегирования();
		
		Для Каждого СтрокаДелегирования Из Источник.ОбластиДелегирования Цикл
			
			Если СтрокаДелегирования.ОбластьДелегирования = Справочники.УдалитьОбластиДелегированияПрав.ПроцессыИЗадачи Тогда
				
				ДелегированиеДокументов = Источник.ОбластиДелегирования.Найти(
					Справочники.УдалитьОбластиДелегированияПрав.Документы);
				Если ДелегированиеДокументов <> Неопределено Тогда
					// Дать права на документы и задачи
					ДобавитьСтрокуВТаблицуСКонтролемУникальности(Источник.ВопросыЗамещения,
						Новый Структура("Область", Справочники.ОбластиЗамещения.Документы));
					ДобавитьСтрокуВТаблицуСКонтролемУникальности(Источник.ВопросыЗамещения,
						Новый Структура("Область", Справочники.ОбластиЗамещения.Задачи));
				Иначе
					// Дать права только на задачи без документов
					ДобавитьСтрокуВТаблицуСКонтролемУникальности(Источник.ВопросыЗамещения,
						Новый Структура("Область", Справочники.ОбластиЗамещения.Задачи));
				КонецЕсли;
				
			ИначеЕсли СтрокаДелегирования.ОбластьДелегирования = Справочники.УдалитьОбластиДелегированияПрав.Документы Тогда 
				
				ДелегированиеЗадач = Источник.ОбластиДелегирования.Найти(
					Справочники.УдалитьОбластиДелегированияПрав.ПроцессыИЗадачи);
				Если ДелегированиеЗадач <> Неопределено Тогда
					// Дать права на документы и задачи
					ДобавитьСтрокуВТаблицуСКонтролемУникальности(Источник.ВопросыЗамещения,
						Новый Структура("Область", Справочники.ОбластиЗамещения.Документы));
					ДобавитьСтрокуВТаблицуСКонтролемУникальности(Источник.ВопросыЗамещения,
						Новый Структура("Область", Справочники.ОбластиЗамещения.Задачи));
				Иначе
					// Дать права только на документы
					ДобавитьСтрокуВТаблицуСКонтролемУникальности(Источник.ВопросыЗамещения,
						Новый Структура("Область", Справочники.ОбластиЗамещения.ДокументыПросмотрИРедактирование));
				КонецЕсли;
				
				
			Иначе
				ДобавитьСтрокуВТаблицуСКонтролемУникальности(Источник.ВопросыЗамещения,
					Новый Структура("Область", ОбластиДелегированияИЗамещения[СтрокаДелегирования.ОбластьДелегирования]));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура КонвертацияПрограммКриптографии(Источник, Приемник, Порция, СтандартнаяОбработка, 
	ПараметрыЗагрузки)
	
	СсылкаНаЭлемент = Источник.Ссылка;
	// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
	ЭтоНовыйЭлемент = СсылкаНаЭлемент.Пустая() Или СсылкаНаЭлемент.ПолучитьОбъект() = Неопределено;
	
	СтандартнаяОбработка = Ложь;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	Если ЭтоНовыйЭлемент Тогда
		
		// Возможно создавались объекты при заполнении базы, удаляем.
		Элемент30 = НайтиПоРеквизиту("ИмяПрограммы", Источник.ИмяПрограммы, СсылкаНаЭлемент);
		Если ЗначениеЗаполнено(Элемент30) Тогда
			
			Элемент30Объект = Элемент30.ПолучитьОбъект();
			Элемент30Объект.Удалить();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияВидовДокументовЭДО(Источник, Приемник, Порция,
	СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СсылкаНаЭлемент = Источник.Ссылка;
	// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
	ЭтоНовыйЭлемент = СсылкаНаЭлемент.Пустая() Или СсылкаНаЭлемент.ПолучитьОбъект() = Неопределено;
	
	СтандартнаяОбработка = Ложь;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	Если ЭтоНовыйЭлемент Тогда
		
		// Возможно создавались объекты при заполнении базы, помечаем на удаление.
		Элемент30 = НайтиПоНаименованию(Источник.Наименование, СсылкаНаЭлемент);
		Если ЗначениеЗаполнено(Элемент30) Тогда
			
			ЗаменитьСсылкиНаИзмерениеРегистра("СвязьВидовИФорматовДокументовЭДО", "ВидДокумента", Элемент30, СсылкаНаЭлемент);
			ЗаменитьСсылкиНаИзмерениеРегистра("ПодписываемыеВидыЭД", "ВидЭД", Элемент30, СсылкаНаЭлемент);
			
			Элемент30Объект = Элемент30.ПолучитьОбъект(); // СправочникОбъект.ВидыДокументовЭДО
			Элемент30Объект.Удалить();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьСсылкиНаИзмерениеРегистра(ИмяРегистра, ИмяИзмерения, ЗаменяемаяСсылка, СсылкаЗамены)
	
	НаборЗаписейСтарый = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписейСтарый.Отбор[ИмяИзмерения].Установить(ЗаменяемаяСсылка);
	НаборЗаписейСтарый.Прочитать();
	
	НаборЗаписейНовый = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписейНовый.Отбор[ИмяИзмерения].Установить(СсылкаЗамены);
	НаборЗаписейНовый.Очистить();
	
	Для Каждого СтараяЗапись Из НаборЗаписейСтарый Цикл
		НоваяЗапись = НаборЗаписейНовый.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись);
		НоваяЗапись[ИмяИзмерения] = СсылкаЗамены;
	КонецЦикла;
	
	НаборЗаписейСтарый.Очистить();
	НаборЗаписейСтарый.Записать();
	
	НаборЗаписейНовый.Записать();
	
КонецПроцедуры

Процедура ЗагрузкаПолномочий(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	СсылкаНаЭлемент = Источник.Ссылка;
	
	// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
	ЭтоНовыйЭлемент = СсылкаНаЭлемент.Пустая() Или СсылкаНаЭлемент.ПолучитьОбъект() = Неопределено;
	
	Если Источник.ИмяПредопределенныхДанных = "Администратор" Тогда
		ПараметрыЗагрузки.Загрузка = Истина;
		ПараметрыЗагрузки.ПричинаЗагрузки = "Перезапись предопределенного полномочия ""Администратор""";
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	Если ЭтоНовыйЭлемент Тогда
		
		// прямо в обработчике загрузки этого метаданного смотреть по имени - если уже есть такое в 3.0, 
		// создать объект из 2.1 (с GUID 2.1), 
		// скопировать в него свойства из объекта 3.0 (с тем же наименованием), 
		// объект 3.0 удалить.
		
		Элемент30 = НайтиПоНаименованию(Источник.Наименование, СсылкаНаЭлемент);
		Если ЗначениеЗаполнено(Элемент30) Тогда
			
			Элемент30Объект = Элемент30.ПолучитьОбъект();
			СсылкаНаЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(СсылкаНаЭлементОбъект, Элемент30Объект, , 
				"Код, Родитель, Владелец, Ссылка, ЭтоГруппа, ЭтотОбъект, ИмяПредопределенныхДанных, ПометкаУдаления");
			
			Если Не Источник.ЭтоГруппа Тогда
			
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
					Элемент30Объект.Роли, СсылкаНаЭлементОбъект.Роли);
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
					Элемент30Объект.ВидыДоступа, СсылкаНаЭлементОбъект.ВидыДоступа);
					
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
					Элемент30Объект.ЗначенияДоступа, СсылкаНаЭлементОбъект.ЗначенияДоступа);
					
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
					Элемент30Объект.Назначение, СсылкаНаЭлементОбъект.Назначение);
				
			КонецЕсли;
			
			// Существующему пользователю "Администратор" тоже дадим права администратора
			Если Источник.ИмяПредопределенныхДанных = "Администратор" Тогда
				Набор = РегистрыСведений.ПолномочияСотрудников.СоздатьНаборЗаписей();
				Набор.Отбор.Полномочия.Установить(Элемент30);
				Набор.Прочитать();
				Для Каждого Строка Из Набор Цикл
					Менеджер = РегистрыСведений.ПолномочияСотрудников.СоздатьМенеджерЗаписи();
					Менеджер.Владелец = Строка.Владелец;
					Менеджер.Полномочия = СсылкаНаЭлемент;
					Менеджер.Записать();
				КонецЦикла;
				Набор.Очистить();
				Набор.Записать();
			КонецЕсли;
			
			Элемент30Объект.ОбменДанными.Загрузка = Истина;
			Элемент30Объект.Удалить();
			СсылкаНаЭлементОбъект.ОбменДанными.Загрузка = Истина;
			СсылкаНаЭлементОбъект.Записать();
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(СсылкаНаЭлемент,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("СправочникСсылка.ПрофилиГруппДоступа")));
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияСправочникаМероприятия(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)

	СтандартнаяОбработка = Ложь;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки) Тогда
		
		СоздатьОбновитьДействияПоОбъекту(Приемник.Ссылка, ПараметрыЗагрузки)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗагрузкеАдреснойКниги(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	ТипАдреснойКниги = Источник.ТипДанныхОбъекта;
	ТипОбъекта = ТипЗнч(Источник.Объект);
	
	Если ТипАдреснойКниги = Перечисления.ТипыДанныхАдреснойКниги.Пользователь
		И ТипОбъекта = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Источник.ТипДанныхОбъекта = Перечисления.ТипыДанныхАдреснойКниги.Сотрудник;
	КонецЕсли;
	
	ПриЗагрузкеПредопределенногоЭлементаАдреснойКниги(
		Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаЭлемент = Источник.Ссылка;	
	СтандартнаяОбработка = Ложь;
	
	// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
	ЭтоНовыйЭлемент = Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаЭлемент);
	
	Источник.ИмяПредопределенныхДанных = "";
			
	Если ЭтоНовыйЭлемент Тогда
		Элемент30 = ЭлементАдреснойКниги(
			Источник.Объект, Источник.ОбъектДоступа, Источник.РодительОбъекта, СсылкаНаЭлемент);
			
		Если ЗначениеЗаполнено(Элемент30) Тогда
			Элемент30Объект = Элемент30.ПолучитьОбъект();
			
			Источник.ИмяПредопределенныхДанных = Элемент30Объект.ИмяПредопределенныхДанных;
			
			ЗаменитьРодителейАдреснойКниги(Элемент30, СсылкаНаЭлемент);
			
			Элемент30Объект.ОбменДанными.Загрузка = Истина;
			Элемент30Объект.Удалить();
		КонецЕсли;

		ЭлементОбъект = Справочники.АдреснаяКнига.СоздатьЭлемент();
		ЭлементОбъект.УстановитьСсылкуНового(СсылкаНаЭлемент);
	Иначе
		ЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ЭлементОбъект, Источник, , "Код");
	
	Если ЭтоНовыйЭлемент Тогда
		ЭлементОбъект.УстановитьНовыйКод();
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Загрузка Или ЭлементОбъект.Предопределенный Тогда
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	ЭлементОбъект.Записать();

	Приемник = ЭлементОбъект.Ссылка;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			Приемник,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Приемник)));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗагрузкеПредопределенногоЭлементаАдреснойКниги(Источник, Приемник,
	Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	ИмяПредопределенныхДанных = Источник.ИмяПредопределенныхДанных;
	Если ИмяПредопределенныхДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаЭлемент = Источник.Ссылка;	
	СтандартнаяОбработка = Ложь;
	
	ЭтоНовыйЭлемент = Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаЭлемент);
	
	СтарыйПредопределенныйЭлемент = Справочники.АдреснаяКнига.ПустаяСсылка();
	Если ЭтоНовыйЭлемент Тогда
		СтарыйПредопределенныйЭлемент =
			НайтиПоРеквизиту("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных, СтарыйПредопределенныйЭлемент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтарыйПредопределенныйЭлемент) Тогда
		ЗаменитьРодителейАдреснойКниги(СтарыйПредопределенныйЭлемент, СсылкаНаЭлемент);
		
		СтарыйОбъект = СтарыйПредопределенныйЭлемент.ПолучитьОбъект();
		СтарыйОбъект.ОбменДанными.Загрузка = Истина;
		СтарыйОбъект.Удалить();
	КонецЕсли;
	
	Если ЭтоНовыйЭлемент Тогда
		ЭлементОбъект = Справочники.АдреснаяКнига.СоздатьЭлемент();
		ЭлементОбъект.УстановитьСсылкуНового(СсылкаНаЭлемент);
	Иначе
		ЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭлементОбъект, Источник);
	
	ЭлементОбъект.ОбменДанными.Загрузка = Истина;
	ЭлементОбъект.Записать();

	Приемник = ЭлементОбъект.Ссылка;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			Приемник,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Приемник)));
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлементАдреснойКниги(Объект, ОбъектДоступа, РодительОбъекта, ИсключаемыйЭлемент)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АдреснаяКнига.Ссылка
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Объект = &Объект
		|	И АдреснаяКнига.ОбъектДоступа = &ОбъектДоступа
		|	И АдреснаяКнига.РодительОбъекта = &РодительОбъекта
		|	И АдреснаяКнига.Ссылка <> &ИсключаемыйЭлемент";
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ОбъектДоступа", ОбъектДоступа);
	Запрос.УстановитьПараметр("РодительОбъекта", РодительОбъекта);
	Запрос.УстановитьПараметр("ИсключаемыйЭлемент", ИсключаемыйЭлемент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаменитьРодителейАдреснойКниги(СтарыйРодитель, НовыйРодитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АдреснаяКнига.Ссылка
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Родитель = &СтарыйРодитель";
	Запрос.УстановитьПараметр("СтарыйРодитель", СтарыйРодитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Родитель = НовыйРодитель;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗагрузкеДел(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Источник.НоменклатураДел) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Порция.Колонки.Найти("ПолноеНаименование") = Неопределено Тогда
		Порция.Колонки.Добавить("ПолноеНаименование");
	КонецЕсли;
	Если Порция.Колонки.Найти("ФормаДокументов") = Неопределено Тогда
		Порция.Колонки.Добавить("ФормаДокументов");
	КонецЕсли;
	
	РеквизитыНоменклатурыДел = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Источник.НоменклатураДел, "ПолноеНаименование, ФормаДокументов");
		
	Источник.ПолноеНаименование = ДелопроизводствоКлиентСервер.АвтоЗаголовокДела(
		РеквизитыНоменклатурыДел.ПолноеНаименование, Источник.НомерТома);
	Источник.Наименование = Источник.ПолноеНаименование;
	Источник.ФормаДокументов = РеквизитыНоменклатурыДел.ФормаДокументов;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	СостояниеДела = РегистрыСведений.СостоянияДелХраненияДокументов.СостояниеДела(СостояниеДела);
	Делопроизводство.ЗаписатьСостояниеДелаВДокументы(Источник.Ссылка, СостояниеДела.Состояние);
	
КонецПроцедуры

Процедура ПриЗагрузкеНоменклатурыДел(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если Порция.Колонки.Найти("СрокОперативногоХранения") = Неопределено Тогда
		Порция.Колонки.Добавить("СрокОперативногоХранения");
	КонецЕсли;
	
	Источник.СрокОперативногоХранения = 1;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	// Заполнение рекизитов дел.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДелаХраненияДокументов.Ссылка,
		|	ДелаХраненияДокументов.НомерТома
		|ИЗ
		|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
		|ГДЕ
		|	ДелаХраненияДокументов.НоменклатураДел = &НоменклатураДел
		|	И (ВЫРАЗИТЬ(ДелаХраненияДокументов.ПолноеНаименование КАК СТРОКА(10)) = """"
		|		ИЛИ ДелаХраненияДокументов.ФормаДокументов = ЗНАЧЕНИЕ(Перечисление.ВариантыФормДокументов.ПустаяСсылка))");
	Запрос.УстановитьПараметр("НоменклатураДел", Источник.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		ДелоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДелоОбъект.ПолноеНаименование = ДелопроизводствоКлиентСервер.АвтоЗаголовокДела(
			Источник.ПолноеНаименование, Выборка.НомерТома, 0);
		ДелоОбъект.Наименование = ДелоОбъект.ПолноеНаименование;
		ДелоОбъект.ФормаДокументов = Источник.ФормаДокументов;
		ДелоОбъект.ОбменДанными.Загрузка = ПараметрыЗагрузки.Загрузка;
		ДелоОбъект.Записать();
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ДелоОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДелоОбъект.Ссылка)));
		КонецЕсли;
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗагрузкеПередачиДелВАрхив(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Порция.Колонки.Найти("ФормаДокументов") = Неопределено Тогда
		Порция.Колонки.Добавить("ФормаДокументов");
	КонецЕсли;
	
	Для Каждого СтрокаДела Из Источник.ДелаХраненияДокументов Цикл
		Если ЗначениеЗаполнено(СтрокаДела.ДелоХраненияДокументов) Тогда
			Источник.ФормаДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаДела.ДелоХраненияДокументов, "ФормаДокументов");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура ПриЗагрузкеУничтоженияДел(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура ЗагрузитьРабочиеГруппы(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	ЗаменитьИмяКолонки(Источник.Состав, "Пользователь", "Участник");
	
	СсылкаНаЭлемент = Источник.Ссылка;	
	СтандартнаяОбработка = Ложь;
	
	// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
	ЭтоНовыйЭлемент = СсылкаНаЭлемент.Пустая() Или СсылкаНаЭлемент.ПолучитьОбъект() = Неопределено;
	
	Источник.ИмяПредопределенныхДанных = "";
	Если Источник.Наименование = "Все пользователи" 
		Или Источник.Наименование = "All users" Тогда
		Источник.Наименование = НСтр("ru = 'Все сотрудники'");
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	Если ЭтоНовыйЭлемент Тогда
		
		// прямо в обработчике загрузки этого метаданного смотреть по имени - если уже есть такое в 3.0, 
		// создать объект из 2.1 (с GUID 2.1), 
		// скопировать в него свойства из объекта 3.0 (с тем же наименованием), 
		//объект 3.0 удалить.
		Элемент30 = НайтиПоНаименованию(Источник.Наименование, СсылкаНаЭлемент);
		Если ЗначениеЗаполнено(Элемент30) Тогда
			Элемент30Объект = Элемент30.ПолучитьОбъект();
			СсылкаНаЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(СсылкаНаЭлементОбъект, Элемент30Объект, , 
				"Код, Родитель, Владелец, Ссылка, ЭтоГруппа, ЭтотОбъект, ПометкаУдаления");
			
			Набор = РегистрыСведений.ПолномочияСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Владелец.Установить(Элемент30);
			Набор.Записать();
			
			ЗаменитьРабочиеГруппыВАдреснойКниге(Элемент30, СсылкаНаЭлемент);
			ЗаменитьРабочиеГруппыВОрганизациях(Элемент30, СсылкаНаЭлемент);
			
			Элемент30Объект.ОбменДанными.Загрузка = Истина;
			Элемент30Объект.Удалить();
			СсылкаНаЭлементОбъект.ОбменДанными.Загрузка = Истина;
			СсылкаНаЭлементОбъект.Записать();
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(СсылкаНаЭлемент,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("СправочникСсылка.РабочиеГруппы")));
	КонецЕсли;
	
	РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнера(СсылкаНаЭлемент);

КонецПроцедуры

Процедура ДополнитьДоступностьСозданияВида(Источник, Порция)

	Для Каждого СтрокаДоступа Из Источник.Доступ Цикл
		РегистрыСведений.РазрешенияНаСозданиеДокументов.ДобавитьРазрешениеНаСоздание(
			Источник.Ссылка, СтрокаДоступа.Участник);
	КонецЦикла;
		
КонецПроцедуры

Процедура ПриЗагрузкеДополнительныхРеквизитовИСведений(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	ИмяНабора = СокрЛП(Источник.НаборСвойств);
	Если ИмяНабора = "Справочник_ВнутренниеДокументы_Общие"
		Или ИмяНабора = "Справочник_ВходящиеДокументы_Общие"
		Или ИмяНабора = "Справочник_ИсходящиеДокументы_Общие" Тогда
		СтандартнаяОбработка = Ложь;
		
		Источник.НаборСвойств = 
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ДокументыПредприятия_Общие;
	КонецЕсли;
	
	// Если в допреквизите возможны пользователи, то добавим и сотрудников
	ПользователиСсылка = Тип("СправочникСсылка.Пользователи");
	СотрудникиСсылка = Тип("СправочникСсылка.Сотрудники");
	Если Источник.ТипЗначения.СодержитТип(ПользователиСсылка) Тогда
		СтандартнаяОбработка = Ложь;
		
		Источник.ТипЗначения = Новый ОписаниеТипов(Источник.ТипЗначения,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СотрудникиСсылка));
	КонецЕсли;
	
	Если Не СтандартнаяОбработка тогда
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗагрузкеНаборовДопРеквизитов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если Источник.ИмяПредопределенныхДанных = "Справочник_ВнутренниеДокументы"
		Или Источник.ИмяПредопределенныхДанных = "Справочник_ВходящиеДокументы"
		Или Источник.ИмяПредопределенныхДанных = "Справочник_ИсходящиеДокументы" Тогда
		Возврат;
	
	// Требуется перенос общих доп. реквизитов	
	ИначеЕсли Источник.ИмяПредопределенныхДанных = "Справочник_ВнутренниеДокументы_Общие"
		Или Источник.ИмяПредопределенныхДанных = "Справочник_ВходящиеДокументы_Общие"
		Или Источник.ИмяПредопределенныхДанных = "Справочник_ИсходящиеДокументы_Общие" Тогда
		ДокументыПредприятия_Общие = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ДокументыПредприятия_Общие;
		Источник.Наименование = Источник.ИмяПредопределенныхДанных;
		Источник.ИмяПредопределенныхДанных = "";
		Источник.ПометкаУдаления = Истина;
		Источник.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ДокументыПредприятия;
		
		ДокументыПредприятия_ОбщиеОбъект = ДокументыПредприятия_Общие.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Источник.ДополнительныеРеквизиты) Тогда
			Для Каждого ДопРеквизит Из Источник.ДополнительныеРеквизиты Цикл
				СтрНайти = ДокументыПредприятия_ОбщиеОбъект.ДополнительныеРеквизиты.НайтиСтроки(
					Новый Структура("Свойство", ДопРеквизит.Свойство));
				Если СтрНайти.Количество() = 0 Тогда
					НовСтрока = ДокументыПредприятия_ОбщиеОбъект.ДополнительныеРеквизиты.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ДопРеквизит);
				КонецЕсли;
			КонецЦикла;
			Источник.ДополнительныеРеквизиты.Очистить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ДополнительныеСведения) Тогда
			Для Каждого ДопРеквизит Из Источник.ДополнительныеСведения Цикл
				СтрНайти = ДокументыПредприятия_ОбщиеОбъект.ДополнительныеСведения.НайтиСтроки(
					Новый Структура("Свойство", ДопРеквизит.Свойство));
				Если СтрНайти.Количество() = 0 Тогда
					НовСтрока = ДокументыПредприятия_ОбщиеОбъект.ДополнительныеСведения.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ДопРеквизит);
				КонецЕсли;
			КонецЦикла;
			Источник.ДополнительныеСведения.Очистить();
		КонецЕсли;
		
		ДокументыПредприятия_ОбщиеОбъект.Записать();
		
	Иначе
	
		Если Источник.РодительИмяПредопределенного = "Справочник_ВнутренниеДокументы" 
			Или Источник.РодительИмяПредопределенного = "Справочник_ВходящиеДокументы" 
			Или Источник.РодительИмяПредопределенного = "Справочник_ИсходящиеДокументы" Тогда
			
			Источник.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ДокументыПредприятия;
			
		КонецЕсли;
		
		Если Источник.РодительИмяПредопределенного = "Справочник_ВнутренниеДокументы_Общие" 
			Или Источник.РодительИмяПредопределенного = "Справочник_ВходящиеДокументы_Общие" 
			Или Источник.РодительИмяПредопределенного = "Справочник_ИсходящиеДокументы_Общие" Тогда
			
			Источник.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ДокументыПредприятия_Общие;
			
		КонецЕсли;
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура ЗаменитьРабочиеГруппыВАдреснойКниге(СтарыйЭлемент, НовыйЭлемент)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АдреснаяКнига.Ссылка
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Объект = &СтарыйОбъект
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АдреснаяКнига.Ссылка
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.РодительОбъекта = &СтарыйОбъект
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АдреснаяКнига.Ссылка
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.ОбъектДоступа = &СтарыйОбъект";
	Запрос.УстановитьПараметр("СтарыйОбъект", СтарыйЭлемент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Записывать = Ложь;
		ОбъектАдреснойКниги = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ОбъектАдреснойКниги.Объект = СтарыйЭлемент Тогда
			ОбъектАдреснойКниги.Объект = НовыйЭлемент;
			Записывать = Истина;
		КонецЕсли;
		
		Если ОбъектАдреснойКниги.РодительОбъекта = СтарыйЭлемент Тогда
			ОбъектАдреснойКниги.РодительОбъекта = НовыйЭлемент;
			Записывать = Истина;
		КонецЕсли;
		
		Если ОбъектАдреснойКниги.ОбъектДоступа = СтарыйЭлемент Тогда
			ОбъектАдреснойКниги.ОбъектДоступа = НовыйЭлемент;
			Записывать = Истина;
		КонецЕсли;
		
		Если Записывать Тогда
			ОбъектАдреснойКниги.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьРабочиеГруппыВОрганизациях(СтарыйЭлемент, НовыйЭлемент)
	
	//Если при загрузке организаций был дан доступ по рабочим группам,
	// то их нужно заменить на загруженные
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|
		|	ОрганизацииДоступ.Ссылка
		|ИЗ
		|	Справочник.Организации.Доступ КАК ОрганизацииДоступ
		|ГДЕ
		|	ОрганизацииДоступ.Участник = &Участник";
	Запрос.УстановитьПараметр("Участник", СтарыйЭлемент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НайденнаяСтрока = ОрганизацияОбъект.Доступ.Найти(СтарыйЭлемент);
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.Участник = НовыйЭлемент;
		КонецЕсли; 
		
		ОрганизацияОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗагрузкеУчетныхЗаписейDSS(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СсылкаНаСерверDSS = Источник.Владелец;
	
	СерверНеЗагружен = СсылкаНаСерверDSS.Пустая() Или СсылкаНаСерверDSS.ПолучитьОбъект() = Неопределено;
	
	Если СерверНеЗагружен <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеИсключения =
		СтрШаблон(НСтр("ru = 'Не загружен сервер DSS для учетной записи %1'"), Источник.Наименование);
	ВызватьИсключение СообщениеИсключения;
	
КонецПроцедуры

Процедура ПриЗагрузкеСправочникаГдеНельзяМенятьКод(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	// При миграции  оставлять Код , не генеря новый.
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПараметрыЗагрузки.Настройки.Свойство("ОставитьКод") Тогда
		ПараметрыЗагрузки.Настройки.Вставить("ОставитьКод", Истина);
		ПараметрыЗагрузки.ПараметрыМетаданного.ИмяОбъектаДляКешаМетаданных = ""; // чтобы заново сработал ЗаполнитьКешМетаданных.
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура ПриЗагрузкеОрганизаций(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	// Добавить в Доступ РГ ВсеПользователи
	ДобавитьКолонкуВТаблицу(Порция, "Доступ", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавитьКолонкуВТаблицу(Источник.Доступ, "Участник", Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип);
	ДобавитьСтрокуВТаблицуСКонтролемУникальности(Источник.Доступ,
		Новый Структура("Участник", Справочники.РабочиеГруппы.ВсеПользователи));
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура ПриЗагрузкеВариантовОтчетов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)

	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Источник.Отчет) Тогда
		// Не загружаем варианты несуществующих отчетов
		Возврат;
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
КонецПроцедуры

Процедура ПриЗагрузкеРассылокОтчетов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Источник.ВыполнятьПоРасписанию = Ложь;
	
	// Заменяем пользователей на сотрудников в типе получателя
	Если Источник.ТипПолучателейРассылки = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Пользователи) Тогда
		Источник.ТипПолучателейРассылки = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Сотрудники);
	КонецЕсли;
	
	Если Источник.ВидПочтовогоАдресаПолучателей = Справочники.ВидыКонтактнойИнформации.EmailПользователя Тогда
		Источник.ВидПочтовогоАдресаПолучателей = Справочники.ВидыКонтактнойИнформации.EmailСотрудника;
	КонецЕсли;
	
	ДобавитьПометку = Ложь;
	
	// Удаляем отчеты из списка, которых нет в 3.0
	Если ЗначениеЗаполнено(Источник.Отчеты) Тогда
		
		ДоступностьОтчетов = ВариантыОтчетов.ДоступностьОтчетов(Источник.Отчеты.ВыгрузитьКолонку("Отчет"));
		
		Индекс = Источник.Отчеты.Количество()-1;
		Пока Индекс >= 0 Цикл
			
			СтрокаОтчета = Источник.Отчеты[Индекс];
			ЗагружаемыйВариантОтчета = СтрокаОтчета.Отчет;
			
			ИнформацияОбОтчете = ДоступностьОтчетов.Найти(ЗагружаемыйВариантОтчета, "Ссылка");
			Если ИнформацияОбОтчете = Неопределено 
				Или ИнформацияОбОтчете.Доступен = Ложь Тогда
				
				ДобавитьПометку = Истина;
				Источник.Отчеты.Удалить(Индекс);
				МиграцияДанныхИзВнешнихСистемСервер.Журналировать(
					НСтр("ru = 'Отчет удален из рассылки отчетов'"),
					СтрШаблон(НСтр("ru = 'Из рассылки отчетов удален отчет: %1'"),
						ЗагружаемыйВариантОтчета),
					Ложь,
					Источник.Наименование);
				
			Иначе
						
				// Проверить, есть ли в отчете загружаемый вариант отчета
				ОтчетМетаданные = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(
					ЗагружаемыйВариантОтчета.Отчет);
				ОтчетОбъект = Отчеты[ОтчетМетаданные.Имя].Создать();
				Если ОтчетОбъект.СхемаКомпоновкиДанных <> Неопределено Тогда
					ВариантыНастроекКД = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек;
					ВариантНастроекКД = ВариантыНастроекКД.Найти(ЗагружаемыйВариантОтчета.КлючВарианта);
		
					Если ВариантНастроекКД = Неопределено Тогда
						ДобавитьПометку = Истина;
						Источник.Отчеты.Удалить(Индекс);
						МиграцияДанныхИзВнешнихСистемСервер.Журналировать(
							НСтр("ru = 'Отчет удален из рассылки отчетов'"),
							СтрШаблон(НСтр("ru = 'Из рассылки отчетов удален отчет: %1'"),
								ЗагружаемыйВариантОтчета),
							Ложь,
							Источник.Наименование);
					КонецЕсли;
				КонецЕсли;
			
			КонецЕсли;
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Пометка = НСтр("ru = 'Загружены не все отчеты. Подробнее в журнале миграции.'");
	Если ДобавитьПометку И Не СтрНайти(Источник.Наименование, Пометка) Тогда
		Источник.Наименование = СтрШаблон("%1. %2", Источник.Наименование, Пометка);
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
КонецПроцедуры

#КонецОбласти

#Область Документы

Процедура КонвертацияДокументов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь; 
	ИмяИсточникаОригинальное = ПараметрыЗагрузки.ИмяИсточникаОригинальное;	
	
	// Для Входящих и Исходящих требуется заполнение Корреспонденции
	ДополнительныеСвойства = Новый Структура;
	Если ИмяИсточникаОригинальное = "Справочник.ВходящиеДокументы" 
		Или ИмяИсточникаОригинальное = "Справочник.ИсходящиеДокументы" Тогда
		
		ПараметрыКорреспонденции = Новый Структура;
		ВидДокументаКэш = Новый Структура;
		
		ВидДокументаКэш.Вставить("УчитыватьВходящийНомерИДатуПолучателя", Ложь);
		
		Если ИмяИсточникаОригинальное = "Справочник.ВходящиеДокументы" Тогда
			// Добавим названия колонок в данные Порции, которые поменялись в 3.0, для работы входящей корреспонденции.
			ЗаменитьИмяКолонки(Порция, "Отправитель", "Контрагент");
			ЗаменитьИмяКолонки(Порция, "Подписал", "КонтактноеЛицо");
			ЗаменитьИмяКолонки(Порция, "СпособПолучения", "Способ");
			ЗаменитьИмяКолонки(Порция, "Адресат", "АдресатВходящейКорреспонденции");
					
			// Добавим Контрагентов в таблицу
			Если Порция.Колонки.Найти("Контрагенты") = Неопределено Тогда 
				Порция.Колонки.Добавить("Контрагенты", Новый ОписаниеТипов("ТаблицаЗначений"));
			КонецЕсли;	
			
			Если Источник.Контрагенты.Колонки.Найти("Контрагент") = Неопределено Тогда
				Источник.Контрагенты.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
				Источник.Контрагенты.Колонки.Добавить("КонтактноеЛицо", Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Источник.Контрагент) 
				Или ЗначениеЗаполнено(Источник.КонтактноеЛицо) Тогда
					
				СтрокиКонтр = Источник.Контрагенты.НайтиСтроки(
					Новый Структура("Контрагент, КонтактноеЛицо", Источник.Контрагент, Источник.КонтактноеЛицо));
				Если СтрокиКонтр.Количество() = 0 Тогда
					НовСтрока = Источник.Контрагенты.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, Источник);
				КонецЕсли;
				
			КонецЕсли;
			
			ВидДокументаКэш.Вставить("ЯвляетсяВходящейКорреспонденцией", Истина);
			ВидДокументаКэш.Вставить("ЯвляетсяИсходящейКорреспонденцией", Ложь);
			
			ПараметрыКорреспонденции.Вставить("АдресатВходящейКорреспонденции", Источник.АдресатВходящейКорреспонденции);
			ПараметрыКорреспонденции.Вставить("ИсходящийНомер", Источник.ИсходящийНомер);
			ПараметрыКорреспонденции.Вставить("ИсходящаяДата", Источник.ИсходящаяДата);
			
			Если ЗначениеЗаполнено(Источник.ВопросыОбращения) Тогда
				ПараметрыКорреспонденции.Вставить("ВопросыОбращения", Источник.ВопросыОбращения);
			Иначе
				ПараметрыКорреспонденции.Вставить("ВопросыОбращения", Новый ТаблицаЗначений);
			КонецЕсли;
			
			ПараметрыКорреспонденции.Вставить("СпособПолучения", Источник.Способ);
			ПараметрыКорреспонденции.Вставить("ВидОбращения", Источник.ВидОбращения);
			ПараметрыКорреспонденции.Вставить("Переадресовавший", Источник.Переадресовавший);
			ПараметрыКорреспонденции.Вставить("СрокОтветаПереадресовавшему", Источник.СрокОтветаПереадресовавшему);
			ПараметрыКорреспонденции.Вставить("ТребуетсяОтветПереадресовавшему", Источник.ТребуетсяОтветПереадресовавшему);
			ПараметрыКорреспонденции.Вставить("ЭтоПовторноеОбращение", Источник.Повторное);
			ПараметрыКорреспонденции.Вставить("ЭтоДубликатОбращения", Источник.Дубликат);
			ПараметрыКорреспонденции.Вставить("Контрагент", Источник.Контрагент);			
			ПараметрыКорреспонденции.Вставить("КонтактноеЛицоПереадресовавшего", Источник.КонтактноеЛицоПереадресовавшего);
			
			ПараметрыКорреспонденции.Вставить("ПервичноеОбращение", 
				СвязиОбъектов.ПолучитьСвязанныйОбъект(Источник.Ссылка, Справочники.ТипыСвязей.ПервичноеОбращение));
			ПараметрыКорреспонденции.Вставить("ОсновноеОбращение", 
				СвязиОбъектов.ПолучитьСвязанныйОбъект(Источник.Ссылка, Справочники.ТипыСвязей.ОсновноеОбращение));
			
			// Поля "Подготовил" во входящих 2.1 не было	
			Если Порция.Колонки.Найти("Подготовил") = Неопределено Тогда 
				Порция.Колонки.Добавить("Подготовил");
			КонецЕсли;
			Источник.Подготовил = Источник.Создал;
			
			Если Порция.Колонки.Найти("Папка") = Неопределено Тогда 
				Порция.Колонки.Добавить("Папка");
			КонецЕсли;
			Источник.Папка = НайтиСоздатьПапкуДокумента("Входящая");
			
			Если Не ЗначениеЗаполнено(Источник.ВидДокумента) Тогда
				Источник.ВидДокумента = НайтиСоздатьВидДокумента("Входящий документ");	
			КонецЕсли;
		Иначе
			
			// Добавим названия колонок в данные Порции, которые поменялись в 3.0, для работы исходяшей корреспонденции.
			Если Порция.Колонки.Найти("Контрагент") = Неопределено Тогда
				Порция.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			КонецЕсли;
			
			Если Порция.Колонки.Найти("КонтактноеЛицо") = Неопределено Тогда
				Порция.Колонки.Добавить("КонтактноеЛицо", Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица"));
			КонецЕсли;	
			ВидДокументаКэш.Вставить("ЯвляетсяВходящейКорреспонденцией", Ложь);
			ВидДокументаКэш.Вставить("ЯвляетсяИсходящейКорреспонденцией", Истина);
			
			ВходящийНомер = "";
			ВходящаяДата = Дата(1, 1, 1);
			
			Если Порция.Колонки.Найти("Получатели") <> Неопределено Тогда
				ПолучателиТаблица = Источник.Получатели;
			ИначеЕсли Порция.Колонки.Найти("Контрагенты") <> Неопределено Тогда
				ПолучателиТаблица = Источник.Контрагенты;
			КонецЕсли;
			
			Если ТипЗнч(ПолучателиТаблица) = Тип("ТаблицаЗначений") Тогда
				ЗаменитьИмяКолонки(ПолучателиТаблица, "Получатель", "Контрагент");
				ЗаменитьИмяКолонки(ПолучателиТаблица, "Адресат", "КонтактноеЛицо");
				
				// Первого контрагента перенесем в реквизиты.
				Для Каждого СтрПолучатель Из ПолучателиТаблица Цикл
					Источник.Контрагент = СтрПолучатель.Контрагент;
					Источник.КонтактноеЛицо = СтрПолучатель.КонтактноеЛицо;
					
					ВходящийНомер = СтрПолучатель.ВходящийНомер;
					ВходящаяДата = СтрПолучатель.ВходящаяДата;
					Прервать;
				КонецЦикла;				
			КонецЕсли;
			ЗаменитьИмяКолонки(Порция, "Получатели", "Контрагенты");
			
			ПараметрыКорреспонденции.Вставить("ВходящийНомер", ВходящийНомер);
			ПараметрыКорреспонденции.Вставить("ВходящаяДата", ВходящаяДата);
			
			Если Порция.Колонки.Найти("Папка") = Неопределено Тогда 
				Порция.Колонки.Добавить("Папка");
			КонецЕсли;
			Источник.Папка = НайтиСоздатьПапкуДокумента("Исходящая");
			
			Если Не ЗначениеЗаполнено(Источник.ВидДокумента) Тогда
				Источник.ВидДокумента = НайтиСоздатьВидДокумента("Исходящий документ");	
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.СсылкаСуществует(Источник.ВидДокумента) Тогда
			УчитыватьВходящийНомерИДатуПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.ВидДокумента, 
				"УчитыватьВходящийНомерИДатуПолучателя");
			ВидДокументаКэш.Вставить("УчитыватьВходящийНомерИДатуПолучателя", УчитыватьВходящийНомерИДатуПолучателя);
		КонецЕсли;	
			
		ПараметрыКорреспонденции.Вставить("ВидДокументаКэш", ВидДокументаКэш);
		ПараметрыКорреспонденции.Вставить("Ссылка", Источник.Ссылка);
		ПараметрыКорреспонденции.Вставить("СрокИсполнения", Источник.СрокИсполнения);
		ПараметрыКорреспонденции.Вставить("Контрагенты", Источник.Контрагенты);
		
		ДополнительныеСвойства.Вставить("ПараметрыКорреспонденции", ПараметрыКорреспонденции);
		
	Иначе
		
		Если ОбщегоНазначения.СсылкаСуществует(Источник.Ссылка) Тогда
			Если СвязиОбъектов.ПолучитьСвязанныеОбъекты(
					Источник.Ссылка, Справочники.ТипыСвязей.НеДействуетВСоответствии).Количество() Тогда
				
				Источник.НеДействует = Истина;
			КонецЕсли;
			
			Если Не МиграцияДанныхИзВнешнихСистемСервер.БлокироватьОбменСВнешнимиРесурсами() Тогда
				Источник.Стороны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Стороны").Выгрузить();
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.ВидДокумента) Тогда
			Источник.ВидДокумента = НайтиСоздатьВидДокумента("Внутренний документ");	
		КонецЕсли;
	КонецЕсли;
	
	Если Порция.Колонки.Найти("Важность") = Неопределено Тогда
		Порция.Колонки.Добавить("Важность", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыВажностиОбъектов"));
	КонецЕсли;
	Источник.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
	
	ПараметрыЗагрузки.ИмяОбъекта = "Справочник.ДокументыПредприятия";
	ПараметрыЗагрузки.Настройки.Вставить("ИмяМетаданногоИзменено", Истина);
	
	ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);
	Если Не МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки) Тогда
		Возврат;
	КонецЕсли;		
		
	// Создаем/обновляем действия по документу.
	СоздатьОбновитьДействияПоОбъекту(Приемник.Ссылка, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура КонвертацияСтруктураПредприятия(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
			
	СтандартнаяОбработка = Ложь; 
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);

	РегистрыСведений.ПодчиненностьПодразделений.ОбновитьДанныеПолностью();
			
КонецПроцедуры

Процедура КонвертацияВидовДокументов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь; 
		
	// Добавим значения настроек, которые появились в 3.0 для работы входящей и исходяшей корреспонденции.
	ВестиУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	
	Если ПараметрыЗагрузки.ИмяИсточникаОригинальное = "Справочник.ВидыВходящихДокументов" Тогда
		
		Если Порция.Колонки.Найти("ЯвляетсяВходящейКорреспонденцией") = Неопределено Тогда
			Порция.Колонки.Добавить("ЯвляетсяВходящейКорреспонденцией");
		КонецЕсли;
			
		Если Порция.Колонки.Найти("ВестиУчетПоКонтрагентам") = Неопределено Тогда
			Порция.Колонки.Добавить("ВестиУчетПоКонтрагентам");
		КонецЕсли;
			
		Если ВестиУчетПоОрганизациям Тогда
			Если Порция.Колонки.Найти("ВестиУчетПоОрганизациям") = Неопределено Тогда 
				Порция.Колонки.Добавить("ВестиУчетПоОрганизациям");
			КонецЕсли;
			Источник.ВестиУчетПоОрганизациям = Истина;
		КонецЕсли;
		
		Источник.ЯвляетсяВходящейКорреспонденцией = Истина;
		Источник.ВестиУчетПоКонтрагентам = Истина;

		Если Порция.Колонки.Найти("ВариантПодписания") = Неопределено Тогда
			Порция.Колонки.Добавить("ВариантПодписания");
		КонецЕсли;
		Источник.ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается;
		
	ИначеЕсли ПараметрыЗагрузки.ИмяИсточникаОригинальное = "Справочник.ВидыИсходящихДокументов" Тогда
		
		Если Порция.Колонки.Найти("ЯвляетсяИсходящейКорреспонденцией") = Неопределено Тогда	
			Порция.Колонки.Добавить("ЯвляетсяИсходящейКорреспонденцией");
		КонецЕсли;	
		Если Порция.Колонки.Найти("ВестиУчетПоКонтрагентам") = Неопределено Тогда
			Порция.Колонки.Добавить("ВестиУчетПоКонтрагентам");
		КонецЕсли;	
		Если ВестиУчетПоОрганизациям Тогда
			Если Порция.Колонки.Найти("ВестиУчетПоОрганизациям") = Неопределено Тогда
				Порция.Колонки.Добавить("ВестиУчетПоОрганизациям");
			КонецЕсли;
			Источник.ВестиУчетПоОрганизациям = Истина;
		КонецЕсли;
		
		Источник.ЯвляетсяИсходящейКорреспонденцией = Истина;
		Источник.ВестиУчетПоКонтрагентам = Истина;
		
		Если Порция.Колонки.Найти("ВариантПодписания") = Неопределено Тогда
			Порция.Колонки.Добавить("ВариантПодписания");
		КонецЕсли;
		Источник.ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается;
		
	КонецЕсли;
	
	ПараметрыЗагрузки.ИмяОбъекта = "Справочник.ВидыДокументов";	
		
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
КонецПроцедуры

Процедура КонвертацияШаблоновДокументов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки) 

	СтандартнаяОбработка = Ложь;
		
	Если ПараметрыЗагрузки.ИмяИсточникаОригинальное = "Справочник.ШаблоныВходящихДокументов" Тогда
		// Добавим названия колонок в данные Порции, которые поменялись в 3.0, для работы входящей корреспонденции.
		ЗаменитьИмяКолонки(Порция, "Отправитель", "Контрагент");
		ЗаменитьИмяКолонки(Порция, "Подписал", "КонтактноеЛицо");
		ЗаменитьИмяКолонки(Порция, "СпособПолучения", "Способ");
		ЗаменитьИмяКолонки(Порция, "Адресат", "АдресатВходящейКорреспонденции");
				
		// Добавим Контрагентов в таблицу
		Если Порция.Колонки.Найти("Контрагенты") = Неопределено Тогда 
			Порция.Колонки.Добавить("Контрагенты", Новый ОписаниеТипов("ТаблицаЗначений"));
		КонецЕсли;	
		
		Если Источник.Контрагенты.Колонки.Найти("Контрагент") = Неопределено Тогда
			Источник.Контрагенты.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			Источник.Контрагенты.Колонки.Добавить("КонтактноеЛицо", Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица"));
			Источник.Контрагенты.Колонки.Добавить("Способ", Новый ОписаниеТипов("СправочникСсылка.СпособыДоставки"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.Контрагент) 
			Или ЗначениеЗаполнено(Источник.КонтактноеЛицо) 
			Или ЗначениеЗаполнено(Источник.Способ) Тогда
			СтрокиКонтр = Источник.Контрагенты.НайтиСтроки(
				Новый Структура("Контрагент, КонтактноеЛицо, Способ", 
				Источник.Контрагент, Источник.КонтактноеЛицо, Источник.Способ));
			Если СтрокиКонтр.Количество() = 0 Тогда
				НовСтрока = Источник.Контрагенты.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Источник);
			КонецЕсли;
		КонецЕсли;
		
		Если Источник.ЗаполнениеНаименованияПоШаблону = Истина
			И ЗначениеЗаполнено(Источник.Заголовок) Тогда
			Источник.Заголовок = СтрЗаменить(Источник.Заголовок, "[Отправитель]", "[Контрагент]");
			Источник.Заголовок = СтрЗаменить(Источник.Заголовок, "[Подписал]", "[ПодписалОтКонтрагента]");
			Источник.Заголовок = СтрЗаменить(Источник.Заголовок, "[Адресат]", 
				"[Корреспонденция|Корреспонденты|Адресат]");
			Источник.Заголовок = СтрЗаменить(Источник.Заголовок, "[СпособПолучения]", 
				"[Корреспонденция|СпособПолучения]");
			Источник.Заголовок = СтрЗаменить(Источник.Заголовок, "[ИсходящаяДата]", 
				"[Корреспонденция|ДатаКонтрагента]");
			Источник.Заголовок = СтрЗаменить(Источник.Заголовок, "[ИсходящийНомер]", 
				"[Корреспонденция|НомерКонтрагента]");
			Источник.Заголовок = СтрЗаменить(Источник.Заголовок, "[КонтактноеЛицоПереадресовавшего]", 
				"[Корреспонденция|КонтактноеЛицоПереадресовавшего]");
			Источник.Заголовок = СтрЗаменить(Источник.Заголовок, "[Переадресовавший]", 
				"[Корреспонденция|Переадресовавший]");
			Источник.Заголовок = СтрЗаменить(Источник.Заголовок, "[СрокОтветаПереадресовавшему]", 
				"[Корреспонденция|СрокОтветаПереадресовавшему]");
					
		КонецЕсли;
		
		Если Порция.Колонки.Найти("Папка") = Неопределено Тогда 
			Порция.Колонки.Добавить("Папка");
		КонецЕсли;
		Источник.Папка = НайтиСоздатьПапкуДокумента("Входящая");
		
		Если Не ЗначениеЗаполнено(Источник.ВидДокумента) Тогда
			Источник.ВидДокумента = НайтиСоздатьВидДокумента("Входящий документ");	
		КонецЕсли;
		
	ИначеЕсли ПараметрыЗагрузки.ИмяИсточникаОригинальное = "Справочник.ШаблоныИсходящихДокументов" Тогда
		
		// Добавим названия колонок в данные Порции, которые поменялись в 3.0, для работы исходяшей корреспонденции.
		Если Порция.Колонки.Найти("Контрагент") = Неопределено Тогда
			Порция.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		КонецЕсли;
		
		Если Порция.Колонки.Найти("КонтактноеЛицо") = Неопределено Тогда
			Порция.Колонки.Добавить("КонтактноеЛицо", Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица"));
		КонецЕсли;	
		
		Если Порция.Колонки.Найти("Способ") = Неопределено Тогда
			Порция.Колонки.Добавить("Способ", Новый ОписаниеТипов("СправочникСсылка.СпособыДоставки"));
		КонецЕсли;	
		
		Если Порция.Колонки.Найти("Получатели") <> Неопределено Тогда
			ПолучателиТаблица = Источник.Получатели;
		ИначеЕсли Порция.Колонки.Найти("Контрагенты") <> Неопределено Тогда
			ПолучателиТаблица = Источник.Контрагенты;
		КонецЕсли;
		
		Если ТипЗнч(ПолучателиТаблица) = Тип("ТаблицаЗначений") Тогда
			ЗаменитьИмяКолонки(ПолучателиТаблица, "Получатель", "Контрагент");
			ЗаменитьИмяКолонки(ПолучателиТаблица, "Адресат", "КонтактноеЛицо");
			ЗаменитьИмяКолонки(ПолучателиТаблица, "СпособОтправки", "Способ");
			
			// Первого контрагента перенесем в реквизиты шаблона.
			Для Каждого СтрПолучатель Из ПолучателиТаблица Цикл
				Источник.Контрагент = СтрПолучатель.Контрагент;
				Источник.КонтактноеЛицо = СтрПолучатель.КонтактноеЛицо;
				Источник.Способ = СтрПолучатель.Способ;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		ЗаменитьИмяКолонки(Порция, "Получатели", "Контрагенты");
		
		Если Порция.Колонки.Найти("Папка") = Неопределено Тогда 
			Порция.Колонки.Добавить("Папка");
		КонецЕсли;
		Источник.Папка = НайтиСоздатьПапкуДокумента("Исходящая");
		
		Если Не ЗначениеЗаполнено(Источник.ВидДокумента) Тогда
			Источник.ВидДокумента = НайтиСоздатьВидДокумента("Исходящий документ");	
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(Источник.ВидДокумента) Тогда
		Источник.ВидДокумента = НайтиСоздатьВидДокумента("Внутренний документ");	
	КонецЕсли;
	
	ПараметрыЗагрузки.ИмяОбъекта = "Справочник.ШаблоныДокументов";	
	Источник.Код = "";

	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
КонецПроцедуры

Процедура КонвертацияВизСогласования(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
				
	Если Порция.Колонки.Найти("ИдентификаторУчастника") = Неопределено Тогда 			
		Порция.Колонки.Добавить("ИдентификаторУчастника", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	СтандартнаяОбработка = Ложь;

	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	ОбновитьДанныеВизСогласованияПоЗадаче(Источник.Ссылка, Источник.Источник, ПараметрыЗагрузки);
		
КонецПроцедуры

Процедура ОбновитьДанныеВизСогласованияПоЗадаче(ВизаСогласования, Задача, ПараметрыЗагрузки)
	
	Если Не ЗначениеЗаполнено(ВизаСогласования)
		Или Не ЗначениеЗаполнено(Задача)
		Или ТипЗнч(Задача) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") 
		Или Не ОбщегоНазначения.СсылкаСуществует(Задача)
		Или Не ОбщегоНазначения.СсылкаСуществует(ВизаСогласования) Тогда
		Возврат
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.ТекущийИсполнитель КАК ТекущийИсполнитель,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.ИдентификаторИсполнителя КАК ИдентификаторИсполнителя,
		|	ИсторияСобытийЗадач.Сотрудник КАК Отметил
		|ПОМЕСТИТЬ ВсеЗадачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
		|		ПО (ИсторияСобытийЗадач.Задача = ЗадачаИсполнителя.Ссылка)
		|		И (ИсторияСобытийЗадач.Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийЗадач.Выполнена))
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка = &ЗадачаИсточника
		|	И ЗадачаИсполнителя.Выполнена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеЗадачи.Ссылка КАК ЗадачаСсылка,
		|	ВсеЗадачи.Исполнитель КАК Исполнитель,
		|	ПроцессЗадачи.Исполнитель КАК Адресат,
		|	ВсеЗадачи.Отметил КАК КтоОтметил
		|ИЗ
		|	БизнесПроцесс.Согласование.Исполнители КАК ПроцессЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеЗадачи КАК ВсеЗадачи
		|		ПО (ВсеЗадачи.БизнесПроцесс = ПроцессЗадачи.Ссылка)
		|		И (ВсеЗадачи.Ссылка = ПроцессЗадачи.ЗадачаИсполнителя)";
	
	Запрос.Параметры.Вставить("ЗадачаИсточника", Задача);
	ИсполнителиЗадач = Запрос.Выполнить().Выгрузить();
	РеквизитыВизы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВизаСогласования,
		"ИдентификаторУчастника, УстановилРезультат");
	ИдентификаторУчастника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача,
		"ИдентификаторИсполнителя");
	
	// Обновим данные по задаче.
	УстановилРезультат = Справочники.ФактическиеИсполнители.ПустаяСсылка();
	Если ЗначениеЗаполнено(РеквизитыВизы.УстановилРезультат) Тогда
		СтрокиЗадач = ИсполнителиЗадач.НайтиСтроки(Новый Структура("ЗадачаСсылка", Задача));
		Если СтрокиЗадач.Количество() > 0 Тогда
			Отметил = СтрокиЗадач[0].КтоОтметил;
			ФактУчастник = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
				СтрокиЗадач[0].Адресат, 
				СтрокиЗадач[0].Исполнитель, 
				СтрокиЗадач[0].Исполнитель,
				Отметил);
			УстановилРезультат = ФактУчастник;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыВизы.ИдентификаторУчастника <> ИдентификаторУчастника
		Или РеквизитыВизы.УстановилРезультат <> УстановилРезультат Тогда
		ВизаОбъект = ВизаСогласования.ПолучитьОбъект();	
		Если ИдентификаторУчастника <> ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор() Тогда 
			ВизаОбъект.ИдентификаторУчастника = ИдентификаторУчастника;
		КонецЕсли;
		Если ЗначениеЗаполнено(УстановилРезультат) Тогда
			ВизаОбъект.УстановилРезультат = УстановилРезультат;
		КонецЕсли;
		
		ВизаОбъект.ОбменДанными.Загрузка = Истина;	
		ВизаОбъект.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ВизаОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ВизаОбъект.Ссылка)));
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура КонвертацияНумераторов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
		
	Если Порция.Колонки.Найти("Назначение") = Неопределено Тогда
		Порция.Колонки.Добавить("Назначение");
	КонецЕсли;

	Источник.Назначение = Перечисления.НазначенияНумераторов.РегистрационныйНомер;
		
КонецПроцедуры

Процедура КонвертацияРегистраНумерации(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
		
	Если Порция.Колонки.Найти("Тематика") = Неопределено Тогда
		Порция.Колонки.Добавить("Тематика");
	КонецЕсли;

	Если Порция.Колонки.Найти("ГрифДоступа") = Неопределено Тогда
		Порция.Колонки.Добавить("ГрифДоступа");
	КонецЕсли;

	Если Порция.Колонки.Найти("УзелКОД") = Неопределено Тогда
		Порция.Колонки.Добавить("УзелКОД");
	КонецЕсли;

	Источник.Тематика = Справочники.ТематикиДокументов.ПустаяСсылка();
	Источник.ГрифДоступа = Справочники.ГрифыДоступа.ПустаяСсылка();
	Источник.УзелКОД = Справочники.УзлыКОД.ПустаяСсылка();
	
	Если Источник.Нумератор = Справочники.Нумераторы.Штрихкоды Тогда
		
		ТекущийНомер = Источник.ТекущийНомер;   
		ШтрихкодированиеСервер.УстановитьМаксНомер(ТекущийНомер);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура КонвертацияРегистраНастройкиНумерации(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
		
	Если Порция.Колонки.Найти("Тематика") = Неопределено Тогда
		Порция.Колонки.Добавить("Тематика");
	КонецЕсли;
	Если Порция.Колонки.Найти("ГрифДоступа") = Неопределено Тогда
		Порция.Колонки.Добавить("ГрифДоступа");
	КонецЕсли;

	Если Порция.Колонки.Найти("УзелКОД") = Неопределено Тогда
		Порция.Колонки.Добавить("УзелКОД");
	КонецЕсли;

	Источник.Тематика = Справочники.ТематикиДокументов.ПустаяСсылка();
	Источник.ГрифДоступа = Справочники.ГрифыДоступа.ПустаяСсылка();
	Источник.ТипДокумента = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	Источник.УзелКОД = Справочники.УзлыКОД.ПустаяСсылка();
	
	Если Порция.Колонки.Найти("Назначение") = Неопределено Тогда
		Порция.Колонки.Добавить("Назначение");
	КонецЕсли;

	Источник.Назначение = Перечисления.НазначенияНумераторов.РегистрационныйНомер;
		
КонецПроцедуры

Процедура КонвертацияПравилАвтоматическойКатегоризацииДанных(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Для Каждого СтрТипОбъекта Из Источник.ТипыОбъектов Цикл
		Если Не ЗначениеЗаполнено(СтрТипОбъекта.ТипДанных) Тогда
			СтрТипОбъекта.ТипДанных = Перечисления.ТипыОбъектов.ДокументыПредприятия;
		КонецЕсли;
	КонецЦикла;
	
	// Удалим дубли, если они будут	
	КоличествоСтрок = Источник.ТипыОбъектов.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		
		Строка = Источник.ТипыОбъектов[КоличествоСтрок - Инд];
		ЕстьДубльСтроки = Ложь;
		
		Для Каждого СтрокаПоискаДубля Из Источник.ТипыОбъектов Цикл			
			Если Строка = СтрокаПоискаДубля Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.ТипДанных = СтрокаПоискаДубля.ТипДанных Тогда
				ЕстьДубльСтроки = Истина;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		Если ЕстьДубльСтроки Тогда
			Источник.ТипыОбъектов.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	СписокДопустимыхТипов = "";
	Для Каждого СтрТипОбъекта Из Источник.ТипыОбъектов Цикл
		Если ПустаяСтрока(СписокДопустимыхТипов) Тогда
			СписокДопустимыхТипов = Строка(СтрТипОбъекта.ТипДанных);
		Иначе
			СписокДопустимыхТипов = СписокДопустимыхТипов + ", " + Строка(СтрТипОбъекта.ТипДанных);
		КонецЕсли;
	КонецЦикла;
	Источник.СписокДопустимыхТипов = СписокДопустимыхТипов;
			
КонецПроцедуры

Процедура КонвертацияРезолюций(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
		
	Если Порция.Колонки.Найти("ИдентификаторУчастника") = Неопределено Тогда 			
		Порция.Колонки.Добавить("ИдентификаторУчастника", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	СтандартнаяОбработка = Ложь;

	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	ОбновитьДанныеРезолюцииПоИсточнику(Источник.Ссылка, Источник.Источник, ПараметрыЗагрузки);
		
КонецПроцедуры

Процедура ОбновитьДанныеРезолюцииПоИсточнику(Резолюция, ЗадачаПроцесс, ПараметрыЗагрузки)
	
	Если Не ЗначениеЗаполнено(Резолюция)
		Или Не ЗначениеЗаполнено(ЗадачаПроцесс)
		Или (ТипЗнч(ЗадачаПроцесс) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			И ТипЗнч(ЗадачаПроцесс) <> Тип("БизнесПроцессСсылка.Рассмотрение")) 
		Или Не ОбщегоНазначения.СсылкаСуществует(ЗадачаПроцесс)
		Или Не ОбщегоНазначения.СсылкаСуществует(Резолюция) Тогда
		Возврат
	КонецЕсли;
	
	РеквизитыРезолюции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Резолюция,
		"ИдентификаторУчастника, ФактическийАвтор, АвторРезолюции, ВнесРезолюцию");
	
	Если ТипЗнч(ЗадачаПроцесс) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда		
		Запрос = Новый Запрос;
		Запрос.Текст =	
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
			|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
			|	ЗадачаИсполнителя.ТекущийИсполнитель КАК ТекущийИсполнитель,
			|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
			|	ЗадачаИсполнителя.ИдентификаторИсполнителя КАК ИдентификаторИсполнителя,
			|	ИсторияСобытийЗадач.Сотрудник КАК Отметил
			|ПОМЕСТИТЬ ВсеЗадачи
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
			|		ПО (ИсторияСобытийЗадач.Задача = ЗадачаИсполнителя.Ссылка)
			|		И (ИсторияСобытийЗадач.Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийЗадач.Выполнена))
			|ГДЕ
			|	ЗадачаИсполнителя.Ссылка = &ЗадачаИсточника
			|	И ЗадачаИсполнителя.Выполнена
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВсеЗадачи.Ссылка КАК ЗадачаСсылка,
			|	ВсеЗадачи.Исполнитель КАК Исполнитель,
			|	ПроцессЗадачи.Исполнитель КАК Адресат,
			|	ВсеЗадачи.Отметил КАК КтоОтметил
			|ИЗ
			|	БизнесПроцесс.Рассмотрение КАК ПроцессЗадачи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеЗадачи КАК ВсеЗадачи
			|		ПО (ВсеЗадачи.БизнесПроцесс = ПроцессЗадачи.Ссылка)";
		
		Запрос.Параметры.Вставить("ЗадачаИсточника", ЗадачаПроцесс);
		ИсполнителиЗадач = Запрос.Выполнить().Выгрузить();
		ИдентификаторУчастника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесс,
			"ИдентификаторИсполнителя");
		// Обновим данные по задаче.
		УстановилРезультат = Справочники.ФактическиеИсполнители.ПустаяСсылка();
		СтрокиЗадач = ИсполнителиЗадач.НайтиСтроки(Новый Структура("ЗадачаСсылка", ЗадачаПроцесс));
		Если СтрокиЗадач.Количество() > 0 Тогда
			Отметил = СтрокиЗадач[0].КтоОтметил;
			ФактУчастник = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
				СтрокиЗадач[0].Адресат, 
				СтрокиЗадач[0].Исполнитель, 
				СтрокиЗадач[0].Исполнитель,
				Отметил);
			УстановилРезультат = ФактУчастник;
		КонецЕсли;
	Иначе
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаПроцесс,
			"ИдентификаторИсполнителя, Исполнитель");
		ИдентификаторУчастника = РеквизитыПроцесса.ИдентификаторИсполнителя;
		УстановилРезультат = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
			РеквизитыПроцесса.Исполнитель, 
			РеквизитыРезолюции.АвторРезолюции, 
			РеквизитыРезолюции.АвторРезолюции,
			РеквизитыРезолюции.ВнесРезолюцию);
	КонецЕсли;
	
	Если РеквизитыРезолюции.ИдентификаторУчастника <> ИдентификаторУчастника
		Или РеквизитыРезолюции.ФактическийАвтор <> УстановилРезультат Тогда
		РезолюцияОбъект = Резолюция.ПолучитьОбъект();
		Если ИдентификаторУчастника <> ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор() Тогда	
			РезолюцияОбъект.ИдентификаторУчастника = ИдентификаторУчастника;
		КонецЕсли;
		Если ЗначениеЗаполнено(УстановилРезультат) Тогда
			РезолюцияОбъект.ФактическийАвтор = УстановилРезультат;
		КонецЕсли;
		
		РезолюцияОбъект.ОбменДанными.Загрузка = Истина;	
		РезолюцияОбъект.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				РезолюцияОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(РезолюцияОбъект.Ссылка)));
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура КонвертацияСправочникаСПредопределеннымЗначением(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СсылкаНаЭлемент = Источник.Ссылка;	
	СтандартнаяОбработка = Ложь;
	
	// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
	ЭтоНовыйЭлемент = СсылкаНаЭлемент.Пустая() Или СсылкаНаЭлемент.ПолучитьОбъект() = Неопределено;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	Если ЭтоНовыйЭлемент Тогда
		
		// прямо в обработчике загрузки этого метаданного смотреть по имени - если уже есть такое в 3.0, 
		// создать объект из 2.1 (с GUID 2.1), 
		// скопировать в него свойства из объекта 3.0 (с тем же наименованием), 
		//объект 3.0 удалить.
		Элемент30 = НайтиПоНаименованию(Источник.Наименование, СсылкаНаЭлемент);
		Если ЗначениеЗаполнено(Элемент30) Тогда
			Элемент30Объект = Элемент30.ПолучитьОбъект();
			СсылкаНаЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(СсылкаНаЭлементОбъект, Элемент30Объект, , 
				"Код, Родитель, Владелец, Ссылка, ЭтоГруппа, ЭтотОбъект");
			Элемент30Объект.Удалить();
			СсылкаНаЭлементОбъект.Записать();
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияАлгоритмовПроверки(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Не ЗначениеЗаполнено(Источник.ТипОбъекта) Тогда
		Источник.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	КонецЕсли;
	
	Если Источник.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
		
		НастройкаКомбинацииУсловий = Источник.НастройкаКомбинацииУсловий.Получить();
		УстановитьЗначенияУсловийДляКомбинированныхУсловийАлгоритмовПроверки(НастройкаКомбинацииУсловий.Отбор.Элементы);
		Источник.НастройкаКомбинацииУсловий = Новый ХранилищеЗначения(НастройкаКомбинацииУсловий);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияФлагиОбъектов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	ЗаменитьИмяКолонки(Порция, "Пользователь", "ФизическоеЛицо");

	Если ТипЗнч(Источник.ФизическоеЛицо) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Источник.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.ФизическоеЛицо, "Владелец");
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура КонвертацияНастроекСвязей(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	// Предопределенные настройки не пишем, т.к. они задаются в 3.0 при создании программы.
	Если Источник.Предопределенная = Истина Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	// Ссылки на настройки связей по СВД не переносим
	Если ЭтоОписаниеОбъектаСВД(Источник.СсылкаИз)
		Или ЭтоОписаниеОбъектаСВД(Источник.СсылкаНа) Тогда
		
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Порция.Колонки.Найти("ВидКорреспонденцииДокументИз") = Неопределено Тогда
		Порция.Колонки.Добавить("ВидКорреспонденцииДокументИз");
	КонецЕсли;
	Источник.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.ПустаяСсылка();
	
	Если Порция.Колонки.Найти("КорреспонденцияИз") <> Неопределено Тогда
		Если Источник.КорреспонденцияИз = "ВходящиеДокументы" Тогда
			Источник.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Входящая;
		ИначеЕсли Источник.КорреспонденцияИз = "ИсходящиеДокументы" Тогда
			Источник.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Исходящая;
		КонецЕсли;
	КонецЕсли;
	
	Если Порция.Колонки.Найти("ВидКорреспонденцииДокументНа") = Неопределено Тогда
		Порция.Колонки.Добавить("ВидКорреспонденцииДокументНа");
	КонецЕсли;
	Источник.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.ПустаяСсылка();
	
	Если Порция.Колонки.Найти("КорреспонденцияНа") <> Неопределено Тогда
		Если Источник.КорреспонденцияНа = "ВходящиеДокументы" Тогда
			Источник.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Входящая;
		ИначеЕсли Источник.КорреспонденцияНа = "ИсходящиеДокументы" Тогда
			Источник.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Исходящая;
		КонецЕсли;
	КонецЕсли;
	
	Если Порция.Колонки.Найти("Важная") = Неопределено Тогда
		Порция.Колонки.Добавить("Важная");
	КонецЕсли;
	Источник.Важная = Истина;
			
КонецПроцедуры

Процедура КонвертацияСвязейОбъектов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	ЗаменитьИмяКолонки(Порция, "Документ", "Объект");
	ЗаменитьИмяКолонки(Порция, "СвязанныйДокумент", "СвязанныйОбъект");
	ЗаменитьИмяКолонки(Порция, "СвязанныйДокументОтправлен", "СвязанныйОбъектОтправлен");
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоОписаниеОбъектаСВД(Источник.Объект)
		Или ЭтоОписаниеОбъектаСВД(Источник.СвязанныйОбъект) 
		Или ЭтоУстаревишийТипСвязи(Источник.ТипСвязи) Тогда
		
		Возврат;
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.ЗаписатьНезависимыйРегистр(
		Порция, Источник, Приемник, ПараметрыЗагрузки);
		
КонецПроцедуры

Процедура КонвертацияТиповСвязей(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	// Предопределенные настройки обрабатываем отдельно.
	Если ЗначениеЗаполнено(Источник.ИмяПредопределенныхДанных) Тогда
		СтандартнаяОбработка = Ложь;
		ИмяПредопределенныхДанных = Источник.ИмяПредопределенныхДанных;		
		Источник.Наименование = ИмяПредопределенныхДанных;
		Источник.ИмяПредопределенныхДанных = "";
		Источник.ПометкаУдаления = Истина;

		Попытка
			НоваяСсылка = Справочники.ТипыСвязей[ИмяПредопределенныхДанных];
		Исключение
			НоваяСсылка = Неопределено;
		КонецПопытки;

		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки);
		
		// Если есть предопределенная настройка, то оставляем в силе ее
		Если НоваяСсылка <> Неопределено Тогда	
			ЗаменитьСсылкуТипаСвязи(Источник.Ссылка, НоваяСсылка, 
				ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;	
			
	КонецЕсли;
		
КонецПроцедуры

Процедура КонвертацияСправочникаСпособыДоставки(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	// В 3.0 предопределенный элемент - только МЭДО, остальные обычные:
	Если Источник.ИмяПредопределенныхДанных = "МЭДО" Тогда
		
		СсылкаНаЭлемент = Источник.Ссылка;	
		СтандартнаяОбработка = Ложь;
		
		// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
		ЭтоНовыйЭлемент = СсылкаНаЭлемент.Пустая() Или СсылкаНаЭлемент.ПолучитьОбъект() = Неопределено;
		
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки);
			
		Если ЭтоНовыйЭлемент Тогда
			// прямо в обработчике загрузки этого метаданного смотреть по имени - если уже есть такое в 3.0, 
			// создать объект из 2.1 (с GUID 2.1), 
			// скопировать в него свойства из объекта 3.0 (с тем же наименованием), 
			//объект 3.0 удалить.
			Элемент30 = НайтиПоНаименованию(Источник.Наименование, СсылкаНаЭлемент);
			Если ЗначениеЗаполнено(Элемент30) Тогда
				Элемент30Объект = Элемент30.ПолучитьОбъект();
				СсылкаНаЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(СсылкаНаЭлементОбъект, Элемент30Объект, , 
					"Код, Родитель, Владелец, Ссылка, ЭтоГруппа, ЭтотОбъект");
				Элемент30Объект.Удалить();
				
				СсылкаНаЭлементОбъект.ИмяПредопределенныхДанных = "МЭДО"; // Оно переносится пустым.
				СсылкаНаЭлементОбъект.ПометкаУдаления = Ложь;
				СсылкаНаЭлементОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Источник.ИмяПредопределенныхДанных) Тогда
		Источник.ИмяПредопределенныхДанных = "";
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	// Удалим дубли способов доставки.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпособыДоставки.Ссылка
		|ИЗ
		|	Справочник.СпособыДоставки КАК СпособыДоставки
		|ГДЕ
		|	СпособыДоставки.Наименование = &Наименование
		|	И СпособыДоставки.Наименование <> ""МЭДО""
		|	И СпособыДоставки.Ссылка <> &Ссылка
		|	И Не СпособыДоставки.ПометкаУдаления";
	Запрос.Параметры.Вставить("Ссылка", Источник.Ссылка);
	Запрос.Параметры.Вставить("Наименование", Источник.Наименование);	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпособОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпособОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
			
КонецПроцедуры

Процедура КонвертацияСправочникаУровниДоступа(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Не ЗначениеЗаполнено(Источник.ИмяПредопределенныхДанных) Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаЭлемент = Источник.Ссылка;
	СтандартнаяОбработка = Ложь;
	
	// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
	ЭтоНовыйЭлемент = СсылкаНаЭлемент.Пустая() Или СсылкаНаЭлемент.ПолучитьОбъект() = Неопределено;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	Если ЭтоНовыйЭлемент Тогда
		
		// Здесь есть дубли наименований, поэтому хитрее, чем просто НайтиПоНаименованию(Наименование, СсылкаНаЭлемент):
		Наименование = Неопределено;
		ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка КАК ЭлементСправочника
			|ИЗ
			|	Справочник.УровниДоступа КАК Таблица
			|ГДЕ
			|	Ссылка <> &СсылкаКроме
			|	И Наименование = &Наименование
			|	И &УсловиеФлажков";
		Если Источник.ИмяПредопределенныхДанных = "Регистрация" Тогда
			Наименование = "Регистрация";
			УсловиеФлажков = "ИСТИНА";
			
		ИначеЕсли Источник.ИмяПредопределенныхДанных = "Редактирование" Тогда
			Наименование = "Редактирование";
			УсловиеФлажков = "Чтение И Изменение И Добавление И Удаление";
			
		ИначеЕсли Источник.ИмяПредопределенныхДанных = "РедактированиеБезОграничения" Тогда
			Наименование = "Редактирование";
			УсловиеФлажков = "ЧтениеБезОграничения И ИзменениеБезОграничения";
			
		ИначеЕсли Источник.ИмяПредопределенныхДанных = "Чтение" Тогда
			Наименование = "Чтение";
			УсловиеФлажков = "Чтение";
			
		ИначеЕсли Источник.ИмяПредопределенныхДанных = "ЧтениеБезОграничения" Тогда
			Наименование = "Чтение";
			УсловиеФлажков = "ЧтениеБезОграничения";
			
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неожиданный предопределенный элемент справочника ""Уровни доступа"" %1'"),
				Источник.ИмяПредопределенныхДанных);
		КонецЕсли;
		Запрос = Новый Запрос(СтрЗаменить(ТекстЗапроса, "&УсловиеФлажков", УсловиеФлажков));
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("СсылкаКроме", СсылкаНаЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Элемент30Объект = Выборка.ЭлементСправочника.ПолучитьОбъект();
			СсылкаНаЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(
				СсылкаНаЭлементОбъект, Элемент30Объект, , "Код, Родитель, Владелец, Ссылка, ЭтоГруппа, ЭтотОбъект");
			Элемент30Объект.Удалить();
			
			СсылкаНаЭлементОбъект.ИмяПредопределенныхДанных = Источник.ИмяПредопределенныхДанных; // Оно переносится пустым.
			СсылкаНаЭлементОбъект.ПометкаУдаления = Ложь;
			СсылкаНаЭлементОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияКатегориДанных(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Источник.Доступ = Null Тогда
		Возврат;
	КонецЕсли;
	ЗаменитьИмяКолонки(Источник.Доступ, "Пользователь", "Участник");	
	БылиЗамены = Ложь;
	Для Каждого СтрДоступ Из Источник.Доступ Цикл
		Если ТипЗнч(СтрДоступ.Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда 
			СтрДоступ.Участник = Справочники.ПодразделенияКонтейнеры.НайтиСоздатьПодразделениеКонтейнер(
				СтрДоступ.Участник, Перечисления.СпособВключенияСотрудниковПодразделения.БезПодчиненных);
			БылиЗамены = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если БылиЗамены Тогда 
		СтандартнаяОбработка = Ложь;
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(Источник, Приемник, Порция, ПараметрыЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияСправочникаПредметыИнструкций(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	НетВ30 = Новый Массив();
	НетВ30.Добавить("ВнутренниеДокументы");
	НетВ30.Добавить("ВходящиеДокументы");
	НетВ30.Добавить("ИсходящиеДокументы");
	НетВ30.Добавить("ПроцессОбработкаВнутреннегоДокумента");
	НетВ30.Добавить("ПроцессОбработкаВнутреннегоДокументаКарточка");
	НетВ30.Добавить("ПроцессОбработкаВходящегоДокумента");
	НетВ30.Добавить("ПроцессОбработкаВходящегоДокументаКарточка");
	НетВ30.Добавить("ПроцессОбработкаИсходящегоДокумента");
	НетВ30.Добавить("ПроцессОбработкаИсходящегоДокументаКарточка");
	
	Если ЗначениеЗаполнено(Источник.ИмяПредопределенныхДанных)
			И НетВ30.Найти(Источник.ИмяПредопределенныхДанных) <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		Источник.ИмяПредопределенныхДанных = "";
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Процессы

#Область ШаблоныПроцессов

#Область ШаблоныУтверждения

// Выполняет конвертацию загружаемого шаблона утверждения из 2.1 в 3.0. 
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияШаблонаУтверждения(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаменитьИмяКолонки(Порция, "Автор", "ОбрабатывающийРезультат");
	ЗаменитьИмяКолонки(Порция, "ТрудозатратыПланАвтора", "ТрудозатратыПланОбрабатывающегоРезультат");
	
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		ЭтоУтверждение = Истина;
		СсылкаНаШаблон = СсылкаНаШаблонПоШаблонуУтверждения(Источник.Ссылка);
		Если ТипЗнч(СсылкаНаШаблон) <> Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
			ЭтоУтверждение = Ложь;
		КонецЕсли;
	Иначе
		ЭтоУтверждение = Источник.ВидПроцесса <> "Подписание";
	КонецЕсли;
	
	ЭтоНастройкаДействияВКомплексномПроцессе = ЗначениеЗаполнено(Источник.КомплексныйПроцесс);
	
	Если ЭтоУтверждение Тогда
		
		ПараметрыЗагрузки.ЗаполнятьИсточникДанных = ЭтоНастройкаДействияВКомплексномПроцессе;
		
		Если МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки) Тогда
			
			ОбновитьНастройкуДействияПроцессаОбработкиДокумента(
				Приемник, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;
		
		СоздатьОбновитьНастройкуОбработки(Источник.Ссылка, ПараметрыЗагрузки);
		
	Иначе
		
		СсылкаНаОбъект = Справочники.ШаблоныПодписания.ПолучитьСсылку(
			Источник.Ссылка.УникальныйИдентификатор());
		
		СсылкаНаОбъектСуществует = ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект);
		Если ЭтоУдалениеОбъекта(Источник) И Не СсылкаНаОбъектСуществует Тогда
			Возврат;
		КонецЕсли;
		
		Если СсылкаНаОбъектСуществует Тогда
			ШаблонОбъект = СсылкаНаОбъект.ПолучитьОбъект();
			ЭтоНовый = Ложь;
		Иначе
			ШаблонОбъект = Справочники.ШаблоныПодписания.СоздатьЭлемент();
			ШаблонОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
			
			Если ЭтоНастройкаДействияВКомплексномПроцессе Тогда
				ШаблонОбъект.ИсточникДанных = Справочники.ИсточникиДанных.ДО21;
			КонецЕсли;
			ЭтоНовый = Истина;
		КонецЕсли;
		
		Если ЭтоУдалениеОбъекта(Источник) Тогда
			ШаблонОбъект.ПометкаУдаления = Истина;
		Иначе
		
			ПереносимыеРеквизиты =
				"Наименование,
				|Важность,
				|ВладелецШаблона,
				|ДобавлятьНаименованиеПредмета,
				|КоличествоИтераций,
				|Комментарий,
				|КомплексныйПроцесс,
				|НаименованиеБизнесПроцесса,
				|Описание,
				|Ответственный,
				|СрокИсполненияПроцесса,
				|СрокОтложенногоСтарта,
				|ШаблонВКомплексномПроцессе";
				
			ЗаполнитьЗначенияСвойств(ШаблонОбъект, Источник, ПереносимыеРеквизиты);
			
			Если ЗначениеЗаполнено(Источник.ИсходныйШаблон) Тогда
				ШаблонОбъект.ИсходныйШаблон = Справочники.ШаблоныПодписания.ПолучитьСсылку(
					Источник.ИсходныйШаблон.УникальныйИдентификатор());
			КонецЕсли;
			
			ШаблонОбъект.СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.ПЭП;
			Если Источник.ПодписыватьЭП Тогда
				ШаблонОбъект.СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.УЭП;
			КонецЕсли;
				
			// Участники (подписывающий).
			
			СтрокаУчастника = ШаблонОбъект.Участники.Найти(
				БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать, "ТочкаМаршрута");
			Если СтрокаУчастника = Неопределено Тогда
				СтрокаУчастника = ШаблонОбъект.Участники.Добавить();
				СтрокаУчастника.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать;
			КонецЕсли;
			
			СтрокаУчастника.Участник = Источник.Исполнитель;
			СтрокаУчастника.Подписывающий = Источник.Исполнитель;
			
			СтрокаУчастника.ВариантУстановкиСрокаИсполнения = Источник.ВариантУстановкиСрокаИсполнения;	
			СтрокаУчастника.СрокИсполнения = Источник.СрокИсполнения;
			СтрокаУчастника.СрокИсполненияДни = Источник.СрокИсполненияДни;
			СтрокаУчастника.СрокИсполненияЧасы = Источник.СрокИсполненияЧасы;
			СтрокаУчастника.СрокИсполненияМинуты = Источник.СрокИсполненияМинуты;			
			
			СтрокаУчастника.ТрудозатратыПлан = Источник.ТрудозатратыПланИсполнителя;
			
			// Участники (обрабатывающий результат).
			
			СтрокаУчастника = ШаблонОбъект.Участники.Найти(
				БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат, "ТочкаМаршрута");
			Если СтрокаУчастника = Неопределено Тогда
				СтрокаУчастника = ШаблонОбъект.Участники.Добавить();
				СтрокаУчастника.ТочкаМаршрута = 
					БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат;
			КонецЕсли;
				
			СтрокаУчастника.Участник = Источник.ОбрабатывающийРезультат;
			
			СтрокаУчастника.ВариантУстановкиСрокаИсполнения = 
				Источник.ВариантУстановкиСрокаОбработкиРезультатов;
			
			СтрокаУчастника.СрокИсполнения = Источник.СрокОбработкиРезультатов;
			СтрокаУчастника.СрокИсполненияДни = Источник.СрокОбработкиРезультатовДни;
			СтрокаУчастника.СрокИсполненияЧасы = Источник.СрокОбработкиРезультатовЧасы;
			СтрокаУчастника.СрокИсполненияМинуты = Источник.СрокОбработкиРезультатовМинуты;
			СтрокаУчастника.ТрудозатратыПлан = Источник.ТрудозатратыПланОбрабатывающегоРезультат;
			
			// ДополнительныеРеквизиты
			ШаблонОбъект.ДополнительныеРеквизиты.Очистить();
			Если ЗначениеЗаполнено(Источник.ДополнительныеРеквизиты) Тогда
				Для Каждого СтрокаТаблицы Из Источник.ДополнительныеРеквизиты Цикл
					ЗаполнитьЗначенияСвойств(
						ШаблонОбъект.ДополнительныеРеквизиты.Добавить(),
						СтрокаТаблицы); 
				КонецЦикла;
			КонецЕсли; 
			
			// Предметы
			ШаблонОбъект.Предметы.Очистить();
			Если ЗначениеЗаполнено(Источник.Предметы) Тогда
				Для Каждого СтрокаТаблицы Из Источник.Предметы Цикл
					ЗаполнитьЗначенияСвойств(ШаблонОбъект.Предметы.Добавить(), СтрокаТаблицы); 
				КонецЦикла;
			КонецЕсли;
			
			// ПредметыЗадач
			ШаблонОбъект.ПредметыЗадач.Очистить();
			Если ЗначениеЗаполнено(Источник.ПредметыЗадач) Тогда
				Для Каждого СтрокаТаблицы Из Источник.ПредметыЗадач Цикл
					СтрокаПредметаЗадачи = ШаблонОбъект.ПредметыЗадач.Добавить();
					
					ТочкаМаршрута = БизнесПроцессы.Подписание.ПустаяСсылкаНаТочкуМаршрута();
					Если СтрокаТаблицы.ТочкаМаршрута =
						БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
							
						ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать;
						
					ИначеЕсли СтрокаТаблицы.ТочкаМаршрута =
						БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
							
						ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат;
					КонецЕсли;
					
					СтрокаПредметаЗадачи.ТочкаМаршрута = ТочкаМаршрута;
					СтрокаПредметаЗадачи.ИмяПредмета = СтрокаТаблицы.ИмяПредмета;
					СтрокаПредметаЗадачи.ОбязательноеЗаполнение = СтрокаТаблицы.ОбязательноеЗаполнение;
				КонецЦикла;
			КонецЕсли;
			
			// УсловияЗапретаВыполнения
			ШаблонОбъект.УсловияЗапретаВыполнения.Очистить();
			Если ЗначениеЗаполнено(Источник.УсловияЗапретаВыполнения) Тогда
				Для Каждого СтрокаТаблицы Из Источник.УсловияЗапретаВыполнения Цикл
					ЗаполнитьЗначенияСвойств(
						ШаблонОбъект.УсловияЗапретаВыполнения.Добавить(),
						СтрокаТаблицы); 
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ШаблонОбъект.ОбменДанными.Загрузка = ПараметрыЗагрузки.Загрузка;
		ШаблонОбъект.Записать();
		
		Приемник = ШаблонОбъект;
		
		Если ЭтоНовый Тогда
			ЗаменитьСсылкуШаблонаУтвержденияПодписанием(
				Источник.Ссылка,
				ПараметрыЗагрузки.Загрузка,
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;
		
		ОбновитьНастройкуДействияПроцессаОбработкиДокумента(
			ШаблонОбъект, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
		
		СоздатьОбновитьНастройкуОбработки(ШаблонОбъект.Ссылка, ПараметрыЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку по шаблону утверждения.
//
// Параметры:
//  ШаблонУтверждения - СправочникСсылка.ШаблоныУтверждения
//
// Возвращаемое значение:
//  СправочникСсылка.ШаблоныПодписания, СправочникСсылка.ШаблоныУтверждения -
//
Функция СсылкаНаШаблонПоШаблонуУтверждения(ШаблонУтверждения)
	
	Если ОбщегоНазначения.СсылкаСуществует(ШаблонУтверждения) Тогда
		Возврат ШаблонУтверждения;
	КонецЕсли;
	
	СсылкаНаШаблонПодписание = Справочники.ШаблоныПодписания.ПолучитьСсылку(
		ШаблонУтверждения.УникальныйИдентификатор());
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаШаблонПодписание) Тогда
		Возврат СсылкаНаШаблонПодписание;
	КонецЕсли;
	
	Возврат ШаблонУтверждения;
	
КонецФункции

// Выполняет замену ссылок шаблона утверждения, на шаблон подписания.
// 
// Параметры:
//  ШаблонУтверждения - СправочникСсылка.ШаблоныУтверждения
//  Загрузка - Булево
//  ПричинаЗагрузки - Булево
// 
Процедура ЗаменитьСсылкуШаблонаУтвержденияПодписанием(ШаблонУтверждения, Загрузка, ПричинаЗагрузки)
	
	СсылкаНаШаблонПодписание = Справочники.ШаблоныПодписания.ПолучитьСсылку(
		ШаблонУтверждения.УникальныйИдентификатор());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШаблонУтверждения", ШаблонУтверждения);
	
	// БизнесПроцесс.КомплексныйПроцесс.Этапы.ШаблонБизнесПроцесса
	// БизнесПроцесс.КомплексныйПроцесс.ПредметыЗадач.ШаблонБизнесПроцесса
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Этапы.Ссылка КАК Процесс
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.Этапы КАК Этапы
		|ГДЕ
		|	Этапы.ШаблонБизнесПроцесса = &ШаблонУтверждения
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредметыЗадач.Ссылка КАК Процесс
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.ПредметыЗадач КАК ПредметыЗадач
		|ГДЕ
		|	ПредметыЗадач.ШаблонБизнесПроцесса = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаблокироватьДанныеДляРедактирования(Выборка.Процесс);
		
		ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
		
		Для Каждого СтрокаТаблицы Из ПроцессОбъект.Этапы Цикл
			Если СтрокаТаблицы.ШаблонБизнесПроцесса = ШаблонУтверждения Тогда
				СтрокаТаблицы.ШаблонБизнесПроцесса = СсылкаНаШаблонПодписание; 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ПроцессОбъект.ПредметыЗадач Цикл
			Если СтрокаТаблицы.ШаблонБизнесПроцесса = ШаблонУтверждения Тогда
				СтрокаТаблицы.ШаблонБизнесПроцесса = СсылкаНаШаблонПодписание;
				
				Если СтрокаТаблицы.ТочкаМаршрута =
					БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
						
					ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать;
					
				ИначеЕсли СтрокаТаблицы.ТочкаМаршрута =
					БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
						
					ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат;
				КонецЕсли;
				
				СтрокаТаблицы.ТочкаМаршрута = ТочкаМаршрута;
				
			КонецЕсли;
		КонецЦикла;
		
		ПроцессОбъект.ОбменДанными.Загрузка = Загрузка;
		
		ПроцессОбъект.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ПроцессОбъект.Ссылка,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПроцессОбъект.Ссылка)));
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Выборка.Процесс);
		
	КонецЦикла;	
	
	// Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы.ШаблонБизнесПроцесса
	// Справочник.ШаблоныКомплексныхБизнесПроцессов.ПредметыЗадач.ШаблонБизнесПроцесса
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Этапы.Ссылка КАК Шаблон
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК Этапы
		|ГДЕ
		|	Этапы.ШаблонБизнесПроцесса = &ШаблонУтверждения
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредметыЗадач.Ссылка КАК Шаблон
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов.ПредметыЗадач КАК ПредметыЗадач
		|ГДЕ
		|	ПредметыЗадач.ШаблонБизнесПроцесса = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаблокироватьДанныеДляРедактирования(Выборка.Шаблон);
		
		ШаблонОбъект = Выборка.Шаблон.ПолучитьОбъект();
		
		Для Каждого СтрокаТаблицы Из ШаблонОбъект.Этапы Цикл
			Если СтрокаТаблицы.ШаблонБизнесПроцесса = ШаблонУтверждения Тогда
				СтрокаТаблицы.ШаблонБизнесПроцесса = СсылкаНаШаблонПодписание; 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ШаблонОбъект.ПредметыЗадач Цикл
			Если СтрокаТаблицы.ШаблонБизнесПроцесса = ШаблонУтверждения Тогда
				СтрокаТаблицы.ШаблонБизнесПроцесса = СсылкаНаШаблонПодписание; 
			КонецЕсли;
		КонецЦикла;
		
		ШаблонОбъект.ОбменДанными.Загрузка = Загрузка;
		
		ШаблонОбъект.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ШаблонОбъект.Ссылка,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ШаблонОбъект.Ссылка)));
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Выборка.Шаблон);
		
	КонецЦикла;
	
	// Справочник.ПравилаЭскалации.Процессы.Шаблон
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаЭскалацииЗадачПроцессы.Ссылка КАК Правило
		|ИЗ
		|	Справочник.ПравилаЭскалации.Процессы КАК ПравилаЭскалацииЗадачПроцессы
		|ГДЕ
		|	ПравилаЭскалацииЗадачПроцессы.Шаблон = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаблокироватьДанныеДляРедактирования(Выборка.Правило);
		
		ПравилоОбъект = Выборка.Правило.ПолучитьОбъект();
		
		Для Каждого СтрокаТаблицы Из ПравилоОбъект.Процессы Цикл
			Если СтрокаТаблицы.Шаблон = ШаблонУтверждения Тогда
				СтрокаТаблицы.Шаблон = СсылкаНаШаблонПодписание; 
			КонецЕсли;
		КонецЦикла;
			
		ПравилоОбъект.ОбменДанными.Загрузка = Загрузка;
		
		ПравилоОбъект.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ПравилоОбъект.Ссылка,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПравилоОбъект.Ссылка)));
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Выборка.Правило);
		
	КонецЦикла;
	
	// Справочник.ПоказателиПроцессов.ОтборыДанных.Шаблон
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиПроцессовОтборыДанных.Ссылка КАК ПоказательПроцесса
		|ИЗ
		|	Справочник.ПоказателиПроцессов.ОтборыДанных КАК ПоказателиПроцессовОтборыДанных
		|ГДЕ
		|	ПоказателиПроцессовОтборыДанных.Шаблон = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаблокироватьДанныеДляРедактирования(Выборка.ПоказательПроцесса);
		
		ПоказательОбъект = Выборка.ПоказательПроцесса.ПолучитьОбъект();
		
		Для Каждого СтрокаТаблицы Из ПоказательОбъект.ОтборыДанных Цикл
			Если СтрокаТаблицы.Шаблон = ШаблонУтверждения Тогда
				СтрокаТаблицы.Шаблон = СсылкаНаШаблонПодписание; 
			КонецЕсли;
		КонецЦикла;
			
		ПоказательОбъект.ОбменДанными.Загрузка = Загрузка;
		
		ПоказательОбъект.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ПоказательОбъект.Ссылка,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПоказательОбъект.Ссылка)));
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Выборка.ПоказательПроцесса);
		
	КонецЦикла;
	
	// Справочник.ПараметрыСхемДляКомплексныхПроцессов.НастройкиЭлементов.Настройка
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиЭлементов.Ссылка КАК ПараметрыСхемы
		|ИЗ
		|	Справочник.ПараметрыСхемДляКомплексныхПроцессов.НастройкиЭлементов КАК НастройкиЭлементов
		|ГДЕ
		|	НастройкиЭлементов.Настройка = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаблокироватьДанныеДляРедактирования(Выборка.ПараметрыСхемы);
		
		ПараметрыСхемыОбъект = Выборка.ПараметрыСхемы.ПолучитьОбъект();
		
		Для Каждого СтрокаТаблицы Из ПараметрыСхемыОбъект.НастройкиЭлементов Цикл
			Если СтрокаТаблицы.Настройка = ШаблонУтверждения Тогда
				СтрокаТаблицы.Настройка = СсылкаНаШаблонПодписание; 
			КонецЕсли;
		КонецЦикла;
			
		ПараметрыСхемыОбъект.ОбменДанными.Загрузка = Загрузка;
		
		ПараметрыСхемыОбъект.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ПараметрыСхемыОбъект.Ссылка,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПараметрыСхемыОбъект.Ссылка)));
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Выборка.ПараметрыСхемы);
			
	КонецЦикла;
	
	// Справочник.Инструкции.УсловияОтображения.ШаблонПроцесса
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УсловияОтображения.Ссылка КАК Инструкция
		|ИЗ
		|	Справочник.Инструкции.УсловияОтображения КАК УсловияОтображения
		|ГДЕ
		|	УсловияОтображения.ШаблонПроцесса = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаблокироватьДанныеДляРедактирования(Выборка.Инструкция);
		
		ИнструкцияОбъект = Выборка.Инструкция.ПолучитьОбъект();
		
		Для Каждого СтрокаТаблицы Из ИнструкцияОбъект.УсловияОтображения Цикл
			Если СтрокаТаблицы.ШаблонПроцесса = ШаблонУтверждения Тогда
				СтрокаТаблицы.ШаблонПроцесса = СсылкаНаШаблонПодписание; 
			КонецЕсли;
		КонецЦикла;
			
		ИнструкцияОбъект.ОбменДанными.Загрузка = Загрузка;
		
		ИнструкцияОбъект.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ИнструкцияОбъект.Ссылка,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ИнструкцияОбъект.Ссылка)));
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Выборка.Инструкция);
			
	КонецЦикла;
	
	// Блокировка регистров в записях которых выполняется подмена
	// ссылки утверждения на подписание.
	
	БлокировкаДанных = Новый БлокировкаДанных();
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.РабочиеГруппы");
	ЭлементБлокировки.УстановитьЗначение("Объект", ШаблонУтверждения);
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПредметыИУчастникиДействийКомплексныхПроцессов");
	ЭлементБлокировки.УстановитьЗначение("ШаблонДействия", ШаблонУтверждения);
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов");
	ЭлементБлокировки.УстановитьЗначение("ШаблонБизнесПроцесса", ШаблонУтверждения);
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.НастройкаШаблоновБизнесПроцессов");
	ЭлементБлокировки.УстановитьЗначение("ШаблонБизнесПроцесса", ШаблонУтверждения);
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.КоличествоНастроекШаблоновПроцессов");
	ЭлементБлокировки.УстановитьЗначение("ШаблонПроцесса", ШаблонУтверждения);
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПротоколРаботыСотрудников");
	ЭлементБлокировки.УстановитьЗначение("ОбъектДанных", ШаблонУтверждения);
	
	БлокировкаДанных.Заблокировать();
	
	// РегистрСведений.РабочиеГруппы.Объект
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РабочиеГруппы.Объект,
		|	РабочиеГруппы.Участник,
		|	РабочиеГруппы.Изменение
		|ИЗ
		|	РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	РабочиеГруппы.Объект = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи для шаблона подписания.
		
		Набор = РегистрыСведений.РабочиеГруппы.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(СсылкаНаШаблонПодписание);
		Набор.Отбор.Участник.Установить(Выборка.Участник);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Объект = СсылкаНаШаблонПодписание;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи по шаблону утверждения.
		
		Набор = РегистрыСведений.РабочиеГруппы.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Выборка.Объект);
		Набор.Отбор.Участник.Установить(Выборка.Участник);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла; 
	
	// РегистрСведений.ПредметыИУчастникиДействийКомплексныхПроцессов.ШаблонДействия
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПредметыИУчастники.ИмяПредмета,
		|	ПредметыИУчастники.Участник,
		|	ПредметыИУчастники.ШаблонДействия,
		|	ПредметыИУчастники.Изменение,
		|	ПредметыИУчастники.КомплексныйПроцесс
		|ИЗ
		|	РегистрСведений.ПредметыИУчастникиДействийКомплексныхПроцессов КАК ПредметыИУчастники
		|ГДЕ
		|	ПредметыИУчастники.ШаблонДействия = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи для шаблона подписания.
		
		Набор = РегистрыСведений.ПредметыИУчастникиДействийКомплексныхПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.ИмяПредмета.Установить(Выборка.ИмяПредмета);
		Набор.Отбор.Участник.Установить(Выборка.Участник);
		Набор.Отбор.ШаблонДействия.Установить(СсылкаНаШаблонПодписание);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ШаблонДействия = СсылкаНаШаблонПодписание;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи по шаблону утверждения.
		
		Набор = РегистрыСведений.ПредметыИУчастникиДействийКомплексныхПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.ИмяПредмета.Установить(Выборка.ИмяПредмета);
		Набор.Отбор.Участник.Установить(Выборка.Участник);
		Набор.Отбор.ШаблонДействия.Установить(Выборка.ШаблонДействия);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла;
	
	// РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаАвтоматическогоЗапуска.ВидБизнесСобытия,
		|	ПравилаАвтоматическогоЗапуска.КлассИсточникаБизнесСобытия,
		|	ПравилаАвтоматическогоЗапуска.ОрганизацияИсточникаБизнесСобытия,
		|	ПравилаАвтоматическогоЗапуска.ШаблонБизнесПроцесса,
		|	ПравилаАвтоматическогоЗапуска.Условие
		|ИЗ
		|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапуска
		|ГДЕ
		|	ПравилаАвтоматическогоЗапуска.ШаблонБизнесПроцесса = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи для шаблона подписания.
		
		Набор = РегистрыСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.ВидБизнесСобытия.Установить(Выборка.ВидБизнесСобытия);
		Набор.Отбор.КлассИсточникаБизнесСобытия.Установить(Выборка.КлассИсточникаБизнесСобытия);
		Набор.Отбор.ОрганизацияИсточникаБизнесСобытия.Установить(Выборка.ОрганизацияИсточникаБизнесСобытия);
		Набор.Отбор.ШаблонБизнесПроцесса.Установить(СсылкаНаШаблонПодписание);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ШаблонБизнесПроцесса = СсылкаНаШаблонПодписание;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи по шаблону утверждения.
		
		Набор = РегистрыСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.ВидБизнесСобытия.Установить(Выборка.ВидБизнесСобытия);
		Набор.Отбор.КлассИсточникаБизнесСобытия.Установить(Выборка.КлассИсточникаБизнесСобытия);
		Набор.Отбор.ОрганизацияИсточникаБизнесСобытия.Установить(Выборка.ОрганизацияИсточникаБизнесСобытия);
		Набор.Отбор.ШаблонБизнесПроцесса.Установить(Выборка.ШаблонБизнесПроцесса);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла;
	
	// РегистрСведений.НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаШаблоновБизнесПроцессов.КомуНазначен,
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса,
		|	НастройкаШаблоновБизнесПроцессов.Организация,
		|	НастройкаШаблоновБизнесПроцессов.Условие,
		|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение,
		|	НастройкаШаблоновБизнесПроцессов.ИнтерактивныйЗапуск,
		|	НастройкаШаблоновБизнесПроцессов.ВидИнтерактивногоСобытия,
		|	НастройкаШаблоновБизнесПроцессов.СобытияАвтоСтарта
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи для шаблона подписания.
		
		Набор = РегистрыСведений.НастройкаШаблоновБизнесПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.КомуНазначен.Установить(Выборка.КомуНазначен);
		Набор.Отбор.ШаблонБизнесПроцесса.Установить(СсылкаНаШаблонПодписание);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.Условие.Установить(Выборка.Условие);
			
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ШаблонБизнесПроцесса = СсылкаНаШаблонПодписание;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи по шаблону утверждения.
		
		Набор = РегистрыСведений.НастройкаШаблоновБизнесПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.КомуНазначен.Установить(Выборка.КомуНазначен);
		Набор.Отбор.ШаблонБизнесПроцесса.Установить(Выборка.ШаблонБизнесПроцесса);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.Условие.Установить(Выборка.Условие);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла;
	
	// РегистрСведений.КоличествоНастроекШаблоновПроцессов.ШаблонПроцесса
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КоличествоНастроекШаблоновПроцессов.ШаблонПроцесса,
		|	КоличествоНастроекШаблоновПроцессов.КоличествоНастроек
		|ИЗ
		|	РегистрСведений.КоличествоНастроекШаблоновПроцессов КАК КоличествоНастроекШаблоновПроцессов
		|ГДЕ
		|	КоличествоНастроекШаблоновПроцессов.ШаблонПроцесса = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи для шаблона подписания.
		
		Набор = РегистрыСведений.КоличествоНастроекШаблоновПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.ШаблонПроцесса.Установить(СсылкаНаШаблонПодписание);
			
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ШаблонПроцесса = СсылкаНаШаблонПодписание;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи по шаблону утверждения.
		
		Набор = РегистрыСведений.КоличествоНастроекШаблоновПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.ШаблонПроцесса.Установить(Выборка.ШаблонПроцесса);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла;
	
	// РегистрСведений.ПротоколРаботыСотрудников.ОбъектДанных
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПротоколРаботыСотрудников.Дата,
		|	ПротоколРаботыСотрудников.ОбъектДанных,
		|	ПротоколРаботыСотрудников.Сотрудник,
		|	ПротоколРаботыСотрудников.ТипСобытия,
		|	ПротоколРаботыСотрудников.Длительность,
		|	ПротоколРаботыСотрудников.ДополнительныеСведения,
		|	ПротоколРаботыСотрудников.ОписаниеСобытия,
		|	ПротоколРаботыСотрудников.ИмяКомпьютера
		|ИЗ
		|	РегистрСведений.ПротоколРаботыСотрудников КАК ПротоколРаботыСотрудников
		|ГДЕ
		|	ПротоколРаботыСотрудников.ОбъектДанных = &ШаблонУтверждения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи для шаблона подписания.
		
		Набор = РегистрыСведений.ПротоколРаботыСотрудников.СоздатьНаборЗаписей();
		Набор.Отбор.Дата.Установить(Выборка.Дата);
		Набор.Отбор.ОбъектДанных.Установить(СсылкаНаШаблонПодписание);
		Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		Набор.Отбор.ТипСобытия.Установить(Выборка.ТипСобытия);
					
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ОбъектДанных = СсылкаНаШаблонПодписание;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи по шаблону утверждения.
		
		Набор = РегистрыСведений.ПротоколРаботыСотрудников.СоздатьНаборЗаписей();
		Набор.Отбор.Дата.Установить(Выборка.Дата);
		Набор.Отбор.ОбъектДанных.Установить(Выборка.ОбъектДанных);
		Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		Набор.Отбор.ТипСобытия.Установить(Выборка.ТипСобытия);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Выполняет конвертацию загружаемого шаблона Исполнения из 2.1 в 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияШаблонаИсполнения(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
		
	ЭтоНастройкаДействияВКомплексномПроцессе = ЗначениеЗаполнено(Источник.КомплексныйПроцесс);
	
	ПараметрыЗагрузки.ЗаполнятьИсточникДанных = ЭтоНастройкаДействияВКомплексномПроцессе;
	Если МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки) Тогда
		
		ОбновитьНастройкуДействияПроцессаОбработкиДокумента(
			Приемник, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
	КонецЕсли;
	
	СоздатьОбновитьНастройкуОбработки(Источник.Ссылка, ПараметрыЗагрузки);
	
КонецПроцедуры

// Выполняет конвертацию загружаемого шаблона комплексного процесса из 2.1 в 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияШаблонаКомплексногоБизнесПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЭтоУдалениеОбъекта(Источник) Тогда
	
		ЭтоНастройкаДействияВКомплексномПроцессе = ЗначениеЗаполнено(Источник.КомплексныйПроцесс);
		
		Если ЗначениеЗаполнено(Источник.Схема) Тогда	
			Источник.Схема = 
				Справочники.УдалитьСхемыКомплексныхПроцессов.СсылкаНаСхемуПроцессаПоСхемеКомплексногоПроцесса(
					Источник.Схема);
		Иначе
			Источник.Схема = Справочники.СхемыПроцессов.ПустаяСсылка();
		КонецЕсли;
		
		Если Источник.ПредметыЗадач <> Null Тогда
		
			// Удаляем строки соответствующие точке маршрута Контролер.
			
			Индекс = Источник.ПредметыЗадач.Количество() - 1;
			Пока Индекс >= 0 Цикл
				
				СтрокаТаблицы = Источник.ПредметыЗадач[Индекс];
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторЭтапа)
					И Не ЗначениеЗаполнено(СтрокаТаблицы.ШаблонБизнесПроцесса)
					И ЗначениеЗаполнено(СтрокаТаблицы.ТочкаМаршрута)
					И Не ЗначениеЗаполнено(СтрокаТаблицы.ТочкаМаршрута.Вид) Тогда
					
					Источник.ПредметыЗадач.Удалить(Индекс);
				КонецЕсли;
				
				Индекс = Индекс - 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыЗагрузки.ЗаполнятьИсточникДанных = ЭтоНастройкаДействияВКомплексномПроцессе;
		
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	СоздатьОбновитьНастройкуОбработкиПоКомплексномуПроцессу(Источник.Ссылка, ПараметрыЗагрузки);
	
КонецПроцедуры

// Выполняет конвертацию загружаемого шаблона составного процесса из 2.1 в 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияШаблонаСоставногоБизнесПроцесса(
	Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Источник.ИмяПредопределенныхДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНастройкаДействияВКомплексномПроцессе = ЗначениеЗаполнено(Источник.КомплексныйПроцесс);
	
	ИдентификаторСсылки = Источник.Ссылка.УникальныйИдентификатор();
	
	СсылкаНаОбъект = 
		Справочники.ШаблоныКомплексныхБизнесПроцессов.ПолучитьСсылку(ИдентификаторСсылки);
	
	СсылкаНаОбъектСуществует = ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект);
	
	Если ЭтоУдалениеОбъекта(Источник) И Не СсылкаНаОбъектСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНаОбъектСуществует Тогда
		ЗаблокироватьДанныеДляРедактирования(СсылкаНаОбъект);
		ШаблонОбъект = СсылкаНаОбъект.ПолучитьОбъект();
	Иначе
		ШаблонОбъект = Справочники.ШаблоныКомплексныхБизнесПроцессов.СоздатьЭлемент();
		ШаблонОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
		
		Если ЭтоНастройкаДействияВКомплексномПроцессе Тогда
			ШаблонОбъект.ИсточникДанных = Справочники.ИсточникиДанных.ДО21;
		КонецЕсли;
		
		ШаблонОбъект.ИдентификаторСсылки = ИдентификаторСсылки;
		
	КонецЕсли;
	
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		
		ШаблонОбъект.ПометкаУдаления = Истина;
		
		// Схема.
		
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(ШаблонОбъект.Схема);
		ДанныеСхемы.ПометкаУдаления = Истина;
		Справочники.СхемыПроцессов.ЗаписатьДанныеСхемыПроцесса(
			ШаблонОбъект.Схема, ДанныеСхемы, ПараметрыЗагрузки.Загрузка);
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ШаблонОбъект.Схема,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ШаблонОбъект.Схема)));
		КонецЕсли;
		
		// Параметры схемы.
		
		ПараметрыСхемы = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(
			ШаблонОбъект.Ссылка);
		
		ДанныеПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			ПараметрыСхемы);
		
		ДанныеПараметров.ПометкаУдаления = Истина;
		
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ЗаписатьДанныеПараметровСхемы(
			ПараметрыСхемы, ДанныеПараметров, ПараметрыЗагрузки.Загрузка);
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ПараметрыСхемы,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПараметрыСхемы)));
		КонецЕсли;
		
	Иначе
		ПереносимыеРеквизиты =
			"Наименование,
			|Автор,
			|Важность,
			|ВладелецШаблона,
			|ДобавлятьНаименованиеПредмета,
			|Комментарий,
			|КомплексныйПроцесс,
			|НаименованиеБизнесПроцесса,
			|Ответственный,
			|СрокИсполненияПроцесса,
			|СрокОтложенногоСтарта,
			|ШаблонВКомплексномПроцессе,
			|ПометкаУдаления";
		
		ЗаполнитьЗначенияСвойств(ШаблонОбъект, Источник, ПереносимыеРеквизиты);
		
		ШаблонОбъект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		
		Если ЗначениеЗаполнено(Источник.ИсходныйШаблон) Тогда
			ШаблонОбъект.ИсходныйШаблон = Справочники.ШаблоныКомплексныхБизнесПроцессов.ПолучитьСсылку(
				Источник.ИсходныйШаблон.УникальныйИдентификатор());
		КонецЕсли;
		
		ШаблонОбъект.Схема = Справочники.СхемыПроцессов.ПолучитьСсылку(ИдентификаторСсылки);
		
		// СхемыПроцессов, ПараметрыСхемДляКомплексныхПроцессов
		
		ТаблицаДействий = Новый ТаблицаЗначений();
		ТаблицаДействий.Колонки.Добавить("Имя");
		ТаблицаДействий.Колонки.Добавить("Действие");
		ТаблицаДействий.Колонки.Добавить("Наименование");
		ТаблицаДействий.Колонки.Добавить("Порядок");
		
		Если ЗначениеЗаполнено(Источник.Шаблоны) Тогда
		
			Для Каждого СтрокаШаблона Из Источник.Шаблоны Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаШаблона.Шаблон) Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДействия = ТаблицаДействий.Добавить();
				
				ПараметрыДействия = ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита(
					СтрокаШаблона.Реквизит);
				
				ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
				
				СтрокаДействия.Действие = СтрокаШаблона.Шаблон;
				
			КонецЦикла;
		
		КонецЕсли;
		
		ТаблицаДействий.Сортировать("Порядок Возр");
		
		ОбновитьСхемуПроцессаОбработкиДокумента(
			ИдентификаторСсылки,
			ТаблицаДействий,
			Источник.Наименование,
			ПараметрыЗагрузки.Загрузка,
			ПараметрыЗагрузки.ПричинаЗагрузки);
		
		ОбновитьПараметрыСхемыПроцессаОбработкиДокумента(
			ИдентификаторСсылки,
			СсылкаНаОбъект,
			Источник.КомплексныйПроцесс,
			ТаблицаДействий,
			ПараметрыЗагрузки.Загрузка,
			ПараметрыЗагрузки.ПричинаЗагрузки);
		
		// ДополнительныеРеквизиты
		ШаблонОбъект.ДополнительныеРеквизиты.Очистить();
		Если ЗначениеЗаполнено(Источник.ДополнительныеРеквизиты) Тогда
			Для Каждого СтрокаТаблицы Из Источник.ДополнительныеРеквизиты Цикл
				ЗаполнитьЗначенияСвойств(
					ШаблонОбъект.ДополнительныеРеквизиты.Добавить(),
					СтрокаТаблицы); 
			КонецЦикла;
		КонецЕсли;
		
		// Предметы
		ШаблонОбъект.Предметы.Очистить();
		Если ЗначениеЗаполнено(Источник.Предметы) Тогда
			Для Каждого СтрокаТаблицы Из Источник.Предметы Цикл
				ЗаполнитьЗначенияСвойств(ШаблонОбъект.Предметы.Добавить(), СтрокаТаблицы); 
			КонецЦикла;
		КонецЕсли;
		
		// ПредметыЗадач
		ШаблонОбъект.ПредметыЗадач.Очистить();
		Если ЗначениеЗаполнено(Источник.Предметы) И ЗначениеЗаполнено(Источник.Шаблоны) Тогда
			
			МенеджерПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов;
			ПараметрыПоСхеме = МенеджерПараметров.ПараметрыПоСхеме(ШаблонОбъект.Схема);
			ДанныеПараметров = МенеджерПараметров.ДанныеПараметровСхемы(ПараметрыПоСхеме);
			
			ТипыДействияИКартыМаршрута = Новый Соответствие();
			Для Каждого КлючЗначение Из ДанныеПараметров.НастройкиЭлементов Цикл
				
				НастройкаДействия = КлючЗначение.Значение;
				ТипДействия = ТипЗнч(НастройкаДействия);
				
				Если ТипыДействияИКартыМаршрута[ТипДействия] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МенеджерНастроекДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
					НастройкаДействия);
				ИмяПроцесса = МенеджерНастроекДействия.ИмяПроцесса(НастройкаДействия);
				
				ТипыДействияИКартыМаршрута[ТипДействия] = 
					БизнесПроцессы[ИмяПроцесса].ПолучитьКартуМаршрута();
			КонецЦикла;
			
			Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
				
				Для Каждого КлючЗначение Из ДанныеПараметров.НастройкиЭлементов Цикл
					
					ИмяЭлемента = КлючЗначение.Ключ;
					НастройкаДействия = КлючЗначение.Значение;
					ТипДействия = ТипЗнч(НастройкаДействия);
					Идентификатор = ДанныеПараметров.ИдентификаторыНастроек[ИмяЭлемента];
					
					КартаМаршрута = ТипыДействияИКартыМаршрута[ТипДействия];
					Для Каждого Элемент Из КартаМаршрута.ЭлементыГрафическойСхемы Цикл
						Если ТипЗнч(Элемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда
							СтрокаТаблицы = ШаблонОбъект.ПредметыЗадач.Добавить();
							СтрокаТаблицы.ИдентификаторЭтапа = Идентификатор;
							СтрокаТаблицы.ШаблонБизнесПроцесса = НастройкаДействия;
							СтрокаТаблицы.ТочкаМаршрута = Элемент.Значение;
							СтрокаТаблицы.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ШаблонОбъект.ОбменДанными.Загрузка = ПараметрыЗагрузки.Загрузка;
	ШаблонОбъект.Записать();
	
	Если СсылкаНаОбъектСуществует Тогда
		РазблокироватьДанныеДляРедактирования(СсылкаНаОбъект);
	КонецЕсли;
	
	Приемник = ШаблонОбъект;
	
	СоздатьОбновитьНастройкуОбработкиПоКомплексномуПроцессу(ШаблонОбъект.Ссылка, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура СоздатьОбновитьНастройкиСтартаОбработкиОбъекта(СсылкаШаблон, ПараметрыЗагрузки)

	УстановитьПривилегированныйРежим(Истина); 
	ТипШаблона = ТипЗнч(СсылкаШаблон);
	Если ТипШаблона <> Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
		Или Не ОбщегоНазначения.СсылкаСуществует(СсылкаШаблон) Тогда
		Возврат;
	КонецЕсли;
		
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаШаблон,
		"КомплексныйПроцесс, Предметы");
			
	// Это шаблон по процессу, а не настройка 
	Если ЗначениеЗаполнено(РеквизитыШаблона.КомплексныйПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	// Если в шаблоне много предметов, или предметов нет совсем, 
	// то его нельзя адаптировать в обработку одного документа
	Если РеквизитыШаблона.Предметы.Выбрать().Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросШаблоны = Новый Запрос;
	ЗапросШаблоны.Текст = 
		"ВЫБРАТЬ
		|	НастройкаШаблоновБизнесПроцессов.КомуНазначен,
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса,
		|	НастройкаШаблоновБизнесПроцессов.Организация,
		|	НастройкаШаблоновБизнесПроцессов.ИнтерактивныйЗапуск,
		|	ВЫБОР
		|		КОГДА НастройкаШаблоновБизнесПроцессов.ИнтерактивныйЗапуск = ИСТИНА
		|			ТОГДА НастройкаШаблоновБизнесПроцессов.ВидИнтерактивногоСобытия
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидИнтерактивногоСобытия,
		|	НастройкаШаблоновБизнесПроцессов.Условие,
		|	НастройкаШаблоновБизнесПроцессов.СобытияАвтоСтарта
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &ШаблонПроцесса
		|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.КомуНазначен) = ТИП(Справочник.ВидыДокументов)";
		
	ЗапросШаблоны.Параметры.Вставить("ШаблонПроцесса", СсылкаШаблон);
	НастройкиШаблона = ЗапросШаблоны.Выполнить().Выгрузить();
	
	ВидСобытия = Неопределено;
	ЗапросСобытий = Новый Запрос;
	ЗапросСобытий.Текст =
		"ВЫБРАТЬ
		|	ПравилаАвтоматическогоЗапуска.ВидБизнесСобытия
		|ИЗ
		|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапуска
		|ГДЕ
		|	ПравилаАвтоматическогоЗапуска.ШаблонБизнесПроцесса = &Шаблон";
		
	ЗапросСобытий.Параметры.Вставить("Шаблон", СсылкаШаблон);		
	Выборка = ЗапросСобытий.Выполнить().Выбрать();
	// В 2.1 можно было несколько настроек использовать. В 2.1 только одну
	Пока Выборка.Следующий() Цикл
		ВидСобытия = Выборка.ВидБизнесСобытия;
		Если Выборка.ВидБизнесСобытия = Справочники.ВидыБизнесСобытий.РегистрацияДокумента
			Или Выборка.ВидБизнесСобытия = Справочники.ВидыБизнесСобытий.СозданиеДокумента Тогда
			Прервать;			 
		КонецЕсли; 
	КонецЦикла;
	
	// Создадим настройки, только если шаблон задан какому-то виду документа
	Если НастройкиШаблона.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрНастройка Из НастройкиШаблона Цикл
		Если Не ЗначениеЗаполнено(СтрНастройка.КомуНазначен) 
			Или Не ОбщегоНазначения.СсылкаСуществует(СтрНастройка.КомуНазначен) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрНастройка.ВидИнтерактивногоСобытия)
			И Не ЗначениеЗаполнено(СтрНастройка.СобытияАвтоСтарта) Тогда
			Продолжить;
		КонецЕсли;
		
		// GUID обработки - это GUID шаблона КП + GUID вида документа
		GUIDобработки = Лев(СсылкаШаблон.УникальныйИдентификатор(), 18) 
			+ Прав(СтрНастройка.КомуНазначен.УникальныйИдентификатор(), 18);
			
		СсылкаНовойНастройкиОбработки = Справочники.НастройкиОбработкиВидовОбъектов.ПолучитьСсылку(
			Новый УникальныйИдентификатор(GUIDобработки));
		НастройкаСуществует = ОбщегоНазначения.СсылкаСуществует(СсылкаНовойНастройкиОбработки);
		Если Не НастройкаСуществует Тогда
			Возврат;
		КонецЕсли;
		
		НастройкаОбъект = СсылкаНовойНастройкиОбработки.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(СтрНастройка.СобытияАвтоСтарта) И ЗначениеЗаполнено(ВидСобытия) Тогда
			НастройкаОбъект.ВидБизнесСобытия = ВидСобытия;
			НастройкаОбъект.ВидИнтерактивногоСобытия = Неопределено;
		Иначе
			НастройкаОбъект.ВидИнтерактивногоСобытия = СтрНастройка.ВидИнтерактивногоСобытия;
			НастройкаОбъект.ВидБизнесСобытия = Неопределено;
		КонецЕсли;
		
		НастройкаОбъект.УсловияЗапуска.Очистить();
		Если ЗначениеЗаполнено(СтрНастройка.Условие) Тогда
			НовоеУсловие = НастройкаОбъект.УсловияЗапуска.Добавить();
			НовоеУсловие.Условие = СтрНастройка.Условие;
			НовоеУсловие.ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Не выполнено условие: ""%1""'"), СтрНастройка.Условие);
		КонецЕсли;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			НастройкаОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		НастройкаОбъект.Записать();
	
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				НастройкаОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НастройкаОбъект.Ссылка)));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет конвертацию загружаемого шаблона Ознакомления из 2.1 в 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияШаблонаОзнакомления(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
		
	ЭтоНастройкаДействияВКомплексномПроцессе = ЗначениеЗаполнено(Источник.КомплексныйПроцесс);
	
	ПараметрыЗагрузки.ЗаполнятьИсточникДанных = ЭтоНастройкаДействияВКомплексномПроцессе;
	Если МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки) Тогда
		
		ОбновитьНастройкуДействияПроцессаОбработкиДокумента(
			Приемник, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
	КонецЕсли;
	
	СоздатьОбновитьНастройкуОбработки(Источник.Ссылка, ПараметрыЗагрузки);
		
КонецПроцедуры

// Выполняет конвертацию загружаемого шаблона Приглашения из 2.1 в 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияШаблонаПриглашения(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
		
	ЭтоНастройкаДействияВКомплексномПроцессе = ЗначениеЗаполнено(Источник.КомплексныйПроцесс);
	
	ПараметрыЗагрузки.ЗаполнятьИсточникДанных = ЭтоНастройкаДействияВКомплексномПроцессе;
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	СоздатьОбновитьНастройкуОбработки(Источник.Ссылка, ПараметрыЗагрузки);
		
КонецПроцедуры

// Выполняет конвертацию загружаемого шаблона поручения из 2.1 в 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияШаблонаПоручения(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
		
	ЭтоНастройкаДействияВКомплексномПроцессе = ЗначениеЗаполнено(Источник.КомплексныйПроцесс);
	
	СсылкаНаОбъект = Справочники.ШаблоныИсполнения.ПолучитьСсылку(
		Источник.Ссылка.УникальныйИдентификатор());
		
	СсылкаНаОбъектСуществует = ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект);
	
	Если ЭтоУдалениеОбъекта(Источник) И Не СсылкаНаОбъектСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНаОбъектСуществует Тогда
		ШаблонОбъект = СсылкаНаОбъект.ПолучитьОбъект();
	Иначе
		ШаблонОбъект = Справочники.ШаблоныИсполнения.СоздатьЭлемент();
		ШаблонОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
		
		Если ЭтоНастройкаДействияВКомплексномПроцессе Тогда
			ШаблонОбъект.ИсточникДанных = Справочники.ИсточникиДанных.ДО21;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		ШаблонОбъект.ПометкаУдаления = Истина;
	Иначе
	
		ПереносимыеРеквизиты =
			"Наименование,
			|Автор,
			|Важность,
			|ВариантУстановкиСрокаОбработкиРезультатов,
			|ВладелецШаблона,
			|ДобавлятьНаименованиеПредмета,
			|Комментарий,
			|КомплексныйПроцесс,
			|Контролер,
			|НаименованиеБизнесПроцесса,
			|Описание,
			|Ответственный,
			|Проверяющий,
			|СрокИсполненияПроцесса,
			|СрокОбработкиРезультатов,
			|СрокОбработкиРезультатовДни,
			|СрокОбработкиРезультатовМинуты,
			|СрокОбработкиРезультатовЧасы,
			|СрокОтложенногоСтарта,
			|ТрудозатратыПланКонтролера,
			|ТрудозатратыПланПроверяющего,
			|ШаблонВКомплексномПроцессе,
			|ПометкаУдаления";
				
		ЗаполнитьЗначенияСвойств(ШаблонОбъект, Источник, ПереносимыеРеквизиты);
		
		ШаблонОбъект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		
		Если ЗначениеЗаполнено(Источник.ИсходныйШаблон) Тогда
			ШаблонОбъект.ИсходныйШаблон = Справочники.ШаблоныИсполнения.ПолучитьСсылку(
				Источник.ИсходныйШаблон.УникальныйИдентификатор());
		КонецЕсли;
		
		ШаблонОбъект.КоличествоИтераций = 1;
		
		// Исполнители
		Если ШаблонОбъект.Исполнители.Количество() > 0 Тогда
			СтрокаИсполнителя = ШаблонОбъект.Исполнители[0];
		Иначе
			СтрокаИсполнителя = ШаблонОбъект.Исполнители.Добавить();
		КонецЕсли;
		СтрокаИсполнителя.Исполнитель = Источник.Исполнитель;
		
		СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения = Источник.ВариантУстановкиСрокаИсполнения;
		СтрокаИсполнителя.СрокИсполнения = Источник.СрокИсполнения;
		СтрокаИсполнителя.СрокИсполненияДни = Источник.СрокИсполненияДни;
		СтрокаИсполнителя.СрокИсполненияЧасы = Источник.СрокИсполненияЧасы;
		СтрокаИсполнителя.СрокИсполненияМинуты = Источник.СрокИсполненияМинуты;
		
		СтрокаИсполнителя.ТрудозатратыПланИсполнителя = Источник.ТрудозатратыПланИсполнителя; 
		
		СтрокаИсполнителя.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
		
		// ДополнительныеРеквизиты
		ШаблонОбъект.ДополнительныеРеквизиты.Очистить();
		Если ЗначениеЗаполнено(Источник.ДополнительныеРеквизиты) Тогда
			Для Каждого СтрокаТаблицы Из Источник.ДополнительныеРеквизиты Цикл
				ЗаполнитьЗначенияСвойств(
					ШаблонОбъект.ДополнительныеРеквизиты.Добавить(),
					СтрокаТаблицы); 
			КонецЦикла;
		КонецЕсли; 
		
		// Предметы
		ШаблонОбъект.Предметы.Очистить();
		Если ЗначениеЗаполнено(Источник.Предметы) Тогда
			Для Каждого СтрокаТаблицы Из Источник.Предметы Цикл
				ЗаполнитьЗначенияСвойств(ШаблонОбъект.Предметы.Добавить(), СтрокаТаблицы); 
			КонецЦикла;
		КонецЕсли;
		
		// ПредметыЗадач
		ШаблонОбъект.ПредметыЗадач.Очистить();
		Если ЗначениеЗаполнено(Источник.ПредметыЗадач) Тогда
			Для Каждого СтрокаТаблицы Из Источник.ПредметыЗадач Цикл
				ЗаполнитьЗначенияСвойств(ШаблонОбъект.ПредметыЗадач.Добавить(), СтрокаТаблицы); 
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ШаблонОбъект.ОбменДанными.Загрузка = ПараметрыЗагрузки.Загрузка;
	ШаблонОбъект.Записать();
	
	Приемник = ШаблонОбъект;
	
	ОбновитьНастройкуДействияПроцессаОбработкиДокумента(
		ШаблонОбъект, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
	
	СоздатьОбновитьНастройкуОбработки(ШаблонОбъект.Ссылка, ПараметрыЗагрузки);
	
КонецПроцедуры

// Выполняет конвертацию загружаемого шаблона рассмотрения из 2.1 в 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияШаблонаРассмотрения(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаменитьИмяКолонки(Порция, "ТрудозатратыПланАвтора", "ТрудозатратыПланПомощника");
		
	ЭтоНастройкаДействияВКомплексномПроцессе = ЗначениеЗаполнено(Источник.КомплексныйПроцесс);
	
	ПараметрыЗагрузки.ЗаполнятьИсточникДанных = ЭтоНастройкаДействияВКомплексномПроцессе;
	Если МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки) Тогда
		
		ОбновитьНастройкуДействияПроцессаОбработкиДокумента(
			Приемник, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
	КонецЕсли;
	
	СоздатьОбновитьНастройкуОбработки(Источник.Ссылка, ПараметрыЗагрузки);
	
КонецПроцедуры

// Выполняет конвертацию загружаемого шаблона регистрации из 2.1 в 3.0. 
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияШаблонаРегистрации(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаменитьИмяКолонки(Порция, "Автор", "ОбрабатывающийРезультат");
	
	ЭтоНастройкаДействияВКомплексномПроцессе = ЗначениеЗаполнено(Источник.КомплексныйПроцесс);
	
	ПараметрыЗагрузки.ЗаполнятьИсточникДанных = ЭтоНастройкаДействияВКомплексномПроцессе;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки) Тогда
		
		ОбновитьНастройкуДействияПроцессаОбработкиДокумента(
			Приемник, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
	КонецЕсли;
	
	СоздатьОбновитьНастройкуОбработки(Источник.Ссылка, ПараметрыЗагрузки);
	
КонецПроцедуры

// Выполняет конвертацию загружаемого шаблона согласования из 2.1 в 3.0. 
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияШаблонаСогласования(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаменитьИмяКолонки(Порция, "Автор", "ОбрабатывающийРезультат");
	ЗаменитьИмяКолонки(Порция, "ТрудозатратыПланАвтора", "ТрудозатратыПланОбрабатывающегоРезультат");
	
	ЭтоНастройкаДействияВКомплексномПроцессе = ЗначениеЗаполнено(Источник.КомплексныйПроцесс);
	
	ПараметрыЗагрузки.ЗаполнятьИсточникДанных = ЭтоНастройкаДействияВКомплексномПроцессе;
	Если МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки) Тогда
		
		ОбновитьНастройкуДействияПроцессаОбработкиДокумента(
			Приемник, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
	КонецЕсли;
	
	СоздатьОбновитьНастройкуОбработки(Источник.Ссылка, ПараметрыЗагрузки);
		
КонецПроцедуры

// Возвращает наименование для процесса по шаблону, с учетом особой логики формирования наименования
// для действий процессов обработки документов.
// 
// Параметры:
//  Шаблон - ОпределяемыйТип.ШаблонПроцесса,
//         - Структура:
//             * НаименованиеБизнесПроцесса - Строка
//             * Описание - Строка
// 
// Возвращаемое значение:
//  Строка
//
Функция НаименованиеБизнесПроцессаПоШаблону(Шаблон)
	
	РеквизитыШаблона = Шаблон;
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Шаблон)) Тогда
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Шаблон, "НаименованиеБизнесПроцесса, Описание");
	КонецЕсли;
	
	ЧастиНаименования = СтрРазделить(РеквизитыШаблона.НаименованиеБизнесПроцесса, "_");
	Если ЧастиНаименования.Количество() <> 2 Тогда
		Возврат СокрЛП(РеквизитыШаблона.НаименованиеБизнесПроцесса);
	КонецЕсли;
	
	ПерваяЧасть = ЧастиНаименования[0];
	
	Если ПерваяЧасть <> ИмяЭлементаИсполнениеОзнакомление()
		И ПерваяЧасть <> ИмяЭлементаРассмотрение()
		И ПерваяЧасть <> ИмяЭлементаРегистрация()
		И ПерваяЧасть <> ИмяЭлементаСогласование()
		И ПерваяЧасть <> ИмяЭлементаСписаниеВДело()
		И ПерваяЧасть <> ИмяЭлементаУтверждение() Тогда
		
		Возврат СокрЛП(РеквизитыШаблона.НаименованиеБизнесПроцесса);
	КонецЕсли;
	
	ВтораяЧасть = ЧастиНаименования[1];
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ВтораяЧасть) Тогда
		Возврат СокрЛП(СтрПолучитьСтроку(РеквизитыШаблона.Описание, 1));
	Иначе
		// Если вторая часть не является идентификатором, то возвращаем наименование для процесса.
		Возврат СокрЛП(РеквизитыШаблона.НаименованиеБизнесПроцесса);
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьНастройкиШаблоновБизнесПроцессов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	//  вызов зонтика
	Если  ОбщегоНазначения.СсылкаСуществует(Источник.ШаблонБизнесПроцесса) Тогда
		Если ТипЗнч(Источник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
			СоздатьОбновитьНастройкуОбработкиПоКомплексномуПроцессу(
				Источник.ШаблонБизнесПроцесса, ПараметрыЗагрузки);
		Иначе
			СоздатьОбновитьНастройкуОбработки(Источник.ШаблонБизнесПроцесса, ПараметрыЗагрузки);
		КонецЕсли;
	КонецЕсли;	
	
 КонецПроцедуры

// "Зонтик" создания настроек для вида документа по шаблонам комплексных процессов
Процедура СоздатьОбновитьНастройкуОбработкиПоКомплексномуПроцессу(СсылкаШаблон, ПараметрыЗагрузки)
	
	УстановитьПривилегированныйРежим(Истина); 
	ТипШаблона = ТипЗнч(СсылкаШаблон);
	Если ТипШаблона <> Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
		Или Не ОбщегоНазначения.СсылкаСуществует(СсылкаШаблон) Тогда
		Возврат;
	КонецЕсли;
		
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаШаблон,
		"Ответственный, КомплексныйПроцесс, Предметы,
		|Схема, ВариантМаршрутизации, Этапы, ПредшественникиЭтапов");
	РеквизитыШаблона.Предметы = РеквизитыШаблона.Предметы.Выгрузить();
	РеквизитыШаблона.Этапы = РеквизитыШаблона.Этапы.Выгрузить();
	РеквизитыШаблона.Этапы.Сортировать("НомерСтроки Возр");
	РеквизитыШаблона.ПредшественникиЭтапов = РеквизитыШаблона.ПредшественникиЭтапов.Выгрузить();
	
	// Это шаблон по процессу, а не настройка 
	Если ЗначениеЗаполнено(РеквизитыШаблона.КомплексныйПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	// Если в шаблоне много предметов, или предметов нет совсем, 
	// то его нельзя адаптировать в обработку одного документа
	Если РеквизитыШаблона.Предметы.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСоСхемой = ЗначениеЗаполнено(РеквизитыШаблона.Схема);
	
	// Если схема заполнена, но ее нет в базе, то ожидаем, когда она будет загружена.
	Если ШаблонСоСхемой
		И Не ОбщегоНазначения.СсылкаСуществует(РеквизитыШаблона.Схема) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДанныеСхемы = Неопределено;
	ДанныеПараметровСхемы = Неопределено;
	Если ШаблонСоСхемой Тогда
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(РеквизитыШаблона.Схема);
		ДанныеПараметровСхемы = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(РеквизитыШаблона.Схема));
	КонецЕсли;
	
	// Получаем все шаблоны процессов, из котрого состоит Шаблон КП
	ТаблицаШаблоновПроцессов = Новый ТаблицаЗначений();
	Если ШаблонСоСхемой Тогда
		НастройкиДействийПоСхеме = 
			РаботаСКомплекснымиБизнесПроцессамиСервер.НастройкиДействийИВложенныхПроцессовВДанныхПараметров(
				ДанныеПараметровСхемы);
		
		ТаблицаШаблоновПроцессов.Колонки.Добавить("ШаблонБизнесПроцесса");
		Для Каждого СтрНастройка Из НастройкиДействийПоСхеме Цикл
			НовСтрока = ТаблицаШаблоновПроцессов.Добавить();
			НовСтрока.ШаблонБизнесПроцесса = СтрНастройка;
		КонецЦикла;
	Иначе
		ТаблицаШаблоновПроцессов = РеквизитыШаблона.Этапы;
	КонецЕсли;

	// Если шаблон КП настроен по таблице, то ждем пока "приедут" все подчиненные шаблоны.
	// Только после этого конвертируем данные
	Для Каждого СтрЭтап Из ТаблицаШаблоновПроцессов Цикл
		Если ЗначениеЗаполнено(СтрЭтап.ШаблонБизнесПроцесса) 
			И Не ОбщегоНазначения.СсылкаСуществует(СтрЭтап.ШаблонБизнесПроцесса) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;		 
	
	// Если шаблон КП настроен по таблице, и в нем есть Вложенные шаблоны КП или Приглашения, то не грузим их.
	// Конвертацию такой обработки не получится выполнить
	Для Каждого СтрЭтап Из ТаблицаШаблоновПроцессов Цикл
		Если ЗначениеЗаполнено(СтрЭтап.ШаблонБизнесПроцесса) 
			И (ТипЗнч(СтрЭтап.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
				Или ТипЗнч(СтрЭтап.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныПриглашения")) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ЗапросШаблоны = Новый Запрос;
	ЗапросШаблоны.Текст = 
		"ВЫБРАТЬ
		|	НастройкаШаблоновБизнесПроцессов.КомуНазначен,
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса,
		|	НастройкаШаблоновБизнесПроцессов.Организация,
		|	НастройкаШаблоновБизнесПроцессов.ИнтерактивныйЗапуск,
		|	ВЫБОР
		|		КОГДА НастройкаШаблоновБизнесПроцессов.ИнтерактивныйЗапуск = ИСТИНА
		|			ТОГДА НастройкаШаблоновБизнесПроцессов.ВидИнтерактивногоСобытия
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидИнтерактивногоСобытия,
		|	НастройкаШаблоновБизнесПроцессов.Условие,
		|	НастройкаШаблоновБизнесПроцессов.СобытияАвтоСтарта
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &ШаблонПроцесса
		|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.КомуНазначен) = ТИП(Справочник.ВидыДокументов)";
		
	ЗапросШаблоны.Параметры.Вставить("ШаблонПроцесса", СсылкаШаблон);
	НастройкиШаблона = ЗапросШаблоны.Выполнить().Выгрузить();
	
	// Создадим настройки, только если шаблон задан какому-то виду документа
	Если НастройкиШаблона.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрНастройка Из НастройкиШаблона Цикл
		Если Не ЗначениеЗаполнено(СтрНастройка.КомуНазначен) 
			Или Не ОбщегоНазначения.СсылкаСуществует(СтрНастройка.КомуНазначен) Тогда
			Продолжить;
		КонецЕсли;
		
		// GUID обработки - это GUID шаблона КП + GUID вида документа
		GUIDобработки = Лев(СсылкаШаблон.УникальныйИдентификатор(), 18) 
			+ Прав(СтрНастройка.КомуНазначен.УникальныйИдентификатор(), 18);
			
		СсылкаНовойНастройкиОбработки = Справочники.НастройкиОбработкиВидовОбъектов.ПолучитьСсылку(
			Новый УникальныйИдентификатор(GUIDобработки));
			
		НастройкаСуществует = ОбщегоНазначения.СсылкаСуществует(СсылкаНовойНастройкиОбработки);
		
		Если НастройкаСуществует Тогда
			НастройкаОбъект = СсылкаНовойНастройкиОбработки.ПолучитьОбъект();
		Иначе
			НастройкаОбъект = Справочники.НастройкиОбработкиВидовОбъектов.СоздатьЭлемент();
			НастройкаОбъект.УстановитьСсылкуНового(СсылкаНовойНастройкиОбработки);
			
			ДатаДействияНастроек = МинимальнаяДатаДействияНастроек(СтрНастройка.КомуНазначен);
			
			НастройкаОбъект.ДействуетС = ДатаДействияНастроек - 2*86400;
			НастройкаОбъект.ДействуетПо = ДатаДействияНастроек - 86400;
			НастройкаОбъект.Автор = РеквизитыШаблона.Ответственный;
			НастройкаОбъект.ЗаполнитьНаименование();
		КонецЕсли;
		
		СоответствиеВидовДействий = Новый Соответствие();
		УникальныеНазванияДействий = Новый Соответствие();
		НастройкаОбъект.ВидОбъекта = СтрНастройка.КомуНазначен;
		НастройкаОбъект.ВидыДействий.Очистить();
		Для Каждого СтрЭтап Из ТаблицаШаблоновПроцессов Цикл
			Если Не ЗначениеЗаполнено(СтрЭтап.ШаблонБизнесПроцесса) Тогда
				Продолжить;
			КонецЕсли;
			ТипШаблона = ТипЗнч(СтрЭтап.ШаблонБизнесПроцесса);
			ТипДействия = Неопределено;
			Если ТипШаблона = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
				ТипДействия = Перечисления.ТипыДействий.Согласование;
			ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
				ТипДействия = Перечисления.ТипыДействий.Исполнение;
			ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
				ТипДействия = Перечисления.ТипыДействий.Ознакомление;
			ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
				ТипДействия = Перечисления.ТипыДействий.Исполнение;
			ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
				ТипДействия = Перечисления.ТипыДействий.Регистрация;
			ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
				ТипДействия = Перечисления.ТипыДействий.Утверждение;
			ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныПодписания") Тогда
				ТипДействия = Перечисления.ТипыДействий.Подписание;
			Иначе
				Продолжить;
			КонецЕсли;
			
			НаименованиеБизнесПроцессаПоШаблону = НаименованиеБизнесПроцессаПоШаблону(СтрЭтап.ШаблонБизнесПроцесса);
			Если Не ЗначениеЗаполнено(НаименованиеБизнесПроцессаПоШаблону) Тогда
				НаименованиеБизнесПроцессаПоШаблону = НаименованиеДействияПоТипу(ТипДействия);
			КонецЕсли;
			// Нужно сделать уникальные виды действия, чтобы загрузить все шаблоны из КП
			// Ищем по уникальное имя в нижнем регистре.
			НаименованиеВНГ = НРег(НаименованиеБизнесПроцессаПоШаблону);
			НомерДействия = УникальныеНазванияДействий.Получить(НаименованиеВНГ);
			Если НомерДействия = Неопределено Тогда
				УникальныеНазванияДействий.Вставить(НаименованиеВНГ, 0);
				УникальноеИмяДействия = НаименованиеБизнесПроцессаПоШаблону;
			Иначе
				НомерДействия = НомерДействия + 1;
				УникальныеНазванияДействий.Вставить(НаименованиеВНГ, НомерДействия);
				УникальноеИмяДействия = СтрШаблон("%1 (%2)",
					 НаименованиеБизнесПроцессаПоШаблону, СокрЛП(НомерДействия));
			КонецЕсли;
			
			ВидДействия = НайтиВидДействия(ТипДействия, УникальноеИмяДействия);
			Если Не ЗначениеЗаполнено(ВидДействия) Тогда
				ВидДействия = СоздатьВидДействия(ТипДействия, УникальноеИмяДействия, ПараметрыЗагрузки);
			КонецЕсли;
			
			СоответствиеВидовДействий.Вставить(СтрЭтап.ШаблонБизнесПроцесса, ВидДействия);
			
			СтрНайти = НастройкаОбъект.ВидыДействий.НайтиСтроки(Новый Структура("ВидДействия", ВидДействия));
			Если СтрНайти.Количество() = 0 Тогда
				НоваяСтрока = НастройкаОбъект.ВидыДействий.Добавить();
				НоваяСтрока.ВидДействия = ВидДействия;
			КонецЕсли;
			
			// Загрузим условия проверки выполнения
			УсловияЗапретаВыполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрЭтап.ШаблонБизнесПроцесса, "УсловияЗапретаВыполнения").Выгрузить();
			СтрокиУсловия = НастройкаОбъект.УсловияПроверкиВыполнения.НайтиСтроки(
				Новый Структура("ВидДействия", ВидДействия));
			Для Каждого СтрУсловие Из СтрокиУсловия Цикл
				НастройкаОбъект.УсловияПроверкиВыполнения.Удалить(СтрУсловие);
			КонецЦикла;
			
			Для Каждого СтрУсловие Из УсловияЗапретаВыполнения Цикл
				НовСтрока = НастройкаОбъект.УсловияПроверкиВыполнения.Добавить();
				НовСтрока.ВидДействия = ВидДействия;
				НовСтрока.Условие = АлгоритмПроверкиПоУсловиюЗадачи(
					СтрУсловие.Условие, ПараметрыЗагрузки);
				НовСтрока.ТекстПредупреждения = СтрУсловие.ТекстПредупреждения;
			КонецЦикла;
		КонецЦикла;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			НастройкаОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		НастройкаОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьСхему", Истина);
		
		НастройкаОбъект.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				НастройкаОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НастройкаОбъект.Ссылка)));
		КонецЕсли;
		
		// Формирование / обновление схемы настройки обработки объекта.
		ПараметрыОбновленияСхемы = ПараметрыОбновленияСхемыНастройкиОбработки();
		ПараметрыОбновленияСхемы.НастройкаОбработкиОбъекта = НастройкаОбъект.Ссылка;
		ПараметрыОбновленияСхемы.ПометкаУдаления = НастройкаОбъект.ПометкаУдаления;
		ПараметрыОбновленияСхемы.НастройкиИВидыДействий = СоответствиеВидовДействий;
		ПараметрыОбновленияСхемы.ИспользуетсяСхема = ШаблонСоСхемой;
		Если ШаблонСоСхемой Тогда
			ПараметрыОбновленияСхемы.ДанныеСхемыКП = ДанныеСхемы;
			ПараметрыОбновленияСхемы.ДанныеПараметровСхемыКП = ДанныеПараметровСхемы;
		Иначе
			ПараметрыОбновленияСхемы.ВариантМаршрутизации = РеквизитыШаблона.ВариантМаршрутизации;
			ПараметрыОбновленияСхемы.Этапы = РеквизитыШаблона.Этапы;
			ПараметрыОбновленияСхемы.ПредшественникиЭтапов = РеквизитыШаблона.ПредшественникиЭтапов;
		КонецЕсли;
		ПараметрыОбновленияСхемы.Загрузка = ПараметрыЗагрузки.Загрузка;
		ПараметрыОбновленияСхемы.ПричинаЗагрузки = ПараметрыЗагрузки.ПричинаЗагрузки;
		ОбновитьСхемуНастройкиОбработки(ПараметрыОбновленияСхемы);
		
		// Формирование Правил обработки
		Для Каждого СтрЭтап Из ТаблицаШаблоновПроцессов Цикл
			Если Не ЗначениеЗаполнено(СтрЭтап.ШаблонБизнесПроцесса) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидДействия = СоответствиеВидовДействий.Получить(СтрЭтап.ШаблонБизнесПроцесса);
			Если Не ЗначениеЗаполнено(ВидДействия) Тогда
				Продолжить;
			КонецЕсли;
		
			СоздатьОбновитьПравилаОбработки(
				СтрЭтап.ШаблонБизнесПроцесса, НастройкаОбъект, ВидДействия, ПараметрыЗагрузки, СсылкаШаблон);
		КонецЦикла;
	КонецЦикла;
	
	СоздатьОбновитьНастройкиСтартаОбработкиОбъекта(
		СсылкаШаблон, ПараметрыЗагрузки);

КонецПроцедуры

// Возвращает параметры обновления схемы настройки обработки.
// 
// Возвращаемое значение:
//  Структура
//   * НастройкаОбработкиОбъекта - СправочникСсылка.НастройкиОбработкиВидовОбъектов.
//   * ПометкаУдаления - Булево - для схемы настройки обработки объекта.
//   * НастройкиИВидыДействий - Соответствие.
//     ** Ключ - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса.
//     ** Значение - СправочникСсылка.ВидыДействий.
//   * ИспользуетсяСхема - Булево - указание то, что в параметрах обновления используется схема.
//   * ДанныеСхемыКП - Структура - см. СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса().
//   * ДанныеПараметровСхемыКП - Структура - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхПараметровСхемы().
//   * ВариантМаршрутизации - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач.
//   * Этапы - ТаблицаЗначений - таблица, соответствующая ТЧ Этапы спр. ШаблоныКомплексныхБизнесПроцессов.
//   * ПредшественникиЭтапов - ТаблицаЗначений -таблица, соответствующая ТЧ ПредшественникиЭтапов спр. ШаблоныКомплексныхБизнесПроцессов.
//   * Загрузка - Булево - признак записи в режиме загрузки.
//   * ПричинаЗагрузки - Строка - причина записи в режиме загрузки.
//
Функция ПараметрыОбновленияСхемыНастройкиОбработки()
	
	ПараметрыОбновления = Новый Структура;
	
	ПараметрыОбновления.Вставить("НастройкаОбработкиОбъекта",
		Справочники.НастройкиОбработкиВидовОбъектов.ПустаяСсылка());
	
	ПараметрыОбновления.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыОбновления.Вставить("НастройкиИВидыДействий", Новый Соответствие);
	
	ПараметрыОбновления.Вставить("ИспользуетсяСхема", Ложь);
	
	ПараметрыОбновления.Вставить("ДанныеСхемыКП",
		СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса());
	
	ПараметрыОбновления.Вставить("ДанныеПараметровСхемыКП",
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхПараметровСхемы());
	
	ПараметрыОбновления.Вставить("ВариантМаршрутизации",
		Перечисления.ВариантыМаршрутизацииЗадач.ПустаяСсылка());
	
	МетаданныеШаблона = Метаданные.Справочники.ШаблоныКомплексныхБизнесПроцессов;
	
	ПараметрыОбновления.Вставить("Этапы",
		ОбщегоНазначенияДокументооборот.ТаблицаЗначенийПоМетаданнымТабличнойЧасти(
			МетаданныеШаблона.ТабличныеЧасти.Этапы));
	
	ПараметрыОбновления.Вставить("ПредшественникиЭтапов",
		ОбщегоНазначенияДокументооборот.ТаблицаЗначенийПоМетаданнымТабличнойЧасти(
			МетаданныеШаблона.ТабличныеЧасти.ПредшественникиЭтапов));
	
	ПараметрыОбновления.Вставить("Загрузка", Ложь);
	
	ПараметрыОбновления.Вставить("ПричинаЗагрузки", "");
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить схему настройки обработки.
// 
// Параметры:
//  ПараметрыОбновления - Структура - см. ПараметрыОбновленияСхемыНастройкиОбработки
//
Процедура ОбновитьСхемуНастройкиОбработки(ПараметрыОбновления)
	
	// Проверяем соответствие видов действия для шаблонов действий в настройках шаблона КП.
	// Если нескольким шаблонам действий сопоставлен один и тот же вид действия, то
	// вызывается исключение.
	ВидыДействийШаблонов = Новый Соответствие();
	Для Каждого НастройкаИВид Из ПараметрыОбновления.НастройкиИВидыДействий Цикл
		Если ВидыДействийШаблонов[НастройкаИВид.Значение] = Истина Тогда
			
			ТекстОшибки = НСтр(
				"ru = 'Вид действия ""%1"" соответствует нескольким настройкам действий шаблона комплексного процесса.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ВызватьИсключение СтрШаблон(ТекстОшибки, НастройкаИВид.Значение);
			
		КонецЕсли;
		ВидыДействийШаблонов[НастройкаИВид.Значение] = Истина;
	КонецЦикла;
	
	Схема = Справочники.СхемыПроцессов.ПустаяСсылка();
	ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыСхемыПоВладельцу(
			ПараметрыОбновления.НастройкаОбработкиОбъекта);
	
	Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		ДанныеПараметровСхемы = 
			Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(ПараметрыСхемы);
		ДанныеСхемы =
			Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(ДанныеПараметровСхемы.Схема);
		Схема = ДанныеПараметровСхемы.Схема;
	Иначе
		ДанныеПараметровСхемы = 
			Справочники.ПараметрыСхемДляОбработокОбъектов.СтруктураДанныхПараметровСхемы();
		ДанныеПараметровСхемы.ВладелецСхемы = ПараметрыОбновления.НастройкаОбработкиОбъекта;
		
		ДанныеСхемы = СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса();
	КонецЕсли;
	
	ДанныеСхемы.Наименование = Строка(ПараметрыОбновления.НастройкаОбработкиОбъекта);
	ДанныеСхемы.ПометкаУдаления = ПараметрыОбновления.ПометкаУдаления;
	
	ДанныеПараметровСхемы.ПометкаУдаления = ПараметрыОбновления.ПометкаУдаления;
	
	Если ПараметрыОбновления.ИспользуетсяСхема Тогда
		
		ДанныеПараметровСхемы.АвтоформируемаяСхема = Ложь;
		
		ДанныеСхемы.Схема = ПараметрыОбновления.ДанныеСхемыКП.Схема;
		ДанныеСхемы.Настройки = ОбщегоНазначения.СкопироватьРекурсивно(
			ПараметрыОбновления.ДанныеСхемыКП.Настройки);
		
		ДанныеПараметровСхемы.НастройкиЭлементов.Очистить();
		Для Каждого НастройкаЭлементаКП Из ПараметрыОбновления.ДанныеПараметровСхемыКП.НастройкиЭлементов Цикл
			
			ИмяЭлемента = НастройкаЭлементаКП.Ключ;
			НастройкаЭлементаКП = НастройкаЭлементаКП.Значение;
			ТипНастройкиЭлементаКП = ТипЗнч(НастройкаЭлементаКП);
			
			НастройкаЭлемента = Неопределено;
			Если ТипНастройкиЭлементаКП = Тип("НастройкиКомпоновкиДанных") Тогда
				
				URLСхемы = ПоместитьВоВременноеХранилище(
					ПолучитьОбщийМакет("СтруктураУсловияСхемыОбработкиОбъекта"));
				Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
				Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));	
				
				Компоновщик.ЗагрузитьНастройки(
					РаботаСПроцессамиПоОбработкамОбъектов.ПустоеУсловиеСхемыОбработкиОбъекта());
				
				СкопироватьЭлементыОтбораВУсловиеСхемыОбработкиОбъекта(
					Компоновщик.Настройки.Отбор.Элементы,
					НастройкаЭлементаКП.Отбор.Элементы,
					ПараметрыОбновления.ДанныеПараметровСхемыКП,
					ПараметрыОбновления.Загрузка,
					ПараметрыОбновления.ПричинаЗагрузки);
				
				НастройкаЭлемента = Компоновщик.ПолучитьНастройки();
			
			ИначеЕсли ТипНастройкиЭлементаКП = Тип("СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов") Тогда
				
				НастройкаЭлемента = 
					СсылкаНаСкриптСхемыДляОбработкиОбъектаПоСкриптуКП(НастройкаЭлементаКП);
				
				Если Не ОбщегоНазначения.СсылкаСуществует(НастройкаЭлемента) Тогда
					
					СкриптОбъект = Справочники.СкриптыСхемДляОбработокОбъектов.СоздатьЭлемент();
					СкриптОбъект.УстановитьСсылкуНового(НастройкаЭлемента);
					
					СтруктураДляЗаполнения = СкриптОбъект.СтруктураДанныхДляЗаполнения();
					
					СтруктураДляЗаполнения.Наименование = СтрШаблон("#%1",
						НастройкаЭлемента.УникальныйИдентификатор());
					
					СтруктураДляЗаполнения.Группа = ГруппаЗагруженныхИз21СкриптовСхемОбработки();
					
					СкриптОбъект.Заполнить(СтруктураДляЗаполнения);
					
					ЗаполнитьСкриптСхемыДляОбработкиОбъектаПоСкриптуКП(
						СкриптОбъект, НастройкаЭлементаКП);
					
					СкриптОбъект.ПометкаУдаления = ПараметрыОбновления.ПометкаУдаления;
					
					СкриптОбъект.ОбменДанными.Загрузка = ПараметрыОбновления.Загрузка;
					СкриптОбъект.Записать();
					
					Если ПараметрыОбновления.Загрузка Тогда
						РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
							НастройкаЭлемента,
							ПараметрыОбновления.ПричинаЗагрузки,
							ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НастройкаЭлемента)));
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				Если Не ЗначениеЗаполнено(НастройкаЭлементаКП) Тогда
					ПустыеЗначенияПараметров = 
						РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.ПустыеЗначенияПараметровДляТиповЭлементовСхем();
					
					НастройкаЭлемента = 
						ПустыеЗначенияПараметров[Перечисления.ТипыЭлементовСхемПроцессов.Действие];
				Иначе
					
					НастройкаЭлемента = 
						ПараметрыОбновления.НастройкиИВидыДействий[НастройкаЭлементаКП];
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеПараметровСхемы.НастройкиЭлементов[ИмяЭлемента] = НастройкаЭлемента;
			
		КонецЦикла;
		
	Иначе
		
		ВидыДействий = Новый Массив;
		Для Каждого СтрокаЭтапа Из ПараметрыОбновления.Этапы Цикл
			ВидыДействий.Добавить(
				ПараметрыОбновления.НастройкиИВидыДействий[СтрокаЭтапа.ШаблонБизнесПроцесса]);
		КонецЦикла;
		
		ИменаЭлементов = 
			РаботаСПроцессамиПоОбработкамОбъектов.ИменаЭлементовСхемыДляВидовДействий(ВидыДействий);
		
		Если ПараметрыОбновления.ВариантМаршрутизации = 
			Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		
			ДанныеПараметровСхемы.АвтоформируемаяСхема = Истина;
		
			ДанныеПараметровСхемы.НастройкиЭлементов = 
				РаботаСПроцессамиПоОбработкамОбъектов.ПараметрыЭлементовСхемыИзВидовДействий(
					ВидыДействий, ИменаЭлементов);
			
			ОписаниеСхемы = РаботаСПроцессамиПоОбработкамОбъектов.ОписаниеСхемыИзВидовДействий(
				ВидыДействий, ИменаЭлементов);
			
			НовыеДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПоОписаниюЭлементов(ОписаниеСхемы);
			ДанныеСхемы.Схема = НовыеДанныеСхемы.Схема;
			ДанныеСхемы.Настройки = НовыеДанныеСхемы.Настройки;
			
		ИначеЕсли ПараметрыОбновления.ВариантМаршрутизации = 
			Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
			
			ДанныеПараметровСхемы.АвтоформируемаяСхема = Ложь;
			
			ДанныеПараметровСхемы.НастройкиЭлементов = 
				РаботаСПроцессамиПоОбработкамОбъектов.ПараметрыЭлементовСхемыИзВидовДействий(
					ВидыДействий, ИменаЭлементов);
			
			ОписаниеСхемы = ОписаниеСхемыСПараллельнымВыполнениеДействий(
				ВидыДействий, ИменаЭлементов);
			
			НовыеДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПоОписаниюЭлементов(ОписаниеСхемы);
			ДанныеСхемы.Схема = НовыеДанныеСхемы.Схема;
			ДанныеСхемы.Настройки = НовыеДанныеСхемы.Настройки;
			
		ИначеЕсли ПараметрыОбновления.ВариантМаршрутизации = 
			Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
			
			ДанныеПараметровСхемы.АвтоформируемаяСхема = Ложь;
			
			ОписаниеИНастройкиСхемы = ОписаниеИНастройкиСхемыСоСмешаннымПорядкомВыполненияДействий(
				ПараметрыОбновления.Этапы,
				ПараметрыОбновления.ПредшественникиЭтапов,
				ПараметрыОбновления.НастройкиИВидыДействий,
				ИменаЭлементов);
			
			ДанныеПараметровСхемы.НастройкиЭлементов = ОписаниеИНастройкиСхемы.НастройкиЭлементов;
			
			НовыеДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПоОписаниюЭлементов(
				ОписаниеИНастройкиСхемы.ОписаниеСхемы);
			
			ДанныеСхемы.Схема = НовыеДанныеСхемы.Схема;
			ДанныеСхемы.Настройки = НовыеДанныеСхемы.Настройки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗаписи = Справочники.СхемыПроцессов.ЗаписатьДанныеСхемыПроцесса(
		Схема, ДанныеСхемы, ПараметрыОбновления.Загрузка);
	
	Если ПараметрыОбновления.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			РезультатЗаписи.СхемаПроцесса,
			ПараметрыОбновления.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(РезультатЗаписи.СхемаПроцесса)));
	КонецЕсли;
	
	ДанныеПараметровСхемы.Схема = РезультатЗаписи.СхемаПроцесса;
	
	РезультатЗаписи = Справочники.ПараметрыСхемДляОбработокОбъектов.ЗаписатьДанныеПараметровСхемы(
		ПараметрыСхемы, ДанныеПараметровСхемы, ПараметрыОбновления.Загрузка);
	
	Если ПараметрыОбновления.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			РезультатЗаписи.ПараметрыСхемы,
			ПараметрыОбновления.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(РезультатЗаписи.ПараметрыСхемы)));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на скрипт схемы для обработки объекта по скрипту КП.
// 
// Параметры:
//  СкриптКП - СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов
// 
// Возвращаемое значение:
//  СправочникСсылка.СкриптыСхемДляОбработокОбъектов
//
Функция СсылкаНаСкриптСхемыДляОбработкиОбъектаПоСкриптуКП(СкриптКП)
	
	Возврат Справочники.СкриптыСхемДляОбработокОбъектов.ПолучитьСсылку(
		СкриптКП.УникальныйИдентификатор());
	
КонецФункции

// Возвращает ссылку на группу для загруженных скриптов обработок из 2.1
// 
// Возвращаемое значение:
//  СправочникСсылка.СкриптыСхемДляОбработокОбъектов
//
Функция ГруппаЗагруженныхИз21СкриптовСхемОбработки()
	
	СкриптСхемы = Справочники.СкриптыСхемДляОбработокОбъектов.ПолучитьСсылку(
		Новый УникальныйИдентификатор("4a5ca1b0-a36a-4615-b58a-1ebd714df24a"));
	
	Если Не ОбщегоНазначения.СсылкаСуществует(СкриптСхемы) Тогда
		
		ГруппаОбъект = Справочники.СкриптыСхемДляОбработокОбъектов.СоздатьГруппу();
		ГруппаОбъект.УстановитьСсылкуНового(СкриптСхемы);
		
		ГруппаОбъект.Наименование = НСтр("ru = 'Скрипты из ДО 2.1'",
			ОбщегоНазначения.КодОсновногоЯзыка());
			
		ГруппаОбъект.Записать();
				
	КонецЕсли;
	
	Возврат СкриптСхемы;
	
КонецФункции

// Заполняет скрипт схемы для обработки объекта по скрипту КП.
//
// Параметры:
//  СкриптДляОбработки - СправочникОбъект.СкриптыСхемДляОбработокОбъектов
//  СкриптКП - СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов,
//             СправочникОбъект.СкриптыСхемДляКомплексныхПроцессов
//
Процедура ЗаполнитьСкриптСхемыДляОбработкиОбъектаПоСкриптуКП(СкриптДляОбработки, СкриптКП)
	
	Если ТипЗнч(СкриптКП) = Тип("СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов") Тогда
		Если Не ОбщегоНазначения.СсылкаСуществует(СкриптКП) Тогда
			Возврат;
		КонецЕсли;
		
		СкриптКПОбъект = СкриптКП.ПолучитьОбъект();
		
	Иначе
		СкриптКПОбъект = СкриптКП;
	КонецЕсли;
	
	СтруктураДляЗаполнения = СкриптДляОбработки.СтруктураДанныхДляЗаполнения();
	СтруктураДляЗаполнения.Наименование = СкриптДляОбработки.Наименование;
	СтруктураДляЗаполнения.Группа = СкриптДляОбработки.Родитель;
	
	СтруктураДляЗаполнения.Выражение = СкриптКПОбъект.Выражение;
	СтруктураДляЗаполнения.Комментарий = СкриптКПОбъект.Комментарий;
	
	СкриптДляОбработки.Заполнить(СтруктураДляЗаполнения);
	
КонецПроцедуры

// Обновляет скрипт схемы для обработки объекта по скрипту КП.
//
// Параметры:
//  СкриптДляОбработки - СправочникСсылка.СкриптыСхемДляОбработокОбъектов
//  СкриптКП - СправочникОбъект.СкриптыСхемДляКомплексныхПроцессов,
//  Загрузка - Булево - признак записи в режиме загрузки.
//  ПричинаЗагрузки - Строка - причина записи в режиме загрузки.
//
Процедура ОбновитьСкриптСхемыДляОбработкиОбъектаПоСкриптуКП(
	СкриптДляОбработки, СкриптКП, Загрузка, ПричинаЗагрузки)
	
	Если Не ОбщегоНазначения.СсылкаСуществует(СкриптДляОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(СкриптДляОбработки);
	
	СкриптДляОбработкиОбъект = СкриптДляОбработки.ПолучитьОбъект();
	ЗаполнитьСкриптСхемыДляОбработкиОбъектаПоСкриптуКП(СкриптДляОбработкиОбъект, СкриптКП);
	
	СкриптДляОбработкиОбъект.ОбменДанными.Загрузка = Загрузка;
	СкриптДляОбработкиОбъект.Записать();
					
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			СкриптДляОбработки,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СкриптДляОбработки)));
	КонецЕсли;

	РазблокироватьДанныеДляРедактирования(СкриптДляОбработки);
	
КонецПроцедуры

// Копирует элементы отбора в условие схемы обработки объекта
// из отборов условий схем КП.
// 
// Параметры:
//  ЭлементыУсловияОбработки - КоллекцияЭлементовОтбораКомпоновкиДанных - элемента отбора условия схемы обработки объекта.
//  ЭлементыУсловияКП - КоллекцияЭлементовОтбораКомпоновкиДанных - - элемента отбора условия схемы КП.
//  ДанныеПараметровСхемыКП - Структура - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхПараметровСхемы().
//  Загрузка - Булево - признак записи в режиме загрузки.
//  ПричинаЗагрузки - Строка - причина записи в режиме загрузки.
//
Процедура СкопироватьЭлементыОтбораВУсловиеСхемыОбработкиОбъекта(
	ЭлементыУсловияОбработки, ЭлементыУсловияКП, ДанныеПараметровСхемыКП, Загрузка, ПричинаЗагрузки)
	
	ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	ПолеПроверкаПредмета = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияПроверкаПредмета());
	
	ПолеУсловиеПоОбъекту = Новый ПолеКомпоновкиДанных(
		РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.ИмяПоляУсловиеПоОбъекту());
	
	ПолеРезультатВыполненияДействияКП = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияРезультатВыполненияДействия());
	
	ПолеРезультатВыполненияДействия = Новый ПолеКомпоновкиДанных(
		РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.ИмяПоляУсловиеПоРезультатуВыполненияДействия());
	
	ПолеСкрипт = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияСкрипт());
	
	Для Каждого ПредыдущийЭлемент Из ЭлементыУсловияКП Цикл
		
		ТипЭлемента = ТипЗнч(ПредыдущийЭлемент);
		
		Если ТипЭлемента = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			НовыйЭлемент = ЭлементыУсловияОбработки.Добавить(ТипЭлемента);
			НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
			НовыйЭлемент.ТипГруппы = ПредыдущийЭлемент.ТипГруппы;
			
			СкопироватьЭлементыОтбораВУсловиеСхемыОбработкиОбъекта(
				НовыйЭлемент.Элементы,
				ПредыдущийЭлемент.Элементы,
				ДанныеПараметровСхемыКП,
				Загрузка,
				ПричинаЗагрузки);
			
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущийЭлемент.ЛевоеЗначение = ПолеРезультатВыполненияДействияКП Тогда
			
			ИмяДействия = ПредыдущийЭлемент.ПравоеЗначение.ИмяДействия;
			РезультатДействияКП = ПредыдущийЭлемент.ПравоеЗначение.РезультатВыполнения;
			
			НастройкаДействияКП = ДанныеПараметровСхемыКП.НастройкиЭлементов[ИмяДействия];
			
			РезультатыДействия = РезультатыДействияОбработкиПоРезультатуДействияКП(
				РезультатДействияКП,
				ТипЗнч(НастройкаДействияКП));
			
			ГруппаУсловий = ЭлементыУсловияОбработки;
			Если РезультатыДействия.Количество() > 1 Тогда
				НовыйЭлемент = ЭлементыУсловияОбработки.Добавить(ТипГруппаЭлементовОтбораКомпоновкиДанных);
				НовыйЭлемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
				ГруппаУсловий = НовыйЭлемент.Элементы;
			КонецЕсли;
			
			Для Каждого РезультатДействия Из РезультатыДействия Цикл
				НовыйЭлемент = ГруппаУсловий.Добавить(ТипЭлемента);
				НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
				НовыйЭлемент.ЛевоеЗначение = ПолеРезультатВыполненияДействия;
				НовыйЭлемент.ВидСравнения = ПредыдущийЭлемент.ВидСравнения;
				НовыйЭлемент.ПравоеЗначение = 
					РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.СтруктураУсловияПоРезультатуВыполненияДействия();
				НовыйЭлемент.ПравоеЗначение.ИмяДействия = ИмяДействия;
				НовыйЭлемент.ПравоеЗначение.РезультатВыполнения = РезультатДействия;
			КонецЦикла;
			
		ИначеЕсли ПредыдущийЭлемент.ЛевоеЗначение = ПолеПроверкаПредмета Тогда
			
			НовыйЭлемент = ЭлементыУсловияОбработки.Добавить(ТипЭлемента);
			НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
			НовыйЭлемент.ЛевоеЗначение = ПолеУсловиеПоОбъекту;
			НовыйЭлемент.ВидСравнения = ПредыдущийЭлемент.ВидСравнения;
			НовыйЭлемент.ПравоеЗначение = ПредыдущийЭлемент.ПравоеЗначение.АлгоритмПроверки;
			
		ИначеЕсли ПредыдущийЭлемент.ЛевоеЗначение = ПолеСкрипт Тогда
			
			НовыйЭлемент = ЭлементыУсловияОбработки.Добавить(ТипЭлемента);
			НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
			НовыйЭлемент.ЛевоеЗначение = ПолеУсловиеПоОбъекту;
			НовыйЭлемент.ВидСравнения = ПредыдущийЭлемент.ВидСравнения;
			НовыйЭлемент.ПравоеЗначение = СсылкаНаАлгоритмПроверкиПоСкриптуУсловияКП(
				ПредыдущийЭлемент.ПравоеЗначение);
			
			Если Не ОбщегоНазначения.СсылкаСуществует(НовыйЭлемент.ПравоеЗначение) Тогда
				
				АлгоритмПроверкиОбъект = Справочники.АлгоритмыПроверки.СоздатьЭлемент();
				АлгоритмПроверкиОбъект.УстановитьСсылкуНового(НовыйЭлемент.ПравоеЗначение);
				
				АлгоритмПроверкиОбъект.Наименование = СтрШаблон(
					НСтр("ru = 'Скрипт условия обработки документа: #%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					НовыйЭлемент.ПравоеЗначение.УникальныйИдентификатор());
				
				АлгоритмПроверкиОбъект.СпособЗаданияУсловия = 
					Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке;
				
				АлгоритмПроверкиОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
				
				ЗаполнитьАлгоритмПроверкиПоСкриптуУсловияКП(
					АлгоритмПроверкиОбъект, ПредыдущийЭлемент.ПравоеЗначение);
				
				АлгоритмПроверкиОбъект.ОбменДанными.Загрузка = Загрузка;
				АлгоритмПроверкиОбъект.Записать();
				
				Если Загрузка Тогда
					РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
						НовыйЭлемент.ПравоеЗначение,
						ПричинаЗагрузки,
						ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НовыйЭлемент.ПравоеЗначение)));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает результаты действия обработки по результату действия КП.
// 
// Параметры:
//  РезультатДействияКП - ПеречислениеСсылка.РезультатыПроцессаПодписания,
//                        ПеречислениеСсылка.РезультатыУтверждения,
//                        ПеречислениеСсылка.РезультатыРегистрации,
//                        ПеречислениеСсылка.РезультатыСогласования,
//                        Строка.
//  ТипДействияКП - Тип - СправочникСсылка.ШаблоныИсполнения,
//                        СправочникСсылка.ШаблоныРассмотрения,
//                        СправочникСсылка.ШаблоныОзнакомления,
//                        СправочникСсылка.ШаблоныПодписания,
//                        СправочникСсылка.ШаблоныРегистрации,
//                        СправочникСсылка.ШаблоныСогласования,
//                        СправочникСсылка.ШаблоныУтверждения.
// 
// Возвращаемое значение:
//  Массив
//
Функция РезультатыДействияОбработкиПоРезультатуДействияКП(РезультатДействияКП, ТипДействияКП)
	
	РезультатыДействия = Новый Массив;
	
	Если ТипДействияКП = Тип("СправочникСсылка.ШаблоныИсполнения")
		Или ТипДействияКП = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		
		РезультатыДействия.Добавить(Перечисления.РезультатыИсполнения.Исполнено);
	
	ИначеЕсли ТипДействияКП = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		
		РезультатыДействия.Добавить(Перечисления.РезультатыОзнакомления.Ознакомлен);
		
	ИначеЕсли ТипДействияКП = Тип("СправочникСсылка.ШаблоныПодписания") Тогда
		
		Если РезультатДействияКП = Перечисления.РезультатыПроцессаПодписания.Подписано Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыПодписания.Подписано);
		ИначеЕсли РезультатДействияКП = Перечисления.РезультатыПроцессаПодписания.НеПодписано Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыПодписания.НеПодписано);
		Иначе
			РезультатыДействия.Добавить(Перечисления.РезультатыПодписания.Подписано);
			РезультатыДействия.Добавить(Перечисления.РезультатыПодписания.НеПодписано);
		КонецЕсли;
		
	ИначеЕсли ТипДействияКП = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		
		Если РезультатДействияКП = Перечисления.РезультатыРегистрации.Зарегистрировано
			Или РезультатДействияКП = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
			
			РезультатыДействия.Добавить(РезультатДействияКП);
		Иначе
			РезультатыДействия.Добавить(Перечисления.РезультатыРегистрации.Зарегистрировано);
			РезультатыДействия.Добавить(Перечисления.РезультатыРегистрации.НеЗарегистрировано);
		КонецЕсли;
		
	ИначеЕсли ТипДействияКП = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		
		Если РезультатДействияКП = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями
			Или РезультатДействияКП = Перечисления.РезультатыСогласования.НеСогласовано
			Или РезультатДействияКП = Перечисления.РезультатыСогласования.Согласовано Тогда
			
			РезультатыДействия.Добавить(РезультатДействияКП);
		Иначе
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.Согласовано);
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.НеСогласовано);
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
		КонецЕсли;
		
	ИначеЕсли ТипДействияКП = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		
		Если РезультатДействияКП = Перечисления.РезультатыУтверждения.НеУтверждено
			Или РезультатДействияКП = Перечисления.РезультатыУтверждения.Утверждено Тогда
			
			РезультатыДействия.Добавить(РезультатДействияКП);
		Иначе
			РезультатыДействия.Добавить(Перечисления.РезультатыУтверждения.Утверждено);
			РезультатыДействия.Добавить(Перечисления.РезультатыУтверждения.НеУтверждено);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатыДействия;
	
КонецФункции

// Возвращает ссылку на алгоритм проверки по скрипту КП.
// 
// Параметры:
//  СкриптУсловияКП - СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов
// 
// Возвращаемое значение:
//  СправочникСсылка.АлгоритмыПроверки
//
Функция СсылкаНаАлгоритмПроверкиПоСкриптуУсловияКП(СкриптУсловияКП)
	
	Возврат Справочники.АлгоритмыПроверки.ПолучитьСсылку(
		СкриптУсловияКП.УникальныйИдентификатор());
	
КонецФункции

// Заполняет скрипт схемы для обработки объекта по скрипту условия КП.
//
// Параметры:
//  АлгоритмПроверки - СправочникОбъект.АлгоритмыПроверки
//  СкриптУсловияКП - СправочникСсылка.СкриптыУсловийСхемДляКомплексныхПроцессов,
//                    СправочникОбъект.СкриптыУсловийСхемДляКомплексныхПроцессов
//
Процедура ЗаполнитьАлгоритмПроверкиПоСкриптуУсловияКП(АлгоритмПроверки, СкриптУсловияКП)
	
	Если ТипЗнч(СкриптУсловияКП) = 
		Тип("СправочникСсылка.СкриптыУсловийСхемДляКомплексныхПроцессов") Тогда
		
		Если Не ОбщегоНазначения.СсылкаСуществует(СкриптУсловияКП) Тогда
			Возврат;
		КонецЕсли;
		
		СкриптОбъект = СкриптУсловияКП.ПолучитьОбъект();
		
	Иначе
		СкриптОбъект = СкриптУсловияКП;
	КонецЕсли;
	
	АлгоритмПроверки.ВыражениеУсловия = СкриптОбъект.Выражение;
	АлгоритмПроверки.Комментарий = СкриптОбъект.Комментарий;
	
	АлгоритмПроверки.ПометкаУдаления = СкриптОбъект.ПометкаУдаления;
	
КонецПроцедуры

// Обновляет алгоритм проверки по скрипту условия КП.
//
// Параметры:
//  СкриптДляОбработки - СправочникСсылка.АлгоритмыПроверки
//  СкриптУсловияКП - СправочникОбъект.СкриптыУсловийСхемДляКомплексныхПроцессов
//  Загрузка - Булево - признак записи в режиме загрузки.
//  ПричинаЗагрузки - Строка - причина записи в режиме загрузки.
//
Процедура ОбновитьАлгоритмПроверкиПоСкриптуУсловияКП(
	АлгоритмПроверки, СкриптУсловияКП, Загрузка, ПричинаЗагрузки)
	
	Если Не ОбщегоНазначения.СсылкаСуществует(АлгоритмПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(АлгоритмПроверки);
	
	АлгоритмПроверкиОбъект = АлгоритмПроверки.ПолучитьОбъект();
	ЗаполнитьАлгоритмПроверкиПоСкриптуУсловияКП(АлгоритмПроверкиОбъект, СкриптУсловияКП);
	
	АлгоритмПроверкиОбъект.ОбменДанными.Загрузка = Загрузка;
	АлгоритмПроверкиОбъект.Записать();
					
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			АлгоритмПроверки,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(АлгоритмПроверки)));
	КонецЕсли;

	РазблокироватьДанныеДляРедактирования(АлгоритмПроверки);
	
КонецПроцедуры

// Возвращает описание схемы с параллельным выполнение действий обработки.
// 
// Параметры:
//  ВидыДействий - Массив
//   * СправочникСсылка.ВидыДействий
//  ИменаЭлементов - Соответствие - см. РаботаСПроцессамиПоОбработкамОбъектов.ИменаЭлементовСхемыДляВидовДействий. 
// 
// Возвращаемое значение:
// 	Массив - массив с описанием элементов схемы.
// 	 * Структура - см. Справочники.СхемыПроцессов:
// 	                     - ОписаниеЭлементаСтарт,
// 	                     - ОписаниеЭлементаЗавершение,
// 	                     - ОписаниеЭлементаДействие,
// 	                     - ОписаниеЭлементаСлияние,
// 	                     - ОписаниеЭлементаРазделение.
//
Функция ОписаниеСхемыСПараллельнымВыполнениеДействий(ВидыДействий, ИменаЭлементов)
	
	ОписаниеСхемы = Новый Массив;
	
	КоличествоДействий = ВидыДействий.Количество();
	
	ОбщийОтступСлева = 20;
	ОбщийОтступСверху = 20;
	ВертикальныйИнтервал = 20;
	ГоризонтальныйИнтервал = 40;
	
	ИмяЗавершения = "Завершение";
	ШиринаСтартаЗавершения = 40;
	ВысотаСтартаЗавершения = 40;
	
	ИмяРазделения = "Разделение1";
	ИмяСлияния = "Слияние1";
	ШиринаРазделенияСлияния = 40;
	ВысотаРазделенияСлияния = 20;
	ВертикальныйИнтервалОтРазделения = 40;
	ВертикальныйИнтервалДоСлияния = 40;
	
	ШиринаДействий = 120;
	ВысотаДействия = 60;
	
	ЦентрСхемы = ОбщийОтступСлева
		+ (ШиринаДействий * КоличествоДействий
			+ ГоризонтальныйИнтервал * (КоличествоДействий - 1)) / 2;
	
	СмещениеПоВертикали = ОбщийОтступСверху;
	
	// Старт
	
	ЭлементСтарт = Справочники.СхемыПроцессов.ОписаниеЭлементаСтарт();
	ЭлементСтарт.Ширина = ШиринаСтартаЗавершения;
	ЭлементСтарт.Высота = ВысотаСтартаЗавершения;
	ЭлементСтарт.Верх = СмещениеПоВертикали;
	ЭлементСтарт.Лево = ЦентрСхемы - ШиринаСтартаЗавершения / 2;
	ЭлементСтарт.ИмяПоследователя = ИмяРазделения;
	
	ОписаниеСхемы.Добавить(ЭлементСтарт);
	
	СмещениеПоВертикали = СмещениеПоВертикали
		+ ВысотаСтартаЗавершения
		+ ВертикальныйИнтервал;
	
	// Разделение
	
	ЭлементРазделение = Справочники.СхемыПроцессов.ОписаниеЭлементаРазделение();
	ЭлементРазделение.Имя = ИмяРазделения;
	ЭлементРазделение.Ширина = ШиринаРазделенияСлияния;
	ЭлементРазделение.Высота = ВысотаРазделенияСлияния;
	ЭлементРазделение.Верх = СмещениеПоВертикали;
	ЭлементРазделение.Лево = ЦентрСхемы - ШиринаРазделенияСлияния / 2;
	
	Для Каждого ВидДействия Из ВидыДействий Цикл
		ЭлементРазделение.ИменаПоследователей.Добавить(ИменаЭлементов[ВидДействия]);
	КонецЦикла;
	
	ОписаниеСхемы.Добавить(ЭлементРазделение);
	
	СмещениеПоВертикали = СмещениеПоВертикали
		+ ВысотаРазделенияСлияния
		+ ВертикальныйИнтервалОтРазделения;
	
	// Действия
	
	СмещениеПоГоризонтали = ОбщийОтступСлева;
	
	Для Каждого ВидДействия Из ВидыДействий Цикл
		
		ЭлементДействие = Справочники.СхемыПроцессов.ОписаниеЭлементаДействие();
		ЭлементДействие.Имя = ИменаЭлементов[ВидДействия];
		ЭлементДействие.Наименование = Строка(ВидДействия);
		ЭлементДействие.Ширина = ШиринаДействий;
		ЭлементДействие.Высота = ВысотаДействия;
		ЭлементДействие.Верх = СмещениеПоВертикали;
		ЭлементДействие.Лево = СмещениеПоГоризонтали;
		ЭлементДействие.ИмяПоследователя = ИмяСлияния;
		
		ОписаниеСхемы.Добавить(ЭлементДействие);
		
		СмещениеПоГоризонтали = СмещениеПоГоризонтали
			+ ШиринаДействий
			+ ГоризонтальныйИнтервал
		
	КонецЦикла;
	
	СмещениеПоВертикали = СмещениеПоВертикали
		+ ВысотаДействия
		+ ВертикальныйИнтервалДоСлияния;
	
	// Слияние
	
	ЭлементСлияние = Справочники.СхемыПроцессов.ОписаниеЭлементаСлияние();
	ЭлементСлияние.Имя = ИмяСлияния;
	ЭлементСлияние.Ширина = ШиринаРазделенияСлияния;
	ЭлементСлияние.Высота = ВысотаРазделенияСлияния;
	ЭлементСлияние.Верх = СмещениеПоВертикали;
	ЭлементСлияние.Лево = ЦентрСхемы - ШиринаРазделенияСлияния / 2;
	ЭлементСлияние.ИмяПоследователя = ИмяЗавершения;
	
	ОписаниеСхемы.Добавить(ЭлементСлияние);
	
	СмещениеПоВертикали = СмещениеПоВертикали
		+ ВысотаРазделенияСлияния
		+ ВертикальныйИнтервал;
	
	// Завершение
	
	ЭлементЗавершение = Справочники.СхемыПроцессов.ОписаниеЭлементаЗавершение();
	ЭлементЗавершение.Ширина = ШиринаСтартаЗавершения;
	ЭлементЗавершение.Высота = ВысотаСтартаЗавершения;
	ЭлементЗавершение.Верх = СмещениеПоВертикали;
	ЭлементЗавершение.Лево = ЦентрСхемы - ШиринаСтартаЗавершения / 2;
	
	ОписаниеСхемы.Добавить(ЭлементЗавершение);
	
	Возврат ОписаниеСхемы;
	
КонецФункции

// Формирует описание и настройки схемы со смешанным порядком выполнения действий.
// 
// Параметры:
//  Этапы - ТаблицаЗначений - таблица, соответствующая ТЧ Этапы спр. ШаблоныКомплексныхБизнесПроцессов.
//  ПредшественникиЭтапов - ТаблицаЗначений -таблица, соответствующая ТЧ ПредшественникиЭтапов спр. ШаблоныКомплексныхБизнесПроцессов.
//  НастройкиИВидыДействий - Соответствие - Настройки и виды действий
//  ИменаДействий - Соответствие - Имена действий
// 
// Возвращаемое значение:
//  Структура - Описание и настройки схемы со смешанным порядком выполнения действий:
// * ОписаниеСхемы - Массив - массив с описанием элементов схемы.
//   ** Структура - см. Справочники.СхемыПроцессов:
//                       - ОписаниеЭлементаСтарт,
//                       - ОписаниеЭлементаЗавершение,
//                       - ОписаниеЭлементаДействие,
//                       - ОписаниеЭлементаСлияние,
//                       - ОписаниеЭлементаРазделение,
//                       - ОписаниеЭлементаУсловие.
// * НастройкиЭлементов - Соответствие
//     ** Ключ - Строка - имя элемента в схеме.
//     ** Значение - СправочникСсылка.ВидыДействий,
//                   НастройкиКомпоновкиДанных - для условий.
Функция ОписаниеИНастройкиСхемыСоСмешаннымПорядкомВыполненияДействий(
	Этапы, ПредшественникиЭтапов, НастройкиИВидыДействий, ИменаДействий)
	
	ОписаниеИНастройки = Новый Структура();
	ОписаниеИНастройки.Вставить("ОписаниеСхемы", Новый Массив);
	ОписаниеИНастройки.Вставить("НастройкиЭлементов", Новый Соответствие());
	
	ИД_И_ИменаДействий = Новый Соответствие; // Ключ - идентификатор действия, Значение - имя действия.
	ИД_И_ШаблоныПроцессов = Новый Соответствие; // Ключ - идентификатор действия, Значение - шаблон процесса.
	Для Каждого СтрокаТаблицы Из Этапы Цикл
		
		ВидДействия = НастройкиИВидыДействий[СтрокаТаблицы.ШаблонБизнесПроцесса];
		ИмяДействия = ИменаДействий[ВидДействия];
		Если ЗначениеЗаполнено(ИмяДействия) Тогда
			ИД_И_ИменаДействий[СтрокаТаблицы.ИдентификаторЭтапа] = ИмяДействия;
		КонецЕсли;
		
		ИД_И_ШаблоныПроцессов[СтрокаТаблицы.ИдентификаторЭтапа] =
			СтрокаТаблицы.ШаблонБизнесПроцесса;
		
	КонецЦикла;
	
	ИменаВходныхЭлементовДействий = Новый Соответствие();
	// Ключ - имя действия;
	// Значение - имя элемента который расположен на входе в действия (слияние или условие).
	//            если такого элемента нет, то содержится имя самого действия.
	
	ОбщийОтступСлева = 20;
	ОбщийОтступСверху = 20;
	ВертикальныйИнтервал = 40;
	
	ИмяРазделенияПослеСтарта = "РазделениеПослеСтарта";
	ИмяЗавершения = "Завершение";
	ШиринаСтартаЗавершения = 40;
	ВысотаСтартаЗавершения = 40;
	
	ШаблонИмениСлиянияПередДействием = "СлияниеПеред_%1";
	ШаблонИмениРазделенияПослеДействия = "РазделениеПосле_%1";
	ШиринаРазделенияСлияния = 40;
	ВысотаРазделенияСлияния = 20;
	
	ШиринаДействий = 120;
	ВысотаДействия = 60;
	
	ШаблонИмениУсловияПередДействием = "УсловиеПеред_%1";
	ШиринаУсловия = 120;
	ВысотаУсловия = 40;
	
	ВариантВсеПредшественники = "ВсеПредшественники";
	ВариантОдинИзПредшественников = "ОдинИзПредшественников";
	
	СмещениеПоВертикали = ОбщийОтступСверху;
	СмещениеПоГоризонтали = ОбщийОтступСлева;
	
	// Старт
	
	ЭлементСтарт = Справочники.СхемыПроцессов.ОписаниеЭлементаСтарт();
	ЭлементСтарт.Ширина = ШиринаСтартаЗавершения;
	ЭлементСтарт.Высота = ВысотаСтартаЗавершения;
	ЭлементСтарт.Верх = СмещениеПоВертикали;
	ЭлементСтарт.Лево = ОбщийОтступСлева;
	
	ОписаниеИНастройки.ОписаниеСхемы.Добавить(ЭлементСтарт);
	
	// Разделение после старта.
	
	Отбор = Новый Структура("ИдентификаторПредшественника", УникальныйИдентификаторПустой());
	СтрокиПоследователей = ПредшественникиЭтапов.НайтиСтроки(Отбор);
	КоличествоПоследователей = СтрокиПоследователей.Количество();
	
	Если КоличествоПоследователей = 1 Тогда
		
		ИмяПоследователя = ИД_И_ИменаДействий[СтрокиПоследователей[0].ИдентификаторПоследователя];
		ЭлементСтарт.ИмяПоследователя = ИмяПоследователя;
		
		СмещениеПоВертикали = СмещениеПоВертикали + ЭлементСтарт.Высота + ВертикальныйИнтервал;
		
	ИначеЕсли КоличествоПоследователей > 1 Тогда
		
		ЭлементСтарт.ИмяПоследователя = ИмяРазделенияПослеСтарта;
		
		СмещениеПоВертикали = СмещениеПоВертикали + ЭлементСтарт.Высота + ВертикальныйИнтервал / 2;
		
		ЭлементРазделение = Справочники.СхемыПроцессов.ОписаниеЭлементаРазделение();
		ЭлементРазделение.Имя = ИмяРазделенияПослеСтарта;
		ЭлементРазделение.Ширина = ШиринаРазделенияСлияния;
		ЭлементРазделение.Высота = ВысотаРазделенияСлияния;
		ЭлементРазделение.Верх = СмещениеПоВертикали;
		ЭлементРазделение.Лево = ОбщийОтступСлева;
		
		Для Каждого СтрокаПоследователя Из СтрокиПоследователей Цикл
			ИмяПоследователя = ИД_И_ИменаДействий[СтрокаПоследователя.ИдентификаторПоследователя];
			Если ЗначениеЗаполнено(ИмяПоследователя) Тогда
				ЭлементРазделение.ИменаПоследователей.Добавить(ИмяПоследователя);
			КонецЕсли;
		КонецЦикла;
		
		ОписаниеИНастройки.ОписаниеСхемы.Добавить(ЭлементРазделение);
		
		СмещениеПоВертикали = СмещениеПоВертикали
			+ ЭлементРазделение.Высота + ВертикальныйИнтервал;
		
	Иначе
		ЭлементСтарт.ИмяПоследователя = ИмяЗавершения;
		
		СмещениеПоВертикали = СмещениеПоВертикали + ЭлементСтарт.Высота + ВертикальныйИнтервал;
		
	КонецЕсли;
	
	СмещениеПоГоризонтали = СмещениеПоГоризонтали + ЭлементСтарт.Ширина;
	
	// Действия и связанные с ними элементы.
	
	Для Каждого СтрокаЭтапа Из Этапы Цикл
		
		ИмяДействия = ИД_И_ИменаДействий[СтрокаЭтапа.ИдентификаторЭтапа];
		ВидДействия = НастройкиИВидыДействий[СтрокаЭтапа.ШаблонБизнесПроцесса];
		
		Если Не ЗначениеЗаполнено(ИмяДействия) Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаВходныхЭлементовДействий[ИмяДействия] = ИмяДействия;
		
		// Слияние перед действием
		
		Отбор = Новый Структура("ИдентификаторПоследователя", СтрокаЭтапа.ИдентификаторЭтапа);
		СтрокиПредшественников = ПредшественникиЭтапов.НайтиСтроки(Отбор);
		КоличествоПредшественников = СтрокиПредшественников.Количество();
		
		ЭлементСлияния = Неопределено;
		Если КоличествоПредшественников > 1
			И СтрокаЭтапа.ПредшественникиВариантИспользования = ВариантВсеПредшественники Тогда
			
			ИмяСлиянияПередДействием = СтрШаблон(ШаблонИмениСлиянияПередДействием, ИмяДействия);
			
			ЭлементСлияния = Справочники.СхемыПроцессов.ОписаниеЭлементаСлияние();
			ЭлементСлияния.Имя = ИмяСлиянияПередДействием;
			ЭлементСлияния.Ширина = ШиринаРазделенияСлияния;
			ЭлементСлияния.Высота = ВысотаРазделенияСлияния;
			ЭлементСлияния.Верх = СмещениеПоВертикали;
			
			ЭлементСлияния.Лево = СмещениеПоГоризонтали
				+ (ШиринаДействий - ШиринаРазделенияСлияния) / 2;
			
			ЭлементСлияния.ИмяПоследователя = ИмяДействия;
			
			ОписаниеИНастройки.ОписаниеСхемы.Добавить(ЭлементСлияния);
			
			ИменаВходныхЭлементовДействий[ИмяДействия] = ИмяСлиянияПередДействием;
			
			СмещениеПоВертикали = СмещениеПоВертикали
				+ ЭлементСлияния.Высота + ВертикальныйИнтервал / 2;
			
		КонецЕсли;
		
		// Условие
		
		ТипыШаблоновСРезультатами = Новый Соответствие();
		ТипыШаблоновСРезультатами[Тип("СправочникСсылка.ШаблоныУтверждения")] = Истина;
		ТипыШаблоновСРезультатами[Тип("СправочникСсылка.ШаблоныРегистрации")] = Истина;
		ТипыШаблоновСРезультатами[Тип("СправочникСсылка.ШаблоныСогласования")] = Истина;
		ТипыШаблоновСРезультатами[Тип("СправочникСсылка.ШаблоныПодписания")] = Истина;
		
		ДобавитьЭлементУсловие = Ложь;
		Для Каждого СтрокаПредшественника Из СтрокиПредшественников Цикл
			
			ТипУсловия = ТипЗнч(СтрокаПредшественника.УсловиеПерехода);
			Если ТипУсловия = Тип("СправочникСсылка.АлгоритмыПроверки")
				И ЗначениеЗаполнено(СтрокаПредшественника.УсловиеПерехода) Тогда
				
				ДобавитьЭлементУсловие = Истина;
				Прервать;
			КонецЕсли;
			
			ШаблонПроцесса = ИД_И_ШаблоныПроцессов[СтрокаПредшественника.ИдентификаторПредшественника];
			ТипШаблона = ТипЗнч(ШаблонПроцесса);
			
			Если СтрокаПредшественника.УсловиеРассмотрения <> 
				Перечисления.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения
				И ТипыШаблоновСРезультатами[ТипШаблона] = Истина Тогда
				
				ДобавитьЭлементУсловие = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДобавитьЭлементУсловие Тогда
			
			ИмяУсловия = СтрШаблон(ШаблонИмениУсловияПередДействием, ИмяДействия);
			
			Если ЭлементСлияния = Неопределено Тогда
				ИменаВходныхЭлементовДействий[ИмяДействия] = ИмяУсловия;
			Иначе
				ЭлементСлияния.ИмяПоследователя = ИмяУсловия;
			КонецЕсли;
			
			ЭлементУсловие = Справочники.СхемыПроцессов.ОписаниеЭлементаУсловие();
			ЭлементУсловие.Имя = ИмяУсловия;
			ЭлементУсловие.Наименование = СтрокаЭтапа.ПредшественникиЭтапаСтрокой;
			ЭлементУсловие.Ширина = ШиринаУсловия;
			ЭлементУсловие.Высота = ВысотаУсловия;
			
			ЭлементУсловие.Верх = СмещениеПоВертикали;
			ЭлементУсловие.Лево = СмещениеПоГоризонтали;
			
			ЭлементУсловие.ИмяПоследователяДа = ИмяДействия;
			ЭлементУсловие.ИмяПоследователяНет = ИмяЗавершения;
			
			ЭлементУсловие.СторонаВеткиДа = 4;
			
			ОписаниеИНастройки.ОписаниеСхемы.Добавить(ЭлементУсловие);
			
			СмещениеПоВертикали = СмещениеПоВертикали
				+ ЭлементУсловие.Высота + ВертикальныйИнтервал / 2;
			
			// Формирование структуры условия.
			
			URLСхемы = ПоместитьВоВременноеХранилище(
				ПолучитьОбщийМакет("СтруктураУсловияСхемыОбработкиОбъекта"));
			
			Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
			Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
			Компоновщик.ЗагрузитьНастройки(
				РаботаСПроцессамиПоОбработкамОбъектов.ПустоеУсловиеСхемыОбработкиОбъекта());
			
			ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
			ТипЭлементОтбораКомпоновкиДанных = Тип("ЭлементОтбораКомпоновкиДанных");
			
			ПолеУсловиеПоОбъекту = Новый ПолеКомпоновкиДанных(
				РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.ИмяПоляУсловиеПоОбъекту());
			
			ПолеРезультатВыполненияДействия = Новый ПолеКомпоновкиДанных(
				РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.ИмяПоляУсловиеПоРезультатуВыполненияДействия());
			
			ЭлементыОтбора = Компоновщик.Настройки.Отбор.Элементы;
			КорневаяГруппаИЛИ = Ложь;
			Если СтрокаЭтапа.ПредшественникиВариантИспользования = ВариантОдинИзПредшественников Тогда
				НовыйЭлемент = Компоновщик.Настройки.Отбор.Элементы.Добавить(ТипГруппаЭлементовОтбораКомпоновкиДанных);
				НовыйЭлемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ЭлементыОтбора = НовыйЭлемент.Элементы;
				КорневаяГруппаИЛИ = Истина;
			КонецЕсли;
			
			Для Каждого СтрокаПредшественника Из СтрокиПредшественников Цикл
				
				ИмяПредшествующегоДействия = 
					ИД_И_ИменаДействий[СтрокаПредшественника.ИдентификаторПредшественника];
				
				Если Не ЗначениеЗаполнено(ИмяПредшествующегоДействия) Тогда
					Продолжить;
				КонецЕсли;
				
				ШаблонПроцесса = 
					ИД_И_ШаблоныПроцессов[СтрокаПредшественника.ИдентификаторПредшественника];
				ТипШаблона = ТипЗнч(ШаблонПроцесса);
				
				ДобавитьПроверкуРезультата = Ложь;
				Если СтрокаПредшественника.УсловиеРассмотрения <> 
					Перечисления.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения
					И ТипыШаблоновСРезультатами[ТипШаблона] = Истина Тогда
					
					ДобавитьПроверкуРезультата = Истина;
				КонецЕсли;
				
				ДобавитьАлгоритмПроверки = Ложь;
				ТипУсловия = ТипЗнч(СтрокаПредшественника.УсловиеПерехода);
				Если ТипУсловия = Тип("СправочникСсылка.АлгоритмыПроверки")
					И ЗначениеЗаполнено(СтрокаПредшественника.УсловиеПерехода) Тогда
					
					ДобавитьАлгоритмПроверки = Истина;
				КонецЕсли;
				
				ЭлементыДляТекущихУсловий = ЭлементыОтбора;
				Если КорневаяГруппаИЛИ И ДобавитьАлгоритмПроверки И ДобавитьПроверкуРезультата Тогда
					НовыйЭлемент = ЭлементыОтбора.Добавить(ТипГруппаЭлементовОтбораКомпоновкиДанных);
					НовыйЭлемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
					ЭлементыДляТекущихУсловий = НовыйЭлемент.Элементы;
				КонецЕсли;
				
				Если ДобавитьПроверкуРезультата Тогда
					
					РезультатыДействий = РезультатыДействияОбработкиПоРезультатуРассмотренияДействия(
						СтрокаПредшественника.УсловиеРассмотрения, ТипШаблона);
					
					ЭлементыПроверкиРезультатов = ЭлементыДляТекущихУсловий;
					Если РезультатыДействий.Количество() > 1 Тогда
						НовыйЭлемент = ЭлементыДляТекущихУсловий.Добавить(ТипГруппаЭлементовОтбораКомпоновкиДанных);
						НовыйЭлемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
						ЭлементыПроверкиРезультатов = НовыйЭлемент.Элементы;
					КонецЕсли;
					
					Для Каждого РезультатДействия Из РезультатыДействий Цикл
						НовыйЭлемент = ЭлементыПроверкиРезультатов.Добавить(ТипЭлементОтбораКомпоновкиДанных);
						НовыйЭлемент.Использование = Истина;
						НовыйЭлемент.ЛевоеЗначение = ПолеРезультатВыполненияДействия;
						НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						НовыйЭлемент.ПравоеЗначение = РезультатДействия;
						
						НовыйЭлемент.ПравоеЗначение = 
							РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.СтруктураУсловияПоРезультатуВыполненияДействия();
						НовыйЭлемент.ПравоеЗначение.ИмяДействия = ИмяПредшествующегоДействия;
						НовыйЭлемент.ПравоеЗначение.РезультатВыполнения = РезультатДействия;
					КонецЦикла;
					
				КонецЕсли;
				
				Если ДобавитьАлгоритмПроверки Тогда
					НовыйЭлемент = ЭлементыДляТекущихУсловий.Добавить(ТипЭлементОтбораКомпоновкиДанных);
					НовыйЭлемент.Использование = Истина;
					НовыйЭлемент.ЛевоеЗначение = ПолеУсловиеПоОбъекту;
					НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					НовыйЭлемент.ПравоеЗначение = СтрокаПредшественника.УсловиеПерехода;
				КонецЕсли;
				
			КонецЦикла;
			
			ОписаниеИНастройки.НастройкиЭлементов[ИмяУсловия] = Компоновщик.ПолучитьНастройки();
			
		КонецЕсли;
		
		// Действие
		
		ЭлементДействие = Справочники.СхемыПроцессов.ОписаниеЭлементаДействие();
		ЭлементДействие.Имя = ИмяДействия;
		ЭлементДействие.Наименование = Строка(ВидДействия);
		ЭлементДействие.Ширина = ШиринаДействий;
		ЭлементДействие.Высота = ВысотаДействия;
		ЭлементДействие.Верх = СмещениеПоВертикали;
		ЭлементДействие.Лево = СмещениеПоГоризонтали;
		
		ОписаниеИНастройки.ОписаниеСхемы.Добавить(ЭлементДействие);
		
		ОписаниеИНастройки.НастройкиЭлементов[ИмяДействия] = ВидДействия;
		
		// Разделение после действия.
		
		Отбор = Новый Структура("ИдентификаторПредшественника", СтрокаЭтапа.ИдентификаторЭтапа);
		СтрокиПоследователей = ПредшественникиЭтапов.НайтиСтроки(Отбор);
		КоличествоПоследователей = СтрокиПоследователей.Количество();
		
		Если КоличествоПоследователей = 1 Тогда
			
			ИмяПоследователя = 
				ИД_И_ИменаДействий[СтрокиПоследователей[0].ИдентификаторПоследователя];
			
			Если ЗначениеЗаполнено(ИмяПоследователя) Тогда
				ЭлементДействие.ИмяПоследователя = ИмяПоследователя;
			КонецЕсли;
			
			СмещениеПоВертикали = СмещениеПоВертикали
				+ ЭлементДействие.Высота + ВертикальныйИнтервал;
			
		ИначеЕсли КоличествоПоследователей > 1 Тогда
			
			ИмяРазделенияПослеДействия = СтрШаблон(ШаблонИмениРазделенияПослеДействия, ИмяДействия);
			
			ЭлементДействие.ИмяПоследователя = ИмяРазделенияПослеДействия;
			
			СмещениеПоВертикали = СмещениеПоВертикали
				+ ЭлементДействие.Высота + ВертикальныйИнтервал / 2;
			
			ЭлементРазделение = Справочники.СхемыПроцессов.ОписаниеЭлементаРазделение();
			ЭлементРазделение.Имя = ИмяРазделенияПослеДействия;
			ЭлементРазделение.Ширина = ШиринаРазделенияСлияния;
			ЭлементРазделение.Высота = ВысотаРазделенияСлияния;
			ЭлементРазделение.Верх = СмещениеПоВертикали;
			
			ЭлементРазделение.Лево = СмещениеПоГоризонтали
				+ (ШиринаДействий - ШиринаРазделенияСлияния) / 2;
			
			Для Каждого СтрокаПоследователя Из СтрокиПоследователей Цикл
				ИмяПоследователя = ИД_И_ИменаДействий[СтрокаПоследователя.ИдентификаторПоследователя];
				Если ЗначениеЗаполнено(ИмяПоследователя) Тогда
					ЭлементРазделение.ИменаПоследователей.Добавить(ИмяПоследователя);
				КонецЕсли;
			КонецЦикла;
			
			ОписаниеИНастройки.ОписаниеСхемы.Добавить(ЭлементРазделение);
			
			СмещениеПоВертикали = СмещениеПоВертикали
				+ ЭлементРазделение.Высота + ВертикальныйИнтервал;
		
		Иначе
			ЭлементДействие.ИмяПоследователя = ИмяЗавершения;
			
			СмещениеПоВертикали = СмещениеПоВертикали
				+ ЭлементДействие.Высота + ВертикальныйИнтервал;
			
		КонецЕсли;
		
		СмещениеПоГоризонтали = СмещениеПоГоризонтали + ШиринаДействий;
		
	КонецЦикла;
	
	// Завершение
	
	ЭлементЗавершение = Справочники.СхемыПроцессов.ОписаниеЭлементаЗавершение();
	ЭлементЗавершение.Ширина = ШиринаСтартаЗавершения;
	ЭлементЗавершение.Высота = ВысотаСтартаЗавершения;
	ЭлементЗавершение.Верх = СмещениеПоВертикали;
	ЭлементЗавершение.Лево = ОбщийОтступСлева;
	
	ОписаниеИНастройки.ОписаниеСхемы.Добавить(ЭлементЗавершение);
	
	// Замена имен действий среди последователей на имена добавленных элементов перед действиями.
	
	Для Каждого ОписаниеЭлемента Из ОписаниеИНастройки.ОписаниеСхемы Цикл
		
		Если ОписаниеЭлемента.Тип = Перечисления.ТипыЭлементовСхемПроцессов.Старт
			Или ОписаниеЭлемента.Тип = Перечисления.ТипыЭлементовСхемПроцессов.Действие Тогда
			
			НовоеИмяПоследователя = ИменаВходныхЭлементовДействий[ОписаниеЭлемента.ИмяПоследователя];
			Если ЗначениеЗаполнено(НовоеИмяПоследователя) Тогда
				ОписаниеЭлемента.ИмяПоследователя = НовоеИмяПоследователя;
			КонецЕсли;
			
		ИначеЕсли ОписаниеЭлемента.Тип = Перечисления.ТипыЭлементовСхемПроцессов.Разделение Тогда
			
			НовыеПоследователи = Новый Массив;
			Для Каждого СтароеИмяПоследователя Из ОписаниеЭлемента.ИменаПоследователей Цикл
				НовоеИмяПоследователя = ИменаВходныхЭлементовДействий[СтароеИмяПоследователя];
				Если ЗначениеЗаполнено(НовоеИмяПоследователя) Тогда
					НовыеПоследователи.Добавить(НовоеИмяПоследователя);
				Иначе
					НовыеПоследователи.Добавить(СтароеИмяПоследователя);
				КонецЕсли;
			КонецЦикла;
			ОписаниеЭлемента.ИменаПоследователей = НовыеПоследователи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеИНастройки;
	
КонецФункции

// Возвращает результаты действия обработки по результату рассмотрения действия комплексного процесса.
// 
// Параметры:
//  РезультатРассмотрения - ПеречислениеСсылка.УсловияРассмотренияПредшественниковЭтапа.
//  ТипДействияКП - Тип - СправочникСсылка.ШаблоныПодписания,
//                        СправочникСсылка.ШаблоныРегистрации,
//                        СправочникСсылка.ШаблоныСогласования,
//                        СправочникСсылка.ШаблоныУтверждения.
// 
// Возвращаемое значение:
//  Массив
//
Функция РезультатыДействияОбработкиПоРезультатуРассмотренияДействия(
	РезультатРассмотрения, ТипДействияКП)
	
	РезультатыДействия = Новый Массив;
	
	УсловияРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа;
	
	Если ТипДействияКП = Тип("СправочникСсылка.ШаблоныПодписания") Тогда
		
		Если РезультатРассмотрения = УсловияРассмотрения.ПослеУспешногоВыполнения Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыПодписания.Подписано);
		ИначеЕсли РезультатРассмотрения = УсловияРассмотрения.ПослеНеуспешногоВыполнения Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыПодписания.НеПодписано);
		КонецЕсли;
		
	ИначеЕсли ТипДействияКП = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		
		Если РезультатРассмотрения = УсловияРассмотрения.ПослеУспешногоВыполнения Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыРегистрации.Зарегистрировано);
		ИначеЕсли РезультатРассмотрения = УсловияРассмотрения.ПослеНеуспешногоВыполнения Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыРегистрации.НеЗарегистрировано);
		КонецЕсли;
		
	ИначеЕсли ТипДействияКП = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		
		Если РезультатРассмотрения = УсловияРассмотрения.ПослеНеуспешногоВыполнения Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.НеСогласовано);
		ИначеЕсли РезультатРассмотрения = УсловияРассмотрения.ПослеУспешногоВыполнения Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.Согласовано);
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
		ИначеЕсли РезультатРассмотрения = УсловияРассмотрения.ПослеУспешногоСогласованияСЗамечаниями Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
		ИначеЕсли РезультатРассмотрения = УсловияРассмотрения.ПослеУспешногоСогласованияСЗамечаниями Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.Согласовано);
		КонецЕсли;
		
	ИначеЕсли ТипДействияКП = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		
		Если РезультатРассмотрения = УсловияРассмотрения.ПослеУспешногоВыполнения Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыУтверждения.Утверждено);
		ИначеЕсли РезультатРассмотрения = УсловияРассмотрения.ПослеНеуспешногоВыполнения Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыУтверждения.НеУтверждено);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатыДействия;
	
КонецФункции

// "Зонтик" создания настроек для вида документа по шаблонам процессов
Процедура СоздатьОбновитьНастройкуОбработки(СсылкаШаблон, ПараметрыЗагрузки)
	
	УстановитьПривилегированныйРежим(Истина); 
	ТипШаблона = ТипЗнч(СсылкаШаблон);
	Если (ТипШаблона <> Тип("СправочникСсылка.ШаблоныСогласования")
		И ТипШаблона <> Тип("СправочникСсылка.ШаблоныИсполнения")
		И ТипШаблона <> Тип("СправочникСсылка.ШаблоныОзнакомления") 
		И ТипШаблона <> Тип("СправочникСсылка.ШаблоныПодписания") 
		И ТипШаблона <> Тип("СправочникСсылка.ШаблоныРассмотрения")
		И ТипШаблона <> Тип("СправочникСсылка.ШаблоныРегистрации")
		И ТипШаблона <> Тип("СправочникСсылка.ШаблоныУтверждения")) 
		Или Не ОбщегоНазначения.СсылкаСуществует(СсылкаШаблон)  Тогда
		Возврат;
	КонецЕсли;
		
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаШаблон,
		"ШаблонВКомплексномПроцессе, Ответственный, НаименованиеБизнесПроцесса, ВладелецШаблона,
		| УсловияЗапретаВыполнения, Описание");

	// Если это настройка шаблона КП, то его обрабатываем отдельно 			
	Если РеквизитыШаблона.ШаблонВКомплексномПроцессе = Истина Тогда
		Если ЗначениеЗаполнено(РеквизитыШаблона.ВладелецШаблона)
			И ТипЗнч(РеквизитыШаблона.ВладелецШаблона) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
			СоздатьОбновитьНастройкуОбработкиПоКомплексномуПроцессу(
				РеквизитыШаблона.ВладелецШаблона, ПараметрыЗагрузки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗапросШаблоны = Новый Запрос;
	ЗапросШаблоны.Текст = 
		"ВЫБРАТЬ
		|	НастройкаШаблоновБизнесПроцессов.КомуНазначен,
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса,
		|	НастройкаШаблоновБизнесПроцессов.Организация,
		|	НастройкаШаблоновБизнесПроцессов.ИнтерактивныйЗапуск,
		|	ВЫБОР
		|		КОГДА НастройкаШаблоновБизнесПроцессов.ИнтерактивныйЗапуск = ИСТИНА
		|			ТОГДА НастройкаШаблоновБизнесПроцессов.ВидИнтерактивногоСобытия
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидИнтерактивногоСобытия,
		|	НастройкаШаблоновБизнесПроцессов.Условие,
		|	НастройкаШаблоновБизнесПроцессов.СобытияАвтоСтарта
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &ШаблонПроцесса
		|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.КомуНазначен) = ТИП(Справочник.ВидыДокументов)";
		
	ЗапросШаблоны.Параметры.Вставить("ШаблонПроцесса", СсылкаШаблон);
	НастройкиШаблона = ЗапросШаблоны.Выполнить().Выгрузить();
	
	// Создадим настройки. Если шаблон кому то задан
	Если НастройкиШаблона.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	ТипДействия = Неопределено;
	Если ТипШаблона = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		ТипДействия = Перечисления.ТипыДействий.Согласование;
	ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
		ТипДействия = Перечисления.ТипыДействий.Исполнение;
	ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		ТипДействия = Перечисления.ТипыДействий.Ознакомление;
	ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		ТипДействия = Перечисления.ТипыДействий.Исполнение;
	ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		ТипДействия = Перечисления.ТипыДействий.Регистрация;
	ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		ТипДействия = Перечисления.ТипыДействий.Утверждение;
	ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныПодписания") Тогда
		ТипДействия = Перечисления.ТипыДействий.Подписание;
	КонецЕсли;
	
	НаименованиеБизнесПроцессаПоШаблону = НаименованиеБизнесПроцессаПоШаблону(РеквизитыШаблона);
	Если Не ЗначениеЗаполнено(НаименованиеБизнесПроцессаПоШаблону) Тогда
		НаименованиеБизнесПроцессаПоШаблону = НаименованиеДействияПоТипу(ТипДействия);
	КонецЕсли;
	
	ВидДействия = НайтиВидДействия(ТипДействия, НаименованиеБизнесПроцессаПоШаблону);
	Если Не ЗначениеЗаполнено(ВидДействия) Тогда
		ВидДействия = СоздатьВидДействия(ТипДействия, НаименованиеБизнесПроцессаПоШаблону, ПараметрыЗагрузки);
	КонецЕсли;

	Для Каждого СтрНастройка Из НастройкиШаблона Цикл
		Если Не ЗначениеЗаполнено(СтрНастройка.КомуНазначен) 
			Или Не ОбщегоНазначения.СсылкаСуществует(СтрНастройка.КомуНазначен) Тогда
			Продолжить;
		КонецЕсли;
		
		// GUID обработки - из GUID вида документа	
		СсылкаНовойНастройкиОбработки = Справочники.НастройкиОбработкиВидовОбъектов.ПолучитьСсылку(
			СтрНастройка.КомуНазначен.УникальныйИдентификатор());
			
		НастройкаСуществует = ОбщегоНазначения.СсылкаСуществует(СсылкаНовойНастройкиОбработки);
		
		Если НастройкаСуществует Тогда
			НастройкаОбъект = СсылкаНовойНастройкиОбработки.ПолучитьОбъект();
		Иначе
			НастройкаОбъект = Справочники.НастройкиОбработкиВидовОбъектов.СоздатьЭлемент();
			НастройкаОбъект.УстановитьСсылкуНового(СсылкаНовойНастройкиОбработки);
			ДатаДействияНастроек = МинимальнаяДатаДействияНастроек(СтрНастройка.КомуНазначен);
			
			НастройкаОбъект.ДействуетС = ДатаДействияНастроек - 2*86400;
			НастройкаОбъект.ДействуетПо = ДатаДействияНастроек - 86400;
			НастройкаОбъект.Автор = РеквизитыШаблона.Ответственный;
			НастройкаОбъект.ЗаполнитьНаименование();
		КонецЕсли;
		
		НастройкаОбъект.ВидОбъекта = СтрНастройка.КомуНазначен;
		СтрНайти = НастройкаОбъект.ВидыДействий.НайтиСтроки(Новый Структура("ВидДействия", ВидДействия));
		Если СтрНайти.Количество() = 0 Тогда
			НоваяСтрока = НастройкаОбъект.ВидыДействий.Добавить();
			НоваяСтрока.ВидДействия = ВидДействия;
		КонецЕсли;
		
		// Загрузим условия проверки выполнения
		УсловияЗапретаВыполнения = РеквизитыШаблона.УсловияЗапретаВыполнения.Выгрузить();
		СтрокиУсловия = НастройкаОбъект.УсловияПроверкиВыполнения.НайтиСтроки(
			Новый Структура("ВидДействия", ВидДействия));
		Для Каждого СтрУсловие Из СтрокиУсловия Цикл
			НастройкаОбъект.УсловияПроверкиВыполнения.Удалить(СтрУсловие);
		КонецЦикла;
		
		Для Каждого СтрУсловие Из УсловияЗапретаВыполнения Цикл
			НовСтрока = НастройкаОбъект.УсловияПроверкиВыполнения.Добавить();
			НовСтрока.ВидДействия = ВидДействия;
			НовСтрока.Условие = АлгоритмПроверкиПоУсловиюЗадачи(
				СтрУсловие.Условие, ПараметрыЗагрузки);
			НовСтрока.ТекстПредупреждения = СтрУсловие.ТекстПредупреждения;
		КонецЦикла;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			НастройкаОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		НастройкаОбъект.Записать();
	
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				НастройкаОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НастройкаОбъект.Ссылка)));
		КонецЕсли;
		
		СоздатьОбновитьПравилаОбработки(
			СсылкаШаблон, НастройкаОбъект, ВидДействия, ПараметрыЗагрузки);
	КонецЦикла;

КонецПроцедуры

Функция АлгоритмПроверкиПоУсловиюЗадачи(УсловиеЗадачи, ПараметрыЗагрузки)
	
	// GUID обработки - из GUID вида документа	
	СсылкаАлгоритмПроверки = Справочники.АлгоритмыПроверки.ПолучитьСсылку(
		УсловиеЗадачи.УникальныйИдентификатор());
	АлгоритмСуществует = ОбщегоНазначения.СсылкаСуществует(СсылкаАлгоритмПроверки);
	
	Если АлгоритмСуществует Тогда
		АлгоритмОбъект = СсылкаАлгоритмПроверки.ПолучитьОбъект();
	Иначе
		АлгоритмОбъект = Справочники.АлгоритмыПроверки.СоздатьЭлемент();
		АлгоритмОбъект.УстановитьСсылкуНового(СсылкаАлгоритмПроверки);
	КонецЕсли;
	
	РеквизитыУсловия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УсловиеЗадачи, 
		"ВыражениеУсловия, НастройкаКомбинацииУсловий, НастройкаУсловия, СпособЗаданияУсловия, Наименование");
	ЗаполнитьЗначенияСвойств(АлгоритмОбъект, РеквизитыУсловия);
	АлгоритмОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия; 
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		АлгоритмОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	АлгоритмОбъект.Записать();

	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			АлгоритмОбъект.Ссылка,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(АлгоритмОбъект.Ссылка)));
	КонецЕсли;
	
	Возврат АлгоритмОбъект.Ссылка;
		
КонецФункции

Процедура СоздатьОбновитьПравилаОбработки(Шаблон, НастройкаОбъекта, ВидДействия, ПараметрыЗагрузки, ШаблонКП = Неопределено)

	УстановитьПривилегированныйРежим(Истина);
	
	// Создадим настройку действия по шаблону процесса	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныИсполнения") 
		Или ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		НастройкаДействия = НастройкаДействияИсполнениеПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки);
	ИначеЕсли ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		НастройкаДействия = НастройкаДействияОзнакомлениеПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки);
	ИначеЕсли ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныПодписания") Тогда
		НастройкаДействия = НастройкаДействияПодписаниеПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки);
	ИначеЕсли ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		НастройкаДействия = НастройкаДействияРегистрацияПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки);
	ИначеЕсли ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		НастройкаДействия = НастройкаДействияСогласованиеПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки);
	ИначеЕсли ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		НастройкаДействия = НастройкаДействияУтверждениеПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки);
	Иначе
		Возврат;
	КонецЕсли;
	
	// Создадим Правило обработки
	Если ЗначениеЗаполнено(ШаблонКП) Тогда
		СсылкаНаПравило = Справочники.ПравилаОбработки.ПолучитьСсылку(ШаблонКП.УникальныйИдентификатор());
	Иначе
		СсылкаНаПравило = Справочники.ПравилаОбработки.ПолучитьСсылку(Шаблон.УникальныйИдентификатор());
	КонецЕсли;
	Блокировка = Новый БлокировкаДанных();
	Блокировка.Добавить("Справочник.ПравилаОбработки").УстановитьЗначение("Ссылка", СсылкаНаПравило);
	Блокировка.Добавить("РегистрСведений.ПравилаОбработкиОбъектов").УстановитьЗначение(
		"ПравилоОбработки", СсылкаНаПравило);
	Блокировка.Заблокировать();

	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаПравило) Тогда
		ПравилоОбъект = СсылкаНаПравило.ПолучитьОбъект();
	Иначе	 
    	ПравилоОбъект = Справочники.ПравилаОбработки.СоздатьЭлемент();
    	ПравилоОбъект.УстановитьСсылкуНового(СсылкаНаПравило);
	КонецЕсли;
		
	ПравилоОбъект.ЭлементГруппировки = НастройкаОбъекта.ВидОбъекта;
	ПравилоОбъект.ДействуетС = НастройкаОбъекта.ДействуетС;
	ПравилоОбъект.ДействуетПо = НастройкаОбъекта.ДействуетПо;
	ПравилоОбъект.НеДействует = Истина;
	ПравилоОбъект.Создал = Сотрудники.ОсновнойСотрудник();
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		ПравилоОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	ПравилоОбъект.Записать();
	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			ПравилоОбъект.Ссылка,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПравилоОбъект.Ссылка)));
	КонецЕсли;
	
	// Привяжем настройки 
	Ключ = Новый Структура("ПравилоОбработки", ПравилоОбъект.Ссылка);
	РегистрыСведений.ПравилаОбработкиОбъектов.ПриЗаписиНовойНастройки(
		Ключ,
		НастройкаДействия);
	
КонецПроцедуры

Функция АлгоритмПоАвтоподстановкеИлиИсполнитель(ИсполнительШаблона, ПредметыШаблона)
	
	Если ТипЗнч(ИсполнительШаблона) <> Тип("Строка") Тогда
		Возврат ИсполнительШаблона;
	КонецЕсли;
	
	ИмяАП = ИсполнительШаблона;
	// Нужно убрать привязку к предмету
	Если СтрНайти(ИмяАП, ".") Тогда
		Для Каждого СтрПредмет Из ПредметыШаблона Цикл
			ИмяПредмета = СокрЛП(СтрПредмет.ИмяПредмета);
			Если СтрНайти(ИмяАП, ИмяПредмета + ".") > 0 Тогда
				ИмяАП = СтрЗаменить(ИмяАП, ИмяПредмета + ".", "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяАП) Тогда
		Возврат СконвертированнаяАвтоподстановка(ИмяАП, "Справочник.ШаблоныВнутреннихДокументов");
	КонецЕсли;
	
	Возврат ИсполнительШаблона;
	
КонецФункции

Функция НастройкаДействияИсполнениеПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки)

	СсылкаНастройки = Справочники.НастройкиДействийИсполнения.ПолучитьСсылку(Шаблон.УникальныйИдентификатор());
	
	Блокировка = Новый БлокировкаДанных();
	Блокировка.Добавить("Справочник.НастройкиДействийИсполнения").УстановитьЗначение("Ссылка", СсылкаНастройки);
	Блокировка.Заблокировать();
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНастройки) Тогда
		НастройкаДействиеОбъект = СсылкаНастройки.ПолучитьОбъект();
	Иначе	 
    	НастройкаДействиеОбъект = Справочники.НастройкиДействийИсполнения.СоздатьЭлемент();
    	НастройкаДействиеОбъект.УстановитьСсылкуНового(СсылкаНастройки);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НастройкаДействиеОбъект.ВидДействия) Тогда
		НастройкаДействиеОбъект.ВидДействия = ВидДействия
	КонецЕсли;
	НастройкаДействиеОбъект.МоментРазыменованияУчастников = 
		Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия;
	НастройкаДействиеОбъект.Создал = Сотрудники.ОсновнойСотрудник();
	НастройкаДействиеОбъект.ВозможностьИзменятьУчастников = 
		Перечисления.ВариантыДоступностиИзмененияДействий.Разрешено;
	НастройкаДействиеОбъект.Участники.Очистить();

	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда		
	
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,
			"Наименование, Автор, Важность, Описание, Ответственный, ВладелецШаблона,
			|Исполнитель, ШаблонВКомплексномПроцессе, СрокИсполнения,
			|СрокИсполненияДни, СрокИсполненияМинуты, СрокИсполненияЧасы, ВариантУстановкиСрокаИсполнения,
			|ВариантУстановкиСрокаОбработкиРезультатов, СрокОбработкиРезультатов, СрокОбработкиРезультатовДни,
			|СрокОбработкиРезультатовМинуты, СрокОбработкиРезультатовЧасы, Предметы,
			|СрокОтложенногоСтарта");
		ЗаполнитьЗначенияСвойств(НастройкаДействиеОбъект, РеквизитыШаблона, , "Наименование");
		НастройкаДействиеОбъект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		НастройкаДействиеОбъект.ОтложенноеНачалоВыполнения = РеквизитыШаблона.СрокОтложенногоСтарта;
		
		Если ЗначениеЗаполнено(РеквизитыШаблона.Исполнитель) 
			Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполнения) 
			Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполненияДни) 
			Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполненияМинуты)
			Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполненияЧасы) Тогда
			НоваяСтрока = НастройкаДействиеОбъект.Участники.Добавить();
			НоваяСтрока.ВариантУстановкиСрока = РеквизитыШаблона.ВариантУстановкиСрокаИсполнения;
			НоваяСтрока.Описание = РеквизитыШаблона.Описание;
			НоваяСтрока.Срок = РеквизитыШаблона.СрокИсполнения;
			НоваяСтрока.СрокДни = РеквизитыШаблона.СрокИсполненияДни;
			НоваяСтрока.СрокМинуты = РеквизитыШаблона.СрокИсполненияМинуты;
			НоваяСтрока.СрокЧасы = РеквизитыШаблона.СрокИсполненияЧасы;
			НоваяСтрока.Участник = АлгоритмПоАвтоподстановкеИлиИсполнитель(
				РеквизитыШаблона.Исполнитель, 
				РеквизитыШаблона.Предметы.Выгрузить());		
			НоваяСтрока.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;		
		КонецЕсли;			
	Иначе    	
	
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,
			"Наименование, Автор, Важность, Описание, Ответственный, ВладелецШаблона,
			|ШаблонВКомплексномПроцессе, СрокИсполненияПроцесса, Контролер, ВариантИсполнения,
			|ВариантУстановкиСрокаОбработкиРезультатов, СрокОбработкиРезультатов, СрокОбработкиРезультатовДни,
			|СрокОбработкиРезультатовМинуты, СрокОбработкиРезультатовЧасы,
			|Исполнители, Проверяющий, Предметы, СрокОтложенногоСтарта");
		Исполнители = РеквизитыШаблона.Исполнители.Выгрузить();
		ЗаполнитьЗначенияСвойств(НастройкаДействиеОбъект, РеквизитыШаблона, , "Наименование");
		НастройкаДействиеОбъект.ОтложенноеНачалоВыполнения = РеквизитыШаблона.СрокОтложенногоСтарта;

		Для Каждого ИсполнительПроцесса Из Исполнители Цикл			
			НоваяСтрока = НастройкаДействиеОбъект.Участники.Добавить();
			НоваяСтрока.ВариантУстановкиСрока = ИсполнительПроцесса.ВариантУстановкиСрокаИсполнения;
			НоваяСтрока.Описание = ИсполнительПроцесса.Описание;
			НоваяСтрока.НаименованиеЗадачи = ИсполнительПроцесса.НаименованиеЗадачи;
			НоваяСтрока.Ответственный = ИсполнительПроцесса.Ответственный;
			НоваяСтрока.Срок = ИсполнительПроцесса.СрокИсполнения;
			НоваяСтрока.СрокДни = ИсполнительПроцесса.СрокИсполненияДни;
			НоваяСтрока.СрокМинуты = ИсполнительПроцесса.СрокИсполненияМинуты;
			НоваяСтрока.СрокЧасы = ИсполнительПроцесса.СрокИсполненияЧасы;
			НоваяСтрока.Участник = АлгоритмПоАвтоподстановкеИлиИсполнитель(
				ИсполнительПроцесса.Исполнитель, 
				РеквизитыШаблона.Предметы.Выгрузить());
			НоваяСтрока.Условие = ИсполнительПроцесса.Условие;		
			НоваяСтрока.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(РеквизитыШаблона.Проверяющий) Тогда			
			НоваяСтрока = НастройкаДействиеОбъект.Участники.Добавить();
			НоваяСтрока.ВариантУстановкиСрока = РеквизитыШаблона.ВариантУстановкиСрокаОбработкиРезультатов;
			НоваяСтрока.Срок = РеквизитыШаблона.СрокОбработкиРезультатов;
			НоваяСтрока.СрокДни = РеквизитыШаблона.СрокОбработкиРезультатовДни;
			НоваяСтрока.СрокМинуты = РеквизитыШаблона.СрокОбработкиРезультатовМинуты;
			НоваяСтрока.СрокЧасы = РеквизитыШаблона.СрокОбработкиРезультатовЧасы;
			НоваяСтрока.Участник = РеквизитыШаблона.Проверяющий;
			НоваяСтрока.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат;
		КонецЕсли
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		НастройкаДействиеОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	НастройкаДействиеОбъект.Записать();

	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			НастройкаДействиеОбъект.Ссылка,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НастройкаДействиеОбъект.Ссылка)));
	КонецЕсли;

	Возврат НастройкаДействиеОбъект.Ссылка;
			    			
КонецФункции

Функция НастройкаДействияСогласованиеПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки)

	СсылкаНастройки = Справочники.НастройкиДействийСогласования.ПолучитьСсылку(Шаблон.УникальныйИдентификатор());
	
	Блокировка = Новый БлокировкаДанных();
	Блокировка.Добавить("Справочник.НастройкиДействийСогласования").УстановитьЗначение("Ссылка", СсылкаНастройки);
	Блокировка.Заблокировать();
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНастройки) Тогда
		НастройкаДействиеОбъект = СсылкаНастройки.ПолучитьОбъект();
	Иначе	 
    	НастройкаДействиеОбъект = Справочники.НастройкиДействийСогласования.СоздатьЭлемент();
    	НастройкаДействиеОбъект.УстановитьСсылкуНового(СсылкаНастройки);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НастройкаДействиеОбъект.ВидДействия) Тогда
		НастройкаДействиеОбъект.ВидДействия = ВидДействия
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НастройкаДействиеОбъект.ПорядокВыполненияУчастниками) Тогда
		НастройкаДействиеОбъект.ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно;
	КонецЕсли;
	НастройкаДействиеОбъект.МоментРазыменованияУчастников = 
		Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия;
	НастройкаДействиеОбъект.Создал = Сотрудники.ОсновнойСотрудник();
	НастройкаДействиеОбъект.ВозможностьИзменятьУчастников = 
		Перечисления.ВариантыДоступностиИзмененияДействий.Разрешено;
	НастройкаДействиеОбъект.ФормироватьВизы = Истина;
	НастройкаДействиеОбъект.Участники.Очистить();
	НастройкаДействиеОбъект.Этапы.Очистить();
		
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,
		"Наименование, Важность, Описание, Ответственный, ВладелецШаблона,
		|ШаблонВКомплексномПроцессе, СрокИсполненияПроцесса, 
		|ВариантУстановкиСрокаОбработкиРезультатов, СрокОбработкиРезультатов, СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовМинуты, СрокОбработкиРезультатовЧасы,
		|Исполнители, ОбрабатывающийРезультат, Предметы, ВариантСогласования,
		|СрокОтложенногоСтарта");
	Исполнители = РеквизитыШаблона.Исполнители.Выгрузить();
	ЗаполнитьЗначенияСвойств(НастройкаДействиеОбъект, РеквизитыШаблона, , "Наименование");
	НастройкаДействиеОбъект.ОтложенноеНачалоВыполнения = РеквизитыШаблона.СрокОтложенногоСтарта;
	
	Исполнители.Колонки.Добавить("Шаг");
	ИдентификаторЭтапа = УникальныйИдентификаторПустой();
	ИдентификаторыЭтапов = Новый Соответствие();
	Если РеквизитыШаблона.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Исполнители);
		НомерЭтапа = 1;
		Для Каждого ИсполнительПроцесса Из Исполнители Цикл
			Если ИдентификаторыЭтапов.Получить(ИсполнительПроцесса.Шаг) = Неопределено Тогда
				ЭтапУчастников = НастройкаДействиеОбъект.Этапы.Добавить();
				ЭтапУчастников.ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно;
				ЭтапУчастников.НаименованиеЭтапа = СтрШаблон(
					НСтр("ru = 'Согласовать (шаг %1)'"), СокрЛП(НомерЭтапа));
				ЭтапУчастников.Идентификатор = Новый УникальныйИдентификатор();
				
				ИдентификаторыЭтапов.Вставить(ИсполнительПроцесса.Шаг, ЭтапУчастников.Идентификатор);
				НомерЭтапа = НомерЭтапа + 1;
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли РеквизитыШаблона.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		ЭтапУчастников = НастройкаДействиеОбъект.Этапы.Добавить();
		ЭтапУчастников.ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно;
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Согласовать'");
		ИдентификаторЭтапа = Новый УникальныйИдентификатор();
		ЭтапУчастников.Идентификатор = ИдентификаторЭтапа;
		
	КонецЕсли;			

	Для Каждого ИсполнительПроцесса Из Исполнители Цикл			
		НоваяСтрока = НастройкаДействиеОбъект.Участники.Добавить();
		НоваяСтрока.ВариантУстановкиСрока = ИсполнительПроцесса.ВариантУстановкиСрокаИсполнения;
		НоваяСтрока.Срок = ИсполнительПроцесса.СрокИсполнения;
		НоваяСтрока.СрокДни = ИсполнительПроцесса.СрокИсполненияДни;
		НоваяСтрока.СрокМинуты = ИсполнительПроцесса.СрокИсполненияМинуты;
		НоваяСтрока.СрокЧасы = ИсполнительПроцесса.СрокИсполненияЧасы;
		НоваяСтрока.Участник = АлгоритмПоАвтоподстановкеИлиИсполнитель(
			ИсполнительПроцесса.Исполнитель, 
			РеквизитыШаблона.Предметы.Выгрузить());		
		НоваяСтрока.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий;
		НоваяСтрока.Условие = ИсполнительПроцесса.Условие;
		
		Если ИсполнительПроцесса.Шаг = Неопределено Тогда
			НоваяСтрока.ИдентификаторЭтапа = ИдентификаторЭтапа;
			
		Иначе
			ИдентификаторЭтапа = ИдентификаторыЭтапов.Получить(ИсполнительПроцесса.Шаг);
			Если ИдентификаторЭтапа <> Неопределено Тогда
				НоваяСтрока.ИдентификаторЭтапа = ИдентификаторЭтапа;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(РеквизитыШаблона.ОбрабатывающийРезультат) Тогда			
		НоваяСтрока = НастройкаДействиеОбъект.Участники.Добавить();
		НоваяСтрока.ВариантУстановкиСрока = РеквизитыШаблона.ВариантУстановкиСрокаОбработкиРезультатов;
		НоваяСтрока.Срок = РеквизитыШаблона.СрокОбработкиРезультатов;
		НоваяСтрока.СрокДни = РеквизитыШаблона.СрокОбработкиРезультатовДни;
		НоваяСтрока.СрокМинуты = РеквизитыШаблона.СрокОбработкиРезультатовМинуты;
		НоваяСтрока.СрокЧасы = РеквизитыШаблона.СрокОбработкиРезультатовЧасы;
		НоваяСтрока.Участник = РеквизитыШаблона.ОбрабатывающийРезультат;
		НоваяСтрока.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		НастройкаДействиеОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	НастройкаДействиеОбъект.Записать();

	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			НастройкаДействиеОбъект.Ссылка,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НастройкаДействиеОбъект.Ссылка)));
	КонецЕсли;

	Возврат НастройкаДействиеОбъект.Ссылка;
			    			
КонецФункции

Функция НастройкаДействияОзнакомлениеПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки)

	СсылкаНастройки = Справочники.НастройкиДействийОзнакомления.ПолучитьСсылку(Шаблон.УникальныйИдентификатор());
	
	Блокировка = Новый БлокировкаДанных();
	Блокировка.Добавить("Справочник.НастройкиДействийОзнакомления").УстановитьЗначение("Ссылка", СсылкаНастройки);
	Блокировка.Заблокировать();
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНастройки) Тогда
		НастройкаДействиеОбъект = СсылкаНастройки.ПолучитьОбъект();
	Иначе	 
    	НастройкаДействиеОбъект = Справочники.НастройкиДействийОзнакомления.СоздатьЭлемент();
    	НастройкаДействиеОбъект.УстановитьСсылкуНового(СсылкаНастройки);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НастройкаДействиеОбъект.ВидДействия) Тогда
		НастройкаДействиеОбъект.ВидДействия = ВидДействия
	КонецЕсли;
	НастройкаДействиеОбъект.МоментРазыменованияУчастников = 
		Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия;
	НастройкаДействиеОбъект.Создал = Сотрудники.ОсновнойСотрудник();
	НастройкаДействиеОбъект.ВозможностьИзменятьУчастников = 
		Перечисления.ВариантыДоступностиИзмененияДействий.Разрешено;
	НастройкаДействиеОбъект.Участники.Очистить();

	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,
		"Наименование, Автор, Важность, Описание, ВладелецШаблона,
		|ШаблонВКомплексномПроцессе, СрокИсполненияПроцесса, 
		|Исполнители, Предметы, СрокОтложенногоСтарта");
	Исполнители = РеквизитыШаблона.Исполнители.Выгрузить();
	ЗаполнитьЗначенияСвойств(НастройкаДействиеОбъект, РеквизитыШаблона, , "Наименование");
	НастройкаДействиеОбъект.ОтложенноеНачалоВыполнения = РеквизитыШаблона.СрокОтложенногоСтарта;
	
	Для Каждого ИсполнительПроцесса Из Исполнители Цикл			
		НоваяСтрока = НастройкаДействиеОбъект.Участники.Добавить();
		НоваяСтрока.ВариантУстановкиСрока = ИсполнительПроцесса.ВариантУстановкиСрокаИсполнения;
		НоваяСтрока.Срок = ИсполнительПроцесса.СрокИсполнения;
		НоваяСтрока.СрокДни = ИсполнительПроцесса.СрокИсполненияДни;
		НоваяСтрока.СрокМинуты = ИсполнительПроцесса.СрокИсполненияМинуты;
		НоваяСтрока.СрокЧасы = ИсполнительПроцесса.СрокИсполненияЧасы;
		НоваяСтрока.Участник = АлгоритмПоАвтоподстановкеИлиИсполнитель(
			ИсполнительПроцесса.Исполнитель, 
			РеквизитыШаблона.Предметы.Выгрузить());
		НоваяСтрока.Условие = ИсполнительПроцесса.Условие;		
	КонецЦикла;

	Если ПараметрыЗагрузки.Загрузка Тогда
		НастройкаДействиеОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	НастройкаДействиеОбъект.Записать();

	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			НастройкаДействиеОбъект.Ссылка,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НастройкаДействиеОбъект.Ссылка)));
	КонецЕсли;

	Возврат НастройкаДействиеОбъект.Ссылка;
			    			
КонецФункции

Функция НастройкаДействияРегистрацияПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки)

	СсылкаНастройки = Справочники.НастройкиДействийРегистрации.ПолучитьСсылку(Шаблон.УникальныйИдентификатор());
	
	Блокировка = Новый БлокировкаДанных();
	Блокировка.Добавить("Справочник.НастройкиДействийРегистрации").УстановитьЗначение("Ссылка", СсылкаНастройки);
	Блокировка.Заблокировать();
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНастройки) Тогда
		НастройкаДействиеОбъект = СсылкаНастройки.ПолучитьОбъект();
	Иначе	 
    	НастройкаДействиеОбъект = Справочники.НастройкиДействийРегистрации.СоздатьЭлемент();
    	НастройкаДействиеОбъект.УстановитьСсылкуНового(СсылкаНастройки);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НастройкаДействиеОбъект.ВидДействия) Тогда
		НастройкаДействиеОбъект.ВидДействия = ВидДействия
	КонецЕсли;
	НастройкаДействиеОбъект.МоментРазыменованияУчастников = 
		Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия;
	НастройкаДействиеОбъект.Создал = Сотрудники.ОсновнойСотрудник();
	НастройкаДействиеОбъект.ВозможностьИзменятьУчастников = 
		Перечисления.ВариантыДоступностиИзмененияДействий.Разрешено;
	НастройкаДействиеОбъект.Участники.Очистить();

	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,
		"Наименование, Важность, Описание, ВладелецШаблона,
		|ШаблонВКомплексномПроцессе, СрокИсполненияПроцесса,
		|СрокИсполнения, СрокИсполненияДни, СрокИсполненияМинуты, СрокИсполненияЧасы, ВариантУстановкиСрокаИсполнения,
		|ВариантУстановкиСрокаОбработкиРезультатов, СрокОбработкиРезультатов, СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовМинуты, СрокОбработкиРезультатовЧасы, 
		|Исполнитель, ОбрабатывающийРезультат, Предметы, СрокОтложенногоСтарта");
	ЗаполнитьЗначенияСвойств(НастройкаДействиеОбъект, РеквизитыШаблона, , "Наименование");
	НастройкаДействиеОбъект.ОтложенноеНачалоВыполнения = РеквизитыШаблона.СрокОтложенногоСтарта;
	
	Если ЗначениеЗаполнено(РеквизитыШаблона.Исполнитель) 
		Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполнения) 
		Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполненияДни) 
		Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполненияМинуты)
		Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполненияЧасы) Тогда
		НоваяСтрока = НастройкаДействиеОбъект.Участники.Добавить();
		НоваяСтрока.ВариантУстановкиСрока = РеквизитыШаблона.ВариантУстановкиСрокаИсполнения;
		НоваяСтрока.Описание = РеквизитыШаблона.Описание;
		НоваяСтрока.Срок = РеквизитыШаблона.СрокИсполнения;
		НоваяСтрока.СрокДни = РеквизитыШаблона.СрокИсполненияДни;
		НоваяСтрока.СрокМинуты = РеквизитыШаблона.СрокИсполненияМинуты;
		НоваяСтрока.СрокЧасы = РеквизитыШаблона.СрокИсполненияЧасы;
		НоваяСтрока.Участник = АлгоритмПоАвтоподстановкеИлиИсполнитель(
			РеквизитыШаблона.Исполнитель, 
			РеквизитыШаблона.Предметы.Выгрузить());
		НоваяСтрока.ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.Регистратор;			
	КонецЕсли;
		
	Если ЗначениеЗаполнено(РеквизитыШаблона.ОбрабатывающийРезультат) Тогда			
		НоваяСтрока = НастройкаДействиеОбъект.Участники.Добавить();
		НоваяСтрока.ВариантУстановкиСрока = РеквизитыШаблона.ВариантУстановкиСрокаОбработкиРезультатов;
		НоваяСтрока.Срок = РеквизитыШаблона.СрокОбработкиРезультатов;
		НоваяСтрока.СрокДни = РеквизитыШаблона.СрокОбработкиРезультатовДни;
		НоваяСтрока.СрокМинуты = РеквизитыШаблона.СрокОбработкиРезультатовМинуты;
		НоваяСтрока.СрокЧасы = РеквизитыШаблона.СрокОбработкиРезультатовЧасы;
		НоваяСтрока.Участник = РеквизитыШаблона.ОбрабатывающийРезультат;
		НоваяСтрока.ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат;
	КонецЕсли;

	Если ПараметрыЗагрузки.Загрузка Тогда
		НастройкаДействиеОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	НастройкаДействиеОбъект.Записать();

	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			НастройкаДействиеОбъект.Ссылка,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НастройкаДействиеОбъект.Ссылка)));
	КонецЕсли;

	Возврат НастройкаДействиеОбъект.Ссылка;
			    			
КонецФункции

Функция НастройкаДействияПодписаниеПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки)

	СсылкаНастройки = Справочники.НастройкиДействийПодписания.ПолучитьСсылку(Шаблон.УникальныйИдентификатор());
	
	Блокировка = Новый БлокировкаДанных();
	Блокировка.Добавить("Справочник.НастройкиДействийПодписания").УстановитьЗначение("Ссылка", СсылкаНастройки);
	Блокировка.Заблокировать();
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНастройки) Тогда
		НастройкаДействиеОбъект = СсылкаНастройки.ПолучитьОбъект();
	Иначе	 
    	НастройкаДействиеОбъект = Справочники.НастройкиДействийПодписания.СоздатьЭлемент();
    	НастройкаДействиеОбъект.УстановитьСсылкуНового(СсылкаНастройки);
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(НастройкаДействиеОбъект.ВидДействия) Тогда
		НастройкаДействиеОбъект.ВидДействия = ВидДействия
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НастройкаДействиеОбъект.ПорядокВыполненияУчастниками) Тогда
		НастройкаДействиеОбъект.ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно;
	КонецЕсли;
	НастройкаДействиеОбъект.МоментРазыменованияУчастников = 
		Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия;
	НастройкаДействиеОбъект.Создал = Сотрудники.ОсновнойСотрудник();
	НастройкаДействиеОбъект.ВозможностьИзменятьУчастников = 
		Перечисления.ВариантыДоступностиИзмененияДействий.Разрешено;
	НастройкаДействиеОбъект.СпособПодписания = 
		Перечисления.СпособыПодписанияПредметаДействия.НаБумаге;
	НастройкаДействиеОбъект.Участники.Очистить();

	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,
		"Наименование, Важность, Описание, ВладелецШаблона,
		|ШаблонВКомплексномПроцессе, СрокИсполненияПроцесса,
		|Участники, Предметы, СрокОтложенногоСтарта");
	ЗаполнитьЗначенияСвойств(НастройкаДействиеОбъект, РеквизитыШаблона, , "Наименование");
	Исполнители = РеквизитыШаблона.Участники.Выгрузить();
	НастройкаДействиеОбъект.ОтложенноеНачалоВыполнения = РеквизитыШаблона.СрокОтложенногоСтарта;

	Для Каждого ИсполнительПроцесса Из Исполнители Цикл
		
		Если ИсполнительПроцесса.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат Тогда
			ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат;
		Иначе
			ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий;
		КонецЕсли;
		// Обрабатывающего результат не добавляем, если он не был задан в шаблоне
		Если ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат
			И Не ЗначениеЗаполнено(ИсполнительПроцесса.Участник) Тогда
			Продолжить;
		КонецЕсли;
					
		НоваяСтрока = НастройкаДействиеОбъект.Участники.Добавить();
		НоваяСтрока.ВариантУстановкиСрока = ИсполнительПроцесса.ВариантУстановкиСрокаИсполнения;
		НоваяСтрока.Срок = ИсполнительПроцесса.СрокИсполнения;
		НоваяСтрока.СрокДни = ИсполнительПроцесса.СрокИсполненияДни;
		НоваяСтрока.СрокМинуты = ИсполнительПроцесса.СрокИсполненияМинуты;
		НоваяСтрока.СрокЧасы = ИсполнительПроцесса.СрокИсполненияЧасы;
		НоваяСтрока.Участник = АлгоритмПоАвтоподстановкеИлиИсполнитель(
			ИсполнительПроцесса.Участник, 
			РеквизитыШаблона.Предметы.Выгрузить());
		НоваяСтрока.Условие = ИсполнительПроцесса.Условие;
		Если ИсполнительПроцесса.Идентификатор = УникальныйИдентификаторПустой() Тогда
			НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор();
		Иначе
			НоваяСтрока.Идентификатор = ИсполнительПроцесса.Идентификатор;
		КонецЕсли;
		
		НоваяСтрока.ФункцияУчастника = ФункцияУчастника
	
	КонецЦикла;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		НастройкаДействиеОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	НастройкаДействиеОбъект.Записать();

	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			НастройкаДействиеОбъект.Ссылка,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НастройкаДействиеОбъект.Ссылка)));
	КонецЕсли;

	Возврат НастройкаДействиеОбъект.Ссылка;
	
КонецФункции

Функция НастройкаДействияУтверждениеПоШаблону(Шаблон, ВидДействия, ПараметрыЗагрузки)

	СсылкаНастройки = Справочники.НастройкиДействийУтверждения.ПолучитьСсылку(Шаблон.УникальныйИдентификатор());
	
	Блокировка = Новый БлокировкаДанных();
	Блокировка.Добавить("Справочник.НастройкиДействийУтверждения").УстановитьЗначение("Ссылка", СсылкаНастройки);
	Блокировка.Заблокировать();
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНастройки) Тогда
		НастройкаДействиеОбъект = СсылкаНастройки.ПолучитьОбъект();
	Иначе	 
    	НастройкаДействиеОбъект = Справочники.НастройкиДействийУтверждения.СоздатьЭлемент();
    	НастройкаДействиеОбъект.УстановитьСсылкуНового(СсылкаНастройки);
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(НастройкаДействиеОбъект.ВидДействия) Тогда
		НастройкаДействиеОбъект.ВидДействия = ВидДействия
	КонецЕсли;
	НастройкаДействиеОбъект.МоментРазыменованияУчастников = 
		Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия;
	НастройкаДействиеОбъект.Создал = Сотрудники.ОсновнойСотрудник();
	НастройкаДействиеОбъект.ВозможностьИзменятьУчастников = 
		Перечисления.ВариантыДоступностиИзмененияДействий.Разрешено;
	НастройкаДействиеОбъект.Участники.Очистить();

	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,
		"Наименование, Важность, Описание, ВладелецШаблона,
		|ШаблонВКомплексномПроцессе, СрокИсполненияПроцесса,
		|СрокИсполнения, СрокИсполненияДни, СрокИсполненияМинуты, СрокИсполненияЧасы, ВариантУстановкиСрокаИсполнения,
		|ВариантУстановкиСрокаОбработкиРезультатов, СрокОбработкиРезультатов, СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовМинуты, СрокОбработкиРезультатовЧасы, 
		|Исполнитель, ОбрабатывающийРезультат, Предметы, СрокОтложенногоСтарта");
	ЗаполнитьЗначенияСвойств(НастройкаДействиеОбъект, РеквизитыШаблона, , "Наименование");
	НастройкаДействиеОбъект.ОтложенноеНачалоВыполнения = РеквизитыШаблона.СрокОтложенногоСтарта;

	Если ЗначениеЗаполнено(РеквизитыШаблона.Исполнитель) 
		Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполнения) 
		Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполненияДни) 
		Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполненияМинуты)
		Или ЗначениеЗаполнено(РеквизитыШаблона.СрокИсполненияЧасы) Тогда
		НоваяСтрока = НастройкаДействиеОбъект.Участники.Добавить();
		НоваяСтрока.ВариантУстановкиСрока = РеквизитыШаблона.ВариантУстановкиСрокаИсполнения;
		НоваяСтрока.Описание = РеквизитыШаблона.Описание;
		НоваяСтрока.Срок = РеквизитыШаблона.СрокИсполнения;
		НоваяСтрока.СрокДни = РеквизитыШаблона.СрокИсполненияДни;
		НоваяСтрока.СрокМинуты = РеквизитыШаблона.СрокИсполненияМинуты;
		НоваяСтрока.СрокЧасы = РеквизитыШаблона.СрокИсполненияЧасы;
		НоваяСтрока.Участник = АлгоритмПоАвтоподстановкеИлиИсполнитель(
			РеквизитыШаблона.Исполнитель, 
			РеквизитыШаблона.Предметы.Выгрузить());
		НоваяСтрока.ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;			
	КонецЕсли;
		
	Если ЗначениеЗаполнено(РеквизитыШаблона.ОбрабатывающийРезультат) Тогда			
		НоваяСтрока = НастройкаДействиеОбъект.Участники.Добавить();
		НоваяСтрока.ВариантУстановкиСрока = РеквизитыШаблона.ВариантУстановкиСрокаОбработкиРезультатов;
		НоваяСтрока.Срок = РеквизитыШаблона.СрокОбработкиРезультатов;
		НоваяСтрока.СрокДни = РеквизитыШаблона.СрокОбработкиРезультатовДни;
		НоваяСтрока.СрокМинуты = РеквизитыШаблона.СрокОбработкиРезультатовМинуты;
		НоваяСтрока.СрокЧасы = РеквизитыШаблона.СрокОбработкиРезультатовЧасы;
		НоваяСтрока.Участник = РеквизитыШаблона.ОбрабатывающийРезультат;
		НоваяСтрока.ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.ОбрабатывающийРезультат;
	КонецЕсли;

	Если ПараметрыЗагрузки.Загрузка Тогда
		НастройкаДействиеОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	НастройкаДействиеОбъект.Записать();

	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			НастройкаДействиеОбъект.Ссылка,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НастройкаДействиеОбъект.Ссылка)));
	КонецЕсли;

	Возврат НастройкаДействиеОбъект.Ссылка;
			    			
КонецФункции

Функция МинимальнаяДатаДействияНастроек(ВидОбъекта)
	
	ДатаДействияНастроек = ТекущаяДатаСеанса() + 86400;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(НастройкиОбработкиВидовОбъектов.ДействуетС) КАК ДействуетС
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта = &ВидОбъекта";
	Запрос.Параметры.Вставить("ВидОбъекта", ВидОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДействуетС) Тогда
			ДатаДействияНастроек = Выборка.ДействуетС;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДатаДействияНастроек;
	
Конецфункции

#КонецОбласти

#Область АтомарныеПроцессы

Процедура КонвертацияПроцессаУтверждение(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Источник.ВидПроцесса <> "Подписание" Тогда
		Если Порция.Колонки.Найти("ОбрабатывающийРезультат") = Неопределено Тогда 
			Порция.Колонки.Добавить("ОбрабатывающийРезультат");
		КонецЕсли;
		Источник.ОбрабатывающийРезультат = Источник.Автор;
		
		УстановитьИдентификаторыУчастниковПроцессаУтверждениеРегистрация(Источник);
		КонвертацияАтомарногоПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Источник.ВедущаяЗадача) Тогда
		ЗаменитьЗадачиЭлементовВКомплексныхПроцессов(
			ВедущаяЗадачаНесуществующегоПроцесса(Источник.Ссылка),
			Источник.ВедущаяЗадача,
			ПараметрыЗагрузки.Загрузка,
			ПараметрыЗагрузки.ПричинаЗагрузки);
	КонецЕсли;

	Источник.УзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	МассивСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник);
	ПорцияОдинЭлемент = Порция.Скопировать(МассивСтрок);
	ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(Источник.Ссылка);
	ПараметрыЗагрузки.Изменение = Новый Структура("ЭтоНовый, Удаление", ЭтоНовый, Ложь);
	
	ПредыдущиеЗначенияРеквизитов = Неопределено;
	ЭтоУдалениеОбъекта = ЭтоУдалениеОбъекта(Источник);
	
	СсылкаНаОбъект = 
		БизнесПроцессы.Подписание.ПолучитьСсылку(Источник.Ссылка.УникальныйИдентификатор());
		
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("БизнесПроцесс.Подписание").УстановитьЗначение("Ссылка", СсылкаНаОбъект);
	Блокировка.Заблокировать();
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект) Тогда
		ПроцессОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		ПредыдущиеЗначенияРеквизитов = ДанныеПроцесса(ПроцессОбъект);
	Иначе
		Если ЭтоУдалениеОбъекта Тогда
			Возврат;
		КонецЕсли;
		
		ПроцессОбъект = БизнесПроцессы.Подписание.СоздатьБизнесПроцесс();
		ПроцессОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
	КонецЕсли;
	
	Если Не ЭтоУдалениеОбъекта Тогда
		УчастникиТекущаяВерсия = ПроцессОбъект.Участники.Выгрузить();
		ПроцессОбъект.Участники.Очистить();
		
		ПереносимыеРеквизиты =
			"Дата, ВедущаяЗадача, ПометкаУдаления, Стартован, Завершен, Важность, ГлавнаяЗадача, ДатаЗавершения,
			|ДатаНачала, КоличествоИтераций, Наименование, НомерИтерации, Описание, ПричинаПрерывания, Проект,
			|ПроектнаяЗадача, Состояние, СрокИсполненияПроцесса";
		ЗаполнитьЗначенияСвойств(ПроцессОбъект, Источник, ПереносимыеРеквизиты);
		
		// Автор.
		ПроцессОбъект.Автор = Источник.Автор;
		
		// Результат подписания.
		Если Источник.РезультатУтверждения = 
			Перечисления.РезультатыУтверждения.Утверждено Тогда
			
			ПроцессОбъект.РезультатПодписания = 
				Перечисления.РезультатыПроцессаПодписания.Подписано;
		
		ИначеЕсли Источник.РезультатУтверждения = 
			Перечисления.РезультатыУтверждения.НеУтверждено Тогда
				
			ПроцессОбъект.РезультатПодписания = 
				Перечисления.РезультатыПроцессаПодписания.НеПодписано;
				
		Иначе
			ПроцессОбъект.РезультатПодписания = Неопределено;
		КонецЕсли;
		
		// Способ подписания.
		ПроцессОбъект.СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.ПЭП;
		Если Источник.ПодписыватьЭП Тогда
			ПроцессОбъект.СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.УЭП;
		КонецЕсли;
			
		// Шаблон.
		Если ЗначениеЗаполнено(Источник.Шаблон) Тогда
			ИдентификаторШаблона = Источник.Шаблон.УникальныйИдентификатор();
			
			ПроцессОбъект.Шаблон =
				Справочники.ШаблоныПодписания.ПолучитьСсылку(ИдентификаторШаблона); 
		КонецЕсли;
		
		// Участники (подписывающий).
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Участник", Источник.Исполнитель);
		СтруктураПоиска.Вставить("ТочкаМаршрута", БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать);
		
		СтрокиУчастникаТекущаяВерсия = УчастникиТекущаяВерсия.НайтиСтроки(СтруктураПоиска);
		
		СтрокаУчастника = ПроцессОбъект.Участники.Добавить();
		Если СтрокиУчастникаТекущаяВерсия.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаУчастника, СтруктураПоиска);
			СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор();
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаУчастника, СтрокиУчастникаТекущаяВерсия[0]);
		КонецЕсли;
		
		СтрокаУчастника.Подписывающий = СтрокаУчастника.Участник;
		СтрокаУчастника.ВариантУстановкиСрокаИсполнения = Источник.ВариантУстановкиСрокаИсполнения;	
		СтрокаУчастника.СрокИсполнения = Источник.СрокИсполнения;
		СтрокаУчастника.СрокИсполненияДни = Источник.СрокИсполненияДни;
		СтрокаУчастника.СрокИсполненияЧасы = Источник.СрокИсполненияЧасы;
		СтрокаУчастника.СрокИсполненияМинуты = Источник.СрокИсполненияМинуты;
		СтрокаУчастника.ТрудозатратыПлан = Источник.ТрудозатратыПланИсполнителя;
		СтрокаУчастника.Пройден = ЗначениеЗаполнено(Источник.РезультатУтверждения);
		
		ПроцессОбъект.РезультатыПодписания.Очистить();
		Если ЗначениеЗаполнено(Источник.РезультатыУтверждения) Тогда
			Для Каждого ОписаниеРезультата Из Источник.РезультатыУтверждения Цикл
				СтрокаРезультата = ПроцессОбъект.РезультатыПодписания.Добавить();
				СтрокаРезультата.ЗадачаПроцесса = ОписаниеРезультата.ЗадачаИсполнителя;
				СтрокаРезультата.Идентификатор = СтрокаУчастника.Идентификатор;
				СтрокаРезультата.НомерИтерации = ОписаниеРезультата.НомерИтерации;
				
				Если ОписаниеРезультата.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
					СтрокаРезультата.РезультатПодписания = Перечисления.РезультатыПроцессаПодписания.Подписано;
				ИначеЕсли ОписаниеРезультата.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
					СтрокаРезультата.РезультатПодписания = Перечисления.РезультатыПроцессаПодписания.НеПодписано;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Участники (обрабатывающий результат).
		СтрокаУчастникаТекущаяВерсия =
			УчастникиТекущаяВерсия.Найти(БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат, "ТочкаМаршрута");
		
		СтрокаУчастника = ПроцессОбъект.Участники.Добавить();
		Если СтрокаУчастникаТекущаяВерсия = Неопределено Тогда
			СтрокаУчастника.ТочкаМаршрута = 
				БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат;
			СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор();
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаУчастника, СтрокаУчастникаТекущаяВерсия);
		КонецЕсли;
		
		СтрокаУчастника.Подписывающий = ПроцессОбъект.Автор;
		СтрокаУчастника.Участник = ПроцессОбъект.Автор;
		СтрокаУчастника.ВариантУстановкиСрокаИсполнения = Источник.ВариантУстановкиСрокаОбработкиРезультатов;
		СтрокаУчастника.СрокИсполнения = Источник.СрокОбработкиРезультатов;
		СтрокаУчастника.СрокИсполненияДни = Источник.СрокОбработкиРезультатовДни;
		СтрокаУчастника.СрокИсполненияЧасы = Источник.СрокОбработкиРезультатовЧасы;
		СтрокаУчастника.СрокИсполненияМинуты = Источник.СрокОбработкиРезультатовМинуты;
		СтрокаУчастника.ТрудозатратыПлан = Источник.ТрудозатратыПланАвтора;
		
		ПроцессОбъект.РезультатыОбработок.Очистить();
		Если ЗначениеЗаполнено(Источник.РезультатыОзнакомлений) Тогда
			Для Каждого ОписаниеРезультата Из Источник.РезультатыОзнакомлений Цикл
				СтрокаРезультата = ПроцессОбъект.РезультатыОбработок.Добавить();
				СтрокаРезультата.ЗадачаПроцесса = ОписаниеРезультата.ЗадачаИсполнителя;
				СтрокаРезультата.ОтправленоНаПовторноеПодписание = ОписаниеРезультата.ОтправленоНаПовторноеУтверждение;
				СтрокаРезультата.НомерИтерации = ОписаниеРезультата.НомерИтерации;
			КонецЦикла;
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(Источник.Предметы) Тогда
			ПроцессОбъект.Предметы.Очистить();
			Для Каждого СтрокаТаблицы Из Источник.Предметы Цикл
				ЗаполнитьЗначенияСвойств(ПроцессОбъект.Предметы.Добавить(), СтрокаТаблицы); 
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ПредметыЗадач) Тогда
			ПроцессОбъект.ПредметыЗадач.Очистить();
			
			Для Каждого СтрокаТаблицы Из Источник.ПредметыЗадач Цикл
				СтрокаПредмета = ПроцессОбъект.ПредметыЗадач.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаПредмета, СтрокаТаблицы,, "ТочкаМаршрута");
				ЗаменитьТочкиМаршрутаПроцессаУтверждениеТочкамиПроцессаПодписание(СтрокаТаблицы, "ТочкаМаршрута");
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ДополнительныеРеквизиты) Тогда
			ПроцессОбъект.ДополнительныеРеквизиты.Очистить();
			Для Каждого СтрокаТаблицы Из Источник.ДополнительныеРеквизиты Цикл
				ЗаполнитьЗначенияСвойств(ПроцессОбъект.ДополнительныеРеквизиты.Добавить(), СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
	Иначе
		ПроцессОбъект.ПометкаУдаления = Истина;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		ПроцессОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	ЭтоПерваяЗагрузка = ПроцессОбъект.ЭтоНовый();
	
	ПроцессОбъект.Записать();

	Приемник = ПроцессОбъект.Ссылка;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			Приемник,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Приемник)));
	КонецЕсли;
	
	Если ЭтоПерваяЗагрузка Тогда
		ЗаменитьСсылкиПроцессаИсточникаНаСсылкуПроцессаПриемника(
			Источник.Ссылка,
			СсылкаНаОбъект,
			ПараметрыЗагрузки);
	КонецЕсли;
	
	ОбновитьОтметкиВыполненияПроцессаОбработкиДокументаПоВложенномуПроцессу(
		Источник,
		ЭтоПерваяЗагрузка,
		ПараметрыЗагрузки.Загрузка,
		ПараметрыЗагрузки.ПричинаЗагрузки);

	ДействияДляОбработки = СвязатьПроцессСДействиемОбработки(
		ОписаниеПроцессаДляДействияОбработки(Приемник, ПредыдущиеЗначенияРеквизитов), 
		ПараметрыЗагрузки);
		
	Если ЗначениеЗаполнено(ДействияДляОбработки) Тогда
		ОбновитьДействия(ДействияДляОбработки, ПараметрыЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияПроцессаСогласования(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Порция.Колонки.Найти("ОбрабатывающийРезультат") = Неопределено Тогда 
		Порция.Колонки.Добавить("ОбрабатывающийРезультат");
	КонецЕсли;
	Источник.ОбрабатывающийРезультат = Источник.Автор;
	
	УстановитьИдентификаторыУчастниковПроцессов(Источник);
	КонвертацияАтомарногоПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура КонвертацияПроцессаИсполнение(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)

	Если ПараметрыЗагрузки.ИмяИсточникаОригинальное = "БизнесПроцесс.Поручение" Тогда
		КонвертацияПроцессаПоручение(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
		Возврат;
	КонецЕсли;
	
	УстановитьИдентификаторыУчастниковПроцессов(Источник);
	КонвертацияАтомарногоПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура КонвертацияПроцессаОзнакомление(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	УстановитьИдентификаторыУчастниковПроцессов(Источник);
	КонвертацияАтомарногоПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
КонецПроцедуры

Процедура КонвертацияПроцессаПриглашение(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)

	УстановитьИдентификаторыУчастниковПроцессов(Источник);
	КонвертацияАтомарногоПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

КонецПроцедуры

Процедура КонвертацияПроцессаРассмотрение(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	УстановитьИдентификаторыУчастниковПроцессаРассмотрение(Источник);
	КонвертацияАтомарногоПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
	// Работа с резолюциями
	Резолюции = РезолюцииПоИсточнику(Источник.Ссылка);
	Для Каждого Резолюция Из Резолюции Цикл
		ОбновитьДанныеРезолюцииПоИсточнику(Резолюция, Источник.Ссылка, ПараметрыЗагрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертацияПроцессаРегистрация(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Порция.Колонки.Найти("ОбрабатывающийРезультат") = Неопределено Тогда 
		Порция.Колонки.Добавить("ОбрабатывающийРезультат");
	КонецЕсли;
	Источник.ОбрабатывающийРезультат = Источник.Автор;
	
	УстановитьИдентификаторыУчастниковПроцессаУтверждениеРегистрация(Источник);
	КонвертацияАтомарногоПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура КонвертацияПроцессаРешениеВопросовВыполненияЗадач(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	УстановитьИдентификаторыУчастниковПроцессаРешениеВопросов(Источник);
	КонвертацияАтомарногоПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура КонвертацияПроцессаПоручение(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Источник.ВедущаяЗадача) Тогда
		ЗаменитьЗадачиЭлементовВКомплексныхПроцессов(
			ВедущаяЗадачаНесуществующегоПроцесса(Источник.Ссылка),
			Источник.ВедущаяЗадача,
			ПараметрыЗагрузки.Загрузка,
			ПараметрыЗагрузки.ПричинаЗагрузки);
	КонецЕсли;
		
	Источник.УзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	МассивСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник);
	ПорцияОдинЭлемент = Порция.Скопировать(МассивСтрок);
	ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(Источник.Ссылка);
	ПараметрыЗагрузки.Изменение = Новый Структура("ЭтоНовый, Удаление", ЭтоНовый, Ложь);
	
	ПредыдущиеЗначенияРеквизитов = Неопределено;
	ЭтоУдалениеОбъекта = ЭтоУдалениеОбъекта(Источник);
	
	СсылкаНаОбъект =
		БизнесПроцессы.Исполнение.ПолучитьСсылку(Источник.Ссылка.УникальныйИдентификатор());
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("БизнесПроцесс.Исполнение").УстановитьЗначение("Ссылка", СсылкаНаОбъект);
	Блокировка.Заблокировать();
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект) Тогда
		ПроцессОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		ПредыдущиеЗначенияРеквизитов = ДанныеПроцесса(ПроцессОбъект);
	Иначе
		Если ЭтоУдалениеОбъекта Тогда
			Возврат;
		КонецЕсли;
		
		ПроцессОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
		ПроцессОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
	КонецЕсли;
	
	Если Не ЭтоУдалениеОбъекта Тогда
		ИсполнителиТекущаяВерсия = ПроцессОбъект.Исполнители.Выгрузить();
		ПроцессОбъект.Исполнители.Очистить();
		
		ПереносимыеРеквизиты =
			"Дата, ВедущаяЗадача, ПометкаУдаления, Стартован, Завершен, Важность, ГлавнаяЗадача, ДатаЗавершения, 
			|ДатаНачала, ВариантУстановкиСрокаОбработкиРезультатов, Наименование, Описание, ПричинаПрерывания,
			|Проект, ПроектнаяЗадача, Состояние, СрокОбработкиРезультатов, СрокОбработкиРезультатовДни,
			|СрокОбработкиРезультатовМинуты, СрокОбработкиРезультатовЧасы,ТрудозатратыПланКонтролера,
			|ТрудозатратыПланПроверяющего, Автор, Контролер, Проверяющий";		
		ЗаполнитьЗначенияСвойств(ПроцессОбъект, Источник, ПереносимыеРеквизиты);
		
		Если ЗначениеЗаполнено(Источник.Шаблон) Тогда
			ИдентификаторШаблона = Источник.Шаблон.УникальныйИдентификатор();
			ПроцессОбъект.Шаблон = Справочники.ШаблоныИсполнения.ПолучитьСсылку(ИдентификаторШаблона); 
		КонецЕсли;
	
		ПроцессОбъект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		ПроцессОбъект.НомерИтерации = 1;
		ПроцессОбъект.СрокИсполненияПроцесса = Источник.СрокИсполнения;
		
		СтрокаИсполнителя = ПроцессОбъект.Исполнители.Добавить();
		
		СтрокаИсполнителяТекущаяВерсия = ИсполнителиТекущаяВерсия.Найти(Источник.Исполнитель, "Исполнитель");
		Если СтрокаИсполнителяТекущаяВерсия = Неопределено Тогда
			СтрокаИсполнителя.ИдентификаторИсполнителя = Новый УникальныйИдентификатор();
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаИсполнителя, СтрокаИсполнителяТекущаяВерсия);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаИсполнителя, Источник);
		СтрокаИсполнителя.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
		
		Если ЗначениеЗаполнено(Источник.РезультатыПроверки) Тогда
			ОписаниеРезультата = Источник.РезультатыПроверки[0];
			
			ПроцессОбъект.РезультатыПроверки.Очистить();
			
			СтрокаРезультата = ПроцессОбъект.РезультатыПроверки.Добавить();
			СтрокаРезультата.НомерИтерации = 1;
			СтрокаРезультата.ЗадачаИсполнителя = ОписаниеРезультата.ЗадачаИсполнителя;
			СтрокаРезультата.ОтправленоНаДоработку = ОписаниеРезультата.ОтправленоНаДоработку;
			СтрокаРезультата.ИдентификаторИсполнителя = СтрокаИсполнителя.ИдентификаторИсполнителя;
			
			СтрокаИсполнителя.ЗадачаИсполнителя = СтрокаРезультата.ЗадачаИсполнителя;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.Предметы) Тогда
			ПроцессОбъект.Предметы.Очистить();
			Для Каждого СтрокаТаблицы Из Источник.Предметы Цикл
				ЗаполнитьЗначенияСвойств(ПроцессОбъект.Предметы.Добавить(), СтрокаТаблицы); 
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ПредметыЗадач) Тогда
			ПроцессОбъект.ПредметыЗадач.Очистить();
			
			Для Каждого СтрокаТаблицы Из Источник.ПредметыЗадач Цикл
				ЗаполнитьЗначенияСвойств(ПроцессОбъект.ПредметыЗадач.Добавить(), СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ДополнительныеРеквизиты) Тогда
			ПроцессОбъект.ДополнительныеРеквизиты.Очистить();
			Для Каждого СтрокаТаблицы Из Источник.ДополнительныеРеквизиты Цикл
				ЗаполнитьЗначенияСвойств(ПроцессОбъект.ДополнительныеРеквизиты.Добавить(), СтрокаТаблицы); 
			КонецЦикла;
		КонецЕсли;
	Иначе
		ПроцессОбъект.ПометкаУдаления = Истина;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		ПроцессОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	ЭтоПерваяЗагрузка = ПроцессОбъект.ЭтоНовый();
	
	ПроцессОбъект.Записать();	

	Приемник = ПроцессОбъект.Ссылка;

	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			Приемник,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Приемник)));
	КонецЕсли;
	
	ОбновитьОтметкиВыполненияПроцессаОбработкиДокументаПоВложенномуПроцессу(
		Источник,
		ЭтоПерваяЗагрузка,
		ПараметрыЗагрузки.Загрузка,
		ПараметрыЗагрузки.ПричинаЗагрузки);
	
	ДействияДляОбработки = СвязатьПроцессСДействиемОбработки(
		ОписаниеПроцессаДляДействияОбработки(Приемник, ПредыдущиеЗначенияРеквизитов), 
		ПараметрыЗагрузки);
	
	Если ЗначениеЗаполнено(ДействияДляОбработки) Тогда
		ОбновитьДействия(ДействияДляОбработки, ПараметрыЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияАтомарногоПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Источник.ВедущаяЗадача) Тогда
		ЗаменитьЗадачиЭлементовВКомплексныхПроцессов(
			ВедущаяЗадачаНесуществующегоПроцесса(Источник.Ссылка),
			Источник.ВедущаяЗадача,
			ПараметрыЗагрузки.Загрузка,
			ПараметрыЗагрузки.ПричинаЗагрузки);
	КонецЕсли;
	
	Источник.УзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	ЭтоУдалениеОбъекта = ЭтоУдалениеОбъекта(Источник);
	МожетФормироватьДействие = ТипыПроцессовФормирущихДействия()[ТипЗнч(Источник.Ссылка)] = Истина;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Источник.Ссылка));
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Источник.Ссылка);
	Блокировка.Заблокировать();
	
	ЭтоПерваяЗагрузка = Не ОбщегоНазначения.СсылкаСуществует(Источник.Ссылка);
	
	Если ЭтоУдалениеОбъекта И ЭтоПерваяЗагрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущиеЗначенияРеквизитов = Неопределено;
	Если Не ЭтоПерваяЗагрузка И МожетФормироватьДействие Тогда
		ПредыдущиеЗначенияРеквизитов = ДанныеПроцесса(Источник.Ссылка);
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки) Тогда
		
		ОбновитьОтметкиВыполненияПроцессаОбработкиДокументаПоВложенномуПроцессу(
			Источник,
			ЭтоПерваяЗагрузка,
			ПараметрыЗагрузки.Загрузка,
			ПараметрыЗагрузки.ПричинаЗагрузки);
		
		Если МожетФормироватьДействие Тогда
			ДействияДляОбработки = СвязатьПроцессСДействиемОбработки(
				ОписаниеПроцессаДляДействияОбработки(Приемник.Ссылка, ПредыдущиеЗначенияРеквизитов), 
				ПараметрыЗагрузки);
			
			Если ЗначениеЗаполнено(ДействияДляОбработки) Тогда
				ОбновитьДействия(ДействияДляОбработки, ПараметрыЗагрузки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаНаПроцессУтверждения(Процесс)
	
	Если ОбщегоНазначения.СсылкаСуществует(Процесс) Тогда
		Возврат Процесс;
	КонецЕсли;
	
	СсылкаНаПроцессПодписание = БизнесПроцессы.Подписание.ПолучитьСсылку(Процесс.УникальныйИдентификатор());
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаПроцессПодписание) Тогда
		Возврат СсылкаНаПроцессПодписание;
	КонецЕсли;
	
	Возврат Процесс;
	
КонецФункции

Процедура ЗаменитьСсылкиПроцессаИсточникаНаСсылкуПроцессаПриемника(ИскомаяСсылка, УстанавливаемаяСсылка, ПараметрыЗагрузки)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Этапы.Ссылка КАК Процесс
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.Этапы КАК Этапы
		|ГДЕ
		|	Этапы.ЗапущенныйБизнесПроцесс = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Процесс);
		
		ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
		
		Для Каждого СтрокаТаблицы Из ПроцессОбъект.Этапы Цикл
			Если СтрокаТаблицы.ЗапущенныйБизнесПроцесс = ИскомаяСсылка Тогда
				СтрокаТаблицы.ЗапущенныйБизнесПроцесс = УстанавливаемаяСсылка; 
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			ПроцессОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		ПроцессОбъект.Записать();
	
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ПроцессОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПроцессОбъект.Ссылка)));
		КонецЕсли;	
		
		РазблокироватьДанныеДляРедактирования(Выборка.Процесс);
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Задача
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Задача);
		
		ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
		ЗадачаОбъект.БизнесПроцесс = УстанавливаемаяСсылка;
		Если ТипЗнч(УстанавливаемаяСсылка) = Тип("БизнесПроцессСсылка.Подписание") Тогда
			ЗаменитьТочкиМаршрутаПроцессаУтверждениеТочкамиПроцессаПодписание(ЗадачаОбъект, "ТочкаМаршрута");
		КонецЕсли;
				
		Если ПараметрыЗагрузки.Загрузка Тогда
			ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		ЗадачаОбъект.Записать();
	
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ЗадачаОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ЗадачаОбъект.Ссылка)));
		КонецЕсли;	
		
		РазблокироватьДанныеДляРедактирования(Выборка.Задача);
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Файл);
		
		СправочникОбъект = Выборка.Файл.ПолучитьОбъект();
		СправочникОбъект.ВладелецФайла = УстанавливаемаяСсылка;

		Если ПараметрыЗагрузки.Загрузка Тогда
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		СправочникОбъект.Записать();
	
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				СправочникОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СправочникОбъект.Ссылка)));
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Выборка.Файл);
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УведомленияПрограммы.Ссылка КАК УведомлениеПрограммы
		|ИЗ
		|	Справочник.УведомленияПрограммы КАК УведомленияПрограммы
		|ГДЕ
		|	УведомленияПрограммы.Объект = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.УведомлениеПрограммы);
		
		СправочникОбъект = Выборка.УведомлениеПрограммы.ПолучитьОбъект();
		СправочникОбъект.Объект = УстанавливаемаяСсылка;

		Если ПараметрыЗагрузки.Загрузка Тогда
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		СправочникОбъект.Записать();
	
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				СправочникОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СправочникОбъект.Ссылка)));
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Выборка.УведомлениеПрограммы);
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НомераОтсканированныхФайлов.Владелец,
		|	НомераОтсканированныхФайлов.Номер
		|ИЗ
		|	РегистрСведений.НомераОтсканированныхФайлов КАК НомераОтсканированныхФайлов
		|ГДЕ
		|	НомераОтсканированныхФайлов.Владелец = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.НомераОтсканированныхФайлов.СоздатьНаборЗаписей();
		Набор.Отбор.Владелец.Установить(УстанавливаемаяСсылка);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Владелец = УстанавливаемаяСсылка;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;	
		
		Набор = РегистрыСведений.НомераОтсканированныхФайлов.СоздатьНаборЗаписей();
		Набор.Отбор.Владелец.Установить(ИскомаяСсылка);
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиУведомлений.Пользователь,
		|	НастройкиУведомлений.Настройка,
		|	НастройкиУведомлений.ВидСобытия,
		|	НастройкиУведомлений.СпособУведомления,
		|	НастройкиУведомлений.Объект,
		|	НастройкиУведомлений.Значение
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Объект = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.НастройкиУведомлений.СоздатьНаборЗаписей();
		Набор.Отбор.Пользователь.Установить(Выборка.Пользователь);
		Набор.Отбор.Настройка.Установить(Выборка.Настройка);
		Набор.Отбор.ВидСобытия.Установить(Выборка.ВидСобытия);
		Набор.Отбор.СпособУведомления.Установить(Выборка.СпособУведомления);
		Набор.Отбор.Объект.Установить(УстанавливаемаяСсылка);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Объект = УстанавливаемаяСсылка;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;	
		
		Набор = РегистрыСведений.НастройкиУведомлений.СоздатьНаборЗаписей();
		Набор.Отбор.Пользователь.Установить(Выборка.Пользователь);
		Набор.Отбор.Настройка.Установить(Выборка.Настройка);
		Набор.Отбор.ВидСобытия.Установить(Выборка.ВидСобытия);
		Набор.Отбор.СпособУведомления.Установить(Выборка.СпособУведомления);
		Набор.Отбор.Объект.Установить(Выборка.Объект);
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;
		
	КонецЦикла;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбработанныеУведомления.ВидСобытия,
		|	ОбработанныеУведомления.ОбъектУведомления,
		|	ОбработанныеУведомления.Пользователь,
		|	ОбработанныеУведомления.ДатаОбработки
		|ИЗ
		|	РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|ГДЕ
		|	ОбработанныеУведомления.ОбъектУведомления = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ОбработанныеУведомления.СоздатьНаборЗаписей();
		Набор.Отбор.ВидСобытия.Установить(Выборка.ВидСобытия);
		Набор.Отбор.ОбъектУведомления.Установить(УстанавливаемаяСсылка);
		Набор.Отбор.Пользователь.Установить(Выборка.Пользователь);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ОбъектУведомления = УстанавливаемаяСсылка;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;	
		
		Набор = РегистрыСведений.ОбработанныеУведомления.СоздатьНаборЗаписей();
		Набор.Отбор.ВидСобытия.Установить(Выборка.ВидСобытия);
		Набор.Отбор.ОбъектУведомления.Установить(Выборка.ОбъектУведомления);
		Набор.Отбор.Пользователь.Установить(Выборка.Пользователь);
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен КАК Завершен,
		|	ДанныеБизнесПроцессов.Номер КАК Номер,
		|	ДанныеБизнесПроцессов.Важность КАК Важность,
		|	ДанныеБизнесПроцессов.ВедущаяЗадача КАК ВедущаяЗадача,
		|	ДанныеБизнесПроцессов.ГлавнаяЗадача КАК ГлавнаяЗадача,
		|	ДанныеБизнесПроцессов.Дата КАК Дата,
		|	ДанныеБизнесПроцессов.Стартован КАК Стартован,
		|	ДанныеБизнесПроцессов.ДатаНачала КАК ДатаНачала,
		|	ДанныеБизнесПроцессов.Автор КАК Автор,
		|	ДанныеБизнесПроцессов.ДатаЗавершения КАК ДатаЗавершения,
		|	ДанныеБизнесПроцессов.НомерИтерации КАК НомерИтерации,
		|	ДанныеБизнесПроцессов.ОбъектДоступа КАК ОбъектДоступа,
		|	ДанныеБизнесПроцессов.ОсновнойПредмет КАК ОсновнойПредмет,
		|	ДанныеБизнесПроцессов.Наименование КАК Наименование,
		|	ДанныеБизнесПроцессов.Проект КАК Проект,
		|	ДанныеБизнесПроцессов.ПроектнаяЗадача КАК ПроектнаяЗадача,
		|	ДанныеБизнесПроцессов.Состояние КАК Состояние,
		|	ДанныеБизнесПроцессов.СрокИсполнения КАК СрокИсполнения,
		|	ДанныеБизнесПроцессов.ПометкаУдаления КАК ПометкаУдаления,
		|	ДанныеБизнесПроцессов.ТрудозатратыПлан КАК ТрудозатратыПлан,
		|	ДанныеБизнесПроцессов.УзелОбработки КАК УзелОбработки
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.БизнесПроцесс = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.БизнесПроцесс.Установить(УстанавливаемаяСсылка);
		Набор.Отбор.Завершен.Установить(Выборка.Завершен);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.БизнесПроцесс = УстанавливаемаяСсылка;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;	
		
		Набор = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.БизнесПроцесс.Установить(Выборка.БизнесПроцесс);
		Набор.Отбор.Завершен.Установить(Выборка.Завершен);
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);	
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиОтложеногоСтартаПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	НастройкиОтложеногоСтартаПроцессов.ДатаОтложенногоСтарта КАК ДатаОтложенногоСтарта,
		|	НастройкиОтложеногоСтартаПроцессов.КоличествоПопытокОбработки КАК КоличествоПопытокОбработки,
		|	НастройкиОтложеногоСтартаПроцессов.Состояние КАК Состояние,
		|	НастройкиОтложеногоСтартаПроцессов.АвторДобавленияЗаписи КАК АвторДобавленияЗаписи,
		|	НастройкиОтложеногоСтартаПроцессов.МоментВремени КАК МоментВремени,
		|	НастройкиОтложеногоСтартаПроцессов.ПричинаОтменыСтарта КАК ПричинаОтменыСтарта
		|ИЗ
		|	РегистрСведений.НастройкиОтложеногоСтартаПроцессов КАК НастройкиОтложеногоСтартаПроцессов
		|ГДЕ
		|	НастройкиОтложеногоСтартаПроцессов.БизнесПроцесс = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.НастройкиОтложеногоСтартаПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.БизнесПроцесс.Установить(УстанавливаемаяСсылка);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.БизнесПроцесс = УстанавливаемаяСсылка;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;
		
		Набор = РегистрыСведений.НастройкиОтложеногоСтартаПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.БизнесПроцесс.Установить(Выборка.БизнесПроцесс);
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);	
		КонецЕсли;
		
	КонецЦикла;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КешИнформацииОбОбъектах.Объект КАК Объект,
		|	КешИнформацииОбОбъектах.ВероятностьКТ КАК ВероятностьКТ,
		|	КешИнформацииОбОбъектах.ДатаИсполнения КАК ДатаИсполнения,
		|	КешИнформацииОбОбъектах.ДатаПроверкиЭП КАК ДатаПроверкиЭП,
		|	КешИнформацииОбОбъектах.ЕстьЗадачи КАК ЕстьЗадачи,
		|	КешИнформацииОбОбъектах.ЕстьКатегории КАК ЕстьКатегории,
		|	КешИнформацииОбОбъектах.ЕстьОшибкиПриемкиОтправкиПочты КАК ЕстьОшибкиПриемкиОтправкиПочты,
		|	КешИнформацииОбОбъектах.ЕстьФайлы КАК ЕстьФайлы,
		|	КешИнформацииОбОбъектах.Отозван КАК Отозван,
		|	КешИнформацииОбОбъектах.ОтправленОтвет КАК ОтправленОтвет,
		|	КешИнформацииОбОбъектах.Перенаправлен КАК Перенаправлен,
		|	КешИнформацииОбОбъектах.Переслан КАК Переслан,
		|	КешИнформацииОбОбъектах.ПолученОтвет КАК ПолученОтвет,
		|	КешИнформацииОбОбъектах.СостояниеКонтроля КАК СостояниеКонтроля,
		|	КешИнформацииОбОбъектах.СрокИсполнения КАК СрокИсполнения,
		|	КешИнформацииОбОбъектах.СрокИсполненияОбщий КАК СрокИсполненияОбщий,
		|	КешИнформацииОбОбъектах.СтатусЭП КАК СтатусЭП
		|ИЗ
		|	РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|ГДЕ
		|	КешИнформацииОбОбъектах.Объект = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(УстанавливаемаяСсылка);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Объект = УстанавливаемаяСсылка;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;	
		
		Набор = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Выборка.Объект);
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;
		
	КонецЦикла;
	
	// ДочерниеБизнесПроцессы
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДочерниеБизнесПроцессы.РодительскийПроцесс КАК РодительскийПроцесс,
		|	ДочерниеБизнесПроцессы.СвязующаяЗадача КАК СвязующаяЗадача,
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс КАК ДочернийПроцесс
		|ИЗ
		|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|ГДЕ
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДочерниеБизнесПроцессы.СоздатьНаборЗаписей();
		Набор.Отбор.ДочернийПроцесс.Установить(УстанавливаемаяСсылка);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ДочернийПроцесс = УстанавливаемаяСсылка;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;
		
		Набор = РегистрыСведений.ДочерниеБизнесПроцессы.СоздатьНаборЗаписей();
		Набор.Отбор.ДочернийПроцесс.Установить(Выборка.ДочернийПроцесс);
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);	
		КонецЕсли;
		
	КонецЦикла;


	// УчастникиПроцессов
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УчастникиПроцессов.Участник КАК Участник,
		|	УчастникиПроцессов.Основание КАК Основание,
		|	УчастникиПроцессов.Процесс КАК Процесс
		|ИЗ
		|	РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
		|ГДЕ
		|	УчастникиПроцессов.Процесс = &ИскомаяСсылка");
	Запрос.УстановитьПараметр("ИскомаяСсылка", ИскомаяСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.Процесс.Установить(УстанавливаемаяСсылка);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Процесс = УстанавливаемаяСсылка;
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);
		КонецЕсли;
		
		Набор = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.Процесс.Установить(Выборка.Процесс);
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, 
				ПараметрыЗагрузки.ПричинаЗагрузки);	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьТочкиМаршрутаПроцессаУтверждениеТочкамиПроцессаПодписание(Источник, Реквизит)
	
	СоответствиеТочекМаршрутов = Новый Соответствие;
	СоответствиеТочекМаршрутов.Вставить(
		БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить,
		БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать);
	СоответствиеТочекМаршрутов.Вставить(
		БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться,
		БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат);
		
	ТочкаМаршрута = СоответствиеТочекМаршрутов[Источник[Реквизит]];
	Если ЗначениеЗаполнено(ТочкаМаршрута) Тогда
		Источник[Реквизит] = ТочкаМаршрута;
	КонецЕсли;
	
КонецПроцедуры

#Область ИдентификаторыУчастниковПроцессов

Процедура УстановитьИдентификаторыУчастниковПроцессаУтверждениеРегистрация(Источник)
	
	Если Источник.Владелец().Колонки.Найти("ИдентификаторИсполнителя") = Неопределено Тогда
		Источник.Владелец().Колонки.Добавить("ИдентификаторИсполнителя");
	КонецЕсли;
	
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Источник.Ссылка);
	
	ДанныеПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Источник.Ссылка, "Исполнитель, ИдентификаторИсполнителя");
		
	Если ЗначениеЗаполнено(Источник.Исполнитель) Тогда
		Если СсылкаСуществует И Источник.Исполнитель = ДанныеПроцесса.Исполнитель Тогда
			Источник.ИдентификаторИсполнителя = ДанныеПроцесса.ИдентификаторИсполнителя;
		Иначе
			Источник.ИдентификаторИсполнителя =
				?(ЗначениеЗаполнено(Источник.ИдентификаторИсполнителя),
					Источник.ИдентификаторИсполнителя,
					Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИдентификаторыУчастниковПроцессаРассмотрение(Источник)
	
	Если Источник.Владелец().Колонки.Найти("ИдентификаторИсполнителя") = Неопределено Тогда
		Источник.Владелец().Колонки.Добавить("ИдентификаторИсполнителя");
	КонецЕсли;
	
	Если Источник.Владелец().Колонки.Найти("ИдентификаторКонтролера") = Неопределено Тогда
		Источник.Владелец().Колонки.Добавить("ИдентификаторКонтролера")
	КонецЕсли;
	
	Если Источник.Владелец().Колонки.Найти("ИдентификаторПроверяющего") = Неопределено Тогда
		Источник.Владелец().Колонки.Добавить("ИдентификаторПроверяющего")
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ИсполнителиИсполнения)
			И Источник.ИсполнителиИсполнения.Колонки.Найти("ИдентификаторИсполнителя") = Неопределено Тогда
		Источник.ИсполнителиИсполнения.Колонки.Добавить("ИдентификаторИсполнителя")
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ИсполнителиОзнакомления)
			И Источник.ИсполнителиОзнакомления.Колонки.Найти("ИдентификаторИсполнителя") = Неопределено Тогда
		Источник.ИсполнителиОзнакомления.Колонки.Добавить("ИдентификаторИсполнителя")
	КонецЕсли;
	
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Источник.Ссылка);
	
	ДанныеПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Источник.Ссылка,
		"Исполнитель, КонтролерИсполнения, ПроверяющийИсполнения,
		|ИдентификаторИсполнителя, ИдентификаторКонтролера, ИдентификаторПроверяющего,
		|ИсполнителиИсполнения, ИсполнителиОзнакомления");
		
	Если ЗначениеЗаполнено(Источник.Исполнитель) Тогда
		Если СсылкаСуществует И Источник.Исполнитель = ДанныеПроцесса.Исполнитель Тогда
			Источник.ИдентификаторИсполнителя = ДанныеПроцесса.ИдентификаторИсполнителя;
		Иначе
			Источник.ИдентификаторИсполнителя =
				?(ЗначениеЗаполнено(Источник.ИдентификаторИсполнителя),
					Источник.ИдентификаторИсполнителя,
					Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.КонтролерИсполнения) Тогда
		Если СсылкаСуществует И Источник.КонтролерИсполнения = ДанныеПроцесса.КонтролерИсполнения Тогда
			Источник.ИдентификаторКонтролера = ДанныеПроцесса.ИдентификаторКонтролера;
		Иначе
			Источник.ИдентификаторКонтролера =
				?(ЗначениеЗаполнено(Источник.ИдентификаторКонтролера),
					Источник.ИдентификаторКонтролера,
					Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ПроверяющийИсполнения) Тогда
		Если СсылкаСуществует И Источник.ПроверяющийИсполнения = ДанныеПроцесса.ПроверяющийИсполнения Тогда
			Источник.ИдентификаторПроверяющего = ДанныеПроцесса.ИдентификаторПроверяющего;
		Иначе
			Источник.ИдентификаторПроверяющего =
				?(ЗначениеЗаполнено(Источник.ИдентификаторПроверяющего),
					Источник.ИдентификаторПроверяющего,
					Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ИсполнителиИсполнения) Тогда
		ИдентификаторыУчастников = Новый Соответствие();
		
		ИсполнителиИсполненияПредыдущаяВерсия = Неопределено;
		Если СсылкаСуществует Тогда
			ИсполнителиИсполненияПредыдущаяВерсия = ДанныеПроцесса.ИсполнителиИсполнения.Выгрузить();
		КонецЕсли;
		
		Для Каждого СтрокаИсточник Из Источник.ИсполнителиИсполнения Цикл
			СтрокаПредыдущаяВерсия = Неопределено;
			Если ИсполнителиИсполненияПредыдущаяВерсия <> Неопределено Тогда
				СтрокаПредыдущаяВерсия =
					ИсполнителиИсполненияПредыдущаяВерсия.Найти(СтрокаИсточник.Исполнитель, "Исполнитель");
			Иначе
				СтрокаПредыдущаяВерсия = СтрокаИсточник;
			КонецЕсли;
			
			ИдентификаторУчастника = ИдентификаторУчастника(
				ИдентификаторыУчастников,
				?(СтрокаПредыдущаяВерсия <> Неопределено, СтрокаПредыдущаяВерсия.ИдентификаторИсполнителя, Неопределено));
			
			СтрокаИсточник.ИдентификаторИсполнителя = ИдентификаторУчастника;
			
			ИдентификаторыУчастников[ИдентификаторУчастника] = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ИсполнителиОзнакомления) Тогда
		ИдентификаторыУчастников = Новый Соответствие();
		
		ИсполнителиОзнакомленияПредыдущаяВерсия = Неопределено;
		Если СсылкаСуществует Тогда
			ИсполнителиОзнакомленияПредыдущаяВерсия = ДанныеПроцесса.ИсполнителиОзнакомления.Выгрузить();
		КонецЕсли;
		
		Для Каждого СтрокаИсточник Из Источник.ИсполнителиОзнакомления Цикл
			СтрокаПредыдущаяВерсия = Неопределено;
			Если ИсполнителиОзнакомленияПредыдущаяВерсия <> Неопределено Тогда
				СтрокаПредыдущаяВерсия =
					ИсполнителиОзнакомленияПредыдущаяВерсия.Найти(СтрокаИсточник.Исполнитель, "Исполнитель");
			Иначе
				СтрокаПредыдущаяВерсия = СтрокаИсточник;
			КонецЕсли;
			
			ИдентификаторУчастника = ИдентификаторУчастника(
				ИдентификаторыУчастников,
				?(СтрокаПредыдущаяВерсия <> Неопределено, СтрокаПредыдущаяВерсия.ИдентификаторИсполнителя, Неопределено));
			
			СтрокаИсточник.ИдентификаторИсполнителя = ИдентификаторУчастника;
			
			ИдентификаторыУчастников[ИдентификаторУчастника] = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИдентификаторыУчастниковПроцессаРешениеВопросов(Источник)
	
	Если Источник.Владелец().Колонки.Найти("ИдентификаторАвтораВопроса") = Неопределено Тогда
		Источник.Владелец().Колонки.Добавить("ИдентификаторАвтораВопроса");
	КонецЕсли;
	
	Если Источник.Владелец().Колонки.Найти("ИдентификаторИнициатораПроцесса") = Неопределено Тогда
		Источник.Владелец().Колонки.Добавить("ИдентификаторИнициатораПроцесса")
	КонецЕсли;
	
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Источник.Ссылка);
	
	ДанныеПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Источник.Ссылка,
		"Автор, ИнициаторПроцесса, ИдентификаторАвтораВопроса, ИдентификаторИнициатораПроцесса");
		
	Если ЗначениеЗаполнено(Источник.Автор) Тогда
		Если СсылкаСуществует И Источник.Автор = ДанныеПроцесса.Автор Тогда
			Источник.ИдентификаторАвтораВопроса = ДанныеПроцесса.ИдентификаторАвтораВопроса;
		Иначе
			Источник.ИдентификаторАвтораВопроса =
				?(ЗначениеЗаполнено(Источник.ИдентификаторАвтораВопроса),
					Источник.ИдентификаторАвтораВопроса,
					Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ИнициаторПроцесса) Тогда
		Если СсылкаСуществует И Источник.ИнициаторПроцесса = ДанныеПроцесса.ИнициаторПроцесса Тогда
			Источник.ИдентификаторИнициатораПроцесса = ДанныеПроцесса.ИдентификаторИнициатораПроцесса;
		Иначе
			Источник.ИдентификаторИнициатораПроцесса =
				?(ЗначениеЗаполнено(Источник.ИдентификаторИнициатораПроцесса),
					Источник.ИдентификаторИнициатораПроцесса,
					Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИдентификаторыУчастниковПроцессов(Источник)
	
	Если ТипЗнч(Источник.Исполнители) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыУчастников = Новый Соответствие();
	
	Если Источник.Исполнители.Колонки.Найти("ИдентификаторИсполнителя") = Неопределено Тогда
		Источник.Исполнители.Колонки.Добавить("ИдентификаторИсполнителя");
	КонецЕсли;
	
	ИсполнителиПредыдущаяВерсия = Неопределено;
	Если ОбщегоНазначения.СсылкаСуществует(Источник.Ссылка) Тогда
		ИсполнителиПредыдущаяВерсия =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Исполнители").Выгрузить();
	КонецЕсли;
	
	Для Каждого СтрокаИсточник Из Источник.Исполнители Цикл
		СтрокаПредыдущаяВерсия = Неопределено;
		Если ИсполнителиПредыдущаяВерсия <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаИсточник.ЗадачаИсполнителя) Тогда
				СтрокаПредыдущаяВерсия =
					ИсполнителиПредыдущаяВерсия.Найти(СтрокаИсточник.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Иначе
				СтрокаПредыдущаяВерсия =
					ИсполнителиПредыдущаяВерсия.Найти(СтрокаИсточник.Исполнитель, "Исполнитель");
			КонецЕсли;
		Иначе
			СтрокаПредыдущаяВерсия = СтрокаИсточник;
		КонецЕсли;
		
		ИдентификаторУчастника = ИдентификаторУчастника(
			ИдентификаторыУчастников,
			?(СтрокаПредыдущаяВерсия <> Неопределено, СтрокаПредыдущаяВерсия.ИдентификаторИсполнителя, Неопределено));
		
		СтрокаИсточник.ИдентификаторИсполнителя = ИдентификаторУчастника;
		
		ИдентификаторыУчастников[ИдентификаторУчастника] = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторУчастника(ИдентификаторыУчастников, ИдентификаторУчастника)
	
	Идентификатор = ИдентификаторУчастника;
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Идентификатор = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	Пока ИдентификаторыУчастников[Идентификатор] <> Неопределено Цикл
		Идентификатор = Новый УникальныйИдентификатор();
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомплексныеПроцессы

#Область СхемыКомплексныхПроцессов

#Область СкриптыСхемКомплексныхПроцессов

// Выполняет конвертацию загружаемого скрипта схемы КП из 2.1 в 3.0.
//
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияСкриптаСхемыКомплексногоПроцесса(
	Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
		
	СтандартнаяОбработка = Ложь;
	
	НаименованиеСкрипта = НаименованиеСкриптаСхемы(
		Источник.Схема, Источник.ИдентификаторСкрипта);
	
	БлокировкаДанных = Новый БлокировкаДанных();
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.СкриптыСхемДляКомплексныхПроцессов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Наименование", НаименованиеСкрипта);
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.СкриптыУсловийСхемДляКомплексныхПроцессов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Наименование", НаименованиеСкрипта);
	
	БлокировкаДанных.Заблокировать();	
	
	СкриптСхемы = СкриптСхемыПоНаименованию(НаименованиеСкрипта);
	СкриптСхемыОбъект = Неопределено;
	Если ЗначениеЗаполнено(СкриптСхемы) Тогда
		ЗаблокироватьДанныеДляРедактирования(СкриптСхемы);
		СкриптСхемыОбъект = СкриптСхемы.ПолучитьОбъект();
	КонецЕсли;
	
	СкриптУсловияСхемы = СкриптУсловияСхемыПоНаименованию(НаименованиеСкрипта);
	СкриптУсловияСхемыОбъект = Неопределено;
	Если ЗначениеЗаполнено(СкриптУсловияСхемы) Тогда
		ЗаблокироватьДанныеДляРедактирования(СкриптУсловияСхемы);
		СкриптУсловияСхемыОбъект = СкриптУсловияСхемы.ПолучитьОбъект();
	КонецЕсли;
	
	// Если нет ни одно из скриптов с заданным наименованием, то пишем 
	// элемент в СкриптыСхемДляКомплексныхПроцессов, чтобы сохранить загружаемые сведения. 
	Если СкриптСхемыОбъект = Неопределено И СкриптУсловияСхемыОбъект = Неопределено Тогда
		СкриптСхемыОбъект = Справочники.СкриптыСхемДляКомплексныхПроцессов.СоздатьЭлемент();
	КонецЕсли;
	
	Если СкриптСхемыОбъект <> Неопределено Тогда 
		
		СтруктураДляЗаполнения = СкриптСхемыОбъект.СтруктураДанныхДляЗаполнения();
		СтруктураДляЗаполнения.Наименование = НаименованиеСкрипта;
		СтруктураДляЗаполнения.Группа = ГруппаЗагруженныхИз21СкриптовСхемы();
		СтруктураДляЗаполнения.Комментарий = СкриптСхемыОбъект.Комментарий;
		
		ВыражениеСкрипта = СтрЗаменить(Источник.Скрипт, "Процесс.", "Параметры.ПроцессОбъект.");
		СтруктураДляЗаполнения.Выражение = ВыражениеСкрипта;
				
		СкриптСхемыОбъект.Заполнить(СтруктураДляЗаполнения);
		
		СкриптСхемыОбъект.ОбменДанными.Загрузка = ПараметрыЗагрузки.Загрузка;
		
		СкриптСхемыОбъект.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				СкриптСхемыОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СкриптСхемыОбъект.Ссылка)));
		КонецЕсли;
		
		ОбновитьСкриптСхемыДляОбработкиОбъектаПоСкриптуКП(
			СсылкаНаСкриптСхемыДляОбработкиОбъектаПоСкриптуКП(СкриптСхемыОбъект.Ссылка),
			СкриптСхемыОбъект,
			ПараметрыЗагрузки.Загрузка,
			ПараметрыЗагрузки.ПричинаЗагрузки);
		
	КонецЕсли;
	
	Если СкриптУсловияСхемыОбъект <> Неопределено Тогда 
		
		СтруктураДляЗаполнения = СкриптУсловияСхемыОбъект.СтруктураДанныхДляЗаполнения();
		СтруктураДляЗаполнения.Наименование = НаименованиеСкрипта;
		СтруктураДляЗаполнения.Группа = ГруппаЗагруженныхИз21СкриптовУсловийСхемы();
		СтруктураДляЗаполнения.Комментарий = СкриптУсловияСхемыОбъект.Комментарий;
			
		ВыражениеСкрипта = СтрЗаменить(Источник.Скрипт, "Процесс.", "Параметры.ПроцессОбъект.");
		ВыражениеСкрипта = СтрЗаменить(Источник.Скрипт, "Результат", "Параметры.Результат");
		СтруктураДляЗаполнения.Выражение = ВыражениеСкрипта;
		
		
		СкриптУсловияСхемыОбъект.Заполнить(СтруктураДляЗаполнения);
		
		СкриптУсловияСхемыОбъект.ОбменДанными.Загрузка = ПараметрыЗагрузки.Загрузка;
		
		СкриптУсловияСхемыОбъект.Записать();
		
		Если ПараметрыЗагрузки.Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				СкриптУсловияСхемыОбъект.Ссылка,
				ПараметрыЗагрузки.ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СкриптУсловияСхемыОбъект.Ссылка)));
		КонецЕсли;
		
		ОбновитьАлгоритмПроверкиПоСкриптуУсловияКП(
			СсылкаНаАлгоритмПроверкиПоСкриптуУсловияКП(СкриптУсловияСхемыОбъект.Ссылка),
			СкриптУсловияСхемыОбъект,
			ПараметрыЗагрузки.Загрузка,
			ПараметрыЗагрузки.ПричинаЗагрузки);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкриптСхемы) Тогда
		РазблокироватьДанныеДляРедактирования(СкриптСхемы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкриптУсловияСхемы) Тогда
		РазблокироватьДанныеДляРедактирования(СкриптУсловияСхемы);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает наименование скрипта схемы.
// 
// Параметры:
//  Схема - СправочникСсылка.УдалитьСхемыКомплексныхПроцессов
//  ИдентификаторСкрипта - УникальныйИдентификатор 
// 
// Возвращаемое значение:
//  Строка
//
Функция НаименованиеСкриптаСхемы(Схема, ИдентификаторСкрипта)
	
	Возврат СтрШаблон("#%1#%2",
		Схема.УникальныйИдентификатор(),
		ИдентификаторСкрипта);
	
КонецФункции

// Возвращает скрипт схемы по наименованию.
// 
// Параметры:
//  НаименованиеСкрипта - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов
//
Функция СкриптСхемыПоНаименованию(НаименованиеСкрипта)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СкриптыСхемДляКомплексныхПроцессов.Ссылка
		|ИЗ
		|	Справочник.СкриптыСхемДляКомплексныхПроцессов КАК СкриптыСхемДляКомплексныхПроцессов
		|ГДЕ
		|	СкриптыСхемДляКомплексныхПроцессов.Наименование = &НаименованиеСкрипта";
	Запрос.УстановитьПараметр("НаименованиеСкрипта", НаименованиеСкрипта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.СкриптыСхемДляКомплексныхПроцессов.ПустаяСсылка();
	
КонецФункции

// Возвращает ссылку на группу для загруженных скриптов из 2.1
// 
// Возвращаемое значение:
//  СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов
//
Функция ГруппаЗагруженныхИз21СкриптовСхемы()
	
	СкриптСхемы = Справочники.СкриптыСхемДляКомплексныхПроцессов.ПолучитьСсылку(
		Новый УникальныйИдентификатор("ebad4f38-31c9-495c-9027-aeda25702569"));
	
	Если Не ОбщегоНазначения.СсылкаСуществует(СкриптСхемы) Тогда
		
		ГруппаОбъект = Справочники.СкриптыСхемДляКомплексныхПроцессов.СоздатьГруппу();
		ГруппаОбъект.УстановитьСсылкуНового(СкриптСхемы);
		
		ГруппаОбъект.Наименование = НСтр("ru = 'Скрипты из ДО 2.1'",
			ОбщегоНазначения.КодОсновногоЯзыка());
			
		ГруппаОбъект.Записать();
				
	КонецЕсли;
	
	Возврат СкриптСхемы;
	
КонецФункции

// Возвращает скрипт условия схемы по наименованию.
// 
// Параметры:
//  НаименованиеСкрипта - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.СкриптыУсловийСхемДляКомплексныхПроцессов
//
Функция СкриптУсловияСхемыПоНаименованию(НаименованиеСкрипта)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СкриптыУсловийСхемДляКомплексныхПроцессов.Ссылка
		|ИЗ
		|	Справочник.СкриптыУсловийСхемДляКомплексныхПроцессов КАК СкриптыУсловийСхемДляКомплексныхПроцессов
		|ГДЕ
		|	СкриптыУсловийСхемДляКомплексныхПроцессов.Наименование = &НаименованиеСкрипта";
	Запрос.УстановитьПараметр("НаименованиеСкрипта", НаименованиеСкрипта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.СкриптыУсловийСхемДляКомплексныхПроцессов.ПустаяСсылка();
	
КонецФункции

// Возвращает ссылку на группу для загруженных скриптов из 2.1
// 
// Возвращаемое значение:
//  СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов
//
Функция ГруппаЗагруженныхИз21СкриптовУсловийСхемы()
	
	СкриптСхемы = Справочники.СкриптыУсловийСхемДляКомплексныхПроцессов.ПолучитьСсылку(
		Новый УникальныйИдентификатор("bab23706-1622-42f3-ab94-8a93669369e3"));
	
	Если Не ОбщегоНазначения.СсылкаСуществует(СкриптСхемы) Тогда
		
		ГруппаОбъект = Справочники.СкриптыУсловийСхемДляКомплексныхПроцессов.СоздатьГруппу();
		ГруппаОбъект.УстановитьСсылкуНового(СкриптСхемы);
		
		ГруппаОбъект.Наименование = НСтр("ru = 'Скрипты из ДО 2.1'",
			ОбщегоНазначения.КодОсновногоЯзыка());
			
		ГруппаОбъект.Записать();
				
	КонецЕсли;
	
	Возврат СкриптСхемы;
	
КонецФункции

#КонецОбласти

// Выполняет конвертацию загружаемой схемы КП из 2.1 в 3.0.
//
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияСхемыКомплексногоПроцесса(
	Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	ОбновитьСхемуПроцессаПоСхемеКП(
		Источник,
		ПараметрыЗагрузки.Загрузка,
		ПараметрыЗагрузки.ПричинаЗагрузки);
	
	ОбновитьПараметрыСхемыДляКомплексныхПроцессовПоСхемеКП(
		Источник,
		ПараметрыЗагрузки.Загрузка,
		ПараметрыЗагрузки.ПричинаЗагрузки);
	
	СоздатьОбновитьНастройкуОбработкиПоКомплексномуПроцессу(
		Источник.ВладелецСхемы, ПараметрыЗагрузки);
	
	ОбновитьКомплексныйПроцессПоСхеме(
		Источник,
		ПараметрыЗагрузки.Загрузка,
		ПараметрыЗагрузки.ПричинаЗагрузки);
	
	СсылкаНаСхемы = Справочники.СхемыПроцессов.ПолучитьСсылку(
		Источник.Ссылка.УникальныйИдентификатор());
	Приемник = СсылкаНаСхемы.ПолучитьОбъект();
	
КонецПроцедуры

// Обновляет схему процесса по схеме комплексного процесса.
// Если схемы нет, то создает ее.
// 
// Параметры:
//  СхемаКП - СтрокаТаблицыЗначений - строка таблица с загружаемыми данными схемы КП.
//  Загрузка - Булево - указание для записи в режиме загрузки.
//  ПричинаЗагрузки - Строка
//
Процедура ОбновитьСхемуПроцессаПоСхемеКП(СхемаКП, Загрузка, ПричинаЗагрузки)
	
	Если ЭтоУдалениеОбъекта(СхемаКП) Тогда
		
		СсылкаНаСхему = Справочники.СхемыПроцессов.ПолучитьСсылку(
			СхемаКП.Ссылка.УникальныйИдентификатор());
		
		Если Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаСхему) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеСхемыПроцесса = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(СсылкаНаСхему);
		ДанныеСхемыПроцесса.ПометкаУдаления = Истина;
		
	Иначе
	
		Схема = СхемаКП.Схема.Получить();
		
		ДанныеСхемыПроцесса = СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса();
		
		ДанныеСхемыПроцесса.ИсточникДанных = Справочники.ИсточникиДанных.ДО21;
		
		ДанныеСхемыПроцесса.Наименование = Строка(СхемаКП.ВладелецСхемы);
		
		МенеджерСхемыКП = Справочники.УдалитьСхемыКомплексныхПроцессов;
		
		ДанныеСхемыПроцесса.Схема = 
			МенеджерСхемыКП.ГрафическаяСхемаПроцессаПоСхемеКомплексногоПроцесса(Схема);
			
		ДанныеСхемыПроцесса.Настройки.ТипыЭлементов =
			МенеджерСхемыКП.ТипыЭлементовСхемыПроцессаПоСхемеКомплексногоПроцесса(Схема);
		
		СхемыПроцессовКлиентСервер.ОбновитьНастройкиПоСхеме(
			ДанныеСхемыПроцесса.Настройки, ДанныеСхемыПроцесса.Схема);
	
	КонецЕсли;
	
	РезультатЗаписи = Справочники.СхемыПроцессов.ЗаписатьДанныеСхемыПроцесса(
		СхемаКП.Ссылка.УникальныйИдентификатор(),
		ДанныеСхемыПроцесса,
		Загрузка);
		
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			РезультатЗаписи.СхемаПроцесса,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(РезультатЗаписи.СхемаПроцесса)));
	КонецЕсли;
	
КонецПроцедуры

// Обновляет параметры схемы для комплексных процессов по схеме комплексного процесса.
// Если параметров нет, то создает их.
// 
// Параметры:
//  СхемаКП - СтрокаТаблицыЗначений - строка таблица с загружаемыми данными схемы КП.
//  Загрузка - Булево - указание для записи в режиме загрузки.
//  ПричинаЗагрузки - Строка
//
Процедура ОбновитьПараметрыСхемыДляКомплексныхПроцессовПоСхемеКП(СхемаКП, Загрузка, ПричинаЗагрузки)
	
	Если ЭтоУдалениеОбъекта(СхемаКП) Тогда
		
		СсылкаНаСхему = Справочники.СхемыПроцессов.ПолучитьСсылку(
			СхемаКП.Ссылка.УникальныйИдентификатор());
		
		ПараметрыСхемы = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(СсылкаНаСхему);
		Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
			Возврат;
		КонецЕсли;
			
		ДаныеПараметров =
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			ПараметрыСхемы);
		
		ДаныеПараметров.ПометкаУдаления = Истина;
		
	Иначе
	
		Схема = СхемаКП.Схема.Получить();
		
		СхемаПроцесса = Справочники.СхемыПроцессов.ПолучитьСсылку(
			СхемаКП.Ссылка.УникальныйИдентификатор());
		
		ПараметрыСхемы = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(СхемаПроцесса);
		Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
			
			ДаныеПараметров =
				Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
				ПараметрыСхемы);
			
		Иначе
			ДаныеПараметров =
				Справочники.ПараметрыСхемДляКомплексныхПроцессов.СтруктураДанныхПараметровСхемы();
				
			ДаныеПараметров.Схема = СхемаПроцесса;
			
			ДаныеПараметров.ВладелецСхемы = СхемаКП.ВладелецСхемы;
			
			ДаныеПараметров.ОбъектДоступа = ДаныеПараметров.ВладелецСхемы; 
			Если ЗначениеЗаполнено(СхемаКП.КомплексныйПроцесс) Тогда		
				ДаныеПараметров.ОбъектДоступа = СхемаКП.КомплексныйПроцесс;
			КонецЕсли;
				
		КонецЕсли;
		
		ДаныеПараметров.НастройкиЭлементов.Очистить();
		ДаныеПараметров.ИдентификаторыНастроек.Очистить();
		ДаныеПараметров.ПорядокСортировкиНастроекЭлементов.Очистить();
		
		ДаныеПараметров.ИсточникДанных = Справочники.ИсточникиДанных.ДО21;
		
		ДаныеПараметров.ПометкаУдаления = СхемаКП.ПометкаУдаления;
		
		Если СхемаКП.ПараметрыДействий <> Null Тогда
			Для Каждого СтрокаТаблицы Из СхемаКП.ПараметрыДействий Цикл
						
				ДаныеПараметров.НастройкиЭлементов[СтрокаТаблицы.Имя] = СтрокаТаблицы.ШаблонПроцесса;
				
				ДаныеПараметров.ИдентификаторыНастроек[СтрокаТаблицы.Имя] = СтрокаТаблицы.Идентификатор;
				
				ДаныеПараметров.ПорядокСортировкиНастроекЭлементов[СтрокаТаблицы.Имя] =
					СтрокаТаблицы.ПорядокСортировки;
					
			КонецЦикла;  
		КонецЕсли;
		
		Если СхемаКП.ПараметрыОбработок <> Null Тогда
			Для Каждого СтрокаТаблицы Из СхемаКП.ПараметрыОбработок Цикл
							
				НаименованиеСкрипта = НаименованиеСкриптаСхемы(
					СхемаПроцесса, СтрокаТаблицы.ИдентификаторСкрипта);
				
				БлокировкаДанных = Новый БлокировкаДанных();
				ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.СкриптыСхемДляКомплексныхПроцессов");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Наименование", НаименованиеСкрипта);
				БлокировкаДанных.Заблокировать();		
	
				СкриптСхемы = СкриптСхемыПоНаименованию(НаименованиеСкрипта);
				Если ЗначениеЗаполнено(СкриптСхемы) Тогда
					ЗаблокироватьДанныеДляРедактирования(СкриптСхемы);
					СкриптСхемыОбъект = СкриптСхемы.ПолучитьОбъект();
				Иначе
					СкриптСхемыОбъект = Справочники.СкриптыСхемДляКомплексныхПроцессов.СоздатьЭлемент();
				КонецЕсли;
				
				СтруктураДляЗаполнения = СкриптСхемыОбъект.СтруктураДанныхДляЗаполнения();
				СтруктураДляЗаполнения.Наименование = НаименованиеСкрипта;
				СтруктураДляЗаполнения.Группа = ГруппаЗагруженныхИз21СкриптовСхемы();
				
				ЭлементСхемы = Схема.ЭлементыГрафическойСхемы.Найти(СтрокаТаблицы.Имя);
				Если ЭлементСхемы <> Неопределено Тогда
					СтруктураДляЗаполнения.Комментарий = ЭлементСхемы.Наименование;
				КонецЕсли;
						
				СтруктураДляЗаполнения.Выражение = СкриптСхемыОбъект.Выражение;
				
				СкриптСхемыОбъект.Заполнить(СтруктураДляЗаполнения);
				
				СкриптСхемыОбъект.ОбменДанными.Загрузка = Загрузка;
				
				СкриптСхемыОбъект.Записать();
				
				Если Загрузка Тогда
					РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
						СкриптСхемыОбъект.Ссылка,
						ПричинаЗагрузки,
						ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СкриптСхемыОбъект.Ссылка)));
				КонецЕсли;
							
				ДаныеПараметров.НастройкиЭлементов[СтрокаТаблицы.Имя] = СкриптСхемыОбъект.Ссылка;
				
				Если ЗначениеЗаполнено(СкриптСхемы) Тогда
					РазблокироватьДанныеДляРедактирования(СкриптСхемы);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если СхемаКП.ПараметрыУсловий <> Null Тогда
			Для Каждого СтрокаТаблицы Из СхемаКП.ПараметрыУсловий Цикл
				
				URLСхемы = ПоместитьВоВременноеХранилище(
					ПолучитьОбщийМакет("СтруктураУсловияСхемыКомплексногоПроцесса"));
				Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
				Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));	
				
				Компоновщик.ЗагрузитьНастройки(
					РаботаСКомплекснымиБизнесПроцессамиСервер.ПустоеУсловиеСхемыКомплексногоПроцесса());
				
				ПрежнееУсловие = СтрокаТаблицы.НастройкиУсловия.Получить();
				
				Если ПрежнееУсловие = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СкопироватьЭлементыОтбораУсловияСхемыВНовуюСтруктуру(
					Компоновщик.Настройки.Отбор.Элементы,
					ПрежнееУсловие.Отбор.Элементы,
					СхемаКП,
					Загрузка,
					ПричинаЗагрузки);
						
				ДаныеПараметров.НастройкиЭлементов[СтрокаТаблицы.Имя] = Компоновщик.ПолучитьНастройки();
								
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;
	
	РезультатЗаписи = 
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ЗаписатьДанныеПараметровСхемы(
			ПараметрыСхемы, ДаныеПараметров, Ложь, Загрузка);
		
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			РезультатЗаписи.ПараметрыСхемы,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(РезультатЗаписи.ПараметрыСхемы)));
	КонецЕсли; 		

КонецПроцедуры

// Копирует элемента отбора условия схемы в новую структуру.
// 
// Параметры:
//  НовыеЭлементы - КоллекцияЭлементовОтбораКомпоновкиДанных - элементы нового отбора
//  ПредыдущиеЭлементы - КоллекцияЭлементовОтбораКомпоновкиДанных - элементы предыдущего отбора
//  СхемаКП - СтрокаТаблицыЗначений - строка таблица с загружаемыми данными схемы КП.
//  Загрузка - Булево - указание для записи в режиме загрузки.
//  ПричинаЗагрузки - Строка
//
Процедура СкопироватьЭлементыОтбораУсловияСхемыВНовуюСтруктуру(
	НовыеЭлементы, ПредыдущиеЭлементы, СхемаКП, Загрузка, ПричинаЗагрузки)
	
	СхемаПроцесса = Справочники.СхемыПроцессов.ПолучитьСсылку(
		СхемаКП.Ссылка.УникальныйИдентификатор());
	
	ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	ПолеУсловиеПоПредметам =
		Новый ПолеКомпоновкиДанных("УсловиеПоПредметам");
		
	ПолеПроверкаПредмета = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияПроверкаПредмета());
	
	ПолеУсловиеПоРезультатамВыполненияДействий = 
		Новый ПолеКомпоновкиДанных("УсловиеПоРезультатамВыполненияДействий");
	
	ПолеРезультатВыполненияДействия = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияРезультатВыполненияДействия());
		
	ПолеВыражениеНаВстроенномЯзыке =
		Новый ПолеКомпоновкиДанных("ВыражениеНаВстроенномЯзыке");
	
	ПолеСкрипт = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияСкрипт());		
	
	МенеджерСхем21 = Справочники.УдалитьСхемыКомплексныхПроцессов;
	
	Для Каждого ПредыдущийЭлемент Из ПредыдущиеЭлементы Цикл
		
		ТипЭлемента = ТипЗнч(ПредыдущийЭлемент);
		
		Если ТипЭлемента = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			НовыйЭлемент = НовыеЭлементы.Добавить(ТипЭлемента);
			НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
			НовыйЭлемент.ТипГруппы = ПредыдущийЭлемент.ТипГруппы;
			
			СкопироватьЭлементыОтбораУсловияСхемыВНовуюСтруктуру(
				НовыйЭлемент.Элементы,
				ПредыдущийЭлемент.Элементы,
				СхемаКП,
				Загрузка,
				ПричинаЗагрузки);
			
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущийЭлемент.ЛевоеЗначение = ПолеУсловиеПоРезультатамВыполненияДействий Тогда
			
			ИмяЭлемента = ПредыдущийЭлемент.ПравоеЗначение.Действие;
			РезультатВыполненияПредыдущий = ПредыдущийЭлемент.ПравоеЗначение.РезультатВыполнения;
						
			Если СхемаКП.ЭлементыСхемы <> Null
				И МенеджерСхем21.ЭтоВложенныйПроцессВСхемеКП(
					ИмяЭлемента, СхемаКП.ЭлементыСхемы) Тогда
				
				НовыйЭлемент = НовыеЭлементы.Добавить(ТипЭлемента);
				НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
				
				НовыйЭлемент.ЛевоеЗначение = ПолеСкрипт;
				
				НовыйЭлемент.ПравоеЗначение =
					МенеджерСхем21.СкриптПроверкиЗавершенностиВложенногоПроцесса(
						ИмяЭлемента,
						ГруппаЗагруженныхИз21СкриптовУсловийСхемы());
				
				Продолжить;								
			КонецЕсли;
			
			Если СхемаКП.ПараметрыДействий <> Null Тогда
				РезультатВыполненияНовые = 
					МенеджерСхем21.РезультатыДействияВУсловииСхемыДляНовойСтруктурыДанных(
						РезультатВыполненияПредыдущий, ИмяЭлемента, СхемаКП.ПараметрыДействий);
			Иначе
				РезультатВыполненияНовые = Новый Массив();
			КонецЕсли;
			
			СтрокаСОтборами = НовыеЭлементы;
			Если РезультатВыполненияНовые.Количество() > 1 Тогда
				НовыйЭлемент = НовыеЭлементы.Добавить(ТипГруппаЭлементовОтбораКомпоновкиДанных);
				НовыйЭлемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
				СтрокаСОтборами = НовыйЭлемент.Элементы;
			КонецЕсли;
			
			Для Каждого РезультатВыполнения Из РезультатВыполненияНовые Цикл
				НовыйЭлемент = СтрокаСОтборами.Добавить(ТипЭлемента);
				НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
				НовыйЭлемент.ЛевоеЗначение = ПолеРезультатВыполненияДействия;
				
				НовыйЭлемент.ПравоеЗначение = 
					РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураУсловияРезультатВыполненияДействия();
				
				НовыйЭлемент.ПравоеЗначение.ИмяДействия = ИмяЭлемента;
				НовыйЭлемент.ПравоеЗначение.РезультатВыполнения = РезультатВыполнения;
				
			КонецЦикла;
		
			Продолжить; 
		КонецЕсли;
		
		НовыйЭлемент = НовыеЭлементы.Добавить(ТипЭлемента);
		НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
					
		Если ПредыдущийЭлемент.ЛевоеЗначение = ПолеУсловиеПоПредметам Тогда
		
			НовыйЭлемент.ЛевоеЗначение = ПолеПроверкаПредмета;
			
			НовыйЭлемент.ПравоеЗначение = 
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
				СтруктураУсловияПроверкаПредмета();
				
			НовыйЭлемент.ПравоеЗначение.ИмяПредмета = ПредыдущийЭлемент.ПравоеЗначение.ИмяПредмета;
			НовыйЭлемент.ПравоеЗначение.АлгоритмПроверки = Справочники.АлгоритмыПроверки.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ПредыдущийЭлемент.ПравоеЗначение.Условие));
				
		ИначеЕсли ПредыдущийЭлемент.ЛевоеЗначение = ПолеВыражениеНаВстроенномЯзыке Тогда
			
			НовыйЭлемент.ЛевоеЗначение = ПолеСкрипт;
			
			НаименованиеСкрипта = НаименованиеСкриптаСхемы(
				СхемаПроцесса, ПредыдущийЭлемент.ПравоеЗначение.Выражение);
				
			БлокировкаДанных = Новый БлокировкаДанных();
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.СкриптыУсловийСхемДляКомплексныхПроцессов");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Наименование", НаименованиеСкрипта);
			БлокировкаДанных.Заблокировать();
					
			СкриптСхемы = СкриптСхемыПоНаименованию(НаименованиеСкрипта);
			СкриптУсловияСхемы = СкриптУсловияСхемыПоНаименованию(НаименованиеСкрипта);
			
			Если ЗначениеЗаполнено(СкриптУсловияСхемы) Тогда
				
				// Используем существующий скрипт условия схемы.
							
				ЗаблокироватьДанныеДляРедактирования(СкриптУсловияСхемы);
				СкриптУсловияСхемыОбъект = СкриптУсловияСхемы.ПолучитьОбъект();
				СтруктураДляЗаполнения = СкриптУсловияСхемыОбъект.СтруктураДанныхДляЗаполнения();
				СтруктураДляЗаполнения.Выражение = СкриптУсловияСхемыОбъект.Выражение;
							
			ИначеЕсли ЗначениеЗаполнено(СкриптСхемы) Тогда
				
				// Если есть скрипт схемы, но нет условия схемы, то создаем скрипт условия схемы и
				// копируем в него выражение из скрипта схемы. 
									
				СкриптУсловияСхемыОбъект = Справочники.СкриптыУсловийСхемДляКомплексныхПроцессов.СоздатьЭлемент();
				СтруктураДляЗаполнения = СкриптУсловияСхемыОбъект.СтруктураДанныхДляЗаполнения();
				
				ВыражениеСкрипта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкриптСхемы, "Выражение"); 
				ВыражениеСкрипта = СтрЗаменить(ВыражениеСкрипта, "Результат", "Параметры.Результат");
				СтруктураДляЗаполнения.Выражение = ВыражениеСкрипта;
							
			Иначе
				// Создаем скрипт схемы для условия
				СкриптУсловияСхемыОбъект = Справочники.СкриптыУсловийСхемДляКомплексныхПроцессов.СоздатьЭлемент();
				СтруктураДляЗаполнения = СкриптУсловияСхемыОбъект.СтруктураДанныхДляЗаполнения();
			КонецЕсли;
			
			СтруктураДляЗаполнения.Наименование = НаименованиеСкрипта;
			СтруктураДляЗаполнения.Комментарий = ПредыдущийЭлемент.ПравоеЗначение.Наименование;
			СтруктураДляЗаполнения.Группа = ГруппаЗагруженныхИз21СкриптовУсловийСхемы();
			
			СкриптУсловияСхемыОбъект.Заполнить(СтруктураДляЗаполнения);
			
			СкриптУсловияСхемыОбъект.ОбменДанными.Загрузка = Загрузка;
			
			СкриптУсловияСхемыОбъект.Записать();
			
			Если Загрузка Тогда
				РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
					СкриптУсловияСхемыОбъект.Ссылка,
					ПричинаЗагрузки,
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СкриптУсловияСхемыОбъект.Ссылка)));
			КонецЕсли;
					
			НовыйЭлемент.ПравоеЗначение = СкриптУсловияСхемыОбъект.Ссылка;
			
			Если ЗначениеЗаполнено(СкриптУсловияСхемы) Тогда
				РазблокироватьДанныеДляРедактирования(СкриптУсловияСхемы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет комплексный процесс по схеме.
// 
// Параметры:
//  СхемаКП - СтрокаТаблицыЗначений - строка таблица с загружаемыми данными схемы КП.
//  Загрузка - Булево - указание для записи в режиме загрузки.
//  ПричинаЗагрузки - Строка
//
Процедура ОбновитьКомплексныйПроцессПоСхеме(СхемаКП, Загрузка, ПричинаЗагрузки)
	
	Если ЭтоУдалениеОбъекта(СхемаКП) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СхемаКП.ВладелецСхемы) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПроцесса = СхемаКП.ВладелецСхемы.УникальныйИдентификатор();
	СсылкаНаПроцесс = БизнесПроцессы.КомплексныйПроцесс.ПолучитьСсылку(ИдентификаторПроцесса);
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("БизнесПроцесс.КомплексныйПроцесс").УстановитьЗначение("Ссылка", СсылкаНаПроцесс);
	Блокировка.Заблокировать();
	
	ЗаблокироватьДанныеДляРедактирования(СсылкаНаПроцесс);
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаПроцесс) Тогда
		ПроцессОбъект = СсылкаНаПроцесс.ПолучитьОбъект();
	Иначе
		ПроцессОбъект = БизнесПроцессы.КомплексныйПроцесс.СоздатьБизнесПроцесс();
		ПроцессОбъект.УстановитьСсылкуНового(СсылкаНаПроцесс);
		ПроцессОбъект.ИсточникДанных = Справочники.ИсточникиДанных.ДО21;
		ПроцессОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПроцессОбъект.ЗадачиЭлементовСхемы.Очистить();
	ПроцессОбъект.ОтметкиПрохожденияСхемы.Очистить();
	ПроцессОбъект.ТекущиеЭлементыСхемы.Очистить();
	
	Если СхемаКП.ЭлементыСхемы <> Null Тогда
		Для Каждого СтрокаТаблицы Из СхемаКП.ЭлементыСхемы Цикл
			
			СтрокаОтметкиПрохождения = ПроцессОбъект.ОтметкиПрохожденияСхемы.Добавить();
			СтрокаОтметкиПрохождения.ИмяЭлемента = СтрокаТаблицы.Имя;
			СтрокаОтметкиПрохождения.Пройден = СтрокаТаблицы.Пройден;
			
			Если СтрокаТаблицы.Текущий Тогда
				СтрокаТекущегоЭлемента = ПроцессОбъект.ТекущиеЭлементыСхемы.Добавить();
				СтрокаТекущегоЭлемента.ИмяЭлемента = СтрокаТаблицы.Имя;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СхемаКП.ПараметрыДействий <> Null Тогда
		Для Каждого СтрокаТаблицы Из СхемаКП.ПараметрыДействий Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Процесс) Тогда
				Продолжить;
			КонецЕсли;
			 
			Если ОбщегоНазначения.СсылкаСуществует(СтрокаТаблицы.Процесс) Тогда
				//@skip-warning
				ЗадачаЭлемента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаТаблицы.Процесс, "ВедущаяЗадача");
			Иначе
				ЗадачаЭлемента = ВедущаяЗадачаНесуществующегоПроцесса(СтрокаТаблицы.Процесс);
			КонецЕсли;
			
			СтрокаСЗадачейЭлемента = ПроцессОбъект.ЗадачиЭлементовСхемы.Добавить();
			СтрокаСЗадачейЭлемента.ИмяЭлемента = СтрокаТаблицы.Имя;
			СтрокаСЗадачейЭлемента.ЗадачаПроцесса = ЗадачаЭлемента;
				
		КонецЦикла;  
	КонецЕсли;
	
	ПроцессОбъект.ДополнительныеСвойства.Вставить("ОтключитьОтметкиВремени", Истина);
	ПроцессОбъект.ОбменДанными.Загрузка = Загрузка;
	ПроцессОбъект.Записать();
		
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			ПроцессОбъект.Ссылка,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПроцессОбъект.Ссылка)));
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(СсылкаНаПроцесс);
	
КонецПроцедуры

// Возвращает ведущую задачу несуществующего процесса.
// 
// Формирует ссылку на задачу по уникальному идентификатору ссылки процесса.
// 
// Следует использовать если вместо ссылки на процесс следует подставить его задачу.
// При это нужно проконтролировать подмену этой ссылки, при загрузке процесса.
// 
// Параметры:
//  СсылкаНаПроцесс - БизнесПроцессСсылка
// 
// Возвращаемое значение:
//  ЗадачаСсылка.ЗадачаИсполнителя
//
Функция ВедущаяЗадачаНесуществующегоПроцесса(СсылкаНаПроцесс)
	
	Возврат Задачи.ЗадачаИсполнителя.ПолучитьСсылку(СсылкаНаПроцесс.УникальныйИдентификатор());
	
КонецФункции

// Выполняет замену задач элементов в комплексных процессах.
// Подменяется Задача1 на Задача2.
// 
// Параметры:
//  Задача1 - ЗадачаСсылка.ЗадачаИсполнителя
//  Задача2 - ЗадачаСсылка.ЗадачаИсполнителя
//  Загрузка - Булево - указание для записи в режиме загрузки.
//  ПричинаЗагрузки - Строка
//
Процедура ЗаменитьЗадачиЭлементовВКомплексныхПроцессов(Задача1, Задача2, Загрузка, ПричинаЗагрузки)
	
	Процесс = КомплексныйПроцессПоЗадачеЭлемента(Задача1);
	Если Не ЗначениеЗаполнено(Процесс) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("БизнесПроцесс.КомплексныйПроцесс").УстановитьЗначение("Ссылка", Процесс);
	Блокировка.Заблокировать();
	
	ЗаблокироватьДанныеДляРедактирования(Процесс);
	
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	
	Отбор = Новый Структура("ЗадачаПроцесса", Задача1);
	Для Каждого СтрокаТаблицы Из ПроцессОбъект.ЗадачиЭлементовСхемы.НайтиСтроки(Отбор) Цикл
		СтрокаТаблицы.ЗадачаПроцесса = Задача2;
	КонецЦикла; 
	
	ПроцессОбъект.ДополнительныеСвойства.Вставить("ОтключитьОтметкиВремени", Истина);
	ПроцессОбъект.ОбменДанными.Загрузка = Загрузка;
	ПроцессОбъект.Записать();
		
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			ПроцессОбъект.Ссылка,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПроцессОбъект.Ссылка)));
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Процесс);
	
КонецПроцедуры

// Возвращает комплексный процесс по задаче элемента.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
// 
// Возвращаемое значение:
//  БизнесПроцессСсылка.КомплексныйПроцесс
//  
Функция КомплексныйПроцессПоЗадачеЭлемента(ЗадачаПроцесса)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КомплексныйПроцессЗадачиЭлементовСхемы.Ссылка
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.ЗадачиЭлементовСхемы КАК КомплексныйПроцессЗадачиЭлементовСхемы
		|ГДЕ
		|	КомплексныйПроцессЗадачиЭлементовСхемы.ЗадачаПроцесса = &ЗадачаПроцесса";
		
	Запрос.УстановитьПараметр("ЗадачаПроцесса", ЗадачаПроцесса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат БизнесПроцессы.КомплексныйПроцесс.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#Область КонтрольКомплексногоПроцесса

// Возвращает ссылку на контрольную карточку по данным задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - строка таблицы с загружаемыми данными задачи КП.
//
// Возвращаемое значение:
//  СправочникОбъект.Контроль
//
Функция КонтрольнаяКарточкаПоЗадаче(Задача)
	
	Возврат Справочники.Контроль.ПолучитьСсылку(Задача.Ссылка.УникальныйИдентификатор());
	
КонецФункции

// Обновляет контрольную карточку по задаче контроля комплексного процесса.
// 
// Параметры:
//  Задача - СтрокаТаблицыЗначений - строка таблицы с загружаемыми данными задачи КП.
//  Загрузка - Булево
//  ПричинаЗагрузки - Булево
//
// Возвращаемое значение:
//  СправочникОбъект.Контроль, Неопределено
//
Функция ОбновитьКонтрольнуюКарточкуПоЗадачеКонтроляКомплексногоПроцесса(
	Задача, Загрузка, ПричинаЗагрузки)
	
	СсылкаНаКонтроль = КонтрольнаяКарточкаПоЗадаче(Задача);
	КонтрольСуществует = ОбщегоНазначения.СсылкаСуществует(СсылкаНаКонтроль);
	
	Если Не КонтрольСуществует
		И (Задача.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
			Или ЭтоУдалениеОбъекта(Задача)) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(СсылкаНаКонтроль);
	
	Если ЭтоУдалениеОбъекта(Задача) Тогда
		КонтрольОбъект = СсылкаНаКонтроль.ПолучитьОбъект();
		КонтрольОбъект.ПометкаУдаления = Истина;
	Иначе
		Если КонтрольСуществует Тогда
			КонтрольОбъект = СсылкаНаКонтроль.ПолучитьОбъект();
		Иначе
			КонтрольОбъект = Справочники.Контроль.СоздатьЭлемент();
			КонтрольОбъект.УстановитьСсылкуНового(СсылкаНаКонтроль);
			
			КонтрольОбъект.ИсточникДанных = Справочники.ИсточникиДанных.ДО21;
			
			КонтрольОбъект.Автор = Задача.Автор;
			КонтрольОбъект.ПоставленНаКонтроль = Истина;
			КонтрольОбъект.ДатаПостановкиНаКонтроль = Задача.Дата;
			
			КонтрольОбъект.Предмет = Задача.БизнесПроцесс;
		
		КонецЕсли;
		
		КонтрольОбъект.Контролер = Задача.ТекущийИсполнитель;
		
		КонтрольОбъект.Описание = Задача.Наименование;
		КонтрольОбъект.СрокИсполнения = Задача.СрокИсполнения;
		
		Если Задача.Выполнена
			Или Задача.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
			
			КонтрольОбъект.СнятСКонтроля = Истина;
			КонтрольОбъект.ДатаСнятияСКонтроля = Задача.ДатаИсполнения;
		Иначе
			КонтрольОбъект.СнятСКонтроля = Ложь;
			КонтрольОбъект.ДатаСнятияСКонтроля = Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;
	
	КонтрольОбъект.ОбменДанными.Загрузка = Загрузка;
	
	КонтрольОбъект.Записать();
	
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			КонтрольОбъект.Ссылка,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("СправочникСсылка.Контроль")));
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(СсылкаНаКонтроль);
	
	Возврат КонтрольОбъект;
	
КонецФункции

#КонецОбласти

// Выполняет конвертацию загружаемого комплексного процесса из 2.1 в 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияКомплексногоПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("БизнесПроцесс.КомплексныйПроцесс").УстановитьЗначение("Ссылка", Источник.Ссылка);
	Блокировка.Заблокировать();
	
	ЗаблокироватьДанныеДляРедактирования(Источник.Ссылка);
	
	Если Не ЭтоУдалениеОбъекта(Источник) Тогда
	
		Источник.УзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
		
		Если ЗначениеЗаполнено(Источник.Схема) Тогда
			Источник.Схема = Справочники.СхемыПроцессов.ПолучитьСсылку(
				Источник.Схема.УникальныйИдентификатор());
		КонецЕсли;
		
		Если Источник.ПредметыЗадач <> Null Тогда
		
			// Удаляем строки соответствующие точке маршрута Контролер.
			
			Индекс = Источник.ПредметыЗадач.Количество() - 1;
			Пока Индекс >= 0 Цикл
				
				СтрокаТаблицы = Источник.ПредметыЗадач[Индекс];
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторЭтапа)
					И Не ЗначениеЗаполнено(СтрокаТаблицы.ШаблонБизнесПроцесса)
					И ЗначениеЗаполнено(СтрокаТаблицы.ТочкаМаршрута)
					И Не ЗначениеЗаполнено(СтрокаТаблицы.ТочкаМаршрута.Вид) Тогда
					
					Источник.ПредметыЗадач.Удалить(Индекс);
				КонецЕсли;
				
				Индекс = Индекс - 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Восстанавливаем сведения загруженные в процесс из схемы.
		Если ОбщегоНазначения.СсылкаСуществует(Источник.Ссылка) Тогда
			
			Если Порция.Колонки.Найти("ЗадачиЭлементовСхемы") = Неопределено Тогда
				Порция.Колонки.Добавить("ЗадачиЭлементовСхемы");
			КонецЕсли;
			Если Порция.Колонки.Найти("ОтметкиПрохожденияСхемы") = Неопределено Тогда
				Порция.Колонки.Добавить("ОтметкиПрохожденияСхемы");
			КонецЕсли;
			Если Порция.Колонки.Найти("ТекущиеЭлементыСхемы") = Неопределено Тогда
				Порция.Колонки.Добавить("ТекущиеЭлементыСхемы");
			КонецЕсли;
			
			РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Источник.Ссылка, "ЗадачиЭлементовСхемы, ОтметкиПрохожденияСхемы, ТекущиеЭлементыСхемы");
			
			Источник.ЗадачиЭлементовСхемы = РеквизитыПроцесса.ЗадачиЭлементовСхемы.Выгрузить();
			Источник.ОтметкиПрохожденияСхемы = РеквизитыПроцесса.ОтметкиПрохожденияСхемы.Выгрузить();
			Источник.ТекущиеЭлементыСхемы = РеквизитыПроцесса.ТекущиеЭлементыСхемы.Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	РазблокироватьДанныеДляРедактирования(Источник.Ссылка);
	
КонецПроцедуры

Процедура КонвертацияУровниКонтроля(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СсылкаНаЭлемент = Источник.Ссылка;
	
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
	ЭтоНовыйЭлемент = СсылкаНаЭлемент.Пустая() Или СсылкаНаЭлемент.ПолучитьОбъект() = Неопределено;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	Если ЭтоНовыйЭлемент Тогда
		
		// прямо в обработчике загрузки этого метаданного смотреть по имени - если уже есть такое в 3.0, 
		// создать объект из 2.1 (с GUID 2.1), 
		// скопировать в него свойства из объекта 3.0 (с тем же наименованием), 
		//объект 3.0 удалить.
		
		Элемент30 = НайтиПоНаименованию(Источник.Наименование, СсылкаНаЭлемент);
		Если ЗначениеЗаполнено(Элемент30) Тогда
			
			Элемент30Объект = Элемент30.ПолучитьОбъект();
			СсылкаНаЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(СсылкаНаЭлементОбъект, Элемент30Объект, , 
				"Код, Родитель, Владелец, Ссылка, ЭтоГруппа, ЭтотОбъект");
	
			Элемент30Объект.Удалить();
			СсылкаНаЭлементОбъект.Записать();
			
		КонецЕсли;	
	
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияВидыБизнесСобытий(Источник, Приемник, Порция, СтандартнаяОбработка, 
	ПараметрыЗагрузки)
	
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ИмяПредопределенныхДанных = Источник.ИмяПредопределенныхДанных;
	Если ЗначениеЗаполнено(ИмяПредопределенныхДанных) И Источник.ПометкаУдаления Тогда
		Возврат; // тут не пишем
	КонецЕсли;

	Если Источник.ПометкаУдаления Тогда
		Возврат; // тут не пишем
	КонецЕсли;
	
	НужнаЗаменаСсылки = Ложь;
	НоваяСсылка = Неопределено;
		
	Если ЗначениеЗаполнено(ИмяПредопределенныхДанных) Тогда	
		Если ИмяПредопределенныхДанных = "РегистрацияВнутреннегоДокумента" Тогда
			Источник.ИмяПредопределенныхДанных = "РегистрацияДокумента";
			Источник.Наименование = СокрЛП(Справочники.ВидыБизнесСобытий.РегистрацияДокумента);
			
		ИначеЕсли ИмяПредопределенныхДанных = "ИзменениеВнутреннегоДокумента" Тогда
			Источник.ИмяПредопределенныхДанных = "ИзменениеДокумента";
			Источник.Наименование = СокрЛП(Справочники.ВидыБизнесСобытий.ИзменениеДокумента);
			
		ИначеЕсли ИмяПредопределенныхДанных = "ПеререгистрацияВнутреннегоДокумента" Тогда
			Источник.ИмяПредопределенныхДанных = "ПеререгистрацияДокумента";
			Источник.Наименование = СокрЛП(Справочники.ВидыБизнесСобытий.ПеререгистрацияДокумента);
			
		ИначеЕсли ИмяПредопределенныхДанных = "СозданиеВнутреннегоДокумента" Тогда
			Источник.ИмяПредопределенныхДанных = "СозданиеДокумента";
			Источник.Наименование = СокрЛП(Справочники.ВидыБизнесСобытий.СозданиеДокумента);
		
		// Записываем, и помечаем на удаление как не действительные 
		ИначеЕсли ИмяПредопределенныхДанных = "ИзменениеВходящегоДокумента"
			Или ИмяПредопределенныхДанных = "ИзменениеИсходящегоДокумента"
			Или ИмяПредопределенныхДанных = "ПеререгистрацияВходящегоДокумента"
			Или ИмяПредопределенныхДанных = "ПеререгистрацияИсходящегоДокумента"
			Или ИмяПредопределенныхДанных = "РегистрацияВходящегоДокумента"
			Или ИмяПредопределенныхДанных = "РегистрацияИсходящегоДокумента"
			Или ИмяПредопределенныхДанных = "СозданиеВходящегоДокумента"
			Или ИмяПредопределенныхДанных = "СозданиеИсходящегоДокумента" Тогда
				
			Источник.Наименование = ИмяПредопределенныхДанных;
			Источник.ИмяПредопределенныхДанных = "";
			Источник.ПометкаУдаления = Истина;
			
			НужнаЗаменаСсылки = Истина;
			НоваяСсылка = Неопределено;
			
			Если ИмяПредопределенныхДанных = "ИзменениеВходящегоДокумента"
				Или ИмяПредопределенныхДанных = "ИзменениеИсходящегоДокумента" Тогда
				НоваяСсылка = Справочники.ВидыБизнесСобытий.ИзменениеДокумента;
			КонецЕсли;		
	
			Если ИмяПредопределенныхДанных = "ПеререгистрацияВходящегоДокумента"
				Или ИмяПредопределенныхДанных = "ПеререгистрацияИсходящегоДокумента" Тогда
				НоваяСсылка = Справочники.ВидыБизнесСобытий.ПеререгистрацияДокумента;
			КонецЕсли;		
	
			Если ИмяПредопределенныхДанных = "РегистрацияВходящегоДокумента"
				Или ИмяПредопределенныхДанных = "РегистрацияИсходящегоДокумента" Тогда
				НоваяСсылка = Справочники.ВидыБизнесСобытий.РегистрацияДокумента;
			КонецЕсли;		
	
			Если ИмяПредопределенныхДанных = "СозданиеВходящегоДокумента"
				Или ИмяПредопределенныхДанных = "СозданиеИсходящегоДокумента" Тогда
				НоваяСсылка = Справочники.ВидыБизнесСобытий.СозданиеДокумента;
			КонецЕсли;		
			
		КонецЕсли;
	
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	Если НужнаЗаменаСсылки Тогда	
		ЗаменитьСсылкуВидаБизнесСобытия(Источник.Ссылка, НоваяСсылка, 
			ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
	КонецЕсли;	
	
КонецПроцедуры

// Выполняет замену ссылок на нужный вид бизнес событий
// 
// Параметры:
//  СтараяСсылка - СправочникСсылка.ВидыБизнесСобытий
//  НоваяСсылка - СправочникСсылка.ВидыБизнесСобытий
//  Загрузка - Булево
//  ПричинаЗагрузки - Строка
// 
Процедура ЗаменитьСсылкуВидаБизнесСобытия(СтараяСсылка, НоваяСсылка, Загрузка, ПричинаЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСобытия", СтараяСсылка);
	
	// Справочник.ДетекторыБизнесСобытий.Реквизит.ВидСобытия.Тип
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДетекторыБизнесСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДетекторыБизнесСобытий КАК ДетекторыБизнесСобытий
		|ГДЕ
		|	ДетекторыБизнесСобытий.ВидСобытия = &ВидСобытия";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СпрОбъект.ВидСобытия = НоваяСсылка;
				
		СпрОбъект.ОбменДанными.Загрузка = Загрузка;
		
		СпрОбъект.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				СпрОбъект.Ссылка,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СпрОбъект.Ссылка)));
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
	КонецЦикла;	
	
	// РегистрСведений.НастройкиУведомлений.Измерение.ВидСобытия.Тип
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиУведомлений.Пользователь,
		|	НастройкиУведомлений.Настройка,
		|	НастройкиУведомлений.ВидСобытия,
		|	НастройкиУведомлений.СпособУведомления,
		|	НастройкиУведомлений.Объект,
		|	НастройкиУведомлений.Значение
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.ВидСобытия = &ВидСобытия";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи с новой ссылкой на вид бизнес события
		
		Набор = РегистрыСведений.НастройкиУведомлений.СоздатьНаборЗаписей();
		Набор.Отбор.ВидСобытия.Установить(НоваяСсылка);
		Набор.Отбор.Пользователь.Установить(Выборка.Пользователь);
		Набор.Отбор.Настройка.Установить(Выборка.Настройка);
		Набор.Отбор.СпособУведомления.Установить(Выборка.СпособУведомления);
		Набор.Отбор.Объект.Установить(Выборка.Объект);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ВидСобытия = НоваяСсылка;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи со старой ссылкой на вид бизнес события
		
		Набор = РегистрыСведений.НастройкиУведомлений.СоздатьНаборЗаписей();
		Набор.Отбор.ВидСобытия.Установить(Выборка.ВидСобытия); // Выборка.ВидСобытия - тут старая ссылка
		Набор.Отбор.Пользователь.Установить(Выборка.Пользователь);
		Набор.Отбор.Настройка.Установить(Выборка.Настройка);
		Набор.Отбор.СпособУведомления.Установить(Выборка.СпособУведомления);
		Набор.Отбор.Объект.Установить(Выборка.Объект);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла; 
	
	// РегистрСведений.ОбработанныеУведомления.Измерение.ВидСобытия.Тип
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбработанныеУведомления.ВидСобытия,
		|	ОбработанныеУведомления.ОбъектУведомления,
		|	ОбработанныеУведомления.Пользователь,
		|	ОбработанныеУведомления.ДатаОбработки
		|ИЗ
		|	РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|ГДЕ
		|	ОбработанныеУведомления.ВидСобытия = &ВидСобытия";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи с новой ссылкой на вид бизнес события
		
		Набор = РегистрыСведений.ОбработанныеУведомления.СоздатьНаборЗаписей();
		Набор.Отбор.ВидСобытия.Установить(НоваяСсылка);
		Набор.Отбор.Пользователь.Установить(Выборка.Пользователь);
		Набор.Отбор.ОбъектУведомления.Установить(Выборка.ОбъектУведомления);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ВидСобытия = НоваяСсылка;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи со старой ссылкой на вид бизнес события
		
		Набор = РегистрыСведений.ОбработанныеУведомления.СоздатьНаборЗаписей();
		Набор.Отбор.ВидСобытия.Установить(Выборка.ВидСобытия); // Выборка.ВидСобытия - тут старая ссылка
		Набор.Отбор.Пользователь.Установить(Выборка.Пользователь);
		Набор.Отбор.ОбъектУведомления.Установить(Выборка.ОбъектУведомления);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла; 
	
	// РегистрСведений.ПодпискиНаБизнесСобытия.Измерение.ВидСобытия.Тип
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПодпискиНаБизнесСобытия.ВидСобытия,
		|	ПодпискиНаБизнесСобытия.Потребитель
		|ИЗ
		|	РегистрСведений.ПодпискиНаБизнесСобытия КАК ПодпискиНаБизнесСобытия
		|ГДЕ
		|	ПодпискиНаБизнесСобытия.ВидСобытия = &ВидСобытия";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи с новой ссылкой на вид бизнес события
		
		Набор = РегистрыСведений.ПодпискиНаБизнесСобытия.СоздатьНаборЗаписей();
		Набор.Отбор.ВидСобытия.Установить(НоваяСсылка);
		Набор.Отбор.Потребитель.Установить(Выборка.Потребитель);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ВидСобытия = НоваяСсылка;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи со старой ссылкой на вид бизнес события
		
		Набор = РегистрыСведений.ПодпискиНаБизнесСобытия.СоздатьНаборЗаписей();
		Набор.Отбор.ВидСобытия.Установить(Выборка.ВидСобытия); // Выборка.ВидСобытия - тут старая ссылка
		Набор.Отбор.Потребитель.Установить(Выборка.Потребитель);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла; 
	
	// РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.Измерение.ВидБизнесСобытия.Тип
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ОрганизацияИсточникаБизнесСобытия,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.Условие
		|ИЗ
		|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
		|ГДЕ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия = &ВидСобытия";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи с новой ссылкой на вид бизнес события
		
		Набор = РегистрыСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.ВидБизнесСобытия.Установить(НоваяСсылка);
		Набор.Отбор.КлассИсточникаБизнесСобытия.Установить(Выборка.КлассИсточникаБизнесСобытия);
		Набор.Отбор.ОрганизацияИсточникаБизнесСобытия.Установить(Выборка.ОрганизацияИсточникаБизнесСобытия);
		Набор.Отбор.ШаблонБизнесПроцесса.Установить(Выборка.ШаблонБизнесПроцесса);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ВидБизнесСобытия = НоваяСсылка;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи со старой ссылкой на вид бизнес события
		
		Набор = РегистрыСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.ВидБизнесСобытия.Установить(Выборка.ВидБизнесСобытия); // Выборка.ВидБизнесСобытия - тут старая ссылка
		Набор.Отбор.КлассИсточникаБизнесСобытия.Установить(Выборка.КлассИсточникаБизнесСобытия);
		Набор.Отбор.ОрганизацияИсточникаБизнесСобытия.Установить(Выборка.ОрганизацияИсточникаБизнесСобытия);
		Набор.Отбор.ШаблонБизнесПроцесса.Установить(Выборка.ШаблонБизнесПроцесса);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла; 
	
	// РегистрСведений.СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.Измерение.ВидСобытия.Тип
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.ВидСобытия,
		|	СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.Обработчик
		|ИЗ
		|	РегистрСведений.СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий КАК
		|		СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий
		|ГДЕ
		|	СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.ВидСобытия = &ВидСобытия";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи с новой ссылкой на вид бизнес события
		
		Набор = РегистрыСведений.СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.СоздатьНаборЗаписей();
		Набор.Отбор.ВидСобытия.Установить(НоваяСсылка);
		Набор.Отбор.Обработчик.Установить(Выборка.Обработчик);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ВидСобытия = НоваяСсылка;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи со старой ссылкой на вид бизнес события
		
		Набор = РегистрыСведений.СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.СоздатьНаборЗаписей();
		Набор.Отбор.ВидСобытия.Установить(Выборка.ВидСобытия); // Выборка.ВидСобытия - тут старая ссылка
		Набор.Отбор.Обработчик.Установить(Выборка.Обработчик);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла; 
	
КонецПроцедуры

// Выполняет замену ссылок на нужный тип связи
// 
// Параметры:
//  СтараяСсылка - СправочникСсылка.ТипыСвязей
//  НоваяСсылка - СправочникСсылка.ТипыСвязей
//  Загрузка - Булево
//  ПричинаЗагрузки - Строка
// 
Процедура ЗаменитьСсылкуТипаСвязи(СтараяСсылка, НоваяСсылка, Загрузка, ПричинаЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипСвязи", СтараяСсылка);
	
	// РегистрСведений.НастройкаСвязей.Измерение.ТипСвязи.Тип
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи,
		|	НастройкаСвязей.СсылкаИз,
		|	НастройкаСвязей.СсылкаНа,
		|	НастройкаСвязей.ВидКорреспонденцииДокументИз,
		|	НастройкаСвязей.ВидКорреспонденцииДокументНа,
		|	НастройкаСвязей.ХарактерСвязи,
		|	НастройкаСвязей.ТипОбратнойСвязи,
		|	НастройкаСвязей.ХарактерОбратнойСвязи,
		|	НастройкаСвязей.Важная,
		|	НастройкаСвязей.Комментарий,
		|	НастройкаСвязей.Обязательная,
		|	НастройкаСвязей.СинхронизироватьДоступ
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.ТипСвязи = &ТипСвязи";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи с новой ссылкой
		
		Набор = РегистрыСведений.НастройкаСвязей.СоздатьНаборЗаписей();
		Набор.Отбор.ТипСвязи.Установить(НоваяСсылка);
		Набор.Отбор.СсылкаИз.Установить(Выборка.СсылкаИз);
		Набор.Отбор.СсылкаНа.Установить(Выборка.СсылкаНа);
		Набор.Отбор.ВидКорреспонденцииДокументИз.Установить(Выборка.ВидКорреспонденцииДокументИз);
		Набор.Отбор.ВидКорреспонденцииДокументНа.Установить(Выборка.ВидКорреспонденцииДокументНа);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ТипСвязи = НоваяСсылка;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи со старой ссылкой
		
		Набор = РегистрыСведений.НастройкаСвязей.СоздатьНаборЗаписей();
		Набор.Отбор.ТипСвязи.Установить(Выборка.ТипСвязи); // Выборка.ТипСвязи - тут старая ссылка
		Набор.Отбор.СсылкаИз.Установить(Выборка.СсылкаИз);
		Набор.Отбор.СсылкаНа.Установить(Выборка.СсылкаНа);
		Набор.Отбор.ВидКорреспонденцииДокументИз.Установить(Выборка.ВидКорреспонденцииДокументИз);
		Набор.Отбор.ВидКорреспонденцииДокументНа.Установить(Выборка.ВидКорреспонденцииДокументНа);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла; 
	
	// РегистрСведений.СвязиОбъектов.Измерение.ТипСвязи.Тип
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязиОбъектов.Объект,
		|	СвязиОбъектов.ТипСвязи,
		|	СвязиОбъектов.СвязанныйОбъект,
		|	СвязиОбъектов.СвязаннаяСтрока,
		|	СвязиОбъектов.ДополнительныйОбъектСвязи,
		|	СвязиОбъектов.СвязанныйОбъектОтправлен,
		|	СвязиОбъектов.Комментарий,
		|	СвязиОбъектов.Установил,
		|	СвязиОбъектов.ДатаУстановки,
		|	СвязиОбъектов.Порядок
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.ТипСвязи = &ТипСвязи";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пишем новые записи с новой ссылкой
		
		Набор = РегистрыСведений.СвязиОбъектов.СоздатьНаборЗаписей();
		Набор.Отбор.ТипСвязи.Установить(НоваяСсылка);
		Набор.Отбор.Объект.Установить(Выборка.Объект);
		Набор.Отбор.СвязанныйОбъект.Установить(Выборка.СвязанныйОбъект);
		Набор.Отбор.СвязаннаяСтрока.Установить(Выборка.СвязаннаяСтрока);
		Набор.Отбор.ДополнительныйОбъектСвязи.Установить(Выборка.ДополнительныйОбъектСвязи);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ТипСвязи = НоваяСсылка;
		
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;	
		
		// Удаляем записи со старой ссылкой
		
		Набор = РегистрыСведений.СвязиОбъектов.СоздатьНаборЗаписей();
		Набор.Отбор.ТипСвязи.Установить(Выборка.ТипСвязи); // Выборка.ТипСвязи - тут старая ссылка
		Набор.Отбор.Объект.Установить(Выборка.Объект);
		Набор.Отбор.СвязанныйОбъект.Установить(Выборка.СвязанныйОбъект);
		Набор.Отбор.СвязаннаяСтрока.Установить(Выборка.СвязаннаяСтрока);
		Набор.Отбор.ДополнительныйОбъектСвязи.Установить(Выборка.ДополнительныйОбъектСвязи);
		
		Набор.ОбменДанными.Загрузка = Загрузка;
				
		Набор.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
				Набор, ПричинаЗагрузки);	
		КонецЕсли;
			
	КонецЦикла; 
	
КонецПроцедуры

// Возвращает корректную ссылку ВидБизнесСобытия
//
// Параметры:
//  ВидБизнесСобытия - СправочникСсылка.ВидыБизнесСобытий
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыБизнесСобытий
//
Функция СсылкаНаВидБизнесСобытия(ВидБизнесСобытия)
	
	// тут не можем прочитать, оставляем как есть
	Если Не ОбщегоНазначения.СсылкаСуществует(ВидБизнесСобытия) Тогда
		Возврат ВидБизнесСобытия;
	КонецЕсли;
	
	РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидБизнесСобытия, 
		"ПометкаУдаления, Наименование, ИмяПредопределенныхДанных");
		
	Если РеквизитыВида.ПометкаУдаления = Истина 
		И РеквизитыВида.ИмяПредопределенныхДанных = "" Тогда
			
		Если РеквизитыВида.Наименование = "ИзменениеВходящегоДокумента"
			Или РеквизитыВида.Наименование = "ИзменениеИсходящегоДокумента" Тогда
			Возврат Справочники.ВидыБизнесСобытий.ИзменениеДокумента;
		КонецЕсли;		

		Если РеквизитыВида.Наименование = "ПеререгистрацияВходящегоДокумента"
			Или РеквизитыВида.Наименование = "ПеререгистрацияИсходящегоДокумента" Тогда
			Возврат Справочники.ВидыБизнесСобытий.ПеререгистрацияДокумента;
		КонецЕсли;		

		Если РеквизитыВида.Наименование = "РегистрацияВходящегоДокумента"
			Или РеквизитыВида.Наименование = "РегистрацияИсходящегоДокумента" Тогда
			Возврат Справочники.ВидыБизнесСобытий.РегистрацияДокумента;
		КонецЕсли;		

		Если РеквизитыВида.Наименование = "СозданиеВходящегоДокумента"
			Или РеквизитыВида.Наименование = "СозданиеИсходящегоДокумента" Тогда
			Возврат Справочники.ВидыБизнесСобытий.СозданиеДокумента;
		КонецЕсли;		
		
	КонецЕсли;		

	Возврат ВидБизнесСобытия;
	
КонецФункции

// Возвращает корректную ссылку Тип связи
//
// Параметры:
//  ТипСвязи - СправочникСсылка.ТипыСвязей
//
// Возвращаемое значение:
//  СправочникСсылка.ТипыСвязей
//
Функция СсылкаНаТипСвязи(ТипСвязи)
	
	// тут не можем прочитать, оставляем как есть
	Если Не ОбщегоНазначения.СсылкаСуществует(ТипСвязи) Тогда
		Возврат ТипСвязи;
	КонецЕсли;
	
	РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТипСвязи, 
		"ПометкаУдаления, Наименование, ИмяПредопределенныхДанных");
		
	Если РеквизитыВида.ПометкаУдаления = Истина 
		И РеквизитыВида.ИмяПредопределенныхДанных = "" Тогда
			
		Попытка
			НовыйТипСвязи = Справочники.ТипыСвязей[РеквизитыВида.Наименование];
		Исключение
			НовыйТипСвязи = ТипСвязи;
		КонецПопытки;	
		
		ТипСвязи = НовыйТипСвязи; 
	КонецЕсли;		

	Возврат ТипСвязи;
	
КонецФункции

Процедура КонвертацияТомаХраненияФайлов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СсылкаНаЭлемент = Источник.Ссылка;
	
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
	ЭтоНовыйЭлемент = СсылкаНаЭлемент.Пустая() Или СсылкаНаЭлемент.ПолучитьОбъект() = Неопределено;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	Если ЭтоНовыйЭлемент Тогда
		
		// прямо в обработчике загрузки этого метаданного смотреть по имени - если уже есть такое в 3.0, 
		// создать объект из 2.1 (с GUID 2.1), 
		// скопировать в него свойства из объекта 3.0 (с тем же наименованием), 
		//объект 3.0 удалить.
		
		Элемент30 = НайтиПоНаименованию(Источник.Наименование, СсылкаНаЭлемент);
		Если ЗначениеЗаполнено(Элемент30) Тогда
			
			Элемент30Объект = Элемент30.ПолучитьОбъект();
			СсылкаНаЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(СсылкаНаЭлементОбъект, Элемент30Объект, , 
				"Код, Владелец, Ссылка, ЭтотОбъект, Комментарий, МаксимальныйРазмер, ПолныйПутьLinux, ПолныйПутьWindows, ПорядокЗаполнения");
	
			Элемент30Объект.Удалить();
			СсылкаНаЭлементОбъект.Записать();
			
		КонецЕсли;	

	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПапкуДляФайловБезВладельца()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПапки = "_Файлы без владельца_";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПапкиФайлов.Ссылка
	|ИЗ
	|	Справочник.ПапкиФайлов КАК ПапкиФайлов
	|ГДЕ
	|	ПапкиФайлов.ПометкаУдаления = ИСТИНА
	|	И ПапкиФайлов.Наименование ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("Наименование", ИмяПапки);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
		
	СпрОбъект = Справочники.ПапкиФайлов.СоздатьЭлемент();
	СпрОбъект.Наименование = ИмяПапки;
	СпрОбъект.ПометкаУдаления = Истина;
	
	СпрОбъект.Записать();
	Возврат СпрОбъект.Ссылка;	
	
КонецФункции	

Процедура КонвертацияФайлы(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ЗаменитьИмяКолонки(Порция, "ТекстХранилище", "УдалитьТекстХранилище");

	ТекстХранилище = Источник.УдалитьТекстХранилище;
	Источник.УдалитьТекстХранилище = Новый ХранилищеЗначения(""); 
	
	Если Не ЗначениеЗаполнено(Источник.ВладелецФайла) Тогда
		
		Источник.ВладелецФайла = ПолучитьПапкуДляФайловБезВладельца(); 
				
	КонецЕсли;	
	
	ЭтоФайлВОбъектеСИсточникомДанных = Ложь;
	
	Если ОбщегоНазначения.ЭтоБизнесПроцесс(Источник.ВладелецФайла.Метаданные()) Тогда
		
		ЭтоФайлВОбъектеСИсточникомДанных = Истина;
		
	ИначеЕсли ТипЗнч(Источник.ВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия")
		Или ТипЗнч(Источник.ВладелецФайла) = Тип("СправочникСсылка.Мероприятия") 
		Или ТипЗнч(Источник.ВладелецФайла) = Тип("СправочникСсылка.СообщенияОбсуждений") 
		Или ТипЗнч(Источник.ВладелецФайла) = Тип("ДокументСсылка.ВходящееПисьмо")
		Или ТипЗнч(Источник.ВладелецФайла) = Тип("ДокументСсылка.ИсходящееПисьмо")
		Или ТипЗнч(Источник.ВладелецФайла) = Тип("ДокументСсылка.Задача")
		Или ТипЗнч(Источник.ВладелецФайла) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		ЭтоФайлВОбъектеСИсточникомДанных = Истина;
	КонецЕсли;
	
	ПараметрыЗагрузки.ЗаполнятьИсточникДанных = ЭтоФайлВОбъектеСИсточникомДанных;

	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	РегистрыСведений.ТекстыФайлов.ДобавитьЗапись(Источник.Ссылка, ТекстХранилище);	

КонецПроцедуры

Процедура КонвертацияВерсииФайлов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ЗаменитьИмяКолонки(Порция, "ТекстХранилище", "УдалитьТекстХранилище");
	ЗаменитьИмяКолонки(Порция, "ИзвлеченныйТекст", "УдалитьИзвлеченныйТекст");
	ЗаменитьИмяКолонки(Порция, "РаспознанныйТекст", "УдалитьРаспознанныйТекст");
	ЗаменитьИмяКолонки(Порция, "СтатусИзвлеченияТекста", "УдалитьСтатусИзвлеченияТекста");
	ЗаменитьИмяКолонки(Порция, "СтатусРаспознаванияТекста", "УдалитьСтатусРаспознаванияТекста");
	
	УдалитьТекстХранилище = Источник.УдалитьТекстХранилище;
	Источник.УдалитьТекстХранилище = Новый ХранилищеЗначения("");
	УдалитьИзвлеченныйТекст = Источник.УдалитьИзвлеченныйТекст;
	Источник.УдалитьИзвлеченныйТекст = Новый ХранилищеЗначения("");
	УдалитьРаспознанныйТекст = Источник.УдалитьРаспознанныйТекст;
	Источник.УдалитьРаспознанныйТекст = Новый ХранилищеЗначения("");
	УдалитьСтатусИзвлеченияТекста = Источник.УдалитьСтатусИзвлеченияТекста;
	УдалитьСтатусРаспознаванияТекста = Источник.УдалитьСтатусРаспознаванияТекста;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
		
	Попытка
		ТекстВнутри = УдалитьТекстХранилище.Получить();
		Если ЗначениеЗаполнено(ТекстВнутри) Тогда  
			УдалитьСтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		Иначе	
			УдалитьСтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
		КонецЕсли;	
	Исключение   
		// не пишем ошибку.
		УдалитьСтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
	КонецПопытки;	
		
	НаборЗаписей = РегистрыСведений.ТекстыВерсийФайлов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Версия.Установить(Источник.Ссылка);
	
	Запись = НаборЗаписей.Добавить();
	
	Запись.Версия = Источник.Ссылка;
	Запись.ТекстХранилище = УдалитьТекстХранилище;
	Запись.ИзвлеченныйТекст = УдалитьИзвлеченныйТекст;
	Запись.РаспознанныйТекст = УдалитьРаспознанныйТекст;
	Запись.СтатусИзвлеченияТекста = УдалитьСтатусИзвлеченияТекста;
	Запись.СтатусРаспознаванияТекста = УдалитьСтатусРаспознаванияТекста;
	Запись.ДатаИзвлечения = ТекущаяДатаСеанса();
	Запись.ДатаРаспознавания = ТекущаяДатаСеанса();
	Запись.Расширение = Источник.Расширение;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);

КонецПроцедуры

// Найти по наименованию ссылку, которая не изменяется в другой системе.
// 
// Параметры:
//  Наименование - Строка - Наименование
//  СсылкаКроме - СправочникСсылка, ДокументСсылка - Ссылка кроме
// 
// Возвращаемое значение:
//  Произвольный, Неопределено - Найти по наименованию
Функция НайтиПоНаименованию(Наименование, СсылкаКроме) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	&ИмяТаблицы КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка <> &Ссылка
		|	И Таблица.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
		|	И Таблица.Наименование ПОДОБНО &Наименование";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ОбщегоНазначения.ИмяТаблицыПоСсылке(СсылкаКроме));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаКроме);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьРеквизит =
		СсылкаКроме.Метаданные().Реквизиты.Найти("ИсточникДанных") <> Неопределено;
	
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ИсточникДанных.Состав.Найти(СсылкаКроме.Метаданные());
	ЕстьОбщийРеквизит = ЭлементСостава <> Неопределено
		И ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	
	Если Не ЕстьРеквизит И Не ЕстьОбщийРеквизит Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Таблица.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ПроцессыОбработкиДокументов

// Возвращает наименование настройки действия обработки документа по действию
// и идентификатору шаблона.
// 
// Параметры:
//  Действие - Строка
//  Идентификатор - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Строка
//
Функция НаименованиеНастройкиДействияОбработкиДокумента(Действие, Идентификатор)
	
	Возврат СтрШаблон("%1_%2", Действие, Идентификатор);
	
КонецФункции

// Возвращает имя элемента Согласование в схеме процесса обработки документов.
// Имя не должно меняться в зависимости от языка сеанса, поэтому НСтр не используется.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяЭлементаСогласование()
	
	Возврат "Согласование";
	
КонецФункции

// Возвращает имя элемента Утверждение в схеме процесса обработки документов.
// Имя не должно меняться в зависимости от языка сеанса, поэтому НСтр не используется.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяЭлементаУтверждение()
	
	Возврат "Утверждение";
	
КонецФункции

// Возвращает имя элемента Регистрация в схеме процесса обработки документов.
// Имя не должно меняться в зависимости от языка сеанса, поэтому НСтр не используется.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяЭлементаРегистрация()
	
	Возврат "Регистрация";
	
КонецФункции

// Возвращает имя элемента Рассмотрение в схеме процесса обработки документов.
// Имя не должно меняться в зависимости от языка сеанса, поэтому НСтр не используется.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяЭлементаРассмотрение()
	
	Возврат "Рассмотрение";
	
КонецФункции

// Возвращает имя элемента ИсполнениеОзнакомление в схеме процесса обработки документов.
// Имя не должно меняться в зависимости от языка сеанса, поэтому НСтр не используется.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяЭлементаИсполнениеОзнакомление()
	
	Возврат "ИсполнениеОзнакомление";
	
КонецФункции

// Возвращает имя элемента СписаниеВДело в схеме процесса обработки документов.
// Имя не должно меняться в зависимости от языка сеанса, поэтому НСтр не используется.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяЭлементаСписаниеВДело()
	
	Возврат "СписаниеВДело";
	
КонецФункции

// Возвращает параметры действий процесса обработки документа по имени реквизита.
// 
// Параметры:
//  ИмяРеквизита - Строка
// 
// Возвращаемое значение:
//  Структура
// * Имя - Строка - имя действия в схеме.
// * Наименование - наименование действия.
// * Порядок - порядок исполнения действия.
//
Функция ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита(ИмяРеквизита)
	
	ПараметрыДействия = Новый Структура("Имя, Наименование, Порядок");
	
	Если ИмяРеквизита = "ШаблонСогласования" Тогда
		ПараметрыДействия.Имя = ИмяЭлементаСогласование();
		ПараметрыДействия.Наименование = НСтр("ru = 'Согласование'");
		ПараметрыДействия.Порядок = 1;
	ИначеЕсли ИмяРеквизита = "ШаблонУтверждения" Тогда
		ПараметрыДействия.Имя = ИмяЭлементаУтверждение();
		ПараметрыДействия.Наименование = НСтр("ru = 'Утверждение'");
		ПараметрыДействия.Порядок = 2;
	ИначеЕсли ИмяРеквизита = "ШаблонРегистрации" Тогда
		ПараметрыДействия.Имя = ИмяЭлементаРегистрация();
		ПараметрыДействия.Наименование = НСтр("ru = 'Регистрация'");
		ПараметрыДействия.Порядок = 3;
	ИначеЕсли ИмяРеквизита = "ШаблонРассмотрения" Тогда
		ПараметрыДействия.Имя = ИмяЭлементаРассмотрение();
		ПараметрыДействия.Наименование = НСтр("ru = 'Рассмотрение'");
		ПараметрыДействия.Порядок = 4;
	ИначеЕсли ИмяРеквизита = "ШаблонИсполненияОзнакомления" Тогда
		ПараметрыДействия.Имя = ИмяЭлементаИсполнениеОзнакомление();
		ПараметрыДействия.Наименование = НСтр("ru = 'Исполнение \ ознакомление'");
		ПараметрыДействия.Порядок = 5;
	ИначеЕсли ИмяРеквизита = "ШаблонПоручения" Тогда
		ПараметрыДействия.Имя = ИмяЭлементаСписаниеВДело();
		ПараметрыДействия.Наименование = НСтр("ru = 'Списание в дело'");
		ПараметрыДействия.Порядок = 6;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Возвращает ссылку на настройку действия обработки документа (комплексного процесса).
// 
// Параметры:
//  ИмяНастройки - Строка - см. НаименованиеНастройкиДействияОбработкиДокумента.
//  ИмяСправочника - Строка - имя одного из справочников:
//                              ШаблоныИсполнения,
//                              ШаблоныОзнакомления,
//                              ШаблоныПодписания,
//                              ШаблоныРассмотрения,
//                              ШаблоныРегистрации,
//                              ШаблоныСогласования,
//                              ШаблоныУтверждения.
//  Владелец - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//             БизнесПроцессСсылка.КомплексныйПроцесс
//
// Возвращаемое значение:
//  СправочникСсылка.ШаблоныИсполнения,
//  СправочникСсылка.ШаблоныОзнакомления,
//  СправочникСсылка.ШаблоныПодписания,
//  СправочникСсылка.ШаблоныРассмотрения,
//  СправочникСсылка.ШаблоныРегистрации,
//  СправочникСсылка.ШаблоныСогласования,
//  СправочникСсылка.ШаблоныУтверждения.
//
Функция НастройкаДействияОбработкиДокументаПоИмени(ИмяНастройки, ИмяСправочника, Владелец)
	
	ТекстЗапрос =
		"ВЫБРАТЬ
		|	ШаблоныПроцессов.Ссылка
		|ИЗ
		|	Справочник.ШаблоныИсполнения КАК ШаблоныПроцессов
		|ГДЕ
		|	ШаблоныПроцессов.Наименование = &ИмяНастройки
		|	И ШаблоныПроцессов.ВладелецШаблона = &Владелец";
		
	ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "ШаблоныИсполнения", ИмяСправочника);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапрос;
	
	Запрос.УстановитьПараметр("ИмяНастройки", ИмяНастройки);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники[ИмяСправочника].ПустаяСсылка();
	
КонецФункции

// Возвращает задачи элементов схемы процесса обработки документа.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс - ссылка на процесс.
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//    * ИмяЭлемента - Строка - имя элемента в схеме.
//    * ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя - задача выполнения элемента.
//    * ЗадачаВыполнена - Булево - признак завершенности задачи процесса.
// 
Функция ЗадачиЭлементовСхемыПроцессаОбработкиДокумента(Процесс)
	
	ЗадачиЭлементов = Новый ТаблицаЗначений();
	ЗадачиЭлементов.Колонки.Добавить("ИмяЭлемента");
	ЗадачиЭлементов.Колонки.Добавить("ЗадачаПроцесса");
	ЗадачиЭлементов.Колонки.Добавить("ЗадачаВыполнена");
	
	ЗапросПолученияЗадач = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.Дата
		|ПОМЕСТИТЬ ЗадачиПроцесса
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Процесс";
	
	ПроцессыДействий = Новый Массив();
	ПроцессыДействий.Добавить(Метаданные.БизнесПроцессы.Исполнение);
	ПроцессыДействий.Добавить(Метаданные.БизнесПроцессы.Ознакомление);
	ПроцессыДействий.Добавить(Метаданные.БизнесПроцессы.Подписание);
	ПроцессыДействий.Добавить(Метаданные.БизнесПроцессы.Рассмотрение);
	ПроцессыДействий.Добавить(Метаданные.БизнесПроцессы.Регистрация);
	ПроцессыДействий.Добавить(Метаданные.БизнесПроцессы.Согласование);
	ПроцессыДействий.Добавить(Метаданные.БизнесПроцессы.Утверждение);
	
	ЗапросыПолученияПроцессов = Новый Массив;
	
	ШаблонЗапроса = 
		"ВЫБРАТЬ
		|	ЗадачиПроцесса.Ссылка КАК ЗадачаЭлемента,
		|	ЗадачиПроцесса.Выполнена КАК ЗадачаВыполнена,
		|	ЗадачиПроцесса.Дата КАК ДатаСозданияЗадачи,
		|	Процессы.Ссылка КАК ПроцессДействия
		|ИЗ
		|	ЗадачиПроцесса КАК ЗадачиПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение КАК Процессы
		|		ПО ЗадачиПроцесса.Ссылка = Процессы.ВедущаяЗадача";
	
	Для Каждого ПроцессДействия Из ПроцессыДействий Цикл
		ЗапросыПолученияПроцессов.Добавить(
			СтрЗаменить(ШаблонЗапроса, "Исполнение", ПроцессДействия.Имя));
	КонецЦикла;
	
	РазделительЗапросов = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
	ЗапросПолученияПроцессов = СтрСоединить(ЗапросыПолученияПроцессов, РазделительЗапросов);
	
	РазделительЗапросов =
		"
		|
		|;
		|
		|";
	
	СекцияУпорядочить = "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСозданияЗадачи";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		ЗапросПолученияЗадач + РазделительЗапросов
		+ ЗапросПолученияПроцессов + СекцияУпорядочить;
		
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыСхемы = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(Процесс));
	
	ИмяЭлементаИсполнения = ИмяЭлементаИсполнениеОзнакомление();
	Если Не ЗначениеЗаполнено(ПараметрыСхемы.НастройкиЭлементов[ИмяЭлементаИсполнения]) Тогда
		ИмяЭлементаИсполнения = ИмяЭлементаСписаниеВДело();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ЗадачиЭлементов.Добавить();
		СтрокаТаблицы.ЗадачаПроцесса = Выборка.ЗадачаЭлемента;
		СтрокаТаблицы.ЗадачаВыполнена = Выборка.ЗадачаВыполнена;
		
		Если Не ЗначениеЗаполнено(Выборка.ПроцессДействия) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипДействия = ТипЗнч(Выборка.ПроцессДействия);
		
		Если ТипДействия = Тип("БизнесПроцессСсылка.Исполнение") Тогда
			
			ИмяЭлемента = ИмяЭлементаИсполнения;
			ИмяЭлементаИсполнения = ИмяЭлементаСписаниеВДело();
			
		ИначеЕсли ТипДействия = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
			
			ИмяЭлемента = ИмяЭлементаИсполнениеОзнакомление();
			
		ИначеЕсли ТипДействия = Тип("БизнесПроцессСсылка.Подписание")
			Или ТипДействия = Тип("БизнесПроцессСсылка.Утверждение") Тогда
			
			ИмяЭлемента = ИмяЭлементаУтверждение();
			
		ИначеЕсли ТипДействия = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
			
			ИмяЭлемента = ИмяЭлементаРассмотрение();
			
		ИначеЕсли ТипДействия = Тип("БизнесПроцессСсылка.Регистрация") Тогда
			
			ИмяЭлемента = ИмяЭлементаРегистрация();
			
		ИначеЕсли ТипДействия = Тип("БизнесПроцессСсылка.Согласование") Тогда
			
			ИмяЭлемента = ИмяЭлементаСогласование();
			
		КонецЕсли;
		
		СтрокаТаблицы.ИмяЭлемента = ИмяЭлемента;
		
	КонецЦикла;
	
	Возврат ЗадачиЭлементов;
	
КонецФункции

// Заполняет отметки выполнения процесса обработки документа.
// 
// Параметры:
//  ПроцессОбъект - БизнесПроцессОбъект.КомплексныйПроцесс
//
Процедура ЗаполнитьОтметкиВыполненияПроцессаОбработкиДокумента(ПроцессОбъект)
	
	ПроцессОбъект.ЗадачиЭлементовСхемы.Очистить();
	ПроцессОбъект.ОтметкиПрохожденияСхемы.Очистить();
	ПроцессОбъект.ТекущиеЭлементыСхемы.Очистить();
	
	Если ПроцессОбъект.Стартован Тогда
		ОтметкаТекущего = ПроцессОбъект.ОтметкиПрохожденияСхемы.Добавить();
		ОтметкаТекущего.ИмяЭлемента = "Старт";
		ОтметкаТекущего.Пройден = Истина;
	КонецЕсли;
	
	Если ПроцессОбъект.Завершен Тогда
		ОтметкаТекущего = ПроцессОбъект.ОтметкиПрохожденияСхемы.Добавить();
		ОтметкаТекущего.ИмяЭлемента = "Завершение";
		ОтметкаТекущего.Пройден = Истина;
	КонецЕсли;
	
	ЗадачиЭлементов = ЗадачиЭлементовСхемыПроцессаОбработкиДокумента(ПроцессОбъект.СсылкаНаПроцесс());
	Для Каждого СтрокаТаблицы Из ЗадачиЭлементов Цикл
		
		ЗаполнитьЗначенияСвойств(
			ПроцессОбъект.ЗадачиЭлементовСхемы.Добавить(),
			СтрокаТаблицы);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИмяЭлемента) Тогда
			
			ОтметкаОПрохождении = ПроцессОбъект.ОтметкиПрохожденияСхемы.Добавить();
			ОтметкаОПрохождении.ИмяЭлемента = СтрокаТаблицы.ИмяЭлемента;
			ОтметкаОПрохождении.Пройден = СтрокаТаблицы.ЗадачаВыполнена;
			
			Если Не СтрокаТаблицы.ЗадачаВыполнена Тогда
				ОтметкаТекущего = ПроцессОбъект.ТекущиеЭлементыСхемы.Добавить();
				ОтметкаТекущего.ИмяЭлемента = СтрокаТаблицы.ИмяЭлемента;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет является ли переданный комплексный процесс, процессом обработки документа.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоПроцессОбработкиДокумента(Процесс)
	
	ПараметрыСхемы =
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(Процесс);
	
	Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеПараметров =
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(ПараметрыСхемы);
	
	Для Каждого ИмяИНастройкаЭлемента Из ДанныеПараметров.НастройкиЭлементов Цикл
		НастройкаДействия = ИмяИНастройкаЭлемента.Значение;
		Прервать;
	КонецЦикла;
	
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(НастройкаДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаименованиеНастройки =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаДействия, "Наименование");
	
	ЧастиНаименования = СтрРазделить(НаименованиеНастройки, "_");
	Если ЧастиНаименования.Количество() <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПерваяЧасть = ЧастиНаименования[0];
	
	Если ПерваяЧасть <> ИмяЭлементаИсполнениеОзнакомление()
		И ПерваяЧасть <> ИмяЭлементаРассмотрение()
		И ПерваяЧасть <> ИмяЭлементаРегистрация()
		И ПерваяЧасть <> ИмяЭлементаСогласование()
		И ПерваяЧасть <> ИмяЭлементаСписаниеВДело()
		И ПерваяЧасть <> ИмяЭлементаУтверждение() Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ВтораяЧасть = ЧастиНаименования[1];
	
	Попытка
		//@skip-warning
		ИдентификаторИсходнойНастройки = Новый УникальныйИдентификатор(ВтораяЧасть);
	Исключение
		// Если вторая часть не является идентификатором, то это не процесс обработки документа.
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Обновляет схему процесса обработки документа.
// 
// Параметры:
//  ИдентификаторСсылки - УникальныйИдентификатор
//  Действия - ТаблицаЗначений - Действия:
//   * Имя - Строка - имя действия в схеме.
//   * Наименование - Строка - наименования действия.
//  Наименование - Строка - наименование схемы.
//  Загрузка - Булево - указание на запись схемы в режиме загрузки.
//  ПричинаЗагрузки - Строка - причина записи схемы в режиме загрузки.
//
Процедура ОбновитьСхемуПроцессаОбработкиДокумента(
	ИдентификаторСсылки, Действия, Наименование, Загрузка, ПричинаЗагрузки)
	
	ОписаниеСхемы = Новый Массив();
	
	ЭлементСтарт = Справочники.СхемыПроцессов.ОписаниеЭлементаСтарт();
	ЭлементСтарт.Лево = 60;
	ЭлементСтарт.Верх = 20;
	Если Действия.Количество() > 0 Тогда
		ЭлементСтарт.ИмяПоследователя = Действия[0].Имя;
	Иначе
		ЭлементСтарт.ИмяПоследователя = "Завершение";
	КонецЕсли;
	ОписаниеСхемы.Добавить(ЭлементСтарт);
	
	ГраницаПоY = ЭлементСтарт.Верх + 60;
	
	МаксимальныйИдекс = Действия.Количество() - 1;
	ИндексСтроки = 0;
	
	Пока ИндексСтроки <= МаксимальныйИдекс Цикл
		
		СтрокаДействия = Действия[ИндексСтроки];
		
		ЭлементДействие = Справочники.СхемыПроцессов.ОписаниеЭлементаДействие();
		ЭлементДействие.Имя = СтрокаДействия.Имя;
		ЭлементДействие.Наименование = СтрокаДействия.Наименование;
		ЭлементДействие.Лево = 20;
		ЭлементДействие.Верх = ГраницаПоY;
		
		Если ИндексСтроки = МаксимальныйИдекс Тогда
			ЭлементДействие.ИмяПоследователя = "Завершение";
		Иначе
			ЭлементДействие.ИмяПоследователя = Действия[ИндексСтроки + 1].Имя;
		КонецЕсли;
		
		ОписаниеСхемы.Добавить(ЭлементДействие);
		
		ИндексСтроки = ИндексСтроки + 1;
		
		ГраницаПоY = ГраницаПоY + 80;
		
	КонецЦикла;
	
	ЭлементЗавершение = Справочники.СхемыПроцессов.ОписаниеЭлементаЗавершение();
	ЭлементЗавершение.Лево = 60;
	ЭлементЗавершение.Верх = ГраницаПоY;
	ОписаниеСхемы.Добавить(ЭлементЗавершение);
	
	ДанныеСхемыПроцесса = Справочники.СхемыПроцессов.ДанныеСхемыПоОписаниюЭлементов(ОписаниеСхемы);
	
	ДанныеСхемыПроцесса.Наименование = Наименование;
	
	РезультатЗаписи = Справочники.СхемыПроцессов.ЗаписатьДанныеСхемыПроцесса(
		ИдентификаторСсылки,
		ДанныеСхемыПроцесса,
		Загрузка);
	
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			РезультатЗаписи.СхемаПроцесса,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(РезультатЗаписи.СхемаПроцесса)));
	КонецЕсли;
	
КонецПроцедуры

// Обновить параметры схемы процесса обработки документа.
// 
// Параметры:
//  ИдентификаторСсылки - УникальныйИдентификатор
//  ВладелецСхемы - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов, БизнесПроцессСсылка.КомплексныйПроцесс -
//  КомплексныйПроцесс - БизнесПроцессСсылка.КомплексныйПроцесс
//  Действия - ТаблицаЗначений
//   * Имя - имя действия в схеме.
//   * Действие - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
//  Загрузка - Булево - указание на запись параметров схемы в режиме загрузки.
//  ПричинаЗагрузки - Строка - причина записи параметров схемы в режиме загрузки.
//
Процедура ОбновитьПараметрыСхемыПроцессаОбработкиДокумента(
	ИдентификаторСсылки, ВладелецСхемы, КомплексныйПроцесс, Действия, Загрузка, ПричинаЗагрузки)
	
	СхемаПроцесса = Справочники.СхемыПроцессов.ПолучитьСсылку(ИдентификаторСсылки);
	
	ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(СхемаПроцесса);
	Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		
		ДаныеПараметров =
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			ПараметрыСхемы);
		
	Иначе
		ДаныеПараметров =
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.СтруктураДанныхПараметровСхемы();
			
		ДаныеПараметров.Схема = СхемаПроцесса;
		
		ДаныеПараметров.ВладелецСхемы = ВладелецСхемы;
		
		ДаныеПараметров.ОбъектДоступа = ДаныеПараметров.ВладелецСхемы; 
		Если ЗначениеЗаполнено(КомплексныйПроцесс) Тогда		
			ДаныеПараметров.ОбъектДоступа = КомплексныйПроцесс;
			ДаныеПараметров.ИсточникДанных = Справочники.ИсточникиДанных.ДО21;
		КонецЕсли;
		
	КонецЕсли;
	
	ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецСхемы, "ПометкаУдаления");
	Если ТипЗнч(ПометкаУдаления) = Тип("Булево") Тогда
		ДаныеПараметров.ПометкаУдаления = ПометкаУдаления;
	КонецЕсли;
	
	ДаныеПараметров.НастройкиЭлементов.Очистить();
	ДаныеПараметров.ИдентификаторыНастроек.Очистить();
	ДаныеПараметров.ПорядокСортировкиНастроекЭлементов.Очистить();
	
	ПорядокСортировки = 1;
	
	Для Каждого СтрокаДействия Из Действия Цикл
		
		ИмяДействия = СтрокаДействия.Имя;
		
		ИдентификаторЭлемента = СтрокаДействия.Действие.УникальныйИдентификатор();
		
		МетаданныеДействия = СтрокаДействия.Действие.Метаданные();
		
		НаименованиеНастройкиДействия = НаименованиеНастройкиДействияОбработкиДокумента(
			ИмяДействия, ИдентификаторЭлемента);
		
		БлокировкаДанных = Новый БлокировкаДанных();
		ЭлементБлокировки = БлокировкаДанных.Добавить(МетаданныеДействия.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Наименование", НаименованиеНастройкиДействия);
		БлокировкаДанных.Заблокировать();
		
		НастройкаДействия = НастройкаДействияОбработкиДокументаПоИмени(
			НаименованиеНастройкиДействия, МетаданныеДействия.Имя, ДаныеПараметров.ВладелецСхемы);
		
		Если ЗначениеЗаполнено(НастройкаДействия) Тогда
			ДаныеПараметров.НастройкиЭлементов[ИмяДействия] = НастройкаДействия;
		Иначе
			
			НастройкаДействияОбъект = Справочники[МетаданныеДействия.Имя].СоздатьЭлемент();
			
			Если ОбщегоНазначения.СсылкаСуществует(СтрокаДействия.Действие) Тогда
				
				ИсходнаяНастройка = СтрокаДействия.Действие.ПолучитьОбъект();
				
				НеИзменяемыеРеквизиты = Новый Соответствие();
				НеИзменяемыеРеквизиты["Ссылка"] = Истина;
				НеИзменяемыеРеквизиты["Код"] = Истина;
				НеИзменяемыеРеквизиты["ЭтоГруппа"] = Истина;
				НеИзменяемыеРеквизиты["Предопределенный"] = Истина;
				НеИзменяемыеРеквизиты["ИмяПредопределенныхДанных"] = Истина;
				
				Для Каждого СтандартныйРеквизит Из МетаданныеДействия.СтандартныеРеквизиты Цикл
					ИмяРеквизита = СтандартныйРеквизит.Имя;
					Если НеИзменяемыеРеквизиты[ИмяРеквизита] = Истина Тогда
						Продолжить;
					КонецЕсли;
					НастройкаДействияОбъект[ИмяРеквизита] = ИсходнаяНастройка[ИмяРеквизита];
				КонецЦикла;
				
				Для Каждого Реквизит Из МетаданныеДействия.Реквизиты Цикл
					ИмяРеквизита = Реквизит.Имя;
					Если НеИзменяемыеРеквизиты[ИмяРеквизита] = Истина Тогда
						Продолжить;
					КонецЕсли;
					НастройкаДействияОбъект[ИмяРеквизита] = ИсходнаяНастройка[ИмяРеквизита];
				КонецЦикла;
				
				Для Каждого ТабЧасть Из МетаданныеДействия.ТабличныеЧасти Цикл
					ИмяТабЧасти = ТабЧасть.Имя;
					НастройкаДействияОбъект[ИмяТабЧасти].Очистить();
					Для Каждого СтрокаТабЧасти Из ИсходнаяНастройка[ИмяТабЧасти] Цикл
						ЗаполнитьЗначенияСвойств(
							НастройкаДействияОбъект[ИмяТабЧасти].Добавить(),
							СтрокаТабЧасти);
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
			НастройкаДействияОбъект.ИсточникДанных = ДаныеПараметров.ИсточникДанных;
			
			НастройкаДействияОбъект.Описание = СтрШаблон(
				"%1
				|
				|%2",
				НастройкаДействияОбъект.Наименование,
				НастройкаДействияОбъект.Описание);
			
			НастройкаДействияОбъект.Наименование = НаименованиеНастройкиДействия;
			НастройкаДействияОбъект.НаименованиеБизнесПроцесса = НаименованиеНастройкиДействия;
			
			НастройкаДействияОбъект.ВладелецШаблона = ДаныеПараметров.ВладелецСхемы;
			НастройкаДействияОбъект.КомплексныйПроцесс = КомплексныйПроцесс;
			НастройкаДействияОбъект.ШаблонВКомплексномПроцессе = Истина;
			
			НастройкаДействияОбъект.ОбменДанными.Загрузка = Загрузка;
			НастройкаДействияОбъект.Записать();
			
			Если Загрузка Тогда
				РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
					НастройкаДействияОбъект.Ссылка,
					ПричинаЗагрузки,
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(НастройкаДействияОбъект.Ссылка)));
			КонецЕсли;
			
			ДаныеПараметров.НастройкиЭлементов[ИмяДействия] = НастройкаДействияОбъект.Ссылка;
		
		КонецЕсли;
		
		ДаныеПараметров.ИдентификаторыНастроек[ИмяДействия] =
			ДаныеПараметров.НастройкиЭлементов[ИмяДействия].УникальныйИдентификатор();
		
		ДаныеПараметров.ПорядокСортировкиНастроекЭлементов[ИмяДействия] = ПорядокСортировки;
		ПорядокСортировки = ПорядокСортировки + 1;
		
	КонецЦикла;
	
	РезультатЗаписи = 
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ЗаписатьДанныеПараметровСхемы(
			ПараметрыСхемы, ДаныеПараметров, Ложь, Загрузка);
		
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			РезультатЗаписи.ПараметрыСхемы,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(РезультатЗаписи.ПараметрыСхемы)));
	КонецЕсли;
	
КонецПроцедуры

// Обновляет настройку действия процесса обработки документа.
//
// Параметры:
//  Шаблон - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса.
//  Загрузка - Булево - указание на запись настройки в режиме загрузки.
//  ПричинаЗагрузки - Строка - причина записи настройки в режиме загрузки.
//
Процедура ОбновитьНастройкуДействияПроцессаОбработкиДокумента(Шаблон, Загрузка, ПричинаЗагрузки)
	
	Если ЗначениеЗаполнено(Шаблон.ВладелецШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторНастройки = Шаблон.Ссылка.УникальныйИдентификатор();
	
	МетаданныеШаблоны = Шаблон.Ссылка.Метаданные();
	
	ТипШаблона = ТипЗнч(Шаблон.Ссылка);
	
	НаименованияШаблонов = Новый Массив();
	
	Если ТипШаблона = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		
		НаименованияШаблонов.Добавить(НаименованиеНастройкиДействияОбработкиДокумента(
			ИмяЭлементаСогласование(), ИдентификаторНастройки));
		
	ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		
		НаименованияШаблонов.Добавить(НаименованиеНастройкиДействияОбработкиДокумента(
			ИмяЭлементаУтверждение(), ИдентификаторНастройки));
		
	ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		
		НаименованияШаблонов.Добавить(НаименованиеНастройкиДействияОбработкиДокумента(
			ИмяЭлементаРегистрация(), ИдентификаторНастройки));
		
	ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		
		НаименованияШаблонов.Добавить(НаименованиеНастройкиДействияОбработкиДокумента(
			ИмяЭлементаРассмотрение(), ИдентификаторНастройки));
		
	ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
		
		НаименованияШаблонов.Добавить(НаименованиеНастройкиДействияОбработкиДокумента(
			ИмяЭлементаИсполнениеОзнакомление(), ИдентификаторНастройки));
		
		НаименованияШаблонов.Добавить(НаименованиеНастройкиДействияОбработкиДокумента(
			ИмяЭлементаСписаниеВДело(), ИдентификаторНастройки));
		
	ИначеЕсли ТипШаблона = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		
		НаименованияШаблонов.Добавить(НаименованиеНастройкиДействияОбработкиДокумента(
			ИмяЭлементаИсполнениеОзнакомление(), ИдентификаторНастройки));
		
	Иначе
		
		// Не обрабатываем не поддерживаемые типы шаблонов действий процессов обработки документов.  
		Возврат;
		
	КонецЕсли;
	
	НеИзменяемыеРеквизиты = Новый Соответствие();
	НеИзменяемыеРеквизиты["Ссылка"] = Истина;
	НеИзменяемыеРеквизиты["Код"] = Истина;
	НеИзменяемыеРеквизиты["Предопределенный"] = Истина;
	НеИзменяемыеРеквизиты["ИмяПредопределенныхДанных"] = Истина;
	НеИзменяемыеРеквизиты["ЭтоГруппа"] = Истина;
	НеИзменяемыеРеквизиты["ИсточникДанных"] = Истина;
	НеИзменяемыеРеквизиты["Наименование"] = Истина;
	НеИзменяемыеРеквизиты["НаименованиеБизнесПроцесса"] = Истина;
	НеИзменяемыеРеквизиты["ВладелецШаблона"] = Истина;
	НеИзменяемыеРеквизиты["КомплексныйПроцесс"] = Истина;
	НеИзменяемыеРеквизиты["ШаблонВКомплексномПроцессе"] = Истина;
	
	ШаблонЗапроса =
		"ВЫБРАТЬ
		|	ШаблоныПроцессов.Ссылка
		|ИЗ
		|	Справочник.ШаблоныИсполнения КАК ШаблоныПроцессов
		|ГДЕ
		|	ШаблоныПроцессов.Наименование В (&НаименованияШаблонов)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ШаблонЗапроса, "ШаблоныИсполнения", МетаданныеШаблоны.Имя);
	Запрос.УстановитьПараметр("НаименованияШаблонов", НаименованияШаблонов);
	
	БлокировкаДанных = Новый БлокировкаДанных();
	Для Каждого НаименованиеШаблона Из НаименованияШаблонов Цикл
		ЭлементБлокировки = БлокировкаДанных.Добавить(МетаданныеШаблоны.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Наименование", НаименованиеШаблона);
	КонецЦикла;
	БлокировкаДанных.Заблокировать();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбновляемыйШаблон = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтандартныйРеквизит Из МетаданныеШаблоны.СтандартныеРеквизиты Цикл
			ИмяРеквизита = СтандартныйРеквизит.Имя;
			Если НеИзменяемыеРеквизиты[ИмяРеквизита] = Истина Тогда
				Продолжить;
			КонецЕсли;
			ОбновляемыйШаблон[ИмяРеквизита] = Шаблон[ИмяРеквизита];
		КонецЦикла;
		
		Для Каждого Реквизит Из МетаданныеШаблоны.Реквизиты Цикл
			ИмяРеквизита = Реквизит.Имя;
			Если НеИзменяемыеРеквизиты[ИмяРеквизита] = Истина Тогда
				Продолжить;
			КонецЕсли;
			ОбновляемыйШаблон[ИмяРеквизита] = Шаблон[ИмяРеквизита];
		КонецЦикла;
		
		Для Каждого ТабЧасть Из МетаданныеШаблоны.ТабличныеЧасти Цикл
			ИмяТабЧасти = ТабЧасть.Имя;
			ОбновляемыйШаблон[ИмяТабЧасти].Очистить();
			Если Шаблон[ИмяТабЧасти] <> Null Тогда
				Для Каждого СтрокаТабЧасти Из Шаблон[ИмяТабЧасти] Цикл
					ЗаполнитьЗначенияСвойств(
						ОбновляемыйШаблон[ИмяТабЧасти].Добавить(),
						СтрокаТабЧасти);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ОбновляемыйШаблон.Описание = СтрШаблон(
			"%1
			|
			|%2",
			Шаблон.Наименование,
			Шаблон.Описание);
		
		ОбновляемыйШаблон.ОбменДанными.Загрузка = Загрузка;
		ОбновляемыйШаблон.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ОбновляемыйШаблон.Ссылка,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ОбновляемыйШаблон.Ссылка)));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обновление отметок выполнения процесса обработки документа по задаче.
// 
// Параметры:
//  Задача - СтрокаТаблицыЗначений - строка таблицы с загружаемыми данными задачи КП.
//  ЭтоПерваяЗагрузка - Булево - признак первой загрузки задачи.
//  Загрузка - Булево - указание на обновление процесса в режиме загрузки.
//  ПричинаЗагрузки - Строка - причина обновление процесса  в режиме загрузки.
//
Процедура ОбновитьОтметкиВыполненияПроцессаОбработкиДокументаПоЗадаче(
	Задача, ЭтоПерваяЗагрузка, Загрузка, ПричинаЗагрузки)
	
	Если ЭтоУдалениеОбъекта(Задача) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоПерваяЗагрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоПроцессОбработкиДокумента(Задача.БизнесПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("БизнесПроцесс.КомплексныйПроцесс").УстановитьЗначение("Ссылка", Задача.БизнесПроцесс);
	Блокировка.Заблокировать();
	
	ЗаблокироватьДанныеДляРедактирования(Задача.БизнесПроцесс);
	
	ПроцессОбъект = Задача.БизнесПроцесс.ПолучитьОбъект();
	ЗаполнитьОтметкиВыполненияПроцессаОбработкиДокумента(ПроцессОбъект);
	ПроцессОбъект.ОбменДанными.Загрузка = Загрузка;
	ПроцессОбъект.Записать();
	
	РазблокироватьДанныеДляРедактирования(Задача.БизнесПроцесс);
	
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			ПроцессОбъект.Ссылка,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("БизнесПроцессСсылка.КомплексныйПроцесс")));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обновление отметок выполнения процесса обработки документа по задаче.
// 
// Параметры:
//  Процесс - СтрокаТаблицыЗначений - строка таблицы с загружаемыми данными вложенного процесса.
//            БизнесПроцессОбъект.Исполнение, БизнесПроцессОбъект.Подписание - объект загружаемого вложенного процесса.
//  ЭтоПерваяЗагрузка - Булево - признак первой загрузки вложенного процесса.
//  Загрузка - Булево - указание на обновление в режиме загрузки.
//  ПричинаЗагрузки - Строка - причина обновление в режиме загрузки.
//
Процедура ОбновитьОтметкиВыполненияПроцессаОбработкиДокументаПоВложенномуПроцессу(
	Процесс, ЭтоПерваяЗагрузка, Загрузка, ПричинаЗагрузки)
	
	Если ЭтоУдалениеОбъекта(Процесс) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоПерваяЗагрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Процесс.ВедущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ВедущийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Процесс.ВедущаяЗадача, "БизнесПроцесс");
	
	Если Не ЗначениеЗаполнено(ВедущийПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоПроцессОбработкиДокумента(ВедущийПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(ВедущийПроцесс);
	
	ПроцессОбъект = ВедущийПроцесс.ПолучитьОбъект();
	ЗаполнитьОтметкиВыполненияПроцессаОбработкиДокумента(ПроцессОбъект);
	ПроцессОбъект.ОбменДанными.Загрузка = Загрузка;
	ПроцессОбъект.Записать();
	
	РазблокироватьДанныеДляРедактирования(ВедущийПроцесс);
	
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			ПроцессОбъект.Ссылка,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("БизнесПроцессСсылка.КомплексныйПроцесс")));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет конвертацию загружаемого процесса обработки документа 2.1 в комплексный процесс 3.0.
//
// Параметры:
//  Источник - СтрокаТаблицыЗначений - строка таблицы с загружаемыми данными процесса обработки.
//  ТаблицаДействий - ТаблицаЗначений - таблица с описанием действий процесса обработки.
//   * Имя - Строка - имя действия в схеме.
//   * Действие - ОпределяемыйТип.ДействиеКомплексногоПроцесса - ссылка на исходную настройку действия.
//   * Наименование - Строка - наименование действия.
//  Загрузка - Булево - указание на запись в режиме загрузки.
//  ПричинаЗагрузки - Строка - причина записи в режиме загрузки.
//
// Возвращаемое значение:
//  БизнесПроцессОбъект.КомплексныйПроцесс, Неопределено
//
Функция КонвертацияПроцессаОбработкиДокумента(Источник, ТаблицаДействий, Загрузка, ПричинаЗагрузки)
	
	ИдентификаторСсылки = Источник.Ссылка.УникальныйИдентификатор();
	
	СсылкаНаОбъект = 
		БизнесПроцессы.КомплексныйПроцесс.ПолучитьСсылку(ИдентификаторСсылки);
	
	СсылкаНаОбъектСуществует = ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект);
	
	Если ЭтоУдалениеОбъекта(Источник) И Не СсылкаНаОбъектСуществует Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("БизнесПроцесс.КомплексныйПроцесс").УстановитьЗначение("Ссылка", СсылкаНаОбъект);
	Блокировка.Заблокировать();
	
	Если СсылкаНаОбъектСуществует Тогда
		ЗаблокироватьДанныеДляРедактирования(СсылкаНаОбъект);
		ПроцессОбъект = СсылкаНаОбъект.ПолучитьОбъект();
	Иначе
		ПроцессОбъект = БизнесПроцессы.КомплексныйПроцесс.СоздатьБизнесПроцесс();
		ПроцессОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
		ПроцессОбъект.ИсточникДанных = Справочники.ИсточникиДанных.ДО21;
		ПроцессОбъект.ИдентификаторСсылки = ИдентификаторСсылки;
	КонецЕсли;
	
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		
		ПроцессОбъект.ПометкаУдаления = Истина;
		
		// Схема.
		
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(ПроцессОбъект.Схема);
		ДанныеСхемы.ПометкаУдаления = Истина;
		
		Справочники.СхемыПроцессов.ЗаписатьДанныеСхемыПроцесса(
			ПроцессОбъект.Схема, ДанныеСхемы, Загрузка);
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ПроцессОбъект.Схема,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПроцессОбъект.Схема)));
		КонецЕсли;
		
		// Параметры схемы.
		
		ПараметрыСхемы = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(
			ПроцессОбъект.Ссылка);
		
		ДанныеПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			ПараметрыСхемы);
		
		ДанныеПараметров.ПометкаУдаления = Истина;
		
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ЗаписатьДанныеПараметровСхемы(
			ПараметрыСхемы, ДанныеПараметров, Загрузка);
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ПараметрыСхемы,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПараметрыСхемы)));
		КонецЕсли;
		
	Иначе
	
		ПереносимыеРеквизиты =
			"Дата,
			|ВедущаяЗадача,
			|ПометкаУдаления,
			|Стартован,
			|Завершен,
			|Автор,
			|Важность,
			|ГлавнаяЗадача,
			|ДатаЗавершения,
			|ДатаНачала,
			|Наименование,
			|ПричинаПрерывания,
			|Проект,
			|ПроектнаяЗадача,
			|Состояние,
			|СрокИсполненияПроцесса";
		
		ЗаполнитьЗначенияСвойств(ПроцессОбъект, Источник, ПереносимыеРеквизиты);
		
		ПроцессОбъект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		
		Если ЗначениеЗаполнено(Источник.Шаблон) Тогда
			ПроцессОбъект.Шаблон = 
				Справочники.ШаблоныКомплексныхБизнесПроцессов.ПолучитьСсылку(ИдентификаторСсылки);
		КонецЕсли;
			
		ПроцессОбъект.Схема = Справочники.СхемыПроцессов.ПолучитьСсылку(ИдентификаторСсылки);
		
		// СхемыПроцессов, ПараметрыСхемДляКомплексныхПроцессов
		
		ОбновитьСхемуПроцессаОбработкиДокумента(
			ИдентификаторСсылки,
			ТаблицаДействий,
			Источник.Наименование,
			Загрузка,
			ПричинаЗагрузки);
		
		ОбновитьПараметрыСхемыПроцессаОбработкиДокумента(
			ИдентификаторСсылки,
			СсылкаНаОбъект,
			СсылкаНаОбъект,
			ТаблицаДействий,
			Загрузка,
			ПричинаЗагрузки);
		
		// ДополнительныеРеквизиты
		ПроцессОбъект.ДополнительныеРеквизиты.Очистить();
		Если ЗначениеЗаполнено(Источник.ДополнительныеРеквизиты) Тогда
			Для Каждого СтрокаТаблицы Из Источник.ДополнительныеРеквизиты Цикл
				ЗаполнитьЗначенияСвойств(
					ПроцессОбъект.ДополнительныеРеквизиты.Добавить(),
					СтрокаТаблицы); 
			КонецЦикла;
		КонецЕсли;
		
		// Предметы
		ПроцессОбъект.Предметы.Очистить();
		Если ЗначениеЗаполнено(Источник.Предметы) Тогда
			Для Каждого СтрокаТаблицы Из Источник.Предметы Цикл
				ЗаполнитьЗначенияСвойств(ПроцессОбъект.Предметы.Добавить(), СтрокаТаблицы); 
			КонецЦикла;
		КонецЕсли;
		
		// ПредметыЗадач
		ПроцессОбъект.ПредметыЗадач.Очистить();
		Если ЗначениеЗаполнено(Источник.Предметы) И ТаблицаДействий.Количество() > 0 Тогда
			
			МенеджерПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов;
			ПараметрыПоСхеме = МенеджерПараметров.ПараметрыПоСхеме(ПроцессОбъект.Схема);
			ДанныеПараметров = МенеджерПараметров.ДанныеПараметровСхемы(ПараметрыПоСхеме);
			
			ТипыДействияИКартыМаршрута = Новый Соответствие();
			Для Каждого КлючЗначение Из ДанныеПараметров.НастройкиЭлементов Цикл
				
				НастройкаДействия = КлючЗначение.Значение;
				ТипДействия = ТипЗнч(НастройкаДействия);
				
				Если ТипыДействияИКартыМаршрута[ТипДействия] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МенеджерНастроекДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
					НастройкаДействия);
				ИмяПроцесса = МенеджерНастроекДействия.ИмяПроцесса(НастройкаДействия);
				
				ТипыДействияИКартыМаршрута[ТипДействия] = 
					БизнесПроцессы[ИмяПроцесса].ПолучитьКартуМаршрута();
			КонецЦикла;
			
			Для Каждого СтрокаПредмета Из ПроцессОбъект.Предметы Цикл
				
				Для Каждого КлючЗначение Из ДанныеПараметров.НастройкиЭлементов Цикл
					
					ИмяЭлемента = КлючЗначение.Ключ;
					НастройкаДействия = КлючЗначение.Значение;
					ТипДействия = ТипЗнч(НастройкаДействия);
					Идентификатор = ДанныеПараметров.ИдентификаторыНастроек[ИмяЭлемента];
					
					КартаМаршрута = ТипыДействияИКартыМаршрута[ТипДействия];
					Для Каждого Элемент Из КартаМаршрута.ЭлементыГрафическойСхемы Цикл
						Если ТипЗнч(Элемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда
							СтрокаТаблицы = ПроцессОбъект.ПредметыЗадач.Добавить();
							СтрокаТаблицы.ИдентификаторЭтапа = Идентификатор;
							СтрокаТаблицы.ШаблонБизнесПроцесса = НастройкаДействия;
							СтрокаТаблицы.ТочкаМаршрута = Элемент.Значение;
							СтрокаТаблицы.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// ЗадачиЭлементовСхемы, ОтметкиПрохожденияСхемы, ТекущиеЭлементыСхемы
		ЗаполнитьОтметкиВыполненияПроцессаОбработкиДокумента(ПроцессОбъект);
		
	КонецЕсли;
	
	ПроцессОбъект.ОбменДанными.Загрузка = Загрузка;
	ПроцессОбъект.Записать();
	
	Если СсылкаНаОбъектСуществует Тогда
		РазблокироватьДанныеДляРедактирования(СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ПроцессОбъект;
	
КонецФункции

// Выполняет конвертацию загружаемого процесса обработки вн. документа 2.1 в комплексный процесс 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияПроцессаОбработкиВнутреннегоДокумента(
	Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаДействий = Новый ТаблицаЗначений();
	ТаблицаДействий.Колонки.Добавить("Имя");
	ТаблицаДействий.Колонки.Добавить("Действие");
	ТаблицаДействий.Колонки.Добавить("Наименование");
	
	Если Не ЭтоУдалениеОбъекта(Источник) Тогда
	
		Если ЗначениеЗаполнено(Источник.ШаблонСогласования) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонСогласования;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонСогласования");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ШаблонУтверждения) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонУтверждения;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонУтверждения");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ШаблонРегистрации) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонРегистрации;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонРегистрации");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ШаблонРассмотрения) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонРассмотрения;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонРассмотрения");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ШаблонИсполненияОзнакомления) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонИсполненияОзнакомления;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонИсполненияОзнакомления");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ШаблонПоручения) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонПоручения;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонПоручения");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
	КонецЕсли;
	
	Приемник = КонвертацияПроцессаОбработкиДокумента(
		Источник, ТаблицаДействий, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
	
КонецПроцедуры

// Выполняет конвертацию загружаемого процесса обработки вх. документа 2.1 в комплексный процесс 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияПроцессаОбработкиВходящегоДокумента(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаДействий = Новый ТаблицаЗначений();
	ТаблицаДействий.Колонки.Добавить("Имя");
	ТаблицаДействий.Колонки.Добавить("Действие");
	ТаблицаДействий.Колонки.Добавить("Наименование");
	
	Если Не ЭтоУдалениеОбъекта(Источник) Тогда
	
		Если ЗначениеЗаполнено(Источник.ШаблонРассмотрения) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонРассмотрения;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонРассмотрения");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ШаблонИсполненияОзнакомления) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонИсполненияОзнакомления;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонИсполненияОзнакомления");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ШаблонПоручения) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонПоручения;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонПоручения");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
	КонецЕсли;
	
	Приемник = КонвертацияПроцессаОбработкиДокумента(
		Источник, ТаблицаДействий, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
	
КонецПроцедуры

// Выполняет конвертацию загружаемого процесса обработки вх. документа 2.1 в комплексный процесс 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияПроцессаОбработкиИсходящегоДокумента(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаДействий = Новый ТаблицаЗначений();
	ТаблицаДействий.Колонки.Добавить("Имя");
	ТаблицаДействий.Колонки.Добавить("Действие");
	ТаблицаДействий.Колонки.Добавить("Наименование");
	
	Если Не ЭтоУдалениеОбъекта(Источник) Тогда
	
		Если ЗначениеЗаполнено(Источник.ШаблонСогласования) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонСогласования;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонСогласования");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ШаблонУтверждения) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонУтверждения;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонУтверждения");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ШаблонРегистрации) Тогда
			СтрокаДействия = ТаблицаДействий.Добавить();
			СтрокаДействия.Действие = Источник.ШаблонРегистрации;
			
			ПараметрыДействия = 
				ПараметрыДействияПроцессаОбработкиДокументаПоИмениРеквизита("ШаблонРегистрации");
			ЗаполнитьЗначенияСвойств(СтрокаДействия, ПараметрыДействия);
		КонецЕсли;
		
	КонецЕсли;
	
	Приемник = КонвертацияПроцессаОбработкиДокумента(
		Источник, ТаблицаДействий, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
	
КонецПроцедуры

#КонецОбласти

// Выполняет конвертацию загружаемой задачи процесса из 2.1 в 3.0.
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1.
//
Процедура КонвертацияЗадачиПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	ЭтоУдалениеОбъекта = ЭтоУдалениеОбъекта(Источник);
	
	РеквизитыЗадачи = Источник;
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник.Ссылка, "БизнесПроцесс, ТочкаМаршрута");
	КонецЕсли;
	
	ЭтоЗадачаКомплексногоПроцесса = 
		ТипЗнч(РеквизитыЗадачи.БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс");
	
	ТочкаМаршрута = РеквизитыЗадачи.ТочкаМаршрута;
	
	Если (ЭтоЗадачаКомплексногоПроцесса И Не ЗначениеЗаполнено(ТочкаМаршрута.Вид))
		Или ОбщегоНазначения.СсылкаСуществует(КонтрольнаяКарточкаПоЗадаче(Источник)) Тогда
		
		// При загрузке задачи контроля комплексного процесса формируем
		// контрольную карточку по всему комплексному процессу, отказывась
		// от записи задачи.
		
		СтандартнаяОбработка = Ложь;
		
		Приемник = ОбновитьКонтрольнуюКарточкуПоЗадачеКонтроляКомплексногоПроцесса(
			Источник,
			ПараметрыЗагрузки.Загрузка,
			ПараметрыЗагрузки.ПричинаЗагрузки);
		
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗадачаКомплексногоПроцесса Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЭтоПерваяЗагрузка = Не ОбщегоНазначения.СсылкаСуществует(
			Источник.Ссылка);
		
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки);
		
		ОбновитьОтметкиВыполненияПроцессаОбработкиДокументаПоЗадаче(
			Источник,
			ЭтоПерваяЗагрузка,
			ПараметрыЗагрузки.Загрузка,
			ПараметрыЗагрузки.ПричинаЗагрузки);
		
		Возврат;
		
	КонецЕсли;
	
	// вызов зонтика - но сперва саму задачу записать.
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(РеквизитыЗадачи.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Подписание")
		И Не ЭтоУдалениеОбъекта Тогда
		
		ЗаменитьТочкиМаршрутаПроцессаУтверждениеТочкамиПроцессаПодписание(Источник, "ТочкаМаршрута");
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	//  вызов зонтика
	Если ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс) 
		И ОбщегоНазначения.СсылкаСуществует(РеквизитыЗадачи.БизнесПроцесс) Тогда
		
		ДействияДляОбработки = СвязатьПроцессСДействиемОбработки(
			ОписаниеПроцессаДляДействияОбработки(Источник.БизнесПроцесс), 
			ПараметрыЗагрузки);
		
		Если ЗначениеЗаполнено(ДействияДляОбработки) Тогда
			ОбновитьДействия(ДействияДляОбработки, ПараметрыЗагрузки);
		КонецЕсли
		
	КонецЕсли;
	
	// Работа с визами согласования
	ВизыПоЗадаче = ВизыПоЗадаче(Источник.Ссылка, Источник.БизнесПроцесс);
	Для Каждого Виза Из ВизыПоЗадаче Цикл
		ОбновитьДанныеВизСогласованияПоЗадаче(Виза, Источник.Ссылка, ПараметрыЗагрузки);
	КонецЦикла;
	
	// Работа с резолюциями
	Резолюции = РезолюцииПоИсточнику(Источник.Ссылка, Источник.БизнесПроцесс);
	Для Каждого Резолюция Из Резолюции Цикл
		ОбновитьДанныеРезолюцииПоИсточнику(Резолюция, Источник.Ссылка, ПараметрыЗагрузки);
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти

#Область Действия

// Создает (обновляет) действия обработки по объекту.
//
// Параметры:
//	Объект - СправочникСсылка.ДокументыПредприятия,
//				СправочникСсылка.Мероприятия - Объект, для которого необходимо создать действие обработки.
//	ПараметрыЗагрузки - Структура - См. МиграцияДанныхИзВнешнихСистемСервер.ЗагрузитьПорцию.
//
Процедура СоздатьОбновитьДействияПоОбъекту(Объект, ПараметрыЗагрузки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если (Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект) 
				И Не ДелопроизводствоКлиентСервер.ЭтоМероприятие(Объект))
			Или Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ИсточникДанных")) Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = Новый Массив;
	Для Каждого Элемент Из ТипыПроцессовФормирущихДействия() Цикл
		ТекстЗапроса.Добавить(СтрШаблон(
			"ВЫБРАТЬ ПредметыПроцесса.Ссылка
			|ИЗ %1.Предметы КАК ПредметыПроцесса
			|СОЕДИНЕНИЕ %1 КАК Процесс
			|ПО ПредметыПроцесса.Ссылка = Процесс.Ссылка
			|ГДЕ ПредметыПроцесса.Предмет = &Объект
			|	И НЕ Процесс.ПометкаУдаления",
			Метаданные.НайтиПоТипу(Элемент.Ключ).ПолноеИмя()));	
	КонецЦикла;
	
	Запрос = Новый Запрос(СтрСоединить(ТекстЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС));
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Действия = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Действия,
			СвязатьПроцессСДействиемОбработки(
				ОписаниеПроцессаДляДействияОбработки(Выборка.Ссылка), 
				ПараметрыЗагрузки),
			Истина);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Действия) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДействия(Действия, ПараметрыЗагрузки);

КонецПроцедуры

// Формирует описание процесса для поиска действия обработки.
//
// Параметры:
//	Процесс - БизнесПроцессСсылка.Исполнение,
//				БизнесПроцессСсылка.Ознакомление,
//				БизнесПроцессСсылка.Подписание,
//				БизнесПроцессСсылка.Рассмотрение,
//				БизнесПроцессСсылка.Регистрация,
//				БизнесПроцессСсылка.Согласование,
//				БизнесПроцессСсылка.Утверждение - Ссылка на процесс.
//	ПредыдущиеЗначенияРеквизитов - Неопределено, Структура - Предыдущие значения реквизитов процесса.
//	
// Возвращаемое значение:
//	Структура:
//		* Процесс - БизнесПроцессСсылка.Исполнение,
//				БизнесПроцессСсылка.Ознакомление,
//				БизнесПроцессСсылка.Подписание,
//				БизнесПроцессСсылка.Рассмотрение,
//				БизнесПроцессСсылка.Регистрация,
//				БизнесПроцессСсылка.Согласование,
//				БизнесПроцессСсылка.Утверждение - Ссылка на процесс.
//		* ПредыдущиеЗначенияРеквизитов - Неопределено, Структура - Предыдущие значения реквизитов процесса.
//
Функция ОписаниеПроцессаДляДействияОбработки(Процесс, ПредыдущиеЗначенияРеквизитов = Неопределено)
	
	Возврат Новый Структура("Процесс, ПредыдущиеЗначенияРеквизитов", Процесс, ПредыдущиеЗначенияРеквизитов);
	
КонецФункции

// Формирует связь процесса с действием обработки.
//
// Параметры:
//	ОписаниеПроцесса- Структура:
//		* Процесс - БизнесПроцессСсылка.Исполнение,
//					БизнесПроцессСсылка.Ознакомление,
//					БизнесПроцессСсылка.Подписание,
//					БизнесПроцессСсылка.Рассмотрение,
//					БизнесПроцессСсылка.Регистрация,
//					БизнесПроцессСсылка.Согласование,
//					БизнесПроцессСсылка.Утверждение - Процесс, который необходимо связать с действием обработки.
//		* ПредыдущиеЗначенияРеквизитов - Неопределено, Структура - См. ОписаниеПроцессаДляДействияОбработки
//	ПараметрыЗагрузки - Структура - См. МиграцияДанныхИзВнешнихСистемСервер.ЗагрузитьПорцию.
//
// Возвращаемое значение:
//	ОпределяемыйТип.Действия - Действие обработки.
//
Функция СвязатьПроцессСДействиемОбработки(ОписаниеПроцесса, ПараметрыЗагрузки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Действия = Новый Массив;
	
	Если Не ТипыПроцессовФормирущихДействия()[ТипЗнч(ОписаниеПроцесса.Процесс)] = Истина Тогда
		Возврат Действия;
	КонецЕсли;
		
	ЗначенияРеквизитовПроцесса = ДанныеПроцесса(ОписаниеПроцесса.Процесс);
	ПредыдущиеЗначенияРеквизитовПроцесса = ОписаниеПроцесса.ПредыдущиеЗначенияРеквизитов;

	ОсновныеПредметы = ТаблицаПредметовПроцесса(
		ЗначенияРеквизитовПроцесса.Предметы,
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПредыдущиеЗначенияРеквизитовПроцесса, "Предметы"),
		Новый Структура("РольПредмета", Перечисления.РолиПредметов.Основной));
		
	КоличествоСтрокТаблицы = ОсновныеПредметы.Количество(); 
	Для НомерСтроки = 1 По КоличествоСтрокТаблицы Цикл
		ПредметОбработки = ОсновныеПредметы[КоличествоСтрокТаблицы - НомерСтроки].Предмет;
		
		Если Не ЗначениеЗаполнено(ПредметОбработки)
				Или Не ОбщегоНазначения.СсылкаСуществует(ПредметОбработки)
				Или (Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ПредметОбработки) 
						И Не ДелопроизводствоКлиентСервер.ЭтоМероприятие(ПредметОбработки))
				Или Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметОбработки, "ИсточникДанных")) Тогда
			
			ОсновныеПредметы.Удалить(КоличествоСтрокТаблицы - НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОсновныеПредметы.Количество() Тогда
		Возврат Действия;
	КонецЕсли;
	
	ВидДействияНовый = ВидДействияПоДаннымПроцесса(ЗначенияРеквизитовПроцесса, ПараметрыЗагрузки);
	ВидДействияПредыдущий = ВидДействияПоДаннымПроцесса(ПредыдущиеЗначенияРеквизитовПроцесса);
	
	Для Каждого СтрокаТаблицы Из ОсновныеПредметы Цикл
		ПредметОбработки = СтрокаТаблицы.Предмет;
		
		ДействияПредыдущие = Неопределено;
		ДействияНовые = Неопределено;
		
		Если СтрокаТаблицы.Состояние >= 0 И ЗначениеЗаполнено(ВидДействияПредыдущий) Тогда
			ДействияПредыдущие = НайтиДействияПоВидуИПредмету(ВидДействияПредыдущий, ПредметОбработки);
		КонецЕсли;		
		Если СтрокаТаблицы.Состояние < 1 И ЗначениеЗаполнено(ВидДействияНовый) Тогда
			ДействияНовые = НайтиДействияПоВидуИПредмету(ВидДействияНовый, ПредметОбработки);
			Если Не ЗначениеЗаполнено(ДействияНовые) Тогда
				ДействияНовые = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					СоздатьДействиеПоДаннымПроцессаИПредмету(
						ВидДействияНовый,
						ПредметОбработки,
						ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРеквизитовПроцесса, "Дата"),
						ПараметрыЗагрузки,
						ЗначенияРеквизитовПроцесса));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДействияНовые) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Действия, ДействияНовые, Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДействияПредыдущие) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Действия, ДействияПредыдущие, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Действия;
	
КонецФункции

// Формирует таблицу предметов процесса, на основании версий.
//
// Параметры:
//	Предметы - ТаблицаЗначений - Таблица, содержащая предметы текущей версии процесса.
//	ПредметыПредыдущие - ТаблицаЗначений - Таблица, содержащая предметы предыдущей версии процесса.
//	ПараметрыОтбора - Структура - Структура параметров отбора строк.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица, содержащая описание предметов процесса.
//
Функция ТаблицаПредметовПроцесса(Предметы, ПредметыПредыдущие = Неопределено, ПараметрыОтбора = Неопределено)
	
	ТаблицаПредметов = Предметы.Скопировать(ПараметрыОтбора);
	ТаблицаПредметов.Колонки.Добавить("Состояние", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ТаблицаПредметов.ЗаполнитьЗначения(-1, "Состояние");
	
	Если ЗначениеЗаполнено(ПредметыПредыдущие) Тогда
		Для Каждого СтрокаТаблицы Из ПредметыПредыдущие.Скопировать(ПараметрыОтбора) Цикл
			НоваяСтрока = ТаблицаПредметов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Состояние = 1;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПредметов.Свернуть("Предмет", "Состояние");
	
	Возврат ТаблицаПредметов;
	
КонецФункции

// Возвращает список процессов, которые могут формировать действия обработки.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Соответствие:
//		* Ключ - Тип - Тип процесса, который может формировать действие обработки.
//		* Значение - Булево - Истина.
//
Функция ТипыПроцессовФормирущихДействия()
	
	Процессы = Новый Соответствие();
	Процессы.Вставить(Тип("БизнесПроцессСсылка.Исполнение"), Истина);
	Процессы.Вставить(Тип("БизнесПроцессСсылка.Ознакомление"), Истина);
	Процессы.Вставить(Тип("БизнесПроцессСсылка.Подписание"), Истина);
	Процессы.Вставить(Тип("БизнесПроцессСсылка.Рассмотрение"), Истина);
	Процессы.Вставить(Тип("БизнесПроцессСсылка.Регистрация"), Истина);
	Процессы.Вставить(Тип("БизнесПроцессСсылка.Согласование"), Истина);
	Процессы.Вставить(Тип("БизнесПроцессСсылка.Утверждение"), Истина);
	
	Возврат Процессы;
	 
КонецФункции

// Возвращает структуру, содержащую данные процесса, которые необходимы для поиска (создания) действия обработки.
//
// Параметры:
//	Процесс - БизнесПроцессСсылка.Исполнение,
//				БизнесПроцессСсылка.Ознакомление,
//				БизнесПроцессСсылка.Подписание,
//				БизнесПроцессСсылка.Рассмотрение,
//				БизнесПроцессСсылка.Регистрация,
//				БизнесПроцессСсылка.Согласование,
//				БизнесПроцессСсылка.Утверждение,
//				БизнесПроцессОбъект.Исполнение,
//				БизнесПроцессОбъект.Ознакомление,
//				БизнесПроцессОбъект.Подписание,
//				БизнесПроцессОбъект.Рассмотрение,
//				БизнесПроцессОбъект.Регистрация,
//				БизнесПроцессОбъект.Согласование,
//				БизнесПроцессОбъект.Утверждение - Процесс, данные которого необходимо получить.
//
// Возвращаемое значение:
//	Структура:
//		* Тип - Тип - Тип процесса, который может формировать действие обработки.
//		* Автор - СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи - Автор процесса.
//		* Дата - Дата - Дата процесса.
//		* Наименование - Строка - Наименование процесса.
//		* Шаблон - СправочникСсылка.ШаблоныИсполнения,
//					СправочникСсылка.ШаблоныОзнакомления,
//					СправочникСсылка.ШаблоныПодписания,
//					СправочникСсылка.ШаблоныРассмотрения,
//					СправочникСсылка.ШаблоныРегистрации,
//					СправочникСсылка.ШаблоныСогласования,
//					СправочникСсылка.ШаблоныУтверждения - Шаблон бизнес-процесса.
//		* ПометкаУдаления - Булево - Признак пометки на удаление процесса.
//		* Состояние - ПеречислениеСсылка.СостоянияБизнесПроцессов - Состояние процесса.
//		* Предметы - ТаблицаЗначений - Предметы процесса.
//		* СпособПодписания - ПеречислениеСсылка.СпособыПодписанияПредметаПроцесса - Способ подписания предмета.
//
Функция ДанныеПроцесса(Процесс)
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Процесс) Тогда
		ИменаРеквизитовПроцесса =
			"Ссылка, Автор, Дата, Наименование, Шаблон, ПометкаУдаления, Состояние, Предметы";
		
		Если ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.Подписание") Тогда
			ИменаРеквизитовПроцесса = ИменаРеквизитовПроцесса + ", СпособПодписания";
		КонецЕсли;
		
		ЗначенияРеквизитовПроцесса =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс, ИменаРеквизитовПроцесса);
	Иначе
		ЗначенияРеквизитовПроцесса = Процесс;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Тип", ТипЗнч(ЗначенияРеквизитовПроцесса.Ссылка));
	Параметры.Вставить("Автор", ЗначенияРеквизитовПроцесса.Автор);
	Параметры.Вставить("Дата", ЗначенияРеквизитовПроцесса.Дата);
	Параметры.Вставить("Наименование", ЗначенияРеквизитовПроцесса.Наименование);
	Параметры.Вставить("Шаблон", ЗначенияРеквизитовПроцесса.Шаблон);
	Параметры.Вставить("ПометкаУдаления", ЗначенияРеквизитовПроцесса.ПометкаУдаления);
	Параметры.Вставить("Состояние", ЗначенияРеквизитовПроцесса.Состояние);
	Параметры.Вставить("Предметы", ЗначенияРеквизитовПроцесса.Предметы.Выгрузить());
	Параметры.Вставить("СпособПодписания", Неопределено);

	Если ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.Подписание")
			Или ТипЗнч(Процесс) = Тип("БизнесПроцессОбъект.Подписание") Тогда

		Параметры.Вставить("СпособПодписания", ЗначенияРеквизитовПроцесса.СпособПодписания);
	КонецЕсли;
	
	Возврат Параметры;

КонецФункции

// Выполняет поиск (создание) вида действия обработки по данным процесса.
//
// Параметры:
//	ДанныеПроцесса - Структура - См. МиграцияДанныхИзВнешнихСистемДО21.ДанныеПроцесса.
//	ПараметрыЗагрузки - Неопределено, Структура - Содержит параметры записи и определяет возможность создания объектов.
//													См. МиграцияДанныхИзВнешнихСистемСервер.ЗагрузитьПорцию
//
// Возвращаемое значение: 
//	Неопределено - Если вид действия обработки не найден.
//	СправочникСсылка.ВидыДействий - Вид действия обработки.
//
Функция ВидДействияПоДаннымПроцесса(ДанныеПроцесса, ПараметрыЗагрузки = Неопределено)
	
	ВидДействияОбработки = Неопределено;
	
	НаименованиеДействия = НаименованиеДействияПоРеквизитамПроцесса(ДанныеПроцесса);	
	ТипДействияОбработки = 
		ТипДействияПоТипуПроцесса(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПроцесса, "Тип"));
		
	Если Не ЗначениеЗаполнено(НаименованиеДействия) Или Не ЗначениеЗаполнено(ТипДействияОбработки) Тогда
		Возврат ВидДействияОбработки;
	КонецЕсли;
		
	ВидДействияОбработки = НайтиВидДействия(ТипДействияОбработки, НаименованиеДействия);
	Если Не ЗначениеЗаполнено(ВидДействияОбработки) 
			И ЗначениеЗаполнено(ПараметрыЗагрузки)
			И ДанныеПроцесса.ПометкаУдаления = Ложь Тогда
		
		ВидДействияОбработки = СоздатьВидДействия(ТипДействияОбработки, НаименованиеДействия, ПараметрыЗагрузки);
	КонецЕсли;

	Возврат ВидДействияОбработки;
	
КонецФункции

// Выполняет создание действия обработки по виду, предмету и реквизитам процесса.
//
// Параметры:
//	ВидДействия - СправочникСсылка.ВидыДействий - Вид действия обработки.
//	Предмет - СправочникСсылка.ДокументыПредприятия, СправочникСсылка.Мероприятия - Предмет действия.
//	ДатаСоздания - Дата - Дата создания действия.
//	ПараметрыЗагрузки - Неопределено, Структура - Содержит параметры записи и определяет возможность создания объектов.
//													См. МиграцияДанныхИзВнешнихСистемСервер.ЗагрузитьПорцию 
//	ДополнительныеПараметры - Структура - см. ДанныеПроцесса 
//
// Возвращаемое значение: 
//	Неопределено - Если действие обработки не найдено.
//	ОпределяемыйТип.Действия - Действие обработки.
//
Функция СоздатьДействиеПоДаннымПроцессаИПредмету(
		ВидДействия, Предмет, ДатаСоздания, ПараметрыЗагрузки, ДополнительныеПараметры = Неопределено)
	
	Действие = Неопределено;
	
	Если Не ЗначениеЗаполнено(ВидДействия) Или Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат Действие;
	КонецЕсли;
	
	ИмяОбъектаМетаданных = ДействияСерверПовтИсп.ИмяСправочникаПоВидуДействия(ВидДействия);
	
	ДействиеОбъект = Справочники[ИмяОбъектаМетаданных].СоздатьЭлемент();
	ДействиеОбъект.ВидДействия = ВидДействия;
	ДействиеОбъект.ДатаСоздания = ДатаСоздания;
	ДействиеОбъект.МоментРазыменованияУчастников = 
		Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия;
	ДействиеОбъект.Предмет = Предмет;
	ДействиеОбъект.Создал = Сотрудники.ОсновнойСотрудник();
	
	Если (ТипЗнч(ДействиеОбъект) = Тип("СправочникОбъект.ДействияПодписания")
			Или ТипЗнч(ДействиеОбъект) = Тип("СправочникОбъект.ДействияСогласования"))
			И Не ЗначениеЗаполнено(ДействиеОбъект.ПорядокВыполненияУчастниками) Тогда
			
		ДействиеОбъект.ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно;
	КонецЕсли;
	
	Если ТипЗнч(ДействиеОбъект) = Тип("СправочникОбъект.ДействияПодписания") Тогда
		СпособПодписанияПроцесса = 
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "СпособПодписания");
		
		СпособПодписанияДействия = Перечисления.СпособыПодписанияПредметаДействия.ПЭП;
		Если СпособПодписанияПроцесса = Перечисления.СпособыПодписанияПредметаПроцесса.УЭП Тогда
			СпособПодписанияДействия = Перечисления.СпособыПодписанияПредметаДействия.УЭП;
		КонецЕсли;
		
		ДействиеОбъект.СпособПодписания = СпособПодписанияДействия;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		ДействиеОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	ДействиеОбъект.УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
	ДействиеОбъект.ИсточникДанных = Справочники.ИсточникиДанных.ДО21;
	ДействиеОбъект.Записать();

	Действие = ДействиеОбъект.Ссылка;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		ОбработкаОбъекта =
			Справочники.ОбработкиОбъектов.НоваяИлиСуществующаяОбработкаОбъекта(Предмет);
			
		РегистрыСведений.ДействияОбработкиОбъектов.ДобавитьДействиеВОбработку(
			ОбработкаОбъекта, Действие, Справочники.НастройкиОбработкиВидовОбъектов.ПустаяСсылка());
			
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			Действие,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Действие)));
	КонецЕсли;		
	
	Возврат Действие;

КонецФункции

// Выполняет поиск действий обработок по виду и предмету.
//
// Параметры:
//	ВидДействия - СправочникСсылка.ВидыДействий - Вид действия, действия которого необходимо найти.
//	Предмет - СправочникСсылка.ДокументыПредприятия, СправочникСсылка.Мероприятия - Предмет действий.
//
// Возвращаемое значение:
//
//	Массив Из ОпределяемыйТип.Действия - Список найденных действий обработок.
//
Функция НайтиДействияПоВидуИПредмету(ВидДействия, Предмет)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Действия = Новый Массив;
	Если Не ЗначениеЗаполнено(ВидДействия) Тогда
		Возврат Действия;
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрШаблон(
		"ВЫБРАТЬ
		|	Действия.Ссылка КАК Действие
		|ИЗ
		|	Справочник.%1 КАК Действия
		|ГДЕ
		|	НЕ Действия.ПометкаУдаления
		|	И НЕ Действия.ПомещеноВИсторию
		|	И Действия.Предмет = &Предмет 
		|		И Действия.ВидДействия = &ВидДействия",
		ДействияСерверПовтИсп.ИмяСправочникаПоВидуДействия(ВидДействия)));
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ВидДействия", ВидДействия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Действия = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Действие");
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

// Возвращает тип действия обработки соответствующий типу процесса.
//
// Параметры:
//	Процесс - БизнесПроцессСсылка.Исполнение,
//				БизнесПроцессСсылка.Ознакомление,
//				БизнесПроцессСсылка.Подписание,
//				БизнесПроцессСсылка.Рассмотрение,
//				БизнесПроцессСсылка.Регистрация,
//				БизнесПроцессСсылка.Согласование,
//				БизнесПроцессСсылка.Утверждение - Процесс, для которого необходимо определить тип действия обработки.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ТипыДействий - Тип действия обработки.
//
Функция ТипДействияПоТипуПроцесса(ТипПроцесса)
		
	Если ТипПроцесса = Тип("БизнесПроцессСсылка.Исполнение") 
			Или ТипПроцесса = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		Возврат Перечисления.ТипыДействий.Исполнение;
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		Возврат Перечисления.ТипыДействий.Ознакомление;
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Подписание") Тогда
		Возврат Перечисления.ТипыДействий.Подписание;
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Согласование") Тогда
		Возврат Перечисления.ТипыДействий.Согласование;
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		Возврат Перечисления.ТипыДействий.Регистрация;
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		Возврат Перечисления.ТипыДействий.Утверждение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает наменование действия соответствующее типу процесса.
//
// Параметры:
//	ТипПроцесса - Тип - Тип процесса, наименование которого необходимо получить.
//
// Возвращаемое значение:
//	Строка - Наименование действия обработки.
//
Функция НаименованиеДействияПоТипуПроцессаПоУмолчанию(ТипПроцесса)
	
	Если ТипПроцесса = Тип("БизнесПроцессСсылка.Исполнение")
			Или ТипПроцесса = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		Возврат НСтр("ru = 'Исполнить'");
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		Возврат НСтр("ru = 'Ознакомиться'");
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Подписание") Тогда
		Возврат НСтр("ru = 'Подписать'");
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Согласование") Тогда
		Возврат НСтр("ru = 'Согласовать'");
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		Возврат НСтр("ru = 'Зарегистрировать'");	
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		Возврат НСтр("ru = 'Утвердить'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает наменование действия соответствующее типу действия.
//
// Параметры:
//	ТипДействия - ПеречислениеСсылка.ТипыДействий - Тип действия, наименование которого необходимо получить.
//
// Возвращаемое значение:
//	Строка - Наименование действия обработки.
//
Функция НаименованиеДействияПоТипу(ТипДействия)
	
	Если ТипДействия = Перечисления.ТипыДействий.Исполнение Тогда
		Возврат НСтр("ru = 'Исполнить'");
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Ознакомление Тогда
		Возврат НСтр("ru = 'Ознакомиться'");
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Подписание Тогда
		Возврат НСтр("ru = 'Подписать'");
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Согласование Тогда
		Возврат НСтр("ru = 'Согласовать'");
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Регистрация Тогда
		Возврат НСтр("ru = 'Зарегистрировать'");	
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Утверждение Тогда
		Возврат НСтр("ru = 'Утвердить'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает наменование действия по реквизитам процесса.
//
// Параметры:
//	РеквизитыПроцесса - Структура:
//		* Наименование - Строка - Наименование процесса.
//		* Шаблон - СправочникСсылка.ШаблоныИсполнения,
//					СправочникСсылка.ШаблоныОзнакомления,
//					СправочникСсылка.ШаблоныПодписания,
//					СправочникСсылка.ШаблоныРассмотрения,
//					СправочникСсылка.ШаблоныРегистрации,
//					СправочникСсылка.ШаблоныСогласования,
//					СправочникСсылка.ШаблоныУтверждения - Шаблон бизнес-процесса.
//		* НаименованиеДляУстановки - Строка - Строка, которую необходимо установить в качестве наименования действия.
//		* Тип - Тип - Тип процесса.
//
// Возвращаемое значение:
//	Строка - Наименование действия обработки.
//
Функция НаименованиеДействияПоРеквизитамПроцесса(РеквизитыПроцесса)
	
	НаименованиеДействия = "";
	
	НаименованиеДляУстановки =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыПроцесса, "НаименованиеДляУстановки");
	Шаблон = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыПроцесса, "Шаблон");
	ТипПроцесса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыПроцесса, "Тип");
	
	Если ЗначениеЗаполнено(НаименованиеДляУстановки) Тогда
		НаименованиеДействия = НаименованиеДляУстановки;
	ИначеЕсли ЗначениеЗаполнено(Шаблон) И ОбщегоНазначения.СсылкаСуществует(Шаблон) Тогда
		НаименованиеДействия = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "НаименованиеБизнесПроцесса");
	Иначе
		РазложенноеНаименование = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыПроцесса, "Наименование", ""),
			" """, 
			Истина);
			
		Если РазложенноеНаименование.Количество() Тогда
			НаименованиеДействия = РазложенноеНаименование[0];
		КонецЕсли
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеДействия) И ЗначениеЗаполнено(ТипПроцесса) Тогда
		НаименованиеДействия = НаименованиеДействияПоТипуПроцессаПоУмолчанию(ТипПроцесса);
	КонецЕсли;

	Если ЗначениеЗаполнено(НаименованиеДействия) И ТипПроцесса = Тип("БизнесПроцессСсылка.Подписание") Тогда
		СпособПодписания =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыПроцесса, "СпособПодписания");
			
		Если СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.УЭП Тогда
			НаименованиеДействия = НаименованиеДействия + Нстр("ru = ' (УЭП)'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СокрЛП(Лев(НаименованиеДействия, 150));
	
КонецФункции

// Выполняет поиск вида действия обработки по типу и наименованию.
//
// Параметры:
//	ТипДействия - ПеречислениеСсылка.ТипыДействий - Тип действия обработки.
//	Наименование - Строка - Наименование действия обработки.
//
// Возвращаемое значение:
//	ОпределяемыйТип.Действия - Действие обработки.
//
Функция НайтиВидДействия(ТипДействия, Наименование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидДействия = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыДействий.Ссылка
		|ИЗ
		|	Справочник.ВидыДействий КАК ВидыДействий
		|ГДЕ
		|	ВидыДействий.Тип = &Тип
		|	И ВидыДействий.Наименование ПОДОБНО &Наименование
		|	И ВидыДействий.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Тип", ТипДействия);
	Запрос.УстановитьПараметр("Наименование", СокрЛП(Наименование));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВидДействия = Выборка.Ссылка;
	КонецЕсли;	
	
	Возврат ВидДействия;
	
КонецФункции

// Создает вид действия обработки по типу и наименованию.
//
// Параметры:
//	ТипДействия - ПеречислениеСсылка.ТипыДействий - Тип действия обработки.
//	Наименование - Строка - Наименование действия обработки.
//	ПараметрыЗагрузки - Структура - См. МиграцияДанныхИзВнешнихСистемСервер.ЗагрузитьПорцию.
//
// Возвращаемое значение:
//	ОпределяемыйТип.Действия - Действие обработки.
//
Функция СоздатьВидДействия(ТипДействия, Наименование, ПараметрыЗагрузки)

	Если Не ЗначениеЗаполнено(ТипДействия) Тогда
		ВызватьИсключение 
			Нстр("ru = 'Не указан тип действия.'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
 	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		ВызватьИсключение 
			Нстр("ru = 'Не указано наименование вида действия.'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ВидыДействийОбъект = Справочники.ВидыДействий.СоздатьЭлемент();
	ВидыДействийОбъект.Наименование = СокрЛП(Наименование);
	ВидыДействийОбъект.Тип = ТипДействия;	
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		ВидыДействийОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	ВидыДействийОбъект.Записать();

	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			ВидыДействийОбъект.Ссылка,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ВидыДействийОбъект.Ссылка)));
	КонецЕсли;	
	
	Возврат ВидыДействийОбъект.Ссылка;

КонецФункции

// Обновляет действие согласно текущему состоянию, связанных с ним, процессов.
//
// Параметры:
//	Действия - ОпределяемыйТип.Действия,
//				Массив из ОпределяемыйТип.Действия - Действия, которые необходимо обновить.
//	ПараметрыЗагрузки - Структура - См. МиграцияДанныхИзВнешнихСистемСервер.ЗагрузитьПорцию.
//
Процедура ОбновитьДействия(Действия, ПараметрыЗагрузки)
	
	ПроцессыДействий = ПроцессыДействий(Действия);
	
	Если ПроцессыДействий.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.Текст = ТекстЗапросаПроцессыДействий();
		Запрос.УстановитьПараметр("ПроцессыДействий", ПроцессыДействий);
		Запрос.Выполнить();

		ТипыПроцессов = ПроцессыДействий.Скопировать(, "ТипПроцесса");
		ТипыПроцессов.Свернуть("ТипПроцесса");
		ТипыПроцессов = ТипыПроцессов.ВыгрузитьКолонку("ТипПроцесса");

		ТипыДействий = ПроцессыДействий.Скопировать(, "ТипДействия");
		ТипыДействий.Свернуть("ТипДействия");
		ТипыДействий = ТипыДействий.ВыгрузитьКолонку("ТипДействия");
		
		ДействияОбработокУстановитьБлокировкуДанных(ПроцессыДействий);
		ПроцессыДействийОбработокУстановитьБлокировкуДанных(ПроцессыДействий, ТипыПроцессов);
		ОбновитьДействияОбработок(Запрос.МенеджерВременныхТаблиц, ТипыДействий, ПараметрыЗагрузки);
		ДействияОбработокПоместитьВИсториюНеАктуальные(ПроцессыДействий, Действия);
		ОбновитьСостоянияОбработокДействий(Запрос.МенеджерВременныхТаблиц);
		
		Запрос.МенеджерВременныхТаблиц.Закрыть();
	Иначе
		ДействияОбработокПоместитьВИсториюНеАктуальные(ПроцессыДействий, Действия);
	КонецЕсли;
	
	ДействияОбработокОбновитьСвязанныеДанные(ПроцессыДействий);
	
КонецПроцедуры

// Возвращает таблицу соответствия процессов действиям.
//
// Параметры:
//	Действия - Массив из ОпределяемыйТип.Действия - Действия, для которых необходимо получить список процессов.
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* Действие - ОпределяемыйТип.Действия - Действие обработки.
//		* Процесс - БизнесПроцессСсылка.Исполнение,
//					БизнесПроцессСсылка.Ознакомление,
//					БизнесПроцессСсылка.Подписание,
//					БизнесПроцессСсылка.Рассмотрение,
//					БизнесПроцессСсылка.Регистрация,
//					БизнесПроцессСсылка.Согласование,
//					БизнесПроцессСсылка.Утверждение - Процесс, связанный с действием.
//
Функция ПроцессыДействий(Действия)
		
	СоответствиеПроцессовИДействий = СоответствиеПроцессовИДействий();
	ТипыДействийВЗапросе = Новый Соответствие();
	
	ТекстЗапросаВсеДействияИПредметы = Новый Массив;
	Для Каждого Действие Из Действия Цикл
		Если ТипыДействийВЗапросе[ТипЗнч(Действие)] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапросаДействияИПредметыТипа = 
			"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Действие,
			|	Таблица.ВидДействия КАК ВидДействия,
			|	Таблица.ДатаСоздания КАК ДатаСоздания,
			|	Таблица.Предмет КАК Предмет,
			|	НЕОПРЕДЕЛЕНО КАК СпособПодписания
			|ИЗ
			|	#ТаблицаТипа КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В(&Действия)";
		
		ТекстЗапросаДействияИПредметыТипа = СтрЗаменить(
			ТекстЗапросаДействияИПредметыТипа,
			"#ТаблицаТипа",
			ОбщегоНазначения.ИмяТаблицыПоСсылке(Действие));
		
		Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
			ТекстЗапросаДействияИПредметыТипа = СтрЗаменить(
				ТекстЗапросаДействияИПредметыТипа,
				"НЕОПРЕДЕЛЕНО КАК СпособПодписания", 
				"	ВЫБОР
				|		КОГДА Таблица.СпособПодписания = ЗНАЧЕНИЕ(Перечисление.СпособыПодписанияПредметаДействия.УЭП)
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПодписанияПредметаПроцесса.УЭП)
				|		КОГДА Таблица.СпособПодписания = ЗНАЧЕНИЕ(Перечисление.СпособыПодписанияПредметаДействия.ПЭП)
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПодписанияПредметаПроцесса.ПЭП)
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ КАК СпособПодписания");	
		КонецЕсли;
		
		ТекстЗапросаВсеДействияИПредметы.Добавить(ТекстЗапросаДействияИПредметыТипа);
		
		ТипыДействийВЗапросе.Вставить(ТипЗнч(Действие), Истина);
	КонецЦикла;
	
	ТекстЗапросаПроцессы = Новый Массив;
	Для Каждого Элемент Из ТипыДействийВЗапросе Цикл
		ТипыПроцессов = СоответствиеПроцессовИДействий[Элемент.Ключ];
		
		Для Каждого ТипПроцесса Из ТипыПроцессов Цикл
			ТекстЗапросаПроцесса =
				"ВЫБРАТЬ
				|	ПредметыДействий.Действие КАК Действие,
				|	ПредметыДействий.ВидДействия КАК ВидДействия,
				|	ПредметыДействий.Предмет КАК Предмет,
				|	ПредметыПроцесса.Ссылка КАК Процесс,
				|	ТИПЗНАЧЕНИЯ(ПредметыДействий.Действие) КАК ТипДействия,
				|	ТИПЗНАЧЕНИЯ(ПредметыПроцесса.Ссылка) КАК ТипПроцесса,
				|	ТИПЗНАЧЕНИЯ(ПредметыДействий.Действие) В (ТИП(Справочник.ДействияПодписания), ТИП(Справочник.ДействияУтверждения))
				|		И ТИПЗНАЧЕНИЯ(ПредметыДействий.Предмет) = ТИП(Справочник.ДокументыПредприятия) КАК ОбновитьПодписалУтвердил,
				|	Процесс.Наименование КАК НаименованиеБизнесПроцесса,
				|	Процесс.Шаблон КАК ШаблонПроцесса,
				|	ЕСТЬNULL(Процесс.Шаблон.НаименованиеБизнесПроцесса, """") КАК НаименованиеБизнесПроцессаИзШаблона,
				|	НЕОПРЕДЕЛЕНО КАК СпособПодписания
				|ИЗ
				|	ПредметыДействий КАК ПредметыДействий
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаТипаПредметы КАК ПредметыПроцесса
				|		ПО (ПредметыПроцесса.Предмет = ПредметыДействий.Предмет)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаТипа КАК Процесс
				|		ПО (ПредметыПроцесса.Ссылка = Процесс.Ссылка)
				|		//ОТБОРСОЕДИНЕНИЕМ
				|ГДЕ
				|	НЕ Процесс.ПометкаУдаления
				|	И НЕ Процесс.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)";
			
			ИмяТаблицыПроцесса = Метаданные.НайтиПоТипу(ТипПроцесса).ПолноеИмя();
			
			ТекстЗапросаПроцесса =
				СтрЗаменить(ТекстЗапросаПроцесса, "#ТаблицаТипаПредметы", СтрШаблон("%1.Предметы", ИмяТаблицыПроцесса));
			ТекстЗапросаПроцесса = СтрЗаменить(ТекстЗапросаПроцесса, "#ТаблицаТипа", ИмяТаблицыПроцесса); 
			
			Если ТипПроцесса = Тип("БизнесПроцессСсылка.Подписание") Тогда
				ТекстЗапросаПроцесса = СтрЗаменить(
					ТекстЗапросаПроцесса,
					"НЕОПРЕДЕЛЕНО КАК СпособПодписания",
					"ВЫБОР
					|		КОГДА Процесс.СпособПодписания = ЗНАЧЕНИЕ(Перечисление.СпособыПодписанияПредметаПроцесса.УЭП) ТОГДА
					|			Процесс.СпособПодписания
					|		ИНАЧЕ
					|			ЗНАЧЕНИЕ(Перечисление.СпособыПодписанияПредметаПроцесса.ПЭП)
					|	КОНЕЦ КАК СпособПодписания");
				
				ТекстЗапросаПроцесса = СтрЗаменить(
					ТекстЗапросаПроцесса,
					"//ОТБОРСОЕДИНЕНИЕМ",
					"	И ПредметыДействий.СпособПодписания =
					|		ВЫБОР
					|			КОГДА Процесс.СпособПодписания = ЗНАЧЕНИЕ(Перечисление.СпособыПодписанияПредметаПроцесса.УЭП) ТОГДА
					|				Процесс.СпособПодписания
					|			ИНАЧЕ
					|				ЗНАЧЕНИЕ(Перечисление.СпособыПодписанияПредметаПроцесса.ПЭП)
					|		КОНЕЦ");
			КонецЕсли;
			
			ТекстЗапросаПроцессы.Добавить(ТекстЗапросаПроцесса);	
		КонецЦикла;
	КонецЦикла;
	
	СхемаЗапроса = Новый СхемаЗапроса();
	
	ЭлементПакета = СхемаЗапроса.ПакетЗапросов.Добавить();
	
	Оператор = ЭлементПакета.Операторы[0];
	ВложенныйЭлемент = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "ВложенныйЗапрос");
	ВложенныйЭлемент.Источник.Запрос.УстановитьТекстЗапроса(
		СтрСоединить(ТекстЗапросаВсеДействияИПредметы, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС));
	
	Для Каждого Поле Из ВложенныйЭлемент.Источник.ДоступныеПоля Цикл
		Оператор.ВыбираемыеПоля.Добавить(Поле);
	КонецЦикла;
	
	ЭлементПакета.ТаблицаДляПомещения = "ВсеДействияИПредметы";
	ВыражениеСхемыЗапроса = Оператор.ВыбираемыеПоля.Добавить("АВТОНОМЕРЗАПИСИ()");
	КолонкаВыраженияСхемы = ЭлементПакета.Колонки.Найти(ВыражениеСхемыЗапроса);
	КолонкаВыраженияСхемы.Псевдоним = "НомерЗаписи";
	
	ЭлементПакета = СхемаЗапроса.ПакетЗапросов.Добавить();
	ЭлементПакета.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	ВсеДействияИПредметы.Действие КАК Действие,
		|	ВсеДействияИПредметы.ВидДействия КАК ВидДействия,
		|	ВсеДействияИПредметы.Предмет КАК Предмет,
		|	ВсеДействияИПредметы.СпособПодписания КАК СпособПодписания
		|ИЗ
		|	ВсеДействияИПредметы КАК ВсеДействияИПредметы
		|ГДЕ
		|	(ВсеДействияИПредметы.ВидДействия,
		|		ВсеДействияИПредметы.Предмет,
		|		ВсеДействияИПредметы.СпособПодписания,
		|		РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВсеДействияИПредметы.ДатаСоздания, МИНУТА) * 60
		|			+ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВсеДействияИПредметы.ДатаСоздания, МИНУТА), ВсеДействияИПредметы.ДатаСоздания, СЕКУНДА)
		|			+ ВсеДействияИПредметы.НомерЗаписи / 1000000) В
		|				(ВЫБРАТЬ
		|					ВсеДействияИПредметы.ВидДействия,
		|					ВсеДействияИПредметы.Предмет,
		|					ВсеДействияИПредметы.СпособПодписания,
		|					МАКСИМУМ(РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВсеДействияИПредметы.ДатаСоздания, МИНУТА) * 60
		|						+ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВсеДействияИПредметы.ДатаСоздания, МИНУТА), ВсеДействияИПредметы.ДатаСоздания, СЕКУНДА)
		|						+ ВсеДействияИПредметы.НомерЗаписи / 1000000)
		|				ИЗ
		|					ВсеДействияИПредметы
		|				СГРУППИРОВАТЬ ПО
		|					ВсеДействияИПредметы.ВидДействия,
		|					ВсеДействияИПредметы.Предмет,
		|					ВсеДействияИПредметы.СпособПодписания)");
	ЭлементПакета.ТаблицаДляПомещения = "ПредметыДействий";
	
	ЭлементПакета = СхемаЗапроса.ПакетЗапросов.Добавить();
	ЭлементПакета.УстановитьТекстЗапроса(
		СтрСоединить(ТекстЗапросаПроцессы, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС));
	
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	Запрос.УстановитьПараметр("Действия", Действия);
	РезультатЗапроса = Запрос.Выполнить();
	
	ПроцессыДействий = Новый ТаблицаЗначений;
	ПроцессыДействий.Колонки.Добавить("Действие", РезультатЗапроса.Колонки.Действие.ТипЗначения);
	ПроцессыДействий.Колонки.Добавить("Процесс", РезультатЗапроса.Колонки.Процесс.ТипЗначения);
	ПроцессыДействий.Колонки.Добавить("Предмет", РезультатЗапроса.Колонки.Предмет.ТипЗначения);
	ПроцессыДействий.Колонки.Добавить("ТипДействия", РезультатЗапроса.Колонки.ТипДействия.ТипЗначения);
	ПроцессыДействий.Колонки.Добавить("ТипПроцесса", РезультатЗапроса.Колонки.ТипПроцесса.ТипЗначения);
	ПроцессыДействий.Колонки.Добавить("ОбновитьПодписалУтвердил", РезультатЗапроса.Колонки.ОбновитьПодписалУтвердил.ТипЗначения);

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РеквизитыПроцесса = Новый Структура;
		РеквизитыПроцесса.Вставить("Тип", Выборка.ТипПроцесса);
		РеквизитыПроцесса.Вставить("Наименование", Выборка.НаименованиеБизнесПроцесса);
		РеквизитыПроцесса.Вставить("Шаблон", Выборка.ШаблонПроцесса);
		РеквизитыПроцесса.Вставить("НаименованиеДляУстановки", Выборка.НаименованиеБизнесПроцессаИзШаблона);
		РеквизитыПроцесса.Вставить("СпособПодписания", Выборка.СпособПодписания);
		
		ВидДействия = НайтиВидДействия(
			ТипДействияПоТипуПроцесса(РеквизитыПроцесса.Тип), 
			НаименованиеДействияПоРеквизитамПроцесса(РеквизитыПроцесса));
			
		Если Выборка.ВидДействия = ВидДействия Тогда
			ЗаполнитьЗначенияСвойств(ПроцессыДействий.Добавить(), Выборка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроцессыДействий;
	
КонецФункции

// Возвращает соответствие типов действий типам процессов.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Соответствие:
//		* Ключ - ОпределяемыйТип.Действия - Действие обработки.
//		* Значение - Массив из БизнесПроцессСсылка.Исполнение,
//					БизнесПроцессСсылка.Ознакомление,
//					БизнесПроцессСсылка.Подписание,
//					БизнесПроцессСсылка.Рассмотрение,
//					БизнесПроцессСсылка.Регистрация,
//					БизнесПроцессСсылка.Согласование,
//					БизнесПроцессСсылка.Утверждение - Процесс, связанный с действием.
//
Функция СоответствиеПроцессовИДействий()

	ПроцессыДействияИсполнения = Новый Массив;
	ПроцессыДействияИсполнения.Добавить(Тип("БизнесПроцессСсылка.Исполнение"));
	ПроцессыДействияИсполнения.Добавить(Тип("БизнесПроцессСсылка.Рассмотрение"));
	
	СоответствиеПроцессовИДействий = Новый Соответствие;
	СоответствиеПроцессовИДействий.Вставить(
		Тип("СправочникСсылка.ДействияИсполнения"), 
		ПроцессыДействияИсполнения);
	СоответствиеПроцессовИДействий.Вставить(
		Тип("СправочникСсылка.ДействияОзнакомления"), 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("БизнесПроцессСсылка.Ознакомление")));
	СоответствиеПроцессовИДействий.Вставить(
		Тип("СправочникСсылка.ДействияПодписания"), 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("БизнесПроцессСсылка.Подписание")));
	СоответствиеПроцессовИДействий.Вставить(
		Тип("СправочникСсылка.ДействияРегистрации"),
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("БизнесПроцессСсылка.Регистрация")));
	СоответствиеПроцессовИДействий.Вставить(
		Тип("СправочникСсылка.ДействияСогласования"), 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("БизнесПроцессСсылка.Согласование")));
	СоответствиеПроцессовИДействий.Вставить(
		Тип("СправочникСсылка.ДействияУтверждения"),
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("БизнесПроцессСсылка.Утверждение")));
	
	Возврат СоответствиеПроцессовИДействий;
		
КонецФункции

Процедура ДействияОбработокУстановитьБлокировкуДанных(ПроцессыДействий)
	
	Действия = ПроцессыДействий.Скопировать(, "Действие");
	Действия.Свернуть("Действие");
	
	Предметы = ПроцессыДействий.Скопировать(, "Предмет");
	Предметы.Свернуть("Предмет");
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого СтрокаТаблицы Из Действия Цикл
		Действие = СтрокаТаблицы.Действие;
		
		Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Действие)).УстановитьЗначение("Ссылка", Действие);
		Блокировка.Добавить("РегистрСведений.СостоянияДействий").УстановитьЗначение("Действие", Действие);
		Блокировка.Добавить("РегистрСведений.РезультатыДействий").УстановитьЗначение("Действие", Действие);
		Блокировка.Добавить("РегистрСведений.ДействияОбработкиОбъектов").УстановитьЗначение("Действие", Действие);
		Блокировка.Добавить("РегистрСведений.ТекущиеСостоянияДокументов").УстановитьЗначение("Действие", Действие);
		Блокировка.Добавить("РегистрСведений.СведенияОбУчастникахДействий").УстановитьЗначение("Действие", Действие);	
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Предметы Цикл
		Предмет = СтрокаТаблицы.Предмет;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
			Блокировка.Добавить("РегистрСведений.ДанныеДокументовПредприятия").УстановитьЗначение("Документ", Предмет);
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда
			Блокировка.Добавить("РегистрСведений.ДанныеМероприятий").УстановитьЗначение("Мероприятие", Предмет);
		КонецЕсли;
		Блокировка.Добавить("РегистрСведений.КешИнформацииОбОбъектах").УстановитьЗначение("Объект", Предмет);
	КонецЦикла;
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ПроцессыДействийОбработокУстановитьБлокировкуДанных(ПроцессыДействий, ТипыПроцессов)
	
	Блокировка = Новый БлокировкаДанных;
	
	Для Каждого ТипПроцесса Из ТипыПроцессов Цикл
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.НайтиПоТипу(ТипПроцесса).ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.ИсточникДанных = 
			ПроцессыДействий.Скопировать(Новый Структура("ТипПроцесса", ТипПроцесса), "Процесс");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Процесс");
	КонецЦикла;

	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ОбновитьДействияОбработок(МенеджерВременныхТаблиц, ТипыДействий, ПараметрыЗагрузки)
	
	ТекстВыборкаДанных = Новый Массив;
	ТекстРезультатРеквизиты = Новый Массив;
	ТекстРезультатУчастники = Новый Массив;
	
	Для Каждого ТипДействия Из ТипыДействий Цикл
		ТекстыЗапросов = Неопределено;
		Если ТипДействия = Тип("СправочникСсылка.ДействияИсполнения") Тогда
			ТекстыЗапросов = ТекстыЗапросовДействиеИсполнение();
		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			ТекстыЗапросов = ТекстыЗапросовДействиеОзнакомление();
		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияПодписания") Тогда
			ТекстыЗапросов = ТекстыЗапросовДействиеПодписание();
		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияРегистрации") Тогда
			ТекстыЗапросов = ТекстыЗапросовДействиеРегистрация();
		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияСогласования") Тогда
			ТекстыЗапросов = ТекстыЗапросовДействиеСогласование();	
		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияУтверждения") Тогда
			ТекстыЗапросов = ТекстыЗапросовДействиеУтверждение();
		Иначе
			ВызватьИсключение Нстр("ru = 'Неизвестный тип действия обработки.'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстыЗапросов) Тогда
			ТекстВыборкаДанных.Добавить(ТекстыЗапросов.ВыборкаДанных);
			ТекстРезультатРеквизиты.Добавить(ТекстыЗапросов.РезультатРеквизиты);
			ТекстРезультатУчастники.Добавить(ТекстыЗапросов.РезультатУчастники);
		КонецЕсли; 
	КонецЦикла;
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(
		СтрСоединить(ТекстВыборкаДанных, Символы.ПС + ";" + Символы.ПС));
	
	ЭлементПакета = СхемаЗапроса.ПакетЗапросов.Добавить();
	ЭлементПакета.УстановитьТекстЗапроса(
		СтрСоединить(ТекстРезультатУчастники, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС));
	ЭлементПакета.Порядок.Добавить("Действие");
	ЭлементПакета.Порядок.Добавить("Порядок");
	ЭлементПакета.КонтрольныеТочкиИтогов.Добавить(ЭлементПакета.Колонки.Найти("Действие"));
	
	ЭлементПакета = СхемаЗапроса.ПакетЗапросов.Добавить();
	ЭлементПакета.УстановитьТекстЗапроса(
		СтрСоединить(ТекстРезультатРеквизиты, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС));
	ЭлементПакета.Порядок.Добавить("Действие");

	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
	УстановитьПараметрыЗапроса(Запрос);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДействия = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	ВыборкаУчастникиДействий =
		РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаДействия.Следующий() Цикл
		Действие = ВыборкаДействия.Действие;
		
		РегистрыСведений.СостоянияДействий.УдалитьВсеСостоянияДействия(Действие);
		РегистрыСведений.РезультатыДействий.УдалитьВсеРезультатыВыполненияДействия(Действие);
		
		ВыборкаУчастникиДействий.Сбросить();
		ВыборкаУчастникиДействий.НайтиСледующий(Действие, "Действие");
		
		ОбновитьДействие(Действие, ВыборкаДействия, ВыборкаУчастникиДействий.Выбрать(), ПараметрыЗагрузки);
	КонецЦикла;
	
КонецПроцедуры         

Процедура УстановитьПараметрыЗапроса(Запрос)
	
	Запрос.УстановитьПараметр("РассмотрениеРассмотреть", БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
	Запрос.УстановитьПараметр("РассмотрениеОзнакомиться", БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться);
	
	Запрос.УстановитьПараметр("ПодписаниеОбработатьРезультат", БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат);
	Запрос.УстановитьПараметр("ПодписаниеПодписать", БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать);
	Запрос.УстановитьПараметр("ПодписаниеОбеспечитьПодписание", БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание);
	
КонецПроцедуры

Процедура ОбновитьСостоянияОбработокДействий(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбработкиОбъектов.Обработка КАК Обработка,
		|	ДействияОбъектов.Действие КАК Действие
		|ПОМЕСТИТЬ ДействияОбработок
		|ИЗ
		|	РегистрСведений.ДействияОбработкиОбъектов КАК ОбработкиОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбъектов
		|		ПО ОбработкиОбъектов.Обработка = ДействияОбъектов.Обработка
		|ГДЕ
		|	ОбработкиОбъектов.Действие В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				Т.Действие
		|			ИЗ
		|				ПроцессыДействий КАК Т)
		|	И НЕ ДействияОбъектов.Действие.ПомещеноВИсторию
		|	И НЕ ДействияОбъектов.Действие.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбработкиОбъектов.Обработка,
		|	ДействияОбъектов.Действие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействияОбработок.Обработка КАК Обработка,
		|	ВЫБОР
		|		КОГДА СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиОбъектов.Выполняется)
		|		КОГДА СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиОбъектов.Завершена)
		|		КОГДА СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Пропущено)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиОбъектов.Завершена)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	МИНИМУМ(ЕСТЬNULL(СостоянияДействийВыполняется.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаНачала,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|				ТОГДА СостоянияДействий.Дата
		|			КОГДА СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Пропущено)
		|				ТОГДА СостоянияДействий.Дата
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаОкончания,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|				ТОГДА 1
		|			КОГДА СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|				ТОГДА 2
		|			КОГДА СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Пропущено)
		|				ТОГДА 2
		|			ИНАЧЕ 3
		|		КОНЕЦ) КАК Приоритет
		|ПОМЕСТИТЬ СостоянияОбработок
		|ИЗ
		|	ДействияОбработок КАК ДействияОбработок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ПО ДействияОбработок.Действие = СостоянияДействий.Действие
		|			И (СостоянияДействий.Функция = НЕОПРЕДЕЛЕНО)
		|			И (СостоянияДействий.Участник = НЕОПРЕДЕЛЕНО)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействийВыполняется
		|		ПО ДействияОбработок.Действие = СостоянияДействийВыполняется.Действие
		|			И (НЕ СостоянияДействийВыполняется.Участник = НЕОПРЕДЕЛЕНО)
		|			И (СостоянияДействийВыполняется.Состояние В 
		|					(ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)))
		|
		|СГРУППИРОВАТЬ ПО
		|	ДействияОбработок.Обработка,
		|	ВЫБОР
		|		КОГДА СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиОбъектов.Выполняется)
		|		КОГДА СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиОбъектов.Завершена)
		|		КОГДА СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Пропущено)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиОбъектов.Завершена)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОбработок.Обработка КАК Обработка,
		|	ЕСТЬNULL(СостоянияОбработок.Обработка.Владелец, НЕОПРЕДЕЛЕНО) КАК Объект,
		|	СостоянияОбработок.Состояние КАК Состояние,
		|	АктуальноеСостояние.ДатаНачала КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА СостоянияОбработок.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиОбъектов.Завершена))
		|			ТОГДА АктуальноеСостояние.ДатаОкончания
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА СостоянияОбработок.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиОбъектов.Завершена))
		|			ТОГДА АктуальноеСостояние.ДатаОкончания
		|		ИНАЧЕ АктуальноеСостояние.ДатаНачала
		|	КОНЕЦ КАК ДатаИзмененияСостоянияОбработки
		|ИЗ
		|	СостоянияОбработок КАК СостоянияОбработок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОбработок.Обработка КАК Обработка,
		|			МИНИМУМ(СостоянияОбработок.Приоритет) КАК Приоритет,
		|			МИНИМУМ(СостоянияОбработок.ДатаНачала) КАК ДатаНачала,
		|			МАКСИМУМ(СостоянияОбработок.ДатаОкончания) КАК ДатаОкончания
		|		ИЗ
		|			СостоянияОбработок КАК СостоянияОбработок
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОбработок.Обработка) КАК АктуальноеСостояние
		|		ПО СостоянияОбработок.Обработка = АктуальноеСостояние.Обработка
		|			И СостоянияОбработок.Приоритет = АктуальноеСостояние.Приоритет");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Состояние) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Объект) Тогда
			Делопроизводство.ЗаписатьДанныеДокумента(
				Выборка.Объект, "СостояниеОбработки", Выборка.Состояние);
				
			Если ЗначениеЗаполнено(Выборка.ДатаИзмененияСостоянияОбработки) Тогда
				Делопроизводство.ЗаписатьДанныеДокумента(
					Выборка.Объект, "ДатаИзмененияСостоянияОбработки", Выборка.ДатаИзмененияСостоянияОбработки);
			КонецЕсли;
		КонецЕсли;
	
		ОбработкаОбъект = Выборка.Обработка.ПолучитьОбъект();
		ОбработкаОбъект.Состояние = Выборка.Состояние;
		Если ЗначениеЗаполнено(Выборка.ДатаНачала) Тогда
			ОбработкаОбъект.ДатаНачала = Выборка.ДатаНачала;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
			ОбработкаОбъект.ДатаОкончания = Выборка.ДатаОкончания;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ДатаИзмененияСостоянияОбработки) Тогда
			ОбработкаОбъект.ДатаИзмененияСостояния = Выборка.ДатаИзмененияСостоянияОбработки;
		КонецЕсли;
		ОбработкаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияОбработокПоместитьВИсториюНеАктуальные(ПроцессыДействий, Действия)
	
	АктуальныеДействия = ПроцессыДействий.Скопировать(, "Действие");
	АктуальныеДействия.Свернуть("Действие");
	АктуальныеДействия = АктуальныеДействия.ВыгрузитьКолонку("Действие");
	
	НеАктуальныеДействия = 
		ОбщегоНазначенияКлиентСервер.РазностьМассивов(Действия, АктуальныеДействия);
	
	Если Не ЗначениеЗаполнено(НеАктуальныеДействия) Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого Действие Из НеАктуальныеДействия Цикл
		РегистрыСведений.ДействияОбработкиОбъектов.ИсключитьДействиеИзОбработки(Действие);
		ДействияСервер.ПоместитьДействиеВИсторию(Действие); 
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияОбработокОбновитьСвязанныеДанные(ПроцессыДействий)
	
	// Заполнение данных о подписантах
	ОбновитьПодписалУтвердил = 
		ПроцессыДействий.Скопировать(Новый Структура("ОбновитьПодписалУтвердил", Истина));
	ОбновитьПодписалУтвердил.Свернуть("Предмет");

	Для Каждого СтрокаТаблицы Из ОбновитьПодписалУтвердил Цикл
		Делопроизводство.ЗаписатьДанныеДокумента(
			СтрокаТаблицы.Предмет,
			"ПодписанУтвержден",
			Делопроизводство.СтрокаПодписалУтвердил(СтрокаТаблицы.Предмет));
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПроцессыДействий()

	Возврат
		"ВЫБРАТЬ
		|	ПроцессыДействий.Действие,
		|	ПроцессыДействий.Процесс
		|ПОМЕСТИТЬ ПроцессыДействий
		|ИЗ
		|	&ПроцессыДействий КАК ПроцессыДействий";
	
КонецФункции

Функция ТекстыЗапросовДействиеИсполнение()
	
	ТекстыЗапроса = Новый Структура;
	ТекстыЗапроса.Вставить(
		"ВыборкаДанных",
		"ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	ВложенныйЗапрос.Тип КАК Тип,
		|	ВложенныйЗапрос.Действие КАК Действие,
		|	ВложенныйЗапрос.БизнесПроцесс КАК БизнесПроцесс,
		|	ВложенныйЗапрос.Автор КАК Автор,
		|	ВложенныйЗапрос.Важность КАК Важность,
		|	ВложенныйЗапрос.ВариантИсполнения КАК ВариантИсполнения,
		|	ВложенныйЗапрос.Дата КАК Дата,
		|	ВложенныйЗапрос.ДатаНачала КАК ДатаНачала,
		|	ВложенныйЗапрос.ДатаЗавершения КАК ДатаЗавершения,
		|	ВложенныйЗапрос.КоличествоИтераций КАК КоличествоИтераций,
		|	ВложенныйЗапрос.Контролер КАК Контролер,
		|	ВложенныйЗапрос.Завершен КАК Завершен,
		|	ВложенныйЗапрос.НомерИтерации КАК НомерИтерации,
		|	ВложенныйЗапрос.Выполняется КАК Выполняется
		|ПОМЕСТИТЬ ИсходныеДанныеИсполнение
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК Тип,
		|		ПроцессыДействий.Действие КАК Действие,
		|		Процессы.Ссылка КАК БизнесПроцесс,
		|		Процессы.Автор КАК Автор,
		|		Процессы.Важность КАК Важность,
		|		Процессы.ВариантИсполнения КАК ВариантИсполнения,
		|		Процессы.Дата КАК Дата,
		|		Процессы.ДатаНачала КАК ДатаНачала,
		|		Процессы.ДатаЗавершения КАК ДатаЗавершения,
		|		Процессы.КоличествоИтераций КАК КоличествоИтераций,
		|		Процессы.Контролер КАК Контролер,
		|		Процессы.Завершен КАК Завершен,
		|		Процессы.НомерИтерации КАК НомерИтерации,
		|		ВЫБОР
		|			КОГДА Процессы.Стартован
		|			И НЕ Процессы.Завершен
		|			И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Выполняется
		|	ИЗ
		|		БизнесПроцесс.Исполнение КАК Процессы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроцессыДействий КАК ПроцессыДействий
		|			ПО Процессы.Ссылка = ПроцессыДействий.Процесс
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		2,
		|		ПроцессыДействий.Действие,
		|		Процессы.Ссылка,
		|		Процессы.Автор,
		|		Процессы.Важность,
		|		Процессы.ВариантИсполнения,
		|		Процессы.Дата,
		|		Процессы.ДатаНачала,
		|		Процессы.ДатаЗавершения,
		|		Процессы.КоличествоИтерацийИсполнения,
		|		Процессы.КонтролерИсполнения,
		|		Процессы.Завершен,
		|		0,
		|		ВЫБОР
		|			КОГДА Процессы.Стартован
		|			И НЕ Процессы.Завершен
		|			И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	ИЗ
		|		БизнесПроцесс.Рассмотрение КАК Процессы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроцессыДействий КАК ПроцессыДействий
		|			ПО Процессы.Ссылка = ПроцессыДействий.Процесс) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.НомерЗаписи КАК НомерЗаписи,
		|	ИсходныеДанные.Тип КАК Тип,
		|	ИсходныеДанные.Действие КАК Действие,
		|	ИсходныеДанные.БизнесПроцесс КАК БизнесПроцесс,
		|	ИсходныеДанные.Автор КАК Автор,
		|	ИсходныеДанные.Важность КАК Важность,
		|	ИсходныеДанные.ВариантИсполнения КАК ВариантИсполнения,
		|	ИсходныеДанные.Дата КАК Дата,
		|	ИсходныеДанные.ДатаНачала КАК ДатаНачала,
		|	ИсходныеДанные.ДатаЗавершения КАК ДатаЗавершения,
		|	ИсходныеДанные.КоличествоИтераций КАК КоличествоИтераций,
		|	ИсходныеДанные.Контролер КАК Контролер,
		|	ИсходныеДанные.Завершен КАК Завершен,
		|	ИсходныеДанные.НомерИтерации КАК НомерИтерации,
		|	ИсходныеДанные.Выполняется КАК Выполняется,
		|	ДОБАВИТЬКДАТЕ(ИсходныеДанные.Дата, МИНУТА, 10000000 * ИсходныеДанные.Тип * ИсходныеДанные.Выполняется + 10000 *
		|		ИсходныеДанные.НомерЗаписи) КАК Приоритет
		|ПОМЕСТИТЬ ДанныеПроцессовИсполнение
		|ИЗ
		|	ИсходныеДанныеИсполнение КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс
		|ПОМЕСТИТЬ АктуальныеПроцессыИсполнение
		|ИЗ
		|	ДанныеПроцессовИсполнение КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДанныеПроцессов.Действие КАК Действие,
		|			МАКСИМУМ(ДанныеПроцессов.Приоритет) КАК Приоритет
		|		ИЗ
		|			ДанныеПроцессовИсполнение КАК ДанныеПроцессов
		|		СГРУППИРОВАТЬ ПО
		|			ДанныеПроцессов.Действие) КАК ДанныеГруппировки
		|		ПО ДанныеПроцессов.Действие = ДанныеГруппировки.Действие
		|		И ДанныеПроцессов.Приоритет = ДанныеГруппировки.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	РезультатыПроверки.ЗадачаПроверяющего КАК ЗадачаПроверяющего,
		|	МАКСИМУМ(ЗадачиРезультатовПроверки.Выполнена) КАК Выполнена,
		|	МАКСИМУМ(ЗадачиРезультатовПроверки.Исполнитель) КАК Исполнитель,
		|	МАКСИМУМ(ЗадачиРезультатовПроверки.Дата) КАК Дата,
		|	МАКСИМУМ(ЗадачиРезультатовПроверки.ДатаИсполнения) КАК ДатаИсполнения,
		|	МАКСИМУМ(РезультатыПроверки.ОтправленоНаДоработку) КАК ОтправленоНаДоработку
		|ПОМЕСТИТЬ ИсполнениеРезультатыПроверки
		|ИЗ
		|	ДанныеПроцессовИсполнение КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыИсполнение КАК АктуальныйПроцесс
		|		ПО ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение.РезультатыПроверки КАК РезультатыПроверки
		|		ПО ДанныеПроцессов.БизнесПроцесс = РезультатыПроверки.Ссылка
		|		И ДанныеПроцессов.НомерИтерации = РезультатыПроверки.НомерИтерации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиРезультатовПроверки
		|		ПО (РезультатыПроверки.ЗадачаПроверяющего = ЗадачиРезультатовПроверки.Ссылка)
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПроцессов.БизнесПроцесс,
		|	ДанныеПроцессов.НомерИтерации,
		|	РезультатыПроверки.ЗадачаПроверяющего
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	РезультатыПроверки.ЗадачаПроверяющего КАК ЗадачаПроверяющего,
		|	МАКСИМУМ(ЗадачиРезультатовПроверки.Выполнена) КАК Выполнена,
		|	МАКСИМУМ(ЗадачиРезультатовПроверки.Исполнитель) КАК Исполнитель,
		|	МАКСИМУМ(ЗадачиРезультатовПроверки.Дата) КАК Дата,
		|	МАКСИМУМ(ЗадачиРезультатовПроверки.ДатаИсполнения) КАК ДатаИсполнения,
		|	МАКСИМУМ(РезультатыПроверки.ОтправленоНаДоработку) КАК ОтправленоНаДоработку
		|ПОМЕСТИТЬ ИсполнениеПредыдущиеРезультатыПроверки
		|ИЗ
		|	ДанныеПроцессовИсполнение КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыИсполнение КАК АктуальныйПроцесс
		|		ПО ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение.РезультатыПроверки КАК РезультатыПроверки
		|		ПО ДанныеПроцессов.БизнесПроцесс = РезультатыПроверки.Ссылка
		|		И (ДанныеПроцессов.НомерИтерации - 1 = РезультатыПроверки.НомерИтерации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиРезультатовПроверки
		|		ПО (РезультатыПроверки.ЗадачаПроверяющего = ЗадачиРезультатовПроверки.Ссылка)
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПроцессов.БизнесПроцесс,
		|	ДанныеПроцессов.НомерИтерации,
		|	РезультатыПроверки.ЗадачаПроверяющего
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	100 * Исполнители.НомерСтроки КАК Порядок,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокВыполнения,
		|	Исполнители.ВариантУстановкиСрокаИсполнения КАК ВариантУстановкиСрока,
		|	НЕОПРЕДЕЛЕНО КАК ВышестоящийУчастник,
		|	Исполнители.ИдентификаторИсполнителя КАК Идентификатор,
		|	Исполнители.Описание КАК Описание,
		|	Исполнители.Ответственный КАК Ответственный,
		|	Исполнители.СрокИсполнения КАК Срок,
		|	Исполнители.СрокИсполненияДни КАК СрокДни,
		|	Исполнители.СрокИсполненияМинуты КАК СрокМинуты,
		|	Исполнители.СрокИсполненияЧасы КАК СрокЧасы,
		|	Исполнители.Исполнитель КАК Участник,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковИсполнения.Исполнитель) КАК ФункцияУчастника,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|		ИЛИ ЕСТЬNULL(ЗадачиРезультатовИсполнения.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА НЕ ЕСТЬNULL(ЗадачиРезультатовИсполнения.Ссылка,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|		ИЛИ ЕСТЬNULL(ЗадачиРезультатовИсполнения.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыИсполнения.Исполнено)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиРезультатовИсполнения.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗадачиРезультатовИсполнения.ДатаИсполнения
		|		КОГДА НЕ ЕСТЬNULL(ЗадачиРезультатовИсполнения.Ссылка,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗадачиРезультатовИсполнения.Дата
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиРезультатовИсполнения.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗадачиРезультатовИсполнения.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаРезультата,
		|	ЕСТЬNULL(ЗадачиРезультатовИсполнения.Исполнитель, Исполнители.Исполнитель) КАК ФактическийИсполнитель,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	ДанныеПроцессов.Приоритет КАК Приоритет,
		|	ЕСТЬNULL(ЗадачиРезультатовИсполнения.РезультатВыполнения,"""") КАК Комментарий
		|ПОМЕСТИТЬ УчастникиДействияИсполнение
		|ИЗ
		|	БизнесПроцесс.Исполнение.Исполнители КАК Исполнители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовИсполнение КАК ДанныеПроцессов
		|		ПО Исполнители.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение.РезультатыИсполнения КАК РезультатыИсполненияПроцесса
		|		ПО Исполнители.Ссылка = РезультатыИсполненияПроцесса.Ссылка
		|		И Исполнители.ЗадачаИсполнителя = РезультатыИсполненияПроцесса.ЗадачаИсполнителя
		|		И (ДанныеПроцессов.НомерИтерации = РезультатыИсполненияПроцесса.НомерИтерации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиРезультатовИсполнения
		|		ПО (РезультатыИсполненияПроцесса.ЗадачаИсполнителя = ЗадачиРезультатовИсполнения.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие,
		|	99999,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессИсполнение.ВариантУстановкиСрокаОбработкиРезультатов,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	ЛОЖЬ,
		|	БизнесПроцессИсполнение.СрокОбработкиРезультатов,
		|	БизнесПроцессИсполнение.СрокОбработкиРезультатовДни,
		|	БизнесПроцессИсполнение.СрокОбработкиРезультатовМинуты,
		|	БизнесПроцессИсполнение.СрокОбработкиРезультатовЧасы,
		|	БизнесПроцессИсполнение.Проверяющий,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат),
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(РезультатыПроверкиИсполнения.ЗадачаПроверяющего,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|		И ЕСТЬNULL(РезультатыПроверкиИсполнения.ОтправленоНаДоработку, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		КОГДА ЕСТЬNULL(ПредыдущиеРезультатыПроверкиИсполнения.ОтправленоНаДоработку, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА ЕСТЬNULL(РезультатыПроверкиИсполнения.ОтправленоНаДоработку, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(РезультатыПроверкиИсполнения.ЗадачаПроверяющего,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|		И ЕСТЬNULL(РезультатыПроверкиИсполнения.ОтправленоНаДоработку, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 1
		|			ТОГДА РезультатыПроверкиИсполнения.Дата
		|		КОГДА ЕСТЬNULL(ПредыдущиеРезультатыПроверкиИсполнения.ОтправленоНаДоработку, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ПредыдущиеРезультатыПроверкиИсполнения.ДатаИсполнения
		|		КОГДА ЕСТЬNULL(РезультатыПроверкиИсполнения.ОтправленоНаДоработку, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 0
		|			ТОГДА РезультатыПроверкиИсполнения.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессИсполнение.Проверяющий,
		|	ДанныеПроцессов.БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется,
		|	ДанныеПроцессов.Дата,
		|	ДанныеПроцессов.Приоритет,
		|   """"
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК БизнесПроцессИсполнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовИсполнение КАК ДанныеПроцессов
		|		ПО БизнесПроцессИсполнение.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыИсполнение КАК АктуальныйПроцесс
		|		ПО (ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс)
		|		И (ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИсполнениеРезультатыПроверки КАК РезультатыПроверкиИсполнения
		|		ПО (ДанныеПроцессов.БизнесПроцесс = РезультатыПроверкиИсполнения.БизнесПроцесс)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИсполнениеПредыдущиеРезультатыПроверки КАК ПредыдущиеРезультатыПроверкиИсполнения
		|		ПО (ДанныеПроцессов.БизнесПроцесс = ПредыдущиеРезультатыПроверкиИсполнения.БизнесПроцесс)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие,
		|	1,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессРассмотрение.ВариантУстановкиСрокаИсполнения,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессРассмотрение.ИдентификаторИсполнителя,
		|	БизнесПроцессРассмотрение.Описание,
		|	ЛОЖЬ,
		|	БизнесПроцессРассмотрение.СрокИсполнения,
		|	БизнесПроцессРассмотрение.СрокИсполненияДни,
		|	БизнесПроцессРассмотрение.СрокИсполненияМинуты,
		|	БизнесПроцессРассмотрение.СрокИсполненияЧасы,
		|	БизнесПроцессРассмотрение.Исполнитель,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковИсполнения.Рассматривающий),
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиРассмотрения.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА НЕ ЕСТЬNULL(ЗадачиРассмотрения.Ссылка,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиРассмотрения.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыРассмотрения.Рассмотрено)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиРассмотрения.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗадачиРассмотрения.ДатаИсполнения
		|		КОГДА НЕ ЕСТЬNULL(ЗадачиРассмотрения.Ссылка,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗадачиРассмотрения.Дата
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиРассмотрения.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗадачиРассмотрения.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЗадачиРассмотрения.Исполнитель, БизнесПроцессРассмотрение.Исполнитель),
		|	ДанныеПроцессов.БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется,
		|	ДанныеПроцессов.Дата,
		|	ДанныеПроцессов.Приоритет,
		|	ЕСТЬNULL(ЗадачиРассмотрения.РезультатВыполнения,"""") КАК Комментарий
		|ИЗ
		|	БизнесПроцесс.Рассмотрение КАК БизнесПроцессРассмотрение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовИсполнение КАК ДанныеПроцессов
		|		ПО БизнесПроцессРассмотрение.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиРассмотрения
		|		ПО БизнесПроцессРассмотрение.Ссылка = ЗадачиРассмотрения.БизнесПроцесс
		|		И (ЗадачиРассмотрения.ТочкаМаршрута = &РассмотрениеРассмотреть)
		|		И (НЕ ЗадачиРассмотрения.ПометкаУдаления)
		|		И (НЕ ЗадачиРассмотрения.ИсключенаИзПроцесса)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие,
		|	2,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессРассмотрение.ВариантУстановкиСрокаОбработкиРезультатов,
		|	БизнесПроцессРассмотрение.ИдентификаторИсполнителя,
		|	БизнесПроцессРассмотрение.ИдентификаторОбрабатывающегоРезолюцию,
		|	БизнесПроцессРассмотрение.Описание,
		|	ЛОЖЬ,
		|	БизнесПроцессРассмотрение.СрокОбработкиРезультатов,
		|	БизнесПроцессРассмотрение.СрокОбработкиРезультатовДни,
		|	БизнесПроцессРассмотрение.СрокОбработкиРезультатовМинуты,
		|	БизнесПроцессРассмотрение.СрокОбработкиРезультатовЧасы,
		|	БизнесПроцессРассмотрение.Автор,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезолюцию),
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиРассмотрения.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА НЕ ЕСТЬNULL(ЗадачиРассмотрения.Ссылка,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиРассмотрения.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗадачиРассмотрения.ДатаИсполнения
		|		КОГДА НЕ ЕСТЬNULL(ЗадачиРассмотрения.Ссылка,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗадачиРассмотрения.Дата
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессРассмотрение.Автор,
		|	ДанныеПроцессов.БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется,
		|	ДанныеПроцессов.Дата,
		|	ДанныеПроцессов.Приоритет,
		|   ЕСТЬNULL(ЗадачиРассмотрения.РезультатВыполнения,"""") КАК Комментарий
		|ИЗ
		|	БизнесПроцесс.Рассмотрение КАК БизнесПроцессРассмотрение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовИсполнение КАК ДанныеПроцессов
		|		ПО БизнесПроцессРассмотрение.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыИсполнение КАК АктуальныйПроцесс
		|		ПО (ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс)
		|		И (ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиРассмотрения
		|		ПО БизнесПроцессРассмотрение.Ссылка = ЗадачиРассмотрения.БизнесПроцесс
		|		И (ЗадачиРассмотрения.ТочкаМаршрута = &РассмотрениеОзнакомиться)
		|		И (НЕ ЗадачиРассмотрения.ПометкаУдаления)
		|		И (НЕ ЗадачиРассмотрения.ИсключенаИзПроцесса)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие,
		|	3,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессРассмотрение.Автор,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессРассмотрение.Автор,
		|	ДанныеПроцессов.БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется,
		|	ДанныеПроцессов.Дата,
		|	ДанныеПроцессов.Приоритет,
		|   """"
		|ИЗ
		|	БизнесПроцесс.Рассмотрение КАК БизнесПроцессРассмотрение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовИсполнение КАК ДанныеПроцессов
		|		ПО БизнесПроцессРассмотрение.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыИсполнение КАК АктуальныйПроцесс
		|		ПО (ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс)
		|		И (ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие)");
	
	ТекстыЗапроса.Вставить(
		"РезультатУчастники",
		"ВЫБРАТЬ
		|	УчастникиДействия.Действие КАК Действие,
		|	УчастникиДействия.Порядок КАК Порядок,
		|	УчастникиДействия.ПорядокВыполнения КАК ПорядокВыполнения,
		|	УчастникиДействия.ВариантУстановкиСрока КАК ВариантУстановкиСрока,
		|	УчастникиДействия.ВышестоящийУчастник КАК ВышестоящийУчастник,
		|	УчастникиДействия.Идентификатор КАК Идентификатор,
		|	НЕОПРЕДЕЛЕНО КАК ИдентификаторЭтапа,
		|	УчастникиДействия.Описание КАК Описание,
		|	УчастникиДействия.Ответственный КАК Ответственный,
		|	УчастникиДействия.Срок КАК Срок,
		|	УчастникиДействия.СрокДни КАК СрокДни,
		|	УчастникиДействия.СрокМинуты КАК СрокМинуты,
		|	УчастникиДействия.СрокЧасы КАК СрокЧасы,
		|	УчастникиДействия.Участник КАК Участник,
		|	УчастникиДействия.ФункцияУчастника КАК ФункцияУчастника,
		|	ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ДО21) КАК ИсточникДанных,
		|	УчастникиДействия.Состояние КАК Состояние,
		|	УчастникиДействия.Результат КАК Результат,
		|	УчастникиДействия.ДатаСостояния КАК ДатаСостояния,
		|	УчастникиДействия.ДатаРезультата КАК ДатаРезультата,
		|	УчастникиДействия.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	УчастникиДействия.БизнесПроцесс КАК БизнесПроцесс,
		|	УчастникиДействия.Выполняется КАК Выполняется,
		|	УчастникиДействия.Дата КАК Дата,
		|	УчастникиДействия.Комментарий КАК Комментарий
		|ИЗ
		|	УчастникиДействияИсполнение КАК УчастникиДействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			УчастникиДействия.Действие КАК Действие,
		|			УчастникиДействия.Участник КАК Участник,
		|			УчастникиДействия.ФункцияУчастника КАК ФункцияУчастника,
		|			МАКСИМУМ(УчастникиДействия.Приоритет) КАК Приоритет
		|		ИЗ
		|			УчастникиДействияИсполнение КАК УчастникиДействия
		|		
		|		СГРУППИРОВАТЬ ПО
		|			УчастникиДействия.Действие,
		|			УчастникиДействия.Участник,
		|			УчастникиДействия.ФункцияУчастника) КАК ДанныеГруппировки
		|		ПО УчастникиДействия.Действие = ДанныеГруппировки.Действие
		|			И УчастникиДействия.Участник = ДанныеГруппировки.Участник
		|			И УчастникиДействия.ФункцияУчастника = ДанныеГруппировки.ФункцияУчастника
		|			И УчастникиДействия.Приоритет = ДанныеГруппировки.Приоритет");
	
	ТекстыЗапроса.Вставить(
		"РезультатРеквизиты",
		"ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Автор КАК Автор,
		|	ДанныеПроцессов.Важность КАК Важность,
		|	ДанныеПроцессов.ВариантИсполнения КАК ВариантИсполнения,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	ДанныеПроцессов.КоличествоИтераций КАК КоличествоИтераций,
		|	ДанныеПроцессов.Контролер КАК Контролер,
		|	НЕОПРЕДЕЛЕНО КАК СпособПодписания,
		|	ДанныеПроцессов.НомерИтерации КАК НомерИтерации,
		|	НЕОПРЕДЕЛЕНО КАК ПодписыватьУЭП,
		|	НЕОПРЕДЕЛЕНО КАК ФормируетВизы,
		|	ДанныеПроцессов.Завершен КАК Завершен,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыИсполнения.Исполнено)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ДанныеПроцессов.ДатаНачала
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаРезультата
		|ИЗ
		|	ДанныеПроцессовИсполнение КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыИсполнение КАК АктуальныйПроцесс
		|		ПО ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс
		|			И ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие");
		
	Возврат ТекстыЗапроса;

КонецФункции

Функция ТекстыЗапросовДействиеОзнакомление()
	
	ТекстыЗапроса = Новый Структура;
	ТекстыЗапроса.Вставить(
		"ВыборкаДанных",
		"ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	ПроцессыДействий.Действие КАК Действие,
		|	Процессы.Ссылка КАК БизнесПроцесс,
		|	Процессы.Автор КАК Автор,
		|	Процессы.Важность КАК Важность,
		|	Процессы.Дата КАК Дата,
		|	Процессы.ДатаНачала КАК ДатаНачала,
		|	Процессы.ДатаЗавершения КАК ДатаЗавершения,
		|	Процессы.Завершен КАК Завершен,
		|	ВЫБОР
		|		КОГДА Процессы.Стартован
		|		И НЕ Процессы.Завершен
		|		И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Выполняется
		|ПОМЕСТИТЬ ИсходныеДанныеОзнакомление
		|ИЗ
		|	БизнесПроцесс.Ознакомление КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроцессыДействий КАК ПроцессыДействий
		|		ПО Процессы.Ссылка = ПроцессыДействий.Процесс
		|ГДЕ
		|	Процессы.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ДО21)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.НомерЗаписи КАК НомерЗаписи,
		|	ИсходныеДанные.Действие КАК Действие,
		|	ИсходныеДанные.БизнесПроцесс КАК БизнесПроцесс,
		|	ИсходныеДанные.Автор КАК Автор,
		|	ИсходныеДанные.Важность КАК Важность,
		|	ИсходныеДанные.Дата КАК Дата,
		|	ИсходныеДанные.ДатаНачала КАК ДатаНачала,
		|	ИсходныеДанные.ДатаЗавершения КАК ДатаЗавершения,
		|	ИсходныеДанные.Завершен КАК Завершен,
		|	ИсходныеДанные.Выполняется КАК Выполняется,
		|	ДОБАВИТЬКДАТЕ(ИсходныеДанные.Дата, МИНУТА, 10000000 * ИсходныеДанные.Выполняется + 10000 *
		|		ИсходныеДанные.НомерЗаписи) КАК Приоритет
		|ПОМЕСТИТЬ ДанныеПроцессовОзнакомление
		|ИЗ
		|	ИсходныеДанныеОзнакомление КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс
		|ПОМЕСТИТЬ АктуальныеПроцессыОзнакомление
		|ИЗ
		|	ДанныеПроцессовОзнакомление КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДанныеПроцессов.Действие КАК Действие,
		|			МАКСИМУМ(ДанныеПроцессов.Приоритет) КАК Приоритет
		|		ИЗ
		|			ДанныеПроцессовОзнакомление КАК ДанныеПроцессов
		|		СГРУППИРОВАТЬ ПО
		|			ДанныеПроцессов.Действие) КАК ДанныеГруппировки
		|		ПО ДанныеПроцессов.Действие = ДанныеГруппировки.Действие
		|		И ДанныеПроцессов.Приоритет = ДанныеГруппировки.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ИсполнителиОзнакомления.НомерСтроки КАК Порядок,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокВыполнения,
		|	ИсполнителиОзнакомления.ВариантУстановкиСрокаИсполнения КАК ВариантУстановкиСрока,
		|	ИсполнителиОзнакомления.ИдентификаторИсполнителя КАК Идентификатор,
		|	ИсполнителиОзнакомления.СрокИсполнения КАК Срок,
		|	ИсполнителиОзнакомления.СрокИсполненияДни КАК СрокДни,
		|	ИсполнителиОзнакомления.СрокИсполненияМинуты КАК СрокМинуты,
		|	ИсполнителиОзнакомления.СрокИсполненияЧасы КАК СрокЧасы,
		|	ИсполнителиОзнакомления.Исполнитель КАК Участник,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковОзнакомления.Ознакомляемый) КАК ФункцияУчастника,
		|	ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ДО21) КАК ИсточникДанных,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|		ИЛИ ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА НЕ ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Ссылка,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|		ИЛИ ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыОзнакомления.Ознакомлен)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗадачиИсполнителейОзнакомления.ДатаИсполнения
		|		КОГДА НЕ ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Ссылка,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗадачиИсполнителейОзнакомления.Дата
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗадачиИсполнителейОзнакомления.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаРезультата,
		|	ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Исполнитель, ИсполнителиОзнакомления.Исполнитель) КАК ФактическийИсполнитель,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	ДанныеПроцессов.Приоритет КАК Приоритет,
		|	ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.РезультатВыполнения,"""") КАК Комментарий
		|ПОМЕСТИТЬ УчастникиДействияОзнакомление
		|ИЗ
		|	БизнесПроцесс.Ознакомление.Исполнители КАК ИсполнителиОзнакомления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовОзнакомление КАК ДанныеПроцессов
		|		ПО ИсполнителиОзнакомления.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиИсполнителейОзнакомления
		|		ПО ИсполнителиОзнакомления.ЗадачаИсполнителя = ЗадачиИсполнителейОзнакомления.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие,
		|	ИсполнителиОзнакомления.НомерСтроки,
		|	НЕОПРЕДЕЛЕНО,
		|	ИсполнителиОзнакомления.ВариантУстановкиСрока,
		|	ИсполнителиОзнакомления.Идентификатор,
		|	ИсполнителиОзнакомления.Срок,
		|	ИсполнителиОзнакомления.СрокДни,
		|	ИсполнителиОзнакомления.СрокМинуты,
		|	ИсполнителиОзнакомления.СрокЧасы,
		|	ИсполнителиОзнакомления.Участник,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковОзнакомления.Ознакомляемый),
		|	ИсполнителиОзнакомления.ИсточникДанных,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(БизнесПроцессОзнакомление.Завершен, ЛОЖЬ) = ИСТИНА
		|		ИЛИ ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА НЕ ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Ссылка,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(БизнесПроцессОзнакомление.Завершен, ЛОЖЬ) = ИСТИНА
		|		ИЛИ ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыОзнакомления.Ознакомлен)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗадачиИсполнителейОзнакомления.ДатаИсполнения
		|		КОГДА НЕ ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Ссылка,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗадачиИсполнителейОзнакомления.Дата
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Выполнена, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗадачиИсполнителейОзнакомления.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.Исполнитель, ИсполнителиОзнакомления.Участник),
		|	ДанныеПроцессов.БизнесПроцесс,
		|	ИСТИНА,
		|	ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59),
		|	ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59), 
		|	ЕСТЬNULL(ЗадачиИсполнителейОзнакомления.РезультатВыполнения,"""")
		|ИЗ
		|	Справочник.ДействияОзнакомления.Участники КАК ИсполнителиОзнакомления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовОзнакомление КАК ДанныеПроцессов
		|		ПО ИсполнителиОзнакомления.Ссылка = ДанныеПроцессов.Действие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Ознакомление КАК БизнесПроцессОзнакомление
		|		ПО (ДанныеПроцессов.БизнесПроцесс = БизнесПроцессОзнакомление.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Ознакомление.Исполнители КАК ИсполнителиПроцессаОзнакомление
		|		ПО (ДанныеПроцессов.БизнесПроцесс = ИсполнителиПроцессаОзнакомление.Ссылка)
		|		И ИсполнителиОзнакомления.Идентификатор = ИсполнителиПроцессаОзнакомление.ИдентификаторИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиИсполнителейОзнакомления
		|		ПО (ИсполнителиПроцессаОзнакомление.ЗадачаИсполнителя = ЗадачиИсполнителейОзнакомления.Ссылка)
		|ГДЕ
		|	ИсполнителиОзнакомления.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)");
	
	ТекстыЗапроса.Вставить(
		"РезультатУчастники",
		"ВЫБРАТЬ
		|	УчастникиДействия.Действие КАК Действие,
		|	УчастникиДействия.Порядок КАК Порядок,
		|	УчастникиДействия.ПорядокВыполнения КАК ПорядокВыполнения,
		|	УчастникиДействия.ВариантУстановкиСрока КАК ВариантУстановкиСрока,
		|	НЕОПРЕДЕЛЕНО КАК ВышестоящийУчастник,
		|	УчастникиДействия.Идентификатор КАК Идентификатор,
		|	НЕОПРЕДЕЛЕНО КАК ИдентификаторЭтапа,
		|	"""" КАК Описание,
		|	НЕОПРЕДЕЛЕНО КАК Ответственный,
		|	УчастникиДействия.Срок КАК Срок,
		|	УчастникиДействия.СрокДни КАК СрокДни,
		|	УчастникиДействия.СрокМинуты КАК СрокМинуты,
		|	УчастникиДействия.СрокЧасы КАК СрокЧасы,
		|	УчастникиДействия.Участник КАК Участник,
		|	УчастникиДействия.ФункцияУчастника КАК ФункцияУчастника,
		|	УчастникиДействия.ИсточникДанных КАК ИсточникДанных,
		|	УчастникиДействия.Состояние КАК Состояние,
		|	УчастникиДействия.Результат КАК Результат,
		|	УчастникиДействия.ДатаСостояния КАК ДатаСостояния,
		|	УчастникиДействия.ДатаРезультата КАК ДатаРезультата,
		|	УчастникиДействия.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	УчастникиДействия.БизнесПроцесс КАК БизнесПроцесс,
		|	УчастникиДействия.Выполняется КАК Выполняется,
		|	УчастникиДействия.Дата КАК Дата,
		|	УчастникиДействия.Комментарий КАК Комментарий
		|ИЗ
		|	УчастникиДействияОзнакомление КАК УчастникиДействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			УчастникиДействия.Действие КАК Действие,
		|			УчастникиДействия.Участник КАК Участник,
		|			УчастникиДействия.ФункцияУчастника КАК ФункцияУчастника,
		|			МАКСИМУМ(УчастникиДействия.Приоритет) КАК Приоритет
		|		ИЗ
		|			УчастникиДействияОзнакомление КАК УчастникиДействия
		|		
		|		СГРУППИРОВАТЬ ПО
		|			УчастникиДействия.Действие,
		|			УчастникиДействия.Участник,
		|			УчастникиДействия.ФункцияУчастника) КАК ДанныеГруппировки
		|		ПО УчастникиДействия.Действие = ДанныеГруппировки.Действие
		|			И УчастникиДействия.Участник = ДанныеГруппировки.Участник
		|			И УчастникиДействия.ФункцияУчастника = ДанныеГруппировки.ФункцияУчастника
		|			И УчастникиДействия.Приоритет = ДанныеГруппировки.Приоритет");
		
	ТекстыЗапроса.Вставить(
		"РезультатРеквизиты",
		"ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Автор КАК Автор,
		|	ДанныеПроцессов.Важность КАК Важность,
		|	НЕОПРЕДЕЛЕНО КАК ВариантИсполнения,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоИтераций,
		|	НЕОПРЕДЕЛЕНО КАК Контролер,
		|	НЕОПРЕДЕЛЕНО КАК СпособПодписания,
		|	НЕОПРЕДЕЛЕНО КАК НомерИтерации,
		|	НЕОПРЕДЕЛЕНО КАК ПодписыватьУЭП,
		|	НЕОПРЕДЕЛЕНО КАК ФормируетВизы,
		|	ДанныеПроцессов.Завершен КАК Завершен,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыОзнакомления.Ознакомлен)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ДанныеПроцессов.ДатаНачала
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаРезультата
		|ИЗ
		|	ДанныеПроцессовОзнакомление КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыОзнакомление КАК АктуальныйПроцесс
		|		ПО ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс
		|			И ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие");

	Возврат ТекстыЗапроса;

КонецФункции

Функция ТекстыЗапросовДействиеПодписание()

	ТекстыЗапроса = Новый Структура;
	ТекстыЗапроса.Вставить(
		"ВыборкаДанных",
		"ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	ПроцессыДействий.Действие КАК Действие,
		|	Процессы.Ссылка КАК БизнесПроцесс,
		|	Процессы.Автор КАК Автор,
		|	Процессы.Важность КАК Важность,
		|	Процессы.Дата КАК Дата,
		|	Процессы.ДатаНачала КАК ДатаНачала,
		|	Процессы.ДатаЗавершения КАК ДатаЗавершения,
		|	Процессы.СпособПодписания КАК СпособПодписания,
		|	Процессы.НомерИтерации КАК НомерИтерации,
		|	Процессы.Завершен КАК Завершен,
		|	ВЫБОР
		|		КОГДА Процессы.Стартован
		|		И НЕ Процессы.Завершен
		|		И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Выполняется,
		|	Процессы.РезультатПодписания КАК РезультатПодписания
		|ПОМЕСТИТЬ ИсходныеДанныеПодписание
		|ИЗ
		|	БизнесПроцесс.Подписание КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроцессыДействий КАК ПроцессыДействий
		|		ПО Процессы.Ссылка = ПроцессыДействий.Процесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.НомерЗаписи КАК НомерЗаписи,
		|	ИсходныеДанные.Действие КАК Действие,
		|	ИсходныеДанные.БизнесПроцесс КАК БизнесПроцесс,
		|	ИсходныеДанные.Автор КАК Автор,
		|	ИсходныеДанные.Важность КАК Важность,
		|	ИсходныеДанные.Дата КАК Дата,
		|	ИсходныеДанные.ДатаНачала КАК ДатаНачала,
		|	ИсходныеДанные.ДатаЗавершения КАК ДатаЗавершения,
		|	ИсходныеДанные.СпособПодписания КАК СпособПодписания,
		|	ИсходныеДанные.НомерИтерации КАК НомерИтерации,
		|	ИсходныеДанные.Завершен КАК Завершен,
		|	ИсходныеДанные.Выполняется КАК Выполняется,
		|	ИсходныеДанные.РезультатПодписания КАК РезультатПодписания,
		|	ДОБАВИТЬКДАТЕ(ИсходныеДанные.Дата, МИНУТА, 10000000 * ИсходныеДанные.Выполняется + 10000 *
		|		ИсходныеДанные.НомерЗаписи) КАК Приоритет
		|ПОМЕСТИТЬ ДанныеПроцессовПодписание
		|ИЗ
		|	ИсходныеДанныеПодписание КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс
		|ПОМЕСТИТЬ АктуальныеПроцессыПодписание
		|ИЗ
		|	ДанныеПроцессовПодписание КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДанныеПроцессов.Действие КАК Действие,
		|			МАКСИМУМ(ДанныеПроцессов.Приоритет) КАК Приоритет
		|		ИЗ
		|			ДанныеПроцессовПодписание КАК ДанныеПроцессов
		|		СГРУППИРОВАТЬ ПО
		|			ДанныеПроцессов.Действие) КАК ДанныеГруппировки
		|		ПО ДанныеПроцессов.Действие = ДанныеГруппировки.Действие
		|		И ДанныеПроцессов.Приоритет = ДанныеГруппировки.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	УчастникиПодписания.НомерСтроки КАК Порядок,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокВыполнения,
		|	УчастникиПодписания.ВариантУстановкиСрокаИсполнения КАК ВариантУстановкиСрока,
		|	НЕОПРЕДЕЛЕНО КАК ВышестоящийУчастник,
		|	УчастникиПодписания.Идентификатор КАК Идентификатор,
		|	УчастникиПодписания.Этап КАК ИдентификаторЭтапа,
		|	УчастникиПодписания.Описание КАК Описание,
		|	УчастникиПодписания.СрокИсполнения КАК Срок,
		|	УчастникиПодписания.СрокИсполненияДни КАК СрокДни,
		|	УчастникиПодписания.СрокИсполненияМинуты КАК СрокМинуты,
		|	УчастникиПодписания.СрокИсполненияЧасы КАК СрокЧасы,
		|	УчастникиПодписания.Подписывающий КАК Участник,
		|	ВЫБОР
		|		КОГДА УчастникиПодписания.ТочкаМаршрута = &ПодписаниеПодписать
		|		ИЛИ УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбеспечитьПодписание
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковПодписания.Подписывающий)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат)
		|	КОНЕЦ КАК ФункцияУчастника,
		|	ВЫБОР
		|		КОГДА (УчастникиПодписания.ТочкаМаршрута = &ПодписаниеПодписать
		|		ИЛИ УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбеспечитьПодписание)
		|		И НЕ ЕСТЬNULL(УчастникиРезультатыПодписания.РезультатПодписания,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА (УчастникиПодписания.ТочкаМаршрута = &ПодписаниеПодписать
		|		ИЛИ УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбеспечитьПодписание)
		|		И НЕ ЕСТЬNULL(УчастникиРезультатыПодписания.ЗадачаПроцесса,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		КОГДА УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбработатьРезультат
		|		И НЕ ЕСТЬNULL(УчастникиРезультатыОбработок.ЗадачаПроцесса,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|		И ЕСТЬNULL(УчастникиРезультатыОбработок.ОтправленоНаПовторноеПодписание, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		КОГДА УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбработатьРезультат
		|		И ЕСТЬNULL(УчастникиПредыдущиеРезультатыОбработок.ОтправленоНаПовторноеПодписание, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбработатьРезультат
		|		И ЕСТЬNULL(УчастникиРезультатыОбработок.ОтправленоНаПовторноеПодписание, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 0
		|		И ДанныеПроцессов.РезультатПодписания = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.НеПодписано)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ВЫБОР
		|		КОГДА (УчастникиПодписания.ТочкаМаршрута = &ПодписаниеПодписать
		|		ИЛИ УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбеспечитьПодписание)
		|		И ЕСТЬNULL(УчастникиРезультатыПодписания.РезультатПодписания,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.Подписано)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыПодписания.Подписано)
		|		КОГДА (УчастникиПодписания.ТочкаМаршрута = &ПодписаниеПодписать
		|		ИЛИ УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбеспечитьПодписание)
		|		И ЕСТЬNULL(УчастникиРезультатыПодписания.РезультатПодписания,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.НеПодписано)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыПодписания.НеПодписано)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА (УчастникиПодписания.ТочкаМаршрута = &ПодписаниеПодписать
		|		ИЛИ УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбеспечитьПодписание)
		|		И НЕ ЕСТЬNULL(УчастникиРезультатыПодписания.РезультатПодписания,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)
		|			ТОГДА ЗадачиУчастниковПодписания.ДатаИсполнения
		|		КОГДА (УчастникиПодписания.ТочкаМаршрута = &ПодписаниеПодписать
		|		ИЛИ УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбеспечитьПодписание)
		|		И НЕ ЕСТЬNULL(УчастникиРезультатыПодписания.ЗадачаПроцесса,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗадачиУчастниковПодписания.Дата
		|		КОГДА УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбработатьРезультат
		|		И НЕ ЕСТЬNULL(УчастникиРезультатыОбработок.ЗадачаПроцесса,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|		И ЕСТЬNULL(УчастникиРезультатыОбработок.ОтправленоНаПовторноеПодписание, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗадачиУчастниковПодписания.Дата
		|		КОГДА УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбработатьРезультат
		|		И ЕСТЬNULL(УчастникиПредыдущиеРезультатыОбработок.ОтправленоНаПовторноеПодписание, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗадачиУчастниковПодписания.ДатаИсполнения
		|		КОГДА УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбработатьРезультат
		|		И ЕСТЬNULL(УчастникиРезультатыОбработок.ОтправленоНаПовторноеПодписание, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 0
		|		И ДанныеПроцессов.РезультатПодписания = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.НеПодписано)
		|			ТОГДА ЗадачиУчастниковПодписания.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ВЫБОР
		|		КОГДА (УчастникиПодписания.ТочкаМаршрута = &ПодписаниеПодписать
		|		ИЛИ УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбеспечитьПодписание)
		|		И ЕСТЬNULL(УчастникиРезультатыПодписания.РезультатПодписания,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.Подписано)
		|			ТОГДА ЗадачиУчастниковПодписания.ДатаИсполнения
		|		КОГДА (УчастникиПодписания.ТочкаМаршрута = &ПодписаниеПодписать
		|		ИЛИ УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбеспечитьПодписание)
		|		И ЕСТЬNULL(УчастникиРезультатыПодписания.РезультатПодписания,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.НеПодписано)
		|			ТОГДА ЗадачиУчастниковПодписания.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаРезультата,
		|	ЕСТЬNULL(ЗадачиУчастниковПодписания.Исполнитель, УчастникиПодписания.Подписывающий) КАК ФактическийИсполнитель,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	ДанныеПроцессов.Приоритет КАК Приоритет,
		|	ЕСТЬNULL(ЗадачиУчастниковПодписания.РезультатВыполнения,"""") КАК Комментарий
		|ПОМЕСТИТЬ УчастникиДействияПодписание
		|ИЗ
		|	БизнесПроцесс.Подписание.Участники КАК УчастникиПодписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовПодписание КАК ДанныеПроцессов
		|		ПО УчастникиПодписания.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Подписание.РезультатыПодписания КАК УчастникиРезультатыПодписания
		|		ПО УчастникиПодписания.Ссылка = УчастникиРезультатыПодписания.Ссылка
		|		И УчастникиПодписания.Идентификатор = УчастникиРезультатыПодписания.Идентификатор
		|		И (ДанныеПроцессов.НомерИтерации = УчастникиРезультатыПодписания.НомерИтерации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиУчастниковПодписания
		|		ПО (УчастникиРезультатыПодписания.ЗадачаПроцесса = ЗадачиУчастниковПодписания.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Подписание.РезультатыОбработок КАК УчастникиПредыдущиеРезультатыОбработок
		|		ПО УчастникиПодписания.Ссылка = УчастникиПредыдущиеРезультатыОбработок.Ссылка
		|		И (ДанныеПроцессов.НомерИтерации - 1 = УчастникиПредыдущиеРезультатыОбработок.НомерИтерации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Подписание.РезультатыОбработок КАК УчастникиРезультатыОбработок
		|		ПО УчастникиПодписания.Ссылка = УчастникиРезультатыОбработок.Ссылка
		|		И (ДанныеПроцессов.НомерИтерации = УчастникиРезультатыОбработок.НомерИтерации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ АктуальныеПроцессыПодписание КАК АктуальныйПроцесс
		|		ПО (ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие)
		|		И (ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс)
		|ГДЕ
		|	(НЕ УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбработатьРезультат
		|	ИЛИ НЕ АктуальныйПроцесс.БизнесПроцесс ЕСТЬ NULL)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие,
		|	УчастникиПодписания.НомерСтроки,
		|	НЕОПРЕДЕЛЕНО,
		|	УчастникиПодписания.ВариантУстановкиСрокаИсполнения,
		|	УчастникиПодписания.Идентификатор,
		|	НЕОПРЕДЕЛЕНО,
		|	УчастникиПодписания.Этап,
		|	УчастникиПодписания.Описание,
		|	УчастникиПодписания.СрокИсполнения,
		|	УчастникиПодписания.СрокИсполненияДни,
		|	УчастникиПодписания.СрокИсполненияМинуты,
		|	УчастникиПодписания.СрокИсполненияЧасы,
		|	УчастникиПодписания.Участник,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковПодписания.ОбеспечивающийПодписание),
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(УчастникиРезультатыПодписания.РезультатПодписания,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА НЕ ЕСТЬNULL(УчастникиРезультатыПодписания.ЗадачаПроцесса,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(УчастникиРезультатыПодписания.РезультатПодписания,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыПодписания.Выполнено)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(УчастникиРезультатыПодписания.РезультатПодписания,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)
		|			ТОГДА ЗадачиУчастниковПодписания.ДатаИсполнения
		|		КОГДА НЕ ЕСТЬNULL(УчастникиРезультатыПодписания.ЗадачаПроцесса,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗадачиУчастниковПодписания.Дата
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(УчастникиРезультатыПодписания.РезультатПодписания,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)
		|			ТОГДА ЗадачиУчастниковПодписания.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЗадачиУчастниковПодписания.Исполнитель, УчастникиПодписания.Подписывающий),
		|	ДанныеПроцессов.БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется,
		|	ДанныеПроцессов.Дата,
		|	ДанныеПроцессов.Приоритет,
		|	ЕСТЬNULL(ЗадачиУчастниковПодписания.РезультатВыполнения,"""")
		|ИЗ
		|	БизнесПроцесс.Подписание.Участники КАК УчастникиПодписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовПодписание КАК ДанныеПроцессов
		|		ПО УчастникиПодписания.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Подписание.РезультатыПодписания КАК УчастникиРезультатыПодписания
		|		ПО УчастникиПодписания.Ссылка = УчастникиРезультатыПодписания.Ссылка
		|		И УчастникиПодписания.Идентификатор = УчастникиРезультатыПодписания.Идентификатор
		|		И (ДанныеПроцессов.НомерИтерации = УчастникиРезультатыПодписания.НомерИтерации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиУчастниковПодписания
		|		ПО (УчастникиРезультатыПодписания.ЗадачаПроцесса = ЗадачиУчастниковПодписания.Ссылка)
		|ГДЕ
		|	УчастникиПодписания.ТочкаМаршрута = &ПодписаниеОбеспечитьПодписание");
	
	ТекстыЗапроса.Вставить(
		"РезультатУчастники",
		"ВЫБРАТЬ
		|	УчастникиДействия.Действие КАК Действие,
		|	УчастникиДействия.Порядок КАК Порядок,
		|	УчастникиДействия.ПорядокВыполнения КАК ПорядокВыполнения,
		|	УчастникиДействия.ВариантУстановкиСрока КАК ВариантУстановкиСрока,
		|	УчастникиДействия.ВышестоящийУчастник КАК ВышестоящийУчастник,
		|	УчастникиДействия.Идентификатор КАК Идентификатор,
		|	УчастникиДействия.ИдентификаторЭтапа КАК ИдентификаторЭтапа,
		|	УчастникиДействия.Описание КАК Описание,
		|	НЕОПРЕДЕЛЕНО КАК Ответственный,
		|	УчастникиДействия.Срок КАК Срок,
		|	УчастникиДействия.СрокДни КАК СрокДни,
		|	УчастникиДействия.СрокМинуты КАК СрокМинуты,
		|	УчастникиДействия.СрокЧасы КАК СрокЧасы,
		|	УчастникиДействия.Участник КАК Участник,
		|	УчастникиДействия.ФункцияУчастника КАК ФункцияУчастника,
		|	ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ДО21) КАК ИсточникДанных,
		|	УчастникиДействия.Состояние КАК Состояние,
		|	УчастникиДействия.Результат КАК Результат,
		|	УчастникиДействия.ДатаСостояния КАК ДатаСостояния,
		|	УчастникиДействия.ДатаРезультата КАК ДатаРезультата,
		|	УчастникиДействия.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	УчастникиДействия.БизнесПроцесс КАК БизнесПроцесс,
		|	УчастникиДействия.Выполняется КАК Выполняется,
		|	УчастникиДействия.Дата КАК Дата,
		|	УчастникиДействия.Комментарий КАК Комментарий
		|ИЗ
		|	УчастникиДействияПодписание КАК УчастникиДействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			УчастникиДействия.Действие КАК Действие,
		|			УчастникиДействия.Участник КАК Участник,
		|			УчастникиДействия.ФункцияУчастника КАК ФункцияУчастника,
		|			МАКСИМУМ(УчастникиДействия.Приоритет) КАК Приоритет
		|		ИЗ
		|			УчастникиДействияПодписание КАК УчастникиДействия
		|		
		|		СГРУППИРОВАТЬ ПО
		|			УчастникиДействия.Действие,
		|			УчастникиДействия.Участник,
		|			УчастникиДействия.ФункцияУчастника) КАК ДанныеГруппировки
		|		ПО УчастникиДействия.Действие = ДанныеГруппировки.Действие
		|			И УчастникиДействия.Участник = ДанныеГруппировки.Участник
		|			И УчастникиДействия.ФункцияУчастника = ДанныеГруппировки.ФункцияУчастника
		|			И УчастникиДействия.Приоритет = ДанныеГруппировки.Приоритет");
		
	ТекстыЗапроса.Вставить(
		"РезультатРеквизиты",
		"ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Автор КАК Автор,
		|	ДанныеПроцессов.Важность КАК Важность,
		|	НЕОПРЕДЕЛЕНО КАК ВариантИсполнения,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоИтераций,
		|	НЕОПРЕДЕЛЕНО КАК Контролер,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.СпособПодписания = ЗНАЧЕНИЕ(Перечисление.СпособыПодписанияПредметаПроцесса.УЭП)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПодписанияПредметаДействия.УЭП)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПодписанияПредметаДействия.ПЭП)
		|	КОНЕЦ КАК СпособПодписания,
		|	ДанныеПроцессов.НомерИтерации КАК НомерИтерации,
		|	НЕОПРЕДЕЛЕНО КАК ПодписыватьУЭП,
		|	НЕОПРЕДЕЛЕНО КАК ФормируетВизы,
		|	ДанныеПроцессов.Завершен КАК Завершен,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|				И НЕ ДанныеПроцессов.РезультатПодписания = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ДанныеПроцессов.РезультатПодписания = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.Подписано)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыПодписания.Подписано)
		|					КОГДА ДанныеПроцессов.РезультатПодписания = ЗНАЧЕНИЕ(Перечисление.РезультатыПроцессаПодписания.НеПодписано)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыПодписания.НеПодписано)
		|					ИНАЧЕ НЕОПРЕДЕЛЕНО
		|				КОНЕЦ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ДанныеПроцессов.ДатаНачала
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаРезультата
		|ИЗ
		|	ДанныеПроцессовПодписание КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыПодписание КАК АктуальныйПроцесс
		|		ПО ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс
		|			И ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие");

	Возврат ТекстыЗапроса;

КонецФункции

Функция ТекстыЗапросовДействиеРегистрация()

	ТекстыЗапроса = Новый Структура;
	ТекстыЗапроса.Вставить(
		"ВыборкаДанных",
		"ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	ПроцессыДействий.Действие КАК Действие,
		|	Процессы.Ссылка КАК БизнесПроцесс,
		|	Процессы.Автор КАК Автор,
		|	Процессы.Важность КАК Важность,
		|	Процессы.Дата КАК Дата,
		|	Процессы.ДатаНачала КАК ДатаНачала,
		|	Процессы.ДатаЗавершения КАК ДатаЗавершения,
		|	Процессы.Завершен КАК Завершен,
		|	ВЫБОР
		|		КОГДА Процессы.Стартован
		|				И НЕ Процессы.Завершен
		|				И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Выполняется,
		|	Процессы.РезультатРегистрации КАК РезультатРегистрации
		|ПОМЕСТИТЬ ИсходныеДанныеРегистрация
		|ИЗ
		|	БизнесПроцесс.Регистрация КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроцессыДействий КАК ПроцессыДействий
		|		ПО Процессы.Ссылка = ПроцессыДействий.Процесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.НомерЗаписи КАК НомерЗаписи,
		|	ИсходныеДанные.Действие КАК Действие,
		|	ИсходныеДанные.БизнесПроцесс КАК БизнесПроцесс,
		|	ИсходныеДанные.Автор КАК Автор,
		|	ИсходныеДанные.Важность КАК Важность,
		|	ИсходныеДанные.Дата КАК Дата,
		|	ИсходныеДанные.ДатаНачала КАК ДатаНачала,
		|	ИсходныеДанные.ДатаЗавершения КАК ДатаЗавершения,
		|	ИсходныеДанные.Завершен КАК Завершен,
		|	ИсходныеДанные.Выполняется КАК Выполняется,
		|	ИсходныеДанные.РезультатРегистрации КАК РезультатРегистрации,
		|	ДОБАВИТЬКДАТЕ(ИсходныеДанные.Дата, МИНУТА, 10000000 * ИсходныеДанные.Выполняется + 10000 *
		|		ИсходныеДанные.НомерЗаписи) КАК Приоритет
		|ПОМЕСТИТЬ ДанныеПроцессовРегистрация
		|ИЗ
		|	ИсходныеДанныеРегистрация КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс
		|ПОМЕСТИТЬ АктуальныеПроцессыРегистрация
		|ИЗ
		|	ДанныеПроцессовРегистрация КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДанныеПроцессов.Действие КАК Действие,
		|			МАКСИМУМ(ДанныеПроцессов.Приоритет) КАК Приоритет
		|		ИЗ
		|			ДанныеПроцессовРегистрация КАК ДанныеПроцессов
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДанныеПроцессов.Действие) КАК ДанныеГруппировки
		|		ПО ДанныеПроцессов.Действие = ДанныеГруппировки.Действие
		|			И ДанныеПроцессов.Приоритет = ДанныеГруппировки.Приоритет");
	
	ТекстыЗапроса.Вставить(
		"РезультатУчастники",
		"ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	1 КАК Порядок,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокВыполнения,
		|	БизнесПроцессРегистрация.ВариантУстановкиСрокаИсполнения КАК ВариантУстановкиСрока,
		|	НЕОПРЕДЕЛЕНО КАК ВышестоящийУчастник,
		|	БизнесПроцессРегистрация.ИдентификаторИсполнителя КАК Идентификатор,
		|	НЕОПРЕДЕЛЕНО КАК ИдентификаторЭтапа,
		|	БизнесПроцессРегистрация.Описание КАК Описание,
		|	НЕОПРЕДЕЛЕНО КАК Ответственный,
		|	БизнесПроцессРегистрация.СрокИсполнения КАК Срок,
		|	БизнесПроцессРегистрация.СрокИсполненияДни КАК СрокДни,
		|	БизнесПроцессРегистрация.СрокИсполненияМинуты КАК СрокМинуты,
		|	БизнесПроцессРегистрация.СрокИсполненияЧасы КАК СрокЧасы,
		|	БизнесПроцессРегистрация.Исполнитель КАК Участник,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковРегистрации.Регистратор) КАК ФункцияУчастника,
		|	ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ДО21) КАК ИсточникДанных,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(РезультатыРегистрацииУчастников.РезультатРегистрации,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыРегистрации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыРегистрации.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА НЕ ЕСТЬNULL(РезультатыРегистрацииУчастников.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ЕСТЬNULL(РезультатыРегистрацииУчастников.РезультатРегистрации, НЕОПРЕДЕЛЕНО) КАК Результат,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(РезультатыРегистрацииУчастников.РезультатРегистрации,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыРегистрации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыРегистрации.ПустаяСсылка)
		|			ТОГДА ЗадачиИсполнителейРегистрации.ДатаИсполнения
		|		КОГДА НЕ ЕСТЬNULL(РезультатыРегистрацииУчастников.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗадачиИсполнителейРегистрации.Дата
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(ЗадачиИсполнителейРегистрации.ДатаИсполнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЗадачиИсполнителейРегистрации.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаРезультата,
		|	ЕСТЬNULL(ЗадачиИсполнителейРегистрации.Исполнитель, БизнесПроцессРегистрация.Исполнитель) КАК ФактическийИсполнитель,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	ЕСТЬNULL(ЗадачиИсполнителейРегистрации.РезультатВыполнения,"""") КАК Комментарий
		|ИЗ
		|	БизнесПроцесс.Регистрация КАК БизнесПроцессРегистрация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовРегистрация КАК ДанныеПроцессов
		|		ПО БизнесПроцессРегистрация.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыРегистрация КАК АктуальныйПроцесс
		|		ПО (ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие)
		|		И (ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс)
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Регистрация.РезультатыРегистрации КАК РезультатыРегистрацииУчастников
		|		ПО БизнесПроцессРегистрация.Ссылка = РезультатыРегистрацииУчастников.Ссылка
		|		И БизнесПроцессРегистрация.НомерИтерации = РезультатыРегистрацииУчастников.НомерИтерации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиИсполнителейРегистрации
		|		ПО (РезультатыРегистрацииУчастников.ЗадачаИсполнителя = ЗадачиИсполнителейРегистрации.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие,
		|	99999,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессРегистрация.ВариантУстановкиСрокаОбработкиРезультатов,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессРегистрация.ИдентификаторОбрабатывающегоРезультат,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессРегистрация.СрокОбработкиРезультатов,
		|	БизнесПроцессРегистрация.СрокОбработкиРезультатовДни,
		|	БизнесПроцессРегистрация.СрокОбработкиРезультатовМинуты,
		|	БизнесПроцессРегистрация.СрокОбработкиРезультатовЧасы,
		|	ВЫБОР
		|		КОГДА БизнесПроцессРегистрация.ОбрабатывающийРезультат = НЕОПРЕДЕЛЕНО
		|			ТОГДА БизнесПроцессРегистрация.Автор
		|		ИНАЧЕ БизнесПроцессРегистрация.ОбрабатывающийРезультат
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат),
		|	ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ДО21),
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(РезультатыОзнакомленийУчастников.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|		И ЕСТЬNULL(РезультатыОзнакомленийУчастников.ОтправленоНаПовторнуюРегистрацию, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		КОГДА ЕСТЬNULL(ПредыдущиеРезультатыОзнакомленийУчастников.ОтправленоНаПовторнуюРегистрацию, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА ЕСТЬNULL(РезультатыОзнакомленийУчастников.ОтправленоНаПовторнуюРегистрацию, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 0
		|		И ДанныеПроцессов.РезультатРегистрации = ЗНАЧЕНИЕ(Перечисление.РезультатыРегистрации.НеЗарегистрировано)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(РезультатыОзнакомленийУчастников.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|		И ЕСТЬNULL(РезультатыОзнакомленийУчастников.ОтправленоНаПовторнуюРегистрацию, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 1
		|			ТОГДА РезультатыОзнакомленийУчастников.ЗадачаИсполнителя.Дата
		|		КОГДА ЕСТЬNULL(ПредыдущиеРезультатыОзнакомленийУчастников.ОтправленоНаПовторнуюРегистрацию, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ПредыдущиеРезультатыОзнакомленийУчастников.ЗадачаИсполнителя.ДатаИсполнения
		|		КОГДА ЕСТЬNULL(РезультатыОзнакомленийУчастников.ОтправленоНаПовторнуюРегистрацию, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 0
		|		И ДанныеПроцессов.РезультатРегистрации = ЗНАЧЕНИЕ(Перечисление.РезультатыРегистрации.НеЗарегистрировано)
		|			ТОГДА РезультатыОзнакомленийУчастников.ЗадачаИсполнителя.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА БизнесПроцессРегистрация.ОбрабатывающийРезультат = НЕОПРЕДЕЛЕНО
		|			ТОГДА БизнесПроцессРегистрация.Автор
		|		ИНАЧЕ БизнесПроцессРегистрация.ОбрабатывающийРезультат
		|	КОНЕЦ,
		|	ДанныеПроцессов.БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется,
		|	ДанныеПроцессов.Дата,
		|	""""
		|ИЗ
		|	БизнесПроцесс.Регистрация КАК БизнесПроцессРегистрация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовРегистрация КАК ДанныеПроцессов
		|		ПО БизнесПроцессРегистрация.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыРегистрация КАК АктуальныйПроцесс
		|		ПО (ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие)
		|		И (ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс)
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Регистрация.РезультатыОзнакомлений КАК РезультатыОзнакомленийУчастников
		|		ПО БизнесПроцессРегистрация.Ссылка = РезультатыОзнакомленийУчастников.Ссылка
		|		И БизнесПроцессРегистрация.НомерИтерации = РезультатыОзнакомленийУчастников.НомерИтерации
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Регистрация.РезультатыОзнакомлений КАК ПредыдущиеРезультатыОзнакомленийУчастников
		|		ПО БизнесПроцессРегистрация.Ссылка = ПредыдущиеРезультатыОзнакомленийУчастников.Ссылка
		|		И (БизнесПроцессРегистрация.НомерИтерации - 1 = ПредыдущиеРезультатыОзнакомленийУчастников.НомерИтерации)");
		
	ТекстыЗапроса.Вставить(
		"РезультатРеквизиты",
		"ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Автор КАК Автор,
		|	ДанныеПроцессов.Важность КАК Важность,
		|	НЕОПРЕДЕЛЕНО КАК ВариантИсполнения,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоИтераций,
		|	НЕОПРЕДЕЛЕНО КАК Контролер,
		|	НЕОПРЕДЕЛЕНО КАК СпособПодписания,
		|	НЕОПРЕДЕЛЕНО КАК НомерИтерации,
		|	НЕОПРЕДЕЛЕНО КАК ПодписыватьУЭП,
		|	НЕОПРЕДЕЛЕНО КАК ФормируетВизы,
		|	ДанныеПроцессов.Завершен КАК Завершен,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.РезультатРегистрации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ДанныеПроцессов.ДатаНачала
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаРезультата
		|ИЗ
		|	ДанныеПроцессовРегистрация КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыРегистрация КАК АктуальныйПроцесс
		|		ПО ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие
		|			И ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс");

	Возврат ТекстыЗапроса;

КонецФункции

Функция ТекстыЗапросовДействиеСогласование()

	ТекстыЗапроса = Новый Структура;
	ТекстыЗапроса.Вставить(
		"ВыборкаДанных",
		"ВЫБРАТЬ
		|	ПроцессыДействий.Действие КАК Действие,
		|	ПроцессыДействий.Процесс КАК БизнесПроцесс,
		|	МАКСИМУМ(ПредметыПроцессов.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)) КАК ФормируетВизы
		|ПОМЕСТИТЬ ПроцессФормируетВизы
		|ИЗ
		|	БизнесПроцесс.Согласование.Предметы КАК ПредметыПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроцессыДействий КАК ПроцессыДействий
		|		ПО ПредметыПроцессов.Ссылка = ПроцессыДействий.Процесс
		|СГРУППИРОВАТЬ ПО
		|	ПроцессыДействий.Действие,
		|	ПроцессыДействий.Процесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	ПроцессФормируетВизы.Действие КАК Действие,
		|	Процессы.Ссылка КАК БизнесПроцесс,
		|	Процессы.Автор КАК Автор,
		|	Процессы.Важность КАК Важность,
		|	Процессы.Дата КАК Дата,
		|	Процессы.ДатаНачала КАК ДатаНачала,
		|	Процессы.ДатаЗавершения КАК ДатаЗавершения,
		|	Процессы.ПодписыватьЭП КАК ПодписыватьУЭП,
		|	Процессы.НомерИтерации КАК НомерИтерации,
		|	Процессы.РезультатСогласования КАК РезультатСогласования,
		|	ПроцессФормируетВизы.ФормируетВизы КАК ФормируетВизы,
		|	Процессы.Завершен КАК Завершен,
		|	ВЫБОР
		|		КОГДА Процессы.Стартован
		|		И НЕ Процессы.Завершен
		|		И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Выполняется
		|ПОМЕСТИТЬ ИсходныеДанныеСогласование
		|ИЗ
		|	БизнесПроцесс.Согласование КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроцессФормируетВизы КАК ПроцессФормируетВизы
		|		ПО Процессы.Ссылка = ПроцессФормируетВизы.БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.НомерЗаписи КАК НомерЗаписи,
		|	ИсходныеДанные.Действие КАК Действие,
		|	ИсходныеДанные.БизнесПроцесс КАК БизнесПроцесс,
		|	ИсходныеДанные.Автор КАК Автор,
		|	ИсходныеДанные.Важность КАК Важность,
		|	ИсходныеДанные.Дата КАК Дата,
		|	ИсходныеДанные.ДатаНачала КАК ДатаНачала,
		|	ИсходныеДанные.ДатаЗавершения КАК ДатаЗавершения,
		|	ИсходныеДанные.ПодписыватьУЭП КАК ПодписыватьУЭП,
		|	ИсходныеДанные.НомерИтерации КАК НомерИтерации,
		|	ИсходныеДанные.РезультатСогласования КАК РезультатСогласования,
		|	ИсходныеДанные.ФормируетВизы КАК ФормируетВизы,
		|	ИсходныеДанные.Завершен КАК Завершен,
		|	ИсходныеДанные.Выполняется КАК Выполняется,
		|	ДОБАВИТЬКДАТЕ(ИсходныеДанные.Дата, МИНУТА, 10000000 * ИсходныеДанные.Выполняется + 10000 *
		|		ИсходныеДанные.НомерЗаписи) КАК Приоритет
		|ПОМЕСТИТЬ ДанныеПроцессовСогласование
		|ИЗ
		|	ИсходныеДанныеСогласование КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс
		|ПОМЕСТИТЬ АктуальныеПроцессыСогласование
		|ИЗ
		|	ДанныеПроцессовСогласование КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДанныеПроцессов.Действие КАК Действие,
		|			МАКСИМУМ(ДанныеПроцессов.Приоритет) КАК Приоритет
		|		ИЗ
		|			ДанныеПроцессовСогласование КАК ДанныеПроцессов
		|		СГРУППИРОВАТЬ ПО
		|			ДанныеПроцессов.Действие) КАК ДанныеГруппировки
		|		ПО ДанныеПроцессов.Действие = ДанныеГруппировки.Действие
		|		И ДанныеПроцессов.Приоритет = ДанныеГруппировки.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ИсполнителиСогласования.НомерСтроки КАК Порядок,
		|	ИсполнителиСогласования.ПорядокСогласования КАК ПорядокВыполнения,
		|	ИсполнителиСогласования.ВариантУстановкиСрокаИсполнения КАК ВариантУстановкиСрока,
		|	ИсполнителиСогласования.ИдентификаторИсполнителя КАК Идентификатор,
		|	ИсполнителиСогласования.Описание КАК Описание,
		|	ИсполнителиСогласования.СрокИсполнения КАК Срок,
		|	ИсполнителиСогласования.СрокИсполненияДни КАК СрокДни,
		|	ИсполнителиСогласования.СрокИсполненияМинуты КАК СрокМинуты,
		|	ИсполнителиСогласования.СрокИсполненияЧасы КАК СрокЧасы,
		|	ИсполнителиСогласования.Исполнитель КАК Участник,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковСогласования.Согласующий) КАК ФункцияУчастника,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(ИсполнителиРезультатыСогласования.РезультатСогласования,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА НЕ ЕСТЬNULL(ИсполнителиРезультатыСогласования.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ЕСТЬNULL(ИсполнителиРезультатыСогласования.РезультатСогласования, НЕОПРЕДЕЛЕНО) КАК Результат,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(ИсполнителиРезультатыСогласования.РезультатСогласования,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.ПустаяСсылка)
		|			ТОГДА ЗадачиИсполнителейСогласования.ДатаИсполнения
		|		КОГДА НЕ ЕСТЬNULL(ИсполнителиРезультатыСогласования.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗадачиИсполнителейСогласования.Дата
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ЕСТЬNULL(ЗадачиИсполнителейСогласования.ДатаИсполнения, НЕОПРЕДЕЛЕНО) КАК ДатаРезультата,
		|	ЕСТЬNULL(ЗадачиИсполнителейСогласования.Исполнитель, ИсполнителиСогласования.Исполнитель) КАК ФактическийИсполнитель,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	ДанныеПроцессов.Приоритет КАК Приоритет,
		|	ЕСТЬNULL(ЗадачиИсполнителейСогласования.РезультатВыполнения,"""") КАК Комментарий
		|ПОМЕСТИТЬ УчастникиДействияСогласования
		|ИЗ
		|	БизнесПроцесс.Согласование.Исполнители КАК ИсполнителиСогласования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовСогласование КАК ДанныеПроцессов
		|		ПО ИсполнителиСогласования.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование.РезультатыСогласования КАК ИсполнителиРезультатыСогласования
		|		ПО ИсполнителиСогласования.Ссылка = ИсполнителиРезультатыСогласования.Ссылка
		|		И ИсполнителиСогласования.ЗадачаИсполнителя = ИсполнителиРезультатыСогласования.ЗадачаИсполнителя
		|		И (ДанныеПроцессов.НомерИтерации = ИсполнителиРезультатыСогласования.НомерИтерации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиИсполнителейСогласования
		|		ПО ИсполнителиСогласования.ЗадачаИсполнителя = ЗадачиИсполнителейСогласования.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие,
		|	99999,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессСогласование.ВариантУстановкиСрокаОбработкиРезультатов,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессСогласование.Описание,
		|	БизнесПроцессСогласование.СрокОбработкиРезультатов,
		|	БизнесПроцессСогласование.СрокОбработкиРезультатовДни,
		|	БизнесПроцессСогласование.СрокОбработкиРезультатовМинуты,
		|	БизнесПроцессСогласование.СрокОбработкиРезультатовЧасы,
		|	БизнесПроцессСогласование.Автор,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат),
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(ИсполнителиРезультатыОзнакомлений.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|		И ЕСТЬNULL(ИсполнителиРезультатыОзнакомлений.ОтправленоНаПовторноеСогласование, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		КОГДА ЕСТЬNULL(ИсполнителиПредыдущиеРезультатыОзнакомлений.ОтправленоНаПовторноеСогласование, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА ЕСТЬNULL(ИсполнителиРезультатыОзнакомлений.ОтправленоНаПовторноеСогласование, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 0
		|		И ДанныеПроцессов.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.НеСогласовано)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(ИсполнителиРезультатыОзнакомлений.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|		И ЕСТЬNULL(ИсполнителиРезультатыОзнакомлений.ОтправленоНаПовторноеСогласование, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ИсполнителиРезультатыОзнакомлений.ЗадачаИсполнителя.Дата
		|		КОГДА ЕСТЬNULL(ИсполнителиПредыдущиеРезультатыОзнакомлений.ОтправленоНаПовторноеСогласование, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ИсполнителиПредыдущиеРезультатыОзнакомлений.ЗадачаИсполнителя.ДатаИсполнения
		|		КОГДА ЕСТЬNULL(ИсполнителиРезультатыОзнакомлений.ОтправленоНаПовторноеСогласование, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 0
		|		И ДанныеПроцессов.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.НеСогласовано)
		|			ТОГДА ИсполнителиРезультатыОзнакомлений.ЗадачаИсполнителя.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	ЕСТЬNULL(ИсполнителиПредыдущиеРезультатыОзнакомлений.ЗадачаИсполнителя.Исполнитель,
		|		ЕСТЬNULL(ИсполнителиРезультатыОзнакомлений.ЗадачаИсполнителя.Исполнитель, БизнесПроцессСогласование.Автор)),
		|	ДанныеПроцессов.БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется,
		|	ДанныеПроцессов.Дата,
		|	ДанныеПроцессов.Приоритет,
		|	""""
		|ИЗ
		|	БизнесПроцесс.Согласование КАК БизнесПроцессСогласование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовСогласование КАК ДанныеПроцессов
		|		ПО БизнесПроцессСогласование.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыСогласование КАК АктуальныйПроцесс
		|		ПО (ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие)
		|		И (ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс)
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование.РезультатыОзнакомлений КАК ИсполнителиРезультатыОзнакомлений
		|		ПО (ДанныеПроцессов.БизнесПроцесс = ИсполнителиРезультатыОзнакомлений.Ссылка)
		|		И (ДанныеПроцессов.НомерИтерации = ИсполнителиРезультатыОзнакомлений.НомерИтерации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование.РезультатыОзнакомлений КАК ИсполнителиПредыдущиеРезультатыОзнакомлений
		|		ПО (ДанныеПроцессов.БизнесПроцесс = ИсполнителиПредыдущиеРезультатыОзнакомлений.Ссылка)
		|		И (ДанныеПроцессов.НомерИтерации - 1 = ИсполнителиПредыдущиеРезультатыОзнакомлений.НомерИтерации)");
	
	ТекстыЗапроса.Вставить(
		"РезультатУчастники",
		"ВЫБРАТЬ
		|	УчастникиДействия.Действие КАК Действие,
		|	УчастникиДействия.Порядок КАК Порядок,
		|	УчастникиДействия.ПорядокВыполнения КАК ПорядокВыполнения,
		|	УчастникиДействия.ВариантУстановкиСрока КАК ВариантУстановкиСрока,
		|	НЕОПРЕДЕЛЕНО КАК ВышестоящийУчастник,
		|	УчастникиДействия.Идентификатор КАК Идентификатор,
		|	НЕОПРЕДЕЛЕНО КАК ИдентификаторЭтапа,
		|	УчастникиДействия.Описание КАК Описание,
		|	НЕОПРЕДЕЛЕНО КАК Ответственный,
		|	УчастникиДействия.Срок КАК Срок,
		|	УчастникиДействия.СрокДни КАК СрокДни,
		|	УчастникиДействия.СрокМинуты КАК СрокМинуты,
		|	УчастникиДействия.СрокЧасы КАК СрокЧасы,
		|	УчастникиДействия.Участник КАК Участник,
		|	УчастникиДействия.ФункцияУчастника КАК ФункцияУчастника,
		|	ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ДО21) КАК ИсточникДанных,
		|	УчастникиДействия.Состояние КАК Состояние,
		|	УчастникиДействия.Результат КАК Результат,
		|	УчастникиДействия.ДатаСостояния КАК ДатаСостояния,
		|	УчастникиДействия.ДатаРезультата КАК ДатаРезультата,
		|	УчастникиДействия.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	УчастникиДействия.БизнесПроцесс КАК БизнесПроцесс,
		|	УчастникиДействия.Выполняется КАК Выполняется,
		|	УчастникиДействия.Дата КАК Дата,
		|	УчастникиДействия.Комментарий КАК Комментарий
		|ИЗ
		|	УчастникиДействияСогласования КАК УчастникиДействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			УчастникиДействия.Действие КАК Действие,
		|			УчастникиДействия.Участник КАК Участник,
		|			УчастникиДействия.ФункцияУчастника КАК ФункцияУчастника,
		|			МАКСИМУМ(УчастникиДействия.Приоритет) КАК Приоритет
		|		ИЗ
		|			УчастникиДействияСогласования КАК УчастникиДействия
		|		
		|		СГРУППИРОВАТЬ ПО
		|			УчастникиДействия.Действие,
		|			УчастникиДействия.Участник,
		|			УчастникиДействия.ФункцияУчастника) КАК ДанныеГруппировки
		|		ПО УчастникиДействия.Действие = ДанныеГруппировки.Действие
		|			И УчастникиДействия.Участник = ДанныеГруппировки.Участник
		|			И УчастникиДействия.ФункцияУчастника = ДанныеГруппировки.ФункцияУчастника
		|			И УчастникиДействия.Приоритет = ДанныеГруппировки.Приоритет");
	
	ТекстыЗапроса.Вставить(
		"РезультатРеквизиты",
		"ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Автор КАК Автор,
		|	ДанныеПроцессов.Важность КАК Важность,
		|	НЕОПРЕДЕЛЕНО КАК ВариантИсполнения,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоИтераций,
		|	НЕОПРЕДЕЛЕНО КАК Контролер,
		|	НЕОПРЕДЕЛЕНО КАК СпособПодписания,
		|	ДанныеПроцессов.НомерИтерации КАК НомерИтерации,
		|	ДанныеПроцессов.ПодписыватьУЭП КАК ПодписыватьУЭП,
		|	ДанныеПроцессов.ФормируетВизы КАК ФормируетВизы,
		|	ДанныеПроцессов.Завершен КАК Завершен,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.РезультатСогласования
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ДанныеПроцессов.ДатаНачала
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаРезультата
		|ИЗ
		|	ДанныеПроцессовСогласование КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыСогласование КАК АктуальныйПроцесс
		|		ПО ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие
		|			И ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс");

	Возврат ТекстыЗапроса;
	
КонецФункции

Функция ТекстыЗапросовДействиеУтверждение()
	
	ТекстыЗапроса = Новый Структура;
	ТекстыЗапроса.Вставить(
		"ВыборкаДанных",
		"ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	ПроцессыДействий.Действие КАК Действие,
		|	Процессы.Ссылка КАК БизнесПроцесс,
		|	Процессы.Автор КАК Автор,
		|	Процессы.Важность КАК Важность,
		|	Процессы.Дата КАК Дата,
		|	Процессы.ДатаНачала КАК ДатаНачала,
		|	Процессы.ДатаЗавершения КАК ДатаЗавершения,
		|	Процессы.Завершен КАК Завершен,
		|	ВЫБОР
		|		КОГДА Процессы.Стартован
		|				И НЕ Процессы.Завершен
		|				И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Выполняется,
		|	Процессы.РезультатУтверждения КАК РезультатУтверждения
		|ПОМЕСТИТЬ ИсходныеДанныеУтверждение
		|ИЗ
		|	БизнесПроцесс.Утверждение КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроцессыДействий КАК ПроцессыДействий
		|		ПО Процессы.Ссылка = ПроцессыДействий.Процесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.НомерЗаписи КАК НомерЗаписи,
		|	ИсходныеДанные.Действие КАК Действие,
		|	ИсходныеДанные.БизнесПроцесс КАК БизнесПроцесс,
		|	ИсходныеДанные.Автор КАК Автор,
		|	ИсходныеДанные.Важность КАК Важность,
		|	ИсходныеДанные.Дата КАК Дата,
		|	ИсходныеДанные.ДатаНачала КАК ДатаНачала,
		|	ИсходныеДанные.ДатаЗавершения КАК ДатаЗавершения,
		|	ИсходныеДанные.Завершен КАК Завершен,
		|	ИсходныеДанные.Выполняется КАК Выполняется,
		|	ИсходныеДанные.РезультатУтверждения КАК РезультатУтверждения,
		|	ДОБАВИТЬКДАТЕ(ИсходныеДанные.Дата, МИНУТА, 10000000 * ИсходныеДанные.Выполняется + 10000 *
		|		ИсходныеДанные.НомерЗаписи) КАК Приоритет
		|ПОМЕСТИТЬ ДанныеПроцессовУтверждение
		|ИЗ
		|	ИсходныеДанныеУтверждение КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс
		|ПОМЕСТИТЬ АктуальныеПроцессыУтверждение
		|ИЗ
		|	ДанныеПроцессовУтверждение КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДанныеПроцессов.Действие КАК Действие,
		|			МАКСИМУМ(ДанныеПроцессов.Приоритет) КАК Приоритет
		|		ИЗ
		|			ДанныеПроцессовУтверждение КАК ДанныеПроцессов
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДанныеПроцессов.Действие) КАК ДанныеГруппировки
		|		ПО ДанныеПроцессов.Действие = ДанныеГруппировки.Действие
		|			И ДанныеПроцессов.Приоритет = ДанныеГруппировки.Приоритет");
	
	ТекстыЗапроса.Вставить(
		"РезультатУчастники",
		"ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	1 КАК Порядок,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокВыполнения,
		|	БизнесПроцессУтверждение.ВариантУстановкиСрокаИсполнения КАК ВариантУстановкиСрока,
		|	НЕОПРЕДЕЛЕНО КАК ВышестоящийУчастник,
		|	БизнесПроцессУтверждение.ИдентификаторИсполнителя КАК Идентификатор,
		|	НЕОПРЕДЕЛЕНО КАК ИдентификаторЭтапа,
		|	БизнесПроцессУтверждение.Описание КАК Описание,
		|	НЕОПРЕДЕЛЕНО КАК Ответственный,
		|	БизнесПроцессУтверждение.СрокИсполнения КАК Срок,
		|	БизнесПроцессУтверждение.СрокИсполненияДни КАК СрокДни,
		|	БизнесПроцессУтверждение.СрокИсполненияМинуты КАК СрокМинуты,
		|	БизнесПроцессУтверждение.СрокИсполненияЧасы КАК СрокЧасы,
		|	БизнесПроцессУтверждение.Исполнитель КАК Участник,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковУтверждения.Утверждающий) КАК ФункцияУчастника,
		|	ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ДО21) КАК ИсточникДанных,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(РезультатыУтвержденияУчастников.РезультатУтверждения,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыУтверждения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыУтверждения.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА НЕ ЕСТЬNULL(РезультатыУтвержденияУчастников.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ЕСТЬNULL(РезультатыУтвержденияУчастников.РезультатУтверждения, НЕОПРЕДЕЛЕНО) КАК Результат,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(РезультатыУтвержденияУчастников.РезультатУтверждения,
		|			ЗНАЧЕНИЕ(Перечисление.РезультатыУтверждения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РезультатыУтверждения.ПустаяСсылка)
		|			ТОГДА ЗадачиИсполнителейУтверждения.ДатаИсполнения
		|		КОГДА НЕ ЕСТЬNULL(РезультатыУтвержденияУчастников.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА ЗадачиИсполнителейУтверждения.Дата
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ЕСТЬNULL(ЗадачиИсполнителейУтверждения.ДатаИсполнения, НЕОПРЕДЕЛЕНО) КАК ДатаРезультата,
		|	ЕСТЬNULL(ЗадачиИсполнителейУтверждения.Исполнитель, БизнесПроцессУтверждение.Исполнитель) КАК ФактическийИсполнитель,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	ЕСТЬNULL(ЗадачиИсполнителейУтверждения.РезультатВыполнения,"""") КАК Комментарий
		|ИЗ
		|	БизнесПроцесс.Утверждение КАК БизнесПроцессУтверждение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовУтверждение КАК ДанныеПроцессов
		|		ПО БизнесПроцессУтверждение.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыУтверждение КАК АктуальныйПроцесс
		|		ПО (ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие)
		|		И (ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс)
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Утверждение.РезультатыУтверждения КАК РезультатыУтвержденияУчастников
		|		ПО БизнесПроцессУтверждение.Ссылка = РезультатыУтвержденияУчастников.Ссылка
		|		И БизнесПроцессУтверждение.НомерИтерации = РезультатыУтвержденияУчастников.НомерИтерации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиИсполнителейУтверждения
		|		ПО (РезультатыУтвержденияУчастников.ЗадачаИсполнителя = ЗадачиИсполнителейУтверждения.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПроцессов.Действие,
		|	99999,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессУтверждение.ВариантУстановкиСрокаОбработкиРезультатов,
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессУтверждение.ИдентификаторОбрабатывающегоРезультат,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	НЕОПРЕДЕЛЕНО,
		|	БизнесПроцессУтверждение.СрокОбработкиРезультатов,
		|	БизнесПроцессУтверждение.СрокОбработкиРезультатовДни,
		|	БизнесПроцессУтверждение.СрокОбработкиРезультатовМинуты,
		|	БизнесПроцессУтверждение.СрокОбработкиРезультатовЧасы,
		|	ВЫБОР
		|		КОГДА БизнесПроцессУтверждение.ОбрабатывающийРезультат = НЕОПРЕДЕЛЕНО
		|			ТОГДА БизнесПроцессУтверждение.Автор
		|		ИНАЧЕ БизнесПроцессУтверждение.ОбрабатывающийРезультат
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковУтверждения.ОбрабатывающийРезультат),
		|	ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ДО21),
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(РезультатыОзнакомленийУчастников.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|		И ЕСТЬNULL(РезультатыОзнакомленийУчастников.ОтправленоНаПовторноеУтверждение, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		КОГДА ЕСТЬNULL(ПредыдущиеРезультатыОзнакомленийУчастников.ОтправленоНаПовторноеУтверждение, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА ЕСТЬNULL(РезультатыОзнакомленийУчастников.ОтправленоНаПовторноеУтверждение, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 0
		|		И ДанныеПроцессов.РезультатУтверждения = ЗНАЧЕНИЕ(Перечисление.РезультатыУтверждения.НеУтверждено)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(РезультатыОзнакомленийУчастников.ЗадачаИсполнителя,
		|			ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|		И ЕСТЬNULL(РезультатыОзнакомленийУчастников.ОтправленоНаПовторноеУтверждение, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 1
		|			ТОГДА РезультатыОзнакомленийУчастников.ЗадачаИсполнителя.Дата
		|		КОГДА ЕСТЬNULL(ПредыдущиеРезультатыОзнакомленийУчастников.ОтправленоНаПовторноеУтверждение, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ПредыдущиеРезультатыОзнакомленийУчастников.ЗадачаИсполнителя.ДатаИсполнения
		|		КОГДА ЕСТЬNULL(РезультатыОзнакомленийУчастников.ОтправленоНаПовторноеУтверждение, ИСТИНА) = ЛОЖЬ
		|		И ДанныеПроцессов.Выполняется = 0
		|		И ДанныеПроцессов.РезультатУтверждения = ЗНАЧЕНИЕ(Перечисление.РезультатыУтверждения.НеУтверждено)
		|			ТОГДА РезультатыОзнакомленийУчастников.ЗадачаИсполнителя.ДатаИсполнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА БизнесПроцессУтверждение.ОбрабатывающийРезультат = НЕОПРЕДЕЛЕНО
		|			ТОГДА БизнесПроцессУтверждение.Автор
		|		ИНАЧЕ БизнесПроцессУтверждение.ОбрабатывающийРезультат
		|	КОНЕЦ,
		|	ДанныеПроцессов.БизнесПроцесс,
		|	ДанныеПроцессов.Выполняется,
		|	ДанныеПроцессов.Дата,
		|	""""
		|ИЗ
		|	БизнесПроцесс.Утверждение КАК БизнесПроцессУтверждение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроцессовУтверждение КАК ДанныеПроцессов
		|		ПО БизнесПроцессУтверждение.Ссылка = ДанныеПроцессов.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыУтверждение КАК АктуальныйПроцесс
		|		ПО (ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие)
		|		И (ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс)
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Утверждение.РезультатыОзнакомлений КАК РезультатыОзнакомленийУчастников
		|		ПО БизнесПроцессУтверждение.Ссылка = РезультатыОзнакомленийУчастников.Ссылка
		|		И БизнесПроцессУтверждение.НомерИтерации = РезультатыОзнакомленийУчастников.НомерИтерации
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Утверждение.РезультатыОзнакомлений КАК ПредыдущиеРезультатыОзнакомленийУчастников
		|		ПО БизнесПроцессУтверждение.Ссылка = ПредыдущиеРезультатыОзнакомленийУчастников.Ссылка
		|		И (БизнесПроцессУтверждение.НомерИтерации - 1 = ПредыдущиеРезультатыОзнакомленийУчастников.НомерИтерации)");
		
	ТекстыЗапроса.Вставить(
		"РезультатРеквизиты",
		"ВЫБРАТЬ
		|	ДанныеПроцессов.Действие КАК Действие,
		|	ДанныеПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеПроцессов.Автор КАК Автор,
		|	ДанныеПроцессов.Важность КАК Важность,
		|	НЕОПРЕДЕЛЕНО КАК ВариантИсполнения,
		|	ДанныеПроцессов.Дата КАК Дата,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоИтераций,
		|	НЕОПРЕДЕЛЕНО КАК Контролер,
		|	НЕОПРЕДЕЛЕНО КАК СпособПодписания,
		|	НЕОПРЕДЕЛЕНО КАК НомерИтерации,
		|	НЕОПРЕДЕЛЕНО КАК ПодписыватьУЭП,
		|	НЕОПРЕДЕЛЕНО КАК ФормируетВизы,
		|	ДанныеПроцессов.Завершен КАК Завершен,
		|	ДанныеПроцессов.Выполняется КАК Выполняется,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Состояние,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.РезультатУтверждения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		КОГДА ДанныеПроцессов.Выполняется = 1
		|			ТОГДА ДанныеПроцессов.ДатаНачала
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаСостояния,
		|	ВЫБОР
		|		КОГДА ДанныеПроцессов.Завершен
		|			ТОГДА ДанныеПроцессов.ДатаЗавершения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаРезультата
		|ИЗ
		|	ДанныеПроцессовУтверждение КАК ДанныеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеПроцессыУтверждение КАК АктуальныйПроцесс
		|		ПО ДанныеПроцессов.Действие = АктуальныйПроцесс.Действие
		|			И ДанныеПроцессов.БизнесПроцесс = АктуальныйПроцесс.БизнесПроцесс");
	
	Возврат ТекстыЗапроса;
	
КонецФункции

Процедура ОбновитьДействие(Действие, РеквизитыДействия, УчастникиДействия, ПараметрыЗагрузки)
	
	ДействиеИмеетЭтапы = ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования");
	ИдентификаторЭтапа = Неопределено;
	ПорядокВыполнения = Неопределено;
	
	ДействиеОбъект = Действие.ПолучитьОбъект();
	ДействиеОбъект.Участники.Очистить();
	Если ДействиеИмеетЭтапы Тогда
		ДействиеОбъект.Этапы.Очистить();
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ДействиеОбъект, РеквизитыДействия);
	
	Пока УчастникиДействия.Следующий() Цикл
		Если Не ЗначениеЗаполнено(УчастникиДействия.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДействиеОбъект.Участники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, УчастникиДействия);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Идентификатор) Тогда
			НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		Если ДействиеИмеетЭтапы И ЗначениеЗаполнено(УчастникиДействия.ПорядокВыполнения) Тогда 
			Если ПорядокВыполнения <> УчастникиДействия.ПорядокВыполнения Тогда
				НоваяСтрокаЭтапа = ДействиеОбъект.Этапы.Добавить();
				НоваяСтрокаЭтапа.Идентификатор = Новый УникальныйИдентификатор();
				НоваяСтрокаЭтапа.НаименованиеЭтапа = СтрШаблон(
					НСтр("ru = 'Этап %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ДействиеОбъект.Этапы.Количество());
				Если УчастникиДействия.ПорядокВыполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда
					НоваяСтрокаЭтапа.ПорядокВыполненияУчастниками =
						Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно;
				Иначе
					НоваяСтрокаЭтапа.ПорядокВыполненияУчастниками =
						Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно;
				КонецЕсли;
				
				ИдентификаторЭтапа = НоваяСтрокаЭтапа.Идентификатор;
				ПорядокВыполнения = УчастникиДействия.ПорядокВыполнения;
			КонецЕсли;
			
			НоваяСтрока.ИдентификаторЭтапа = ИдентификаторЭтапа;
		КонецЕсли;
		
		ПараметрыИзменения = ДействияСервер.СтруктураПараметровИзмененияДанныхДействия();
		ПараметрыИзменения.ИдентификаторУчастника = НоваяСтрока.Идентификатор;
		ПараметрыИзменения.Участник = УчастникиДействия.Участник;
		ПараметрыИзменения.ФактическийИсполнитель = УчастникиДействия.ФактическийИсполнитель;
		ПараметрыИзменения.Функция = УчастникиДействия.ФункцияУчастника;
		Если РеквизитыДействия.НомерИтерации <> Неопределено Тогда
			ПараметрыИзменения.НомерИтерации = РеквизитыДействия.НомерИтерации;
		КонецЕсли;
		
		ФактическийИсполнительПолный = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
			ПараметрыИзменения.Участник, 
			ПараметрыИзменения.ФактическийИсполнитель, 
			ПараметрыИзменения.ФактическийИсполнитель);
		
		РаботаСПроцессамиПоДействиям.ЗаписатьСведенияОбУчастникеДействия(
			Действие,
			ПараметрыИзменения.ИдентификаторУчастника,
			ПараметрыИзменения.ФактическийИсполнитель,
			ФактическийИсполнительПолный);

		Если ЗначениеЗаполнено(УчастникиДействия.Результат) Тогда
			ПараметрыИзменения.ДатаИсполнения = УчастникиДействия.ДатаРезультата;
			
			ПараметрыИзменения.Вставить("Комментарий", УчастникиДействия.Комментарий);
			
			РегистрыСведений.РезультатыДействий.УстановитьРезультат(
				Действие,
				УчастникиДействия.Результат, 
				ПараметрыИзменения);
		КонецЕсли;

		Если ЗначениеЗаполнено(УчастникиДействия.Состояние) Тогда
			ПараметрыИзменения.ДатаИсполнения = УчастникиДействия.ДатаСостояния;
			
			РегистрыСведений.СостоянияДействий.УстановитьСостояние(
				Действие, 
				УчастникиДействия.Состояние, 
				ПараметрыИзменения);
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(РеквизитыДействия.Результат) Тогда
		ПараметрыИзменения = ДействияСервер.СтруктураПараметровИзмененияДанныхДействия();
		ПараметрыИзменения.ДатаИсполнения = РеквизитыДействия.ДатаРезультата;
		
		РегистрыСведений.РезультатыДействий.УстановитьРезультат(
			Действие,
			РеквизитыДействия.Результат,
			ПараметрыИзменения);
	КонецЕсли;

	Если ЗначениеЗаполнено(РеквизитыДействия.Состояние) Тогда	
		ПараметрыИзменения = ДействияСервер.СтруктураПараметровИзмененияДанныхДействия();
		ПараметрыИзменения.ДатаИсполнения = РеквизитыДействия.ДатаСостояния;
		
		РегистрыСведений.СостоянияДействий.УстановитьСостояние(
			Действие,
			РеквизитыДействия.Состояние,
			ПараметрыИзменения);
	КонецЕсли;
	
	Если ДействиеИмеетЭтапы И ДействиеОбъект.Этапы.Количество() = 1 Тогда
		ДействиеОбъект.Этапы[0].НаименованиеЭтапа = 
			НСтр("ru = 'Согласовать'", ОбщегоНазначения.КодОсновногоЯзыка())
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		ДействиеОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	ДействиеОбъект.Записать();
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			Действие,
			ПараметрыЗагрузки.ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Действие)));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Пользователи

#Область ФизическиеЛица
	
// Возвращает ссылку на физическое лицо, по ссылке на пользователя.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица
//
Функция ФизЛицоПоПользователю(Пользователь)
		
	Возврат Справочники.ФизическиеЛица.ПолучитьСсылку(Пользователь.УникальныйИдентификатор());
	
КонецФункции

// Создает физ. лицо по пользователю.
// 
// Параметры:
//  Пользователь - СтрокаТаблицыЗначений - структура с реквизитами элемента спр. Пользователи.                   
//  Загрузка - Булево - режим загрузки при записи физ. лица.
//  ПричинаЗагрузки - Строка - пояснение почему используется режим загрузки. 
// 
Процедура СоздатьФизЛицоПоПользователю21(Пользователь, Загрузка, ПричинаЗагрузки)
	
	Если ЭтоУдалениеОбъекта(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаФизЛицо = ФизЛицоПоПользователю(Пользователь.Ссылка);
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаФизЛицо) Тогда
		Возврат;
	КонецЕсли;
		
	ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	
	СтруктураДанных = ФизЛицоОбъект.СтруктураДанныхДляЗаполнения();
	СтруктураДанных.ФИО = Пользователь.Наименование;
	СтруктураДанных.Фотография = Пользователь.Фотография;
	ФизЛицоОбъект.Заполнить(СтруктураДанных);
	
	ФизЛицоОбъект.УстановитьСсылкуНового(СсылкаНаФизЛицо);
	
	ФизЛицоОбъект.ОбменДанными.Загрузка = Загрузка;
	
	ФизЛицоОбъект.ПометкаУдаления = Пользователь.ПометкаУдаления; 
	
	ФизЛицоОбъект.Записать();
	
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			ФизЛицоОбъект.Ссылка,
			ПричинаЗагрузки,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ФизЛицоОбъект.Ссылка)));
	КонецЕсли;

КонецПроцедуры

// Обновляет физ. лицо созданное по пользователю.
// 
// Физ. лицо создается методом СоздатьФизЛицоПоПользователю21.
// 
// Параметры:
//  Пользователь - СтрокаТаблицыЗначений - структура с реквизитами элемента спр. Пользователи.                   
//  Загрузка - Булево - режим загрузки при записи физ. лица.
//  ПричинаЗагрузки - Строка - пояснение почему используется режим загрузки. 
// 
Процедура ОбновитьФизЛицоПоПользователю21(Пользователь, Загрузка, ПричинаЗагрузки)
	
	СсылкаНаФизЛицо = ФизЛицоПоПользователю(Пользователь.Ссылка);
	Если Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ФизЛицоОбъект = СсылкаНаФизЛицо.ПолучитьОбъект();
	
	Если ЭтоУдалениеОбъекта(Пользователь) Тогда
		
		Если ФизЛицоОбъект.ПометкаУдаления <> Истина Тогда
			ФизЛицоОбъект.ПометкаУдаления = Истина;
		КонецЕсли;
		
	Иначе
		СтруктураДанных = ФизЛицоОбъект.СтруктураДанныхДляЗаполнения();
		СтруктураДанных.ФИО = Пользователь.Наименование;
		СтруктураДанных.Фотография = Пользователь.Фотография;
		ФизЛицоОбъект.Заполнить(СтруктураДанных);
		
		Если Загрузка Тогда
			ФизЛицоОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Если ФизЛицоОбъект.ПометкаУдаления <> Пользователь.ПометкаУдаления Тогда
			ФизЛицоОбъект.ПометкаУдаления = Пользователь.ПометкаУдаления;
		КонецЕсли;
	КонецЕсли;
	
	Если ФизЛицоОбъект.Модифицированность() Тогда 	
		ФизЛицоОбъект.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ФизЛицоОбъект.Ссылка,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ФизЛицоОбъект.Ссылка)));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сотрудники

// Возвращает ссылку на сотрудника, по ссылке на пользователя.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники
//
Функция СотрудникПоПользователю(Пользователь)

	ИдентификаторПользователя = Пользователь.УникальныйИдентификатор();
	
	ИдентификаторыСлужебныхПользователей = Новый Соответствие();
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Служебный") = Истина Тогда
		ИдентификаторыСлужебныхПользователей[ИдентификаторПользователя] = Истина;
	КонецЕсли;
	
	ИдентификаторыСлужебныхПользователей.Вставить(
		Пользователи.СсылкаНеуказанногоПользователя().УникальныйИдентификатор(),
		Истина);
	
	Если ИдентификаторыСлужебныхПользователей[ИдентификаторПользователя] = Истина Тогда
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Справочники.Сотрудники.ПолучитьСсылку(ИдентификаторПользователя);
	
КонецФункции

// Возвращает объект сотрудника, по ссылке на пользователя.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  СправочникОбъект.Сотрудники
//
Функция СотрудникОбъектПоПользователю(Пользователь)
	
	СотрудникСсылка = СотрудникПоПользователю(Пользователь);
	
	Если ОбщегоНазначения.СсылкаСуществует(СотрудникСсылка) Тогда
		СотрудникОбъект = СотрудникСсылка.ПолучитьОбъект();
	Иначе
		СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
		СотрудникОбъект.УстановитьСсылкуНового(СотрудникСсылка);
	КонецЕсли;
	
	Возврат СотрудникОбъект;
	
КонецФункции

// Очищает основного сотрудника у физ лица (РС ОсновныеСотрудники).
// 
// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
//  Загрузка - Булево
//  ПричинаЗагрузки - Строка - пояснение почему используется режим загрузки. 
//
Процедура ОчиститьОсновногоСотрудникаУФизЛица(ФизЛицо, Загрузка, ПричинаЗагрузки)
	
	Набор = РегистрыСведений.ОсновныеСотрудники.СоздатьНаборЗаписей();
	Набор.Отбор.ФизическоеЛицо.Установить(ФизЛицо);		
	Набор.ОбменДанными.Загрузка = Загрузка;
	Набор.Записать();
	
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
			Набор, ПричинаЗагрузки);	
	КонецЕсли;
	
КонецПроцедуры

// Назначает основного сотрудника физ лицу (РС ОсновныеСотрудники).
// 
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
//  Загрузка - Булево
//  ПричинаЗагрузки - Строка - пояснение почему используется режим загрузки. 
//
Процедура НазначитьОсновногоСотрудникаФизЛицу(Сотрудник, ФизЛицо, Загрузка, ПричинаЗагрузки)
		
	Набор = РегистрыСведений.ОсновныеСотрудники.СоздатьНаборЗаписей();
	Набор.Отбор.ФизическоеЛицо.Установить(ФизЛицо);		
	Набор.ОбменДанными.Загрузка = Загрузка;
	
	Запись = Набор.Добавить();
	Запись.ФизическоеЛицо = ФизЛицо;
	Запись.Сотрудник = Сотрудник;		
	
	Набор.Записать();
	
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
			Набор, ПричинаЗагрузки);	
	КонецЕсли;	
	
КонецПроцедуры

// Связывает сотрудника с пользователем.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
//  Пользователь - СправочникСсылка.Пользователи
//  Загрузка - Булево
//  ПричинаЗагрузки - Строка - пояснение почему используется режим загрузки. 
//
Процедура СвязатьСотрудникаСПользователем(Сотрудник, Пользователь, Загрузка, ПричинаЗагрузки)
	
	Набор = РегистрыСведений.СотрудникиПользователей.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(Пользователь);		
	Набор.Отбор.Сотрудник.Установить(Сотрудник);		
	Набор.ОбменДанными.Загрузка = Загрузка;
	
	Запись = Набор.Добавить();
	Запись.Пользователь = Пользователь;
	Запись.Сотрудник = Сотрудник;		
	
	Набор.Записать();
		
	Если Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередьНаборЗаписейРегистра(
			Набор, ПричинаЗагрузки);	
	КонецЕсли;
	
КонецПроцедуры

// Обновляет сотрудника по загружаемому пользователю из 2.1.
// 
// Параметры:
//  Пользователь - СтрокаТаблицыЗначений - структура с реквизитами элемента спр. Пользователи.
//  Загрузка - Булево - режим загрузки при записи сотрудника.
//  ПричинаЗагрузки - Строка - пояснение почему используется режим загрузки. 
//
Процедура ОбновитьСотрудникаПоПользователю21(Пользователь, Загрузка, ПричинаЗагрузки)
	
	СсылкаНаСотрудника = СотрудникПоПользователю(Пользователь.Ссылка);
	
	Если ЭтоУдалениеОбъекта(Пользователь)
		И Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаСотрудника) Тогда
		
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	Блокировка.Добавить("Справочник.Сотрудники").УстановитьЗначение("Ссылка", СсылкаНаСотрудника);
	
	Блокировка.Добавить("Справочник.Сотрудники").УстановитьЗначение(
		"Владелец", ФизЛицоПоПользователю(Пользователь.Ссылка));
	
	Если ЗначениеЗаполнено(Пользователь.ФизЛицо) Тогда
		Блокировка.Добавить("Справочник.Сотрудники").УстановитьЗначение(
			"Владелец", Пользователь.ФизЛицо);
	КонецЕсли;
	
	Блокировка.Заблокировать();
	
	ТекущееФизЛицо = Пользователь.ФизЛицо;
	Если Не ЗначениеЗаполнено(Пользователь.ФизЛицо) Тогда
		ТекущееФизЛицо = ФизЛицоПоПользователю(Пользователь.Ссылка);
	КонецЕсли;
	
	СотрудникОбъект = СотрудникОбъектПоПользователю(Пользователь.Ссылка);
	
	ЭтоНовыйСотрудник = СотрудникОбъект.ЭтоНовый();
	ПрежнееФизЛицо = СотрудникОбъект.Владелец;
	
	Если ЭтоУдалениеОбъекта(Пользователь) Тогда
		
		Если СотрудникОбъект.ПометкаУдаления <> Истина Тогда
			СотрудникОбъект.ПометкаУдаления = Истина;
		КонецЕсли;
		
	Иначе
		
		СтруктураДанныхДляЗаполнения = СотрудникОбъект.СтруктураДанныхДляЗаполнения();
		ЗаполнитьЗначенияСвойств(СтруктураДанныхДляЗаполнения, СотрудникОбъект);	
		
		СтруктураДанныхДляЗаполнения.ФизЛицо = ТекущееФизЛицо;
		СтруктураДанныхДляЗаполнения.Помещение = Пользователь.Помещение;
		
		СтруктураДанныхДляЗаполнения.ПредставлениеВДокументах = Пользователь.ПредставлениеВДокументах;
		Если Не ЗначениеЗаполнено(СтруктураДанныхДляЗаполнения.ПредставлениеВДокументах) Тогда
			СтруктураДанныхДляЗаполнения.ПредставлениеВДокументах = Пользователь.Наименование;
		КонецЕсли;
		
		СтруктураДанныхДляЗаполнения.ПредставлениеВПереписке = Пользователь.ПредставлениеВПереписке;
		Если Не ЗначениеЗаполнено(СтруктураДанныхДляЗаполнения.ПредставлениеВПереписке) Тогда
			СтруктураДанныхДляЗаполнения.ПредставлениеВПереписке = Пользователь.Наименование;
		КонецЕсли;
		
		ЗаполнитьПериодДействияСотрудника(
			СтруктураДанныхДляЗаполнения,
			СсылкаНаСотрудника,
			Не Пользователь.Недействителен);
			
		СотрудникОбъект.Заполнить(СтруктураДанныхДляЗаполнения);
			
		Если Пользователь.КонтактнаяИнформация = Null
			И СотрудникОбъект.КонтактнаяИнформация.Количество() > 0 Тогда  
			
			СотрудникОбъект.КонтактнаяИнформация.Очистить();
		
		ИначеЕсли Пользователь.КонтактнаяИнформация <> Null Тогда
			
			КИПользователя = Пользователь.КонтактнаяИнформация.Скопировать();
			Для Каждого СтрокаКИПользователя Из КИПользователя Цикл
				СтрокаКИПользователя.Вид = 
					ВидКИСотрудникаПоВидуКИПользователя(СтрокаКИПользователя.Вид, СтрокаКИПользователя.Тип);
				СтрокаКИПользователя.ВидДляСписка = СтрокаКИПользователя.Вид;
			КонецЦикла;
					
			КИСотрудника = СотрудникОбъект.КонтактнаяИнформация.Выгрузить();
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(КИПользователя, КИСотрудника) Тогда
				СотрудникОбъект.КонтактнаяИнформация.Загрузить(КИПользователя);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СотрудникОбъект.ОбменДанными.Загрузка <> Загрузка Тогда
			СотрудникОбъект.ОбменДанными.Загрузка = Загрузка;
		КонецЕсли;
			
		Если Пользователь.ПометкаУдаления <> СотрудникОбъект.ПометкаУдаления Тогда
			СотрудникОбъект.ПометкаУдаления = Пользователь.ПометкаУдаления;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СотрудникОбъект.Модифицированность() Тогда
		
		СотрудникОбъект.Записать();	
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				СотрудникОбъект.Ссылка,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СотрудникОбъект.Ссылка)));
		КонецЕсли;
		
		НазначитьОдногоИзСотрудниковДействующим(
			СтруктураДанныхДляЗаполнения.ФизЛицо,
			СтруктураДанныхДляЗаполнения.Должность,
			СтруктураДанныхДляЗаполнения.Подразделение,
			Загрузка,
			ПричинаЗагрузки);
		
	КонецЕсли;
	
	УдалитьОсновногоСотрудника = ЗначениеЗаполнено(ПрежнееФизЛицо)
		И ПрежнееФизЛицо <> ТекущееФизЛицо;
		
	УстановитьОсновногоСотрудника = ЭтоНовыйСотрудник
		Или Не ЗначениеЗаполнено(ПрежнееФизЛицо)
		Или ПрежнееФизЛицо <> ТекущееФизЛицо;
				
	Если УдалитьОсновногоСотрудника Тогда
		ОчиститьОсновногоСотрудникаУФизЛица(ПрежнееФизЛицо, Загрузка, ПричинаЗагрузки);	
	КонецЕсли;
	
	Если УстановитьОсновногоСотрудника Тогда
		НазначитьОсновногоСотрудникаФизЛицу(
			СотрудникОбъект.Ссылка, ТекущееФизЛицо, Загрузка, ПричинаЗагрузки);	
	КонецЕсли;
	
	Если ЭтоНовыйСотрудник Тогда
		СвязатьСотрудникаСПользователем(
			СотрудникОбъект.Ссылка, Пользователь.Ссылка, Загрузка, ПричинаЗагрузки);	
	КонецЕсли;
	
КонецПроцедуры

// Обновляет сотрудника по загружаемым сведениям о пользователе из 2.1.
// 
// Параметры:
//  Пользователь - СтрокаТаблицыЗначений - структура с реквизитами элемента спр. Пользователи.
//  Загрузка - Булево - режим загрузки при записи сотрудника.
//  ПричинаЗагрузки - Строка - пояснение почему используется режим загрузки. 
//
Процедура ОбновитьСотрудникаПоСведениямОПользователе21(Сведения, Загрузка, ПричинаЗагрузки)
	
	Блокировка = Новый БлокировкаДанных;
	
	СсылкаНаСотрудника = СотрудникПоПользователю(Сведения.Пользователь);
	Блокировка.Добавить("Справочник.Сотрудники").УстановитьЗначение("Ссылка", СсылкаНаСотрудника);
	
	Блокировка.Добавить("Справочник.Сотрудники").УстановитьЗначение(
		"Владелец", ФизЛицоПоПользователю(Сведения.Пользователь));
	
	Блокировка.Заблокировать();
	
	ПользовательНедействителен = Ложь;
	ФизЛицоПользователя = Неопределено;
	Если ОбщегоНазначения.СсылкаСуществует(Сведения.Пользователь) Тогда
		РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Сведения.Пользователь, "ФизЛицо, Недействителен");
		
		ФизЛицоПользователя = РеквизитыПользователя.ФизЛицо;
		ПользовательНедействителен = РеквизитыПользователя.Недействителен;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицоПользователя) Тогда
		Блокировка1 = Новый БлокировкаДанных;
		Блокировка1.Добавить("Справочник.Сотрудники").УстановитьЗначение(
			"Владелец", ФизЛицоПользователя);
		Блокировка1.Заблокировать();
	КонецЕсли;
	
	СотрудникОбъект = СотрудникОбъектПоПользователю(Сведения.Пользователь);
	
	СтруктураДанныхДляЗаполнения = СотрудникОбъект.СтруктураДанныхДляЗаполнения();
	ЗаполнитьЗначенияСвойств(СтруктураДанныхДляЗаполнения, СотрудникОбъект);
	
	ЭтоНовыйСотрудник = СотрудникОбъект.ЭтоНовый();
	
	Если ЭтоНовыйСотрудник Тогда
		Если ЗначениеЗаполнено(ФизЛицоПользователя) Тогда
			ФизЛицо = ФизЛицоПользователя;
		Иначе
			ФизЛицо = ФизЛицоПоПользователю(Сведения.Пользователь);
		КонецЕсли;
	Иначе
		ФизЛицо = СотрудникОбъект.Владелец;
	КонецЕсли;
	СтруктураДанныхДляЗаполнения.ФизЛицо = ФизЛицо;
	
	СтруктураДанныхДляЗаполнения.Должность = Сведения.Должность;
	СтруктураДанныхДляЗаполнения.Подразделение = Сведения.Подразделение;
	СтруктураДанныхДляЗаполнения.ГрафикРаботы = Сведения.ГрафикРаботы;
	
	ЗаполнитьПериодДействияСотрудника(
		СтруктураДанныхДляЗаполнения,
		СсылкаНаСотрудника,
		Не ПользовательНедействителен);
	
	СотрудникОбъект.Заполнить(СтруктураДанныхДляЗаполнения);
	
	Если СотрудникОбъект.ОбменДанными.Загрузка <> Загрузка Тогда
		СотрудникОбъект.ОбменДанными.Загрузка = Загрузка;
	КонецЕсли;
	
	Если СотрудникОбъект.Модифицированность() Тогда
		
		СотрудникОбъект.Записать();	
		
		Если Загрузка Тогда
			Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СотрудникОбъект.Ссылка));
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				СотрудникОбъект.Ссылка, ПричинаЗагрузки, Объект);
		КонецЕсли;
		
		НазначитьОдногоИзСотрудниковДействующим(
			СтруктураДанныхДляЗаполнения.ФизЛицо,
			СтруктураДанныхДляЗаполнения.Должность,
			СтруктураДанныхДляЗаполнения.Подразделение,
			Загрузка,
			ПричинаЗагрузки);
		
	КонецЕсли;

	Если ЭтоНовыйСотрудник Тогда
		НазначитьОсновногоСотрудникаФизЛицу(
			СотрудникОбъект.Ссылка, ФизЛицо, Загрузка, ПричинаЗагрузки);
		
		СвязатьСотрудникаСПользователем(
			СотрудникОбъект.Ссылка, Сведения.Пользователь, Загрузка, ПричинаЗагрузки);			
	КонецЕсли;
	
КонецПроцедуры

// Заполнить период действия сотрудника в структуре для заполнения.
// 
// Учитывается, что действительным по одному физ. лицу может быть только один сотрдуник.
// И это тот сотрдуник который был загружен самым первым, по действительному пользователю.
// Его период действия: от даты загрузки.
// Остальные сотрудники физ. лица, пересекающиеся по должности и подразделению распределяются
// по непересекающимся периодам в прошлое до даты загрузки самого первого действующего сотрудника.
// 
// Параметры:
//  СтруктураЗаполнения - Структура - см. Справочники.Сотрудники.СтруктураДанныхДляЗаполнения()
//  Сотрудник - СправочникСсылка.Сотрудники - Сотрудник
//  ПользовательДействует - Булево - Пользователь действует
//
Процедура ЗаполнитьПериодДействияСотрудника(СтруктураЗаполнения, Сотрудник, ПользовательДействует)
	
	ДействующийСотрудник = Справочники.Сотрудники.ПустаяСсылка();
	ДатаНачалаДействия = ТекущаяДатаСеанса();
	
	ГраницаНедействующихСлева = ДатаНачалаДействия;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	Сотрудники.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	Сотрудники.ДатаОкончанияДействия КАК ДатаОкончанияДействия
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Владелец = &Владелец
		|	И Сотрудники.Должность = &Должность
		|	И Сотрудники.Подразделение = &Подразделение
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачалаДействия";
		
	Запрос.УстановитьПараметр("Владелец", СтруктураЗаполнения.ФизЛицо);
	Запрос.УстановитьПараметр("Должность", СтруктураЗаполнения.Должность);
	Запрос.УстановитьПараметр("Подразделение", СтруктураЗаполнения.Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ДатаОкончанияДействия) Тогда
			ДействующийСотрудник = Выборка.Ссылка;
			ДатаНачалаДействия = Выборка.ДатаНачалаДействия;
		КонецЕсли;
		
		ГраницаНедействующихСлева = Мин(ГраницаНедействующихСлева, Выборка.ДатаНачалаДействия);
	КонецЦикла;
	
	СотрудникДействует = ПользовательДействует;
	Если ЗначениеЗаполнено(ДействующийСотрудник) И ДействующийСотрудник <> Сотрудник Тогда
		СотрудникДействует = Ложь;
	КонецЕсли;
	
	Если СотрудникДействует Тогда
		СтруктураЗаполнения.ДатаНачалаДействия = ДатаНачалаДействия;
		СтруктураЗаполнения.ДатаОкончанияДействия = Дата(1, 1, 1);
	ИначеЕсли ЗначениеЗаполнено(СтруктураЗаполнения.ДатаНачалаДействия)
		И ЗначениеЗаполнено(СтруктураЗаполнения.ДатаОкончанияДействия) Тогда
		
		// Не меняем период действия недействующего сотрудника если он уже заполнен.
	Иначе
		СтруктураЗаполнения.ДатаНачалаДействия = ГраницаНедействующихСлева - 86400 * 2;
		СтруктураЗаполнения.ДатаОкончанияДействия = ГраницаНедействующихСлева - 86400;
	КонецЕсли;
	
КонецПроцедуры

// Назначает одного из сотрудников физ. лица с заданной должностью и подразделением
// действующим, если по данному разрезу нет другого действующего.
// 
// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица - Физ лицо
//  Должность - СправочникСсылка.Должности - Должность
//  Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение
//  Загрузка - Булево - Загрузка
//  ПричинаЗагрузки - Строка - Причина загрузки
//
Процедура НазначитьОдногоИзСотрудниковДействующим(ФизЛицо, Должность, Подразделение, Загрузка, ПричинаЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	Сотрудники.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	Сотрудники.ДатаОкончанияДействия КАК ДатаОкончанияДействия
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО Сотрудники.Ссылка = СотрудникиПользователей.Сотрудник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО СотрудникиПользователей.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	Сотрудники.Владелец = &Владелец
		|	И Сотрудники.Должность = &Должность
		|	И Сотрудники.Подразделение = &Подразделение
		|	И Пользователи.Недействителен = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачалаДействия УБЫВ";
	
	Запрос.УстановитьПараметр("Владелец", ФизЛицо);
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Если есть сотрудник с пустой датой окончания, то
		// он и является действующим. Ничего делать не нужно.
		Если Не ЗначениеЗаполнено(Выборка.ДатаОкончанияДействия) Тогда
			Прервать;
		КонецЕсли;
		
		СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтруктураЗаполнения = СотрудникОбъект.СтруктураДанныхДляЗаполнения();
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, СотрудникОбъект);
		СтруктураЗаполнения.ФизЛицо = СотрудникОбъект.Владелец;
		
		СтруктураЗаполнения.ДатаНачалаДействия = ТекущаяДатаСеанса();
		СтруктураЗаполнения.ДатаОкончанияДействия = Дата(1, 1, 1);
		
		СотрудникОбъект.Заполнить(СтруктураЗаполнения);
		СотрудникОбъект.ОбменДанными.Загрузка = Загрузка;
		СотрудникОбъект.Записать();
		
		Если Загрузка Тогда
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				СотрудникОбъект.Ссылка,
				ПричинаЗагрузки,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СотрудникОбъект.Ссылка)));
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыКонтактнойИнформацииСотрудников

// Выполняет обновление видов контактной информации сотрудников по загружаемым видам из 2.1. 
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1
//  
Процедура ОбновитьВидКонтактнойИнформацииСотрудника(
	Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
		РодительВидаКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Родитель");
	Иначе
		РодительВидаКИ = Источник.Родитель;
	КонецЕсли;
	
	Если РодительВидаКИ <> Справочники.ВидыКонтактнойИнформации.СправочникПользователи Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоУдалениеОбъекта(Источник) И Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоУдалениеОбъекта(Источник) Тогда
		СтандартнаяОбработка = Ложь;
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
			Источник, Приемник, Порция, ПараметрыЗагрузки);
	КонецЕсли;
	
	// Проверить на пустоту.
	ВидКИСотрудника = ВидКИСотрудникаПоВидуКИПользователя(Источник.Ссылка, Источник.Тип);
	
	ВидКИСотрудникаОбъект = ВидКИСотрудника.ПолучитьОбъект();
	
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		ВидКИСотрудникаОбъект.ИмяПредопределенныхДанных = "";
		ВидКИСотрудникаОбъект.ПометкаУдаления = Истина;
	Иначе
	
		РеквизитыИсключения = 
			"Ссылка,
			|Родитель,
			|ЭтоГруппа,
			|ИмяПредопределенныхДанных,
			|Представления";
		
		ЗаполнитьЗначенияСвойств(ВидКИСотрудникаОбъект, Источник,, РеквизитыИсключения);
		ВидКИСотрудникаОбъект.Представления.Очистить();
		Если Источник.Представления <> Null Тогда
			Для Каждого СтрокаТаблицы Из Источник.Представления Цикл
				ЗаполнитьЗначенияСвойств(ВидКИСотрудникаОбъект.Представления.Добавить(), СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ВидКИСотрудникаОбъект.ОбменДанными.Загрузка = ПараметрыЗагрузки.Загрузка;
	ВидКИСотрудникаОбъект.Записать();
	
	Если ПараметрыЗагрузки.Загрузка Тогда
		Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ВидКИСотрудникаОбъект.Ссылка));
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
			ВидКИСотрудникаОбъект.Ссылка, ПараметрыЗагрузки.ПричинаЗагрузки, Объект);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на вид контактной информации сотрудника по виду и типу контактной информации
// пользователя.
//
// Параметры:
//  ВидКИ - СправочникСсылка.ВидыКонтактнойИнформации
//  ТипКИ - ПеречислениеСсылка.ТипыКонтактнойИнформации
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации
//
Функция ВидКИСотрудникаПоВидуКИПользователя(ВидКИ, ТипКИ)
	
	ВидКИСотрудника = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	
	Если ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПользователя Тогда
		ВидКИСотрудника = Справочники.ВидыКонтактнойИнформации.EmailСотрудника;
	ИначеЕсли ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя Тогда
		ВидКИСотрудника = Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника;
	Иначе
		
		// Вначале ищем вид КИ сотрудника по наименованию или идентификатору ссылки вида
		// КИ пользователя. Если находим, то возвращаем его. Этот предварительный поиск делаем,
		// чтобы не устанавливать блокировку при каждом срабатывании текущей ветки кода.
		//
		// Блокировку данных ставим только если нужно создать новый вид КИ. Чтобы исключить
		// дублирования видов КИ в 2х сеансах.
		//
		// После установки блокировки дополнительно проверяем наличие вида КИ, на тот случай, если
		// другой сеанс создаст вид КИ между первой проверкой и блокировкой.
		
		НаименованиеУИД = СтрШаблон("КИСотрудника_%1", ВидКИ.УникальныйИдентификатор());
		
		Наименования = Новый Массив;
		Наименования.Добавить(НаименованиеУИД);
		Если ОбщегоНазначения.СсылкаСуществует(ВидКИ) Тогда
			Наименования.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидКИ, "Наименование"));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВидыКонтактнойИнформации.Ссылка
			|ИЗ
			|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			|ГДЕ
			|	ВидыКонтактнойИнформации.Наименование В (&Наименования)
			|	И ВидыКонтактнойИнформации.Родитель = &Родитель";
		Запрос.УстановитьПараметр("Наименования", Наименования);
		Запрос.УстановитьПараметр("Родитель", Справочники.ВидыКонтактнойИнформации.СправочникСотрудники);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВидКИСотрудника = Выборка.Ссылка;
		Иначе
			
			БлокировкаДанных = Новый БлокировкаДанных();
			
			Для Каждого Наименование Из Наименования Цикл
				ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.ВидыКонтактнойИнформации");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Наименование", Наименование);
			КонецЦикла;
			
			БлокировкаДанных.Заблокировать();
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидКИСотрудника = Выборка.Ссылка;
			Иначе
				ВидКИСотрудникаОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
				ВидКИСотрудникаОбъект.Наименование = НаименованиеУИД;
				ВидКИСотрудникаОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникСотрудники;
				ВидКИСотрудникаОбъект.Тип = ТипКИ;
				
				ВидКИСотрудникаОбъект.ПометкаУдаления = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидКИ, "ПометкаУдаления");
				
				ВидКИСотрудникаОбъект.ОбменДанными.Загрузка = Истина;
				ВидКИСотрудникаОбъект.Записать();
				
				ВидКИСотрудника = ВидКИСотрудникаОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидКИСотрудника;
	
КонецФункции

#КонецОбласти

// Выполняет конвертацию загружаемого пользователя из 2.1 в данные 3.0. 
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1
//  
Процедура КонвертацияПользователя(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Источник.Служебный Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НаименованиеАдминистратор = "Администратор";
	НаименованиеАдминистратор21 = "Администратор21";
	
	Если Источник.Наименование = НаименованиеАдминистратор Тогда
		
		Источник.Наименование = НаименованиеАдминистратор21;
		
		Данные = Источник._ДанныеПользователяИБ.Получить();
		
		Если Данные.Имя = НаименованиеАдминистратор Тогда
			Данные.Имя = НаименованиеАдминистратор21;
		КонецЕсли;	
		
		Если Данные.ПолноеИмя = НаименованиеАдминистратор Тогда
			Данные.ПолноеИмя = НаименованиеАдминистратор21;
		КонецЕсли;
		
		Источник._ДанныеПользователяИБ = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
		
		Если Источник.ПредставлениеВПереписке = НаименованиеАдминистратор Тогда
			Источник.ПредставлениеВПереписке = НаименованиеАдминистратор21;
		КонецЕсли;
		
		Если Источник.ПредставлениеВДокументах = НаименованиеАдминистратор Тогда
			Источник.ПредставлениеВДокументах = НаименованиеАдминистратор21;
		КонецЕсли;
		
	КонецЕсли;	
	
	Загрузка = ПараметрыЗагрузки.Загрузка;
	ПричинаЗагрузки = ПараметрыЗагрузки.ПричинаЗагрузки;
	
	Если Не ЗначениеЗаполнено(Источник.ФизЛицо) Тогда
		СоздатьФизЛицоПоПользователю21(Источник, Загрузка, ПричинаЗагрузки);		
	КонецЕсли;
	ОбновитьФизЛицоПоПользователю21(Источник, Загрузка, ПричинаЗагрузки);
	
	ОбновитьСотрудникаПоПользователю21(Источник, Загрузка, ПричинаЗагрузки);
	
	Если Не ЗначениеЗаполнено(Источник.ФизЛицо) Тогда
		Источник.ФизЛицо = ФизЛицоПоПользователю(Источник.Ссылка);
	КонецЕсли;
		
	Источник.Помещение = Справочники.ТерриторииИПомещения.ПустаяСсылка();
	Источник.ПредставлениеВДокументах = "";
	Источник.ПредставлениеВПереписке = "";
	Источник.ПредставлениеВПерепискеСРангом = "";
	Источник.Фотография = Новый ХранилищеЗначения(Неопределено);	
	
	ПрежнееФизЛицо = ФизЛицоПоПользователю(Источник.Ссылка);
	Если ОбщегоНазначения.СсылкаСуществует(Источник.Ссылка) Тогда
		ПрежнееФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ФизЛицо");
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	
	Если ПрежнееФизЛицо <> Источник.ФизЛицо Тогда
		ЗаменитьФизЛицоВЗаписяхДоступногоВремени(ПрежнееФизЛицо, Источник.ФизЛицо);
		ЗаменитьФизЛицоВЗаписяхЗанятости(ПрежнееФизЛицо, Источник.ФизЛицо);
		ЗаменитьФизЛицоВНастройкахОтображенияЗаписейРабочегоКалендаря(ПрежнееФизЛицо, Источник.ФизЛицо);
		ЗаменитьФизЛицоВНастройкахРабочегоКалендаря(ПрежнееФизЛицо, Источник.ФизЛицо);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет конвертацию загружаемых сведений о пользователях из 2.1 в данные 3.0. 
// 
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1
//
Процедура КонвертацияСведенийОПользователе(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьСотрудникаПоСведениямОПользователе21(
		Источник, ПараметрыЗагрузки.Загрузка, ПараметрыЗагрузки.ПричинаЗагрузки);
	
КонецПроцедуры

#КонецОбласти

#Область РабочийКалендарь

// Выполняет конвертацию загружаемых сведений о доступном времени пользователей из 2.1 в данные 3.0.
//
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1
//
Процедура КонвертацияДоступногоВремениПользователей(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбщегоНазначения.СсылкаСуществует(Источник.Пользователь) Тогда
		ФизЛицоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Источник.Пользователь, "Владелец");
	Иначе
		ФизЛицоПользователя = ФизЛицоПоПользователю(
			Справочники.Пользователи.ПолучитьСсылку(Источник.Пользователь.УникальныйИдентификатор()));
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДоступноеВремяФизическихЛиц");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизЛицоПользователя);
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ДоступноеВремяФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизЛицоПользователя);
	НаборЗаписей.Отбор.ДеньНедели.Установить(Источник.ДеньНедели);
	НаборЗаписей.Отбор.ВремяНачала.Установить(Источник.ВремяНачала);
	НаборЗаписей.Отбор.ВремяОкончания.Установить(Источник.ВремяОкончания);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ФизическоеЛицо = ФизЛицоПользователя;
	Запись.ДеньНедели = Источник.ДеньНедели;
	Запись.ВремяНачала = Источник.ВремяНачала;
	Запись.ВремяОкончания = Источник.ВремяОкончания;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет замену физ. лица в записях доступного времени при сменен физ. лица
// загружаемого пользователя.
//
Процедура ЗаменитьФизЛицоВЗаписяхДоступногоВремени(ФизЛицо, НовоеФизЛицо)
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДоступноеВремяФизическихЛиц");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизЛицо);
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДоступноеВремяФизическихЛиц");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", НовоеФизЛицо);
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ДоступноеВремяФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизЛицо);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборНовыхЗаписей = РегистрыСведений.ДоступноеВремяФизическихЛиц.СоздатьНаборЗаписей();
	НаборНовыхЗаписей.Отбор.ФизическоеЛицо.Установить(НовоеФизЛицо);
	
	Для Каждого ПрежняяЗапись Из НаборЗаписей Цикл
		
		НоваяЗапись = НаборНовыхЗаписей.Добавить();
		НоваяЗапись.ФизическоеЛицо = НовоеФизЛицо;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ПрежняяЗапись, "ДеньНедели, ВремяНачала, ВремяОкончания");
		
	КонецЦикла;
	
	НаборНовыхЗаписей.Записать();
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет конвертацию занятости пользователей из 2.1 в данные 3.0.
//
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1
//
Процедура КонвертацияЗанятостиПользователей(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбщегоНазначения.СсылкаСуществует(Источник.Пользователь) Тогда
		ФизЛицоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Источник.Пользователь, "Владелец");
	Иначе
		ФизЛицоПользователя = ФизЛицоПоПользователю(
			Справочники.Пользователи.ПолучитьСсылку(Источник.Пользователь.УникальныйИдентификатор()));
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗанятостьФизическихЛиц");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизЛицоПользователя);
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ЗанятостьФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизЛицоПользователя);
	НаборЗаписей.Отбор.ДатаНачала.Установить(Источник.ДатаНачала);
	НаборЗаписей.Отбор.ДатаОкончания.Установить(Источник.ДатаОкончания);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ФизическоеЛицо = ФизЛицоПользователя;
	Запись.ДатаНачала = Источник.ДатаНачала;
	Запись.ДатаОкончания = Источник.ДатаОкончания;
	Запись.Занят = Источник.Занят;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет замену физ. лица в записях занятости при сменен физ. лица
// загружаемого пользователя.
//
Процедура ЗаменитьФизЛицоВЗаписяхЗанятости(ФизЛицо, НовоеФизЛицо)
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗанятостьФизическихЛиц");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизЛицо);
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗанятостьФизическихЛиц");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", НовоеФизЛицо);
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ЗанятостьФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизЛицо);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборНовыхЗаписей = РегистрыСведений.ЗанятостьФизическихЛиц.СоздатьНаборЗаписей();
	НаборНовыхЗаписей.Отбор.ФизическоеЛицо.Установить(НовоеФизЛицо);
	
	Для Каждого ПрежняяЗапись Из НаборЗаписей Цикл
		
		НоваяЗапись = НаборНовыхЗаписей.Добавить();
		НоваяЗапись.ФизическоеЛицо = НовоеФизЛицо;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ПрежняяЗапись, "ДатаНачала, ДатаОкончания, Занят");
		
	КонецЦикла;
	
	НаборНовыхЗаписей.Записать();
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет конвертацию настроек отображения записей рабочего календаря из 2.1 в данные 3.0.
//
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1
//
Процедура КонвертацияНастроекОтображенияЗаписейРабочегоКалендаря(
	Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбщегоНазначения.СсылкаСуществует(Источник.Пользователь) Тогда
		ФизЛицоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Источник.Пользователь, "ФизЛицо");
	Иначе
		ФизЛицоПользователя = ФизЛицоПоПользователю(Источник.Пользователь);
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизЛицоПользователя);
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизЛицоПользователя);
	НаборЗаписей.Отбор.Событие.Установить(Источник.Событие);
	НаборЗаписей.Отбор.Настройка.Установить(Источник.Настройка);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ФизическоеЛицо = ФизЛицоПользователя;
	Запись.Событие = Источник.Событие;
	Запись.Настройка = Источник.Настройка;
	Запись.ЗначениеНастройки = Источник.ЗначениеНастройки;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет замену физ. лица в настройках отображения записей рабочего календаря при сменен физ. лица
// загружаемого пользователя.
//
Процедура ЗаменитьФизЛицоВНастройкахОтображенияЗаписейРабочегоКалендаря(ФизЛицо, НовоеФизЛицо)
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизЛицо);
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", НовоеФизЛицо);
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизЛицо);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборНовыхЗаписей = РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.СоздатьНаборЗаписей();
	НаборНовыхЗаписей.Отбор.ФизическоеЛицо.Установить(НовоеФизЛицо);
	
	Для Каждого ПрежняяЗапись Из НаборЗаписей Цикл
		
		НоваяЗапись = НаборНовыхЗаписей.Добавить();
		НоваяЗапись.ФизическоеЛицо = НовоеФизЛицо;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ПрежняяЗапись, "Событие, Настройка, ЗначениеНастройки");
		
	КонецЦикла;
	
	НаборНовыхЗаписей.Записать();
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет конвертацию настроек рабочего календаря из 2.1 в данные 3.0.
//
// Параметры - см. описание одноименных параметров в ЗагрузкаДанных_ДО8_2_1
//
Процедура КонвертацияНастроекРабочегоКалендаря(
	Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбщегоНазначения.СсылкаСуществует(Источник.Пользователь) Тогда
		ФизЛицоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Источник.Пользователь, "Владелец");
	Иначе
		ФизЛицоПользователя = ФизЛицоПоПользователю(
			Справочники.Пользователи.ПолучитьСсылку(Источник.Пользователь.УникальныйИдентификатор()));
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиРабочегоКалендаря");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизЛицоПользователя);
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.НастройкиРабочегоКалендаря.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизЛицоПользователя);
	НаборЗаписей.Отбор.Настройка.Установить(Источник.Настройка);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ФизическоеЛицо = ФизЛицоПользователя;
	Запись.Настройка = Источник.Настройка;
	Запись.Значение = Источник.Значение;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет замену физ. лица в настройках рабочего календаря при сменен физ. лица
// загружаемого пользователя.
//
Процедура ЗаменитьФизЛицоВНастройкахРабочегоКалендаря(ФизЛицо, НовоеФизЛицо)
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиРабочегоКалендаря");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизЛицо);
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиРабочегоКалендаря");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", НовоеФизЛицо);
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.НастройкиРабочегоКалендаря.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизЛицо);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборНовыхЗаписей = РегистрыСведений.НастройкиРабочегоКалендаря.СоздатьНаборЗаписей();
	НаборНовыхЗаписей.Отбор.ФизическоеЛицо.Установить(НовоеФизЛицо);
	
	Для Каждого ПрежняяЗапись Из НаборЗаписей Цикл
		
		НоваяЗапись = НаборНовыхЗаписей.Добавить();
		НоваяЗапись.ФизическоеЛицо = НовоеФизЛицо;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ПрежняяЗапись, "Настройка, Значение");
		
	КонецЦикла;
	
	НаборНовыхЗаписей.Записать();
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Автоподстановки

Процедура КонвертацияАвтоподстановокВШаблонахДокументов(Источник, ИмяИсточника) Экспорт
	
	Если Не ЗначениеЗаполнено(Источник.РабочаяГруппаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРГ Из Источник.РабочаяГруппаДокумента Цикл
		Если ТипЗнч(СтрокаРГ.Участник) = Тип("Строка") Тогда
			СтрокаРГ.Участник = СконвертированнаяАвтоподстановка(СтрокаРГ.Участник,
				ИмяИсточника);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция СконвертированнаяАвтоподстановка(ИмяАвтоподстановки, ИмяИсточника)
	
	АвтоподстановкаДляОбъектов = Истина;
	
	Если ИмяИсточника = "Справочник.ШаблоныВходящихДокументов"
		Или ИмяИсточника = "Справочник.ШаблоныИсходящихДокументов" 
		Или ИмяИсточника = "Справочник.ШаблоныВнутреннихДокументов" Тогда
		АвтоподстановкаДляОбъектов = Истина;
	Иначе
		АвтоподстановкаДляОбъектов = Ложь;
	КонецЕсли;
	
	Результат = Неопределено;

	АвтоподстановкаДляЗамены = СсылкаНаАвтоподстановкуПоИмени(ИмяАвтоподстановки, АвтоподстановкаДляОбъектов);

	Если АвтоподстановкаДляЗамены = Неопределено Тогда 
		// Создать автоподстановку
		Результат = СоздатьАвтоподстановку(ИмяАвтоподстановки, АвтоподстановкаДляОбъектов, Ложь);
	Иначе
		// Ссылка на автоподстановку
		Результат = АвтоподстановкаДляЗамены;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СсылкаНаАвтоподстановкуПоИмени(ИмяАвтоподстановки, ТолькоАвтоподстановкиДляОбъектов = Ложь)
	
	Результат = Неопределено;
	
	АвтоподстановкиДляЗамены = АвтоподстановкиДляЗамены(ТолькоАвтоподстановкиДляОбъектов);
	УстаревшиеАвтоподстановки = УстаревшиеАвтоподстановки();
	
	Отбор = Новый Структура("Представление", ИмяАвтоподстановки);
	НайденныеСтроки = АвтоподстановкиДляЗамены.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		
		Результат = НайденныеСтроки[0].Ссылка;
		
	Иначе
		
		ЧастиИмени = СтрРазделить(ИмяАвтоподстановки, ".");
		Для Каждого Строка Из УстаревшиеАвтоподстановки Цикл
	
			Для Каждого ЧастьИмени Из ЧастиИмени Цикл
				Если Строка.Представление = ЧастьИмени Тогда
					// Устаревшая автоподстановка. Создать новую с кодом и комментарием.
					Результат = СоздатьАвтоподстановку(ИмяАвтоподстановки, Истина, Истина, 
						Строка.ТипОбъекта, Строка.Код);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Результат) Тогда
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АвтоподстановкиДляЗамены(ТолькоДокументы = Ложь)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Ссылка");
	
	// Документы:
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все подчиненные текущего пользователя";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляОбъектов.ВсеПодчиненныеТекущегоПользователя;

	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все руководители текущего пользователя";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляОбъектов.ВсеРуководителиТекущегоПользователя;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Зарегистрировал документ";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляОбъектов.ЗарегистрировалДокумент;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Непосредственный руководитель текущего пользователя";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляОбъектов.НепосредственныйРуководительТекущегоПользователя;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Ответственный за документ";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляОбъектов.ОтветственныйЗаДокумент;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Подготовил документ";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляОбъектов.ПодготовилДокумент;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Подразделение подготовившего документ";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляОбъектов.ПодразделениеПодготовившегоДокумент;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Руководитель организации";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляОбъектов.РуководительОрганизации;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Руководитель подразделения документа";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляОбъектов.РуководительПодразделенияДокумента;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Текущий пользователь";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляОбъектов.ТекущийПользователь;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Адресат документа";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляОбъектов.АдресатДокумента;
	
	Если ТолькоДокументы Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Процессы:
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Автор процесса";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляПроцессов.АвторПроцесса;
		
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все коллеги автора процесса";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляПроцессов.ВсеКоллегиАвтораПроцесса;
		
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все подчиненные автора процесса";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляПроцессов.ВсеПодчиненныеАвтораПроцесса;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все пользователи информационной базы";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляПроцессов.ВсеПользователиИнформационнойБазы;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все руководители автора процесса";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляПроцессов.ВсеРуководителиАвтораПроцесса;
		
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все руководители предприятия";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляПроцессов.ВсеРуководителиПредприятия;
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Непосредственный руководитель автора процесса";
	НоваяСтрока.Ссылка = Справочники.АвтоподстановкиДляПроцессов.НепосредственныйРуководительАвтораПроцесса;
	
	Возврат Результат;
	
КонецФункции

Функция УстаревшиеАвтоподстановки()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Код");
	Результат.Колонки.Добавить("ТипОбъекта");
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Автор документа";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;
		|	
		|	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ИсходящиеДокументы"") И
		|		ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВнутренниеДокументы"") Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;
		|	
		|	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, ""Подготовил"");
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет ""%1"" процесса.'""),
		|		Строка(ИмяПредмета));
		|		
		|КонецЕсли;";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Непосредственный руководитель автора документа";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ИсходящиеДокументы"") И
		|		ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВнутренниеДокументы"") Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена для предмета """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета)); 
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|
		|АвторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, ""Подготовил"");
		|
		|Руководитель = Справочники.Пользователи.ПустаяСсылка();
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ
		|	|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	|	СтруктураПредприятия.Родитель,
		|	|	СтруктураПредприятия.Руководитель
		|	|ИЗ
		|	|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|	|		ПО СведенияОПользователяхДокументооборот.Подразделение = СтруктураПредприятия.Ссылка
		|	|ГДЕ
		|	|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь"";
		|Запрос.УстановитьПараметр(""Пользователь"", АвторДокумента);
		|
		|Выборка = Запрос.Выполнить().Выбрать();
		|
		|Если НЕ Выборка.Следующий() Тогда
		|	Возврат Руководитель;
		|КонецЕсли;
		|
		|Подразделение = Выборка.Подразделение;
		|Родитель = Выборка.Родитель;
		|Руководитель = Выборка.Руководитель;
		|	
		|Если Руководитель <> АвторДокумента Тогда
		|	Возврат Руководитель;
		|КонецЕсли;
		|
		|Пока Родитель <> Неопределено Цикл
		|	Подразделение = Родитель;
		|	
		|	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		|		Подразделение, ""Родитель, Руководитель"");
		|	Родитель = РеквизитыПодразделения.Родитель;
		|	Руководитель = РеквизитыПодразделения.Руководитель;
		|	
		|	Если Руководитель <> АвторДокумента Тогда
		|		Прервать;
		|	КонецЕсли;
		|КонецЦикла;
		|
		|Возврат Руководитель;";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все руководители автора документа";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ИсходящиеДокументы"") И
		|		ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВнутренниеДокументы"") Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена для предмета """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета)); 
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|
		|МассивРуководителей = Новый Массив;
		|АвторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, ""Подготовил"");
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ
		|	|	СведенияОПользователяхДокументооборот.Подразделение КАК Подразделение
		|	|ИЗ
		|	|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|	|ГДЕ
		|	|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь"";
		|Запрос.УстановитьПараметр(""Пользователь"", АвторДокумента);
		|
		|Результат = Запрос.Выполнить();
		|Если Результат.Пустой() Тогда 
		|	Возврат МассивРуководителей;
		|КонецЕсли;	
		|
		|Выборка = Результат.Выбрать();
		|Выборка.Следующий();
		|Подразделение = Выборка.Подразделение;
		|
		|Пока ЗначениеЗаполнено(Подразделение) Цикл
		|	
		|	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		|		Подразделение, ""Руководитель, Руководитель.Недействителен, Родитель"");
		|	Руководитель = РеквизитыПодразделения.Руководитель;
		|	Если ЗначениеЗаполнено(Руководитель) И Руководитель <> АвторДокумента Тогда
		|		Если НЕ РеквизитыПодразделения.РуководительНедействителен Тогда
		|			МассивРуководителей.Добавить(Руководитель);
		|		КонецЕсли;
		|	КонецЕсли;
		|	Подразделение = РеквизитыПодразделения.Родитель;
		|	
		|КонецЦикла;
		|
		|Возврат МассивРуководителей;";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все подчиненные автора документа";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ИсходящиеДокументы"") И
		|		ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВнутренниеДокументы"") Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена для предмета """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета)); 
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|
		|АвторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, ""Подготовил"");
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ
		|	|	ПодчиненностьСотрудников.Подчиненный КАК Пользователь
		|	|ИЗ
		|	|	РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|	|ГДЕ
		|	|	ПодчиненностьСотрудников.Руководитель = &Руководитель
		|	|	И ПодчиненностьСотрудников.Подчиненный <> ПодчиненностьСотрудников.Руководитель
		|	|	И НЕ ПодчиненностьСотрудников.Подчиненный.Недействителен"";
		|Запрос.УстановитьПараметр(""Руководитель"", АвторДокумента);
		|
		|Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Пользователь"");";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все коллеги автора документа";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "	
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|	
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ИсходящиеДокументы"") И
		|		ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВнутренниеДокументы"") Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена для предмета """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета)); 
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|
		|АвторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, ""Подготовил"");
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ ПЕРВЫЕ 1
		|	|	СведенияОПользователяхДокументооборот.Подразделение
		|	|ПОМЕСТИТЬ ПодразделениеПользователя
		|	|ИЗ
		|	|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|	|ГДЕ
		|	|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь
		|	|;
		|	|
		|	|////////////////////////////////////////////////////////////////////////////////
		|	|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	|	СведенияОПользователяхДокументооборот.Пользователь КАК Пользователь
		|	|ИЗ
		|	|	ПодразделениеПользователя КАК ПодразделениеПользователя
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|	|		ПО ПодразделениеПользователя.Подразделение = СведенияОПользователяхДокументооборот.Подразделение
		|	|ГДЕ
		|	|	СведенияОПользователяхДокументооборот.Пользователь <> &Пользователь
		|	|	И НЕ СведенияОПользователяхДокументооборот.Пользователь.Недействителен"";
		|Запрос.УстановитьПараметр(""Пользователь"", АвторДокумента);
		|
		|Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Пользователь"");";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Ответственный за документ";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|
		|Если СтрокаПредмета = Неопределено Тогда
		|	Возврат Справочники.Пользователи.ПустаяСсылка();
		|ИначеЕсли Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|	Возврат Справочники.Пользователи.ПустаяСсылка();
		|КонецЕсли;
		|
		|Если ТипЗнч(СтрокаПредмета.Предмет) = Тип(""СправочникСсылка.ВходящиеДокументы"") Или 
		|	 ТипЗнч(СтрокаПредмета.Предмет) = Тип(""СправочникСсылка.ИсходящиеДокументы"") Или 
		|	 ТипЗнч(СтрокаПредмета.Предмет) = Тип(""СправочникСсылка.ВнутренниеДокументы"") Тогда 
		|	
		|	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, ""Ответственный"");
		|КонецЕсли;
		|
		|Возврат Справочники.Пользователи.ПустаяСсылка();";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Непосредственный руководитель ответственного за документ";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|	
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ИсходящиеДокументы"")
		|		И ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВнутренниеДокументы"")
		|		И ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВходящиеДокументы"") Тогда
		|		
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена для предмета """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета)); 
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|
		|Ответственный = 
		|	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, ""Ответственный"");
		|	
		|Руководитель = Справочники.Пользователи.ПустаяСсылка();
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ
		|	|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	|	СтруктураПредприятия.Родитель,
		|	|	СтруктураПредприятия.Руководитель
		|	|ИЗ
		|	|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|	|		ПО СведенияОПользователяхДокументооборот.Подразделение = СтруктураПредприятия.Ссылка
		|	|ГДЕ
		|	|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь"";
		|Запрос.УстановитьПараметр(""Пользователь"", Ответственный);
		|
		|Выборка = Запрос.Выполнить().Выбрать();
		|
		|Если НЕ Выборка.Следующий() Тогда
		|	Возврат Руководитель;
		|КонецЕсли;
		|
		|Подразделение = Выборка.Подразделение;
		|Родитель = Выборка.Родитель;
		|Руководитель = Выборка.Руководитель;
		|	
		|Если Руководитель <> Ответственный Тогда
		|	Возврат Руководитель;
		|КонецЕсли;
		|
		|Пока Родитель <> Неопределено Цикл
		|	Подразделение = Родитель;
		|	
		|	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		|		Подразделение, ""Родитель, Руководитель"");
		|	Родитель = РеквизитыПодразделения.Родитель;
		|	Руководитель = РеквизитыПодразделения.Руководитель;
		|	
		|	Если Руководитель <> Ответственный Тогда
		|		Прервать;
		|	КонецЕсли;
		|КонецЦикла;
		|
		|Возврат Руководитель;";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все руководители ответственного за документ";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|	
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ИсходящиеДокументы"")
		|		И ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВнутренниеДокументы"")
		|		И ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВходящиеДокументы"") Тогда
		|		
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена для предмета """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета)); 
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|
		|МассивРуководителей = Новый Массив;
		|
		|Ответственный = СтрокаПредмета.Предмет.Ответственный;
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ
		|	|	СведенияОПользователяхДокументооборот.Подразделение КАК Подразделение
		|	|ИЗ
		|	|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|	|ГДЕ
		|	|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь"";
		|Запрос.УстановитьПараметр(""Пользователь"", Ответственный);
		|
		|Результат = Запрос.Выполнить();
		|Если Результат.Пустой() Тогда 
		|	Возврат МассивРуководителей;
		|КонецЕсли;
		|
		|Выборка = Результат.Выбрать();
		|Выборка.Следующий();
		|Подразделение = Выборка.Подразделение;
		|
		|Пока ЗначениеЗаполнено(Подразделение) Цикл
		|	
		|	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		|		Подразделение, ""Руководитель, Руководитель.Недействителен, Родитель"");
		|	
		|	Руководитель = РеквизитыПодразделения.Руководитель;
		|	Если ЗначениеЗаполнено(Руководитель) И Руководитель <> Ответственный Тогда
		|		Если НЕ РеквизитыПодразделения.РуководительНедействителен Тогда
		|			МассивРуководителей.Добавить(Руководитель);
		|		КонецЕсли;
		|	КонецЕсли;
		|	Подразделение = РеквизитыПодразделения.Родитель;
		|КонецЦикла;
		|
		|Возврат МассивРуководителей;";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все подчиненные ответственного за документ";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ИсходящиеДокументы"")
		|		И ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВнутренниеДокументы"")
		|		И ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВходящиеДокументы"") Тогда
		|		
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена для предмета """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета)); 
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|
		|Ответственный = СтрокаПредмета.Предмет.Ответственный;
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ
		|	|	ПодчиненностьСотрудников.Подчиненный КАК Пользователь
		|	|ИЗ
		|	|	РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|	|ГДЕ
		|	|	ПодчиненностьСотрудников.Руководитель = &Руководитель
		|	|	И ПодчиненностьСотрудников.Подчиненный <> ПодчиненностьСотрудников.Руководитель
		|	|	И НЕ ПодчиненностьСотрудников.Подчиненный.Недействителен"";
		|Запрос.УстановитьПараметр(""Руководитель"", Ответственный);
		|
		|Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Пользователь"");";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все коллеги ответственного за документ";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|	
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ИсходящиеДокументы"")
		|		И ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВнутренниеДокументы"")
		|		И ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВходящиеДокументы"") Тогда
		|		
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена для предмета """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета)); 
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|
		|Ответственный = СтрокаПредмета.Предмет.Ответственный;
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ ПЕРВЫЕ 1
		|	|	СведенияОПользователяхДокументооборот.Подразделение
		|	|ПОМЕСТИТЬ ПодразделениеПользователя
		|	|ИЗ
		|	|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|	|ГДЕ
		|	|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь
		|	|;
		|	|
		|	|////////////////////////////////////////////////////////////////////////////////
		|	|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	|	СведенияОПользователяхДокументооборот.Пользователь КАК Пользователь
		|	|ИЗ
		|	|	ПодразделениеПользователя КАК ПодразделениеПользователя
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|	|		ПО ПодразделениеПользователя.Подразделение = СведенияОПользователяхДокументооборот.Подразделение
		|	|ГДЕ
		|	|	СведенияОПользователяхДокументооборот.Пользователь <> &Пользователь
		|	|	И НЕ СведенияОПользователяхДокументооборот.Пользователь.Недействителен"";
		|Запрос.УстановитьПараметр(""Пользователь"", Ответственный);
		|
		|Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Пользователь"");";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Все согласовавшие документ";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|	
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ИсходящиеДокументы"") И
		|		ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВнутренниеДокументы"") Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена для предмета """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета)); 
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|
		|СогласовавшиеДокумент = Новый Массив;
		|
		|Запрос = Новый Запрос;
		|
		|Если ПолучитьФункциональнуюОпцию(""ИспользоватьВизыСогласования"") Тогда
		|	
		|	ВизыСогласованияДокумента = 
		|		РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(СтрокаПредмета.Предмет);
		|		
		|	СогласовавшиеДокумент = ВизыСогласованияДокумента.ВыгрузитьКолонку(""Исполнитель"");
		|	
		|Иначе
		|	Запрос.Текст = 
		|		""ВЫБРАТЬ
		|		|	ЗадачаИсполнителя.Исполнитель,
		|		|	ЗадачаИсполнителя.Ссылка,
		|		|	ЗадачаИсполнителя.ДатаИсполнения
		|		|ПОМЕСТИТЬ ЗадачиСогласованияПоДокументу
		|		|ИЗ
		|		|	БизнесПроцесс.Согласование.Предметы КАК СогласованиеПредметы
		|		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		|		ПО СогласованиеПредметы.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
		|		|ГДЕ
		|		|	СогласованиеПредметы.Предмет = &Предмет
		|		|	И ЗадачаИсполнителя.Выполнена = ИСТИНА
		|		|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать)
		|		|;
		|		|
		|		|////////////////////////////////////////////////////////////////////////////////
		|		|ВЫБРАТЬ
		|		|	ЗадачиСогласованияПоДокументу.Исполнитель,
		|		|	МАКСИМУМ(ЗадачиСогласованияПоДокументу.ДатаИсполнения) КАК ДатаИсполнения
		|		|ПОМЕСТИТЬ ДатыПоследнихОтветов
		|		|ИЗ
		|		|	ЗадачиСогласованияПоДокументу КАК ЗадачиСогласованияПоДокументу
		|		|
		|		|СГРУППИРОВАТЬ ПО
		|		|	ЗадачиСогласованияПоДокументу.Исполнитель
		|		|;
		|		|
		|		|////////////////////////////////////////////////////////////////////////////////
		|		|ВЫБРАТЬ
		|		|	ЗадачиСогласованияПоДокументу.Исполнитель
		|		|ИЗ
		|		|	ДатыПоследнихОтветов КАК ДатыПоследнихОтветов
		|		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗадачиСогласованияПоДокументу КАК ЗадачиСогласованияПоДокументу
		|		|		ПО ДатыПоследнихОтветов.Исполнитель = ЗадачиСогласованияПоДокументу.Исполнитель
		|		|			И ДатыПоследнихОтветов.ДатаИсполнения = ЗадачиСогласованияПоДокументу.ДатаИсполнения"";
		|	Запрос.УстановитьПараметр(""Предмет"", СтрокаПредмета.Предмет);
		|	
		|	СогласовавшиеДокумент = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Исполнитель"");
		|	
		|КонецЕсли;
		|
		|Возврат СогласовавшиеДокумент;";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Руководитель организации";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|	
		|Если СтрокаПредмета = Неопределено Тогда
		|	Возврат Справочники.Пользователи.ПустаяСсылка();
		|ИначеЕсли Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|	Возврат Справочники.Пользователи.ПустаяСсылка();
		|КонецЕсли;
		|
		|Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ИсходящиеДокументы"")
		|  И ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВнутренниеДокументы"")
		|  И ТипЗнч(СтрокаПредмета.Предмет) <> Тип(""СправочникСсылка.ВходящиеДокументы"") Тогда 
		|	 Возврат Справочники.Пользователи.ПустаяСсылка();
		|КонецЕсли;  
		|
		|Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, ""Организация"");
		|
		|Если Не ЗначениеЗаполнено(Организация) Тогда 
		|	Возврат Справочники.Пользователи.ПустаяСсылка();
		|КонецЕсли;
		|
		|ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительОрганизации;
		|Отбор = Новый Структура(""Организация, ОтветственноеЛицо"", Организация, ОтветственноеЛицо);
		|Возврат РегистрыСведений.ОтветственныеЛицаОрганизаций.
		|	ПолучитьПоследнее(БизнесПроцессОбъект.Дата, Отбор).Пользователь;";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Руководитель подразделения документа";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|
		|Если СтрокаПредмета = Неопределено Тогда
		|	Возврат Справочники.Пользователи.ПустаяСсылка();
		|ИначеЕсли Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|	Возврат Справочники.Пользователи.ПустаяСсылка();
		|КонецЕсли;
		|
		|Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(СтрокаПредмета.Предмет) Тогда 
		|	Возврат Справочники.Пользователи.ПустаяСсылка();
		|КонецЕсли;
		|
		|Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, ""Подразделение"");
		|
		|Если Не ЗначениеЗаполнено(Подразделение) Тогда 
		|	Возврат Справочники.Пользователи.ПустаяСсылка();
		|КонецЕсли;
		|
		|Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, ""Руководитель"");";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Участники мероприятия";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.Мероприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|
		|Мероприятие = """";
		|
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если Не УправлениеМероприятиями.ЭтоМероприятие(СтрокаПредмета.Предмет, Мероприятие) И
		|		 Не УправлениеМероприятиями.ЭтоМатериалМероприятия(СтрокаПредмета.Предмет, Мероприятие) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как предмет """"%1"""" не является мероприятием или материалом мероприятия.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|
		|МассивУчастников = Новый Массив;
		|
		|Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие);
		|Для Каждого Строка Из Участники Цикл
		|	МассивУчастников.Добавить(Строка.Исполнитель);
		|КонецЦикла;	
		|
		|Возврат МассивУчастников;";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Председатель мероприятия";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.Мероприятия;
	НоваяСтрока.Код = "
		|СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|
		|Мероприятие = """";
		|
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если Не УправлениеМероприятиями.ЭтоМероприятие(СтрокаПредмета.Предмет, Мероприятие) И
		|		 Не УправлениеМероприятиями.ЭтоМатериалМероприятия(СтрокаПредмета.Предмет, Мероприятие) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как предмет """"%1"""" не является мероприятием или материалом мероприятия.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|	
		|Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Мероприятие, ""Председатель"");";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Секретарь мероприятия";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.Мероприятия;
	НоваяСтрока.Код = "СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,""ИмяПредмета"");
		|
		|Мероприятие = """";
		|
		|Если СтрокаПредмета <> Неопределено Тогда
		|	
		|	Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как не указан предмет """"%1"""" процесса.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;	
		|	
		|	Если Не УправлениеМероприятиями.ЭтоМероприятие(СтрокаПредмета.Предмет, Мероприятие) И
		|		 Не УправлениеМероприятиями.ЭтоМатериалМероприятия(СтрокаПредмета.Предмет, Мероприятие) Тогда 
		|		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|			НСтр(""ru = 'Автоподстановка не может быть выполнена, так как предмет """"%1"""" не является мероприятием или материалом мероприятия.'""),
		|			Строка(ИмяПредмета));
		|	КонецЕсли;
		|	
		|Иначе
		|	
		|	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		|		НСтр(""ru = 'Не найден предмет """"%1"""" процесса.'""),
		|		Строка(ИмяПредмета));
		|	
		|КонецЕсли;
		|	
		|Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Мероприятие, ""Секретарь"");";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Представление = "Непосредственный руководитель исполнителя";
	НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НоваяСтрока.Код = "
		|УстановитьПривилегированныйРежим(Истина);
		|
		|Исполнитель = Неопределено;
		|ТипИсполнитель = ТипЗнч(Объект.ТекущийИсполнитель);
		|Если ТипИсполнитель = Тип(""СправочникСсылка.Пользователи"") Тогда
		|	Исполнитель = Объект.ТекущийИсполнитель;
		|ИначеЕсли ТипИсполнитель = Тип(""СправочникСсылка.ПолныеРоли"") Тогда
		|	Запрос = Новый Запрос;
		|	ТекстЗапроса = Новый Массив;
		|	ТекстЗапроса.Добавить(
		|		""ВЫБРАТЬ ПЕРВЫЕ 1
		|		|	ИсполнителиЗадач.Исполнитель
		|		|ИЗ
		|		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		|ГДЕ
		|		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя"");
		|	Запрос.Текст = СтрСоединить(ТекстЗапроса, Символы.ПС);
		|	Запрос.Параметры.Вставить(""РольИсполнителя"", Объект.ТекущийИсполнитель);
		|	Выборка = Запрос.Выполнить().Выбрать();
		|	Пока Выборка.Следующий() Цикл
		|		Исполнитель = Выборка.Исполнитель;
		|	КонецЦикла;
		|КонецЕсли;
		|
		|Руководитель = Справочники.Пользователи.ПустаяСсылка();
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ
		|	|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	|	СтруктураПредприятия.Родитель,
		|	|	СтруктураПредприятия.Руководитель
		|	|ИЗ
		|	|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|	|		ПО СведенияОПользователяхДокументооборот.Подразделение = СтруктураПредприятия.Ссылка
		|	|ГДЕ
		|	|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь"";
		|Запрос.УстановитьПараметр(""Пользователь"", Исполнитель);
		|
		|Выборка = Запрос.Выполнить().Выбрать();
		|
		|Если Не Выборка.Следующий() Тогда
		|	Возврат Руководитель;
		|КонецЕсли;
		|
		|Подразделение = Выборка.Подразделение;
		|Родитель = Выборка.Родитель;
		|Руководитель = Выборка.Руководитель;
		|
		|Если Руководитель <> Исполнитель Тогда
		|	Возврат Руководитель;
		|КонецЕсли;
		|
		|Пока Родитель <> Неопределено Цикл
		|	Подразделение = Родитель;
		|	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		|		Подразделение, ""Родитель, Руководитель"");
		|	Родитель = РеквизитыПодразделения.Родитель;
		|	Руководитель = РеквизитыПодразделения.Руководитель;
		|	
		|	Если Руководитель <> Исполнитель Тогда
		|		Прервать;
		|	КонецЕсли;
		|КонецЦикла;
		|
		|Возврат Руководитель;";
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьАвтоподстановку(Наименование, ДляОбъектов = Ложь, Устаревшая = Ложь,
	ТипОбъекта = Неопределено, Выражение = "")
	
	Менеджер = ?(ДляОбъектов,
		Справочники.АвтоподстановкиДляОбъектов, Справочники.АвтоподстановкиДляПроцессов);
	
	Ссылка = Менеджер.НайтиПоНаименованию(Наименование, Истина);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Если Устаревшая Тогда
		КомментарийДляАвтоподстановки = НСтр("ru = '
			|// Автоподстановка больше не входит в состав конфигурации.
			|// Код ниже скопирован из версии 2.1.
			|// При необходимости адаптируйте его для текущей версии.
			|
			|'");
	Иначе
		КомментарийДляАвтоподстановки = НСтр("ru = '
			|// Автоподстановка загружена при переходе с версии 2.1 на 3.0.
			|// Вставьте код обработчика автоподстановки из конфигурации 2.1.
			|
			|'");
	КонецЕсли;
	
	АвтоподстановкаОбъект = ?(ДляОбъектов,
		Справочники.АвтоподстановкиДляОбъектов.СоздатьЭлемент(),
		Справочники.АвтоподстановкиДляПроцессов.СоздатьЭлемент());
	
	АвтоподстановкаОбъект.Выражение = КомментарийДляАвтоподстановки + Выражение;
	АвтоподстановкаОбъект.Наименование = Наименование;
	
	Если ДляОбъектов Тогда
		//по умолчанию считаем что автоподстановка для документов
		АвтоподстановкаОбъект.ТипОбъекта = ?(ЗначениеЗаполнено(ТипОбъекта), ТипОбъекта,
			Перечисления.ТипыОбъектов.ДокументыПредприятия); 
	КонецЕсли; 
	
	АвтоподстановкаОбъект.Записать();
	
	Возврат АвтоподстановкаОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область РегистрыСведений

Процедура КонвертацияИсторияЗадач(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не РаботаСЗадачами.ЭтоИсточникЗадач(Источник.БизнесПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(Источник.БизнесПроцесс)).ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Источник.БизнесПроцесс);
		Блокировка.Заблокировать();
		
		Задача = Документы.Задача.НайтиПоИсточнику(Источник.БизнесПроцесс);
		
		Если Не ЗначениеЗаполнено(Задача) Тогда
			
			// Рег. задание еще не обработало очередь кэширующих данных, создаем явно, для регистрации ссылки по процессу.
			ЗадачаОбъект = Документы.Задача.СоздатьДокумент();
			ЗадачаОбъект.Заголовок = ПолучитьНавигационнуюСсылку(Источник.БизнесПроцесс);
			ЗадачаОбъект.Дата = ТекущаяДатаСеанса();
			ЗадачаОбъект.Источник = Источник.БизнесПроцесс;
			ЗадачаОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Задача = ЗадачаОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Порция.Колонки.Найти("Задача") = Неопределено Тогда
		Порция.Колонки.Добавить("Задача");
	КонецЕсли;
	Если Порция.Колонки.Найти("Дата") = Неопределено Тогда
		Порция.Колонки.Добавить("Дата");
	КонецЕсли;
	Если Порция.Колонки.Найти("Событие") = Неопределено Тогда
		Порция.Колонки.Добавить("Событие");
	КонецЕсли;
	Если Порция.Колонки.Найти("Автор") = Неопределено Тогда
		Порция.Колонки.Добавить("Автор");
	КонецЕсли;
	Если Порция.Колонки.Найти("Контекст") = Неопределено Тогда
		Порция.Колонки.Добавить("Контекст");
	КонецЕсли;
	Если Порция.Колонки.Найти("ДействиеЗадачи") = Неопределено Тогда
		Порция.Колонки.Добавить("ДействиеЗадачи");
	КонецЕсли;
	
	// Заполним правильные поля.
	Источник.Задача = Задача;
	Источник.Дата = Дата(1, 1, 1);
	Источник.Событие = Справочники.СобытияЗадач.СтараяИсторияВыполнения;
	Источник.Автор = Пользователи.СсылкаНеуказанногоПользователя();
	Источник.Контекст = Новый ХранилищеЗначения(Источник.Описание);
	Источник.ДействиеЗадачи = Документы.ДействиеЗадачи.ПустаяСсылка();
	
	ПараметрыЗагрузки.Изменения.Очистить();
	
	МиграцияДанныхИзВнешнихСистемСервер.ЗаписатьНезависимыйРегистр(
		Порция, Источник, Приемник, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура КонвертацияНастройкиУведомлений(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Источник.ВидСобытия = Перечисления.СобытияУведомлений.УдалитьПодошелСрокЗадачи
		Или Источник.ВидСобытия = Перечисления.СобытияУведомлений.УдалитьПросроченаЗадача
		Или Источник.ВидСобытия = Перечисления.СобытияУведомлений.УдалитьСозданиеЗаписиКалендаря Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияОбработанныеУведомления(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Источник.ВидСобытия = Перечисления.СобытияУведомлений.УдалитьПодошелСрокЗадачи
		Или Источник.ВидСобытия = Перечисления.СобытияУведомлений.УдалитьПросроченаЗадача
		Или Источник.ВидСобытия = Перечисления.СобытияУведомлений.УдалитьСозданиеЗаписиКалендаря Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияОчередьУведомлений(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Источник.ВидСобытия = Перечисления.СобытияУведомлений.УдалитьПодошелСрокЗадачи
		Или Источник.ВидСобытия = Перечисления.СобытияУведомлений.УдалитьПросроченаЗадача
		Или Источник.ВидСобытия = Перечисления.СобытияУведомлений.УдалитьСозданиеЗаписиКалендаря Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЛишниеНастройкиВерсионирования(
	Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если Источник.ТипОбъекта__ = "Справочник.ВходящиеДокументы"
		Или Источник.ТипОбъекта__ = "Справочник.ИсходящиеДокументы"
		Или Источник.ТипОбъекта__ = "БизнесПроцесс.Поручение" Тогда
		Возврат;
	КонецЕсли;
	
	ПорцияБезЛишнихСтрок = Порция.Скопировать();
	
	Н = ПорцияБезЛишнихСтрок.Количество()-1;
	Пока Н >= 0 Цикл
		
		СтрокаИсточника = ПорцияБезЛишнихСтрок[Н];
		
		Если СтрокаИсточника.ТипОбъекта__ = "Справочник.ВходящиеДокументы"
			Или СтрокаИсточника.ТипОбъекта__ = "Справочник.ИсходящиеДокументы"
			Или СтрокаИсточника.ТипОбъекта__ = "БизнесПроцесс.Поручение" Тогда 
			ПорцияБезЛишнихСтрок.Удалить(СтрокаИсточника);
		КонецЕсли;
		
		Н = Н - 1;
		
	КонецЦикла;
	
	ПараметрыЗагрузки.Вставить("ЕстьУдаление", ПараметрыЗагрузки.ПараметрыМетаданного.ЕстьУдаление);
	ПараметрыЗагрузки.Вставить("КлючевоеПоле", "ТипОбъекта");
	
	МиграцияДанныхИзВнешнихСистемСервер.ЗаписатьРегистрСВедущимИзмерением(
		Источник, Приемник, ПорцияБезЛишнихСтрок, ПараметрыЗагрузки);
		
КонецПроцедуры

Процедура УдалитьЛишниеРежимыРаспознавания(
	Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если СтрНачинаетсяС(Строка(Источник.Владелец), "<Объект не найден>") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Источник.Владелец__ = "Справочник.ВходящиеДокументы"
		Или Источник.Владелец__ = "Справочник.ИсходящиеДокументы"
		Или Источник.Владелец__ = "Справочник.ШаблоныВходящихДокументов"
		Или Источник.Владелец__ = "Справочник.ШаблоныИсходящихДокументов"
		Или Источник.Владелец__ = "БизнесПроцесс.ОбработкаВходящегоДокумента"
		Или Источник.Владелец__ = "БизнесПроцесс.ОбработкаИсходящегоДокумента"
		Или Источник.Владелец__ = "БизнесПроцесс.Поручение" Тогда
		
		СтандартнаяОбработка = Ложь; 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОчередьЗагрузкиСообщенийЭДО(Источник, Приемник, Порция,
	СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	СообщениеЭДО = Источник.СообщениеЭДО;
	Если ТипЗнч(СообщениеЭДО) <> Тип("ДокументСсылка.СообщениеЭДО") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ДокументЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЭДО, "ЭлектронныйДокумент");
	
	ЭтоУдаление = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "_Удаление") Тогда
		ЭтоУдаление = (Источник._Удаление = Истина);
	КонецЕсли;
	
	Если Не ЭтоУдаление Тогда
		МенеджерЗаписи = РегистрыСведений.ДокументыЭДОКСозданиюВДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДокументЭДО = ДокументЭДО;
		МенеджерЗаписи.АвтоматическоеСоздание = Истина;
		МенеджерЗаписи.Записать();
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОшибкиЭДОКИсправлению.ПредметОшибки
			|ИЗ
			|	РегистрСведений.ОшибкиЭДОКИсправлению КАК ОшибкиЭДОКИсправлению
			|ГДЕ
			|	ОшибкиЭДОКИсправлению.ПредметОшибки = &ПредметОшибки";
		Запрос.УстановитьПараметр("ПредметОшибки", ДокументЭДО);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			МенеджерЗаписи = РегистрыСведений.ДокументыЭДОКСозданиюВДО.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ДокументЭДО = ДокументЭДО;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПравилаУчетаВидовЭДДО(Источник, Приемник, Порция,
	СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если Порция.Колонки.Найти("ГрифДоступа") = Неопределено Тогда
		Порция.Колонки.Добавить("ГрифДоступа");
	КонецЕсли;
	Если Порция.Колонки.Найти("РольФайла") = Неопределено Тогда
		Порция.Колонки.Добавить("РольФайла");
	КонецЕсли;
	Если Порция.Колонки.Найти("ТематикаДокумента") = Неопределено Тогда
		Порция.Колонки.Добавить("ТематикаДокумента");
	КонецЕсли;
	Если Порция.Колонки.Найти("СоздаватьАвтоматически") = Неопределено Тогда
		Порция.Колонки.Добавить("СоздаватьАвтоматически");
	КонецЕсли;
	
	Источник.ГрифДоступа = Справочники.ГрифыДоступа.ПустаяСсылка();
	Источник.РольФайла = Справочники.РолиФайлов.ПустаяСсылка();
	Источник.ТематикаДокумента = Справочники.ТематикиДокументов.ПустаяСсылка();
	Источник.СоздаватьАвтоматически = Источник.Принимать;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
		Источник.ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.ЗаписатьНезависимыйРегистр(
		Порция, Источник, Приемник, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура ПриЗагрузкеОшибкиЭДОКИсправлению(Источник, Приемник, Порция,
	СтандартнаяОбработка, ПараметрыЗагрузки)
	
	ЭтоУдаление = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "_Удаление") Тогда
		ЭтоУдаление = (Источник._Удаление = Истина);
	КонецЕсли;
	
	Если Не ЭтоУдаление Тогда
		МенеджерЗаписи = РегистрыСведений.ДокументыЭДОКСозданиюВДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДокументЭДО = Источник.ПредметОшибки;
		МенеджерЗаписи.АвтоматическоеСоздание = Ложь;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияРегистраСпособыУведомленияПользователей(Источник, Приемник, Порция,
	СтандартнаяОбработка, ПараметрыЗагрузки)
	
	СтандартнаяОбработка = Ложь;
	
	Если Источник.ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя Тогда
		
		Источник.ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника;
		
	ИначеЕсли Источник.ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.EmailПользователя Тогда
		
		Источник.ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.EmailСотрудника;
		
	КонецЕсли;
	
	МиграцияДанныхИзВнешнихСистемСервер.ЗаписатьНезависимыйРегистр(
		Порция, Источник, Приемник, ПараметрыЗагрузки);
	
	Если Источник.Пользователь = Справочники.РабочиеГруппы.ВсеПользователи Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СпособыУведомленияПользователей.Пользователь,
			|	СпособыУведомленияПользователей.СпособУведомления,
			|	СпособыУведомленияПользователей.ВидКонтактнойИнформации,
			|	СпособыУведомленияПользователей.ДанныеСпособа
			|ИЗ
			|	РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеГруппы КАК РабочиеГруппы
			|		ПО СпособыУведомленияПользователей.Пользователь = РабочиеГруппы.Ссылка
			|ГДЕ
			|	РабочиеГруппы.ПометкаУдаления = ИСТИНА");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.СпособыУведомленияПользователей.СоздатьНаборЗаписей();
			Набор.Отбор.Пользователь.Установить(Выборка.Пользователь);
			Набор.Отбор.СпособУведомления.Установить(Выборка.СпособУведомления);
			Набор.Отбор.ДанныеСпособа.Установить(Выборка.ДанныеСпособа);
			Набор.Отбор.ВидКонтактнойИнформации.Установить(Выборка.ВидКонтактнойИнформации);
			
			Набор.ОбменДанными.Загрузка = Истина;
			
			Набор.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияУчастниковПроцессов(Источник, Приемник, Порция,
	СтандартнаяОбработка, ПараметрыЗагрузки)
	
	// Служебные пользователи грузятся в пустого сотрудника. Пропускаем эти записи.
	Если Источник.Участник = Справочники.Сотрудники.ПустаяСсылка() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Порция.Колонки.Найти("Основание") = Неопределено Тогда
		Порция.Колонки.Добавить("Основание");
	КонецЕсли;
	
	// Оставляем основание пустым, поскольку записи с непустыми основаниями создадутся по делегированию.
	Источник.Основание = Неопределено;
	
КонецПроцедуры

Процедура ЗагрузкаСостоянийДокументов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	ДобавитьКолонкуВТаблицу(Порция, "Действие", Неопределено);

	// представление         
	Если Не ПараметрыЗагрузки.Загрузка Тогда
		ПредставлениеСостояния = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Источник.Документ);
	КонецЕсли;
	Делопроизводство.ЗаписатьДанныеДокумента(Источник.Документ, "ПредставлениеСостояния", ПредставлениеСостояния);
	
КонецПроцедуры

Процедура ЗагрузитьПравилаАвтоматическогоЗапускаБизнесПроцессов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	ВидБизнесСобытияСтрока = СокрЛП(Источник.ВидБизнесСобытия);
	Если ВидБизнесСобытияСтрока = "Изменение входящего документа"
		Или ВидБизнесСобытияСтрока = "Изменение исходящего документа" Тогда
		Источник.ВидБизнесСобытия = Справочники.ВидыБизнесСобытий.ИзменениеДокумента;
		
	ИначеЕсли ВидБизнесСобытияСтрока = "Перерегистрация входящего документа"
		Или ВидБизнесСобытияСтрока = "Перерегистрация исходящего документа" Тогда
		Источник.ВидБизнесСобытия = Справочники.ВидыБизнесСобытий.ПеререгистрацияДокумента;
	
	ИначеЕсли ВидБизнесСобытияСтрока = "Регистрация входящего документа"
		Или ВидБизнесСобытияСтрока = "Регистрация исходящего документа" Тогда
		Источник.ВидБизнесСобытия = Справочники.ВидыБизнесСобытий.ПеререгистрацияДокумента;
		
	ИначеЕсли ВидБизнесСобытияСтрока = "Создание входящего документа"
		Или ВидБизнесСобытияСтрока = "Создание исходящего документа" Тогда
		Источник.ВидБизнесСобытия = Справочники.ВидыБизнесСобытий.ПеререгистрацияДокумента;
			
	Иначе
		Возврат;		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	МиграцияДанныхИзВнешнихСистемСервер.ЗаписатьНезависимыйРегистр(
		Порция, Источник, Приемник, ПараметрыЗагрузки);

КонецПроцедуры

Процедура КонвертацияРегистраСостоянияДелХраненияДокументов(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Делопроизводство.ЗаписатьСостояниеДелаВДокументы(Источник.ДелоХраненияДокументов, Источник.Состояние);
	
КонецПроцедуры

Процедура КонвертацияМоиДокументы(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Порция.Колонки.Найти("ИсточникПричины") = Неопределено Тогда
		Порция.Колонки.Добавить("ИсточникПричины");
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертацияЭлектронныхПодписей(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	КолонкиПоИменам = Новый Соответствие();
	КолонкиПоИменам["ПодписанныйОбъект"] = Порция.Колонки.Найти("ПодписанныйОбъект");
	КолонкиПоИменам["ПорядковыйНомер"] = Порция.Колонки.Найти("ПорядковыйНомер");
	КолонкиПоИменам["УникальныйИдентификатор"] = Порция.Колонки.Найти("УникальныйИдентификатор");
	КолонкиПоИменам["Объект"] = Порция.Колонки.Найти("Объект");
	КолонкиПоИменам["ДатаПодписи"] = Порция.Колонки.Найти("ДатаПодписи");
	КолонкиПоИменам["УстановившийПодпись"] = Порция.Колонки.Найти("УстановившийПодпись");
	
	// Загрузка происходит с нового формата регистра
	Если КолонкиПоИменам["ПодписанныйОбъект"] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиПоИменам["УникальныйИдентификатор"].Имя = "УдалитьУникальныйИдентификатор";
	КолонкиПоИменам["Объект"].Имя = "УдалитьОбъект";
	КолонкиПоИменам["ДатаПодписи"].Имя = "УдалитьДатаПодписи";
	КолонкиПоИменам["УстановившийПодпись"].Имя = "УдалитьУстановившийПодпись";
	
	Порция.Колонки.Добавить("ПодписанныйОбъект");
	Порция.Колонки.Добавить("ПорядковыйНомер");
	Порция.Колонки.Добавить("ДатаПодписи");
	Порция.Колонки.Добавить("УстановившийПодпись");
	Порция.Колонки.Добавить("ИдентификаторПодписи");
	
	Объекты = Новый Массив();
	Для Каждого Элемент Из Порция Цикл
		Если ЗначениеЗаполнено(Элемент.УдалитьОбъект) Тогда
			Объекты.Добавить(Элемент.УдалитьОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Объекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Объекты);
	ПорядковыеНомераПодписей = РаботаСЭп.СледующиеНомераПодписейОбъектов(Объекты);
	
	Для Каждого Строка Из Порция Цикл
		
		Если ЗначениеЗаполнено(Строка.ИдентификаторПодписи) Тогда
			Продолжить;
		КонецЕсли;
		
		ПодписанныйОбъект = Строка.УдалитьОбъект;
		
		ТекущийНомер = ПорядковыеНомераПодписей[ПодписанныйОбъект];
		
		Строка.ПодписанныйОбъект = ПодписанныйОбъект;
		Строка.ПорядковыйНомер = ТекущийНомер;
		Строка.ДатаПодписи = Строка.УдалитьДатаПодписи;
		Строка.УстановившийПодпись = Строка.УдалитьУстановившийПодпись;
		Строка.ИдентификаторПодписи = Строка.УдалитьУникальныйИдентификатор;
		
		Строка.УдалитьУникальныйИдентификатор = УникальныйИдентификаторПустой();
		Строка.УдалитьДатаПодписи = Дата(1, 1, 1);
		Строка.УдалитьУстановившийПодпись = Справочники.Пользователи.ПустаяСсылка();
		Строка.УдалитьОбъект = Неопределено;
		
		ТекущийНомер = ТекущийНомер + 1;
		ПорядковыеНомераПодписей[ПодписанныйОбъект] = ТекущийНомер;
		
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	МиграцияДанныхИзВнешнихСистемСервер.ЗаписатьНезависимыйРегистр(
		Порция, Источник, Приемник, ПараметрыЗагрузки);
	
КонецПроцедуры


// Устанавливает реквизит вида документа "ИспользоватьЭДО" в значение Истина, если настройка активна (Отправлять = Истина)
// 
// Параметры:
//  Источник - СтрокаТаблицыЗначений - строка таблицы данных загрузки. В структуре метаданных источника. 
//
Процедура ПриЗагрузкеНастроекОтправкиДокуменовПоЭДО(Источник)
	
	Если Источник.Отправлять Тогда
		ВидДокументаОбъект = Источник.ВидДокумента.ПолучитьОбъект();
		ВидДокументаОбъект.ИспользоватьЭДО = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидДокументаОбъект);
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область Константы

Процедура ПриЗагрузкеИспользованияРазрезовДоступа(Источник, Приемник, Порция,
	СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Значение = Источник.Значение.Получить();
	Н = Значение.Количество() - 1;
	
	Пока Н >= 0 Цикл
		
		Элемент = Значение[Н];

		Если Элемент.Значение = ПланыВидовХарактеристик.ВидыДоступа.ВидыДокументов Тогда
			Элемент.Представление = НСтр("ru = 'Виды документов'");
		ИначеЕсли Элемент.Представление = НСтр("ru = 'Виды входящих документов'")
			Или Элемент.Представление = НСтр("ru = 'Виды исходящих документов'") Тогда
			Значение.Удалить(Элемент);
		КонецЕсли;
		
		Н = Н - 1;
		
	КонецЦикла;
	
	Источник.Значение = Новый ХранилищеЗначения(Значение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Удаленные объекты.
// 
// Возвращаемое значение:
// Соответствие Из КлючИЗначение:
//  * Ключ - Строка - Полное имя метаданного
//  * Значение - Произвольный
Функция УдаленныеОбъекты() Экспорт
	
	УдаленныеОбъектыСоответствие = Новый Соответствие();
	
	УдаленныеОбъектыСоответствие.Вставить("РегистрСведений.СведенияОСообщенияхОбменаСИнтегрированнымиСистемами", 1);
	УдаленныеОбъектыСоответствие.Вставить("Константа.ДнейДоСкрытияПерсональныхДанныхСубъектов", 1);
	УдаленныеОбъектыСоответствие.Вставить("РегистрСведений.АктуальныеСостоянияДокументовМЭДО", 1);
	УдаленныеОбъектыСоответствие.Вставить("Константа.ИспользоватьInternetExplorerДляПолученияТекстаИзHTML", 1);
	УдаленныеОбъектыСоответствие.Вставить("Константа.ИспользоватьСинхронизациюСИнтегрированнымиСистемами", 1);
	УдаленныеОбъектыСоответствие.Вставить("Константа.ИспользоватьУсовершенствованныеЭП", 1);
	УдаленныеОбъектыСоответствие.Вставить("РегистрСведений.ЗадачиСПодзадачами", 1);
	
	Возврат УдаленныеОбъектыСоответствие;
	
КонецФункции	

Функция НайтиПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита, ИсключаемаяСсылка)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	&ИмяТаблицы КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка <> &Ссылка
		|	И Таблица.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
		|	И Таблица.&ИмяРеквизита = &ЗначениеРеквизита";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ОбщегоНазначения.ИмяТаблицыПоСсылке(ИсключаемаяСсылка));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРеквизита", ИмяРеквизита);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ИсключаемаяСсылка);
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьРеквизит =
		ИсключаемаяСсылка.Метаданные().Реквизиты.Найти("ИсточникДанных") <> Неопределено;
	
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ИсточникДанных.Состав.Найти(ИсключаемаяСсылка.Метаданные());
	ЕстьОбщийРеквизит = ЭлементСостава <> Неопределено
		И ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	
	Если Не ЕстьРеквизит И Не ЕстьОбщийРеквизит Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Таблица.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

// Меняет название колонки в данных, которые поменялись в 3.0 в отличие от 2.1
// 
// Параметры:
//  ТаблицаЗамены - ТаблицаЗначений - таблица, в которой меняем название колонки.
//  ИмяПоиска - Строка - Имя поиска.
//  ИмяЗамены - Строка - Имя замены.
Процедура ЗаменитьИмяКолонки(ТаблицаЗамены, ИмяПоиска, ИмяЗамены)
	
	Если ТипЗнч(ТаблицаЗамены) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
		
	Колонка = ТаблицаЗамены.Колонки.Найти(ИмяПоиска);
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = ИмяЗамены;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкуВТаблицу(Таблица, ИмяКолонки, ОписаниеТипаКолонки)

	Если Таблица.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонки, ОписаниеТипаКолонки);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает загружаемые НДПС.
// Заполняет добавленные в 3.0 поля настройками по умолчанию, удаляет удаленные настройки.
// 
// Параметры:
//  Источник - СтрокаТаблицыЗначений
Процедура ОбработатьНДПС(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)
	
	Если Источник.ВариантНастройкиДляВидовДокументов = 
			Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов Тогда
			
		Источник.ВариантНастройкиДляВидовДокументов = 
			Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВыбранныхВидовДокументов;
			
		Запрос = Новый Запрос;
		Запрос.Текст = "Выбрать
		|	Ссылка КАК ВидДокумента,
		|	&СсылкаНДПС КАК НастройкаДоступностиПоСостоянию
		|ИЗ
		|	Справочник.ВидыДокументов
		|ГДЕ
		|	(ВЫБОР
		|		КОГДА &НужныВходящие
		|			ТОГДА ЯвляетсяВходящейКорреспонденцией
		|		КОГДА &НужныИсходящие
		|			ТОГДА ЯвляетсяИсходящейКорреспонденцией
		|		ИНАЧЕ
		|		НЕ ЯвляетсяВходящейКорреспонденцией
		|		И НЕ ЯвляетсяИсходящейКорреспонденцией
		|	КОНЕЦ)";
		Запрос.УстановитьПараметр("НужныВходящие", Источник.ИсходныйТипДокумента = "Входящие документы");
		Запрос.УстановитьПараметр("НужныИсходящие", Источник.ИсходныйТипДокумента = "Исходящие документы");
		Запрос.УстановитьПараметр("СсылкаНДПС", Источник.Ссылка);
		
		Для Каждого Строка Из Запрос.Выполнить().Выгрузить() Цикл
			Запись = РегистрыСведений.НастройкиДоступностиДляВидовДокументов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			Запись.Записать();
		КонецЦикла;
			
	КонецЕсли;

	Источник.Наименование = СтрШаблон("%1 (%2)",
		Источник.Наименование, Источник.ИсходныйТипДокумента);

	ЗаменыПолейНДПС = Справочники.НастройкиДоступностиПоСостоянию.ЗаменыПолейИз21В30();
	
	// Переименуем поля и удалим лишние
	НужныеЗаменыПолей = ЗаменыПолейНДПС.Скопировать(Новый Структура("ТипДокумента",
		Источник.ТипДокумента));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		ЗаменыПолейНДПС.Скопировать(Новый Структура("ТипДокумента", Неопределено)),
		НужныеЗаменыПолей);
	
	Н = Источник.НастройкиДоступности.Количество()-1;
	Пока Н >= 0 Цикл
		
		ТекущаяНастройка = Источник.НастройкиДоступности[Н];
		ТекущееИмяПоля = ТекущаяНастройка.ИмяПоляКоманды;
		
		СтрокаЗамены = НужныеЗаменыПолей.Найти(ТекущееИмяПоля, "СтароеПоле");
		Если СтрокаЗамены <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаЗамены.НовоеПоле) Тогда
				// Переименовать
				ТекущаяНастройка.ИмяПоляКоманды = СтрокаЗамены.НовоеПоле;
			Иначе
				// Удалить
				Источник.НастройкиДоступности.Удалить(ТекущаяНастройка);
			КонецЕсли;
		КонецЕсли;
		
		Н = Н - 1;
	КонецЦикла;
	
	// Заполним добавленные настройками по умолчанию
	ТаблНастройкиПоУмолчанию = Неопределено;
	ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	Для Каждого ОписаниеНастройки Из ОписаниеНастроекДоступности Цикл
		Если ОписаниеНастройки.Идентификатор = Строка(Источник.Ссылка.УникальныйИдентификатор()) Тогда 
			ТаблНастройкиПоУмолчанию = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(
				Перечисления.ТипыОбъектов.ДокументыПредприятия, ОписаниеНастройки.Роль);
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	// Предопределенные настройки не нашлись, заполним загружаемые пользовательскими
	Если ТаблНастройкиПоУмолчанию = Неопределено Тогда
		ТаблНастройкиПоУмолчанию = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(
			Перечисления.ТипыОбъектов.ДокументыПредприятия, "Пользователь");
	КонецЕсли;

	// Добавим в настройки доступности строки для добавленных в 3.0 полей и заполним их по умолчанию
	ДобавленныеПоля = НужныеЗаменыПолей.НайтиСтроки(Новый Структура("СтароеПоле", ""));
	Для Каждого СтрокаПоля Из ДобавленныеПоля Цикл
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ТаблНастройкиПоУмолчанию.Скопировать(Новый Структура("ИмяПоляКоманды", СтрокаПоля.НовоеПоле)),
			Источник.НастройкиДоступности);
		
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	СсылкаНаНДПС = Источник.Ссылка;
	
	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	Справочники.НастройкиДоступностиПоСостоянию.ЗаполнитьДействияВНДПС(СсылкаНаНДПС, Истина);
	
КонецПроцедуры

Функция ЭтоТипОбъектаСВД(Тип)
	
	ИменаОбъектовСВД = Новый Соответствие;
	ИменаОбъектовСВД.Вставить("Документ.ВходящееСообщениеСВД", Истина);
	ИменаОбъектовСВД.Вставить("Документ.ИсходящееСообщениеСВД", Истина);
	ИменаОбъектовСВД.Вставить("Справочник.СерверныеСообщенияСВД", Истина);
	
	Возврат (ИменаОбъектовСВД[Тип] = Истина);
	
КонецФункции

Функция ОписаниеОбъектаСВД(Тип, ИДСсылки)
	
	Если Не ЭтоТипОбъектаСВД(Тип) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон("%1.%2", Тип, ИДСсылки);
	
КонецФункции

Функция ЭтоОписаниеОбъектаСВД(ОписаниеОбъекта)
	
	Если ТипЗнч(ОписаниеОбъекта) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧастиОписания = СтрРазделить(ОписаниеОбъекта, ".");
	
	Если ЧастиОписания.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тип = СтрШаблон("%1.%2", ЧастиОписания[0], ЧастиОписания[1]);
	
	Возврат ЭтоТипОбъектаСВД(Тип);
	
КонецФункции

Функция ЭтоУстаревишийТипСвязи(ТипСвязи)
	
	Если ТипСвязи = Справочники.ТипыСвязей.Корректировка 
	Или ТипСвязи = Справочники.ТипыСвязей.КорректировкаК
	Или ТипСвязи = Справочники.ТипыСвязей.Исправление
	Или ТипСвязи = Справочники.ТипыСвязей.ИсправлениеК Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает визы по источнику (бизнес-процессу, задаче)
Функция ВизыПоЗадаче(Источник, БизнесПроцесс, ТолькоАктивные = Истина)
	
	Если Не ЗначениеЗаполнено(Источник)
		Или ТипЗнч(Источник) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") 
		Или ТипЗнч(БизнесПроцесс) <> Тип("БизнесПроцессСсылка.Согласование") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВизыСогласования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|ГДЕ
	|	ВизыСогласования.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Если ТолькоАктивные Тогда 
		Запрос.Текст = Запрос.Текст + 
		" И (НЕ ВизыСогласования.ПомещенаВИсторию)
		| И (НЕ ВизыСогласования.Удалена)
		| И (НЕ ВизыСогласования.ПометкаУдаления) ";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает резолюции по источнику.
Функция РезолюцииПоИсточнику(Источник, БизнесПроцесс = Неопределено)
	
	Если Не ЗначениеЗаполнено(Источник)
		Или (ТипЗнч(Источник) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") 
			И ТипЗнч(Источник) <> Тип("БизнесПроцессСсылка.Рассмотрение")) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БизнесПроцесс)
		И ТипЗнч(БизнесПроцесс) <> Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Резолюции.Ссылка
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|ГДЕ
		|	Резолюции.Источник = &Источник";
	Запрос.УстановитьПараметр("Источник", Источник);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

Процедура УстановитьЗначенияУсловийДляКомбинированныхУсловийАлгоритмовПроверки(НастройкиУсловий)
	
	Для Каждого Настройка Из НастройкиУсловий Цикл
		
		Если ТипЗнч(Настройка) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если ТипЗнч(Настройка.ПравоеЗначение) = Тип("Строка") Тогда
				
				ИдентификаторПоиска = Новый УникальныйИдентификатор(Настройка.ПравоеЗначение);
				НайденныйАлгоритм = Справочники.АлгоритмыПроверки.ПолучитьСсылку(ИдентификаторПоиска);
				
				Если НайденныйАлгоритм.Пустая() Тогда
					
					АлгоритмОб = Справочники.АлгоритмыПроверки.СоздатьЭлемент();
					АлгоритмОб.ОбменДанными.Загрузка = Истина;
					АлгоритмОб.УстановитьСсылкуНового(НайденныйАлгоритм);
					АлгоритмОб.Записать();
					
				КонецЕсли;
				
				Настройка.ПравоеЗначение = НайденныйАлгоритм;
				
			КонецЕсли;
			
		Иначе
			
			УстановитьЗначенияУсловийДляКомбинированныхУсловийАлгоритмовПроверки(Настройка.Элементы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоУдалениеОбъекта(Источник) Экспорт
	
	ЭтоУдаление = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "_Удаление") Тогда
		ЭтоУдаление = (Источник._Удаление = Истина);
	КонецЕсли;
	
	Возврат ЭтоУдаление;
	
КонецФункции

// Создаем предопределенные папки для входящей и исходящей корреспонденции.
//
Функция НайтиСоздатьПапкуДокумента(ТипПапки)
	
	Если ТипПапки = "Входящая" Тогда
		ИмяПапки = НСтр("ru = 'Входящая корреспонденция'");
		ИДПапки = Новый УникальныйИдентификатор("2de2ac1f-5d64-4246-ab6b-5621fb18a252");
	ИначеЕсли ТипПапки = "Исходящая" Тогда 
		ИмяПапки = НСтр("ru = 'Исходящая корреспонденция'");
		ИДПапки = Новый УникальныйИдентификатор("5809ade1-eb1e-426c-8fac-fec2fff37429");
	КонецЕсли;

	СсылкаНаПапку = Справочники.ПапкиДокументов.ПолучитьСсылку(ИДПапки);	
	Если Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаПапку) Тогда
		ПапкаОбъект = Справочники.ПапкиДокументов.СоздатьЭлемент();
		ПапкаОбъект.УстановитьСсылкуНового(СсылкаНаПапку);
		
		ПапкаОбъект.Наименование = ИмяПапки;
		ПапкаОбъект.ДатаСоздания = ТекущаяДатаСеанса();
		ПапкаОбъект.Описание = НСтр("ru = 'Создана автоматически при переходе с версии 2.1 на 3.0.'");
		ПапкаОбъект.ОбменДанными.Загрузка = Истина;
		ПапкаОбъект.Записать();
	КонецЕсли;
	
	Возврат СсылкаНаПапку;
	
КонецФункции

// Находит или создает предопределенные виды документов, если в 2.1 они были отключены.
// 
// Параметры:
//  ТипВида - Строка - Тип вида
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументов - Вид документа по умолчанию
//
Функция НайтиСоздатьВидДокумента(ТипВида) Экспорт
	
	Если ТипВида = "Входящий документ" Тогда
		ИмяВида = НСтр("ru = 'Входящая корреспонденция'");
		ИДВида = Новый УникальныйИдентификатор("be963e12-dc04-4fc7-905c-7b5ffd5debc7");
		ЯвляетсяВходящейКорреспонденцией = Истина;
		ЯвляетсяИсходящейКорреспонденцией = Ложь;
	ИначеЕсли ТипВида = "Исходящий документ" Тогда 
		ИмяВида = НСтр("ru = 'Исходящая корреспонденция'");
		ИДВида = Новый УникальныйИдентификатор("f1292cac-3f90-4bee-b4a4-074919262e2c");
		ЯвляетсяВходящейКорреспонденцией = Ложь;
		ЯвляетсяИсходящейКорреспонденцией = Истина;
	ИначеЕсли ТипВида = "Внутренний документ" Тогда 
		ИмяВида = НСтр("ru = 'Общий документ'");
		ИДВида = Новый УникальныйИдентификатор("09b7a7fa-71f8-4fd0-8fac-69f0c41d5532");
		ЯвляетсяВходящейКорреспонденцией = Ложь;
		ЯвляетсяИсходящейКорреспонденцией = Ложь;
	КонецЕсли;
		
	СсылкаНаВид = Справочники.ВидыДокументов.ПолучитьСсылку(ИДВида);
	Если Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаВид) Тогда
		ВидОбъект = Справочники.ВидыДокументов.СоздатьЭлемент();
		ВидОбъект.УстановитьСсылкуНового(СсылкаНаВид);
		
		ВидОбъект.Наименование = ИмяВида;
		ВидОбъект.ЯвляетсяВходящейКорреспонденцией = ЯвляетсяВходящейКорреспонденцией;
		ВидОбъект.ЯвляетсяИсходящейКорреспонденцией = ЯвляетсяИсходящейКорреспонденцией;
		ВидОбъект.Комментарий = НСтр("ru = 'Создан автоматически при переходе с версии 2.1 на 3.0.'");
		ВидОбъект.ВестиУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
		ВидОбъект.ФормаДокумента = Перечисления.ВариантыФормДокументов.БумажнаяИлиЭлектронная;
		ВидОбъект.ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается;
		ВидОбъект.ОбменДанными.Загрузка = Истина;
		ВидОбъект.Записать();
		
		// Зададим настройки нумерации
		НаборЗаписей = РегистрыСведений.НастройкиНумерации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидДокумента.Установить(СсылкаНаВид);
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
		НоваяЗапись.Нумератор = Справочники.Нумераторы.ДокументыПредприятия;
		НоваяЗапись.Нумеровать = Нумерация.СформироватьПолеНумеровать(
			НоваяЗапись.СпособНумерации, НоваяЗапись.Нумератор);
		НоваяЗапись.Назначение = Нумерация.НазначениеНумератора(НоваяЗапись.Нумератор);
		НоваяЗапись.ВидДокумента = СсылкаНаВид;
		НоваяЗапись.ТипДокумента = Нумерация.ПолучитьТипДокументаПоВиду(СсылкаНаВид);
	
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Возврат СсылкаНаВид;
	
КонецФункции

// Добавляет строку в таблицу значений, если в ней уже нет точно такой же строки 
// 
// Параметры:
//  Таблица - ТаблицаЗначений - Таблица, в которую надо добавить строку
//  ЗначенияСтроки - Структура - Значения строки, ключи соответствуют колонкам таблицы.
Процедура ДобавитьСтрокуВТаблицуСКонтролемУникальности(Таблица, ЗначенияСтроки) Экспорт
	
	НайденныеСтроки = Таблица.НайтиСтроки(ЗначенияСтроки);
	Если Не НайденныеСтроки.Количество() Тогда
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияСтроки);
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаменитьЗначения

Процедура ЗаменитьЗначенияВидыБизнесПроцессовУтверждения(СтрокаЗамен)
	
	Если СтрокаЗамен.СтароеТип = "Перечисление.ВидыБизнесПроцессаУтверждение" Тогда
		
		Если СтрокаЗамен.Старое = "Подписание" Тогда
			СтрокаЗамен.Новое = "Подписание";
		Иначе
			СтрокаЗамен.Новое = "Утверждение";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьЗначенияТочкиМаршрутаПоручения(СтрокаЗамен)
	
	Если СтрокаЗамен.СтароеТип = "ТочкаМаршрутаБизнесПроцесса.Поручение" Тогда
				
		Если СтрокаЗамен.Старое = "b48c85e1-13ea-4f15-b2f4-9ce201ef2a9d" Тогда
			СтрокаЗамен.Новое = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить;
		ИначеЕсли СтрокаЗамен.Старое = "4573e627-c70f-4fd6-9aca-468f7176d674" Тогда
			СтрокаЗамен.Новое = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить;
		ИначеЕсли СтрокаЗамен.Старое = "5aede946-fa65-49a9-b3ac-fbc407dda403" Тогда
			СтрокаЗамен.Новое = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать;
		ИначеЕсли СтрокаЗамен.Старое = "37ff070e-3752-4b25-9f10-9fda91a53a93" Тогда
			СтрокаЗамен.Новое = БизнесПроцессы.Исполнение.ТочкиМаршрута.Старт;
		ИначеЕсли СтрокаЗамен.Старое = "f56efc09-9a96-411c-aed2-fc68b501886c" Тогда
			СтрокаЗамен.Новое = БизнесПроцессы.Исполнение.ТочкиМаршрута.Завершение;
		ИначеЕсли СтрокаЗамен.Старое = "3a90550f-eb48-43c7-a425-7f6df402593c" Тогда
			СтрокаЗамен.Новое = БизнесПроцессы.Исполнение.ТочкиМаршрута.Разделение2;
		ИначеЕсли СтрокаЗамен.Старое = "68bb587b-149e-491e-802d-7126890a0475" Тогда
			СтрокаЗамен.Новое = БизнесПроцессы.Исполнение.ТочкиМаршрута.ВернутьНаДоработку;
		ИначеЕсли СтрокаЗамен.Старое = "db01c10e-5357-45cc-b990-a9706fc79876" Тогда
			СтрокаЗамен.Новое = БизнесПроцессы.Исполнение.ТочкиМаршрута.ЗавершитьКонтроль;
		ИначеЕсли СтрокаЗамен.Старое = "488e463e-50d7-487b-a47e-6298b45455db" Тогда
			СтрокаЗамен.Новое = БизнесПроцессы.Исполнение.ТочкиМаршрута.Слияние2;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьЗначенияТочкиМаршрутаОбработкиДокумента(СтрокаЗамен)
	
	Если СтрокаЗамен.СтароеТип = "ТочкаМаршрутаБизнесПроцесса.ОбработкаВнутреннегоДокумента"
		Или СтрокаЗамен.СтароеТип = "ТочкаМаршрутаБизнесПроцесса.ОбработкаВходящегоДокумента"
		Или СтрокаЗамен.СтароеТип = "ТочкаМаршрутаБизнесПроцесса.ОбработкаИсходящегоДокумента" Тогда
		
		СтрокаЗамен.Новое = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВыполнитьДействияПроцессаПоСхеме;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьЗначенияВидыОтбораПисем(СтрокаЗамен)
	
	Если СтрокаЗамен.СтароеТип = "Перечисление.ВидыУсловийОтбораВходящихПисем" Тогда
		
		Если СтрокаЗамен.Старое = "ТекстСодержитУказанныеСлова" Тогда
			СтрокаЗамен.Новое = Перечисления.ВидыУсловийОтбораВходящихПисем.ПустаяСсылка();
		КонецЕсли;

	ИначеЕсли СтрокаЗамен.СтароеТип = "Перечисление.ВидыУсловийОтбораИсходящихПисем" Тогда
		
		Если СтрокаЗамен.Старое = "ТекстСодержитУказанныеСлова" Тогда
			СтрокаЗамен.Новое = Перечисления.ВидыУсловийОтбораИсходящихПисем.ПустаяСсылка()
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьЗначенияОбъектыСВД(СтрокаЗамен)
	
	Если ЭтоТипОбъектаСВД(СтрокаЗамен.СтароеТип) Тогда
		
		СтрокаЗамен.Новое = ОписаниеОбъектаСВД(СтрокаЗамен.СтароеТип, СтрокаЗамен.Старое);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьЗначенияТипыДанныхАдреснойКниги(СтрокаЗамен)
	
	Если СтрокаЗамен.СтароеТип = "Перечисление.ТипыДанныхАдреснойКниги" Тогда
		
		Если СтрокаЗамен.Старое = "АвтоподстановкаДокументов" Тогда
			СтрокаЗамен.Новое = Перечисления.ТипыДанныхАдреснойКниги.АвтоподстановкаОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьЗначенияВариантыРассмотрения(СтрокаЗамен)
	
	Если СтрокаЗамен.СтароеТип = "Перечисление.ВариантыРассмотрения" Тогда
		
		Если СтрокаЗамен.Старое = "НаправитьНаИсполнение" Тогда
			СтрокаЗамен.Новое = "НаправитьНаИсполнение";
		ИначеЕсли СтрокаЗамен.Старое = "НаправитьНаОзнакомление" Тогда
			СтрокаЗамен.Новое = "НаправитьНаОзнакомление";
		Иначе
			СтрокаЗамен.Новое = "НаправитьАвтору";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьЗначенияВариантыОбработкиРезолюции(СтрокаЗамен)
	
	Если СтрокаЗамен.СтароеТип = "Перечисление.ВариантыОбработкиРезолюции" Тогда
		
		Если СтрокаЗамен.Старое = "НаправитьНаИсполнение" Тогда
			СтрокаЗамен.Новое = "НаправитьНаИсполнение";
		ИначеЕсли СтрокаЗамен.Старое = "НаправитьНаОзнакомление" Тогда
			СтрокаЗамен.Новое = "НаправитьНаОзнакомление";
		Иначе
			СтрокаЗамен.Новое = "Обработано";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьЗначенияРезультатыПодписания(СтрокаЗамен)
	
	Если СтрокаЗамен.СтароеТип = "Перечисление.РезультатыПодписания" Тогда
		
		Если СтрокаЗамен.Старое = "Подписан" Тогда
			СтрокаЗамен.Новое = "Подписано";
		Иначе
			СтрокаЗамен.Новое = "НеПодписано";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьЗначенияСтавкиНДС(СтрокаЗамен)
	
	Если СтрокаЗамен.СтароеТип = "Перечисление.СтавкиНДС" Тогда
		Если СтрокаЗамен.Старое = "НДС20" Тогда
			СтрокаЗамен.Новое = УчетНДС.СтавкаНДСИзЧисла(20);
		ИначеЕсли СтрокаЗамен.Старое = "НДС18" Тогда
			СтрокаЗамен.Новое = УчетНДС.СтавкаНДСИзЧисла(18);
		ИначеЕсли СтрокаЗамен.Старое = "НДС10" Тогда
			СтрокаЗамен.Новое = УчетНДС.СтавкаНДСИзЧисла(10);
		ИначеЕсли СтрокаЗамен.Старое = "НДС7" Тогда
			СтрокаЗамен.Новое = УчетНДС.СтавкаНДСИзЧисла(7);
		ИначеЕсли СтрокаЗамен.Старое = "НДС5" Тогда
			СтрокаЗамен.Новое = УчетНДС.СтавкаНДСИзЧисла(5);
		ИначеЕсли СтрокаЗамен.Старое = "НДС0" Тогда
			СтрокаЗамен.Новое = Справочники.СтавкиНДС.НДС0;
		ИначеЕсли СтрокаЗамен.Старое = "БезНДС" Тогда
			СтрокаЗамен.Новое = Справочники.СтавкиНДС.БезНДС;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаЗамен.Старое) Тогда
			СтрокаЗамен.Новое = Справочники.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
