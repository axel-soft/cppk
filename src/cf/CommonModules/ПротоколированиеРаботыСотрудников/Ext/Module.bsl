////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ РЕАЛИЗАЦИЮ МЕХАНИКИ ПРОТОКОЛИРОВАНИЯ РАБОТЫ СОТРУДНИКОВ
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает значение константы ИспользоватьПротоколированиеРаботыСотрудников.
Функция ПолучитьИспользоватьПротоколированиеРаботыСотрудников() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьПротоколированиеРаботыСотрудников.Получить();
	
КонецФункции	

// Делает запись в регистр сведений ПротоколРаботыСотрудников.
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	Если НЕ ПротоколированиеРаботыСотрудниковПовтИсп.ПолучитьИспользоватьПротоколированиеРаботыСотрудников()
		Или ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектДанных = ПараметрыЗаписи.ОбъектДанных;
	Если Не ЗначениеЗаполнено(ОбъектДанных) Тогда
		ОбъектДанных = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПротоколРаботыСотрудников.СоздатьНаборЗаписей();
	
	ОлицетворяемыйСотрудник = Сотрудники.ОсновнойСотрудникПользователя(
		ПользователиДокументооборот.ОлицетворяемыйПользователь());
	
	ДатаЗаписи = ТекущаяДата();
	НаборЗаписей.Отбор.Дата.Установить(ДатаЗаписи);
	НаборЗаписей.Отбор.ОбъектДанных.Установить(ОбъектДанных);
	НаборЗаписей.Отбор.Сотрудник.Установить(ОлицетворяемыйСотрудник);
	НаборЗаписей.Отбор.ТипСобытия.Установить(ПараметрыЗаписи.ТипСобытия);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Дата = ДатаЗаписи;
	НоваяЗапись.Сотрудник = ОлицетворяемыйСотрудник;
	НоваяЗапись.ТипСобытия = ПараметрыЗаписи.ТипСобытия;
	НоваяЗапись.ОбъектДанных = ОбъектДанных;
	НоваяЗапись.Длительность = ПараметрыЗаписи.Длительность;
	НоваяЗапись.ДополнительныеСведения = ПараметрыЗаписи.ДополнительныеСведения;
	НоваяЗапись.ОписаниеСобытия = ПараметрыЗаписи.ОписаниеСобытия;
	ТекСеанс = ПолучитьТекущийСеансИнформационнойБазы(); 
	НоваяЗапись.ИмяКомпьютера = ТекСеанс.ИмяКомпьютера;
	
	Если ЗначениеЗаполнено(ОбъектДанных) И Не ЗначениеЗаполнено(НоваяЗапись.ОбъектДанных) Тогда
		ВызватьИсключение НСтр("ru = 'ОбъектДанных не заполнен'");
	КонецЕсли;		

	НаборЗаписей.Записать();
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при открытии карточки.
Процедура ЗаписатьОткрытие(ОбъектДанных, Описание = "") Экспорт
	
	Если ЗначениеЗаполнено(ОбъектДанных)
			И Метаданные.ОпределяемыеТипы.ПротоколируемыеДанные.Тип.Типы().Найти(ТипЗнч(ОбъектДанных)) <> Неопределено Тогда
		
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.Просмотр, 0, Описание, "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при интерактивном изменении объекта.
Процедура ЗаписатьИзменение(ОбъектДанных, Описание = "") Экспорт
	
	Если ЗначениеЗаполнено(ОбъектДанных)
			И Метаданные.ОпределяемыеТипы.ПротоколируемыеДанные.Тип.Типы().Найти(ТипЗнч(ОбъектДанных)) <> Неопределено Тогда
		
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.Изменение, 0, Описание, "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при не-интерактивной пометке удаления объекта.
Процедура ЗаписатьПометкуУдаления(ОбъектДанных, ПометкаУдаления) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		Если ПометкаУдаления Тогда
			ТипСобытия = Перечисления.ТипыСобытийПротоколаРаботыСотрудников.УстановкаПометкиУдаления;
		Иначе
			ТипСобытия = Перечисления.ТипыСобытийПротоколаРаботыСотрудников.СнятиеПометкиУдаления;
		КонецЕсли;		
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, ТипСобытия, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при интерактивном создании объекта.
Процедура ЗаписатьСоздание(ОбъектДанных, ЭтоНовыйОбъект) Экспорт
	
	Если ЭтоНовыйОбъект И ЗначениеЗаполнено(ОбъектДанных)
			И Метаданные.ОпределяемыеТипы.ПротоколируемыеДанные.Тип.Типы().Найти(ТипЗнч(ОбъектДанных)) <> Неопределено Тогда
		
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.Создание, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при интерактивном получении файла.
Процедура ЗаписатьПолучениеФайла(ОбъектДанных) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ПолучениеФайла, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при полнотекстовом поиске.
Процедура ЗаписатьПолнотекстовыйПоиск(Длительность, ОписаниеСобытия, ДополнительныеСведения) Экспорт
		
	ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
		Неопределено, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ПолнотекстовыйПоиск, Длительность, ОписаниеСобытия, ДополнительныеСведения);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при поиске по реквизитам.
Процедура ЗаписатьПоискПоРеквизитам(Длительность, ОписаниеСобытия, ДополнительныеСведения) Экспорт
		
	ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
		Неопределено, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ПоискПоРеквизитам, Длительность, ОписаниеСобытия, ДополнительныеСведения);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при входе в систему.
Процедура ЗаписатьВходВСистему() Экспорт
	
	ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
		Неопределено, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ВходВСистему, 0, "", "");
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при выходе из системы.
Процедура ЗаписатьВыходИзСистемы() Экспорт
	
	ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
		Неопределено, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ВыходИзСистемы, 0, "", "");
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при отправке по почте.
Процедура ЗаписатьОтправкуПоПочте(ОбъектДанных, ОписаниеСобытия) Экспорт
		
	ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
		ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ОтправкаПоПочте, 
		0, ОписаниеСобытия, "");
	
	Записать(ПараметрыЗаписи);
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектДанных) 
		Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(ОбъектДанных) Тогда
			
		МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОбъектДанных, Ложь);
		Для Каждого Файл Из МассивФайлов Цикл
			ЗаписатьОтправкуПоПочте(Файл, ОписаниеСобытия);
		КонецЦикла;	 	
			
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при приемке почты.
Процедура ЗаписатьПолучениеПочты(ОбъектДанных, ОписаниеСобытия) Экспорт
		
	ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
		ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ЗагрузкаПочты, 
		0, ОписаниеСобытия, "");
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при загрузке почты.
Процедура ЗаписатьЗагрузкуПочты(ОбъектДанных, ОписаниеСобытия, ДополнительныеСведения) Экспорт
		
	ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
		ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ЗагрузкаПочты, 0, ОписаниеСобытия, ДополнительныеСведения);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при изменении файла 
// (например, при выполнении команды "Закончить редактирование")
Процедура ЗаписатьИзменениеФайла(ОбъектДанных) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ИзменениеФайла, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при регистрации документа.
Процедура ЗаписатьРегистрациюДокумента(ОбъектДанных, РегистрационныйНомер) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Регистрационный номер: %1'"), Строка(РегистрационныйНомер));
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.РегистрацияДокумента, 0, ОписаниеСобытия, "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при сканировании.
Процедура ЗаписатьСканирование(ОбъектДанных) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.Сканирование, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при импорте файлов.
Процедура ЗаписатьИмпортФайлов(ОбъектДанных, ПолноеИмя) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Путь импортированного файла: %1'"), ПолноеИмя);
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ИмпортФайла, 0, ОписаниеСобытия, "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при экспорте файлов.
Процедура ЗаписатьЭкспортФайлов(ОбъектДанных, ПолныйПуть) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Путь экспорта файла: %1'"), ПолныйПуть);
		
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ЭкспортПапки, 0, ОписаниеСобытия, "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при выполнении команды "Сохранить как" для файла.
Процедура ЗаписатьСохранитьКак(ОбъектДанных, ПолныйПуть) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Путь сохранения файла: %1'"), ПолныйПуть);
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.СохранениеНаДиск, 0, ОписаниеСобытия, "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при изменении прав на объект.
Процедура ЗаписатьИзменениеПрав(ОбъектДанных) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ИзменениеПравДоступа, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при перенаправлении задачи.
Процедура ЗаписатьПеренаправлениеЗадачи(ОбъектДанных) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ПеренаправлениеЗадачи, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при старте бизнес процесса.
Процедура ЗаписатьСтартБизнесПроцесса(ОбъектДанных, ПараметрыЗаписи) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) 
		И (ПараметрыЗаписи.Свойство("Старт") ) Тогда	
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.СтартБизнесПроцесса, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при прерывании бизнес процесса.
Процедура ЗаписатьПрерываниеБизнесПроцесса(ОбъектДанных) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ПрерываниеБизнесПроцесса, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при установке подписи ЭП.
Процедура ЗаписатьПодписаниеЭП(ОбъектДанных, КомуВыданСертификат, Комментарий) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сертификат:%1  Комментарий:%2'"), КомуВыданСертификат, Комментарий);
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ПодписаниеЭП, 0, ОписаниеСобытия, "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при удалении подписи ЭП.
Процедура ЗаписатьУдалениеПодписиЭП(ОбъектДанных) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.УдалениеПодписиЭП, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при удалении подписи ЭП.
Процедура ЗаписатьУдалениеФайла(ОбъектДанных) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ИзменениеФайла, 0, 
			НСтр("ru = 'Удаление файла без возможности восстановления'"), 
			"");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при шифровании.
Процедура ЗаписатьШифрование(ОбъектДанных, СтрокаСертификатов) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сертификаты: %1'"), СтрокаСертификатов);
		
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.Шифрование, 0, ОписаниеСобытия, "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при расшифровывании.
Процедура ЗаписатьРасшифрование(ОбъектДанных) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.Расшифровывание, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при перемещении файла.
Процедура ЗаписатьПеремещениеФайла(ОбъектДанных, ПапкаОткуда, ПапкаКуда) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Исходная папка: %1   Папка, куда переместили: %2'"), ПапкаОткуда, ПапкаКуда);
		
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ПеремещениеФайлов, 0, ОписаниеСобытия, "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при удалении записей регламентным заданием.
Процедура ЗаписатьУдалениеЗаписейПротоколаРаботыСотрудников(ДатаОтсечения, ПутьФайлаZip) Экспорт
		
	ДополнительныеСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Удалены записи с датой более старой, чем дата: %1.  Удаленные записи сохранены в файле: %2'"), ДатаОтсечения, ПутьФайлаZip);
	
	ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
		Неопределено, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.УдалениеЗаписейПротоколаРаботыСотрудников, 0, "", ДополнительныеСведения);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при добавлении элемента в комплект или при удалении элемента из комплекта.
Процедура ЗаписатьИзменениеСоставаКомплекта(Комплект, Описание) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОбъектДанных", Комплект);
	ПараметрыЗаписи.Вставить("ТипСобытия", Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ИзменениеСоставаКомплекта);
	ПараметрыЗаписи.Вставить("Длительность", 0);
	ПараметрыЗаписи.Вставить("ОписаниеСобытия", "");
	ПараметрыЗаписи.Вставить("ДополнительныеСведения", Описание);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников, когда сотрудник удаляется из списка сотрудников пользователей
//
// Параметры:
//  ОбъектДанных - СправочникСсылка.Сотрудники
//  Пользователь - СправочникСсылка.Пользователи 
//
Процедура ЗаписатьУдалениеИзСпискаСотрудниковПользователя(ОбъектДанных, Пользователь) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОбъектДанных", ОбъектДанных);
	ПараметрыЗаписи.Вставить("ТипСобытия", 
		Перечисления.ТипыСобытийПротоколаРаботыСотрудников.УдалениеИзСпискаСотрудниковПользователя);
	ПараметрыЗаписи.Вставить("Длительность", 0);
	ПараметрыЗаписи.Вставить("ОписаниеСобытия", СтрШаблон(
		НСтр("ru = 'Больше не является сотрудником пользователя %1'"),
		Пользователь));
	ПараметрыЗаписи.Вставить("ДополнительныеСведения", "");
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры 

// Делает запись в регистр сведений ПротоколРаботыСотрудников, когда сотрудник удаляется из списка сотрудников пользователей
//
// Параметры:
//  ОбъектДанных - СправочникСсылка.Сотрудники
//  Пользователь - СправочникСсылка.Пользователи 
//
Процедура ЗаписатьДобавлениеВСписокСотрудниковПользователя(ОбъектДанных, Пользователь) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОбъектДанных", ОбъектДанных);
	ПараметрыЗаписи.Вставить("ТипСобытия", 
		Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ДобавлениеВСписокСотрудниковПользователя);
	ПараметрыЗаписи.Вставить("Длительность", 0);
	ПараметрыЗаписи.Вставить("ОписаниеСобытия", СтрШаблон(
		НСтр("ru = 'Теперь является сотрудником пользователя %1'"),
		Пользователь));
	ПараметрыЗаписи.Вставить("ДополнительныеСведения", "");
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников, когда сотрудник больше не является основным
//
// Параметры:
//  ОбъектДанных - СправочникСсылка.Сотрудники
//  ФизЛицо - СправочникСсылка.ФизическиеЛица 
//
Процедура ЗаписатьСотрудникБолееНеЯвляетсяОсновным(ОбъектДанных, ФизЛицо) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОбъектДанных", ОбъектДанных);
	ПараметрыЗаписи.Вставить("ТипСобытия", 
		Перечисления.ТипыСобытийПротоколаРаботыСотрудников.БольшеНеЯвляетсяОсновнымСотрудником);
	ПараметрыЗаписи.Вставить("Длительность", 0);
	ПараметрыЗаписи.Вставить("ОписаниеСобытия", СтрШаблон(
		НСтр("ru = 'Больше не является основным сотрудником пользователя %1'"),
		ФизЛицо));
	ПараметрыЗаписи.Вставить("ДополнительныеСведения", "");
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры 

// Делает запись в регистр сведений ПротоколРаботыСотрудников, когда сотрудник назначается основным
//
// Параметры:
//  ОбъектДанных - СправочникСсылка.Сотрудники
//  ФизЛицо - СправочникСсылка.Пользователи 
//
Процедура ЗаписатьСотрудникНазначенОсновным(ОбъектДанных, ФизЛицо) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОбъектДанных", ОбъектДанных);
	ПараметрыЗаписи.Вставить("ТипСобытия", 
		Перечисления.ТипыСобытийПротоколаРаботыСотрудников.НазначенОсновнымСотрудником);
	ПараметрыЗаписи.Вставить("Длительность", 0);
	ПараметрыЗаписи.Вставить("ОписаниеСобытия", СтрШаблон(
		НСтр("ru = 'Назначен основным сотрудником пользователя %1'"),
		ФизЛицо));
	ПараметрыЗаписи.Вставить("ДополнительныеСведения", "");
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников, когда очищается история выбора сотрудника 
//
// Параметры:
//  ОбъектДанных - СправочникСсылка.Сотрудники - Сотрудник, которому очистили историю
//  Пользователь - СправочникСсылка.Сотрудники - Сотрудник, который очистил историю 
//
Процедура ЗаписатьИсторияВыбораСотрудникаОчищена(ОбъектДанных, Пользователь) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОбъектДанных", ОбъектДанных);
	ПараметрыЗаписи.Вставить("ТипСобытия", 
		Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ИсторияВыбораСотрудникаОчищена);
	ПараметрыЗаписи.Вставить("Длительность", 0);
	ПараметрыЗаписи.Вставить("ОписаниеСобытия", СтрШаблон(
		НСтр("ru = 'История выбора сотрудника очищена пользователем %1'"), Пользователь));
	ПараметрыЗаписи.Вставить("ДополнительныеСведения", "");
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Удаляет протоколы старше определенной даты, сперва записывая их в mxl файл на диск.
Процедура ОбработкаПротоколаРаботыСотрудников() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбработкаПротоколаРаботыСотрудников, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНачала = ТекущаяДата();
	
	Пока ВыполнитьОбработкуПротоколаРаботыСотрудников(ДатаНачала) Цикл
	КонецЦикла;	

КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при изменении у объекта свойства Действителен.
Процедура ЗаписатьИзменениеДействительностиОбъекта(ОбъектДанных) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ИзменениеДействительностиОбъекта, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при изменении предмета бизнес-процесса.
Процедура ЗаписатьИзменениеПредметаБизнесПроцесса(ОбъектДанных, Предмет) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		Если ЗначениеЗаполнено(Предмет) Тогда
			ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Новый предмет: %1'"),
				Предмет); 
		Иначе
			ОписаниеСобытия = НСтр("ru = 'Предмет очищен'");
		КонецЕсли; 
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ИзменениеПредметаБизнесПроцесса, 0, ОписаниеСобытия, "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при изменении состава рабочей группы.
Процедура ЗаписатьИзменениеРабочейГруппы(ОбъектДанных, Описание) Экспорт

	Если ЗначениеЗаполнено(ОбъектДанных) Тогда

		ПараметрыЗаписи = 
			Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ИзменениеРабочейГруппыОбъекта, 0, "", Описание);

		Записать(ПараметрыЗаписи);

	КонецЕсли;

КонецПроцедуры

// Возвращает записи регистра сведений ПротоколРаботыСотрудников по заданному объекту 
// и параметрам отбора
// 
// Параметры:
//  ОбъектДанных - Ссылка - объект по которому производится выборка
//  ПараметрыОтбора - Структура - дополнительные параметры отбора 
//
// Возвращаемое значение:
//  ТаблицаЗначений - результат выборки регистра
//
Функция ВыбратьЗаписиПротоколаРаботыСотрудниковПоОбъекту(ОбъектДанных, ПараметрыОтбора = Неопределено) Экспорт

	Если НЕ ПротоколированиеРаботыСотрудниковПовтИсп.ПолучитьИспользоватьПротоколированиеРаботыСотрудников() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
		
	ПостроительЗапроса.Текст = 
		"ВЫБРАТЬ
		|	ПротоколРаботыСотрудников.Дата,
		|	ПротоколРаботыСотрудников.Сотрудник,
		|	ПротоколРаботыСотрудников.ТипСобытия
		|ИЗ
		|	РегистрСведений.ПротоколРаботыСотрудников КАК ПротоколРаботыСотрудников
		|ГДЕ
		|	ПротоколРаботыСотрудников.ОбъектДанных = &ОбъектДанных
		|{ГДЕ
		|	ПротоколРаботыСотрудников.Сотрудник.*,
		|	ПротоколРаботыСотрудников.ТипСобытия.*}";

	Если ТипЗнч(ПараметрыОтбора) = Тип("Структура") Тогда
		Сотрудник = Неопределено;	
		Если ПараметрыОтбора.Свойство("Сотрудник", Сотрудник) Тогда		
			НовыйПараметр = ПостроительЗапроса.Отбор.Добавить("Сотрудник");
			НовыйПараметр.Установить(Сотрудник);
		КонецЕсли;	
			
		ТипСобытия = Неопределено;
		Если ПараметрыОтбора.Свойство("ТипСобытия", ТипСобытия) Тогда
			НовыйПараметр = ПостроительЗапроса.Отбор.Добавить("ТипСобытия");
			НовыйПараметр.Установить(ТипСобытия);
		КонецЕсли;		
	КонецЕсли;
	
	ПостроительЗапроса.Параметры.Вставить("ОбъектДанных", ОбъектДанных);

	ПостроительЗапроса.Выполнить();
	
	Если ПостроительЗапроса.Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе	
		Возврат ПостроительЗапроса.Результат.Выгрузить();
	КонецЕсли;	
	
КонецФункции

// Возвращает информацию о том, кто и когда прервал бизнес процесс
//
// Возвращаемое значение:
//  Структура - Дата - дата прерывания процесса, Сотрудник - сотрудник прервавший процесс
//
Функция ИнформацияОПрерыванииПроцессаИзПротокола(БизнесПроцесс) Экспорт
	
	Результат = Неопределено;
	
	ПараметрыОтбора = Новый Структура(
		"ТипСобытия", 
		ПредопределенноеЗначение(
			"Перечисление.ТипыСобытийПротоколаРаботыСотрудников.ПрерываниеБизнесПроцесса"));
			
	ЗаписиПротокола = ВыбратьЗаписиПротоколаРаботыСотрудниковПоОбъекту(
		БизнесПроцесс, 
		ПараметрыОтбора);
	
	Если ЗаписиПротокола <> Неопределено Тогда
		Результат = Новый Структура("Дата, Сотрудник");
		ЗаполнитьЗначенияСвойств(Результат, ЗаписиПротокола[0]);		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Делает запись в регистр сведений ПротоколРаботыСотрудников 
// при удалении смене свойства ОбязательныйДляШифрования
// ОбъектДанных - справочник СертификатыКлючейЭлектроннойПодписиИШифрования
Процедура ЗаписатьСменуСвойстваСертификатаОбязательныйДляШифрования(ОбъектДанных) Экспорт
		
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда	
		
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, Перечисления.ТипыСобытийПротоколаРаботыСотрудников.СменаСвойстваСертификатаОбязательныйДляШифрования, 0, "", "");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

// Делает запись в регистр сведений ПротоколРаботыСотрудников при интерактивном изменении объекта.
Процедура ЗаписатьНастройкуРасширенияРабочихГрупп(ОбъектДанных, ОписаниеСобытия = "") Экспорт
	
	Если ЗначениеЗаполнено(ОбъектДанных) Тогда
	
		ПараметрыЗаписи = Новый Структура("ОбъектДанных, ТипСобытия, Длительность, ОписаниеСобытия, ДополнительныеСведения",
			ОбъектДанных, 
			Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ИзменениеНастройкиРасширенияРабочихГрупп, 
			0, 
			ОписаниеСобытия, 
			"");
		
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнит на сервере действия ПриНачалеРаботыСистемы
// 
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	ПротоколированиеРаботыСотрудников.ЗаписатьВходВСистему();
	ОбработкаОчередиЗаданийВызовСервера.ИзменитьНастройкуИспользоватьЗаданияЕслиНужно();
	
КонецПроцедуры

// Формирует протоколы работы сотрудников при записи объекта.
// В отслеживаемых реквизитах должна быть "ПометкаУдаления".
// 
// Параметры:
//  ОбъектДанных - СправочникОбъект.
// 
Процедура ПриЗаписиОбъектаДанных(ОбъектДанных) Экспорт
	
	ИзмениласьПометкаУдаления = ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
		ОбъектДанных,
		"ПометкаУдаления");
		
	Если ИзмениласьПометкаУдаления Тогда
		ЗаписатьПометкуУдаления(ОбъектДанных.Ссылка, ОбъектДанных.ПометкаУдаления);
	ИначеЕсли ОбъектДанных.ДополнительныеСвойства.ЭтоНовый Тогда
		ЗаписатьСоздание(ОбъектДанных.Ссылка, ОбъектДанных.ДополнительныеСвойства.ЭтоНовый);
	Иначе
		ЗаписатьИзменение(ОбъектДанных.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Удаляет протоколы старше определенной даты, сперва записывая их в mxl файл на диск. 
Функция ВыполнитьОбработкуПротоколаРаботыСотрудников(ДатаНачала)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокХраненияПротоколаРаботыСотрудников = Константы.СрокХраненияПротоколаРаботыСотрудников.Получить();
	Если СрокХраненияПротоколаРаботыСотрудников = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	КаталогСохраненияКопииПротоколаРаботы = "";
	
	ТипПлатформыСервера = ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера();
	
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		КаталогСохраненияКопииПротоколаРаботы = Константы.КаталогСохраненияКопииПротоколаРаботыСотрудниковWindows.Получить();
	Иначе	
		КаталогСохраненияКопииПротоколаРаботы = Константы.КаталогСохраненияКопииПротоколаРаботыСотрудниковLinux.Получить();
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(КаталогСохраненияКопииПротоколаРаботы) Тогда
		Возврат Ложь;
	КонецЕсли;	
	КаталогСохраненияКопииПротоколаРаботы = 
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
			КаталогСохраненияКопииПротоколаРаботы, ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера());
	
	ДатаОтсечения = ДатаНачала - СрокХраненияПротоколаРаботыСотрудников * 86400 * 30; // 86400 (сек в сутках) * 30(дней в месяце)
	
	Если НЕ ПротоколированиеРаботыСотрудниковПовтИсп.ПолучитьИспользоватьПротоколированиеРаботыСотрудников() Тогда
		ДатаОтсечения = ДатаНачала + 86400 * 30; // если функциональную опцию протоколирования выключили - очищаем ВСЕ записи - для этого ставим дату отсечения на месяц вперед от текущей
	КонецЕсли;	
	
	Запрос = Новый Запрос;

	Макет = РегистрыСведений.ПротоколРаботыСотрудников.ПолучитьМакет("Макет");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПротоколРаботыСотрудников.Дата КАК Дата,
		|	ПротоколРаботыСотрудников.Сотрудник КАК Пользователь,
		|	ПротоколРаботыСотрудников.Сотрудник КАК Сотрудник,
		|	ПротоколРаботыСотрудников.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ПротоколРаботыСотрудников.ОбъектДанных КАК ОбъектДанных,
		|	ПРЕДСТАВЛЕНИЕ(ПротоколРаботыСотрудников.ОбъектДанных) КАК ОбъектДанныхПредставление,
		|	ПротоколРаботыСотрудников.ТипСобытия КАК ТипСобытия,
		|	ПротоколРаботыСотрудников.ОписаниеСобытия КАК ОписаниеСобытия,
		|	ПротоколРаботыСотрудников.ДополнительныеСведения КАК ДополнительныеСведения,
		|	ПротоколРаботыСотрудников.Длительность КАК Длительность,
		|	ПротоколРаботыСотрудников.ИмяКомпьютера КАК ИмяКомпьютера
		|ИЗ
		|	РегистрСведений.ПротоколРаботыСотрудников КАК ПротоколРаботыСотрудников
		|ГДЕ
		|	ПротоколРаботыСотрудников.Дата <= &ДатаОтсечения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";

	Запрос.УстановитьПараметр("ДатаОтсечения", ДатаОтсечения);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;	

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ЗаписиДляУдаления = Новый Массив;
	ЧислоВыбранныхЗаписей = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
		
		СтруктураДляУдаления = Новый Структура("Дата, ОбъектДанных, Сотрудник, ТипСобытия",
			ВыборкаДетальныеЗаписи.Дата, ВыборкаДетальныеЗаписи.ОбъектДанных, 
			ВыборкаДетальныеЗаписи.Сотрудник, ВыборкаДетальныеЗаписи.ТипСобытия);
		ЗаписиДляУдаления.Добавить(СтруктураДляУдаления);
		
		ЧислоВыбранныхЗаписей = ЧислоВыбранныхЗаписей + 1;
		
		Если ЧислоВыбранныхЗаписей >= 50000 Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
	
	Если ЗаписиДляУдаления.Количество() > 0 Тогда
		ИмяФайла = "protocol_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd-HH-mm-ss"); // protocolDDMMYYYY.mxl
		ПутьФайлаMxl = КаталогСохраненияКопииПротоколаРаботы + ИмяФайла + ".mxl";
		ТабДок.Записать(ПутьФайлаMxl);
		
		ПутьФайлаZip = КаталогСохраненияКопииПротоколаРаботы + ИмяФайла + ".zip";
		
		// сжимаем в zip
		Архиватор = Новый ЗаписьZipФайла(ПутьФайлаZip, "", "");
		Архиватор.Добавить(ПутьФайлаMxl);
		Архиватор.Записать();
		
		// удаляем mxl
		УдалитьФайлы(ПутьФайлаMxl);
		
		// удаляем записи в регистре
		Для Каждого ЗаписьДляУдаления Из ЗаписиДляУдаления Цикл
			
			НаборЗаписей = РегистрыСведений.ПротоколРаботыСотрудников.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Дата.Установить(ЗаписьДляУдаления.Дата);
			НаборЗаписей.Отбор.ОбъектДанных.Установить(ЗаписьДляУдаления.ОбъектДанных);
			НаборЗаписей.Отбор.Сотрудник.Установить(ЗаписьДляУдаления.Сотрудник);
			НаборЗаписей.Отбор.ТипСобытия.Установить(ЗаписьДляУдаления.ТипСобытия);
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		ЗаписатьУдалениеЗаписейПротоколаРаботыСотрудников(ДатаОтсечения, ПутьФайлаZip);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти