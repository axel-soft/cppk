
#Область ПрограммныйИнтерфейс

// Инициирует создание действия из карточки документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка предмета.
//  ОбработчикОповещения - ОписаниеОповещения - обработчик, выполняемый после создания действия.
//  ПараметрыОбъектаОбработки - Структура - Параметры объекта обработки. См. ДействияКлиентСервер.НовыйПараметрыОбъектаОбработки().
//  ПараметрыВидаОбъекта - Структура - Параметры вида объекта. См. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта().
//
Процедура ДобавитьДействиеИзКарточкиПредмета(Форма, ОбработчикОповещения, ПараметрыОбъектаОбработки, ПараметрыВидаОбъекта) Экспорт
	
	// Нельзя добавлять, если обработка задана правилами или нет прав.
	Если ДействияКлиентСервер.ОбработкаЗаданаПравилами(ПараметрыВидаОбъекта) 
		Или Не Форма.Элементы.ДобавитьДействие.Доступность
		Или Не Форма.Элементы.ДобавитьДействие.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	// Сначала прочитаем все что есть
	Если Не Форма.ДействияПоказыватьВсе Тогда
		Форма.ДействияПоказыватьВсе = Не Форма.ДействияПоказыватьВсе;
		Форма.Элементы.ДействияПоказатьВсе.Пометка = Форма.ДействияПоказыватьВсе;
	
		Форма.ПрочитатьДействия();
	КонецЕсли;
		
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ОбработчикОповещения", ОбработчикОповещения);
	ПараметрыОповещения.Вставить("ПараметрыОбъектаОбработки", ПараметрыОбъектаОбработки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьДействиеИзКарточкиПредметаПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	Если Форма.Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = ОбщегоНазначенияДокументооборотКлиентСервер.ТекстВопросаНезаписанныхДанных(
			НСтр("ru = 'Добавление'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ДобавитьДействиеИзКарточкиПредмета
//
Процедура ДобавитьДействиеИзКарточкиПредметаПродолжение(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	Объект = Форма.Объект;
	ПараметрыОбъектаОбработки = Параметры.ПараметрыОбъектаОбработки;
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Форма.Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ОбработчикДобавления = Новый ОписаниеОповещения(
		"ДобавитьДействиеИзКарточкиПредметаЗавершение", 
		ЭтотОбъект, 
		Новый Структура("ОбработчикОповещения, Документ", 
		Параметры.ОбработчикОповещения, Объект.Ссылка));
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидОбъекта", ПараметрыОбъектаОбработки.ВидОбъекта);
	
	ТекущиеВидыДействий = Новый СписокЗначений();
	Для Каждого СтрДействия Из Форма.Действия.ПолучитьЭлементы() Цикл 
		ТекущиеВидыДействий.Добавить(СтрДействия.ВидДействия);
	КонецЦикла;
	
	Если ТекущиеВидыДействий.Количество() > 0 Тогда 
		ПараметрыФормы.Вставить("ТекущиеВидыДействий", ТекущиеВидыДействий);
	КонецЕсли;
	
	Открытьформу("Справочник.ВидыДействий.ФормаВыбора",
		ПараметрыФормы
		,,
		Новый УникальныйИдентификатор,,,
		ОбработчикДобавления,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение ДобавитьДействиеИзКарточкиПредмета
//
Процедура ДобавитьДействиеИзКарточкиПредметаЗавершение(Реузльтат, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Реузльтат) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Предмет", Параметры.Документ);
	ПараметрыФормы.Вставить("ВидДействия", Реузльтат.ВидДействия);
	ПараметрыФормы.Вставить("НастройкаОбработки", Реузльтат.НастройкаОбработки);
	ПараметрыФормы.Вставить("Настройка", Неопределено);
	ИмяФормы = ДействияВызовСервера.ИмяСправочникаПоВидуИДействию(Реузльтат.ВидДействия);
	
	Открытьформу("Справочник." + ИмяФормы +".ФормаОбъекта", 
		ПараметрыФормы,,
		Новый УникальныйИдентификатор,,,
		Параметры.ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// см. РаботаСБизнесПроцессамиКлиент.ПодобратьИсполнителейИсполнения
//
Процедура ЗавершитьПодборИсполнителейИсполнения(
	ВыбранныеИсполнители, ДопПараметры) Экспорт
	
	Если ВыбранныеИсполнители = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	РеквизитИсполнители = ДопПараметры.РеквизитИсполнители;
	КоличествоСтрок = РеквизитИсполнители.Количество();
	
	// Удаление пропавших строк из таблицы Исполнители.
	РеквизитыСрока =
		"ВариантУстановкиСрокаИсполнения, СрокИсполнения,
		|СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты";
	ДанныеСрокаПоследнейСтроки = Новый Структура(РеквизитыСрока);
	Для Инд = 1 По КоличествоСтрок Цикл
		
		Строка = РеквизитИсполнители[КоличествоСтрок - Инд];
		
		УдалитьИсполнителя = Истина;
		Для Каждого ВыбранныйИсполнитель Из ВыбранныеИсполнители Цикл
			Если Строка.Исполнитель = ВыбранныйИсполнитель Тогда
				УдалитьИсполнителя = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УдалитьИсполнителя Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСрокаПоследнейСтроки, Строка, РеквизитыСрока);
			РеквизитИсполнители.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если РеквизитИсполнители.Количество() <> 0 Тогда
		ДанныеСрокаПоследнейСтроки = Неопределено;
	КонецЕсли;
		
	// Обработка выбранных контактов
	Для Каждого ВыбранныйАдресат1 Из ВыбранныеИсполнители Цикл
		
		//Находим количество дублей для выбранного адресата.
		КоличествоВхождений = 0;
		Для Каждого ВыбранныйАдресат2 Из ВыбранныеИсполнители Цикл
			Если ВыбранныйАдресат1 = ВыбранныйАдресат2 Тогда
				
				КоличествоВхождений = КоличествоВхождений + 1;
			КонецЕсли;
		КонецЦикла;
		
		// Ищем выбранный контакт в таблице Исполнители
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Исполнитель", ВыбранныйАдресат1);
		НайденныеСтроки = РеквизитИсполнители.НайтиСтроки(СтруктураДляПоиска);
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		
		// Если выбранный контакт встречается в списке выбранных больше, чем
		// в таблице Исполнители, тогда добавляем недостающих конец списка.
		Если КоличествоВхождений > КоличествоНайденныхСтрок Тогда
			
			Пока КоличествоВхождений <> КоличествоНайденныхСтрок Цикл
				
				НоваяСтрокаИсполнитель = РеквизитИсполнители.Добавить();
				НоваяСтрокаИсполнитель.Исполнитель = ВыбранныйАдресат1;
				
				// Если удаляется последняя строка - то её срок переносится ко вновь добавленным строкам.
				Если ДанныеСрокаПоследнейСтроки <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнитель, ДанныеСрокаПоследнейСтроки, РеквизитыСрока);
				КонецЕсли;
				
				КоличествоНайденныхСтрок = КоличествоНайденныхСтрок + 1;
			КонецЦикла;
			
		// Если выбранный контакт встречается в списке выбранных меньше, чем
		// в таблице Исполнители, тогда удаляем лишние строки с конца списка.
		ИначеЕсли КоличествоВхождений < КоличествоНайденныхСтрок Тогда
			Пока КоличествоВхождений <> КоличествоНайденныхСтрок Цикл
				РеквизитИсполнители.Удалить(НайденныеСтроки[КоличествоНайденныхСтрок - 1]);
				КоличествоНайденныхСтрок = КоличествоНайденныхСтрок - 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Выполняет перемещение исполнителя вверх/вниз в таблице
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка процесса/шаблона
//  ЭлементИсполнители - ТаблицаФормы - элемент управления таблица.
//  РеквизитИсполнители - ДанныеФормыКоллекция - реквизит формы.
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения задач процесса.
//  Смещение - Число - значение на которое необходимо исполнителя (1 или -1).
//
Процедура ПереместитьИсполнителяПроцессаИсполнения(
	Форма, ЭлементИсполнители, РеквизитИсполнители, ВариантИсполнения, Смещение) Экспорт
	
	ТекущиеДанные = ЭлементИсполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = РеквизитИсполнители.Индекс(ТекущиеДанные) + 1;
	
	РеквизитИсполнители.Сдвинуть(НомерСтроки - 1, Смещение);
	
	Форма.Модифицированность = Истина;
		
КонецПроцедуры

// Разворачивает дерево действий
// 
// Параметры:
// 	ТаблицаФормы - ТаблицаФормы - элемент управления таблица.
// 	Действия - ДеревоЗначений - дерево действий.
//
Процедура РазвернутьДействия(ТаблицаФормы, Действия) Экспорт
	
	// рекурсивно проходим все элементы, и для каждого  - так же рекурсивно
	// - вычисляем "Разворачивать" (если ЕстьНевыполненные).

	Для Каждого СтрокаДействия Из Действия.ПолучитьЭлементы() Цикл
		РазвернутьДействие(ТаблицаФормы, СтрокаДействия);
	КонецЦикла;
	
КонецПроцедуры
	
// Инициирует выполнение действия из карточки документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка документа.
//  ОбработчикОповещения - ОписаниеОповещения - обработчик, выполняемый после выполнения действия.
//
Процедура ПоставитьДействиеНаКонтроль(Форма) Экспорт	
	Элементы = Форма.Элементы;
	
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Действие) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормы = "";
	ПараметрыФормы = "";
	Контроль.ОбработкаКомандыКонтроль(ТекущиеДанные.Действие, ИмяФормы, ПараметрыФормы);
	
	Если ИмяФормы = "Справочник.Контроль.Форма.ФормаНового" И ПараметрыФормы.Свойство("Основание") Тогда 
		ОткрытьФорму(ИмяФормы, 
			ПараметрыФормы,
			Форма,
			ПараметрыФормы.Основание);
	Иначе	
		ОткрытьФорму(ИмяФормы, 
			ПараметрыФормы,
			Форма);
	КонецЕсли;	
	
КонецПроцедуры

// Инициирует выполнение действия из карточки документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка документа.
//  ОбработчикОповещения - ОписаниеОповещения - обработчик, выполняемый после выполнения действия.
//
Процедура ВыполнитьДействиеИзКарточкиПредмета(Форма, ОбработчикОповещения) Экспорт
	
	Элементы = Форма.Элементы;
	
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоУчастник Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите участника, который выполняет действие.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Результат) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Участник уже выполнил выбранное действие.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Состояние) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Действие еще не исполняется.'"));
		Возврат;
	КонецЕсли;
	
	Если ДействияКлиентСервер.ДействиеЗавершено(ТекущиеДанные.Состояние) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Действие уже завершено.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоУчастник
		И ТипЗнч(ТекущиеДанные.Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
		Если ОткрытьФормуСогласования(Форма, ТекущиеДанные) Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(ТекущиеДанные.Действие) Тогда 
		
		Результат = ПредопределенноеЗначение("Перечисление.РезультатыОзнакомления.Ознакомлен");
		
		УчастникСтруктура = Новый Структура("Участник, ФункцияУчастника, ИдентификаторУчастника",
			ТекущиеДанные.Участник, ТекущиеДанные.Функция, ТекущиеДанные.Идентификатор);
		ДействияВызовСервера.ОтметитьРезультатВыполненияИЗаписатьФактическогоИсполнителя(ТекущиеДанные.Действие,
			УчастникСтруктура, Результат);
			
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Результат);
		
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикОповещения", ОбработчикОповещения);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("Действие", ТекущиеДанные.Действие);
	ПараметрыОбработчика.Вставить("Участник", ТекущиеДанные.Участник);
	ПараметрыОбработчика.Вставить("Функция", ТекущиеДанные.Функция);
	ПараметрыОбработчика.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
	
	ОбработчикВыполнения = Новый ОписаниеОповещения(
		"ВыполнитьДействиеИзКарточкиПредметаЗавершение", 
		ЭтотОбъект, 
		ПараметрыОбработчика);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", ТекущиеДанные.Действие);
	ПараметрыФормы.Вставить("Участник", ТекущиеДанные.Участник);
	ПараметрыФормы.Вставить("Функция", ТекущиеДанные.Функция);
	ПараметрыФормы.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ВыполнениеСтрокиДействия",
		ПараметрыФормы,
		,,,,
		ОбработчикВыполнения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение ВыполнитьДействиеИзКарточкиПредмета
//
Процедура ВыполнитьДействиеИзКарточкиПредметаЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УчастникСтруктура = Новый Структура("Участник, ФункцияУчастника, ИдентификаторУчастника",
		Параметры.Участник, Параметры.Функция, Параметры.Идентификатор);
	ДействияВызовСервера.ОтметитьРезультатВыполненияИЗаписатьФактическогоИсполнителя(Параметры.Действие,
		УчастникСтруктура, Результат.Результат, Результат.Комментарий);
		
	ВыполнитьОбработкуОповещения(Параметры.ОбработчикОповещения, Результат);
	
КонецПроцедуры

// Заполняет действия в форме документа
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - карточка документа.
// 	ПослеПомещенияВИсторию - Булево
//
Процедура ЗаполнитьДействия(Форма, ПослеПомещенияВИсторию = Ложь) Экспорт
	
	Форма.ЗаполнитьДействия(ПослеПомещенияВИсторию);
	РазвернутьДействия(Форма.Элементы.Действия, Форма.Действия);
		
КонецПроцедуры

// Заполняет доступность перемещения этапов и учатников в карточке действия согласования или подписания.
// 
// Параметры:
//  СтрокиДерева - ДанныеФормыДерево, ДанныеФормыКоллекцияЭлементовДерева - дерево этапов или участников.
//  ЗаполнениеВсегоДерева - Булево - Истина, если заполнять всё дерево.
// 
Процедура ЗаполнитьДоступностьПеремещенияЭтаповУчастников(СтрокиДерева, ЗаполнениеВсегоДерева = Ложь) Экспорт
	
	Если ЗаполнениеВсегоДерева И ТипЗнч(СтрокиДерева) = Тип("ДанныеФормыДерево") Тогда
		
		СтрокиЭтапы = СтрокиДерева.ПолучитьЭлементы();
		
		Для Каждого СтрокаЭтап Из СтрокиЭтапы Цикл
			
			Если СтрокаЭтап.Недоступно Тогда
				СтрокаЭтап.МожноПеремещатьВниз = Ложь;
				СтрокаЭтап.МожноПеремещатьВверх = Ложь;
				Продолжить;
			КонецЕсли;
			
			ИндексТекущейСтроки = СтрокиЭтапы.Индекс(СтрокаЭтап);
			Если ИндексТекущейСтроки = 0
				Или ЗначениеЗаполнено(СтрокаЭтап.Состояние)
				Или ЗначениеЗаполнено(СтрокиЭтапы[ИндексТекущейСтроки - 1].Состояние) Тогда
				
				СтрокаЭтап.МожноПеремещатьВверх = Ложь;
			Иначе
				СтрокаЭтап.МожноПеремещатьВверх = Истина;
			КонецЕсли;
			
			Если ИндексТекущейСтроки = СтрокиЭтапы.Количество() - 1
				Или ЗначениеЗаполнено(СтрокаЭтап.Состояние)
				Или ЗначениеЗаполнено(СтрокиЭтапы[ИндексТекущейСтроки + 1].Состояние)
				Или ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокиЭтапы[ИндексТекущейСтроки + 1].Функция) Тогда
				
				СтрокаЭтап.МожноПеремещатьВниз = Ложь;
			Иначе
				СтрокаЭтап.МожноПеремещатьВниз = Истина;
			КонецЕсли;
			
			СтрокиУчастники = СтрокаЭтап.ПолучитьЭлементы();
			
			Для Каждого СтрокаУчастник Из СтрокиУчастники Цикл
		
				ПорядокОдинЗаДругим = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЭтапаДействия.Последовательно");
				ИндексТекущейСтроки = СтрокиУчастники.Индекс(СтрокаУчастник);
				
				Если ИндексТекущейСтроки = 0
					Или ЗначениеЗаполнено(СтрокаУчастник.Состояние)
					Или СтрокаЭтап.Порядок = ПорядокОдинЗаДругим
					И ЗначениеЗаполнено(СтрокиУчастники[ИндексТекущейСтроки - 1].Состояние) Тогда
					
					СтрокаУчастник.МожноПеремещатьВверх = Ложь;
				Иначе
					СтрокаУчастник.МожноПеремещатьВверх = Истина;
				КонецЕсли;
				
				Если ИндексТекущейСтроки = СтрокиУчастники.Количество() - 1
					Или ЗначениеЗаполнено(СтрокаУчастник.Состояние)
					Или СтрокаЭтап.Порядок = ПорядокОдинЗаДругим 
					И ЗначениеЗаполнено(СтрокиУчастники[ИндексТекущейСтроки + 1].Состояние) Тогда
						
					СтрокаУчастник.МожноПеремещатьВниз = Ложь;
				Иначе
					СтрокаУчастник.МожноПеремещатьВниз = Истина;
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЦикла;
		
	Иначе
		
		Если СтрокиДерева.Количество() > 0 Тогда
			Если СтрокиДерева[0].ЭтоЭтап Тогда
				
				Для Индекс = 0 По СтрокиДерева.Количество() - 1 Цикл
					
					Если СтрокиДерева[Индекс].Недоступно Тогда
						СтрокиДерева[Индекс].МожноПеремещатьВниз = Ложь;
						СтрокиДерева[Индекс].МожноПеремещатьВверх = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если Индекс = 0
						Или ЗначениеЗаполнено(СтрокиДерева[Индекс].Состояние)
						Или ЗначениеЗаполнено(СтрокиДерева[Индекс - 1].Состояние) Тогда
						
						СтрокиДерева[Индекс].МожноПеремещатьВверх = Ложь;
					Иначе
						СтрокиДерева[Индекс].МожноПеремещатьВверх = Истина;
					КонецЕсли;
					
					Если Индекс = СтрокиДерева.Количество() - 1
						Или ЗначениеЗаполнено(СтрокиДерева[Индекс].Состояние)
						Или ЗначениеЗаполнено(СтрокиДерева[Индекс + 1].Состояние)
						Или ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокиДерева[Индекс + 1].Функция) Тогда
						
						СтрокиДерева[Индекс].МожноПеремещатьВниз = Ложь;
					Иначе
						СтрокиДерева[Индекс].МожноПеремещатьВниз = Истина;
					КонецЕсли;
				
				КонецЦикла;
			
			Иначе
				
				Этап = СтрокиДерева[0].ПолучитьРодителя();
				ПорядокОдинЗаДругим = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЭтапаДействия.Последовательно");
				
				Для Индекс = 0 По СтрокиДерева.Количество() - 1 Цикл
			
					Если Индекс = 0
						Или ЗначениеЗаполнено(СтрокиДерева[Индекс].Состояние)
						Или Этап.Порядок = ПорядокОдинЗаДругим
						И ЗначениеЗаполнено(СтрокиДерева[Индекс - 1].Состояние) Тогда
						
						СтрокиДерева[Индекс].МожноПеремещатьВверх = Ложь;
					Иначе
						СтрокиДерева[Индекс].МожноПеремещатьВверх = Истина;
					КонецЕсли;
					
					Если Индекс = СтрокиДерева.Количество() - 1
						Или ЗначениеЗаполнено(СтрокиДерева[Индекс].Состояние)
						Или Этап.Порядок = ПорядокОдинЗаДругим 
						И ЗначениеЗаполнено(СтрокиДерева[Индекс + 1].Состояние) Тогда
						
						СтрокиДерева[Индекс].МожноПеремещатьВниз = Ложь;
					Иначе
						СтрокиДерева[Индекс].МожноПеремещатьВниз = Истина;
					КонецЕсли;
				
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Открывает действие для изменения.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - ссылка на действие.
//  РежимДиалога - Булево - вариант открытия формы из задачи изменения процесса.
//  ОписаниеОповещения - ОписаниеОповещения - обработчик, выполняемый после выполнения действия.
//
Процедура ИзменитьДействие(Действие, РежимДиалога, ОписаниеОповещения) Экспорт
	
	ИмяФормы = ИмяФормыОбъектаДействия(Действие);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Действие);
	ПараметрыФормы.Вставить("ОткрытьКарточкуДействия", Истина);
	ПараметрыФормы.Вставить("РежимДиалога", РежимДиалога);
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

// Открывает карточку подчиненного действия для изменения.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения.
//  ИдентификаторВыщестоящего - УникальныйИдентификатор.
//  РежимДиалога - Булево.
//  ОбработчикИзменения - Неопределено.
//
Процедура ИзменитьПодчиненноеИсполнение(Действие, ИдентификаторВыщестоящего,
	РежимДиалога = Ложь, ОбработчикИзменения = Неопределено) Экспорт
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Действие", Действие);
		ПараметрыФормы.Вставить("ВышестоящийУчастник", ИдентификаторВыщестоящего);
		ПараметрыФормы.Вставить("РежимДиалога", РежимДиалога);
		
		ОткрытьФорму("Справочник.ДействияИсполнения.Форма.НастройкаДочернегоИсполнения",
			ПараметрыФормы,,,,,
			ОбработчикИзменения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает карточку пункта действия для изменения.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения.
//  ИдентификаторПункта - УникальныйИдентификатор.
//  РежимДиалога - Булево.
//  ОбработчикИзменения - Неопределено.
//
Процедура ИзменитьПунктИсполнения(Действие, ИдентификаторПункта,
	РежимДиалога = Ложь, ОбработчикИзменения = Неопределено) Экспорт
	
	ПунктИсполнения = ДействияВызовСервера.ПунктИсполнения(Действие, ИдентификаторПункта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭтоВводПункта", Истина);
	ПараметрыФормы.Вставить("РежимДиалога", РежимДиалога);
	ПараметрыФормы.Вставить("Действие", Действие);
	ПараметрыФормы.Вставить("ИдентификаторПункта", ИдентификаторПункта);
	ПараметрыФормы.Вставить("Номер", ПунктИсполнения.Номер);
	ПараметрыФормы.Вставить("Описание", ПунктИсполнения.Описание);
	ПараметрыФормы.Вставить("Срок", ПунктИсполнения.Срок);
	ПараметрыФормы.Вставить("Контролер", ПунктИсполнения.Контролер);
	ПараметрыФормы.Вставить("АвторИсполнения", ПунктИсполнения.Автор);
	
	ИсполнителиИсполнения = Новый Массив;
	
	ПоляСтрокиИсполнителя = 
		"Исполнитель,
		|ИдентификаторИсполнителя,
		|Ответственный,
		|СрокИсполнения,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты,
		|ВариантУстановкиСрокаИсполнения,
		|Функция";
	
	Для Каждого УчастникПункта Из ПунктИсполнения.УчастникиПункта Цикл
		ПараметрыУчастника = Новый Структура(ПоляСтрокиИсполнителя);
		ПараметрыУчастника.Исполнитель = УчастникПункта.Участник;
		ПараметрыУчастника.ИдентификаторИсполнителя = УчастникПункта.Идентификатор;
		ПараметрыУчастника.Ответственный = УчастникПункта.Ответственный;
		ПараметрыУчастника.СрокИсполнения = УчастникПункта.Срок;
		ПараметрыУчастника.СрокИсполненияДни = УчастникПункта.СрокДни;
		ПараметрыУчастника.СрокИсполненияЧасы = УчастникПункта.СрокЧасы;
		ПараметрыУчастника.СрокИсполненияМинуты = УчастникПункта.СрокМинуты;
		ПараметрыУчастника.ВариантУстановкиСрокаИсполнения = УчастникПункта.ВариантУстановкиСрока;
		ПараметрыУчастника.Функция = УчастникПункта.Функция;
		ИсполнителиИсполнения.Добавить(ПараметрыУчастника);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ИсполнителиИсполнения", ИсполнителиИсполнения);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Действие", Действие);
	ДопПараметры.Вставить("ИдентификаторПункта", ИдентификаторПункта);
	ДопПараметры.Вставить("ОбработчикИзменения", ОбработчикИзменения);
	
	ОбработчикИзмененияПункта = Новый ОписаниеОповещения(
		"ЗавершитьИзменениеПункта", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.ДействияИсполнения.Форма.НастройкаДочернегоИсполнения",
		ПараметрыФормы,,,,,
		ОбработчикИзмененияПункта,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершение ИзменитьПунктИсполнения.
//
Процедура ЗавершитьИзменениеПункта(ДанныеПункта, ДопПараметры) Экспорт
	
	Если ТипЗнч(ДанныеПункта) <> Тип("Структура") И ДанныеПункта <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Действие = ДопПараметры.Действие;
	ИдентификаторПункта = ДопПараметры.ИдентификаторПункта;
	ОбработчикИзменения = ДопПараметры.ОбработчикИзменения;
	
	Если ТипЗнч(ДанныеПункта) = Тип("Структура") Тогда
	
		ПунктИсполнения = ДействияКлиентСервер.СтруктураПунктаИсполнения();
		ПунктИсполнения.Номер = ДанныеПункта.Номер;
		ПунктИсполнения.Описание = ДанныеПункта.ОписаниеИсполнения;
		ПунктИсполнения.Срок = ДанныеПункта.Срок;
		ПунктИсполнения.Контролер = ДанныеПункта.Контролер;
		ПунктИсполнения.Автор = ДанныеПункта.АвторИсполнения;
		
		Для Каждого СтрокаИсполнителя Из ДанныеПункта.ИсполнителиИсполнения Цикл
			ДанныеУчастника = ДействияКлиентСервер.ПараметраУчастникаПунктаИсполнения();
			ЗаполнитьЗначенияСвойств(ДанныеУчастника, СтрокаИсполнителя);
			ПунктИсполнения.УчастникиПункта.Добавить(ДанныеУчастника);
		КонецЦикла;
		
		ДействияВызовСервера.ОбновитьПунктИсполнения(Действие, ИдентификаторПункта, ПунктИсполнения);
		
	КонецЕсли;
	
	Если ОбработчикИзменения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработчикИзменения, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действие - либо задачу процесса, либо просто строку действия
//
// Параметры:
// 	Действие - ОпределяемыйТип.Действия - ссылка на действия
// 	УчастникСтруктура - Структура("Участник, ФункцияУчастника, ИдентификаторУчастника")
//	ПараметрыВыполнения - ПеречислениеСсылка.ФункцииУчастниковСогласования
//	Предмет - документ-предмет
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ВыполнитьДействиеИзФормыСогласованияВРежимеЗамечаний(
	Действие, УчастникСтруктура, ПараметрыВыполнения, Предмет, 
	ФормаВладелец) Экспорт
	
	Если РаботаСПроцессамиПоОбработкамОбъектовКлиентПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		
		Задача = РаботаСПроцессамиПоДействиямКлиент.ЗадачаПроцессаПоУчастникуДействия(
			Действие, Строка(УчастникСтруктура.ИдентификаторУчастника));
			
		Если ЗначениеЗаполнено(Задача) Тогда
				
			Описание = ДействияВызовСервера.ДействиеИРеквизитыЗадачи(Задача);
			ДействиеЗадачиПоИсточнику = Описание.Действие;
			Выполнена = Описание.Выполнена;
			Если Выполнена Тогда
				ВызватьИсключение НСтр("ru = 'Задача уже выполнена.'");
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
				
				МассивДействий = Новый Массив;
				МассивДействий.Добавить(ДействиеЗадачиПоИсточнику);
				
				РезультатДействия = Неопределено;
				
				Если ПараметрыВыполнения.Свойство("РезультатСогласования") И 
					ПараметрыВыполнения.РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано") Тогда
					
					РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.Согласовано");
					
				ИначеЕсли ПараметрыВыполнения.Свойство("РезультатСогласования") И 
					ПараметрыВыполнения.РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано") Тогда
					
					РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.НеСогласовано");
					
				КонецЕсли;	
				
				Если ПараметрыВыполнения.Свойство("ПовторитьСогласование") И 
					ПараметрыВыполнения.ПовторитьСогласование = Истина Тогда
					
					РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.ОтправленоПовторно");
					
				ИначеЕсли ПараметрыВыполнения.Свойство("ПовторитьСогласование") И 
					ПараметрыВыполнения.ПовторитьСогласование = Ложь Тогда
					
					РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.Завершил");
					
				КонецЕсли;	
				
				РаботаСЗадачамиКлиент.ВыполнитьДействиеЗадачи(
					МассивДействий, РезультатДействия, ФормаВладелец);
				
			КонецЕсли;	
			
		КонецЕсли;
		
	Иначе	
		
		РезультатСогласования = Неопределено;
		ПараметрыВыполнения.Свойство("РезультатСогласования", РезультатСогласования);
		
		ПараметрыВыполненияСтруктура = ДействияКлиентСервер.СтруктураОтметитьРезультатВыполнения();     
		
		ДействияВызовСервера.ОтметитьРезультатВыполнения(
			Действие,
			УчастникСтруктура, 
			РезультатСогласования,
			ПараметрыВыполненияСтруктура);
			
		Оповестить("ОбновитьДействияВПредмете", 
			Новый Структура("Предмет, Действие", Предмет, Действие));
			
	КонецЕсли;	
	
КонецПроцедуры	

// Принимает действие по задаче в работу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - карточка документа.
// 	Действие - ОпределяемыйТип.Действия - ссылка на действие.
// 	УчастникСтруктура - Структура("Участник, ФункцияУчастника, ИдентификаторУчастника").
// 	ДействиеЗадачи  -ДокументССылка.ДействиеЗадачи.
//
Процедура ПринятьКИсполнению(Форма, Действие, УчастникСтруктура, ДействиеЗадачи) Экспорт
	
	Если РаботаСПроцессамиПоОбработкамОбъектовКлиентПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		
		Задача = РаботаСПроцессамиПоДействиямКлиент.ЗадачаПроцессаПоУчастникуДействия(
			Действие, Строка(УчастникСтруктура.ИдентификаторУчастника));
			
		Если ЗначениеЗаполнено(Задача) Тогда
			
			ДействиеЗадачиТек = ДействияВызовСервера.ДействиеЗадачиПоДействиюИИдентификатору(
				Действие, УчастникСтруктура.ИдентификаторУчастника);
				
			Если ЗначениеЗаполнено(ДействиеЗадачиТек) Тогда
				РаботаСЗадачамиКлиент.ВзятьВРаботу(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачиТек),
					Форма);
			КонецЕсли;	
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;		

	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		РаботаСЗадачамиКлиент.ВзятьВРаботу(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи),
			Форма);
	КонецЕсли;	

КонецПроцедуры	

// Обработчик команды Защищенный в формах настроек действий и самих действий.
// Устанавливает/снимает отметку защищенности в форме для выделенного участника или этапа
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма настройки действия или действия
//
Процедура Защищенный(Форма) Экспорт
	
	ПредупреждатьПриЗащитеУчастника = 
		СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ПредупреждатьПриЗащитеУчастника;
	ПоказыватьПредупреждение = Ложь;
	ОбщаяЗащищенность = Неопределено;
	
	Для Каждого ИндексСтроки Из Форма.Элементы.Участники.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Форма.Участники.НайтиПоИдентификатору(ИндексСтроки);
		
		Если ДействияКлиентСервер.ЭтоДействие(Форма.Объект.Ссылка)
			И Не ДоступноИзменениеЗащищенностиУчастника(ТекущиеДанные, Форма.МожноИзменятьЗащищенныхУчастников)
			Или НастройкиДействийКлиентСервер.ЭтоНастройкаДействия(Форма.Объект.Ссылка)
			И (ТекущиеДанные.ЭтоЭтап
				Или Не ЗначениеЗаполнено(ТекущиеДанные.Участник)) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущиеДанные.Защищенный = Не ТекущиеДанные.Защищенный;
		
		Если ОбщаяЗащищенность = Неопределено Тогда
			ОбщаяЗащищенность = ТекущиеДанные.Защищенный;
		КонецЕсли;
		ОбщаяЗащищенность = ОбщаяЗащищенность И ТекущиеДанные.Защищенный;
		
		ПоказыватьПредупреждение = ПоказыватьПредупреждение Или
			 ТекущиеДанные.Защищенный И ПредупреждатьПриЗащитеУчастника;
		
	КонецЦикла;
	
	Если ПоказыватьПредупреждение Тогда
		
		ПараметрыПредупреждения = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыПредупреждения.Заголовок = НСтр("ru = 'Защита участника от удаления'");
		ПараметрыПредупреждения.Картинка = БиблиотекаКартинок.Информация32;
		ПараметрыПредупреждения.Вставить("ТекстФлажка", НСтр("ru = 'Больше не показывать'"));
		
		ТекстСообщения = 
			НСтр("ru = 'Защищенного участника действий нельзя удалить ни автоматически, ни вручную.'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПредупрежденияОЗащищенностиУчастников",
			ЭтотОбъект);
		
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОповещения, ТекстСообщения,
			РежимДиалогаВопрос.ОК, ПараметрыПредупреждения);
		
	КонецЕсли;
	
	Форма.Элементы.Защищенный.Пометка = ?(ОбщаяЗащищенность <> Неопределено, ОбщаяЗащищенность, Ложь);
	Форма.УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

// Обработчик команды Установить ответственного в формах настроек и действия исполнения.
// Устанавливает/снимает отметку Ответственный для выделенного участника действия исполнения
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма настройки действия исполнения или действия исполнения
//
Процедура УстановитьОтветственногоИсполнителя(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	Если ТекущиеДанные.Функция <> ПредопределенноеЗначение(
		"Перечисление.ФункцииУчастниковИсполнения.Исполнитель") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Ответственный = Не ТекущиеДанные.Ответственный;
	ИДПункта = ТекущиеДанные.ИдентификаторПункта;
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	Для Каждого Этап Из Форма.Участники.ПолучитьЭлементы() Цикл
		Если ИДПункта <> Этап.ИдентификаторПункта Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого УчастникЭтапа Из Этап.ПолучитьЭлементы() Цикл
			Если УчастникЭтапа.ПолучитьИдентификатор() = ИдентификаторТекущейСтроки Тогда
				Продолжить;
			КонецЕсли;
			УчастникЭтапа.Ответственный = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	Если ТекущиеДанные.Ответственный Тогда
		ЭтапУчастника = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		ИндексСтроки = ЭтапУчастника.Индекс(ТекущиеДанные);
		Если ИндексСтроки Тогда
			ЭтапУчастника.Сдвинуть(ИндексСтроки, - ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.УстановитьОтветственный.Пометка = ТекущиеДанные.Ответственный;
	Форма.Модифицированность = Истина;
		
КонецПроцедуры

// Снимает отметку Ответственный для участника действия исполнения, если он остается один
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма настройки действия исполнения или действия исполнения
//
Процедура УбратьОтветственногоУчастника(Форма) Экспорт
	
	Для Каждого СтрокаЭтапа Из Форма.Участники.ПолучитьЭлементы() Цикл
		Если СтрокаЭтапа.Функция <> 
			ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель")   Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементыУчастников = СтрокаЭтапа.ПолучитьЭлементы();
		КоличествоЭлементов = ЭлементыУчастников.Количество();
		Если КоличествоЭлементов > 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаУчастника Из ЭлементыУчастников Цикл
			Если СтрокаУчастника.Ответственный Тогда
				СтрокаУчастника.Ответственный = Ложь;
				Форма.Модифицированность = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик выбора подписанта для задачи обеспечить подписание.
// 
// Параметры:
//  Подписывающие - Массив - подписанты и заместители.
//  Предмет - ОпределяемыйТип.ПредметДействия.
//  Оповещение - ОписаниеОповещения - обработчик выбора.
//  ОднаЗадача - Булево - признак выполнения одной задачи.
//
Процедура ВыбратьПодписывающегоДляПодписания(Знач Подписывающие, Знач Предмет, Знач Оповещение, Знач ОднаЗадача) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Подписывающие", Подписывающие);
	Параметры.Вставить("ОднаЗадача", ОднаЗадача);
	Параметры.Вставить("Предмет", Предмет);
	
	Если Оповещение.ДополнительныеПараметры.Свойство("РезультатДействия")
		И Оповещение.ДополнительныеПараметры.РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.НеПодписано") Тогда
		Параметры.Вставить("РезультатДействияОтрицательный", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ДействияПодписания.Форма.ФормаВыбораПодписывающего",
		Параметры, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Можно ли подписать КЭП.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма настройки действия исполнения или действия исполнения
// 
// Возвращаемое значение:
//  
Функция МожноЛиПодписатьКЭП(Форма) Экспорт
	
	Если Форма.СостояниеОбработки <> ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется") Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ДействияСогласования = Новый Массив;
	Для Каждого СтрДействия Из Форма.Действия.ПолучитьЭлементы() Цикл 
		
		Если ДействияКлиентСервер.ЭтоДействиеСогласования(СтрДействия.Действие) Тогда
			ДействияСогласования.Добавить(СтрДействия.Действие);
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ДействияСогласования.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ЗначенияПоля = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъектов(ДействияСогласования, "СогласованиеВРежимеЗамечаний");
	
	Для Каждого КлючИЗначение Из ЗначенияПоля Цикл
		
		Если КлючИЗначение.Значение = Истина Тогда // в режиме замечаний
		
			Возврат Ложь;
		
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

// Выделяет Дату и Номер
// 
// Параметры:
//  Текст - Строка
//  ДатаПункта - Дата
//  Номер - Строка
// 
Процедура ВыделитьЭлементыПункта(Текст, ДатаПункта, Номер) Экспорт
	
	Текст = СокрЛП(Текст);
	
	ДатаПункта = РаботаСАнализомТекстаКлиент.НайтиДату(Текст, ОбщегоНазначенияКлиент.ДатаСеанса());
	Если ДатаПункта <> Неопределено И ДатаПункта < ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
		ДатаПункта = Неопределено;
	ИначеЕсли ДатаПункта <> Неопределено Тогда
		ДатаПункта = КонецДня(ДатаПункта);
	КонецЕсли;
	
	Номер = ПолучитьНомер(Текст);
	
	Если ЗначениеЗаполнено(Номер) И СтрНайти(Текст, Номер) = 1 Тогда
		ДлинаНомера = СтрДлина(Номер);
		Текст = Сред(Текст, ДлинаНомера + 1);
	КонецЕсли;	
	
	ДлинаНомера = СтрДлина(Номер);
	Если ДлинаНомера > 1 И Сред(Номер, ДлинаНомера, 1) = "." Тогда
		Номер = Лев(Номер, ДлинаНомера - 1);
	КонецЕсли;	
	
	Текст = СокрЛП(Текст);
	
КонецПроцедуры	

// Получает текст из файла, используя Word или OpenOffice
// 
// Параметры:
//  ДанныеФайла - Структура
//  СпособСогласованияВРежимеЗамечаний - ПеречислениеСсылка.СпособыСогласованияВРежимеЗамечаний
// 
// Возвращаемое значение:
//  Строка
Функция ПолучитьТекст(ДанныеФайла, СпособСогласованияВРежимеЗамечаний) Экспорт
	
	#Если НЕ ВебКлиент И Не МобильныйКлиент Тогда
		
	Состояние(НСтр("ru = 'Выполняется получение текста из файла...'"));	
		
	ПолныйПутьФайлаTXT = ПолучитьИмяВременногоФайла("txt");
	ПолныйПутьФайла = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение);
	
	ИмяФайла = ДанныеФайла.ПолноеНаименованиеВерсии;
	АдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	
	ТекстПояснения =
	СтрШаблон(НСтр("ru = 'Выполняется получение с сервера файла ""%1"".
		|Пожалуйста, подождите...'"), ИмяФайла);
	Состояние(ТекстПояснения);
		
	Если СпособСогласованияВРежимеЗамечаний 
		= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") Тогда
	
		Попытка
			WordApp = Новый COMОбъект("Word.Application");
		Исключение
			
			Возврат ""; // не установлен Word
			
		КонецПопытки;	 
		
		WordApp.WordBasic.DisableAutoMacros(1);

		Если Не ПолучитьФайл(АдресФайла, ПолныйПутьФайла, Ложь) Тогда
			
			WordApp.Quit();
			WordApp = Неопределено;
			
			Возврат "";
		КонецЕсли;	
		
		ТекстПояснения =
		СтрШаблон(НСтр("ru = 'Выполняется сохранение файла ""%1"" в TXT.
			|Пожалуйста, подождите...'"), ИмяФайла);
		Состояние(ТекстПояснения);
		
		Документ1 = WordApp.Documents.Open(ПолныйПутьФайла);
		
		WordApp.Visible = 1;
		WordApp.Activate(); 	
		
		// wdFormatText  2
		Документ1.SaveAs(ПолныйПутьФайлаTXT, 2);
		Документ1.Close(); 
		
		WordApp.Quit();
		WordApp = Неопределено;
		
		ЧтениеТекста = Новый ЧтениеТекста(ПолныйПутьФайлаTXT);
		ИзвлеченныйТекст = ЧтениеТекста.Прочитать();
		
		Возврат ИзвлеченныйТекст;
		
	ИначеЕсли СпособСогласованияВРежимеЗамечаний 
		= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter") Тогда
		
		Попытка 
			ОбъектServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
		Исключение
			
			Возврат ""; // не установлен OpenOffice
			
		КонецПопытки;	
	
		ИнстансDesktop = ОбъектServiceManager.createInstance("com.sun.star.frame.Desktop");

		// Параметры открытия: отключение исполнения макросов.
		ПараметрыДокумента = Новый COMSafeArray("VT_VARIANT", 1);
		
		РежимЗапуска = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
			"MacroExecutionMode",
			0); // const short NEVER_EXECUTE = 0
		ПараметрыДокумента.SetValue(0, РежимЗапуска);
		
		Если Не ПолучитьФайл(АдресФайла, ПолныйПутьФайла, Ложь) Тогда
			
		    ИнстансDesktop     = Неопределено;	
		    ОбъектServiceManager = Неопределено;
			
			Возврат "";
		КонецЕсли;	
		
		// Открыть документ OpenOffice.
		Документ1 = ИнстансDesktop.loadComponentFromURL(ПреобразоватьВURL(ПолныйПутьФайла), 
			"_blank", 0, ПараметрыДокумента);
		
		
		ПараметрыСохранения = Новый COMSafeArray("VT_VARIANT", 1);

		FilterName = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
			"FilterName",
			"Text");
		ПараметрыСохранения.SetValue(0, FilterName);
		
		Документ1.storeToURL(ПреобразоватьВURL(ПолныйПутьФайлаTXT), ПараметрыСохранения);
		
		Документ1.close(-1);        //Закрыть документ без сохранения
		
	 	Документ1     = Неопределено;
	    ИнстансDesktop     = Неопределено;	
	    ОбъектServiceManager = Неопределено;
		
		ЧтениеТекста = Новый ЧтениеТекста(ПолныйПутьФайлаTXT);
		ИзвлеченныйТекст = ЧтениеТекста.Прочитать();
		
		Возврат ИзвлеченныйТекст;
		
	ИначеЕсли СпособСогласованияВРежимеЗамечаний 
		= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.Р7Builder") Тогда
		
		Попытка
			// Создание COM-объекта 
			Builder = Новый COMОбъект("R7.Builder");
		Исключение
		
			Возврат ""; // не установлен R7.Builder
			
		КонецПопытки;	
		
		Если Не ПолучитьФайл(АдресФайла, ПолныйПутьФайла, Ложь) Тогда
			
			Builder = Неопределено;
			Возврат "";
			
		КонецЕсли;	
		
		ТекстПояснения =
		СтрШаблон(НСтр("ru = 'Выполняется сохранение файла ""%1"" в TXT.
			|Пожалуйста, подождите...'"), ИмяФайла);
		Состояние(ТекстПояснения);
		
		Builder.Initialize();

		Builder.OpenFile(ПолныйПутьФайла, "");       

		// сохранение - не нужен контекст. контекст - только ля редактирования
		Builder.SaveFile("txt", ПолныйПутьФайлаTXT);
		
		Builder.CloseFile();
		Builder = Неопределено;
		
		ЧтениеТекста = Новый ЧтениеТекста(ПолныйПутьФайлаTXT);
		ИзвлеченныйТекст = ЧтениеТекста.Прочитать();
		
		Возврат ИзвлеченныйТекст;
		
	КонецЕсли;	
	
	#КонецЕсли
	
	Возврат "";
	
КонецФункции	

#Область ОбработчикиСобытийФормыВидаДокумента

// Добавляет виды действия в список Действий вида документа
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	МассивДействий - Массив - добавляемые виды действий.
//
Процедура ДобавитьВидДействияВСписок(Форма, МассивДействий) Экспорт 
	
	СтрокиПериодДействий = Форма.ВидыДействий.ПолучитьЭлементы();
	
	Если СтрокиПериодДействий.Количество() = 0 Тогда 
		СтрокаПериодДействий = СтрокиПериодДействий.Добавить();
		СтрокаПериодДействий.ДействуетС = ТекущаяДата();
		СтрокаПериодДействий.ЭтоРодитель = Истина;
		СтрокаПериодДействий.Представление = ДействияКлиентСервер.ПредставлениеПериодаДействияОбработки(
			СтрокаПериодДействий.ДействуетС, СтрокаПериодДействий.ДействуетПо);
		СтрокаПериодДействий.Схема = НСтр("ru = 'Стандартная'");
	Иначе
		ТекущиеДанныеДерева = Форма.Элементы.ВидыДействий.ТекущиеДанные;
		Если ТекущиеДанныеДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекстНаличияОбработки = ИсключениеЕслиПоНастройкеЕстьОбработка(ТекущиеДанныеДерева);
	
		Если ЗначениеЗаполнено(ТекстНаличияОбработки) Тогда
			ПоказатьПредупреждение(, ТекстНаличияОбработки); 
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанныеДерева.ЭтоРодитель Тогда 
			СтрокаПериодДействий = ТекущиеДанныеДерева;
		Иначе 
			ТекущиеДанныеРодитель = ТекущиеДанныеДерева.ПолучитьРодителя();
			Если ТекущиеДанныеРодитель = Неопределено Тогда
				Возврат;
			Иначе 
				СтрокаПериодДействий = ТекущиеДанныеРодитель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ВидДействия Из МассивДействий Цикл
		СтрокаВидДействия = СтрокаПериодДействий.ПолучитьЭлементы().Добавить();
		
		СтрокаВидДействия.ВидДействия = ВидДействия;
		СтрокаВидДействия.ДействуетС = СтрокаПериодДействий.ДействуетС;
		СтрокаВидДействия.ДействуетПо = СтрокаПериодДействий.ДействуетПо;
		СтрокаВидДействия.Представление = Символы.Таб + Строка(ВидДействия);
	КонецЦикла;
	
	УстановитьПараметрыСпискаВсеВидыДействий(Форма, СтрокаПериодДействий);
	ДействияКлиентСервер.ОбновитьНумерациюОбработки(Форма.ВидыДействий, Форма.КоличествоДействий);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Удаляет виды действия из списка Действий вида документа
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	ТекущиеДанные - ДанныеФормыСтруктура  - структура для моделирования данных, редактируемых в форме.
//
Процедура УдалитьВидДействияИзСписка(Форма, ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные.ЭтоРодитель Тогда 
		СтрокаРодитель = ТекущиеДанные;
		Оповещение = Новый ОписаниеОповещения("УдалитьНастройкуОбработкиПродолжение",
			ЭтотОбъект, Новый Структура("Форма, ТекущиеДанные", Форма, ТекущиеДанные));
		ПоказатьВопрос(Оповещение,
			НСтр("ru = 'Удалить настройку обработки?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе 
		ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		Иначе 
			СтрокаРодитель = ТекущиеДанныеРодитель;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаВидовДействий = СтрокаРодитель.ПолучитьЭлементы();
	СтрокаВидовДействий.Удалить(ТекущиеДанные);
	
	УстановитьПараметрыСпискаВсеВидыДействий(Форма, СтрокаРодитель);
	ДействияКлиентСервер.ОбновитьНумерациюОбработки(Форма.ВидыДействий, Форма.КоличествоДействий);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура УдалитьНастройкуОбработкиПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	ТекущиеДанные = Параметры.ТекущиеДанные;
	Элементы = Форма.ВидыДействий.ПолучитьЭлементы();
	Элементы.Удалить(ТекущиеДанные);
	Форма.Записать();
	Если Элементы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.ВсеВидыДействий, "ВыбранныеВидыДействий", Новый СписокЗначений, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст исключения при попытке редактирования, если по настройке есть обработка.
// 
// Параметры:
// 	ТекущиеДанные - ДанныеФормыСтруктура  - структура для моделирования данных, редактируемых в форме.
// 
// Возвращаемое значение:
//  ТекстНаличияОбработки - Строка - текст исключения
Функция ИсключениеЕслиПоНастройкеЕстьОбработка(ТекущиеДанные) Экспорт
	
	ТекстНаличияОбработки = ""; 
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ТекущиеДанные;
	КонецЕсли;

	Если ТекущийРодитель.ЕстьОбработка Тогда
		ТекстНаличияОбработки = НСтр("ru = 'По данной настройке есть активные или завершенные обработки объектов.
									  |Изменение настройки запрещено.'"); 
	КонецЕсли;
	
	Возврат ТекстНаличияОбработки;
	
КонецФункции

// Устанавливает параметры в список Все действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	СтрокаВидДействия - ДанныеФормыЭлементДерева - строка дерева, для которой получаем данные.
//
Процедура УстановитьПараметрыСпискаВсеВидыДействий(Форма, СтрокаВидДействия) Экспорт 
	
	ВыбранныеВидыДействий = Новый Массив;
	Для Каждого ВидДействия Из СтрокаВидДействия.ПолучитьЭлементы() Цикл
		ВыбранныеВидыДействий.Добавить(ВидДействия.ВидДействия);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ВсеВидыДействий, "ВыбранныеВидыДействий", ВыбранныеВидыДействий, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДействия

// Обработчик выбора вида действия в форме вида документов
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, инициатор выбора.
// 	Элемент - ПолеФормы - инициатор  выбора.
// 	ВыбраннаяСтрока - строка таблицы -  значение выбранной строки.
// 	Поле - ПолеФормы - активное поле (колонка).
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ВидыДействийВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	ТекущиеДанныеДерева = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВидыДействийСхема Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСПроцессамиПоОбработкамОбъектовКлиент.ОткрытьСхемуОбработкиДляВидаОбъекта(Форма);
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанныеДерева.ЭтоРодитель И Поле = Элементы.ВидыДействийПроверкаВыполнения Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанныеРодитель = ТекущиеДанныеДерева.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		Иначе 
			СтрокаРодитель = ТекущиеДанныеРодитель;
		КонецЕсли;
		
		ОбработчикЗавершенияОткрытия = Новый ОписаниеОповещения(
			"ВидыДействийПослеПроверкиНаличияНастройки",
			ЭтотОбъект,
			Новый Структура("Форма, СтрокаДереваДействий, СтрокаРодитель", 
			Форма, ТекущиеДанныеДерева, СтрокаРодитель));
		
		Если Не ЗначениеЗаполнено(СтрокаРодитель.СсылкаНаНастройку) Тогда 
		
			ТекстВопроса = 
				ОбщегоНазначенияДокументооборотКлиентСервер.ТекстВопросаНезаписанныхДанных(
				НСтр("ru = 'Открытие условий проверки выполнения'"));
			ПоказатьВопрос(ОбработчикЗавершенияОткрытия, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		ИначеЕсли Форма.Модифицированность = Истина Тогда 
			
			ВыполнитьОбработкуОповещения(ОбработчикЗавершенияОткрытия, КодВозвратаДиалога.ОК)
		Иначе
			
			ВыполнитьОбработкуОповещения(ОбработчикЗавершенияОткрытия, КодВозвратаДиалога.Да);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	Если Не ТекущиеДанныеДерева.ЭтоРодитель И Поле = Элементы.ВидыДействийПравилаЭскалации Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанныеРодитель = ТекущиеДанныеДерева.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		Иначе 
			СтрокаРодитель = ТекущиеДанныеРодитель;
		КонецЕсли;
		
		ОбработчикЗавершенияОткрытия = Новый ОписаниеОповещения(
			"ВидыДействийПослеПроверкиНаличияНастройкиЭскалации",
			ЭтотОбъект,
			Новый Структура("Форма, СтрокаДереваДействий, СтрокаРодитель", 
			Форма, ТекущиеДанныеДерева, СтрокаРодитель));
		
		Если Не ЗначениеЗаполнено(СтрокаРодитель.СсылкаНаНастройку) Тогда 
		
			ТекстВопроса = 
				ОбщегоНазначенияДокументооборотКлиентСервер.ТекстВопросаНезаписанныхДанных(
				НСтр("ru = 'Открытие правил эскалации'"));
			ПоказатьВопрос(ОбработчикЗавершенияОткрытия, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		ИначеЕсли Форма.Модифицированность = Истина Тогда 
			
			ВыполнитьОбработкуОповещения(ОбработчикЗавершенияОткрытия, КодВозвратаДиалога.ОК)
		Иначе
			
			ВыполнитьОбработкуОповещения(ОбработчикЗавершенияОткрытия, КодВозвратаДиалога.Да);
		КонецЕсли;

		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеДерева.ЭтоРодитель Тогда
		
		Если Форма.ТолькоПросмотр Или Не Форма.ПравоРедактированияОбработки Тогда
			Возврат;
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("ВидыДействийПослеВыбораПериода",
			ЭтотОбъект,
			Новый Структура("Форма, СтрокаДереваДействий", Форма, ТекущиеДанныеДерева));
			
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДействуетС", ТекущиеДанныеДерева.ДействуетС);
		ПараметрыОткрытия.Вставить("ДействуетПо", ТекущиеДанныеДерева.ДействуетПо);
		ОткрытьФорму("Справочник.ВидыДействий.Форма.ФормаУстановкиПериодаОбработки", 
			ПараметрыОткрытия,,,,,
			Обработчик);
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанныеДерева.ВидДействия);
	
КонецПроцедуры

Процедура ВидыДействийПослеПроверкиНаличияНастройки(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	СтрокаДереваДействий = Параметры.СтрокаДереваДействий;
	СсылкаНаНастройку = Параметры.СтрокаРодитель.СсылкаНаНастройку;
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Форма.Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
			Строка(Форма.Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
		СтрокаДереваДействий = Форма.Элементы.ВидыДействий.ТекущиеДанные;
		ТекущиеДанныеРодитель = СтрокаДереваДействий.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		Иначе 
			СтрокаРодитель = ТекущиеДанныеРодитель;
		КонецЕсли;
		СсылкаНаНастройку = СтрокаРодитель.СсылкаНаНастройку;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ВидыДействийПослеВыбораУсловийПроверкиВыполнения",
		ЭтотОбъект,
		Новый Структура("Форма, СтрокаДереваДействий", Форма, СтрокаДереваДействий));
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидДействия", СтрокаДереваДействий.ВидДействия);
	ПараметрыОткрытия.Вставить("НастройкаОбработки", СсылкаНаНастройку);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", 
		Форма.ТолькоПросмотр Или Не Форма.ПравоРедактированияОбработки);
	
	ОткрытьФорму("Справочник.НастройкиОбработкиВидовОбъектов.Форма.НастройкаУсловийПроверкиВыполнения", 
		ПараметрыОткрытия,,,,,
		Обработчик);
	
КонецПроцедуры

Процедура ВидыДействийПослеВыбораУсловийПроверкиВыполнения(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение = КодВозвратаДиалога.Отмена 
		Или ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.СтрокаДереваДействий.ПроверкаВыполнения = ВыбранноеЗначение;
	
КонецПроцедуры

Процедура ВидыДействийПослеПроверкиНаличияНастройкиЭскалации(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	СтрокаДереваДействий = Параметры.СтрокаДереваДействий;
	СсылкаНаНастройку = Параметры.СтрокаРодитель.СсылкаНаНастройку;
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Форма.Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
			Строка(Форма.Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
		СтрокаДереваДействий = Форма.Элементы.ВидыДействий.ТекущиеДанные;
		ТекущиеДанныеРодитель = СтрокаДереваДействий.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		Иначе 
			СтрокаРодитель = ТекущиеДанныеРодитель;
		КонецЕсли;
		СсылкаНаНастройку = СтрокаРодитель.СсылкаНаНастройку;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ВидыДействийПослеВыбораЭскалации",
		ЭтотОбъект,
		Новый Структура("Форма, СтрокаДереваДействий", Форма, СтрокаДереваДействий));
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидДействия", СтрокаДереваДействий.ВидДействия);
	ПараметрыОткрытия.Вставить("НастройкаОбработки", СсылкаНаНастройку);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", 
		Форма.ТолькоПросмотр Или Не Форма.ПравоРедактированияОбработки);
	
	ОткрытьФорму("Справочник.ПравилаЭскалации.ФормаВыбора", 
		ПараметрыОткрытия,,,,,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВидыДействийПослеВыбораЭскалации(ВыбранноеЗначение, Параметры) Экспорт

	Параметры.СтрокаДереваДействий.ПравилаЭскалации 
		= ДействияВызовСервера.СформироватьСтрокуПравилаЭскалации(
			Параметры.СтрокаДереваДействий.СсылкаНаНастройку, 
			Параметры.СтрокаДереваДействий.ВидДействия);
	
КонецПроцедуры

// Обработчик перед началом добавления строки таблицы Виды действий
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
// 	Отказ - Булево - признак отказа от добавления объекта.
// 	Копирование - Булево - определяет режим копирования.
// 	Родитель -  Неопределено, СправочникСсылка.ВидыДействий - ссылка, которая будет использована в качестве родителя. 
// 	Группа - Булево - признак добавления группы.
// 	Параметр - Произвольный - параметр команды, выполняемой при добавлении строки в таблицу.
//
Процедура ВидыДействийПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр) Экспорт 
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ВидыДействийПослеВыбораПериода",
		ЭтотОбъект,
		Новый Структура("Форма", Форма));
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДействуетС", ТекущаяДата());
	ПараметрыОткрытия.Вставить("ДействуетПо", Неопределено);
	ОткрытьФорму("Справочник.ВидыДействий.Форма.ФормаУстановкиПериодаОбработки", 
		ПараметрыОткрытия,,,,,
		Обработчик);
	
КонецПроцедуры

// Обработчик перед удалением строки таблицы Виды действий
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
// 	Отказ - Булево - признак отказа.
//
Процедура ВидыДействийПередУдалением(Форма, Элемент, Отказ) Экспорт 
	
	Отказ = Истина;
	
	ТекущиеДанные = Форма.Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда		
		ТекстНаличияОбработки = ИсключениеЕслиПоНастройкеЕстьОбработка(ТекущиеДанные);
	
		Если ЗначениеЗаполнено(ТекстНаличияОбработки) Тогда
			ПоказатьПредупреждение(, ТекстНаличияОбработки); 
			Возврат;
		КонецЕсли;
		
		УдалитьВидДействияИзСписка(Форма, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ВидыДействийПередНачаломДобавления
// 
// Параметры:
//  Результат - Неопределено, Структура - структура с результатом выбора периода или Неопределено:
//   * ДействуетС - Дата
//   * ДействуетПо - Дата
//  Параметры - Структура - Дополнительные параметры:
//   * Форма - ФормаКлиентскогоПриложения
//   * СтрокаДереваДействий - ДанныеФормыЭлементДерева - необязательный, может отсутствовать
//
Процедура ВидыДействийПослеВыбораПериода(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Если Параметры.Свойство("СтрокаДереваДействий") Тогда 
		СтрокаПериод = Параметры.СтрокаДереваДействий;
	Иначе 
		СтрокиПериоды = Форма.ВидыДействий.ПолучитьЭлементы();
		СтрокаПериод = СтрокиПериоды.Добавить();
	КонецЕсли;
	
	ПериодДействияИзменился = 
		СтрокаПериод.ДействуетС <> Результат.ДействуетС Или СтрокаПериод.ДействуетПо <> Результат.ДействуетПо;
	Форма.Модифицированность = Форма.Модифицированность Или ПериодДействияИзменился;
	
	СтрокаПериод.ДействуетС = Результат.ДействуетС;
	СтрокаПериод.ДействуетПо = Результат.ДействуетПо;
	СтрокаПериод.ЭтоРодитель = Истина;
	СтрокаПериод.Представление = ДействияКлиентСервер.ПредставлениеПериодаДействияОбработки(
		СтрокаПериод.ДействуетС, СтрокаПериод.ДействуетПо);
		
	Для Каждого СтрВидДействия Из СтрокаПериод.ПолучитьЭлементы() Цикл 
		СтрВидДействия.ДействуетС = Результат.ДействуетС;
		СтрВидДействия.ДействуетПо = Результат.ДействуетПо;
	КонецЦикла;
	
	Если Не Форма.РежимПодборДействий Тогда 
		Элементы = Форма.Элементы;
		Форма.РежимПодборДействий = Не Форма.РежимПодборДействий;
		Элементы.ГруппаВидыДействийПеренос.Видимость = Форма.РежимПодборДействий;
		Элементы.ГруппаВсеВидыДействий.Видимость = Форма.РежимПодборДействий;
		Элементы.ПодобратьДействие.Пометка = Форма.РежимПодборДействий;
	КонецЕсли;
	
КонецПроцедуры

// Перемещает вид действия в таблице
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Команда - описание команды формы 
// 	Вверх - Булево - если Истина, то перемещение вверх.
//
Процедура ПереместитьВидДействия(Форма, Команда, Вверх = Истина) Экспорт 
	
	ТекущиеДанные = Форма.Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоРодитель Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Нельзя менять порядок.'"));
		Возврат;
		
	Иначе
		
		ТекстНаличияОбработки = ИсключениеЕслиПоНастройкеЕстьОбработка(ТекущиеДанные);
	
		Если ЗначениеЗаполнено(ТекстНаличияОбработки) Тогда
			ПоказатьПредупреждение(, ТекстНаличияОбработки); 
			Возврат;
		КонецЕсли;
		
		ДействияЭтапа = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		ИндексТекущейСтроки = ДействияЭтапа.Индекс(ТекущиеДанные);
		Переместили = Ложь;
		Если Вверх Тогда
			Если ИндексТекущейСтроки = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ДействияЭтапа.Сдвинуть(ИндексТекущейСтроки, -1);
			Переместили = Истина;
		Иначе 
			Если ИндексТекущейСтроки = ДействияЭтапа.Количество() - 1 Тогда
				Возврат;
			КонецЕсли;
			ДействияЭтапа.Сдвинуть(ИндексТекущейСтроки, 1);
			Переместили = Истина;
		КонецЕсли;
		
		Если Переместили Тогда 
			ДействияКлиентСервер.ОбновитьНумерациюОбработки(Форма.ВидыДействий, Форма.КоличествоДействий);
			Форма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормДействий

// Обработчик начала выбора в поле Представление строки в форме действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор обработчика.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
// 	ЗаголовокФормы - Строка - содержит заголовок формы выбора.
//  ОписаниеТиповСтрока - Строка - описание типов
//
Процедура ПредставлениеСтрокиНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ЗаголовокФормы,
	Знач ОписаниеТиповСтрока = "") Экспорт 
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеТиповСтрока = "" Тогда
		ОписаниеТиповСтрока = "СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли";
	КонецЕсли;	
	ДополнениеТипа = Новый ОписаниеТипов(ОписаниеТиповСтрока);
	
	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(Форма, Элемент, СтандартнаяОбработка,
		ТекущиеДанные.Участник, ДополнениеТипа, ЗаголовокФормы, ПараметрыПолученияДанных);
		
КонецПроцедуры

// Обработчик открытия поля Представление строки в форме действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор открытия.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПредставлениеСтрокиОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт 
	
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Этап);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущиеДанные.Участник);
	
КонецПроцедуры

// Обработчик очистки поля Представление строки в форме действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор очистки.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПредставлениеСтрокиОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ЭтоЭтап Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПредставлениеСтроки = "";
	ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	
КонецПроцедуры

Процедура ПредставлениеСтрокиАвтоПодбор(Форма, Текст, ДанныеВыбора,
	СтандартнаяОбработка, ДополнениеТипа = Неопределено) Экспорт 
	
	Элементы = Форма.Элементы;
	ТекстПоиска = СокрЛП(Текст);
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ТекущиеДанные.Свойство("ПрефиксСтроки") И ЗначениеЗаполнено(ТекущиеДанные.ПрефиксСтроки) Тогда
		Если СтрНачинаетсяС(ТекстПоиска, ТекущиеДанные.ПрефиксСтроки) Тогда
			ТекстПоиска = Прав(ТекстПоиска, СтрДлина(ТекстПоиска) - СтрДлина(ТекущиеДанные.ПрефиксСтроки));
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Если ЗначениеЗаполнено(ТекстПоиска) Тогда
			МассивЭтапов = РаботаСЭтапамиКлиент.МассивЭтапов(Форма.Участники);
			
			Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ДействияПодписания") Тогда 
				ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Подписание");
			ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ДействияСогласования") Тогда 
				ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Согласование");
			Иначе 
				Возврат;
			КонецЕсли;
			
			ДанныеВыбора = РаботаСЭтапамиВызовСервера.ДанныеВыбора(ТекстПоиска, 
				ТипДействия,
				МассивЭтапов);
				
			Если ДанныеВыбора.Количество() <> 0 Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ДополнениеТипа = Неопределено Тогда 
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли");
	КонецЕсли;
	
	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(Форма, Неопределено, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		0, СтандартнаяОбработка, ТекущиеДанные.Участник, ДополнениеТипа);
	
КонецПроцедуры

Процедура ПредставлениеСтрокиОкончаниеВводаТекста(Форма, Текст, ДанныеВыбора,
	СтандартнаяОбработка, ДополнениеТипа = Неопределено) Экспорт 
	
	Элементы = Форма.Элементы;
	ТекстПоиска = Текст;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
		
	Если ТекущиеДанные.Свойство("ПрефиксСтроки") И ЗначениеЗаполнено(ТекущиеДанные.ПрефиксСтроки) Тогда
		Если СтрНачинаетсяС(ТекстПоиска, ТекущиеДанные.ПрефиксСтроки) Тогда
			ТекстПоиска = Прав(ТекстПоиска, СтрДлина(ТекстПоиска) - СтрДлина(ТекущиеДанные.ПрефиксСтроки));
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.НастройкиДействийПодписания") Тогда 
			ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Подписание");
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.НастройкиДействийСогласования") Тогда 
			ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Согласование");
		Иначе 
			Возврат;
		КонецЕсли;
		
		МассивЭтапов = РаботаСЭтапамиКлиент.МассивЭтапов(Форма.Участники);	
		ДанныеВыбора = РаботаСЭтапамиВызовСервера.ДанныеВыбора(ТекстПоиска, 
			ТипДействия,
			МассивЭтапов);
		
		Возврат;
	КонецЕсли;
	
	Если ДополнениеТипа = Неопределено Тогда 
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли");
	КонецЕсли;
	
	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(Форма, Неопределено, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		0, СтандартнаяОбработка, ТекущиеДанные.Участник, ДополнениеТипа);
	
КонецПроцедуры

// Обработчик выбора поля Представление строки в форме действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор выбора.
// 	ВыбранноеЗначение - Произвольный - выбранное значение, которое будет установлено как значение поля ввода.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПредставлениеСтрокиОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	РаботаСАдреснойКнигойКлиент.ОбработатьВыборУчастника(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик начала выбора в поле Представление срока в форме действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор обработчика.
// 	ДанныеВыбора - СписокЗначений -  данные для выбора.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура СрокПредставлениеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Исполнитель", ТекущиеДанные.Участник);
	ПараметрыФормы.Вставить("СрокИсполнения", ТекущиеДанные.Срок);
	ПараметрыФормы.Вставить("ДатаОтсчета", Форма.ДатаОтсчетаДляРасчетаСроков);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСрокаИсполнения",
		ПараметрыФормы, 
		Форма.Элементы.СрокПредставление,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик регулирования в поле Представление срока в форме действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор обработчика.
// 	Направление - Число - При нажатии на увеличение (вверх) параметр равен 1, при нажатии на уменьшение (вниз) - равен -1.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
// 	ЗаполнитьСоисполнителей - Булево - если Истина, то заполняем те же сроки у соисполнителей.
//
Процедура СрокПредставлениеРегулирование(Форма, Элемент, Направление, СтандартнаяОбработка, ЗаполнитьСоисполнителей = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	СрокиИсполненияПроцессовКлиент.ИзменитьОтносительныйСрок(
		ТекущиеДанные.СрокДни,
		ТекущиеДанные.СрокЧасы,
		ТекущиеДанные.СрокМинуты,
		Направление);
	
	ТекущиеДанные.ВариантУстановкиСрока = ВариантыУстановкиСрока.ОтносительныйСрок;
	ТекущиеДанные.Срок = Дата(1,1,1);
	
	Если ЗаполнитьСоисполнителей Тогда
		ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(
			Форма.Участники, ТекущиеДанные);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик обработки выбора в поле Представление срока в форме действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор обработчика.
// 	ВыбранноеЗначение - Произвольный - Выбранное значение, которое будет установлено как значения поля ввода.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
// 	ЗаполнитьСоисполнителей - Булево - если Истина, то заполняем те же сроки у соисполнителей.
//
Процедура СрокПредставлениеОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, 
	ЗаполнитьСоисполнителей = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = 
		СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ТекущиеДанные.Срок = ВыбранноеЗначение;
	ТекущиеДанные.СрокДни = 0;
	ТекущиеДанные.СрокЧасы = 0;
	ТекущиеДанные.СрокМинуты = 0;
	ТекущиеДанные.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок;
	
	Если ЗаполнитьСоисполнителей Тогда
		ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(
			Форма.Участники, ТекущиеДанные);
	КонецЕсли;
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик при изменении в поле Представление срока в форме действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор обработчика.
// 	ЗаполнитьСоисполнителей - Булево - если Истина, то заполняем те же сроки у соисполнителей.
//
Процедура СрокПредставлениеПриИзменении(Форма, Элемент, ЗаполнитьСоисполнителей = Ложь) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщенияПредупреждения", "");
	ПараметрыФормы.Вставить("ВПредставленииМожетБытьДата", Истина);
	ПараметрыФормы.Вставить("Форма", Форма);
	ПараметрыФормы.Вставить("Исполнитель", ТекущиеДанные.Участник);
	
	РезультатЗаполнения = СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияПоПредставлению(
		ТекущиеДанные.Срок,
		ТекущиеДанные.СрокДни,
		ТекущиеДанные.СрокЧасы,
		ТекущиеДанные.СрокМинуты,
		ТекущиеДанные.ВариантУстановкиСрока,
		ТекущиеДанные.СрокПредставление,
		ПараметрыФормы);
		
	Если РезультатЗаполнения Тогда
		Если ЗаполнитьСоисполнителей Тогда
			ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(
				Форма.Участники, ТекущиеДанные);
		КонецЕсли;
		Форма.ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормы.ТекстСообщенияПредупреждения) Тогда
		ПоказатьПредупреждение(, ПараметрыФормы.ТекстСообщенияПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик при изменении в поле Порядок в форме действия или настройки
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор обработчика.
//
Процедура ПорядокПриИзменении(Форма, Элемент) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.Порядок = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЭтапаДействия.Параллельно") Тогда
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьЭлементы();
		Если УчастникиЭтапа.Количество() < 2 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаИсполнителя = УчастникиЭтапа[0];
		ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(
			Форма.Участники, СтрокаИсполнителя);
		Форма.ЗаполнитьПредставлениеСроков();
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сроки соисполнителей этапа по строке, в которой поменялся срок.
// 
// Параметры:
//  Участники - ДеревоЗначений - Участники действия
//  СтрокаИсполнителя - СтрокаДереваЗначений - Строка, в которой поменялся срок.
//
Процедура ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(Участники, СтрокаИсполнителя) Экспорт
	
	УчастникиЭтапа = Участники.ПолучитьЭлементы();
	
	Если СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтветственного(СтрокаИсполнителя) Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаИсполнителя.Свойство("Функция")
		И ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаИсполнителя.Функция) Тогда
		Возврат;
	КонецЕсли;
	
	// При последовательном выполнении, сроки настраиваются индивидуально.
	ТекущийРодитель = СтрокаИсполнителя.ПолучитьРодителя();
	Если ТекущийРодитель <> Неопределено Тогда
		ЕстьЭтапы = Истина;
		Если ТекущийРодитель.Свойство("Порядок")
			И ТекущийРодитель.Порядок = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЭтапаДействия.Последовательно") Тогда
			Возврат;
		КонецЕсли;
		
		// Для рассматривающих сроки не копируем.
		Если ЭтоСтрокаРассматривающего(ТекущийРодитель) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ЕстьЭтапы = Ложь;
	КонецЕсли;
			
	ВариантыУстановкиСрока = 
		СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	ВариантУстановкиСрока = СтрокаИсполнителя.ВариантУстановкиСрока;
	
	Если ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
		Срок = СтрокаИсполнителя.Срок;
		СрокДни = 0;
		СрокЧасы = 0;
		СрокМинуты = 0;
	Иначе
		Срок = Дата(1,1,1);
		СрокДни = СтрокаИсполнителя.СрокДни;
		СрокЧасы = СтрокаИсполнителя.СрокЧасы;
		СрокМинуты = СтрокаИсполнителя.СрокМинуты;
	КонецЕсли;
		
	Если ЕстьЭтапы Тогда
		Для Каждого Этап Из УчастникиЭтапа Цикл
			Если ТекущийРодитель <> Этап Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого УчастникЭтапа Из Этап.ПолучитьЭлементы() Цикл
				Если СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтветственного(УчастникЭтапа) Тогда
					Продолжить;
				КонецЕсли;
				
				Если УчастникЭтапа.Свойство("Функция")
					И ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(УчастникЭтапа.Функция) Тогда
					Продолжить;
				КонецЕсли;
				
				УчастникЭтапа.Срок = Срок;
				УчастникЭтапа.СрокДни = СрокДни;
				УчастникЭтапа.СрокЧасы = СрокЧасы;
				УчастникЭтапа.СрокМинуты = СрокМинуты;
				УчастникЭтапа.ВариантУстановкиСрока = ВариантУстановкиСрока;
	
			КонецЦикла;
		КонецЦикла;
	Иначе
		
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			
			УчастникЭтапа.Срок = Срок;
			УчастникЭтапа.СрокДни = СрокДни;
			УчастникЭтапа.СрокЧасы = СрокЧасы;
			УчастникЭтапа.СрокМинуты = СрокМинуты;
			УчастникЭтапа.ВариантУстановкиСрока = ВариантУстановкиСрока;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Если хоть в одной ветке дерева есть разные сроки, то кнопка "Разные сроки" делается включенной.
// 
// Параметры:
//  СтрокиДерева - ДанныеФормыКоллекцияЭлементовДерева - Текущая ветка из дерева "Участники" на формах действий
// 
// Возвращаемое значение:
//  Булево - Признак, что в действии участника есть разные сроки в пределах этапа/пункта.
Функция ЗначениеРазныеСрокиРекурсивно(СтрокиДерева) Экспорт
	
	ПредыдущийСрок = Неопределено;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ЭтоСтрокаОтветственного = СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтветственного(СтрокаДерева);
		
		Если СтрокаДерева.Свойство("Порядок") И СтрокаДерева.Порядок = ПредопределенноеЗначение(
			"Перечисление.ПорядокВыполненияЭтапаДействия.Последовательно") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
		Если СтрокаРодитель <> Неопределено И ЭтоСтрокаРассматривающего(СтрокаРодитель) Тогда
			Продолжить; // Для рассматривающих всегда независимые сроки.
		КонецЕсли;
		
		Если СтрокаДерева.Свойство("Функция")
			И ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаДерева.Функция) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.Участник)
			И Не ЭтоСтрокаОтветственного
			И ПредыдущийСрок <> Неопределено
			И ПредыдущийСрок <> СтрокаДерева.СрокПредставление Тогда
			Возврат Истина;
		КонецЕсли;
		Если Не ЭтоСтрокаОтветственного Тогда
			ПредыдущийСрок = СтрокаДерева.СрокПредставление;
		КонецЕсли;
		
		Если ЗначениеРазныеСрокиРекурсивно(СтрокаДерева.ПолучитьЭлементы()) Тогда
			Возврат Истина; // Уже установлена внутри рекурсии глубже, идти дальше нет смысла.
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Рекурсивно устанавливает одинаковый срок всем участникам в пределах каждого этапа. При отключении опции "Разные
// сроки" в некоторых формах действий.
// 
// Параметры:
//  СтрокиДерева - ДанныеФормыКоллекцияЭлементовДерева - Текущая ветка из дерева "Участники" на формах действий
//  Форма - ФормаКлиентскогоПриложения: См. Справочник.ДействияИсполнения.Форма.ФормаЭлемента
//		  - ФормаКлиентскогоПриложения: См. Справочник.НастройкиДействийИсполнения.Форма.ФормаЭлемента
//		  - ФормаКлиентскогоПриложения: См. Справочник.ДействияСогласования.Форма.ФормаЭлемента
//		  - ФормаКлиентскогоПриложения: См. Справочник.НастройкиДействийСогласования.Форма.ФормаЭлемента
//		  - ФормаКлиентскогоПриложения: См. Справочник.ДействияПодписания.Форма.ФормаЭлемента
//		  - ФормаКлиентскогоПриложения: См. Справочник.НастройкиДействийПодписания.Форма.ФормаЭлемента
Процедура УстановитьОдинаковыйСрокРекурсивно(СтрокиДерева, Форма) Экспорт
	
	Если Форма.РазныеСроки Тогда
		Возврат; // Включена опция "Разные сроки".
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
		Если СтрокаРодитель <> Неопределено И ЭтоСтрокаРассматривающего(СтрокаРодитель) Тогда
			Продолжить; // Для рассматривающих всегда независимые сроки.
		КонецЕсли;
		
		УстановитьОдинаковыйСрокРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Форма);
		
		Если СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтветственного(СтрокаДерева) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.СрокПредставление)
			И Не СтрокаДерева.ЭтоЭтап
			И Не Форма.СтрокаУчастникаНедоступна(СтрокаДерева, СтрокаРодитель) Тогда
			ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(Форма.Участники, СтрокаДерева);
			Форма.Модифицированность = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Форма.Модифицированность Тогда
		Форма.ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик активизации строки в таблице участников действия или настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма-инициатор
Процедура УчастникиПриАктивизацииСтроки(Форма) Экспорт
	
	УстановитьПометкуКомандыЗащищенный(Форма);
	УстановитьДоступностьКомандыЗащищенный(Форма);
	УстановитьТолькоПросмотрИУдалениеУчастникаПоЗащищенности(Форма);
	УстановитьДоступностьКнопкиРазныеСроки(Форма);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения.
// Проверяет защищенность строки, не дает изменять исполнителя, если он защищен.
// 	
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма-инициатор
// 	Отказ - Булево - отказ из обработчика события формы
Процедура УчастникиПередНачаломИзменения(Форма, Отказ) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И Форма.Элементы.Участники.ТекущийЭлемент.Имя = "ПредставлениеСтроки" 
		И ТекущиеДанные.Защищенный 
		И Не Форма.МожноИзменятьЗащищенныхУчастников Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события перед удалением таблицы Участники.
// Проверяет защищенность строки, не дает удалить исполнителя, если он защищен или выполнил задачу.
// 	
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма-инициатор
// 	Отказ - Булево - отказ из обработчика события формы
//
Процедура УчастникиПередУдалением(Форма, Отказ) Экспорт
	
	Элементы = Форма.Элементы;
	Участники = Форма.Участники;
	Отказ = Истина;
	
	ВыделенныеСтроки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(
		Элементы.Участники.ВыделенныеСтроки);
	ЭлементыУчастники = Участники.ПолучитьЭлементы();
	
	// Удаляем всех выделенных участников.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаУчастника = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		
		Если СтрокаУчастника.Защищенный И Не Форма.МожноИзменятьЗащищенныхУчастников Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииЗащищенных();
		ИначеЕсли СтрокаУчастника.Недоступно И Не ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииНедоступного();
		КонецЕсли;
		
		Если СтрокаУчастника.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииЗавершившего();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		ЭлементыУчастники.Удалить(СтрокаУчастника);
		ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
		Форма.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события ПриИзменении поля "Способ подписания"
// 	
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма-инициатор
// 	
Процедура СпособПодписанияПриИзменении(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	СпособПодписания = Форма.Объект.СпособПодписания;
	Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Истина;
	
	Если СпособПодписания <> ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.НаБумаге")
		И Не (Форма.ИмяФормы = "Справочник.НастройкиДействийПодписания.Форма.ФормаЭлемента"
			И Не Форма.ЭтоНастройкаМероприятия) Тогда
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Ложь;
		
		// Удаление обеспечивающих подписание.
		Для Каждого СтрокаЭтапа Из Форма.Участники.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаУчастник Из СтрокаЭтапа.ПолучитьЭлементы() Цикл
				СтрокиУчастников = СтрокаУчастник.ПолучитьЭлементы();
				ИндексСтроки = СтрокиУчастников.Количество() - 1;
				Пока ИндексСтроки >= 0 Цикл
					
					СтрокаУчастника = СтрокиУчастников[ИндексСтроки];
					Если СтрокаУчастника.Функция = 
						ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбеспечивающийПодписание") Тогда
						СтрокиУчастников.Удалить(СтрокаУчастника);
					КонецЕсли;
					
					ИндексСтроки = ИндексСтроки - 1;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если СпособПодписания = ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.НаБумаге") Тогда
		Порядок = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЭтапаДействия.Последовательно");
		Для Каждого Этап Из Форма.Участники.ПолучитьЭлементы() Цикл
			Если Этап.Порядок <> Порядок Тогда
				Этап.Порядок = Порядок;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик перед удалением строки таблицы Участники
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
// 	Отказ - Булево - признак отказа от добавления объекта.
Процедура УчастникиСЭтапамиПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	Элементы = Форма.Элементы;
	Участники = Форма.Участники;
	Отказ = Истина;
	
	ВыделенныеСтроки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(
		Элементы.Участники.ВыделенныеСтроки);
	
	// Если выделена только одна строка, то выводим сообщение о невозможности
	// ее удаления. Иначе молча удаляем все возможные строки дерева.
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		
		СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
		
		ТекстПредупреждения = "";
		Если СтрокаДерева.ЭтоЭтап Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииЭтапа();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Вначале исключаем этапы и участников, которых невозможно удалить.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		
		Если СтрокаДерева.ЭтоЭтап Тогда
			
			ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем всех выделенных участников.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаУчастника = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		
		Если СтрокаУчастника.Защищенный 
			И Не Форма.МожноИзменятьЗащищенныхУчастников Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииЗащищенных();
		КонецЕсли;
		
		Если СтрокаУчастника.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииЗавершившего();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		СтрокаЭтапа = СтрокаУчастника.ПолучитьРодителя();
		ЭлементыУчастников = СтрокаЭтапа.ПолучитьЭлементы();
		Если ЭлементыУчастников.Количество() = 1
			И (ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаЭтапа.Функция)
			Или СтрокаЭтапа.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковУтверждения.Утверждающий")
			Или СтрокаЭтапа.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковРегистрации.Регистратор")) Тогда 
			Если Элементы.Участники.ТекущийЭлемент.Имя = "ПредставлениеСтроки" Тогда
				ЭлементыУчастников[0].Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			ИначеЕсли Элементы.Участники.ТекущийЭлемент.Имя = "УчастникиУсловиеПредставление" Тогда
				ЭлементыУчастников[0].Условие = Неопределено;
				ЭлементыУчастников[0].УсловиеПредставление = Неопределено;
			ИначеЕсли Элементы.Участники.ТекущийЭлемент.Имя = "УчастникиЗащищенный" Тогда
				ЭлементыУчастников[0].Защищенный = Неопределено;
			Иначе
				ЭлементыУчастников[0][Элементы.Участники.ТекущийЭлемент.Имя] = Неопределено;
			КонецЕсли;
		Иначе 
			ЭлементыУчастников.Удалить(СтрокаУчастника);
		КонецЕсли;
		ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
		
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДействия

// Обработчик изменения строки таблицы Действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
//
Процедура ДействияПриИзменении(Форма, Элемент) Экспорт
	
	Форма.КоличествоДействий = Форма.Действия.ПолучитьЭлементы().Количество();
	УстановитьДоступностьКомандыЗащищенный(Форма);
	
КонецПроцедуры

// Обработчик выбора действия в форме действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, инициатор выбора.
// 	Элемент - ПолеФормы - инициатор  выбора.
// 	ВыбраннаяСтрока - строка таблицы -  значение выбранной строки.
// 	Поле - ПолеФормы - активное поле (колонка).
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ФормаИстории - Булево - если истнра - вызов из ФормаИстории
//
Процедура ДействияВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ФормаИстории = Ложь) Экспорт
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	Если (ТекущиеДанные.ЭтоУчастник Или ТекущиеДанные.ЭтоПодзадача) И ТекущиеДанные.ЕстьФайлыОтчета
		И (Поле = Форма.Элементы.ДействияРезультатТекстом
		Или Поле = Форма.Элементы.ДействияЕстьФайлыОтчета) Тогда
		
		ОткрытьСписокВыбораФайлаОтчета(Форма, Элемент, Поле, ТекущиеДанные);
		
		Возврат;
	КонецЕсли;      
	
	Если ФормаИстории Тогда
		Возврат;
	КонецЕсли;      
		
	Если ТекущиеДанные.ЭтоДействие
		И ТекущиеДанные.Свойство("СостояниеКонтроля")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ДействияСостояниеКонтроля")
		И Поле = Форма.Элементы.ДействияСостояниеКонтроля Тогда
		КонтрольКлиент.ОбработкаКомандыКонтроль(ТекущиеДанные.Действие, Форма);
		Возврат;
	КонецЕсли;

	ОткрытьЗадачуСотрудника = Истина;	
	Если ТекущиеДанные.ЭтоУчастник И ТекущиеДанные.ЭтоДействие
		И Поле <> Форма.Элементы.ДействияПредставлениеСотрудники Тогда
		ОткрытьЗадачуСотрудника = Ложь;
	КонецЕсли;	
		
	Если ОткрытьЗадачуСотрудника 
		И РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьДвойнойКликНаУчастникаДействия(
		Форма, ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	  
	
	Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(ТекущиеДанные.Действие) И ТекущиеДанные.ЭтоУчастник
		И Поле = Форма.Элементы.ДействияПредставлениеСотрудники Тогда
		
		ДействиеЗадачи = ДействияВызовСервера.ДействиеЗадачиДляСтрокиОзнакомления(
			ТекущиеДанные.Действие, ТекущиеДанные.Идентификатор);
		Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
			ПоказатьЗначение(, ДействиеЗадачи);	
			Возврат;     
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ДопОписаниеОзнакомиться) Тогда
			
		 	ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Документ", Форма.Объект.Ссылка);
			ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			ПараметрыФормы.Вставить("КлючВарианта", "ЛистОзнакомления");
			ОткрытьФорму("Отчет.ОзнакомлениеСОбъектом.ФормаОбъекта", ПараметрыФормы, Форма);
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ТекущиеДанные.ЭтоПодзадача Тогда
		РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(
			ТекущиеДанные.ДействиеЗадачи,
			Неопределено,
			Ложь);
		Возврат;
	КонецЕсли;		
	
	ДействияВыборВопросНезаписанныхДанных(Форма, Поле, ТекущиеДанные);
	
КонецПроцедуры

// Продолжение ДействияВыбор
// 
// Параметры:
//  Результат - КодВозвратаДиалога -
//  Параметры - Структура -
Процедура ДействияВыборПродолжение(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	Объект = Форма.Объект;
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	Поле = Параметры.Поле;
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Форма.Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ОткрытьКарточкуДействия(Форма, ТекущиеДанные, Поле);
	
КонецПроцедуры

// Обработчик перед началом изменения действия в форме действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, инициатор выбора.
// 	Элемент - ПолеФормы - инициатор  выбора.
// 	Отказ - Булево - признак отказа от выполнения стандартной (системной) обработки события.
//
Процедура ДействияПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Отказ = Истина;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.ЭтоУчастник И Не ТекущиеДанные.ЭтоДействие 
		И РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьДвойнойКликНаУчастникаДействия(
		Форма, ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ЭтоПодзадача Тогда
		РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(
			ТекущиеДанные.ДействиеЗадачи,
			Неопределено,
			Ложь);
		Возврат;
	КонецЕсли;		
	
	ДействияВыборВопросНезаписанныхДанных(Форма, Форма.Элементы.ДействияПредставление, ТекущиеДанные);
	
КонецПроцедуры

// Обработчик активизации строки таблицы Действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
//
Процедура ДействияПриАктивизацииСтроки(Форма, Элемент) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаДокумента(Форма) Тогда
		
		ДоступностьДействийПоСостоянию =
			ДелопроизводствоКлиентСервер.ДоступностьПоляФормыДокументаПоСостоянию(Форма, "ДобавитьДействие");
		ВариантыДоступности = ДелопроизводствоКлиентСервер.ВариантыДоступностиПоСостоянию();
		
		Если ДоступностьДействийПоСостоянию = ВариантыДоступности.Недоступно Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Форма.Элементы.ВыполнитьДействие.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ВедетсяОбработка = ЗначениеЗаполнено(Форма.СостояниеОбработки) 
		И Не Форма.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Остановлено")
		И Не Форма.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено");
		
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		Если ТекущиеДанные.ЭтоДействие Тогда
			РодительНедоступен = ТекущиеДанные.НедоступноГруппа;	
		Иначе	
			РодительНедоступен = ТекущиеДанные.Недоступно;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ЭтоУчастник И ТекущиеДанные.ЭтоДействие Тогда
			РодительНедоступен = ТекущиеДанные.НедоступноГруппа;	
		Иначе	
			РодительНедоступен = ТекущийРодитель.Недоступно;
		КонецЕсли;
	КонецЕсли;
	
	ДействуетНедоступно = ТекущиеДанные.ЭтоУчастник
		И Не ТекущиеДанные.ЭтоДействие 
		И ТекущиеДанные.Недоступно;
	Элементы.ДействияУдалить.Доступность = ТекущиеДанные.ЭтоДействие 
		И Не ДействуетНедоступно
		И Не РодительНедоступен;
		
	Элементы.ВыполнитьДействие.Доступность = ВедетсяОбработка;
	Элементы.ДобавитьДействие.Доступность =
		Не Форма.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Завершена"); 
	
	Элементы.ДействияКонтекстноеМенюДобавить.Доступность = Элементы.ДобавитьДействие.Доступность;
	Элементы.ДействияКонтекстноеМенюУдалить.Доступность = Элементы.ДействияУдалить.Доступность;
	
	Элементы.ДействияКонтекстноеМенюПерейтиКВыполнениюДействия.Доступность = 
		ТекущиеДанные.ЭтоДействие
		И Форма.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется")
		И ТекущиеДанные.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Выполняется")
		И ТекущиеДанные.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Остановлено");
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаДокумента(Форма.ИмяФормы) Тогда

		ДанныеСтрок = Новый Массив;
		ВыделенныеСтроки = Элементы.Действия.ВыделенныеСтроки;
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Действия.ДанныеСтроки(Строка);
			ДанныеСтрок.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		ВсеДействияВыполненыВнеПрограммы = Истина;
		Для Каждого СтрокаДействия Из ДанныеСтрок Цикл
			ВсеДействияВыполненыВнеПрограммы = ВсеДействияВыполненыВнеПрограммы И СтрокаДействия.ВыполненоВнеПрограммы;
		КонецЦикла;
		
		Если ВсеДействияВыполненыВнеПрограммы Тогда
			Элементы.ДействияКонтекстноеМенюДействиеВыполненоВнеПрограммы.Заголовок = НСтр("ru='Снять отметку о выполнении вне программы'");
		Иначе
			Элементы.ДействияКонтекстноеМенюДействиеВыполненоВнеПрограммы.Заголовок = НСтр("ru='Отметить выполнение вне программы'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик перед удалением строки таблицы Действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
// 	Отказ - Булево - признак отказа.
// 	ОписаниеОповещения - ОписаниеОповещения - оповещение, которое будет вызвано после завершения.
// 	ПараметрыВидаОбъекта - Структура - Параметры вида объекта. См. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта().
//
Процедура ДействияПередУдалением(Форма, Элемент, Отказ, ОписаниеОповещения, ПараметрыВидаОбъекта) Экспорт
	
	Отказ = Истина;
	ТекущиеДанные = Форма.Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или (ТекущиеДанные.ЭтоУчастник И Не ТекущиеДанные.ЭтоДействие) Тогда
		Возврат;
	КонецЕсли;
	
	// Нельзя удалять, если обработка задана правилами или нет прав.
	Если ДействияКлиентСервер.ОбработкаЗаданаПравилами(ПараметрыВидаОбъекта)
		Или Форма.Элементы.ДействияУдалить.Доступность = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДействияПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("Форма, ТекущиеДанные, ОписаниеОповещения",
			Форма, ТекущиеДанные, ОписаниеОповещения));
		
	Если Форма.Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = ОбщегоНазначенияДокументооборотКлиентСервер.ТекстВопросаНезаписанныхДанных(
			НСтр("ru = 'Открытие'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ДействияПередУдалением
//
Процедура ДействияПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	Форма = Параметры.Форма;
	Объект = Форма.Объект;
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Форма.Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	
	Если Не ТекущиеДанные.ПометкаУдаления Тогда 
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"),
			ТекущиеДанные.ПредставлениеЧистое);
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
			ТекущиеДанные.ПредставлениеЧистое);
	КонецЕсли;
	
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Обработчик после удаления строки таблицы Действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент - ПолеФормы - инициатор события.
//
Процедура ДействияПослеУдаления(Форма, Элемент) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Действия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик после помещения действий в историю
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
//
Процедура ДействияПослеПомещенияВИсторию(Форма) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаДокумента(Форма) Тогда
		
		ДоступностьДействийПоСостоянию =
			ДелопроизводствоКлиентСервер.ДоступностьПоляФормыДокументаПоСостоянию(Форма, "ДобавитьДействие");
		ВариантыДоступности = ДелопроизводствоКлиентСервер.ВариантыДоступностиПоСостоянию();
		
		Если ДоступностьДействийПоСостоянию = ВариантыДоступности.Недоступно Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ВедетсяОбработка = ЗначениеЗаполнено(Форма.СостояниеОбработки) 
		И Не Форма.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Остановлено")
		И Не Форма.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено");
		
	Элементы.ВыполнитьДействие.Доступность = ВедетсяОбработка;
	Элементы.ДобавитьДействие.Доступность = 
		Не Форма.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено");
	
КонецПроцедуры

// Обработчик изменения участника в действии. Если пользователь целенаправленно добавляет дубль,
// то предлагает установить защищенность всем дублям текущего участника
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма инициатор.
Процедура ПредставлениеСтрокиПриИзмененииПредложитьЗащититьДубли(Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Возврат;
	КонецЕсли;
	
	НовыйУчастник = ТекущиеДанные.Участник;
	Если Не ЗначениеЗаполнено(НовыйУчастник) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтапНовогоУчастника = ТекущиеДанные.ПолучитьРодителя();
	
	ФункцияНовогоУчастника = ТекущиеДанные.Функция;
	Если Не ЗначениеЗаполнено(ФункцияНовогоУчастника)Тогда
		Если ЭтапНовогоУчастника <> Неопределено Тогда
			ФункцияНовогоУчастника = ЭтапНовогоУчастника.Функция;
		КонецЕсли;
	КонецЕсли;

	// Проверим наличие дублей вообще
	НайденныеДубли = Новый Массив;
	ВсеДублиВОдномЭтапе = Истина;
	Для Каждого Этап Из Форма.Участники.ПолучитьЭлементы() Цикл
		Если Этап.Функция = ФункцияНовогоУчастника Тогда
			Для Каждого Участник Из Этап.ПолучитьЭлементы() Цикл
				Если Участник.Участник = НовыйУчастник И Участник <> ТекущиеДанные И Не Участник.Защищенный Тогда
					НайденныеДубли.Добавить(Участник);
					Если Этап <> ЭтапНовогоУчастника Тогда
						ВсеДублиВОдномЭтапе = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	// Задать вопрос. Если нет - то удалим участника
	// Если все дубли в одном этапе - не предлагаем защитить, только вручную, если действительно нужно
	Если НайденныеДубли.Количество() И Не ВсеДублиВОдномЭтапе Тогда
		
		НайденныеДубли.Добавить(ТекущиеДанные);
		
		Текст = НСтр("ru = 'Обнаружены одинаковые участники действия в разных этапах. Защитить их от удаления? В противном случае дубли будут удалены.'");
		ПараметрыОповещения = Новый Структура("Дубли, ТекущиеДанные",
			НайденныеДубли, ТекущиеДанные);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОЗащитеДублей",
			ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		УстановитьДоступностьКомандыЗащищенный(Форма); 
	КонецЕсли;
	
КонецПроцедуры

// Обработчик изменения участника в действии. Если пользователь целенаправленно добавляет дубль,
// то предлагает установить защищенность всем дублям текущего участника
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма инициатор.
Процедура ДействияПоказатьВсе(Форма) Экспорт
	
	Если Форма.Модифицированность
		И Не Форма.Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ДействияПоказыватьВсе = Не Форма.ДействияПоказыватьВсе;
	Форма.Элементы.ДействияПоказатьВсе.Пометка = Форма.ДействияПоказыватьВсе;
	
	Форма.ПрочитатьДействия();
	РазвернутьДействия(Форма.Элементы.Действия, Форма.Действия);
	
КонецПроцедуры

#КонецОбласти

// Открывает карточку действия по ссылке
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Действие - ОпределяемыйТип.Действия - ссылка на действие.
//
Процедура ОткрытьКарточкуДействияПоДействию(Форма, Действие) Экспорт
	
	ИмяФормы = ИмяФормыОбъектаДействия(Действие);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Действие);
	ПараметрыФормы.Вставить("ОткрытьКарточкуДействия", Истина);
	
	ОткрытьФорму(ИмяФормы,
		ПараметрыФормы,
		Форма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Возвращает Истину, если нужно открыть форму согласования в режиме замечаний
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	ТекущиеДанные - ДанныеФормыЭлементДерева - данные дерева действий.
// 	
// Возвращаемое значение:
// 	Булево - Истина,  если нужно открыть форму согласования в режиме замечаний
//
Функция ОткрытьФормуСогласования(Форма, ТекущиеДанные) Экспорт
	
	Действие = ТекущиеДанные.Действие;
	СогласованиеВРежимеЗамечаний = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
		Действие, "СогласованиеВРежимеЗамечаний");
	
	Если СогласованиеВРежимеЗамечаний = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Выполняется") Тогда
		РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьДвойнойКликНаУчастникаДействия(
			Форма, ТекущиеДанные);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Открывает форму хода обработки
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
//
Процедура ДействияХодОбработки(Форма) Экспорт
	
	// открыть форму истории
	ПараметрыОткрытия = Новый Структура("Предмет", Форма.Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ХодОбработки.Форма.ФормаХодОбработки", ПараметрыОткрытия);
	
КонецПроцедуры

// Открывает форму просмотра замечаний
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
//
Процедура ДействияЗамечанияСогласования(Форма) Экспорт
	
	СогласованиеВРежимеЗамечанийКлиент.ОткрытьФормуПросмотраЗамечаний(Форма, Форма.Объект.Ссылка);
	
КонецПроцедуры

// Обработчик события ПередРазворачиванием
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	Элемент  - элемент формы
// 	Строка - Ид строки
// 	Отказ - Булево
//
Процедура ДействияПередРазворачиванием(Форма, Элемент, Строка, Отказ) Экспорт
	
	РаскрываемаяСтрока = Форма.Действия.НайтиПоИдентификатору(Строка);
	
	БылиУдаленыСлужебныеСтроки = Ложь;
	
	// Если есть служебная строка - удалим ее.
	ПодчиненныеСтроки = РаскрываемаяСтрока.ПолучитьЭлементы();
	Если ПодчиненныеСтроки.Количество() = 1 Тогда
		Если ПодчиненныеСтроки[0].СлужебнаяСтрока Тогда
			ПодчиненныеСтроки.Удалить(0);
			БылиУдаленыСлужебныеСтроки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если БылиУдаленыСлужебныеСтроки Тогда
		// читаем на сервере подзадачи
		
		ЭлементыУчастники = РаскрываемаяСтрока.ПолучитьЭлементы();
		
		ЭлементСтрока = Новый Структура(
			"ДействиеЗадачи, ЭтоПодзадача, Этап, Участник, 
			|РазыменованныйПользователь, СрокПредставление, 
			|ПредставлениеСотрудники, ГлубинаВложенности,
			|Состояние, ПредставлениеРезультата,
			|Действие, ЭтоУчастник, Идентификатор,
			|ЕстьПодучастники, Функция,
			|НомерКартинки, НомерИтерации, ДатаУстановкиСостояния,
			|ВидУчастника, Подзадача, Заголовок, СрокРассчитанный, СрокПревышен");
		
		СтрокаРодителя = РаскрываемаяСтрока.ПолучитьРодителя();	
		ЗаполнитьЗначенияСвойств(ЭлементСтрока, СтрокаРодителя);	
		
		МассивДочернихСтрок = ДействияВызовСервера.ПолучитьСтрокиПодзадач(ЭлементСтрока);
		
		ВсеПодзадачи = Новый Соответствие; // ключ - Задача, значение - Заголовок
		Для Каждого Строка Из МассивДочернихСтрок Цикл
			ВсеПодзадачи[Строка.Подзадача] = Строка.Заголовок;
		КонецЦикла;	
		ТолькоОднаПодзадача = (ВсеПодзадачи.Количество() = 1);
		
		ВсеПодзадачиВеткиДерева = Новый Соответствие; // ключ - Задача, значение - строка дерева
		
		Для Каждого Строка Из МассивДочернихСтрок Цикл
			
			Если ТолькоОднаПодзадача Тогда
				СтрокаПодзадачи = ЭлементыУчастники.Добавить();
			Иначе
				
				ВеткаПодзадачи = ВсеПодзадачиВеткиДерева.Получить(Строка.Подзадача);
				Если ВеткаПодзадачи = Неопределено Тогда
					
					ВеткаПодзадачи = ЭлементыУчастники.Добавить();
					ВеткаПодзадачи.ЭтоПодзадача = Истина;
					ВеткаПодзадачи.Представление = ВсеПодзадачи[Строка.Подзадача];
					
					ВсеПодзадачиВеткиДерева[Строка.Подзадача] = ВеткаПодзадачи;
					
				КонецЕсли;
				
				СтрокаПодзадачи = ВеткаПодзадачи.ПолучитьЭлементы().Добавить();
				
			КонецЕсли;		
			
			ЗаполнитьЗначенияСвойств(СтрокаПодзадачи, Строка);
			
			Если Не ЗначениеЗаполнено(СтрокаПодзадачи.Представление) Тогда
				Если Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.Исполнитель") Тогда
					СтрокаПодзадачи.Представление = НСтр("ru = 'Исполнить'");
				ИначеЕсли Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.Ответственный") Тогда	
					СтрокаПодзадачи.Представление = НСтр("ru = 'Исполнить (отв.)'");
				ИначеЕсли Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.Проверяющий") Тогда	
					СтрокаПодзадачи.Представление = НСтр("ru = 'Проверить'");
				ИначеЕсли Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.Ознакомляемый") Тогда	
					СтрокаПодзадачи.Представление = НСтр("ru = 'Ознакомиться'");
				ИначеЕсли Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.Согласующий") Тогда	
					СтрокаПодзадачи.Представление = НСтр("ru = 'Согласовать'");
				ИначеЕсли Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.ОбрабатывающийРезультат") Тогда	
					СтрокаПодзадачи.Представление = НСтр("ru = 'Обработать результат'");
				КонецЕсли;	
			КонецЕсли;	
			
			Если Строка.ЕстьПодзадачи Тогда

				// добавим фиктивную подветку для "плюсика"
				// точнее сперва подветку "Подзадачи", а в ней фиктивную подветку
				
				ЭлементВеткаПодзадача = СтрокаПодзадачи.ПолучитьЭлементы().Добавить();
				ЭлементВеткаПодзадача.Представление = НСтр("ru = 'Подзадачи'");
				ЭлементВеткаПодзадача.ЭтоВеткаПодзадачи = Истина;

				ЭлементПодзадача = ЭлементВеткаПодзадача.ПолучитьЭлементы().Добавить();
				ЭлементПодзадача.СлужебнаяСтрока = Истина;
				ЭлементПодзадача.ЭтоПодзадача = Истина;
					
			КонецЕсли;	
			
		КонецЦикла;	 
		
	КонецЕсли;	 
	
КонецПроцедуры
 
Процедура ОткрытьСписокВыбораФайлаОтчета(Форма, Элемент, Поле, ТекущиеДанные)
	
	МассивФайловОтчета = ДействияВызовСервера.МассивФайловОтчета(
		ТекущиеДанные.Действие, ТекущиеДанные.Идентификатор, ТекущиеДанные.ДействиеЗадачи);
		
	Если МассивФайловОтчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
		
	СписокФайлов = Новый СписокЗначений;	
	
	Для Каждого Стр Из МассивФайловОтчета Цикл            
		
		Картинка = БиблиотекаКартинок.Скрепка;
		
		Если НРег(Стр.Расширение) = "doc" Или НРег(Стр.Расширение) = "docx" Тогда
			Картинка = БиблиотекаКартинок.ФорматWord;
		ИначеЕсли НРег(Стр.Расширение) = "xls" Или НРег(Стр.Расширение) = "xlsx" Тогда
			Картинка = БиблиотекаКартинок.ФорматExcel; 
			
		ИначеЕсли НРег(Стр.Расширение) = "pdf" Тогда
			Картинка = БиблиотекаКартинок.ФорматPDF;
			
		ИначеЕсли НРег(Стр.Расширение) = "txt" Тогда
			Картинка = БиблиотекаКартинок.ФорматTXT;
			
		ИначеЕсли НРег(Стр.Расширение) = "htm" Или НРег(Стр.Расширение) = "html" Тогда
			Картинка = БиблиотекаКартинок.ФорматHTML;
			
		ИначеЕсли НРег(Стр.Расширение) = "odt" Тогда
			Картинка = БиблиотекаКартинок.ФорматOpenOfficeWriter;
			
		ИначеЕсли НРег(Стр.Расширение) = "ods" Тогда
			Картинка = БиблиотекаКартинок.ФорматOpenOfficeCalc;

		ИначеЕсли ТипЗнч(Стр.Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
			Картинка = БиблиотекаКартинок.ПредметВспомогательный16;
			
		КонецЕсли;	
		
		СписокФайлов.Добавить(Стр.Приложение, Стр.Наименование,,Картинка);
		
	КонецЦикла;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьСписокВыбораФайлаОтчетаПродолжение",
		ЭтотОбъект,
		Новый Структура("Форма, ТекущиеДанные, Поле", Форма, ТекущиеДанные, Поле));
	
	Форма.ПоказатьВыборИзСписка(ОписаниеОповещения, СписокФайлов, Поле);	
	
КонецПроцедуры	

// Продолжение ОткрытьСписокВыбораФайлаОтчета
//
Процедура ОткрытьСписокВыбораФайлаОтчетаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	     
	
	Приложение = Результат.Значение;
	
	Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		ЕстьПредыдущийАдресФайла = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Параметры.Форма,
			"ПредыдущийАдресФайла");
		
		Если ЕстьПредыдущийАдресФайла Тогда 
			ПредыдущийАдресФайла = Параметры.Форма.ПредыдущийАдресФайла;
		Иначе
			ПредыдущийАдресФайла = Неопределено;
		КонецЕсли;
	
		РаботаСЗадачамиКлиент.ПросмотретьПриложениеЖизненногоЦикла(
			Приложение,
			Параметры.Форма.УникальныйИдентификатор,
			ПредыдущийАдресФайла);
		
	Иначе	
		
		ПоказатьЗначение(, Приложение);		
		
	КонецЕсли;	
	
КонецПроцедуры

#Область ВыполнениеДействийВнеПрограммы

// Обработчик одноименной команды в форме документа
// 
// Параметры:
//  Форма - См. Справочник.ДокументыПредприятия.Форма.ФормаЭлемента
Процедура ВводРезультатаВыполненияДействияВнеСистемы(Форма) Экспорт
	
	Если Форма.Модифицированность Тогда
		Если Не Форма.Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// В действии регистрации или действии подписания происходит изменение документа.
	// Для исключения паразитых блокировок снимаем блокировку от формы.
	Форма.РазблокироватьДанныеФормыДляРедактирования();
	
	Элементы = Форма.Элементы;
	
	ДанныеСтрок = Новый Массив;
	ВыделенныеДействия = Новый Массив;
	ВыделенныеСтроки = Элементы.Действия.ВыделенныеСтроки;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Действия.ДанныеСтроки(Строка);
		ДанныеСтрок.Добавить(ДанныеСтроки);
		ВыделенныеДействия.Вставить(ДанныеСтроки.Номер, ДанныеСтроки.Действие);
	КонецЦикла;
	ВыделенныеДействия = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВыделенныеДействия);
	
	Если ВыделенныеДействия.Найти(Неопределено) <> Неопределено Тогда
		ВыделенныеДействия.Удалить(ВыделенныеДействия.Найти(Неопределено));
	КонецЕсли;
	
	ВсеДействияВыполненыВнеПрограммы = Истина;
	Для Каждого СтрокаДействия Из ДанныеСтрок Цикл
		ВсеДействияВыполненыВнеПрограммы = ВсеДействияВыполненыВнеПрограммы И СтрокаДействия.ВыполненоВнеПрограммы;
	КонецЦикла;
	Если ВсеДействияВыполненыВнеПрограммы Тогда
		
		Если ДанныеСтрок.Количество() > 1 Тогда
			Текст = НСтр("ru = 'Действия выполнены вне программы. Снять отметку?'");
		Иначе
			Текст = НСтр("ru = 'Действие выполнено вне программы. Снять отметку?'");
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеВопросаОбОчисткеРезультатаВыполненияДействияВнеСистемы", ЭтотОбъект, 
			Новый Структура("Действия, ФормаДокумента", ВыделенныеДействия, Форма));
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;


	РезультатПроверки = ДействияВызовСервера.ПроверитьВозможностьВыполненияВыделенныхДействийВнеПрограммы(
		ВыделенныеДействия, Форма.СостояниеОбработки);
	Если РезультатПроверки <> "" Тогда
		ПоказатьПредупреждение(, РезультатПроверки);
		Возврат;
	КонецЕсли;
	
	Для Каждого Действие Из ВыделенныеДействия Цикл
		Если ДействияКлиентСервер.ЭтоДействиеРегистрации(Действие)
			И Не ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомер) Тогда
			ОповещениеРегистрации = Новый ОписаниеОповещения("ПослеВопросаОРегистрацииДокумента", ЭтотОбъект,
				Новый Структура("Форма, Действия", Форма, ВыделенныеДействия));
			ПоказатьВопрос(ОповещениеРегистрации, "При установке результата ""Зарегистрирован"" документ будет зарегистрирован. Продолжить?", РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЦикла;

	ПоказатьФормуВводаРезультатаВыполненияДействияВнеПрограммы(ВыделенныеДействия, Форма);
	
КонецПроцедуры

// Ввод результата выполнения вне программы из формы действия.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма действия
//
Процедура ВводРезультатаВыполненияВнеПрограммыИзФормыДействия(Форма) Экспорт
	
	Если Форма.Объект.ВыполненоВнеПрограммы Тогда

		Текст = НСтр("ru = 'Действие выполнено вне программы. Снять отметку?'");
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеВопросаОбОчисткеРезультатаВыполненияДействияВнеСистемы", ЭтотОбъект, 
			Новый Структура("Действия, ФормаДокумента", 
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект.Ссылка), Форма.ВладелецФормы));
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаРезультатаВыполненияДействияВнеСистемы", ЭтотОбъект,
		Новый Структура("ФормаДействия, ФормаДокумента", Форма, Форма.ВладелецФормы));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Предмет", Форма.Объект.Предмет);
	ДействияСписок = Новый СписокЗначений();
	ДействияСписок.ЗагрузитьЗначения(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект.Ссылка));
	ПараметрыФормы.Вставить("Действия", ДействияСписок);
	ОткрытьФорму("ОбщаяФорма.ВводРезультатаВыполненияДействияВнеПрограммы", ПараметрыФормы, Форма, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Вызывается оповещением после вопроса об очистке результата выполнения действия вне системы
// 
// Параметры:
//  Результат - КодВозвратаДиалога
//  Параметры - Структура
Процедура ПослеВопросаОбОчисткеРезультатаВыполненияДействияВнеСистемы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ДействияВызовСервера.СнятьОтметкуОВыполненииВнеПрограммы(Параметры.Действия);
		
		Параметры.ФормаДокумента.ОбновитьДействияВФорме();
		Параметры.ФормаДокумента.СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(
			Параметры.ФормаДокумента.Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается оповещением после вопроса о регистрации документа.
// 
// Параметры:
//  Результат - КодВозвратаДиалога
//  Параметры - Структура
Процедура ПослеВопросаОРегистрацииДокумента(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПоказатьФормуВводаРезультатаВыполненияДействияВнеПрограммы(Параметры.Действия, Параметры.Форма);
	КонецЕсли;
	
КонецПроцедуры

// Срабатывает после ввода результата выполнения действия вне системы и закрытия формы ввода результата.
// 
// Параметры:
//  Результат - Булево
//  Параметры - Структура
Процедура ПослеВводаРезультатаВыполненияДействияВнеСистемы(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
	
		// Если результат установили прямо из карточки действия - закроем эту карточку
		Если Параметры.Свойство("ФормаДействия") Тогда
			Параметры.ФормаДействия.Закрыть();
		КонецЕсли;
		
		Параметры.ФормаДокумента.ОбновитьДействияВФорме();
		Параметры.ФормаДокумента.СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(
			Параметры.ФормаДокумента.Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ОтложенноеНачалоВыполнения

// Заполняет срок задержки начала выполнения из реквизитов формы.
// Предназначена для вызова из обработчика формы ПередЗаписью.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка действия.
//
Процедура ОтложенноеНачалоВыполненияПередЗаписью(Форма) Экспорт
	
	Форма.Объект.ОтложенноеНачалоВыполнения = 
		Форма.ОтложенноеНачалоВыполненияЧасы * 3600 + Форма.ОтложенноеНачалоВыполненияДни * 86400;
	
КонецПроцедуры

// Обработчик Нажатие ссылки для настройки задержки начала выполнения в карточках настроек и действий.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка настройки действия или действия.
//  СтандартнаяОбработка - Булево - признак стандартной обработки начала выбора.
//
Процедура ОписаниеОтложенногоНачалаВыполненияНажатие(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ЭтоДействие", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Отложенное начало выполнения'"));
	ПараметрыФормы.Вставить("Дни", Форма.ОтложенноеНачалоВыполненияДни);
	ПараметрыФормы.Вставить("Часы", Форма.ОтложенноеНачалоВыполненияЧасы);
	ПараметрыФормы.Вставить("ОтложеннаяДата", Неопределено);
	ПараметрыФормы.Вставить("РежимИзДействия", Ложь);
	
	Если ДействияКлиентСервер.ЭтоДействие(Форма.Объект.Ссылка) Тогда
		ПараметрыФормы.Вставить("ОтложеннаяДата", Форма.Объект.ОтложенноеВыполнениеДата);
		ПараметрыФормы.Вставить("РежимИзДействия", Истина);
		ПараметрыОповещения.Вставить("ЭтоДействие", Истина);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОписаниеОтложенногоНачалаВыполненияНажатиеПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);
	ОткрытьФорму(
		"ОбщаяФорма.НастройкаОтложенногоНачалаВыполнения",
		ПараметрыФормы,
		Форма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение процедуры ОписаниеОтложенногоНачалаВыполненияНажатие.
Процедура ОписаниеОтложенногоНачалаВыполненияНажатиеПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Форма.ОтложенноеНачалоВыполненияДни = Результат.Дни;
	Форма.ОтложенноеНачалоВыполненияЧасы = Результат.Часы;
	Если Параметры.ЭтоДействие Тогда
		Форма.Объект.ОтложенноеВыполнениеДата = Результат.ОтложеннаяДата;
	КонецЕсли;
	
	ДействияКлиентСервер.НастроитьОтображениеОтложенногоНачалаВыполненияДействия(Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик очистки настроек задержки начала выполнения в карточках настроек и действий.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка настройки действия или действия.
//
Процедура ОчиститьЗадержку(Форма) Экспорт
	
	Форма.ОтложенноеНачалоВыполненияДни = 0;
	Форма.ОтложенноеНачалоВыполненияЧасы = 0;
	Если ДействияКлиентСервер.ЭтоДействие(Форма.Объект.Ссылка) Тогда
		Форма.Объект.ОтложенноеВыполнениеДата = Неопределено;
	КонецЕсли;
	
	ДействияКлиентСервер.НастроитьОтображениеОтложенногоНачалаВыполненияДействия(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеНастроекОбработкиВидовОбъектов

// Начинает загрузку настроек обработки для вида объекта с обработкой
// 
// Параметры:
//  ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой
//  ОбработчикЗавершения - Неопределено, ОписаниеОповещения -
//
Процедура ЗагрузитьНастройкиОбработкиВидаОбъектаИзФайла(ВидОбъекта, ОбработчикЗавершения = Неопределено) Экспорт
	
	ПараметрыЗагрузки = КопированиеНастроекОбработкиКлиент.НовыеПараметрыЗагрузкиНастройкиОбработкиИзФайла();
	ПараметрыЗагрузки.ВидОбъекта = ВидОбъекта;
	ПараметрыЗагрузки.ОбработчикЗавершения = ОбработчикЗавершения;
	
	ОбработчикВыбора = Новый ОписаниеОповещения(
		"ОбработатьВыборДатыПриЗагрузкеНастроекОбработкиИзФайла", ЭтотОбъект, ПараметрыЗагрузки);
	
	ЗаголовокВыбора = НСтр("ru = 'Выберите дату начала действия новых настроек'");
	
	ПоказатьВводДаты(ОбработчикВыбора, ОбщегоНазначенияКлиент.ДатаСеанса(), ЗаголовокВыбора, ЧастиДаты.Дата);
	
КонецПроцедуры

#КонецОбласти

// Возвращает имя справочника, который соответствует действию.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//
// Возвращаемое значение:
//  Строка - имя вида справочника (напр., "ДействияИсполнения").
//
Функция ИмяСправочникаПоДействию(Действие) Экспорт

	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		Возврат "ДействияИсполнения";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		Возврат "ДействияОзнакомления";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
		Возврат "ДействияПодписания";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияРегистрации") Тогда
		Возврат "ДействияРегистрации";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
		Возврат "ДействияСогласования";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияУтверждения") Тогда
		Возврат "ДействияУтверждения";
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип действия: %1 (%2)'"),
			Действие,
			ТипЗнч(Действие));
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик после записи карточки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма инициатор.
// 	ПараметрыЗаписи - Структура - содержащая параметры записи.
Процедура ДействияПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт 
	
	Объект = Форма.Объект;
	Если ПараметрыЗаписи.Свойство("ТребуетсяОбновление") И ПараметрыЗаписи.ТребуетсяОбновление Тогда 
		Оповестить("ОбновитьДействияВПредмете", 
			Новый Структура("Предмет, Действие", Объект.Предмет, Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

// Выполнить команду "Готово" из карточки действия. Однотипная "обертка" для всех видов действий
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма элемента одного из справочников действий участников обработки.
Процедура ГотовоИзКарточкиДействия(Форма) Экспорт
	
	Если Не Форма.РежимДиалога Тогда
		ГотовоИзКарточкиДействияПослеПроверкиОтсутствия(Форма);
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ДанныеДляПроверкиОтсутствий =
		ДействияВызовСервера.ДанныеДляПроверкиОтсутствий(Форма.Объект.Ссылка);
	РезультатПроверкиОтсутствий = 
		ОтсутствияКлиент.ПроверитьОтсутствия(
			ДанныеДляПроверкиОтсутствий.Участники,
			ТекущаяДатаСеанса,
			ДанныеДляПроверкиОтсутствий.Срок);
	Если РезультатПроверкиОтсутствий.ЕстьОтсутствия Тогда
		
		Обработчик = Новый ОписаниеОповещения(
			"ГотовоИзКарточкиДействияПослеПредупрежденияОбОтсутствиях",
			ЭтотОбъект,
			Форма);
		
		ОтсутствияКлиент.ПредупредитьОбОтсутствиях(РезультатПроверкиОтсутствий, Обработчик);
			
	Иначе
		
		ГотовоИзКарточкиДействияПослеПроверкиОтсутствия(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет выполненность действия, рекурсивно обходя строку действия и подчиненные.
//
// Параметры:
//   СтрокаДействия - ДанныеФормыЭлементДерева - проверяемая строка действия.
//   ВсеПодчиненныеВыполнены - Булево - неявно возвращаемое значение, Истина, если
//     действие и все подчиненные строки выполнены, и Ложь в обратном случае.
//
Процедура ПроверитьВсеПодчиненныеВыполнены(СтрокаДействия, ВсеПодчиненныеВыполнены)

	// если ЭтоВеткаПодзадачи или ЭтоПодзадача - не делаем проверку, считаем что выполнено
	Если Не ЗначениеЗаполнено(СтрокаДействия.Результат) 
		И Не СтрокаДействия.ЭтоВеткаПодзадачи И Не СтрокаДействия.ЭтоПодзадача Тогда
		ВсеПодчиненныеВыполнены = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДействияТек Из СтрокаДействия.ПолучитьЭлементы() Цикл
		ПроверитьВсеПодчиненныеВыполнены(СтрокаДействияТек, ВсеПодчиненныеВыполнены);
	КонецЦикла;
	
КонецПроцедуры

Процедура РазвернутьДействие(ТаблицаФормы, СтрокаДействия)
	
	// Разворачиваются все строки, в которых не заполнен результат.
	// Если в действии несколько этапов, завершенные этапы не будут развернуты.
	
	ВсеПодчиненныеВыполнены = Ложь;
	ЕстьПодзадачи = Ложь;
	
	Если ЗначениеЗаполнено(СтрокаДействия.Результат) Тогда
		ВсеПодчиненныеВыполнены = Истина;
		ПроверитьВсеПодчиненныеВыполнены(СтрокаДействия, ВсеПодчиненныеВыполнены);
	КонецЕсли;	
	
	Для Каждого СтрокаДействияТек Из СтрокаДействия.ПолучитьЭлементы() Цикл
		Если СтрокаДействияТек.ЭтоПодзадача Тогда
			ЕстьПодзадачи = Истина;
		КонецЕсли;	
	КонецЦикла;

	Если ЕстьПодзадачи Тогда
		ТаблицаФормы.Свернуть(СтрокаДействия.ПолучитьИдентификатор());
	ИначеЕсли ВсеПодчиненныеВыполнены = Ложь Тогда
		ТаблицаФормы.Развернуть(СтрокаДействия.ПолучитьИдентификатор());
	КонецЕсли;	

	Для Каждого СтрокаДействияТек Из СтрокаДействия.ПолучитьЭлементы() Цикл
		РазвернутьДействие(ТаблицаФормы, СтрокаДействияТек);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОткрытьКарточкуДействия(Форма, ТекущиеДанные, Поле)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ДействияУчастниковОткрытиеФормыОбъекта");
	
	ТолькоПросмотр = Форма.ТолькоПросмотр
		Или (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ДобавитьДействие")
			И Не Форма.Элементы.ДобавитьДействие.Доступность);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоУчастник
		И Не (ТекущиеДанные.ЭтоДействие И Поле = Форма.Элементы.ДействияПредставление)
		И ТипЗнч(ТекущиеДанные.Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
			
		Если ОткрытьФормуСогласования(Форма, ТекущиеДанные) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФормы = ДействияВызовСервера.ИмяСправочникаПоВидуИДействию(
		ТекущиеДанные.ВидДействия, ТекущиеДанные.Действие);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Действие);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("ОткрытьКарточкуДействия", Истина);
	
	ОткрытьФорму("Справочник." + ИмяФормы +".ФормаОбъекта",
		ПараметрыФормы,
		Форма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Определяет имя формы объекта действия
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
// 
// Возвращаемое значение:
//  Строка - Имя формы объекта действия.
//
Функция ИмяФормыОбъектаДействия(Действие)
	
	ИмяФормы = "";
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		ИмяФормы = "ДействияИсполнения";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		ИмяФормы = "ДействияОзнакомления";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
		ИмяФормы = "ДействияПодписания";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияРегистрации") Тогда
		ИмяФормы = "ДействияРегистрации";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
		ИмяФормы = "ДействияСогласования";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияУтверждения") Тогда
		ИмяФормы = "ДействияУтверждения";
	КонецЕсли;
	
	ИмяФормы = СтрШаблон("Справочник.%1.ФормаОбъекта", ИмяФормы);
	
	Возврат ИмяФормы;
	
КонецФункции

// Устанавливает пометку команды "Защищенный" в командной панели участников действия.
// Используется при активизации строки в таблице участников.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма-инициатор
//
Процедура УстановитьПометкуКомандыЗащищенный(Форма) Экспорт

	ОбщаяЗащищенность = Неопределено;
	Для Каждого ВыделеннаяСтрока Из Форма.Элементы.Участники.ВыделенныеСтроки Цикл
		
		СтрокаДерева = Форма.Участники.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ОбщаяЗащищенность = Неопределено Тогда
			ОбщаяЗащищенность = СтрокаДерева.Защищенный;
		КонецЕсли;
		
		ОбщаяЗащищенность = ОбщаяЗащищенность И СтрокаДерева.Защищенный;
		
	КонецЦикла;
	
	Если ОбщаяЗащищенность = Неопределено Тогда
		Форма.Элементы.Защищенный.Пометка = Ложь;
	Иначе
		Форма.Элементы.Защищенный.Пометка = ОбщаяЗащищенность;
	КонецЕсли;

КонецПроцедуры

// Устанавливает доступность команды "Защищенный" в командной панели участников действия.
// Используется при активизации строки в таблице участников.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма-инициатор
//
Процедура УстановитьДоступностьКомандыЗащищенный(Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Форма.Элементы.Защищенный.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДействияКлиентСервер.ЭтоДействие(Форма.Объект.Ссылка) Тогда
		МожноИзменятьЗащищенных = Форма.МожноИзменятьЗащищенныхУчастников;
	Иначе
		МожноИзменятьЗащищенных = Истина;
	КонецЕсли;
	
	Форма.Элементы.Защищенный.Доступность = ДоступноИзменениеЗащищенностиУчастника(ТекущиеДанные,
		МожноИзменятьЗащищенных);
	
КонецПроцедуры

// Устанавливает доступность команды "Удалить" в командной панели участников действия.
// Проверяет, не защищен ли от удаления выделенный участник, или участники выделенного этапа.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма-инициатор
//
Процедура УстановитьТолькоПросмотрИУдалениеУчастникаПоЗащищенности(Форма) Экспорт
	
	МожноИзменятьЗащищенных = Истина;
	Если ДействияКлиентСервер.ЭтоДействие(Форма.Объект.Ссылка) Тогда
		МожноИзменятьЗащищенных = Форма.МожноИзменятьЗащищенныхУчастников;
	КонецЕсли;

	УдалениеЗапрещено = Ложь;

	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОбеспечивающийПодписание = ДействияКлиентСервер.ЭтоДействиеПодписания(Форма.Объект.Ссылка) 
			И ТекущиеДанные.ЭтоДочернийУчастник 
			И ТекущиеДанные.Функция = ПредопределенноеЗначение(
			"Перечисление.ФункцииУчастниковПодписания.ОбеспечивающийПодписание");
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		УдалениеЗапрещено = ДействияКлиентСервер.ЕстьЗащищенныеУчастники(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.Защищенный Тогда
		УдалениеЗапрещено = Истина;
	КонецЕсли;

	Если УдалениеЗапрещено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,"Удалить","Доступность",Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,"КонтекстУдалить","Доступность",
			Ложь);
	ИначеЕсли ЭтоОбеспечивающийПодписание И Не ТекущиеДанные.Недоступно Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,"Удалить","Доступность",Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,"КонтекстУдалить","Доступность",
			Истина);
	КонецЕсли;
	

	Если Не ТекущиеДанные.ЭтоЭтап И Не ЭтоОбеспечивающийПодписание Тогда
		Форма.Элементы.ПредставлениеСтроки.ТолькоПросмотр = Форма.Элементы.ПредставлениеСтроки.ТолькоПросмотр 
		Или ТекущиеДанные.Защищенный И Не МожноИзменятьЗащищенных;
	ИначеЕсли ЭтоОбеспечивающийПодписание И Не ТекущиеДанные.Недоступно Тогда
		Форма.Элементы.ПредставлениеСтроки.ТолькоПросмотр = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

// Определяет доступность кнопки "Разные сроки" - она есть не во всех видах действий и доступна не при любых условиях.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма действия или настройки действия
Процедура УстановитьДоступностьКнопкиРазныеСроки(Форма)
	
	Если Форма.Элементы.Найти("УчастникиРазныеСроки") = Неопределено Тогда
		Возврат; // нет кнопки "Разные сроки".
	КонецЕсли;
	Форма.Элементы.УчастникиРазныеСроки.Доступность = Ложь;
	
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Форма.Элементы.Участники.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("СрокПредставление") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Форма.Элементы.СрокПредставление.ТолькоПросмотр Тогда
		Если Не СтрокаДерева.ЭтоЭтап Тогда
			Возврат; // если срок править недоступно, то и кнопку нажимать нельзя.
		КонецЕсли;
		
		// Если это этап, то доступно ли менять участников этого этапа:
		Если СтрокаДерева.Свойство("Недоступно") И СтрокаДерева.Недоступно Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.Свойство("Функция")
		И ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаДерева.Функция) Тогда
		Возврат; // На этих этапах итак нельзя указать несколько участников.
	КонецЕсли;
	
	Если СтрокаДерева.Свойство("Порядок") И СтрокаДерева.Порядок = ПредопределенноеЗначение(
		"Перечисление.ПорядокВыполненияЭтапаДействия.Последовательно") Тогда
		Возврат;
	КонецЕсли;
	ЭтоНастройкаИсполнения = ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.НастройкиДействийИсполнения");
	ЭтоИсполнение = ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ДействияИсполнения") Или ЭтоНастройкаИсполнения;
	
	Если ЭтоНастройкаИсполнения И Форма.Объект.ПоПунктам Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоИсполнение И ЭтоСтрокаРассматривающего(СтрокаДерева) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	Если СтрокаРодитель <> Неопределено Тогда
		Если СтрокаРодитель.Свойство("Порядок") И СтрокаРодитель.Порядок = ПредопределенноеЗначение(
			"Перечисление.ПорядокВыполненияЭтапаДействия.Последовательно") Тогда
			Возврат;
		КонецЕсли;
		Если ЭтоИсполнение И ЭтоСтрокаРассматривающего(СтрокаРодитель) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Элементы.УчастникиРазныеСроки.Доступность = Истина;
	
КонецПроцедуры

// Устанавливает защищенность всем участникам-дублям, если пользователь ответил положительно, 
// иначе удаляет текущего участника.
// 
// Параметры:
//  Результат - КодВозвратаДиалога - Ответ пользователя на вопрос о защите всех дублей от удаления
//  ДополнительныеПараметры - Структура - Структура с текущей строкой и найденными дублями
Процедура ПослеВопросаОЗащитеДублей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для Каждого Строка Из ДополнительныеПараметры.Дубли Цикл
			Строка.Защищенный = Истина;
		КонецЦикла;
	Иначе
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ТекущиеДанные.ПредставлениеСтроки = Неопределено;
		ТекущиеДанные.Участник = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет доступность изменения защищенности участника обработки документа.
// Нельзя изменять защищенность участника, если она установлена в настройке действия.
// 
// Параметры:
//  Участник - ДанныеФормыЭлементДерева - Строка участника в дереве участников обработки
//  МожноИзменятьЗащищенных - Булево
// 
// Возвращаемое значение:
//  Булево - Доступно изменение защищенности участника
// 
Функция ДоступноИзменениеЗащищенностиУчастника(Участник, МожноИзменятьЗащищенных) Экспорт
	
	Результат = Истина;
	
	Если Участник.ЭтоЭтап Тогда
		Результат = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(Участник.Участник) Тогда
		Результат = Ложь;
	ИначеЕсли Участник.Свойство("Недоступно") И Участник.Недоступно Тогда
		Результат = Ложь;
	ИначеЕсли Участник.Свойство("ИзНастройки") И Участник.ИзНастройки И Не МожноИзменятьЗащищенных Тогда
		Результат = Не Участник.ЗащищенныйВНастройке;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет значение галки "Больше не показывать" после предупреждения о защищенности участников.
// 
// Параметры:
//  Результат - Структура
//  ДополнительныеПараметры
Процедура ПослеПредупрежденияОЗащищенностиУчастников(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.БольшеНеЗадаватьЭтотВопрос Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиБольшеНеПоказывать",
			"ПоказыватьПредупреждениеПриУстановкеЗащитыУчастникаДействия", Ложь, , , Истина);
	КонецЕсли;
	
КонецПроцедуры
	
// Определяет, является ли текущий исполнитель Рассматривающим
//
// Параметры:
//  СтрокаИсполнителя - СтрокаТаблицыЗначений, ДанныеФормыЭлементКоллекции - строка в таблице Исполнители.
//
// Возвращаемое значение:
//   Булево - возвращает Истину, если в текущей строке есть поле Функция, и оно имеет значение Рассматривающий.
//
Функция ЭтоСтрокаРассматривающего(СтрокаИсполнителя) 
	
	Возврат СрокиИсполненияПроцессовКлиентСервер.ЗначениеСвойстваОбъекта(СтрокаИсполнителя, "Функция", Неопределено) = 
		ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Рассматривающий");
	
КонецФункции

Функция ЭтоЦифра(Символ)
	
	Возврат СтрНайти("0123456789", Символ) > 0;
	
КонецФункции

Функция ПолучитьНомер(ВыбраннаяСтрока)
	
	СтрНомер = "";
	
	ЧислоСимволов = СтрДлина(ВыбраннаяСтрока);
	Если ЧислоСимволов = 0 Тогда
		Возврат СтрНомер;
	КонецЕсли;		
	
	Символ = Сред(ВыбраннаяСтрока, 1, 1); // первый символ
	Если Не ЭтоЦифра(Символ) И Не (Символ = ".") Тогда
		Возврат СтрНомер;
	КонецЕсли;		
	
	РежимНомера = Ложь;
	СобраннаяСтрока = "";
	
	Для Поз = 1 По ЧислоСимволов Цикл
		
		Символ = Сред(ВыбраннаяСтрока, Поз, 1);
		
		Если РежимНомера = Ложь Тогда
			
			Если ЭтоЦифра(Символ) Тогда
				РежимНомера = Истина;
				СобраннаяСтрока = Символ;
				Продолжить;
			КонецЕсли;	
			
		Иначе
			
			Если Не ЭтоЦифра(Символ) И Не (Символ = ".") Тогда
				Возврат СобраннаяСтрока;
			КонецЕсли;		
			
			СобраннаяСтрока = СобраннаяСтрока + Символ;
			ПозицияВСтроке = СтрДлина(СобраннаяСтрока);
			
			Если ПозицияВСтроке > 10 Тогда  // собрали
				Возврат СобраннаяСтрока;
			КонецЕсли;			
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат СтрНомер;
	
КонецФункции

// Функция преобразует Windows имя файла в URL OpenOffice.
Функция ПреобразоватьВURL(ИмяФайла)
	
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/");
	
КонецФункции

// Создание структуры для параметров OpenOffice.
Функция ПрисвоитьЗначениеСвойству(Объект, ИмяСвойства, ЗначениеСвойства)
	
	Свойства = Объект.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Свойства.Name = ИмяСвойства;
	Свойства.Value = ЗначениеСвойства;
	
	Возврат Свойства;
	
КонецФункции

// Обработчик оповещения процедуры ГотовоИзКарточкиДействия.
// 
// Параметры:
//  Результат - КодВозвратаДиалога.
//  Форма - ФормаКлиентскогоПриложения - Форма элемента одного из справочников действий участников обработки.
// 
Процедура ГотовоИзКарточкиДействияПослеПредупрежденияОбОтсутствиях(Результат, Форма) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ГотовоИзКарточкиДействияПослеПроверкиОтсутствия(Форма);
	
КонецПроцедуры

// Выполнить команду "Готово" из карточки действия. Однотипная "обертка" для всех видов действий
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма элемента одного из справочников действий участников обработки.
Процедура ГотовоИзКарточкиДействияПослеПроверкиОтсутствия(Форма) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ДействияУчастниковВыполнениеКомандыГотово");
	
	Если Не Форма.Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

// Продолжает выбор действия вопросом о незаписанных данных при необходимости.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Поле - ПолеФормы
//  ТекущиеДанные - ДанныеФормыСтруктура
// 
Процедура ДействияВыборВопросНезаписанныхДанных(Форма, Поле, ТекущиеДанные)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДействияВыборПродолжение",
		ЭтотОбъект,
		Новый Структура("Форма, ТекущиеДанные, Поле", Форма, ТекущиеДанные, Поле));
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка")
		И Форма.Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = ОбщегоНазначенияДокументооборотКлиентСервер.ТекстВопросаНезаписанныхДанных(
			НСтр("ru = 'Открытие'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

// Показать форму ввода результата выполнения действия вне программы.
// 
// Параметры:
//  Действия - Массив Из ОпределяемыйТип.Действия - Действия
//  ФормаДокумента - ФормаКлиентскогоПриложения - Форма документа
Процедура ПоказатьФормуВводаРезультатаВыполненияДействияВнеПрограммы(Действия, ФормаДокумента)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаРезультатаВыполненияДействияВнеСистемы", ЭтотОбъект,
		Новый Структура("ФормаДокумента", ФормаДокумента));
	
	ПараметрыФормы = Новый Структура;
	ДействияСписок = Новый СписокЗначений;
	ДействияСписок.ЗагрузитьЗначения(Действия);
	ПараметрыФормы.Вставить("Предмет", ФормаДокумента.Объект.Ссылка);
	ПараметрыФормы.Вставить("Действия", ДействияСписок);
	ОткрытьФорму("ОбщаяФорма.ВводРезультатаВыполненияДействияВнеПрограммы", ПараметрыФормы, ФормаДокумента, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область КопированиеНастроекОбработкиВидовОбъектов

// Обработать выбор даты при загрузке настроек обработки из файла.
// 
// Параметры:
//  ВыбраннаяДата - Дата, Неопределено -
//  ПараметрыЗагрузки - см. КопированиеНастроекОбработкиКлиент.НовыеПараметрыЗагрузкиНастройкиОбработкиИзФайла
Процедура ОбработатьВыборДатыПриЗагрузкеНастроекОбработкиИзФайла(ВыбраннаяДата, ПараметрыЗагрузки) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗагрузки.ДатаНачалаДействия = ВыбраннаяДата;
	
	КопированиеНастроекОбработкиКлиент.ЗагрузитьНастройкиОбработкиИзФайла(ПараметрыЗагрузки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти