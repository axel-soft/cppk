#Область ПрограммныйИнтерфейс

// Возвращает готовое HTMLПредставлениеСтрока.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы
//  ПредпросмотрУрезан  - Булево - возвращаемое значение
//  Расширение -Строка
//  МасштабироватьPDFИКартинки - Булево - Если Неопределено - то по настройке
//  ВсегоПорцийПредпросмотра - Число
//  НомерПорции - Число
// 
// Возвращаемое значение:
//  - Строка
//  - Структура:
//    * ПредставлениеФайла - Строка
//    * РаспознанныйТекст - Строка
// 
Функция ГотовоеHTMLПредставление(Файл, ПредпросмотрУрезан, Расширение,
	МасштабироватьPDFИКартинки = Неопределено,
	ВсегоПорцийПредпросмотра = 0, НомерПорции = 0) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Файл,
		"ТекущаяВерсия");
	ВерсияФайла = РеквизитыФайла.ТекущаяВерсия;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл); // чтобы файл обновился.      
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Файл", Файл);
	Запрос.Параметры.Вставить("ВерсияФайла", ВерсияФайла); 
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(*) КАК ВсегоПорцийПредпросмотра
	               |ИЗ
	               |	РегистрСведений.ПредпросмотрФайлов КАК ПредпросмотрФайлов
	               |ГДЕ
	               |	ПредпросмотрФайлов.Файл = &Файл
	               |	И ПредпросмотрФайлов.ВерсияФайла = &ВерсияФайла";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ВсегоПорцийПредпросмотра = Выборка.ВсегоПорцийПредпросмотра;
	Если ВсегоПорцийПредпросмотра = 0 Тогда
		ВсегоПорцийПредпросмотра = 1;
		Возврат "";
	КонецЕсли;
	
	Если НомерПорции < 0 Тогда
		НомерПорции = 0;
	КонецЕсли;	
	Если НомерПорции > ВсегоПорцийПредпросмотра - 1 Тогда
		НомерПорции = ВсегоПорцийПредпросмотра - 1;
	КонецЕсли;	
	
	Запрос.Параметры.Вставить("НомерБлока", НомерПорции);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ПредпросмотрФайлов.HTMLПредставлениеСтрока КАК HTMLПредставлениеСтрока,
	               |	ПредпросмотрФайлов.HTMLПредставлениеХранилище КАК HTMLПредставлениеХранилище,
	               |	ПредпросмотрФайлов.ПредпросмотрУрезан КАК ПредпросмотрУрезан
	               |ИЗ
	               |	РегистрСведений.ПредпросмотрФайлов КАК ПредпросмотрФайлов
	               |ГДЕ
	               |	ПредпросмотрФайлов.Файл = &Файл
	               |	И ПредпросмотрФайлов.ВерсияФайла = &ВерсияФайла
	               |	И ПредпросмотрФайлов.НомерБлока = &НомерБлока";
	Результат = Запрос.Выполнить();
	
	СтрокаРС = Результат.Выгрузить()[0];
	
	ПредпросмотрУрезан = СтрокаРС.ПредпросмотрУрезан;
	
	СведенияОРаспознанномТексте = СтрокаРС.HTMLПредставлениеХранилище.Получить();
	Если Не ЗначениеЗаполнено(СведенияОРаспознанномТексте) Тогда
		СведенияОРаспознанномТексте = СтрокаРС.HTMLПредставлениеСтрока; // поддержка старых данных.
	КонецЕсли;
	
	РегистрыСведений.ПредпросмотрФайлов.ОбновитьДату(Файл);
	
	Если ОбзорФайловКлиентСервер.ЭтоКартинка(Расширение) Или ОбзорФайловКлиентСервер.ЭтоPDF(Расширение) Тогда
		
		Если МасштабироватьPDFИКартинки = Неопределено Тогда
			
			МасштабироватьPDFИКартинки = ФайловыеФункцииПовтИсп.МасштабироватьPDFИКартинки();
			
		КонецЕсли;
		
		Если МасштабироватьPDFИКартинки = Ложь Тогда
			Если ТипЗнч(СведенияОРаспознанномТексте) = Тип("Строка") Тогда
				СведенияОРаспознанномТексте = СтрЗаменить(СведенияОРаспознанномТексте, "width=100%", "");
			ИначеЕсли ТипЗнч(СведенияОРаспознанномТексте) = Тип("Структура")
				И СведенияОРаспознанномТексте.Свойство("РаспознанныйТекст") Тогда
				СведенияОРаспознанномТексте.РаспознанныйТекст = СтрЗаменить(
					СведенияОРаспознанномТексте.РаспознанныйТекст, "width=100%", "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(СведенияОРаспознанномТексте) = Тип("Строка") Тогда
		
		РаспознанныйТекст = РегистрыСведений.ТекстыФайлов.ТекстФайлаHTML(Файл);
		Если Не ЗначениеЗаполнено(РаспознанныйТекст) Тогда
			РаспознанныйТекст = РегистрыСведений.ТекстыВерсийФайлов.ТекстВерсииФайлаHTML(ДанныеФайла.ТекущаяВерсия);
		КонецЕсли;
		Если ЗначениеЗаполнено(РаспознанныйТекст) Тогда
			СведенияОРаспознанномТексте = Новый Структура("ПредставлениеФайла, РаспознанныйТекст",
				СведенияОРаспознанномТексте, РаспознанныйТекст);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СведенияОРаспознанномТексте;
	
КонецФункции

// Записать в регистр.
// 
// Параметры:
//  Файл - СправочникССылка.Файлы
//  HTMLПредставление - Строка
//  ВерсияФайла  - СправочникССылка.ВерсииФайлов
//  ПредпросмотрУрезан  - Булево
Процедура ЗаписатьВРегистр(Файл, HTMLПредставление, ВерсияФайла, ПредпросмотрУрезан) Экспорт

	РегистрыСведений.ПредпросмотрФайлов.Записать(Файл, HTMLПредставление, ВерсияФайла, 
		ПредпросмотрУрезан);

КонецПроцедуры

// Записать в регистр массив порций предпросмотра.
// 
// Параметры:
//  Файл - СправочникССылка.Файлы
//  МассивHTMLСтрок - Массив из Строка
//  ВерсияФайла  - СправочникССылка.ВерсииФайлов
//  ПредпросмотрУрезан  - Булево
Процедура ЗаписатьВРегистрМассивПорцийПредпросмотра(Файл, МассивHTMLСтрок, ВерсияФайла, ПредпросмотрУрезан) Экспорт

	РегистрыСведений.ПредпросмотрФайлов.ЗаписатьМассив(Файл, МассивHTMLСтрок, ВерсияФайла, 
		ПредпросмотрУрезан);

КонецПроцедуры

// Двоичные данные.
// 
// Параметры:
//  ДанныеФайла - Структура, ДвоичныеДанные - Данные файла:
// * РабочийКаталогВладельца - Строка, Неопределено -
// * ПолноеИмяФайлаВРабочемКаталоге - Строка, Неопределено -
// * ПапкаДляСохранитьКак - Произвольный, Дата, Неопределено -
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные
Функция ДвоичныеДанные(ДанныеФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанные = Неопределено;
	
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда		
		НавигационнаяСсылка = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
		Если ЭтоАдресВременногоХранилища(НавигационнаяСсылка) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(НавигационнаяСсылка);
		Иначе
			Если ДанныеФайла.Свойство("СсылкаТекущейВерсии") Тогда
				ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(
				ДанныеФайла.СсылкаТекущейВерсии);
				ДвоичныеДанные = ХранилищеФайла.Получить();
			КонецЕсли;	
		КонецЕсли;
		
		Возврат ДвоичныеДанные;
	
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции	

// Заполняет данные файла для предпросмотра.
// 
// Параметры:
//  Файл  - СправочникССылка.Файлы
//  РеквизитыФайла  - Структура
//  ДанныеФайла - Структура
//  ПараметрыПолученияПредставления - Структура, см ОбзорФайловКлиент.ПараметрыПолученияПредставления()
//  ТекстОшибки - Строка
// 
Процедура ЗаполнитьДанныеФайлаДляПредпросмотра(
	Файл,
	РеквизитыФайла,
	ДанныеФайла,
	ПараметрыПолученияПредставления,
	ТекстОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Файл, "Наименование, ТекущаяВерсияРасширение, ТекущаяВерсияРазмер, ТекущаяВерсия, Зашифрован");
	
	Попытка
		Если ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(РеквизитыФайла.ТекущаяВерсияРасширение) Тогда
			ДанныеФайла = ТаймлистВызовСервера.ДанныеФайлаДляОткрытия(Файл);
		Иначе
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
				Файл, , ПараметрыПолученияПредставления.УникальныйИдентификатор);
		КонецЕсли;
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(
			НСтр("ru = '<html><body>Не удалось сформировать предпросмотр по причине: <br><br> %1</body></html>'"),
			ПредставлениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Реквизиты файла и данные визуализации.
// 
// Параметры:
//  ПараметрыПолученияПредставления - Структура - см ОбзорФайловКлиент.ПараметрыПолученияПредставления()
//  РеквизитыФайла  - Структура
//  ДанныеФайла - Структура
//  ВыполняетсяРаспознавание - Булево - Возвращаемый параметр, означает что выполняется распознование.
//  ВызовБиблиотекиИнтеграции - Булево
// 
// Возвращаемое значение:
//  - Строка - строка html представления.
//  - ДокументPDF
//  - Неопределено
//  - ДвоичныеДанные
//  - ТабличныйДокумент
//  - Структура:
//     * Расшифровка - Строка
//     * Автопротокол - Строка
//   - Структура:
//      * ПредставлениеФайла - Строка
//      * РаспознанныйТекст - Строка
//   - Структура:
//     * ДокументPDF - ДокументPDF
//     * РаспознанныйТекст - Строка
// 
Функция РеквизитыФайлаИДанныеВизуализации(
	ПараметрыПолученияПредставления,
	РеквизитыФайла,
	ДанныеФайла,
	ВыполняетсяРаспознавание = Ложь,
	ВызовБиблиотекиИнтеграции = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполняетсяРаспознавание = Ложь;
	
	ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	
	ИспользоватьLibreOffice = ПараметрыПолученияПредставления.ИспользоватьLibreOffice;
	
	Если Не ЗначениеЗаполнено(ПараметрыПолученияПредставления.ПредпросмотрОфисныхФайлов) 
		И ЗначениеЗаполнено(ПараметрыПолученияПредставления.ИдентификаторКлиента) Тогда
		
		ПараметрыПолученияПредставления.ПредпросмотрОфисныхФайлов =
			ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами/ПредпросмотрОфисныхФайлов",
			ПараметрыПолученияПредставления.ИдентификаторКлиента);
		
		Если Не ЗначениеЗаполнено(ПараметрыПолученияПредставления.ПредпросмотрОфисныхФайлов) Тогда
			ПараметрыПолученияПредставления.ПредпросмотрОфисныхФайлов = Перечисления.ПредпросмотрОфисныхФайлов.OpenOfficeMSOffice;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивРасширений = СтрРазделить(ПараметрыПолученияПредставления.ПоддерживаемыеТипы, " ", Ложь);
	Расширение = НРег(РеквизитыФайла.ТекущаяВерсияРасширение);
	Если МассивРасширений.Найти(Расширение) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если РеквизитыФайла.Зашифрован Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	
	Если Не ЭтоМобильныйКлиент Тогда
		ВсегдаПолучатьHtmlДляPdf = ПараметрыПолученияПредставления.ВсегдаПолучатьHtmlДляPdf;
	Иначе
		ВсегдаПолучатьHtmlДляPdf = Истина;
	КонецЕсли;
	
	ПоказыватьPdfСредствами1С = РаботаСФайламиСлужебныйПовтИсп.ПоказыватьPdfСредствами1С();
	Если ВсегдаПолучатьHtmlДляPdf = Истина Тогда
		ПоказыватьPdfСредствами1С = Ложь;
	КонецЕсли;
	
	ПолеPDFРаботаетВВебКлиенте = РаботаСPDFПовтИсп.ПолеPDFРаботаетВВебКлиенте();
	
	Если (Не ПолеPDFРаботаетВВебКлиенте И ОбщегоНазначения.ЭтоВебКлиент()) Тогда
		ПоказыватьPdfСредствами1С = Ложь;
	КонецЕсли;
	
	НаСервереЕстьImageMagick = ИспользоватьImageMagickДляРаспознаванияPDF();

	Если Не ЭтоМобильныйКлиент И Расширение = "pdf" И Не ПоказыватьPdfСредствами1С И Не НаСервереЕстьImageMagick Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПолученияПредставления.РасширениеОригинальное = Расширение;
	
	ДвоичныеДанные = Неопределено; 
	Если ПараметрыПолученияПредставления.Свойство("ДвоичныеДанные") Тогда
		ДвоичныеДанные = ПараметрыПолученияПредставления.ДвоичныеДанные;
	КонецЕсли;
	
	ИспользоватьТаймлист = ТаймлистПовтИсп.ТаймлистИспользуется();
	ЭтоРасширениеПоддерживаемоеТаймлист = ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Расширение);
	
	Если ЭтоРасширениеПоддерживаемоеТаймлист Тогда
		
		Если ДанныеФайла = Неопределено Тогда
			Возврат ОбзорФайловКлиентСервер.HTMLПредставлениеНеПоддерживаемыйФайл(Расширение);
		КонецЕсли;
		
		ДанныеОбзора = Новый Структура("Расшифровка, Автопротокол", "", "");
		
		Если ДанныеФайла.Расшифровка <> Неопределено Тогда
			
			РасшифровкаHTML = ДанныеФайла.Расшифровка.Получить();
			Если ЗначениеЗаполнено(РасшифровкаHTML) Тогда
				ДанныеОбзора.Расшифровка = ДанныеФайла.Расшифровка.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеФайла.Автопротокол <> Неопределено Тогда
			
			АвтопротоколHTML = ДанныеФайла.Автопротокол.Получить();
			Если ЗначениеЗаполнено(АвтопротоколHTML) Тогда
				ДанныеОбзора.Автопротокол = АвтопротоколHTML;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбзора.Расшифровка) Тогда
			
			Если ДанныеФайла.Статус = Перечисления.ТаймлистСтатусы.Расшифрован
				И Не ЗначениеЗаполнено(ДанныеФайла.Задание)
				И ТаймлистПовтИсп.ДоступноРаспознаваниеПоЗапросу()
				И ВызовБиблиотекиИнтеграции = Ложь Тогда
				
				ДанныеОбзора.Расшифровка = ТаймлистКлиентСервер.HTMLПредставлениеКомандаПолучитьАвтопротокол(ДанныеФайла.Ссылка,
					ДанныеОбзора.Расшифровка);
				
			ИначеЕсли (ДанныеФайла.Статус = Перечисления.ТаймлистСтатусы.АвтопротоколГотовКПолучению
				Или ДанныеФайла.Статус = Перечисления.ТаймлистСтатусы.ПолучениеАвтопротокола
				Или ДанныеФайла.Задание = Перечисления.ТаймлистТипыЗаданий.ПодготовитьДанныеКПолучениюАвтопротокола)
					И ВызовБиблиотекиИнтеграции = Ложь Тогда
				
				ДанныеОбзора.Расшифровка = ТаймлистКлиентСервер.HTMLПредставлениеПолучениеАвтопротокола(ДанныеОбзора.Расшифровка);
				
			Иначе
				
				ДанныеОбзора.Расшифровка = ТаймлистКлиентСервер.РасшифровкаБезТегаАвтопротокола(ДанныеОбзора.Расшифровка);
				
			КонецЕсли;
			
			Возврат ДанныеОбзора;
			
		КонецЕсли;
		
		Если ИспользоватьТаймлист Тогда
			
			Если ДанныеФайла.Задание = Перечисления.ТаймлистТипыЗаданий.ЗагрузитьФайлВСервис
				Или ДанныеФайла.Задание = Перечисления.ТаймлистТипыЗаданий.НачатьРасшифровку
				Или ДанныеФайла.Задание = Перечисления.ТаймлистТипыЗаданий.ПроверитьРасшифровку Тогда
				ПредставлениеHTMLФайла =
					ОбзорФайловКлиентСервер.HTMLПредставлениеВыполняетсяРаспознование();
				ВыполняетсяРаспознавание = Истина;
			Иначе
				ДоступноРаспознаваниеТаймлист = ТаймлистПовтИсп.ДоступноРаспознаваниеПоЗапросу();
				ПредставлениеHTMLФайла =
					ОбзорФайловКлиентСервер.HTMLПредставлениеРаспознатьВТаймлист(
						ДанныеФайла.Ссылка, ДанныеФайла.ТекущаяВерсияРазмер, ДоступноРаспознаваниеТаймлист);
			КонецЕсли;
			
			Возврат ПредставлениеHTMLФайла;
			
		Иначе
			
			Возврат ОбзорФайловКлиентСервер.HTMLПредставлениеНеПоддерживаемыйФайл(Расширение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Попытка
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ДанныеФайла.Ссылка, , ПараметрыПолученияПредставления.УникальныйИдентификатор);
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат СтрШаблон(
				НСтр("ru = '<html><body>Не удалось сформировать предпросмотр по причине: <br><br> %1</body></html>'"),
				ТекстОшибки);
			// файл мог быть удален полностью.
		КонецПопытки;
		 
		Расширение = ДанныеФайла.Расширение;
		РеквизитыФайла.ТекущаяВерсияРасширение = ДанныеФайла.Расширение; 
		
		Если ДанныеФайла.ТребуетсяСоздатьВизуализациюЭП
			И ДанныеФайла.ВизуализацияЭПДобавлена = Ложь Тогда
			
			ПараметрыПолученияПредставления.ТребуетсяСоздатьВизуализациюЭП = Истина;
			Возврат ДвоичныеДанные; // тут пока нет визуализации - ее надо создать на клиенте
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ДвоичныеДанные(ДанныеФайла);
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбзорФайловКлиентСервер.ЭтоФайлСПодготовкойНаСервере(Расширение)
		Или (ИспользоватьLibreOffice И ОбзорФайловКлиентСервер.ЭтоФайлДляLibreOffice(Расширение)) Тогда
		
		Если ПоказыватьPdfСредствами1С И НРег(Расширение) = "pdf" Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
			ДвоичныеДанные.Записать(ИмяФайла);
			
			Документ = Новый ДокументPDF;
			Документ.Прочитать(ИмяФайла);
			
			Если ДанныеФайла <> Неопределено И ДанныеФайла.СтатусРаспознаванияТекста = "Распознано" Тогда
				
				ДанныеОбзора = Новый Структура("ДокументPDF, РаспознанныйТекст", "", "");
				РаспознанныйТекстHTML = РегистрыСведений.ТекстыФайлов.ТекстФайлаHTML(ДанныеФайла.Ссылка);
				Если Не ЗначениеЗаполнено(РаспознанныйТекстHTML) Тогда
					РаспознанныйТекстHTML = РегистрыСведений.ТекстыВерсийФайлов.ТекстВерсииФайлаHTML(ДанныеФайла.ТекущаяВерсия);
				КонецЕсли;
				ДанныеОбзора.РаспознанныйТекст = РаспознанныйТекстHTML;
				ДанныеОбзора.ДокументPDF = Документ;
				
				Возврат ДанныеОбзора;
				
			КонецЕсли;
			
			Возврат Документ; // не формируем html
			
		КонецЕсли;
		
		ПредельныйРазмерДляПредпросмотра = ФайловыеФункцииПовтИсп.ПредельныйРазмерДляПредпросмотра();
		
		Если НРег(Расширение) = "pdf"
			И РеквизитыФайла.ТекущаяВерсияРазмер <> 0 
			И РеквизитыФайла.ТекущаяВерсияРазмер > ПредельныйРазмерДляПредпросмотра
			И ПараметрыПолученияПредставления.ИгнорироватьМаксРазмер <> Истина Тогда
			
			ПараметрыПолученияПредставления.ЭтоСлужебноеСообщение = Истина;
			Возврат ОбзорФайловКлиентСервер.HTMLПредставлениеПревышенРазмер(ПредельныйРазмерДляПредпросмотра);
			
		КонецЕсли;
		
		ПрограммаРаспознавания = РаботаСФайламиВызовСервера.ПрограммаРаспознавания();
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
			Расширение, НаСервереЕстьImageMagick, ПрограммаРаспознавания);
			
		Если РасширениеПоддерживается И ДанныеФайла <> Неопределено 
			И ДанныеФайла.СтатусРаспознаванияТекста = "Распознано" Тогда
			
			ДанныеОбзора = Новый Структура("ПредставлениеФайла, РаспознанныйТекст", "", "");
			РаспознанныйТекстHTML = РегистрыСведений.ТекстыФайлов.ТекстФайлаHTML(ДанныеФайла.Ссылка);
			Если Не ЗначениеЗаполнено(РаспознанныйТекстHTML) Тогда
				РаспознанныйТекстHTML = РегистрыСведений.ТекстыВерсийФайлов.ТекстВерсииФайлаHTML(ДанныеФайла.ТекущаяВерсия);
			КонецЕсли;
			ДанныеОбзора.РаспознанныйТекст = РаспознанныйТекстHTML;
			ДанныеОбзора.ПредставлениеФайла = ПолучитьПредставлениеИзДвоичныхДанных(ДвоичныеДанные, ДанныеФайла,
				ПараметрыПолученияПредставления, НаСервереЕстьImageMagick, ИспользоватьLibreOffice);
			
			Возврат ДанныеОбзора;
			
		КонецЕсли;
		
		Возврат ПолучитьПредставлениеИзДвоичныхДанных(ДвоичныеДанные, ДанныеФайла,
			ПараметрыПолученияПредставления, НаСервереЕстьImageMagick, ИспользоватьLibreOffice);
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Получить текст из xml.
// 
// Параметры:
//  Файл - СправочникССылка.Файлы
// 
// Возвращаемое значение:
//  Строка - plain текст
// 
Функция ПолучитьТекстИзXml(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";

	ТаблДок = ТабличныйДокументФайлаXML(Файл);
	Если ТаблДок <> Неопределено Тогда
	
		ВременнаяПапка = ПолучитьИмяВременногоФайла("");
		СоздатьКаталог(ВременнаяПапка);
		ВременнаяПапка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапка);
		ИмяФайлаСПутемHTML = ВременнаяПапка + "fname" + ".html";
		ТаблДок.Записать(ИмяФайлаСПутемHTML, ТипФайлаТабличногоДокумента.HTML5);
	
		ТекстHTML = Новый ТекстовыйДокумент();
		ТекстHTML.Прочитать(ИмяФайлаСПутемHTML, "UTF-8");
		ТекстИзфайла = ТекстHTML.ПолучитьТекст();
		
		УдалитьФайлы(ИмяФайлаСПутемHTML);
		УдалитьФайлы(ВременнаяПапка);
		
		Текст = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстИзфайла);
	
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции	

// Удалить из персональных настроек лишнее.
// 
// Параметры:
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ПредпросмотрОфисныхФайлов - ПеречислениеСсылка.ПредпросмотрОфисныхФайлов
//  ЧтоУдалить  - строка
Процедура УдалитьИзНастроек(ИдентификаторКлиента, ПредпросмотрОфисныхФайлов, ЧтоУдалить) Экспорт
	
	Если ПредпросмотрОфисныхФайлов = Перечисления.ПредпросмотрОфисныхФайлов.OpenOfficeMSOffice
		И ЧтоУдалить = "MSOffice" Тогда
			
		ПредпросмотрОфисныхФайлов = Перечисления.ПредпросмотрОфисныхФайлов.OpenOffice;

	ИначеЕсли ПредпросмотрОфисныхФайлов = Перечисления.ПредпросмотрОфисныхФайлов.OpenOfficeMSOffice
		И ЧтоУдалить = "OpenOffice" Тогда
			
		ПредпросмотрОфисныхФайлов = Перечисления.ПредпросмотрОфисныхФайлов.MSOffice;
		
	Иначе	
		
		ПредпросмотрОфисныхФайлов = Перечисления.ПредпросмотрОфисныхФайлов.НеИспользовать;
		
	КонецЕсли;
			
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"НастройкиРаботыСДокументами/ПредпросмотрОфисныхФайлов", 
		ИдентификаторКлиента, 
		ПредпросмотрОфисныхФайлов);
	
КонецПроцедуры

// Записывает в журнал регистрации
// 
// Параметры:
//  ТекстСообщения  - Строка
Процедура ЗаписьЖурналаРегистрацииСервер(ТекстСообщения) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбзорФайла'", Метаданные.ОсновнойЯзык.КодЯзыка), 
		УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	
КонецПроцедуры

// Получить HTMLПредпросмотра. Вернет строку html.
//
// Параметры:
//   Файл - СправочникСсылка.Файлы
//   ПредпросмотрУрезан - Булево
//   ИгнорироватьМаксРазмер - Булево
//   ВызовБиблиотекиИнтеграции - Булево
//
// Возвращаемое значение:
//   Строка - HTML предпросмотра файла.
//   Структура:
//     * ПредставлениеФайла - Строка
//     * РаспознанныйТекст - Строка
//   Структура:
//     * Расшифровка - Строка
//     * Автопротокол - Строка
//  
Функция ПолучитьHTMLПредпросмотра(Файл, ПредпросмотрУрезан, ИгнорироватьМаксРазмер = Ложь,
	ВызовБиблиотекиИнтеграции = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		РеквФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Файл,
			"ТекущаяВерсияРасширение, Редактирует");
		
		РасширениеФайла = РеквФайла.ТекущаяВерсияРасширение;
		Редактирует = РеквФайла.Редактирует;
		
		РедактируетТекущийПользователь =
			(СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь()).Найти(Редактирует) <> Неопределено);
		
		Если РедактируетТекущийПользователь Тогда
			ПредставлениеHTMLФайла = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
			Возврат ПредставлениеHTMLФайла;
		КонецЕсли;
		
		ПредставлениеHTMLФайла = "";                
		
		ВсегоПорцийПредпросмотра = 0;
		НомерПорции	 = 0;
		
		Если Не ИгнорироватьМаксРазмер Тогда
			ПредставлениеHTMLФайла = ГотовоеHTMLПредставление(
				Файл, ПредпросмотрУрезан, РасширениеФайла,,ВсегоПорцийПредпросмотра, НомерПорции);
				
			Если ВсегоПорцийПредпросмотра > 1 Тогда	
				ПредпросмотрУрезан = Истина;
			КонецЕсли;	
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредставлениеHTMLФайла) Тогда
			
			Если ВызовБиблиотекиИнтеграции = Истина
				И ТипЗнч(ПредставлениеHTMLФайла) = Тип("Структура")
				И ПредставлениеHTMLФайла.Свойство("ПредставлениеФайла") Тогда
				Возврат ПредставлениеHTMLФайла.ПредставлениеФайла;
			КонецЕсли;
			
			Возврат ПредставлениеHTMLФайла;
			
		КонецЕсли;
		
		ЭтоФайлСПодготовкойНаСервере = ОбзорФайловКлиентСервер.ЭтоФайлСПодготовкойНаСервере(
			РасширениеФайла);
		Если Не ЭтоФайлСПодготовкойНаСервере Тогда
			Возврат ОбзорФайловКлиентСервер.HTMLПредставлениеЕщеНеСформировано();
		КонецЕсли;
		
		РеквизитыФайла = Неопределено;
		ДанныеФайла = Неопределено;
		ТекстОшибки = "";
		
		ПараметрыПолученияПредставления = ОбзорФайловКлиентСервер.ПараметрыПолученияПредставления();
		
		ПараметрыПолученияПредставления.ВсегдаПолучатьHtmlДляPdf = Истина; // именно при интеграции
		ПараметрыПолученияПредставления.ТребуетсяСоздатьВизуализациюЭП = Ложь;  
		
		Если ВызовБиблиотекиИнтеграции = Истина Тогда
			ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотраPDF();
		Иначе	
			ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
		КонецЕсли;	
		
		ПараметрыПолученияПредставления.ПредпросмотрУрезан = Ложь;
		ПараметрыПолученияПредставления.Расширение = РасширениеФайла;
		ПараметрыПолученияПредставления.ПоддерживаемыеТипы =
			ОбзорФайловКлиентСервер.ПоддерживаемыеТипыПредпросмотра();
		ПараметрыПолученияПредставления.ИгнорироватьМаксРазмер = ИгнорироватьМаксРазмер;
		
		ЗаполнитьДанныеФайлаДляПредпросмотра(Файл, РеквизитыФайла, ДанныеФайла,
			ПараметрыПолученияПредставления, ТекстОшибки); 
			
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ДанныеВизуализации = РеквизитыФайлаИДанныеВизуализации(
			ПараметрыПолученияПредставления,
			РеквизитыФайла,
			ДанныеФайла,,
			ВызовБиблиотекиИнтеграции);
		
		ПредпросмотрУрезан = ПараметрыПолученияПредставления.ПредпросмотрУрезан;
		РасширениеФайла = НРег(РеквизитыФайла.ТекущаяВерсияРасширение);
		
		Если ДанныеВизуализации = Неопределено Тогда
			ПредставлениеHTMLФайла = ОбзорФайловКлиентСервер.HTMLПредставлениеНеПоддерживаемыйФайл(
				РасширениеФайла);
			Возврат ПредставлениеHTMLФайла;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеВизуализации) = Тип("Строка") Тогда
			
			ПредставлениеHTMLФайла = ДанныеВизуализации;
			
			ЗаписатьВРегистр(Файл, ПредставлениеHTMLФайла,
				РеквизитыФайла.ТекущаяВерсия, ПредпросмотрУрезан);
			
			Возврат ПредставлениеHTMLФайла;
			
		ИначеЕсли ТипЗнч(ДанныеВизуализации) = Тип("Структура") Тогда
			
			Если ДанныеВизуализации.Свойство("ПредставлениеФайла") Тогда
				Возврат ДанныеВизуализации.ПредставлениеФайла;
			ИначеЕсли ДанныеВизуализации.Свойство("Расшифровка") Тогда
				Возврат ДанныеВизуализации.Расшифровка;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ""; // сюда не должны попасть
		
	Исключение
		
		ПредставлениеОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при получении предпросмотра объекта:<br>
				|%1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ОбзорФайловКлиентСервер.СообщениеВПредпросмотр(ПредставлениеОшибки);
		
	КонецПопытки;
	
КонецФункции

// Предпросмотр есть в базе.
// 
// Параметры:
//  Файл - СправочникССылка.Файлы
//  ВерсияФайла - СправочникССылка.ВерсииФайлов
// 
// Возвращаемое значение:
//  Булево - Предпросмотр есть в базе
Функция ПредпросмотрЕстьВБазе(Файл, ВерсияФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Файл", Файл);
	Запрос.Параметры.Вставить("ВерсияФайла", ВерсияФайла);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПредпросмотрФайлов.ПредпросмотрУрезан
	|ИЗ
	|	РегистрСведений.ПредпросмотрФайлов КАК ПредпросмотрФайлов
	|ГДЕ
	|	ПредпросмотрФайлов.Файл = &Файл
	|	И ПредпросмотрФайлов.ВерсияФайла = &ВерсияФайла";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции		

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПредставлениеИзДвоичныхДанных(ДвоичныеДанные,
	ДанныеФайла,
	ПараметрыПолученияПредставления,
	НаСервереЕстьImageMagick,
	ИспользоватьLibreOffice)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеHTMLФайла = "";
	ИмяФайлаСПутемHTML = "";  
	
	Наименование = "file"; 
	РасширениеФайла = НРег(ПараметрыПолученияПредставления.Расширение);
	Если ЗначениеЗаполнено(ДанныеФайла) Тогда
		Наименование = ДанныеФайла.ПолноеНаименование;
		РасширениеФайла = НРег(ДанныеФайла.Расширение);
	КонецЕсли;
		
	ИмяФайлаСПутем = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	ДвоичныеДанные.Записать(ИмяФайлаСПутем);
	
	Если ОбзорФайловКлиентСервер.ЭтоКартинка(РасширениеФайла) Тогда
		
		Если ОбзорФайловКлиентСервер.ЭтоКартинкаTif(РасширениеФайла) Тогда
			Картинка = Новый Картинка(ДвоичныеДанные);
			
			ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(Картинка);
			ОбрабатываемаяКартинка.УстановитьФормат(ФорматКартинки.PNG);
			ОбрабатываемаяКартинка.УстановитьГлубинуЦвета(ГлубинаЦвета.БитНаПиксел24);
			КартинкаPng = ОбрабатываемаяКартинка.ПолучитьКартинку();
			
			РасширениеФайла = "png";
			ДвоичныеДанные = КартинкаPng.ПолучитьДвоичныеДанные(); 
			
		ИначеЕсли ОбзорФайловКлиентСервер.ЭтоКартинкаBMP(РасширениеФайла) Тогда
			
			Картинка = Новый Картинка(ДвоичныеДанные);
			
			ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(Картинка);
			ОбрабатываемаяКартинка.УстановитьФормат(ФорматКартинки.PNG);
			ОбрабатываемаяКартинка.УстановитьГлубинуЦвета(ГлубинаЦвета.БитНаПиксел24);
			КартинкаPng = ОбрабатываемаяКартинка.ПолучитьКартинку();
			
			РасширениеФайла = "png";
			ДвоичныеДанные = КартинкаPng.ПолучитьДвоичныеДанные(); 
			
		КонецЕсли;	
			
		ЗашифрованныеДанные = Base64Строка(ДвоичныеДанные);
		ПредставлениеHTMLФайла = "<!DOCTYPE html>
			|<html>
			|<body>
			|<table width=100%>
			|<tr><td width=100%>
			|<img width=100% src=""data:image/" + РасширениеФайла + ";base64," + ЗашифрованныеДанные + """>
			|</td></tr>
			|</table>
			|</body>
			|</html>";
			
	ИначеЕсли ОбзорФайловКлиентСервер.ЭтоPDF(РасширениеФайла) Тогда
		
		Если Не НаСервереЕстьImageMagick И Не ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
			Возврат Неопределено; // не делаем превью pdf
		КонецЕсли;
		
		Если НаСервереЕстьImageMagick Тогда
			ДвоичныеДанныеКартинок = МассивДвоичныхДанныхКартинокИзPdf(
				ДвоичныеДанные, ПараметрыПолученияПредставления.ПредпросмотрУрезан);
	
			ПредставлениеHTMLФайла = "<!DOCTYPE html>
						|<html>
						|<body>
						|<table width=100%>";
						
			НомерСтраницы = 0;			
						
			Для Каждого ДвДанные Из ДвоичныеДанныеКартинок Цикл
				
				ЗашифрованныеДанные = Base64Строка(ДвДанные);
				
				ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла +
					"<tr><td width=100%>"
					+ "<img width=100% src=""data:image/" + "png" + ";base64," 
					+ ЗашифрованныеДанные + """>"
					+ "</td></tr>" 
					+ Символы.ПС;
				
				// номер страницы
				ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла +
					"<tr><td>"
					+ Строка(НомерСтраницы + 1) 
					+ "</td></tr>" 
					+ Символы.ПС;
					
				НомерСтраницы = НомерСтраницы + 1;	
				
			КонецЦикла;
						
			ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла + 
						"</table>
						|</body>
						|</html>";
		Иначе
			Если ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
				Возврат ДанныеФайла;
			КонецЕсли;
		КонецЕсли;
					
	ИначеЕсли ОбзорФайловКлиентСервер.ЭтоXML(РасширениеФайла) Тогда
		
		ТаблДок = Неопределено;
		Если ДанныеФайла <> Неопределено Тогда
			ТаблДок = ТабличныйДокументФайлаXML(ДанныеФайла);
		Иначе
			ТаблДок = ТабличныйДокументДвоичныхДанныхXML(ДвоичныеДанные);
		КонецЕсли;
		
		Если ТаблДок <> Неопределено Тогда
		
			ВременнаяПапка = ПолучитьИмяВременногоФайла("");
			СоздатьКаталог(ВременнаяПапка);
			ВременнаяПапка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапка);
			ИмяФайлаСПутемHTML = ВременнаяПапка + Наименование + ".html";
			ТаблДок.Записать(ИмяФайлаСПутемHTML, ТипФайлаТабличногоДокумента.HTML5);
			
		Иначе
				
			КонвертацияXMLВHtml = ПолучитьОбщийМакет("КонвертацияXMLВHtml");
			ИмяXsl = ПолучитьИмяВременногоФайла("xsl");
			КонвертацияXMLВHtml.Записать(ИмяXsl);
		
			Преобразование = Новый ПреобразованиеXSL;
			Преобразование.ЗагрузитьИзФайла(ИмяXsl);
			ПредставлениеHTMLФайла = Преобразование.ПреобразоватьИзФайла(ИмяФайлаСПутем);
			
			УдалитьФайлы(ИмяXsl);
			
			Возврат ПредставлениеHTMLФайла;
		
		КонецЕсли;

	ИначеЕсли ОбзорФайловКлиентСервер.ЭтоMXL(РасширениеФайла) Тогда
		
		ТаблДок = ТабличныйДокументФайлаMXL(ДвоичныеДанные);
		Если ТаблДок <> Неопределено Тогда
		
			ВременнаяПапка = ПолучитьИмяВременногоФайла("");
			СоздатьКаталог(ВременнаяПапка);
			ВременнаяПапка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапка);
			ИмяФайлаСПутемHTML = ВременнаяПапка + Наименование + ".html";
			ТаблДок.Записать(ИмяФайлаСПутемHTML, ТипФайлаТабличногоДокумента.HTML5);
			
		КонецЕсли;
		
	ИначеЕсли ОбзорФайловКлиентСервер.ЭтоTXT(РасширениеФайла) Тогда

		Кодировка = РаботаСФайламиВызовСервера.ПолучитьКодировкуФайлаДляПредпросмотра(ДвоичныеДанные, ДанныеФайла, РасширениеФайла);
		
		КодировкаДляЧтения = ?(Кодировка = "utf-8_WithoutBOM", "utf-8", Кодировка);

		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаСПутем, КодировкаДляЧтения);
		СтрокаТекста = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();												
		ТекстHtml = РаботаС_HTML.ПолучитьHTMLИзТекста(СтрокаТекста);
										
		ВременнаяПапка = ПолучитьИмяВременногоФайла("");
		СоздатьКаталог(ВременнаяПапка);
		ВременнаяПапка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапка);
		ИмяФайлаСПутемHTML = ВременнаяПапка + Наименование + ".html";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСПутемHTML);
		ЗаписьТекста.Записать(ТекстHtml);
		ЗаписьТекста.Закрыть();
						
	ИначеЕсли ОбзорФайловКлиентСервер.ЭтоHTML(РасширениеФайла) Тогда

		ИмяФайлаСПутемHTML = ИмяФайлаСПутем;

	ИначеЕсли ИспользоватьLibreOffice И ОбзорФайловКлиентСервер.ЭтоФайлДляLibreOffice(РасширениеФайла) Тогда
		
		ДвДанныеHtml = РаботаСФайламиВызовСервера.ДвоичныеДанныеHtmПреобразованныеВLibreOffice(ДвоичныеДанные, РасширениеФайла);
		ИмяФайлаСПутемHTML = ПолучитьИмяВременногоФайла("html");
		ДвДанныеHtml.Записать(ИмяФайлаСПутемHTML);
		
	КонецЕсли;
	
	Если ОбзорФайловКлиентСервер.ЭтоКартинка(РасширениеФайла) Или ОбзорФайловКлиентСервер.ЭтоPDF(РасширениеФайла) Тогда
		
		Если ПараметрыПолученияПредставления.МасштабироватьPDFИКартинки = Неопределено Тогда	
			ПараметрыПолученияПредставления.МасштабироватьPDFИКартинки = ФайловыеФункцииПовтИсп.МасштабироватьPDFИКартинки();
		КонецЕсли;
		
		Если ПараметрыПолученияПредставления.МасштабироватьPDFИКартинки = Ложь Тогда
			ПредставлениеHTMLФайла = СтрЗаменить(ПредставлениеHTMLФайла, "width=100%", "");
		КонецЕсли;	
		
		Возврат ПредставлениеHTMLФайла;
	КонецЕсли;
	
	Если Не ОбзорФайловКлиентСервер.ЭтоPDF(РасширениеФайла) И ЗначениеЗаполнено(ИмяФайлаСПутемHTML) Тогда
		
		ТекстHTML = Новый ТекстовыйДокумент();
		ТекстHTML.Прочитать(ИмяФайлаСПутемHTML);
		ТекстИзфайла = ТекстHTML.ПолучитьТекст();
		
		ТекстHtmlНРег = НРег(ТекстИзфайла);
		
		Если СтрНайти(ТекстHtmlНРег, "charset=utf-8") <> 0 
			Или СтрНайти(ТекстHtmlНРег, "charset=""utf-8""") <> 0 Тогда
			
			ТекстHTML = Новый ТекстовыйДокумент();
			ТекстHTML.Прочитать(ИмяФайлаСПутемHTML, "UTF-8");
			ТекстИзфайла = ТекстHTML.ПолучитьТекст();
			
		КонецЕсли;	
		
		ТекстИзфайла = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ТекстИзфайла);
		
		ТекстHTMLСКартинками = ОбзорФайловКлиентСервер.HTMLСКартинками(
			ТекстИзфайла,
			Наименование, 
			ВременнаяПапка);
		ПредставлениеHTMLФайла = ТекстHTMLСКартинками;
	
	КонецЕсли;

	Возврат ПредставлениеHTMLФайла;
	
КонецФункции

Функция ТабличныйДокументФайлаMXL(ДвоичныеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент; 
	
	ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТабличныйДокументФайлаXML(ДанныеФайла)
	
	Если ДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыВизуализации = ПараметрыВизуализацииШтампаЭДО();
	
	РезультатФормирования = ОбменСКонтрагентамиДОСлужебный.ПредставлениеДанныхПоФайлу(
		ДанныеФайла.Ссылка, ДанныеФайла.ТекущаяВерсия, ПараметрыВизуализации);
	
	Если Не РезультатФормирования.Успех
		Или ТипЗнч(РезультатФормирования.ТабличныйДокумент) <> Тип("ТабличныйДокумент") Тогда
			
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатФормирования.ТабличныйДокумент;
	
КонецФункции

// Получает табличный документ по двоичным данным XML.
// 
// Параметры:
//  ДвоичныеДанныеФайла - ДвоичныеДанные 
// 
// Возвращаемое значение:
//  Неопределено, ТабличныйДокумент, Строка - Табличный документ двоичных данных XML
//
Функция ТабличныйДокументДвоичныхДанныхXML(ДвоичныеДанныеФайла)
	
	СведенияОФайле = ОбменСКонтрагентамиДОСлужебный.СведенияОЭДИзФайла(ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла));
	
	// Если не смогли прочитать -- это не является неуспехом. Просто он не формализованный. Выводим как файл.
	Если ТипЗнч(СведенияОФайле) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	ВидДокумента = СведенияОФайле.ВидДокументаЭДО;
	ПараметрыВизуализации = ОбменСКонтрагентамиИнтеграция.НовыеПараметрыВизуализации();
	ПараметрыВизуализации.ВыводитьДопДанные           = Ложь;
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Ложь;
	ПараметрыВизуализации.ВыводитьКопияВерна          = Ложь;
	
	РезультатПредставленияТабличногоДокумента =
		ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения(
			ВидДокумента, ДвоичныеДанныеФайла,, ПараметрыВизуализации);
	
	Если ТипЗнч(РезультатПредставленияТабличногоДокумента) <> Тип("Структура")
		Или Не РезультатПредставленияТабличногоДокумента.Успех Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатПредставленияТабличногоДокумента.ПредставлениеДокумента;	
	
КонецФункции	

Функция ПараметрыВизуализацииШтампаЭДО()
	
	ПараметрыВизуализации = ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента();
	
	Настройки = ОбменЭДОДокументооборот.НастройкиВизуализацииФайлаФормализованногоЭДО();
	
	ПараметрыВизуализации.ВыводитьДопДанные = Не Настройки.ОтключитьВыводДопДанных;
	ПараметрыВизуализации.ВыводитьКопияВерна = Не Настройки.ОтключитьВыводКопияВерна;
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Настройки.ВыводитьБанковскиеРеквизиты;
	
	Возврат ПараметрыВизуализации;
	
КонецФункции

Функция ИспользоватьImageMagickДляРаспознаванияPDF()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.ИспользоватьImageMagickДляРаспознаванияPDF.Получить()
		И Константы.ИспользоватьGhostscript.Получить(); 
	 
КонецФункции	 

Функция МассивДвоичныхДанныхКартинокИзPdf(ДанныеФайла, ПредпросмотрУрезан) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	
	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");

	ДвДанныеФайлаPdf = ДвоичныеДанные(ДанныеФайла);
	
	ИмяФайлаPdf = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
		+ "src.pdf";
	ДвДанныеФайлаPdf.Записать(ИмяФайлаPdf);

	МассивПутейPng = РаботаСКартинками.ПреобразоватьPdfВPng(
		ИмяФайлаPdf, ВременнаяПапкаДляРазархивирования);
	
	МассивВозврата = Новый Массив;
	
	ПредпросмотрУрезан = (МаксимальноеЧислоСтраницДляПредпросмотра <> 0) И
		(МассивПутейPng.Количество() > МаксимальноеЧислоСтраницДляПредпросмотра);
	
	Для Каждого ПутьPng Из МассивПутейPng Цикл
		
		ДвДанныеКартинки = Новый ДвоичныеДанные(ПутьPng);
		МассивВозврата.Добавить(ДвДанныеКартинки);
		
		Если (МаксимальноеЧислоСтраницДляПредпросмотра <> 0)
			И МассивВозврата.Количество() >= МаксимальноеЧислоСтраницДляПредпросмотра Тогда
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);
	
	Возврат МассивВозврата;

КонецФункции

Функция МассивДвоичныхДанныхКартинокИзДвочиныхДанныхPdf(ДвДанныеФайлаPdf) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	
	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");

	ИмяФайлаPdf = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
		+ "src.pdf";
	ДвДанныеФайлаPdf.Записать(ИмяФайлаPdf);

	МассивПутейPng = РаботаСКартинками.ПреобразоватьPdfВPng(
		ИмяФайлаPdf, ВременнаяПапкаДляРазархивирования);
	
	МассивВозврата = Новый Массив;
	
	Для Каждого ПутьPng Из МассивПутейPng Цикл
		
		ДвДанныеКартинки = Новый ДвоичныеДанные(ПутьPng);
		МассивВозврата.Добавить(ДвДанныеКартинки);
		
		Если МассивВозврата.Количество() >= МаксимальноеЧислоСтраницДляПредпросмотра Тогда
			Прервать;
		КонецЕсли;
			
	КонецЦикла;	
	
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);
	
	Возврат МассивВозврата;

КонецФункции

Функция ПолучитьСтрокуПредпросмотраPDF(АдресPDF) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвДанныеPDF = ПолучитьИзВременногоХранилища(АдресPDF); 
	
	ДвоичныеДанныеКартинок = МассивДвоичныхДанныхКартинокИзДвочиныхДанныхPdf(
		ДвДанныеPDF);

	ПредставлениеHTMLФайла = "<!DOCTYPE html>
				|<html>
				|<body>
				|<table width=100%>";
				
	НомерСтраницы = 0;			
				
	Для Каждого ДвДанные Из ДвоичныеДанныеКартинок Цикл
		
		ЗашифрованныеДанные = Base64Строка(ДвДанные);
		
		ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла +
			"<tr><td width=100%>"
			+ "<img width=100% src=""data:image/" + "png" + ";base64," 
			+ ЗашифрованныеДанные + """>"
			+ "</td></tr>" 
			+ Символы.ПС;
		
		// номер страницы
		ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла +
			"<tr><td>"
			+ Строка(НомерСтраницы + 1) 
			+ "</td></tr>" 
			+ Символы.ПС;
			
		НомерСтраницы = НомерСтраницы + 1;	
		
	КонецЦикла;				
				
	ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла + 
				"</table>
				|</body>
				|</html>";
				
	Возврат ПредставлениеHTMLФайла;			
	
КонецФункции

// Максимальное число страниц предпросмотра  для PDF
// 
// Возвращаемое значение:
//  Число - если 0  - то ПредпросмотрПолностью
Функция МаксимальноеЧислоСтраницДляПредпросмотраPDF() Экспорт
	
	Возврат 10; 
	 
КонецФункции	 

Функция ЕстьГотовыйHTMLПредпросмотра(Файл, ВерсияФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПредпросмотрФайлов.Файл,
		|	ПредпросмотрФайлов.ВерсияФайла
		|ИЗ
		|	РегистрСведений.ПредпросмотрФайлов КАК ПредпросмотрФайлов
		|ГДЕ
		|	ПредпросмотрФайлов.Файл = &Файл
		|	И ПредпросмотрФайлов.ВерсияФайла = &ВерсияФайла");
	Запрос.УстановитьПараметр("Файл", Файл);
	Запрос.УстановитьПараметр("ВерсияФайла", ВерсияФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти