
// Переопределяемая часть функции ПолучитьПраваПоОбъекту
//
Функция ЗапросНаПраваПоОбъекту(
			ОбъектыДоступа,
			ТипОбъекта,
			МетаданныеОбъекта,
			ЗаменяемыеПодстроки,
			СотрудникиОтбор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(ОбъектыДоступа[0]) Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.ОбъектДоступа,
			|	ВложенныйЗапрос.Сотрудник,
			|	МАКСИМУМ(ВложенныйЗапрос.Чтение) КАК Чтение,
			|	МАКСИМУМ(ВложенныйЗапрос.Изменение) КАК Изменение,
			|	МАКСИМУМ(ВложенныйЗапрос.Добавление) КАК Добавление,
			|	МАКСИМУМ(ВложенныйЗапрос.Удаление) КАК Удаление,
			|	МАКСИМУМ(ВложенныйЗапрос.УправлениеПравами) КАК УправлениеПравами
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаШаблона.Ссылка КАК ОбъектДоступа,
			|		СоставСубъектов.Сотрудник КАК Сотрудник,
			|		ИСТИНА КАК Чтение,
			|		ЛОЖЬ КАК Изменение,
			|		ЛОЖЬ КАК Добавление,
			|		ЛОЖЬ КАК Удаление,
			|		ЛОЖЬ КАК УправлениеПравами
			|	ИЗ
			|		%ТаблицаШаблона% КАК ТаблицаШаблона
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|				ПО УчастникиПроцессов.Участник = СоставСубъектов.Субъект
			|					И СоставСубъектов.ИмяОбластиДелегирования В (&ИменаОбластейЗамещения)
			|					%ОтборПоСотрудникуСоставаСубъектов%
			|			ПО ТаблицаШаблона.КомплексныйПроцесс = УчастникиПроцессов.Процесс
			|	
			|	ГДЕ
			|		ТаблицаШаблона.Ссылка В(&ОбъектыДоступа)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаШаблона.Ссылка,
			|		СоставСубъектов.Сотрудник,
			|		ИСТИНА,
			|		ИСТИНА,
			|		ИСТИНА,
			|		ИСТИНА,
			|		ЛОЖЬ
			|	ИЗ
			|		%ТаблицаШаблона% КАК ТаблицаШаблона
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцессБП
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|				ПО КомплексныйПроцессБП.Автор = СоставСубъектов.Субъект
			|					И СоставСубъектов.ИмяОбластиДелегирования В (&ИменаОбластейЗамещения)
			|					%ОтборПоСотрудникуСоставаСубъектов%
			|			ПО ТаблицаШаблона.КомплексныйПроцесс = КомплексныйПроцессБП.Ссылка
			|	
			|	ГДЕ
			|		ТаблицаШаблона.Ссылка В(&ОбъектыДоступа)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаШаблона.Ссылка,
			|		ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
			|		ПраваПоДескрипторамДоступаОбъектов.Чтение,
			|		ПраваПоДескрипторамДоступаОбъектов.Изменение,
			|		ПраваПоДескрипторамДоступаОбъектов.Добавление,
			|		ПраваПоДескрипторамДоступаОбъектов.Удаление,
			|		ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами
			|	ИЗ
			|		%ТаблицаШаблона% КАК ТаблицаШаблона
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
			|				ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
			|			ПО ТаблицаШаблона.Ссылка = ДескрипторыДляОбъектов.Объект
			|		
			|	ГДЕ
			|		ДескрипторыДляОбъектов.Объект В(&ОбъектыДоступа)
			|		%ОтборПоСотруднику%) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.ОбъектДоступа,
			|	ВложенныйЗапрос.Сотрудник";
			
		ЗаменяемыеПодстроки.Вставить("%ТаблицаШаблона%", ОбъектыДоступа[0].Метаданные().ПолноеИмя());
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контроль") Тогда	
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контроль.Ссылка КАК ОбъектДоступа,
			|	СоставСубъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	Контроль.Автор = СоставСубъектов.Сотрудник КАК Добавление,
			|	ИСТИНА КАК Изменение,
			|	ИСТИНА КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО (Контроль.Контролер = СоставСубъектов.Субъект
			|				ИЛИ Контроль.Автор = СоставСубъектов.Субъект)
			|			И СоставСубъектов.ИмяОбластиДелегирования В ("""", ""Контроль"")
			|ГДЕ
			|	Контроль.Ссылка В (&ОбъектыДоступа)
			|	%ОтборПоСотрудникуСоставаСубъектов%";
			
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.Отсутствие") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Отсутствие.Ссылка КАК ОбъектДоступа,
			|	СоставСубъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	ВЫБОР
			|		КОГДА Отсутствие.Автор = СоставСубъектов.Сотрудник
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Добавление,
			|	ВЫБОР
			|		КОГДА СоставСубъектов.Субъект ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Изменение,
			|	ЛОЖЬ КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	Документ.Отсутствие КАК Отсутствие
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО (Отсутствие.Сотрудник = СоставСубъектов.Субъект
			|				ИЛИ Отсутствие.Автор = СоставСубъектов.Субъект)
			|			И СоставСубъектов.ИмяОбластиДелегирования В(&ИменаОбластейЗамещения)
			|			%ОтборПоСотрудникуСоставаСубъектов%
			|ГДЕ
			|	Отсутствие.Ссылка В (&ОбъектыДоступа)";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ТерриторииИПомещения") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТерриторииИПомещения.Ссылка КАК ОбъектДоступа,
			|	СоставСубъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	ЛОЖЬ КАК Добавление,
			|	ВЫБОР
			|		КОГДА СоставСубъектов.Субъект ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Изменение,
			|	ЛОЖЬ КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	Справочник.ТерриторииИПомещения КАК ТерриторииИПомещения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО ТерриторииИПомещения.Ответственный = СоставСубъектов.Субъект
			|			И СоставСубъектов.ИмяОбластиДелегирования В(&ИменаОбластейЗамещения)
			|			%ОтборПоСотрудникуСоставаСубъектов%
			|ГДЕ
			|	ТерриторииИПомещения.Ссылка В (&ОбъектыДоступа)";
			
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.Бронь") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Бронь.Ссылка КАК ОбъектДоступа,
			|	СоставСубъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	Бронь.Автор = СоставСубъектов.Сотрудник КАК Добавление,
			|	НЕ СоставСубъектов.Субъект ЕСТЬ NULL КАК Изменение,
			|	ЛОЖЬ КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	Документ.Бронь КАК Бронь
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО Бронь.Автор = СоставСубъектов.Субъект
			|			И СоставСубъектов.ИмяОбластиДелегирования В(&ИменаОбластейЗамещения)
			|			%ОтборПоСотрудникуСоставаСубъектов%
			|ГДЕ
			|	Бронь.Ссылка В (&ОбъектыДоступа)";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПоказателиПроцессов") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПоказателиПроцессов.Ссылка КАК ОбъектДоступа,
			|	СоставСубъектов.Сотрудник КАК Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	ПоказателиПроцессов.Автор = СоставСубъектов.Сотрудник КАК Добавление,
			|	НЕ СоставСубъектов.Субъект ЕСТЬ NULL КАК Изменение,
			|	ЛОЖЬ КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	Справочник.ПоказателиПроцессов КАК ПоказателиПроцессов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО ПоказателиПроцессов.Автор = СоставСубъектов.Субъект
			|			И СоставСубъектов.ИмяОбластиДелегирования В(&ИменаОбластейЗамещения)
			|			%ОтборПоСотрудникуСоставаСубъектов%
			|ГДЕ
			|	ПоказателиПроцессов.Ссылка В (&ОбъектыДоступа)";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.МестаХраненияДел") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.ОбъектДоступа,
			|	ВложенныйЗапрос.Сотрудник,
			|	МАКСИМУМ(ВложенныйЗапрос.Чтение) КАК Чтение,
			|	МАКСИМУМ(ВложенныйЗапрос.Добавление) КАК Добавление,
			|	МАКСИМУМ(ВложенныйЗапрос.Изменение) КАК Изменение,
			|	МАКСИМУМ(ВложенныйЗапрос.Удаление) КАК Удаление,
			|	МАКСИМУМ(ВложенныйЗапрос.УправлениеПравами) КАК УправлениеПравами
			|ИЗ
			|	(ВЫБРАТЬ
			|		МестаХраненияДел.Ссылка КАК ОбъектДоступа,
			|		ПраваПоДескрипторамДоступаОбъектов.Сотрудник КАК Сотрудник,
			|		ПраваПоДескрипторамДоступаОбъектов.Чтение КАК Чтение,
			|		ПраваПоДескрипторамДоступаОбъектов.Добавление КАК Добавление,
			|		ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Изменение,
			|		ПраваПоДескрипторамДоступаОбъектов.Удаление КАК Удаление,
			|		ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами КАК УправлениеПравами
			|	ИЗ
			|		Справочник.МестаХраненияДел КАК МестаХраненияДел
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
			|				ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
			|			ПО МестаХраненияДел.Организация = ДескрипторыДляОбъектов.Объект
			|	ГДЕ
			|		МестаХраненияДел.Ссылка В(&ОбъектыДоступа)
			|		%ОтборПоСотруднику%
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		МестаХраненияДел.Ссылка,
			|		СотрудникиВКонтейнерах.Сотрудник,
			|		ИСТИНА,
			|		ПраваРолей.Добавление,
			|		ПраваРолей.Изменение,
			|		ПраваРолей.Изменение,
			|		ЛОЖЬ
			|	ИЗ
			|		Справочник.МестаХраненияДел КАК МестаХраненияДел,
			|		РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
			|			ПО ПолномочияСотрудников.Полномочия = ПрофилиГруппДоступаРоли.Ссылка
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваРолей КАК ПраваРолей
			|			ПО ПрофилиГруппДоступаРоли.Роль = ПраваРолей.Роль
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|			ПО ПолномочияСотрудников.Владелец = СотрудникиВКонтейнерах.Контейнер
			|	ГДЕ
			|		ПраваРолей.ОбъектМетаданных = &ИдентификаторОМ
			|		И (МестаХраненияДел.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|				ИЛИ ЛОЖЬ В
			|					(ВЫБРАТЬ
			|						ИспользоватьУчетПоОрганизациям.Значение
			|					ИЗ
			|						Константа.ИспользоватьУчетПоОрганизациям КАК ИспользоватьУчетПоОрганизациям))
			|		%ОтборПоСотрудникуКонтейнера%
			|	) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.ОбъектДоступа,
			|	ВложенныйЗапрос.Сотрудник";
			
		ЗаменяемыеПодстроки.Вставить("%ОтборПоСотрудникуКонтейнера%",
			?(СотрудникиОтбор = Неопределено, "", "И СотрудникиВКонтейнерах.Сотрудник В (&Сотрудники)"));
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Переопределяемая часть обработчика подписки ДокументооборотПередЗаписьюПравообразующихОбъектов
Функция ДокументооборотПередЗаписьюПравообразующихОбъектов(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка на то, что изменились правообразующие реквизиты
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ЗамещающиеИПомощники") Тогда
		
		Если Источник.ЭтоНовый() Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
		Иначе
			
			РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Источник.Ссылка, "Сотрудник, Замещающий, ПометкаУдаления, Действует");
			
			СтарыеОбластиДелегирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Источник.Ссылка, "ВопросыЗамещения").Выгрузить();
			
			Если Источник.Сотрудник <> РеквизитыСсылки.Сотрудник
			 Или Источник.Замещающий <> РеквизитыСсылки.Замещающий
			 Или Источник.ПометкаУдаления <> РеквизитыСсылки.ПометкаУдаления 
			 Или Источник.Действует <> РеквизитыСсылки.Действует 
			 Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
				 Источник.ВопросыЗамещения, СтарыеОбластиДелегирования, "Область") Тогда 
				
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				
				Если Источник.Сотрудник <> РеквизитыСсылки.Сотрудник Тогда
					Источник.ДополнительныеСвойства.Вставить("СтарыйСотрудник", РеквизитыСсылки.Сотрудник);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ОбластиЗамещения") Тогда
		
		Если Источник.ЭтоНовый()
		 Или Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления Тогда 
		 
		 	Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			
		Иначе	
			
			Если Источник.Ссылка.Состав.Количество() <> Источник.Состав.Количество() Тогда 
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			Иначе	
				Для Каждого Строка Из Источник.Ссылка.Состав Цикл
					СтруктураОтбора = Новый Структура("ОбъектМетаданных", Строка.ОбъектМетаданных);
					НайденныеСтроки = Источник.Состав.НайтиСтроки(СтруктураОтбора);
					Если НайденныеСтроки.Количество() = 0 Тогда 
						Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
						Прервать;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь; // Не обработано
	
КонецФункции

// Переопределяемая часть обработчика подписки ДокументооборотПередЗаписьюПравообразующихОбъектов
Функция ДокументооборотПриЗаписиПравообразующихОбъектов(Источник, Отказ) Экспорт
	
	Возврат Ложь; // Не обработано
	
КонецФункции

Функция ОбновитьПромежуточныеДанныеДляРасчетаПрав(Источник, ТипИсточника) Экспорт
	
	Если ТипИсточника = Тип("СправочникОбъект.Проекты") Тогда
		
		РегистрыСведений.СоставСубъектовПравДоступа.ЗаписьПроекта(Источник);
		
		Возврат Истина;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ОбластиЗамещения") Тогда
		
		РегистрыСведений.СоставСубъектовПравДоступа.ЗаписьОбластиЗамещения(Источник);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь; // Не обработано
	
КонецФункции

// Переопределяемая часть обработчика подписки ДокументооборотПраваДоступаПриЗаписиПравообразующихКонстант
Функция ДокументооборотПраваДоступаПриЗаписиПравообразующихКонстант(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ВестиУчетПоПроектам") Тогда
		
		// Обработка всех дескрипторов, у которых установлен реквизит Проект
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.Проект <> &ПустойПроект";
		
		Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Дескриптор = Выборка.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

// Переопределяемая часть метода  ДокументооборотПраваДоступа.ОбновитьПраваСвязанныхДескрипторовПоОбъекту
Процедура ОбновитьПраваСвязанныхДескрипторовПоОбъекту(Объект) Экспорт
	
КонецПроцедуры

Функция ДокументооборотПриЗаписиПравообразующихРегистров(Источник, Отказ) Экспорт 
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.УчастникиМероприятия") Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("ПропуститьОпределениеЗависимыхПрав")
			И Источник.ДополнительныеСвойства.ПропуститьОпределениеЗависимыхПрав Тогда
			Возврат Истина;
		КонецЕсли;
		
		Мероприятие = Источник.Отбор.Мероприятие.Значение;
		Если ЗначениеЗаполнено(Мероприятие) Тогда
			МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
			Если МероприятиеОбъект <> Неопределено Тогда // Проверка на удаление мероприятия
				ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(МероприятиеОбъект);
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает список имен объектов метаданных, чьи права зависят от прав других объектов
// при обновлении прав объекты с этими именами должны обрабатываться в последнюю очередь
Функция ОбъектыСЗависимымиПравами() Экспорт
	
	// Объекты в папках.
	ЗависимыеОбъекты = Новый Массив;
	ЗависимыеОбъекты.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ДокументыПредприятия));
	ЗависимыеОбъекты.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ШаблоныДокументов));
	ЗависимыеОбъекты.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Проекты));
	ЗависимыеОбъекты.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Мероприятия));
	ЗависимыеОбъекты.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ТемыОбсуждений));
	ЗависимыеОбъекты.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.СообщенияОбсуждений));
	ЗависимыеОбъекты.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВходящееПисьмо));
	ЗависимыеОбъекты.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ИсходящееПисьмо));
	
	Возврат ЗависимыеОбъекты;
	
КонецФункции

// Переопределяемая часть функции ДокументооборотПраваДоступаПовтИсп.ТипыПапокИСодержимого
//
Процедура ДополнитьТипыПапокИСодержимого(Результат) Экспорт
	
	// Проекты
	МассивМетаданныхСодержимого = Новый Массив;
	МассивМетаданныхСодержимого.Добавить(Метаданные.Справочники.Проекты);
	Результат.Вставить(Тип("СправочникСсылка.ПапкиПроектов"), МассивМетаданныхСодержимого);
	
	// Мероприятия
	МассивМетаданныхСодержимого = Новый Массив;
	МассивМетаданныхСодержимого.Добавить(Метаданные.Справочники.Мероприятия);
	Результат.Вставить(Тип("СправочникСсылка.ПапкиМероприятий"), МассивМетаданныхСодержимого);
	
	// Письма
	МассивМетаданныхСодержимого = Новый Массив;
	МассивМетаданныхСодержимого.Добавить(Метаданные.Документы.ВходящееПисьмо);
	МассивМетаданныхСодержимого.Добавить(Метаданные.Документы.ИсходящееПисьмо);
	Результат.Вставить(Тип("СправочникСсылка.ПапкиПисем"), МассивМетаданныхСодержимого);
	
	// Темы обсуждений
	МассивМетаданныхСодержимого = Новый Массив;
	МассивМетаданныхСодержимого.Добавить(Метаданные.Справочники.ТемыОбсуждений);
	Результат.Вставить(Тип("СправочникСсылка.ПапкиФорума"), МассивМетаданныхСодержимого);
	
КонецПроцедуры

// Переопределяемая часть метода
//
Процедура ОбновитьПраваЗависящиеОтСоставаУчастниковПроцесса(МассивПроцессов) Экспорт
	
КонецПроцедуры

// Обновляет права объектов, которые зависят от прав на файл.
// 
// Параметры:
// 	ФайлСсылка - СправочникСсылка - ссылка на файл.
// 
Процедура ОбновитьПраваЗависящиеОтФайла(ФайлСсылка) Экспорт
	
	// Права на темы форума, созданные на основании файла.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТемыОбсуждений.Ссылка
		|ИЗ
		|	Справочник.ТемыОбсуждений КАК ТемыОбсуждений
		|ГДЕ
		|	ТемыОбсуждений.Документ = &Файл");
		
	Запрос.УстановитьПараметр("Файл", ФайлСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру настроек, которые будут использоваться при получении прав объекта
//
// Параметры:
//	ДопНастройки - Структура - структура настроек
//  ТипОбъекта - Тип - тип объекта доступа
//  ОбъектДоступа - Ссылка - объект доступа
//  
Процедура ЗаполнитьДопНастройкиДляПолученияПравПоОбъекту(ДопНастройки, ТипОбъекта) Экспорт
	
	Если ТипОбъекта = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
		ДопНастройки.ДобавлятьРуководителейИДелегатов = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
//
Процедура ДополнитьОписанияТаблицСоСсылкамиНаКонтрагентов(ОписанияТаблиц) Экспорт
	
	ОписанияТаблиц.Удалить("Справочник.ДокументыПредприятия");
	ОписанияТаблиц.Удалить("Справочник.ШаблоныДокументов");
	
	ОписанияТаблиц.Вставить("Справочник.ДокументыПредприятия.Контрагенты", "Контрагент");
	ОписанияТаблиц.Вставить("Справочник.ШаблоныДокументов.Контрагенты", "Контрагент");
	
КонецПроцедуры

// Возвращает таблицу видов доступа, в соответствии с текущими настройками.
// 
// Параметры:
//  ТолькоАктуальные - Булево - если Истина, то в результат будут включены только те виды доступа,
//   которые используются для расчета прав и не отключены по функциональным опциям.
// 
// Возвращаемое значение: Таблица значений.
// 
Функция ТаблицаРазрезовДоступа(ТолькоАктуальные = Истина) Экспорт
	
	ТаблицаРазрезовДоступа = Новый ТаблицаЗначений;
	ТаблицаРазрезовДоступа.Колонки.Добавить("Имя");
	ТаблицаРазрезовДоступа.Колонки.Добавить("ВидДоступа");
	ТаблицаРазрезовДоступа.Колонки.Добавить("ИмяТаблицыЗначенийДоступа");
	ТаблицаРазрезовДоступа.Колонки.Добавить("ИмяТЧДескриптора");
	ТаблицаРазрезовДоступа.Колонки.Добавить("ИмяПоляТаблицыДескриптора");
	
	Стр = ТаблицаРазрезовДоступа.Добавить();
	Стр.Имя = "ВидыДокументов";
	Стр.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ВидыДокументов;
	Стр.ИмяТаблицыЗначенийДоступа = Метаданные.Справочники.ВидыДокументов.ПолноеИмя();
	
	Стр = ТаблицаРазрезовДоступа.Добавить();
	Стр.Имя = "ВидыМероприятий";
	Стр.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ВидыМероприятий;
	Стр.ИмяТаблицыЗначенийДоступа = Метаданные.Справочники.ВидыМероприятий.ПолноеИмя();
	
	Стр = ТаблицаРазрезовДоступа.Добавить();
	Стр.Имя = "ВопросыДеятельности";
	Стр.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ВопросыДеятельности;
	Стр.ИмяТаблицыЗначенийДоступа = Метаданные.Справочники.ВопросыДеятельности.ПолноеИмя();
	
	Стр = ТаблицаРазрезовДоступа.Добавить();
	Стр.Имя = "ГрифыДоступа";
	Стр.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ГрифыДоступа;
	Стр.ИмяТаблицыЗначенийДоступа = Метаданные.Справочники.ГрифыДоступа.ПолноеИмя();
	
	Стр = ТаблицаРазрезовДоступа.Добавить();
	Стр.Имя = "Организации";
	Стр.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.Организации;
	Стр.ИмяТаблицыЗначенийДоступа = Метаданные.Справочники.Организации.ПолноеИмя();
	
	Стр = ТаблицаРазрезовДоступа.Добавить();
	Стр.Имя = "Подразделения";
	Стр.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.Подразделения;
	Стр.ИмяТаблицыЗначенийДоступа = Метаданные.Справочники.СтруктураПредприятия.ПолноеИмя();
	
	Стр = ТаблицаРазрезовДоступа.Добавить();
	Стр.Имя = "ГруппыДоступаКонтрагентов";
	Стр.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаКонтрагентов;
	Стр.ИмяТаблицыЗначенийДоступа = Метаданные.Справочники.ГруппыДоступаКонтрагентов.ПолноеИмя();
	
	Стр = ТаблицаРазрезовДоступа.Добавить();
	Стр.Имя = "ГруппыДоступаФизическихЛиц";
	Стр.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаФизическихЛиц;
	Стр.ИмяТаблицыЗначенийДоступа = Метаданные.Справочники.ГруппыДоступаФизическихЛиц.ПолноеИмя();
	
	Если ТолькоАктуальные Тогда
		ОтключенныеРазрезы = ДокументооборотПраваДоступаПовтИсп.ОтключенныеРазрезыДоступа();
		Для Каждого Разрез Из ОтключенныеРазрезы Цикл
			Стр = ТаблицаРазрезовДоступа.Найти(Разрез, "ВидДоступа");
			Если Стр <> Неопределено Тогда
				ТаблицаРазрезовДоступа.Удалить(Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИменаРеквизитов = ДокументооборотПраваДоступаПовтИсп.ИменаРеквизитовДескрпитораПоРазрезамДоступа();
	Для Каждого Стр Из ТаблицаРазрезовДоступа Цикл
		ИмяРеквизитаДескриптора = ИменаРеквизитов.Получить(Стр.ВидДоступа);
 		НайденнаяПозиция = СтрНайти(ИмяРеквизитаДескриптора, ".");
		Если НайденнаяПозиция = 0 Тогда
			Стр.ИмяПоляТаблицыДескриптора = ИмяРеквизитаДескриптора;
		Иначе
			Стр.ИмяТЧДескриптора = Лев(ИмяРеквизитаДескриптора, НайденнаяПозиция - 1);
			Стр.ИмяПоляТаблицыДескриптора = Сред(ИмяРеквизитаДескриптора, НайденнаяПозиция + 1);
		КонецЕсли;
 	КонецЦикла;
	
	Возврат ТаблицаРазрезовДоступа;
	
КонецФункции

// Возвращает соответствие разрезов доступа и имен реквизитов Дескриптора.
//
Функция ИменаРеквизитовДескрпитораПоРазрезамДоступа() Экспорт
	
	Результат = Новый Соответствие;
	МенеджерВидовДоступа = ПланыВидовХарактеристик.ВидыДоступа;
	
	Результат.Вставить(МенеджерВидовДоступа.ВидыДокументов, "ВидОбъекта");
	Результат.Вставить(МенеджерВидовДоступа.ВидыМероприятий, "ВидОбъекта");
	Результат.Вставить(МенеджерВидовДоступа.ВопросыДеятельности, "ВопросДеятельности");
	Результат.Вставить(МенеджерВидовДоступа.ГрифыДоступа, "ГрифДоступа");
	Результат.Вставить(МенеджерВидовДоступа.Организации, "Организация");
	Результат.Вставить(МенеджерВидовДоступа.Подразделения, "Подразделение");
	
	Результат.Вставить(МенеджерВидовДоступа.ГруппыДоступаКонтрагентов, "Контрагенты.ГруппаДоступа");
	Результат.Вставить(МенеджерВидовДоступа.ГруппыДоступаФизическихЛиц, "ФизическиеЛица.ГруппаДоступа");
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив неиспользуемых реквизитов дескриптора.
// 
// Параметры:
//  ИдентификаторОбъектаМетаданных - Ссылка на ИОМ - значение одноименного реквизита дескриптора.
// 
// Возвращаемое значение:
//  Массив - список имен неиспользуемых реквизитов.
// 
Функция НеиспользуемыеРеквизитыДескриптора(ИдентификаторОбъектаМетаданных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Массив;
	
	ОтключенныеРазрезы = ДокументооборотПраваДоступаПовтИсп.ОтключенныеРазрезыДоступа(Ложь);
	ИменаРеквизитов = ДокументооборотПраваДоступаПовтИсп.ИменаРеквизитовДескрпитораПоРазрезамДоступа();
	
	Для Каждого Разрез Из ОтключенныеРазрезы Цикл
		
		ИмяРеквизитаДескриптора = ИменаРеквизитов.Получить(Разрез);
		Если ИмяРеквизитаДескриптора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизитаДескриптора = "ВидОбъекта" Тогда
			// Проверяется, что виды отключены именно для текущего объекта.
			ИдентификаторыОбъектовСОтключеннымВидом = Новый Массив;
			Если Разрез = ПланыВидовХарактеристик.ВидыДоступа.ВидыДокументов Тогда
				ИдентификаторыОбъектовСОтключеннымВидом.Добавить(
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ДокументыПредприятия));
				ИдентификаторыОбъектовСОтключеннымВидом.Добавить(
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ВидыДокументов));
				ИдентификаторыОбъектовСОтключеннымВидом.Добавить(
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ШаблоныДокументов));
			ИначеЕсли Разрез = ПланыВидовХарактеристик.ВидыДоступа.ВидыМероприятий Тогда
				ИдентификаторыОбъектовСОтключеннымВидом.Добавить(
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Мероприятия));
				ИдентификаторыОбъектовСОтключеннымВидом.Добавить(
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ВидыМероприятий));
			КонецЕсли;
			Если ИдентификаторыОбъектовСОтключеннымВидом.Найти(ИдентификаторОбъектаМетаданных) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если получен реквизит ТЧ, добавляется только имя ТЧ.
		НайденнаяПозиция = СтрНайти(ИмяРеквизитаДескриптора, ".");
		Если НайденнаяПозиция > 0 Тогда
			ИмяРеквизитаДескриптора = Лев(ИмяРеквизитаДескриптора, НайденнаяПозиция - 1);
		КонецЕсли;
		
		Результат.Добавить(ИмяРеквизитаДескриптора);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу объектов, которые могут иметь отдельные разрешения доступа.
// 
// Возвращаемое значение: ТаблицаЗначений
//   * ОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных - идентификатор объекта.
//   * ВидыДоступа - СписокЗначений - виды доступа, которые влияют на объект.
//   * НеЯвляетсяСамостоятельнымПредметомДоступа - Булево - признак того, что 
//     для объекта нет смысла использовать исключения из общих разрешений доступа.
//
Функция ПредметыДоступаСРазрезами() Экспорт
	
	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("ОбъектМетаданных", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ТаблицаСвойств.Колонки.Добавить("ВидыДоступа", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСвойств.Колонки.Добавить("НеЯвляетсяСамостоятельнымПредметомДоступа", Новый ОписаниеТипов("Булево"));
	
	// Документы предприятия
	Стр = ТаблицаСвойств.Добавить();
	Стр.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Справочники.ДокументыПредприятия);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ВидыДокументов);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ВопросыДеятельности);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ГрифыДоступа);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаКонтрагентов);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.Организации);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.Подразделения);
	
	// Контрагенты
	Стр = ТаблицаСвойств.Добавить();
	Стр.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Справочники.Контрагенты);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаКонтрагентов);
	Стр.НеЯвляетсяСамостоятельнымПредметомДоступа = Истина;
	
	// Мероприятия
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда
		Стр = ТаблицаСвойств.Добавить();
		Стр.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.Мероприятия);
		Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ВидыМероприятий);
		Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ГрифыДоступа);
		Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.Организации);
		Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.Подразделения);
	КонецЕсли;
	
	// Проекты
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		Стр = ТаблицаСвойств.Добавить();
		Стр.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.Проекты);
		Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ГрифыДоступа);
		Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.Организации);
		Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.Подразделения);
	КонецЕсли;
	
	// Физические лица
	Стр = ТаблицаСвойств.Добавить();
	Стр.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Справочники.ФизическиеЛица);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаФизическихЛиц);
	Стр.НеЯвляетсяСамостоятельнымПредметомДоступа = Истина;
	
	// Шаблоны документов
	Стр = ТаблицаСвойств.Добавить();
	Стр.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Справочники.ШаблоныДокументов);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ВидыДокументов);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ВопросыДеятельности);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ГрифыДоступа);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаКонтрагентов);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.Организации);
	Стр.ВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.Подразделения);
	Стр.НеЯвляетсяСамостоятельнымПредметомДоступа = Истина;
	
	Возврат ТаблицаСвойств;
	
КонецФункции

// Возвращает идентификатор объекта,
// по которому нужно искать исключительные разрешения при расчете прав переданного объекта.
// 
Функция ИдентификаторДляПроверкиПолитикДоступа(ИдОбъекта, МетаданныеОбъекта) Экспорт
	
	Результат = ИдОбъекта;
	
	// Исключения
	Если МетаданныеОбъекта = Метаданные.Справочники.ШаблоныДокументов Тогда
		Результат = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ДокументыПредприятия);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив неиспользуемых разрезов доступа.
//
// Параметры:
//  ОтключенныеПоФункциональнымОпциям - Булево - включать разрезы, отключенные по функциональным опциям.
//  ОтключенныеВручную - Булево - включать разрезы, отключенные вручную.
//
// Возвращаемое значение:
//  Массив - массив отключенных разрезов доступа.
//
Функция ОтключенныеРазрезыДоступа(ОтключенныеПоФункциональнымОпциям, ОтключенныеВручную) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Массив;
	МенеджерРазрезов = ПланыВидовХарактеристик.ВидыДоступа;
	СписокРазрезов = Константы.ИспользованиеРазрезовДоступа.Получить().Получить();
	
	Если СписокРазрезов = Неопределено Тогда
		МенеджерЗначения = Константы.ИспользованиеРазрезовДоступа.СоздатьМенеджерЗначения();
		МенеджерЗначения.НачальноеЗаполнение();
		СписокРазрезов = Константы.ИспользованиеРазрезовДоступа.Получить().Получить();
	КонецЕсли;
	
	Для Каждого Разрез Из СписокРазрезов Цикл
		
		Если ОтключенныеВручную Тогда
			Если Не Разрез.Пометка Тогда
				Результат.Добавить(Разрез.Значение);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ОтключенныеПоФункциональнымОпциям Тогда
			
			Если Разрез.Значение = МенеджерРазрезов.ВопросыДеятельности
					И Не ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности")
				Или Разрез.Значение = МенеджерРазрезов.ГрифыДоступа
					И Не ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа")
				Или Разрез.Значение = МенеджерРазрезов.Организации
					И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям")
				Или Разрез.Значение = МенеджерРазрезов.ВидыМероприятий
					И Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда
				
				Результат.Добавить(Разрез.Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
