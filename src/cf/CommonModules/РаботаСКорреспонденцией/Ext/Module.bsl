
#Область ПрограммныйИнтерфейс

// При записи документа предприятия - надо одновременно записать связанный с ним объект "Корреспонденция".
// 
// Параметры:
//  Ссылка - СправочникСсылка.ДокументыПредприятия - Документ
//  ДополнительныеСвойства - Структура - Поля корреспонденции
//  Отказ - Булево - Проброшенный "Отказ" из документа
Процедура ПриЗаписи(Ссылка, ДополнительныеСвойства, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);		
	Если ДополнительныеСвойства.Свойство("ПараметрыКорреспонденции") Тогда 
		
		Если Не ЗначениеЗаполнено(ДополнительныеСвойства.ПараметрыКорреспонденции.Ссылка) Тогда
			ДополнительныеСвойства.ПараметрыКорреспонденции.Ссылка = Ссылка;
		КонецЕсли;
		
		Документы.Корреспонденция.СохранитьПоДаннымДокумента(
			ДополнительныеСвойства.ПараметрыКорреспонденции, Отказ);
			
	КонецЕсли;
	
	// Обработка связи "В ответ на", переданных "снаружи", например из формы объекта
	СвязиИзменены = Ложь;
	Если ДополнительныеСвойства.Свойство("СписокВОтветНа") Тогда
		
		МассивВОтветНа = ДополнительныеСвойства.СписокВОтветНа.ВыгрузитьЗначения();
		
		Н = МассивВОтветНа.ВГраница();
		Пока Н >= 0 Цикл
			Если Не ЗначениеЗаполнено(МассивВОтветНа[Н]) Тогда
				МассивВОтветНа.Удалить(Н);
			КонецЕсли;
			Н = Н - 1;
		КонецЦикла;
		
		Если ДополнительныеСвойства.Свойство("ВидДокументаКэш") Тогда 
			ЭтоВходящаяКорреспонденция = ДополнительныеСвойства.ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией;
		Иначе 
			ЭтоВходящаяКорреспонденция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,
				"ВидДокумента.ЯвляетсяВходящейКорреспонденцией");
		КонецЕсли;
		
		Если ЭтоВходящаяКорреспонденция Тогда 
			ТипСвязи = Справочники.ТипыСвязей.ПолученВОтветНа;
		Иначе
			ТипСвязи = Справочники.ТипыСвязей.ОтправленВОтветНа;
		КонецЕсли;

		ТекущиеДокументыВОтветНа = СвязиОбъектов.ПолучитьСвязанныеОбъекты(Ссылка, ТипСвязи); 
		
		Для Каждого ДокументВОтветНа Из МассивВОтветНа Цикл
			ИндексНайденного = ТекущиеДокументыВОтветНа.Найти(ДокументВОтветНа);
			Если ИндексНайденного = Неопределено Тогда
				СвязиОбъектов.УстановитьСвязь(Ссылка,
					Неопределено,
					ДокументВОтветНа,
					ТипСвязи);
				СвязиИзменены = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ДокументВОтветНа Из ТекущиеДокументыВОтветНа Цикл
			Если МассивВОтветНа.Найти(ДокументВОтветНа) = Неопределено Тогда
				СвязиОбъектов.УдалитьСвязь(Ссылка, ДокументВОтветНа, ТипСвязи);
				СвязиИзменены = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("СписокПредметовПереписки") Тогда
		
		МассивПредметовПереписки = ДополнительныеСвойства.СписокПредметовПереписки.ВыгрузитьЗначения();
		
		Н = МассивПредметовПереписки.ВГраница();
		Пока Н >= 0 Цикл
			Если Не ЗначениеЗаполнено(МассивПредметовПереписки[Н]) Тогда
				МассивПредметовПереписки.Удалить(Н);
			КонецЕсли;
			Н = Н - 1;
		КонецЦикла;
		
		ТекущиеПредметыПереписки = СвязиОбъектов.ПолучитьСвязанныеОбъекты(Ссылка,
			Справочники.ТипыСвязей.ПредметПереписки);
		
		Для Каждого ПредметПереписки Из МассивПредметовПереписки Цикл
			ИндексНайденного = ТекущиеПредметыПереписки.Найти(ПредметПереписки);
			Если ИндексНайденного = Неопределено Тогда
				СвязиОбъектов.УстановитьСвязь(Ссылка,
					Неопределено,
					ПредметПереписки,
					Справочники.ТипыСвязей.ПредметПереписки);
				СвязиИзменены = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ПредметПереписки Из ТекущиеПредметыПереписки Цикл
			Если МассивПредметовПереписки.Найти(ПредметПереписки) = Неопределено Тогда
				СвязиОбъектов.УдалитьСвязь(Ссылка, ПредметПереписки, Справочники.ТипыСвязей.ПредметПереписки);
				СвязиИзменены = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СвязиКорреспонденцииИзменены", СвязиИзменены);
	
КонецПроцедуры

#Область СобытияФормыВнутреннегоДокумента

Процедура ПриСозданииФормыНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	УстановитьСвойстваРеквизитовКорреспонденции(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииВидаДокуметаНаФорме(Форма) Экспорт
	
	УстановитьСвойстваРеквизитовКорреспонденции(Форма);
	
КонецПроцедуры

Процедура ПроверкаЗаполненияФормыНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ВидДокументаКэш = Форма.ВидДокументаКэш;
	ОбъектОснование = Форма.Объект;
	Объект = Форма.Объект;
	Если ВидДокументаКэш.ЯвляетсяОбращениемОтГраждан Тогда 
		ПроверяемыеРеквизиты.Добавить("ВидОбращения");
		
		Если ЗначениеЗаполнено(Форма.ПервичноеОбращение) 
			И Форма.ПервичноеОбращение = Объект.Ссылка Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Указана ссылка на самого себя'"),,"ПервичноеОбращение",,Отказ);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Форма.ОсновноеОбращение) 
			И Форма.ОсновноеОбращение = Объект.Ссылка Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Указана ссылка на самого себя'"),,"ОсновноеОбращение",,Отказ);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("РегламентированныйУчетОбращений") Тогда
			Если Форма.ВопросыОбращения.Количество() = 0 Тогда 
				ДатаПроверкиНаличияВопросов = ДелопроизводствоСерверПовтИсп.ДатаПроверкиНаличияВопросов();
				
				Если Не ЗначениеЗаполнено(ДатаПроверкиНаличияВопросов)
					Или (ЗначениеЗаполнено(ДатаПроверкиНаличияВопросов) 
						И ЗначениеЗаполнено(Объект.ДатаРегистрации) И Объект.ДатаРегистрации > ДатаПроверкиНаличияВопросов)
					Или (ЗначениеЗаполнено(ДатаПроверкиНаличияВопросов) 
						И Не ЗначениеЗаполнено(Объект.ДатаРегистрации) И Объект.ДатаСоздания > ДатаПроверкиНаличияВопросов) Тогда 
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru = 'Не указано ни одного вопроса документа'"),,
							"КодВопроса",, Отказ);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			//Проверка табличной части ВопросыОбращения на задвоения
			КоличествоВопросыОбращения = Форма.ВопросыОбращения.Количество();
			Если КоличествоВопросыОбращения > 1 Тогда
				Для Инд1 = 0 По КоличествоВопросыОбращения - 2 Цикл
					Для Инд2 = Инд1 + 1 По КоличествоВопросыОбращения - 1 Цикл
						Если Форма.ВопросыОбращения[Инд1].Вопрос = Форма.ВопросыОбращения[Инд2].Вопрос Тогда 
							ТекстСообщения = СтрШаблон(
								НСтр("ru = 'Вопрос ""%1"" указан дважды в списке вопросов обращения'"),
								Форма.ВопросыОбращения[Инд2].КодВопроса);
							
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,
								"ВопросыОбращения["+ Формат(Инд2, "ЧН=0; ЧГ=0") +"].КодВопроса",,Отказ);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ИсходящаяДата) 
		Или Не ЗначениеЗаполнено(Форма.ИсходящийНомер)
		Или НРег(Форма.ИсходящийНомер) = НСтр("ru = 'б\н'") 
		Или НРег(Форма.ИсходящийНомер) = НСтр("ru = 'б/н'") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Корреспонденция.Ссылка КАК Ссылка,
	|	ДокументОснование.РегистрационныйНомер КАК РегистрационныйНомер
	|ИЗ
	|	Документ.Корреспонденция КАК Корреспонденция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ДокументОснование
	|		ПО (ДокументОснование.Ссылка = Корреспонденция.Основание)
	|ГДЕ
	|	ДокументОснование.Ссылка <> &Ссылка
	|	И Корреспонденция.НомерКонтрагента = &НомерКонтрагента
	|	И Корреспонденция.ДатаКонтрагента = &ДатаКонтрагента
	|	И Корреспонденция.Корреспонденты.Корреспондент = &Контрагент
	|	И ДокументОснование.ВидДокумента = &ВидДокумента
	|	И НЕ Корреспонденция.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НомерКонтрагента", СокрЛП(Форма.ИсходящийНомер));
	Запрос.УстановитьПараметр("ДатаКонтрагента", Форма.ИсходящаяДата);
	Запрос.УстановитьПараметр("Контрагент", ОбъектОснование.Контрагент);
	Запрос.УстановитьПараметр("Ссылка", ОбъектОснование.Ссылка);
	
	Запрос.УстановитьПараметр("ВидДокумента", ОбъектОснование.ВидДокумента);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст + " И (Организация = &Организация) ";
		Запрос.УстановитьПараметр("Организация", ОбъектОснование.Организация);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если ДелопроизводствоКлиентСервер.ДокументЗарегистрирован(Выборка.РегистрационныйНомер) Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Документ №%1 от %2 уже зарегистрирован!'"),
				СокрЛП(Форма.ИсходящийНомер),
				Формат(Форма.ИсходящаяДата, "ДЛФ=D"));
		Иначе
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Документ №%1 от %2 уже записан!'"),
				СокрЛП(Форма.ИсходящийНомер),
				Формат(Форма.ИсходящаяДата, "ДЛФ=D"));
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,,
			"ИсходящийНомер",,
			Отказ);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Перед записью документа предприятия на сервере. Подготавливаются данные для записи в связанный с документом объект -
// документ "Корреспонденция".
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма исходного документа предприятия
//  Отказ - Булево -
//  ТекущийОбъект - СправочникОбъект.ДокументыПредприятия - Документ из исходной формы
//  ПараметрыЗаписи - Структура -
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ВидДокументаКэш = Форма.ВидДокументаКэш;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ВидДокументаКэш", ВидДокументаКэш);
	
	Если Не ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией
		И Не ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ВОтветНа", Форма.ВОтветНа);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СписокВОтветНа", Форма.СписокВОтветНа);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СписокПредметовПереписки", Форма.СписокПредметовПереписки);
	
	ПараметрыКорреспонденции = Документы.Корреспонденция.НовыеПараметрыКорреспонденции();
	// Из формы:
	ЗаполнитьЗначенияСвойств(
		ПараметрыКорреспонденции, Форма, 
		"ВидДокументаКэш, ВидОбращения, ВопросыОбращения, ОсновноеОбращение, ПервичноеОбращение, ГотовоКВыгрузкеССТУ,
		|ИсходящийНомер, ИсходящаяДата, АдресатВходящейКорреспонденции, ВходящийНомер, ВходящаяДата,
		|СпособПолучения,
		|КонтактноеЛицоПереадресовавшего, Переадресовавший, СрокОтветаПереадресовавшему, ТребуетсяОтветПереадресовавшему");
	ПараметрыКорреспонденции.ИсходящийНомер = СокрЛП(ПараметрыКорреспонденции.ИсходящийНомер);
	ПараметрыКорреспонденции.ВходящийНомер = СокрЛП(ПараметрыКорреспонденции.ВходящийНомер);
	ПараметрыКорреспонденции.ЭтоДубликатОбращения = Форма.Дубликат;
	ПараметрыКорреспонденции.ЭтоПовторноеОбращение = Форма.Повторное;
	// Из самого объекта:
	ЗаполнитьЗначенияСвойств(
		ПараметрыКорреспонденции, ТекущийОбъект,
		"СрокИсполнения, Контрагент, Ссылка");
	
	МассивКонтрагенты = Новый Массив();
	Для Каждого СтрокаИзФормы Из Форма.Объект.Контрагенты Цикл
		СтруктураСтрокиКонтрагента = Документы.Корреспонденция.НовыйСтруктураИзСтрокиТчКорреспонденты();
		// Одинаково называются:
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиКонтрагента, СтрокаИзФормы, "ДатаОтправки, Отправлен, СпособОтправки");
		// Неодинаково называются:
		СтруктураСтрокиКонтрагента.Корреспондент = СтрокаИзФормы.Контрагент;
		СтруктураСтрокиКонтрагента.Адресат = СтрокаИзФормы.КонтактноеЛицо;
		СтруктураСтрокиКонтрагента.НомерКонтрагента = СтрокаИзФормы.ВходящийНомер;
		СтруктураСтрокиКонтрагента.ДатаКонтрагента = СтрокаИзФормы.ВходящаяДата;
		
		МассивКонтрагенты.Добавить(СтруктураСтрокиКонтрагента);
	КонецЦикла;
	ПараметрыКорреспонденции.Контрагенты = МассивКонтрагенты;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыКорреспонденции", ПараметрыКорреспонденции);
	
КонецПроцедуры

#КонецОбласти

// Помечает переданную корреспонденцию на удаление
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//
Процедура ОбновитьКорреспонденцию(Форма) Экспорт
	
	УстановитьСвойстваРеквизитовКорреспонденции(Форма);
	
КонецПроцедуры

// Помечает / снимает пометку удаления корреспонденции документа.
//
Процедура ПометитьНаУдалениеКорреспонденцию(Документ, ПометкаУдаления) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Корреспонденция.Ссылка КАК Корреспонденция
		|ИЗ
		|	Документ.Корреспонденция КАК Корреспонденция
		|ГДЕ
		|	Корреспонденция.Основание = &Основание";
		
	Запрос.Параметры.Вставить("Основание", Документ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Корреспонденция);
		КорреспонденцияОбъект = Выборка.Корреспонденция.ПолучитьОбъект();
		КорреспонденцияОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		РазблокироватьДанныеДляРедактирования(Выборка.Корреспонденция);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДоступностьОтправки(Форма, РегистрационныйНомер) Экспорт 
	
	#Если Не ВнешнееСоединение Тогда
	
	Элементы = Форма.Элементы;
	ВидДокументаКэш = Форма.ВидДокументаКэш;
	
	Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда // документ зарегистрирован
			Элементы.Отправлен.Доступность = Истина;
			Элементы.ДатаОтправки.Доступность = Форма.Отправлен;
			Элементы.КонтрагентыОтправлен.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.Отправлен.Доступность = Ложь;
			Элементы.ДатаОтправки.Доступность = Ложь;
			Элементы.КонтрагентыОтправлен.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

// Находит и возвращает ссылку на документ Корреспонденция, принадлежащий переданному владельцу
// Вернет Неопределено, если Корреспонденция не найдена
// Параметры:
//  ДокументВладелец - СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  ДокументСсылка.Корреспонденция - "Технический документ", если не найдена, то пустая ссылка.
//
Функция КорреспонденцияДокумента(ДокументВладелец) Экспорт

	Результат = Документы.Корреспонденция.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(ДокументВладелец) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Корреспонденция.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Корреспонденция КАК Корреспонденция
		|ГДЕ
		|	Корреспонденция.Основание = &Основание";
	Запрос.УстановитьПараметр("Основание", ДокументВладелец);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция проверяет, является ли переданный вид документа видом, относящимся к корреспонденции,
// и направление корреспонденции, если это корреспонденция. 
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов
// 
// Возвращаемое значение:
//  Структура - Это вид документа корреспонденции:
// * ЭтоКорреспонденция - Булево - Вид документа относится к корреспонденции
// * ЭтоВходящаяКорреспонденция - Булево, Неопределено - Если это корреспонденция, то входящая, если истина,
//		или исходящая, если ложь. Если это не корреспонденция, свойство не используется.
//
Функция ВидДокументаОтноситсяККорреспонденции(ВидДокумента) Экспорт
	
	Результат = Новый Структура("ЭтоКорреспонденция, ЭтоВходящаяКорреспонденция", Ложь, Неопределено);
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента,
		"ЯвляетсяВходящейКорреспонденцией, ЯвляетсяИсходящейКорреспонденцией");
		
	Результат.ЭтоКорреспонденция = Реквизиты.ЯвляетсяВходящейКорреспонденцией
		Или Реквизиты.ЯвляетсяИсходящейКорреспонденцией;
	
	Если Реквизиты.ЯвляетсяВходящейКорреспонденцией Тогда
		Результат.ЭтоВходящаяКорреспонденция = Истина;
	ИначеЕсли Реквизиты.ЯвляетсяИсходящейКорреспонденцией Тогда
		Результат.ЭтоВходящаяКорреспонденция = Ложь;
	Иначе
		Результат.ЭтоВходящаяКорреспонденция = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита переданной Корреспонденции по имени поля
//
// Параметры:
//  НазваниеПоля	 - Строка - Имя поля, значение которого нужно получить
//		Формат - "{Корреспонденция|ИмяПоля}".
//		Можно обратиться к ТЧ "ВопросыОбращения": "{Корреспонденция|ВопросыОбращения|ИмяПоля}"
//  Корреспонденция	 - ДокументСсылка.Корреспонденция - Документ Корреспонденция, реквизит которого нужно получить
// 
// Возвращаемое значение:
//  Произвольный - зависит от типа значения прочитанного реквизита.
//
Функция ЗначениеРеквизитаКорреспонденцииИзПараметров(НазваниеПоля, ПараметрыКорреспонденции) Экспорт

	Результат = "";
	ВидДокументаКэш = ПараметрыКорреспонденции.ВидДокументаКэш;
	Если Не ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией
		И Не ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда 
		Возврат Результат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(НазваниеПоля, "{", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "}", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Корреспонденция|", "");
	
	ЭтоТЧ = Ложь;
	ИмяТЧ = "";
	
	АдаптированныеПараметры = Новый Структура;
	АдаптированныеПараметры = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыКорреспонденции);
	
	АдаптированныеПараметры.Вставить("СрокИсполнения", ПараметрыКорреспонденции.СрокИсполнения);
	Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда 
		АдаптированныеПараметры.Вставить("НомерКонтрагента", ПараметрыКорреспонденции.ИсходящийНомер);
		АдаптированныеПараметры.Вставить("ДатаКонтрагента", ПараметрыКорреспонденции.ИсходящаяДата);
				
		Корреспонденты = Новый ТаблицаЗначений();
		Корреспонденты.Колонки.Добавить("Корреспондент");
		Корреспонденты.Колонки.Добавить("Адресат");
		НовСтрока = Корреспонденты.Добавить();
		НовСтрока.Корреспондент = ПараметрыКорреспонденции.Контрагент;
		НовСтрока.Адресат = ПараметрыКорреспонденции.АдресатВходящейКорреспонденции;
		АдаптированныеПараметры.Вставить("ВопросыОбращения", ПараметрыКорреспонденции.ВопросыОбращения);
		
	Иначе 
		АдаптированныеПараметры.Вставить("НомерКонтрагента", ПараметрыКорреспонденции.ВходящийНомер);
		АдаптированныеПараметры.Вставить("ДатаКонтрагента", ПараметрыКорреспонденции.ВходящаяДата);
		
		Корреспонденты = Новый ТаблицаЗначений();
		Корреспонденты.Колонки.Добавить("Корреспондент");
		Корреспонденты.Колонки.Добавить("Адресат");
		Корреспонденты.Колонки.Добавить("СпособОтправки");
		Корреспонденты.Колонки.Добавить("Отправлен");
		Корреспонденты.Колонки.Добавить("ДатаОтправки");
		Корреспонденты.Колонки.Добавить("НомерКонтрагента");
		Корреспонденты.Колонки.Добавить("ДатаКонтрагента");
		
		Для Каждого СтрКонтрагент Из ПараметрыКорреспонденции.Контрагенты Цикл 
			НовСтрока = Корреспонденты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрКонтрагент);
			НовСтрока.Корреспондент = СтрКонтрагент.Контрагент;
			НовСтрока.Адресат = СтрКонтрагент.КонтактноеЛицо;
			НовСтрока.НомерКонтрагента = СтрКонтрагент.ВходящийНомер;
			НовСтрока.ДатаКонтрагента = СтрКонтрагент.ВходящаяДата;
		КонецЦикла;
	КонецЕсли;
	АдаптированныеПараметры.Вставить("Корреспонденты", Корреспонденты);	
	
	Если СтрНайти(НазваниеПоля, "ВопросыОбращения") > 0 Тогда
		
		ЭтоТЧ = Истина;
		ИмяТЧ = "ВопросыОбращения";
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ВопросыОбращения|", "");
		
	ИначеЕсли СтрНайти(НазваниеПоля, "Корреспонденты") > 0 Тогда
		
		ЭтоТЧ = Истина;
		ИмяТЧ = "Корреспонденты";
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Корреспонденты|", "");
		
	КонецЕсли;
	
	Если ЭтоТЧ Тогда
		ТЧ = АдаптированныеПараметры[ИмяТЧ];
		СтрокаТЧ = ТЧ[0];
		Результат = СтрокаТЧ[ИмяРеквизита];
	Иначе
		Результат = АдаптированныеПараметры[ИмяРеквизита];
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Сформирует ИсходящийНомерИДата по ТЧ Корреспонденты
// 
// Параметры:
//  Корреспонденты - ДокументОбъект.Корреспонденция.Корреспонденты
// 
// Возвращаемое значение:
//  Строка - ИсходящийНомерИДата
Функция ИсходящийНомерИДатаКорреспонденции(Корреспонденты) Экспорт
	
	ИсходящийНомерИДата = "";   
	
	Для Каждого СтрокаКорреспондент Из Корреспонденты Цикл        
		
		ИсходящийНомерИДатаДляСписков = "";
		Если ЗначениеЗаполнено(СтрокаКорреспондент.НомерКонтрагента)
			И ЗначениеЗаполнено(СтрокаКорреспондент.ДатаКонтрагента) Тогда
			
			ИсходящийНомерИДатаДляСписков = СтрШаблон(НСтр("ru = '%1 от %2'"),
				СокрЛП(СтрокаКорреспондент.НомерКонтрагента),
				Формат(СтрокаКорреспондент.ДатаКонтрагента, "ДЛФ=D"));
		ИначеЕсли ЗначениеЗаполнено(СтрокаКорреспондент.НомерКонтрагента) Тогда 
				
			ИсходящийНомерИДатаДляСписков = СокрЛП(СтрокаКорреспондент.НомерКонтрагента);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаКорреспондент.ДатаКонтрагента) Тогда 
				
			ИсходящийНомерИДатаДляСписков = Формат(СтрокаКорреспондент.ДатаКонтрагента, "ДЛФ=D");
			
		КонецЕсли;

		Если ЗначениеЗаполнено(ИсходящийНомерИДатаДляСписков) Тогда 
			
			ИсходящийНомерИДата = ИсходящийНомерИДата 
				+ ?(ПустаяСтрока(ИсходящийНомерИДата), "", ", ")
				+ ИсходящийНомерИДатаДляСписков;
		КонецЕсли;
		
		
	КонецЦикла;	
	
	Возврат ИсходящийНомерИДата;

КонецФункции	

// Возвращает реквизиты отправителя документов корреспонденции.
// 
// Параметры:
//  СписокДокументов - СписокЗначений - Список документов 
// 
// Возвращаемое значение:
//  РезультатЗапроса, Неопределено - Реквизиты отправителя документов корреспонденции
Функция РеквизитыОтправителяДокументовКорреспонденции(Знач СписокДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Ссылка,
		|	ДокументыПредприятия.Заголовок,
		|	ДокументыПредприятия.ДатаРегистрации,
		|	ДокументыПредприятия.РегистрационныйНомер,
		|	Корреспонденция.ДатаКонтрагента,
		|	Корреспонденция.НомерКонтрагента
		|ИЗ
		|	Документ.Корреспонденция КАК Корреспонденция
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ПО Корреспонденция.Основание = ДокументыПредприятия.Ссылка
		|ГДЕ
		|	ДокументыПредприятия.Ссылка В (&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументыПредприятия.ДатаСоздания";
	Запрос.Параметры.Вставить("СписокДокументов", СписокДокументов);
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Представление документа корреспонденции.
// 
// Параметры:
//  РеквизитыДокумента - ВыборкаИзРезультатаЗапроса - Реквизиты документа:
// * Ссылка - СправочникСсылка.ДокументыПредприятия - ссылка на документ
// * Заголовок - Строка - Заголовок документа
// * ДатаРегистрации - Дата - дата регистрации
// * РегистрационныйНомер - ОпределяемыйТип.РегистрационныйНомер - Регистрационный номер
// * ДатаКонтрагента - Дата - Дата контрагента
// * НомерКонтрагента - Строка - Номер контрагента
//  СтрокаВставки - Строка - Строка шаблон
//  ЭтоВходящаяКорреспонденция - Булево - Это входящая корреспонденция
//  ДобавлятьРегДанные - Булево - Добавлять рег. данные в название
// 
// Возвращаемое значение:
//  Строка - Представление документа корреспонденции
Функция ПредставлениеДокументаКорреспонденции(РеквизитыДокумента, СтрокаВставки, 
	ЭтоВходящаяКорреспонденция = Истина,
	ДобавлятьРегДанные = Истина) Экспорт
	
	Представление = "";
	
	Если ЭтоВходящаяКорреспонденция Тогда
		Если ЗначениеЗаполнено(РеквизитыДокумента.ДатаРегистрации)
			И ЗначениеЗаполнено(РеквизитыДокумента.РегистрационныйНомер) Тогда
			Представление = СтрШаблон(СтрокаВставки,
				РеквизитыДокумента.РегистрационныйНомер,
				Формат(РеквизитыДокумента.ДатаРегистрации, "ДФ=dd.MM.yyyy;"));
		Иначе
			Представление = РеквизитыДокумента.Заголовок;
		КонецЕсли;
		
	Иначе
		// Для Исходящих "В ответ" на формирутеся от номера документа
		Если ЗначениеЗаполнено(РеквизитыДокумента.ДатаКонтрагента)
			И ЗначениеЗаполнено(РеквизитыДокумента.НомерКонтрагента) Тогда
			Представление = СтрШаблон(СтрокаВставки,
				РеквизитыДокумента.НомерКонтрагента,
				Формат(РеквизитыДокумента.ДатаКонтрагента, "ДФ=dd.MM.yyyy;"));
			
			// Добавим также обычное отображение документа
			Если ДобавлятьРегДанные
				И ЗначениеЗаполнено(РеквизитыДокумента.ДатаРегистрации)
				И ЗначениеЗаполнено(РеквизитыДокумента.РегистрационныйНомер) Тогда
				Представление = Представление + " (" 
					+ СтрШаблон(СтрокаВставки,
						РеквизитыДокумента.РегистрационныйНомер,
						Формат(РеквизитыДокумента.ДатаРегистрации, "ДФ=dd.MM.yyyy;")) + ")";
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(РеквизитыДокумента.ДатаРегистрации)
			И ЗначениеЗаполнено(РеквизитыДокумента.РегистрационныйНомер) Тогда
			Представление = СтрШаблон(СтрокаВставки,
				РеквизитыДокумента.РегистрационныйНомер,
				Формат(РеквизитыДокумента.ДатаРегистрации, "ДФ=dd.MM.yyyy;"));
		Иначе
			Представление = РеквизитыДокумента.Заголовок;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСвойстваРеквизитовКорреспонденции(Форма)
	
	#Если Сервер Тогда
	
	Элементы = Форма.Элементы;
	ВидДокументаКэш = Форма.ВидДокументаКэш;
	Объект = Форма.Объект;
	Параметры = Форма.Параметры;
	
	Элементы.МногоКонтрагентов.Видимость = Истина;
	Элементы.КонтактноеЛицо.Видимость = Истина;
	Элементы.ПодписалОтКонтрагента.Видимость = Истина;
	Элементы.КонтрагентыПодписалОтКонтрагента.Видимость = Истина;
	Элементы.ГруппаИсходящийНомер.Видимость = Ложь;
	Элементы.СпособПолучения.Видимость = Ложь;
	Элементы.АдресатВходящейКорреспонденции.Видимость = Ложь;
	Элементы.ГруппаВходящийНомер.Видимость = Ложь;
	Элементы.ГруппаОтправленДата.Видимость = Ложь;
	Элементы.СпособОтправки.Видимость = Ложь;
	Элементы.ПолучателиИсходящейКорреспонденции.Видимость = Ложь;
	Элементы.ГруппаПереадресация.Видимость = Ложь;
	
	// Смена заголовка организации и установка видимости при взаимодействии ФО.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям")
		И (Не ВидДокументаКэш.ВестиУчетСторон Или ВидДокументаКэш.ЯвляетсяЗаявкойНаОплату) Тогда
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям",
			Новый Структура("ВидДокумента", Объект.ВидДокумента)) Тогда
			Элементы.Организация.Видимость = Истина;
			Элементы.ГруппаОрганизация.Заголовок = РедакцииКонфигурацииКлиентСервер.ИмяОрганизацииБезУчетаСторон();
			Элементы.ГруппаОрганизация.Подсказка = РедакцииКонфигурацииКлиентСервер.ПодсказкаОрганизацииБезУчетаСторон();
		Иначе
			Элементы.Организация.Видимость = Ложь;
			Элементы.ГруппаОрганизация.Заголовок = РедакцииКонфигурацииКлиентСервер.ИмяОрганизацииУчетСторон();
			Элементы.ГруппаОрганизация.Подсказка = РедакцииКонфигурацииКлиентСервер.ПодсказкаОрганизацииУчетСторон();
		КонецЕсли;
	Иначе
		Элементы.Организация.Видимость = Ложь;
		Элементы.ГруппаОрганизация.Заголовок = РедакцииКонфигурацииКлиентСервер.ИмяОрганизацииУчетСторон();
		Элементы.ГруппаОрганизация.Подсказка = РедакцииКонфигурацииКлиентСервер.ПодсказкаОрганизацииУчетСторон();
	КонецЕсли;
	
	УстановитьЗаголовокИПодсказку(Элементы, "ГруппаКонтрагенты",
		НСтр("ru = 'Контрагенты'"), НСтр("ru = 'Контрагенты'"));
	УстановитьЗаголовокИПодсказку(Элементы, "Контрагент");
	УстановитьЗаголовокИПодсказку(Элементы, "КонтрагентыКонтрагент");
	УстановитьЗаголовокИПодсказку(Элементы, "КонтрагентыКонтактноеЛицо");
	УстановитьЗаголовокИПодсказку(Элементы, "КонтактноеЛицо");
	УстановитьЗаголовокИПодсказку(Форма.Команды, "МногоКонтрагентов",
		НСтр("ru = 'Много контрагентов'"), НСтр("ru = 'Режим ввода нескольких контрагентов'"));
	УстановитьЗаголовокИПодсказку(Форма.Команды, "ОдинКонтрагент",
		НСтр("ru = 'Один контрагент'"), НСтр("ru = 'Режим ввода одного контрагента'"));
	
	УстановитьЗаголовокИПодсказку(Элементы, "СрокИсполнения",
		НСтр("ru = 'Срок'"), НСтр("ru = 'Срок исполнения'"));
			
	// Реквизиты для переадресации
	Если Параметры.Свойство("ТипКорреспонденции") Тогда
		
		ТипКорреспонденции = Параметры.ТипКорреспонденции;
		
		Форма.ТипКорреспонденции = ТипКорреспонденции;
		
		ПараметрВыбора = Новый ПараметрВыбора(ТипКорреспонденции, Истина);
		Форма.Элементы.ВидИТематикаТекст.ПараметрыВыбора = 
			Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрВыбора));
		
	КонецЕсли;
	Если Параметры.Свойство("УстановитьСвязь") Тогда
		Если Не Форма.ОбязательныеСвязи.НайтиСтроки(Новый Структура("ТипСвязи", Параметры.ТипСвязи)).Количество() Тогда
			НоваяСтрока = Форма.ОбязательныеСвязи.Добавить();
			НоваяСтрока.НужноЗаписать = Параметры.УстановитьСвязь;
			НоваяСтрока.ТипСвязи = Параметры.ТипСвязи;
			НоваяСтрока.СвязанныйОбъект = Параметры.ДокументДляСвязиПриЗаписи;
			НоваяСтрока.СвязатьСТекущимДокументом = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Свойство("Получатель") И Форма.ЭтоНовыйДокумент Тогда
		Объект.Контрагент = Параметры.Получатель;
	КонецЕсли;
	Если Параметры.Свойство("Адресат") И Форма.ЭтоНовыйДокумент Тогда
		Объект.КонтактноеЛицо = Параметры.Адресат;
	КонецЕсли;
	
	Если Не ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией
		И Не ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией 
		И Не ВидДокументаКэш.ЯвляетсяОбращениемОтГраждан  Тогда
		РаботаСОбращениями.УстановитьВидимостьПолейУчетаОбращенийГраждан(Форма, Ложь);
		РаботаСКорреспонденциейКлиентСервер.УстановитьВидимостьЭлементовВОтветНаИПредметПереписки(Форма);
		Возврат;
	КонецЕсли;
	
	Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда 
		Форма.СпособОтправкиПоУмолчанию = Делопроизводство.ПолучитьСпособДоставкиПоУмолчанию("СпособПолучения");
	Иначе 
		Форма.СпособОтправкиПоУмолчанию = Делопроизводство.ПолучитьСпособДоставкиПоУмолчанию("СпособОтправки");
	КонецЕсли;
	
	Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда 
		УстановитьЗаголовокИПодсказку(Элементы, "ГруппаОрганизация",
			НСтр("ru = 'Кому'"), НСтр("ru = 'Кому'"));
		УстановитьЗаголовокИПодсказку(Элементы, "ГруппаКонтрагент",
			НСтр("ru = 'От кого'"), НСтр("ru = 'От кого'"));
		УстановитьЗаголовокИПодсказку(Элементы, "Контрагент",
			НСтр("ru = 'Отправитель'"), НСтр("ru = 'Отправитель'"));
		
		Элементы.ГруппаИсходящийНомер.Видимость = Истина;
		Элементы.СпособПолучения.Видимость = Истина;
		Элементы.АдресатВходящейКорреспонденции.Видимость = Истина;
		
		Элементы.КонтактноеЛицо.Видимость = Ложь;
		Элементы.МногоКонтрагентов.Видимость = Ложь;
		
		Если Не Объект.Ссылка.Пустая() Тогда 
			ЗаполнитьСсылкиНаСвязанныеДокументы(Форма);
			Если ЗначениеЗаполнено(Форма.ПереадресованДокументом) Тогда
				УстановитьПривилегированныйРежим(Истина);	
				РеквизитыПереадресата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Форма.ПереадресованДокументом, "Контрагент, КонтактноеЛицо");
				Форма.Переадресат = РеквизитыПереадресата.Контрагент;
				Форма.КонтактноеЛицоПереадресата = РеквизитыПереадресата.КонтактноеЛицо;
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		КонецЕсли;
		Элементы.ГруппаПереадресация.Видимость = ПолучитьФункциональнуюОпцию(
			"ИспользоватьПереадресациюВоВходящихДокументах");
	КонецЕсли;
	
	Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда 
		УстановитьЗаголовокИПодсказку(Элементы, "ГруппаОрганизация",
			НСтр("ru = 'От кого'"), НСтр("ru = 'От кого'"));
		УстановитьЗаголовокИПодсказку(Элементы, "ГруппаКонтрагент",
			НСтр("ru = 'Кому'"), НСтр("ru = 'Кому'"));
		УстановитьЗаголовокИПодсказку(Элементы, "ГруппаКонтрагенты",
			НСтр("ru = 'Получатели'"), НСтр("ru = 'Получатели'"));
		УстановитьЗаголовокИПодсказку(Элементы, "Контрагент",
			НСтр("ru = 'Получатель'"), НСтр("ru = 'Получатель'"));
		УстановитьЗаголовокИПодсказку(Элементы, "КонтрагентыКонтрагент",
			НСтр("ru = 'Получатель'"), НСтр("ru = 'Получатель'"));
		УстановитьЗаголовокИПодсказку(Элементы, "КонтактноеЛицо",
			НСтр("ru = 'Адресат'"), НСтр("ru = 'Адресат'"));
		УстановитьЗаголовокИПодсказку(Элементы, "КонтрагентыКонтактноеЛицо",
			НСтр("ru = 'Адресат'"), НСтр("ru = 'Адресат'"));
		УстановитьЗаголовокИПодсказку(Форма.Команды, "МногоКонтрагентов",
			НСтр("ru = 'Много получателей'"), НСтр("ru = 'Режим ввода нескольких получателей'"));
		УстановитьЗаголовокИПодсказку(Форма.Команды, "ОдинКонтрагент",
			НСтр("ru = 'Один получатель'"), НСтр("ru = 'Режим ввода одного получателя'"));
		УстановитьЗаголовокИПодсказку(Элементы, "СрокИсполнения",
			НСтр("ru = 'Срок ответа'"), НСтр("ru = 'Ожидаемый срок ответа'"));
			
		Элементы.ГруппаВходящийНомер.Видимость = Истина;
		Элементы.ГруппаОтправленДата.Видимость = Истина;
		Элементы.СпособОтправки.Видимость = Истина;
		Элементы.ПолучателиИсходящейКорреспонденции.Видимость = Истина;
		Элементы.ПодписалОтКонтрагента.Видимость = Ложь;
		Элементы.КонтрагентыПодписалОтКонтрагента.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ЭтоВходящаяКорреспонденция = Форма.ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией;
		Если ЭтоВходящаяКорреспонденция Тогда 
			ТипСвязи = Справочники.ТипыСвязей.ПолученВОтветНа;
		Иначе
			ТипСвязи = Справочники.ТипыСвязей.ОтправленВОтветНа;
		КонецЕсли;
		
		ДокументыВОтветНа = СвязиОбъектов.ПолучитьСвязанныеОбъекты(Объект.Ссылка,
			ТипСвязи);
		РеквизитыВОтветНа = РеквизитыОтправителяДокументовКорреспонденции(ДокументыВОтветНа).Выбрать();
		
		Пока РеквизитыВОтветНа.Следующий() Цикл
			Представление = ПредставлениеДокументаКорреспонденции(
				РеквизитыВОтветНа, НСтр("ru = '№ %1 от %2'"), ЭтоВходящаяКорреспонденция);
			Форма.СписокВОтветНа.Добавить(РеквизитыВОтветНа.Ссылка, Представление);
		КонецЦикла;
		
		Если Форма.СписокВОтветНа.Количество() Тогда
			Форма.ВОтветНа = Форма.СписокВОтветНа[0].Значение;
			Форма.ВОтветНаСтрока = Форма.СписокВОтветНа[0].Представление;
		КонецЕсли;
		
		Форма.НесколькоВОтветНа = ДокументыВОтветНа.Количество() > 1;
			
	КонецЕсли;
	
	Документы.Корреспонденция.ЗаполнитьДанныеНаФормеДокумента(Форма);
	РаботаСОбращениями.УстановитьВидимостьПолейУчетаОбращенийГраждан(Форма, Ложь);
	УстановитьДоступностьОтправки(Форма, Объект.РегистрационныйНомер);
	
	Если ЗначениеЗаполнено(Форма.ОтветПереадресовавшему) Тогда 
		Элементы.ОтправитьОтветПереадресовавшему.Видимость = Ложь;
	Иначе
		Элементы.ОтветПереадресовавшему.Видимость = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ПереадресованДокументом) Тогда 
		Элементы.Переадресовать.Видимость = Ложь;
	Иначе
		Элементы.ПереадресованДокументом.Видимость = Ложь;
		Элементы.Переадресат.Видимость = Ложь;
		Элементы.КонтактноеЛицоПереадресата.Видимость = Ложь;
	КонецЕсли;
	
	РаботаСКорреспонденциейКлиентСервер.УстановитьВидимостьЭлементовВОтветНаИПредметПереписки(Форма);
	
	#КонецЕсли
	
КонецПроцедуры

Процедура УстановитьЗаголовокИПодсказку(Элементы, ИмяПоля, Заголовок = Неопределено, Подсказка = Неопределено)
	
	Элементы[ИмяПоля].Заголовок = Заголовок;
	Элементы[ИмяПоля].Подсказка = Подсказка;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаСвязанныеДокументы(Форма)
	
	Ссылка = Форма.Объект.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СвязиОбъектов.СвязанныйОбъект,
		|	СвязиОбъектов.ТипСвязи
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект = &Объект
		|	И СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтветПереадресовавшему)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвязиОбъектов.СвязанныйОбъект,
		|	СвязиОбъектов.ТипСвязи
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект = &Объект
		|	И СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПереадресованДокументом)";
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипСвязи = Справочники.ТипыСвязей.ОтветПереадресовавшему Тогда
			Форма.ОтветПереадресовавшему = Выборка.СвязанныйОбъект;
		ИначеЕсли Выборка.ТипСвязи = Справочники.ТипыСвязей.ПереадресованДокументом Тогда
			Форма.ПереадресованДокументом = Выборка.СвязанныйОбъект;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
