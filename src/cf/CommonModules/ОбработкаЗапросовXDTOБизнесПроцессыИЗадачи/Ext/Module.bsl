///////////////////////////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, бизнес-процессы и задачи
// Реализует функционал веб-сервиса DMService в части бизнес-процессов и задач
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Заполняет реквизит объекта информационной базы, имеющий тип СправочникСсылка.ПолныеРоли, из свойства объекта XDTO.
//
// Параметры:
//   РеквизитДО - Произвольный - реквизит объекта, подлежащий заполнению.
//   ОбъектXDTO - ОбъектXDTO - объект, свойство которого соответствует заполняемому реквизиту.
//   ИмяРольИсполнителяXDTO - Строка - имя свойства, содержащего роль исполнителя.
//   ИмяОсновнойОбъектАдресацииXDTO - Строка - имя свойства, содержащего основной объект адресации.
//   ИмяДополнительныйОбъектАдресацииXDTO - Строка - имя свойства, содержащего дополнительный объект адресации.
//
Процедура ЗаполнитьПолнуюРольИзСвойстваXDTO(РеквизитДО, ОбъектXDTO, ИмяРольИсполнителяXDTO,
		ИмяОсновнойОбъектАдресацииXDTO, ИмяДополнительныйОбъектАдресацииXDTO) Экспорт
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, ИмяРольИсполнителяXDTO) Тогда
		РольИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO[ИмяРольИсполнителяXDTO].objectId);
		Если ЗначениеЗаполнено(РольИсполнителя)
				И ТипЗнч(РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, ИмяОсновнойОбъектАдресацииXDTO) Тогда
				ОсновнойОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(
					ОбъектXDTO[ИмяОсновнойОбъектАдресацииXDTO].objectId);
			Иначе
				ОсновнойОбъектАдресации = Неопределено;
			КонецЕсли;
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, ИмяДополнительныйОбъектАдресацииXDTO) Тогда
				ДополнительныйОбъектАдресации =ОбработкаЗапросовXDTO. ПолучитьСсылкуПоObjectID(
					ОбъектXDTO[ИмяДополнительныйОбъектАдресацииXDTO].objectId);
			Иначе
				ДополнительныйОбъектАдресации = Неопределено;
			КонецЕсли;
			РеквизитДО = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
				РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
		Иначе
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(РеквизитДО, ОбъектXDTO[ИмяРольИсполнителяXDTO]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает объект XDTO DMApprovalStateRecord, соответствующий переданной структуре записи.
//
// Параметры:
//   СтруктураЗаписи - Структура:
//     * ЭтоСсылка - Булево
//     * Документ - СправочникСсылка.ДокументыПредприятия
//     * Состояние - ПеречислениеСсылка.СостоянияДокументов
//                   Неопределено - последнее состояние.
//     * Установил - СправочникСсылка.Сотрудники
//                   БизнесПроцессСсылка
//     * ДатаУстановки - Дата - дата и время установки.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMApprovalStateRecord или DMError.
//
Функция ПолучитьЗаписьСостоянияСогласования(СтруктураЗаписи) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMApprovalStateRecord");
		
		Ответ.id = ОбработкаЗапросовXDTO.ПолучитьIDПоСсылке(СтруктураЗаписи.Документ);
		Ответ.type = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(СтруктураЗаписи.Документ);
		
		Если ЗначениеЗаполнено(СтруктураЗаписи.Состояние) Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "status", СтруктураЗаписи.Состояние);
			Ответ.name = Строка(СтруктураЗаписи.Установил);
			Ответ.date = СтруктураЗаписи.ДатаУстановки;
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении записи состояния согласования'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO, описывающий участника действия.
//
// Параметры:
//   УчастникДействияXDTO - ОбъектXDTO - объект XDTO типа DMActionParticipant, который требуется заполнить.
//   УчастникДействияСсылка - ОпределяемыйТип.УчастникЗадач
//                          - СправочникСсылка.АвтоподстановкиДляОбъектов
//                          - СправочникСсылка.ПроектыКонтейнеры
//                          - СправочникСсылка.ПодразделенияКонтейнеры
//                          - СправочникСсылка.Пользователи
//                          - СправочникСсылка.РабочиеГруппы - ссылка на участника действия.
//   ЗаполнятьСписокВнешнихОбъектов - Булево - будет заполнен реквизит externalObject.
//
Процедура УчастникДействияXDTO(УчастникДействияXDTO, УчастникДействияСсылка,
		ЗаполнятьСписокВнешнихОбъектов = Истина) Экспорт
	
	ТипУчастника = ТипЗнч(УчастникДействияСсылка);
	Если ТипУчастника = Тип("Строка")
			Или ТипУчастника = Тип("Число")
			Или ТипУчастника = Тип("Булево")
			Или ТипУчастника = Тип("Неопределено") Тогда
		ЭтоСсылка = Ложь;
	Иначе
		ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипУчастника);
	КонецЕсли;
	
	Если УчастникДействияСсылка = Неопределено
			Или УчастникДействияСсылка = Null
			Или (ЭтоСсылка И Не ЗначениеЗаполнено(УчастникДействияСсылка)) Тогда
		Возврат;
	КонецЕсли;
	
	УчастникДействияXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionParticipant");
	
	РеквизитыУчастника = Новый Структура("Ссылка, Наименование", УчастникДействияСсылка, Строка(УчастникДействияСсылка));
	
	ДанныеУчастникаДействия = Новый Структура;
	Если ТипУчастника = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
		ДанныеУчастникаДействия.Вставить("autoSubstitutionForObjects", УчастникДействияСсылка);
	ИначеЕсли ТипУчастника = Тип("СправочникСсылка.ПроектыКонтейнеры") Тогда
		ДанныеУчастникаДействия.Вставить("containerProjects", УчастникДействияСсылка);
	ИначеЕсли ТипУчастника = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
		ДанныеУчастникаДействия.Вставить("containerSubdivisions", УчастникДействияСсылка);
	ИначеЕсли ТипУчастника = Тип("СправочникСсылка.Пользователи") Тогда
		ДанныеУчастникаДействия.Вставить("user", УчастникДействияСсылка);
	ИначеЕсли ТипУчастника = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		ДанныеУчастникаДействия.Вставить("userGroup", УчастникДействияСсылка);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		РеквизитыУчастника,
		ДанныеУчастникаДействия,
		УчастникДействияXDTO,
		Неопределено,,
		ЗаполнятьСписокВнешнихОбъектов,
		Ложь);
	
	Если ТипУчастника = Тип("СправочникСсылка.Сотрудники") Или ТипУчастника = Тип("СправочникСсылка.ПолныеРоли") Тогда
		УчастникЗадачXDTO(
			УчастникДействияXDTO.taskParticipant,
			УчастникДействияСсылка,
			ЗаполнятьСписокВнешнихОбъектов,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

// Подбирает участника действия ДО по объекту XDTO.
//
// Параметры:
//   УчастникДействияXDTO - ОбъектXDTO - объект XDTO типа DMActionParticipant.
//
// Возвращаемое значение:
//   ОпределяемыйТип.УчастникЗадач
//   СправочникСсылка.АвтоподстановкиДляОбъектов
//   СправочникСсылка.ПроектыКонтейнеры
//   СправочникСсылка.ПодразделенияКонтейнеры
//   СправочникСсылка.Пользователи
//   СправочникСсылка.РабочиеГруппы
//
Функция УчастникДействияДО(УчастникДействияXDTO) Экспорт
	
	Если Не ОбработкаЗапросовXDTO.ПроверитьТип(УчастникДействияXDTO, "DMActionParticipant") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(УчастникДействияXDTO, "objectID")
			И УчастникДействияXDTO.objectID.ID <> "" Тогда
		УчастникДействия = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(УчастникДействияXDTO.objectID, Ложь);
		Если ЗначениеЗаполнено(УчастникДействия) Тогда
			Возврат УчастникДействия;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(УчастникДействияXDTO, "taskParticipant") Тогда
		Возврат УчастникЗадачДО(УчастникДействияXDTO.taskParticipant);
	КонецЕсли;
	
	ИмяСвойстваXDTO = "";
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(УчастникДействияXDTO, "autoSubstitutionForObjects") Тогда
		ИмяСвойстваXDTO = "autoSubstitutionForObjects";
		
	ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(УчастникДействияXDTO, "containerProjects") Тогда
		ИмяСвойстваXDTO = "containerProjects";
		
	ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(УчастникДействияXDTO, "containerSubdivisions") Тогда
		ИмяСвойстваXDTO = "containerSubdivisions";
		
	ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(УчастникДействияXDTO, "user") Тогда
		ИмяСвойстваXDTO = "user";
		
	ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(УчастникДействияXDTO, "userGroup") Тогда
		ИмяСвойстваXDTO = "userGroup";
		
	КонецЕсли;
	
	УчастникДействия = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(
		УчастникДействия,
		УчастникДействияXDTO[ИмяСвойстваXDTO]);
	Возврат УчастникДействия;
	
КонецФункции

// Заполняет объект XDTO, описывающий участника задачи.
//
// Параметры:
//   УчастникЗадачXDTO - ОбъектXDTO - объект XDTO типа DMTaskParticipant, который требуется заполнить.
//   УчастникЗадачСсылка - ОпределяемыйТип.УчастникЗадач - ссылка на участника задачи.
//   ЗаполнятьСписокВнешнихОбъектов - Булево - будет заполнен реквизит externalObject.
//   ДетализироватьПолнуюРоль - Булево - Истина, если требуется получить основной и дополнительный объект адресации.
//
Процедура УчастникЗадачXDTO(УчастникЗадачXDTO, УчастникЗадачСсылка, ЗаполнятьСписокВнешнихОбъектов = Истина,
		ДетализироватьПолнуюРоль = Ложь) Экспорт
	
	ТипУчастника = ТипЗнч(УчастникЗадачСсылка);
	Если ТипУчастника = Тип("Строка")
			Или ТипУчастника = Тип("Число")
			Или ТипУчастника = Тип("Булево")
			Или ТипУчастника = Тип("Неопределено") Тогда
		ЭтоСсылка = Ложь;
	Иначе
		ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипУчастника);
	КонецЕсли;
	
	Если УчастникЗадачСсылка = Неопределено
			Или УчастникЗадачСсылка = Null
			Или (ЭтоСсылка И Не ЗначениеЗаполнено(УчастникЗадачСсылка)) Тогда
		Возврат;
	КонецЕсли;
	
	УчастникЗадачXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMTaskParticipant");
	
	РеквизитыУчастника = Новый Структура("Ссылка, Наименование", УчастникЗадачСсылка, Строка(УчастникЗадачСсылка));
	
	ДанныеУчастникаЗадач = Новый Структура;
	Если ТипУчастника = Тип("СправочникСсылка.ПолныеРоли") Тогда
		ДанныеУчастникаЗадач.Вставить("completeRole", УчастникЗадачСсылка);
	ИначеЕсли ТипУчастника = Тип("СправочникСсылка.Сотрудники") Тогда
		ДанныеУчастникаЗадач.Вставить("employee", УчастникЗадачСсылка);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		РеквизитыУчастника,
		ДанныеУчастникаЗадач,
		УчастникЗадачXDTO,
		Неопределено,,
		ЗаполнятьСписокВнешнихОбъектов,
		Ложь);
	
	Если ДетализироватьПолнуюРоль И ТипУчастника = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыПолнойРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчастникЗадачСсылка,
			"Ссылка, Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ПолучитьДанныеПолнойРоли(РеквизитыПолнойРоли, УчастникЗадачXDTO.completeRole);
	КонецЕсли;
	
КонецПроцедуры

// Подбирает участника задачи ДО по объекту XDTO.
//
// Параметры:
//   УчастникЗадачXDTO - ОбъектXDTO - объект XDTO типа DMTaskParticipant.
//
// Возвращаемое значение:
//   ОпределяемыйТип.УчастникЗадач
//
Функция УчастникЗадачДО(УчастникЗадачXDTO) Экспорт
	
	Если Не ОбработкаЗапросовXDTO.ПроверитьТип(УчастникЗадачXDTO, "DMTaskParticipant") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(УчастникЗадачXDTO, "objectID")
			И УчастникЗадачXDTO.objectID.ID <> "" Тогда
		УчастникЗадач = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(УчастникЗадачXDTO.objectId, Ложь);
		Если ЗначениеЗаполнено(УчастникЗадач) Тогда
			Возврат УчастникЗадач;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(УчастникЗадачXDTO, "employee") Тогда
		Сотрудник = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(Сотрудник, УчастникЗадачXDTO.employee);
		Возврат Сотрудник;
		
	ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(УчастникЗадачXDTO, "completeRole") Тогда
		ПолнаяРоль = Неопределено;
		ЗаполнитьПолнуюРольИзСвойстваXDTO(
			ПолнаяРоль,
			УчастникЗадачXDTO.completeRole,
			"role",
			"mainAddressingObject",
			"secondaryAddressingObject");
		Возврат ПолнаяРоль;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Действие

#Область ОбщиеМетодыДействия

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Действие - ОпределяемыйТип.ДействияОбъект
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеДействия(Действие, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Колонки.Добавить(НРег(ИмяКолонки));
		КонецЦикла;
	КонецЕсли;
	
	РежимДиалога = Ложь;
	Если Колонки.Найти(НРег("dialogueMode")) <> Неопределено Тогда
		РежимДиалога = Истина;
		Колонки.Удалить(Колонки.Найти(НРег("dialogueMode")));
	КонецЕсли;
	
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	ОбъектXDTO.dialogueMode = РежимДиалога;
	ОбъектXDTO.changeAllowed = ДействияСервер.ИзменениеДействияРазрешено(Действие.Ссылка, Действие.Предмет);
	ДанныеДействия = ДанныеДействия(Действие, РежимДиалога);
	ДействияСобытия.ЗаполнитьДанныеДействия(ДанныеДействия, ОбъектXDTO.changeAllowed);
	
	СтруктураДействия = Новый Структура;
	СтруктураДействия.Вставить("actionType", Действие.ВидДействия);
	СтруктураДействия.Вставить("author", Действие.Автор);
	СтруктураДействия.Вставить("comment", Действие.Комментарий);
	СтруктураДействия.Вставить("description", Действие.Описание);
	СтруктураДействия.Вставить("target", Действие.Предмет);
	СтруктураДействия.Вставить("delayedExecutionDate", Действие.ОтложенноеВыполнениеДата);
	СтруктураДействия.Вставить("actionSettings", Действие.НастройкаДействия);
	Если ЗначениеЗаполнено(Действие.Важность) Тогда
		СтруктураДействия.Вставить("importance",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Действие.Важность));
	КонецЕсли;
	Если ЗначениеЗаполнено(Действие.МоментРазыменованияУчастников) Тогда
		СтруктураДействия.Вставить("participantsDereferenceMoment",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Действие.МоментРазыменованияУчастников));
	КонецЕсли;
	
	ТипДействия = ТипЗнч(Действие);
	ТипОбъектаXDTO = ОбъектXDTO.Тип().Имя;
	
	Если ТипДействия = Тип("СправочникОбъект.ДействияИсполнения") И ТипОбъектаXDTO = "DMActionPerformance" Тогда
		ПолучитьДанныеДействияИсполнения(
			Действие,
			ОбъектXDTO,
			СтруктураДействия,
			ДанныеДействия,
			Колонки,
			ПолучатьВсеКолонки);
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияОзнакомления") И ТипОбъектаXDTO = "DMActionExamination" Тогда
		ПолучитьДанныеДействияОзнакомления(
			Действие,
			ОбъектXDTO,
			СтруктураДействия,
			ДанныеДействия,
			Колонки,
			ПолучатьВсеКолонки);
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияПодписания") И ТипОбъектаXDTO = "DMActionSigning" Тогда
		ПолучитьДанныеДействияПодписания(
			Действие,
			ОбъектXDTO,
			СтруктураДействия,
			ДанныеДействия,
			Колонки,
			ПолучатьВсеКолонки);
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияРегистрации") И ТипОбъектаXDTO = "DMActionRegistration" Тогда
		ПолучитьДанныеДействияРегистрации(
			Действие,
			ОбъектXDTO,
			СтруктураДействия,
			ДанныеДействия,
			Колонки,
			ПолучатьВсеКолонки);
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияСогласования") И ТипОбъектаXDTO = "DMActionApproval" Тогда
		ПолучитьДанныеДействияСогласования(
			Действие,
			ОбъектXDTO,
			СтруктураДействия,
			ДанныеДействия,
			Колонки,
			ПолучатьВсеКолонки);
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияУтверждения") И ТипОбъектаXDTO = "DMActionConfirmation" Тогда
		ПолучитьДанныеДействияУтверждения(
			Действие,
			ОбъектXDTO,
			СтруктураДействия,
			ДанныеДействия,
			Колонки,
			ПолучатьВсеКолонки);
		
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		Действие,
		СтруктураДействия,
		ОбъектXDTO,
		Колонки,
		Ложь);
	
	// Заполним участников.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("participantRows")) <> Неопределено Тогда
		ПолучитьУчастниковДействия(Действие, ОбъектXDTO, ТипДействия, ДанныеДействия);
	КонецЕсли;
	
	// Заполним разрешения.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("permissionRows")) <> Неопределено Тогда
		ПолучитьРазрешенияДействия(ОбъектXDTO, ДанныеДействия, Действие.Ссылка);
	КонецЕсли;
	
	// Состояние действия.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("state")) <> Неопределено Тогда
		СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие.Ссылка);
		Если ЗначениеЗаполнено(СостояниеДействия) Тогда
			ОбъектXDTO.state = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СостояниеДействия);
		КонецЕсли;
	КонецЕсли;
	
	// Все состояния и результаты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("allStatesAndResultsRows")) <> Неопределено Тогда
		ПолучитьВсеСостоянияИРезультатыДействия(Действие, ОбъектXDTO);
	КонецЕсли;
	
	// Признак исполнения действия с новыми участниками.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("actionPerformedWithNewParticipants")) <> Неопределено Тогда
		ОбъектXDTO.actionPerformedWithNewParticipants = ДействияСервер.ДействиеИсполняетсяСНовымиУчастниками(Действие);
	КонецЕсли;
	
	// Заполним данные формы.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("form")) <> Неопределено Тогда
		ОбъектXDTO.form = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionForm");
		
		ОбъектXDTO.form.title = ДанныеДействия.Заголовок;
		ОбъектXDTO.form.readOnly = ДанныеДействия.ТолькоПросмотр;
		ОбъектXDTO.form.onlyAddParticipantsIsAvailable = ДанныеДействия.МожноТолькоДобавлятьУчастников;
		ОбъектXDTO.form.protectedParticipantsCanBeChanged = ДанныеДействия.МожноИзменятьЗащищенныхУчастников;
		ОбъектXDTO.form.delayedExecutionPictureVisibility = ДанныеДействия.Элементы.ОтложенноеДействие.Видимость;
		ОбъектXDTO.form.delayedExecutionStartDays = ДанныеДействия.ОтложенноеНачалоВыполненияДни;
		ОбъектXDTO.form.delayedExecutionStartHours = ДанныеДействия.ОтложенноеНачалоВыполненияЧасы;
		ОбъектXDTO.form.delayedExecutionStartDescription = ДанныеДействия.ОписаниеОтложенногоНачалаВыполнения;
		ОбъектXDTO.form.startDateDescription =
			Перечисления.СостоянияВыполненияДействий.ПредставлениеОтложенногоВыполнения(Действие.Ссылка);
		
		ОбъектXDTO.form.delayedExecutionStartLabelField = ПолеНадписиXDTO(
			ДанныеДействия.Элементы.ОписаниеОтложенногоНачалаВыполнения);
		
		ОбъектXDTO.form.authorInputField = ПолеВводаXDTO(ДанныеДействия.Элементы.Автор);
		
		ОбъектXDTO.form.buttonDone = КнопкаXDTO(ДанныеДействия.Элементы.ЗаписатьИЗакрыть);
		ОбъектXDTO.form.buttonContinue = КнопкаXDTO(ДанныеДействия.Элементы.ПродолжитьДиалог);
		ОбъектXDTO.form.buttonCancel = КнопкаXDTO(ДанныеДействия.Элементы.Закрыть);
		ОбъектXDTO.form.buttonClearDelay = КнопкаXDTO(
			ДанныеДействия.Элементы.ОчиститьЗадержку,
			ДанныеДействия.Команды.ОчиститьЗадержку);
		
		ОбъектXDTO.form.groupNotEditable = ГруппаФормыXDTO(ДанныеДействия.Элементы.ГруппаНедоступноДляИзменения);
		ОбъектXDTO.form.groupDelayedExecutionDescription =
			ГруппаФормыXDTO(ДанныеДействия.Элементы.ГруппаОписаниеОтложенногоВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Действие - ОпределяемыйТип.ДействияОбъект - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеДействия(Действие, ОбъектXDTO) Экспорт
	
	ПередЗаписьюДействия(Действие, ОбъектXDTO);
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Действие.Автор, ОбъектXDTO, "author");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Действие.ОтложенноеВыполнениеДата, ОбъектXDTO, "delayedExecutionDate");
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "form") Тогда
		ОтложенноеНачалоВыполненияДни = 0;
		ОтложенноеНачалоВыполненияЧасы = 0;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ОтложенноеНачалоВыполненияДни, ОбъектXDTO.form, "delayedExecutionStartDays");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ОтложенноеНачалоВыполненияЧасы, ОбъектXDTO.form, "delayedExecutionStartHours");
		Действие.ОтложенноеНачалоВыполнения = ОтложенноеНачалоВыполненияЧасы * 3600 + ОтложенноеНачалоВыполненияДни * 86400;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMMomentOfDereferencingActionParticipants",
		ОбъектXDTO,
		"participantsDereferenceMoment",
		Действие,
		"МоментРазыменованияУчастников");
	
	ТипДействия = ТипЗнч(Действие);
	ТипОбъектаXDTO = ОбъектXDTO.Тип().Имя;
	
	ЗаполнитьУчастниковДействия(Действие, ОбъектXDTO, ТипДействия);
	
	Если ТипДействия = Тип("СправочникОбъект.ДействияИсполнения") И ТипОбъектаXDTO = "DMActionPerformance" Тогда
		ЗаполнитьДанныеДействияИсполнения(Действие, ОбъектXDTO);
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияОзнакомления") И ТипОбъектаXDTO = "DMActionExamination" Тогда
		ЗаполнитьДанныеДействияОзнакомления(Действие, ОбъектXDTO);
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияПодписания") И ТипОбъектаXDTO = "DMActionSigning" Тогда
		ЗаполнитьДанныеДействияПодписания(Действие, ОбъектXDTO);
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияРегистрации") И ТипОбъектаXDTO = "DMActionRegistration" Тогда
		ЗаполнитьДанныеДействияРегистрации(Действие, ОбъектXDTO);
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияСогласования") И ТипОбъектаXDTO = "DMActionApproval" Тогда
		ЗаполнитьДанныеДействияСогласования(Действие, ОбъектXDTO);
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияУтверждения") И ТипОбъектаXDTO = "DMActionConfirmation" Тогда
		ЗаполнитьДанныеДействияУтверждения(Действие, ОбъектXDTO);
		
	КонецЕсли;
	
КонецПроцедуры

// Ищет подходящее действие по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//
// Возвращаемое значение:
//   СправочникСсылка.ДействияИсполнения
//   СправочникСсылка.ДействияОзнакомления
//   СправочникСсылка.ДействияПодписания
//   СправочникСсылка.ДействияРегистрации
//   СправочникСсылка.ДействияСогласования
//   СправочникСсылка.ДействияУтверждения - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиДействие(ОбъектXDTO) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Выполняет дополнительную обработку Действия после записи.
//
// Параметры:
//   ОбъектДО - ОпределяемыйТип.ДействияОбъект - объект Документооборота, источник данных.
//   ИсточникДанных - Структура - источник данных:
//     * ТипИсточника - Строка - принимает значения "ОбъектXDTO" или "ВходящиеДанные", в зависимости от типа источника.
//     * ОбъектXDTO - ОбъектXDTO - объект XDTO, потомок DMObject. Источник данных.
//     * ТипXDTOОбъекта - Строка - имя типа XDTO объекта, из которого требуется заполнить объект ДО.
//     * ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//     * ПравилоЗагрузки - СправочникОбъект.ПравилаЗагрузкиДанныхВДО - правило загрузки.
//     * Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//
Процедура ОбработатьДействиеПослеЗаписи(ОбъектДО, ИсточникДанных) Экспорт
	
	ДействияСобытия.ДействияПослеЗаписиНаСервере(
		ДанныеДействия(ОбъектДО, ИсточникДанных.ОбъектXDTO.dialogueMode),
		ОбъектДО,
		ОбъектДО.ДополнительныеСвойства);
	
КонецПроцедуры

// Получает срок (точную дату или относительный срок) по представлению.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetDueDateByDueDatePresentationRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetDueDateByDueDatePresentationResponse или DMError.
//
Функция ПолучитьСрокИсполненияПоПредставлению(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetDueDateByDueDatePresentationResponse");
		Ответ.dueDate = Сообщение.oldDueDate;
		Ответ.dueDateDays = Сообщение.oldDueDateDays;
		Ответ.dueDateHours = Сообщение.oldDueDateHours;
		Ответ.dueDateMinutes = Сообщение.oldDueDateMinutes;
		
		ВариантУстановкиСрока = Неопределено;
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(Сообщение, "oldDueDateSpecificationVariant") Тогда
			ВариантУстановкиСрока = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО(
				"DMDueDateSpecificationOption",
				Сообщение.oldDueDateSpecificationVariant);
		КонецЕсли;
		
		Исполнитель = Неопределено;
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(Сообщение, "participant") Тогда
			Исполнитель = УчастникЗадачДО(Сообщение.participant);
		КонецЕсли;
		
		ПараметрыИзменения = Новый Структура;
		ПараметрыИзменения.Вставить("ТекстСообщенияПредупреждения", "");
		ПараметрыИзменения.Вставить("ВПредставленииМожетБытьДата", Истина);
		ПараметрыИзменения.Вставить("Исполнитель", Исполнитель);
		Ответ.result = СрокиИсполненияПроцессовВызовСервераКОРП.ИзменитьСрокИсполненияПоПредставлению(
			Ответ.dueDate,
			Ответ.dueDateDays,
			Ответ.dueDateHours,
			Ответ.dueDateMinutes,
			ВариантУстановкиСрока,
			Сообщение.dueDatePresentation,
			ПараметрыИзменения);
		Ответ.warningMessageText = ПараметрыИзменения.ТекстСообщенияПредупреждения;
		Если ЗначениеЗаполнено(ВариантУстановкиСрока) Тогда
			Ответ.dueDateSpecificationVariant = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ВариантУстановкиСрока);
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении срока исполнения'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Проверка действительности участников действия.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMCheckValidityOfActionParticipantsRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMCheckValidityOfActionParticipantsResponse или DMError.
//
Функция ПроверитьДействительностьУчастниковДействия(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCheckValidityOfActionParticipantsResponse");
		Ответ.result = "";
		
		ДействиеСсылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.action.objectID);
		Действие = ДействиеСсылка.ПолучитьОбъект();
		ЗаполнитьДанныеДействия(Действие, Сообщение.action);
		
		РезультатПроверки = РаботаСУчастниками.ПроверитьДействительностьУчастников(Действие);
		Если Не РезультатПроверки.ВсеДействительны Тогда
			Ответ.result = РаботаСУчастникамиКлиентСервер.ТекстВопросаПроверкиДействительностиУчастников(РезультатПроверки);
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при проверке действительности участников действия'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке(), Ложь));
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область Обработка

#Область ОбщиеМетодыОбработки

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ОбработкаОбъекта - СправочникОбъект.ОбработкиОбъектов
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMObjectProcessing.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеОбработкиОбъекта(ОбработкаОбъекта, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Колонки.Добавить(НРег(ИмяКолонки));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	ПолучатьДействия = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("actionsRows")) <> Неопределено);
	ПолучатьДополнительныеДанные = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("additionalFields")) <> Неопределено);
	ПолучатьДоступныеПоСостояниюПоля = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("enabledProperties")) <> Неопределено);
	
	ПредметСсылка = ОбработкаОбъекта.Владелец;
	
	Если ПолучатьДействия Тогда
		ПредставлениеОбработки = "";
		Действия = ДействияСервер.ДеревоОбработки(ПредметСсылка, ПредставлениеОбработки,, ОбработкаОбъекта.Ссылка);
	Иначе
		Если ОбработкаОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
			ПредставлениеОбработки = СтрШаблон(НСтр("ru = 'Начата %1'"),
				Формат(ОбработкаОбъекта.ДатаНачала, "ДФ='dd.MM.yyyy HH:mm'"));
		ИначеЕсли ОбработкаОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Завершена Тогда	
			ПредставлениеОбработки = СтрШаблон(НСтр("ru = 'Завершена %1'"),
				Формат(ОбработкаОбъекта.ДатаОкончания, "ДФ='dd.MM.yyyy HH:mm'"));
		КонецЕсли;
	КонецЕсли;
	
	ДатаИзмененияСостоянияОбработки = Неопределено;
	ДатаНачалаОбработки = Неопределено;
	СостояниеОбработки = ДействияСервер.ТекущееСостояниеОбработки(
		ПредметСсылка,
		ДатаИзмененияСостоянияОбработки,
		ДатаНачалаОбработки);
	ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(
		ПредметСсылка,
		ПредметСсылка.ПолучитьОбъект());
	ЕстьПравоОстановкиОбработки = ДействияСервер.ЕстьПравоОстановкиОбработки(
		ПараметрыОбъектаОбработки,
		Пользователи.ТекущийПользователь());
	
	ДанныеОбработкиОбъекта = Новый Структура;
	ДанныеОбработкиОбъекта.Вставить("target", ПредметСсылка);
	ДанныеОбработкиОбъекта.Вставить("stateChangeDate", ДатаИзмененияСостоянияОбработки);
	ДанныеОбработкиОбъекта.Вставить("presentation", ПредставлениеОбработки);
	ДанныеОбработкиОбъекта.Вставить("haveRightsToStopProcessing", ЕстьПравоОстановкиОбработки);
	ДанныеОбработкиОбъекта.Вставить("useVisas", ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования"));
	
	ДанныеОбработкиОбъекта.Вставить("startDate", ОбработкаОбъекта.ДатаНачала);
	ДанныеОбработкиОбъекта.Вставить("creationDate", ОбработкаОбъекта.ДатаСоздания);
	ДанныеОбработкиОбъекта.Вставить("began", ОбработкаОбъекта.Начал);
	ДанныеОбработкиОбъекта.Вставить("postedInHistory", ОбработкаОбъекта.ПомещенаВИсторию);
	ДанныеОбработкиОбъекта.Вставить("placedInHistory", ОбработкаОбъекта.ПоместилВИсторию);
	
	Если ЗначениеЗаполнено(СостояниеОбработки) Тогда
		ДанныеОбработкиОбъекта.Вставить("state",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СостояниеОбработки));
	КонецЕсли;
	
	Если ПолучатьДоступныеПоСостояниюПоля Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ПредметСсылка) Тогда
			СостояниеРазрешаетИзменятьОбработку = Делопроизводство.ПолеДокументаДоступноПоСостоянию("Обработка", ПредметСсылка);
		Иначе
			СостояниеРазрешаетИзменятьОбработку = Истина;
		КонецЕсли;
		ДанныеОбработкиОбъекта.Вставить("stateAllowsRestartProcessing", СостояниеРазрешаетИзменятьОбработку);
		ДанныеОбработкиОбъекта.Вставить("stateAllowsStartAndTerminateProcessing", СостояниеРазрешаетИзменятьОбработку);
		ДанныеОбработкиОбъекта.Вставить("stateAllowsStopAndContinueProcessing", СостояниеРазрешаетИзменятьОбработку);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		ОбработкаОбъекта,
		ДанныеОбработкиОбъекта,
		ОбъектXDTO,
		НаборКолонок,
		Ложь);
	
	// Заполним действия.
	ОбъектXDTO.haveApprovalActions = Ложь;
	ОбъектXDTO.haveExaminationActions = Ложь;
	ОбъектXDTO.completedNegativelyWithComments = Ложь;
	Если ПолучатьДействия Тогда
		ОбъектXDTO.actionsRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionRows");
		ЗаполнитьДействия(
			Действия.Строки,
			ОбъектXDTO.actionsRows,
			ПолучатьДополнительныеДанные,
			ОбъектXDTO.haveApprovalActions,
			ОбъектXDTO.haveExaminationActions,
			ОбъектXDTO.completedNegativelyWithComments);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ОбработкаОбъекта - СправочникОбъект.ОбработкиОбъектов - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMObjectProcessing. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеОбработкиОбъекта(ОбработкаОбъекта, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ОбработкаОбъекта.Наименование,
		ОбъектXDTO,
		"name");
	
КонецПроцедуры

// Ищет обработку объекта по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMObjectProcessing.
//   Владелец - СправочникСсылка - владелец объекта, который требуется найти.
//
// Возвращаемое значение:
//   СправочникСсылка.ОбработкиОбъектов - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиОбработкуОбъекта(ОбъектXDTO, Владелец = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Владелец) И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "target") Тогда
		Владелец = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.target);
		Если ЗначениеЗаполнено(Владелец)
				И Не Метаданные.Справочники.ОбработкиОбъектов.Владельцы.Содержит(Владелец.Метаданные()) Тогда
			Владелец = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Возврат Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Владелец);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Заполняет действия для предмета согласно настройкам.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMFillProcessingRequest. Запрос на старт обработки.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMFillProcessingResponse или DMError.
//
Функция ЗаполнитьОбработку(Сообщение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFillProcessingResponse");
		
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.object);
		ПравилаОбработкиСервер.ЗаполнитьДействияПредмета(Предмет);
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при заполнении действий'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Если ЗначениеЗаполнено(Предмет) Тогда
			ОбработкаЗапросовXDTO.ДобавитьНавигационнуюСсылкуКТекстуОшибки(Ошибка.description, Предмет);
		КонецЕсли;
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Запускает обработку объекта.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMStartProcessingRequest. Запрос на старт обработки.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMStartProcessingResponse или DMError.
//
Функция НачатьОбработку(Сообщение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMStartProcessingResponse");
		
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.object);
		
		ТипПредмета = ТипЗнч(Предмет);
		Если ТипПредмета <> Тип("СправочникСсылка.ДокументыПредприятия")
				И ТипПредмета <> Тип("СправочникСсылка.Мероприятия") Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Объект %1 (%2) не поддерживает обработку.'"),
				Предмет,
				ТипПредмета);
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет)
				И Не Делопроизводство.ПолеДокументаДоступноПоСостоянию("Обработка", Предмет) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Запуск обработки документа ""%1"" не доступен по состоянию.'"),
				Предмет);
		КонецЕсли;
		
		ПредметОбъект = Предмет.ПолучитьОбъект();
		
		Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
		Если Не ЗначениеЗаполнено(Обработка) Тогда
			// Создадим обработку и заполним по ПОД.
			Обработка = Справочники.ОбработкиОбъектов.НоваяОбработкаОбъекта(Предмет);
			// Заполняем по ПОД.
			ПравилаОбработкиСервер.ЗаполнитьДействияПрограммно(Предмет, Сотрудники.ОсновнойСотрудникПользователя());
		КонецЕсли;
		
		ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(Предмет, ПредметОбъект);
		
		МассивОшибок = ОбработкиОбъектовВызовСервера.ПроверитьУсловияЗапуска(
			ПараметрыОбъектаОбработки.ОбъектОбработки,
			ПараметрыОбъектаОбработки.ВидОбъекта);
		
		Если МассивОшибок.Количество() <> 0 Тогда
			
			Если ТипЗнч(ПараметрыОбъектаОбработки.ОбъектОбработки) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				ТекстПредмета = НСтр("ru = 'Документ не может быть запущен в обработку:'");
				
			ИначеЕсли ТипЗнч(ПараметрыОбъектаОбработки.ОбъектОбработки) = Тип("СправочникСсылка.Мероприятия") Тогда
				ТекстПредмета = НСтр("ru = 'Мероприятие не может быть запущено в обработку:'");
				
			Иначе
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестный тип объекта обработки %1 (%2).'"),
					ПараметрыОбъектаОбработки.ОбъектОбработки,
					ТипЗнч(ПараметрыОбъектаОбработки.ОбъектОбработки));
				
			КонецЕсли;
			
			ТекстПредупреждения = СтрСоединить(МассивОшибок, Символы.ПС);
			ТекстПредупреждения = ТекстПредмета + Символы.ПС + Символы.ПС + ТекстПредупреждения;
			
			ВызватьИсключение ТекстПредупреждения;
		КонецЕсли;
		
		ОбработкиОбъектовВызовСервера.ПроверитьРолиФайловПередЗапускомОбработки(
			ПараметрыОбъектаОбработки.ОбъектОбработки);
		
		ОбработкиОбъектовВызовСервера.ПроверитьЗаполнениеДействий(ПараметрыОбъектаОбработки.ОбъектОбработки);
		
		Состояние = ДействияСервер.ТекущееСостояниеОбработки(Предмет);
		Если ЗначениеЗаполнено(Состояние) Тогда
			ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Обработка уже была начата ранее. Текущее состояние обработки: %1'"),
					Состояние);
		КонецЕсли;
		
		// Требуется автозаполнение файлов
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет) Тогда
			МассивФайловДляЗаполнения = Новый Массив;
			ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Предмет);
			РеквизитыФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПодчиненныеФайлы, "ПодписанЭП, Зашифрован");
			Для Каждого Файл Из ПодчиненныеФайлы Цикл
				Если Не РеквизитыФайлов[Файл].ПодписанЭП И Не РеквизитыФайлов[Файл].Зашифрован Тогда
					МассивФайловДляЗаполнения.Добавить(Файл);
				КонецЕсли;
			КонецЦикла;
			
			ОбработкиОбъектовВызовСервера.ЗаполнитьФайлыДокументаПриЗапускеВОбработку(
				МассивФайловДляЗаполнения);
		КонецЕсли;
		
		ОбработкиОбъектовВызовСервера.НачатьОбработку(Предмет);
		
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(Сообщение, "link") Тогда
			ОбработкаЗапросовXDTO.ДобавитьСсылкуНаВнешнийОбъект(
				Сообщение.link.linkedObject,
				Сообщение.link.ownerObject);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при старте обработки объекта'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Если ЗначениеЗаполнено(Предмет) Тогда
			ОбработкаЗапросовXDTO.ДобавитьНавигационнуюСсылкуКТекстуОшибки(Ошибка.description, Предмет);
		КонецЕсли;
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Останавливает/продолжает обработку объекта.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMStopContinueProcessingRequest. Запрос на старт обработки.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMStopContinueProcessingResponse или DMError.
//
Функция ОстановитьПродолжитьОбработку(Сообщение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMStopContinueProcessingResponse");
		
		СостояниеОбработки = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО(
			"DMObjectProcessingState",
			Сообщение.objectProcessingState);
		
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.object);
		
		ТипПредмета = ТипЗнч(Предмет);
		Если ТипПредмета <> Тип("СправочникСсылка.ДокументыПредприятия")
				И ТипПредмета <> Тип("СправочникСсылка.Мероприятия") Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Объект %1 (%2) не поддерживает обработку.'"),
				Предмет,
				ТипПредмета);
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет)
				И Не Делопроизводство.ПолеДокументаДоступноПоСостоянию("Обработка", Предмет) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Изменение обработки документа ""%1"" не доступно по состоянию.'"),
				Предмет);
		КонецЕсли;
		
		ОбработкиОбъектов.ОстановитьПродолжитьОбработкуОбъекта(Предмет, СостояниеОбработки);
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Если СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
			ЗаголовокОшибки = НСтр("ru = 'Ошибка при продолжении обработки объекта'");
		Иначе
			ЗаголовокОшибки = НСтр("ru = 'Ошибка при остановке обработки объекта'");
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			ЗаголовокОшибки,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Если ЗначениеЗаполнено(Предмет) Тогда
			ОбработкаЗапросовXDTO.ДобавитьНавигационнуюСсылкуКТекстуОшибки(Ошибка.description, Предмет);
		КонецЕсли;
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Помещает процесс обработки документа в историю и заполняет обработку заново.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMRestartProcessingRequest. Запрос на старт обработки.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMRestartProcessingResponse или DMError.
//
Функция ПерезапуститьОбработку(Сообщение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Не ДействияВызовСервера.ЕстьПравоПомещенияДействийВИсторию() Тогда
			ВызватьИсключение НСтр("ru = 'Недостаточно прав на перезапуск обработки.'");
		КонецЕсли;
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMRestartProcessingResponse");
		
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.object);
		
		ТипПредмета = ТипЗнч(Предмет);
		Если ТипПредмета <> Тип("СправочникСсылка.ДокументыПредприятия")
				И ТипПредмета <> Тип("СправочникСсылка.Мероприятия") Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Объект %1 (%2) не поддерживает обработку.'"),
				Предмет,
				ТипПредмета);
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет)
				И Не Делопроизводство.ПолеДокументаДоступноПоСостоянию("Обработка", Предмет) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Перезапуск обработки документа ""%1"" не доступен по состоянию.'"),
				Предмет);
		КонецЕсли;
		
		ОбработкиОбъектов.ПрерватьОбработкуОбъекта(Предмет, "");
		// Создадим обработку и заполним по ПОД.
		Справочники.ОбработкиОбъектов.НоваяОбработкаОбъекта(Предмет);
		// Заполняем по ПОД.
		ПравилаОбработкиСервер.ЗаполнитьДействияПрограммно(Предмет, Сотрудники.ОсновнойСотрудникПользователя());
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при перезапуске обработки объекта'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Если ЗначениеЗаполнено(Предмет) Тогда
			ОбработкаЗапросовXDTO.ДобавитьНавигационнуюСсылкуКТекстуОшибки(Ошибка.description, Предмет);
		КонецЕсли;
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает текущую, не помещенную в историю обработку объекта.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetCurrentObjectProcessingRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetCurrentObjectProcessingResponse или DMError.
//
Функция ПолучитьТекущуюОбработку(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetCurrentObjectProcessingResponse");
		
		ПредметОбработки = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.target);
		Обработка = НайтиОбработкуОбъекта(Сообщение, ПредметОбработки);
		Состояние = Перечисления.СостоянияОбработкиОбъектов.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(Обработка) Тогда
			ОбработкаОбъект = Обработка.ПолучитьОбъект();
			Состояние = ОбработкаОбъект.Состояние;
			
			objectProcessing = ОбработкаЗапросовXDTO.ПолучитьОбъектXDTOПоСуществующимДаннымДО(
				ОбработкаОбъект,
				Сообщение.columnSet,
				Ложь);
			Если ОбработкаЗапросовXDTO.ПроверитьТип(objectProcessing, "DMError") Тогда
				Возврат objectProcessing;
			КонецЕсли;
			Ответ.objectProcessing = objectProcessing;
		КонецЕсли;
		
		ПараметрыВида = ДействияКлиентСервер.НовыйПараметрыВидаОбъекта();
		ВидОбъекта = Неопределено;
		Если ТипЗнч(ПредметОбработки) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			ВидОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметОбработки, "ВидДокумента");
		ИначеЕсли ТипЗнч(ПредметОбработки) = Тип("СправочникСсылка.Мероприятия") Тогда
			ВидОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметОбработки, "ВидМероприятия");
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидОбъекта) Тогда
			ПараметрыВида.ОбработкаЗадана = Справочники.НастройкиОбработкиВидовОбъектов.НастройкиОбработкиЗаданы(
				ВидОбъекта,
				ТекущаяДатаСеанса());
			ПараметрыВида.НастройкиДействийЗаданы = (НастройкиДействий.КоличествоНастроекПравилОбработки(ВидОбъекта) > 0);
		КонецЕсли;
		Ответ.processingIsSetByRules = ДействияКлиентСервер.ОбработкаЗаданаПравилами(ПараметрыВида);
		
		ЗаполнитьИнформациюОПрерыванииОбработки(Ответ, ПредметОбработки, Состояние);
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении обработки объекта'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Прерывает обработку объекта.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMTerminateProcessingRequest. Запрос на старт обработки.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMTerminateProcessingResponse или DMError.
//
Функция ПрерватьОбработку(Сообщение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMTerminateProcessingResponse");
		
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.object);
		
		ТипПредмета = ТипЗнч(Предмет);
		Если ТипПредмета <> Тип("СправочникСсылка.ДокументыПредприятия")
				И ТипПредмета <> Тип("СправочникСсылка.Мероприятия") Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Объект %1 (%2) не поддерживает обработку.'"),
				Предмет,
				ТипПредмета);
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет)
				И Не Делопроизводство.ПолеДокументаДоступноПоСостоянию("Обработка", Предмет) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Прерывание обработки документа ""%1"" не доступно по состоянию.'"),
				Предмет);
		КонецЕсли;
		
		ПричинаПрерывания = Сообщение.terminationReason;
		
		ОбработкиОбъектов.ПрерватьОбработкуОбъекта(Предмет, ПричинаПрерывания);
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ошибка = ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при прерывании обработки объекта'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Если ЗначениеЗаполнено(Предмет) Тогда
			ОбработкаЗапросовXDTO.ДобавитьНавигационнуюСсылкуКТекстуОшибки(Ошибка.description, Предмет);
		КонецЕсли;
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область Задача

#Область ОбщиеМетодыЗадачи

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ДействиеЗадачи - ДокументОбъект.ДействиеЗадачи
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMTaskAction.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
Процедура ПолучитьДанныеЗадачи(ДействиеЗадачи, ОбъектXDTO, НаборКолонок = Неопределено,
		КешДанных = Неопределено) Экспорт
	
	ПолучатьHTMLПредпросмотра = Ложь;
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Если НРег(ИмяКолонки) = "htmlview" Тогда
				ПолучатьHTMLПредпросмотра = Истина;
			Иначе
				Колонки.Добавить(НРег(ИмяКолонки));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДействиеЗадачи) = Тип("ДокументОбъект.ДействиеЗадачи") Тогда
		ЗапросДействияЗадач = Новый Запрос(ТекстЗапросаДействияЗадач());
		ЗапросДействияЗадач.Текст = ЗапросДействияЗадач.Текст +
			"
			|ГДЕ
			|	ДействияЗадач.ДействиеЗадачи = &Ссылка
			|	И ДействияЗадач.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи)";
		ЗапросДействияЗадач.УстановитьПараметр("Ссылка", ДействиеЗадачи.Ссылка);
		Выборка = ЗапросДействияЗадач.Выполнить().Выгрузить();
		ДополнитьДанныеЗадач(Выборка, КешДанных);
		ДействиеЗадачи = Выборка[0];
	КонецЕсли;
	
	ДанныеДействияЗадачи = Новый Структура;
	ДанныеДействияЗадачи.Вставить("title", ДействиеЗадачи.Заголовок);
	ДанныеДействияЗадачи.Вставить("descriptionOfReceivedUpdates", ДействиеЗадачи.ОписаниеПоступившихОбновлений);
	ДанныеДействияЗадачи.Вставить("laboriousnessFrom", ДействиеЗадачи.ТрудоемкостьОт);
	ДанныеДействияЗадачи.Вставить("laboriousnessUpTo", ДействиеЗадачи.ТрудоемкостьДо);
	ДанныеДействияЗадачи.Вставить("date", ДействиеЗадачи.Дата);
	ДанныеДействияЗадачи.Вставить("term", ДействиеЗадачи.Срок);
	ДанныеДействияЗадачи.Вставить("existSubtasks", ДействиеЗадачи.ЕстьПодзадачи);
	ДанныеДействияЗадачи.Вставить("new", ДействиеЗадачи.Новое);
	ДанныеДействияЗадачи.Вставить("isOverdue", ДействиеЗадачи.Просрочено);
	
	СостояниеКонтроля = Контроль.ИндексКартинкиКонтроля(
		ДействиеЗадачи.СостояниеКонтроля,
		ДействиеЗадачи.КонтрольныйСрок,
		ДействиеЗадачи.КонтрольныйСрокОбщий);
	ДанныеДействияЗадачи.Вставить("monitoringState", СостояниеКонтроля);
	
	Если ЗначениеЗаполнено(ДействиеЗадачи.РезультатДействия) Тогда
		ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДействиеЗадачи.РезультатДействия);
		СостояниеДействия = Перечисления.ХарактерыРезультатов.ИндексКартинкиСостояния(ХарактерРезультата);
	Иначе
		СостояниеДействия = Перечисления.ВидыСостоянийУчастниковЗадач.ИндексКартинкиСостояния(
			ДействиеЗадачи.ВидСостоянияУчастниковЗадач);
	КонецЕсли;
	ДанныеДействияЗадачи.Вставить("actionState", СостояниеДействия);
	ДанныеДействияЗадачи.Вставить("existSubstitutes", ДействиеЗадачи.ЕстьЗамещающие);
	МассивДействий = Новый Массив;
	СтруктураДействия = Новый Структура;
	СтруктураДействия.Вставить("ДействиеЗадачи", ДействиеЗадачи.Ссылка);
	СтруктураДействия.Вставить("Участник", ДействиеЗадачи.Исполнитель);
	СтруктураДействия.Вставить("ЕстьЗамещающие", ДействиеЗадачи.ЕстьЗамещающие);
	СтруктураДействия.Вставить("ФактическийИсполнитель", Справочники.ФактическиеИсполнители.ПустаяСсылка());
	МассивДействий.Добавить(СтруктураДействия);
	ПредставленияИсполнителей =
		РаботаСЗадачами.ПредставленияИсполнителейДействийЗадач(МассивДействий, Ложь);
	ДанныеДействияЗадачи.Вставить("performerPresentation", ПредставленияИсполнителей[ДействиеЗадачи.Ссылка]);
	ДанныеДействияЗадачи.Вставить("authorPresentation",
		РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(ДействиеЗадачи.Автор, Ложь));
	
	Если ЗначениеЗаполнено(ДействиеЗадачи.Приоритет) Тогда
		ДанныеДействияЗадачи.Вставить("priority",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ДействиеЗадачи.Приоритет));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДействиеЗадачи.Флаг) Тогда
		ДанныеДействияЗадачи.Вставить("flag",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ДействиеЗадачи.Флаг));
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		ДействиеЗадачи,
		ДанныеДействияЗадачи,
		ОбъектXDTO,
		Колонки,
		Ложь,
		Ложь);
	
	// Заполнение участников.
	УчастникЗадачXDTO(ОбъектXDTO.author, ДействиеЗадачи.Автор, Ложь);
	УчастникЗадачXDTO(ОбъектXDTO.performer, ДействиеЗадачи.Исполнитель, Ложь);
	
	// Заполнение области действия.
	ОбластьДействия = РаботаСЗадачамиКлиентСервер.НоваяОбластьДействия();
	ЗаполнитьОбластьДействия(ОбластьДействия);
	ВыделенныеДействия = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи.Ссылка);
	
	РеквизитыДействий = Новый Соответствие;
	РеквизитыДействий.Вставить(ДействиеЗадачи.Ссылка, ДействиеЗадачи);
	
	Попытка
		ДанныеДляОбновления = РаботаСЗадачами.ДанныеДляОбновления(
			ДействиеЗадачи.Ссылка,
			ВыделенныеДействия,
			ДействиеЗадачи.Задача,
			РеквизитыДействий,
			КешДанных);
	Исключение
		ЗаписьЖурналаРегистрации(
			ОбработкаЗапросовXDTO.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,
			ДействиеЗадачи.Ссылка,
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		// Ошибка могла возникнуть из-за нехватки прав доступа у пользователя.
		// В таком случае в области действия задачи будет отображаться информационное сообщение
		// о том, что описание задачи не удалось сформировать.
		Возврат;
	КонецПопытки;
	РаботаСЗадачами.ОбновитьРезультатДействияТекстом(ОбластьДействия, ДанныеДляОбновления);
	ДанныеВариантовВыполненияЗадачи = РаботаСЗадачами.ДанныеВариантовВыполненияЗадачи(
		ДействиеЗадачи.Ссылка,
		ВыделенныеДействия,
		ДанныеДляОбновления,
		ОбластьДействия.МаксимальнаяДлинаОбщая,
		КешДанных);
	ОбластьДействия.ВзятьВРаботу.Доступность = ДанныеДляОбновления.ЕстьНовыеДействия;
	ОбластьДействия.ОтменитьВзятиеВРаботу.Доступность = ДанныеДляОбновления.ЕстьДействияВРаботе;
	ОбластьДействия.ПодменюФлаги.Доступность = ДанныеДляОбновления.ВсеДействияДоступны;
	ОбластьДействия.ФормаДобавитьУчастников.Видимость = ДанныеДляОбновления.ЕстьДобавлениеУчастников;
	ОбластьДействия.ФормаДобавитьУчастников.Доступность =
		ДанныеДляОбновления.ОжидаетВыполнения И ДанныеДляОбновления.ВсеДействияДоступны;
	
	ОбъектXDTO.actionArea = ОбработкаЗапросовXDTO.СоздатьОбъект("DMTaskActionArea");
	
	// Кнопки.
	ВыбратьШаблонДляВыполненияЗадачи = СтруктураКнопкиФормы();
	ВыбратьШаблонДляВыполненияЗадачи.Видимость =
		ДанныеВариантовВыполненияЗадачи.ВыбратьШаблонДляВыполненияЗадачиВидимость;
	ОбъектXDTO.actionArea.buttonSelectTaskTemplate = КнопкаXDTO(
		ВыбратьШаблонДляВыполненияЗадачи);
	
	// Отменить выполнение.
	КнопкаОтменитьВыполнение = СтруктураКнопкиФормы();
	КнопкаОтменитьВыполнение.Видимость = ДанныеВариантовВыполненияЗадачи.ОтменитьВыполнениеВидимость;
	КнопкаОтменитьВыполнение.Доступность = ДанныеВариантовВыполненияЗадачи.ДоступныКомандыВыполнения;
	ОбъектXDTO.actionArea.buttonUndoExecution = КнопкаXDTO(КнопкаОтменитьВыполнение);
	
	// Результаты вариантов.
	РезультатВарианта1 = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
	Если ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты.Количество() >= 1 Тогда
		РезультатВарианта1 = ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты[0];
	КонецЕсли;
	
	РезультатВарианта2 = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
	Если ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты.Количество() >= 2 Тогда
		РезультатВарианта2 = ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты[1];
	КонецЕсли;
	
	РезультатВарианта3 = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
	Если ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты.Количество() >= 3 Тогда
		РезультатВарианта3 = ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты[2];
	КонецЕсли;
	
	РеквизитыРезультатов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты,
		"ЗаголовокКоманды, ЗаголовокКомандыЯзык1, ХарактерРезультата");
	
	КонфигурацияИспользуетТолькоОдинЯзык = МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь);
	ИспользуетсяЯзык1 = Не КонфигурацияИспользуетТолькоОдинЯзык И Не МультиязычностьСервер.ЭтоОсновнойЯзык();
	
	// Команды результатов.
	ВыполнитьДействиеЗадачиВариант1 = КнопкаВыполнитьДействиеЗадачи(
		РезультатВарианта1,
		ДанныеВариантовВыполненияЗадачи,
		РеквизитыРезультатов,
		ИспользуетсяЯзык1);
	ОбъектXDTO.actionArea.buttonExecuteOption1 = КнопкаXDTO(ВыполнитьДействиеЗадачиВариант1);
	
	ВыполнитьДействиеЗадачиВариант2 = КнопкаВыполнитьДействиеЗадачи(
		РезультатВарианта2,
		ДанныеВариантовВыполненияЗадачи,
		РеквизитыРезультатов,
		ИспользуетсяЯзык1);
	ОбъектXDTO.actionArea.buttonExecuteOption2 = КнопкаXDTO(ВыполнитьДействиеЗадачиВариант2);
	
	ВыполнитьДействиеЗадачиВариант3 = КнопкаВыполнитьДействиеЗадачи(
		РезультатВарианта3,
		ДанныеВариантовВыполненияЗадачи,
		РеквизитыРезультатов,
		ИспользуетсяЯзык1);
	ОбъектXDTO.actionArea.buttonExecuteOption3 = КнопкаXDTO(ВыполнитьДействиеЗадачиВариант3);
	
	// Шаблоны вариантов.
	ШаблоныДляВыполнения = ДанныеВариантовВыполненияЗадачи.ШаблоныДляВыбора.ВыгрузитьЗначения();
	
	ШаблонДляВыполнения1 = Справочники.ШаблоныТекстов.ПустаяСсылка();
	Если ШаблоныДляВыполнения.Количество() >= 1 Тогда
		ШаблонДляВыполнения1 = ШаблоныДляВыполнения[0];
	КонецЕсли;
	
	ШаблонДляВыполнения2 = Справочники.ШаблоныТекстов.ПустаяСсылка();
	Если ШаблоныДляВыполнения.Количество() >= 2 Тогда
		ШаблонДляВыполнения2 = ШаблоныДляВыполнения[1];
	КонецЕсли;
	
	ШаблонДляВыполнения3 = Справочники.ШаблоныТекстов.ПустаяСсылка();
	Если ШаблоныДляВыполнения.Количество() >= 3 Тогда
		ШаблонДляВыполнения3 = ШаблоныДляВыполнения[2];
	КонецЕсли;
	
	РеквизитыШаблонов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ШаблоныДляВыполнения,
		"Наименование, РезультатДействия");
	
	// Команды шаблонов.
	ВыполнитьДействиеЗадачиПоШаблону1 = КнопкаВыполнитьДействиеЗадачиПоШаблону(
		ШаблонДляВыполнения1,
		ДанныеВариантовВыполненияЗадачи,
		РеквизитыРезультатов,
		РеквизитыШаблонов);
	ОбъектXDTO.actionArea.buttonExecuteByTemplateOption1 = КнопкаXDTO(
		ВыполнитьДействиеЗадачиПоШаблону1);
	
	ВыполнитьДействиеЗадачиПоШаблону2 = КнопкаВыполнитьДействиеЗадачиПоШаблону(
		ШаблонДляВыполнения2,
		ДанныеВариантовВыполненияЗадачи,
		РеквизитыРезультатов,
		РеквизитыШаблонов);
	ОбъектXDTO.actionArea.buttonExecuteByTemplateOption2 = КнопкаXDTO(
		ВыполнитьДействиеЗадачиПоШаблону2);
	
	ВыполнитьДействиеЗадачиПоШаблону3 = КнопкаВыполнитьДействиеЗадачиПоШаблону(
		ШаблонДляВыполнения3,
		ДанныеВариантовВыполненияЗадачи,
		РеквизитыРезультатов,
		РеквизитыШаблонов);
	ОбъектXDTO.actionArea.buttonExecuteByTemplateOption3 = КнопкаXDTO(
		ВыполнитьДействиеЗадачиПоШаблону3);
	
	// Дополнительные команды.
	ВыполнитьПодключаемоеДействиеЗадачи1 = СтруктураКнопкиФормы();
	Если ДанныеВариантовВыполненияЗадачи.ДанныеДополнительныхКоманд.Количество() > 0 Тогда
		ДанныеДополнительнойКоманды = ДанныеВариантовВыполненияЗадачи.ДанныеДополнительныхКоманд[0];
		ВыполнитьПодключаемоеДействиеЗадачи1.Видимость = Истина;
		ВыполнитьПодключаемоеДействиеЗадачи1.Доступность = ДанныеВариантовВыполненияЗадачи.ДоступныКомандыВыполнения;
		ВыполнитьПодключаемоеДействиеЗадачи1.Заголовок = ДанныеДополнительнойКоманды.Заголовок;
		ВыполнитьПодключаемоеДействиеЗадачи1.ВысотаЗаголовка =
			РаботаСЗадачами.ВысотаЗаголовкаКомандыВыполнения(ВыполнитьПодключаемоеДействиеЗадачи1.Заголовок);
	Иначе
		ВыполнитьПодключаемоеДействиеЗадачи1.Видимость = Ложь;
	КонецЕсли;
	ОбъектXDTO.actionArea.buttonExecuteConnectedTaskAction1 = КнопкаXDTO(ВыполнитьПодключаемоеДействиеЗадачи1);
	
	// Результаты вариантов.
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		ОбъектXDTO.actionArea,
		"resultOfOption1",
		РезультатВарианта1,
		Ложь);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		ОбъектXDTO.actionArea,
		"resultOfOption2",
		РезультатВарианта2,
		Ложь);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		ОбъектXDTO.actionArea,
		"resultOfOption3",
		РезультатВарианта3,
		Ложь);
	
	// Прочее.
	ОбъектXDTO.actionArea.dataVersion = ДанныеВариантовВыполненияЗадачи.ВерсияДанных;
	ОбъектXDTO.actionArea.actionResultString = ДанныеДляОбновления.РезультатДействияТекстом;
	ОбъектXDTO.actionArea.actionResultInputField = ПолеВводаXDTO(ОбластьДействия.РезультатДействияТекстом);
	ОбъектXDTO.actionArea.flagsSubmenu = ГруппаФормыXDTO(ОбластьДействия.ПодменюФлаги);
	ОбъектXDTO.actionArea.buttonAcceptTask = КнопкаXDTO(ОбластьДействия.ВзятьВРаботу,, Ложь);
	ОбъектXDTO.actionArea.buttonRevokeTaskAcceptance = КнопкаXDTO(ОбластьДействия.ОтменитьВзятиеВРаботу,, Ложь);
	ОбъектXDTO.actionArea.buttonAddParticipants = КнопкаXDTO(ОбластьДействия.ФормаДобавитьУчастников,, Ложь);
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		ОбъектXDTO.actionArea,
		"processingAction",
		ДанныеДляОбновления.ДействиеОбработки,
		Ложь);
	
	// Описание.
	Если ПолучатьHTMLПредпросмотра Тогда
		ТекущаяЗадачаОбъект = ДействиеЗадачи.Задача.ПолучитьОбъект();
		ОбъектXDTO.htmlView = ТекущаяЗадачаОбъект.ОписаниеHTML(
			ДействиеЗадачи,
			Ложь,
			КешДанных,
			Ложь,
			Ложь);
	КонецЕсли;
	
	// Приложения.
	ПараметрыОбновления = РаботаСЗадачамиКлиентСервер.НовыйПараметрыОбновленияДереваПриложений();
	ПараметрыОбновления.РеквизитДерева = ДеревоПриложений();
	ПараметрыОбновления.ЭлементДерева = СтруктураДереваПриложений();
	ПараметрыОбновления.Задача = ДействиеЗадачи.Задача;
	ПараметрыОбновления.ДействиеЗадачи = ДействиеЗадачи.Ссылка;
	
	ОписаниеHTMLИнструкции = "";
	РаботаСЗадачами.ОбновитьДеревоПриложений(
		ПараметрыОбновления,
		ОписаниеHTMLИнструкции,
		КешДанных);
	
	ОсновнойПредмет = Неопределено;
	ВспомогательныеПредметы = Новый Массив;
	ДеревоПриложенийВXDTO(
		ПараметрыОбновления.РеквизитДерева.Строки,
		ОбъектXDTO,
		ДействиеЗадачи.Ссылка,
		ОсновнойПредмет,
		ВспомогательныеПредметы,
		ОписаниеHTMLИнструкции,
		КешДанных);
	Если ОсновнойПредмет = Неопределено И ВспомогательныеПредметы.Количество() > 0 Тогда
		ОсновнойПредмет = ВспомогательныеПредметы[0];
	КонецЕсли;
	ЗаполнитьОсновнойПредмет(ОбъектXDTO, ОсновнойПредмет, КешДанных);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ДействиеЗадачи - ДокументОбъект.ДействиеЗадачи - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMTaskAction. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеЗадачи(ДействиеЗадачи, ОбъектXDTO) Экспорт
	
	ДействиеЗадачи.Флаг = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО("DMObjectFlag", ОбъектXDTO.flag);
	
КонецПроцедуры

// Ищет подходящую задачу по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMTaskAction.
//
// Возвращаемое значение:
//   ДокументСсылка.ДействиеЗадачи - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиЗадачу(ОбъектXDTO) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Берёт в работу действия задачи.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMAcceptTasksRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMAcceptTasksResponse или DMError.
//
Функция ВзятьВРаботу(Сообщение) Экспорт
	
	ПодробноеПредставлениеОшибки = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДействияЗадач = Новый Массив;
		Для Каждого ЗадачаXDTO Из Сообщение.tasks Цикл
			ДействиеЗадачи = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ЗадачаXDTO.objectID);
			Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
				ПодробноеПредставлениеОшибки = Ложь;
				ВызватьИсключение НСтр("ru = 'Не указано действие задачи'");
			КонецЕсли;
			ДействияЗадач.Добавить(ДействиеЗадачи);
		КонецЦикла;
		
		ТребуетсяДополнительноеДействие = Новый Массив;
		
		РезультатВзятияВРаботу = РаботаСЗадачамиВызовСервера.ВзятьВРаботу(ДействияЗадач, Неопределено);
		
		Если Не РезультатВзятияВРаботу.ВзятиеВРаботуОбработано Тогда
			
			Если РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя Тогда
				ТребуетсяДополнительноеДействие.Добавить(НСтр("ru = 'Требуется выбор фактического исполнителя задачи.'"));
			Иначе
				ПодробноеПредставлениеОшибки = Ложь;
				ВызватьИсключение НСтр("ru = 'Данную задачу можно взять в работу только на стороне 1С:Документооборот'");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяДополнительноеДействие.Количество() > 0 Тогда
			ПодробноеПредставлениеОшибки = Ложь;
			ТребуетсяДополнительноеДействие.Добавить(
				НСтр("ru = 'Данное действие можно выполнить только на стороне 1С:Документооборот'"));
			ВызватьИсключение СтрСоединить(ТребуетсяДополнительноеДействие, Символы.ПС);
		КонецЕсли;
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAcceptTasksResponse");
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при взятии задачи в работу'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке(), ПодробноеПредставлениеОшибки));
		
	КонецПопытки;
	
КонецФункции

// Выполняет действие задачи по указанному варианту.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMExecuteTaskActionRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMExecuteTaskActionResponse или DMError.
//
Функция ВыполнитьДействиеЗадачи(Сообщение) Экспорт
	
	ПодробноеПредставлениеОшибки = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДействиеЗадачи = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.taskAction.objectID);
		Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
			ПодробноеПредставлениеОшибки = Ложь;
			ВызватьИсключение НСтр("ru = 'Не указано действие задачи'");
		КонецЕсли;
		
		РезультатДействия = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.resultOfTaskAction.objectID);
		Если Не ЗначениеЗаполнено(РезультатДействия) Тогда
			ПодробноеПредставлениеОшибки = Ложь;
			ВызватьИсключение НСтр("ru = 'Не указан результат действия задачи'");
		КонецЕсли;
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMExecuteTaskActionResponse");
		
		ВерсияДанныхДействия = Сообщение.dataVersion;
		РезультатДействияТекстом = Сообщение.actionResultString;
		
		Если ЗначениеЗаполнено(РезультатДействияТекстом) Тогда
			РезультатСохранения = РаботаСЗадачамиВызовСервера.СохранитьРезультатДействия(
				ДействиеЗадачи,
				РезультатДействияТекстом,
				ВерсияДанныхДействия,
				Истина);
			ВерсияДанныхДействия = РезультатСохранения.НоваяВерсияДанных;
		КонецЕсли;
		
		ПараметрыВыполнения = НовыйПараметрыВыполненияДействийЗадач(Сообщение.interactiveActionResult);
		ПараметрыВыполнения.ВерсииДанных = Новый Соответствие;
		ПараметрыВыполнения.ВерсииДанных.Вставить(ДействиеЗадачи, ВерсияДанныхДействия);
		
		ДанныеВыполнения = РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи),
			РезультатДействия,
			ПараметрыВыполнения);
		
		Пока ДанныеВыполнения.ТребуетсяИнтерактивноеДействие Цикл
			ВыполнитьПовторноНаСторонеДО = Ложь;
			ВыполнитьНаСторонеБИД = Ложь;
			
			Если ДанныеВыполнения.ВернутьсяКЗадаче Тогда
				ВернутьсяКЗадаче(
					Ответ,
					Сообщение,
					ДействиеЗадачи,
					ПараметрыВыполнения,
					ВыполнитьНаСторонеБИД,
					ВыполнитьПовторноНаСторонеДО);
			ИначеЕсли ДанныеВыполнения.ВыбратьИсполнителяЗадачи Тогда
				ВыбратьИсполнителяЗадачи(
					Ответ,
					Сообщение,
					ДействиеЗадачи,
					ПараметрыВыполнения,
					ВыполнитьНаСторонеБИД,
					ВыполнитьПовторноНаСторонеДО);
			ИначеЕсли ДанныеВыполнения.ПроизвольныйВопрос.ЗадатьВопрос Тогда
				ЗадатьВопрос(
					Ответ,
					Сообщение,
					ПараметрыВыполнения,
					ДанныеВыполнения,
					ВыполнитьНаСторонеБИД,
					ВыполнитьПовторноНаСторонеДО);
			ИначеЕсли ДанныеВыполнения.ТребуетсяВвестиПричинуВозврата Тогда
				ВвестиПричинуВозврата(
					ДействиеЗадачи,
					РезультатДействияТекстом,
					ПараметрыВыполнения,
					ВыполнитьПовторноНаСторонеДО);
			ИначеЕсли ДанныеВыполнения.ДополнительныеПараметры.Свойство("ИзменитьПараметрыПроцесса")
					И (РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно
						Или РезультатДействия = Справочники.РезультатыДействийЗадач.ВозвращеноНаДоработку) Тогда
				ИзменитьПараметрыПроцесса(
					Ответ,
					Сообщение,
					ДействиеЗадачи,
					ПараметрыВыполнения,
					ДанныеВыполнения,
					ВыполнитьНаСторонеБИД,
					ВыполнитьПовторноНаСторонеДО);
			КонецЕсли;
			
			Если ВыполнитьНаСторонеБИД Тогда
				Возврат Ответ;
			ИначеЕсли ВыполнитьПовторноНаСторонеДО Тогда
				ДанныеВыполнения = РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи),
					РезультатДействия,
					ПараметрыВыполнения);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеВыполнения.ЗадачиНельзяВыполнить.Количество() > 0 Тогда
			ПодробноеПредставлениеОшибки = Ложь;
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Нельзя выполнить задачу ""%1"" по причине:
					|%2'"),
				ДанныеВыполнения.ЗадачиНельзяВыполнить[0].Задача,
				ДанныеВыполнения.ЗадачиНельзяВыполнить[0].Причина);
		КонецЕсли;
		
		Если ДанныеВыполнения.ЗапретВыполнения Тогда
			ПодробноеПредставлениеОшибки = Ложь;
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Задача не выполнена:
					|%1'"),
				ДанныеВыполнения.ПричинаЗапретаВыполнения);
		КонецЕсли;
		
		Если ДанныеВыполнения.ВерсииДанныхРазличаются Тогда
			ПодробноеПредставлениеОшибки = Ложь;
			ВызватьИсключение НСтр("ru = 'Задача изменилась перед попыткой исполнения'");
		КонецЕсли;
	
		Если ДанныеВыполнения.ПоказатьПредупреждение Тогда
			ПредупреждениеЗаполняемыхПредметов = СтрСоединить(
				ДанныеВыполнения.Предупреждения,
				Символы.ПС + Символы.ПС);
			ПодробноеПредставлениеОшибки = Ложь;
			ВызватьИсключение ПредупреждениеЗаполняемыхПредметов;
		КонецЕсли;
		
		Если ДанныеВыполнения.ПроверитьЗанятыеФайлы Тогда
			ПодробноеПредставлениеОшибки = Ложь;
			ВызватьИсключение НСтр("ru = 'Некоторые файлы приложенных документов заняты для редактирования'");
		КонецЕсли;
		
		ТребуетсяДополнительноеДействие = Новый Массив;
		
		Если ДанныеВыполнения.ВыбратьИсполнителяЗадачи Тогда
			ТребуетсяДополнительноеДействие.Добавить(НСтр("ru = 'Требуется выбор фактического исполнителя задачи.'"));
		КонецЕсли;
		
		Если ДанныеВыполнения.ВыбратьПомощника Тогда
			ТребуетсяДополнительноеДействие.Добавить(НСтр("ru = 'Требуется выбор помощника для обработки резолюции.'"));
		КонецЕсли;
		
		Если ДанныеВыполнения.ПредложитьЗакрытьПодзадачи Тогда
			ТребуетсяДополнительноеДействие.Добавить(НСтр("ru = 'Требуется закрыть невыполненные поручения.'"));
		КонецЕсли;
		
		Если ДанныеВыполнения.ТребуетсяВвестиПричинуВозврата Тогда
			ТребуетсяДополнительноеДействие.Добавить(
				СтрШаблон(НСтр("ru = 'Требуется ввести причину возврата задачи ""%1"":
						|%2'"),
					ДанныеВыполнения.ЗадачаДляВозврата,
					ДанныеВыполнения.ОбщаяПричинаВозврата));
		КонецЕсли;
		
		Если ДанныеВыполнения.ТребуетсяИнтерактивноеДействие Или ТребуетсяДополнительноеДействие.Количество() > 0 Тогда
			ПодробноеПредставлениеОшибки = Ложь;
			ТребуетсяДополнительноеДействие.Добавить(
				НСтр("ru = 'Данное действие можно выполнить только на стороне 1С:Документооборот'"));
			ВызватьИсключение СтрСоединить(ТребуетсяДополнительноеДействие, Символы.ПС);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при выполнении действия задачи'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке(), ПодробноеПредставлениеОшибки));
		
	КонецПопытки;
	
КонецФункции

// Дополняет таблицу задач дополнительными данными, и формирует кеш по данным задач,
// который требуется для ускорения обновления списка "Задачи мне" через интеграцию.
//
// Параметры:
//   Данные - ТаблицаЗначений:
//     * Ссылка - ДокументСсылка.ДействиеЗадачи
//     * Задача - ДокументСсылка.Задача
//   КешДанных - Структура - неявно возвращаемое значение, кеш по данным задач.
//
Процедура ДополнитьДанныеЗадач(Данные, КешДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсеОбъектыДоступа = Новый Массив;
	
	ДокументыДействиеЗадачи = Новый Массив;
	ДокументыЗадача = Новый Массив;
	Для Каждого Строка Из Данные Цикл
		ВсеОбъектыДоступа.Добавить(Строка.Ссылка);
		ДокументыДействиеЗадачи.Добавить(Строка.Ссылка);
		Если ЗначениеЗаполнено(Строка.Задача) Тогда
			ВсеОбъектыДоступа.Добавить(Строка.Задача);
			ДокументыЗадача.Добавить(Строка.Задача);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействиеЗадачиДокумент.Ссылка КАК Ссылка,
		|	ДействиеЗадачиДокумент.ВерсияДанных КАК ВерсияДанных,
		|	ДействиеЗадачиДокумент.ВидУчастника КАК ВидУчастника,
		|	ДействиеЗадачиДокумент.ДатаВыполнения КАК ДатаВыполнения,
		|	ДействиеЗадачиДокумент.ЕстьОсобыйСрок КАК ЕстьОсобыйСрок,
		|	ДействиеЗадачиДокумент.ЕстьПриложения КАК ЕстьПриложения,
		|	ДействиеЗадачиДокумент.Источник КАК Источник,
		|	ДействиеЗадачиДокумент.ОсобыйЗаголовок КАК ОсобыйЗаголовок,
		|	ДействиеЗадачиДокумент.ОсобоеОписание КАК ОсобоеОписание,
		|	ДействиеЗадачиДокумент.ОсобоеОписаниеФорматированное КАК ОсобоеОписаниеФорматированное,
		|	ДействиеЗадачиДокумент.ОсобыйСрок КАК ОсобыйСрок,
		|	ДействиеЗадачиДокумент.ПометкаУдаления КАК ПометкаУдаления,
		|	ДействиеЗадачиДокумент.Проведен КАК Проведен,
		|	ДействиеЗадачиДокумент.РезультатДействияТекстом КАК РезультатДействияТекстом,
		|	ДействиеЗадачиДокумент.ФактическийИсполнитель КАК ФактическийИсполнитель
		|ПОМЕСТИТЬ ВТДействиеЗадачиДокумент
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачиДокумент
		|ГДЕ
		|	ДействиеЗадачиДокумент.Ссылка В(&ДокументыДействиеЗадачи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачаДокумент.Ссылка КАК Ссылка,
		|	ЗадачаДокумент.Источник КАК Источник
		|ПОМЕСТИТЬ ВТЗадачаДокумент
		|ИЗ
		|	Документ.Задача КАК ЗадачаДокумент
		|ГДЕ
		|	ЗадачаДокумент.Ссылка В(&ДокументыЗадача)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ЗадачаИсполнителя.Выполнена КАК Выполнена,
		|	ЗадачаИсполнителя.ИсключенаИзПроцесса КАК ИсключенаИзПроцесса,
		|	ЗадачаИсполнителя.ПометкаУдаления КАК ПометкаУдаления,
		|	ЗадачаИсполнителя.Предметы.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		РольПредмета КАК РольПредмета,
		|		ИмяПредмета КАК ИмяПредмета,
		|		Предмет КАК Предмет,
		|		ДоступноУдаление КАК ДоступноУдаление,
		|		ОбязательноеЗаполнение КАК ОбязательноеЗаполнение
		|	) КАК Предметы
		|ИЗ
		|	ВТДействиеЗадачиДокумент КАК ВТДействиеЗадачиДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ВТДействиеЗадачиДокумент.Источник = ЗадачаИсполнителя.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТЗадачаДокумент.Ссылка КАК Ссылка,
		|	ВТЗадачаДокумент.Источник КАК Источник,
		|	ЗадачаДокумент.Участники.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ВидУчастника КАК ВидУчастника,
		|		ВнешнийИдентификатор КАК ВнешнийИдентификатор,
		|		ДействиеУчастника КАК ДействиеУчастника,
		|		Участник КАК Участник
		|	) КАК Участники,
		|	ЗадачаДокумент.Приложения.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Приложение КАК Приложение
		|	) КАК Приложения
		|ИЗ
		|	ВТЗадачаДокумент КАК ВТЗадачаДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ЗадачаДокумент
		|		ПО ВТЗадачаДокумент.Ссылка = ЗадачаДокумент.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента, НЕОПРЕДЕЛЕНО) КАК ВидДокумента
		|ПОМЕСТИТЬ ВТВсеПредметыИПриложения
		|ИЗ
		|	ВТДействиеЗадачиДокумент КАК ВТДействиеЗадачиДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|			ПО ЗадачаИсполнителяПредметы.Предмет = ДокументыПредприятия.Ссылка
		|		ПО ВТДействиеЗадачиДокумент.Источник = ЗадачаИсполнителяПредметы.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадачаПриложения.Приложение,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента, НЕОПРЕДЕЛЕНО)
		|ИЗ
		|	ВТЗадачаДокумент КАК ВТЗадачаДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача.Приложения КАК ЗадачаПриложения
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|			ПО ЗадачаПриложения.Приложение = ДокументыПредприятия.Ссылка
		|		ПО ВТЗадачаДокумент.Ссылка = ЗадачаПриложения.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТВсеПредметыИПриложения.Предмет ССЫЛКА Справочник.Файлы
		|			ТОГДА Файлы.ВладелецФайла
		|		ИНАЧЕ ВТВсеПредметыИПриложения.Предмет
		|	КОНЕЦ КАК Предмет,
		|	ВТВсеПредметыИПриложения.ВидДокумента КАК ВидДокумента
		|ИЗ
		|	ВТВсеПредметыИПриложения КАК ВТВсеПредметыИПриложения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ВТВсеПредметыИПриложения.Предмет = Файлы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДействиеЗадачиДокумент.Ссылка КАК Ссылка,
		|	ВТДействиеЗадачиДокумент.ВерсияДанных КАК ВерсияДанных,
		|	ВТДействиеЗадачиДокумент.ВидУчастника КАК ВидУчастника,
		|	ВТДействиеЗадачиДокумент.ДатаВыполнения КАК ДатаВыполнения,
		|	ВТДействиеЗадачиДокумент.ЕстьОсобыйСрок КАК ЕстьОсобыйСрок,
		|	ВТДействиеЗадачиДокумент.ЕстьПриложения КАК ЕстьПриложения,
		|	ВТДействиеЗадачиДокумент.Источник КАК Источник,
		|	ВТДействиеЗадачиДокумент.ОсобыйЗаголовок КАК ОсобыйЗаголовок,
		|	ВТДействиеЗадачиДокумент.ОсобоеОписание КАК ОсобоеОписание,
		|	ВТДействиеЗадачиДокумент.ОсобоеОписаниеФорматированное КАК ОсобоеОписаниеФорматированное,
		|	ВТДействиеЗадачиДокумент.ОсобыйСрок КАК ОсобыйСрок,
		|	ВТДействиеЗадачиДокумент.ПометкаУдаления КАК ПометкаУдаления,
		|	ВТДействиеЗадачиДокумент.Проведен КАК Проведен,
		|	ВТДействиеЗадачиДокумент.РезультатДействияТекстом КАК РезультатДействияТекстом,
		|	ВТДействиеЗадачиДокумент.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	ЕСТЬNULL(ДокументЗадача.ВидЗадачи, НЕОПРЕДЕЛЕНО) КАК ЗадачаВидЗадачи,
		|	ЕСТЬNULL(ЗадачаИсполнителя.ИсточникДанных, НЕОПРЕДЕЛЕНО) КАК ИсточникДанных,
		|	ЕСТЬNULL(ИсторияЗадач.Автор, НЕОПРЕДЕЛЕНО) КАК ПеренаправлениеАвтор,
		|	ЕСТЬNULL(ИсторияЗадач.Дата, НЕОПРЕДЕЛЕНО) КАК ПеренаправлениеДата,
		|	ЕСТЬNULL(ИсторияЗадач.Контекст, НЕОПРЕДЕЛЕНО) КАК ПеренаправлениеКонтекст,
		|	ДействиеЗадачиДокумент.Приложения.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Приложение КАК Приложение
		|	) КАК Приложения
		|ИЗ
		|	ВТДействиеЗадачиДокумент КАК ВТДействиеЗадачиДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДействиеЗадачи КАК ДействиеЗадачиДокумент
		|		ПО ВТДействиеЗадачиДокумент.Ссылка = ДействиеЗадачиДокумент.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО (ДействиеЗадачиДокумент.Источник = ЗадачаИсполнителя.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗадач КАК ИсторияЗадач
		|		ПО (ДействиеЗадачиДокумент.Ссылка = ИсторияЗадач.ДействиеЗадачи)
		|			И (ДействиеЗадачиДокумент.Задача = ИсторияЗадач.Задача)
		|			И (ИсторияЗадач.Событие = ЗНАЧЕНИЕ(Справочник.СобытияЗадач.Перенаправление))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
		|		ПО (ДействиеЗадачиДокумент.Задача = ДокументЗадача.Ссылка)");
	Запрос.УстановитьПараметр("ДокументыДействиеЗадачи", ДокументыДействиеЗадачи);
	Запрос.УстановитьПараметр("ДокументыЗадача", ДокументыЗадача);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КешДанных = Новый Структура;
	
	ДанныеЗадачИсполнителей = Новый Соответствие;
	ВыборкаЗадачаИсполнителя = МассивРезультатов[2].Выбрать();
	Пока ВыборкаЗадачаИсполнителя.Следующий() Цикл
		ДанныеЗадачаИсполнителя = Новый Структура;
		Для Каждого Колонка Из МассивРезультатов[2].Колонки Цикл
			ДанныеЗадачаИсполнителя.Вставить(Колонка.Имя, ВыборкаЗадачаИсполнителя[Колонка.Имя]);
		КонецЦикла;
		ДанныеЗадачИсполнителей[ДанныеЗадачаИсполнителя.Ссылка] = ДанныеЗадачаИсполнителя;
	КонецЦикла;
	КешДанных.Вставить("ДанныеЗадачИсполнителей", ДанныеЗадачИсполнителей);
	
	ДанныеДокументовЗадача = Новый Соответствие;
	ВыборкаДокументЗадача = МассивРезультатов[3].Выбрать();
	Пока ВыборкаДокументЗадача.Следующий() Цикл
		ДанныеДокументЗадача = Новый Структура;
		Для Каждого Колонка Из МассивРезультатов[3].Колонки Цикл
			ДанныеДокументЗадача.Вставить(Колонка.Имя, ВыборкаДокументЗадача[Колонка.Имя]);
		КонецЦикла;
		ДанныеДокументовЗадача[ДанныеДокументЗадача.Ссылка] = ДанныеДокументЗадача;
	КонецЦикла;
	КешДанных.Вставить("ДанныеДокументовЗадача", ДанныеДокументовЗадача);
	
	ТаблицаПредметы = МассивРезультатов[5].Выгрузить();
	МассивПредметы = ТаблицаПредметы.ВыгрузитьКолонку("Предмет");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеОбъектыДоступа, МассивПредметы, Истина);
	
	НовыеДанные = "ВерсияДанных, ВидУчастника, ЕстьОсобыйСрок, Источник, ИсточникДанных, ЗадачаВидЗадачи,
		|ОсобыйЗаголовок, ОсобоеОписание, ОсобоеОписаниеФорматированное, ОсобыйСрок,
		|ПометкаУдаления, РезультатДействияТекстом, ФактическийИсполнитель, Приложения,
		|ДатаВыполнения, Проведен, ЕстьПриложения";
	Для Каждого ИмяКолонки Из СтрРазделить(НовыеДанные, ",", Ложь) Цикл
		Данные.Колонки.Добавить(СокрЛП(ИмяКолонки));
	КонецЦикла;
	Данные.Колонки.Добавить("СведенияОПеренаправлении");
	
	ДанныеДокументовДействиеЗадачи = Новый Соответствие;
	Выборка = МассивРезультатов[6].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиДанные = Данные.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
		Если СтрокиДанные.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокиДанные[0], Выборка, НовыеДанные);
			СтрокиДанные[0].СведенияОПеренаправлении = Новый Структура("БылоПеренаправление, КтоПеренаправил, Комментарий");
			Если Выборка.ПеренаправлениеДата <> Неопределено Тогда
				СтрокиДанные[0].СведенияОПеренаправлении.БылоПеренаправление = Истина;
				СтрокиДанные[0].СведенияОПеренаправлении.КтоПеренаправил = Выборка.ПеренаправлениеАвтор;
				СтрокиДанные[0].СведенияОПеренаправлении.Комментарий = Выборка.ПеренаправлениеКонтекст.Получить().Комментарий;
			Иначе
				СтрокиДанные[0].СведенияОПеренаправлении.БылоПеренаправление = Ложь;
				СтрокиДанные[0].СведенияОПеренаправлении.КтоПеренаправил = Неопределено;
				СтрокиДанные[0].СведенияОПеренаправлении.Комментарий = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокиДанные[0].Источник) Тогда
				ВсеОбъектыДоступа.Добавить(СтрокиДанные[0].Источник);
			КонецЕсли;
			ДанныеДокументовДействиеЗадачи[Выборка.Ссылка] = СтрокиДанные[0];
		КонецЕсли;
	КонецЦикла;
	КешДанных.Вставить("ДанныеДокументовДействиеЗадачи", ДанныеДокументовДействиеЗадачи);
	
	ТаблицаПрав = ДокументооборотПраваДоступа.ПраваПользователейПоОбъектам(
		ВсеОбъектыДоступа,
		Истина,
		Пользователи.ТекущийПользователь());
	ПраваПоОбъектам = Новый Соответствие;
	Для Каждого ОбъектДоступа Из ВсеОбъектыДоступа Цикл
		Строки = ТаблицаПрав.НайтиСтроки(Новый Структура("ОбъектДоступа", ОбъектДоступа));
		Если Строки.Количество() = 1 Тогда
			ПраваПоОбъектам[ОбъектДоступа] = Строки[0];
		КонецЕсли;
	КонецЦикла;
	КешДанных.Вставить("ПраваПоОбъектам", ПраваПоОбъектам);
	
	ДанныеПредметов = Новый Соответствие;
	ДанныеФайлов = Новый Соответствие;
	Для Каждого Строка Из ТаблицаПредметы Цикл
		ДанныеПредмета = Новый Структура("Обзор, ТаблицаФайлы, МассивКомбинацийРолей, ВидДокумента");
		ДанныеПредмета.ВидДокумента = Строка.ВидДокумента;
		ДанныеПредмета.Обзор = ОбзорЗадач.ПолучитьОбзорПредметаЗадачи(Строка.Предмет, КешДанных);
		ДанныеПредмета.МассивКомбинацийРолей = Новый Массив;
		ДанныеПредмета.ТаблицаФайлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(
			Неопределено,
			Строка.Предмет,
			Ложь,
			Истина,
			ДанныеПредмета.МассивКомбинацийРолей,
			Ложь,
			ДанныеПредмета.ВидДокумента);
		ДанныеПредметов[Строка.Предмет] = ДанныеПредмета;
		Для Каждого Строка Из ДанныеПредмета.ТаблицаФайлы Цикл
			ДанныеФайлов[Строка.Ссылка] = Строка;
		КонецЦикла;
	КонецЦикла;
	КешДанных.Вставить("ДанныеПредметов", ДанныеПредметов);
	КешДанных.Вставить("ДанныеФайлов", ДанныеФайлов);
	
КонецПроцедуры

// Возвращает запрос на получение списка задач, вместе со всеми установленными параметрами.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetDynamicListRequest.
//   ИтогиСписка - Структура:
//     * ОписаниеИтогов - Строка
//     * НеНачато - Число
//     * Просрочено - Число
//     * Всего - Число
//
// Возвращаемое значение:
//   Запрос
//
Функция ЗапросСОтборами(Сообщение, ИтогиСписка) Экспорт
	
	ПереданныеИсполнители = Новый Массив;
	Исполнитель = Новый Массив;
	ИсполнительБезЗамещаемых = Новый Массив;
	
	Для Каждого Условие Из Сообщение.conditions Цикл
		
		Если НРег(Условие.property) = "byuser" И Условие.value = Истина Тогда
			
			// По исполнителю.
			РеквизитыГруппировкиЗадачиМне = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Справочники.ГруппировкиЗадач.ЗадачиМне,
				"Автор, Исполнитель, ИсполнительРазыменован");
			
			Исполнитель =
				РаботаСЗадачами.РазыменоватьОтборПоУчастнику(
					РеквизитыГруппировкиЗадачиМне.Исполнитель,
					РеквизитыГруппировкиЗадачиМне.ИсполнительРазыменован,
					Истина);
			ИсполнительБезЗамещаемых =
				РаботаСЗадачами.РазыменоватьОтборПоУчастнику(
					РеквизитыГруппировкиЗадачиМне.Исполнитель,
					РеквизитыГруппировкиЗадачиМне.ИсполнительРазыменован,
					Ложь);
			ПереданныеИсполнители =
				РегистрыСведений.ИсполнителиВместоНедействительных.ПереданныеИсполнители(
					ПараметрыСеанса.СотрудникиПользователя);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				Исполнитель,
				ПереданныеИсполнители);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ИсполнительБезЗамещаемых,
				ПереданныеИсполнители);
			
		КонецЕсли;
		
	КонецЦикла;
	
	КолИсполнителей = ?(ТипЗнч(Исполнитель) = Тип("Массив"),
		Исполнитель.Количество(),
		1);
	КолИсполнителейБезЗамещаемых = ?(ТипЗнч(ИсполнительБезЗамещаемых) = Тип("Массив"),
		ИсполнительБезЗамещаемых.Количество(),
		1);
	ЕстьЗамещаемые = (КолИсполнителей > КолИсполнителейБезЗамещаемых);
	
	РеестрЗадачиМне = Справочники.РеестрыЗадач.РеестрЗадачиМне(Пользователи.ТекущийПользователь());
	
	ЗапросСОтборами = Новый Запрос(ТекстЗапросаДействияЗадач());
	ЗапросСОтборами.Текст = ЗапросСОтборами.Текст +
		"
		|ГДЕ
		|	ДействияЗадач.ОжидаетВыполнения
		|	И ДействияЗадач.РеестрЗадач В (&РеестрЗадачиМне)";
	ЗапросСОтборами.УстановитьПараметр("РеестрЗадачиМне", РеестрЗадачиМне);
	
	Если ЕстьЗамещаемые Тогда
		ЗапросСОтборами.Текст = ЗапросСОтборами.Текст +
			"
			|И ИСТИНА В
			|	(ВЫБРАТЬ ПЕРВЫЕ 1
			|		ИСТИНА
			|	ИЗ
			|		РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
			|	ГДЕ
			|		ВсеИсполнителиДействийЗадач.ДействиеЗадачи = ДействияЗадач.ДействиеЗадачи
			|		И ВсеИсполнителиДействийЗадач.Исполнитель В (&ИсполнительБезЗамещаемых))";
		ЗапросСОтборами.УстановитьПараметр("ИсполнительБезЗамещаемых", ИсполнительБезЗамещаемых);
	КонецЕсли;
	
	ПараметрыОтбораИтогов = Новый Структура;
	
	ПараметрыОтбораИтогов.Вставить("РеестрЗадач", РеестрЗадачиМне);
	
	ОтборыПоСостояниюЗадач = Новый Массив;
	
	Для Каждого Условие Из Сообщение.conditions Цикл
		
		Если НРег(Условие.property) = "title" И Не ПустаяСтрока(Условие.value) Тогда
			
			// Отбор по заголовку.
			ЗапросСОтборами.Текст = ЗапросСОтборами.Текст + Символы.ПС + "И ДействияЗадач.Заголовок ПОДОБНО &Заголовок";
			ЗапросСОтборами.УстановитьПараметр("Заголовок", Условие.value);
			
		ИначеЕсли НРег(Условие.property) = "author"
				И ТипЗнч(Условие.value) = Тип("ОбъектXDTO")
				И ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "DMTaskParticipant") Тогда
			
			// Отбор по автору.
			Автор = УчастникЗадачДО(Условие.value);
			ЗапросСОтборами.Текст = ЗапросСОтборами.Текст + Символы.ПС + "И ДействияЗадач.Автор = &Автор";
			ЗапросСОтборами.УстановитьПараметр("Автор", Автор);
			ПараметрыОтбораИтогов.Вставить("Автор", Автор);
			
		ИначеЕсли НРег(Условие.property) = "performer"
				И ТипЗнч(Условие.value) = Тип("ОбъектXDTO")
				И ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "DMTaskParticipant") Тогда
			
			// Отбор по исполнителю.
			Исполнитель = УчастникЗадачДО(Условие.value);
			ЗапросСОтборами.Текст = ЗапросСОтборами.Текст + Символы.ПС + "И ДействияЗадач.Исполнитель = &Исполнитель";
			ЗапросСОтборами.УстановитьПараметр("Исполнитель", Исполнитель);
			ПараметрыОтбораИтогов.Вставить("Исполнитель", Исполнитель);
			
		ИначеЕсли НРег(Условие.property) = "taskactiontype"
				И ТипЗнч(Условие.value) = Тип("ОбъектXDTO")
				И ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "DMObjectID") Тогда
			
			// Отбор по виду действия.
			ВидДействия = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value);
			ЗапросСОтборами.Текст = ЗапросСОтборами.Текст + Символы.ПС + "И ДействияЗадач.ВидДействия = &ВидДействия";
			ЗапросСОтборами.УстановитьПараметр("ВидДействия", ВидДействия);
			ПараметрыОтбораИтогов.Вставить("ВидДействия", ВидДействия);
			
		ИначеЕсли НРег(Условие.property) = "applicationtype"
				И ТипЗнч(Условие.value) = Тип("ОбъектXDTO")
				И ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "DMObjectID") Тогда
			
			// Отбор по виду приложения.
			ВидПриложения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value);
			ЗапросСОтборами.Текст = ЗапросСОтборами.Текст + Символы.ПС + "И ДействияЗадач.ВидПриложения = &ВидПриложения";
			ЗапросСОтборами.УстановитьПараметр("ВидПриложения", ВидПриложения);
			ПараметрыОтбораИтогов.Вставить("ВидПриложения", ВидПриложения);
			
		ИначеЕсли НРег(Условие.property) = "project"
				И ТипЗнч(Условие.value) = Тип("ОбъектXDTO")
				И ОбработкаЗапросовXDTO.ПроверитьТип(Условие.value, "DMObjectID") Тогда
			
			// Отбор по проекту.
			Проект = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value);
			ЗапросСОтборами.Текст = ЗапросСОтборами.Текст + Символы.ПС + "И ДействияЗадач.Проект = &Проект";
			ЗапросСОтборами.УстановитьПараметр("Проект", Проект);
			ПараметрыОтбораИтогов.Вставить("Проект", Проект);
			
		ИначеЕсли НРег(Условие.property) = "flag" И Не ПустаяСтрока(Условие.value) Тогда
			
			// Отбор по флагу.
			Флаг = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО("DMObjectFlag", Условие.value);
			ЗапросСОтборами.Текст = ЗапросСОтборами.Текст + Символы.ПС + "И ДействияЗадач.Флаг = &Флаг";
			ЗапросСОтборами.УстановитьПараметр("Флаг", Флаг);
			ПараметрыОтбораИтогов.Вставить("Флаг", Флаг);
			
		ИначеЕсли НРег(Условие.property) = "begindate" И ТипЗнч(Условие.value) = Тип("Дата") Тогда
			
			// Отбор по дате начала.
			ЗапросСОтборами.Текст = ЗапросСОтборами.Текст + Символы.ПС + "И ДействияЗадач.ДатаОкончанияУчета >= &ДатаС";
			ДатаС = НачалоДня(Условие.value);
			ЗапросСОтборами.УстановитьПараметр("ДатаС", ДатаС);
			
		ИначеЕсли НРег(Условие.property) = "enddate" И ТипЗнч(Условие.value) = Тип("Дата") Тогда
			
			// Отбор по дате окончания.
			ЗапросСОтборами.Текст = ЗапросСОтборами.Текст + Символы.ПС + "И ДействияЗадач.ДатаНачалаУчета <= &ДатаПо";
			ДатаПо = КонецДня(Условие.value);
			ЗапросСОтборами.УстановитьПараметр("ДатаПо", ДатаПо);
			
		ИначеЕсли НРег(Условие.property) = "taskstatusfilter"
				И Условие.valueList.Количество() > 0 Тогда
			
			Для Каждого value Из Условие.valueList Цикл
				ОтборыПоСостояниюЗадач.Добавить(
					ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО("DMTaskStatusFilter", value));
			КонецЦикла;
			
		ИначеЕсли НРег(Условие.property) = "taskstatus"
				И Условие.valueList.Количество() > 0 Тогда
			
			Для Каждого value Из Условие.valueList Цикл
				ОтборыПоСостояниюЗадач.Добавить(
					ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО("DMTaskStatus", value));
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьОтборыПоСостояниюЗадач(ЗапросСОтборами, ОтборыПоСостояниюЗадач);
	
	ЗаполнитьИтогиСпискаЗадач(ИтогиСписка, ПараметрыОтбораИтогов, ОтборыПоСостояниюЗадач);
	
	Возврат ЗапросСОтборами;
	
КонецФункции

// Возвращает массив имен реквизитов запроса на получение списка задач, по которым требуется выполнить сортировку.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetDynamicListRequest.
//
// Возвращаемое значение:
//   Массив из Строка
//
Функция МассивПолейСортировки(Сообщение) Экспорт
	
	МассивПолейСортировки = Новый Массив;
	
	Если Сообщение.orderBy.Количество() = 0 Тогда
		ДобавитьСортировкуЗадачПоУмолчанию(МассивПолейСортировки);
	КонецЕсли;
	
	Для Каждого Условие Из Сообщение.orderBy Цикл
		
		Направление = "ВОЗР";
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(Условие, "sortingOperator")
				И Условие.sortingOperator = "DESC" Тогда
			Направление = "УБЫВ";
		КонецЕсли;
		
		Если ВРег(Условие.column) = ВРег("title") Тогда
			МассивПолейСортировки.Добавить(СтрШаблон("Заголовок %1", Направление));
			МассивПолейСортировки.Добавить("Дата УБЫВ");
			
		ИначеЕсли ВРег(Условие.column) = ВРег("date") Тогда
			МассивПолейСортировки.Добавить(СтрШаблон("Дата %1", Направление));
			МассивПолейСортировки.Добавить("Заголовок");
			
		ИначеЕсли ВРег(Условие.column) = ВРег("term") Тогда
			МассивПолейСортировки.Добавить(СтрШаблон("Срок %1", Направление));
			ДобавитьСортировкуЗадачПоУмолчанию(МассивПолейСортировки);
			
		ИначеЕсли ВРег(Условие.column) = ВРег("priority") Тогда
			МассивПолейСортировки.Добавить(СтрШаблон("ИндексКартинкиПриоритета %1", Направление));
			ДобавитьСортировкуЗадачПоУмолчанию(МассивПолейСортировки);
			
		ИначеЕсли ВРег(Условие.column) = ВРег("existSubtasks") Тогда
			МассивПолейСортировки.Добавить(СтрШаблон("ЕстьПодзадачи %1", Направление));
			ДобавитьСортировкуЗадачПоУмолчанию(МассивПолейСортировки);
			
		ИначеЕсли ВРег(Условие.column) = ВРег("flag") Тогда
			МассивПолейСортировки.Добавить(СтрШаблон("ИндексКартинкиФлага %1", Направление));
			ДобавитьСортировкуЗадачПоУмолчанию(МассивПолейСортировки);
			
		ИначеЕсли ВРег(Условие.column) = ВРег("authorPresentation") Тогда
			МассивПолейСортировки.Добавить(СтрШаблон("Автор.Наименование %1", Направление));
			ДобавитьСортировкуЗадачПоУмолчанию(МассивПолейСортировки);
			
		ИначеЕсли ВРег(Условие.column) = ВРег("performerPresentation") Тогда
			МассивПолейСортировки.Добавить(СтрШаблон("Исполнитель.Наименование %1", Направление));
			ДобавитьСортировкуЗадачПоУмолчанию(МассивПолейСортировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПолейСортировки;
	
КонецФункции

// Отменяет взятие в работу действия задачи.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMRevokeTaskAcceptanceRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMRevokeTaskAcceptanceResponse или DMError.
//
Функция ОтменитьВзятиеВРаботу(Сообщение) Экспорт
	
	ПодробноеПредставлениеОшибки = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДействияЗадач = Новый Массив;
		Для Каждого ЗадачаXDTO Из Сообщение.tasks Цикл
			ДействиеЗадачи = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ЗадачаXDTO.objectID);
			Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
				ПодробноеПредставлениеОшибки = Ложь;
				ВызватьИсключение НСтр("ru = 'Не указано действие задачи'");
			КонецЕсли;
			ДействияЗадач.Добавить(ДействиеЗадачи);
		КонецЦикла;
		
		РаботаСЗадачами.ОтменитьВзятиеВРаботу(ДействиеЗадачи, Сотрудники.ОсновнойСотрудник());
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMRevokeTaskAcceptanceResponse");
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при отмене взятия задачи в работу'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке(), ПодробноеПредставлениеОшибки));
		
	КонецПопытки;
	
КонецФункции

// Перенаправляет задачу.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMRedirectTasksRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMRedirectTasksResponse или DMError.
//
Функция Перенаправить(Сообщение) Экспорт
	
	ПодробноеПредставлениеОшибки = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДействияЗадач = Новый Массив;
		Для Каждого ЗадачаXDTO Из Сообщение.tasks Цикл
			ДействиеЗадачи = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ЗадачаXDTO.objectID);
			Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
				ПодробноеПредставлениеОшибки = Ложь;
				ВызватьИсключение НСтр("ru = 'Не указано действие задачи'");
			КонецЕсли;
			ДействияЗадач.Добавить(ДействиеЗадачи);
		КонецЦикла;
		
		НовыйИсполнитель = УчастникЗадачДО(Сообщение.performer);
		
		Если Не ЗначениеЗаполнено(НовыйИсполнитель) Тогда
			ПодробноеПредставлениеОшибки = Ложь;
			ВызватьИсключение НСтр("ru = 'Не указан новый исполнитель задачи'");
		КонецЕсли;
		
		РаботаСЗадачами.Перенаправить(
			ДействияЗадач,
			Справочники.Сотрудники.ПустаяСсылка(),
			НовыйИсполнитель,
			Сообщение.comment,
			Истина);
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMRedirectTasksResponse");
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при перенаправлении задачи'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке(), ПодробноеПредставлениеОшибки));
		
	КонецПопытки;
	
КонецФункции

// Устанавливает флаг указанным задачам или действиями задач.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMSetFlagRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMSetFlagResponse или DMError.
//
Функция УстановитьФлаг(Сообщение) Экспорт
	
	ПодробноеПредставлениеОшибки = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДействияЗадач = Новый Массив;
		Для Каждого ЗадачаXDTO Из Сообщение.tasks Цикл
			ДействиеЗадачи = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ЗадачаXDTO.objectID);
			Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
				ПодробноеПредставлениеОшибки = Ложь;
				ВызватьИсключение НСтр("ru = 'Не указано действие задачи'");
			КонецЕсли;
			ДействияЗадач.Добавить(ДействиеЗадачи);
		КонецЦикла;
		
		Флаг = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО("DMObjectFlag", Сообщение.flag);
		Если Флаг = Неопределено Тогда
			Флаг = Перечисления.ФлагиОбъектов.ПустаяСсылка();
		КонецЕсли;
		
		РаботаСЗадачамиВызовСервера.УстановитьФлаг(ДействияЗадач, Флаг);
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMSetFlagResponse");
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при установке флага задачи'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке(), ПодробноеПредставлениеОшибки));
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ПолнаяРоль

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ПолнаяРоль - СправочникОбъект.ПолныеРоли
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCompleteRole.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеПолнойРоли(ПолнаяРоль, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеПолнойРоли = Новый Структура;
	ДанныеПолнойРоли.Вставить("role", ПолнаяРоль.Владелец);
	ДанныеПолнойРоли.Вставить("MainAddressingObject", ПолнаяРоль.ОсновнойОбъектАдресации);
	ДанныеПолнойРоли.Вставить("SecondaryAddressingObject", ПолнаяРоль.ДополнительныйОбъектАдресации);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		ПолнаяРоль,
		ДанныеПолнойРоли,
		ОбъектXDTO,
		НаборКолонок,
		Ложь);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ПолнаяРоль - СправочникОбъект.ПолныеРоли - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCompleteRole. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеПолнойРоли(ПолнаяРоль, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПолнаяРоль.Наименование,
		ОбъектXDTO,
		"name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПолнаяРоль.ОсновнойОбъектАдресации,
		ОбъектXDTO,
		"MainAddressingObject");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПолнаяРоль.ДополнительныйОбъектАдресации,
		ОбъектXDTO,
		"SecondaryAddressingObject");
	
КонецПроцедуры

// Ищет подходящую задачу по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCompleteRole.
//
// Возвращаемое значение:
//   СправочникСсылка.ПолныеРоли - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиПолнуюРоль(ОбъектXDTO) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РольИсполнителя

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   РольИсполнителя - СправочникОбъект.РолиИсполнителей
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMBusinessProcessExecutorRole.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеРолиИсполнителя(РольИсполнителя, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеРолиИсполнителя = Новый Структура;
	ДанныеРолиИсполнителя.Вставить("withoutAddressingObjects", РольИсполнителя.ИспользуетсяБезОбъектовАдресации);
	ДанныеРолиИсполнителя.Вставить("withAddressingObjects", РольИсполнителя.ИспользуетсяСОбъектамиАдресации);
	
	ТипыОсновногоОбъектаАдресации = РольИсполнителя.ТипыОсновногоОбъектаАдресации.ПолучитьОбъект();
	ТипыДополнительногоОбъектаАдресации = РольИсполнителя.ТипыДополнительногоОбъектаАдресации.ПолучитьОбъект();
	ДанныеРолиИсполнителя.Вставить("mainAddressingObjectName", ТипыОсновногоОбъектаАдресации.Наименование);
	ДанныеРолиИсполнителя.Вставить("secondaryAddressingObjectName", ТипыДополнительногоОбъектаАдресации.Наименование);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		РольИсполнителя,
		ДанныеРолиИсполнителя,
		ОбъектXDTO,
		НаборКолонок);
	
	Если РольИсполнителя.ИспользуетсяСОбъектамиАдресации Тогда
		
		Если ТипыОсновногоОбъектаАдресации.ТипЗначения <> Неопределено Тогда
			Для Каждого ТипЗначения Из ТипыОсновногоОбъектаАдресации.ТипЗначения.Типы() Цикл
				ИмяТипаXDTO = ОбработкаЗапросовXDTO.ПолучитьТипXDTOПоТипуДО(ТипЗначения, Ложь);
				Если ИмяТипаXDTO <> Неопределено Тогда
					ОписаниеТипа = ОбработкаЗапросовXDTO.СоздатьОбъект("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = ИмяТипаXDTO;
					ОбъектXDTO.mainAddressingObjectType.Добавить(ОписаниеТипа);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипыДополнительногоОбъектаАдресации.ТипЗначения <> Неопределено Тогда
			Для Каждого ТипЗначения Из ТипыДополнительногоОбъектаАдресации.ТипЗначения.Типы() Цикл 
				ИмяТипаXDTO = ОбработкаЗапросовXDTO.ПолучитьТипXDTOПоТипуДО(ТипЗначения, Ложь);
				Если ИмяТипаXDTO <> Неопределено Тогда
					ОписаниеТипа = ОбработкаЗапросовXDTO.СоздатьОбъект("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = ИмяТипаXDTO;
					ОбъектXDTO.secondaryAddressingObjectType.Добавить(ОписаниеТипа);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   РольИсполнителя - СправочникОбъект.РолиИсполнителей - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMBusinessProcessExecutorRole. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеРолиИсполнителя(РольИсполнителя, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		РольИсполнителя.Наименование,
		ОбъектXDTO,
		"name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		РольИсполнителя.ИспользуетсяБезОбъектовАдресации,
		ОбъектXDTO,
		"withoutAddressingObjects");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		РольИсполнителя.ИспользуетсяСОбъектамиАдресации,
		ОбъектXDTO,
		"withAddressingObjects");
	
КонецПроцедуры

// Ищет подходящую задачу по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMBusinessProcessExecutorRole.
//
// Возвращаемое значение:
//   СправочникСсылка.РолиИсполнителей - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиРольИсполнителя(ОбъектXDTO) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РезультатДействияЗадачи

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   РезультатДействияЗадачи - СправочникОбъект.РезультатыДействийЗадач
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMResultOfTaskAction.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеРезультатаДействияЗадачи(РезультатДействияЗадачи, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеРезультатаДействияЗадачи = Новый Структура;
	ДанныеРезультатаДействияЗадачи.Вставить(
		"groupExecutionIsAvailable",
		РезультатДействияЗадачи.ДоступноГрупповоеВыполнение);
	ДанныеРезультатаДействияЗадачи.Вставить(
		"commandHeader",
		РезультатДействияЗадачи.ЗаголовокКоманды);
	
	Если ЗначениеЗаполнено(РезультатДействияЗадачи.ХарактерРезультата) Тогда
		ДанныеРезультатаДействияЗадачи.Вставить("taskResultType",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(РезультатДействияЗадачи.ХарактерРезультата));
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		РезультатДействияЗадачи,
		ДанныеРезультатаДействияЗадачи,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   РезультатДействияЗадачи - СправочникОбъект.РезультатыДействийЗадач - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMResultOfTaskAction. Источник данных заполнения.
//
Процедура ЗаполнитьРезультатДействияЗадачи(РезультатДействияЗадачи, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		РезультатДействияЗадачи.Наименование,
		ОбъектXDTO,
		"name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		РезультатДействияЗадачи.ДоступноГрупповоеВыполнение,
		ОбъектXDTO,
		"groupExecutionIsAvailable");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		РезультатДействияЗадачи.ЗаголовокКоманды,
		ОбъектXDTO,
		"commandHeader");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMTaskResultType",
		ОбъектXDTO,
		"taskResultType",
		РезультатДействияЗадачи,
		"ХарактерРезультата");
	
КонецПроцедуры

// Ищет подходящий результат действия задачи по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMResultOfTaskAction.
//
// Возвращаемое значение:
//   СправочникСсылка.РезультатыДействийЗадач - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиРезультатДействияЗадачи(ОбъектXDTO) Экспорт
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Возврат Справочники.РезультатыДействийЗадач.НайтиПоНаименованию(Наименование, Истина);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеЗадачи

Процедура ВвестиПричинуВозврата(ДействиеЗадачи, РезультатДействияТекстом, ПараметрыВыполнения,
		ВыполнитьПовторноНаСторонеДО)
	
	ПараметрыВыполнения.ДанныеВозвратаНаДоработку =
		РаботаСЗадачами.ДанныеВозвратаНаДоработкуПоУмолчанию(
			ДействиеЗадачи,
			РезультатДействияТекстом);
	ВыполнитьПовторноНаСторонеДО = Истина;
	
КонецПроцедуры

Процедура ВернутьсяКЗадаче(Ответ, Сообщение, ДействиеЗадачи, ПараметрыВыполнения, ВыполнитьНаСторонеБИД,
		ВыполнитьПовторноНаСторонеДО)
	
	ПоддерживаетсяВозвратКЗадаче =
		РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(
			ПараметрыСеанса.УзелИнтегрированнойСистемы,
			"3.0.2.7");
	
	Если ПоддерживаетсяВозвратКЗадаче Тогда
		// Нужно запросить фактического исполнителя на стороне БИД.
		ДобавитьТребуемоеИнтерактивноеДействиеВОтвет(Ответ, "BackToTheTask", Сообщение);
		ВыполнитьНаСторонеБИД = Истина;
	Иначе
		ВызватьИсключение НСтр("ru = 'Данное действие можно выполнить только на стороне 1С:Документооборот'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьИсполнителяЗадачи(Ответ, Сообщение, ДействиеЗадачи, ПараметрыВыполнения, ВыполнитьНаСторонеБИД,
		ВыполнитьПовторноНаСторонеДО)
	
	ПоддерживаетсяВыборИсполнителя =
		РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(
			ПараметрыСеанса.УзелИнтегрированнойСистемы,
			"3.0.2.6");
	
	Если ПоддерживаетсяВыборИсполнителя Тогда
		// Нужно запросить фактического исполнителя на стороне БИД.
		ДобавитьТребуемоеИнтерактивноеДействиеВОтвет(Ответ, "SelectTaskPerformer", Сообщение);
		Данные = РаботаСЗадачами.ДанныеДляВыбораФактическогоИсполнителя(ДействиеЗадачи);
		Ответ.requiredInteractiveAction.context = ДанныеДляВыбораФактическогоИсполнителяXDTO(Данные);
		ВыполнитьНаСторонеБИД = Истина;
	Иначе
		// Выполним задачу по-умолчанию от лица текущего сотрудника.
		Адресат = Неопределено;
		Сотрудник = Сотрудники.ОсновнойСотрудник();
		ЭтоЗамещающий = Ложь;
		ВсеСотрудникиПользователя = СотрудникиПовтИсп.ВсеСотрудникиТекущегоПользователя();
		ТаблицаВсехЗамещений = Справочники.ЗамещающиеИПомощники.ВсеЗамещенияПоДействиямЗадач(
			ДействиеЗадачи, ВсеСотрудникиПользователя);
		ЗамещенияДействия = ТаблицаВсехЗамещений.НайтиСтроки(Новый Структура("ДействиеЗадачи", ДействиеЗадачи));
		Если ЗамещенияДействия.Количество() > 0 Тогда
			Адресат = ЗамещенияДействия[0].Сотрудник;
			ЭтоЗамещающий = (ЗамещенияДействия[0].ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие);
		Иначе
			// Если сотрудник не является заместителем или помощником, то смотрим на исполнителя задачи.
			СотрудникиИсполнителя =
				РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(ДействиеЗадачи.Исполнитель);
			Адресат = СотрудникиИсполнителя[0];
		КонецЕсли;
		ПараметрыВыполнения.ВыбранныйФактическийИсполнитель = Новый Структура("Адресат, Сотрудник, ЭтоЗамещающий",
			Адресат,
			Сотрудник,
			ЭтоЗамещающий);
		ВыполнитьПовторноНаСторонеДО = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляВыбораФактическогоИсполнителяXDTO(Данные)
	
	ДанныеXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDataForSelectingTheActualTaskPerformer");
	
	Для Каждого Строка Из Данные.АдресатыЗадачи Цикл
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActualTaskPerformer");
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "addressee", Строка.Адресат, Ложь);
		СтрокаXDTO.isDeputy = Строка.ЭтоЗамещающий;
		ДанныеXDTO.addressees.Добавить(СтрокаXDTO);
	КонецЦикла;
	
	Для Каждого Строка Из Данные.ФактическиеИсполнители Цикл
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActualTaskPerformer");
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "actualPerformer", Строка.Сотрудник, Ложь);
		СтрокаXDTO.performerPresentation = Строка.Исполнитель;
		ДанныеXDTO.actualPerformers.Добавить(СтрокаXDTO);
	КонецЦикла;
	
	Возврат ДанныеXDTO;
	
КонецФункции

Процедура ДобавитьТребуемоеИнтерактивноеДействиеВОтвет(Ответ, ИнтерактивноеДействие, ЗапросВыполненияЗадачи)
	
	Ответ.requiredInteractiveAction = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInteractiveActionContext");
	Ответ.requiredInteractiveAction.interactiveAction = ИнтерактивноеДействие;
	Для Каждого РезультатXDTO Из ЗапросВыполненияЗадачи.interactiveActionResult Цикл
		КэшXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInteractiveActionContext");
		ОбработкаЗапросовXDTO.СкопироватьОбъектXDTO(КэшXDTO, РезультатXDTO);
		Ответ.interactiveActionResultCache.Добавить(КэшXDTO);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗадатьВопрос(Ответ, Сообщение, ПараметрыВыполнения, ДанныеВыполнения, ВыполнитьНаСторонеБИД,
		ВыполнитьПовторноНаСторонеДО)
	
	ПоддерживаетсяПроизвольныйВопрос =
		РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(
			ПараметрыСеанса.УзелИнтегрированнойСистемы,
			"3.0.2.7");
	
	Если ПоддерживаетсяПроизвольныйВопрос Тогда
		// Нужно запросить ответ на произвольный вопрос на стороне БИД.
		ДобавитьТребуемоеИнтерактивноеДействиеВОтвет(Ответ, "AskAQuestion", Сообщение);
		Ответ.requiredInteractiveAction.context = ОбработкаЗапросовXDTO.СоздатьОбъект("DMQuesion");
		Ответ.requiredInteractiveAction.context.text = ДанныеВыполнения.ПроизвольныйВопрос.Текст;
		Для Каждого ТекстКнопки Из ДанныеВыполнения.ПроизвольныйВопрос.Кнопки Цикл
			Ответ.requiredInteractiveAction.context.buttons.Добавить(ТекстКнопки);
		КонецЦикла;
		ВыполнитьНаСторонеБИД = Истина;
	Иначе
		// В предыдущих версиях БИД задача выполнится, как будто бы сразу ответили "Да".
		ПараметрыВыполнения.ОтветНаПроизвольныйВопрос = НСтр("ru = 'Да'");
		ВыполнитьПовторноНаСторонеДО = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПараметрыПроцесса(Ответ, Сообщение, ДействиеЗадачи, ПараметрыВыполнения, ДанныеВыполнения,
		ВыполнитьНаСторонеБИД, ВыполнитьПовторноНаСторонеДО)
	
	ПоддерживаетсяИзменениеДействия =
		РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(
			ПараметрыСеанса.УзелИнтегрированнойСистемы,
			"3.0.2.6");
	
	Если ПоддерживаетсяИзменениеДействия // Если интерактивные действия не поддерживаются - запустим повторно действие без изменений.
			И ДанныеВыполнения.ДополнительныеПараметры.Свойство("ИзменитьПараметрыПроцесса")
			И ДанныеВыполнения.ДополнительныеПараметры.ИзменитьПараметрыПроцесса = Истина
			И ЗначениеЗаполнено(ДанныеВыполнения.ДополнительныеПараметры.Действие)
			И (ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить
				Или ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат
				Или ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться
				Или ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться
				Или ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться
				Или ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться) Тогда
		ПараметрыПроцессаXDTO = РезультатИнтерактивногоДействияНадЗадачей(
			Сообщение.interactiveActionResult,
			"ChangeProcessParameters");
		Если ПараметрыПроцессаXDTO <> Неопределено Тогда
			// На стороне БИД действие уже изменено.
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ПараметрыПроцессаXDTO, "context") Тогда
				Ошибка = "";
				ДействиеСсылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(
					ПараметрыПроцессаXDTO.context.objectID);
				ИсточникДанных = ОбработкаЗапросовXDTO.ИсточникОбъектXDTO(
					ПараметрыПроцессаXDTO.context,
					ПараметрыПроцессаXDTO.context.objectID.type);
				Если Не ОбработкаЗапросовXDTO.ЗаписатьДанныеОбъектаДО(
						ДействиеСсылка.ПолучитьОбъект(), ИсточникДанных, Ошибка) Тогда
					ВызватьИсключение Ошибка;
				КонецЕсли;
				ПараметрыВыполнения.ВерсииДанных[ДействиеЗадачи] =
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "ВерсияДанных");
			КонецЕсли;
		Иначе
			// Нужно запросить изменение действия на стороне БИД.
			ДобавитьТребуемоеИнтерактивноеДействиеВОтвет(Ответ, "ChangeProcessParameters", Сообщение);
			Ответ.requiredInteractiveAction.context = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
				ДанныеВыполнения.ДополнительныеПараметры.Действие);
			ВыполнитьНаСторонеБИД = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РезультатИзмененияПараметровПроцесса = Новый Структура;
	РаботаСПроцессамиПоДействиям.ЗаполнитьРезультатНастроекПроцессаИСброситьРезультат(
		ДанныеВыполнения.ДополнительныеПараметры.Действие,
		ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс,
		РезультатИзмененияПараметровПроцесса);
	РезультатИзмененияПараметровПроцесса.Вставить("РезультатВыполнения", "");
	Если ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута =
			БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат Тогда
		ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
			"ДанныеПроцесса",
			РезультатИзмененияПараметровПроцесса.ДанныеПроцесса);
	Иначе
		ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
			"РезультатИзмененияПараметровПроцесса",
			РезультатИзмененияПараметровПроцесса);
	КонецЕсли;
	ВыполнитьПовторноНаСторонеДО = Истина;
	
КонецПроцедуры

Функция НовыйПараметрыВыполненияДействийЗадач(ВсеРезультаты)
	
	ПараметрыВыполнения = РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач();
	
	ФактическийИсполнительXDTO = РезультатИнтерактивногоДействияНадЗадачей(ВсеРезультаты, "SelectTaskPerformer");
	Если ФактическийИсполнительXDTO <> Неопределено Тогда
		// На стороне БИД уже выбран фактический исполнитель.
		ПараметрыВыполнения.ВыбранныйФактическийИсполнитель = Новый Структура("Адресат, Сотрудник");
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФактическийИсполнительXDTO.context, "addressee") Тогда
			ПараметрыВыполнения.ВыбранныйФактическийИсполнитель.Адресат =
				ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ФактическийИсполнительXDTO.context.addressee.objectID);
		КонецЕсли;
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФактическийИсполнительXDTO.context, "actualPerformer") Тогда
			ПараметрыВыполнения.ВыбранныйФактическийИсполнитель.Сотрудник =
				ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ФактическийИсполнительXDTO.context.actualPerformer.objectID);
		КонецЕсли;
		ПараметрыВыполнения.ВыбранныйФактическийИсполнитель.Вставить(
			"ЭтоЗамещающий",
			ФактическийИсполнительXDTO.context.isDeputy);
	КонецЕсли;
	
	ОтветНаВопросXDTO = РезультатИнтерактивногоДействияНадЗадачей(ВсеРезультаты, "AskAQuestion");
	Если ОтветНаВопросXDTO <> Неопределено Тогда
		// На стороне БИД получен ответ (строка - название кнопки, например "Да" или "Нет"):
		ПараметрыВыполнения.ОтветНаПроизвольныйВопрос = ОтветНаВопросXDTO.context;
	КонецЕсли;
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

Функция РезультатИнтерактивногоДействияНадЗадачей(ВсеРезультаты, ИнтерактивноеДействие)
	
	Для Каждого РезультатXDTO Из ВсеРезультаты Цикл
		Если РезультатXDTO.interactiveAction = ИнтерактивноеДействие Тогда
			Возврат РезультатXDTO;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область ДействиеВспомогательныеМетоды

#Область ДействиеВспомогательныеМетодыПолучить

// Заполняет в объекте XDTO все состояния и результаты действия.
//
// Параметры:
//   Действие - ОпределяемыйТип.ДействияОбъект
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//
Процедура ПолучитьВсеСостоянияИРезультатыДействия(Действие, ОбъектXDTO)
	
	ОбъектXDTO.allStatesAndResultsRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAllActionStatesAndResultsRows");
	
	ВсеСостоянияИРезультаты = ДействияСервер.ВсеСостоянияИРезультаты(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие.Ссылка));
	
	Для Каждого Строка Из ВсеСостоянияИРезультаты Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAllActionStatesAndResultsRow");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "action", Строка.Действие);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "date", Строка.Дата);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "pointID", Строка(Строка.ИдентификаторПункта));
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO,
			"participantID",
			Строка(Строка.ИдентификаторУчастника));
		
		Если ЗначениеЗаполнено(Строка.Функция) Тогда
			СтрокаXDTO.function =
				ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Строка.Функция);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Состояние) Тогда
			СтрокаXDTO.state =
				ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Строка.Состояние);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Результат) Тогда
			СтрокаXDTO.result =
				ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Строка.Результат);
		КонецЕсли;
		
		ОбъектXDTO.allStatesAndResultsRows.rows.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияИсполнения
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionPerformance.
//   СтруктураДействия - Структура
//   ДанныеДействия - Структура
//   Колонки - Массив из Строка - массив имен реквизитов к заполнению.
//   ПолучатьВсеКолонки - Булево - нужно заполнить все реквизиты объекта XDTO.
//
Процедура ПолучитьДанныеДействияИсполнения(Действие, ОбъектXDTO, СтруктураДействия, ДанныеДействия,
		Колонки, ПолучатьВсеКолонки)
	
	СтруктураДействия.Вставить("signResolutionsWithDS", Действие.ПодписыватьРезолюцииЭП);
	СтруктураДействия.Вставить("byPoints", Действие.ПоПунктам);
	СтруктураДействия.Вставить("targetDueDate", Справочники.ДействияИсполнения.СрокИсполненияПредмета(Действие.Предмет));
	
	УчастникДействияXDTO(ОбъектXDTO.controller, Действие.Контролер);
	
	// Заполним пункты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("pointRows")) <> Неопределено Тогда
		ПолучитьПунктыДействия(Действие, ОбъектXDTO, ДанныеДействия);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияОзнакомления
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionExamination.
//   СтруктураДействия - Структура
//   ДанныеДействия - Структура
//   Колонки - Массив из Строка - массив имен реквизитов к заполнению.
//   ПолучатьВсеКолонки - Булево - нужно заполнить все реквизиты объекта XDTO.
//
Процедура ПолучитьДанныеДействияОзнакомления(Действие, ОбъектXDTO, СтруктураДействия, ДанныеДействия,
		Колонки, ПолучатьВсеКолонки)
	
	СтруктураДействия.Вставить("maximumNumberOfParticipantsToShow",
		Справочники.ДействияОзнакомления.МаксимальноеЧислоУчастниковДляПоказа());
	СтруктураДействия.Вставить("numberOfParticipants",
		РегистрыСведений.УчастникиОзнакомлений.ЧислоУчастниковДействия(Действие.Ссылка));
	СтруктураДействия.Вставить("signWithDS", Действие.ПодписыватьУЭП);
	СтруктураДействия.Вставить("useExaminationsWithEnhancedDS",
		ПолучитьФункциональнуюОпцию("ИспользоватьОзнакомлениеСУЭП"));
	СтруктураДействия.Вставить("waitForCompletion", Действие.ОжидатьЗавершения);
	
	// Заполним результаты ознакомлений.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("examinationResultRows")) <> Неопределено Тогда
		
		ОбъектXDTO.examinationResultRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMExaminationResultRows");
		
		Для Каждого Элемент Из Справочники.ДействияОзнакомления.РезультатыОзнакомлений(Действие.Ссылка, Ложь) Цикл
			
			СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMExaminationResultRow");
			
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "id", Строка(Элемент.Ключ));
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO, "numberOfExaminedParticipants", Элемент.Значение.СколькоОзнакомлено);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO, "numberOfParticipantsToBeExamined", Элемент.Значение.СколькоВсегоНадоОзнакомить);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO, "finalCompletionDate", Элемент.Значение.ДатаЗавершенияИтоговая);
			
			ОбъектXDTO.examinationResultRows.rows.Добавить(СтрокаXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияПодписания
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionSigning.
//   СтруктураДействия - Структура
//   ДанныеДействия - Структура
//   Колонки - Массив из Строка - массив имен реквизитов к заполнению.
//   ПолучатьВсеКолонки - Булево - нужно заполнить все реквизиты объекта XDTO.
//
Процедура ПолучитьДанныеДействияПодписания(Действие, ОбъектXDTO, СтруктураДействия, ДанныеДействия,
		Колонки, ПолучатьВсеКолонки)
	
	ИдентификаторОбрабатывающегоРезультат = ДействияСервер.ПредопределенныйИдентификаторУчастника(
		"ЭтапОбрабатывающийРезультатПодписание");
	ИдентификаторЭтапаПодписать = ДействияСервер.ПредопределенныйИдентификаторУчастника(
		"ЭтапПодписать");
	
	СтруктураДействия.Вставить("resultProcessorID", Строка(ИдентификаторОбрабатывающегоРезультат));
	СтруктураДействия.Вставить("stageSigningID", Строка(ИдентификаторЭтапаПодписать));
	Если ЗначениеЗаполнено(Действие.ПорядокВыполненияУчастниками) Тогда
		СтруктураДействия.Вставить("orderOfExecutionByParticipants",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Действие.ПорядокВыполненияУчастниками));
	КонецЕсли;
	Если ЗначениеЗаполнено(Действие.СпособПодписания) Тогда
		СтруктураДействия.Вставить("signingMethod",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Действие.СпособПодписания));
	КонецЕсли;
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Действие.Предмет) Тогда
		ФормаПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие.Предмет, "ФормаДокумента");
		Если ЗначениеЗаполнено(ФормаПредмета) Тогда
			СтруктураДействия.Вставить("targetForm",
				ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ФормаПредмета));
		КонецЕсли;
	КонецЕсли;
	
	// Заполним этапы.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("stageRows")) <> Неопределено Тогда
		ПолучитьЭтапыДействия(Действие, ОбъектXDTO, ДанныеДействия);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияРегистрации
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionRegistration.
//   СтруктураДействия - Структура
//   ДанныеДействия - Структура
//   Колонки - Массив из Строка - массив имен реквизитов к заполнению.
//   ПолучатьВсеКолонки - Булево - нужно заполнить все реквизиты объекта XDTO.
//
Процедура ПолучитьДанныеДействияРегистрации(Действие, ОбъектXDTO, СтруктураДействия, ДанныеДействия,
		Колонки, ПолучатьВсеКолонки)
	
	
	
КонецПроцедуры

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияСогласования
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionApproval.
//   СтруктураДействия - Структура
//   ДанныеДействия - Структура
//   Колонки - Массив из Строка - массив имен реквизитов к заполнению.
//   ПолучатьВсеКолонки - Булево - нужно заполнить все реквизиты объекта XDTO.
//
Процедура ПолучитьДанныеДействияСогласования(Действие, ОбъектXDTO, СтруктураДействия, ДанныеДействия,
		Колонки, ПолучатьВсеКолонки)
	
	ИдентификаторОбрабатывающегоРезультат = ДействияСервер.ПредопределенныйИдентификаторУчастника(
		"ЭтапОбрабатывающийРезультатСогласование");
	ИдентификаторЭтапаСогласовать = ДействияСервер.ПредопределенныйИдентификаторУчастника(
		"ЭтапСогласовать");
	
	СтруктураДействия.Вставить("resultProcessorID", Строка(ИдентификаторОбрабатывающегоРезультат));
	СтруктураДействия.Вставить("stageApprovalID", Строка(ИдентификаторЭтапаСогласовать));
	СтруктураДействия.Вставить("approvalInTheRemarksMode", Действие.СогласованиеВРежимеЗамечаний);
	СтруктураДействия.Вставить("makeEndorsementsOfApproval", Действие.ФормируетВизы);
	СтруктураДействия.Вставить("signWithDS", Действие.ПодписыватьУЭП);
	Если ЗначениеЗаполнено(Действие.ПорядокВыполненияУчастниками) Тогда
		СтруктураДействия.Вставить("orderOfExecutionByParticipants",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Действие.ПорядокВыполненияУчастниками));
	КонецЕсли;
	
	// Заполним этапы.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("stageRows")) <> Неопределено Тогда
		ПолучитьЭтапыДействия(Действие, ОбъектXDTO, ДанныеДействия);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияУтверждения
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionConfirmation.
//   СтруктураДействия - Структура
//   ДанныеДействия - Структура
//   Колонки - Массив из Строка - массив имен реквизитов к заполнению.
//   ПолучатьВсеКолонки - Булево - нужно заполнить все реквизиты объекта XDTO.
//
Процедура ПолучитьДанныеДействияУтверждения(Действие, ОбъектXDTO, СтруктураДействия, ДанныеДействия,
		Колонки, ПолучатьВсеКолонки)
	
	
	
КонецПроцедуры

// Заполняет в объекте XDTO пункты действия.
//
// Параметры:
//   Действие - ОпределяемыйТип.ДействияОбъект
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//   ДанныеДействия - см. ДанныеДействия
//
Процедура ПолучитьПунктыДействия(Действие, ОбъектXDTO, ДанныеДействия)
	
	ОбъектXDTO.pointRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionPerformancePointRows");
	
	Для Каждого Строка Из Действие.Пункты Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionPerformancePointRow");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "id", Строка(Строка.Идентификатор));
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDate", Строка.Срок);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "description", Строка.Описание);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "number", Строка.Номер);
		
		УчастникДействияXDTO(СтрокаXDTO.controller, Строка.Контролер);
		УчастникДействияXDTO(СтрокаXDTO.author, Строка.Автор);
		
		СрокПредставление =
			СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
				Строка.Срок,
				0,
				0,
				0,
				ДанныеДействия.ИспользоватьДатуИВремяВСрокахЗадач,
				Перечисления.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка());
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDatePresentation", СрокПредставление);
		
		ОбъектXDTO.pointRows.rows.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в объекте XDTO разрешения действия.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//   ДанныеДействия - см. ДанныеДействия
//   ДействиеСсылка - ОпределяемыйТип.Действия
//
Процедура ПолучитьРазрешенияДействия(ОбъектXDTO, ДанныеДействия, ДействиеСсылка)
	
	Разрешения = ДанныеДействия.Разрешения.Скопировать();
	Разрешения.Очистить();
	НастройкиДоступностиДействий.ЗаполнитьРазрешенияПоДействию(ДействиеСсылка, Разрешения);
	
	ОбъектXDTO.permissionRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionPermissionRows");
	
	Для Каждого Строка Из Разрешения Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionPermissionRow");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "stageID", Строка(Строка.ИдентификаторЭтапа));
		
		Если ЗначениеЗаполнено(Строка.Разрешение) Тогда
			СтрокаXDTO.permission =
				ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Строка.Разрешение);
		КонецЕсли;
		
		ОбъектXDTO.permissionRows.rows.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в объекте XDTO участников действия.
//
// Параметры:
//   Действие - ОпределяемыйТип.ДействияОбъект
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//   ТипДействия - Тип - тип действия.
//   ДанныеДействия - см. ДанныеДействия
//
Процедура ПолучитьУчастниковДействия(Действие, ОбъектXDTO, ТипДействия, ДанныеДействия)
	
	Участники = Действие.Участники.Выгрузить();
	Участники.Колонки.Добавить("ЭтоЭтап", Новый ОписаниеТипов("Булево"));
	Участники.Колонки.Добавить("ЗащищенныйВНастройке", Новый ОписаниеТипов("Булево"));
	
	Если ТипДействия = Тип("СправочникОбъект.ДействияИсполнения") Тогда
		ТипОбъектаXDTO = "DMActionPerformanceParticipant";
		Участники.Колонки.Добавить("Функция", Новый ОписаниеТипов("ПеречислениеСсылка.ФункцииУчастниковИсполнения"));
		Участники.Колонки.Добавить("ЕстьРезолюция", Новый ОписаниеТипов("Булево"));
		Участники.Колонки.Добавить("ПредставлениеРезолюции", Новый ОписаниеТипов("Строка"));
		
		РезолюцииДействия = РаботаСРезолюциями.ПолучитьРезолюции(Действие.Предмет,,, Действие.Ссылка);
		Для Каждого УчастникЭтапаРассмотрение Из Участники Цикл
			Если УчастникЭтапаРассмотрение.ФункцияУчастника <> Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
				Продолжить;
			КонецЕсли;
			УчастникЭтапаРассмотрение.ПредставлениеРезолюции = УчастникЭтапаРассмотрение.ПроектРезолюции;
			РезолюцияСотрудника = РезолюцииДействия.НайтиСтроки(
				Новый Структура("ИдентификаторУчастника", УчастникЭтапаРассмотрение.Идентификатор));
			Если РезолюцияСотрудника.Количество() > 0 Тогда
				УчастникЭтапаРассмотрение.ЕстьРезолюция = Истина;
				УчастникЭтапаРассмотрение.ПредставлениеРезолюции = РезолюцияСотрудника[0].ТекстРезолюции;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияОзнакомления") Тогда
		ТипОбъектаXDTO = "DMActionExaminationParticipant";
		Участники.Колонки.Добавить("Функция", Новый ОписаниеТипов("ПеречислениеСсылка.ФункцииУчастниковОзнакомления"));
		Участники.Колонки.Добавить("ФункцияУчастника", Новый ОписаниеТипов("ПеречислениеСсылка.ФункцииУчастниковОзнакомления"));
		
		Для Каждого СтрокаУчастника Из Участники Цикл
			СтрокаУчастника.ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
		КонецЦикла;
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияПодписания") Тогда
		ТипОбъектаXDTO = "DMActionSigningParticipant";
		Участники.Колонки.Добавить("Функция", Новый ОписаниеТипов("ПеречислениеСсылка.ФункцииУчастниковПодписания"));
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияРегистрации") Тогда
		ТипОбъектаXDTO = "DMActionRegistrationParticipant";
		Участники.Колонки.Добавить("Функция", Новый ОписаниеТипов("ПеречислениеСсылка.ФункцииУчастниковРегистрации"));
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияСогласования") Тогда
		ТипОбъектаXDTO = "DMActionApprovalParticipant";
		Участники.Колонки.Добавить("Функция", Новый ОписаниеТипов("ПеречислениеСсылка.ФункцииУчастниковСогласования"));
		
	ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияУтверждения") Тогда
		ТипОбъектаXDTO = "DMActionConfirmationParticipant";
		Участники.Колонки.Добавить("Функция", Новый ОписаниеТипов("ПеречислениеСсылка.ФункцииУчастниковУтверждения"));
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		СтрокаУчастника.Функция = СтрокаУчастника.ФункцияУчастника;
	КонецЦикла;
	
	ДействияСервер.ЗаполнитьРеквизитЗащищенныйВНастройке(Действие, Участники);
	
	ОбъектXDTO.participantRows = ОбработкаЗапросовXDTO.СоздатьОбъект(СтрШаблон("%1Rows", ТипОбъектаXDTO));
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект(СтрШаблон("%1Row", ТипОбъектаXDTO));
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "id", Строка(СтрокаУчастника.Идентификатор));
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "condition", СтрокаУчастника.Условие);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "description", СтрокаУчастника.Описание);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDate", СтрокаУчастника.Срок);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDateDays", СтрокаУчастника.СрокДни);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDateHours", СтрокаУчастника.СрокЧасы);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDateMinutes", СтрокаУчастника.СрокМинуты);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "fromSettings", СтрокаУчастника.ИзНастройки);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "protected", СтрокаУчастника.Защищенный);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "protectedInSettings", СтрокаУчастника.ЗащищенныйВНастройке);
		
		УчастникДействияXDTO(СтрокаXDTO.participant, СтрокаУчастника.Участник);
		
		Если ЗначениеЗаполнено(СтрокаУчастника.ВариантУстановкиСрока) Тогда
			СтрокаXDTO.dueDateSpecificationVariant =
				ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СтрокаУчастника.ВариантУстановкиСрока);
		КонецЕсли;
		
		СрокПредставление =
			СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
				СтрокаУчастника.Срок,
				СтрокаУчастника.СрокДни,
				СтрокаУчастника.СрокЧасы,
				СтрокаУчастника.СрокМинуты,
				ДанныеДействия.ИспользоватьДатуИВремяВСрокахЗадач,
				СтрокаУчастника.ВариантУстановкиСрока);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDatePresentation", СрокПредставление);
		
		ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "presentation", ПредставлениеСтроки);
		
		Если ТипДействия = Тип("СправочникОбъект.ДействияИсполнения") Тогда
			ПолучитьУчастниковДействияИсполнения(СтрокаУчастника, СтрокаXDTO, ДанныеДействия);
			
		ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияОзнакомления") Тогда
			ПолучитьУчастниковДействияОзнакомления(СтрокаУчастника, СтрокаXDTO, ДанныеДействия);
			
		ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияПодписания") Тогда
			ПолучитьУчастниковДействияПодписания(СтрокаУчастника, СтрокаXDTO, ДанныеДействия);
			
		ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияРегистрации") Тогда
			ПолучитьУчастниковДействияРегистрации(СтрокаУчастника, СтрокаXDTO, ДанныеДействия);
			
		ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияСогласования") Тогда
			ПолучитьУчастниковДействияСогласования(СтрокаУчастника, СтрокаXDTO, ДанныеДействия);
			
		ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияУтверждения") Тогда
			ПолучитьУчастниковДействияУтверждения(СтрокаУчастника, СтрокаXDTO, ДанныеДействия);
			
		КонецЕсли;
		
		ОбъектXDTO.participantRows.rows.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в объекте XDTO участников действия исполнения.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//   ДанныеДействия - см. ДанныеДействия
//
Процедура ПолучитьУчастниковДействияИсполнения(СтрокаУчастника, СтрокаXDTO, ДанныеДействия)
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"pointID",
		Строка(СтрокаУчастника.ИдентификаторПункта));
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"higherLevelParticipant",
		Строка(СтрокаУчастника.ВышестоящийУчастник));
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"dueDateTotal",
		СтрокаУчастника.СрокОбщий);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"taskDescription",
		СтрокаУчастника.НаименованиеЗадачи);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"resolutionDraft",
		СтрокаУчастника.ПроектРезолюции);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"resolutionExist",
		СтрокаУчастника.ЕстьРезолюция);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"resolutionPresentation",
		СтрокаУчастника.ПредставлениеРезолюции);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"responsible",
		СтрокаУчастника.Ответственный);
	
	Если ЗначениеЗаполнено(СтрокаУчастника.ФункцияУчастника) Тогда
		СтрокаXDTO.participantFunction =
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СтрокаУчастника.ФункцияУчастника);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в объекте XDTO участников действия ознакомления.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//   ДанныеДействия - см. ДанныеДействия
//
Процедура ПолучитьУчастниковДействияОзнакомления(СтрокаУчастника, СтрокаXDTO, ДанныеДействия)
	
	Если ЗначениеЗаполнено(СтрокаУчастника.ИсточникДанных) Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO,
			"dataSource",
			СтрокаУчастника.ИсточникДанных);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO,
			"dataSourceIsActive",
			ОбщегоНазначенияДокументооборотПовтИсп.ИсточникАктивен(СтрокаУчастника.ИсточникДанных));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в объекте XDTO участников действия подписания.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//   ДанныеДействия - см. ДанныеДействия
//
Процедура ПолучитьУчастниковДействияПодписания(СтрокаУчастника, СтрокаXDTO, ДанныеДействия)
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"stageID",
		Строка(СтрокаУчастника.ИдентификаторЭтапа));
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"higherLevelParticipant",
		Строка(СтрокаУчастника.ВышестоящийУчастник));
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"organization",
		СтрокаУчастника.Организация);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"dueDateTotal",
		СтрокаУчастника.СрокОбщий);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"taskDescription",
		СтрокаУчастника.НаименованиеЗадачи);
	
	Если ЗначениеЗаполнено(СтрокаУчастника.ФункцияУчастника) Тогда
		СтрокаXDTO.participantFunction =
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СтрокаУчастника.ФункцияУчастника);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в объекте XDTO участников действия регистрации.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//   ДанныеДействия - см. ДанныеДействия
//
Процедура ПолучитьУчастниковДействияРегистрации(СтрокаУчастника, СтрокаXDTO, ДанныеДействия)
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"dueDateTotal",
		СтрокаУчастника.СрокОбщий);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"taskDescription",
		СтрокаУчастника.НаименованиеЗадачи);
	
	Если ЗначениеЗаполнено(СтрокаУчастника.ФункцияУчастника) Тогда
		СтрокаXDTO.participantFunction =
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СтрокаУчастника.ФункцияУчастника);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в объекте XDTO участников действия согласования.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//   ДанныеДействия - см. ДанныеДействия
//
Процедура ПолучитьУчастниковДействияСогласования(СтрокаУчастника, СтрокаXDTO, ДанныеДействия)
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"dueDateTotal",
		СтрокаУчастника.СрокОбщий);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"taskDescription",
		СтрокаУчастника.НаименованиеЗадачи);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"stageID",
		Строка(СтрокаУчастника.ИдентификаторЭтапа));
	
	Если ЗначениеЗаполнено(СтрокаУчастника.ФункцияУчастника) Тогда
		СтрокаXDTO.participantFunction =
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СтрокаУчастника.ФункцияУчастника);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в объекте XDTO участников действия утверждения.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//   ДанныеДействия - см. ДанныеДействия
//
Процедура ПолучитьУчастниковДействияУтверждения(СтрокаУчастника, СтрокаXDTO, ДанныеДействия)
	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"dueDateTotal",
		СтрокаУчастника.СрокОбщий);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
		СтрокаXDTO,
		"taskDescription",
		СтрокаУчастника.НаименованиеЗадачи);
	
	Если ЗначениеЗаполнено(СтрокаУчастника.ФункцияУчастника) Тогда
		СтрокаXDTO.participantFunction =
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СтрокаУчастника.ФункцияУчастника);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в объекте XDTO этапы действия.
//
// Параметры:
//   Действие - ОпределяемыйТип.ДействияОбъект
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//   ДанныеДействия - см. ДанныеДействия
//
Процедура ПолучитьЭтапыДействия(Действие, ОбъектXDTO, ДанныеДействия)
	
	ОбъектXDTO.stageRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionStageRows");
	
	Для Каждого Строка Из Действие.Этапы Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionStageRow");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "id", Строка(Строка.Идентификатор));
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDate", Строка.Срок);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDateDays", Строка.СрокДни);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDateHours", Строка.СрокЧасы);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDateMinutes", Строка.СрокМинуты);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "dueDateTotal", Строка.СрокОбщий);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "rankFrom", Строка.РангС);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "rankTo", Строка.РангПо);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "stageDescription", Строка.НаименованиеЭтапа);
		
		Если ЗначениеЗаполнено(Строка.ПорядокВыполненияУчастниками) Тогда
			СтрокаXDTO.orderOfExecutionByParticipants =
				ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Строка.ПорядокВыполненияУчастниками);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ВариантУстановкиСрока) Тогда
			СтрокаXDTO.dueDateSpecificationVariant =
				ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Строка.ВариантУстановкиСрока);
		КонецЕсли;
		
		ОбъектXDTO.stageRows.rows.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДействиеВспомогательныеМетодыЗаполнить

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияИсполнения - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionPerformance.
//
Процедура ЗаполнитьДанныеДействияИсполнения(Действие, ОбъектXDTO)
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "controller") Тогда
		Действие.Контролер = УчастникДействияДО(ОбъектXDTO.controller);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Действие.ПодписыватьРезолюцииЭП, ОбъектXDTO, "signResolutionsWithDS");
	
	ЗаполнитьПунктыДействия(Действие, ОбъектXDTO);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияОзнакомления - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionExamination.
//
Процедура ЗаполнитьДанныеДействияОзнакомления(Действие, ОбъектXDTO)
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Действие.ПодписыватьУЭП, ОбъектXDTO, "signWithDS");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Действие.ОжидатьЗавершения, ОбъектXDTO, "waitForCompletion");
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияПодписания - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionSigning.
//
Процедура ЗаполнитьДанныеДействияПодписания(Действие, ОбъектXDTO)
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMActionSubjectSigningMethod",
		ОбъектXDTO,
		"signingMethod",
		Действие,
		"СпособПодписания");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMOrderOfExecutionActionStage",
		ОбъектXDTO,
		"orderOfExecutionByParticipants",
		Действие,
		"ПорядокВыполненияУчастниками");
	
	ЗаполнитьЭтапыДействия(Действие, ОбъектXDTO);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияРегистрации - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionRegistration.
//
Процедура ЗаполнитьДанныеДействияРегистрации(Действие, ОбъектXDTO)
	
	
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияСогласования - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionApproval.
//
Процедура ЗаполнитьДанныеДействияСогласования(Действие, ОбъектXDTO)
	
	Если ОбъектXDTO.dialogueMode = Истина Тогда
		РежимДиалога = Истина;
	Иначе
		РежимДиалога = Ложь;
	КонецЕсли;
	
	Действие.ДополнительныеСвойства.Вставить("РежимДиалогаВЗадаче", РежимДиалога);
	Вытесняемые = ПравилаОбработкиСервер.ВытесняемыеУчастникиОбработки(Действие.Предмет, Действие);
	Для Каждого Участник Из Действие.Участники Цикл
		Вытеснение = Вытесняемые[Участник.Идентификатор];
		Если Вытеснение <> Неопределено
				И Не Участник.ИзНастройки
				И Не Участник.Защищенный Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Участник %1 будет вытеснен участником %2 действия %3. Удалите его или установите отметку защищенности.'"),
				Участник.Участник,
				Вытеснение.ВытесняющийСотрудник,
				Вытеснение.ВытесняющееДействие);
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Действие.ПодписыватьУЭП, ОбъектXDTO, "signWithDS");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Действие.СогласованиеВРежимеЗамечаний, ОбъектXDTO, "approvalInTheRemarksMode");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Действие.ФормируетВизы, ОбъектXDTO, "makeEndorsementsOfApproval");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMOrderOfExecutionActionStage",
		ОбъектXDTO,
		"orderOfExecutionByParticipants",
		Действие,
		"ПорядокВыполненияУчастниками");
	
	ЗаполнитьЭтапыДействия(Действие, ОбъектXDTO);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Действие - СправочникОбъект.ДействияУтверждения - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMActionConfirmation.
//
Процедура ЗаполнитьДанныеДействияУтверждения(Действие, ОбъектXDTO)
	
	
	
КонецПроцедуры

// Заполняет пункты действия из объекта XDTO.
//
// Параметры:
//   Действие - ОпределяемыйТип.ДействияОбъект
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//
Процедура ЗаполнитьПунктыДействия(Действие, ОбъектXDTO)
	
	Если Не ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "pointRows") Тогда
		Возврат;
	КонецЕсли;
	
	ДоступенВыборАвтораПунктаНаСторонеИС = Не ЗначениеЗаполнено(ПараметрыСеанса.УзелИнтегрированнойСистемы)
		Или РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(
			ПараметрыСеанса.УзелИнтегрированнойСистемы,
			"3.0.2.7");
	Если Не ДоступенВыборАвтораПунктаНаСторонеИС Тогда
		КешАвторов = Новый Соответствие;
		Для Каждого Пункт Из Действие.Пункты Цикл
			КешАвторов[Пункт.Идентификатор] = Пункт.Автор;
		КонецЦикла;
	КонецЕсли;
	
	Действие.Пункты.Очистить();
	
	Для Каждого СтрокаXDTO Из ОбъектXDTO.pointRows.rows Цикл
		
		Строка = Действие.Пункты.Добавить();
		
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаXDTO.id) Тогда
			Строка.Идентификатор = Новый УникальныйИдентификатор(СтрокаXDTO.id);
		КонецЕсли;
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Срок, СтрокаXDTO, "dueDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Описание, СтрокаXDTO, "description");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Номер, СтрокаXDTO, "number");
		
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "controller") Тогда
			Строка.Контролер = УчастникДействияДО(СтрокаXDTO.controller);
		КонецЕсли;
		
		Если ДоступенВыборАвтораПунктаНаСторонеИС Тогда
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "author") Тогда
				Строка.Автор = УчастникДействияДО(СтрокаXDTO.author);
			КонецЕсли;
		Иначе
			Строка.Автор = КешАвторов[Строка.Идентификатор];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в объекте Документооборота участников действия по данным объекта XDTO.
//
// Параметры:
//   Действие - ОпределяемыйТип.ДействияОбъект
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//   ТипДействия - Тип - тип действия.
//
Процедура ЗаполнитьУчастниковДействия(Действие, ОбъектXDTO, ТипДействия)
	
	Если Не ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "participantRows") Тогда
		Возврат;
	КонецЕсли;
	
	Действие.Участники.Очистить();
	
	Для Каждого СтрокаXDTO Из ОбъектXDTO.participantRows.rows Цикл
		
		СтрокаУчастника = Действие.Участники.Добавить();
		
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаXDTO.id) Тогда
			СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор(СтрокаXDTO.id);
		КонецЕсли;
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.Условие, СтрокаXDTO, "condition");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.Описание, СтрокаXDTO, "description");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.Срок, СтрокаXDTO, "dueDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.СрокДни, СтрокаXDTO, "dueDateDays");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.СрокЧасы, СтрокаXDTO, "dueDateHours");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.СрокМинуты, СтрокаXDTO, "dueDateMinutes");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.ИзНастройки, СтрокаXDTO, "fromSettings");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.Защищенный, СтрокаXDTO, "protected");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
			"DMDueDateSpecificationOption",
			СтрокаXDTO,
			"dueDateSpecificationVariant",
			СтрокаУчастника,
			"ВариантУстановкиСрока");
		
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "participant") Тогда
			СтрокаУчастника.Участник = УчастникДействияДО(СтрокаXDTO.participant);
		КонецЕсли;
		
		Если ТипДействия = Тип("СправочникОбъект.ДействияИсполнения") Тогда
			ЗаполнитьУчастниковДействияИсполнения(СтрокаУчастника, СтрокаXDTO);
			
		ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияОзнакомления") Тогда
			ЗаполнитьУчастниковДействияОзнакомления(СтрокаУчастника, СтрокаXDTO);
			
		ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияПодписания") Тогда
			ЗаполнитьУчастниковДействияПодписания(СтрокаУчастника, СтрокаXDTO);
			
		ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияРегистрации") Тогда
			ЗаполнитьУчастниковДействияРегистрации(СтрокаУчастника, СтрокаXDTO);
			
		ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияСогласования") Тогда
			ЗаполнитьУчастниковДействияСогласования(СтрокаУчастника, СтрокаXDTO);
			
		ИначеЕсли ТипДействия = Тип("СправочникОбъект.ДействияУтверждения") Тогда
			ЗаполнитьУчастниковДействияУтверждения(СтрокаУчастника, СтрокаXDTO);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в объекте Документооборота участников действия исполнения по данным объекта XDTO.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//
Процедура ЗаполнитьУчастниковДействияИсполнения(СтрокаУчастника, СтрокаXDTO)
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаXDTO.pointID) Тогда
		СтрокаУчастника.ИдентификаторПункта = Новый УникальныйИдентификатор(СтрокаXDTO.pointID);
	КонецЕсли;
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаXDTO.higherLevelParticipant) Тогда
		СтрокаУчастника.ВышестоящийУчастник = Новый УникальныйИдентификатор(СтрокаXDTO.higherLevelParticipant);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.СрокОбщий, СтрокаXDTO, "dueDateTotal");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.НаименованиеЗадачи, СтрокаXDTO, "taskDescription");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.ПроектРезолюции, СтрокаXDTO, "resolutionDraft");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.Ответственный, СтрокаXDTO, "responsible");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMActionParticipantFunction",
		СтрокаXDTO,
		"participantFunction",
		СтрокаУчастника,
		"ФункцияУчастника");
	
КонецПроцедуры

// Заполняет в объекте Документооборота участников действия ознакомления по данным объекта XDTO.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//
Процедура ЗаполнитьУчастниковДействияОзнакомления(СтрокаУчастника, СтрокаXDTO)
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.ИсточникДанных, СтрокаXDTO, "dataSource");
	
КонецПроцедуры

// Заполняет в объекте Документооборота участников действия подписания по данным объекта XDTO.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//
Процедура ЗаполнитьУчастниковДействияПодписания(СтрокаУчастника, СтрокаXDTO)
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаXDTO.stageID) Тогда
		СтрокаУчастника.ИдентификаторЭтапа = Новый УникальныйИдентификатор(СтрокаXDTO.stageID);
	КонецЕсли;
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаXDTO.higherLevelParticipant) Тогда
		СтрокаУчастника.ВышестоящийУчастник = Новый УникальныйИдентификатор(СтрокаXDTO.higherLevelParticipant);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.Организация, СтрокаXDTO, "organization");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.СрокОбщий, СтрокаXDTO, "dueDateTotal");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		СтрокаУчастника.НаименованиеЗадачи, СтрокаXDTO, "taskDescription");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMActionParticipantFunction",
		СтрокаXDTO,
		"participantFunction",
		СтрокаУчастника,
		"ФункцияУчастника");
	
КонецПроцедуры

// Заполняет в объекте Документооборота участников действия регистрации по данным объекта XDTO.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//
Процедура ЗаполнитьУчастниковДействияРегистрации(СтрокаУчастника, СтрокаXDTO)
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.СрокОбщий, СтрокаXDTO, "dueDateTotal");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		СтрокаУчастника.НаименованиеЗадачи, СтрокаXDTO, "taskDescription");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMActionParticipantFunction",
		СтрокаXDTO,
		"participantFunction",
		СтрокаУчастника,
		"ФункцияУчастника");
	
КонецПроцедуры

// Заполняет в объекте Документооборота участников действия согласования по данным объекта XDTO.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//
Процедура ЗаполнитьУчастниковДействияСогласования(СтрокаУчастника, СтрокаXDTO)
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаXDTO.stageID) Тогда
		СтрокаУчастника.ИдентификаторЭтапа = Новый УникальныйИдентификатор(СтрокаXDTO.stageID);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.СрокОбщий, СтрокаXDTO, "dueDateTotal");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		СтрокаУчастника.НаименованиеЗадачи, СтрокаXDTO, "taskDescription");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMActionParticipantFunction",
		СтрокаXDTO,
		"participantFunction",
		СтрокаУчастника,
		"ФункцияУчастника");
	
КонецПроцедуры

// Заполняет в объекте Документооборота участников действия утверждения по данным объекта XDTO.
//
// Параметры:
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка таблицы Участники.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//
Процедура ЗаполнитьУчастниковДействияУтверждения(СтрокаУчастника, СтрокаXDTO)
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтрокаУчастника.СрокОбщий, СтрокаXDTO, "dueDateTotal");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		СтрокаУчастника.НаименованиеЗадачи, СтрокаXDTO, "taskDescription");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMActionParticipantFunction",
		СтрокаXDTO,
		"participantFunction",
		СтрокаУчастника,
		"ФункцияУчастника");
	
КонецПроцедуры

// Заполняет этапы действия из объекта XDTO.
//
// Параметры:
//   Действие - ОпределяемыйТип.ДействияОбъект
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//
Процедура ЗаполнитьЭтапыДействия(Действие, ОбъектXDTO)
	
	Если Не ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "stageRows") Тогда
		Возврат;
	КонецЕсли;
	
	Действие.Этапы.Очистить();
	
	Для Каждого СтрокаXDTO Из ОбъектXDTO.stageRows.rows Цикл
		
		Строка = Действие.Этапы.Добавить();
		
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаXDTO.id) Тогда
			Строка.Идентификатор = Новый УникальныйИдентификатор(СтрокаXDTO.id);
		КонецЕсли;
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.НаименованиеЭтапа, СтрокаXDTO, "stageDescription");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.РангС, СтрокаXDTO, "rankFrom");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.РангПо, СтрокаXDTO, "rankTo");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Срок, СтрокаXDTO, "dueDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.СрокДни, СтрокаXDTO, "dueDateDays");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.СрокЧасы, СтрокаXDTO, "dueDateHours");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.СрокМинуты, СтрокаXDTO, "dueDateMinutes");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.СрокОбщий, СтрокаXDTO, "dueDateTotal");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
			"DMDueDateSpecificationOption",
			СтрокаXDTO,
			"dueDateSpecificationVariant",
			Строка,
			"ВариантУстановкиСрока");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
			"DMOrderOfExecutionActionStage",
			СтрокаXDTO,
			"orderOfExecutionByParticipants",
			Строка,
			"ПорядокВыполненияУчастниками");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеДействия(Действие, Знач РежимДиалога = Неопределено)
	
	Если РежимДиалога = Неопределено Тогда
		РежимДиалога = Ложь;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимДиалога", РежимДиалога);
	
	ДанныеДействия = Новый Структура;
	ДанныеДействия.Вставить("Объект", Действие);
	ДанныеДействия.Вставить("Параметры", ПараметрыФормы);
	ДанныеДействия.Вставить("Заголовок", "");
	ДанныеДействия.Вставить("ТолькоПросмотр", Ложь);
	ДанныеДействия.Вставить("ИспользоватьДатуИВремяВСрокахЗадач", Ложь);
	ДанныеДействия.Вставить("СписокПредметов", Новый СписокЗначений);
	ДанныеДействия.Вставить("МожноТолькоДобавлятьУчастников", Ложь);
	ДанныеДействия.Вставить("МожноИзменятьЗащищенныхУчастников", Ложь);
	ДанныеДействия.Вставить("ДатаОтсчетаДляРасчетаСроков", Дата(1, 1, 1));
	ДанныеДействия.Вставить("ОтложенноеНачалоВыполненияДни", 0);
	ДанныеДействия.Вставить("ОтложенноеНачалоВыполненияЧасы", 0);
	ДанныеДействия.Вставить("ОписаниеОтложенногоНачалаВыполнения", "");
	
	Разрешения = Новый ТаблицаЗначений;
	Разрешения.Колонки.Добавить(
		"Разрешение",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыДоступностиИзмененияДействий"));
	Разрешения.Колонки.Добавить("ИдентификаторЭтапа", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ДанныеДействия.Вставить("Разрешения", Разрешения);
	
	ЭлементыФормы = Новый Структура;
	ЭлементыФормы.Вставить("Автор", СтруктураПоляВводаФормы());
	ЭлементыФормы.Вставить("ЗаписатьИЗакрыть", СтруктураКнопкиФормы(,,Истина));
	ЭлементыФормы.Вставить("ПродолжитьДиалог", СтруктураКнопкиФормы(Ложь));
	ЭлементыФормы.Вставить("Закрыть", СтруктураКнопкиФормы());
	ЭлементыФормы.Вставить("ГруппаОписаниеОтложенногоВыполнения", СтруктураГруппыФормы());
	ЭлементыФормы.Вставить("ГруппаНедоступноДляИзменения", СтруктураГруппыФормы(Ложь));
	ЭлементыФормы.Вставить("ОчиститьЗадержку", СтруктураКнопкиФормы());
	ЭлементыФормы.Вставить("ОписаниеОтложенногоНачалаВыполнения", СтруктураПоляНадписи());
	ЭлементыФормы.Вставить("ОтложенноеДействие", СтруктураКартинкиФормы());
	ДанныеДействия.Вставить("Элементы", ЭлементыФормы);
	
	КомандыФормы = Новый Структура;
	КомандыФормы.Вставить("ОчиститьЗадержку", СтруктураКомандыФормы());
	ДанныеДействия.Вставить("Команды", КомандыФормы);
	
	Возврат ДанныеДействия;
	
КонецФункции

Процедура ПередЗаписьюДействия(Действие, ОбъектXDTO)
	
	Действие.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Действие.Ссылка.Пустая());
	
	Если ОбъектXDTO.actionPerformedWithNewParticipants = Истина Тогда
		ДействияСервер.УстановитьПризнакЗаписиИсполненияДействияСНовымиУчастниками(Действие);
	КонецЕсли;
	
	НастройкаОбработки = Справочники.НастройкиОбработкиВидовОбъектов.НастройкаОбработкиДляОбъекта(Действие.Предмет);
	Если ЗначениеЗаполнено(НастройкаОбработки) Тогда
		Действие.ДополнительныеСвойства.Вставить("НастройкаОбработки", НастройкаОбработки);
	КонецЕсли;
	
	Если ДействияСервер.ПризнакЗаписиИсполненияДействияСНовымиУчастниками(Действие) Тогда
		Действие.ДополнительныеСвойства.Вставить("РазрешитьЗаписьОбъектаИзДругойСистемы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонвертацияЭлементовФормы

Функция ГруппаФормыXDTO(СтруктураГруппыФормы)
	
	ГруппаФормыXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFormGroup");
	ГруппаФормыXDTO.visible = СтруктураГруппыФормы.Видимость;
	ГруппаФормыXDTO.enabled = СтруктураГруппыФормы.Доступность;
	ГруппаФормыXDTO.title = СтруктураГруппыФормы.Заголовок;
	
	Возврат ГруппаФормыXDTO;
	
КонецФункции

Функция КнопкаXDTO(СтруктураКнопкиФормы, СтруктураКомандыФормы = Неопределено, ЭтоКнопкаВыполненияЗадачи = Истина)
	
	КнопкаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMButton");
	КнопкаXDTO.visible = СтруктураКнопкиФормы.Видимость;
	КнопкаXDTO.enabled = СтруктураКнопкиФормы.Доступность;
	КнопкаXDTO.title = СтруктураКнопкиФормы.Заголовок;
	КнопкаXDTO.titleHeight = СтруктураКнопкиФормы.ВысотаЗаголовка;
	КнопкаXDTO.defaultButton = СтруктураКнопкиФормы.КнопкаПоУмолчанию;
	
	Если СтруктураКомандыФормы <> Неопределено Тогда
		КнопкаXDTO.hint = СтруктураКомандыФормы.Подсказка;
	КонецЕсли;
	
	Если ЭтоКнопкаВыполненияЗадачи Тогда
		
		// Сравниваем представление стиля со строкой для повышения производительности.
		
		Если Строка(СтруктураКнопкиФормы.ЦветТекста) = "стиль: Отметка положительного выполнения задачи" Тогда
			КнопкаXDTO.textColor = "Positive";
			
		ИначеЕсли Строка(СтруктураКнопкиФормы.ЦветТекста) = "стиль: Отметка отрицательного выполнения задачи" Тогда
			КнопкаXDTO.textColor = "Negative";
			
		Иначе
			ПоддерживаетсяНейтральныйЦвет = РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(
				ПараметрыСеанса.УзелИнтегрированнойСистемы,
				"3.0.2.4");
			Если ПоддерживаетсяНейтральныйЦвет Тогда
				КнопкаXDTO.textColor = "Neutral";
			Иначе
				КнопкаXDTO.textColor = "Positive";
			КонецЕсли;
			
		КонецЕсли;
		
		КнопкаXDTO.font = "Normal";
		
	КонецЕсли;
	
	Возврат КнопкаXDTO;
	
КонецФункции

Функция ПолеВводаXDTO(СтруктураПоляВводаФормы)
	
	ПолеВводаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInputField");
	ПолеВводаXDTO.visible = СтруктураПоляВводаФормы.Видимость;
	ПолеВводаXDTO.enabled = СтруктураПоляВводаФормы.Доступность;
	ПолеВводаXDTO.readOnly = СтруктураПоляВводаФормы.ТолькоПросмотр;
	ПолеВводаXDTO.inputHint = СтруктураПоляВводаФормы.ПодсказкаВвода;
	
	Возврат ПолеВводаXDTO;
	
КонецФункции

Функция ПолеНадписиXDTO(СтруктураПоляНадписи)
	
	ПолеНадписиXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMLabelField");
	ПолеНадписиXDTO.titleHeight = СтруктураПоляНадписи.ВысотаЗаголовка;
	ПолеНадписиXDTO.hint = СтруктураПоляНадписи.Подсказка;
	ПолеНадписиXDTO.width = СтруктураПоляНадписи.Ширина;
	ПолеНадписиXDTO.enabled = СтруктураПоляНадписи.Доступность;
	
	Если СтруктураПоляНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто Тогда
		ПолеНадписиXDTO.titleLocation = "Auto";
	ИначеЕсли СтруктураПоляНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх Тогда
		ПолеНадписиXDTO.titleLocation = "Top";
	ИначеЕсли СтруктураПоляНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево Тогда
		ПолеНадписиXDTO.titleLocation = "Left";
	ИначеЕсли СтруктураПоляНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет Тогда
		ПолеНадписиXDTO.titleLocation = "None";
	ИначеЕсли СтруктураПоляНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Низ Тогда
		ПолеНадписиXDTO.titleLocation = "Bottom";
	ИначеЕсли СтруктураПоляНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право Тогда
		ПолеНадписиXDTO.titleLocation = "Right";
	КонецЕсли;
	
	Возврат ПолеНадписиXDTO;
	
КонецФункции

#КонецОбласти

Функция ДеревоПриложений()
	
	ТипыСотрудника = Новый Массив;
	ТипыСотрудника.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ТипыСотрудника.Добавить(Тип("СправочникСсылка.Пользователи"));
	
	ТипыКартинки = Новый Массив;
	ТипыКартинки.Добавить(Тип("Число"));
	ТипыКартинки.Добавить(Тип("Картинка"));
	
	ТипыДокументаЭДО = Новый Массив;
	ТипыДокументаЭДО.Добавить(Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО"));
	ТипыДокументаЭДО.Добавить(Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО"));
	
	ДеревоПриложений = Новый ДеревоЗначений;
	ДеревоПриложений.Колонки.Добавить("ХранитьВерсии", Новый ОписаниеТипов("Булево"));
	ДеревоПриложений.Колонки.Добавить("РедактируетТекущийПользователь", Новый ОписаниеТипов("Булево"));
	ДеревоПриложений.Колонки.Добавить("Редактирует", Новый ОписаниеТипов(ТипыСотрудника));
	ДеревоПриложений.Колонки.Добавить("РедактируетДругойПользователь", Новый ОписаниеТипов("Булево"));
	ДеревоПриложений.Колонки.Добавить("ИмяПредмета", Новый ОписаниеТипов("СправочникСсылка.ИменаПредметов"));
	ДеревоПриложений.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	ДеревоПриложений.Колонки.Добавить("ДоступноУдаление", Новый ОписаниеТипов("Булево"));
	ДеревоПриложений.Колонки.Добавить("РольПредмета", Новый ОписаниеТипов("ПеречислениеСсылка.РолиПредметов"));
	ДеревоПриложений.Колонки.Добавить("ПодписанЭП", Новый ОписаниеТипов("Булево"));
	ДеревоПриложений.Колонки.Добавить("ПолноеИмяФайлаВРабочемКаталоге", Новый ОписаниеТипов("Строка"));
	ДеревоПриложений.Колонки.Добавить("ДатаМодификацииУниверсальнаяВБазе", Новый ОписаниеТипов("Дата"));
	ДеревоПриложений.Колонки.Добавить("Приложение", Метаданные.ОпределяемыеТипы.ПриложениеЗадач.Тип);
	ДеревоПриложений.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов(ТипыКартинки));
	ДеревоПриложений.Колонки.Добавить("ПредставлениеПриложения", Новый ОписаниеТипов("Строка"));
	ДеревоПриложений.Колонки.Добавить("РольОбязательная", Новый ОписаниеТипов("Булево"));
	ДеревоПриложений.Колонки.Добавить("РольФайла", Новый ОписаниеТипов("СправочникСсылка.РолиФайлов"));
	ДеревоПриложений.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	ДеревоПриложений.Колонки.Добавить("ПредпросмотрЕстьВБазе", Новый ОписаниеТипов("Булево"));
	ДеревоПриложений.Колонки.Добавить("ТипСтроки", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСтрокДереваПриложений"));
	ДеревоПриложений.Колонки.Добавить("ТекущаяВерсияРазмер", Новый ОписаниеТипов("Число"));
	ДеревоПриложений.Колонки.Добавить("ДокументЭДО", Новый ОписаниеТипов(ТипыДокументаЭДО));
	ДеревоПриложений.Колонки.Добавить("КлючСтроки");
	
	Возврат ДеревоПриложений;
	
КонецФункции

Процедура ДеревоПриложенийВXDTO(Строки, ОбъектXDTO, ДействиеЗадачиСсылка, ОсновнойПредмет, ВспомогательныеПредметы,
		ОписаниеHTMLИнструкции, КешДанных)
	
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоддерживаютсяДокументыЭДО = РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(
		ПараметрыСеанса.УзелИнтегрированнойСистемы,
		"3.0.2.7");
	
	ОбъектXDTO.applicationRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMApplicationRows");
	
	Для Каждого Строка Из Строки Цикл
		
		ЭтоПоддерживаемаяСтрока =
			Не (Строка.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.ДокументЭДО И Не ПоддерживаютсяДокументыЭДО)
			И Не Строка.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Соисполнители
			И Не Строка.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Подзадачи
			И Не Строка.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.ДополнительныеРеквизиты;
		Если Не ЭтоПоддерживаемаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMApplicationRow");
		
		Если ТипЗнч(Строка.Приложение) = Тип("СправочникСсылка.ДокументыПредприятия")
				Или ТипЗнч(Строка.Приложение) = Тип("СправочникСсылка.Контрагенты")
				Или ТипЗнч(Строка.Приложение) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			Если ОсновнойПредмет = Неопределено
					И Строка.РольПредмета = Перечисления.РолиПредметов.Основной Тогда
				ОсновнойПредмет = Строка.Приложение;
			ИначеЕсли Строка.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Приложение
					И ВспомогательныеПредметы.Найти(Строка.Приложение) = Неопределено Тогда
				ВспомогательныеПредметы.Добавить(Строка.Приложение);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаXDTO.applicationPresentation = Строка.ПредставлениеПриложения;
		
		ПриложениеСсылка = Неопределено;
		Если Строка.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.РольФайла Тогда
			ПриложениеСсылка = Строка.РольФайла;
		ИначеЕсли Строка.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.ДокументЭДО Тогда
			ПриложениеСсылка = Строка.ДокументЭДО;
		Иначе
			ТипПриложения = ТипЗнч(Строка.Приложение);
			Если ТипПриложения = Тип("Строка")
					Или ТипПриложения = Тип("Число")
					Или ТипПриложения = Тип("Булево")
					Или ТипПриложения = Тип("Неопределено") Тогда
				ЭтоСсылка = Ложь;
			Иначе
				ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипПриложения);
			КонецЕсли;
			Если ЭтоСсылка И (ОбработкаЗапросовXDTO.ПолучитьТипXDTOПоТипуДО(ТипПриложения, Ложь) <> Неопределено) Тогда
				ПриложениеСсылка = Строка.Приложение;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПриложениеСсылка) Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "application", ПриложениеСсылка, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.РольПредмета) Тогда
			СтрокаXDTO.applicationRole = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Строка.РольПредмета);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ТипСтроки) Тогда
			СтрокаXDTO.rowType = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Строка.ТипСтроки);
		КонецЕсли;
		
		СтрокаXDTO.allowDeletion = Строка.ДоступноУдаление;
		Если ТипЗнч(Строка.ИндексКартинки) = Тип("Число") Тогда
			СтрокаXDTO.imageIndex = Строка.ИндексКартинки;
		Иначе
			СтрокаXDTO.imageIndex = -1;
		КонецЕсли;
		СтрокаXDTO.mandatoryFilling = Строка.ОбязательноеЗаполнение;
		СтрокаXDTO.requiredRole = Строка.РольОбязательная;
		
		Если Строка.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Инструкция Тогда
			СтрокаXDTO.htmlView = ОписаниеHTMLИнструкции;
		КонецЕсли;
		
		Если ТипЗнч(Строка.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "file", Строка.Приложение, Ложь);
			ДанныеФайла = КешДанных.ДанныеФайлов[Строка.Приложение];
			Если ТипЗнч(ДанныеФайла) = Тип("СтрокаТаблицыЗначений") Тогда
				СтрокаXDTO.file.modificationDateUniversal = ДанныеФайла.ДатаМодификацииУниверсальнаяВБазе;
				СтрокаXDTO.file.signed = ДанныеФайла.ПодписанЭП;
				СтрокаXDTO.file.extension = ДанныеФайла.Расширение;
				СтрокаXDTO.file.deletionMark = ДанныеФайла.ПометкаУдаления;
				СтрокаXDTO.file.editing = ЗначениеЗаполнено(ДанныеФайла.Редактирует);
				СтрокаXDTO.file.encrypted = ДанныеФайла.Зашифрован;
				СтрокаXDTO.file.scannedOriginal = ДанныеФайла.Оригинал;
				СтрокаXDTO.file.storeVersions = ДанныеФайла.ХранитьВерсии;
				Если ЗначениеЗаполнено(ДанныеФайла.РольФайла) Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
						СтрокаXDTO.file, "role", ДанныеФайла.РольФайла, Ложь);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
						СтрокаXDTO.file, "editingUser", ДанныеФайла.Редактирует, Ложь);
				КонецЕсли;
				СтрокаXDTO.applicationPresentation = ДанныеФайла.Наименование;
				СтрокаXDTO.application.name = ДанныеФайла.Наименование;
			Иначе
				НаборКолонок = Новый Массив;
				НаборКолонок.Добавить("modificationDateUniversal");
				НаборКолонок.Добавить("signed");
				НаборКолонок.Добавить("extension");
				НаборКолонок.Добавить("deletionMark");
				НаборКолонок.Добавить("editingUser");
				НаборКолонок.Добавить("editing");
				НаборКолонок.Добавить("encrypted");
				НаборКолонок.Добавить("scannedOriginal");
				НаборКолонок.Добавить("role");
				НаборКолонок.Добавить("storeVersions");
				ДанныеФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Строка.Приложение,
					"Ссылка, Наименование, ПолноеНаименование, Редактирует, ТекущаяВерсияДатаМодификацииФайла, ТекущаяВерсияАвтор,
					|ПодписанЭП, ТекущаяВерсияРазмер, ДатаСоздания, Автор, ТекущаяВерсияРасширение, Описание, Зашифрован, ДатаЗаема,
					|ВладелецФайла, ТекущаяВерсия, ПометкаУдаления, ШаблонОснованиеДляСоздания, ХранитьВерсии, Код, Проект");
				ОбработкаЗапросовXDTO.ПолучитьДанныеОбъектаДО(ДанныеФайла, СтрокаXDTO.file, "DMFile", НаборКолонок);
				СтрокаXDTO.applicationPresentation = ДанныеФайла.ПолноеНаименование;
				СтрокаXDTO.application.name = ДанныеФайла.ПолноеНаименование;
			КонецЕсли;
		КонецЕсли;
		
		ДеревоПриложенийВXDTO(
			Строка.Строки,
			СтрокаXDTO,
			ДействиеЗадачиСсылка,
			ОсновнойПредмет,
			ВспомогательныеПредметы,
			ОписаниеHTMLИнструкции,
			КешДанных);
		ОбъектXDTO.applicationRows.rows.Добавить(СтрокаXDTO);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСортировкуЗадачПоУмолчанию(МассивПолейСортировки)
	
	МассивПолейСортировки.Добавить("Дата УБЫВ");
	МассивПолейСортировки.Добавить("Заголовок");
	
КонецПроцедуры

Процедура ЗаполнитьДействия(ДействияСтроки, ActionsRows, ПолучатьДополнительныеДанные, ЕстьДействияСогласования,
		ЕстьДействияОзнакомления, ЗавершеноОтрицательноИЕстьЗамечания)
	
	Для Каждого Строка Из ДействияСтроки Цикл
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionRow");
		
		Если ТипЗнч(Строка.Действие) = Тип("СправочникСсылка.ДействияСогласования") И Не ЕстьДействияСогласования Тогда
			ФормируетВизы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Действие, "ФормируетВизы");
			Если ФормируетВизы Тогда
				ЕстьДействияСогласования = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Строка.Действие) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			ЕстьДействияОзнакомления = Истина;
		КонецЕсли;
		Если ТипЗнч(Строка.Действие) = Тип("СправочникСсылка.ДействияСогласования")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Действие, "СогласованиеВРежимеЗамечаний") Тогда
			ЗавершеноОтрицательноИЕстьЗамечания = ЗавершеноОтрицательноИЕстьЗамечания
				Или ДействияСервер.ДействиеЗавершеноОтрицательноИЕстьЗамечания(Строка.Действие);
		КонецЕсли;
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO, "imageIndex", Строка.НомерКартинки);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO, "presentation", Строка(Строка.Представление));
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO, "employeesPresentation", Строка(Строка.ПредставлениеСотрудники));
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO, "dueDateExceeded", Строка.СрокПревышен);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO, "dueDatePresentation", Строка(Строка.СрокПредставление));
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO, "statePresentation", Строка(Строка.ПредставлениеРезультата));
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO, "haveReportFiles", Строка.ЕстьФайлыОтчета);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO, "comment", Строка(Строка.РезультатТекстом));
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO, "statusDate", Строка.ДатаУстановкиСостояния);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			СтрокаXDTO, "monitoringState", Строка.СостояниеКонтроля);
		
		Если ПолучатьДополнительныеДанные Тогда
			СтрокаXDTO.additionalFields = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionRowAdditionalFields");
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "action", Строка.Действие);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "actionType", Строка.ВидДействия);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "unavailableGroup", Строка.НедоступноГруппа);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "unavailable", Строка.Недоступно);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "itIsParticipant", Строка.ЭтоУчастник);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "itIsSubtask", Строка.ЭтоПодзадача);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "itIsAction", Строка.ЭтоДействие);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "failedToDereference", Строка.НеУдалосьРазыменовать);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "willBeDeleted", Строка.БудетУдален);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "id", Строка(Строка.Идентификатор));
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "cleanPresentation", Строка(Строка.ПредставлениеЧистое));
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.additionalFields, "deletionMark", Строка.ПометкаУдаления);
			
			Если ЗначениеЗаполнено(Строка.Состояние) Тогда
				СтрокаXDTO.additionalFields.state = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(
					Строка.Состояние);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Результат) Тогда
				СтрокаXDTO.additionalFields.result = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(
					Строка.Результат);
			КонецЕсли;
			
			ДействиеЗадачи = Неопределено;
			Если ЗначениеЗаполнено(Строка.ДействиеЗадачи) Тогда
				ДействиеЗадачи = Строка.ДействиеЗадачи;
			ИначеЕсли ДействияКлиентСервер.ЭтоДействиеОзнакомления(Строка.Действие) И Строка.ЭтоУчастник Тогда
				ДействиеЗадачи = ДействияВызовСервера.ДействиеЗадачиДляСтрокиОзнакомления(
					Строка.Действие,
					Строка.Идентификатор);
			Иначе
				КлючОткрытия = Новый Структура;
				КлючОткрытия.Вставить("Действие", Строка.Действие);
				КлючОткрытия.Вставить("ИдентификаторУчастника", Строка.Идентификатор);
				ПараметрыОткрытия = Новый Структура;
					ПараметрыОткрытия.Вставить("КлючОткрытияКорректный", Ложь);
					ПараметрыОткрытия.Вставить("ИмяФормы", "");
					ПараметрыОткрытия.Вставить("ПараметрыФормы", Новый Структура);
				ИнтеграцияЗадач.ПриОпределенииПараметровОткрытияКарточкиИсполнителя(
					КлючОткрытия,
					Неопределено,
					ПараметрыОткрытия);
				Если ТипЗнч(КлючОткрытия) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
					ДействиеЗадачи = КлючОткрытия;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					СтрокаXDTO.additionalFields, "taskAction", ДействиеЗадачи);
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Строки.Количество() > 0 Тогда
			СтрокаXDTO.actionsRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMActionRows");
			ЗаполнитьДействия(
				Строка.Строки,
				СтрокаXDTO.actionsRows,
				ПолучатьДополнительныеДанные,
				ЕстьДействияСогласования,
				ЕстьДействияОзнакомления,
				ЗавершеноОтрицательноИЕстьЗамечания);
		КонецЕсли;
		
		ActionsRows.rows.Добавить(СтрокаXDTO);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОПрерыванииОбработки(ОбъектXDTO, ПредметОбработки, Состояние)
	
	Если Состояние <> Перечисления.СостоянияОбработкиОбъектов.Выполняется
			И Состояние <> Перечисления.СостоянияОбработкиОбъектов.Завершена
			И Состояние <> Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Обработки.ПричинаПрерывания КАК ПричинаПрерывания,
			|	Обработки.ДатаОкончания КАК ДатаОкончания,
			|	Обработки.Прервал КАК Прервал,
			|	Обработки.Состояние
			|ПОМЕСТИТЬ ВТ_Обработки
			|ИЗ
			|	Справочник.ОбработкиОбъектов КАК Обработки
			|ГДЕ
			|	Обработки.Владелец = &ПредметОбработки
			|
			|УПОРЯДОЧИТЬ ПО
			|	Обработки.ДатаНачала УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Обработки.ПричинаПрерывания,
			|	ВТ_Обработки.ДатаОкончания,
			|	ВТ_Обработки.Прервал
			|ИЗ
			|	ВТ_Обработки КАК ВТ_Обработки
			|ГДЕ
			|	ВТ_Обработки.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиОбъектов.Прервана)");
		Запрос.УстановитьПараметр("ПредметОбработки", ПредметОбработки);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ОбъектXDTO, "terminationReason", Строка(Выборка.ПричинаПрерывания));
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ОбъектXDTO, "endDate", Выборка.ДатаОкончания);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ОбъектXDTO, "interrupted", Выборка.Прервал);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИтогиСпискаЗадач(ИтогиСписка, ПараметрыОтбораИтогов, ОтборыПоСостояниюЗадач)
	
	ДанныеИтогов =
		РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтоги(ПараметрыОтбораИтогов);
	
	ШаблонСчетчика = "%1: %2";
	МассивИтогиСписка = Новый Массив;
	
	Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные; // Значение по-умолчанию.
	Если ОтборыПоСостояниюЗадач.Количество() = 1 Тогда
		Состояние = ОтборыПоСостояниюЗадач[0];
	КонецЕсли;
	
	ИтогиСписка.НеНачато = ДанныеИтогов.Новых;
	Если ЗначениеЗаполнено(ДанныеИтогов.Новых)
			И (Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные
				Или Состояние = Справочники.СостоянияЗадач.Новая
				Или Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеНачатые
				Или Состояние = Перечисления.ОтборыПоСтатусуЗадач.Все) Тогда
		ПредставлениеСчетчика = НСтр("ru = 'Не начато'");
		ЗначениеСчетчика = Формат(ДанныеИтогов.Новых, "ЧН=0");
		
		ТекстСчетчика = СтрШаблон(
			ШаблонСчетчика,
			ПредставлениеСчетчика,
			ЗначениеСчетчика);
		
		МассивИтогиСписка.Добавить(ТекстСчетчика);
	КонецЕсли;
	
	ИтогиСписка.Просрочено = ДанныеИтогов.Просроченных;
	Если ЗначениеЗаполнено(ДанныеИтогов.Просроченных)
			И (Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные
				Или Состояние = Справочники.СостоянияЗадач.Новая
				Или Состояние = Перечисления.ОтборыПоСтатусуЗадач.Просроченные
				Или Состояние = Перечисления.ОтборыПоСтатусуЗадач.Все) Тогда
		ПредставлениеСчетчика = НСтр("ru = 'Просрочено'");
		ЗначениеСчетчика = Формат(ДанныеИтогов.Просроченных, "ЧН=0");
		
		ТекстСчетчика = СтрШаблон(
			ШаблонСчетчика,
			ПредставлениеСчетчика,
			ЗначениеСчетчика);
		
		МассивИтогиСписка.Добавить(ТекстСчетчика);
	КонецЕсли;
	
	Если Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ОжидающихВыполнения;
		
	ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеНачатые Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Новых;
		
	ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.ПоступилиОбновления Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ПоступилиОбновления;
		
	ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.Просроченные Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Просроченных;
		
	ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.Все Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Всего;
		
	ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.ВСрок Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ВСрок;
		
	ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.Истекающие Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Истекающих;
		
	ИначеЕсли Состояние = Справочники.СостоянияЗадач.Черновик Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Черновиков;
		
	ИначеЕсли Состояние = Справочники.СостоянияЗадач.Новая Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ОжидающихВыполнения - ДанныеИтогов.ВРаботе;
		
	ИначеЕсли Состояние = Справочники.СостоянияЗадач.ВРаботе Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ВРаботе;
		
	ИначеЕсли Состояние = Справочники.СостоянияЗадач.НаПроверке Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ОжидающихПроверки;
		
	ИначеЕсли Состояние = Справочники.СостоянияЗадач.Закрыта Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Выполненных;
		
	КонецЕсли;
	
	ПредставлениеСчетчика = НСтр("ru = 'Всего'");
	ЗначениеСчетчика = Формат(ИтогиСписка.Всего, "ЧН=0");
	
	ТекстСчетчика = СтрШаблон(
		ШаблонСчетчика,
		ПредставлениеСчетчика,
		ЗначениеСчетчика);
	
	МассивИтогиСписка.Добавить(ТекстСчетчика);
	
	ИтогиСписка.ОписаниеИтогов = СтрСоединить(МассивИтогиСписка, " / ");
	
КонецПроцедуры

Процедура ЗаполнитьОбластьДействия(ОбластьДействия)
	
	ОбластьДействия.ВзятьВРаботу = СтруктураКнопкиФормы();
	ОбластьДействия.ОтменитьВзятиеВРаботу = СтруктураКнопкиФормы();
	ОбластьДействия.ФормаДобавитьУчастников = СтруктураКнопкиФормы();
	ОбластьДействия.ДокументЗадачаСоздатьПодзадачу = СтруктураКнопкиФормы();
	ОбластьДействия.СоздатьПодзадачу = СтруктураКнопкиФормы();
	ОбластьДействия.СогласоватьПереносСрока = СтруктураКнопкиФормы();
	
	ОбластьДействия.ПодменюФлаги = СтруктураГруппыФормы();
	
	ОбластьДействия.РезультатДействияТекстом = СтруктураПоляВводаФормы();
	
	ОбластьДействия.МаксимальнаяДлинаОбщая = 430;
	
	ОбластьДействия.ВзятьВРаботу.Видимость = Истина;
	ОбластьДействия.ВзятьВРаботу.Доступность = Истина;
	ОбластьДействия.ВзятьВРаботу.Заголовок = "Взять в работу";
	
	ОбластьДействия.ОтменитьВзятиеВРаботу.Видимость = Истина;
	ОбластьДействия.ОтменитьВзятиеВРаботу.Доступность = Истина;
	ОбластьДействия.ОтменитьВзятиеВРаботу.Заголовок = "Отменить взятие в работу";
	
	ОбластьДействия.ПодменюФлаги.Видимость = Истина;
	ОбластьДействия.ПодменюФлаги.Доступность = Истина;
	ОбластьДействия.ПодменюФлаги.Заголовок = "Флаг";
	
КонецПроцедуры

Процедура ЗаполнитьОсновнойПредмет(ОбъектXDTO, ОсновнойПредмет, КешДанных)
	
	Если ОсновнойПредмет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXDTO.mainApplication = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMainApplication");
	
	Попытка
		
		ОсновнойПредметОбъект = ОсновнойПредмет.ПолучитьОбъект();
		ОсновнойПредметXDTO = ОбработкаЗапросовXDTO.ПолучитьОбъектXDTOПоСуществующимДаннымДО(
			ОсновнойПредметОбъект,
			Неопределено,,,
			Истина,
			КешДанных)
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ОбработкаЗапросовXDTO.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,
			ОсновнойПредмет,
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборКолонок = Новый Массив;
		НаборКолонок.Добавить("name");
		Если ТипЗнч(ОсновнойПредмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			НаборКолонок.Добавить("documentType");
		КонецЕсли;
		ОсновнойПредметОбъект = ОсновнойПредмет.ПолучитьОбъект();
		ОсновнойПредметXDTO = ОбработкаЗапросовXDTO.ПолучитьОбъектXDTOПоСуществующимДаннымДО(
			ОсновнойПредметОбъект,
			НаборКолонок);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецПопытки;
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОсновнойПредметXDTO, "DMDocument") Тогда
		ОбъектXDTO.mainApplication.document = ОсновнойПредметXDTO;
	ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ОсновнойПредметXDTO, "DMCorrespondent") Тогда
		ОбъектXDTO.mainApplication.correspondent = ОсновнойПредметXDTO;
	ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ОсновнойПредметXDTO, "DMMeeting") Тогда
		ОбъектXDTO.mainApplication.meeting = ОсновнойПредметXDTO;
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру кнопки "Выполнить действие задачи".
//
// Параметры:
//   РезультатВарианта - СправочникСсылка.РезультатыДействийЗадач
//   ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
//   РеквизитыРезультатов - Соответствие из КлючИЗначение
//   ИспользуетсяЯзык1 - Булево
//
// Возвращаемое значение:
//   см. СтруктураКнопкиФормы
//
Функция КнопкаВыполнитьДействиеЗадачи(РезультатВарианта, ДанныеВариантовВыполненияЗадачи, РеквизитыРезультатов,
		ИспользуетсяЯзык1)
	
	КнопкаВыполнитьДействиеЗадачи = СтруктураКнопкиФормы();
	Если ЗначениеЗаполнено(РезультатВарианта) Тогда
		
		РеквизитыРезультата = РеквизитыРезультатов[РезультатВарианта];
		
		КнопкаВыполнитьДействиеЗадачи.Видимость = Истина;
		КнопкаВыполнитьДействиеЗадачи.Доступность = ДанныеВариантовВыполненияЗадачи.ДоступныКомандыВыполнения;
		КнопкаВыполнитьДействиеЗадачи.ЦветТекста = Перечисления.ХарактерыРезультатов.ЦветТекстаКоманды(
			РеквизитыРезультата.ХарактерРезультата);
		
		КнопкаВыполнитьДействиеЗадачи.Заголовок = ?(ИспользуетсяЯзык1,
			РеквизитыРезультата.ЗаголовокКомандыЯзык1,
			РеквизитыРезультата.ЗаголовокКоманды);
		Если ДанныеВариантовВыполненияЗадачи.РезультатыСЭП.Найти(РезультатВарианта) <> Неопределено Тогда
			КнопкаВыполнитьДействиеЗадачи.Заголовок =
				РаботаСЗадачамиКлиентСервер.ЗаголовокКомандыСЭП(КнопкаВыполнитьДействиеЗадачи.Заголовок);
		КонецЕсли;
		
		КнопкаВыполнитьДействиеЗадачи.ВысотаЗаголовка =
			РаботаСЗадачами.ВысотаЗаголовкаКомандыВыполнения(КнопкаВыполнитьДействиеЗадачи.Заголовок);
		
	Иначе
		
		КнопкаВыполнитьДействиеЗадачи.Видимость = Ложь;
		
	КонецЕсли;
	
	Возврат КнопкаВыполнитьДействиеЗадачи;
	
КонецФункции

// Формирует структуру кнопки "Выполнить действие задачи по шаблону".
//
// Параметры:
//   ШаблонДляВыполнения - СправочникСсылка.ШаблоныТекстов
//   ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
//   РеквизитыРезультатов - Соответствие из КлючИЗначение
//   РеквизитыШаблонов - Соответствие из КлючИЗначение
//
// Возвращаемое значение:
//   см. СтруктураКнопкиФормы
//
Функция КнопкаВыполнитьДействиеЗадачиПоШаблону(ШаблонДляВыполнения, ДанныеВариантовВыполненияЗадачи,
		РеквизитыРезультатов, РеквизитыШаблонов)
	
	КнопкаВыполнитьДействиеЗадачиПоШаблону = СтруктураКнопкиФормы();
	Если ЗначениеЗаполнено(ШаблонДляВыполнения) Тогда
		
		РеквизитыШаблона = РеквизитыШаблонов[ШаблонДляВыполнения];
		РеквизитыРезультата = РеквизитыРезультатов[РеквизитыШаблона.РезультатДействия];
		
		КнопкаВыполнитьДействиеЗадачиПоШаблону.Видимость = Истина;
		КнопкаВыполнитьДействиеЗадачиПоШаблону.Доступность = ДанныеВариантовВыполненияЗадачи.ДоступныКомандыВыполнения;
		КнопкаВыполнитьДействиеЗадачиПоШаблону.ЦветТекста = Перечисления.ХарактерыРезультатов.ЦветТекстаКоманды(
			РеквизитыРезультата.ХарактерРезультата);
		
		КнопкаВыполнитьДействиеЗадачиПоШаблону.Заголовок = РеквизитыШаблона.Наименование;
		
		КнопкаВыполнитьДействиеЗадачиПоШаблону.ВысотаЗаголовка =
			РаботаСЗадачами.ВысотаЗаголовкаКомандыВыполнения(КнопкаВыполнитьДействиеЗадачиПоШаблону.Заголовок);
		
	Иначе
		
		КнопкаВыполнитьДействиеЗадачиПоШаблону.Видимость = Ложь;
		
	КонецЕсли;
	
	Возврат КнопкаВыполнитьДействиеЗадачиПоШаблону;
	
КонецФункции

Функция СтруктураГруппыФормы(Видимость = Истина, Доступность = Истина)
	
	СтруктураГруппыФормы = Новый Структура;
	СтруктураГруппыФормы.Вставить("Видимость", Видимость);
	СтруктураГруппыФормы.Вставить("Доступность", Доступность);
	СтруктураГруппыФормы.Вставить("Заголовок", "");
	
	Возврат СтруктураГруппыФормы;
	
КонецФункции

Функция СтруктураДереваПриложений()
	
	СтруктураДереваПриложений = Новый Структура;
	СтруктураДереваПриложений.Вставить("Отображение", Ложь);
	
	Возврат СтруктураДереваПриложений;
	
КонецФункции

Функция СтруктураКартинкиФормы(Видимость = Истина)
	
	СтруктураКартинкиФормы = Новый Структура;
	СтруктураКартинкиФормы.Вставить("Видимость", Видимость);
	
	Возврат СтруктураКартинкиФормы;
	
КонецФункции

// Конструктор структуры свойств кнопки формы.
//
// Параметры:
//   Видимость - Булево
//   Доступность - Булево
//   КнопкаПоУмолчанию - Булево
//
// Возвращаемое значение:
//   Структура:
//     * Видимость - Булево
//     * Доступность - Булево
//     * КнопкаПоУмолчанию - Булево
//     * Заголовок - Строка
//     * ЦветТекста - Цвет
//                  - Неопределено
//     * Шрифт - Шрифт
//             - Неопределено
//     * ВысотаЗаголовка - Число
//
Функция СтруктураКнопкиФормы(Видимость = Истина, Доступность = Истина, КнопкаПоУмолчанию = Ложь)
	
	СтруктураКнопкиФормы = Новый Структура;
	СтруктураКнопкиФормы.Вставить("Видимость", Видимость);
	СтруктураКнопкиФормы.Вставить("Доступность", Доступность);
	СтруктураКнопкиФормы.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчанию);
	СтруктураКнопкиФормы.Вставить("Заголовок", "");
	СтруктураКнопкиФормы.Вставить("ЦветТекста", Неопределено);
	СтруктураКнопкиФормы.Вставить("Шрифт", Неопределено);
	СтруктураКнопкиФормы.Вставить("ВысотаЗаголовка", 0);
	
	Возврат СтруктураКнопкиФормы;
	
КонецФункции

Функция СтруктураКомандыФормы()
	
	СтруктураКомандыФормы = Новый Структура;
	СтруктураКомандыФормы.Вставить("Подсказка", "");
	
	Возврат СтруктураКомандыФормы;
	
КонецФункции

Функция СтруктураПоляВводаФормы(Видимость = Истина, Доступность = Истина, ТолькоПросмотр = Ложь)
	
	СтруктураПоляВводаФормы = Новый Структура;
	СтруктураПоляВводаФормы.Вставить("Видимость", Видимость);
	СтруктураПоляВводаФормы.Вставить("Доступность", Доступность);
	СтруктураПоляВводаФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураПоляВводаФормы.Вставить("ПодсказкаВвода", "");
	
	Возврат СтруктураПоляВводаФормы;
	
КонецФункции

Функция СтруктураПоляНадписи(Доступность = Истина)
	
	СтруктураПоляНадписи = Новый Структура;
	СтруктураПоляНадписи.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Авто);
	СтруктураПоляНадписи.Вставить("ВысотаЗаголовка", 0);
	СтруктураПоляНадписи.Вставить("Подсказка", "");
	СтруктураПоляНадписи.Вставить("Ширина", 0);
	СтруктураПоляНадписи.Вставить("Доступность", Доступность);
	
	Возврат СтруктураПоляНадписи;
	
КонецФункции

Функция ТекстЗапросаДействияЗадач()
	
	Возврат
		"ВЫБРАТЬ
		|	ДействияЗадач.ДействиеЗадачи КАК Ссылка,
		|	ДействияЗадач.Заголовок КАК Заголовок,
		|	ДействияЗадач.ОписаниеПоступившихОбновлений КАК ОписаниеПоступившихОбновлений,
		|	ДействияЗадач.Новое КАК Новое,
		|	ДействияЗадач.Просрочено КАК Просрочено,
		|	ДействияЗадач.Приоритет КАК Приоритет,
		|	ВЫБОР
		|		КОГДА ДействияЗадач.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыЗадач.Высокий)
		|			ТОГДА 2
		|		КОГДА ДействияЗадач.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыЗадач.Обычный)
		|			ТОГДА 1
		|		КОГДА ДействияЗадач.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыЗадач.Низкий)
		|			ТОГДА 0
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК ИндексКартинкиПриоритета,
		|	ДействияЗадач.СостояниеКонтроля КАК СостояниеКонтроля,
		|	ДействияЗадач.КонтрольныйСрок КАК КонтрольныйСрок,
		|	ДействияЗадач.КонтрольныйСрокОбщий КАК КонтрольныйСрокОбщий,
		|	ДействияЗадач.РезультатДействия КАК РезультатДействия,
		|	ДействияЗадач.ВидСостоянияУчастниковЗадач КАК ВидСостоянияУчастниковЗадач,
		|	ДействияЗадач.Автор КАК Автор,
		|	ДействияЗадач.Исполнитель КАК Исполнитель,
		|	ДействияЗадач.ЕстьЗамещающие КАК ЕстьЗамещающие,
		|	ДействияЗадач.ТрудоемкостьОт КАК ТрудоемкостьОт,
		|	ДействияЗадач.ТрудоемкостьДо КАК ТрудоемкостьДо,
		|	ДействияЗадач.Дата КАК Дата,
		|	ДействияЗадач.Срок КАК Срок,
		|	ДействияЗадач.ЕстьПодзадачи КАК ЕстьПодзадачи,
		|	ДействияЗадач.Флаг КАК Флаг,
		|	ВЫБОР
		|		КОГДА ДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		КОГДА ДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексКартинкиФлага,
		|	ДействияЗадач.ВидДействия КАК ВидДействия,
		|	ДействияЗадач.Задача КАК Задача,
		|	ДействияЗадач.СостояниеУчастникаЗадачи КАК СостояниеУчастникаЗадачи,
		|	ДействияЗадач.ВидЗадачи КАК ВидЗадачи
		|ИЗ
		|	РегистрСведений.РеестрЗадачПоИсполнителям КАК ДействияЗадач";
	
КонецФункции

Процедура УстановитьОтборыПоСостояниюЗадач(ЗапросСОтборами, ОтборыПоСостояниюЗадач)
	
	Если ОтборыПоСостояниюЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаИЛИ = Новый Массив;
	
	Для Каждого Состояние Из ОтборыПоСостояниюЗадач Цикл
		
		Если Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные Тогда
			ГруппаИЛИ.Добавить("(ДействияЗадач.ОжидаетВыполнения = Истина)");
			ГруппаИЛИ.Добавить("(ДействияЗадач.ОжидаетПроверки = Истина)");
			
		ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеНачатые
				Или Состояние = Справочники.СостоянияЗадач.Новая Тогда
			ГруппаИЛИ.Добавить("(ДействияЗадач.Новое = Истина)");
			
		ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.ПоступилиОбновления Тогда
			ГруппаИЛИ.Добавить("(ДействияЗадач.ПоступилиОбновления = Истина)");
			
		ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.Просроченные Тогда
			ГруппаИЛИ.Добавить("(ДействияЗадач.ПросроченоИОжидаетВыполнения = Истина)");
			
		ИначеЕсли Состояние = Справочники.СостоянияЗадач.ВРаботе Тогда
			ГруппаИЛИ.Добавить("(ДействияЗадач.ВРаботе = Истина)");
			
		ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.ВСрок Тогда
			ГруппаИЛИ.Добавить("(ДействияЗадач.ВСрок = Истина)");
			
		ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.Истекающие Тогда
			ГруппаИЛИ.Добавить("(ДействияЗадач.Истекает = Истина)");
			
		ИначеЕсли Состояние = Справочники.СостоянияЗадач.НаПроверке Тогда
			ГруппаИЛИ.Добавить("(ДействияЗадач.ОжидаетПроверки = Истина)");
			
		ИначеЕсли Состояние = Справочники.СостоянияЗадач.Закрыта Тогда
			ГруппаИЛИ.Добавить("(ДействияЗадач.Выполнено = Истина)");
			
		ИначеЕсли Состояние = Справочники.СостоянияЗадач.Отменена Тогда
			ГруппаИЛИ.Добавить("(ДействияЗадач.ВидСостоянияУчастниковЗадач = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийУчастниковЗадач.Отменена))");
			
		ИначеЕсли Состояние = Справочники.СостоянияЗадач.Черновик Тогда
			ГруппаИЛИ.Добавить("(ДействияЗадач.ЭтоЧерновик = Истина)");
			
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный отбор по состоянию %1'"), Состояние);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ГруппаИЛИ.Количество() > 0 Тогда
		ЗапросСОтборами.Текст = ЗапросСОтборами.Текст
			+ Символы.ПС
			+ СтрШаблон("И (%1)", СтрСоединить(ГруппаИЛИ, " ИЛИ "));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
