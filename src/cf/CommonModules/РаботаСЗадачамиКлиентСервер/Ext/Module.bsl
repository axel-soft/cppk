////////////////////////////////////////////////////////////////////////////////
// Работа с задачами (клиент-сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает индекс картинки приложения, либо картинку, если она отсутствует в коллекции.
//
// Параметры:
//  Приложение - ОпределяемыйТип.ПриложениеЗадач.
//  РольПредмета - ПеречислениеСсылка.РолиПредметов.
//  РольФайла - СправочникСсылка.РолиФайлов.
//  ЭтоЗадача - Булево
// 
// Возвращаемое значение:
//  Число, Картинка - Индекс картинки приложения, либо картинка, если она отсутствует в коллекции.
//
Функция ИндексКартинкиПриложения(Приложение, РольПредмета = Неопределено, 
	РольФайла = Неопределено, ЭтоЗадача = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(РольФайла) И ТипЗнч(РольФайла) = Тип("СправочникСсылка.РолиФайлов") Тогда
		
		Возврат 2;
		
	ИначеЕсли РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной") Тогда
		
		Возврат БиблиотекаКартинок.ПредметОсновной16;
		
	ИначеЕсли РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Вспомогательный") Тогда
		
		Возврат БиблиотекаКартинок.ПредметВспомогательный16;
		
	ИначеЕсли РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") Тогда
		
		Возврат БиблиотекаКартинок.ПредметЗаполняемый16;
		
	ИначеЕсли ТипЗнч(Приложение) = Тип("ДокументСсылка.ВходящееПисьмо")
		Или ТипЗнч(Приложение) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		
		Возврат 32;
		
	ИначеЕсли ЭтоЗадача Тогда
		
		Возврат 10;
		
	Иначе
		
		Возврат БиблиотекаКартинок.ПредметВспомогательный16;
		
	КонецЕсли;
	
КонецФункции

// Формирует пустую структуру данных возврата на доработку.
//
// Возвращаемое значение:
//  Структура:
//   * ОбщаяПричинаВозврата - Строка.
//   * ПричинаВозврата - Строка.
//   * Срок - Дата.
//   * ОсобыеПричиныВозврата - Соответствие из КлючИЗначение.
//   * ДействияДляВозврата - Массив из ДокументСсылка.ДействиеЗадачи.
//   * УдаленныеДействия - Массив из ДокументСсылка.ДействиеЗадачи.
//   * ДобавленныеУчастники - Массив из ОпределяемыйТип.УчастникЗадач.
//   * Ответственный - ДокументСсылка.ДействиеЗадачи, ОпределяемыйТип.УчастникЗадач, Неопределено - Ответственный.
//
Функция НовыйДанныеВозвратаНаДоработку() Экспорт
	
	ДанныеВозвратаНаДоработку = Новый Структура;
	ДанныеВозвратаНаДоработку.Вставить("ОбщаяПричинаВозврата", "");
	ДанныеВозвратаНаДоработку.Вставить("ПричинаВозврата", "");
	ДанныеВозвратаНаДоработку.Вставить("Срок", Дата(1, 1, 1));
	ДанныеВозвратаНаДоработку.Вставить("ОсобыеПричиныВозврата", Новый Соответствие);
	ДанныеВозвратаНаДоработку.Вставить("ДействияДляВозврата", Новый Массив);
	ДанныеВозвратаНаДоработку.Вставить("УдаленныеДействия", Новый Массив);
	ДанныеВозвратаНаДоработку.Вставить("ДобавленныеУчастники", Новый Массив);
	ДанныеВозвратаНаДоработку.Вставить("Ответственный", Неопределено);
	
	Возврат ДанныеВозвратаНаДоработку;
	
КонецФункции

// Формирует пустую структуру данных выполнения.
//
// Возвращаемое значение:
//  Структура:
//   * ЗапретВыполнения - Булево - Задачу запрещено выполнять.
//   * ПричинаЗапретаВыполнения - Массив из ФорматированнаяСтрока - Текст предупреждения запрета выполнения.
//   * ПоказатьПредупреждение - Булево - Будет показано блокирующее предупреждение.
//   * Предупреждения - Массив из Строка - Тексты предупреждений.
//   * ПроверитьЗанятыеФайлы - Булево - Необходимо проверить занятые файлы.
//   * ФайлыДляПроверки - Массив из СправочникСсылка.Файлы
//   * ВыбратьИсполнителяЗадачи - Булево - Необходимо выбрать исполнителя задачи.
//   * ВернутьсяКЗадаче - Булево - Необходимо прервать выполнение и вернуться к задаче.
//   * ВыбратьПомощника - Булево - Необходимо выбрать помощника.
//   * ПредложитьЗакрытьПодзадачи - Булево - Требуется предложить закрыть подзадачи.
//   * КоличествоНезавершенныхПодзадач - Число - Количество незавершенных подзадач.
//   * ПредставлениеРезультата - Строка - Представление результата.
//   * ПараметрыУчетаВремени - Структура, Неопределено - Параметры учета времени.
//                             См. УчетВремени.ПроинициализироватьПараметрыУчетаВремени().
//   * ТребуетсяИнтерактивноеДействие - Булево - Требуется интерактивное действие пользователя перед выполнением задачи.
//   * ДополнительныеПараметры - Структура.
//   * ОповещенияПослеВыполнения - Массив Из Структура:
//      ** ИмяСобытия - Строка.
//      ** Параметр - Произвольный.
//      ** Источник - Произвольный.
//   * ВерсииДанныхРазличаются - Булево - Версии данных различаются.
//   * ЗадачиНельзяВыполнить - Массив из Структура:
//      ** Задача - ДокументСсылка.ДействиеЗадачи
//      ** Причина - Строка
//   * ЧислоЗадач - Число.
//   * ТребуетсяВвестиПричинуВозврата - Булево.
//   * ОбщаяПричинаВозврата - Строка.
//   * ПредупредитьОбОтсутствиях - Булево.
//   * РезультатПроверкиОтсутствий - см. ОтсутствияКлиентСервер.НовыйРезультатПроверкиОтсутствий.
//   * ЗадачаДляВозврата - ДокументСсылка.Задача.
//   * ПроизвольныйВопрос - Структура - Если надо задать вопрос перед действием, дополнительно должен быть взведен
//                                      флаг ТребуетсяИнтерактивноеДействие:
//      ** ЗадатьВопрос - Булево - Нужно ли задать вопрос.
//      ** Текст - Строка - Сам текст вопроса.
//      ** Кнопки - Массив Из Строка - Кнопки, сейчас пока 1 сценарий: кнопки "Да" и "Нет" (надо заполнять с НСтр) 
//                                     для завершения обработки при ознакомлении после отрицательного
//                                     согласования/утверждения/регистрации.
//
Функция НовыйДанныеВыполненияДействийЗадач() Экспорт
	
	ДанныеВыполнения = Новый Структура;
	ДанныеВыполнения.Вставить("ЗапретВыполнения", Ложь);
	ДанныеВыполнения.Вставить("ПричинаЗапретаВыполнения", Новый Массив);
	ДанныеВыполнения.Вставить("ПоказатьПредупреждение", Ложь);
	ДанныеВыполнения.Вставить("Предупреждения", Новый Массив);
	ДанныеВыполнения.Вставить("ПроверитьЗанятыеФайлы", Ложь);
	ДанныеВыполнения.Вставить("ФайлыДляПроверки", Новый Массив);
	ДанныеВыполнения.Вставить("ВыбратьИсполнителяЗадачи", Ложь);
	ДанныеВыполнения.Вставить("ВернутьсяКЗадаче", Ложь);
	ДанныеВыполнения.Вставить("ВыбратьПомощника", Ложь);
	ДанныеВыполнения.Вставить("ПредложитьЗакрытьПодзадачи", Ложь);
	ДанныеВыполнения.Вставить("КоличествоНезавершенныхПодзадач", 0);
	ДанныеВыполнения.Вставить("ПредставлениеРезультата", "");
	ДанныеВыполнения.Вставить("ПараметрыУчетаВремени", Неопределено);
	ДанныеВыполнения.Вставить("ТребуетсяИнтерактивноеДействие", Ложь);
	ДанныеВыполнения.Вставить("ДополнительныеПараметры", Новый Структура);
	ДанныеВыполнения.Вставить("ОповещенияПослеВыполнения", Новый Массив);
	ДанныеВыполнения.Вставить("ВерсииДанныхРазличаются", Ложь);
	ДанныеВыполнения.Вставить("ЗадачиНельзяВыполнить", Новый Массив);
	ДанныеВыполнения.Вставить("ЧислоЗадач", 0);
	ДанныеВыполнения.Вставить("ТребуетсяВвестиПричинуВозврата", Ложь);
	ДанныеВыполнения.Вставить("ОбщаяПричинаВозврата", "");
	ДанныеВыполнения.Вставить("ЗадачаДляВозврата", ПредопределенноеЗначение("Документ.Задача.ПустаяСсылка"));
	ДанныеВыполнения.Вставить("ПредупредитьОбОтсутствиях", Ложь);
	ДанныеВыполнения.Вставить("РезультатПроверкиОтсутствий", ОтсутствияКлиентСервер.НовыйРезультатПроверкиОтсутствий());
	ДанныеВыполнения.Вставить("ПредупредитьОЗаполненииДополнительныхРеквизитов", Ложь);
	
	ПроизвольныйВопрос = Новый Структура;
	ПроизвольныйВопрос.Вставить("ЗадатьВопрос", Ложь);
	ПроизвольныйВопрос.Вставить("Текст", "");
	ПроизвольныйВопрос.Вставить("Кнопки", Новый Массив);
	ДанныеВыполнения.Вставить("ПроизвольныйВопрос", ПроизвольныйВопрос);
	
	Возврат ДанныеВыполнения;
	
КонецФункции

// Формирует структуру данных соисполнителей.
// 
// Возвращаемое значение:
//  Структура:
//   * Представление - Строка
//   * ПредставлениеОбщегоРезультата - Строка
//   * ХарактерОбщегоРезультата - ПеречислениеСсылка.ХарактерыРезультатов
//   * Этапы - Массив из см. РаботаСЗадачамиКлиентСервер.НовыйДанныеЭтапа
//   * СоисполнителиПоЭтапам - Соответствие из КлючИЗначение:
//      ** Ключ - УникальныйИдентификатор - Этап.
//      ** Значение - Массив из см. РаботаСЗадачамиКлиентСервер.НовыйДанныеСоисполнителя
//
Функция НовыйДанныеСоисполнителей() Экспорт
	
	ДанныеСоисполнителей = Новый Структура;
	ДанныеСоисполнителей.Вставить("Представление", "");
	ДанныеСоисполнителей.Вставить("ПредставлениеОбщегоРезультата", "");
	ДанныеСоисполнителей.Вставить("ХарактерОбщегоРезультата", 
		ПредопределенноеЗначение("Перечисление.ХарактерыРезультатов.ПустаяСсылка"));
	ДанныеСоисполнителей.Вставить("Этапы", Новый Массив);
	ДанныеСоисполнителей.Вставить("СоисполнителиПоЭтапам", Новый Соответствие);
	
	Возврат ДанныеСоисполнителей;
	
КонецФункции

// Формирует структуру данных соисполнителя.
// 
// Возвращаемое значение:
//  Структура:
//   * КлючИсполнителя - УникальныйИдентификатор
//                     - Неопределено
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   * Представление - Строка
//   * РезультатДействия - СправочникСсылка.РезультатыДействийЗадач
//   * ХарактерРезультата - ПеречислениеСсылка.ХарактерыРезультатов
//   * ИндексКартинкиСостояния - Число
//   * ЕстьПриложения - Булево
//   * ЭтоОтветственный - Булево
//   * ДанныеПодчиненных - Массив из см. РаботаСЗадачамиКлиентСервер.НовыйДанныеСоисполнителя
//
Функция НовыйДанныеСоисполнителя() Экспорт
	
	ДанныеСоисполнителей = Новый Структура;
	ДанныеСоисполнителей.Вставить("КлючИсполнителя", Неопределено);
	ДанныеСоисполнителей.Вставить("ДействиеЗадачи",  ПредопределенноеЗначение("Документ.ДействиеЗадачи.ПустаяСсылка"));
	ДанныеСоисполнителей.Вставить("Представление", "");
	ДанныеСоисполнителей.Вставить("РезультатДействия",
		ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.ПустаяСсылка"));
	ДанныеСоисполнителей.Вставить("ХарактерРезультата", 
		ПредопределенноеЗначение("Перечисление.ХарактерыРезультатов.ПустаяСсылка"));
	ДанныеСоисполнителей.Вставить("ИндексКартинкиСостояния", -1);
	ДанныеСоисполнителей.Вставить("ЕстьПриложения", Ложь);
	ДанныеСоисполнителей.Вставить("ЭтоОтветственный", Ложь);
	ДанныеСоисполнителей.Вставить("ДанныеПодчиненных", Новый Массив);
	
	Возврат ДанныеСоисполнителей;
	
КонецФункции

// Формирует структуру данных соисполнителя.
// 
// Возвращаемое значение:
//  Структура:
//   * Этап - УникальныйИдентификатор
//   * Представление - Строка
//   * ИндексКартинкиСостояния - Число
//   * ЭтоИсполнитель - Булево
//
Функция НовыйДанныеЭтапа() Экспорт
	
	ДанныеСоисполнителей = Новый Структура;
	ДанныеСоисполнителей.Вставить("Этап", УникальныйИдентификаторПустой());
	ДанныеСоисполнителей.Вставить("Представление", "");
	ДанныеСоисполнителей.Вставить("ИндексКартинкиСостояния", -1);
	ДанныеСоисполнителей.Вставить("ЭтоИсполнитель", Ложь);
	
	Возврат ДанныеСоисполнителей;
	
КонецФункции

// Формирует пустую структура параметров выполнения действий задач.
// 
// Возвращаемое значение:
//  Структура:
//   * ЗакрыватьПодзадачи - Булево
//                        - Неопределено
//   * ЗанятыеФайлыПроверены - Булево
//   * ОтсутствияПроверены - Булево
//   * ФактическиеИсполнителиПоДействиям - Соответствие Из КлючИЗначение:
//      ** Ключ - ДокументСсылка.ДействиеЗадачи
//      ** Значение - СправочникСсылка.Сотрудники
//   * ОснованияФактИсполнителейПоДействиям - Соответствие Из КлючИЗначение:
//      ** Ключ - ДокументСсылка.ДействиеЗадачи
//      ** Значение - СправочникСсылка.ЗамещающиеИПомощники
//                  -Неопределено
//   * ДополнительныеПараметры - Структура
//   * ФактическиеИсполнителиПолные - Соответствие Из КлючИЗначение:
//      ** Ключ - ДокументСсылка.ДействиеЗадачи
//      ** Значение - СправочникСсылка.ФактическиеИсполнители
//   * ВыбранныйФактическийИсполнитель - Структура
//                                     - Неопределено
//   * ВыполнитьОтИмени - СправочникСсылка.Пользователи
//                      - Неопределено
//   * ДанныеВозвратаНаДоработку - Неопределено
//                               - см. РаботаСЗадачамиКлиентСервер.НовыйДанныеВозвратаНаДоработку
//   * ДанныеФормыВладельца - Структура:
//      ** ИмяФормы - Строка
//      ** ИдентификаторФормы - УникальныйИдентификатор
//   * ОтветНаПроизвольныйВопрос - Строка
//   * ВерсииДанных - Соответствие из КлючИЗначение
//   * ОбрабатывающийРезолюцию - Неопределено
// 
Функция НовыйПараметрыВыполненияДействийЗадач() Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ЗакрыватьПодзадачи", Неопределено);
	ПараметрыВыполнения.Вставить("ЗанятыеФайлыПроверены", Ложь);
	ПараметрыВыполнения.Вставить("ФактическиеИсполнителиПоДействиям", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ОснованияФактИсполнителейПоДействиям", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ДополнительныеПараметры", Новый Структура);
	ПараметрыВыполнения.Вставить("ВерсииДанных", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ФактическиеИсполнителиПолные", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ВыбранныйФактическийИсполнитель", Неопределено);
	ПараметрыВыполнения.Вставить("ОбрабатывающийРезолюцию", Неопределено);
	ПараметрыВыполнения.Вставить("ВыполнитьОтИмени", Неопределено);
	ПараметрыВыполнения.Вставить("ОтсутствияПроверены", Ложь);
	ПараметрыВыполнения.Вставить("ОтветНаПроизвольныйВопрос", "");
	ПараметрыВыполнения.Вставить("ДанныеВозвратаНаДоработку", Неопределено);
	
	ДанныеФормыВладельца = Новый Структура;
	ДанныеФормыВладельца.Вставить("ИмяФормы", "");
	ДанныеФормыВладельца.Вставить("ИдентификаторФормы", Новый УникальныйИдентификатор());
	ПараметрыВыполнения.Вставить("ДанныеФормыВладельца", ДанныеФормыВладельца);
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

// Формирует структуру параметров обновления дерева приложений.
// 
// Возвращаемое значение:
//  Структура:
//   * РеквизитДерева - ДанныеФормыДерево
//                    - Неопределено
//   * ЭлементДерева - ТаблицаФормы
//                   - Неопределено
//   * Задача - ДокументСсылка.Задача
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//  
Функция НовыйПараметрыОбновленияДереваПриложений() Экспорт
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("РеквизитДерева", Неопределено);
	ПараметрыОбновления.Вставить("ЭлементДерева", Неопределено);
	ПараметрыОбновления.Вставить("Задача", ПредопределенноеЗначение("Документ.Задача.ПустаяСсылка"));
	ПараметрыОбновления.Вставить("ДействиеЗадачи", ПредопределенноеЗначение("Документ.ДействиеЗадачи.ПустаяСсылка"));
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Формирует пустую структуру для использования в функциях, изменяющих задачи.
// См. РаботаСЗадачами.СохранитьРезультатДействия
// 
// Возвращаемое значение:
//  Структура - Структура для заполнения:
//   * Успешно - Булево.
//   * ВерсииДанныхРазличаются - Булево.
//   * НоваяВерсияДанных - Строка.
//   * НужноВыбратьФактическогоИсполнителя - Булево.
//
Функция НовыйРезультатСохраненияЗадачи() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Истина);
	Результат.Вставить("ВерсииДанныхРазличаются", Ложь);
	Результат.Вставить("НоваяВерсияДанных", "");
	Результат.Вставить("НужноВыбратьФактическогоИсполнителя", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Формирует новый результат направления на исполнение.
// 
// Возвращаемое значение:
//  Структура:
//   * НаправленаНаИсполнение - Булево.
//   * ТекстОповещения - Строка.
//   * ВышестоящаяЗадача - ДокументСсылка.Задача.
//   * РезультатПроверкиОтсутствий - см. ОтсутствияКлиентСервер.НовыйРезультатПроверкиОтсутствий.
//   * ТребуетсяИнтерактивноеДействие - Булево.
//   * ТребуетсяНаправитьНаИсполнение - Булево.
//   * ТребуетсяПредупредитьОбОтсутствиях - Булево.
//   * ПараметрыНаправленияНаИсполнение - см. РаботаСЗадачамиКлиентСервер.НовыйПараметрыНаправленияНаИсполнение.
//   * ЗапущенаДлительнаяОперация - Булево.
//   * ДлительнаяОперация - Неопределено, Структура - см. ДлительныеОперации.ВыполнитьФункцию.
// 
Функция НовыйРезультатНаправленияНаИсполнение() Экспорт
	
	РезультатНаправленияНаИсполнение = Новый Структура;
	РезультатНаправленияНаИсполнение.Вставить("НаправленаНаИсполнение", Ложь);
	РезультатНаправленияНаИсполнение.Вставить("ТекстОповещения", "");
	РезультатНаправленияНаИсполнение.Вставить("ВышестоящаяЗадача",
		ПредопределенноеЗначение("Документ.Задача.ПустаяСсылка"));
		
	РезультатНаправленияНаИсполнение.Вставить("ТребуетсяИнтерактивноеДействие", Ложь);
	
	РезультатНаправленияНаИсполнение.Вставить("ТребуетсяПредупредитьОбОтсутствиях", Ложь);
	РезультатНаправленияНаИсполнение.Вставить("РезультатПроверкиОтсутствий",
		ОтсутствияКлиентСервер.НовыйРезультатПроверкиОтсутствий());
	
	РезультатНаправленияНаИсполнение.Вставить("ТребуетсяНаправитьНаИсполнение", Ложь);
	РезультатНаправленияНаИсполнение.Вставить("ПараметрыНаправленияНаИсполнение",
		НовыйПараметрыНаправленияНаИсполнение());
	
	РезультатНаправленияНаИсполнение.Вставить("ЗапущенаДлительнаяОперация", Ложь);
	РезультатНаправленияНаИсполнение.Вставить("ДлительнаяОперация", Неопределено);
	
	Возврат РезультатНаправленияНаИсполнение;
	
КонецФункции

// Формирует новые параметры направления на исполнение.
// 
// Возвращаемое значение:
//  Структура:
//   * Задача - ДокументСсылка.Задача
//   * ОтсутствияПроверены - Булево
//   * ЭтоИнтерактивноеДействие - Булево
//   * ИдентификаторФормы - УникальныйИдентификатор
//   * ЗапуститьВФоне - Неопределено
//                    - Булево
// 
Функция НовыйПараметрыНаправленияНаИсполнение() Экспорт
	
	РезультатНаправленияНаИсполнение = Новый Структура;
	РезультатНаправленияНаИсполнение.Вставить("Задача",
		ПредопределенноеЗначение("Документ.Задача.ПустаяСсылка"));
	РезультатНаправленияНаИсполнение.Вставить("ОтсутствияПроверены", Ложь);
	РезультатНаправленияНаИсполнение.Вставить("ЭтоИнтерактивноеДействие", Ложь);
	РезультатНаправленияНаИсполнение.Вставить("ИдентификаторФормы", УникальныйИдентификаторПустой());
	РезультатНаправленияНаИсполнение.Вставить("ЗапуститьВФоне", Неопределено);
	
	Возврат РезультатНаправленияНаИсполнение;
	
КонецФункции

// Определяет, что приложение допустимо без прав.
// 
// Параметры:
//  Приложение - ОпределяемыйТип.ПриложениеЗадач.
// 
// Возвращаемое значение:
//  Булево - Это приложение допустимо без прав.
// 
//  
Функция ЭтоПриложениеБезПрав(Приложение) Экспорт
	
	ТипПриложения = ТипЗнч(Приложение);
	ТипыПриложенийБезПрав = ИнтеграцияЗадачКлиентСервер.ТипыПриложенийБезПрав();
	
	ЭтоПриложениеБезПрав = ТипыПриложенийБезПрав.Найти(ТипПриложения) <> Неопределено;
	
	Возврат ЭтоПриложениеБезПрав;
	
КонецФункции

// Проверяет, является ли переданное значение ссылкой на справочник Полные роли
// 
// Параметры:
//  Участник - Произвольный
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоПолнаяРоль(Участник) Экспорт
	Возврат ТипЗнч(Участник) = Тип("СправочникСсылка.ПолныеРоли");
КонецФункции

// Возвращает описание исполнителя, исполнителем задачи может быть сотрудник или роль.
// 
// Возвращаемое значение:
//  Структура - Новый данные исполнителя:
//   * Исполнитель - СправочникСсылка.Сотрудники
//   * РольИсполнителя - СправочникСсылка.ПолныеРоли
//   * ВладелецРоли - СправочникСсылка.РолиИсполнителей
//   * ОсновнойОбъектАдресации - Неопределено
//   * ДополнительныйОбъектАдресации - Неопределено
//
Функция НовыйДанныеИсполнителя() Экспорт
	
	Структура = Новый Структура;
	
	Структура.Вставить("Исполнитель", ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
	Структура.Вставить("РольИсполнителя", ПредопределенноеЗначение("Справочник.ПолныеРоли.ПустаяСсылка"));
	Структура.Вставить("ВладелецРоли", ПредопределенноеЗначение("Справочник.РолиИсполнителей.ПустаяСсылка"));
	Структура.Вставить("ОсновнойОбъектАдресации", Неопределено);
	Структура.Вставить("ДополнительныйОбъектАдресации", Неопределено);
	
	Возврат Структура;
	
КонецФункции

// Формирует новые данные назначения.
// 
// Возвращаемое значение:
//  Структура:
//   * Важность - ПеречислениеСсылка.ВариантыВажностиОбъектов
//   * ВариантИерархии - ПеречислениеСсылка.ВариантыИерархииЗадач
//   * ВидДействияОбработки - СправочникСсылка.ВидыДействий
//   * ВидПриложения - см. ОпределяемыйТип.ВидПриложенияЗадач
//   * ГрифДоступа - СправочникСсылка.ГрифыДоступа
//   * ДополнительноеУсловие - СправочникСсылка.АлгоритмыПроверки
//   * Кому - см. ОпределяемыйТип.КонтейнерыСотрудников
//   * Организация - СправочникСсылка.Организации
//   * Подразделение - СправочникСсылка.СтруктураПредприятия
//   * Тематика - СправочникСсылка.ТематикиДокументов
//   * ТипПриложения - ПеречислениеСсылка.ТипыПриложенийЗадач
//   * ФормаДокумента - ПеречислениеСсылка.ВариантыФормДокументов
//   * ФункцияУчастникаДействия - см. ОпределяемыйТип.ФункцииУчастниковДействий
// 
Функция НовыеДанныеНазначения() Экспорт
	
	ДанныеНазначения = Новый Структура;
	ДанныеНазначения.Вставить(
		"Важность",
		ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"ВариантИерархии",
		ПредопределенноеЗначение("Перечисление.ВариантыИерархииЗадач.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"ВидДействияОбработки",
		ПредопределенноеЗначение("Справочник.ВидыДействий.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"ВидПриложения",
		ПредопределенноеЗначение("Справочник.ВидыДокументов.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"ГрифДоступа",
		ПредопределенноеЗначение("Справочник.ГрифыДоступа.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"ДополнительноеУсловие",
		ПредопределенноеЗначение("Справочник.АлгоритмыПроверки.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"Кому",
		ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"Организация",
		ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"Подразделение",
		ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"Тематика",
		ПредопределенноеЗначение("Справочник.ТематикиДокументов.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"ТипПриложения",
		ПредопределенноеЗначение("Перечисление.ТипыПриложенийЗадач.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"ФормаДокумента",
		ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.ПустаяСсылка"));
	ДанныеНазначения.Вставить(
		"ФункцияУчастникаДействия",
		ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ПустаяСсылка"));
	
	Возврат ДанныеНазначения;
	
КонецФункции

// Формирует данные шаблона задачи.
// 
// Возвращаемое значение:
//  Структура:
//   * Шаблон - СправочникСсылка.ШаблоныЗадач
//   * Представление - Строка
// 
Функция НовыеДанныеШаблона() Экспорт
	
	ДанныеШаблона = Новый Структура;
	ДанныеШаблона.Вставить("Шаблон",
		ПредопределенноеЗначение("Справочник.ШаблоныЗадач.ПустаяСсылка"));
	ДанныеШаблона.Вставить("Представление", "");
	
	Возврат ДанныеШаблона;
	
КонецФункции

// Новые данные перенаправления.
// 
// Возвращаемое значение:
//  Структура - Новые данные перенаправления:
//   * ПредложитьЗакрытьПодзадачи - Булево 
//   * КоличествоНезавершенныхПодзадач - Число
//   * ТребуетсяИнтерактивноеДействие - Булево 
// 
Функция НовыеДанныеПеренаправления() Экспорт
	
	ДанныеПеренаправления = Новый Структура;
	ДанныеПеренаправления.Вставить("ПредложитьЗакрытьПодзадачи", Ложь);
	ДанныеПеренаправления.Вставить("КоличествоНезавершенныхПодзадач", 0);
	ДанныеПеренаправления.Вставить("ТребуетсяИнтерактивноеДействие", Ложь);
	
	Возврат ДанныеПеренаправления;
	
КонецФункции

// Обновляет дерево приложений на форме.
//
// Параметры:
//  РеквизитДерева - ДанныеФормыДерево
//  ЭлементДерева - ТаблицаФормы
//  ДанныеДереваПриложений - Массив из см. РаботаСЗадачами.НоваяСтрокаДереваПриложений
//
Процедура ОбновитьДеревоПриложений(РеквизитДерева, ЭлементДерева, ДанныеДереваПриложений) Экспорт
	
	СтрокиДереваПоКлючам = ОбновитьДерево(РеквизитДерева, ЭлементДерева, ДанныеДереваПриложений);
	
	// Сортируем строку "Задача" по представлению.
	СтрокаЗадача = СтрокиДереваПоКлючам[
		ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Задача")];
	Если СтрокаЗадача <> Неопределено Тогда
		
		СтрокиПодЗадачей = ПолучитьСтроки(СтрокаЗадача);
		
		СписокСортировки = Новый СписокЗначений;
		Для Каждого СтрокаПодЗадачей Из СтрокиПодЗадачей Цикл
			СписокСортировки.Добавить(
				СтрокаПодЗадачей,
				СтрокаПодЗадачей.ПредставлениеПриложения);
		КонецЦикла;
		
		СписокСортировки.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		СортированныйИндексЭлемента = 0;
		Для Каждого СтрокаДереваПриложений Из СписокСортировки.ВыгрузитьЗначения() Цикл
			
			ТекущийИндекс = СтрокиПодЗадачей.Индекс(СтрокаДереваПриложений);
			Если СортированныйИндексЭлемента <> ТекущийИндекс Тогда
				СтрокиПодЗадачей.Сдвинуть(
					ТекущийИндекс,
					СортированныйИндексЭлемента - ТекущийИндекс);
			КонецЕсли;
			
			СортированныйИндексЭлемента = СортированныйИндексЭлемента + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Получить строки элемента дерева (данных формы дерева, дерева значений, строки дерева значений).
// 
// Параметры:
//  ЭлементДерева - ДанныеФормыДерево
//                - ДеревоЗначений
//                - СтрокаДереваЗначений
// 
// Возвращаемое значение:
//  ДанныеФормыКоллекцияЭлементовДерева
// 
Функция ПолучитьСтроки(ЭлементДерева) Экспорт

#Если Не ВнешнееСоединение Тогда
	
	Если ТипЗнч(ЭлементДерева) = Тип("ДанныеФормыДерево")
		Или ТипЗнч(ЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат ЭлементДерева.ПолучитьЭлементы();
	КонецЕсли;
	
	#Если Не ТонкийКлиент И Не ВебКлиент И Не МобильныйКлиент Тогда
	Если ТипЗнч(ЭлементДерева) = Тип("ДеревоЗначений")
		Или ТипЗнч(ЭлементДерева) = Тип("СтрокаДереваЗначений") Тогда
		Возврат ЭлементДерева.Строки;
	КонецЕсли;
	#КонецЕсли
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод ПолучитьСтроки не доступен во внешнем соединении.'");
#КонецЕсли
	
КонецФункции

// Удаляет невостребованные строки.
// 
// Параметры:
//  ДеревоПриложений - ДанныеФормыДерево
//                   - ДеревоЗначений
//  СтрокиДереваПоРодителям - Соответствие из КлючИЗначение
//  ВостребованныеСтрокиПоРодителям - Соответствие из КлючИЗначение
// 
Процедура УдалитьНевостребованныеСтрокиПоРодителям(ДеревоПриложений, СтрокиДереваПоРодителям, ВостребованныеСтрокиПоРодителям) Экспорт
	
	// Все строки дерева в обратном порядке нужны для обхода ошибки платформы 60018492 в веб-клиенте.
	ВсеСтрокиДереваВОбратномПорядке = Новый Массив;
	
	СтрокиКОбходуВсегоДерева = Новый Массив;
	Для Каждого СтрокаДереваПриложений Из ПолучитьСтроки(ДеревоПриложений) Цикл
		СтрокиКОбходуВсегоДерева.Добавить(СтрокаДереваПриложений);
	КонецЦикла;
	
	ИндексКОбходу = 0;
	ЕстьДанныеКОбходу = СтрокиКОбходуВсегоДерева.Количество() > ИндексКОбходу;
	Пока ЕстьДанныеКОбходу Цикл
		
		ТекущаяСтрока = СтрокиКОбходуВсегоДерева[ИндексКОбходу];
		
		ВсеСтрокиДереваВОбратномПорядке.Вставить(0, ТекущаяСтрока);
		
		Для Каждого Строка Из ПолучитьСтроки(ТекущаяСтрока) Цикл
			СтрокиКОбходуВсегоДерева.Добавить(Строка);
		КонецЦикла;
		
		ИндексКОбходу = ИндексКОбходу + 1;
		ЕстьДанныеКОбходу = СтрокиКОбходуВсегоДерева.Количество() > ИндексКОбходу;
		
	КонецЦикла;
	
	Для Каждого СтрокаДереваПриложений Из ВсеСтрокиДереваВОбратномПорядке Цикл
		
		СтрокаРодителя = ПолучитьРодителя(СтрокаДереваПриложений);
		
		Если СтрокаРодителя = Неопределено Тогда
			КлючРодителя = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ПустаяСсылка");
			СтрокиКОбработке = ПолучитьСтроки(ДеревоПриложений);
		Иначе
			КлючРодителя = СтрокаРодителя.КлючСтроки;
			СтрокиКОбработке = ПолучитьСтроки(СтрокаРодителя);
		КонецЕсли;
		
		ВостребованныеСтроки = ВостребованныеСтрокиПоРодителям[КлючРодителя];
		Если ВостребованныеСтроки = Неопределено Тогда
			ВостребованныеСтроки = Новый Соответствие;
		КонецЕсли;
		
		Если ВостребованныеСтроки[СтрокаДереваПриложений.КлючСтроки] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		// Возможно, родители уже удалили ранее - в таком случае не обрабатываем.
		Если СтрокиКОбработке.Индекс(СтрокаДереваПриложений) = -1 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиКОбработке.Удалить(СтрокаДереваПриложений);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пустое описание области действия задачи.
// 
// Возвращаемое значение:
//  Структура - Описание области действия задачи:
//   * РезультатДействияТекстом - ПолеФормы - Поле, содержащее результат действия текстом.
//                              - Неопределено
//   * РезультатДействияТекстомКнопкаВыбора - ДекорацияФормы
//                                          - Неопределено
//   * ПриложенияРезультата - ТаблицаФормы - Таблица, содержащая приложения результата действия.
//                          - Неопределено
//   * ГруппаКомандыПриложенийРезультата - ГруппаФормы - Группа, содержащая команды добавления приложений результата.
//                                       - Неопределено
//   * ВыбратьШаблонДляВыполненияЗадачи - КнопкаФормы - Кнопка, выполняющая задачу по выбранному шаблону.
//                                      - Неопределено
//   * ОтменитьВыполнение - КнопкаФормы - Кнопка, выполняющая отмену выполнения.
//                        - Неопределено
//   * ВзятьВРаботу - КнопкаФормы - Кнопка, позволяющая взять задачу в работу.
//                  - Неопределено
//   * ОтменитьВзятиеВРаботу - КнопкаФормы - Кнопка, позволяющая отменить взятие задачи в работу.
//                           - Неопределено
//   * ПодменюФлаги - ГруппаФормы - Другие кнопки для работы с задачей.
//                  - Неопределено
//   * Перенаправить - КнопкаФормы - Кнопка, позволяющая перенаправить задачу.
//                   - Неопределено
//   * ДругиеКнопки - Массив из КнопкаФормы - Другие кнопки для работы с задачей.
//   * ГруппаОбъектИзДругойСистемы - ГруппаФормы - Информационная надпись объект из другой системы.
//                                 - Неопределено
//   * ДокументЗадачаСоздатьПодзадачу - КнопкаФормы - Команда создания подзадачи в командной панели.
//                                    - Неопределено
//   * СоздатьПодзадачу - КнопкаФормы - Команда создания подзадачи в области подзадачи.
//                      - Неопределено
//   * СогласоватьПереносСрока - КнопкаФормы - Команда переноса срока.
//                             - Неопределено
//   * ФормаДобавитьУчастников - КнопкаФормы
//                             - Неопределено
//   * КомандаДобавитьУчастников - КнопкаФормы
//                               - Неопределено
//   * СтрокаПриложенияРезультата1 - ГруппаФормы
//                                 - Неопределено
//   * ПриложенияРезультатаПриложение1 - ПолеФормы
//                                     - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата1 - КнопкаФормы
//                                                                             - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить1 - КнопкаФормы
//                                                         - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1 - КнопкаФормы
//                                                                             - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1 - КнопкаФормы
//                                                                              - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1 - КнопкаФормы
//                                                                                - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1 - КнопкаФормы
//                                                                                      - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата1 - КнопкаФормы
//                                                                            - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата1 - КнопкаФормы
//                                                                              - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить1 - КнопкаФормы
//                                                          - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1 - КнопкаФормы
//                                                                              - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1 - КнопкаФормы
//                                                                               - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1 - КнопкаФормы
//                                                                                 - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1 - КнопкаФормы
//                                                                             - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата1 - КнопкаФормы
//                                                                             - Неопределено
//   * СтрокаПриложенияРезультата2 - ГруппаФормы
//                                 - Неопределено
//   * ПриложенияРезультатаПриложение2 - ПолеФормы
//                                     - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата2 - КнопкаФормы
//                                                                             - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить2 - КнопкаФормы
//                                                         - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2 - КнопкаФормы
//                                                                             - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2 - КнопкаФормы
//                                                                              - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2 - КнопкаФормы
//                                                                                - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2 - КнопкаФормы
//                                                                                      - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата2 - КнопкаФормы
//                                                                            - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата2 - КнопкаФормы
//                                                                              - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить2 - КнопкаФормы
//                                                          - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2 - КнопкаФормы
//                                                                              - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2 - КнопкаФормы
//                                                                               - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2 - КнопкаФормы
//                                                                                 - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2 - КнопкаФормы
//                                                                             - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата2 - КнопкаФормы
//                                                                             - Неопределено
//   * СтрокаПриложенияРезультата3 - ГруппаФормы
//                                 - Неопределено
//   * ПриложенияРезультатаПриложение3 - ПолеФормы
//                                     - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата3 - КнопкаФормы
//                                                                             - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить3 - КнопкаФормы
//                                                         - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3 - КнопкаФормы
//                                                                             - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3 - КнопкаФормы
//                                                                              - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3 - КнопкаФормы
//                                                                                - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3 - КнопкаФормы
//                                                                                      - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата3 - КнопкаФормы
//                                                                            - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата3 - КнопкаФормы
//                                                                              - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить3 - КнопкаФормы
//                                                          - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3 - КнопкаФормы
//                                                                              - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3 - КнопкаФормы
//                                                                               - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3 - КнопкаФормы
//                                                                                 - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3 - КнопкаФормы
//                                                                             - Неопределено
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата3 - КнопкаФормы
//                                                                             - Неопределено
//   * ГруппаИнформацияПроОтрицательные - ГруппаФормы
//                                      - Неопределено
//   * МаксимальнаяДлинаОбщая - Число
//
Функция НоваяОбластьДействия() Экспорт
	
	ОбластьДействия = Новый Структура;
	ОбластьДействия.Вставить("РезультатДействияТекстом", Неопределено);
	ОбластьДействия.Вставить("РезультатДействияТекстомКнопкаВыбора", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультата", Неопределено);
	ОбластьДействия.Вставить("ГруппаКомандыПриложенийРезультата", Неопределено);
	ОбластьДействия.Вставить("ВыбратьШаблонДляВыполненияЗадачи", Неопределено);
	ОбластьДействия.Вставить("ОтменитьВыполнение", Неопределено);
	ОбластьДействия.Вставить("ГруппаИнформацияПроОтрицательные", Неопределено);
	ОбластьДействия.Вставить("ВзятьВРаботу", Неопределено);
	ОбластьДействия.Вставить("МаксимальнаяДлинаОбщая", 0);
	ОбластьДействия.Вставить("ОтменитьВзятиеВРаботу", Неопределено);
	ОбластьДействия.Вставить("ПодменюФлаги", Неопределено);
	ОбластьДействия.Вставить("Перенаправить", Неопределено);
	ОбластьДействия.Вставить("ДругиеКнопки", Новый Массив);
	ОбластьДействия.Вставить("ДокументЗадачаСоздатьПодзадачу", Неопределено);
	ОбластьДействия.Вставить("СоздатьПодзадачу", Неопределено);
	ОбластьДействия.Вставить("СогласоватьПереносСрока", Неопределено);
	ОбластьДействия.Вставить("ФормаДобавитьУчастников", Неопределено);
	ОбластьДействия.Вставить("КомандаДобавитьУчастников", Неопределено);
	ОбластьДействия.Вставить("ГруппаОбъектИзДругойСистемы", Неопределено);
	ОбластьДействия.Вставить("СтрокаПриложенияРезультата1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаПриложение1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1",
		Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1",
		Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1",
		Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата1", Неопределено);
	ОбластьДействия.Вставить("СтрокаПриложенияРезультата2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаПриложение2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2",
		Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2",
		Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2",
		Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата2", Неопределено);
	ОбластьДействия.Вставить("СтрокаПриложенияРезультата3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаПриложение3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3",
		Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3",
		Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3",
		Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3", Неопределено);
	ОбластьДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата3", Неопределено);
	
	Возврат ОбластьДействия;
	
КонецФункции

// Обновляет область действия задачи.
//
// Параметры:
//   ОбластьДействия - см. РаботаСЗадачамиКлиентСервер.НоваяОбластьДействия
//   ДанныеОбластиДействия - см. РаботаСЗадачами.НовыеДанныеОбластиДействия
//
// Возвращаемое значение:
//   Структура - возвращаемые значения реквизитов области:
//     * ДанныеГрупповыхДействий - Массив из Структура - данные групповых действий:
//       ** Результат - СправочникСсылка.ВидыДействий
//       ** Задачи - Массив из ДокументСсылка.ДействиеЗадачи
//       ** ВерсииДанных - Соответствие из КлючИЗначение:
//         *** Ключ - ДокументСсылка.ДействиеЗадачи
//         *** Значение - Строка
//     * РезультатДействияТекстом - Строка - результат действия текстом.
//     * ПриложенияРезультата - Массив из Структура
//     * ВерсияДанных - Строка - версия данных первой задачи из выделенных. Используется для режима одной задачи.
//     * ШаблоныДляВыбора - СписокЗначений из СправочникСсылка.ШаблоныТекстов
//     * ДействиеОбработки - см. ОпределяемыйТип.Действия
//     * ОсобаяОбработкаОткрытияФайлов - Булево
//     * ПриложенияРезультатаИзменятьСоставСтрок - Булево
//     * ТекущийИсточникДействия - см. ОпределяемыйТип.ИсточникДействийЗадач
//                               - Неопределено
//
Функция ОбновитьОбластьДействия(ОбластьДействия, ДанныеОбластиДействия) Экспорт
	
	ДанныеРезультатаДействияТекстом = ДанныеОбластиДействия.ДанныеРезультатаДействияТекстом;
	ДанныеВариантовВыполненияЗадачи = ДанныеОбластиДействия.ДанныеВариантовВыполненияЗадачи;
	
#Если Не ВнешнееСоединение Тогда
	
	// Объекты из другой системы.
	ОбластьДействия.ГруппаОбъектИзДругойСистемы.Видимость = ДанныеОбластиДействия.ГруппаОбъектИзДругойСистемыВидимость;
	
	// Результат действия текстом.
	ОбластьДействия.РезультатДействияТекстомКнопкаВыбора.Видимость =
		ДанныеОбластиДействия.РезультатДействияТекстомКнопкаВыбораВидимость;
	ОбластьДействия.ГруппаКомандыПриложенийРезультата.Видимость =
		ДанныеОбластиДействия.ГруппаКомандыПриложенийРезультатаВидимость;
	ОбластьДействия.РезультатДействияТекстом.Видимость =
		ДанныеРезультатаДействияТекстом.РезультатДействияТекстомВидимость;
	ОбластьДействия.РезультатДействияТекстом.ТолькоПросмотр =
		ДанныеРезультатаДействияТекстом.РезультатДействияТекстомТолькоПросмотр;
	ОбластьДействия.ВзятьВРаботу.Доступность = ДанныеРезультатаДействияТекстом.ВзятьВРаботуДоступность;
	Если ОбластьДействия.ДокументЗадачаСоздатьПодзадачу <> Неопределено Тогда
		ОбластьДействия.ДокументЗадачаСоздатьПодзадачу.Доступность =
			ДанныеРезультатаДействияТекстом.ДокументЗадачаСоздатьПодзадачуДоступность;
	КонецЕсли;
	Если ОбластьДействия.СоздатьПодзадачу <> Неопределено Тогда
		ОбластьДействия.СоздатьПодзадачу.Доступность =
			ДанныеРезультатаДействияТекстом.СоздатьПодзадачуДоступность;
	КонецЕсли;
	Если ОбластьДействия.СогласоватьПереносСрока <> Неопределено Тогда
		ОбластьДействия.СогласоватьПереносСрока.Доступность =
			ДанныеРезультатаДействияТекстом.СогласоватьПереносСрокаДоступность;
	КонецЕсли;
	ОбластьДействия.РезультатДействияТекстом.ПодсказкаВвода =
		ДанныеРезультатаДействияТекстом.РезультатДействияТекстомПодсказкаВвода;
	
	// Таблица приложений результата.
	ОбластьДействия.ПриложенияРезультата.Видимость = ДанныеОбластиДействия.ПриложенияРезультатаВидимость;
	
	// Приложение 1.
	ОбластьДействия.СтрокаПриложенияРезультата1.Видимость = ДанныеОбластиДействия.СтрокаПриложенияРезультата1Видимость;
	ОбластьДействия.ПриложенияРезультатаПриложение1.ЦветТекста =
		ДанныеОбластиДействия.ПриложенияРезультатаПриложение1ЦветТекста;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить1.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить1Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить1.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить1Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата1Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата1Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата1Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата1.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата1Видимость;
	
	// Приложение 2.
	ОбластьДействия.СтрокаПриложенияРезультата2.Видимость = ДанныеОбластиДействия.СтрокаПриложенияРезультата2Видимость;
	ОбластьДействия.ПриложенияРезультатаПриложение2.ЦветТекста =
		ДанныеОбластиДействия.ПриложенияРезультатаПриложение2ЦветТекста;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить2.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить2Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить2.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить2Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата2Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата2Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата2Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата2.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата2Видимость;
	
	// Приложение 3.
	ОбластьДействия.СтрокаПриложенияРезультата3.Видимость = ДанныеОбластиДействия.СтрокаПриложенияРезультата3Видимость;
	ОбластьДействия.ПриложенияРезультатаПриложение3.ЦветТекста =
		ДанныеОбластиДействия.ПриложенияРезультатаПриложение3ЦветТекста;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить3.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить3Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить3.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить3Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3.Доступность =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3Доступность;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата3Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата3Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата3Видимость;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата3.Видимость =
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата3Видимость;
	
	// Кнопки действия.
	ОбластьДействия.ОтменитьВзятиеВРаботу.Доступность = ДанныеОбластиДействия.ОтменитьВзятиеВРаботуДоступность;
	Если ОбластьДействия.ПодменюФлаги <> Неопределено Тогда
		ОбластьДействия.ПодменюФлаги.Доступность = ДанныеОбластиДействия.ПодменюФлагиДоступность;
	КонецЕсли;
	Для Каждого ДругаяКнопка Из ОбластьДействия.ДругиеКнопки Цикл
		ДругаяКнопка.Видимость = ДанныеОбластиДействия.ДругаяКнопкаВидимость;
	КонецЦикла;
	
	// Перенаправление.
	ОбластьДействия.Перенаправить.Доступность = ДанныеОбластиДействия.ПеренаправитьДоступность;
	
	// Команда "Добавить участников".
	ОбластьДействия.ФормаДобавитьУчастников.Видимость = ДанныеОбластиДействия.ФормаДобавитьУчастниковВидимость;
	ОбластьДействия.ФормаДобавитьУчастников.Доступность = ДанныеОбластиДействия.ФормаДобавитьУчастниковДоступность;
	ОбластьДействия.КомандаДобавитьУчастников.Видимость = ДанныеОбластиДействия.КомандаДобавитьУчастниковВидимость;
	ОбластьДействия.КомандаДобавитьУчастников.Доступность = ДанныеОбластиДействия.КомандаДобавитьУчастниковДоступность;
	
	// Команда "Добавить подзадачу".
	ОбластьДействия.ДокументЗадачаСоздатьПодзадачу.Видимость =
		ДанныеОбластиДействия.ДокументЗадачаСоздатьПодзадачуВидимость;
	ОбластьДействия.СоздатьПодзадачу.Видимость = ДанныеОбластиДействия.СоздатьПодзадачуВидимость;
	
	// Команда выбора шаблона выполнения.
	Если ОбластьДействия.ВыбратьШаблонДляВыполненияЗадачи <> Неопределено Тогда
		ОбластьДействия.ВыбратьШаблонДляВыполненияЗадачи.Видимость =
			ДанныеВариантовВыполненияЗадачи.ВыбратьШаблонДляВыполненияЗадачиВидимость;
	КонецЕсли;
	
	// Информация об отрицательном выполнении группового действия.
	Если ОбластьДействия.ГруппаИнформацияПроОтрицательные <> Неопределено Тогда
		ОбластьДействия.ГруппаИнформацияПроОтрицательные.Видимость =
			ДанныеВариантовВыполненияЗадачи.ГруппаИнформацияПроОтрицательныеВидимость;
	КонецЕсли;
	
	// Команда отмены выполнения.
	Если ОбластьДействия.ОтменитьВыполнение <> Неопределено Тогда
		ОбластьДействия.ОтменитьВыполнение.Видимость =
			ДанныеВариантовВыполненияЗадачи.ОтменитьВыполнениеВидимость;
		ОбластьДействия.ОтменитьВыполнение.Доступность =
			ДанныеВариантовВыполненияЗадачи.ДоступныКомандыВыполнения;
	КонецЕсли;
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод ОбновитьОбластьДействия не доступен во внешнем соединении.'");
#КонецЕсли
	
	// Формируем возвращаемое значение.
	ЗначенияРеквизитовОбласти = Новый Структура;
	ЗначенияРеквизитовОбласти.Вставить("ДанныеГрупповыхДействий",
		ДанныеВариантовВыполненияЗадачи.ДанныеГрупповыхДействий);
	ЗначенияРеквизитовОбласти.Вставить("ВерсияДанных", ДанныеВариантовВыполненияЗадачи.ВерсияДанных);
	ЗначенияРеквизитовОбласти.Вставить("ШаблоныДляВыбора", ДанныеВариантовВыполненияЗадачи.ШаблоныДляВыбора);
	ЗначенияРеквизитовОбласти.Вставить("ОсобаяОбработкаОткрытияФайлов",
		ДанныеВариантовВыполненияЗадачи.ОсобаяОбработкаОткрытияФайлов);
	ЗначенияРеквизитовОбласти.Вставить("РезультатДействияТекстом", ДанныеОбластиДействия.РезультатДействияТекстом);
	ЗначенияРеквизитовОбласти.Вставить("ДействиеОбработки", ДанныеОбластиДействия.ДействиеОбработки);
	ЗначенияРеквизитовОбласти.Вставить("ПриложенияРезультата", ДанныеОбластиДействия.ПриложенияРезультата);
	ЗначенияРеквизитовОбласти.Вставить("ПриложенияРезультатаИзменятьСоставСтрок",
		ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок);
	ЗначенияРеквизитовОбласти.Вставить("ТекущийИсточникДействия",
		ДанныеВариантовВыполненияЗадачи.ТекущийИсточникДействия);
	
	Возврат ЗначенияРеквизитовОбласти;
	
КонецФункции

// Формирует имя команды внести замечания.
// 
// Возвращаемое значение:
//  Строка
// 
Функция ИмяКомандыВнестиЗамечания() Экспорт
	
	ПрефиксИмениДополнительнойКоманды = ПрефиксИмениДополнительнойКоманды();
	ИдентификаторКомандыВнестиЗамечания = "67105d72-847c-4957-be50-9bb6b923b888";
	ИмяКомандыВнестиЗамечания = ИмяКомандыВыполнения(
		ПрефиксИмениДополнительнойКоманды,
		ИдентификаторКомандыВнестиЗамечания);
	
	Возврат ИмяКомандыВнестиЗамечания;
	
КонецФункции

// Формирует префикс имени дополнительной команды.
// 
// Возвращаемое значение:
//  Строка
// 
Функция ПрефиксИмениДополнительнойКоманды() Экспорт
	
	ПрефиксИмениДополнительнойКоманды = "ДополнительнаяКоманда";
	
	Возврат ПрефиксИмениДополнительнойКоманды;
	
КонецФункции

// Формирует имя команды выполнения.
// 
// Параметры:
//  ПрефиксИмени - Строка
//  ИдентификаторКоманды - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Строка
// 
Функция ИмяКомандыВыполнения(ПрефиксИмени, ИдентификаторКоманды) Экспорт
	
	ШаблонИмени = "%1%2";
	ИдентификаторКомандыСтрокой = СтрЗаменить(ИдентификаторКоманды, "-", "_");
	ИмяКомандыВыполнения = СтрШаблон(ШаблонИмени, ПрефиксИмени, ИдентификаторКомандыСтрокой);
	
	Возврат ИмяКомандыВыполнения;
	
КонецФункции

// Обновляет команды выполнения.
// 
// Параметры:
//  Элементы - ЭлементыФормы
//  ДанныеКомандВыполнения - ДанныеФормыКоллекция
//  ДанныеВариантовВыполненияЗадачи - см. РаботаСЗадачами.ДанныеВариантовВыполненияЗадачи
// 
Процедура ОбновитьКомандыВыполнения(Элементы, ДанныеКомандВыполнения, ДанныеВариантовВыполненияЗадачи) Экспорт
	
#Если Не ВнешнееСоединение Тогда
	
	ИменаВостребованныхЭлементов = Новый Соответствие;
	
	// Команды результатов.
	ПрефиксИмениКомандыРезультата = ПрефиксИмениКомандыРезультата();
	Для Каждого ДоступныйРезультат Из ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты Цикл
		ИдентификаторРезультата = ДоступныйРезультат.УникальныйИдентификатор();
		ИмяКомандыВыполнения = ИмяКомандыВыполнения(ПрефиксИмениКомандыРезультата, ИдентификаторРезультата);
		ЭтоРезультатСЭП = ДанныеВариантовВыполненияЗадачи.РезультатыСЭП.Найти(ДоступныйРезультат) <> Неопределено;
		Если ЭтоРезультатСЭП Тогда
			ИмяЭлементаВыполнения = ИмяЭлементаВыполненияСРезультатомИЭП(ИмяКомандыВыполнения);
		Иначе
			ИмяЭлементаВыполнения = ИмяЭлементаВыполненияСРезультатом(ИмяКомандыВыполнения);
		КонецЕсли;
		ИменаВостребованныхЭлементов.Вставить(ИмяЭлементаВыполнения, Истина);
	КонецЦикла;
	
	// Команды шаблонов.
	ПрефиксИмениКомандыШаблона = ПрефиксИмениКомандыШаблоны();
	ШаблоныДляВыполнения = ДанныеВариантовВыполненияЗадачи.ШаблоныДляВыбора.ВыгрузитьЗначения();
	КоличествоКнопокПоШаблонам = 3;
	КоличествоШаблонов = ШаблоныДляВыполнения.Количество();
	ОтображатьВыборШаблона =
		КоличествоКнопокПоШаблонам < КоличествоШаблонов И КоличествоШаблонов > 0;
	Если Не ОтображатьВыборШаблона Тогда
		Для Каждого ШаблонДляВыполнения Из ШаблоныДляВыполнения Цикл
			ИдентификаторШаблона = ШаблонДляВыполнения.УникальныйИдентификатор();
			ИмяКомандыШаблоны = ИмяКомандыВыполнения(ПрефиксИмениКомандыШаблона, ИдентификаторШаблона);
			ИмяЭлементаШаблона = ИмяЭлементаВыполненияСРезультатом(ИмяКомандыШаблоны);
			ИменаВостребованныхЭлементов.Вставить(ИмяЭлементаШаблона, Истина);
		КонецЦикла;
	КонецЕсли;
	
	// Дополнительные команды
	Для Каждого ДанныеДополнительнойКоманды Из ДанныеВариантовВыполненияЗадачи.ДанныеДополнительныхКоманд Цикл
		ИменаВостребованныхЭлементов.Вставить(ДанныеДополнительнойКоманды.ИмяЭлемента, Истина);
	КонецЦикла;
	
	// Команды группового выполнения.
	ПрефиксИмениКомандыГрупповогоРезультата = ПрефиксИмениКомандыГрупповогоРезультата();
	Для Каждого ДанныеГрупповогоДействия Из ДанныеВариантовВыполненияЗадачи.ДанныеГрупповыхДействий Цикл
		ИдентификаторРезультата = ДанныеГрупповогоДействия.Результат.УникальныйИдентификатор();
		ИмяКомандыВыполнения = ИмяКомандыВыполнения(ПрефиксИмениКомандыГрупповогоРезультата, ИдентификаторРезультата);
		ИмяЭлементаВыполнения = ИмяЭлементаВыполненияСРезультатом(ИмяКомандыВыполнения);
		ИменаВостребованныхЭлементов.Вставить(ИмяЭлементаВыполнения, Истина);
	КонецЦикла;
	
	// Настроим видимость и доступность команд.
	Для Каждого СтрокаДанныхКоманды Из ДанныеКомандВыполнения Цикл
		
		КнопкаКоманды = Элементы[СтрокаДанныхКоманды.ИмяЭлемента];
		КнопкаКоманды.Видимость = ИменаВостребованныхЭлементов[СтрокаДанныхКоманды.ИмяЭлемента] = Истина;
		КнопкаКоманды.Доступность = ДанныеВариантовВыполненияЗадачи.ДоступныКомандыВыполнения;
		
	КонецЦикла;
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод ОбновитьКомандыВыполнения не доступен во внешнем соединении.'");
#КонецЕсли
	
КонецПроцедуры

// Формирует данные дополнительной команды "Внести замечания".
// 
// Возвращаемое значение:
//  См. РаботаСЗадачамиКлиентСервер.НовыеДанныеДополнительнойКоманды
// 
Функция ДанныеДополнительнойКомандыВнестиЗамечания() Экспорт
	
	ДанныеДополнительнойКоманды = НовыеДанныеДополнительнойКоманды();
	ДанныеДополнительнойКоманды.ИмяКоманды = ИмяКомандыВнестиЗамечания();
	ДанныеДополнительнойКоманды.ИмяЭлемента = ДанныеДополнительнойКоманды.ИмяКоманды + "ВнестиЗамечания";
	ДанныеДополнительнойКоманды.Заголовок = НСтр("ru = 'Внести замечания'");
	
	Возврат ДанныеДополнительнойКоманды;
	
КонецФункции

// Формирует данные дополнительной команды "Обработать замечания".
// 
// Возвращаемое значение:
//  См. РаботаСЗадачамиКлиентСервер.НовыеДанныеДополнительнойКоманды
// 
Функция ДанныеДополнительнойКомандыОбработатьЗамечания() Экспорт
	
	ДанныеДополнительнойКоманды = НовыеДанныеДополнительнойКоманды();
	ДанныеДополнительнойКоманды.ИмяКоманды = ИмяКомандыВнестиЗамечания();
	ДанныеДополнительнойКоманды.ИмяЭлемента = ДанныеДополнительнойКоманды.ИмяКоманды + "ОбработатьЗамечания";
	ДанныеДополнительнойКоманды.Заголовок = НСтр("ru = 'Обработать замечания'");
	
	Возврат ДанныеДополнительнойКоманды;
	
КонецФункции

// Формирует новые данные дополнительной команды.
// 
// Возвращаемое значение:
//  Структура:
//   * ИмяКоманды - Строка 
//   * ИмяЭлемента - Строка 
//   * Заголовок - Строка
// 
Функция НовыеДанныеДополнительнойКоманды() Экспорт
	
	ДанныеДополнительнойКоманды = Новый Структура;
	ДанныеДополнительнойКоманды.Вставить("ИмяКоманды", "");
	ДанныеДополнительнойКоманды.Вставить("ИмяЭлемента", "");
	ДанныеДополнительнойКоманды.Вставить("Заголовок", "");
	
	Возврат ДанныеДополнительнойКоманды;
	
КонецФункции

// Формирует префикс имени команды результата.
// 
// Возвращаемое значение:
//  Строка
// 
Функция ПрефиксИмениКомандыРезультата() Экспорт
	
	ПрефиксИмениКомандыРезультата = "КомандаРезультата";
	
	Возврат ПрефиксИмениКомандыРезультата;
	
КонецФункции

// Формирует префикс имени команды группового результата.
// 
// Возвращаемое значение:
//  Строка
// 
Функция ПрефиксИмениКомандыГрупповогоРезультата() Экспорт
	
	ПрефиксИмениКомандыРезультата = "КомандаГрупповогоРезультата";
	
	Возврат ПрефиксИмениКомандыРезультата;
	
КонецФункции

// Определяет идентификатор по имени команды.
// 
// Параметры:
//  ИмяКоманды - Строка
// 
// Возвращаемое значение:
//  УникальныйИдентификатор
// 
Функция ИдентификаторПоИмениКоманды(ИмяКоманды) Экспорт
	
	ДлинаИдентификатора = 36;
	КонецИмениКоманды = Прав(ИмяКоманды, ДлинаИдентификатора);
	КонецИмениКоманды = СтрЗаменить(КонецИмениКоманды, "_", "-");
	ИдентификаторПоИмениКоманды = Новый УникальныйИдентификатор(КонецИмениКоманды);
	
	Возврат ИдентификаторПоИмениКоманды;
	
КонецФункции

// Формирует имя элемента выполнения с результатом.
// 
// Параметры:
//  ИмяКоманды - Строка
// 
// Возвращаемое значение:
//  Строка
// 
Функция ИмяЭлементаВыполненияСРезультатом(ИмяКоманды) Экспорт
	
	ИмяЭлементаКомандыРезультата = ИмяКоманды;
	
	Возврат ИмяЭлементаКомандыРезультата;
	
КонецФункции

// Формирует имя элемента выполнения с результатом и электронной подписью.
// 
// Параметры:
//  ИмяКоманды - Строка
// 
// Возвращаемое значение:
//  Строка
// 
Функция ИмяЭлементаВыполненияСРезультатомИЭП(ИмяКоманды) Экспорт
	
	ИмяЭлементаКомандыРезультатаСЭП = ИмяКоманды + "ЭП";
	
	Возврат ИмяЭлементаКомандыРезультатаСЭП;
	
КонецФункции

// Формирует заголовок команды с ЭП.
// 
// Параметры:
//  ЗаголовокБезЭП - Строка
// 
// Возвращаемое значение:
//  Строка
// 
Функция ЗаголовокКомандыСЭП(ЗаголовокБезЭП) Экспорт
	
	ЗаголовокКомандыСЭП = СтрШаблон("%1 (%2)", ЗаголовокБезЭП, НСтр("ru = 'ЭП'"));
	
	Возврат ЗаголовокКомандыСЭП;
	
КонецФункции

// Формирует префикс имени команды шаблона.
// 
// Возвращаемое значение:
//  Строка
// 
Функция ПрефиксИмениКомандыШаблоны() Экспорт
	
	ПрефиксИмениКомандыШаблоны = "КомандаШаблона";
	
	Возврат ПрефиксИмениКомандыШаблоны;
	
КонецФункции

// Настроить режим дерева.
// 
// Параметры:
//  РеквизитДерева - ДанныеФормыДерево
//  ЭлементДерева - ТаблицаФормы
//
Процедура НастроитьРежимДерева(РеквизитДерева, ЭлементДерева) Экспорт
	
#Если Не ВнешнееСоединение Тогда
	
	ЕстьЭлементыВторогоУровня = Ложь;
	
	СтрокиДерева = ПолучитьСтроки(РеквизитДерева);
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		СтрокаДереваСтроки = ПолучитьСтроки(СтрокаДерева);
		Если СтрокаДереваСтроки.Количество() > 0 Тогда
			ЕстьЭлементыВторогоУровня = Истина;
			Прервать;
		Конецесли;
		
	КонецЦикла;
	
	ЭлементДерева.Отображение = ?(ЕстьЭлементыВторогоУровня,
		ОтображениеТаблицы.Дерево,
		ОтображениеТаблицы.Список);
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод НастроитьРежимДерева не доступен во внешнем соединении.'");
#КонецЕсли
	
КонецПроцедуры

// Обновляет дерево.
// 
// Параметры:
//  РеквизитДерева - ДанныеФормыДерево
//  ЭлементДерева - ТаблицаФормы
//  ДанныеДерева - Массив из Структура:
//   * КлючСтроки - Произвольный
//   * Строки - Массив из Структура
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение
// 
Функция ОбновитьДерево(РеквизитДерева, ЭлементДерева, ДанныеДерева) Экспорт
	
	// Разберём строки дерева по ключам.
	СтрокиДереваПоРодителям = Новый Соответствие;
	СтрокиДерева = ПолучитьСтроки(РеквизитДерева);
	НаборДанныхДляОбхода = Новый Структура;
	НаборДанныхДляОбхода.Вставить("СтрокиДерева", СтрокиДерева);
	НаборДанныхДляОбхода.Вставить("КлючРодителя",
		ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ПустаяСсылка"));
	НаборыДанныхДляОбхода = Новый Массив;
	НаборыДанныхДляОбхода.Добавить(НаборДанныхДляОбхода);
	Пока НаборыДанныхДляОбхода.Количество() > 0 Цикл
		НаборДанныхДляОбхода = НаборыДанныхДляОбхода[0];
		НаборыДанныхДляОбхода.Удалить(0);
		Для Каждого СтрокаДерева Из НаборДанныхДляОбхода.СтрокиДерева Цикл
			НижестоящиеСтроки = ПолучитьСтроки(СтрокаДерева);
			НовыйНаборДанныхДляОбхода = Новый Структура;
			НовыйНаборДанныхДляОбхода.Вставить("СтрокиДерева", НижестоящиеСтроки);
			НовыйНаборДанныхДляОбхода.Вставить("КлючРодителя", СтрокаДерева.КлючСтроки);
			НаборыДанныхДляОбхода.Добавить(НовыйНаборДанныхДляОбхода);
			Если СтрокиДереваПоРодителям[НаборДанныхДляОбхода.КлючРодителя] = Неопределено Тогда
				СтрокиДереваПоРодителям[НаборДанныхДляОбхода.КлючРодителя] = Новый Соответствие;
			КонецЕсли;
			СтрокиДереваПоКлючам = СтрокиДереваПоРодителям[НаборДанныхДляОбхода.КлючРодителя];
			СтрокиДереваПоКлючам[СтрокаДерева.КлючСтроки] = СтрокаДерева;
		КонецЦикла;
	КонецЦикла;
	
	// Заполним и обновим данные строк.
	ВостребованныеСтрокиПоРодителям = Новый Соответствие;
	СтрокиДерева = ПолучитьСтроки(РеквизитДерева);
	НаборДанныхДляОбхода = Новый Структура;
	НаборДанныхДляОбхода.Вставить("ДанныеДерева", ДанныеДерева);
	НаборДанныхДляОбхода.Вставить("СтрокиДерева", СтрокиДерева);
	НаборДанныхДляОбхода.Вставить("КлючРодителя",
		ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ПустаяСсылка"));
	НаборыДанныхДляОбхода = Новый Массив;
	НаборыДанныхДляОбхода.Добавить(НаборДанныхДляОбхода);
	Пока НаборыДанныхДляОбхода.Количество() > 0 Цикл
		
		НаборДанныхДляОбхода = НаборыДанныхДляОбхода[0];
		НаборыДанныхДляОбхода.Удалить(0);
		
		Для Каждого ДанныеСтрокиДерева Из НаборДанныхДляОбхода.ДанныеДерева Цикл
			
			Если ВостребованныеСтрокиПоРодителям[НаборДанныхДляОбхода.КлючРодителя] = Неопределено Тогда
				ВостребованныеСтрокиПоРодителям[НаборДанныхДляОбхода.КлючРодителя] = Новый Соответствие;
			КонецЕсли;
			ВостребованныеСтроки = ВостребованныеСтрокиПоРодителям[НаборДанныхДляОбхода.КлючРодителя];
			
			Если СтрокиДереваПоРодителям[НаборДанныхДляОбхода.КлючРодителя] = Неопределено Тогда
				СтрокиДереваПоРодителям[НаборДанныхДляОбхода.КлючРодителя] = Новый Соответствие;
			КонецЕсли;
			СтрокиДереваПоКлючам = СтрокиДереваПоРодителям[НаборДанныхДляОбхода.КлючРодителя];
			
			ВостребованныеСтроки[ДанныеСтрокиДерева.КлючСтроки] = Истина;
			
			Если СтрокиДереваПоКлючам[ДанныеСтрокиДерева.КлючСтроки] = Неопределено Тогда
				СтрокиДереваПоКлючам[ДанныеСтрокиДерева.КлючСтроки] =
					НаборДанныхДляОбхода.СтрокиДерева.Добавить();
			КонецЕсли;
			СтрокаДерева = СтрокиДереваПоКлючам[ДанныеСтрокиДерева.КлючСтроки];
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеСтрокиДерева);
			НижестоящиеСтроки = ПолучитьСтроки(СтрокаДерева);
			
			НовыйНаборДанныхДляОбхода = Новый Структура;
			НовыйНаборДанныхДляОбхода.Вставить("ДанныеДерева", ДанныеСтрокиДерева.Строки);
			НовыйНаборДанныхДляОбхода.Вставить("СтрокиДерева", НижестоящиеСтроки);
			НовыйНаборДанныхДляОбхода.Вставить("КлючРодителя", ДанныеСтрокиДерева.КлючСтроки);
			НаборыДанныхДляОбхода.Добавить(НовыйНаборДанныхДляОбхода);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Удалим невостребованные строки.
	УдалитьНевостребованныеСтрокиПоРодителям(
		РеквизитДерева,
		СтрокиДереваПоРодителям,
		ВостребованныеСтрокиПоРодителям);
	
	// Настроим отображение дерева.
	НастроитьРежимДерева(РеквизитДерева, ЭлементДерева);
	
	Возврат СтрокиДереваПоКлючам;
	
КонецФункции

// Обновляет дерево соисполнителей на форме.
//
// Параметры:
//  РеквизитДерева - ДанныеФормыДерево
//  ЭлементДерева - ТаблицаФормы
//  КолонкаЕстьПриложения - ПолеФормы
//  ДанныеДереваПриложений - Массив из см. РаботаСЗадачами.НоваяСтрокаДереваПриложений
//
Процедура ОбновитьДеревоСоисполнителей(РеквизитДерева, ЭлементДерева, КолонкаЕстьПриложения, ДанныеДереваПриложений) Экспорт
	
#Если Не ВнешнееСоединение Тогда
	
	СтрокиДереваПоКлючам = ОбновитьДерево(РеквизитДерева, ЭлементДерева, ДанныеДереваПриложений);
	
	ЕстьПриложения = Ложь;
	Для Каждого КлючИЗначение Из СтрокиДереваПоКлючам Цикл
		
		СтрокаДерева = КлючИЗначение.Значение;
		
		Если СтрокаДерева.ЕстьПриложения Тогда
			ЕстьПриложения = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкаЕстьПриложения.Видимость = ЕстьПриложения;
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод ОбновитьДеревоСоисполнителей не доступен во внешнем соединении.'");
#КонецЕсли
	
КонецПроцедуры

// Ищет строку в дереве приложений.
// 
// Параметры:
//  ДеревоПриложений - ДанныеФормыКоллекция:
//   * ТипСтроки - ПеречислениеСсылка.ТипыСтрокДереваПриложений
//  ТипСтроки - ПеречислениеСсылка.ТипыСтрокДереваПриложений
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений
//  Неопределено
// 
Функция НайтиСтрокуДереваПриложений(ДеревоПриложений, ТипСтроки) Экспорт
	
	НайденнаяСтрока = Неопределено;
	
	ЭлементыКОбходу = Новый Массив;
	ЭлементыКОбходу.Добавить(ДеревоПриложений);
	Пока ЭлементыКОбходу.Количество() > 0 И НайденнаяСтрока = Неопределено Цикл
		
		ЭлементКОбходу = ЭлементыКОбходу[0];
		ЭлементыКОбходу.Удалить(0);
		
		Для Каждого СтрокаДерева Из ЭлементКОбходу.ПолучитьЭлементы() Цикл
			
			Если СтрокаДерева.ТипСтроки = ТипСтроки Тогда
				НайденнаяСтрока = СтрокаДерева;
				Прервать;
			КонецЕсли;
			
			ЭлементыКОбходу.Добавить(СтрокаДерева);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

// Получить родителя элемента дерева (строки дерева значений).
// 
// Параметры:
//  ЭлементДерева - ДанныеФормыЭлементДерева
//                - СтрокаДереваЗначений
// 
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева
//  СтрокаДереваЗначений
// 
Функция ПолучитьРодителя(ЭлементДерева) Экспорт

#Если Не ВнешнееСоединение Тогда
	
	Если ТипЗнч(ЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат ЭлементДерева.ПолучитьРодителя();
	КонецЕсли;
	
	#Если Не ТонкийКлиент И Не ВебКлиент И Не МобильныйКлиент Тогда
	Если ТипЗнч(ЭлементДерева) = Тип("СтрокаДереваЗначений") Тогда
		Возврат ЭлементДерева.Родитель;
	КонецЕсли;
	#КонецЕсли
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод ПолучитьРодителя не доступен во внешнем соединении.'");
#КонецЕсли
	
КонецФункции

#КонецОбласти