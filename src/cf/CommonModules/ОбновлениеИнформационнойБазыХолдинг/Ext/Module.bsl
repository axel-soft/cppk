// @strict-types

#Область ПрограммныйИнтерфейс

// Записывает изменения в переданном объекте. Для использования в обработчиках обновления.
//
// Параметры:
//	Данные - Произвольный - Объект, набор записей или менеджер константы, который необходимо записать.
//	РегистрироватьИзменения - Булево - Включает регистрацию на узлах планов обмена и отметках времени при записи объекта.
//	ВключитьБизнесЛогику - Булево - Включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьИзменения = Неопределено, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Если РегистрироватьИзменения = Неопределено Или Не РегистрироватьИзменения Тогда
		//@skip-check property-return-type
		//@skip-check dynamic-access-method-not-found
		Данные.ДополнительныеСвойства.Вставить("ОтключитьОтметкиВремени");
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Данные, РегистрироватьИзменения, ВключитьБизнесЛогику);
	
КонецПроцедуры

// Записывает изменения в переданном объекте ссылочного типа. Для использования в обработчиках обновления.
//
// Параметры:
//	Объект - Произвольный - Записываемый объект ссылочного типа. Например, СправочникОбъект.
//	РегистрироватьИзменения - Булево - Включает регистрацию на узлах планов обмена и отметках времени при записи объекта.
//	ВключитьБизнесЛогику - Булево  - Включает бизнес-логику при записи объекта.
//	ДокументРежимЗаписи - РежимЗаписиДокумента - Имеет смысл только для данных типа ДокументОбъект - режим записи документа.
//												 Если параметр не передан, то документ записывается в режиме "Запись".
//
Процедура ЗаписатьОбъект(Знач Объект, Знач РегистрироватьИзменения = Неопределено,
		Знач ВключитьБизнесЛогику = Ложь, ДокументРежимЗаписи = Неопределено) Экспорт
	
	Если РегистрироватьИзменения = Неопределено Или Не РегистрироватьИзменения Тогда
		//@skip-check property-return-type
		//@skip-check dynamic-access-method-not-found
		Объект.ДополнительныеСвойства.Вставить("ОтключитьОтметкиВремени");
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(
		Объект, РегистрироватьИзменения, ВключитьБизнесЛогику, ДокументРежимЗаписи);
	
КонецПроцедуры

// Записывает изменения в переданном наборе записей. Для использования в обработчиках обновления.
//
// Параметры:
//	НаборЗаписей - РегистрСведенийНаборЗаписей
//				 - РегистрНакопленияНаборЗаписей
//				 - РегистрБухгалтерииНаборЗаписей
//				 - РегистрРасчетаНаборЗаписей - Набор записей, который необходимо записать.
//	Замещать - Булево - Определяет режим замещения существующей записи в соответствии с текущими установками отбора.
//	РегистрироватьИзменения - Булево - Включает регистрацию на узлах планов обмена и отметках времени при записи объекта.
//	ВключитьБизнесЛогику - Булево - Включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьНаборЗаписей(Знач НаборЗаписей, Замещать = Истина, Знач РегистрироватьИзменения = Неопределено,
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Если РегистрироватьИзменения = Неопределено Или Не РегистрироватьИзменения Тогда
		//@skip-check property-return-type
		//@skip-check dynamic-access-method-not-found
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьОтметкиВремени");
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(
		НаборЗаписей, Замещать, РегистрироватьИзменения, ВключитьБизнесЛогику);
	
КонецПроцедуры

// Удаляет переданный объект. Для использования в обработчиках обновления.
//
// Параметры:
//	Данные - Произвольный - Объект, который необходимо удалить.
//	РегистрироватьИзменения - Булево - Включает регистрацию на узлах планов обмена и отметках времени при записи объекта.
//	ВключитьБизнесЛогику - Булево - Включает бизнес-логику при записи объекта.
//
Процедура УдалитьДанные(Знач Данные, Знач РегистрироватьИзменения = Неопределено, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Если РегистрироватьИзменения = Неопределено Или Не РегистрироватьИзменения Тогда
		//@skip-check property-return-type
		//@skip-check dynamic-access-method-not-found
		Данные.ДополнительныеСвойства.Вставить("ОтключитьОтметкиВремени");
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.УдалитьДанные(Данные, РегистрироватьИзменения, ВключитьБизнесЛогику);
	
КонецПроцедуры

// Вызывается перед формирование списка обработчиков.
//
// Параметры:
//   ИтерацииОбновления - Массив Из Структура:
//       * Подсистема - Строка - Имя библиотеки или конфигурации.
//       * Версия - Строка - Например, "2.1.3.39". Номер версии библиотеки (конфигурации).
//       * ЭтоОсновнаяКонфигурация - Булево - Истина, если это основная конфигурация, а не библиотека.
//       * Обработчики - ТаблицаЗначений - Все обработчики обновления библиотеки, описание колонок
//										   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ВыполненныеОбработчики - ДеревоЗначений - Выполненные обработчики обновления, сгруппированные по
//													 библиотеке и номеру версии, описание колонок
//													 см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ИмяОсновногоСерверногоМодуля - Строка - Имя модуля библиотеки (конфигурации), который предоставляет
//												   основные сведения о ней: имя, версия и т.д.
//       * ОсновнойСерверныйМодуль - ОбщийМодуль - Общий модуль библиотеки (конфигурации), который предоставляет
//												   основные сведения о ней: имя, версия и т.д.
//       * ПредыдущаяВерсия - Строка - Например, "2.1.3.30". Номер версии библиотеки (конфигурации) до обновления.
//
Процедура ПередФормированиемСпискаОбработчиков(ИтерацииОбновления) Экспорт
	
	Если КОДСервер.ЭтоЦентральныйУзел()
			Или ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя) <> "0.0.0.0" Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаемыеОбработчики = ИсключаемыеОбработчикиОбновления();
	
	Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
		КоличествоОбработчиков = ИтерацияОбновления.Обработчики.Количество();
		Для ПорядковыйНомер = 1 По КоличествоОбработчиков Цикл
			ОписаниеОбработчика = ИтерацияОбновления.Обработчики[КоличествоОбработчиков - ПорядковыйНомер];
			Если ИсключаемыеОбработчики[ОписаниеОбработчика.Процедура] = Истина Тогда
				ИтерацияОбновления.Обработчики.Удалить(КоличествоОбработчиков - ПорядковыйНомер);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заменяет ссылки в ПВХ ВидыДоступа на заранее определенные, чтобы они совпадали между узлами КОД
Процедура ЗаменитьСсылкиВВидахДоступа() Экспорт
	
	Попытка
		
		НачатьТранзакцию();
	
		ОбрабатываемыеВидыДоступа = Новый Массив; // Массив из ПланВидовХарактеристикСсылка.ВидыДоступа
		ОбрабатываемыеВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ВидыДокументов);
		ОбрабатываемыеВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ВидыМероприятий);
		ОбрабатываемыеВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ВопросыДеятельности);
		ОбрабатываемыеВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ГрифыДоступа);
		ОбрабатываемыеВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаКонтрагентов);
		ОбрабатываемыеВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаФизическихЛиц);
		ОбрабатываемыеВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.Организации);
		ОбрабатываемыеВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.Подразделения);
		
		ИдентификаторыПоПредопределенным = Новый Соответствие;
		ИдентификаторыПоПредопределенным["ВидыДокументов"] = "79bf2e82-cff0-4353-a27e-65eb0eafd4e3";
		ИдентификаторыПоПредопределенным["ВидыМероприятий"] = "adaba595-f906-4b18-91ef-7fb447f361c0";
		ИдентификаторыПоПредопределенным["ВопросыДеятельности"] = "03334d26-867f-47eb-9b50-6a99c685614a";
		ИдентификаторыПоПредопределенным["ГрифыДоступа"] = "98b48101-8bad-443a-b42b-d01def767602";
		ИдентификаторыПоПредопределенным["ГруппыДоступаКонтрагентов"] = "7947498e-0b34-47a7-896d-84b13291a4d9";
		ИдентификаторыПоПредопределенным["ГруппыДоступаФизическихЛиц"] = "f6b30975-c685-4ea1-acc7-d0d40948bd39";
		ИдентификаторыПоПредопределенным["Организации"] = "6925b4fa-e05c-42e4-9e43-ff8935037f48";
		ИдентификаторыПоПредопределенным["Подразделения"] = "e9d78f94-dc61-4bad-a27b-a9a29b245988";
		
		// Соответствие новых ссылок старым
		НовыеВидыПоСтарым = НовоеСоответствиеВидовДоступа();
		
		Для Каждого Вид Из ОбрабатываемыеВидыДоступа Цикл
			
			ВидОбъект = Вид.ПолучитьОбъект();
			
			// Получим ссылку, которая будет установлена новому виду доступа
			СсылкаНового = ПланыВидовХарактеристик.ВидыДоступа.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ИдентификаторыПоПредопределенным[ВидОбъект.ИмяПредопределенныхДанных]));
				
			Если ОбщегоНазначения.СсылкаСуществует(СсылкаНового) Тогда
				// На случай аварийно завершенного обновления ранее
				НовыйВидОбъект = СсылкаНового.ПолучитьОбъект();
				Если ВидОбъект.Ссылка = НовыйВидОбъект.Ссылка Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				// Новый вид доступа, которому будет установлена заранее определенная ссылка
				НовыйВидОбъект = ПланыВидовХарактеристик.ВидыДоступа.СоздатьЭлемент();
				НовыйВидОбъект.УстановитьСсылкуНового(СсылкаНового);
			КонецЕсли;
			
			// Копируем значения из старого вида доступа в новый
			ЗаполнитьЗначенияСвойств(НовыйВидОбъект, ВидОбъект, , "Родитель");
			
			// Делаем старый вид доступа не предопределенным и помечаем на удаление
			ВидОбъект.ИмяПредопределенныхДанных = "";
			ВидОбъект.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидОбъект);
			
			// Записываем новый вид доступа
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйВидОбъект);
	
			// Запомним, какая ссылка соответствует старой
			НовыеВидыПоСтарым[Вид] = НовыйВидОбъект.Ссылка;
			
			ОбновитьПовторноИспользуемыеЗначения();
			
			// Обработаем ссылки в регистрах сведений
			СтарыйНаборЗаписей = РегистрыСведений.ЗначенияГруппДоступа.СоздатьНаборЗаписей();
			СтарыйНаборЗаписей.Отбор.ВидДоступа.Установить(Вид);
			СтарыйНаборЗаписей.Прочитать();
			Если СтарыйНаборЗаписей.Количество() Тогда
				НовыйНаборЗаписей = РегистрыСведений.ЗначенияГруппДоступа.СоздатьНаборЗаписей();
				НовыйНаборЗаписей.Отбор.ВидДоступа.Установить(НовыеВидыПоСтарым[Вид]);
				Для Каждого СтараяЗапись Из СтарыйНаборЗаписей цикл
					НоваяЗапись = НовыйНаборЗаписей.Добавить();
					НоваяЗапись.ВидДоступа = НовыеВидыПоСтарым[Вид];
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись, , "ВидДоступа");
				КонецЦикла;
				СтарыйНаборЗаписей.Очистить();
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНаборЗаписей);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтарыйНаборЗаписей);
				НовыйНаборЗаписей = Неопределено;
				НоваяЗапись = Неопределено;
			КонецЕсли;
			СтарыйНаборЗаписей = Неопределено;
			
			СтарыйНаборЗаписей = РегистрыСведений.РазрешенияДляРазрезовДоступа.СоздатьНаборЗаписей();
			СтарыйНаборЗаписей.Отбор.Разрешение.Установить(Вид);
			СтарыйНаборЗаписей.Прочитать();
			Если СтарыйНаборЗаписей.Количество() Тогда
				НовыйНаборЗаписей = РегистрыСведений.РазрешенияДляРазрезовДоступа.СоздатьНаборЗаписей();
				НовыйНаборЗаписей.Отбор.Разрешение.Установить(НовыеВидыПоСтарым[Вид]);
				Для Каждого СтараяЗапись Из СтарыйНаборЗаписей Цикл
					НоваяЗапись = НовыйНаборЗаписей.Добавить();
					НоваяЗапись.Разрешение = НовыеВидыПоСтарым[Вид];
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись, , "Разрешение");
				КонецЦикла;
				СтарыйНаборЗаписей.Очистить();
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНаборЗаписей);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтарыйНаборЗаписей);
				НовыйНаборЗаписей = Неопределено;
				НоваяЗапись = Неопределено;
			КонецЕсли;
			СтарыйНаборЗаписей = Неопределено;
			
			СтарыйНаборЗаписей = РегистрыСведений.УдалитьРазрешенияДоступаОбщие.СоздатьНаборЗаписей();
			СтарыйНаборЗаписей.Отбор.ЗначениеДоступа.Установить(Вид);
			СтарыйНаборЗаписей.Прочитать();
			Если СтарыйНаборЗаписей.Количество() Тогда
				НовыйНаборЗаписей = РегистрыСведений.УдалитьРазрешенияДоступаОбщие.СоздатьНаборЗаписей();
				НовыйНаборЗаписей.Отбор.ЗначениеДоступа.Установить(НовыеВидыПоСтарым[Вид]);
				Для Каждого СтараяЗапись Из СтарыйНаборЗаписей цикл
					НоваяЗапись = НовыйНаборЗаписей.Добавить();
					НоваяЗапись.ЗначениеДоступа = НовыеВидыПоСтарым[Вид];
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись, , "ЗначениеДоступа");
				КонецЦикла;
				СтарыйНаборЗаписей.Очистить();
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНаборЗаписей);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтарыйНаборЗаписей);
				НовыйНаборЗаписей = Неопределено;
				НоваяЗапись = Неопределено;
			КонецЕсли;
			СтарыйНаборЗаписей = Неопределено;
			
		КонецЦикла;
		
		
		Если Не НовыеВидыПоСтарым.Количество() Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		
		// Обработаем ссылки в справочниках отдельно, чтобы не делать лишние запросы в цикле
		ЗапросОбъектовДляЗаменыСсылок = Новый Запрос(
			"ВЫБРАТЬ
			|	ГруппыДоступаВидыДоступа.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВсеОбъектыКОбработке
			|ИЗ
			|	Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
			|ГДЕ
			|	ГруппыДоступаВидыДоступа.ВидДоступа В (&ВидыДоступа)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ГруппыДоступаЗначенияДоступа.Ссылка
			|ИЗ
			|	Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
			|ГДЕ
			|	ГруппыДоступаЗначенияДоступа.ВидДоступа В (&ВидыДоступа)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПрофилиГруппДоступаВидыДоступа.Ссылка
			|ИЗ
			|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиГруппДоступаВидыДоступа
			|ГДЕ
			|	ПрофилиГруппДоступаВидыДоступа.ВидДоступа В (&ВидыДоступа)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПрофилиГруппДоступаЗначенияДоступа.Ссылка
			|ИЗ
			|	Справочник.ПрофилиГруппДоступа.ЗначенияДоступа КАК ПрофилиГруппДоступаЗначенияДоступа
			|ГДЕ
			|	ПрофилиГруппДоступаЗначенияДоступа.ВидДоступа В (&ВидыДоступа)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КоллекцииЗначенийДоступаЗначенияДоступа.Ссылка
			|ИЗ
			|	Справочник.КоллекцииЗначенийДоступа.ЗначенияДоступа КАК КоллекцииЗначенийДоступаЗначенияДоступа
			|ГДЕ
			|	КоллекцииЗначенийДоступаЗначенияДоступа.Значение В (&ВидыДоступа)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВсеОбъектыКОбработке.Ссылка
			|ИЗ
			|	ВсеОбъектыКОбработке КАК ВсеОбъектыКОбработке");
		ЗапросОбъектовДляЗаменыСсылок.УстановитьПараметр("ВидыДоступа", ОбрабатываемыеВидыДоступа);
		ВыборкаОбъектовДляЗаменыСсылок = ЗапросОбъектовДляЗаменыСсылок.Выполнить().Выбрать();
		
		Пока ВыборкаОбъектовДляЗаменыСсылок.Следующий() Цикл
			
			СсылкаКОбработке = ВыборкаОбъектовДляЗаменыСсылок.Ссылка; // СправочникСсылка.ГруппыДоступа, СправочникСсылка.ПрофилиГруппДоступа, СправочникСсылка.КоллекцииЗначенийДоступа
			ОбъектКОбработке = СсылкаКОбработке.ПолучитьОбъект();
			ТипОбъекта = ТипЗнч(ОбъектКОбработке); 
			
			Если ТипОбъекта = Тип("СправочникОбъект.ГруппыДоступа")
				Или ТипОбъекта = Тип("СправочникОбъект.ПрофилиГруппДоступа") Тогда
				
				Для Каждого СтрокаТЧ Из ОбъектКОбработке.ВидыДоступа Цикл
					Если НовыеВидыПоСтарым[СтрокаТЧ.ВидДоступа] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаТЧ.ВидДоступа = НовыеВидыПоСтарым[СтрокаТЧ.ВидДоступа];
				КонецЦикла;
				Для Каждого СтрокаТЧ Из ОбъектКОбработке.ЗначенияДоступа Цикл
					Если НовыеВидыПоСтарым[СтрокаТЧ.ВидДоступа] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаТЧ.ВидДоступа = НовыеВидыПоСтарым[СтрокаТЧ.ВидДоступа];
				КонецЦикла;
				
			ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.КоллекцииЗначенийДоступа") Тогда
				
				Для Каждого СтрокаТЧ Из ОбъектКОбработке.ЗначенияДоступа Цикл
					Если НовыеВидыПоСтарым[СтрокаТЧ.Значение] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаТЧ.Значение = НовыеВидыПоСтарым[СтрокаТЧ.Значение];
				КонецЦикла;
			
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектКОбработке);
			
		КонецЦикла;
			
		
		// Константа ИспользованиеРазрезовДоступа
		НовыеРазрезы = Новый СписокЗначений();
		СтарыеРазрезы = Константы.ИспользованиеРазрезовДоступа.Получить().Получить(); // СписокЗначений
		Для Каждого СтарыйЭлемент Из СтарыеРазрезы Цикл
			НовыеРазрезы.Добавить(
				?(НовыеВидыПоСтарым[СтарыйЭлемент.Значение]=Неопределено,
					СтарыйЭлемент.Значение,
					НовыеВидыПоСтарым[СтарыйЭлемент.Значение]),
				СтарыйЭлемент.Представление, СтарыйЭлемент.Пометка);
		КонецЦикла;
			
		МенеджерЗначения = Константы.ИспользованиеРазрезовДоступа.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Новый ХранилищеЗначения(НовыеРазрезы); 
		МенеджерЗначения.ОбменДанными.Загрузка = Истина;
		МенеджерЗначения.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	
КонецПроцедуры

// Фиксирует к выгрузке предопределенные объекты из центрального узла.
//
// Параметры:
//	Принудительно - Булево - Истина, если требуется последующая принудительная отправка.
//
Процедура ЗафиксироватьОтметкиВремениПредопределенныхОбъектов(Принудительно = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТипыДанныхКОД.ИдентификаторОбъектаМетаданных
		|ИЗ
		|	Справочник.ТипыДанныхКОД КАК ТипыДанныхКОД
		|ГДЕ
		|	ТипыДанныхКОД.ВозможныПредопределенныеДанные
		|	И ТипыДанныхКОД.ЭтоСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектМД = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(
			Выборка.ИдентификаторОбъектаМетаданных); //ОбъектМетаданныхСправочник, ОбъектМетаданныхПланВидовХарактеристик
		
		Если ОбъектМД.ОбновлениеПредопределенныхДанных = ОбновлениеПредопределенныхДанных.НеОбновлятьАвтоматически Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаПредопределенных = ОбъектМД.ПолучитьИменаПредопределенных();
		
		Для Каждого Имя Из ИменаПредопределенных Цикл
			ПредопределеннаяСсылка = ОбщегоНазначения.ПредопределенныйЭлемент(ОбъектМД.ПолноеИмя() + "." + Имя);
			
			Если ЗначениеЗаполнено(ПредопределеннаяСсылка)
					И Метаданные.ОпределяемыеТипы.ОписаниеТиповДанныхКОД.Тип.СодержитТип(ТипЗнч(ПредопределеннаяСсылка)) Тогда
					
				ОтметкиВремениСобытия.ЗафиксироватьОтметкуВремениСсылки(ПредопределеннаяСсылка);
				Если Принудительно = Истина Тогда
					РегистрыСведений.ОтметкиРассмотренияСсылочныхДанныхКОД.Удалить(
						ПредопределеннаяСсылка.УникальныйИдентификатор(),
						Выборка.ИдентификаторОбъектаМетаданных);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает список исключаемых обработчиков обновления программы.
//
// Возвращаемое значение:
//	Соответствие Из КлючИЗначение:
//		* Ключ - Строка - Полное имя обработчика.
//		* Значение - Булево.
//
Функция ИсключаемыеОбработчикиОбновления()
	
	ИсключаемыеОбработчики = Новый Соответствие;
	
	ИсключаемыеОбработчики.Вставить("ОбновлениеИнформационнойБазыСлужебный.НачальноеЗаполнениеПредопределенныхДанных", Истина);
	ИсключаемыеОбработчики.Вставить("ПользователиСлужебный.ЗаполнитьНаименованиеПредопределенныхГруппПользователей", Истина);
	ИсключаемыеОбработчики.Вставить("СПАРКРиски.ОбщиеДанныеНачальноеЗаполнениеДанныхСПАРКРиски", Истина);
	ИсключаемыеОбработчики.Вставить("СПАРКРиски.НачальноеЗаполнениеДанныхСПАРКРиски", Истина);
	ИсключаемыеОбработчики.Вставить("УправлениеКонтактнойИнформациейСлужебный.ОбновитьНастройкуДобавочногоНомераТелефона", Истина);
	ИсключаемыеОбработчики.Вставить("УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется", Истина);
	ИсключаемыеОбработчики.Вставить("УправлениеСвойствамиСлужебный.УстановитьЗначениеПризнакаИспользуется", Истина);
	ИсключаемыеОбработчики.Вставить("ЭлектроннаяПодписьСлужебный.ЗаполнитьНастройкиДляУсовершенствованияПодписей", Истина);
	ИсключаемыеОбработчики.Вставить("Справочники.ПрограммыЭлектроннойПодписиИШифрования.ЗаполнитьНачальныеНастройки", Истина);
	ИсключаемыеОбработчики.Вставить("Обработки.ЗагрузкаКурсовВалют.УстановитьРасписаниеРегламентногоЗадания", Истина);
	
	ИсключаемыеОбработчики.Вставить("ВариантыОтчетов.ОперативноеОбновлениеОбщихДанныхКонфигурации", Истина);
	ИсключаемыеОбработчики.Вставить("ВариантыОтчетов.ОперативноеОбновлениеРазделенныхДанныхКонфигурации", Истина);
	ИсключаемыеОбработчики.Вставить("ВариантыОтчетов.ОбновитьИндексПоискаПредопределенныхВариантовОтчетов", Истина);
	ИсключаемыеОбработчики.Вставить("ВариантыОтчетов.ОбновитьИндексПоискаПользовательскихВариантовОтчетов", Истина);
	ИсключаемыеОбработчики.Вставить("УправлениеСвойствамиСлужебный.ЗаполнитьОбработчикиРазделенныхДанных", Истина);
	ИсключаемыеОбработчики.Вставить("Справочники.НаборыДополнительныхРеквизитовИСведений.ОбработатьНаборыСвойствДляПереходаНаНовуюВерсию", Истина);

	ИсключаемыеОбработчики.Вставить("КонвертацияЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", Истина);
	ИсключаемыеОбработчики.Вставить("Справочники.КлассификаторПолномочийФНСМЧД002.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", Истина);
	ИсключаемыеОбработчики.Вставить("Справочники.КлассификаторПолномочийМЧД003.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", Истина);
	ИсключаемыеОбработчики.Вставить("РегистрыСведений.ДанныеКонтрагентовСоздаваемыхБезусловно.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", Истина);
	ИсключаемыеОбработчики.Вставить("РегистрыСведений.ОператорыЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", Истина);
	ИсключаемыеОбработчики.Вставить("РегистрыСведений.СовместимостьОператоровЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", Истина);
	ИсключаемыеОбработчики.Вставить("РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", Истина);
	ИсключаемыеОбработчики.Вставить("РегистрыСведений.ФорматыЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение", Истина);
	
	ИсключаемыеОбработчики.Вставить("ОбновлениеИнформационнойБазыДокументооборот.ЗаполнитьПраваПредопределенных", Истина);
	ИсключаемыеОбработчики.Вставить("РаботаСФайламиВызовСервера.УстановитьСрокХраненияПротоколаРаботыССервисомРаспознаванияПоУмолчанию", Истина);
	ИсключаемыеОбработчики.Вставить("ШаблоныБизнесПроцессов.ЗаполнитьШаблоныПоУмолчанию", Истина);
	
	Возврат ИсключаемыеОбработчики;
	
КонецФункции

// Новое соответствие видов доступа.
// 
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - ПланВидовХарактеристикСсылка.ВидыДоступа
//  
Функция НовоеСоответствиеВидовДоступа()
	
	Возврат Новый Соответствие;
	
КонецФункции

#КонецОбласти