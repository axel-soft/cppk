// Интеграция "1С:Share"(Документооборот) 

#Область ПрограммныйИнтерфейс

// Проверяет, что сервис включен и у пользователя есть право на его использование.
// 
// Возвращаемое значение:
//  Булево - Истина, если сервисом можно пользоваться
//
Функция ИспользоватьСервис1СShare() Экспорт
	
	ИспользоватьСервис1CShare = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСервис1сShare") Тогда
		ИспользоватьСервис1CShare = ЕстьПравоОтправлятьДокументы();	
	КонецЕсли;
	
	Возврат ИспользоватьСервис1CShare;
	
КонецФункции	

// Проверяет, что пользователю доступна общая команда "ПоделитьсяДокументомShare"
// 
// Возвращаемое значение:
//  Булево - Истина, если команда доступна
//
Функция ЕстьПравоОтправлятьДокументы() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.ПоделитьсяДокументомShare);
	
КонецФункции

// Проверяет, что пользователю доступна общая команда "Сервис1СShareЗагрузитьДокументПоСсылке"
// 
// Возвращаемое значение:
//  Булево - Истина, если команда доступна
//
Функция ЕстьПравоЗагружатьДокументы() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.Сервис1СShareЗагрузитьДокументПоСсылке);
	
КонецФункции

// Заполняет настройки формирования электронного документа.
//
// Параметры:
//  СсылкаНаДокумент      - СправочникСсылка, ДокументСсылка, - документ или справочник объекта учета.
//  НастройкиФормирования - Структура - настройки источника для формирования обмена электронными документами.
//                                      Выходной параметр:
//    * ТипДокумента       - Произвольный - значение элемента структуры возвращаемой
//                           см. ОбменСКонтрагентами.ТипыДокументов.
//    * Формат             - Строка - формат значения элемента структуры возвращаемой см. ОбменСКонтрагентами.ФорматыДокументов().
//    * Направление        - Произвольный - значение элемента структуры возвращаемой.
//                           см. ОбменСКонтрагентами.НаправленияДокументов.
//    * Организация        - ОпределяемыйТип.Организация - организация документа.
//    * Контрагент         - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//    * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор контрагента.
//
Процедура ЗаполнитьНастройкиФормированияДокумента(СсылкаНаДокумент, НастройкиФормирования) Экспорт
	
	ЗаполнитьЗначенияСвойств(НастройкиФормирования, СсылкаНаДокумент);
	Если Не ЗначениеЗаполнено(НастройкиФормирования.Организация) Тогда
		НастройкиФормирования.Организация = НастройкиФормирования.Контрагент;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НастройкиФормирования.Контрагент) Тогда
		НастройкиФормирования.Контрагент = НастройкиФормирования.Организация;
	КонецЕсли;	
	НастройкиФормирования.ТипДокумента = ОбменСКонтрагентами.ТипыДокументов().ДокументПредприятия;
	НастройкиФормирования.Формат = ОбменСКонтрагентами.ФорматыДокументов().ДокументПредприятия;
	НастройкиФормирования.Направление = ОбменСКонтрагентами.НаправленияДокументов().Исходящий;
	
КонецПроцедуры

// Переопределяет настройки загрузки документа из сервиса 1С:Share.
//
// По умолчанию заполняются настройки документа в зависимости от состояния документа и указанных типов объектов из 
// метода ИнтеграцияЭДО.ТипыОбъектовУчетаПоТипуЭлектронногоДокумента. При отличии способов отражения учета от этого
// метода можно переопределить способы отражения и их отображения для пользователя.
// Так же в методе можно выполнять проверки на наличие доступа к учетным документам или данным у пользователя,
// и любые другие проверки перед загрузкой документа. В случае наличия ошибок необходимо установить Отказ = Истина,
// заполнить ТекстОшибки.
//
// 1)Пример для открытия документа, когда документу уже ранее был загружен:
//
//	ПараметрОтраженияВУчете = ПараметрыОтраженияВУчете.Добавить();
//	ПараметрОтраженияВУчете.СсылкаНаОбъектУчетаВБазе      = СсылкаНаОбъектУчета;
//	ПараметрОтраженияВУчете.ПредставлениеДокумента        = Строка(СсылкаНаОбъектУчета);
//	ПараметрОтраженияВУчете.ПредставлениеРезультатаПоиска = СтрШаблон(НСтр("ru = 'Открыть %1'",
//		ОбщегоНазначения.КодОсновногоЯзыка()), ПараметрыОтраженияВУчете.ПредставлениеДокумента);
//	ПараметрОтраженияВУчете.КартинкаРезультатаПоиска      = БиблиотекаКартинок.ПерейтиПоНавигационнойСсылке;
// 
// 2)Пример для загрузки документа, когда только один тип объекта:
//
//	ПараметрОтраженияВУчете = ПараметрыОтраженияВУчете.Добавить();
//	ПараметрОтраженияВУчете.СсылкаНаОбъектУчетаВБазе = Документы.ЗаказПоставщику.ПустаяСсылка();
//	ПараметрОтраженияВУчете.СпособОтраженияВУчете    = "ЗаказПоставщику";
//	ПараметрОтраженияВУчете.ПредставлениеДокумента   = СтрШаблон(НСтр("ru = '%1 от %2'",
//		ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеЭлектронногоДокумента.ПредставлениеДокументаОтправителя,
//		ОписаниеЭлектронногоДокумента.НаименованиеОтправителя);
//	ПараметрОтраженияВУчете.ПредставлениеРезультатаПоиска = СтрШаблон(НСтр("ru = 'Загрузить %1'",
//		ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеДокумента);
//	ПараметрОтраженияВУчете.КартинкаРезультатаПоиска      = БиблиотекаКартинок.ЗагрузитьShare;
//
// 3)Пример для загрузки документа, когда несколько типов объекта:
//
//	ПараметрОтраженияВУчете = ПараметрыОтраженияВУчете.Добавить();
//	ПараметрОтраженияВУчете.СсылкаНаОбъектУчетаВБазе = Документы.ЗаказПоставщику.ПустаяСсылка();
//	ПараметрОтраженияВУчете.СпособОтраженияВУчете    = "ЗаказПоставщику";
//	ПараметрОтраженияВУчете.ПредставлениеДокумента   = НСтр("ru = 'Заказ поставщику'",
//		ОбщегоНазначения.КодОсновногоЯзыка());
//	ПараметрОтраженияВУчете.КартинкаРезультатаПоиска = БиблиотекаКартинок.ЗагрузитьShare;
//	ПараметрОтраженияВУчете.ПредставлениеВПодменюЗагрузить = СтрШаблон(НСтр("ru = 'Как %1'",
//		ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеДокумента);
//	ПараметрОтраженияВУчете.ПредставлениеРезультатаПоиска = СтрШаблон(НСтр("ru = 'Загрузить как %1'",
//		ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеДокумента).
//
// Параметры:
//  НастройкиЗагрузки - Структура Из см. ИнтеграцияShare.НовыеНастройкиЗагрузкиДокумента
//  ОписаниеЭлектронногоДокумента - см. ИнтеграцияShare.НовоеКраткоеОписаниеЭлектронногоДокумента.
//  Отказ - Булево - признак наличия ошибки или закрытия доступа к загрузке документа, например, при отсутствие прав.
//  ТекстОшибки - Строка - текст сообщения для отображения пользователю.
//
Процедура ПриОпределенииНастроекЗагрузкиДокумента(НастройкиЗагрузки, Знач ОписаниеЭлектронногоДокумента,
	Отказ = Ложь, ТекстОшибки = "") Экспорт
	
	ПараметрыОтраженияВУчете = НастройкиЗагрузки.ПараметрыОтраженияВУчете;
	Для Каждого ПараметрОтраженияВУчете Из ПараметрыОтраженияВУчете Цикл
		
		Если Не ПараметрОтраженияВУчете.КартинкаРезультатаПоиска = БиблиотекаКартинок.ПерейтиПоНавигационнойСсылке Тогда
			Продолжить;			
		КонецЕсли;
		
		ПраваНаДокумент = ПраваНаДокумент(ПараметрОтраженияВУчете.СсылкаНаОбъектУчетаВБазе);
		Если ПраваНаДокумент.ЕстьПрава Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрОтраженияВУчете.ПредставлениеДокумента = СтрШаблон(НСтр("ru = '%1 (У вас нет доступа к документу).'"), 
			ПраваНаДокумент.ПредставлениеДокумента);
		ПараметрОтраженияВУчете.ПредставлениеРезультатаПоиска = ПараметрОтраженияВУчете.ПредставлениеДокумента;
		ПараметрОтраженияВУчете.СсылкаНаОбъектУчетаВБазе = ПраваНаДокумент.НавигационнаяСсылка
			+ ИнтеграцияShareДокументооборотКлиентСервер.УсловиеОшибкиПравДоступа();
		
	КонецЦикла;
		
КонецПроцедуры

// Получает необходимые данные для создания в базе документа предприятия.
// 
// Параметры:
//  ОписаниеЭлектронногоДокумента - См. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
//  ШаблоныДокумента - См. ИнтеграцияShareДокументооборотКлиентСервер.ШаблоныДляЗагрузкиДокумента
//  АдресХранилищаРезультата - Строка - Адрес временного хранилища
//  ИспользоватьПредпросмотрФайлов - Булево
//
Процедура ПолучитьДанныеДляЗарузкиДокумента(ОписаниеЭлектронногоДокумента, ШаблоныДокумента, АдресХранилищаРезультата,
		ИспользоватьПредпросмотрФайлов) Экспорт
	
	Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьСервис1сShare") И ЕстьПравоЗагружатьДокументы()) Тогда
		ВызватьИсключение НСтр("ru = 'Нет прав на загрузку документа через сервис ""1С:Share.""'");
	КонецЕсли;	
	
	ИспользоватьПредпросмотрФайлов = РаботаСФайламиСлужебный.ИспользоватьПредпросмотрФайлов();
	
	ДанныеДокумента = ИнтеграцияShare.НовыеДанныеЭлектронногоДокументаДляЗагрузки();
	ИнтеграцияShare.ПрочитатьДанныеЭлектронногоДокумента(ДанныеДокумента, ОписаниеЭлектронногоДокумента);
	ЭтоПрикладнойТипЭлектронногоДокумента = ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов().Найти(
		ДанныеДокумента.ТипДокумента) <> Неопределено Или ДанныеДокумента.ТипДокумента 
		= Перечисления.ТипыДокументовЭДО.Прикладной; 
	Если ЭтоПрикладнойТипЭлектронногоДокумента Тогда
		Возврат;
	КонецЕсли;

	ДанныеРазбора = Неопределено;
	Если ДанныеДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПредприятия Тогда // @skip-check property-return-type
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыПолучения = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияДанныхДокумента();// @skip-check property-return-type
		ПараметрыПолучения.ОсновнойФайл = ДанныеДокумента.ДанныеОсновногоФайла; 
		ПараметрыПолучения.ДополнительныйФайл = ДанныеДокумента.ДанныеФайлаДопДанных; 
		ДанныеРазбора = ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПросмотра(ПараметрыПолучения);
	Иначе
		ДанныеРазбора = ОбменСКонтрагентамиДОСлужебный.СведенияОЭДИзФайла(ПоместитьВоВременноеХранилище(
				ДанныеДокумента.ДанныеОсновногоФайла.ДвоичныеДанные));
	КонецЕсли;

	Если ДанныеРазбора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПредприятия Тогда // @skip-check property-return-type
		ИнформацияЭД = ДанныеРазбора.НовыйЭД.ЗначениеРеквизита.ИнформацияДокумента; 
		СвойстваВидаДокумента = СвойстваВидаДокумента();
		ЗаполнитьЗначенияСвойств(СвойстваВидаДокумента, ИнформацияЭД[0].СвойстваВидаДокумента);
		Если СвойстваВидаДокумента = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДанныеФайла = ОбменСКонтрагентамиДОСервер.ДанныеФайла(ДанныеДокумента.ДанныеОсновногоФайла.ИмяФайла);
		ИмяОсновногоФайла = СтрШаблон(НСтр("ru = '%1 № %2 от %3.%4'"), СвойстваВидаДокумента.Наименование,
			ИнформацияЭД[0].Номер, Формат(ИнформацияЭД[0].Дата, "ДФ=dd.MM.yyyy"), ДанныеФайла.Расширение);
		ДанныеДокумента.ДанныеОсновногоФайла.ИмяФайла = ИмяОсновногоФайла;
		ИдентификаторДокумента = ИнформацияЭД[0].ВнешнийИдентификатор;
		УстановитьПривилегированныйРежим(Ложь);
		Если ДокументНайденВБазе(ОписаниеЭлектронногоДокумента, ИдентификаторДокумента) Тогда
			Возврат;
		КонецЕсли;	
		ЗаполнитьШаблоныДокументаДляЗагрузки(ШаблоныДокумента, СвойстваВидаДокумента, ДанныеДокумента.Организация,
			ДанныеДокумента.Контрагент);
	Иначе
		ИдентификаторДокумента = ДанныеРазбора.ИдентификаторДокумента;
		Если ДокументНайденВБазе(ОписаниеЭлектронногоДокумента, ИдентификаторДокумента) Тогда
			Возврат;
		КонецЕсли;	
		СвойстваВидаДокумента = СвойстваВидаДокумента();
		СвойстваВидаДокумента.Наименование = Строка(ДанныеДокумента.ТипДокумента);
		ЗаполнитьШаблоныДокументаДляЗагрузки(ШаблоныДокумента, СвойстваВидаДокумента, ДанныеДокумента.Организация,
			ДанныеДокумента.Контрагент);
	КонецЕсли;
	
	ДополнительныеФайлыДокумента = ДанныеДокумента.ДополнительныеФайлыДокумента.Получить(); // ТаблицаЗначений
	ДополнительныеФайлыДокумента.Колонки.Добавить("ДанныеВизуализации", Новый ОписаниеТипов("Строка"));
	ДополнительныеФайлыДокумента.Колонки.Добавить("ЭтоДокумент", Новый ОписаниеТипов("Булево"));
	ДополнительныеФайлыДокумента.Колонки.Добавить("ЭтоФайл", Новый ОписаниеТипов("Булево"));
	ДополнительныеФайлыДокумента.Колонки.Добавить("ЭтоПодпись", Новый ОписаниеТипов("Булево"));
	ДополнительныеФайлыДокумента.Колонки.Добавить("Загружать", Новый ОписаниеТипов("Булево"));
	ДополнительныеФайлыДокумента.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Для Каждого ДопФайл Из ДополнительныеФайлыДокумента Цикл
		ДопФайл.Идентификатор = Новый УникальныйИдентификатор();
		ДопФайл.ЭтоФайл = Истина;
	КонецЦикла;	
	
	ДанныеДокумента.ДополнительныеФайлыДокумента = Новый ХранилищеЗначения(ДополнительныеФайлыДокумента);
	
	ДанныеДокумента.Вставить("ДанныеРазбора", ДанныеРазбора);

	АдресХранилищаРезультата = ПоместитьВоВременноеХранилище(ДанныеДокумента, Новый УникальныйИдентификатор());	
	
КонецПроцедуры	

// Создаёт документ ДО по данным формата "Документ предприятия" или по данным другого формата ФНС_CML.
// 
// Параметры:
//  ОписаниеДанныхЭлектронногоДокумента См. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
//  ШаблоныДокумента - см. ИнтеграцияShareДокументооборотКлиентСервер.ШаблоныДляЗагрузкиДокумента
//  АдресХранилищаРезультата - Строка - Адрес временного хранилища  
//
Процедура СоздатьДокументДО(ОписаниеДанныхЭлектронногоДокумента, ШаблоныДокумента, АдресХранилищаРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонДокумента = ШаблоныДокумента.ШаблонДокумента;
	Тематика = ШаблоныДокумента.ТематикаДокумента;
	ДанныеДокумента = ПолучитьИзВременногоХранилища(АдресХранилищаРезультата);
	
	ОбъектУчета = ОписаниеДанныхЭлектронногоДокумента.ДанныеЗагрузкиДокумента.ОбъектУчета; 
	Если ДанныеДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПредприятия Тогда // @skip-check property-return-type
		СоздатьДокументПоФорматуДокументПредприятия(ОбъектУчета, ШаблоныДокумента, ДанныеДокумента); 
	Иначе
		СоздатьДокументПоФорматуФНС_CML(ОбъектУчета, ШаблоныДокумента, ДанныеДокумента);
	КонецЕсли;			
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если ШаблоныДокумента.ЗаписатьКэш Тогда
		РегистрыСведений.Сервис1СShareКэшВидовДокументов.ЗаписатьШаблон(ДанныеДокумента.Организация,
			ДанныеДокумента.Контрагент, ШаблоныДокумента.НаименованиеВидаДокумента, ШаблонДокумента, Тематика);
	КонецЕсли;	
	
	ОписаниеДанныхЭлектронногоДокумента.ДанныеЗагрузкиДокумента.ОбъектУчета = ОбъектУчета;
	
	ПараметрыДокумента = ИнтеграцияShareКлиентСервер.НовыеПараметрыДокументаДляОтметкиЗагрузкиВБазу();
    ПараметрыДокумента.ОбъектУчета                        = ОбъектУчета;
    ПараметрыДокумента.ТипМетаданныхДокументаВладельца    = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектУчета)).ПолноеИмя();
    ПараметрыДокумента.ИдентификаторЭлектронногоДокумента = ОписаниеДанныхЭлектронногоДокумента.ИдентификаторЭлектронногоДокумента;
    Отказ = Ложь;
    ИнтеграцияShare.ОтметитьВСервисеЗагрузкуДокументаВБазу(ПараметрыДокумента, Отказ);
    
    УстановитьПривилегированныйРежим(Ложь);
    
    ОписаниеДанныхЭлектронногоДокумента.ДоступКДокументуЗакрыт = 
    	Не ОбщегоНазначенияДокументооборот.СсылкаСуществует(ОбъектУчета);
	
КонецПроцедуры

// Автоматически установливает настройки работы с сервисом
//
Процедура УстановитьНастройки() Экспорт
	
	Константы.ИспользоватьСервис1сShare.Установить(Истина);
	УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия(
		Метаданные.Роли.БазовыеПраваСервисShare, "c999acb1-d5f5-11de-a544-00179ab398dc");
	
КонецПроцедуры	

// Права на документ.
// 
// Параметры:
//  ДокументДО - ОпределяемыйТип.ДокументДОДляЭДО
// 
// Возвращаемое значение:
// Структура:
//  * ЕстьПрава - Булево
//  * НавигационнаяСсылка - Строка
//  * ПредставлениеДокумента - Строка
//
Функция ПраваНаДокумент(ДокументДО) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ЕстьПрава", Ложь);
	Структура.Вставить("НавигационнаяСсылка", "");
	Структура.Вставить("ПредставлениеДокумента", "");
	
	Структура.ЕстьПрава = ОбщегоНазначенияДокументооборот.СсылкаСуществует(ДокументДО);
	Структура.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДокументДО);
	УстановитьПривилегированныйРежим(Истина);
	Структура.ПредставлениеДокумента = Строка(ДокументДО);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Структура;
	
КонецФункции

// Проверяет заполнение реквизитов документа.
// 
// Параметры:
//  ДокументДО - СправочникСсылка.ДокументыПредприятия
//  РеквизитыДокумента - Структура:
//   * Организация - СправочникСсылка.Организации
//   * Контрагент - СправочникСсылка.Контрагенты
//   * ДатаРегистрации - Дата
//   - Неопределено - значение по умолчанию Неопределено
//  НастройкиВидаДокумента - Структура:
//   * ВестиУчетСторон - Булево
//   * ЯвляетсяДоговором - Булево
//   * ЯвляетсяИсходящейКорреспонденцией - Булево
//   * ВестиУчетПоОрганизациям - Булево
//   - Неопределено - значение по умолчанию Неопределено
//  Отказ - Булево - Истина, если найдены ошибки в реквизитах, значение по умолчанию - Ложь
// 
Процедура ПроверитьЗаполнениеРеквизитовДокумента(ДокументДО, РеквизитыДокумента = Неопределено,
		НастройкиВидаДокумента = Неопределено, Отказ = Ложь) Экспорт
	
	Если РеквизитыДокумента = Неопределено Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДО, "Организация, Контрагент,
			|ВидДокумента, ДатаРегистрации");
	КонецЕсли;
	Если НастройкиВидаДокумента = Неопределено Тогда
		НастройкиВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.ВидДокумента, "ВестиУчетСторон,
			|ЯвляетсяДоговором, ЯвляетсяИсходящейКорреспонденцией, ВестиУчетПоОрганизациям"); // Булево
	КонецЕсли;		
		
	Если Не (НастройкиВидаДокумента.ВестиУчетСторон Или НастройкиВидаДокумента.ВестиУчетПоОрганизациям) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'По документу не ведется учет по организациям или по сторонам, отправка документа не поддерживается.'"),
			, , , Отказ);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(РеквизитыДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У документа не заполнена организация.'"), , , , Отказ);
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныхСторонДокумента();	
	Запрос.УстановитьПараметр("ВестиУчетСторон", НастройкиВидаДокумента.ВестиУчетСторон);
	Запрос.УстановитьПараметр("ДокументДО", ДокументДО);
	Запрос.УстановитьПараметр("Организация", РеквизитыДокумента.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачалоСообщения = ?(Выборка.ТипСтороны = "Организация", НСтр("ru = 'У организации'"),
			НСтр("ru = 'У контрагента'"));
			
		Если Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И Не ЗначениеЗаполнено(Выборка.ИНН) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2 не заполнен ИНН физического лица
				|(см. реквизит ""Физическое лицо"" справочника ""Контрагенты."")'"), НачалоСообщения,
					Выборка.Сторона);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ИначеЕсли Выборка.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент И Не ЗначениеЗаполнено(Выборка.ИНН) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2 не заполнен ИНН.'"), НачалоСообщения, Выборка.Сторона);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ИначеЕсли Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			Если Не ЗначениеЗаполнено(Выборка.РегистрационныйНомер) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2 не заполнен регистрационный номер.'"),
					НачалоСообщения, Выборка.Сторона);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЕсли;
			КодСтраны = КодСтраныНеРезидента(Выборка.Сторона, РеквизитыДокумента.ДатаРегистрации);
			Если Не ЗначениеЗаполнено(КодСтраны) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1-нерезидента %2 не заполнен юридический адрес или заполнен не полностью.
					|Также проверьте, что в адресе указан код страны.'"), НачалоСообщения, Выборка.Сторона);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);	
			КонецЕсли;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.НаименованиеПолное) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2 не заполнено полное наименование.'"), НачалоСообщения,
				Выборка.Сторона);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Выборка.БанковскийСчет) Тогда
			Если Не ЗначениеЗаполнено(Выборка.НомерСчета) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2 не заполнен номер банковского счета.'"), НачалоСообщения,
					Выборка.Сторона);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);	
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(Выборка.КоррСчет) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2 не заполнен корреспондентский счет.'"), НачалоСообщения,
					Выборка.Сторона);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);	
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Выборка.БИК) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2 не заполнен БИК банка.'"), НачалоСообщения,
					Выборка.Сторона);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);	
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
		
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создаёт документ по формату "Документ предприятия".
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ДокументДОДляЭДО
//  ШаблонДокумента - см. РегистрыСведений.Сервис1СShareКэшВидовДокументов.ДанныеШаблона
//  ДанныеДокумента - см. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
//
Процедура СоздатьДокументПоФорматуДокументПредприятия(ОбъектУчета, ШаблонДокумента, ДанныеДокумента)
	
	ДополнительныеДанные = ДополнительныеДанныеДокументаДО();
	ЗаполнитьЗначенияСвойств(ДополнительныеДанные, ШаблонДокумента);
	ДополнительныеДанные.ДанныеОсновногоФайла = ДанныеДокумента.ДанныеОсновногоФайла;
	ДополнительныеДанные.ДополнительныеФайлыДокумента = ДанныеДокумента.ДополнительныеФайлыДокумента.Получить();
	
	ПараметрыОбработки = Новый Структура("СпособОбработки", "");
	КонструкторЭД = ДанныеДокумента.ДанныеРазбора.НовыйЭД.ЗначениеРеквизита;

	НачатьТранзакцию();
	Попытка
		ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПредприятия(ОбъектУчета, КонструкторЭД,
			ПараметрыОбработки,, ДополнительныеДанные);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().СервисShare;
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки, Подсистема);
	КонецПопытки;		
		
КонецПроцедуры

// Создаёт документ по формату ФНС, CML.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ДокументДОДляЭДО
//  ШаблонДокумента - см. РегистрыСведений.Сервис1СShareКэшВидовДокументов.ДанныеШаблона
//  ДанныеДокумента - см. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
//
Процедура СоздатьДокументПоФорматуФНС_CML(ОбъектУчета, ШаблонДокумента, ДанныеДокумента)
	
	ДанныеОсновногоФайла = ДанныеДокумента.ДанныеОсновногоФайла;
	ДополнительныеФайлыДокумента = ДанныеДокумента.ДополнительныеФайлыДокумента.Получить();
	ДанныеРазбораФайлаЭД = ДанныеДокумента.ДанныеРазбора;
	
	СсылкаНового = Справочники.ДокументыПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(
		ДанныеРазбораФайлаЭД.ИдентификаторДокумента));
	
	Если ЗначениеЗаполнено(СсылкаНового) И ОбщегоНазначения.СсылкаСуществует(СсылкаНового) Тогда
		ОбъектУчета = СсылкаНового;
		Возврат;
	КонецЕсли;	
	
	НачатьТранзакцию();

	Попытка		

		ДокументДО = Справочники.ДокументыПредприятия.СоздатьЭлемент();
		ДокументДО.ИсточникДанных = Справочники.ИсточникиДанных.Сервис1СShare;
		ДокументДО.Источник = Справочники.ИсточникиДанных.Сервис1СShare;	
		ДокументДО.Заполнить(ШаблонДокумента);
		ДокументДО.Тематика = ШаблонДокумента.ТематикаДокумента;
		НастройкиДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДО.ВидДокумента,
			"ВестиУчетСторон, ОбязательноеУказаниеОтветственного, ЯвляетсяВходящейКорреспонденцией,
				|ЯвляетсяЗаявкойНаОплату");
																							  
		ЗаполнитьЗначенияСвойств(ДокументДО, ДанныеДокумента, "Организация, Контрагент");
		
		РабочаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументДО.Шаблон,
			"РабочаяГруппаДокумента").Выгрузить();
		ДокументДО.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппа);
		
		ДокументДО.Контрагенты.Очистить();
		ДокументДО.Контрагенты.Добавить().Контрагент = ДокументДО.Контрагент;
		
		Если НастройкиДокумента.ВестиУчетСторон Тогда
			ДокументДО.Стороны.Очистить();
			Сторона = ДокументДО.Стороны.Добавить();
			Сторона.Сторона = ДокументДО.Организация;
			Сторона = ДокументДО.Стороны.Добавить();
			Сторона.Сторона = ДокументДО.Контрагент;
			ОбменСКонтрагентамиДОСервер.ЗаполнитьНаименованияСторонДляЗаявкиНаОплату(ДокументДО, НастройкиДокумента);
		КонецЕсли;

		ДокументДО.Сумма = ДанныеРазбораФайлаЭД.СуммаДокумента;
		Если Не НастройкиДокумента.ЯвляетсяВходящейКорреспонденцией = Истина Тогда
			ДокументДО.ДатаРегистрации = ДанныеРазбораФайлаЭД.ДатаДокумента;
			ДокументДО.РегистрационныйНомер = ДанныеРазбораФайлаЭД.НомерДокумента;
		КонецЕсли;
		ДокументДО.Валюта = ДанныеРазбораФайлаЭД.Валюта;
		
		Если Не ЗначениеЗаполнено(ДокументДО.Заголовок) Тогда
			Если Не НастройкиДокумента.ЯвляетсяВходящейКорреспонденцией = Истина Тогда
				ДокументДО.Заголовок = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"), ДокументДО.ВидДокумента,
					ДокументДО.РегистрационныйНомер, Формат(ДокументДО.ДатаРегистрации, "ДФ=dd.MM.yyyy"));
			Иначе
				ДокументДО.Заголовок = СтрШаблон(НСтр("ru = '%1 от %2  Вх. № %3 от %4'"), ДокументДО.ВидДокумента,
					ДокументДО.Контрагент, ДанныеРазбораФайлаЭД.НомерДокумента,
						Формат(ДанныеРазбораФайлаЭД.ДатаДокумента, "ДФ=dd.MM.yyyy"));
			КонецЕсли;		
		КонецЕсли;	
		
		Если НастройкиДокумента.ЯвляетсяВходящейКорреспонденцией = Истина Тогда
			ПараметрыКорреспонденции = Документы.Корреспонденция.НовыеПараметрыКорреспонденции();
			ВидДокументаКэш = Новый Структура;
			ВидДокументаКэш.Вставить("ЯвляетсяВходящейКорреспонденцией", Истина);
			ВидДокументаКэш.Вставить("ЯвляетсяИсходящейКорреспонденцией", Ложь);
			ВидДокументаКэш.Вставить("УчитыватьВходящийНомерИДатуПолучателя", Ложь);
			ПараметрыКорреспонденции.АдресатВходящейКорреспонденции = ДокументДО.Адресат;
			ПараметрыКорреспонденции.ИсходящийНомер = ДанныеРазбораФайлаЭД.НомерДокумента;
			ПараметрыКорреспонденции.ИсходящаяДата = ДанныеРазбораФайлаЭД.ДатаДокумента;
			ПараметрыКорреспонденции.СпособПолучения = Справочники.СпособыДоставки.Сервис1СShare;
			ПараметрыКорреспонденции.Вставить("Контрагент", ДокументДО.Контрагент);
			ПараметрыКорреспонденции.Вставить("ВидДокументаКэш", ВидДокументаКэш);
			ПараметрыКорреспонденции.Вставить("Ссылка", ДокументДО.Ссылка);
			ДокументДО.ДополнительныеСвойства.Вставить("ПараметрыКорреспонденции", ПараметрыКорреспонденции);
		КонецЕсли;	
		
		ВидДокументаФорма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументДО.ВидДокумента,
			"ФормаДокумента");
		Если ЗначениеЗаполнено(ВидДокументаФорма) И ВидДокументаФорма
			<> Перечисления.ВариантыФормДокументов.БумажнаяИлиЭлектронная
			И ВидДокументаФорма <> ДокументДО.ФормаДокумента Тогда
			ДокументДО.ФормаДокумента = ВидДокументаФорма;
		КонецЕсли;
		ДокументДО.ДатаСоздания = ТекущаяДатаСеанса();		
		ДокументДО.Записать();
		
		ДанныеФайла = ОбменСКонтрагентамиДОСервер.ДанныеФайла(ДанныеОсновногоФайла.ИмяФайла);
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайла.ВладелецФайлов = ДокументДО.Ссылка;
		ЗаполнитьЗначенияСвойств(ПараметрыФайла, ДанныеФайла);
		ПараметрыФайла.РасширениеБезТочки = ДанныеФайла.Расширение;
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДанныеОсновногоФайла.ДвоичныеДанные));		
		ОбменСКонтрагентамиДОСервер.ЗаполнитьРолиФайлов(ДокументДО);
		ОбменСКонтрагентамиДОСервер.ДобавитьФайлыДокумента(ДокументДО.Ссылка, ДополнительныеФайлыДокумента,
			НастройкиДокумента);
		ОбменСКонтрагентамиДОСервер.ЗаполнитьРолиФайлов(ДокументДО);
		
		Делопроизводство.ЗаписатьСостояниеДокумента(ДокументДО.Ссылка, ТекущаяДатаСеанса(),
			Перечисления.СостоянияДокументов.Проект, Сотрудники.ОсновнойСотрудник());
		Если ЗначениеЗаполнено(ДокументДО.РегистрационныйНомер) И ЗначениеЗаполнено(ДокументДО.ДатаРегистрации) Тогда
			Делопроизводство.ЗаписатьСостояниеДокумента(ДокументДО.Ссылка, ТекущаяДатаСеанса(),
				Перечисления.СостоянияДокументов.Зарегистрирован, Сотрудники.ОсновнойСотрудник());
		КонецЕсли;	
		Делопроизводство.ЗаписатьДанныеДокумента(ДокументДО.Ссылка, "ДатаСортировки", ДокументДО.ДатаСоздания);	
		
		ОбъектУчета = ДокументДО.Ссылка;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().СервисShare;
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки, Подсистема);
		
	КонецПопытки;	
		
КонецПроцедуры

// Дополнительные данные документа ДО для создания документа на основе формата ЭД "ДокументПредприятие"
// 
// Возвращаемое значение:
//  Структура - Дополнительные данные документа ДО:
// 	* ДанныеОсновногоФайла - Структура:
//	  ** ИмяФайла - Строка 
// 	  ** ДвоичныеДанные - Неопределено
// 	* ДополнительныеФайлыДокумента - ТаблицаЗначений:
// 	  ** ОбъектУчета - ОпределяемыйТип.ДокументДООбъектДляЭДО
// 	  ** ИмяФайла - Строка
// 	  ** ДвоичныеДанныеФайла - ДвоичныеДанные
// 	  ** РасширениеБезТочки - Строка
//	  ** ИмяБезРасширения - Строка
// 	* СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД 
// 	* ШаблонДокумента - СправочникСсылка.ШаблоныДокументов
// 	* ТематикаДокумента - СправочникСсылка.ТематикиДокументов
//
Функция ДополнительныеДанныеДокументаДО()
	
	Структура = Новый Структура;
	Структура.Вставить("ДанныеОсновногоФайла", РаботаСФайламиБЭД.НовоеОписаниеФайла());
	Структура.Вставить("ДополнительныеФайлыДокумента", СинхронизацияЭДО.НовоеОписаниеДополнительныхФайлов());
	Структура.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.Через1CShare);
	Структура.Вставить("ШаблонДокумента", Справочники.ШаблоныДокументов.ПустаяСсылка());
	Структура.Вставить("ТематикаДокумента", Справочники.ТематикиДокументов.ПустаяСсылка());
	
	Возврат Структура;
	
КонецФункции

// Ищет виды документов по наименованию.
// 
// Параметры:
//  Наименование - Строка
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.ВидыДокументов
//
Функция ВидыДокументовПоНаименованию(Наименование)
		
	МассивВидов = Новый Массив; // Массив Из СправочникСсылка.ВидыДокументов
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ВидыДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	ВидыДокументов.Наименование = &Наименование
		|	И НЕ ВидыДокументов.ЭтоГруппа
		|	И НЕ ВидыДокументов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10 РАЗРЕШЕННЫЕ
		|	ВидыДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	ВидыДокументов.Наименование ПОДОБНО ""%"" + &Наименование + ""%""
		|	И НЕ ВидыДокументов.ЭтоГруппа
		|	И НЕ ВидыДокументов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
		
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10 РАЗРЕШЕННЫЕ
		|	ВидыДокументов.Ссылка
		|ПОМЕСТИТЬ ВТ_Виды
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	ВидыДокументов.Наименование ПОДОБНО ""%"" + &Наименование + ""%""
		|	И НЕ ВидыДокументов.ЭтоГруппа
		|	И НЕ ВидыДокументов.ПометкаУдаления";	
	
	ЧастиНаименования = СтрРазделить(Наименование, " ", Ложь);
	ЧастиЗапроса = Новый Массив; // Массив Из Строка
	Для Индекс = 0 По ЧастиНаименования.ВГраница() Цикл
		Если Не ЗначениеЗаполнено(ЧастиНаименования[Индекс]) Или СтрДлина(ЧастиНаименования[Индекс]) < 3 Тогда
			Продолжить;
		КонецЕсли;
		ЧастьЗапроса = СтрЗаменить(ТекстЗапроса, "&Наименование" , "&Наименование" + Формат(Индекс, "ЧГ = 0"));
		Запрос.УстановитьПараметр("Наименование" + Формат(Индекс, "ЧГ = 0"), ЧастиНаименования[Индекс]);
		Если ЧастиЗапроса.Количество() > 0 Тогда
			ЧастьЗапроса = СтрЗаменить(ЧастьЗапроса, "ПОМЕСТИТЬ ВТ_Виды", "");
			ЧастьЗапроса = СтрЗаменить(ЧастьЗапроса, "РАЗРЕШЕННЫЕ", "");
		КонецЕсли;	
		ЧастиЗапроса.Добавить(ЧастьЗапроса);	
	КонецЦикла;
	
	Если ЧастиЗапроса.Количество() = 0 Тогда
		Возврат МассивВидов;
	КонецЕсли;	
	
	ТекстЗапроса = СтрСоединить(ЧастиЗапроса, " ОБЪЕДИНИТЬ ВСЕ ");
	ТекстЗапроса = ТекстЗапроса + ";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Виды.Ссылка
		|ИЗ
		|	ВТ_Виды КАК ВТ_Виды";
		
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции	

// Ищет шаблоны документа для загрузки по полученым свойствам вида документа
// Найденные шаблоны помещаются в параметр ШаблоныДокумента
// 
// Параметры:
//  ШаблоныДокумента - См. ИнтеграцияShareДокументооборотКлиентСервер.ШаблоныДляЗагрузкиДокумента
//  СвойстваВидаДокумента - Структура:
//   * Наименование - Строка
//   * ЯвляетсяДоговором - Булево,Неопределено
//   * ЯвляетсяИсходящейКорреспонденцией - Булево,Неопределено
//  Организация - СправочникСсылка.Организации
//  Контрагент - СправочникСсылка.Контрагенты 
//
Процедура ЗаполнитьШаблоныДокументаДляЗагрузки(ШаблоныДокумента, СвойстваВидаДокумента, Организация, Контрагент)
	
	ШаблоныДокумента.НаименованиеВидаДокумента = СвойстваВидаДокумента.Наименование;
	
	ЯвляетсяВходящейКорреспонденцией = СвойстваВидаДокумента.ЯвляетсяИсходящейКорреспонденцией;
	ЯвляетсяДоговором = СвойстваВидаДокумента.ЯвляетсяДоговором;
	Наименование = СвойстваВидаДокумента.Наименование;
	
	ШаблонДокумента = РегистрыСведений.Сервис1СShareКэшВидовДокументов.ШаблонДокумента(Организация, Контрагент,
		Наименование);
	Если ЗначениеЗаполнено(ШаблонДокумента.ШаблонДокумента) Тогда
		ЗаполнитьЗначенияСвойств(ШаблоныДокумента, ШаблонДокумента);		
		ШаблоныДокумента.ЗаписатьКэш = Ложь;
		ШаблоныДокумента.НайденВКэше = Истина;
		ВидДокумента = ОбщегоНазначенияДокументооборот.
			ЗначениеРеквизитаОбъектаВПривилегированномРежиме(ШаблонДокумента.ШаблонДокумента, "ВидДокумента");
		Если ЕстьПраваНаШаблоны(ВидДокумента) Тогда
 			ШаблоныДокумента.ВидыДокументов.Добавить(ВидДокумента);
 			Возврат;
		КонецЕсли;
		// Если в кэше найдены вид, шаблоны, на которые у пользователя нет прав, то продолжаем поиск
		// видов документов по свойствам загружаемого вида, чтобы у пользователя была возможность
		// выбрать другой вид документа кроме вида из кэша
	КонецЕсли;	
	
	ВидыДокументов = ВидыДокументовПоНаименованию(Наименование);
	ВсяВходящаяКорреспонденция = Ложь;
	Если ВидыДокументов.Количество() > 0 И ЯвляетсяВходящейКорреспонденцией = Истина Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Истина
			|ИЗ
			|	Справочник.ВидыДокументов КАК ВидыДокументов
			|ГДЕ
			|	ВидыДокументов.ЯвляетсяВходящейКорреспонденцией
			|	И ВидыДокументов.Ссылка В (&ВидыДокументов)";
		
		Запрос.УстановитьПараметр("ВидыДокументов", ВидыДокументов);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВсяВходящаяКорреспонденция = РезультатЗапроса.Пустой();
		
	КонецЕсли;
	Если ВидыДокументов.Количество() = 0 И ЯвляетсяДоговором = Неопределено
		И ЯвляетсяВходящейКорреспонденцией = Неопределено Тогда
			Возврат;
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ШаблоныДокументов.Ссылка КАК Шаблон,
		|	ВидыДокументов.Ссылка КАК ВидДокумента
		|ИЗ
		|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО ШаблоныДокументов.ВидДокумента = ВидыДокументов.Ссылка";	
	
	Если Не ВсяВходящаяКорреспонденция И ВидыДокументов.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + " И ВидыДокументов.Ссылка В (&ВидыДокументов)";
		Запрос.УстановитьПараметр("ВидыДокументов", ВидыДокументов);
	КонецЕсли;	

	Если ЯвляетсяДоговором <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ВидыДокументов.ЯвляетсяДоговором = &ЯвляетсяДоговором";
		Запрос.УстановитьПараметр("ЯвляетсяДоговором", ЯвляетсяДоговором);
	КонецЕсли;
	
	Если ЯвляетсяВходящейКорреспонденцией <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ВидыДокументов.ЯвляетсяВходящейКорреспонденцией = &ЯвляетсяВходящейКорреспонденцией";
		Запрос.УстановитьПараметр("ЯвляетсяВходящейКорреспонденцией", ЯвляетсяВходящейКорреспонденцией);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " ИТОГИ ПО ВидДокумента";
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаВидов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидДокумента");	
	Пока ВыборкаВидов.Следующий() Цикл
		ШаблоныДокумента.ВидыДокументов.Добавить(ВыборкаВидов.ВидДокумента);
		Выборка = ВыборкаВидов.Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблоныДокумента.Шаблоны.Добавить(Выборка.Шаблон);
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ШаблоныДокумента.ШаблонДокумента) И Не ШаблоныДокумента.НайденВКэше
		И ШаблоныДокумента.Шаблоны.Количество() = 1 Тогда
			ШаблоныДокумента.ШаблонДокумента = ШаблоныДокумента.Шаблоны[0];
	КонецЕсли;
		
	Если ШаблоныДокумента.ВидыДокументов.Количество() = 0 И ВидыДокументов.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ШаблоныДокумента.ВидыДокументов, ВидыДокументов);
	КонецЕсли;	
		 		
КонецПроцедуры

// Проверяет, что у пользователя есть права на шаблоны вида документа, полученного из
// РегистрыСведений.Сервис1СShareКэшВидовДокументов.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов
// 
// Возвращаемое значение:
// Булево - Истина, если на шаблоны есть права.
//  
Функция ЕстьПраваНаШаблоны(ВидДокумента)
	
	Если Не ОбщегоНазначенияДокументооборот.СсылкаСуществует(ВидДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Истина
		|ИЗ
		|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|ГДЕ
		|	ШаблоныДокументов.ВидДокумента = &ВидДокумента
		|	И НЕ ШаблоныДокументов.ЭтоГруппа
		|	И НЕ ШаблоныДокументов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Свойства вида документа для поиска нужного вида при загрузке.
// 
// Возвращаемое значение:
//  Структура:
// 	 * ЯвляетсяИсходящейКорреспонденцией - Неопределено, 
// 	 									 - Булево
// 	 * ЯвляетсяДоговором - Неопределено,
// 						 - Булево
// 	 * Наименование - Строка
//
Функция СвойстваВидаДокумента()
	
	СвойстваВидаДокумента = Новый Структура;
	СвойстваВидаДокумента.Вставить("ЯвляетсяИсходящейКорреспонденцией", Неопределено);
	СвойстваВидаДокумента.Вставить("ЯвляетсяДоговором", Неопределено);
	СвойстваВидаДокумента.Вставить("Наименование", "");
	
	Возврат СвойстваВидаДокумента;
	
КонецФункции

// Ищет документ в базе по идентификатору, полученному из основного файла документа, найденный
// документ записывает в параметр ОписаниеЭлектронногоДокумента
// 
// Параметры:
//  ОписаниеЭлектронногоДокумента - см. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
//  ИдентификаторДокумента - Строка - Уникальный идентификатор документа
// 
// Возвращаемое значение:
//  Булево - Истина, если документ найден в базе
//
Функция ДокументНайденВБазе(ОписаниеЭлектронногоДокумента, ИдентификаторДокумента)
	
	ДокументДО = Справочники.ДокументыПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(
		ИдентификаторДокумента));
	Если  ОбщегоНазначенияДокументооборот.СсылкаСуществует(ДокументДО, Истина) Тогда
		ОписаниеЭлектронногоДокумента.ДанныеЗагрузкиДокумента.ОбъектУчета = ДокументДО;
		ОписаниеЭлектронногоДокумента.ДоступКДокументуЗакрыт =  Не ОбщегоНазначенияДокументооборот.
			СсылкаСуществует(ДокументДО);	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

Функция ТекстЗапросаДанныхСторонДокумента()
	
	Возврат
	
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Сторона,
		|	""Организация"" КАК ТипСтороны,
		|	Организации.ИНН КАК ИНН,
		|	Организации.ЮрФизЛицо КАК ЮрФизЛицо,
		|	Организации.ОсновнойБанковскийСчет КАК БанковскийСчет,
		|	Организации.НаименованиеПолное КАК НаименованиеПолное,
		|	ЕСТЬNULL(БанковскиеСчета.НомерСчета, """") КАК НомерСчета,
		|	"""" КАК РегистрационныйНомер,
		|	ЕСТЬNULL(КлассификаторБанков.Код, """") КАК БИК,
		|	ЕСТЬNULL(КлассификаторБанков.КоррСчет, """") КАК КоррСчет
		|ИЗ
		|	Справочник.ДокументыПредприятия.Стороны КАК ДокументыПредприятияСтороны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|				ПО БанковскиеСчета.Банк = КлассификаторБанков.Ссылка
		|			ПО Организации.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
		|		ПО ДокументыПредприятияСтороны.Сторона = Организации.Ссылка
		|		И ДокументыПредприятияСтороны.Ссылка = &ДокументДО
		|		И &ВестиУчетСторон
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	""Контрагент"",
		|	ВЫБОР
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ЕСТЬNULL(ФизическиеЛица.ИНН, """")
		|		ИНАЧЕ Контрагенты.ИНН
		|	КОНЕЦ,
		|	Контрагенты.ЮрФизЛицо,
		|	Контрагенты.ОсновнойБанковскийСчет,
		|	Контрагенты.НаименованиеПолное,
		|	ЕСТЬNULL(БанковскиеСчета.НомерСчета, """"),
		|	Контрагенты.РегистрационныйНомер,
		|	ЕСТЬNULL(КлассификаторБанков.Код, """"),
		|	ЕСТЬNULL(КлассификаторБанков.КоррСчет, """")
		|ИЗ
		|	Справочник.ДокументыПредприятия.Стороны КАК ДокументыПредприятияСтороны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|				ПО БанковскиеСчета.Банк = КлассификаторБанков.Ссылка
		|			ПО Контрагенты.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|			ПО Контрагенты.ФизЛицо = ФизическиеЛица.Ссылка
		|		ПО ДокументыПредприятияСтороны.Сторона = Контрагенты.Ссылка
		|		И ДокументыПредприятияСтороны.Ссылка = &ДокументДО
		|		И &ВестиУчетСторон
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	""Контрагент"",
		|	ВЫБОР
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ЕСТЬNULL(ФизическиеЛица.ИНН, """")
		|		ИНАЧЕ Контрагенты.ИНН
		|	КОНЕЦ,
		|	Контрагенты.ЮрФизЛицо,
		|	Контрагенты.ОсновнойБанковскийСчет,
		|	Контрагенты.НаименованиеПолное,
		|	ЕСТЬNULL(БанковскиеСчета.НомерСчета, """"),
		|	Контрагенты.РегистрационныйНомер,
		|	ЕСТЬNULL(КлассификаторБанков.Код, """"),
		|	ЕСТЬNULL(КлассификаторБанков.КоррСчет, """")
		|ИЗ
		|	Справочник.ДокументыПредприятия.Контрагенты КАК ДокументыПредприятияКонтрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|				ПО БанковскиеСчета.Банк = КлассификаторБанков.Ссылка
		|			ПО Контрагенты.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|			ПО Контрагенты.ФизЛицо = ФизическиеЛица.Ссылка
		|		ПО ДокументыПредприятияКонтрагенты.Контрагент = Контрагенты.Ссылка
		|ГДЕ
		|	НЕ &ВестиУчетСторон
		|	И ДокументыПредприятияКонтрагенты.Ссылка = &ДокументДО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	""Организация"",
		|	Организации.ИНН,
		|	Организации.ЮрФизЛицо,
		|	Организации.ОсновнойБанковскийСчет,
		|	Организации.НаименованиеПолное,
		|	ЕСТЬNULL(БанковскиеСчета.НомерСчета, """"),
		|	"""",
		|	ЕСТЬNULL(КлассификаторБанков.Код, """"),
		|	ЕСТЬNULL(КлассификаторБанков.КоррСчет, """")
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|			ПО БанковскиеСчета.Банк = КлассификаторБанков.Ссылка
		|		ПО Организации.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
		|ГДЕ
		|	НЕ &ВестиУчетСторон
		|	И Организации.Ссылка = &Организация";
	
КонецФункции	

// Возвращает код страны из адреса нерезидента.
// 
// Параметры:
//  НеРезидент - ОпределяемыйТип.ВладелецКонтактнойИнформации
//  ДатаСреза  - Дата, Неопределено - дата среза, на которую будет производиться поиск адреса
//  
// Возвращаемое значение:
//  Строка - Значение кода страны.
//
Функция КодСтраныНеРезидента(НеРезидент, ДатаСреза)
	
	КодСтраны = "";
	ДатаСреза = ?(ЗначениеЗаполнено(ДатаСреза), ДатаСреза, ТекущаяДатаСеанса());
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(НеРезидент,
		Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента, ДатаСреза, Ложь);
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		
		АдресЗначение = КонтактнаяИнформация[0].Значение;
		Адрес = РаботаСАдресами.СведенияОбАдресе(АдресЗначение, Новый Структура("КодыАдреса", Ложь));
		
		Возврат Адрес.КодСтраны;

	КонецЕсли;

	Возврат КодСтраны;

КонецФункции

#КонецОбласти