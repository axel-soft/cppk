////////////////////////////////////////////////////////////////////////////////
// Работа с процессами по действиям (события): содержит сервернные обработчики событий,
// которые используются для взаимодействия процессов с действиями.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область СобытияДействий

// Выполняется при записи действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
Процедура ПередЗаписьюДействия(Действие) Экспорт
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ПередЗаписьюДействияИсполняемогоПроцессами(Действие);
		
КонецПроцедуры

// Выполняется при записи действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
Процедура ПриЗаписиДействия(Действие) Экспорт
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами()
		Или ДействияСервер.ПризнакЗаписиДействияПослеРазменованияДляЗапуска(Действие) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ПриЗаписиДействияИсполняемогоПроцессами(Действие);
	
	РаботаСПроцессамиПоДействиям.ОбновитьПометкуУдаленияПроцессовДействия(Действие);
	
	Если ДействияСервер.ПризнакЗаписиДействияПриПомещенииВИсторию(Действие) Тогда                        
		Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие.Ссылка) Тогда
			РаботаСПроцессамиПоДействиям.ПрерватьДействиеОзнакомления(Действие.Ссылка);
		Иначе	
			РаботаСПроцессамиПоДействиям.ПрерватьПроцессыДействияПриПомещенииДействияВИсторию(Действие.Ссылка);
		КонецЕсли;
	Иначе
		РаботаСПроцессамиПоДействиям.ОбновитьПроцессыПоДействию(Действие);
		НачатьВыполнениеДействияСНовымиУчастниками(Действие);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает обновление результата выполнения действия.
// 
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
// Возвращаемое значение:
//  Булево
//
Функция ОбработатьОбновлениеРезультатаВыполненияДействия(Действие) Экспорт
			
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ЗадачиПроцессовПоУчастникам = 
		РаботаСПроцессамиПоДействиям.ЗадачиПроцессовПоУчастникамДействий(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие));
	
	ЗадачиПроцессовПоУчастникам = ЗадачиПроцессовПоУчастникам[Действие];
	
	Если ЗадачиПроцессовПоУчастникам.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗадачиПроцессов = Новый Массив();
	Для Каждого УчастникЗадача Из ЗадачиПроцессовПоУчастникам Цикл
		ЗадачиПроцессов.Добавить(УчастникЗадача.Значение);
	КонецЦикла; 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.БизнесПроцесс
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка В (&ЗадачиПроцессов)
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
	Запрос.УстановитьПараметр("ЗадачиПроцессов", ЗадачиПроцессов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Берем процесс любой задачи. Это будет достаточно для проверки.
	// Для процессов Исполнения и Рассмотрения метод ПроцессЗавершенСПоложительнымРезультатом
	// всегда возврвщает Ложь, поэтому можно не учитывать, что их может быть несколько текущих
	// для исполнения одного действия. В остальных случаях действие в текущий момент времени
	// исполняется одним процессом. 
	Если БизнесПроцессыИЗадачиСервер.ПроцессЗавершенСПоложительнымРезультатом(Выборка.БизнесПроцесс) Тогда		
		Возврат Ложь;
	КонецЕсли; 
		
	// Отключаем обновление результата выполнения действия, пока есть активные задачи процессов,
	// исполняющие действие. Обновление результата будет инициировано при завершении процесса.
	// Задачи ознакомления с положительном результатом не учитываем,
	// они не влияют на действие.
	Возврат Истина;
	
КонецФункции

// Выполняется при изменения состояния действия.
//
// Предназначена для вызова из РегистрыСведений.СостоянияДействий.УстановитьСостояние.
//
// Параметры:
//  см. соответствующие параметры РегистрыСведений.СостоянияДействий.УстановитьСостояние.
//
Процедура ПриИзмененииСостоянияДействия(ДействиеСсылка, Состояние, ПараметрыУчастника) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыУчастника) И 
		ПараметрыУчастника.Свойство("ВыполненоВнеПрограммы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыУчастника)
		И (ЗначениеЗаполнено(ПараметрыУчастника.Функция)
			Или ЗначениеЗаполнено(ПараметрыУчастника.Участник)
			Или ЗначениеЗаполнено(ПараметрыУчастника.ИдентификаторУчастника)
			Или ЗначениеЗаполнено(ПараметрыУчастника.ИдентификаторПункта)) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(ДействиеСсылка) Тогда
		РаботаСПроцессамиПоДействиям.ОстановитьПродолжитьДействиеОзнакомления(ДействиеСсылка, Состояние);
	Иначе	
		РаботаСПроцессамиПоДействиям.ОстановитьПродолжитьПроцессыПоСостояниюДействия(ДействиеСсылка, Состояние);
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при прерывании выполнения действия.
// Предназначена для вызова из ДействиеСервер.ПрерватьВыполнениеДействия.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//
Процедура ПриПрерыванииВыполнениеДействия(Действие) Экспорт
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСПроцессамиПоДействиям.ПрерватьПроцессыПриПрерыванииДействия(Действие);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЗадач

// Выполняет в момент события ПередИнтерактивнымВыполнениемДействия.
// Предназначена для вызова из аналогичной процедуры в общ. модуле ИнтеграцияЗадач.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи - Действия задач.
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач().
//  ДанныеВыполнения - Структура - Данные о выполнении. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи().
//  ПриложенияЗадач - Соответствие - Данные приложений задач.
//   * Ключ - ДокументСсылка.ДействиеЗадачи.
//   * Значение - Массив из Структура - См. РаботаСЗадачами.ДанныеПриложенияЗадачи().
//
Процедура ПередИнтерактивнымВыполнениемДействия(
	ДействияЗадач,
	РезультатДействия,
	ПараметрыВыполнения,
	ДанныеВыполнения,
	ПриложенияЗадач) Экспорт
	
	Если Не ДанныеВыполнения.Свойство("ДополнительныеПараметры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеВыполнения.ДополнительныеПараметры.Свойство("БизнесПроцесс")
		И ДанныеВыполнения.ДополнительныеПараметры.Свойство("РезультатВыполнения") Тогда
		
		ПроцессВыполняетДействие = РаботаСПроцессамиПоДействиям.ПроцессВыполняетДействие(
			ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс);
		
		ДействиеИПункт = РегистрыСведений.ПроцессыДействий.ДействиеСПунктомПоПроцессу(
			ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс);
		Действие = ДействиеИПункт.Действие;
		ИдентификаторПункта = ДействиеИПункт.Пункт;
		
		РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(Действие);
		
		ИдентификаторВышестоящегоИсполнения = УникальныйИдентификаторПустой();
		
		Если ПроцессВыполняетДействие
			И Не ЗначениеЗаполнено(ИдентификаторПункта)
			И ДанныеВыполнения.ДополнительныеПараметры.Свойство("ТочкаМаршрута")
			И ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута = 
				БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
			
			ИдентификаторВышестоящегоИсполнения =
				ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
					ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс,
					"ГлавнаяЗадача.ИдентификаторИсполнителя");
			
			Если ЗначениеЗаполнено(ИдентификаторВышестоящегоИсполнения) Тогда
				
				УчастникиДействия = 
					ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
						Действие, "Участники");
				УчастникиДействия = УчастникиДействия.Выгрузить();
				
				СтрокаУчастника = УчастникиДействия.Найти(
					ИдентификаторВышестоящегоИсполнения, "Идентификатор");
				
				Если СтрокаУчастника <> Неопределено
					И ЗначениеЗаполнено(СтрокаУчастника.ВышестоящийУчастник) Тогда
				
					ИдентификаторВышестоящегоИсполнения = СтрокаУчастника.ВышестоящийУчастник;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить(
			"ПроцессВыполняетДействие", ПроцессВыполняетДействие);
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("Действие", Действие);
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить(
			"ДействиеЗавершено", ЗначениеЗаполнено(РезультатДействия));
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ИдентификаторПункта", ИдентификаторПункта);
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить(
			"ИдентификаторВышестоящегоИсполнения", ИдентификаторВышестоящегоИсполнения);
		
	ИначеЕсли ДанныеВыполнения.ДополнительныеПараметры.Свойство("ЗадачаПроцесса")
			И ДанныеВыполнения.ДополнительныеПараметры.Свойство("ВариантРассмотрения")
			И ДанныеВыполнения.ДополнительныеПараметры.ВариантРассмотрения = 
				Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда
		
		РеквизитыЗадачи = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ДанныеВыполнения.ДополнительныеПараметры.ЗадачаПроцесса, "БизнесПроцесс, Предметы");
		РеквизитыЗадачи.Предметы = РеквизитыЗадачи.Предметы.Выгрузить();
		
		ПроцессЗадачи = РеквизитыЗадачи.БизнесПроцесс;
		
		ПроцессВыполняетДействие = РаботаСПроцессамиПоДействиям.ПроцессВыполняетДействие(
			ПроцессЗадачи);
		
		ВышестоящийУчастник = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			ПроцессЗадачи, "ИдентификаторИсполнителя");
		
		Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(ПроцессЗадачи);
		
		НаименованиеИсполнения = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			НСтр("ru = 'Исполнить'"), РеквизитыЗадачи.Предметы);
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить(
			"ПроцессВыполняетДействие", ПроцессВыполняетДействие);
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("Действие", Действие);
			
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("ВышестоящийУчастник", ВышестоящийУчастник);
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить("НаименованиеИсполнения", НаименованиеИсполнения);
	
	ИначеЕсли ДанныеВыполнения.ДополнительныеПараметры.Свойство("ПредметРассмотрения")
		И ДанныеВыполнения.ДополнительныеПараметры.Свойство("БизнесПроцессПредметаРассмотрения") Тогда
		
		ПроцессПредметаРассмотренияВыполняетДействие = 
			РаботаСПроцессамиПоДействиям.ПроцессВыполняетДействие(
				ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцессПредметаРассмотрения);
		
		ДанныеВыполнения.ДополнительныеПараметры.Вставить(
			"ПроцессПредметаРассмотренияВыполняетДействие",
			ПроцессПредметаРассмотренияВыполняетДействие);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЗадачПроцессов

// Выполняется при записи задачи процесса, выполняя необходимые опреации над дейсвием процесса.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача процесса.
//
Процедура ПриЗаписиЗадачиПроцесса(Задача) Экспорт
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Задача.ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	Если Задачи.ЗадачаИсполнителя.ЭтаСлужебнаяЗадачаПроцесса(Задача) Тогда
		Возврат;
	КонецЕсли;

	Действие = РаботаСПроцессамиПоДействиям.ДействиеЗадачиПроцесса(Задача);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	// При завершении задач после завершения процесса ничего не делаем с действием.
	// Это задачи ознакомления с положительным результатом выполнения.
	// Они не тормозят процесс и создаются после его завершения.
	Если ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		Задача.БизнесПроцесс, "Завершен") Тогда

		Возврат;
	КонецЕсли;
	
	// Если это исключенная задача, то она не влияет на действие,
	// Т.к. исключение выполняется при удалении участника из действия.
	// В этом случае все необходимое с действием и его окружением выполняется при его записи.
	// Процесс в этом случае только перестраивается под новых участников действий, исключая лишние задачи.
	Если Задача.ИсключенаИзПроцесса Тогда
		Возврат;
	КонецЕсли;

	ОбработатьСозданиеЗадачиПроцесса(Задача, Действие);
	ОбработатьПринятиеКИсполнениюЗадачиПроцесса(Задача, Действие);
	ОбработатьОтменуПринятияКИсполнениюЗадачиПроцесса(Задача, Действие);
	ОбработатьСозданиеДопУчастников(Задача, Действие);
	ОбработатьИзменениеСостоянияЗадачи(Задача, Действие);
	
	Если ЗначениеЗаполнено(Задача.СрокИсполнения) Тогда
		РегистрыСведений.СведенияОбУчастникахДействий.ЗаписатьСрок(Действие, Задача.ИдентификаторИсполнителя, Задача.СрокИсполнения);
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при начале выполнения задачи процесса.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача процесса.
//  Параметры - Структура - произвольные параметры выполнения.
//
Процедура ПриВыполненииЗадачиСПараметрами(Задача, ПараметрыВыполнения) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);

	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;

	Действие = РаботаСПроцессамиПоДействиям.ДействиеЗадачиПроцесса(Задача);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Задача) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		ЗадачаОбъект = Задача;
	Иначе
		ЗадачаОбъект = Задача.ПолучитьОбъект();
	КонецЕсли;
	
	// При завершении задач после завершения процесса ничего не делаем с действием.
	// Это задачи ознакомления с положительным результатом выполнения.
	// Они не тормозят процесс и создаются после его завершения.
	Если ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		ЗадачаОбъект.БизнесПроцесс, "Завершен") Тогда

		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = РаботаСПроцессамиПоДействиям.РезультатВыполненияЗадачиПоПараметрамВыполнения(
		ЗадачаОбъект.ТочкаМаршрута, ПараметрыВыполнения);
		
	Если ПараметрыВыполнения.Свойство("РезультатВыполнения") Тогда
		Комментарий = ПараметрыВыполнения.РезультатВыполнения;
	Иначе
		Комментарий = ЗадачаОбъект.РезультатВыполнения;
	КонецЕсли;
	
	ФактическийИсполнитель = РаботаСПроцессамиПоДействиям.ИсполнительЗадачиПоПараметраВыполнения(
		ПараметрыВыполнения);
	
	ВыбранныйИсполнитель = Неопределено;
	Если ПараметрыВыполнения.Свойство("ВыбранныйПодписывающийИлиЗамещающий")
		И ЗначениеЗаполнено(ПараметрыВыполнения.ВыбранныйПодписывающийИлиЗамещающий) Тогда
		ВыбранныйИсполнитель = ПараметрыВыполнения.ВыбранныйПодписывающийИлиЗамещающий;
	КонецЕсли;
	
	ФактическийИсполнительПолный = Неопределено;
	Если ПараметрыВыполнения.Свойство("ФактическийИсполнительПолный")
			И ЗначениеЗаполнено(ПараметрыВыполнения.ФактическийИсполнительПолный) Тогда
				
		ФактическийИсполнительПолный = ПараметрыВыполнения.ФактическийИсполнительПолный;
	КонецЕсли;
	
	ПараметрыИзмененияУчастников =
		РаботаСПроцессамиПоДействиям.ПараметрыИзмененияУчастниковДействияПоЗадаче(
			Действие, 
			ЗадачаОбъект,
			ФактическийИсполнитель, 
			ВыбранныйИсполнитель, 
			ФактическийИсполнительПолный);
	
	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	
	Для Каждого ПараметрыИзмененияУчастника Из ПараметрыИзмененияУчастников Цикл

		СостояниеУчастника = РегистрыСведений.СостоянияДействий.СостояниеДействия(
			Действие, ПараметрыИзмененияУчастника.Функция, ПараметрыИзмененияУчастника.Участник, ,
			ПараметрыИзмененияУчастника.ИдентификаторУчастника);

		Если СостояниеУчастника = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
			Продолжить;
		КонецЕсли;

		РаботаСПроцессамиПоДействиям.ЗаписатьСведенияОбУчастникеДействия(
			Действие, ПараметрыИзмененияУчастника.ИдентификаторУчастника,
			ПараметрыИзмененияУчастника.ФактическийИсполнитель,
			ПараметрыИзмененияУчастника.ФактическийИсполнительПолный,
			Задача.СрокИсполнения,
			Задача.Дата);
		
		Если Не Задача.ПринятаКИсполнению Тогда 
			МенеджерДействия.ОтметитьПринятиеКИсполнению(Действие, ПараметрыИзмененияУчастника);
		КонецЕсли;
		
		РезультатВыполненияДействия = РаботаСПроцессамиПоДействиям.РезультатВыполненияУчастникаДействияПоРезультатуЗадачи(
			ПараметрыИзмененияУчастника.Функция, ЗадачаОбъект.ТочкаМаршрута, РезультатВыполнения);

		УчастникСтруктура = Новый Структура("Участник, ФункцияУчастника, ИдентификаторУчастника",
			ПараметрыИзмененияУчастника.Участник, ПараметрыИзмененияУчастника.Функция,
			ПараметрыИзмененияУчастника.ИдентификаторУчастника);
		УчастникСтруктура.Вставить("ФактическийИсполнительПолный", 
				ПараметрыИзмененияУчастника.ФактическийИсполнительПолный);

		Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания") 
			И ПараметрыВыполнения.Свойство("ПредметыСВыбраннымиОрганизациями") Тогда
			Справочники.ДействияПодписания.ЗаписатьОрганизациюУчастника(Действие,
				УчастникСтруктура.ИдентификаторУчастника,
				ПараметрыВыполнения.ПредметыСВыбраннымиОрганизациями);
		КонецЕсли;
		
		ПодписиЭП = Неопределено;
		Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") 
			И ПараметрыВыполнения.Свойство("ПодписиКВизамСогласования")
			И ТипЗнч(ПараметрыВыполнения.ПодписиКВизамСогласования) = Тип("Соответствие") Тогда
			ПодписиЭП = ПараметрыВыполнения.ПодписиКВизамСогласования;
			
		ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения") 
			И ПараметрыВыполнения.Свойство("ПодписиКРезолюциямПредметов")
			И ТипЗнч(ПараметрыВыполнения.ПодписиКРезолюциямПредметов) = Тип("Соответствие") Тогда
			ПодписиЭП = ПараметрыВыполнения.ПодписиКРезолюциямПредметов; 
		КонецЕсли;
		
		ДатаИсполнения = Неопределено;
		Если ПараметрыВыполнения.Свойство("ДатаИсполнения") 
			И ЗначениеЗаполнено(ПараметрыВыполнения.ДатаИсполнения) Тогда
			ДатаИсполнения = ПараметрыВыполнения.ДатаИсполнения;
		КонецЕсли;
		
		ЕстьФайлыОтчета = Ложь;
		Если ПараметрыВыполнения.Свойство("ЕстьФайлыОтчета") Тогда
			ЕстьФайлыОтчета = ПараметрыВыполнения.ЕстьФайлыОтчета;
		КонецЕсли;
		
		ПараметрыВыполненияСтруктура = ДействияКлиентСервер.СтруктураОтметитьРезультатВыполнения();
		ПараметрыВыполненияСтруктура.Комментарий = Комментарий;
		ПараметрыВыполненияСтруктура.НомерИтерации = ПараметрыИзмененияУчастника.НомерИтерации;
		ПараметрыВыполненияСтруктура.ДатаИсполнения = ДатаИсполнения;
		ПараметрыВыполненияСтруктура.ПодписиЭП = ПодписиЭП;
		ПараметрыВыполненияСтруктура.ЕстьФайлыОтчета = ЕстьФайлыОтчета;   
		
		Если ПараметрыВыполнения.Свойство("ЭтоВыполнениеЗадачиПоПочте") Тогда
			ПараметрыВыполненияСтруктура.ЭтоВыполнениеЗадачиПоПочте = ПараметрыВыполнения.ЭтоВыполнениеЗадачиПоПочте;
		КонецЕсли;	

		Если ПараметрыВыполнения.Свойство("ЭтоВыполнениеЗадачиПоЭскалации") Тогда
			ПараметрыВыполненияСтруктура.ЭтоВыполнениеЗадачиПоЭскалации = ПараметрыВыполнения.ЭтоВыполнениеЗадачиПоЭскалации;
		КонецЕсли;	
		
		ДействияВызовСервера.ОтметитьРезультатВыполнения(
			Действие, УчастникСтруктура, РезультатВыполненияДействия, 
			ПараметрыВыполненияСтруктура);

	КонецЦикла;

КонецПроцедуры

// Обрабатывает перенаправление задачи процесса.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя - задача процесса.
//  ИнфоОПеренаправлении - Структура - параметры перенаправления задачи.
//   * Исполнитель - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники
//   * РольИсполнителя - СправочникСсылка.ПолныеРоли
//   * ВладелецРоли - СправочникСсылка.РолиИсполнителей
//   * ОсновнойОбъектАдресации - ХарактеристикаСсылка.ОбъектыАдресацииЗадач
//   * ДополнительныйОбъектАдресации - ХарактеристикаСсылка.ДополнительныеРеквизитыИСведения
//   * Автор - СправочникСсылка.Сотрудники
//   * Комментарий - Строка
//
// Возвращаемое значение:
//  Булево - признак того, что задача была перенаправлена.
//
Функция ОбработатьПеренаправлениеЗадачиПроцесса(ЗадачаПроцесса, ИнфоОПеренаправлении) Экспорт
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РаботаСПроцессамиПоДействиям.ДействиеЗадачиПроцесса(ЗадачаПроцесса);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторУчастника = 
		РаботаСПроцессамиПоДействиям.ИдентификаторУчастникаДействияДляПеренаправленияПоЗадаче(
		Действие, ЗадачаПроцесса);
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Действие);
		ДействиеОбъект = Действие.ПолучитьОбъект();
		
		НовыйУчастник = ИнфоОПеренаправлении.Исполнитель;
		Если ЗначениеЗаполнено(ИнфоОПеренаправлении.РольИсполнителя) Тогда
			НовыйУчастник = ИнфоОПеренаправлении.РольИсполнителя;
		КонецЕсли;	
		
		ДействиеОбъект.ЗаменитьУчастника(
			ИдентификаторУчастника, НовыйУчастник, ИнфоОПеренаправлении.Комментарий, ИнфоОПеренаправлении.Автор);
		ДействиеОбъект.ДополнительныеСвойства.Вставить("ЭтоПеренаправлениеЗадачи", Истина);
		ДействиеОбъект.Записать();
		
		РегистрыСведений.СведенияОбУчастникахДействий.ОбновитьФактическийИсполнитель(Действие, ИдентификаторУчастника, НовыйУчастник);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Обработать изменение срока исполнения задачи.
// 
// Параметры:
//  НовыйСрок - Дата
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя
//  ПричинаПереносаСрока - Строка - причина переноса срока.
//  ЗаявкаНаПеренос - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - заявка на перенос срока.
// 
// Возвращаемое значение:
//  Булево - признак того, что изменение срока обработано.
//
Функция ОбработатьИзмениеСрокаИсполненияЗадачи(
	НовыйСрок, Задача, ПричинаПереносаСрока, ЗаявкаНаПеренос) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РаботаСПроцессамиПоДействиям.ДействиеЗадачиПроцесса(Задача);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторУчастника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Задача, "ИдентификаторИсполнителя");
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Действие);
		ДействиеОбъект = Действие.ПолучитьОбъект();
		
		ДействиеОбъект.УстановитьСрокИсполненияУчастнику(
			ИдентификаторУчастника,
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок,
			НовыйСрок, 0, 0, 0);
		
		Если ДействиеОбъект.Модифицированность() Тогда
			РаботаСПроцессамиПоДействиям.ДобавитьСведенияОПереносеСрокаВДопСвойстваДействия(
				ДействиеОбъект, ПричинаПереносаСрока, ЗаявкаНаПеренос);
			ДействиеОбъект.Записать();
		КонецЕсли;
		
		РегистрыСведений.СведенияОбУчастникахДействий.ЗаписатьСрок(Действие, ИдентификаторУчастника, НовыйСрок);
		
		РазблокироватьДанныеДляРедактирования(Действие);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает запись события перенаправления задачи процесса.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя - задача процесса.
//
// Возвращаемое значение:
//  Булево - признак того, что была выполнена запись события перенаправления.
//
Функция ОбработатьЗаписатьСобытияПеренаправленияЗадачиПроцесса(ЗадачаПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РаботаСПроцессамиПоДействиям.ДействиеЗадачиПроцесса(ЗадачаПроцесса);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтарыеРеквизиты = 
		ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		ЗадачаПроцесса.Ссылка, "Исполнитель, РольИсполнителя");
	
	БылИсполнитель = СтарыеРеквизиты.Исполнитель;
	Если Не ЗначениеЗаполнено(БылИсполнитель) Тогда
		БылИсполнитель = СтарыеРеквизиты.РольИсполнителя;
	КонецЕсли;
	
	СталИсполнитель = ЗадачаПроцесса.Исполнитель;
	Если Не ЗначениеЗаполнено(СталИсполнитель) Тогда
		СталИсполнитель = ЗадачаПроцесса.РольИсполнителя;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХодОбработки.Описание КАК Описание,
		|	ХодОбработки.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ХодОбработки КАК ХодОбработки
		|ГДЕ
		|	ХодОбработки.Обработка = &Обработка
		|	И ХодОбработки.Участник = &Участник
		|	И ХодОбработки.Действие = &Действие
		|	И ХодОбработки.ИдентификаторУчастника = &ИдентификаторУчастника
		|	И ХодОбработки.ТипСобытия = &ТипСобытия
		|УПОРЯДОЧИТЬ ПО
		|	ХодОбработки.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("Обработка", 
		РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие));
	
	Запрос.УстановитьПараметр("Участник", БылИсполнитель);
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("ИдентификаторУчастника", ЗадачаПроцесса.ИдентификаторИсполнителя);
	Запрос.УстановитьПараметр("ТипСобытия", Перечисления.ТипСобытияХодаОбработки.ИзменениеУчастников);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Ложь; // Если в ходе обработки ничего нет, то формируем стандартным образом комментарий перенаправлена.
	КонецЕсли;
	
	// Шаблон описания 'Участник %1 заменен на %2. Причина: %3'.
	Причина = "";
	ПозицияРазделителя = СтрНайти(Выборка.Описание, ":");
	Если ПозицияРазделителя <> 0 Тогда
		Причина = СокрЛП(Сред(Выборка.Описание, ПозицияРазделителя + 1));
	КонецЕсли;
	
	АвторСобытия = Выборка.Сотрудник;
	
	Комментарий = СтрШаблон(
		НСтр("ru = 'От исполнителя: %1 к исполнителю: %2'"),
		БылИсполнитель, СталИсполнитель);
	Если ЗначениеЗаполнено(Причина) Тогда
		ШаблонТекста = НСтр("ru = '%1.
			|Комментарий: %2'");
		Комментарий = СтрШаблон(ШаблонТекста, Комментарий, Причина);
	КонецЕсли;
	ИсторияСобытийЗадач.ЗаписатьСобытие(
		ЗадачаПроцесса.Ссылка,
		Перечисления.ВидыСобытийЗадач.Перенаправлена,
		Комментарий);
	
	КонтекстПеренаправления = РегистрыСведений.ИсторияЗадач.КонтекстПеренаправления();
	КонтекстПеренаправления.ОтКого = БылИсполнитель;
	КонтекстПеренаправления.Кому = СталИсполнитель;
	КонтекстПеренаправления.Комментарий = Причина;
	
	РаботаСЗадачами.ДобавитьВИсториюПоИсточнику(
		ЗадачаПроцесса.БизнесПроцесс,
		ЗадачаПроцесса.Ссылка,
		ТекущаяДатаСеанса(),
		Справочники.СобытияЗадач.Перенаправление,
		КонтекстПеренаправления,
		АвторСобытия);
	
	Возврат Истина;
	
КонецФункции

// Выполняется при отмене выполнения задачи.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя - задача процесса.
//
Процедура ПриОтменеВыполненияЗадачи(ЗадачаПроцесса) Экспорт
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(ЗадачаПроцесса.БизнесПроцесс);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИзмененияУчастников = 
		РаботаСПроцессамиПоДействиям.ПараметрыИзмененияУчастниковДействияПоЗадаче(
		Действие, ЗадачаПроцесса);
	
	Для Каждого ПараметрыИзмененияУчастника Из ПараметрыИзмененияУчастников Цикл
		ДействияСервер.ОтменитьВыполнениеДействияУчастником(
			Действие, ПараметрыИзмененияУчастника);
	КонецЦикла;
	
КонецПроцедуры

// В задачах типа "Ознакомиться с результатом"
//  заполним видимость поля Комментарий
Процедура ЗаполнитьВидимостьПоляКомментарий(Процесс, Элемент) Экспорт

	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Элемент.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Элемент.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элемент.Видимость = Истина;
	
КонецПроцедуры

// Обрабатывает добавление помощника в параметры выполнения задачи.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя,
//           ЗадачаОбъект.ЗадачаИсполнителя,
//           ДанныеФормыСтруктура - задача рассматривающего.
//	ОбрабатывающийРезолюцию - Сотрудник, Неопределено - Обрабатыващий резолюцию (если необходимо заполнить) 
// 
Процедура ОбработатьДобавлениеОбрабатывающегоРезолюциюВПараметрыВыполнения(Задача,
	ОбрабатывающийРезолюцию = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = РаботаСПроцессамиПоДействиям.ДействиеЗадачиПроцесса(Задача);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ИдентификаторРассматривающего = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Задача, "ИдентификаторИсполнителя");
	Иначе
		ИдентификаторРассматривающего = Задача.ИдентификаторИсполнителя;
	КонецЕсли;
	
	Если ОбрабатывающийРезолюцию = Неопределено  Тогда
		ОбрабатывающийРезолюцию = БизнесПроцессы.Рассмотрение.ОбрабатывающийРезолюцию(Задача, Действие);
	КонецЕсли;
	
	Справочники.ДействияИсполнения.ОбновитьОбрабатывающегоРезолюциюРассматривающего(
		Действие,
		ИдентификаторРассматривающего,
		ОбрабатывающийРезолюцию);
	
	Возврат;

КонецПроцедуры

// Обрабатывает вычисление возможности выполнения задач процесса согласования по почте.
// Если вычисление возможности обработано в текущем методе, то возвращается Истина, иначе Ложь.
//
// Параметры:
//  РеквизитыЗадачи - Структура
//    * БизнесПроцесс - БизнесПроцессСсылка.Согласование
//    * ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка.Согласование
//    * Ссылка - ЗадачаИсполнителя - ссылка на задачу процесса.
//  ВыполениеВозможно - Булево - признак возможного выполнения задачи по почте, в этот
//                               параметр следует поместить результат.
//
// Возвращаемое значение:
//  Булево
//
Функция ОбработатьВычислениеВозможностиВыполнениеЗадачиПроцессаСогласованияПоПочте(
	РеквизитыЗадачи, ВыполениеВозможно) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(РеквизитыЗадачи.БизнесПроцесс);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "СогласованиеВРежимеЗамечаний")	 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Запрещаем выполнение задач обработки замчений по действию согласования в режиме замечаний,
	// т.к. учет замечаний должен выполняться интерактивно в специальной форме программы.
	
	ВыполениеВозможно =
		(РеквизитыЗадачи.ТочкаМаршрута <> БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться);
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает получение вариантов отчетов для выполнения задачи согласования по почте.
// Функция используется для переопределения стандартной обработки получения вариантов ответов для согласования.
//
// Параметры:
//	ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//				   варианты ответов.
//	БизнесПроцессСсылка - БизнесПроцессСсылка.Согласование - бизнес процесс по которому
//						  назначена задача.
//	ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					БизнесПроцесс
//	КодЯзыкаПолучателя - Строка.
//	ВариантовОтветов - Структура - см. ВариантыОтветовДляВыполненияЗадачиПоПочте в бизнес-процессе Согласование.
//	                               В этот параметр следует поместить результат получения вариантов.
//
// Возвращаемое значение:
//  Булево - Истина, если получения вариантов обработано в функции, иначе Ложь.
//
Функция ОбработатьПолучениеВариантовОтветовДляВыполненияСогласованияПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута,
	КодЯзыкаПолучателя,
	ВариантовОтветов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТочкаМаршрута <> БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РаботаСПроцессамиПоДействиям.ДействиеЗадачиПроцесса(ЗадачаСсылка);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "СогласованиеВРежимеЗамечаний") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВариантовОтветов.СписокВариантовОтветов.Добавить(
		Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
		НСтр("ru = 'Согласовано'", КодЯзыкаПолучателя));
	ВариантовОтветов.СписокВариантовОтветов.Добавить(
		Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
		НСтр("ru = 'Не согласовано'", КодЯзыкаПолучателя));
	
	ВариантовОтветов.ИспользоватьКомментарий = Истина;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает вычисление возможности выполнения задач процесса рассмотрения по почте.
// Если вычисление возможности обработано в текущем методе, то возвращается Истина, иначе Ложь.
//
// Параметры:
//  РеквизитыЗадачи - Структура
//    * БизнесПроцесс - БизнесПроцессСсылка.Рассмотрение
//    * ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка.Рассмотрение
//    * Ссылка - ЗадачаИсполнителя - ссылка на задачу процесса.
//  ВыполениеВозможно - Булево - признак возможного выполнения задачи по почте, в этот
//                               параметр следует поместить результат.
//
// Возвращаемое значение:
//  Булево
//
Функция ОбработатьВычислениеВозможностиВыполнениеЗадачиПроцессаРассмотренияПоПочте(
	РеквизитыЗадачи, ВыполениеВозможно) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(РеквизитыЗадачи.БизнесПроцесс);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ПодписыватьРезолюцииЭП") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Запрещаем выполнение задач "Рассмотреть" по почте, если требуется подписывать резолюции УЭП.
	// По почте УЭП сформировать не получится.
	
	ВыполениеВозможно =
		(РеквизитыЗадачи.ТочкаМаршрута <> БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СобытияПроцессов

// Выполняется при завершении процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект
//
Процедура ПриЗавершенииПроцесса(Процесс) Экспорт

	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс.Ссылка);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат;
	КонецЕсли;

	ЕстьАктивныеПроцессы = Ложь;
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие, Истина);
	Для Каждого ПроцессДействия Из АктивныеПроцессы Цикл
		Если ПроцессДействия = Процесс.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		ЕстьАктивныеПроцессы = Истина;
		Прервать;
	КонецЦикла;
	Если ЕстьАктивныеПроцессы Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	МенеджерДействия.ОбновитьРезультатВыполнения(Действие);
		
КонецПроцедуры

// Обрабатывает получение формы процесса.
//
// Параметры:
//  ВидФормы - Строка
//  Процесс - БизнесПроцессСсылка
//  ВыбраннаяФорма - ФормаКлиентскогоПриложения
//  СтандартнаяОбработка - Булево
//
// Возвращаемое значение:
//  Булево - признак того, что получение было обработано.
//
Функция ОбработатьПолучениеФормыПроцесса(ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы <> "ФормаОбъекта" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Параметры.Свойство("Ключ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Параметры.Ключ);
	Если Действие = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыбраннаяФорма = Метаданные.ОбщиеФормы.ПроцессПоДействию;
	СтандартнаяОбработка = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает создание процесса исполнения по результата рассмотрения.
//
// Параметры:
//  ПроцессРассмотрения - БизнесПроцессОбъект.Рассмотрение
//
// Возвращаемое значение:
//  Булево
//
Функция ОбработатьСозданиеПроцессаИсполненияПоРезультатамРассмотрения(ПроцессРассмотрения) Экспорт
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(ПроцессРассмотрения.Ссылка);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
				
	ИсполнениеОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
	ИсполнениеОбъект.Дата = ТекущаяДатаСеанса();
	ИсполнениеОбъект.ГлавнаяЗадача = ПроцессРассмотрения.ГлавнаяЗадачаДляПодчиненныхПроцессов();
	
	ПроцессОбработки = 
		РаботаСПроцессамиПоОбработкамОбъектов.ПроцессОбработкиПоДействию(Действие);
	
	ЗаблокироватьДанныеДляРедактирования(ПроцессОбработки);
	
	НаименованиеЗадачи = СтрШаблон(
		НСтр("ru = 'Обработка действия ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Действие);
	ЗадачуВыполненияДействия = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
		НаименованиеЗадачи, ПроцессОбработки);
	
	ПроцессОбработкиОбъект = ПроцессОбработки.ПолучитьОбъект();
	ОбработчикСхемы = ПроцессОбработкиОбъект.ОбработчикСхемыПроцесса();
	ПроцессОбработкиОбъект.ДобавитьЗадачуОбработкиЭлемента(
		РаботаСПроцессамиПоОбработкамОбъектов.ИмяЭлементаСхемыОбработкиПоДействию(Действие),
		ЗадачуВыполненияДействия,
		ОбработчикСхемы);
	ПроцессОбработкиОбъект.ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);	
	
	РазблокироватьДанныеДляРедактирования(ПроцессОбработки);
	
	ИсполнениеОбъект.ВедущаяЗадача = ЗадачуВыполненияДействия;
		
	ИсполнениеОбъект.ЗаполнитьПоРассмотрению(ПроцессРассмотрения);
	ИсполнениеОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	ИсполнениеОбъект.Записать();
	
	РегистрыСведений.ПроцессыДействий.Добавить(ИсполнениеОбъект.Ссылка, Действие);
		
	СтартПроцессовСервер.СтартоватьПроцесс(ИсполнениеОбъект);
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает добавление служебной задачи процесса для отложенной обработки завершения точки действия Согласовать.
//
// Возвращаемое значение:
//  Булево - признак того, что обработка была выполнена в текущей процедуре.
//           если обработка не была выполнена, то будет выполнена стандартная обработка.
//
Функция ОбработатьДобавлениеЗадачиОтложеннаяОбработкаЗавершенияСогласования(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс.Ссылка);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "СогласованиеВРежимеЗамечаний") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Готовим действие к завершению отложено, только если в ходе согласования
	// были сформированы замечания и дальше не предполагается его выполнение.
	
	Если Процесс.ИтоговыйРезультатСогласования() <> Перечисления.РезультатыСогласования.Согласовано
		Или Не Процесс.ОбходСогласующихЗавершен()
		Или Не СогласованиеВРежимеЗамечанийСервер.ЕстьЗамечанияВКорнеДействия(Действие) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	// тут вызов в ОбработкаОчередиЗаданийСервер
	Если ОбработкаОчередиЗаданийСервер.ОбработатьДобавлениеЗадачиОтложеннаяОбработкаЗавершенияСогласования(
		Процесс) Тогда
		Возврат Истина;
	КонецЕсли;		
	
	Возврат Ложь;
	
КонецФункции

// Обрабатывает добавление служебной задачи процесса для отложенной подготовки точки действия Ознакомиться.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Согласование
//  ФормируемыеЗадачи - Массив - массив создаваемых задач.
//                      в него следует поместить объект создаваемой задачи.
//                      задачу не следует записывать.
//
// Возвращаемое значение:
//  Булево - признак того, что обработка была выполнена в текущей процедуре.
//           если обработка не была выполнена, то будет выполнена стандартная обработка.
//
Функция ОбработатьДобавлениеЗадачиОтложеннаяПодготовкаОзнакомления(Процесс, ФормируемыеЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс.Ссылка);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "СогласованиеВРежимеЗамечаний")	 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// тут вызов в ОбработкаОчередиЗаданийСервер
	Если ОбработкаОчередиЗаданийСервер.ОбработатьДобавлениеЗадачиОтложеннаяПодготовкаОзнакомления(
		Процесс, ФормируемыеЗадачи) Тогда
		Возврат Истина;
	КонецЕсли;		
	
	Возврат Ложь;
	
КонецФункции

// Создаст служебные задачи. (добавления комментариев в Ворд)
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.Согласование
//  ФормируемыеЗадачи - Массив - массив создаваемых задач.
//                      в него следует поместить объект создаваемой задачи.
//                      задачу не следует записывать.
Процедура СоздатьСлужебныеЗадачиОтложеннаяПодготовкаОзнакомления(
		Процесс, ФормируемыеЗадачи) Экспорт
		
	Если Процесс.РезультатСогласования <> Перечисления.РезультатыСогласования.НеСогласовано Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерПроцесса = БизнесПроцессы.Согласование;
	ЗадачаПроцесса = МенеджерПроцесса.СоздатьСлужебнуюЗадачуПроцесса(
		Процесс.Ссылка,
		МенеджерПроцесса.ТочкиМаршрута.Ознакомиться,
		МенеджерПроцесса.ИмяЗадачиОтложеннаяПодготовкаОзнакомления(Процесс));
	ФормируемыеЗадачи.Добавить(ЗадачаПроцесса);
	
КонецПроцедуры	

// Создаст служебную задачу. (удаления комментариев из Ворд). в точке Ознакомиться.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.Согласование
//  
//  Возвращаемое значение:
//  ЗадачаОбъект.ЗадачаИсполнителя
//
Функция СоздатьСлужебнуюЗадачуОтложеннаяПодготовкаЗавершенияОзнакомления(
		Процесс) Экспорт
		
	МенеджерПроцесса = БизнесПроцессы.Согласование;
	ЗадачаПроцесса = МенеджерПроцесса.СоздатьСлужебнуюЗадачуПроцесса(
		Процесс.Ссылка,
		МенеджерПроцесса.ТочкиМаршрута.Ознакомиться,
		МенеджерПроцесса.ИмяЗадачиОтложеннаяОбработкаЗавершенияОзнакомления(Процесс));
	ЗадачаПроцесса.Записать();
	Возврат ЗадачаПроцесса;
	
КонецФункции	

// Создаст служебную задачу. (удаления комментариев из Ворд). в точке Согласовать.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.Согласование
//  
//  Возвращаемое значение:
//  ЗадачаОбъект.ЗадачаИсполнителя
//
Функция СоздатьСлужебнуюЗадачуОтложеннаяПодготовкаЗавершенияТочкаСогласовать(
		Процесс) Экспорт
		
	МенеджерПроцесса = БизнесПроцессы.Согласование;
	ЗадачаПроцесса = МенеджерПроцесса.СоздатьСлужебнуюЗадачуПроцесса(
		Процесс.Ссылка,
		МенеджерПроцесса.ТочкиМаршрута.Согласовать,
		МенеджерПроцесса.ИмяЗадачиОтложеннаяОбработкаЗавершенияСогласования(Процесс));
		
	ЗадачаПроцесса.Записать();
	
	Возврат ЗадачаПроцесса;
	
КонецФункции	

// Обрабатывает добавление служебной задачи процесса для отложенной обработки завершения точки действия Ознакомиться.
//
// Возвращаемое значение:
//  Булево - признак того, что обработка была выполнена в текущей процедуре.
//           если обработка не была выполнена, то будет выполнена стандартная обработка.
//
Функция ОбработатьДобавлениеЗадачиОтложеннаяОбработкаЗавершенияОзнакомления(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс.Ссылка);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "СогласованиеВРежимеЗамечаний")	 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Процесс.Завершен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Готовим действие к завершению отложено, только если в ходе согласования
	// были сформированы замечания и дальше не предполагается его выполнение.
	Если Не СогласованиеВРежимеЗамечанийСервер.ЕстьЗамечанияВКорнеДействия(Действие)
		Или Процесс.ПовторитьСогласование Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// тут идем в очередь обработки сообщений
	// тут вызов в ОбработкаОчередиЗаданийСервер
	Если ОбработкаОчередиЗаданийСервер.ОбработатьДобавлениеЗадачиОтложеннаяОбработкаЗавершенияОзнакомления(
		Процесс) Тогда
		Возврат Истина;
	КонецЕсли;		
	
	Возврат Ложь;
	
КонецФункции

// Обрабатывает расширение рабочих групп предметов процессов
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.Исполнение
// 
// Возвращаемое значение:
//  Булево - Признак, что расширение прав предметов обработано в текущей функции
//
Функция ОбработатьРасширениеРабочихГруппПредметовПроцессов(Процесс) Экспорт
	
	// Для БП по действиям не нужно расширять рабочую группу предмета, т.к. она будет расширена действиями
	Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс.Ссылка);
	Возврат ЗначениеЗаполнено(Действие);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СобытияЗадачПроцессов

// Выполняет обработку создания задачи процесса по действию.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача процесса.
//  Действие - ОпределяемыйТип.Действия
//
Процедура ОбработатьСозданиеЗадачиПроцесса(Задача, Действие)
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Задача.ДополнительныеСвойства, "ЭтоНовый", Ложь)
		И Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Задача.ДополнительныеСвойства, "ОбновитьПовторно", Ложь) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыИзмененияУчастников = РаботаСПроцессамиПоДействиям.ПараметрыИзмененияУчастниковДействияПоЗадаче(
		Действие, Задача);
	Для Каждого ПараметрыИзмененияУчастника Из ПараметрыИзмененияУчастников Цикл
		ДействияСервер.НачатьВыполнениеДействияУчастником(Действие, ПараметрыИзмененияУчастника);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку доп участников (Обеспечить подписание)
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача процесса.
//  Действие - ОпределяемыйТип.Действия
//
Процедура ОбработатьСозданиеДопУчастников(Задача, Действие)
	
	Если Задача.ДополнительныеСвойства.Свойство("ЭтоНовый")
		И Задача.ДополнительныеСвойства.ЭтоНовый Тогда

		Возврат;
	КонецЕсли;
	
	Если Не Задача.ДополнительныеСвойства.Свойство("ТочкаМаршрутаСтарая")
		Или Задача.ДополнительныеСвойства.ТочкаМаршрутаСтарая = Задача.ТочкаМаршрута Тогда

		Возврат;
	КонецЕсли;

	ПараметрыИзмененияУчастников = РаботаСПроцессамиПоДействиям.ПараметрыИзмененияУчастниковДействияПоЗадаче(
		Действие, Задача);
	Для Каждого ПараметрыИзмененияУчастника Из ПараметрыИзмененияУчастников Цикл
		Если ПараметрыИзмененияУчастника.Функция = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда
			ДействияСервер.НачатьВыполнениеДействияУчастником(Действие, ПараметрыИзмененияУчастника);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает принятие задачи к исполнению, выполняя необходимые операции с действием.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача процесса.
//  Действие - ОпределяемыйТип.Действия
//
Процедура ОбработатьПринятиеКИсполнениюЗадачиПроцесса(Задача, Действие)
	
	// если новая, выходим
	Если Задача.ДополнительныеСвойства.Свойство("ЭтоНовый")
		И Задача.ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	СтароеПринятаКИсполнению = Ложь;
	Задача.ДополнительныеСвойства.Свойство("СтароеПринятаКИсполнению", СтароеПринятаКИсполнению);
	// т.е. идем дальше только если СтароеПринятаКИсполнению=Ложь И Задача.ПринятаКИсполнению=Истина
	// И задача не выполнена.
	Если Задача.Выполнена Или СтароеПринятаКИсполнению Или Не Задача.ПринятаКИсполнению Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	
	ПараметрыИзмененияУчастников = 
		РаботаСПроцессамиПоДействиям.ПараметрыИзмененияУчастниковДействияПоЗадаче(
		Действие, Задача, Задача.ТекущийИсполнитель, Сотрудники.ОсновнойСотрудник());
	
	Для Каждого ПараметрыИзмененияУчастника Из ПараметрыИзмененияУчастников Цикл
		ФактическийИсполнительПолный = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
			ПараметрыИзмененияУчастника.Участник, ПараметрыИзмененияУчастника.ФактическийИсполнитель, 
			ПараметрыИзмененияУчастника.ФактическийИсполнитель, Сотрудники.ОсновнойСотрудник());
						
		РаботаСПроцессамиПоДействиям.ЗаписатьСведенияОбУчастникеДействия(
			Действие,
			ПараметрыИзмененияУчастника.ИдентификаторУчастника,
			ПараметрыИзмененияУчастника.ФактическийИсполнитель,
			ФактическийИсполнительПолный,
			Задача.СрокИсполнения,
			Задача.Дата);
		
		МенеджерДействия.ОтметитьПринятиеКИсполнению(Действие, ПараметрыИзмененияУчастника);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает отмену принятия задачи к исполнению, выполняя необходимые операции с действием.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача процесса.
//  Действие - ОпределяемыйТип.Действия
//
Процедура ОбработатьОтменуПринятияКИсполнениюЗадачиПроцесса(Задача, Действие)
	
	// если новая, выходим
	Если Задача.ДополнительныеСвойства.Свойство("ЭтоНовый")
		И Задача.ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	СтароеПринятаКИсполнению = Ложь;
	Задача.ДополнительныеСвойства.Свойство("СтароеПринятаКИсполнению", СтароеПринятаКИсполнению);
	// т.е. идем дальше только если СтароеПринятаКИсполнению=Истина И Задача.ПринятаКИсполнению=Ложь
	// И задача не выполнена.
	Если Задача.Выполнена Или Не СтароеПринятаКИсполнению Или Задача.ПринятаКИсполнению Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИзмененияУчастников = 
		РаботаСПроцессамиПоДействиям.ПараметрыИзмененияУчастниковДействияПоЗадаче(
		Действие, Задача);
		
	Для Каждого ПараметрыИзмененияУчастника Из ПараметрыИзмененияУчастников Цикл
		РегистрыСведений.СведенияОбУчастникахДействий.ОчиститьФактическийИсполнитель(
			Действие, ПараметрыИзмененияУчастника.ИдентификаторУчастника);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СобытияДействий

// Начинает выполнение действия с новыми участниками.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
Процедура НачатьВыполнениеДействияСНовымиУчастниками(Действие)
	
	Если Не ДействияСервер.ПризнакЗаписиИсполненияДействияСНовымиУчастниками(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	АктивныеПроцессы = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие.Ссылка, Истина);
	Если АктивныеПроцессы.Количество() > 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОбработкаОчередиЗаданийСервер.ОбработатьНачалоВыполненияДействияСНовымиУчастниками(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСПроцессамиПоДействиям.СоздатьИЗапуститьПроцессыПоИсполнениюДействияСНовымиУчастниками(Действие);
	
КонецПроцедуры

#КонецОбласти

// Выполняет обработку из модуля менеджера Действия
// при постановке на паузу/снятии с паузы/прерывании/изменении участника
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача процесса.
//  Действие - ОпределяемыйТип.Действия
//
Процедура ОбработатьИзменениеСостоянияЗадачи(Задача, Действие)
	
	ЗадачаСсылка = Задача.Ссылка;
	СостояниеБизнесПроцесса = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		ЗадачаСсылка, "СостояниеБизнесПроцесса");
	
	СтароеСостояниеБизнесПроцесса = Задача.ДополнительныеСвойства.СтароеСостояниеБизнесПроцесса;
	
	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	
	ДоступныеОбработчикиМенеджера = МенеджерДействия.ДоступныеОбработчикиМенеджера();
	
	ТребуетсяОбработкаПрерывания = СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван
		И СтароеСостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен
		И ДоступныеОбработчикиМенеджера.ОбработкаПрерывания;
	ТребуетсяОбработкаПостановкиНаПаузу = СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен
		И СтароеСостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен
		И ДоступныеОбработчикиМенеджера.ОбработкаПостановкиНаПаузу;
	ТребуетсяОбработкаВозобновления = СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен
		И СтароеСостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен
		И ДоступныеОбработчикиМенеджера.ОбработкаСнятияПаузы;
	ТребуетсяОбработкаИзмененияУчастника = Задача.ДополнительныеСвойства.Свойство("БылИсполнитель")
		И Задача.ДополнительныеСвойства.Свойство("СталИсполнитель")
		И ДоступныеОбработчикиМенеджера.ОбработкаИзмененияУчастника;
	
	Если Не ТребуетсяОбработкаПрерывания
		И Не ТребуетсяОбработкаПостановкиНаПаузу
		И Не ТребуетсяОбработкаВозобновления
		И Не ТребуетсяОбработкаИзмененияУчастника Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИзмененияУчастников = РаботаСПроцессамиПоДействиям.ПараметрыИзмененияУчастниковДействияПоЗадаче(
		Действие, Задача); 
	
	ПредыдущийУчастник = Неопределено;
	Если ТребуетсяОбработкаИзмененияУчастника Тогда
		ПредыдущийУчастник = Задача.ДополнительныеСвойства["БылИсполнитель"];
	КонецЕсли; 
	
	Для Каждого Параметры Из ПараметрыИзмененияУчастников Цикл
		
		Если ТребуетсяОбработкаПрерывания Тогда
			
			МенеджерДействия.ОбработкаПрерывания(Действие, Параметры);
			
		ИначеЕсли ТребуетсяОбработкаПостановкиНаПаузу Тогда
			
			МенеджерДействия.ОбработкаПостановкиНаПаузу(Действие, Параметры);
			
		ИначеЕсли ТребуетсяОбработкаВозобновления Тогда
			
			МенеджерДействия.ОбработкаСнятияПаузы(Действие, Параметры);
			
		ИначеЕсли ТребуетсяОбработкаИзмененияУчастника Тогда
			
			МенеджерДействия.ОбработкаИзмененияУчастника(Действие, Параметры, ПредыдущийУчастник);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти