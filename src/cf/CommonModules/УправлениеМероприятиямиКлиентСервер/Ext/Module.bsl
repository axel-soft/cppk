////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с мероприятиями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Рассчитывает номера пунктов для протокола.
//
// Параметры:
//  Протокол - ДанныеФормыКоллекция - Протокол.
//
Процедура ВывестиНомераПунктовПротокола(Протокол) Экспорт
	
	ЭтоПротоколСтарогоФормата = ЭтоПротоколСтарогоФормата(Протокол);
	
	Для Каждого Строка Из Протокол Цикл
		Если ЗначениеЗаполнено(Строка.НомерПунктаПротокола) Тогда
			Продолжить;
		КонецЕсли;
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаСтрокиПротокола(
			Строка,
			Протокол,
			ЭтоПротоколСтарогоФормата);
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает решения для строки программы.
//
// Параметры:
//  СтрокаПрограммы - ДанныеФормыСтруктура - Строка программы.
//  Протокол - ДанныеФормыКоллекция - Протокол.
//
// Возвращаемое значение:
//  Строка - Решение по пункту программы.
//
Функция ПолучитьРешениеВСтрокеПрограммы(СтрокаПрограммы, Протокол) Экспорт
	
	Решение = "";
	
	Если Не СтрокаПрограммы.ТребуетПринятияРешения Тогда 
		Решение = НСтр("ru = 'Не требуется'");
	Иначе	
		НайденныеСтроки = Протокол.НайтиСтроки(Новый Структура("НомерПунктаПрограммы", СтрокаПрограммы.НомерПункта));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрока.Решили) Тогда 
				Решение = НСтр("ru = 'Принято'");
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Если Решение = "" Тогда 
			Решение = НСтр("ru = 'Не принято'");
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Решение;
	
КонецФункции

// Рассчитывает решения для программы.
// Если передан номер пункта программы, то рассчитывает решения только для данного пункта.
//
// Параметры:
//  Программа - ДанныеФормыКоллекция - Программа.
//  Протокол - ДанныеФормыКоллекция - Протокол.
//
Процедура ВывестиРешенияПрограммы(Программа, Протокол) Экспорт
	
	Для Каждого Строка Из Программа Цикл
		Строка.Решение = ПолучитьРешениеВСтрокеПрограммы(Строка, Протокол);
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает номер пункта для пункта протокола.
//
// Параметры:
//  ПунктПротокола - ДанныеФормыСтруктура - Строка пункта протокол.
//  Протокол - ДанныеФормыКоллекция - Протокол.
//
// Возвращаемое значение:
//  Строка - Номер пункта протокола.
//
Функция ПолучитьНомерПунктаПротокола(ПунктПротокола, Протокол) Экспорт
	
	Если ЗначениеЗаполнено(ПунктПротокола.НомерПунктаПротокола) Тогда
		Возврат ПунктПротокола.НомерПунктаПротокола;
	КонецЕсли;
	
	// Если не указан номер пункта программы, то нет возможности сформировать номер пункта протокола.
	Если Не ЗначениеЗаполнено(ПунктПротокола.НомерПунктаПрограммы) Тогда 
		Возврат "";
	КонецЕсли;
	
	ЭтоПротоколСтарогоФормата = ЭтоПротоколСтарогоФормата(Протокол);
	
	// Если пункт протокола не записан, то его еще нет в протоколе, требуется особая обработка.
	Если Не ЗначениеЗаполнено(ПунктПротокола.Ссылка) Тогда 
		
		Строки = Новый Массив;
		Для Каждого Строка Из Протокол Цикл
			Если ПунктПротокола.НомерПунктаПрограммы = Строка.НомерПунктаПрограммы Тогда 
				Строки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Если Строки.Количество() = 0 Тогда 
			Возврат СформироватьНомерПунктаПротокола(
				ПунктПротокола.НомерПунктаПрограммы,
				Неопределено,
				ЭтоПротоколСтарогоФормата);
		КонецЕсли;
		
		НомерПодпункта = Строки.Количество() + 1;
		
		Возврат СформироватьНомерПунктаПротокола(
			ПунктПротокола.НомерПунктаПрограммы,
			НомерПодпункта,
			ЭтоПротоколСтарогоФормата);
		
	КонецЕсли;
	
	// Формирование номера пункта протокола.
	Строки = Новый Массив;
	Для Каждого Строка Из Протокол Цикл
		Если ПунктПротокола.НомерПунктаПрограммы = Строка.НомерПунктаПрограммы Тогда 
			Строки.Добавить(Строка.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	// Если нет строк - значит данный пункт протокола перенесли из другого номера пункта программы в пустой пункт программы.
	Если Строки.Количество() = 0 Тогда
		Возврат СформироватьНомерПунктаПротокола(
			ПунктПротокола.НомерПунктаПрограммы,
			Неопределено,
			ЭтоПротоколСтарогоФормата);
	КонецЕсли;
	
	// Если не можем найти строку в протоколе - не сможем рассчитать номер пункта протокола, т.к. он удален.
	СтрокиПротокола = Протокол.НайтиСтроки(Новый Структура("ПунктПротокола", ПунктПротокола.Ссылка));
	Если СтрокиПротокола.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаПротокола = СтрокиПротокола[0];
	
	// Если строку перенесли из другого пункта программы - она будет добавлена последней.
	Инд = Строки.Найти(СтрокаПротокола.НомерСтроки);
	Если Инд = Неопределено Тогда
		Строки.Добавить(СтрокаПротокола.НомерСтроки);
	КонецЕсли;
	
	Если Строки.Количество() = 1 Тогда 
		Возврат СформироватьНомерПунктаПротокола(
			ПунктПротокола.НомерПунктаПрограммы,
			Неопределено,
			ЭтоПротоколСтарогоФормата);
	КонецЕсли;
	
	НомерПодпункта = Строки.Найти(СтрокаПротокола.НомерСтроки) + 1;
	
	Возврат СформироватьНомерПунктаПротокола(
		ПунктПротокола.НомерПунктаПрограммы,
		НомерПодпункта,
		ЭтоПротоколСтарогоФормата);
	
КонецФункции

// Заполняет реквизит Слушали по строке программы, если изменился начальный номер пункта программы.
//
// Параметры:
//  ПунктПротокола - ДанныеФормыСтруктура - Пункта протокол.
//  Программа - ДанныеФормыКоллекция - Программа.
//  НачальныйНомерПунктаПрограммы - Число - Начальный номер пункта программы.
//
Процедура ЗаполнитьСлушалиПунктаПротокола(ПунктПротокола, Программа, НачальныйНомерПунктаПрограммы = Неопределено) Экспорт
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерПункта", ПунктПротокола.НомерПунктаПрограммы);
	НайденныеСтроки = Программа.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];
	Если ПунктПротокола.НомерПунктаПрограммы = НачальныйНомерПунктаПрограммы Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ПунктПротокола.НомерПунктаПротокола, ".") <> 0 Тогда
		ПунктПротокола.Слушали = "";
	Иначе
		ПунктПротокола.Слушали = СформироватьТекстСлушали(НайденнаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

// Формирует заголовок пункта протокола.
//
// Параметры:
//  ПунктПротокола - ДанныеФормыСтруктура - Строка пункта протокол.
//  Протокол - ДанныеФормыКоллекция - Протокол.
//
// Возвращаемое значение:
//  Строка - Заголовок пункта протокола.
//
Функция СформироватьЗаголовокПунктаПротокола(ПунктПротокола, Протокол) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пункт протокола №%1'"),
		ПолучитьНомерПунктаПротокола(ПунктПротокола, Протокол));
	
КонецФункции

// Формирует текстовое описание строки программы для реквизита слушали протокола.
//
// Параметры:
//  СтрокаПрограммы - СтрокаТабличнойЧасти - Строка программы.
//
// Возвращаемое значение:
//  Строка - Текст Слушали для протокола.
//
Функция СформироватьТекстСлушали(СтрокаПрограммы) Экспорт
	
	Слушали = "";
	Если ЗначениеЗаполнено(СтрокаПрограммы.Исполнитель) Тогда 
		ПредставлениеОтветственного = Строка(СтрокаПрограммы.Исполнитель);
		Слушали = Слушали + ПредставлениеОтветственного + Символы.ПС;
	КонецЕсли;	
	Слушали = Слушали + СтрокаПрограммы.Содержание;
	
	Возврат Слушали;
	
КонецФункции

// Рассчитывает номер пункта для строки пункта протокола.
//
// Параметры:
//  СтрокаПротокола - ДанныеФормыСтруктура - Строка пункта протокол.
//  Протокол - ДанныеФормыКоллекция - Протокол.
//  ЭтоПротоколСтарогоФормата - Булево.
//
// Возвращаемое значение:
//  Строка - Номер пункта протокола.
//
Функция ПолучитьНомерПунктаСтрокиПротокола(СтрокаПротокола, Протокол, ЭтоПротоколСтарогоФормата) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаПротокола.НомерПунктаПротокола) Тогда
		Возврат СтрокаПротокола.НомерПунктаПротокола;
	КонецЕсли;
	
	Строки = Новый Массив;
	Для Каждого Строка Из Протокол Цикл
		Если СтрокаПротокола.НомерПунктаПрограммы = Строка.НомерПунктаПрограммы Тогда 
			Строки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если Строки.Количество() = 1 Тогда 
		Возврат СформироватьНомерПунктаПротокола(
			СтрокаПротокола.НомерПунктаПрограммы,
			Неопределено,
			ЭтоПротоколСтарогоФормата);
	КонецЕсли;
	
	НомерПодпункта = Строки.Найти(СтрокаПротокола) + 1;
	
	Возврат СформироватьНомерПунктаПротокола(
		СтрокаПротокола.НомерПунктаПрограммы,
		НомерПодпункта,
		ЭтоПротоколСтарогоФормата);
	
КонецФункции

// Получает текстовое представление массива состояний мероприятия.
//
// Параметры:
//  МассивСостояний - Массив - Массив состояний мероприятия.
//
// Возвращаемое значение:
//  Строка - Текстовое представление актуальных состояний мероприятия.
//
Функция ПолучитьСтроковоеПредставлениеСостояний(МассивСостояний) Экспорт
	
	СтроковоеПредставление = "";
	
	ТипыСостояний = ПолучитьТипыСостояний();
	СоответствиеСостояний = ПолучитьСоответствиеСостояний();
	
	Для Каждого Тип Из ТипыСостояний Цикл
		Для Каждого Состояние Из МассивСостояний Цикл
			Если ЗначениеЗаполнено(Состояние) И СоответствиеСостояний.Получить(Состояние) = Тип.Ключ Тогда 
				ДобавитьЗначениеКСтрокеЧерезРазделитель(СтроковоеПредставление, ", ", Строка(Состояние));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СтроковоеПредставление) Тогда
		СтроковоеПредставление = "<...>";
	КонецЕсли;
	
	Возврат СтроковоеПредставление;
	
КонецФункции

// Возвращает соответствие состояний мероприятия.
//
// Возвращаемое значение:
//  Соответствие - Соответствие состояний мероприятий и типов состояний.
//
Функция ПолучитьСоответствиеСостояний() Экспорт
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПриглашенияОтправлены"),
		"СостояниеПриглашений");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПриглашенияНеПриняты"),
		"СостояниеПриглашений");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПриглашенияПриняты"),
		"СостояниеПриглашений");
	
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПрограммаНаУтверждении"),
		"СостояниеПрограммы");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПрограммаУтверждена"),
		"СостояниеПрограммы");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПрограммаНеУтверждена"),
		"СостояниеПрограммы");
	
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МатериалыВыступающихЗапрошены"),
		"СостояниеМатериаловВыступающих");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МатериалыОтправленыНаОзнакомление"),
		"СостояниеМатериаловВыступающих");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПолученыМатериалыВыступающих"),
		"СостояниеМатериаловВыступающих");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.СМатериаламиОзнакомились"),
		"СостояниеМатериаловВыступающих");
	
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколГотовиться"),
		"СостояниеПротокола");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколПодготовлен"),
		"СостояниеПротокола");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколНаСогласовании"),
		"СостояниеПротокола");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколСогласован"),
		"СостояниеПротокола");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколНеСогласован"),
		"СостояниеПротокола");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколНаУтверждении"),
		"СостояниеПротокола");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколНеУтвержден"),
		"СостояниеПротокола");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколУтвержден"),
		"СостояниеПротокола");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколНаИсполнении"),
		"СостояниеПротокола");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколИсполнен"),
		"СостояниеПротокола");
	
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки"),
		"СостояниеМероприятия");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МероприятиеОтменено"),
		"СостояниеМероприятия");
	Соответствие.Вставить(
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МероприятиеПроведено"),
		"СостояниеМероприятия");
	
	Возврат Соответствие;
	
КонецФункции

// Выполняет пересчет начала и окончания пунктов программы мероприятия.
//
// Параметры:
//  Мероприятие - ДанныеФормыКоллекция, СправочникОбъект.Мероприятия - Мероприятие с программой.
//  ПараметрыПреобразованияМестногоВремени - Структура - Параметры преобразования местного времени.  См. РаботаСЧасовымиПоясами.ПараметрыПреобразованияМестногоВремени().
//
Процедура ПересчитатьНачалоОкончаниеПунктовПрограммы(Мероприятие, ПараметрыПреобразованияМестногоВремени = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие.ДатаНачала) Тогда
		Для Каждого ПунктПрограммы Из Мероприятие.Программа Цикл
			ПунктПрограммы.Начало = Неопределено;
			ПунктПрограммы.Окончание = Неопределено;
			Если ПараметрыПреобразованияМестногоВремени <> Неопределено Тогда
				ПунктПрограммы.МестнаяНачало = Неопределено;
				ПунктПрограммы.МестнаяОкончание = Неопределено;
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если Мероприятие.Программа.Количество() > 0 Тогда 
		Строка = Мероприятие.Программа[0];
		Строка.Начало = Мероприятие.ДатаНачала;
		Строка.Окончание = Строка.Начало + Строка.ВремяПлан;
		Если ПараметрыПреобразованияМестногоВремени <> Неопределено Тогда
			Строка.МестнаяНачало = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
				Строка.Начало,
				ПараметрыПреобразованияМестногоВремени);
			Строка.МестнаяОкончание = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
				Строка.Окончание,
				ПараметрыПреобразованияМестногоВремени);
		КонецЕсли;
	КонецЕсли;
	
	Для Инд = 1 По Мероприятие.Программа.Количество()-1 Цикл
		
		Строка = Мероприятие.Программа[Инд];
		
		Если ЗначениеЗаполнено(Мероприятие.Программа[Инд-1].Окончание) Тогда 
			Строка.Начало = Мероприятие.Программа[Инд-1].Окончание;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Начало) Тогда 
			Строка.Окончание = Строка.Начало + Строка.ВремяПлан
		КонецЕсли;
		
		Если ПараметрыПреобразованияМестногоВремени <> Неопределено Тогда
			Строка.МестнаяНачало = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
				Строка.Начало,
				ПараметрыПреобразованияМестногоВремени);
			Строка.МестнаяОкончание = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
				Строка.Окончание,
				ПараметрыПреобразованияМестногоВремени);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет, что состояние мероприятия это состояние протокола.
// 
// Параметры:
//  СостояниеМероприятия - ПеречислениеСсылка.СостоянияМероприятий.
// 
// Возвращаемое значение:
//  Булево - Это состояние протокола.
//
Функция ЭтоСостояниеПротокола(СостояниеМероприятия) Экспорт
	
	СоответствиеСостояний = ПолучитьСоответствиеСостояний();
	
	ТипСостояния = СоответствиеСостояний[СостояниеМероприятия];
	ЭтоСостояниеПротокола = (ТипСостояния = "СостояниеПротокола");
	
	Возврат ЭтоСостояниеПротокола;
	
КонецФункции

// Определяет, что состояние мероприятия это состояние приглашения.
// 
// Параметры:
//  СостояниеМероприятия - ПеречислениеСсылка.СостоянияМероприятий.
// 
// Возвращаемое значение:
//  Булево - Это состояние приглашения.
//
Функция ЭтоСостояниеПриглашения(СостояниеМероприятия) Экспорт
	
	СоответствиеСостояний = ПолучитьСоответствиеСостояний();
	
	ТипСостояния = СоответствиеСостояний[СостояниеМероприятия];
	ЭтоСостояниеПротокола = (ТипСостояния = "СостояниеПриглашений");
	
	Возврат ЭтоСостояниеПротокола;
	
КонецФункции

// Формирует расширенное представление мероприятия (с датой и видом мероприятия).
// 
// Параметры:
//  ВидМероприятия - СправочникСсылка.ВидыМероприятий.
//  ДатаНачала - Дата.
//  Наименование - Строка.
//  СБольшойБуквы - Булево.
// 
// Возвращаемое значение:
//  Строка - Расширенное представление мероприятия.
//  
Функция РасширенноеПредставлениеСДатой(ВидМероприятия, ДатаНачала, Наименование) Экспорт
	
	РасширенноеПредставлениеСДатой = СтрШаблон(
		"%1 %2 (%3)",
		Наименование,
		Формат(ДатаНачала, "ДФ='dd.MM.yyyy HH:mm';"),
		ВидМероприятия);
	
	Возврат РасширенноеПредставлениеСДатой;
	
КонецФункции

// Формирует представление пункта программы.
// 
// Параметры:
//  НомерПунктаПрограммы - Число.
//  СодержаниеПунктПрограммы - Строка.
//  ОтветственныйПунктаПрограммы - СправочникСсылка.Сотрудники, СправочникСсылка.Контрагенты, СправочникСсылка.ЛичныеАдресаты, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи, СправочникСсылка.КонтактныеЛица.
// 
// Возвращаемое значение:
//  Строка - Представление пункта программы.
//
Функция ПредставлениеПунктаПрограммы(НомерПункта, Содержание, Ответственный) Экспорт
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ПредставлениеПунктаПрограммы = СтрШаблон(
			"%1. %2 (%3)",
			НомерПункта,
			Содержание,
			Ответственный)
	ИначеЕсли ЗначениеЗаполнено(НомерПункта) И ЗначениеЗаполнено(Содержание) Тогда
		ПредставлениеПунктаПрограммы = СтрШаблон(
			"%1. %2",
			НомерПункта,
			Содержание)
	Иначе
		ПредставлениеПунктаПрограммы = НСтр("ru = '<Не указан>'");
	КонецЕсли;
	
	Возврат ПредставлениеПунктаПрограммы;
	
КонецФункции

// Новые параметры формы ввода пункта программы.
// 
// Возвращаемое значение:
//  Структура - Новый параметры формы ввод пункта программы:
//   * НомерПункта - Число.
//   * Исполнитель - Неопределено, СправочникСсылка.Сотрудники, СправочникСсылка.Контрагенты, СправочникСсылка.ЛичныеАдресаты, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи, СправочникСсылка.КонтактныеЛица - Исполнитель.
//   * Содержание - Строка.
//   * ВремяПлан - Число.
//   * ВремяФакт - Число.
//   * Начало - Дата.
//   * Окончание - Дата.
//   * ТребуетПринятияРешения - Булево.
//   * ВидМероприятия - СправочникСсылка.ВидыМероприятий.
//   * Комментарий - Строка.
//   * СостояниеПрограммы - ПеречислениеСсылка.СостоянияМероприятий.
//   * ТолькоПросмотр - Булево.
//   * ПунктНеНайден - Булево.
//  
Функция НовыйПараметрыФормыВводПунктаПрограммы() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НомерПункта", 0);
	ПараметрыФормы.Вставить("Исполнитель", Неопределено);
	ПараметрыФормы.Вставить("Содержание", "");
	ПараметрыФормы.Вставить("ВремяПлан", 0);
	ПараметрыФормы.Вставить("ВремяФакт", 0);
	ПараметрыФормы.Вставить("Начало", Дата(1, 1, 1));
	ПараметрыФормы.Вставить("Окончание", Дата(1, 1, 1));
	ПараметрыФормы.Вставить("ТребуетПринятияРешения", Ложь);
	ПараметрыФормы.Вставить("ВидМероприятия",
		ПредопределенноеЗначение("Справочник.ВидыМероприятий.ПустаяСсылка"));
	ПараметрыФормы.Вставить("Комментарий", "");
	ПараметрыФормы.Вставить("СостояниеПрограммы",
		ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
	ПараметрыФормы.Вставить("ПунктНеНайден", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует номер пункта протокола по номеру пункта программы и подпункту.
//
// Параметры:
//  НомерПунктаПрограммы - Число - Номер пункта программы.
//  НомерПодпункта - Число - Номер пункта протокола среди других пунктов протокола по пункту программы.
//  ЭтоПротоколСтарогоФормата - Булево.
//
// Возвращаемое значение:
//  Строка - Номер пункта протокола.
//
Функция СформироватьНомерПунктаПротокола(НомерПунктаПрограммы, Знач НомерПодпункта, ЭтоПротоколСтарогоФормата)
	
	Если НомерПодпункта = Неопределено Тогда
		Возврат Строка(НомерПунктаПрограммы);
	КонецЕсли;
	
	Если ЭтоПротоколСтарогоФормата Тогда
		
		Возврат Строка(НомерПунктаПрограммы) + "." + Строка(НомерПодпункта);
		
	ИначеЕсли НомерПодпункта = 1 Тогда
		
		Возврат Строка(НомерПунктаПрограммы);
		
	Иначе
		
		НомерПодпункта = НомерПодпункта - 1;
		
		Возврат Строка(НомерПунктаПрограммы) + "." + Строка(НомерПодпункта);
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру типов состояний мероприятия.
//
// Возвращаемое значение:
//  Структура - Структура типов состояний мероприятия.
//
Функция ПолучитьТипыСостояний()
	
	ТипыСостояний = Новый Структура(
		"СостояниеМероприятия,
		|СостояниеПриглашений, 
		|СостояниеПрограммы, 
		|СостояниеМатериаловВыступающих, 
		|СостояниеПротокола");
	
	Возврат ТипыСостояний;
	
КонецФункции

// Определяет, что это протокол старого формата, с автоматически определением номера пункта.
// 
// Параметры:
//  Протокол - ДанныеФормыКоллекция.
// 
// Возвращаемое значение:
//  Булево - Это протокол старого формата.
//
Функция ЭтоПротоколСтарогоФормата(Протокол) Экспорт
	
	КоличествоПодпунктовСТочкойПоПунктам = Новый Соответствие;
	КоличествоПодпунктовБезТочкиПоПунктам = Новый Соответствие;
	
	СтрокБезНомера = 0;
	Для Каждого СтрокаПротокола Из Протокол Цикл
		
		НомерПунктаПрограммы = СтрокаПротокола.НомерПунктаПрограммы;
		
		Если КоличествоПодпунктовСТочкойПоПунктам[НомерПунктаПрограммы] = Неопределено Тогда
			КоличествоПодпунктовСТочкойПоПунктам[НомерПунктаПрограммы] = 0;
		КонецЕсли;
		Если КоличествоПодпунктовБезТочкиПоПунктам[НомерПунктаПрограммы] = Неопределено Тогда
			КоличествоПодпунктовБезТочкиПоПунктам[НомерПунктаПрограммы] = 0;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПротокола.НомерПунктаПротокола) Тогда
			
			СтрокБезНомера = СтрокБезНомера + 1;
			
		Иначе
			
			Если СтрНайти(СтрокаПротокола.НомерПунктаПротокола, ".") <> 0 Тогда
				КоличествоПодпунктовСТочкойПоПунктам[НомерПунктаПрограммы] =
					КоличествоПодпунктовСТочкойПоПунктам[НомерПунктаПрограммы] + 1;
			Иначе
				КоличествоПодпунктовБезТочкиПоПунктам[НомерПунктаПрограммы] =
					КоличествоПодпунктовБезТочкиПоПунктам[НомерПунктаПрограммы] + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьПодпунктыБезВедущегоПункта = Ложь;
	Для Каждого СтрокаПротокола Из Протокол Цикл
		
		НомерПунктаПрограммы = СтрокаПротокола.НомерПунктаПрограммы;
		
		КоличествоПодпунктовСТочкой = КоличествоПодпунктовСТочкойПоПунктам[НомерПунктаПрограммы];
		КоличествоПодпунктовБез = КоличествоПодпунктовБезТочкиПоПунктам[НомерПунктаПрограммы];
		
		Если КоличествоПодпунктовСТочкой > 0 И КоличествоПодпунктовБез = 0 Тогда
			ЕстьПодпунктыБезВедущегоПункта = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтоПротоколСтарогоФормата = СтрокБезНомера >= 1 Или ЕстьПодпунктыБезВедущегоПункта;
	
	Возврат ЭтоПротоколСтарогоФормата;
	
КонецФункции

#КонецОбласти