////////////////////////////////////////////////////////////////////////////////
// Интеграция с подсистемой "Задачи" (клиент).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец) Экспорт
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияИзменитьПараметрыПроцесса(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияПроверитьДоступностьПользователей(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияПодтвердитьИсключениеУчастников(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияПодписатьРезолюцииЭП(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
		
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияУказатьРегистрационныйНомер(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияВыбратьПропущенныйНомер(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияВвестиНовыйСрок(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияПодписатьВизыЭП(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияПодписатьПредметыЭП(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияЗадатьВопросОПодзадачах(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияВыбратьОрганизациюДляПодписания(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияВыбратьПодписывающегоДляПодписания(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = ОбработатьДанныеВыполненияПодписатьДанныеОзнакомления(
		КонтекстВыполненияЗадачи,
		ФормаВладелец);
	Если ВызванаИнтерактивнаяОбработка Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Обработчик выполнения дополнительной команды.
//
// Параметры:
//  ИмяКоманды - Строка
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//
Процедура ВыполнитьДополнительнуюКоманду(ИмяКоманды, ДействиеЗадачи) Экспорт
	
	Если ИмяКоманды = РаботаСЗадачамиКлиентСервер.ИмяКомандыВнестиЗамечания() Тогда
		
		ВыполнитьКомандуВнестиЗамечания(ДействиеЗадачи);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестное имя дополнительной команды %1'"),
			ИмяКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

// Особым образом отреагирует на двойное нажатие на файл.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы
//  ДанныеФайла - Структура
//  УникальныйИдентификатор - УникальныйИдентификатор 
//  ТекущаяЗадачаИлиДействие - ДокументСсылка.Задача
//                           - ДокументСсылка.ДействиеЗадачи
// 
// Возвращаемое значение:
//  Булево -  Вернет Истина, если отработало открытие.
//
Функция ДеревоПриложенийВыбор(Файл, ДанныеФайла, УникальныйИдентификатор, ТекущаяЗадачаИлиДействие) Экспорт
	
	Если (НРег(ДанныеФайла.Расширение) = "doc" Или НРег(ДанныеФайла.Расширение) = "docx" Или НРег(ДанныеФайла.Расширение) = "odt") 
		И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ДанныеФайла.Владелец) Тогда
		Если СогласованиеВРежимеЗамечанийСервер.ЕстьНеЗавершенноеСогласованиеПоДокументу(ДанныеФайла.Владелец) Тогда
			
			// открыть форму согласования в режиме замечаний.
			ПараметрыОткрытия = СогласованиеВРежимеЗамечанийСервер.ПараметрыОткрытияЗадачиСогласования(ТекущаяЗадачаИлиДействие);
			Если ПараметрыОткрытия.Свойство("ВыбраннаяФорма") Тогда
				
				ПараметрыОткрытия.Вставить("Файл", Файл);
			
				ОткрытьФорму(ПараметрыОткрытия.ВыбраннаяФорма, 
					ПараметрыОткрытия);
			
				Возврат Истина;
			
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик выполнения дополнительной команды "Внести замечания".
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//
Процедура ВыполнитьКомандуВнестиЗамечания(ДействиеЗадачи)
	
	РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(
		ДействиеЗадачи,
		Неопределено,
		Ложь);
	
КонецПроцедуры

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполненияИзменитьПараметрыПроцесса(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Свойство("ИзменитьПараметрыПроцесса")
		Или Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ИзменитьПараметрыПроцесса Тогда
		
		Возврат ВызванаИнтерактивнаяОбработка;
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	ПараметрыОповещения.Вставить("ИдентификаторБлокировкиПроцесса", Новый УникальныйИдентификатор);
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута =
			ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеИзмененияПараметровПроцесса",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ОткрытиеДиалогаОбработано = 
			РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьОткрытиеДиалогаИзмененияПараметровПроцесса(
				КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс,
				"",
				ОписаниеОповещения,
				КонтекстВыполненияЗадачи);
		
		Если Не ОткрытиеДиалогаОбработано Тогда
			
			ПараметрыФормы = Новый Структура("Ключ");
			ПараметрыФормы.Ключ = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс;
			
			ОткрытьФорму("БизнесПроцесс.Исполнение.Форма.ФормаИзменениеПараметров",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута =
			ПредопределенноеЗначение("БизнесПроцесс.Подписание.ТочкаМаршрута.ОбработатьРезультат") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеИзмененияПараметровПроцесса",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ОткрытиеДиалогаОбработано = 
			РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьОткрытиеДиалогаИзмененияПараметровПроцесса(
				КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс,
				"",
				ОписаниеОповещения,
				КонтекстВыполненияЗадачи);
		
		Если Не ОткрытиеДиалогаОбработано Тогда
			
			ПараметрыФормы = Новый Структура("Ключ");
			ПараметрыФормы.Ключ = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс;
			
			ОткрытьФорму("БизнесПроцесс.Подписание.Форма.ФормаИзменениеПараметров",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута =
			ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Ознакомиться") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеИзмененияПараметровПроцесса",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ОткрытиеДиалогаОбработано = 
			РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьОткрытиеДиалогаИзмененияПараметровПроцесса(
				КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс,
				"",
				ОписаниеОповещения,
				КонтекстВыполненияЗадачи);
		
		Если Не ОткрытиеДиалогаОбработано Тогда
		
			ПараметрыФормы = Новый Структура("Ключ");
			ПараметрыФормы.Ключ = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс;
			
			ОткрытьФорму("БизнесПроцесс.Приглашение.Форма.ФормаИзменениеПараметров",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута =
			ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеИзмененияПараметровПроцесса",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ФормироватьРезолюцию = Истина;
		
		ОткрытиеДиалогаОбработано = 
			РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьОткрытиеДиалогаНастройкиПодчиненногоИсполнения(
			КонтекстВыполненияЗадачи, ОписаниеОповещения, ФормироватьРезолюцию);
		
		Если Не ОткрытиеДиалогаОбработано Тогда
	
			ПараметрыФормы = Новый Структура("Ключ, ВариантРассмотрения, ФормироватьРезолюцию");
			ПараметрыФормы.Ключ = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ЗадачаПроцесса;
			ПараметрыФормы.ВариантРассмотрения = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ВариантРассмотрения;
			ПараметрыФормы.ФормироватьРезолюцию = ФормироватьРезолюцию;
			
			ОткрытьФорму("БизнесПроцесс.Рассмотрение.Форма.ФормаИзменениеПараметров",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		КонецЕсли;
	
	ИначеЕсли КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута =
			ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеИзмененияПараметровПроцесса",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ФормироватьРезолюцию = Ложь;
		
		ОткрытиеДиалогаОбработано = 
			РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьОткрытиеДиалогаНастройкиПодчиненногоИсполнения(
			КонтекстВыполненияЗадачи, ОписаниеОповещения, ФормироватьРезолюцию);
		
		Если Не ОткрытиеДиалогаОбработано Тогда
		
			ПараметрыФормы = Новый Структура("Ключ, ВариантРассмотрения, ФормироватьРезолюцию");
			ПараметрыФормы.Ключ = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ЗадачаПроцесса;
			ПараметрыФормы.ВариантРассмотрения = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ВариантРассмотрения;
			ПараметрыФормы.ФормироватьРезолюцию = ФормироватьРезолюцию;
		
			ОткрытьФорму("БизнесПроцесс.Рассмотрение.Форма.ФормаИзменениеПараметров",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		КонецЕсли;
		
	ИначеЕсли КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута =
			ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Ознакомиться") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеИзмененияПараметровПроцесса",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ОткрытиеДиалогаОбработано = 
			РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьОткрытиеДиалогаИзмененияПараметровПроцесса(
			КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс,
			"",
			ОписаниеОповещения,
			КонтекстВыполненияЗадачи);
		
		Если Не ОткрытиеДиалогаОбработано Тогда
			
			ПараметрыФормы = Новый Структура("Ключ");
			ПараметрыФормы.Ключ = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс;
			
			ОткрытьФорму("БизнесПроцесс.Регистрация.Форма.ФормаИзменениеПараметров",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		КонецЕсли;
		
	ИначеЕсли КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута =
			ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеИзмененияПараметровПроцесса",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ОткрытиеДиалогаОбработано = 
			РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьОткрытиеДиалогаИзмененияПараметровПроцесса(
			КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс,
			"",
			ОписаниеОповещения,
			КонтекстВыполненияЗадачи);
		
		Если Не ОткрытиеДиалогаОбработано Тогда
			
			ПараметрыФормы = Новый Структура("Ключ");
			ПараметрыФормы.Ключ = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс;
			
			ОткрытьФорму("БизнесПроцесс.Согласование.Форма.ФормаИзменениеПараметров",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута =
			ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеИзмененияПараметровПроцесса",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ОткрытиеДиалогаОбработано = 
			РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьОткрытиеДиалогаИзмененияПараметровПроцесса(
			КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс,
			"",
			ОписаниеОповещения,
			КонтекстВыполненияЗадачи);
		
		Если Не ОткрытиеДиалогаОбработано Тогда
			ПараметрыФормы = Новый Структура("Ключ");
			ПараметрыФормы.Ключ = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс;
			
			ОткрытьФорму("БизнесПроцесс.Утверждение.Форма.ФормаИзменениеПараметров",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен способ изменения параметров процесса %1 (%2)'"),
			ТипЗнч(КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцесс),
			КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута);
		
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = Истина;
	
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияИзменитьПараметрыПроцесса.
//
// Параметры:
//  РезультатИзмененияПараметровПроцесса - Структура, Неопределено - Результат изменения параметров процесса.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеИзмененияПараметровПроцесса(РезультатИзмененияПараметровПроцесса, ПараметрыОповещения) Экспорт
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	ИдентификаторБлокировкиПроцесса = ПараметрыОповещения.ИдентификаторБлокировкиПроцесса;
	
	Если ТипЗнч(РезультатИзмененияПараметровПроцесса) = Тип("Структура") Тогда
		
		Если РезультатИзмененияПараметровПроцесса.КодВозврата <> КодВозвратаДиалога.ОК Тогда
			// Вернуться к задаче.
			Возврат;
		КонецЕсли;
		
		РезультатИзмененияПараметровПроцесса.Удалить("КодВозврата");
		
	ИначеЕсли РезультатИзмененияПараметровПроцесса = КодВозвратаДиалога.ОК Тогда
		
		РезультатИзмененияПараметровПроцесса = Новый Структура;
		
	Иначе
		
		// Вернуться к задаче.
		Возврат;
		
	КонецЕсли;
	
	Если РезультатИзмененияПараметровПроцесса.Свойство("ТекстРезолюции") Тогда
		
		КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
			"ТекстРезолюции",
			РезультатИзмененияПараметровПроцесса.ТекстРезолюции);
		
	КонецЕсли;
	
	Если РезультатИзмененияПараметровПроцесса.Свойство("ТекстРезолюции")
		И КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Свойство("РезолюцииДляПодписания") Тогда
		
		ДатаФормированияРезолюций = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Для Каждого Резолюция Из КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.РезолюцииДляПодписания Цикл
			Если РезультатИзмененияПараметровПроцесса.Свойство("ДатаФормированияРезолюций") 
				И ЗначениеЗаполнено(РезультатИзмененияПараметровПроцесса.ДатаФормированияРезолюций) Тогда
				Резолюция.ДатаРезолюции = РезультатИзмененияПараметровПроцесса.ДатаФормированияРезолюций;
			Иначе
				Резолюция.ДатаРезолюции = ДатаФормированияРезолюций;
			КонецЕсли;
			
			Резолюция.ТекстРезолюции = РезультатИзмененияПараметровПроцесса.ТекстРезолюции;
		КонецЦикла;
		
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Вставить("ДатаФормированияРезолюций", ДатаФормированияРезолюций);
		
	КонецЕсли;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ИзменитьПараметрыПроцесса = Ложь;
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТочкаМаршрута =
			ПредопределенноеЗначение("БизнесПроцесс.Подписание.ТочкаМаршрута.ОбработатьРезультат") Тогда
		КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
			"ДанныеПроцесса",
			РезультатИзмененияПараметровПроцесса.ДанныеПроцесса);
		КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
			"РезультатВыполнения",
			РезультатИзмененияПараметровПроцесса.РезультатВыполнения);
	Иначе
		КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
			"РезультатИзмененияПараметровПроцесса",
			РезультатИзмененияПараметровПроцесса);	
	КонецЕсли;
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	// Допустимо изменение версии данных при изменении процесса / действия.
	// Например, могли поменять автора в настройке действия.
	// Отключим сверку версий.
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ВерсииДанных.Очистить();
	
	// Для работы в сценариях файловой базы важно предусмотреть блокировку при выполнении с тем
	// же идентификатором, с которым работала форма.
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
		"ИдентификаторБлокировкиПроцесса",
		ИдентификаторБлокировкиПроцесса);
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполненияПроверитьДоступностьПользователей(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Свойство("ПроверитьДоступностьФизЛицСотрудников")
		Или Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПроверитьДоступностьФизЛицСотрудников Тогда
		
		Возврат ВызванаИнтерактивнаяОбработка;
		
	КонецЕсли;

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	ПараметрыПроверкиДоступности =
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПараметрыПроверкиДоступности;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДанныеВыполненияПослеПроверкиДоступностиПользователей",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ПользователиДоступны = РаботаСРабочимКалендаремКлиент.ПроверитьДоступностьФизЛицСотрудников(
		ПараметрыПроверкиДоступности.Исполнитель,
		ПараметрыПроверкиДоступности.ДатаНачалаМероприятия,
		ПараметрыПроверкиДоступности.ДатаОкончанияМероприятия,
		ПараметрыПроверкиДоступности.ИспользоватьРабочийКалендарь,
		ПараметрыПроверкиДоступности.ИсключенияЗанятости,
		Истина,
		ОписаниеОповещения);
	Если ПользователиДоступны Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
	ВызванаИнтерактивнаяОбработка = Истина;
	
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияПроверитьДоступностьПользователей.
//
// Параметры:
//  Результат - КодВозвратаДиалога.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеПроверкиДоступностиПользователей(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПроверитьДоступностьФизЛицСотрудников = Ложь;
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
		"ДоступностьПроверена",
		Истина);
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполненияПодтвердитьИсключениеУчастников(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Свойство("ПодтвердитьИсключениеУчастников")
		Или Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПодтвердитьИсключениеУчастников Тогда
		
		Возврат ВызванаИнтерактивнаяОбработка;
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДанныеВыполненияПослеПодтвержденияИсключенияУчастников",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ВызванаИнтерактивнаяОбработка = Истина;
	
	ТекстВопроса =
		НСтр("ru = 'Есть не принявшие приглашения участники. При подтверждении они будут исключены из списка участников. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияПодтвердитьИсключениеУчастников.
//
// Параметры:
//  Результат - КодВозвратаДиалога.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеПодтвержденияИсключенияУчастников(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПодтвердитьИсключениеУчастников = Ложь;
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
		"ПодтвержденоИсключениеУчастников",
		Истина);
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполненияПодписатьРезолюцииЭП(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Свойство("ПодписатьРезолюцииЭП")
		Или Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПодписатьРезолюцииЭП Тогда
		
		Возврат ВызванаИнтерактивнаяОбработка;
		
	КонецЕсли;
	
	РезолюцииПоДействиям =
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.НаборыРезолюцийДляПодписания;
	РезолюцииДляПодписания = Новый Массив;
	
	Для Каждого Элемент Из РезолюцииПоДействиям Цикл
		
		ДействиеЗадачи = Элемент.Ключ;
		РезолюцииДействия = Элемент.Значение;
		
		Для Каждого Резолюция Из РезолюцииДействия Цикл
			
			ДанныеДляПодписания = Новый Структура;
			
			ДанныеДляПодписания.Вставить("Представление", ДействиеЗадачи);
			
			ДанныеДляПодписания.Вставить("ОбъектПодписания", Резолюция);
			
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ДействиеЗадачи", ДействиеЗадачи);
			ДополнительныеСвойства.Вставить("Документ", Резолюция.Документ);
			
			ДанныеДляПодписания.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);
			
			РезолюцииДляПодписания.Добавить(ДанныеДляПодписания);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДанныеВыполненияПослеПодписанияРезолюцииЭП",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	Заголовки = Новый Структура;
	
	Если РезолюцииДляПодписания.Количество() = 1 Тогда
		Заголовки.Вставить("Операция", НСтр("ru = 'Подпись резолюции документа'"));
		Заголовки.Вставить("ЗаголовокДанных", НСтр("ru = 'Резолюция'"));
	Иначе
		Заголовки.Вставить("Операция", НСтр("ru = 'Подпись резолюций документов'"));
		Заголовки.Вставить("ЗаголовокДанных", НСтр("ru = 'Резолюции'"));
	КонецЕсли;
	
	ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
	ПараметрыПодписания.ИдентификаторФормы = КонтекстВыполненияЗадачи.ИдентификаторФормы;
	ПараметрыПодписания.Заголовки = Заголовки;
	ПараметрыПодписания.ОбработчикЗавершения = ОписаниеОповещения;
	
	РаботаСЭПКлиент.Подписать(РезолюцииДляПодписания, ПараметрыПодписания);
	
	ВызванаИнтерактивнаяОбработка = Истина;
	
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполненияПодписатьДанныеОзнакомления(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	Если Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.
			Свойство("ПодписыватьДанныеОзнакомления")
		Или Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.
			Свойство("НаборыДанныхПодПодпись")
		Или Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПодписыватьДанныеОзнакомления
		Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДанныеВыполненияПослеПодписанияДанныхОзнакомления",
		ЭтотОбъект, ПараметрыОповещения);
		
	НаборыДанныхПодПодписьПоДействиямЗадачи = КонтекстВыполненияЗадачи.ДанныеВыполнения.
		ДополнительныеПараметры.НаборыДанныхПодПодпись;
		
	Заголовки = Новый Структура;
	Если НаборыДанныхПодПодписьПоДействиямЗадачи.Количество() > 1 Тогда
		Заголовки.Вставить("Операция", НСтр("ru = 'Подпись отметок ознакомления'"));
		Заголовки.Вставить("ЗаголовокДанных", НСтр("ru = 'Отметки ознакомления'"));
	Иначе
		Заголовки.Вставить("Операция", НСтр("ru = 'Подпись отметки ознакомления'"));
		Заголовки.Вставить("ЗаголовокДанных", НСтр("ru = 'Отметка ознакомления'"));
	КонецЕсли;
	
	НаборыДанныхДляОзнакомления = Новый Массив;
	НаборыВерсийФайлов = Новый Соответствие;
	
	ВерсииФайловПоДействиямЗадачи = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.НаборыВерсийФайлов;
	
	Для Каждого НаборДанныхПоДействиюЗадачи Из НаборыДанныхПодПодписьПоДействиямЗадачи Цикл
		
		ДействиеЗадачи = НаборДанныхПоДействиюЗадачи.Ключ;
		НаборДанныхДляПодписания = НаборДанныхПоДействиюЗадачи.Значение;
		
		Документ = НаборДанныхДляПодписания.Документ;  
		Исполнитель = НаборДанныхДляПодписания.Исполнитель;
		ВерсииФайлов = ВерсииФайловПоДействиямЗадачи[ДействиеЗадачи];
		
		НаборыВерсийФайлов.Вставить(ДействиеЗадачи, ВерсииФайлов);
		
		ДанныеОзнакомления = Новый Структура;
			
		ДанныеОзнакомления.Вставить("Представление", ДействиеЗадачи);
			
		ДанныеОзнакомленияОбъектПодписания = ДанныеОзнакомленияДляПодписания(Документ, Исполнитель, 
			ВерсииФайлов, КонтекстВыполненияЗадачи);
			
		ДанныеОзнакомления.Вставить("ОбъектПодписания", ДанныеОзнакомленияОбъектПодписания); 
			
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("ДействиеЗадачи", ДействиеЗадачи);
		ДополнительныеСвойства.Вставить("Документ", Документ);
			
		ДанныеОзнакомления.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);
			
		НаборыДанныхДляОзнакомления.Добавить(ДанныеОзнакомления);

	КонецЦикла;
	
	ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
	ПараметрыПодписания.ИдентификаторФормы = КонтекстВыполненияЗадачи.ИдентификаторФормы;
	ПараметрыПодписания.Заголовки = Заголовки;
	ПараметрыПодписания.ОбработчикЗавершения = ОписаниеОповещения;
	
	РаботаСЭПКлиент.Подписать(НаборыДанныхДляОзнакомления, ПараметрыПодписания);
	
	Возврат Истина;
	
КонецФункции

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияПодписатьРезолюцииЭП.
//
// Параметры:
//  Результат - Структура.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеПодписанияРезолюцииЭП(Результат, ПараметрыОповещения) Экспорт
	
	Если Не Результат.Успех Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	ПодписиКРезолюциям = Новый Соответствие;
	
	Для Каждого Данные Из Результат.НаборДанных Цикл
		
		Если Не Данные.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеЗадачи = Данные.ДополнительныеСвойства.ДействиеЗадачи;
		Документ = Данные.ДополнительныеСвойства.Документ;
		
		ПодписиПоДействию = ПодписиКРезолюциям.Получить(ДействиеЗадачи);
		Если ПодписиПоДействию = Неопределено Тогда
			ПодписиПоДействию = Новый Соответствие;
			ПодписиКРезолюциям.Вставить(ДействиеЗадачи, ПодписиПоДействию);
		КонецЕсли;
		
		ПодписиПоДокументу = ПодписиПоДействию.Получить(Документ);
		Если ПодписиПоДокументу = Неопределено Тогда
			ПодписиПоДокументу = Новый Массив;
			ПодписиПоДействию.Вставить(Документ, ПодписиПоДокументу);
		КонецЕсли;
		
		СвойстваПодписи = Данные.СвойстваПодписи;
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка") 
			И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли;
		
		ПодписиПоДокументу.Добавить(СвойстваПодписи);
		
	КонецЦикла;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПодписатьРезолюцииЭП = Ложь;
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
		"ДатаИсполнения",
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ДатаФормированияРезолюций);
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
		"ПодписиКРезолюциям",
		ПодписиКРезолюциям);
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияПодписатьДанныеОзнакомления
//
// Параметры:
//  Результат - Структура.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеПодписанияДанныхОзнакомления(Результат, ПараметрыОповещения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	ПодписиКДаннымОзнакомления = Новый Соответствие;
	
	Для Каждого Данные Из Результат.НаборДанных Цикл
		
		Если Не Данные.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеЗадачи = Данные.ДополнительныеСвойства.ДействиеЗадачи;
		Документ = Данные.ДополнительныеСвойства.Документ;
		
		ПодписиПоДействию = ПодписиКДаннымОзнакомления.Получить(ДействиеЗадачи);
		
		Если ПодписиПоДействию = Неопределено Тогда
			ПодписиПоДействию = Новый Соответствие;
			ПодписиКДаннымОзнакомления.Вставить(ДействиеЗадачи, ПодписиПоДействию);
		КонецЕсли;
		
		ПодписиПоДокументу = ПодписиПоДействию.Получить(Документ);
		Если ПодписиПоДокументу = Неопределено Тогда
			ПодписиПоДокументу = Новый Массив;
			ПодписиПоДействию.Вставить(Документ, ПодписиПоДокументу);
		КонецЕсли;
		
		СвойстваПодписи = Данные.СвойстваПодписи;
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка") 
			И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли;
		
		ПодписиПоДокументу.Добавить(СвойстваПодписи);

	КонецЦикла;
	
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПодписыватьДанныеОзнакомления = Ложь;
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
		"НаборыВерсийФайлов",
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.НаборыВерсийФайлов);
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
		"ПодписиКДаннымОзнакомления",
		ПодписиКДаннымОзнакомления);
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполненияУказатьРегистрационныйНомер(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Свойство("УказатьРегистрационныйНомер")
		Или Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.УказатьРегистрационныйНомер Тогда
		
		Возврат ВызванаИнтерактивнаяОбработка;
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДанныеВыполненияПослеУказанияДанныхРегистрации",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Вставить(
		"ТекущийПредмет",
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПредметыДляРучнойНумерации[0]);
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПредметыДляРучнойНумерации.Удалить(0);
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.УказатьРегистрационныйНомер =
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПредметыДляРучнойНумерации.Количество() > 0;
	
	ДелопроизводствоКлиент.ВвестиДанныеРегистрации(,, СтрШаблон(НСтр("ru = 'Укажите номер и дату регистрации ""%1""'"),
			Строка(КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТекущийПредмет)),
		ОписаниеОповещения);
	
	ВызванаИнтерактивнаяОбработка = Истина;
	
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияУказатьРегистрационныйНомер.
//
// Параметры:
//  Результат - Структура Из КлючИЗначение:
//      * РегистрационныйНомер - Строка
//      * ДатаРегистрации      - Дата
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеУказанияДанныхРегистрации(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	РегистрационныйНомер = СокрЛП(Результат.РегистрационныйНомер);
	Если Не ЗначениеЗаполнено(РегистрационныйНомер) И Не ЗначениеЗаполнено(Результат.ДатаРегистрации) Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	// Выполнить задачу.
	Если Не КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Свойство("РучныеНомераДокументов") Тогда
		Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Свойство("РучныеНомераДокументов") Тогда
			КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
				"РучныеНомераДокументов",
				КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.РучныеНомераДокументов);
		Иначе
			КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
				"РучныеНомераДокументов",
				Новый Соответствие);
		КонецЕсли;
	КонецЕсли;
	
	Если Не КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Свойство(
		"ДатыДокументовВведенныеВручную") Тогда
		
		Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Свойство(
			"ДатыДокументовВведенныеВручную") Тогда
			
			КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
				"ДатыДокументовВведенныеВручную",
				КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ДатыДокументовВведенныеВручную);
		Иначе
			КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
				"ДатыДокументовВведенныеВручную",
				Новый Соответствие);
		КонецЕсли;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.РучныеНомераДокументов.Вставить(
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТекущийПредмет,
		РегистрационныйНомер);
		
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.ДатыДокументовВведенныеВручную.Вставить(
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ТекущийПредмет,
		Результат.ДатаРегистрации);
	
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполненияВыбратьПропущенныйНомер(КонтекстВыполненияЗадачи, ФормаВладелец)

	ДополнительныеПараметры = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры;
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не ДополнительныеПараметры.Свойство("ВыбратьПропущенныйНомер")
		Или Не ДополнительныеПараметры.ВыбратьПропущенныйНомер Тогда

		Возврат ВызванаИнтерактивнаяОбработка;

	КонецЕсли;

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	ТекущийПредмет = ДополнительныеПараметры.ПредметДляВыбораПропущенногоНомера;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДанныеВыполненияПослеВыбораПропущенногоНомера",
		ЭтотОбъект, ПараметрыОповещения);

	НомерТекущегоПредмета = ДополнительныеПараметры.ПропущенныеНомераДокументов[ТекущийПредмет];
	ДополнительныеПараметры.ВыбратьПропущенныйНомер = НомерТекущегоПредмета = Неопределено;

	Отказ = Ложь;
	НумерацияКлиент.ВыбратьПропущенныеНомера(ТекущийПредмет, ОписаниеОповещения, Отказ);

	ВызванаИнтерактивнаяОбработка = Истина;

	Возврат ВызванаИнтерактивнаяОбработка;

КонецФункции

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияВыбратьПропущенныйНомер.
//
// Параметры:
//  Результат - Структура.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеВыбораПропущенногоНомера(Результат, ПараметрыОповещения) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	// Выполнить задачу.
	ПараметрыВыполнения = КонтекстВыполненияЗадачи.ПараметрыВыполнения;
	ДанныеВыполнения = КонтекстВыполненияЗадачи.ДанныеВыполнения;
	
	Если Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПропущенныеНомераДокументов") Тогда
		Если ДанныеВыполнения.ДополнительныеПараметры.Свойство("ПропущенныеНомераДокументов") Тогда
			ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
				"ПропущенныеНомераДокументов",
				ДанныеВыполнения.ДополнительныеПараметры.ПропущенныеНомераДокументов);
		Иначе
			ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
				"ПропущенныеНомераДокументов",
				Новый Соответствие);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения.ДополнительныеПараметры.ПропущенныеНомераДокументов.Вставить(Результат.Документ,
		Результат);
	
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполненияВвестиНовыйСрок(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Свойство("ВвестиНовыйСрок")
		Или Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ВвестиНовыйСрок Тогда
		
		Возврат ВызванаИнтерактивнаяОбработка;
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДанныеВыполненияПослеВводаНовогоСрока",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ПараметрыФормы = Новый Структура("СтарыйСрок, НовыйСрок");
	ПараметрыФормы.СтарыйСрок = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.СтарыйСрок;
	ПараметрыФормы.НовыйСрок = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ЗапрошенныйНовыйСрок;
	
	ВызванаИнтерактивнаяОбработка = Истина;
	
	ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ВводНовогоСрока",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияВвестиНовыйСрок.
//
// Параметры:
//  НовыйСрок - Дата.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеВводаНовогоСрока(НовыйСрок, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(НовыйСрок) <> Тип("Дата") Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ВвестиНовыйСрок = Ложь;
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить("НовыйСрок", НовыйСрок);
	
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	ПодтверждениеПереносаОбработано = 
		РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьПодтверждениеПереносаСрокаЗадачи(
			КонтекстВыполненияЗадачи.ДанныеВыполнения);
	
	Если Не ПодтверждениеПереносаОбработано
		И КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.КоличествоПереносовПоЗадаче = 0 Тогда
		
		СтарыйСрокПроцесса = Дата(1,1,1);
		НовыйСрокПроцесса = Дата(1,1,1);
		
		ПереносСроковВыполненияЗадачВызовСервера.ОпределитьСрокПроцессаПриИзмененииСрокаЗадачи(
			КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПредметРассмотрения,
			НовыйСрок,
			КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцессПредметаРассмотрения,
			СтарыйСрокПроцесса,
			НовыйСрокПроцесса);
		
		Если СтарыйСрокПроцесса <> НовыйСрокПроцесса Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОбработатьДанныеВыполненияПослеПодтвержденияПереносаСрока",
				ЭтотОбъект,
				ПараметрыОповещения);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Процесс",
				КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.БизнесПроцессПредметаРассмотрения);
			ПараметрыФормы.Вставить("НовыйСрокИсполнения", НовыйСрокПроцесса);
			ПараметрыФормы.Вставить("СформироватьДеревоВышестоящихПроцессовСНовымиСроками", Истина);
			
			ОткрытьФорму("ОбщаяФорма.ПодтверждениеПереносаСрока",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияПослеВводаНовогоСрока.
//
// Параметры:
//  Результат - КодВозвратаДиалога.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеПодтвержденияПереносаСрока(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполненияПодписатьВизыЭП(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Свойство("ПодписатьВизыЭП")
		Или Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПодписатьВизыЭП Тогда
		
		Возврат ВызванаИнтерактивнаяОбработка;
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	ПредметыПоДействиям =
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.НаборыПредметовДляПодписанияВиз;
	
	ДатаФормированияВиз = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Вставить(
		"ДатаФормированияВиз", ДатаФормированияВиз);
	
	ВизыДляПодписания = Новый Массив;
	
	Для Каждого Элемент Из ПредметыПоДействиям Цикл
		
		ДействиеЗадачи = Элемент.Ключ;
		ПредметыДляВизированияЭП = Элемент.Значение;
		
		Для Каждого Предмет Из ПредметыДляВизированияЭП Цикл
			
			ВизаКПодписанию = Новый Структура;
			
			ВизаКПодписанию.Вставить("Представление", ДействиеЗадачи);
			
			ДанныеВизы = ДанныеВизыДляПодписания(Предмет, ДатаФормированияВиз, КонтекстВыполненияЗадачи);
			ВизаКПодписанию.Вставить("ОбъектПодписания", ДанныеВизы);
			
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ДействиеЗадачи", ДействиеЗадачи);
			
			ВизаКПодписанию.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);
			
			ВизыДляПодписания.Добавить(ВизаКПодписанию);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДанныеВыполненияПослеПодписанияВизЭП",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	Заголовки = Новый Структура;
	
	Если ВизыДляПодписания.Количество() = 1 Тогда
		Заголовки.Вставить("Операция", НСтр("ru = 'Подпись визы согласования'"));
		Заголовки.Вставить("ЗаголовокДанных", НСтр("ru = 'Виза согласования'"));
	Иначе
		Заголовки.Вставить("Операция", НСтр("ru = 'Подпись виз согласования'"));
		Заголовки.Вставить("ЗаголовокДанных", НСтр("ru = 'Визы согласования'"));
	КонецЕсли;
	
	ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
	ПараметрыПодписания.ИдентификаторФормы = КонтекстВыполненияЗадачи.ИдентификаторФормы;
	ПараметрыПодписания.ОбработчикЗавершения = ОписаниеОповещения;
	ПараметрыПодписания.Заголовки = Заголовки;
	
	РаботаСЭПКлиент.Подписать(ВизыДляПодписания, ПараметрыПодписания);
	
	ВызванаИнтерактивнаяОбработка = Истина;
	
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

Функция ДанныеВизыДляПодписания(Предмет, ДатаФормирования, КонтекстВыполненияЗадачи)
	
	СтруктураВизы = РаботаСВизамиСогласованияКлиент.ПолучитьСтруктуруВизДляПодписания();
	
	ФактическийИсполнитель = СотрудникиКлиент.ОсновнойСотрудник();
	
	ВыбранныйФактическийИсполнитель =
		КонтекстВыполненияЗадачи.ПараметрыВыполнения.ВыбранныйФактическийИсполнитель;
	Если ВыбранныйФактическийИсполнитель <> Неопределено Тогда
		ФактическийИсполнитель = ВыбранныйФактическийИсполнитель.Адресат;
	КонецЕсли;
	
	РезультатДействия = КонтекстВыполненияЗадачи.РезультатДействия;
	
	РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.ПустаяСсылка");
	Если РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.Согласовано") Тогда
		РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано");
	ИначеЕсли РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.СогласованоСЗамечаниями") Тогда
		РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями");
	ИначеЕсли РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.НеСогласовано") Тогда
		РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано");
	КонецЕсли;
	
	СтруктураВизы.Документ = Предмет;
	СтруктураВизы.Исполнитель = ФактическийИсполнитель;
	СтруктураВизы.ДатаИсполнения = ДатаФормирования;
	СтруктураВизы.РезультатСогласования = РезультатСогласования;
	
	Возврат СтруктураВизы;
	
КонецФункции

// Возвращает структуру данных ознакомления
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - 
//  Исполнитель - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи -
//  ВерсииФайлов - Массив из СправочникСсылка.ВерсииФайлов - 
//  КонтекстВыполненияЗадачи - см. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи
//
// Возвращаемое значение:
//  Структура - см. СтруктураДанныхОзнакомленияДляПодписания
//
Функция ДанныеОзнакомленияДляПодписания(Документ, Исполнитель, ВерсииФайлов, КонтекстВыполненияЗадачи)
	
	СтруктураДанныхОзнакомления = СтруктураДанныхОзнакомленияДляПодписания();
	
	СтруктураДанныхОзнакомления.Документ = Документ;
	СтруктураДанныхОзнакомления.Исполнитель = Исполнитель;
	СтруктураДанныхОзнакомления.ВерсииФайлов = ВерсииФайлов;
	
	Возврат СтруктураДанныхОзнакомления;
	
КонецФункции

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияПодписатьВизыЭП.
//
// Параметры:
//  Результат - Структура.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеПодписанияВизЭП(Результат, ПараметрыОповещения) Экспорт
	
	Если Не Результат.Успех Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	ПодписиКВизамСогласования = Новый Соответствие;
	
	Для Каждого Данные Из Результат.НаборДанных Цикл
		
		Если Не Данные.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеЗадачи = Данные.ДополнительныеСвойства.ДействиеЗадачи;
		
		ПодписиПоДействию = ПодписиКВизамСогласования.Получить(ДействиеЗадачи);
		Если ПодписиПоДействию = Неопределено Тогда
			ПодписиПоДействию = Новый Массив;
			ПодписиКВизамСогласования.Вставить(ДействиеЗадачи, ПодписиПоДействию);
		КонецЕсли;
		
		Если ТипЗнч(Данные.СвойстваПодписи) = Тип("Структура") Тогда
			
			ПодписиПоДействию.Добавить(Данные.СвойстваПодписи);
			
		ИначеЕсли ТипЗнч(Данные.СвойстваПодписи) = Тип("Строка")
			И ЭтоАдресВременногоХранилища(Данные.СвойстваПодписи) Тогда	
			
			СвойстваПодписиСтруктура = ПолучитьИзВременногоХранилища(Данные.СвойстваПодписи);
			Если ТипЗнч(СвойстваПодписиСтруктура) = Тип("Структура") Тогда
				ПодписиПоДействию.Добавить(СвойстваПодписиСтруктура);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПодписатьВизыЭП = Ложь;
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
		"ДатаИсполнения",
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ДатаФормированияВиз);
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
		"ПодписиКВизамСогласования",
		ПодписиКВизамСогласования);
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполненияПодписатьПредметыЭП(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	ДополнительныеПараметры = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры;
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не ДополнительныеПараметры.Свойство("ПодписатьПредметыЭП")
		Или Не ДополнительныеПараметры.ПодписатьПредметыЭП Тогда
		
		Возврат ВызванаИнтерактивнаяОбработка;
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	ПредметыПоДействиям = ДополнительныеПараметры.НаборыПредметовДляПодписания;
	ПредметыДляПодписания = Новый Массив;
	
	ДатаПодписи = ОбщегоНазначенияКлиент.ДатаСеанса();
	ОсновнойСотрудник = СотрудникиКлиент.ОсновнойСотрудник();
	
	Для Каждого Элемент Из ПредметыПоДействиям Цикл
		
		ДействиеЗадачи = Элемент.Ключ;
		ПредметыДействия = Элемент.Значение;
		
		Для Каждого Предмет Из ПредметыДействия Цикл
			
			ДанныеДляПодписания = Новый Структура;
			ДанныеДляПодписания.Вставить("ОбъектПодписания", Предмет);
			
			ДанныеПодписанта = Новый Структура;
			ДанныеПодписанта.Вставить("Подписал", ОсновнойСотрудник);
			ДанныеПодписанта.Вставить("ДатаПодписи", ДатаПодписи);
			ДанныеПодписанта.Вставить("Подписан", Истина);
			
			ПараметрыДанных = Новый Структура("ДанныеПодписанта", ДанныеПодписанта);
			
			ДанныеДляПодписания.Вставить("ПараметрыДанных", ПараметрыДанных);
			
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ДействиеЗадачи", ДействиеЗадачи);
			
			ДанныеДляПодписания.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);
			
			ПредметыДляПодписания.Добавить(ДанныеДляПодписания);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДанныеВыполненияПослеПодписанияПредметовЭП",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	Заголовки = Новый Структура("Операция");
	
	Если ПредметыДляПодписания.Количество() = 1 Тогда
		Заголовки.Операция = НСтр("ru = 'Подпись предмета'");
	Иначе
		Заголовки.Операция = НСтр("ru = 'Подпись предметов'");
	КонецЕсли;
	
	ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
	ПараметрыПодписания.ИдентификаторФормы = КонтекстВыполненияЗадачи.ИдентификаторФормы;
	ПараметрыПодписания.ОбработчикЗавершения = ОписаниеОповещения;
	ПараметрыПодписания.Заголовки = Заголовки;
	
	РаботаСЭПКлиент.Подписать(ПредметыДляПодписания, ПараметрыПодписания);
	
	ВызванаИнтерактивнаяОбработка = Истина;
	
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияПодписатьПредметыЭП.
//
// Параметры:
//  Результат - Структура.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеПодписанияПредметовЭП(Результат, ПараметрыОповещения) Экспорт
	
	Если Не Результат.Успех Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	ПодписиЭПКПредметам = Новый Соответствие;
	
	Для Каждого Данные Из Результат.НаборДанных Цикл
		
		Если Не Данные.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеЗадачи = Данные.ДополнительныеСвойства.ДействиеЗадачи;
		
		ПодписиПоДействию = ПодписиЭПКПредметам.Получить(ДействиеЗадачи);
		Если ПодписиПоДействию = Неопределено Тогда
			ПодписиПоДействию = Новый Массив;
			ПодписиЭПКПредметам.Вставить(ДействиеЗадачи, ПодписиПоДействию);
		КонецЕсли;
		
		ПодписанныеДанные = Новый Структура;
		ПодписанныеДанные.Вставить("ПодписанныйОбъект", Данные.Представление);
		
		СвойстваПодписи = Данные.СвойстваПодписи;
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка") 
			И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли; 
		ПодписанныеДанные.Вставить("СвойстваПодписи", СвойстваПодписи);
		
		ПодписиПоДействию.Добавить(ПодписанныеДанные);
		
	КонецЦикла;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ПодписатьПредметыЭП = Ложь;
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
		"ПодписиЭПКПредметам",
		ПодписиЭПКПредметам);
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка.
//
Функция ОбработатьДанныеВыполненияЗадатьВопросОПодзадачах(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.Свойство("ЗадатьВопросОПодзадачах")
		Или Не КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ЗадатьВопросОПодзадачах Тогда
		
		Возврат ВызванаИнтерактивнаяОбработка;
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДанныеВыполненияПослеВопросаОПодзадачах",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	БизнесПроцессыИЗадачиКлиент.ЗадатьВопросОПодзадачахПриВыполненииЗадачи(
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ЗадачаПроцесса,
		ОписаниеОповещения);
	
	ВызванаИнтерактивнаяОбработка = Истина;
	
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполненияЗадатьВопросОПодзадачах.
//
// Параметры:
//  ВариантОбработкиПодзадач - Строка.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеВопросаОПодзадачах(ВариантОбработкиПодзадач, ПараметрыОповещения) Экспорт
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	Если ВариантОбработкиПодзадач = "ИгнорироватьПодзадачи" Тогда 
		
		// Выполнить задачу.
		
	ИначеЕсли ВариантОбработкиПодзадач = "ПрерватьПодзадачи" Тогда 
		
		// Прервать подзадачи, а потом выполнить задачу.
		БизнесПроцессыИЗадачиВызовСервера.ПрерватьПодзадачи(
			КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ЗадачаПроцесса);
		
	Иначе
		
		// Не выполнять задачу.
		Возврат;
		
	КонецЕсли;
	
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры.ЗадатьВопросОПодзадачах = Ложь;
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДополнительныеПараметры.Вставить(
		"ВариантОбработкиПодзадач",
		ВариантОбработкиПодзадач);
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения при попытке интерактивного выполнения задач.
// При необходимости вызывает форму выбора организации для подписания
// 
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка
Функция ОбработатьДанныеВыполненияВыбратьОрганизациюДляПодписания(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	ПараметрыВыполнения = КонтекстВыполненияЗадачи.ПараметрыВыполнения;
	ДанныеВыполнения = КонтекстВыполненияЗадачи.ДанныеВыполнения;
	ТекущийПредмет = Неопределено;
	
	ДанныеВыполнения.ДополнительныеПараметры.Свойство("ПредметДляВыбораОрганизации", ТекущийПредмет);
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ТекущийПредмет)
		Или ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПредметыСВыбраннымиОрганизациями")
		И ЗначениеЗаполнено(ПараметрыВыполнения.ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями[ТекущийПредмет]) Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	Исполнитель = ДанныеВыполнения.ДополнительныеПараметры.ИсполнительДляВыбораОрганизации;
	ОрганизацииДляВыбора = ДанныеВыполнения.ДополнительныеПараметры.ОрганизацииДляВыбораПодписания;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДанныеВыполненияПослеВыбораОрганизацииДляПодписания",
		ЭтотОбъект, ПараметрыОповещения);

	РаботаСПодписямиДокументовКлиент.ВыбратьОрганизациюДляПодписания(ТекущийПредмет,
		Исполнитель,
		ОрганизацииДляВыбора,
		ОписаниеОповещения,
		ДанныеВыполнения.ЧислоЗадач = 1);

	ВызванаИнтерактивнаяОбработка = Истина;

	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Обработать данные выполнения после выбора организации для подписания.
// 
// Параметры:
//  Результат - СправочникСсылка.Организации, Неопределено - Результат выбора организации для подписания
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеВыбораОрганизацииДляПодписания(Результат, ПараметрыОповещения) Экспорт

	Если ТипЗнч(Результат) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	ДополнительныеПараметры = КонтекстВыполненияЗадачи.ДанныеВыполнения.ДополнительныеПараметры;
	ТекущийПредмет = ДополнительныеПараметры.ПредметДляВыбораОрганизации;
	
	ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями[ТекущийПредмет] = Результат;
	
	ПараметрыВыполнения = КонтекстВыполненияЗадачи.ПараметрыВыполнения;
	Если Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ПредметыСВыбраннымиОрганизациями") Тогда
		ПараметрыВыполнения.ДополнительныеПараметры.Вставить("ПредметыСВыбраннымиОрганизациями", 
			Новый Соответствие);
	КонецЕсли;
	ПараметрыВыполнения.ДополнительныеПараметры.ПредметыСВыбраннымиОрганизациями[ТекущийПредмет] = Результат;

	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения при попытке интерактивного выполнения задач.
// При необходимости вызывает форму выбора подписывающего для подписания
// 
// Параметры:
//  КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
// 
// Возвращаемое значение:
//  Булево - Вызвана интерактивная обработка
Функция ОбработатьДанныеВыполненияВыбратьПодписывающегоДляПодписания(КонтекстВыполненияЗадачи, ФормаВладелец)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	ПараметрыВыполнения = КонтекстВыполненияЗадачи.ПараметрыВыполнения;
	ДанныеВыполнения = КонтекстВыполненияЗадачи.ДанныеВыполнения;
	
	ТекущийПредмет = Неопределено;
	ДанныеВыполнения.ДополнительныеПараметры.Свойство("ПредметДляВыбораПодписанта", ТекущийПредмет);
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ТекущийПредмет)
		Или (ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ВыбранныйПодписывающийИлиЗамещающий")
		И ЗначениеЗаполнено(ПараметрыВыполнения.ДополнительныеПараметры.ВыбранныйПодписывающийИлиЗамещающий)) Тогда
		Возврат ВызванаИнтерактивнаяОбработка;
	КонецЕсли;
	
	ПодписывающиеСписок = ДанныеВыполнения.ДополнительныеПараметры.ПодписывающиеДляВыбораПодписания;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДанныеВыполненияПослеВыбораПодписывающегоДляПодписания",
		ЭтотОбъект, ПараметрыОповещения);
	
	ДействияКлиент.ВыбратьПодписывающегоДляПодписания(ПодписывающиеСписок,
		ТекущийПредмет,
		ОписаниеОповещения,
		ДанныеВыполнения.ЧислоЗадач = 1);
	ВызванаИнтерактивнаяОбработка = Истина;
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Обработать данные выполнения после выбора организации для подписания.
// 
// Параметры:
//  Результат - СправочникСсылка.Сотрудники, Неопределено - Результат выбора сотрудника для подписания
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеВыбораПодписывающегоДляПодписания(Результат, ПараметрыОповещения) Экспорт

	Если ТипЗнч(Результат) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	ПараметрыВыполнения = КонтекстВыполненияЗадачи.ПараметрыВыполнения;
	Если Не ПараметрыВыполнения.ДополнительныеПараметры.Свойство("ВыбранныйПодписывающийИлиЗамещающий") Тогда
		ПараметрыВыполнения.ДополнительныеПараметры.Вставить("ВыбранныйПодписывающийИлиЗамещающий", 
			Неопределено);
	КонецЕсли;
	ПараметрыВыполнения.ДополнительныеПараметры.ВыбранныйПодписывающийИлиЗамещающий = Результат;
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	РаботаСЗадачамиКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Возвращает структуру реквизитов данных ознакомления, которые будут подписаны
//
// Возвращаемое значение:
//  Структура - Данные ознакомления для подписания:
//   * Документ - СправочникСсылка.ДокументыПредприятия, Неопределено - Документ.
//   * Исполнитель - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи, Неопределено - Исполнитель.
//   * ВерсииФайлов - Неопределено, Соответствие из КлючИЗначение - Версии файлов.
//
Функция СтруктураДанныхОзнакомленияДляПодписания()
	
	СтруктураДанныхОзнакомленияДляПодписания = Новый Структура;
	СтруктураДанныхОзнакомленияДляПодписания.Вставить("Документ", Неопределено);
	СтруктураДанныхОзнакомленияДляПодписания.Вставить("Исполнитель", Неопределено);
	СтруктураДанныхОзнакомленияДляПодписания.Вставить("ВерсииФайлов", Неопределено);
	
	Возврат СтруктураДанныхОзнакомленияДляПодписания;
	
КонецФункции

#КонецОбласти