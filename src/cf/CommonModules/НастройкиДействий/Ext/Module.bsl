#Область ПрограммныйИнтерфейс

#Область СобытияФормыНастройкиДействий

// Обработчик создания формы настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма настройки действия.
// 	Отказ - Булево - Признак отказа от создания формы.
// 	СтандартнаяОбработка - Булево - передается признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт 
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыВидаДействия =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидДействия, "ЭтапОбработкиПредмета");
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	Форма.Заголовок = НастройкиДействий.ПредставлениеНастройки(Объект.Ссылка, Объект.ВидДействия, Ложь);
	
	Форма.СписокПредметов.Очистить();
	Форма.СписокПредметов.Добавить("Предмет", НСтр("ru = 'Предмет'"));
	
	Форма.ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		
	УсловноеОформление = Форма.УсловноеОформление;
	НастроитьУсловноеОформлениеЭтапа(УсловноеОформление);
	НастроитьУсловноеОформлениеПустогоУчастника(УсловноеОформление);
	НастроитьУсловноеОформлениеПустогоУсловия(УсловноеОформление);
	НастроитьУсловноеОформлениеКомментарияЗаполненияУчастника(
		УсловноеОформление, "Участники.Участник", "УчастникиПредставлениеСтроки");
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Элементы.КлючОбщейНастройки.Заголовок = НСтр("ru = 'Это копия общей настройки'");
		Элементы.КлючОбщейНастройки.Гиперссылка = Истина;
		Форма.ОбщаяНастройка = Параметры.ЗначениеКопирования;
	Иначе
		Элементы.КлючОбщейНастройки.Заголовок = НСтр("ru = 'Это общая настройка'");
		Элементы.КлючОбщейНастройки.Гиперссылка = Ложь;
	КонецЕсли;
	
	Форма.КлючОбщейНастройки = Параметры.КлючОбщейНастройки;
	Элементы.КлючОбщейНастройки.Видимость = ЗначениеЗаполнено(Форма.КлючОбщейНастройки); 
	
	ВидОбъекта = Неопределено;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПравилаОбработкиОбъектов.ПравилоОбработки,
			|	ПравилаОбработкиОбъектов.ВидОбъекта
			|ИЗ
			|	РегистрСведений.ПравилаОбработкиОбъектов КАК ПравилаОбработкиОбъектов
			|ГДЕ
			|	ПравилаОбработкиОбъектов.Настройка = &Настройка");
		Запрос.Параметры.Вставить("Настройка", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(ВидОбъекта) Тогда
				ВидОбъекта = Выборка.ВидОбъекта;
			Иначе
				ВидОбъекта = Справочники.ПравилаОбработки.ВидОбъектаКорневогоПравила(
					Выборка.ПравилоОбработки);
			КонецЕсли;
		КонецЦикла;
			
	ИначеЕсли Параметры.Свойство("КлючДляРегистрацииНастроек") 
		И ЗначениеЗаполнено(Параметры.КлючДляРегистрацииНастроек) Тогда
		
		ВидОбъекта = Справочники.ПравилаОбработки.ВидОбъектаКорневогоПравила(
			Параметры.КлючДляРегистрацииНастроек.ПравилоОбработки);

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОбъекта) Тогда
		Форма.ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъектаПоТипуВидаОбъекта(
			ТипЗнч(ВидОбъекта));
	КонецЕсли;
	
	Элементы.УчастникиЗаполнитьУчастниковПоУмолчанию.Видимость =
		ЕстьЗаполнениеУчастниковПоУмолчанию(РеквизитыВидаДействия.ЭтапОбработкиПредмета);
	
	Если Элементы.Найти("ОписаниеОтложенногоНачалаВыполнения") <> Неопределено Тогда
		Форма.Элементы.ОписаниеОтложенногоНачалаВыполнения.Видимость = Ложь;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеНачалоВыполненияДействий") Тогда
			Форма.Элементы.ОписаниеОтложенногоНачалаВыполнения.Видимость = Истина;
			ДниИЧасыЗадержки = ДействияКлиентСервер.ДниИЧасыЗадержкиПоСроку(Форма.Объект.ОтложенноеНачалоВыполнения);
			Форма.ОтложенноеНачалоВыполненияДни = ДниИЧасыЗадержки.ЗадержкаДни;	
			Форма.ОтложенноеНачалоВыполненияЧасы = ДниИЧасыЗадержки.ЗадержкаЧасы;	
			ДействияКлиентСервер.НастроитьОтображениеОтложенногоНачалаВыполненияДействия(Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик "При записи" формы настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма настройки действия.
// 	Отказ - Булево - Признак отказа от записи.
// 	ТекущийОбъект - Записываемый объект
// 	ПараметрыЗаписи - Структура - Структура, содержащая параметры записи. 
//
Процедура ПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт 
	
	Параметры = Форма.Параметры;
	Если ПараметрыЗаписи.ЭтоНовыйОбъект
		И ЗначениеЗаполнено(Параметры.ИмяМенеджераДляРегистрацииНастроек) Тогда
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
			Параметры.ИмяМенеджераДляРегистрацииНастроек);
		Менеджер.ПриЗаписиНовойНастройки(Параметры.КлючДляРегистрацииНастроек,
			ТекущийОбъект);
		
	КонецЕсли;
	
КонецПроцедуры
 
// Обработчик "После записи" формы настройки действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма настройки действия.
// 	ТекущийОбъект - Записываемый объект
// 	ПараметрыЗаписи - Структура - Структура, содержащая параметры записи. 
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт 
	
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(
		ТекущийОбъект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(ТекущийОбъект.Ссылка);
	
	Форма.Заголовок = ПредставлениеНастройки(
		ТекущийОбъект.Ссылка, ТекущийОбъект.ВидДействия);
	
КонецПроцедуры

// Обработчик заполнения настройки действия
// 
// Параметры:
// 	НастройкаОбъект - СправочникОбъект.НастройкиДействий - заполняемая настройка действия.
// 	ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения.
// 	ТекстЗаполнения -  Строка, Неопределено - если у объекта основное представление, то значение присваивается реквизиту Наименование.
// 	СтандартнаяОбработка - Булево -в данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(НастройкаОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт 
	
	НастройкаОбъект.МоментРазыменованияУчастников = 
		Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия;
	НастройкаОбъект.Создал = Сотрудники.ОсновнойСотрудник();
	НастройкаОбъект.Автор = Справочники.Сотрудники.ПустаяСсылка();
	НастройкаОбъект.ВозможностьИзменятьУчастников = Перечисления.ВариантыДоступностиИзмененияДействий.Авто;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиДействийОбработчикиСобытий

// Обработчик "Перед записью" формы настройки действия
// 
// Параметры:
// 	Ссылка - ОпределяемыйТип.НастройкиДействий - ссылка на настройку действия.
// 	ДополнительныеСвойства - Структура - параметры записи.
// 	Отказ - Булево - Признак отказа от записи.
//
Процедура ПередЗаписью(Ссылка, ДополнительныеСвойства, Отказ) Экспорт 
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
			"ПометкаУдаления");
	Иначе
		ПредыдущиеЗначенияРеквизитов = Новый Структура(
			"ПометкаУдаления",
			Ложь);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления",
		ПредыдущиеЗначенияРеквизитов.ПометкаУдаления);
	
КонецПроцедуры

// Обработчик "При записи" формы настройки действия
// 
// Параметры:
// 	Ссылка - ОпределяемыйТип.НастройкиДействий - ссылка на настройку действия.
// 	ДополнительныеСвойства - Структура - параметры записи.
// 	ПометкаУдаления - Булево - пометка удаления настройки.
// 	Отказ - Булево - Признак отказа от записи.
//
Процедура ПриЗаписи(Ссылка, ДополнительныеСвойства, ПометкаУдаления, Отказ) Экспорт 
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает имя справочника по виду действия
// 
// Параметры:
// 	ВидДействия - СправочникСсылка.ВидыДействий - ссылка на вид действия.
// Возвращаемое значение:
// 	Строка - имя справочника
//
Функция ИмяСправочникаПоВидуДействия(ВидДействия) Экспорт
	
	ТипДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДействия, "Тип");
	Возврат ИмяСправочникаПоТипуДействия(ТипДействия);
	
КонецФункции

// Возвращает имя справочника по типу действия
// 
// Параметры:
// 	ТипДействия - ПеречислениеСсылка.ТипыДействий - тип определяемого действия
// Возвращаемое значение:
// 	Строка - имя справочника
//
Функция ИмяСправочникаПоТипуДействия(ТипДействия) Экспорт
	
	Если ТипДействия = Перечисления.ТипыДействий.Исполнение Тогда
		Возврат "НастройкиДействийИсполнения";
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Ознакомление Тогда
		Возврат "НастройкиДействийОзнакомления";
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Подписание Тогда
		Возврат "НастройкиДействийПодписания";
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Регистрация Тогда
		Возврат "НастройкиДействийРегистрации";
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Согласование Тогда
		Возврат "НастройкиДействийСогласования";
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Утверждение Тогда
		Возврат "НастройкиДействийУтверждения";
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип действия: %1'"), ТипДействия);
	КонецЕсли;
	
КонецФункции

// Возвращает представление настройки действия
// 
// Параметры:
// 	Ссылка - ОпределяемыйТип.НастройкиДействий - ссылка на настройку действия.
// 	ВидДействия - СправочникСсылка.ВидыДействий - ссылка на вид действия.
// 	ОтображатьСоздание - Булево - если Истина, то добавляет признак создания элемента.
// Возвращаемое значение:
// 	Строка - представление настройки действия
//
Функция ПредставлениеНастройки(Ссылка, ВидДействия, ОтображатьСоздание = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ВидДействия) Тогда
		ПредставлениеВидаДействия = ВидДействия;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.НастройкиДействийИсполнения") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Исполнение'");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.НастройкиДействийОзнакомления") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Ознакомление'");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.НастройкиДействийПодписания") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Подписание'");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.НастройкиДействийРегистрации") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Регистрация'");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.НастройкиДействийСогласования") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Согласование'");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.НастройкиДействийУтверждения") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Утверждение'");
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип: %1'"), ТипЗнч(Ссылка));
	КонецЕсли;
	
	Если Ссылка.Пустая() И ОтображатьСоздание Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 (Настройка) (Создание)'"), ПредставлениеВидаДействия);
	Иначе
		Представление = СтрШаблон(НСтр("ru = '%1 (Настройка)'"), ПредставлениеВидаДействия);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает количество правил по определенному разрезу настроек.
// 
// Параметры:
// 	РазрезНастройки - СправочникСсылка.Организации, ОпределяемыйТип.ВидОбъектаСОбработкой, 
// 			СправочникСсылка.СтруктураПредприятия, СправочникСсылка.ТематикиДокументов - элемент группировки правил.
// Возвращаемое значение:
// 	Число - количество правил
//
Функция КоличествоНастроекПравилОбработки(РазрезНастройки) Экспорт 
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ПравилаОбработки.Ссылка) КАК КоличествоНастроек
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|ГДЕ
		|	ПравилаОбработки.ЭлементГруппировки = &РазрезНастройки
		|	И НЕ ПравилаОбработки.НеДействует
		|	И НЕ ПравилаОбработки.ПометкаУдаления");
	Запрос.УстановитьПараметр("РазрезНастройки", РазрезНастройки);
	КоличествоНастроек = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() 
		И ЗначениеЗаполнено(Выборка.КоличествоНастроек) Тогда 
		КоличествоНастроек = Выборка.КоличествоНастроек;
	КонецЕсли;
	
	Возврат КоличествоНастроек;
	
КонецФункции

// Заполняет дерево действий для правила обработки
// 
// Параметры:
// 	Действия - ДеревоЗначений - список действий на форме.
// 	КлючНастроек - Структура - содержит ключ настройки правил.
// ТекущийВидДействия - СправочникСсылка.ВидыДействий
//
Процедура ЗаполнитьДействияДляПравилаОбработки(Действия, КлючНастроек, ТекущийВидДействия = Неопределено) Экспорт 
	
	ЭлементыДействия = Действия.ПолучитьЭлементы();
	ЭлементыДействия.Очистить();
	
	Если КлючНастроек.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КлючНастроек.Свойство("ПравилоОбработки") Тогда
		ПравилоОбработки = КлючНастроек.ПравилоОбработки;
		РеквизитыПравилаОбработки = КлючНастроек;
	Иначе
		ПравилоОбработки = Неопределено;
		РеквизитыПравилаОбработки = КлючНастроек;
	КонецЕсли;
	
	ВидыДействийНастройки = РегистрыСведений.ПравилаОбработкиОбъектов.НастройкиИВидыДействийДляПравила(
		ПравилоОбработки, РеквизитыПравилаОбработки);
	Для Каждого Выборка Из ВидыДействийНастройки Цикл
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ВидДействия", Выборка.ВидДействия);
		ЗначенияЗаполнения.Вставить("Настройка", Выборка.Настройка);
		ЗначенияЗаполнения.Вставить("НастройкаВключена", Выборка.НастройкаВключена);
		
		Если ЗначениеЗаполнено(Выборка.ВидДействия) И Выборка.ВидДействия = ТекущийВидДействия Тогда
			ЗначенияЗаполнения.Вставить("ЭтоТекущийВидДействия", Истина);
		КонецЕсли;
		
		Если Выборка.ЭтоПустаяНастройка Тогда
			ЭлементДействия = ЭлементыДействия.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементДействия, ЗначенияЗаполнения);
			ЭлементДействия.ЭтоДействие = Истина;
			ЭлементДействия.ЭтоПустаяНастройка = Истина;
			ЭлементДействия.Представление = Выборка.ВидДействия;
		Иначе
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Настройка);
			Менеджер.ДополнитьДеревоПредставлениемНастройки(ЭлементыДействия, ЗначенияЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет настройку действия для правила обработки и очищает запись в регистре
// 
// Параметры:
// 	ПравилоОбработки - СправочникСсылка.ПравилаОбработки - ссылка на правило.
// 	ВидДействия - СправочникСсылка.ВидыДействий - ссылка на вид действия
// 	Настройка - ОпределяемыйТип.НастройкиДействий - ссылка на настройку.
//
Процедура УдалитьНастройкуДействияПравилаОбработки(ПравилоОбработки, ВидДействия, Настройка) Экспорт 
	
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		// Если настройки нет, то ее нужно удалить из правила
		РегистрыСведений.ПравилаОбработкиОбъектов.УдалитьНастройкуДействия(
			ПравилоОбработки, ВидДействия); 
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		НастройкаОбъект = Настройка.ПолучитьОбъект();
		НастройкаОбъект.УстановитьПометкуУдаления(Истина);
		РегистрыСведений.ПравилаОбработкиОбъектов.УдалитьНастройкуДействия(
			ПравилоОбработки, ВидДействия);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Участники по умолчанию.
// 
// Параметры:
//  ВидДействия - СправочникСсылка.ВидыДействий.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники, СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.РабочиеГруппы, Строка, СправочникСсылка.ПроектыКонтейнеры, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи, СправочникСсылка.ПодразделенияКонтейнеры.
//
Функция УчастникиПоУмолчанию(ВидДействия) Экспорт
	
	УчастникиПоУмолчанию = Новый Массив;
	
	ЭтапОбработкиПредмета =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДействия, "ЭтапОбработкиПредмета");
	Если Не ЗначениеЗаполнено(ЭтапОбработкиПредмета) Тогда
		Возврат УчастникиПоУмолчанию;
	КонецЕсли;
	
	Если ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ЗапроситьМатериалы Тогда
		
		УчастникиПоУмолчанию.Добавить(
			Справочники.АвтоподстановкиДляОбъектов.ОтветственныеЗаПрограммуМероприятия);
		
	ИначеЕсли ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ИсполнитьПротокол Тогда
		
		УчастникиПоУмолчанию.Добавить(
			Справочники.АвтоподстановкиДляОбъектов.ИсполнителиПротоколаМероприятияДляКоторыхТребуетсяИсполнение);
		
	ИначеЕсли ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ОзнакомитьСМатериалами Тогда
		
		УчастникиПоУмолчанию.Добавить(
			Справочники.АвтоподстановкиДляОбъектов.УчастникиМероприятия);
		
	ИначеЕсли ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПодготовитьПротокол Тогда
		
		УчастникиПоУмолчанию.Добавить(
			Справочники.АвтоподстановкиДляОбъектов.СекретарьМероприятия);
		
	ИначеЕсли ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПровестиМероприятие Тогда
		
		УчастникиПоУмолчанию.Добавить(
			Справочники.АвтоподстановкиДляОбъектов.ПредседательМероприятия);
		
	ИначеЕсли ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.СогласоватьПротокол Тогда
		
		УчастникиПоУмолчанию.Добавить(
			Справочники.АвтоподстановкиДляОбъектов.УчастникиМероприятия);
		
	ИначеЕсли ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПрограмму Тогда
		
		УчастникиПоУмолчанию.Добавить(
			Справочники.АвтоподстановкиДляОбъектов.ПредседательМероприятия);
		
	ИначеЕсли ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПротокол Тогда
		
		УчастникиПоУмолчанию.Добавить(
			Справочники.АвтоподстановкиДляОбъектов.ПредседательМероприятия);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный этап обработки предмета %1 (%2).'"),
			ЭтапОбработкиПредмета,
			ТипЗнч(ЭтапОбработкиПредмета));
		
	КонецЕсли;
	
	Возврат УчастникиПоУмолчанию;
	
КонецФункции

// Признак "по пунктам" по умолчанию.
// 
// Параметры:
//  ВидДействия - СправочникСсылка.ВидыДействий.
// 
// Возвращаемое значение:
//  Булево - признак "по пунктам" по умолчанию.
//
Функция ПоПунктамПоУмолчанию(ВидДействия) Экспорт
	
	ПоПунктамПоУмолчанию = Ложь;
	
	ЭтапОбработкиПредмета =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДействия, "ЭтапОбработкиПредмета");
	Если Не ЗначениеЗаполнено(ЭтапОбработкиПредмета) Тогда
		Возврат ПоПунктамПоУмолчанию;
	КонецЕсли;
	
	Если ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ИсполнитьПротокол Тогда
		
		ПоПунктамПоУмолчанию = Истина;
		
	КонецЕсли;
	
	Возврат ПоПунктамПоУмолчанию;
	
КонецФункции

#Область УсловноеОформление

// Настраивает условное оформление этапа.
//
Процедура НастроитьУсловноеОформлениеЭтапа(УсловноеОформление,
	Дерево = "Участники", ОформляемоеПоле = "ПредставлениеСтроки") Экспорт 
	
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление, НСтр("ru = 'Выделение этапов'"));
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".ЭтоЭтап");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
КонецПроцедуры

// Настраивает условное оформление только просмотра этапов.
//
Процедура НастроитьУсловноеОформлениеТолькоПросмотрЭтапов(УсловноеОформление,
	Дерево = "Участники", ОформляемоеПоле = "ПредставлениеСтроки") Экспорт 
	
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление, НСтр("ru = 'Только просмотр этапов'"));
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".ЭтоЭтап");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЭлементЦветаОформления.Значение = Истина;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
КонецПроцедуры

// Настраивает условное оформление пустого участника.
//
Процедура НастроитьУсловноеОформлениеПустогоУчастника(УсловноеОформление, 
	Дерево = "Участники", ОформляемоеПоле = "ПредставлениеСтроки", ДопУсловия = Неопределено) Экспорт 
	
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление, НСтр("ru = 'Выделение пустого участника'"));
		
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".Участник");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".ЭтоЭтап");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	Если ДопУсловия <> Неопределено Тогда
		Для Каждого ДопУсловие Из ДопУсловия Цикл
			ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементОтбораДанных, ДопУсловие);
		КонецЦикла;
	КонецЕсли;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	ЭлементЦветаОформления.Значение = НСтр("ru = '<Не указан>'");
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
КонецПроцедуры

// Настраивает условное оформления ответственного участника.
//
Процедура НастроитьУсловноеОформлениеОтветственногоУчастника(УсловноеОформление,
	Дерево = "Участники", ОформляемоеПоле = "ПредставлениеСтроки") Экспорт 
	
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление, НСтр("ru = 'Выделение ответственных'"));
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".Ответственный");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
КонецПроцедуры

// Настраивает условное оформление пустого условия.
//
Процедура НастроитьУсловноеОформлениеПустогоУсловия(УсловноеОформление,
	Дерево = "Участники", ОформляемоеПоле = "УсловиеПредставление") Экспорт 
	
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление, НСтр("ru = 'Выделение пустого условия'"));
		
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".Условие");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".ЭтоЭтап");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ЦветТекстаВспомогательныхДанныхДействий.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	ЭлементЦветаОформления.Значение = НСтр("ru = '<Не установлено>'");
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
КонецПроцедуры

// Устанавливает условное оформление комментария заполнения участника.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление формы.
//  ПолеДляОтбора - Строка - поле отбора, например, для карточки шаблона процесса "Объект.Исполнители.Исполнитель".
//  ПолеДляОформления - Строка - оформляемое поле, например, для карточки шаблона процесса "Исполнитель".
//
Процедура НастроитьУсловноеОформлениеКомментарияЗаполненияУчастника(
	УсловноеОформление, ПолеДляОтбора, ПолеДляОформления) Экспорт 
	
	ПредставлениеЭлемента = СтрШаблон(
		НСтр("ru = 'Комментарий заполнения участника в поле: %1'"),
		ПолеДляОтбора);
	
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеДляОтбора);
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ЭлементОтбораДанных.ПравоеЗначение = "[";
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ОшибочныеДанные;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ПолеДляОформления);
	
КонецПроцедуры

// Настраивает условное оформление действий.
//
Процедура НастроитьУсловноеОформлениеДействий(УсловноеОформление,
	Дерево = "Действия", ОформляемоеПоле = "ДействияПредставление") Экспорт 
	
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление, НСтр("ru = 'Выделение этапов'"));
		
	// жирным имя действия	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".ЭтоДействие");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет, есть ли заполнение участников по умолчанию.
// 
// Параметры:
//  ЭтапОбработкиПредмета - ПеречислениеСсылка.ЭтапыОбработкиПредметов.
// 
// Возвращаемое значение:
//  Булево - Есть заполнение участников по умолчанию.
//  
Функция ЕстьЗаполнениеУчастниковПоУмолчанию(ЭтапОбработкиПредмета) Экспорт
	
	ЕстьЗаполнениеУчастниковПоУмолчанию = ЗначениеЗаполнено(ЭтапОбработкиПредмета);
	
	Возврат ЕстьЗаполнениеУчастниковПоУмолчанию;
	
КонецФункции

#КонецОбласти