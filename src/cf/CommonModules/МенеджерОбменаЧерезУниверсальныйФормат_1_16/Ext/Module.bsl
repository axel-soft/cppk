////////////////////////////////////////////////////////////////////////////////
// Менеджер обмена через универсальный формат (Документооборот, редакция КОРП 3.0, ED 1.16 от 19.12.2024 20:10:11)
//
////////////////////////////////////////////////////////////////////////////////
#Область СлужебныйПрограммныйИнтерфейс
#Область ПроцедурыКонвертации
// Процедура, выполняемая перед началом конвертации данных.
//
// Параметры:
//  КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
	ДопРеквизитыИСведения = Новый ТаблицаЗначений;
	ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
	ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
	ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
	ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
	КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
КонецПроцедуры

// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение"
			И КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу Тогда
		ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры

// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
КонецПроцедуры

// Процедура, выполняемая при получении удаления объекта.
//
// Параметры:
//   КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//   УдаляемыйОбъект - Удаляемый объект данных
//   Отказ - Булево
//
Процедура ПередОбработкойУдаляемогоОбъекта(КомпонентыОбмена, УдаляемыйОбъект, Отказ) Экспорт
КонецПроцедуры

#КонецОбласти
// Возвращает версию формата менеджера обмена.
//
// Возвращаемое значение:
//  Строка - номер версии.
//
Функция ВерсияФорматаМенеджераОбмена() Экспорт
	Возврат "2";
КонецФункции

// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена      - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - см. ОбменДаннымиXDTOСервер.ТаблицаПравилОбработкиДанных
// 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Должности_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДвиженияДенежныхСредств_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтруктураПредприятия_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Должности_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДСГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтруктураПредприятия_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена  - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила.
// 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Должности_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДвиженияДенежныхСредств_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДДСГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтруктураПредприятия_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Должности_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДвиженияДенежныхСредств_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДДСГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтруктураПредприятия_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КлассификаторБанков(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СотрудникиИзПользователя(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
КонецПроцедуры
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// Перечисление_ЮрФизЛицо_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮрФизЛицо_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ФизЛицо, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицо, "ЮридическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, "ЮридическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
		// Справочник_ВидыКонтактнойИнформации_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Справочник_ВидыКонтактнойИнформации_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailАдресата, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailРоли, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailСотрудника, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.SkypeСотрудника, "Skype");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДомашнийТелефонФизическогоЛица, "ТелефонДомашний");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресАдресата, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.РабочийТелефонАдресата, "ТелефонРабочий");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СайтКонтрагента, "ВебСтраница");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СправочникЛичныеАдресаты, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СправочникОрганизации, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СправочникПользователи, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СправочникРолиИсполнителей, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СправочникСотрудники, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.УдалитьДругаяИнформацияОрганизации, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксАдресата, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактическийАдресКонтрагента, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// Перечисление_ЮрФизЛицо_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮрФизЛицо_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
		// Справочник_ВидыКонтактнойИнформации_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Справочник_ВидыКонтактнойИнформации_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "ВидыКИ";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("АдресЭлектроннойПочты", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
		ЗначенияДляПолучения.Вставить("Skype", Справочники.ВидыКонтактнойИнформации.SkypeСотрудника);
		ЗначенияДляПолучения.Вставить("ТелефонДомашний", Справочники.ВидыКонтактнойИнформации.ДомашнийТелефонФизическогоЛица);
		ЗначенияДляПолучения.Вставить("ПочтовыйАдрес", Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
		ЗначенияДляПолучения.Вставить("ТелефонРабочий", Справочники.ВидыКонтактнойИнформации.РабочийТелефонАдресата);
		ЗначенияДляПолучения.Вставить("ВебСтраница", Справочники.ВидыКонтактнойИнформации.СайтКонтрагента);
		ЗначенияДляПолучения.Вставить("Телефон", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		ЗначенияДляПолучения.Вставить("Факс", Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента);
		ЗначенияДляПолучения.Вставить("ФактическийАдрес", Справочники.ВидыКонтактнойИнформации.ФактическийАдресКонтрагента);
		ЗначенияДляПолучения.Вставить("ЮридическийАдрес", Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;
	// Перечисление_ПолФизическогоЛица.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO   = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры
#КонецОбласти

#Область ПараметрыКонвертации
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации:
//                         Ключ - имя параметра, значение - значение параметра, по умолчанию - Неопределено.
//
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ТЗДопСведенияБулево");
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
КонецПроцедуры

#КонецОбласти
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура:
//    * ОбъектОбработки - Произвольный
//    * ИспользованиеПКО - Структура
//    * КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//    * ДанныеИБ - СправочникОбъект
//               - ДокументОбъект
//               - и т.п.
//    * ПолученныеДанные - СправочникОбъект
//                       - ДокументОбъект
//                       - и т.п.
//    * КонвертацияСвойств - ТаблицаЗначений
//    * ДанныеXDTO - см. ОбменДаннымиXDTOСервер.ДанныеXDTOИзДанныхИБ
//    * СтекВыгрузки - Массив из Произвольный
//
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиДвиженияДенежныхСредств_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиДвиженияДенежныхСредств_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КлассификаторБанков_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КлассификаторБанков_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КлассификаторБанков_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КлассификаторБанков_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтраныМира_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтраныМира_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Должности_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Должности_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Должности_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Должности_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Должности_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Должности_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СотрудникиИзПользователя_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СотрудникиИзПользователя_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СотрудникиИзПользователя_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СотрудникиИзПользователя_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СотрудникиИзПользователя_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СотрудникиИзПользователя_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтруктураПредприятия_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтруктураПредприятия_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтруктураПредприятия_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтруктураПредприятия_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтруктураПредприятия_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтруктураПредприятия_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДвиженияДенежныхСредств_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиДвиженияДенежныхСредств_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "Организации_ПослеЗаписи" Тогда 
		Организации_ПослеЗаписи(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "Пользователи_ПослеЗаписи" Тогда 
		Пользователи_ПослеЗаписи(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "СтруктураПредприятия_ПослеЗаписи" Тогда 
		СтруктураПредприятия_ПослеЗаписи(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
#Область СлужебныеПроцедурыИФункции
Функция Подключаемый_ИдентификаторМодуля() Экспорт
	Возврат "d30e06aa-8270-4e88-8283-e9f526245ae9";
КонецФункции
#Область ПОД
#Область Справочная_информация_Базовые_классификаторы
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторБанков;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторБанков");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторБанков");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторЕдиницИзмерения_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЕдиницыИзмерения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторЕдиницИзмерения_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Контрагенты
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа_Получение");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Номенклатура
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатураГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа_Получение");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Прочая_справочная_информация
Процедура ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ДополнительныеРеквизиты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты");
КонецПроцедуры

Процедура ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЗначенияДопРеквизитов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДополнительныхРеквизитов");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДокументыФизическихЛиц";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Должности_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Должности_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Должности;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Должности_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Должности_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Должности_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Должности";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Должности_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Получение");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Структура_предприятия
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтруктураПредприятия_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтруктураПредприятия_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтруктураПредприятия_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтруктураПредприятия_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтруктураПредприятия_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Подразделения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтруктураПредприятия_Получение");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Финансовая_аналитика
Процедура ДобавитьПОД_Справочник_СтатьиДвиженияДенежныхСредств_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДвиженияДенежныхСредств_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтатьиДвиженияДенежныхСредств_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДвиженияДенежныхСредств_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДвиженияДенежныхСредств_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиДДСГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДСГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДСГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа_Получение");
КонецПроцедуры


#КонецОбласти

#КонецОбласти
#Область ПКО
#Область Справочная_информация_Базовые_классификаторы
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЗагружаетсяИзИнтернета", "ЗагружаетсяИзИнтернета");
	ДобавитьПКС(СвойстваШапки, "Код",                    "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Наценка",                "Наценка");
	ДобавитьПКС(СвойстваШапки, "ОсновнаяВалюта",         "ОсновнаяВалюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописи",       "ПараметрыПрописи");
	ДобавитьПКС(СвойстваШапки, "СпособУстановкиКурса",   "", 1);
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КлассификаторБанков(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторБанков";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_КлассификаторБанков_ПриОтправкеДанных";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КлассификаторБанков_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "",             "ИностранныйБанк", 1);
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК");
	ДобавитьПКС(СвойстваШапки, "КоррСчет",     "КоррСчет");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "", 1);
	ДобавитьПКС(СвойстваШапки, "СВИФТБИК",     "СВИФТБИК");
	ДобавитьПКС(СвойстваШапки, "Страна",       "Страна", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,КоррСчет,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("СВИФТБИК,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КлассификаторЕдиницИзмерения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторЕдиницИзмерения_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтраныМира_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                       "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",                 "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "КодАльфа3",                 "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "МеждународноеНаименование", "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "УчастникЕАЭС",              "", 1);
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Контрагенты
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                    "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",              "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КПП",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет", "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",          "Ответственный", , "Справочник_СотрудникиИзПользователя");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",   "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "Родитель",               "Группа", , "Справочник_КонтрагентыГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",                "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",              "ЮридическоеФизическоеЛицо", , "Перечисление_ЮрФизЛицо_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                    "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",              "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КПП",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет", "ОсновнойБанковскийСчет", 1, "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",          "Ответственный", , "Справочник_СотрудникиИзПользователя");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",   "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "Родитель",               "Группа", , "Справочник_КонтрагентыГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",                "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",              "ЮридическоеФизическоеЛицо", , "Перечисление_ЮрФизЛицо_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КонтрагентыГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.КонтрагентыГруппа";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентыГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентыГруппа_Получение");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Номенклатура
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",          "Артикул");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения", "ЕдиницаИзмерения", 1, "Справочник_КлассификаторЕдиницИзмерения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Код",              "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Родитель",         "Группа", , "Справочник_НоменклатураГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                 "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ТипНоменклатуры", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",          "Артикул");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения", "ЕдиницаИзмерения", , "Справочник_КлассификаторЕдиницИзмерения_Получение");
	ДобавитьПКС(СвойстваШапки, "Код",              "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",         "Группа", , "Справочник_НоменклатураГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,Родитель,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураГруппа_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатураГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НоменклатураГруппа";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураГруппа_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа_Получение");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Прочая_справочная_информация
Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "ВидДокументаИзКлассификатора", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидДокумента", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВыдачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КемВыдан", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодПодразделения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Период", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Представление", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокДействия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЯвляетсяУдостоверяющимЛичность", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Получение");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВидДокумента,Физлицо");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Должности_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Должности_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Должности;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Должности";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Должности_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование", "НаименованиеКраткое");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Должности_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Должности_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Должности;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Должности";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Должности_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Должности_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецДополнительныхЗначений",     "ВладелецДополнительныхЗначений", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияИспользуются", "ДополнительныеЗначенияИспользуются");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияСВесом",       "ДополнительныеЗначенияСВесом");
	ДобавитьПКС(СвойстваШапки, "Заголовок",                          "Заголовок");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыВыбораЗначения",       "ЗаголовокФормыВыбораЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыЗначения",             "ЗаголовокФормыЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаполнятьОбязательно",               "ЗаполнятьОбязательно");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МногострочноеПолеВвода",             "МногострочноеПолеВвода");
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Подсказка",                          "Подсказка");
	ДобавитьПКС(СвойстваШапки, "ФорматСвойства",                     "ФорматСвойства");
	ДобавитьПКС(СвойстваШапки, "ЭтоДополнительноеСведение",          "ЭтоДополнительноеСведение");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вес",          "Вес");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Пользователи_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "Пользователи_ПослеЗаписи";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",                   "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеВДокументах",       "", 1);
	ДобавитьПКС(СвойстваШапки, "ПредставлениеВПереписке",        "", 1);
	ДобавитьПКС(СвойстваШапки, "ПредставлениеВПерепискеСРангом", "", 1);
	ДобавитьПКС(СвойстваШапки, "",                               "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",                        "", 1, "Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ФизЛицо");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФизЛицо");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СотрудникиИзПользователя(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СотрудникиИзПользователя";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Сотрудники;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СотрудникиИзПользователя_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СотрудникиИзПользователя_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СотрудникиИзПользователя_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "", 1, "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "",             "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",      "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "",                  "Имя", 1);
	ДобавитьПКС(СвойстваШапки, "ИНН",               "ИНН");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "УточнениеНаименования");
	ДобавитьПКС(СвойстваШапки, "",                  "Отчество", 1);
	ДобавитьПКС(СвойстваШапки, "Пол",               "Пол", , "Перечисление_ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",          "Группа", , "Справочник_ФизическиеЛицаГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтраховойНомерПФР", "СтраховойНомерПФР");
	ДобавитьПКС(СвойстваШапки, "",                  "Фамилия", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "ФИО", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДанныеФИО");
	ДобавитьПКС(СвойстваТЧ, "", "Имя", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Отчество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Фамилия", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",      "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",               "ИНН");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",               "Пол", , "Перечисление_ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",          "Группа", , "Справочник_ФизическиеЛицаГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "СтраховойНомерПФР", "СтраховойНомерПФР");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,Наименование,Пол,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Пол,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛицаГруппа";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа_Получение");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Структура_предприятия
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_КлассификаторБанков");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_КлассификаторБанков");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидСчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Владелец", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "ДатаЗакрытия");
	ДобавитьПКС(СвойстваШапки, "ДатаОткрытия",          "ДатаОткрытия");
	ДобавитьПКС(СвойстваШапки, "МесяцПрописью",         "ВыводитьМесяцПрописью");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерИДатаРазрешения",  "НомерИДатаРазрешения");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "СуммаБезКопеек",        "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчета_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_КлассификаторБанков");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_КлассификаторБанков");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидСчета",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "ДатаЗакрытия");
	ДобавитьПКС(СвойстваШапки, "ДатаОткрытия",          "ДатаОткрытия");
	ДобавитьПКС(СвойстваШапки, "МесяцПрописью",         "ВыводитьМесяцПрописью");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерИДатаРазрешения",  "НомерИДатаРазрешения");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "СуммаБезКопеек",        "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,НомерСчета");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                    "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",              "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КПП",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                   "ОГРН");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет", "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Префикс",                "Префикс");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",              "ЮридическоеФизическоеЛицо", , "Перечисление_ЮрФизЛицо_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "Организации_ПослеЗаписи";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                    "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",              "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КПП",                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                   "ОГРН");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет", "ОсновнойБанковскийСчет", 1, "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Префикс",                "Префикс");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктураПредприятия_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтруктураПредприятия_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтруктураПредприятия_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_СтруктураПредприятия_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктураПредприятия_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтруктураПредприятия_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтруктураПредприятия_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтруктураПредприятия_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "СтруктураПредприятия_ПослеЗаписи";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Ранг",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_СтруктураПредприятия_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Финансовая_аналитика
Процедура ДобавитьПКО_Справочник_СтатьиДвиженияДенежныхСредств_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиДвиженияДенежныхСредств_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиДДС";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Описание",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДСГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиДвиженияДенежныхСредств_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДвиженияДенежныхСредств_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиДвиженияДенежныхСредств_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Описание",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДСГруппа_Получение");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиДДСГруппа_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиДДСГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиДДСГруппа";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДСГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиДДСГруппа_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДСГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДСГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДСГруппа_Получение");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры


#КонецОбласти

#КонецОбласти


Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата, ПространствоИмен = "")
	
	Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
		ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
	КонецЕсли;
	
	КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
	КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
	КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
	КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
	КонвертацияТабличнойЧасти.ПространствоИмен = ПространствоИмен;
	Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
		ПравилоКонвертацииСвойства = "", ПространствоИмен = "")
	
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
	НоваяСтрока.ПространствоИмен                = ПространствоИмен;
КонецПроцедуры

#Область ОбработчикиКонвертации
#Область Справочная_информация_Базовые_классификаторы
Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ<>Неопределено И ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_КлассификаторБанков = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры
Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
		ДанныеИБ,
		ПолученныеДанные,
		"Справочник.Валюты");
	
	Если ДанныеИБ <> Неопределено Тогда
		// Если валюта уже существует в базе,
		// то не перезаписываем ее данные.
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_КлассификаторБанков_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ИностранныйБанк", ДанныеИБ.Страна <> Справочники.СтраныМира.Россия);
КонецПроцедуры
Процедура ПКО_Справочник_КлассификаторБанков_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
		ДанныеИБ,
		ПолученныеДанные,
		"Справочник.КлассификаторБанков");
	
	Если ДанныеИБ <> Неопределено Тогда
		ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если Не ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
		
		Макет = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
		Классификатор = Новый ТабличныйДокумент;
		Классификатор.Вывести(Макет);
		НайденнаяОбласть = Классификатор.НайтиТекст(
			ДанныеИБ.Наименование,,
			Классификатор.Области.НаименованиеКраткое,,,,
			Истина);
		
		Если НайденнаяОбласть = Неопределено Тогда
			Код = Лев(ДанныеИБ.Наименование, 4);
		Иначе
			Код = Классификатор.Область(НайденнаяОбласть.Верх, 2, НайденнаяОбласть.Верх, 2).Текст;
		КонецЕсли;
		
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Код", Код);
		Иначе
			ДанныеXDTO.Вставить("Код", Код);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СтраныМира_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено И ЗначениеЗаполнено(ПолученныеДанные.Код) Тогда
		
		ДанныеСтраны = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(ПолученныеДанные.Код);
		Если ДанныеСтраны <> Неопределено Тогда
			ПолученныеДанные.УчастникЕАЭС = ДанныеСтраны.УчастникЕАЭС;
			ПолученныеДанные.МеждународноеНаименование = ДанныеСтраны.МеждународноеНаименование;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Контрагенты
Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПоляПоискаКонтрагента(КомпонентыОбмена, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(
		ПолученныеДанные,
		ДанныеXDTO,
		КомпонентыОбмена,
		Истина);
	ЗагрузитьКонтактнуюИнформацию(
		ДанныеXDTO,
		ПолученныеДанные,
		Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено,
			ПолученныеДанные.ПолучитьСсылкуНового(),
			ДанныеИБ.Ссылка),
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена);
	
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
		ДанныеИБ,
		ПолученныеДанные,
		"Справочник.Контрагенты");
	
	// Определим основной банковский счет.
	ОбновитьОсновнойБанковскийСчет(ПолученныеДанные, ДанныеИБ);
	
	// Обработка физ. лица контрагента.
	ОбновитьФизЛицоКонтрагента(ПолученныеДанные, ДанныеИБ);
	
	// Обновление адресной книги.
	ПолученныеДанные.ДополнительныеСвойства.Вставить(
		"ПараметрыОбновленияАдреснойКниги",
		Справочники.Контрагенты.ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(ПолученныеДанные));
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Номенклатура
Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипНоменклатуры", "Товар");
	
	Если ДанныеИБ.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
		ДанныеXDTO.Вставить("СтавкаНДС", "БезНДС");
	ИначеЕсли ДанныеИБ.СтавкаНДС = Справочники.СтавкиНДС.НДС0 Тогда
		ДанныеXDTO.Вставить("СтавкаНДС", "НДС0");
	Иначе
		ЗначениеСтавкиНДС = УчетНДС.ЗначениеСтавкиНДС(ДанныеИБ.СтавкаНДС);
		Если ЗначениеСтавкиНДС = 10 Тогда
			ДанныеXDTO.Вставить("СтавкаНДС", "НДС10");
		ИначеЕсли ЗначениеСтавкиНДС = 18 Тогда
			ДанныеXDTO.Вставить("СтавкаНДС", "НДС18");
		ИначеЕсли ЗначениеСтавкиНДС = 20 Тогда
			ДанныеXDTO.Вставить("СтавкаНДС", "НДС20");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
		ДанныеКлассификатора = Новый Структура("Код, Наименование", "796", "шт");
		ЕдиницаИзмерения = Новый Структура("ДанныеКлассификатора", ДанныеКлассификатора);
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// СтавкаНДС
	Если ДанныеXDTO.СтавкаНДС.Значение = "БезНДС" Тогда
		ПолученныеДанные.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	ИначеЕсли ДанныеXDTO.СтавкаНДС.Значение = "НДС0" Тогда
		ПолученныеДанные.СтавкаНДС = Справочники.СтавкиНДС.НДС0;
	Иначе
		Если ДанныеXDTO.СтавкаНДС.Значение = "НДС10" Тогда
			ПолученныеДанные.СтавкаНДС = УчетНДС.СтавкаНДСИзЧисла(10);
		ИначеЕсли ДанныеXDTO.СтавкаНДС.Значение = "НДС18" Тогда
			ПолученныеДанные.СтавкаНДС = УчетНДС.СтавкаНДСИзЧисла(18);
		ИначеЕсли ДанныеXDTO.СтавкаНДС.Значение = "НДС20" Тогда
			ПолученныеДанные.СтавкаНДС = УчетНДС.СтавкаНДСИзЧисла(20);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(
		ПолученныеДанные,
		ДанныеXDTO,
		КомпонентыОбмена,
		Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
		ДанныеИБ,
		ПолученныеДанные,
		"Справочник.Номенклатура");
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено,
			ПолученныеДанные.ПолучитьСсылкуНового(),
			ДанныеИБ.Ссылка),
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена);
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Прочая_справочная_информация
Процедура ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ДокументыФизическихЛиц_Отправка = Ложь;
	Если ОтборРегистраСведенийЗаполненКорректно(ДанныеИБ.Отбор, "Физлицо,ВидДокумента") Тогда
		ИспользованиеПКО.Справочник_ДокументыФизическихЛиц_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
Процедура ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВидДокументаИзКлассификатора = "";
	
	Если ДанныеИБ.Предопределенный И ЗначениеЗаполнено(ДанныеИБ.ИмяПредопределенныхДанных) Тогда
		ВидДокументаИзКлассификатора = ДанныеИБ.ИмяПредопределенныхДанных;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДокументаИзКлассификатора", ВидДокументаИзКлассификатора);
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидДокументаОтбор", ДанныеИБ.Отбор.ВидДокумента.Значение);
	ДанныеXDTO.Вставить("ПериодОтбор", ДанныеИБ.Отбор.Период.Значение);
	ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
	
	Записи = Новый ТаблицаЗначений;
	Записи.Колонки.Добавить("ФизическоеЛицо");
	Записи.Колонки.Добавить("ВидДокумента");
	Записи.Колонки.Добавить("Период");
	Записи.Колонки.Добавить("Серия");
	Записи.Колонки.Добавить("Номер");
	Записи.Колонки.Добавить("ДатаВыдачи");
	Записи.Колонки.Добавить("КемВыдан");
	Записи.Колонки.Добавить("КодПодразделения");
	Записи.Колонки.Добавить("СрокДействия");
	Записи.Колонки.Добавить("Представление");
	Записи.Колонки.Добавить("ЯвляетсяУдостоверяющимЛичность");
	
	Для Каждого СтрокаНабора Из ДанныеИБ Цикл
		СтрокаЗаписи = Записи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаНабора);
		СтрокаЗаписи.ФизическоеЛицо = СтрокаНабора.Физлицо;
		СтрокаЗаписи.ЯвляетсяУдостоверяющимЛичность = СтрокаНабора.ЯвляетсяДокументомУдостоверяющимЛичность;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", Записи);
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидДокументаОтбор",
		ДанныеXDTO.ВидДокументаОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ПериодОтбор",
		ДанныеXDTO.ПериодОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицоОтбор",
		ДанныеXDTO.ФизическоеЛицоОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи",
		Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи") И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПКО_ФизЛица = ОбменДаннымиXDTOСервер.ПКОПоИмени(
		КомпонентыОбмена, "Справочник_ФизическиеЛица_Получение");
	ПКО_ВидовДокументов = ОбменДаннымиXDTOСервер.ПКОПоИмени(
		КомпонентыОбмена, "Справочник_ВидыДокументовФизическихЛиц");
	
	ФизЛицоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
		КомпонентыОбмена,
		ПолученныеДанные.ДополнительныеСвойства.ФизическоеЛицоОтбор,
		ПКО_ФизЛица,
		"ПолучитьСсылку").Ссылка;
	
	ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
		КомпонентыОбмена,
		ПолученныеДанные.ДополнительныеСвойства.ВидДокументаОтбор,
		ПКО_ВидовДокументов,
		"ПолучитьСсылку").Ссылка;
	
	ПолученныеДанные.Отбор.Физлицо.Значение = ФизЛицоСсылка;
	ПолученныеДанные.Отбор.Физлицо.Использование = Истина;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ПолученныеДанные.Отбор.ВидДокумента.Значение = ВидДокумента;
		ПолученныеДанные.Отбор.ВидДокумента.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор) Тогда
		ПолученныеДанные.Отбор.Период.Значение = ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор;
		ПолученныеДанные.Отбор.Период.Использование = Истина;
	КонецЕсли;
	
	// Добавление записей в набор записей.
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Физлицо = ФизЛицоСсылка;
			СтрокаЗаписи.ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				Строка.ВидДокумента,
				ПКО_ВидовДокументов,
				"ПолучитьСсылку").Ссылка;
			СтрокаЗаписи.Период = Строка.Период;
			СтрокаЗаписи.Серия = Строка.Серия;
			СтрокаЗаписи.Номер = Строка.Номер;
			СтрокаЗаписи.Представление = Строка.Представление;
			СтрокаЗаписи.ДатаВыдачи = Строка.ДатаВыдачи;
			СтрокаЗаписи.СрокДействия = Строка.СрокДействия;
			СтрокаЗаписи.КемВыдан = Строка.КемВыдан;
			СтрокаЗаписи.КодПодразделения = Строка.КодПодразделения;
			СтрокаЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Строка.ЯвляетсяУдостоверяющимЛичность;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Должности_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(
		КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Должности_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(
		ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Должности_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено,
			ПолученныеДанные.ПолучитьСсылкуНового(),
			ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена);
	
	// В случае наличия объекта в базе он и будет записан (а не ПолученныеДанные).
	// Шапка (в составе свойств из ПКС) предварительно переносится из
	// ПолученныеДанные в ДанныеИБ.
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим те свойства, которые указаны в ПКС.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Пользователи_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("ФизическоеЛицо",
			Новый Структура("Значение, ИмяПКО",
				ДанныеИБ.ФизЛицо, "Справочник_ФизическиеЛица_Отправка"));
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФизическоеЛицо",
		Новый Структура("Значение, ИмяПКО",
			ДанныеИБ.ФизЛицо, "Справочник_ФизическиеЛица_Отправка"));
	
	ВыгрузитьДополнительныеРеквизитыИСведения(
		КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ФизЛицо = Неопределено;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ФизическоеЛицо") Тогда
		ФизЛицо = ДанныеXDTO.КлючевыеСвойства.ФизическоеЛицо;
	ИначеЕсли ДанныеXDTO.Свойство("ФизическоеЛицо") Тогда
		ФизЛицо = ДанныеXDTO.ФизическоеЛицо;
	КонецЕсли;
	
	Если ФизЛицо <> Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизЛицо",
			Новый Структура("Значение, ИмяПКО",
			ФизЛицо, "Справочник_ФизическиеЛица_Получение"));
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(
		ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
		ДанныеИБ,
		ПолученныеДанные,
		"Справочник.Пользователи");
	
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено,
			ПолученныеДанные.ПолучитьСсылкуНового(),
			ДанныеИБ.Ссылка),
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена);
	
	ПредставлениеВДокументах = "";
	
	Если ДанныеИБ = Неопределено
			Или Не ЗначениеЗаполнено(ДанныеИБ.ПредставлениеВДокументах) Тогда
		
		// Вычислим представление в документах
		ФИОПользователя = ПолученныеДанные.Наименование;
		Если (Найти(ФИОПользователя, ".") > 0) Тогда
			ПозицияПробела = Найти(ФИОПользователя," ");
			Фамилия = Сред(ФИОПользователя, 1, ПозицияПробела);
			ФИОПользователя = СтрЗаменить(ФИОПользователя, Фамилия, "");
			ПозицияПробела = Найти(ФИОПользователя, " ");
			Инициалы = Сред(ФИОПользователя, 1, ПозицияПробела);
			
			ПолученныеДанные.ПредставлениеВДокументах = СтрЗаменить(Инициалы + " " + Фамилия+" ", "  ", " ");
	
		ИначеЕсли СтрЧислоВхождений(СокрЛП(ФИОПользователя), " ") = 2 Тогда
			ПозицияПробела = Найти(ФИОПользователя, " ");
			Фамилия = Сред(ФИОПользователя, 1, ПозицияПробела);
			ФИОПользователя = СтрЗаменить(ФИОПользователя, Фамилия, "");
			ПозицияПробела = Найти(ФИОПользователя, " ");
			Имя = Сред(ФИОПользователя, 1, ПозицияПробела);
			ФИОПользователя = СтрЗаменить(ФИОПользователя, Имя, "");
			
			ПолученныеДанные.ПредставлениеВДокументах = СтрЗаменить(Лев(Имя, 1) + "." + Лев(ФИОПользователя, 1) + ". " + Фамилия + " ", "  ", " ");
	
		Иначе
			ПолученныеДанные.ПредставлениеВДокументах = ФИОПользователя;
	
		КонецЕсли;
		
		ПредставлениеВДокументах = ПолученныеДанные.ПредставлениеВДокументах;
		
	Иначе
	
		ПредставлениеВДокументах = ДанныеИБ.ПредставлениеВДокументах;
			
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено
			Или Не ЗначениеЗаполнено(ДанныеИБ.ПредставлениеВПереписке) Тогда
		
		// Вычислим представление в переписке
		ПолученныеДанные.ПредставлениеВПереписке = 
			?(ЗначениеЗаполнено(ПредставлениеВДокументах),
				ПредставлениеВДокументах,
				ПолученныеДанные.Наименование);
		ПолученныеДанные.ПредставлениеВПерепискеСРангом = ПолученныеДанные.ПредставлениеВПереписке;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СотрудникиИзПользователя_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗапросПользователь = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.ФизЛицо КАК ФизЛицо,
		|	Пользователи.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО СотрудникиПользователей.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	СотрудникиПользователей.Сотрудник = &Сотрудник");
	ЗапросПользователь.УстановитьПараметр("Сотрудник", ДанныеИБ);
	Выборка = ЗапросПользователь.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеXDTO.Ссылка = Выборка.Пользователь;
		ФизЛицо = Выборка.ФизЛицо;
		Наименование = Выборка.Наименование;
	Иначе
		ФизЛицо = ДанныеИБ.Владелец;
		Наименование = ДанныеИБ.Наименование;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("Наименование", Наименование);
		ДанныеXDTO.Вставить("ФизическоеЛицо",
			Новый Структура("Значение, ИмяПКО", ФизЛицо, "Справочник_ФизическиеЛица_Отправка"));
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", Наименование);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФизическоеЛицо",
		Новый Структура("Значение, ИмяПКО", ФизЛицо, "Справочник_ФизическиеЛица_Отправка"));
	
	ВыгрузитьДополнительныеРеквизитыИСведения(
		КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_СотрудникиИзПользователя_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Владелец = Неопределено;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ФизическоеЛицо") Тогда
		Владелец = ДанныеXDTO.КлючевыеСвойства.ФизическоеЛицо;
	ИначеЕсли ДанныеXDTO.Свойство("ФизическоеЛицо") Тогда
		Владелец = ДанныеXDTO.ФизическоеЛицо;
	КонецЕсли;
	
	Если Владелец <> Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец",
			Новый Структура("Значение, ИмяПКО",
			Владелец, "Справочник_ФизическиеЛица_Получение"));
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(
		ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_СотрудникиИзПользователя_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
		ДанныеИБ,
		ПолученныеДанные,
		"Справочник.Пользователи");
	
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено,
			ПолученныеДанные.ПолучитьСсылкуНового(),
			ДанныеИБ.Ссылка),
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО", ДанныеИБ.Наименование);
	
	ЧастиИмениФизЛица = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеИБ.Наименование);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Фамилия", ЧастиИмениФизЛица.Фамилия);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Имя", ЧастиИмениФизЛица.Имя);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Отчество", ЧастиИмениФизЛица.Отчество);
	
	// Выгрузка истории изменения ФИО.
	ДанныеФИО = Новый ТаблицаЗначений;
	ДанныеФИО.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	ДанныеФИО.Колонки.Добавить("Фамилия", Новый ОписаниеТипов("Строка"));
	ДанныеФИО.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ДанныеФИО.Колонки.Добавить("Отчество", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ФИОФизическихЛиц.Период КАК НачалоПериода,
		|	ФИОФизическихЛиц.ФИО КАК ФИО
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
		|ГДЕ
		|	ФИОФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо");
	Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Для Каждого СтрокаТаблицы Из РезультатЗапроса.Выгрузить() Цикл
			СтрокаДанныеФИО = ДанныеФИО.Добавить();
			СтрокаДанныеФИО.НачалоПериода = СтрокаТаблицы.НачалоПериода;
			ЗаполнитьЗначенияСвойств(СтрокаДанныеФИО, ФизическиеЛицаКлиентСервер.ЧастиИмени(СтрокаТаблицы.ФИО));
		КонецЦикла;
		
	Иначе
		
		СтрокаДанныеФИО = ДанныеФИО.Добавить();
		
		Если ЗначениеЗаполнено(ДанныеИБ.ДатаРождения) Тогда
			СтрокаДанныеФИО.НачалоПериода = ДанныеИБ.ДатаРождения;
		Иначе
			СтрокаДанныеФИО.НачалоПериода = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДанныеФИО, ЧастиИмениФизЛица);
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДанныеФИО", ДанныеФИО);
	
	ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКонтактнуюИнформацию(
		ДанныеXDTO,
		ПолученныеДанные,
		Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
	
	Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДанныеФИО", ДанныеXDTO.ДанныеФИО);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НеСоздаватьЗаписьОбИстории", Истина);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
		ДанныеИБ,
		ПолученныеДанные,
		"Справочник.ФизическиеЛица");
	
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗагрузитьПодробныеДанныеФИО(ПолученныеДанные, ФизЛицоСсылка);
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Структура_предприятия
Процедура ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_БанковскиеСчета_Отправка = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Владелец) И ДанныеИБ.Владелец.Наименование <> ""
			И (ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты")
				Или ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации")) Тогда
		ИспользованиеПКО.Справочник_БанковскиеСчета_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_БанковскиеСчета_Получение = Ложь;
	
	Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
	Если ЗначениеЗаполнено(Владелец)
			И (Найти(Владелец.ТипЗначения, "Организация") > 0 
				Или Найти(Владелец.ТипЗначения, "Контрагент") > 0) Тогда
		ИспользованиеПКО.Справочник_БанковскиеСчета_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Владелец
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВидСчета) Тогда
		ЗначениеXDTOВидСчета = "Иной";
		Если ВРег(ДанныеИБ.ВидСчета) = "РАСЧЕТНЫЙ" Тогда
			ЗначениеXDTOВидСчета = "Расчетный";
		ИначеЕсли ВРег(ДанныеИБ.ВидСчета) = "ДЕПОЗИТНЫЙ" Тогда
			ЗначениеXDTOВидСчета = "Депозитный";
		ИначеЕсли ВРег(ДанныеИБ.ВидСчета) = "ССУДНЫЙ" Тогда
			ЗначениеXDTOВидСчета = "Ссудный";
		КонецЕсли;
		ДанныеXDTO.Вставить("ВидСчета", ЗначениеXDTOВидСчета);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Владелец: выбираем ПКО в зависимости от типа владельца.
	ИмяПКОВладелец = "";
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;	
		Если Найти(Владелец.ТипЗначения, "Организация") > 0 Тогда
			ИмяПКОВладелец = "Справочник_Организации_Получение";
			
		ИначеЕсли Найти(Владелец.ТипЗначения, "Контрагент") > 0 Тогда
			ИмяПКОВладелец = "Справочник_Контрагенты_Получение";
			
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПКОВладелец <> "" Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"Владелец", Новый Структура("Значение, ИмяПКО", Владелец, ИмяПКОВладелец));
	КонецЕсли;
	
	ПолученныеДанные.ВидСчета = "Расчетный";
	Если ДанныеXDTO.Свойство("ВидСчета")
			И ЗначениеЗаполнено(ДанныеXDTO.ВидСчета) Тогда
		ПолученныеДанные.ВидСчета = ДанныеXDTO.ВидСчета.Значение;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ВалютаДенежныхСредств")
			И ЗначениеЗаполнено(ДанныеXDTO.ВалютаДенежныхСредств)
			И ДанныеXDTO.ВалютаДенежныхСредств.Свойство("Ссылка") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаДенежныхСредств",
			Новый Структура("Значение, ИмяПКО",
				ДанныеXDTO.ВалютаДенежныхСредств, "Справочник_Валюты"));
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		
		Если ДанныеИБ = Неопределено Или Не ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда
			НомерСчета = Прав(СокрЛП(ПолученныеДанные.НомерСчета), 4);
			Если ЗначениеЗаполнено(ПолученныеДанные.Банк) Тогда
				СтрокаНаименования = СтрШаблон(НСтр("ru = '%1 в %2 (%3).'"),
					НомерСчета,
					ПолученныеДанные.Банк,
					Строка(ПолученныеДанные.ВалютаДенежныхСредств)); 
			Иначе
				СтрокаНаименования = СтрШаблон("%1(%2)",
					НомерСчета,
					Строка(ПолученныеДанные.ВалютаДенежныхСредств));
			КонецЕсли;
			СтрокаНаименования = Лев(СтрокаНаименования, 150);
	
			ПолученныеДанные.Наименование = СтрокаНаименования;
		Иначе
			ПолученныеДанные.Наименование = ДанныеИБ.Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.Владелец) Тогда
		
		ОсновнойСчетВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПолученныеДанные.Владелец, "ОсновнойБанковскийСчет");
		
		Если Не ЗначениеЗаполнено(ОсновнойСчетВладельца) Тогда
			
			// Проверим, что владелец уже записан в ИБ, и что других счетов у него нет.
			Если ДанныеИБ = Неопределено Тогда
				СсылкаНаЭтотСчет = ПолученныеДанные.ПолучитьСсылкуНового();
			Иначе
				СсылкаНаЭтотСчет = ДанныеИБ.Ссылка;
			КонецЕсли;
			
			Если ТипЗнч(ПолученныеДанные.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
				Запрос = Новый Запрос(
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Контрагенты.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
					|		ПО Контрагенты.Ссылка = БанковскиеСчета.Владелец
					|			И (БанковскиеСчета.Ссылка <> &Ссылка)
					|			И (НЕ БанковскиеСчета.ПометкаУдаления)
					|ГДЕ
					|	Контрагенты.Ссылка = &Владелец
					|	И БанковскиеСчета.Ссылка ЕСТЬ NULL");
				
			ИначеЕсли ТипЗнч(ПолученныеДанные.Владелец) = Тип("СправочникСсылка.Организации") Тогда
				Запрос = Новый Запрос(
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Организации.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Организации КАК Организации
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
					|		ПО Организации.Ссылка = БанковскиеСчета.Владелец
					|			И (БанковскиеСчета.Ссылка <> &Ссылка)
					|			И (НЕ БанковскиеСчета.ПометкаУдаления)
					|ГДЕ
					|	Организации.Ссылка = &Владелец
					|	И БанковскиеСчета.Ссылка ЕСТЬ NULL");
				
			Иначе
				Возврат;
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Владелец", ПолученныеДанные.Владелец);
			Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭтотСчет);
			
			Если Не Запрос.Выполнить().Пустой() Тогда
				Владелец = ПолученныеДанные.Владелец.ПолучитьОбъект();
				Владелец.ОсновнойБанковскийСчет = СсылкаНаЭтотСчет;
				Владелец.ОбменДанными.Загрузка = Истина;
				Владелец.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено,
			ПолученныеДанные.ПолучитьСсылкуНового(),
			ДанныеИБ.Ссылка),
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// ЮрФизЛицо
	Если ДанныеXDTO.КлючевыеСвойства.ЮридическоеФизическоеЛицо.Значение = "ЮридическоеЛицо" Тогда
		ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Иначе
		ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(
		ПолученныеДанные,
		ДанныеXDTO,
		КомпонентыОбмена,
		Истина);
	ЗагрузитьКонтактнуюИнформацию(
		ДанныеXDTO,
		ПолученныеДанные,
		Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено,
			ПолученныеДанные.ПолучитьСсылкуНового(),
			ДанныеИБ.Ссылка),
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена);
	
	ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
		ДанныеИБ,
		ПолученныеДанные,
		"Справочник.Организации");
	
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	// Обновление адресной книги
	ОбновитьДанныеОрганизацииВАдреснойКниге = Ложь;
	ОбновитьСловаПоискаПоОрганизацииВАдреснойКниге = Ложь;
	ОбновитьДанныеОтображенияОрганизацииВАдреснойКниге = Ложь;
	ОбновитьДоступностьВПоискеПоОрганизации = Ложь;
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОбновитьДанныеОрганизацииВАдреснойКниге = Истина;
		ОбновитьСловаПоискаПоОрганизацииВАдреснойКниге = Истина;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ОбновитьДанныеОрганизацииВАдреснойКниге",
			ОбновитьДанныеОрганизацииВАдреснойКниге);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ОбновитьСловаПоискаПоОрганизацииВАдреснойКниге",
			ОбновитьСловаПоискаПоОрганизацииВАдреснойКниге);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ОбновитьДанныеОтображенияОрганизацииВАдреснойКниге",
			ОбновитьДанныеОтображенияОрганизацииВАдреснойКниге);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ОбновитьДоступностьВПоискеПоОрганизации",
			ОбновитьДоступностьВПоискеПоОрганизации);
		
	Иначе
		
		РеквизитыРолиПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеИБ.Ссылка, "Наименование, ПометкаУдаления");
		
		Если РеквизитыРолиПоСсылке.ПометкаУдаления <> ПолученныеДанные.ПометкаУдаления Тогда
			ОбновитьДанныеОрганизацииВАдреснойКниге = Истина;
			ОбновитьДанныеОтображенияОрганизацииВАдреснойКниге = Истина;
			ОбновитьДоступностьВПоискеПоОрганизации = Истина;
		КонецЕсли;
		
		Если РеквизитыРолиПоСсылке.Наименование <> ПолученныеДанные.Наименование Тогда
			ОбновитьДанныеОрганизацииВАдреснойКниге = Истина;
			ОбновитьДанныеОтображенияОрганизацииВАдреснойКниге = Истина;
			ОбновитьСловаПоискаПоОрганизацииВАдреснойКниге = Истина;
		КонецЕсли;
		
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"ОбновитьДанныеОрганизацииВАдреснойКниге",
			ОбновитьДанныеОрганизацииВАдреснойКниге);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"ОбновитьСловаПоискаПоОрганизацииВАдреснойКниге",
			ОбновитьСловаПоискаПоОрганизацииВАдреснойКниге);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"ОбновитьДанныеОтображенияОрганизацииВАдреснойКниге",
			ОбновитьДанныеОтображенияОрганизацииВАдреснойКниге);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"ОбновитьДоступностьВПоискеПоОрганизации",
			ОбновитьДоступностьВПоискеПоОрганизации);
		
	КонецЕсли;
	
	// Определим основной банковский счет.
	ОбновитьОсновнойБанковскийСчет(ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Справочник_СтруктураПредприятия_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_СтруктураПредприятия_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(
		ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_СтруктураПредприятия_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено,
			ПолученныеДанные.ПолучитьСсылкуНового(),
			ДанныеИБ.Ссылка),
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		УказанОсобыйРанг = ПолученныеДанные.УказанОсобыйРанг;
		Ранг = ПолученныеДанные.Ранг;
	Иначе
		РеквизитыПодразделенияПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеИБ.Ссылка,
			"Руководитель, Родитель, ПометкаУдаления, Наименование, Ранг, УказанОсобыйРанг");
		УказанОсобыйРанг = РеквизитыПодразделенияПоСсылке.УказанОсобыйРанг;
		Ранг = РеквизитыПодразделенияПоСсылке.Ранг;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Ранг) Тогда
		Если УказанОсобыйРанг Тогда
			ПолученныеДанные.Ранг = Ранг;
		ИначеЕсли Не ЗначениеЗаполнено(ПолученныеДанные.Родитель) Тогда
			ПолученныеДанные.Ранг = 1;
		Иначе
			ПолученныеДанные.Ранг = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ПолученныеДанные.Родитель, "Ранг") + 1;
		КонецЕсли;
	КонецЕсли;
	
	// Обновление адресной книги
	ОбновитьДанныеСтруктурыПредприятияВАдреснойКниге = Ложь;
	ОбновитьДанныеСотрудниковПодразделенияВАдреснойКниге = Истина;
	ОбновитьДанныеОтображенияСтруктурыПредприятияВАдреснойКниге = Ложь;
	ОбновитьСловаПоискаПоСтруктуреПредприятияВАдреснойКниге = Ложь;
	ОбновитьДоступностьВПоискеПоСтруктуреПредприятия = Ложь;
	ИзмененРанг = Ложь;
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОбновитьДанныеСтруктурыПредприятияВАдреснойКниге = Истина;
		ОбновитьСловаПоискаПоСтруктуреПредприятияВАдреснойКниге = Истина;
		ИзмененРанг = Истина;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ОбновитьДанныеСтруктурыПредприятияВАдреснойКниге",
			ОбновитьДанныеСтруктурыПредприятияВАдреснойКниге);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ОбновитьДанныеСотрудниковПодразделенияВАдреснойКниге",
			ОбновитьДанныеСотрудниковПодразделенияВАдреснойКниге);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ОбновитьДанныеОтображенияСтруктурыПредприятияВАдреснойКниге",
			ОбновитьДанныеОтображенияСтруктурыПредприятияВАдреснойКниге);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ОбновитьСловаПоискаПоСтруктуреПредприятияВАдреснойКниге",
			ОбновитьСловаПоискаПоСтруктуреПредприятияВАдреснойКниге);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ОбновитьДоступностьВПоискеПоСтруктуреПредприятия",
			ОбновитьДоступностьВПоискеПоСтруктуреПредприятия);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ИзмененРанг",
			ИзмененРанг);
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"СтарыйРуководитель",
			Неопределено);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"СтарыйРодитель",
			Неопределено);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"СтараяПометкаУдаления",
			Неопределено);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"СтарыйРанг",
			Неопределено);
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"СтарыйУказанОсобыйРанг",
			Неопределено);
		
	Иначе
		
		Если РеквизитыПодразделенияПоСсылке.Родитель <> ПолученныеДанные.Родитель Тогда
			ОбновитьДанныеСтруктурыПредприятияВАдреснойКниге = Истина;
		КонецЕсли;
		Если РеквизитыПодразделенияПоСсылке.ПометкаУдаления <> ПолученныеДанные.ПометкаУдаления Тогда
			ОбновитьДанныеСтруктурыПредприятияВАдреснойКниге = Истина;
			ОбновитьДанныеСотрудниковПодразделенияВАдреснойКниге = Истина;
			ОбновитьДанныеОтображенияСтруктурыПредприятияВАдреснойКниге = Истина;
			ОбновитьДоступностьВПоискеПоСтруктуреПредприятия = Истина;
		КонецЕсли;
		Если РеквизитыПодразделенияПоСсылке.Наименование <> ПолученныеДанные.Наименование Тогда
			ОбновитьСловаПоискаПоСтруктуреПредприятияВАдреснойКниге = Истина;
			ОбновитьДанныеОтображенияСтруктурыПредприятияВАдреснойКниге = Истина;
			ОбновитьДанныеСтруктурыПредприятияВАдреснойКниге = Истина;
		КонецЕсли;
		
		Если РеквизитыПодразделенияПоСсылке.Ранг <> ПолученныеДанные.Ранг Тогда
			ИзмененРанг = Истина;
		КонецЕсли;
		
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"ОбновитьДанныеСтруктурыПредприятияВАдреснойКниге",
			ОбновитьДанныеСтруктурыПредприятияВАдреснойКниге);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"ОбновитьДанныеСотрудниковПодразделенияВАдреснойКниге",
			ОбновитьДанныеСотрудниковПодразделенияВАдреснойКниге);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"ОбновитьДанныеОтображенияСтруктурыПредприятияВАдреснойКниге",
			ОбновитьДанныеОтображенияСтруктурыПредприятияВАдреснойКниге);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"ОбновитьСловаПоискаПоСтруктуреПредприятияВАдреснойКниге",
			ОбновитьСловаПоискаПоСтруктуреПредприятияВАдреснойКниге);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"ОбновитьДоступностьВПоискеПоСтруктуреПредприятия",
			ОбновитьДоступностьВПоискеПоСтруктуреПредприятия);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"ИзмененРанг",
			ИзмененРанг);
		
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"СтарыйРуководитель",
			РеквизитыПодразделенияПоСсылке.Руководитель);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"СтарыйРодитель",
			РеквизитыПодразделенияПоСсылке.Родитель);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"СтараяПометкаУдаления",
			РеквизитыПодразделенияПоСсылке.ПометкаУдаления);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"СтарыйРанг",
			РеквизитыПодразделенияПоСсылке.Ранг);
		ДанныеИБ.ДополнительныеСвойства.Вставить(
			"СтарыйУказанОсобыйРанг",
			РеквизитыПодразделенияПоСсылке.УказанОсобыйРанг);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Финансовая_аналитика
Процедура ПОД_Справочник_СтатьиДвиженияДенежныхСредств_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СтатьиДвиженияДенежныхСредств_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СтатьиДДСГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиДвиженияДенежныхСредств_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
		ДанныеИБ,
		ПолученныеДанные,
		"Справочник.СтатьиДвиженияДенежныхСредств");
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#Область Алгоритмы

Функция ВидКонтактнойИнформацииИзСтроки(ВидКИСтрокой, НаименованиеКИ, ГруппаВидовКИ)
	ТекВидКИ = Неопределено;
	ПрефиксПользовательскойКИ = "ПользовательскаяКИ";
	
	Если СтрНачинаетсяС(ВидКИСтрокой, ПрефиксПользовательскойКИ) Тогда
		
		ИмяТипаКИ = СтрЗаменить(ВидКИСтрокой, ПрефиксПользовательскойКИ, "");
		
		ТекВидКИ  = ВидПользовательскойКонтактнойИнформации(
			НаименованиеКИ,
			ГруппаВидовКИ,
			Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ]);
		
	Иначе
		
		СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации;
		
		Если ГруппаВидовКИ = СправочникВидыКИ.СправочникКонтрагенты Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = СправочникВидыКИ.EmailКонтрагента;
				
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ПочтовыйАдресКонтрагента;
				
			ИначеЕсли ВидКИСтрокой = "ВебСтраница" Тогда
				ТекВидКИ = СправочникВидыКИ.СайтКонтрагента;
				
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = СправочникВидыКИ.ТелефонКонтрагента;
				
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ТекВидКИ = СправочникВидыКИ.ФаксКонтрагента;
				
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ФактическийАдресКонтрагента;
				
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ЮридическийАдресКонтрагента;
				
			КонецЕсли;
			
		ИначеЕсли ГруппаВидовКИ = СправочникВидыКИ.СправочникОрганизации Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = СправочникВидыКИ.EmailОрганизации;
				
			ИначеЕсли ВидКИСтрокой = "ПользовательскаяКИДругое" Тогда
				ТекВидКИ = СправочникВидыКИ.ДругаяИнформацияОрганизации;
				
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ПочтовыйАдресОрганизации;
				
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = СправочникВидыКИ.ТелефонОрганизации;
				
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ТекВидКИ = СправочникВидыКИ.ФаксОрганизации;
				
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ФактАдресОрганизации;
				
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ЮрАдресОрганизации;
				
			КонецЕсли;
			
		ИначеЕсли ГруппаВидовКИ = СправочникВидыКИ.СправочникФизическиеЛица Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = СправочникВидыКИ.EmailФизическогоЛица;
				
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ДомашнийАдресФизическогоЛица;
				
			ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
				ТекВидКИ = СправочникВидыКИ.ДомашнийТелефонФизическогоЛица;
				
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = СправочникВидыКИ.МобильныйТелефонФизическогоЛица;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекВидКИ;
КонецФункции
Функция ВидПользовательскойКонтактнойИнформации(НаименованиеКИ, ГруппаВидовКИ, ТипКИ)
	ТекВидКИ = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Ссылка В ИЕРАРХИИ(&ГруппаВидовКИ)
		|	И ВидыКонтактнойИнформации.Наименование = &Наименование
		|	И ВидыКонтактнойИнформации.Тип = &ТипКИ
		|	И ВидыКонтактнойИнформации.Используется = ИСТИНА
		|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ");
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Наименование",  НаименованиеКИ);
	Запрос.УстановитьПараметр("ТипКИ",         ТипКИ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекВидКИ = Выборка.Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекВидКИ) Тогда
		ТекВидКИ = НовыйВидКонтактнойИнформации(НаименованиеКИ, ГруппаВидовКИ, ТипКИ);
	КонецЕсли;
	
	Возврат ТекВидКИ;
КонецФункции
Процедура ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ЕстьДопРеквизиты = Ложь)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты = Новый ТаблицаЗначений;
	ДополнительныеРеквизиты.Колонки.Добавить("Свойство");
	ДополнительныеРеквизиты.Колонки.Добавить("ЗначениеСвойства");
	
	Если УправлениеСвойствами.ИспользоватьДопРеквизиты(ДанныеИБ.Ссылка) Тогда
		
		Если ЕстьДопРеквизиты Тогда
			ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБ.ДополнительныеРеквизиты, ДополнительныеРеквизиты);
		КонецЕсли;
		
		НаборДопРеквизитов = УправлениеСвойствами.СвойстваОбъекта(ДанныеИБ.Ссылка, Истина, Ложь);
		СвойстваДопРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			НаборДопРеквизитов,
			"Наименование, ТипЗначения");
		
		Для Каждого ДопРеквизит Из НаборДопРеквизитов Цикл
			СвойстваДопРеквизита = СвойстваДопРеквизитов[ДопРеквизит];
			
			Если СвойстваДопРеквизита.ТипЗначения <> Новый ОписаниеТипов("Булево") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеИБ.ДополнительныеРеквизиты.Найти(ДопРеквизит, "Свойство") = Неопределено Тогда
				СтрокаДополнительныхРеквизитов = ДополнительныеРеквизиты.Добавить();
				СтрокаДополнительныхРеквизитов.Свойство = ДопРеквизит;
				СтрокаДополнительныхРеквизитов.ЗначениеСвойства = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если УправлениеСвойствами.ИспользоватьДопСведения(ДанныеИБ.Ссылка) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Свойство КАК Свойство,
			|	Значение КАК Значение
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения
			|ГДЕ Объект = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		ДополнительныеСведенияИзДанныхИБ = Запрос.Выполнить().Выгрузить();
		
		// Дополнительные сведения типа Булево хранятся в регистре сведений "ДополнительныеСведения"
		// только со значением Истина. В связи с этим значения Ложь необходимо выгружать принудительно.
		Ссылка               = ДанныеИБ.Ссылка;
		МетаданныеОбъекта    = Ссылка.Метаданные();
		ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
		ВидОбъектаМетаданных = ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка);
		
		ВладелецДопСведенийЯвляетсяГруппой = Ложь;
		
		Если ВидОбъектаМетаданных = "Справочник" Или ВидОбъектаМетаданных = "ПланВидовХарактеристик" Тогда
			ВладелецДопСведенийЯвляетсяГруппой = ОбщегоНазначения.ОбъектЯвляетсяГруппой(Ссылка);
		КонецЕсли;
		
		ДополнительныеСведенияСЗначениемБулево = ПолучитьТЗДопСведенияБулево(КомпонентыОбмена);
		
		Если Не ВладелецДопСведенийЯвляетсяГруппой Тогда
			
			ИмяЭлемента = ВидОбъектаМетаданных + "_" + ИмяОбъектаМетаданных;
			
			Для Каждого СтрокаДополнительногоСвойстваБулево Из ДополнительныеСведенияСЗначениемБулево Цикл
				
				Если СтрНайти(СтрокаДополнительногоСвойстваБулево.ИмяПредопределенныхДанных, ИмяЭлемента) <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДополнительныеСведенияИзДанныхИБ.Найти(
						СтрокаДополнительногоСвойстваБулево.Свойство, "Свойство") = Неопределено Тогда
					СтрокаДополнительныхРеквизитов = ДополнительныеСведенияИзДанныхИБ.Добавить();
					СтрокаДополнительныхРеквизитов.Свойство = СтрокаДополнительногоСвойстваБулево.Свойство;
					СтрокаДополнительныхРеквизитов.Значение = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДополнительныеСведенияИзДанныхИБ, ДополнительныеРеквизиты);
		
	КонецЕсли;
	
	Если ДополнительныеРеквизиты.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ИмяПКОГруппа)
	ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
	
	Если ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяПКО = "Справочник_Номенклатура_Отправка";
		ИмяПКОГруппа = "Справочник_НоменклатураГруппа_Отправка";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяПКО = "Справочник_Контрагенты_Отправка";
		ИмяПКОГруппа = "Справочник_КонтрагентыГруппа_Отправка";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		ИмяПКО = "Справочник_КлассификаторБанков";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ИмяПКО = "Справочник_БанковскиеСчета_Отправка";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты") Тогда
		ИмяПКО = "Справочник_Валюты";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ИмяПКО = "Справочник_КлассификаторЕдиницИзмерения_Отправка";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Организации") Тогда
		ИмяПКО = "Справочник_Организации_Отправка";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи") Тогда
		ИмяПКО = "Справочник_Пользователи";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ИмяПКО = "Справочник_СтруктураПредприятия_Отправка";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		ИмяПКО = "Справочник_СтатьиДвиженияДенежныхСредств_Отправка";
		ИмяПКОГруппа = "Справочник_СтатьиДДСГруппа_Отправка";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира") Тогда
		ИмяПКО = "Справочник_СтраныМира";
		
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		ИмяПКОГруппа = "Справочник_ФизическиеЛицаГруппа_Отправка";
		
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов)
	Для Каждого СтрокаТЧ Из ДанныеИБДополнительныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Свойство) Или Не ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗначенияСвойства = ТипЗнч(СтрокаТЧ.Значение);
		ИмяПКО = "";
		ИмяПКОГруппа = "";
		
		Если ТипЗначенияСвойства = Тип("Число") 
				Или ТипЗначенияСвойства = Тип("Строка")
				Или ТипЗначенияСвойства = Тип("Булево")
				Или ТипЗначенияСвойства = Тип("Дата") Тогда
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = СтрокаТЧ.Свойство;
			НовСтрока.ЗначениеСвойства = СтрокаТЧ.Значение;
			Продолжить;
		КонецЕсли;
		
		ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.Значение, ИмяПКО, ИмяПКОГруппа);
		
		Если ИмяПКО = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяПКОГруппа <> "" И СтрокаТЧ.Значение.ЭтоГруппа Тогда
			ТекИмяПКО = ИмяПКОГруппа;
		Иначе
			ТекИмяПКО = ИмяПКО;
		КонецЕсли;
		
		НовСтрока = ТаблицаДопРеквизитов.Добавить();
		НовСтрока.Свойство = СтрокаТЧ.Свойство;
		НовСтрока.ЗначениеСвойства = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.Значение, ТекИмяПКО);
		
	КонецЦикла;
КонецПроцедуры
Процедура ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(ДанныеИБ, ПолученныеДанные, ТипВнешнегоОбъекта) Экспорт
	Если ДанныеИБ = Неопределено Тогда
		Связь = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СоздатьМенеджерЗаписи();
		Связь.СсылкаНаОбъектДО = ПолученныеДанные.ПолучитьСсылкуНового();
		Связь.ИДВнешнегоОбъекта = Строка(Связь.СсылкаНаОбъектДО.УникальныйИдентификатор());
		Связь.ТипВнешнегоОбъекта = ТипВнешнегоОбъекта;
		Связь.Записать();
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, ЕстьТЧДопРеквизиты = Ложь)
	Если Не (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	МетаОбъект      = ПолученныеДанные.Метаданные();
	ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаОбъект);
	
	ТипДанныхСтрокой = ИмяБазовогоТипа + "." + МетаОбъект.Имя;
	
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения  = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
		
		ЭтоДопСведение = СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение")
			И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение;
		
		ДопРеквизитыСтрока = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения.Добавить();
		ДопРеквизитыСтрока.Свойство       = СтрокаТЧ.Свойство;
		ДопРеквизитыСтрока.ЭтоДопСведение = ЭтоДопСведение;
		ДопРеквизитыСтрока.ТипОбъекта     = ТипДанныхСтрокой;
		
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение");
		
		// Проверка на простой тип.
		Если ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Строка")
				Или ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Число")
				Или ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Дата")
				Или ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Булево")
				Или СтрокаТЧ.ЗначениеСвойства = Неопределено Тогда
			
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = СтрокаТЧ.ЗначениеСвойства;
			
			ДопРеквизитыСтрока.ТипЗначения = ТипЗнч(СтрокаТЧ.ЗначениеСвойства);
			
		Иначе
			
			ИмяПКО = "";
			ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.ЗначениеСвойства, ИмяПКО, ДопРеквизитыСтрока.ТипЗначения);
			
			Если ИмяПКО = "" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			
			ЗначениеСвойства = СтрокаТЧ.ЗначениеСвойства;
			Если ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
				Если Не (ЗначениеСвойства.Свойство("Владелец") И ЗначениеЗаполнено(ЗначениеСвойства.Владелец)) Тогда
					// Ключевое свойство Владелец необходимо указать явно.
					ЗначениеСвойства.Вставить("Владелец", СтрокаТЧ.Свойство);
				КонецЕсли;
			КонецЕсли;
			
			СтруктураДанныхСтроки.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
			
		КонецЕсли;
		
		Если ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
	Если Не СтруктураДопСвойства.Свойство("ДополнительныеСведения")
			Или СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДополнительныеРеквизиты");
	
	Для Каждого СтрокаДопСведения Из СтруктураДопСвойства.ДополнительныеСведения Цикл
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			СтрокаДопСведения.Свойство,
			ПКО_ДопРеквизиты,
			"ПолучитьСсылку").Ссылка;
		
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(
				КомпонентыОбмена,
				СтрокаДопСведения.Значение.ИмяПКО);
			
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				СтрокаДопСведения.Значение.Значение,
				ПКО_ЗначениеСвойства,
				"ПолучитьСсылку").Ссылка;
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
		НовЗапись.Объект   = ОбъектСсылка;
		НовЗапись.Свойство = СвойствоСсылка;
		НовЗапись.Значение = ЗначениеСвойства;
	КонецЦикла;
	
	ДопСведенияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ДопСведенияНаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗагрузитьКонтактнуюИнформацию(ДанныеXDTO, ПолученныеДанные, ГруппаВидовКИ)
	Если Не (ДанныеXDTO.Свойство("КонтактнаяИнформация")
			И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация)) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
		ВидКИСтрокой   = СокрЛП(СтрокаXDTO.ВидКонтактнойИнформации.Значение);
		НаименованиеКИ = СокрЛП(СтрокаXDTO.НаименованиеКонтактнойИнформации);
		
		ТекВидКИ = ВидКонтактнойИнформацииИзСтроки(ВидКИСтрокой, НаименованиеКИ, ГруппаВидовКИ);
		
		Если Не ЗначениеЗаполнено(ТекВидКИ) Тогда
			Продолжить;
		КонецЕсли;
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			ПолученныеДанные,
			СокрЛП(СтрокаXDTO.ЗначенияПолей),
			ТекВидКИ);
	КонецЦикла;
КонецПроцедуры
Процедура ЗагрузитьПодробныеДанныеФИО(ПолученныеДанные, ФизЛицоСсылка)
	// Если история ФИО не передана - то заполнять регистр не требуется.
	Если Не ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО") Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтсчета = РегистрыСведений.ФИОФизическихЛиц.ДатаОтсчетаФИО();
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ФИОФизическихЛиц");
		ЭлементБлокировкиДанных.УстановитьЗначение("ФизическоеЛицо", ФизЛицоСсылка);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ФИОФизическихЛиц.ФИО КАК ФИО,
			|	ФИОФизическихЛиц.ИменительныйПадеж КАК ИменительныйПадеж,
			|	ФИОФизическихЛиц.РодительныйПадеж КАК РодительныйПадеж,
			|	ФИОФизическихЛиц.ДательныйПадеж КАК ДательныйПадеж,
			|	ФИОФизическихЛиц.ВинительныйПадеж КАК ВинительныйПадеж,
			|	ФИОФизическихЛиц.ТворительныйПадеж КАК ТворительныйПадеж,
			|	ФИОФизическихЛиц.ПредложныйПадеж КАК ПредложныйПадеж
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
			|ГДЕ
			|	ФИОФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо");
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
		СтарыеДанные = Запрос.Выполнить().Выгрузить();
		
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
		
		// Набор записей полностью заменяется на полученные данные.
		Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ДанныеФИО Цикл
			МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
			МенеджерЗаписиФИО.ФизическоеЛицо = ФизЛицоСсылка;
			
			МенеджерЗаписиФИО.Период = СтрокаФИО.НачалоПериода;
			Если (МенеджерЗаписиФИО.Период = ДатаОтсчета Или Не ЗначениеЗаполнено(МенеджерЗаписиФИО.Период))
					И ЗначениеЗаполнено(ПолученныеДанные.ДатаРождения) Тогда
				МенеджерЗаписиФИО.Период = ПолученныеДанные.ДатаРождения;
			КонецЕсли;
			
			МенеджерЗаписиФИО.ФИО = СтрШаблон("%1 %2 %3", СтрокаФИО.Фамилия, СтрокаФИО.Имя, СтрокаФИО.Отчество);
			СтарыеСклонения = СтарыеДанные.Найти(МенеджерЗаписиФИО.ФИО, "ФИО");
			Если СтарыеСклонения <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(
					МенеджерЗаписиФИО,
					СтарыеСклонения,
					"ИменительныйПадеж,РодительныйПадеж,ДательныйПадеж,ВинительныйПадеж,ТворительныйПадеж,ПредложныйПадеж");
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейФИО);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры
Процедура ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ТипЗначенияСвойства)
	Если Не ЗначениеЗаполнено(ЗначениеСвойства)
			Или ТипЗнч(ЗначениеСвойства) <> Тип("Структура")
			Или Не ЗначениеСвойства.Свойство("ТипЗначения") Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
	
	Если Найти(ТипЗначенияСвойства, "НоменклатураГруппа") > 0 Тогда
		ИмяПКО = "Справочник_НоменклатураГруппа_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "Номенклатура") > 0 Тогда
		ИмяПКО = "Справочник_Номенклатура_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "КонтрагентГруппа") > 0 Тогда
		ИмяПКО = "Справочник_КонтрагентыГруппа_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "Контрагент") > 0 Тогда
		ИмяПКО = "Справочник_Контрагенты_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЗначенияДополнительныхРеквизитов") > 0 Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "Банк") > 0 Тогда
		ИмяПКО = "Справочник_КлассификаторБанков";
		ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "Валюта") > 0 Тогда
		ИмяПКО = "Справочник_Валюты";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЕдиницаИзмерения") > 0 Тогда
		ИмяПКО = "Справочник_КлассификаторЕдиницИзмерения_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "Организация") > 0 Тогда
		ИмяПКО = "Справочник_Организации_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Организации");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "Пользователь") > 0 Тогда
		ИмяПКО = "Справочник_Пользователи";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "Подразделение") > 0 Тогда
		ИмяПКО = "Справочник_СтруктураПредприятия_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.СтруктураПредприятия");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДДС") > 0 Тогда
		ИмяПКО = "Справочник_СтатьиДвиженияДенежныхСредств_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтранаМира") > 0 Тогда
		ИмяПКО = "Справочник_СтраныМира";
		ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицоГруппа") > 0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица");
		
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицо") > 0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица");
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Функция НовыйВидКонтактнойИнформации(Наименование, Родитель, ТипКИ)
	ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
	ВидКИОбъект.Родитель     = Родитель;
	ВидКИОбъект.Наименование = Наименование;
	ВидКИОбъект.Тип          = ТипКИ;
	ВидКИОбъект.Используется = Истина;
	ВидКИОбъект.Записать();
	
	Возврат ВидКИОбъект.Ссылка;
КонецФункции
Процедура ОбновитьОсновнойБанковскийСчет(ПолученныеДанные, ДанныеИБ)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ОсновнойБанковскийСчет) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	БанковскиеСчета.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Владелец
			|	И НЕ БанковскиеСчета.ПометкаУдаления");
			
		Если ДанныеИБ = Неопределено Тогда
			Запрос.УстановитьПараметр("Владелец", ПолученныеДанные.ПолучитьСсылкуНового());
		Иначе
			Запрос.УстановитьПараметр("Владелец", ДанныеИБ.Ссылка);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ПолученныеДанные.ОсновнойБанковскийСчет = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОбновитьФизЛицоКонтрагента(ПолученныеДанные, ДанныеИБ)
	Если ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		МассивВидКИКонтрагента = Новый Массив;
		Для Каждого Строка Из ПолученныеДанные.КонтактнаяИнформация Цикл
			Если Не ПустаяСтрока(Строка.Значение) И МассивВидКИКонтрагента.Найти(Строка.Вид) = Неопределено Тогда
				МассивВидКИКонтрагента.Добавить(Строка.Вид);
			КонецЕсли;
		КонецЦикла;
		
		СоответствиеВидовКИ = Новый Соответствие;
		
		Если МассивВидКИКонтрагента.Количество() > 0 Тогда
			
			// Подберем по наименованию соответствующие виды КИ физ. лица.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
				|	ВидыКонтактнойИнформации.Наименование КАК Наименование
				|ПОМЕСТИТЬ ВидыКИКонтрагента
				|ИЗ
				|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
				|ГДЕ
				|	ВидыКонтактнойИнформации.Ссылка В(&МассивВидКИКонтрагента)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВидыКИКонтрагента.Ссылка КАК ВидКИКонтрагента,
				|	ВидыКИКонтрагента.Наименование КАК ВидКИНаименование,
				|	МАКСИМУМ(ЕСТЬNULL(ВидыКонтактнойИнформации.Ссылка, НЕОПРЕДЕЛЕНО)) КАК ВидКИФизЛица
				|ИЗ
				|	ВидыКИКонтрагента КАК ВидыКИКонтрагента
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
				|		ПО ВидыКИКонтрагента.Наименование = ВидыКонтактнойИнформации.Наименование
				|			И (ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникФизическиеЛица))
				|
				|СГРУППИРОВАТЬ ПО
				|	ВидыКИКонтрагента.Ссылка,
				|	ВидыКИКонтрагента.Наименование");
			Запрос.УстановитьПараметр("МассивВидКИКонтрагента", МассивВидКИКонтрагента);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.ВидКИФизЛица) Тогда
					ВидКИФизЛицаСсылка = Выборка.ВидКИФизЛица;
				Иначе
					ВидКИКонтрагента = Выборка.ВидКИКонтрагента.ПолучитьОбъект();
					ВидКИФизЛица = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИФизЛица.Заполнить(Неопределено);
					ЗаполнитьЗначенияСвойств(
						ВидКИФизЛица,
						ВидКИКонтрагента,,
						"Владелец, Ссылка, Родитель, ИмяПредопределенныхДанных, ИмяПредопределенногоВида, ИдентификаторДляФормул");
					ВидКИФизЛица.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица;
					ВидКИФизЛица.Записать();
					ВидКИФизЛицаСсылка = ВидКИФизЛица.Ссылка;
				КонецЕсли;
				СоответствиеВидовКИ.Вставить(Выборка.ВидКИКонтрагента, ВидКИФизЛицаСсылка);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДанныеИБ <> Неопределено И ПолученныеДанные.ФизЛицо.Пустая() Тогда
			ПолученныеДанные.ФизЛицо = ДанныеИБ.ФизЛицо;
		КонецЕсли;
		
		Если ПолученныеДанные.ФизЛицо.Пустая() Тогда
			УИДКонтрагента = ПолученныеДанные.ПолучитьСсылкуНового().УникальныйИдентификатор();
			ФизЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку(УИДКонтрагента);
			Если ОбщегоНазначения.СсылкаСуществует(ФизЛицоСсылка) Тогда
				ПолученныеДанные.ФизЛицо = ФизЛицоСсылка;
			КонецЕсли;
		КонецЕсли;
		
		Если ПолученныеДанные.ФизЛицо.Пустая() Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
				|	ФизическиеЛица.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|ГДЕ
				|	ФизическиеЛица.Наименование = &Наименование
				|	И НЕ ФизическиеЛица.ПометкаУдаления
				|	И НЕ ФизическиеЛица.ЭтоГруппа");
			Запрос.УстановитьПараметр("Наименование", ПолученныеДанные.Наименование);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ФизЛицоСсылка = Выборка.Ссылка;
				ПолученныеДанные.ФизЛицо = ФизЛицоСсылка;
			КонецЕсли;
		КонецЕсли;
		
		Если ПолученныеДанные.ФизЛицо.Пустая() Тогда
			ОбъектФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ОбъектФизЛицо.Наименование = ПолученныеДанные.Наименование;
			ОбъектФизЛицо.Комментарий = СтрШаблон(НСтр("ru = 'Создан на основании контрагента: %1'"), ПолученныеДанные.Наименование);
			ОбъектФизЛицо.УстановитьСсылкуНового(ФизЛицоСсылка);
			ПолученныеДанные.ФизЛицо = ФизЛицоСсылка;
		Иначе
			ЗаблокироватьДанныеДляРедактирования(ПолученныеДанные.ФизЛицо);
			ОбъектФизЛицо = ПолученныеДанные.ФизЛицо.ПолучитьОбъект();
		КонецЕсли;
		
		// Здесь нужна дополнительная операция, чтобы перенести контактные данные.
		ОбъектФизЛицо.КонтактнаяИнформация.Очистить();
		Для Каждого Строка Из ПолученныеДанные.КонтактнаяИнформация Цикл
			Если ПустаяСтрока(Строка.Значение) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ОбъектФизЛицо.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Вид = СоответствиеВидовКИ[Строка.Вид];
		КонецЦикла;
		ОбъектФизЛицо.Записать();
		
	ИначеЕсли ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
			Или ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		Если Не ПолученныеДанные.ФизЛицо.Пустая() Тогда
			ЗаблокироватьДанныеДляРедактирования(ПолученныеДанные.ФизЛицо);
			ОбъектФизЛицо = ПолученныеДанные.ФизЛицо.ПолучитьОбъект();
			ОбъектФизЛицо.УстановитьПометкуУдаления(Истина);
			ПолученныеДанные.ФизЛицо = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена)
	ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения;
	Если ДопРеквизитыИСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеТипОбъектаИНабор = Новый Соответствие;
	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	
	Для Каждого СтрокаДопРеквизиты Из ДопРеквизитыИСведения Цикл
		// Получение набора доп реквизитов.
		НаборДопРеквизитов = СоответствиеТипОбъектаИНабор.Получить(СтрокаДопРеквизиты.ТипОбъекта);
		Если НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
			// На прошлых итерациях не удалось найти набор доп реквизитов.
			Продолжить;
			
		ИначеЕсли НаборДопРеквизитов = Неопределено Тогда
			// Поиск набора еще не выполнялся.
			// 1 этап - прямой поиск.
			ИмяПредопределенногоЭлемента = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_");
			Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
				НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
				Если НаборДопРеквизитов.ЭтоГруппа Тогда
					НаборДопРеквизитов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			// Дополнительно поищем по ИмяПредопределенногоНабора для новой технологии БСП по созданию доп. реквизитов.
			Если НаборДопРеквизитов = Неопределено Тогда
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("ИдентификаторНабора", ИмяПредопределенногоЭлемента);
				Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
					|ГДЕ
					|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора = &ИдентификаторНабора
					|	И НЕ НаборыДополнительныхРеквизитовИСведений.ЭтоГруппа";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = СтрЗаменить(
					СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_"),
					"Справочники",
					"Справочник");
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// 2 этап - поиск общего элемента.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_") + "_Общие";
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = СтрЗаменить(
					СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_"),
					"Справочники",
					"Справочник") + "_Общие";
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// 3 этап - поиск по наименованию.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяТипаОбъекта = Прав(
					СтрокаДопРеквизиты.ТипОбъекта,
					СтрДлина(СтрокаДопРеквизиты.ТипОбъекта) - Найти(СтрокаДопРеквизиты.ТипОбъекта, "."));
				Запрос = Новый Запрос(
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
					|ГДЕ
					|	НаборыДополнительныхРеквизитовИСведений.ЭтоГруппа = ЛОЖЬ
					|	И НаборыДополнительныхРеквизитовИСведений.Наименование ПОДОБНО &ИмяПоиск");
				Запрос.УстановитьПараметр("ИмяПоиск", "%" + ИмяТипаОбъекта + "%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если НаборДопРеквизитов = Неопределено Тогда
				СоответствиеТипОбъектаИНабор.Вставить(
					СтрокаДопРеквизиты.ТипОбъекта,
					Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
				Продолжить;
			Иначе
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитов);
			КонецЕсли;
		КонецЕсли;
		// Преобразование свойства из XDTO в ссылку.
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			СтрокаДопРеквизиты.Свойство,
			ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты"),
			"ПолучитьСсылку").Ссылка;
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			// Возможно на этапе анализа данных, когда данные еще не загружены в ИБ.
			Продолжить;
		КонецЕсли;
		// Проверка типа свойства.
		Если ЗначениеЗаполнено(СтрокаДопРеквизиты.ТипЗначения) Тогда
			ТипЗначенияСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ТипЗначения");
			ДопЗначенияИспользуются = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СвойствоСсылка, "ДополнительныеЗначенияИспользуются");
			ИсключитьТипДопЗначения = Ложь;
			
			// Для нового свойства по умолчанию автоматически может установиться тип "ЗначенияСвойствОбъектов".
			// Его надо сбросить, если этот тип не соответствует типу значения.
			Если ТипЗначенияСвойства <> Неопределено
				// Признак "правомерно" установленного типа "ЗначенияСвойствОбъектов".
					И Не ДопЗначенияИспользуются
					И ТипЗначенияСвойства.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
					СвойствоОбъект.ОбменДанными.Загрузка = Истина;
					СвойствоОбъект.Записать();
					Продолжить;
					
				Иначе
					Если ТипЗначенияСвойства.Типы().Количество() = 1 Тогда
						ТипЗначенияСвойства = Неопределено;
					Иначе
						ИсключитьТипДопЗначения = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаДопРеквизиты.ТипЗначения) = Тип("Строка") Тогда
				ДобавляемыйТип = Тип("Строка");
			Иначе
				ДобавляемыйТип = СтрокаДопРеквизиты.ТипЗначения;
			КонецЕсли;
			Если (ТипЗначенияСвойства = Неопределено)
					Или Не ТипЗначенияСвойства.СодержитТип(ДобавляемыйТип) Тогда
				// Следует дополнить тип свойства.
				СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
				МассивТипов = Новый Массив;
				Если Не ДобавляемыйТип = Тип("Неопределено") Тогда
					МассивТипов.Добавить(ДобавляемыйТип);
				КонецЕсли;
				Если ДобавляемыйТип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
				КонецЕсли;
				Если ТипЗначенияСвойства <> Неопределено И ТипЗначенияСвойства.Типы().Количество() > 0 Тогда
					// Составной тип.
					Для Каждого ТекТип Из ТипЗначенияСвойства.Типы() Цикл
						Если ИсключитьТипДопЗначения И ТекТип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
							Продолжить;
						КонецЕсли;
						МассивТипов.Добавить(ТекТип);
					КонецЦикла;
				КонецЕсли;
				Если МассивТипов.Количество() > 0 Тогда
					СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
					СвойствоОбъект.ОбменДанными.Загрузка = Истина;
					СвойствоОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Проверка наличия в наборе доп реквизита или доп сведения.
		ИмяТабЧасти = ?(СтрокаДопРеквизиты.ЭтоДопСведение, "ДополнительныеСведения", "ДополнительныеРеквизиты");
		Если НаборДопРеквизитов[ИмяТабЧасти].Найти(СвойствоСсылка, "Свойство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(НаборДопРеквизитов) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			// Набор еще не менялся. Получение объекта и размещение его в соответствии.
			НаборДопРеквизитовОбъект = НаборДопРеквизитов.ПолучитьОбъект();
			СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитовОбъект);
		Иначе
			НаборДопРеквизитовОбъект = НаборДопРеквизитов;
		КонецЕсли;
		НаборДопРеквизитовОбъект.ОбменДанными.Загрузка = Истина;
		СтрокаТЧ = НаборДопРеквизитовОбъект[ИмяТабЧасти].Добавить();
		СтрокаТЧ.Свойство = СвойствоСсылка;
	КонецЦикла;
	
	// Запись измененных наборов.
	Для Каждого ЭлементСоответствияНабора Из СоответствиеТипОбъектаИНабор Цикл
		Если ТипЗнч(ЭлементСоответствияНабора.Значение) = Тип("СправочникОбъект.НаборыДополнительныхРеквизитовИСведений") Тогда
			НаборДопРеквизитовОбъект = ЭлементСоответствияНабора.Значение;
			НаборДопРеквизитовОбъект.КоличествоРеквизитов = Формат(
				НаборДопРеквизитовОбъект.ДополнительныеРеквизиты.НайтиСтроки(
					Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			НаборДопРеквизитовОбъект.КоличествоСведений = Формат(
				НаборДопРеквизитовОбъект.ДополнительныеСведения.НайтиСтроки(
					Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			НаборДопРеквизитовОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура Организации_ПослеЗаписи(Объект) Экспорт
	ДокументооборотПраваДоступа.ПриЗаписиРазрезаДоступа(Объект, Ложь);
	
	// Обновление адресной книги
	Если Объект.ДополнительныеСвойства.ОбновитьДанныеОрганизацииВАдреснойКниге Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Объект.Ссылка, Объект.Родитель, Справочники.АдреснаяКнига.Организации, Объект.Ссылка);
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.ОбновитьДанныеОтображенияОрганизацииВАдреснойКниге Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОтображенияПодчиненногоОбъекта(Объект.Ссылка);
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.ОбновитьСловаПоискаПоОрганизацииВАдреснойКниге Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоОрганизации(Объект);
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.ОбновитьДоступностьВПоискеПоОрганизации Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьДоступностьВПоиске(Объект);
	КонецЕсли;
КонецПроцедуры
Функция ОтборРегистраСведенийЗаполненКорректно(Отбор, ОписаниеПолей)
	ОтборЗаполненКорректно = Истина;
	
	ПоляОтбора = СтрРазделить(ОписаниеПолей, ",");
	
	Для Каждого ПолеОтбора Из ПоляОтбора Цикл
		
		Если Отбор.Найти(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Отбор[ПолеОтбора].Значение)
				Или Не Отбор[ПолеОтбора].Использование
				Или Не ОбщегоНазначения.СсылкаСуществует(Отбор[ПолеОтбора].Значение) Тогда
			ОтборЗаполненКорректно = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтборЗаполненКорректно;
КонецФункции
Процедура ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Если ТипЗнч(ДанныеИБ) = Тип("СправочникОбъект.Контрагенты")
			И ДанныеИБ.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
			И Не ДанныеИБ.ФизЛицо.Пустая() Тогда
		ФизЛицо = ДанныеИБ.ФизЛицо.ПолучитьОбъект();
		КонтактнаяИнформация = ФизЛицо.КонтактнаяИнформация.Выгрузить();
	Иначе
		КонтактнаяИнформация = ДанныеИБ.КонтактнаяИнформация.Выгрузить();
	КонецЕсли;
	
	Если КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ ИЗ КонтактнаяИнформация цикл
		
		Если Не ЗначениеЗаполнено(СтрокаКИ.Вид)
				Или (Не ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И Не ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид,
			"Наименование, Предопределенный, ХранитьИсториюИзменений");
		
		Если СвойстваВидаКИ.ХранитьИсториюИзменений = Истина Тогда
			НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", СтрокаКИ.Вид));
			Если НайденныеСтроки.Количество() > 1 Тогда
				АктуальнаяВерсия = Истина;
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока <> СтрокаКИ И НайденнаяСтрока.ДействуетС > СтрокаКИ.ДействуетС Тогда
						АктуальнаяВерсия = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не АктуальнаяВерсия Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваВидаКИ.Предопределенный
				И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации Тогда
			
			ПравилаКонвертацииПредопределенныхДанных = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных;
			ПравилоКонвертации = ПравилаКонвертацииПредопределенныхДанных.Найти("Справочник_ВидыКонтактнойИнформации_Отправка", "ИмяПКПД");
			Если ПравилоКонвертации = Неопределено Тогда
				// Такую предопределенную контактную информацию мы выгружать не умеем.
				Продолжить;
			КонецЕсли;
			
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
			
		Иначе
			
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
			
			ЭтоПоддерживаемыйТипКИ = (ИмяТипаКИ = "Адрес")
				Или (ИмяТипаКИ = "АдресЭлектроннойПочты")
				Или (ИмяТипаКИ = "ВебСтраница")
				Или (ИмяТипаКИ = "Другое")
				Или (ИмяТипаКИ = "Телефон")
				ИЛИ (ИмяТипаКИ = "Факс")
				Или (ИмяТипаКИ = "Skype");
			
			Если Не ЭтоПоддерживаемыйТипКИ Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ" + ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
			
		КонецЕсли;
		
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
			// КИ в правильном формате.
			СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
			
		Иначе
			ЗначенияПолей = "";
			
			// Попытка №1.
			Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда
				ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
					СокрЛП(СтрокаКИ.ЗначенияПолей),
					СокрЛП(СтрокаКИ.Представление),
					СтрокаКИ.Вид);
			КонецЕсли;
			
			Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
				// Попытка №2.
				ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
					СокрЛП(СтрокаКИ.Представление),
					СтрокаКИ.Вид);
			КонецЕсли;
			
			СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ПолучитьТЗДопСведенияБулево(КомпонентыОбмена)
	ТЗДопСведенияБулево = КомпонентыОбмена.ПараметрыКонвертации.ТЗДопСведенияБулево;
	Если ТЗДопСведенияБулево = Неопределено Тогда
		
		ТЗДопСведенияБулево = Новый ТаблицаЗначений;
		ТЗДопСведенияБулево.Колонки.Добавить("ИмяПредопределенныхДанных",
			Новый ОписаниеТипов("Строка"));
		ТЗДопСведенияБулево.Колонки.Добавить("Свойство",
			Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
			|	ДополнительныеРеквизитыИСведения.НаборСвойств.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
			|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения
			|ИЗ
			|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|ГДЕ
			|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
			|	И НЕ ДополнительныеРеквизитыИСведения.НаборСвойств.ИмяПредопределенныхДанных = """"");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
				СтрокаДопСведения = ТЗДопСведенияБулево.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДопСведения, Выборка);
			КонецЕсли;
		КонецЦикла;
		
		КомпонентыОбмена.ПараметрыКонвертации.ТЗДопСведенияБулево = ТЗДопСведенияБулево;
		
	КонецЕсли;
	
	Возврат ТЗДопСведенияБулево;
КонецФункции
Процедура Пользователи_ПослеЗаписи(Объект) Экспорт
	ПараметрыОбработкиПользователяИБ = Неопределено;
	
	ПользователиСлужебный.НачатьОбработкуПользователяИБ(Объект, ПараметрыОбработкиПользователяИБ);
	
	УчастникиИзменений = Новый Соответствие;
	ИзмененныеГруппы   = Новый Соответствие;
	
	ПользователиСлужебный.ОбновитьСоставыГруппПользователей(
		Справочники.РабочиеГруппы.ВсеПользователи, Объект.Ссылка, УчастникиИзменений, ИзмененныеГруппы);
	
	ПользователиСлужебный.ОбновитьИспользуемостьСоставовГруппПользователей(
		Объект.Ссылка, УчастникиИзменений, ИзмененныеГруппы);
	
	ПользователиСлужебный.ЗавершитьОбработкуПользователяИБ(
		Объект, ПараметрыОбработкиПользователяИБ);
	
	ПользователиСлужебный.ПослеОбновленияСоставовГруппПользователей(
		УчастникиИзменений, ИзмененныеГруппы);
	
	ИнтеграцияПодсистемБСП.ПослеДобавленияИзмененияПользователяИлиГруппы(
		Объект.Ссылка,
		Объект.ДополнительныеСвойства.ЭтоНовый);
КонецПроцедуры
Процедура СтруктураПредприятия_ПослеЗаписи(Объект) Экспорт
	// Общий обработчик для всех разрезов доступа.
	ДокументооборотПраваДоступа.ПриЗаписиРазрезаДоступа(Объект, Ложь);
	
	Если Объект.ДополнительныеСвойства.ЭтоНовый
		Или Объект.Родитель <> Объект.ДополнительныеСвойства.СтарыйРодитель
		Или Объект.Руководитель <> Объект.ДополнительныеСвойства.СтарыйРуководитель Тогда
		
		РегистрыСведений.ПодчиненностьПодразделений.ЗаполнитьПоОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	ОбработанныеКонтейнеры = Новый Массив;
	Если Объект.Руководитель <> Объект.ДополнительныеСвойства.СтарыйРуководитель
		Или Объект.Родитель <> Объект.ДополнительныеСвойства.СтарыйРодитель Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПодчиненностьПодразделений.Подчиненное КАК Подразделение
			|ИЗ
			|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
			|ГДЕ
			|	ПодчиненностьПодразделений.Вышестоящее = &Подразделение";
		
		Запрос.УстановитьПараметр("Подразделение", Объект.Ссылка);
		
		ПодразделенияДляПересчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		
		ПодразделенияКонтейнеры = Справочники.ПодразделенияКонтейнеры.НайтиПодразделенияКонтейнеры(
			ПодразделенияДляПересчета, Перечисления.СпособВключенияСотрудниковПодразделения.ТолькоРуководитель);
		
		РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнеров(
			ПодразделенияКонтейнеры, ОбработанныеКонтейнеры);
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> Объект.ДополнительныеСвойства.СтараяПометкаУдаления Тогда
		РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнера(Объект.Ссылка, ОбработанныеКонтейнеры);
	КонецЕсли;
	
	Если Объект.Родитель <> Объект.ДополнительныеСвойства.СтарыйРодитель Тогда
		РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнера(Объект.Родитель, ОбработанныеКонтейнеры);
		РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнера(Объект.ДополнительныеСвойства.СтарыйРодитель, ОбработанныеКонтейнеры);
	КонецЕсли;
	
	// Обновление адресной книги.
	Если Объект.ДополнительныеСвойства.ОбновитьДанныеСтруктурыПредприятияВАдреснойКниге Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Объект.Ссылка, Объект.Родитель, Справочники.АдреснаяКнига.ПоСтруктуреПредприятия);
	КонецЕсли;
	Если Объект.ДополнительныеСвойства.ОбновитьДанныеОтображенияСтруктурыПредприятияВАдреснойКниге Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОтображенияПодчиненногоОбъекта(Объект.Ссылка);
	КонецЕсли;
	Если Объект.ДополнительныеСвойства.ОбновитьСловаПоискаПоСтруктуреПредприятияВАдреснойКниге Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоПодразделению(Объект);
	КонецЕсли;
	Если Объект.ДополнительныеСвойства.ОбновитьДоступностьВПоискеПоСтруктуреПредприятия Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьДоступностьВПоиске(Объект);
	КонецЕсли;
	Если Объект.ДополнительныеСвойства.ОбновитьДанныеСотрудниковПодразделенияВАдреснойКниге Тогда
		СотрудникиПодразделения = Сотрудники.СотрудникиПодразделения(Объект.Ссылка, Ложь);
		Справочники.АдреснаяКнига.РасширитьСписокСотрудниковРолями(СотрудникиПодразделения);
		Справочники.АдреснаяКнига.ОбновитьСписокПодчиненныхОбъектов(
			Объект.Ссылка,
			Объект.Родитель,
			СотрудникиПодразделения,
			Справочники.АдреснаяКнига.ПоСтруктуреПредприятия);
	КонецЕсли;
	Если Объект.ДополнительныеСвойства.ИзмененРанг Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка КАК Ссылка,
			|	СтруктураПредприятия.Родитель КАК Родитель
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.Ссылка <> &ЭтоПодразделение
			|	И СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&ЭтоПодразделение)");
		Запрос.УстановитьПараметр("ЭтоПодразделение", Объект.Ссылка);
		ВыборкаОбъект = Запрос.Выполнить().Выбрать();
		Пока ВыборкаОбъект.Следующий() Цикл
			// Обновление адресной книги
			Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
				ВыборкаОбъект.Ссылка, ВыборкаОбъект.Родитель, Справочники.АдреснаяКнига.ПоСтруктуреПредприятия);
			Справочники.АдреснаяКнига.ОбновитьДанныеОтображенияПодчиненногоОбъекта(ВыборкаОбъект.Ссылка);
		КонецЦикла;
		
		Справочники.СтруктураПредприятия.ОбновитьРангиНижестоящихПодразделений(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьПоляПоискаКонтрагента(КомпонентыОбмена, ДанныеXDTO)
	// Поиск контрагента должен осуществляться следующим образом
	//   - если заполнен ИНН, то поиск осуществляется по ИНН для физ.лица и ИНН/КПП для юрлица + ЭтоГруппа
	//   - если ИНН не заполнен, то поиск осуществляется сначала по полному наименованию, затем по наименованию + ЭтоГруппа.
	
	ПравилаКонвертацииКонтрагентов = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(
		"Справочник_Контрагенты_Получение", "ИмяПКО");
	Если ПравилаКонвертацииКонтрагентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоляПоиска = ПравилаКонвертацииКонтрагентов.ПоляПоиска;
	ПоляПоиска.Очистить();
	
	ИННЗаполнен = Ложь;
	КППЗаполнен = Ложь;
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства) Тогда
		ИННЗаполнен = ДанныеXDTO.КлючевыеСвойства.Свойство("ИНН")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ИНН);
		КППЗаполнен = ДанныеXDTO.КлючевыеСвойства.Свойство("КПП")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.КПП);
		ЭтоЮридическоеЛицо = ДанныеXDTO.КлючевыеСвойства.Свойство("ЮридическоеФизическоеЛицо")
			И ДанныеXDTO.КлючевыеСвойства.ЮридическоеФизическоеЛицо.Значение = "ЮридическоеЛицо";
	Иначе
		ИННЗаполнен = ДанныеXDTO.Свойство("ИНН")
			И ЗначениеЗаполнено(ДанныеXDTO.ИНН);
		КППЗаполнен = ДанныеXDTO.Свойство("КПП")
			И ЗначениеЗаполнено(ДанныеXDTO.КПП);
		ЭтоЮридическоеЛицо = ДанныеXDTO.Свойство("ЮридическоеФизическоеЛицо")
			И ДанныеXDTO.ЮридическоеФизическоеЛицо.Значение = "ЮридическоеЛицо";
	КонецЕсли;
	
	Если ИННЗаполнен Тогда
		Если ЭтоЮридическоеЛицо И КППЗаполнен Тогда
			ПоляПоиска.Добавить("ИНН,КПП,ЭтоГруппа");
		Иначе
			ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
		КонецЕсли;
	Иначе
		ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
		ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	КонецЕсли;
КонецПроцедуры
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство,
	// значит выполняется загрузка значения свойства, а не самого объекта.
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции

#КонецОбласти
#КонецОбласти
