#Область ПрограммныйИнтерфейс

// Добавляет запись в регистр "Мои документы"
//
// Параметры:
//   Документ 	  - СправочникСсылка.ДокументыПредприятия - добавляемый документ 
//   Причина 	  - ПеречислениеСсылка.ПричиныДобавленияВМоиДокументы - 
//   				причина добавления в Мои документ
//   Сотрудник - СправочникСсылка.Сотрудники - Сотрудник, для которого добавляется документ,
//		   			если не указан, то текущий.
//   ИсточникПричины - ДокументСсылка.ДействиеЗадачи, ДокументСсылка.Задача - к какой задаче относится причина
//
Процедура ДобавитьЗаписьВМоиДокументы(Документ, Причина, Сотрудник = Неопределено,
	ИсточникПричины=Неопределено) Экспорт 
	
	Если Сотрудник = Неопределено Тогда 
		Сотрудник = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") 
		И ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.МоиДокументы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Причина = Причина;
	МенеджерЗаписи.Сотрудник = Сотрудник;
	МенеджерЗаписи.ИсточникПричины = ИсточникПричины;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры	

// Добавляет записи в регистр "Мои документы"
//
// Параметры:
//   Документы 	  - Массив - массив добавляемых документов
//   Причина 	  - ПеречислениеСсылка.ПричиныДобавленияВМоиДокументы - 
//   				причина добавления в Мои документы
//   Сотрудник - СправочникСсылка.Сотрудники - Сотрудник, для которого добавляется документ,
//   				если не указан, то текущий.
//
Процедура ДобавитьЗаписиВМоиДокументы(Документы, Причина, Сотрудник = Неопределено) Экспорт 

	Для Каждого Документ Из Документы цикл
		ДобавитьЗаписьВМоиДокументы(Документ, Причина, Сотрудник);
	КонецЦикла;	
	
КонецПроцедуры

// Удаляет запись из регистра "Мои документы"
//
// Параметры:
//   Документ 	  - СправочникСсылка.ДокументыПредприятия - удаляемый документ
//   Причина 	  - ПеречислениеСсылка.ПричиныДобавленияВМоиДокументы - 
//   				причина добавления в Мои документы 
//   Сотрудник - СправочникСсылка.Сотрудники - Сотрудник, для которого удаляется документ,
//   				если не указан, то текущий. 
//   ИсточникПричины - ДокументСсылка.ДействиеЗадачи, ДокументСсылка.Задача - к какой задаче относится причина
//
Процедура УдалитьЗаписьИзМоиДокументы(Документ, Причина, Знач Сотрудник = Неопределено,
	ИсточникПричины=Неопределено) Экспорт 
	
	Если Сотрудник = Неопределено Тогда 
		Сотрудник = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") 
		И ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Причина = Перечисления.ПричиныДобавленияВМоиДокументы.НазначенаЗадачаМне 
		Или Причина = Перечисления.ПричиныДобавленияВМоиДокументы.ОтправленаЗадачаОтМеня Тогда
		
			НаборЗаписей = РегистрыСведений.МоиДокументы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Документ);
			НаборЗаписей.Отбор.Причина.Установить(Причина);
			НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
			НаборЗаписей.Прочитать();
			
			КоличествоЗаписей = НаборЗаписей.Количество();
			Если КоличествоЗаписей = 0 Тогда
				Возврат;
			Иначе
				
				ЗаполнялсяИсточникПриСоздании = ЗначениеЗаполнено(НаборЗаписей[0].ИсточникПричины);
				
				Если ЗаполнялсяИсточникПриСоздании Тогда
					
					НаборЗаписей.Отбор.ИсточникПричины.Установить(ИсточникПричины); 
					НаборЗаписей.Прочитать();
					
				КонецЕсли;
				
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
				
			КонецЕсли;
		
	Иначе
		
		МенеджерЗаписи = РегистрыСведений.МоиДокументы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = Документ;
		МенеджерЗаписи.Причина = Причина;
		МенеджерЗаписи.Сотрудник = Сотрудник;
		МенеджерЗаписи.Прочитать();
		
		Если ЗначениеЗаполнено(МенеджерЗаписи.ИсточникПричины) Тогда
			МенеджерЗаписи.ИсточникПричины = ИсточникПричины; 
		КонецЕсли;
		
		МенеджерЗаписи.Удалить(); 
	
	КонецЕсли;
	
КонецПроцедуры

// Удаляет записи из регистра "Мои документы"
//
// Параметры:
//   Документы 	  - Массив - удаляемые документы
//   Причина 	  - ПеречислениеСсылка.ПричиныДобавленияВМоиДокументы - 
//   				причина добавления в Мои документы
//   Сотрудник - СправочникСсылка.Сотрудники - Сотрудник, для которого удаляется документ,
//   				если не указан, то текущий.
//
Процедура УдалитьЗаписиИзМоиДокументы(Документы, Причина, Сотрудник = Неопределено) Экспорт 
	
	Для Каждого Документ Из Документы Цикл
		УдалитьЗаписьИзМоиДокументы(Документ, Причина, Сотрудник);
	КонецЦикла;
	
КонецПроцедуры	

// Удаляет все записи по документу из регистра "Мои документы"
//
// Параметры:
//   Документ 		- СправочникСсылка.ДокументыПредприятия - удаляемый документ
//   Сотрудник   - СправочникСсылка.Сотрудники - Сотрудник, для которого удаляется документ,
//   				  если не указан, то текущий.
//
Процедура УдалитьДокументИзМоиДокументы(Документ, Сотрудник = Неопределено) Экспорт 

	Если Сотрудник = Неопределено Тогда 
		Сотрудник = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
		
	Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") 
		И ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.МоиДокументы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Записать();
	
КонецПроцедуры	

// Проверяет, что переданный документ входит в "Мои документы"
//
// Параметры:
//   Документ 		- СправочникСсылка.ДокументыПредприятия - проверяемый документ
//   Сотрудник   - СправочникСсылка.Сотрудники - Сотрудник, для которого проверяется документ,
//   				  если не указан, то текущий.
// 
// Возвращаемое значение:
//  Булево
//
Функция ДокументВходитВМоиДокументы(Документ, Сотрудник = Неопределено) Экспорт 
	
	Если Сотрудник = Неопределено Тогда 
		СотрудникиПользователя = Сотрудники.ВсеСотрудникиТекущегоПользователя(Ложь);
	Иначе
		СотрудникиПользователя = Новый Массив;
		СотрудникиПользователя.Добавить(Сотрудник);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.МоиДокументы КАК МоиДокументы
		|ГДЕ
		|	МоиДокументы.Сотрудник В (&Сотрудники)
		|	И МоиДокументы.Документ = &Документ";
	Запрос.Параметры.Вставить("Сотрудники", СотрудникиПользователя);
	Запрос.Параметры.Вставить("Документ", Документ);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Формирует временную таблицу "Мои документы".
// 
// Параметры:
//  Причины - Массив из ПеречислениеСсылка.ПричиныДобавленияВМоиДокументы
// 
// Возвращаемое значение:
//  МенеджерВременныхТаблиц
// 
Функция ВременнаяТаблицаМоиДокументы(Причины) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МоиДокументы.Документ КАК Документ,
		|	МоиДокументы.Документ.Представление КАК ПредставлениеДокумента,
		|	МоиДокументы.Документ.СрокИсполнения КАК СрокИсполнения,
		|	МоиДокументы.Документ.ВидДокумента КАК ВидДокумента,
		|	МоиДокументы.Документ.Проект КАК Проект,
		|	ЕСТЬNULL(МоиДокументы.Документ.Проект.Представление, &ИмяГруппыБезПроекта) КАК Представление,
		|	ДанныеДокументовПредприятия.КонтрагентыДляСписков КАК Контрагент,
		|	ДанныеДокументовПредприятия.ДатаСортировки КАК ДатаДокумента,
		|	МоиДокументы.Причина КАК Причина,
		|	ТекущиеСостоянияДокументов.Состояние КАК СостояниеИсполнен,
		|	ВЫБОР
		|		КОГДА НЕ МоиДокументы.Документ.ВидДокумента.ЯвляетсяИсходящейКорреспонденцией
		|				И МоиДокументы.Документ.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И МоиДокументы.Документ.СрокИсполнения < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				И МоиДокументы.Документ.ВидДокумента.ИспользоватьСрокИсполнения
		|				И ТекущиеСостоянияДокументов.Состояние ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		КОГДА ТИПЗНАЧЕНИЯ(МоиДокументы.Документ) = ТИП(Справочник.ДокументыПредприятия)
		|				И МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента)
		|				И МоиДокументы.Документ.РезультатПодписания = ЗНАЧЕНИЕ(Перечисление.РезультатыПодписания.НеПодписано)
		|				И МоиДокументы.Документ.ДатаПодписания <> ДАТАВРЕМЯ(1, 1, 1)
		|				И МоиДокументы.Документ.ДатаПодписания < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|			ТОГДА ИСТИНА
		|		КОГДА МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.НазначенаЗадачаМне)
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						Документ.Задача.Приложения КАК ЗадачаПриложения
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрЗадачПоИсполнителям КАК РеестрЗадачПоИсполнителям
		|							ПО ЗадачаПриложения.Ссылка = РеестрЗадачПоИсполнителям.Задача
		|								И (РеестрЗадачПоИсполнителям.РеестрЗадач = &РеестрЗадачиМне)
		|								И (РеестрЗадачПоИсполнителям.ПросроченоИОжидаетВыполнения)
		|					ГДЕ
		|						ЗадачаПриложения.Приложение = МоиДокументы.Документ
		|						И НЕ РеестрЗадачПоИсполнителям.ДействиеЗадачи ЕСТЬ NULL)
		|			ТОГДА ИСТИНА
		|		КОГДА МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ОтправленаЗадачаОтМеня)
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						Документ.Задача.Приложения КАК ЗадачаПриложения
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрЗадачПоИсполнителям КАК РеестрЗадачПоИсполнителям
		|							ПО ЗадачаПриложения.Ссылка = РеестрЗадачПоИсполнителям.Задача
		|								И (РеестрЗадачПоИсполнителям.РеестрЗадач = &РеестрЗадачиОтМеня)
		|								И (РеестрЗадачПоИсполнителям.ПросроченоИОжидаетВыполнения)
		|					ГДЕ
		|						ЗадачаПриложения.Приложение = МоиДокументы.Документ
		|						И НЕ РеестрЗадачПоИсполнителям.ДействиеЗадачи ЕСТЬ NULL)
		|			ТОГДА ИСТИНА
		|		КОГДА ТИПЗНАЧЕНИЯ(МоиДокументы.Документ) = ТИП(Справочник.ДокументыПредприятия)
		|				И МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента)
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						Справочник.ДокументыПредприятия.Стороны КАК Стороны
		|					ГДЕ
		|						Стороны.Подписал В (&ПользовательИЕгоСотрудники)
		|						И НЕ Стороны.Подписан
		|						И Стороны.Ссылка = МоиДокументы.Документ
		|						И Стороны.ДатаПодписи <> ДАТАВРЕМЯ(1, 1, 1)
		|						И Стороны.ДатаПодписи < &ТекущаяДата)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Просрочен,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПрочтенностьДокументов = ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ 	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ)
		|	КОНЕЦ КАК Прочтен,
		|	МоиДокументы.Сотрудник,
		|	ВЫБОР
		|		КОГДА МоиДокументы.Документ.ВидДокумента.ЯвляетсяИсходящейКорреспонденцией
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКорреспонденции.Исходящая)
		|		КОГДА МоиДокументы.Документ.ВидДокумента.ЯвляетсяВходящейКорреспонденцией
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКорреспонденции.Входящая)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыКорреспонденции.ПустаяСсылка)
		|	КОНЕЦ КАК ВидКорреспонденции,
		|	(МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента)
		|		ИЛИ МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент))
		|	И МоиДокументы.Документ.НеДействует = ЛОЖЬ
		|	И (МоиДокументы.Документ.ДатаОкончанияДействия >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				И МоиДокументы.Документ.ДатаОкончанияДействия <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ)
		|			ИЛИ МоиДокументы.Документ.СрокИсполнения >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				И МоиДокументы.Документ.СрокИсполнения <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ)) КАК Истекает
		|
		|ПОМЕСТИТЬ МоиДокументы
		|ИЗ
		|	РегистрСведений.МоиДокументы КАК МоиДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|		ПО МоиДокументы.Документ = ДанныеДокументовПредприятия.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|		ПО МоиДокументы.Документ = ТекущиеСостоянияДокументов.Документ
		|			И (ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО МоиДокументы.Документ = СведенияОПрочтении.Объект
		|			И (СведенияОПрочтении.Пользователь = &Пользователь)
		|ГДЕ
		|	НЕ МоиДокументы.Документ.ПометкаУдаления
		|	И МоиДокументы.Сотрудник В (&Сотрудники)
		|	И МоиДокументы.Причина В(&Причины)");
	
	// При отсутствии прав на проекты считаем проект пустым.
	ЧастьТекстаЗапросаПроектов =
		"	МоиДокументы.Документ.Проект КАК Проект,
		|	ЕСТЬNULL(МоиДокументы.Документ.Проект.Представление, &ИмяГруппыБезПроекта) КАК Представление,";
	Если Не СтрНайти(Запрос.Текст, ЧастьТекстаЗапросаПроектов) Тогда
		// Запрос всегда должен быть в консистентном состоянии с данной частью текста запроса.
		ВызватьИсключение НСтр("ru = 'Не найден текста запроса проектов.'");
	КонецЕсли;
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Проекты) Тогда
		ЧастьТекстаЗапросаБезПроектов =
			"	Значение(Справочник.Проекты.ПустаяСсылка) КАК Проект,
			|	&ИмяГруппыБезПроекта КАК Представление,";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЧастьТекстаЗапросаПроектов, ЧастьТекстаЗапросаБезПроектов);
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники.ВсеСотрудникиТекущегоПользователя(Ложь));
	Запрос.УстановитьПараметр("ПользовательИЕгоСотрудники", Сотрудники.ПользовательИЕгоСотрудники(, Ложь));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Причины", Причины);
	Запрос.УстановитьПараметр("ИмяГруппыБезПроекта", НСтр("ru = 'Без проекта'"));
	
	Запрос.УстановитьПараметр("ИспользоватьПрочтенностьДокументов", 
		ПолучитьФункциональнуюОпцию("ИспользоватьПрочтенностьДокументов"));
	
	РеестрЗадачиМне = Справочники.РеестрыЗадач.РеестрЗадачиМне(ТекущийПользователь);
	Запрос.УстановитьПараметр("РеестрЗадачиМне", РеестрЗадачиМне);
	
	РеестрЗадачиОтМеня = Справочники.РеестрыЗадач.РеестрЗадачиОтМеня(ТекущийПользователь);
	Запрос.УстановитьПараметр("РеестрЗадачиОтМеня", РеестрЗадачиОтМеня);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

#КонецОбласти