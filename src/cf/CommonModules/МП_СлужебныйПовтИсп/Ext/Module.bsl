#Область ПрограммныйИнтерфейс

// Возвращает данные сообщения
//
// Параметры:
// Сообщение	 - Ссылка на элемент справочника СообщенияИнтегрированныхСистем.
Функция ДанныеСообщения(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ДанныеСообщения").Получить();
	
КонецФункции

// Получает параметры синхронизации для того чтобы их не читать множество раз
//
// Параметры:
//  МобильноеПриложение	 - Справочник.ПользователиМобильногоПриложения
// 
// Возвращаемое значение:
//  Структура - Кешированные параметры синхронизации и объекты для обеспечения скорости выгрузки
//
Функция ПараметрыСинхронизации(МобильноеПриложение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();

	ПараметрыСинхронизации = Новый Структура;

	ПараметрыСинхронизации.Вставить("МобильноеПриложение", МобильноеПриложение);
	
	ПараметрыСинхронизации.Вставить("ТекущийПользователь", Пользователь);

	ПараметрыСинхронизации.Вставить("КоличествоОбъектовВсего", 0);
	
	Сведения = СведенияОМобильномПриложении(МобильноеПриложение);
	
	ПараметрыСинхронизации.Вставить("ОтметкаВремениМобильного",
		?(Сведения = Неопределено, "", Сведения.ОтметкаВремениСборкиДанных));
	
	ПараметрыСинхронизации.Вставить("ТекущаяОтметкаСбораДанных", ОтметкиВремени.Текущая());
	
	// часто используемые настройки:
	Для Каждого КлючИЗначение Из НайстройкиПользователя(Пользователь) Цикл
		
		ПараметрыСинхронизации.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
	КонецЦикла;

	Возврат ПараметрыСинхронизации;

КонецФункции

// Формирует список по умолчанию форматов передаваемых на мобильный клиент файлов
Функция СписокФорматовФайловПоУмолчанию() Экспорт

	Массив = Новый Массив();
	Массив.Добавить("txt log ini"); // текстовые файлы
	Массив.Добавить("ico wmf emf"); // иконки и картинки
	Массив.Добавить("htm html url mht mhtml"); // документы интернета
	Массив.Добавить("doc docx dot rtf xls xlsx ppt pptx"); // документы MS Office
	Массив.Добавить("jpg jpeg jp2 jpe bmp dib tif tiff gif png"); // изображения
	Массив.Добавить("pdf"); // файлы PDF
	Массив.Добавить("odt odf odp odg ods"); // документы Open Office

	Возврат ВРег(СтрСоединить(Массив, " "));

КонецФункции 

// Получает персональные настройки пользователя мобильного приложения
//
// Параметры:
//  Пользователь - Справочник.Пользователи (по умолчанию - текущий пользователь)
// 
// Возвращаемое значение:
//  Структура - Кешированные данные настроек мобильного приложения
//
Функция НайстройкиПользователя(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Настройки = Новый Структура;
	
	ВсеНастройки = Метаданные.Перечисления.МП_ТипыНастроекПользователей.ЗначенияПеречисления;
	
	Для Каждого Настройка Из ВсеНастройки Цикл
		
		ИмяНастройки = Настройка.Имя;
		ЗначениеНастройки = РегистрыСведений.МП_НастройкиПользователей.ПолучитьНастройку(Пользователь,
			Перечисления.МП_ТипыНастроекПользователей[ИмяНастройки]);
		Настройки.Вставить(ИмяНастройки, ЗначениеНастройки);
			
		Если ИмяНастройки = "ПодробныйПротоколОбменаСМобильнымУстройством" Тогда
			
			Настройки.Вставить("ПодробныйПротоколОбмена", ЗначениеНастройки);
			
			Если ЗначениеНастройки = Истина Тогда
				
				ПротоколируемыеТипы = Новый Массив;
				ПротоколируемыеТипы.Добавить(МП_СлужебныйПовтИсп.ТипВходящееПисьмо());
				ПротоколируемыеТипы.Добавить(МП_СлужебныйПовтИсп.ТипИсходящееПисьмо());
				ПротоколируемыеТипы.Добавить(МП_СлужебныйПовтИсп.ТипЗадача());
				ПротоколируемыеТипы.Добавить(МП_СлужебныйПовтИсп.ТипКонтроль());
				ПротоколируемыеТипы.Добавить(МП_СлужебныйПовтИсп.ТипЗаписьКалендаря());
				ПротоколируемыеТипы.Добавить(МП_СлужебныйПовтИсп.ТипПроцессИсполнения());
				ПротоколируемыеТипы.Добавить(МП_СлужебныйПовтИсп.ТипМоеОтсутствие());
				
				Настройки.Вставить("ПротоколируемыеТипы", ПротоколируемыеТипы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

// Получает сведения о мобильном приложении
//
// Параметры:
//  МобильноеПриложение	 - Справочник.ПользователиМобильногоПриложения
// 
// Возвращаемое значение:
//  Структура - Кешированные сведения о мобильном приложении
//
Функция СведенияОМобильномПриложении(МобильноеПриложение) Экспорт
	
	Возврат РегистрыСведений.МП_СведенияОПользователях.ПолучитьСведения(МобильноеПриложение);

КонецФункции

// Получает папки синхронизации текущего пользователя
// Возвращаемое значение:
//  Массив - закешированный массив папок текущего пользователя
//
Функция ПапкиСинхронизацииТекущегоПользователя() Экспорт
	
	Возврат РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ПолучитьПапкиДляСинхронизации(
		ПользователиКлиентСервер.ТекущийПользователь());
		
КонецФункции

#КонецОбласти

#Область ВерификацияПользователяМобильногоПриложения

Функция ВходПользователюРазрешен(ОписаниеОшибкиВхода, ТекущийПользователь) Экспорт

	ОписаниеОшибкиВхода = НСтр("ru='Работа с мобильным приложением (офлайн) в настоящий момент не поддерживается.
		|Необходимо использовать мобильный клиент ""1С:Документооборот"" - доступен в AppStore и PlayMarket'");
	
	Возврат Ложь; 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеПриложения") Тогда
		
		ОписаниеОшибкиВхода = НСтр("ru='Работа с мобильными приложениями выключена.'");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтметкиВремени") Тогда
		
		ОписаниеОшибкиВхода = НСтр("ru='Для работы с данной версией мобильного приложения 
			|необходимо включить опцию ""Использовать отметки времени""'");
		
		Возврат Ложь;
		
	КонецЕсли;

	ПодключениеВозможно = ПроверитьВозможностьПодключенияМобильногоПриложения(ТекущийПользователь);
	
	Если Не ПодключениеВозможно Тогда
		
		ОписаниеОшибкиВхода = НСтр("ru='Вам не разрешен доступ к программе с использованием мобильного приложения. 
			|Обратитесь к администратору.'");
		
		Возврат Ложь;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Функция МобильноеПриложение(ОписаниеОшибкиВхода, ClientCode, ТекущийПользователь) Экспорт
	
	Если Не ЗначениеЗаполнено(ClientCode) Тогда
		ОписаниеОшибкиВхода = НСтр("ru='Неизвестное мобильное приложение, либо старая версия'");
		Возврат Неопределено;
	КонецЕсли;
	
	МобильноеПриложение =
		Справочники.ПользователиМобильногоПриложения.ПолучитьПриложение(ClientCode, ТекущийПользователь);
		
	Если Не ЗначениеЗаполнено(МобильноеПриложение) Тогда
		ОписаниеОшибкиВхода = НСтр("ru='Неизвестное мобильное приложение, либо старая версия.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МобильноеПриложение, "ПометкаУдаления") Тогда
		ОписаниеОшибкиВхода = НСтр("ru='Ваше устройство отключено. Дальнейшая синхронизация невозможна'");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МобильноеПриложение;
	
КонецФункции

// Проверяет возможность работы с мобильного приложения для текущего пользователя.
// Возвращает ложь / истину в зависимости от того добавлен пользовател в разрешенные мобильные 
//	пользователи или нет.
// Параметры
// 	Пользователь - ссылка на пользователя
Функция ПроверитьВозможностьПодключенияМобильногоПриложения(ТекущийПользователь) Экспорт

	Если Не РегистрыСведений.РазрешенныеМобильныеПользователи.ИспользованиеМобильногоКлиентаРазрешено(
		ТекущийПользователь) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

#КонецОбласти

#Область ТипыДанных
// Получает представление типа объекта для выгрузки
// Параметры:
//  ЭлементДанных - ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных
// 
// Возвращаемое значение:
//  Строка - тип объекта строкой подготовленный к выгрузке
//
Функция ТипПоСсылке(Ссылка) Экспорт
	
	ТипXML = XMLТипЗнч(Ссылка);
	
	Если ТипXML = Неопределено Или ТипXML.ИмяТипа = "Null" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТипа = СтрРазделить(ТипXML.ИмяТипа, ".")[1];
	
	Если ИмяТипа = "ВходящееПисьмо" Тогда
		Тип = ТипВходящееПисьмо();

	ИначеЕсли ИмяТипа = "ИсходящееПисьмо" Тогда
		Тип = ТипИсходящееПисьмо();

	ИначеЕсли ИмяТипа = "ЗаписиРабочегоКалендаря" Тогда
		Тип = ТипЗаписьКалендаря();

	ИначеЕсли ИмяТипа = "ЗадачаИсполнителя" Тогда
		Тип = ТипЗадача();

	ИначеЕсли ИмяТипа = "Контроль" Тогда
		Тип = ТипКонтроль();

	ИначеЕсли ИмяТипа = "Исполнение" Тогда
		Тип = ТипПроцессИсполнения();

	ИначеЕсли ИмяТипа = "УчетныеЗаписиЭлектроннойПочты" Тогда
		Тип = ТипУчетнаяЗаписьЭлектроннойПочты();

	ИначеЕсли ИмяТипа = "ПапкиПисем" Тогда
		Тип = ТипПапкаПисем();

	ИначеЕсли ИмяТипа = "Пользователи" Тогда
		Тип = ТипПользователь();

	ИначеЕсли ИмяТипа = "РолиИсполнителей" Тогда
		Тип = ТипРольИсполнителя();

	ИначеЕсли ИмяТипа = "Файлы" Тогда
		Тип = ТипФайл();

	ИначеЕсли ИмяТипа = "ВеткиПереписки" Тогда
		Тип = ТипВеткаПереписки();

	ИначеЕсли ИмяТипа = "АдресатыПочтовыхСообщений" Тогда
		Тип = ТипАдресат();
		
	ИначеЕсли ИмяТипа = "ШаблоныТекстов" Тогда
		Тип = ТипШаблонТекста();
		
	ИначеЕсли ИмяТипа = "Отсутствие" Тогда
		Тип = ТипМоеОтсутствие();
		
	ИначеЕсли ИмяТипа = "СамочувствиеСотрудника" Тогда
		Тип = ТипМоеСамочувствие();
		
	ИначеЕсли ИмяТипа = "ГрафикУчетаСамочувствияСотрудников" Тогда
		Тип = ТипВремяЗамера();
		
	ИначеЕсли ИмяТипа = "Мероприятия" Тогда
		Тип = ТипМероприятие();
		
	Иначе
		Тип = ТипПредметПроцесса();
	КонецЕсли;

	Возврат Тип;

КонецФункции

Функция ТипСсылкиПоТипуМобильного(ТипМобильного) Экспорт

	Если ТипМобильного = ТипВходящееПисьмо() Тогда 
		
		Возврат Тип("ДокументСсылка.ВходящееПисьмо");

	ИначеЕсли ТипМобильного = ТипИсходящееПисьмо() Тогда
		Возврат Тип("ДокументСсылка.ИсходящееПисьмо");

	ИначеЕсли ТипМобильного = ТипЗаписьКалендаря() Тогда
		Возврат Тип("СправочникСсылка.ЗаписиРабочегоКалендаря");

	ИначеЕсли ТипМобильного = ТипЗадача() Тогда
		Возврат Тип("ЗадачаСсылка.ЗадачаИсполнителя");

	ИначеЕсли ТипМобильного = ТипКонтроль() Тогда
		Возврат Тип("СправочникСсылка.Контроль");

	ИначеЕсли ТипМобильного = ТипПроцессИсполнения() Тогда
		Возврат Тип("БизнесПроцессСсылка.Исполнение");

	ИначеЕсли ТипМобильного = ТипУчетнаяЗаписьЭлектроннойПочты()Тогда
		Возврат Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты");

	ИначеЕсли ТипМобильного = ТипПапкаПисем() Тогда
		Возврат Тип("СправочникСсылка.ПапкиПисем");

	ИначеЕсли ТипМобильного = ТипПользователь() Тогда
		Возврат Тип("СправочникСсылка.Пользователи");

	ИначеЕсли ТипМобильного = ТипРольИсполнителя() Тогда
		Возврат Тип("СправочникСсылка.РолиИсполнителей");

	ИначеЕсли ТипМобильного = ТипФайл() Тогда
		Возврат Тип("СправочникСсылка.Файлы");

	ИначеЕсли ТипМобильного = ТипВеткаПереписки() Тогда
		Возврат Тип("СправочникСсылка.ВеткиПереписки");
		
	ИначеЕсли ТипМобильного = ТипАдресат() Тогда
		Возврат Тип("СправочникСсылка.АдресатыПочтовыхСообщений");
		
	ИначеЕсли ТипМобильного = ТипШаблонТекста() Тогда
		Возврат Тип("СправочникСсылка.ШаблоныТекстов");

	ИначеЕсли ТипМобильного = ТипМоеОтсутствие() Тогда
		Возврат Тип("ДокументСсылка.Отсутствие");
		
	ИначеЕсли ТипМобильного = ТипМоеСамочувствие() Тогда
		Возврат Тип("ДокументСсылка.СамочувствиеСотрудника");
			
	КонецЕсли;

КонецФункции

// Получает ссылку на объект указанного типа
//
// Параметры:
//  ТипМобильного		 - Строка - Описатель типа объекта
//  СтрокаИдентификатора - Строка, УникальныйИдентификатор - идентификатор объекта.
// 
// Возвращаемое значение:
//  Ссылка - ссылка на объект 
//
Функция СсылкаПоТипуИИД(ТипМобильного, СтрокаИдентификатора) Экспорт

	Если Не ЗначениеЗаполнено(ТипМобильного) Или Не ЗначениеЗаполнено(СтрокаИдентификатора) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(СтрокаИдентификатора) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора)
	ИначеЕсли ТипЗнч(СтрокаИдентификатора) = Тип("УникальныйИдентификатор") Тогда
		Идентификатор = СтрокаИдентификатора;
	КонецЕсли;

	Если Идентификатор = УникальныйИдентификаторПустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипМобильного = ТипРольИсполнителя() Тогда
		Возврат Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			Справочники.РолиИсполнителей.ПолучитьСсылку(Идентификатор),
			Неопределено,
			Неопределено)
	КонецЕсли;
	
	ТипСсылки = ТипСсылкиПоТипуМобильного(ТипМобильного);
	XMLТип = XMLТип(ТипСсылки);
	
	Если XMLТип = Неопределено Или XMLТип.ИмяТипа = "Null" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлассИТип = СтрРазделить(XMLТип.ИмяТипа, ".");
	Класс = КлассИТип[0];
	ИмяТипа = КлассИТип[1];
	
	Если СтрСравнить(Класс, "DocumentRef") = 0 Тогда
		
		Возврат Документы[ИмяТипа].ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(Класс, "CatalogRef") = 0 Тогда
		
		Возврат Справочники[ИмяТипа].ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(Класс, "TaskRef") = 0 Тогда
		
		Возврат Задачи[ИмяТипа].ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(Класс, "BusinessProcessRef") = 0 Тогда
		
		Возврат БизнесПроцессы[ИмяТипа].ПолучитьСсылку(Идентификатор);
		
	КонецЕсли;
	 
КонецФункции

Функция ТипСобытиеПротокола() Экспорт
	
	Возврат "LogRecord";
	
КонецФункции

Функция ТипПисьмо() Экспорт
	
	Возврат "Mail";
	
КонецФункции

Функция ТипПисьмоСодержимое() Экспорт
	
	Возврат "MailContent";
	
КонецФункции

Функция ТипПисьмоЗаголовки() Экспорт
	
	Возврат "MailHeaders";
	
КонецФункции

Функция ТипВходящееПисьмо() Экспорт
	
	Возврат "IncomingMail"
	
КонецФункции

Функция ТипИсходящееПисьмо() Экспорт
	
	Возврат "OutgoingMail"
	
КонецФункции

функция ТипЗадача() Экспорт
	возврат "Task"
КонецФункции

Функция ТипЗадачаЗаголовки() Экспорт
	
	Возврат "TaskHeaders";
	
КонецФункции

Функция ТипЗадачаСодержимое() Экспорт
	
	Возврат "TaskContent";
	
КонецФункции

Функция ТипПроцессИсполнения() Экспорт
	
	Возврат "ExecutionProcess";
	
КонецФункции

Функция ТипПроцессИсполненияЗаголовки() Экспорт
	
	Возврат "ExecutionProcessHeaders";
	
КонецФункции

Функция ТипПроцессИсполненияСодержимое() Экспорт
	
	Возврат "ExecutionProcessContent";
	
КонецФункции

Функция ТипЗаписьКалендаря() Экспорт
	
	Возврат "CalendarEvent";
	
КонецФункции

Функция ТипКонтроль() Экспорт
	
	Возврат "Control";
	
КонецФункции

Функция ТипУчетнаяЗаписьЭлектроннойПочты() Экспорт
	
	Возврат "MailAccount";
	
КонецФункции

Функция ТипПапкаПисем() Экспорт
	
	Возврат "MailFolder";
	
КонецФункции

Функция ТипПользователь() Экспорт
	
	Возврат "User";
	
КонецФункции

Функция ТипРольИсполнителя() Экспорт
	
	Возврат "Role";
	
КонецФункции

Функция ТипФайл() Экспорт
	
	Возврат "File";
	
КонецФункции

Функция ТипВеткаПереписки() Экспорт
	
	Возврат "MailThread";
	
КонецФункции

Функция ТипАдресат() Экспорт
	
	Возврат "Addressee";
	
КонецФункции

Функция ТипШаблонТекста() Экспорт
	
	Возврат "MailTextTemplate";
	
КонецФункции

Функция ТипПредметПроцесса() Экспорт
	
	Возврат "ActionTarget";
	
КонецФункции

Функция ТипИнформацияОКлиенте() Экспорт
	
	Возврат "ClientInfo";
	
КонецФункции

Функция ТипПодключениеНовогоУстройства() Экспорт
	
	Возврат "Connect";
	
КонецФункции

Функция ТипОтключениеУстройства() Экспорт
	
	Возврат "Disconnect";
	
КонецФункции

Функция ТипКлючеваяОперация() Экспорт
	
	Возврат "KeyOperation";
	
КонецФункции

Функция ТипНастройкиСинхронизации() Экспорт
	
	Возврат "SynchronizationSettings";

КонецФункции

Функция ТипМоеОтсутствие() Экспорт
	
	Возврат "MyAbsence";

КонецФункции

Функция ТипВидОтсутствия() Экспорт
	
	Возврат "TypeOfAbsence";
	
КонецФункции

Функция ТипыДанныхPUSH() Экспорт
	
	ПоддерживаемыеТипы = 
		Метаданные.РегистрыСведений.СообщенияPushУведомлений.Измерения.ОбъектУведомления.Тип.Типы();
	
	Возврат ПоддерживаемыеТипы;
	
КонецФункции

Функция ТипМоеСамочувствие() Экспорт
	
	Возврат "MyHealth";
	
КонецФункции

функция ТипВремяЗамера() Экспорт
	
	Возврат "MeasurementTime"
	
КонецФункции

функция ТипМероприятие() Экспорт
	
	Возврат "Event";
	
КонецФункции

Функция ТипСостояниеПриглашения() Экспорт
	
	Возврат "InvitationStatus";
	
КонецФункции

Функция ТипТрудозатраты() Экспорт
	
	Возврат "WorkTimeRecords";
	
КонецФункции

функция ТипВидРабот() Экспорт
	
	Возврат "KindOfWorks";
	
КонецФункции

Функция ТипЕжедневныйОтчет() Экспорт
	
	Возврат "DailyReport";
	
Конецфункции

Функция ТипЕженедельныйОтчет() Экспорт
	
	Возврат "WeeklyReport";
	
Конецфункции

функция ТипПроект() Экспорт
	
	Возврат "Project";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Получает флаг объекта по представлению идентификатора
//
// Параметры:
//  Представление - Строка -  Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ФлагиОбъектов - Значение перечисление полученное по идентификатору.
//
Функция ФлагПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "red") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Красный;

	ИначеЕсли СтрСравнить(Представление, "blue") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Синий;

	ИначеЕсли СтрСравнить(Представление, "yellow") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Желтый;

	ИначеЕсли СтрСравнить(Представление, "green") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Зеленый;

	ИначеЕсли СтрСравнить(Представление, "orange") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Оранжевый;

	ИначеЕсли СтрСравнить(Представление, "purple") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Лиловый;

	Иначе
		Флаг = Перечисления.ФлагиОбъектов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Флаг;
	
КонецФункции

//Возвращает возможность поддержки push оповещений
функция PUSHЧерезFCM() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат Число(СтрЗаменить(Лев(СистемнаяИнформация.ВерсияПриложения, 7), ".", "")) > 8312
	
КонецФункции

Функция ПустаяСтруктураОбъектаУведомления() Экспорт
	
	Возврат Новый Структура("Type, ID, Date");
	
КонецФункции

Функция ПустаяТаблицаЗаписейОТрудозатратах() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Пользователь");
	Таблица.Колонки.Добавить("ДатаДобавления");
	Таблица.Колонки.Добавить("НомерДобавления");
	
	Возврат Таблица;
	
КонецФункции


// Получает строковое представление идентификатора флага объекта для обмена
//
// Параметры:
//  Флаг - ПеречислениеСсылка.ФлагиОбъектов - значение флага.
// 
// Возвращаемое значение:
//  Строка - представление значение флага
//
Функция ПолучитьИдентификаторФлагаОбъекта(Флаг) Экспорт

	Если Флаг = Перечисления.ФлагиОбъектов.ПустаяСсылка() Тогда
		Возврат "none";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Желтый Тогда
		Возврат "yellow";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Зеленый Тогда
		Возврат "green";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Красный Тогда
		Возврат "red";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Лиловый Тогда
		Возврат "purple";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Оранжевый Тогда
		Возврат "orange";

	ИначеЕсли Флаг = Перечисления.ФлагиОбъектов.Синий Тогда
		Возврат "blue";

	КонецЕсли;

КонецФункции

// Получает флаг объекта по представлению идентификатора
//
// Параметры:
//  Представление - Строка -  Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ФлагиОбъектов - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьФлагПоПредставление(Представление) Экспорт

	Если СтрСравнить(Представление, "red") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Красный;

	ИначеЕсли СтрСравнить(Представление, "blue") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Синий;

	ИначеЕсли СтрСравнить(Представление, "yellow") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Желтый;

	ИначеЕсли СтрСравнить(Представление, "green") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Зеленый;

	ИначеЕсли СтрСравнить(Представление, "orange") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Оранжевый;

	ИначеЕсли СтрСравнить(Представление, "purple") = 0 Тогда
		Флаг = Перечисления.ФлагиОбъектов.Лиловый;

	Иначе
		Флаг = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;

КонецФункции


// Получает представление цвета по значению перечисления
//
// Параметры:
//  Цвет - Перечисления.ЦветаРабочегоКалендаря - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Строковое представление значения перечисления для обмена.
//
Функция ПолучитьПредставлениеЦвета(Цвет) Экспорт

	Если Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный Тогда
		Представление = "red";

	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий Тогда
		Представление = "blue";

	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый Тогда
		Представление = "yellow";

	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый Тогда
		Представление = "green";

	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый Тогда
		Представление = "orange";

	Иначе
		Представление = "none";

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Получает представление цвета по представлению идентификатора
//
// Параметры:
//  Представление - Строка -  Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ЦветаРабочегоКалендаря - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьЦветПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "red") = 0 Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный;

	ИначеЕсли СтрСравнить(Представление, "blue") = 0 Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий;

	ИначеЕсли СтрСравнить(Представление, "yellow") = 0 Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый;

	ИначеЕсли СтрСравнить(Представление, "green") = 0 Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый;

	ИначеЕсли СтрСравнить(Представление, "orange") = 0 Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый;

	Иначе
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;

	Возврат Цвет

КонецФункции


// Получает частоту использования по представлению идентификатора
//
// Параметры:
//  Представление - Строка -  Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ЧастотаПовторения - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьЧастотуПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "daily") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно;

	ИначеЕсли СтрСравнить(Представление, "weekly") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно;

	ИначеЕсли СтрСравнить(Представление, "monthly") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно;

	ИначеЕсли СтрСравнить(Представление, "yearly") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно;

	КонецЕсли;

	Возврат ЧастотаПовторения;

КонецФункции

// Получает представление цвета по значению перечисления
//
// Параметры:
//  ЧастотаПовторения - Перечисления.ЧастотаПовторения - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Строковое представление значения перечисления для обмена.
//
Функция ПолучитьПредставлениеЧастотыПовторений(ЧастотаПовторения) Экспорт

	Если ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно Тогда
		Представление = "daily";

	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		Представление = "weekly";

	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		Представление = "monthly";

	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		Представление = "yearly";

	КонецЕсли;

	Возврат Представление;

КонецФункции


// Получает представление цвета по значению перечисления
//
// Параметры:
//  Состояние - Перечисления.СостоянияЗаписейРабочегоКалендаря - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Строковое представление значения перечисления для обмена.
//
Функция ПолучитьПредставлениеСостоянияЗаписиРабочегоКалендаря(Состояние) Экспорт

	Если Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято Тогда
		Представление = "confirmed";

	ИначеЕсли Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		Представление = "cancelled";

	ИначеЕсли Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом Тогда
		Представление = "tentative";

	Иначе
		Представление = "tentative";

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Получает представление цвета по значению перечисления
//
// Параметры:
//  Представление - Строка - Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.СостоянияЗаписейРабочегоКалендаря - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьСостояниеЗаписиПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "confirmed") = 0 Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято;

	ИначеЕсли СтрСравнить(Представление, "cancelled") = 0 Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено;

	ИначеЕсли СтрСравнить(Представление, "tentative") = 0 Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;

	Иначе
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;

	КонецЕсли;

	Возврат Состояние;

КонецФункции


// Получает тип правила окончания повторения записи календаря по его представлению
//
// Параметры:
//  Представление - Строка - Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ПравилаОкончанияПовторения - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьПравилоОкончанияПовторенияПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "never") = 0 Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда;

	ИначеЕсли СтрСравнить(Представление, "byCount") = 0 Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов;

	ИначеЕсли СтрСравнить(Представление, "byDate") = 0 Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты;

	КонецЕсли;

	Возврат ПравилоОкончанияПовторения;

КонецФункции

// Получает представление правила окончания повторения записи календаря
//
// Параметры:
//  ПравилоОкончанияПовторения	 - Перечисления.ПравилаОкончанияПовторения - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Строковое представление значения перечисления для обмена.
//
Функция ПолучитьПредставлениеПравилаОкончанияПовторения(ПравилоОкончанияПовторения) Экспорт

	Если ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда Тогда
		Представление = "never";

	ИначеЕсли ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов Тогда
		Представление = "byCount";

	ИначеЕсли ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты Тогда
		Представление = "byDate";

	КонецЕсли;

	Возврат Представление;

КонецФункции


// Получает строковое представление важности задачи для обмена в формате DMX.
//
// Параметры:
//  Значение - ПеречислениеСсылка.ВариантыВажностиЗадачи - Важность задачи.
// 
// Возвращаемое значение:
//  Строка - Строковое представление значения перечисления для обмена.
//
Функция ПолучитьИдентификаторВажностиЗадачи(Значение) Экспорт
	
	Если Значение = Перечисления.ВариантыВажностиОбъектов.Низкая Тогда
		Важность = "low";
	ИначеЕсли Значение = Перечисления.ВариантыВажностиОбъектов.Высокая Тогда
		Важность = "high";
	Иначе
		Важность = "normal";
	КонецЕсли;
	
	Возврат Важность;

КонецФункции


// Получает тип записи календаря по его представлению
//
// Параметры:
//  Представление - Строка - Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ТипЗаписиКалендаря - Значение перечисление полученное по идентификатору.
//
Функция ПолучитьТипаЗаписиКалендаряПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "event") = 0 Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;

	ИначеЕсли СтрСравнить(Представление, "recurrence") = 0 Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие;

	ИначеЕсли СтрСравнить(Представление, "recurrenceException") = 0 Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия;

	Иначе
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;

	КонецЕсли;

	Возврат ТипЗаписиКалендаря;

КонецФункции

// Получает представление типа записи календаря
//
// Параметры:
//  ТипЗаписиКалендаря	 - Перечисления.ТипЗаписиКалендаря - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Идентификатор перечисления для обмена.
//
Функция ПолучитьПредставлениеТипаЗаписиКалендаря(ТипЗаписиКалендаря) Экспорт

	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие Тогда
		Представление = "event";

	ИначеЕсли ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		Представление = "recurrence";

	ИначеЕсли ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
		Представление = "recurrenceException";

	Иначе
		Представление = "event";

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Возвращает закешированный массив поддерживаемых типов ссылочных данных мобильного приложения
//
// Возвращаемое значение:
//  Массив - Массив поддерживаемых типов ссылочных данных
//
Функция ПоддерживаемыеТипыСсылочныхДанных() Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.МП_Ссылки.Тип.Типы(); 

КонецФункции

#КонецОбласти