
#Область ПрограммныйИнтерфейс

// HTMLПредставлениеСтрока файла.
// 
// Параметры:
//  Файл - СправочникССылка.Файлы
//  Параметры - Структура, см ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла()
//  ДокументPDF - ДокументPDF, Неопределено
//  ВыполняетсяРаспознавание - Булево - Возвращаемый параметр, означает что выполняется распознование.
// 
// Возвращаемое значение:
// - Строка - строка с html
// - Структура:
//    * Расшифровка - Строка
//    * Автопротокол - Строка
// - Структура:
//    * ПредставлениеФайла - Строка
//    * РаспознанныйТекст - Строка
//  - Структура:
//    * ДокументPDF - ДокументPDF
//    * РаспознанныйТекст - Строка
// 
Функция HTMLПредставлениеФайла(Файл, Параметры, ДокументPDF = Неопределено, ВыполняетсяРаспознавание = Ложь) Экспорт
	
	ПредставлениеHTMLФайла = "";
	ВыполняетсяРаспознавание = Ложь;
	
	Если Не Параметры.ОбновитьПредставление И Не Параметры.ИгнорироватьМаксРазмер Тогда
		ПредставлениеHTMLФайла = ОбзорФайловВызовСервера.ГотовоеHTMLПредставление(
			Файл, Параметры.ПредпросмотрУрезан, Параметры.Расширение, Параметры.МасштабироватьPDFИКартинки,
			Параметры.ВсегоПорцийПредпросмотра, Параметры.НомерПорции);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеHTMLФайла) Тогда
		
		КлючеваяОперация = "ПредпросмотрФайловПоказПредставления";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
		
		Возврат ПредставлениеHTMLФайла;
		
	КонецЕсли;
	
	ПоддерживаемыеТипы =
		ОбзорФайловКлиентСервер.ПоддерживаемыеТипыПредпросмотра();
	МассивРасширений = СтрРазделить(ПоддерживаемыеТипы, " ", Ложь);
	РасширениеПоддерживается = (МассивРасширений.Найти(Параметры.Расширение) <> Неопределено);
	
	Если Не РасширениеПоддерживается Тогда
		Возврат ОбзорФайловКлиентСервер.HTMLПредставлениеНеПоддерживаемыйФайл(
			Параметры.Расширение);
	КонецЕсли;
	
	ПредельныйРазмерДляПредпросмотра 
		= ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПредельныйРазмерДляПредпросмотра;
		
	ИгнорироватьМаксРазмер = Параметры.ИгнорироватьМаксРазмер;
		
	Если ОбзорФайловКлиентСервер.ЭтоФайлСПодготовкойНаКлиенте(Параметры.Расширение) 
		И Параметры.Размер <> 0 И Параметры.Размер > ПредельныйРазмерДляПредпросмотра / 1024
		И ИгнорироватьМаксРазмер <> Истина Тогда   // Размер - в кб
		
		Возврат ОбзорФайловКлиентСервер.HTMLПредставлениеПревышенРазмер(ПредельныйРазмерДляПредпросмотра);
		
	КонецЕсли;
	
	ПодготовкаНаСервере = ОбзорФайловКлиентСервер.ЭтоФайлСПодготовкойНаСервере(
		Параметры.Расширение);
		
	ИмяПараметраИспользоватьLibreOffice = "ОбзорФайловКлиент.ИспользоватьLibreOffice";
	Если ПараметрыПриложения[ИмяПараметраИспользоватьLibreOffice] = Неопределено Тогда
		
		Параметры.ИспользоватьLibreOffice = РаботаСФайламиКлиентПовтИсп.ИспользоватьLibreOffice();
		ПараметрыПриложения[ИмяПараметраИспользоватьLibreOffice] = Параметры.ИспользоватьLibreOffice;
		
	Иначе
		
		Параметры.ИспользоватьLibreOffice = ПараметрыПриложения[ИмяПараметраИспользоватьLibreOffice];
		
	КонецЕсли;	
		
		
	Если Не ПодготовкаНаСервере И Параметры.ИспользоватьLibreOffice Тогда
		
		МассивРасширений = СтрРазделить("doc docx odt xls xlsx", " ", Ложь);
		ПодготовкаНаСервере = (МассивРасширений.Найти(Параметры.Расширение) <> Неопределено);
		
	КонецЕсли;
	
	Если Не ПодготовкаНаСервере Тогда
		
		#Если ВебКлиент Тогда
			Если РасширениеПоддерживается Тогда
				Возврат ОбзорФайловКлиентСервер.HTMLПредставлениеЕщеНеСформировано();
			Иначе
				Возврат ОбзорФайловКлиентСервер.HTMLПредставлениеНеПоддерживаемыйФайл(
					Параметры.Расширение);
			КонецЕсли;
		#КонецЕсли
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если Не СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 
			И Не СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				
			Если Не РасширениеПоддерживается Тогда
				Возврат ОбзорФайловКлиентСервер.HTMLПредставлениеНеПоддерживаемыйФайл(
					Параметры.Расширение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторКлиента = "";
	Если Не ЗначениеЗаполнено(Параметры.ПредпросмотрОфисныхФайлов) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	КонецЕсли;
	
	ПредставлениеHTMLФайла = НовоеHTMLПредставление(
		Файл, Параметры.УникальныйИдентификатор,
		Параметры.Расширение,  
		Параметры,
		Параметры.ПредпросмотрОфисныхФайлов, ИдентификаторКлиента, 
		Параметры.ПредпросмотрУрезан,
		Параметры.МасштабироватьPDFИКартинки,
		ДокументPDF,
		ИгнорироватьМаксРазмер,
		ВыполняетсяРаспознавание,
		Параметры.ИспользоватьLibreOffice);
	
	КлючеваяОперация = "ПредпросмотрФайловПоказПредставления";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	Возврат ПредставлениеHTMLФайла;
	
КонецФункции

// HTMLПредставлениеСтрока не включена настройка.
//
// Возвращаемое значение:
//   Строка - HTMLПредставлениеСтрока не включена настройка
//
Функция HTMLПредставлениеНеВключенаНастройка()  Экспорт
	
	ТекстHTML = НСтр("ru = 'В персональных настройках (раздел Файлы)
		|отключена настройка ""Готовить предпросмотр для офисных файлов"".<br>'");
	
	Возврат ОбзорФайловКлиентСервер.СообщениеВПредпросмотр(ТекстHTML);
	
КонецФункции

// Это файл с долгой обработкой.
// 
// Параметры:
//  РасширениеФайла  - Строка
// 
// Возвращаемое значение:
//  Булево - Это файл с долгой обработкой
Функция ЭтоФайлСДолгойОбработкой(РасширениеФайла) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#КонецЕсли	 
	
	СисИнфо = Новый СистемнаяИнформация;
	Если Не СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
		И Не СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			
		Возврат Ложь;		
		
	КонецЕсли;		
	
	РасширениеФайла = НРег(РасширениеФайла);       
	Расширение = СтрЗаменить(РасширениеФайла, ".", "");
	
	Если Расширение = "pdf" Тогда
		
		ПоказыватьPdfСредствами1С = Ложь;
		ИмяПараметраПоказыватьPdfСредствами1С = "ОбзорФайловКлиент.ПоказыватьPdfСредствами1С";
		Если ПараметрыПриложения[ИмяПараметраПоказыватьPdfСредствами1С] = Неопределено Тогда
			
			ПоказыватьPdfСредствами1С = РаботаСФайламиСлужебныйКлиентПовтИсп.ПоказыватьPdfСредствами1С();
			ПараметрыПриложения[ИмяПараметраПоказыватьPdfСредствами1С] = ПоказыватьPdfСредствами1С;
			
		Иначе
			
			ПоказыватьPdfСредствами1С = ПараметрыПриложения[ИмяПараметраПоказыватьPdfСредствами1С];
			
		КонецЕсли;	
		
		Если ПоказыватьPdfСредствами1С Тогда
			Возврат Ложь;		// тут не нужно ожидание
		КонецЕсли;		
		
	КонецЕсли;	

	Возврат Расширение = "doc"
		Или Расширение = "docx"
		Или Расширение = "ppt"
		Или Расширение = "pptx"
		Или Расширение = "xls"
		Или Расширение = "xlsx"
		Или Расширение = "odt"
		Или Расширение = "odp"
		Или Расширение = "ods"
		Или Расширение = "pdf";
		
КонецФункции	

// Это файл офис
// 
// Параметры:
//  РасширениеФайла  - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоФайлОфис(РасширениеФайла) Экспорт
	
	РасширениеФайла = НРег(РасширениеФайла);

	Расширение = СтрЗаменить(РасширениеФайла, ".", "");
	Возврат Расширение = "doc"
		Или Расширение = "docx"
		Или Расширение = "ppt"
		Или Расширение = "pptx"
		Или Расширение = "xls"
		Или Расширение = "xlsx"
		Или Расширение = "odt"
		Или Расширение = "odp"
		Или Расширение = "ods";
		
КонецФункции

// Вырезает лишнее
//
// Параметры:
//   ТекстHTML - Строка
//   HTMLСтили - Строка
//   ВсеФайлыЛистов - Массив из Файл
//   ИмяФайла_tabstrip - Строка
//
Процедура ВырезатьЛишнееВHtmlИзXls(ТекстHTML, HTMLСтили, ВсеФайлыЛистов, ИмяФайла_tabstrip) Экспорт
	
	УдалитьТеги(ТекстHTML);
	Удалить_windowlocationreplace(ТекстHTML);
	ВставитьСтили(ТекстHTML, HTMLСтили);
	
	Если ВсеФайлыЛистов.Количество() > 1 Тогда
		
		ТекстДок_tabstrip = Новый ТекстовыйДокумент();
		ТекстДок_tabstrip.Прочитать(ИмяФайла_tabstrip);
		Текст_tabstrip = ТекстДок_tabstrip.ПолучитьТекст();
		
		МассивИменЛистов = ИменаЛистовXls(Текст_tabstrip);
		
		// вставим имя после начала body
		НомерЛиста = 0;
		Для Каждого ИмяЛиста Из МассивИменЛистов Цикл
			
			НомерЛиста = НомерЛиста + 1;
			
			Если НомерЛиста = 1 Тогда
				ДобавитьИмяЛиста(ТекстHTML, ИмяЛиста, НомерЛиста);
			Иначе	
				
				ФайлЛиста = ВсеФайлыЛистов[НомерЛиста-1];
				
				ДобавитьТелоИИмяЛиста(ТекстHTML, ИмяЛиста, НомерЛиста, ФайлЛиста);
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

// HTMLПредставлениеСтрока с долгой обработкой. Чтобы что то показать в превью, пока идет построение
//
// Возвращаемое значение:
//   Строка - HTML представление
//
Функция HTMLПредставлениеСДолгойОбработкой() Экспорт
	
	ТекстHTML = НСтр("ru = 'Подождите, загружаются данные для первого просмотра...<br>
		|В следующий раз вы увидите файл сразу.<br>'");
	
	Возврат ОбзорФайловКлиентСервер.СообщениеВПредпросмотр(ТекстHTML);
	
КонецФункции

// Запишет html для xls файла
// 
// Параметры:
//  Книга -COMОбъект 
//  ВременнаяПапка - Строка 
//  ПолныйПутьФайлаHTML- Строка- возвращаемый
//
Процедура HtmlКакФайлИзXls(Книга, ВременнаяПапка, ПолныйПутьФайлаHTML) Экспорт

	ПредставлениеHTMLФайла = HtmlИзXls(Книга, ВременнаяПапка);
	
	#Если Не ВебКлиент Тогда
		ЗаписьТекста = Новый ЗаписьТекста(ПолныйПутьФайлаHTML, "windows-1251");
		ЗаписьТекста.Записать(ПредставлениеHTMLФайла); 
		ЗаписьТекста.Закрыть();
		ЗаписьТекста = Неопределено;
	#КонецЕсли
			
КонецПроцедуры

// Заполняет реквизиты обзора на форме.
// 
// Параметры:
//  ДанныеОбзора - Строка
//               - Структура - с ключами "Расшифровка" и "Автопротокол". Содержит результат работы сервиса Таймлист.
//               - Структура - с ключами "ПредставлениеФайла" и "РаспознанныйТекст". Содержит результат сервиса
//                             распознавания документов.
//               - Структура - с ключами "ДокументPDF" и "РаспознанныйТекст". Содержит результат сервиса
//                             распознавания документов.
//  Представление - Строка
//  Автопротокол - Строка
//  РаспознанныйТекст - Строка
//
Процедура ЗаполнитьРеквизитыОбзора(ДанныеОбзора, Представление, Автопротокол = "",
	РаспознанныйТекст = "") Экспорт
	
	Если ТипЗнч(ДанныеОбзора) = Тип("Структура") Тогда
		Если ДанныеОбзора.Свойство("Расшифровка") Тогда
			Представление = ДанныеОбзора.Расшифровка;
			Автопротокол = ДанныеОбзора.АвтоПротокол;
			РаспознанныйТекст = "";
		ИначеЕсли ДанныеОбзора.Свойство("ПредставлениеФайла") Тогда
			Представление = ДанныеОбзора.ПредставлениеФайла;
			Автопротокол = "";
			РаспознанныйТекст = ДанныеОбзора.РаспознанныйТекст;
		ИначеЕсли ДанныеОбзора.Свойство("ДокументPDF") Тогда
			Представление = "";
			Автопротокол = "";
			РаспознанныйТекст = ДанныеОбзора.РаспознанныйТекст;
		КонецЕсли;
	Иначе
		Представление = ДанныеОбзора;
	КонецЕсли;
	
КонецПроцедуры

#Область ДинамическийСписок

// Обработчик события нажатия на кнопку динамического списка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой находится динамический список.
//   Команда - КомандаФормы - команда формы, имя которой соответствует нажатой кнопке.
//   ТекущаяСтраница - Число - номер текущей страницы.
//   ВсегоСтраниц - Число - максимальное количество страниц.
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, куда будет передан номер выбранной страницы.
//
Процедура ВыбратьСтраницуДинамическогоСписка(Форма, Команда, ТекущаяСтраница, ВсегоСтраниц, ОписаниеОповещения) Экспорт
	
	КнопкаСтраницы = Форма.Элементы[Команда.Имя];
	
	Если КнопкаСтраницы.Заголовок = "..." Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("ТекущаяСтраница", ТекущаяСтраница);
		Параметры.Вставить("ВсегоСтраниц", ВсегоСтраниц);
		Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		Оповещение = Новый ОписаниеОповещения("ВводСтраницыВручнуюЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВводЧисла(
			Оповещение,
			ТекущаяСтраница,
			НСтр("ru= 'Страница'"),
			СтрДлина(Формат(ВсегоСтраниц, "ЧГ=0")),
			0);
	Иначе
		НоваяСтраница = Число(КнопкаСтраницы.Заголовок);
		Если НоваяСтраница <> ТекущаяСтраница Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, НоваяСтраница);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

// Обработчик оповещения, вызываемый после ввода номера страницы пользователем.
//
// Параметры:
//   НоваяСтраница - Число - номер страницы, введенный пользователем.
//   Параметры - Структура:
//     * ТекущаяСтраница - Число - номер текущей страницы.
//     * ВсегоСтраниц - Число - максимальное количество страниц.
//     * ОписаниеОповещения - ОписаниеОповещения - описание оповещения, куда будет передан номер выбранной страницы.
//
Процедура ВводСтраницыВручнуюЗавершение(НоваяСтраница, Параметры) Экспорт
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтраница < 1 Тогда
		НоваяСтраница = 1;
	ИначеЕсли НоваяСтраница > Параметры.ВсегоСтраниц Тогда
		НоваяСтраница = Параметры.ВсегоСтраниц;
	КонецЕсли;
	
	Если НоваяСтраница = Параметры.ТекущаяСтраница Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, НоваяСтраница);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовоеHTMLПредставление(
	Файл, 
	УникальныйИдентификатор,
	Расширение,     
	Параметры,
	ПредпросмотрОфисныхФайлов = Неопределено, 
	ИдентификаторКлиента = Неопределено,
	ПредпросмотрУрезан = Ложь,
	МасштабироватьPDFИКартинки = Неопределено,
	ДокументPDF = Неопределено,
	ИгнорироватьМаксРазмер = Ложь,
	ВыполняетсяРаспознавание = Ложь,
	ИспользоватьLibreOffice = Ложь)
	
	ПредставлениеHTMLФайла = "";
	
	ЭтоТонкийКлиент = Ложь;

#Если ТонкийКлиент Тогда
	ЭтоТонкийКлиент = Истина;
#КонецЕсли
	
	ПодготовкаНаСервере = ОбзорФайловКлиентСервер.ЭтоФайлСПодготовкойНаСервере(
		Расширение);
	
	Если Не ЭтоТонкийКлиент И Не ПодготовкаНаСервере И Не ИспользоватьLibreOffice Тогда
		Возврат ПредставлениеHTMLФайла;
	КонецЕсли;
	
	ПараметрыПолученияПредставления = ОбзорФайловКлиентСервер.ПараметрыПолученияПредставления();
	
	ПараметрыПолученияПредставления.ТребуетсяСоздатьВизуализациюЭП = Ложь;
	ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра = Параметры.МаксимальноеЧислоСтраницДляПредпросмотра;
	ПараметрыПолученияПредставления.ПредпросмотрУрезан = Ложь;
	ПараметрыПолученияПредставления.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыПолученияПредставления.Расширение = Расширение;
	ПараметрыПолученияПредставления.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
	ПараметрыПолученияПредставления.ИдентификаторКлиента = ИдентификаторКлиента;
	ПараметрыПолученияПредставления.ПоддерживаемыеТипы =
		ОбзорФайловКлиентСервер.ПоддерживаемыеТипыПредпросмотра();
	ПараметрыПолученияПредставления.МасштабироватьPDFИКартинки = МасштабироватьPDFИКартинки;
	ПараметрыПолученияПредставления.ЭтоСлужебноеСообщение = Ложь;  
	ПараметрыПолученияПредставления.ИгнорироватьМаксРазмер = ИгнорироватьМаксРазмер;
	ПараметрыПолученияПредставления.ИспользоватьLibreOffice = ИспользоватьLibreOffice;
	ПараметрыПолученияПредставления.ЧислоСтраницДляПредпросмотраПорции = Параметры.ЧислоСтраницДляПредпросмотраПорции;
	ПараметрыПолученияПредставления.ВсегоПорцийПредпросмотра = Параметры.ВсегоПорцийПредпросмотра;
	
	РеквизитыФайла = Неопределено;
	ДанныеФайла = Неопределено;
	ТекстОшибки = "";
	
	ОбзорФайловВызовСервера.ЗаполнитьДанныеФайлаДляПредпросмотра(Файл, РеквизитыФайла, ДанныеФайла,
		ПараметрыПолученияПредставления, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	МассивHTMLСтрок = Новый Массив;
	ПредставлениеHTMLФайла = СформироватьHTMLПредставление(
		ПараметрыПолученияПредставления,
		РеквизитыФайла,
		ДанныеФайла,
		ПредпросмотрУрезан,
		ДокументPDF,
		ВыполняетсяРаспознавание,
		МассивHTMLСтрок);
	
#Если Не МобильныйКлиент Тогда
	ЭтоРасширениеПоддерживаемоеТаймлист = ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Расширение);
	Если ЗначениеЗаполнено(ПредставлениеHTMLФайла) И Не ПараметрыПолученияПредставления.ЭтоСлужебноеСообщение
		И Не ЭтоРасширениеПоддерживаемоеТаймлист
		И ДокументPDF = Неопределено Тогда
		
		Если МассивHTMLСтрок.Количество() = 0 Тогда
			
			ОбзорФайловВызовСервера.ЗаписатьВРегистр(Файл,
				ПредставлениеHTMLФайла,
				РеквизитыФайла.ТекущаяВерсия,
				ПредпросмотрУрезан);

		Иначе				
				
			Параметры.ВсегоПорцийПредпросмотра = МассивHTMLСтрок.Количество();
			
			ОбзорФайловВызовСервера.ЗаписатьВРегистрМассивПорцийПредпросмотра(Файл,
				МассивHTMLСтрок,
				РеквизитыФайла.ТекущаяВерсия,
				ПредпросмотрУрезан);
				
		КонецЕсли;	
			
	КонецЕсли;
#КонецЕсли
	
	Возврат ПредставлениеHTMLФайла;
	
КонецФункции
	
Функция СформироватьHTMLПредставление(
		ПараметрыПолученияПредставления,
		РеквизитыФайла,
		ДанныеФайла,
		ПредпросмотрУрезан,
		ДокументPDF,
		ВыполняетсяРаспознавание = Ложь,
		МассивHTMLСтрок = Неопределено) Экспорт
	
	КлючеваяОперация = "ПредпросмотрФайловСозданиеПредставления";
	ИдентификаторЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(
		КлючеваяОперация,, Ложь);
	
	ДанныеВизуализации = ОбзорФайловВызовСервера.РеквизитыФайлаИДанныеВизуализации(
		ПараметрыПолученияПредставления,
		РеквизитыФайла,
		ДанныеФайла,
		ВыполняетсяРаспознавание);
	
	ПредпросмотрУрезан = ПараметрыПолученияПредставления.ПредпросмотрУрезан;
	ПредпросмотрОфисныхФайлов = ПараметрыПолученияПредставления.ПредпросмотрОфисныхФайлов;
	Расширение = НРег(РеквизитыФайла.ТекущаяВерсияРасширение);
	УникальныйИдентификатор = ПараметрыПолученияПредставления.УникальныйИдентификатор;
	ИдентификаторКлиента = ПараметрыПолученияПредставления.ИдентификаторКлиента;
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(
		ИдентификаторЗамера, "Расширение: " + Расширение);
		
	Если РеквизитыФайла.Зашифрован Тогда
		ПредставлениеHTMLФайла = HTMLПредставлениеФайлЗашифрован();
		ПараметрыПолученияПредставления.ЭтоСлужебноеСообщение = Истина;
		Возврат ПредставлениеHTMLФайла;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеВизуализации) = Тип("Строка")
		Или ТипЗнч(ДанныеВизуализации) = Тип("Структура")
			И (ДанныеВизуализации.Свойство("Расшифровка") Или ДанныеВизуализации.Свойство("ПредставлениеФайла")) Тогда
		
		ПредставлениеHTMLФайла = ДанныеВизуализации;
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
		
		Возврат ПредставлениеHTMLФайла;
		
	КонецЕсли;
#Если Не МобильныйКлиент Тогда
	Если ТипЗнч(ДанныеВизуализации) = Тип("ДокументPDF") Тогда
		
		ДокументPDF = ДанныеВизуализации;
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
		
		Возврат "";
		
	ИначеЕсли ТипЗнч(ДанныеВизуализации) = Тип("Структура") И ДанныеВизуализации.Свойство("ДокументPDF") Тогда
		
		ДокументPDF = ДанныеВизуализации.ДокументPDF;
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
		
		Возврат ДанныеВизуализации;
		
	КонецЕсли;
	
#Иначе
	Если ТипЗнч(ДанныеВизуализации) = Тип("Структура") И ДанныеВизуализации.Свойство("СсылкаТекущейВерсии") Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеВизуализации);
		Возврат МК_КлиентПовтИсп.ПредставлениеHTMLОтсутствиеHTMLПредставления();
	КонецЕсли;
#КонецЕсли
	
#Если ТонкийКлиент Тогда
	
	Если ПараметрыПолученияПредставления.ТребуетсяСоздатьВизуализациюЭП Тогда
		
		Попытка
			// для doc файла заполним на клиенте - если не веб клиент
			РаботаСФайламиКлиент.СоздатьВизуализациюЭПВФайлеDocXls(
				ДанныеФайла, УникальныйИдентификатор);
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
			ОбзорФайловВызовСервера.ЗаписьЖурналаРегистрацииСервер(ОписаниеОшибки); 
			
			Возврат HTMLПредставлениеПриОшибке(ОписаниеОшибки);
			
		КонецПопытки;
		
		ДанныеВизуализации = ОбзорФайловВызовСервера.ДвоичныеДанные(ДанныеФайла);
		Расширение = ДанныеФайла.Расширение;
		РеквизитыФайла.ТекущаяВерсияРасширение = ДанныеФайла.Расширение;
		
		Если ОбзорФайловКлиентСервер.ЭтоФайлСПодготовкойНаСервере(Расширение) Тогда
			
			ПараметрыПолученияПредставления.Расширение = Расширение;
			
			ДанныеВизуализации = ОбзорФайловВызовСервера.РеквизитыФайлаИДанныеВизуализации(
				ПараметрыПолученияПредставления,
				РеквизитыФайла,
				ДанныеФайла);
			
			ПредпросмотрУрезан = ПараметрыПолученияПредставления.ПредпросмотрУрезан;
			ПредпросмотрОфисныхФайлов = ПараметрыПолученияПредставления.ПредпросмотрОфисныхФайлов;
			Расширение = НРег(РеквизитыФайла.ТекущаяВерсияРасширение);
				
			Если ОбзорФайловКлиентСервер.ЭтоФайлСПодготовкойНаСервере(Расширение)
				И ТипЗнч(ДанныеВизуализации) = Тип("Строка") Тогда
				
				ПредставлениеHTMLФайла = ДанныеВизуализации;
				ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
				Возврат ПредставлениеHTMLФайла;
				
			КонецЕсли;
			
			Если ОбзорФайловКлиентСервер.ЭтоФайлСПодготовкойНаСервере(Расширение)
				И ТипЗнч(ДанныеВизуализации) = Тип("ДокументPDF") Тогда
				
				ДокументPDF = ДанныеВизуализации;
				
				ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
				
				Возврат "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РасширениеФайла = НРег(РеквизитыФайла.ТекущаяВерсияРасширение);
		
	Если ДанныеВизуализации = Неопределено Тогда
		
		ПредставлениеHTMLФайла = ОбзорФайловКлиентСервер.HTMLПредставлениеНеПоддерживаемыйФайл(
			РасширениеФайла,
			ПараметрыПолученияПредставления.РасширениеОригинальное);
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
		ПараметрыПолученияПредставления.ЭтоСлужебноеСообщение = Истина;
		Возврат ПредставлениеHTMLФайла;
	КонецЕсли;	
	
	Если ЭтоФайлОфис(РасширениеФайла) 
		И ПредпросмотрОфисныхФайлов = ПредопределенноеЗначение("Перечисление.ПредпросмотрОфисныхФайлов.НеИспользовать") Тогда
			
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
		ПараметрыПолученияПредставления.ЭтоСлужебноеСообщение = Истина;
		Возврат HTMLПредставлениеНеВключенаНастройка();
		
	КонецЕсли;	
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если Не СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 
		И Не СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64
		И ЭтоФайлОфис(РасширениеФайла)  Тогда
		Возврат ОбзорФайловКлиентСервер.HTMLПредставлениеЕщеНеСформировано();
	КонецЕсли;	
	
	ОткрытьMSOffice = Ложь;
	ОткрытьOpenOffice = Ложь;
	ОткрытьР7Builder = Ложь;
	
	Если ЭтоWord(РасширениеФайла) Или ЭтоPowerPoint(РасширениеФайла) Или ЭтоExcel(РасширениеФайла) Тогда
		
		Если ПредпросмотрОфисныхФайлов = ПредопределенноеЗначение("Перечисление.ПредпросмотрОфисныхФайлов.MSOffice")
			Или ПредпросмотрОфисныхФайлов = ПредопределенноеЗначение("Перечисление.ПредпросмотрОфисныхФайлов.OpenOfficeMSOffice") Тогда
			ОткрытьMSOffice = Истина;
		КонецЕсли;
		
		Если ПредпросмотрОфисныхФайлов = ПредопределенноеЗначение("Перечисление.ПредпросмотрОфисныхФайлов.OpenOffice") Тогда
			ОткрытьOpenOffice = Истина;
		КонецЕсли;

		Если ПредпросмотрОфисныхФайлов = ПредопределенноеЗначение("Перечисление.ПредпросмотрОфисныхФайлов.Р7Builder") Тогда
			ОткрытьР7Builder = Истина;
		КонецЕсли;
		
	КонецЕсли;	

	Если ЭтоOpenOffice(РасширениеФайла) Или ЭтоOpenOfficeImpress(РасширениеФайла) 
		Или ЭтоOpenOfficeCalc(РасширениеФайла) Тогда
		
		Если ПредпросмотрОфисныхФайлов = ПредопределенноеЗначение("Перечисление.ПредпросмотрОфисныхФайлов.OpenOffice")
			Или ПредпросмотрОфисныхФайлов = ПредопределенноеЗначение("Перечисление.ПредпросмотрОфисныхФайлов.OpenOfficeMSOffice") Тогда
			ОткрытьOpenOffice = Истина;
		КонецЕсли;
		
		Если ПредпросмотрОфисныхФайлов = ПредопределенноеЗначение("Перечисление.ПредпросмотрОфисныхФайлов.MSOffice") Тогда
			ОткрытьMSOffice = Истина;
		КонецЕсли;

		Если ПредпросмотрОфисныхФайлов = ПредопределенноеЗначение("Перечисление.ПредпросмотрОфисныхФайлов.Р7Builder") Тогда
			ОткрытьР7Builder = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением("file1", РасширениеФайла);
	ВременнаяПапка = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапка);
	ИмяФайлаСПутем = ВременнаяПапка + ИмяФайла;
	ДанныеВизуализации.Записать(ИмяФайлаСПутем);
	
	МассивФайловHtml = Новый Массив;
	
	Word = Неопределено;
	PowerPoint = Неопределено;
	Excel = Неопределено;      
	Builder = Неопределено;      

	Попытка
		
		Если ОткрытьMSOffice И (ЭтоWord(РасширениеФайла) Или ЭтоOpenOffice(РасширениеФайла)) Тогда
			
			Попытка
				Word = Новый COMОбъект("Word.Application");
			Исключение
				ОбзорФайловВызовСервера.УдалитьИзНастроек(
					ИдентификаторКлиента, ПредпросмотрОфисныхФайлов, "MSOffice");
				ВызватьИсключение; 
			КонецПопытки;	
			
			Word.WordBasic.DisableAutoMacros(1);
			
			Word.Visible = Ложь;
			
			Build = Word.Build;
			
			Если Найти(Build, "11.") = 1 // word 2003
				И РасширениеФайла = "docx" Тогда
				ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
				
				Word.Quit();
				Word = Неопределено;
					
				Возврат ""; // не делаем, т.к. без плагина 2003 Ворд не откроет docx	
			КонецЕсли;		
			
			Документ = Word.Documents.Open(ИмяФайлаСПутем);
			Word.ActiveWindow.ActivePane.View.Type = 3; // wdPrintView = 3
			
			Word.ActiveWindow.ActivePane.View.Type = 3; // wdPrintView = 3
			wdStatisticPages = 2;
			ЧислоСтраниц = Документ.ComputeStatistics(wdStatisticPages);
			
			ИмяФайлаСПутемHTML = ВременнаяПапка + "doc1" + ".htm";      
			
			ПредпросмотрПолностью = (ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра = 0);
			ЧислоСтраницДляПредпросмотраПорции 
				= СогласованиеВРежимеЗамечанийКлиентСерверПереопределяемый.ЧислоСтраницДляПредпросмотраПорции();
				
			// либо ПредпросмотрПолностью Ложь   (старый вариант) и страниц мало
			// либо ПредпросмотрПолностью Истина (новый вариант)  и страниц мало
			Если (Не ПредпросмотрПолностью И ЧислоСтраниц <= ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра)
				Или (ПредпросмотрПолностью И ЧислоСтраниц <= ЧислоСтраницДляПредпросмотраПорции) Тогда
				
				Попытка
					Документ.SaveAs(ИмяФайлаСПутемHTML , 10); // wdFormatFilteredHTML = 10
					Документ.Close();   
				Исключение     
					
					Инфо = ИнформацияОбОшибке();
					ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
					
					Если СтрНайти(ОписаниеОшибки, "Сбой сохранения из-за недостатка памяти или места на диске") <> 0 Тогда
						
						Документ.SaveAs(ИмяФайлаСПутемHTML , 8); // wdFormatHTML = 8
						Документ.Close();   
						
					Иначе	
						ВызватьИсключение;
					КонецЕсли;	
					
				КонецПопытки;      
				
			ИначеЕсли ПредпросмотрПолностью Тогда  // ПредпросмотрПолностью Истина (новый вариант) и страниц МНОГО
				
				ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
				
				КлючеваяОперация = "ПредпросмотрФайловСозданиеПредставленияПорционное";
				ИдентификаторЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(
					КлючеваяОперация,, Ложь);
				
				СтраницДробно = ЧислоСтраниц / ЧислоСтраницДляПредпросмотраПорции;
				СтраницЦелое = Цел(СтраницДробно);
				
				ЧислоПорций = СтраницЦелое;
				Если СтраницДробно - СтраницЦелое <> 0 Тогда
					ЧислоПорций = ЧислоПорций + 1;
				КонецЕсли;	
				
				ИмяФайлаСПутемHTML = "";
				
				Для НомерПорции = 0 По ЧислоПорций -1 Цикл        
					
					ВременнаяПапкаПорции = ВременнаяПапка;
					ВременнаяПапкаПорции = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапкаПорции);
					ВременнаяПапкаПорции = ВременнаяПапкаПорции + "doc" + Строка(НомерПорции);
					ВременнаяПапкаПорции = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапкаПорции);
					СоздатьКаталог(ВременнаяПапкаПорции);
					
					ИмяФайлаСПутемHTMLТекущее = ВременнаяПапкаПорции + "doc" + Строка(НомерПорции) + ".htm";  
					
					НомерСтраницыНачало = НомерПорции * ЧислоСтраницДляПредпросмотраПорции + 1;
					
					Направление = 1; // wdGoToAbsolute;
					Направление2 = 1; // wdGoToAbsolute;    
					
					ТипЭлемента1 = 1; // wdGoToPage 
					ТипЭлемента2 = 1; // wdGoToPage 
					
					ЭтоПоследняяСтраница = Ложь;
					Если НомерПорции = ЧислоПорций -1 Тогда       
						
						НомерСтраницыКонец  = ЧислоСтраниц + 1;
						ЭтоПоследняяСтраница = Истина;  
						
					Иначе
						НомерСтраницыКонец  = (НомерПорции +1)* ЧислоСтраницДляПредпросмотраПорции + 1;
					КонецЕсли;	
					
					// wdGoToPage 1.  wdGoToAbsolute 1.   1 - номер страницы
					Range1 = Документ.GoTo(ТипЭлемента1, Направление,  НомерСтраницыНачало);
					Range2 = Документ.GoTo(ТипЭлемента2, Направление2, НомерСтраницыКонец);
					
					Если ЭтоПоследняяСтраница Тогда
						Range2.End = Документ.Content.End;
					КонецЕсли;	
					
					RangeAll = Документ.Range(Range1.Start, Range2.End);
					RangeAll.Copy();
					
					tmpDoc = Word.Documents.Add(,,,Ложь); // видимость = Ложь
					tmpDoc.Range().Paste();
					
					tmpDoc.SaveAs(ИмяФайлаСПутемHTMLТекущее , 10); // wdFormatFilteredHTML = 10	
					tmpDoc.Close(); 	
					
					МассивФайловHtml.Добавить(ИмяФайлаСПутемHTMLТекущее);
				
				КонецЦикла;
				
				Документ.Paragraphs(1).Range.Copy(); // чтобы в буфере не было много
					
				Документ.Close();	
				
			Иначе // ПредпросмотрПолностью  Ложь - покажем первые 10
				
				ПредпросмотрУрезан = Истина;
				
				// wdGoToPage 1  wdGoToAbsolute 1   1 - номер страницы
				Range1 = Документ.GoTo(1, 1, 1);
				Range2 = Документ.GoTo(1, 1, ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра + 1);
				
				RangeAll = Документ.Range(Range1.Start, Range2.End);
				RangeAll.Copy();
				
				tmpDoc = Word.Documents.Add(,,,Ложь); // видимость = Ложь
				tmpDoc.Range().Paste();
				
				tmpDoc.SaveAs(ИмяФайлаСПутемHTML , 10); // wdFormatFilteredHTML = 10	
				tmpDoc.Close(); 					
					
				Документ.Close();	
					
			КонецЕсли;
			
			Word.Quit();
			Word = Неопределено;       
			
		ИначеЕсли ОткрытьР7Builder И (ЭтоWord(РасширениеФайла) Или ЭтоOpenOffice(РасширениеФайла)) Тогда	
			
			ИмяФайлаСПутемHTML = ВременнаяПапка + "doc1" + ".htm";
			
			Builder = Новый COMОбъект("R7.Builder");
			Builder.Initialize();

			Builder.OpenFile(ИмяФайлаСПутем, "");      
			
			Builder.SaveFile("html", ИмяФайлаСПутемHTML);
			
			
			Builder.CloseFile();
			Builder = 0;
			
		ИначеЕсли ОткрытьOpenOffice И (ЭтоWord(РасширениеФайла) Или ЭтоOpenOffice(РасширениеФайла)) Тогда
			
			ИмяФайлаСПутемКороткое = ВременнаяПапка + "oo" + РасширениеФайла;
			ИмяФайлаСПутемHTML = ВременнаяПапка + "oo" + ".html";
			КопироватьФайл(ИмяФайлаСПутем, ИмяФайлаСПутемКороткое);
			
			// Открыть OpenOffice
			
			Попытка
				ОбъектServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
			Исключение
				ОбзорФайловВызовСервера.УдалитьИзНастроек(
					ИдентификаторКлиента, ПредпросмотрОфисныхФайлов, "OpenOffice");
				ВызватьИсключение; 
			КонецПопытки;	
			
			ИнстансDesktop = ОбъектServiceManager.createInstance("com.sun.star.frame.Desktop");

			// Параметры открытия: отключение исполнения макросов.
			ПараметрыДокумента = Новый COMSafeArray("VT_VARIANT", 2);
			
			РежимЗапуска = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
				"MacroExecutionMode",
				0); // const short NEVER_EXECUTE = 0
			ПараметрыДокумента.SetValue(0, РежимЗапуска);
		
			Hidden = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
				"Hidden",
				Истина); //  true
			ПараметрыДокумента.SetValue(1, Hidden);
			
			
			// Открыть документ OpenOffice.
			Document = ИнстансDesktop.loadComponentFromURL(ПреобразоватьВURL(ИмяФайлаСПутем), 
				"_blank", 0, ПараметрыДокумента);
			
			ПараметрыСохранения = Новый COMSafeArray("VT_VARIANT", 1);
			FilterName = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
				"FilterName",
				"HTML (StarWriter)");
			ПараметрыСохранения.SetValue(0, FilterName);
			
			Document.storeToURL(ПреобразоватьВURL(ИмяФайлаСПутемHTML), ПараметрыСохранения);
			
			Document.close(-1);        //Закрыть документ без сохранения
			
		 	Document     = Неопределено;
		    ИнстансDesktop     = Неопределено;	
		    ОбъектServiceManager = Неопределено;

		ИначеЕсли ОткрытьOpenOffice И (ЭтоExcel(РасширениеФайла) Или ЭтоOpenOfficeCalc(РасширениеФайла)) Тогда
			
			ИмяФайлаСПутемКороткое = ВременнаяПапка + "oo" + РасширениеФайла;
			ИмяФайлаСПутемHTML = ВременнаяПапка + "oo" + ".html";
			КопироватьФайл(ИмяФайлаСПутем, ИмяФайлаСПутемКороткое);
			
			// Открыть OpenOffice
			
			Попытка
				ОбъектServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
			Исключение
				ОбзорФайловВызовСервера.УдалитьИзНастроек(
					ИдентификаторКлиента, ПредпросмотрОфисныхФайлов, "OpenOffice");
				ВызватьИсключение; 
			КонецПопытки;	
			
			ИнстансDesktop = ОбъектServiceManager.createInstance("com.sun.star.frame.Desktop");

			// Параметры открытия: отключение исполнения макросов.
			ПараметрыДокумента = Новый COMSafeArray("VT_VARIANT", 2);
			
			РежимЗапуска = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
				"MacroExecutionMode",
				0); // const short NEVER_EXECUTE = 0
			ПараметрыДокумента.SetValue(0, РежимЗапуска);
		
			Hidden = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
				"Hidden",
				Истина); //  true
			ПараметрыДокумента.SetValue(1, Hidden);
			
			
			// Открыть документ OpenOffice.
			Document = ИнстансDesktop.loadComponentFromURL(ПреобразоватьВURL(ИмяФайлаСПутем), 
				"_blank", 0, ПараметрыДокумента);
				
			ПараметрыСохранения = Новый COMSafeArray("VT_VARIANT", 1);
			FilterName = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
				"FilterName",
				"HTML (StarCalc)");
			ПараметрыСохранения.SetValue(0, FilterName);
			
			Document.storeToURL(ПреобразоватьВURL(ИмяФайлаСПутемHTML), ПараметрыСохранения);
			
			Document.close(-1);        //Закрыть документ без сохранения
			
		 	Document     = Неопределено;
		    ИнстансDesktop     = Неопределено;	
		    ОбъектServiceManager = Неопределено;
			
		ИначеЕсли ОткрытьMSOffice И (ЭтоPowerPoint(РасширениеФайла) Или ЭтоOpenOfficeImpress(РасширениеФайла)) Тогда
			
			Попытка
				PowerPoint = Новый COMОбъект("PowerPoint.Application");
			Исключение
				ОбзорФайловВызовСервера.УдалитьИзНастроек(
					ИдентификаторКлиента, ПредпросмотрОфисныхФайлов, "MSOffice");
				ВызватьИсключение; 
			КонецПопытки;	
			
			ИмяКаталогаКартинок = ВременнаяПапка + РеквизитыФайла.Наименование;
			ИмяФайлаДляPpt  = ИмяКаталогаКартинок + ".html";
			
			Документ = PowerPoint.Presentations.Open(ИмяФайлаСПутем,,,0); // 0  - msoFalse
			
			Документ.SaveAs(ИмяФайлаДляPpt , 18); // ppSaveAsPNG = 18
			
			Документ.Close();
			
			Картинки = ОбзорФайловКлиентСервер.Картинки(ИмяКаталогаКартинок);
			МассивПутей = Новый Массив;
			СортироватьМассивПоЧислам(Картинки, МассивПутей);
			
			ПредставлениеHTMLФайла = "<!DOCTYPE html>
						|<html>
						|<body>
						|<table width=100%>";
			
			НомерСтраницы = 0;
			Для Каждого КартинкаПолноеИмя Из МассивПутей Цикл
			
				ДвоичныеДанные = Новый ДвоичныеДанные(КартинкаПолноеИмя);
				ЗашифрованныеДанные = Base64Строка(ДвоичныеДанные);
				
				ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла +
					"<tr><td width=100%>"
					+ "<img width=100% src=""data:image/" + "png" + ";base64," 
					+ ЗашифрованныеДанные + """>"
					+ "</td></tr>" 
					+ Символы.ПС;
					
				// номер страницы
				ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла +
					"<tr><td>"
					+ Строка(НомерСтраницы + 1) 
					+ "</td></tr>" 
					+ Символы.ПС;
					
				НомерСтраницы = НомерСтраницы + 1;	
				Если НомерСтраницы >= ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра Тогда
					ПредпросмотрУрезан = Истина;
					Прервать;
				КонецЕсли;		
				
			КонецЦикла;	
			
			ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла + 
						"</table>
						|</body>
						|</html>";
						
			PowerPoint = Неопределено;
						
		ИначеЕсли ОткрытьOpenOffice И (ЭтоPowerPoint(РасширениеФайла) Или ЭтоOpenOfficeImpress(РасширениеФайла)) Тогда
							
			ИмяФайлаСПутемHTMLВременное = ВременнаяПапка + "oo" + ".html";
			
			// Открыть OpenOffice
			
			Попытка
				ОбъектServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
			Исключение
				ОбзорФайловВызовСервера.УдалитьИзНастроек(
					ИдентификаторКлиента, ПредпросмотрОфисныхФайлов, "OpenOffice");
				ВызватьИсключение; 
			КонецПопытки;	
			
			ИнстансDesktop = ОбъектServiceManager.createInstance("com.sun.star.frame.Desktop");

			// Параметры открытия: отключение исполнения макросов.
			ПараметрыДокумента = Новый COMSafeArray("VT_VARIANT", 2);
			
			РежимЗапуска = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
				"MacroExecutionMode",
				0); // const short NEVER_EXECUTE = 0
			ПараметрыДокумента.SetValue(0, РежимЗапуска);
		
			Hidden = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
				"Hidden",
				Истина); //  true
			ПараметрыДокумента.SetValue(1, Hidden);
			
			
			// Открыть документ OpenOffice.
			Document = ИнстансDesktop.loadComponentFromURL(ПреобразоватьВURL(ИмяФайлаСПутем), 
				"_blank", 0, ПараметрыДокумента);
				
			ПараметрыСохранения = Новый COMSafeArray("VT_VARIANT", 1);
			FilterName = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
				"FilterName",
				"impress_html_Export");
			ПараметрыСохранения.SetValue(0, FilterName);
			
			Document.storeToURL(ПреобразоватьВURL(ИмяФайлаСПутемHTMLВременное), ПараметрыСохранения);
			
			Document.close(-1);        //Закрыть документ без сохранения
			
		 	Document     = Неопределено;
		    ИнстансDesktop     = Неопределено;	
		    ОбъектServiceManager = Неопределено;
		    
		    // возьмем только картинки.
		    ИмяКаталогаКартинок = ВременнаяПапка;
		    
			Картинки = ОбзорФайловКлиентСервер.Картинки(ИмяКаталогаКартинок);
			МассивПутей = Новый Массив;
			СортироватьМассивПоЧислам(Картинки, МассивПутей); 
			
			Если МассивПутей.Количество() = 0 Тогда
				
				ИмяФайлаСПутемHTML = ИмяФайлаСПутемHTMLВременное;
				
			Иначе	
			
				ПредставлениеHTMLФайла = "<!DOCTYPE html>
							|<html>
							|<body>
							|<table width=100%>";
				
				НомерСтраницы = 0;
				Для Каждого КартинкаПолноеИмя Из МассивПутей Цикл
				
					ДвоичныеДанные = Новый ДвоичныеДанные(КартинкаПолноеИмя);
					ЗашифрованныеДанные = Base64Строка(ДвоичныеДанные);
					
					ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла +
						"<tr><td width=100%>"
						+ "<img width=100% src=""data:image/" + "png" + ";base64," 
						+ ЗашифрованныеДанные + """>"
						+ "</td></tr>" 
						+ Символы.ПС;
						
					// номер страницы
					ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла +
						"<tr><td>"
						+ Строка(НомерСтраницы + 1) 
						+ "</td></tr>" 
						+ Символы.ПС;
						
					НомерСтраницы = НомерСтраницы + 1;	
					Если НомерСтраницы >= ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра Тогда
						ПредпросмотрУрезан = Истина;
						Прервать;
					КонецЕсли;		
					
				КонецЦикла;	
			
				ПредставлениеHTMLФайла =  ПредставлениеHTMLФайла + 
							"</table>
							|</body>
							|</html>";

			КонецЕсли;
			
		ИначеЕсли ОткрытьMSOffice И (ЭтоExcel(РасширениеФайла) Или ЭтоOpenOfficeCalc(РасширениеФайла)) Тогда
			
			Попытка
				Excel = Новый COMОбъект("Excel.Application");
			Исключение
				ОбзорФайловВызовСервера.УдалитьИзНастроек(
					ИдентификаторКлиента, ПредпросмотрОфисныхФайлов, "MSOffice");
				ВызватьИсключение; 
			КонецПопытки;	
			
			Excel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
			Excel.Visible = Ложь;
			Книга = Excel.WorkBooks.Open(ИмяФайлаСПутем);
			
			ПредставлениеHTMLФайла = HtmlИзXls(Книга, ВременнаяПапка);
			
			Excel.Quit();
			Excel = Неопределено;
			
		КонецЕсли;
	
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
		ОбзорФайловВызовСервера.ЗаписьЖурналаРегистрацииСервер(ОписаниеОшибки);
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
		ПараметрыПолученияПредставления.ЭтоСлужебноеСообщение = Истина;
		
		Если Word <> Неопределено Тогда
			Word.Quit();
			Word = Неопределено;
		КонецЕсли;	

		Если PowerPoint <> Неопределено Тогда
			PowerPoint.Quit();
			PowerPoint = Неопределено;
		КонецЕсли;	

		Если Excel <> Неопределено Тогда
			Excel.Quit();
			Excel = Неопределено;
		КонецЕсли;	

		Если Builder <> Неопределено Тогда				
			Builder.CloseFile();
			Builder = Неопределено;           
		КонецЕсли;	
		
		Возврат HTMLПредставлениеПриОшибке(ОписаниеОшибки);
		
	КонецПопытки;

		
	Если ЗначениеЗаполнено(ИмяФайлаСПутемHTML) Тогда
		
		ТекстHTML = Новый ТекстовыйДокумент();
		ТекстHTML.Прочитать(ИмяФайлаСПутемHTML);
		ТекстИзфайла = ТекстHTML.ПолучитьТекст();

		ТекстHtmlНРег = НРег(ТекстИзфайла);
		
		Если СтрНайти(ТекстHtmlНРег, "charset=utf-8") <> 0 
			Или СтрНайти(ТекстHtmlНРег, "charset=""utf-8""") <> 0 Тогда
			
			ТекстHTML = Новый ТекстовыйДокумент();
			ТекстHTML.Прочитать(ИмяФайлаСПутемHTML, "UTF-8");
			ТекстИзфайла = ТекстHTML.ПолучитьТекст();
			
		КонецЕсли;	
		
		ТекстИзфайла = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ТекстИзфайла);
		СогласованиеВРежимеЗамечанийHTMLСервер.КорректироватьОтрицательныеОтступыСлева_Выполнить(
			ТекстИзфайла);
		
		ТекстHTMLСКартинками = ОбзорФайловКлиентСервер.HTMLСКартинками(
			ТекстИзфайла,
			РеквизитыФайла.Наименование, 
			ВременнаяПапка);
		ПредставлениеHTMLФайла = ТекстHTMLСКартинками;
		
	ИначеЕсли МассивФайловHtml.Количество() <> 0 Тогда 
		
		ЭтоПерваяПорция = Истина;
		
		Для Каждого ИмяФайлаСПутемHTML Из МассивФайловHtml Цикл
			
			ТекстHTML = Новый ТекстовыйДокумент();
			ТекстHTML.Прочитать(ИмяФайлаСПутемHTML);
			ТекстИзфайла = ТекстHTML.ПолучитьТекст();

			ТекстHtmlНРег = НРег(ТекстИзфайла);
			
			Если СтрНайти(ТекстHtmlНРег, "charset=utf-8") <> 0 
				Или СтрНайти(ТекстHtmlНРег, "charset=""utf-8""") <> 0 Тогда
				
				ТекстHTML = Новый ТекстовыйДокумент();
				ТекстHTML.Прочитать(ИмяФайлаСПутемHTML, "UTF-8");
				ТекстИзфайла = ТекстHTML.ПолучитьТекст();
				
			КонецЕсли;	
			
			Файл1 = Новый Файл(ИмяФайлаСПутемHTML);
			ПутьФайла = Файл1.Путь;
			Файл1 = Неопределено;
			
			ТекстИзфайла = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ТекстИзфайла);
			СогласованиеВРежимеЗамечанийHTMLСервер.КорректироватьОтрицательныеОтступыСлева_Выполнить(
				ТекстИзфайла);
			
			ТекстHTMLСКартинками = ОбзорФайловКлиентСервер.HTMLСКартинками(
				ТекстИзфайла,
				РеквизитыФайла.Наименование, 
				ПутьФайла);                  
			МассивHTMLСтрок.Добавить(ТекстHTMLСКартинками);     
			
			Если ЭтоПерваяПорция Тогда
				ПредставлениеHTMLФайла = ТекстHTMLСКартинками; 
				ЭтоПерваяПорция = Ложь;
			КонецЕсли;	
				
		КонецЦикла;	
		
	КонецЕсли;

#КонецЕсли

	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
	
	Возврат ПредставлениеHTMLФайла;
	
КонецФункции

Функция ЭтоWord(РасширениеФайла)

	Возврат РасширениеФайла = "doc" Или РасширениеФайла = "docx";

КонецФункции

Функция ЭтоPowerPoint(РасширениеФайла)

	Возврат РасширениеФайла = "ppt" Или РасширениеФайла = "pptx";

КонецФункции

Функция ЭтоOpenOffice(РасширениеФайла)

	Возврат РасширениеФайла = "odt";

КонецФункции

Функция ЭтоOpenOfficeImpress(РасширениеФайла)

	Возврат РасширениеФайла = "odp";

КонецФункции

Функция ЭтоOpenOfficeCalc(РасширениеФайла)

	Возврат РасширениеФайла = "ods";

КонецФункции

Функция ЭтоExcel(РасширениеФайла)

	Возврат РасширениеФайла = "xls" Или РасширениеФайла = "xlsx";

КонецФункции

Функция HTMLПредставлениеПриОшибке(ОписаниеОшибки)
	
	ТекстHTML = НСтр("ru = 'Не удалось получить обзор файла по причине:<br><br>
		|_ПричинаОшибки_'");
	
	Возврат ОбзорФайловКлиентСервер.СообщениеВПредпросмотр(СтрЗаменить(ТекстHTML, "_ПричинаОшибки_", ОписаниеОшибки));
	
КонецФункции

Функция HTMLПредставлениеФайлЗашифрован()
	
	ТекстHTML = НСтр("ru = 'Предпросмотр для зашифрованного файла невозможен<br>'");
	
	Возврат ОбзорФайловКлиентСервер.СообщениеВПредпросмотр(ТекстHTML);
	
КонецФункции

// Функция преобразует Windows имя файла в URL OpenOffice.
Функция ПреобразоватьВURL(ИмяФайла)
	
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/");
	
КонецФункции

// Создание структуры для параметров OpenOffice.
Функция ПрисвоитьЗначениеСвойству(Объект, ИмяСвойства, ЗначениеСвойства)
	
	Свойства = Объект.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Свойства.Name = ИмяСвойства;
	Свойства.Value = ЗначениеСвойства;
	
	Возврат Свойства;
	
КонецФункции

// Сортирует массив имен файлов. Например  img1  img2 img10 img11 - вернет в порядке нарастания чисел (1 2 10 11), а не по алфавиту
Процедура СортироватьМассивПоЧислам(Картинки, МассивПутей)
	
	ПутиПоЧислам = Новый Соответствие(); // ключ - число, значение - полный путь
	ВсеЧисла = Новый СписокЗначений();
	
	Для Каждого СтруктураФайла Из Картинки Цикл
		
		ИмяБезРасширения = СтруктураФайла.ИмяБезРасширения;
		ПолноеИмя = СтруктураФайла.ПолноеИмя;
		
		Номер = 0;
		СтрокаНомера = "";
		
		ТекПоз = СтрДлина(ИмяБезРасширения);
		Пока ТекПоз > 1 Цикл
			Символ = Сред(ИмяБезРасширения, ТекПоз, 1);
			Если Не ЭтоЧисло(Символ) Тогда
				Прервать;
			КонецЕсли;	
			СтрокаНомера = Символ + СтрокаНомера;
			ТекПоз = ТекПоз - 1;
		КонецЦикла;	
		
		Попытка
			Номер = ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(СтрокаНомера);
			
			ВсеЧисла.Добавить(Номер);
			ПутиПоЧислам.Вставить(Номер, ПолноеИмя);
			
		Исключение
		КонецПопытки;	
		
	КонецЦикла;		
	
	ВсеЧисла.СортироватьПоЗначению();  
	
	МассивПутей.Очистить();
	
	Для Каждого Стр Из ВсеЧисла Цикл
		Номер = Стр.Значение;
		МассивПутей.Добавить(ПутиПоЧислам[Номер]);
	КонецЦикла;	
	
КонецПроцедуры	

// Определяет, является ли переданная строка числом
//
// Параметры:
//   СтрокаСимволов - Строка - строка символов
//
// Возвращаемое значение:
//   Булево - возвращает Истина, если строка является числом
//
Функция ЭтоЧисло(СтрокаСимволов)
	
	СтрокаСимволов = СокрЛП(СтрокаСимволов);
	
	Если Не ЗначениеЗаполнено(СтрокаСимволов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(СтрокаСимволов);
	
	Для ТекущийСимвол = 1 По ДлинаСтроки Цикл
		
		КодСимвола = КодСимвола(СтрокаСимволов, ТекущийСимвол);
		
		Если КодСимвола < 48 Или КодСимвола > 57 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ИменаЛистовXls(Текст_tabstrip)
	
	МассивИменЛистов = Новый Массив;
	
	НРегТекстHTML = НРег(Текст_tabstrip);
	Позиция = 1;
	
	Пока Истина Цикл
		
		ПозицияТэга = СтрНайти(НРегТекстHTML, "<td", НаправлениеПоиска.СНачала, Позиция);
		Если ПозицияТэга = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		КонецТегаСтрока = "</td>";
		ПозицияКонцаТэга = СтрНайти(НРегТекстHTML, КонецТегаСтрока, НаправлениеПоиска.СНачала, ПозицияТэга);
		Если ПозицияКонцаТэга = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаСТегом = Сред(Текст_tabstrip, ПозицияТэга, ПозицияКонцаТэга + СтрДлина(КонецТегаСтрока) - ПозицияТэга);
		ИмяЛиста = РаботаС_HTML.ПолучитьТекстИзHTML(СтрокаСТегом,,Ложь);
		МассивИменЛистов.Добавить(СокрЛП(ИмяЛиста));
		
		Позиция = ПозицияКонцаТэга + СтрДлина(КонецТегаСтрока);
		
	КонецЦикла;
	
	Возврат МассивИменЛистов;
	
КонецФункции	

Функция ПозицияТегаStyle(НРегТекстHTML)
	
	ТекПозиция = 1;
	ПозицияТега = 0;

	Пока Истина Цикл
		
		ПозицияТэгаSTYLE = СтрНайти(НРегТекстHTML, "<style", НаправлениеПоиска.СНачала, ТекПозиция);
		Если ПозицияТэгаSTYLE = 0 Тогда
			Прервать;
		КонецЕсли;
			
		НачалоКомментария = СтрНайти(НРегТекстHTML, "<!--", НаправлениеПоиска.СКонца, ПозицияТэгаSTYLE);	
		Если НачалоКомментария = 0 Тогда // комментариев нет
			Возврат ПозицияТэгаSTYLE;
		КонецЕсли;

		КонецКомментария = СтрНайти(НРегТекстHTML, "-->", НаправлениеПоиска.СНачала, НачалоКомментария);	
		Если КонецКомментария = 0 Тогда  //некорректно, не закрыт комментарий
			Возврат 0;
		КонецЕсли;
		
		Если КонецКомментария > ПозицияТэгаSTYLE Тогда // style внутри комментария
			ТекПозиция = ПозицияТэгаSTYLE + 1;
			Продолжить;
		КонецЕсли;
		
		Возврат ПозицияТэгаSTYLE;
		
	КонецЦикла;	
	
	Возврат ПозицияТега;
	
КонецФункции	

Функция ПолучитьТелоФайлаHtml(ФайлЛиста)
	
	ТекстДок_tabstrip = Новый ТекстовыйДокумент();
	ТекстДок_tabstrip.Прочитать(ФайлЛиста.ПолноеИмя);
	ТекстHTML = ТекстДок_tabstrip.ПолучитьТекст();
	
	НРегТекстHTML = НРег(ТекстHTML);
	
	ПозицияТэга = СтрНайти(НРегТекстHTML, "<body");
	Если ПозицияТэга = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	ПозицияКонцаТэга = СтрНайти(НРегТекстHTML, ">", НаправлениеПоиска.СНачала, ПозицияТэга+1);
	Если ПозицияКонцаТэга = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	ПозицияНачала = ПозицияКонцаТэга + 1;
	
	
	ПозицияТэга = СтрНайти(НРегТекстHTML, "</body>");
	Если ПозицияТэга = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	ПозицияКонца = ПозицияТэга;
	
	ТекстBody = Сред(ТекстHTML, ПозицияНачала, ПозицияКонца - ПозицияНачала);
		 
	Возврат ТекстBody;
	
КонецФункции

Процедура ДобавитьТелоИИмяЛиста(ТекстHTML, ИмяЛиста, НомерЛиста, ФайлЛиста)
	
	НРегТекстHTML = НРег(ТекстHTML);
	
	ПозицияТэга = СтрНайти(НРегТекстHTML, "</body>");
	Если ПозицияТэга = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПозицияВставки = ПозицияТэга;
	
	Тело = ПолучитьТелоФайлаHtml(ФайлЛиста);
	
	Если ЗначениеЗаполнено(Тело) Тогда
		ТекстHTML = Лев(ТекстHTML, ПозицияВставки - 1) 
		     + СтрШаблон(НСтр("ru = '<h2>Лист %1: %2</h2>'"), НомерЛиста, ИмяЛиста)
			 + Тело
			 + Сред(ТекстHTML, ПозицияВставки);
	КонецЕсли;	 
	
КонецПроцедуры	

Процедура ДобавитьИмяЛиста(ТекстHTML, ИмяЛиста, НомерЛиста)
	
	НРегТекстHTML = НРег(ТекстHTML);
	
	ПозицияТэга = СтрНайти(НРегТекстHTML, "<body");
	Если ПозицияТэга = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПозицияКонцаТэга = СтрНайти(НРегТекстHTML, ">", НаправлениеПоиска.СНачала, ПозицияТэга+1);
	Если ПозицияКонцаТэга = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПозицияВставки = ПозицияКонцаТэга + 1;
	
	ТекстHTML = Лев(ТекстHTML, ПозицияВставки - 1) 
	     + СтрШаблон(НСтр("ru = '<h2>Лист %1: %2</h2>'"), НомерЛиста, ИмяЛиста)
		 + Сред(ТекстHTML, ПозицияВставки);
	
КонецПроцедуры	

// Удаляет теги из html
Процедура ВставитьСтили(ТекстHTML, HTMLСтили)
	
	НРегТекстHTML = НРег(ТекстHTML);
	
	ПозицияТэгаHEAD = СтрНайти(НРегТекстHTML, "<head");
	
	ПозицияТэгаSTYLE = ПозицияТегаStyle(НРегТекстHTML);
	
	Если ПозицияТэгаHEAD <> 0 И ПозицияТэгаSTYLE = 0 Тогда // вставим после head
		
		ПозицияЗавершенияHead = СтрНайти(НРегТекстHTML, ">", НаправлениеПоиска.СНачала, ПозицияТэгаHEAD);
		
		Если ПозицияЗавершенияHead <> 0 Тогда
		
			ТекстHTML = 
				Лев(ТекстHTML, ПозицияЗавершенияHead)
				    + Символы.ПС
					+ " <style>"
					+ HTMLСтили
					+ "</style> "
					+ Символы.ПС
					+ Сред(ТекстHTML, ПозицияЗавершенияHead + 1);
		
		КонецЕсли;   
				
	ИначеЕсли ПозицияТэгаHEAD <> 0 И ПозицияТэгаSTYLE <> 0 Тогда // вставим в конце style

		ПозицияЗавершенияStyle = СтрНайти(НРегТекстHTML, ">", НаправлениеПоиска.СНачала, ПозицияТэгаSTYLE);
		
		Если ПозицияЗавершенияHead <> 0 Тогда
		
			ТекстHTML = 
				Лев(ТекстHTML, ПозицияЗавершенияStyle)
				    + Символы.ПС
					+ HTMLСтили
					+ Символы.ПС
					+ Сред(ТекстHTML, ПозицияЗавершенияStyle + 1);
		
		КонецЕсли;   
		
	КонецЕсли;	
	
КонецПроцедуры

// Удаляет теги из html
Процедура УдалитьТеги(ТекстПисьмаHTML)
	
	ИмяТега = "link";
	
	НРегТекстHTML = НРег(ТекстПисьмаHTML);
	
	ПозицияНачалаТегаHTML = 1;
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ПозицияНачалаТегаHTML = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, "<" + ИмяТега, ПозицияНачалаТегаHTML);
		Если ПозицияНачалаТегаHTML = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Возврат;
		КонецЕсли;	
		
		ПозицияОкончанияТегаHTML = 0;
		Если ПозицияНачалаТегаHTML > 0 Тогда
			ПозицияОкончанияТегаHTML = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияНачалаТегаHTML);
		КонецЕсли;
		
		Если ПозицияНачалаТегаHTML <> 0 И ПозицияОкончанияТегаHTML <> 0 Тогда
			
			// вычленим src
			
			ТекстПисьмаHTML = Лев(ТекстПисьмаHTML, ПозицияНачалаТегаHTML - 1) 
				 + Сред(ТекстПисьмаHTML, ПозицияОкончанияТегаHTML + 1);
			НРегТекстHTML = НРег(ТекстПисьмаHTML);
			
			Продолжить;
					
				
		Иначе
			
			Возврат;	
			
		КонецЕсли;		
		
	КонецЦикла;	
	
КонецПроцедуры	
	
Процедура Удалить_windowlocationreplace(ТекстПисьмаHTML)
	
	НРегТекстHTML = НРег(ТекстПисьмаHTML);
	
	ПозицияНачала = СтрНайти(НРегТекстHTML, "window.location.replace");
	Если ПозицияНачала <> 0 Тогда
		
		ПозицияКонца = СтрНайти(ТекстПисьмаHTML, ");", НаправлениеПоиска.СНачала, ПозицияНачала);
		Если ПозицияКонца <> 0 Тогда 
			
			ТекстПисьмаHTML = 
				Лев(ТекстПисьмаHTML, ПозицияНачала - 1)
				+ Сред(ТекстПисьмаHTML, ПозицияКонца + 2);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция HtmlИзXls(Книга, ВременнаяПапка)

	ИмяКороткое = "nfile";
	ИмяФайлаСПутемHTMLКорневое = ВременнаяПапка + ИмяКороткое + ".htm";
	Книга.SaveAs(ИмяФайлаСПутемHTMLКорневое, 44); // 44  xlHtml
	Книга.Close(0);  // 0 закрыть без сохранения
	
	// тут читаем sheet001.htm
	ИмяФайлаСПутемHTMLПерваяСтраница = ВременнаяПапка + ИмяКороткое
		+ "/sheet001.htm";//.files
	ИмяФайлаСПутемHTMLСтили = ВременнаяПапка + ИмяКороткое
		+ "/st.css";
	ВсеФайлыЛистов = НайтиФайлы(ВременнаяПапка + ИмяКороткое, "sheet*.htm");
	
	ИмяФайла_tabstrip = ВременнаяПапка + ИмяКороткое
		+ "/tabstrip.htm";
	
	ФайлПерваяСтр = Новый Файл(ИмяФайлаСПутемHTMLПерваяСтраница);
	Если Не ФайлПерваяСтр.Существует() Тогда
		
		ИмяФайлаСПутемHTMLПерваяСтраница = ВременнаяПапка + ИмяКороткое
			+ ".files/sheet001.htm";
		ИмяФайлаСПутемHTMLСтили = ВременнаяПапка + ИмяКороткое
			+ ".files/stylesheet.css";
			
		ВсеФайлыЛистов = НайтиФайлы(ВременнаяПапка + ИмяКороткое + ".files/", "sheet*.htm");	
		
		ИмяФайла_tabstrip = ВременнаяПапка + ИмяКороткое
			+ ".files/tabstrip.htm";
		
	КонецЕсли;	                                        
		
	ФайлПервойСтраницы = Новый Файл(ИмяФайлаСПутемHTMLПерваяСтраница);		
	РазмерФайла = ФайлПервойСтраницы.Размер();
	Если РазмерФайла >= 10*1024*1024 Тогда // более 10 мб        
		
		ПредставлениеHTMLФайла = НСтр("ru = 'Полученный Html файл имеет слишком большой размер (%1 Мб)<br>
		|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font>'");
		ПредставлениеHTMLФайла = СтрЗаменить(ПредставлениеHTMLФайла, "%1", Цел(РазмерФайла/(1024*1024)));  
		
		ПредставлениеHTMLФайла = ОбзорФайловКлиентСервер.СообщениеВПредпросмотр(ПредставлениеHTMLФайла);
		
		Возврат ПредставлениеHTMLФайла;
		
	КонецЕсли;	
		
	ТекстHTML = Новый ТекстовыйДокумент();
	ТекстHTML.Прочитать(ИмяФайлаСПутемHTMLПерваяСтраница);
	ПредставлениеHTMLФайла = ТекстHTML.ПолучитьТекст();
	
	ТекстHTMLСтили = Новый ТекстовыйДокумент();
	ТекстHTMLСтили.Прочитать(ИмяФайлаСПутемHTMLСтили);
	HTMLСтили = ТекстHTMLСтили.ПолучитьТекст();
	
	ВырезатьЛишнееВHtmlИзXls(ПредставлениеHTMLФайла, HTMLСтили, ВсеФайлыЛистов, ИмяФайла_tabstrip);
	
	ТекстHTMLСКартинками = ОбзорФайловКлиентСервер.HTMLСКартинками(
		ПредставлениеHTMLФайла,
		"", 
		ВременнаяПапка);
	ПредставлениеHTMLФайла = ТекстHTMLСКартинками;
	
	Возврат ПредставлениеHTMLФайла;
	
КонецФункции

#КонецОбласти
