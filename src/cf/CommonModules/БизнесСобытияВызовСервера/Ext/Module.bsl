////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс бизнес-событий
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает значение константы ИспользоватьБизнесСобытия
Функция ПолучитьИспользоватьБизнесСобытия() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьБизнесСобытия.Получить();
	
КонецФункции	

// Делает запись бизнес-события
// Источник - любая ссылка
// ВидСобытия - СправочникаСсылка.ВидыБизнесСобытий
// КонтекстСобытия  - ХранилищеЗначения
// Автор - Сотрудник
Процедура ЗарегистрироватьСобытие(Источник, ВидСобытия, КонтекстСобытия = Неопределено, Автор = Неопределено) Экспорт
	
	Если НЕ БизнесСобытияПовтИсп.ПолучитьИспользоватьБизнесСобытия()
		Или ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ПроизошедшиеБизнесСобытия.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	МенеджерЗаписи.Идентификатор = Новый УникальныйИдентификатор;
	МенеджерЗаписи.ПометкаУдаления = Ложь;
	
	Если Автор = Неопределено Тогда
		МенеджерЗаписи.Автор = 
			Сотрудники.ОсновнойСотрудникПользователя(
				ПользователиДокументооборот.ОлицетворяемыйПользователь());
	Иначе
		МенеджерЗаписи.Автор = Автор;
	КонецЕсли;
	
	МенеджерЗаписи.ВидСобытия = ВидСобытия;
	
	МенеджерЗаписи.Источник = Источник;
	МенеджерЗаписи.Обработано = Ложь;
	
	Если КонтекстСобытия <> Неопределено Тогда
		МенеджерЗаписи.КонтекстСобытия = КонтекстСобытия;
	КонецЕсли;	

	МенеджерЗаписи.Записать();
	
КонецПроцедуры	

// Отработка регламентного задания
Процедура ОбработкаПроизошедшихБизнесСобытий() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбработкаПроизошедшихБизнесСобытий, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ БизнесСобытияПовтИсп.ПолучитьИспользоватьБизнесСобытия() Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий", 
		УровеньЖурналаРегистрации.Информация, 
		, , НСтр("ru = 'Начато регламентное задание ОбработкаБизнесСобытий'"));
	
	УстановитьПривилегированныйРежим(Истина);
	КешПотребителей = Новый Соответствие;
	
	Пока Истина Цикл // В цикле получаем порциями по 100 необработанные события, пока есть что обрабатывать
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 100
			|	ПроизошедшиеБизнесСобытия.Автор КАК Автор,
			|	ПроизошедшиеБизнесСобытия.ВидСобытия КАК ВидСобытия,
			|	ПроизошедшиеБизнесСобытия.Период КАК Дата,
			|	ПроизошедшиеБизнесСобытия.Источник КАК Источник,
			|	ПроизошедшиеБизнесСобытия.КонтекстСобытия КАК КонтекстСобытия,
			|	ПроизошедшиеБизнесСобытия.ЧислоПопытокОбработки КАК ЧислоПопытокОбработки,
			|	ПроизошедшиеБизнесСобытия.ПометкаУдаления КАК ПометкаУдаления,
			|	ПроизошедшиеБизнесСобытия.Идентификатор КАК Идентификатор
			|ИЗ
			|	РегистрСведений.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
			|ГДЕ
			|	ПроизошедшиеБизнесСобытия.Обработано = ЛОЖЬ
			|	И ПроизошедшиеБизнесСобытия.НеУдалосьОбработать = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПроизошедшиеБизнесСобытия.Период";
					   
		Таблица = Запрос.Выполнить().Выгрузить();	
		Если Таблица.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		Для Каждого Строка Из Таблица Цикл
			
			Потребители = ВыбратьПотребителей(Строка.ВидСобытия, КешПотребителей);
			СработавшиеПользовательскиеОбработчики = Новый Массив;
			КогоУведомлять = Неопределено;
			ПрефиксОшибки = "";
			
			НачатьТранзакцию();
			Попытка
				
				Если Строка.ПометкаУдаления = Ложь Тогда
				
					Для Каждого Потребитель Из Потребители Цикл
						
						Если Потребитель = Перечисления.ПотребителиБизнесСобытий.АвтоматическийЗапускБизнесПроцессов Тогда
							ОбработатьСобытиеАвтоматическийЗапускБизнесПроцессов(Строка, КогоУведомлять);
						ИначеЕсли Потребитель = Перечисления.ПотребителиБизнесСобытий.ПользовательскаяОбработкаСобытий Тогда
							ОбработатьСобытиеПользовательскаяОбработкаСобытий(Строка, 
								СработавшиеПользовательскиеОбработчики);	
						ИначеЕсли Потребитель = Перечисления.ПотребителиБизнесСобытий.РассылкаУведомлений Тогда;
							ОбработатьСобытиеРассылкаУведомлений(Строка);
						ИначеЕсли Потребитель = Перечисления.ПотребителиБизнесСобытий.АвтоматическийЗапускОбработкиОбъектов Тогда
							ОбработатьСобытиеАвтоматическийЗапускОбработкиОбъектов(
								Строка, КогоУведомлять, ПрефиксОшибки);
						КонецЕсли;		
							
					КонецЦикла;
					
					Обработано = Истина;
					РегистрыСведений.ПроизошедшиеБизнесСобытия.ОбновитьЗапись(Строка.Идентификатор, Обработано);
					
				Иначе	 // стираем запись в РС ПроизошедшиеБизнесСобытия, если она с пометкой удаления
					
					Набор = РегистрыСведений.ПроизошедшиеБизнесСобытия.СоздатьНаборЗаписей();
					Набор.Отбор.Идентификатор.Установить(Строка.Идентификатор);
					Набор.Записать(); // записываем пустой набор с отбором по Идентификатор - т.е. стираем запись
					
				КонецЕсли;		
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1.
					|Идентификатор записи: %2",
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Строка(Строка.Идентификатор));
				ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий", УровеньЖурналаРегистрации.Ошибка, 
					Метаданные.РегистрыСведений.ПроизошедшиеБизнесСобытия, , СообщениеОбОшибке);
				
				Попытка
					ЧислоПопытокОбработки = Строка.ЧислоПопытокОбработки + 1;	
					РегистрыСведений.ПроизошедшиеБизнесСобытия.ОбновитьЗапись(Строка.Идентификатор, , ЧислоПопытокОбработки);
				Исключение 
					СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"%1.
						|Идентификатор записи: %2",
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Строка(Строка.Идентификатор));
					ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий", УровеньЖурналаРегистрации.Ошибка, 
						Метаданные.РегистрыСведений.ПроизошедшиеБизнесСобытия, , СообщениеОбОшибке);
				КонецПопытки;	
				
				Для Каждого ОбработчикСсылка Из СработавшиеПользовательскиеОбработчики Цикл
					
					Попытка
						
						ВыполняемыйКодОтменыОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработчикСсылка, 
							"ВыполняемыйКодОтменыОбработки");
							
						Если ЗначениеЗаполнено(ВыполняемыйКодОтменыОбработки) Тогда
							Выполнить(ВыполняемыйКодОтменыОбработки);
						КонецЕсли;	
						
					Исключение
						
						СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий.Выполнение кода отмены обработки", 
							УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ПроизошедшиеБизнесСобытия, 
							Строка.Ссылка, СообщениеОбОшибке);
						
					КонецПопытки;
					
				КонецЦикла;	

				Если ЗначениеЗаполнено(КогоУведомлять) Тогда				
					РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
						ПрефиксОшибки + СообщениеОбОшибке,
						КогоУведомлять,
						Строка.Источник);
				КонецЕсли;	
				
			КонецПопытки;
				
		КонецЦикла;	
		
	КонецЦикла;	
	
	// Удаление уже обработанных бизнес-событий
	
	// СрокХраненияБизнесСобытий - измеряется в днях
	СрокХраненияБизнесСобытий = Константы.СрокХраненияБизнесСобытий.Получить(); 
	
	// СрокХраненияБизнесСобытий умножаем на 86400 (сек в сутках) и делим на 10
	// - т.к. с периодом в 1/10 срока хранения делаем очистку
	ПериодОчистки = СрокХраненияБизнесСобытий * 86400 / 10;
	
	ДатаПоследнейОчисткиБизнесСобытий = Константы.ДатаПоследнейОчисткиБизнесСобытий.Получить();
	ТекущееВремя = ТекущаяДатаСеанса();
	
	НужнаОчистка = Ложь;
	Если ДатаПоследнейОчисткиБизнесСобытий = Дата("00010101000000") Тогда
		НужнаОчистка = Истина;
	Иначе
		Если ТекущееВремя - ДатаПоследнейОчисткиБизнесСобытий > ПериодОчистки Тогда
			НужнаОчистка = Истина;
		КонецЕсли;		
	КонецЕсли;	
	
	Если Не НужнаОчистка Тогда
		
		ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий", 
			УровеньЖурналаРегистрации.Информация, 
			, , НСтр("ru = 'Завершено регламентное задание ОбработкаБизнесСобытий'"));
		
		Возврат;
	КонецЕсли;	
	
	// СрокХраненияБизнесСобытий умножаем на 86400 (сек в сутках)
	ДатаОтсечения = ТекущееВремя - СрокХраненияБизнесСобытий * 86400; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизошедшиеБизнесСобытия.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
		|ГДЕ
		|	ПроизошедшиеБизнесСобытия.Обработано = ИСТИНА
		|	И ПроизошедшиеБизнесСобытия.Период < &ДатаОтсечения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроизошедшиеБизнесСобытия.Период";
				   
	Запрос.УстановитьПараметр("ДатаОтсечения", ДатаОтсечения);
				   
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ПроизошедшиеБизнесСобытия.СоздатьНаборЗаписей();
		Набор.Отбор.Идентификатор.Установить(Выборка.Идентификатор);
		Набор.Записать(); // записываем пустой набор с отбором по Идентификатор - т.е. стираем запись
	КонецЦикла;
	
	Константы.ДатаПоследнейОчисткиБизнесСобытий.Установить(ТекущаяДатаСеанса());
	
	ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий", 
		УровеньЖурналаРегистрации.Информация, 
		, , НСтр("ru = 'Завершено регламентное задание ОбработкаБизнесСобытий'"));
	
КонецПроцедуры

// Отработка регламентного задания
Процедура ОбработкаДетекторовБизнесСобытий() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбработкаДетекторовБизнесСобытий, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ БизнесСобытияПовтИсп.ПолучитьИспользоватьБизнесСобытия() Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбменаТекущий = КОДПовтИсп.ИдентификаторТекущегоУзла();
	ЭтоЦентральныйУзел = КОДСервер.ЭтоЦентральныйУзел();
	
	Отбор = Новый Структура("Включен", Истина);
	Выборка = Справочники.ДетекторыБизнесСобытий.Выбрать(,,Отбор);
	
	Пока Выборка.Следующий() Цикл
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
			
			Если Выборка.ВариантРаботыВУзлахКОД = Перечисления.ВариантыРаботыВУзлахКОД.ТолькоВЦентральномУзле 
				И Не ЭтоЦентральныйУзел Тогда
				Продолжить;
			КонецЕсли;	 
	
			Если Выборка.ВариантРаботыВУзлахКОД = Перечисления.ВариантыРаботыВУзлахКОД.ТолькоВУказанномУзле 
				И Выборка.УзелРаботы <> УзелОбменаТекущий Тогда
				Продолжить;
			КонецЕсли;
				 
		КонецЕсли;			 
		
		Результат = Ложь; 
		ПараметрыВозврата = Новый Структура;
		
		Попытка
	    	ВыполнитьКод(Выборка.ВыполняемыйКод, Результат, ПараметрыВозврата);
		Исключение
			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru='Обработка детекторов бизнес-событий'"), УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Справочники.ДетекторыБизнесСобытий, Выборка.Ссылка, СообщениеОбОшибке);
			Результат = Ложь; 
		КонецПопытки;
		
		Если Результат = Истина Тогда
			
			Источник = Выборка.Ссылка;
			Автор = Справочники.Сотрудники.ПустаяСсылка();
			КонтекстСобытия = Неопределено;
			
			КоличествоСтандартных = 0;
			Если ПараметрыВозврата.Свойство("Источник") Тогда
				Источник = ПараметрыВозврата.Источник;
				КоличествоСтандартных = КоличествоСтандартных + 1;
			КонецЕсли;	
			
			Если ПараметрыВозврата.Свойство("Автор") Тогда
				Автор = ПараметрыВозврата.Автор;
				КоличествоСтандартных = КоличествоСтандартных + 1;
			КонецЕсли;	
			
		Если ПараметрыВозврата.Количество() > КоличествоСтандартных Тогда
				
				// тут формируем КонтекстСобытия (XML)
				ИнформацияДляЗаписиXML = Новый ЗаписьXML;
				ИнформацияДляЗаписиXML.УстановитьСтроку();  
				
				НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);  
				НовыйСериализаторXDTO.ЗаписатьXML(ИнформацияДляЗаписиXML, ПараметрыВозврата, НазначениеТипаXML.Явное);  
				
				СтрокаXML = ИнформацияДляЗаписиXML.Закрыть(); 
				КонтекстСобытия = Новый ХранилищеЗначения(СтрокаXML);
				
			КонецЕсли;	
			
			ЗарегистрироватьСобытие(Источник, Выборка.ВидСобытия, КонтекстСобытия, Автор);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// Делает проверку для всех типов Предмета
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоПредмету(ШаблонСсылка, ПредметСсылка, 
	Подписчик, ВидСобытия, Условие) Экспорт
	
	// Проверим условие
	Если Не РаботаСАлгоритмамиПроверки.ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(ПредметСсылка, Условие) Тогда
		Возврат Ложь; // условие не выполняется
	КонецЕсли;	
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеСоставаКомплекта Тогда
		Возврат Истина; // не проверяем подписчика
	КонецЕсли;	
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеКонтрагента Тогда
		
		Если ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныИсполнения")
			ИЛИ ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныОзнакомления")
			ИЛИ ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныРассмотрения")
			ИЛИ ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
			
			Возврат Истина; // проверяем только тип шаблона бизнес-процесса
			
		Иначе	
			
			Возврат Ложь;
			
		КонецЕсли;		
	
	КонецЕсли;	
	
	Если ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Мероприятия")
		И (ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеМероприятия
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеМероприятия) Тогда

		Возврат Истина;

	КонецЕсли;
	
	// Подписчик - Папка файлов, Предмет - Файл
	Если ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Файлы")
		И ТипЗнч(Подписчик) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		
		// Подписчик не указан - подойдет ко всем
		Если Не ЗначениеЗаполнено(Подписчик) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметСсылка, "ВладелецФайла");
		
		Если ВладелецФайла = Подписчик Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			
			Папка = ВладелецФайла;
			
			Пока ЗначениеЗаполнено(Папка) Цикл
				
				Если Папка = Подписчик Тогда
					Возврат Истина;
				КонецЕсли;	
				
				Папка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка, "Родитель");
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	// Подписчик - Папка документов, Предмет - Документ предприятия
	Если ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.ДокументыПредприятия")
		И ТипЗнч(Подписчик) = Тип("СправочникСсылка.ПапкиДокументов") Тогда
		
		// Подписчик не указан - подойдет ко всем
		Если Не ЗначениеЗаполнено(Подписчик) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Папка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметСсылка, "Папка");
		
		Пока ЗначениеЗаполнено(Папка) Цикл
			
			Если Папка = Подписчик Тогда
				Возврат Истина;
			КонецЕсли;	
			
			Папка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка, "Родитель");
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Подписчик - Вид документа, Предмет - Документ
	Если ТипЗнч(Подписчик) = Тип("СправочникСсылка.ВидыДокументов")
		И ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(ПредметСсылка) Тогда
		
		// Подписчик не указан - подойдет ко всем
		Если Не ЗначениеЗаполнено(Подписчик) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметСсылка, "ВидДокумента");
		МассивВидовДокумента = Делопроизводство.ПолучитьВидДокументаИРодителей(ВидДокумента);
		
		Если МассивВидовДокумента.Найти(Подписчик) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;	
		
	КонецЕсли;	
	
	// Подписчик - Категория, Предмет - Документ, Файл, Мероприятие
	Если ТипЗнч(Подписчик) = Тип("СправочникСсылка.КатегорииДанных")
		И (ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(ПредметСсылка)
		ИЛИ ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Файлы")
		ИЛИ ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Мероприятия")) Тогда
		
		ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
		
		// Подписчик не указан - подойдет ко всем
		Если Не ЗначениеЗаполнено(Подписчик) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		КатегорииПредмета = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(ПредметСсылка);
		
		Если ИспользоватьКатегорииДанных Тогда
			
			Для Каждого Категория Из КатегорииПредмета Цикл
				
				Если Категория.Ссылка = Подписчик Тогда
					Возврат Истина;
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

// Сохраняет в регистре сведений ПодпискиНаБизнесСобытия подписку
Процедура СохранитьПодпискуНаБизнесСобытия(ВидСобытия, Потребитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПодпискиНаБизнесСобытия.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.Потребитель.Установить(Потребитель);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидСобытия = ВидСобытия;
	НоваяЗапись.Потребитель = Потребитель;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет в регистре сведений ПодпискиНаБизнесСобытия подписку
Процедура УдалитьПодпискуНаБизнесСобытия(ВидСобытия, Потребитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПодпискиНаБизнесСобытия.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.Потребитель.Установить(Потребитель);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Есть ли записи в регистре сведений ПравилаАвтоматическогоЗапускаБизнесПроцессов для данного шаблона бизнес-процесса
Функция ЕстьЗаписиАвтоСтартаБизнесПроцессовДляШаблонаБизнесПроцессов(ШаблонБизнесПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия КАК ВидБизнесСобытия
		|ИЗ
		|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
		|ГДЕ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса = &ШаблонБизнесПроцесса";
	
	Запрос.УстановитьПараметр("ШаблонБизнесПроцесса", ШаблонБизнесПроцесса);
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;

КонецФункции	

// Помечает на удаление произошедшие события, когда помечается на удаление Источник событий
Процедура ПометитьНаУдалениеСобытияПоИсточнику(Источник) Экспорт
	
	БизнесСобытияСобытия.ПометитьНаУдалениеСобытияПоИсточнику(Источник);
	
КонецПроцедуры

// Делает запись бизнес-события с дополнительными параметрами
// Источник - любая ссылка
// ВидСобытия - строка - наименование справочника ВидыБизнесСобытий
// Автор - сотрудник, регистрирующий событие
// Объект - объект информационной базы
// Комментарий - строка комментария
Процедура ЗарегистрироватьСобытиеРасширенное(Источник, ВидСобытия, Автор, Объект, Комментарий) Экспорт
	
	ПараметрыСобытия = Новый Структура("Объект, Комментарий", Объект, Комментарий);

	// тут формируем КонтекстСобытия (XML)
	ИнформацияДляЗаписиXML = Новый ЗаписьXML;
	ИнформацияДляЗаписиXML.УстановитьСтроку();  
	
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);  
	НовыйСериализаторXDTO.ЗаписатьXML(ИнформацияДляЗаписиXML, ПараметрыСобытия, НазначениеТипаXML.Явное);  
	
	СтрокаXML = ИнформацияДляЗаписиXML.Закрыть(); 
	КонтекстСобытия = Новый ХранилищеЗначения(СтрокаXML);
		
	ЗарегистрироватьСобытие(Источник, ВидСобытия, КонтекстСобытия, Автор);
	
КонецПроцедуры	

// Удаляет в регистре сведений ПравилаАвтоматическогоЗапускаБизнесПроцессов подписку
Процедура УдалитьПравилоАвтоматическогоЗапускаБизнесПроцессов(ВидСобытия, ШаблонБизнесПроцесса,
	КлассИсточника, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидБизнесСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.ШаблонБизнесПроцесса.Установить(ШаблонБизнесПроцесса);
	НаборЗаписей.Отбор.КлассИсточникаБизнесСобытия.Установить(КлассИсточника);
	НаборЗаписей.Отбор.ОрганизацияИсточникаБизнесСобытия.Установить(Организация);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает события подходящие для автоматического запуска процесса по источнику события.
//
// Параметры:
//  Источник - СправочникСсылка.ВидыДокументов - источник события.
//
// Возвращаемое значение:
//  Массив
//
Функция СобытияПодходящиеДляАвтоматическогоЗапускаПроцессаПоИсточнику(Источник) Экспорт
	
	ВидыСобытий = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ВидыДокументов") Тогда
		
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеДокумента);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеДокумента);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.РегистрацияДокумента);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеререгистрацияДокумента);
		
	КонецЕсли;	
	
	Возврат ВидыСобытий;
	
КонецФункции

// Сохраняет в регистре сведений ПравилаАвтоматическогоЗапускаБизнесПроцессов подписку
Процедура СохранитьПравилоАвтоматическогоЗапускаБизнесПроцессов(ВидСобытия, ШаблонБизнесПроцесса, 
	КлассИсточника, Условие, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидБизнесСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.ШаблонБизнесПроцесса.Установить(ШаблонБизнесПроцесса);
	НаборЗаписей.Отбор.КлассИсточникаБизнесСобытия.Установить(КлассИсточника);
	НаборЗаписей.Отбор.ОрганизацияИсточникаБизнесСобытия.Установить(Организация);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидБизнесСобытия = ВидСобытия;
	НоваяЗапись.ШаблонБизнесПроцесса = ШаблонБизнесПроцесса;
	НоваяЗапись.КлассИсточникаБизнесСобытия = КлассИсточника;
	НоваяЗапись.ОрганизацияИсточникаБизнесСобытия = Организация;
	НоваяЗапись.Условие = Условие;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Формирует строку из имен полей через запятую
Функция МассивПолейВСтроку(МассивПолей) Экспорт
	
	СтрокаПолей = "";
	
	Для Индекс = 0 По МассивПолей.Количество() - 1 Цикл
		
		Если Индекс <>  0 Тогда
			СтрокаПолей = СтрокаПолей + ", ";
		КонецЕсли;	
		
		СтрокаПолей = СтрокаПолей + МассивПолей[Индекс];
		
	КонецЦикла;	
	
	Возврат СтрокаПолей;
	
КонецФункции	

// Регистрирует бизнес-событие при загрузке объекта в ходе обмена данными с другими конфигурациями. Предназначена
// для вызова из обработчика ПослеЗагрузки ПКО и, по возможности, должна сохранять состав параметров неизменным.
//
// Параметры:
//   Источник - ЛюбаяСсылка - ссылка на объект-источник события
//   ИмяВидаСобытия - Строка - имя предопределенного элемента справочника ВидыБизнесСобытий
//   Автор - СправочникСсылка.Сотрудники - автор бизнес-события
//
Процедура ЗарегистрироватьСобытиеПриЗагрузкеОбъекта(Источник, ИмяВидаСобытия, Автор) Экспорт
	
	ВидСобытия = Справочники.ВидыБизнесСобытий[ИмяВидаСобытия];
	ЗарегистрироватьСобытие(Источник, ВидСобытия, , Автор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает потребителей по виду события, используя кеширование
Функция ВыбратьПотребителей(ВидСобытия, КешПотребителей)
	
	Потребители = КешПотребителей.Получить(ВидСобытия);
	Если Потребители <> Неопределено Тогда
		Возврат Потребители;
	КонецЕсли;	
		
	Потребители = Новый Массив;
	
	Отбор = Новый Структура("ВидСобытия", ВидСобытия);
	Выборка = РегистрыСведений.ПодпискиНаБизнесСобытия.Выбрать(Отбор);
	
	Пока Выборка.Следующий() Цикл
	    Потребители.Добавить(Выборка.Потребитель);
	КонецЦикла;
	
	КешПотребителей.Вставить(ВидСобытия, Потребители);
	
	Возврат Потребители;
		
КонецФункции

Процедура ВыполнитьКод(ВыполняемыйКод, Результат, ПараметрыВозврата)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Для Каждого ИмяРазделителя Из РаботаВМоделиСервиса.РазделителиКонфигурации() Цикл
			УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		КонецЦикла;
		УстановитьБезопасныйРежим(Истина);
	КонецЕсли;
		
	Выполнить(ВыполняемыйКод);
	
КонецПроцедуры

// Обрабатывает произошедшее событие в соответствии с настройками дополнительных обработок событий
Процедура ОбработатьСобытиеПользовательскаяОбработкаСобытий(Событие, СработавшиеПользовательскиеОбработчики)
	
	УстановитьПривилегированныйРежим(Истина);
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		УстановитьБезопасныйРежим(Истина);
		Для Каждого ИмяРазделителя Из РаботаВМоделиСервиса.РазделителиКонфигурации() Цикл
			УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользовательскиеОбработчикиБизнесСобытий.ВыполняемыйКод КАК ВыполняемыйКод,
		|	ПользовательскиеОбработчикиБизнесСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий КАК СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользовательскиеОбработчикиБизнесСобытий КАК ПользовательскиеОбработчикиБизнесСобытий
		|		ПО СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.Обработчик = ПользовательскиеОбработчикиБизнесСобытий.Ссылка
		|ГДЕ
		|	ПользовательскиеОбработчикиБизнесСобытий.Включен = ИСТИНА
		|	И СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.ВидСобытия = &ВидСобытия";
				   
	Запрос.УстановитьПараметр("ВидСобытия", Событие.ВидСобытия);
	
	Таблица = Запрос.Выполнить().Выгрузить();	
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		ОбработчикСсылка = СтрокаТаблицы.Ссылка;
		ОбработчикПредставление = Строка(ОбработчикСсылка);
		
		Попытка
			Выполнить(СтрокаТаблицы.ВыполняемыйКод);
			СработавшиеПользовательскиеОбработчики.Добавить(ОбработчикСсылка);
		Исключение
			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				+ " " + НСтр("ru = '. Обработчик:'") + " " + ОбработчикПредставление;
			ЗаписьЖурналаРегистрации(НСтр("ru='Пользовательская обработка бизнес-событий'"), 
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Справочники.ПользовательскиеОбработчикиБизнесСобытий, 
				, 
				СообщениеОбОшибке);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Отрабатывает событие старта бизнес-процесса - сперва проверяя по своим настройкам, что действительно сработало событие
Процедура ОбработатьСобытиеАвтоматическийЗапускБизнесПроцессов(Событие, КогоУведомлять)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Событие.Источник)
		Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Событие.Источник) Тогда
		
		Возврат;
	КонецЕсли;
	
	АвторСобытия = Сотрудники.ОсновнойСотрудникПользователя(
		Событие.Автор);
	
	Таблица = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.Условие КАК Условие,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия КАК Подписчик
		|ИЗ
		|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
		|ГДЕ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия = &ВидБизнесСобытия";
	
	Запрос.УстановитьПараметр("ВидБизнесСобытия", Событие.ВидСобытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;		
	
	Таблица = РезультатЗапроса.Выгрузить();
	
	ОписаниеОшибки = "";
	УспешноОбработано = 0;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаТаблицы.ШаблонБизнесПроцесса, "ПометкаУдаления") Тогда
			
			Продолжить;
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Событие.Источник);
		Если (МенеджерОбъекта = Неопределено) ИЛИ (МенеджерОбъекта <> Неопределено 
			И МенеджерОбъекта.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(СтрокаТаблицы.ШаблонБизнесПроцесса, 
			Событие.Источник, СтрокаТаблицы.Подписчик, Событие.ВидСобытия, СтрокаТаблицы.Условие)) Тогда
			
			БизнесПроцесс = Неопределено;
			Шаблон = СтрокаТаблицы.ШаблонБизнесПроцесса;
			
			ШаблонОбъект = Шаблон.ПолучитьОбъект();
			
			МассивПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
			Если МассивПолей.Количество() <> 0 Тогда
				
				Если МассивПолей.Найти("Схема") <> Неопределено Тогда
					СообщениеОбОшибке = СтрШаблон(
						НСтр("ru = 'Шаблон ""%1"" нельзя использовать для автоматического запуска процессов, т.к. он содержит некорректную схему.'"),
						Строка(Шаблон));
				Иначе
					СтрокаПолей = МассивПолейВСтроку(МассивПолей);
					
					СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Шаблон ""%1"" нельзя использовать для автоматического запуска процессов, т.к. не заполнены поля: %2!'"),
						Строка(Шаблон), СтрокаПолей);
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации(НСтр("ru='Обработка автоматического запуска процессов'"), УровеньЖурналаРегистрации.Ошибка, , Шаблон, СообщениеОбОшибке);
				
				Продолжить;
				
			КонецЕсли;	
			
			// Тут заполняем по шаблону и стартуем бизнес-процесс
			
			ИмяПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Шаблон).ИмяПроцесса(Шаблон);
			БизнесПроцесс = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
			
			Если БизнесПроцесс <> Неопределено Тогда
				
				ПараметрыЗаполнения = Новый Структура();
				ПараметрыЗаполнения.Вставить("Шаблон", Шаблон);
				ПараметрыЗаполнения.Вставить("Предметы", Событие.Источник);
				ПараметрыЗаполнения.Вставить("АвторСобытия", АвторСобытия);
				
				БизнесПроцесс.Заполнить(ПараметрыЗаполнения);
				
				МассивПолей = БизнесПроцесс.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
				Если МассивПолей.Количество() <> 0 Тогда
					
					СтрокаПолей = МассивПолейВСтроку(МассивПолей);
					
					СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При заполнении процесса по шаблону ""%1"" не были заполнены поля: %2.
						| Автоматический запуск процесса не выполнен.'"),
						Строка(Шаблон), СтрокаПолей);
						
					ЗаписьЖурналаРегистрации(НСтр("ru='Обработка автоматического запуска процессов'"), УровеньЖурналаРегистрации.Ошибка, , Шаблон, СообщениеОбОшибке);
					
					// Создание уведомлений программы
					ОписаниеУведомления = НСтр("ru = 'Произошла ошибка при автоматическом запуске процесса по документу:
						|%1'");
					ОписаниеУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ОписаниеУведомления,
						СообщениеОбОшибке);
					
					ОписаниеОшибки = ОписаниеОшибки + " " + ОписаниеУведомления;
					КогоУведомлять = 
						Сотрудники.ЛюбойПользовательСотрудника(
							АвторСобытия); 
				
					Продолжить;
					
				КонецЕсли;	
				
				БизнесПроцесс.Записать();
				
				Настройка = РегистрыСведений.НастройкиОтложеногоСтартаПроцессов.ПолучитьСведенияОЗапускеПроцесса(
					БизнесПроцесс.Ссылка);
				
				СрокиИсполненияПроцессов.РассчитатьСрокИсполненияДляНовогоПроцесса(БизнесПроцесс);
				РаботаСБизнесПроцессами.ЗаписатьПроцесс(БизнесПроцесс, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
				
				Если ЗначениеЗаполнено(Настройка) Тогда
					БизнесПроцесс.ОтложенныйСтарт();
				Иначе
					СтартПроцессовСервер.СтартоватьПроцесс(БизнесПроцесс);
				КонецЕсли;
				
				УспешноОбработано = УспешноОбработано + 1;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	// Если хоть что то успешно создано - не считаем проблемой.
	//  но если не смогли сделать ничего - бросаем исключение.
	Если ОписаниеОшибки <> "" И УспешноОбработано = 0 Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;	
	
КонецПроцедуры	

// Обрабатывает произошедшее событие, отправляя уведомления в соответствии с настройками
Процедура ОбработатьСобытиеРассылкаУведомлений(Событие)
	
	РаботаСУведомлениями.ОбработатьБизнесСобытие(Событие);
	
КонецПроцедуры

// Отрабатывает событие запуска в обработку - сперва проверяя по своим настройкам, что действительно сработало событие
Процедура ОбработатьСобытиеАвтоматическийЗапускОбработкиОбъектов(Событие, КогоУведомлять, ПрефиксОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Предмет = Событие.Источник;
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет)
		И Не ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъектаОбработки = ДействияСервер.ПараметрыОбъектаОбработки(Предмет);
	Подготовил = ПараметрыОбъектаОбработки.Подготовил;
	Если Не ЗначениеЗаполнено(Подготовил) Тогда
		Подготовил = Событие.Автор; 
	КонецЕсли;
	Подготовил = Сотрудники.ЛюбойПользовательСотрудника(Подготовил);
		
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет) Тогда
		
		ПрефиксОшибки = НСтр("ru = 'Документ не может быть запущен в обработку: '");
		ТекстОшибкиЕстьЗанятыеФайлы = НСтр("ru = 'В документе есть занятые файлы'");
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда
		
		ПрефиксОшибки = НСтр("ru = 'Мероприятие не может быть запущено в обработку: '");
		ТекстОшибкиЕстьЗанятыеФайлы = НСтр("ru = 'В мероприятии есть занятые файлы'");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип предмета %1 (%2)'"),
			Предмет,
			ТипЗнч(Предмет));
		
	КонецЕсли;
	
	Настройка = Справочники.НастройкиОбработкиВидовОбъектов.НастройкаОбработкиДляОбъекта(Предмет);
	
	Если Не ЗначениеЗаполнено(Настройка) Тогда	
		Возврат;
	КонецЕсли;
	
	РеквизитыНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Настройка,
		"ВидБизнесСобытия, УсловияЗапуска");
	
	Если РеквизитыНастройки.ВидБизнесСобытия <> Событие.ВидСобытия Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеОбработки = Неопределено;
	ТекущаяОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
	Если ЗначениеЗаполнено(ТекущаяОбработкаОбъекта) Тогда
		СостояниеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущаяОбработкаОбъекта,
			"Состояние");
	КонецЕсли;		
	
	// уже есть обработка - ничего не делаем	
	Если СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется")
		Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Завершена") Тогда
		Возврат;
	КонецЕсли;	

	КогоУведомлять = Подготовил; 
	
	УсловияЗапуска = РеквизитыНастройки.УсловияЗапуска.Выгрузить();
	
	// тут проверим условия, потом выполним запуск.
	
	Если УсловияЗапуска.Количество() <> 0 Тогда
				
		МассивОшибок = ОбработкиОбъектовВызовСервера.ОшибкиПроверкиУсловийЗапуска(
			Предмет,
			УсловияЗапуска);
			
		Если МассивОшибок.Количество() <> 0 Тогда
			
			ОписаниеУведомления = СтрСоединить(МассивОшибок, Символы.ПС);
			ОписаниеУведомления =
				ПрефиксОшибки
			 	+ Строка(Предмет)
			 	+ Символы.ПС
			 	+ Символы.ПС
			 	+ ОписаниеУведомления;
			
			РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
				ОписаниеУведомления,
				Подготовил,
				Событие.Источник);
			
			Возврат;
			
		КонецЕсли;
			
	КонецЕсли;	
	
	Попытка
		
		// Теперь проверки и сам запуск в обработку. 
		
		ОбработкиОбъектовВызовСервера.ПроверитьРолиФайловПередЗапускомОбработки(Предмет);
		
		ОбработкиОбъектовВызовСервера.ПроверитьЗаполнениеДействий(Предмет);
		
		ЗанятыеФайлы = РаботаСФайламиВызовСервера.ПолучитьСписокВсехЗанятыхФайлов(Предмет);
		Если ЗанятыеФайлы.Количество() <> 0 Тогда
			ВызватьИсключение ТекстОшибкиЕстьЗанятыеФайлы;
		КонецЕсли;	
		
		// кроме подписанных и зашифрованных файлов. (и без служебных)
		МассивФайловДляЗаполнения = РаботаСФайламиВызовСервера.МассивФайловДляЗаполнения(Предмет);
		ОбработкиОбъектовВызовСервера.ЗаполнитьФайлыДокументаПриЗапускеВОбработку(МассивФайловДляЗаполнения);
		
		ОбработкиОбъектовВызовСервера.НачатьОбработку(Предмет);
		
	Исключение
		
		СообщениеОбОшибке =
			ПрефиксОшибки
			+ Символы.ПС 
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ " "
			+ Строка(Предмет);
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru='ОбработкаБизнесСобытий.АвтоматическийЗапускОбработкиОбъектов'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			, 
			, 
			СообщениеОбОшибке);
			
		ВызватьИсключение;
		
	КонецПопытки;		
	
		
КонецПроцедуры	

#КонецОбласти