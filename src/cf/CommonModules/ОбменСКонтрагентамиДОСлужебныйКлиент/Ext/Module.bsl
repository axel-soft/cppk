
#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗадатьВопросОПодготовкеДокументамККорректировке(Форма, ОбработчикЗавершения = Неопределено) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ЗадатьВопросОПодготовкеДокументамККорректировкеПослеОтветаОЗаписи",
			ЭтотОбъект, Контекст);
	
	Если Не ЗначениеЗаполнено(Форма.Параметры.Ключ)
		Или Форма.Модифицированность Тогда
		
		ТекстВопроса = Форма.ТекстВопросаНезаписанныхДанных(НСтр("ru = 'Подготовка документа к корректировке'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

#Область ВыполнениеДействийПоЭДО

#Область ИсходящиеДокументы

// Выполняет действия по исходящим документам
// 
// Параметры:
// 	ПараметрыВыполнения см. ОбменСКонтрагентамиДОСлужебныйКлиент.НовыеПараметрыВыполненияДействийПоИсходящимДокументамЭДО
//
Процедура ВыполнитьДействияПоИсходящимДокументам(ПараметрыВыполнения) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиДОСобытияКлиент.ПередВыполнениемДействийПоИсходящимДокументам(ПараметрыВыполнения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = НовыйКонтекстВыполненияДействийПоИсходящимДокументам();
	
	ЗаполнитьКонтекстВыполненияПоИсходящим(ПараметрыВыполнения, Контекст);
	
	ВыполнитьЭтапПодписания(Контекст);
	
КонецПроцедуры

// Возвращает новые параметры для выполнения действий по исходящим документам ЭДО
// 
// Возвращаемое значение:
//  Структура - Пустая структура параметров выполнения действий:
// * Документы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Массив ссылок на одиночные документы для которых
//                                                                необходимо выполненить действия
// * Пакеты - Массив из УникальныйИдентификатор - Массив УИД пакетов ЭДО для которых необходимо выполнить действия 
// * Действия - Массив из Строка - Массив имен действий, которые необходимо выполнить.
//                                 см. ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ДействияПоИсходящимДокументам
// * УникальныйИдентификатор - УникальныйИдентификатор - УИД формы из которой выполняется действие
// * ДоступныеСертификаты - Соответствие из КлючИЗначение:
//   ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - Сертификат, которым можно подписать
//   ** Значение - Структура:
//       *** Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность -
//                                       Доверенность, с помощью которой необходимо подписать по данному сертификату
// * ОбработчикЗавершения - ОписаниеОповещения, Неопределено - Обработчик, выполненый по завершению операций
Функция НовыеПараметрыВыполненияДействийПоИсходящимДокументамЭДО() Экспорт
	
	ПараметрыВыполненияДействий = Новый Структура;
	
	ПараметрыВыполненияДействий.Вставить("Документы", Новый Массив);
	ПараметрыВыполненияДействий.Вставить("Пакеты", Новый Массив);
	ПараметрыВыполненияДействий.Вставить("Действия", Новый Массив);
	ПараметрыВыполненияДействий.Вставить("УникальныйИдентификатор", УникальныйИдентификаторПустой());
	ПараметрыВыполненияДействий.Вставить("ДоступныеСертификаты", Новый Соответствие);
	ПараметрыВыполненияДействий.Вставить("ОбработчикЗавершения", Неопределено);
	
	Возврат ПараметрыВыполненияДействий;
	
КонецФункции

#КонецОбласти

#Область ВходящиеДокументы

// Принимает входящие документы и пакеты по ЭДО
// 
// Параметры:
//  ПараметрыВыполнения см. ОбменСКонтрагентамиДОСлужебныйКлиент.НовыеПараметрыВыполненияДействийПоВходящимДокументамДО
Процедура ПринятьПоЭДО(ПараметрыВыполнения) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиДОСобытияКлиент.ПередПриемомПоЭДО(ПараметрыВыполнения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = НовыйКонтекстПриемаДокументовПоЭДО();
	
	ЗаполнитьКонтекстПриемаДокументовПоЭДО(ПараметрыВыполнения, Контекст);
	
	ВыполнитьСозданиеОтветногоТитула(Контекст);
	
КонецПроцедуры

// Возвращает новые параметры для выполнения действий по входящим документам ЭДО:
// 
// Возвращаемое значение:
//  Структура - Пустые параметры выполнения действий:
// * Документы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Массив ссылок на одиночные документы для которых
//                                                                необходимо выполненить действия
// * Пакеты - Массив из УникальныйИдентификатор - Массив УИД пакетов ЭДО для которых необходимо выполнить действия
// * УникальныйИдентификатор - УникальныйИдентификатор - УИД формы из которой выполняется действие
// * ДоступныеСертификаты - Соответствие из КлючИЗначение:
//   ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - Сертификат, которым можно подписать
//   ** Значение - Структура:
//       *** Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность -
//                                       Доверенность, с помощью которой необходимо подписать по данному сертификату
// * ОбработчикЗавершения - ОписаниеОповещения, Неопределено - Обработчик, выполненый по завершению операций
Функция НовыеПараметрыВыполненияДействийПоВходящимДокументамДО() Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Документы", Новый Массив);
	ПараметрыВыполнения.Вставить("Пакеты", Новый Массив);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификаторПустой());
	ПараметрыВыполнения.Вставить("ДоступныеСертификаты", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", Неопределено);
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

// Отклоняет входящие документы и пакеты по ЭДО
// 
// Параметры:
//  ПараметрыВыполнения см. ОбменСКонтрагентамиДОСлужебныйКлиент.НовыеПараметрыВыполненияДействийПоВходящимДокументамДО
Процедура ОтклонитьПоЭДО(ПараметрыВыполнения) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиДОСобытияКлиент.ПередОтказомПоЭДО(ПараметрыВыполнения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = НовыйКонтекстОтклоненияДокументовПоЭДО();
	
	ЗаполнитьКонтекстОтклоненияДокументовПоЭДО(ПараметрыВыполнения, Контекст);
	
	ВыполнитьОтклонениеВходящихОбъектовЭДО(Контекст);
	
КонецПроцедуры

#КонецОбласти

Функция ПоставитьДокументВОчередьНаОтправкуПоЭДО(
			Документ, 
			КонтрагентыГотовыеКЭДО = Неопределено,
			ПроверятьПодписанДокумент = Истина, 
			УстановитьСостояниеПодписан = Ложь, 
			ВыводитьСообщение = Истина) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Если ОбменСКонтрагентамиДОВызовСервера.ПоставитьДокументВОчередьФормированияЭД(
			Документ, 
			КонтрагентыГотовыеКЭДО,
			ПроверятьПодписанДокумент, 
			УстановитьСостояниеПодписан, 
			ВыводитьСообщение) = Истина Тогда

		Текст = НСтр("ru = 'Документ поставлен в очередь на отправку контрагентам по ЭДО.'");
		Состояние(Текст, , , БиблиотекаКартинок.ЭмблемаСервиса1СЭДО);
		
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

// Ставит документы в очередь на отправку документов ЭДО и оповещает о изменении статуса ЭДО документов ДО
// 
// Параметры:
//  МассивДокументов - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Массив документов ДО,
//                     которые необходимо поставить в очередь на отправку
// 
// Возвращаемое значение:
//  Булево - Результат выполнения операции, истина, если операция завершилась успешно, Ложь - в противтом случае.
// 
Функция ПоставитьДокументыВОчередьНаОтправкуПоЭДО(МассивДокументов) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	РезультатПостановкиВОчередь =
		ОбменСКонтрагентамиДОВызовСервера.ПоставитьДокументыВОчередьФормированияЭД(МассивДокументов);
	
	Если РезультатПостановкиВОчередь.ПоставленныеВОчередь.Количество() > 0 Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Документы",
			РезультатПостановкиВОчередь.ПоставленныеВОчередь);
		
		Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
	КонецЕсли;
	
	Возврат РезультатПостановкиВОчередь.Успех;
	
КонецФункции

// Вызывает процедуру принудительного закрытия обмена ЭДО документов ДО
// 
// Параметры:
//  ДокументыДО - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Массив документов ДО,
//                     которые необходимо закрыть принудительно
//  ОбработчикЗавершения - ОписаниеОповещения - Описание обработчика завершения операции
// 
Процедура ЗакрытьДокументыПринудительно(ДокументыДО, ОбработчикЗавершения = Неопределено) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Документы", ДокументыДО);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Обработчик = Новый ОписаниеОповещения(
		"ЗакрытьДокументыПринудительноПослеВводаПричины",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ТекстПричины = "";
	ПоказатьВводСтроки(
		Обработчик,
		ТекстПричины,
		НСтр("ru = 'Укажите причину закрытия документов'"), ,
		Истина);
	
КонецПроцедуры

// Вызывает процедуру принудительного закрытия ЭД
// 
// Параметры:
//  ЭД - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Массив ЭД, которые необходимо
//                                                              закрыть принудительно
//  ОбработчикЗавершения - ОписаниеОповещения - Описание обработчика завершения операции
// 
Процедура ЗакрытьПринудительноЭД(ЭД, ОбработчикЗавершения = Неопределено) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭД", ЭД);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Обработчик = Новый ОписаниеОповещения(
		"ЗакрытьПринудительноЭДПослеВводаПричины",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ТекстПричины = "";
	ПоказатьВводСтроки(
		Обработчик,
		ТекстПричины,
		НСтр("ru = 'Укажите причину закрытия документов'"), ,
		Истина);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьДанныеСертификатовДляЭДО(Форма, ОбработчикЗавершения = Неопределено) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ОбработчикПолученияОтпечатков = Новый ОписаниеОповещения("ЗаполнитьДанныеСертификатовДляЭДОПродолжение",
		ЭтотОбъект, ПараметрыОбработчика);
	
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(ОбработчикПолученияОтпечатков, Истина, Ложь);
	
КонецПроцедуры

Процедура ПроверитьНаличиеСертификатовЭДО(Форма, ОбработчикЗавершения = Неопределено, СообщатьОбОшибке = Истина) Экспорт
	
	Форма.ЕстьЭДО();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	Контекст.Вставить("СообщатьОбОшибке", СообщатьОбОшибке);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения(
		"ПроверитьНаличиеСертификатовЭДОПослеОбновленияСертификатов", ЭтотОбъект, Контекст);
	
	ЗаполнитьДанныеСертификатовДляЭДО(Форма, ОбработчикПродолжения);
	
КонецПроцедуры

#Область ПакетыПоЭДО

// Открывает форму создания нового исходящего пакета ЭДО с подбором документов
// 
// Параметры:
//  Документы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Массив ссылок на документы,
//                                                               из которых должен состоять пакет
//  ВладелецФормы - ФормаКлиентскогоПриложения - Владелец открываемой формы
//  ОбработчикЗавершения - ОписаниеОповещения - Обработчик, который будет выполнен после закрытия формы
Процедура ОткрытьФормуСозданияПакетаЭДО(Документы, ВладелецФормы, ОбработчикЗавершения = Неопределено) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиДОСобытияКлиент.ПередОткрытиемФормыСозданияПакетаЭДО(Документы, ВладелецФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументыДляСозданияПакета", Документы);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДОДокументооборот.Форма.ИзменениеСоставаПакета",
		ПараметрыФормы, ВладелецФормы, , , , ОбработчикЗавершения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму изменения состава существующего пакета для добавления или удаления документов
// 
// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор - УИД пакета ЭДО состав которого необходимо изменить
//  ВладелецФормы - ФормаКлиентскогоПриложения - Владелец открываемой формы
//  ОбработчикЗавершения - ОписаниеОповещения - Обработчик, который будет выполнен после закрытия формы
Процедура ОткрытьФормуИзмененияСоставаПакетаЭДО(ИдентификаторПакета,
	ВладелецФормы, ОбработчикЗавершения = Неопределено) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиДОСобытияКлиент.ПередОткрытиемФормыИзмененияСоставаПакетаЭДО(
		ИдентификаторПакета, ВладелецФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторПакета", ИдентификаторПакета);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДОДокументооборот.Форма.ИзменениеСоставаПакета",
		ПараметрыФормы, ВладелецФормы, , , , ОбработчикЗавершения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Объединяет документы в исходящий пакет ЭДО
// 
// Параметры:
//  Документы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Документы, которые необходимо объединить в пакет
// 
// Возвращаемое значение:
//  Структура - Объединить документы в исходящий пакет ЭДО:
// * Успех - Булево - Успешно ли завершена операция
// * ОписаниеОшибки - Строка - Описание ошибки, если выполнить объединение не удалось
// * ИдентификаторПакета - УникальныйИдентификатор - УИД созданного пакета
// * Организация - СправочникСсылка.Организации - Организация созданного пакета
// * Контрагент - СправочникСсылка.Контрагенты - Контрагент созданного пакета
Функция ОбъединитьДокументыВИсходящийПакетЭДО(Документы) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	РезультатОбъединения = ОбменСКонтрагентамиДОВызовСервера.ОбъединитьДокументыВИсходящийПакетЭДО(
		Документы);
	
	Если РезультатОбъединения.Успех Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Документы", Документы);
		
		Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИдентификаторыПакетов",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РезультатОбъединения.ИдентификаторПакета));
		
		Оповестить("ИзменениеПакетовЭДОДО", ПараметрыОповещения);
		
	КонецЕсли;
	
	Возврат РезультатОбъединения;
	
КонецФункции

// Изменяет состав исходящего по ЭДО пакета документов.
//  Если в составе пакета остается менее 2-х документов, то пакет удаляется.
// 
// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор - УИД пакета, состав которого необходимо изменить
//  ДобавляемыеДокументы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Документы к добавлению в пакет
//  УдаляемыеДокументы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Документы к удалению из состава пакета
// 
// Возвращаемое значение:
//  Структура - Результат изменения состава пакета:
// * Успех - Булево - Удалось ли выполнить операцию
// * ОписаниеОшибки - Строка - Описание ошибки, если изменить состав пакета не удалось
// * ПакетУдален - Булево - Указывает, если в ходе изменения состава пакет был удален
Функция ИзменитьСоставИсходящегоПакетаЭДО(ИдентификаторПакета, ДобавляемыеДокументы, УдаляемыеДокументы) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	РезультатИзменения = ОбменСКонтрагентамиДОВызовСервера.ИзменитьСоставИсходящегоПакетаЭДО(
		ИдентификаторПакета, ДобавляемыеДокументы, УдаляемыеДокументы);
	
	Если РезультатИзменения.Успех Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Документы", Новый Массив);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыОповещения.Документы, ДобавляемыеДокументы);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыОповещения.Документы, УдаляемыеДокументы);
		
		Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИдентификаторыПакетов",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПакета));
		
		Оповестить("ИзменениеПакетовЭДОДО", ПараметрыОповещения);
		
	КонецЕсли;
	
	Возврат РезультатИзменения;
	
КонецФункции

// Открывает форму пакета ЭДО с фокусировкой на текущем документе
// 
// Параметры:
//  Документ - ОпределяемыйТип.ДокументДОДляЭДО - Документ, который необходимо открыть в пакете ЭДО
Процедура ОткрытьДокументВПакетеЭДО(Документ) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументДО", Документ);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДОДокументооборот.Форма.ПросмотрФайлаПакетаЭДО", ПараметрыФормы);
	
КонецПроцедуры

// Открывает форму пакета ЭДО
// 
// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор - УИД пакета ЭДО
Процедура ОткрытьПакетЭДО(ИдентификаторПакета) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторПакета", ИдентификаторПакета);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДОДокументооборот.Форма.ПросмотрФайлаПакетаЭДО", ПараметрыФормы);
	
КонецПроцедуры

// Запускает процедуру добавления документа к пакету ЭДО -- открывает форму выбора исходящего пакета
// 
// Параметры:
//  Документ - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО, который необходимо добавить к пакету
//  ОбработчикЗавершения - ОписаниеОповещения - Обработчик который будет выполнен после выполнения операции
//  Форма - ФормаКлиентскогоПриложения - Форма из которой вызывает процедура
Процедура ДобавитьДокументКПакету(Документ, ОбработчикЗавершения, Форма) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиДОСобытияКлиент.ПередДобавлениемДокументаКПакету(Документ, Форма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Документ", Документ);
	Контекст.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ОбработчикЗакрытияФормы = Новый ОписаниеОповещения("ДобавитьДокументКПакетуПослеВыбораПакета",
		ЭтотОбъект, Контекст);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Документ);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДОДокументооборот.Форма.ВыборИсходящегоПакетаЭДО",
		ПараметрыФормы, Форма, , , , ОбработчикЗакрытияФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение ДобавитьДокументКПакету
Процедура ДобавитьДокументКПакетуПослеВыбораПакета(ИдентификаторПакета, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Неопределено);
		Возврат;
	КонецЕсли;
	
	РезультатИзменения = ИзменитьСоставИсходящегоПакетаЭДО(ИдентификаторПакета,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контекст.Документ), Новый Массив);
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, РезультатИзменения);
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеДокументовЭДОВДО

// Начинает обработку входящих ЭДО для которых отмечено автоматическое создание документов ДО
// 
// Параметры:
//  ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы из которой запущена операция
Процедура НачатьСозданиеДокументовДОВАвтоматическомРежиме(ИдентификаторФормы = Неопределено) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиДОСобытияКлиент.ПередСозданиемДокументовДОВАвтоматическомРежиме(ИдентификаторФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикЗавершения =
		Новый ОписаниеОповещения("ОбработатьЗавершениеАвтоматическогоСозданияДокументовДО", ЭтотОбъект);
	
	ДлительнаяОперация =
		ОбменСКонтрагентамиДОВызовСервера.НачатьАвтоматическоеОтражениеВходящихЭДО(ИдентификаторФормы);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОбработчикЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

// Начинает процедуру ручного создания документа ДО по входящему ЭДО
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Докумен ЭДО
Процедура НачатьСозданиеДокументаДО(ЭлектронныйДокумент) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиДОСобытияКлиент.ПередСозданиемДокументаДО(ЭлектронныйДокумент, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоОтражениюДокумента = ОбменСКонтрагентамиДОВызовСервера.ДанныеПоОтражениюДокументаЭДО(ЭлектронныйДокумент);
	
	Если ДанныеПоОтражениюДокумента.ЕстьДокументДО Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'С входящим документом ЭДО уже связан документ 1С:Документооборот.'"), ,
			НСтр("ru = 'Документ уже создан.'"));
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоОтражениюДокумента.ТребуетОтражения
		И ДанныеПоОтражениюДокумента.ОжидаетАвтоматическогоОтражения Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		ОбработчикОтвета =
			Новый ОписаниеОповещения("СоздатьДокументДОПослеОтветаНаВопросОСнятииСАвтоматическогоОтражения",
				ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОбработчикОтвета,
			НСтр("ru = 'Документ ожидает автоматического создания в фоновом задании.
			|Попытка ручного создания исключит документ из автоматической обработки, в последующем документ можно будет создать только вручную.
			|Продолжить ручное создание?'"), РежимДиалогаВопрос.ДаНет, , ,
			НСтр("ru = 'Автоматическое создание'"));
		
	Иначе
		
		СоздатьДокументДОПослеСнятияСАвтоматическогоУчета(ЭлектронныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет входящий ЭДО из списка к созданию документов ДО
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Докумен ЭДО
Процедура УдалитьДокументЭДОИзСпискаКСозданиюВДО(ДокументЭДО) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиДОСобытияКлиент.ПередУдалениемДокументаЭДОИзСпискаКСозданиюВДО(ДокументЭДО, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументЭДО", ДокументЭДО);
	
	ОбработчикОтвета = Новый ОписаниеОповещения("УдалитьДокументЭДОИзСпискаКСозданиюВДОПослеОтветаНаВопрос",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОбработчикОтвета,
		НСтр("ru = 'Документ будет исключен из списка к созданию документов 1С:Документооборот, создать документ можно будет только из карточки документа ЭДО.
			|Продолжить?'"), РежимДиалогаВопрос.ДаНет, , ,
		НСтр("ru = 'Не создавать документ'"));
	
КонецПроцедуры

// Спрашивает у пользователя, необходимо ли записать документ ДО при отражении входящего ЭДО
// 	Если ответ запомнен, то выполняет обработчик ответа с результатом КодВозвратаДиалога.Да
// 
// Параметры:
//  ОбработчикОтвета - ОписаниеОповещения - Обработчик ответа на вопрос.
Процедура СпроситьОЗаписиПриОтраженииЭДО(ОбработчикОтвета, Отказ) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Если Не ТребуетсяПоказыватьВопросЗаписиПриОтраженииЭДО() Тогда
		ВыполнитьОбработкуОповещения(ОбработчикОтвета,
			КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикОтвета", ОбработчикОтвета);
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьОтветОЗаписиПриОтраженииЭДО",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Отражение входящего ЭДО'");
	
	Отказ = Истина;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Обработчик,
		НСтр("ru = 'Требуется запись документа.
			|Документ будет связан с входящим документом ЭДО, при записи будет создан файл ЭДО и скопированы подписи контрагента. Отменить операцию можно будет только пометив документ на удаление.
			|Продолжить запись?'"),
		РежимДиалогаВопрос.ДаНет,
		ПараметрыВопроса);
	
КонецПроцедуры

// Оповещает о отразении входящего ЭДО в документах ДО
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Документ ЭДО
//  ДокументДО - ОпределяемыйТип.ДокументДОДляЭДО - Созданный документ ДО
Процедура ОповеститьООтраженииВходящегоЭДО(ДокументЭДО, ДокументДО) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	
	ОбработанныеДокументы = Новый Соответствие;
	ОбработанныеДокументы.Вставить(ДокументЭДО, ДокументДО);
	
	ПараметрыОповещения.Вставить("ОбработанныеДокументы", ОбработанныеДокументы);
	
	Оповестить("ОтражениеВходящихЭДО", ПараметрыОповещения);
	
КонецПроцедуры

// Ставит входящие ЭДО в очередь к автоматическому отражению в документах ДО
// 
// Параметры:
//  ДокументыЭДО - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО - входящие документы ЭДО
// 
// Возвращаемое значение:
//  Булево - Удалось ли поставить какие-то документы из переданных
Функция ПоставитьДокументыЭДОКАвтоматическомуОтражению(ДокументыЭДО) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиДОСобытияКлиент.ПередПостановкойДокументовЭДОКАвтоматическомуОтражению(ДокументыЭДО, Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = ОбменСКонтрагентамиДОВызовСервера.ПоставитьДокументыЭДОКАвтоматическомуОтражению(ДокументыЭДО);
	
	Если Результат.ОбработанныеДокументы.Количество() > 0 Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	Если Результат.ОбработанныеДокументы.Количество() > 0 Тогда
		ТекстОповещения =
			СтрШаблон(НСтр("ru = 'В очередь приема сообщений ЭДО %1.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';поставлен %1 документ;;поставлены %1 документа;поставлено %1 документов;поставлено %1 документов'"),
					Результат.ОбработанныеДокументы.Количество()));
	Иначе
		ТекстОповещения =
			НСтр("ru = 'В очередь не поставлено ни одного документа'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Изменение очереди приема ЭДО'"), ,
		ТекстОповещения, ,
		?(Результат.ОбработанныеДокументы.Количество() > 0,
			СтатусОповещенияПользователя.Информация,
			СтатусОповещенияПользователя.Важное));
	
	Для Каждого ОписаниеОшибки Из Результат.Ошибки Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	КонецЦикла;
	
	Возврат (Результат.Ошибки.Количество() = 0);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗадатьВопросОПодготовкеДокументамККорректировкеПослеОтветаОЗаписи(Результат, Контекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Контекст.Форма;
	
	Если Не Форма.Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ЗадатьВопросОПодготовкеДокументамККорректировкеПослеОтветаОУдаленииЭП",
			ЭтотОбъект, Контекст);
	
	Если Форма.Объект.ПодписанЭП
		ИЛИ Форма.Файлы.НайтиСтроки(Новый Структура("ПодписанЭП", Истина)).Количество() > 0 Тогда
		
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Чтобы вернуть документ в режим редактирования, необходимо удалить электронные подписи документа и файлов.
						|Удалить электронные подписи?'"),
			РежимДиалогаВопрос.ДаНет, ,
			КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьВопросОПодготовкеДокументамККорректировкеПослеОтветаОУдаленииЭП(Результат, Контекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Контекст.Форма;
	
	ОбменСКонтрагентамиДОВызовСервера.ПодготовитьДокументККорректировке(
		Форма.Объект.Ссылка, 
		Форма.Объект.Стороны[1].Сторона,
		ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Исходящий"),
		Истина,
		Форма.УникальныйИдентификатор);
			
	Форма.Прочитать();	
	Форма.ДокументПодписанНами = Ложь;
	
	Оповестить("ОбновитьДанныеФормыПослеПодготовкиДокументаККорректировке", Форма.Объект.Ссылка);
	
	Если Контекст.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЗакрытьДокументыПринудительно()
// 
Процедура ЗакрытьДокументыПринудительноПослеВводаПричины(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для принудительного закрытия документов необходимо указать причину.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	РезультатЗакрытия = ОбменСКонтрагентамиДОВызовСервера.ЗакрытьДокументыПринудительно(
		ДополнительныеПараметры.Документы,
		Результат);
	
	Если РезультатЗакрытия.ЗакрытыеДокументы.Количество() > 0 Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Документы",
			РезультатЗакрытия.ЗакрытыеДокументы);
		
		Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЗакрытьПринудительноЭД()
// 
Процедура ЗакрытьПринудительноЭДПослеВводаПричины(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для принудительного закрытия документов необходимо указать причину.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(
		НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"));
	
	ПараметрыВыполненияДействийЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийЭДО.ОбъектыДействий.ЭлектронныеДокументы = ДополнительныеПараметры.ЭД;
	
	ПараметрыДействия = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
	ПараметрыДействия.Комментарий = Результат;
	
	ПараметрыВыполненияДействийЭДО.ДополнительныеПараметрыДействий.Вставить(
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"), ПараметрыДействия);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ЗакрытьПринудительноЭДПослеЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(
		ОбработчикЗавершения,
		ПараметрыВыполненияДействийЭДО);
	
КонецПроцедуры

Процедура ЗакрытьПринудительноЭДПослеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДокументыВладельцы", ДополнительныеПараметры.ЭД);
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("Ошибки", Новый Массив);
	
	Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСертификатовДляЭДОПродолжение(Отпечатки, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	
	Для Каждого Строка Из Форма.СертификатыДляЭДО Цикл
		Строка.ДоступенНаКлиенте = Ложь;
	КонецЦикла;
	
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого Элемент Из Отпечатки Цикл
			
			Отпечаток = Элемент.Ключ;
			
			ОтборСертификата = Новый Структура("Отпечаток", Отпечаток);
			СтрокиСуществующие = Форма.СертификатыДляЭДО.НайтиСтроки(ОтборСертификата);
			
			Если СтрокиСуществующие.Количество() = 0 Тогда
				
				НоваяСтрока = Форма.СертификатыДляЭДО.Добавить();
				НоваяСтрока.Отпечаток = Отпечаток;
				НоваяСтрока.ДоступенНаКлиенте = Истина;
				
			Иначе
				
				Для Каждого СтрокаСуществующая Из СтрокиСуществующие Цикл
					СтрокаСуществующая.ДоступенНаКлиенте = Истина;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла
	КонецЕсли;
	
	Если Параметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикЗавершения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеСертификатовЭДОПослеОбновленияСертификатов(Результат, Контекст) Экспорт
	
	Форма = Контекст.Форма;
	
	ДоступныеДляЭДООтпечатки = Новый Массив;
	
	Для Каждого СтрокаСертификата Из Форма.СертификатыДляЭДО Цикл
		Если СтрокаСертификата.ДоступенДляЭДО
			И (СтрокаСертификата.ДоступенНаКлиенте Или СтрокаСертификата.ДоступенНаСервере) Тогда
			
			ДоступныеДляЭДООтпечатки.Добавить(СтрокаСертификата.Отпечаток);
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступныеДляЭДООтпечатки.Количество() = 0 И Контекст.СообщатьОбОшибке Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Невозможно выполнить действие по ЭДО, поскольку не обнаружено сертификатов электронной подписи
			|по которым разрешен обмен ЭДО. Проверьте наличие сертификата в хранилище личных сертификатов пользователя и
			|разрешенные к обмену сертификаты в настройках учетной записи ЭДО.'"));
		Возврат;
	КонецЕсли;
	
	СертификатыПоОтпечаткам =
		ОбменСКонтрагентамиДОВызовСервера.СертификатыПользователяПоОтпечаткам(ДоступныеДляЭДООтпечатки);
	
	Если СертификатыПоОтпечаткам.Количество() = 0 И Контекст.СообщатьОбОшибке Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Невозможно выполнить действие по ЭДО, поскольку сертификаты для ЭДО недоступны пользователю 1С.
			|Укажите в карточке сертификата пользователя, либо выполните вход под пользователем, которому принадлежат сертификаты.'"));
		Возврат;
	КонецЕсли;
	
	ДоступныеСертификаты = Новый Соответствие;
	
	Для Каждого СтрокаСертификата Из Форма.СертификатыДляЭДО Цикл
		
		Если Не СтрокаСертификата.ДоступенДляЭДО
			Или (Не СтрокаСертификата.ДоступенНаКлиенте
				И Не СтрокаСертификата.ДоступенНаСервере) Тогда
			
			Продолжить;
		КонецЕсли;
		
		СсылкаНаСертификат = СертификатыПоОтпечаткам[СтрокаСертификата.Отпечаток];
		
		Если ЗначениеЗаполнено(СсылкаНаСертификат) Тогда
		
			ПараметрыСертификата = Новый Структура;
			ПараметрыСертификата.Вставить("Доверенность", СтрокаСертификата.Доверенность);
			
			ДоступныеСертификаты.Вставить(СсылкаНаСертификат, ПараметрыСертификата);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если Контекст.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, ДоступныеСертификаты);
	КонецЕсли;
	
КонецПроцедуры

#Область ВыполнениеДействийПоЭДО

#Область ИсходящиеДокументы

// Новый контекст выполнения действий по исходящим документам.
// 
// Возвращаемое значение:
//  Структура:
//    * Документы - Соответствие Из КлючИЗначение:
//      ** Ключ - ОпределяемыйТип.ДокументДОДляЭДО
//      ** Значение - Структура:
//        *** Состояние - ПеречислениеСсылка.СостоянияЭДОДокументооборот
//        *** Направление - ПеречислениеСсылка.НаправленияЭДО
//        *** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//        *** ИдентификаторПакета - УникальныйИдентификатор
//        *** Организация - СправочникСсылка.Организации
//        *** ДанныеЗаполненияФормализованногоДокумента - см. ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДляЗаполненияФормализованногоДокумента
//    * Пакеты - Соответствие Из КлючИЗначение:
//      ** Ключ - УникальныйИдентификатор
//      ** Значение - Структура:
//        *** ИдентификаторПакетаБЭД - Неопределено, УникальныйИдентификатор - Идентификатор пакета БЭД
//        *** Направление - ПеречислениеСсылка.НаправленияЭДО
//        *** Документы - Соответствие Из КлючИЗначение:
//          **** Ключ - ОпределяемыйТип.ДокументДОДляЭДО
//          **** Значение - Структура:
//            ***** Состояние - ПеречислениеСсылка.СостоянияЭДОДокументооборот
//            ***** Направление - ПеречислениеСсылка.НаправленияЭДО
//            ***** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//            ***** ИдентификаторПакета - УникальныйИдентификатор
//            ***** Организация - СправочникСсылка.Организации
//            ***** ДанныеЗаполненияФормализованногоДокумента - см. ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДляЗаполненияФормализованногоДокумента
//    * ЭтапыКВыполнению - Соответствие Из КлючИЗначение:
//      ** Ключ - Строка - см. ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам
//      ** Значение - Булево
//    * ДанныеДляЭтапов - Соответствие Из КлючИЗначение
//    * РезультатыВыполненияЭтапов - Соответствие Из КлючИЗначение
//    * ОшибкиОбработки - Структура:
//      ** Документы - Соответствие Из КлючИЗначение
//      ** Пакеты - Соответствие Из КлючИЗначение
//    * ПаролиСертификатов - Соответствие Из КлючИЗначение
//    * УникальныйИдентификатор - Неопределено, УникальныйИдентификатор - Идентификатор формы владельца
//    * ОбработчикЗавершения - ОписаниеОповещения
//
Функция НовыйКонтекстВыполненияДействийПоИсходящимДокументам()
	
	Контекст = Новый Структура;
	
	Контекст.Вставить("Документы", Новый Соответствие);
	Контекст.Вставить("Пакеты", Новый Соответствие);
	
	ВозвможныеЭтапы = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам();
	
	ЭтапыКВыполнению = Новый Соответствие;
	ЭтапыКВыполнению.Вставить(ВозвможныеЭтапы.Подписание, Ложь);
	ЭтапыКВыполнению.Вставить(ВозвможныеЭтапы.ФормированиеЭД, Ложь);
	ЭтапыКВыполнению.Вставить(ВозвможныеЭтапы.ФормированиеПакетовЭДО, Ложь);
	ЭтапыКВыполнению.Вставить(ВозвможныеЭтапы.Отправка, Ложь);
	
	Контекст.Вставить("ЭтапыКВыполнению", ЭтапыКВыполнению);
	
	ДанныеДляЭтапов = Новый Соответствие;
	
	ДанныеДляЭтапов.Вставить(ВозвможныеЭтапы.Подписание);
	ДанныеДляЭтапов.Вставить(ВозвможныеЭтапы.ФормированиеЭД);
	ДанныеДляЭтапов.Вставить(ВозвможныеЭтапы.ФормированиеПакетовЭДО);
	ДанныеДляЭтапов.Вставить(ВозвможныеЭтапы.Отправка);
	
	Контекст.Вставить("ДанныеДляЭтапов", ДанныеДляЭтапов);
	
	РезультатыВыполненияЭтапов = Новый Соответствие();
	
	РезультатыВыполненияЭтапов.Вставить(ВозвможныеЭтапы.Подписание);
	РезультатыВыполненияЭтапов.Вставить(ВозвможныеЭтапы.ФормированиеЭД);
	РезультатыВыполненияЭтапов.Вставить(ВозвможныеЭтапы.ФормированиеПакетовЭДО);
	РезультатыВыполненияЭтапов.Вставить(ВозвможныеЭтапы.Отправка);
	
	Контекст.Вставить("РезультатыВыполненияЭтапов", РезультатыВыполненияЭтапов);
	
	ОшибкиОбработки = Новый Структура;
	ОшибкиОбработки.Вставить("Документы", Новый Соответствие);
	ОшибкиОбработки.Вставить("Пакеты", Новый Соответствие);
	
	Контекст.Вставить("ОшибкиОбработки", ОшибкиОбработки);
	
	Контекст.Вставить("ПаролиСертификатов", Новый Соответствие);
	
	Контекст.Вставить("УникальныйИдентификатор");
	Контекст.Вставить("ОбработчикЗавершения");
	
	Возврат Контекст;
	
КонецФункции

Процедура ЗаполнитьКонтекстВыполненияПоИсходящим(ПараметрыВыполнения, Контекст)
	
	ВозможныеЭтапы = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам();
	
	ОбменСКонтрагентамиДОВызовСервера.ЗаполнитьДанныеКонтекстаДляИсходящихДокументов(
		Контекст, ПараметрыВыполнения.Документы, ПараметрыВыполнения.Пакеты, ПараметрыВыполнения.Действия);
	
	Если Контекст.ЭтапыКВыполнению[ВозможныеЭтапы.Подписание] Тогда
		Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.Подписание].Вставить(
			"ДоступныеСертификаты", ПараметрыВыполнения.ДоступныеСертификаты);
	КонецЕсли;
	
	Контекст.УникальныйИдентификатор = ПараметрыВыполнения.УникальныйИдентификатор;
	Контекст.ОбработчикЗавершения = ПараметрыВыполнения.ОбработчикЗавершения;
	
КонецПроцедуры

Процедура ВыполнитьЭтапПодписания(Контекст)
	
	ЭтапПодписания = 
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().Подписание;
	
	НеобходимоВыполнитьЭтап =
		(Контекст.ЭтапыКВыполнению[ЭтапПодписания] = Истина)
		И (Контекст.ДанныеДляЭтапов[ЭтапПодписания].Документы.Количество() > 0);
	
	Если НеобходимоВыполнитьЭтап Тогда
		ПодписатьИсходящиеДокументыПоЭДО(Контекст);
	Иначе
		ВыполнитьЭтапФормированияЭД(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыполнениеЭтапаПодписания(Контекст)
	
	ВозможныеЭтапы = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам();
	
	Контекст.ЭтапыКВыполнению[ВозможныеЭтапы.Подписание] = Ложь;
	
	РезультатПодписания = Контекст.РезультатыВыполненияЭтапов[ВозможныеЭтапы.Подписание];
	
	Для Каждого Элемент Из РезультатПодписания.ОшибкиПодписания Цикл
		
		Документ = Элемент.Ключ;
		ОписаниеОшибки = Элемент.Значение;
		
		ИДПакета = ИдентификаторПакетаПоКонтекстуДокументовИсходящих(Контекст, Документ);
		
		ДанныеДляФормированияЭД = Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.ФормированиеЭД];
		Если ДанныеДляФормированияЭД <> Неопределено Тогда
			ИндексДокумента = ДанныеДляФормированияЭД.Документы.Найти(Документ);
			Если ИндексДокумента <> Неопределено Тогда
				ДанныеДляФормированияЭД.Документы.Удалить(ИндексДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИДПакета) Тогда
			ДанныеДляФормированияПакетовЭДО = Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.ФормированиеПакетовЭДО];
			Если ДанныеДляФормированияПакетовЭДО <> Неопределено Тогда
				ИндексПакета = ДанныеДляФормированияПакетовЭДО.ИдентификаторыПакетов.Найти(ИДПакета);
				Если ИндексПакета <> Неопределено Тогда
					ДанныеДляФормированияПакетовЭДО.ИдентификаторыПакетов.Удалить(ИндексПакета);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеДляОтправки = Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.Отправка];
		Если ДанныеДляОтправки <> Неопределено Тогда
			
			Если ДанныеДляОтправки.Документы[Документ] <> Неопределено Тогда
				ДанныеДляОтправки.Документы.Удалить(Документ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИДПакета)
				И ДанныеДляОтправки.Пакеты[ИДПакета] <> Неопределено Тогда
				
				ДанныеДляОтправки.Пакеты.Удалить(ИДПакета);
			КонецЕсли;
			
		КонецЕсли;
		
		Контекст.ОшибкиОбработки.Документы.Вставить(Документ,
			СтрШаблон(НСтр("ru = 'Не удалось подписать документ:
					|%1'"),
				ОписаниеОшибки));
		
		Если ЗначениеЗаполнено(ИДПакета) Тогда
			Контекст.ОшибкиОбработки.Пакеты.Вставить(ИДПакета,
				НСтр("ru = 'Не удалось подписать документы пакета'"));
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатПодписания.Свойство("ПаролиСертификатов")
		И ТипЗнч(РезультатПодписания.ПаролиСертификатов) = Тип("Соответствие") Тогда
		
		Контекст.ПаролиСертификатов = РезультатПодписания.ПаролиСертификатов;
	КонецЕсли;
	
	// Если есть этап формирования ЭД, то нужно к данным формирования добавить подписанные документы
	Если Контекст.ЭтапыКВыполнению[ВозможныеЭтапы.ФормированиеЭД] Тогда
		
		ДанныеДляФормированияЭД = Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.ФормированиеЭД];
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеДляФормированияЭД.Документы,
			РезультатПодписания.ПодписанныеДокументы);
		
	КонецЕсли;
	
	ВыполнитьЭтапФормированияЭД(Контекст);
	
КонецПроцедуры

Процедура ВыполнитьЭтапФормированияЭД(Контекст)
	
	ЭтапФормирования = 
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().ФормированиеЭД;
	
	НеобходимоВыполнитьЭтап =
		(Контекст.ЭтапыКВыполнению[ЭтапФормирования] = Истина)
		И (Контекст.ДанныеДляЭтапов[ЭтапФормирования].Документы.Количество() > 0);
	
	Если НеобходимоВыполнитьЭтап Тогда
		СформироватьИсходящийЭДПоДокументамДО(Контекст);
	Иначе
		ВыполнитьЭтапФормированияПакетовЭДО(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыполнениеЭтапаФормированияЭД(Контекст)
	
	ВозможныеЭтапы = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам();
	
	Контекст.ЭтапыКВыполнению[ВозможныеЭтапы.ФормированиеЭД] = Ложь;
	
	РезультатФормирования = Контекст.РезультатыВыполненияЭтапов[ВозможныеЭтапы.ФормированиеЭД];
	
	Для Каждого Элемент Из РезультатФормирования.ОшибкиФормирования Цикл
		
		Документ = Элемент.Ключ;
		ОписаниеОшибки = Элемент.Значение;
		
		ИДПакета = ИдентификаторПакетаПоКонтекстуДокументовИсходящих(Контекст, Документ);
		
		Если ЗначениеЗаполнено(ИДПакета) Тогда
			ДанныеДляФормированияПакетовЭДО = Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.ФормированиеПакетовЭДО];
			Если ДанныеДляФормированияПакетовЭДО <> Неопределено Тогда
				ИндексПакета = ДанныеДляФормированияПакетовЭДО.ИдентификаторыПакетов.Найти(ИДПакета);
				Если ИндексПакета <> Неопределено Тогда
					ДанныеДляФормированияПакетовЭДО.ИдентификаторыПакетов.Удалить(ИндексПакета);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеДляОтправки = Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.Отправка];
		Если ДанныеДляОтправки <> Неопределено Тогда
			
			Если ДанныеДляОтправки.Документы[Документ] <> Неопределено Тогда
				ДанныеДляОтправки.Документы.Удалить(Документ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИДПакета)
				И ДанныеДляОтправки.Пакеты[ИДПакета] <> Неопределено Тогда
				
				ДанныеДляОтправки.Пакеты.Удалить(ИДПакета);
			КонецЕсли;
			
		КонецЕсли;
		
		Контекст.ОшибкиОбработки.Документы.Вставить(Документ,
			СтрШаблон(НСтр("ru = 'Не удалось сформировать документ ЭДО по документу 1С:Документооборот:
					|%1'"),
				ОписаниеОшибки));
		
		Если ЗначениеЗаполнено(ИДПакета) Тогда
			Контекст.ОшибкиОбработки.Пакеты.Вставить(ИДПакета,
				НСтр("ru = 'Не удалось сформировать документы ЭДО по документам пакета.'"));
		КонецЕсли;
		
	КонецЦикла;
	
	// Если есть этап отправки документов, то нужно к данным отправки добавить сформированные документы
	Если Контекст.ЭтапыКВыполнению[ВозможныеЭтапы.Отправка] Тогда
		
		ДанныеДляОтправки = Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.Отправка];
		
		Для Каждого Элемент Из РезультатФормирования.ОбработанныеДокументы Цикл
			Если Элемент.Значение.Состояние = ПредопределенноеЗначение(
				"Перечисление.СостоянияЭДОДокументооборот.ОжидаетсяОтправка") Тогда
				
				ДанныеДляОтправки.Документы.Вставить(Элемент.Ключ, Элемент.Значение.ДокументЭДО);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьЭтапФормированияПакетовЭДО(Контекст);
	
КонецПроцедуры

Процедура ВыполнитьЭтапФормированияПакетовЭДО(Контекст)
	
	ЭтапФормирования = 
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().ФормированиеПакетовЭДО;
	
	НеобходимоВыполнитьЭтап =
		(Контекст.ЭтапыКВыполнению[ЭтапФормирования] = Истина)
		И (Контекст.ДанныеДляЭтапов[ЭтапФормирования].ИдентификаторыПакетов.Количество() > 0);
	
	Если НеобходимоВыполнитьЭтап Тогда
		СформироватьПакетыЭДО(Контекст);
	Иначе
		ВыполнитьЭтапОтправки(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыполнениеЭтапаФормированияПакетовЭДО(Контекст)
	
	ВозможныеЭтапы = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам();
	
	Контекст.ЭтапыКВыполнению[ВозможныеЭтапы.ФормированиеПакетовЭДО] = Ложь;
	
	РезультатФормирования = Контекст.РезультатыВыполненияЭтапов[ВозможныеЭтапы.ФормированиеПакетовЭДО];
	
	Для Каждого Элемент Из РезультатФормирования.ОшибкиФормирования Цикл
		
		ИДПакета = Элемент.Ключ;
		ОписаниеОшибки = Элемент.Значение;
		
		ДанныеДляОтправки = Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.Отправка];
		Если ДанныеДляОтправки <> Неопределено Тогда
			
			ДанныеДляОтправки.Пакеты.Удалить(ИДПакета);
			
		КонецЕсли;
		
		Контекст.ОшибкиОбработки.Пакеты.Вставить(ИДПакета,
			СтрШаблон(НСтр("ru = 'Не удалось сформировать пакет ЭДО:
					|%1'"),
				ОписаниеОшибки));
		
	КонецЦикла;
	
	// Если есть этап отправки документов, то нужно к данным отправки добавить сформированные документы
	Если Контекст.ЭтапыКВыполнению[ВозможныеЭтапы.Отправка] Тогда
		
		ДанныеДляОтправки = Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.Отправка];
		
		Для Каждого Элемент Из РезультатФормирования.ОбработанныеПакеты Цикл
			
			ДанныеДляОтправки.Пакеты.Вставить(Элемент.Ключ, Элемент.Значение.ИдентификаторПакетаБЭД);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьЭтапОтправки(Контекст);
	
КонецПроцедуры

Процедура ВыполнитьЭтапОтправки(Контекст)
	
	ЭтапОтправки = 
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().Отправка;
	
	НеобходимоВыполнитьЭтап = Ложь;
	
	Если Контекст.ЭтапыКВыполнению[ЭтапОтправки] = Истина Тогда
		
		ДанныеДляОтправки = Контекст.ДанныеДляЭтапов[ЭтапОтправки];
		
		НеобходимоВыполнитьЭтап =
			(ДанныеДляОтправки.Документы.Количество() > 0)
			ИЛИ (ДанныеДляОтправки.Пакеты.Количество() > 0);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьЭтап Тогда
		ОтправитьОператоруЭДО(Контекст);
	Иначе
		ЗавершитьВыполнениеДействийПоЭДО(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыполнениеЭтапаОтправки(Контекст)
	
	ЭтапОтправки = 
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().Отправка;
	
	Контекст.ЭтапыКВыполнению[ЭтапОтправки] = Ложь;
	
	ЗавершитьВыполнениеДействийПоЭДО(Контекст);
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеДействийПоЭДО(Контекст)
	
	ОповеститьОВыполненииДействий(Контекст);
	
	ВывестиФормуОшибокИсходящих(Контекст);
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Истина);
	
КонецПроцедуры

Процедура ОповеститьОВыполненииДействий(Контекст)
	
	ВозможныеЭтапы = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам();
	
	// Делаем соответствие, поскольку при выполнении нескольких этапов скорее всего будут дубли. А соответствие быстрее.
	ОбработанныеДокументы = Новый Соответствие;
	ОбработанныеПакеты = Новый Соответствие;
	
	РезультатПодписания = Контекст.РезультатыВыполненияЭтапов[ВозможныеЭтапы.Подписание];
	
	Если РезультатПодписания <> Неопределено Тогда
		
		Для Каждого Документ Из РезультатПодписания.ПодписанныеДокументы Цикл
			Если ОбработанныеДокументы[Документ] = Неопределено Тогда
				ОбработанныеДокументы.Вставить(Документ, Истина);
			КонецЕсли;
			
			ИДПакета = ИдентификаторПакетаПоКонтекстуДокументовИсходящих(Контекст, Документ);
			Если ЗначениеЗаполнено(ИДПакета) Тогда
				ОбработанныеПакеты.Вставить(ИДПакета, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатФормированияЭД = Контекст.РезультатыВыполненияЭтапов[ВозможныеЭтапы.ФормированиеЭД];
	
	Если РезультатФормированияЭД <> Неопределено Тогда
		Для Каждого Элемент Из РезультатФормированияЭД.ОбработанныеДокументы Цикл
			Если ОбработанныеДокументы[Элемент.Ключ] = Неопределено Тогда
				ОбработанныеДокументы.Вставить(Элемент.Ключ, Истина);
			КонецЕсли;
			
			ИДПакета = ИдентификаторПакетаПоКонтекстуДокументовИсходящих(Контекст, Элемент.Ключ);
			Если ЗначениеЗаполнено(ИДПакета) Тогда
				ОбработанныеПакеты.Вставить(ИДПакета, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РезультатФормированияПакетов = Контекст.РезультатыВыполненияЭтапов[ВозможныеЭтапы.ФормированиеПакетовЭДО];
	
	Если РезультатФормированияПакетов <> Неопределено Тогда
		Для Каждого Элемент Из РезультатФормированияПакетов.ОбработанныеПакеты Цикл
			ОбработанныеПакеты.Вставить(Элемент.Ключ, Истина);
		КонецЦикла;
	КонецЕсли;
	
	РезультатОтправки = Контекст.РезультатыВыполненияЭтапов[ВозможныеЭтапы.Отправка];
	
	Если РезультатОтправки <> Неопределено Тогда
		ОбработанныеЭлектронныеДокументы = РезультатОтправки.Итог.ОбработанныеДокументы;
		
		ДокументыКОтправке = Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.Отправка].Документы;
		ПакетыКОтправке = Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.Отправка].Пакеты;
		
		Для Каждого Элемент Из ДокументыКОтправке Цикл
			
			Если ОбработанныеДокументы[Элемент.Ключ] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбработанныеЭлектронныеДокументы[Элемент.Значение] <> Неопределено Тогда
				ОбработанныеДокументы.Вставить(Элемент.Ключ, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементПакета Из ПакетыКОтправке Цикл
			
			ИДПакета = ЭлементПакета.Ключ;
			
			Если ОбработанныеПакеты[ИДПакета] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПакета = Контекст.Пакеты[ИДПакета];
			Если ДанныеПакета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ЭлементДокумента Из ДанныеПакета.Документы Цикл
				
				ДанныеДокумента = ЭлементДокумента.Значение;
				Если ОбработанныеЭлектронныеДокументы[ДанныеДокумента.ЭлектронныйДокумент] <> Неопределено Тогда
					ОбработанныеПакеты.Вставить(ИДПакета, Истина);
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ДокументыДляОповещения = Новый Массив;
	Для Каждого Элемент Из ОбработанныеДокументы Цикл
		ДокументыДляОповещения.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	ПакетыДляОповещения = Новый Массив;
	Для Каждого Элемент Из ОбработанныеПакеты Цикл
		ПакетыДляОповещения.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Документы", ДокументыДляОповещения);
	
	Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторыПакетов", ПакетыДляОповещения);
	
	Оповестить("ИзменениеПакетовЭДОДО", ПараметрыОповещения);
	
КонецПроцедуры

Процедура ВывестиФормуОшибокИсходящих(Контекст)
	
	Ошибки = Контекст.ОшибкиОбработки;
	
	Если Ошибки.Документы.Количество() = 0 И Ошибки.Пакеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДОДокументооборот.Форма.ПросмотрОшибокЭДО",
		Новый Структура("Ошибки", Ошибки));
	
КонецПроцедуры

#Область ПодписаниеИсходящих

Процедура ПодписатьИсходящиеДокументыПоЭДО(Контекст)
	
	ДанныеДляВыполненияДействия = Контекст.ДанныеДляЭтапов[
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().Подписание];
	
	Если ЗначениеЗаполнено(ДанныеДляВыполненияДействия.ДоступныеСертификаты) Тогда
		ПодписатьИсходящиеДокументыПоЭДОПослеЗаполненияДоступныхСертификатов(Контекст);
		Возврат;
	КонецЕсли;
	
	ОбработчикПолученияОтпечатков = Новый ОписаниеОповещения(
		"ПодписатьИсходящиеДокументыПоЭДОПослеПолученияОтпечатковНаКлиенте", ЭтотОбъект, Контекст);
	
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(ОбработчикПолученияОтпечатков, Истина, Ложь);
	
КонецПроцедуры

// Продолжение ПодписатьИсходящиеДокументыПоЭДО
Процедура ПодписатьИсходящиеДокументыПоЭДОПослеПолученияОтпечатковНаКлиенте(Результат, Контекст) Экспорт
	
	ЭтапПодписания =
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().Подписание;
	
	ОтпечаткиНаКлиенте = Новый Соответствие;
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		ОтпечаткиНаКлиенте = Результат;
	КонецЕсли;
	
	ДанныеДляВыполненияДействия = Контекст.ДанныеДляЭтапов[ЭтапПодписания];
	
	СертификатыДляЭДОПоДокументам = ОбменСКонтрагентамиДОВызовСервера.СертификатыЭДОДляДокументов(
		ДанныеДляВыполненияДействия.Документы);
	
	СертификатыДляПодписания = СертификатыДляПодписанияИсходящих(СертификатыДляЭДОПоДокументам, ОтпечаткиНаКлиенте);
	
	Если СертификатыДляПодписания.Количество() <= 0 Тогда
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("ПодписанныеДокументы", Новый Соответствие);
		РезультатВыполнения.Вставить("ОшибкиПодписания", Новый Соответствие);
		
		Для Каждого Документ Из ДанныеДляВыполненияДействия.Документы Цикл
			РезультатВыполнения.ОшибкиПодписания.Вставить(Документ,
				НСтр("ru = 'Нет сертификатов доступных пользователю для подписания выбранных документов по ЭДО.'"));
		КонецЦикла;
		
		Контекст.РезультатыВыполненияЭтапов[ЭтапПодписания] = РезультатВыполнения;
		ОбработатьВыполнениеЭтапаПодписания(Контекст);
		Возврат;
		
	КонецЕсли;
	
	ДанныеДляВыполненияДействия.ДоступныеСертификаты = СертификатыДляПодписания;
	
	ПодписатьИсходящиеДокументыПоЭДОПослеЗаполненияДоступныхСертификатов(Контекст);
	
КонецПроцедуры

Функция СертификатыДляПодписанияИсходящих(СертификатыДляЭДОПоДокументам, ОтпечаткиНаКлиенте)
	
	СертификатыДоступныеПользователю = Новый Соответствие;
	
	Пользователь = ПользователиКлиент.ТекущийПользователь();
	
	Для Каждого ЭлементДокумента Из СертификатыДляЭДОПоДокументам Цикл
		
		СертификатыДляДокумента = ЭлементДокумента.Значение;
		
		Для Каждого ЭлементСертификата Из СертификатыДляДокумента Цикл
			
			Отпечаток = ЭлементСертификата.Ключ;
			ДанныеСертификата = ЭлементСертификата.Значение;
			
			Если ДанныеСертификата.ДоступенПользователям.Получить(Пользователь) = Истина
				И (ДанныеСертификата.ДоступенНаСервере Или ОтпечаткиНаКлиенте[Отпечаток] <> Неопределено) Тогда
				
				СертификатыДоступныеПользователю.Вставить(Отпечаток, ДанныеСертификата);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СертификатыНеДляВсехДокументов = Новый Соответствие;
	
	Для Каждого ЭлементДокумента Из СертификатыДляЭДОПоДокументам Цикл
		
		СертификатыДляДокумента = ЭлементДокумента.Значение;
		
		Для Каждого ЭлементСертификата Из СертификатыДоступныеПользователю Цикл
			
			Отпечаток = ЭлементСертификата.Ключ;
			ДанныеСертификата = ЭлементСертификата.Значение;
			
			Если СертификатыДляДокумента[Отпечаток] = Неопределено Тогда
				СертификатыНеДляВсехДокументов.Вставить(Отпечаток, ДанныеСертификата);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СертификатыДляПодписания = Новый Соответствие;
	
	Для Каждого Элемент Из СертификатыДоступныеПользователю Цикл
		
		Отпечаток = Элемент.Ключ;
		ДанныеСертификата = Элемент.Значение;
		
		Если СертификатыНеДляВсехДокументов[Отпечаток] = Неопределено Тогда
			ПараметрыСертификатаДляПодписания = Новый Структура;
			ПараметрыСертификатаДляПодписания.Вставить("Доверенность", ДанныеСертификата.Доверенность);
			
			СертификатыДляПодписания.Вставить(
				ДанныеСертификата.Ссылка,
				ПараметрыСертификатаДляПодписания);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СертификатыДляПодписания;
	
КонецФункции

Процедура ПодписатьИсходящиеДокументыПоЭДОПослеЗаполненияДоступныхСертификатов(Контекст)
	
	ДанныеДляВыполненияДействия = Контекст.ДанныеДляЭтапов[
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().Подписание];
	
	ДанныеДляПодписания = Новый Массив;
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ДанныеПодписанта = Новый Структура;
	ДанныеПодписанта.Вставить("Подписал", СотрудникиКлиент.ОсновнойСотрудник());
	ДанныеПодписанта.Вставить("ДатаПодписи", ТекущаяДата);
	ДанныеПодписанта.Вставить("Подписан", Истина);
	
	Для Каждого Документ Из ДанныеДляВыполненияДействия.Документы Цикл
		ДокументДляПодписания = Новый Структура;
		ДокументДляПодписания.Вставить("ОбъектПодписания", Документ);
		
		ПараметрыДанных = Новый Структура;
		ПараметрыДанных.Вставить("ДанныеПодписанта", ДанныеПодписанта);
		ПараметрыДанных.Вставить("ЗаполнятьФормализованныйЭДО", Истина);
		ПараметрыДанных.Вставить("ДанныеЗаполненияФормализованногоЭДО",
			ДанныеДляЗаполненияФормализованногоЭДОПриПодписанииИсходящего(Контекст, Документ));
		
		ДокументДляПодписания.Вставить("ПараметрыДанных", ПараметрыДанных);
		
		ДанныеДляПодписания.Добавить(ДокументДляПодписания);
	КонецЦикла;
	
	ОбработчикПодписания = Новый ОписаниеОповещения("ПодписатьИсходящиеДокументыПоЭДОПослеСозданияПодписей",
		ЭтотОбъект, Контекст);
	
	ДоступныеСертификаты = Новый Массив;
	ДоверенностиСертификатов = Новый Соответствие;
	Для Каждого Элемент Из ДанныеДляВыполненияДействия.ДоступныеСертификаты Цикл
		
		Сертификат = Элемент.Ключ;
		ПараметрыСертификата = Элемент.Значение;
		
		ДоступныеСертификаты.Добавить(Сертификат);
		
		ДоверенностиСертификата = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСертификата.Доверенность);
		ДоверенностиСертификатов.Вставить(Сертификат, ДоверенностиСертификата);
		
	КонецЦикла;
	
	ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
	ПараметрыПодписания.ИдентификаторФормы = Контекст.УникальныйИдентификатор;
	ПараметрыПодписания.ДоступныеСертификаты = ДоступныеСертификаты;
	ПараметрыПодписания.ДоверенностиСертификатов = ДоверенностиСертификатов;
	ПараметрыПодписания.ОбработчикЗавершения = ОбработчикПодписания;
	
	РаботаСЭПКлиент.Подписать(ДанныеДляПодписания, ПараметрыПодписания);
	
КонецПроцедуры

// Данные для заполнения формализованного ЭДОПри подписании исходящего.
// 
// Параметры:
//  Контекст - см. НовыйКонтекстВыполненияДействийПоИсходящимДокументам
//  Документ - ОпределяемыйТип.ДокументДОДляЭДО
// 
// Возвращаемое значение:
//  см. ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДляЗаполненияФормализованногоДокумента
Функция ДанныеДляЗаполненияФормализованногоЭДОПриПодписанииИсходящего(Контекст, Документ)
	
	ДанныеДокумента = Контекст.Документы[Документ];
	Если ДанныеДокумента = Неопределено Тогда
		Для Каждого ЭлементПакета Из Контекст.Пакеты Цикл
			ДанныеПакета = ЭлементПакета.Значение;
			ДанныеДокумента = ДанныеПакета.Документы[Документ];
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеДокумента = Неопределено Тогда
		Возврат ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДляЗаполненияФормализованногоДокумента();
	КонецЕсли;
	
	ДанныеЗаполнения = ДанныеДокумента.ДанныеЗаполненияФормализованногоДокумента;
	ДанныеЗаполнения.ПодписантДокумента = ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеПодписантаДокумента();
	ДанныеЗаполнения.ПодписантДокумента.Организация = ДанныеДокумента.Организация;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Продолжение ПодписатьИсходящиеДокументыПоЭДОПослеЗаполненияДоступныхСертификатов
// 
// Параметры:
//  ОписаниеДанных - Структура - см. описание ЭлектроннаяПодписьКлиент.Подписать, раздел ОбработкаРезультата
//  Контекст см. НовыйКонтекстВыполненияДействийПоИсходящимДокументам
Процедура ПодписатьИсходящиеДокументыПоЭДОПослеСозданияПодписей(ОписаниеДанных, Контекст) Экспорт
	
	ЭтапПодписания =
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().Подписание;
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ПодписанныеДокументы", Новый Массив);
	РезультатВыполнения.Вставить("ОшибкиПодписания", Новый Соответствие);
	РезультатВыполнения.Вставить("ПаролиСертификатов", Новый Соответствие);
	
	Контекст.РезультатыВыполненияЭтапов[ЭтапПодписания] = РезультатВыполнения;
	
	ПолученыДанныеПодписей = Новый Соответствие;
	Для Каждого Документ Из Контекст.ДанныеДляЭтапов[ЭтапПодписания].Документы Цикл
		ПолученыДанныеПодписей.Вставить(Документ, Ложь);
	КонецЦикла;
	
	Если Не ОписаниеДанных.Успех Тогда
		
		Для Каждого Элемент Из ПолученыДанныеПодписей Цикл
			
			Документ = Элемент.Ключ;
			
			РезультатВыполнения.ОшибкиПодписания.Вставить(Документ,
				НСтр("ru = 'Не удалось получить данные подписей'"));
			
		КонецЦикла;
		
		ОбработатьВыполнениеЭтапаПодписания(Контекст);
		Возврат;
	КонецЕсли;
	
	Если ОписаниеДанных.Свойство("КонтекстОперации") И ОписаниеДанных.Свойство("ВыбранныйСертификат") Тогда
		РезультатВыполнения.ПаролиСертификатов.Вставить(
			ОписаниеДанных.ВыбранныйСертификат.Ссылка, ОписаниеДанных.КонтекстОперации);
	КонецЕсли;
	
	ПараметрыПодписания = Новый Структура;
	ПараметрыПодписания.Вставить("ПодписатьЭД", Истина);
	ПараметрыПодписания.Вставить("РазрешитьЗаписьОбъектаИзДругойСистемы", Истина);
	ПараметрыПодписания.Вставить("НаправлениеЭД", ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Исходящий"));
	
	ПодписанныеДанные = Новый Массив;
	Для Каждого Данные Из ОписаниеДанных.НаборДанных Цикл
		
		Если Не Данные.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = Новый Структура;
		Элемент.Вставить("ПодписанныйОбъект", Данные.Представление);
		Элемент.Вставить("СвойстваПодписи", Данные.СвойстваПодписи);
		Элемент.Вставить("ПараметрыВыполнения", ПараметрыПодписания);
		ПодписанныеДанные.Добавить(Элемент);
		
		Если ПолученыДанныеПодписей[Данные.Представление] <> Неопределено Тогда
			ПолученыДанныеПодписей[Данные.Представление] = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСЭПВызовСервера.ЗанестиИнформациюОПодписях(ПодписанныеДанные, ОписаниеДанных.ИдентификаторФормы);
	
	Для Каждого Данные Из ОписаниеДанных.НаборДанных Цикл
		ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Данные.Представление);
	КонецЦикла;
	
	Для Каждого Элемент Из ПолученыДанныеПодписей Цикл
		
		Документ = Элемент.Ключ;
		ДанныеПолучены = Элемент.Значение;
		
		Если ДанныеПолучены Тогда
			РезультатВыполнения.ПодписанныеДокументы.Добавить(Документ);
		Иначе
			РезультатВыполнения.ОшибкиПодписания.Вставить(Документ, 
				НСтр("ru = 'Не удалось получить данные подписи'"));
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьВыполнениеЭтапаПодписания(Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЭД

Процедура СформироватьИсходящийЭДПоДокументамДО(Контекст) Экспорт
	
	ЭтапФормирования =
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().ФормированиеЭД;
	
	ПараметрыФормирования = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.НовыеПараметрыФормированияЭДПоДокументамДО();
	
	ПараметрыФормирования.ДокументыДО = Контекст.ДанныеДляЭтапов[ЭтапФормирования].Документы;
	
	РезультатФормированияЭД = ОбменСКонтрагентамиДОВызовСервера.СформироватьЭДПоГотовымДокументамДО(
		ПараметрыФормирования);
	
	Контекст.РезультатыВыполненияЭтапов[ЭтапФормирования] = РезультатФормированияЭД;
	
	ОбработатьВыполнениеЭтапаФормированияЭД(Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПакетовЭДО

Процедура СформироватьПакетыЭДО(Контекст)
	
	ЭтапФормирования =
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().ФормированиеПакетовЭДО;
	
	ПакетыДляОбработки = Контекст.ДанныеДляЭтапов[ЭтапФормирования].ИдентификаторыПакетов;
	
	РезультатФормированияПакетов = ОбменСКонтрагентамиДОВызовСервера.СформироватьПакетыЭДО(ПакетыДляОбработки);
	
	Контекст.РезультатыВыполненияЭтапов[ЭтапФормирования] = РезультатФормированияПакетов;
	
	ОбработатьВыполнениеЭтапаФормированияПакетовЭДО(Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область Отправка

Процедура ОтправитьОператоруЭДО(Контекст)
	
	ЭтапОтправки =
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().Отправка;
	
	ДанныеДляОтправки = Контекст.ДанныеДляЭтапов[ЭтапОтправки];
	
	РезультатПостановкиВОчередь =
		ОбменСКонтрагентамиДОВызовСервера.ПоставитьВОчередьНаОтправку(ДанныеДляОтправки);
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
	
	ПараметрыВыполненияДействий = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействий.НаборДействий = НаборДействий;
	Для Каждого Элемент Из РезультатПостановкиВОчередь.ПоставленныеВОчередьНаОтправку.Документы Цикл
		ПараметрыВыполненияДействий.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Элемент.Значение);
	КонецЦикла;
	Для Каждого Элемент Из РезультатПостановкиВОчередь.ПоставленныеВОчередьНаОтправку.Пакеты Цикл
		ПараметрыВыполненияДействий.ОбъектыДействий.ПакетыДокументов.Добавить(Элемент.Значение);
	КонецЦикла;
	
	ОбработчикЗавершенияОперации = Новый ОписаниеОповещения("ОтправитьОператоруЭДОПослеОтправкиБЭД",
		ЭтотОбъект, Контекст);
	
	КонтекстДействийЭДО = Новый Структура;
	КонтекстДействийЭДО.Вставить("ПаролиСертификатов", Контекст.ПаролиСертификатов);
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(
		ОбработчикЗавершенияОперации,
		ПараметрыВыполненияДействий, ,
		КонтекстДействийЭДО);
	
КонецПроцедуры

// Продолжение ОтправитьОператоруЭДО
Процедура ОтправитьОператоруЭДОПослеОтправкиБЭД(Результат, Контекст) Экспорт
	
	ЭтапОтправки =
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам().Отправка;
	
	Контекст.РезультатыВыполненияЭтапов[ЭтапОтправки] = Результат;
	
	ОбработатьВыполнениеЭтапаОтправки(Контекст);
	
КонецПроцедуры

#КонецОбласти

Функция ИдентификаторПакетаПоКонтекстуДокументовИсходящих(Контекст, Документ)
	
	ДокументыКОбработке = Контекст.Документы;
	Если ДокументыКОбработке[Документ] <> Неопределено Тогда
		Возврат ДокументыКОбработке[Документ].ИдентификаторПакета;
	КонецЕсли;
	
	ПакетыКОбработке = Контекст.Пакеты;
	Для Каждого ЭлементПакета Из ПакетыКОбработке Цикл
		
		ИДПакета = ЭлементПакета.Ключ;
		ДанныеПакета = ЭлементПакета.Значение;
		
		Если ДанныеПакета.Документы[Документ] <> Неопределено Тогда
			Возврат ИДПакета;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВходящиеДокументы

#Область ПриемДокументов

Функция НовыйКонтекстПриемаДокументовПоЭДО()
	
	Контекст = Новый Структура;
	Контекст.Вставить("Документы", Новый Соответствие);
	Контекст.Вставить("Пакеты", Новый Соответствие);
	
	ДанныеДляПодписания = Новый Структура;
	ДанныеДляПодписания.Вставить("ДоступныеСертификаты", Неопределено);
	ДанныеДляПодписания.Вставить("Документы", Новый Массив);
	
	Контекст.Вставить("ДокументыЭДОКСозданиюОтветногоТитула", Новый Соответствие);
	Контекст.Вставить("ДанныеДляПодписанияДО", ДанныеДляПодписания);
	Контекст.Вставить("ДокументыЭДОКПриему", Новый Массив);
	Контекст.Вставить("ПакетыЭДОКПриему", Новый Массив);
	
	Контекст.Вставить("РезультатФормированияОтветногоТитула", Неопределено);
	Контекст.Вставить("РезультатПодписанияДО", Неопределено);
	Контекст.Вставить("РезультатПриемаОбъектовЭДО", Неопределено);
	
	Контекст.Вставить("УникальныйИдентификатор", Неопределено);
	Контекст.Вставить("ОбработчикЗавершения", Неопределено);
	
	Контекст.Вставить("ПаролиСертификатов", Новый Соответствие);
	
	ОшибкиОбработки = Новый Структура;
	ОшибкиОбработки.Вставить("Документы", Новый Соответствие);
	ОшибкиОбработки.Вставить("Пакеты", Новый Соответствие);
	
	Контекст.Вставить("ОшибкиОбработки", ОшибкиОбработки);
	
	Возврат Контекст;
	
КонецФункции

Процедура ЗаполнитьКонтекстПриемаДокументовПоЭДО(ПараметрыВыполнения, Контекст)
	
	ОбменСКонтрагентамиДОВызовСервера.ЗаполнитьДанныеКонтекстаДляПриемаПоЭДО(
		Контекст, ПараметрыВыполнения.Документы, ПараметрыВыполнения.Пакеты);
	
	Контекст.УникальныйИдентификатор = ПараметрыВыполнения.УникальныйИдентификатор;
	Контекст.ОбработчикЗавершения = ПараметрыВыполнения.ОбработчикЗавершения;
	
	Контекст.ДанныеДляПодписанияДО.ДоступныеСертификаты = ПараметрыВыполнения.ДоступныеСертификаты;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеОтветногоТитула(Контекст)
	
	Если Контекст.ДокументыЭДОКСозданиюОтветногоТитула.Количество() = 1 Тогда
		ПолучитьДанныеОтветногоТитула(Контекст);
	Иначе
		ВыполнитьПодписаниеПоВходящим(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатСозданияОтветногоТитула(Контекст)
	
	Если Не Контекст.РезультатФормированияОтветногоТитула.Успех Тогда
		Контекст.ДанныеДляПодписанияДО.Документы.Очистить();
		Контекст.ДокументыЭДОКПриему.Очистить();
		Контекст.ПакетыЭДОКПриему.Очистить();
	КонецЕсли;
	
	ВыполнитьПодписаниеПоВходящим(Контекст);
	
КонецПроцедуры

Процедура ВыполнитьПодписаниеПоВходящим(Контекст)
	
	Если Контекст.ДанныеДляПодписанияДО.Документы.Количество() > 0 Тогда
		ПодписатьДокументыДОПоВходящим(Контекст);
	Иначе
		ВыполнитьПриемВходящихОбъектовЭДО(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатПодписанияПоВходящим(Контекст)
	
	Если Контекст.РезультатПодписанияДО <> Неопределено
		И Контекст.РезультатПодписанияДО.Успех = Ложь Тогда
		
		Контекст.ДокументыЭДОКПриему.Очистить();
		Контекст.ПакетыЭДОКПриему.Очистить();
	КонецЕсли;
	
	Если ТипЗнч(Контекст.РезультатПодписанияДО) = Тип("Структура")
		И Контекст.РезультатПодписанияДО.Свойство("ПаролиСертификатов") Тогда
		
		Контекст.ПаролиСертификатов = Контекст.РезультатПодписанияДО.ПаролиСертификатов;
	КонецЕсли;
	
	ВыполнитьПриемВходящихОбъектовЭДО(Контекст);
	
КонецПроцедуры

Процедура ВыполнитьПриемВходящихОбъектовЭДО(Контекст)
	
	Если Контекст.ДокументыЭДОКПриему.Количество() > 0
		Или Контекст.ПакетыЭДОКПриему.Количество() > 0 Тогда
		
		ПринятьОбъектыЭДОПоВходящим(Контекст);
	Иначе
		ЗавершитьВыполнениеПриемаВходящихПоЭДОДокументов(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПриемВходящихОбъектовЭДО(Контекст)
	
	Если Контекст.РезультатПодписанияДО <> Неопределено
		И Контекст.РезультатПодписанияДО.Успех Тогда
		
		РезультатЗанесенияПодписей = ОбменСКонтрагентамиДОВызовСервера.ЗаписатьПодписиДокументовПослеПриемаЭДО(
			Контекст.РезультатПодписанияДО.ПодписанныеДанные, Контекст.УникальныйИдентификатор);
		
		Для Каждого Объект Из РезультатЗанесенияПодписей.ПодписанныеОбъекты Цикл
			ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Объект);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗавершитьВыполнениеПриемаВходящихПоЭДОДокументов(Контекст);
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеПриемаВходящихПоЭДОДокументов(Контекст)
	
	ОповеститьОВыполненииПриемаПоЭДО(Контекст);
	
	ВывестиФормуОшибокВходящих(Контекст);
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения);
	
КонецПроцедуры

Процедура ОповеститьОВыполненииПриемаПоЭДО(Контекст)
	
	ОбработанныеДокументы = Новый Соответствие;
	
	Если Контекст.РезультатПодписанияДО <> Неопределено Тогда
		Для Каждого Документ Из Контекст.РезультатПодписанияДО.ПодписанныеДокументы Цикл
			ОбработанныеДокументы.Вставить(Документ, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Если Контекст.РезультатПриемаОбъектовЭДО <> Неопределено Тогда
		
		ОбработанныеДокументыЭДО = Контекст.РезультатПриемаОбъектовЭДО.Итог.ОбработанныеДокументы;
		
		ДокументыКОбработе = Контекст.Документы;
		
		Для Каждого Элемент Из ДокументыКОбработе Цикл
			
			Если ОбработанныеДокументыЭДО[Элемент.Значение.ЭлектронныйДокумент] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработанныеДокументы.Вставить(Элемент.Ключ, Истина);
			
		КонецЦикла;
		
		ПакетыКОбработке = Контекст.Пакеты;
		
		Для Каждого Элемент Из ПакетыКОбработке Цикл
			
			ДокументыПакета = Элемент.Значение.Документы;
			
			Для Каждого Элемент Из ДокументыПакета Цикл
				
				Если ОбработанныеДокументыЭДО[Элемент.Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ОбработанныеДокументы.Вставить(Элемент.Значение.Документ, Истина);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументыДляОповещения = Новый Массив;
	
	Для Каждого Элемент Из ОбработанныеДокументы Цикл
		ДокументыДляОповещения.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Документы", ДокументыДляОповещения);
	
	Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
	
КонецПроцедуры

#Область ФормированиеОтветногоТитула

Процедура ПолучитьДанныеОтветногоТитула(Контекст)
	
	ДокументЭДО = Неопределено;
	Для Каждого	Элемент Из Контекст.ДокументыЭДОКСозданиюОтветногоТитула Цикл
		ДокументЭДО = Элемент.Ключ;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВернутьДанныеОтветногоТитула", Истина);
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", ДокументЭДО);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПолучитьДанныеОтветногоТитулаЗавершение", ЭтотОбъект, Контекст);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.РучноеФормированиеОтветногоТитула", ПараметрыФормы, , , , ,
		ОбработчикЗавершения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура ПолучитьДанныеОтветногоТитулаЗавершение(ДанныеОтветногоТитула, Контекст) Экспорт
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Успех", Ложь);
	РезультатВыполнения.Вставить("ДанныеОтветногоТитула", Неопределено);
	
	Контекст.РезультатФормированияОтветногоТитула = РезультатВыполнения;
	
	Если ДанныеОтветногоТитула = Неопределено Тогда
		ОбработатьРезультатСозданияОтветногоТитула(Контекст);
	КонецЕсли;
	
	РезультатВыполнения.ДанныеОтветногоТитула = ДанныеОтветногоТитула;
	РезультатВыполнения.Успех = Истина;
	
	ОбработатьРезультатСозданияОтветногоТитула(Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ПодписаниеВходящих

Процедура ПодписатьДокументыДОПоВходящим(Контекст)
	
	ДанныеДляПодписанияВходящих = Контекст.ДанныеДляПодписанияДО;
	
	ДанныеДляПодписания = Новый Массив;
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ДанныеПодписанта = Новый Структура;
	ДанныеПодписанта.Вставить("Подписал", ПользователиКлиент.ТекущийПользователь());
	ДанныеПодписанта.Вставить("ДатаПодписи", ТекущаяДата);
	ДанныеПодписанта.Вставить("Подписан", Истина);
	
	Для Каждого Документ Из ДанныеДляПодписанияВходящих.Документы Цикл
		ДокументДляПодписания = Новый Структура;
		ДокументДляПодписания.Вставить("ОбъектПодписания", Документ);
		
		ДокументДляПодписания.Вставить("ПараметрыДанных",
			Новый Структура("ДанныеПодписанта", ДанныеПодписанта));
		
		ДанныеДляПодписания.Добавить(ДокументДляПодписания);
	КонецЦикла;
	
	ОбработчикПодписания = Новый ОписаниеОповещения("ПодписатьДокументыДОПоВходящимПослеСозданияПодписей",
		ЭтотОбъект, Контекст);
	
	ДоступныеСертификаты = Новый Массив;
	ДоверенностиСертификатов = Новый Соответствие;
	Для Каждого Элемент Из ДанныеДляПодписанияВходящих.ДоступныеСертификаты Цикл
		
		Сертификат = Элемент.Ключ;
		ПараметрыСертификата = Элемент.Значение;
		
		ДоступныеСертификаты.Добавить(Сертификат);
		
		ДоверенностиСертификата = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСертификата.Доверенность);
		ДоверенностиСертификатов.Вставить(Сертификат, ДоверенностиСертификата);
		
	КонецЦикла;
	
	ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
	ПараметрыПодписания.ИдентификаторФормы = Контекст.УникальныйИдентификатор;
	ПараметрыПодписания.ДоступныеСертификаты = ДоступныеСертификаты;
	ПараметрыПодписания.ДоверенностиСертификатов = ДоверенностиСертификатов;
	ПараметрыПодписания.ОбработчикЗавершения = ОбработчикПодписания;
	
	РаботаСЭПКлиент.Подписать(ДанныеДляПодписания, ПараметрыПодписания);
	
КонецПроцедуры

// Продолжение ПодписатьДокументыДОПоВходящим
// 
// Параметры:
//  ОписаниеДанных - Структура - см. описание ЭлектроннаяПодписьКлиент.Подписать, раздел ОбработкаРезультата
//  Контекст см. НовыйКонтекстПриемаДокументовПоЭДО
Процедура ПодписатьДокументыДОПоВходящимПослеСозданияПодписей(ОписаниеДанных, Контекст) Экспорт
	
	РезультатВыполнения = НовыйРезультатПодписанияПоВходящим();
	
	Контекст.РезультатПодписанияДО = РезультатВыполнения;
	
	Если Не ОписаниеДанных.Успех Тогда
		РезультатВыполнения.Успех = Ложь;
		ОбработатьРезультатПодписанияПоВходящим(Контекст);
	КонецЕсли;
	
	ПараметрыПодписания = Новый Структура;
	ПараметрыПодписания.Вставить("ПодписатьЭД", Истина);
	ПараметрыПодписания.Вставить("РазрешитьЗаписьОбъектаИзДругойСистемы", Истина);
	ПараметрыПодписания.Вставить("НаправлениеЭД", ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий"));
	
	ПодписанныеДанные = Новый Массив;
	Для Каждого Данные Из ОписаниеДанных.НаборДанных Цикл
		
		Если Не Данные.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = Новый Структура;
		Элемент.Вставить("ПодписанныйОбъект", Данные.Представление);
		Элемент.Вставить("СвойстваПодписи", Данные.СвойстваПодписи);
		Элемент.Вставить("ПараметрыВыполнения", ПараметрыПодписания);
		ПодписанныеДанные.Добавить(Элемент);
		
	КонецЦикла;
	
	РезультатВыполнения.Успех = Истина;
	РезультатВыполнения.ПодписанныеДокументы = Контекст.ДанныеДляПодписанияДО.Документы;
	РезультатВыполнения.ПодписанныеДанные = ПодписанныеДанные;
	
	Если ОписаниеДанных.Свойство("КонтекстОперации") И ОписаниеДанных.Свойство("ВыбранныйСертификат") Тогда
		РезультатВыполнения.ПаролиСертификатов.Вставить(
			ОписаниеДанных.ВыбранныйСертификат.Ссылка, ОписаниеДанных.КонтекстОперации);
	КонецЕсли;
	
	ОбработатьРезультатПодписанияПоВходящим(Контекст);
	
КонецПроцедуры

Функция НовыйРезультатПодписанияПоВходящим()
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Успех", Ложь);
	РезультатВыполнения.Вставить("ПодписанныеДокументы", Новый Массив);
	РезультатВыполнения.Вставить("ПодписанныеДанные", Новый Массив);
	РезультатВыполнения.Вставить("ПаролиСертификатов", Новый Соответствие);
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ПриемОбъектовЭДО

Процедура ПринятьОбъектыЭДОПоВходящим(Контекст)
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Утвердить"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
	
	ПараметрыВыполненияДействий = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействий.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействий.ОбъектыДействий.ЭлектронныеДокументы = Контекст.ДокументыЭДОКПриему;
	ПараметрыВыполненияДействий.ОбъектыДействий.ПакетыДокументов = Контекст.ПакетыЭДОКПриему;
	
	Если Контекст.РезультатФормированияОтветногоТитула <> Неопределено Тогда
		ПараметрыВыполненияДействий.ДанныеРучногоФормированияТитула =
			Контекст.РезультатФормированияОтветногоТитула.ДанныеОтветногоТитула;
	КонецЕсли;
	
	ОбработчикЗавершенияОперации = Новый ОписаниеОповещения("ПринятьОбъектыЭДОПоВходящимЗавершение",
		ЭтотОбъект, Контекст);
	
	КонтекстДействийЭДО = Новый Структура;
	КонтекстДействийЭДО.Вставить("ПаролиСертификатов", Контекст.ПаролиСертификатов);
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(
		ОбработчикЗавершенияОперации,
		ПараметрыВыполненияДействий, ,
		КонтекстДействийЭДО);
	
КонецПроцедуры

Процедура ПринятьОбъектыЭДОПоВходящимЗавершение(Результат, Контекст) Экспорт
	
	Контекст.РезультатПриемаОбъектовЭДО = Результат;
	
	ОбработатьПриемВходящихОбъектовЭДО(Контекст);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтклонениеДокументов

Функция НовыйКонтекстОтклоненияДокументовПоЭДО()
	
	Контекст = Новый Структура;
	Контекст.Вставить("Документы", Новый Соответствие);
	Контекст.Вставить("Пакеты", Новый Соответствие);
	
	Контекст.Вставить("ДокументыЭДОКОтклонению", Новый Массив);
	Контекст.Вставить("ПакетыЭДОКОтклонению", Новый Массив);
	
	Контекст.Вставить("РезультатОтклоненияОбъектовЭДО", Неопределено);
	
	Контекст.Вставить("УникальныйИдентификатор", Неопределено);
	Контекст.Вставить("ОбработчикЗавершения", Неопределено);
	
	ОшибкиОбработки = Новый Структура;
	ОшибкиОбработки.Вставить("Документы", Новый Соответствие);
	ОшибкиОбработки.Вставить("Пакеты", Новый Соответствие);
	
	Контекст.Вставить("ОшибкиОбработки", ОшибкиОбработки);
	
	Возврат Контекст;
	
КонецФункции

Процедура ЗаполнитьКонтекстОтклоненияДокументовПоЭДО(ПараметрыВыполнения, Контекст)
	
	ОбменСКонтрагентамиДОВызовСервера.ЗаполнитьДанныеКонтекстаДляОтклоненияПоЭДО(
		Контекст, ПараметрыВыполнения.Документы, ПараметрыВыполнения.Пакеты);
	
	Контекст.УникальныйИдентификатор = ПараметрыВыполнения.УникальныйИдентификатор;
	Контекст.ОбработчикЗавершения = ПараметрыВыполнения.ОбработчикЗавершения;
	
КонецПроцедуры

Процедура ВыполнитьОтклонениеВходящихОбъектовЭДО(Контекст)
	
	Если Контекст.ДокументыЭДОКОтклонению.Количество() > 0
		Или Контекст.ПакетыЭДОКОтклонению.Количество() > 0 Тогда
		
		ОтклонитьВходящиеПоЭДОДокументы(Контекст);
	Иначе
		ЗавершитьВыполнениеОтклоненияВходящихПоЭДО(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатОтклоненияВходящихОбъектовЭДО(Контекст)
	
	ЗавершитьВыполнениеОтклоненияВходящихПоЭДО(Контекст);
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеОтклоненияВходящихПоЭДО(Контекст)
	
	ОповеститьОВыполненииОтклоненияПоЭДО(Контекст);
	
	ВывестиФормуОшибокВходящих(Контекст);
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения);
	
КонецПроцедуры

Процедура ОповеститьОВыполненииОтклоненияПоЭДО(Контекст)
	
	ОбработанныеДокументы = Новый Соответствие;
	
	Если Контекст.РезультатОтклоненияОбъектовЭДО <> Неопределено Тогда
		
		ОбработанныеДокументыЭДО = Контекст.РезультатОтклоненияОбъектовЭДО.ОбработанныеДокументы;
		
		ДокументыКОбработе = Контекст.Документы;
		
		Для Каждого Элемент Из ДокументыКОбработе Цикл
			
			Если ОбработанныеДокументыЭДО[Элемент.Значение.ЭлектронныйДокумент] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработанныеДокументы.Вставить(Элемент.Ключ, Истина);
			
		КонецЦикла;
		
		ПакетыКОбработке = Контекст.Пакеты;
		
		Для Каждого Элемент Из ПакетыКОбработке Цикл
			
			ДокументыПакета = Элемент.Значение.Документы;
			
			Для Каждого Элемент Из ДокументыПакета Цикл
				
				Если ОбработанныеДокументыЭДО[Элемент.Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ОбработанныеДокументы.Вставить(Элемент.Значение.Документ, Истина);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументыДляОповещения = Новый Массив;
	
	Для Каждого Элемент Из ОбработанныеДокументы Цикл
		ДокументыДляОповещения.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Документы", ДокументыДляОповещения);
	
	Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
	
КонецПроцедуры

#Область ОтклонениеОбъектовЭДО

Процедура ОтклонитьВходящиеПоЭДОДокументы(Контекст)
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отклонить"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
	
	ОбработкаОкончания = Новый ОписаниеОповещения("ОтклонитьВходящиеПоЭДОДокументыЗавершение", ЭтотОбъект, Контекст);
	
	ПараметрыДействий = Новый Структура;
	ПараметрыДействий.Вставить("ЭлектронныеДокументы", Контекст.ДокументыЭДОКОтклонению);
	ПараметрыДействий.Вставить("ПакетыДокументов", Контекст.ПакетыЭДОКОтклонению);
	ПараметрыДействий.Вставить("ОповещениеУспешногоЗавершения", ОбработкаОкончания);
	ПараметрыДействий.Вставить("НаборДействий", НаборДействий);
	ПараметрыДействий.Вставить("ОсновноеДействие",
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отклонить"));
	
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ПараметрыДействий);
	
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причину отклонения по ЭДО'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
	ПараметрыВводаСтроки.Многострочность = Истина;
	ПараметрыВводаСтроки.Обязательность = Истина;
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения по ЭДО необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ПараметрыВводаСтроки);
	
КонецПроцедуры

Процедура ОтклонитьВходящиеПоЭДОДокументыЗавершение(Результат, Контекст) Экспорт
	
	Контекст.РезультатОтклоненияОбъектовЭДО = Результат;
	
	ОбработатьРезультатОтклоненияВходящихОбъектовЭДО(Контекст);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ВывестиФормуОшибокВходящих(Контекст)
	
	Ошибки = Контекст.ОшибкиОбработки;
	
	Если Ошибки.Документы.Количество() = 0 И Ошибки.Пакеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДОДокументооборот.Форма.ПросмотрОшибокЭДО",
		Новый Структура("Ошибки", Ошибки));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтражениеДокументовЭДОВДО

Процедура СоздатьДокументДОПослеОтветаНаВопросОСнятииСАвтоматическогоОтражения(Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДокументЭДО = ДополнительныеПараметры.ЭлектронныйДокумент;
	
	ОбменСКонтрагентамиДОВызовСервера.СнятьДокументЭДОСАвтоматическогоСоздания(ДокументЭДО);
	
	СоздатьДокументДОПослеСнятияСАвтоматическогоУчета(ДокументЭДО);
	
КонецПроцедуры

Процедура СоздатьДокументДОПослеСнятияСАвтоматическогоУчета(ЭлектронныйДокумент)
	
	КонтекстОтражения = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.НовыйКонтекстОтраженияДокументовВДО();
	
	КонтекстОтражения.ДокументЭДО = ЭлектронныйДокумент;
	КонтекстОтражения.АвтоматическоеВыполнение = Ложь;
	
	ОбменСКонтрагентамиДОВызовСервера.ЗаполнитьКонтекстОтраженияДокументовВДО(КонтекстОтражения);
	
	Если КонтекстОтражения.Отказ Тогда
		ПоказатьФормуОшибокОтражения(КонтекстОтражения.Ошибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьДокументДОПослеВыбораШаблона", ЭтотОбъект, КонтекстОтражения);
	
	ДополнительныеПараметры = Новый Структура;
	
	ДоступныеВидыДокументов = Новый СписокЗначений;
	ДоступныеВидыДокументов.ЗагрузитьЗначения(
		ОбменСКонтрагентамиДОКлиентПовтИсп.ВидыДокументовДоступныеДляОтраженияВходящихЭДО());
	
	ДополнительныеПараметры.Вставить("ДоступныеВидыДокументов", ДоступныеВидыДокументов);
	РаботаСШаблонамиДокументовКлиент.ПоказатьФормуСозданияДокументаПоШаблону(
		ОписаниеОповещения,
		"ШаблоныДокументов",
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура СоздатьДокументДОПослеВыбораШаблона(Результат, КонтекстОтражения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	ПараметрыФормы = ДелопроизводствоКлиент.ПараметрыФормыДляСозданияДокумента(Результат);
	ПараметрыФормы.Вставить("ЭтоОтражениеВходящегоЭДО", Истина);
	ПараметрыФормы.Вставить("КонтекстОтраженияВходящегоЭДО", КонтекстОтражения);
	
	ИмяФормыДокументаДО = СтрШаблон("Справочник.%1.ФормаОбъекта",
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ИмяСправочникаДокументовДО());
	
	Открытьформу(ИмяФормыДокументаДО, ПараметрыФормы, , Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура УдалитьДокументЭДОИзСпискаКСозданиюВДОПослеОтветаНаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбменСКонтрагентамиДОВызовСервера.УдалитьДокументЭДОИзСпискаКСозданиюВДО(ДополнительныеПараметры.ДокументЭДО);
	
	ОповеститьООтраженииВходящегоЭДО(ДополнительныеПараметры.ДокументЭДО, Неопределено);
	
КонецПроцедуры

Процедура ОбработатьЗавершениеАвтоматическогоСозданияДокументовДО(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат.Статус <> "Выполнено" Тогда	
		
		Возврат;
	КонецЕсли;
	
	РезультатСоздания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ТекстРезультатаСоздания =
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ОписаниеРезультатаСозданияДокументовДОПоВходящимЭД(
			РезультатСоздания.КоличествоКСозданию,
			РезультатСоздания.КоличествоСоздано,
			РезультатСоздания.КоличествоСозданоСОшибками);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Завершено формирование документов 1С:Документооборот по входящим документам ЭДО'"), ,
		ТекстРезультатаСоздания);
	
	ПоказатьФормуОшибокОтражения(РезультатСоздания.Ошибки);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОбработанныеДокументы", РезультатСоздания.СозданныеДокументы);
	
	Оповестить("ОтражениеВходящихЭДО", ПараметрыОповещения);
	
КонецПроцедуры

Процедура ПоказатьФормуОшибокОтражения(Ошибки)
	
	Если Ошибки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкиПоДокументам = Новый Соответствие;
	
	Для Каждого Ошибка Из Ошибки Цикл
		
		Документ = Ошибка.ПредметОшибки;
		
		ОписаниеОшибокДокумента = ОшибкиПоДокументам.Получить(Документ);
		Если ОписаниеОшибокДокумента = Неопределено Тогда
			ОписаниеОшибокДокумента = "";
		КонецЕсли;
		
		ОписаниеОшибокДокумента = ОписаниеОшибокДокумента
			+ ?(ОписаниеОшибокДокумента = "", "", Символы.ПС + Символы.ПС)
			+ Ошибка.Описание;
		
		ОшибкиПоДокументам.Вставить(Документ, ОписаниеОшибокДокумента);
	КонецЦикла;
	
	ОшибкиДляПередачиВФорму = Новый Структура;
	ОшибкиДляПередачиВФорму.Вставить("Документы", ОшибкиПоДокументам);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ошибки", ОшибкиДляПередачиВФорму);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДОДокументооборот.Форма.ПросмотрОшибокЭДО",
		Новый Структура("Ошибки", ОшибкиДляПередачиВФорму));
	
КонецПроцедуры

Процедура ОбработатьОтветОЗаписиПриОтраженииЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработчикОтвета = ДополнительныеПараметры.ОбработчикОтвета;
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Не Результат.Свойство("Значение") Тогда
			
		ВыполнитьОбработкуОповещения(ОбработчикОтвета);
	КонецЕсли;
	
	Если Результат.Свойство("БольшеНеЗадаватьЭтотВопрос")
		И Результат.БольшеНеЗадаватьЭтотВопрос = Истина
		И Результат.Значение = КодВозвратаДиалога.Да Тогда
		
		ЗапомнитьНеПоказыватьВопросЗаписиПриОтраженииЭДО();
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработчикОтвета, Результат.Значение);
	
КонецПроцедуры

Функция ТребуетсяПоказыватьВопросЗаписиПриОтраженииЭДО()
	
	Возврат ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиБольшеНеПоказывать", "ЗадаватьВопросОЗаписиПриОтраженииВходящегоЭДО", Истина);
	
КонецФункции

Процедура ЗапомнитьНеПоказыватьВопросЗаписиПриОтраженииЭДО()
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
		"НастройкиБольшеНеПоказывать", "ЗадаватьВопросОЗаписиПриОтраженииВходящегоЭДО", Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
