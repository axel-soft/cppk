////////////////////////////////////////////////////////////////////////////////
// Актуализация данных (сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик регламентного задания "Актуализация данных".
Процедура АктуализацияДанных() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.АктуализацияДанных,
		Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ПередатьРуководителямЗадачиНедействительныхПодчиненных();
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстЖурналаРегистрации = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.АктуализацияДанных,,
			ТекстЖурналаРегистрации);
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает событие журнала регистрации.
// 
// Возвращаемое значение:
//  Строка - Событие журнала регистрации.
//  
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Актуализация данных'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеКОД - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в подчиненном узле КОД.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина, для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Например:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.АктуализацияДанных;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьАктуализациюДанных;
	Настройка.ДоступноВПодчиненномУзлеКОД = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Актуализирует передачу задач руководителю.
// 
// Параметры:
//  Исполнитель - ОпределяемыйТип.УчастникЗадач.
// 
Процедура АктуализироватьПередачуЗадачРуководителю(Исполнитель)
	
	ИсполнителиВместо =
		РегистрыСведений.ИсполнителиВместоНедействительных.ИсполнителиВместо(Исполнитель);
	
	РуководителиИсполнителя = РуководителиИсполнителя(Исполнитель);
	
	ЛишниеИсполнители = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ИсполнителиВместо,
		РуководителиИсполнителя);
	
	НедостающиеИсполнители = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		РуководителиИсполнителя,
		ИсполнителиВместо);
	
	Если ЛишниеИсполнители.Количество() = 0 И НедостающиеИсполнители.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаСнятияЗадач = НСтр("ru = 'Назначен другой руководитель исполнителя'");
	
	НачатьТранзакцию();
	Попытка
		
		ВсеКомментарии = Новый Массив;
		
		Если ЛишниеИсполнители.Количество() > 0 Тогда
			
			Для Каждого ЛишнийИсполнитель Из ЛишниеИсполнители Цикл
				
				РегистрыСведений.ИсполнителиВместоНедействительных.Удалить(
					Исполнитель,
					ЛишнийИсполнитель);	
				
				ПараметрыСобытия = ПараметрыСобытияСнятиеЗадачИсполнителя(
					Исполнитель,
					ЛишнийИсполнитель,
					ПричинаСнятияЗадач);
				
				ЗарегистрироватьБизнесСобытие(
					Исполнитель,
					Справочники.ВидыБизнесСобытий.СнятиеЗадачИсполнителя,
					ПараметрыСобытия);
				
			КонецЦикла;
			
			Комментарий = СтрШаблон(
				НСтр("ru = 'Сняты задачи от %1 к %2, т.к. %3.'"),
				Исполнитель,
				СтрСоединить(ЛишниеИсполнители, ", "),
				НРег(ПричинаСнятияЗадач));
			
			ВсеКомментарии.Добавить(Комментарий);
			
		КонецЕсли;
		
		Если НедостающиеИсполнители.Количество() > 0 Тогда
			
			Для Каждого НедостающийИсполнитель Из НедостающиеИсполнители Цикл
				
				РегистрыСведений.ИсполнителиВместоНедействительных.Добавить(
					Исполнитель,
					НедостающийИсполнитель);
				
				ПараметрыСобытия =
					ПараметрыСобытияПередачаЗадачОтИсполнителя(Исполнитель, НедостающийИсполнитель);
				
				ЗарегистрироватьБизнесСобытие(
					Исполнитель,
					Справочники.ВидыБизнесСобытий.ПередачаЗадачОтИсполнителя,
					ПараметрыСобытия);
			
			КонецЦикла;
			
			Комментарий = СтрШаблон(
				НСтр("ru = 'Переданы задачи от %1 к %2.'"),
				Исполнитель,
				СтрСоединить(НедостающиеИсполнители, ", "));
			
		КонецЕсли;
		
		Комментарий = СтрСоединить(ВсеКомментарии, Символы.ПС);
		
		ЗаписатьВПротокол(
			Исполнитель,
			Перечисления.ПравилаАктуализации.ПередаватьРуководителямЗадачиНедействительныхПодчиненных,
			Комментарий);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Добавляет запись в протокол в протокол актуализации данных.
// 
// Параметры:
//  АктуализируемыйОбъект -  ОпределяемыйТип.АктуализируемыйОбъект.
//  ПравилоАктуализации - ПеречислениеСсылка.ПравилаАктуализации.
//  Комментарий - Строка.
//
Процедура ЗаписатьВПротокол(АктуализируемыйОбъект, ПравилоАктуализации, Комментарий = "")
	
	РегистрыСведений.ПротоколАктуализацииДанных.Записать(
		ТекущаяДатаСеанса(),
		АктуализируемыйОбъект,
		ПравилоАктуализации,
		Комментарий);
	
КонецПроцедуры

// Делает запись бизнес-события.
// 
// Параметры:
//  Источник - ЛюбаяСсылка.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий.
//  ПараметрыСобытия - Произвольный.
//
Процедура ЗарегистрироватьБизнесСобытие(Источник, ВидСобытия, ПараметрыСобытия)
	
	ИнформацияДляЗаписиXML = Новый ЗаписьXML;
	ИнформацияДляЗаписиXML.УстановитьСтроку();
	
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	НовыйСериализаторXDTO.ЗаписатьXML(ИнформацияДляЗаписиXML, ПараметрыСобытия, НазначениеТипаXML.Явное);
	
	СтрокаXML = ИнформацияДляЗаписиXML.Закрыть(); 
	КонтекстСобытия = Новый ХранилищеЗначения(СтрокаXML);
	
	БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Источник, ВидСобытия, КонтекстСобытия);
	
КонецПроцедуры

// Передаёт задачи руководителю.
// 
// Параметры:
//  Исполнитель - ОпределяемыйТип.УчастникЗадач.
// 
Процедура ПередатьЗадачиРуководителю(Исполнитель)
	
	РуководителиИсполнителя = РуководителиИсполнителя(Исполнитель);
	Если РуководителиИсполнителя.Количество() = 0 Тогда
		УведомитьОбОтсутствииРуководителей(Исполнитель);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого РуководительИсполнителя Из РуководителиИсполнителя Цикл
			
			РегистрыСведений.ИсполнителиВместоНедействительных.Добавить(
				Исполнитель,
				РуководительИсполнителя);
			
			ПараметрыСобытия =
				ПараметрыСобытияПередачаЗадачОтИсполнителя(Исполнитель, РуководительИсполнителя);
			
			ЗарегистрироватьБизнесСобытие(
				Исполнитель,
				Справочники.ВидыБизнесСобытий.ПередачаЗадачОтИсполнителя,
				ПараметрыСобытия);
			
		КонецЦикла;
		
		Комментарий = СтрШаблон(
			НСтр("ru = 'Переданы задачи от %1 к %2.'"),
			Исполнитель,
			СтрСоединить(РуководителиИсполнителя, ", ")); 
		
		ЗаписатьВПротокол(
			Исполнитель,
			Перечисления.ПравилаАктуализации.ПередаватьРуководителямЗадачиНедействительныхПодчиненных,
			Комментарий);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Определяет исполнителей, задачи которых переданы руководителям.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.УчастникЗадач - Исполнители, задачи которых переданы руководителям.
//  
Функция ИсполнителиЗадачиКоторыхПереданыРуководителям()
	
	Возврат РегистрыСведений.ИсполнителиВместоНедействительных.НедействительныеИсполнители();
	
КонецФункции

// Формирует параметры бизнес-события "Задачи: передача от исполнителя".
// 
// Параметры:
//  ОтКого - ОпределяемыйТип.УчастникЗадач.
//  Кому - ОпределяемыйТип.УчастникЗадач.
// 
// Возвращаемое значение:
//  Структура - Контекст бизнес-события "Задачи: передача от исполнителя".
//   * ОтКого - ОпределяемыйТип.УчастникЗадач.
//   * Кому - ОпределяемыйТип.УчастникЗадач.
//  
Функция ПараметрыСобытияПередачаЗадачОтИсполнителя(ОтКого, Кому)
	
	ПараметрыСобытия = Новый Структура("ОтКого, Кому", ОтКого, Кому);
	
	Возврат ПараметрыСобытия;
	
КонецФункции

// Формирует параметры бизнес-события "Задачи: снятие задач исполнителя".
// 
// Параметры:
//  ОтКого - ОпределяемыйТип.УчастникЗадач.
//  Кому - ОпределяемыйТип.УчастникЗадач.
//  Причина - Строка.
// 
// Возвращаемое значение:
//  Структура - Контекст бизнес-события "Задачи: снятие задач исполнителя".
//   * ОтКого - ОпределяемыйТип.УчастникЗадач.
//   * Кому - ОпределяемыйТип.УчастникЗадач.
//   * Причина - Строка.
//  
Функция ПараметрыСобытияСнятиеЗадачИсполнителя(ОтКого, Кому, Причина)
	
	ПараметрыСобытия = Новый Структура("ОтКого, Кому, Причина", ОтКого, Кому, Причина);
	
	Возврат ПараметрыСобытия;
	
КонецФункции

// Передает руководителям задачи недействительных подчиненных.
//
Процедура ПередатьРуководителямЗадачиНедействительныхПодчиненных()
	
	Если Не Константы.ПередаватьРуководителямЗадачиНедействительныхПодчиненных.Получить()
		Или Не ЗаполненоКоличествоЗадачПоИсполнителям() Тогда
		Возврат;
	КонецЕсли;
	
	ВсеНедействующиеИсполнители = Новый Массив;
	
	ВсеСотрудникиБезДействительныхПользователей =
		Сотрудники.ВсеСотрудникиБезДействительныхПользователей();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеНедействующиеИсполнители,
		ВсеСотрудникиБезДействительныхПользователей);
	
	// Определяем недействительные роли.
	ВсеИсполнителиРолей = РегистрыСведений.ИсполнителиРолей.ВсеИсполнителиРолей(Ложь);
	Для Каждого КлючИЗначение Из ВсеИсполнителиРолей Цикл
		
		Роль = КлючИЗначение.Ключ;
		ИсполнителиРоли = КлючИЗначение.Значение;
		
		ДействующиеИсполнителиРоли = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ИсполнителиРоли,
			ВсеСотрудникиБезДействительныхПользователей);
		НедействующиеИсполнителиРоли = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ИсполнителиРоли,
			ДействующиеИсполнителиРоли);
		Если НедействующиеИсполнителиРоли.Количество() = 0
			Или ДействующиеИсполнителиРоли.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеНедействующиеИсполнители.Добавить(Роль);
		
	КонецЦикла;
	
	ПереданныеИсполнители = ИсполнителиЗадачиКоторыхПереданыРуководителям();
	
	// Рассчитываем итоги.
	ПараметрыОтбора = РегистрыНакопления.КоличествоЗадачПоИсполнителям.НовыеПараметрыОтбора();
	ПараметрыОтбора.РеестрЗадач = Справочники.РеестрыЗадач.ВсеЗадачи;
	ПараметрыОтбора.Исполнитель = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыОтбора.Исполнитель,
		ВсеНедействующиеИсполнители);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыОтбора.Исполнитель,
		ПереданныеИсполнители,
		Истина);
	
	ЗадачиРеестраИтогиПоИсполнителям =
		РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
			ПараметрыОтбора,
			"Исполнитель");
	ЗадачиРеестраИтогиПоИсполнителям.Индексы.Добавить("Исполнитель");
	
	// Передаём задачи недействительных исполнителей руководителям.
	Для Каждого НедействующийИсполнитель Из ВсеНедействующиеИсполнители Цикл
		
		Если ПереданныеИсполнители.Найти(НедействующийИсполнитель) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗадачиРеестраИтоги = ЗадачиРеестраИтогиПоИсполнителям.Найти(
			НедействующийИсполнитель,
			"Исполнитель");
		
		Если ЗадачиРеестраИтоги = Неопределено Или ЗадачиРеестраИтоги.ОжидающихВыполнения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПередатьЗадачиРуководителю(НедействующийИсполнитель);
		
	КонецЦикла;
	
	// Отменим передачу задач недействительных исполнителей руководителям,
	// которые стали действительными.
	Для Каждого Исполнитель Из ПереданныеИсполнители Цикл
		
		Если ВсеНедействующиеИсполнители.Найти(Исполнитель) = Неопределено Тогда
			СнятьЗадачиИсполнителя(
				Исполнитель,
				НСтр("ru = 'Исполнитель больше не является недействительным'"));
			Продолжить;
		КонецЕсли;
		
		ЗадачиРеестраИтоги = ЗадачиРеестраИтогиПоИсполнителям.Найти(Исполнитель, "Исполнитель");
		
		Если ЗадачиРеестраИтоги = Неопределено Или ЗадачиРеестраИтоги.ОжидающихВыполнения = 0 Тогда
			СнятьЗадачиИсполнителя(
				Исполнитель,
				НСтр("ru = 'Все задачи разобраны'"));
			Продолжить;
		КонецЕсли;
		
		АктуализироватьПередачуЗадачРуководителю(Исполнитель);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет руководителей исполнителя.
// 
// Параметры:
//  Исполнитель - ОпределяемыйТип.УчастникЗадач.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.УчастникЗадач - Руководители исполнителя.
//  
Функция РуководителиИсполнителя(Исполнитель)
	    
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		РуководителиИсполнителя = РуководителиСотрудника(Исполнитель);
		
	ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		
		РуководителиИсполнителя = РуководителиРоли(Исполнитель);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестны руководители исполнителя %1 (%2).'"),
			Исполнитель,
			ТипЗнч(Исполнитель));
			
	КонецЕсли;
	
	Возврат РуководителиИсполнителя;
	
КонецФункции

// Определяет руководителей роли.
// 
// Параметры:
//  Роль - СправочникСсылка.ПолныеРоли.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.УчастникЗадач - Руководители роли.
//  
Функция РуководителиРоли(Роль)
	    
	РуководителиРоли = Новый Массив;
	
	ИсполнителиРоли = РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(Роль);
	Для Каждого ИсполнительРоли Из ИсполнителиРоли Цикл
		
		РуководителиИсполнителяРоли = РуководителиИсполнителя(ИсполнительРоли);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			РуководителиРоли,
			РуководителиИсполнителяРоли,
			Истина);
		
	КонецЦикла;
	
	Возврат РуководителиРоли;
	
КонецФункции

// Определяет руководителей сотрудника.
// 
// Параметры:
//  Исполнитель - ОпределяемыйТип.УчастникЗадач.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.УчастникЗадач - Руководители сотрудника.
//  
Функция РуководителиСотрудника(Сотрудник)
	    
	РуководителиСотрудника = Новый Массив;
	
	БлижайшийРуководитель = Сотрудники.БлижайшийРуководитель(Сотрудник);
	Если ЗначениеЗаполнено(БлижайшийРуководитель) Тогда
		РуководителиСотрудника.Добавить(БлижайшийРуководитель);
	КонецЕсли;
	
	Возврат РуководителиСотрудника;
	
КонецФункции

// Снимает задачи исполнителя, переданные руководителям.
// 
// Параметры:
//  Исполнитель - ОпределяемыйТип.УчастникЗадач.
//  ПричинаСнятияЗадач - Строка.
// 
Процедура СнятьЗадачиИсполнителя(Исполнитель, ПричинаСнятияЗадач)
	
	ИсполнителиВместо =
		РегистрыСведений.ИсполнителиВместоНедействительных.ИсполнителиВместо(Исполнитель);
	Если ИсполнителиВместо.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		РегистрыСведений.ИсполнителиВместоНедействительных.УдалитьНедействительногоИсполнителя(
			Исполнитель);
		
		Для Каждого ИсполнительВместо Из ИсполнителиВместо Цикл
			
			ПараметрыСобытия = ПараметрыСобытияСнятиеЗадачИсполнителя(
				Исполнитель,
				ИсполнительВместо,
				ПричинаСнятияЗадач);
			
			ЗарегистрироватьБизнесСобытие(
				Исполнитель,
				Справочники.ВидыБизнесСобытий.СнятиеЗадачИсполнителя,
				ПараметрыСобытия);
			
		КонецЦикла;
		
		Комментарий = СтрШаблон(
			НСтр("ru = 'Сняты задачи от %1 к %2, т.к. %3.'"),
			Исполнитель,
			СтрСоединить(ИсполнителиВместо, ", "),
			НРег(ПричинаСнятияЗадач)); 
		
		ЗаписатьВПротокол(
			Исполнитель,
			Перечисления.ПравилаАктуализации.ПередаватьРуководителямЗадачиНедействительныхПодчиненных,
			Комментарий);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Уведомляет об отсутствии руководителей.
// 
// Параметры:
//  Исполнитель - ОпределяемыйТип.УчастникЗадач.
// 
Процедура УведомитьОбОтсутствииРуководителей(Исполнитель)
	
	ТекстОшибки = СтрШаблон(
		НСтр("ru = 'Не удалось передать задачи исполнителя ""%1"" руководителю, т.к. не удалось определить руководителя.'"),
		Исполнитель);
	
	ПолучателиУведомления = РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
		Перечисления.РазделыУведомленийОПроблемах.Администрирование);
	Если ПолучателиУведомления.Количество() = 0 Тогда
		ПользовательАдминистратор = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
		
		СотрудникАдминистратор = 
			Сотрудники.ОсновнойСотрудникПользователя(
			ПользовательАдминистратор);
		
		Если ЗначениеЗаполнено(СотрудникАдминистратор) Тогда
			ПолучателиУведомления.Добавить(СотрудникАдминистратор);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ПолучательУведомления Из ПолучателиУведомления Цикл
		РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
			ТекстОшибки,
			ПолучательУведомления,
			Исполнитель);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполненоКоличествоЗадачПоИсполнителям()
	
	БлокирующиеСтатусы = Новый Массив;
	БлокирующиеСтатусы.Добавить(Перечисления.СтатусыОбработчиковОбновления.НеВыполнялся);
	БлокирующиеСтатусы.Добавить(Перечисления.СтатусыОбработчиковОбновления.Выполняется);
	БлокирующиеСтатусы.Добавить(Перечисления.СтатусыОбработчиковОбновления.Приостановлен);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбработчикиОбновления.ИмяОбработчика
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.ИмяОбработчика = ""ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_3_0_15_8""
		|	И ОбработчикиОбновления.Статус В (&БлокирующиеСтатусы)");
	
	Запрос.УстановитьПараметр("БлокирующиеСтатусы", БлокирующиеСтатусы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтложенноеОбновлениеЗавершено = РезультатЗапроса.Пустой();
	
	Возврат ОтложенноеОбновлениеЗавершено;
	
КонецФункции

#КонецОбласти
