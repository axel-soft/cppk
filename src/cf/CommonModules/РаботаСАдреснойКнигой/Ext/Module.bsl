
#Область ПрограммныйИнтерфейс

// Возвращает список функций для автоподстановки адресатов в адресной книге
Функция ПолучитьСписокДоступныхФункций() Экспорт
	
	ДоступныеФункции = РаботаСАдреснойКнигойПереопределяемый.ПолучитьСписокДоступныхФункций();
	
	ДоступныеФункции.Добавить("РаботаСАдреснойКнигой.ВсеРуководители()", 			 НСтр("ru = 'Все руководители'"));
	ДоступныеФункции.Добавить("РаботаСАдреснойКнигой.ВсеПодчиненные()", 			 НСтр("ru = 'Все подчиненные'"));
	ДоступныеФункции.Добавить("РаботаСАдреснойКнигой.ВсеКоллеги()", 				 НСтр("ru = 'Все сотрудники моего подразделения'"));
	
	ДоступныеФункции.Добавить("РаботаСАдреснойКнигой.ВсеРуководителиПредприятия()", 	   НСтр("ru = 'Все руководители предприятия'"));
	ДоступныеФункции.Добавить("РаботаСАдреснойКнигой.ВсеПользователиИнформационнойБазы()", НСтр("ru = 'Все пользователи информационной базы'"));
	
	Возврат ДоступныеФункции;
	
КонецФункции

// Возвращает значение автоподстановки
Функция ПолучитьЗначениеАвтоподстановки(Автоподстановка) Экспорт
	
	ФункцияАвтоподстановки = "";
	
	СписокФункций = ПолучитьСписокДоступныхФункций();
	Для Инд = 0 По СписокФункций.Количество() - 1 Цикл
		Если СписокФункций[Инд].Представление = Автоподстановка Тогда 
			ФункцияАвтоподстановки = СписокФункций[Инд].Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ФункцияАвтоподстановки = "" Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определена автоподстановка %1'"), Автоподстановка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Для Каждого ИмяРазделителя Из РаботаВМоделиСервиса.РазделителиКонфигурации() Цикл
			УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		КонецЦикла;
		УстановитьБезопасныйРежим(Истина);
	КонецЕсли;
	
	РезультатФункции = Неопределено;
	
	Попытка
		Выполнить("РезультатФункции = " + ФункцияАвтоподстановки);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении автоподстановки %1:
			|%2'"), Автоподстановка, ИнформацияОбОшибке().Описание);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если (ТипЗнч(РезультатФункции) = Тип("Массив") И РезультатФункции.Количество() > 0) Тогда 
		Возврат РезультатФункции;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

// Формирует список выбора участников действий при подборе по строке.
// 
// Параметры:
// 	Текст - Строка - строка поиска.
// 	ПараметрыПолученияДанных - Структура - набор дополнительных параметров отбора:
// 		* ПравилаКоммуникаций - Структура
// 		* ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий
// 		* Автор - СправочникСсылка.Сотрудники 
// 		* КонтролироватьСотрудниковБезПользователя - Булево
// 	ТекущееЗначение - СправочникСсылка - текущее значение поля ввода.
// 	ДоступныеТипы - ОписаниеТипов, Булево - типы значений доступные для выбора в поле ввода.
// 											Ложь - только тип текущего значения; Истина - все типы участников.
// 	ПравилаКоммуникаций - Структура - настройки для применения правил коммуникаций.
// 											См. ПравилаКоммуникацийКлиентСервер.КонтекстВыбора().
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//  
// Возвращаемое значение:
// 	СписокЗначений - найденные элементы.
Функция ПодобратьУчастникаНаСервере(Текст, ПараметрыПолученияДанных, ТекущееЗначение = Неопределено, Знач ДоступныеТипы = Неопределено, ПравилаКоммуникаций = Неопределено, ТипОбъекта = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат ДанныеВыбора;
	КонецЕсли;
	
	КонтролироватьСотрудниковБезПользователя = Неопределено;
	Если Не ПараметрыПолученияДанных.Свойство("КонтролироватьСотрудниковБезПользователя", КонтролироватьСотрудниковБезПользователя) Тогда
		КонтролироватьСотрудниковБезПользователя = Ложь;
	КонецЕсли;
	
	Запросы = Новый Массив;
	
	// Только текущий тип.
	Если ДоступныеТипы = Ложь Тогда
		Если ТекущееЗначение = Неопределено Тогда
			ДоступныеТипы = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Иначе
			Тип = Новый Массив;
			Тип.Добавить(ТипЗнч(ТекущееЗначение));
			ДоступныеТипы = Новый ОписаниеТипов(Тип);
		КонецЕсли;
	КонецЕсли;
	
	Автор = Неопределено;
	МоеПодразделение = Неопределено;
	ПодчиненныеРуководители = Неопределено;
	Если ПараметрыПолученияДанных.Свойство("Автор") Тогда
		Автор = ПараметрыПолученияДанных.Автор;
		
		// найдем текущее подразделение.
		Если ЗначениеЗаполнено(Автор) И
		ТипЗнч(Автор) = Тип("СправочникСсылка.Сотрудники")  Тогда
			МоеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Автор, "Подразделение");
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ДоступныеТипы = Неопределено
		Или ДоступныеТипы = Истина
		Или ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.Сотрудники")) Тогда
		
		Если Не ЗначениеЗаполнено(Автор) Или ТипЗнч(Автор) <> Тип("СправочникСсылка.Сотрудники")
		Или Не ЗначениеЗаполнено(МоеПодразделение) Тогда
			Запросы.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 20
			|	Сотрудники.Ссылка КАК Ссылка,
			|	Сотрудники.Наименование КАК Представление,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Подразделение) КАК Пояснение1,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Должность) КАК Пояснение2,
			|	Сотрудники.Действует = ЛОЖЬ КАК ПометкаНеактуальности,
			|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
			|	0 КАК Приоритет
			|	//ВременнаяТаблица
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Наименование ПОДОБНО &Текст1 СПЕЦСИМВОЛ ""/""
			|	И (&ПоказыватьНедействительных
			|	ИЛИ Сотрудники.Действует)");
		Иначе
			
			
			// первым сотрудников подразделения в котором нахожусь я
			Запросы.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 20
			|	Сотрудники.Ссылка КАК Ссылка,
			|	Сотрудники.Наименование КАК Представление,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Подразделение) КАК Пояснение1,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Должность) КАК Пояснение2,
			|	Сотрудники.Действует = ЛОЖЬ КАК ПометкаНеактуальности,
			|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
			|	0 КАК Приоритет
			|	//ВременнаяТаблица
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Наименование ПОДОБНО &Текст1 СПЕЦСИМВОЛ ""/""
			|	И Сотрудники.Подразделение = &МоеПодразделение
			|	И (&ПоказыватьНедействительных
			|	ИЛИ Сотрудники.Действует)");
			
			// сотрудников подразделений где я руководитель непосредственный
			Запросы.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 20
			|	Сотрудники.Ссылка КАК Ссылка,
			|	Сотрудники.Наименование КАК Представление,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Подразделение) КАК Пояснение1,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Должность) КАК Пояснение2,
			|	Сотрудники.Действует = ЛОЖЬ КАК ПометкаНеактуальности,
			|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
			|	1 КАК Приоритет
			|	//ВременнаяТаблица
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
			|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Вышестоящее
			|			И Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
			|			И ПодчиненностьПодразделений.РуководительПодчиненного = &Автор
			|ГДЕ
			|	Сотрудники.Наименование ПОДОБНО &Текст1 СПЕЦСИМВОЛ ""/""
			|	И (&ПоказыватьНедействительных
			|	ИЛИ Сотрудники.Действует)");
			
			// а так же руководителей подразделений подчиненных мне напрямую
			Если ЗначениеЗаполнено(Автор) Тогда
				
				ПодчиненныеРуководители = 
					СтруктураПредприятия.РуководителиПодразделенийВНепосредственномПодчинении(Автор, Ложь);
				
				Если ПодчиненныеРуководители.Количество() <> 0 Тогда
				
					Запросы.Добавить(
					"ВЫБРАТЬ ПЕРВЫЕ 20
					|	Сотрудники.Ссылка КАК Ссылка,
					|	Сотрудники.Наименование КАК Представление,
					|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Подразделение) КАК Пояснение1,
					|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Должность) КАК Пояснение2,
					|	Сотрудники.Действует = ЛОЖЬ КАК ПометкаНеактуальности,
					|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
					|	2 КАК Приоритет
					|	//ВременнаяТаблица
					|ИЗ
					|	Справочник.Сотрудники КАК Сотрудники
					|ГДЕ
					|	Сотрудники.Наименование ПОДОБНО &Текст1 СПЕЦСИМВОЛ ""/""
					|	И Сотрудники.Ссылка В (&ПодчиненныеРуководители)
					|	И (&ПоказыватьНедействительных
					|	ИЛИ Сотрудники.Действует)");
				
				КонецЕсли;
				
			КонецЕсли;
			
			// все прочие сотрудники
			Запросы.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 20
			|	Сотрудники.Ссылка КАК Ссылка,
			|	Сотрудники.Наименование КАК Представление,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Подразделение) КАК Пояснение1,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Должность) КАК Пояснение2,
			|	Сотрудники.Действует = ЛОЖЬ КАК ПометкаНеактуальности,
			|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
			|	3 КАК Приоритет
			|	//ВременнаяТаблица
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Наименование ПОДОБНО &Текст1 СПЕЦСИМВОЛ ""/""
			|	И (&ПоказыватьНедействительных
			|	ИЛИ Сотрудники.Действует)");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Роли.
	Если ДоступныеТипы = Неопределено
		Или ДоступныеТипы = Истина
		Или ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.РолиИсполнителей"))
		Или ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.ПолныеРоли")) Тогда

		Запросы.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 20
			|	ТекущиеДанные.Ссылка КАК Ссылка,
			|	ТекущиеДанные.Наименование КАК Представление,
			|	NULL КАК Пояснение1,
			|	NULL КАК Пояснение2,
			|	ЛОЖЬ КАК ПометкаНеактуальности,
			|	ТекущиеДанные.ПометкаУдаления КАК ПометкаУдаления,
			|	0 КАК Приоритет
			|//ВременнаяТаблица
			|ИЗ
			|	Справочник.РолиИсполнителей КАК ТекущиеДанные
			|ГДЕ
			|	ТекущиеДанные.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""/""
			|	И (&ПоказыватьНедействительных
			|			ИЛИ НЕ ТекущиеДанные.ПометкаУдаления)");
	КонецЕсли;
	
	Если ДоступныеТипы <> Неопределено Тогда 
		
		// Пользователи.
		Если ДоступныеТипы <> Истина
			И ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
			
			Запросы.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 20
			|	ТекущиеДанные.Ссылка КАК Ссылка,
			|	ТекущиеДанные.Наименование КАК Представление,
			|	NULL КАК Пояснение1,
			|	NULL КАК Пояснение2,
			|	ТекущиеДанные.Недействителен КАК ПометкаНеактуальности,
			|	ТекущиеДанные.ПометкаУдаления КАК ПометкаУдаления,
			|	0 КАК Приоритет
			|//ВременнаяТаблица
			|ИЗ
			|	Справочник.Пользователи КАК ТекущиеДанные
			|ГДЕ
			|	ТекущиеДанные.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""/""
			|	И (&ПоказыватьНедействительных
			|			ИЛИ НЕ ТекущиеДанные.Недействителен
			|				И НЕ ТекущиеДанные.ПометкаУдаления)");
		КонецЕсли;
		
		// Группы.
		Если ДоступныеТипы = Истина
			Или ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.РабочиеГруппы")) Тогда
			
			Запросы.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 20
			|	ТекущиеДанные.Ссылка КАК Ссылка,
			|	ТекущиеДанные.Наименование КАК Представление,
			|	NULL КАК Пояснение1,
			|	NULL КАК Пояснение2,
			|	ТекущиеДанные.Недействительна КАК ПометкаНеактуальности,
			|	ТекущиеДанные.ПометкаУдаления КАК ПометкаУдаления,
			|	0 КАК Приоритет
			|//ВременнаяТаблица
			|ИЗ
			|	Справочник.РабочиеГруппы КАК ТекущиеДанные
			|ГДЕ
			|	ТекущиеДанные.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""/""
			|	И (&ПоказыватьНедействительных
			|			ИЛИ НЕ ТекущиеДанные.Недействительна
			|				И НЕ ТекущиеДанные.ПометкаУдаления)");
		КонецЕсли;
		
		// Подразделения.
		Если ДоступныеТипы = Истина
			Или ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.СтруктураПредприятия"))
			Или ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.ПодразделенияКонтейнеры")) Тогда
			
			Запросы.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 20
			|	ТекущиеДанные.Ссылка КАК Ссылка,
			|	ТекущиеДанные.Наименование КАК Представление,
			|	NULL КАК Пояснение1,
			|	NULL КАК Пояснение2,
			|	ЛОЖЬ КАК ПометкаНеактуальности,
			|	ТекущиеДанные.ПометкаУдаления КАК ПометкаУдаления,
			|	0 КАК Приоритет
			|//ВременнаяТаблица
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК ТекущиеДанные
			|ГДЕ
			|	ТекущиеДанные.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""/""
			|	И (&ПоказыватьНедействительных
			|			ИЛИ НЕ ТекущиеДанные.ПометкаУдаления)");
		КонецЕсли;
		
		// Проекты.
		Если ДоступныеТипы = Истина
			Или ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.Проекты"))
			Или ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.ПроектыКонтейнеры")) Тогда
			
			Запросы.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 20
			|	ТекущиеДанные.Ссылка КАК Ссылка,
			|	ТекущиеДанные.Наименование КАК Представление,
			|	NULL КАК Пояснение1,
			|	NULL КАК Пояснение2,
			|	ЛОЖЬ КАК ПометкаНеактуальности,
			|	ТекущиеДанные.ПометкаУдаления КАК ПометкаУдаления,
			|	0 КАК Приоритет
			|//ВременнаяТаблица
			|ИЗ
			|	Справочник.Проекты КАК ТекущиеДанные
			|ГДЕ
			|	ТекущиеДанные.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""/""
			|	И (&ПоказыватьНедействительных
			|			ИЛИ НЕ ТекущиеДанные.ПометкаУдаления)");
		КонецЕсли;
		
		// Автоподстановки для объектов.
		Если ДоступныеТипы = Истина
			Или ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.АвтоподстановкиДляОбъектов")) Тогда
			
			Если ДоступныеТипы = Истина Тогда
				
				Запросы.Добавить(
					"ВЫБРАТЬ ПЕРВЫЕ 20
					|	ТекущиеДанные.Ссылка КАК Ссылка,
					|	ТекущиеДанные.Наименование КАК Представление,
					|	NULL КАК Пояснение1,
					|	NULL КАК Пояснение2,
					|	ЛОЖЬ КАК ПометкаНеактуальности,
					|	ТекущиеДанные.ПометкаУдаления КАК ПометкаУдаления,
					|	0 КАК Приоритет
					|//ВременнаяТаблица
					|ИЗ
					|	Справочник.АвтоподстановкиДляОбъектов КАК ТекущиеДанные
					|ГДЕ
					|	ТекущиеДанные.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""/""
					|	И Не ТекущиеДанные.ЭтоГруппа
					|	И (&ПоказыватьНедействительных
					|			ИЛИ НЕ ТекущиеДанные.ПометкаУдаления)");
				
			Иначе
				
				Запросы.Добавить(
					"ВЫБРАТЬ ПЕРВЫЕ 20
					|	ТекущиеДанные.Ссылка КАК Ссылка,
					|	ТекущиеДанные.Наименование КАК Представление,
					|	NULL КАК Пояснение1,
					|	NULL КАК Пояснение2,
					|	ЛОЖЬ КАК ПометкаНеактуальности,
					|	ТекущиеДанные.ПометкаУдаления КАК ПометкаУдаления,
					|	0 КАК Приоритет
					|//ВременнаяТаблица
					|ИЗ
					|	Справочник.АвтоподстановкиДляОбъектов КАК ТекущиеДанные
					|ГДЕ
					|	ТекущиеДанные.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""/""
					|	И ТекущиеДанные.ТипОбъекта В (&ТипыОбъектов)
					|	И Не ТекущиеДанные.ЭтоГруппа
					|	И (&ПоказыватьНедействительных
					|			ИЛИ НЕ ТекущиеДанные.ПометкаУдаления)");
				Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Не указан тип объекта %1.'"),
						ТипОбъекта);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Автоподстановки для процессов.
		Если ДоступныеТипы = Истина
			Или ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")) Тогда
			
			Запросы.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 20
			|	ТекущиеДанные.Ссылка КАК Ссылка,
			|	ТекущиеДанные.Наименование КАК Представление,
			|	NULL КАК Пояснение1,
			|	NULL КАК Пояснение2,
			|	ЛОЖЬ КАК ПометкаНеактуальности,
			|	ТекущиеДанные.ПометкаУдаления КАК ПометкаУдаления,
			|	0 КАК Приоритет
			|//ВременнаяТаблица
			|ИЗ
			|	Справочник.АвтоподстановкиДляПроцессов КАК ТекущиеДанные
			|ГДЕ
			|	ТекущиеДанные.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""/""
			|	И Не ТекущиеДанные.ЭтоГруппа
			|	И (&ПоказыватьНедействительных
			|			ИЛИ НЕ ТекущиеДанные.ПометкаУдаления)");
		КонецЕсли;
		
		Если Запросы.Количество() = 0 Тогда
			Возврат ДанныеВыбора;
		КонецЕсли;
		
		Если СтрНайти(Запросы[0], "ВЫБРАТЬ РАЗРЕШЕННЫЕ") = 0 Тогда
			Дл = СтрНайти(Запросы[0], " ");
			Запросы[0] = Лев(Запросы[0], Дл) + "РАЗРЕШЕННЫЕ" + Сред(Запросы[0], Дл);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравилаКоммуникаций <> Неопределено Тогда
		ЕстьПравилаКоммуникаций = Справочники.ПравилаКоммуникаций.ЕстьПравила(ПравилаКоммуникаций);
		Если ЕстьПравилаКоммуникаций <> Ложь Тогда
			Запросы[0] = СтрЗаменить(Запросы[0], "//ВременнаяТаблица", "ПОМЕСТИТЬ ТекущиеДанные");
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрСоединить(Запросы,
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|"));
	
	Запросы.Очистить();
	
	Если ЕстьПравилаКоммуникаций = Истина Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|" + Справочники.ПравилаКоммуникаций.ТекстЗапросаПроверки(Запрос, ПравилаКоммуникаций);
	КонецЕсли;
	
	Дл = СтрДлина(Текст);
	Запрос.УстановитьПараметр("Текст",
		ОбщегоНазначенияДокументооборотКлиентСервер.ЗамаскироватьСпецсимволыДляОператораЗапросаПОДОБНО(Текст)
		+ "%");
	
	Если СтрНайти(Текст, "(") > 2 Тогда
		// Для сотрудников ищем по ФИО без пояснения.
		Дл = СтрНайти(Текст, "(") - 1;
		Текст1 = СокрЛП(Лев(Текст, Дл));
		Запрос.УстановитьПараметр("Текст1",
			ОбщегоНазначенияДокументооборотКлиентСервер.ЗамаскироватьСпецсимволыДляОператораЗапросаПОДОБНО(Текст1)
			+ "%");
	Иначе
		Запрос.УстановитьПараметр("Текст1", Запрос.Параметры.Текст);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МоеПодразделение) Тогда
		Запрос.УстановитьПараметр("МоеПодразделение", МоеПодразделение);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Автор) Тогда
		Запрос.УстановитьПараметр("Автор", Автор);
	КонецЕсли;
	Если ПодчиненныеРуководители <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПодчиненныеРуководители", ПодчиненныеРуководители);
	КонецЕсли;	
		
	Если ПараметрыПолученияДанных.Свойство("ПоказыватьНедействительных") Тогда
		Запрос.УстановитьПараметр("ПоказыватьНедействительных", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПоказыватьНедействительных", Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипОбъекта) Тогда
		ТипыОбъектов = Новый Массив;
		ТипыОбъектов.Добавить(ТипОбъекта);
		ТипыОбъектов.Добавить(Перечисления.ТипыОбъектов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);
	КонецЕсли;
	
	ЦветВыделения = ЦветаСтиля.ВыделениеТекстаВСпискеВыбораЦвет;
	ЦветНедействительный = WebЦвета.Серый;
	ЦветВыделенияНедействительный = WebЦвета.Серый;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если ЕстьПравилаКоммуникаций = Истина Тогда
		Таблица.Сортировать("ПометкаУдаления, ПометкаНеактуальности, ЗапретПоПравиламКоммуникаций, Приоритет, Представление");
	Иначе
		Таблица.Сортировать("ПометкаУдаления, ПометкаНеактуальности, Приоритет, Представление");
	КонецЕсли;
	
	ИспользованныеСсылки = Новый Соответствие();
	
	НРег_Текст = НРег(СокрЛП(Текст));
	
	Для Каждого Выборка Из Таблица Цикл
		
		Если ИспользованныеСсылки.Получить(Выборка.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ИспользованныеСсылки.Вставить(Выборка.Ссылка, 1);
		
		ТипСсылки = ТипЗнч(Выборка.Ссылка);
		
		Если ЗначениеЗаполнено(Выборка.Пояснение1) И ЗначениеЗаполнено(Выборка.Пояснение2) Тогда 
			ТекстПояснения = СтрШаблон(" (%1, %2)", СтрСокращенно(Выборка.Пояснение1, 60), СтрСокращенно(Выборка.Пояснение2, 60));
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение1) Тогда
			ТекстПояснения = СтрШаблон(" (%1)", СтрСокращенно(Выборка.Пояснение1, 100));
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение2) Тогда
			ТекстПояснения = СтрШаблон(" (%1, %2)", "", СтрСокращенно(Выборка.Пояснение2, 100));
		Иначе
			ТекстПояснения = СтрШаблон(" (%1)", НРег(ТипСсылки));
		КонецЕсли;
		
		Если ТипСсылки = Тип("СправочникСсылка.Сотрудники")
			И (ЗначениеЗаполнено(Выборка.Пояснение1) Или ЗначениеЗаполнено(Выборка.Пояснение2)) Тогда
			
			Если Не СтрНачинаетсяС(
				НРег(СтрШаблон("%1%2", Строка(Выборка.Представление), ТекстПояснения)),
				НРег_Текст) Тогда
			
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьПравилаКоммуникаций = Истина И Выборка.ЗапретПоПравиламКоммуникаций = Истина Тогда
			ДанныеВыбора.Добавить(Новый Структура("ЗапретПоПравиламКоммуникаций, Правило, Ссылка", Истина, Выборка.ПравилоКоммуникаций, Выборка.Ссылка),
				Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(Лев(Выборка.Представление, Дл), Новый Шрифт(,,Истина,,,Выборка.ПометкаУдаления), ЦветВыделенияНедействительный),
					Новый ФорматированнаяСтрока(Сред(Выборка.Представление, Дл + 1), Новый Шрифт(,,,,,Выборка.ПометкаУдаления), ЦветНедействительный),
					Новый ФорматированнаяСтрока(ТекстПояснения, Новый Шрифт(,,,,,Выборка.ПометкаУдаления), ЦветНедействительный)));
		Иначе
			
			ДобавляемоеЗначение = Выборка.Ссылка;
			Если КонтролироватьСотрудниковБезПользователя И ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.Сотрудники")
				И Сотрудники.ЭтоСотрудникБезПользователя(Выборка.Ссылка) Тогда
				
				ДобавляемоеЗначение = Новый Структура("Ссылка, СотрудникБезПользователя", Выборка.Ссылка, Истина);
				
			КонецЕсли;
			
			ДанныеВыбора.Добавить(ДобавляемоеЗначение, 
				Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(Лев(Выборка.Представление, Дл), Новый Шрифт(,,Истина,,,Выборка.ПометкаУдаления), ?(Выборка.ПометкаНеактуальности, ЦветВыделенияНедействительный, ЦветВыделения)),
					Новый ФорматированнаяСтрока(Сред(Выборка.Представление, Дл + 1), Новый Шрифт(,,,,,Выборка.ПометкаУдаления), ?(Выборка.ПометкаНеактуальности, ЦветНедействительный, Неопределено)),
					Новый ФорматированнаяСтрока(ТекстПояснения, Новый Шрифт(,,,,,Выборка.ПометкаУдаления), ЦветНедействительный)));
		КонецЕсли;
		
		Если ДанныеВыбора.Количество() = 20 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Отключает обновление адресной книги объекта.
//
// Параметры:
//   Объект - СправочникОбъект, РегистрСведенийНаборЗаписей
//
Процедура ОтключитьОбновлениеАдреснойКниги(Объект) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеАдреснойКниги", Истина);
	
КонецПроцедуры

// Возвращает необходимость выполнения обновления адресной книги.
//
// Параметры:
//   Объект - СправочникОбъект, РегистрСведенийНаборЗаписей
//
// Возвращаемое значение:
//   Булево
//
Функция ТребуетсяОбновлениеАдреснойКниги(Объект) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеАдреснойКниги") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СтрСокращенно(Строка, Длина)
	
	Если СтрДлина(Строка) <= Длина Тогда
		Возврат Строка;
	Иначе
		Возврат Лев(Строка, Длина - 3) + "...";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПредставлениеУчастника(Участник) Экспорт
	
	Возврат РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(Участник);
	
КонецФункции

// Сведения предупреждения по сотруднику без пользователя.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники - Сотрудник
// 
// Возвращаемое значение:
//  Структура - Сведения для формирования текста предупреждения по сотруднику без пользователя:
//   * Сотрудник - СправочникСсылка.Сотрудники - Сотрудник.
//   * ВключенаАктуализацияДанныхИПередачаЗадач - Булево - признак включенности актуализации и передачи задач.
//   * БлижайшийРуководитель - СправочникСсылка.Сотрудники, Неопределено - Ближайший руководитель сотрудника.
//   * ПредставлениеСотрудникаДательный - Строка - Представление сотрудника в дательном падеже.
//   * ПредставлениеРуководителя - Строка - Представление руководителя.
//   * ТекстЕгоЕеСотрудника - Строка - "его" или "её" в зависимоти от пола сотрудника.
//
Функция СведенияПредупрежденияПоСотрудникуБезПользователя(Сотрудник) Экспорт
	
	Сведения = Новый Структура;
	
	Сведения.Вставить("Сотрудник", Сотрудник);
	Сведения.Вставить("ВключенаАктуализацияДанныхИПередачаЗадач", Ложь);
	Сведения.Вставить("БлижайшийРуководитель", Неопределено);
	Сведения.Вставить("ПредставлениеСотрудникаДательный", 
		СклонениеПредставленийОбъектов.ПросклонятьПредставление(ПредставлениеУчастника(Сотрудник), 3));
	Сведения.Вставить("ПредставлениеРуководителя", "");
	Сведения.Вставить("ТекстЕгоЕеСотрудника", "");
	
	ВключенаАктуализацияДанныхИПередачаЗадач = ВключенаАктуализацияДанныхИПередачаЗадач();
	БлижайшийРуководитель = Неопределено;
	Если ВключенаАктуализацияДанныхИПередачаЗадач Тогда 
		БлижайшийРуководитель = Сотрудники.БлижайшийРуководитель(Сотрудник);
		ПолСотрудника = РаботаСЗадачамиПовтИсп.ПолУчастника(Сотрудник);
		Сведения.ТекстЕгоЕеСотрудника = ?(ПолСотрудника = Перечисления.ПолФизическогоЛица.Мужской,
			НСтр("ru = 'его'"),
			НСтр("ru = 'её'"));
	КонецЕсли;
	
	Сведения.ВключенаАктуализацияДанныхИПередачаЗадач = ВключенаАктуализацияДанныхИПередачаЗадач;
	Сведения.БлижайшийРуководитель = БлижайшийРуководитель;
	Если ЗначениеЗаполнено(Сведения.БлижайшийРуководитель) Тогда
		Сведения.ПредставлениеРуководителя = ПредставлениеУчастника(Сведения.БлижайшийРуководитель);
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВключенаАктуализацияДанныхИПередачаЗадач()
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьАктуализациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьАктуализациюДанных");
	Возврат ИспользоватьАктуализациюДанных
		И Константы.ПередаватьРуководителямЗадачиНедействительныхПодчиненных.Получить();
		
КонецФункции

#Область Автоподстановки

// автоподстановка ВсеРуководители
Функция ВсеРуководители() Экспорт
	
	Результат = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
		Справочники.АвтоподстановкиДляОбъектов.ВсеРуководителиТекущегоПользователя);
	
	Возврат Результат;
	
КонецФункции

// автоподстановка ВсеПодчиненные
Функция ВсеПодчиненные() Экспорт
	
	Результат = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
		Справочники.АвтоподстановкиДляОбъектов.ВсеПодчиненныеТекущегоПользователя);
	
	Возврат Результат;
	
КонецФункции	

// автоподстановка ВсеКоллеги
Функция ВсеКоллеги() Экспорт
	
	Результат = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
		Справочники.АвтоподстановкиДляПроцессов.ВсеКоллегиАвтораПроцесса);
	
	Возврат Результат;
	
КонецФункции	

// автоподстановка ВсеРуководителиПредприятия
Функция ВсеРуководителиПредприятия() Экспорт 
	
	Возврат СтруктураПредприятия.ВсеРуководителиПредприятия();
	
КонецФункции

// автоподстановка ВсеПользователиИнформационнойБазы
Функция ВсеПользователиИнформационнойБазы() Экспорт 
	
	МассивПользователей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Недействителен = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда 
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
			Если ПользовательИБ <> Неопределено Тогда 
				МассивПользователей.Добавить(Выборка.Ссылка);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивПользователей;
	
КонецФункции

#КонецОбласти

#КонецОбласти