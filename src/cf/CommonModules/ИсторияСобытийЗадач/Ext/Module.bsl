
////////////////////////////////////////////////////////////////////////////////
// История событий задач: содержит процедуры по регистрации событий с задачами.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Кто отметил задачу выполненной.
//
// Параметры:
//  ЗадачаИсполнителя - ЗадачаСсылка.ЗадачаИсполнителя - Задача.
// 
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники - Определяет, кто отметил задачу выполненной.
//
Функция КтоОтметилЗадачуВыполненной(ЗадачаИсполнителя) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИсторияСобытийЗадач.Сотрудник КАК КтоОтметилЗадачуВыполненной
		|ИЗ
		|	РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
		|ГДЕ
		|	ИсторияСобытийЗадач.Задача = &ЗадачаИсполнителя
		|	И ИсторияСобытийЗадач.Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийЗадач.Выполнена)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсторияСобытийЗадач.ДатаСобытия УБЫВ");
	
	Запрос.УстановитьПараметр("ЗадачаИсполнителя", ЗадачаИсполнителя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(),
		Выборка.КтоОтметилЗадачуВыполненной,
		Справочники.Сотрудники.ПустаяСсылка());
	
КонецФункции

// Возвращает данные о перенаправлении задач.
//
// Параметры:
//  ЗадачиИсполнителей - ЗадачаСсылка.ЗадачаИсполнителя - Задачи исполнителей.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные о перенаправлении задач.
//   * ПеренаправленнаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя - Перенаправленная задача.
//   * ДатаПеренаправления - Дата - Дата перенаправления.
//   * КтоПеренаправил - СправочникСсылка.Сотрудники - Кто перенаправил.
//   * ОписаниеПеренаправления - Строка - Описание перенаправления.
//
Функция ДанныеОПеренаправленииЗадач(ЗадачиИсполнителей) Экспорт
	
	Если ЗадачиИсполнителей.Количество() = 0 Тогда
		
		ДанныеОПеренаправленииЗадач = Новый ТаблицаЗначений;
		ДанныеОПеренаправленииЗадач.Колонки.Добавить("ПеренаправленнаяЗадача");
		ДанныеОПеренаправленииЗадач.Колонки.Добавить("ДатаПеренаправления");
		ДанныеОПеренаправленииЗадач.Колонки.Добавить("КтоПеренаправил");
		ДанныеОПеренаправленииЗадач.Колонки.Добавить("ОписаниеПеренаправления");
		
		Возврат ДанныеОПеренаправленииЗадач;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияСобытийЗадач.Задача КАК ПеренаправленнаяЗадача,
		|	ИсторияСобытийЗадач.ДатаСобытия КАК ДатаПеренаправления,
		|	ИсторияСобытийЗадач.Сотрудник КАК КтоПеренаправил,
		|	ИсторияСобытийЗадач.Комментарий КАК ОписаниеПеренаправления
		|ИЗ
		|	РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
		|ГДЕ
		|	ИсторияСобытийЗадач.Задача В(&ЗадачиИсполнителей)
		|	И ИсторияСобытийЗадач.Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийЗадач.Перенаправлена)");
	
	Запрос.УстановитьПараметр("ЗадачиИсполнителей", ЗадачиИсполнителей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Записывает событие по задаче.
//
// Параметры:
//  Задача - Задача.ЗадачаИсполнителя - задача.
//  Событие - ПеречислеСсылка.ВидыСобытийЗадач - событие произошедшее с задачей.
//  Комментарий - Строка - комментарий события.
//  АвторСобытия - СправочникСсылка.Сотрудники - сотрудник под которым произошло событие,
//                если параметр не задан, то подставляется текущий основной сотрудник.
//
Процедура ЗаписатьСобытие(Задача, Событие, Комментарий = "", АвторСобытия = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	МенеджерЗаписи = РегистрыСведений.ИсторияСобытийЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задача = Задача;
	МенеджерЗаписи.ДатаСобытия = ТекущаяДата();
	
	Если ЗначениеЗаполнено(АвторСобытия) Тогда
		МенеджерЗаписи.Сотрудник = АвторСобытия;
	Иначе
		МенеджерЗаписи.Сотрудник = Сотрудники.ОсновнойСотрудникПользователя(
			ПользователиДокументооборот.ОлицетворяемыйПользователь());
	КонецЕсли;
	
	МенеджерЗаписи.Событие = Событие;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Записывает событие открытие карточки задачи
//
// Параметры:
//  Задача - Задача.ЗадачаИсполнителя - задача.
//
Процедура ЗаписатьСобытиеОткрытаКарточка(Задача) Экспорт
	
	ЗаписатьСобытие(Задача, Перечисления.ВидыСобытийЗадач.ОткрытаКарточка);
	
КонецПроцедуры

#КонецОбласти
