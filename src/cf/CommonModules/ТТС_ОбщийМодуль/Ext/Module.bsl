#Область ПрограммныйИнтерфейс

#Область ОбменОМиУ

//Устарела. Использовать ПодготовитьСообщенияДокументаКОтправке
&НаСервере
Функция ИнициализацияДанных(ФормаДокумента,
							ПервоначальнаяИнициализация = Ложь,
							УникальныйИдентификаторФормы = Неопределено,
							АдресВХранилище = "",
							НеВыгружатьФайлы = Ложь,
							ИсполнительИзПроцесса = "") Экспорт
	
	ТекОбъект = ФормаДокумента.Объект.Ссылка;
		
	УстановитьПривилегированныйРежим(Истина);

	СтруктураДанных = Новый Структура;
	
	Если ЗначениеЗаполнено(ТекОбъект.ДатаРегистрации) Тогда
		СтруктураДанных.Вставить("ДатаРегистрации"		, ПреобразованиеДаты(ТекОбъект.ДатаРегистрации));
	Иначе
		СтруктураДанных.Вставить("ДатаРегистрации"		, "");
	КонецЕсли;
	
	СтруктураДанных.Вставить("Заголовок"				, ТекОбъект.Заголовок);
	
	Если ЗначениеЗаполнено(ТекОбъект.СрокИсполнения) Тогда
		СтруктураДанных.Вставить("СрокИсполнения"		, ПреобразованиеДаты(ТекОбъект.СрокИсполнения));
	Иначе
		СтруктураДанных.Вставить("СрокИсполнения"		, "");
	КонецЕсли;
	
	СтруктураДанных.Вставить("Содержание"				, ТекОбъект.Содержание);
	СтруктураДанных.Вставить("РегистрационныйНомер"		, ТекОбъект.РегистрационныйНомер);
	СтруктураДанных.Вставить("Отправитель"				, ТекОбъект.Контрагент.Наименование);
	
	АдресОтправителя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекОбъект.Контрагент,
	Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента,
	ТекущаяДатаСеанса());
	
	СтруктураДанных.Вставить("АдресОтправителя"			, АдресОтправителя);
	СтруктураДанных.Вставить("Комментарий"				, ТекОбъект.Комментарий);
	
	Исполнитель = ПолучитьИсполнителя(ТекОбъект); 
	// TODO: Проверить корректность получения исполнителя по процессу.
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		СтруктураДанных.Вставить("Исполнитель"			, Исполнитель);
	Иначе
		СтруктураДанных.Вставить("Исполнитель"			, ИсполнительИзПроцесса);
	КонецЕсли;
	
	СтруктураДанных.Вставить("ИсходящийНомер"			, ФормаДокумента.ИсходящийНомер);
	
	Если НеВыгружатьФайлы Тогда
		ФайлыТЗ = Новый ТаблицаЗначений;
	Иначе
		ФайлыТЗ = ПолучитьФайлыТЗ(ТекОбъект);
	КонецЕсли;
	
	СтруктураДанных.Вставить("ФайлыТЗ"					, ФайлыТЗ);
		
	Если ПервоначальнаяИнициализация Тогда 
		АдресВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификаторФормы);
		Возврат "";
	КонецЕсли;
	
	СделатьВыгрузку = Ложь;
	
	Если НЕ ЗначениеЗаполнено(АдресВХранилище) Тогда
		СделатьВыгрузку = Истина;
	КонецЕсли;
	
	Если НЕ СделатьВыгрузку Тогда
		
		ПервоначальнаяСтруктура = ПолучитьИзВременногоХранилища(АдресВХранилище);
		СделатьВыгрузку = СравнитьДанныеВыгрузки(ПервоначальнаяСтруктура, СтруктураДанных);
		ФайлыБольше10МБ = СравнитьФайлы(ПервоначальнаяСтруктура.ФайлыТЗ, СтруктураДанных.ФайлыТЗ);
		
	Иначе
		ФайлыБольше10МБ = СравнитьФайлы(Неопределено, СтруктураДанных.ФайлыТЗ);
	КонецЕсли;
	
	Если СделатьВыгрузку ИЛИ СтруктураДанных.ФайлыТЗ.Количество() > 0 Тогда
		
		Если СтруктураДанных.ФайлыТЗ.Количество() > 0 Тогда
			
			//++AxelSoft NM 19.08.2024 САНФ-027438 ЗАКОММЕНТИРОВАНО:
			//Для каждого СтрокаФайлов Из СтруктураДанных.ФайлыТЗ Цикл
			//	
			//	ТекстВыгрузки = СборОбщегоТекстаСообщения(СтруктураДанных, ТекОбъект, СтрокаФайлов.Код);
			//	// Отключаем серверную отправку сообщений.
			//	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данные успешно добавлены в очередь на загрузку в ОМиУ.'"));
			//	
			//КонецЦикла;
			МассивФайлов = СтруктураДанных.ФайлыТЗ.ВыгрузитьКолонку("Ссылка");
			ТекстВыгрузки = СборОбщегоТекстаСообщения(СтруктураДанных, ТекОбъект, МассивФайлов);
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данные успешно добавлены в очередь на загрузку в ОМиУ.'"));
			//--AxelSoft NM 19.08.2024 САНФ-027438
			
		Иначе
			
			ТекстВыгрузки = СборОбщегоТекстаСообщения(СтруктураДанных, ТекОбъект);
			// Отключаем серверную отправку сообщений.
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данные успешно добавлены в очередь на загрузку в ОМиУ.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФайлыБольше10МБ;
	
КонецФункции

&НаСервере
Функция ПодготовитьСообщенияДокументаКОтправке(Документ, ПринудительнаяВыгрузка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//По файлам, смотрим те, что не в очереди в регистре, и не выгружены ранее
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыПредприятия.ДатаРегистрации КАК ДатаРегистрации,
		|	ДокументыПредприятия.Заголовок КАК Заголовок,
		|	ДокументыПредприятия.СрокИсполнения КАК СрокИсполнения,
		|	ДокументыПредприятия.Содержание КАК Содержание,
		|	ДокументыПредприятия.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ДокументыПредприятия.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ДокументыПредприятия.Контрагент КАК Контрагент,
		|	ДокументыПредприятия.Комментарий КАК Комментарий,
		|	ДанныеДокументовПредприятия.ИсходящийНомер КАК ИсходящийНомер
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|		ПО (ДанныеДокументовПредприятия.Документ = ДокументыПредприятия.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|		ПО ДокументыПредприятия.Ссылка = ТекущиеСостоянияДокументов.Документ
		|			И (ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Зарегистрирован))
		|ГДЕ
		|	ДокументыПредприятия.Ссылка = &Документ
		|	И ДокументыПредприятия.Тематика.ТТС_ОбращениеПассажираОМиУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификации,
		|	ВерсииФайлов.ПолноеНаименование КАК ПолноеНаименование,
		|	ВерсииФайлов.Размер КАК Размер,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбменЦППККрок КАК ОбменЦППККрок
		|		ПО (ОбменЦППККрок.ВерсияФайла = Файлы.ТекущаяВерсия)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО Файлы.ТекущаяВерсия = ВерсииФайлов.Ссылка
		|ГДЕ
		|	НЕ Файлы.ПометкаУдаления
		|	И Файлы.Наименование <> ""Рег штамп""
		|	И Файлы.ВладелецФайла = &Документ
		|	И ОбменЦППККрок.ВерсияФайла ЕСТЬ NULL
		|	И НЕ ВерсииФайлов.ЦППК_ФайлВыгруженОМИУ");
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[0].Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	ВыборкаДокумент = РезультатыЗапроса[0].Выбрать();	
	ВыборкаДокумент.Следующий();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДатаРегистрации"          , ПреобразованиеДаты(ВыборкаДокумент.ДатаРегистрации));
	СтруктураДанных.Вставить("Заголовок"                , ВыборкаДокумент.Заголовок);
	СтруктураДанных.Вставить("СрокИсполнения"           , ПреобразованиеДаты(ВыборкаДокумент.СрокИсполнения));	
	СтруктураДанных.Вставить("Содержание"				, ВыборкаДокумент.Содержание);
	СтруктураДанных.Вставить("РегистрационныйНомер"		, ВыборкаДокумент.РегистрационныйНомер);
	СтруктураДанных.Вставить("Отправитель"				, ВыборкаДокумент.КонтрагентНаименование);	
	СтруктураДанных.Вставить("АдресОтправителя"			, 
								УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВыборкаДокумент.Контрагент,
											Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента,
											ТекущаяДатаСеанса() ) );			
	СтруктураДанных.Вставить("Комментарий"				, ВыборкаДокумент.Комментарий);
	СтруктураДанных.Вставить("Исполнитель"			    , ПолучитьИсполнителя(Документ));	
	СтруктураДанных.Вставить("ИсходящийНомер"			, ВыборкаДокумент.ИсходящийНомер);
	
	ФайлыПревышениеПоРазмеру = Новый Массив;
	
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		
		ВыборкаФайлы = РезультатыЗапроса[1].Выбрать();
		
		МассивОтправляемыхФайлов = Новый Массив;
		ВыборкаФайлы.Сбросить();
		Пока ВыборкаФайлы.Следующий() Цикл
			Если ВыборкаФайлы.Размер > 10485760 Тогда
				ФайлыПревышениеПоРазмеру.Добавить(ВыборкаФайлы.ПолноеНаименование);
			Иначе
				МассивОтправляемыхФайлов.Добавить(ВыборкаФайлы.Ссылка);
				ВерсияФайла = ВыборкаФайлы.ТекущаяВерсия.ПолучитьОбъект();
				ВерсияФайла.ЦППК_ФайлВыгруженОМИУ = Истина;
				ВерсияФайла.ОбменДанными.Загрузка = Истина;
				ВерсияФайла.Записать(); 
			КонецЕсли;
		КонецЦикла;
		СборОбщегоТекстаСообщения(СтруктураДанных, Документ, МассивОтправляемыхФайлов);
		Если ФайлыПревышениеПоРазмеру.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данные успешно добавлены в очередь на загрузку в ОМиУ.'"));
		КонецЕсли;   
		
	ИначеЕсли ПринудительнаяВыгрузка Тогда

		СборОбщегоТекстаСообщения(СтруктураДанных, Документ);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данные успешно добавлены в очередь на загрузку в ОМиУ.'"));
		
	КонецЕсли;
	  	
	Возврат СтрСоединить(ФайлыПревышениеПоРазмеру, Символы.ПС);
		
КонецФункции

&НаСервере
Функция ИзменилисьКлючевыеРеквизиты(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.Ссылка.Пустая() Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	КлючевыеРеквизиты = Новый Структура("ДатаРегистрации, Тематика, Заголовок, СрокИсполнения, РегистрационныйНомер, Контрагент, Комментарий") ;
	
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Ссылка, 
		КлючевыеРеквизиты);

	Для Каждого Реквизит ИЗ КлючевыеРеквизиты Цикл
		
		Если ЗначенияРеквизитов[Реквизит.Ключ] <> ДокументОбъект[Реквизит.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОтправитьСообщениеВОчередь(ТекстВыгрузки, ДокументОбработки) Экспорт
	
	УдаленнаяОчередь	= "Adapter.SED.IN";
	ИмяКанала			= "SED.SVRCONN/TCP/54.247.100.71(1414)";
	ИДСообщения			= "";
	MQOO_OUTPUT			= 16;
	
	Попытка
		
		// Подключаемся к менеджеру очереди.
		Сессия = Новый COMОбъект("MQAX200.MQSession");
		МенеджерОчереди = Сессия.AccessQueueManager("");
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		СтрШаблон(НСтр("ru = 'Код: %1, (Обмен ОМиУ) - Ошибка доступа к очереди: %2'"),
					ДокументОбработки.РегистрационныйНомер,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Возврат;
		
	КонецПопытки;
	
	Попытка
		// Открываем очередь на запись.
		Очередь = МенеджерОчереди.AccessQueue(УдаленнаяОчередь, MQOO_OUTPUT);
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		СтрШаблон(НСтр("ru = 'Код: %1, (Обмен ОМиУ) - Ошибка открытия очереди: %2'"),
					ДокументОбработки.РегистрационныйНомер,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Возврат;
		
	КонецПопытки;
	
	// Открываем двоичный файл с данными обмена.
	Попытка
		
		// Создаем новое сообщение.
		СообщениеДляПередачи = Сессия.AccessMessage();
		СообщениеДляПередачи.CharacterSet = 1208;
		
		// Считываем данные из файла в сообщение, которое затем помещается в очередь.
		Путь = ПолучитьИмяВременногоФайла("xml");
		ТекстВыгрузки.Записать(Путь);
		
		ФайлДляВыгрузки = Новый Файл(Путь);
		
		Лог = Новый ТекстовыйДокумент;
		Лог.Прочитать(Путь, "UTF-8");
		ТекстФайла = Лог.ПолучитьТекст();
		
		ИДСообщения = Строка(Новый УникальныйИдентификатор);
		ТекстФайла = СтрЗаменить(ТекстФайла, "УникальныйИдентификаторСообщения", ИДСообщения);
		
		СообщениеДляПередачи.writeString(ТекстФайла);
		
		Попытка
			УдалитьФайлы(Путь);
		Исключение
		КонецПопытки;
		
		// Помещаем сообщение в очередь.
		Очередь.Put(СообщениеДляПередачи);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		СтрШаблон(НСтр("ru = 'Код: %1, (Обмен ОМиУ) - Ошибка размещения сообщения в очереди: %2'"),
						ДокументОбработки.РегистрационныйНомер,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Возврат;
		
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
	УровеньЖурналаРегистрации.Информация,,,
	СтрШаблон(НСтр("ru = 'Код: %1, (Обмен ОМиУ) - Данные успешно выгружены в ОМиУ (id сообщения: %2)'"),
				ДокументОбработки.РегистрационныйНомер,
				ИДСообщения));
	
	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данные успешно выгружены в ОМиУ.'"));
	
КонецПроцедуры

&НаСервере
Функция ПроверкаРегистрацииДокумента(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущиеСостоянияДокументов.Состояние
	|ИЗ
	|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
	|ГДЕ
	|	ТекущиеСостоянияДокументов.Документ = &Документ
	|	И ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Зарегистрирован)";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат НЕ РезультатЗапроса.Пустой();	
	
КонецФункции

#Область ЗагрузкаСообщенийИзОчереди

&НаСервере
Процедура ПроцедураВходаЗагрузкиСообщений() Экспорт
	
	// Блокируем работу нынешнего механизма отправки сообщения на стороне сервера.
	Возврат;
	
	// Читаем все сообщения в очереди.
	Пока Истина Цикл
		
		Если НЕ ПрочитатьОчередьЗагрузки() Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСРегистром();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписиВРегистреПослеПовторнойВыгрузки(ПараметрыОтправки) Экспорт
	
	//ОбменЦППККрок = РегистрыСведений.ОбменЦППККрок.СоздатьМенеджерЗаписи();
	//ОбменЦППККрок.ИдентификаторСообщения 	= ПараметрыОтправки.ИдентификаторСообщения;
	//ОбменЦППККрок.БылаПовторнаяВыгрузка		= Истина;
	//ОбменЦППККрок.Документ					= ПараметрыОтправки.Документ;
	//ОбменЦППККрок.Период					= ПараметрыОтправки.ВремяНаСейчас - 1;
	//ОбменЦППККрок.Записать(Истина);
	//
	//НаборЗаписей = РегистрыСведений.ОбменЦППККрок.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ПараметрыОтправки.ИдентификаторСообщения);
	//НаборЗаписей.Отбор.БылаПовторнаяВыгрузка.Установить(Ложь);
	//НаборЗаписей.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.ОбменЦППККрок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ПараметрыОтправки.ИдентификаторСообщения);
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		Запись.БылаПовторнаяВыгрузка = Истина;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаНаПовторнуюВыгрузкуСообщений(ДесятьМинутНазад) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменЦППККрокСрезПоследних.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ОбменЦППККрокСрезПоследних.Документ КАК Документ,
	|	ОбменЦППККрокСрезПоследних.Сообщение КАК Сообщение
	|ИЗ
	|	РегистрСведений.ОбменЦППККрок КАК ОбменЦППККрокСрезПоследних
	|ГДЕ
	|	ОбменЦППККрокСрезПоследних.ДатаЗаписи <= &НаДату
	|	И ОбменЦППККрокСрезПоследних.БылаПовторнаяВыгрузка";
	
	Запрос.УстановитьПараметр("НаДату", ДесятьМинутНазад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ОтправитьПисьмо(Выборка);
			
			НаборЗаписей = РегистрыСведений.ОбменЦППККрок.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(Выборка.ИдентификаторСообщения);
			НаборЗаписей.Записать(Истина);
			
		Исключение
			// Не требуется дополнительная обработка исключения.
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаСтруктуры(СтруктураФайла) Экспорт
	
	// Удаляем данные из регистра.
	Если СтруктураФайла.Свойство("OperUID") Тогда
		
		Если ЗначениеЗаполнено(СтруктураФайла.OperUID) Тогда
			
			НаборЗаписей = РегистрыСведений.ОбменЦППККрок.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(СокрЛП(СтруктураФайла.OperUID));
			НаборЗаписей.Прочитать();
			
			////Лучше, нежели оставлять запись в регистре
			//Для Каждого Запись ИЗ НаборЗаписей Цикл
			//	
			//	Если Запись.ВерсияФайла.Пустая() Тогда
			//		Продолжить;
			//	КонецЕсли;
			//	
			//	ВерсияФайла = Запись.ВерсияФайла.ПолучитьОбъект();
			//	ВерсияФайла.ЦППК_ФайлВыгруженОМИУ = Истина;
			//	ВерсияФайла.ОбменДанными.Загрузка = Истина;
			//	ВерсияФайла.Записать();
			//	
			//КонецЦикла;
			НаборЗаписей.Очистить();
			
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавляем данные в документ.
	Если СтруктураФайла.Свойство("SEDID") Тогда  
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		"(Обмен ОМиУ)Начало обработки документа, код " + СтруктураФайла.SEDID);
		
		НайденныйДокумент = Справочники.ДокументыПредприятия.НайтиПоКоду(СтруктураФайла.SEDID);
		Если НЕ ЗначениеЗаполнено(НайденныйДокумент) Тогда
			НайденныйДокумент = НайтиДокументПоКодуСЭД20(СтруктураФайла.SEDID);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
			
			ОбъектДокумента		= НайденныйДокумент.ПолучитьОбъект();
			ОбъектИзменен		= Ложь;
			
			Если СтруктураФайла.Свойство("Description") Тогда
				
				Если ЗначениеЗаполнено(СтруктураФайла.Description) Тогда
					
					Если СокрЛП(СтруктураФайла.Description) <> СокрЛП(НайденныйДокумент.Содержание) Тогда
						
						Если НЕ ЗначениеЗаполнено(НайденныйДокумент.Содержание) Тогда
							
							ОбъектДокумента.Содержание = СтруктураФайла.Description;
							ОбъектИзменен = Истина;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураФайла.Свойство("OMUICloseDt") Тогда        
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,,,
				"(Обмен ОМиУ)Начало обработки закрытия задач, код " + СтруктураФайла.SEDID);
			
				ПозицияПлюса = Найти(СтруктураФайла.OMUICloseDt, "+");
				СтрокаДаты = СтруктураФайла.OMUICloseDt;
				
				Если ПозицияПлюса > 0 Тогда
					СтрокаДаты = Лев(СтруктураФайла.OMUICloseDt, ПозицияПлюса - 1);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДаты) Тогда
				
					СтрокаДаты = СтрЗаменить(СтрокаДаты, "T", "");
					СтрокаДаты = СтрЗаменить(СтрокаДаты, "T", "");
					СтрокаДаты = СтрЗаменить(СтрокаДаты, "-", "");
					СтрокаДаты = СтрЗаменить(СтрокаДаты, ":", "");
					
					ПозицияПлюса = Найти(СтрокаДаты, "+");
					
					Если ПозицияПлюса > 0 Тогда
						СтрокаДаты = Лев(СтрокаДаты,ПозицияПлюса - 1);
					КонецЕсли;
					
					Попытка
						
						ДатаЗакрытия = Дата(СтрокаДаты);
						
						Если ДатаЗакрытия <> НайденныйДокумент.ДатаЗакрытияBI Тогда
							
							ОбъектДокумента.ДатаЗакрытияBI = ДатаЗакрытия;
							ОбъектИзменен = Истина;
							// Закрываем задачи исполнения с вопросом деятельности "обращение граждан"
							Попытка
								
								Если ДатаЗакрытия <> Дата(1,1,1) И СтруктураФайла.Файлы.Количество() > 0 Тогда
									ЗакрытьВсеЗадачиИсполнения(ОбъектДокумента);
								КонецЕсли;
								
							Исключение
								
								ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
								УровеньЖурналаРегистрации.Ошибка,,,
								"(Обмен ОМиУ)Задача не закрыта: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
								
							КонецПопытки;

						КонецЕсли;
						
					Исключение
						
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				
				Попытка
					ОбъектДокумента.Записать();
				Исключение
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					"(Обмен ОМиУ)Реквизиты документа не обновлены: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				КонецПопытки;
				
			КонецЕсли;
			
			Если СтруктураФайла.Свойство("SourceSystem") И СтруктураФайла.Свойство("OMUICloseDt") Тогда
				
				ПозицияПлюса = Найти(СтруктураФайла.OMUICloseDt, "+");
				СтрокаДаты = СтруктураФайла.OMUICloseDt;
				
				Если ПозицияПлюса > 0 Тогда
					СтрокаДаты = Лев(СтруктураФайла.OMUICloseDt, ПозицияПлюса - 1);
				КонецЕсли;
			
				Если ЗначениеЗаполнено(СтруктураФайла.SourceSystem) И НЕ ЗначениеЗаполнено(СтрокаДаты) Тогда
					
					Если НЕ ЕстьСостояниеИсполнения(НайденныйДокумент) Тогда
						
						Состояние = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьМенеджерЗаписи();
						Состояние.Документ		= НайденныйДокумент;
						Состояние.Состояние		= Перечисления.СостоянияДокументов.НаИсполнении;
						Состояние.Период		= ТекущаяДатаСеанса();
						Состояние.ДатаУстановки = ТекущаяДатаСеанса();
						
						Состояние.Записать();
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДаты) Тогда
					
					Если НЕ ЕстьПроцессыИсполнения(НайденныйДокумент) Тогда
						
						НаборЗаписей = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Документ.Установить(НайденныйДокумент);
						НаборЗаписей.Отбор.Состояние.Установить(Перечисления.СостоянияДокументов.НаИсполнении);
						НаборЗаписей.Записать();
						
						Состояние = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьМенеджерЗаписи();
						Состояние.Документ		= НайденныйДокумент;
						Состояние.Состояние		= Перечисления.СостоянияДокументов.Исполнен;
						Состояние.Период		= ТекущаяДатаСеанса();
						Состояние.ДатаУстановки = ТекущаяДатаСеанса();
						Состояние.Записать();
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Для каждого СтрокаФайл Из СтруктураФайла.Файлы Цикл
				
				МногострочнаяСтрока = СтрЗаменить(СтрокаФайл.ИмяФайла, ".", Символы.ПС);
				
				Если СтрЧислоСтрок(МногострочнаяСтрока) > 1 Тогда
					
					Расширение = (СтрПолучитьСтроку(МногострочнаяСтрока, СтрЧислоСтрок(МногострочнаяСтрока)));
					ИмяФайла = Лев(СтрокаФайл.ИмяФайла, СтрДлина(СтрокаФайл.ИмяФайла) - (СтрДлина(Расширение) + 1));
					
				Иначе
					
					Расширение = "";
					ИмяФайла = СтрокаФайл.ИмяФайла;
					
				КонецЕсли;
				
				АдресВХранилище = ПоместитьВоВременноеХранилище(СтрокаФайл.ДанныеФайла);
				
				Попытка
					
					СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
					СведенияОФайле.АдресВременногоХранилищаФайла = АдресВХранилище;
					СведенияОФайле.ИмяБезРасширения = ИмяФайла;
					СведенияОФайле.РасширениеБезТочки = Расширение;
					СведенияОФайле.Размер = СтрокаФайл.ДанныеФайла.Размер();
					СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
					СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДатаСеанса();
					СведенияОФайле.Комментарий = НСтр("ru = 'Файл из ОМиУ'");
					ВложениеСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(НайденныйДокумент, СведенияОФайле);
					
				Исключение
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					"(Обмен ОМиУ) Файл не добавлен: "
					+ Символы.ПС + "Документ: " + НайденныйДокумент
					+ Символы.ПС + "Файл: " + СтрокаФайл.ИмяФайла
					+ Символы.ПС + "Исключение: "+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
					+ Символы.ПС + "АдресВременногоХранилищаФайла: " + Строка(АдресВХранилище));
					
				КонецПопытки;
				
				Если НЕ ЗначениеЗаполнено(ВложениеСсылка) Тогда
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					"(Обмен ОМиУ) Файл не добавлен: "
					+ Символы.ПС + "Документ: " + НайденныйДокумент
					+ Символы.ПС + "Файл: " + СтрокаФайл.ИмяФайла
					+ Символы.ПС + "Ссылка не заполнена"
					+ Символы.ПС + "размер: " + СтрокаФайл.ДанныеФайла.Размер()
					+ Символы.ПС + "АдресВременногоХранилищаФайла: " + Строка(АдресВХранилище));
				КонецЕсли;
				
			КонецЦикла;
		Иначе  
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,,,
			"(Обмен ОМиУ)Документ не найден: " + СтруктураФайла.SEDID);

			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСоответсвияКассыИСтанции(Документ) Экспорт
	УстановитьПривилегированныйРежим(истина);
	Результат = Ложь;
	Если ЗначениеЗаполнено(Документ.СтанцияПринявшаяЗаявление_ТТС) Тогда
		ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь(); 
		Пользователь = ?(ЗначениеЗаполнено(Документ.ПретензионнаяКасса),Документ.ПретензионнаяКасса,ТекущийПользовательИБ);		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	1 КАК Поле1
			|ИЗ
			|	РегистрСведений.СтанцииИКассы КАК СтанцииИКассы
			|ГДЕ
			|	СтанцииИКассы.Станция = &Станция
			|	И СтанцииИКассы.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("Станция", Документ.СтанцияПринявшаяЗаявление_ТТС);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Количество()>0 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;	
		Возврат Результат;
	
	КонецФункции

&НаСервере
Функция НайтиДокументПоКодуСЭД20(Код)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеСведения.Объект.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство.Имя = &Имя
		|	И ДополнительныеСведения.Значение = &Значение";

	Запрос.УстановитьПараметр("Значение", Код);
	Запрос.УстановитьПараметр("Имя", "КодИзСЭД20"); 

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;  
	Иначе
		Возврат Справочники.ДокументыПредприятия.ПустаяСсылка();
	КонецЕсли; 

КонецФункции

	#КонецОбласти

#КонецОбласти

#Область РаботаСФайлами

// Процедуры заимствованы из модуля ШтрихкодированиеКлиент.
// Добавлено финальное преобразование в PDF.
&НаКлиенте
Процедура ВставитьШтрихкодPDF(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Обзор.Видимость Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущийФайл = ТекущиеДанные.Ссылка;	
	ДанныеОШтрихкодеФайла = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(ТекущийФайл,, Истина);
	
	Если ДанныеОШтрихкодеФайла <> Неопределено 
		И ДанныеОШтрихкодеФайла.Свойство("СообщениеОбОшибке") Тогда
		ВызватьИсключение(ДанныеОШтрихкодеФайла.СообщениеОбОшибке);
	КонецЕсли;
	
	Если ДанныеОШтрихкодеФайла = Неопределено  Тогда
		ВызватьИсключение(НСтр("ru = 'Штрихкод отсутствует'"));
	КонецЕсли;
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("НастройкиШтрихкода", ДанныеОШтрихкодеФайла.НастройкиШтрихкода);
	ПараметрыНастройки.Вставить("ЗаголовокФормы", НСтр("ru = 'Положение штрихкода на странице'"));
	ПараметрыНастройки.Вставить("РежимИспользованияНастроек", 1);
	ПараметрыНастройки.Вставить("ЗапросОриентацииСтраницы", Ложь);
	ПараметрыНастройки.Вставить("ДляВставки", Истина);
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ТекущиеДанные", ТекущиеДанные);
	ПараметрыОбработки.Вставить("ТекущийФайл", ТекущийФайл);
	ПараметрыОбработки.Вставить("ДанныеОШтрихкодеФайла", ДанныеОШтрихкодеФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВставитьШтрихкодPDFПродолжение", ЭтотОбъект, ПараметрыОбработки);
	ШтрихкодированиеКлиент.ПолучитьНастройкиШтрихкода(ПараметрыНастройки, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьШтрихкодPDFПродолжение(НастройкиПоложенияШК, Параметры) Экспорт
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	ТекущийФайл = Параметры.ТекущийФайл;
	ДанныеОШтрихкодеФайла = Параметры.ДанныеОШтрихкодеФайла;
	
	Если НастройкиПоложенияШК = Неопределено Тогда	
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расширение = "doc" Тогда
		#Если НЕ ВебКлиент Тогда
			Если ДанныеОШтрихкодеФайла <> Неопределено
				И ДанныеОШтрихкодеФайла.Свойство("ДвоичныеДанныеФайла")
				И (НастройкиПоложенияШК.ВысотаШК <> ДанныеОШтрихкодеФайла.НастройкиШтрихкода.ВысотаШК
				ИЛИ НастройкиПоложенияШК.ПоказыватьЦифры <> ДанныеОШтрихкодеФайла.НастройкиШтрихкода.ПоказыватьЦифры) Тогда
				ДанныеОШтрихкодеФайла.ДвоичныеДанныеИзображения = 
					ШтрихкодированиеСервер.ПолучитьКартинкуШтрихкода(ДанныеОШтрихкодеФайла.Штрихкод,, НастройкиПоложенияШК.ВысотаШК, НастройкиПоложенияШК.ПоказыватьЦифры).ПолучитьДвоичныеДанные(); 
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется вставка штрихкода в файл.
				|Пожалуйста, подождите...'"));
				
			Если ДанныеОШтрихкодеФайла <> Неопределено И ДанныеОШтрихкодеФайла.Свойство("ДвоичныеДанныеФайла") Тогда
			    Результат = ШтрихкодированиеКлиентСервер.ВставитьШтрихкодСИспользованиемНастроек(ТекущийФайл, 
					НастройкиПоложенияШК, 
					Истина, 
					ДанныеОШтрихкодеФайла.ДвоичныеДанныеИзображения, 
					ДанныеОШтрихкодеФайла.ДвоичныеДанныеФайла,
					ДанныеОШтрихкодеФайла.Расширение,
					ДанныеОШтрихкодеФайла.ФайлРедактируется, 
					ДанныеОШтрихкодеФайла.ИзменениеФайловMSWordТолькоНаСервере);
			Иначе
				Результат = Ложь;
			КонецЕсли;
				
			Если НЕ Результат Тогда
				Результат = ШтрихкодированиеСервер.ВставитьШтрихкод(ТекущийФайл, ДанныеОШтрихкодеФайла);
			КонецЕсли;
			Состояние();
		#Иначе
			Состояние(НСтр("ru = 'Выполняется вставка штрихкода в файл.
				|Пожалуйста, подождите...'"));
			Результат = ШтрихкодированиеСервер.ВставитьШтрихкод(ТекущийФайл, ДанныеОШтрихкодеФайла);
			Состояние();
		#КонецЕсли
	Иначе
		Результат = ШтрихкодированиеСервер.ВставитьШтрихкод(ТекущийФайл, ДанныеОШтрихкодеФайла);
	КонецЕсли;

	Если Результат Тогда
		
		// Производим преобразование в PDF.
		ПреобразоватьПрикрепленныйФайлВPdf(ТекущийФайл, ДанныеОШтрихкодеФайла.Расширение);
		
		Текст = НСтр("ru = 'Изображение штрихкода успешно вставлено в файл и преобразовано в PDF!'");
		
		ФайлСсылка = ТекущийФайл;
		Оповестить(
			"Запись_Файл", 
			Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы, ИдентификаторРодительскойФормы", 
				"ДанныеФайлаИзменены", 
				ФайлСсылка, Неопределено, Неопределено,
				Неопределено),
				ФайлСсылка);
		
	Иначе
		Текст = НСтр("ru = 'Не удалось вставить изображение штрихкода в файл'");
	КонецЕсли;
	
	ПоказатьПредупреждение(, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьПрикрепленныйФайлВPdf(Файл, Расширение) Экспорт
	
	ДвоичныеДанныеФайла = АвтозаполнениеШаблоновФайловВызовСервера.ПолучитьДвоичныеДанныеФайла(Файл);
	
	Если Расширение = "odt" Тогда
		ДвоичныеДанныеФайла = ПреобразоватьOpenOfficeВPdf(ДвоичныеДанныеФайла, Расширение);
	ИначеЕсли АвтозаполнениеШаблоновФайловКлиентСервер.ФорматMSWord(Расширение) Тогда
		ДвоичныеДанныеФайла = ПреобразоватьWordВPdf(ДвоичныеДанныеФайла, Расширение);
	КонецЕсли;
	
	ТТСВызовСервера.ОбновитьВерсиюИзДвоичныхДанных(ДвоичныеДанныеФайла, Файл, "Преобразование в PDF", Неопределено, "pdf");
	
КонецПроцедуры

// Процедуры заимствованы из модуля ВизуализацияЭПКлиентСервер.
&НаКлиенте
Функция ПреобразоватьWordВPdf(ДвоичныеДанныеФайла, Расширение) Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Попытка
			WordApp = Новый COMОбъект("Word.Application");
		Исключение
			ВызватьИсключение(НСтр("ru = 'Ошибка работы с приложением MS Word. Необходимо проверить правильность установки приложения.'"));
		КонецПопытки;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Преобразование в pdf файла MS Word возможна только в Windows. Обратитесь к администратору.'"));	
	КонецЕсли;
	
	РасширениеДляЗаписи = "pdf";
	
	ИмяВременногоФайлаOffice = ПолучитьИмяВременногоФайла(Расширение);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(РасширениеДляЗаписи);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайлаOffice);
	
	Док = WordApp.Documents.Add(ИмяВременногоФайлаOffice);
	
	wdExportFormatPDF = 17;
	UseISO19005_1 = Истина;
	Док.ExportAsFixedFormat(НовыйПутьКФайлу, wdExportFormatPDF,,,,,,,,,,,,UseISO19005_1);
	
	Док.Close(0);  // 0 -закрыть без сохранения

	WordApp.Quit();
	WordApp = Неопределено;
	
	УдалитьФайлы(ИмяВременногоФайлаOffice);
	
	Возврат Новый ДвоичныеДанные(НовыйПутьКФайлу);
	
КонецФункции

&НаКлиенте
Функция ПреобразоватьOpenOfficeВPdf(ДвоичныеДанныеФайла, Расширение) Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Попытка
			
			// Открыть OpenOffice
			ОбъектServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
			ИнстансDesktop = ОбъектServiceManager.createInstance("com.sun.star.frame.Desktop");
			
		Исключение
			ВызватьИсключение(НСтр("ru = 'Ошибка работы с приложением Open Office. Необходимо проверить правильность установки приложения.'"));
		КонецПопытки;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Преобразование в pdf файла Open Office возможна только в Windows. Обратитесь к администратору.'"));	
	КонецЕсли;
	
	РасширениеДляЗаписи = "pdf";
	
	ИмяВременногоФайлаOffice = ПолучитьИмяВременногоФайла(Расширение);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(РасширениеДляЗаписи);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайлаOffice);
	
	// Параметры открытия: отключение исполнения макросов.
	ПараметрыДокумента = Новый COMSafeArray("VT_VARIANT", 2);
	
	РежимЗапуска = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
		"MacroExecutionMode",
		0); // const short NEVER_EXECUTE = 0
	ПараметрыДокумента.SetValue(0, РежимЗапуска);

	Hidden = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
		"Hidden",
		Истина); // true
	ПараметрыДокумента.SetValue(1, Hidden);
	
	
	// Открыть документ OpenOffice.
	Document = ИнстансDesktop.loadComponentFromURL(ПреобразоватьВURL(ИмяВременногоФайлаOffice), 
		"_blank", 0, ПараметрыДокумента);
		
	ПараметрыСохранения = Новый COMSafeArray("VT_VARIANT", 2);
	FilterName = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
		"FilterName",
		"writer_pdf_Export");
	ПараметрыСохранения.SetValue(0, FilterName);
	
	SelectPdfVersion = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
		"SelectPdfVersion",
		1); // 1 - PDF/A-1 (ISO 19005-1:2005) 
	ПараметрыСохранения.SetValue(1, SelectPdfVersion);
	
	Document.storeToURL(ПреобразоватьВURL(НовыйПутьКФайлу), ПараметрыСохранения);
	
	Document.close(-1);        //Закрыть документ
	
 	Document     = Неопределено;
    ИнстансDesktop     = Неопределено;	
    ОбъектServiceManager = Неопределено;
    ИнстансDispatcher = Неопределено;
		
	УдалитьФайлы(ИмяВременногоФайлаOffice);
	
	Возврат Новый ДвоичныеДанные(НовыйПутьКФайлу);
	
КонецФункции	

#КонецОбласти

#Область ПретензионнаяРабота

&НаСервере
Функция НайтиСоответствияКассыИСтанции(Документ) Экспорт
	УстановитьПривилегированныйРежим(истина);
	Результат = Ложь;
	Если ЗначениеЗаполнено(Документ.СтанцияПринявшаяЗаявление_ТТС) Тогда
		ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь(); 
		Пользователь = ?(ЗначениеЗаполнено(Документ.ПретензионнаяКасса),Документ.ПретензионнаяКасса,ТекущийПользовательИБ);		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	1 КАК Поле1
			|ИЗ
			|	РегистрСведений.СтанцииИКассы КАК СтанцииИКассы
			|ГДЕ
			|	СтанцииИКассы.Станция = &Станция
			|	И СтанцииИКассы.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("Станция", Документ.СтанцияПринявшаяЗаявление_ТТС);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Количество()>0 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;	
		Возврат Результат;
	
	КонецФункции

&НаСервере
Процедура ДобавитьСлужебнуюГруппуВерхнегоУровня(Документ,ТекРабочаяГруппа = Неопределено) Экспорт
	
	Если ТекРабочаяГруппа = Неопределено Тогда
		ТекРабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Документ.ссылка);
	КонецЕсли;
	
	ТекущееПодразделение = Документ.Подразделение;
	Пока НЕ ТекущееПодразделение.ВерхнийУровень_ТТС Цикл
		Если ЗначениеЗаполнено(ТекущееПодразделение.Родитель) Тогда
			ТекущееПодразделение = ТекущееПодразделение.Родитель;
		Иначе
			ТекущееПодразделение = неопределено;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекущееПодразделение)
		И ТекРабочаяГруппа.Найти(ТекущееПодразделение.ТТС_ГруппаПользователей) = Неопределено Тогда
		
		Попытка
			РабочаяГруппаДобавить = Документ.ДополнительныеСвойства.РабочаяГруппаДобавить;
		Исключение
			РабочаяГруппаДобавить = Новый массив;
		КонецПопытки;
		РабочаяГруппаДобавить.Добавить(
		Новый Структура(
		"Участник, Изменение",
		ТекущееПодразделение.ТТС_ГруппаПользователей,
		Истина));
		Документ.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДнейОтТекущейДаты(ДатаВычитаемая) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ВычитаемаяДата, ДЕНЬ), НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ) КАК Разность";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВычитаемаяДата",ДатаВычитаемая);
	Результат = Запрос.Выполнить().Выбрать();			   
	Результат.Следующий();
	Возврат	Результат.Разность;
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции
 
// Создание структуры для параметров OpenOffice.
&НаКлиенте
Функция ПрисвоитьЗначениеСвойству(Объект, ИмяСвойства, ЗначениеСвойства)
	
	Свойства = Объект.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Свойства.Name = ИмяСвойства;
	Свойства.Value = ЗначениеСвойства;
	
	Возврат Свойства;
	
КонецФункции

// Процедура закрытия Процессов исполнения по Обращениям граждан.
&НаСервере
Процедура ЗакрытьВсеЗадачиИсполнения(ДокОбъект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокОбъект.ДатаЗакрытияBI) Тогда
		Возврат;
	КонецЕсли;
	
	// Если заполнена тематика, то проверяем флаг "Обращение пассажира".
	Если ЗначениеЗаполнено(ДокОбъект.Тематика) Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Тематика, "ТТС_ОбращениеПассажираОМиУ") = Ложь Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДокОбъект.ВидДокумента) Тогда
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.ВидДокумента, "ЯвляетсяВходящейКорреспонденцией") = Ложь Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителяПредметы.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
	|ГДЕ
	|	ЗадачаИсполнителяПредметы.Предмет = &Предмет
	|	И ЗадачаИсполнителяПредметы.Ссылка.ТочкаМаршрута = &ТочкаМаршрута
	|	И ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.Состояние = &Состояние";
	
	Запрос.УстановитьПараметр("Предмет", ДокОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
	Запрос.УстановитьПараметр("Состояние",Перечисления.СостоянияБизнесПроцессов.Активен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыВыполнения = Новый Структура();
		ПараметрыВыполнения.Вставить("РезультатВыполнения","Закрыта автоматически после получения даты закрытия из ОМиУ " + Строка(ТекущаяДатаСеанса()));
		ПараметрыВыполнения.Вставить("ДатаИсполнения",ДокОбъект.ДатаЗакрытияBI);
		
		ВыполнениеЗадачСервер.ВыполнитьЗадачу(Выборка.Ссылка, ПараметрыВыполнения);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,,,
		"(Обмен ОМиУ) Закрыта задача: " + Строка(Выборка.Ссылка));	
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуПользователей(Пользователь,Подразделение)  Экспорт
	
	//удалим
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователейСостав.Ссылка
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	ГруппыПользователейСостав.Ссылка.Родитель В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.СтруктурныеГруппы))
	               |	И ГруппыПользователейСостав.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектВыборки = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектВыборки.Состав.Удалить(ОбъектВыборки.Состав.Найти(Пользователь,"Пользователь"));
		ОбъектВыборки.Записать();
	КонецЦикла;
	
	//добавим
	ОбъектГруппа = Подразделение.ТТС_ГруппаПользователей.ПолучитьОбъект();
	СтрокаТЧ = ОбъектГруппа.Состав.добавить();
	СтрокаТЧ.Пользователь = Пользователь;
	ОбъектГруппа.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ТТС_ПриИзмененииСтруктурыПредприятияПриЗаписи(Источник, Отказ) Экспорт
	Если Источник.ДополнительныеСвойства.ЗначениеИзменено И Источник.Количество() > 0 Тогда
		ТТС_ОбщийМодуль.ОбновитьГруппуПользователей(Источник[0].Пользователь,Источник[0].Подразделение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуПользователейПриИзмененииСтруктурыПредприятия(Источник, Отказ) Экспорт
	
	//  Пока отключена - возможно не нужна, ошибка на предопределенные значения
	// 	вызывается из подписки ТТС_ПриИзмененииСтруктурыПредприятия
	//	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый")
	//    ИЛИ  Источник.ДополнительныеСвойства.Свойство("СтарыйРодитель") Тогда
	//    ОбновитьПодчиненностьГруппыПользователей(Источник);        
	//	ИначеЕсли Источник.ПометкаУдаления Тогда	
	//    ПометитьГруппуПользователейНаУдаление(Источник);
	//	КонецЕсли; 	

КонецПроцедуры 

&НаСервере
Функция ПреобразованиеДаты(ДатаПреобразования)
	
	Если ЗначениеЗаполнено(ДатаПреобразования) Тогда
		СтрокаДаты = XMLСтрока(ДатаПреобразования);
	Иначе
		СтрокаДаты = "";
	КонецЕсли;
	
	Возврат СтрокаДаты;
	
КонецФункции

&НаСервере
Функция СравнитьФайлы(ПервоначальнаяСтруктура, КонечнаяСтруктураДанных) 
	
	Если ПервоначальнаяСтруктура <> Неопределено Тогда
		
		Для каждого СтрокаФайлов Из ПервоначальнаяСтруктура Цикл
			
			НайденнаяСтрока = КонечнаяСтруктураДанных.Найти(СтрокаФайлов.Код);
			
			Если НайденнаяСтрока <> Неопределено Тогда
				
				Если НайденнаяСтрока.ТекущаяВерсияДатаМодификацииФайла = СтрокаФайлов.ТекущаяВерсияДатаМодификацииФайла Тогда
					КонечнаяСтруктураДанных.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПромежуточнаяТаблица = КонечнаяСтруктураДанных.Скопировать();
	ФайлыБольше10МБ = "";
	
	Для Каждого СтрокаФайлов Из ПромежуточнаяТаблица Цикл
		
		Если СтрокаФайлов.Размер > 10485760 Тогда
			
			НайденнаяСтрока = КонечнаяСтруктураДанных.Найти(СтрокаФайлов.Код);
			ФайлыБольше10МБ = ФайлыБольше10МБ + НайденнаяСтрока.ПолноеНаименование + Символы.ПС;
			КонечнаяСтруктураДанных.Удалить(НайденнаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ФайлыБольше10МБ;
	
КонецФункции

&НаСервере
Функция СравнитьДанныеВыгрузки(ПервоначальнаяСтруктура, КонечнаяСтруктураДанных)
	
	Если ПервоначальнаяСтруктура.ДатаРегистрации 		= КонечнаяСтруктураДанных.ДатаРегистрации
		И ПервоначальнаяСтруктура.Заголовок 			= КонечнаяСтруктураДанных.Заголовок
		И ПервоначальнаяСтруктура.СрокИсполнения 		= КонечнаяСтруктураДанных.СрокИсполнения
		И ПервоначальнаяСтруктура.Содержание 			= КонечнаяСтруктураДанных.Содержание
		И ПервоначальнаяСтруктура.РегистрационныйНомер 	= КонечнаяСтруктураДанных.РегистрационныйНомер
		И ПервоначальнаяСтруктура.Отправитель 			= КонечнаяСтруктураДанных.Отправитель
		И ПервоначальнаяСтруктура.АдресОтправителя 		= КонечнаяСтруктураДанных.АдресОтправителя
		И ПервоначальнаяСтруктура.Комментарий 			= КонечнаяСтруктураДанных.Комментарий
		И ПервоначальнаяСтруктура.Исполнитель 			= КонечнаяСтруктураДанных.Исполнитель  
		И ПервоначальнаяСтруктура.ИсходящийНомер 		= КонечнаяСтруктураДанных.ИсходящийНомер Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьФайлыТЗ(ТекОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	//++AxelSoft NM 19.08.2024 САНФ-027438
	|	Файлы.Ссылка КАК Ссылка,
	//--AxelSoft NM 19.08.2024 САНФ-027438
	|	Файлы.Код КАК Код,
	|	Файлы.ТекущаяВерсияДатаМодификацииФайла КАК ТекущаяВерсияДатаМодификацииФайла,
	|	Файлы.ТекущаяВерсияРазмер КАК Размер,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И НЕ Файлы.ПометкаУдаления
	|	И Файлы.Наименование <> ""Рег штамп""";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ТекОбъект);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаСервере
Функция ПолучитьИсполнителя(ТекОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсполнениеИсполнители.Исполнитель.Наименование КАК Исполнитель
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИсполнениеПредметы.Ссылка КАК ПроцессИсполнение
	|	ИЗ
	|		БизнесПроцесс.Исполнение.Предметы КАК ИсполнениеПредметы
	|	ГДЕ
	|		ИсполнениеПредметы.Предмет = &Предмет
	|		И ИсполнениеПредметы.Ссылка.Стартован
	|		И ИсполнениеПредметы.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ИсполнениеПредметы.Ссылка.Дата) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение.Исполнители КАК ИсполнениеИсполнители
	|		ПО ВложенныйЗапрос.ПроцессИсполнение = ИсполнениеИсполнители.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсполнениеИсполнители.НомерСтроки";
	
	Запрос.УстановитьПараметр("Предмет", ТекОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(Выборка.Исполнитель = NULL, "", Выборка.Исполнитель);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СборОбщегоТекстаСообщения(СтруктураДанных, Документ, МассивФайлов = Неопределено)
	
	Путь = ПолучитьИмяВременногоФайла("xml");
	UUID =Строка(Документ.Ссылка.УникальныйИдентификатор());
	
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(Путь, "UTF-8"); 
	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("putTreatment");
	
	ДобавитьЗаписьXML(Запись, "RqUID"			, "УникальныйИдентификаторСообщения");
	ДобавитьЗаписьXML(Запись, "RqTm"			, ПреобразованиеДаты(ТекущаяДатаСеанса()));
	ДобавитьЗаписьXML(Запись, "OperUID"			, UUID);
	ДобавитьЗаписьXML(Запись, "SourceSystem"	, "SED");
	ДобавитьЗаписьXML(Запись, "SEDID"			, Документ.Код);
	ДобавитьЗаписьXML(Запись, "RegistrationDt"	, СтруктураДанных.ДатаРегистрации);
	ДобавитьЗаписьXML(Запись, "Header"			, СтруктураДанных.Заголовок);
	
	Если ЗначениеЗаполнено(СтруктураДанных.СрокИсполнения) Тогда
		ДобавитьЗаписьXML(Запись, "ReplyDeadlineDt"	, СтруктураДанных.СрокИсполнения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.Содержание) Тогда
		ДобавитьЗаписьXML(Запись, "Description"		, СтруктураДанных.Содержание);
	Иначе
		ДобавитьЗаписьXML(Запись, "Description"		, СтруктураДанных.Заголовок);
	КонецЕсли;
	
	ДобавитьЗаписьXML(Запись, "RegistrNum"		, СтруктураДанных.РегистрационныйНомер);
	ДобавитьЗаписьXML(Запись, "Declarer"		, СтруктураДанных.Отправитель);
	ДобавитьЗаписьXML(Запись, "DeclarerAddr"	, СтруктураДанных.АдресОтправителя);
	ДобавитьЗаписьXML(Запись, "Comment"			, СтруктураДанных.Комментарий);
	ДобавитьЗаписьXML(Запись, "Performer"		, СтруктураДанных.Исполнитель);
	ДобавитьЗаписьXML(Запись, "OutgoingNum"		, СтруктураДанных.ИсходящийНомер);
	
	ТекущаяВерсия = Неопределено;
	
	Если МассивФайлов <> Неопределено Тогда
		
		Запись.ЗаписатьНачалоЭлемента("Attachments");
		
		//++AxelSoft NM 19.08.2024 САНФ-027438
		Для каждого ВыборкаДанныеФайла ИЗ МассивФайлов Цикл
			Если ВыборкаДанныеФайла.ТекущаяВерсия.Размер <= 10485760 Тогда
		//--AxelSoft NM 19.08.2024 САНФ-027438
		
				Запись.ЗаписатьНачалоЭлемента("Attachment");
				
				ТекущаяВерсия = ВыборкаДанныеФайла.ТекущаяВерсия;
				СвойстваИДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(ВыборкаДанныеФайла.Ссылка, ВыборкаДанныеФайла.ТекущаяВерсия);
				
				ИмяФайла = СвойстваИДвоичныеДанныеФайла.ДанныеФайла.ПолноеНаименованиеВерсии + "." + СвойстваИДвоичныеДанныеФайла.ДанныеФайла.Расширение;
				
				ДобавитьЗаписьXML(Запись, "FileName", ИмяФайла);
				
				СтрокаБезПробелов = Base64Строка(СвойстваИДвоичныеДанныеФайла.ДвоичныеДанные);
				СтрокаБезПробелов = СтрЗаменить(СтрокаБезПробелов, " ", "");
				СтрокаБезПробелов = СтрЗаменить(СтрокаБезПробелов, Символы.ПС, "");
				СтрокаБезПробелов = СтрЗаменить(СтрокаБезПробелов, Символы.Таб, "");
				СтрокаБезПробелов = СтрЗаменить(СтрокаБезПробелов, Символы.ВТаб, "");
				СтрокаБезПробелов = СтрЗаменить(СтрокаБезПробелов, Символы.ВК, "");
				
				ДобавитьЗаписьXML(Запись, "BinaryAttach", СтрокаБезПробелов);		
				
				Запись.ЗаписатьКонецЭлемента();
			
		//++AxelSoft NM 19.08.2024 САНФ-027438
			КонецЕсли;
		КонецЦикла;
		//--AxelSoft NM 19.08.2024 САНФ-027438
		
		Запись.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	Запись.ЗаписатьКонецЭлемента();
	Запись.Закрыть(); 
	
	ДвоичныеДанные = Новый ДвоичныеДанные(Путь);
	ДвоичныеДанные.Записать(Путь);
	
	Попытка
		УдалитьФайлы(Путь);
	Исключение
	КонецПопытки;
	
	ДобавлениеЗаписиВРегистр(UUID, Документ, ДвоичныеДанные, ТекущаяВерсия);
	
	Возврат ДвоичныеДанные;
	
КонецФункции

&НаСервере
Процедура ДобавлениеЗаписиВРегистр(ИдСообщения, Документ, Сообщение, ВерсияФайла = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОбменЦППККрок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ); 
	НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ИдСообщения);

	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.ИдентификаторСообщения 	= ИдСообщения;
	НоваяЗапись.БылаПовторнаяВыгрузка = Ложь;
	НоваяЗапись.Документ = Документ;
	НоваяЗапись.ВерсияФайла = ВерсияФайла;
	НоваяЗапись.Сообщение = Новый ХранилищеЗначения(Сообщение);
	НоваяЗапись.ДатаЗаписи = ТекущаяДатаСеанса();
	
	НаборЗаписей.Записать();
	
	//
	//ОбменЦППККрок = РегистрыСведений.ОбменЦППККрок.СоздатьМенеджерЗаписи();
	//
	//ОбменЦППККрок.ИдентификаторСообщения 	= ИдСообщения;
	//ОбменЦППККрок.БылаПовторнаяВыгрузка		= Ложь;
	//ОбменЦППККрок.Документ					= Документ;
	//ОбменЦППККрок.ВерсияФайла               = ВерсияФайла;
	//ОбменЦППККрок.Сообщение					= Новый ХранилищеЗначения(Сообщение);
	//ОбменЦППККрок.ДатаЗаписи					= ТекущаяДатаСеанса();
	//
	//ОбменЦППККрок.Записать();				
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьXML(Запись, ИмяСтроки, ЗначениеСтроки)
	
	Запись.ЗаписатьНачалоЭлемента(ИмяСтроки);
	Запись.ЗаписатьТекст(ЗначениеСтроки);
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура РаботаСРегистром()

	//Не используется по вызовам
	ВремяНаСейчас 		= ТекущаяДатаСеанса();
	ДесятьМинутНазад	= ВремяНаСейчас - 600;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменЦППККрокСрезПоследних.ИдентификаторСообщения,
	|	ОбменЦППККрокСрезПоследних.Документ,
	|	ОбменЦППККрокСрезПоследних.Сообщение
	|ИЗ
	|	РегистрСведений.ОбменЦППККрок.СрезПоследних(&НаДату, БылаПовторнаяВыгрузка = ЛОЖЬ) КАК ОбменЦППККрокСрезПоследних";
	
	Запрос.УстановитьПараметр("НаДату", ДесятьМинутНазад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОтправитьСообщениеВОчередь(Выборка.Сообщение.Получить(), Выборка.Документ);
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("Документ", Выборка.Документ);
		ПараметрыОтправки.Вставить("ВремяНаСейчас", ВремяНаСейчас);
		ПараметрыОтправки.Вставить("ИдентификаторСообщения", Выборка.ИдентификаторСообщения);
		
		ОбработатьЗаписиВРегистреПослеПовторнойВыгрузки(ПараметрыОтправки);
		
	КонецЦикла;
	
	ПроверкаНаПовторнуюВыгрузкуСообщений(ДесятьМинутНазад);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмо(СообщениеОбмена)
	
	ПараметрыОтправки = ПараметрыОтправкиПочтовогоСообщенияВызовСервера.Создать();
	
	Получатель = Новый Массив;
	Получатель.Добавить(Константы.АдресПочтыОМиУ.Получить());
	
	ТекстПисьма = СтрШаблон(НСтр("ru = 'По документу: %1" + Символы.ПС + "не получено подтверждение от ОМиУ. OperUID: %2'"),
							Строка(СообщениеОбмена.Документ),
							Строка(СообщениеОбмена.ИдентификаторСообщения));
		
	Сообщение = Новый Структура;
	Сообщение.Вставить("Важность"	, Перечисления.ВажностьПисем.Обычная);
	Сообщение.Вставить("Вложения"	, Новый Массив);
	Сообщение.Вставить("Копии"		, Новый Массив);
	Сообщение.Вставить("Получатели"	, Получатель);
	Сообщение.Вставить("СлепыеКопии", Новый Массив);
	Сообщение.Вставить("Текст"		, ТекстПисьма);
	Сообщение.Вставить("Тема"		, НСтр("ru = 'Не получено подтверждение от ОМиУ'"));
	
	Пароль 				= ПараметрыОтправкиПочтовогоСообщения.ПолучитьПароль(ПараметрыОтправки);
	УчетнаяЗапись 		= ПараметрыОтправкиПочтовогоСообщения.ПолучитьПрофиль(ПараметрыОтправки);
	СообщениеОбОшибке 	= "";
	
	КодВозврата 		= ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(
	Сообщение,
	УчетнаяЗапись,
	Пароль,
	СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьОчередьЗагрузки()
	
	Попытка
		// Подключаемся к менеджеру очереди.
		Сессия = Новый COMОбъект("MQAX200.MQSession");
		МенеджерОчереди = Сессия.AccessQueueManager("");
		
		// Открываем очередь для чтения.
		Очередь = МенеджерОчереди.AccessQueue("App.SED.REQUEST", 1);
		
		GetOptions = Сессия.AccessGetMessageOptions();
		GetOptions.Options = 2;
		
	Исключение
		
		Сессия = "";
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен ОМиУ'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, "(Обмен ОМиУ) " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
		
	КонецПопытки;
	
	СтруктураФайла	= Новый Структура;
	ТЗФайлов		= Новый ТаблицаЗначений;
	ТЗФайлов.Колонки.Добавить("ИмяФайла");
	ТЗФайлов.Колонки.Добавить("ДанныеФайла");
	
	Попытка
		
		// Создаем сообщение.
		Сообщение = Сессия.AccessMessage();
		
		Очередь.get(Сообщение,GetOptions);
		
		// Читаю данные из сообщения.
		Данные = Сообщение.readString(Сообщение.MessageLength);
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(Данные);
		
		// Прочитать «структурные части» элементов.
		Пока Чтение.Прочитать() Цикл
			
			// Проверить, какая часть элемента – текущая.
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ИмяУзла = Чтение.Имя;
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
				
				// В примере просто выводим текст в окно сообщений.
				
				Если ИмяУзла = "FileName" Тогда
					
					СтрокаТЗ = ТЗФайлов.Добавить();
					СтрокаТЗ.ИмяФайла = Чтение.Значение;
					
				ИначеЕсли ИмяУзла = "BinaryAttach" Тогда
					
					Попытка
						СтрокаТЗ.ДанныеФайла = Base64Значение(Чтение.Значение);
					Исключение
						// Дополнительная обработка исключения не требуется.
					КонецПопытки;
					
				Иначе
					СтруктураФайла.Вставить(ИмяУзла, Чтение.Значение);
				КонецЕсли;
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				// В примере просто выводим признак конца элемента.
			КонецЕсли;
			
		КонецЦикла;
		
		// Фиксация транзакции чтения очереди.
		МенеджерОчереди.Commit();
		
	Исключение
		
		// Отмена транзакции чтения очереди.
		МенеджерОчереди.Backout();
		Возврат Ложь;
		
	КонецПопытки;
	
	СтруктураФайла.Вставить("Файлы", ТЗФайлов);
	
	Если СтруктураФайла.Количество() > 1 Тогда
		ОбработкаСтруктуры(СтруктураФайла);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
  
&НаСервере
Функция ЕстьСостояниеИсполнения(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущиеСостоянияДокументов.Состояние
	|ИЗ
	|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
	|ГДЕ
	|	ТекущиеСостоянияДокументов.Документ = &Документ
	|	И ТекущиеСостоянияДокументов.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.НаИсполнении))";
		
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Функция ЕстьПроцессыИсполнения(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсполнениеИсполнители.Исполнитель
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ИсполнениеПредметы.Ссылка КАК ПроцессИсполнение
		|	ИЗ
		|		БизнесПроцесс.Исполнение.Предметы КАК ИсполнениеПредметы
		|	ГДЕ
		|		ИсполнениеПредметы.Предмет = &Предмет
		|		И ИсполнениеПредметы.Ссылка.Стартован
		|		И ИсполнениеПредметы.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	
		|	УПОРЯДОЧИТЬ ПО
		|		ИсполнениеПредметы.Ссылка.Дата) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение.Исполнители КАК ИсполнениеИсполнители
		|		ПО ВложенныйЗапрос.ПроцессИсполнение = ИсполнениеИсполнители.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсполнениеИсполнители.НомерСтроки";
	
	Запрос.УстановитьПараметр("Предмет", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции
 
&НаКлиенте
Функция ПреобразоватьВURL(ИмяФайла)
	
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/");
	
КонецФункции

#КонецОбласти
