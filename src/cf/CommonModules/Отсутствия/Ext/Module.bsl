////////////////////////////////////////////////////////////////////////////////
// Подсистема "Отсутствия".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет отсутствия сотрудников и ролей.
// Считается, что роль отсутствует, если 
// 
// Параметры:
//  КогоПроверить - Массив из СправочникСсылка.Пользователи,
//                  СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли - Кого проверить.
//  ПроверитьС - Дата.
//  ПроверитьПо - Дата.
// 
// Возвращаемое значение:
//  см. ОтсутствияКлиентСервер.НовыйРезультатПроверкиОтсутствий.
// 
Функция ПроверитьОтсутствия(КогоПроверить, Знач ПроверитьС, Знач ПроверитьПо) Экспорт
	
	РезультатПроверкиОтсутствий = ОтсутствияКлиентСервер.НовыйРезультатПроверкиОтсутствий();
	
	Если КогоПроверить.Количество() = 0 Или Не ПредупреждатьОбОтсутствии() Тогда
		Возврат РезультатПроверкиОтсутствий;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроверитьС) Тогда
		ПроверитьС = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроверитьПо) Тогда
		ПроверитьПо = ПроверитьС;
	КонецЕсли;
	
	ПроверяемыеРоли = Новый Массив;
	ПроверяемыеСотрудникиИПользователи = Новый Массив;
	Для Каждого ПроверяемыйЭлемент Из КогоПроверить Цикл
		
		Если ТипЗнч(ПроверяемыйЭлемент) = Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(ПроверяемыйЭлемент) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ПроверяемыеСотрудникиИПользователи.Добавить(ПроверяемыйЭлемент);
			
		ИначеЕсли ТипЗнч(ПроверяемыйЭлемент) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			ПроверяемыеРоли.Добавить(ПроверяемыйЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПроверяемыеСотрудникиИПользователи.Количество() > 0 Тогда
		
		ТаблицаОтсутствий = ПолучитьТаблицуОтсутствий(
			ПроверитьС,
			ПроверитьПо,
			КогоПроверить);
		Для Каждого СтрокаОтсутствия Из ТаблицаОтсутствий Цикл
			РезультатПроверкиОтсутствий.Отсутствия.Добавить(СтрокаОтсутствия.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроверяемыеРоли.Количество() > 0 Тогда
		
		Для Каждого ПроверяемаяРоль Из ПроверяемыеРоли Цикл
			
			ИсполнителиРоли = РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(ПроверяемаяРоль);
			
			ТаблицаОтсутствийРолей = ПолучитьТаблицуОтсутствий(
				ПроверитьС,
				ПроверитьПо,
				ИсполнителиРоли);
		
			ЕстьИсполнительРоли = Ложь;
			Для Каждого ИсполнительРоли Из ИсполнителиРоли Цикл
				
				Если ТаблицаОтсутствийРолей.Найти(ИсполнительРоли, "Сотрудник") = Неопределено Тогда
					ЕстьИсполнительРоли = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьИсполнительРоли Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаОтсутствия Из ТаблицаОтсутствийРолей Цикл
				
				РезультатПроверкиОтсутствий.Отсутствия.Добавить(СтрокаОтсутствия.Ссылка);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатПроверкиОтсутствий.Отсутствия =
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатПроверкиОтсутствий.Отсутствия);
	РезультатПроверкиОтсутствий.ЕстьОтсутствия =
		РезультатПроверкиОтсутствий.Отсутствия.Количество() > 0;
	
	Возврат РезультатПроверкиОтсутствий;
	
КонецФункции

// Возвращает общее число текущих отсутствий.
// 
// Возвращаемое значение:
//  Число - Общее число текущих отсутствий.
//
Функция ВсегоОтсутствий() Экспорт
	
	ОтборПричина = Неопределено;
	ОтборПодразделение = Неопределено;
	ОтборУдаленнаяРабота = Неопределено;
	УчитыватьИерархиюПодразделений = Неопределено;
	СохраненныеРеквизиты = ХранилищеСистемныхНастроек.Загрузить(
		Метаданные.Документы.Отсутствие.Формы.ФормаСписка.ПолноеИмя() + "/ТекущиеДанные");
	Если ТипЗнч(СохраненныеРеквизиты) = Тип("Соответствие") Тогда
		
		ОтборПричина = СохраненныеРеквизиты["ОтборПричина"];
		ОтборПодразделение = СохраненныеРеквизиты["ОтборПодразделение"];
		ОтборУдаленнаяРабота = СохраненныеРеквизиты["ОтборУдаленнаяРабота"];
		УчитыватьИерархиюПодразделений = СохраненныеРеквизиты["УчитыватьИерархиюПодразделений"];
		
	КонецЕсли;
	Если ОтборУдаленнаяРабота = Неопределено Тогда
		ОтборУдаленнаяРабота = "Все";
	КонецЕсли;
	Если УчитыватьИерархиюПодразделений = Неопределено Тогда
		УчитыватьИерархиюПодразделений = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Отсутствие.Ссылка КАК Ссылка,
		|	Отсутствие.Сотрудник КАК Сотрудник,
		|	Отсутствие.ДатаОкончания КАК ДатаОкончания,
		|	Отсутствие.БудуРазбиратьЗадачи КАК БудуРазбиратьЗадачи
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО Отсутствие.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	Отсутствие.ДатаНачала < &ТекущаяДата
		|	И Отсутствие.ДатаОкончания > &ТекущаяДата
		|	И Отсутствие.ВидОтсутствия = &ВидОтсутствия
		|	И Отсутствие.ВидОтсутствия В(&ВидыОтсутствия)
		|	И Отсутствие.ПометкаУдаления = ЛОЖЬ
		|	И (&БезОтбораПоПодразделению
		|			ИЛИ Сотрудники.Подразделение = &Подразделение)
		|	И (&БезОтбораПоИерархииПодразделений
		|			ИЛИ Сотрудники.Подразделение В ИЕРАРХИИ (&ПодразделениеВИерархии))
		|УПОРЯДОЧИТЬ ПО
		|	БудуРазбиратьЗадачи,
		|	ДатаОкончания");
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(ОтборПричина) Тогда
		Запрос.УстановитьПараметр("ВидОтсутствия", ОтборПричина);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Отсутствие.ВидОтсутствия = &ВидОтсутствия", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПодразделение)
		И УчитыватьИерархиюПодразделений Тогда
		Запрос.УстановитьПараметр("ПодразделениеВИерархии", ОтборПодразделение);
		Запрос.УстановитьПараметр("БезОтбораПоИерархииПодразделений", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПодразделениеВИерархии", Неопределено);
		Запрос.УстановитьПараметр("БезОтбораПоИерархииПодразделений", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПодразделение)
		И Не УчитыватьИерархиюПодразделений Тогда
		Запрос.УстановитьПараметр("Подразделение", ОтборПодразделение);
		Запрос.УстановитьПараметр("БезОтбораПоПодразделению", Ложь);
	Иначе
		Запрос.УстановитьПараметр("Подразделение", Неопределено);
		Запрос.УстановитьПараметр("БезОтбораПоПодразделению", Истина);
	КонецЕсли;
	
	Если ОтборУдаленнаяРабота = "Все" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Отсутствие.ВидОтсутствия В(&ВидыОтсутствия)", "")
	ИначеЕсли ОтборУдаленнаяРабота = "ТолькоРаботающиеУдаленно" Тогда
		Запрос.УстановитьПараметр(
			"ВидыОтсутствия",
			Справочники.ВидыОтсутствий.ВидыУдаленнойРаботы());
	ИначеЕсли ОтборУдаленнаяРабота = "ТолькоНеРаботающиеУдаленно" Тогда
		Запрос.УстановитьПараметр(
			"ВидыОтсутствия",
			Справочники.ВидыОтсутствий.ВидыОбычногоОтсутствия());
	КонецЕсли;
	
	ТаблицаОтсутствий = Запрос.Выполнить().Выгрузить();
	
	// Если есть отсутствие с "Буду разбирать задачи" и без "Буду разбирать задачи",
	// оставим только без "Буду разбирать задачи".
	Отсутствующие = Новый Массив;
	Для Каждого СтрокаОтсутствия Из ТаблицаОтсутствий Цикл
		
		Если Не СтрокаОтсутствия.БудуРазбиратьЗадачи Тогда
			Отсутствующие.Добавить(СтрокаОтсутствия.Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоЭлементов = ТаблицаОтсутствий.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		СтрокаОтсутствия = ТаблицаОтсутствий[КоличествоЭлементов - Индекс];
		Если Не СтрокаОтсутствия.БудуРазбиратьЗадачи
			Или Отсутствующие.Найти(СтрокаОтсутствия.Сотрудник) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаОтсутствий.Удалить(СтрокаОтсутствия);
		
	КонецЦикла;
	
	КоличествоСобытий = ТаблицаОтсутствий.Количество();
	
	Возврат КоличествоСобытий;
	
КонецФункции

// Возвращает ближайшие отсутствия.
// 
// Возвращаемое значение:
//  Массив - Ближайшие отсутствия.
//
Функция БлижайшиеОтсутствия() Экспорт
	
	ОтборПричина = Неопределено;
	ОтборПодразделение = Неопределено;
	ОтборУдаленнаяРабота = Неопределено;
	УчитыватьИерархиюПодразделений = Неопределено;
	СохраненныеРеквизиты = ХранилищеСистемныхНастроек.Загрузить(
		Метаданные.Документы.Отсутствие.Формы.ФормаСписка.ПолноеИмя() + "/ТекущиеДанные");
	Если ТипЗнч(СохраненныеРеквизиты) = Тип("Соответствие") Тогда
		
		ОтборПричина = СохраненныеРеквизиты["ОтборПричина"];
		ОтборПодразделение = СохраненныеРеквизиты["ОтборПодразделение"];
		ОтборУдаленнаяРабота = СохраненныеРеквизиты["ОтборУдаленнаяРабота"];
		УчитыватьИерархиюПодразделений = СохраненныеРеквизиты["УчитыватьИерархиюПодразделений"];
		
	КонецЕсли;
	Если ОтборУдаленнаяРабота = Неопределено Тогда
		ОтборУдаленнаяРабота = "Все";
	КонецЕсли;
	Если УчитыватьИерархиюПодразделений = Неопределено Тогда
		УчитыватьИерархиюПодразделений = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Отсутствие.Ссылка КАК Ссылка,
		|	Отсутствие.Сотрудник КАК Сотрудник,
		|	Отсутствие.ДатаОкончания КАК ДатаОкончания,
		|	Отсутствие.БудуРазбиратьЗадачи КАК БудуРазбиратьЗадачи
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО Отсутствие.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	Отсутствие.ДатаНачала < &ТекущаяДата
		|	И Отсутствие.ДатаОкончания > &ТекущаяДата
		|	И Отсутствие.ВидОтсутствия = &ВидОтсутствия
		|	И Отсутствие.ВидОтсутствия В(&ВидыОтсутствия)
		|	И Отсутствие.ПометкаУдаления = ЛОЖЬ
		|	И (&БезОтбораПоПодразделению
		|			ИЛИ Сотрудники.Подразделение = &Подразделение)
		|	И (&БезОтбораПоИерархииПодразделений
		|			ИЛИ Сотрудники.Подразделение В ИЕРАРХИИ (&ПодразделениеВИерархии))
		|УПОРЯДОЧИТЬ ПО
		|	БудуРазбиратьЗадачи,
		|	ДатаОкончания");
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(ОтборПричина) Тогда
		Запрос.УстановитьПараметр("ВидОтсутствия", ОтборПричина);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Отсутствие.ВидОтсутствия = &ВидОтсутствия", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПодразделение)
		И УчитыватьИерархиюПодразделений Тогда
		Запрос.УстановитьПараметр("ПодразделениеВИерархии", ОтборПодразделение);
		Запрос.УстановитьПараметр("БезОтбораПоИерархииПодразделений", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПодразделениеВИерархии", Неопределено);
		Запрос.УстановитьПараметр("БезОтбораПоИерархииПодразделений", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПодразделение)
		И Не УчитыватьИерархиюПодразделений Тогда
		Запрос.УстановитьПараметр("Подразделение", ОтборПодразделение);
		Запрос.УстановитьПараметр("БезОтбораПоПодразделению", Ложь);
	Иначе
		Запрос.УстановитьПараметр("Подразделение", Неопределено);
		Запрос.УстановитьПараметр("БезОтбораПоПодразделению", Истина);
	КонецЕсли;
	
	Если ОтборУдаленнаяРабота = "Все" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Отсутствие.ВидОтсутствия В(&ВидыОтсутствия)", "")
	ИначеЕсли ОтборУдаленнаяРабота = "ТолькоРаботающиеУдаленно" Тогда
		Запрос.УстановитьПараметр(
			"ВидыОтсутствия",
			Справочники.ВидыОтсутствий.ВидыУдаленнойРаботы());
	ИначеЕсли ОтборУдаленнаяРабота = "ТолькоНеРаботающиеУдаленно" Тогда
		Запрос.УстановитьПараметр(
			"ВидыОтсутствия",
			Справочники.ВидыОтсутствий.ВидыОбычногоОтсутствия());
	КонецЕсли;
	
	ТаблицаОтсутствий = Запрос.Выполнить().Выгрузить();
	
	// Если есть отсутствие с "Буду разбирать задачи" и без "Буду разбирать задачи",
	// оставим только без "Буду разбирать задачи".
	Отсутствующие = Новый Массив;
	Для Каждого СтрокаОтсутствия Из ТаблицаОтсутствий Цикл
		
		Если Не СтрокаОтсутствия.БудуРазбиратьЗадачи Тогда
			Отсутствующие.Добавить(СтрокаОтсутствия.Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоЭлементов = ТаблицаОтсутствий.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		СтрокаОтсутствия = ТаблицаОтсутствий[КоличествоЭлементов - Индекс];
		Если Не СтрокаОтсутствия.БудуРазбиратьЗадачи
			Или Отсутствующие.Найти(СтрокаОтсутствия.Сотрудник) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаОтсутствий.Удалить(СтрокаОтсутствия);
		
	КонецЦикла;
	
	КоличествоСтрок = 0;
	МаксимальноеКоличествоСтрок = 5;
	БлижайшиеОтсутствия = Новый Массив;
	Для Каждого СтрокаОтсутствия Из ТаблицаОтсутствий Цикл
		
		ДанныеСтрокиСписка = РаботаСВиджетами.ДанныеСтрокиСписка();
		Если СтрокаОтсутствия.БудуРазбиратьЗадачи Тогда
			ДанныеСтрокиСписка.ИндексКартинки = РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета(
				Перечисления.ЦветаРабочегоКалендаря.Желтый);
		Иначе
			ДанныеСтрокиСписка.ИндексКартинки = РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета(
				Перечисления.ЦветаРабочегоКалендаря.Красный);
		КонецЕсли;
		ДанныеСтрокиСписка.Значение = Строка(СтрокаОтсутствия.Сотрудник);
		ДанныеСтрокиСписка.Ссылка = ПолучитьНавигационнуюСсылку(СтрокаОтсутствия.Ссылка);
		ДанныеСтрокиСписка.Комментарий = РаботаСВиджетами.ПредставлениеДатыСписка(
			СтрокаОтсутствия.ДатаОкончания);
		
		БлижайшиеОтсутствия.Добавить(ДанныеСтрокиСписка);
		
		КоличествоСтрок = КоличествоСтрок + 1;
		Если КоличествоСтрок = МаксимальноеКоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БлижайшиеОтсутствия;
	
КонецФункции

// Возвращает выборку, содержащую информацию о замещениях, созданных на основании отсутствия.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие, ДокументОбъект.Отсутствие - отсутствие.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка с информацией о замещениях.
//
Функция ВыборкаЗамещающихПоОтсутствию(Отсутствие)  Экспорт
	
	ОтсутствиеСсылка = Отсутствие;
	ОтсутствиеПометкаУдаления = Неопределено;
	
	Если ТипЗнч(Отсутствие) = Тип("ДокументОбъект.Отсутствие") Тогда
		ОтсутствиеСсылка = Отсутствие.Ссылка;
		ОтсутствиеПометкаУдаления = Отсутствие.ПометкаУдаления;
	Иначе
		ОтсутствиеПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Отсутствие, "ПометкаУдаления");
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ссылка,
		|	Замещающий,
		|	Комментарий
		|ИЗ
		|	Справочник.ЗамещающиеИПомощники
		|ГДЕ
		|	Основание = &Отсутствие
		|	И НЕ ПометкаУдаления");
	Если ОтсутствиеПометкаУдаления Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ ПометкаУдаления", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("Отсутствие", ОтсутствиеСсылка);
	ВыборкаПоЗамещающим = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаПоЗамещающим;
	
КонецФункции

// Определяет, какие задачи приходится на время отсутствия сотрудника. 
// 
// Параметры:
//  ДатаНачала - Дата.
//  ДатаОкончания - Дата.
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные действий задач.
//                    См. РегистрыСведений.РеестрЗадачПоИсполнителям.ДанныеДействийЗадач().
//  
Функция ЗадачиНаВремяОтсутствия(ДатаНачала, ДатаОкончания, Пользователь) Экспорт
	
	ТолькоПерваяПорция = Ложь;
	ЗадачиМнеВсе = РаботаСЗадачами.ЗадачиМнеВсе(Пользователь, ТолькоПерваяПорция);
	ВсеЗадачиСотрудника = ЗадачиМнеВсе.ВыгрузитьКолонку("ДействиеЗадачи");
	ЗадачиНаВремяОтсутствия = РаботаСЗадачами.ДанныеДействийЗадач(ВсеЗадачиСотрудника);
	
	КоличествоЭлементов = ЗадачиНаВремяОтсутствия.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		СтрокаДанныхДействия = ЗадачиНаВремяОтсутствия[КоличествоЭлементов - Индекс];
		
		Если СтрокаДанныхДействия.Срок >= ДатаНачала
			И СтрокаДанныхДействия.Срок <= ДатаОкончания Тогда
			Продолжить;
		КонецЕсли;
		
		ЗадачиНаВремяОтсутствия.Удалить(СтрокаДанныхДействия);
		
	КонецЦикла;
	
	Возврат ЗадачиНаВремяОтсутствия;
	
КонецФункции

// Формирует текстовое представление периода отсутствия, приведенное к местному часовому поясу.
//
// Параметры:
//  ДатаНачала - Дата - Дата начала отсутствия.
//  ДатаОкончания - Дата - Дата окончания отсутствия.
//  ВесьДень - Булево - Признак того что отсутствие на весь день.
//
// Возвращаемое значение:
//  Строка - Текстовое представление периода отсутствия, приведенное к местному часовому поясу.
//
Функция МестныйПериодСтрокой(ДатаНачала, ДатаОкончания, ВесьДень) Экспорт
	
	МестнаяДатаНачала = ?(ВесьДень,
		ДатаНачала,
		РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ДатаНачала));
	МестнаяДатаОкончания = ?(ВесьДень,
		ДатаОкончания,
		РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ДатаОкончания));
	ПредставлениеМестногоЧасовогоПояса = ?(ВесьДень,
		"",
		РаботаСЧасовымиПоясами.ПредставлениеМестногоЧасовогоПояса());
	
	Возврат ОтсутствияКлиентСервер.ПериодСтрокой(
		МестнаяДатаНачала,
		МестнаяДатаОкончания,
		ВесьДень,
		ПредставлениеМестногоЧасовогоПояса);
	
КонецФункции

// Возвращает необходимость проверки отсутствия при различных действиях.
//
// Возвращаемое значение:
//  Булево - Признак необходимость проверки отсутствия.
//
Функция ПредупреждатьОбОтсутствии() Экспорт
	
	ФункциональнаяОпция = ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия");
	Если Не ФункциональнаяОпция Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОтсутствий",
		"ПредупреждатьОбОтсутствии",
		Истина);
	
КонецФункции

// Возвращает описания текущего отсутствия сотрудника.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Пользователи - Сотрудник, отсутствие которого необходимо получить.
//
// Возвращаемое значение:
//  Структура, Неопределено       - Описание текущего отсутствия сотрудника.
//   * Ссылка              - ДокументСсылка.Отсутствия - Текущее отсутствие.
//   * Представление       - Строка                    - Текстовое представление отсутствия.
//   * БудуРазбиратьЗадачи - Булево                    - Признак "Буду разбирать задачи".
//
Функция ПолучитьОписаниеТекущегоОтсутствияСотрудника(Сотрудник) Экспорт
	
	Возврат ПолучитьОписанияТекущихОтсутствийСотрудников(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник))[Сотрудник];
	
КонецФункции

// Возвращает описания текущих отсутствий сотрудников.
//
// Параметры:
//  Сотрудники - Массив из СправочникСсылка.Пользователи - Сотрудники, отсутствия которых необходимо получить.
//
// Возвращаемое значение:
//  Соответствие - Описания текущих отсутствий сотрудников.
//   * Ключ     - СправочникСсылка.Пользователи - Сотрудник.
//   * Значение - Структура, Неопределено       - Описание текущего отсутствия сотрудника.
//      ** Ссылка              - ДокументСсылка.Отсутствия - Текущее отсутствие.
//      ** Представление       - Строка                    - Текстовое представление отсутствия.
//      ** БудуРазбиратьЗадачи - Булево                    - Признак "Буду разбирать задачи".
//
Функция ПолучитьОписанияТекущихОтсутствийСотрудников(Сотрудники) Экспорт
	
	ОписанияОтсутствий = Новый Соответствие;
	Если Сотрудники.Количество() = 0 Тогда
		Возврат ОписанияОтсутствий;
	КонецЕсли;
	
	ТекущиеОтсутствияСотрудников = ПолучитьТекущиеОтсутствияСотрудников(Сотрудники);
	Для Каждого Сотрудник Из Сотрудники Цикл
		
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеОтсутствия = Неопределено;
		
		ТекущееОтсутствиеСотрудника = ТекущиеОтсутствияСотрудников[Сотрудник];
		Если ТекущееОтсутствиеСотрудника <> Неопределено Тогда
			ОписаниеОтсутствия = Новый Структура;
			ОписаниеОтсутствия.Вставить("Ссылка", ТекущееОтсутствиеСотрудника.Ссылка);
			ОписаниеОтсутствия.Вставить("Представление",
				ПолучитьПредставлениеТекстовое(
					ТекущееОтсутствиеСотрудника,
					Ложь,
					Истина,
					Ложь,
					Ложь,
					3,
					Ложь,
					Истина));
			ОписаниеОтсутствия.Вставить("БудуРазбиратьЗадачи", ТекущееОтсутствиеСотрудника.БудуРазбиратьЗадачи);
		КонецЕсли;
		
		ОписанияОтсутствий.Вставить(Сотрудник, ОписаниеОтсутствия);
		
	КонецЦикла;
	
	Возврат ОписанияОтсутствий;
	
КонецФункции

// Возвращает описание отсутствия для текста письма.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - Отсутствие.
//
// Возвращаемое значение:
//  Строка - Текстовое представление отсутствия пользователя.
//
Функция ПолучитьПредставлениеОтсутствияДляТекстаПисьма(Отсутствие) Экспорт
	
	Возврат ПолучитьПредставлениеТекстовое(Отсутствие, Истина, Ложь, Истина, Истина, 0, Ложь, Ложь);
	
КонецФункции

// Возвращает описание отсутствия для темы письма.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - Отсутствие.
//
//  Строка - Текстовое представление отсутствия пользователя.
//
Функция ПолучитьПредставлениеОтсутствияДляТемыПисьма(Отсутствие) Экспорт
	
	Возврат ПолучитьПредставлениеТекстовое(Отсутствие, Ложь, Ложь, Ложь, Ложь, 0, Истина, Истина);
	
КонецФункции

// Заполняет реквизиты формы по отсутствию и устанавливает видимость элементов.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники - Сотрудник, к которому относятся данные.
//  Отсутствие - ДокументСсылка.Отсутствие - Текущее отсутствие сотрудника.
//  ОтсутствиеКартинка - Строка - Строка, в которую будет помещена ссылка на картинку.
//  ОтсутствиеОписание - Строка - Текстовое описание текущего отсутствия сотрудника.
//  ЭлементГруппаОтсутствие - ГруппаФормы - Группа формы, в который отображается отсутствие.
//  ЭлементОтсутствиеКартинка - ПолеФормы - Поле формы, в котором отображается картинка отсутствия.
//
Процедура ОбновитьДанныеОтсутствияФормыСотрудника(Сотрудник, Отсутствие,
	ОтсутствиеОписание, ЭлементГруппаОтсутствие, ЭлементДекорацияОтсутствует = Неопределено) Экспорт
	
	РеквизитыОтсутствия = ПолучитьТекущееОтсутствиеСотрудника(Сотрудник);
	
	СотрудникОтсутствует = (РеквизитыОтсутствия <> Неопределено);
	ЭлементГруппаОтсутствие.Видимость = СотрудникОтсутствует;
	Если ЭлементДекорацияОтсутствует <> Неопределено Тогда
		ЭлементДекорацияОтсутствует.Видимость = Не СотрудникОтсутствует;
	КонецЕсли;
	Если Не СотрудникОтсутствует Тогда
		Возврат;
	КонецЕсли;
	
	Отсутствие = РеквизитыОтсутствия.Ссылка;
	ОтсутствиеОписание = ПолучитьПредставлениеТекстовое(РеквизитыОтсутствия, Ложь, Истина, Истина, Ложь, 1, Ложь, Ложь);
	
КонецПроцедуры

// Возвращает персональную настройку отсутствий текущего пользователя по ключу.
//
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "ВопросСоздатьПисьмоБольшеНеСпрашивать" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПисьмоБольшеНеСпрашивать",
			Ложь);
		
	ИначеЕсли Настройка = "ВопросСоздатьПисьмоВариантОтвета" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПисьмоВариантОтвета",
			Истина);
		
	ИначеЕсли Настройка = "ПредупреждатьОбОтсутствии" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"ПредупреждатьОбОтсутствии",
			Истина);
		
	ИначеЕсли Настройка = "ВопросСоздатьПравилоБольшеНеСпрашивать" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПравилоБольшеНеСпрашивать",
			Ложь);
		
	ИначеЕсли Настройка = "ВопросСоздатьПравилоВариантОтвета" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПравилоВариантОтвета",
			Истина);
		
	ИначеЕсли Настройка = "БудуРазбиратьЗадачи" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОтсутствий",
			"БудуРазбиратьЗадачи",
			Ложь);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка отсутствий: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку отсутствий текущего пользователя.
//
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ВопросСоздатьПисьмоБольшеНеСпрашивать" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПисьмоБольшеНеСпрашивать",
			Значение);
		
	ИначеЕсли Настройка = "ВопросСоздатьПисьмоВариантОтвета" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПисьмоВариантОтвета",
			Значение);
		
	ИначеЕсли Настройка = "ПредупреждатьОбОтсутствии" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"ПредупреждатьОбОтсутствии",
			Значение);
		
	ИначеЕсли Настройка = "ВопросСоздатьПравилоБольшеНеСпрашивать" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПравилоБольшеНеСпрашивать",
			Значение);
		
	ИначеЕсли Настройка = "ВопросСоздатьПравилоВариантОтвета" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"ВопросСоздатьПравилоВариантОтвета",
			Значение);
		
	ИначеЕсли Настройка = "БудуРазбиратьЗадачи" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки отсутствий: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОтсутствий",
			"БудуРазбиратьЗадачи",
			Значение);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка отсутствий: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу дел сотрудника.
//
// Параметры:
//  ДатаНачала - Дата - С какой даты следует получать дела.
//  ДатаОкончания - Дата - По какую дату следует получать дела.
//  Сотрудник - СправочникСсылка.Сотрудники,
//              СправочникСсылка.Пользователи - Сотрудник, проектные задачи которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица дел сотрудника.
//
Функция ПолучитьДелаСотрудника(ДатаНачала, ДатаОкончания, Сотрудник) Экспорт
	
	Дела = Новый ТаблицаЗначений;
	Дела.Колонки.Добавить("Ссылка");
	Дела.Колонки.Добавить("Описание");
	Дела.Колонки.Добавить("Дата");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь") Тогда
		СобытияСотрудника = РаботаСРабочимКалендаремСервер.ПолучитьСобытияФизЛицаСотрудника(
			ДатаНачала, ДатаОкончания,
			Сотрудники.ФизЛицоСотрудника(Сотрудник));
		
		Для Каждого Событие Из СобытияСотрудника Цикл
			Дело = Дела.Добавить();
			Дело.Ссылка = Событие.Ссылка;
			Дело.Дата = Событие.ДатаНачала;
			Дело.Описание = СформироватьОписаниеДела(
				Событие.Ссылка,
				Событие.Наименование,
				Событие.ДатаНачала);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда
		МероприятияПользователя = УправлениеМероприятиями.ПолучитьМероприятияПользователя(
			ДатаНачала, ДатаОкончания, Сотрудник);
		Для Каждого Мероприятие Из МероприятияПользователя Цикл
			Дело = Дела.Добавить();
			Дело.Ссылка = Мероприятие.Ссылка;
			Дело.Дата = Мероприятие.ДатаНачала;
			Дело.Описание = СформироватьОписаниеДела(
				Мероприятие.Ссылка,
				Мероприятие.Представление,
				Мероприятие.ДатаНачала);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		ПроектныеЗадачиПользователя = РаботаСПроектами.ПолучитьПроектныеЗадачиПользователя(
			ДатаНачала, ДатаОкончания, Сотрудник);
		Для Каждого ПроектнаяЗадача Из ПроектныеЗадачиПользователя Цикл
			Дело = Дела.Добавить();
			Дело.Ссылка = ПроектнаяЗадача.Ссылка;
			Дело.Дата = ПроектнаяЗадача.ТекущийПланНачало;
			Дело.Описание = СформироватьОписаниеДела(
				ПроектнаяЗадача.Ссылка,
				ПроектнаяЗадача.Представление,
				ПроектнаяЗадача.ТекущийПланНачало);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		ЗадачиНаВремяОтсутствия = ЗадачиНаВремяОтсутствия(
			ДатаНачала,
			ДатаОкончания, 
			Сотрудники.ПользовательСотрудника(Сотрудник));
		Для Каждого СтрокаДанныхЗадачи Из ЗадачиНаВремяОтсутствия Цикл
			Дело = Дела.Добавить();
			Дело.Ссылка = СтрокаДанныхЗадачи.ДействиеЗадачи;
			Дело.Дата = СтрокаДанныхЗадачи.Срок;
			Дело.Описание = СформироватьОписаниеДела(
				СтрокаДанныхЗадачи.ДействиеЗадачи,
				СтрокаДанныхЗадачи.Заголовок,
				СтрокаДанныхЗадачи.Срок);
		КонецЦикла;
	КонецЕсли;
	
	Дела.Сортировать("Дата");
	
	Возврат Дела;
	
КонецФункции

// Формирует таблицу пересекающихся отсутствий.
//
Функция ПолучитьПересекающиесяОтсутствия(Отсутствие, Сотрудник, ДатаНачала, ДатаОкончания, БудуРазбиратьЗадачи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отсутствие.Ссылка
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие
		|ГДЕ
		|	Отсутствие.Сотрудник = &Сотрудник
		|	И Отсутствие.ДатаНачала < &ДатаОкончанияОтбора
		|	И Отсутствие.ДатаОкончания > &ДатаНачалаОтбора
		|	И Отсутствие.БудуРазбиратьЗадачи = &БудуРазбиратьЗадачи
		|	И Отсутствие.Ссылка <> &Отсутствие
		|	И Отсутствие.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Отсутствие", Отсутствие);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачалаОтбора", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончанияОтбора", ДатаОкончания);
	Запрос.УстановитьПараметр("БудуРазбиратьЗадачи", БудуРазбиратьЗадачи);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает отсутствия пользователей на определенный момент времени.
//
// Параметры:
//  ДатаНачала - Дата - С какой даты следует получить отсутствия.
//  ДатаОкончания - Дата - По какую дату следует получить отсутствия.
//  МассивПользователей - Массив - Пользователи, отсутствия которых необходимо получить.
//  Настройки - Структура - Настройки проверки отсутствий.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица отсутствий пользователей.
//
Функция ПолучитьТаблицуОтсутствий(
	ДатаНачала,
	ДатаОкончания,
	МассивПользователей,
	Настройки = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = ОтсутствияКлиентСервер.НастройкиПроверкиОтсутствий();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Отсутствие.Ссылка КАК Ссылка,
		|	Отсутствие.Сотрудник КАК Сотрудник,
		|	Отсутствие.ВидОтсутствия КАК ВидОтсутствия,
		|	Отсутствие.ДатаНачала КАК ДатаНачала,
		|	Отсутствие.ДатаОкончания КАК ДатаОкончания,
		|	Отсутствие.ВесьДень КАК ВесьДень,
		|	Отсутствие.Дата КАК Дата,
		|	Отсутствие.БудуРазбиратьЗадачи КАК БудуРазбиратьЗадачи
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтсутствий КАК ВидыОтсутствий
		|		ПО Отсутствие.ВидОтсутствия = ВидыОтсутствий.Ссылка
		|ГДЕ
		|	Отсутствие.Сотрудник В(&МассивСотрудников)
		|	И Отсутствие.ДатаНачала < &ДатаОкончания
		|	И Отсутствие.ДатаОкончания > &ДатаНачала
		|	И Отсутствие.ПометкаУдаления = ЛОЖЬ
		|	И Отсутствие.БудуРазбиратьЗадачи = ЛОЖЬ
		|	И ЕСТЬNULL(ВидыОтсутствий.ВФондеРабочегоВремени, ЛОЖЬ) = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отсутствие.Ссылка,
		|	Отсутствие.Сотрудник,
		|	Отсутствие.ВидОтсутствия,
		|	Отсутствие.ДатаНачала,
		|	Отсутствие.ДатаОкончания,
		|	Отсутствие.ВесьДень,
		|	Отсутствие.Дата,
		|	Отсутствие.БудуРазбиратьЗадачи
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтсутствий КАК ВидыОтсутствий
		|		ПО Отсутствие.ВидОтсутствия = ВидыОтсутствий.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО Отсутствие.Сотрудник = СотрудникиПользователей.Сотрудник
		|ГДЕ
		|	СотрудникиПользователей.Пользователь В(&МассивСотрудников)
		|	И Отсутствие.ДатаНачала < &ДатаОкончания
		|	И Отсутствие.ДатаОкончания > &ДатаНачала
		|	И Отсутствие.ПометкаУдаления = ЛОЖЬ
		|	И Отсутствие.БудуРазбиратьЗадачи = ЛОЖЬ
		|	И ЕСТЬNULL(ВидыОтсутствий.ВФондеРабочегоВремени, ЛОЖЬ) = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивПользователей);
	Если Не Настройки.УчитыватьФлагБудуРазбиратьЗадачи Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
			|	И Отсутствие.БудуРазбиратьЗадачи = ЛОЖЬ", "");
	КонецЕсли;
	Если Не Настройки.УчитыватьТолькоВидыОтсутствийНеВФонде Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
			|	И ЕСТЬNULL(ВидыОтсутствий.ВФондеРабочегоВремени, ЛОЖЬ) = ЛОЖЬ", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает отсутствия исполнителей на определенный момент времени.
//
// Параметры:
//  ДатаНачала - Дата - С какой даты следует получить отсутствия.
//  ДатаОкончания - Дата - По какую дату следует получить отсутствия.
//  Исполнители - Массив - Исполнители, отсутствия которых необходимо получить.
//  Настройки - Структура - Настройки проверки отсутствий.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица отсутствий исполнителей.
//
Функция ПолучитьТаблицуОтсутствийИсполнителей(
	ДатаНачала,
	ДатаОкончания,
	Исполнители,
	Настройки = Неопределено) Экспорт
	
	// Отсутствия пользователей и адресатов без индивидуального срока исполнения.
	МассивПользователей = Новый Массив;
	МассивПользователейСИндивидуальнымСроком = Новый Массив;
	Для Каждого ДанныеИсполнителя Из Исполнители Цикл
		
		ТипИсполнителя = ТипЗнч(ДанныеИсполнителя.Исполнитель);
		Если ТипИсполнителя = Тип("СправочникСсылка.Пользователи")
			Или ТипИсполнителя = Тип("СправочникСсылка.Сотрудники") Тогда
			
			Пользователь = ДанныеИсполнителя.Исполнитель;
			
		ИначеЕсли ТипИсполнителя = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
			
			ДанныеАдресата =
				ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(ДанныеИсполнителя.Исполнитель);
			Если ТипЗнч(ДанныеАдресата.Контакт) <> Тип("СправочникСсылка.Пользователи")
				И ТипЗнч(ДанныеАдресата.Контакт) <> Тип("СправочникСсылка.Сотрудники") Тогда
				Продолжить;
			КонецЕсли;
			
			Пользователь = ДанныеАдресата.Контакт;
			
		Иначе // Роли, контрагенты, личные адресаты, контактные лица
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеИсполнителя.СрокИсполнения) Тогда
			ДанныеПользователя =
				Новый Структура("Пользователь, СрокИсполнения", Пользователь, ДанныеИсполнителя.СрокИсполнения);
			МассивПользователейСИндивидуальнымСроком.Добавить(ДанныеПользователя);
		Иначе
			МассивПользователей.Добавить(Пользователь);
		КонецЕсли;
		
	КонецЦикла;
	ТаблицаОтсутствийИсполнителей = ПолучитьТаблицуОтсутствий(
		ДатаНачала,
		ДатаОкончания,
		МассивПользователей,
		Настройки);
	
	// Отсутствия пользователей и адресатов с индивидуальным сроком исполнения.
	Для Каждого ДанныеПользователя Из МассивПользователейСИндивидуальнымСроком Цикл
		
		МассивПользователей.Очистить();
		МассивПользователей.Добавить(ДанныеПользователя.Пользователь);
		ТипИсполнителя = ТипЗнч(ДанныеПользователя.Пользователь);
		
		ТаблицаОтсутствийИсполнителейСИндивидуальнымСроком =
			ПолучитьТаблицуОтсутствий(ДатаНачала, ДанныеПользователя.СрокИсполнения, МассивПользователей);
		Для Каждого СтрокаОтсутствие Из ТаблицаОтсутствийИсполнителейСИндивидуальнымСроком Цикл
			Если ТаблицаОтсутствийИсполнителей.Найти(СтрокаОтсутствие.Ссылка, "Ссылка") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаОтсутствийИсполнителей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтсутствие);
		КонецЦикла;
		
	КонецЦикла;
	
	// Отсутствия исполнителей ролей
	Для Каждого ДанныеИсполнителя Из Исполнители Цикл
		
		Если ТипЗнч(ДанныеИсполнителя.Исполнитель) <> Тип("СправочникСсылка.ПолныеРоли") Тогда
			Продолжить;
		КонецЕсли;
		
		ИсполнителиРоли = РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(ДанныеИсполнителя.Исполнитель);
		ИсполнителиРоли = Сотрудники.ЛюбыеПользователиСотрудников(ИсполнителиРоли);
		
		Если ЗначениеЗаполнено(ДанныеИсполнителя.СрокИсполнения) Тогда
			ТекущаяДатаОкончания = ДанныеИсполнителя.СрокИсполнения;
		Иначе
			ТекущаяДатаОкончания = ДатаОкончания;
		КонецЕсли;
		ТаблицаОтсутствийРолей =
			ПолучитьТаблицуОтсутствий(ДатаНачала, ТекущаяДатаОкончания, ИсполнителиРоли);
	
		ЕстьИсполнительРоли = Ложь;
		Для Каждого ИсполнительРоли Из ИсполнителиРоли Цикл
			
			Если ТаблицаОтсутствийРолей.Найти(ИсполнительРоли, "Сотрудник") = Неопределено Тогда
				ЕстьИсполнительРоли = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		Если ЕстьИсполнительРоли Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаОтсутствие Из ТаблицаОтсутствийРолей Цикл
			
			Если ТаблицаОтсутствийИсполнителей.Найти(СтрокаОтсутствие.Ссылка, "Ссылка") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаОтсутствийИсполнителей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтсутствие);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаОтсутствийИсполнителей;
	
КонецФункции

// Возвращает ближайшее отсутствие на дату.
//
Функция ПолучитьБлижайшееОтсутствие(Дата, ПоказыватьУдаленные) Экспорт
	
	ДатаОтбора = НачалоДня(Дата);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Отсутствие.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие
		|ГДЕ
		|	(Отсутствие.ДатаНачала >= &ДатаОтбора
		|		ИЛИ Отсутствие.ДатаОкончания >= &ДатаОтбора)
		|	И (&ПоказыватьУдаленные 
		|		ИЛИ Отсутствие.ПометкаУдаления = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаОтбора", ДатаОтбора);
	Запрос.УстановитьПараметр("ПоказыватьУдаленные", ПоказыватьУдаленные);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Отсутствие.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.Отсутствие КАК Отсутствие
			|ГДЕ
			|	Отсутствие.ДатаНачала < &ДатаОтбора
			|	И Отсутствие.ДатаОкончания < &ДатаОтбора
			|	И (&ПоказыватьУдаленные
			|			ИЛИ Отсутствие.ПометкаУдаления = ЛОЖЬ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Отсутствие.ДатаНачала УБЫВ";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

// Возвращает получателей письма об отсутствии.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - Отсутствие.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Получатели письма об отсутствии.
//
Функция ПолучателиПисьмаОбОтсутствии(Отсутствие) Экспорт
	
	Получатели = Новый Массив;
	
	РеквизитыОтсутствия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отсутствие, "Автор, Сотрудник");
	
	// Автор отсутствия
	ВключитьВПолучатели(Получатели, РеквизитыОтсутствия.Автор);
	
	// Отсутствующий сотрудник
	ВключитьВПолучатели(Получатели, РеквизитыОтсутствия.Сотрудник);
	
	// Руководитель отсутствующего сотрудника
	Руководитель = Сотрудники.БлижайшийРуководитель(РеквизитыОтсутствия.Сотрудник);
	ВключитьВПолучатели(Получатели, Руководитель);
	
	// Сотрудники того же подразделения
	Подразделение = РаботаСПользователями.ПолучитьПодразделение(РеквизитыОтсутствия.Сотрудник);
	СотрудникиПодразделения = Сотрудники.СотрудникиПодразделения(Подразделение);
	Для Каждого СотрудникПодразделения Из СотрудникиПодразделения Цикл
		ВключитьВПолучатели(Получатели, СотрудникПодразделения);
	КонецЦикла;
	
	// Кто замещает на время отсутствия
	ВыборкаЗамещающих = ВыборкаЗамещающихПоОтсутствию(Отсутствие);
	Пока ВыборкаЗамещающих.Следующий() Цикл
		ВключитьВПолучатели(Получатели, ВыборкаЗамещающих.Замещающий);
	КонецЦикла;
	
	Возврат Получатели;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры - Структура - Структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ПредупреждатьОбОтсутствии", ПредупреждатьОбОтсутствии());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует текстовое представление отсутствия в соответствии с переданными параметрами.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - Отсутствие.
//  ВключатьОписаниеСотрудника - Булево - Включить сотрудника в описание.
//  ДатаДо - Булево - Включать дату в формате "до даты".
//  ВключатьЗаместителей - Булево - Включать заместителей в описание.
//  ВключатьКомментарий - Булево - Включать комментарий в описание.
//  МаксимальноеКоличествоЗаместителей - Число - Количество заместителей, включаемых в описание.
//  КраткоеПредставление - Булево - Использовать краткое представление отсутствия.
//  КраткоеПредставлениеПричины - Булево - Использовать краткое представление причины отсутствия.
//
// Возвращаемое значение:
//  Строка - Текстовое представление отсутствия пользователя.
//
Функция ПолучитьПредставлениеТекстовое(Отсутствие, ВключатьОписаниеСотрудника, ДатаДо,
	ВключатьЗаместителей, ВключатьКомментарий, МаксимальноеКоличествоЗаместителей,
	КраткоеПредставление, КраткоеПредставлениеПричины)
	
	ОписаниеОтсутствия = "";
	
	// Дата и сотрудник
	Если КраткоеПредставление Тогда
		ТекстПодстановки = "%1 %2";
		ПодписьОтсутствие = НСтр("ru = 'Отсутствие'");
	Иначе
		Если КраткоеПредставлениеПричины Тогда
			ТекстПодстановки = "%1 %2";
		Иначе
			ТекстПодстановки = "%1 %2.";
		КонецЕсли;
		ПодписьОтсутствие = НСтр("ru = 'Отсутствует'");
	КонецЕсли;
	ОписаниеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстПодстановки,
		ПодписьОтсутствие,
		ОтсутствияКлиентСервер.СформироватьДатыОтсутствия(
			Отсутствие.ДатаНачала, Отсутствие.ДатаОкончания,
			Отсутствие.ВесьДень, Истина, ДатаДо, Ложь));
	Если ВключатьОписаниеСотрудника Тогда
		ОписаниеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 %2",
			Отсутствие.Сотрудник,
			НРег(ОписаниеДаты));
	КонецЕсли;
	ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеОтсутствия, " ", ОписаниеДаты);
	
	// Причина
	Если КраткоеПредставлениеПричины Тогда
		ОписаниеВидаОтсутствия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(%1)",
			Отсутствие.ВидОтсутствия);
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеОтсутствия, " ", ОписаниеВидаОтсутствия);
	Иначе
		ОписаниеВидаОтсутствия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 - %2.",
			НСтр("ru = 'Причина'"),
			НРег(Отсутствие.ВидОтсутствия));
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеОтсутствия, " ", ОписаниеВидаОтсутствия);
	КонецЕсли;
	
	// Заместители
	Если ВключатьЗаместителей Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеОтсутствия, Символы.ПС,
			ПолучитьПредставлениеЗаместителей(Отсутствие.Ссылка, МаксимальноеКоличествоЗаместителей));
	КонецЕсли;
	
	// Комментарий
	Если ВключатьКомментарий Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеОтсутствия, Символы.ПС, Отсутствие.Комментарий);
	КонецЕсли;
	
	Возврат ОписаниеОтсутствия;
	
КонецФункции

// Формирует описание дела.
//
Функция СформироватьОписаниеДела(Ссылка, Представление, Дата)
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		ОписаниеТипа = НСтр("ru = 'Задача'");
	Иначе
		ОписаниеТипа = ТипЗнч(Ссылка);
	КонецЕсли;
	
	ОписаниеДела = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1, %2 (%3)", Формат(Дата, "ДЛФ=D"), Представление, ОписаниеТипа);
	
	Возврат ОписаниеДела;
	
КонецФункции

// Возвращает строковое представление заместителей.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - отсутствие.
//
// Возвращаемое значение:
//  Строка - Строковое представление заместителей.
//
Функция ПолучитьПредставлениеЗаместителей(Отсутствие, МаксимальноеКоличество)
	
	ВыборкаЗамещающих = ВыборкаЗамещающихПоОтсутствию(Отсутствие);
	КоличествоЗаместителей = ВыборкаЗамещающих.Количество();
	Если КоличествоЗаместителей = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если МаксимальноеКоличество = 0 Или МаксимальноеКоличество > КоличествоЗаместителей Тогда
		КоличествоОтображаемыхЗаместителей = КоличествоЗаместителей;
	Иначе
		КоличествоОтображаемыхЗаместителей = МаксимальноеКоличество
	КонецЕсли;
	
	ПодписьЗаместителей = "";
	Для Сч = 1 По КоличествоОтображаемыхЗаместителей Цикл
		ВыборкаЗамещающих.Следующий();
		Если ЗначениеЗаполнено(ВыборкаЗамещающих.Комментарий) Тогда
			ПредставлениеЗаместителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 (%2)",
				ВыборкаЗамещающих.Замещающий,
				ВыборкаЗамещающих.Комментарий);
		Иначе
			ПредставлениеЗаместителя = Строка(ВыборкаЗамещающих.Замещающий);
		КонецЕсли;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ПодписьЗаместителей, ", ", ПредставлениеЗаместителя);
	КонецЦикла;
	
	Если КоличествоЗаместителей > КоличествоОтображаемыхЗаместителей Тогда
		ПодписьЗаместителей = ПодписьЗаместителей + " " + НСтр("ru = 'и другие'");
	КонецЕсли;
	
	Если КоличествоЗаместителей = 1 Тогда
		ПодписьЗаместителей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 - %2.",
			НСтр("ru = 'Заместитель'"),
			ПодписьЗаместителей);
	Иначе
		ПодписьЗаместителей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1: %2.",
			НСтр("ru = 'Заместители'"),
			ПодписьЗаместителей);
	КонецЕсли;
	
	Возврат ПодписьЗаместителей;
	
КонецФункции

// Возвращает ссылку на текущее отсутствие сотрудника.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Пользователи - Сотрудник, отсутствие которого необходимо получить.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - Текущее отсутствие сотрудника.
//
Функция ПолучитьТекущееОтсутствиеСотрудника(Сотрудник)
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьТекущиеОтсутствияСотрудников(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник))[Сотрудник];
	
КонецФункции

// Возвращает ссылки на текущие отсутствия сотрудников.
//
// Параметры:
//  Сотрудники - Массив из СправочникСсылка.Пользователи - Сотрудники, отсутствие которого необходимо получить.
//
// Возвращаемое значение:
//  Соответствие - Текущие отсутствие пользователя.
//   * Ключ     - СправочникСсылка.Пользователи           - Сотрудник.
//   * Значение - СтрокаТаблицыЗначений, Неопределено - Текущее отсутствие сотрудника.
//
Функция ПолучитьТекущиеОтсутствияСотрудников(Сотрудники)
	
	ТекущиеОтсутствияСотрудников = Новый Соответствие;
	Если Сотрудники.Количество() = 0 Тогда
		Возврат ТекущиеОтсутствияСотрудников;
	КонецЕсли;
	
	ПользователиДляОтбора = Новый Массив;
	Для Каждого Сотрудник Из Сотрудники Цикл
		
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущиеОтсутствияСотрудников.Вставить(Сотрудник, Неопределено);
		
		Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
			ПользователиДляОтбора.Добавить(Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия")
		Или ПользователиДляОтбора.Количество() = 0 Тогда
		Возврат ТекущиеОтсутствияСотрудников;
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	
	Настройки = ОтсутствияКлиентСервер.НастройкиПроверкиОтсутствий();
	Настройки.УчитыватьФлагБудуРазбиратьЗадачи = Истина;
	ТаблицаОтсутствий = ПолучитьТаблицуОтсутствий(Дата, Дата, ПользователиДляОтбора, Настройки);
	Если ТаблицаОтсутствий.Количество() = 0 Тогда
		Возврат ТекущиеОтсутствияСотрудников;
	КонецЕсли;
	
	Для Каждого Сотрудник Из ПользователиДляОтбора Цикл
		
		ОтборПоПользователю = Новый Структура("Сотрудник", Сотрудник);
		
		ПриоритетноеОтсутствие = Неопределено;
		Для Каждого СтрокаОтсутствия Из ТаблицаОтсутствий.НайтиСтроки(ОтборПоПользователю) Цикл
			
			Если ПриоритетноеОтсутствие = Неопределено Тогда
				ПриоритетноеОтсутствие = СтрокаОтсутствия;
				Продолжить;
			КонецЕсли;
			
			Если ПриоритетноеОтсутствие.БудуРазбиратьЗадачи
				И Не СтрокаОтсутствия.БудуРазбиратьЗадачи Тогда
				ПриоритетноеОтсутствие = СтрокаОтсутствия;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ТекущиеОтсутствияСотрудников.Вставить(Сотрудник, ПриоритетноеОтсутствие);
		
	КонецЦикла;
	
	Возврат ТекущиеОтсутствияСотрудников
	
КонецФункции

// Включает получателя в получатели письма об отсутствии.
//
// Параметры:
//  Получатели - Массив из СправочникСсылка.Сотрудники - Получатели письма об отсутствии.
//  Получатель - СправочникСсылка.Сотрудники - Получатель письма об отсутствии.
//
Процедура ВключитьВПолучатели(Получатели, Получатель)
	
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Возврат;
	КонецЕсли;
	
	Если Получатели.Найти(Получатель) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Получатели.Добавить(Получатель);
	
КонецПроцедуры

#КонецОбласти