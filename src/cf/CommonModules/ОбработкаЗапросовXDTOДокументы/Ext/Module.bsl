///////////////////////////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, документы
// Реализует функционал веб-сервиса DMService в части операций с документами и основными справочниками
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Возвращает список правил загрузки данных в ДО по полному имени объекта ИС.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetDataLoadingRulesRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetDataLoadingRulesResponse или DMError.
//
Функция ПолучитьПравилаЗагрузкиДанныхВДО(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetDataLoadingRulesResponse");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПравилаЗагрузкиДанныхВДО.Ссылка КАК ПравилоЗагрузкиДанныхВДО,
			|	ПравилаЗагрузкиДанныхВДО.ВидДокумента КАК ВидДокумента,
			|	ВЫРАЗИТЬ(ПравилаЗагрузкиДанныхВДО.ПредставлениеОбъектаДО КАК СТРОКА(1024)) КАК ПредставлениеОбъектаДО,
			|	ВЫРАЗИТЬ(ПравилаЗагрузкиДанныхВДО.Комментарий КАК СТРОКА(1024)) КАК Комментарий,
			|	ПравилаЗагрузкиДанныхВДО.ТипОбъектаДО КАК ТипОбъектаДО
			|ИЗ
			|	Справочник.ПравилаЗагрузкиДанныхВДО КАК ПравилаЗагрузкиДанныхВДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ИнтегрированныеСистемы КАК ИнтегрированныеСистемы
			|		ПО ПравилаЗагрузкиДанныхВДО.УзелИнтегрированнойСистемы = ИнтегрированныеСистемы.Ссылка
			|ГДЕ
			|	ПравилаЗагрузкиДанныхВДО.ТипОбъектаИС = &ТипОбъектаИС
			|	И НЕ ПравилаЗагрузкиДанныхВДО.ПометкаУдаления
			|	И ИнтегрированныеСистемы.Идентификатор = &Идентификатор
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПравилаЗагрузкиДанныхВДО.Наименование";
		Запрос.УстановитьПараметр("Идентификатор", Сообщение.dataBaseID);
		Запрос.УстановитьПараметр("ТипОбъектаИС", Сообщение.externalObjectType);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Результат Цикл
			ПравилоЗагрузки = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDataLoadingRule");
			ПравилоЗагрузки.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
				Строка.ПравилоЗагрузкиДанныхВДО);
			ПравилоЗагрузки.name = Строка(Строка.ПравилоЗагрузкиДанныхВДО);
			ПравилоЗагрузки.objectType = ОбработкаЗапросовXDTO.ПолучитьТипXDTOПоТипуДО(Строка.ТипОбъектаДО);
			
			МассивПредставлениеОбъектаДО = Новый Массив;
			МассивПредставлениеОбъектаДО.Добавить(Строка.ПредставлениеОбъектаДО);
			Если СокрЛП(Строка.Комментарий) <> "" Тогда
				МассивПредставлениеОбъектаДО.Добавить(СокрЛП(Строка.Комментарий));
			КонецЕсли;
			ПравилоЗагрузки.objectName = СтрСоединить(МассивПредставлениеОбъектаДО, ", ");
			
			Если ЗначениеЗаполнено(Строка.ВидДокумента) Тогда
				ПравилоЗагрузки.documentType = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDocumentType");
				ПравилоЗагрузки.documentType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
					Строка.ВидДокумента);
				ПравилоЗагрузки.documentType.name = Строка(Строка.ВидДокумента);
				ОбработкаЗапросовXDTO.ПолучитьДанныеОбъектаДО(
					Строка.ВидДокумента.ПолучитьОбъект(),
					ПравилоЗагрузки.documentType,
					"DMDocumentType",
					Неопределено);
			КонецЕсли;
			
			Ответ.dataLoadingRules.Добавить(ПравилоЗагрузки);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении правил загрузки данных в ДО'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Проверяет заполнение объекта Документооборота.
//
// Параметры:
//   ОбъектДО - СправочникОбъект - объект Документооборота, источник данных.
//   ИсточникДанных - Структура - источник данных:
//     * ТипИсточника - Строка - принимает значения "ОбъектXDTO" или "ВходящиеДанные", в зависимости от типа источника.
//     * ОбъектXDTO - ОбъектXDTO - объект XDTO, потомок DMObject. Источник данных.
//     * ТипXDTOОбъекта - Строка - имя типа XDTO объекта, из которого требуется заполнить объект ДО.
//     * ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//     * ПравилоЗагрузки - СправочникОбъект.ПравилаЗагрузкиДанныхВДО - правило загрузки.
//     * Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//   ТекстСообщения - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево - Истина, если есть ошибки, Ложи, если ошибок нет.
//
Функция ПроверитьЗаполнениеОбъектаДО(ОбъектДО, ИсточникДанных, ТекстСообщения) Экспорт
	
	ЕстьОшибки = Не ОбработкаЗапросовXDTO.ПроверитьЗаполнение(ОбъектДО, ТекстСообщения);
	
	Если ТипЗнч(ОбъектДО) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
		Если ИсточникДанных.ТипИсточника = "ОбъектXDTO" Тогда
			ПроверятьСвязи = ОбработкаЗапросовXDTO.СвойствоУстановлено(ИсточникДанных.ОбъектXDTO, "checkRelations")
				И ИсточникДанных.ОбъектXDTO.checkRelations;
		Иначе
			ПроверятьСвязи = Ложь;
		КонецЕсли;
		ПроверитьДокументПередЗаписью(ОбъектДО, ТекстСообщения, ПроверятьСвязи, ЕстьОшибки);
		
	ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникОбъект.Мероприятия") Тогда
		ПроверитьМероприятиеПередЗаписью(ОбъектДО, ТекстСообщения, ЕстьОшибки);
		
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#Область Документ

#Область ОбщиеМетодыДокумента

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocument.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - система, для которой предназначен объект.
//   ТолькоОсновныеРеквизиты - Булево - объект XDTO будет заполнен всеми реквизитами объекта ДО, без дополнительных
//     запросов к базе.
//
Процедура ПолучитьДанныеДокумента(Документ, ОбъектXDTO, НаборКолонок = Неопределено,
		ИнтегрированнаяСистема = Неопределено, ТолькоОсновныеРеквизиты = Ложь) Экспорт
	
	ДоступенФункционалФайлов = (ИнтегрированнаяСистема = Неопределено)
		Или РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(ИнтегрированнаяСистема, "3.0.2.1");
	
	ДанныеДокумента = Новый Структура;
	
	// Настройки.
	Если Не ТолькоОсновныеРеквизиты Тогда
		ПолучитьОбщиеНастройкиДокумента(ДанныеДокумента, Документ);
	КонецЕсли;
	
	ДанныеДокумента.Вставить("documentType", Документ.ВидДокумента);
	ДанныеДокумента.Вставить("documentTopic", Документ.Тематика);
	ДанныеДокумента.Вставить("title", Документ.Заголовок);
	ДанныеДокумента.Вставить("summary", Документ.Содержание);
	ДанныеДокумента.Вставить("comment", Документ.Комментарий);
	ДанныеДокумента.Вставить("regNumber", Документ.РегистрационныйНомер);
	ДанныеДокумента.Вставить("regDate", Документ.ДатаРегистрации);
	ДанныеДокумента.Вставить("sum", Документ.Сумма);
	ДанныеДокумента.Вставить("currency", Документ.Валюта);
	ДанныеДокумента.Вставить("organization", Документ.Организация);
	ДанныеДокумента.Вставить("subdivision", Документ.Подразделение);
	ДанныеДокумента.Вставить("accessLevel", Документ.ГрифДоступа);
	ДанныеДокумента.Вставить("performanceDate", Документ.СрокИсполнения);
	ДанныеДокумента.Вставить("activityMatter",Документ.ВопросДеятельности);
	ДанныеДокумента.Вставить("responsible", Документ.Ответственный);
	ДанныеДокумента.Вставить("project", Документ.Проект);
	ДанныеДокумента.Вставить("template", Документ.Шаблон);
	ДанныеДокумента.Вставить("deletionMark", Документ.ПометкаУдаления);
	ДанныеДокумента.Вставить("numberOfSheets", Документ.КоличествоЛистов);
	ДанныеДокумента.Вставить("numberOfAnnexes", Документ.КоличествоПриложений);
	ДанныеДокумента.Вставить("sheetsInAnnexes", Документ.ЛистовВПриложениях);
	ДанныеДокумента.Вставить("numberOfCopies", Документ.КоличествоЭкземпляров);
	ДанныеДокумента.Вставить("caseFilesCatalog", Документ.НоменклатураДел);
	ДанныеДокумента.Вставить("caseFileDossier", Документ.Дело);
	ДанныеДокумента.Вставить("folder", Документ.Папка);
	ДанныеДокумента.Вставить("beginDate", Документ.ДатаНачалаДействия);
	ДанныеДокумента.Вставить("endDate", Документ.ДатаОкончанияДействия);
	ДанныеДокумента.Вставить("openEnded", Документ.Бессрочный);
	ДанныеДокумента.Вставить("correspondent", Документ.Контрагент);
	ДанныеДокумента.Вставить("contactPerson", Документ.КонтактноеЛицо);
	ДанныеДокумента.Вставить("signerFromTheCorrespondent", Документ.ПодписалОтКонтрагента);
	ДанныеДокумента.Вставить("author", Документ.Подготовил);
	ДанныеДокумента.Вставить("addressee", Документ.Адресат);
	ДанныеДокумента.Вставить("VAT", Документ.СуммаНДС);
	Если ЗначениеЗаполнено(Документ.ПорядокПродления) Тогда
		ДанныеДокумента.Вставить("prolongationProcedure",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Документ.ПорядокПродления));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.ВидДокумента) Тогда
		КэшВидаДокумента = Документ.ВидДокумента.ПолучитьОбъект();
	Иначе
		КэшВидаДокумента = Справочники.ВидыДокументов.СоздатьЭлемент();
		КэшВидаДокумента.Заполнить(Неопределено);
	КонецЕсли;
	
	Если КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией = Истина
			Или КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией = Истина Тогда
		// Получение параметров корреспонденции
		ПараметрыКорреспонденции = ПараметрыКорреспонденцииДокумента(
			Документ,
			КэшВидаДокумента);
		ЗаполнитьПараметрыКорреспонденцииИзДокумента(
			Документ,
			ПараметрыКорреспонденции);
	КонецЕсли;
	
	Если КэшВидаДокумента.ЯвляетсяОбращениемОтГраждан = Истина
			И ЗначениеЗаполнено(ПараметрыКорреспонденции.ВидОбращения) Тогда
		ДанныеДокумента.Вставить("typeOfAppeal",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ПараметрыКорреспонденции.ВидОбращения));
	КонецЕсли;
	
	Если КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией = Истина Тогда
		ДанныеДокумента.Вставить("externalNumber", ПараметрыКорреспонденции.ИсходящийНомер);
		ДанныеДокумента.Вставить("externalDate", ПараметрыКорреспонденции.ИсходящаяДата);
		ДанныеДокумента.Вставить("deliveryMethod", ПараметрыКорреспонденции.СпособПолучения);
	КонецЕсли;
	
	Если КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией = Истина
			И ПараметрыКорреспонденции.Контрагенты.Количество() > 0 Тогда
		ПерваяСтрока = ПараметрыКорреспонденции.Контрагенты[0];
		ДанныеДокумента.Вставить("externalNumber", ПерваяСтрока.ВходящийНомер);
		ДанныеДокумента.Вставить("externalDate", ПерваяСтрока.ВходящаяДата);
		ДанныеДокумента.Вставить("deliveryMethod", ПерваяСтрока.СпособОтправки);
		ДанныеДокумента.Вставить("sent", ПерваяСтрока.Отправлен);
		ДанныеДокумента.Вставить("sendDate", ПерваяСтрока.ДатаОтправки);
	КонецЕсли;
	
	Если Не ТолькоОсновныеРеквизиты Тогда
		Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
			
			// Заполним состояние документа.
			ИменаСостояний = Новый Массив;
			ИменаСостояний.Добавить("Согласование");
			ИменаСостояний.Добавить("Утверждение");
			ИменаСостояний.Добавить("Подписание");
			ИменаСостояний.Добавить("Регистрация");
			ИменаСостояний.Добавить("Исполнение");
			ИменаСостояний.Добавить("Ознакомление");
			ТаблицаСостояний = Делопроизводство.ПолучитьВсеСостоянияДокумента(Документ.Ссылка);
			СоответствиеСостояний = СоответствиеСостоянийДокумента();
			
			Для Каждого ИмяСостояния Из ИменаСостояний Цикл
				СтруктураСостояния = Делопроизводство.ПолучитьСтруктуруСостоянияДокумента(
					Документ.Ссылка,
					СтрШаблон("Состояние%1", ИмяСостояния),,
					ТаблицаСостояний);
				Если ЗначениеЗаполнено(СтруктураСостояния.Состояние) Тогда
					ДанныеДокумента.Вставить(СоответствиеСостояний.Получить(ИмяСостояния),
						ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СтруктураСостояния.Состояние));
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			// Заполним состояние документа.
			ДанныеДокумента.Вставить("statusRegistration",
				ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Перечисления.СостоянияДокументов.Проект));
			
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		Документ,
		ДанныеДокумента,
		ОбъектXDTO,
		НаборКолонок,,
		Не ТолькоОсновныеРеквизиты,
		Не ТолькоОсновныеРеквизиты);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Колонки.Добавить(НРег(ИмяКолонки));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(
			Документ,
			ОбъектXDTO,
			ТолькоОсновныеРеквизиты);
	КонецЕсли;
	
	Если ТолькоОсновныеРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		
		// Заполним файлы.
		Если ДоступенФункционалФайлов
				И ЗначениеЗаполнено(Документ.Ссылка)
				И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено) Тогда
			ВключатьПомеченныеНаУдаление = (Колонки.Найти(НРег("ignoreDeletionMark")) <> Неопределено);
			ПолучатьПредпросмотр = (Колонки.Найти(НРег("htmlView")) <> Неопределено);
			ПолучатьДвоичныеДанные = (Колонки.Найти(НРег("binaryData")) <> Неопределено);
			НаборКолонокФайлов = Новый Массив;
			ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов);
			ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(
				ОбъектXDTO,
				Документ.Ссылка,
				НаборКолонокФайлов,
				ВключатьПомеченныеНаУдаление,
				ПолучатьПредпросмотр,
				ПолучатьДвоичныеДанные);
		КонецЕсли;
		
		// Заполним подписи.
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("signatures")) <> Неопределено Тогда
			ОбработкаЗапросовXDTO.ПолучитьСписокПодписей(Документ, ОбъектXDTO);
		КонецЕсли;
		
		// Заполним слепок документа.
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("keyPropertiesValue")) <> Неопределено Тогда
			ОбъектXDTO.KeyPropertiesValue = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(Документ.Ссылка);
		КонецЕсли;
		
		// Заполним связи.
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("relations")) <> Неопределено Тогда
			МассивСвязанных = ПолучитьСвязанныеДокументы(Документ.Ссылка);
			Для Каждого СвязанныйДокумент Из МассивСвязанных Цикл
				ОбъектXDTO.Relations.Добавить(СвязанныйДокумент);
			КонецЦикла;
		КонецЕсли;
		
		// Заполним признак "Содержит оригиналы".
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("containsScannedOriginals")) <> Неопределено Тогда
			ЗаполнитьПризнакСодержитОригиналы(Документ.Ссылка, ОбъектXDTO);
		КонецЕсли;
		
		// Заполним суммы по статьям ДДС.
		Если КэшВидаДокумента.ВестиУчетПоСтатьямДДС = Истина
				И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("cashFlowRows")) <> Неопределено) Тогда
			СтатьиДвиженияДенежныхСредств = ТаблицаСтатьиДвиженияДенежныхСредств();
			РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
				Документ.Ссылка,
				СтатьиДвиженияДенежныхСредств);
			ПолучитьСтатьиДДСДокумента(Документ, ОбъектXDTO, СтатьиДвиженияДенежныхСредств);
		КонецЕсли;
		
		// Заполним текущее состояние обработки.
		Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("processingState")) <> Неопределено Тогда
			СостояниеОбработки = ДействияСервер.ТекущееСостояниеОбработки(Документ.Ссылка);
			Если ЗначениеЗаполнено(СостояниеОбработки) Тогда
				ОбъектXDTO.processingState = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СостояниеОбработки);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ЗначениеЗаполнено(Документ.Шаблон) Тогда
		
		// Заполним файлы.
		ФайлыШаблона = ФайлыШаблона();
		ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(Документ.Шаблон, ФайлыШаблона, Ложь);
		ШаблоныДокументов.ПрименитьУсловияДобавленияФайлов(Документ.Ссылка, ФайлыШаблона);
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловПоШаблону(ОбъектXDTO, ФайлыШаблона);
		
		// Заполним суммы по статьям ДДС.
		Если КэшВидаДокумента.ВестиУчетПоСтатьямДДС = Истина
				И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("cashFlowRows")) <> Неопределено) Тогда
			СтатьиДвиженияДенежныхСредств = ТаблицаСтатьиДвиженияДенежныхСредств();
			ШаблоныДокументов.ЗаполнитьСтатьиДДСДокументаПоШаблону(
				Документ.Шаблон,
				СтатьиДвиженияДенежныхСредств);
			ПолучитьСтатьиДДСДокумента(Документ, ОбъектXDTO, СтатьиДвиженияДенежныхСредств);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним состояния по видам действий.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("statusByActionTypeRows")) <> Неопределено Тогда
		ПолучитьСостоянияДокументаПоВидамДействий(Документ, ОбъектXDTO, ТаблицаСостояний);
	КонецЕсли;
	
	// Заполним товары и услуги.
	Если КэшВидаДокумента.ВестиУчетТоваровИУслуг = Истина
			И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("productRows")) <> Неопределено) Тогда
		ПолучитьТоварыДокумента(Документ, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним таблицу Контрагенты.
	Если КэшВидаДокумента.ВестиУчетПоКонтрагентам = Истина
			И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("correspondentRows")) <> Неопределено) Тогда
		ПолучитьКонтрагентовДокумента(Документ, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним таблицу Стороны.
	Если КэшВидаДокумента.ВестиУчетСторон = Истина
			И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("partyRows")) <> Неопределено) Тогда
		ПолучитьСтороныДокумента(Документ, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним реквизиты вида документа.
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "documentType")
			И ЗначениеЗаполнено(Документ.ВидДокумента) Тогда
		ОбработкаЗапросовXDTO.ПолучитьДанныеОбъектаДО(
			Документ.ВидДокумента.ПолучитьОбъект(),
			ОбъектXDTO.documentType,
			"DMDocumentType",
			Неопределено);
	КонецЕсли;
	
	// Заполним тематику документа.
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "documentTopic")
			И ЗначениеЗаполнено(Документ.Тематика) Тогда
		ОбработкаЗапросовXDTO.ПолучитьДанныеОбъектаДО(
			Документ.Тематика.ПолучитьОбъект(),
			ОбъектXDTO.documentTopic,
			"DMDocumentTopic",
			Неопределено);
	КонецЕсли;
	
	// Заполним реквизиты шаблона документа.
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "template")
			И ЗначениеЗаполнено(Документ.Шаблон) Тогда
		ПолучитьДанныеШаблонаДокумента(Документ.Шаблон, ОбъектXDTO.template);
	КонецЕсли;
	
	// Заполним номенклатуру дел.
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "caseFilesCatalog")
			И ЗначениеЗаполнено(Документ.НоменклатураДел) Тогда
		ОбработкаЗапросовXDTO.ПолучитьДанныеОбъектаДО(
			Документ.НоменклатураДел.ПолучитьОбъект(),
			ОбъектXDTO.caseFilesCatalog,
			"DMCaseFilesCatalog",
			Неопределено);
	КонецЕсли;
	
	// Заполним дела хранения документов.
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "caseFileDossier")
			И ЗначениеЗаполнено(Документ.Дело) Тогда
		ОбработкаЗапросовXDTO.ПолучитьДанныеОбъектаДО(
			Документ.Дело.ПолучитьОбъект(),
			ОбъектXDTO.caseFileDossier,
			"DMCaseFilesDossiers",
			Неопределено);
	КонецЕсли;
	
	// Заполним визы.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("visas")) <> Неопределено Тогда
		ЗаполнитьВизыДокумента(Документ.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним резолюции.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("resolutions")) <> Неопределено Тогда
		ЗаполнитьРезолюцииДокумента(Документ.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним доступные и недоступные поля.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("enabledProperties")) <> Неопределено Тогда
		Для Каждого Строка Из ДоступныеПоСостояниюПоля(Документ) Цикл
			ОбъектXDTO.enabledProperties.Добавить(Строка.Ключ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocument. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеДокумента(Документ, ОбъектXDTO) Экспорт
	
	Документ.ДополнительныеСвойства.Вставить("НачальныйРегистрационныйНомер", Документ.РегистрационныйНомер);
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Шаблон, ОбъектXDTO, "template");
	ЗаполнятьПоШаблону = Не ЗначениеЗаполнено(Документ.Ссылка) И ЗначениеЗаполнено(Документ.Шаблон);
	Документ.ДополнительныеСвойства.Вставить("ЗаполнятьПоШаблону", ЗаполнятьПоШаблону);
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.ВидДокумента, ОбъектXDTO, "documentType");
	
	Если ЗаполнятьПоШаблону Тогда
		ДанныеЗаполнения = Новый Структура("ШаблонДокумента", Документ.Шаблон);
		Документ.Заполнить(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.ВидДокумента) Тогда
		ФормаДокументаИзВида = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ВидДокумента, "ФормаДокумента");
		Если ФормаДокументаИзВида = Перечисления.ВариантыФормДокументов.Электронная
				И Документ.ФормаДокумента <> Перечисления.ВариантыФормДокументов.Электронная Тогда
			Документ.ФормаДокумента = Перечисления.ВариантыФормДокументов.Электронная;
		КонецЕсли;
	КонецЕсли;
	
	КэшВидаДокумента = Делопроизводство.КэшВидаДокумента(Документ.ВидДокумента);
	Документ.ДополнительныеСвойства.Вставить("КэшВидаДокумента", КэшВидаДокумента);
	ПараметрыКорреспонденции = ПараметрыКорреспонденцииДокумента(Документ, КэшВидаДокумента);
	
	Если КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией = Истина
			Или КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией = Истина Тогда
		// Получение параметров корреспонденции
		ЗаполнитьПараметрыКорреспонденцииИзДокумента(Документ, ПараметрыКорреспонденции);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Заголовок, ОбъектXDTO, "title");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Тематика, ОбъектXDTO, "documentTopic");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Содержание, ОбъектXDTO, "summary");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Комментарий, ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.РегистрационныйНомер, ОбъектXDTO, "regNumber");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.ДатаРегистрации, ОбъектXDTO, "regDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Сумма, ОбъектXDTO, "sum");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Валюта, ОбъектXDTO, "currency");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Организация, ОбъектXDTO, "organization");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Подразделение, ОбъектXDTO, "subdivision");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.ГрифДоступа, ОбъектXDTO, "accessLevel");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.СрокИсполнения, ОбъектXDTO, "performanceDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.ВопросДеятельности, ОбъектXDTO, "activityMatter");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Ответственный, ОбъектXDTO, "responsible");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Проект, ОбъектXDTO, "project");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.ПометкаУдаления, ОбъектXDTO, "deletionMark");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.КоличествоЛистов, ОбъектXDTO, "numberOfSheets");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.КоличествоПриложений, ОбъектXDTO, "numberOfAnnexes");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.ЛистовВПриложениях, ОбъектXDTO, "sheetsInAnnexes");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.КоличествоЭкземпляров, ОбъектXDTO, "numberOfCopies");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.НоменклатураДел, ОбъектXDTO, "caseFilesCatalog");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Дело, ОбъектXDTO, "caseFileDossier");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Папка, ОбъектXDTO, "folder");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.ДатаНачалаДействия, ОбъектXDTO, "beginDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.ДатаОкончанияДействия, ОбъектXDTO, "endDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Бессрочный, ОбъектXDTO, "openEnded");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Контрагент, ОбъектXDTO, "correspondent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.КонтактноеЛицо, ОбъектXDTO, "contactPerson");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Подготовил, ОбъектXDTO, "author");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.Адресат, ОбъектXDTO, "addressee");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Документ.СуммаНДС, ОбъектXDTO, "VAT");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Документ.ПодписалОтКонтрагента,
		ОбъектXDTO,
		"signerFromTheCorrespondent");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMProlongationProcedure",
		ОбъектXDTO,
		"prolongationProcedure",
		Документ,
		"ПорядокПродления");
	
	Если КэшВидаДокумента.ЯвляетсяОбращениемОтГраждан = Истина Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
			"DMTypesOfAppealsOfCitizens",
			ОбъектXDTO,
			"typeOfAppeal",
			ПараметрыКорреспонденции,
			"ВидОбращения");
	КонецЕсли;
	
	Если КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией = Истина Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ПараметрыКорреспонденции.ИсходящийНомер, ОбъектXDTO, "externalNumber");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ПараметрыКорреспонденции.ИсходящаяДата, ОбъектXDTO, "externalDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ПараметрыКорреспонденции.СпособПолучения, ОбъектXDTO, "deliveryMethod");
	КонецЕсли;
	
	Если КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией = Истина Тогда
		Если ПараметрыКорреспонденции.Контрагенты.Количество() > 0 Тогда
			ПерваяСтрока = ПараметрыКорреспонденции.Контрагенты[0];
		Иначе
			ПерваяСтрока = ПараметрыКорреспонденции.Контрагенты.Добавить();
		КонецЕсли;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ПерваяСтрока.ВходящийНомер, ОбъектXDTO, "externalNumber");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ПерваяСтрока.ВходящаяДата, ОбъектXDTO, "externalDate");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ПерваяСтрока.СпособОтправки, ОбъектXDTO, "deliveryMethod");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ПерваяСтрока.Отправлен, ОбъектXDTO, "sent");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ПерваяСтрока.ДатаОтправки, ОбъектXDTO, "sendDate");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ПараметрыКорреспонденции.ВходящийНомер, ОбъектXDTO, "externalNumber");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			ПараметрыКорреспонденции.ВходящаяДата, ОбъектXDTO, "externalDate");
	КонецЕсли;
	
	Если КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией = Истина
			Или КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией = Истина Тогда
		Документ.ДополнительныеСвойства.Вставить("ПараметрыКорреспонденции", ПараметрыКорреспонденции);
	КонецЕсли;
	
	Если КэшВидаДокумента.ВестиУчетПоСтатьямДДС = Истина Тогда
		ЗаполнитьСтатьиДДСДокумента(Документ, ОбъектXDTO);
	КонецЕсли;
	
	Если КэшВидаДокумента.ВестиУчетСторон = Истина Тогда
		ЗаполнитьСтороныДокумента(Документ, ОбъектXDTO);
	КонецЕсли;
	
	Если КэшВидаДокумента.ВестиУчетПоКонтрагентам = Истина Тогда
		ЗаполнитьКонтрагентовДокумента(Документ, ОбъектXDTO);
	КонецЕсли;
	
	Если КэшВидаДокумента.ВестиУчетТоваровИУслуг = Истина Тогда
		ЗаполнитьТоварыДокумента(Документ, ОбъектXDTO);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Документ, ОбъектXDTO);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОсновнойСотрудникТекущегоПользователя = Сотрудники.ОсновнойСотрудникПользователя();
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.ДатаСоздания) Тогда
		Документ.ДатаСоздания = ТекущаяДата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) И Не ЗначениеЗаполнено(Документ.Создал) Тогда
		Документ.Создал = Сотрудники.ОсновнойСотрудникПользователя(ТекущийПользователь);
	КонецЕсли;
	
	ПодписанУтвержден = Делопроизводство.СтрокаПодписалУтвердил(Документ);
	Если ПодписанУтвержден <> Документ.ПодписанУтвержден Тогда
		Документ.ПодписанУтвержден = ПодписанУтвержден;
	КонецЕсли;
	
	Для Каждого Строка Из Документ.Товары Цикл 
		Строка.Номер = Строка.НомерСтроки;
	КонецЦикла;
	
	СрокДействияИзменен = Ложь;
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		СрокДействияИзменен = СрокДействияИзменен(Документ);
	КонецЕсли;
	Документ.ДополнительныеСвойства.Вставить("СрокДействияИзменен", СрокДействияИзменен);
	
	Документ.ДополнительныеСвойства.Вставить("ТекущаяДата", ТекущаяДата);
	Документ.ДополнительныеСвойства.Вставить("ТекущийПользователь", ТекущийПользователь);
	Документ.ДополнительныеСвойства.Вставить(
		"ОсновнойСотрудникТекущегоПользователя",
		ОсновнойСотрудникТекущегоПользователя);
	
КонецПроцедуры

// Ищет подходящий документ по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocument.
//
// Возвращаемое значение:
//   СправочникСсылка.ДокументыПредприятия - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиДокумент(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	РегистрационныйНомер = "";
	ДатаРегистрации = Дата(1, 1, 1);
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "regNumber") Тогда
		РегистрационныйНомер = ОбъектXDTO.regNumber;
	КонецЕсли;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "regDate") Тогда
		ДатаРегистрации = ОбъектXDTO.regDate;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрационныйНомер) И ЗначениеЗаполнено(ДатаРегистрации) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументыПредприятия.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
			|ГДЕ
			|	НЕ ДокументыПредприятия.ПометкаУдаления
			|	И ДокументыПредприятия.РегистрационныйНомер = &РегистрационныйНомер
			|	И ДокументыПредприятия.ДатаРегистрации = &ДатаРегистрации");
		Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
		Запрос.УстановитьПараметр("ДатаРегистрации", ДатаРегистрации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДопОбработчикиПравилЗагрузкиДокумента

// Процедура для заполнения параметров корреспонденции документа ДО.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПравилаЗагрузки_ЗаполнитьПараметрыКорреспонденции(Параметры) Экспорт
	
	Если Не Параметры.ОбъектДО.ДополнительныеСвойства.Свойство("ПараметрыКорреспонденции") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКорреспонденции = Параметры.ОбъектДО.ДополнительныеСвойства.ПараметрыКорреспонденции;
	ИмяРеквизита = Параметры.ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаДО;
	
	Если ПараметрыКорреспонденции.Свойство(ИмяРеквизита) Тогда
		РеквизитЗаполнен = РаботаСИнтегрированнымиСистемами.ЗаполнитьРеквизитПоПравилу(
			Параметры.ПравилоЗаполненияРеквизита,
			ПараметрыКорреспонденции[ИмяРеквизита],
			Параметры.ОбъектДО,
			Параметры.ОбъектИС,
			Параметры.ПравилоЗагрузки,
			Параметры.ВходящиеДанные,
			Параметры.ЗначенияИзШаблона);
		Если РеквизитЗаполнен Тогда
			Параметры.ОбъектДО.ДополнительныеСвойства.Вставить("Модифицированность", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыКорреспонденции.Контрагенты.Колонки.Найти(ИмяРеквизита) <> Неопределено Тогда
		Если ПараметрыКорреспонденции.Контрагенты.Количество() > 0 Тогда
			ПерваяСтрока = ПараметрыКорреспонденции.Контрагенты[0];
		Иначе
			ПерваяСтрока = ПараметрыКорреспонденции.Контрагенты.Добавить();
		КонецЕсли;
		РеквизитЗаполнен = РаботаСИнтегрированнымиСистемами.ЗаполнитьРеквизитПоПравилу(
			Параметры.ПравилоЗаполненияРеквизита,
			ПерваяСтрока[ИмяРеквизита],
			Параметры.ОбъектДО,
			Параметры.ОбъектИС,
			Параметры.ПравилоЗагрузки,
			Параметры.ВходящиеДанные,
			Параметры.ЗначенияИзШаблона);
		Если РеквизитЗаполнен Тогда
			Параметры.ОбъектДО.ДополнительныеСвойства.Вставить("Модифицированность", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРеквизита = "Контрагент"
			Или ИмяРеквизита = "ПодписалОтКонтрагента"
			Или ИмяРеквизита = "КонтактноеЛицо" Тогда
		Если Параметры.ОбъектДО.Контрагенты.Количество() > 0 Тогда
			ПерваяСтрока = Параметры.ОбъектДО.Контрагенты[0];
		Иначе
			ПерваяСтрока = Параметры.ОбъектДО.Контрагенты.Добавить();
		КонецЕсли;
		РеквизитЗаполнен = РаботаСИнтегрированнымиСистемами.ЗаполнитьРеквизитПоПравилу(
			Параметры.ПравилоЗаполненияРеквизита,
			ПерваяСтрока[ИмяРеквизита],
			Параметры.ОбъектДО,
			Параметры.ОбъектИС,
			Параметры.ПравилоЗагрузки,
			Параметры.ВходящиеДанные,
			Параметры.ЗначенияИзШаблона);
		Если РеквизитЗаполнен Тогда
			Параметры.ОбъектДО.ДополнительныеСвойства.Вставить("Модифицированность", Истина);
		КонецЕсли;
		РеквизитЗаполнен = РаботаСИнтегрированнымиСистемами.ЗаполнитьРеквизитПоПравилу(
			Параметры.ПравилоЗаполненияРеквизита,
			Параметры.ОбъектДО[ИмяРеквизита],
			Параметры.ОбъектДО,
			Параметры.ОбъектИС,
			Параметры.ПравилоЗагрузки,
			Параметры.ВходящиеДанные,
			Параметры.ЗначенияИзШаблона);
		Если РеквизитЗаполнен Тогда
			Параметры.ОбъектДО.ДополнительныеСвойства.Вставить("Модифицированность", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура для заполнения плательщика в заявке на оплату.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПравилаЗагрузки_ЗаполнитьПлательщикаВЗаявкеНаОплату(Параметры) Экспорт
	
	Плательщик = Справочники.НаименованияСторон.Плательщик;
	
	СтрокиПлательщик = Параметры.ОбъектДО.Стороны.НайтиСтроки(Новый Структура("Наименование", Плательщик));
	
	Если СтрокиПлательщик.Количество() > 0 Тогда
		СтрокаПлательщик = СтрокиПлательщик[0];
	Иначе
		СтрокаПлательщик = Параметры.ОбъектДО.Стороны.Вставить(0);
		СтрокаПлательщик.Наименование = Плательщик;
	КонецЕсли;
	
	Если Параметры.ПравилоЗаполненияРеквизита.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона
			И Параметры.ЗначенияИзШаблона <> Неопределено Тогда
		СтрокиПлательщикШаблон = Параметры.ЗначенияИзШаблона.Документ.Стороны.НайтиСтроки(
			Новый Структура("Наименование", Плательщик));
		Если СтрокиПлательщикШаблон.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаПлательщик, СтрокиПлательщикШаблон[0]);
		КонецЕсли;
		
	Иначе
		РаботаСИнтегрированнымиСистемами.ЗаполнитьРеквизитПоПравилу(
			Параметры.ПравилоЗаполненияРеквизита,
			СтрокаПлательщик.Сторона,
			Параметры.ОбъектДО,
			Параметры.ОбъектИС,
			Параметры.ПравилоЗагрузки,
			Параметры.ВходящиеДанные,
			Параметры.ЗначенияИзШаблона);
		
	КонецЕсли;
	
	Если Параметры.ОбъектДО.Организация <> СтрокаПлательщик.Сторона Тогда
		Параметры.ОбъектДО.Организация = СтрокаПлательщик.Сторона;
	КонецЕсли;
	
КонецПроцедуры

// Процедура для заполнения получателя в заявке на оплату.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПравилаЗагрузки_ЗаполнитьПолучателяВЗаявкеНаОплату(Параметры) Экспорт
	
	Получатель = Справочники.НаименованияСторон.Получатель;
	
	СтрокиПолучатель = Параметры.ОбъектДО.Стороны.НайтиСтроки(Новый Структура("Наименование", Получатель));
	
	Если СтрокиПолучатель.Количество() > 0 Тогда
		СтрокаПолучатель = СтрокиПолучатель[0];
	Иначе
		СтрокаПолучатель = Параметры.ОбъектДО.Стороны.Добавить();
		СтрокаПолучатель.Наименование = Получатель;
	КонецЕсли;
	
	Если Параметры.ПравилоЗаполненияРеквизита.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона
			И Параметры.ЗначенияИзШаблона <> Неопределено Тогда
		СтрокиПолучательШаблон = Параметры.ЗначенияИзШаблона.Документ.Стороны.НайтиСтроки(
			Новый Структура("Наименование", Получатель));
		Если СтрокиПолучательШаблон.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаПолучатель, СтрокиПолучательШаблон[0]);
		КонецЕсли;
		
	Иначе
		РаботаСИнтегрированнымиСистемами.ЗаполнитьРеквизитПоПравилу(
			Параметры.ПравилоЗаполненияРеквизита,
			СтрокаПолучатель.Сторона,
			Параметры.ОбъектДО,
			Параметры.ОбъектИС,
			Параметры.ПравилоЗагрузки,
			Параметры.ВходящиеДанные,
			Параметры.ЗначенияИзШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура для заполнения связей документа ДО.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПравилаЗагрузки_ЗаполнитьСвязи(Параметры) Экспорт
	
	ИмяРеквизита = Параметры.ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаДО;
	
	ТипСвязи = Неопределено;
	Если ИмяРеквизита = "АвансовыйОтчет" Тогда
		ТипСвязи = Справочники.ТипыСвязей.АвансовыйОтчет;
		
	ИначеЕсли ИмяРеквизита = "ПредметПереписки" Тогда
		ТипСвязи = Справочники.ТипыСвязей.ПредметПереписки;
		
	ИначеЕсли ИмяРеквизита = "ПолученВОтветНа" Тогда
		ТипСвязи = Справочники.ТипыСвязей.ПолученВОтветНа;
		
	ИначеЕсли ИмяРеквизита = "ОтправленВОтветНа" Тогда
		ТипСвязи = Справочники.ТипыСвязей.ОтправленВОтветНа;
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип связи ""%1""'"), ИмяРеквизита);
		
	КонецЕсли;
	
	СвязанныйОбъект = Неопределено;
	ТекущиеСвязанныеОбъекты = СвязиОбъектов.ПолучитьСвязанныеОбъекты(Параметры.ОбъектДО.Ссылка, ТипСвязи);
	Если ТекущиеСвязанныеОбъекты.Количество() = 1 Тогда
		СвязанныйОбъект = ТекущиеСвязанныеОбъекты[0];
	КонецЕсли;
	
	РеквизитЗаполнен = РаботаСИнтегрированнымиСистемами.ЗаполнитьРеквизитПоПравилу(
		Параметры.ПравилоЗаполненияРеквизита,
		СвязанныйОбъект,
		Параметры.ОбъектДО,
		Параметры.ОбъектИС,
		Параметры.ПравилоЗагрузки,
		Параметры.ВходящиеДанные,
		Параметры.ЗначенияИзШаблона);
	Если РеквизитЗаполнен Тогда
		Параметры.ОбъектДО.ДополнительныеСвойства.Вставить("Модифицированность", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвязанныйОбъект) Тогда
		НоваяСвязь = Параметры.ОбъектДО.ДополнительныеСвойства.Связи.Добавить();
		НоваяСвязь.СвязанныйОбъект = СвязанныйОбъект;
		НоваяСвязь.ТипСвязи = ТипСвязи;
	КонецЕсли;
	
КонецПроцедуры

// Процедура для заполнения статей ДДС документа ДО.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПравилаЗагрузки_ЗаполнитьСтатьиДДС(Параметры) Экспорт
	
	// Поскольку Статьи ДДС хранятся отдельно от документа - добавим их в ДополнительныеСвойства
	СтатьиДвиженияДенежныхСредств = ТаблицаСтатьиДвиженияДенежныхСредств();
	
	Если Параметры.ПравилоЗаполненияРеквизита.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона
			И Параметры.ЗначенияИзШаблона <> Неопределено Тогда
		СтатьиДвиженияДенежныхСредств = Параметры.ЗначенияИзШаблона.СтатьиДДС;
		
	Иначе
		РаботаСИнтегрированнымиСистемами.ЗаполнитьТаблицуПоПравилу(
			Параметры.ПравилоЗаполненияРеквизита,
			Параметры.ОбъектДО,
			СтатьиДвиженияДенежныхСредств,
			Параметры.ОбъектИС,
			Параметры.ПравилоЗагрузки,
			Параметры.ВходящиеДанные,
			Параметры.ЗначенияИзШаблона);
		
	КонецЕсли;
	
	Если СтатьиДвиженияДенежныхСредств.Количество() = 1
			И СтатьиДвиженияДенежныхСредств[0].Сумма = 0 И СтатьиДвиженияДенежныхСредств[0].СуммаНДС = 0 Тогда
		СтатьиДвиженияДенежныхСредств[0].Сумма = Параметры.ОбъектДО.Сумма;
		СтатьиДвиженияДенежныхСредств[0].СуммаНДС = Параметры.ОбъектДО.СуммаНДС;
	КонецЕсли;
	
	СтатьиДвиженияДенежныхСредств.Свернуть("СтатьяДвиженияДенежныхСредств", "Сумма, СуммаНДС");
	Параметры.ОбъектДО.ДополнительныеСвойства.Вставить("СтатьиДвиженияДенежныхСредств", СтатьиДвиженияДенежныхСредств);
	
	СтатьиДвиженияДенежныхСредствИБ = ТаблицаСтатьиДвиженияДенежныхСредств();
	РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
		Параметры.ОбъектДО.Ссылка,
		СтатьиДвиженияДенежныхСредствИБ);
	
	Если Не ОбщегоНазначения.КоллекцииИдентичны(СтатьиДвиженияДенежныхСредствИБ, СтатьиДвиженияДенежныхСредств) Тогда
		Параметры.ОбъектДО.ДополнительныеСвойства.Вставить("Модифицированность", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура для проверки доступности параметров корреспонденции по текущему состоянию документа ДО.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПроверитьДоступностьПоСостоянию_ПараметрыКорреспонденции(Параметры) Экспорт
	
	ЕстьПараметрыКорреспонденции = Параметры.Документ.ДополнительныеСвойства.Свойство("ПараметрыКорреспонденции");
	ЕстьПараметрыКорреспонденцииИБ = Параметры.ДокументИБ.ДополнительныеСвойства.Свойство("ПараметрыКорреспонденции");
	
	Если Не ЕстьПараметрыКорреспонденции И Не ЕстьПараметрыКорреспонденцииИБ Тогда
		// Параметров корреспонденции нет, ничего не меняется
		Возврат;
	КонецЕсли;
	
	Если (Не ЕстьПараметрыКорреспонденции) Или (Не ЕстьПараметрыКорреспонденцииИБ) Тогда
		// Точно были изменения в параметрах корреспонденции, дальнейшие проверки выполнить не получится
		Параметры.МассивОшибок.Добавить(
			ОписаниеОшибкиПроверкиИзмененияПолейПоСостоянию(
				Параметры.СтрокаРеквизитОбъекта, Параметры.ТекущееСостояние));
		Возврат;
	КонецЕсли;
	
	ПараметрыКорреспонденции = Параметры.Документ.ДополнительныеСвойства.ПараметрыКорреспонденции;
	ПараметрыКорреспонденцииИБ = Параметры.ДокументИБ.ДополнительныеСвойства.ПараметрыКорреспонденции;
	ИмяРеквизита = Параметры.СтрокаРеквизитОбъекта.Имя;
	
	Если ПараметрыКорреспонденции.Свойство(ИмяРеквизита)
			И (ПараметрыКорреспонденции[ИмяРеквизита] <> ПараметрыКорреспонденцииИБ[ИмяРеквизита]) Тогда
		Параметры.МассивОшибок.Добавить(
			ОписаниеОшибкиПроверкиИзмененияПолейПоСостоянию(
				Параметры.СтрокаРеквизитОбъекта, Параметры.ТекущееСостояние));
	КонецЕсли;
	
	Если (ИмяРеквизита = "ВходящийНомер" Или ИмяРеквизита = "ВходящаяДата"
				Или ИмяРеквизита = "СпособОтправки" Или ИмяРеквизита = "Отправлен" Или ИмяРеквизита = "ДатаОтправки"
				Или ИмяРеквизита = "Контрагент" Или ИмяРеквизита = "ПодписалОтКонтрагента")
			И (Не ОбщегоНазначения.КоллекцииИдентичны(
				ПараметрыКорреспонденции.Контрагенты,
				ПараметрыКорреспонденцииИБ.Контрагенты,
				ИмяРеквизита)) Тогда
		Параметры.МассивОшибок.Добавить(
			ОписаниеОшибкиПроверкиИзмененияПолейПоСостоянию(
				Параметры.СтрокаРеквизитОбъекта, Параметры.ТекущееСостояние));
	КонецЕсли;
	
КонецПроцедуры

// Процедура для проверки доступности плательщика по текущему состоянию заявки на оплату.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПроверитьДоступностьПоСостоянию_ПлательщикВЗаявкеНаОплату(Параметры) Экспорт
	
	СтруктураПоиска = Новый Структура("Наименование", Справочники.НаименованияСторон.Плательщик);
	
	СтрокиПлательщик = Параметры.Документ.Стороны.НайтиСтроки(СтруктураПоиска);
	Плательщик = Неопределено;
	Если СтрокиПлательщик.Количество() > 0 Тогда
		Плательщик = СтрокиПлательщик[0].Сторона;
	КонецЕсли;
	
	СтрокиПлательщикИБ = Параметры.ДокументИБ.Стороны.НайтиСтроки(СтруктураПоиска);
	ПлательщикИБ = Неопределено;
	Если СтрокиПлательщикИБ.Количество() > 0 Тогда
		ПлательщикИБ = СтрокиПлательщикИБ[0].Сторона;
	КонецЕсли;
	
	Если Плательщик <> ПлательщикИБ Тогда
		Параметры.МассивОшибок.Добавить(
			ОписаниеОшибкиПроверкиИзмененияПолейПоСостоянию(
				Параметры.СтрокаРеквизитОбъекта, Параметры.ТекущееСостояние));
	КонецЕсли;
	
КонецПроцедуры

// Процедура для проверки доступности получателя по текущему состоянию заявки на оплату.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПроверитьДоступностьПоСостоянию_ПолучательВЗаявкеНаОплату(Параметры) Экспорт
	
	СтруктураПоиска = Новый Структура("Наименование", Справочники.НаименованияСторон.Получатель);
	
	СтрокиПолучатель = Параметры.Документ.Стороны.НайтиСтроки(СтруктураПоиска);
	Получатель = Неопределено;
	Если СтрокиПолучатель.Количество() > 0 Тогда
		Получатель = СтрокиПолучатель[0].Сторона;
	КонецЕсли;
	
	СтрокиПолучательИБ = Параметры.ДокументИБ.Стороны.НайтиСтроки(СтруктураПоиска);
	ПолучательИБ = Неопределено;
	Если СтрокиПолучательИБ.Количество() > 0 Тогда
		ПолучательИБ = СтрокиПолучательИБ[0].Сторона;
	КонецЕсли;
	
	Если Получатель <> ПолучательИБ Тогда
		Параметры.МассивОшибок.Добавить(
			ОписаниеОшибкиПроверкиИзмененияПолейПоСостоянию(
				Параметры.СтрокаРеквизитОбъекта, Параметры.ТекущееСостояние));
	КонецЕсли;
	
КонецПроцедуры

// Процедура для проверки доступности связей по текущему состоянию документа ДО.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПроверитьДоступностьПоСостоянию_Связи(Параметры) Экспорт
	
	Если Не Параметры.Документ.ДополнительныеСвойства.Свойство("Связи") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = Параметры.СтрокаРеквизитОбъекта.Имя;
	
	ТипСвязи = Неопределено;
	Если ИмяРеквизита = "АвансовыйОтчет" Тогда
		ТипСвязи = Справочники.ТипыСвязей.АвансовыйОтчет;
		
	ИначеЕсли ИмяРеквизита = "ПредметПереписки" Тогда
		ТипСвязи = Справочники.ТипыСвязей.ПредметПереписки;
		
	ИначеЕсли ИмяРеквизита = "ПолученВОтветНа" Тогда
		ТипСвязи = Справочники.ТипыСвязей.ПолученВОтветНа;
		
	ИначеЕсли ИмяРеквизита = "ОтправленВОтветНа" Тогда
		ТипСвязи = Справочники.ТипыСвязей.ОтправленВОтветНа;
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип связи ""%1""'"), ИмяРеквизита);
		
	КонецЕсли;
	
	СвязанныйОбъект = Неопределено;
	Для Каждого СтрокаСвязи Из Параметры.Документ.ДополнительныеСвойства.Связи Цикл
		Если СтрокаСвязи.ТипСвязи = ТипСвязи Тогда
			СвязанныйОбъект = СтрокаСвязи.СвязанныйОбъект;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СвязанныйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеСвязанныеОбъекты = СвязиОбъектов.ПолучитьСвязанныеОбъекты(Параметры.Документ.Ссылка, ТипСвязи);
	Если ТекущиеСвязанныеОбъекты.Количество() = 1
			И ТекущиеСвязанныеОбъекты[0] = СвязанныйОбъект Тогда
		// связь не изменилась
		Возврат;
	КонецЕсли;
	
	Параметры.МассивОшибок.Добавить(
		ОписаниеОшибкиПроверкиИзмененияПолейПоСостоянию(
			Параметры.СтрокаРеквизитОбъекта, Параметры.ТекущееСостояние));
	
КонецПроцедуры

// Процедура для проверки доступности статей ДДС по текущему состоянию документа ДО.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПроверитьДоступностьПоСостоянию_СтатьиДДС(Параметры) Экспорт
	
	Если Не Параметры.Документ.ДополнительныеСвойства.Свойство("СтатьиДвиженияДенежныхСредств") Тогда
		Возврат;
	КонецЕсли;
	
	СтатьиДвиженияДенежныхСредствИБ = ТаблицаСтатьиДвиженияДенежныхСредств();
	РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
		Параметры.Документ.Ссылка,
		СтатьиДвиженияДенежныхСредствИБ);
	
	КоллекцииИдентичны = ОбщегоНазначения.КоллекцииИдентичны(
		СтатьиДвиженияДенежныхСредствИБ,
		Параметры.Документ.ДополнительныеСвойства.СтатьиДвиженияДенежныхСредств);
	Если Не КоллекцииИдентичны Тогда
		Параметры.МассивОшибок.Добавить(
			ОписаниеОшибкиПроверкиИзмененияПолейПоСостоянию(
				Параметры.СтрокаРеквизитОбъекта, Параметры.ТекущееСостояние));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру данных документа, необходимую для формирования обзора на документ.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия - исходный документ.
//
// Возвращаемое значение:
//   Структура:
//     * Объект
//     * ВидДокументаКэш - См. Делопроизводство.НовыйКэшВидаДокумента
//     * НеПоказыватьДанныеОбработки
//     * УчитыватьНДС
//     * НесколькоКонтрагентов
//     * КомуПереданДокумент
//     * СостояниеТекст
//     * ИсходящийНомер
//     * ИсходящаяДата
//     * СпособПолучения
//     * ВидОбращения
//     * АдресатВходящейКорреспонденции
//     * КонтактноеЛицоПереадресовавшего
//     * Переадресовавший
//     * СрокОтветаПереадресовавшему
//     * ТребуетсяОтветПереадресовавшему
//     * Повторное
//     * Дубликат
//     * ПервичноеОбращение
//     * ОсновноеОбращение
//     * ВходящийНомер
//     * ВходящаяДата
//     * Отправлен
//     * ДатаОтправки
//     * СпособОтправки
//     * ВопросыОбращения
//     * ГотовоКВыгрузкеССТУ
//     * СтруктураСостоянияДела
//     * Свойства_ОписаниеДополнительныхРеквизитов
//     * Свойства_ИспользоватьСвойства
//     * Свойства_ОписаниеЗависимыхДополнительныхРеквизитов
//     * ОригиналПолучен
//     * ОригиналПолученТекст
//     * СтатьиДвиженияДенежныхСредств
//     * СрокДействияСтрока
//     * СписокВОтветНа
//     * УтверждениеТекст
//     * ПодписьТекст
//     * РегламентированныйУчетОбращений - Булево
//     * СвязанныеДокументыПоВопросам - См. НовыйТаблицаСвязанныеДокументыПоВопросам
//     * Раздел - СправочникСсылка.РазделыОбращений
//     * Вопрос - СправочникСсылка.ВопросыОбращений
//     * Тематика - СправочникСсылка.ТематикиОбращений
//     * Тема - СправочникСсылка.ТемыОбращений
//     * ОрганДляПередачи - СправочникСсылка.Контрагенты
//     * РезультатРассмотрения - ПеречислениеСсылка.РезультатыРассмотренияОбращений
//     * СопроводительныйДокумент - СправочникСсылка.ДокументыПредприятия
//     * СопроводительныйДокументСтрока - Строка
//     * ОтветныйДокумент - СправочникСсылка.ДокументыПредприятия
//     * ДатаОтвета - Дата
//     * КодВопроса - Строка
//     * МнениеАвтораОРезультатах - Строка
//     * МнениеАвтораОМерах - Строка
//     * НесколькоВопросов - Булево
//     * КоличествоВопросовОбращения - Число
//
Функция ДанныеДокументаДляФормированияОбзора(Документ) Экспорт
	
	КэшВидаДокумента = Делопроизводство.КэшВидаДокумента(Документ.ВидДокумента);
	
	Данные = Новый Структура;
	Данные.Вставить("Объект", Документ);
	Данные.Вставить("ВидДокументаКэш", КэшВидаДокумента);
	Данные.Вставить("НеПоказыватьДанныеОбработки", Ложь);
	Данные.Вставить("УчитыватьНДС", Делопроизводство.УчитыватьНДС(Документ.Организация));
	Данные.Вставить("НесколькоКонтрагентов", (Документ.Контрагенты.Количество() > 1));
	Данные.Вставить("КомуПереданДокумент", Делопроизводство.СтрокаКомуПереданДокумент(Документ.Ссылка));
	Данные.Вставить("СостояниеТекст", Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Документ.Ссылка));
	Данные.Вставить("ИсходящийНомер", Неопределено);
	Данные.Вставить("ИсходящаяДата", Неопределено);
	Данные.Вставить("СпособПолучения", Неопределено);
	Данные.Вставить("ВидОбращения", Неопределено);
	Данные.Вставить("АдресатВходящейКорреспонденции", Неопределено);
	Данные.Вставить("КонтактноеЛицоПереадресовавшего", Неопределено);
	Данные.Вставить("Переадресовавший", Неопределено);
	Данные.Вставить("СрокОтветаПереадресовавшему", Неопределено);
	Данные.Вставить("ТребуетсяОтветПереадресовавшему", Неопределено);
	Данные.Вставить("Повторное", Неопределено);
	Данные.Вставить("Дубликат", Неопределено);
	Данные.Вставить("ПервичноеОбращение", Неопределено);
	Данные.Вставить("ОсновноеОбращение", Неопределено);
	Данные.Вставить("ВходящийНомер", Неопределено);
	Данные.Вставить("ВходящаяДата", Неопределено);
	Данные.Вставить("Отправлен", Неопределено);
	Данные.Вставить("ДатаОтправки", Неопределено);
	Данные.Вставить("СпособОтправки", Неопределено);
	Данные.Вставить("ВопросыОбращения", ТаблицаВопросыОбращения());
	Данные.Вставить("ГотовоКВыгрузкеССТУ", Ложь);
	Данные.Вставить("СтруктураСостоянияДела",
		РегистрыСведений.СостоянияДелХраненияДокументов.СостояниеДела(Документ.Дело));
	Данные.Вставить("СписокВОтветНа", Новый СписокЗначений);
	Данные.Вставить("УтверждениеТекст", Неопределено);
	Данные.Вставить("ПодписьТекст", Неопределено);
	Данные.Вставить("СостояниеЭДО", "");
	Данные.Вставить("РегламентированныйУчетОбращений", ПолучитьФункциональнуюОпцию("РегламентированныйУчетОбращений"));
	Данные.Вставить("СвязанныеДокументыПоВопросам", НовыйТаблицаСвязанныеДокументыПоВопросам());
	Данные.Вставить("Раздел", Справочники.РазделыОбращений.ПустаяСсылка());
	Данные.Вставить("Вопрос", Справочники.ВопросыОбращений.ПустаяСсылка());
	Данные.Вставить("Тематика", Справочники.ТематикиОбращений.ПустаяСсылка());
	Данные.Вставить("Тема", Справочники.ТемыОбращений.ПустаяСсылка());
	Данные.Вставить("ОрганДляПередачи", Справочники.Контрагенты.ПустаяСсылка());
	Данные.Вставить("РезультатРассмотрения", Перечисления.РезультатыРассмотренияОбращений.ПустаяСсылка());
	Данные.Вставить("СопроводительныйДокумент", Справочники.ДокументыПредприятия.ПустаяСсылка());
	Данные.Вставить("СопроводительныйДокументСтрока", "");
	Данные.Вставить("ОтветныйДокумент", Справочники.ДокументыПредприятия.ПустаяСсылка());
	Данные.Вставить("ОтветныйДокументСтрока", "");
	Данные.Вставить("ДатаОтвета", '00010101');
	Данные.Вставить("КодВопроса", "");
	Данные.Вставить("МнениеАвтораОРезультатах", "");
	Данные.Вставить("МнениеАвтораОМерах", "");
	Данные.Вставить("НесколькоВопросов", Ложь);
	Данные.Вставить("КоличествоВопросовОбращения", 0);
	
	// ОписаниеДополнительныхРеквизитов
	ОбзорОбъектов.ЗаполнитьОписаниеДополнительныхРеквизитов(Документ, Данные);
	
	// СведенияОПолученииОригинала
	Данные.Вставить("ОригиналПолучен", Ложь);
	Данные.Вставить("ОригиналПолученТекст", "");
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(Данные, Ложь);
	
	// СтатьиДвиженияДенежныхСредств
	Данные.Вставить("СтатьиДвиженияДенежныхСредств", ТаблицаСтатьиДвиженияДенежныхСредств());
	РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
		Документ.Ссылка,
		Данные.СтатьиДвиженияДенежныхСредств);
	
	// СрокДействия
	Данные.Вставить("СрокДействияСтрока", "");
	ИсторияСрока = РегистрыСведений.ИсторияСроковДействияДокументов.ИсторияСрокаДействия(Документ.Ссылка);
	Данные.СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
		Документ.Ссылка,
		ИсторияСрока.Комментарий);
	
	Если Не Документ.Ссылка.Пустая() Тогда
		
		// СписокВОтветНа
		Если КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией Тогда
			ТипСвязи = Справочники.ТипыСвязей.ПолученВОтветНа;
		Иначе
			ТипСвязи = Справочники.ТипыСвязей.ОтправленВОтветНа;
		КонецЕсли;
		ДокументыВОтветНа = СвязиОбъектов.ПолучитьСвязанныеОбъекты(
			Документ.Ссылка,
			ТипСвязи);
		РеквизитыДокументовВОтветНа = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ДокументыВОтветНа,
			"РегистрационныйНомер, ДатаРегистрации, Заголовок");
		Для Каждого ДокументВОтветНа Из ДокументыВОтветНа Цикл
			Если ЗначениеЗаполнено(РеквизитыДокументовВОтветНа[ДокументВОтветНа].РегистрационныйНомер) 
					И ЗначениеЗаполнено(РеквизитыДокументовВОтветНа[ДокументВОтветНа].ДатаРегистрации) Тогда
				Представление = СтрШаблон(
					НСтр("ru = '№ %1 от %2'"),
					РеквизитыДокументовВОтветНа[ДокументВОтветНа].РегистрационныйНомер,
					Формат(РеквизитыДокументовВОтветНа[ДокументВОтветНа].ДатаРегистрации, "ДЛФ=D"));
			Иначе
				Представление = РеквизитыДокументовВОтветНа[ДокументВОтветНа].Заголовок;
			КонецЕсли;
			Данные.СписокВОтветНа.Добавить(ДокументВОтветНа, Представление);
		КонецЦикла;
		
		// ПодписьТекст
		Данные.ПодписьТекст = Делопроизводство.ПолучитьСтрокуПодписи(
			Документ.Ссылка,
			Документ.ВидДокумента,
			Новый Структура("ВариантДа, ВариантНет", НСтр("ru = 'Да'"), НСтр("ru = 'Нет'")));
		
		// УтверждениеТекст
		Данные.УтверждениеТекст = Делопроизводство.ПолучитьСтрокуУтверждения(
			Документ.Ссылка,
			Документ.ВидДокумента,
			Новый Структура("ВариантДа, ВариантНет", НСтр("ru = 'Да'"), НСтр("ru = 'Нет'")));
		
	КонецЕсли;
	
	Если КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией
			Или КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией
			Или КэшВидаДокумента.ЯвляетсяОбращениемОтГраждан Тогда
		Документы.Корреспонденция.ЗаполнитьДанныеНаФормеДокумента(Данные);
	КонецЕсли;
	
	ИспользоватьОбменЭД = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
	Если ИспользоватьОбменЭД Тогда
		Данные.СостояниеЭДО = ОбменЭДОДокументооборот.СостояниеДокументаДО(Документ.Ссылка);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Заполняет параметры корреспонденции документа предприятия.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия - заполняемый объект.
//   ПараметрыКорреспонденции - см. ОбработкаЗапросовXDTOДокументы.ПараметрыКорреспонденцииДокумента
//
Процедура ЗаполнитьПараметрыКорреспонденцииИзДокумента(Документ, ПараметрыКорреспонденции) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Корреспонденция.Ссылка КАК Корреспонденция,
		|	Корреспонденция.ВидКорреспонденции КАК ВидКорреспонденции,
		|	Корреспонденция.ДатаКонтрагента КАК ДатаКонтрагента,
		|	Корреспонденция.НомерКонтрагента КАК НомерКонтрагента,
		|	ЛОЖЬ КАК Отправлен,
		|	Корреспонденция.Корреспонденты.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Корреспондент КАК Корреспондент,
		|		Адресат КАК Адресат,
		|		СпособОтправки КАК СпособОтправки,
		|		Отправлен КАК Отправлен,
		|		ДатаОтправки КАК ДатаОтправки,
		|		НомерКонтрагента КАК НомерКонтрагента,
		|		ДатаКонтрагента КАК ДатаКонтрагента
		|	) КАК Корреспонденты,
		|	Корреспонденция.СпособПолучения КАК СпособПолучения,
		|	Корреспонденция.ВопросыОбращения.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Вопрос КАК Вопрос,
		|		ДатаОтвета КАК ДатаОтвета,
		|		КодВопроса КАК КодВопроса,
		|		МнениеАвтораОМерах КАК МнениеАвтораОМерах,
		|		МнениеАвтораОРезультатах КАК МнениеАвтораОРезультатах,
		|		ОрганДляПередачи КАК ОрганДляПередачи,
		|		Раздел КАК Раздел,
		|		РезультатРассмотрения КАК РезультатРассмотрения,
		|		Тема КАК Тема,
		|		Тематика КАК Тематика
		|	) КАК ВопросыОбращения,
		|	Корреспонденция.ВидОбращения КАК ВидОбращения,
		|	Корреспонденция.КонтактноеЛицоПереадресовавшего КАК КонтактноеЛицоПереадресовавшего,
		|	Корреспонденция.Переадресовавший КАК Переадресовавший,
		|	Корреспонденция.СрокОтветаПереадресовавшему КАК СрокОтветаПереадресовавшему,
		|	Корреспонденция.ТребуетсяОтветПереадресовавшему КАК ТребуетсяОтветПереадресовавшему,
		|	Корреспонденция.ЭтоПовторноеОбращение КАК ЭтоПовторноеОбращение,
		|	Корреспонденция.ЭтоДубликатОбращения КАК ЭтоДубликатОбращения,
		|	Корреспонденция.ОсновноеОбращение КАК ОсновноеОбращение,
		|	Корреспонденция.ГотовоКВыгрузкеССТУ КАК ГотовоКВыгрузкеССТУ,
		|	Корреспонденция.ПервичноеОбращение КАК ПервичноеОбращение
		|ИЗ
		|	Документ.Корреспонденция КАК Корреспонденция
		|ГДЕ
		|	Корреспонденция.Основание = &Основание");
	Запрос.Параметры.Вставить("Основание", Документ.Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидКорреспонденции = Перечисления.ВидыКорреспонденции.Входящая Тогда
			
			ПараметрыКорреспонденции.ИсходящийНомер = Выборка.НомерКонтрагента;
			ПараметрыКорреспонденции.ИсходящаяДата = Выборка.ДатаКонтрагента;
			
			ЗаполнитьЗначенияСвойств(ПараметрыКорреспонденции, Выборка,,"ВопросыОбращения");
			
			ВыборкаКорреспонденты = Выборка.Корреспонденты.Выбрать();
			Пока ВыборкаКорреспонденты.Следующий() Цикл
				ПараметрыКорреспонденции.АдресатВходящейКорреспонденции = ВыборкаКорреспонденты.Адресат;
			КонецЦикла;
			
			ВыборкаВопросыОбращения = Выборка.ВопросыОбращения.Выбрать();
			ПараметрыКорреспонденции.ВопросыОбращения.Очистить();
			Пока ВыборкаВопросыОбращения.Следующий() Цикл
				НовСтрока = ПараметрыКорреспонденции.ВопросыОбращения.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаВопросыОбращения);
				НовСтрока.КодВопроса = РаботаСОбращениямиВызовСервера.СформироватьКодВопроса(
					НовСтрока.Раздел,
					НовСтрока.Тематика,
					НовСтрока.Тема,
					НовСтрока.Вопрос);
			КонецЦикла;
			
		Иначе
			
			ПараметрыКорреспонденции.ВходящийНомер = Выборка.НомерКонтрагента;
			ПараметрыКорреспонденции.ВходящаяДата = Выборка.ДатаКонтрагента;
			
			ТЗКорреспонденты = Выборка.Корреспонденты.Выгрузить();
			Для Каждого СтрКонтрагент Из ПараметрыКорреспонденции.Контрагенты Цикл
				СтрНайтиКорреспондента = ТЗКорреспонденты.НайтиСтроки(
					Новый Структура("Корреспондент", СтрКонтрагент.Контрагент));
				Если СтрНайтиКорреспондента.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрКонтрагент, СтрНайтиКорреспондента[0]);
				
				СтрКонтрагент.ВходящийНомер = СтрНайтиКорреспондента[0].НомерКонтрагента;
				СтрКонтрагент.ВходящаяДата = СтрНайтиКорреспондента[0].ДатаКонтрагента;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет дополнительную обработку Документа после записи.
//
// Параметры:
//   ОбъектДО - СправочникОбъект.ДокументыПредприятия - объект Документооборота, источник данных:
//     * ДополнительныеСвойства - Структура:
//       ** ЭтоНовый - Булево
//       ** Модифицированность - Булево
//       ** ТекущаяДата - Дата
//       ** ТекущийПользователь - СправочникСсылка.Пользователи
//       ** ОсновнойСотрудникТекущегоПользователя - СправочникСсылка.Сотрудники
//       ** НачальныйРегистрационныйНомер - Строка
//       ** ЗаполнятьПоШаблону - Булево
//       ** СрокДействияИзменен - Булево
//       ** КэшВидаДокумента - см. Делопроизводство.КэшВидаДокумента
//       ** ПараметрыКорреспонденции - см. ОбработкаЗапросовXDTOДокументы.ПараметрыКорреспонденцииДокумента
//       ** Связи - ТаблицаЗначений:
//         *** СвязанныйОбъект - СправочникСсылка.ДокументыПредприятия
//         *** ТипСвязи - СправочникСсылка.ТипыСвязей
//   ИсточникДанных - Структура - источник данных:
//     * ТипИсточника - Строка - принимает значения "ОбъектXDTO" или "ВходящиеДанные", в зависимости от типа источника.
//     * ОбъектXDTO - ОбъектXDTO - объект XDTO, потомок DMObject. Источник данных.
//     * ТипXDTOОбъекта - Строка - имя типа XDTO объекта, из которого требуется заполнить объект ДО.
//     * ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//     * ПравилоЗагрузки - СправочникОбъект.ПравилаЗагрузкиДанныхВДО - правило загрузки.
//     * Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//
Процедура ОбработатьДокументПослеЗаписи(ОбъектДО, ИсточникДанных) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектДО.ДополнительныеСвойства.ОсновнойСотрудникТекущегоПользователя) Тогда
		ТекущийПользователь = ОбъектДО.ДополнительныеСвойства.ОсновнойСотрудникТекущегоПользователя;
	Иначе
		ТекущийПользователь = ОбъектДО.ДополнительныеСвойства.ТекущийПользователь;
	КонецЕсли;
	
	КоличествоИзмененныхСостояний = 0;
	
	Если ОбъектДО.ДополнительныеСвойства.Свойство("ЭтоНовый") И ОбъектДО.ДополнительныеСвойства.ЭтоНовый Тогда
		Делопроизводство.ЗаписатьСостояниеДокумента(
			ОбъектДО.Ссылка,
			ОбъектДО.ДополнительныеСвойства.ТекущаяДата + КоличествоИзмененныхСостояний,
			Перечисления.СостоянияДокументов.Проект,
			ТекущийПользователь);
		КоличествоИзмененныхСостояний = КоличествоИзмененныхСостояний + 1;
	КонецЕсли;
	
	Если ИсточникДанных.ТипИсточника = "ОбъектXDTO" Тогда
		// Состояние.
		ЗаполнитьСостоянияДокумента(
			ОбъектДО,
			ИсточникДанных.ОбъектXDTO,
			ОбъектДО.ДополнительныеСвойства.ТекущаяДата,
			ТекущийПользователь,
			КоличествоИзмененныхСостояний);
	КонецЕсли;
	
	// Регистрация.
	Если ЗначениеЗаполнено(ОбъектДО.РегистрационныйНомер)
			И Не ЗначениеЗаполнено(ОбъектДО.ДополнительныеСвойства.НачальныйРегистрационныйНомер) Тогда
		Делопроизводство.ЗаписатьСостояниеДокумента(
			ОбъектДО.Ссылка,
			ОбъектДО.ДополнительныеСвойства.ТекущаяДата + КоличествоИзмененныхСостояний,
			Перечисления.СостоянияДокументов.Зарегистрирован,
			ТекущийПользователь);
		КоличествоИзмененныхСостояний = КоличествоИзмененныхСостояний + 1;
	КонецЕсли;
	
	Если ОбъектДО.ДополнительныеСвойства.ЗаполнятьПоШаблону Тогда
		// Заполним рабочую группу.
		ЗаписатьРабочуюГруппуСогласноШаблону(ОбъектДО);
		
		// Создадим файлы из шаблона.
		ФайлыШаблона = ФайлыШаблона();
		ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(
			ОбъектДО.Шаблон,
			ФайлыШаблона,
			Истина,
			ОбъектДО);
		
		ШаблоныДокументов.ПрименитьУсловияДобавленияФайлов(ОбъектДО.Ссылка, ФайлыШаблона);
		
		Для Каждого ФайлШаблона Из ФайлыШаблона Цикл
			ФайлИзШаблона = ОбработкаЗапросовXDTOФайлы.СоздатьФайлИзШаблона(
				ОбъектДО.Ссылка,
				ФайлШаблона.ШаблонОснованиеДляСоздания,
				ФайлШаблона.ШаблонОснованиеДляСоздания.Наименование,
				ФайлШаблона.РольФайла);
			Если ОбработкаЗапросовXDTO.ПроверитьТип(ФайлИзШаблона, "DMError") Тогда
				ВызватьИсключение ФайлИзШаблона.description;
			КонецЕсли;
		КонецЦикла;
		
		РаботаСФайламиВызовСервера.ПереименоватьФайлыПоШаблону(
			Новый Структура("Ссылка, ПытатьсяПереименоватьДальше", ОбъектДО.Ссылка, Истина),
			Неопределено);
	КонецЕсли;
	
	// Срок действия.
	Если (ОбъектДО.ДополнительныеСвойства.Свойство("ЭтоНовый")
				И ОбъектДО.ДополнительныеСвойства.ЭтоНовый
				И СрокДействияЗаполнен(ОбъектДО))
			Или ОбъектДО.ДополнительныеСвойства.СрокДействияИзменен Тогда
		
		Запись = РегистрыСведений.ИсторияСроковДействияДокументов.НоваяЗапись();
		Запись.Документ = ОбъектДО.Ссылка;
		Запись.ДатаНачалаДействия = ОбъектДО.ДатаНачалаДействия;
		Запись.ДатаОкончанияДействия = ОбъектДО.ДатаОкончанияДействия;
		Запись.Бессрочный = ОбъектДО.Бессрочный;
		Запись.ПорядокПродления = ОбъектДО.ПорядокПродления;
		Запись.ДокументИсточникИзменения = Неопределено;
		Запись.Комментарий = Неопределено;
		РегистрыСведений.ИсторияСроковДействияДокументов.ДобавитьЗапись(Запись);
		
	КонецЕсли;
	
	ПодписанУтвержден = Делопроизводство.СтрокаПодписалУтвердил(ОбъектДО);
	Если ПодписанУтвержден <> ОбъектДО.ПодписанУтвержден Тогда
		ОбъектДО.ПодписанУтвержден = ПодписанУтвержден;
		ОбъектДО.Записать();
	КонецЕсли;
	
	// Нумерация.
	Если ЗначениеЗаполнено(Нумерация.ПолучитьНумераторДокумента(ОбъектДО, Ложь))
			И ОбъектДО.РегистрационныйНомер <> ОбъектДО.ДополнительныеСвойства.НачальныйРегистрационныйНомер Тогда
		// Изменен автоматический номер.
		ОбъектДО.ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
		ОбъектДО.ЧисловойНомер = -1;
		ОбъектДО.Записать();
	КонецЕсли;
	
	// Связи.
	Если ОбъектДО.ДополнительныеСвойства.Свойство("Связи") Тогда
		Для Каждого СтрокаСвязь Из ОбъектДО.ДополнительныеСвойства.Связи Цикл
			ТекущиеСвязанныеОбъекты = СвязиОбъектов.ПолучитьСвязанныеОбъекты(ОбъектДО.Ссылка, СтрокаСвязь.ТипСвязи);
			Если ТекущиеСвязанныеОбъекты.Количество() = 1
					И ТекущиеСвязанныеОбъекты[0] = СтрокаСвязь.СвязанныйОбъект Тогда
				// Связь уже есть.
				Продолжить;
			Иначе
				Для Каждого ТекущийСвязанныйОбъект Из ТекущиеСвязанныеОбъекты Цикл
					СвязиОбъектов.УдалитьСвязь(ОбъектДО.Ссылка, ТекущийСвязанныйОбъект, СтрокаСвязь.ТипСвязи);
				КонецЦикла;
			КонецЕсли;
			
			СвязиОбъектов.СоздатьСвязь(ОбъектДО.Ссылка, СтрокаСвязь.СвязанныйОбъект, СтрокаСвязь.ТипСвязи);
		КонецЦикла;
	КонецЕсли;
	
	Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ОбъектДО.Ссылка);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		// Создадим обработку и заполним по ПОД.
		Обработка = Справочники.ОбработкиОбъектов.НоваяОбработкаОбъекта(ОбъектДО.Ссылка);
		// Заполняем по ПОД.
		ПравилаОбработкиСервер.ЗаполнитьДействияПрограммно(
			ОбъектДО.Ссылка,
			Сотрудники.ОсновнойСотрудникПользователя(
				?(ЗначениеЗаполнено(ОбъектДО.Ответственный),
					ОбъектДО.Ответственный,
					"ТекущийПользователь")));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак использования ограничений доступности полей документа по состоянию.
//
// Возвращаемое значение:
//   Булево
//
Функция ОграничиватьДоступностьПолейДокументаПоСостоянию() Экспорт
	
	Возврат Не РольДоступна("ПолныеПрава")
		И Константы.ИспользоватьСостоянияДокументов.Получить()
		И Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить();
	
КонецФункции

// Конструктор структуры, описывающей параметры корреспонденции документа.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия - источник данных.
//   КэшВидаДокумента - см. Делопроизводство.КэшВидаДокумента
//
// Возвращаемое значение:
//   Структура:
//     * Ссылка - СправочникСсылка.ДокументыПредприятия
//     * СрокИсполнения - Дата
//     * Контрагент - СправочникСсылка.Контрагенты
//     * ВидДокументаКэш - Структура
//     * ИсходящийНомер - Строка
//     * ИсходящаяДата - Дата
//     * СпособПолучения - СправочникСсылка.СпособыДоставки
//     * ВидОбращения - ПеречислениеСсылка.ВидыОбращенийГраждан
//     * АдресатВходящейКорреспонденции - СправочникСсылка.Сотрудники
//     * ВходящийНомер - Строка
//     * ВходящаяДата - Дата
//     * КонтактноеЛицоПереадресовавшего - СправочникСсылка.КонтактныеЛица
//     * Переадресовавший - СправочникСсылка.Контрагенты
//     * СрокОтветаПереадресовавшему - Дата
//     * ТребуетсяОтветПереадресовавшему - Булево
//     * ЭтоПовторноеОбращение - Булево
//     * ПервичноеОбращение - СправочникСсылка.ДокументыПредприятия
//     * ЭтоДубликатОбращения - Булево
//     * ОсновноеОбращение - СправочникСсылка.ДокументыПредприятия
//     * ГотовоКВыгрузкеССТУ - Булево -
//     * ВопросыОбращения - ТаблицаЗначений:
//       ** Вопрос - СправочникСсылка.ВопросыОбращений
//       ** ДатаОтвета - Дата
//       ** Документ - СправочникСсылка.ДокументыПредприятия
//       ** КодВопроса - Строка
//       ** МнениеАвтораОМерах - Строка
//       ** МнениеАвтораОРезультатах - Строка
//       ** ОрганДляПередачи - СправочникСсылка.Контрагенты
//       ** ОтветныйДокумент - СправочникСсылка.ДокументыПредприятия
//       ** ОтветныйДокументСтрока - Строка
//       ** Раздел - СправочникСсылка.РазделыОбращений
//       ** РезультатРассмотрения - ПеречислениеСсылка.РезультатыРассмотренияОбращений
//       ** СопроводительныйДокумент - СправочникСсылка.ДокументыПредприятия
//       ** СопроводительныйДокументСтрока - Строка
//       ** Тема - СправочникСсылка.ТемыОбращений
//       ** Тематика - СправочникСсылка.ТематикиОбращений
//     * Контрагенты - ТаблицаЗначений:
//       ** ВходящаяДата - Дата
//       ** ВходящийНомер - Строка
//       ** ДатаОтправки - Дата
//       ** ИндексыСПАРКРиски - см. СПАРКРиски.ИндексыСПАРККонтрагента
//       ** КонтактноеЛицо - СправочникСсылка.КонтактныеЛица
//       ** Контрагент - СправочникСсылка.Контрагенты
//       ** Отправлен - Булево
//       ** ПодписалОтКонтрагента - СправочникСсылка.КонтактныеЛица
//       ** СводныйИндикатор - Число
//       ** Состояние - ПеречислениеСсылка.СостоянияСправкиСПАРКРиски
//       ** СпособОтправки - СправочникСсылка.СпособыДоставки
//       ** ЭтоНекорректныйКонтрагент - Булево
//
Функция ПараметрыКорреспонденцииДокумента(Документ, КэшВидаДокумента) Экспорт
	
	ПараметрыКорреспонденции = Новый Структура;
	ПараметрыКорреспонденции.Вставить("Ссылка", Документ.Ссылка);
	ПараметрыКорреспонденции.Вставить("СрокИсполнения", Документ.СрокИсполнения);
	ПараметрыКорреспонденции.Вставить("Контрагент", Документ.Контрагент);
	ПараметрыКорреспонденции.Вставить("ВидДокументаКэш", КэшВидаДокумента);
	ПараметрыКорреспонденции.Вставить("ИсходящийНомер", Неопределено);
	ПараметрыКорреспонденции.Вставить("ИсходящаяДата", Неопределено);
	ПараметрыКорреспонденции.Вставить("СпособПолучения", Неопределено);
	ПараметрыКорреспонденции.Вставить("ВидОбращения", Неопределено);
	ПараметрыКорреспонденции.Вставить("АдресатВходящейКорреспонденции", Неопределено);
	ПараметрыКорреспонденции.Вставить("ВходящийНомер", Неопределено);
	ПараметрыКорреспонденции.Вставить("ВходящаяДата", Неопределено);
	ПараметрыКорреспонденции.Вставить("КонтактноеЛицоПереадресовавшего", Неопределено);
	ПараметрыКорреспонденции.Вставить("Переадресовавший", Неопределено);
	ПараметрыКорреспонденции.Вставить("СрокОтветаПереадресовавшему", Неопределено);
	ПараметрыКорреспонденции.Вставить("ТребуетсяОтветПереадресовавшему", Неопределено);
	ПараметрыКорреспонденции.Вставить("ЭтоПовторноеОбращение", Неопределено);
	ПараметрыКорреспонденции.Вставить("ПервичноеОбращение", Неопределено);
	ПараметрыКорреспонденции.Вставить("ЭтоДубликатОбращения", Неопределено);
	ПараметрыКорреспонденции.Вставить("ОсновноеОбращение", Неопределено);
	ПараметрыКорреспонденции.Вставить("ГотовоКВыгрузкеССТУ", Ложь);
	
	ПараметрыКорреспонденции.Вставить("ВопросыОбращения", Новый ТаблицаЗначений);
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("Вопрос");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("ДатаОтвета");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("Документ");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("КодВопроса");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("МнениеАвтораОМерах");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("МнениеАвтораОРезультатах");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("ОрганДляПередачи");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("ОтветныйДокумент");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("ОтветныйДокументСтрока");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("Раздел");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("РезультатРассмотрения");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("СопроводительныйДокумент");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("СопроводительныйДокументСтрока");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("Тема");
	ПараметрыКорреспонденции.ВопросыОбращения.Колонки.Добавить("Тематика");
	
	ПараметрыКорреспонденции.Вставить("Контрагенты", Новый ТаблицаЗначений);
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("ВходящаяДата");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("ВходящийНомер");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("ДатаОтправки");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("ИндексыСПАРКРиски");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("ИнформацияСпаркРиски");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("КонтактноеЛицо");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("Контрагент");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("Отправлен");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("ПодписалОтКонтрагента");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("СводныйИндикатор");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("Состояние");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("СпособОтправки");
	ПараметрыКорреспонденции.Контрагенты.Колонки.Добавить("ЭтоНекорректныйКонтрагент");
	
	Для Каждого СтрокаКонтрагент Из Документ.Контрагенты Цикл
		НоваяСтрока = ПараметрыКорреспонденции.Контрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтрагент);
	КонецЦикла;
	
	Возврат ПараметрыКорреспонденции;
	
КонецФункции

// Получает массив вложенных папок.
//
// Параметры:
//   ИдентификаторКорневойПапки - Строка - идентификатор папки-родителя.
//
// Возвращаемое значение:
//   Массив из Структура - описывает вложенные папки:
//     * УникальныйИдентификатор - Строка - идентификатор вложенной папки
//     * Наименование - Строка - наименование вложенной папки
//
Функция ПолучитьСписокПапок(ИдентификаторКорневойПапки) Экспорт
	
	СсылкаПапки = Справочники.ПапкиДокументов.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(ИдентификаторКорневойПапки) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторКорневойПапки);
		СсылкаПапки = Справочники.ПапкиДокументов.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиДокументов.Ссылка КАК Ссылка,
		|	ПапкиДокументов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПапкиДокументов КАК ПапкиДокументов
		|ГДЕ
		|	ПапкиДокументов.Родитель = &Ссылка
		|	И ПапкиДокументов.ПометкаУдаления = &ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаПапки);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	МассивПапок = Новый Массив;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПапки = Новый Структура("УникальныйИдентификатор, Наименование",
			Выборка.Ссылка.УникальныйИдентификатор(), Выборка.Наименование);
		МассивПапок.Добавить(СтруктураПапки);
	КонецЦикла;
	
	Возврат МассивПапок;
	
КонецФункции

// Конструктор таблицы значений для заполнения вопросов обращения.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Вопрос - СправочникСсылка.ВопросыОбращений
//     * ДатаОтвета - Дата
//     * Документ - Строка
//     * КодВопроса - Строка
//     * МнениеАвтораОМерах - Строка
//     * МнениеАвтораОРезультатах - Строка
//     * ОрганДляПередачи - СправочникСсылка.КонтактныеЛица
//     * ОтветныйДокумент - СправочникСсылка.ДокументыПредприятия
//     * ОтветныйДокументСтрока - Строка
//     * Раздел - СправочникСсылка.РазделыОбращений
//     * РезультатРассмотрения - ПеречислениеСсылка.РезультатыРассмотренияОбращений
//     * СопроводительныйДокумент - СправочникСсылка.ДокументыПредприятия
//     * СопроводительныйДокументСтрока - Строка
//     * Тема - СправочникСсылка.ТемыОбращений
//     * Тематика - СправочникСсылка.ТематикиОбращений
//
Функция ТаблицаВопросыОбращения() Экспорт
	
	ВопросыОбращения = Новый ТаблицаЗначений();
	ВопросыОбращения.Колонки.Добавить("Вопрос", Новый ОписаниеТипов(
		"СправочникСсылка.ВопросыОбращений"));
	ВопросыОбращения.Колонки.Добавить("ДатаОтвета", Новый ОписаниеТипов("Дата"));
	ВопросыОбращения.Колонки.Добавить("Документ", Новый ОписаниеТипов("Строка"));
	ВопросыОбращения.Колонки.Добавить("КодВопроса", Новый ОписаниеТипов("Строка"));
	ВопросыОбращения.Колонки.Добавить("МнениеАвтораОМерах", Новый ОписаниеТипов("Строка"));
	ВопросыОбращения.Колонки.Добавить("МнениеАвтораОРезультатах", Новый ОписаниеТипов("Строка"));
	ВопросыОбращения.Колонки.Добавить("ОрганДляПередачи", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ВопросыОбращения.Колонки.Добавить("ОтветныйДокумент", Новый ОписаниеТипов("СправочникСсылка.ДокументыПредприятия"));
	ВопросыОбращения.Колонки.Добавить("ОтветныйДокументСтрока", Новый ОписаниеТипов("Строка"));
	ВопросыОбращения.Колонки.Добавить("Раздел", Новый ОписаниеТипов("СправочникСсылка.РазделыОбращений"));
	ВопросыОбращения.Колонки.Добавить("РезультатРассмотрения", Новый ОписаниеТипов(
		"ПеречислениеСсылка.РезультатыРассмотренияОбращений"));
	ВопросыОбращения.Колонки.Добавить("СопроводительныйДокумент", Новый ОписаниеТипов(
		"СправочникСсылка.ДокументыПредприятия"));
	ВопросыОбращения.Колонки.Добавить("СопроводительныйДокументСтрока", Новый ОписаниеТипов("Строка"));
	ВопросыОбращения.Колонки.Добавить("Тема", Новый ОписаниеТипов("СправочникСсылка.ТемыОбращений"));
	ВопросыОбращения.Колонки.Добавить("Тематика", Новый ОписаниеТипов("СправочникСсылка.ТематикиОбращений"));
	
	Возврат ВопросыОбращения;
	
КонецФункции

// Конструктор таблицы значений для заполнения статей ДДС.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств
//     * Сумма - Число
//     * СуммаНДС - Число
//
Функция ТаблицаСтатьиДвиженияДенежныхСредств() Экспорт
	
	СтатьиДвиженияДенежныхСредств = Новый ТаблицаЗначений;
	СтатьиДвиженияДенежныхСредств.Колонки.Добавить("СтатьяДвиженияДенежныхСредств", Новый ОписаниеТипов(
		"СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	СтатьиДвиженияДенежныхСредств.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	СтатьиДвиженияДенежныхСредств.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	
	Возврат СтатьиДвиженияДенежныхСредств;
	
КонецФункции

// Проверяет изменен ли срок действия документа предприятия.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия - проверяемый объект.
//
// Возвращаемое значение:
//   Булево
//
Функция СрокДействияИзменен(Документ) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Бессрочный КАК Бессрочный,
		|	ДокументыПредприятия.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ДокументыПредприятия.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ДокументыПредприятия.ПорядокПродления КАК ПорядокПродления
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Документ.Бессрочный <> Выборка.Бессрочный
		Или Документ.ДатаНачалаДействия <> Выборка.ДатаНачалаДействия
		Или Документ.ДатаОкончанияДействия <> Выборка.ДатаОкончанияДействия
		Или Документ.ПорядокПродления <> Выборка.ПорядокПродления;
	
КонецФункции

#КонецОбласти

#Область Мероприятие

#Область ОбщиеМетодыМероприятия

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Мероприятие - СправочникОбъект.Мероприятия
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeeting.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - система, для которой предназначен объект.
//   ТолькоОсновныеРеквизиты - Булево - объект XDTO будет заполнен всеми реквизитами объекта ДО, без дополнительных
//     запросов к базе.
//
Процедура ПолучитьДанныеМероприятия(Мероприятие, ОбъектXDTO, НаборКолонок = Неопределено,
		ИнтегрированнаяСистема = Неопределено, ТолькоОсновныеРеквизиты = Ложь) Экспорт
	
	ДоступенФункционалФайлов = (ИнтегрированнаяСистема = Неопределено)
		Или РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(ИнтегрированнаяСистема, "3.0.2.1");
	
	ДанныеМероприятия = Новый Структура;
	
	// Настройки.
	Если Не ТолькоОсновныеРеквизиты Тогда
		ПолучитьОбщиеНастройкиМероприятия(ДанныеМероприятия);
	КонецЕсли;
	
	ДанныеМероприятия.Вставить("type", Мероприятие.ВидМероприятия);
	ДанныеМероприятия.Вставить("folder", Мероприятие.Папка);
	ДанныеМероприятия.Вставить("description", Мероприятие.Описание);
	ДанныеМероприятия.Вставить("startDate",
		?(ЗначениеЗаполнено( Мероприятие.ДатаНачалаФакт),
			Мероприятие.ДатаНачалаФакт,
			Мероприятие.ДатаНачала));
	ДанныеМероприятия.Вставить("endDate",
		?(ЗначениеЗаполнено( Мероприятие.ДатаОкончанияФакт),
			Мероприятие.ДатаОкончанияФакт,
			Мероприятие.ДатаОкончания));
	ДанныеМероприятия.Вставить("place", Мероприятие.МестоПроведения);
	ДанныеМероприятия.Вставить("accessLevel", Мероприятие.ГрифДоступа);
	ДанныеМероприятия.Вставить("organization", Мероприятие.Организация);
	ДанныеМероприятия.Вставить("project", Мероприятие.Проект);
	ДанныеМероприятия.Вставить("calledBy", Мероприятие.Организатор);
	
	Если ТипЗнч(Мероприятие.Председатель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие.Председатель,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеМероприятия.Вставить("chairPerson", РеквизитыРоли.Владелец);
		ДанныеМероприятия.Вставить("chairPersonMainAddressingObject", РеквизитыРоли.ОсновнойОбъектАдресации);
		ДанныеМероприятия.Вставить("chairPersonSecondaryAddressingObject", РеквизитыРоли.ДополнительныйОбъектАдресации);
	Иначе
		ДанныеМероприятия.Вставить("chairPerson", Мероприятие.Председатель);
		ДанныеМероприятия.Вставить("chairPersonMainAddressingObject", Неопределено);
		ДанныеМероприятия.Вставить("chairPersonSecondaryAddressingObject", Неопределено);
	КонецЕсли;
	
	Если ТипЗнч(Мероприятие.Секретарь) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие.Секретарь,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеМероприятия.Вставить("secretary", РеквизитыРоли.Владелец);
		ДанныеМероприятия.Вставить("secretaryMainAddressingObject", РеквизитыРоли.ОсновнойОбъектАдресации);
		ДанныеМероприятия.Вставить("secretarySecondaryAddressingObject", РеквизитыРоли.ДополнительныйОбъектАдресации);
	Иначе
		ДанныеМероприятия.Вставить("secretary", Мероприятие.Секретарь);
		ДанныеМероприятия.Вставить("secretaryMainAddressingObject", Неопределено);
		ДанныеМероприятия.Вставить("secretarySecondaryAddressingObject", Неопределено);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		Мероприятие,
		ДанныеМероприятия,
		ОбъектXDTO,
		НаборКолонок,,
		Не ТолькоОсновныеРеквизиты);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Колонки.Добавить(НРег(ИмяКолонки));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(
			Мероприятие,
			ОбъектXDTO,
			ТолькоОсновныеРеквизиты);
	КонецЕсли;
	
	Если ТолькоОсновныеРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	// Получим состояния.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("statuses")) <> Неопределено Тогда
		
		Состояния = УправлениеМероприятиями.ПолучитьВсеСостоянияМероприятия(Мероприятие.Ссылка);
		Для Каждого Состояние Из Состояния Цикл
			ОбъектXDTO.statuses.Добавить(ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Состояние));
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим программу.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("agenda")) <> Неопределено Тогда
		
		Для Каждого ПунктПрограммы Из Мероприятие.Программа Цикл
			
			ПунктПрограммыXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeetingAgendaItem");
			
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ПунктПрограммыXDTO,
				"number",
				ПунктПрограммы.НомерПункта);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ПунктПрограммыXDTO,
				"description",
				ПунктПрограммы.Содержание);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ПунктПрограммыXDTO,
				"comment",
				ПунктПрограммы.Комментарий);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ПунктПрограммыXDTO,
				"decisionIsNecessary",
				ПунктПрограммы.ТребуетПринятияРешения);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ПунктПрограммыXDTO,
				"estimatedDuration",
				ПунктПрограммы.ВремяПлан);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ПунктПрограммыXDTO,
				"duration",
				ПунктПрограммы.ВремяФакт);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ПунктПрограммыXDTO,
				"startDate",
				ПунктПрограммы.Начало);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ПунктПрограммыXDTO,
				"endDate",
				ПунктПрограммы.Окончание);
			
			Если ТипЗнч(ПунктПрограммы.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					ПунктПрограммыXDTO,
					"employee",
					ПунктПрограммы.Исполнитель);
				
			ИначеЕсли ТипЗнч(ПунктПрограммы.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПунктПрограммы.Исполнитель,
					"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					ПунктПрограммыXDTO,
					"role",
					РеквизитыРоли.Владелец);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					ПунктПрограммыXDTO,
					"mainAddressingItem",
					РеквизитыРоли.ОсновнойОбъектАдресации);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					ПунктПрограммыXDTO,
					"secondaryAddressingItem",
					РеквизитыРоли.ДополнительныйОбъектАдресации);
				
			КонецЕсли;
			
			ОбъектXDTO.agenda.Добавить(ПунктПрограммыXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим участников.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("attendees")) <> Неопределено Тогда
		
		СписокУчастников = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие.Ссылка, Истина);
		
		Для Каждого Участник Из СписокУчастников Цикл
			
			УчастникXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeetingAttendee");
			
			Если ТипЗнч(Участник.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					УчастникXDTO,
					"employee",
					Участник.Исполнитель);
				
			ИначеЕсли ТипЗнч(Участник.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Участник.Исполнитель,
					"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					УчастникXDTO,
					"role",
					РеквизитыРоли.Владелец);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					УчастникXDTO,
					"mainAddressingItem",
					РеквизитыРоли.ОсновнойОбъектАдресации);
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					УчастникXDTO,
					"secondaryAddressingItem",
					РеквизитыРоли.ДополнительныйОбъектАдресации);
				
			КонецЕсли;
			
			УчастникXDTO.obligatory = Участник.ЯвкаОбязательна;
			УчастникXDTO.absent = Участник.Отсутствовал;
			Если ЗначениеЗаполнено(Участник.СостояниеПриглашения) Тогда
				УчастникXDTO.invitationStatus = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(
					Участник.СостояниеПриглашения);
			КонецЕсли;
			
			ОбъектXDTO.attendees.Добавить(УчастникXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполним файлы.
	Если ДоступенФункционалФайлов
			И ЗначениеЗаполнено(Мероприятие.Ссылка)
			И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено) Тогда
		ВключатьПомеченныеНаУдаление = (Колонки.Найти(НРег("ignoreDeletionMark")) <> Неопределено);
		ПолучатьПредпросмотр = (Колонки.Найти(НРег("htmlView")) <> Неопределено);
		ПолучатьДвоичныеДанные = (Колонки.Найти(НРег("binaryData")) <> Неопределено);
		НаборКолонокФайлов = Новый Массив;
		ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов);
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(
			ОбъектXDTO,
			Мероприятие.Ссылка,
			НаборКолонокФайлов,
			ВключатьПомеченныеНаУдаление,
			ПолучатьПредпросмотр,
			ПолучатьДвоичныеДанные);
	КонецЕсли;
	
	// Заполним подписи.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("signatures")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ПолучитьСписокПодписей(Мероприятие, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним текущее состояние обработки.
	Если ЗначениеЗаполнено(Мероприятие.Ссылка)
			И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("processingState")) <> Неопределено) Тогда
		СостояниеОбработки = ДействияСервер.ТекущееСостояниеОбработки(Мероприятие.Ссылка);
		Если ЗначениеЗаполнено(СостояниеОбработки) Тогда
			ОбъектXDTO.processingState = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СостояниеОбработки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Мероприятие - СправочникОбъект.Мероприятия - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeeting. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеМероприятия(Мероприятие, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Мероприятие.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Мероприятие.ВидМероприятия, ОбъектXDTO, "type");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Мероприятие.Папка, ОбъектXDTO, "folder");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Мероприятие.Описание, ОбъектXDTO, "description");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Мероприятие.ДатаНачала, ОбъектXDTO, "startDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Мероприятие.ДатаОкончания, ОбъектXDTO, "endDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Мероприятие.МестоПроведения, ОбъектXDTO, "place");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Мероприятие.ГрифДоступа, ОбъектXDTO, "accessLevel");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Мероприятие.Организация, ОбъектXDTO, "organization");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Мероприятие.Проект, ОбъектXDTO, "project");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		Мероприятие.Организатор, ОбъектXDTO, "calledBy");
	
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьПолнуюРольИзСвойстваXDTO(
		Мероприятие.Председатель,
		ОбъектXDTO,
		"chairPerson",
		"chairPersonMainAddressingObject",
		"chairPersonSecondaryAddressingObject");
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьПолнуюРольИзСвойстваXDTO(
		Мероприятие.Секретарь,
		ОбъектXDTO,
		"secretary",
		"secretaryMainAddressingObject",
		"secretarySecondaryAddressingObject");
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "agenda") Тогда
		Мероприятие.Программа.Очистить();
		Для Каждого СтрокаXDTO Из ОбъектXDTO.agenda Цикл
			
			Строка = Мероприятие.Программа.Добавить();
			
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.НомерПункта, СтрокаXDTO, "number");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Содержание, СтрокаXDTO, "description");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Комментарий, СтрокаXDTO, "comment");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.ВремяПлан, СтрокаXDTO, "estimatedDuration");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.ВремяФакт, СтрокаXDTO, "duration");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Начало, СтрокаXDTO, "startDate");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Окончание, СтрокаXDTO, "endDate");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
				Строка.ТребуетПринятияРешения,
				СтрокаXDTO,
				"decisionIsNecessary");
			
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "employee") Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Исполнитель, СтрокаXDTO, "employee");
				
			ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "role") Тогда
				ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьПолнуюРольИзСвойстваXDTO(
					Строка.Исполнитель,
					СтрокаXDTO,
					"role",
					"mainAddressingItem",
					"secondaryAddressingItem");
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "attendees") Тогда
		
		СписокУчастников = ТаблицаУчастникиМероприятия();
		
		Для Каждого СтрокаXDTO Из ОбъектXDTO.attendees Цикл
			Строка = СписокУчастников.Добавить();
			
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.ЯвкаОбязательна, СтрокаXDTO, "obligatory");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Отсутствовал, СтрокаXDTO, "absent");
			
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
				"DMInvitationStatus",
				СтрокаXDTO,
				"invitationStatus",
				Строка,
				"СостояниеПриглашения");
			
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "employee") Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Исполнитель, СтрокаXDTO, "employee");
				
			ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "role") Тогда
				ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьПолнуюРольИзСвойстваXDTO(
					Строка.Исполнитель,
					СтрокаXDTO,
					"role",
					"mainAddressingItem",
					"secondaryAddressingItem");
				
			КонецЕсли;
		КонецЦикла;
		
		Мероприятие.ДополнительныеСвойства.Вставить("СписокУчастников", СписокУчастников);
		
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Мероприятие, ОбъектXDTO);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОсновнойСотрудникТекущегоПользователя = Сотрудники.ОсновнойСотрудникПользователя();
	
	Если Не ЗначениеЗаполнено(Мероприятие.Ссылка) И Не ЗначениеЗаполнено(Мероприятие.ДатаСоздания) Тогда
		Мероприятие.ДатаСоздания = ТекущаяДата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Мероприятие.Ссылка) И Не ЗначениеЗаполнено(Мероприятие.Подготовил) Тогда
		Мероприятие.Подготовил = ОсновнойСотрудникТекущегоПользователя;
	КонецЕсли;
	
	Если Не Мероприятие.ДополнительныеСвойства.Свойство("СписокУчастников")
				И Не ЗначениеЗаполнено(Мероприятие.Ссылка) Тогда
		СписокУчастников = ТаблицаУчастникиМероприятия();
		НоваяСтрока = СписокУчастников.Добавить();
		НоваяСтрока.Исполнитель = ОсновнойСотрудникТекущегоПользователя;
		Мероприятие.ДополнительныеСвойства.Вставить("СписокУчастников", СписокУчастников);
	КонецЕсли;
	
	Мероприятие.ДополнительныеСвойства.Вставить("ТекущаяДата", ТекущаяДата);
	Мероприятие.ДополнительныеСвойства.Вставить("ТекущийПользователь", ТекущийПользователь);
	Мероприятие.ДополнительныеСвойства.Вставить(
		"ОсновнойСотрудникТекущегоПользователя",
		ОсновнойСотрудникТекущегоПользователя);
	
КонецПроцедуры

// Ищет подходящее мероприятие по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeeting.
//
// Возвращаемое значение:
//   СправочникСсылка.Мероприятия - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиМероприятие(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	Наименование = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	ВидМероприятия = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "type") Тогда
		ВидМероприятия = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.type);
	КонецЕсли;
	ДатаНачала = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "startDate") Тогда
		ДатаНачала = ОбъектXDTO.startDate;
	КонецЕсли;
	ДатаОкончания = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "endDate") Тогда
		ДатаОкончания = ОбъектXDTO.endDate;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = Новый Массив;
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Мероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК Мероприятия
			|ГДЕ
			|	Мероприятия.Наименование = &Наименование");
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Если ЗначениеЗаполнено(ВидМероприятия) Тогда
			ТекстЗапроса.Добавить("И Мероприятия.ВидМероприятия = &ВидМероприятия");
			Запрос.УстановитьПараметр("ВидМероприятия", ВидМероприятия);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			ТекстЗапроса.Добавить("И Мероприятия.ДатаНачала = &ДатаНачала");
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ТекстЗапроса.Добавить("И Мероприятия.ДатаОкончания = &ДатаОкончания");
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		КонецЕсли;
		Запрос.Текст = СтрСоединить(ТекстЗапроса, Символы.ПС);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДопОбработчикиПравилЗагрузкиМероприятия

// Процедура для заполнения участников мероприятия ДО.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПравилаЗагрузки_ЗаполнитьУчастниковМероприятия(Параметры) Экспорт
	
	СписокУчастников = ТаблицаУчастникиМероприятия();
	
	РаботаСИнтегрированнымиСистемами.ЗаполнитьТаблицуПоПравилу(
		Параметры.ПравилоЗаполненияРеквизита,
		Параметры.ОбъектДО,
		СписокУчастников,
		Параметры.ОбъектИС,
		Параметры.ПравилоЗагрузки,
		Параметры.ВходящиеДанные,
		Параметры.ЗначенияИзШаблона);
	
	Параметры.ОбъектДО.ДополнительныеСвойства.Вставить("СписокУчастников", СписокУчастников);
	
КонецПроцедуры

// Конструктор таблицы значений для заполнения участников мероприятия.
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ТаблицаУчастникиМероприятия() Экспорт
	
	СписокУчастников = Новый ТаблицаЗначений;
	СписокУчастников.Колонки.Добавить("Исполнитель", Новый ОписаниеТипов(
		"СправочникСсылка.Сотрудники,
		|СправочникСсылка.Контрагенты,
		|СправочникСсылка.ЛичныеАдресаты,
		|СправочникСсылка.ПолныеРоли,
		|СправочникСсылка.Пользователи,
		|СправочникСсылка.КонтактныеЛица"));
	СписокУчастников.Колонки.Добавить("ИсполнительЧасовогоПояса", Новый ОписаниеТипов(
		"СправочникСсылка.Сотрудники,
		|СправочникСсылка.Контрагенты,
		|СправочникСсылка.ЛичныеАдресаты,
		|СправочникСсылка.ПолныеРоли,
		|СправочникСсылка.Пользователи,
		|СправочникСсылка.КонтактныеЛица"));
	СписокУчастников.Колонки.Добавить("КонтрольнаяСуммаПриглашения", Новый ОписаниеТипов("Строка"));
	СписокУчастников.Колонки.Добавить("Отсутствовал", Новый ОписаниеТипов("Булево"));
	СписокУчастников.Колонки.Добавить("ПредставлениеЧасовогоПояса", Новый ОписаниеТипов("Строка"));
	СписокУчастников.Колонки.Добавить("СостояниеПриглашения", Новый ОписаниеТипов(
		"ПеречислениеСсылка.СостоянияПриглашения"));
	СписокУчастников.Колонки.Добавить("ЧасовойПоясУчастника", Новый ОписаниеТипов("Строка"));
	СписокУчастников.Колонки.Добавить("ЯвкаОбязательна", Новый ОписаниеТипов("Булево"));
	
	Возврат СписокУчастников;
	
КонецФункции

#КонецОбласти

// Выполняет дополнительную обработку Мероприятия после записи.
//
// Параметры:
//   ОбъектДО - СправочникОбъект.Мероприятия - объект Документооборота, источник данных:
//     * ДополнительныеСвойства - Структура:
//       ** ЭтоНовый - Булево
//       ** Модифицированность - Булево
//       ** ТекущаяДата - Дата
//       ** ТекущийПользователь - СправочникСсылка.Пользователи
//       ** ОсновнойСотрудникТекущегоПользователя - СправочникСсылка.Сотрудники
//       ** СписокУчастников - см. ОбработкаЗапросовXDTOДокументы.ТаблицаУчастникиМероприятия
//   ИсточникДанных - Структура - источник данных:
//     * ТипИсточника - Строка - принимает значения "ОбъектXDTO" или "ВходящиеДанные", в зависимости от типа источника.
//     * ОбъектXDTO - ОбъектXDTO - объект XDTO, потомок DMObject. Источник данных.
//     * ТипXDTOОбъекта - Строка - имя типа XDTO объекта, из которого требуется заполнить объект ДО.
//     * ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//     * ПравилоЗагрузки - СправочникОбъект.ПравилаЗагрузкиДанныхВДО - правило загрузки.
//     * Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//
Процедура ОбработатьМероприятиеПослеЗаписи(ОбъектДО, ИсточникДанных) Экспорт
	
	Если ОбъектДО.ДополнительныеСвойства.Свойство("СписокУчастников") Тогда
		
		// Запись участников совещания
		УдаленныеВнешниеПриглашения = Новый Массив;
		
		СтарыеВнешниеПриглашения = Новый Массив;
		
		СтарыеУчастники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(ОбъектДО.Ссылка);
		Для Каждого СтрокаУчастника Из СтарыеУчастники Цикл
			
			Если Не УправлениеМероприятиями.ЭтоВнутреннийУчастник(СтрокаУчастника.Исполнитель)
					И ЗначениеЗаполнено(СтрокаУчастника.КонтрольнаяСуммаПриглашения) Тогда
				СтарыеВнешниеПриглашения.Добавить(СтрокаУчастника.Исполнитель);
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Мероприятие.Значение = ОбъектДО.Ссылка;
		НаборЗаписей.Отбор.Мероприятие.Использование = Истина;
		
		НовыеВнешниеПриглашения = Новый Массив;
		Для Каждого Строка Из ОбъектДО.ДополнительныеСвойства.СписокУчастников Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			НоваяЗапись.Мероприятие = ОбъектДО.Ссылка;
			НоваяЗапись.Порядок = ОбъектДО.ДополнительныеСвойства.СписокУчастников.Индекс(Строка);
			
			Если Не УправлениеМероприятиями.ЭтоВнутреннийУчастник(Строка.Исполнитель)
					И ЗначениеЗаполнено(Строка.КонтрольнаяСуммаПриглашения) Тогда
				НовыеВнешниеПриглашения.Добавить(Строка.Исполнитель);
			КонецЕсли;
			
		КонецЦикла;
		НаборЗаписей.Записать();
		
		РаботаСРабочимКалендаремСервер.ОбновитьЗаписиКалендаряПоПредмету(ОбъектДО.Ссылка, Ложь);
		
		УдаленныеВнешниеПриглашения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			СтарыеВнешниеПриглашения,
			НовыеВнешниеПриглашения);
		
		УправлениеМероприятиями.ОтправитьПриглашенияУчастникамПриНеобходимости(ОбъектДО.Ссылка);
		
		Если УдаленныеВнешниеПриглашения.Количество() > 0 Тогда
			
			АдресаДляОтправкиПриглашений = Новый Массив;
			Для Каждого УдаленныйУчастник Из УдаленныеВнешниеПриглашения Цикл
				
				АдресДляОтправкиПриглашений =
					УправлениеМероприятиями.АдресДляОтправкиПриглашений(УдаленныйУчастник);
				Если Не ЗначениеЗаполнено(АдресДляОтправкиПриглашений) Тогда
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Не указан адрес для отправки приглашений %1 (%2).'"),
						УдаленныйУчастник,
						ТипЗнч(УдаленныйУчастник));
				КонецЕсли;
				
				АдресаДляОтправкиПриглашений.Добавить(АдресДляОтправкиПриглашений);
				
			КонецЦикла;
			
			УправлениеМероприятиями.ОтправитьОтменуПриглашенийВнешнимУчастникам(
				ОбъектДО.Ссылка,
				АдресаДляОтправкиПриглашений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИсточникДанных.ТипИсточника = "ОбъектXDTO" Тогда
		// состояние
		ЗаполнитьСостоянияМероприятия(
			ОбъектДО,
			ИсточникДанных.ОбъектXDTO,
			ОбъектДО.ДополнительныеСвойства.ТекущаяДата,
			ОбъектДО.ДополнительныеСвойства.ОсновнойСотрудникТекущегоПользователя);
	КонецЕсли;
	
	ТекущиеСостояния = УправлениеМероприятиями.ПолучитьВсеСостоянияМероприятия(ОбъектДО.Ссылка);
	Если ТекущиеСостояния.Количество() = 0 Тогда
		УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
			ОбъектДО.Ссылка,
			ОбъектДО.ДополнительныеСвойства.ТекущаяДата,
			Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки,
			ОбъектДО.ДополнительныеСвойства.ОсновнойСотрудникТекущегоПользователя);
	КонецЕсли;
	
	Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ОбъектДО.Ссылка);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		// создадим обработку и заполним по ПОД
		Обработка = Справочники.ОбработкиОбъектов.НоваяОбработкаОбъекта(ОбъектДО.Ссылка);
		// заполняем по ПОД
		ПравилаОбработкиСервер.ЗаполнитьДействияПрограммно(
			ОбъектДО.Ссылка,
			Сотрудники.ОсновнойСотрудникПользователя());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Контрагент

#Область ОбщиеМетодыКонтрагента

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Контрагент - СправочникОбъект.Контрагенты
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCorrespondent.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - система, для которой предназначен объект.
//   ТолькоОсновныеРеквизиты - Булево - объект XDTO будет заполнен всеми реквизитами объекта ДО, без дополнительных
//     запросов к базе.
//
Процедура ПолучитьДанныеКонтрагента(Контрагент, ОбъектXDTO, НаборКолонок = Неопределено,
		ИнтегрированнаяСистема = Неопределено, ТолькоОсновныеРеквизиты = Ложь) Экспорт
	
	ДоступенФункционалФайлов = (ИнтегрированнаяСистема = Неопределено)
		Или РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(ИнтегрированнаяСистема, "3.0.2.1");
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("deletionMark", Контрагент.ПометкаУдаления);
	ДанныеКонтрагента.Вставить("inn", Контрагент.ИНН);
	ДанныеКонтрагента.Вставить("kpp", Контрагент.КПП);
	ДанныеКонтрагента.Вставить("okpo", Контрагент.КодПоОКПО);
	ДанныеКонтрагента.Вставить("registrationNumber", Контрагент.РегистрационныйНомер);
	ДанныеКонтрагента.Вставить("fullName", Контрагент.НаименованиеПолное);
	ДанныеКонтрагента.Вставить("comment", Контрагент.Комментарий);
	ДанныеКонтрагента.Вставить("privatePerson", Контрагент.ФизЛицо);
	ДанныеКонтрагента.Вставить("responsible", Контрагент.Ответственный);
	Если ЗначениеЗаполнено(Контрагент.ЮрФизЛицо) Тогда
		ДанныеКонтрагента.Вставить("legalPrivatePerson",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Контрагент.ЮрФизЛицо));
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		Контрагент,
		ДанныеКонтрагента,
		ОбъектXDTO,
		НаборКолонок,,
		Не ТолькоОсновныеРеквизиты);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Колонки.Добавить(НРег(ИмяКолонки));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(
			Контрагент,
			ОбъектXDTO,
			ТолькоОсновныеРеквизиты);
	КонецЕсли;
	
	Если ТолькоОсновныеРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним файлы.
	Если ДоступенФункционалФайлов
			И ЗначениеЗаполнено(Контрагент.Ссылка)
			И (ПолучатьВсеКолонки Или Колонки.Найти(НРег("files")) <> Неопределено) Тогда
		ВключатьПомеченныеНаУдаление = (Колонки.Найти(НРег("ignoreDeletionMark")) <> Неопределено);
		ПолучатьПредпросмотр = (Колонки.Найти(НРег("htmlView")) <> Неопределено);
		ПолучатьДвоичныеДанные = (Колонки.Найти(НРег("binaryData")) <> Неопределено);
		НаборКолонокФайлов = Новый Массив;
		ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов);
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(
			ОбъектXDTO,
			Контрагент.Ссылка,
			НаборКолонокФайлов,
			ВключатьПомеченныеНаУдаление,
			ПолучатьПредпросмотр,
			ПолучатьДвоичныеДанные);
	КонецЕсли;
	
	// Контактная информация.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("contactInformation")) <> Неопределено Тогда
		ПолучитьКонтактнуюИнформациюОбъектаДО(Контрагент, ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Контрагент - СправочникОбъект.Контрагенты - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCorrespondent. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеКонтрагента(Контрагент, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.ПометкаУдаления, ОбъектXDTO, "deletionMark");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.ИНН, ОбъектXDTO, "inn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.КПП, ОбъектXDTO, "kpp");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.КодПоОКПО, ОбъектXDTO, "okpo");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.РегистрационныйНомер, ОбъектXDTO,
		"registrationNumber");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.НаименованиеПолное, ОбъектXDTO, "fullName");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.Комментарий, ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.ФизЛицо, ОбъектXDTO, "privatePerson");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Контрагент.Ответственный, ОбъектXDTO, "responsible");
	
	НовоеЗначениеЮрФизЛицо = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "legalPrivatePerson") Тогда
		НовоеЗначениеЮрФизЛицо = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО(
			"DMLegalPrivatePerson",
			ОбъектXDTO.legalPrivatePerson);
	Иначе
		Если Не ЗначениеЗаполнено(Контрагент.ЮрФизЛицо) Тогда
			Если ЗначениеЗаполнено(Контрагент.ИНН) Тогда
				Если СтрДлина(Контрагент.ИНН) = 12 Тогда
					НовоеЗначениеЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
				Иначе
					НовоеЗначениеЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				КонецЕсли;
			Иначе
				НовоеЗначениеЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Контрагент.ЮрФизЛицо <> НовоеЗначениеЮрФизЛицо И НовоеЗначениеЮрФизЛицо <> Неопределено Тогда
		Контрагент.ЮрФизЛицо = НовоеЗначениеЮрФизЛицо;
	КонецЕсли;
	
	ЗаполнитьКонтактнуюИнформациюОбъектаДО(Контрагент, ОбъектXDTO);
	
	ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Контрагент, ОбъектXDTO);
	
КонецПроцедуры

// Ищет подходящего контрагента по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCorrespondent.
//
// Возвращаемое значение:
//   СправочникСсылка.Контрагенты - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиКонтрагента(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	Наименование = "";
	ИНН = "";
	КПП = "";
	РегистрационныйНомер = "";
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "inn") Тогда
		ИНН = ОбъектXDTO.inn;
	КонецЕсли;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "kpp") Тогда
		КПП = ОбъектXDTO.kpp;
	КонецЕсли;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "registrationNumber") Тогда
		РегистрационныйНомер = ОбъектXDTO.registrationNumber;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	0 КАК Приоритет
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	&ИНН <> """"
		|	И &КПП <> """"
		|	И Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	1
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	&ИНН = """"
		|	И &РегистрационныйНомер <> """"
		|	И Контрагенты.РегистрационныйНомер = &РегистрационныйНомер
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	&ИНН <> """"
		|	И (&КПП = """"
		|			ИЛИ Контрагенты.КПП = """")
		|	И Контрагенты.ИНН = &ИНН
		|	И Контрагенты.Наименование = &Наименование
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	3
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	&КПП <> """"
		|	И (&ИНН = """"
		|			ИЛИ Контрагенты.ИНН = """")
		|	И Контрагенты.КПП = &КПП
		|	И Контрагенты.Наименование = &Наименование
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	4
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	&ИНН <> """"
		|	И (&КПП = """"
		|			ИЛИ Контрагенты.КПП = """")
		|	И Контрагенты.ИНН = &ИНН
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	5
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(&ИНН = """"
		|			ИЛИ Контрагенты.ИНН = """")
		|	И (&КПП = """"
		|			ИЛИ Контрагенты.КПП = """")
		|	И Контрагенты.Наименование = &Наименование
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет");
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДопОбработчикиПравилЗагрузкиКонтрагента

// Процедура для заполнения основного банковского счета контрагента ДО.
//
// Параметры:
//   Параметры - см. РаботаСИнтегрированнымиСистемами.ПараметрыМетодаДляЗаполненияОбъектаДО
//
Процедура ПравилаЗагрузки_ЗаполнитьОсновнойБанковскийСчет(Параметры) Экспорт
	
	Параметры.ОбъектДО.ДополнительныеСвойства.Вставить("ОсновнойБанковскийСчет", Параметры);
	
КонецПроцедуры

#КонецОбласти

// Выполняет дополнительную обработку Контрагента после записи.
//
// Параметры:
//   ОбъектДО - СправочникОбъект.Контрагенты - объект Документооборота, источник данных.
//   ИсточникДанных - Структура - источник данных:
//     * ТипИсточника - Строка - принимает значения "ОбъектXDTO" или "ВходящиеДанные", в зависимости от типа источника.
//     * ОбъектXDTO - ОбъектXDTO - объект XDTO, потомок DMObject. Источник данных.
//     * ТипXDTOОбъекта - Строка - имя типа XDTO объекта, из которого требуется заполнить объект ДО.
//     * ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//     * ПравилоЗагрузки - СправочникОбъект.ПравилаЗагрузкиДанныхВДО - правило загрузки.
//     * Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//
Процедура ОбработатьКонтрагентаПослеЗаписи(ОбъектДО, ИсточникДанных) Экспорт
	
	Если ОбъектДО.ДополнительныеСвойства.Свойство("ОсновнойБанковскийСчет") Тогда
		
		СсылкаНаСчет = Неопределено;
		НовоеЗначение = РаботаСИнтегрированнымиСистемами.ЗначениеРеквизитаИзПравила(
			ОбъектДО.ДополнительныеСвойства.ОсновнойБанковскийСчет.ПравилоЗаполненияРеквизита,
			ОбъектДО.ДополнительныеСвойства.ОсновнойБанковскийСчет.ОбъектДО,
			ОбъектДО.ДополнительныеСвойства.ОсновнойБанковскийСчет.ОбъектИС,
			ОбъектДО.ДополнительныеСвойства.ОсновнойБанковскийСчет.ПравилоЗагрузки,
			ОбъектДО.ДополнительныеСвойства.ОсновнойБанковскийСчет.ВходящиеДанные,
			ОбъектДО.ДополнительныеСвойства.ОсновнойБанковскийСчет.ЗначенияИзШаблона);
		
		Если ТипЗнч(НовоеЗначение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			
			СсылкаНаСчет = НовоеЗначение;
			
		ИначеЕсли ТипЗнч(НовоеЗначение) = Тип("ОбъектXDTO")
				И ОбработкаЗапросовXDTO.ПроверитьТип(НовоеЗначение, "DMBankAccount")
				И ОбработкаЗапросовXDTO.СвойствоУстановлено(НовоеЗначение, "number") Тогда
			
			Банк = Неопределено;
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(НовоеЗначение, "bank") Тогда
				Банк = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(НовоеЗначение.bank);
			КонецЕсли;
			
			Запрос = Новый Запрос;
			ТекстЗапроса = Новый Массив;
			ТекстЗапроса.Добавить(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	БанковскиеСчета.Ссылка
				|ИЗ
				|	Справочник.БанковскиеСчета КАК БанковскиеСчета
				|ГДЕ
				|	БанковскиеСчета.НомерСчета = &НомерСчета
				|	И БанковскиеСчета.Владелец = &Владелец");
			Запрос.УстановитьПараметр("НомерСчета", НовоеЗначение.number);
			Запрос.УстановитьПараметр("Владелец", ОбъектДО.Ссылка);
			Если ЗначениеЗаполнено(Банк) Тогда
				ТекстЗапроса.Добавить("И БанковскиеСчета.Банк = &Банк");
				Запрос.УстановитьПараметр("Банк", Банк);
			КонецЕсли;
			Запрос.Текст = СтрСоединить(ТекстЗапроса, Символы.ПС);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СсылкаНаСчет = Выборка.Ссылка;
			Иначе
				НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				НовыйСчет.НомерСчета = НовоеЗначение.number;
				НовыйСчет.Владелец = ОбъектДО.Ссылка;
				НовыйСчет.Наименование = НовоеЗначение.name;
				НовыйСчет.ВалютаДенежныхСредств = Константы.ОсновнаяВалюта.Получить();
				ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НовыйСчет.Банк, НовоеЗначение, "bank");
				НовыйСчет.Записать();
				СсылкаНаСчет = НовыйСчет.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СсылкаНаСчет) И ОбъектДО.ОсновнойБанковскийСчет <> СсылкаНаСчет Тогда
			ОбъектДО.ОсновнойБанковскийСчет = СсылкаНаСчет;
			ОбъектДО.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВидДокумента

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ВидДокумента - СправочникСсылка.ВидыДокументов,
//                  СправочникОбъект.ВидыДокументов.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocumentType.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеВидаДокумента(ВидДокумента, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыДокументов") Тогда
		ВидДокументаОбъект = ВидДокумента.ПолучитьОбъект();
	Иначе
		ВидДокументаОбъект = ВидДокумента;
	КонецЕсли;
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Колонки.Добавить(НРег(ИмяКолонки));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	ПолучатьАвтоНумерацию = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("automaticNumeration")) <> Неопределено);
	ПолучатьРолиФайлов = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("roles")) <> Неопределено);
	ПолучатьВидыДействий = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("actionTypes")) <> Неопределено);
	
	ДанныеВидаДокумента = Новый Структура;
	ДанныеВидаДокумента.Вставить("performanceDateEnabled", ВидДокументаОбъект.ИспользоватьСрокИсполнения);
	ДанныеВидаДокумента.Вставить("sumEnabled", ВидДокументаОбъект.УчитыватьСуммуДокумента);
	ДанныеВидаДокумента.Вставить("templateRequired", ВидДокументаОбъект.ЗапретитьСозданиеДокументовНеПоШаблону);
	ДанныеВидаДокумента.Вставить("accountingForCaseFilesEnabled", ВидДокументаОбъект.ВключенУчетПоНоменклатуреДел);
	ДанныеВидаДокумента.Вставить("externalNumberEnabled", ВидДокументаОбъект.УчитыватьВходящийНомерИДатуПолучателя);
	ДанныеВидаДокумента.Вставить("addresseeEnabled", ВидДокументаОбъект.ВестиУчетПоАдресатам);
	ДанныеВидаДокумента.Вставить("cashFlowDetailsEnabled", ВидДокументаОбъект.ВестиУчетПоСтатьямДДС);
	ДанныеВидаДокумента.Вставить("correspondentEnabled", ВидДокументаОбъект.ВестиУчетПоКонтрагентам);
	ДанныеВидаДокумента.Вставить("durationEnabled", ВидДокументаОбъект.УчитыватьСрокДействия);
	ДанныеВидаДокумента.Вставить("isAPaymentRequest", ВидДокументаОбъект.ЯвляетсяЗаявкойНаОплату);
	ДанныеВидаДокумента.Вставить("organizationEnabled", ВидДокументаОбъект.ВестиУчетПоОрганизациям);
	ДанныеВидаДокумента.Вставить("partiesEnabled", ВидДокументаОбъект.ВестиУчетСторон);
	ДанныеВидаДокумента.Вставить("productRowsEnabled", ВидДокументаОбъект.ВестиУчетТоваровИУслуг);
	ДанныеВидаДокумента.Вставить("isIncoming", ВидДокументаОбъект.ЯвляетсяВходящейКорреспонденцией);
	ДанныеВидаДокумента.Вставить("isOutgoing", ВидДокументаОбъект.ЯвляетсяИсходящейКорреспонденцией);
	Если ЗначениеЗаполнено(ВидДокументаОбъект.ВариантПодписания) Тогда
		ДанныеВидаДокумента.Вставить("signatureOption",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ВидДокументаОбъект.ВариантПодписания));
	КонецЕсли;
	
	Если ПолучатьАвтоНумерацию Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НастройкиНумерации.СпособНумерации
			|ИЗ
			|	РегистрСведений.НастройкиНумерации КАК НастройкиНумерации
			|ГДЕ
			|	НастройкиНумерации.ВидДокумента = &ВидДокумента");
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаОбъект.Ссылка);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			АвтоНумерация = Ложь;
		Иначе
			АвтоНумерация = Результат.Выгрузить()[0].СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
		КонецЕсли;
		ДанныеВидаДокумента.Вставить("automaticNumeration", АвтоНумерация);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		ВидДокументаОбъект,
		ДанныеВидаДокумента,
		ОбъектXDTO,
		НаборКолонок);
	
	Если Не ВидДокументаОбъект.Ссылка.Пустая() Тогда
		
		Если ПолучатьРолиФайлов Тогда
			ТаблицаРолей = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокументаОбъект.Ссылка);
			Для Каждого Строка Из ТаблицаРолей Цикл
				РольФайлаXDTO = ОбработкаЗапросовXDTO.ПолучитьОбъектXDTOПоСуществующимДаннымДО(
					Строка.Роль,
					Неопределено);
				РольФайлаXDTO.required = Строка.Обязательная;
				ОбъектXDTO.roles.Добавить(РольФайлаXDTO);
			КонецЦикла;
		КонецЕсли;
		
		Если ПолучатьВидыДействий Тогда
			Для Каждого ВидДействия Из ВидыДействий(ВидДокументаОбъект.Ссылка) Цикл
				ВидДействияXDTO = ОбработкаЗапросовXDTO.ПолучитьОбъектXDTOПоСуществующимДаннымДО(
					ВидДействия,
					Неопределено);
				ОбъектXDTO.actionTypes.Добавить(ВидДействияXDTO);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ВидДокумента - СправочникОбъект.ВидыДокументов - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocumentType. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеВидаДокумента(ВидДокумента, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.Наименование, ОбъектXDTO, "name");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.УчитыватьСуммуДокумента, ОбъектXDTO, "sumEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ИспользоватьСрокИсполнения, ОбъектXDTO, "performanceDateEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ЗапретитьСозданиеДокументовНеПоШаблону, ОбъектXDTO, "templateRequired");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ВключенУчетПоНоменклатуреДел, ОбъектXDTO, "accountingForCaseFilesEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ВестиУчетПоСтатьямДДС, ОбъектXDTO, "cashFlowDetailsEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ВестиУчетПоКонтрагентам, ОбъектXDTO, "correspondentEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.УчитыватьСрокДействия, ОбъектXDTO, "durationEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ЯвляетсяЗаявкойНаОплату, ОбъектXDTO, "isAPaymentRequest");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ВестиУчетПоОрганизациям, ОбъектXDTO, "organizationEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ВестиУчетСторон, ОбъектXDTO, "partiesEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ВестиУчетТоваровИУслуг, ОбъектXDTO, "productRowsEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.УчитыватьВходящийНомерИДатуПолучателя, ОбъектXDTO, "externalNumberEnabled");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ЯвляетсяВходящейКорреспонденцией, ОбъектXDTO, "isIncoming");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидДокумента.ЯвляетсяИсходящейКорреспонденцией, ОбъектXDTO, "isOutgoing");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMSignatureOption",
		ОбъектXDTO,
		"signatureOption",
		ВидДокумента,
		"ВариантПодписания");
	
КонецПроцедуры

// Ищет подходящий вид документа по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocumentType.
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыДокументов - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиВидДокумента(ОбъектXDTO) Экспорт
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Возврат Справочники.ВидыДокументов.НайтиПоНаименованию(Наименование, Истина);
	
КонецФункции

// Записывает настройки автонумерации нового вида документов, созданного из объекта XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocumentType. Источник данных заполнения.
//   ВидДокумента - СправочникОбъект.ВидыДокументов - новый вид документов.
//
Процедура ЗаписатьНастройкиАвтонумерацииВидаДокумента(ОбъектXDTO, ВидДокумента) Экспорт
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "automaticNumeration")
			И ОбъектXDTO.automaticNumeration = Истина Тогда
		ЗаписьНастроекНумерации = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
		ЗаписьНастроекНумерации.ТипДокумента = Перечисления.ТипыОбъектов.ДокументыПредприятия;
		ЗаписьНастроекНумерации.Нумератор = Справочники.Нумераторы.ДокументыПредприятия;
		ЗаписьНастроекНумерации.ВидДокумента = ВидДокумента.Ссылка;
		ЗаписьНастроекНумерации.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
		ЗаписьНастроекНумерации.Нумеровать = Нумерация.СформироватьПолеНумеровать(
			ЗаписьНастроекНумерации.СпособНумерации, ЗаписьНастроекНумерации.Нумератор);
		ЗаписьНастроекНумерации.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПапкаДокументов

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Папка - СправочникОбъект.ПапкиДокументов
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocumentFolder.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеПапкиДокументов(Папка, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеПапки = Новый Структура;
	ДанныеПапки.Вставить("description", Папка.Описание);
	ДанныеПапки.Вставить("responsible", Папка.Ответственный);
	ДанныеПапки.Вставить("creationDate", Папка.ДатаСоздания);
	ДанныеПапки.Вставить("parent", Папка.Родитель);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(Папка, ДанныеПапки, ОбъектXDTO, НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Папка - СправочникОбъект.ПапкиДокументов - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocumentFolder. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеПапкиДокументов(Папка, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Папка.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Папка.Описание, ОбъектXDTO, "description");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Папка.Ответственный, ОбъектXDTO, "responsible");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Папка.ДатаСоздания, ОбъектXDTO, "creationDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Папка.Родитель, ОбъектXDTO, "parent");
	
КонецПроцедуры

// Ищет подходящую папку документов по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocumentFolder.
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиДокументов - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиПапкуДокументов(ОбъектXDTO) Экспорт
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Возврат Справочники.ПапкиДокументов.НайтиПоНаименованию(Наименование, Истина);
	
КонецФункции

#КонецОбласти

#Область ВидМероприятия

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ВидМероприятия - СправочникОбъект.ВидыМероприятий
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeetingType.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеВидаМероприятия(ВидМероприятия, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеВидаМероприятия = Новый Структура;
	ДанныеВидаМероприятия.Вставить("withMinutes", ВидМероприятия.ПротокольноеМероприятие);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		ВидМероприятия,
		ДанныеВидаМероприятия,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ВидМероприятия - СправочникОбъект.ВидыМероприятий - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeetingType. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеВидаМероприятия(ВидМероприятия, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидМероприятия.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидМероприятия.ПротокольноеМероприятие, ОбъектXDTO, "withMinutes");
	
КонецПроцедуры

// Ищет подходящий вид мероприятия по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeetingType.
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыМероприятий - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиВидМероприятия(ОбъектXDTO) Экспорт
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Возврат Справочники.ВидыМероприятий.НайтиПоНаименованию(Наименование, Истина);
	
КонецФункции

#КонецОбласти

#Область ПунктПротоколаМероприятия

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ПунктПротоколаМероприятия - СправочникОбъект.ПротоколыМероприятий
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeetingMinutesItem.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеПунктаПротоколаМероприятия(ПунктПротоколаМероприятия, ОбъектXDTO,
		НаборКолонок = Неопределено) Экспорт
	
	ДанныеПунктаПротоколаМероприятия = Новый Структура;
	ДанныеПунктаПротоколаМероприятия.Вставить("meeting", ПунктПротоколаМероприятия.Владелец);
	ДанныеПунктаПротоколаМероприятия.Вставить("agendaItemNumber", ПунктПротоколаМероприятия.НомерПунктаПрограммы);
	ДанныеПунктаПротоколаМероприятия.Вставить("minutesItemNumber", ПунктПротоколаМероприятия.НомерПунктаПротокола);
	ДанныеПунктаПротоколаМероприятия.Вставить("proposed", ПунктПротоколаМероприятия.Слушали);
	ДанныеПунктаПротоколаМероприятия.Вставить("discussed", ПунктПротоколаМероприятия.Выступили);
	ДанныеПунктаПротоколаМероприятия.Вставить("decided", ПунктПротоколаМероприятия.Решили);
	ДанныеПунктаПротоколаМероприятия.Вставить("dueDate", ПунктПротоколаМероприятия.СрокИсполненияПроцесса);
	
	Если ЗначениеЗаполнено(ПунктПротоколаМероприятия.ВариантИсполнения) Тогда
		ДанныеПунктаПротоколаМероприятия.Вставить("routingType",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ПунктПротоколаМероприятия.ВариантИсполнения));
	КонецЕсли;
	
	Если ТипЗнч(ПунктПротоколаМероприятия.Исполнение) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		ДанныеПунктаПротоколаМероприятия.Вставить("performance", ПунктПротоколаМероприятия.Исполнение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПунктПротоколаМероприятия.СостояниеИсполнения) Тогда
		ДанныеПунктаПротоколаМероприятия.Вставить("status", ПунктПротоколаМероприятия.СостояниеИсполнения);
	КонецЕсли;
	
	Если ТипЗнч(ПунктПротоколаМероприятия.Ответственный) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПунктПротоколаМероприятия.Ответственный,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеПунктаПротоколаМероприятия.Вставить(
			"responsible",
			РеквизитыРоли.Владелец);
		ДанныеПунктаПротоколаМероприятия.Вставить(
			"responsibleMainAddressingObject",
			РеквизитыРоли.ОсновнойОбъектАдресации);
		ДанныеПунктаПротоколаМероприятия.Вставить(
			"responsibleSecondaryAddressingObject",
			РеквизитыРоли.ДополнительныйОбъектАдресации);
	Иначе
		ДанныеПунктаПротоколаМероприятия.Вставить("responsible", ПунктПротоколаМероприятия.Ответственный);
	КонецЕсли;
	
	Если ТипЗнч(ПунктПротоколаМероприятия.Проверяющий) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПунктПротоколаМероприятия.Проверяющий,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеПунктаПротоколаМероприятия.Вставить(
			"verifier",
			РеквизитыРоли.Владелец);
		ДанныеПунктаПротоколаМероприятия.Вставить(
			"verifierMainAddressingObject",
			РеквизитыРоли.ОсновнойОбъектАдресации);
		ДанныеПунктаПротоколаМероприятия.Вставить(
			"verifierSecondaryAddressingObject",
			РеквизитыРоли.ДополнительныйОбъектАдресации);
	Иначе
		ДанныеПунктаПротоколаМероприятия.Вставить("verifier", ПунктПротоколаМероприятия.Проверяющий);
	КонецЕсли;
	
	Если ТипЗнч(ПунктПротоколаМероприятия.Контролер) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПунктПротоколаМероприятия.Контролер,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеПунктаПротоколаМероприятия.Вставить(
			"controller",
			РеквизитыРоли.Владелец);
		ДанныеПунктаПротоколаМероприятия.Вставить(
			"controllerMainAddressingObject",
			РеквизитыРоли.ОсновнойОбъектАдресации);
		ДанныеПунктаПротоколаМероприятия.Вставить(
			"controllerSecondaryAddressingObject",
			РеквизитыРоли.ДополнительныйОбъектАдресации);
	Иначе
		ДанныеПунктаПротоколаМероприятия.Вставить("controller", ПунктПротоколаМероприятия.Контролер);
	КонецЕсли;
	
	ДанныеПунктаПротоколаМероприятия.Вставить("author", ПунктПротоколаМероприятия.Автор);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		ПунктПротоколаМероприятия,
		ДанныеПунктаПротоколаМероприятия,
		ОбъектXDTO,
		НаборКолонок);
	
	Для Каждого Исполнитель Из ПунктПротоколаМероприятия.Исполнители Цикл
		
		ИсполнительXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeetingActionItem");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			ИсполнительXDTO,
			"action",
			Исполнитель.НаименованиеЗадачи);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			ИсполнительXDTO,
			"description",
			Исполнитель.Описание);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			ИсполнительXDTO,
			"dueDate",
			Исполнитель.СрокИсполнения);
		
		Если ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ИсполнительXDTO,
				"employee",
				Исполнитель.Исполнитель);
			
		ИначеЕсли ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Исполнитель.Исполнитель,
				"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ИсполнительXDTO,
				"role",
				РеквизитыРоли.Владелец);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ИсполнительXDTO,
				"mainAddressingItem",
				РеквизитыРоли.ОсновнойОбъектАдресации);
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				ИсполнительXDTO,
				"secondaryAddressingItem",
				РеквизитыРоли.ДополнительныйОбъектАдресации);
			
		КонецЕсли;
		
		ОбъектXDTO.actions.Добавить(ИсполнительXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ПунктПротоколаМероприятия - СправочникОбъект.ПротоколыМероприятий - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeetingMinutesItem. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеПунктаПротоколаМероприятия(ПунктПротоколаМероприятия, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПунктПротоколаМероприятия.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПунктПротоколаМероприятия.Владелец, ОбъектXDTO, "meeting");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПунктПротоколаМероприятия.НомерПунктаПрограммы, ОбъектXDTO, "agendaItemNumber");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПунктПротоколаМероприятия.НомерПунктаПротокола, ОбъектXDTO, "minutesItemNumber");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПунктПротоколаМероприятия.Слушали, ОбъектXDTO, "proposed");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПунктПротоколаМероприятия.Выступили, ОбъектXDTO, "discussed");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПунктПротоколаМероприятия.Решили, ОбъектXDTO, "decided");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПунктПротоколаМероприятия.Исполнение, ОбъектXDTO, "performance");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПунктПротоколаМероприятия.СрокИсполненияПроцесса, ОбъектXDTO, "dueDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ПунктПротоколаМероприятия.СостояниеИсполнения, ОбъектXDTO, "status");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMTaskRoutingOption",
		ОбъектXDTO,
		"routingType",
		ПунктПротоколаМероприятия,
		"ВариантИсполнения");
	
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьПолнуюРольИзСвойстваXDTO(
		ПунктПротоколаМероприятия.Ответственный,
		ОбъектXDTO,
		"responsible",
		"responsibleMainAddressingObject",
		"responsibleSecondaryAddressingObject");
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьПолнуюРольИзСвойстваXDTO(
		ПунктПротоколаМероприятия.Проверяющий,
		ОбъектXDTO,
		"verifier",
		"verifierMainAddressingObject",
		"verifierSecondaryAddressingObject");
	ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьПолнуюРольИзСвойстваXDTO(
		ПунктПротоколаМероприятия.Контролер,
		ОбъектXDTO,
		"controller",
		"controllerMainAddressingObject",
		"controllerSecondaryAddressingObject");
		
	ПунктПротоколаМероприятия.Автор =
		ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.УчастникДействияДО(ОбъектXDTO.author);
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "actions") Тогда
		ПунктПротоколаМероприятия.Исполнители.Очистить();
		Для Каждого СтрокаXDTO Из ОбъектXDTO.actions Цикл
			
			Строка = ПунктПротоколаМероприятия.Исполнители.Добавить();
			
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.НаименованиеЗадачи, СтрокаXDTO, "action");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Описание, СтрокаXDTO, "description");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.СрокИсполнения, СтрокаXDTO, "dueDate");
			
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "employee") Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Исполнитель, СтрокаXDTO, "employee");
				
			ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "role") Тогда
				ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗаполнитьПолнуюРольИзСвойстваXDTO(
					Строка.Исполнитель,
					СтрокаXDTO,
					"role",
					"mainAddressingItem",
					"secondaryAddressingItem");
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Ищет подходящий пункт протокола мероприятия по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeetingMinutesItem.
//   Владелец - СправочникСсылка - владелец объекта, который требуется найти.
//
// Возвращаемое значение:
//   СправочникСсылка.ПротоколыМероприятий - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиПунктПротоколаМероприятия(ОбъектXDTO, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Наименование = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "meeting") Тогда
		Владелец = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.meeting);
		Если ЗначениеЗаполнено(Владелец)
				И Не Метаданные.Справочники.ПротоколыМероприятий.Владельцы.Содержит(Владелец.Метаданные()) Тогда
			Владелец = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = Новый Массив;
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПротоколыМероприятий.Ссылка
			|ИЗ
			|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
			|ГДЕ
			|	ПротоколыМероприятий.Наименование = &Наименование");
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Если ЗначениеЗаполнено(Владелец) Тогда
			ТекстЗапроса.Добавить("И ПротоколыМероприятий.Владелец = &Владелец");
			Запрос.УстановитьПараметр("Владелец", Владелец);
		КонецЕсли;
		Запрос.Текст = СтрСоединить(ТекстЗапроса, Символы.ПС);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонтактноеЛицо

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   КонтактноеЛицо - СправочникОбъект.КонтактныеЛица
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMContactPerson.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеКонтактногоЛица(КонтактноеЛицо, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеКонтактногоЛица = Новый Структура;
	ДанныеКонтактногоЛица.Вставить("correspondent", КонтактноеЛицо.Владелец);
	ДанныеКонтактногоЛица.Вставить("position", КонтактноеЛицо.Должность);
	ДанныеКонтактногоЛица.Вставить("comment", КонтактноеЛицо.Комментарий);
	ДанныеКонтактногоЛица.Вставить("privatePerson", КонтактноеЛицо.ФизЛицо);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		КонтактноеЛицо,
		ДанныеКонтактногоЛица,
		ОбъектXDTO,
		НаборКолонок);
	
	// Контактная информация.
	Если НаборКолонок = Неопределено Или НаборКолонок.Найти(НРег("contactInformation")) <> Неопределено Тогда
		ПолучитьКонтактнуюИнформациюОбъектаДО(КонтактноеЛицо, ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   КонтактноеЛицо - СправочникОбъект.КонтактныеЛица - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMContactPerson. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеКонтактногоЛица(КонтактноеЛицо, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КонтактноеЛицо.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КонтактноеЛицо.Владелец, ОбъектXDTO, "correspondent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КонтактноеЛицо.Должность, ОбъектXDTO, "position");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КонтактноеЛицо.Комментарий, ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(КонтактноеЛицо.ФизЛицо, ОбъектXDTO, "privatePerson");
	
	ЗаполнитьКонтактнуюИнформациюОбъектаДО(КонтактноеЛицо, ОбъектXDTO);
	
КонецПроцедуры

// Ищет подходящее контактное лицо по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMContactPerson.
//   Владелец - СправочникСсылка - владелец объекта, который требуется найти.
//
// Возвращаемое значение:
//   СправочникСсылка.КонтактныеЛица - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиКонтактноеЛицо(ОбъектXDTO, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Наименование = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "correspondent") Тогда
		Владелец = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.correspondent);
		Если ЗначениеЗаполнено(Владелец)
				И Не Метаданные.Справочники.КонтактныеЛица.Владельцы.Содержит(Владелец.Метаданные()) Тогда
			Владелец = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = Новый Массив;
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КонтактныеЛица.Ссылка
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|ГДЕ
			|	КонтактныеЛица.Наименование = &Наименование");
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Если ЗначениеЗаполнено(Владелец) Тогда
			ТекстЗапроса.Добавить("И КонтактныеЛица.Владелец = &Владелец");
			Запрос.УстановитьПараметр("Владелец", Владелец);
		КонецЕсли;
		Запрос.Текст = СтрСоединить(ТекстЗапроса, Символы.ПС);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ВидКонтактнойИнформации - СправочникОбъект.ВидыКонтактнойИнформации
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMContactInformationKind.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеВидаКонтактнойИнформации(ВидКонтактнойИнформации, ОбъектXDTO,
		НаборКолонок = Неопределено) Экспорт
	
	ДанныеВидаКИ = Новый Структура;
	ДанныеВидаКИ.Вставить("mandatory", ВидКонтактнойИнформации.ОбязательноеЗаполнение);
	ДанныеВидаКИ.Вставить("parent", ВидКонтактнойИнформации.Родитель);
	ДанныеВидаКИ.Вставить("predefinedName", ВидКонтактнойИнформации.ИмяПредопределенныхДанных);
	Если ЗначениеЗаполнено(ВидКонтактнойИнформации.Тип) Тогда
		ДанныеВидаКИ.Вставить("type",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ВидКонтактнойИнформации.Тип));
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		ВидКонтактнойИнформации,
		ДанныеВидаКИ,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ВидКонтактнойИнформации - СправочникОбъект.ВидыКонтактнойИнформации - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMContactInformationKind. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеВидаКонтактнойИнформации(ВидКонтактнойИнформации, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидКонтактнойИнформации.Наименование,
		ОбъектXDTO,
		"name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидКонтактнойИнформации.ОбязательноеЗаполнение,
		ОбъектXDTO,
		"mandatory");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ВидКонтактнойИнформации.Родитель,
		ОбъектXDTO,
		"parent");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMContactInformationType",
		ОбъектXDTO,
		"type",
		ВидКонтактнойИнформации,
		"Тип");
	
КонецПроцедуры

// Ищет подходящий вид контактной информации по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMContactInformationKind.
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыКонтактнойИнформации - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиВидКонтактнойИнформации(ОбъектXDTO) Экспорт
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Возврат Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(Наименование, Истина);
	
КонецФункции

// Дополняет объект XDTO данными табличной части Контактная информация объекта ДО.
//
// Параметры:
//   ОбъектДО - СправочникОбъект.Контрагенты
//            - СправочникОбъект.КонтактныеЛица
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCorrespondent, DMContactPerson.
//
Процедура ПолучитьКонтактнуюИнформациюОбъектаДО(ОбъектДО, ОбъектXDTO) Экспорт
	
	ОбъектXDTO.contactInformation = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactInformation");
	
	Для Каждого СтрокаКонтактнаяИнформация Из ОбъектДО.КонтактнаяИнформация Цикл
		
		ОбъектКИ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMContactInformationItem");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектКИ, "kind", СтрокаКонтактнаяИнформация.Вид);
		Если ЗначениеЗаполнено(СтрокаКонтактнаяИнформация.Вид) Тогда
			ОбработкаЗапросовXDTO.ПолучитьДанныеОбъектаДО(
				СтрокаКонтактнаяИнформация.Вид.ПолучитьОбъект(),
				ОбъектКИ.kind,
				"DMContactInformationKind",
				Неопределено);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКонтактнаяИнформация.Тип) Тогда
			ОбъектКИ.type = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СтрокаКонтактнаяИнформация.Тип);
		КонецЕсли;
		
		ОбъектКИ.description = СтрокаКонтактнаяИнформация.Представление;
		ОбъектКИ.fieldValues = СтрокаКонтактнаяИнформация.ЗначенияПолей;
		ОбъектКИ.country = СтрокаКонтактнаяИнформация.Страна;
		ОбъектКИ.territory = СтрокаКонтактнаяИнформация.Регион;
		ОбъектКИ.city = СтрокаКонтактнаяИнформация.Город;
		ОбъектКИ.email = СтрокаКонтактнаяИнформация.АдресЭП;
		ОбъектКИ.serverDomainName = СтрокаКонтактнаяИнформация.ДоменноеИмяСервера;
		ОбъектКИ.phoneNumber = СтрокаКонтактнаяИнформация.НомерТелефона;
		ОбъектКИ.localPhoneNumber = СтрокаКонтактнаяИнформация.НомерТелефонаБезКодов;
		
		ОбъектXDTO.contactInformation.items.Добавить(ОбъектКИ);
		
	КонецЦикла;
	
КонецПроцедуры

// Переносит в табличную часть Контактная информация данные из свойства contactInformation объекта XDTO.
//
// Параметры:
//   ОбъектДО - СправочникОбъект.Контрагенты
//            - СправочникОбъект.КонтактныеЛица
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCorrespondent, DMContactPerson.
//
Процедура ЗаполнитьКонтактнуюИнформациюОбъектаДО(ОбъектДО, ОбъектXDTO) Экспорт
	
	Если Не ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "contactInformation") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДО.КонтактнаяИнформация.Очистить();
	
	Для Каждого contactInformationItem Из ОбъектXDTO.contactInformation.items Цикл
		
		СтрокаКИ = ОбъектДО.КонтактнаяИнформация.Добавить();
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			СтрокаКИ.Вид, contactInformationItem, "kind");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			СтрокаКИ.Представление, contactInformationItem, "description");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			СтрокаКИ.ЗначенияПолей, contactInformationItem, "fieldValues");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			СтрокаКИ.Страна, contactInformationItem, "country");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			СтрокаКИ.Регион, contactInformationItem, "territory");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			СтрокаКИ.Город, contactInformationItem, "city");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			СтрокаКИ.АдресЭП, contactInformationItem, "email");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			СтрокаКИ.ДоменноеИмяСервера, contactInformationItem, "serverDomainName");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			СтрокаКИ.НомерТелефона, contactInformationItem, "phoneNumber");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			СтрокаКИ.НомерТелефонаБезКодов, contactInformationItem, "localPhoneNumber");
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
			"DMContactInformationType",
			contactInformationItem,
			"type",
			СтрокаКИ,
			"Тип");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Организация

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Организация - СправочникОбъект.Организации
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMOrganization.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеОрганизации(Организация, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("inn", Организация.ИНН);
	ДанныеОрганизации.Вставить("kpp", Организация.КПП);
	ДанныеОрганизации.Вставить("okpo", Организация.КодПоОКПО);
	ДанныеОрганизации.Вставить("fullName", Организация.НаименованиеПолное);
	ДанныеОрганизации.Вставить("comment", Организация.Комментарий);
	ДанныеОрганизации.Вставить("prefix", Организация.Префикс);
	ДанныеОрганизации.Вставить("VATpayer", Организация.ПлательщикНДС);
	Если ЗначениеЗаполнено(Организация.ЮрФизЛицо) Тогда
		ДанныеОрганизации.Вставить("legalPrivatePerson",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Организация.ЮрФизЛицо));
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		Организация,
		ДанныеОрганизации,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Организация - СправочникОбъект.Организации - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMOrganization. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеОрганизации(Организация, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.ИНН, ОбъектXDTO, "inn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.КПП, ОбъектXDTO, "kpp");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.КодПоОКПО, ОбъектXDTO, "okpo");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.Префикс, ОбъектXDTO, "prefix");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.ПлательщикНДС, ОбъектXDTO, "VATpayer");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.НаименованиеПолное, ОбъектXDTO, "fullName");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Организация.Комментарий, ОбъектXDTO, "comment");
	
	НовоеЗначениеЮрФизЛицо = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "legalPrivatePerson") Тогда
		НовоеЗначениеЮрФизЛицо = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО(
			"DMLegalPrivatePerson",
			ОбъектXDTO.legalPrivatePerson);
	Иначе
		Если Не ЗначениеЗаполнено(Организация.ЮрФизЛицо) Тогда
			Если ЗначениеЗаполнено(Организация.ИНН) Тогда
				Если СтрДлина(Организация.ИНН) = 12 Тогда
					НовоеЗначениеЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
				Иначе
					НовоеЗначениеЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				КонецЕсли;
			Иначе
				НовоеЗначениеЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Организация.ЮрФизЛицо <> НовоеЗначениеЮрФизЛицо И НовоеЗначениеЮрФизЛицо <> Неопределено Тогда
		Организация.ЮрФизЛицо = НовоеЗначениеЮрФизЛицо;
	КонецЕсли;
	
КонецПроцедуры

// Ищет подходящую организацию по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMOrganization.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиОрганизацию(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	Наименование = "";
	ИНН = "";
	КПП = "";
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "inn") Тогда
		ИНН = ОбъектXDTO.inn;
	КонецЕсли;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "kpp") Тогда
		КПП = ОбъектXDTO.kpp;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	0 КАК Приоритет
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	&ИНН <> """"
		|	И &КПП <> """"
		|	И Организации.ИНН = &ИНН
		|	И Организации.КПП = &КПП
		|	И НЕ Организации.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	1
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	&ИНН <> """"
		|	И (&КПП = """"
		|			ИЛИ Организации.КПП = """")
		|	И Организации.ИНН = &ИНН
		|	И Организации.Наименование = &Наименование
		|	И НЕ Организации.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	&КПП <> """"
		|	И (&ИНН = """"
		|			ИЛИ Организации.ИНН = """")
		|	И Организации.КПП = &КПП
		|	И Организации.Наименование = &Наименование
		|	И НЕ Организации.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	3
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	&ИНН <> """"
		|	И (&КПП = """"
		|			ИЛИ Организации.КПП = """")
		|	И Организации.ИНН = &ИНН
		|	И НЕ Организации.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	4
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(&ИНН = """"
		|			ИЛИ Организации.ИНН = """")
		|	И (&КПП = """"
		|			ИЛИ Организации.КПП = """")
		|	И Организации.Наименование = &Наименование
		|	И НЕ Организации.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет");
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Подразделение

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Подразделение - СправочникОбъект.СтруктураПредприятия
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMSubdivision.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеПодразделения(Подразделение, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеПодразделения = Новый Структура;
	ДанныеПодразделения.Вставить("head", Подразделение.Руководитель);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		Подразделение,
		ДанныеПодразделения,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Подразделение - СправочникОбъект.СтруктураПредприятия - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMSubdivision. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеПодразделения(Подразделение, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Подразделение.Наименование, ОбъектXDTO, "name");
	
	Руководитель = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "head") Тогда
		Руководитель = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.head);
	КонецЕсли;
	Если ЗначениеЗаполнено(Руководитель) И Руководитель <> Подразделение.Руководитель Тогда
		Подразделение.Руководитель = Руководитель;
	КонецЕсли;
	
КонецПроцедуры

// Ищет подходящее подразделение по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMSubdivision.
//
// Возвращаемое значение:
//   СправочникСсылка.СтруктураПредприятия - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиПодразделение(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	
	Руководитель = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "head") Тогда
		Руководитель = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.head);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Если ЗначениеЗаполнено(Руководитель) Тогда
			ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СтруктураПредприятия.Ссылка,
				|	1 КАК Приоритет
				|ИЗ
				|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
				|ГДЕ
				|	СтруктураПредприятия.Наименование = &Наименование
				|	И СтруктураПредприятия.Руководитель = &Руководитель
				|	И НЕ СтруктураПредприятия.ПометкаУдаления
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СтруктураПредприятия.Ссылка,
				|	2
				|ИЗ
				|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
				|ГДЕ
				|	СтруктураПредприятия.Наименование = &Наименование
				|	И НЕ СтруктураПредприятия.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет";
			Запрос.УстановитьПараметр("Руководитель", Руководитель);
		Иначе
			ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СтруктураПредприятия.Ссылка
				|ИЗ
				|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
				|ГДЕ
				|	СтруктураПредприятия.Наименование = &Наименование
				|	И НЕ СтруктураПредприятия.ПометкаУдаления";
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФизическоеЛицо

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ФизЛицо - СправочникОбъект.ФизическиеЛица
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMPrivatePerson.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеФизическогоЛица(ФизЛицо, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеФизЛица = Новый Структура;
	ДанныеФизЛица.Вставить("birthDay", ФизЛицо.ДатаРождения);
	ДанныеФизЛица.Вставить("comment", ФизЛицо.Комментарий);
	ДанныеФизЛица.Вставить("inn", ФизЛицо.ИНН);
	ДанныеФизЛица.Вставить("retirementInsuranceNumber", ФизЛицо.СтраховойНомерПФР);
	Если ЗначениеЗаполнено(ФизЛицо.Пол) Тогда
		ДанныеФизЛица.Вставить("gender",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ФизЛицо.Пол));
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(ФизЛицо, ДанныеФизЛица, ОбъектXDTO, НаборКолонок);
	
	// Контактная информация.
	Если НаборКолонок = Неопределено Или НаборКолонок.Найти(НРег("contactInformation")) <> Неопределено Тогда
		ПолучитьКонтактнуюИнформациюОбъектаДО(ФизЛицо, ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ФизЛицо - СправочникОбъект.ФизическиеЛица - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMPrivatePerson, DMUser, DMEmployee. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеФизическогоЛица(ФизЛицо, ОбъектXDTO) Экспорт
	
	Если (ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMUser")
				Или ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMEmployee"))
			И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "privatePerson") Тогда
		ФизЛицоXDTO = ОбъектXDTO.privatePerson;
	Иначе
		ФизЛицоXDTO = ОбъектXDTO;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФИОФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
		|ГДЕ
		|	ФИОФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо
		|	И ФИОФизическихЛиц.ФИО = &ФИО");
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицо.Ссылка);
	Запрос.УстановитьПараметр("ФИО", ФизЛицоXDTO.name);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если в прошлом у физического лица уже было ФИО, как то, что мы получили, то не меняем ФИО в объекте.
	НадоМенятьФИО = РезультатЗапроса.Пустой();
	Если НадоМенятьФИО Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ФизЛицо.Наименование, ФизЛицоXDTO, "name");
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ФизЛицо.ДатаРождения, ФизЛицоXDTO, "birthDay");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ФизЛицо.Комментарий, ФизЛицоXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ФизЛицо.ИНН, ФизЛицоXDTO, "inn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ФизЛицо.СтраховойНомерПФР, ФизЛицоXDTO, "retirementInsuranceNumber");
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФизЛицоXDTO, "gender") Тогда
		ФизЛицо.Пол = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО("DMPrivatePersonGender", ФизЛицоXDTO.gender);
	КонецЕсли;
	
	ЗаполнитьКонтактнуюИнформациюОбъектаДО(ФизЛицо, ОбъектXDTO);
	
КонецПроцедуры

// Ищет подходящее физическое лицо по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMPrivatePerson, DMUser, DMEmployee.
//
// Возвращаемое значение:
//   СправочникСсылка.ФизическиеЛица - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиФизическоеЛицо(ОбъектXDTO) Экспорт
	
	Если (ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMUser")
				Или ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMEmployee"))
			И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "privatePerson") Тогда
		ФизЛицоXDTO = ОбъектXDTO.privatePerson;
	Иначе
		ФизЛицоXDTO = ОбъектXDTO;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Наименование = "";
	ИНН = "";
	СтраховойНомерПФР = "";
	ДатаРождения = Дата(1, 1, 1);
	Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ФизЛицоXDTO, "name");
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФизЛицоXDTO, "inn") Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ИНН, ФизЛицоXDTO, "inn");
	КонецЕсли;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФизЛицоXDTO, "retirementInsuranceNumber") Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтраховойНомерПФР, ФизЛицоXDTO, "retirementInsuranceNumber");
	КонецЕсли;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФизЛицоXDTO, "birthDay") Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ДатаРождения, ФизЛицоXDTO, "birthDay");
	КонецЕсли;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФизЛицоXDTO, "gender") Тогда
		Пол = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО("DMPrivatePersonGender", ФизЛицоXDTO.gender);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ФизическиеЛица.Ссылка КАК Ссылка,
			|	0 КАК Приоритет
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО ФИОФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
			|ГДЕ
			|	&ИНН <> """"
			|	И &СтраховойНомерПФР <> """"
			|	И ФизическиеЛица.ИНН = &ИНН
			|	И ФизическиеЛица.СтраховойНомерПФР = &СтраховойНомерПФР
			|	И ФИОФизическихЛиц.ФИО = &Наименование
			|	И ФизическиеЛица.ДатаРождения = &ДатаРождения
			|	И ФизическиеЛица.Пол = &Пол
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка,
			|	1
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО ФИОФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
			|ГДЕ
			|	&ИНН <> """"
			|	И ФизическиеЛица.ИНН = &ИНН
			|	И ФИОФизическихЛиц.ФИО = &Наименование
			|	И ФизическиеЛица.ДатаРождения = &ДатаРождения
			|	И ФизическиеЛица.Пол = &Пол
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка,
			|	2
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО ФИОФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
			|ГДЕ
			|	&СтраховойНомерПФР <> """"
			|	И ФизическиеЛица.СтраховойНомерПФР = &СтраховойНомерПФР
			|	И ФИОФизическихЛиц.ФИО = &Наименование
			|	И ФизическиеЛица.ДатаРождения = &ДатаРождения
			|	И ФизическиеЛица.Пол = &Пол
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка,
			|	3
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО ФИОФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
			|ГДЕ
			|	ФИОФизическихЛиц.ФИО = &Наименование
			|	И ФизическиеЛица.ДатаРождения = &ДатаРождения
			|	И ФизическиеЛица.Пол = &Пол
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка,
			|	4
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО ФИОФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
			|ГДЕ
			|	&ИНН <> """"
			|	И ФизическиеЛица.ИНН = &ИНН
			|	И ФИОФизическихЛиц.ФИО = &Наименование
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка,
			|	5
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО ФИОФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
			|ГДЕ
			|	&СтраховойНомерПФР <> """"
			|	И ФизическиеЛица.СтраховойНомерПФР = &СтраховойНомерПФР
			|	И ФИОФизическихЛиц.ФИО = &Наименование
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка,
			|	6
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	&ИНН <> """"
			|	И &СтраховойНомерПФР <> """"
			|	И ФизическиеЛица.ИНН = &ИНН
			|	И ФизическиеЛица.СтраховойНомерПФР = &СтраховойНомерПФР
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка,
			|	7
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	&ИНН <> """"
			|	И ФизическиеЛица.ИНН = &ИНН
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка,
			|	8
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	&СтраховойНомерПФР <> """"
			|	И ФизическиеЛица.СтраховойНомерПФР = &СтраховойНомерПФР
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка,
			|	9
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО ФИОФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
			|ГДЕ
			|	ФИОФизическихЛиц.ФИО = &Наименование
			|	И ФизическиеЛица.Пол = &Пол
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка,
			|	10
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО ФИОФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
			|ГДЕ
			|	ФИОФизическихЛиц.ФИО = &Наименование
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет");
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("СтраховойНомерПФР", СтраховойНомерПФР);
		Запрос.УстановитьПараметр("ДатаРождения", ДатаРождения);
		Запрос.УстановитьПараметр("Пол", Пол);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Пользователь

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Пользователь - СправочникОбъект.Пользователи
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMUser.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеПользователя(Пользователь, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Колонки.Добавить(НРег(ИмяКолонки));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	ПолучатьСвойстваПользователяИБ = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("infoBaseUser")) <> Неопределено);
	
	ДанныеПользователя = Новый Структура;
	ДанныеПользователя.Вставить("privatePerson", Пользователь.ФизЛицо);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		Пользователь,
		ДанныеПользователя,
		ОбъектXDTO,
		НаборКолонок);
	
	Если ПолучатьСвойстваПользователяИБ Тогда
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(Пользователь.ИдентификаторПользователяИБ);
		Исключение
			ЗаписьЖурналаРегистрации(
				ОбработкаЗапросовXDTO.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,
				Пользователь,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			СвойстваПользователяИБ = Неопределено;
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
		Если СвойстваПользователяИБ <> Неопределено Тогда
			ОбъектXDTO.infoBaseUser = ОбработкаЗапросовXDTO.СоздатьОбъект("DMInfoBaseUser");
			ОбъектXDTO.infoBaseUser.objectId = ОбработкаЗапросовXDTO.СоздатьObjectID(
				Строка(Пользователь.ИдентификаторПользователяИБ),
				"DMInfoBaseUser");
			ОбъектXDTO.infoBaseUser.name = СвойстваПользователяИБ.Имя;
			ОбъектXDTO.infoBaseUser.OSUserName = СвойстваПользователяИБ.ПользовательОС;
			ОбъектXDTO.infoBaseUser.email = СвойстваПользователяИБ.АдресЭлектроннойПочты;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Пользователь - СправочникОбъект.Пользователи - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMUser, DMPrivatePerson, DMEmployee. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеПользователя(Пользователь, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Пользователь.Наименование, ОбъектXDTO, "name");
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMPrivatePerson") Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(Пользователь.ФизЛицо, ОбъектXDTO);
	Иначе
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Пользователь.ФизЛицо, ОбъектXDTO, "privatePerson");
	КонецЕсли;
	
КонецПроцедуры

// Ищет подходящего пользователя по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMUser, DMPrivatePerson, DMEmployee.
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиПользователя(ОбъектXDTO) Экспорт
	
	Пользователь = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "user") Тогда
		Пользователь = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.user);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Пользователь;
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "infoBaseUser") Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO.infoBaseUser, "objectID")
				И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ОбъектXDTO.infoBaseUser.objectID.ID) Тогда
			Пользователь = Пользователи.НайтиПоИдентификатору(
				Новый УникальныйИдентификатор(ОбъектXDTO.infoBaseUser.objectID.ID));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Возврат Пользователь;
		КонецЕсли;
		
		ПодходящийПользовательИБ = Неопределено;
		Если ЗначениеЗаполнено(ОбъектXDTO.infoBaseUser.name) Тогда
			ПодходящийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ОбъектXDTO.infoBaseUser.name);
		КонецЕсли;
		Если ПодходящийПользовательИБ = Неопределено
				И (ЗначениеЗаполнено(ОбъектXDTO.infoBaseUser.OSUserName)
					Или ЗначениеЗаполнено(ОбъектXDTO.infoBaseUser.email)) Тогда
			Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
				Если (ЗначениеЗаполнено(ОбъектXDTO.infoBaseUser.email)
							И СокрЛП(НРег(ПользовательИБ.АдресЭлектроннойПочты)) = СокрЛП(НРег(ОбъектXDTO.infoBaseUser.email)))
						Или (ЗначениеЗаполнено(ОбъектXDTO.infoBaseUser.OSUserName)
							И СокрЛП(НРег(ПользовательИБ.ПользовательОС)) = СокрЛП(НРег(ОбъектXDTO.infoBaseUser.OSUserName))) Тогда
					ПодходящийПользовательИБ = ПользовательИБ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ПодходящийПользовательИБ <> Неопределено Тогда
			Пользователь = Пользователи.НайтиПоИдентификатору(ПодходящийПользовательИБ.УникальныйИдентификатор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Возврат Пользователь;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	
	ФизЛицо = Неопределено;
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMPrivatePerson") Тогда
		ФизЛицо = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO);
	Иначе
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "privatePerson") Тогда
			ФизЛицо = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.privatePerson);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	Пользователи.Ссылка,
				|	1 КАК Приоритет
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Наименование = &Наименование
				|	И Пользователи.ФизЛицо = &ФизЛицо
				|	И НЕ Пользователи.ПометкаУдаления
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Пользователи.Ссылка,
				|	2
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ФизЛицо = &ФизЛицо
				|	И НЕ Пользователи.ПометкаУдаления
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Пользователи.Ссылка,
				|	3
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Наименование = &Наименование
				|	И НЕ Пользователи.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет";
			Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	Пользователи.Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Наименование = &Наименование
				|	И НЕ Пользователи.ПометкаУдаления";
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Пользователь = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции

#КонецОбласти

#Область Сотрудник

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Сотрудник - СправочникОбъект.Сотрудники
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMEmployee.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеСотрудника(Сотрудник, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("position", Сотрудник.Должность);
	ДанныеСотрудника.Вставить("subdivision", Сотрудник.Подразделение);
	ДанныеСотрудника.Вставить("privatePerson", Сотрудник.Владелец);
	ДанныеСотрудника.Вставить("beginDate", Сотрудник.ДатаНачалаДействия);
	ДанныеСотрудника.Вставить("endDate", Сотрудник.ДатаОкончанияДействия);
	ДанныеСотрудника.Вставить("isActual", Сотрудник.Действует);
	ДанныеСотрудника.Вставить("manager", ДелопроизводствоКлиентСервер.ПолучитьНепосредственногоРуководителя(
		Сотрудник.Подразделение, Сотрудник.Ссылка));
	ДанныеСотрудника.Вставить("mainEmployee", Сотрудники.ЭтоОсновнойСотрудникФизЛица(
		Сотрудник.Владелец, Сотрудник.Ссылка));
	ДанныеСотрудника.Вставить("user", Сотрудники.ПользовательСотрудника(Сотрудник.Ссылка));
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		Сотрудник,
		ДанныеСотрудника,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Сотрудник - СправочникОбъект.Сотрудники - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMEmployee, DMPrivatePerson, DMUser. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеСотрудника(Сотрудник, ОбъектXDTO) Экспорт
	
	НастройкиУзла = ОбработкаЗапросовXDTOПовтИсп.НастройкиУзла();
	
	Если НастройкиУзла.СопоставлятьСотрудниковПоПодразделению Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Сотрудник.Подразделение, ОбъектXDTO, "subdivision");
	ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "subdivision") Тогда
		Подразделение = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.subdivision);
		Если ЗначениеЗаполнено(Подразделение) И Сотрудник.Подразделение <> Подразделение Тогда
			Сотрудник.Подразделение = Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиУзла.СопоставлятьСотрудниковПоДолжности Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Сотрудник.Должность, ОбъектXDTO, "position");
	ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "position") Тогда
		Должность = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.position);
		Если ЗначениеЗаполнено(Должность) И Сотрудник.Должность <> Должность Тогда
			Сотрудник.Должность = Должность;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Сотрудник.ДатаНачалаДействия, ОбъектXDTO, "beginDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Сотрудник.ДатаОкончанияДействия, ОбъектXDTO, "endDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Сотрудник.Действует, ОбъектXDTO, "isActual");
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "subdivision")
			И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO.subdivision, "head") Тогда
		Сотрудник.ДополнительныеСвойства.Вставить("Подразделение", ОбъектXDTO.subdivision);
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMPrivatePerson") Тогда
		
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(Сотрудник.Владелец, ОбъектXDTO);
		
	ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMUser") Тогда
		
		Владелец = Справочники.ФизическиеЛица.ПустаяСсылка();
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "privatePerson") Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Владелец, ОбъектXDTO, "privatePerson");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Владелец) Тогда
			Пользователь = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO);
			Если ЗначениеЗаполнено(Пользователь) Тогда
				Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизЛицо");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Владелец) И Сотрудник.Владелец <> Владелец Тогда
			Сотрудник.Владелец = Владелец;
		КонецЕсли;
		
	Иначе
		
		Владелец = Справочники.ФизическиеЛица.ПустаяСсылка();
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "privatePerson") Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Владелец, ОбъектXDTO, "privatePerson");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Владелец) И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "user") Тогда
			Пользователь = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.user);
			Если ЗначениеЗаполнено(Пользователь) Тогда
				Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизЛицо");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Владелец) И Сотрудник.Владелец <> Владелец Тогда
			Сотрудник.Владелец = Владелец;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сотрудник.Должность) Тогда
		НеизвестнаяДолжность = Справочники.Должности.НайтиПоНаименованию(НСтр("ru='Неизвестная должность'"), Истина);
		Если Не ЗначениеЗаполнено(НеизвестнаяДолжность) Тогда
			НеизвестнаяДолжностьОбъект = Справочники.Должности.СоздатьЭлемент();
			НеизвестнаяДолжностьОбъект.Наименование = НСтр("ru='Неизвестная должность'");
			НеизвестнаяДолжностьОбъект.Записать();
			НеизвестнаяДолжность = НеизвестнаяДолжностьОбъект.Ссылка;
		КонецЕсли;
		Сотрудник.Должность = НеизвестнаяДолжность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сотрудник.Ссылка) Тогда
		
		// Добавим связь с пользователем
		Пользователь = Неопределено;
		Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMEmployee")
				И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "user") Тогда
			Пользователь = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.user);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(
				ОбъектXDTO,
				"Справочник.Пользователи");
		КонецЕсли;
		Если ЗначениеЗаполнено(Пользователь) Тогда
			РегистрыСведений.СотрудникиПользователей.ДобавитьЗапись(Пользователь, Сотрудник.Ссылка);
		КонецЕсли;
		
		// Установим признак "Основной"
		Если ЗначениеЗаполнено(Сотрудник.Владелец)
				И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "mainEmployee")
				И ОбъектXDTO.mainEmployee = Истина Тогда
			РегистрыСведений.ОсновныеСотрудники.УстановитьОсновногоСотрудника(Сотрудник.Владелец, Сотрудник.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Ищет подходящего сотрудника по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMEmployee, DMPrivatePerson, DMUser.
//   Владелец - СправочникСсылка - владелец объекта, который требуется найти.
//
// Возвращаемое значение:
//   СправочникСсылка.Сотрудники - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиСотрудника(ОбъектXDTO, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	
	Пользователь = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "user") Тогда
		Пользователь = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.user);
	КонецЕсли;
	
	ВладелецЕстьВXDTO = Ложь;
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMPrivatePerson") Тогда
		
		Владелец = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO);
		ВладелецЕстьВXDTO = Истина;
		
	ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(ОбъектXDTO, "DMUser") Тогда
		
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "privatePerson") Тогда
			Владелец = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.privatePerson);
			ВладелецЕстьВXDTO = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Владелец) Тогда
			Пользователь = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO);
			Если ЗначениеЗаполнено(Пользователь) Тогда
				Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизЛицо");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "privatePerson") Тогда
		
		Владелец = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.privatePerson);
		ВладелецЕстьВXDTO = Истина;
		
		Если Не ЗначениеЗаполнено(Владелец) И ЗначениеЗаполнено(Пользователь) Тогда
			Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизЛицо");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВладелецЕстьВXDTO И Не ЗначениеЗаполнено(Владелец) Тогда
		// Владелец - обязательный реквизит. Если владелец задан в XDTO объекте, но отсутствует в базе,
		// сотрудник точно не будет найден. Нужно будет создать нового сотрудника с новым владельцем.
		Возврат Результат;
	КонецЕсли;
	
	НастройкиУзла = ОбработкаЗапросовXDTOПовтИсп.НастройкиУзла();
	
	Подразделение = Неопределено;
	Если НастройкиУзла.СопоставлятьСотрудниковПоПодразделению
			И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "subdivision") Тогда
		Подразделение = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.subdivision);
		Если Не ЗначениеЗаполнено(Подразделение) Тогда
			// Подразделение - обязательный реквизит. Если Подразделение задано в XDTO объекте, но отсутствует в базе,
			// сотрудник точно не будет найден. Нужно будет создать нового сотрудника с новым подразделением.
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Должность = Неопределено;
	Если НастройкиУзла.СопоставлятьСотрудниковПоДолжности
			И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "position") Тогда
		Должность = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.position);
		Если Не ЗначениеЗаполнено(Должность) Тогда
			// Должность - обязательный реквизит. Если Должность задана в XDTO объекте, но отсутствует в базе,
			// сотрудник точно не будет найден. Нужно будет создать нового сотрудника с новой должностью.
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Запрос = Новый Запрос;
		ТекстЗапросаМассив = Новый Массив;
		ОсновнойЗапрос =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Сотрудники.Ссылка,
			|	НЕ ОсновныеСотрудники.Сотрудник ЕСТЬ NULL КАК Основной
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудники КАК ОсновныеСотрудники
			|		ПО Сотрудники.Ссылка = ОсновныеСотрудники.Сотрудник
			|		И Сотрудники.Владелец = ОсновныеСотрудники.ФизическоеЛицо
			|ГДЕ
			|	ИСТИНА";
		Если ЗначениеЗаполнено(Владелец) Тогда
			ОсновнойЗапрос = СтрЗаменить(ОсновнойЗапрос, "ИСТИНА", "Сотрудники.Владелец = &Владелец");
			Запрос.УстановитьПараметр("Владелец", Владелец);
		Иначе
			ОсновнойЗапрос = СтрЗаменить(ОсновнойЗапрос, "ИСТИНА", "Сотрудники.Владелец.Наименование = &Наименование");
			Запрос.УстановитьПараметр("Наименование", Наименование);
		КонецЕсли;
		ТекстЗапросаМассив.Добавить(ОсновнойЗапрос);
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ТекстЗапросаМассив.Добавить("И Сотрудники.Подразделение = &Подразделение");
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
		КонецЕсли;
		Если ЗначениеЗаполнено(Должность) Тогда
			ТекстЗапросаМассив.Добавить("И Сотрудники.Должность = &Должность");
			Запрос.УстановитьПараметр("Должность", Должность);
		КонецЕсли;
		ТекстЗапросаМассив.Добавить("УПОРЯДОЧИТЬ ПО Основной УБЫВ");
		Запрос.Текст = СтрСоединить(ТекстЗапросаМассив, Символы.ПС);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) И ЗначениеЗаполнено(Пользователь) Тогда
		Результат = Сотрудники.ОсновнойСотрудникПользователя(Пользователь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Валюта

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Валюта - СправочникОбъект.Валюты
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCurrency.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеВалюты(Валюта, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеВалюты = Новый Структура;
	ДанныеВалюты.Вставить("code", Валюта.Код);
	ДанныеВалюты.Вставить("fullName", Валюта.НаименованиеПолное);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(Валюта, ДанныеВалюты, ОбъектXDTO, НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Валюта - СправочникОбъект.Валюты - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCurrency. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеВалюты(Валюта, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Валюта.Код, ОбъектXDTO, "code");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Валюта.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Валюта.НаименованиеПолное, ОбъектXDTO, "fullName");
	
КонецПроцедуры

// Ищет подходящую валюту по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCurrency.
//
// Возвращаемое значение:
//   СправочникСсылка.Валюты - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиВалюту(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Код = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Код, ОбъектXDTO, "code");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Валюты.Ссылка КАК Ссылка,
		|	0 КАК Приоритет
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	Валюты.Код = &Код
		|	И НЕ Валюты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Валюты.Ссылка,
		|	1
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	Валюты.Наименование = &Наименование
		|	И НЕ Валюты.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет");
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Код", Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Банк

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Банк - СправочникОбъект.КлассификаторБанков
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMBank.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеБанка(Банк, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеБанка = Новый Структура;
	ДанныеБанка.Вставить("BIC", Банк.Код);
	ДанныеБанка.Вставить("country", Банк.Страна);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(Банк, ДанныеБанка, ОбъектXDTO, НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Банк - СправочникОбъект.КлассификаторБанков - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMBank. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеБанка(Банк, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Банк.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Банк.Код, ОбъектXDTO, "BIC");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Банк.Страна, ОбъектXDTO, "country");
	
КонецПроцедуры

// Ищет подходящий банк по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMBank.
//
// Возвращаемое значение:
//   СправочникСсылка.КлассификаторБанков - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиБанк(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "BIC") И ЗначениеЗаполнено(ОбъектXDTO.BIC) Тогда
		Результат = Справочники.КлассификаторБанков.НайтиПоКоду(ОбъектXDTO.BIC);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		Результат = Справочники.КлассификаторБанков.НайтиПоНаименованию(Наименование, Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область БанковскийСчет

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   БанковскийСчет - СправочникОбъект.БанковскиеСчета
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMBankAccount.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеБанковскогоСчета(БанковскийСчет, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеБанковскогоСчета = Новый Структура;
	ДанныеБанковскогоСчета.Вставить("number", БанковскийСчет.НомерСчета);
	ДанныеБанковскогоСчета.Вставить("owner", БанковскийСчет.Владелец);
	ДанныеБанковскогоСчета.Вставить("bank", БанковскийСчет.Банк);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		БанковскийСчет,
		ДанныеБанковскогоСчета,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   БанковскийСчет - СправочникОбъект.БанковскиеСчета - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMBankAccount. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеБанковскогоСчета(БанковскийСчет, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БанковскийСчет.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БанковскийСчет.НомерСчета, ОбъектXDTO, "number");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БанковскийСчет.Владелец, ОбъектXDTO, "owner");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(БанковскийСчет.Банк, ОбъектXDTO, "bank");
	
КонецПроцедуры

// Ищет подходящий банковский счет по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMBankAccount.
//   Владелец - СправочникСсылка - владелец объекта, который требуется найти.
//
// Возвращаемое значение:
//   СправочникСсылка.БанковскиеСчета - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиБанковскийСчет(ОбъектXDTO, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "owner") Тогда
		Владелец = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.owner);
		Если ЗначениеЗаполнено(Владелец)
				И Не Метаданные.Справочники.БанковскиеСчета.Владельцы.Содержит(Владелец.Метаданные()) Тогда
			Владелец = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Банк = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "bank") Тогда
		Банк = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.bank);
	КонецЕсли;
	НомерСчета = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "number") Тогда
		НомерСчета = ОбъектXDTO.number;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = Новый Массив;
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанковскиеСчета.Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.НомерСчета = &НомерСчета");
		Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
		Если ЗначениеЗаполнено(Банк) Тогда
			ТекстЗапроса.Добавить("И БанковскиеСчета.Банк = &Банк");
			Запрос.УстановитьПараметр("Банк", Банк);
		КонецЕсли;
		Если ЗначениеЗаполнено(Владелец) Тогда
			ТекстЗапроса.Добавить("И БанковскиеСчета.Владелец = &Владелец");
			Запрос.УстановитьПараметр("Владелец", Владелец);
		КонецЕсли;
		Запрос.Текст = СтрСоединить(ТекстЗапроса, Символы.ПС);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатьяДвиженияДенежныхСредств

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   СтатьяДвиженияДенежныхСредств - СправочникОбъект.СтатьиДвиженияДенежныхСредств
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCashFlowItem.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеСтатьиДвиженияДенежныхСредств(СтатьяДвиженияДенежныхСредств, ОбъектXDTO,
		НаборКолонок = Неопределено) Экспорт
	
	ДанныеСтатьиДвиженияДенежныхСредств = Новый Структура;
	ДанныеСтатьиДвиженияДенежныхСредств.Вставить("description", СтатьяДвиженияДенежныхСредств.Описание);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		СтатьяДвиженияДенежныхСредств,
		ДанныеСтатьиДвиженияДенежныхСредств,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   СтатьяДвиженияДенежныхСредств - СправочникОбъект.СтатьиДвиженияДенежныхСредств - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCashFlowItem. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеСтатьиДвиженияДенежныхСредств(СтатьяДвиженияДенежныхСредств, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		СтатьяДвиженияДенежныхСредств.Наименование,
		ОбъектXDTO,
		"name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		СтатьяДвиженияДенежныхСредств.Описание,
		ОбъектXDTO,
		"description");
	
КонецПроцедуры

// Ищет подходящую статью ДДС по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCashFlowItem.
//
// Возвращаемое значение:
//   СправочникСсылка.СтатьиДвиженияДенежныхСредств - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиСтатьюДвиженияДенежныхСредств(ОбъектXDTO) Экспорт
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(Наименование, Истина);
	
КонецФункции

#КонецОбласти

#Область Страна

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Страна - СправочникОбъект.СтраныМира
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCountry.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеСтраны(Страна, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеСтраны = Новый Структура;
	ДанныеСтраны.Вставить("code", Страна.Код);
	ДанныеСтраны.Вставить("codeAlpha2", Страна.КодАльфа2);
	ДанныеСтраны.Вставить("codeAlpha3", Страна.КодАльфа3);
	ДанныеСтраны.Вставить("EAEUMember", Страна.УчастникЕАЭС);
	ДанныеСтраны.Вставить("longDescription", Страна.НаименованиеПолное);
	ДанныеСтраны.Вставить("internationalDescription", Страна.МеждународноеНаименование);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(Страна, ДанныеСтраны, ОбъектXDTO, НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Страна - СправочникОбъект.СтраныМира - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCountry. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеСтраны(Страна, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Страна.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Страна.Код, ОбъектXDTO, "code");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Страна.КодАльфа2, ОбъектXDTO, "codeAlpha2");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Страна.КодАльфа3, ОбъектXDTO, "codeAlpha3");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Страна.НаименованиеПолное, ОбъектXDTO, "longDescription");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Страна.МеждународноеНаименование, ОбъектXDTO, "internationalDescription");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Страна.УчастникЕАЭС, ОбъектXDTO, "EAEUMember");
	
КонецПроцедуры

// Ищет подходящую страну по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCountry.
//
// Возвращаемое значение:
//   СправочникСсылка.СтраныМира - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиСтрану(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Код = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Код, ОбъектXDTO, "code");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтраныМира.Ссылка КАК Ссылка,
		|	0 КАК Приоритет
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|ГДЕ
		|	СтраныМира.Код = &Код
		|	И НЕ СтраныМира.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтраныМира.Ссылка,
		|	1
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|ГДЕ
		|	СтраныМира.Наименование = &Наименование
		|	И НЕ СтраныМира.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет");
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Код", Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтавкаНДС

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   СтавкаНДС - СправочникОбъект.СтавкиНДС
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMVATRateUniversal.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеСтавкиНДС(СтавкаНДС, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеСтавкиНДС = Новый Структура;
	ДанныеСтавкиНДС.Вставить("beginOfPeriod", СтавкаНДС.НачалоПериода);
	ДанныеСтавкиНДС.Вставить("endOfPeriod", СтавкаНДС.КонецПериода);
	ДанныеСтавкиНДС.Вставить("rate", СтавкаНДС.Ставка);
	ДанныеСтавкиНДС.Вставить("calculatedRate", СтавкаНДС.РасчетнаяСтавка);
	ДанныеСтавкиНДС.Вставить("country", СтавкаНДС.Страна);
	
	ЗначениеПеречисленияVATRate = ЗначениеПеречисленияVATRate(СтавкаНДС.Ссылка);
	Если ЗначениеЗаполнено(ЗначениеПеречисленияVATRate) Тогда
		ДанныеСтавкиНДС.Вставить("predefinedName", ЗначениеПеречисленияVATRate);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(СтавкаНДС, ДанныеСтавкиНДС, ОбъектXDTO, НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   СтавкаНДС - СправочникОбъект.СтавкиНДС - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMVATRateUniversal. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеСтавкиНДС(СтавкаНДС, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтавкаНДС.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтавкаНДС.НачалоПериода, ОбъектXDTO, "beginOfPeriod");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтавкаНДС.КонецПериода, ОбъектXDTO, "endOfPeriod");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтавкаНДС.Ставка, ОбъектXDTO, "rate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтавкаНДС.РасчетнаяСтавка, ОбъектXDTO, "calculatedRate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтавкаНДС.Страна, ОбъектXDTO, "country");
	
КонецПроцедуры

// Ищет подходящую ставку НДС по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMVATRateUniversal.
//
// Возвращаемое значение:
//   СправочникСсылка.СтавкиНДС - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиСтавкуНДС(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "predefinedName") Тогда
		Результат = ЗначениеСтавкиНДСИзПеречисленияVATRate(ОбъектXDTO.predefinedName);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат)
			И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "externalObject")
			И Лев(ОбъектXDTO.externalObject.type, 13) = "Перечисление." Тогда
		VATRate = НРег(ОбъектXDTO.externalObject.ID);
		Если VATRate = "безндс" Тогда
			Результат = Справочники.СтавкиНДС.БезНДС;
		ИначеЕсли VATRate = "ндс0" Тогда
			Результат = Справочники.СтавкиНДС.НДС0;
		Иначе
			Если VATRate = "ндс5" Тогда
				Результат = УчетНДС.СтавкаНДСИзЧисла(5);
			ИначеЕсли VATRate = "ндс7" Тогда
				Результат = УчетНДС.СтавкаНДСИзЧисла(7);
			ИначеЕсли VATRate = "ндс10" Тогда
				Результат = УчетНДС.СтавкаНДСИзЧисла(10);
			ИначеЕсли VATRate = "ндс18" Тогда
				Результат = УчетНДС.СтавкаНДСИзЧисла(18);
			ИначеЕсли VATRate = "ндс20" Тогда
				Результат = УчетНДС.СтавкаНДСИзЧисла(20);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		Ставка = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Ставка, ОбъектXDTO, "rate");
		РасчетнаяСтавка = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РасчетнаяСтавка, ОбъектXDTO, "calculatedRate");
		Страна = Неопределено;
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "country") Тогда
			Страна = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.country);
		КонецЕсли;
		Если Страна = Неопределено Тогда
			Страна = Справочники.СтраныМира.ПустаяСсылка();
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СтавкиНДС.Ссылка КАК Ссылка,
			|	0 КАК Приоритет
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|ГДЕ
			|	СтавкиНДС.Наименование = &Наименование
			|	И СтавкиНДС.Ставка = &Ставка
			|	И СтавкиНДС.РасчетнаяСтавка = &РасчетнаяСтавка
			|	И СтавкиНДС.Страна = &Страна
			|	И НЕ СтавкиНДС.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СтавкиНДС.Ссылка КАК Ссылка,
			|	1 КАК Приоритет
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|ГДЕ
			|	СтавкиНДС.Ставка = &Ставка
			|	И СтавкиНДС.РасчетнаяСтавка = &РасчетнаяСтавка
			|	И СтавкиНДС.Страна = &Страна
			|	И НЕ СтавкиНДС.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СтавкиНДС.Ссылка КАК Ссылка,
			|	2 КАК Приоритет
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|ГДЕ
			|	СтавкиНДС.Наименование = &Наименование
			|	И СтавкиНДС.Ставка = &Ставка
			|	И СтавкиНДС.РасчетнаяСтавка = &РасчетнаяСтавка
			|	И НЕ СтавкиНДС.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СтавкиНДС.Ссылка КАК Ссылка,
			|	3 КАК Приоритет
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|ГДЕ
			|	СтавкиНДС.Ставка = &Ставка
			|	И СтавкиНДС.РасчетнаяСтавка = &РасчетнаяСтавка
			|	И НЕ СтавкиНДС.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СтавкиНДС.Ссылка КАК Ссылка,
			|	4 КАК Приоритет
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|ГДЕ
			|	СтавкиНДС.Наименование = &Наименование
			|	И СтавкиНДС.Ставка = &Ставка
			|	И НЕ СтавкиНДС.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СтавкиНДС.Ссылка КАК Ссылка,
			|	5 КАК Приоритет
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|ГДЕ
			|	СтавкиНДС.Ставка = &Ставка
			|	И НЕ СтавкиНДС.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СтавкиНДС.Ссылка,
			|	6
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|ГДЕ
			|	СтавкиНДС.Наименование = &Наименование
			|	И НЕ СтавкиНДС.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет");
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("Ставка", Ставка);
		Запрос.УстановитьПараметр("РасчетнаяСтавка", РасчетнаяСтавка);
		Запрос.УстановитьПараметр("Страна", Страна);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Номенклатура

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Номенклатура - СправочникОбъект.Номенклатура.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMProduct.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеНоменклатуры(Номенклатура, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("isFolder", Номенклатура.ЭтоГруппа);
	ДанныеНоменклатуры.Вставить("parent", Номенклатура.Родитель);
	Если Не Номенклатура.ЭтоГруппа Тогда
		ДанныеНоменклатуры.Вставить("code", Номенклатура.Код);
		ДанныеНоменклатуры.Вставить("price", Номенклатура.Цена);
		ДанныеНоменклатуры.Вставить("measurementUnit", Номенклатура.ЕдиницаИзмерения);
		ДанныеНоменклатуры.Вставить("article", Номенклатура.Артикул);
		ДанныеНоменклатуры.Вставить("VATRateUniversal", Номенклатура.СтавкаНДС);
		ЗначениеПеречисленияVATRate = ЗначениеПеречисленияVATRate(Номенклатура.СтавкаНДС);
		Если ЗначениеЗаполнено(ЗначениеПеречисленияVATRate) Тогда
			ДанныеНоменклатуры.Вставить("VATRate", ЗначениеПеречисленияVATRate);
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		Номенклатура,
		ДанныеНоменклатуры,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет номенклатуру Документооборота по данным объекта XDTO.
//
// Параметры:
//   Объект - СправочникОбъект.Номенклатура - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMProduct. Источник данных.
//
Процедура ЗаполнитьДанныеНоменклатуры(Объект, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Родитель, ОбъектXDTO, "parent");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Код, ОбъектXDTO, "code");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Наименование, ОбъектXDTO, "name");
	
	Если Не Объект.ЭтоГруппа Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Цена, ОбъектXDTO, "price");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ЕдиницаИзмерения, ОбъектXDTO, "measurementUnit");
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Артикул, ОбъектXDTO, "article");
		
		СтавкаНДС = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(СтавкаНДС, ОбъектXDTO, "VATRateUniversal");
		Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС = ЗначениеСтавкиНДСИзПеречисленияVATRate(ОбъектXDTO.VATRate);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтавкаНДС) И Объект.СтавкаНДС <> СтавкаНДС Тогда
			Объект.СтавкаНДС = СтавкаНДС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Ищет подходящую номенклатуру по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMProduct.
//
// Возвращаемое значение:
//   СправочникСсылка.Номенклатура - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиНоменклатуру(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	ЭтоПапка = ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "isFolder") И ОбъектXDTO.isFolder = Истина;
	
	Если Не ЭтоПапка И ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "article")
			И ЗначениеЗаполнено(ОбъектXDTO.article) Тогда
		Результат = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", ОбъектXDTO.article);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Наименование = "";
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
		Результат = Справочники.Номенклатура.НайтиПоНаименованию(Наименование, Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЕдиницаИзмерения

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ЕдиницаИзмерения - СправочникОбъект.КлассификаторЕдиницИзмерения.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeasurementUnit.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеЕдиницыИзмерения(ЕдиницаИзмерения, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеЕдиницыИзмерения = Новый Структура;
	ДанныеЕдиницыИзмерения.Вставить("fullName", ЕдиницаИзмерения.НаименованиеПолное);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		ЕдиницаИзмерения,
		ДанныеЕдиницыИзмерения,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет единицу измерения Документооборота по данным объекта XDTO.
//
// Параметры:
//   ЕдиницаИзмерения - СправочникОбъект.КлассификаторЕдиницИзмерения - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeasurementUnit. Источник данных.
//
Процедура ЗаполнитьДанныеЕдиницыИзмерения(ЕдиницаИзмерения, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ЕдиницаИзмерения.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ЕдиницаИзмерения.НаименованиеПолное, ОбъектXDTO, "fullName");
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения.НаименованиеПолное) Тогда
		ЕдиницаИзмерения.НаименованиеПолное = ЕдиницаИзмерения.Наименование;
	КонецЕсли;
	
КонецПроцедуры

// Ищет подходящую единицу измерения по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeasurementUnit.
//
// Возвращаемое значение:
//   СправочникСсылка.КлассификаторЕдиницИзмерения - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиЕдиницуИзмерения(ОбъектXDTO) Экспорт
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	Возврат Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Наименование, Истина);
	
КонецФункции

#КонецОбласти

#Область РазделНоменклатурыДел

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   РазделНоменклатурыДел - СправочникОбъект.РазделыНоменклатурыДел
//                         - СправочникСсылка.РазделыНоменклатурыДел
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCaseFilesListSections.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеРазделаНоменклатурыДел(РазделНоменклатурыДел, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеРазделаНоменклатурыДел = Новый Структура;
	РеквизитыРазделаНоменклатурыДел = Новый Структура;
	
	Если ТипЗнч(РазделНоменклатурыДел) = Тип("СправочникОбъект.РазделыНоменклатурыДел")
			Или ТипЗнч(РазделНоменклатурыДел) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ДанныеРазделаНоменклатурыДел.Вставить("year", РазделНоменклатурыДел.Год);
		ДанныеРазделаНоменклатурыДел.Вставить("index", РазделНоменклатурыДел.Индекс);
		ДанныеРазделаНоменклатурыДел.Вставить("company", РазделНоменклатурыДел.Организация);
		ДанныеРазделаНоменклатурыДел.Вставить("department", РазделНоменклатурыДел.Подразделение);
		РеквизитыРазделаНоменклатурыДел.Вставить("Ссылка", РазделНоменклатурыДел.Ссылка);
		РеквизитыРазделаНоменклатурыДел.Вставить("Наименование", РазделНоменклатурыДел.Наименование);
		
	Иначе
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РазделНоменклатурыДел,
			"Год,
			|Индекс,
			|Организация,
			|Подразделение,
			|Наименование");
		ДанныеРазделаНоменклатурыДел.Вставить("year", Данные.Год);
		ДанныеРазделаНоменклатурыДел.Вставить("index", Данные.Индекс);
		ДанныеРазделаНоменклатурыДел.Вставить("company", Данные.Организация);
		ДанныеРазделаНоменклатурыДел.Вставить("department", Данные.Подразделение);
		РеквизитыРазделаНоменклатурыДел.Вставить("Ссылка", РазделНоменклатурыДел);
		РеквизитыРазделаНоменклатурыДел.Вставить("Наименование", Данные.Наименование);
		
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		РеквизитыРазделаНоменклатурыДел,
		ДанныеРазделаНоменклатурыДел,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   РазделНоменклатурыДел - СправочникОбъект.РазделыНоменклатурыДел - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCaseFilesListSections. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеРазделаНоменклатурыДел(РазделНоменклатурыДел, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РазделНоменклатурыДел.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РазделНоменклатурыДел.Год, ОбъектXDTO, "year");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РазделНоменклатурыДел.Индекс, ОбъектXDTO, "index");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РазделНоменклатурыДел.Организация, ОбъектXDTO, "company");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		РазделНоменклатурыДел.Подразделение,
		ОбъектXDTO,
		"department");
	
КонецПроцедуры

// Ищет подходящий раздел номенклатуры дел по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCaseFilesListSections.
//
// Возвращаемое значение:
//   СправочникСсылка.РазделыНоменклатурыДел - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиРазделНоменклатурыДел(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	Год = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "year") Тогда
		Год = ОбъектXDTO.year;
	КонецЕсли;
	Индекс = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "index") Тогда
		Индекс = ОбъектXDTO.index;
	КонецЕсли;
	Организация = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "company") Тогда
		Организация = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.company);
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РазделыНоменклатурыДел.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РазделыНоменклатурыДел КАК РазделыНоменклатурыДел
		|ГДЕ
		|	РазделыНоменклатурыДел.Год = &Год
		|	И РазделыНоменклатурыДел.Индекс = &Индекс
		|	И РазделыНоменклатурыДел.Организация = &Организация
		|	И НЕ РазделыНоменклатурыДел.ПометкаУдаления");
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("Индекс", Индекс);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НоменклатураДел

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   НоменклатураДел - СправочникОбъект.НоменклатураДел
//                   - СправочникСсылка.НоменклатураДел
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCaseFilesCatalog.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеНоменклатурыДел(НоменклатураДел, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеНоменклатурыДел = Новый Структура;
	РеквизитыНоменклатурыДел = Новый Структура;
	
	Если ТипЗнч(НоменклатураДел) = Тип("СправочникОбъект.НоменклатураДел")
			Или ТипЗнч(НоменклатураДел) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ДанныеНоменклатурыДел.Вставить("year", НоменклатураДел.Год);
		ДанныеНоменклатурыДел.Вставить("longDescription", НоменклатураДел.ПолноеНаименование);
		ДанныеНоменклатурыДел.Вставить("index", НоменклатураДел.Индекс);
		ДанныеНоменклатурыДел.Вставить("section", НоменклатураДел.Раздел);
		ДанныеНоменклатурыДел.Вставить("company", НоменклатураДел.Организация);
		ДанныеНоменклатурыДел.Вставить("retentionPeriod", НоменклатураДел.СрокХранения);
		ДанныеНоменклатурыДел.Вставить("articleNumbers", НоменклатураДел.НомераСтатей);
		ДанныеНоменклатурыДел.Вставить("expertsCommissionMark", НоменклатураДел.ОтметкаЭПК);
		ДанныеНоменклатурыДел.Вставить("comment", НоменклатураДел.Примечание);
		ДанныеНоменклатурыДел.Вставить("documentTypesFilledIn", НоменклатураДел.ВидыДокументовЗаполнены);
		ДанныеНоменклатурыДел.Вставить("correspondentsFilledIn", НоменклатураДел.КонтрагентыЗаполнены);
		ДанныеНоменклатурыДел.Вставить("activityTypesFilledIn", НоменклатураДел.ВопросыДеятельностиЗаполнены);
		РеквизитыНоменклатурыДел.Вставить("Ссылка", НоменклатураДел.Ссылка);
		РеквизитыНоменклатурыДел.Вставить("Наименование", НоменклатураДел.Наименование);
		
		КатегорияДела = НоменклатураДел.КатегорияДела;
		
	Иначе
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоменклатураДел,
			"Год,
			|ПолноеНаименование,
			|Индекс,
			|Раздел,
			|Организация,
			|СрокХранения,
			|НомераСтатей,
			|ОтметкаЭПК,
			|Примечание,
			|ВидыДокументовЗаполнены,
			|КонтрагентыЗаполнены,
			|ВопросыДеятельностиЗаполнены,
			|Наименование,
			|КатегорияДела");
		ДанныеНоменклатурыДел.Вставить("year", Данные.Год);
		ДанныеНоменклатурыДел.Вставить("longDescription", Данные.ПолноеНаименование);
		ДанныеНоменклатурыДел.Вставить("index", Данные.Индекс);
		ДанныеНоменклатурыДел.Вставить("section", Данные.Раздел);
		ДанныеНоменклатурыДел.Вставить("company", Данные.Организация);
		ДанныеНоменклатурыДел.Вставить("retentionPeriod", Данные.СрокХранения);
		ДанныеНоменклатурыДел.Вставить("articleNumbers", Данные.НомераСтатей);
		ДанныеНоменклатурыДел.Вставить("expertsCommissionMark", Данные.ОтметкаЭПК);
		ДанныеНоменклатурыДел.Вставить("comment", Данные.Примечание);
		ДанныеНоменклатурыДел.Вставить("documentTypesFilledIn", Данные.ВидыДокументовЗаполнены);
		ДанныеНоменклатурыДел.Вставить("correspondentsFilledIn", Данные.КонтрагентыЗаполнены);
		ДанныеНоменклатурыДел.Вставить("activityTypesFilledIn", Данные.ВопросыДеятельностиЗаполнены);
		РеквизитыНоменклатурыДел.Вставить("Ссылка", НоменклатураДел);
		РеквизитыНоменклатурыДел.Вставить("Наименование", Данные.Наименование);
		
		КатегорияДела = Данные.КатегорияДела;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КатегорияДела) Тогда
		ДанныеНоменклатурыДел.Вставить("caseCategory",
			ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(КатегорияДела));
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		РеквизитыНоменклатурыДел,
		ДанныеНоменклатурыДел,
		ОбъектXDTO,
		НаборКолонок);
	
	// Заполним Раздел.
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "section") Тогда
		ОбработкаЗапросовXDTO.ПолучитьДанныеОбъектаДО(
			ДанныеНоменклатурыДел.section.ПолучитьОбъект(),
			ОбъектXDTO.section,
			"DMCaseFilesListSections",
			Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   НоменклатураДел - СправочникОбъект.НоменклатураДел - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCaseFilesCatalog. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеНоменклатурыДел(НоменклатураДел, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.Год, ОбъектXDTO, "year");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.ПолноеНаименование, ОбъектXDTO, "longDescription");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.Индекс, ОбъектXDTO, "index");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.Раздел, ОбъектXDTO, "section");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.Организация, ОбъектXDTO, "company");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.СрокХранения, ОбъектXDTO, "retentionPeriod");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.НомераСтатей, ОбъектXDTO, "articleNumbers");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.ОтметкаЭПК, ОбъектXDTO, "expertsCommissionMark");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.Примечание, ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.ВидыДокументовЗаполнены, ОбъектXDTO, "documentTypesFilledIn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.КонтрагентыЗаполнены, ОбъектXDTO, "correspondentsFilledIn");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		НоменклатураДел.ВопросыДеятельностиЗаполнены, ОбъектXDTO, "activityTypesFilledIn");
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзПеречисленияXDTO(
		"DMCategoriesOfCases",
		ОбъектXDTO,
		"caseCategory",
		НоменклатураДел,
		"КатегорияДела");
	
КонецПроцедуры

// Ищет подходящую номенклатуру дел по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCaseFilesCatalog.
//
// Возвращаемое значение:
//   СправочникСсылка.НоменклатураДел - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиНоменклатуруДел(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	Год = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "year") Тогда
		Год = ОбъектXDTO.year;
	КонецЕсли;
	Индекс = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "index") Тогда
		Индекс = ОбъектXDTO.index;
	КонецЕсли;
	Организация = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "company") Тогда
		Организация = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.company);
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураДел.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураДел КАК НоменклатураДел
		|ГДЕ
		|	НоменклатураДел.Год = &Год
		|	И НоменклатураДел.Индекс = &Индекс
		|	И НоменклатураДел.Организация = &Организация
		|	И НЕ НоменклатураДел.ПометкаУдаления");
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("Индекс", Индекс);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДелаХраненияДокументов

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ДелоХраненияДокументов - СправочникОбъект.ДелаХраненияДокументов
//                          - СправочникСсылка.ДелаХраненияДокументов
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCaseFilesDossiers.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеДелаХраненияДокументов(ДелоХраненияДокументов, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеДелаХраненияДокументов = Новый Структура;
	РеквизитыДелаХраненияДокументов = Новый Структура;
	ПредставлениеМассив = Новый Массив();
	
	Если ТипЗнч(ДелоХраненияДокументов) = Тип("СправочникОбъект.ДелаХраненияДокументов")
			Или ТипЗнч(ДелоХраненияДокументов) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ДанныеДелаХраненияДокументов.Вставить("startDate", ДелоХраненияДокументов.ДатаНачала);
		ДанныеДелаХраненияДокументов.Вставить("endDate", ДелоХраненияДокументов.ДатаОкончания);
		ДанныеДелаХраненияДокументов.Вставить("caseClosed", ДелоХраненияДокументов.ДелоЗакрыто);
		ДанныеДелаХраненияДокументов.Вставить("numberOfSheets", ДелоХраненияДокументов.КоличествоЛистов);
		ДанныеДелаХраненияДокументов.Вставить("comment", ДелоХраненияДокументов.Комментарий);
		ДанныеДелаХраненияДокументов.Вставить("caseFilesCatalog", ДелоХраненияДокументов.НоменклатураДел);
		ДанныеДелаХраненияДокументов.Вставить("dossierNumber", ДелоХраненияДокументов.НомерТома);
		ДанныеДелаХраненияДокументов.Вставить("company", ДелоХраненияДокументов.Организация);
		ДанныеДелаХраненияДокументов.Вставить("department", ДелоХраненияДокументов.Подразделение);
		РеквизитыДелаХраненияДокументов.Вставить("Ссылка", ДелоХраненияДокументов.Ссылка);
		РеквизитыДелаХраненияДокументов.Вставить("Наименование", ДелоХраненияДокументов.Наименование);
		Если ЗначениеЗаполнено(ДелоХраненияДокументов.НоменклатураДел) Тогда
			Индекс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДелоХраненияДокументов.НоменклатураДел, "Индекс");
			ПредставлениеМассив.Добавить(СокрЛП(Индекс));
		КонецЕсли;
		ПредставлениеМассив.Добавить(СокрЛП(ДелоХраненияДокументов.Наименование));
		
	Иначе
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДелоХраненияДокументов,
			"ДатаНачала,
			|ДатаОкончания,
			|ДелоЗакрыто,
			|КоличествоЛистов,
			|Комментарий,
			|НоменклатураДел,
			|НомерТома,
			|Организация,
			|Подразделение,
			|Наименование");
		ДанныеДелаХраненияДокументов.Вставить("startDate", Данные.ДатаНачала);
		ДанныеДелаХраненияДокументов.Вставить("endDate", Данные.ДатаОкончания);
		ДанныеДелаХраненияДокументов.Вставить("caseClosed", Данные.ДелоЗакрыто);
		ДанныеДелаХраненияДокументов.Вставить("numberOfSheets", Данные.КоличествоЛистов);
		ДанныеДелаХраненияДокументов.Вставить("comment", Данные.Комментарий);
		ДанныеДелаХраненияДокументов.Вставить("caseFilesCatalog", Данные.НоменклатураДел);
		ДанныеДелаХраненияДокументов.Вставить("dossierNumber", Данные.НомерТома);
		ДанныеДелаХраненияДокументов.Вставить("company", Данные.Организация);
		ДанныеДелаХраненияДокументов.Вставить("department", Данные.Подразделение);
		РеквизитыДелаХраненияДокументов.Вставить("Ссылка", ДелоХраненияДокументов);
		РеквизитыДелаХраненияДокументов.Вставить("Наименование", Данные.Наименование);
		Если ЗначениеЗаполнено(Данные.НоменклатураДел) Тогда
			Индекс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.НоменклатураДел, "Индекс");
			ПредставлениеМассив.Добавить(СокрЛП(Индекс));
		КонецЕсли;
		ПредставлениеМассив.Добавить(СокрЛП(Данные.Наименование));
		
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		РеквизитыДелаХраненияДокументов,
		ДанныеДелаХраненияДокументов,
		ОбъектXDTO,
		НаборКолонок);
	ОбъектXDTO.objectID.presentation = СтрСоединить(ПредставлениеМассив, " ");
	
	// Заполним номенклатуру дел.
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "caseFilesCatalog") Тогда
		ОбработкаЗапросовXDTO.ПолучитьДанныеОбъектаДО(
			ДанныеДелаХраненияДокументов.caseFilesCatalog.ПолучитьОбъект(),
			ОбъектXDTO.caseFilesCatalog,
			"DMCaseFilesCatalog",
			Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ДелоХраненияДокументов - СправочникОбъект.ДелаХраненияДокументов - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCaseFilesDossiers. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеДелаХраненияДокументов(ДелоХраненияДокументов, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДелоХраненияДокументов.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДелоХраненияДокументов.ДатаНачала, ОбъектXDTO, "startDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДелоХраненияДокументов.ДатаОкончания, ОбъектXDTO, "endDate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДелоХраненияДокументов.ДелоЗакрыто, ОбъектXDTO, "caseClosed");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДелоХраненияДокументов.КоличествоЛистов, ОбъектXDTO, "numberOfSheets");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДелоХраненияДокументов.Комментарий, ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДелоХраненияДокументов.НоменклатураДел, ОбъектXDTO, "caseFilesCatalog");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДелоХраненияДокументов.НомерТома, ОбъектXDTO, "dossierNumber");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДелоХраненияДокументов.Организация, ОбъектXDTO, "company");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ДелоХраненияДокументов.Подразделение, ОбъектXDTO, "department");
	
КонецПроцедуры

// Ищет подходящее дело хранения документов по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMCaseFilesDossiers.
//
// Возвращаемое значение:
//   СправочникСсылка.ДелаХраненияДокументов - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиДелоХраненияДокументов(ОбъектXDTO) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ТематикаДокументов

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ТематикаДокументов - СправочникОбъект.ТематикиДокументов
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocumentTopic.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеТематикиДокументов(ТематикаДокументов, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеТематикиДокументов = Новый Структура;
	ДанныеТематикиДокументов.Вставить("documentType", ТематикаДокументов.ВидДокумента);
	ДанныеТематикиДокументов.Вставить("creationDate", ТематикаДокументов.ДатаСоздания);
	ДанныеТематикиДокументов.Вставить("comment", ТематикаДокументов.Комментарий);
	ДанныеТематикиДокументов.Вставить("notValid", ТематикаДокументов.НеДействует);
	ДанныеТематикиДокументов.Вставить("notValidDate", ТематикаДокументов.НеДействуетДата);
	ДанныеТематикиДокументов.Вставить("createdBy", ТематикаДокументов.Создал);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		ТематикаДокументов,
		ДанныеТематикиДокументов,
		ОбъектXDTO,
		НаборКолонок);
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ТематикаДокументов - СправочникОбъект.ТематикиДокументов - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocumentTopic. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеТематикиДокументов(ТематикаДокументов, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ТематикаДокументов.Наименование, ОбъектXDTO, "name");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ТематикаДокументов.ВидДокумента, ОбъектXDTO, "documentType");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ТематикаДокументов.Комментарий, ОбъектXDTO, "comment");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ТематикаДокументов.НеДействует, ОбъектXDTO, "notValid");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
		ТематикаДокументов.НеДействуетДата, ОбъектXDTO, "notValidDate");
	
КонецПроцедуры

// Ищет подходящую тематику документов по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocumentTopic.
//
// Возвращаемое значение:
//   СправочникСсылка.ТематикиДокументов - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиТематикуДокументов(ОбъектXDTO) Экспорт
	
	Результат = Неопределено;
	
	Наименование = "";
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Наименование, ОбъектXDTO, "name");
	
	ВидДокумента = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "documentType") Тогда
		ВидДокумента = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.documentType);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = Новый Массив;
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТематикиДокументов.Ссылка
			|ИЗ
			|	Справочник.ТематикиДокументов КАК ТематикиДокументов
			|ГДЕ
			|	ТематикиДокументов.Наименование = &Наименование");
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			ТекстЗапроса.Добавить("И ТематикиДокументов.ВидДокумента = &ВидДокумента");
			Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
		КонецЕсли;
		Запрос.Текст = СтрСоединить(ТекстЗапроса, Символы.ПС);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДокументЭДО

// Заполняет объект XDTO по данным документа ЭДО.
//
// Параметры:
//   ДокументЭДО - ДокументОбъект.ЭлектронныйДокументВходящийЭДО
//               - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMIncomingElectronicDocument или DMOutgoingElectronicDocument.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеДокументаЭДО(ДокументЭДО, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеДокументаЭДО = Новый Структура;
	
	ДанныеВизуализации = ОбменЭДОДокументооборотВызовСервера.ДанныеВизуализации(ДокументЭДО.Ссылка);
	Если ЗначениеЗаполнено(ДанныеВизуализации.ПрисоединенныйФайл) Тогда
		ДанныеДокументаЭДО.Вставить("attachedFilePresentation", ДанныеВизуализации.ПрисоединенныйФайлПредставление);
		ДанныеДокументаЭДО.Вставить("attachedFileBinaryData",
			РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеВизуализации.ПрисоединенныйФайл));
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		ДокументЭДО,
		ДанныеДокументаЭДО,
		ОбъектXDTO,
		НаборКолонок,
		Ложь);
	
КонецПроцедуры

// Заполняет документ ЭДО по данным объекта XDTO.
//
// Параметры:
//   ДокументЭДО - ДокументОбъект.ЭлектронныйДокументВходящийЭДО
//               - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMIncomingElectronicDocument или DMOutgoingElectronicDocument.
//     Источник данных.
//
Процедура ЗаполнитьДанныеДокументаЭДО(ДокументЭДО, ОбъектXDTO) Экспорт
	
	
	
КонецПроцедуры

// Ищет подходящий документ ЭДО по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMIncomingElectronicDocument или DMOutgoingElectronicDocument.
//
// Возвращаемое значение:
//   ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//   ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - найденный документ ЭДО.
//   Неопределено - в случае, если документ ЭДО не был найден.
//
Функция НайтиДокументЭДО(ОбъектXDTO) Экспорт
	
	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДокументВспомогательныеМетоды

Функция ВидыДействий(ВидДокумента)
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	НастройкаОбработки = Справочники.НастройкиОбработкиВидовОбъектов.НастройкаОбработкиДляВидаОбъекта(
		ВидДокумента,
		ТекущаяДатаСеанса());
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиОбработкиВидовОбъектовВидыДействий.ВидДействия КАК ВидДействия
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК НастройкиОбработкиВидовОбъектовВидыДействий
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектовВидыДействий.Ссылка = &НастройкаОбработки");
	Запрос.УстановитьПараметр("НастройкаОбработки", НастройкаОбработки);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДействия");
	
КонецФункции

Функция ДоступнаРегистрация(Документ)
	
	ЭтоДелопроизводитель = РольДоступна("РегистрацияДокументовПредприятия") Или РольДоступна("ПолныеПрава");
	Если ЭтоДелопроизводитель И Не ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Записывает участников рабочей группы шаблону документа.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия - документ, созданный по шаблону.
//
Процедура ЗаписатьРабочуюГруппуСогласноШаблону(Документ)
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) Или Не ЗначениеЗаполнено(Документ.Шаблон) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	ТекущаяРабочаяГруппа = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(Документ.Ссылка);
	Для Каждого СтрокаТекущийУчастник Из ТекущаяРабочаяГруппа Цикл
		НоваяСтрока = ТаблицаУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТекущийУчастник);
	КонецЦикла;
	
	РабочаяГруппаШаблона = Документ.Шаблон.РабочаяГруппаДокумента.Выгрузить();
	Для Каждого РабочаяГруппаСтрока Из РабочаяГруппаШаблона Цикл
		
		Если Не ЗначениеЗаполнено(РабочаяГруппаСтрока.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыКонтейнеровСотрудников = Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип;
		
		Если ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			
			ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
				РабочаяГруппаСтрока.Участник,
				Документ);
			
			Если ЗначениеАвтоподстановки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипыКонтейнеровСотрудников.СодержитТип(ТипЗнч(ЗначениеАвтоподстановки)) Тогда
				
				РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
					ТаблицаУчастников,
					ЗначениеАвтоподстановки,
					РабочаяГруппаСтрока.Изменение);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Структура") Тогда
				
				РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
					ТаблицаУчастников,
					ЗначениеАвтоподстановки.РольИсполнителя,
					РабочаяГруппаСтрока.Изменение);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив") Тогда
				
				Для Каждого ЗначениеАвтоподстановкиЭлемент Из ЗначениеАвтоподстановки Цикл
					
					Если ТипыКонтейнеровСотрудников.СодержитТип(ТипЗнч(ЗначениеАвтоподстановкиЭлемент)) Тогда
						
						РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
							ТаблицаУчастников,
							ЗначениеАвтоподстановкиЭлемент,
							РабочаяГруппаСтрока.Изменение);
						
					ИначеЕсли ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("Структура") Тогда
						
						РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
							ТаблицаУчастников,
							ЗначениеАвтоподстановкиЭлемент.РольИсполнителя,
							РабочаяГруппаСтрока.Изменение);
						
					Иначе
						ВызватьИсключение НСтр(
							"ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'");
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				ВызватьИсключение НСтр(
					"ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'");
			КонецЕсли;
			
		ИначеЕсли ТипыКонтейнеровСотрудников.СодержитТип(ТипЗнч(РабочаяГруппаСтрока.Участник)) Тогда
			
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
				ТаблицаУчастников,
				РабочаяГруппаСтрока.Участник,
				РабочаяГруппаСтрока.Изменение);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'В шаблоне некорректно задан участник рабочей группы.'");
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуОбъекта(
		Документ.Ссылка,
		ТаблицаУчастников,
		Истина);
	
КонецПроцедуры

// Заполняет коллекцию виз для указанного документа.
//
// Параметры:
//   Документ - СправочникСсылка.ДокументыПредприятия - ссылка на источник данных.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO тип DMDocument, заполняемый документ.
//
Процедура ЗаполнитьВизыДокумента(Документ, ОбъектXDTO)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВизыСогласования.Ссылка КАК Ссылка,
		|	ВизыСогласования.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА ВизыСогласования.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ВизыСогласования.РольИсполнителя.Владелец
		|		КОГДА ВизыСогласования.Исполнитель = Неопределено
		|			ТОГДА ВизыСогласования.РольИсполнителя.Владелец
		|		КОГДА ВизыСогласования.Исполнитель ССЫЛКА Справочник.ПолныеРоли
		|			ТОГДА ВизыСогласования.Исполнитель.Владелец
		|		ИНАЧЕ ВизыСогласования.Исполнитель
		|	КОНЕЦ КАК Исполнитель,
		|	ВЫБОР
		|		КОГДА ВизыСогласования.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВизыСогласования.РольИсполнителя)
		|		КОГДА ВизыСогласования.Исполнитель = Неопределено
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВизыСогласования.РольИсполнителя)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ВизыСогласования.Исполнитель)
		|	КОНЕЦ КАК ПредставлениеИсполнителя,
		|	ВЫБОР
		|		КОГДА ВизыСогласования.УстановилРезультат ССЫЛКА Справочник.ФактическиеИсполнители
		|			ТОГДА ФактическиеИсполнители.Факт
		|		ИНАЧЕ ВизыСогласования.УстановилРезультат
		|	КОНЕЦ КАК УстановилРезультат,
		|	ВизыСогласования.ДатаИсполнения КАК Дата,
		|	ВизыСогласования.Подписана КАК Подписана,
		|	ЕСТЬNULL(Подписи.ДатаПроверкиПодписи, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ПодписьПроверена,
		|	ЕСТЬNULL(Подписи.ПодписьВерна, ЛОЖЬ) КАК ПодписьВерна,
		|	ВизыСогласования.РезультатСогласования КАК Результат,
		|	ВизыСогласования.Комментарий КАК Комментарий
		|ИЗ
		|	Справочник.ВизыСогласования КАК ВизыСогласования
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК Подписи
		|		ПО (Подписи.ПодписанныйОбъект = ВизыСогласования.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФактическиеИсполнители КАК ФактическиеИсполнители
		|		ПО ВизыСогласования.УстановилРезультат = ФактическиеИсполнители.Ссылка
		|ГДЕ
		|	ВизыСогласования.Документ = &Документ
		|	И НЕ ВизыСогласования.ПометкаУдаления
		|	И НЕ ВизыСогласования.Удалена
		|	И НЕ ВизыСогласования.ПомещенаВИсторию");
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВизаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMVisa");
		ВизаXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
		ВизаXDTO.name = Выборка.Наименование;
		
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO, "reviewer", Выборка.Исполнитель);
			ВизаXDTO.reviewer.name = Выборка.ПредставлениеИсполнителя;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.УстановилРезультат) Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ВизаXDTO, "addedBy", Выборка.УстановилРезультат);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Результат) Тогда
			ВизаXDTO.result = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(Выборка.Результат);
		КонецЕсли;
		
		ВизаXDTO.date = Выборка.Дата;
		ВизаXDTO.signed = Выборка.Подписана;
		ВизаXDTO.signatureChecked = Выборка.ПодписьПроверена;
		ВизаXDTO.signatureValid = Выборка.ПодписьВерна;
		ВизаXDTO.comment = Выборка.Комментарий;
		
		ОбъектXDTO.visas.Добавить(ВизаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентовДокумента(Документ, ОбъектXDTO)
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "correspondentRows") Тогда
		
		Документ.Контрагенты.Очистить();
		Для Каждого СтрокаXDTO Из ОбъектXDTO.correspondentRows.rows Цикл
			Строка = Документ.Контрагенты.Добавить();
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Контрагент, СтрокаXDTO, "correspondent");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.КонтактноеЛицо, СтрокаXDTO, "contact");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
				Строка.ПодписалОтКонтрагента, СтрокаXDTO, "signedFromTheCorrespondent");
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак "Содержит оригиналы" для указанного документа.
//
// Параметры:
//   Документ - СправочникСсылка.ДокументыПредприятия - ссылка на источник данных.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO тип DMDocument, заполняемый документ.
//
Процедура ЗаполнитьПризнакСодержитОригиналы(Документ, ОбъектXDTO)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДокументовПредприятия.СодержитОригинал КАК СодержитОригинал
		|ИЗ
		|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|ГДЕ
		|	Документ = &Документ");
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбъектXDTO.containsScannedOriginals = Выборка.СодержитОригинал;
	Иначе
		ОбъектXDTO.containsScannedOriginals = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет коллекцию резолюций для указанного документа.
//
// Параметры:
//   Документ - СправочникСсылка.ДокументыПредприятия - ссылка на источник данных.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO тип DMDocument, заполняемый документ.
//
Процедура ЗаполнитьРезолюцииДокумента(Документ, ОбъектXDTO)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Резолюции.Ссылка КАК Ссылка,
		|	Резолюции.Наименование КАК Наименование,
		|	Резолюции.ФактическийАвтор.Факт КАК АвторРезолюции,
		|	Резолюции.ВнесРезолюцию КАК ВнесРезолюцию,
		|	Резолюции.ДатаРезолюции КАК Дата,
		|	Резолюции.Подписана КАК Подписана,
		|	ЕСТЬNULL(Подписи.ДатаПроверкиПодписи, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ПодписьПроверена,
		|	ЕСТЬNULL(Подписи.ПодписьВерна, ЛОЖЬ) КАК ПодписьВерна,
		|	Резолюции.ТекстРезолюции КАК Текст
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК Подписи
		|		ПО (Подписи.ПодписанныйОбъект = Резолюции.Ссылка)
		|ГДЕ
		|	Резолюции.Документ = &Документ
		|	И НЕ Резолюции.ПометкаУдаления");
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РезолюцияXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMResolution");
		РезолюцияXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Выборка.Ссылка);
		РезолюцияXDTO.name = Выборка.Наименование;
		
		Если ЗначениеЗаполнено(Выборка.АвторРезолюции) Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(РезолюцияXDTO, "reviewer", Выборка.АвторРезолюции);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ВнесРезолюцию) Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(РезолюцияXDTO, "addedBy", Выборка.ВнесРезолюцию);
		КонецЕсли;
		
		РезолюцияXDTO.date = Выборка.Дата;
		РезолюцияXDTO.signed = Выборка.Подписана;
		РезолюцияXDTO.signatureChecked = Выборка.ПодписьПроверена;
		РезолюцияXDTO.signatureValid = Выборка.ПодписьВерна;
		РезолюцияXDTO.text = Выборка.Текст;
		
		ОбъектXDTO.resolutions.Добавить(РезолюцияXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет и записывает состояние документа по данным объекта XDTO.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocument.
//   ТекущаяДата - Дата - текущая дата.
//   ТекущийПользователь - СправочникСсылка.Пользователи
//                       - СправочникСсылка.Сотрудники - текущий пользователь.
//   КоличествоИзмененныхСостояний - Число - требуется для смещения даты записи состояния документа.
//
Процедура ЗаполнитьСостоянияДокумента(Документ, ОбъектXDTO, ТекущаяДата, ТекущийПользователь,
		КоличествоИзмененныхСостояний)
	
	ТаблицаСостояний = Делопроизводство.ПолучитьВсеСостоянияДокумента(Документ.Ссылка);
	
	Для Каждого Строка Из СоответствиеСостоянийДокумента() Цикл
		
		ИмяСостояния = Строка.Ключ;
		ИмяСвойства = Строка.Значение;
		ТекущееСостояние = Делопроизводство.ПолучитьСтруктуруСостоянияДокумента(
			Документ.Ссылка,
			СтрШаблон("Состояние%1", ИмяСостояния),,
			ТаблицаСостояний);
		
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, ИмяСвойства) Тогда
			
			НовоеСостояние = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО(
				"DMDocumentStatus",
				ОбъектXDTO[ИмяСвойства]);
			
			Если ТекущееСостояние.Состояние <> НовоеСостояние Тогда
				Если Не ЗначениеЗаполнено(НовоеСостояние) Тогда
					Делопроизводство.ОчиститьСостояниеДокумента(Документ.Ссылка, ТекущееСостояние.Состояние);
				Иначе
					Делопроизводство.ЗаписатьСостояниеДокумента(
						Документ.Ссылка,
						ТекущаяДата + КоличествоИзмененныхСостояний,
						НовоеСостояние,
						ТекущийПользователь);
					КоличествоИзмененныхСостояний = КоличествоИзмененныхСостояний + 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтатьиДДСДокумента(Документ, ОбъектXDTO)
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "cashFlowRows") Тогда
		
		// Поскольку Статьи ДДС хранятся отдельно от документа - добавим их в ДополнительныеСвойства
		СтатьиДвиженияДенежныхСредств = ТаблицаСтатьиДвиженияДенежныхСредств();
		
		Для Каждого СтрокаXDTO Из ОбъектXDTO.cashFlowRows.rows Цикл
			Строка = СтатьиДвиженияДенежныхСредств.Добавить();
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
				Строка.СтатьяДвиженияДенежныхСредств,
				СтрокаXDTO,
				"item");
			Строка.Сумма = СтрокаXDTO.total;
			Строка.СуммаНДС = СтрокаXDTO.VAT;
		КонецЦикла;
		
		СтатьиДвиженияДенежныхСредств.Свернуть("СтатьяДвиженияДенежныхСредств", "Сумма, СуммаНДС");
		Документ.ДополнительныеСвойства.Вставить("СтатьиДвиженияДенежныхСредств", СтатьиДвиженияДенежныхСредств);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтороныДокумента(Документ, ОбъектXDTO)
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "partyRows") Тогда
		
		Документ.Стороны.Очистить();
		Для Каждого СтрокаXDTO Из ОбъектXDTO.partyRows.rows Цикл
			Строка = Документ.Стороны.Добавить();
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.ДатаПодписи, СтрокаXDTO, "signatureDate");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Комментарий, СтрокаXDTO, "comment");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Наименование, СтрокаXDTO, "description");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Подписан, СтрокаXDTO, "signed");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Установил, СтрокаXDTO, "setBy");
			
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "party") Тогда
				Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.party, "correspondent") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.Сторона, СтрокаXDTO.party, "correspondent");
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.party, "employee") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.Сторона, СтрокаXDTO.party, "employee");
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.party, "organization") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.Сторона, СтрокаXDTO.party, "organization");
				Иначе
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Сторона, СтрокаXDTO, "party");
				КонецЕсли;
			КонецЕсли;
			
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "contact") Тогда
				Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.contact, "contactName") Тогда
					Строка.КонтактноеЛицо = СтрокаXDTO.contact.contactName;
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.contact, "employee") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.КонтактноеЛицо, СтрокаXDTO.contact, "employee");
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.contact, "contactPerson") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.КонтактноеЛицо, СтрокаXDTO.contact, "contactPerson");
				Иначе
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.КонтактноеЛицо, СтрокаXDTO, "contact");
				КонецЕсли;
			КонецЕсли;
			
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO, "signedBy") Тогда
				Если ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.signedBy, "contactName") Тогда
					Строка.Подписал = СтрокаXDTO.signedBy.contactName;
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.signedBy, "employee") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.Подписал,
						СтрокаXDTO.signedBy,
						"employee");
				ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(СтрокаXDTO.signedBy, "contactPerson") Тогда
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
						Строка.Подписал, СтрокаXDTO.signedBy, "contactPerson");
				Иначе
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Подписал, СтрокаXDTO, "signedBy");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварыДокумента(Документ, ОбъектXDTO)
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "productRows") Тогда
		Документ.Товары.Очистить();
		Для Каждого СтрокаXDTO Из ОбъектXDTO.productRows.rows Цикл
			
			Строка = Документ.Товары.Добавить();
			Строка.Номер = Строка.НомерСтроки;
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Номенклатура, СтрокаXDTO, "product");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Количество, СтрокаXDTO, "quantity");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.ЕдиницаИзмерения,
				СтрокаXDTO, "measurementUnit");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Цена, СтрокаXDTO, "price");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.СуммаНДС, СтрокаXDTO, "VAT");
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.Сумма, СтрокаXDTO, "total");
			
			ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Строка.СтавкаНДС, СтрокаXDTO, "VATRateUniversal");
			Если Не ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				Строка.СтавкаНДС = ЗначениеСтавкиНДСИзПеречисленияVATRate(СтрокаXDTO.VATRate);
			КонецЕсли;
			
			// Заполнение по умолчанию.
			Если Не ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				Строка.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Строка.Номенклатура, "ЕдиницаИзмерения");
			КонецЕсли;
			
			Если Строка.Цена = 0 И Строка.Сумма <> 0 И Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			Если Строка.Сумма = 0 И Строка.Цена <> 0 И Строка.Количество <> 0 Тогда
				Строка.Сумма = Строка.Цена * Строка.Количество;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает обязательные связи документа.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия - проверяемый документ.
//   ОбязательныеТипыСвязей - см. ОбработкаЗапросовXDTOДокументы.ОбязательныеТипыСвязей
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ТипСвязи - СправочникСсылка.ТипыСвязей - тип связи.
//     * СвязанныйОбъект - СправочникСсылка.Проекты,
//                  ДокументСсылка.ВходящееПисьмо,
//                  ДокументСсылка.ИсходящееПисьмо,
//                  СправочникСсылка.Файлы,
//                  Строка,
//                  СправочникСсылка.ДокументыПредприятия,
//                  СправочникСсылка.Мероприятия - связанный объект.
//     * НужноЗаписать - Булево - признак необходимости записи.
//     * СвязатьСТекущимДокументом - Булево - признак необходимости связи с текущим документом.
//     * СсылкаНа - СправочникСсылка.Проекты,
//                  ДокументСсылка.ВходящееПисьмо,
//                  ДокументСсылка.ИсходящееПисьмо,
//                  СправочникСсылка.ВидыДокументов,
//                  СправочникСсылка.Файлы,
//                  СправочникСсылка.ДокументыПредприятия,
//                  СправочникСсылка.Мероприятия - ссылка на связанный объект.
//     * Комментарий - Строка - Комментарий
//
Функция ОбязательныеСвязи(Документ, ОбязательныеТипыСвязей)
	
	ОбязательныеСвязи = Новый ТаблицаЗначений;
	ОбязательныеСвязи.Колонки.Добавить("ТипСвязи", Новый ОписаниеТипов("СправочникСсылка.ТипыСвязей"));
	ОбязательныеСвязи.Колонки.Добавить("СвязанныйОбъект", Новый ОписаниеТипов(
		"СправочникСсылка.Проекты,
		|ДокументСсылка.ВходящееПисьмо,
		|ДокументСсылка.ИсходящееПисьмо,
		|СправочникСсылка.Файлы,
		|Строка,
		|СправочникСсылка.ДокументыПредприятия,
		|СправочникСсылка.Мероприятия"));
	ОбязательныеСвязи.Колонки.Добавить("НужноЗаписать", Новый ОписаниеТипов("Булево"));
	ОбязательныеСвязи.Колонки.Добавить("СвязатьСТекущимДокументом", Новый ОписаниеТипов("Булево"));
	ОбязательныеСвязи.Колонки.Добавить("СсылкаНа", Новый ОписаниеТипов(
		"СправочникСсылка.Проекты,
		|ДокументСсылка.ВходящееПисьмо,
		|ДокументСсылка.ИсходящееПисьмо,
		|СправочникСсылка.ВидыДокументов,
		|СправочникСсылка.Файлы,
		|СправочникСсылка.ДокументыПредприятия,
		|СправочникСсылка.Мероприятия"));
	ОбязательныеСвязи.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	
	Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
		Делопроизводство.ПрочитатьОбязательныеСвязи(Документ.Ссылка, ОбязательныеТипыСвязей, ОбязательныеСвязи);
	КонецЕсли;
	
	Возврат ОбязательныеСвязи;
	
КонецФункции

// Возвращает обязательные типы связей документа.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия - проверяемый документ.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ТипСвязи - СправочникСсылка.ТипыСвязей - тип связи.
//     * СсылкаНа - СправочникСсылка.Проекты,
//                  ДокументСсылка.ВходящееПисьмо,
//                  ДокументСсылка.ИсходящееПисьмо,
//                  СправочникСсылка.ВидыДокументов,
//                  СправочникСсылка.Файлы,
//                  СправочникСсылка.ДокументыПредприятия,
//                  СправочникСсылка.Мероприятия - ссылка на связанный объект.
//
Функция ОбязательныеТипыСвязей(Документ)
	
	ОбязательныеТипыСвязей = Новый ТаблицаЗначений;
	ОбязательныеТипыСвязей.Колонки.Добавить("ТипСвязи", Новый ОписаниеТипов("СправочникСсылка.ТипыСвязей"));
	ОбязательныеТипыСвязей.Колонки.Добавить("СсылкаНа", Новый ОписаниеТипов(
		"СправочникСсылка.Проекты,
		|ДокументСсылка.ВходящееПисьмо,
		|ДокументСсылка.ИсходящееПисьмо,
		|СправочникСсылка.ВидыДокументов,
		|СправочникСсылка.Файлы,
		|СправочникСсылка.ДокументыПредприятия,
		|СправочникСсылка.Мероприятия"));
	
	Если ЗначениеЗаполнено(Документ.ВидДокумента) Тогда
		Делопроизводство.ПрочитатьОбязательныеТипыСвязей(
			Неопределено,
			ОбязательныеТипыСвязей,
			Документ.Ссылка,
			Документ.ВидДокумента);
	КонецЕсли;
	
	Возврат ОбязательныеТипыСвязей;
	
КонецФункции

Функция ОписаниеОшибкиПроверкиИзмененияПолейПоСостоянию(СтрокаРеквизитОбъекта, ТекущееСостояние)
	
	Возврат СтрШаблон(НСтр("ru = 'Свойство ""%1"" не может быть изменено для состояния ""%2""'"),
		СтрокаРеквизитОбъекта.Представление,
		ТекущееСостояние)
	
КонецФункции

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Шаблон - СправочникСсылка.ШаблоныДокументов
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocumentTemplate.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//
Процедура ПолучитьДанныеШаблонаДокумента(Шаблон, ОбъектXDTO, НаборКолонок = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныДокументов") Тогда
		ШаблонОбъект = Шаблон.ПолучитьОбъект();
	Иначе
		ШаблонОбъект = Шаблон;
	КонецЕсли;
	
	ДанныеШаблона = Новый Структура;
	
	ДанныеШаблона.Вставить("documentType", Шаблон.ВидДокумента);
	ДанныеШаблона.Вставить("title", Шаблон.Заголовок);
	ДанныеШаблона.Вставить("summary", Шаблон.Содержание);
	ДанныеШаблона.Вставить("comment", Шаблон.КомментарийКДокументу);
	ДанныеШаблона.Вставить("organization", Шаблон.Организация);
	ДанныеШаблона.Вставить("subdivision", Шаблон.Подразделение);
	ДанныеШаблона.Вставить("accessLevel", Шаблон.ГрифДоступа);
	ДанныеШаблона.Вставить("performanceTerm", Шаблон.ДлительностьИсполнения);
	ДанныеШаблона.Вставить("activityMatter", Шаблон.ВопросДеятельности);
	ДанныеШаблона.Вставить("responsible", Шаблон.Ответственный);
	ДанныеШаблона.Вставить("project", Шаблон.Проект);
	ДанныеШаблона.Вставить("blockDerivedDocuments", Шаблон.ЗапретитьИзменятьРеквизитыИзШаблона);
	
	ДанныеШаблона.Вставить("folder", ШаблонОбъект.Папка);
	ДанныеШаблона.Вставить("correspondent", ШаблонОбъект.Контрагент);
	ДанныеШаблона.Вставить("contactPerson", ШаблонОбъект.КонтактноеЛицо);
	ДанныеШаблона.Вставить("cashFlowItem", ШаблонОбъект.СтатьяДвиженияДенежныхСредств);
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(Шаблон, ДанныеШаблона, ОбъектXDTO, НаборКолонок);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Колонки.Добавить(НРег(ИмяКолонки));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьВсеКолонки Или Колонки.Найти(НРег("additionalProperties")) <> Неопределено Тогда 
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(
			ШаблонОбъект.Ссылка, ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры

// Получает структуру полей, доступных к изменению в указанном состоянии.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия
//   НедоступныеПоля - Структура - неявно возвращаемое значение. Ключами являются имена неизменяемых реквизитов.
//
// Возвращаемое значение:
//   Структура - ключами являются имена изменяемых реквизитов.
//
Функция ДоступныеПоСостояниюПоля(Документ, НедоступныеПоля = Неопределено)
	
	ДоступныеПоля = Новый Структура;
	
	Если Не ОграничиватьДоступностьПолейДокументаПоСостоянию() Тогда
		Возврат ДоступныеПоля;
	КонецЕсли;
	
	ДоступныеПоля.Вставить("externalObject");
	
	ИменаДоступныхПолей = Новый Массив;
	ИменаНедоступныхПолей = Новый Массив;
	Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(
		Документ,
		ИменаДоступныхПолей,
		ИменаНедоступныхПолей);
	
	ИменаПолейИКоманд = Делопроизводство.ПолучитьИменаПолейИКомандДляНастройкиДоступности();
	
	ДоступныеПоля.Вставить("register");
	ДоступныеПоля.Вставить("addFile");
	ДоступныеПоля.Вставить("editFile");
	ДоступныеПоля.Вставить("deleteFile");
	ДоступныеПоля.Вставить("addScannedCopy");
	ДоступныеПоля.Вставить("signatures");
	ДоступныеПоля.Вставить("additionalProperties"); 
	ДоступныеПоля.Вставить("processing");
	
	Для Каждого ИмяПоля Из ИменаНедоступныхПолей Цикл
		НайденнаяСтрока = ИменаПолейИКоманд.Найти(ИмяПоля, "ИмяПоляКоманды");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтруктураИмен = Новый Структура(НайденнаяСтрока.ИменаDMService);
			Для Каждого Элемент Из СтруктураИмен Цикл
				ДоступныеПоля.Удалить(Элемент.Ключ);
				Если НедоступныеПоля <> Неопределено Тогда
					НедоступныеПоля.Вставить(Элемент.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоля Из ИменаДоступныхПолей Цикл
		НайденнаяСтрока = ИменаПолейИКоманд.Найти(ИмяПоля, "ИмяПоляКоманды");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтруктураИмен = Новый Структура(НайденнаяСтрока.ИменаDMService);
			Для Каждого Элемент Из СтруктураИмен Цикл
				ДоступныеПоля.Вставить(Элемент.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДоступныеПоля;
	
КонецФункции

Процедура ПолучитьКонтрагентовДокумента(Документ, ОбъектXDTO)
	
	ОбъектXDTO.correspondentRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondentRows");
	
	Для Каждого Строка Из Документ.Контрагенты Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondentRow");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "correspondent", Строка.Контрагент);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "contact", Строка.КонтактноеЛицо);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO,
			"signedFromTheCorrespondent", Строка.ПодписалОтКонтрагента);
		
		ОбъектXDTO.correspondentRows.rows.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру общих настроек, относящихся к документам
//
Процедура ПолучитьОбщиеНастройкиДокумента(ДанныеДокумента, Документ)
	
	ДанныеДокумента.Вставить("activityMatterEnabled", Константы.ИспользоватьВопросыДеятельности.Получить());
	ДанныеДокумента.Вставить("foldersEnabled", Константы.ИспользоватьПапкиДокументов.Получить());
	ДанныеДокумента.Вставить("accessLevelEnabled", Константы.ИспользоватьГрифыДоступа.Получить());
	ДанныеДокумента.Вставить("statusEnabled", Константы.ИспользоватьСостоянияДокументов.Получить());
	ДанныеДокумента.Вставить("projectsEnabled", Константы.ВестиУчетПоПроектам.Получить());
	ДанныеДокумента.Вставить("contentAvailable", Константы.ИспользоватьСоставДокументов.Получить());
	ДанныеДокумента.Вставить("useCaseFiles", Константы.ИспользоватьНоменклатуруДел.Получить());
	ДанныеДокумента.Вставить("registrationAvailable", ДоступнаРегистрация(Документ));
	
	ДанныеДокумента.Вставить("limitPropertiesAvailability", ОграничиватьДоступностьПолейДокументаПоСостоянию());
	
	Если ЗначениеЗаполнено(Документ.Шаблон) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЗаполнениеНаименованияПоШаблону = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Документ.Шаблон,
			"ЗаполнениеНаименованияПоШаблону");
		ДанныеДокумента.Вставить("titleBlockedByTemplate", ЗаполнениеНаименованияПоШаблону);
	Иначе
		ДанныеДокумента.Вставить("titleBlockedByTemplate", Ложь);
	КонецЕсли;
	
	ДанныеДокумента.Вставить("organizationEnabled", Константы.ИспользоватьУчетПоОрганизациям.Получить());
	Если ЗначениеЗаполнено(Документ.ВидДокумента) Тогда
		ДанныеДокумента.organizationEnabled = ДанныеДокумента.organizationEnabled
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ВидДокумента, "ВестиУчетПоОрганизациям");
	КонецЕсли;
	
КонецПроцедуры

// Получает массив связей документа
//
// Параметры:
//   ТекущийДокумент - СправочникСсылка.ДокументыПредприятия - документ, чьи связи нужно определить.
//
// Возвращаемое значение:
//    Массив из ОбъектXDTO - массив объектов DMDocumentRelation, описывающих связь.
//
Функция ПолучитьСвязанныеДокументы(ТекущийДокумент)
	
	СвязиXDTO = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = Новый Массив;
	ТекстЗапроса.Добавить(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Неопределено КАК ТипСвязи,
		|	Неопределено КАК ТипСвязиПредставление,
		|	ТекущийДокумент.Ссылка КАК Документ,
		|	ТекущийДокумент.Представление КАК ДокументПредставление,
		|	ТекущийДокумент.Заголовок КАК ДокументЗаголовок,
		|	ТекущийДокумент.РегистрационныйНомер КАК ДокументРегистрационныйНомер,
		|	ТекущийДокумент.ДатаРегистрации КАК ДокументДатаРегистрации
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ТекущийДокумент
		|ГДЕ
		|	ТекущийДокумент.Ссылка = &ТекущийДокумент");
		
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДокументыПредприятия) Тогда
		ТекстЗапроса.Добавить(
			"ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СвязиОбъектов.ТипСвязи КАК ТипСвязи,
			|	СвязиОбъектов.ТипСвязи.Представление КАК ТипСвязиПредставление,
			|	СвязанныеДокументы.Ссылка КАК Документ,
			|	СвязанныеДокументы.Представление КАК ДокументПредставление,
			|	СвязанныеДокументы.Заголовок КАК ДокументЗаголовок,
			|	СвязанныеДокументы.РегистрационныйНомер КАК ДокументРегистрационныйНомер,
			|	СвязанныеДокументы.ДатаРегистрации КАК ДокументДатаРегистрации
			|ИЗ
			|	Справочник.ДокументыПредприятия КАК СвязанныеДокументы
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
			|	ПО
			|		СвязанныеДокументы.Ссылка = СвязиОбъектов.СвязанныйОбъект
			|		И СвязиОбъектов.Объект = &ТекущийДокумент
			|		И НЕ СвязанныеДокументы.ПометкаУдаления");
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстЗапроса, Символы.ПС);
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Результат = Запрос.Выполнить().Выгрузить();
	СтрокаТекущего = Результат[0];
	
	Для НСтроки = 1 По Результат.Количество() - 1 Цикл
		
		СтрокаСвязанного = Результат[НСтроки];
		
		СвязьXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDocumentRelation");
		
		// Заполним сам документ.
		
		ДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDocument");
		
		ДокументXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтрокаТекущего.Документ);
		ДокументXDTO.name = СтрокаТекущего.ДокументПредставление;
		
		ДокументXDTO.title = СтрокаТекущего.ДокументЗаголовок;
		ДокументXDTO.regNumber = СтрокаТекущего.ДокументРегистрационныйНомер;
		ДокументXDTO.regDate = СтрокаТекущего.ДокументДатаРегистрации;
			
		СвязьXDTO.document = ДокументXDTO;
		
		// Заполним тип связи.
		
		ТипСвязиXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMRelationType");
		ТипСвязиXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтрокаСвязанного.ТипСвязи);
		ТипСвязиXDTO.name = СтрокаСвязанного.ТипСвязиПредставление;
		ТипСвязиXDTO.predefinedName = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(СтрокаСвязанного.ТипСвязи);
		
		СвязьXDTO.relationType = ТипСвязиXDTO;
		
		// Заполним связанный документ.
		
		СвязанныйДокументXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDocument");
		
		СвязанныйДокументXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтрокаСвязанного.Документ);
		СвязанныйДокументXDTO.name = СтрокаСвязанного.ДокументПредставление;
		
		СвязанныйДокументXDTO.title = СтрокаСвязанного.ДокументЗаголовок;
		СвязанныйДокументXDTO.regNumber = СтрокаСвязанного.ДокументРегистрационныйНомер;
		СвязанныйДокументXDTO.regDate = СтрокаСвязанного.ДокументДатаРегистрации;
		
		СвязьXDTO.relatedDocument = СвязанныйДокументXDTO;
		
		СвязиXDTO.Добавить(СвязьXDTO);
		
	КонецЦикла;
	
	Возврат СвязиXDTO;
	
КонецФункции

Процедура ПолучитьСостоянияДокументаПоВидамДействий(Документ, ОбъектXDTO, ТаблицаСостояний = Неопределено)
	
	Если ЗначениеЗаполнено(ТаблицаСостояний) Тогда
		ТекущиеДействия = ТаблицаСостояний.ВыгрузитьКолонку("Действие");
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ТекущиеДействия, Неопределено);
		ТекущиеВидыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТекущиеДействия, "ВидДействия");
		
		ТаблицаСостояний.Колонки.Добавить("ВидДействия");
		
		Для Каждого Строка Из ТаблицаСостояний Цикл
			Если Строка.Действие = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Строка.ВидДействия = ТекущиеВидыДействий[Строка.Действие].ВидДействия;
		КонецЦикла;
	КонецЕсли;
	
	ОбъектXDTO.statusByActionTypeRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMStatusByActionTypeRows");
	
	Для Каждого ВидДействия Из ВидыДействий(Документ.ВидДокумента) Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMStatusByActionTypeRow");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "actionType", ВидДействия);
		
		Если ЗначениеЗаполнено(ТаблицаСостояний) Тогда
			СтрокаВидДействия = ТаблицаСостояний.Найти(ВидДействия, "ВидДействия");
			Если ЗначениеЗаполнено(СтрокаВидДействия) И ЗначениеЗаполнено(СтрокаВидДействия.Состояние) Тогда
				СтрокаXDTO.status = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(СтрокаВидДействия.Состояние);
				СтрокаXDTO.statusPresentation = Строка(СтрокаВидДействия.Состояние);
			КонецЕсли;
		КонецЕсли;
		
		ОбъектXDTO.statusByActionTypeRows.rows.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСтатьиДДСДокумента(Документ, ОбъектXDTO, СтатьиДвиженияДенежныхСредств)
	
	ОбъектXDTO.cashFlowRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowRows");
	
	Для Каждого Строка Из СтатьиДвиженияДенежныхСредств Цикл
		
		СтатьяXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowItem");
		СтатьяXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(
			Строка.СтатьяДвиженияДенежныхСредств);
		СтатьяXDTO.name = Строка(Строка.СтатьяДвиженияДенежныхСредств);
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowRow");
		СтрокаXDTO.item = СтатьяXDTO;
		СтрокаXDTO.total = Строка.Сумма;
		СтрокаXDTO.VAT = Строка.СуммаНДС;
		
		ОбъектXDTO.cashFlowRows.rows.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСтороныДокумента(Документ, ОбъектXDTO)
	
	ОбъектXDTO.partyRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMPartyRows");
	
	Для Каждого Строка Из Документ.Стороны Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMPartyRow");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "signatureDate", Строка.ДатаПодписи);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "comment", Строка.Комментарий);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "signed", Строка.Подписан);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "setBy", Строка.Установил);
		
		Если ЗначениеЗаполнено(Строка.Наименование) Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "description", Строка.Наименование);
			СтрокаXDTO.description.predefinedName = Справочники.НаименованияСторон.ПолучитьИмяПредопределенного(
				Строка.Наименование);
			Если Строка.Наименование = Справочники.НаименованияСторон.Плательщик Тогда
				СтрокаXDTO.paymentRequestParty = "Payer";
			ИначеЕсли Строка.Наименование = Справочники.НаименованияСторон.Получатель Тогда
				СтрокаXDTO.paymentRequestParty = "Recipient";
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "party", Строка.Сторона);
		Если ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.party, "correspondent", Строка.Сторона);
			
		ИначеЕсли ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Организации") Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.party, "organization", Строка.Сторона);
			
		ИначеЕсли ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Сотрудники") Тогда
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
				СтрокаXDTO.party, "employee", Строка.Сторона);
			
		КонецЕсли;
		
		Если ТипЗнч(Строка.КонтактноеЛицо) = Тип("Строка") Тогда
			
			СтрокаXDTO.contact = ОбработкаЗапросовXDTO.СоздатьОбъект("DMPartyRowContact");
			СтрокаXDTO.contact.name = Строка.КонтактноеЛицо;
			СтрокаXDTO.contact.objectID = ОбработкаЗапросовXDTO.СоздатьObjectID();
			СтрокаXDTO.contact.contactName = Строка.КонтактноеЛицо;
			
		Иначе
			
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "contact", Строка.КонтактноеЛицо);
			Если ТипЗнч(Строка.КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					СтрокаXDTO.contact, "contactPerson", Строка.КонтактноеЛицо);
			ИначеЕсли ТипЗнч(Строка.КонтактноеЛицо) = Тип("СправочникСсылка.Сотрудники") Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					СтрокаXDTO.contact, "employee", Строка.КонтактноеЛицо);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Строка.Подписал) = Тип("Строка") Тогда
			
			СтрокаXDTO.signedBy = ОбработкаЗапросовXDTO.СоздатьОбъект("DMPartyRowContact");
			СтрокаXDTO.signedBy.name = Строка.Подписал;
			СтрокаXDTO.signedBy.objectID = ОбработкаЗапросовXDTO.СоздатьObjectID();
			СтрокаXDTO.signedBy.contactName = Строка.Подписал;
			
		Иначе
			
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "signedBy", Строка.Подписал);
			Если ТипЗнч(Строка.Подписал) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					СтрокаXDTO.signedBy, "contactPerson", Строка.Подписал);
			ИначеЕсли ТипЗнч(Строка.Подписал) = Тип("СправочникСсылка.Сотрудники") Тогда
				ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
					СтрокаXDTO.signedBy, "employee", Строка.Подписал);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбъектXDTO.partyRows.rows.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьТоварыДокумента(Документ, ОбъектXDTO)
	
	ОбъектXDTO.productRows = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProductRows");
	
	Для Каждого Строка Из Документ.Товары Цикл
		
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProductRow");
		
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "product", Строка.Номенклатура);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "quantity", Строка.Количество);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO,
			"measurementUnit", Строка.ЕдиницаИзмерения);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "price", Строка.Цена);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "VAT", Строка.СуммаНДС);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "total", Строка.Сумма);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(СтрокаXDTO, "VATRateUniversal", Строка.СтавкаНДС);
		ЗначениеПеречисленияVATRate = ЗначениеПеречисленияVATRate(Строка.СтавкаНДС);
		Если ЗначениеЗаполнено(ЗначениеПеречисленияVATRate) Тогда
			СтрокаXDTO.VATRate = ЗначениеПеречисленияVATRate;
		КонецЕсли;
		
		ОбъектXDTO.productRows.rows.Добавить(СтрокаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьРегистрации(Документ, МассивОшибок)
	
	Если Документ.РегистрационныйНомер = Документ.ДополнительныеСвойства.НачальныйРегистрационныйНомер Тогда
		// Регистрация выполняться не будет.
		Возврат;
	КонецЕсли;
	
	Если Документ.ДополнительныеСвойства.КэшВидаДокумента.ВестиУчетПоНоменклатуреДел
			И ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел",
				Новый Структура("ВидДокумента", Документ.ВидДокумента))
			И Не ЗначениеЗаполнено(Документ.НоменклатураДел) Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Поле ""Номенклатура дел"" не заполнено'"));
	КонецЕсли;
	
	КоличествоЗанятыхФайлов = РаботаСФайлами.ПолучитьКоличествоЗанятыхФайлов(Документ.Ссылка);
	Если КоличествоЗанятыхФайлов > 0 Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Документ содержит файлы, занятые для редактирования'"));
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение документа.
//
// Параметры:
//   Документ - СправочникОбъект.ДокументыПредприятия - проверяемый объект.
//   ТекстСообщения - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//   ПроверятьСвязи - Булево - требуется ли проверять связи документа.
//   ЕстьОшибки - Булево - неявно возвращаемое значение, признак наличия ошибок проверки заполнения.
//
Процедура ПроверитьДокументПередЗаписью(Документ, ТекстСообщения, ПроверятьСвязи, ЕстьОшибки)
	
	МассивОшибок = Новый Массив;
	
	ПроверитьОбязательныеСвязи(Документ, МассивОшибок);
	ПроверитьКорреспонденцию(Документ, МассивОшибок);
	ПроверитьЗаполнениеРеквизитов(Документ, МассивОшибок);
	ПроверитьИзменениеПолейПоСостоянию(Документ, МассивОшибок);
	ПроверитьВозможностьРегистрации(Документ, МассивОшибок);
	ПроверитьСозданиеДокументаНеПоШаблону(Документ, МассивОшибок);
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстСообщения = ТекстСообщения + СтрСоединить(МассивОшибок, Символы.ПС);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитов(Документ, МассивОшибок)
	
	Если Не ЗначениеЗаполнено(Документ.ВидДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Документ.ДополнительныеСвойства.КэшВидаДокумента.ВестиУчетСторон
			И Не Документ.ДополнительныеСвойства.КэшВидаДокумента.ЯвляетсяЗаявкойНаОплату
			И ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКонтрагентам",
				Новый Структура("ВидДокумента", Документ.ВидДокумента)) Тогда
		
		Если Документ.Контрагенты.Количество() > 0 Тогда
			
			Для Каждого Строка Из Документ.Контрагенты Цикл
				
				Если Не ЗначениеЗаполнено(Строка.Контрагент) Тогда
					
					Если Документ.ДополнительныеСвойства.КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией Тогда
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не заполнена колонка ""Получатель"" в строке %1 списка ""Получатели""'"),
							Документ.Контрагенты.Индекс(Строка) + 1);
						
					Иначе
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не заполнена колонка ""Контрагент"" в строке %1 списка ""Контрагенты""'"),
							Документ.Контрагенты.Индекс(Строка) + 1);
						
					КонецЕсли;
					
					МассивОшибок.Добавить(ТекстОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Не ЗначениеЗаполнено(Документ.Контрагент) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
			
			Если Документ.ДополнительныеСвойства.КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией Тогда
				ТекстСообщения = НСтр("ru = 'Поле ""Отправитель"" не заполнено'");
			КонецЕсли;
			
			Если Документ.ДополнительныеСвойства.КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией Тогда
				ТекстСообщения = НСтр("ru = 'Поле ""Получатель"" не заполнено'");
			КонецЕсли;
			
			МассивОшибок.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьЗаполнениеСтатейДДС(Документ, МассивОшибок);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСтатейДДС(Документ, МассивОшибок)
	
	Если Не Документ.ДополнительныеСвойства.КэшВидаДокумента.ВестиУчетПоСтатьямДДС
			Или Не Документ.ДополнительныеСвойства.Свойство("СтатьиДвиженияДенежныхСредств") Тогда
		Возврат;
	КонецЕсли;
	
	Если Документ.ДополнительныеСвойства.СтатьиДвиженияДенежныхСредств.Количество() = 0 Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Не выбрана статья движения денежных средств'"));
		
	ИначеЕсли Документ.Сумма <> Документ.ДополнительныеСвойства.СтатьиДвиженияДенежныхСредств.Итог("Сумма") Тогда
		МассивОшибок.Добавить(
			НСтр("ru = 'Сумма документа не соответствует ее расшифровке по статьям движения денежных средств'"));
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменениеПолейПоСостоянию(Документ, МассивОшибок)
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) Или Не ОграничиватьДоступностьПолейДокументаПоСостоянию() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееСостояние = СостояниеДокумента(Документ.Ссылка);
	
	ИменаДоступныхПолей = Новый Массив;
	ИменаНедоступныхПолей = Новый Массив;
	Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(Документ, ИменаДоступныхПолей, ИменаНедоступныхПолей);
	
	ИменаПолейИКоманд = Делопроизводство.ПолучитьИменаПолейИКомандДляНастройкиДоступности();
	
	ИменаНедоступныхРеквизитов = Новый Массив;
	
	Для Каждого ИмяПоля Из ИменаНедоступныхПолей Цикл
		НайденнаяСтрока = ИменаПолейИКоманд.Найти(ИмяПоля, "ИмяПоляКоманды");
		Если НайденнаяСтрока <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрока.ИменаРеквизитовОбъекта) Тогда
			Для Каждого Элемент Из СтрРазделить(НайденнаяСтрока.ИменаРеквизитовОбъекта, ",") Цикл
				ИменаНедоступныхРеквизитов.Добавить(СокрЛП(Элемент));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ДокументИБ = Документ.Ссылка.ПолучитьОбъект();
	
	КэшВидаДокументаИБ = Делопроизводство.КэшВидаДокумента(ДокументИБ.ВидДокумента);
	ДокументИБ.ДополнительныеСвойства.Вставить("КэшВидаДокумента", КэшВидаДокументаИБ);
	ПараметрыКорреспонденцииИБ = ПараметрыКорреспонденцииДокумента(ДокументИБ, КэшВидаДокументаИБ);
	ЗаполнитьПараметрыКорреспонденцииИзДокумента(ДокументИБ, ПараметрыКорреспонденцииИБ);
	ДокументИБ.ДополнительныеСвойства.Вставить("ПараметрыКорреспонденции", ПараметрыКорреспонденцииИБ);
	
	РеквизитыОбъектаДО = Справочники.ПравилаЗагрузкиДанныхВДО.РеквизитыОбъектаДО(
		Документ.Метаданные().ПолноеИмя(), Документ.ВидДокумента);
	
	Для Каждого СтрокаРеквизитОбъекта Из РеквизитыОбъектаДО Цикл
		
		Если СтрокаРеквизитОбъекта.Таблица <> "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРеквизитОбъекта.ЭтоТаблица = Ложь
				И СтрокаРеквизитОбъекта.ЭтоДополнительныйРеквизит = Ложь
				И СтрокаРеквизитОбъекта.ИмяМетодаДляЗаполнения = ""
				И ДокументИБ[СтрокаРеквизитОбъекта.Имя] <> Документ[СтрокаРеквизитОбъекта.Имя]
				И РеквизитДокументаВходитВНедоступныеПоля(
					СтрокаРеквизитОбъекта, ИменаНедоступныхПолей, ИменаНедоступныхРеквизитов) Тогда
			МассивОшибок.Добавить(ОписаниеОшибкиПроверкиИзмененияПолейПоСостоянию(
				СтрокаРеквизитОбъекта, ТекущееСостояние));
		КонецЕсли;
		
		Если СтрокаРеквизитОбъекта.ЭтоТаблица = Истина
				И СтрокаРеквизитОбъекта.ИмяМетодаДляЗаполнения = ""
				И Не ОбщегоНазначения.КоллекцииИдентичны(
					ДокументИБ[СтрокаРеквизитОбъекта.Имя].Выгрузить(), Документ[СтрокаРеквизитОбъекта.Имя].Выгрузить())
				И РеквизитДокументаВходитВНедоступныеПоля(
					СтрокаРеквизитОбъекта, ИменаНедоступныхПолей, ИменаНедоступныхРеквизитов) Тогда
			МассивОшибок.Добавить(ОписаниеОшибкиПроверкиИзмененияПолейПоСостоянию(
				СтрокаРеквизитОбъекта, ТекущееСостояние));
		КонецЕсли;
		
		Если СтрокаРеквизитОбъекта.ЭтоДополнительныйРеквизит
				И ИменаНедоступныхПолей.Найти(СтрШаблон("Ad.%1", СтрокаРеквизитОбъекта.Имя)) <> Неопределено Тогда
			СтрокиРеквизита = Документ.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("Свойство", СтрокаРеквизитОбъекта.ДополнительныйРеквизит));
			ЗначениеДопРеквизита = Неопределено;
			Если СтрокиРеквизита.Количество() > 0 Тогда
				ЗначениеДопРеквизита = СтрокиРеквизита[0].Значение;
			КонецЕсли;
			СтрокиРеквизитаИБ = ДокументИБ.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("Свойство", СтрокаРеквизитОбъекта.ДополнительныйРеквизит));
			ЗначениеДопРеквизитаИБ = Неопределено;
			Если СтрокиРеквизитаИБ.Количество() > 0 Тогда
				ЗначениеДопРеквизитаИБ = СтрокиРеквизитаИБ[0].Значение;
			КонецЕсли;
			Если ЗначениеДопРеквизита <> ЗначениеДопРеквизитаИБ Тогда
				МассивОшибок.Добавить(ОписаниеОшибкиПроверкиИзмененияПолейПоСостоянию(
					СтрокаРеквизитОбъекта, ТекущееСостояние));
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРеквизитОбъекта.ИмяМетодаПроверкиДоступностиПоСостоянию <> ""
				И РеквизитДокументаВходитВНедоступныеПоля(
					СтрокаРеквизитОбъекта, ИменаНедоступныхПолей, ИменаНедоступныхРеквизитов) Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("СтрокаРеквизитОбъекта", СтрокаРеквизитОбъекта);
			Параметры.Вставить("ТекущееСостояние", ТекущееСостояние);
			Параметры.Вставить("Документ", Документ);
			Параметры.Вставить("ДокументИБ", ДокументИБ);
			Параметры.Вставить("МассивОшибок", Новый Массив);
			ОбработкаЗапросовXDTO.ВыполнитьВБезопасномРежиме(
				СтрШаблон("%1(Параметры)",
					СтрокаРеквизитОбъекта.ИмяМетодаПроверкиДоступностиПоСостоянию),
				Параметры);
			
			Для Каждого Ошибка Из Параметры.МассивОшибок Цикл
				МассивОшибок.Добавить(Ошибка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорреспонденцию(Документ, МассивОшибок)
	
	Если Не Документ.ДополнительныеСвойства.КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией
			И Не Документ.ДополнительныеСвойства.КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходящийНомер = СокрЛП(Документ.ДополнительныеСвойства.ПараметрыКорреспонденции.ИсходящийНомер);
	ИсходящаяДата = Документ.ДополнительныеСвойства.ПараметрыКорреспонденции.ИсходящаяДата;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Корреспонденция.Ссылка КАК Ссылка,
		|	ДокументОснование.РегистрационныйНомер КАК РегистрационныйНомер
		|ИЗ
		|	Документ.Корреспонденция КАК Корреспонденция
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ДокументОснование
		|		ПО (ДокументОснование.Ссылка = Корреспонденция.Основание)
		|ГДЕ
		|	ДокументОснование.Ссылка <> &Ссылка
		|	И Корреспонденция.НомерКонтрагента = &НомерКонтрагента
		|	И Корреспонденция.ДатаКонтрагента = &ДатаКонтрагента
		|	И Корреспонденция.Корреспонденты.Корреспондент = &Контрагент
		|	И ДокументОснование.ВидДокумента = &ВидДокумента
		|	И НЕ Корреспонденция.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("НомерКонтрагента", ИсходящийНомер);
	Запрос.УстановитьПараметр("ДатаКонтрагента", ИсходящаяДата);
	Запрос.УстановитьПараметр("Контрагент", Документ.Контрагент);
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	Запрос.УстановитьПараметр("ВидДокумента", Документ.ВидДокумента);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст + " И (Организация = &Организация) ";
		Запрос.УстановитьПараметр("Организация", Документ.Организация);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если ДелопроизводствоКлиентСервер.ДокументЗарегистрирован(Выборка.РегистрационныйНомер) Тогда
			МассивОшибок.Добавить(СтрШаблон(
				НСтр("ru = 'Документ №%1 от %2 уже зарегистрирован!'"),
				ИсходящийНомер,
				Формат(ИсходящаяДата, "ДЛФ=D")));
		Иначе
			МассивОшибок.Добавить(СтрШаблон(
				НСтр("ru = 'Документ №%1 от %2 уже записан!'"),
				ИсходящийНомер,
				Формат(ИсходящаяДата, "ДЛФ=D")));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьОбязательныеСвязи(Документ, МассивОшибок);
	
	ОбязательныеТипыСвязей = ОбязательныеТипыСвязей(Документ);
	ОбязательныеСвязи = ОбязательныеСвязи(Документ, ОбязательныеТипыСвязей);
	
	Если ОбязательныеТипыСвязей.Количество() > ОбязательныеСвязи.Количество() Тогда
		
		ОбязательныеСвязиПредставление = Новый Массив;
		Для Каждого ОбязательныйТипСвязи Из ОбязательныеТипыСвязей Цикл
			НайденныеСтроки = ОбязательныеСвязи.НайтиСтроки(
				Новый Структура("СсылкаНа, ТипСвязи", ОбязательныйТипСвязи.СсылкаНа, ОбязательныйТипСвязи.ТипСвязи));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбязательныйТипСвязи.СсылкаНа) Тогда
				СсылкаНа = Строка(ОбязательныйТипСвязи.СсылкаНа);
			Иначе
				СсылкаНа = Строка(ТипЗнч(ОбязательныйТипСвязи.СсылкаНа));
			КонецЕсли;
			ОбязательныеСвязиПредставление.Добавить(СтрШаблон(НСтр("ru = 'тип связи ""%1"", ссылка на %2 ""%3""'"),
				Строка(ОбязательныйТипСвязи.ТипСвязи),
				НРег(ТипЗнч(ОбязательныйТипСвязи.СсылкаНа)),
				СсылкаНа));
		КонецЦикла;
		
		Если ОбязательныеСвязиПредставление.Количество() > 0 Тогда
			МассивОшибок.Добавить(СтрШаблон(
				НСтр("ru = 'Не указаны обязательные связи:
					|%1'"),
				СтрСоединить(ОбязательныеСвязиПредставление, ";" + Символы.ПС)));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСозданиеДокументаНеПоШаблону(Документ, МассивОшибок)
	
	Если ЗначениеЗаполнено(Документ.Ссылка) Или Не ЗначениеЗаполнено(Документ.ВидДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапретитьСозданиеДокументовНеПоШаблону = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Документ.ВидДокумента, "ЗапретитьСозданиеДокументовНеПоШаблону");
		
	Если ЗапретитьСозданиеДокументовНеПоШаблону Тогда
		
		Если Не ЗначениеЗаполнено(Документ.Шаблон) Тогда
			МассивОшибок.Добавить(СтрШаблон(
				НСтр("ru = 'Документы вида ""%1"" можно создавать только по шаблону.'"),
				Документ.ВидДокумента));
			
		Иначе
			ВидДокументаШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Документ.Шаблон, "ВидДокумента");
			Если ВидДокументаШаблона <> Документ.ВидДокумента Тогда
				МассивОшибок.Добавить(СтрШаблон(
					НСтр("ru = 'Документы вида ""%1"" можно создавать только по шаблону.'"),
					Документ.ВидДокумента));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитДокументаВходитВНедоступныеПоля(СтрокаРеквизит, ИменаНедоступныхПолей, ИменаНедоступныхРеквизитов)
	
	Если ЗначениеЗаполнено(СтрокаРеквизит.ИмяПоляПроверкиДоступностиПоСостоянию) Тогда
		Возврат (ИменаНедоступныхПолей.Найти(СтрокаРеквизит.ИмяПоляПроверкиДоступностиПоСостоянию) <> Неопределено);
	Иначе
		Возврат (ИменаНедоступныхРеквизитов.Найти(СтрокаРеквизит.Имя) <> Неопределено);
	КонецЕсли;
	
КонецФункции

Функция СоответствиеСостоянийДокумента()
	
	СоответствиеСостояний = Новый Соответствие;
	СоответствиеСостояний.Вставить("Согласование", "statusApproval");
	СоответствиеСостояний.Вставить("Утверждение", "statusConfirmation");
	СоответствиеСостояний.Вставить("Подписание", "statusSigning");
	СоответствиеСостояний.Вставить("Регистрация", "statusRegistration");
	СоответствиеСостояний.Вставить("Исполнение", "statusPerformance");
	СоответствиеСостояний.Вставить("Ознакомление", "statusExamination");
	
	Возврат СоответствиеСостояний;
	
КонецФункции

// Возвращает состояние документа по ссылке на документ.
//
// Параметры:
//   СсылкаНаДокумент - СправочникСсылка.ДокументыПредприятия - проверяемый документ.
//
// Возвращаемое значение:
//   Строка - состояние документа.
//
Функция СостояниеДокумента(СсылкаНаДокумент)
	
	ВсеСостояния = Делопроизводство.ПолучитьВсеСостоянияДокумента(СсылкаНаДокумент);
	
	// Удаление состояние Проект, если есть прочие состояния.
	Если ВсеСостояния.Количество() > 1 Тогда
		НайденныйИндекс = ВсеСостояния.Найти(Перечисления.СостоянияДокументов.Проект);
		Если НайденныйИндекс <> Неопределено Тогда
			ВсеСостояния.Удалить(НайденныйИндекс);
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеСостояния.Количество() = 0 Тогда
		Возврат "";
		
	Иначе
		Возврат СтрСоединить(ВсеСостояния.ВыгрузитьКолонку("Состояние"), ", ");
		
	КонецЕсли;
	
КонецФункции

Функция СрокДействияЗаполнен(Документ)
	
	Возврат Документ.Бессрочный
		Или ЗначениеЗаполнено(Документ.ДатаНачалаДействия)
		Или ЗначениеЗаполнено(Документ.ДатаОкончанияДействия)
		Или ЗначениеЗаполнено(Документ.ПорядокПродления);
	
КонецФункции

Функция ФайлыШаблона()
	
	ФайлыШаблона = Новый ТаблицаЗначений;
	ФайлыШаблона.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	ФайлыШаблона.Колонки.Добавить("ДобавленИзШаблона", Новый ОписаниеТипов("Булево"));
	ФайлыШаблона.Колонки.Добавить("ЕстьУсловие", Новый ОписаниеТипов("Булево"));
	ФайлыШаблона.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	ФайлыШаблона.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ФайлыШаблона.Колонки.Добавить("ПолныйПуть", Новый ОписаниеТипов("Строка"));
	ФайлыШаблона.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ФайлыШаблона.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	ФайлыШаблона.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	ФайлыШаблона.Колонки.Добавить("РольФайла", Новый ОписаниеТипов("СправочникСсылка.РолиФайлов"));
	ФайлыШаблона.Колонки.Добавить("Условие", Новый ОписаниеТипов("СправочникСсылка.АлгоритмыПроверки"));
	ФайлыШаблона.Колонки.Добавить("ФайлОтраженияЭДО", Новый ОписаниеТипов("Булево"));
	ФайлыШаблона.Колонки.Добавить("ШаблонОснованиеДляСоздания", Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	
	Возврат ФайлыШаблона;
	
КонецФункции

#КонецОбласти

#Область МероприятияВспомогательныеМетоды

// Заполняет и записывает состояние мероприятия по данным объекта XDTO.
//
// Параметры:
//   Мероприятие - СправочникОбъект.Мероприятия
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMMeeting.
//   ТекущаяДата - Дата - Текущая дата.
//   ОсновнойСотрудникТекущегоПользователя - СправочникСсылка.Сотрудники - основной сотрудник текущего пользователя.
//
Процедура ЗаполнитьСостоянияМероприятия(Мероприятие, ОбъектXDTO, ТекущаяДата, ОсновнойСотрудникТекущегоПользователя)
	
	Если Не ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "statuses") Тогда
		Возврат;
	КонецЕсли;
	
	СтарыеСостояния = УправлениеМероприятиями.ПолучитьВсеСостоянияМероприятия(Мероприятие.Ссылка);
	
	НовыеСостояние = Новый Массив;
	Для Каждого СостояниеXDTO Из ОбъектXDTO.statuses Цикл
		НовыеСостояние.Добавить(ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияДО("DMMeetingStatus", СостояниеXDTO));
	КонецЦикла;
	
	Для Каждого СтароеСостояние Из СтарыеСостояния Цикл
		Если НовыеСостояние.Найти(СтароеСостояние) = Неопределено Тогда
			УправлениеМероприятиями.ОчиститьСостояниеМероприятия(
				Мероприятие.Ссылка,
				СтароеСостояние);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НовоеСостояние Из НовыеСостояние Цикл
		Если СтарыеСостояния.Найти(НовоеСостояние) = Неопределено Тогда
			УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
				Мероприятие.Ссылка,
				ТекущаяДата,
				НовоеСостояние,
				ОсновнойСотрудникТекущегоПользователя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру общих настроек, относящихся к мероприятиям.
//
Процедура ПолучитьОбщиеНастройкиМероприятия(ДанныеМероприятия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеМероприятия.Вставить("accessLevelEnabled", Константы.ИспользоватьГрифыДоступа.Получить());
	ДанныеМероприятия.Вставить("foldersEnabled", Константы.ИспользоватьПапкиМероприятий.Получить());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет заполнение мероприятия.
//
// Параметры:
//   Мероприятие - СправочникОбъект.Мероприятия - проверяемый объект.
//   ТекстСообщения - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//   ЕстьОшибки - Булево - неявно возвращаемое значение, признак наличия ошибок проверки заполнения.
//
Процедура ПроверитьМероприятиеПередЗаписью(Мероприятие, ТекстСообщения, ЕстьОшибки)
	
	МассивОшибок = Новый Массив;
	
	Если Мероприятие.ДополнительныеСвойства.Свойство("СписокУчастников")
			И Мероприятие.ДополнительныеСвойства.СписокУчастников.Количество() > 0 Тогда
		СписокУчастников = Мероприятие.ДополнительныеСвойства.СписокУчастников;
		УчитыватьКакПротокольноеМероприятие = Ложь;
		Если ЗначениеЗаполнено(Мероприятие.ВидМероприятия) Тогда
			УчитыватьКакПротокольноеМероприятие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Мероприятие.ВидМероприятия,
				"ПротокольноеМероприятие");
		КонецЕсли;
		
		// Проверка дублей
		КоличествоИсполнителей = СписокУчастников.Количество();
		Для Инд1 = 0 По КоличествоИсполнителей - 2 Цикл
			Строка1 = СписокУчастников[Инд1];
			
			Если Не ЗначениеЗаполнено(Строка1.Исполнитель) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Инд2 = Инд1+1 По КоличествоИсполнителей - 1 Цикл
				Строка2 = СписокУчастников[Инд2];
				
				Если Строка1.Исполнитель = Строка2.Исполнитель Тогда
					МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Участник ""%1"" указан дважды в списке участников!'"),
						Строка(Строка1.Исполнитель)));
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Проверка председателя
		Если ЗначениеЗаполнено(Мероприятие.Председатель) И УчитыватьКакПротокольноеМероприятие Тогда
			
			Найден = Ложь;
			Для Каждого Строка Из СписокУчастников Цикл
				Если Строка.Исполнитель = Мероприятие.Председатель Тогда
					Найден = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не Найден Тогда
				МассивОшибок.Добавить(НСтр("ru = 'Председатель не найден среди участников мероприятия'"));
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка секретаря
		Если ЗначениеЗаполнено(Мероприятие.Секретарь) И УчитыватьКакПротокольноеМероприятие Тогда
			
			Найден = Ложь;
			Для Каждого Строка Из СписокУчастников Цикл
				Если Строка.Исполнитель = Мероприятие.Секретарь Тогда
					Найден = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не Найден И СписокУчастников.Количество() > 0 Тогда 
				МассивОшибок.Добавить(НСтр("ru = 'Секретарь не найден среди участников мероприятия'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстСообщения = ТекстСообщения + СтрСоединить(МассивОшибок, Символы.ПС);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Заполняет набор имен колонок, описывающих файлы документа.
//
// Параметры:
//   НаборКолонокФайлов - Массив из Строка - неявно возвращаемое значение, заполняемый массив.
//
Процедура ЗаполнитьКолонкиСпискаФайлов(НаборКолонокФайлов)
	
	НаборКолонокФайлов.Добавить("objectId");
	НаборКолонокФайлов.Добавить("scannedOriginal");
	НаборКолонокФайлов.Добавить("deletionMark");
	
	НаборКолонокФайлов.Добавить("activeVersion");
	НаборКолонокФайлов.Добавить("role");
	НаборКолонокФайлов.Добавить("signed");
	НаборКолонокФайлов.Добавить("name");
	НаборКолонокФайлов.Добавить("size");
	НаборКолонокФайлов.Добавить("creationDate");
	НаборКолонокФайлов.Добавить("modificationDateUniversal");
	НаборКолонокФайлов.Добавить("author");
	НаборКолонокФайлов.Добавить("extension");
	НаборКолонокФайлов.Добавить("description");
	НаборКолонокФайлов.Добавить("editing");
	НаборКолонокФайлов.Добавить("editingUser");
	НаборКолонокФайлов.Добавить("encrypted");
	НаборКолонокФайлов.Добавить("signatureStatus");
	НаборКолонокФайлов.Добавить("signatureStatusDescription");
	
	НаборКолонокФайлов.Добавить("signatures");
	НаборКолонокФайлов.Добавить("signatures.author");
	НаборКолонокФайлов.Добавить("signatures.date");
	НаборКолонокФайлов.Добавить("signatures.comment");
	НаборКолонокФайлов.Добавить("signatures.signature");
	НаборКолонокФайлов.Добавить("signatures.thumbprint");
	НаборКолонокФайлов.Добавить("signatures.signer");
	НаборКолонокФайлов.Добавить("signatures.certificate");
	НаборКолонокФайлов.Добавить("signatures.signatureFileName");
	
КонецПроцедуры

// Возвращает значение перечисления DMVATRate. Используется для обратной совместимости со старыми БИД.
//
// Параметры:
//   СтавкаНДС - СправочникСсылка.СтавкиНДС - значение ставки НДС.
//
// Возвращаемое значение:
//   Строка - соответствует значению перечисления DMVATRate.
//   Неопределено - если соответствия нет.
//
Функция ЗначениеПеречисленияVATRate(СтавкаНДС)
	
	Если СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
		Возврат "WithoutVAT";
	ИначеЕсли СтавкаНДС = Справочники.СтавкиНДС.НДС0 Тогда
		Возврат "VAT0";
	Иначе
		ЗначениеСтавкиНДС = УчетНДС.ЗначениеСтавкиНДС(СтавкаНДС);
		Если ЗначениеСтавкиНДС = 10 Тогда
			Возврат "VAT10";
		ИначеЕсли ЗначениеСтавкиНДС = 18 Тогда
			Возврат "VAT18";
		ИначеЕсли ЗначениеСтавкиНДС = 20 Тогда
			Возврат "VAT20";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает значение ставки НДС по перечислению DMVATRate. Используется для обратной совместимости со старыми БИД.
//
// Параметры:
//   VATRate - Строка - соответствует значению перечисления DMVATRate.
//
// Возвращаемое значение:
//   СправочникСсылка.СтавкиНДС - значение ставки НДС.
//   Неопределено - если соответствия нет.
//
Функция ЗначениеСтавкиНДСИзПеречисленияVATRate(Знач VATRate)
	
	VATRate = НРег(VATRate);
	
	Если VATRate = "withoutvat" Тогда
		Возврат Справочники.СтавкиНДС.БезНДС;
	ИначеЕсли VATRate = "vat0" Тогда
		Возврат Справочники.СтавкиНДС.НДС0;
	Иначе
		Если VATRate = "vat10" Тогда
			Возврат УчетНДС.СтавкаНДСИзЧисла(10);
		ИначеЕсли VATRate = "vat18" Тогда
			Возврат УчетНДС.СтавкаНДСИзЧисла(18);
		ИначеЕсли VATRate = "vat20" Тогда
			Возврат УчетНДС.СтавкаНДСИзЧисла(20);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Конструктор таблицы "СвязанныеДокументыПоВопросам" - поля соответствуют полям этой таблицы - реквизиты формы элемента
// документа предприятия.
//
// Возвращаемое значение:
//   ТаблицаЗначений - пустая таблица значений.
//
Функция НовыйТаблицаСвязанныеДокументыПоВопросам()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Вопрос", Новый ОписаниеТипов("СправочникСсылка.ВопросыОбращений"));
	Таблица.Колонки.Добавить("ДатаРегистрации", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ОтветныйДатаРегистрации", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ОтветныйДокумент", Новый ОписаниеТипов("СправочникСсылка.ДокументыПредприятия"));
	Таблица.Колонки.Добавить("ОтветныйДокументСтрока", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОтветныйРегистрационныйНомер", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РегистрационныйНомер", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("СопроводительныйДокумент", Новый ОписаниеТипов("СправочникСсылка.ДокументыПредприятия"));
	Таблица.Колонки.Добавить("СопроводительныйДокументСтрока", Новый ОписаниеТипов("Строка"));
	Возврат Таблица;
	
КонецФункции

#КонецОбласти