////////////////////////////////////////////////////////////////////////////////
// Команды работа с файлами (клиент).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Блокирует файл для редактирования и открывает его
Процедура Редактировать(ОбъектСсылка, УникальныйИдентификатор = Неопределено, 
	РабочийКаталогВладельца = Неопределено, ПоказыватьОповещения = Истина,
	ОткрыватьPdfВWord = Ложь) Экспорт
	
	Перем ДанныеФайла;
	
	Если ОбъектСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыВыполнения.Вставить("ОбъектСсылка", ОбъектСсылка);
	ПараметрыВыполнения.Вставить("ПоказыватьОповещения", ПоказыватьОповещения);
	Обработчик = Новый ОписаниеОповещения("РедактироватьСОповещениемЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	РаботаСФайламиКлиент.РедактироватьФайлПоСсылке(Обработчик, ОбъектСсылка, 
		УникальныйИдентификатор, РабочийКаталогВладельца, ПоказыватьОповещения, ОткрыватьPdfВWord);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура РедактироватьСОповещениемЗавершение(ФайлОтредактирован, ПараметрыВыполнения) Экспорт
	
	Если ФайлОтредактирован Тогда
		
		ОповеститьОбИзменении(ПараметрыВыполнения.ОбъектСсылка);
		
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы", 
			"ДанныеФайлаИзменены",
			ПараметрыВыполнения.ОбъектСсылка, 
			ПараметрыВыполнения.ДанныеФайла.Владелец, 
			ПараметрыВыполнения.ДанныеФайла.ЕстьЗашифрованныеИлиЗанятыеФайлы), 
			ПараметрыВыполнения.ОбъектСсылка);
			
		Оповестить("Запись_Файл", 
			Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы", 
			"ФайлРедактировался",
			ПараметрыВыполнения.ОбъектСсылка, 
			ПараметрыВыполнения.ДанныеФайла.Владелец, 
			ПараметрыВыполнения.ДанныеФайла.ЕстьЗашифрованныеИлиЗанятыеФайлы), 
			ПараметрыВыполнения.ОбъектСсылка);
			
	КонецЕсли;
	
	РаботаСФайламиКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);
	
КонецПроцедуры

// Открывает файл для просмотра
//
// Параметры:
//  ДанныеФайла - Структура - структура с данными файла.
//
Процедура Открыть(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	РаботаСФайламиКлиент.Открыть(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

// Печатает файлы на принтер посредством ассоциированного приложения
//
// Параметры
//  ДанныеФайлов - Массив - массив структур с данными файлов
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура НапечататьФайлы(ДанныеФайлов, УникальныйИдентификатор = Неопределено) Экспорт
	
	РаботаСФайламиКлиент.НапечататьФайлы(ДанныеФайлов, УникальныйИдентификатор);
	
КонецПроцедуры

// Печатает файл на принтер посредством ассоциированного приложения
//
// Параметры
//  ДанныеФайлов - Структура - структура с данными файла
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура НапечататьФайл(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайлов = Новый Массив;
	ДанныеФайлов.Добавить(ДанныеФайла);
	
	РаботаСФайламиКлиент.НапечататьФайлы(ДанныеФайлов, УникальныйИдентификатор);
	
КонецПроцедуры

// Открывает каталог на локальном компьютере в котором размещен этот файл
Процедура ОткрытьКаталогФайла(ДанныеФайла) Экспорт
	
	РаботаСФайламиКлиент.КаталогФайла(Неопределено, ДанныеФайла);
	
КонецПроцедуры

// Сохраняет текущую версию файла в выбранный каталог на жестком или сетевом диске
Процедура СохранитьКак(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	РаботаСФайламиКлиент.СохранитьКак(Неопределено, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

// Распознает файл
Процедура РаспознатьФайлСОповещением(Обработчик, ПараметрКоманды, УникальныйИдентификатор = Неопределено,
	ПараметрыРаспознаванияТаймлист = Неопределено) Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ПараметрКоманды", ПараметрКоманды);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыВыполнения.Вставить("Обработчик", Обработчик);
	
	СпикерыТаймлист = Новый Структура("КоличествоСпикеров");
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		Счетчик = 0;
		ФайлыТаймлист = Новый Массив;
		
		Пока Счетчик < ПараметрКоманды.Количество() Цикл
			
			Если ПараметрыРаспознаванияТаймлист <> Неопределено Тогда
				СпикерыТаймлист.КоличествоСпикеров = ПараметрыРаспознаванияТаймлист[ПараметрКоманды];
			КонецЕсли;
			
			ЭтоФайлТаймлист = ТаймлистВызовСервера.НачатьОбработкуФайла(ПараметрКоманды[Счетчик],
				ПредопределенноеЗначение("Перечисление.ТаймлистТипыЗаданий.ЗагрузитьФайлВСервис"),
				СпикерыТаймлист);
			
			СпикерыТаймлист.КоличествоСпикеров = 0;
			
			Если ЭтоФайлТаймлист = Истина Тогда
				ФайлыТаймлист.Добавить(ПараметрКоманды[Счетчик]);
				ПараметрКоманды.Удалить(Счетчик);
				Продолжить;
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		Если ФайлыТаймлист.Количество() <> 0 Тогда
			ВыполнитьОбработкуОповещения(Обработчик);
		КонецЕсли;
		
		Если ПараметрКоманды.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыРаспознаванияТаймлист <> Неопределено Тогда
			СпикерыТаймлист.КоличествоСпикеров = ПараметрыРаспознаванияТаймлист[ПараметрКоманды];
		КонецЕсли;
		
		ЭтоФайлТаймлист = ТаймлистВызовСервера.НачатьОбработкуФайла(ПараметрКоманды,
			ПредопределенноеЗначение("Перечисление.ТаймлистТипыЗаданий.ЗагрузитьФайлВСервис"),
			СпикерыТаймлист);
			
		Если ЭтоФайлТаймлист Тогда
			ОповеститьОбИзмененииФайла(ПараметрКоманды);
			Если Обработчик <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(Обработчик);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСФайламиКлиент.ВыбратьНастройкиРаспознаванияФайлаПоЗапросу(
		Новый ОписаниеОповещения("РаспознатьФайлСОповещениемПослеНастройки", ЭтотОбъект, ПараметрыВыполнения));
	
КонецПроцедуры

// Продолжение распознавания файла
Процедура РаспознатьФайлСОповещениемПослеНастройки(ПараметрыРаспознавания, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(ПараметрыРаспознавания) = Тип("Структура") Тогда
		
		Если ТипЗнч(ПараметрыВыполнения.ПараметрКоманды) = Тип("Массив") Тогда
			
			ФайлСсылка = ПараметрыВыполнения.ПараметрКоманды;
			
			СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				                 НСтр("ru = 'Выполняется распознавание %1 файлов...'"),
				                 ПараметрыВыполнения.ПараметрКоманды.Количество());
			Состояние(СтрокаСостояния);
			
			СтрокаВозврата = РаботаСФайламиВызовСервера.РаспознатьФайлы(
				ПараметрыВыполнения.ПараметрКоманды, ПараметрыРаспознавания, 
				ПараметрыВыполнения.УникальныйИдентификатор);
			
			Состояние(СтрокаВозврата);
			
		Иначе
			
			ФайлСсылка = ПараметрыВыполнения.ПараметрКоманды;
			
			СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				                 НСтр("ru = 'Выполняется распознавание файла ""%1""...'"),
				                 ФайлСсылка );
			Состояние(СтрокаСостояния);
			
			ОписаниеОшибки = "";
			РаспознанныйТекст = "";
			СтрокаВозврата = РаботаСФайламиВызовСервера.РаспознатьФайл(ФайлСсылка, ПараметрыРаспознавания, 
				ОписаниеОшибки, РаспознанныйТекст, ПараметрыВыполнения.УникальныйИдентификатор);
			
			Состояние();
			
			Если СтрокаВозврата = "Успешно" Тогда
				
				ВыполнитьОбработкуОповещения(ПараметрыВыполнения.Обработчик);
				
				СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					                 НСтр("ru = 'Файл ""%1"" успешно распознан. Показать распознанный текст?'"),
					                 ФайлСсылка );
				Обработчик = Новый ОписаниеОповещения("РаспознатьФайлСОповещениемПослеВопрос", ЭтотОбъект, ПараметрыВыполнения);
				ПоказатьВопрос(Обработчик, СтрокаСостояния, РежимДиалогаВопрос.ДаНет);
				
			ИначеЕсли СтрокаВозврата = "Ошибка" И Не ПустаяСтрока(ОписаниеОшибки) Тогда
				
				СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					                 НСтр("ru = 'Ошибка распознавания файла ""%1"": %2'"),
					                 ФайлСсылка, ОписаниеОшибки );
				ПоказатьПредупреждение(,СтрокаСостояния);
				
			ИначеЕсли СтрокаВозврата = "ПоставленВОчередь"
				Или СтрокаВозврата = "НачатоРаспознавание" Тогда
				
				ОповеститьОбИзмененииФайла(ФайлСсылка);
				
				СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					                 НСтр("ru = 'Файл ""%1"" поставлен в очередь распознавания.'"),
					                 ФайлСсылка );
				Состояние(СтрокаСостояния);
				
			ИначеЕсли СтрокаВозврата = "РаспознаваниеВыполняется" Тогда
				
				ОповеститьОбИзмененииФайла(ФайлСсылка);
				
				СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					                 НСтр("ru = 'Распознавание файла ""%1"" уже выполняется.'"),
					                 ФайлСсылка );
				
				Состояние(СтрокаСостояния);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение распознавания файла после вопроса
Процедура РаспознатьФайлСОповещениемПослеВопрос(КодВозврата, ПараметрыВыполнения) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		
		ПараметрыФормы = Новый Структура("ОбъектСсылка", ПараметрыВыполнения.ПараметрКоманды);
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаТекстовогоОбраза", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Рассылает оповещение "Запись_Файл" с событием "ДанныеФайлаИзменены".
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы.
// 
Процедура ОповеститьОбИзмененииФайла(Файл)
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Событие", "ДанныеФайлаИзменены");
	ПараметрыОповещения.Вставить("Файл", Файл);
	ПараметрыОповещения.Вставить("Владелец", ДанныеФайла.Владелец);
	ПараметрыОповещения.Вставить("ТаймлистСтатус", ДанныеФайла.ТаймлистСтатус);
	ПараметрыОповещения.Вставить("ТаймлистЗадание", ДанныеФайла.ТаймлистЗадание);
	ПараметрыОповещения.Вставить("ЕстьЗанятыеФайлы", Неопределено);
	ПараметрыОповещения.Вставить("ИдентификаторРодительскойФормы", Неопределено);
	
	Оповестить("Запись_Файл", ПараметрыОповещения, Файл);
	
КонецПроцедуры

#КонецОбласти