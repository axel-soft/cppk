////////////////////////////////////////////////////////////////////////////////
// Сотрудники
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры - Структура - Структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить(
		"ОсновнойСотрудник",
		ОсновнойСотрудник());
	Параметры.Вставить(
		"ВсеСотрудникиТекущегоПользователя",
		СотрудникиПовтИсп.ВсеСотрудникиТекущегоПользователя());
	
КонецПроцедуры

#КонецОбласти

#Область ПереходНаСотрудников

// Методы актуальны на время перехода объектов с пользователей на сотрудников.

// Возвращает пользователей сотрудника.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Пользователи - Пользователи сотрудника.
//
Функция ПользователиСотрудника(Сотрудник) Экспорт
	
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	Возврат ПользователиСотрудников(МассивСотрудников);
	
КонецФункции

// Возвращает любого пользователя сотрудника.
// Используется на время подключения сотрудников к объектам ДО.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи
// 
Функция ЛюбойПользовательСотрудника(Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передается пользователь, то его и возвращаем.
	Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат Сотрудник;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиПользователей.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО СотрудникиПользователей.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	СотрудникиПользователей.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Ссылка УБЫВ";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

// Возвращает для каждого сотрудника любого его пользователя.
// Используется на время подключения сотрудников к объектам ДО.
//
// Параметры:
//  Сотрудники - Массив
//
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи
//
Функция ЛюбыеПользователиСотрудников(Сотрудники) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользователиСотрудников = Новый Массив;
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		ПользователиСотрудников.Добавить(ЛюбойПользовательСотрудника(Сотрудник));
	КонецЦикла;
	
	Возврат ПользователиСотрудников;
	
КонецФункции

// Возвращает для каждого пользователя любого его сотрудника.
// Используется на время подключения сотрудников к объектам ДО.
//
// Параметры:
//  Пользователи - Массив
//   * СправочникСсылка.Пользователи
//
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.Сотрудники
//
Функция ЛюбыеСотрудникиПользователей(Пользователи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СотрудникиПользователей = Новый Массив;
	
	Для Каждого Пользователь Из Пользователи Цикл
		СотрудникиПользователей.Добавить(
			Сотрудники.ОсновнойСотрудникПользователя(Пользователь));
	КонецЦикла;
	
	Возврат СотрудникиПользователей;
	
КонецФункции

// Возвращает единым списком пользователя и его сотрудников.
// Используется на время подключения сотрудников к объектам ДО.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//                 Неопределено - будет сформирован список для текущего пользователя.
//  Действительные - Булево - признак получения действительных сотрудников.
//
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи
//
Функция ПользовательИЕгоСотрудники(Знач Пользователь = Неопределено, Действительные = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Результат = СотрудникиПользователя(Пользователь, Действительные);
	
	Возврат Результат;
	
КонецФункции

// Возвращает текущего пользователя и всех его сотрудников.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники - Пользователь и его сотрудники.
//
Функция ПользовательИСотрудники(Пользователь) Экспорт
	
	Возврат СотрудникиПользователя(Пользователь);
	
КонецФункции

// Возвращает текущего пользователя и всех его сотрудников.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники - Текущий пользователь и сотрудники.
//
Функция ТекущийПользовательИСотрудники() Экспорт
	
	Возврат СотрудникиПовтИсп.ВсеСотрудникиТекущегоПользователя();
	
КонецФункции

// Проверяет, является ли указанный сотрудник или пользователем, сотрудником или пользователем текущего пользователя.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники.
// 
// Возвращаемое значение:
//  Булево - Указанный сотрудник или пользователь является сотрудником или пользователем текущего пользователя.
//
Функция ЭтоСотрудникИлиПользовательТекущегоПользователя(ПользовательИлиСотрудник) Экспорт
	
	Если Не ЗначениеЗаполнено(ПользовательИлиСотрудник) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущийПользовательИСотрудники = СотрудникиПовтИсп.ТекущийПользовательИСотрудники();
	ЭтоСотрудникИлиПользовательТекущегоПользователя =
		ТекущийПользовательИСотрудники.Найти(ПользовательИлиСотрудник) <> Неопределено;
	
	Возврат ЭтоСотрудникИлиПользовательТекущегоПользователя;
	
КонецФункции

// Заменяет пользователя сотрудником.
//
// Параметры:
//  ОбрабатываемаяСсылка - ЛюбаяСсылка.
//  Действительный - Булево
// 
// Возвращаемое значение:
//  ЛюбаяСсылка - Неизменная ссылка, либо сотрудник, если ссылка была на пользователя.
//
Функция ЗаменитьПользователяСотрудником(ОбрабатываемаяСсылка, Действительный = Истина) Экспорт
	
	Если ОбрабатываемаяСсылка = ПользователиСерверПовтИсп.СсылкаНеуказанногоПользователя()
		Или ОбрабатываемаяСсылка = Справочники.Пользователи.ПустаяСсылка() Тогда
		
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	ОбрабатываемыйМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбрабатываемаяСсылка);
	
	ОбрабатываемыйМассив = ЗаменитьПользователейСотрудниками(ОбрабатываемыйМассив, Действительный);
	
	Если ОбрабатываемыйМассив.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Нет сотрудников у пользователя %1'"), ОбрабатываемаяСсылка);
	КонецЕсли;
	
	Возврат ОбрабатываемыйМассив[0];
	
КонецФункции

// Заменяет всех пользователей в массиве сотрудниками.
//
// Параметры:
//  ОбрабатываемыйМассив - Массив.
//  Действительные - Булево - Признак получения действительных сотрудников.
// 
// Возвращаемое значение:
//  Массив - Массив, в котором пользователи заменены на сотрудников.
//
Функция ЗаменитьПользователейСотрудниками(ОбрабатываемыйМассив, Действительные = Истина) Экспорт
	
	ОбработанныйМассив = Новый Массив;
	МассивПользователей = Новый Массив;
	Для Каждого ЭлементМассива Из ОбрабатываемыйМассив Цикл
		
		Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей.Добавить(ЭлементМассива);
		Иначе
			ОбработанныйМассив.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	СотрудникиПользователей = СотрудникиПользователей(
		МассивПользователей,
		Действительные);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбработанныйМассив, СотрудникиПользователей);
	
	Возврат ОбработанныйМассив;
	
КонецФункции

// Заменяет всех сотрудников в массиве пользователями.
//
// Параметры:
//  ОбрабатываемыйМассив - Массив.
// 
// Возвращаемое значение:
//  Массив - Массив, в котором сотрудники заменены на пользователей.
//
Функция ЗаменитьСотрудниковПользователями(ОбрабатываемыйМассив) Экспорт
	
	ОбработанныйМассив = Новый Массив;
	МассивСотрудников = Новый Массив;
	Для Каждого ЭлементМассива Из ОбрабатываемыйМассив Цикл
		
		Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Сотрудники") Тогда
			МассивСотрудников.Добавить(ЭлементМассива);
		Иначе
			ОбработанныйМассив.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	ПользователиСотрудников = ПользователиСотрудников(МассивСотрудников);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбработанныйМассив, ПользователиСотрудников);
	
	Возврат ОбработанныйМассив;
	
КонецФункции

// Возвращает единственного пользователя сотрудника. Если пользователей несколько, выбирается наиболее актуальный.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники -  исходный сотрудник.
// 
// Возвращаемое значение:
//   -  СправочникСсылка.Пользователи
//
Функция ПриоритетныйПользовательСотрудника(Сотрудник) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СотрудникиПользователей.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО СотрудникиПользователей.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	СотрудникиПользователей.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.ПометкаУдаления,
		|	Пользователи.Недействителен,
		|	Пользователи.Служебный,
		|	Пользователи.ИдентификаторПользователяИБ УБЫВ,
		|	Пользователи.Ссылка");
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

// Возвращает ссылку на сотрудника по переданным параметрам.
//
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//  Подразделение - СправочникСсылка.СтруктураПредприятия
//  Должность - СправочникСсылка.Должности
//
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники
//
Функция СсылкаНаСотрудникаПоПараметрам(ФизическоеЛицо, Подразделение, Должность,
	НачалоДействия, ОкончаниеДействия) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Владелец = &Владелец
		|	И Сотрудники.Подразделение = &Подразделение
		|	И Сотрудники.Должность = &Должность
		|	И ВЫБОР
		|			КОГДА Сотрудники.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|					И &ОкончаниеДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА Сотрудники.ДатаНачалаДействия <= &ОкончаниеДействия
		|			КОГДА &ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА Сотрудники.ДатаНачалаДействия <= &МаксДата
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА Сотрудники.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|					И &НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА Сотрудники.ДатаОкончанияДействия >= &НачалоДействия
		|			КОГДА Сотрудники.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА &МаксДата >= &НачалоДействия
		|		КОНЕЦ
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Владелец", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.УстановитьПараметр("НачалоДействия", НачалоДействия);
	Запрос.УстановитьПараметр("ОкончаниеДействия", ОкончаниеДействия);
	Запрос.УстановитьПараметр("МаксДата", Дата(3999,12,31));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает всех сотрудников.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Все сотрудники.
//
Функция ВсеСотрудники() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Действует = ИСТИНА
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает всех недействующих сотрудников.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Все недействующие сотрудники.
//
Функция ВсеНедействующиеСотрудники() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Действует = ЛОЖЬ
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает всех сотрудников, без действительных пользователей.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Все сотрудники без действительных пользователей.
// 
Функция ВсеСотрудникиБезДействительныхПользователей() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО Сотрудники.Ссылка = СотрудникиПользователей.Сотрудник
		|		И Сотрудники.ПометкаУдаления = ЛОЖЬ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО СотрудникиПользователей.Пользователь = Пользователи.Ссылка
		|		И Пользователи.Недействителен = ЛОЖЬ
		|		И Пользователи.ПометкаУдаления = ЛОЖЬ
		|ГДЕ
		|	Пользователи.Ссылка ЕСТЬ NULL");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает всех сотрудников текущего сотрудника.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Текущий сотрудник.
//
Функция ВсеСотрудникиТекущегоПользователя(ТолькоДействующие = Истина) Экспорт
	
	Возврат СотрудникиПользователя(Пользователи.ТекущийПользователь(), ТолькоДействующие);
	
КонецФункции

// Возвращает сотрудников пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//                 Неопределено - будут получены сотрудники текущего пользователя.
//  Действительные - Булево - признак получения действительных сотрудников. 
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Сотрудники пользователя.
//
Функция СотрудникиПользователя(Пользователь = Неопределено, Действительные = Истина) Экспорт
	
	МассивПользователей = Новый Массив;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		МассивПользователей.Добавить(Пользователь);
	Иначе
		МассивПользователей.Добавить(Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	СотрудникиПользователя = СотрудникиПользователей(МассивПользователей, Действительные);
	
	Возврат СотрудникиПользователя;
	
КонецФункции

// Возвращает сотрудников пользователей.
//
// Параметры:
//  МассивПользователей - Массив из СправочникСсылка.Пользователи.
//  Действительные - Булево - Признак получения действительных сотрудников.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Сотрудники пользователей.
//
Функция СотрудникиПользователей(МассивПользователей, Действительные = Истина) Экспорт
	
	СотрудникиПользователей = Новый Массив; 
	
	Если МассивПользователей.Количество() = 1 
		И МассивПользователей[0] = Пользователи.ТекущийПользователь() Тогда
		
		Возврат СотрудникиПовтИсп.ВсеСотрудникиТекущегоПользователя(Действительные);
		
	КонецЕсли;
	
	СотрудникиПоПользователям = СотрудникиПоПользователям(МассивПользователей, Действительные);
	Для Каждого КлючИЗначение Из СотрудникиПоПользователям Цикл
		
		СотрудникиПользователя = КлючИЗначение.Значение;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СотрудникиПользователей,
			СотрудникиПользователя,
			Истина);
		
	КонецЦикла;
	
	Возврат СотрудникиПользователей;
	
КонецФункции

// Возвращает сотрудников по пользователям.
//
// Параметры:
//  МассивПользователей - Массив из СправочникСсылка.Пользователи.
//  Действительные - Булево - Признак получения действительных сотрудников.
// 
// Возвращаемое значение:
//  Соответствие - Сотрудники по пользователям.
//   * Ключ - СправочникСсылка.Пользователь - Пользователь.
//   * Значение - Массив из СправочникСсылка.Сотрудники - Сотрудники пользователя.
//
Функция СотрудникиПоПользователям(МассивПользователей, Действительные = Истина) Экспорт
	
	СотрудникиПоПользователям = Новый Соответствие;
	
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат СотрудникиПоПользователям;
	КонецЕсли;
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		СотрудникиПоПользователям[Пользователь] = Новый Массив;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Если Действительные Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиПользователей.Пользователь КАК Пользователь,
			|	СотрудникиПользователей.Сотрудник КАК Сотрудник
			|ИЗ
			|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО СотрудникиПользователей.Сотрудник = Сотрудники.Ссылка
			|ГДЕ
			|	СотрудникиПользователей.Пользователь В(&МассивПользователей)
			|	И Сотрудники.Действует = ИСТИНА
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудники.Действует УБЫВ,
			|	Сотрудники.ДатаНачалаДействия";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиПользователей.Пользователь КАК Пользователь,
			|	СотрудникиПользователей.Сотрудник КАК Сотрудник
			|ИЗ
			|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО СотрудникиПользователей.Сотрудник = Сотрудники.Ссылка
			|ГДЕ
			|	СотрудникиПользователей.Пользователь В(&МассивПользователей)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудники.Действует УБЫВ,
			|	Сотрудники.ДатаНачалаДействия";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		СотрудникиПользователя = СотрудникиПоПользователям[Выборка.Пользователь];
		Если СотрудникиПользователя.Найти(Выборка.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СотрудникиПользователя.Добавить(Выборка.Сотрудник);
		
	КонецЦикла;
	
	Возврат СотрудникиПоПользователям;
	
КонецФункции

// Возвращает сотрудников по пользователям.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
//  Действительные - Булево - Признак получения действительных сотрудников.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Сотрудники
//
Функция СотрудникиПоПользователю(Пользователь, Действительные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Если Действительные Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиПользователей.Пользователь КАК Пользователь,
			|	СотрудникиПользователей.Сотрудник КАК Сотрудник
			|ИЗ
			|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО СотрудникиПользователей.Сотрудник = Сотрудники.Ссылка
			|ГДЕ
			|	СотрудникиПользователей.Пользователь = &Пользователь
			|	И Сотрудники.Действует = ИСТИНА
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудники.Действует УБЫВ,
			|	Сотрудники.ДатаНачалаДействия";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиПользователей.Пользователь КАК Пользователь,
			|	СотрудникиПользователей.Сотрудник КАК Сотрудник
			|ИЗ
			|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО СотрудникиПользователей.Сотрудник = Сотрудники.Ссылка
			|ГДЕ
			|	СотрудникиПользователей.Пользователь = &Пользователь
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудники.Действует УБЫВ,
			|	Сотрудники.ДатаНачалаДействия";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	УстановитьПривилегированныйРежим(Истина);
	СотрудникиПользователя = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СотрудникиПользователя;
	
КонецФункции

// Возвращает пользователей сотрудников.
//
// Параметры:
//  МассивСотрудников - Массив из СправочникСсылка.Сотрудники.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Пользователи - Пользователи сотрудников.
//
Функция ПользователиСотрудников(МассивСотрудников) Экспорт
	
	ПользователиСотрудников = Новый Массив;
	
	ПользователиПоСотрудникам = ПользователиПоСотрудникам(МассивСотрудников);
	Для Каждого КлючИЗначение Из ПользователиПоСотрудникам Цикл
		
		СотрудникиПользователя = КлючИЗначение.Значение;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПользователиСотрудников,
			СотрудникиПользователя,
			Истина);
		
	КонецЦикла;
	
	Возврат ПользователиСотрудников;
	
КонецФункции

// Возвращает пользователей по сотрудникам.
//
// Параметры:
//  МассивСотрудников - Массив из СправочникСсылка.Сотрудники.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Пользователи по сотрудникам:
//   * Ключ - СправочникСсылка.Сотрудники - Сотрудник.
//   * Значение - Массив из СправочникСсылка.Пользователи - Пользователи сотрудника.
//
Функция ПользователиПоСотрудникам(МассивСотрудников) Экспорт
	
	ПользователиПоСотрудникам = Новый Соответствие;
	
	Если МассивСотрудников.Количество() = 0 Тогда
		Возврат ПользователиПоСотрудникам;
	КонецЕсли;
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		ПользователиПоСотрудникам[Сотрудник] = Новый Массив;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СотрудникиПользователей.Пользователь КАК Пользователь,
		|	СотрудникиПользователей.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|ГДЕ
		|	СотрудникиПользователей.Сотрудник В(&МассивСотрудников)");
	
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		ПользователиСотрудника = ПользователиПоСотрудникам[Выборка.Сотрудник];
		Если ПользователиСотрудника.Найти(Выборка.Пользователь) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПользователиСотрудника.Добавить(Выборка.Пользователь);
		
	КонецЦикла;
	
	Возврат ПользователиПоСотрудникам;
	
КонецФункции

// Возвращает пользователя сотрудника.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники.
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Пользователь сотрудника.
//
Функция ПользовательСотрудника(Сотрудник) Экспорт
	
	Возврат Сотрудники.ЛюбойПользовательСотрудника(Сотрудник);
	
КонецФункции

// Проверяет сотрудника на принадлежность у текущему пользователю.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
//  Пользователь - СправочникСсылка.Пользователи
//                 Неопределено - будут получены сотрудники текущего пользователя.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоСотрудникПользователя(Сотрудник, Знач Пользователь = Неопределено) Экспорт
	
	СотрудникиПользователя = СотрудникиПользователя(Пользователь);
	
	Если СотрудникиПользователя.Найти(Сотрудник) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, является ли указанный сотрудник, сотрудником текущего пользователя.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  Булево - Указанный сотрудник является сотрудником текущего пользователя.
//
Функция ЭтоСотрудникТекущегоПользователя(Сотрудник) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсеСотрудникиТекущегоПользователя = СотрудникиПовтИсп.ВсеСотрудникиТекущегоПользователя(Ложь);
	ЭтоСотрудникТекущегоПользователя =
		ВсеСотрудникиТекущегоПользователя.Найти(Сотрудник) <> Неопределено;
	
	Возврат ЭтоСотрудникТекущегоПользователя;
	
КонецФункции

// Возвращает основного сотрудника пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//                 "ТекущийПользователь" - будут получены сотрудники текущего пользователя.
//
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники
// 
Функция ОсновнойСотрудникПользователя(Пользователь = "ТекущийПользователь") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Пользователь = "ТекущийПользователь" Тогда // Параметр сеанса ещё может быть не установлен.
		Пользователь = Пользователи.ТекущийПользователь();
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи")
		И Пользователь = Пользователи.ТекущийПользователь() Тогда // Если передается пользователь, то может быть он текущий.
		Возврат ПараметрыСеанса.ОсновнойСотрудник;
	ИначеЕсли ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда // Если передается не пользователь, то его и возвращаем.
		Возврат Пользователь;
	КонецЕсли;
	
	Физлицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизЛицо");
	
	Если ЗначениеЗаполнено(Физлицо) Тогда
		ОсновнойСотрудник = Сотрудники.ОсновнойСотрудникФизЛица(Физлицо);
		Возврат ОсновнойСотрудник;
	КонецЕсли;	
	
	Возврат Справочники.Сотрудники.ПустаяСсылка();
	
КонецФункции

// Возвращает текущего сотрудника.
// 
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники - Текущий сотрудник.
//
Функция ОсновнойСотрудник() Экспорт
	
	Возврат ПараметрыСеанса.ОсновнойСотрудник;
	
КонецФункции

// Возвращает подразделение сотрудника.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
//
// Возвращаемое значение:
//  СправочникСсылка.СтруктураПредприятия
//
Функция ПодразделениеСотрудника(Сотрудник) Экспорт
	
	// На период подключения сотрудников к объектам.
	Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		Сотрудник, "Подразделение");
	
КонецФункции

// Возвращает сотрудников подразделения.
//
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия.
//  ТолькоДействующие - Булево - указывает на поиск только действующих сотрудников.
//  СУчетомИерархии - Булево - возвращает сотрдуников подразделения с учетом подчиненных подразделений.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Сотрудники подразделения.
//
Функция СотрудникиПодразделения(Подразделение, ТолькоДействующие = Истина, СУчетомИерархии = Ложь) Экспорт
	
	Если СУчетомИерархии Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ (&Подразделение)";
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Подразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Подразделения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение);
	КонецЕсли;
	
	Возврат СотрудникиПодразделений(Подразделения, ТолькоДействующие);
	
КонецФункции

// Возвращает сотрудников подразделений.
// 
// Параметры:
//  Подразделения - Массив из СправочникСсылка.СтруктураПредприятия
//  ТолькоДействующие - Булево
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники
//
Функция СотрудникиПодразделений(Подразделения, ТолькоДействующие = Истина) Экспорт
	
	СотрудникиВПодразделениях = СотрудникиВПодразделениях(Подразделения, ТолькоДействующие);
	
	Результат = Новый Массив();
	Для Каждого ПодразделениеИСотрудники Из СотрудникиВПодразделениях Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПодразделениеИСотрудники.Значение);
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

// Возвращает сотрудников в подразделениях.
//
// Параметры:
//  Подразделения - Массив из СправочникСсылка.СтруктураПредприятия.
//  ТолькоДействующие - Булево - указывает на поиск только действующих сотрудников.
// 
// Возвращаемое значение:
//  Соответствие - Сотрудники в подразделениях.
//   * Ключ - СправочникСсылка.СтруктураПредприятия - Подразделение.
//   * Значение - Массив из СправочникСсылка.Сотрудники - Сотрудники подразделения.
//
Функция СотрудникиВПодразделениях(Подразделения, ТолькоДействующие = Истина) Экспорт
	
	СотрудникиВПодразделениях = Новый Соответствие;
	Если Подразделения.Количество() = 0 Тогда
		Возврат СотрудникиВПодразделениях;
	КонецЕсли;
	
	Для Каждого Подразделение Из Подразделения Цикл
		
		СотрудникиВПодразделениях[Подразделение] = Новый Массив;
		
	КонецЦикла;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Сотрудники.Подразделение КАК Подразделение,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Подразделение В(&Подразделения)
		|	И &ТолькоДействующие";
		
	Запрос = Новый Запрос;
	Если ТолькоДействующие Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,
			"	И &ТолькоДействующие",
			"	И Сотрудники.ПометкаУдаления = ЛОЖЬ
			|	И Сотрудники.Действует = ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ТолькоДействующие", "ИСТИНА");
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СотрудникиПодразделения = СотрудникиВПодразделениях[Выборка.Подразделение];
		СотрудникиПодразделения.Добавить(Выборка.Сотрудник);
		
	КонецЦикла;
	
	Возврат СотрудникиВПодразделениях;
	
КонецФункции

// Определяет ближайшего руководителя сотрудника, у которого есть действительный пользователь (сотрудник-руководитель при этом может быть недействителен).
// 
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники.
// 
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники - Ближайший руководитель.
//  
Функция БлижайшийРуководитель(Сотрудник) Экспорт
	
	БлижайшийРуководитель = Справочники.Сотрудники.ПустаяСсылка();
	
	ОбработанныеПодразделения = Новый Соответствие;
	
	ОчередноеПодразделение = ПодразделениеСотрудника(Сотрудник);
	Пока ЗначениеЗаполнено(ОчередноеПодразделение) Цикл
		
		Если ОбработанныеПодразделения[ОчередноеПодразделение] = Истина Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Обнаружено зацикливание подразделений для сотрудника %1 в подразделении %2.'"),
				Сотрудник,
				ОчередноеПодразделение);
		КонецЕсли;
		
		ОбработанныеПодразделения[ОчередноеПодразделение] = Истина;
		
		РуководительПодразделения = 
			СтруктураПредприятия.РуководительПодразделения(ОчередноеПодразделение);
		
		ОчередноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ОчередноеПодразделение, "Родитель");
		
		Если Не ЗначениеЗаполнено(РуководительПодразделения) Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательРуководителя = ПользовательСотрудника(РуководительПодразделения);
		Если Не ЗначениеЗаполнено(ПользовательРуководителя) Тогда
			Продолжить;
		КонецЕсли;		

		РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПользовательРуководителя,
			"Недействителен, ПометкаУдаления");
		ПользовательДействует =
			РеквизитыПользователя.Недействителен = Ложь
			И РеквизитыПользователя.ПометкаУдаления = Ложь;
		
		Если ПользовательДействует Тогда
			БлижайшийРуководитель = РуководительПодразделения;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	 
	Возврат БлижайшийРуководитель;
	
КонецФункции

// Возвращает должность сотрудника.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
//
// Возвращаемое значение:
//  СправочникСсылка.Должности
//
Функция ДолжностьСотрудника(Сотрудник) Экспорт
	
	// На период подключения сотрудников к объектам.
	Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат Справочники.Должности.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		Сотрудник, "Должность");
	
КонецФункции

// Возвращает код языка указанного сотрудника.
//
// Параметры:
//   Сотрудник - СправочникСсылка.Сотрудник - сотрудник, язык которого определяется.
//
// Возвращаемое значение:
//   Строка - код языка сотрудника.
//
Функция КодЯзыкаСотрудника(Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательСотрудника = ПользовательСотрудника(Сотрудник);
	
	Возврат ЛокализацияКонфигурации.КодЯзыкаПользователя(ПользовательСотрудника);
	
КонецФункции

// Возвращает пол сотрудника.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники.
//  ОпределятьПолПоОтчеству - Булево - Если пол пользователя неизвестен, то попытаться определить его по отчеству.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПолФизическогоЛица - Пол сотрудника.
//
Функция ПолСотрудника(Сотрудник, ОпределятьПолПоОтчеству) Экспорт
	
	// Вычисляем поле привилегированном режиме, т.к. физ. лица могут быть недоступны для чтения.
	// При этом сотрудники доступны всегда и для их корректного отображения доступно ФИО физ. лиц.
	// ФИО получается в привилегированном режиме. А т.к. пол в большинстве случае можно определить
	// по ФИО, то считаем, что он тоже доступен.
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолСотрудника = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Сотрудник) Или ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат Перечисления.ПолФизическогоЛица.ПустаяСсылка();
	КонецЕсли;
	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Владелец");
	ПолСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "Пол");
	
	Если Не ЗначениеЗаполнено(ПолСотрудника) И ОпределятьПолПоОтчеству Тогда
		ПолСотрудника = ОпределитьПолПоОтчеству(Строка(ФизическоеЛицо));
	КонецЕсли;
	
	Возврат ПолСотрудника;

КонецФункции

// Определяет контейнеры всех сотрудников текущего пользователя.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.КонтейнерыСотрудников.
// 	
Функция КонтейнерыВсехСотрудниковТекущегоПользователя() Экспорт
	
	ВсеСотрудникиТекущегоПользователя = ВсеСотрудникиТекущегоПользователя();
	КонтейнерыВсехСотрудниковТекущегоПользователя =
		РегистрыСведений.СотрудникиВКонтейнерах.КонтейнерыСотрудников(ВсеСотрудникиТекущегоПользователя);
	
	Возврат КонтейнерыВсехСотрудниковТекущегоПользователя;
	
КонецФункции

// Возвращает сотрудников пользователя. 
//  - таблицу с полями Сотрудник, Должность, Подразделение
//  см. одноименную функцию в РС.СотрудникиПользователей
//
Функция ТаблицаСотрудникиПользователя(Пользователь, Действительные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПользователей.Сотрудник КАК Сотрудник,
		|	Сотрудники.Должность КАК Должность,
		|	Сотрудники.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СотрудникиПользователей.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	СотрудникиПользователей.Пользователь = &Пользователь
		|	И Сотрудники.Действует = ИСТИНА";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает список сотрудников и, если указано, их контейнеров и автоподстановок для целей автоподбора.
//
// Параметры:
//   Текст - Строка - символы, введенные пользователем.
//   ДополнениеТипа - ОписаниеТипов - необязательный, дополнение типа выбираемых объектов (по умолчанию - только
//     пользователи. Для автоподстановок указывается тип "Строка".
//   ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//   ПараметрыПолученияДанных - Структура - Дополнительные параметры получения данных:
//    * КонтролироватьСотрудниковБезПользователя - Булево - Если Истина, то возвращается структура с указанием,
//                                                          что сотрудник без пользователя. Актуально только 
//                                                          для сотрудников.
//
// Возвращаемое значение:
//   СписокЗначений - подходящие пользователи (контейнеры, автоподстановки) и их представления с уточнением.
//
Функция СформироватьДанныеВыбора(Текст,
	ДополнениеТипа = Неопределено, ТипОбъекта = Неопределено, ПараметрыПолученияДанных = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;
	
	Если ДополнениеТипа = Неопределено Тогда
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	КонецЕсли;
	
	КонтролироватьСотрудниковБезПользователя = Неопределено;
	Если ПараметрыПолученияДанных = Неопределено Или Не ПараметрыПолученияДанных.Свойство(
		"КонтролироватьСотрудниковБезПользователя", КонтролироватьСотрудниковБезПользователя) Тогда
		КонтролироватьСотрудниковБезПользователя = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Если СтрНайти(Текст, "(") > 2 Тогда
		// Для сотрудников ищем по ФИО без пояснения.
		ЧастиТекстаПоиска = СтрРазделить(Текст, "(");
		ТекстПоискаСотрудников = СокрЛП(ЧастиТекстаПоиска[0]);
	Иначе
		ТекстПоискаСотрудников = СокрЛП(Текст);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекстПоискаСотрудников", ТекстПоискаСотрудников + "%");
	
	// Сотрудники.
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.Наименование КАК ПредставлениеСсылки,
		|	Сотрудники.Подразделение КАК Пояснение1,
		|	Сотрудники.Должность КАК Пояснение2
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Наименование ПОДОБНО &ТекстПоискаСотрудников
		|	И Сотрудники.Действует
		|	И НЕ Сотрудники.ПометкаУдаления";
		
	// Роли.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.РолиИсполнителей"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.ПолныеРоли")) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	РолиИсполнителей.Ссылка,
		|	РолиИсполнителей.Представление,
		|	"""",
		|	""""
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Наименование ПОДОБНО &Текст
		|	И Не РолиИсполнителей.ПометкаУдаления
		|";
	КонецЕсли;
	
	// Группы.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.РабочиеГруппы")) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	РабочиеГруппы.Ссылка,
		|	РабочиеГруппы.Представление,
		|	"""",
		|	""""
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	РабочиеГруппы.Наименование ПОДОБНО &Текст
		|	И Не РабочиеГруппы.ПометкаУдаления
		|	И Не РабочиеГруппы.Недействительна
		|";
	КонецЕсли;
	
	// Подразделения.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.СтруктураПредприятия"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.ПодразделенияКонтейнеры")) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	СтруктураПредприятия.Ссылка,
		|	СтруктураПредприятия.Представление,
		|	"""",
		|	""""
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Наименование ПОДОБНО &Текст
		|	И Не СтруктураПредприятия.ПометкаУдаления
		|";
	КонецЕсли;
	
	// Проекты.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.Проекты"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.ПроектыКонтейнеры")) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ *
		|ИЗ (ВЫБРАТЬ ПЕРВЫЕ 20
		|	Проекты.Ссылка,
		|	Проекты.Представление,
		|	"""",
		|	""""
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Наименование ПОДОБНО &Текст
		|	И Не Проекты.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	(Проекты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроектов.Завершен))) КАК ВложенныйЗапрос
		|";
	КонецЕсли;
	
	// Автоподстановки для объектов.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.АвтоподстановкиДляОбъектов")) Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		
		Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ ПЕРВЫЕ 20
			|	АвтоподстановкиДляОбъектов.Ссылка,
			|	АвтоподстановкиДляОбъектов.Представление,
			|	"""",
			|	""""
			|ИЗ
			|	Справочник.АвтоподстановкиДляОбъектов КАК АвтоподстановкиДляОбъектов
			|ГДЕ
			|	АвтоподстановкиДляОбъектов.Наименование ПОДОБНО &Текст
			|	И АвтоподстановкиДляОбъектов.ТипОбъекта В (&ТипыОбъектов)
			|	И Не АвтоподстановкиДляОбъектов.ПометкаУдаления
			|	И Не АвтоподстановкиДляОбъектов.ЭтоГруппа
			|";
		
		Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не указан тип объекта %1.'"),
				ТипОбъекта);
		КонецЕсли;
		
		ТипыОбъектов = Новый Массив;
		ТипыОбъектов.Добавить(ТипОбъекта);
		ТипыОбъектов.Добавить(Перечисления.ТипыОбъектов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);
		
	КонецЕсли;
	
	// Автоподстановки для процессов.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	АвтоподстановкиДляПроцессов.Ссылка,
		|	АвтоподстановкиДляПроцессов.Представление,
		|	"""",
		|	""""
		|ИЗ
		|	Справочник.АвтоподстановкиДляПроцессов КАК АвтоподстановкиДляПроцессов
		|ГДЕ
		|	АвтоподстановкиДляПроцессов.Наименование ПОДОБНО &Текст
		|	И Не АвтоподстановкиДляПроцессов.ПометкаУдаления
		|	И Не АвтоподстановкиДляПроцессов.ЭтоГруппа
		|";
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	НРег_Текст = НРег(СокрЛП(Текст));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипСсылки = ТипЗнч(Выборка.Ссылка);
		
		Если ЗначениеЗаполнено(Выборка.Пояснение1)
			И ЗначениеЗаполнено(Выборка.Пояснение2) Тогда 
			ТекстПояснения = СтрШаблон(" (%1, %2)", Выборка.Пояснение1, Выборка.Пояснение2);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение1) Тогда
			ТекстПояснения = СтрШаблон(" (%1)", Выборка.Пояснение1);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение2) Тогда
			ТекстПояснения = СтрШаблон(" (%1)", Выборка.Пояснение2);
		Иначе
			ТекстПояснения = СтрШаблон(" (%1)", НРег(ТипСсылки));
		КонецЕсли;
		
		Если ТипСсылки = Тип("СправочникСсылка.Сотрудники")
			И (ЗначениеЗаполнено(Выборка.Пояснение1) Или ЗначениеЗаполнено(Выборка.Пояснение2)) Тогда
			
			Если Не СтрНачинаетсяС(
				НРег(СтрШаблон("%1%2", Выборка.ПредставлениеСсылки, ТекстПояснения)),
				НРег_Текст) Тогда
			
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеСсылки = СтрНайтиИВыделитьОформлением(
			Выборка.ПредставлениеСсылки,
			ТекстПоискаСотрудников);
			
		Если Не ЗначениеЗаполнено(ПредставлениеСсылки) Тогда
			ПредставлениеСсылки = Строка(Выборка.ПредставлениеСсылки);
		КонецЕсли;	
			
		ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
			ПредставлениеСсылки,
			Новый ФорматированнаяСтрока(ТекстПояснения,, WebЦвета.Серый));
		
		ДобавляемоеЗначение = Выборка.Ссылка;
		Если КонтролироватьСотрудниковБезПользователя И ТипСсылки = Тип("СправочникСсылка.Сотрудники")
			И ЭтоСотрудникБезПользователя(Выборка.Ссылка) Тогда
			
			ДобавляемоеЗначение = Новый Структура("Ссылка, СотрудникБезПользователя", Выборка.Ссылка, Истина);
			
		КонецЕсли;
		
		ДанныеВыбора.Добавить(ДобавляемоеЗначение, ПредставлениеФорматированнаяСтрока);
		
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список сотрудников и, если указано, их контейнеров и автоподстановок для целей автоподбора.
//
// Параметры:
//   Текст - Строка - символы, введенные пользователем.
//
// Возвращаемое значение:
//   СписокЗначений - подходящие пользователи (контейнеры, автоподстановки) и их представления с уточнением.
//
Функция СформироватьДанныеВыборасКонтейнерами(Текст) Экспорт
	
	ДополнениеТипа = Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип;
	
	Возврат СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	
КонецФункции

// Вернет роли текущего пользователя - массив
Функция РолиТекущегоПользователя() Экспорт
	
	СотрудникиТекущегоПользователя = СотрудникиВызовСервера.ПользовательИЕгоСотрудники();
	
	РолиТекущегоПользователя = Новый Массив;
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолей.РольИсполнителя КАК Роль
		|ИЗ
		|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ИсполнителиРолей.Исполнитель = Сотрудники.Ссылка
		|ГДЕ
		|	ИсполнителиРолей.Исполнитель В (&СотрудникиТекущегоПользователя)
		|	И НЕ Сотрудники.ПометкаУдаления");
		
	Запрос.УстановитьПараметр("СотрудникиТекущегоПользователя", СотрудникиТекущегоПользователя);
	
	РолиТекущегоПользователя = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль");
	
	Возврат РолиТекущегоПользователя;
	
КонецФункции

// Возвращает всех действующих сотрудников физ лица.
// 
// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
// 
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.Сотрудники
//
Функция ВсеСотрудникиФизЛица(ФизЛицо) Экспорт
	
	Возврат ВсеСотрудникиФизЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизЛицо));
	
КонецФункции

// Возвращает всех действующих сотрудников переданных физ лиц.
// 
// Параметры:
//  ФизЛица - Массив
//   * СправочникСсылка.ФизическиеЛица
// 
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.Сотрудники
//
Функция ВсеСотрудникиФизЛиц(ФизЛица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Владелец В (&ФизЛица)
		|	И Сотрудники.Действует = ИСТИНА
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("ФизЛица", ФизЛица);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает всех недействующих сотрудников физ лица.
// 
// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
// 
// Возвращаемое значение:
//  Массив
//   * см. СправочникСсылка.Сотрудники
//
Функция ВсеНедействующиеСотрудникиФизЛица(ФизЛицо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Владелец = &ФизЛицо
		|	И Сотрудники.Действует = ЛОЖЬ
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Проверяет и возвращает признак основного сотрудника для указанного физ. лица.
//
//
// Параметры:
//  ФизическоеЛицо - СправочникССылка.ФизическиеЛица
//  Сотрудник - СправочникССылка.Сотрудники
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоОсновнойСотрудникФизЛица(ФизическоеЛицо, Сотрудник) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОсновныеСотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ОсновныеСотрудники КАК ОсновныеСотрудники
		|ГДЕ
		|	ОсновныеСотрудники.ФизическоеЛицо = &ФизическоеЛицо
		|	И ОсновныеСотрудники.Сотрудник = &Сотрудник";
		
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает основного сотрудника для физ. лица.
//
//
// Параметры:
//  ФизическоеЛицо - СправочникССылка.ФизическиеЛица
//
// Возвращаемое значение:
//   СправочникССылка.Сотрудники
//
Функция ОсновнойСотрудникФизЛица(ФизическоеЛицо) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОсновныеСотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ОсновныеСотрудники КАК ОсновныеСотрудники
		|ГДЕ
		|	ОсновныеСотрудники.ФизическоеЛицо = &ФизическоеЛицо";
		
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Сотрудник;
	
КонецФункции

// Проверяет принадлежность переданных сотрудников к одному физ. лицу.
// 
// Параметры:
//  Сотрудник1 - СправочникСсылка.Сотрудники
//  Сотрудник2 - СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Булево
//  
Функция ЭтоСотрудникиОдногоФизЛица(Сотрудник1, Сотрудник2) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Владелец
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В (&Сотрудники)";
	
	СотрудникиДляПроверки = Новый Массив();
	СотрудникиДляПроверки.Добавить(Сотрудник1);
	СотрудникиДляПроверки.Добавить(Сотрудник2);
	
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиДляПроверки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат (Выборка.Количество() = 1);
	
КонецФункции

// Возвращает физ. лицо сотрудника.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица
//  
Функция ФизЛицоСотрудника(Сотрудник) Экспорт
	
	Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Владелец");
	
КонецФункции

// Возвращает физ лиц сотрудников.
// 
// Параметры:
//  МассивСотрудников
//   * СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.ФизическиеЛица
//
Функция ФизЛицаСотрудников(МассивСотрудников) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Владелец
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В (&Сотрудники)";
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Владелец");
	
КонецФункции

// Возвращает физ лиц в соответствии с сотрудниками.
// 
// Параметры:
//  МассивСотрудников
//   * СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - СправочникСсылка.Сотрудники
//   * Значение - СправочникСсылка.ФизическиеЛица
//
Функция ФизЛицаПоСотрудникам(МассивСотрудников) Экспорт
	
	ФизЛицаПоСотрудникам = Новый Соответствие;
	Если МассивСотрудников.Количество() = 0 Тогда
		Возврат ФизЛицаПоСотрудникам;
	КонецЕсли;
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		ФизЛицаПоСотрудникам[Сотрудник] = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Владелец КАК ФизЛицо,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В (&Сотрудники)";
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		Результат[Выборка.Сотрудник] = Выборка.ФизЛицо;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление сотрудника в нужном падеже.
//
// Параметры:
// 	Сотрудник - СправочникСсылка.Сотрудники - сотрудник.
// 	Падеж - Число - падеж, в который необходимо просклонять представление объекта.
//  	    1 - Именительный.
//          2 - Родительный.
//          3 - Дательный.
//          4 - Винительный.
//          5 - Творительный.
//          6 - Предложный.
//
// Возвращаемое значение:
//  Строка - представление в нужном падеже.
//
Функция ПросклонятьПредставлениеСотрудника(Сотрудник, Падеж) Экспорт
	
	РеквизитыСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Сотрудник, "Владелец, Наименование, ПредставлениеДолжностиПодразделения");
	
	СклоняемаяЧасть = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
		РеквизитыСотрудника.Наименование, Падеж, РеквизитыСотрудника.Владелец);
	
	Возврат ПредставлениеСотрудника(
		СклоняемаяЧасть,
		РеквизитыСотрудника.ПредставлениеДолжностиПодразделения);
	
КонецФункции

// Возвращает признак полноправного сотрудника.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоПолноправныйСотрудник(Сотрудник) Экспорт
	
	ПользовательСотрудника = ПользовательСотрудника(Сотрудник);
	Если Не ЗначениеЗаполнено(ПользовательСотрудника) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(ПользовательСотрудника) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак действительности сотрудника.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники - Сотрудник
// 
// Возвращаемое значение:
//  Произвольный - Это действительный сотрудник
Функция ЭтоДействительныйСотрудник(Сотрудник) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Действует");
	
КонецФункции

// Возвращает признак наличия у сотрудника пользователя с разрешением на вход.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники - Сотрудник
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСотрудникБезПользователя(Сотрудник) Экспорт
	
	СотрудникиБезПользователей = СотрудникиБезПользователя(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник));
	Возврат СотрудникиБезПользователей.Найти(Сотрудник) <> Неопределено;
	
КонецФункции

// Определяет у каких сотрудников нет пользователя. Возвращает новый массив.
// 
// Параметры:
//  МассивСотрудников - Массив Из СправочникСсылка.Сотрудники - Сотрудники 
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Сотрудники - Сотрудники без пользователя
Функция СотрудникиБезПользователя(МассивСотрудников) Экспорт
	
	Если МассивСотрудников.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = Новый Массив;
	ПользователиПоСотрудникам = ПользователиПоСотрудникам(МассивСотрудников);
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		
		ПользователиСотрудника = ПользователиПоСотрудникам[Сотрудник];
		
		Если ПользователиСотрудника.Количество() = 0 Тогда
			Результат.Добавить(Сотрудник);
		Иначе
			
			ПользовательДействителен = Ложь;
			Для Каждого Пользователь Из ПользователиСотрудника Цикл
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Пользователь, "Недействителен, ПометкаУдаления");
				Если Не Реквизиты.Недействителен И Не Реквизиты.ПометкаУдаления Тогда
					ПользовательДействителен = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Если не нашли пользователя с разрешением на вход, то сотрудник попадает в результат.
			Если Не ПользовательДействителен Тогда
				Результат.Добавить(Сотрудник);
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверить сотрудников на действительность.
// 
// Параметры:
//  МассивСотрудников - Массив Из СправочникСсылка.Сотрудники - Массив сотрудников.
//  ПредлагатьЗамену - Булево - Предлагать замену. Если Истина, будут заполняться варианты замены сотрудников.
//  ТолькоНедействительные - Булево - Возвращать полные список или только недействительных.
// 
// Возвращаемое значение:
//  Структура - Проверить сотрудников на действительность подготовить:
// * ВсеДействительны - Булево - Признак действительности всех сотрудников, т.е. действителен и сотрудник и хотя бы
//                               один пользователь сотрудника.
// * ЕстьВариантыЗамены - Булево - Признак наличия вариантов замены сотрудников. Например, на действительного сотрудника
//                                 того же пользователя.
// * ЕстьНедействительныеСотрудники - Булево - Признак наличия среди сотрудников таких, которые недействительны.
// * ЕстьНедействительныеПользователи - Булево - Признак наличия среди сотрудников таких, у которых Сотрудник
//                                               действителен, а Пользователь недействителен.
// * ПредставленияНедействительныхУчастников - Массив Из Строка - представления вида Фамилия И. О.
// * Сведения - Массив Из Структура - Массив структур со сведениями о действительности сотрудника:
// ** Сотрудник - СправочникСсылка.Сотрудники - Ссылка на сотрудника.
// ** Действует - Булево - Признак действует сотрудника.
// ** ПользовательДействует - Булево - Признак наличия хотя бы одного действительного пользователя.
// ** Замены - Массив из СправочникСсылка.Сотрудники - Возможные варианты замены сотрудника. 
Функция ПроверитьСотрудниковНаДействительность(МассивСотрудников, ПредлагатьЗамену = Истина,
	ТолькоНедействительные = Истина) Экспорт
	
	РезультатСведенияТаблицей = ПроверитьСотрудниковНаДействительностьПодготовить(МассивСотрудников, ПредлагатьЗамену,
		ТолькоНедействительные);
	
	Результат = ОписаниеРезультатаПроверкиСотрудниковНаДействительность();
	ЗаполнитьЗначенияСвойств(Результат, РезультатСведенияТаблицей, , "Сведения");
	
	Результат.Сведения = ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатСведенияТаблицей.Сведения);
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление в документах по ФИО пользователя
// 
// Параметры:
//  ПолноеИмя - Строка - ФИО пользователя в формате "Иванов Иван Иванович"
// 
// Возвращаемое значение:
//  Строка - Представление в документах
//
Функция ПредставлениеВДокументахПоФИО(ПолноеИмя) Экспорт
	
	ФИОПользователя = ПолноеИмя;
	Если (Найти(ФИОПользователя, ".") > 0) Тогда
		ПозицияПробела = Найти(ФИОПользователя," ");
		Фамилия = Сред(ФИОПользователя, 1, ПозицияПробела);
		ФИОПользователя = СтрЗаменить(ФИОПользователя, Фамилия, "");
		ПозицияПробела = Найти(ФИОПользователя, " ");
		Инициалы = Сред(ФИОПользователя, 1, ПозицияПробела);
		
		Возврат СтрЗаменить(Инициалы + " " + Фамилия+" ", "  ", " ");
	ИначеЕсли СтрЧислоВхождений(СокрЛП(ФИОПользователя), " ") = 2 Тогда
		ПозицияПробела = Найти(ФИОПользователя, " ");
		Фамилия = Сред(ФИОПользователя, 1, ПозицияПробела);
		ФИОПользователя = СтрЗаменить(ФИОПользователя, Фамилия, "");
		ПозицияПробела = Найти(ФИОПользователя, " ");
		Имя = Сред(ФИОПользователя, 1, ПозицияПробела);
		ФИОПользователя = СтрЗаменить(ФИОПользователя, Имя, "");
		
		Возврат СокрП(СтрЗаменить(Лев(Имя, 1) + "." + Лев(ФИОПользователя, 1) + ". " + Фамилия + " ", "  ", " "));
	Иначе
		Возврат ФИОПользователя;
	КонецЕсли
	
КонецФункции

// Определяет подразделения сотрудников.
// 
// Параметры:
//  МассивСотрудников - Массив из СправочникСсылка.Сотрудники.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.СтруктураПредприятия.
// 
Функция ПодразделенияСотрудников(МассивСотрудников) Экспорт
	
	ПодразделенияСотрудников = Новый Массив;
	Если МассивСотрудников.Количество() = 0 Тогда
		Возврат ПодразделенияСотрудников;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Подразделение
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В (&МассивСотрудников)");
	
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Подразделение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПодразделенияСотрудников.Добавить(ВыборкаДетальныеЗаписи.Подразделение);
		
	КонецЦикла;
	
	Возврат ПодразделенияСотрудников;
	
КонецФункции

// Все сотрудники по физическим лицам, действительные и недейтсвительные, без помеченных на удаление.
// 
// Параметры:
//  ФизЛица - Массив из СправочникСсылка.ФизическиеЛица.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Сотрудники по физическим лицам:
//   * Ключ - СправочникСсылка.ФизическиеЛица. 
//   * Значение - Массив из СправочникСсылка.Сотрудники.
// 
Функция СотрудникиПоФизЛицам(ФизЛица) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СотрудникиПоФизЛицам = Новый Соответствие;
	Если ФизЛица.Количество() = 0 Тогда
		Возврат СотрудникиПоФизЛицам;
	КонецЕсли;
	
	Для Каждого ФизЛицо Из ФизЛица Цикл
		СотрудникиПоФизЛицам.Вставить(ФизЛицо, Новый Массив);
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.Владелец КАК ФизЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Владелец В (&ФизЛица)
		|	И НЕ Сотрудники.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("ФизЛица", ФизЛица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СотрудникиФизЛица = СотрудникиПоФизЛицам.Получить(ВыборкаДетальныеЗаписи.ФизЛицо);
		СотрудникиФизЛица.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
		
	КонецЦикла;
	
	Возврат СотрудникиПоФизЛицам;
	
КонецФункции

// Представление сотрудника с учетом даты
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
//  Дата - Дата
//  Падеж - Число
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеСотрудникаНаДату(Сотрудник, Дата, Падеж = 0) Экспорт
	
	Представление = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Владелец КАК Владелец,
		|	Сотрудники.Наименование КАК Наименование
		|ПОМЕСТИТЬ НужныйСотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка = &Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НужныйСотрудник.Владелец КАК Владелец,
		|	НужныйСотрудник.Наименование КАК Наименование,
		|	ФИОФизическихЛицСрезПоследних.ФИО КАК ФИО,
		|	ФИОФизическихЛицСрезПоследних.ИменительныйПадеж КАК ИменительныйПадеж,
		|	ФИОФизическихЛицСрезПоследних.РодительныйПадеж КАК РодительныйПадеж,
		|	ФИОФизическихЛицСрезПоследних.ДательныйПадеж КАК ДательныйПадеж,
		|	ФИОФизическихЛицСрезПоследних.ВинительныйПадеж КАК ВинительныйПадеж,
		|	ФИОФизическихЛицСрезПоследних.ТворительныйПадеж КАК ТворительныйПадеж,
		|	ФИОФизическихЛицСрезПоследних.ПредложныйПадеж КАК ПредложныйПадеж,
		|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
		|	%ЗапросНаПол
		|ИЗ
		|	НужныйСотрудник КАК НужныйСотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Период, ) КАК ФИОФизическихЛицСрезПоследних
		|		ПО НужныйСотрудник.Владелец = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	НужноПросклонять = Падеж <> 0;
	Если НужноПросклонять Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ЗапросНаПол", ",ФИОФизическихЛицСрезПоследних.ФизическоеЛицо.Пол КАК Пол");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ЗапросНаПол", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если НужноПросклонять Тогда
			
			Представление = СтрЗаменить(Строка(Сотрудник), Выборка.Наименование, Выборка.ФИО);
			СтрокаПадеж = СклонениеПредставленийОбъектов.СоответствиеПадежей()[Падеж] + "Падеж";
			ВНужномПадеже = Выборка[СтрокаПадеж];
			Если ЗначениеЗаполнено(ВНужномПадеже) Тогда
				
				Представление = СтрЗаменить(Представление, Выборка.Наименование, ВНужномПадеже);
				
			Иначе
				
				Пол = Выборка.Пол;
				ПолЧислом = ФизическиеЛица.ПолЦифрой(Пол);
				Представление = СклонениеПредставленийОбъектов.ПросклонятьФИО(
					СтрЗаменить(Представление, Выборка.Наименование, Выборка.ФИО), Падеж,, ПолЧислом);
				
			КонецЕсли;
			
		ИначеЕсли Выборка.Наименование <> Выборка.ФИО И ЗначениеЗаполнено(Выборка.ФИО) Тогда
			
			Представление = СтрЗаменить(Строка(Сотрудник), Выборка.Наименование, Выборка.ФИО);
			
		Иначе
			
			Представление = Строка(Сотрудник);
			
		КонецЕсли;
		
	Иначе
		
		Представление = Строка(Сотрудник); 
		Если НужноПросклонять Тогда
			
			Пол = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Владелец.Пол");
			ПолЧислом = ФизическиеЛица.ПолЦифрой(Пол);
			СклонениеПредставленийОбъектов.ПросклонятьФИО(Представление, Падеж,, ПолЧислом);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Если ФИО на дату совпадает с текущим, то берет представление из сотрудника, иначе - сам формирует
//
// Параметры:
//  Сотрудники - Массив Из СправочникСсылка.Сотрудники
//  Дата - Дата
// 
// Возвращаемое значение:
//  Соответствие:
// * Ключ - СправочникСсылка.Сотрудники
// * Значение - Строка
//
Функция ПредставленияВДокументахСотрудниковНаДату(Сотрудники, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.Наименование КАК Наименование,
		|	Сотрудники.Владелец КАК Владелец,
		|	Сотрудники.ПредставлениеВДокументах КАК ПредставлениеВДокументах
		|ПОМЕСТИТЬ СписокСотрудников
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокСотрудников.Ссылка КАК Сотрудник,
		|	ФИОФизическихЛицСрезПоследних.ФИО КАК ФИО,
		|	СписокСотрудников.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА СписокСотрудников.Наименование = ФИОФизическихЛицСрезПоследних.ФИО
		|			ТОГДА СписокСотрудников.ПредставлениеВДокументах
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ПредставлениеВДокументах
		|ИЗ
		|	СписокСотрудников КАК СписокСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ) КАК ФИОФизическихЛицСрезПоследних
		|		ПО СписокСотрудников.Владелец = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	СуффиксТекущегоЯзыка = МультиязычностьСервер.СуффиксТекущегоЯзыка();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.Наименование", "Сотрудники.Наименование" + СуффиксТекущегоЯзыка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"ФИОФизическихЛицСрезПоследних.ФИО", 
		"ФИОФизическихЛицСрезПоследних.ФИО" + СуффиксТекущегоЯзыка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	РезультатПолученияФИО = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ПредставлениеВДокументах) Тогда
			
			РезультатПолученияФИО.Вставить(Выборка.Сотрудник, Выборка.ПредставлениеВДокументах);
			Продолжить;
			
		КонецЕсли;
		
		ФИО = "";
		Если ЗначениеЗаполнено(Выборка.ФИО) Тогда
			ФИО = Выборка.ФИО;
		Иначе
			ФИО = Выборка.Наименование;
		КонецЕсли;
		
		РезультатПолученияФИО.Вставить(Выборка.Сотрудник, ПредставлениеВДокументахПоФИО(ФИО));
		
	КонецЦикла;
	
	Возврат РезультатПолученияФИО;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПереходНаСотрудников

// Методы актуальны на время перехода объектов с пользователей на сотрудников.

// Возвращает массив с пустыми ссылками сотрудника, пользователя, и Неопределено.
// Для использования в условиях на заполненность составных реквизитов Сотрудник+Пользователь
// Возвращаемое значение:
//   Массив - Массив из 3 элементов с пустыми ссылками и неопределено
//
Функция МассивПустыхСсылокПользователя() Экспорт

	Результат = Новый Массив;
	Результат.Добавить(Справочники.Пользователи.ПустаяСсылка());
	Результат.Добавить(Справочники.Сотрудники.ПустаяСсылка());
	Результат.Добавить(Неопределено);
	
	Возврат Результат;

КонецФункции

Процедура ЗаменитьОтветственныхВидовБизнесСобытийНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ВидыБизнесСобытий КАК ВидыБизнесСобытий
			|ГДЕ
			|	ВидыБизнесСобытий.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВидыБизнесСобытий.Ссылка
		|ИЗ
		|	Справочник.ВидыБизнесСобытий КАК ВидыБизнесСобытий
		|ГДЕ
		|	ВидыБизнесСобытий.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ВидБизнесСобытия = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ВидБизнесСобытия.Ответственный) Тогда
				ВидБизнесСобытия.Ответственный =
					ЗаменитьПользователяСотрудником(ВидБизнесСобытия.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ВидБизнесСобытия.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ВидБизнесСобытия.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидБизнесСобытия);
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать вид бизнес-события: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхВидовБизнесСобытийНаСотрудников не удалось обработать некоторые виды бизнес-событий (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаВопросыДеятельностиНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ВопросыДеятельности КАК ВопросыДеятельности
			|ГДЕ
			|	ВопросыДеятельности.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВопросыДеятельности.Ссылка
		|ИЗ
		|	Справочник.ВопросыДеятельности КАК ВопросыДеятельности
		|ГДЕ
		|	ВопросыДеятельности.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ВопросДеятельности = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ВопросДеятельности.Ответственный) Тогда
				ВопросДеятельности.Ответственный =
					ЗаменитьПользователяСотрудником(ВопросДеятельности.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ВопросДеятельности.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ВопросДеятельности.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВопросДеятельности);
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать вопрос деятельности: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаВопросыДеятельностиНаСотрудников не удалось обработать некоторые вопросы деятельности (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаГрифыДоступаНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ГрифыДоступа КАК ГрифыДоступа
			|ГДЕ
			|	ГрифыДоступа.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ГрифыДоступа.Ссылка
		|ИЗ
		|	Справочник.ГрифыДоступа КАК ГрифыДоступа
		|ГДЕ
		|	ГрифыДоступа.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ГрифДоступа = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ГрифДоступа.Ответственный) Тогда
				ГрифДоступа.Ответственный = 
					ЗаменитьПользователяСотрудником(ГрифДоступа.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ГрифДоступа.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ГрифДоступа.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГрифДоступа);
			
			ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(ГрифДоступа);
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать гриф доступа: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаГрифыДоступаНаСотрудников не удалось обработать некоторые грифы доступа (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаГруппыДоступаКонтрагентовНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ГруппыДоступаКонтрагентов КАК ГруппыДоступаКонтрагентов
			|ГДЕ
			|	ГруппыДоступаКонтрагентов.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ГруппыДоступаКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступаКонтрагентов КАК ГруппыДоступаКонтрагентов
		|ГДЕ
		|	ГруппыДоступаКонтрагентов.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ГруппаДоступа = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ГруппаДоступа.Ответственный) Тогда
				ГруппаДоступа.Ответственный = 
					ЗаменитьПользователяСотрудником(ГруппаДоступа.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ГруппаДоступа.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ГруппаДоступа.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГруппаДоступа);
			
			ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(ГруппаДоступа);
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать группу доступа контрагентов: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаГруппыДоступаКонтрагентовНаСотрудников не удалось обработать некоторые группы доступа (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаГруппыДоступаФизическихЛицНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ГруппыДоступаФизическихЛиц КАК ГруппыДоступаФизическихЛиц
			|ГДЕ
			|	ГруппыДоступаФизическихЛиц.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ГруппыДоступаФизическихЛиц.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступаФизическихЛиц КАК ГруппыДоступаФизическихЛиц
		|ГДЕ
		|	ГруппыДоступаФизическихЛиц.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ГруппаДоступа = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ГруппаДоступа.Ответственный) Тогда
				ГруппаДоступа.Ответственный = 
					ЗаменитьПользователяСотрудником(ГруппаДоступа.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ГруппаДоступа.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ГруппаДоступа.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГруппаДоступа);
			
			ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(ГруппаДоступа);
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать группу доступа физ. лиц: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаГруппыДоступаФизическихЛицНаСотрудников не удалось обработать некоторые группы доступа (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаДетекторыБизнесСобытийНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ДетекторыБизнесСобытий КАК ДетекторыБизнесСобытий
			|ГДЕ
			|	ДетекторыБизнесСобытий.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДетекторыБизнесСобытий.Ссылка
		|ИЗ
		|	Справочник.ДетекторыБизнесСобытий КАК ДетекторыБизнесСобытий
		|ГДЕ
		|	ДетекторыБизнесСобытий.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДетекторСобытия = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ДетекторСобытия.Ответственный) Тогда
				ДетекторСобытия.Ответственный = 
					ЗаменитьПользователяСотрудником(ДетекторСобытия.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ДетекторСобытия.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ДетекторСобытия.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДетекторСобытия);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать детектор бизнес-события: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаДетекторыБизнесСобытийНаСотрудников не удалось обработать некоторые группы доступа (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаКонтрагентовНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			Контрагент = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(Контрагент.Ответственный) Тогда
				Контрагент.Ответственный = 
					ЗаменитьПользователяСотрудником(Контрагент.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(Контрагент.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 Контрагент.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Контрагент);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать контрагента: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаКонтрагентовНаСотрудников не удалось обработать некоторых контрагентов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаМестаХраненияДелНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.МестаХраненияДел КАК МестаХраненияДел
			|ГДЕ
			|	МестаХраненияДел.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	МестаХраненияДел.Ссылка
		|ИЗ
		|	Справочник.МестаХраненияДел КАК МестаХраненияДел
		|ГДЕ
		|	МестаХраненияДел.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			МестоХраненияДела = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(МестоХраненияДела.Ответственный) Тогда
				МестоХраненияДела.Ответственный = 
					ЗаменитьПользователяСотрудником(МестоХраненияДела.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(МестоХраненияДела.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 МестоХраненияДела.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МестоХраненияДела);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать место хранения дела: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаМестаХраненияДелНаСотрудников не удалось обработать некоторые места хранения (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаПользовательскиеОбработчикиБизнесСобытийНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ПользовательскиеОбработчикиБизнесСобытий КАК ПользовательскиеОбработчикиБизнесСобытий
			|ГДЕ
			|	ПользовательскиеОбработчикиБизнесСобытий.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПользовательскиеОбработчикиБизнесСобытий.Ссылка
		|ИЗ
		|	Справочник.ПользовательскиеОбработчикиБизнесСобытий КАК ПользовательскиеОбработчикиБизнесСобытий
		|ГДЕ
		|	ПользовательскиеОбработчикиБизнесСобытий.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ОбработчикСобытия = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ОбработчикСобытия.Ответственный) Тогда
				ОбработчикСобытия.Ответственный = 
					ЗаменитьПользователяСотрудником(ОбработчикСобытия.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ОбработчикСобытия.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ОбработчикСобытия.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбработчикСобытия);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать обработчик бизнес-события: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаПользовательскиеОбработчикиБизнесСобытийНаСотрудников не удалось обработать некоторые обработчики бизнес-событий (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаПравилаАвтозаполненияФайловНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ПравилаАвтозаполненияФайлов КАК ПравилаАвтозаполненияФайлов
			|ГДЕ
			|	ПравилаАвтозаполненияФайлов.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПравилаАвтозаполненияФайлов.Ссылка
		|ИЗ
		|	Справочник.ПравилаАвтозаполненияФайлов КАК ПравилаАвтозаполненияФайлов
		|ГДЕ
		|	ПравилаАвтозаполненияФайлов.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ПравилоЗаполнения = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ПравилоЗаполнения.Ответственный) Тогда
				ПравилоЗаполнения.Ответственный = 
					ЗаменитьПользователяСотрудником(ПравилоЗаполнения.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ПравилоЗаполнения.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ПравилоЗаполнения.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоЗаполнения);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать правило автозаполнения файла: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаПравилаАвтозаполненияФайловНаСотрудников не удалось обработать некоторые правила автозаполнения файлов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаПравилаРазмещенияФайловВТомахНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ПравилаРазмещенияФайловВТомах КАК ПравилаРазмещенияФайловВТомах
			|ГДЕ
			|	ПравилаРазмещенияФайловВТомах.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПравилаРазмещенияФайловВТомах.Ссылка
		|ИЗ
		|	Справочник.ПравилаРазмещенияФайловВТомах КАК ПравилаРазмещенияФайловВТомах
		|ГДЕ
		|	ПравилаРазмещенияФайловВТомах.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ПравилоРазмещения = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ПравилоРазмещения.Ответственный) Тогда
				ПравилоРазмещения.Ответственный = 
					ЗаменитьПользователяСотрудником(ПравилоРазмещения.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ПравилоРазмещения.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ПравилоРазмещения.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоРазмещения);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать правило размещения файлов: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаПравилаРазмещенияФайловВТомахНаСотрудников не удалось обработать некоторые правила размещения файлов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаПравилаЭскалацииЗадачНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ПравилаЭскалации КАК ПравилаЭскалацииЗадач
			|ГДЕ
			|	ПравилаЭскалацииЗадач.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПравилаЭскалацииЗадач.Ссылка
		|ИЗ
		|	Справочник.ПравилаЭскалации КАК ПравилаЭскалацииЗадач
		|ГДЕ
		|	ПравилаЭскалацииЗадач.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ПравилоЭскалации = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ПравилоЭскалации.Ответственный) Тогда
				ПравилоЭскалации.Ответственный = 
					ЗаменитьПользователяСотрудником(ПравилоЭскалации.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ПравилоЭскалации.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ПравилоЭскалации.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоЭскалации);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать правило эскалации задач: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаПравилаЭскалацииЗадачНаСотрудников не удалось обработать некоторые правила эскалации задач (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаРабочиеГруппыНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.РабочиеГруппы КАК РабочиеГруппы
			|ГДЕ
			|	РабочиеГруппы.Ответственный ССЫЛКА Справочник.Пользователи
			|	ИЛИ РабочиеГруппы.Ответственный = НЕОПРЕДЕЛЕНО";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	РабочиеГруппы.Ссылка
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	РабочиеГруппы.Ответственный ССЫЛКА Справочник.Пользователи
		|	ИЛИ РабочиеГруппы.Ответственный = НЕОПРЕДЕЛЕНО";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			РабочаяГруппа = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(РабочаяГруппа.Ответственный) Тогда
				РабочаяГруппа.Ответственный = 
					ЗаменитьПользователяСотрудником(РабочаяГруппа.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(РабочаяГруппа.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 РабочаяГруппа.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(РабочаяГруппа);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать рабочую группу: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаРабочиеГруппыНаСотрудников не удалось обработать некоторые рабочие группы (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаДокументыПередачиДелВАрхивНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Документ.ПередачаДелВАрхив КАК ПередачаДелВАрхив
			|ГДЕ
			|	ПередачаДелВАрхив.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПередачаДелВАрхив.Ссылка
		|ИЗ
		|	Документ.ПередачаДелВАрхив КАК ПередачаДелВАрхив
		|ГДЕ
		|	ПередачаДелВАрхив.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДокументПередачи = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ДокументПередачи.Ответственный) Тогда
				ДокументПередачи.Ответственный = 
					ЗаменитьПользователяСотрудником(ДокументПередачи.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ДокументПередачи.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ДокументПередачи.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументПередачи);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать документ передачи дел в архив: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаДокументыПередачиДелВАрхивНаСотрудников не удалось обработать некоторые документы передачи дел в арих (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаУничтожениеДелНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Документ.УничтожениеДел КАК УничтожениеДел
			|ГДЕ
			|	УничтожениеДел.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	УничтожениеДел.Ссылка
		|ИЗ
		|	Документ.УничтожениеДел КАК УничтожениеДел
		|ГДЕ
		|	УничтожениеДел.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДокументУничтожение = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ДокументУничтожение.Ответственный) Тогда
				ДокументУничтожение.Ответственный = 
					ЗаменитьПользователяСотрудником(ДокументУничтожение.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ДокументУничтожение.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ДокументУничтожение.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументУничтожение);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать документ уничтожения дел: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаУничтожениеДелНаСотрудников не удалось обработать некоторые документы уничтожения дел (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЗаАлгоритмыПроверкиНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.АлгоритмыПроверки КАК АлгоритмыПроверки
			|ГДЕ
			|	АлгоритмыПроверки.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	АлгоритмыПроверки.Ссылка
		|ИЗ
		|	Справочник.АлгоритмыПроверки КАК АлгоритмыПроверки
		|ГДЕ
		|	АлгоритмыПроверки.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			АлгоритмПроверки = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(АлгоритмПроверки.Ответственный) Тогда
				АлгоритмПроверки.Ответственный = 
					ЗаменитьПользователяСотрудником(АлгоритмПроверки.Ответственный, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(АлгоритмПроверки.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 АлгоритмПроверки.Ответственный = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(АлгоритмПроверки);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать алгоритм проверки: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЗаАлгоритмыПроверкиНаСотрудников не удалось обработать некоторые алгоритмы проверок (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьСоздателейТематикДокументовНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ТематикиДокументов КАК ТематикиДокументов
			|ГДЕ
			|	ТематикиДокументов.Создал ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТематикиДокументов.Ссылка
		|ИЗ
		|	Справочник.ТематикиДокументов КАК ТематикиДокументов
		|ГДЕ
		|	ТематикиДокументов.Создал ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
					
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ТематикаДокумента = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ТематикаДокумента.Создал) Тогда
				ТематикаДокумента.Создал = 
					ЗаменитьПользователяСотрудником(ТематикаДокумента.Создал, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(ТематикаДокумента.Создал) <> Тип("СправочникСсылка.Сотрудники") Тогда
				 ТематикаДокумента.Создал = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТематикаДокумента);
					
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать тематику документа: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
					
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьСоздателейТематикДокументовНаСотрудников не удалось обработать некоторые тематики документов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;	
	
КонецПроцедуры

Процедура ЗаменитьАвторовНаСотрудниковВИсторииСобытийЗадач(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
			|ГДЕ
			|	ИсторияСобытийЗадач.Сотрудник ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ИсторияСобытийЗадач.Задача,
		|	ИсторияСобытийЗадач.ДатаСобытия,
		|	ИсторияСобытийЗадач.Сотрудник,
		|	ИсторияСобытийЗадач.Событие,
		|	ИсторияСобытийЗадач.Комментарий
		|ИЗ
		|	РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
		|ГДЕ
		|	ИсторияСобытийЗадач.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ИсторияСобытийЗадач.СоздатьНаборЗаписей();
			Набор.Отбор.Задача.Установить(Выборка.Задача);
			Набор.Отбор.ДатаСобытия.Установить(Выборка.ДатаСобытия);
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Отбор.Событие.Установить(Выборка.Событие);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
			
			Набор = РегистрыСведений.ИсторияСобытийЗадач.СоздатьНаборЗаписей();
			Набор.Отбор.Задача.Установить(Выборка.Задача);
			Набор.Отбор.ДатаСобытия.Установить(Выборка.ДатаСобытия);
			Набор.Отбор.Сотрудник.Установить(Сотрудник);
			Набор.Отбор.Событие.Установить(Выборка.Событие);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = Сотрудник;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
						
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись истории события задачи %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Задача),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьАвторовНаСотрудниковВИсторииСобытийЗадач не удалось обработать записи истории событий задач (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьУстановившихНаСотрудниковВИсторииСостоянийДокументов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ИсторияСостоянийДокументов КАК ИсторияСостоянийДокументов
			|ГДЕ
			|	ИсторияСостоянийДокументов.Установил ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		
		|	ИсторияСостоянийДокументов.Период,
		|	ИсторияСостоянийДокументов.Документ,
		|	ИсторияСостоянийДокументов.Состояние,
		|	ИсторияСостоянийДокументов.Установил
		|ИЗ
		|	РегистрСведений.ИсторияСостоянийДокументов КАК ИсторияСостоянийДокументов
		|ГДЕ
		|	ИсторияСостоянийДокументов.Установил ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ИсторияСостоянийДокументов.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(Выборка.Период);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Установил = ЗаменитьПользователяСотрудником(Выборка.Установил, Ложь);
			
			Набор = РегистрыСведений.ИсторияСостоянийДокументов.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(Выборка.Период);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Установил = Установил;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
						
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись истории состояния документа %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Документ),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьУстановившихНаСотрудниковВИсторииСостоянийДокументов не удалось обработать записи истории состояний документов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьУстановившихНаСотрудниковВТекущихСостоянияхДокументов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
			|ГДЕ
			|	ТекущиеСостоянияДокументов.Установил ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТекущиеСостоянияДокументов.Документ,
		|	ТекущиеСостоянияДокументов.Состояние,
		|	ТекущиеСостоянияДокументов.Действие,
		|	ТекущиеСостоянияДокументов.Установил,
		|	ТекущиеСостоянияДокументов.ДатаУстановки
		|ИЗ
		|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|ГДЕ
		|	ТекущиеСостоянияДокументов.Установил ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьНаборЗаписей();
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			Набор.Отбор.Состояние.Установить(Выборка.Состояние);
			Набор.Отбор.Действие.Установить(Выборка.Действие);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Установил = ЗаменитьПользователяСотрудником(Выборка.Установил, Ложь);
			
			Набор = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьНаборЗаписей();
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			Набор.Отбор.Состояние.Установить(Выборка.Состояние);
			Набор.Отбор.Действие.Установить(Выборка.Действие);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Установил = Установил;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись текущего состояния документа %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Документ),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьУстановившихНаСотрудниковВТекущихСостоянияхДокументов не удалось обработать записи текущих состояний документов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьИзменившихНаСотрудниковВИсторииСроковДействийДокументов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ИсторияСроковДействияДокументов КАК ИсторияСроковДействияДокументов
			|ГДЕ
			|	ИсторияСроковДействияДокументов.Изменил ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ИсторияСроковДействияДокументов.Документ,
		|	ИсторияСроковДействияДокументов.ДатаИзменения,
		|	ИсторияСроковДействияДокументов.ДатаНачалаДействия,
		|	ИсторияСроковДействияДокументов.ДатаОкончанияДействия,
		|	ИсторияСроковДействияДокументов.Бессрочный,
		|	ИсторияСроковДействияДокументов.ПорядокПродления,
		|	ИсторияСроковДействияДокументов.Изменил,
		|	ИсторияСроковДействияДокументов.ДокументИсточникИзменения,
		|	ИсторияСроковДействияДокументов.Комментарий
		|ИЗ
		|	РегистрСведений.ИсторияСроковДействияДокументов КАК ИсторияСроковДействияДокументов
		|ГДЕ
		|	ИсторияСроковДействияДокументов.Изменил ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ИсторияСроковДействияДокументов.СоздатьНаборЗаписей();
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			Набор.Отбор.ДатаИзменения.Установить(Выборка.ДатаИзменения);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Изменил = ЗаменитьПользователяСотрудником(Выборка.Изменил, Ложь);
					
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
									
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись истории срока действия документа %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Документ),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьИзменившихНаСотрудниковВИсторииСроковДействийДокументов не удалось обработать некоторые записи истории сроков действий документов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьАвторовНаСотрудниковВНастройкахПовторенияБизнесПроцессов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.НастройкаПовторенияБизнесПроцессов КАК НастройкаПовторенияБизнесПроцессов
			|ГДЕ
			|	НастройкаПовторенияБизнесПроцессов.Автор ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НастройкаПовторенияБизнесПроцессов.БизнесПроцесс,
		|	НастройкаПовторенияБизнесПроцессов.Расписание,
		|	НастройкаПовторенияБизнесПроцессов.ПовторениеЗавершено,
		|	НастройкаПовторенияБизнесПроцессов.ДатаПоследнегоПовторения,
		|	НастройкаПовторенияБизнесПроцессов.ГрафикРаботы,
		|	НастройкаПовторенияБизнесПроцессов.Автор,
		|	НастройкаПовторенияБизнесПроцессов.Комментарий,
		|	НастройкаПовторенияБизнесПроцессов.ПредставлениеРасписания
		|ИЗ
		|	РегистрСведений.НастройкаПовторенияБизнесПроцессов КАК НастройкаПовторенияБизнесПроцессов
		|ГДЕ
		|	НастройкаПовторенияБизнесПроцессов.Автор ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.НастройкаПовторенияБизнесПроцессов.СоздатьНаборЗаписей();
			Набор.Отбор.БизнесПроцесс.Установить(Выборка.БизнесПроцесс);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Автор = ЗаменитьПользователяСотрудником(Выборка.Автор, Ложь);
					
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
									
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать настройку повторения процесса %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.БизнесПроцесс),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьАвторовНаСотрудниковВНастройкахПовторенияБизнесПроцессов не удалось обработать некоторые настройки повторения процессов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьНаСотрудниковАвторовПереносовСроковВыполненияПроцессовИЗадач(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
			|ГДЕ
			|	ПереносыСроковВыполненияПроцессовИЗадач.Сотрудник ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПереносыСроковВыполненияПроцессовИЗадач.ДатаПереносаСрока,
		|	ПереносыСроковВыполненияПроцессовИЗадач.Предмет,
		|	ПереносыСроковВыполненияПроцессовИЗадач.БизнесПроцессПереноса,
		|	ПереносыСроковВыполненияПроцессовИЗадач.Итерация,
		|	ПереносыСроковВыполненияПроцессовИЗадач.КомментарийАвтора,
		|	ПереносыСроковВыполненияПроцессовИЗадач.НовыйСрок,
		|	ПереносыСроковВыполненияПроцессовИЗадач.Сотрудник,
		|	ПереносыСроковВыполненияПроцессовИЗадач.СтарыйСрок
		|ИЗ
		|	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
		|ГДЕ
		|	ПереносыСроковВыполненияПроцессовИЗадач.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ПереносыСроковВыполненияПроцессовИЗадач.СоздатьНаборЗаписей();
			Набор.Отбор.ДатаПереносаСрока.Установить(Выборка.ДатаПереносаСрока);
			Набор.Отбор.Предмет.Установить(Выборка.Предмет);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись о переносе срока выполнения процесса(задачи) %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Предмет),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьНаСотрудниковАвторовПереносовСроковВыполненияПроцессовИЗадач не удалось обработать некоторые записи о переносе сроков выполнения процессов и задач (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьНаСотрудниковАвторовСобытийВХодеОбработок(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ХодОбработки КАК ХодОбработки
			|ГДЕ
			|	ХодОбработки.Сотрудник ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ХодОбработки.Обработка,
		|	ХодОбработки.Дата,
		|	ХодОбработки.Участник,
		|	ХодОбработки.Действие,
		|	ХодОбработки.ИдентификаторУчастника,
		|	ХодОбработки.ТипСобытия,
		|	ХодОбработки.Функция,
		|	ХодОбработки.МоментВремени,
		|	ХодОбработки.Описание,
		|	ХодОбработки.Сотрудник,
		|	ХодОбработки.ИдентификаторПункта,
		|	ХодОбработки.Результат,
		|	ХодОбработки.Этап,
		|	ХодОбработки.Поручение
		|ИЗ
		|	РегистрСведений.ХодОбработки КАК ХодОбработки
		|ГДЕ
		|	ХодОбработки.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ХодОбработки.СоздатьНаборЗаписей();
			Набор.Отбор.Обработка.Установить(Выборка.Обработка);
			Набор.Отбор.Дата.Установить(Выборка.Дата);
			Набор.Отбор.Участник.Установить(Выборка.Участник);
			Набор.Отбор.Действие.Установить(Выборка.Действие);
			Набор.Отбор.ИдентификаторУчастника.Установить(Выборка.ИдентификаторУчастника);
			Набор.Отбор.ТипСобытия.Установить(Выборка.ТипСобытия);
			Набор.Отбор.Функция.Установить(Выборка.Функция);
			Набор.Отбор.МоментВремени.Установить(Выборка.МоментВремени);
						
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
									
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись хода обработки %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Обработка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьНаСотрудниковАвторовСобытийВХодеОбработок не удалось обработать некоторые записи о ходе обработок (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьНаСотрудниковПолучившихОригиналВДанныхДокументов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
			|ГДЕ
			|	ДанныеДокументовПредприятия.ОригиналПолучил ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеДокументовПредприятия.ДатаСортировки,
		|	ДанныеДокументовПредприятия.ПометкаУдаления,
		|	ДанныеДокументовПредприятия.Документ,
		|	ДанныеДокументовПредприятия.Важность,
		|	ДанныеДокументовПредприятия.Валюта,
		|	ДанныеДокументовПредприятия.ВидДокумента,
		|	ДанныеДокументовПредприятия.ВидОбращения,
		|	ДанныеДокументовПредприятия.ВопросДеятельности,
		|	ДанныеДокументовПредприятия.ВременныйНомер,
		|	ДанныеДокументовПредприятия.ГрифДоступа,
		|	ДанныеДокументовПредприятия.ДатаИзмененияСостоянияОбработки,
		|	ДанныеДокументовПредприятия.ДатаНачалаДействия,
		|	ДанныеДокументовПредприятия.ДатаОкончанияДействия,
		|	ДанныеДокументовПредприятия.ДатаПолученияОригинала,
		|	ДанныеДокументовПредприятия.ДатаПроверкиЭП,
		|	ДанныеДокументовПредприятия.ДатаРегистрации,
		|	ДанныеДокументовПредприятия.ДатаСоздания,
		|	ДанныеДокументовПредприятия.Дело,
		|	ДанныеДокументовПредприятия.Дубликат,
		|	ДанныеДокументовПредприятия.ЕстьЗадачи,
		|	ДанныеДокументовПредприятия.ЕстьКатегории,
		|	ДанныеДокументовПредприятия.ЕстьФайлы,
		|	ДанныеДокументовПредприятия.Заголовок,
		|	ДанныеДокументовПредприятия.Зарегистрировал,
		|	ДанныеДокументовПредприятия.Исполнен,
		|	ДанныеДокументовПредприятия.ИсходящаяДата,
		|	ДанныеДокументовПредприятия.ИсходящийНомер,
		|	ДанныеДокументовПредприятия.ИсходящийНомерИДата,
		|	ДанныеДокументовПредприятия.Код,
		|	ДанныеДокументовПредприятия.Комментарий,
		|	ДанныеДокументовПредприятия.КонтрагентыДляСписков,
		|	ДанныеДокументовПредприятия.Наименование,
		|	ДанныеДокументовПредприятия.НеДействует,
		|	ДанныеДокументовПредприятия.НоменклатураДел,
		|	ДанныеДокументовПредприятия.Организация,
		|	ДанныеДокументовПредприятия.ОригиналПолучен,
		|	ДанныеДокументовПредприятия.ОригиналПолучил,
		|	ДанныеДокументовПредприятия.Ответственный,
		|	ДанныеДокументовПредприятия.Папка,
		|	ДанныеДокументовПредприятия.Переадресовавший,
		|	ДанныеДокументовПредприятия.Повторное,
		|	ДанныеДокументовПредприятия.Подготовил,
		|	ДанныеДокументовПредприятия.ПодотчетноеЛицо,
		|	ДанныеДокументовПредприятия.ПодписанВсеми,
		|	ДанныеДокументовПредприятия.ПодписанУтвержден,
		|	ДанныеДокументовПредприятия.ПодписанЭП,
		|	ДанныеДокументовПредприятия.Подразделение,
		|	ДанныеДокументовПредприятия.ПредставлениеСостояния,
		|	ДанныеДокументовПредприятия.Проект,
		|	ДанныеДокументовПредприятия.РегистрационныйНомер,
		|	ДанныеДокументовПредприятия.РегистрационныйНомерИДата,
		|	ДанныеДокументовПредприятия.Содержание,
		|	ДанныеДокументовПредприятия.СодержитОригинал,
		|	ДанныеДокументовПредприятия.Создал,
		|	ДанныеДокументовПредприятия.СостояниеКонтроля,
		|	ДанныеДокументовПредприятия.СостояниеОбработки,
		|	ДанныеДокументовПредприятия.СостояниеЭДО,
		|	ДанныеДокументовПредприятия.СпособПолучения,
		|	ДанныеДокументовПредприятия.СрокИсполнения,
		|	ДанныеДокументовПредприятия.СрокКонтроля,
		|	ДанныеДокументовПредприятия.СрокКонтроляОбщий,
		|	ДанныеДокументовПредприятия.СтатусЭП,
		|	ДанныеДокументовПредприятия.Сторона1,
		|	ДанныеДокументовПредприятия.Сторона2,
		|	ДанныеДокументовПредприятия.Сумма,
		|	ДанныеДокументовПредприятия.Тематика,
		|	ДанныеДокументовПредприятия.Утвердил,
		|	ДанныеДокументовПредприятия.ЧисловойНомер
		|ИЗ
		|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|ГДЕ
		|	ДанныеДокументовПредприятия.ОригиналПолучил ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ДанныеДокументовПредприятия.СоздатьНаборЗаписей();
			Набор.Отбор.ДатаСортировки.Установить(Выборка.ДатаСортировки);
			Набор.Отбор.ПометкаУдаления.Установить(Выборка.ПометкаУдаления);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
								
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ОригиналПолучил = ЗаменитьПользователяСотрудником(Выборка.ОригиналПолучил, Ложь);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
									
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать данные документа %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Документ),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьНаСотрудниковПолучившихОригиналВДанныхДокументов не удалось обработать некоторые данные документов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьНаСотрудниковАвторовКаналовОбсуждений(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.КаналыОбсуждений КАК КаналыОбсуждений
			|ГДЕ
			|	КаналыОбсуждений.Создал ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	КаналыОбсуждений.Ссылка
		|ИЗ
		|	Справочник.КаналыОбсуждений КАК КаналыОбсуждений
		|ГДЕ
		|	КаналыОбсуждений.Создал ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			КаналОбсуждения = Выборка.Ссылка.ПолучитьОбъект();
			КаналОбсуждения.Создал = ЗаменитьПользователяСотрудником(КаналОбсуждения.Создал, Ложь);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(КаналОбсуждения);
									
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать канал обсуждения %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьНаСотрудниковАвторовКаналовОбсуждений не удалось обработать некоторые каналы обсуждения (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьАвторовЗаписейВПротоколеДоставкеПочты(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ПротоколДоставкиПочты КАК ПротоколДоставкиПочты
			|ГДЕ
			|	ПротоколДоставкиПочты.Сотрудник ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПротоколДоставкиПочты.Дата,
		|	ПротоколДоставкиПочты.ПорядковыйНомерСобытия,
		|	ПротоколДоставкиПочты.ИдентификаторСеанса,
		|	ПротоколДоставкиПочты.Письмо,
		|	ПротоколДоставкиПочты.Сотрудник,
		|	ПротоколДоставкиПочты.Текст,
		|	ПротоколДоставкиПочты.ТипСобытия,
		|	ПротоколДоставкиПочты.УчетнаяЗапись,
		|	ПротоколДоставкиПочты.ЭтоОшибка,
		|	ПротоколДоставкиПочты.НомерЗадания
		|ИЗ
		|	РегистрСведений.ПротоколДоставкиПочты КАК ПротоколДоставкиПочты
		|ГДЕ
		|	ПротоколДоставкиПочты.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.ПротоколДоставкиПочты.СоздатьНаборЗаписей();
			Набор.Отбор.Дата.Установить(Выборка.Дата);
			Набор.Отбор.ПорядковыйНомерСобытия.Установить(Выборка.ПорядковыйНомерСобытия);
			Набор.Отбор.ИдентификаторСеанса.Установить(Выборка.ИдентификаторСеанса);
			Набор.Отбор.Письмо.Установить(Выборка.Письмо);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
									
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись протокола доставки письма %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Письмо),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьАвторовЗаписейВПротоколеДоставкеПочты не удалось обработать некоторые записи протокола доставки писем (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьУстановившихНаСотрудниковВЗаписяхСвязейОбъектов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
			|ГДЕ
			|	СвязиОбъектов.Установил ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СвязиОбъектов.Объект,
		|	СвязиОбъектов.ТипСвязи,
		|	СвязиОбъектов.СвязанныйОбъект,
		|	СвязиОбъектов.СвязаннаяСтрока,
		|	СвязиОбъектов.ДополнительныйОбъектСвязи,
		|	СвязиОбъектов.СвязанныйОбъектОтправлен,
		|	СвязиОбъектов.Комментарий,
		|	СвязиОбъектов.Установил,
		|	СвязиОбъектов.ДатаУстановки,
		|	СвязиОбъектов.Порядок
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Установил ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.СвязиОбъектов.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(Выборка.Объект);
			Набор.Отбор.ТипСвязи.Установить(Выборка.ТипСвязи);
			Набор.Отбор.СвязанныйОбъект.Установить(Выборка.СвязанныйОбъект);
			Набор.Отбор.СвязаннаяСтрока.Установить(Выборка.СвязаннаяСтрока);
			Набор.Отбор.ДополнительныйОбъектСвязи.Установить(Выборка.ДополнительныйОбъектСвязи);
						
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Установил = ЗаменитьПользователяСотрудником(Выборка.Установил, Ложь);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
									
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись связи с объектом %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Объект),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьУстановившихНаСотрудниковВЗаписяхСвязейОбъектов не удалось обработать некоторые записи связей объектов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхЛицНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
			|ГДЕ
			|	ОтветственныеЛицаОрганизаций.Сотрудник ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОтветственныеЛицаОрганизаций.Период,
		|	ОтветственныеЛицаОрганизаций.Организация,
		|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизаций.Сотрудник
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	ОтветственныеЛицаОрганизаций.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.ОтветственноеЛицо.Установить(Выборка.ОтветственноеЛицо);
								
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
									
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись ответственного лица организации %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.ОтветственноеЛицо),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхЛицНаСотрудников не удалось обработать некоторые записи ответственных организации (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьНаСотрудниковПолучателейУведомленийОПроблемах(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ПолучателиУведомленийОПроблемах КАК ПолучателиУведомленийОПроблемах
			|ГДЕ
			|	ПолучателиУведомленийОПроблемах.Получатель ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПолучателиУведомленийОПроблемах.Получатель,
		|	ПолучателиУведомленийОПроблемах.Раздел
		|ИЗ
		|	РегистрСведений.ПолучателиУведомленийОПроблемах КАК ПолучателиУведомленийОПроблемах
		|ГДЕ
		|	ПолучателиУведомленийОПроблемах.Получатель ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.ПолучателиУведомленийОПроблемах.СоздатьНаборЗаписей();
			Набор.Отбор.Получатель.Установить(Выборка.Получатель);
			Набор.Отбор.Раздел.Установить(Выборка.Раздел);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Получатель = ЗаменитьПользователяСотрудником(Выборка.Получатель, Ложь);
			
			Набор = РегистрыСведений.ПолучателиУведомленийОПроблемах.СоздатьНаборЗаписей();
			Набор.Отбор.Получатель.Установить(Получатель);
			Набор.Отбор.Раздел.Установить(Выборка.Раздел);
						
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Получатель = Получатель;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
						
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись получателя уведомлений о проблемах %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Получатель),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьНаСотрудниковПолучателейУведомленийОПроблемах не удалось обработать некоторые записи получателях уведомлений (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьНаСотрудникаОтветственногоЗаУдалениеНеактивныхВерсий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ответственный = Константы.ОтветственныйЗаУдалениеНеактивныхВерсий.Получить();
	
	Константы.ОтветственныйЗаУдалениеНеактивныхВерсий.Установить(
		ЗаменитьПользователяСотрудником(Ответственный, Ложь));
	
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВНастройкахДоступностиПоСостоянию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИспользоватьДля.Ссылка) КАК Количество
			|ИЗ
			|	Справочник.НастройкиДоступностиПоСостоянию.ИспользоватьДля КАК ИспользоватьДля
			|ГДЕ
			|	ИспользоватьДля.Участник ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ  1000
		|	ИспользоватьДля.Ссылка
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию.ИспользоватьДля КАК ИспользоватьДля
		|ГДЕ
		|	ИспользоватьДля.Участник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			НастройкаДоступности = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаТаблицы Из НастройкаДоступности.ИспользоватьДля Цикл
				Если ТипЗнч(СтрокаТаблицы.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
					 СтрокаТаблицы.Участник =
					 	ЗаменитьПользователяСотрудником(СтрокаТаблицы.Участник, Ложь);
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаДоступности);
											
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать настройку доступности %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВНастройкахДоступностиПоСостоянию не удалось обработать некоторые настройки доступности (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьПользователяНаСотрудникаДляЗаданияРаспознавания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СотрудникДляЗадания = Константы.СотрудникДляЗаданияРаспознавания.Получить();
	
	Константы.СотрудникДляЗаданияРаспознавания.Установить(
		ЗаменитьПользователяСотрудником(СотрудникДляЗадания, Ложь));
	
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВИндексахНумерации(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ИндексыНумерации КАК ИндексыНумерации
			|ГДЕ
			|	ИндексыНумерации.Объект ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ИндексыНумерации.Объект,
		|	ИндексыНумерации.Индекс,
		|	ИндексыНумерации.Комментарий
		|ИЗ
		|	РегистрСведений.ИндексыНумерации КАК ИндексыНумерации
		|ГДЕ
		|	ИндексыНумерации.Объект ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.ИндексыНумерации.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(Выборка.Объект);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Объект, Ложь);
			
			Набор = РегистрыСведений.ИндексыНумерации.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(Сотрудник);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Объект = Сотрудник;
					
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
						
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать индекс нумерации для пользователя  %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Объект),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВИндексахНумерации не удалось обработать некоторые индексы нумерации (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьОтметившихИсполнениеВЗадачахНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
			|ГДЕ
			|	ДействиеЗадачи.КтоОтметил ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДействиеЗадачи.Ссылка
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.КтоОтметил ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДействиеЗадачи = Выборка.Ссылка.ПолучитьОбъект();
			
			ДействиеЗадачи.КтоОтметил = ЗаменитьПользователяСотрудником(
				ДействиеЗадачи.КтоОтметил, Ложь);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДействиеЗадачи);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать действие задачи %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтметившихИсполнениеВЗадачахНаСотрудников не удалось обработать некоторые действия задач (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьСоздавшихЗадачиПользователейНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Документ.Задача КАК Задачи
			|ГДЕ
			|	Задачи.Создал ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Задачи.Ссылка
		|ИЗ
		|	Документ.Задача КАК Задачи
		|ГДЕ
		|	Задачи.Создал ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.Создал = ЗаменитьПользователяСотрудником(ЗадачаОбъект.Создал, Ложь);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать задачу %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьСоздавшихЗадачиПользователейНаСотрудников не удалось обработать некоторые задачи (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьПодотчетныхЛицНаСотрудниковВДанныхДокументов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
			|ГДЕ
			|	ДанныеДокументовПредприятия.ПодотчетноеЛицо ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеДокументовПредприятия.ДатаСортировки,
		|	ДанныеДокументовПредприятия.ПометкаУдаления,
		|	ДанныеДокументовПредприятия.Документ,
		|	ДанныеДокументовПредприятия.Важность,
		|	ДанныеДокументовПредприятия.Валюта,
		|	ДанныеДокументовПредприятия.ВидДокумента,
		|	ДанныеДокументовПредприятия.ВидОбращения,
		|	ДанныеДокументовПредприятия.ВопросДеятельности,
		|	ДанныеДокументовПредприятия.ВременныйНомер,
		|	ДанныеДокументовПредприятия.ГрифДоступа,
		|	ДанныеДокументовПредприятия.ДатаИзмененияСостоянияОбработки,
		|	ДанныеДокументовПредприятия.ДатаНачалаДействия,
		|	ДанныеДокументовПредприятия.ДатаОкончанияДействия,
		|	ДанныеДокументовПредприятия.ДатаПолученияОригинала,
		|	ДанныеДокументовПредприятия.ДатаПроверкиЭП,
		|	ДанныеДокументовПредприятия.ДатаРегистрации,
		|	ДанныеДокументовПредприятия.ДатаСоздания,
		|	ДанныеДокументовПредприятия.Дело,
		|	ДанныеДокументовПредприятия.Дубликат,
		|	ДанныеДокументовПредприятия.ЕстьЗадачи,
		|	ДанныеДокументовПредприятия.ЕстьКатегории,
		|	ДанныеДокументовПредприятия.ЕстьФайлы,
		|	ДанныеДокументовПредприятия.Заголовок,
		|	ДанныеДокументовПредприятия.Зарегистрировал,
		|	ДанныеДокументовПредприятия.Исполнен,
		|	ДанныеДокументовПредприятия.ИсходящаяДата,
		|	ДанныеДокументовПредприятия.ИсходящийНомер,
		|	ДанныеДокументовПредприятия.ИсходящийНомерИДата,
		|	ДанныеДокументовПредприятия.Код,
		|	ДанныеДокументовПредприятия.Комментарий,
		|	ДанныеДокументовПредприятия.КонтрагентыДляСписков,
		|	ДанныеДокументовПредприятия.Наименование,
		|	ДанныеДокументовПредприятия.НеДействует,
		|	ДанныеДокументовПредприятия.НоменклатураДел,
		|	ДанныеДокументовПредприятия.Организация,
		|	ДанныеДокументовПредприятия.ОригиналПолучен,
		|	ДанныеДокументовПредприятия.ОригиналПолучил,
		|	ДанныеДокументовПредприятия.Ответственный,
		|	ДанныеДокументовПредприятия.Папка,
		|	ДанныеДокументовПредприятия.Переадресовавший,
		|	ДанныеДокументовПредприятия.Повторное,
		|	ДанныеДокументовПредприятия.Подготовил,
		|	ДанныеДокументовПредприятия.ПодотчетноеЛицо,
		|	ДанныеДокументовПредприятия.ПодписанВсеми,
		|	ДанныеДокументовПредприятия.ПодписанУтвержден,
		|	ДанныеДокументовПредприятия.ПодписанЭП,
		|	ДанныеДокументовПредприятия.Подразделение,
		|	ДанныеДокументовПредприятия.ПредставлениеСостояния,
		|	ДанныеДокументовПредприятия.Проект,
		|	ДанныеДокументовПредприятия.РегистрационныйНомер,
		|	ДанныеДокументовПредприятия.РегистрационныйНомерИДата,
		|	ДанныеДокументовПредприятия.Содержание,
		|	ДанныеДокументовПредприятия.СодержитОригинал,
		|	ДанныеДокументовПредприятия.Создал,
		|	ДанныеДокументовПредприятия.СостояниеКонтроля,
		|	ДанныеДокументовПредприятия.СостояниеОбработки,
		|	ДанныеДокументовПредприятия.СостояниеЭДО,
		|	ДанныеДокументовПредприятия.СпособПолучения,
		|	ДанныеДокументовПредприятия.СрокИсполнения,
		|	ДанныеДокументовПредприятия.СрокКонтроля,
		|	ДанныеДокументовПредприятия.СрокКонтроляОбщий,
		|	ДанныеДокументовПредприятия.СтатусЭП,
		|	ДанныеДокументовПредприятия.Сторона1,
		|	ДанныеДокументовПредприятия.Сторона2,
		|	ДанныеДокументовПредприятия.Сумма,
		|	ДанныеДокументовПредприятия.Тематика,
		|	ДанныеДокументовПредприятия.Утвердил,
		|	ДанныеДокументовПредприятия.ЧисловойНомер
		|ИЗ
		|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|ГДЕ
		|	ДанныеДокументовПредприятия.ПодотчетноеЛицо ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ДанныеДокументовПредприятия.СоздатьНаборЗаписей();
			Набор.Отбор.ДатаСортировки.Установить(Выборка.ДатаСортировки);
			Набор.Отбор.ПометкаУдаления.Установить(Выборка.ПометкаУдаления);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
								
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ПодотчетноеЛицо = ЗаменитьПользователяСотрудником(Выборка.ПодотчетноеЛицо, Ложь);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
									
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать данные документа %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Документ),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьНаСотрудниковПолучившихОригиналВДанныхДокументов не удалось обработать некоторые данные документов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьАвторовНастроекОтложенногоСтартаНаСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.НастройкиОтложеногоСтартаПроцессов КАК НастройкиОтложеногоСтартаПроцессов
			|ГДЕ
			|	НастройкиОтложеногоСтартаПроцессов.АвторДобавленияЗаписи ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НастройкиОтложеногоСтартаПроцессов.БизнесПроцесс,
		|	НастройкиОтложеногоСтартаПроцессов.ДатаОтложенногоСтарта,
		|	НастройкиОтложеногоСтартаПроцессов.КоличествоПопытокОбработки,
		|	НастройкиОтложеногоСтартаПроцессов.Состояние,
		|	НастройкиОтложеногоСтартаПроцессов.ПричинаОтменыСтарта,
		|	НастройкиОтложеногоСтартаПроцессов.МоментВремени,
		|	НастройкиОтложеногоСтартаПроцессов.АвторДобавленияЗаписи
		|ИЗ
		|	РегистрСведений.НастройкиОтложеногоСтартаПроцессов КАК НастройкиОтложеногоСтартаПроцессов
		|ГДЕ
		|	НастройкиОтложеногоСтартаПроцессов.АвторДобавленияЗаписи ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.НастройкиОтложеногоСтартаПроцессов.СоздатьНаборЗаписей();
			Набор.Отбор.БизнесПроцесс.Установить(Выборка.БизнесПроцесс);
										
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			Запись.АвторДобавленияЗаписи =
				ЗаменитьПользователяСотрудником(Выборка.АвторДобавленияЗаписи, Ложь);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
									
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать настройку отложенного старта процесса %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.БизнесПроцесс),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьАвторовНастроекОтложенногоСтартаНаСотрудников не удалось обработать некоторые настройки отложенного страта процессов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВПравилахЭскалацииЗадач(Параметры) Экспорт
		
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПравилаЭскалацииЗадач.Ссылка КАК Правило
			|ПОМЕСТИТЬ ПравилаСПользователями
			|ИЗ
			|	Справочник.ПравилаЭскалации КАК ПравилаЭскалацииЗадач
			|ГДЕ
			|	ПравилаЭскалацииЗадач.НаправлениеЭскалации ССЫЛКА Справочник.Пользователи
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДополнительныеУсловия.Ссылка
			|ИЗ
			|	Справочник.ПравилаЭскалации.ДополнительныеУсловия КАК ДополнительныеУсловия
			|ГДЕ
			|	ДополнительныеУсловия.ЗначениеУсловия ССЫЛКА Справочник.Пользователи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПравилаСПользователями.Правило) КАК Количество
			|ИЗ
			|	ПравилаСПользователями КАК ПравилаСПользователями";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПравилаЭскалацииЗадач.Ссылка КАК Правило
		|ПОМЕСТИТЬ ПравилаСПользователями
		|ИЗ
		|	Справочник.ПравилаЭскалации КАК ПравилаЭскалацииЗадач
		|ГДЕ
		|	ПравилаЭскалацииЗадач.НаправлениеЭскалации ССЫЛКА Справочник.Пользователи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДополнительныеУсловия.Ссылка
		|ИЗ
		|	Справочник.ПравилаЭскалации.ДополнительныеУсловия КАК ДополнительныеУсловия
		|ГДЕ
		|	ДополнительныеУсловия.ЗначениеУсловия ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаСПользователями.Правило КАК Правило
		|ИЗ
		|	ПравилаСПользователями КАК ПравилаСПользователями";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			ЗаблокироватьДанныеДляРедактирования(Выборка.Правило);
			ПравилоОбъект = Выборка.Правило.ПолучитьОбъект();
			
			Если ТипЗнч(ПравилоОбъект.НаправлениеЭскалации) = Тип("СправочникСсылка.Пользователи") Тогда
				ПравилоОбъект.НаправлениеЭскалации = 
					ЗаменитьПользователяСотрудником(ПравилоОбъект.НаправлениеЭскалации, Ложь);
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из ПравилоОбъект.ДополнительныеУсловия Цикл
				Если ТипЗнч(СтрокаТаблицы.ЗначениеУсловия) = Тип("СправочникСсылка.Пользователи") Тогда
					СтрокаТаблицы.ЗначениеУсловия =
						ЗаменитьПользователяСотрудником(СтрокаТаблицы.ЗначениеУсловия, Ложь);
				КонецЕсли;
			КонецЦикла;
			 
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Правило);
												
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать правило эскалации задач %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Правило),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВПравилахЭскалацииЗадач не удалось обработать некоторые правила эскалация задач (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВИсторииЭскалацииЗадач(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ЭскалированныеЗадачи КАК ЭскалированныеЗадачи
			|ГДЕ
			|	ЭскалированныеЗадачи.Исполнитель ССЫЛКА Справочник.Пользователи
			|	ИЛИ ЭскалированныеЗадачи.НовыйИсполнитель ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЭскалированныеЗадачи.Период,
		|	ЭскалированныеЗадачи.Задача,
		|	ЭскалированныеЗадачи.ПравилоЭскалации,
		|	ЭскалированныеЗадачи.Действие,
		|	ЭскалированныеЗадачи.Исполнитель,
		|	ЭскалированныеЗадачи.Комментарий,
		|	ЭскалированныеЗадачи.НовыйИсполнитель
		|ИЗ
		|	РегистрСведений.ЭскалированныеЗадачи КАК ЭскалированныеЗадачи
		|ГДЕ
		|	ЭскалированныеЗадачи.Исполнитель ССЫЛКА Справочник.Пользователи
		|	ИЛИ ЭскалированныеЗадачи.НовыйИсполнитель ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ЭскалированныеЗадачи.СоздатьНаборЗаписей();
			Набор.Отбор.Задача.Установить(Выборка.Задача);
										
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			Если ТипЗнч(Запись.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Запись.Исполнитель = ЗаменитьПользователяСотрудником(Выборка.Исполнитель, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(Запись.НовыйИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Запись.НовыйИсполнитель = ЗаменитьПользователяСотрудником(
					Выборка.НовыйИсполнитель, Ложь);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
									
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись истории эскалации задачи %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Задача),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВИсторииЭскалацииЗадач не удалось обработать некоторые записи истории эскалации задач (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВМоихДокументах(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.МоиДокументы КАК МоиДокументы
			|ГДЕ
			|	МоиДокументы.Сотрудник ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	МоиДокументы.Сотрудник,
		|	МоиДокументы.Документ,
		|	МоиДокументы.Причина
		|ИЗ
		|	РегистрСведений.МоиДокументы КАК МоиДокументы
		|ГДЕ
		|	МоиДокументы.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.МоиДокументы.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			Набор.Отбор.Причина.Установить(Выборка.Причина);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
			
			Набор = РегистрыСведений.МоиДокументы.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Сотрудник);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			Набор.Отбор.Причина.Установить(Выборка.Причина);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = Сотрудник;
					
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
						
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись в моих документах для пользователя  %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Сотрудник),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВМоихДокументах не удалось обработать некоторые записи (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВСпискеКонтроляСамочувствия() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиДляКонтроляСамочувствия.Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиДляКонтроляСамочувствия КАК СотрудникиДляКонтроляСамочувствия
		|ГДЕ
		|	СотрудникиДляКонтроляСамочувствия.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.СотрудникиДляКонтроляСамочувствия.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
			
			Набор = РегистрыСведений.СотрудникиДляКонтроляСамочувствия.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Сотрудник);
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = Сотрудник;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
						
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;	
			
		КонецПопытки;
				
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВДокументахРегистрацииСамочувствий(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
						
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Документ.СамочувствиеСотрудника КАК СамочувствиеСотрудника
			|ГДЕ
			|	СамочувствиеСотрудника.Создал ССЫЛКА Справочник.Пользователи
			|	ИЛИ СамочувствиеСотрудника.Сотрудник ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СамочувствиеСотрудника.Ссылка
		|ИЗ
		|	Документ.СамочувствиеСотрудника КАК СамочувствиеСотрудника
		|ГДЕ
		|	СамочувствиеСотрудника.Создал ССЫЛКА Справочник.Пользователи
		|	ИЛИ СамочувствиеСотрудника.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			СамочувствиеСотрудника = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ТипЗнч(СамочувствиеСотрудника.Создал) = Тип("СправочникСсылка.Пользователи") Тогда			
				СамочувствиеСотрудника.Создал =
					ЗаменитьПользователяСотрудником(СамочувствиеСотрудника.Создал, Ложь);
			КонецЕсли;
			
			Если ТипЗнч(СамочувствиеСотрудника.Сотрудник) =
				Тип("СправочникСсылка.Пользователи") Тогда
							
				СамочувствиеСотрудника.Сотрудник =
					ЗаменитьПользователяСотрудником(СамочувствиеСотрудника.Сотрудник, Ложь);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СамочувствиеСотрудника);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать документ регистрации самочувствия сотрудника %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВДокументахРегистрацииСамочувствий не удалось обработать некоторые документы регистрации самочувствия сотрудников (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхПользователейНаСотрудниковВИнструкциях(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
						
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.Инструкции КАК Инструкции
			|ГДЕ
			|	Инструкции.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Инструкции.Ссылка
		|ИЗ
		|	Справочник.Инструкции КАК Инструкции
		|ГДЕ
		|	Инструкции.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ИнструкцияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ИнструкцияОбъект.Ответственный = ЗаменитьПользователяСотрудником(
				ИнструкцияОбъект.Ответственный, Ложь);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИнструкцияОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать инструкцию %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхПользователейНаСотрудниковВИнструкциях не удалось обработать некоторые инструкции (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьОтветственныхПользователейНаСотрудниковВДокументахВыгрузкаВССТУ(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
						
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Документ.ВыгрузкаВССТУ КАК ВыгрузкаВССТУ
			|ГДЕ
			|	ВыгрузкаВССТУ.Ответственный ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВыгрузкаВССТУ.Ссылка
		|ИЗ
		|	Документ.ВыгрузкаВССТУ КАК ВыгрузкаВССТУ
		|ГДЕ
		|	ВыгрузкаВССТУ.Ответственный ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ВыгрузкаВССТУ = Выборка.Ссылка.ПолучитьОбъект();
			
			ВыгрузкаВССТУ.Ответственный = ЗаменитьПользователяСотрудником(
				ВыгрузкаВССТУ.Ответственный, Ложь);
							
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВыгрузкаВССТУ);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать выгрузку в ССТУ %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьОтветственныхПользователейНаСотрудниковВДокументахВыгрузкаВССТУ не удалось обработать некоторые документы (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВСредиОбъектовДляАвтоподбораАдресатов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ОбъектыДляАвтоподбораАдресатов КАК ОбъектыДляАвтоподбораАдресатов
			|ГДЕ
			|	ОбъектыДляАвтоподбораАдресатов.ОбъектДанных ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОбъектыДляАвтоподбораАдресатов.Владелец,
		|	ОбъектыДляАвтоподбораАдресатов.ОбъектДанных
		|ИЗ
		|	РегистрСведений.ОбъектыДляАвтоподбораАдресатов КАК ОбъектыДляАвтоподбораАдресатов
		|ГДЕ
		|	ОбъектыДляАвтоподбораАдресатов.ОбъектДанных ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ОбъектыДляАвтоподбораАдресатов.СоздатьНаборЗаписей();
			Набор.Отбор.Владелец.Установить(Выборка.Владелец);
			Набор.Отбор.ОбъектДанных.Установить(Выборка.ОбъектДанных);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбъектДанных = ЗаменитьПользователяСотрудником(Выборка.ОбъектДанных, Ложь);
			
			Набор = РегистрыСведений.ОбъектыДляАвтоподбораАдресатов.СоздатьНаборЗаписей();
			Набор.Отбор.Владелец.Установить(Выборка.Владелец);
			Набор.Отбор.ОбъектДанных.Установить(ОбъектДанных);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ОбъектДанных = ОбъектДанных;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись настройки автоподбора для писем у пользователя %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Владелец),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВСредиОбъектовДляАвтоподбораАдресатов не удалось обработать некоторые записи  (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
		
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВАдреснойКниге(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.АдреснаяКнига КАК АдреснаяКнига
			|ГДЕ
			|	АдреснаяКнига.ОбъектДоступа ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	АдреснаяКнига.Ссылка
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.ОбъектДоступа ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗаписьАдрКниги = Выборка.Ссылка.ПолучитьОбъект();
			
			ЗаписьАдрКниги.ОбъектДоступа = ЗаменитьПользователяСотрудником(
				ЗаписьАдрКниги.ОбъектДоступа, Ложь);
						
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаписьАдрКниги);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись адресной книги %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВАдреснойКниге не удалось обработать некоторые записи адресной книги (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
		
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВДанныхПоискаПоАдреснойКниге(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.УдалитьПоискВАдреснойКниге КАК ОбъектыПоискаВАдреснойКниге
			|ГДЕ
			|	ОбъектыПоискаВАдреснойКниге.ОбъектДоступа ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОбъектыПоискаВАдреснойКниге.ОбъектПоиска,
		|	ОбъектыПоискаВАдреснойКниге.КритерийПоиска,
		|	ОбъектыПоискаВАдреснойКниге.Слово,
		|	ОбъектыПоискаВАдреснойКниге.ОбъектДоступа,
		|	ОбъектыПоискаВАдреснойКниге.ИспользоватьВПоиске
		|ИЗ
		|	РегистрСведений.УдалитьПоискВАдреснойКниге КАК ОбъектыПоискаВАдреснойКниге
		|ГДЕ
		|	ОбъектыПоискаВАдреснойКниге.ОбъектДоступа ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ОбъектыПоискаВАдреснойКниге.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектПоиска.Установить(Выборка.ОбъектПоиска);
			Набор.Отбор.КритерийПоиска.Установить(Выборка.КритерийПоиска);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ОбъектДоступа = ЗаменитьПользователяСотрудником(
				Выборка.ОбъектДоступа, Ложь);
					
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись для поиска в адресной книге объекта %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.ОбъектПоиска),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВДанныхПоискаПоАдреснойКниге не удалось обработать некоторые записи поиска в адресной книге (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
		
КонецПроцедуры


Процедура ЗаменитьПользователейНаСотрудниковВПротоколеРаботы(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ПротоколРаботыСотрудников КАК ПротоколРаботыСотрудников
			|ГДЕ
			|	ПротоколРаботыСотрудников.Сотрудник ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПротоколРаботыСотрудников.Дата,
		|	ПротоколРаботыСотрудников.ОбъектДанных,
		|	ПротоколРаботыСотрудников.Сотрудник,
		|	ПротоколРаботыСотрудников.ТипСобытия,
		|	ПротоколРаботыСотрудников.Длительность,
		|	ПротоколРаботыСотрудников.ДополнительныеСведения,
		|	ПротоколРаботыСотрудников.ОписаниеСобытия,
		|	ПротоколРаботыСотрудников.ИмяКомпьютера
		|ИЗ
		|	РегистрСведений.ПротоколРаботыСотрудников КАК ПротоколРаботыСотрудников
		|ГДЕ
		|	ПротоколРаботыСотрудников.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ПротоколРаботыСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Дата.Установить(Выборка.Дата);
			Набор.Отбор.ОбъектДанных.Установить(Выборка.ОбъектДанных);
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Отбор.ТипСобытия.Установить(Выборка.ТипСобытия);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
			
			Набор = РегистрыСведений.ПротоколРаботыСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Дата.Установить(Выборка.Дата);
			Набор.Отбор.ОбъектДанных.Установить(Выборка.ОбъектДанных);
			Набор.Отбор.Сотрудник.Установить(Сотрудник);
			Набор.Отбор.ТипСобытия.Установить(Выборка.ТипСобытия);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = Сотрудник;
					
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			СсылкаНаОбъектДанных = НСтр("ru = '<Нет ссылки на объект>'");
			Если ЗначениеЗаполнено(Выборка.ОбъектДанных) Тогда
				СсылкаНаОбъектДанных = ПолучитьНавигационнуюСсылку(Выборка.ОбъектДанных);
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись протокола работы по объекту %1. Причина:
					|%2'"),
				СсылкаНаОбъектДанных,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВПротоколеРаботы не удалось обработать некоторые записи протокола работы (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
		
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВНастройкахРабочихКалендарей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиРабочегоКалендаряСотрудника.Сотрудник,
		|	НастройкиРабочегоКалендаряСотрудника.Настройка,
		|	НастройкиРабочегоКалендаряСотрудника.Значение
		|ИЗ
		|	РегистрСведений.НастройкиРабочегоКалендаряСотрудника КАК НастройкиРабочегоКалендаряСотрудника
		|ГДЕ
		|	НастройкиРабочегоКалендаряСотрудника.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.НастройкиРабочегоКалендаряСотрудника.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Отбор.Настройка.Установить(Выборка.Настройка);			
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
			
			Набор = РегистрыСведений.НастройкиРабочегоКалендаряСотрудника.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Сотрудник);
			Набор.Отбор.Настройка.Установить(Выборка.Настройка);			
						
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = Сотрудник;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
						
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;	
			
		КонецПопытки;
				
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаменитьДоступноеВремяПользователейНаСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоступноеВремяСотрудников.Сотрудник,
		|	ДоступноеВремяСотрудников.ДеньНедели,
		|	ДоступноеВремяСотрудников.ВремяНачала,
		|	ДоступноеВремяСотрудников.ВремяОкончания
		|ИЗ
		|	РегистрСведений.ДоступноеВремяСотрудников КАК ДоступноеВремяСотрудников
		|ГДЕ
		|	ДоступноеВремяСотрудников.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.ДоступноеВремяСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Отбор.ДеньНедели.Установить(Выборка.ДеньНедели);			
			Набор.Отбор.ВремяНачала.Установить(Выборка.ВремяНачала);
			Набор.Отбор.ВремяОкончания.Установить(Выборка.ВремяОкончания);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
			
			Набор = РегистрыСведений.ДоступноеВремяСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Сотрудник);
			Набор.Отбор.ДеньНедели.Установить(Выборка.ДеньНедели);			
			Набор.Отбор.ВремяНачала.Установить(Выборка.ВремяНачала);
			Набор.Отбор.ВремяОкончания.Установить(Выборка.ВремяОкончания);			
						
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = Сотрудник;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
						
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;	
			
		КонецПопытки;
				
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаменитьЗанятостьПользователейНаСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗанятостьСотрудников.Сотрудник,
		|	ЗанятостьСотрудников.ДатаНачала,
		|	ЗанятостьСотрудников.ДатаОкончания,
		|	ЗанятостьСотрудников.Занят
		|ИЗ
		|	РегистрСведений.ЗанятостьСотрудников КАК ЗанятостьСотрудников
		|ГДЕ
		|	ЗанятостьСотрудников.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.ЗанятостьСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);			
			Набор.Отбор.ДатаОкончания.Установить(Выборка.ДатаОкончания);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
			
			Набор = РегистрыСведений.ЗанятостьСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Сотрудник);
			Набор.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);			
			Набор.Отбор.ДатаОкончания.Установить(Выборка.ДатаОкончания);			
						
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = Сотрудник;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
						
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;	
			
		КонецПопытки;
				
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВЗаписяхХронометража(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ХронометражРабочегоВремениСотрудников КАК ХронометражРабочегоВремениСотрудников
			|ГДЕ
			|	ХронометражРабочегоВремениСотрудников.Сотрудник ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ХронометражРабочегоВремениСотрудников.Сотрудник,
		|	ХронометражРабочегоВремениСотрудников.Объект,
		|	ХронометражРабочегоВремениСотрудников.ВремяНачала,
		|	ХронометражРабочегоВремениСотрудников.ВремяОкончания
		|ИЗ
		|	РегистрСведений.ХронометражРабочегоВремениСотрудников КАК ХронометражРабочегоВремениСотрудников
		|ГДЕ
		|	ХронометражРабочегоВремениСотрудников.Сотрудник ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ХронометражРабочегоВремениСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(Выборка.Объект);
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Сотрудник, Ложь);
						
			Набор = РегистрыСведений.ХронометражРабочегоВремениСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(Выборка.Объект);
			Набор.Отбор.Сотрудник.Установить(Сотрудник);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Сотрудник = Сотрудник;
					
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись о хронометраже объекта %1. Причина:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Объект),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВЗаписяхХронометража не удалось обработать некоторые записи о хронометраже (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
		
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВКатегорияхОбъектов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
			|ГДЕ
			|	КатегорииОбъектов.Автор ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	КатегорииОбъектов.Автор,
		|	КатегорииОбъектов.ОбъектДанных,
		|	КатегорииОбъектов.КатегорияДанных,
		|	КатегорииОбъектов.ДатаКатегоризации,
		|	КатегорииОбъектов.НазначениеКатегорииПроверено
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.Автор ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектДанных.Установить(Выборка.ОбъектДанных);
			Набор.Отбор.КатегорияДанных.Установить(Выборка.КатегорияДанных);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			Сотрудник = ЗаменитьПользователяСотрудником(Выборка.Автор, Ложь);
						
			Набор = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектДанных.Установить(Выборка.ОбъектДанных);
			Набор.Отбор.КатегорияДанных.Установить(Выборка.КатегорияДанных);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Автор = Сотрудник;
					
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись о категории объекта %1. Причина:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Объект),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВКатегорияхОбъектов не удалось обработать некоторые записи (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
		
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВПравилахКатегоризации(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ПравилаАвтоматическойКатегоризацииДанных КАК ПравилаАвтоматическойКатегоризацииДанных
			|ГДЕ
			|	ПравилаАвтоматическойКатегоризацииДанных.Автор ССЫЛКА Справочник.Пользователи";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПравилаАвтоматическойКатегоризацииДанных.Ссылка
		|ИЗ
		|	Справочник.ПравилаАвтоматическойКатегоризацииДанных КАК ПравилаАвтоматическойКатегоризацииДанных
		|ГДЕ
		|	ПравилаАвтоматическойКатегоризацииДанных.Автор ССЫЛКА Справочник.Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ЭлементОбъект.Автор = ЗаменитьПользователяСотрудником(
				ЭлементОбъект.Автор, Ложь);
						
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись правила категоризации %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВПравилахКатегоризации не удалось обработать некоторые записи (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
		
КонецПроцедуры

Процедура ЗаменитьПользователейНаСотрудниковВКатегорияхДанных(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.КатегорииДанных КАК КатегорииДанных
			|ГДЕ
			|	КатегорииДанных.Автор ССЫЛКА Справочник.Пользователи
			|
			|Объединить все
			|
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.КатегорииДанных.Доступ КАК КатегорииДанныхДоступ
			|ГДЕ
			|	КатегорииДанныхДоступ.Участник ССЫЛКА Справочник.Пользователи";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ПрогрессВыполнения.ВсегоОбъектов + Выборка.Количество;
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КатегорииДанных.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВсеКатегории
		|ИЗ
		|	Справочник.КатегорииДанных КАК КатегорииДанных
		|ГДЕ
		|	КатегорииДанных.Автор ССЫЛКА Справочник.Пользователи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КатегорииДанныхДоступ.Ссылка
		|ИЗ
		|	Справочник.КатегорииДанных.Доступ КАК КатегорииДанныхДоступ
		|ГДЕ
		|	КатегорииДанныхДоступ.Участник ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеКатегории.Ссылка КАК Ссылка
		|ИЗ
		|	ВсеКатегории КАК ВсеКатегории
		|ГДЕ
		|	ВсеКатегории.Ссылка <> &ВсеКатегории";
	Запрос.Параметры.Вставить("ВсеКатегории", Справочники.КатегорииДанных.ВсеКатегории);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ТипЗнч(ЭлементОбъект.Автор) = Тип("СправочникСсылка.Пользователи") Тогда
				ЭлементОбъект.Автор = ЗаменитьПользователяСотрудником(
					ЭлементОбъект.Автор, Ложь);
			КонецЕсли;
			
			Для Каждого ЭлементДоступа Из ЭлементОбъект.Доступ Цикл
				Если ТипЗнч(ЭлементДоступа.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
					ЭлементДоступа.Участник = ЗаменитьПользователяСотрудником(
						ЭлементДоступа.Участник, Ложь);
				КонецЕсли;
			КонецЦикла;
						
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать категорию %1 по причине:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьПользователейНаСотрудниковВКатегорияхДанных не удалось обработать некоторые записи (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
		
КонецПроцедуры

#КонецОбласти

// Создает сотрудника для пользователя Администратор.
//
Процедура СоздатьСотрудникаДляАдминистратора() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
		И ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени("Администратор");
		Пользователь = Неопределено;
		ПользователиСлужебный.ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор,,
			Пользователь);
	Иначе
		Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательОбъект = Пользователь.ПолучитьОбъект();
	
	Если ЗначениеЗаполнено(ПользовательОбъект.ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
		ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ДанныеФизЛица = ФизЛицо.СтруктураДанныхДляЗаполнения();
		ДанныеФизЛица.ФИО = ПользовательОбъект.Наименование;
		ФизЛицо.Заполнить(ДанныеФизЛица);
		ФизЛицо.Записать();
		
		Сотрудник = Справочники.Сотрудники.СоздатьЭлемент();
		СтруктураДанных = Сотрудник.СтруктураДанныхДляЗаполнения();
		СтруктураДанных.ФизЛицо = ФизЛицо.Ссылка;
		СтруктураДанных.ПредставлениеВДокументах = Строка(СтруктураДанных.ФизЛицо);
		СтруктураДанных.ПредставлениеВПереписке = СтруктураДанных.ПредставлениеВДокументах;
		Сотрудник.Заполнить(СтруктураДанных);
		Сотрудник.Записать();
		
		РегистрыСведений.ОсновныеСотрудники.УстановитьОсновногоСотрудника(
			ФизЛицо.Ссылка, Сотрудник.Ссылка);
		
		ПользовательОбъект.ФизЛицо = ФизЛицо.Ссылка;
		ПользовательОбъект.Записать();
		
		РегистрыСведений.СотрудникиПользователей.ДобавитьЗапись(Пользователь, Сотрудник.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает представление сотрудника.
//
// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица, Строка - ссылка на физ. лицо или ФИО физ. лица.
//  ПредставлениеДолжностиПодразделения - Строка
//  Должность - СправочникСсылка.Должности - Должность для представления
//  Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение для представления
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеСотрудника(ФизЛицо, ПредставлениеДолжностиПодразделения, 
	Должность = Неопределено, Подразделение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ФИО = Строка(ФизЛицо);
	Иначе
		ФИО = ФизЛицо;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПредставлениеДолжностиПодразделения)
		И ЗначениеЗаполнено(Должность) 
		И ЗначениеЗаполнено(Подразделение) Тогда
		
		ПредставлениеДолжностиПодразделения = ПредставлениеПодразделенияИДолжностиСотрудника(Подразделение, Должность);
		
	КонецЕсли;
	
	Возврат СтрШаблон("%1%2",
		ФИО,
		ПредставлениеДолжностиПодразделения);
	
КонецФункции

// Возвращает представление подразделения и должности сотрудника.
//
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия - ссылка на подразделение.
//  Должность - СправочникСсылка.Должности - ссылка на должность.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеПодразделенияИДолжностиСотрудника(Подразделение, Должность) Экспорт
	
	Возврат ПредставлениеПодразделенияИДолжностиСотрудникаСУчетомЯзыка(Подразделение, Должность, "");
	
КонецФункции

// Возвращает представление подразделения и должности сотрудника.
//
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия - ссылка на подразделение.
//  Должность - СправочникСсылка.Должности - ссылка на должность.
//  СуффиксЯзыка - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеПодразделенияИДолжностиСотрудникаСУчетомЯзыка(Подразделение, Должность, СуффиксЯзыка = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Подразделение) И Не ЗначениеЗаполнено(Должность) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяРеквизита = "Наименование" + СуффиксЯзыка;
	
	Представление = "";
	ПредставлениеПодразделения = "";
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ПредставлениеПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, ИмяРеквизита);
	КонецЕсли;
	
	ПредставлениеДолжности = "";
	Если ЗначениеЗаполнено(Должность) Тогда
		ПредставлениеДолжности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Должность, ИмяРеквизита);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Должность) Тогда 
		Представление = СтрШаблон(" (%1, %2)", ПредставлениеПодразделения, ПредставлениеДолжности);
	ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
		Представление = СтрШаблон(" (%1)", ПредставлениеПодразделения);
	ИначеЕсли ЗначениеЗаполнено(Должность) Тогда 
		Представление = СтрШаблон(" (%1)", ПредставлениеДолжности);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Установит основного сотрудника, подобрав подходящего.
//  При вызове рег задания ОбновлениеДействияСотрудников или просто при записи карточки сотрудника.
//
// Параметры:
//  ФизическоеЛицо - СправочникССылка.ФизическиеЛица
//
Процедура ПодобратьИУстановитьОсновногоСотрудника(ФизическоеЛицо) Экспорт
	
	ТаблСотрудников = ПолучитьДействующихСотрудниковФизлица(ФизическоеЛицо);
	Если ТаблСотрудников.Количество() = 0 Тогда
		РегистрыСведений.ОсновныеСотрудники.УдалитьОсновногоСотрудника(ФизическоеЛицо);
		Возврат;
	КонецЕсли;	
	
	ТекОсновнойСотрудник = ОсновнойСотрудникФизЛица(ФизическоеЛицо);
	Если ЗначениеЗаполнено(ТекОсновнойСотрудник) 
		И ТаблСотрудников.Найти(ТекОсновнойСотрудник, "Ссылка") <> Неопределено Тогда
		// основной и так среди действующих, ничего менять не надо.
		Возврат;
	КонецЕсли;	
	
	// поставим первого как основного
	РегистрыСведений.ОсновныеСотрудники.УстановитьОсновногоСотрудника(
		ФизическоеЛицо, ТаблСотрудников[0].Ссылка);
	
КонецПроцедуры

// Обрабочтик рег. задания ОбновлениеДействияСотрудников
//
Процедура ОбновлениеДействияСотрудников() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеДействияСотрудников);
	
	// найдем действующих сотрудников с истекшим сроком действия
	// либо недействующих, но по сроку они должны стать действующими
	
	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ
	   |	Сотрудники.Ссылка КАК Ссылка
	   |ИЗ
	   |	Справочник.Сотрудники КАК Сотрудники
	   |ГДЕ
	   |	Сотрудники.Действует = ИСТИНА
	   |	И Сотрудники.ДатаОкончанияДействия <> &ПустаяДата
	   |	И (Сотрудники.ДатаОкончанияДействия < &ТекущаяДата
	   |			ИЛИ Сотрудники.ДатаНачалаДействия > &ТекущаяДата)
	   |
	   |ОБЪЕДИНИТЬ ВСЕ
	   |
	   |ВЫБРАТЬ
	   |	Сотрудники.Ссылка
	   |ИЗ
	   |	Справочник.Сотрудники КАК Сотрудники
	   |ГДЕ
	   |	Сотрудники.Действует = ЛОЖЬ
	   |	И (Сотрудники.ДатаНачалаДействия <= &ТекущаяДата
	   |				И Сотрудники.ДатаОкончанияДействия >= &ТекущаяДата
	   |			ИЛИ Сотрудники.ДатаОкончанияДействия = &ПустаяДата)";
	 
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата())); 
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101000000")); 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СотрудникОбъект.Записать(); // при записи будет скорректирован
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция определяет пол физлица по его отчеству.
//
// Параметры:
//  ОтчествоРаботника - Строка - Отчество работника.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПолФизическогоЛица - Пол по отчеству.
//
Функция ОпределитьПолПоОтчеству(ОтчествоСотрудника)
	
	Если Прав(ОтчествоСотрудника, 2) = "ич" Тогда
		Возврат Перечисления.ПолФизическогоЛица.Мужской;
	ИначеЕсли Прав(ОтчествоСотрудника, 2) = "на" Тогда
		Возврат Перечисления.ПолФизическогоЛица.Женский;
	Иначе
		Возврат Перечисления.ПолФизическогоЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДействующихСотрудниковФизлица(ФизическоеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	Сотрудники.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	Сотрудники.Действует КАК Действует
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Владелец
	|	И Сотрудники.Действует = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачалаДействия";
	
	Запрос.УстановитьПараметр("Владелец", ФизическоеЛицо);
	
	СотрудникиМассив = Запрос.Выполнить().Выгрузить();
	Возврат СотрудникиМассив;
	
КонецФункции


// Конструктор результата проверки сотрудников на действительность.
// 
// Возвращаемое значение:
//  Структура - Проверить сотрудников на действительность подготовить:
// * ВсеДействительны - Булево - Признак действительности всех сотрудников, т.е. действителен и сотрудник и хотя бы
//                               один пользователь сотрудника.
// * ЕстьВариантыЗамены - Булево - Признак наличия вариантов замены сотрудников. Например, на действительного сотрудника
//                                 того же пользователя.
// * ЕстьНедействительныеСотрудники - Булево - Признак наличия среди сотрудников таких, которые недействительны.
// * ЕстьНедействительныеПользователи - Булево - Признак наличия среди сотрудников таких, у которых Сотрудник
//                                               действителен, а Пользователь недействителен.
// * ПредставленияНедействительныхУчастников - Массив Из Строка - представления вида Фамилия И. О. 
// * Сведения - Массив Из Структура - Массив структур со сведениями о действительности сотрудника:
// ** Сотрудник - СправочникСсылка.Сотрудники - Ссылка на сотрудника.
// ** Действует - Булево - Признак действует сотрудника.
// ** ПользовательДействует - Булево - Признак наличия хотя бы одного действительного пользователя.
// ** Замены - Массив из СправочникСсылка.Сотрудники - Возможные варианты замены сотрудника. 
//
Функция ОписаниеРезультатаПроверкиСотрудниковНаДействительность() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеДействительны", 					Ложь);
	Результат.Вставить("ЕстьНедействительныеСотрудники", 	Ложь);
	Результат.Вставить("ЕстьНедействительныеПользователи", 	Ложь);
	Результат.Вставить("ЕстьВариантыЗамены", 				Ложь);
	Результат.Вставить("ПредставленияНедействительныхУчастников", Новый Массив);
	Результат.Вставить("Сведения", 							Новый Массив);
	Возврат Результат;
	
КонецФункции

// Проверить сотрудников на действительность подготовить.
// 
// Параметры:
//  МассивСотрудников - Массив Из СправочникСсылка.Сотрудники - Массив сотрудников.
//  ПредлагатьЗамену - Булево - Предлагать замену. Если Истина, будут заполняться варианты замены сотрудников.
//  ТолькоНедействительные - Булево - Возвращать полные список или только недействительных.
// 
// Возвращаемое значение:
//  Структура - Проверить сотрудников на действительность подготовить:
// * ВсеДействительны - Булево - Признак действительности всех сотрудников, т.е. действителен и сотрудник и хотя бы
//                               один пользователь сотрудника.
// * ЕстьВариантыЗамены - Булево - Признак наличия вариантов замены сотрудников. Например, на действительного сотрудника
//                                 того же пользователя.
// * ЕстьНедействительныеСотрудники - Булево - Признак наличия среди сотрудников таких, которые недействительны.
// * ЕстьНедействительныеПользователи - Булево - Признак наличия среди сотрудников таких, у которых Сотрудник
//                                               действителен, а Пользователь недействителен.
// * ПредставленияНедействительныхУчастников - Массив Из Строка - представления вида Фамилия И. О.
// * Сведения - ТаблицаЗначений - Таблица сведений о действительности сотрудника:
// ** Сотрудник - СправочникСсылка.Сотрудники - Ссылка на сотрудника.
// ** Действует - Булево - Признак действует сотрудника.
// ** ПользовательДействует - Булево - Признак наличия хотя бы одного действительного пользователя.
// ** Замены - Массив из СправочникСсылка.Сотрудники - Возможные варианты замены сотрудника.
Функция ПроверитьСотрудниковНаДействительностьПодготовить(МассивСотрудников, ПредлагатьЗамену, ТолькоНедействительные)
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ВсеДействительны",					Ложь);
	РезультатПроверки.Вставить("ЕстьВариантыЗамены",				Ложь);
	РезультатПроверки.Вставить("ЕстьНедействительныеСотрудники",	Ложь);
	РезультатПроверки.Вставить("ЕстьНедействительныеПользователи",	Ложь);
	РезультатПроверки.Вставить("ПредставленияНедействительныхУчастников", Новый Массив);
	
	СведенияТаблицей = СведенияОДействительностиСотрудниковИПользователей(МассивСотрудников, ТолькоНедействительные);
	РезультатПроверки.Вставить("Сведения", СведенияТаблицей);
	
	Если СведенияТаблицей.Количество() = 0 Тогда
		РезультатПроверки.ВсеДействительны = Истина;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	СведенияТаблицей.Индексы.Добавить("Действует, ПользовательДействует");
	СведенияТаблицей.Индексы.Добавить("Действует");
	СведенияТаблицей.Индексы.Добавить("ПользовательДействует");
	
	РезультатПроверки.ЕстьНедействительныеСотрудники = 
		СведенияТаблицей.Найти(Ложь, "Действует") <> Неопределено;
	РезультатПроверки.ЕстьНедействительныеПользователи = 
		СведенияТаблицей.Найти(Ложь, "ПользовательДействует") <> Неопределено;
	
	Для Каждого СведенияПоСотруднику Из СведенияТаблицей Цикл
		Если СведенияПоСотруднику.Действует И СведенияПоСотруднику.ПользовательДействует Тогда
			Продолжить;
		КонецЕсли;
		ПредставлениеУчастника = РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(СведенияПоСотруднику.Сотрудник);
		РезультатПроверки.ПредставленияНедействительныхУчастников.Добавить(ПредставлениеУчастника);
	КонецЦикла;
	
	Если Не ПредлагатьЗамену Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	// Найдём сотрудников, по которым нужно искать альтернативных сотрудников.
	// Действует = ЛОЖЬ И ПользовательДействует = ИСТИНА
	СтрокиПодЗамену = СведенияТаблицей.НайтиСтроки(Новый Структура("Действует, ПользовательДействует", Ложь, Истина));
	Если СтрокиПодЗамену.Количество() = 0 Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	СотрудникиПодЗамену = СведенияТаблицей.Скопировать(СтрокиПодЗамену, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	Замены = ДругиеДействительныеСотрудникиСотрудников(СотрудникиПодЗамену);
	Если Замены.Количество() = 0 Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатПроверки.ЕстьВариантыЗамены = Истина;
	
	Для Каждого Сведение Из СведенияТаблицей Цикл
		Сведение.Замены = Замены[Сведение.Сотрудник]; 
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Сведения о действительности сотрудников и пользователя сотрудника.
// 
// Параметры:
//  МассивСотрудников - Массив Из СправочникСсылка.Сотрудники - Массив сотрудников.
//  ТолькоНедействительные - Булево - Если Истина, тогда в результирующую таблица не попадут сотрудники, которые
//                                    действительны и у которых есть действительный пользователь.
// 
// Возвращаемое значение:
// ТаблицаЗначений - Таблица сведений о действительности сотрудника:
// * Сотрудник - СправочникСсылка.Сотрудники - Ссылка на сотрудника.
// * Действует - Булево - Признак действует сотрудника.
// * ПользовательДействует - Булево - Признак наличия хотя бы одного действительного пользователя.
Функция СведенияОДействительностиСотрудниковИПользователей(МассивСотрудников, ТолькоНедействительные = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.Действует КАК Действует,
	|	ВЫБОР
	|		КОГДА Пользователи.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПользовательДействует
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО Сотрудники.Ссылка = СотрудникиПользователей.Сотрудник
	|		И Сотрудники.ПометкаУдаления = ЛОЖЬ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО СотрудникиПользователей.Пользователь = Пользователи.Ссылка
	|		И Пользователи.Недействителен = ЛОЖЬ
	|		И Пользователи.ПометкаУдаления = ЛОЖЬ
	|ГДЕ
	|	Сотрудники.Ссылка В (&Сотрудники)
	|	И (&Все = ИСТИНА
	|	ИЛИ Сотрудники.Действует = ЛОЖЬ
	|	ИЛИ Пользователи.Ссылка ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	Запрос.УстановитьПараметр("Все", Не ТолькоНедействительные);
	
	Сведения = Запрос.Выполнить().Выгрузить();
	Сведения.Колонки.Добавить("Замены", Новый ОписаниеТипов("Массив"));
	
	Возврат Сведения;
	
КонецФункции

// Другие действительные сотрудники сотрудников.
// 
// Параметры:
//  МассивСотрудников - Массив Из СправочникСсылка.Сотрудники - Массив сотрудников
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение- Другие действительные сотрудники сотрудников:
//   * Ключ - СправочникСсылка.Сотрудники
//   * Значение - Массив Из СправочникСсылка.Сотрудники
Функция ДругиеДействительныеСотрудникиСотрудников(МассивСотрудников)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	ДругиеСотрудники.Ссылка КАК ДругойСотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО Сотрудники.Ссылка = СотрудникиПользователей.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК ДругиеСотрудникиПользователи
	|		ПО СотрудникиПользователей.Пользователь = ДругиеСотрудникиПользователи.Пользователь
	|		И СотрудникиПользователей.Сотрудник <> ДругиеСотрудникиПользователи.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК ДругиеСотрудники
	|		ПО ДругиеСотрудники.Ссылка = ДругиеСотрудникиПользователи.Сотрудник
	|		И ДругиеСотрудники.Действует = ИСТИНА
	|		И ДругиеСотрудники.ПометкаУдаления = ЛОЖЬ
	|ГДЕ
	|	Сотрудники.Ссылка В (&Сотрудники)";
	
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СотрудникиПоСотрудникам = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		МассивПоСотруднику = СотрудникиПоСотрудникам[Выборка.Сотрудник];
		Если МассивПоСотруднику = Неопределено Тогда
			МассивПоСотруднику = Новый Массив;
			СотрудникиПоСотрудникам[Выборка.Сотрудник] = МассивПоСотруднику;
		КонецЕсли;
		
		МассивПоСотруднику.Добавить(Выборка.ДругойСотрудник);
		
	КонецЦикла;
	
	Возврат СотрудникиПоСотрудникам;
	
КонецФункции

#КонецОбласти
