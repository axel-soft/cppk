//  Содержит код, реализующий алгоритм выполнения сценариев.

#Область ПрограммныйИнтерфейс

	// Разбирает строку запуска клиента, считывает сценарии и запускает их выполнение.
	//
	// Параметры:
	//  Параметры - Строка - Параметры запуска клиента, из командной строки.
	//
	Процедура ЗапуститьВыполнениеСценариев(Параметры) Экспорт
		
		НТТекущиеСценарии = Новый Массив(); // Массив Из Строка
		НТИндексТекущегоСценария = 0;
		Если ПустаяСтрока(Параметры) Тогда
			// Параметр сеанса все равно должен быть установлен:
			НагрузочноеТестированиеВызовСервера.УстановитьПризнакНагрузочногоТестирования(Ложь);
			Возврат;
		КонецЕсли;
		
		ПараметрыВРег = ВРег(Параметры);
		ПараметрыМассив = СтрРазделить(ПараметрыВРег, ";");
		
		// Найден признак запуска нагрузочного теста.
		Если ПараметрыМассив[0] = "RUNHLT" Тогда
			
			НагрузочноеТестированиеВызовСервера.УстановитьПризнакНагрузочногоТестирования(Истина);
			
			// Чтение файла с последовательностью сценариев.
			#Если ВебКлиент Тогда
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
				Для НомерСтроки = 1 По КоличествоСтрок Цикл
					ИмяСценария = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
					НТТекущиеСценарии.Добавить(ИмяСценария); //@skip-check dynamic-access-method-not-found
				КонецЦикла;
			#Иначе
				Файл = Новый ЧтениеТекста(ПараметрыМассив[1]);
				ИмяСценария = Файл.ПрочитатьСтроку();
				Пока ИмяСценария <> Неопределено Цикл
					НТТекущиеСценарии.Добавить(ИмяСценария); //@skip-check dynamic-access-method-not-found
					ИмяСценария = Файл.ПрочитатьСтроку();
				КонецЦикла;
			#КонецЕсли
			ЗапуститьВыполнениеТекущегоСценария();
		
		Иначе
			// Параметр сеанса все равно должен быть установлен:
			НагрузочноеТестированиеВызовСервера.УстановитьПризнакНагрузочногоТестирования(Ложь);
		КонецЕсли;
		
	КонецПроцедуры

	// Признак, что текущий сеанс - это нагрузочное тестирование. Вызывается для обхода
	// проверок, мешающих тестированию, чтобы подавить выдачу блокирующего сообщения в некоторых нестандартных случаях.
	// Чаще всего, для подавления "ПоказатьВопрос" или "ПоказатьПредупреждение", эти окна нельзя отследить сценарием
	// теста и программно закрыть.
	// 
	// Возвращаемое значение:
	//  Булево -
	Функция ЭтоНагрузочноеТестирование() Экспорт
		
		Возврат ТипЗнч(НТТекущийСценарий) = Тип("Массив")
			И НТТекущийСценарий.Количество() > 0
			И НТИндексТекущегоСценария <= НТТекущиеСценарии.ВГраница(); //@skip-check dynamic-access-method-not-found
		
	КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

	// Выполняет переход к следующему шагу сценария.
	// 
	// Возвращаемое значение:
	//  Булево
	//
	Функция ПерейтиКСледующемуШагуСценария() Экспорт
		
		НТИндексТекущегоШагаСценария = НТИндексТекущегоШагаСценария + 1;
		Возврат ВыполнитьТекущийШагСценария();
		
	КонецФункции
	
	// Случайное число сразу, обертка для быстрого получения случайных чисел.
	// 
	// Параметры:
	//  От - Число - Нижняя граница от 0 до 2^32-1
	//  До - Число - Верхняя граница от 0 до 2^32-1
	// 
	// Возвращаемое значение:
	//  Число - Случайное число в заданном диапазоне
	Функция СлучайноеЧислоСразу(От, До) Экспорт
		
		Если От = До Тогда
			Возврат От;
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			Разность = До - От;
			Возврат От + ТекущаяУниверсальнаяДатаВМиллисекундах() % (Разность + 1); 
		#Иначе
			ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
			Возврат ГСЧ.СлучайноеЧисло(От, До);
		#КонецЕсли
		
	КонецФункции
	
	// Возвращает текущий шаг сценария.
	// 
	// Возвращаемое значение:
	//  См. НагрузочноеТестирование.НовыйШагСценария
	Функция ТекущийШагСценария() Экспорт
		
		Если НТИндексТекущегоШагаСценария > НТТекущийСценарий.ВГраница() Тогда //@skip-check dynamic-access-method-not-found
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат НТТекущийСценарий[НТИндексТекущегоШагаСценария];
		
	КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
	// Выполняет текущий шаг сценария. Если шагов в сценарии нет, то запускает выполнение
	// следующего сценария.
	// 
	// Возвращаемое значение:
	//  Булево - Результат выполнения шага.
	Функция ВыполнитьТекущийШагСценария()
		
		ТекущийШагСценария = ТекущийШагСценария(); // См. НагрузочноеТестирование.НовыйШагСценария
		Если ТекущийШагСценария = Неопределено Тогда
			// Сценарий кончился, переходим к следующему в файле
			НТИндексТекущегоСценария = НТИндексТекущегоСценария + 1;
			ЗапуститьВыполнениеТекущегоСценария();
			Возврат Истина;
		КонецЕсли;
		
		ШагВыполнен = Вычислить("НагрузочноеТестированиеДействияКлиент.Действие_" + ТекущийШагСценария.Действие + "()");
		
		Если ШагВыполнен Тогда
			ПодключитьОбработчикОжидания("Обработчик_ПерейтиКСледующемуШагуСценария", ТекущийШагСценария.Пауза, Истина);
		Иначе
			НагрузочноеТестированиеВызовСервера.УстановитьПризнакНагрузочногоТестирования(Ложь);
			ВызватьИсключение НСтр("ru = 'Во время тестирования произошла ошибка, выполнение теста прервано. 
			|См. служебные сообщения. Возможно требуется сделать некоторые настройки в информационной базе.'");
		КонецЕсли;
		
		Возврат Истина;
		
	КонецФункции
	
	// Запускает выполнение текущего сценария.
	Процедура ЗапуститьВыполнениеТекущегоСценария()
		
		Если НТИндексТекущегоСценария > НТТекущиеСценарии.ВГраница() Тогда
			// Все сценарии кончились - завершение тестирования:
			НагрузочноеТестированиеВызовСервера.ЗаписьВЖурналОРезультате(Ложь);
			НагрузочноеТестированиеВызовСервера.УстановитьПризнакНагрузочногоТестирования(Ложь);
			Возврат;
		КонецЕсли;
		
		ИмяСценария = НТТекущиеСценарии[НТИндексТекущегоСценария]; // Строка
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Новый сценарий'"),
			Неопределено,
			СтрШаблон(НСтр("ru = 'Номер %1 из %2 ""%3""'"), 
				НТИндексТекущегоСценария + 1, НТТекущиеСценарии.Количество(), ИмяСценария),
			БиблиотекаКартинок.Информация);
		
		Сценарий = Вычислить("НагрузочноеТестированиеСценарииВызовСервера." + ИмяСценария + "()");
		
		Если Сценарий = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НТТекущийСценарий = Сценарий;
		НТИндексТекущегоШагаСценария = 0;
		ВыполнитьТекущийШагСценария();
		
	КонецПроцедуры
	
#КонецОбласти
