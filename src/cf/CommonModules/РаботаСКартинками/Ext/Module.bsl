#Область ПрограммныйИнтерфейс

// Собирает картинки в одну вертикально.
//
// Параметры:
//   ИсходныеКартинки - Массив - массив строк или двоичных данных с исходными картинками.
//   Формат - Строка - расширение формата.
//
// Возвращаемое значение:
//   Строка - путь к картинке, являющейся сборкой исходных по вертикали.
//
Функция СобратьКартинки(ИсходныеКартинки, Формат) Экспорт
	
	ПутьНовогоФайла = ПолучитьИмяВременногоФайла(Формат);
	ФайлыКУдалению = Новый Массив;
	
	ПараметрыConvert = Новый Массив;
	Для Каждого ИсходнаяКартинка Из ИсходныеКартинки Цикл
		Если ТипЗнч(ИсходнаяКартинка) = Тип("ДвоичныеДанные") Тогда
			ПутьИсходногоФайла = ПолучитьИмяВременногоФайла(Формат);
			ИсходнаяКартинка.Записать(ПутьИсходногоФайла);
			ФайлыКУдалению.Добавить(ПутьИсходногоФайла);
		ИначеЕсли ТипЗнч(ИсходнаяКартинка) = Тип("Строка") Тогда
			ПутьИсходногоФайла = ИсходнаяКартинка;
		КонецЕсли;
		ПараметрыConvert.Добавить(ПутьИсходногоФайла);
	КонецЦикла;
	
	Параметры = СтрШаблон("convert %1 -append %2",
		СтрСоединить(ПараметрыConvert, " "),
		ПутьНовогоФайла);
		
	НоваяВерсияIM = ВерсияImageMagickНовая(); // Булево
	Если НоваяВерсияIM Тогда
		Параметры = СтрЗаменить(Параметры, "convert", "");	
	КонецЕсли;	
	
	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ВременнаяПапкаДляРазархивирования);
	ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "cnv.bat";

	ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла,, ВременнаяПапкаДляРазархивирования);
	
	Возврат ПутьНовогоФайла;
	
КонецФункции

Функция КачествоПреобразованияPDFДляПредпросмотра() Экспорт
	
	Возврат ФайловыеФункцииПовтИсп.КачествоПреобразованияPDFДляПредпросмотра();
	
КонецФункции

// Обновит константу ВерсияImageMagick (вычислив из командной строки)
// 
Процедура ОбновитьВерсиюImageMagick() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ВерсияImageMagick = ПолучитьВерсиюImageMagickКоманднойСтрокой();
	Константы.ВерсияImageMagick.Установить(ВерсияImageMagick);
	
КонецПроцедуры	

// Преобразует pdf в массив png
// 
// Параметры:
//  ИмяФайлаPdf  - Строка
//  ВременнаяПапкаДляРазархивирования  -Строка
//  DPI - число
// 
// Возвращаемое значение:
//  Массив из Строка - Преобразовать pdf в png
Функция ПреобразоватьPdfВPng(ИмяФайлаPdf, ВременнаяПапкаДляРазархивирования, DPI = 0) Экспорт
	
	Если DPI = 0 Тогда
		DPI = КачествоПреобразованияPDFДляПредпросмотра();
	КонецЕсли;	      
	
	НоваяВерсияIM = ВерсияImageMagickНовая(); // Булево
	
	МассивПутейPng = Новый Массив;
	
	ПутьНовогоФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "res.png";
	ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "cnv.bat";
	ФайлыКУдалению = Новый Массив;
	
	Параметры = СтрШаблон("convert -density DPI %1 -strip -quality 0 %2",
		ИмяФайлаPdf,
		ПутьНовогоФайла);
	Параметры = СтрЗаменить(Параметры, "DPI", Строка(DPI));	
	
	Если НоваяВерсияIM Тогда
		Параметры = СтрЗаменить(Параметры, "convert", "");	
	КонецЕсли;	
	
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла, , ВременнаяПапкаДляРазархивирования);
	
	МассивФайлов = НайтиФайлы(ВременнаяПапкаДляРазархивирования, "res*.png");
	
	МассивПутей = Новый Массив;
	МассивСтруктур = Новый Массив;
	
	// отсортируем по дате
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПутьФайла = Файл.ПолноеИмя;
		
		СтруктураФайла = Новый Структура("ПутьФайла, ИмяБезРасширения");
		СтруктураФайла.ПутьФайла = ПутьФайла;
		СтруктураФайла.ИмяБезРасширения = Файл.ИмяБезРасширения;
		
		МассивСтруктур.Добавить(СтруктураФайла);
		
	КонецЦикла;	
	
	ОбщегоНазначенияДокументооборотВызовСервера.СортироватьМассивПоЧислам(МассивСтруктур, МассивПутей);
	
	Для Каждого ПутьФайла Из МассивПутей Цикл
		МассивПутейPng.Добавить(ПутьФайла);
	КонецЦикла;	
	
	Возврат МассивПутейPng;

КонецФункции

// Преобразует массив png в pdf 
Процедура ПреобразоватьPngВPdf(МассивНовыхPng, ИмяФайлаPdfНовое, ИмяBatФайла = "", 
	ВременнаяПапкаДляРазархивирования = Неопределено) Экспорт
	
	ФайлыКУдалению = Новый Массив;
	
	ПараметрыConvert = Новый Массив;
	Для Каждого ПутьИсходногоФайла Из МассивНовыхPng Цикл
		ПараметрыConvert.Добавить(ПутьИсходногоФайла);
	КонецЦикла;
	
	Параметры = СтрШаблон("convert %1 %2",
		СтрСоединить(ПараметрыConvert, " "),
		ИмяФайлаPdfНовое);
		
	НоваяВерсияIM = ВерсияImageMagickНовая(); // Булево
	Если НоваяВерсияIM Тогда
		Параметры = СтрЗаменить(Параметры, "convert", "");	
	КонецЕсли;	
		
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла,,ВременнаяПапкаДляРазархивирования);

КонецПроцедуры

// Получает фрагмент изображения и сохраняет его в отдельном файле.
//
// Параметры:
//  ФайлИзображение - Строка - путь к файлу изображения.
//  Ширина - Число - ширина получаемого фрагмента в пикселях.
//  Высота - Число - высота фрагмента в пикселях.
//  X - Число - координата X левого верхнего угла фрагмента.
//  У - Число - координата Y левого верхнего угла фрагмента.
//  ФайлФрагмент - Строка - путь к файлу, по которому будет сохранен фрагмент.
//
Процедура ПолучитьФрагментИзображения(ФайлИзображение, Ширина, Высота, X, Y, ФайлФрагмент) Экспорт
	
	Картинка = Новый Картинка(ФайлИзображение);
	
	ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(Картинка);
	ОбрабатываемаяКартинка.ВыделитьОбласть(X, Y, Ширина, Высота);
	КартинкаРезультат = ОбрабатываемаяКартинка.ПолучитьКартинку();
	КартинкаРезультат.Записать(ФайлФрагмент);
	
КонецПроцедуры

// Возвращает размер изображения.
//
// Для многостраничных tif из картинок возвращается размер первой страницы.
// Для файлов, не являющихся изображениями, вызывается исключение.
//
// Параметры:
//  ФайлИзображение - Строка - путь к файлу изображения.
//
// Возвращаемое значение:
//  Структура
//   * Высота - Число - высота изображения в пикселях.
//   * Ширина - Число - ширина изображения в пикселях.
//   * yDPI - Число - dpi изображения по высоте.
//   * xDPI - Число - dpi изображения по ширине.
//
Функция РазмерИзображения(ФайлИзображение) Экспорт
	
	Файл = Новый Файл(ФайлИзображение);
	РасширениеФайла = НРег(СтрЗаменить(Файл.Расширение, ".", ""));
	Если Не РаботаСФайламиКлиентСервер.ЭтоРасширениеКартинки(РасширениеФайла) Тогда
		ВызватьИсключение 
			НСтр("ru = 'Получение размера не возможно. Файл не является изображением.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
		                           
	Результат = Новый Структура;
	Результат.Вставить("Высота", 0);
	Результат.Вставить("Ширина", 0);
	Результат.Вставить("yDPI", 0);
	Результат.Вставить("xDPI", 0);     
	
	Картинка = Новый Картинка(ФайлИзображение);
	Результат.Высота = Картинка.Высота();
	Результат.Ширина = Картинка.Ширина();
	Результат.xDPI = Картинка.ПлотностьПоГоризонтали();
	Результат.yDPI = Картинка.ПлотностьПоВертикали();
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для получения фрагмента изображения со штрихкодом.
//
// Возвращаемое значение:
//   Структура:
//     * ФайлИзображение - Строка - путь к файлу изображения.
//     * ФайлФрагмент - Строка - путь к файлу, в который будет сохранен фрагмент.
//     * ПоложенияШтрихКода - ПеречислениеСсылка.ПоложенияШтрихКода - положение штрихкода в изображении. 
//     * ШиринаЗоныШтрихКода - Число - ширина зоны штрихкода в мм. имеет смсыл при ПоложенияШтрихКода.ТочноеПоложение.
//     * ВысотаЗоныШтрихКода - Число - высота зоны штрихкода в мм. имеет смсыл при ПоложенияШтрихКода.ТочноеПоложение.
//     * ОтступСлева - Число - Отступ слева от зоны штрихкода в мм. имеет смсыл при ПоложенияШтрихКода.ТочноеПоложение.
//     * ОтступСверху - Число - Отступ справа от зоны штрихкода в мм. имеет смсыл при ПоложенияШтрихКода.ТочноеПоложение.
//
Функция ПараметрыПолученияФрагментаСоШтрихкодом() Экспорт
	
	ПараметрыФрагмента = Новый Структура;
	ПараметрыФрагмента.Вставить("ФайлИзображение", "");
	ПараметрыФрагмента.Вставить("ФайлФрагмент", "");
	ПараметрыФрагмента.Вставить("ПоложенияШтрихКода", Перечисления.ПоложенияШтрихКода.НеЗадано);
	ПараметрыФрагмента.Вставить("ШиринаЗоныШтрихКода", 0);
	ПараметрыФрагмента.Вставить("ВысотаЗоныШтрихКода", 0);
	ПараметрыФрагмента.Вставить("ОтступСлева", 0);
	ПараметрыФрагмента.Вставить("ОтступСверху", 0);
	
	Возврат ПараметрыФрагмента;
	
КонецФункции

// Получает фрагмент изображения со штрихкодом.
//
// Если параметры изображения не удалось определить или размеры фрагмента и отступы
// не соответствуют изображению, то вызывается исключение.
//
// Параметры:
//  ПараметрыФрагмента - Структура - см. ПараметрыПолученияФрагментаСоШтрихкодом
//
Процедура ПолучитьФрагментИзображенияСоШтрихкодом(ПараметрыФрагмента) Экспорт
	
	Файл = Новый Файл(ПараметрыФрагмента.ФайлИзображение);
	РасширениеФайла = НРег(СтрЗаменить(Файл.Расширение, ".", ""));
	Если Не РаботаСФайламиКлиентСервер.ЭтоРасширениеКартинки(РасширениеФайла) Тогда
		ВызватьИсключение 
			НСтр("ru = 'Получение фрагмента не возможно. Файл не является изображением.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	УдалитьФайлы(ПараметрыФрагмента.ФайлФрагмент);
	
	Если ПараметрыФрагмента.ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.НеЗадано Тогда
		ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ЛевыйВерхнийУгол;
	Иначе
		ПоложенияШтрихКода = ПараметрыФрагмента.ПоложенияШтрихКода;
	КонецЕсли;
	
	РазмерИзображения = РазмерИзображения(ПараметрыФрагмента.ФайлИзображение);
	
	Если РазмерИзображения.Ширина = 0
		Или РазмерИзображения.Высота = 0
		Или РазмерИзображения.xDPI = 0
		Или РазмерИзображения.yDPI = 0 Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Не удалось определить параметры изображения.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
		
	ДюймВмм = 25.4;
	
	// если указан угол  - то ширину и высоту считаем фиксированными - 45 и 25 мм.
	ШиринаВммПоУмолчанию = 45;
	ВысотаВммПоУмолчанию = 25;
	
	ШиринаЗоныШтрихКода = 0;
	ВысотаЗоныШтрихКода = 0;
	X = 0;
	Y = 0;
	
	Если ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ТочноеПоложение Тогда
		
		ШиринаЗоныШтрихКода = Окр(
			ПараметрыФрагмента.ШиринаЗоныШтрихКода / ДюймВмм * РазмерИзображения.xDPI + 0.5,
			0,
			РежимОкругления.Окр15как10);
			
		ВысотаЗоныШтрихКода = Окр(
			ПараметрыФрагмента.ВысотаЗоныШтрихКода / ДюймВмм * РазмерИзображения.yDPI + 0.5,
			0,
			РежимОкругления.Окр15как10);
				
		X = Окр(ПараметрыФрагмента.ОтступСлева / ДюймВмм * РазмерИзображения.xDPI + 0.5,
			0,
			РежимОкругления.Окр15как10);
				
		Y = Окр(ПараметрыФрагмента.ОтступСверху / ДюймВмм * РазмерИзображения.yDPI + 0.5,
			0,
			РежимОкругления.Окр15как10);
		
	Иначе
						
		ШиринаЗоныШтрихКода = Окр(
			ШиринаВммПоУмолчанию / ДюймВмм * РазмерИзображения.xDPI + 0.5,
			0,
			РежимОкругления.Окр15как10);
			
		ВысотаЗоныШтрихКода = Окр(
			ВысотаВммПоУмолчанию / ДюймВмм * РазмерИзображения.yDPI + 0.5,
			0,
			РежимОкругления.Окр15как10);
			
		Если ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ЛевыйВерхнийУгол Тогда
			X = 1;
			Y = 1;
		ИначеЕсли ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ПравыйВерхнийУгол Тогда
			X = РазмерИзображения.Ширина - ШиринаЗоныШтрихКода - 1;
			Y = 1;
		ИначеЕсли ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ЛевыйНижнийУгол Тогда
			X = 1;
			Y = РазмерИзображения.Высота - ВысотаЗоныШтрихКода - 1;
		ИначеЕсли ПоложенияШтрихКода = Перечисления.ПоложенияШтрихКода.ПравыйНижнийУгол Тогда
			X = РазмерИзображения.Ширина - ШиринаЗоныШтрихКода - 1;
			Y = РазмерИзображения.Высота - ВысотаЗоныШтрихКода - 1;
		КонецЕсли;
		
	КонецЕсли;
		
	Если X < 0 Или X > РазмерИзображения.Ширина
		Или Y < 0 Или Y > РазмерИзображения.Высота
		Или ШиринаЗоныШтрихКода <= 0 Или ВысотаЗоныШтрихКода <= 0
		Или X + ШиринаЗоныШтрихКода > РазмерИзображения.Ширина
		Или Y + ВысотаЗоныШтрихКода > РазмерИзображения.Высота Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Размеры фрагмента со штрихкодом и отступы не соответствуют размеру изображения.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
		
	ПолучитьФрагментИзображения(
		ПараметрыФрагмента.ФайлИзображение,
		ШиринаЗоныШтрихКода, ВысотаЗоныШтрихКода, X, Y,
		ПараметрыФрагмента.ФайлФрагмент);

КонецПроцедуры

// Уменьшить штамп.
// 
// Параметры:
//  ИмяФайлаШтампа - Строка
//  ЧислоПодписей - Число
//  ВременнаяПапкаДляРазархивирования - Строка
Процедура УменьшитьШтамп(ИмяФайлаШтампа, ЧислоПодписей, ВременнаяПапкаДляРазархивирования) Экспорт
	
	КартинкаШтампа = Новый Картинка(ИмяФайлаШтампа);
	ТекВысота = КартинкаШтампа.Высота();
	ВысотаШтампа = Цел(ТекВысота * 140 / 310);  // перевод из старого значения 140  (для высоты картинки в пикселах 310);
	КартинкаШтампа = Неопределено;
	
	ФайлыКУдалению = Новый Массив;
	НоваяВысота = ЧислоПодписей * ВысотаШтампа;
	
	Параметры = СтрШаблон("mogrify -resize 600x%1 %2",
		Формат(НоваяВысота, "ЧГ=0"), // ЧГ=0  без группировки по 3
		ИмяФайлаШтампа);
		
	ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "cnv.bat";	
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла,,ВременнаяПапкаДляРазархивирования); 
	
КонецПроцедуры

// Увеличить штамп.
// 
// Параметры:
//  ИмяФайлаШтампа - Строка
//  ЧислоПодписей - Число 
//  ВременнаяПапкаДляРазархивирования - Строка
Процедура УвеличитьШтамп(ИмяФайлаШтампа, ЧислоПодписей, ВременнаяПапкаДляРазархивирования) Экспорт
	
	КартинкаШтампа = Новый Картинка(ИмяФайлаШтампа);
	ТекВысота = КартинкаШтампа.Высота();
	ВысотаШтампа = Цел(ТекВысота * 140 / 310);  // перевод из старого значения 140  (для высоты картинки в пикселах 310);
	КартинкаШтампа = Неопределено;
	
	ФайлыКУдалению = Новый Массив;
	НоваяВысота = ЧислоПодписей * ВысотаШтампа * 4;
	
	Параметры = СтрШаблон("mogrify -resize 2400x%1 %2",
		Формат(НоваяВысота, "ЧГ=0"), // ЧГ=0  без группировки по 3
		ИмяФайлаШтампа);
	
	ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "cnv.bat";	
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла,,ВременнаяПапкаДляРазархивирования); 
	
КонецПроцедуры

// Уменьшить регистрационный штамп.
// 
// Параметры:
//  ИмяФайлаШтампа - Строка
Процедура УменьшитьРегШтамп(ИмяФайлаШтампа, ВременнаяПапкаДляРазархивирования) Экспорт
	
	ФайлыКУдалению = Новый Массив;
	
	Параметры = СтрШаблон("mogrify -resize x32 %1",
		ИмяФайлаШтампа);
	
	ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "cnv.bat";
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла,, ВременнаяПапкаДляРазархивирования);	
	
КонецПроцедуры

// Увеличить регистрационный штамп.
// 
// Параметры:
//  ИмяФайлаШтампа - Строка
Процедура УвеличитьРегШтамп(ИмяФайлаШтампа, ВременнаяПапкаДляРазархивирования) Экспорт
	
	ФайлыКУдалению = Новый Массив;
	
	Параметры = СтрШаблон("mogrify -resize 960x130 %1",
		ИмяФайлаШтампа);
	
	ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "cnv.bat";
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла,, ВременнаяПапкаДляРазархивирования);

КонецПроцедуры

// Увеличить штрихкод.
// 
// Параметры:
//  ИмяФайлаШтампа - Строка
Процедура УвеличитьШтрихкод(ИмяФайлаШтампа, ВременнаяПапкаДляРазархивирования) Экспорт
	
	ФайлыКУдалению = Новый Массив;
	
	Параметры = СтрШаблон("mogrify -resize 800x280 %1",
		ИмяФайлаШтампа);
	
	ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "cnv.bat";
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла,, ВременнаяПапкаДляРазархивирования);

КонецПроцедуры

// Накладывает на картинки штамп.
// 
// Параметры:
//  ПутьPng - Строка - Путь к файлу с нужной страницей документа, на которую накладываем рег.штамп.
//  ПутиСПоложениями - Массив из см. РаботаСЭП.НовыйПутьИПоложение.
//  ВременнаяПапкаДляРазархивирования - Строка - Временная папка для разархивирования
//  Счетчик - Число - Номер текущей страницы разобранного на картинки документа.
//  РасположениеШтампаЭПВPdf - ПеречислениеСсылка.МестаВставкиКартинки - Расположение штампа ЭПВPdf
//  МассивВысотКартинок - Массив из Число - Массив высот картинок
// 
// Возвращаемое значение:
//  Строка - Путь к созданному файлу
Функция НаложитьШтамп(ПутьPng, ПутиСПоложениями, 
	ВременнаяПапкаДляРазархивирования, Счетчик,
	РасположениеШтампаЭПВPdf, МассивВысотКартинок) Экспорт
	
	ПутьНовогоФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + СтрШаблон("res%1.png", Счетчик);
	ИсходныйФайл = ПутьPng;
	
	НомерШтампа = 0;
	СмещениеПоYНакопленное = 0;
	
	Для Каждого ПутьПоложение Из ПутиСПоложениями Цикл
		
		ИмяФайлаШтампа = ПутьПоложение.Путь;
		Положение = ПутьПоложение.Положение; // см. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
		
		ТекВысота = МассивВысотКартинок[НомерШтампа];
		ВысотаШтампа = Цел(ТекВысота * 140 / 310);  // перевод из старого значения 140  (для высоты картинки в пикселах 310);
	
		ОтступX = ""; //как строка
		ОтступY = "";
		
		ПоложениеШтампаСтрока = "NorthWest";
		ЕстьПоложение = МЭДО.ЭтоЗаполненноеПоложениеИзображения(Положение);
		Если ЕстьПоложение Тогда
			
			РазмерыШтампа = ВсеРазмерыКартинки(ИмяФайлаШтампа);
			РазмерыСтраницы = ВсеРазмерыКартинки(ПутьPng);
			Если РазмерыСтраницы.Нулевые Тогда
				Возврат ПутьPng; // Ничего не преобразуем, картинка страницы остается самой собой.
			КонецЕсли;
			
			// Плотность у картинки не всегда правильно определяется, через пропорцию нужно высчитать правильную 
			// размер штампа. Небольшой погрещностью можно пренебречь.
			НоваяШирина = Окр(Положение.Ширина / РазмерыСтраницы.ШиринаМм * РазмерыСтраницы.ШиринаПикс);
			НоваяВысота = Окр(Положение.Высота / РазмерыСтраницы.ВысотаМм * РазмерыСтраницы.ВысотаПикс);
			Если МодульЧисла(НоваяШирина - РазмерыШтампа.ШиринаПикс) / РазмерыШтампа.ШиринаПикс > 0.02
				Или МодульЧисла(НоваяВысота - РазмерыШтампа.ВысотаПикс) / РазмерыШтампа.ВысотаПикс > 0.02 Тогда
				// Масштабируем и приводим штамп к такой-же плотности, как саму страницу:
				Dpi = ФайловыеФункцииПовтИсп.КачествоПреобразованияPDFДляПредпросмотра();
				МасштабироватьКартинку(ИмяФайлаШтампа, НоваяШирина, НоваяВысота, Dpi, ВременнаяПапкаДляРазархивирования);
			КонецЕсли;
			
			ПоложениеШтампаСтрока = "NorthWest";
			ОтступX = "+" + Формат(Положение.Слева * РазмерыСтраницы.ПлотностьПоГоризонтали / 25.4, "ЧДЦ=0; ЧГ=0;");
			ОтступY = "+" + Формат(Положение.Сверху * РазмерыСтраницы.ПлотностьПоВертикали / 25.4, "ЧДЦ=0; ЧГ=0;");
		ИначеЕсли РасположениеШтампаЭПВPdf = Перечисления.МестаВставкиКартинки.ЛевыйВерхний Тогда
			ПоложениеШтампаСтрока = "NorthWest";
			ОтступX = "+120";
			//ОтступY =  "+120";
			ОтступY =  СтрШаблон("+%1", Формат(120 + СмещениеПоYНакопленное, "ЧГ=0;"));
		ИначеЕсли РасположениеШтампаЭПВPdf = Перечисления.МестаВставкиКартинки.ЛевыйНижний Тогда
			ПоложениеШтампаСтрока = "SouthWest";
			ОтступX = "+120";
			ОтступY =  СтрШаблон("+%1", Формат(120 + СмещениеПоYНакопленное, "ЧГ=0;"));
		ИначеЕсли РасположениеШтампаЭПВPdf = Перечисления.МестаВставкиКартинки.ПравыйВерхний Тогда
			ПоложениеШтампаСтрока = "NorthEast";
			ОтступX = "+60";
			ОтступY =  СтрШаблон("+%1", Формат(120 + СмещениеПоYНакопленное, "ЧГ=0;"));
		ИначеЕсли РасположениеШтампаЭПВPdf = Перечисления.МестаВставкиКартинки.ПравыйНижний Тогда
			ПоложениеШтампаСтрока = "SouthEast";
			ОтступX = "+60";
			ОтступY =  СтрШаблон("+%1", Формат(120 + СмещениеПоYНакопленное, "ЧГ=0;"));
		КонецЕсли;	
		
		ФайлыКУдалению = Новый Массив;
		
		Параметры = СтрШаблон("composite -dissolve 80 -colorspace rgb -gravity %1 -geometry %2%3 %4 %5 %6",
			ПоложениеШтампаСтрока,
			ОтступX,
			ОтступY,
			ИмяФайлаШтампа,
			ИсходныйФайл,
			ПутьНовогоФайла);    
			
		ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "cnv.bat";
		
		ЗапуститьImageMagick(Параметры, ФайлыКУдалению,ИмяBatФайла,,ВременнаяПапкаДляРазархивирования);
		
		НомерШтампа = НомерШтампа + 1;
		ИсходныйФайл = ПутьНовогоФайла;
		
		Если Не ЕстьПоложение Тогда
			СмещениеПоYНакопленное = СмещениеПоYНакопленное + ВысотаШтампа;
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьФайлы(ПутьPng);
	
	Возврат ПутьНовогоФайла;
	
КонецФункции

// Накладывает на картинки рег штамп.
// 
// Параметры:
//  ПутьPng - Строка - Путь к файлу с нужной страницей документа, на которую накладываем рег.штамп.
//  ИмяФайлаРегШтамп - Строка - Имя файла рег штамп
//  ВременнаяПапкаДляРазархивирования - Строка - Временная папка для разархивирования
//  Положение - См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
//  НастройкиРегНомера - См. ШтрихкодированиеКлиентСервер.НовыеНастройкиРегНомера
//  НомерШтампа - Число - Для уникальности имени файла
// 
// Возвращаемое значение:
//  Строка - Путь к созданному файлу
Функция НаложитьРегШтамп(
	ПутьPng, ИмяФайлаРегШтамп, ВременнаяПапкаДляРазархивирования, Положение, НастройкиРегНомера, НомерШтампа) Экспорт
	
	ПутьНовогоФайла = ВременнаяПапкаДляРазархивирования 
		+ ПолучитьРазделительПути() + СтрШаблон("regNew%1.png", НомерШтампа);
	ИсходныйФайл = ПутьPng;
	
	ОтступX = ""; //как строка
	ОтступY = "";
	
	ПоложениеШтампаСтрока = "NorthWest";
	Если МЭДО.ЭтоЗаполненноеПоложениеИзображения(Положение) Тогда
		
		РазмерыШтампа = ВсеРазмерыКартинки(ИмяФайлаРегШтамп);
		РазмерыСтраницы = ВсеРазмерыКартинки(ПутьPng);
		Если РазмерыСтраницы.Нулевые Тогда
			Возврат ПутьPng; // Ничего не преобразуем, картинка страницы остается самой собой.
		КонецЕсли;
		
		// Плотность у картинки не всегда правильно определяется, через пропорцию нужно высчитать правильную 
		// размер штампа. Небольшой погрещностью можно пренебречь.
		НоваяШирина = Окр(Положение.Ширина / РазмерыСтраницы.ШиринаМм * РазмерыСтраницы.ШиринаПикс);
		НоваяВысота = Окр(Положение.Высота / РазмерыСтраницы.ВысотаМм * РазмерыСтраницы.ВысотаПикс);
		Если МодульЧисла(НоваяШирина - РазмерыШтампа.ШиринаПикс) / РазмерыШтампа.ШиринаПикс > 0.02
			Или МодульЧисла(НоваяВысота - РазмерыШтампа.ВысотаПикс) / РазмерыШтампа.ВысотаПикс > 0.02 Тогда
			// Масштабируем и приводим штамп к такой-же плотности, как саму страницу:
			Dpi = ФайловыеФункцииПовтИсп.КачествоПреобразованияPDFДляПредпросмотра();
			МасштабироватьКартинку(ИмяФайлаРегШтамп, НоваяШирина, НоваяВысота, Dpi, ВременнаяПапкаДляРазархивирования);
		КонецЕсли;
		
		ПоложениеШтампаСтрока = "NorthWest";
		ОтступX = "+" + Формат(Положение.Слева * РазмерыСтраницы.ПлотностьПоГоризонтали / 25.4, "ЧДЦ=0; ЧГ=0;");
		ОтступY = "+" + Формат(Положение.Сверху * РазмерыСтраницы.ПлотностьПоВертикали / 25.4, "ЧДЦ=0; ЧГ=0;");
		
	Иначе
		РасположениеШтампа = НастройкиРегНомера.ПоложениеНаСтранице;
		
		Если РасположениеШтампа = Перечисления.МестаВставкиКартинки.ЛевыйВерхний Тогда
			ПоложениеШтампаСтрока = "NorthWest";
			ОтступX = "+120";
			ОтступY =  СтрШаблон("+%1", Формат(120, "ЧГ=0;"));
		ИначеЕсли РасположениеШтампа = Перечисления.МестаВставкиКартинки.ЛевыйНижний Тогда
			ПоложениеШтампаСтрока = "SouthWest";
			ОтступX = "+120";
			ОтступY =  СтрШаблон("+%1", Формат(120, "ЧГ=0;"));
		ИначеЕсли РасположениеШтампа = Перечисления.МестаВставкиКартинки.ПравыйВерхний Тогда
			ПоложениеШтампаСтрока = "NorthEast";
			ОтступX = "+60";
			ОтступY =  СтрШаблон("+%1", Формат(120, "ЧГ=0;"));
		ИначеЕсли РасположениеШтампа = Перечисления.МестаВставкиКартинки.ПравыйНижний Тогда
			ПоложениеШтампаСтрока = "SouthEast";
			ОтступX = "+60";
			ОтступY =  СтрШаблон("+%1", Формат(120, "ЧГ=0;"));
		ИначеЕсли РасположениеШтампа = Перечисления.МестаВставкиКартинки.ПроизвольноеПоложение Тогда
			ПоложениеШтампаСтрока = "NorthWest";
			ОтступX = "+" + СокрЛП(Строка(НастройкиРегНомера.СмещениеПоГоризонтали));
			ОтступY = "+" + СокрЛП(Строка(НастройкиРегНомера.СмещениеПоВертикали));
		КонецЕсли;
		
	КонецЕсли;
	
	ФайлыКУдалению = Новый Массив;
	
	Параметры = СтрШаблон("composite -colorspace rgb -gravity %1 -geometry %2%3 %4 %5 %6",
		ПоложениеШтампаСтрока,
		ОтступX,
		ОтступY,
		ИмяФайлаРегШтамп,
		ИсходныйФайл,
		ПутьНовогоФайла);
		
	ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "cnv.bat";
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению,ИмяBatФайла,,ВременнаяПапкаДляРазархивирования);
	
	УдалитьФайлы(ПутьPng);
	
	Возврат ПутьНовогоФайла;
	
КонецФункции

// Накладывает на картинки штрихкод
// 
// Параметры:
//  ПутьPng - Строка -
//  ИмяФайлаШтрихкод - Строка -
//  ВременнаяПапкаДляРазархивирования - строка -
// 
// Возвращаемое значение:
//  Строка - Путь к временному файлу со страницей с наложенным штрихкодом
Функция НаложитьШтрихкод(ПутьPng, ИмяФайлаШтрихкод, ВременнаяПапкаДляРазархивирования) Экспорт
	
	ПутьНовогоФайла = ВременнаяПапкаДляРазархивирования 
		+ ПолучитьРазделительПути() + "barNew.png";
	ИсходныйФайл = ПутьPng;

	НастройкиШтрихкода = ШтрихкодированиеСервер.ПолучитьПерсональныеНастройкиПоложенияШтрихкодаНаСтранице();
	
	РасположениеШтампа = НастройкиШтрихкода.ПоложениеНаСтранице;
	
	ОтступX = ""; //как строка
	ОтступY = "";
	
	ПоложениеШтампаСтрока = "NorthWest";
	Если РасположениеШтампа = Перечисления.МестаВставкиКартинки.ЛевыйВерхний Тогда
		ПоложениеШтампаСтрока = "NorthWest";
		ОтступX = "+120";
		//ОтступY =  "+120";
		ОтступY =  СтрШаблон("+%1", Формат(120, "ЧГ=0;"));
	ИначеЕсли РасположениеШтампа = Перечисления.МестаВставкиКартинки.ЛевыйНижний Тогда
		ПоложениеШтампаСтрока = "SouthWest";
		ОтступX = "+120";
		ОтступY =  СтрШаблон("+%1", Формат(120, "ЧГ=0;"));
	ИначеЕсли РасположениеШтампа = Перечисления.МестаВставкиКартинки.ПравыйВерхний Тогда
		ПоложениеШтампаСтрока = "NorthEast";
		ОтступX = "+60";
		ОтступY =  СтрШаблон("+%1", Формат(120, "ЧГ=0;"));
	ИначеЕсли РасположениеШтампа = Перечисления.МестаВставкиКартинки.ПравыйНижний Тогда
		ПоложениеШтампаСтрока = "SouthEast";
		ОтступX = "+60";
		ОтступY =  СтрШаблон("+%1", Формат(120, "ЧГ=0;"));
		
	ИначеЕсли РасположениеШтампа = Перечисления.МестаВставкиКартинки.ПроизвольноеПоложение Тогда

		ПоложениеШтампаСтрока = "NorthWest";
		ОтступX = "+" + СокрЛП(Строка(НастройкиШтрихкода.СмещениеПоГоризонтали));
		ОтступY = "+" + СокрЛП(Строка(НастройкиШтрихкода.СмещениеПоВертикали));
				
	КонецЕсли;	
	
	ФайлыКУдалению = Новый Массив;
	
	Параметры = СтрШаблон("composite -colorspace rgb -gravity %1 -geometry %2%3 %4 %5 %6",
		ПоложениеШтампаСтрока,
		ОтступX,
		ОтступY,
		ИмяФайлаШтрихкод,
		ИсходныйФайл,
		ПутьНовогоФайла);
		
	ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "cnv.bat";	
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению,ИмяBatФайла,,ВременнаяПапкаДляРазархивирования);
	
	УдалитьФайлы(ПутьPng);
	
	Возврат ПутьНовогоФайла;
	
КонецФункции

// Возвращает строку в формате svg, содержащую штамп.
// 
// Параметры:
// 	ДанныеДляФормирования - см. НовыеДанныеДляФормированияШтампа
// 	Подписи - Массив из см. НовыеДанныеПодписиСУчетомДоверенности
// 	ТекстШтампа - Строка
// Возвращаемое значение:
// 	Строка
Функция ТекстШтампаЭП(ОписаниеЭП, ПрозрачныйФон)
	
	МакетЭП = ПолучитьОбщийМакет("ШаблонОтметкиЭП_svg");
	МакетЭП.КодЯзыкаМакета = Метаданные.Языки.Русский.КодЯзыка;
	
	Результат = МакетЭП.ПолучитьТекст();

	Если Не ПрозрачныйФон Тогда
		Результат = СтрЗаменить(Результат, 
			"<!-- ШтампЗаливка -->", 
			"<polygon points='1 349, 1 1, 1209 1, 1209 349, 1 349' fill='white' stroke='crimson' fill-opacity='1.0' />");	
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "%Сертификат%", Строка(ОписаниеЭП.Номер));	
	
	ДействителенСтрока = СтрШаблон(
				НСтр("ru = 'с %1 по %2'"),
				Формат(ОписаниеЭП.ДатаНачала, "ДФ=dd.MM.yyyy"),
				Формат(ОписаниеЭП.ДатаОкончания, "ДФ=dd.MM.yyyy"));                 
	Результат = СтрЗаменить(Результат, "%Действителен%", ДействителенСтрока);
	
	ВладелецСтрока = "";
	МассивСтрок = РазбитьНаСтрокиПоШирине(ОписаниеЭП.Владелец, 50); // 50 символов по ширине влезает
	
	НомерСтроки = 0;
	ПозицияY = 162;
	Для Каждого Строка Из МассивСтрок Цикл
		
		ТекСтрока = СтрШаблон("<text x=""260"" y=""%1"" style=""font-size:26pt;"">%2</text>",
			Формат(ПозицияY, "ЧРД=.; ЧГ=0"),
			Строка);
			
		ВладелецСтрока = ВладелецСтрока + Символы.ВК + ТекСтрока;
		
		НомерСтроки = НомерСтроки + 1;
		ПозицияY = ПозицияY + 40;
		Если НомерСтроки >= 4 Тогда // только 4 строки влезает
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
				
	Результат = СтрЗаменить(Результат, "<!-- ШтампВладелец -->", ВладелецСтрока);	

	Возврат Результат;
	
КонецФункции  

Функция РазбитьНаСтрокиПоШирине(Текст, МаксЧислоСимволовШирина)  
	
	МассивСтрок = Новый Массив;
	
	ТекТекст = Текст;   
	
	НомерИтерации = 0;
	
	Пока Истина Цикл
		
		НомерИтерации = НомерИтерации + 1;
		Если НомерИтерации > 1000 Тогда
			Прервать;
		КонецЕсли;	

		ПозицияПоследнегоРазделителя = 0; 
		НабранныйТекст = "";
		
		Для Поз = 1 По СтрДлина(ТекТекст) Цикл
			
			ТекСимвол = Сред(ТекТекст, Поз, 1);
			Если ТекСимвол = " " Или ТекСимвол = "," Тогда
				ПозицияПоследнегоРазделителя = Поз;
			КонецЕсли;	
			
			НабранныйТекст = НабранныйТекст + ТекСимвол;
			
			Если СтрДлина(НабранныйТекст) >= МаксЧислоСимволовШирина Тогда
				МассивСтрок.Добавить( Лев(НабранныйТекст, ПозицияПоследнегоРазделителя) ); // включая разделитель
				ТекТекст = Сред(ТекТекст, ПозицияПоследнегоРазделителя + 1);
				НабранныйТекст = "";
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НабранныйТекст) Тогда
			МассивСтрок.Добавить(НабранныйТекст);
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции	

// Формирует изображение штампа ЭП
//
// Параметры:
//   ОписаниеЭП - Структура со свойствами:
//     Номер - Строка - серийный номер
//     Владелец - Строка - владелец сертификата ЭП.
//     ДатаНачала - Дата - дата начала действия сертификата.
//     ДатаОкончания - Дата - дата окончания действия сертификата.
//   Формат - Строка - расширение формата.
//   ИтоговыйФорматPdf - Булево 
//
// Возвращаемое значение:
//   Строка - полный путь к картинке штампа ЭП.
//
Функция СформироватьШтампЭП(ОписаниеЭП, Формат = "PNG", ИтоговыйФорматPdf = Ложь) Экспорт
	
	ПрозрачныйФон = Истина; 
	Если ИтоговыйФорматPdf = Истина Тогда	
		ПрозрачныйФон = Ложь; 
	КонецЕсли;	
	
	ТекстШтампа = ТекстШтампаЭП(ОписаниеЭП, ПрозрачныйФон);
	
	Поток = Новый ПотокВПамяти();
	ЗаписьТекста = Новый ЗаписьТекста(Поток, "utf-8");
	ЗаписьТекста.Записать(ТекстШтампа);
	ЗаписьТекста.Закрыть();
	
	ДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	ШтампSvg = Новый Картинка(ДанныеФайла);
	ШтампPng = ШтампSvg.Преобразовать(ФорматКартинки.PNG);
	
	ДанныеФайлаPng = ШтампPng.ПолучитьДвоичныеДанные(); 
	Штамп = Новый Картинка(ДанныеФайлаPng, Истина);
	
	ПутьНовогоФайла = ПолучитьИмяВременногоФайла("PNG");
	Штамп.Записать(ПутьНовогоФайла);
	
	Возврат ПутьНовогоФайла;

КонецФункции

// Возвращает строку в формате svg, содержащую штамп.
// 
// Параметры:
// 	ДанныеДляФормирования - см. НовыеДанныеДляФормированияШтампа
// 	Подписи - Массив из см. НовыеДанныеПодписиСУчетомДоверенности
// 	ТекстШтампа - Строка
// Возвращаемое значение:
// 	Строка
Функция ТекстШтампаЭПСДоверенностью(ОписаниеЭП, ПрозрачныйФон)
	
	МакетЭП = ПолучитьОбщийМакет("ШаблонОтметкиЭПСДоверенностью_svg");
	МакетЭП.КодЯзыкаМакета = Метаданные.Языки.Русский.КодЯзыка;
	
	Результат = МакетЭП.ПолучитьТекст();

	Если Не ПрозрачныйФон Тогда
		Результат = СтрЗаменить(Результат, 
			"<!-- ШтампЗаливка -->", 
			"<polygon points='1 439, 1 1, 1209 1, 1209 439, 1 439' fill='white' stroke='crimson' fill-opacity='1.0' />");	
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "%Сертификат%", Строка(ОписаниеЭП.Номер));	
	Результат = СтрЗаменить(Результат, "%Доверенность%", Строка(ОписаниеЭП.ДанныеДоверенности.НомерДоверенности));	
	Результат = СтрЗаменить(Результат, "%Владелец%", Строка(ОписаниеЭП.Владелец));	
	
	ДействителенСтрока = СтрШаблон(
				НСтр("ru = 'с %1 по %2'"),
				Формат(ОписаниеЭП.ДатаНачала, "ДФ=dd.MM.yyyy"),
				Формат(ОписаниеЭП.ДатаОкончания, "ДФ=dd.MM.yyyy"));                 
	Результат = СтрЗаменить(Результат, "%Действителен%", ДействителенСтрока);
	
	ДоверительСтрока = "";
	МассивСтрок = РазбитьНаСтрокиПоШирине(ОписаниеЭП.ДанныеДоверенности.ДоверительПредставление, 50); // 50 символов по ширине влезает
	
	НомерСтроки = 0;
	ПозицияY = 252;
	Для Каждого Строка Из МассивСтрок Цикл
		
		ТекСтрока = СтрШаблон("<text x=""260"" y=""%1"" style=""font-size:26pt;"">%2</text>",
			Формат(ПозицияY, "ЧРД=.; ЧГ=0"),
			Строка);
			
		ДоверительСтрока = ДоверительСтрока + Символы.ВК + ТекСтрока;
		
		НомерСтроки = НомерСтроки + 1;
		ПозицияY = ПозицияY + 40;
		Если НомерСтроки >= 4 Тогда // только 4 строки влезает
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
				
	Результат = СтрЗаменить(Результат, "<!-- ШтампДоверитель -->", ДоверительСтрока);	

	Возврат Результат;
	
КонецФункции  

Функция СформироватьШтампЭПСДоверенностью(ОписаниеЭП, Формат = "PNG", ИтоговыйФорматPdf = Ложь) Экспорт
	
	ПрозрачныйФон = Истина; 
	Если ИтоговыйФорматPdf = Истина Тогда	
		ПрозрачныйФон = Ложь; 
	КонецЕсли;	
	
	ТекстШтампа = ТекстШтампаЭПСДоверенностью(ОписаниеЭП, ПрозрачныйФон);
	
	Поток = Новый ПотокВПамяти();
	ЗаписьТекста = Новый ЗаписьТекста(Поток, "utf-8");
	ЗаписьТекста.Записать(ТекстШтампа);
	ЗаписьТекста.Закрыть();
	
	ДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	ШтампSvg = Новый Картинка(ДанныеФайла);
	ШтампPng = ШтампSvg.Преобразовать(ФорматКартинки.PNG);
	
	ДанныеФайлаPng = ШтампPng.ПолучитьДвоичныеДанные(); 
	Штамп = Новый Картинка(ДанныеФайлаPng, Истина);
	
	ПутьНовогоФайла = ПолучитьИмяВременногоФайла("PNG");
	Штамп.Записать(ПутьНовогоФайла);
	
	Возврат ПутьНовогоФайла;

КонецФункции

// Возвращает строку в формате svg, содержащую штамп.
// 
// Параметры:
// 	ДанныеДляФормирования - см. НовыеДанныеДляФормированияШтампа
// 	Подписи - Массив из см. НовыеДанныеПодписиСУчетомДоверенности
// 	ТекстШтампа - Строка
// Возвращаемое значение:
// 	Строка
Функция ТекстШтампаПЭП(ДанныеПодписанта, ПрозрачныйФон)
	
	МакетЭП = ПолучитьОбщийМакет("ШаблонОтметкиПЭП_svg");
	МакетЭП.КодЯзыкаМакета = Метаданные.Языки.Русский.КодЯзыка;
	
	Результат = МакетЭП.ПолучитьТекст();

	Если Не ПрозрачныйФон Тогда
		Результат = СтрЗаменить(Результат, 
			"<!-- ШтампЗаливка -->", 
			"<polygon points='1 239, 1 1, 899 1, 899 239, 1 239' fill='white' stroke='crimson' fill-opacity='1.0' />");	
	КонецЕсли;
	
	ПодписантСтрока = Строка(ДанныеПодписанта.Подписант);
	ПодписантСтрока = СтрЗаменить(ПодписантСтрока, """", " ");
	СтрокаПодписант = СтрШаблон(НСтр("ru = 'Подписал: %1'"), ПодписантСтрока);

	ВладелецСтрока = "";
	МассивСтрок = РазбитьНаСтрокиПоШирине(СтрокаПодписант, 50); // 50 символов по ширине влезает
	
	НомерСтроки = 0;
	ПозицияY = 112;
	Для Каждого Строка Из МассивСтрок Цикл
		
		ТекСтрока = СтрШаблон("<text x=""10"" y=""%1"" style=""font-size:26pt;"">%2</text>",
			Формат(ПозицияY, "ЧРД=.; ЧГ=0"),
			Строка);
			
		ВладелецСтрока = ВладелецСтрока + Символы.ВК + ТекСтрока;
		
		НомерСтроки = НомерСтроки + 1;
		ПозицияY = ПозицияY + 40;
		Если НомерСтроки >= 4 Тогда // только 4 строки влезает
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
				
	Результат = СтрЗаменить(Результат, "<!-- ШтампВладелец -->", ВладелецСтрока);	
	
	Возврат Результат;
	
КонецФункции  

//Формирует изображение штампа ПЭП
//
// Параметры:
//   ДанныеПодписанта - Структура(Подписант, Дата)
//   Формат - Строка - расширение формата.
//   ИтоговыйФорматPdf - Булево
//
// Возвращаемое значение:
//   Строка - полный путь к картинке штампа ЭП.
//
Функция СформироватьШтампПЭП(ДанныеПодписанта, Формат = "PNG", ИтоговыйФорматPdf = Ложь) Экспорт
	
	ПрозрачныйФон = Истина; 
	Если ИтоговыйФорматPdf = Истина Тогда	
		ПрозрачныйФон = Ложь; 
	КонецЕсли;	
	
	ТекстШтампа = ТекстШтампаПЭП(ДанныеПодписанта, ПрозрачныйФон);
	
	Поток = Новый ПотокВПамяти();
	ЗаписьТекста = Новый ЗаписьТекста(Поток, "utf-8");
	ЗаписьТекста.Записать(ТекстШтампа);
	ЗаписьТекста.Закрыть();
	
	ДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	ШтампSvg = Новый Картинка(ДанныеФайла);
	ШтампPng = ШтампSvg.Преобразовать(ФорматКартинки.PNG);
	
	ДанныеФайлаPng = ШтампPng.ПолучитьДвоичныеДанные(); 
	Штамп = Новый Картинка(ДанныеФайлаPng, Истина);
	
	ПутьНовогоФайла = ПолучитьИмяВременногоФайла("PNG");
	Штамп.Записать(ПутьНовогоФайла);
	
	Возврат ПутьНовогоФайла;
	
КонецФункции


// Накладывает на изображение строки в указанных местах.
//
// Параметры:
//   ИсходнаяКартинка - Строка, ДвоичныеДанные - исходная картинка.
//   Формат - Строка - расширение формата.
//   Строки - Массив - массив структур со свойствами:
//     Слева - Число - пикселей слева до левого края строки.
//     Сверху - Число - пикселей сверху до нижнего края строки.
//     Строка - Строка - накладываемая строка.
//   Размер - Число - размер шрифта в пикселях.
//
// Возвращаемое значение:
//   Строка - полный путь к картинке с наложенным текстом.
//
Функция НаложитьСтроки(ИсходнаяКартинка, Формат, Строки, Размер) Экспорт
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапка);

	ФайлыКУдалению = Новый Массив;
	Если ТипЗнч(ИсходнаяКартинка) = Тип("ДвоичныеДанные") Тогда
		ПутьИсходногоФайла = ВременнаяПапка + "src." + Формат;
		ИсходнаяКартинка.Записать(ПутьИсходногоФайла);
		ФайлыКУдалению.Добавить(ПутьИсходногоФайла);
	ИначеЕсли ТипЗнч(ИсходнаяКартинка) = Тип("Строка") Тогда
		ПутьИсходногоФайла = ИсходнаяКартинка;
	КонецЕсли;
	
	ПутьНовогоФайла = ВременнаяПапка + "new." + Формат;
	
	ПараметрыDraw = Новый Массив;
	Для Каждого Строка Из Строки Цикл
		ПараметрDraw = СтрШаблон("text %1, %2 '%3'",
			Формат(Строка.Слева, "ЧГ=0"),
			Формат(Строка.Сверху, "ЧГ=0"),
			Строка.Текст);
		ПараметрыDraw.Добавить(ПараметрDraw);
	КонецЦикла;
	Параметры = СтрШаблон("convert %3 -pointsize %1 -draw ""%2"" %4",
		Формат(Размер, "ЧГ=0"),
		СтрСоединить(ПараметрыDraw, " "),
		ПутьИсходногоФайла,
		ПутьНовогоФайла);
		
	НоваяВерсияIM = ВерсияImageMagickНовая(); // Булево
	Если НоваяВерсияIM Тогда
		Параметры = СтрЗаменить(Параметры, "convert", "");	
	КонецЕсли;	
		
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ,, ВременнаяПапка);
	
	Возврат ПутьНовогоФайла;
	
КонецФункции

// Запускает ImageMagick с указанными параметрами. В случае ошибки вызывается исключение,
// в остальных случаях возвращается код возврата ImageMagick.
//
// Параметры:
//   Параметры - Строка - параметры запуска ImageMagick.
//   ФайлыКУдалению - Массив - необязательный параметр, временные файлы, требующие удаления.
//   ИмяBatФайла - строка, полный путь + имя  bat файла. Может быть пуст.
//   СтрокаImageMagick - Строка - имя ImageMagick из диалога настроек (еще не записано)
//   ТекущийКаталог - Строка
//
// Возвращаемое значение:
//   Число - 0 в случае успешного выполнения, 300+ - при завершении с предупреждением.
//     Полный список предупреждений см. в документации к ImageMagick.
//
Функция ЗапуститьImageMagick(Параметры, ФайлыКУдалению = Неопределено, ИмяBatФайла = "", СтрокаImageMagick = Неопределено,
	ТекущийКаталог = Неопределено) Экспорт
	
	Если ФайлыКУдалению = Неопределено Тогда
		ФайлыКУдалению = Новый Массив();
	КонецЕсли;

	ПолныйПуть = ФайловыеФункцииПовтИсп.ПутьКПрограммеКонвертацииPDF();
	Если СтрокаImageMagick <> Неопределено Тогда
		ПолныйПуть = СтрокаImageMagick;
	КонецЕсли;	
	

	Возврат РаботаСКартинкамиКлиентСервер.ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла, ПолныйПуть, ТекущийКаталог);
	
КонецФункции

// Конструктор координат картинки.
// 
// Параметры:
//  Слева - Число - в мм
//  Сверху - Число - в мм
// 
// Возвращаемое значение:
//  Структура:
//   * Слева - Число - в мм
//   * Сверху - Число - в мм
Функция НовыйКоординаты(Слева = 0, Сверху = 0) Экспорт
	
	Возврат Новый Структура("Слева, Сверху", Слева, Сверху);
	
КонецФункции

// Конструктор размеров картинки.
// 
// Параметры:
//  Ширина - Число - в мм
//  Высота - Число - в мм
// 
// Возвращаемое значение:
//  Структура:
// * Ширина - Число - в мм
// * Высота - Число - в мм
Функция НовыйРазмеры(Ширина = 0, Высота = 0) Экспорт
	
	Возврат Новый Структура("Ширина, Высота", Ширина, Высота);
	
КонецФункции

// По настройкам расположения рассчитывает координаты и для отметки ЭП, и рег.штамп и штрихкода
// 
// Параметры:
//  Настройки - См. ШтрихкодированиеКлиентСервер.НовыйНастройкиРасположения
//  Размеры - См. НовыйРазмеры
//  НомерКартинки - Число - Порядковый номер, для отступа
// 
// Возвращаемое значение:
//  См. НовыйКоординаты
Функция КоординатыПоНастройкам(Настройки, Размеры, НомерКартинки) Экспорт
	
	Координаты = НовыйКоординаты();
	Расположение = Настройки.ПоложениеНаСтранице;
	
	ЧислоШтамповВСтолбце = 10;           
	НомерСтолбца = Цел(НомерКартинки / ЧислоШтамповВСтолбце);
	НомерКартинкиY = НомерКартинки % ЧислоШтамповВСтолбце;
	
	// А4 - 210х297 мм, если ориентация 297х210 или другие размеры, то пока отработает некорректно.
	// Определение размеров страницы пока не поддерживается.
	
	Если Расположение = Перечисления.МестаВставкиКартинки.ЛевыйВерхний Тогда
		
		Координаты.Слева = 0 + НомерСтолбца * Размеры.Ширина;
		Координаты.Сверху = 5 + Размеры.Высота * НомерКартинкиY;
		
	ИначеЕсли Расположение = Перечисления.МестаВставкиКартинки.ЛевыйНижний Тогда
		
		Координаты.Слева = 0 + НомерСтолбца * Размеры.Ширина;
		Координаты.Сверху = 297 - (Размеры.Высота + Размеры.Высота * НомерКартинкиY);
		
	ИначеЕсли Расположение = Перечисления.МестаВставкиКартинки.ПравыйВерхний Тогда
		
		Координаты.Слева = 210 - Размеры.Ширина - НомерСтолбца * Размеры.Ширина;
		Координаты.Сверху = 5 + Размеры.Высота * НомерКартинкиY;
		
	ИначеЕсли Расположение = Перечисления.МестаВставкиКартинки.ПравыйНижний Тогда
		
		Координаты.Слева = 210 - Размеры.Ширина - НомерСтолбца * Размеры.Ширина;
		Координаты.Сверху = 297 - (Размеры.Высота + Размеры.Высота * НомерКартинкиY);
		
	ИначеЕсли Расположение = Перечисления.МестаВставкиКартинки.ПроизвольноеПоложение Тогда
		
		Координаты.Слева = ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(Настройки.СмещениеПоГоризонтали);
		Если Координаты.Слева < 0 Тогда
			Координаты.Слева = 0;
		ИначеЕсли Координаты.Слева > 210 Тогда
			Координаты.Слева = 210;
		КонецЕсли;
		
		Координаты.Сверху = ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(Настройки.СмещениеПоВертикали);
		Если Координаты.Сверху < 0 Тогда
			Координаты.Сверху = 0;
		ИначеЕсли Координаты.Сверху >= 297 Тогда 
			Координаты.Сверху = 297;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат Координаты;
	
КонецФункции

// Получить размеры картинки в мм и пикселях.
// 
// Параметры:
//  Штамп - Строка, ДвоичныеДанные, СправочникСсылка.Файлы - Путь к файлу картинки, двоичные 
//															 данные, или ссылка на файл.
//
// Возвращаемое значение:
//  Структура - Размеры картинки:
//   * ШиринаПикс - Число - в пикселях
//   			  - Неопределено - если передана Коллекция картинок (ненормальная ситуация).
//   * ВысотаПикс - Число - в пикселях
//   			  - Неопределено - если передана Коллекция картинок (ненормальная ситуация).
//   * ШиринаМм - Число - в мм.
//   * ВысотаМм - Число - в мм.
//   * ПлотностьПоГоризонтали - Число - в DPI
//   						  - Неопределено - если передана Коллекция картинок (ненормальная ситуация).
//   * ПлотностьПоВертикали -  Число - в DPI
//   						- Неопределено - если передана Коллекция картинок (ненормальная ситуация).
//   * Нулевые - Булево - Если картинка очень маленькая или вообще нулевая.
Функция ВсеРазмерыКартинки(Штамп) Экспорт
	
	Картинка = Неопределено;
	Если ТипЗнч(Штамп) = Тип("Строка") Или ТипЗнч(Штамп) = Тип("ДвоичныеДанные") Тогда
		Картинка = Новый Картинка(Штамп);
	ИначеЕсли ТипЗнч(Штамп) = Тип("СправочникСсылка.Файлы") Тогда
		Картинка = Новый Картинка(РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Штамп));
	КонецЕсли;
	
	DPI = КачествоПреобразованияPDFДляПредпросмотра();
	
	Размеры = Новый Структура();
	Размеры.Вставить("ПлотностьПоГоризонтали", Картинка.ПлотностьПоГоризонтали());
	Если Размеры.ПлотностьПоГоризонтали = 72 Тогда
		Размеры.ПлотностьПоГоризонтали = DPI;
		// (Т.е. принудительно ставим ту же плотность, с каком pdf преобразуется в png при наложение 
		// штампов средствами ImageMagick).
	КонецЕсли;
	Размеры.Вставить("ПлотностьПоВертикали", Картинка.ПлотностьПоВертикали());
	Если Размеры.ПлотностьПоВертикали = 72 Тогда
		Размеры.ПлотностьПоВертикали = DPI;
	КонецЕсли;
	
	Размеры.Вставить("ШиринаПикс", Картинка.Ширина());
	Размеры.Вставить("ВысотаПикс", Картинка.Высота());
	
	Размеры.Вставить("ШиринаМм", Окр(Размеры.ШиринаПикс / Размеры.ПлотностьПоГоризонтали * 25.4)); // Перевод из пикселей в мм.
	Размеры.Вставить("ВысотаМм", Окр(Размеры.ВысотаПикс / Размеры.ПлотностьПоВертикали * 25.4));
	
	// Возможны "артефакты" - аномально маленькие страницы при разборе:
	Размеры.Вставить("Нулевые", Ложь);
	Если Размеры.ШиринаПикс < 2 Или Размеры.ВысотаПикс < 2 Тогда
		Размеры.Нулевые = Истина;
	КонецЕсли;
	
	Возврат Размеры;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Масштабировать картинку средствами ImageMagick произвольно.
// 
// Параметры:
//  ПутьКФайлу - Строка - Путь к файлу картинки
//  НоваяШирина - Число - Новая ширина, в пикселях
//  НоваяВысота - Число - Новая высота, в пикселях
//  НоваяDpi - Число - Новая плотность (DPI - точек на дюйм)
Процедура МасштабироватьКартинку(ПутьКФайлу, НоваяШирина, НоваяВысота, НоваяDpi, ВременнаяПапкаДляРазархивирования)
	
	ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "cnv.bat";
	
	ФайлыКУдалению = Новый Массив();
	
	Параметры = СтрШаблон("mogrify -resize %1x%2 %3 -density %4",
		Формат(НоваяШирина, "ЧДЦ=0; ЧГ=0;"), // ЧГ=0  без группировки по 3
		Формат(НоваяВысота, "ЧДЦ=0; ЧГ=0;"),
		ПутьКФайлу,
		НоваяDpi);
	
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению,ИмяBatФайла,,ВременнаяПапкаДляРазархивирования); 
	
КонецПроцедуры

// Вернет, установлен ли ImageMagick (только Windows)
// 
// Параметры:
//  ПутьКПрограммеКонвертацииPDF - Строка - например magick.exe
//
// Возвращаемое значение:
//  Булево
Функция УстановленImageMagick(ПутьКПрограммеКонвертацииPDF) Экспорт
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапка);
	ИмяBatФайла = ВременнаяПапка + "cnv.bat";
	
	ФайлыКУдалению = Новый Массив;
	
	Параметры = "identify -version";
	
	Попытка
		КодВозврата = ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла, ПутьКПрограммеКонвертацииPDF, ВременнаяПапка);
		Возврат (КодВозврата = 0);
	Исключение   
		Возврат Ложь; // не установлен image magick
	КонецПопытки;	
	
КонецФункции	
	

// Модуль числа.
// 
// Параметры:
//  Число - Число
// 
// Возвращаемое значение:
//  Число
Функция МодульЧисла(Число)
	Возврат Макс(Число, -Число);
КонецФункции

// получить из константы, а если пусто - командной строкой.
Функция ПолучитьВерсиюImageMagick()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВерсияImageMagick = Константы.ВерсияImageMagick.Получить();
	
	Если Не ЗначениеЗаполнено(ВерсияImageMagick) Тогда
		
		ВерсияImageMagick = ПолучитьВерсиюImageMagickКоманднойСтрокой();
		Константы.ВерсияImageMagick.Установить(ВерсияImageMagick);
		
	КонецЕсли;	
	
	Возврат ВерсияImageMagick;
	
КонецФункции	   

Функция ПолучитьВерсиюImageMagickКоманднойСтрокой()   
	
	ВерсияImageMagick = "";
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапка);
	
	ИмяФайла = "res.txt";
	ПутьНовогоФайла = ВременнаяПапка + ИмяФайла;
	
	ФайлыКУдалению = Новый Массив;
	
	Параметры = " -version > " + ИмяФайла;
	
	ИмяBatФайла = ВременнаяПапка + "cnv.bat";
	
	Попытка
		КодВозврата = ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла,,ВременнаяПапка);
		
		Если КодВозврата = 0 Тогда
			// прочитаем из ПутьНовогоФайла
			
			ЧтениеТекста = Новый ЧтениеТекста(ПутьНовогоФайла);
			ТекстФайла = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
			КоличествоСтрок = СтрЧислоСтрок(ТекстФайла);
			Для Индекс = 1 По КоличествоСтрок Цикл
				Строка = СтрПолучитьСтроку(ТекстФайла, Индекс);
				
				Если СтрНайти(Строка, "Version:") Тогда  
					
					//  Version: ImageMagick 7.1.1-39 Q16-HDRI x64 18ae555:20241005 https://imagemagick.org
					ТекстПослеНачала = Сред(Строка, СтрДлина("Version: ImageMagick ") + 1); // 7.1.1-39 Q16-HDRI x64 18ae555:20241005 https://imagemagick.org
					
					ПозицияПробела = СтрНайти(ТекстПослеНачала, " ");
					Если ПозицияПробела = 0 Тогда      
						Возврат "";
					КонецЕсли;	   
					
					ТекстВерсии = Лев(ТекстПослеНачала, ПозицияПробела - 1);

					ПозицияМинус = СтрНайти(ТекстПослеНачала, "-");
					Если ПозицияМинус <> 0 Тогда      
						ТекстВерсии = Лев(ТекстПослеНачала, ПозицияМинус - 1);
					КонецЕсли;	   
					
					Возврат ТекстВерсии;
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;
		
	Исключение   
		Возврат ""; // не установлен image magick
	КонецПопытки;	
	
	Возврат ВерсияImageMagick;
	
КонецФункции	   

Функция ВерсияImageMagickНовая()  
	
	ВерсияImageMagick = ПолучитьВерсиюImageMagick(); 
	
	МассивСтрок = СтрРазделить(ВерсияImageMagick, ".", Ложь);
	
	Если МассивСтрок.Количество() >= 2 Тогда
		
		Попытка
			Первое = Число(МассивСтрок[0]);
			Второе = Число(МассивСтрок[1]);
		Исключение       
			Возврат Ложь;
		КонецПопытки;
		
		Если Первое >= 8 Тогда
			Возврат Истина;
		КонецЕсли;	

		Если Первое = 7 И Второе >= 1 Тогда
			Возврат Истина;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

#КонецОбласти
