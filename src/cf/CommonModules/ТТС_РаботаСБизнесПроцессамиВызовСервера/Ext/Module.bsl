#Область ПрограммныйИнтерфейс

#Область ОбработкаПодпискиРасширениеРабочейГруппыПроцессовПоПредмету

// ПодпискаНаСобытие РасширениеРабочейГруппыПроцессовПоПредмету
Процедура РасширениеРабочейГруппыПроцессовПоПредмету(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнойПроцесс = ГоловнойПроцесс(Источник.Ссылка);
	
	ОсновнойПредмет =  МультипредметностьВызовСервера.ПолучитьПредметыПроцесса(ГоловнойПроцесс,Истина,Истина);	
	Если ОсновнойПредмет.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Процессы = ПроцессыПоПредмету(ОсновнойПредмет[0]).ВсеПроцессы;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПредметыПроцесса.Ссылка
	               |ПОМЕСТИТЬ ВТПроцессы
	               |ИЗ
	               |	БизнесПроцесс.Исполнение.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.КомплексныйПроцесс.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.ОбработкаВнутреннегоДокумента.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.ОбработкаВходящегоДокумента.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.ОбработкаИсходящегоДокумента.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Ознакомление.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Поручение.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Приглашение.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Рассмотрение.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Регистрация.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.РешениеВопросовВыполненияЗадач.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Согласование.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредметыПроцесса.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Утверждение.Предметы КАК ПредметыПроцесса
	               |ГДЕ
	               |	ПредметыПроцесса.Предмет В(&Предметы)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РабочиеГруппы.Участник,
	               |	РабочиеГруппы.ОсновнойОбъектАдресации,
	               |	РабочиеГруппы.ДополнительныйОбъектАдресации
	               |ПОМЕСТИТЬ ВТУчастники
	               |ИЗ
	               |	РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроцессы КАК ВТПроцессы
	               |		ПО РабочиеГруппы.Объект = ВТПроцессы.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УчастникиПроцессов.Участник,
	               |	УчастникиПроцессов.ОсновнойОбъектАдресации,
	               |	УчастникиПроцессов.ДополнительныйОбъектАдресации
	               |ИЗ
	               |	РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроцессы КАК ВТПроцессы
	               |		ПО УчастникиПроцессов.Участник = ВТПроцессы.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТУчастники.Участник,
	               |	ВТУчастники.ОсновнойОбъектАдресации,
	               |	ВТУчастники.ДополнительныйОбъектАдресации
	               |ИЗ
	               |	ВТУчастники КАК ВТУчастники";
				   
	Запрос.УстановитьПараметр("Предметы",ОсновнойПредмет);
	Участники = Запрос.Выполнить().Выгрузить();
	
	Для каждого Процесс Из Процессы Цикл
		
		ТекущаяРабочаяГруппа = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(Процесс.Ссылка);
		РабочаяГруппаИзменена = Ложь;
		Набор = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей();
		Набор.Отбор.Процесс.Установить(Процесс);
		Набор.Прочитать();
		ТаблицаНабора = Набор.Выгрузить();
		
		
		Для каждого Участник Из Участники Цикл	
		
			ДанныеУчастника = Новый Структура(
				"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ДанныеУчастника.Участник = Участник.Участник;
			ДанныеУчастника.ОсновнойОбъектАдресации = Участник.ОсновнойОбъектАдресации;
			ДанныеУчастника.ДополнительныйОбъектАдресации = Участник.ДополнительныйОбъектАдресации;

			НайденныеСтрокиНабор = ТаблицаНабора.НайтиСтроки(ДанныеУчастника);
			
			Если НайденныеСтрокиНабор.Количество() = 0 Тогда
				РабочаяГруппаИзменена = Истина;
				СтрокаНабора = Набор.Добавить();
				СтрокаНабора.Участник = ДанныеУчастника.Участник;
				СтрокаНабора.ОсновнойОбъектАдресации = ДанныеУчастника.ОсновнойОбъектАдресации;
				СтрокаНабора.ДополнительныйОбъектАдресации = ДанныеУчастника.ДополнительныйОбъектАдресации;
				СтрокаНабора.Процесс = Процесс;
			КонецЕсли;
			
			ДанныеУчастника = Новый Структура(
				"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ДанныеУчастника.Участник = Участник.Участник;
			ДанныеУчастника.ОсновнойОбъектАдресации = Участник.ОсновнойОбъектАдресации;
			ДанныеУчастника.ДополнительныйОбъектАдресации = Участник.ДополнительныйОбъектАдресации;

			НайденныеСтроки = ТекущаяРабочаяГруппа.НайтиСтроки(ДанныеУчастника);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				РабочаяГруппаИзменена = Истина;
				
				Строка = ТекущаяРабочаяГруппа.Добавить();
				Строка.Участник = ДанныеУчастника.Участник;
				Строка.ОсновнойОбъектАдресации = ДанныеУчастника.ОсновнойОбъектАдресации;
				Строка.ДополнительныйОбъектАдресации = ДанныеУчастника.ДополнительныйОбъектАдресации;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если РабочаяГруппаИзменена Тогда
			Набор.Записать();
			РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
				Процесс.Ссылка,
				ТекущаяРабочаяГруппа,
				Ложь);// ОбновитьПраваДоступа
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполненияРешений

Функция ПроверитьПоПредметамРешение(знач Объект) Экспорт
	
	// Заглушка. Функция не используется в конфигурации, есть ошибка с обращением к СправочникСсылка.ВходящиеДокументы,
	// оставлена для возможной совместимости с омиу.
	//ТипыПредметов = Новый Массив;
	//ТипыПредметов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы"));
	//ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект, ТипыПредметов,Истина);
	//Результат = Ложь;
	//Для каждого Предмет Из ОбрабатываемыеПредметы Цикл 	
	//	Если Предмет.ВидДокумента.ЯвляетсяЗаявкойНаВозврат Тогда
	//		Если ТипЗнч(Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
	//			Если (Предмет.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ЦентральныйОфис И НЕ ЗначениеЗаполнено(Предмет.РешениеЦо))
	//				Или (Предмет.МестоРассмотрения = Перечисления.МестоВозвратаПоДокументуЗВДС.ПретензионнаяКасса 
	//				И Предмет.РешениеСтанции = Перечисления.РешенияПоДокументамЗВДС.РассмотрениеВЦО И НЕ ЗначениеЗаполнено(Предмет.РешениеЦО)) Тогда
	//				Результат = Истина;
	//				Прервать;
	//			КонецЕсли;
	//		ИначеЕсли ТипЗнч(Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
	//			Если (Предмет.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ПретензионнаяКасса И НЕ ЗначениеЗаполнено(Предмет.РешениеСтанции))
	//				Или (Предмет.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ЦентральныйОфис 
	//					И Предмет.РешениеЦО = Перечисления.РешенияПоДокументамЗВДС_ЦО.РассмотрениеНаСтанции 
	//					И (НЕ ЗначениеЗаполнено(Предмет.ДатаЗакрытияBI) 
	//					И НЕ ЗначениеЗаполнено(Предмет.РешениеСтанции))) Тогда
	//				Результат = Истина;
	//				Прервать;
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;	
	//Возврат  Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьУчастникаПроцессовПоПредмету(Предмет, Участник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Найти(Предмет.Метаданные().ПолноеИмя(),"БизесПроцесс")=0 Тогда
		ОсновнойПредмет = Предмет;
	Иначе	
		ГоловнойПроцесс = ГоловнойПроцесс(Предмет.Ссылка);
		ОсновнойПредмет =  МультипредметностьВызовСервера.ПолучитьПредметыПроцесса(ГоловнойПроцесс,Истина,Истина);	
		Если ОсновнойПредмет.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ТекстЗапроса = "";
	Для Каждого ОбъектМетаданных Из Метаданные.БизнесПроцессы Цикл
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
		|ОБЪЕДИНИТЬ ВСЕ")
		+ "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ " + ?(ПустаяСтрока(ТекстЗапроса),"РАЗРЕШЕННЫЕ","") + "
		|	Предметы.Ссылка КАК Процесс
		|"+?(ПустаяСтрока(ТекстЗапроса),"ПОМЕСТИТЬ втПроцессы","") + "
		|ИЗ
		|	БизнесПроцесс.%Таблица%.Предметы КАК Предметы
		|ГДЕ
		|	Предметы.Предмет = &Предмет";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", ОбъектМетаданных.Имя);
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ";	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втПроцессы.Процесс КАК Процесс
		|ПОМЕСТИТЬ втПроцессыСУчастником
		|ИЗ
		|	втПроцессы КАК втПроцессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
		|		ПО (втПроцессы.Процесс = УчастникиПроцессов.Процесс)
		|ГДЕ
		|	УчастникиПроцессов.Участник = &Участник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПроцессы.Процесс КАК Процесс,
		|	втПроцессыСУчастником.Процесс КАК ПроцессСУчастником
		|ПОМЕСТИТЬ втПредварительная
		|ИЗ
		|	втПроцессы КАК втПроцессы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПроцессыСУчастником КАК втПроцессыСУчастником
		|		ПО (втПроцессы.Процесс = втПроцессыСУчастником.Процесс)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПредварительная.Процесс КАК Процесс
		|ИЗ
		|	втПредварительная КАК втПредварительная
		|ГДЕ
		|	втПредварительная.ПроцессСУчастником ЕСТЬ NULL";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет", ОсновнойПредмет);
	Запрос.УстановитьПараметр("Участник", Участник);
	
	Процессы = Запрос.Выполнить().Выбрать();
	
	Пока Процессы.Следующий() Цикл 
		ЗаписьУчастник = РегистрыСведений.УчастникиПроцессов.СоздатьМенеджерЗаписи();
		ЗаписьУчастник.Процесс = Процессы.Процесс;
		ЗаписьУчастник.Участник = Участник;
		ЗаписьУчастник.УчастникПолный = Участник;
		ЗаписьУчастник.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьВозможностьИсполнения(Знач Объект) Экспорт
	ЕстьОшибки = Ложь;
	ТТС_ЖурналыТУВызовСервера.ПроверитьЗаполнениеПолейЖТУ(Объект, ЕстьОшибки);
	ТТС_ЖурналыТУВызовСервера.ДобавленФайлМИ(Объект, ЕстьОшибки);
	Возврат ЕстьОшибки;
КонецФункции

// Получает все процессы по предмету.
// Если в качестве предмета передается задача,
// тогда возвращается ее процесс, если передается процесс -
// он же возвращается в массиве, если передается предмет, тогда
// возвращаются его процессы.
//
// Параметры:
//   Предмет - ссылка на предмет, процесс, задачу.
//
// Возвращаемое значение:
//   Массив процессов
//
Функция ПроцессыПоПредмету(Предмет)
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеПроцессы", Новый Массив);
	Результат.Вставить("ВспомогательныеПроцессы", Новый Массив);
	
	Предметы = Новый Массив;
	Проекты = Новый Массив;
	ПроектныеЗадачи = Новый Массив;
	
	ТипОбъекта = ТипЗнч(Предмет);
	
	Если ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПроцессЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "БизнесПроцесс");
		Результат.ВсеПроцессы.Добавить(ПроцессЗадачи);
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(Предмет.Метаданные()) Тогда
		Результат.ВсеПроцессы.Добавить(Предмет);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Мероприятия") Тогда
		
		Предметы.Добавить(Предмет);
		
		// Для мероприятия следует отображать задачи по программе и по протоколу
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Предмет, "МатериалПрограмма, МатериалПротокол");
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.МатериалПрограмма) Тогда 
			Предметы.Добавить(РеквизитыМероприятия.МатериалПрограмма);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.МатериалПротокол) Тогда 
			Предметы.Добавить(РеквизитыМероприятия.МатериалПротокол);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		Предметы.Добавить(Предмет);
		
		// Для темы обсуждения следует отображать задачи по всем сообщениям данной темы
		СообщенияТемы = РаботаСОбсуждениями.ПолучитьСписокСообщенийТемы(Предмет);
		Для Каждого Сообщение Из СообщенияТемы Цикл
			Предметы.Добавить(Сообщение);
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		Предметы.Добавить(Предмет);
		Проекты.Добавить(Предмет);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПроектныеЗадачи.Ссылка
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Проект";
			
		Запрос.УстановитьПараметр("Проект", Предмет);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Предметы.Добавить(Выборка.Ссылка);
			ПроектныеЗадачи.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		Предметы.Добавить(Предмет);
		ПроектныеЗадачи.Добавить(Предмет);
	Иначе
		Предметы.Добавить(Предмет);
	КонецЕсли;
	
	ЕстьПредметы = Предметы.Количество() > 0;
	ЕстьПроектыИПроектныеЗадачиПроцессов = 
		Проекты.Количество() > 0 Или ПроектныеЗадачи.Количество() > 0;
	
	Если ЕстьПредметы Или ЕстьПроектыИПроектныеЗадачиПроцессов Тогда
		
		ТекстЗапросаДляПроцессовПоПредметам = "";
		ТекстЗапросаДляПроцессовПоПроектам = "";
		РазделительЗапросовДляПредметов = "";
		РазделительЗапросовДляПроектов = "";
		МетаданныеБизнесПроцессы = Метаданные.БизнесПроцессы;
		
		Для Каждого МетаданныеБП Из МетаданныеБизнесПроцессы Цикл
			
			Если ЕстьПредметы Тогда
				
				ТекстЗапросаДляТекущегоПроцесса = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПредметыПроцесса.Ссылка,
					|	ПредметыПроцесса.РольПредмета,
					|	ПредметыПроцесса.Предмет
					|ИЗ
					|	БизнесПроцесс.%ИмяПроцесса%.Предметы КАК ПредметыПроцесса
					|ГДЕ
					|	ПредметыПроцесса.Предмет В (&Предметы)";
					
				ТекстЗапросаДляТекущегоПроцесса = СтрЗаменить(
					ТекстЗапросаДляТекущегоПроцесса, "%ИмяПроцесса%", МетаданныеБП.Имя);
					
				Если ЗначениеЗаполнено(ТекстЗапросаДляПроцессовПоПредметам) Тогда
					ТекстЗапросаДляТекущегоПроцесса =
						СтрЗаменить(ТекстЗапросаДляТекущегоПроцесса, " РАЗРЕШЕННЫЕ", "");
				КонецЕсли;
					
				ТекстЗапросаДляПроцессовПоПредметам = ТекстЗапросаДляПроцессовПоПредметам
					+ РазделительЗапросовДляПредметов
					+ ТекстЗапросаДляТекущегоПроцесса;
					
				РазделительЗапросовДляПредметов = Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			Если ЕстьПроектыИПроектныеЗадачиПроцессов Тогда
				
				ТекстЗапросаДляТекущегоПроцесса = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Процессы.Ссылка
					|ИЗ
					|	БизнесПроцесс.%ИмяПроцесса% КАК Процессы
					|ГДЕ
					|	(Процессы.Проект В (&Проекты)
					|			ИЛИ Процессы.ПроектнаяЗадача В (&ПроектныеЗадачи))";
					
				ТекстЗапросаДляТекущегоПроцесса = СтрЗаменить(
					ТекстЗапросаДляТекущегоПроцесса, "%ИмяПроцесса%", МетаданныеБП.Имя);
					
				Если ЗначениеЗаполнено(ТекстЗапросаДляПроцессовПоПроектам) Тогда
					ТекстЗапросаДляТекущегоПроцесса =
						СтрЗаменить(ТекстЗапросаДляТекущегоПроцесса, " РАЗРЕШЕННЫЕ", "");
				КонецЕсли;
				
				ТекстЗапросаДляПроцессовПоПроектам = ТекстЗапросаДляПроцессовПоПроектам
					+ РазделительЗапросовДляПроектов
					+ ТекстЗапросаДляТекущегоПроцесса;
				
				РазделительЗапросовДляПроектов = Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос();
		
		Если ЕстьПредметы Тогда
			Запрос.Текст = ТекстЗапросаДляПроцессовПоПредметам;
			Запрос.УстановитьПараметр("Предметы", Предметы);
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТипСпрПроекты = Тип("СправочникСсылка.Проекты");
			ТипСпрПроектныеЗадачи = Тип("СправочникСсылка.ПроектныеЗадачи");
			
			Пока Выборка.Следующий() Цикл
				Если Результат.ВсеПроцессы.Найти(Выборка.Ссылка) = Неопределено Тогда
					Результат.ВсеПроцессы.Добавить(Выборка.Ссылка);
					
					ЭтоВспомогательныйПредмет = Ложь;
					ТипПредмета = ТипЗнч(Выборка.Предмет);
					Если ТипПредмета = ТипСпрПроекты
						Или ТипПредмета = ТипСпрПроектныеЗадачи Тогда
						
						ЭтоВспомогательныйПредмет = Истина;
					ИначеЕсли Выборка.РольПредмета <> Перечисления.РолиПредметов.Основной Тогда
						ЭтоВспомогательныйПредмет = Истина;
					КонецЕсли;
					
					Если ЭтоВспомогательныйПредмет Тогда
						Результат.ВспомогательныеПроцессы.Добавить(Выборка.Ссылка);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПроектыИПроектныеЗадачиПроцессов Тогда
			Запрос.Текст = ТекстЗапросаДляПроцессовПоПроектам;
			Запрос.УстановитьПараметр("Проекты", Проекты);
			Запрос.УстановитьПараметр("ПроектныеЗадачи", ПроектныеЗадачи);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Результат.ВсеПроцессы.Найти(Выборка.Ссылка) = Неопределено Тогда
					Результат.ВсеПроцессы.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вычисляет головной процесс по главной/ведущей задаче текущего переданного процесса.
//
// Параметры:
//   Процесс - БизнесПроцессСсылка
//
Функция ГоловнойПроцесс(Процесс)
	
	ГоловнойПроцесс = Неопределено;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"ВедущаяЗадача, ВедущаяЗадача.БизнесПроцесс, ГлавнаяЗадача, ГлавнаяЗадача.БизнесПроцесс");
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ВедущаяЗадача) Тогда
		ГоловнойПроцесс = ГоловнойПроцесс(РеквизитыПроцесса.ВедущаяЗадачаБизнесПроцесс);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ГлавнаяЗадача) Тогда
		ГоловнойПроцесс = ГоловнойПроцесс(РеквизитыПроцесса.ГлавнаяЗадачаБизнесПроцесс);
	КонецЕсли;
	
	Если ГоловнойПроцесс = Неопределено Тогда
		ГоловнойПроцесс = Процесс;
	КонецЕсли;
	
	Возврат ГоловнойПроцесс;
	
КонецФункции
 
Процедура ЗаполнитьМассивУчастниковРодительскихПроцессов(Объект, Участники)
		
	// Пользователи от бизнес-процесса ведущей задачи
	Если Не Объект.ВедущаяЗадача.Пустая() Тогда
		
		ВедущийБизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВедущаяЗадача, "БизнесПроцесс");
		
		// Рекурсивно вызываем все ведущие бизнес-процессы выше по иерархии
		ЗаполнитьМассивУчастниковРодительскихПроцессов(ВедущийБизнесПроцесс, Участники);
		
		ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(ВедущийБизнесПроцесс));
		Попытка
			
			ПользователиВедущегоБизнесПроцесса = 
				БизнесПроцессы[ТипБизнесПроцесса.Имя].УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(ВедущийБизнесПроцесс);
				
			Для каждого Эл Из ПользователиВедущегоБизнесПроцесса Цикл
				Участники.Добавить(Эл);
			КонецЦикла;
			
		Исключение
			// Функция "ПользователиВедущегоБизнесПроцесса" может отсутствовать у бизнес-процесса 
			// данного типа
		КонецПопытки;	
		
	КонецЕсли;	
	
	// Пользователи от бизнес-процесса главной задачи
	Если Не Объект.ГлавнаяЗадача.Пустая() Тогда
		
		ГлавныйБизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГлавнаяЗадача, "БизнесПроцесс");
		
		// Рекурсивно вызываем все главные бизнес-процессы выше по иерархии
		ЗаполнитьМассивУчастниковРодительскихПроцессов(ГлавныйБизнесПроцесс, Участники);
		
		ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(ГлавныйБизнесПроцесс));
		Попытка
			
			ПользователиГлавногоБизнесПроцесса = 
				БизнесПроцессы[ТипБизнесПроцесса.Имя].УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(ГлавныйБизнесПроцесс);
				
			Для каждого Эл Из ПользователиГлавногоБизнесПроцесса Цикл
				Участники.Добавить(Эл);
			КонецЦикла;
			
		Исключение
			// Функция "ПользователиВедущегоБизнесПроцесса" может отсутствовать у бизнес-процесса 
			// данного типа
		КонецПопытки;	
		
	КонецЕсли;			
	
КонецПроцедуры

#КонецОбласти
