
#Область СлужебныйПрограммныйИнтерфейс

#Область СхемаПроцесса

#Область НастройкиЭлементов

// Открывает диалог настройки параметров элемента схемы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  ИмяЭлемента - Строка - имя элемента схемы.
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//  ОбработчикНастройкиЭлемента - ОписаниеОповещения - обработчик, который выполняется после
//                                завершения настройки элемента. 
//
Процедура НастроитьПараметрыЭлементаСхемы(Форма, ИмяЭлемента, ТипЭлемента,
	ОбработчикНастройки = Неопределено) Экспорт
	
	// Если для элемента нет пустого значения, значит для него не предусмотрено настроек.
	ПустыеЗначенияНастроек = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПустыеЗначенияНастроекДляТиповЭлементовСхемы();
	Если ПустыеЗначенияНастроек[ТипЭлемента] = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ИмяЭлемента", ИмяЭлемента);
	ДопПараметры.Вставить("ТипЭлемента", ТипЭлемента);
	ДопПараметры.Вставить("ОбработчикНастройки", ОбработчикНастройки);
		
	ОбрабочикЗавершения = Новый ОписаниеОповещения(
		"ЗавершитьНастройкуЭлементаСхемы", ЭтотОбъект, ДопПараметры);
	
	ПредметыПроцесса = Новый Массив;
	Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
		ПредметыПроцесса.Добавить(СтрокаПредмета.Предмет);
	КонецЦикла;
	
	Если СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлемента) Тогда
		
		Если Не ЗаписатьНовыйПроцессПередНастройкойПодчиненногоЭлемента(Форма) Тогда
			Возврат;
		КонецЕсли;
		
		НастройкаЭлемента = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастройкаЭлементаСхемыВФорме(
				Форма, ИмяЭлемента);
			
		Если ЗначениеЗаполнено(НастройкаЭлемента) Тогда
			ОткрытьНастройкуИлиПроцессЭлементаСхемы(Форма, ИмяЭлемента);
		Иначе
			ПомощникОтправитьКлиентКОРП.ВыбратьВариантОтправкиДействияКомплексногоПроцесса(
				"Действие", ПредметыПроцесса, Форма, ОбрабочикЗавершения);
		КонецЕсли;
	
	ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоВложенныйПроцессСхемы(ТипЭлемента) Тогда
			
		Если Не ЗаписатьНовыйПроцессПередНастройкойПодчиненногоЭлемента(Форма) Тогда
			Возврат;
		КонецЕсли;	
		
		НастройкаЭлемента = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастройкаЭлементаСхемыВФорме(
				Форма, ИмяЭлемента);
						
		Если ЗначениеЗаполнено(НастройкаЭлемента) Тогда
			
			Если ТипЗнч(НастройкаЭлемента) = Тип("СправочникСсылка.ИменаПредметов") Тогда
				
				МассивПредметов = ПредметыДляОбработки(Форма);
				Если МассивПредметов.Количество() = 1 Тогда
					ПоказатьПредупреждение(, НСтр("ru = 'Обработка единственного допустимого предмета уже настроена.
					|
					|Для изменения настройки добавьте другие предметы, по которым возможен запуск обработки.'"));
					Возврат;
					
				ИначеЕсли МассивПредметов.Количество() > 1 Тогда
					
					ИспользованныеПредметы = ИспользованныеПредметыДляОбработки(Форма);
						
					ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
						"ПродолжитьВыполнениеПослеВыбораПредметаОбработки",
						ЭтотОбъект,
						ДопПараметры);
					
					ПараметрыОткрытия = Новый Структура("МассивПредметовОбработки, ИспользованныеПредметы", 
						МассивПредметов, ИспользованныеПредметы);
					ОткрытьФорму("ОбщаяФорма.ВыборПредметаОбработки", 
						ПараметрыОткрытия,,,,,
						ОписаниеОповещенияОЗакрытии, 
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
						
				КонецЕсли;	
				
			Иначе
					
				ОткрытьНастройкуИлиПроцессЭлементаСхемы(Форма, ИмяЭлемента);
					
			КонецЕсли;	
			
		Иначе
			ПомощникОтправитьКлиентКОРП.ВыбратьВариантОтправкиДействияКомплексногоПроцесса(
				"ВложенныйПроцесс", ПредметыПроцесса, Форма, ОбрабочикЗавершения);
		КонецЕсли;
			
	ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоСкриптСхемы(ТипЭлемента) Тогда 
			
		Если Не СхемыПроцессовКлиентПовтИсп.ДоступнаНастройкаСкриптовВСхемахПроцессов() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Вам недоступна настройка скриптов.
				|Обратитесь к администратору.'"));
			Возврат;
		КонецЕсли;
		
		НастройкаУсловия = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастройкаЭлементаСхемыВФорме(
				Форма, ИмяЭлемента); 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", НастройкаУсловия);
		
		ОткрытьФорму(
			"Справочник.СкриптыСхемДляКомплексныхПроцессов.Форма.ФормаВыбора",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОбрабочикЗавершения);
		
	ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ТипЭлемента) Тогда
			
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Описание",
			СхемыПроцессовКлиентСервер.ОписаниеЭлементаСхемыВФорме(ИмяЭлемента, Форма));
		
		ПараметрыФормы.Вставить("НастройкиУсловия",
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастройкаЭлементаСхемыВФорме(
				Форма, ИмяЭлемента));
		
		ПараметрыФормы.Вставить("ПредшествующиеДействия",
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДействияСНастройкамиПредшествующиеУсловию(
				ИмяЭлемента, Форма));
		
		ПараметрыФормы.Вставить("ПредметыПроцесса",
			МультипредметностьКлиентСервер.ПредметыПроцесса(Форма.Объект));
		
		ОткрытьФорму(
			"ОбщаяФорма.НастройкаУсловияСхемыДляКомплексногоПроцесса",
			ПараметрыФормы,
			Форма,,,,
			ОбрабочикЗавершения);
				
	КонецЕсли;
	
КонецПроцедуры

// Продолжение НастроитьПараметрыЭлементаСхемы.
//
Процедура ЗавершитьНастройкуЭлементаСхемы(ЗначениеНастройки, ДопПараметры) Экспорт
	
	Если ЗначениеНастройки = Неопределено
		Или ЗначениеНастройки = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
	КонецЕсли;

	Форма = ДопПараметры.Форма; 		
	ИмяЭлемента = ДопПараметры.ИмяЭлемента;
	ТипЭлемента = ДопПараметры.ТипЭлемента;
	ОбработчикНастройки = ДопПараметры.ОбработчикНастройки;
		
	Если СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлемента)
		Или СхемыПроцессовКлиентСервер.ЭтоВложенныйПроцессСхемы(ТипЭлемента) Тогда
		
		Если ЗначениеНастройки = ПомощникОтправитьКлиентСервер.ВариантОтправкиСоздатьОбработку() Тогда
			
			МассивПредметов = ПредметыДляОбработки(Форма);
			ИспользованныеПредметы = ИспользованныеПредметыДляОбработки(Форма);
			
			Если МассивПредметов.Количество() = 1 Тогда
				
				ИмяПредмета = МассивПредметов[0];
				Если ИспользованныеПредметы.Найти(ИмяПредмета) <> Неопределено Тогда
					// зададим вопрос
					
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПродолжитьВыполнениеПослеПодтвержденияОчистки",
						ЭтотОбъект,
						ДопПараметры);
					
					Кнопки = Новый СписокЗначений;
					Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Продолжить'"));
					Кнопки.Добавить(КодВозвратаДиалога.Отмена);
					
					ТекстВопроса = НСтр("ru = '  Обработка этого предмета уже размещена в схеме.
					|При выборе, связанная с этим предметом настройка
					|обработки будет очищена.
					|
					|Продолжить?'");
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
					
					Возврат;
					
				КонецЕсли;	
				
				ИмяПредмета = МассивПредметов[0];
				УстановитьНастройкуИмяПредмета(Форма, ИмяЭлемента, ИмяПредмета);
				
			ИначеЕсли МассивПредметов.Количество() > 1 Тогда // тут диалог выбора
			
				ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
					"ПродолжитьВыполнениеПослеВыбораПредметаОбработки",
					ЭтотОбъект,
					ДопПараметры);
				
				ПараметрыОткрытия = Новый Структура("МассивПредметовОбработки, ИспользованныеПредметы", 
					МассивПредметов, ИспользованныеПредметы);
				ОткрытьФорму("ОбщаяФорма.ВыборПредметаОбработки", 
					ПараметрыОткрытия,,,,,
					ОписаниеОповещенияОЗакрытии, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
			
		Иначе	

			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ВладелецШаблона", Форма.Объект.Ссылка);
			ПараметрыОповещения.Вставить("Предметы", Форма.Объект.Предметы);
			ПараметрыОповещения.Вставить("ШаблонБП", ЗначениеНастройки);
						
			Если ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков) Тогда
				ДатаОтсчета = СрокиИсполненияПроцессовКлиентСерверКОРП.ДатаОтсчетаДействияКомплексногоПроцессаВФорме(
					Форма);
				ПараметрыОповещения.Вставить("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчета);
			КонецЕсли;
	
			Оповестить("ВыборШаблонаДействия", ПараметрыОповещения);
					
		КонецЕсли;
		
	ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоСкриптСхемы(ТипЭлемента) Тогда
		
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УстановитьНастройкуЭлементуСхемыВФорме(
			Форма, ИмяЭлемента, ЗначениеНастройки);
				
		СхемыПроцессовКлиентСервер.УстановитьОписаниеЭлементуСхемы(
			ИмяЭлемента, Форма, Строка(ЗначениеНастройки));
		
	ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ТипЭлемента) Тогда 
			
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УстановитьНастройкуЭлементуСхемыВФорме(
			Форма, ИмяЭлемента, ЗначениеНастройки.НастройкиУсловия);
		
		СхемыПроцессовКлиентСервер.УстановитьОписаниеЭлементуСхемы(
			ИмяЭлемента, Форма, ЗначениеНастройки.Описание);
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Если ОбработчикНастройки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработчикНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ЗавершитьНастройкуЭлементаСхемы
//
Процедура ПродолжитьВыполнениеПослеПодтвержденияОчистки(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Форма = ДопПараметры.Форма; 		
		ИмяЭлемента = ДопПараметры.ИмяЭлемента;
		ОбработчикНастройки = ДопПараметры.ОбработчикНастройки;
		
		МассивПредметов = ПредметыДляОбработки(Форма);
		ИмяПредмета = МассивПредметов[0];

		// очистим прежние настройки
		ОчиститьПрежниеПредметыДляОбработки(Форма, ИмяПредмета);
		
		УстановитьНастройкуИмяПредмета(Форма, ИмяЭлемента, ИмяПредмета);
		
		Форма.Модифицированность = Истина;
		
		Если ОбработчикНастройки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОбработчикНастройки);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Продолжение процедуры ЗавершитьНастройкуЭлементаСхемы.
//
Процедура ПродолжитьВыполнениеПослеВыбораПредметаОбработки(
	ИмяПредмета, ДопПараметры) Экспорт
	
	Если ИмяПредмета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма; 		
	ИмяЭлемента = ДопПараметры.ИмяЭлемента;
	ОбработчикНастройки = ДопПараметры.ОбработчикНастройки;
	
	// очистим прежние настройки
	ОчиститьПрежниеПредметыДляОбработки(Форма, ИмяПредмета);
	
	УстановитьНастройкуИмяПредмета(Форма, ИмяЭлемента, ИмяПредмета);
	
	Форма.Модифицированность = Истина;
	
	Если ОбработчикНастройки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработчикНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Открывает карточку процесса элемента в схеме.
//
// Параметры:
//  Форма - Карточка комплексного процесса процесса.
//  Процесс - ОпределяемыйТип.ДействиеКомплексногоПроцесса - процесс элемента.
//  ЭлементПройден - Булево - Признак пройденного элемента.
//
Процедура ОткрытьПроцессЭлемента(Форма, Процесс, ЭлементПройден = Ложь) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Процесс) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Процесс);
	
	Если Не ЭлементПройден Тогда
		ПараметрыФормы.Вставить("ЗаявкаНаПереносСрока", Форма.ЗаявкаНаПереносСрока);
	КонецЕсли;
	
	ИмяФормыДляОткрытия = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяФормыНастройкиЭлементаСхемы(
			Форма, Процесс);
	
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открывает карточку шаблона процесса элемента в схеме.
//
// Параметры:
//  Форма - Карточка комплексного процесса / шаблона.
//  Шаблон - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса - шаблон процесса.
//
Процедура ОткрытьШаблонПроцессаЭлемента(Форма, Шаблон) Экспорт
		
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыДляОткрытия = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяФормыНастройкиЭлементаСхемы(
			Форма, Шаблон);
	
	ЭтоШаблон = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(ИмяФормыДляОткрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Шаблон);
	
	Если ЭтоШаблон Тогда
		ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	Иначе
		Если ЗначениеЗаполнено(Форма.Объект.Автор) Тогда
			ПараметрыФормы.Вставить(
				"ТолькоПросмотр",
				Не Форма.ДоступностьПоШаблону И ЗначениеЗаполнено(Форма.Объект.Шаблон));
		КонецЕсли;
	КонецЕсли;
	
	Предметы = Новый Массив;
	Для Каждого СтрокаПредмет Из Форма.Объект.Предметы Цикл
		Предметы.Добавить(СтрокаПредмет.Предмет);
	КонецЦикла;
	Если Предметы.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ПредметыПроцесса", Предметы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков) Тогда
		ДатаОтсчета = СрокиИсполненияПроцессовКлиентСерверКОРП.ДатаОтсчетаДействияКомплексногоПроцессаВФорме(
			Форма);
		ПараметрыФормы.Вставить("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчета);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеЭлементыСхемы

// Обновляет признак текущего элемента в схеме карточки процесса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса.
//  ИмяЭлемента - Строка - имя элемента в схеме. 
//
Процедура ИнвертироватьОтметкуТекущийДляЭлементаСхемыВФорме(Форма, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	ОтметкаТекущий = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОтметкаТекущийДляЭлементаСхемыВФорме(
		ИмяЭлемента, Форма);
	
	Если ОтметкаТекущий Тогда
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УдалитьОтметкуТекущегоСЭлемента(
			Форма.ДанныеПараметровСхемы.ТекущиеЭлементы, ИмяЭлемента);
	Иначе
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОтметитьЭлементСхемыТекущим(
			Форма.ДанныеПараметровСхемы.ТекущиеЭлементы, ИмяЭлемента);
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область ПроцессыЭлементовДляПрерывания

// Обновляет признак прерванного процесса элемента в схеме карточки процесса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса.
//  ИмяЭлемента - Строка - имя элемента в схеме. 
//  Процесс - ОпределяемыйТип.ДействиеКомплексногоПроцесса - процесс элемента. 
//
Процедура ИнвертироватьОтметкуПрерванДляПроцессаЭлементаСхемыВФорме(
	Форма, ИмяЭлемента, Процесс) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Процесс) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДанныеДействияВФорме(
		Форма, Процесс);
		
	Если ДанныеПроцесса.ПроцессЗавершен
		Или ДанныеПроцесса.СостояниеПроцесса = ПредопределенноеЗначение(
		"Перечисление.СостоянияБизнесПроцессов.Прерван") Тогда
		
		Возврат;
	КонецЕсли;
	
	ПроцессыДляПрерывания = Форма.ДанныеПараметровСхемы.ПроцессыЭлементовДляПрерывания;
	ТекущиеЭлементы = Форма.ДанныеПараметровСхемы.ТекущиеЭлементы;
	
	ОтметкаПрерванТекущая = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПроцессЭлементаОтмеченКПрерыванию(
		ПроцессыДляПрерывания, Процесс);
	
	Если ОтметкаПрерванТекущая Тогда
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УдалитьОтметкуПрерыванияСПроцессаЭлдемента(
			ПроцессыДляПрерывания, Процесс);
		
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОтметитьЭлементСхемыТекущим(
			ТекущиеЭлементы, ИмяЭлемента);	
	Иначе
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОтметитьПроцессЭлементаКПрерыванию(
			ПроцессыДляПрерывания, Процесс);
		
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УдалитьОтметкуТекущегоСЭлемента(
			ТекущиеЭлементы, ИмяЭлемента);
			
		ТекстПредупреждения = 
			НСтр("ru = 'Действие (вложенный процесс) будет прервано при следующей записи процесса.
			|Для отмены снимите пометку прерывания.'");
			
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;

КонецПроцедуры

// Открывает форму со списком процессов, которые были отмечены к прерыванию
// в ходей действий пользователя. Список процессов передается параметром Процессы.
// 
// Параметры:
//  Процессы - Массив
//   * ОпределяемыйТип.ДействиеКомплексногоПроцесса
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса. 
//
Процедура ПредупредитьОбОтмеченныхКПрерываниюПроцессахЭлементов(Процессы, Форма) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроцессыКПрерыванию", Процессы);
	
	ОткрытьФорму("ОбщаяФорма.ПредупреждениеОПрерыванииПроцессовЭлементовСхемы",
		ПараметрыФормы, Форма);

КонецПроцедуры

// Открывает диалог ввода причины прерывания процессов схемы.
// Предназначена для вызова из обработчика ПередЗаписью карточки процесса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса.
//  Отказ - Булево - стандартный реквизит обработчика ПередЗаписью формы процесса.
//  ПараметрыЗаписи - Структура - ПараметрыЗаписи - стандартный реквизит обработчика ПередЗаписью формы процесса.
//
Процедура ВвестиПричинуПрерыванияПроцессовЭлементовСхемы(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессыКПрерыванию = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПроцессыЭлементовДляПрерывания(Форма);
	
	Если ЗначениеЗаполнено(ПроцессыКПрерыванию.ПричинаПрерывания) Тогда
		Возврат;
	КонецЕсли;
		
	Если ПроцессыКПрерыванию.Процессы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжитьВыполнениеПослеВводаПричинуПрерыванияПроцессовЭлементовСхемы",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СписокПроцессов = Новый Массив;
	Для Каждого КлючЗначение Из ПроцессыКПрерыванию.Процессы Цикл
		СписокПроцессов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроцессыКПрерыванию", СписокПроцессов);
	
	ОткрытьФорму("ОбщаяФорма.ВводПричиныПрерыванияПроцессовЭлементовСхемы",
		ПараметрыФормы,
		Форма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

// Обрабатывает обновление данных схемы в карточке процесса / шаблона.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса / шаблона.
//  ДобавленныеЭлементы - Массив - имена добавленных элементов.
//   * Строка
//  УдаленныеЭлементы - Массив - имена удаленных элементов.
//   * Строка
//
Процедура ОбработатьОбновлениеДанныхСхемы(Форма, ДобавленныеЭлементы, УдаленныеЭлементы) Экспорт
		
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьНастройкиЭлементовПоИзменениямСхемы(
		Форма, ДобавленныеЭлементы, УдаленныеЭлементы);
		
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьОтметкиТекущихЭлементовПоИзменениямСхемы(
		Форма, ДобавленныеЭлементы, УдаленныеЭлементы);
		
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьОтметкиПройденныхЭлементовПоИзменениямСхемы(
		Форма, ДобавленныеЭлементы, УдаленныеЭлементы);
	
	ПроцессыДобавленныеКПрерыванию = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОтметитьПроцессыУдаленныхЭлементовКПрерываниюВФорме(
			Форма, УдаленныеЭлементы);
		
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьСписокПроцессовЭлементовСхемы(
		Форма, ДобавленныеЭлементы, УдаленныеЭлементы);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставлениеСхемыВФорме(Форма);
			
	Если ДобавленныеЭлементы.Количество() = 1
		И УдаленныеЭлементы.Количество() = 0 Тогда
				
		ИмяЭлементаСхемы = ДобавленныеЭлементы[0];
			
		ТипЭлементаСхемы = СхемыПроцессовКлиент.ТипЭлементаСхемыПоДаннымСхемыВФорме(
			ИмяЭлементаСхемы, Форма);
				
		Если СхемыПроцессовКлиентСервер.ЭтоБлокВыполненияСхемы(ТипЭлементаСхемы) Тогда 
			РаботаСКомплекснымиБизнесПроцессамиКлиент.НастроитьПараметрыЭлементаСхемы(
				Форма, ИмяЭлементаСхемы, ТипЭлементаСхемы);
		КонецЕсли;
	Иначе
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ПредупредитьОбОтмеченныхКПрерываниюПроцессахЭлементов(
			ПроцессыДобавленныеКПрерыванию, Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаЭтапов

// Устанавливает предшественников у этапа комплексного процесса или шаблона комплексного процесса
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - идентификатор этапа, для которого устанавливаются предшественники
//	СписокПредшественников - список значений
// 	 Значение - структура
//		ИдентификаторПредшественника - идентификатор этапа-предшественника
//		УсловиеПерехода - АлгоритмПроверки
//		УсловиеРассмотрения - УсловияРассмотренияПредшественниковЭтапа
Процедура УстановитьПредшественниковЭтапа(Знач Объект, ИдентификаторЭтапа, СписокПредшественников) Экспорт
	
	УдалитьВсехПредшественниковЭтапа(Объект, ИдентификаторЭтапа);
	
	Для каждого Предшественник Из СписокПредшественников Цикл
		НовыйПредшественник = Объект.ПредшественникиЭтапов.Добавить();
		НовыйПредшественник.ИдентификаторПоследователя = ИдентификаторЭтапа;
		НовыйПредшественник.ИдентификаторПредшественника = Предшественник.Значение.ИдентификаторПредшественника;
		НовыйПредшественник.УсловиеПерехода = Предшественник.Значение.УсловиеПерехода;
		НовыйПредшественник.УсловиеРассмотрения = Предшественник.Значение.УсловиеРассмотрения;
		НовыйПредшественник.ИмяПредметаУсловия = Предшественник.Значение.ИмяПредметаУсловия;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет записи обо всех предшественниках этапа процесса или шаблона процесса
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - идентификатор этапа, для которого удаляются записи о предшественниках
Процедура УдалитьВсехПредшественниковЭтапа(Знач Объект, ИдентификаторЭтапа) Экспорт
	
	Пока УЭтапаЕстьПредшественники(Объект, ИдентификаторЭтапа) Цикл
		Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
			Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
				Объект.ПредшественникиЭтапов.Удалить(Предшественник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что у этапа есть предшественники
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - уникальный идентификатор этапа в объекте
// Возвращает:
//	Истина, если у этапа есть предшественники
//	Ложь, если у этапа нет предшественников
Функция УЭтапаЕстьПредшественники(Знач Объект, ИдентификаторЭтапа) Экспорт
	
	Для каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Вычисляет строковое представление предшественников для всех этапов
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
Процедура ВычислитьОписаниеПредшественников(Объект) Экспорт
	
	Для Каждого ЭтапОбъекта Из Объект.Этапы Цикл
		ЭтапОбъекта.ПредшественникиЭтапаСтрокой = "";	
	КонецЦикла;
	
	Для Каждого ЭтапОбъекта Из Объект.Этапы Цикл	
		ИдентификаторЭтапа = ЭтапОбъекта.ИдентификаторЭтапа;
		СтрокаРезультат = "";
		СтрокаСвязка = " " + НСтр("ru = 'и'") + " ";
		Если ЭтапОбъекта.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
			СтрокаСвязка = " " + НСтр("ru = 'или'") + " ";
		КонецЕсли;
		Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл			
			Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
				Если ЭтапУдален(Объект, Предшественник.ИдентификаторПредшественника) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПростоеУсловие = "";
				Если ЗначениеЗаполнено(Предшественник.УсловиеРассмотрения) 
					И Предшественник.ИдентификаторПредшественника <> УникальныйИдентификаторПустой() Тогда
					
					Для Каждого ЭтапПредшественник Из Объект.Этапы Цикл
						Если ЭтапПредшественник.ИдентификаторЭтапа = Предшественник.ИдентификаторПредшественника Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не согласовано '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если согласовано '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияБезЗамечаний") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если согласовано без замечаний'");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияСЗамечаниями") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если согласовано с замечаниями'");
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не утверждено '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если утверждено '");
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныПодписания") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не подписано '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если подписано '");
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не зарегистрировано '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если зарегистрировано '");
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не принято '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если принято '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияСЗамечаниями") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если принято обязательными '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияБезЗамечаний") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если принято всеми '");
						КонецЕсли;
					Иначе
						СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаРезультат) Тогда
					СтрокаРезультат = СтрокаРезультат + СтрокаСвязка + НРег(СтрокаПростоеУсловие) + ПолучитьПредставлениеЭтапа(Объект, Предшественник.ИдентификаторПредшественника);
				Иначе
					СтрокаРезультат = СтрокаПростоеУсловие + ПолучитьПредставлениеЭтапа(Объект, Предшественник.ИдентификаторПредшественника);
				КонецЕсли;
				Если ЗначениеЗаполнено(Предшественник.УсловиеПерехода) Тогда
					СтрокаРезультат = СтрокаРезультат + НСтр("ru = ', если '") + Строка(Предшественник.ИмяПредметаУсловия) + "." + НРег(Строка(Предшественник.УсловиеПерехода)) + ",";
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		ЭтапОбъекта.ПредшественникиЭтапаСтрокой = СтрокаРезультат;
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму выбора типа процесса при настройке действия процесса или шаблона процесса
// Параметры:
//	ИдентификаторЭтапа - уникальный идентификатор этапа в процессе или шаблоне процесса
//	ВладелецФормы - элемент владелец открываемой формы
//	ВладелецДействия - ссылка на процесс или шаблон процесса, в котором настраивается действие
//	Предмет - ссылка на предмет процесса
Процедура ОткрытьФормуВыбораДействияЭтапа(
	ИдентификаторЭтапа,
	ВладелецФормы,
	ВладелецДействия,
	Предметы,
	ДатаОтсчетаДляРасчетаСроков = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторЭтапа", ИдентификаторЭтапа);
	Параметры.Вставить("ВладелецШаблона", ВладелецДействия);
	Параметры.Вставить("Предметы", Предметы);
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		Параметры.Вставить("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчетаДляРасчетаСроков);
	КонецЕсли;
	
	ПредметыПроцесса = Новый Массив;
	Для Каждого СтрокаПредмета Из Предметы Цикл
		ПредметыПроцесса.Добавить(СтрокаПредмета.Предмет);
	КонецЦикла;
	
	ПродолжениеНастройки = Новый ОписаниеОповещения(
		"ПродолжениеОткрытьФормуВыбораДействияЭтапа",
		РаботаСКомплекснымиБизнесПроцессамиКлиент, Параметры);

	ТипДействия = "";
	ПомощникОтправитьКлиентКОРП.ВыбратьВариантОтправкиДействияКомплексногоПроцесса(
		ТипДействия, ПредметыПроцесса, ВладелецФормы, ПродолжениеНастройки);
	
КонецПроцедуры

// Продолжение ОткрытьФормуВыбораДействияЭтапа.
//
Процедура ПродолжениеОткрытьФормуВыбораДействияЭтапа(ВыбранноеДействие, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеДействие) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ШаблонБП", ВыбранноеДействие);
	Оповестить("ВыборШаблонаДействия", Параметры);
	
КонецПроцедуры

// Открывает форму настройки предшественников этапа
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ДанныеЭтапа - структура
//		ИдентификаторЭтапа - уникальный идентификатор этапа, для которого настраиваются предшественники
//		ПредшественникиВариантИспользования - строка
Процедура ОткрытьФормуНастройкиПредшественниковЭтапа(Знач Объект, ДанныеЭтапа, Элемент) Экспорт
		
	ВсеЭтапы = Новый СписокЗначений;
	Для Каждого Этап Из Объект.Этапы Цикл
		ДанныеОдногоЭтапа = Новый Структура;
		ДанныеОдногоЭтапа.Вставить("ИдентификаторЭтапа", Этап.ИдентификаторЭтапа);
		ДанныеОдногоЭтапа.Вставить("ЗадачаЭтапа", Этап.ЗадачаЭтапа);
		ДанныеОдногоЭтапа.Вставить("НомерЭтапа", ПолучитьПредставлениеЭтапа(Объект, Этап.ИдентификаторЭтапа));
		ДанныеОдногоЭтапа.Вставить("ШаблонБизнесПроцесса", Этап.ШаблонБизнесПроцесса);
		ДанныеОдногоЭтапа.Вставить("Удален", Этап.Удален);
		ВсеЭтапы.Добавить(ДанныеОдногоЭтапа);
	КонецЦикла;
	
	ПредшественникиЭтапа = Новый СписокЗначений;
	Для каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ДанныеЭтапа.ИдентификаторЭтапа Тогда
			ДанныеПредшественника = Новый Структура;
			ДанныеПредшественника.Вставить("ИдентификаторПредшественника", Предшественник.ИдентификаторПредшественника);
			Данныепредшественника.Вставить("УсловиеПерехода", Предшественник.УсловиеПерехода);
			ДанныеПредшественника.Вставить("УсловиеРассмотрения", Предшественник.УсловиеРассмотрения);
			ДанныеПредшественника.Вставить("ИмяПредметаУсловия", Предшественник.ИмяПредметаУсловия);
			ПредшественникиЭтапа.Добавить(ДанныеПредшественника);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Этапы", ВсеЭтапы);
	ПараметрыФормы.Вставить("Предшественники", ПредшественникиЭтапа);
	ПараметрыФормы.Вставить("ПредшественникиВариантИспользования", ДанныеЭтапа.ПредшественникиВариантИспользования);
	ПараметрыФормы.Вставить("ИдентификаторТекущегоЭтапа", ДанныеЭтапа.ИдентификаторЭтапа);
	ПараметрыФормы.Вставить("ВладелецЭтапа", Объект.Ссылка);
	ПараметрыФормы.Вставить("ИменаПредметов", МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект));
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ПараметрыФормы.Вставить(
			"ДоступностьПоШаблону", 
			Элемент.ДоступностьПоШаблону И Не Элемент.Элементы.ЭтапыПредшественникиЭтапаСтрокой.ТолькоПросмотр);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПредшественниковЭтапаКомплексногоПроцесса", ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти

// Выводит диалог выбора варианта редактирования маршрута комплексного процесса/шаблона.
// В обработчик оповещения передает результат выбора - строка "Схема" или "ТаблицаДействий".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  ОповещениеПослеВыбора - ОписаниеОповещения - описание оповещения, которое будет
//                          вызвано после выбора варианта редактирования маршрута.
//
Процедура ВыбратьВариантРедактированияМаршрута(Форма, ОповещениеПослеВыбора) Экспорт
	
	// В веб клиенте отключаем возможность выбора варианта настройки, т.к.
	// часть полей элементов графической схемы не доступно.
	// По умолчанию новые комплексные процессы и шаблоны настраиваются
	// при помощи таблицы действий.
#Если ВебКлиент Тогда
		Возврат;
#КонецЕсли
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка)
		Или РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(Форма)
		Или Форма.Объект.Этапы.Количество() > 0 Тогда
		
		Возврат;
	КонецЕсли;
		
	ОткрытьФорму("ОбщаяФорма.ВыборВариантаНастройкиКомплексногоПроцесса",,
		Форма,,,,
		ОповещениеПослеВыбора,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Выполняет запись нового комплексного процесса/шаблона перед интерактивной настройкой
// подчиненных элементов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона.
//
// Возвращаемое значение:
//  Булево - возвращает Ложь, если в ходе записи возникли ошибки, иначе - Истина.
//
Функция ЗаписатьНовыйПроцессПередНастройкойПодчиненногоЭлемента(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗаписи = Неопределено;
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		// Отключаем проверку заполнения при первой записи шаблона, т.к. при интерактивном добавлении он
		// еще не сохранен в вышестоящем владельце, и если в заполнении текущего шаблона есть ошибки,
		// то будет невозможно сохранить его владельца.
		// Это сделано для того, чтобы была возможность добавить действие/условие/обработку в новый шаблон.
		// Для добавления действия требуется записанный в базу владелец.
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("НеПроверятьЗаполнение", Истина);
	КонецЕсли;
	
	Возврат Форма.Записать(ПараметрыЗаписи);
	
КонецФункции

// Общий обработчик события "Перед записью" на карточке шаблона процесса
Процедура ФормаНастройкиДействияПередЗаписью(Форма, Отказ) Экспорт
	
	Если Форма.Объект.ШаблонВКомплексномПроцессе Тогда
			
		ОчиститьСообщения();
		
		Если Форма.Элементы.Найти("Важность") <> Неопределено И НЕ ЗначениеЗаполнено(Форма.Объект.Важность) Тогда
			Текст = НСтр("ru = 'Поле ""Важность"" не заполнено'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст,, "Объект.Важность",, Отказ);
		КонецЕсли;
		
		ТребуетсяПроверкаЗаполненияИсполнителейДействия = 
			РаботаСКомплекснымиБизнесПроцессамиВызовСервера.ТребуетсяПроверкаЗаполненияИсполнителейДействия(
				Форма.Объект.Ссылка, Форма.Объект.ВладелецШаблона, Форма.Объект.КомплексныйПроцесс);
		
		Если ТребуетсяПроверкаЗаполненияИсполнителейДействия Тогда	
			Если Форма.Элементы.Найти("Исполнители") <> Неопределено Тогда
				Если Форма.Объект.Исполнители.Количество() = 0 Тогда
					Текст = НСтр("ru = 'Не указаны исполнители'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(Текст,, "Объект.Исполнители",, Отказ);
				КонецЕсли;  
			КонецЕсли;
			Если Форма.Элементы.Найти("Исполнители") = Неопределено 
				И Форма.Элементы.Найти("Исполнитель") <> Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(Форма.Объект.Исполнитель) Тогда
					Текст = НСтр("ru = 'Поле ""Исполнитель"" не заполнено'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(Текст,, "Объект.Исполнитель",,Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.НаименованиеБизнесПроцесса) Тогда
			Форма.Объект.Наименование = Строка(ТипЗнч(Форма.Объект.Ссылка));
		Иначе
			Форма.Объект.Наименование = Форма.Объект.НаименованиеБизнесПроцесса;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Форма, "ИсходныеИменаПредметов") Тогда
		
			Форма.ИсходныеИменаПредметов.Очистить();
			Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
				НоваяСтрока = Форма.ИсходныеИменаПредметов.Добавить();
				НоваяСтрока.ИндексСтроки = СтрокаПредмета.ПолучитьИдентификатор();
				НоваяСтрока.ИсходноеИмяПредмета = СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса;
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выполняет оповещение о создании действия в процессе или шаблоне процесса
// Параметры:
//	Форма - форма, с которой выполняется оповещение
Процедура ОповеститьПослеЗаписиНастройкиДействия(Форма) Экспорт
		
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ШаблонБП", Форма.Объект.Ссылка);
	ПараметрыОповещения.Вставить("ВладелецШаблона", Форма.Объект.ВладелецШаблона);
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
		Или ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ПараметрыОповещения.Вставить("ВладелецШаблона", Форма.Владелец);
	КонецЕсли;
	
	МассивПредметов = Новый Массив;
	
	Попытка
		Для Каждого Строка Из Форма.ИсходныеИменаПредметов Цикл
			СтрокаПредмета = Форма.Объект.Предметы.НайтиПоИдентификатору(Строка.ИндексСтроки);
			Если СтрокаПредмета <> Неопределено Тогда
				СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса = Строка.ИсходноеИмяПредмета;
			КонецЕсли;
		КонецЦикла;
	Исключение
		// Реквизита может не быть
	КонецПопытки;
		
	Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
		СтруктураПредмета = Новый Структура;
		СтруктураПредмета.Вставить("ИмяПредмета", СтрокаПредмета.ИмяПредмета);
		СтруктураПредмета.Вставить("Предмет",СтрокаПредмета.Предмет);
		СтруктураПредмета.Вставить("РольПредмета", СтрокаПредмета.РольПредмета);
		СтруктураПредмета.Вставить("ИмяПредметаОснование", СтрокаПредмета.ИмяПредметаОснование);
		СтруктураПредмета.Вставить("ШаблонОснование", СтрокаПредмета.ШаблонОснование);
		СтруктураПредмета.Вставить("ИсходноеИмяПредмета", СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса);
		МассивПредметов.Добавить(СтруктураПредмета);
	КонецЦикла;
	
	ПараметрыОповещения.Вставить("Предметы", МассивПредметов);
	
	Оповестить("СозданиеДействия", ПараметрыОповещения, Форма);
	
	Форма.Прочитать();
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Форма.Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеПредметовШаблона(Форма.Объект);
	
	Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
		СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса = СтрокаПредмета.ИмяПредмета;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СхемаПроцесса

#Область НастройкиЭлементов

// Открывает карточку настройки или процесса элемента, размещенного в схеме. 
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка шаблона/процесса.
//  ИмяЭлемента - Строка - имя действия
//
Процедура ОткрытьНастройкуИлиПроцессЭлементаСхемы(Форма, ИмяЭлемента) Экспорт
	
	НастройкаЭлемента = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастройкаЭлементаСхемыВФорме(
		Форма, ИмяЭлемента);
	
	Процесс = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПроцессЭлементаСхемыВФорме(
		ИмяЭлемента, Форма);
	
	Текущий = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОтметкаТекущийДляЭлементаСхемыВФорме(
		ИмяЭлемента, Форма);
	
	Пройден = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОтметкаПройденДляЭлементаСхемыВФорме(
		ИмяЭлемента, Форма);
	
	ДанныеДействия = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДанныеДействияВФорме(
		Форма,
		Процесс);
	СостояниеПроцесса = ДанныеДействия.СостояниеПроцесса;
	
	ПроцессыСхемыКПрерыванию =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПроцессыЭлементовДляПрерывания(Форма);
		
	НастройкаИлиПроцесс =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастройкаИлиПроцессЭлементаСхемы(
			НастройкаЭлемента, Процесс, Текущий, СостояниеПроцесса, ПроцессыСхемыКПрерыванию);
	
	Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(НастройкаИлиПроцесс) Тогда
		ОткрытьШаблонПроцессаЭлемента(Форма, НастройкаИлиПроцесс);
	Иначе		
		ОткрытьПроцессЭлемента(Форма, НастройкаИлиПроцесс, Пройден);
	КонецЕсли;
	
КонецПроцедуры

// Предметы для обработки.
// 
// Параметры:
//  Форма Форма
// 
// Возвращаемое значение:
// Массив из СправочникСсылка.ИменаПредметов
//  
Функция ПредметыДляОбработки(Форма)
	
	МассивПредметов = Новый Массив;
	
	Для Каждого Стр Из Форма.Объект.Предметы Цикл
		
		Если ТипЗнч(Стр.Предмет) = Тип("СправочникСсылка.ДокументыПредприятия")
			Или ТипЗнч(Стр.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
			МассивПредметов.Добавить(Стр.ИмяПредмета);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат МассивПредметов;
	
КонецФункции	

// Использованные в нстройках предметы для обработки.
// 
// Параметры:
//  Форма Форма
// 
// Возвращаемое значение:
// Массив из СправочникСсылка.ИменаПредметов
//  
Функция ИспользованныеПредметыДляОбработки(Форма)
	
	МассивПредметов = Новый Массив;
	
	Для Каждого Стр Из Форма.Объект.Предметы Цикл
		
		Если ТипЗнч(Стр.Предмет) = Тип("СправочникСсылка.ДокументыПредприятия")
			Или ТипЗнч(Стр.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			Для Каждого СтрНастроек Из Форма.ДанныеПараметровСхемы.НастройкиЭлементов Цикл
				
				Если СтрНастроек.Значение = Стр.ИмяПредмета Тогда
					МассивПредметов.Добавить(Стр.ИмяПредмета);
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;	
				
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат МассивПредметов;
	
КонецФункции	

// Очистить прежние предметы для обработки.
// 
// Параметры:
//  Форма Форма
//  ИмяПредмета Имя предмета
Процедура ОчиститьПрежниеПредметыДляОбработки(Форма, ИмяПредмета)
	
	Для Каждого СтрНастроек Из Форма.ДанныеПараметровСхемы.НастройкиЭлементов Цикл
		
		Если СтрНастроек.Значение = ИмяПредмета Тогда
			Форма.ДанныеПараметровСхемы.НастройкиЭлементов[СтрНастроек.Ключ] = Неопределено;
			
			СхемыПроцессовКлиентСервер.УстановитьОписаниеЭлементуСхемы(
				СтрНастроек.Ключ, Форма);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

// Установить настройку имя предмета.
// 
// Параметры:
//  Форма Форма
//  ИмяЭлемента Имя элемента
//  ИмяПредмета Имя предмета
Процедура УстановитьНастройкуИмяПредмета(Форма, ИмяЭлемента, ИмяПредмета)

	Форма.ДанныеПараметровСхемы.НастройкиЭлементов[ИмяЭлемента] = ИмяПредмета;
	Форма.ДанныеПараметровСхемы.ПараметрыСхемыИзменены = Истина;
	
	ПараметрыОформления = СхемыПроцессовКлиентСервер.ПараметрыОформленияЭлементаСхемы();
	ПараметрыОформления.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ПараметрыОформления.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПараметрыОформления.ОписаниеЭлемента = СтрШаблон(НСтр("ru = 'Обработка ""%1""'"), ИмяПредмета);
	
	СхемыПроцессовКлиентСервер.УстановитьОписаниеЭлементуСхемы(
		ИмяЭлемента, 
		Форма,
		,
		ПараметрыОформления);

КонецПроцедуры

#КонецОбласти

#Область ПроцессыЭлементовДляПрерывания

// Продолжение процедуры ВвестиПричинуПрерыванияПроцессовЭлементовСхемы.
//
Процедура ПродолжитьВыполнениеПослеВводаПричинуПрерыванияПроцессовЭлементовСхемы(
	ПричинаПрерывания, ДополнительныеПараметры) Экспорт
	
	Если ПричинаПрерывания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УстановитьПричинуПрерыванияПроцессовЭлементов(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПроцессыЭлементовДляПрерывания(Форма),
		ПричинаПрерывания);
	
	Форма.Записать(ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ЗакрытьФормуПослеЗаписи")
		И ПараметрыЗаписи.ЗакрытьФормуПослеЗаписи Тогда
		
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ТаблицаЭтапов

Функция ПолучитьПредставлениеЭтапа(Знач Объект, ИдентификаторЭтапа)
	
	Если ИдентификаторЭтапа = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Возврат НСтр("ru = 'При старте процесса'");
	Иначе
		ПараметрыОтбора = Новый Структура("ИдентификаторЭтапа", ИдентификаторЭтапа);
		МассивНайденных = Объект.Этапы.НайтиСтроки(ПараметрыОтбора);
		Если МассивНайденных.Количество() > 0 Тогда
			НайденныйЭтап = МассивНайденных[0];
			Возврат Строка(Объект.Этапы.Индекс(НайденныйЭтап) + 1);
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

Функция ЭтапУдален(Знач Объект, ИдентификаторЭтапа)
	
	Для Каждого ЭтапПроцесса Из Объект.Этапы Цикл
		Если ЭтапПроцесса.ИдентификаторЭтапа = ИдентификаторЭтапа И ЭтапПроцесса.Удален Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти