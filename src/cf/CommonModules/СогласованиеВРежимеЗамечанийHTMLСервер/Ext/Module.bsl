#Область ПрограммныйИнтерфейс

// Преобразует HTML, сохраненный из Word - тегирует, заменяет списки (mso-list), удаляет комментарии (Footnote).
// Параметры
// ТекстHTML, 
// МаксимальныйНомер - возвращаемое значение, максимальный использованный номер N в span id=do_N 
// 	ПравкиТаблица  - таблица значений 
// 	СравнениеСШаблоном - Булево, 
// 	БизнесПроцесс - БизнесПроцессСсылка
// 	Подготовил  - СправочникСсылка.Сотрудники, 
// 	НомерИтерации - Число,
// 	ЭтоВторойЦиклИлиВыше - Булево,
// 	ЭтоТиповой  - Булево
//
// Возвращаемое значение  -Строка - html текст, обработанный
Функция ПодготовитьHtmlИзWordКРедакторуHtml(ТекстHTML, МаксимальныйНомер, 
	ПравкиТаблица = Неопределено, СравнениеСШаблоном = Ложь, БизнесПроцесс = Неопределено,
	Подготовил = Неопределено, НомерИтерации = 0,
	ЭтоВторойЦиклИлиВыше = Ложь,
	ЭтоТиповой = Ложь,
	ОбработкаНеТребуется = Ложь) Экспорт
	
	ТекстHTMLНРег = НРег(ТекстHTML);
	Если СтрНайти(ТекстHTMLНРег, "span id=do_") <> 0 Тогда
		
		ЗаписьЖурналаРегистрации("ПодготовитьHtmlИзWordКРедакторуHtml", 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Уже обработан ранее - не тегируем'")
			);
		
		// Уже обработан ранее
		ОбработкаНеТребуется = Истина;
		Возврат ТекстHTML;
	КонецЕсли;	
	
	НовыйТекстHTML = ТекстHTML;
	
	УдалитьТекстПередHtml(НовыйТекстHTML);
	
	ЗаменитьКартинкиImageDataНаIMG(НовыйТекстHTML);
	ВырезатьОбрамлениеКартинок(НовыйТекстHTML);
	
	ВырезатьMsoDel(НовыйТекстHTML);
	
	КорректироватьОтрицательныеОтступыСлева = Истина; 
	Если КорректироватьОтрицательныеОтступыСлева Тогда
		КорректироватьОтрицательныеОтступыСлева_Выполнить(НовыйТекстHTML);
		КорректироватьОтрицательныеОтступыСлева_text_indent(НовыйТекстHTML);
	КонецЕсли;	
	
	ВставитьТеги(НовыйТекстHTML, МаксимальныйНомер);
	
	// вместо msoIns и msoChangeProp создадим правки, а msoIns и msoChangeProp сразу удалим
	Если ПравкиТаблица <> Неопределено Тогда
		ВставитьПравкиВМестахИзмененийWord(НовыйТекстHTML, ПравкиТаблица, СравнениеСШаблоном, БизнесПроцесс, 
			Подготовил, НомерИтерации, ЭтоВторойЦиклИлиВыше, ЭтоТиповой);
	КонецЕсли;	
	
	Возврат НовыйТекстHTML;
	
КонецФункции	

// Корректирует html.  margin-left с отрицательным значением приводим к 0.
//
//Параметры
//	ТекстПисьма -Строка, возвращаемое значение
//
Процедура КорректироватьОтрицательныеОтступыСлева_Выполнить(ТекстПисьма) Экспорт
	
	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 10000 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаПоиска1 = "margin-left:-";
		СтрокаПоиска2 = "margin-left: -";
		СтрокаПоиска3 = "margin-left:" + Символы.ВК + "-";
		СтрокаПоиска4 = "margin-left:" + Символы.ПС + "-";
		
		ПозицияМинус = 0;
		
		Позиция_1 = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска1,,НачальнаяПозиция);
		Позиция_2 = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска2,,НачальнаяПозиция);
		Позиция_3 = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска3,,НачальнаяПозиция);
		Позиция_4 = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска4,,НачальнаяПозиция);
		
		Если Позиция_1 = 0 И Позиция_2 = 0 И Позиция_3 = 0 И Позиция_4 = 0 Тогда
			Прервать;
		КонецЕсли;
		
		МассивПозиций = Новый Массив; // тут только ненулевые позиции
		Если Позиция_1 <> 0 Тогда
			МассивПозиций.Добавить(Новый Структура("Позиция, СтрокаПоиска", Позиция_1, СтрокаПоиска1));
		КонецЕсли;	
		Если Позиция_2 <> 0 Тогда
			МассивПозиций.Добавить(Новый Структура("Позиция, СтрокаПоиска", Позиция_2, СтрокаПоиска2));
		КонецЕсли;	
		Если Позиция_3 <> 0 Тогда
			МассивПозиций.Добавить(Новый Структура("Позиция, СтрокаПоиска", Позиция_3, СтрокаПоиска3));
		КонецЕсли;	
		Если Позиция_4 <> 0 Тогда
			МассивПозиций.Добавить(Новый Структура("Позиция, СтрокаПоиска", Позиция_4, СтрокаПоиска4));
		КонецЕсли;	
		
		МинПоз = 99000000;
		МинСтрока = "";
		Для Каждого Структ Из МассивПозиций Цикл
			
			Если Структ.Позиция < МинПоз Тогда
				
				МинПоз = Структ.Позиция;
				МинСтрока = Структ.СтрокаПоиска;
				
			КонецЕсли;	
				
		КонецЦикла;	
		
		ПозицияМинус = МинПоз + СтрДлина(МинСтрока) - 1;  
		
		// <p class=MsoNormal align=center style='margin-top:0cm;margin-right:-.1pt;
		//  margin-bottom:0cm;margin-left:-1.0cm;margin-bottom:.0001pt;text-align:center'>
		
		// ищем  либо p (в pt px cm em mm pc  %), либо ;'" что раньше (не более 30)
		НашлиP = Ложь;
		ПозицияP = 0;
		ДлинаТекста = СтрДлина(ТекстПисьмаДляПравкиНРег);
		
		Для Поз = 1 По 30 Цикл
			
			Если ПозицияМинус + Поз > ДлинаТекста Тогда 
				Прервать;
			КонецЕсли; 	
			
			Символ = Сред(ТекстПисьмаДляПравкиНРег, ПозицияМинус + Поз, 1);
			Если Символ = "p" Или Символ = "c" Или Символ = "%"  Или Символ = "m"  Или Символ = "e" Тогда
				НашлиP = Истина;
				ПозицияP = ПозицияМинус + Поз;
				Прервать;
			КонецЕсли; 	
			
			Если Символ = ";" Или Символ = "'" Или Символ = """" Тогда
				Прервать;
			КонецЕсли; 	
			
		КонецЦикла;	
		
		Если НашлиP Тогда
			
			ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, ПозицияМинус - 1)
				+ "0"
				+ Сред(ТекстПисьмаДляПравки, ПозицияP);
				
			ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
		
		КонецЕсли;
		
		НачальнаяПозиция = ПозицияМинус + 1;
		Продолжить;
			
	КонецЦикла;
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры	

// Корректирует html.  text-indent с отрицательным значением приводим к 0.
//
//Параметры
//	ТекстПисьма -Строка, возвращаемое значение
//
Процедура КорректироватьОтрицательныеОтступыСлева_text_indent(ТекстПисьма) Экспорт
	
	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 10000 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаПоиска1 = "text-indent:-";
		СтрокаПоиска2 = "text-indent: -";
		СтрокаПоиска3 = "text-indent:" + Символы.ВК + "-";
		СтрокаПоиска4 = "text-indent:" + Символы.ПС + "-";
		
		ПозицияМинус = 0;
		
		Позиция_1 = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска1,,НачальнаяПозиция);
		Позиция_2 = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска2,,НачальнаяПозиция);
		Позиция_3 = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска3,,НачальнаяПозиция);
		Позиция_4 = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска4,,НачальнаяПозиция);
		
		Если Позиция_1 = 0 И Позиция_2 = 0 И Позиция_3 = 0 И Позиция_4 = 0 Тогда
			Прервать;
		КонецЕсли;
		
		МассивПозиций = Новый Массив; // тут только ненулевые позиции
		Если Позиция_1 <> 0 Тогда
			МассивПозиций.Добавить(Новый Структура("Позиция, СтрокаПоиска", Позиция_1, СтрокаПоиска1));
		КонецЕсли;	
		Если Позиция_2 <> 0 Тогда
			МассивПозиций.Добавить(Новый Структура("Позиция, СтрокаПоиска", Позиция_2, СтрокаПоиска2));
		КонецЕсли;	
		Если Позиция_3 <> 0 Тогда
			МассивПозиций.Добавить(Новый Структура("Позиция, СтрокаПоиска", Позиция_3, СтрокаПоиска3));
		КонецЕсли;	
		Если Позиция_4 <> 0 Тогда
			МассивПозиций.Добавить(Новый Структура("Позиция, СтрокаПоиска", Позиция_4, СтрокаПоиска4));
		КонецЕсли;	
		
		МинПоз = 99000000;
		МинСтрока = "";
		Для Каждого Структ Из МассивПозиций Цикл
			
			Если Структ.Позиция < МинПоз Тогда
				
				МинПоз = Структ.Позиция;
				МинСтрока = Структ.СтрокаПоиска;
				
			КонецЕсли;	
				
		КонецЦикла;	
		
		ПозицияМинус = МинПоз + СтрДлина(МинСтрока) - 1;
		
		// ищем  либо p, либо ;'" что раньше (не более 30)
		НашлиP = Ложь;
		ПозицияP = 0;
		ДлинаТекста = СтрДлина(ТекстПисьмаДляПравкиНРег);
		
		Для Поз = 1 По 30 Цикл
			
			Если ПозицияМинус + Поз > ДлинаТекста Тогда 
				Прервать;
			КонецЕсли; 	
			
			Символ = Сред(ТекстПисьмаДляПравкиНРег, ПозицияМинус + Поз, 1);
			Если Символ = "p" Тогда
				НашлиP = Истина;
				ПозицияP = ПозицияМинус + Поз;
				Прервать;
			КонецЕсли; 	
			
			Если Символ = ";" Или Символ = "'" Или Символ = """" Тогда
				Прервать;
			КонецЕсли; 	
			
		КонецЦикла;	
		
		Если НашлиP Тогда
			
			ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, ПозицияМинус - 1)
				+ "0"
				+ Сред(ТекстПисьмаДляПравки, ПозицияP);
				
			ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
		
		КонецЕсли;
		
		НачальнаяПозиция = ПозицияМинус + 1;
		Продолжить;
			
	КонецЦикла;
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры	

// Корректирует html.  Уменьшает текст сносок, чтобы были не так заметны (удалять совсем их нельзя).
//
//Параметры
//	ТекстПисьма -Строка, возвращаемое значение
//
Процедура УменьшитьШрифтСносок(ТекстПисьма) Экспорт

	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		// сперва Позиция_msocommentreference, потом msocomanchor
		// между ними - font-size:8.0pt
		
		СтрокаПоиска = "class=msocomanchor";
		Позиция_msocomanchor = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска,,НачальнаяПозиция);
		Если Позиция_msocomanchor = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Позиция_msocommentreference = СтрНайти(ТекстПисьмаДляПравкиНРег, "msocommentreference",
			НаправлениеПоиска.СКонца, Позиция_msocomanchor);
		Если Позиция_msocommentreference = 0 Или Позиция_msocommentreference < Позиция_msocomanchor - 400 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстВнутри = Сред(ТекстПисьмаДляПравки, Позиция_msocommentreference, Позиция_msocomanchor - Позиция_msocommentreference);
		
		// корректируем  font-size: - одна строка,  8.0 - вторая.
		ТекстВнутри = СтрЗаменить(ТекстВнутри, Символы.ВК + "8.0pt", "8.0pt");
		ТекстВнутри = СтрЗаменить(ТекстВнутри, Символы.ПС + "8.0pt", "8.0pt");
		
		ТекстВнутри = СтрЗаменить(ТекстВнутри, "font-size:8.0pt", "font-size:1.0pt");
		
		ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, Позиция_msocommentreference - 1)
			+ ТекстВнутри
			+ Сред(ТекстПисьмаДляПравки, Позиция_msocomanchor);
			
		ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
		
		НачальнаяПозиция = Позиция_msocomanchor + 1;
		Продолжить;
			
	КонецЦикла;
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры

Процедура ЗаменитьКартинкиImageDataНаIMG(ТекстПисьма)

	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаПоиска = "<v:imagedata";
		ПозицияНачалаA = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска,,НачальнаяПозиция);
		Если ПозицияНачалаA = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияКонцаA = СтрНайти(ТекстПисьмаДляПравкиНРег, ">",,ПозицияНачалаA);
		Если ПозицияКонцаA = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаКонцаVShape = "</v:shape>";
		ПозицияVShape = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаКонцаVShape,,ПозицияНачалаA);
		Если ПозицияVShape = 0 Или ПозицияVShape > ПозицияКонцаA + 100 Тогда
			Прервать;
		КонецЕсли;
		ПозицияКонцаVShape = ПозицияVShape + СтрДлина(СтрокаКонцаVShape);
		
		ПозицияЗавершенияБлока = СтрНайти(ТекстПисьмаДляПравкиНРег, "<![endif]",,ПозицияНачалаA);
		Если ПозицияЗавершенияБлока <> 0 И ПозицияЗавершенияБлока < ПозицияНачалаA + 200 Тогда
			
			// теперь проверим что это не от <![if !msEquation]> -  это допустимый вариант
			
			ПозицияНачалаУсловия = СтрНайти(ТекстПисьмаДляПравкиНРег, "<![if", 
				НаправлениеПоиска.СКонца, ПозицияЗавершенияБлока);
				
			ЭтоДопустимоеУсловие = Ложь;
				
			Если ПозицияНачалаУсловия <> 0 Тогда
				
				ПозицияУравнения = СтрНайти(ТекстПисьмаДляПравкиНРег, "<![if !msequation]>",,ПозицияНачалаУсловия);
				
				Если ПозицияУравнения = ПозицияНачалаУсловия Тогда
					ЭтоДопустимоеУсловие = Истина;
				КонецЕсли;	
			КонецЕсли;	
			
			Если Не ЭтоДопустимоеУсловие Тогда
				НачальнаяПозиция = ПозицияНачалаA + 1;
				Продолжить; // если есть <![endif], не трогаем эту <v:imagedata
			КонецЕсли;
			
		КонецЕсли;
		
		ПозицияSrc = СтрНайти(ТекстПисьмаДляПравкиНРег, "src=",,ПозицияНачалаA);
		Если ПозицияSrc = 0 Или ПозицияSrc > ПозицияНачалаA + 100 Тогда
			НачальнаяПозиция = ПозицияНачалаA + 1;
			Продолжить;
		КонецЕсли;
		
		СимволПослеSrc = Сред(ТекстПисьмаДляПравкиНРег, 
			ПозицияSrc + СтрДлина("src="), 1);
			
		ПозицияКонцаSrc = СтрНайти(ТекстПисьмаДляПравкиНРег, СимволПослеSrc, , ПозицияSrc + СтрДлина("src=") + 1);
		Если ПозицияКонцаSrc = 0 Или ПозицияКонцаSrc > ПозицияSrc + 200 Тогда
			НачальнаяПозиция = ПозицияНачалаA + 1;
			Продолжить;
		КонецЕсли;
		
		ТекстSrc = Сред(ТекстПисьмаДляПравки, ПозицияSrc, ПозицияКонцаSrc - ПозицияSrc + 1);
		
		ТекстБлокаIMG = "";
		
		// для .emz картинки вставим A HREF
		СтрокаEmz = ".emz";
		Если СтрНайти(НРег(ТекстSrc), СтрокаEmz) <> 0 Тогда
			
			СтрокаКаталога = ".files/";
			ПозицияКаталога = СтрНайти(ТекстSrc, СтрокаКаталога);
			Если ПозицияКаталога = 0 Тогда
				НачальнаяПозиция = ПозицияНачалаA + 1;
				Продолжить;
			КонецЕсли;
			ПозицияКаталогаКонец = ПозицияКаталога + СтрДлина(СтрокаКаталога);
			
			ПозицияEmz = СтрНайти(ТекстSrc, СтрокаEmz);
			Если ПозицияEmz = 0 Тогда
				НачальнаяПозиция = ПозицияНачалаA + 1;
				Продолжить;
			КонецЕсли;
			ПозицияEmzКонец = ПозицияEmz + СтрДлина(СтрокаEmz);
			
			ИмяФайла = Сред(ТекстSrc, ПозицияКаталогаКонец, ПозицияEmzКонец - ПозицияКаталогаКонец);
			
			ТекстБлокаIMG = СтрШаблон(
				НСтр("ru ='<a href=""%1"" id=own_a_tag >Неподдерживаемый формат картинки. Нажмите для просмотра.</a>'"), 
				"openfile:" + ИмяФайла);
			
		Иначе	
			
			// <img src="образец%20ЛНД%20для%20тестирования%20параллельного%20согласования.files/image001.png">
			ТекстБлокаIMG = "<img id=own_img " 
				+ ТекстSrc
				+ ">";
			
		КонецЕсли;	
		
		// заменим
		ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, ПозицияКонцаVShape - 1)
			+ "</v:shape> "
			+ ТекстБлокаIMG
			+ Сред(ТекстПисьмаДляПравки, ПозицияКонцаVShape);
			
		ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
		
		НачальнаяПозиция = ПозицияНачалаA + СтрДлина(ТекстБлокаIMG);
		Продолжить;
			
	КонецЦикла;
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры

Функция ПолучитьИдЧисло(ИдСтрока)
	
	// ИдСтрока  - вида "do_91"
	
	Если СтрНайти(ИдСтрока, "do_") = 0 Тогда
		Возврат -1;
	КонецЕсли;	
	
	СтрокаТолькоЧисло = Сред(ИдСтрока, 4); // 4  - т.к. пропускаем do_
	Возврат Число(СтрокаТолькоЧисло);
	
КонецФункции	

Процедура ВставитьПравкиВМестахИзмененийWord(ТекстПисьма, ПравкиТаблица,
	СравнениеСШаблоном = Ложь, БизнесПроцесс = Неопределено, Подготовил = Неопределено, НомерИтерации = 0,
	ЭтоВторойЦиклИлиВыше = Ложь,
	ЭтоТиповой = Ложь)
	
	ВставлятьВМестахУдаления = Истина;
	Если ЭтоТиповой = Истина И ЭтоВторойЦиклИлиВыше = Ложь Тогда
		ВставлятьВМестахУдаления = Ложь; // Договоры - на первом цикле не надо показывать удаленный текст, только добавленный
	КонецЕсли;	

	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаПоиска = "class=msoins";
		ПозицияMsoIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска,,НачальнаяПозиция);
		Если ПозицияMsoIns = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияНачалаТегаSpan = СтрНайти(ТекстПисьмаДляПравкиНРег, "<",
			НаправлениеПоиска.СКонца, ПозицияMsoIns);
		Если ПозицияНачалаТегаSpan = 0 Или ПозицияНачалаТегаSpan < ПозицияMsoIns - 20 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНачалаIns = "<ins";
		ПозицияНачалаТегаIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаНачалаIns,, ПозицияMsoIns);
		Если ПозицияНачалаТегаIns = 0 Или ПозицияНачалаТегаIns > ПозицияMsoIns + 80 Тогда
			Продолжить;
		КонецЕсли;
		ПозицияКонцаТегаIns = СтрНайти(ТекстПисьмаДляПравкиНРег, ">",, ПозицияНачалаТегаIns);
		Если ПозицияКонцаТегаIns = 0 Или ПозицияКонцаТегаIns > ПозицияНачалаТегаIns + 180 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКонцаIns = "</ins>";
		ПозицияКонцаВторогоТегаIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаКонцаIns,, ПозицияКонцаТегаIns);
		Если ПозицияКонцаВторогоТегаIns = 0 Тогда //внутри могли добавить сколько угодно текста
			Продолжить;
		КонецЕсли;
		
		ТекстВнутри = Сред(ТекстПисьмаДляПравки, ПозицияКонцаТегаIns + 1, 
			ПозицияКонцаВторогоТегаIns - ПозицияКонцаТегаIns - 1);
		
		// ТекстВнутри - проверяем наличие span id=do_, находим первый и последний, 
		//  а также сам текст из html получаем.
		
		ТекстВнутриНРег = НРег(ТекстВнутри);
		Если СтрНайти(ТекстВнутриНРег, "span id=do_") <> 0 Тогда // есть текст, добавим правку
			
			Правка = ПравкиТаблица.Добавить();
			
			Если Подготовил <> Неопределено Тогда
				Правка.Автор = Подготовил;
			Иначе	
				Правка.Автор = ПользователиКлиентСервер.ТекущийПользователь();
			КонецЕсли;	
			Правка.НомерЭтапа = НомерИтерации;  // При обработке замечаний «Отличия от шаблона» должны идентифицироваться как этап 0, 
									//чтобы инициатор при обработке замечаний работал с «чистыми» замечаниями
			
			ПерваяПозицияID = СтрНайти(ТекстВнутриНРег, "span id=do_");
			ПерваяПозицияIDКонецТега = СтрНайти(ТекстВнутриНРег, ">",, ПерваяПозицияID);
			Если ПерваяПозицияIDКонецТега = 0 Тогда
				Продолжить;
			КонецЕсли;
			// ПерваяПозицияID+8 - 8 это "span id="
			НачалоDoНомер = ПерваяПозицияID + 8;
			СтрокаНомера = Сред(ТекстВнутриНРег, НачалоDoНомер, ПерваяПозицияIDКонецТега - НачалоDoНомер);
			Правка.ИдНачала = ПолучитьИдЧисло(СтрокаНомера);

			ПоследняяПозицияID = СтрНайти(ТекстВнутриНРег, "span id=do_", 
				НаправлениеПоиска.СКонца, СтрДлина(ТекстВнутриНРег));
			ПоследняяПозицияIDКонецТега = СтрНайти(ТекстВнутриНРег, ">",, ПоследняяПозицияID);
			Если ПоследняяПозицияIDКонецТега = 0 Тогда
				Продолжить;
			КонецЕсли;
			// ПоследняяПозицияID+8 - 8 это "span id="
			НачалоDoНомер2 = ПоследняяПозицияID + 8;
			СтрокаНомера2 = Сред(ТекстВнутриНРег, НачалоDoНомер2, 
				ПоследняяПозицияIDКонецТега - НачалоDoНомер2);
			Правка.ИдКонца = ПолучитьИдЧисло(СтрокаНомера2);
			
			Правка.Автоматическая = Ложь;
			Правка.НаЧтоМеняем = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстВнутри);
			Правка.НаЧтоМеняем = СокрЛП(Правка.НаЧтоМеняем);
			Правка.НаЧтоМеняем = СтрЗаменить(Правка.НаЧтоМеняем, Символы.ВК, " ");
			Правка.НаЧтоМеняем = СтрЗаменить(Правка.НаЧтоМеняем, Символы.ПС, " ");
			Правка.НаЧтоМеняем = СтрЗаменить(Правка.НаЧтоМеняем, Символы.Таб, " ");
			//Правка.Процесс = БизнесПроцесс;
			
			Правка.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание");
			Правка.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята");
			Правка.Отработано = Истина;
			Правка.УникальныйИдентификатор = Новый УникальныйИдентификатор;
			Если СравнениеСШаблоном Тогда
				Правка.Комментарий = НСтр("ru = 'Отличие от шаблона'");
				Правка.ЭтоОтличиеОтШаблона = Истина;
			Иначе	
				Правка.Комментарий = НСтр("ru = 'Добавлено в Word'");
				Правка.ЭтоЗамечаниеWord = Истина;
			КонецЕсли;
			Если ЭтоВторойЦиклИлиВыше = Истина Тогда
				Правка.ЭтоЗамечаниеWord = Ложь;
				Правка.ЭтоОтличиеОтШаблона = Ложь;
				Правка.Автор = ПользователиКлиентСервер.ТекущийПользователь();
				Правка.ЗамечаниеИнициатора = Истина;
				Правка.Комментарий = "";
			КонецЕсли;	
			
		КонецЕсли;	
		
		// находим завершение </span>  для тега <span class=msoIns>
		// потом удалим и <span class=msoIns> и его </span>
		// Берем до  ПозицияНачалаТегаSpan, ТекстВнутри, и после ПозицияКонцаПоследнегоТегаSpan
		ПозицияНачалаПоследнегоТегаSpan = НайтиПоследнийТегSpan(ТекстПисьмаДляПравкиНРег, 
			ПозицияНачалаТегаSpan);
		ПозицияКонцаПоследнегоТегаSpan = СтрНайти(ТекстПисьмаДляПравкиНРег, ">",, ПозицияНачалаПоследнегоТегаSpan);
		Если ПозицияКонцаПоследнегоТегаSpan = 0 
			Или ПозицияКонцаПоследнегоТегаSpan > ПозицияНачалаПоследнегоТегаSpan + 10 Тогда
			Продолжить;
		КонецЕсли;

		ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, ПозицияНачалаТегаSpan - 1)
			+ ТекстВнутри
			+ Сред(ТекстПисьмаДляПравки, ПозицияКонцаПоследнегоТегаSpan + 1);
			
		ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
		
		НачальнаяПозиция = ПозицияMsoIns + 1;
		Продолжить;
			
	КонецЦикла;
	
	Если Не ВставлятьВМестахУдаления Тогда
		
		// вставим display:none;  в span.msoDel - если его еще нет.  Если есть - не трогаем
		
		СтрокаПоиска = "span.msodel";
		ПозицияMsoIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска);
		Если ПозицияMsoIns = 0 Тогда
			ТекстПисьма = ТекстПисьмаДляПравки;
			Возврат;
		КонецЕсли;
		
		ПозицияНачалаТегаSpan = СтрНайти(ТекстПисьмаДляПравкиНРег, "{",
			, ПозицияMsoIns);
		Если ПозицияНачалаТегаSpan = 0 Или ПозицияНачалаТегаSpan < ПозицияMsoIns - 20 Тогда
			ТекстПисьма = ТекстПисьмаДляПравки;	
			Возврат;
		КонецЕсли;
		
		ПозицияКонцаТега = СтрНайти(ТекстПисьмаДляПравкиНРег, "}",, ПозицияНачалаТегаSpan);
		Если ПозицияКонцаТега = 0 Или ПозицияКонцаТега > ПозицияНачалаТегаSpan + 480 Тогда
			ТекстПисьма = ТекстПисьмаДляПравки;
			Возврат;
		КонецЕсли;
		
		// вставим display:none;  после {
		СтрокаУдаления = "display:none;";  // "display:none;"
		ПозицияУдаления = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаУдаления,, ПозицияНачалаТегаSpan);
		// если нет display:none внутри - добавим
		Если ПозицияУдаления = 0 Или ПозицияУдаления > ПозицияКонцаТега Тогда 
			
			ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, ПозицияНачалаТегаSpan)
				+ СтрокаУдаления + " "
				+ Сред(ТекстПисьмаДляПравки, ПозицияНачалаТегаSpan + 1);
			
		КонецЕсли;
		
	Иначе	
		
		Если Истина Тогда  // новое поведение
		
			НачальнаяПозиция = 1;
			
			// найдем позицию body
			ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
			ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
			Если ПозицияНачалаBody <> 0 Тогда
				НачальнаяПозиция = ПозицияНачалаBody;
			КонецЕсли;	
			
			ЧислоИтераций = 0;
			Пока Истина Цикл
				
				ЧислоИтераций = ЧислоИтераций + 1;
				Если ЧислоИтераций > 1000 Тогда
					Прервать;
				КонецЕсли;	
				
				СтрокаПоиска = "class=msodel";
				ПозицияMsoIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска,,НачальнаяПозиция);
				Если ПозицияMsoIns = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ПозицияНачалаТегаSpan = СтрНайти(ТекстПисьмаДляПравкиНРег, "<",
					НаправлениеПоиска.СКонца, ПозицияMsoIns);
				Если ПозицияНачалаТегаSpan = 0 Или ПозицияНачалаТегаSpan < ПозицияMsoIns - 20 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаНачалаIns = "<del";
				ПозицияНачалаТегаIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаНачалаIns,, ПозицияMsoIns);
				Если ПозицияНачалаТегаIns = 0 Или ПозицияНачалаТегаIns > ПозицияMsoIns + 80 Тогда
					Продолжить;
				КонецЕсли;
				ПозицияКонцаТегаIns = СтрНайти(ТекстПисьмаДляПравкиНРег, ">",, ПозицияНачалаТегаIns);
				Если ПозицияКонцаТегаIns = 0 Или ПозицияКонцаТегаIns > ПозицияНачалаТегаIns + 180 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаКонцаIns = "</del>";
				ПозицияКонцаВторогоТегаIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаКонцаIns,, ПозицияКонцаТегаIns);
				Если ПозицияКонцаВторогоТегаIns = 0 Тогда //внутри могли добавить сколько угодно текста
					Продолжить;
				КонецЕсли;
				
				ТекстВнутри = Сред(ТекстПисьмаДляПравки, ПозицияКонцаТегаIns + 1, 
					ПозицияКонцаВторогоТегаIns - ПозицияКонцаТегаIns - 1);
					
					
				// находим завершение </span>  для тега <span class=msoIns>
				// потом удалим и <span class=msoIns> и его </span>
				// Берем до  ПозицияНачалаТегаSpan, ТекстВнутри, и после ПозицияКонцаПоследнегоТегаSpan
				ПозицияНачалаПоследнегоТегаSpan = НайтиПоследнийТегSpan(ТекстПисьмаДляПравкиНРег, 
					ПозицияНачалаТегаSpan);
				ПозицияКонцаПоследнегоТегаSpan = СтрНайти(ТекстПисьмаДляПравкиНРег, ">",, ПозицияНачалаПоследнегоТегаSpan);
				Если ПозицияКонцаПоследнегоТегаSpan = 0 
					Или ПозицияКонцаПоследнегоТегаSpan > ПозицияНачалаПоследнегоТегаSpan + 10 Тогда
					Продолжить;
				КонецЕсли;

					
				// ТекстВнутри - проверяем наличие span id=do_, находим первый и последний, 
				//  а также сам текст из html получаем.
				
				ТекстВнутриНРег = НРег(ТекстВнутри);
				Если СтрНайти(ТекстПисьмаДляПравкиНРег, "span id=do_", 
					НаправлениеПоиска.СНачала, ПозицияКонцаВторогоТегаIns) <> 0 Тогда // есть текст, добавим правку
					
					Правка = ПравкиТаблица.Добавить();
					
					Если Подготовил <> Неопределено Тогда
						Правка.Автор = Подготовил;
					Иначе	
						Правка.Автор = ПользователиКлиентСервер.ТекущийПользователь();
					КонецЕсли;	
					Правка.НомерЭтапа = НомерИтерации;  // При обработке замечаний «Отличия от шаблона» должны идентифицироваться как этап 0, 
											//чтобы инициатор при обработке замечаний работал с «чистыми» замечаниями
											
					ПерваяПозицияID = СтрНайти(ТекстПисьмаДляПравкиНРег, "span id=do_", 
						НаправлениеПоиска.СНачала, ПозицияКонцаПоследнегоТегаSpan);
					ПерваяПозицияIDКонецТега = СтрНайти(ТекстПисьмаДляПравкиНРег, ">",, ПерваяПозицияID);
					Если ПерваяПозицияIDКонецТега = 0 Тогда
						Продолжить;
					КонецЕсли;
					// ПерваяПозицияID+8 - 8 это "span id="
					НачалоDoНомер = ПерваяПозицияID + 8;
					СтрокаНомера = Сред(ТекстПисьмаДляПравкиНРег, НачалоDoНомер, ПерваяПозицияIDКонецТега - НачалоDoНомер);
					Правка.ИдНачала = ПолучитьИдЧисло(СтрокаНомера);
					Правка.ИдКонца = Правка.ИдНачала;

											
					Правка.Автоматическая = Ложь;
					
					ТекстВыделенный = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстВнутри);
					ТекстВыделенный = СокрЛП(ТекстВыделенный);
					ТекстВыделенный = СтрЗаменить(ТекстВыделенный, Символы.ВК, " ");
					ТекстВыделенный = СтрЗаменить(ТекстВыделенный, Символы.ПС, " ");
					ТекстВыделенный = СтрЗаменить(ТекстВыделенный, Символы.Таб, " ");
					Правка.ЧтоМеняем = ТекстВыделенный;
					//Правка.Процесс = БизнесПроцесс;
					
					Правка.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание");
					Правка.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята");
					Правка.Отработано = Истина;
					Правка.УникальныйИдентификатор = Новый УникальныйИдентификатор;
					Если СравнениеСШаблоном Тогда
						Правка.Комментарий = НСтр("ru = 'Отличие от шаблона'");
						Правка.ЭтоОтличиеОтШаблона = Истина;
					Иначе	
						Правка.Комментарий = НСтр("ru = 'Удалено в Word'");
						Правка.НомерКартинки = 1; // крестик
						Правка.ЭтоЗамечаниеWord = Истина;
					КонецЕсли;
					Если ЭтоВторойЦиклИлиВыше = Истина Тогда
						Правка.ЭтоЗамечаниеWord = Ложь;
						Правка.ЭтоОтличиеОтШаблона = Ложь;
						Правка.Автор = ПользователиКлиентСервер.ТекущийПользователь();
						Правка.ЗамечаниеИнициатора = Истина;
						Правка.Комментарий = "";
					КонецЕсли;	
					
				КонецЕсли;	
				
				ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, ПозицияНачалаТегаSpan - 1)
					+ "" // ТекстВнутри - вырезаем
					+ Сред(ТекстПисьмаДляПравки, ПозицияКонцаПоследнегоТегаSpan + 1);
					
				ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
				
				НачальнаяПозиция = ПозицияMsoIns + 1;
				Продолжить;
					
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры

Процедура ВырезатьMsoDel(ТекстПисьма) Экспорт

	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	// обработаем msoDel
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаПоиска = "class=msodel";
		ПозицияMsoIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска,,НачальнаяПозиция);
		Если ПозицияMsoIns = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияНачалаТегаSpan = СтрНайти(ТекстПисьмаДляПравкиНРег, "<",
			НаправлениеПоиска.СКонца, ПозицияMsoIns);
		Если ПозицияНачалаТегаSpan = 0 Или ПозицияНачалаТегаSpan < ПозицияMsoIns - 20 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНачалаIns = "<del";
		ПозицияНачалаТегаIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаНачалаIns,, ПозицияMsoIns);
		Если ПозицияНачалаТегаIns = 0 Или ПозицияНачалаТегаIns > ПозицияMsoIns + 80 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияКонцаТегаIns = СтрНайти(ТекстПисьмаДляПравкиНРег, ">",, ПозицияНачалаТегаIns);
		Если ПозицияКонцаТегаIns = 0 Или ПозицияКонцаТегаIns > ПозицияНачалаТегаIns + 180 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКонцаIns = "</del>";
		ПозицияКонцаВторогоТегаIns = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаКонцаIns,, ПозицияКонцаТегаIns);
		Если ПозицияКонцаВторогоТегаIns = 0 Тогда //внутри могли добавить сколько угодно текста
			Продолжить;
		КонецЕсли;
		
		// находим завершение </span>  для тега <span class=msodel>
		// потом удалим и <span class=msodel> и его </span>
		// Берем до  ПозицияНачалаТегаSpan, ТекстВнутри, и после ПозицияКонцаПоследнегоТегаSpan
		ПозицияНачалаПоследнегоТегаSpan = НайтиПоследнийТегSpan(ТекстПисьмаДляПравкиНРег, 
			ПозицияНачалаТегаSpan);
		ПозицияКонцаПоследнегоТегаSpan = СтрНайти(ТекстПисьмаДляПравкиНРег, ">",, ПозицияНачалаПоследнегоТегаSpan);
		Если ПозицияКонцаПоследнегоТегаSpan = 0 
			Или ПозицияКонцаПоследнегоТегаSpan > ПозицияНачалаПоследнегоТегаSpan + 10 Тогда
			Продолжить;
		КонецЕсли;

		ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, ПозицияНачалаТегаSpan - 1)
			+ "" // ТекстВнутри - просто вырезаем все, что внутри
			+ Сред(ТекстПисьмаДляПравки, ПозицияКонцаПоследнегоТегаSpan + 1);
			
		ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
		
		НачальнаяПозиция = ПозицияMsoIns + 1;
		Продолжить;
			
	КонецЦикла;
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры

Процедура УдалитьТекстПередHtml(ТекстПисьма)

	ТекстПисьмаДляПравки = ТекстПисьма;
	
	// найдем позицию html
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаHtml = СтрНайти(ТекстПисьмаДляПравкиНРег, "<html");
	
	// либо нету, либо в начале
	Если ПозицияНачалаHtml = 0 Или ПозицияНачалаHtml = 1 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстПисьмаДляПравки = Сред(ТекстПисьмаДляПравки, ПозицияНачалаHtml);
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры


Процедура ВырезатьОбрамлениеКартинок(ТекстПисьма)

	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаНачала = "<![if !vml]>";
		СтрокаПоиска = "<![if !vml]><img";
		ПозицияНачалаA = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска,,НачальнаяПозиция);
		Если ПозицияНачалаA = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияКонцаA = ПозицияНачалаA + СтрДлина(СтрокаНачала); // где закончился <![if !vml]>
		
		ПозицияЗавершенияA = СтрНайти(ТекстПисьмаДляПравкиНРег, "<![endif]>",,ПозицияКонцаA);
		Если ПозицияЗавершенияA = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ТекстВнутри = Сред(ТекстПисьмаДляПравки, ПозицияКонцаA, ПозицияЗавершенияA - ПозицияКонцаA);
		
		// вырежем все от <a   до  </a>
		ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, ПозицияНачалаA - 1)
			+ ТекстВнутри
			+ Сред(ТекстПисьмаДляПравки, ПозицияЗавершенияA + СтрДлина("<![endif]>"));
			
		ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
		
		НачальнаяПозиция = ПозицияНачалаA;
		Продолжить;
			
	КонецЦикла;
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры

Процедура ВставитьТеги(ТекстПисьма, МаксимальныйНомер)
	
	СчетчикИД = 1;
	ТекстПисьмаДляПравки = ТекстПисьма;
	СимволыРазделители = СогласованиеВРежимеЗамечанийHTMLКлиентСервер.СимволыРазделители();
	
	СпецСимволыСлова = РаботаС_HTMLПовтИсп.ПолучитьОбратноеСоответствиеСпецСимволов();
	СпецСимволыСлова.Вставить("amp", 9999);
	
	НачальнаяПозиция = 1;
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоОткрытыхСкобок = 0;
	Слово = "";
	ПозицияНачалаСлова = 0;
	СловоСобрано = Ложь;
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000000 Тогда
			Прервать;
		КонецЕсли;	
		
		Если ЧислоОткрытыхСкобок <> 0 Тогда
			
			ПозицияНачало1 = СтрНайти(ТекстПисьмаДляПравки, "<", , НачальнаяПозиция);
			ПозицияНачало2 = СтрНайти(ТекстПисьмаДляПравки, ">", , НачальнаяПозиция);
			
			Если ПозицияНачало1 = 0 И ПозицияНачало2 = 0 Тогда
				Прервать; // некорректный HMTL, незакрытые скобки, а документ кончился.
			КонецЕсли;	
			
			ПозицияСкобки = -1;
			Если ПозицияНачало1 <> 0 И ПозицияНачало2 <> 0 Тогда
				ПозицияСкобки = Мин(ПозицияНачало1, ПозицияНачало2);
			ИначеЕсли ПозицияНачало1 = 0 И ПозицияНачало2 <> 0 Тогда	
				ПозицияСкобки = ПозицияНачало2;
			ИначеЕсли ПозицияНачало1 <> 0 И ПозицияНачало2 = 0 Тогда	
				ПозицияСкобки = ПозицияНачало1;
			КонецЕсли;	
			
			Если ПозицияСкобки = ПозицияНачало1 Тогда
				ЧислоОткрытыхСкобок = ЧислоОткрытыхСкобок + 1;
			Иначе	
				ЧислоОткрытыхСкобок = ЧислоОткрытыхСкобок - 1;
			КонецЕсли;	
			
			НачальнаяПозиция = ПозицияСкобки + 1;
			
			Если ЧислоОткрытыхСкобок = 0 Тогда
				Если НачальнаяПозиция > СтрДлина(ТекстПисьмаДляПравки) Тогда
					Прервать;
				КонецЕсли;	
			КонецЕсли;	
			
		Иначе
			
			Символ = Сред(ТекстПисьмаДляПравки, НачальнаяПозиция, 1);
			
			НуженСдвиг = Ложь;
			
			Если Символ = "<" Тогда
				ЧислоОткрытыхСкобок = ЧислоОткрытыхСкобок + 1;
				НуженСдвиг = Истина;
			ИначеЕсли Символ = ">"	Тогда
				ЧислоОткрытыхСкобок = ЧислоОткрытыхСкобок - 1;
				НуженСдвиг = Истина;
			КонецЕсли;	
			
			Если Найти(СимволыРазделители, Символ) <> 0 Тогда // текущий символ - разделитель, скажем ,./ пробел
				
				Если СтрДлина(Слово) <> 0 Тогда
					СловоСобрано = Истина;
				КонецЕсли;
				
			Иначе  // это просто символ, скажем "а"
				
				Если СтрДлина(Слово) = 0 Тогда
					ПозицияНачалаСлова = НачальнаяПозиция;
				КонецЕсли;	
			
				Слово = Слово + Символ;
				
			КонецЕсли;
			
			НачальнаяПозиция = НачальнаяПозиция + 1;
			
			Если СловоСобрано Тогда // заменяем слово на обертку со span
				
				Если СпецСимволыСлова.Получить(НРег(Слово)) <> Неопределено
					И Сред(ТекстПисьмаДляПравки, ПозицияНачалаСлова - 1, 1) = "&"
					И Сред(ТекстПисьмаДляПравки, ПозицияНачалаСлова + СтрДлина(Слово), 1) = ";" Тогда
					
					Слово = "";
					СловоСобрано = Ложь;
					Продолжить;  //такое слово не берем  - например  &nbsp;
					
				КонецЕсли;	
				
				Если ПозицияНачалаСлова >= 3 И ПозицияНачалаСлова + СтрДлина(Слово) + 1 < СтрДлина(ТекстПисьмаДляПравки) Тогда
					ДваСимволаДо = Сред(ТекстПисьмаДляПравки, ПозицияНачалаСлова - 2, 2);
					СимволПосле = Сред(ТекстПисьмаДляПравки, ПозицияНачалаСлова + СтрДлина(Слово), 1);
					Если ДваСимволаДо = "&#" И СимволПосле = ";" Тогда
						
						Слово = "";
						СловоСобрано = Ложь;
						Продолжить;  //такое слово не берем - например  &#61450;
						
					КонецЕсли;	
				КонецЕсли;
				
				ИДСтрока = Формат(СчетчикИД, "ЧГ=0");
				СловоЗамены = СтрШаблон("<span id=do_%1>", ИДСтрока) + Слово + "</span>";
				СчетчикИД = СчетчикИД + 1;
				
				ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, ПозицияНачалаСлова - 1)
					+ СловоЗамены
					+ Сред(ТекстПисьмаДляПравки, ПозицияНачалаСлова + СтрДлина(Слово));
					
				Слово = "";	
				СловоСобрано = Ложь;
				НачальнаяПозиция = ПозицияНачалаСлова + СтрДлина(СловоЗамены);
				Если НуженСдвиг Тогда
					НачальнаяПозиция = НачальнаяПозиция + 1;
				КонецЕсли;	
				ПозицияНачалаСлова = 0;
					
			КонецЕсли;		
			
			Если НачальнаяПозиция > СтрДлина(ТекстПисьмаДляПравки) Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	МаксимальныйНомер = СчетчикИД;
	
КонецПроцедуры

// Вставляет теги span id=do_N - только там, где их еще нет.
//  И добавляет в Правки - технические правки
Процедура ВставитьНовыеТеги(ТекстПисьма, МаксимальныйНомерПравки, 
	ПравкиТаблица, Автор, ВерсияHTML, НомерИтерации) Экспорт
	
	СчетчикИД = МаксимальныйНомерПравки + 1;
	ТекстПисьмаДляПравки = ТекстПисьма;
	СимволыРазделители = СогласованиеВРежимеЗамечанийHTMLКлиентСервер.СимволыРазделители();
	
	СпецСимволыСлова = РаботаС_HTMLПовтИсп.ПолучитьОбратноеСоответствиеСпецСимволов();
	СпецСимволыСлова.Вставить("amp", 9999);
	
	НачальнаяПозиция = 1;
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоОткрытыхСкобок = 0;
	Слово = "";
	ПозицияНачалаСлова = 0;
	СловоСобрано = Ложь;
	
	ЕстьОткрытаяТехническаяПравка = Ложь;
	ИдНачалаПравки = -1;
	ИдКонцаПравки = -1;
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000000 Тогда
			Прервать;
		КонецЕсли;	
		
		Если ЧислоОткрытыхСкобок <> 0 Тогда
			
			ПозицияНачало1 = СтрНайти(ТекстПисьмаДляПравки, "<", , НачальнаяПозиция);
			ПозицияНачало2 = СтрНайти(ТекстПисьмаДляПравки, ">", , НачальнаяПозиция);
			
			Если ПозицияНачало1 = 0 И ПозицияНачало2 = 0 Тогда
				Прервать; // некорректный HMTL, незакрытые скобки, а документ кончился.
			КонецЕсли;	
			
			ПозицияСкобки = -1;
			Если ПозицияНачало1 <> 0 И ПозицияНачало2 <> 0 Тогда
				ПозицияСкобки = Мин(ПозицияНачало1, ПозицияНачало2);
			ИначеЕсли ПозицияНачало1 = 0 И ПозицияНачало2 <> 0 Тогда	
				ПозицияСкобки = ПозицияНачало2;
			ИначеЕсли ПозицияНачало1 <> 0 И ПозицияНачало2 = 0 Тогда	
				ПозицияСкобки = ПозицияНачало1;
			КонецЕсли;	
			
			Если ПозицияСкобки = ПозицияНачало1 Тогда
				ЧислоОткрытыхСкобок = ЧислоОткрытыхСкобок + 1;
			Иначе	
				ЧислоОткрытыхСкобок = ЧислоОткрытыхСкобок - 1;
			КонецЕсли;	
			
			НачальнаяПозиция = ПозицияСкобки + 1;
			
			Если ЧислоОткрытыхСкобок = 0 Тогда
				Если НачальнаяПозиция > СтрДлина(ТекстПисьмаДляПравки) Тогда
					Прервать;
				КонецЕсли;	
			КонецЕсли;	
			
		Иначе
			
			Символ = Сред(ТекстПисьмаДляПравки, НачальнаяПозиция, 1);
			
			НуженСдвиг = Ложь;
			
			Если Символ = "<" Тогда
				ЧислоОткрытыхСкобок = ЧислоОткрытыхСкобок + 1;
				НуженСдвиг = Истина;
			ИначеЕсли Символ = ">"	Тогда
				ЧислоОткрытыхСкобок = ЧислоОткрытыхСкобок - 1;
				НуженСдвиг = Истина;
			КонецЕсли;	
			
			Если Найти(СимволыРазделители, Символ) <> 0 Тогда // текущий символ - разделитель, скажем ,./ пробел
				
				Если СтрДлина(Слово) <> 0 Тогда
					СловоСобрано = Истина;
				КонецЕсли;
				
			Иначе  // это просто символ, скажем "а"
				
				Если СтрДлина(Слово) = 0 Тогда
					ПозицияНачалаСлова = НачальнаяПозиция;
				КонецЕсли;	
			
				Слово = Слово + Символ;
				
			КонецЕсли;
			
			НачальнаяПозиция = НачальнаяПозиция + 1;
			
			Если СловоСобрано Тогда // заменяем слово на обертку со span
				
				Если СпецСимволыСлова.Получить(НРег(Слово)) <> Неопределено
					И Сред(ТекстПисьмаДляПравки, ПозицияНачалаСлова - 1, 1) = "&"
					И Сред(ТекстПисьмаДляПравки, ПозицияНачалаСлова + СтрДлина(Слово), 1) = ";" Тогда
					
					Слово = "";
					СловоСобрано = Ложь;
					
					Если ЕстьОткрытаяТехническаяПравка Тогда  // добавляем правку.
						ЕстьОткрытаяТехническаяПравка = Ложь;
						
						Правка = ПравкиТаблица.Добавить();
						Правка.ИдНачала = ИдНачалаПравки;
						Правка.ИдКонца = ИдКонцаПравки;
						Правка.ЗамечаниеИнициатора = Истина;
						Правка.УникальныйИдентификатор = Новый УникальныйИдентификатор;
						Правка.Дата = ТекущаяДата();
						Правка.Автор = Автор; 
						Правка.НомерЭтапа = НомерИтерации;
						Правка.Комментарий = НСтр("ru = 'Добавлено в HTML'");
						Правка.Отработано = Истина;
						Правка.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята");
						Правка.ЗамечаниеИнициатора = Истина;
						
						Правка.НаЧтоМеняем = ПолучитьЧистыйФрагментТекста(ТекстПисьмаДляПравки, Правка.ИдНачала, Правка.ИдКонца);
						
						ИдНачалаПравки = -1;
						ИдКонцаПравки = -1;
					КонецЕсли;	
					
					Продолжить;  //такое слово не берем
					
				КонецЕсли;	
				
				ПозицияКонцаСкобкиДоСлова = СтрНайти(ТекстПисьмаДляПравки, ">", НаправлениеПоиска.СКонца, ПозицияНачалаСлова);
				Если ПозицияКонцаСкобкиДоСлова >= ПозицияНачалаСлова - 20 Тогда
					
					НайденСимволНеРазделитель = Ложь;
					Дельта = ПозицияНачалаСлова - ПозицияКонцаСкобкиДоСлова;
					Для Поз = 1 По Дельта - 1 Цикл
						Позиция = ПозицияНачалаСлова - Поз;
						Символ = Сред(ТекстПисьмаДляПравки, Позиция, 1);
						Если Найти(СимволыРазделители, Символ) = 0 Тогда // текущий символ - НЕ разделитель, скажем ,./ пробел
							НайденСимволНеРазделитель = Истина;
							Прервать;
						КонецЕсли;	
					КонецЦикла;
					
					Если Не НайденСимволНеРазделитель Тогда
						
						ПозицияНачалаСкобкиДоСлова = СтрНайти(ТекстПисьмаДляПравки, "<", НаправлениеПоиска.СКонца, ПозицияНачалаСлова);
						ПодстрокаНашегоТега = "span id=do_";
						
						Если ПозицияНачалаСкобкиДоСлова >= ПозицияНачалаСлова - 20 
							И ПозицияНачалаСкобкиДоСлова < ПозицияНачалаСлова - СтрДлина(ПодстрокаНашегоТега) Тогда
							
							НачалоТегаСтр = Сред(ТекстПисьмаДляПравки, ПозицияНачалаСкобкиДоСлова + 1, СтрДлина(ПодстрокаНашегоТега));
							
							Если НРег(НачалоТегаСтр) = ПодстрокаНашегоТега Тогда
								
								Слово = "";
								СловоСобрано = Ложь;
								
								Если ЕстьОткрытаяТехническаяПравка Тогда  // добавляем правку.
									
									ЕстьОткрытаяТехническаяПравка = Ложь;
									
									НаЧтоМеняем = ПолучитьЧистыйФрагментТекста(
										ТекстПисьмаДляПравки, ИдНачалаПравки, ИдКонцаПравки);
										
									Если НаЧтоМеняем <> Символ(4448) Тогда // 4448 - спецсимвол при автозаполнении, пропускаем
									
										Правка = ПравкиТаблица.Добавить();
										Правка.ИдНачала = ИдНачалаПравки;
										Правка.ИдКонца = ИдКонцаПравки;
										Правка.ЗамечаниеИнициатора = Истина;
										Правка.УникальныйИдентификатор = Новый УникальныйИдентификатор;
										Правка.Дата = ТекущаяДата();
										Правка.Автор = Автор; 
										Правка.НомерЭтапа = НомерИтерации;
										Правка.Комментарий = НСтр("ru = 'Добавлено в HTML'");
										Правка.Отработано = Истина;
										Правка.СтатусПринятия = ПредопределенноеЗначение("Перечисление.СтатусыПринятияЗамечаний.Принята");
										Правка.ЗамечаниеИнициатора = Истина;
										
										Правка.НаЧтоМеняем = НаЧтоМеняем;
										
										ИдНачалаПравки = -1;
										ИдКонцаПравки = -1;
										
									КонецЕсли;
									
								КонецЕсли;			
									
									
								Продолжить;  // слово уже тегировано, пропускаем
								
							КонецЕсли;		
							
						КонецЕсли;	
					
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЕстьОткрытаяТехническаяПравка Тогда
					
					ЕстьОткрытаяТехническаяПравка = Истина;
					ИдНачалаПравки = СчетчикИД;
					ИдКонцаПравки = СчетчикИД;
					
				Иначе
					
					ИдКонцаПравки = СчетчикИД;
					
				КонецЕсли;	
				
				ИДСтрока = Формат(СчетчикИД, "ЧГ=0");
				СловоЗамены = СтрШаблон("<span id=do_%1>", ИДСтрока) + Слово + "</span>";
				СчетчикИД = СчетчикИД + 1;
				
				ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, ПозицияНачалаСлова - 1)
					+ СловоЗамены
					+ Сред(ТекстПисьмаДляПравки, ПозицияНачалаСлова + СтрДлина(Слово));
					
				Слово = "";	
				СловоСобрано = Ложь;
				НачальнаяПозиция = ПозицияНачалаСлова + СтрДлина(СловоЗамены);
				Если НуженСдвиг Тогда
					НачальнаяПозиция = НачальнаяПозиция + 1;
				КонецЕсли;	
				ПозицияНачалаСлова = 0;
					
			КонецЕсли;		
			
			Если НачальнаяПозиция > СтрДлина(ТекстПисьмаДляПравки) Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	МаксимальныйНомерПравки = СчетчикИД;
	
КонецПроцедуры

// Возвращает строку по числу. Для дальнейшего использования в тегировании.
//Параметры
//ИдЧисло -Число
//
//Возвращаемое значение - Строка
//
Функция ПолучитьСтрокаИзIdЧисло(ИдЧисло) Экспорт
	
	Возврат Формат(ИдЧисло, "ЧГ=0");
	
КонецФункции	

Функция АбсЗначение(ЧислоЗначение)
	
	Если ЧислоЗначение >= 0 Тогда
		Возврат ЧислоЗначение;
	Иначе	
		Возврат -ЧислоЗначение;
	КонецЕсли;	
	
КонецФункции	

// Преобразует HTML, из HTML редактора, для загрузки в Word
//  удаляем теги span id-do=,  заменяем списки (ul li  на mso-list) 
Функция ПодготовитьHtmlИзРедактораHtmlКWord(ТекстHTML, HTMLПервойВерсии) Экспорт
	
	ТекстHTMLНРег = НРег(ТекстHTML);
	Если СтрНайти(ТекстHTMLНРег, "span id=do_") = 0 Тогда
		// Уже обработан ранее
		Возврат ТекстHTML;
	КонецЕсли;	
	
	НовыйТекстHTML = ТекстHTML;
	
	УдалитьТегиSpan(НовыйТекстHTML);
	КорректироватьСпискиКDoc(НовыйТекстHTML);
	УдалитьТегиКомментариев(НовыйТекстHTML);
	
	КорректироватьПоляКDoc(НовыйТекстHTML);
	
	УдалитьПравкиТаблицWord(НовыйТекстHTML);
	УдалитьПравкиЯчеекWord(НовыйТекстHTML);
	
	УдалитьСвоиIMG(НовыйТекстHTML);
	
	ВернутьHTMLОтПервойВерсии(НовыйТекстHTML, HTMLПервойВерсии);
	ВернутьHEADОтПервойВерсии(НовыйТекстHTML, HTMLПервойВерсии);
	ВернутьTOCОтПервойВерсии(НовыйТекстHTML, HTMLПервойВерсии);
	
	Возврат НовыйТекстHTML;
	
КонецФункции	

Процедура УдалитьСвоиIMG(ТекстПисьма)
	
	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		ПозицияНачало1 = СтрНайти(ТекстПисьмаДляПравкиНРег, "own_img", , НачальнаяПозиция);
		
		Если ПозицияНачало1 = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		ПозицияНачалаТега = СтрНайти(ТекстПисьмаДляПравкиНРег, "<img", НаправлениеПоиска.СКонца, ПозицияНачало1);
		ПозицияКонцаТега = СтрНайти(ТекстПисьмаДляПравкиНРег, ">", , ПозицияНачало1);
		
		Если ПозицияНачалаТега <> 0 И ПозицияКонцаТега <> 0 Тогда
			
			ТекстПисьмаДляПравки =
				Лев(ТекстПисьмаДляПравки, ПозицияНачалаТега - 1)
				+ Сред(ТекстПисьмаДляПравки, ПозицияКонцаТега + 1);
				
			ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
			
			НачальнаяПозиция = ПозицияНачало1 + 1;
			
		Иначе	
			НачальнаяПозиция = ПозицияНачало1 + 1;
			Продолжить;
		КонецЕсли;	
		
		НачальнаяПозиция = ПозицияНачало1 + 1;
		
	КонецЦикла;	
	
	// теперь вырежем own_a_tag
	НачальнаяПозиция = 1;
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		ПозицияНачало1 = СтрНайти(ТекстПисьмаДляПравкиНРег, "own_a_tag", , НачальнаяПозиция);
		
		Если ПозицияНачало1 = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		ПозицияНачалаТега = СтрНайти(ТекстПисьмаДляПравкиНРег, "<a", НаправлениеПоиска.СКонца, ПозицияНачало1);
		ПозицияКонцаТега = СтрНайти(ТекстПисьмаДляПравкиНРег, "</a>", , ПозицияНачало1);
		
		Если ПозицияНачалаТега <> 0 И ПозицияКонцаТега <> 0 Тогда
			
			ТекстПисьмаДляПравки =
				Лев(ТекстПисьмаДляПравки, ПозицияНачалаТега - 1)
				+ Сред(ТекстПисьмаДляПравки, ПозицияКонцаТега + СтрДлина("</a>"));
				
			ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
			
			НачальнаяПозиция = ПозицияНачало1 + 1;
			
		Иначе	
			НачальнаяПозиция = ПозицияНачало1 + 1;
			Продолжить;
		КонецЕсли;	
		
		НачальнаяПозиция = ПозицияНачало1 + 1;
		
	КонецЦикла;	
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры

Процедура НайтиПозицииНачалоИКонецТега(Текст, Тег, ПозицияНачала, ПозицияКонцаЗакрытие)
	
	ПозицияНачала = 0;
	ПозицияКонцаЗакрытие = 0;
	
	ТекстНРег = НРег(Текст);
	
	ПозицияНачала = СтрНайти(ТекстНРег, "<" + Тег);
	Если ПозицияНачала = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаКонца = "</" + Тег + ">";
	ПозицияКонца = СтрНайти(ТекстНРег, СтрокаКонца);
	Если ПозицияКонца = 0 Тогда
		Возврат;
	КонецЕсли;	
	ПозицияКонцаЗакрытие = ПозицияКонца + СтрДлина(СтрокаКонца);
	
КонецПроцедуры	

Процедура НайтиПозицииНачалоИКонецОдинарногоТега(Текст, Тег, ПозицияНачала, ПозицияКонцаЗакрытие)
	
	ПозицияНачала = 0;
	ПозицияКонцаЗакрытие = 0;
	
	ТекстНРег = НРег(Текст);
	
	ПозицияНачала = СтрНайти(ТекстНРег, "<" + Тег);
	Если ПозицияНачала = 0 Тогда
		Возврат;
	КонецЕсли;	
	ПозицияКонцаЗакрытие = СтрНайти(ТекстНРег, ">",,ПозицияНачала);
	ПозицияКонцаЗакрытие = ПозицияКонцаЗакрытие + 1;
	
КонецПроцедуры	

Процедура ВернутьHTMLОтПервойВерсии(Текст, HTMLПервойВерсии)
	
	ПозицияНачала = 0;
	ПозицияКонцаЗакрытие = 0;
	НайтиПозицииНачалоИКонецОдинарногоТега(Текст, "html", ПозицияНачала, ПозицияКонцаЗакрытие);
	
	ПозицияНачалаПервойВерсии = 0;
	ПозицияКонцаЗакрытиеПервойВерсии = 0;
	НайтиПозицииНачалоИКонецОдинарногоТега(HTMLПервойВерсии, "html", ПозицияНачалаПервойВерсии, ПозицияКонцаЗакрытиеПервойВерсии);
	
	Если ПозицияНачала <> 0 И ПозицияКонцаЗакрытие  <> 0
		И ПозицияНачалаПервойВерсии <> 0 И ПозицияКонцаЗакрытиеПервойВерсии <> 0 Тогда
		
		СтрокаHEAD = Сред(HTMLПервойВерсии, ПозицияНачалаПервойВерсии, ПозицияКонцаЗакрытиеПервойВерсии - ПозицияНачалаПервойВерсии);
		
		Текст = Лев(Текст, ПозицияНачала - 1) 
			+ СтрокаHEAD
			+ Сред(Текст, ПозицияКонцаЗакрытие);
		
	КонецЕсли;	
	
	
КонецПроцедуры	

Процедура ВернутьHEADОтПервойВерсии(Текст, HTMLПервойВерсии)
	
	ПозицияНачала = 0;
	ПозицияКонцаЗакрытие = 0;
	НайтиПозицииНачалоИКонецТега(Текст, "head", ПозицияНачала, ПозицияКонцаЗакрытие);
	
	ПозицияНачалаПервойВерсии = 0;
	ПозицияКонцаЗакрытиеПервойВерсии = 0;
	НайтиПозицииНачалоИКонецТега(HTMLПервойВерсии, "head", ПозицияНачалаПервойВерсии, ПозицияКонцаЗакрытиеПервойВерсии);
	
	Если ПозицияНачала <> 0 И ПозицияКонцаЗакрытие  <> 0
		И ПозицияНачалаПервойВерсии <> 0 И ПозицияКонцаЗакрытиеПервойВерсии <> 0 Тогда
		
		СтрокаHEAD = Сред(HTMLПервойВерсии, ПозицияНачалаПервойВерсии, ПозицияКонцаЗакрытиеПервойВерсии - ПозицияНачалаПервойВерсии);
		
		Текст = Лев(Текст, ПозицияНачала - 1) 
			+ СтрокаHEAD
			+ Сред(Текст, ПозицияКонцаЗакрытие + 1);
		
	КонецЕсли;	
	
	
КонецПроцедуры	

Процедура НайтиПозицииНачалоИКонецTOC(Текст, ПозицияНачала, ПозицияКонцаЗакрытие)
	
	ПозицияНачала = 0;
	ПозицияКонцаЗакрытие = 0;
	
	ТекстНРег = НРег(Текст);
	
	ПозицияНачала = СтрНайти(ТекстНРег, "<w:sdt");
	Если ПозицияНачала <> 0 Тогда
		
		СтрокаКонца = "</w:sdt>";
		ПозицияКонцаФинал = СтрНайти(ТекстНРег, СтрокаКонца,, ПозицияНачала);
		Если ПозицияКонцаФинал = 0 Тогда
			Возврат; // некорректный html
		КонецЕсли;	
		ПозицияКонцаЗакрытие = ПозицияКонцаФинал + СтрДлина(СтрокаКонца);
		
		Возврат;
		
	КонецЕсли;	
	
	
	// если не нашли w:Sdt, ищем как раньше.
	
	ПозицияНачала = СтрНайти(ТекстНРег, "class=msotoc");
	Если ПозицияНачала = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПозицияНачалаHeading = СтрНайти(ТекстНРег, "class=msotocheading");
	Если ПозицияНачалаHeading = ПозицияНачала Тогда
		
		ПозицияНачала = СтрНайти(ТекстНРег, "class=msotoc",,ПозицияНачалаHeading + 1);
		Если ПозицияНачала = 0 Тогда
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	ПозицияНачала = СтрНайти(ТекстНРег, "<", НаправлениеПоиска.СКонца, ПозицияНачала);
	Если ПозицияНачала = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПозицияКонца = СтрНайти(ТекстНРег, "class=msotoc", НаправлениеПоиска.СКонца, СтрДлина(ТекстНРег));
	Если ПозицияКонца = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаКонца = "</p>";
	ПозицияКонцаФинал = СтрНайти(ТекстНРег, СтрокаКонца,, ПозицияКонца);
	Если ПозицияКонцаФинал = 0 Тогда
		Возврат;
	КонецЕсли;	
	ПозицияКонцаЗакрытие = ПозицияКонцаФинал + СтрДлина(СтрокаКонца);
	
	//  в конце еще нужен блок   
	// <p class=MsoNormal><!--[if supportFields]><b><span style='mso-element:field-end'></span></b><![endif]--><o:p>&nbsp;</o:p></p>
	ПозицияКонца = СтрНайти(ТекстНРег, "'mso-element:field-end",, ПозицияКонцаЗакрытие);
	Если ПозицияКонца = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаКонца = "</p>";
	ПозицияКонцаФинал = СтрНайти(ТекстНРег, СтрокаКонца,, ПозицияКонца);
	Если ПозицияКонцаФинал = 0 Тогда
		Возврат;
	КонецЕсли;	
	ПозицияКонцаЗакрытие = ПозицияКонцаФинал + СтрДлина(СтрокаКонца);
	
КонецПроцедуры	

// Вернет таблицу оглавления  - считаем что она только одна.
Процедура ВернутьTOCОтПервойВерсии(Текст, HTMLПервойВерсии)
	
	ПозицияНачала = 0;
	ПозицияКонцаЗакрытие = 0;
	НайтиПозицииНачалоИКонецTOC(Текст, ПозицияНачала, ПозицияКонцаЗакрытие);
	
	ПозицияНачалаПервойВерсии = 0;
	ПозицияКонцаЗакрытиеПервойВерсии = 0;
	НайтиПозицииНачалоИКонецTOC(HTMLПервойВерсии, ПозицияНачалаПервойВерсии, ПозицияКонцаЗакрытиеПервойВерсии);
	
	Если ПозицияНачала <> 0 И ПозицияКонцаЗакрытие  <> 0
		И ПозицияНачалаПервойВерсии <> 0 И ПозицияКонцаЗакрытиеПервойВерсии <> 0 Тогда
		
		СтрокаHEAD = Сред(HTMLПервойВерсии, ПозицияНачалаПервойВерсии, ПозицияКонцаЗакрытиеПервойВерсии - ПозицияНачалаПервойВерсии);
		
		Текст = Лев(Текст, ПозицияНачала - 1) 
			+ СтрокаHEAD
			+ Сред(Текст, ПозицияКонцаЗакрытие + 1);
		
	КонецЕсли;	
	
	
КонецПроцедуры	

Процедура УдалитьТегиSpan(ТекстПисьма)
	
	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 100000 Тогда
			Прервать;
		КонецЕсли;	
		
		ПозицияНачало1 = СтрНайти(ТекстПисьмаДляПравки, "<SPAN id=do_", , НачальнаяПозиция);
		Если ПозицияНачало1 = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		ПозицияКонцаСкобки = СтрНайти(ТекстПисьмаДляПравки, ">", , ПозицияНачало1);
		Если ПозицияКонцаСкобки <> 0 Тогда
			
			КонецТега = "</span>";
			ПозицияКонцаТега = СтрНайти(ТекстПисьмаДляПравки, "</SPAN>", , ПозицияКонцаСкобки);
			
			Если ПозицияКонцаТега <> 0 И ПозицияКонцаТега < ПозицияКонцаСкобки + 200 Тогда
				
				СамоСлово = Сред(ТекстПисьмаДляПравки, ПозицияКонцаСкобки + 1, ПозицияКонцаТега - ПозицияКонцаСкобки - 1);
				
				ТекстПисьмаДляПравки =
					Лев(ТекстПисьмаДляПравки, ПозицияНачало1 - 1)
					+ СамоСлово
					+ Сред(ТекстПисьмаДляПравки, ПозицияКонцаТега + СтрДлина(КонецТега));
					
				НачальнаяПозиция = ПозицияНачало1 + 1;
				
			Иначе	
				НачальнаяПозиция = ПозицияКонцаСкобки + 1;
				Продолжить;
			КонецЕсли;			
			
		Иначе	
			НачальнаяПозиция = ПозицияНачало1 + 1;
			Продолжить;
		КонецЕсли;	
		
		НачальнаяПозиция = ПозицияНачало1 + 1;
		
	КонецЦикла;	
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры

Процедура КорректироватьСпискиКDoc(ТекстПисьма)
	
	Текст = ТекстПисьма;
	ТекстНРег = НРег(Текст);
	
	ПозицияНачала = СтрНайти(ТекстНРег, "<body");
	
	СчетчикОткрытыхOL = 0;
	ПризнакOL = "<ol>";
	ПризнакКонцаOL = "</ol>";
	ПризнакLI = "<li>";
	
	СчетчикиУровней = Новый Соответствие; // ключ - число, значение - число. При каждом li инкрементируем значение
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		Если СчетчикОткрытыхOL = 0 Тогда
			
			ПозицияПризнакOL = СтрНайти(ТекстНРег, ПризнакOL,,ПозицияНачала);
			Если ПозицияПризнакOL = 0 Тогда
				Прервать;
			КонецЕсли;

			СчетчикОткрытыхOL = СчетчикОткрытыхOL + 1;
			СчетчикиУровней.Вставить(СчетчикОткрытыхOL, 0);
			ПозицияНачала = ПозицияПризнакOL + СтрДлина(ПризнакOL);
			Продолжить;
			
		Иначе  // ищем <li> и <ol> </ol>	
			
			ПозицияПризнакOL = СтрНайти(ТекстНРег, ПризнакOL,,ПозицияНачала);
			ПозицияПризнакКонцаOL = СтрНайти(ТекстНРег, ПризнакКонцаOL,,ПозицияНачала);
			ПозицияПризнакLI = СтрНайти(ТекстНРег, ПризнакLI,,ПозицияНачала);
			
			Если ПозицияПризнакOL = 0 И ПозицияПризнакКонцаOL = 0 И ПозицияПризнакLI Тогда
				Прервать;
			КонецЕсли;	
			
			Если ПозицияПризнакOL <> 0 
				И (ПозицияПризнакOL < ПозицияПризнакКонцаOL Или ПозицияПризнакКонцаOL = 0)
				И (ПозицияПризнакOL < ПозицияПризнакLI Или ПозицияПризнакLI = 0) Тогда
				
				СчетчикОткрытыхOL = СчетчикОткрытыхOL + 1;
				СчетчикиУровней.Вставить(СчетчикОткрытыхOL, 0);
				ПозицияНачала = ПозицияПризнакOL + СтрДлина(ПризнакOL);
				Продолжить;
				
			КонецЕсли;	
			
			Если ПозицияПризнакКонцаOL <> 0 
				И (ПозицияПризнакКонцаOL < ПозицияПризнакOL Или ПозицияПризнакOL = 0)
				И (ПозицияПризнакКонцаOL < ПозицияПризнакLI Или ПозицияПризнакLI = 0) Тогда
				
				СчетчикОткрытыхOL = СчетчикОткрытыхOL - 1;
				СчетчикиУровней.Удалить(СчетчикОткрытыхOL);
				ПозицияНачала = ПозицияПризнакКонцаOL + СтрДлина(ПризнакКонцаOL);
				Продолжить;
				
			КонецЕсли;	
			
			Если ПозицияПризнакLI <> 0 
				И (ПозицияПризнакLI < ПозицияПризнакOL Или ПозицияПризнакOL = 0)
				И (ПозицияПризнакLI < ПозицияПризнакКонцаOL Или ПозицияПризнакКонцаOL = 0) Тогда
				
				ТекНомерLI = СчетчикиУровней.Получить(СчетчикОткрытыхOL);
				Если ТекНомерLI = Неопределено Тогда
					ТекНомерLI = 1;
					СчетчикиУровней.Вставить(СчетчикОткрытыхOL, ТекНомерLI);
				Иначе	
					ТекНомерLI = ТекНомерLI + 1;
					СчетчикиУровней[СчетчикОткрытыхOL] = ТекНомерLI;
				КонецЕсли;	
				
				// тут как раз и делаем замену
				ПозицияПризнакСписка = ПозицияПризнакLI;
				
				// чтобы не выйти за следующий
				ПозицияСледующийLI = СтрНайти(ТекстНРег, ПризнакLI,,ПозицияПризнакLI + СтрДлина(ПризнакLI));
				
				// если дошли до последнего, ставим как длина текста - чтобы сработало ПозицияMsoNormal < ПозицияСледующийLI
				Если ПозицияСледующийLI = 0 Тогда 
					ПозицияСледующийLI = СтрДлина(ТекстНРег);
				КонецЕсли;	
				
				ОписаниеСтроки = "";
				ПозицияКонцаLI = ПозицияПризнакLI + СтрДлина(ПризнакLI);
				ПозицияНачалаКомментария = СтрНайти(ТекстНРег, "<!--",,ПозицияКонцаLI);
				Если ПозицияНачалаКомментария = 0 Тогда
					ПозицияНачала = ПозицияПризнакLI + СтрДлина(ПризнакLI);
					Продолжить;
				КонецЕсли;
				
				Если АбсЗначение(ПозицияНачалаКомментария - ПозицияКонцаLI) > 10 Тогда
					
					// Это вставка перевода строк (с нумерацией) в html редакторе
					//  - комментария нет. Ищем ближайший комментарий.
					
					ПозицияНачалаКомментарияВперед = СтрНайти(ТекстНРег, "<!--",,ПозицияКонцаLI);
					ПозицияНачалаКомментарияНазад  = СтрНайти(ТекстНРег, "<!--",НаправлениеПоиска.СКонца,ПозицияКонцаLI);
					Дельта1 = ПозицияНачалаКомментарияВперед - ПозицияКонцаLI;
					Дельта2 = ПозицияКонцаLI - ПозицияНачалаКомментарияНазад;
					
					Если ПозицияНачалаКомментарияВперед = 0 И ПозицияНачалаКомментарияНазад = 0 Тогда
						ПозицияНачалаКомментария = 0;
					Иначе	
						
						Если АбсЗначение(Дельта1) < АбсЗначение(Дельта2) Тогда
							ПозицияНачалаКомментария = ПозицияНачалаКомментарияВперед;
						Иначе	
							ПозицияНачалаКомментария = ПозицияНачалаКомментарияНазад;
						КонецЕсли;	
						
					КонецЕсли;	
						
				КонецЕсли;		
					
				
				Если ПозицияНачалаКомментария <> 0 Тогда
					
					ПозицияКонцаКомментария = СтрНайти(ТекстНРег, "-->",,ПозицияНачалаКомментария);
					Если ПозицияКонцаКомментария < ПозицияНачалаКомментария + 100 Тогда
						
						ПозНачалаВнутриКомментария = ПозицияНачалаКомментария + СтрДлина("<!--");
						
						ОписаниеСтроки = Сред(Текст, ПозНачалаВнутриКомментария, 
							ПозицияКонцаКомментария - ПозНачалаВнутриКомментария);
						
					КонецЕсли;
						
				КонецЕсли;	
				
				// Имя класса бывает MsoNormal MsoCompact ConsPlusNormal и что угодно еще.
				//  Поэтому имя не указываем
				ПозицияMsoNormal = СтрНайти(ТекстНРег, "class=",,ПозицияПризнакLI);
				
				Если ПозицияMsoNormal <> 0 И ПозицияMsoNormal < ПозицияСледующийLI Тогда
					
					ТекстStyle = "style='";
					ТекстStyle2 = "style=""";
					
					ПозицияStyle = 0;
					ПозицияStyle1 = СтрНайти(ТекстНРег, ТекстStyle,, ПозицияMsoNormal);
					ПозицияStyle2 = СтрНайти(ТекстНРег, ТекстStyle2,, ПозицияMsoNormal);
					
					Если ПозицияStyle1 <> 0 И ((ПозицияStyle1 < ПозицияStyle2) Или (ПозицияStyle2 = 0)) Тогда
						ПозицияStyle = ПозицияStyle1;
					КонецЕсли;	
					Если ПозицияStyle2 <> 0 И ((ПозицияStyle2 < ПозицияStyle1) Или (ПозицияStyle1 = 0)) Тогда
						ПозицияStyle = ПозицияStyle2;
					КонецЕсли;	
					
					Если ПозицияStyle < ПозицияMsoNormal + 400 Тогда
						
						ПозицияВставки = ПозицияStyle + СтрДлина(ТекстStyle);
						
						ТекстВставки = СтрШаблон("text-indent:%1pt;", Строка(35*СчетчикОткрытыхOL));
						
						Если ОписаниеСтроки <> "" Тогда
							ТекстВставки = ТекстВставки + ОписаниеСтроки + ";";
						КонецЕсли;	
						
						Текст = Лев(Текст, ПозицияВставки - 1)
						 	+ ТекстВставки
							+ Сред(Текст, ПозицияВставки);
						ТекстНРег = НРег(Текст);	
						
					КонецЕсли;	
					
					
					//<span style='mso-list:Ignore'> - в это же место вставим текст "2.1". 
					// СчетчикиУровней - все открытые собрать, чтобы получить скажем "2.1.4"
					ПолнаяСтрокаНомера = ""; // вида "2.1.4"
					Для Пер = 1 По СчетчикОткрытыхOL Цикл
						Счетчик = СчетчикиУровней.Получить(Пер);
						Если Счетчик <> Неопределено И ТипЗнч(Счетчик) = Тип("Число") Тогда
							ПолнаяСтрокаНомера = ПолнаяСтрокаНомера + Строка(Счетчик) + ".";
						КонецЕсли;	
					КонецЦикла;	
					
					ПозицияСерединыНомера = 0;
					СтрокаТегаНомера1 = "mso-list:ignore";
					СтрокаТегаНомера2 = "mso-list: ignore";
					ПозицияСерединыНомера1 = СтрНайти(ТекстНРег, СтрокаТегаНомера1,, ПозицияПризнакСписка);
					ПозицияСерединыНомера2 = СтрНайти(ТекстНРег, СтрокаТегаНомера2,, ПозицияПризнакСписка);
					
					Если ПозицияСерединыНомера1 <> 0 И ((ПозицияСерединыНомера1 < ПозицияСерединыНомера2) Или (ПозицияСерединыНомера2 = 0)) Тогда
						ПозицияСерединыНомера = ПозицияСерединыНомера1;
					КонецЕсли;	
					Если ПозицияСерединыНомера2 <> 0 И ((ПозицияСерединыНомера2 < ПозицияСерединыНомера1) Или (ПозицияСерединыНомера1 = 0)) Тогда
						ПозицияСерединыНомера = ПозицияСерединыНомера2;
					КонецЕсли;	
					
					Если ПозицияСерединыНомера <> 0 И ПозицияСерединыНомера < ПозицияПризнакСписка + 400 Тогда
						
					КонецЕсли;	

			
					ПозицияНачалаТега = СтрНайти(ТекстНРег, "<", НаправлениеПоиска.СКонца, ПозицияMsoNormal);
					Если СтрНайти(ТекстНРег, "<span", ,ПозицияНачалаТега) = ПозицияНачалаТега Тогда
						// надо заменить span на p - сперва найдем последний span
						ПозицияНачалаПоследнегоТега = НайтиПоследнийТегSpan(ТекстНРег, ПозицияНачалаТега);
						
						Если ПозицияНачалаПоследнегоТега > 0 Тогда
							
							Текст = Лев(Текст, ПозицияНачалаПоследнегоТега - 1)
							 	+ "</p>"
								+ Сред(Текст, ПозицияНачалаПоследнегоТега + СтрДлина("</span>"));
								
							Текст = Лев(Текст, ПозицияНачалаТега - 1)
							 	+ "<p"
								+ Сред(Текст, ПозицияНачалаТега + СтрДлина("<span"));
								
							ТекстНРег = НРег(Текст);	
								
						КонецЕсли;	
						
					КонецЕсли;	
					
					
				КонецЕсли;	
				
				
				ПозицияНачала = ПозицияПризнакLI + СтрДлина(ПризнакLI);
				Продолжить;
				
			Иначе	
				
				ПозицияНачала = ПозицияНачала + 1;
				Продолжить;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		
	КонецЦикла;	
	
	Текст = СтрЗаменить(Текст, "<ol>", "");
	Текст = СтрЗаменить(Текст, "<OL>", "");
	
	Текст = СтрЗаменить(Текст, "</ol>", "");
	Текст = СтрЗаменить(Текст, "</OL>", "");
	
	Текст = СтрЗаменить(Текст, "<li>", "");
	Текст = СтрЗаменить(Текст, "<LI>", "");
	
	ТекстПисьма = Текст;
	
КонецПроцедуры

Функция НайтиПоследнийТегSpan(Текст, ПозицияНачалаТега)
	
	ЧислоОткрытыхSpan = 0;
	
	ТекстНРег = НРег(Текст);
	
	ПозицияНачала = ПозицияНачалаТега;
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		Позиция1 = СтрНайти(ТекстНРег, "<span", , ПозицияНачала);
		Позиция2 = СтрНайти(ТекстНРег, "</span>", , ПозицияНачала);
		
		Если Позиция1 = 0 И Позиция2 = 0
			Или Позиция1 = Позиция2 Тогда
			Возврат -1;
		КонецЕсли;	
		
		Если Позиция1 <> 0 И ((Позиция1 < Позиция2) Или (Позиция2 = 0)) Тогда
			ЧислоОткрытыхSpan = ЧислоОткрытыхSpan + 1;
			ПозицияНачала = Позиция1 + 1;
			Продолжить;
		КонецЕсли;	
		
		Если Позиция2 <> 0 И ((Позиция2 < Позиция1) Или (Позиция1 = 0)) Тогда
			ЧислоОткрытыхSpan = ЧислоОткрытыхSpan - 1;
			
			Если ЧислоОткрытыхSpan = 0 Тогда
				Возврат Позиция2;
			КонецЕсли;	
			
			ПозицияНачала = Позиция2 + 1;
			Продолжить;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат -1;
	
КонецФункции	
	
Процедура УдалитьТегиКомментариев(ТекстПисьма)
	
	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		ПозицияНачало1 = СтрНайти(ТекстПисьмаДляПравкиНРег, "<!--mso-list", , НачальнаяПозиция);
		
		Если ПозицияНачало1 = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		ТекстКонца = "-->";
		ПозицияКонцаСкобки = СтрНайти(ТекстПисьмаДляПравкиНРег, ТекстКонца, , ПозицияНачало1);
		Если ПозицияКонцаСкобки <> 0 Тогда
			
			ПозицияФинал = ПозицияКонцаСкобки + СтрДлина(ТекстКонца);
			
			ТекстПисьмаДляПравки =
				Лев(ТекстПисьмаДляПравки, ПозицияНачало1 - 1)
				+ Сред(ТекстПисьмаДляПравки, ПозицияФинал);
				
			ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
			
			НачальнаяПозиция = ПозицияНачало1 + 1;
			
		Иначе	
			НачальнаяПозиция = ПозицияНачало1 + 1;
			Продолжить;
		КонецЕсли;	
		
		НачальнаяПозиция = ПозицияНачало1 + 1;
		
	КонецЦикла;	
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры

Процедура КорректироватьПоляКDoc(ТекстПисьма)

	// 
	//  <!--c1field-if supportFields-c1end>
	//	меняем на
	//	<!--[if supportFields]>

	ЧислоИтерацийВнутри = 0;
	Пока Истина Цикл
		
		ЧислоИтерацийВнутри = ЧислоИтерацийВнутри + 1;
		Если ЧислоИтерацийВнутри > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		ПозицияДляИф = СтрНайти(ТекстПисьма, "<!--c1field");
		Если ПозицияДляИф = 0 Тогда
			Прервать;
		КонецЕсли;
		ПозицияКонцаИф = СтрНайти(ТекстПисьма, "-c1end>",,ПозицияДляИф);
		Если ПозицияКонцаИф = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияНачалаКонтента = ПозицияДляИф + СтрДлина("<!--c1field-");
		Контент = Сред(ТекстПисьма, ПозицияНачалаКонтента, ПозицияКонцаИф - ПозицияНачалаКонтента);
		
		ПозицияКонцаИфПолная = ПозицияКонцаИф + СтрДлина("-c1end>");
		
		ТекстПисьма = 
			Лев(ТекстПисьма, ПозицияДляИф - 1)
			+ "<!--["  + Контент + "]>"
			+ Сред(ТекстПисьма, ПозицияКонцаИфПолная);
		
	КонецЦикла;		
	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "<c1field-->", "<![endif]-->");
	
КонецПроцедуры

// Сортирует правки по позиции в HTML
Процедура СортироватьПравки(ПравкиТаблица, ТекстHTML) Экспорт
	
	ТекстHTMLНРег = НРег(ТекстHTML);
	
	Для Каждого Строка Из ПравкиТаблица Цикл
		
		Если Не Строка.СсылкиУтеряны Тогда
		
			ИДСтрока = Формат(Строка.ИдНачала, "ЧГ=0");
			СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
			Строка.ПозицияВHtml = СтрНайти(ТекстHTMLНРег, СтрокаПоиска);
			
			
			ИДСтрока = Формат(Строка.ИдКонца, "ЧГ=0");
			СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
			Строка.ПозицияВHtmlКонец = СтрНайти(ТекстHTMLНРег, СтрокаПоиска);
			
		Иначе	
			
			Строка.ПозицияВHtml = Строка.ИдНачала; // просто для сортировки
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ПравкиТаблица.Сортировать("НомерБлока, ПозицияВHtml, Дата");
	
	Для Каждого Строка Из ПравкиТаблица Цикл
		
		Если Строка.СсылкиУтеряны Тогда
		
			Строка.ПозицияВHtml = 0;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

// Сортирует правки по позиции в HTML
Процедура СортироватьТаблицуПравок(ПравкиТаблица) Экспорт
	
	ПравкиТаблица.Сортировать("НомерБлока, ПозицияВHtml");
	
КонецПроцедуры	

// пропускаем 10 тегов "span id=do_" в нужном направлении. Возвращает позицию
Функция Пропустить10ТеговSpanDo(ТекстНРег, ПозицияНачалаТега, НаправлениеПоискаАргумент)
	
	МаксИтераций = 10;
	Для Итерация = 1 По МаксИтераций Цикл
		
		Позиция1 = СтрНайти(ТекстНРег, "<span id=do_", НаправлениеПоискаАргумент, ПозицияНачалаТега);
		Если Позиция1 = 0 Тогда
			Возврат ПозицияНачалаТега;
		КонецЕсли;	
		
		ПозицияНачалаТега = Позиция1;
		Если НаправлениеПоискаАргумент = НаправлениеПоиска.СНачала Тогда
			ПозицияНачалаТега = ПозицияНачалаТега + 1;
		Иначе	
			ПозицияНачалаТега = ПозицияНачалаТега - 1;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат ПозицияНачалаТега;
	
КонецФункции	

// Возвращает кусок текста (plain text) +-10 слов (от ИдНачала - 10 слов  до ИдКонца + 10 слов)
Функция ПолучитьФрагментТекста(ТекстHTML, ИдНачала, ИдКонца) Экспорт
	
	ФрагментТекста = "";
	
	ТекстHTMLНРег = НРег(ТекстHTML);
	
	ИДСтрока = Формат(ИдНачала, "ЧГ=0");
	СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
	ПозицияВHtml = СтрНайти(ТекстHTMLНРег, СтрокаПоиска);
	
	ИДСтрока = Формат(ИдКонца, "ЧГ=0");
	СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
	ПозицияВHtmlКонец = СтрНайти(ТекстHTMLНРег, СтрокаПоиска);
	
	Если ПозицияВHtml = 0 Или ПозицияВHtmlКонец = 0 Тогда
		Возврат ФрагментТекста;
	КонецЕсли;	
	
	ПозицияСтарт =  Пропустить10ТеговSpanDo(ТекстHTMLНРег, ПозицияВHtml - 1, НаправлениеПоиска.СКонца);
	ПозицияФиниш =  Пропустить10ТеговSpanDo(ТекстHTMLНРег, ПозицияВHtmlКонец + 1, НаправлениеПоиска.СНачала);
	
	ФрагментHTML = Сред(ТекстHTML, ПозицияСтарт, ПозицияФиниш - ПозицияСтарт - 1);
	ФрагментТекста = РаботаС_HTML.ПолучитьТекстИзHTML(ФрагментHTML);
	ФрагментТекста = СокрЛП(ФрагментТекста);
	ФрагментТекста = СтрЗаменить(ФрагментТекста, Символы.ВК, " ");
	ФрагментТекста = СтрЗаменить(ФрагментТекста, Символы.ПС, " ");
	ФрагментТекста = СтрЗаменить(ФрагментТекста, Символы.Таб, " ");
	
	Возврат ФрагментТекста;
	
КонецФункции	

// Возвращает кусок текста (plain text) из html
Функция ПолучитьЧистыйФрагментТекста(ТекстHTML, ИдНачала, ИдКонца) Экспорт
	
	ФрагментТекста = "";
	
	ТекстHTMLНРег = НРег(ТекстHTML);
	
	ИДСтрока = Формат(ИдНачала, "ЧГ=0");
	СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
	ПозицияВHtml = СтрНайти(ТекстHTMLНРег, СтрокаПоиска);
	
	ИДСтрока = Формат(ИдКонца, "ЧГ=0");
	СтрокаПоиска = СтрШаблон("<span id=do_%1>", ИДСтрока);
	ПозицияВHtmlКонец = СтрНайти(ТекстHTMLНРег, СтрокаПоиска);
	
	Если ПозицияВHtml = 0 Или ПозицияВHtmlКонец = 0 Тогда
		Возврат ФрагментТекста;
	КонецЕсли;	
	
	
	ЧтоНайтиКонецЗавершение = "</span>";	
	
	ПозКонца = СтрНайти(ТекстHTMLНРег, ЧтоНайтиКонецЗавершение,,ПозицияВHtmlКонец + 1);
	
	Если ПозКонца = 0 Тогда
		Возврат ФрагментТекста;
	КонецЕсли;	
	
	ПозицияСтарт = ПозицияВHtml;
	ПозицияФиниш = ПозКонца + СтрДлина(ЧтоНайтиКонецЗавершение);
	
	ПозЗакрывСкобки = СтрНайти(ТекстHTMLНРег, ">",,ПозицияВHtmlКонец + 1);
	Если ПозЗакрывСкобки = 0 Тогда
		Возврат ФрагментТекста;
	КонецЕсли;	
	
	ФрагментHTML = Сред(ТекстHTML, ПозицияСтарт, ПозицияФиниш - ПозицияСтарт - 1);
	ФрагментТекста = РаботаС_HTML.ПолучитьТекстИзHTML(ФрагментHTML);
	ФрагментТекста = СокрЛП(ФрагментТекста);
	ФрагментТекста = СтрЗаменить(ФрагментТекста, Символы.ВК, " ");
	ФрагментТекста = СтрЗаменить(ФрагментТекста, Символы.ПС, " ");
	ФрагментТекста = СтрЗаменить(ФрагментТекста, Символы.Таб, " ");
	
	Возврат ФрагментТекста;
	
КонецФункции	

// Подсвечает цветом фона правки
Функция ПодсветитьЦветомФонаОднуПравку(ТекстHTMLАргумент, СтрокаЦвета, ЧтоНайти, ЧтоНайтиКонец)
	
	ТекстHTML = ТекстHTMLАргумент;
	ТекстHTMLНРег = НРег(ТекстHTML);
	
	ШаблонSpan 		= "<span id=do_"; 
	ЧтоНайтиКонецЗавершение = "</span>";
	
	ПозНачала = 1;
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		ПозНачала = СтрНайти(ТекстHTMLНРег, ШаблонSpan,,ПозНачала);
		Если ПозНачала <> 0 Тогда
			
			ПозЗакрывСкобки = СтрНайти(ТекстHTMLНРег, ">",,ПозНачала + 1);
			Если ПозЗакрывСкобки = 0 Тогда
				Прервать;
			КонецЕсли;	
			
			НужноПрерватьПослеЭтогоСлова = Ложь;
			
			ТекстВнутри = Сред(ТекстHTMLНРег, ПозНачала, ПозЗакрывСкобки - ПозНачала + 1);
			Если ТекстВнутри = ЧтоНайтиКонец Тогда
				НужноПрерватьПослеЭтогоСлова = Истина;
			КонецЕсли;	
			
			ТекстHTML =
				Лев(ТекстHTML, ПозНачала - 1)
				+ СтрШаблон("<span id=own_highlight style=""background-color: %1"">", СтрокаЦвета)
				+ Сред(ТекстHTML, ПозНачала);
				
			ТекстHTMLНРег = НРег(ТекстHTML);
			
			ПозКонца = СтрНайти(ТекстHTMLНРег, ЧтоНайтиКонецЗавершение,,ПозНачала + 1);
			
			Если ПозКонца <> 0 Тогда
				
				ПозЗамены = ПозКонца + СтрДлина(ЧтоНайтиКонецЗавершение);
			
				ТекстHTML =
					Лев(ТекстHTML, ПозЗамены - 1)
					+ "</span>"
					+ Сред(ТекстHTML, ПозЗамены);
					
				ТекстHTMLНРег = НРег(ТекстHTML);		
				
				ПозНачала = ПозЗамены + СтрДлина("</span>");
				Если ПозНачала >= СтрДлина(ТекстHTMLНРег) Тогда
					Прервать;
				КонецЕсли;
				
				Если НужноПрерватьПослеЭтогоСлова Тогда
					Прервать;
				КонецЕсли;
				
			Иначе
				
				Прервать;
				
			КонецЕсли;		
			
		Иначе
			
			Прервать;
			
		КонецЕсли;	
		
		
	КонецЦикла;	
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ПолучитьСтрокуЦветаПравкиИнициатора() Экспорт
	
	Возврат "orange";
	
КонецФункции	
	
// Подсвечает цветом фона правки
Функция ПодсветитьЦветомФонаПравки(ПравкиТаблица, ТекстHTMLАргумент,
	НомерВерсии = -1, НомерБлока = 0) Экспорт
	
	ТекстHTML = ТекстHTMLАргумент;
	ТекстHTMLНРег = НРег(ТекстHTML);
	
	Для Каждого Заметка Из ПравкиТаблица Цикл
		
		Если ЗначениеЗаполнено(Заметка.ИдНачала) И ЗначениеЗаполнено(Заметка.ИдКонца)
			И Заметка.НомерБлока = НомерБлока Тогда
			
			ЧтоНайти = СтрШаблон("<span id=do_%1>", 
				СогласованиеВРежимеЗамечанийHTMLСервер.ПолучитьСтрокаИзIdЧисло(Заметка.ИдНачала));	
			ЧтоНайтиКонец = СтрШаблон("<span id=do_%1>", 
				СогласованиеВРежимеЗамечанийHTMLСервер.ПолучитьСтрокаИзIdЧисло(Заметка.ИдКонца));	
				
			СтрокаЦвета = "yellow";
			Если Заметка.ЗамечаниеИнициатора Или Заметка.ЭтоЗамечаниеWord Тогда
				СтрокаЦвета = ПолучитьСтрокуЦветаПравкиИнициатора();
			КонецЕсли;	
			Если Заметка.ЭтоОтличиеОтШаблона Тогда
				СтрокаЦвета = "lightgreen";
			КонецЕсли;	
			
			ПозНачала = СтрНайти(ТекстHTMLНРег, ЧтоНайти);
			Если ПозНачала = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ПозКонца = СтрНайти(ТекстHTMLНРег, ЧтоНайтиКонец,,ПозНачала);
			Если ПозКонца = 0 Тогда
				Продолжить;
			КонецЕсли;	
				
			ПозЗамены = ПозКонца + СтрДлина(ЧтоНайтиКонец);
			
			ЧтоНайтиКонецЗавершение = "</span>";
			ПозКонца = СтрНайти(ТекстHTMLНРег, ЧтоНайтиКонецЗавершение,,ПозЗамены + 1);
				
			Если ПозКонца = 0 Тогда
				Продолжить;
			КонецЕсли;	
					
			ПозЗамены = ПозКонца + СтрДлина(ЧтоНайтиКонецЗавершение);
			
			ВесьТекст = Сред(ТекстHTML, ПозНачала, ПозЗамены - ПозНачала);
			
			ВесьТекст = ПодсветитьЦветомФонаОднуПравку(ВесьТекст, СтрокаЦвета, ЧтоНайти, ЧтоНайтиКонец);
			
			ТекстHTML =
				Лев(ТекстHTML, ПозНачала - 1)
				+ ВесьТекст
				+ Сред(ТекстHTML, ПозЗамены);
				
			ТекстHTMLНРег = НРег(ТекстHTML);	
				
		КонецЕсли;
		
	КонецЦикла;	
	
	ВставитьЦветВМестахИзмененийТаблицWord(ТекстHTML, НомерВерсии);
	
	Возврат ТекстHTML;
	
КонецФункции	

Процедура ВставитьЦветВМестахИзмененийТаблицWord(ТекстПисьма, НомерВерсии = -1)
	
	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	Цвет = ПолучитьСтрокуЦветаПравкиИнициатора();
	Если НомерВерсии = 2 Тогда // первый цикл
		Цвет = "lightgreen";
	КонецЕсли;	
	ТекстНовый = "<tr bgcolor=" + Цвет + " ";

	// сперва ищем mso-table-inserted  - добавленные строки
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаПоиска = "mso-table-inserted";
		Позиция_table_inserted = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска,,НачальнаяПозиция);
		Если Позиция_table_inserted = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияНачалаТегаSpan = СтрНайти(ТекстПисьмаДляПравкиНРег, "<",
			НаправлениеПоиска.СКонца, Позиция_table_inserted);
		Если ПозицияНачалаТегаSpan = 0 Или ПозицияНачалаТегаSpan < Позиция_table_inserted - 1400 Тогда
			НачальнаяПозиция = Позиция_table_inserted + 1 + СтрДлина(ТекстНовый);
			Продолжить;
		КонецЕсли;
		
		Позиция_tr = СтрНайти(ТекстПисьмаДляПравкиНРег, "<tr",,ПозицияНачалаТегаSpan);
		Если Позиция_tr = ПозицияНачалаТегаSpan Тогда
			
			ПозицияПосле_tr = Позиция_tr + СтрДлина("<tr");
			
			ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, Позиция_tr - 1)
			    + ТекстНовый
				+ Сред(ТекстПисьмаДляПравки, ПозицияПосле_tr);
			
			ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
		
		КонецЕсли;
		
		НачальнаяПозиция = Позиция_table_inserted + 1 + СтрДлина(ТекстНовый);
		Продолжить;
			
	КонецЦикла;
	
	
	// теперь ищем mso-inserted-cell - добавленные ячейки
	НачальнаяПозиция = 1;
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ТекстНовый = "<td bgcolor=" + Цвет + " ";	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаПоиска = "mso-inserted-cell";
		Позиция_table_inserted = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска,,НачальнаяПозиция);
		Если Позиция_table_inserted = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияНачалаТегаSpan = СтрНайти(ТекстПисьмаДляПравкиНРег, "<",
			НаправлениеПоиска.СКонца, Позиция_table_inserted);
		Если ПозицияНачалаТегаSpan = 0 Или ПозицияНачалаТегаSpan < Позиция_table_inserted - 1400 Тогда
			НачальнаяПозиция = Позиция_table_inserted + 1 + СтрДлина(ТекстНовый);
			Продолжить;
		КонецЕсли;
		
		Позиция_tr = СтрНайти(ТекстПисьмаДляПравкиНРег, "<td",,ПозицияНачалаТегаSpan);
		Если Позиция_tr = ПозицияНачалаТегаSpan Тогда
			
			ПозицияПосле_tr = Позиция_tr + СтрДлина("<td");
			
			ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, Позиция_tr - 1)
			    + ТекстНовый
				+ Сред(ТекстПисьмаДляПравки, ПозицияПосле_tr);
			
			ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
		
		КонецЕсли;
		
		НачальнаяПозиция = Позиция_table_inserted + 1 + СтрДлина(ТекстНовый);
		Продолжить;
			
	КонецЦикла;
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры

Процедура УдалитьПравкиТаблицWord(ТекстПисьма)
	
	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаПоиска = "mso-table-inserted";
		Позиция_table_inserted = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска,,НачальнаяПозиция);
		Если Позиция_table_inserted = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаStyle = "style=";
		ПозицияНачалаStyle = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаStyle,
			НаправлениеПоиска.СКонца, Позиция_table_inserted);
		Если ПозицияНачалаStyle = 0 Или ПозицияНачалаStyle < Позиция_table_inserted - 400 Тогда
			НачальнаяПозиция = Позиция_table_inserted + 1;
			Продолжить;
		КонецЕсли;
		
		СимволПослеStyle = Сред(ТекстПисьмаДляПравкиНРег, 
			ПозицияНачалаStyle + СтрДлина(СтрокаStyle), 1);
			
		ПозицияКонца_table_inserted = 0;
		
		Позиция1 = СтрНайти(ТекстПисьмаДляПравкиНРег, ";", , Позиция_table_inserted);
		Позиция2 = СтрНайти(ТекстПисьмаДляПравкиНРег, СимволПослеStyle, , Позиция_table_inserted);
		Если Позиция1 > Позиция_table_inserted + 400 Тогда
			Позиция1 = 0;
		КонецЕсли;	
		Если Позиция2 > Позиция_table_inserted + 400 Тогда
			Позиция2 = 0;
		КонецЕсли;	
		
		Если Позиция1 = 0 И Позиция2 = 0
			Или Позиция1 = Позиция2 Тогда
			НачальнаяПозиция = Позиция_table_inserted + 1;
			Продолжить;
		КонецЕсли;	
		
		Если Позиция1 <> 0 И ((Позиция1 < Позиция2) Или (Позиция2 = 0)) Тогда
			ПозицияКонца_table_inserted = Позиция1;
			Продолжить;
		КонецЕсли;	
		
		Если Позиция2 <> 0 И ((Позиция2 < Позиция1) Или (Позиция1 = 0)) Тогда
			ПозицияКонца_table_inserted = Позиция2;
		КонецЕсли;	
		
		Если ПозицияКонца_table_inserted = 0 Тогда
			НачальнаяПозиция = Позиция_table_inserted + 1;
			Продолжить;
		КонецЕсли;	
		
		ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, Позиция_table_inserted - 1)
			+ Сред(ТекстПисьмаДляПравки, ПозицияКонца_table_inserted);
		
		ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
		
		НачальнаяПозиция = Позиция_table_inserted + 1;
		Продолжить;
			
	КонецЦикла;
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры	

Процедура УдалитьПравкиЯчеекWord(ТекстПисьма)
		
	ТекстПисьмаДляПравки = ТекстПисьма;
	
	НачальнаяПозиция = 1;
	
	// найдем позицию body
	ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);
	ПозицияНачалаBody = СтрНайти(ТекстПисьмаДляПравкиНРег, "<body");
	Если ПозицияНачалаBody <> 0 Тогда
		НачальнаяПозиция = ПозицияНачалаBody;
	КонецЕсли;	
	
	ЧислоИтераций = 0;
	Пока Истина Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		Если ЧислоИтераций > 1000 Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаПоиска = "mso-inserted-cell";
		Позиция_table_inserted = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаПоиска,,НачальнаяПозиция);
		Если Позиция_table_inserted = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаStyle = "style=";
		ПозицияНачалаStyle = СтрНайти(ТекстПисьмаДляПравкиНРег, СтрокаStyle,
			НаправлениеПоиска.СКонца, Позиция_table_inserted);
		Если ПозицияНачалаStyle = 0 Или ПозицияНачалаStyle < Позиция_table_inserted - 400 Тогда
			НачальнаяПозиция = Позиция_table_inserted + 1;
			Продолжить;
		КонецЕсли;
		
		СимволПослеStyle = Сред(ТекстПисьмаДляПравкиНРег, 
			ПозицияНачалаStyle + СтрДлина(СтрокаStyle), 1);
			
		ПозицияКонца_table_inserted = 0;
		
		Позиция1 = СтрНайти(ТекстПисьмаДляПравкиНРег, ";", , Позиция_table_inserted);
		Позиция2 = СтрНайти(ТекстПисьмаДляПравкиНРег, СимволПослеStyle, , Позиция_table_inserted);
		Если Позиция1 > Позиция_table_inserted + 400 Тогда
			Позиция1 = 0;
		КонецЕсли;	
		Если Позиция2 > Позиция_table_inserted + 400 Тогда
			Позиция2 = 0;
		КонецЕсли;	
		
		Если Позиция1 = 0 И Позиция2 = 0
			Или Позиция1 = Позиция2 Тогда
			НачальнаяПозиция = Позиция_table_inserted + 1;
			Продолжить;
		КонецЕсли;	
		
		Если Позиция1 <> 0 И ((Позиция1 < Позиция2) Или (Позиция2 = 0)) Тогда
			ПозицияКонца_table_inserted = Позиция1;
			Продолжить;
		КонецЕсли;	
		
		Если Позиция2 <> 0 И ((Позиция2 < Позиция1) Или (Позиция1 = 0)) Тогда
			ПозицияКонца_table_inserted = Позиция2;
		КонецЕсли;	
		
		Если ПозицияКонца_table_inserted = 0 Тогда
			НачальнаяПозиция = Позиция_table_inserted + 1;
			Продолжить;
		КонецЕсли;	
		
		ТекстПисьмаДляПравки = Лев(ТекстПисьмаДляПравки, Позиция_table_inserted - 1)
			+ Сред(ТекстПисьмаДляПравки, ПозицияКонца_table_inserted);
		
		ТекстПисьмаДляПравкиНРег = НРег(ТекстПисьмаДляПравки);	
		
		НачальнаяПозиция = Позиция_table_inserted + 1;
		Продолжить;
			
	КонецЦикла;
	
	ТекстПисьма = ТекстПисьмаДляПравки;
	
КонецПроцедуры	

#КонецОбласти