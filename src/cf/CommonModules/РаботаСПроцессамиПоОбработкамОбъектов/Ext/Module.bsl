////////////////////////////////////////////////////////////////////////////////
// Работа с процессами по обработкам объектов:
// содержит процедуры и функции для работы с процессами по обработкам объектов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает необходимость выполнения обработки объектов процессами.
//
// Возвращаемое значение:
//  Булево
//
Функция ВыполнятьОбработкуОбъектовПроцессами() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Создает и возвращает объект процесса по обработке.
//
// Параметры:
//  Обработка - СправочникОбъект.ОбработкиОбъектов - обработка объекта.
//  ВедущаяЗадача - ЗадачаССылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//  БизнесПроцессОбъект.КомплексныйПроцесс
//
Функция СоздатьПроцессПоОбработке(Обработка, ВедущаяЗадача = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцессОбъект = БизнесПроцессы.КомплексныйПроцесс.СоздатьБизнесПроцесс();
	СтруктураДляЗаполнения = ПроцессОбъект.СтруктураДанныхДляЗаполнения();
	
	СтруктураДляЗаполнения.Автор = Обработка.Начал;
	
	СтруктураДляЗаполнения.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
	СтруктураДляЗаполнения.Предметы = Обработка.Владелец;
	
	Если ЗначениеЗаполнено(СтруктураДляЗаполнения.Предметы) Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(СтруктураДляЗаполнения.Предметы) Тогда
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СтруктураДляЗаполнения.Предметы, "Важность, ВидДокумента.ИспользоватьВажность");
			Если РеквизитыДокумента.ВидДокументаИспользоватьВажность = Истина Тогда
				СтруктураДляЗаполнения.Важность = РеквизитыДокумента.Важность;
			КонецЕсли;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(СтруктураДляЗаполнения.Предметы) Тогда
			СтруктураДляЗаполнения.Важность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтруктураДляЗаполнения.Предметы, "Важность");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСхемыДляОбработки =
		РаботаСПроцессамиПоОбработкамОбъектов.ПараметрыСхемыДляОбработкиОбъекта(Обработка.Ссылка);
	
	Если Не ЗначениеЗаполнено(ПараметрыСхемыДляОбработки.ПараметрыСхемы) Тогда
		ВызватьИсключение 
			НСтр("ru = 'Не удалось создать процесс по обработке объекта.
				|Отсутствуют параметры схемы обработки.'");
	КонецЕсли;
	
	СтруктураДляЗаполнения.Схема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПараметрыСхемыДляОбработки.ПараметрыСхемы, "Схема");
		
	Если Не ЗначениеЗаполнено(СтруктураДляЗаполнения.Схема) Тогда
		ВызватьИсключение
			НСтр("ru = 'Не удалось создать процесс по обработке объекта.
			|Отсутствуют параметры схемы обработки.'");
	КонецЕсли;
	
	ПроцессОбъект.Заполнить(СтруктураДляЗаполнения);
	
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		
		ПроцессОбъект.ВедущаяЗадача = ВедущаяЗадача;
		
	КонецЕсли;	
	
	ПроцессОбъект.ДополнительныеСвойства.Вставить("ОбработкаДокумента", Обработка.Ссылка);
	ПроцессОбъект.Записать();
	
	РегистрыСведений.ПроцессыОбработокОбъектов.Добавить(ПроцессОбъект.Ссылка, Обработка.Ссылка);
	
	Возврат ПроцессОбъект;
	
КонецФункции

// Активный КП по предмету.
// 
// Параметры:
//  Предмет - СправочникСсылка.Мероприятия, СправочникСсылка.ДокументыПредприятия - Предмет
//  ТекущийКПСсылка - БизнесПроцессСсылка.КомплексныйПроцесс - может быть пустым
// 
// Возвращаемое значение:
// БизнесПроцессССылка.КомплексныйПроцесс 
Функция АктивныйКППоПредмету(Предмет, Знач ТекущийКПСсылка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КПСсылка = БизнесПроцессыИЗадачиСервер.КорневойВедущийПроцесс(ТекущийКПСсылка);
	Если ЗначениеЗаполнено(КПСсылка) Тогда
		ТекущийКПСсылка = КПСсылка;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КомплексныйПроцессПредметы.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.Предметы КАК КомплексныйПроцессПредметы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыОбработокОбъектов КАК ПроцессыОбработокОбъектов
		|		ПО КомплексныйПроцессПредметы.Ссылка = ПроцессыОбработокОбъектов.Процесс
		|ГДЕ
		|	КомплексныйПроцессПредметы.Предмет = &Предмет
		|	И КомплексныйПроцессПредметы.Ссылка.Завершен = ЛОЖЬ
		|	И КомплексныйПроцессПредметы.Ссылка.Стартован = ИСТИНА
		|	И (КомплексныйПроцессПредметы.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|		ИЛИ КомплексныйПроцессПредметы.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен))
		|	И ПроцессыОбработокОбъектов.Процесс ЕСТЬ NULL
		|	И КомплексныйПроцессПредметы.Ссылка.ВедущаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|	И КомплексныйПроцессПредметы.Ссылка.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)";
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Если ЗначениеЗаполнено(ТекущийКПСсылка) Тогда
		Запрос.Текст = Запрос.Текст + " И КомплексныйПроцессПредметы.Ссылка <> &ТекущийКП";
		Запрос.УстановитьПараметр("ТекущийКП", ТекущийКПСсылка);
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;		
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;	

КонецФункции

// Массив предметов для вложенной обработки.
// 
// Параметры:
//  КПСсылка  - БизнесПроцессСсылка.КомплексныйПроцесс
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ПредметДействия
Функция МассивПредметовДляВложеннойОбработки(КПСсылка) Экспорт
	
	СхемаКП = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(КПСсылка);
	Если Не ЗначениеЗаполнено(СхемаКП) Тогда
		Возврат Новый Массив;
	КонецЕсли;	
		
	ДанныеПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
		СхемаКП);
		
	Предметы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КПСсылка, "Предметы");
	Предметы = Предметы.Выгрузить();	
	
	МассивПредметов = Новый Массив;
	
	Для Каждого СтрПредмет Из Предметы Цикл
		
		Если Не Метаданные.ОпределяемыеТипы.ПредметДействия.Тип.СодержитТип(ТипЗнч(СтрПредмет.Предмет)) Тогда
			Продолжить;
		КонецЕсли;	
	
		Для Каждого КлючИЗначение Из ДанныеПараметров.НастройкиЭлементов Цикл
			НастройкаЭлемента = КлючИЗначение.Значение;  
			Если ЗначениеЗаполнено(НастройкаЭлемента) 
				И НастройкаЭлемента = СтрПредмет.ИмяПредмета 
				И ЗначениеЗаполнено(СтрПредмет.Предмет) Тогда
					МассивПредметов.Добавить(СтрПредмет.Предмет);
			КонецЕсли;	
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат МассивПредметов;
	
КонецФункции	

// Проверка запрета на запуск нескольких КП. При ошибке поставит Отказ в Истина и сделает СообщитьПользователю
// 
// Параметры:
//  КПСсылка  - БизнесПроцессССылка.КомплексныйПроцесс - может быть пустым
//  ПредметыДляВложеннойОбработки  - Массив из ОпределяемыйТип.ПредметДействия 
//  Отказ - Булево
//  БросатьИсключение - Булево
Процедура ПроверкаЗапретаНаЗапускНесколькихКП(КПСсылка, ПредметыДляВложеннойОбработки, Отказ,
	БросатьИсключение = Ложь) Экспорт
	
	Если ПредметыДляВложеннойОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого Предмет Из ПредметыДляВложеннойОбработки Цикл
		
		Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
		Если ЗначениеЗаполнено(Обработка) Тогда
			
			СостояниеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "Состояние");
			
			Если СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
				
				ЭтоОбработкаПодТекущимКП = Ложь;
				
				КПОбработки = РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(Обработка);
				
				Если ЗначениеЗаполнено(КПОбработки) Тогда
					
					ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КПОбработки, "ВедущаяЗадача");
					Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
						БизнесПроцессВедущейЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
						
						Если ЗначениеЗаполнено(БизнесПроцессВедущейЗадачи) И БизнесПроцессВедущейЗадачи = КПСсылка Тогда
							ЭтоОбработкаПодТекущимКП = Истина;
						КонецЕсли;
						
					КонецЕсли;		
					
				КонецЕсли;	
				
				Если Не ЭтоОбработкаПодТекущимКП Тогда
					
					ТекстОшибки = СтрШаблон(НСтр("ru = 'По предмету ""%1"" уже есть активная обработка.'"), Предмет);
					
					Если БросатьИсключение Тогда
						
						ВызватьИсключение ТекстОшибки;
					
					Иначе
						ОбщегоНазначения.СообщитьПользователю(
							ТекстОшибки,
							,,, Отказ);
					КонецЕсли;	
						
				КонецЕсли;	
				
			КонецЕсли;		
					
		КонецЕсли;			
		
		КППоПредмету = РаботаСПроцессамиПоОбработкамОбъектов.АктивныйКППоПредмету(Предмет, КПСсылка);
		Если ЗначениеЗаполнено(КППоПредмету) Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'По предмету ""%1"" уже есть активный комплексный процесс с вложенной обработкой.'"), 
					Предмет);
			
			Если БросатьИсключение Тогда
				
				ВызватьИсключение ТекстОшибки;
			
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки,
					,,, Отказ);
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

// Проверка запрета на запуск по предмету из другой системы.
// 
// Параметры:
// ПроцессОбъект - БизнесПроцессОбъект
Процедура ПроверкаЗапретаНаЗапускПоПредметуИзДругойСистемы(ПроцессОбъект, Отказ) Экспорт
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ПроцессОбъект.ИсточникДанных) Тогда
		Отказ = Истина;
		Сообщить(НСтр("ru = 'Запрещено изменять процесс, загруженный из другой системы. 
		|Обратитесь к администратору.'"));
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПроцессОбъект.Ссылка) Тогда
		Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(ПроцессОбъект.Ссылка);
		
		Если ЗначениеЗаполнено(Действие) Тогда
			Возврат; // тут не запрещаем
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроцессОбъект.Проект) 
		И МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемыСПроверкой(ПроцессОбъект.Проект) Тогда
			Отказ = Истина;
			Сообщить(НСтр("ru = 'Запрещено запускать процесс по объекту, загруженному из другой системы.
		|Обратитесь к администратору.'"));
	КонецЕсли;	

	Если ЗначениеЗаполнено(ПроцессОбъект.ПроектнаяЗадача) 
		И МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемыСПроверкой(ПроцессОбъект.ПроектнаяЗадача) Тогда
			Отказ = Истина;
		Сообщить(НСтр("ru = 'Запрещено запускать процесс по объекту, загруженному из другой системы.
		|Обратитесь к администратору.'"));
	КонецЕсли;
		
	Для Каждого Стр Из ПроцессОбъект.Предметы Цикл
		
		Если ЗначениеЗаполнено(Стр.Предмет)
			И МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемыСПроверкой(Стр.Предмет) Тогда
				Отказ = Истина;
			Сообщить(НСтр("ru = 'Запрещено запускать процесс по объекту, загруженному из другой системы.'"));
		КонецЕсли;

		Если ЗначениеЗаполнено(Стр.Предмет) И ТипЗнч(Стр.Предмет) = Тип("СправочникСсылка.Файлы") Тогда
			
			ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.Предмет, "ВладелецФайла");
			
			Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемыСПроверкой(ВладелецФайла) Тогда
				Отказ = Истина;
				Сообщить(НСтр("ru = 'Запрещено запускать процесс по объекту, загруженному из другой системы.'"));
			КонецЕсли;	
		КонецЕсли;
			
	КонецЦикла;	
		
КонецПроцедуры	

// Возвращает виды действий обработки объекта или настройки обработки объекта.
// С учетом заданного порядка.
// 
// Параметры:
// 	ОбработкаОбъекта - СправочникОбъект.НастройкиОбработкиВидовОбъектов,
// 	                   СправочникСсылка.ОбработкиОбъектов
// 
// Возвращаемое значение:
// 	Массив
// 	 * см. СправочникСсылка.ВидыДействий
//
Функция ВидыДействийОбработкиОбъекта(ОбработкаОбъекта) Экспорт
	
	ВидыДействий = Новый Массив();
	ТипОбработки = ТипЗнч(ОбработкаОбъекта);
	Если ТипОбработки = Тип("СправочникСсылка.НастройкиОбработкиВидовОбъектов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиОбработкиВидовОбъектовВидыДействий.ВидДействия
			|ИЗ
			|	Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК НастройкиОбработкиВидовОбъектовВидыДействий
			|ГДЕ
			|	НастройкиОбработкиВидовОбъектовВидыДействий.Ссылка = &Настройка
			|УПОРЯДОЧИТЬ ПО
			|	НастройкиОбработкиВидовОбъектовВидыДействий.НомерСтроки";
		Запрос.УстановитьПараметр("Настройка", ОбработкаОбъекта);
		
		ВидыДействий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДействия");
		
	ИначеЕсли ТипОбработки = Тип("СправочникСсылка.ОбработкиОбъектов") Тогда
		
		РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ОбработкаОбъекта, "Владелец, ДатаСоздания");
		
		РезультатЗапроса  = ДействияСервер.ТекущиеДействияПредмета(
			РеквизитыОбработки.Владелец,,
			РеквизитыОбработки.ДатаСоздания);
		
		ВидыДействий = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ВидДействия");
	
	КонецЕсли;
	
	Возврат ВидыДействий;
	
КонецФункции

// Возвращает данные видов действий обработки объекта.
// 
// Параметры:
//  Объект - СправочникСсылка.ДокументыПредприятия
//  ОбработкаОбъекта - СправочникСсылка.ОбработкиОбъектов, Неопределено - 
//  
// Возвращаемое значение:
//  ТаблицаЗначений
//   * ВидДействия - СправочникСсылка.ВидыДействий - вид действия обработки объекта.
//   * Действие - ОпределяемыйТип.Действия - ссылка на действие в обработке заданного вида.
//
Функция ДанныхВидовДействийОбработкиОбъекта(Объект, ОбработкаОбъекта = Неопределено) Экспорт

	
	ДанныхВидовДействий = Новый ТаблицаЗначений();
	
	ДанныхВидовДействий.Колонки.Добавить(
		"ВидДействия",
		Новый ОписаниеТипов("СправочникСсылка.ВидыДействий"));
	
	ДанныхВидовДействий.Колонки.Добавить("Действие", Метаданные.ОпределяемыеТипы.Действия.Тип);
	Если Не ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Объект);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		Возврат ДанныхВидовДействий;
	КонецЕсли;
		
	РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ОбработкаОбъекта, "Владелец, ДатаСоздания");
		
	РезультатЗапроса  = ДействияСервер.ТекущиеДействияПредмета(
		РеквизитыОбработки.Владелец,,
		РеквизитыОбработки.ДатаСоздания);
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ДанныхВидовДействий.Добавить();
		СтрокаТаблицы.ВидДействия = Выборка.ВидДействия;
		СтрокаТаблицы.Действие = Выборка.Действие;
	КонецЦикла;
	
	Возврат ДанныхВидовДействий;
	
КонецФункции

// Возвращает процесс обработки по действию.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//
// Возвращаемое значение:
//  БизнесПроцессСсылка.КомплексныйПроцесс
//
Функция ПроцессОбработкиПоДействию(Действие) Экспорт
	
	Обработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
	Возврат РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(Обработка);
	
КонецФункции

// Возвращает все процессы обработки по действию.
// 
// Параметры:
//  Действие Действие ОпределяемыйТип.Действия
// 
// Возвращаемое значение:
//  Массив
//  * см. БизнесПроцессСсылка.КомплексныйПроцесс
//  
Функция ВсеПроцессыОбработкиПоДействию(Действие) Экспорт
	
	Обработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
	Возврат РегистрыСведений.ПроцессыОбработокОбъектов.ВсеПроцессыОбработкиОбъекта(Обработка);
	
КонецФункции

// Создает и возвращает задачу подготовки действия схемы обработки к запуску.
//
// Параметры:
//  НаименованиеЗадания - Строка - наименование задачи.
//  ПроцессОбработки - БизнесПроцессСсылка.КомплексныйПроцесс
//
// Возвращаемое значение:
//  ЗадачаСсылка.ЗадачаИсполнителя
//
Функция СоздатьЗадачуПодготовкиДействияКЗапуску(НаименованиеЗадания, ПроцессОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
		НаименованиеЗадания, ПроцессОбработки);
	
КонецФункции

// Выполняет задачу подготовки действия к запуску.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действие
//
Процедура ВыполнитьЗадачуПодготовкиДействияКЗапуску(Действие, ПродолжитьВыполнение = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗадачиОбработкиЭлемента = БизнесПроцессы.КомплексныйПроцесс.ЗадачиОбработкиЭлементаСхемы(
		ПроцессОбработкиПоДействию(Действие),
		ИмяЭлементаСхемыОбработкиПоДействию(Действие));
		
	Для Каждого СтрокаТаблицы Из ЗадачиОбработкиЭлемента Цикл
		Если Не СтрокаТаблицы.ЕстьДочерниеПроцессы Тогда
			ЗадачаОбработкиЭлемента = СтрокаТаблицы.ЗадачаПроцесса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	ЗадачаОбъект = ЗадачаОбработкиЭлемента.ПолучитьОбъект();
	
	Если Не ПродолжитьВыполнение Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.
			ОтключитьМаршрутизациюПроцессаПриВыполненииЗадачи(ЗадачаОбъект);
	КонецЕсли; 
	
	ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрамиНемедленно(ЗадачаОбъект,,,Истина);
	
КонецПроцедуры

// Возвращает текущие и пройденные элементы схемы обработки объекта.
// 
// Параметры:
//  ОбработкаОбъекта - СправочникСсылка.ОбработкиОбъектов
// 
// Возвращаемое значение:
//  Структура - Текущие и пройденные элементы схемы обработки объекта:
//   * ТекущиеЭлементы - Соответствие
//      ** Ключ - Строка - имя элемента в схеме.
//      ** Значение - Булево - всегда Истина.
//   * ПройденныеЭлементы - Соответствие
//      ** Ключ - Строка - имя элемента в схеме.
//      ** Значение - Булево - всегда Истина.
//
Функция ТекущиеИПройденныеЭлементыСхемыОбработкиОбъекта(ОбработкаОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекущиеЭлементы", Новый Соответствие);
	Результат.Вставить("ПройденныеЭлементы", Новый Соответствие);
	
	ПроцессОбработки = РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(
		ОбработкаОбъекта);
	
	Если Не ЗначениеЗаполнено(ПроцессОбработки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроцессОбработки, "ТекущиеЭлементыСхемы, ОтметкиПрохожденияСхемы");
	
	Для Каждого СтрокаТаблицы Из РеквизитыПроцесса.ТекущиеЭлементыСхемы.Выгрузить() Цикл
		Результат.ТекущиеЭлементы[СтрокаТаблицы.ИмяЭлемента] = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из РеквизитыПроцесса.ОтметкиПрохожденияСхемы.Выгрузить() Цикл
		Если СтрокаТаблицы.Пройден Тогда
			Результат.ПройденныеЭлементы[СтрокаТаблицы.ИмяЭлемента] = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает действия обработки без состояний.
// 
// Параметры:
//  Обработка - СправочникСсылка.ОбработкиОбъектов
// 
// Возвращаемое значение:
//  Массив
//   * ОпределяемыйТип.Действия
//
Функция ДействияОбработкиБезСостояний(Обработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияОбработкиОбъектов.Действие КАК Действие
		|ИЗ
		|	РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ПО ДействияОбработкиОбъектов.Действие = СостоянияДействий.Действие
		|		И СостоянияДействий.Функция = НЕОПРЕДЕЛЕНО
		|		И СостоянияДействий.Участник = НЕОПРЕДЕЛЕНО
		|ГДЕ
		|	ДействияОбработкиОбъектов.Обработка = &Обработка
		|	И ДействияОбработкиОбъектов.Действие.ПомещеноВИсторию = ЛОЖЬ
		|	И ДействияОбработкиОбъектов.Действие.ПометкаУдаления = ЛОЖЬ
		|	И СостоянияДействий.Состояние ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Обработка", Обработка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Действие");
	
КонецФункции

Процедура ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(Действие) Экспорт
	
	ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
	
	РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
		Перечисления.СостоянияВыполненияДействий.Завершено);				
		
	ОбработкиОбъектов.ОбновитьОтметкиЗавершенностиОбработки(ОбработкаДействия);
	
	ИмяЭлемента =
		РаботаСПроцессамиПоОбработкамОбъектов.ИмяЭлементаСхемыОбработкиПоДействию(Действие);
	
	ПроцессОбработки = РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(ОбработкаДействия);
	
	ЗадачиОбработкиЭлемента = БизнесПроцессы.КомплексныйПроцесс.ЗадачиОбработкиЭлементаСхемы(
		ПроцессОбработки, ИмяЭлемента);
	Если ЗадачиОбработкиЭлемента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗадачаСтрока Из ЗадачиОбработкиЭлемента Цикл
		
		ЗадачаПроцесса = ЗадачаСтрока.ЗадачаПроцесса;
		Выполнена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "Выполнена");
		
		Если Выполнена = Ложь Тогда
			ЗадачаОбъект = ЗадачаПроцесса.ПолучитьОбъект();
			ЗадачаОбъект.ВыполнитьЗадачу();
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры     

Процедура ВыполнитьСлужебнуюЗадачуОзнакомленияСОжиданием(Действие) Экспорт
	
	ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
	
	ИмяЭлемента =
		РаботаСПроцессамиПоОбработкамОбъектов.ИмяЭлементаСхемыОбработкиПоДействию(Действие);
	
	ПроцессОбработки = РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(ОбработкаДействия);
	
	ЗадачиОбработкиЭлемента = БизнесПроцессы.КомплексныйПроцесс.ЗадачиОбработкиЭлементаСхемы(
		ПроцессОбработки, ИмяЭлемента);
	Если ЗадачиОбработкиЭлемента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗадачаСтрока Из ЗадачиОбработкиЭлемента Цикл
		
		ЗадачаПроцесса = ЗадачаСтрока.ЗадачаПроцесса;
		Выполнена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "Выполнена");
		
		Если Выполнена = Ложь Тогда
			ЗадачаОбъект = ЗадачаПроцесса.ПолучитьОбъект();
			ЗадачаОбъект.Выполнена = Истина;
			РаботаСБизнесПроцессами.ЗаписатьЗадачу(ЗадачаОбъект, "ПростаяЗапись");
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры     

#Область СхемыДляОбработокОбъектов

// Обновляет схему для обработки объекта по владельцу обработки.
//
// Параметры:
//  Владелец - СправочникСсылка.НастройкиОбработкиВидовОбъектов,
//             СправочникСсылка.ОбработкиОбъектов
//
Процедура ОбновитьСхемуДляОбработкиОбъектаПоВладельцу(Владелец) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыСхемыПоВладельцу(Владелец);
		
	ВидыДействий = ВидыДействийОбработкиОбъекта(Владелец);
	
	Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		// Создаем автоформируемую схему, если ее еще нет.
			
		ИменаЭлементов = ИменаЭлементовСхемыДляВидовДействий(ВидыДействий);
		ОписаниеСхемы = ОписаниеСхемыИзВидовДействий(ВидыДействий, ИменаЭлементов);
		
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПоОписаниюЭлементов(ОписаниеСхемы);
		ДанныеСхемы.Наименование = Строка(Владелец);
				
		ДанныеПараметровСхемы =
			Справочники.ПараметрыСхемДляОбработокОбъектов.СтруктураДанныхПараметровСхемы();
		ДанныеПараметровСхемы.ВладелецСхемы = Владелец;
		ДанныеПараметровСхемы.АвтоформируемаяСхема = Истина;
		ДанныеПараметровСхемы.НастройкиЭлементов = 
			ПараметрыЭлементовСхемыИзВидовДействий(ВидыДействий, ИменаЭлементов);
		
	ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСхемы, "АвтоформируемаяСхема") Тогда
					
		// Обновляем автоформируемую схему, если она уже есть.
			
		ИменаЭлементов = ИменаЭлементовСхемыДляВидовДействий(ВидыДействий);
		ОписаниеСхемы = ОписаниеСхемыИзВидовДействий(ВидыДействий, ИменаЭлементов);
		
		ДанныеПараметровСхемы =
			Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(ПараметрыСхемы);
		ДанныеПараметровСхемы.НастройкиЭлементов = 
			ПараметрыЭлементовСхемыИзВидовДействий(ВидыДействий, ИменаЭлементов);
		
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(ДанныеПараметровСхемы.Схема);
		ДанныеСхемы.Наименование = Строка(Владелец);
		НовыеДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПоОписаниюЭлементов(ОписаниеСхемы);
		ДанныеСхемы.Схема = НовыеДанныеСхемы.Схема;
		ДанныеСхемы.Настройки = НовыеДанныеСхемы.Настройки;
				
	Иначе
		
		ДанныеПараметровСхемы =
			Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(ПараметрыСхемы);
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(ДанныеПараметровСхемы.Схема);
		
		ДанныеСхемы.Наименование = Строка(Владелец);
		
		// Нормируем настройки элементов схемы, настраиваемой вручную.
		НормализоватьНастройкиЭлементовСхемыПоВидамДействий(
			ДанныеПараметровСхемы.НастройкиЭлементов, ВидыДействий, ДанныеСхемы);
		
	КонецЕсли;
	
	ПометкаУдаленияВладельца = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "ПометкаУдаления");
	ДанныеСхемы.ПометкаУдаления = ПометкаУдаленияВладельца;
	ДанныеПараметровСхемы.ПометкаУдаления = ПометкаУдаленияВладельца;
		
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.СхемыПроцессов").УстановитьЗначение("Ссылка", ДанныеПараметровСхемы.Схема);
		Блокировка.Добавить("Справочник.ПараметрыСхемДляОбработокОбъектов").УстановитьЗначение("Ссылка", ПараметрыСхемы);
		Блокировка.Заблокировать();
		
		РезультатЗаписи = Справочники.СхемыПроцессов.ЗаписатьДанныеСхемыПроцесса(
			ДанныеПараметровСхемы.Схема, ДанныеСхемы);
		ДанныеПараметровСхемы.Схема = РезультатЗаписи.СхемаПроцесса;

		Справочники.ПараметрыСхемДляОбработокОбъектов.ЗаписатьДанныеПараметровСхемы(
			ПараметрыСхемы, ДанныеПараметровСхемы);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;		
	
КонецПроцедуры

// Удаляет схему для обработки объекта подчиненную владельцу.
// 
// Параметры:
//  Владелец - СправочникОбъект.НастройкиОбработкиВидовОбъектов,
//             СправочникСсылка.ОбработкиОбъектов
//
Процедура УдалитьСхемуДляОбработкиОбъектаПодчиненнуюВладельцу(Владелец) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыСхемыПоВладельцу(Владелец);
		
	Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПараметровСхемы = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(ПараметрыСхемы);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.СхемыПроцессов").УстановитьЗначение("Ссылка", ДанныеПараметровСхемы.Схема);
		Блокировка.Добавить("Справочник.ПараметрыСхемДляОбработокОбъектов").УстановитьЗначение("Ссылка", ПараметрыСхемы);
		Блокировка.Заблокировать();
		
		Справочники.ПараметрыСхемДляОбработокОбъектов.УдалитьПараметрыСхемы(ПараметрыСхемы);
		Справочники.СхемыПроцессов.УдалитьСхемуПроцесса(ДанныеПараметровСхемы.Схема);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Возвращает имена элементов схемы процесса для видов действий.
// 
// Параметры:
// 	ВидыДействий - Массив
// 	  * см. СправочникСсылка.ВидыДействий
// 	
// Возвращаемое значение:
//  Соответствие
//    * Ключ - СправочникСсылка.ВидыДействий - вид действия.
//    * Значение - Строка - имя элемента в схеме.
//
Функция ИменаЭлементовСхемыДляВидовДействий(ВидыДействий) Экспорт
	
	ИменаЭлементов = Новый Соответствие();
	
	Для Индекс = 0 По ВидыДействий.Количество() -1 Цикл
		ВидДействия = ВидыДействий[Индекс];
		ИменаЭлементов[ВидДействия] = СтрШаблон("Обработка%1", Индекс + 1);
	КонецЦикла;
	
	Возврат ИменаЭлементов; 
	
КонецФункции

// Возвращает описание схемы из видов действий и их именам.
// 
// Параметры:
// 	ВидыДействий - Массив - см. ВидыДействияОбъекта
// 	ИменаЭлементов - Соответствие - см. ИменаЭлементовСхемыДляВидовДействий
// 	
// Возвращаемое значение:
// 	Массив - массив с описанием элементов схемы.
// 	 * Структура - см. Справочники.СхемыПроцессов:
// 	                     - ОписаниеЭлементаСтарт,
// 	                     - ОписаниеЭлементаЗавершение,
// 	                     - ОписаниеЭлементаДействие.
//
Функция ОписаниеСхемыИзВидовДействий(ВидыДействий, ИменаЭлементов) Экспорт
	
	ОписаниеСхемы = Новый Массив;
	
	Если ВидыДействий.Количество() = 0 Тогда
		Возврат ОписаниеСхемы;
	КонецЕсли;
	
	ЭлементСтарт = Справочники.СхемыПроцессов.ОписаниеЭлементаСтарт();
	ЭлементСтарт.Лево = 60;
	ОписаниеСхемы.Добавить(ЭлементСтарт);
	
	ПоследнийЭлемент = ЭлементСтарт;
	СмещениеПоВертикали = 60;
	Для Каждого ВидДействия Из ВидыДействий Цикл
		
		ЭлементДействие = Справочники.СхемыПроцессов.ОписаниеЭлементаДействие();
		ЭлементДействие.Имя = ИменаЭлементов[ВидДействия];
		ЭлементДействие.Наименование = Строка(ВидДействия);
		ЭлементДействие.Верх = ПоследнийЭлемент.Верх + СмещениеПоВертикали;
		ОписаниеСхемы.Добавить(ЭлементДействие);
		
		ПоследнийЭлемент.ИмяПоследователя = ЭлементДействие.Имя;
			
		СмещениеПоВертикали = 80; 
		ПоследнийЭлемент = ЭлементДействие;
					
	КонецЦикла;
		
	ЭлементЗавершение = Справочники.СхемыПроцессов.ОписаниеЭлементаЗавершение();
	ЭлементЗавершение.Лево = 60;
	ЭлементЗавершение.Верх = ПоследнийЭлемент.Верх + СмещениеПоВертикали;
	ОписаниеСхемы.Добавить(ЭлементЗавершение);
	
	ПоследнийЭлемент.ИмяПоследователя = ЭлементЗавершение.Имя;
	
	Возврат ОписаниеСхемы;
	
КонецФункции

// Возвращает параметры элементов схемы из видов действий.
// 
// Параметры:
// 	ВидыДействий - Массив - см. ВидыДействияОбъекта
// 	ИменаЭлементов - Соответствие - см. ИменаЭлементовСхемыДляВидовДействий
// 	
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка - имя элемента схемы.
//   * Значение - СправочникСсылка.ВидыДействий - вид действия.
//
Функция ПараметрыЭлементовСхемыИзВидовДействий(ВидыДействий, ИменаЭлементов) Экспорт
	
	ПараметрыЭлементов = Новый Соответствие();
	Для Каждого ВидДействия Из ВидыДействий Цикл
		ПараметрыЭлементов[ИменаЭлементов[ВидДействия]] = ВидДействия;  
	КонецЦикла;	
	
	Возврат ПараметрыЭлементов;
	
КонецФункции

// Возвращает параметры схемы для обработки объекта.
// 
// Параметры:
// 	ОбработкаОбъекта - СправочникСсылка.ОбработкиОбъектов
// 	
// Возвращаемое значение:
//  Структура
//   * ПараметрыСхемы - СправочникСсылка.ПараметрыСхемДляОбработокОбъектов
//   * Владелец - СправочникСсылка.ОбработкиОбъектов, СправочникСсылка.НастройкиОбработкиВидовОбъектов 
//
Функция ПараметрыСхемыДляОбработкиОбъекта(ОбработкаОбъекта) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыСхемы", Справочники.ПараметрыСхемДляОбработокОбъектов.ПустаяСсылка());
	Результат.Вставить("Владелец", Неопределено);
	
	Результат.ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыСхемыПоВладельцу(ОбработкаОбъекта);
	Если ЗначениеЗаполнено(Результат.ПараметрыСхемы) Тогда
		Результат.Владелец = ОбработкаОбъекта;
		Возврат Результат;
	КонецЕсли;
	
	НастройкаОбработки = Справочники.НастройкиОбработкиВидовОбъектов.НастройкаОбработкиОбъекта(
		ОбработкаОбъекта);
	Если Не ЗначениеЗаполнено(НастройкаОбработки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыСхемыПоВладельцу(НастройкаОбработки);
	Если ЗначениеЗаполнено(Результат.ПараметрыСхемы) Тогда
		Результат.Владелец = НастройкаОбработки;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры схемы обработки, для объекта.
// 
// Параметры:
// 	Объект - СправочникСсылка.ДокументыПредприятия
// 	
// Возвращаемое значение:
//  Структура
//   * ПараметрыСхемы - СправочникСсылка.ПараметрыСхемДляОбработокОбъектов
//   * Владелец - СправочникСсылка.ОбработкиОбъектов, СправочникСсылка.НастройкиОбработкиВидовОбъектов 
//
Функция ПараметрыСхемыДляОбъекта(Объект) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыСхемы", Справочники.ПараметрыСхемДляОбработокОбъектов.ПустаяСсылка());
	Результат.Вставить("Владелец", Неопределено);
	
	ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Объект);
	Если Не ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат ПараметрыСхемыДляОбработкиОбъекта(ОбработкаОбъекта);
	
КонецФункции

// Возвращает тип объекта по владельцу схемы.
// 
// Параметры:
// 	ВладелецСхемы - СправочникСсылка.ОбработкиОбъектов,
// 	                СправочникСсылка.НастройкиОбработкиВидовОбъектов
// 	
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыОбъектов
//
Функция ТипОбъектаПоВладельцуСхемы(ВладелецСхемы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаОбъект = Неопределено;
		
	Если ТипЗнч(ВладелецСхемы) = Тип("СправочникСсылка.ОбработкиОбъектов") Тогда
		СсылкаНаОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецСхемы, "Владелец");
	ИначеЕсли ТипЗнч(ВладелецСхемы) = Тип("СправочникСсылка.НастройкиОбработкиВидовОбъектов") Тогда
		СсылкаНаОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецСхемы, "ВидОбъекта");
	КонецЕсли;
	
	ТипСсылки = ТипЗнч(СсылкаНаОбъект);
	
	ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ПустаяСсылка");
		
	Если ТипСсылки = Тип("СправочникСсылка.ДокументыПредприятия")
		Или ТипСсылки = Тип("СправочникСсылка.ВидыДокументов") Тогда
			
		ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия");
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Мероприятия")
		Или ТипСсылки = Тип("СправочникСсылка.ВидыМероприятий") Тогда
			
		ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Мероприятия");
		
	КонецЕсли;
	
	Возврат ТипОбъекта;
	
КонецФункции

// Возвращает имя элемента схемы обработки объекта по действию обработки.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяЭлементаСхемыОбработкиПоДействию(Действие) Экспорт
	
	ВидДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ВидДействия");
	
	Обработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
	ПараметрыСхемы = ПараметрыСхемыДляОбработкиОбъекта(Обработка);
	ДанныеПараметров = Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(
		ПараметрыСхемы.ПараметрыСхемы);
	
	Возврат ИмяЭлементаСхемыОбработкиПоВидуДействия(ВидДействия, ДанныеПараметров);
	
КонецФункции

// Возвращает ссылку на действие по имени элемента схемы обработки объекта.
//
// Параметры:
//  ИмяЭлемента - Строка - имя элемента схемы.
//  Обработка - СправочникСсылка.ОбработкиОбъектов
//  
// Возвращаемое значение:
//  ОпределяемыйТип.Действия
//
Функция ДействиеПоИмениЭлементаСхемыОбработки(ИмяЭлемента, Обработка) Экспорт
	
	ПараметрыСхемы = ПараметрыСхемыДляОбработкиОбъекта(Обработка);
		
	ДанныеПараметровСхемы = Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(
		ПараметрыСхемы.ПараметрыСхемы);
	ВидДействия = ДанныеПараметровСхемы.НастройкиЭлементов[ИмяЭлемента];
		
	РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Обработка, "Владелец, ДатаСоздания");
		
	ТекущиеДействия = ДействияСервер.ТекущиеДействияПредмета(
		РеквизитыОбработки.Владелец,
		ОбработкиОбъектов.ВидВладельцаОбработки(Обработка),
		РеквизитыОбработки.ДатаСоздания);
	ТекущиеДействия = ТекущиеДействия.Выбрать();
	
	Действие = Неопределено;
	Пока ТекущиеДействия.Следующий() Цикл
		Если ТекущиеДействия.ВидДействия = ВидДействия Тогда
			Действие = ТекущиеДействия.Действие;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Действие;
	
КонецФункции

Функция ДанныеПараметровПроверкиСхемы()
	
	ДанныеПараметров = Новый Структура(
		"Ссылка,
		|Схема,
		|ИзменениеДоступно,
		|ВладелецСхемы,
		|ПометкаУдаления,
		|ВерсияДанных,
		|АвтоформируемаяСхема,
		|НастройкиЭлементов,
		|ДоступныеВидыДействий,
		|ТипыДоступныхВидовДействий,
		|ОписаниеВидовДействий,
		|ОписаниеВидовДействийДляОтображения");
		
	Возврат ДанныеПараметров;	
		
КонецФункции		

// Проверить корректность схемы. Неинтерактивно. Бросит исключение при ошибке.
// 
// Параметры:
//  ПараметрыСхемы  - СправочникСсылка.ПараметрыСхемДляОбработокОбъектов
//  Предмет - ОпределяемыйТип.ПредметДействия
//
Процедура ПроверитьКорректностьСхемыНеинтерактивно(ПараметрыСхемы, Предмет) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось проверить корректность схемы.
			|Отсутствуют параметры схемы обработки.'");
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	СхемаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСхемы, "АвтоформируемаяСхема, ВладелецСхемы");
	Если СхемаРеквизиты.АвтоформируемаяСхема = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	ВладелецСхемы = СхемаРеквизиты.ВладелецСхемы;
	
	СхемаКорректна = Ложь;
	ЕстьЗапись = РегистрыСведений.РезультатыПроверкиСхемДляОбработокОбъектов.ПрочитатьЗапись(
		ВладелецСхемы, СхемаКорректна);
		
	Если ЕстьЗапись Тогда
		
		Если Не СхемаКорректна Тогда 
			ПолноеОписание = СтрШаблон(
				НСтр("ru = 'Невозможно начать обработку ""%1"".
					|Схема обработки содержит ошибки. Устраните ошибки и повторите попытку.'"), 
					Предмет);	
			ВызватьИсключение ПолноеОписание;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;		
	
	ДанныеПараметров = ДанныеПараметровПроверкиСхемы();
		
	ДанныеПараметров.Ссылка = ПараметрыСхемы;
		
	ДанныеПараметровСхемы = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(ПараметрыСхемы);
	
	ДанныеПараметров.Схема = ДанныеПараметровСхемы.Схема;
	ДанныеПараметров.ВладелецСхемы = ДанныеПараметровСхемы.ВладелецСхемы;
	ДанныеПараметров.ПометкаУдаления = ДанныеПараметровСхемы.ПометкаУдаления;
	ДанныеПараметров.ВерсияДанных = ДанныеПараметровСхемы.ВерсияДанных;
	ДанныеПараметров.АвтоформируемаяСхема = ДанныеПараметровСхемы.АвтоформируемаяСхема;
	ДанныеПараметров.НастройкиЭлементов = ДанныеПараметровСхемы.НастройкиЭлементов;
	
	ДоступностьИзменения = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ДоступностьИзмененияПараметровСхемы(
		ДанныеПараметров.Ссылка);
	ДанныеПараметров.ИзменениеДоступно = (ДоступностьИзменения = "ИзменениеДоступно");
	
	ДанныеПараметров.ДоступныеВидыДействий = 
		РаботаСПроцессамиПоОбработкамОбъектов.ВидыДействийОбработкиОбъекта(
		ДанныеПараметров.ВладелецСхемы);
		
		
	СхемаПроцесса = ДанныеПараметров.Схема;	

	ДанныеСхемы = СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыВФорме();
	
	Если ЗначениеЗаполнено(СхемаПроцесса) Тогда
		
		ДанныеСхемыПроцесса = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(СхемаПроцесса);
		Схема = ДанныеСхемыПроцесса.Схема;
		
		ДанныеСхемы.НастройкиСхемы = ДанныеСхемыПроцесса.Настройки;
		
	КонецЕсли;		
	
	РезультатПроверки = РезультатПроверкиКорректностиСхемы(ДанныеПараметров, ДанныеСхемы, Схема);

	Если Не ДанныеСхемы.РезультатПроверкиСхемы.НетОшибок 
		Или РезультатПроверки.ОшибкиНастроекСхемы.Количество() <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Невозможно начать обработку ""%1"".
				|Схема обработки содержит ошибки. Устраните ошибки и повторите попытку.'"), 
				Предмет);	
		ВызватьИсключение ПолноеОписание;
			
	КонецЕсли;		

КонецПроцедуры

// Проверить корректность схемы. 
// Тут проверяем:
// Все виды действий обработки размещены в схеме.
// У всех элементов схемы есть настройки (элементы действий, скрипты, условия).
// Базовая проверка граф схемы (нет висящих линий и пр).
// 
// Параметры:
//  ДанныеПараметров - Структура (см ПрочитатьПараметрыСхемыВФорму)
//  ДанныеСхемы - Структура
//  Схема - ГрафическаяСхема
//  СохранятьРезультат - Булево.
// 
// Возвращаемое значение:
// Структура (РезультатБазовойПроверкиСхемы, ОшибкиНастроекСхемы)
//  
Функция РезультатПроверкиКорректностиСхемы(ДанныеПараметров, ДанныеСхемы, Схема,
	СохранятьРезультат = Истина) Экспорт
	
	Результат = Новый Структура("РезультатБазовойПроверкиСхемы, ОшибкиНастроекСхемы");
	
	Результат.РезультатБазовойПроверкиСхемы = СхемыПроцессовСервер.СхемаКорректна(Схема);
	
	Результат.ОшибкиНастроекСхемы = 
		ОшибкиЗаполненияНастроекЭлементовСхемы(
			ДанныеПараметров.НастройкиЭлементов,
			ДанныеСхемы.НастройкиСхемы.ТипыЭлементов,
			Схема,
			ДанныеПараметров.ДоступныеВидыДействий);

	СхемаКорректна = Ложь;	
	Если Результат.РезультатБазовойПроверкиСхемы.НетОшибок 
		И Результат.ОшибкиНастроекСхемы.Количество() = 0 Тогда
		СхемаКорректна = Истина;
	КонецЕсли;		

	Если СохранятьРезультат Тогда
		
		СхемаКорректнаРезультатВБазе = Неопределено;
		РегистрыСведений.РезультатыПроверкиСхемДляОбработокОбъектов.ПрочитатьЗапись(
			ДанныеПараметров.ВладелецСхемы, СхемаКорректнаРезультатВБазе);
		
		Если СхемаКорректна <> СхемаКорректнаРезультатВБазе Тогда
			РегистрыСведений.РезультатыПроверкиСхемДляОбработокОбъектов.Добавить(
				ДанныеПараметров.ВладелецСхемы, СхемаКорректна);
		КонецЕсли;
	КонецЕсли;		
	
	Возврат Результат;
	
КонецФункции	

// Возвращает ошибки заполнения настроек элементов схемы.
// 
// Параметры:
//  НастройкиЭлементов - Соответствие - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
//                                          СтруктураНастроекЭлементовСхемы()
//  ТипыЭлементов - Соответствие
//   * Ключ - Строка - имя элемента графической схемы
//   * Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//  Схема - ГрафическаяСхема 
//  ДоступныеВидыДействий - Массив
// 
// Возвращаемое значение:
//  Массив
//   * Строка
//  
Функция ОшибкиЗаполненияНастроекЭлементовСхемы(НастройкиЭлементов, ТипыЭлементов, Схема,
	ДоступныеВидыДействий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОшибкиНастроек = Новый Массив;
	
	ШаблонТекстаОшибкиОтсутствуетНастройка =
		НСтр("ru = 'У элемента схемы ""%1"" (%2) отсутствует настройка.'",
		ОбщегоНазначения.КодОсновногоЯзыка());

	ШаблонТекстаОшибкиВидаНетВСхеме =
		НСтр("ru = 'Вид действия ""%1"" не размещен в схеме.'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
	ИспользованныеВидыДействий = Новый Соответствие;
		
	Для Каждого ИмяЭлементаИНастройка Из НастройкиЭлементов Цикл
		
		ИмяЭлемента = ИмяЭлементаИНастройка.Ключ;
		НастройкаЭлемента = ИмяЭлементаИНастройка.Значение;
		
		ТипЭлемента = ТипыЭлементов[ИмяЭлемента];
		
		ИмяЭлементаДляСообщения =
			СхемыПроцессовКлиентСервер.ОписаниеЭлементаСхемы(ИмяЭлемента, Схема);
		Если Не ЗначениеЗаполнено(ИмяЭлементаДляСообщения) Тогда
			ИмяЭлементаДляСообщения = ИмяЭлемента;
		КонецЕсли;
		
		Если СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ТипЭлемента) Тогда
			
			Если НастройкаЭлемента = Неопределено
				Или НастройкаЭлемента.Отбор.Элементы.Количество() = 0 Тогда
				
				ОписаниеОшибки = СтрШаблон(ШаблонТекстаОшибкиОтсутствуетНастройка,
					ИмяЭлементаДляСообщения,
					ТипЭлемента);
				ОшибкиНастроек.Добавить(ОписаниеОшибки);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
			ОписаниеОшибки = СтрШаблон(ШаблонТекстаОшибкиОтсутствуетНастройка,
				ИмяЭлементаДляСообщения,
				ТипЭлемента);
			ОшибкиНастроек.Добавить(ОписаниеОшибки);
			
			Продолжить;
		КонецЕсли;
			
		Если СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлемента) Тогда
			
			ИспользованныеВидыДействий.Вставить(НастройкаЭлемента, 1);
			
		КонецЕсли;	
			
	КонецЦикла;
	
	Для Каждого ВидДействия Из ДоступныеВидыДействий Цикл
		
		Если ИспользованныеВидыДействий.Получить(ВидДействия) = Неопределено Тогда
			
			ОписаниеОшибки = СтрШаблон(ШаблонТекстаОшибкиВидаНетВСхеме,
				ВидДействия);
			ОшибкиНастроек.Добавить(ОписаниеОшибки);
			
		КонецЕсли;	
		
	КонецЦикла;	
		
	Возврат ОшибкиНастроек;
	
КонецФункции

// Обновляет результат проверки корректности схемы в базе для владельца схемы.
//
// Параметры:
//  ВладелецСхемы - СправочникСсылка.НастройкиОбработкиВидовОбъектов,
//                  СправочникСсылка.ОбработкиОбъектов
//
Процедура ОбновитьРезультатПроверкиКорректностиСхемыВБазе(ВладелецСхемы) Экспорт
	
	ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыСхемыПоВладельцу(
			ВладелецСхемы.Ссылка);
	
	Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПараметровСхемы = 
		Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(ПараметрыСхемы);
		
	Если Не ОбщегоНазначения.СсылкаСуществует(ДанныеПараметровСхемы.Схема) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСхемыПроцесса = 
		Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(ДанныеПараметровСхемы.Схема);
	
	ДанныеПараметров = ДанныеПараметровПроверкиСхемы();
	ДанныеПараметров.Ссылка = ПараметрыСхемы;
	ДанныеПараметров.Схема = ДанныеПараметровСхемы.Схема;
	ДанныеПараметров.ВладелецСхемы = ДанныеПараметровСхемы.ВладелецСхемы;
	ДанныеПараметров.ПометкаУдаления = ДанныеПараметровСхемы.ПометкаУдаления;
	ДанныеПараметров.ВерсияДанных = ДанныеПараметровСхемы.ВерсияДанных;
	ДанныеПараметров.АвтоформируемаяСхема = ДанныеПараметровСхемы.АвтоформируемаяСхема;
	ДанныеПараметров.НастройкиЭлементов = ДанныеПараметровСхемы.НастройкиЭлементов;
	
	ДанныеПараметров.ДоступныеВидыДействий = ВидыДействийОбработкиОбъекта(
		ДанныеПараметров.ВладелецСхемы);
	
	ДанныеСхемы = СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыВФорме();
	ДанныеСхемы.НастройкиСхемы = ДанныеСхемыПроцесса.Настройки;
	
	РезультатПроверки = РезультатПроверкиКорректностиСхемы(
		ДанныеПараметров, ДанныеСхемы, ДанныеСхемыПроцесса.Схема, Истина);
	
КонецПроцедуры

#Область УсловияСхемы

// Возвращает пустое условие схемы обработки объекта.
// 
// Возвращаемое значение:
// 	НастройкиКомпоновкиДанных
//
Функция ПустоеУсловиеСхемыОбработкиОбъекта() Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СтруктураУсловияСхемыОбработкиОбъекта");
	Возврат СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
КонецФункции

// Возвращает результат условия схемы обработки.
// 
// Параметры:
// 	Настройка - НастройкиКомпоновкиДанных - настройка условия.
//  ДействияИИмена - Соответствие
//   * Ключ - Строка - имя действия в схеме.
//   * Значение - ОпределяемыйТип.Действия
//  ОбъектОбработки - СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
// 	Булево
//
Функция РезультатУсловияСхемы(Настройка, ДействияИИмена, ОбъектОбработки) Экспорт
	
	// Поменяем значения элементов отбора настройки компоновки данных на поле для проверки.
	ВычислитьЗначенияЭлементовОтбора(Настройка.Отбор.Элементы, ДействияИИмена, ОбъектОбработки);
	
	// Вычисляем результат условия при помощи схемы компоновки данных.
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СтруктураУсловияСхемыОбработкиОбъекта");
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройка);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Возвращаем результат.
	Возврат ТаблицаРезультата.Количество() > 0;
		
КонецФункции

#КонецОбласти

#Область СкриптыСхемы

// Выполняет скрипт схемы обработки.
// 
// Параметры:
//  Скрипт - СправочникСсылка.СкриптыСхемДляОбработокОбъектов
//  Обработка - СправочникСсылка.ОбработкиОбъектов
//
Процедура ВыполнитьСкриптСхемы(Скрипт, Обработка) Экспорт
		
	ВыражениеСкрипта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Скрипт, "Выражение");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработкаОбъект", Обработка.ПолучитьОбъект());
	
	ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ВыражениеСкрипта, Параметры);
			
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КарточкаПроцесса

// Обновляет представление длительности в карточке процесса по обработке/действию.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
//
Процедура ОбновитьДлительностьПроцесса(Форма) Экспорт
	
	Если Форма.Стартован Тогда
		Если Форма.Завершен Тогда
			Форма.Длительность = СтрШаблон(
				НСтр("ru = '(выполнялся %1)'"),
				НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(
				Форма.ДатаЗавершения, Форма.ДатаНачала)));
		Иначе
			Форма.Длительность = СтрШаблон(
				НСтр("ru = '(выполняется %1)'"),
				НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(
				ТекущаяДатаСеанса(), Форма.ДатаНачала)));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет описание состояния в карточке процесса по обработке/действию.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
//
Процедура ОбновитьОписаниеСостоянияПроцесса(Форма) Экспорт
	
	Форма.Элементы.ДекорацияОписание.Гиперссылка = Ложь;
	Форма.Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	
	ВариантыВыполненияЗадач = Перечисления.ВариантыВыполненияПроцессовИЗадач;
	
	Если ЗначениеЗаполнено(Форма.ДатаЗавершения) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	РезультатыВыполненияПроцессовИЗадач.Результат
			|ИЗ
			|	РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|ГДЕ
			|	РезультатыВыполненияПроцессовИЗадач.Объект = &Объект";
		Запрос.УстановитьПараметр("Объект", Форма.Процесс);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
			
		Если Выборка.Результат = ВариантыВыполненияЗадач.Положительно Тогда
			Форма.Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_Положительный;
			Форма.Элементы.ДекорацияОписание.Заголовок = ПредставлениеРезультатаПроцесса(Форма);
			Форма.Элементы.ДекорацияОписание.ЦветТекста =
				ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		ИначеЕсли Выборка.Результат = ВариантыВыполненияЗадач.Отрицательно Тогда
			Форма.Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_Отрицательный;
			Форма.Элементы.ДекорацияОписание.Заголовок = ПредставлениеРезультатаПроцесса(Форма);
			
			Форма.Элементы.ДекорацияОписание.ЦветТекста =
				ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			
		ИначеЕсли Выборка.Результат = ВариантыВыполненияЗадач.ПоложительноСЗамечаниями Тогда
			Форма.Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач_ПоложительныйСЗамечаниями;
			
			Форма.Элементы.ДекорацияОписание.Заголовок = ПредставлениеРезультатаПроцесса(Форма);
			
			Форма.Элементы.ДекорацияОписание.ЦветТекста = 
				ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		Иначе
			Форма.Элементы.ДекорацияСостояния.Картинка =
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач;
			
			ПредставлениеРезультата = НСтр("ru = 'Завершен %1'");
			ПредставлениеРезультата = СтрШаблон(ПредставлениеРезультата, 
				Формат(Форма.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
			Форма.Элементы.ДекорацияОписание.Заголовок = ПредставлениеРезультата;
		КонецЕсли;
	ИначеЕсли Форма.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		
		Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗнакПауза;
		Форма.Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Остановлен'");
			
	ИначеЕсли Форма.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		
		Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗнакПрерванПроцесс;
		
		Если ПустаяСтрока(Форма.ПричинаПрерывания) Тогда
			Форма.Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Прерван'");
		Иначе			
			ЗаголовокДекорации = СтрШаблон(
				НСтр("ru = 'Прерван: %1'"),
				Форма.ПричинаПрерывания);
			Форма.Элементы.ДекорацияОписание.Заголовок = ЗаголовокДекорации;	
		КонецЕсли;
		
		Форма.Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
		Форма.Элементы.ДекорацияОписание.Гиперссылка = Истина;
		
	ИначеЕсли Форма.Стартован Тогда
		
		Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.СформироватьОтчет;
		
		Форма.Элементы.ДекорацияОписание.Заголовок = СтрШаблон(
			НСтр("ru = 'Выполняется с %1'"), Формат(Форма.ДатаНачала, "ДФ='dd.MM.yyyy HH:mm'"));
		
	Иначе
		
		Форма.Элементы.ДекорацияСостояния.Картинка = Новый Картинка();
		Форма.Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Не стартован'");
		Форма.Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условие оформление для спика задач в карточке процесса по обработке/действию.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 
Процедура УстановитьУсловноеОформлениеСпискаЗадачПроцесса(Форма) Экспорт
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Помечен(а) на удаление (дерево задач)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("Шрифт");
	ЭлементОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Задачи");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СхемыДляОбработокОбъектов

// Нормализует настройки элементов схемы по перечню видов действий.
// 
// Параметры:
//  НастройкиЭлементов - Соответствие
//   * Ключ - Строка - имя элемента в схеме.
//   * Значение - СправочникСсылка.ВидыДействий,
//                НастройкиКомпоновкиДанных - для условий.
// 	ВидыДействий - Массив - см. ВидыДействияОбъекта
// 	ДанныеСхемы - Структура - см. Справочники.СхемыПроцессов.ДанныеСхемыПроцесса
//
Процедура НормализоватьНастройкиЭлементовСхемыПоВидамДействий(
	НастройкиЭлементов, ВидыДействий, ДанныеСхемы)
	
	КэшВидовДействий = Новый Соответствие();
	Для Каждого ВидДействия Из ВидыДействий Цикл
		КэшВидовДействий[ВидДействия] = Истина;	
	КонецЦикла;
	
	ИменаЭлементов = Новый Массив();
	Для Каждого НастройкаЭлемента Из НастройкиЭлементов Цикл
		ИменаЭлементов.Добавить(НастройкаЭлемента.Ключ);
	КонецЦикла; 
	
	ТипДействие = Тип("СправочникСсылка.ВидыДействий");
	
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		ЗначениеНастройкиЭлемента = НастройкиЭлементов[ИмяЭлемента];
		
		Если ТипЗнч(ЗначениеНастройкиЭлемента) = ТипДействие
			И ЗначениеЗаполнено(ЗначениеНастройкиЭлемента)
			И КэшВидовДействий[ЗначениеНастройкиЭлемента] = Неопределено Тогда
			
			НастройкиЭлементов[ИмяЭлемента] = Справочники.ВидыДействий.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	ВидДейстивийВНастройке = Новый Массив;
	НастройкиЭлементовДействий = Новый Соответствие;
	Для Каждого НастройкаЭлемента Из НастройкиЭлементов Цикл
		Если ТипЗнч(НастройкаЭлемента.Значение) = Тип("СправочникСсылка.ВидыДействий") Тогда
			НастройкиЭлементовДействий[НастройкаЭлемента.Ключ] = НастройкаЭлемента.Значение;
			Если ЗначениеЗаполнено(НастройкаЭлемента.Значение) Тогда
				ВидДейстивийВНастройке.Добавить(НастройкаЭлемента.Значение);
			КонецЕсли;		
		КонецЕсли;		
	КонецЦикла;
	
	ТипыДоступныхВидовДействий =
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидДейстивийВНастройке, "Тип");
	
	Для Каждого НастройкаЭлемента Из НастройкиЭлементов Цикл
		
		Если ТипЗнч(НастройкаЭлемента.Значение) <> Тип("НастройкиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ПредшествующиеДействия = Новый Массив;
		
		ТипыПредшествующихЭлементов = Новый Соответствие();
		ТипыПредшествующихЭлементов[Перечисления.ТипыЭлементовСхемПроцессов.Действие] = Истина;
		
		ИменаПредшествующихДействий = СхемыПроцессовКлиентСервер.ИменаПредшествующихЭлементовВСхеме(
			ДанныеСхемы.Схема,
			ДанныеСхемы.Настройки.ТипыЭлементов,
			НастройкаЭлемента.Ключ,
			ТипыПредшествующихЭлементов);
		
		Для Каждого ИмяПредшественника Из ИменаПредшествующихДействий Цикл
			НастройкаДействия = НастройкиЭлементов[ИмяПредшественника];
			Если Не ЗначениеЗаполнено(НастройкаДействия) Тогда
				Продолжить	
			КонецЕсли;
			ПредшествующиеДействия.Добавить(ИмяПредшественника);
		КонецЦикла;
				
		РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.НормализоватьЭлементыОтбораНастройкиУсловия(
			НастройкаЭлемента.Значение.Отбор.Элементы,
			ПредшествующиеДействия,
			НастройкиЭлементовДействий,
			ТипыДоступныхВидовДействий);	
		
	КонецЦикла;
		
КонецПроцедуры

// Возвращает имя элемента схемы обработки объекта по виду действия обработки.
//
// Параметры:
//  ВидДействия - СправочникСсылка.ВидыДействий.
//  ДанныеПараметровСхемы - Струкутра - см. Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяЭлементаСхемыОбработкиПоВидуДействия(ВидДействия, ДанныеПараметровСхемы)
	
	ИмяЭлемента = "";
	Для Каждого КлючЗначение Из ДанныеПараметровСхемы.НастройкиЭлементов Цикл
		Если КлючЗначение.Значение = ВидДействия Тогда
			ИмяЭлемента = КлючЗначение.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяЭлемента;
	
КонецФункции

#Область УсловияСхемы

// Вычисляет значения элементов отбора условия схемы обработки.
// Рекурсивная процедура.
//
// Параметры:
//  ЭлементыОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных - элементы отбора условия.
//  ДействияИИмена - Соотвествия
//   * Ключ - Строка - имя дейстьвия в схеме.
//   * Значение - ОпределяемыйТип.Действия
//  ОбъектОбработки - СправочникСсылка.ДокументыПредприятия
//
Процедура ВычислитьЗначенияЭлементовОтбора(ЭлементыОтбора, ДействияИИмена, ОбъектОбработки)
	
	ТипЭлементОтбораКомпоновкиДанных = Тип("ЭлементОтбораКомпоновкиДанных");
	ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");

	ПолеУсловияПоОбъекту = Новый ПолеКомпоновкиДанных(
		РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.
		ИмяПоляУсловиеПоОбъекту());
	
	ПолеУсловияПоРезультатуВыполненияДействия = Новый ПолеКомпоновкиДанных(
		РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.
		ИмяПоляУсловиеПоРезультатуВыполненияДействия());

	ПолеДляПроверки = Новый ПолеКомпоновкиДанных(
		РаботаСПроцессамиПоОбработкамОбъектовКлиентСервер.ИмяПоляДляПроверкиУсловияСхемы());
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлементаОтбора = ТипЗнч(ЭлементОтбора);
		
		Если ТипЭлементаОтбора = ТипЭлементОтбораКомпоновкиДанных Тогда
			
			Результат = Ложь;
			
			Если ЭлементОтбора.ЛевоеЗначение = ПолеУсловияПоОбъекту Тогда
				
				Результат = РаботаСАлгоритмамиПроверки.
					ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(
					ОбъектОбработки, ЭлементОтбора.ПравоеЗначение);
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеУсловияПоРезультатуВыполненияДействия Тогда
				
				ИмяДействия = ЭлементОтбора.ПравоеЗначение.ИмяДействия;
				РезультатВыполненияПоУсловию = ЭлементОтбора.ПравоеЗначение.РезультатВыполнения;
				
				Действие = ДействияИИмена[ИмяДействия];
				
				// Если действие отсутствует, то игнорируем текущее условие.
				Если ДействияИИмена[ИмяДействия] = Неопределено Тогда
					ЭлементОтбора.Использование = Ложь;
					Продолжить;
				КонецЕсли;
				
				// Игнорируем условие, если действие не запускалось.
				РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(Действие);
				СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие); 
				Если Не ЗначениеЗаполнено(РезультатДействия)
					И Не ЗначениеЗаполнено(СостояниеДействия) Тогда
										
					ЭлементОтбора.Использование = Ложь;
					Продолжить;
				КонецЕсли;
				
				// Игнорируем условие, если действие было пропущено.
				Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
					ЭлементОтбора.Использование = Ложь;
					Продолжить;
				КонецЕсли;
				
				Результат = (РезультатВыполненияПоУсловию = РезультатДействия);
			
			КонецЕсли;
			
			ЭлементОтбора.ЛевоеЗначение = ПолеДляПроверки;
			ЭлементОтбора.ПравоеЗначение = Результат;
			
		ИначеЕсли ТипЭлементаОтбора = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			ВычислитьЗначенияЭлементовОтбора(
				ЭлементОтбора.Элементы, ДействияИИмена, ОбъектОбработки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КарточкаПроцесса

// Возвращает представление результата в карточке процесса по обработке/действию.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
//
Функция ПредставлениеРезультатаПроцесса(Форма)
	
	Возврат НСтр("ru = 'Завершен '") + Формат(Форма.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'");
	
КонецФункции

#КонецОбласти

#КонецОбласти