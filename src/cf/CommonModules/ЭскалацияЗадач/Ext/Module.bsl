////////////////////////////////////////////////////////////////////////////////
// Эскалация задач: модуль для работы с эскалацией и автоматическим выполнением задач.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает список значений доступных функций автоподстановки правила эскалации задач.
//
// Возвращаемое значение:
//   Массив - Список доступных функций автоподстановки.
//
Функция ДоступныеАвтоподстановки() Экспорт
	
	ДоступныеФункции = Новый Массив;
	
	ДоступныеФункции.Добавить(Справочники.АвтоподстановкиДляПроцессов.АвторПроцесса);
	ДоступныеФункции.Добавить(Справочники.АвтоподстановкиДляПроцессов.НепосредственныйРуководительАвтораПроцесса);
	ДоступныеФункции.Добавить(Справочники.АвтоподстановкиДляОбъектов.ПодготовилДокумент);
	ДоступныеФункции.Добавить(Справочники.АвтоподстановкиДляОбъектов.НепосредственныйРуководительПодготовившегоДокумент);
	ДоступныеФункции.Добавить(Справочники.АвтоподстановкиДляОбъектов.ОтветственныйЗаДокумент);
	ДоступныеФункции.Добавить(Справочники.АвтоподстановкиДляОбъектов.НепосредственныйРуководительОтветственногоЗаДокумент);
	ДоступныеФункции.Добавить(Справочники.АвтоподстановкиДляОбъектов.РуководительОрганизации);
	ДоступныеФункции.Добавить(Справочники.АвтоподстановкиДляОбъектов.АдресатДокумента);
	ДоступныеФункции.Добавить(Справочники.АвтоподстановкиДляОбъектов.ПредседательМероприятия);
	ДоступныеФункции.Добавить(Справочники.АвтоподстановкиДляОбъектов.СекретарьМероприятия);
	ДоступныеФункции.Добавить(Справочники.АвтоподстановкиДляОбъектов.НепосредственныйРуководительИсполнителя);
	
	Возврат ДоступныеФункции;
	
КонецФункции

// Обработчик регламентного задания "Эскалация задач".
//
Процедура ЭскалацияЗадач() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Эскалация);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭскалацияЗадачПроцессов();
	ЭскалацияДействий();
	ЭскалацияДействийОзнакомления();
	
КонецПроцедуры

Процедура ЭскалацияДействийОзнакомления()
	
	ПравилаЭскалации = ПравилаЭскалацииДействий();
	АктивныеЗадачи = АктивныеДействияОзнакомления(ПравилаЭскалации); // АктивныеЗадачи
	Для Каждого Задача Из АктивныеЗадачи Цикл
		
		ПравилоЭскалации = ПодходящееПравилоЭскалацииДействия(Задача, ПравилаЭскалации);
		Если ЗначениеЗаполнено(ПравилоЭскалации) Тогда
			
			Попытка
				Если ПрименитьПравилоЭскалацииДействияОзнакомления(Задача, ПравилоЭскалации) Тогда
					ТекстИнформации = СтрШаблон(
						НСтр("ru = 'Правило эскалации %1 применено к задаче %3.
						|Правило эскалации: %2
						|Задача: %4'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
						ПравилоЭскалации.Представление,
						ПолучитьНавигационнуюСсылку(ПравилоЭскалации.Ссылка),
						Задача.Представление,
						ПолучитьНавигационнуюСсылку(Задача.Ссылка));
					ЗаписьЖурналаРегистрации(
						СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Информация,
						Метаданные.Справочники.ПравилаЭскалации,
						Задача.Ссылка,
						ТекстИнформации);
				КонецЕсли;
			Исключение
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при применении правила эскалации %1 к задаче %3:
						|%5
						|Правило эскалации: %2
						|Задача: %4'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					ПравилоЭскалации.Представление,
					ПолучитьНавигационнуюСсылку(ПравилоЭскалации.Ссылка),
					Задача.Представление,
					ПолучитьНавигационнуюСсылку(Задача.Ссылка),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.ПравилаЭскалации,
					Задача.Ссылка,
					ТекстОшибки);
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭскалацияДействий()
	
	ПравилаЭскалации = ПравилаЭскалацииДействий();
	АктивныеЗадачи = АктивныеДействия(ПравилаЭскалации); // АктивныеЗадачи
	Для Каждого Задача Из АктивныеЗадачи Цикл
		
		ПравилоЭскалации = ПодходящееПравилоЭскалацииДействия(Задача, ПравилаЭскалации);
		Если ЗначениеЗаполнено(ПравилоЭскалации) Тогда
			
			Попытка
				Если ПрименитьПравилоЭскалацииДействия(Задача, ПравилоЭскалации) Тогда
					ТекстИнформации = СтрШаблон(
						НСтр("ru = 'Правило эскалации %1 применено к задаче %3.
						|Правило эскалации: %2
						|Задача: %4'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
						ПравилоЭскалации.Представление,
						ПолучитьНавигационнуюСсылку(ПравилоЭскалации.Ссылка),
						Задача.Представление,
						ПолучитьНавигационнуюСсылку(Задача.Ссылка));
					ЗаписьЖурналаРегистрации(
						СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Информация,
						Метаданные.Справочники.ПравилаЭскалации,
						Задача.Ссылка,
						ТекстИнформации);
				КонецЕсли;
			Исключение
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при применении правила эскалации %1 к задаче %3:
						|%5
						|Правило эскалации: %2
						|Задача: %4'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					ПравилоЭскалации.Представление,
					ПолучитьНавигационнуюСсылку(ПравилоЭскалации.Ссылка),
					Задача.Представление,
					ПолучитьНавигационнуюСсылку(Задача.Ссылка),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.ПравилаЭскалации,
					Задача.Ссылка,
					ТекстОшибки);
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭскалацияЗадачПроцессов()
	
	ПравилаЭскалации = ПравилаЭскалацииЗадач();
	АктивныеЗадачи = АктивныеЗадачи(ПравилаЭскалации);
	Для Каждого Задача Из АктивныеЗадачи Цикл
		
		ПравилоЭскалации = ПодходящееПравилоЭскалацииЗадачПроцессов(Задача, ПравилаЭскалации);
		Если ЗначениеЗаполнено(ПравилоЭскалации) Тогда
			
			Попытка
				Если ПрименитьПравилоЭскалацииЗадачПроцессов(Задача, ПравилоЭскалации) Тогда
					ТекстИнформации = СтрШаблон(
						НСтр("ru = 'Правило эскалации %1 применено к задаче %3.
						|Правило эскалации: %2
						|Задача: %4'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
						ПравилоЭскалации.Представление,
						ПолучитьНавигационнуюСсылку(ПравилоЭскалации.Ссылка),
						Задача.Представление,
						ПолучитьНавигационнуюСсылку(Задача.Ссылка));
					ЗаписьЖурналаРегистрации(
						СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Информация,
						Метаданные.Справочники.ПравилаЭскалации,
						Задача.Ссылка,
						ТекстИнформации);
				КонецЕсли;
			Исключение
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при применении правила эскалации %1 к задаче %3:
						|%5
						|Правило эскалации: %2
						|Задача: %4'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					ПравилоЭскалации.Представление,
					ПолучитьНавигационнуюСсылку(ПравилоЭскалации.Ссылка),
					Задача.Представление,
					ПолучитьНавигационнуюСсылку(Задача.Ссылка),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.ПравилаЭскалации,
					Задача.Ссылка,
					ТекстОшибки);
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует заголовок команды "Правила эскалации задач по шаблону".
//
// Параметры:
//  Шаблон	 - СправочникСсылка	 - Шаблон процесса.
// 
// Возвращаемое значение:
//  Строка - Заголовок команды.
//
Функция ЗаголовокКомандыПравилаЭскалацииЗадачПоШаблону(Шаблон) Экспорт
	
	Заголовок = НСтр("ru = 'Нет правил эскалации для шаблона'");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭскалациюЗадач") И ЗначениеЗаполнено(Шаблон) Тогда
		КоличествоПравилЭскалации = КоличествоПравилЭскалацииПоШаблону(Шаблон);
		Если КоличествоПравилЭскалации > 0 Тогда
			ПараметрыПредметаИсчисления = Новый Массив;
			ПараметрыПредметаИсчисления.Добавить(НСтр("ru = 'правило эскалации'"));
			ПараметрыПредметаИсчисления.Добавить(НСтр("ru = 'правила эскалации'"));
			ПараметрыПредметаИсчисления.Добавить(НСтр("ru = 'правил эскалации'"));
			ПараметрыПредметаИсчисления = СтрСоединить(ПараметрыПредметаИсчисления, ",");
			ПодписьКоличествоПравил = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоПравилЭскалации,
				ПараметрыПредметаИсчисления);
			Заголовок = СтрШаблон(НСтр("ru = 'Для шаблона действует %1'"), ПодписьКоличествоПравил);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Устанавливает условное оформление правила эскалации задач в списке.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - Содержит настройки условного оформления формы.
//
Процедура УстановитьУсловноеОформлениеСписка(УсловноеОформление) Экспорт
	
	// Помеченные на удаление элементы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина));
	
КонецПроцедуры

// Конвертирует автоподстановку в формата версии 2.1, в автоподстановку формата версии 3.0.
// 
// Параметры:
//  Представление - Строка.
// 
// Возвращаемое значение:
//  СправочникСсылка.АвтоподстановкиДляОбъектов,
//  СправочникСсылка.АвтоподстановкиДляПроцессов, Неопределено - Автоподстановка формата версии 3.0.
//
Функция СконвертированнаяАвтоподстановка(Представление) Экспорт
	
	Автоподстановка = Неопределено;
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат Автоподстановка;
	КонецЕсли;
	
	Для Каждого МетаданныеЯзыка Из Метаданные.Языки Цикл
		
		Если Представление = НСтр("ru = 'Автор документа'", МетаданныеЯзыка.КодЯзыка) Тогда
			
			Автоподстановка = Справочники.АвтоподстановкиДляОбъектов.ПодготовилДокумент;
			
		ИначеЕсли Представление = НСтр("ru = 'Автор процесса'", МетаданныеЯзыка.КодЯзыка) Тогда
			
			Автоподстановка = Справочники.АвтоподстановкиДляПроцессов.АвторПроцесса;
			
		ИначеЕсли Представление = НСтр("ru = 'Адресат документа'", МетаданныеЯзыка.КодЯзыка) Тогда
			
			Автоподстановка = Справочники.АвтоподстановкиДляОбъектов.АдресатДокумента;
			
		ИначеЕсли Представление = НСтр("ru = 'Непосредственный руководитель автора документа'", МетаданныеЯзыка.КодЯзыка) Тогда
			
			Автоподстановка = Справочники.АвтоподстановкиДляОбъектов.НепосредственныйРуководительПодготовившегоДокумент;
			
		ИначеЕсли Представление = НСтр("ru = 'Непосредственный руководитель автора процесса'", МетаданныеЯзыка.КодЯзыка) Тогда
			
			Автоподстановка = Справочники.АвтоподстановкиДляПроцессов.НепосредственныйРуководительАвтораПроцесса;
			
		ИначеЕсли Представление = НСтр("ru = 'Непосредственный руководитель исполнителя'", МетаданныеЯзыка.КодЯзыка) Тогда
			
			Автоподстановка = Справочники.АвтоподстановкиДляОбъектов.НепосредственныйРуководительИсполнителя;
			
		ИначеЕсли Представление = НСтр("ru = 'Непосредственный руководитель ответственного за документ'", МетаданныеЯзыка.КодЯзыка) Тогда
			
			Автоподстановка = Справочники.АвтоподстановкиДляОбъектов.НепосредственныйРуководительОтветственногоЗаДокумент;
			
		ИначеЕсли Представление = НСтр("ru = 'Ответственный за документ'", МетаданныеЯзыка.КодЯзыка) Тогда
			
			Автоподстановка = Справочники.АвтоподстановкиДляОбъектов.ОтветственныйЗаДокумент;
			
		ИначеЕсли Представление = НСтр("ru = 'Председатель мероприятия'", МетаданныеЯзыка.КодЯзыка) Тогда
			
			Автоподстановка = Справочники.АвтоподстановкиДляОбъектов.ПредседательМероприятия;
			
		ИначеЕсли Представление = НСтр("ru = 'Руководитель организации'", МетаданныеЯзыка.КодЯзыка) Тогда
			
			Автоподстановка = Справочники.АвтоподстановкиДляОбъектов.РуководительОрганизации;
			
		ИначеЕсли Представление = НСтр("ru = 'Секретарь мероприятия'", МетаданныеЯзыка.КодЯзыка) Тогда
			
			Автоподстановка = Справочники.АвтоподстановкиДляОбъектов.СекретарьМероприятия;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Автоподстановка = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не найдена автоподстановка для ""%1"".'"),
			Представление);
		
	КонецЕсли;
	
	Возврат Автоподстановка;
	
КонецФункции

Функция ПредставлениеВОтчете(Задача, Предмет, ДействиеОбработки) Экспорт
	
	Если ЗначениеЗаполнено(Задача) Тогда
 		Возврат Задача; //Возврат Строка(Задача);
	ИначеЕсли ЗначениеЗаполнено(Предмет) Тогда	
		Возврат СтрШаблон("%1 - %2",
			Строка(Предмет), Строка(ДействиеОбработки));
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ЗначениеВОтчете(Задача, Предмет, ДействиеОбработки) Экспорт
	
	Если ЗначениеЗаполнено(Задача) Тогда
 		Возврат Задача; //Возврат Строка(Задача);
	ИначеЕсли ЗначениеЗаполнено(Предмет) Тогда	
		Возврат Предмет;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает значение автоподстановки для задачи.
//
// Параметры:
//  Автоподстановка - СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.АвтоподстановкиДляПроцессов.
//  БизнесПроцесс - БизнесПроцессСсылка - процесс, для которого вычисляется автоподстановка.
//  ОсновнойПредмет - ОпределяемыйТип.ПриложениеЗадачи.
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя.
// 
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники - Значение автоподстановки.
//
Функция ПолучитьЗначениеАвтоподстановки(Автоподстановка, БизнесПроцесс, ОсновнойПредмет, ЗадачаПроцесса, СтрокаТаблицы)
	
	Если ТипЗнч(Автоподстановка) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
		
		ТипОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Автоподстановка, "ТипОбъекта");
		Если ТипОбъекта = Перечисления.ТипыОбъектов.ЗадачиПроцессов Тогда
			
			Объект = ЗадачаПроцесса.ПолучитьОбъект();
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВидДействия) Тогда
				СтрокаТаблицы.ТекущийИсполнитель = СтрокаТаблицы.Исполнитель;
				Объект = СтрокаТаблицы;
			КонецЕсли;	
			
		Иначе
			
			Если Не ЗначениеЗаполнено(ОсновнойПредмет) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не найден основной предмет у бизнес-процесса %1 (%2)'"),
					БизнесПроцесс,
					ТипЗнч(БизнесПроцесс));
			КонецЕсли;
			
			Объект = ОсновнойПредмет.ПолучитьОбъект();
			
		КонецЕсли;
		
		ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
			Автоподстановка,
			Объект);
		
	ИначеЕсли ТипЗнч(Автоподстановка) = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов") Тогда
		
		Объект = БизнесПроцесс.ПолучитьОбъект();
		ЗначениеАвтоподстановки = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
			Автоподстановка,
			Объект);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен способ получения значения автоподстановки %1 (%2).'"),
			Автоподстановка,
			ТипЗнч(Автоподстановка));
		
	КонецЕсли;
	
	Возврат ЗначениеАвтоподстановки;
	
КонецФункции

// Формирует таблицу правил эскалации для процессов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Правила эскалации.
//
Функция ПравилаЭскалацииЗадач()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаЭскалацииЗадач.Ссылка КАК Ссылка,
		|	ПравилаЭскалацииЗадач.Представление КАК Представление,
		|	ПравилаЭскалацииЗадач.Код КАК Код,
		|	ПравилаЭскалацииЗадач.Действие КАК Действие,
		|	ПравилаЭскалацииЗадач.НаправлениеЭскалации КАК НаправлениеЭскалации,
		|	ПравилаЭскалацииЗадач.ВариантВыполнения КАК ВариантВыполнения,
		|	ПравилаЭскалацииЗадач.Приоритет КАК Приоритет,
		|	ПравилаЭскалацииЗадач.ВариантСрока КАК ВариантСрока,
		|	ПравилаЭскалацииЗадач.Срок КАК Срок,
		|	ПравилаЭскалацииЗадач.ДополнительныеУсловия.(
		|		Условие,
		|		ЗначениеУсловия) КАК ДополнительныеУсловия,
		|	ПравилаЭскалацииЗадач.Процессы.(
		|		ТипПроцесса,
		|		Шаблон,
		|		ТочкаМаршрута,
		|		ШаблонКомплексногоПроцесса)
		|ИЗ
		|	Справочник.ПравилаЭскалации КАК ПравилаЭскалацииЗадач
		|ГДЕ
		|	ПравилаЭскалацииЗадач.ПометкаУдаления = ЛОЖЬ
		|	И ПравилаЭскалацииЗадач.ТипПредметаЭскалации = ЗНАЧЕНИЕ(Перечисление.ТипыПредметовЭскалации.Процессы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
	Результат = Запрос.Выполнить();
	ПравилаЭскалации = Результат.Выгрузить();
	
	Возврат ПравилаЭскалации;
	
КонецФункции

// Формирует таблицу правил эскалации для действий.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Правила эскалации.
//
Функция ПравилаЭскалацииДействий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаЭскалацииЗадач.Ссылка КАК Ссылка,
		|	ПравилаЭскалацииЗадач.Представление КАК Представление,
		|	ПравилаЭскалацииЗадач.Код КАК Код,
		|	ПравилаЭскалацииЗадач.Действие КАК Действие,
		|	ПравилаЭскалацииЗадач.НаправлениеЭскалации КАК НаправлениеЭскалации,
		|	ПравилаЭскалацииЗадач.ВариантВыполнения КАК ВариантВыполнения,
		|	ПравилаЭскалацииЗадач.Приоритет КАК Приоритет,
		|	ПравилаЭскалацииЗадач.ВариантСрока КАК ВариантСрока,
		|	ПравилаЭскалацииЗадач.Срок КАК Срок,
		|	ПравилаЭскалацииЗадач.ДополнительныеУсловия.(
		|		Условие,
		|		ЗначениеУсловия) КАК ДополнительныеУсловия,
		|	ПравилаЭскалацииЗадач.Обработки.(
		|		ВидДействия,
		|		НастройкаОбработки,
		|		ФункцияУчастника),
		|	ПравилаЭскалацииЗадач.НастройкаОбработки
		|ИЗ
		|	Справочник.ПравилаЭскалации КАК ПравилаЭскалацииЗадач
		|ГДЕ
		|	ПравилаЭскалацииЗадач.ПометкаУдаления = ЛОЖЬ
		|	И ПравилаЭскалацииЗадач.ТипПредметаЭскалации = ЗНАЧЕНИЕ(Перечисление.ТипыПредметовЭскалации.Действия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
	Результат = Запрос.Выполнить();
	ПравилаЭскалации = Результат.Выгрузить();
	
	Возврат ПравилаЭскалации;
	
КонецФункции

// Формирует таблицу активных задач.
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Активные задачи.
//
Функция АктивныеЗадачи(ПравилаЭскалации)
	
	Если ПравилаЭскалации.Количество() = 0 Тогда
		АктивныеЗадачи = Новый ТаблицаЗначений;
		Возврат АктивныеЗадачи;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПроверки = ТекущаяДатаСеанса();
	
	ЭтотУзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	КонструкторТекстаЗапроса = Новый Массив;
	
	// Временная таблица ОтборПоПроцессам.
	ТекстЗапросаОтборПоПроцессам = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборПоПроцессам.Шаблон КАК Шаблон,
		|	ОтборПоПроцессам.ТочкаМаршрута КАК ТочкаМаршрута
		|ПОМЕСТИТЬ ОтборПоПроцессам
		|ИЗ
		|	&ОтборПоПроцессам КАК ОтборПоПроцессам
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Шаблон,
		|	ТочкаМаршрута";
	КонструкторТекстаЗапроса.Добавить(ТекстЗапросаОтборПоПроцессам);
	
	// Временная таблица ДанныеЗадач.
	ТекстЗапросаДанныеЗадач = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Дата КАК Дата,
		|	ЗадачаИсполнителя.Представление КАК Представление,
		|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ЗадачаИсполнителя.Проект КАК Проект,
		|	ЗадачаИсполнителя.Важность КАК ВажностьЗадачи,
		|	ЗадачаИсполнителя.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ЗадачаИсполнителя.БизнесПроцесс.Шаблон КАК ШаблонПроцесса,
		|	ЗадачаИсполнителя.ТекущийИсполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ЭскалированныеЗадачиСрезПоследних.ПравилоЭскалации КАК ОбработанноеПравилоЭскалации
		|ПОМЕСТИТЬ ДанныеЗадач
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ЗадачаИсполнителя.БизнесПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|		И (ДанныеБизнесПроцессов.УзелОбработки = &ЭтотУзелОбмена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭскалированныеЗадачи.СрезПоследних КАК ЭскалированныеЗадачиСрезПоследних
		|		ПО ЗадачаИсполнителя.Ссылка = ЭскалированныеЗадачиСрезПоследних.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|		ПО ЗадачаИсполнителя.Ссылка = ОчередьЗаданийДокументооборота.ПредметЗадания
		|		И ОчередьЗаданийДокументооборота.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПоПроцессам КАК ОтборПоПроцессам
		|		ПО ЗадачаИсполнителя.БизнесПроцесс.Шаблон = ОтборПоПроцессам.Шаблон
		|		И ЗадачаИсполнителя.ТочкаМаршрута = ОтборПоПроцессам.ТочкаМаршрута
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|		ПО ЗадачаИсполнителя.БизнесПроцесс = ПроцессыДействий.Процесс
		|ГДЕ
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЕСТЬNULL(ОчередьЗаданийДокументооборота.СтатусЗадания,
		|		НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|   И ПроцессыДействий.Действие ЕСТЬ NULL";
	ТипСроков = ТипСроков(ПравилаЭскалации);
	Если ТипСроков = "СоСроком" Тогда
		ТекстЗапросаДанныеЗадач = ТекстЗапросаДанныеЗадач + "
			|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)";
	ИначеЕсли ТипСроков = "Просроченные" Тогда
		ТекстЗапросаДанныеЗадач = ТекстЗапросаДанныеЗадач + "
			|	И ЗадачаИсполнителя.СрокИсполнения <= &Дата
			|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)";
	КонецЕсли;
	КонструкторТекстаЗапроса.Добавить(ТекстЗапросаДанныеЗадач);
	
	// Добавляем временные таблицы для получения данных предмета.
	ИспользуютсяДанныеПредмета = ИспользуютсяДанныеПредмета(ПравилаЭскалации);
	Если ИспользуютсяДанныеПредмета Тогда
		
		// Временная таблица ПредметыЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ЗадачаИсполнителяПредметы.Ссылка КАК Задача,
			|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
			|	ЗадачаИсполнителяПредметы.ИмяПредмета КАК ИмяПредмета,
			|	ВЫБОР
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.ДокументыПредприятия
			|			ТОГДА ВЫБОР
			|					КОГДА ВЫРАЗИТЬ(ЗадачаИсполнителяПредметы.Предмет КАК Справочник.ДокументыПредприятия).ВидДокумента.ЯвляетсяВходящейКорреспонденцией
			|						ТОГДА 14
			|					КОГДА ВЫРАЗИТЬ(ЗадачаИсполнителяПредметы.Предмет КАК Справочник.ДокументыПредприятия).ВидДокумента.ЯвляетсяИсходящейКорреспонденцией
			|						ТОГДА 13
			|					ИНАЧЕ 15
			|				КОНЕЦ
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.Мероприятия
			|			ТОГДА 12
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.ПротоколыМероприятий
			|			ТОГДА 11
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.Проекты
			|			ТОГДА 10
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.ПроектныеЗадачи
			|			ТОГДА 9
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.Контрагенты
			|			ТОГДА 8
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.Файлы
			|			ТОГДА 7
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Документ.ВходящееПисьмо
			|			ТОГДА 6
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Документ.ИсходящееПисьмо
			|			ТОГДА 5
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.ТемыОбсуждений
			|			ТОГДА 4
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.СообщенияОбсуждений
			|			ТОГДА 3
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Документ.Бронь
			|			ТОГДА 2
			|		КОГДА ЗадачаИсполнителяПредметы.Предмет ССЫЛКА Справочник.УведомленияПрограммы
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Приоритет,
			|	ЗадачаИсполнителяПредметы.НомерСтроки КАК НомерСтроки
			|ПОМЕСТИТЬ ПредметыЗадач
			|ИЗ
			|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗадач КАК ДанныеЗадач
			|		ПО ЗадачаИсполнителяПредметы.Ссылка = ДанныеЗадач.Ссылка
			|ГДЕ
			|	ЗадачаИсполнителяПредметы.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)");
		
		// Временная таблица ОсновныеПредметыЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ПредметыЗадач.Задача КАК Задача,
			|	ПредметыЗадач.Предмет КАК Предмет,
			|	ПредметыЗадач.ИмяПредмета КАК ИмяПредмета
			|ПОМЕСТИТЬ ДанныеОсновногоПредмета
			|ИЗ
			|	ПредметыЗадач КАК ПредметыЗадач
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПредметыЗадач КАК ПредметыЗадач1
			|		ПО ПредметыЗадач.Задача = ПредметыЗадач1.Задача
			|			И (ПредметыЗадач.Приоритет < ПредметыЗадач1.Приоритет
			|				ИЛИ ПредметыЗадач.Приоритет = ПредметыЗадач1.Приоритет
			|					И ПредметыЗадач.НомерСтроки > ПредметыЗадач1.НомерСтроки)
			|ГДЕ
			|	ПредметыЗадач1.Задача ЕСТЬ NULL");
		
	КонецЕсли;
	
	// Временная таблица ДанныеКомплексногоПроцесса.
	 
	КонструкторТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДанныеЗадач.Ссылка КАК Задача,
		|	КомплексныйПроцессЭтапы.Ссылка КАК КомплексныйПроцесс
		|ПОМЕСТИТЬ ДанныеКомплексногоПроцесса
		|ИЗ
		|	ДанныеЗадач КАК ДанныеЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс.Этапы КАК КомплексныйПроцессЭтапы
		|		ПО ДанныеЗадач.БизнесПроцесс = КомплексныйПроцессЭтапы.ЗапущенныйБизнесПроцесс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеЗадач.Ссылка,
		|	ЗадачиЭлементовСхемы.Ссылка
		|ИЗ
		|	ДанныеЗадач КАК ДанныеЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ДанныеЗадач.БизнесПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс.ЗадачиЭлементовСхемы КАК ЗадачиЭлементовСхемы
		|		ПО ДанныеБизнесПроцессов.ВедущаяЗадача = ЗадачиЭлементовСхемы.ЗадачаПроцесса");
	
	// Добавляем временные таблицы для получения значения АвторЯвляется.
	ЕстьДополнительноеУсловиеАвторЯвляется = 
		ЕстьДополнительноеУсловие(ПравилаЭскалации, Перечисления.УсловияПравилЭскалацииЗадач.АвторЯвляется);
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		
		// Временная таблица АвторыЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеЗадач.Автор КАК Автор
			|ПОМЕСТИТЬ АвторыЗадач
			|ИЗ
			|	ДанныеЗадач КАК ДанныеЗадач
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Автор");
		
		// Временная таблица ДанныеАвторовЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	АвторыЗадач.Автор КАК Автор,
			|	МАКСИМУМ(ВЫБОР
			|		КОГДА НЕ ОтветственныеЛицаОрганизаций.Сотрудник ЕСТЬ NULL
			|			ТОГДА 2
			|		КОГДА НЕ СтруктураПредприятия.Руководитель ЕСТЬ NULL
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ) КАК АвторЯвляется
			|ПОМЕСТИТЬ ДанныеАвторовЗадач
			|ИЗ
			|	АвторыЗадач КАК АвторыЗадач
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизаций
			|		ПО ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительОрганизации)
			|		И АвторыЗадач.Автор = ОтветственныеЛицаОрганизаций.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|		ПО (АвторыЗадач.Автор = СтруктураПредприятия.Руководитель)
			|СГРУППИРОВАТЬ ПО
			|	АвторыЗадач.Автор");
		
	КонецЕсли;
	
	// Результат запроса - реквизиты.
	КонструкторРезультатаЗапроса = Новый Массив;
	КонструкторРезультатаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДанныеЗадач.Ссылка КАК Ссылка,
		|	ДанныеЗадач.Дата КАК Дата,
		|	ДанныеЗадач.Представление КАК Представление,
		|	ДанныеЗадач.СрокИсполнения КАК СрокИсполнения,
		|	0 КАК Срок,
		|	0 КАК Возраст,
		|	ДанныеЗадач.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеЗадач.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ДанныеЗадач.Проект КАК Проект,
		|	ДанныеЗадач.ВажностьЗадачи КАК ВажностьЗадачи,
		|	ДанныеЗадач.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ДанныеЗадач.ШаблонПроцесса КАК ШаблонПроцесса,
		|	ДанныеЗадач.Исполнитель КАК Исполнитель,
		|	ДанныеЗадач.ОбработанноеПравилоЭскалации КАК ОбработанноеПравилоЭскалации,
		|	НЕ ДанныеКомплексногоПроцесса.Задача ЕСТЬ NULL  КАК ВходитВКомплексныйПроцесс");
	
	// Добавляем в результат запроса данные предмета - реквизиты.
	Если ИспользуютсяДанныеПредмета Тогда
		КонструкторРезультатаЗапроса.Добавить(
			",
			|	ДанныеОсновногоПредмета.Предмет КАК ОсновнойПредмет,
			|	ДанныеОсновногоПредмета.ИмяПредмета КАК ИмяОсновногоПредмета");
	КонецЕсли;
	
	// Добавляем в результат запроса АвторЯвляется - реквизит.
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		КонструкторРезультатаЗапроса.Добавить(
			",
			|	ВЫБОР
			|		КОГДА ДанныеАвторовЗадач.АвторЯвляется = 2
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.РуководителемОрганизации)
			|		КОГДА ДанныеАвторовЗадач.АвторЯвляется = 1
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.РуководителемПодразделения)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.НеРуководителем)
			|	КОНЕЦ КАК АвторЯвляется");
	КонецЕсли;
	
	// Результат запроса - источники.
	КонструкторРезультатаЗапроса.Добавить(
		"
		|ИЗ
		|	ДанныеЗадач КАК ДанныеЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеКомплексногоПроцесса КАК ДанныеКомплексногоПроцесса
		|		ПО ДанныеЗадач.Ссылка = ДанныеКомплексногоПроцесса.Задача");
	
	// Добавляем в результат запроса данные предмета - источник.
	Если ИспользуютсяДанныеПредмета Тогда
		КонструкторРезультатаЗапроса.Добавить(
			"
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеОсновногоПредмета КАК ДанныеОсновногоПредмета
			|		ПО ДанныеЗадач.Ссылка = ДанныеОсновногоПредмета.Задача");
	КонецЕсли;
	
	// Добавляем в результат запроса АвторЯвляется - источник.
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		КонструкторРезультатаЗапроса.Добавить(
			"
			|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеАвторовЗадач КАК ДанныеАвторовЗадач
			|		ПО ДанныеЗадач.Автор = ДанныеАвторовЗадач.Автор");
	КонецЕсли;
	
	КонструкторТекстаЗапроса.Добавить(СтрСоединить(КонструкторРезультатаЗапроса, ""));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(КонструкторТекстаЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ЭтотУзелОбмена", ЭтотУзелОбмена);
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	ОтборПоПроцессам = ОтборПоПроцессам(ПравилаЭскалации);
	Запрос.УстановитьПараметр("ОтборПоПроцессам", ОтборПоПроцессам);
	Результат = Запрос.Выполнить();
	АктивныеЗадачи = Результат.Выгрузить();
	
	// Удаляем задачи, не подходящие под отбор по процессам с учетом признака комплексных процессов.
	КоличествоЭлементов = АктивныеЗадачи.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		Строка = АктивныеЗадачи[КоличествоЭлементов - Индекс];
		ОтборПравилаЭскалации = Новый Структура;
		ОтборПравилаЭскалации.Вставить("Шаблон", Строка.ШаблонПроцесса);
		ОтборПравилаЭскалации.Вставить("ТочкаМаршрута", Строка.ТочкаМаршрута);
		Если ЗначениеЗаполнено(Строка.ШаблонПроцесса) Тогда
			ОтборПравилаЭскалации.Вставить("ВходитВКомплексныйПроцесс", Строка.ВходитВКомплексныйПроцесс);
		КонецЕсли;
		Если ОтборПоПроцессам.НайтиСтроки(ОтборПравилаЭскалации).Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		АктивныеЗадачи.Удалить(Строка);
	КонецЦикла;
	
	// Заполняем вычисляемые данные задачи.
	Для Каждого АктивнаяЗадача Из АктивныеЗадачи Цикл
		
		АктивнаяЗадача.Исполнитель = АктивнаяЗадача.Исполнитель;
		
		АктивнаяЗадача.Срок = СрокВСекундах(
			ДатаПроверки,
			АктивнаяЗадача.СрокИсполнения,
			АктивнаяЗадача.Исполнитель);
		АктивнаяЗадача.Возраст = СрокВСекундах(
			АктивнаяЗадача.Дата,
			ДатаПроверки,
			АктивнаяЗадача.Исполнитель);
		Если АктивнаяЗадача.ВходитВКомплексныйПроцесс И Не ЗначениеЗаполнено(АктивнаяЗадача.ШаблонПроцесса) Тогда
			ШаблонЭтапаПроцесса = БизнесПроцессыИЗадачиСервер.ШаблонЭтапаПроцесса(АктивнаяЗадача.БизнесПроцесс);
			Если ШаблонЭтапаПроцесса <> Неопределено Тогда
				АктивнаяЗадача.ШаблонПроцесса = ШаблонЭтапаПроцесса;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если АктивныеЗадачи.Колонки.Найти("ИмяОсновногоПредмета") = Неопределено Тогда
		АктивныеЗадачи.Колонки.Добавить("ИмяОсновногоПредмета", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Возврат АктивныеЗадачи;
	
КонецФункции

// Формирует таблицу активных действий (действие + GUID участника).
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Активные действия.
//
Функция АктивныеДействия(ПравилаЭскалации)
	
	Если ПравилаЭскалации.Количество() = 0 Тогда
		АктивныеЗадачи = Новый ТаблицаЗначений;
		Возврат АктивныеЗадачи;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПроверки = ТекущаяДатаСеанса();
	ЭтотУзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	КонструкторТекстаЗапроса = Новый Массив;
	
	// Временная таблица ОтборПоПроцессам.
	ТекстЗапросаОтборПоПроцессам = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборПоПроцессам.ВидДействия КАК ВидДействия,
		|	ОтборПоПроцессам.ФункцияУчастника КАК ФункцияУчастника
		|ПОМЕСТИТЬ ОтборПоПроцессам
		|ИЗ
		|	&ОтборПоПроцессам КАК ОтборПоПроцессам
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидДействия,
		|	ФункцияУчастника";
	КонструкторТекстаЗапроса.Добавить(ТекстЗапросаОтборПоПроцессам);
	
	// Временная таблица ДанныеЗадач.
	ТекстЗапросаДанныеЗадач = 
		"ВЫБРАТЬ
		|	СостоянияДействий.Действие КАК Действие,
		|	СостоянияДействий.Действие.Предмет КАК Предмет,
		|	СостоянияДействий.Действие.ВидДействия КАК ВидДействия,
		|	СостоянияДействий.Действие.Предмет.Проект КАК Проект,
		|	СостоянияДействий.Действие.Важность КАК Важность,
		|	СостоянияДействий.Действие.Автор КАК Автор,
		|	ДействияОбработкиОбъектов.НастройкаОбработки КАК НастройкаОбработки,
		|	ЭскалированныеДействияСрезПоследних.ПравилоЭскалации КАК ОбработанноеПравилоЭскалации,
		|	СведенияОбУчастникахДействий.ДатаНачала КАК ДатаНачала,
		|	СведенияОбУчастникахДействий.СрокРассчитанный КАК СрокРассчитанный,
		|	СведенияОбУчастникахДействий.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	СостоянияДействий.Участник КАК Исполнитель,
		|	СостоянияДействий.Функция КАК ФункцияУчастника,
		|	СостоянияДействий.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ПОМЕСТИТЬ ДанныеЗадач
		|ИЗ
		|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
		|		ПО СостоянияДействий.Действие = СведенияОбУчастникахДействий.Действие
		|		И СостоянияДействий.ИдентификаторУчастника = СведенияОбУчастникахДействий.ИдентификаторУчастника
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
		|		ПО СостоянияДействий.Действие = ДействияОбработкиОбъектов.Действие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭскалированныеДействия.СрезПоследних КАК ЭскалированныеДействияСрезПоследних
		|		ПО СостоянияДействий.Действие = ЭскалированныеДействияСрезПоследних.Действие
		|		И СостоянияДействий.ИдентификаторУчастника = ЭскалированныеДействияСрезПоследних.ИдентификаторУчастника
		|ГДЕ
		|	СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|   И СостоянияДействий.Действие.ПомещеноВИсторию = ЛОЖЬ
		|   И СостоянияДействий.Действие.ПометкаУдаления = ЛОЖЬ
		|	И СостоянияДействий.Действие.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
		|	И СостоянияДействий.Действие.УзелОбработки = &УзелОбработки";
		
	ТипСроков = ТипСроков(ПравилаЭскалации);
	Если ТипСроков = "СоСроком" Тогда
		ТекстЗапросаДанныеЗадач = ТекстЗапросаДанныеЗадач + "
			|	И СведенияОбУчастникахДействий.СрокРассчитанный <> ДАТАВРЕМЯ(1, 1, 1)";
	ИначеЕсли ТипСроков = "Просроченные" Тогда
		ТекстЗапросаДанныеЗадач = ТекстЗапросаДанныеЗадач + "
			|	И СведенияОбУчастникахДействий.СрокРассчитанный <= &Дата
			|	И СведенияОбУчастникахДействий.СрокРассчитанный <> ДАТАВРЕМЯ(1, 1, 1)";
	КонецЕсли;
	КонструкторТекстаЗапроса.Добавить(ТекстЗапросаДанныеЗадач);
	
	// Добавляем временные таблицы для получения значения АвторЯвляется.
	ЕстьДополнительноеУсловиеАвторЯвляется = 
		ЕстьДополнительноеУсловие(ПравилаЭскалации, Перечисления.УсловияПравилЭскалацииЗадач.АвторЯвляется);
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		
		// Временная таблица АвторыЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеЗадач.Автор КАК Автор
			|ПОМЕСТИТЬ АвторыЗадач
			|ИЗ
			|	ДанныеЗадач КАК ДанныеЗадач
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Автор");
		
		// Временная таблица ДанныеАвторовЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	АвторыЗадач.Автор КАК Автор,
			|	МАКСИМУМ(ВЫБОР
			|		КОГДА НЕ ОтветственныеЛицаОрганизаций.Сотрудник ЕСТЬ NULL
			|			ТОГДА 2
			|		КОГДА НЕ СтруктураПредприятия.Руководитель ЕСТЬ NULL
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ) КАК АвторЯвляется
			|ПОМЕСТИТЬ ДанныеАвторовЗадач
			|ИЗ
			|	АвторыЗадач КАК АвторыЗадач
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизаций
			|		ПО ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительОрганизации)
			|		И АвторыЗадач.Автор = ОтветственныеЛицаОрганизаций.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|		ПО (АвторыЗадач.Автор = СтруктураПредприятия.Руководитель)
			|СГРУППИРОВАТЬ ПО
			|	АвторыЗадач.Автор");
		
	КонецЕсли;
	
	// Результат запроса - реквизиты.
	КонструкторРезультатаЗапроса = Новый Массив;
	КонструкторРезультатаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДанныеЗадач.Действие КАК Действие,
		|	ДанныеЗадач.ВидДействия КАК ВидДействия,
		|	ДанныеЗадач.ФункцияУчастника КАК ФункцияУчастника,
		|	ДанныеЗадач.Действие КАК Ссылка,
		|	ДанныеЗадач.ДатаНачала КАК Дата,
		|	ДанныеЗадач.Предмет КАК Представление,
		|	ДанныеЗадач.Предмет КАК ОсновнойПредмет,
		|	ДанныеЗадач.СрокРассчитанный КАК СрокИсполнения,
		|	ДанныеЗадач.НастройкаОбработки КАК НастройкаОбработки,
		|	0 КАК Срок,
		|	0 КАК Возраст,
		|	ДанныеЗадач.Проект КАК Проект,
		|	ДанныеЗадач.Важность КАК ВажностьЗадачи,
		|	ВЫБОР
		|		КОГДА ДанныеЗадач.ФактическийИсполнитель = ЗНАЧЕНИЕ(Справочник.ФактическиеИсполнители.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПринятаКИсполнению,
		|	ДанныеЗадач.Исполнитель КАК Исполнитель,
		|	ДанныеЗадач.Исполнитель КАК ТекущийИсполнитель,
		|	ДанныеЗадач.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	ДанныеЗадач.ОбработанноеПравилоЭскалации КАК ОбработанноеПравилоЭскалации");
	
	// Добавляем в результат запроса АвторЯвляется - реквизит.
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		КонструкторРезультатаЗапроса.Добавить(
			",
			|	ВЫБОР
			|		КОГДА ДанныеАвторовЗадач.АвторЯвляется = 2
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.РуководителемОрганизации)
			|		КОГДА ДанныеАвторовЗадач.АвторЯвляется = 1
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.РуководителемПодразделения)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.НеРуководителем)
			|	КОНЕЦ КАК АвторЯвляется");
	КонецЕсли;
	
	// Результат запроса - источники.
	КонструкторРезультатаЗапроса.Добавить(
		"
		|ИЗ
		|	ДанныеЗадач КАК ДанныеЗадач");
	
	// Добавляем в результат запроса АвторЯвляется - источник.
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		КонструкторРезультатаЗапроса.Добавить(
			"
			|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеАвторовЗадач КАК ДанныеАвторовЗадач
			|		ПО ДанныеЗадач.Автор = ДанныеАвторовЗадач.Автор");
	КонецЕсли;
	
	КонструкторТекстаЗапроса.Добавить(СтрСоединить(КонструкторРезультатаЗапроса, ""));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(КонструкторТекстаЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	
	Запрос.УстановитьПараметр("УзелОбработки", ЭтотУзелОбмена);
	
	ОтборПоПроцессам = ОтборПоДействиям(ПравилаЭскалации);
	Запрос.УстановитьПараметр("ОтборПоПроцессам", ОтборПоПроцессам);
	Результат = Запрос.Выполнить();
	АктивныеЗадачи = Результат.Выгрузить();
	
	АктивныеЗадачи.Колонки.Добавить("БизнесПроцесс");
	АктивныеЗадачи.Колонки.Добавить("ТочкаМаршрута");
	
	// Заполняем вычисляемые данные задачи.
	Для Каждого АктивнаяЗадача Из АктивныеЗадачи Цикл
		
		АктивнаяЗадача.Срок = СрокВСекундах(
			ДатаПроверки,
			АктивнаяЗадача.СрокИсполнения,
			АктивнаяЗадача.Исполнитель);
		АктивнаяЗадача.Возраст = СрокВСекундах(
			АктивнаяЗадача.Дата,
			ДатаПроверки,
			АктивнаяЗадача.Исполнитель);
	КонецЦикла;
	
	Возврат АктивныеЗадачи;
	
КонецФункции

// Формирует таблицу активных действий (действие + GUID участника).
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Активные действия.
//
Функция АктивныеДействияОзнакомления(ПравилаЭскалации)
	
	Если ПравилаЭскалации.Количество() = 0 Тогда
		АктивныеЗадачи = Новый ТаблицаЗначений;
		Возврат АктивныеЗадачи;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПроверки = ТекущаяДатаСеанса();
	ЭтотУзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	КонструкторТекстаЗапроса = Новый Массив;
	
	// Временная таблица ОтборПоПроцессам.
	ТекстЗапросаОтборПоПроцессам = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборПоПроцессам.ВидДействия КАК ВидДействия,
		|	ОтборПоПроцессам.ФункцияУчастника КАК ФункцияУчастника
		|ПОМЕСТИТЬ ОтборПоПроцессам
		|ИЗ
		|	&ОтборПоПроцессам КАК ОтборПоПроцессам
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидДействия,
		|	ФункцияУчастника";
	КонструкторТекстаЗапроса.Добавить(ТекстЗапросаОтборПоПроцессам);
	
	// Временная таблица ДанныеЗадач.
	ТекстЗапросаДанныеЗадач = 
		"ВЫБРАТЬ
		|	УчастникиОзнакомлений.Действие КАК Действие,
		|	УчастникиОзнакомлений.Действие.Предмет КАК Предмет,
		|	УчастникиОзнакомлений.Действие.ВидДействия КАК ВидДействия,
		|	УчастникиОзнакомлений.Действие.Предмет.Проект КАК Проект,
		|	УчастникиОзнакомлений.Действие.Важность КАК Важность,
		|	УчастникиОзнакомлений.Действие.Автор КАК Автор,
		|	ДействияОбработкиОбъектов.НастройкаОбработки КАК НастройкаОбработки,
		|	ЭскалированныеДействияСрезПоследних.ПравилоЭскалации КАК ОбработанноеПравилоЭскалации,
		|	УчастникиОзнакомлений.ДатаНачала КАК ДатаНачала,
		|	УчастникиОзнакомлений.Срок КАК СрокРассчитанный,
		|	УчастникиОзнакомлений.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	УчастникиОзнакомлений.Участник КАК Исполнитель,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковОзнакомления.Ознакомляемый) КАК ФункцияУчастника,
		|	УчастникиОзнакомлений.ИдентификаторУчастникаДействия КАК ИдентификаторУчастникаДействия,
		|	УчастникиОзнакомлений.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ПОМЕСТИТЬ ДанныеЗадач
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
		|		ПО УчастникиОзнакомлений.Действие = ДействияОбработкиОбъектов.Действие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭскалированныеДействия.СрезПоследних КАК ЭскалированныеДействияСрезПоследних
		|		ПО УчастникиОзнакомлений.Действие = ЭскалированныеДействияСрезПоследних.Действие
		|			И УчастникиОзнакомлений.ИдентификаторУчастника = ЭскалированныеДействияСрезПоследних.ИдентификаторУчастника
		|ГДЕ
		|	УчастникиОзнакомлений.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОзнакомления.НаОзнакомлении)
		|	И УчастникиОзнакомлений.Действие.ПомещеноВИсторию = ЛОЖЬ
		|	И УчастникиОзнакомлений.Действие.ПометкаУдаления = ЛОЖЬ
		|	И УчастникиОзнакомлений.Действие.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
		|	И УчастникиОзнакомлений.Действие.УзелОбработки = &УзелОбработки";
		
	ТипСроков = ТипСроков(ПравилаЭскалации);
	Если ТипСроков = "СоСроком" Тогда
		ТекстЗапросаДанныеЗадач = ТекстЗапросаДанныеЗадач + "
			|	И УчастникиОзнакомлений.Срок <> ДАТАВРЕМЯ(1, 1, 1)";
	ИначеЕсли ТипСроков = "Просроченные" Тогда
		ТекстЗапросаДанныеЗадач = ТекстЗапросаДанныеЗадач + "
			|	И УчастникиОзнакомлений.Срок <= &Дата
			|	И УчастникиОзнакомлений.Срок <> ДАТАВРЕМЯ(1, 1, 1)";
	КонецЕсли;
	КонструкторТекстаЗапроса.Добавить(ТекстЗапросаДанныеЗадач);
	
	// Добавляем временные таблицы для получения значения АвторЯвляется.
	ЕстьДополнительноеУсловиеАвторЯвляется = 
		ЕстьДополнительноеУсловие(ПравилаЭскалации, Перечисления.УсловияПравилЭскалацииЗадач.АвторЯвляется);
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		
		// Временная таблица АвторыЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеЗадач.Автор КАК Автор
			|ПОМЕСТИТЬ АвторыЗадач
			|ИЗ
			|	ДанныеЗадач КАК ДанныеЗадач
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Автор");
		
		// Временная таблица ДанныеАвторовЗадач.
		КонструкторТекстаЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	АвторыЗадач.Автор КАК Автор,
			|	МАКСИМУМ(ВЫБОР
			|		КОГДА НЕ ОтветственныеЛицаОрганизаций.Сотрудник ЕСТЬ NULL
			|			ТОГДА 2
			|		КОГДА НЕ СтруктураПредприятия.Руководитель ЕСТЬ NULL
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ) КАК АвторЯвляется
			|ПОМЕСТИТЬ ДанныеАвторовЗадач
			|ИЗ
			|	АвторыЗадач КАК АвторыЗадач
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизаций
			|		ПО ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительОрганизации)
			|		И АвторыЗадач.Автор = ОтветственныеЛицаОрганизаций.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|		ПО (АвторыЗадач.Автор = СтруктураПредприятия.Руководитель)
			|СГРУППИРОВАТЬ ПО
			|	АвторыЗадач.Автор");
		
	КонецЕсли;
	
	// Результат запроса - реквизиты.
	КонструкторРезультатаЗапроса = Новый Массив;
	КонструкторРезультатаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДанныеЗадач.Действие КАК Действие,
		|	ДанныеЗадач.ВидДействия КАК ВидДействия,
		|	ДанныеЗадач.ФункцияУчастника КАК ФункцияУчастника,
		|	ДанныеЗадач.Действие КАК Ссылка,
		|	ДанныеЗадач.ДатаНачала КАК Дата,
		|	ДанныеЗадач.Предмет КАК Представление,
		|	ДанныеЗадач.Предмет КАК ОсновнойПредмет,
		|	ДанныеЗадач.СрокРассчитанный КАК СрокИсполнения,
		|	ДанныеЗадач.НастройкаОбработки КАК НастройкаОбработки,
		|	0 КАК Срок,
		|	0 КАК Возраст,
		|	ДанныеЗадач.Проект КАК Проект,
		|	ДанныеЗадач.Важность КАК ВажностьЗадачи,
		|	ВЫБОР
		|		КОГДА ДанныеЗадач.ФактическийИсполнитель = ЗНАЧЕНИЕ(Справочник.ФактическиеИсполнители.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПринятаКИсполнению,
		|	ДанныеЗадач.Исполнитель КАК Исполнитель,
		|	ДанныеЗадач.Исполнитель КАК ТекущийИсполнитель,
		|	ДанныеЗадач.ИдентификаторУчастника КАК ИдентификаторУчастника, 
		|	ДанныеЗадач.ИдентификаторУчастникаДействия КАК ИдентификаторУчастникаДействия, 
		|	ДанныеЗадач.ОбработанноеПравилоЭскалации КАК ОбработанноеПравилоЭскалации");
	
	// Добавляем в результат запроса АвторЯвляется - реквизит.
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		КонструкторРезультатаЗапроса.Добавить(
			",
			|	ВЫБОР
			|		КОГДА ДанныеАвторовЗадач.АвторЯвляется = 2
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.РуководителемОрганизации)
			|		КОГДА ДанныеАвторовЗадач.АвторЯвляется = 1
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.РуководителемПодразделения)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыАвторЯвляетсяПравилЭскалацииЗадач.НеРуководителем)
			|	КОНЕЦ КАК АвторЯвляется");
	КонецЕсли;
	
	// Результат запроса - источники.
	КонструкторРезультатаЗапроса.Добавить(
		"
		|ИЗ
		|	ДанныеЗадач КАК ДанныеЗадач");
	
	// Добавляем в результат запроса АвторЯвляется - источник.
	Если ЕстьДополнительноеУсловиеАвторЯвляется Тогда
		КонструкторРезультатаЗапроса.Добавить(
			"
			|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеАвторовЗадач КАК ДанныеАвторовЗадач
			|		ПО ДанныеЗадач.Автор = ДанныеАвторовЗадач.Автор");
	КонецЕсли;
	
	КонструкторТекстаЗапроса.Добавить(СтрСоединить(КонструкторРезультатаЗапроса, ""));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(КонструкторТекстаЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	
	Запрос.УстановитьПараметр("УзелОбработки", ЭтотУзелОбмена);
	
	ОтборПоПроцессам = ОтборПоДействиям(ПравилаЭскалации);
	Запрос.УстановитьПараметр("ОтборПоПроцессам", ОтборПоПроцессам);
	Результат = Запрос.Выполнить();
	АктивныеЗадачи = Результат.Выгрузить();
	
	АктивныеЗадачи.Колонки.Добавить("БизнесПроцесс");
	АктивныеЗадачи.Колонки.Добавить("ТочкаМаршрута");
	
	// Заполняем вычисляемые данные задачи.
	Для Каждого АктивнаяЗадача Из АктивныеЗадачи Цикл
		
		АктивнаяЗадача.Срок = СрокВСекундах(
			ДатаПроверки,
			АктивнаяЗадача.СрокИсполнения,
			АктивнаяЗадача.Исполнитель);
		АктивнаяЗадача.Возраст = СрокВСекундах(
			АктивнаяЗадача.Дата,
			ДатаПроверки,
			АктивнаяЗадача.Исполнитель);
	КонецЦикла;
	
	Возврат АктивныеЗадачи;
	
КонецФункции

// Формирует строку для события журнала регистрации.
//
// Возвращаемое значение:
//  Строка - Событие журнала регистрации.
//
Функция СобытиеЖурналаРегистрации()
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Эскалация задач'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

// Применяет правило эскалации для задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
Функция ПрименитьПравилоЭскалацииЗадачПроцессов(Задача, ПравилоЭскалации)
	
	// Если правило эскалации было применено к задаче последним - не применяем его снова.
	Если Задача.ОбработанноеПравилоЭскалации = ПравилоЭскалации.Ссылка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ИнформацияОбЭскалации = ИнформацияОбЭскалации();
		Если Не ЭскалацияЗадачПереопределяемый.ПрименитьПравилоЭскалации(Задача, ПравилоЭскалации, ИнформацияОбЭскалации) Тогда
			
			Если ПравилоЭскалации.Действие = Перечисления.ДействияПравилЭскалацииЗадач.Перенаправление Тогда
				
				НаправлениеЭскалации = ПравилоЭскалации.НаправлениеЭскалации;
				
				ТипНаправленияЭскалации = ТипЗнч(НаправлениеЭскалации);
				Если ТипНаправленияЭскалации = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов")
					Или ТипНаправленияЭскалации = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов") Тогда
					ЗначениеАвтоподстановки = ПолучитьЗначениеАвтоподстановки(
						НаправлениеЭскалации,
						Задача.БизнесПроцесс,
						Задача.ОсновнойПредмет,
						Задача.Ссылка,
						Задача);
					ТипЗначенияАвтоподстановки = ТипЗнч(ЗначениеАвтоподстановки);
					Если ТипЗначенияАвтоподстановки = Тип("СправочникСсылка.Пользователи") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки;
					ИначеЕсли ТипЗначенияАвтоподстановки = Тип("СправочникСсылка.Сотрудники") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки;
					ИначеЕсли ТипЗначенияАвтоподстановки = Тип("СправочникСсылка.ПолныеРоли") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки;
					ИначеЕсли ТипЗначенияАвтоподстановки = Тип("Структура") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки.Исполнитель;
					КонецЕсли;
					ТипНаправленияЭскалации = ТипЗнч(НаправлениеЭскалации);
				КонецЕсли;
				
				ИнфоОПеренаправлении = Новый Структура("Автоперенаправление, Исполнитель,
					|РольИсполнителя, Комментарий");
				Если ТипНаправленияЭскалации = Тип("СправочникСсылка.Пользователи") Тогда
					ИнфоОПеренаправлении.Исполнитель = НаправлениеЭскалации;
				ИначеЕсли ТипНаправленияЭскалации = Тип("СправочникСсылка.Сотрудники") Тогда
					ИнфоОПеренаправлении.Исполнитель = НаправлениеЭскалации;
				ИначеЕсли ТипНаправленияЭскалации = Тип("СправочникСсылка.ПолныеРоли") Тогда
					ИнфоОПеренаправлении.РольИсполнителя = НаправлениеЭскалации;
				Иначе
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестное направление эскалации %1 (%2).'"),
						НаправлениеЭскалации,
						ТипНаправленияЭскалации);
				КонецЕсли;
				ИнфоОПеренаправлении.Комментарий = СтрШаблон(
					НСтр("ru = 'Перенаправлено автоматически от %1'"),
					Задача.Исполнитель);
				ИнфоОПеренаправлении.Автоперенаправление = Истина;
				
				ПроверятьФункциональнуюОпцию = Ложь;
				ОтключитьОбновлениеЗадач = Ложь;
				ПроверятьПраваВПривилегированномРежиме = Ложь; // Для эскалации не нужно наличие прав
				ЗадачаПеренаправлена = БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачу(
					Задача.Ссылка,
					ИнфоОПеренаправлении,
					ПроверятьФункциональнуюОпцию,
					ОтключитьОбновлениеЗадач,
					ПроверятьПраваВПривилегированномРежиме);
				Если Не ЗадачаПеренаправлена Тогда
					ТекстОшибки = НСтр("ru = 'Не удалось перенаправить задачу.'");
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				ИнформацияОбЭскалации.Исполнитель = Задача.Исполнитель;
				ИнформацияОбЭскалации.НовыйИсполнитель = НаправлениеЭскалации;
				
			ИначеЕсли ПравилоЭскалации.Действие = Перечисления.ДействияПравилЭскалацииЗадач.АвтоматическоеВыполнение Тогда
				
				Если ЭтоПроцессСКЭП(Задача.БизнесПроцесс) Тогда
					ТекстОшибки = НСтр("ru = 'Задачу с КЭП нельзя выполнить автоматически.'");
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				Комментарий = КомментарийВыполненаАвтоматически(Задача, ПравилоЭскалации.ВариантВыполнения);
				ВыполнениеЗадачСервер.ВыполнитьЗадачуПоПравилуЭскалации(
					Задача.Ссылка, ПравилоЭскалации.ВариантВыполнения, Комментарий);
				
				ИнформацияОбЭскалации.Исполнитель = Задача.Исполнитель;
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректное действие правила эскалации.'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ИнформацияОбЭскалации.Действие = ПравилоЭскалации.Действие;
			
		КонецЕсли;
		
		РегистрыСведений.ЭскалированныеЗадачи.Добавить(Задача.Ссылка, ПравилоЭскалации.Ссылка, ИнформацияОбЭскалации);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Применяет правило эскалации для действия.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
Функция ПрименитьПравилоЭскалацииДействия(Задача, ПравилоЭскалации)
	
	// Если правило эскалации было применено к задаче последним - не применяем его снова.
	Если Задача.ОбработанноеПравилоЭскалации = ПравилоЭскалации.Ссылка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ИнформацияОбЭскалации = ИнформацияОбЭскалацииДействия();
		Если Не ЭскалацияЗадачПереопределяемый.ПрименитьПравилоЭскалации(Задача, ПравилоЭскалации, ИнформацияОбЭскалации) Тогда
			
			Если ПравилоЭскалации.Действие = Перечисления.ДействияПравилЭскалацииЗадач.Перенаправление Тогда
				
				НаправлениеЭскалации = ПравилоЭскалации.НаправлениеЭскалации;
				
				ТипНаправленияЭскалации = ТипЗнч(НаправлениеЭскалации);
				Если ТипНаправленияЭскалации = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов")
					Или ТипНаправленияЭскалации = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов") Тогда
					ЗначениеАвтоподстановки = ПолучитьЗначениеАвтоподстановки(
						НаправлениеЭскалации,
						Задача.БизнесПроцесс,
						Задача.ОсновнойПредмет,
						Задача.Ссылка,
						Задача);
					ТипЗначенияАвтоподстановки = ТипЗнч(ЗначениеАвтоподстановки);
					Если ТипЗначенияАвтоподстановки = Тип("СправочникСсылка.Пользователи") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки;
					ИначеЕсли ТипЗначенияАвтоподстановки = Тип("СправочникСсылка.Сотрудники") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки;
					ИначеЕсли ТипЗначенияАвтоподстановки = Тип("СправочникСсылка.ПолныеРоли") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки;
					ИначеЕсли ТипЗначенияАвтоподстановки = Тип("Структура") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки.Исполнитель;
					КонецЕсли;
					ТипНаправленияЭскалации = ТипЗнч(НаправлениеЭскалации);
				КонецЕсли;
				
				ИнфоОПеренаправлении = Новый Структура("Автоперенаправление, Исполнитель,
					|РольИсполнителя, Комментарий");
				Если ТипНаправленияЭскалации = Тип("СправочникСсылка.Пользователи") Тогда
					ИнфоОПеренаправлении.Исполнитель = НаправлениеЭскалации;
				ИначеЕсли ТипНаправленияЭскалации = Тип("СправочникСсылка.Сотрудники") Тогда
					ИнфоОПеренаправлении.Исполнитель = НаправлениеЭскалации;
				ИначеЕсли ТипНаправленияЭскалации = Тип("СправочникСсылка.ПолныеРоли") Тогда
					ИнфоОПеренаправлении.РольИсполнителя = НаправлениеЭскалации;
				Иначе
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестное направление эскалации %1 (%2).'"),
						НаправлениеЭскалации,
						ТипНаправленияЭскалации);
				КонецЕсли;
				ИнфоОПеренаправлении.Комментарий = СтрШаблон(
					НСтр("ru = 'Перенаправлено автоматически от %1'"),
					Задача.Исполнитель);
				ИнфоОПеренаправлении.Автоперенаправление = Истина;
				
				НачатьТранзакцию();
				
				Попытка
					
					ЗаблокироватьДанныеДляРедактирования(Задача.Действие);
					ДействиеОбъект = Задача.Действие.ПолучитьОбъект();
					
					НовыйУчастник = ИнфоОПеренаправлении.Исполнитель;
					Если ЗначениеЗаполнено(ИнфоОПеренаправлении.РольИсполнителя) Тогда
						НовыйУчастник = ИнфоОПеренаправлении.РольИсполнителя;
					КонецЕсли;	
					
					ДействиеОбъект.ЗаменитьУчастника(
						Задача.ИдентификаторУчастника, НовыйУчастник, ИнфоОПеренаправлении.Комментарий);
					ДействиеОбъект.ДополнительныеСвойства.Вставить("ЭтоПеренаправлениеЗадачи", Истина);
					ДействиеОбъект.Записать();

					РегистрыСведений.СведенияОбУчастникахДействий.ОчиститьФактическийИсполнитель(
						Задача.Действие, Задача.ИдентификаторУчастника);
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение;
				КонецПопытки;
					
				ИнформацияОбЭскалации.Исполнитель = Задача.Исполнитель;
				ИнформацияОбЭскалации.НовыйИсполнитель = НаправлениеЭскалации;
				
			ИначеЕсли ПравилоЭскалации.Действие = Перечисления.ДействияПравилЭскалацииЗадач.АвтоматическоеВыполнение Тогда
				
				// тут надо найти задачу по действию и GUID участника.
				ЗадачаПроцесса = РаботаСПроцессамиПоДействиямВызовСервера.ЗадачаПроцессаПоУчастникуДействия(
					Задача.Действие, Задача.ИдентификаторУчастника);
				
				Если ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
					
					ДанныеЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаПроцесса, 
						"БизнесПроцесс, ТочкаМаршрута");
					Задача.БизнесПроцесс = ДанныеЗадачи.БизнесПроцесс;
					Задача.ТочкаМаршрута = ДанныеЗадачи.ТочкаМаршрута;
					
					Если ЭтоПроцессСКЭП(Задача.БизнесПроцесс) Тогда
						ТекстОшибки = НСтр("ru = 'Задачу с КЭП нельзя выполнить автоматически.'");
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
					
					Комментарий = КомментарийВыполненаАвтоматически(Задача, ПравилоЭскалации.ВариантВыполнения);
					
					НачатьТранзакцию();
				
					Попытка
						
						ФактическийИсполнительПолный = Неопределено;
						ИсполнительПоФакту = Неопределено;

						Если ТипЗнч(Задача.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
							ИсполнительПоФакту = Задача.Исполнитель;
							
						ИначеЕсли ТипЗнч(Задача.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
							 
							 ЕдинственныйИсполнитель = ДействияСервер.ЕдинственныйИсполнительРоли(Задача.Исполнитель);
							 Если ТипЗнч(ЕдинственныйИсполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
							 	ИсполнительПоФакту = ЕдинственныйИсполнитель;
							 КонецЕсли;	
								
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ИсполнительПоФакту) Тогда
							ФактическийИсполнительПолный = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
								Задача.Исполнитель, 
								ИсполнительПоФакту, 
								ИсполнительПоФакту,
								ИсполнительПоФакту);
						КонецЕсли;	
			
						ВыполнениеЗадачСервер.ВыполнитьЗадачуПоПравилуЭскалации(
							ЗадачаПроцесса, ПравилоЭскалации.ВариантВыполнения, Комментарий,
								ФактическийИсполнительПолный);
								
						ЗафиксироватьТранзакцию();
						
					Исключение
						ОтменитьТранзакцию();
						ВызватьИсключение;
					КонецПопытки;
					
					ИнформацияОбЭскалации.Исполнитель = Задача.Исполнитель;
				Иначе
					ВызватьИсключение НСтр("ru = 'Не нашли задачу по действию и ИД участника'");
				КонецЕсли;
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректное действие правила эскалации.'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ИнформацияОбЭскалации.ДействиеЭскалации = ПравилоЭскалации.Действие;
			
		КонецЕсли;
		
		РегистрыСведений.ЭскалированныеДействия.Добавить(
			Задача.Действие, 
			Задача.ИдентификаторУчастника,
			ПравилоЭскалации.Ссылка, 
			ИнформацияОбЭскалации);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Применяет правило эскалации для действия.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
// Возвращаемое значение:
//   Булево - Истина если успешно
Функция ПрименитьПравилоЭскалацииДействияОзнакомления(Задача, ПравилоЭскалации)
	
	// Если правило эскалации было применено к задаче последним - не применяем его снова.
	Если Задача.ОбработанноеПравилоЭскалации = ПравилоЭскалации.Ссылка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// получим действие задачи
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействиеЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.ИдентификаторВИсточнике = &ИдентификаторВИсточнике
		|	И ДействиеЗадачи.Источник = &Источник");
	
	Запрос.УстановитьПараметр("Источник", Задача.Действие);
	Запрос.УстановитьПараметр("ИдентификаторВИсточнике", Задача.ИдентификаторУчастника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДействиеЗадачи = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ВызватьИсключение НСтр("ru = 'Не нашли задачу по действию и ИД участника'");
	КонецЕсли;   
	
	ПодписыватьУЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.Действие, "ПодписыватьУЭП");
	
	НачатьТранзакцию();
	Попытка
		
		ИнформацияОбЭскалации = ИнформацияОбЭскалацииДействия();
		Если Не ЭскалацияЗадачПереопределяемый.ПрименитьПравилоЭскалации(Задача, ПравилоЭскалации, ИнформацияОбЭскалации) Тогда
			
			Если ПравилоЭскалации.Действие = Перечисления.ДействияПравилЭскалацииЗадач.Перенаправление Тогда
				
				НаправлениеЭскалации = ПравилоЭскалации.НаправлениеЭскалации;
				
				ТипНаправленияЭскалации = ТипЗнч(НаправлениеЭскалации);
				Если ТипНаправленияЭскалации = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов")
					Или ТипНаправленияЭскалации = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов") Тогда
					ЗначениеАвтоподстановки = ПолучитьЗначениеАвтоподстановки(
						НаправлениеЭскалации,
						Задача.БизнесПроцесс,
						Задача.ОсновнойПредмет,
						Задача.Ссылка,
						Задача);
					ТипЗначенияАвтоподстановки = ТипЗнч(ЗначениеАвтоподстановки);
					Если ТипЗначенияАвтоподстановки = Тип("СправочникСсылка.Пользователи") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки;
					ИначеЕсли ТипЗначенияАвтоподстановки = Тип("СправочникСсылка.Сотрудники") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки;
					ИначеЕсли ТипЗначенияАвтоподстановки = Тип("СправочникСсылка.ПолныеРоли") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки;
					ИначеЕсли ТипЗначенияАвтоподстановки = Тип("Структура") Тогда
						НаправлениеЭскалации = ЗначениеАвтоподстановки.Исполнитель;
					КонецЕсли;
					ТипНаправленияЭскалации = ТипЗнч(НаправлениеЭскалации);
				КонецЕсли;
				
				ИнфоОПеренаправлении = Новый Структура("Автоперенаправление, Исполнитель,
					|РольИсполнителя, Комментарий");
				Если ТипНаправленияЭскалации = Тип("СправочникСсылка.Пользователи") Тогда
					ИнфоОПеренаправлении.Исполнитель = НаправлениеЭскалации;
				ИначеЕсли ТипНаправленияЭскалации = Тип("СправочникСсылка.Сотрудники") Тогда
					ИнфоОПеренаправлении.Исполнитель = НаправлениеЭскалации;
				ИначеЕсли ТипНаправленияЭскалации = Тип("СправочникСсылка.ПолныеРоли") Тогда
					ИнфоОПеренаправлении.РольИсполнителя = НаправлениеЭскалации;
				Иначе
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестное направление эскалации %1 (%2).'"),
						НаправлениеЭскалации,
						ТипНаправленияЭскалации);
				КонецЕсли;
				ИнфоОПеренаправлении.Комментарий = СтрШаблон(
					НСтр("ru = 'Перенаправлено автоматически от %1'"),
					Задача.Исполнитель);
				ИнфоОПеренаправлении.Автоперенаправление = Истина;
				
				НачатьТранзакцию();
				
				Попытка
					
					ЗаблокироватьДанныеДляРедактирования(Задача.Действие);
					
					НовыйУчастник = ИнфоОПеренаправлении.Исполнитель;
					Если ЗначениеЗаполнено(ИнфоОПеренаправлении.РольИсполнителя) Тогда
						НовыйУчастник = ИнфоОПеренаправлении.РольИсполнителя;
					КонецЕсли;	
					
					// тут меняем действие если явно сотрудник указан в действии. если группа - не надо.
					Если Задача.ИдентификаторУчастникаДействия = Задача.ИдентификаторУчастника Тогда  
						ДействиеОбъект = Задача.Действие.ПолучитьОбъект();
						
						ДействиеОбъект.ЗаменитьУчастника(
							Задача.ИдентификаторУчастника, НовыйУчастник, ИнфоОПеренаправлении.Комментарий);
						ДействиеОбъект.ДополнительныеСвойства.Вставить("ЭтоПеренаправлениеЗадачи", Истина);
						ДействиеОбъект.Записать();
					КонецЕсли;
					
					ЗадачиИлиДействия = Новый Массив;
					ЗадачиИлиДействия.Добавить(ДействиеЗадачи);
					РаботаСЗадачами.Перенаправить(
						ЗадачиИлиДействия,
						Задача.Исполнитель,
						НаправлениеЭскалации,
						ИнфоОПеренаправлении.Комментарий,
						Ложь);
						
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение;
				КонецПопытки;
					
				ИнформацияОбЭскалации.Исполнитель = Задача.Исполнитель;
				ИнформацияОбЭскалации.НовыйИсполнитель = НаправлениеЭскалации;
				
			ИначеЕсли ПравилоЭскалации.Действие = Перечисления.ДействияПравилЭскалацииЗадач.АвтоматическоеВыполнение Тогда

				Если ПодписыватьУЭП Тогда
					ТекстОшибки = НСтр("ru = 'Задачу с УЭП нельзя выполнить автоматически.'");
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				Комментарий = НСтр("ru = 'Ознакомился автоматически'");
				
				НачатьТранзакцию();
			
				Попытка
					
					ФактическийИсполнительПолный = Неопределено;
					ИсполнительПоФакту = Неопределено;

					Если ТипЗнч(Задача.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
						ИсполнительПоФакту = Задача.Исполнитель;
						
					ИначеЕсли ТипЗнч(Задача.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
						 
						 ЕдинственныйИсполнитель = ДействияСервер.ЕдинственныйИсполнительРоли(Задача.Исполнитель);
						 Если ТипЗнч(ЕдинственныйИсполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
						 	ИсполнительПоФакту = ЕдинственныйИсполнитель;
						 КонецЕсли;	
							
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ИсполнительПоФакту) Тогда
						ФактическийИсполнительПолный = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
							Задача.Исполнитель, 
							ИсполнительПоФакту, 
							ИсполнительПоФакту,
							ИсполнительПоФакту);
					КонецЕсли;	
					
					ПараметрыВыполнения =
						РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач();
						
					ВыбранныйФактическийИсполнитель = Новый Структура();
					ВыбранныйФактическийИсполнитель.Вставить("Адресат", ФактическийИсполнительПолный.Адресат);
					ВыбранныйФактическийИсполнитель.Вставить("ЭтоЗамещающий", Ложь); 
					ВыбранныйФактическийИсполнитель.Вставить("Сотрудник", ФактическийИсполнительПолный.Факт);
					
					ПараметрыВыполнения.ВыбранныйФактическийИсполнитель = ВыбранныйФактическийИсполнитель;	
					
					ДействияЗадач = Новый Массив;
					ДействияЗадач.Добавить(ДействиеЗадачи);
					
					РеквизитыДействийЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
						ДействияЗадач,
						"Задача, ВидДействия, Источник, Исполнитель, ВерсияДанных, РезультатДействияТекстом");
					
					ДанныеФактическихИсполнителей = РаботаСЗадачами.ОпределитьФактическихИсполнителей(
						ДействияЗадач,
						ПараметрыВыполнения.ВыполнитьОтИмени,
						ПараметрыВыполнения.ВыбранныйФактическийИсполнитель,
						РеквизитыДействийЗадач);
					
					ПараметрыВыполнения.ФактическиеИсполнителиПолные =
						ДанныеФактическихИсполнителей.ФактическиеИсполнителиПолные;
					ПараметрыВыполнения.ФактическиеИсполнителиПоДействиям =
						ДанныеФактическихИсполнителей.ФактическиеИсполнителиПоДействиям;
					ПараметрыВыполнения.ОснованияФактИсполнителейПоДействиям =
						ДанныеФактическихИсполнителей.ОснованияФактИсполнителейПоДействиям; 
						
					РаботаСЗадачами.СохранитьРезультатДействия(
						ДействиеЗадачи, Комментарий, 
						"", ИсполнительПоФакту, Ложь);
					
					РаботаСЗадачами.ВыполнитьДействиеЗадачи(ДействиеЗадачи, 
						Справочники.РезультатыДействийЗадач.Ознакомился, 
						ИсполнительПоФакту, ПараметрыВыполнения);
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение;
				КонецПопытки;
				
				ИнформацияОбЭскалации.Исполнитель = Задача.Исполнитель;
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректное действие правила эскалации.'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ИнформацияОбЭскалации.ДействиеЭскалации = ПравилоЭскалации.Действие;
			
		КонецЕсли;
		
		РегистрыСведений.ЭскалированныеДействия.Добавить(
			Задача.Действие, 
			Задача.ИдентификаторУчастника,
			ПравилоЭскалации.Ссылка, 
			ИнформацияОбЭскалации);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Находит подходящее для задачи правило эскалаци среди переданных правил.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПравилаЭскалацииЗадач - Правило эскалации подходит для задачи.
//
Функция ПодходящееПравилоЭскалацииЗадачПроцессов(Задача, ПравилаЭскалации)
	
	ПодходящееПравилоЭскалации = Неопределено;
	Для Каждого ПравилоЭскалации Из ПравилаЭскалации Цикл
		Если ПроверитьПравилоЭскалации(Задача, ПравилоЭскалации) Тогда
			ПодходящееПравилоЭскалации = ПравилоЭскалации;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодходящееПравилоЭскалации;
	
КонецФункции

// Находит подходящее для задачи правило эскалаци среди переданных правил.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПравилаЭскалацииЗадач - Правило эскалации подходит для задачи.
//
Функция ПодходящееПравилоЭскалацииДействия(Задача, ПравилаЭскалации)
	
	ПодходящееПравилоЭскалации = Неопределено;
	Для Каждого ПравилоЭскалации Из ПравилаЭскалации Цикл
		Если ПроверитьПравилоЭскалацииДействия(Задача, ПравилоЭскалации) Тогда
			ПодходящееПравилоЭскалации = ПравилоЭскалации;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодходящееПравилоЭскалации;
	
КонецФункции

// Проверяет что правило эскалации подходит для задачи.
// Одинаковые условия соединяются по ИЛИ друг с другом.
// Разные условия соединяются по И с соединенными по ИЛИ одинаковыми условиями.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
// Возвращаемое значение:
//  Булево - Правило эскалации подходит для задачи.
//
Функция ПроверитьПравилоЭскалации(Задача, ПравилоЭскалации)
	
	ПроверитьПравилоЭскалации = ПроверитьСрокПравилаЭскалации(Задача, ПравилоЭскалации)
		И ПроверитьПроцессПравилаЭскалации(Задача, ПравилоЭскалации)
		И ПроверитьДополнительныеУсловияПравилаЭскалации(Задача, ПравилоЭскалации);
	
	Возврат ПроверитьПравилоЭскалации;
	
КонецФункции

// Проверяет что правило эскалации подходит для задачи.
// Одинаковые условия соединяются по ИЛИ друг с другом.
// Разные условия соединяются по И с соединенными по ИЛИ одинаковыми условиями.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
// Возвращаемое значение:
//  Булево - Правило эскалации подходит для задачи.
//
Функция ПроверитьПравилоЭскалацииДействия(Задача, ПравилоЭскалации)
	
	ПроверитьПравилоЭскалации = ПроверитьСрокПравилаЭскалации(Задача, ПравилоЭскалации)
		И ПроверитьДействиеПравилаЭскалации(Задача, ПравилоЭскалации)
		И ПроверитьДополнительныеУсловияПравилаЭскалации(Задача, ПравилоЭскалации);
	
	Возврат ПроверитьПравилоЭскалации;
	
КонецФункции

// Проверяет что срок правила эскалации подходит для задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
// Возвращаемое значение:
//  Булево - Правило эскалации подходит для задачи.
//
Функция ПроверитьСрокПравилаЭскалации(Задача, ПравилоЭскалации)
	
	Если ПравилоЭскалации.ВариантСрока = Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ЗадачаПросрочена Тогда
		ПроверитьПравилоЭскалации = (Задача.Срок < (ПравилоЭскалации.Срок * -1));
	ИначеЕсли ПравилоЭскалации.ВариантСрока = Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ЗадачаБудетПросроченаЧерез Тогда
		ПроверитьПравилоЭскалации = (Задача.Срок < ПравилоЭскалации.Срок);
	ИначеЕсли ПравилоЭскалации.ВариантСрока = Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ВозрастЗадачи Тогда
		ПроверитьПравилоЭскалации = (Задача.Возраст > ПравилоЭскалации.Срок);
	Иначе
		ТекстОшибки = НСтр("ru = 'Неизвестный вариант срока.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ПроверитьПравилоЭскалации;
	
КонецФункции

// Проверяет что условие по процессу правила эскалации подходит для задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
// Возвращаемое значение:
//  Булево - Правило эскалации подходит для задачи.
//
Функция ПроверитьПроцессПравилаЭскалации(Задача, ПравилоЭскалации)
	
	ПроверитьПравилоЭскалации = Истина;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Шаблон", Задача.ШаблонПроцесса);
	ПараметрыОтбора.Вставить("ТочкаМаршрута", Задача.ТочкаМаршрута);
	НайденныеСтроки = ПравилоЭскалации.Процессы.НайтиСтроки(ПараметрыОтбора);
	
	ПроверитьПравилоЭскалации = НайденныеСтроки.Количество() <> 0;
	
	Возврат ПроверитьПравилоЭскалации;
	
КонецФункции

// Проверяет что условие по процессу правила эскалации подходит для задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
// Возвращаемое значение:
//  Булево - Правило эскалации подходит для задачи.
//
Функция ПроверитьДействиеПравилаЭскалации(Задача, ПравилоЭскалации)
	
	// если в правиле эскалации заполнено НастройкаОбработки, то добавляем его в отбор.  
	
	ПроверитьПравилоЭскалации = Истина;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидДействия", Задача.ВидДействия);
	ПараметрыОтбора.Вставить("ФункцияУчастника", Задача.ФункцияУчастника);
	Если ЗначениеЗаполнено(ПравилоЭскалации.НастройкаОбработки) Тогда
		ПараметрыОтбора.Вставить("НастройкаОбработки", Задача.НастройкаОбработки);
	КонецЕсли;	
	
	НайденныеСтроки = ПравилоЭскалации.Обработки.НайтиСтроки(ПараметрыОтбора);
	
	ПроверитьПравилоЭскалации = НайденныеСтроки.Количество() <> 0;
	
	Возврат ПроверитьПравилоЭскалации;
	
КонецФункции

// Проверяет что дополнительное условие по процессу правила эскалации подходит для задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ПравилоЭскалации - СтрокаТаблицыЗначений - Правило эскалации, применяемое к задаче.
//
// Возвращаемое значение:
//  Булево - Правило эскалации подходит для задачи.
//
Функция ПроверитьДополнительныеУсловияПравилаЭскалации(Задача, ПравилоЭскалации)
	
	ПроверитьПравилоЭскалации = Истина;
	
	// Формирование условий.
	Условия = Новый Соответствие;
	Для Каждого Условие Из Перечисления.УсловияПравилЭскалацииЗадач Цикл
		Условия.Вставить(Условие, Новый Массив);
	КонецЦикла;
	Для Каждого УсловиеЭскалации Из ПравилоЭскалации.ДополнительныеУсловия Цикл
		МассивУсловий = Условия[УсловиеЭскалации.Условие];
		МассивУсловий.Добавить(УсловиеЭскалации);
	КонецЦикла;
	
	// Проверка условий.
	Для Каждого КлючИЗначение Из Условия Цикл
		МассивУсловий = КлючИЗначение.Значение;
		Если МассивУсловий.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПодходитУсловие = Ложь;
		Для Каждого УсловиеЭскалации Из МассивУсловий Цикл
			Если ПроверитьУсловиеПравилаЭскалации(Задача, УсловиеЭскалации) Тогда
				ПодходитУсловие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ПодходитУсловие Тогда
			ПроверитьПравилоЭскалации = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроверитьПравилоЭскалации;
	
КонецФункции

// Проверяет что условие эскалации подходит для задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача.
//  УсловиеЭскалации - СтрокаТаблицыЗначений - Условие эскалации.
//
// Возвращаемое значение:
//  Булево - Задача соответствует условию.
//
Функция ПроверитьУсловиеПравилаЭскалации(Задача, УсловиеЭскалации)
	
	ПроверитьУсловиеЭскалации = Ложь;
	Если УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.Проект Тогда
		ПроверитьУсловиеЭскалации = (УсловиеЭскалации.ЗначениеУсловия = Задача.Проект);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.АвторЯвляется Тогда
		ПроверитьУсловиеЭскалации = (УсловиеЭскалации.ЗначениеУсловия = Задача.АвторЯвляется);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.ВажностьЗадачи Тогда
		ПроверитьУсловиеЭскалации = (УсловиеЭскалации.ЗначениеУсловия = Задача.ВажностьЗадачи);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.ИсполнительВходитВРабочуюГруппу Тогда
		СотрудникиВГруппе = РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(
			УсловиеЭскалации.ЗначениеУсловия);
		ПроверитьУсловиеЭскалации = СотрудникиВГруппе.Найти(Задача.Исполнитель) <> Неопределено;
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.ИсполнительВходитВПодразделение Тогда
		СотрудникиВПодразделениях = СотрудникиПовтИсп.СотрудникиВПодразделениях();
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ГруппаСсылка", УсловиеЭскалации.ЗначениеУсловия);
		ПараметрыОтбора.Вставить("СотрудникиСсылка", Задача.Исполнитель);
		НайденныеСтроки = СотрудникиВПодразделениях.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		ПроверитьУсловиеЭскалации = НайденныеСтроки.Количество() <> 0;
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.Исполнитель Тогда
		ПроверитьУсловиеЭскалации = (УсловиеЭскалации.ЗначениеУсловия = Задача.Исполнитель);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.ПринятаКИсполнению Тогда
		ПроверитьУсловиеЭскалации = (УсловиеЭскалации.ЗначениеУсловия = Задача.ПринятаКИсполнению);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.ИсполнительОтсутствует Тогда
		
		ДатаПроверкиОтсутствий = ТекущаяДатаСеанса();
		Исполнители = Новый Массив;
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(Задача.Исполнитель);
		Исполнители.Добавить(ДанныеИсполнителя);
		НастройкиПроверкиОтсутствий = ОтсутствияКлиентСервер.НастройкиПроверкиОтсутствий();
		НастройкиПроверкиОтсутствий.УчитыватьФлагБудуРазбиратьЗадачи = Истина;
		ТаблицаОтсутствий = Отсутствия.ПолучитьТаблицуОтсутствийИсполнителей(
			ДатаПроверкиОтсутствий,
			ДатаПроверкиОтсутствий,
			Исполнители,
			НастройкиПроверкиОтсутствий);
		ИсполнительОтсутствует = ТаблицаОтсутствий.Количество() <> 0;
		ПроверитьУсловиеЭскалации = (УсловиеЭскалации.ЗначениеУсловия = ИсполнительОтсутствует);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.АлгоритмПроверки
		И ЗначениеЗаполнено(Задача.ОсновнойПредмет) Тогда
		
		ПроверитьУсловиеЭскалации = 
			РаботаСАлгоритмамиПроверки.ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(
				Задача.ОсновнойПредмет,
				УсловиеЭскалации.ЗначениеУсловия);
		
	ИначеЕсли УсловиеЭскалации.Условие = Перечисления.УсловияПравилЭскалацииЗадач.Произвольное Тогда
		
		Если ТипЗнч(Задача.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ПроверитьУсловиеЭскалации = 
				Справочники.УсловияЗадач.Проверить(
					Задача.Ссылка,
					УсловиеЭскалации.ЗначениеУсловия);
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат ПроверитьУсловиеЭскалации;
	
КонецФункции

// Возвращает количество правил эскалации по шаблону бизнес-процесса.
//
// Параметры:
//  Шаблон - СправочникСсылка - Шаблон бизнес-процесса.
// 
// Возвращаемое значение:
//  Число - Количество правил эскалации по шаблону бизнес-процесса.
//
Функция КоличествоПравилЭскалацииПоШаблону(Шаблон)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПравилаЭскалацииЗадачПроцессы.Ссылка
		|ИЗ
		|	Справочник.ПравилаЭскалации.Процессы КАК ПравилаЭскалацииЗадачПроцессы
		|ГДЕ
		|	ПравилаЭскалацииЗадачПроцессы.Шаблон = &Шаблон
		|	И ПравилаЭскалацииЗадачПроцессы.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаЭскалацииЗадачПроцессы.Ссылка
		|ИЗ
		|	Справочник.ПравилаЭскалации.Процессы КАК ПравилаЭскалацииЗадачПроцессы
		|ГДЕ
		|	ПравилаЭскалацииЗадачПроцессы.ШаблонКомплексногоПроцесса = &Шаблон
		|	И ПравилаЭскалацииЗадачПроцессы.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Запрос.Параметры.Вставить("Шаблон", Шаблон);
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

// Формирует структуру информации об эскалации
// 
// Возвращаемое значение:
//  Структура - Информация об эскалации.
//
Функция ИнформацияОбЭскалации()
	
	ИнформацияОбЭскалации = Новый Структура;
	ИнформацияОбЭскалации.Вставить("Действие");
	ИнформацияОбЭскалации.Вставить("Комментарий");
	ИнформацияОбЭскалации.Вставить("Исполнитель");
	ИнформацияОбЭскалации.Вставить("НовыйИсполнитель");
	
	Возврат ИнформацияОбЭскалации;
	
КонецФункции

// Формирует структуру информации об эскалации
// 
// Возвращаемое значение:
//  Структура - Информация об эскалации.
//
Функция ИнформацияОбЭскалацииДействия()
	
	ИнформацияОбЭскалации = Новый Структура;
	ИнформацияОбЭскалации.Вставить("ДействиеЭскалации");
	ИнформацияОбЭскалации.Вставить("Комментарий");
	ИнформацияОбЭскалации.Вставить("Исполнитель");
	ИнформацияОбЭскалации.Вставить("НовыйИсполнитель");
	
	Возврат ИнформацияОбЭскалации;
	
КонецФункции

// Рассчитывает срок в секундах.
//
// Параметры:
//  ДатаНачала - Дата - Дата, от которой считается срок.
//  ДатаКонца - Дата - Дата, до которой считается срок.
//  Исполнитель - СправочникСсылка.Сотрудники - Исполнитель, график работы которого используется.
//
// Возвращаемое значение:
//  Число - Срок в секундах.
//
Функция СрокВСекундах(ДатаНачала, ДатаКонца, Исполнитель)
	
	Если Не ЗначениеЗаполнено(ДатаКонца) Тогда
		СрокВСекундах = ДатаНачала - ДатаКонца;
		Возврат СрокВСекундах;
	КонецЕсли;
	
	СрокВСекундах = Неопределено;
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	Если ИспользоватьГрафикиРаботы Тогда
		
		Попытка
			График = СрокиИсполненияПроцессовКОРП.ГрафикРаботыУчастникаПроцесса(Исполнитель);
			СрокВДнях = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
				График.Календарь, ДатаНачала, ДатаКонца);
			Если ДатаКонца < ДатаНачала Тогда
				СрокВДнях = -1 * СрокВДнях;
			КонецЕсли;
			СекундыДатаКонца = ДатаКонца - НачалоДня(ДатаКонца);
			СекундыНачала = ДатаНачала - НачалоДня(ДатаНачала);
			СрокВСекундах = СрокВДнях * 86400 + СекундыДатаКонца - СекундыНачала;
		Исключение
			ТекстПредупреждения =
				НСтр("ru = 'Не удалось получить разность дат по календарю:'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстПредупреждения);
		КонецПопытки;
		
	КонецЕсли;
	
	Если СрокВСекундах = Неопределено Тогда
		СрокВСекундах = ДатаКонца - ДатаНачала;
	КонецЕсли;
	
	Возврат СрокВСекундах;
	
КонецФункции

// Формирует комментарий автоматического выполнения задачи.
//
// Параметры:
//  Задача - СтрокаТаблицыЗначений - Задача, к которой применяется правило эскалации.
//  ВариантВыполнения - Булево - Вариант выполнения
//
// Возвращаемое значение:
//  Строка - Комментарий автоматического выполнения задачи.
//
Функция КомментарийВыполненаАвтоматически(Задача, ВариантВыполнения)
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Задача.БизнесПроцесс);
	Комментарий = МенеджерОбъекта.КомментарийВыполненаАвтоматически(Задача.ТочкаМаршрута, ВариантВыполнения);
	Если Не ЗначениеЗаполнено(Комментарий) Тогда
		Комментарий = НСтр("ru = 'Выполнено автоматически'");
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

// Определяет тип сроков правил эскалации задач.
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  Строка - Тип сроков.
//
Функция ТипСроков(ПравилаЭскалации)
	
	Если ПравилаЭскалации.Найти(
		Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ВозрастЗадачи,
		"ВариантСрока") <> Неопределено Тогда
		
		ТипСроков = "Все";
		
	ИначеЕсли ПравилаЭскалации.Найти(
		Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ЗадачаБудетПросроченаЧерез,
		"ВариантСрока") <> Неопределено Тогда
		
		ТипСроков = "СоСроком";
		
	ИначеЕсли ПравилаЭскалации.Найти(
		Перечисления.ВариантыСрокаПравилЭскалацииЗадач.ЗадачаПросрочена,
		"ВариантСрока") <> Неопределено Тогда
		
		ТипСроков = "Просроченные";
		
	Иначе
		
		ТипСроков = "Просроченные";
		
	Конецесли;
	
	Возврат ТипСроков;
	
КонецФункции

// Определяет отбор активных задач по процессам.
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Отбор по процессам.
//
Функция ОтборПоПроцессам(ПравилаЭскалации)
	
	ОтборПоПроцессам = Новый ТаблицаЗначений;
	ОтборПоПроцессам.Колонки.Добавить("Шаблон", Метаданные.Справочники.ПравилаЭскалации.ТабличныеЧасти.Процессы.Реквизиты.Шаблон.Тип);
	ОтборПоПроцессам.Колонки.Добавить("ТочкаМаршрута", Метаданные.Справочники.ПравилаЭскалации.ТабличныеЧасти.Процессы.Реквизиты.ТочкаМаршрута.Тип);
	ОтборПоПроцессам.Колонки.Добавить("ВходитВКомплексныйПроцесс", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ПравилоЭскалации Из ПравилаЭскалации Цикл
		
		Для Каждого Процесс Из ПравилоЭскалации.Процессы Цикл
			
			ВходитВКомплексныйПроцесс = ЗначениеЗаполнено(Процесс.ШаблонКомплексногоПроцесса);
			ДобавитьОтборПоПроцессам(ОтборПоПроцессам,
				Процесс.Шаблон,
				Процесс.ТочкаМаршрута,
				ВходитВКомплексныйПроцесс);
			Если ВходитВКомплексныйПроцесс Тогда
				ДанныеШаблона = Перечисления.ТипыПроцессовЭскалацииЗадач.ДанныеШаблона(Процесс.ТипПроцесса);
				ДобавитьОтборПоПроцессам(ОтборПоПроцессам,
					ДанныеШаблона.ПустаяСсылка,
					Процесс.ТочкаМаршрута,
					ВходитВКомплексныйПроцесс);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОтборПоПроцессам;
	
КонецФункции

// Добавляет элемент отбора по процессам.
//
// Параметры:
//  ОтборПоПроцессам - ТаблицаЗначений - Отбор по процессам.
//  Шаблон - СправочникСсылка - Шаблон.
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - Точка маршрута.
//  ВходитВКомплексныйПроцесс - Булево - Входит в комплексный процесс.
//
Процедура ДобавитьОтборПоПроцессам(ОтборПоПроцессам, Шаблон, ТочкаМаршрута, ВходитВКомплексныйПроцесс)
	
	ОтборПравилаЭскалации = Новый Структура;
	ОтборПравилаЭскалации.Вставить("Шаблон", Шаблон);
	ОтборПравилаЭскалации.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	ОтборПравилаЭскалации.Вставить("ВходитВКомплексныйПроцесс", ВходитВКомплексныйПроцесс);
	Если ОтборПоПроцессам.НайтиСтроки(ОтборПравилаЭскалации).Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ОтборПоПроцессам.Добавить();
	НоваяСтрока.Шаблон = Шаблон;
	НоваяСтрока.ТочкаМаршрута = ТочкаМаршрута;
	НоваяСтрока.ВходитВКомплексныйПроцесс = ВходитВКомплексныйПроцесс;
	
КонецПроцедуры


// Определяет отбор активных задач по процессам.
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Отбор по процессам.
//
Функция ОтборПоДействиям(ПравилаЭскалации)
	
	ОтборПоПроцессам = Новый ТаблицаЗначений;
	ОтборПоПроцессам.Колонки.Добавить("ВидДействия", 
		Метаданные.Справочники.ПравилаЭскалации.ТабличныеЧасти.Обработки.Реквизиты.ВидДействия.Тип);
	ОтборПоПроцессам.Колонки.Добавить("ФункцияУчастника", 
		Метаданные.Справочники.ПравилаЭскалации.ТабличныеЧасти.Обработки.Реквизиты.ФункцияУчастника.Тип);
	
	Для Каждого ПравилоЭскалации Из ПравилаЭскалации Цикл
		
		Для Каждого Процесс Из ПравилоЭскалации.Обработки Цикл
			
			ДобавитьОтборПоДействиям(ОтборПоПроцессам,
				Процесс.ВидДействия,
				Процесс.ФункцияУчастника);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОтборПоПроцессам;
	
КонецФункции

// Добавляет элемент отбора по процессам.
//
// Параметры:
//  ОтборПоПроцессам - ТаблицаЗначений - Отбор по процессам.
//  Шаблон - СправочникСсылка - Шаблон.
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - Точка маршрута.
//  ВходитВКомплексныйПроцесс - Булево - Входит в комплексный процесс.
//
Процедура ДобавитьОтборПоДействиям(ОтборПоПроцессам, ВидДействия, ФункцияУчастника)
	
	ОтборПравилаЭскалации = Новый Структура;
	ОтборПравилаЭскалации.Вставить("ВидДействия", ВидДействия);
	ОтборПравилаЭскалации.Вставить("ФункцияУчастника", ФункцияУчастника);
	Если ОтборПоПроцессам.НайтиСтроки(ОтборПравилаЭскалации).Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ОтборПоПроцессам.Добавить();
	НоваяСтрока.ВидДействия = ВидДействия;
	НоваяСтрока.ФункцияУчастника = ФункцияУчастника;
	
КонецПроцедуры

// Определяет есть ли дополнительное условие в правилах эскалации задач.
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  Булево - Условие есть в правилах.
//
Функция ЕстьДополнительноеУсловие(ПравилаЭскалации, Условие)
	
	ЕстьДополнительноеУсловие = Ложь;
	Для Каждого ПравилоЭскалации Из ПравилаЭскалации Цикл
		
		Если ПравилоЭскалации.ДополнительныеУсловия.Найти(Условие, "Условие") <> Неопределено Тогда
			ЕстьДополнительноеУсловие = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьДополнительноеУсловие;
	
КонецФункции

// Определяет используются ли данные предмета в правиле эскалации задач.
//
// Параметры:
//  ПравилаЭскалации - ТаблицаЗначений - Правила эскалации.
//
// Возвращаемое значение:
//  Булево - Используются данные предмета.
//
Функция ИспользуютсяДанныеПредмета(ПравилаЭскалации)
	
	ИспользуютсяДанныеПредмета = 
		ЕстьДополнительноеУсловие(ПравилаЭскалации, Перечисления.УсловияПравилЭскалацииЗадач.АлгоритмПроверки);
	Если Не ИспользуютсяДанныеПредмета Тогда
		
		АвтоподстановкиДляОбъектов = Новый Массив;
		Для Каждого ПравилоЭскалации Из ПравилаЭскалации Цикл
			
			Если ПравилоЭскалации.Действие = Перечисления.ДействияПравилЭскалацииЗадач.Перенаправление
				И ЗначениеЗаполнено(ПравилоЭскалации.НаправлениеЭскалации)
				И ТипЗнч(ПравилоЭскалации.НаправлениеЭскалации) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
				АвтоподстановкиДляОбъектов.Добавить(ПравилоЭскалации.НаправлениеЭскалации);
			КонецЕсли;
			
		КонецЦикла;
		
		ТипыОбъектовАвтоподстановок =
			ОбщегоНазначения.ЗначениеРеквизитаОбъектов(АвтоподстановкиДляОбъектов, "ТипОбъекта");
		
		Для Каждого ПравилоЭскалации Из ПравилаЭскалации Цикл
			
			ТипОбъекта = ТипыОбъектовАвтоподстановок[ПравилоЭскалации.НаправлениеЭскалации];
			Если ЗначениеЗаполнено(ТипОбъекта)
				И ТипОбъекта <> Перечисления.ТипыОбъектов.ЗадачиПроцессов Тогда
				ИспользуютсяДанныеПредмета = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИспользуютсяДанныеПредмета;
	
КонецФункции

Функция ЭтоПроцессСКЭП(БизнесПроцесс)
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		ПодписыватьЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "ПодписыватьЭП");
		Если ПодписыватьЭП Тогда 
			Возврат Истина;
		КонецЕсли;	

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		ПодписыватьЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "ПодписыватьЭП");
		Если ПодписыватьЭП Тогда 
			Возврат Истина;
		КонецЕсли;	

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Подписание") Тогда
		
		СпособПодписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "СпособПодписания");
		Если СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.УЭП Тогда 
			Возврат Истина;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

#КонецОбласти