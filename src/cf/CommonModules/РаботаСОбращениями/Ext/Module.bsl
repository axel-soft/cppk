#Область ПрограммныйИнтерфейс

// Заполняет таблицу сопроводительных документов по всем вопросам обращения.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - ссылка на обращение.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - ее колонки такие же, как в форме "Документа предприятия"
//  				  (См. Справочник.ДокументыПредприятия.Форма.ФормаЭлемента.СвязанныеДокументыПоВопросам):
//	* Вопрос - СправочникСсылка.ВопросыОбращений -
//	* ДатаРегистрации - Дата -
//	* ОтветныйДатаРегистрации - Дата -
//	* ОтветныйДокумент - СправочникСсылка.ДокументыПредприятия -
//	* ОтветныйДокументСтрока - Строка -
//	* ОтветныйРегистрационныйНомер - Строка -
//	* РегистрационныйНомер - Строка -
//	* СопроводительныйДокумент - СправочникСсылка.ДокументыПредприятия -
//	* СопроводительныйДокументСтрока - Строка -
Функция ЗаполнитьСвязанныеДокументы(Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Вопрос");
	Таблица.Колонки.Добавить("ДатаРегистрации");
	Таблица.Колонки.Добавить("ОтветныйДатаРегистрации");
	Таблица.Колонки.Добавить("ОтветныйДокумент");
	Таблица.Колонки.Добавить("ОтветныйДокументСтрока");
	Таблица.Колонки.Добавить("ОтветныйРегистрационныйНомер");
	Таблица.Колонки.Добавить("РегистрационныйНомер");
	Таблица.Колонки.Добавить("СопроводительныйДокумент");
	Таблица.Колонки.Добавить("СопроводительныйДокументСтрока");
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Таблица;
	КонецЕсли;
	
	СвязанныеДокументы = СвязиОбъектов.ПолучитьВсеСвязиОбъекта(
		Документ, Ложь);
	Для Каждого СвязанныйДокумент Из СвязанныеДокументы Цикл 
		Если СвязанныйДокумент.ТипСвязи = Справочники.ТипыСвязей.ПереадресованДокументомПоВопросу Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.СопроводительныйДокумент = СвязанныйДокумент.СвязанныйОбъект;
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.СопроводительныйДокумент,
			"РегистрационныйНомер, ДатаРегистрации, Заголовок");
			Если ЗначениеЗаполнено(ДанныеДокумента.РегистрационныйНомер) И ЗначениеЗаполнено(ДанныеДокумента.ДатаРегистрации) Тогда
				НоваяСтрока.СопроводительныйДокументСтрока = СтрШаблон(
					НСтр("ru = '№ %1 от %2'"), ДанныеДокумента.РегистрационныйНомер,
					Формат(ДанныеДокумента.ДатаРегистрации, "ДЛФ=D"));
			Иначе
				НоваяСтрока.СопроводительныйДокументСтрока = ДанныеДокумента.Заголовок;
			КонецЕсли;
			
			НоваяСтрока.ДатаРегистрации = ДанныеДокумента.ДатаРегистрации;
			НоваяСтрока.РегистрационныйНомер = ДанныеДокумента.РегистрационныйНомер;
			
		ИначеЕсли СвязанныйДокумент.ТипСвязи = Справочники.ТипыСвязей.ОтправленОтвет Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ОтветныйДокумент = СвязанныйДокумент.СвязанныйОбъект;
			
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.ОтветныйДокумент,
				"РегистрационныйНомер, ДатаРегистрации, Заголовок");
			Если ЗначениеЗаполнено(ДанныеДокумента.РегистрационныйНомер) И ЗначениеЗаполнено(ДанныеДокумента.ДатаРегистрации) Тогда
				НоваяСтрока.ОтветныйДокументСтрока = СтрШаблон(
					НСтр("ru = '№ %1 от %2'"), ДанныеДокумента.РегистрационныйНомер,
					Формат(ДанныеДокумента.ДатаРегистрации, "ДЛФ=D"));
			Иначе
				НоваяСтрока.ОтветныйДокументСтрока = ДанныеДокумента.Заголовок;
			КонецЕсли;
			
			НоваяСтрока.ОтветныйДатаРегистрации = ДанныеДокумента.ДатаРегистрации;
			НоваяСтрока.ОтветныйРегистрационныйНомер = ДанныеДокумента.РегистрационныйНомер;
		Иначе 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Вопрос = СвязанныйДокумент.ДополнительныйОбъектСвязи;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Обновляет вопросы обращения по реквизитам формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа 
//
Процедура ОбновитьКодВопроса(Форма) Экспорт 
	
	Если Не Форма.НесколькоВопросов Тогда 
		Форма.ВопросыОбращения.Очистить();
		НоваяСтрока = Форма.ВопросыОбращения.Добавить();
		НоваяСтрока.Раздел = Форма.Раздел;
		НоваяСтрока.Вопрос = Форма.Вопрос;
		НоваяСтрока.Тематика = Форма.Тематика;
		НоваяСтрока.Тема = Форма.Тема;
		НоваяСтрока.КодВопроса = Форма.КодВопроса;
		НоваяСтрока.ОрганДляПередачи = Форма.ОрганДляПередачи;
		НоваяСтрока.СопроводительныйДокументСтрока = Форма.СопроводительныйДокументСтрока;
		НоваяСтрока.СопроводительныйДокумент = Форма.СопроводительныйДокумент;
		НоваяСтрока.ОтветныйДокументСтрока = Форма.ОтветныйДокументСтрока;
		НоваяСтрока.ОтветныйДокумент = Форма.ОтветныйДокумент;
		НоваяСтрока.РезультатРассмотрения = Форма.РезультатРассмотрения;
		НоваяСтрока.МнениеАвтораОРезультатах = Форма.МнениеАвтораОРезультатах;
		НоваяСтрока.МнениеАвтораОМерах = Форма.МнениеАвтораОМерах;
		НоваяСтрока.ДатаОтвета = Форма.ДатаОтвета;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ОтветныйДокументСтрока) Тогда 
			НоваяСтрока.Документ = НоваяСтрока.ОтветныйДокументСтрока;
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.СопроводительныйДокументСтрока) Тогда 
			НоваяСтрока.Документ = НоваяСтрока.СопроводительныйДокументСтрока;
		КонецЕсли;
		
		Форма.КоличествоВопросовОбращения = Форма.ВопросыОбращения.Количество();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты формы по вопросам обращения. Происходит после заполнения данных из "Корреспонденции"
//
// Параметры:
//  Форма - см. Справочник.ДокументыПредприятия.Форма.ФормаЭлемента
//
Процедура ЗаполнитьВопросыОбращения(Форма) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
	
	Если Не Форма.РегламентированныйУчетОбращений Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаСвязанныеДокументы = ЗаполнитьСвязанныеДокументы(
		Форма.Объект.Ссылка);
	Для Каждого СтрокаТЗ Из ТаблицаСвязанныеДокументы Цикл
		СтрокаВФорме = Форма.СвязанныеДокументыПоВопросам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВФорме, СтрокаТЗ);
	КонецЦикла;
	
	НомерСтроки = 1;
	Для Каждого Строка Из Форма.ВопросыОбращения Цикл 
		
		СтрокиСопроводительныеДокументы = Форма.СвязанныеДокументыПоВопросам.НайтиСтроки(
			Новый Структура("Вопрос", Строка.Вопрос));
			
		Если СтрокиСопроводительныеДокументы.Количество() > 0 Тогда 
			ЗаполнитьЗначенияСвойств(Строка, СтрокиСопроводительныеДокументы[0]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ОтветныйДокументСтрока) Тогда 
			Строка.Документ = Строка.ОтветныйДокументСтрока;
		ИначеЕсли ЗначениеЗаполнено(Строка.СопроводительныйДокументСтрока) Тогда 
			Строка.Документ = Строка.СопроводительныйДокументСтрока;
		КонецЕсли;
		
		Если НомерСтроки = 1 Тогда 
			Форма.Раздел = Строка.Раздел;
			Форма.Вопрос = Строка.Вопрос;
			Форма.Тематика = Строка.Тематика;
			Форма.Тема = Строка.Тема;
			Форма.ОрганДляПередачи = Строка.ОрганДляПередачи;
			Форма.РезультатРассмотрения = Строка.РезультатРассмотрения;
			
			Форма.СопроводительныйДокумент = Строка.СопроводительныйДокумент;
			Форма.СопроводительныйДокументСтрока = Строка.СопроводительныйДокументСтрока;
			
			Форма.ОтветныйДокумент = Строка.ОтветныйДокумент;
			Форма.ОтветныйДокументСтрока = Строка.ОтветныйДокументСтрока;
			
			Форма.ДатаОтвета = Строка.ДатаОтвета;
			Форма.КодВопроса = Строка.КодВопроса;
			Форма.МнениеАвтораОРезультатах = Строка.МнениеАвтораОРезультатах;
			Форма.МнениеАвтораОМерах = Строка.МнениеАвтораОМерах;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Форма.НесколькоВопросов = Форма.ВопросыОбращения.Количество() > 1;
	Форма.КоличествоВопросовОбращения = Форма.ВопросыОбращения.Количество();
	
	#КонецЕсли
	
КонецПроцедуры

// Устанавливает видимость реквизитов работы с вопросами обращения.
//
// Параметры:
//  Форма - см. Справочник.ДокументыПредприятия.Форма.ФормаЭлемента
//
Процедура УстановитьВидимостьКодовВопросов(Форма) Экспорт 
	
	#Если Не ВнешнееСоединение Тогда
	
	Элементы = Форма.Элементы;
	РегламентированныйУчетОбращений = Форма.РегламентированныйУчетОбращений;
	РезультатРассмотрения = Форма.РезультатРассмотрения;
	
	Элементы.СтраницаВопросы.Видимость = РегламентированныйУчетОбращений;
	
	Если РегламентированныйУчетОбращений Тогда 
		
		Элементы.ГруппаОрганИСопроводительныйДокумент.Видимость = Ложь;
		Элементы.ГруппаОтветныйДокумент.Видимость = Ложь;
		Элементы.ДатаОтвета.Видимость = Ложь;
		Элементы.ГруппаМнениеАвтора.Видимость = Ложь;
		
		Если Форма.НесколькоВопросов Тогда 
			Элементы.ГруппаВопросИРезультаты.Видимость = Ложь;
			Элементы.РезультатРассмотрения.Видимость = Ложь;
			Элементы.ГруппаРезультат.Видимость = Ложь;
			Элементы.ГруппаВопросыСписком.Видимость = Истина;
			Элементы.ГруппаМнениеАвтора.Видимость = Ложь;
		Иначе 
			Элементы.ГруппаВопросИРезультаты.Видимость = Истина;
			Элементы.РезультатРассмотрения.Видимость = Истина;
			Элементы.ГруппаРезультат.Видимость = Истина;
			Элементы.ГруппаВопросыСписком.Видимость = Ложь;
			
			Если РезультатРассмотрения = 
				ПредопределенноеЗначение("Перечисление.РезультатыРассмотренияОбращений.НаправленоВИнойОрган") Тогда 
				Элементы.ГруппаОрганИСопроводительныйДокумент.Видимость = Истина;
				Если Не ЗначениеЗаполнено(Форма.ДатаОтвета) Тогда 
					Форма.ДатаОтвета = ТекущаяДатаСеанса();
				КонецЕсли;
				
			ИначеЕсли РаботаСОбращениямиКлиентСервер.РезультатРассмотренияТребуетОтвета(РезультатРассмотрения) Тогда
				Элементы.ДатаОтвета.Видимость = Истина;
				Элементы.ДатаОтвета.Заголовок = НСтр("ru = 'Дата ответа'");
				Элементы.ГруппаМнениеАвтора.Видимость = Истина;
				
				Если Не ЗначениеЗаполнено(Форма.ДатаОтвета) Тогда 
					Форма.ДатаОтвета = ТекущаяДатаСеанса();
				КонецЕсли;
				
				Элементы.ГруппаОтветныйДокумент.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

// Фиксирует связанные документы по вопросам обращения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа
//  Документ - СправочникСсылка.ДокументыПредприятия - Передается отдельно, т.к. при создании нового документа в
//  														   форме ссылка будет еще не заполнена.
Процедура ЗафиксироватьСвязанныеДокументыПоВопросамОбращения(Форма, Документ) Экспорт 
	
	Если Не Форма.РегламентированныйУчетОбращений Тогда 
		Возврат;
	КонецЕсли;
	
	СвязанныеДокументыПоВопросам = Форма.СвязанныеДокументыПоВопросам;
	Для Каждого СтрВопрос Из СвязанныеДокументыПоВопросам Цикл 
		Если ЗначениеЗаполнено(СтрВопрос.СопроводительныйДокумент) 
			И ЗначениеЗаполнено(СтрВопрос.Вопрос) Тогда 
			СвязиОбъектов.УдалитьСвязь(
				Документ,
				СтрВопрос.СопроводительныйДокумент,
				Справочники.ТипыСвязей.ПереадресованДокументомПоВопросу,
				СтрВопрос.Вопрос);
		ИначеЕсли ЗначениеЗаполнено(СтрВопрос.ОтветныйДокумент) 
			И ЗначениеЗаполнено(СтрВопрос.Вопрос) Тогда 
			СвязиОбъектов.УдалитьСвязь(
				Документ,
				СтрВопрос.ОтветныйДокумент,
				Справочники.ТипыСвязей.ОтправленОтвет,
				СтрВопрос.Вопрос);
		КонецЕсли;
	КонецЦикла;
	
	СвязанныеДокументыПоВопросам.Очистить();
	Для Каждого СтрВопрос Из Форма.ВопросыОбращения Цикл 
		Если ЗначениеЗаполнено(СтрВопрос.СопроводительныйДокумент) Тогда
			СвязиОбъектов.УстановитьСвязь(
				Документ, 
				Неопределено,
				СтрВопрос.СопроводительныйДокумент, 
				Справочники.ТипыСвязей.ПереадресованДокументомПоВопросу,,,,
				СтрВопрос.Вопрос);
			
		ИначеЕсли ЗначениеЗаполнено(СтрВопрос.ОтветныйДокумент) Тогда
			СвязиОбъектов.УстановитьСвязь(
				Документ, 
				Неопределено,
				СтрВопрос.ОтветныйДокумент, 
				Справочники.ТипыСвязей.ОтправленОтвет,,,,
				СтрВопрос.Вопрос);
				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает видимость реквизитов работы с обращением.
//
// Параметры:
//  Форма - см. Справочник.ДокументыПредприятия.Форма.ФормаЭлемента
//  ПеречитатьФлагГотовности - Булево - Надо ли перечитывать флаг "ГотовоКВыгрузкеССТУ"
//
Процедура УстановитьВидимостьПолейУчетаОбращенийГраждан(Форма, ПеречитатьФлагГотовности) Экспорт 
	
	#Если Не ВнешнееСоединение Тогда
	
	Элементы = Форма.Элементы;
	
	Если Форма.ВидДокументаКэш.ЯвляетсяОбращениемОтГраждан Тогда 
		
		Элементы.ГруппаСвязиОбращений.Видимость = Истина;
		Элементы.ПервичноеОбращение.Доступность = Форма.Повторное;
		Элементы.ПервичноеОбращение.АвтоОтметкаНезаполненного = Форма.Повторное;
		Элементы.ПервичноеОбращение.ОтметкаНезаполненного = Форма.Повторное И Не ЗначениеЗаполнено(Форма.ПервичноеОбращение);
		
		Элементы.ОсновноеОбращение.Доступность = Форма.Дубликат;
		Элементы.ОсновноеОбращение.АвтоОтметкаНезаполненного = Форма.Дубликат;
		Элементы.ОсновноеОбращение.ОтметкаНезаполненного = Форма.Дубликат И Не ЗначениеЗаполнено(Форма.ОсновноеОбращение);
		
		Элементы.ВидОбращения.Видимость = Истина;
		Если Форма.ВидОбращения = Перечисления.ВидыОбращенийГраждан.Анонимное Тогда 
			Элементы.Контрагент.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Контрагент.ОтметкаНезаполненного = Ложь;
			Элементы.Контрагент.Доступность = Ложь;
			Элементы.ПодписалОтКонтрагента.Доступность = Ложь;
		КонецЕсли;

		УстановитьВидимостьКодовВопросов(Форма);
		
		Если ПолучитьФункциональнуюОпцию("РегламентированныйУчетОбращений") Тогда
			Элементы.ГруппаВыгрузкаССТУ.Видимость = Истина;
			СостояниеССТУ = Документы.ВыгрузкаВССТУ.СостояниеВыгрузкиССТУДокумента(Форма.Объект.Ссылка);
			Элементы.ДекорацияСостояниеССТУ.Заголовок = СостояниеССТУ.Состояние;
			ЕстьДоступКВыгрузке = ПравоДоступа("Чтение", Метаданные.Документы.ВыгрузкаВССТУ);
			Элементы.ДекорацияСостояниеССТУ.Доступность = ЕстьДоступКВыгрузке; // Декорация кликабельна, запрещаем даже открывать.
			Элементы.ВыгрузитьВССТУ.Доступность = ЕстьДоступКВыгрузке И Форма.ГотовоКВыгрузкеССТУ;
			Если ПеречитатьФлагГотовности Тогда
				ОбщегоНазначенияДокументооборотКлиентСервер.ПрисвоитьОтличающееся(
					Форма.ГотовоКВыгрузкеССТУ, СостояниеССТУ.ГотовоКВыгрузке);
			КонецЕсли;
		Иначе
			Элементы.ГруппаВыгрузкаССТУ.Видимость = Ложь;
			Элементы.ВыгрузитьВССТУ.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Контрагент.АвтоОтметкаНезаполненного = Истина;
		Элементы.Контрагент.Доступность = Истина;
		Элементы.ВидОбращения.Видимость = Ложь;
		Элементы.СтраницаВопросы.Видимость = Ложь;
		Элементы.ВыгрузитьВССТУ.Видимость = Ложь;
		Элементы.ГруппаСвязиОбращений.Видимость = Ложь;
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры	

Процедура ПроверкаЗаполненияФормыНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Форма.Повторное И Не ЗначениеЗаполнено(Форма.ПервичноеОбращение) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не указано первичное обращение'"), , "ПервичноеОбращение", , Отказ);
			
	КонецЕсли;
	
	Если Форма.Дубликат И Не ЗначениеЗаполнено(Форма.ОсновноеОбращение) Тогда
	
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не указано основное обращение'"), , "ОсновноеОбращение", , Отказ);
	
	КонецЕсли;
			
	ВидДокументаКэш = Форма.ВидДокументаКэш;
	Объект = Форма.Объект;
	
	Если Не ВидДокументаКэш.ЯвляетсяОбращениемОтГраждан
		Или Не Форма.РегламентированныйУчетОбращений 
		Или Форма.ВопросыОбращения.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПроверкиНаличияВопросов = ДелопроизводствоСерверПовтИсп.ДатаПроверкиНаличияВопросов();
	
	Если Не ЗначениеЗаполнено(ДатаПроверкиНаличияВопросов)
		Или (ЗначениеЗаполнено(ДатаПроверкиНаличияВопросов) 
			И ЗначениеЗаполнено(Объект.ДатаРегистрации) И Объект.ДатаРегистрации > ДатаПроверкиНаличияВопросов)
		Или (ЗначениеЗаполнено(ДатаПроверкиНаличияВопросов) 
			И Не ЗначениеЗаполнено(Объект.ДатаРегистрации) И Объект.ДатаСоздания > ДатаПроверкиНаличияВопросов) Тогда 
		Если Форма.НесколькоВопросов Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не указано ни одного вопроса обращения'"), , "ВопросыОбращения", "Объект", Отказ);
		Иначе 
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Поле ""Классификация"" не заполнено'"), , "КодВопроса", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Помечает на удаление старые выгрузки ССТУ. По сроку давности, заданному в константе.
// Эти документы просто фиксируют факт выгрузки и нужны как журнал событий. Особой ценности, кроме "Разбора полетов" не
// представляют.
Процедура ПометитьНаУдалениеНеактуальныеВыгрузкиССТУ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокДавности = Константы.ВремяХраненияЖурналаВыгрузокВССТУ.Получить();
	Если СрокДавности = 0 Тогда
		Возврат; // 0 - значит не удалять.
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Выгрузка.Ссылка КАК ВыгрузкаССТУ
		|ИЗ
		|	Документ.ВыгрузкаВССТУ КАК Выгрузка
		|ГДЕ
		|	Дата <= &ДатаОтсечки
		|	И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("ДатаОтсечки", ТекущаяДатаСеанса() - СрокДавности * 86400);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ВыгрузкаОбъект = Выборка.ВыгрузкаССТУ.ПолучитьОбъект();
			ВыгрузкаОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ЗаписьЖурналаРегистрации(
				"Удаление старых выгрузок в ССТУ",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ВыгрузкаВССТУ,
				Выборка.ВыгрузкаССТУ,
				СтрШаблон(
					НСтр("ru = 'Не удалось пометить на удаление документ ""%1""'"),
					Метаданные.Документы.ВыгрузкаВССТУ.Синоним));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти