
#Область ПрограммныйИнтерфейс

// Открывает форму выбора дела
Процедура ВыбратьДело(ЭлементДело, Параметры) Экспорт
	
	ПараметрыФормы = Параметры;
	ПараметрыФормы.Вставить("РежимВыбора", "ИзКарточкиДокумента");
	
	ОткрытьФорму("Справочник.ДелаХраненияДокументов.ФормаВыбора", ПараметрыФормы, ЭлементДело);
	
КонецПроцедуры	

// Открывает форму выбора получателя
Процедура ВыбратьПолучателя(ЭлементПолучатель, РеквизитПолучатель) Экспорт
	
	ПараметрыФормы = Новый Структура("Получатель", РеквизитПолучатель);
	ОткрытьФорму("ОбщаяФорма.ВыборКонтрагентаКонтактноеЛицо", ПараметрыФормы, ЭлементПолучатель);
	
КонецПроцедуры	

// Выполняет проверки перед закрытием документа 
Процедура ПередЗакрытиемДокумента(Объект, Отказ, ФормаДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь;
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("СообщениеВопрос", 		НСтр("ru = 'Закрыть карточку?'"));
	ПараметрыФормы.Вставить("СообщениеЗаголовок", 	НСтр("ru = 'Некоторые файлы заняты вами для редактирования:'"));
	ПараметрыФормы.Вставить("Заголовок", 			Строка(Объект.Ссылка));
	ПараметрыФормы.Вставить("ВладелецФайла", 		Объект.Ссылка);

	ПараметрыФормы.Вставить("ТекущийПользователь", ТекущийПользователь);
	
	ФиксированныйМассивВсеСотрудникиТекущегоПользователя =
		СотрудникиКлиент.ВсеСотрудникиТекущегоПользователя();
	МассивВсеСотрудникиТекущегоПользователя = Новый Массив(
		ФиксированныйМассивВсеСотрудникиТекущегоПользователя);
	СотрудникиТекущегоПользователя = Новый СписокЗначений();
	СотрудникиТекущегоПользователя.ЗагрузитьЗначения(МассивВсеСотрудникиТекущегоПользователя);
	ПараметрыФормы.Вставить("СотрудникиТекущегоПользователя", СотрудникиТекущегоПользователя);
	
	ПараметрыОбработчикаОповещения = Новый Структура;
	ПараметрыОбработчикаОповещения.Вставить("ФормаДокумента", ФормаДокумента);

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеВопросаОЗакрытииФормыДокументаПриЗанятыхФайлах", 
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);
				
	РаботаСФайламиКлиент.ОткрытьДиалогСписокЗанятыхФайлов(ПараметрыФормы, ОписаниеОповещения);
	Если ПараметрыФормы.КоличествоЗанятыхФайлов > 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗавершениеВопросаОЗакрытииФормыДокументаПриЗанятыхФайлах(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Параметры.ФормаДокумента.ЗакрытьФормуПриНаличииЗанятыхФайлов = Истина;
		Параметры.ФормаДокумента.Закрыть();
	Иначе
		Параметры.ФормаДокумента.ЗакрытьФормуПриНаличииЗанятыхФайлов = Ложь;
		Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Параметры.ФормаДокумента.Объект.Ссылка) Тогда
			Параметры.ФормаДокумента.ЗакрытьНезарегистрированныйДокумент = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму предупреждения при регистрации документа
Процедура ПредупредитьПриРегистрации(ОписаниеОповещения, Отказ) Экспорт
	
	ПоказыватьПредупреждениеПриРегистрации = 
		ДелопроизводствоКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСДокументами().ПоказыватьПредупреждениеПриРегистрации;
		
	Если ПоказыватьПредупреждениеПриРегистрации = Истина Тогда  
			
		Отказ = Истина;                        	
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ОписаниеОтветаНаВопрос = Новый ОписаниеОповещения(
			"ПредупредитьПриРегистрацииПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеПриРегистрации",,,,,, 
			ОписаниеОтветаНаВопрос, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПредупредитьПриРегистрацииПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	
КонецПроцедуры

// Открывает форму предупреждения при перерегистрации документа
Функция ПредупредитьПриПеререгистрации(ОписаниеОповещения) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОписаниеОповещенияПриЗакрытииВопроса = Новый ОписаниеОповещения(
		"ПредупредитьПриПеререгистрацииПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ТекстВопроса = НСтр("ru = 'Документ будет перерегистрирован. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещенияПриЗакрытииВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецФункции

Процедура ПредупредитьПриПеререгистрацииПродолжение(Ответ, Параметры) Экспорт
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ответ = КодВозвратаДиалога.Да);	
	
КонецПроцедуры

// Открывает форму записи журнала передачи документа
Процедура ОткрытьКарточкуПередачиДокумента(Документ, ВладелецФормы) Экспорт
	
	Количество = Делопроизводство.КоличествоКомуПереданДокумент(Документ);
	
	Если Количество = 0 Тогда
		Возврат;
	ИначеЕсли Количество = 1 Тогда
		ПараметрыФормы = Новый Структура("ПоказатьДержателяДокумента", Документ);
		ОткрытьФорму("РегистрСведений.ЖурналПередачиДокументов.ФормаЗаписи", ПараметрыФормы, ВладелецФормы);
	Иначе
		ПараметрыФормы = Новый Структура("ПоказатьДержателейДокумента", Документ);
		ОткрытьФорму("РегистрСведений.ЖурналПередачиДокументов.Форма.ФормаСпискаДокумента", ПараметрыФормы, ВладелецФормы);
	КонецЕсли;	
	
КонецПроцедуры	

// Показывает форму вопроса с возможностью сохранения ответа в персональные настройки
// Параметры:
//		ЭлементВладелец - элемент формы, который будет владельцем открываемой формы с вопросом
//		Заголовок вопроса - заголовок для формы вопроса
//		ТекстВопроса - формулировка вопроса
//		КлючПерсональнойНастройкиПоказаВопроса - ключ персональной настройки, хранящей флаг необходимости показа формы
//		ИмяПерсональнойНастройкиПоказаВопроса - имя персональной настройки, хранящей флаг необходимости показа формы
//		СписокДоступныхВариантов - список доступных вариантов ответов на вопрос
//		ВариантОтветаПоУмолчанию - вариант ответа, который будет помечен как вариант ответа по умолчанию
// Возвращает:
//		Значение типа КодВозвратаДиалога
Процедура ПоказатьРасширеннуюФормуВопроса(
	ЭлементВладелец,
	ЗаголовокВопроса,
	ТекстВопроса,
	КлючПерсональнойНастройкиПоказаВопроса,
	ИмяПерсональнойНастройкиПоказаВопроса,
	СписокДоступныхВариантов,
	ВариантОтветаПоУмолчанию = "Да",
	ОписаниеОповещения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокВопроса);
	ПараметрыФормы.Вставить("ТекстВопроса", ТекстВопроса);
	ПараметрыФормы.Вставить("СписокДоступныхВариантов", СписокДоступныхВариантов);
	ПараметрыФормы.Вставить("КлючПерсональнойНастройки", КлючПерсональнойНастройкиПоказаВопроса);
	ПараметрыФормы.Вставить("ИмяПерсональнойНастройки", ИмяПерсональнойНастройкиПоказаВопроса);
	ПараметрыФормы.Вставить("ВариантОтветаПоУмолчанию", ВариантОтветаПоУмолчанию);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ПоказатьРасширеннуюФормуВопросаПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
		
	ПоказыватьФормуВопроса = Делопроизводство.ПолучитьНастройкуПользователя(КлючПерсональнойНастройкиПоказаВопроса,
		ИмяПерсональнойНастройкиПоказаВопроса);
	
	Если ТипЗнч(ПоказыватьФормуВопроса) = Тип("Булево") И НЕ ПоказыватьФормуВопроса Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Неопределено);
	Иначе 
		ОткрытьФорму(
			"ОбщаяФорма.РасширенныйВопрос", 
			ПараметрыФормы, 
			ЭлементВладелец,,,,
			ОписаниеОповещенияОЗакрытии, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьРасширеннуюФормуВопросаПродолжение(Ответ, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ответ) Или Ответ = Ложь Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ответ); 
		Возврат;
	КонецЕсли;
	
	ЗначениеДляВозврата = Неопределено;
	
	Если Ответ = НСтр("ru = 'Да'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Да;
	ИначеЕсли Ответ = НСтр("ru = 'Нет'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Нет;
	ИначеЕсли Ответ = НСтр("ru = 'ОК'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.ОК;
	ИначеЕсли Ответ = НСтр("ru = 'Отмена'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Отмена;
	ИначеЕсли Ответ = НСтр("ru = 'Повторить'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Повторить;
	ИначеЕсли Ответ = НСтр("ru = 'Прервать'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Прервать;
	ИначеЕсли Ответ = НСтр("ru = 'Пропустить'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Пропустить;
	ИначеЕсли Ответ = НСтр("ru = 'Таймаут'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Таймаут;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ЗначениеДляВозврата);
	
КонецПроцедуры

// Копирует файл из временного хранилища на клиента и открывает его для просмотра
//
Процедура ОткрытьФайлИзВременногоХранилища(АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось подключить расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Если ДвоичныеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось получить файл. Возможно он был удален.'"));
		Возврат;
	КонецЕсли;
	
	ПолноеИмяВременногоФайла = ПолучитьПолноеИмяВременногоФайла(ИмяФайла);
	Если ПустаяСтрока(ПолноеИмяВременногоФайла) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось создать временный файл.'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанные.Записать(ПолноеИмяВременногоФайла);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать временный файл.
			|%1'"),
			СообщениеОбОшибке));
		Возврат;
	КонецПопытки;	
	
	ОткрытьФайлНаДиске(ПолноеИмяВременногоФайла, ИмяФайла);
	
КонецПроцедуры

Процедура ОткрытьФайлНаДиске(ПолноеИмяФайла, ИмяФайла) Экспорт
	
	Попытка
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ПолноеИмяФайла);
	Исключение
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось открыть файл %1
				|%2'"),
			ИмяФайла,
			ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Функция РасширениеРаботыСФайламиПодключено()
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не подключено расширение работы с файлами!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;;
	
КонецФункции

Функция ПолучитьПолноеИмяВременногоФайла(ИмяФайла) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат "";
	#Иначе
		Возврат ПолучитьИмяВременногоКаталога() + "\" + ИмяФайла;
	#КонецЕсли
	
КонецФункции

#Если Не ВебКлиент Тогда
Функция ПолучитьИмяВременногоКаталога()
	
	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяВременногоКаталога);
	Возврат ИмяВременногоКаталога;
	
КонецФункции
#КонецЕсли

// Создаёт документ.
//
// Параметры:
//  ПараметрыФормы - Неопределено,
//		Структура
//		(см. РаботаСШаблонамиДокументовКлиент.ДополнительныеПараметрыВыбораШаблонаДокумента) - 
//		Параметры, которые будут переданы в форму выбора шаблона документа
//	ДополнительныеПараметры - Неопределено, Структура - Параметры, которые будут переданы 
//		в форму созданного документа
Процедура СоздатьДокументПредприятия(ПараметрыФормы = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = РаботаСШаблонамиДокументовКлиент.ДополнительныеПараметрыВыбораШаблонаДокумента();
		ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;	

	ОповещениеОЗакрытииФормыСозданиеДокументаПоШаблону = Новый ОписаниеОповещения(
		"СозданиеДокументаПоШаблонуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	РаботаСШаблонамиДокументовКлиент.ПоказатьФормуСозданияДокументаПоШаблону(
			ОповещениеОЗакрытииФормыСозданиеДокументаПоШаблону,
			"ШаблоныДокументов",
			ПараметрыФормы);
	
КонецПроцедуры

// Открывает меню выбора папки и сохраняет файл из временного хранилища в указанную папку
// Возвращает ссылку на файл или Неопределено в случае неуспеха
//
Функция СоздатьФайлИзВременногоХранилища(Форма, АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыОбработчика.Вставить("ИмяФайла", ИмяФайла);
	Обработчик = Новый ОписаниеОповещения("СоздатьФайлИзВременногоХранилищаЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ВыбратьПапку(Обработчик);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура СоздатьФайлИзВременногоХранилищаЗавершение(Папка, ПараметрыВыполнения) Экспорт
	
	Попытка
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		
		ИмяБезРасширения = ПараметрыВыполнения.ИмяФайла;
		Расширение = "";
		МассивСтрок = СтрРазделить(ПараметрыВыполнения.ИмяФайла, ".", Ложь);
		Если МассивСтрок.Количество() >= 2 Тогда
			ИмяБезРасширения = МассивСтрок[0];
			Расширение = МассивСтрок[МассивСтрок.Количество()-1];
		КонецЕсли;	
		
		РазмерФайла = 0;
		#Если Не ВебКлиент Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыВыполнения.АдресВоВременномХранилище);
			РазмерФайла = ДвоичныеДанные.Размер();
		#КонецЕсли	
		
		СведенияОФайле.ВремяИзменения = ТекущаяДата();
		СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
		СведенияОФайле.АдресВременногоХранилищаФайла = ПараметрыВыполнения.АдресВоВременномХранилище;
		СведенияОФайле.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		СведенияОФайле.РасширениеБезТочки = Расширение;
		СведенияОФайле.Размер = РазмерФайла;
		СведенияОФайле.ИмяБезРасширения = ИмяБезРасширения;
		
		Файл = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			Папка,
			СведенияОФайле);
			
		ПоказатьОповещениеПользователя(
			НСтр("ru= 'Создан файл:'"), 
			ПолучитьНавигационнуюСсылку(Файл),
			Строка(Файл),
			БиблиотекаКартинок.Информация32);
			
	Исключение
		Текст = НСтр("ru = 'Не удалось сохранить файл.'") + Символы.ПС + ОписаниеОшибки();
		ПоказатьПредупреждение(, Текст);
	КонецПопытки;		
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Файл);
	КонецЕсли;
	
КонецПроцедуры	

// Открывает меню выбора папки и сохраняет файл из временного хранилища в указанную папку
// Возвращает ссылку на файл или Неопределено в случае неуспеха
//
Функция СоздатьФайлИзВременногоФайлаНаДиске(Форма, ПолноеИмяФайла, ИмяФайла) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ПараметрыОбработчика.Вставить("ИмяФайла", ИмяФайла);
	Обработчик = Новый ОписаниеОповещения("СоздатьФайлИзВременногоФайлаНаДискеЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ВыбратьПапку(Обработчик);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура СоздатьФайлИзВременногоФайлаНаДискеЗавершение(Папка, ПараметрыВыполнения) Экспорт
	
	Попытка
		Файл = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
			ПараметрыВыполнения.ПолноеИмяФайла,
			Папка,
			ПараметрыВыполнения.Форма,
			Ложь, //НеОткрыватьКарточкуПослеСозданияИзФайла
			ПараметрыВыполнения.ИмяФайла);
		
	Исключение
		Текст = НСтр("ru = 'Не удалось сохранить файл.'") + Символы.ПС + ОписаниеОшибки();
		ПоказатьПредупреждение(, Текст);
	КонецПопытки;		
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Файл);
	КонецЕсли;
	
КонецПроцедуры	

Функция ВыбратьПапку(ОбработчикРезультата)

	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Обработчик = Новый ОписаниеОповещения("ВыбратьПапкуЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		
	ОткрытьФорму("Справочник.ПапкиФайлов.ФормаВыбора",,,,,,Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура ВыбратьПапкуЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Или Результат.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Папка = Результат;
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Папка);
	КонецЕсли;
	
КонецПроцедуры	

Процедура НайтиСтрокуДереваПоСсылке(Ссылка, Дерево, Идентификатор) Экспорт 
	
	Если Идентификатор <> Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Строка.Ссылка = Ссылка Тогда 
			Идентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
		
		НайтиСтрокуДереваПоСсылке(Ссылка, Строка, Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

// Ввести данные регистрации документа.
// 
// Параметры:
//  РегистрационныйНомер - Строка
//   ДатаРегистрации - Дата
//   Заголовок - Строка
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура ВвестиДанныеРегистрации(РегистрационныйНомер = "", ДатаРегистрации = '00010101000000', Заголовок = "",
		ОписаниеОповещения) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения(
		"ВвестиДанныеРегистрацииПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РегистрационныйНомер", РегистрационныйНомер);
	ПараметрыФормы.Вставить("ДатаРегистрации", ДатаРегистрации);
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	
	ОткрытьФорму(
		"ОбщаяФорма.ВводДанныхРегистрации",
		ПараметрыФормы,,,,,
		ОписаниеОповещенияОЗакрытииФормы,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура ВвестиДанныеРегистрацииПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
	
КонецПроцедуры

Процедура ВвестиСтрокуСЗаголовком(Значение, Заголовок = "", Надпись = "", Длина = 0, ОписаниеОповещения) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения(
		"ВвестиСтрокуСЗаголовкомПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Значение", Значение);
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	ПараметрыФормы.Вставить("Надпись", Надпись);
	ПараметрыФормы.Вставить("Длина", Длина);
	
	ОткрытьФорму(
		"ОбщаяФорма.ВводСтрокиСЗаголовком",
		ПараметрыФормы,,,,,
		ОписаниеОповещенияОЗакрытииФормы,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура ВвестиСтрокуСЗаголовкомПродолжение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") И ЗначениеЗаполнено(Результат) Тогда
		
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
	
КонецПроцедуры

// Определить значение параметра по переданной строке 
//
// Параметры
//  Текст				- строка - строка, в которой осуществляется поиск значения
//  ТекстПоиска	 		- строка - строка, для которой ищется значение
//
// Возвращаемое значение:
//   СтрокаКоличество   - строка - строковое представление значения
//
Функция ОпределитьЗначениеПараметраВСтроке(Текст, ТекстПоиска)
	
	СтрокаКоличество = "";
	ДлинаТекстаПоиска = СтрДлина(ТекстПоиска) + 1;
	НачальнаяПозиция = Найти(Текст,ТекстПоиска) + ДлинаТекстаПоиска;
	
	Для НомСимвола = НачальнаяПозиция По СтрДлина(Текст) Цикл
			
		Если Сред(Текст, НомСимвола, 1) = "," Тогда
			Если НачальнаяПозиция = НомСимвола Тогда
				СтрокаКоличество = "0";
			КонецЕсли;	
			Прервать;
		КонецЕсли;
		
		СтрокаКоличество = СтрокаКоличество + Сред(Текст, НомСимвола, 1);
		
	КонецЦикла;
	
	Если ДлинаТекстаПоиска > 0 И Не ЗначениеЗаполнено(СтрокаКоличество) Тогда
		СтрокаКоличество = "0";
	КонецЕсли;	
	
    Возврат СтрокаКоличество;
	
КонецФункции	

// Определяет состав документа по переданной строке
// Параметры:
//		ДокументСсылка  - ФормаКлиентскогоПриложения Входящего, Исходящего или Документа предприятия  - форма документа, для которого определяется состав
//		СоставСтрока    - Строка - строка определения состава
//		НачальныйСостав - Строка - предыдущий вариант состава
//
// Возвращаемое значение:
//   - Структура - структура с составом документа и отказом, в случае ошибки
//
Функция ПолучитьСоставДокумента(ДокументСсылка, СоставСтрока, НачальныйСостав) Экспорт
	
	Если Не ЗначениеЗаполнено(СоставСтрока) Тогда
		ДокументСсылка.КоличествоЛистов = 0;
		ДокументСсылка.КоличествоПриложений = 0;
		ДокументСсылка.КоличествоЭкземпляров = 0;
		ДокументСсылка.ЛистовВПриложениях = 0;	    
		НачальныйСостав = Неопределено;
		Возврат Новый Структура("Отказ, Состав", Ложь, НачальныйСостав);
	КонецЕсли;	
	
	ИтКоличествоЛистов = 0;
	ИтКоличествоПриложений = 0;
	ИтКоличествоЭкземпляров = 0;
	ИтЛистовВПриложениях = 0;

	Текст = НРег(СоставСтрока);	
	Если Найти(Текст, НСтр("ru = 'листов в приложениях'")) > 0 Тогда
		КоличествоЛистовВПриложениях =  ОпределитьЗначениеПараметраВСтроке(Текст, НСтр("ru = 'листов в приложениях'"));		
		
		Попытка
			Количество = Число(КоличествоЛистовВПриложениях);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества листов в приложениях ""%1""'"), КоличествоЛистовВПриложениях));
			СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 
		КонецПопытки;	
			
		ИтЛистовВПриложениях = Количество;
		
		Если Найти(Текст, НСтр("ru = 'листов в приложениях'") + " " + КоличествоЛистовВПриложениях) > 0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов в приложениях'") + " " + КоличествоЛистовВПриложениях, "");
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов в приложениях'"), "");
		КонецЕсли;	

	Иначе
		ИтЛистовВПриложениях = 0;
	КонецЕсли;	
	
	Если Найти(НРег(Текст), НСтр("ru = 'листов'")) > 0 Тогда
		КоличествоЛистов =  ОпределитьЗначениеПараметраВСтроке(Текст,  НСтр("ru = 'листов'"));		
		
		Попытка
			Количество = Число(КоличествоЛистов);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества листов ""%1""'"), КоличествоЛистов));
				СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока);
		КонецПопытки;	
			
		ИтКоличествоЛистов = Количество;
		
		Если Найти(Текст, НСтр("ru = 'листов'") + " " + КоличествоЛистов) > 0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов'") + " " + КоличествоЛистов, "");
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов'"), "");
		КонецЕсли;	
	Иначе
		ИтКоличествоЛистов = 0;	
	КонецЕсли;	
	
	Если Найти(НРег(Текст), НСтр("ru = 'экземпляров'")) > 0 Тогда
		КоличествоЭкземпляров =  ОпределитьЗначениеПараметраВСтроке(Текст,  НСтр("ru = 'экземпляров'"));		
		
		Попытка
			Количество = Число(КоличествоЭкземпляров);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества экземпляров ""%1""'"), КоличествоЭкземпляров));
				СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 
		КонецПопытки;	
			
		ИтКоличествоЭкземпляров = Количество;
		
		Если Найти(Текст, НСтр("ru = 'экземпляров'") + " " + КоличествоЭкземпляров)>0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'экземпляров'") + " " + КоличествоЭкземпляров, "");
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'экземпляров'"), "");
		КонецЕсли;

	Иначе
		ИтКоличествоЭкземпляров = 0;		
	КонецЕсли;	
	
	Если ИтКоличествоЭкземпляров < 1 Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества экземпляров ""%1""'"), ИтКоличествоЭкземпляров));
		СоставСтрока = НачальныйСостав;
		Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 		
    КонецЕсли;

	Если ИтКоличествоЛистов < 1 Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества листов ""%1""'"), ИтКоличествоЛистов));
		СоставСтрока = НачальныйСостав;
		Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 		
	КонецЕсли;
	
	Если Найти(НРег(Текст), НСтр("ru = 'приложений'")) > 0 Тогда
		
		КоличествоПриложений =  ОпределитьЗначениеПараметраВСтроке(Текст,  НСтр("ru = 'приложений'"));		
		
		Попытка
			Количество = Число(КоличествоПриложений);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества приложений ""%1""'"), КоличествоПриложений));
				СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 
		КонецПопытки;	
			
		ИтКоличествоПриложений = Количество;
		
		Если Найти(Текст, НСтр("ru = 'приложений'") + " " + КоличествоПриложений) > 0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'приложений'") + " " + КоличествоПриложений, "");		
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'приложений'"), "");
		КонецЕсли;	
	Иначе
		ИтКоличествоПриложений = 0;	
	КонецЕсли;
	Текст = СтрЗаменить(Текст, ",", "");
	
	Если ЗначениеЗаполнено(СокрЛП(Текст)) Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Введено некорректное значение состава документа ""%1""'"), СокрЛП(Текст)));
				СоставСтрока = НачальныйСостав;
		Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 		
	КонецЕсли;
	
	ДокументСсылка.КоличествоЛистов = ИтКоличествоЛистов;
	ДокументСсылка.КоличествоПриложений = ИтКоличествоПриложений;
	ДокументСсылка.КоличествоЭкземпляров = ИтКоличествоЭкземпляров;
	ДокументСсылка.ЛистовВПриложениях = ИтЛистовВПриложениях;
	СоставСтрока = ДелопроизводствоКлиентСервер.ПолучитьСтрокуСоставДокумента(ДокументСсылка);

	Возврат Новый Структура("Отказ, Состав", Ложь, СоставСтрока);
	
КонецФункции

// Проверяет тип параметра на принадлежность к типу измерения «Документ» регистра сведений «СвязиДокументов»
//
// Параметры
//  ОбъектОснование		- Любая ссылка - объект, на основании которого создается связь
//  СвязуемыйОбъект		- Любая ссылка - объект, который проверяем на возможность создания связи
//
// Возвращаемое значение:
//   Булево - Истина, если объект является одним из проверяемых типов данных
//
Функция ДокументыМожноСвязать(ОбъектОснование, СвязуемыйОбъект) Экспорт
	
	Если ОбъектОснование <> СвязуемыйОбъект
		И (ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ДокументыПредприятия")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ШаблоныДокументов")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.Файлы")) Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции	

// Обновляет данные одного файла в строке списка в карточке документа
//
// Параметры
//    Файлы - ДанныеФормыКоллекция - таблица файлов
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется обновить признак оригинала
//
Процедура ОбновитьСтрокуФайла(Файлы, Файл, ЗаполнитьПризнакОригинал = Ложь, ОтметитьЗахваченныеФайлы = Ложь) Экспорт 
	
	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		
		Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
			Если Строка.Ссылка = Файл Или Строка.ФайлВизуализации = Файл Тогда 
				СтруктураДанных = Делопроизводство.ПолучитьДанныеФайлаДляСписка(
					Строка.Ссылка, ЗаполнитьПризнакОригинал, ОтметитьЗахваченныеФайлы);
				ЗаполнитьЗначенияСвойств(Строка, СтруктураДанных);
				Прервать;
			КонецЕсли;
		Иначе
			
			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				Если Подстрока.Ссылка = Файл Или Подстрока.ФайлВизуализации = Файл Тогда 
					СтруктураДанных = Делопроизводство.ПолучитьДанныеФайлаДляСписка(
						Подстрока.Ссылка, ЗаполнитьПризнакОригинал, ОтметитьЗахваченныеФайлы);
					ЗаполнитьЗначенияСвойств(Подстрока, СтруктураДанных);
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные одного файла в строке списка в карточке документа
//
// Параметры
//    Файлы - ДанныеФормыКоллекция - таблица файлов
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется обновить признак оригинала
//
Процедура ОбновитьСтрокуФайла_ВхИсх(Файлы, Файл, ЗаполнитьПризнакОригинал = Ложь, ОтметитьЗахваченныеФайлы = Ложь) Экспорт 
	
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтруктураДанных = Делопроизводство.ПолучитьДанныеФайлаДляСписка(
				Файл, ЗаполнитьПризнакОригинал, ОтметитьЗахваченныеФайлы);
			ЗаполнитьЗначенияСвойств(Строка, СтруктураДанных);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает нажатие на HTML поле "Обзор" 
//
Процедура ОбработатьНажатиеНаПолеОбзор(Объект, НавигационнаяСсылкаПоля, Параметры) Экспорт 
	
	Если Найти(НавигационнаяСсылкаПоля, "message") > 0 Тогда 	
		
		АдресПочты = СокрЛП(СтрЗаменить(НавигационнаяСсылкаПоля, "message", ""));
		
		Если Параметры.Свойство("ЭтоСписок") И Параметры.ЭтоСписок Тогда
			РаботаСПочтовымиСообщениямиКлиент.ОткрытьФормуОтправкиПочтовогоСообщения(, АдресПочты
				,,,,,, Объект);
		Иначе 
			РаботаСПочтовымиСообщениямиКлиент.ОткрытьФормуОтправкиПочтовогоСообщения(, АдресПочты
				,,,,,, Объект.Ссылка);
		КонецЕсли;
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "period") > 0 Тогда 
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИзменитьСрокДействияДокументаПродолжение",
			Параметры.ЭтаФорма);
		Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		
		ИзменитьСрокДействияДокумента(Объект, Параметры);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "status") > 0  Тогда 
		
		ОписаниеОбработатьСтатус = Новый ОписаниеОповещения(
			"ОбработатьСтатус",
			Параметры.ЭтаФорма);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДляПросмотра", Параметры.ЗапретитьРучноеИзменениеСостоянияДокументов);
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект.Ссылка) Тогда
			ПараметрыФормы.Вставить("ИспользоватьПодписание", Параметры.ЭтаФорма.ИспользоватьПодписание);
		КонецЕсли;
		
		ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, Параметры.ЭтаФорма,,,,
			ОписаниеОбработатьСтатус, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "dossier") > 0 Тогда 	
		
		ПараметрыФормы = Новый Структура("Ключ", Объект.Дело);
		ОткрытьФорму("Справочник.ДелаХраненияДокументов.Форма.ФормаЭлемента", ПараметрыФормы, Параметры.ЭтаФорма);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "DossierStatusRecorder") > 0 Тогда 	
		
		СтруктураСостоянияДела = Параметры.ЭтаФорма.СтруктураСостоянияДела;
		Если ТипЗнч(СтруктураСостоянияДела) = Тип("Структура")
			И ЗначениеЗаполнено(СтруктураСостоянияДела.Регистратор) Тогда
			ПоказатьЗначение(, СтруктураСостоянияДела.Регистратор);
		КонецЕсли;
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "DownloadContainer") > 0 Тогда 	
		
		ОбменСАрхивомКлиент.СкачатьКонтейнерДокумента(Параметры.ЭтаФорма.Объект.Ссылка);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "holder") > 0 Тогда 	
		
		ОткрытьКарточкуПередачиДокумента(Объект.Ссылка, Параметры.ЭтаФорма);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "storage") > 0 Тогда 	
		
		ПараметрыФормы = Новый Структура("Ключ", Параметры.МестоХранения);
		ОткрытьФорму("Справочник.МестаХраненияДел.Форма.ФормаЭлемента", ПараметрыФормы, Параметры.ЭтаФорма);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "site") > 0 Тогда 	
		
		АдресСсылки = СокрЛП(СтрЗаменить(НавигационнаяСсылкаПоля, "site", ""));
		УправлениеКонтактнойИнформациейКлиент.ПерейтиПоВебСсылке("", АдресСсылки, 
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница"));
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "contactpersons") > 0 Тогда 	
		
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуКЛ", Объект, Истина);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия);
			
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "room") > 0 Тогда 	
		
		ПараметрыФормы = Новый Структура("Ключ", Объект.Помещение);
		ОткрытьФорму("Справочник.ТерриторииИПомещения.ФормаОбъекта", ПараметрыФормы, Параметры.ЭтаФорма);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "SPARK:NoInformation") > 0 Тогда
		
		СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(Параметры.ЭтаФорма,
			Параметры.Элемент, НавигационнаяСсылкаПоля, Истина);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "DigitalSignature") > 0 Тогда 
		
		Попытка
			Параметры.ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Параметры.ЭтаФорма.Элементы.ГруппаЭП;
		Исключение
		КонецПопытки;
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "Original") > 0 Тогда
		
		Оповестить("ОригиналПолученИзменить", Объект.Ссылка);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "ShowApprovedFileVersions") > 0 Тогда
			
		РаботаСВизамиСогласованияКлиент.ОткрытьВерсииСогласованныхФайловПоСсылке(
			НавигационнаяСсылкаПоля, Параметры.ЭтаФорма);
		
	Иначе
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
		
	КонецЕсли;
	
КонецПроцедуры

//Открывает форму для изменения срока действия документа
//
Процедура ИзменитьСрокДействияДокумента(Объект, Параметры) Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДатаНачалаДействия", Объект.ДатаНачалаДействия);
	ПараметрыФормы.Вставить("ДатаОкончанияДействия", Объект.ДатаОкончанияДействия);
	ПараметрыФормы.Вставить("Бессрочный", Объект.Бессрочный);
	ПараметрыФормы.Вставить("ПорядокПродления", Объект.ПорядокПродления);
	ПараметрыФормы.Вставить("Пользователь", Параметры.ТекущийПользователь);
	ПараметрыФормы.Вставить("ДокументИсточникИзменения", Параметры.СрокДействияДокументИсточникИзменения);
	ПараметрыФормы.Вставить("Комментарий", Параметры.СрокДействияКомментарий);
	
	Если Параметры.Свойство("НеИзменятьСрокДействия") Тогда 
		ПараметрыФормы.Вставить("НеИзменятьСрокДействия", Параметры.НеИзменятьСрокДействия);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ДокументыПредприятия.Форма.ИзменениеСрокаДействия",
		ПараметрыФормы, 
		Параметры.ЭтаФорма,,,,
		Параметры.ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

// Обработчик команды "ПометитьНаУдаление" таблицы Файлы в карточке документа
//
// Параметры
//   Форма                - ФормаКлиентскогоПриложения - форма документа, в котором файлы помечаются на удаление
//   ОбработчикОповещения - ОписаниеОповещения - обработчик, в который необходимо
//     передать массив обрабатываемых файлов.
//   ЭтоСписок            - Булево - Истина, если обращение к функции выполняется из списка документов
//
Процедура ПометитьФайлыДокументаНаУдаление(Форма, ОписаниеОповещения, ЭтоСписок = Ложь) Экспорт
	
	ПометкаУдаления = Ложь; НаименованиеФайла = ""; ПодписанЭП = Ложь;
	МассивФайлов = Новый Массив;
	
	Если ЭтоСписок Тогда 
		Если Форма.ИмяФормы = "РегистрСведений.МоиДокументы.Форма.ФормаМоиДокументы" Тогда 
			ИмяСписка = "ФайлыДокумента";
		Иначе 
			ИмяСписка = "ФайлыДокумента";
		КонецЕсли;
	Иначе
		Попытка
			Если Форма.Элементы.Обзор.Видимость Тогда 
				ИмяСписка = "Файлы";
			Иначе 
				ИмяСписка = "ФайлыСоздание";
			КонецЕсли;
		Исключение
			ИмяСписка = "Файлы";
		КонецПопытки;
	КонецЕсли;
	
	Для Каждого ВыбраннаяСтрока Из Форма.Элементы[ИмяСписка].ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Форма.Элементы[ИмяСписка].ДанныеСтроки(ВыбраннаяСтрока);
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
			НаименованиеФайла = ДанныеСтроки.Наименование;
			
			Если Не ПометкаУдаления Тогда 
				ПометкаУдаления = ДанныеСтроки.ПометкаУдаления;
			КонецЕсли;
			Если Не ПодписанЭП Тогда
				ПодписанЭП = ДанныеСтроки.ПодписанЭП;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоФайлов = МассивФайлов.Количество();
	
	Если КоличествоФайлов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоФайлов > 1 Тогда 
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = НСтр("ru = 'Пометить выделенные файлы на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных файлов пометку на удаление?'");
		КонецЕсли;
	Иначе 
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				НаименованиеФайла);
		Иначе
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
				НаименованиеФайла);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("МассивФайлов", МассивФайлов);
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("ПометкаУдаления", ПометкаУдаления);
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("ПодписанЭП", ПодписанЭП);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Оповещает динамические списки об изменении объекта, в том числе динамические списки 
// регистров ДанныеДокументовПредприятия
//
// Параметры
//    Объект - ссылка документ предприятия - 
//             объект, об изменении которого нужно оповестить
//
Процедура ОповеститьОбИзмененииОбъекта(Объект) Экспорт 
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект) Тогда 	
		Оповестить("Запись_ДокументыПредприятия", Объект);
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДанныеДокументовПредприятия"));
	Иначе
		ОповеститьОбИзменении(Объект);
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает массив имен файлов ("Приказ.doc" - т.е. без полного пути) занятые внешними программами
//
// Параметры
//  Ссылка  - владелец файлов
//  УникальныйИдентификатор - УникальныйИдентификатор формы
//  МассивЗахваченныхФайлов  - массив структур файлов в карточке
//  Расширение - Строка. возвращаемый параметр. 
//		Если файлов более 1 и все с одинаковым расширением - вернет его.
//		Если файл 1 - вернет его расширение. Если 0 файлов - вернет ""
//
Функция ПолучитьЗанятыеВнешнимиПрограммамиФайлы(Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, Расширение = "", МассивЗахваченныхТолькоWordФайлов = Неопределено) Экспорт
	
	МассивФайловВозврата = Новый Массив;
	МассивЗахваченныхТолькоWordФайлов = Новый Массив;
	Расширение = "";
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат МассивФайловВозврата;
	КонецЕсли;
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат МассивФайловВозврата;
	КонецЕсли;
	
	ЗанятыеФайлы = Новый Массив;
	ЗанятыеНеИзмененныеФайлы = Новый Массив;
	ВсеРасширения = Новый Соответствие;
	
	РасширенияФайловДляПроверкиБлокировкиФайлаНаДиске = 
		ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().РасширенияФайловДляПроверкиБлокировкиФайлаНаДиске;
	Если ОбщегоНазначенияКлиент.ЭтоLinuxКлиент() Тогда
		РасширенияФайловДляПроверкиБлокировкиФайлаНаДиске = "";
	КонецЕсли;	
	РасширенияМассив = СтрРазделить(
		РасширенияФайловДляПроверкиБлокировкиФайлаНаДиске, " ", Ложь);
	
	Для Каждого ФайлыСтрока Из МассивЗахваченныхФайлов Цикл
		
		Если Не ФайлыСтрока.РедактируетТекущийПользователь
			Или Не ЗначениеЗаполнено(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РасширенияМассив.Найти(ВРег(ФайлыСтрока.Расширение)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ФайлыСтрока.Вставить("ВладелецФайла", Ссылка);
		МассивЗахваченныхТолькоWordФайлов.Добавить(ФайлыСтрока);
		
		Файл = Новый Файл(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге);
		Если Файл.Существует() Тогда
			
			ИмяРасширение = Файл.Имя;
			Файл = Неопределено;
			
			ПутьКИсходномуФайлу = ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
			
			Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПутьКИсходномуФайлу) Тогда
				
				МассивФайловВозврата.Добавить(ИмяРасширение);
				Расширение = ФайлыСтрока.Расширение;
				ВсеРасширения.Вставить(ФайлыСтрока.Расширение, 1);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВсеРасширения.Количество() >= 2 Тогда
		Расширение = "";
	КонецЕсли;	
	
	Возврат МассивФайловВозврата;
	
КонецФункции

// Получает название программы захвата.
//
// Параметры
//  Расширение - Строка - расширение файла
//  Количество - число - число занятых файлов
//
//  Возвращаемое значение - строка.
Функция ПолучитьНазваниеПрограммыЗахвата(Расширение, Количество) Экспорт
	
	Расширение = НРег(Расширение);
	
	РасширенияOO = СтрРазделить(
		"odt ott odp otp ods ots odc otc odf otf odm oth sdw stw sxw stc sxc sdc sdd sti", " ", Ложь);
	
	Если Расширение = "doc" Или Расширение = "docx" Тогда
		Возврат НСтр("ru = 'Microsoft Word'");
	ИначеЕсли Расширение = "xls" Или Расширение = "xlsx" Тогда
		Возврат НСтр("ru = 'Microsoft Excel'");
	ИначеЕсли Расширение = "ppt" Или Расширение = "pptx" Тогда
		Возврат НСтр("ru = 'Microsoft PowerPoint'");
	ИначеЕсли РасширенияOO.Найти(Расширение) <> Неопределено Тогда
		Возврат НСтр("ru = 'Open Office'");
	КонецЕсли;	
	
	Если Количество > 1 Тогда
		Возврат НСтр("ru = 'внешними программами'");
	Иначе
		Возврат НСтр("ru = 'внешней программой'");
	КонецЕсли;	
	
КонецФункции

// Помещает захваченные файлы в хранилище. Не измененные освобождает.
Процедура ПоместитьИзмененияФайлов(Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, НеОсвобождатьЗанятыеWordФайлы = Ложь,
		СкрыватьОшибки = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат;
	КонецЕсли;	
		
	ЗанятыеНеИзмененныеФайлы = Новый Массив;
	ЗанятыеНеИзмененныеФайлыСтруктуры = Новый Массив;
	
	Для Каждого ФайлыСтрока Из МассивЗахваченныхФайлов Цикл
		Если Не ФайлыСтрока.РедактируетТекущийПользователь Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлИзменен = Ложь;
		
		Попытка
		
			Если ЗначениеЗаполнено(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге) Тогда
				
				Файл = Новый Файл(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге);
				Если Файл.Существует() Тогда
					
					УниверсальноеВремяИзмененияНаДиске = Файл.ПолучитьУниверсальноеВремяИзменения();
					РазмерНаДиске = Файл.Размер();
					Файл = Неопределено;
					
					ПутьКИсходномуФайлу	= ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
					Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПутьКИсходномуФайлу) Тогда
						Продолжить;
					КонецЕсли;
					
					Если УниверсальноеВремяИзмененияНаДиске > ФайлыСтрока.ДатаМодификацииУниверсальнаяВБазе
						Или РазмерНаДиске <> ФайлыСтрока.Размер Тогда
						
						ФайлИзменен = Истина;
						
						ПараметрыВыполнения = Новый Структура;
						ПараметрыВыполнения.Вставить("ОбработчикРезультата", Неопределено);
						ПараметрыВыполнения.Вставить("ПараметрКоманды", ФайлыСтрока.Ссылка);
						
						Обработчик = Новый ОписаниеОповещения("ПоместитьИзмененияВложенийЗавершение", 
							ЭтотОбъект, ПараметрыВыполнения);
						ПараметрыОбработчика = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(
							Обработчик, ФайлыСтрока.Ссылка, УникальныйИдентификатор);
						ПараметрыОбработчика.Вставить("СоздатьНовуюВерсию", Истина);
						ПараметрыОбработчика.Вставить("ХранитьВерсии", Истина);
						ПараметрыОбработчика.Вставить("ПоказыватьОповещение", Ложь);
						Если СкрыватьОшибки = Истина Тогда
							ПараметрыОбработчика.Вставить("СкрыватьОшибки", СкрыватьОшибки);
						КонецЕсли;	
						
						ПутьКИсходномуФайлу	= ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
						
						РаботаСФайламиКлиент.ЗакончитьРедактирование(ПараметрыОбработчика);
						
						Оповестить("Запись_Файл", 
							Новый Структура("Событие, Файл, Владелец, ЕстьЗанятыеФайлы, ИдентификаторРодительскойФормы", 
								"ДанныеФайлаИзменены", 
								ФайлыСтрока.Ссылка, 
								ФайлыСтрока.ВладелецФайла, 
								Неопределено,
								Неопределено),
							ФайлыСтрока.Ссылка);
						ОповеститьОбИзменении(ФайлыСтрока.Ссылка);
							
					КонецЕсли;
					
				КонецЕсли
				
			КонецЕсли;
		
		Исключение
		
			Если СкрыватьОшибки = Ложь Тогда
				ВызватьИсключение;
			КонецЕсли;	
			
		КонецПопытки;
		
		Если Не ФайлИзменен Тогда
			ЗанятыеНеИзмененныеФайлы.Добавить(ФайлыСтрока.Ссылка);
			ЗанятыеНеИзмененныеФайлыСтруктуры.Добавить(ФайлыСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗанятыеНеИзмененныеФайлы.Количество() <> 0 Тогда
		
		РаботаСФайламиКлиент.ОсвободитьФайлыПоСсылкам(
			,
			ЗанятыеНеИзмененныеФайлы, Истина);
			
		Для Каждого ФайлыСтрока Из ЗанятыеНеИзмененныеФайлыСтруктуры Цикл
			
			Оповестить("Запись_Файл", 
				Новый Структура("Событие, Файл, Владелец, ЕстьЗанятыеФайлы, ИдентификаторРодительскойФормы", 
					"ДанныеФайлаИзменены", 
					ФайлыСтрока.Ссылка, 
					ФайлыСтрока.ВладелецФайла, 
					Неопределено,
					Неопределено),
				ФайлыСтрока.Ссылка);
			ОповеститьОбИзменении(ФайлыСтрока.Ссылка);
			
		КонецЦикла;		
			
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОповеститьОбИзмененииОбъекта.
Процедура ПоместитьИзмененияВложенийЗавершение(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	Оповестить("ФайлыПомещены");
	
КонецПроцедуры	

// По имени файла открывает его приложением
//
// Параметры
//  ПолноеИмяФайла -Строка - имя файла, который нужно открыть.
//
Процедура ОткрытьФайлПриложением(ПолноеИмяФайла) Экспорт 
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат;
	КонецЕсли;
	
	// Открыть Файл
	Попытка
		
		СисИнфо = Новый СистемнаяИнформация;
		Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Или СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяОткрываемогоФайла = СтрЗаменить(ПолноеИмяФайла, "/", "\");
		КонецЕсли;
		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ПолноеИмяФайла);
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Описание=""%1""'"),
				Инфо.Описание));
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает массив перетаскиваемых файлов, в котором содержатся только скан-копии оригиналов. 
// Параметры
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - содержит перетаскиваемое значение, тип действия и возможные действия при перетаскивании
//  Состояние               - Строка - строковое представление текущего состояния документа
//  ТекстПредупреждения     - Строка - строковое предупреждения, в случае ошибки или отсутствия файлов оригиналов
//
// Возвращаемое значение
//  ФайлыОригиналы - Массив - массив перетаскиваемых значений.
//
Функция ОтобратьДляПеретаскиванияТолькоФайлыОригиналы(ПараметрыПеретаскивания, Состояние, ТекстПредупреждения) Экспорт 
	
	ФайлыОригиналы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") 
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ПараметрыПеретаскивания.Значение.Расширение) Тогда 
			ФайлыОригиналы.Добавить(ПараметрыПеретаскивания.Значение);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Если ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ПараметрыПеретаскивания.Значение.Расширение) Тогда 
			ФайлыОригиналы.Добавить(ПараметрыПеретаскивания.Значение);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 Тогда 
			Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
				Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
					Если Не ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги
						ТекстПредупреждения = Нстр("ru = 'Выберите для импорта только файлы, но не каталоги.'");
						ФайлыОригиналы = Новый Массив;
						Прервать;
						
					ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ФайлПринятый.Расширение) Тогда 
						ФайлыОригиналы.Добавить(ФайлПринятый);
						
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Файлы") Тогда
				
				Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
					Расширение = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
						ФайлПринятый, "ТекущаяВерсияРасширение");
					
					Если ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Расширение) Тогда 
						ФайлыОригиналы.Добавить(ФайлПринятый);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстПредупреждения) И ФайлыОригиналы.Количество() = 0 Тогда 
		ТекстПредупреждения = СтрШаблон(Нстр("ru = 'Среди перетаскиваемых файлов нет скан-копий оригиналов.
			|В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа.'"),
			Состояние);
	КонецЕсли;
	
	Возврат ФайлыОригиналы;
	
КонецФункции

// Получает занятые файлы
Процедура ДобавитьЗанятыеФайлыСамойКарточки(Форма, МассивЗахваченныхФайлов) Экспорт
	
	ЕстьЗанятые = Ложь;
	Для Каждого Строка Из Форма.Файлы.ПолучитьЭлементы() Цикл
		Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокумент И Не Строка.ЭтоДокументЭДО Тогда
			Если Строка.РедактируетТекущийПользователь Тогда
				ЕстьЗанятые = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			
			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				Если Подстрока.РедактируетТекущийПользователь Тогда
					ЕстьЗанятые = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
	МассивЗанятых = Новый Массив;
	Если ЕстьЗанятые Тогда
		МассивЗанятых = РаботаСФайламиВызовСервера.ПолучитьСписокЗанятыхФайлов(Форма.Объект.Ссылка);
	Иначе
		Возврат;
	КонецЕсли;	
	
	Для Каждого ФайлыСтрока Из МассивЗанятых Цикл
		
		ДанныеФайла = Новый Структура(
			"Ссылка, ПолноеИмяФайлаВРабочемКаталоге, РедактируетТекущийПользователь, ДатаМодификацииУниверсальнаяВБазе, Размер, Расширение, ВладелецФайла");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, ФайлыСтрока);
		ДанныеФайла.РедактируетТекущийПользователь = Истина;
		ДанныеФайла.ВладелецФайла = Форма.Объект.Ссылка;
		
		МассивЗахваченныхФайлов.Добавить(ДанныеФайла);
		
	КонецЦикла;	
	
КонецПроцедуры	

// Получает занятые файлы
Процедура ДобавитьЗанятыеФайлыСамойКарточки_ВхИсх(Форма, МассивЗахваченныхФайлов) Экспорт
	
	ЕстьЗанятые = Ложь;
	Для Каждого ФайлыСтрока Из Форма.Файлы Цикл
		
		Если ФайлыСтрока.РедактируетТекущийПользователь Тогда
			ЕстьЗанятые = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
	МассивЗанятых = Новый Массив;
	Если ЕстьЗанятые Тогда
		МассивЗанятых = РаботаСФайламиВызовСервера.ПолучитьСписокЗанятыхФайлов(Форма.Объект.Ссылка);
	Иначе
		Возврат;
	КонецЕсли;	
	
	Для Каждого ФайлыСтрока Из МассивЗанятых Цикл
		
		ДанныеФайла = Новый Структура("Ссылка, ПолноеИмяФайлаВРабочемКаталоге, РедактируетТекущийПользователь, ДатаМодификацииУниверсальнаяВБазе, Размер, Расширение");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, ФайлыСтрока);
		ДанныеФайла.РедактируетТекущийПользователь = Истина;
		
		МассивЗахваченныхФайлов.Добавить(ДанныеФайла);
		
	КонецЦикла;	
	
КонецПроцедуры	

// Из массива МассивЗахваченныхФайлов  - удаляет занятые внешними программами
Процедура ИсключитьЗанятыеВнешнимиПрограммамиФайлы(МассивЗахваченныхФайлов) Экспорт
	
	МассивФайловВозврата = Новый Массив;
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат;
	КонецЕсли;
	
	РасширенияФайловДляПроверкиБлокировкиФайлаНаДиске = 
		ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().РасширенияФайловДляПроверкиБлокировкиФайлаНаДиске;
	Если ОбщегоНазначенияКлиент.ЭтоLinuxКлиент() Тогда
		РасширенияФайловДляПроверкиБлокировкиФайлаНаДиске = "";
	КонецЕсли;	
	РасширенияМассив = СтрРазделить(
		РасширенияФайловДляПроверкиБлокировкиФайлаНаДиске, " ", Ложь);
	
	ЗанятыеФайлы = Новый Массив;
	ЗанятыеНеИзмененныеФайлы = Новый Массив;
	
	Для Каждого ФайлыСтрока Из МассивЗахваченныхФайлов Цикл
		
		Если Не ФайлыСтрока.РедактируетТекущийПользователь
			Или Не ЗначениеЗаполнено(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге) Тогда
			Продолжить;
		КонецЕсли;
		
		Файл = Новый Файл(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге);
		Если Файл.Существует() Тогда
			
			ИмяРасширение = Файл.Имя;
			Расширение = Файл.Расширение;
			Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение);
			
			Файл = Неопределено;
			
			Если РасширенияМассив.Найти(ВРег(Расширение)) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ПутьКИсходномуФайлу = ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
			
			Если Не РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПутьКИсходномуФайлу) Тогда
				
				МассивФайловВозврата.Добавить(ФайлыСтрока);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивЗахваченныхФайлов = МассивФайловВозврата;
	
КонецПроцедуры

// Вызывается после установки недействительности документа.
//
Процедура ПослеУстановкиНедействительности(Форма, Документ) Экспорт
	
	РаботаСБизнесПроцессамиКлиент.ПослеУстановкиНедействительностиПредмета(Форма, Документ);
	
КонецПроцедуры

// Обработчик "НачалоВыбора" поля "НоменклатураДел" в карточке шаблона или вида документа
//
// Параметры
//   Форма   - ФормаКлиентскогоПриложения - форма шаблона или вида документа, в котором меняется реквизит.
//   Элемент - ЭлементФормы - изменяемый элемент формы
//   СтандартнаяОбработка - Булево - признак стандартной обработки.
//   Контрагент - СправочникСсылка.Контрагенты, Массив - Контрагент указанный в шаблоне.
//   ЭтоВид - Булево - признак вызова процедуры из формы вида документа.
//
Процедура НоменклатураДелНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, Контрагент, ЭтоВид = Ложь) Экспорт 
	
	Если ЭтоВид Тогда 
		Объект = Форма.ШаблонДокумента;
	Иначе 
		Объект = Форма.Объект;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
	ПараметрыФормы.Вставить("Контрагент", 		Контрагент);
	ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.НоменклатураДел);
	ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);
	ПараметрыФормы.Вставить("ФормаДокумента", 		Объект.ФормаДокумента);
	
	ОткрытьФорму("Справочник.НоменклатураДел.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Возвращает структуру параметров для открытия формы документа при создании по шаблону. 
// Параметры:
//  Результат - ПараметрыПеретаскивания - содержит перетаскиваемое значение, тип действия и возможные действия при перетаскивании
//  ПараметрКоманды - Произвольный - значение от источника, в котором реализована команда. Может содержать как единичное значение, так и массив значений.
//
// Возвращаемое значение
//  ПараметрыФормы - Структура - структура параметров.
//
Функция ПараметрыФормыДляСозданияДокумента(Результат, ПараметрКоманды = Неопределено) Экспорт 
	
	ПараметрыФормы = Новый Структура();
	Если (ТипЗнч(Результат) <> Тип("Строка")) Тогда 
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат.ШаблонДокумента);
		ПараметрыФормы.Вставить("Подготовил", Результат.Подготовил);
		
		Если ПараметрКоманды <> Неопределено Тогда 
			Результат.Вставить("Основание", ПараметрКоманды);
			ПараметрыФормы.Вставить("Основание", Результат);
			ПараметрыФормы.Вставить("ЗаполнятьРеквизитыДоСоздания", Истина);
		КонецЕсли;
		
		// Корреспонденция
		Если Результат.Свойство("ДанныеИсходящейКорреспонденции") Тогда 
			ПараметрыФормы.Вставить("ДанныеИсходящейКорреспонденции", Результат.ДанныеИсходящейКорреспонденции);
		КонецЕсли;
		Если Результат.Свойство("ДанныеВходящейКорреспонденции") Тогда 
			ПараметрыФормы.Вставить("ДанныеВходящейКорреспонденции", Результат.ДанныеВходящейКорреспонденции);
		КонецЕсли;
		
		// Регламентированный учет обращений
		Если Результат.Свойство("ТаблицаВопросы") 
			И Результат.ТаблицаВопросы.Количество() > 0 Тогда 
			ПараметрыФормы.Вставить("ТаблицаВопросы", Результат.ТаблицаВопросы);
		КонецЕсли;
		// Конец Регламентированный учет обращений
		
		// Тематика
		Если Результат.Свойство("ТематикаДокумента") Тогда 
			ПараметрыФормы.Вставить("ТематикаДокумента", Результат.ТематикаДокумента);
		КонецЕсли;
	Иначе
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат);
		
		Если ПараметрКоманды <> Неопределено Тогда 
			Результат.Вставить("Основание", ПараметрКоманды);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

#Область ВидИТематика_ДляОбработчиковСобытий

// Обработчик "ПриИзменении" вида и тематики документа
//
// Параметры:
//   Форма   - ФормаКлиентскогоПриложения - форма документа, в котором меняется реквизит.
//   ЭтоСписок - Булево - признак вызова и формы списка.
//
Процедура ВидИТематикаПриИзменении(Форма, ЭтоСписок = Ложь) Экспорт 
	
	Если Не ЗначениеЗаполнено(Форма.ВидИТематикаТекст) Тогда 
		Если ЭтоСписок Тогда 
			Форма.ВидДокумента = Неопределено;
			Форма.Тематика = Неопределено;
		Иначе 
			Объект = Форма.Объект;
			Объект.ВидДокумента = Неопределено;
			Объект.Тематика = Неопределено;
		КонецЕсли;
		
		Форма.ВидИТематикаТекст = Неопределено;
	КонецЕсли;
	
	Если Не ЭтоСписок Тогда
		Форма.ИзменилсяКлючНастроекОбработки = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик "НачалоВыбора" вида и тематики документа
//
// Параметры:
//   Форма   - ФормаКлиентскогоПриложения - форма документа, в котором меняется реквизит.
//   Элемент - ЭлементФормы - изменяемый элемент формы.
//   СтандартнаяОбработка - Булево - признак стандартной обработки.
//   ЭтоСписок - Булево - признак вызова из формы списка.
//   ЭтоФормаВыбора - Булево - признак вызова из формы выбора.
//
Процедура ВидИТематикаНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, ЭтоСписок = Ложь, ЭтоФормаВыбора = Ложь) Экспорт 
	
	ТипКорреспонденции = "";
	ДоступныеВидыДокументов = Неопределено;
	Если ЭтоСписок Тогда 
		ВидДокумента = Форма.ВидДокумента;
		Тематика = Форма.Тематика;
		ВестиУчетПоТематикам = Форма.ТематикиИспользуются;
		Если Форма.ДоступныеВидыДокументов.Количество() > 0 Тогда 
			ДоступныеВидыДокументов = Форма.ДоступныеВидыДокументов;
		КонецЕсли;
	Иначе 
		Объект = Форма.Объект;
		ВидДокумента = Объект.ВидДокумента;
		Тематика = Объект.Тематика;
		ВестиУчетПоТематикам = Форма.ВидДокументаКэш.ВестиУчетПоТематикам;
		ТипКорреспонденции = Форма.ТипКорреспонденции;
	КонецЕсли;

	Если ЭтоФормаВыбора	Тогда
		ТипКорреспонденции = Форма.ТипКорреспонденции;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ВидДокумента);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ВидДокумента);
	ПараметрыФормы.Вставить("РежимВыбораСТематикой", Истина);
	ПараметрыФормы.Вставить("ПроверятьРазрешенияНаСозданиеДокументов",
		Форма.Параметры.Свойство("Ключ")
		И ТипЗнч(Форма.Параметры.Ключ) = Тип("СправочникСсылка.ДокументыПредприятия"));
	
	Если ЗначениеЗаполнено(ДоступныеВидыДокументов) Тогда 
		ПараметрыФормы.Вставить("ДоступныеВидыДокументов", ДоступныеВидыДокументов);
	КонецЕсли;
	
	Если ВестиУчетПоТематикам
		И ЗначениеЗаполнено(Тематика) Тогда
		ПараметрыФормы.Вставить("Тематика", Тематика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипКорреспонденции) Тогда
		ПараметрыФормы.Вставить("ТипКорреспонденции", ТипКорреспонденции);
	КонецЕсли;
	
	Если ЭтоФормаОбращенийГраждан(Форма) Тогда
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтборОбращенийГраждан");
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВидыДокументов.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Обработчик "Очистка" вида и тематики документа
//
// Параметры
//   Форма   - ФормаКлиентскогоПриложения - форма документа, в котором меняется реквизит.
//   ЭтоСписок - Булево - признак вызова и формы списка.
//
Процедура ВидИТематикаОчистка(Форма, ЭтоСписок = Ложь) Экспорт 
	
	Если ЭтоСписок Тогда 
		Форма.ВидДокумента = Неопределено;
		Форма.Тематика = Неопределено;
	Иначе 
		Объект = Форма.Объект;
		Объект.ВидДокумента = Неопределено;
		Объект.Тематика = Неопределено;
		Форма.Модифицированность = Истина;
		Форма.ИзменилсяКлючНастроекОбработки = Истина;
	КонецЕсли;
	
	Форма.ВидИТематикаТекст = Неопределено;
	
КонецПроцедуры

// Обработчик "Открытие" вида и тематики документа
//
// Параметры
//   Форма   - ФормаКлиентскогоПриложения - форма документа, в котором меняется реквизит.
//   ЭтоСписок - Булево - признак вызова и формы списка.
//
Процедура ВидИТематикаОткрытие(Форма, СтандартнаяОбработка, ЭтоСписок = Ложь) Экспорт 
	
	Если ЭтоСписок Тогда 
		ВидДокумента = Форма.ВидДокумента;
		Тематика = Форма.Тематика;
	Иначе 
		Объект = Форма.Объект;
		ВидДокумента = Объект.ВидДокумента;
		Тематика = Объект.Тематика;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Тематика) Тогда
		ПоказатьЗначение(, Тематика);
	ИначеЕсли ЗначениеЗаполнено(ВидДокумента) Тогда
		ПоказатьЗначение(, ВидДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик "ОбработкаВыбора" вида и тематики документа
//
// Параметры:
//   Форма   - ФормаКлиентскогоПриложения - форма документа, в котором меняется реквизит.
//   ВыбранноеЗначение -  СписокЗначений Из СправочникСсылка.ВидыДокументов - список значений, который будет использован
//   																		  при обработке события.
//   СтандартнаяОбработка - Булево - признак стандартной обработки.
//   ЭтоСписок - Булево - признак вызова и формы списка.
//
Процедура ВидИТематикаОбработкаВыбора(Форма, ВыбранноеЗначение, СтандартнаяОбработка, ЭтоСписок = Ложь) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ТематикиДокументов") Тогда
		
		ВидДокумента = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			ВыбранноеЗначение, "ВидДокумента");
		Тематика = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВидыДокументов") Тогда 
		
		ВидДокумента = ВыбранноеЗначение;
		Тематика = Неопределено;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		Если ЗначениеЗаполнено(ВыбранноеЗначение.ВидДокумента)
			И ЗначениеЗаполнено(ВыбранноеЗначение.Тематика) Тогда
			ВидДокумента = ВыбранноеЗначение.ВидДокумента;
			Тематика = ВыбранноеЗначение.Тематика;
		Иначе
			ВидДокумента = ВыбранноеЗначение.ВидДокумента;
			Тематика = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоСписок Тогда 
		Форма.ВидДокумента = ВидДокумента;
		Форма.Тематика = Тематика;
	Иначе 
		
		ТипКорреспонденции = Форма.ТипКорреспонденции;
		Если ЗначениеЗаполнено(ТипКорреспонденции) Тогда
			РеквизитыКорреспонденции = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(ВидДокумента,
				"ЯвляетсяВходящейКорреспонденцией, ЯвляетсяИсходящейКорреспонденцией");
			Если ТипКорреспонденции = "ЯвляетсяВходящейКорреспонденцией" Тогда
				ВидКорреспонденции = НСтр("ru = 'входящей'");
			Иначе
				ВидКорреспонденции = НСтр("ru = 'исходящей'");
			КонецЕсли;
			
			Если РеквизитыКорреспонденции[ТипКорреспонденции] <> Истина Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ должен иметь вид, являющийся %1 корреспонденцией'"),
					ВидКорреспонденции);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВидИТематикаТекст");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Объект = Форма.Объект;
		Объект.ВидДокумента = ВидДокумента;
		Объект.Тематика = Тематика;
		Форма.Модифицированность = Истина;
		Форма.ИзменилсяКлючНастроекОбработки = Истина;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тематика) Тогда 
		Форма.ВидИТематикаТекст = СокрЛП(ВидДокумента) + " - " + СокрЛП(Тематика);
	Иначе 
		Форма.ВидИТематикаТекст = СокрЛП(ВидДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик "АвтоПодбор" вида и тематики документа
//
// Параметры:
//   Форма     - ФормаКлиентскогоПриложения - форма документа, в котором меняется реквизит.
//   Текст     - Строка- введенный пользователем текст.
//   ДанныеВыбора -  СписокЗначений Из СправочникСсылка.ВидыДокументов - список значений, который будет использован
//   																	 при обработке события.
//   Ожидание  - Число - Интервал в секундах после ввода текста, через который произошло событие.
//   СтандартнаяОбработка - Булево - признак стандартной обработки.
//   ЭтоСписок - Булево - признак вызова из формы списка.
//   ЭтоФормаВыбора - Булево - Признак вызова из формы выбора
//
Процедура ВидИТематикаАвтоПодбор(
	Форма, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка, ЭтоСписок = Ложь,
	ЭтоФормаВыбора = Ложь) Экспорт 
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТипКорреспонденции = "";
	ДополнительныеПараметры = Новый Структура;
	ДоступныеВидыДокументов = Неопределено;
	Если ЭтоСписок Тогда 
		ВестиУчетПоТематикам = Форма.ВестиУчетПоТематикам;
		Если Форма.ДоступныеВидыДокументов.Количество() > 0 Тогда 
			ДоступныеВидыДокументов = Форма.ДоступныеВидыДокументов;
		КонецЕсли;
	Иначе 
		ВестиУчетПоТематикам = Форма.ВидДокументаКэш.ВестиУчетПоТематикам;
		ТипКорреспонденции = Форма.ТипКорреспонденции;
	КонецЕсли;
	
	Если ЭтоФормаВыбора	Тогда      
		ТипКорреспонденции = Форма.ТипКорреспонденции;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТипКорреспонденции) Тогда
		ДополнительныеПараметры.Вставить("ТипКорреспонденции", ТипКорреспонденции);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоступныеВидыДокументов) Тогда
		ДополнительныеПараметры.Вставить("ДоступныеВидыДокументов", ДоступныеВидыДокументов);
	КонецЕсли;
	
	Если ЭтоФормаОбращенийГраждан(Форма) Тогда
		ДополнительныеПараметры.Вставить("ОтборОбращенийГраждан", Истина);
	КонецЕсли;
	
	Если Не ВестиУчетПоТематикам Тогда
		ДанныеВыбора = Делопроизводство.ДанныеВыбораВидаДокумента(Текст, ДополнительныеПараметры);
	Иначе
		ДанныеВыбора = РаботаСТематикамиДокументовВызовСервера.ДанныеВыбораВидаИТематики(
			Текст, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик "ОкончаниеВводаТекста" вида и тематики документа
//
// Параметры:
//   Форма     - ФормаКлиентскогоПриложения - форма документа, в котором меняется реквизит.
//   Текст     - Строка- введенный пользователем текст.
//   ДанныеВыбора -  СписокЗначений Из СправочникСсылка.ВидыДокументов - список значений, который будет использован
//   																	 при обработке события.
//   СтандартнаяОбработка - Булево - признак стандартной обработки.
//   ЭтоСписок - Булево - признак вызова и формы списка.
//
Процедура ВидИТематикаОкончаниеВводаТекста(
	Форма, Текст, ДанныеВыбора, СтандартнаяОбработка, ЭтоСписок = Ложь) Экспорт 
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	ТипКорреспонденции = "";
	ДополнительныеПараметры = Новый Структура;
	ДоступныеВидыДокументов = Неопределено;
	Если ЭтоСписок Тогда 
		ВидДокумента = Форма.ВидДокумента;
		Тематика = Форма.Тематика;
		ВестиУчетПоТематикам = Истина;
		Если Форма.ДоступныеВидыДокументов.Количество() > 0 Тогда 
			ДоступныеВидыДокументов = Форма.ДоступныеВидыДокументов;
		КонецЕсли;
	Иначе 
		Объект = Форма.Объект;
		ВидДокумента = Объект.ВидДокумента;
		Тематика = Объект.Тематика;
		ВестиУчетПоТематикам = Форма.ВидДокументаКэш.ВестиУчетПоТематикам;
		ТипКорреспонденции = Форма.ТипКорреспонденции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипКорреспонденции) Тогда
		ДополнительныеПараметры.Вставить("ТипКорреспонденции", ТипКорреспонденции);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоступныеВидыДокументов) Тогда
		ДополнительныеПараметры.Вставить("ДоступныеВидыДокументов", ДоступныеВидыДокументов);
	КонецЕсли;
	
	Если ЭтоФормаОбращенийГраждан(Форма) Тогда
		ДополнительныеПараметры.Вставить("ОтборОбращенийГраждан", Истина);
	КонецЕсли;
	
	Если Не ВестиУчетПоТематикам Тогда
		ДанныеВыбора = Делопроизводство.ДанныеВыбораВидаДокумента(Текст, ДополнительныеПараметры);
	Иначе
		ДанныеВыбора = РаботаСТематикамиДокументовВызовСервера.ДанныеВыбораВидаИТематики(
			Текст, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость кнопки выбора для поля ВидИТематика в форме списка документов
// Если вид и тематика не выбраны - кнопка выбора отображается в поле, в противном случае - только в
// выпадающем списке.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма списка с папками справочника ДокументыПредприятия
Процедура ВидИТематикаУстановитьВидимостьКнопкиВыбора(Форма) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.ВидИТематикаТекст) Тогда 
		Форма.Элементы.ВидИТематикаТекст.ОтображениеКнопкиВыбора = 
			ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСпискеИВПолеВвода;
	Иначе
		Форма.Элементы.ВидИТематикаТекст.ОтображениеКнопкиВыбора = 
				ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Пометит документ как прочтенный
Процедура ПометитьКакПрочтенное(Форма, Ссылка, КлючЗаписи) Экспорт
	
	Если Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбработки = Форма.ПометитьКакПрочтенноеСервер();
	
	ПоказатьОповещениеПользователя(
		РезультатОбработки.Заголовок, 
		РезультатОбработки.НавигационнаяСсылка, 
		РезультатОбработки.Описание,
		РезультатОбработки.Картинка);
			
	ОповеститьОбИзменении(КлючЗаписи);
	ОповеститьОбИзменении(Ссылка);

КонецПроцедуры

// Задает вопрос об внесении записи в журнал передачи документов перед записью Документа предприятия
Функция ЗадатьВопросОбОтраженииВЖурналеПередачи(Форма, ПараметрыЗаписи, Отказ) Экспорт

	ОтказВозврат = Ложь;
	
	НастройкиРаботыСДокументами = 
		СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ПерсональныеНастройкиРаботыСДокументами;
	СпособОтраженияПередачиКонтрагенту = НастройкиРаботыСДокументами.СпособОтраженияПередачиКонтрагенту;
	
	Объект = Форма.Объект;
	КэшВидаДокумента = Форма.ВидДокументаКэш;
	ЭтоВходящий = КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией;
	ЭтоИсходящий = КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией;
	ПредметПереписки = Форма.ПредметПереписки;
	
	ДаНетСпрашивать = Новый Структура("Да, Нет, Спрашивать", 
		ПредопределенноеЗначение("Перечисление.ДаНетСпрашивать.Да"),
		ПредопределенноеЗначение("Перечисление.ДаНетСпрашивать.Нет"),
		ПредопределенноеЗначение("Перечисление.ДаНетСпрашивать.Спрашивать"));
		
	СпособыОтражения = Новый Структура("Автоматически, НеОтражать, ЗадаватьВопрос",
		ПредопределенноеЗначение("Перечисление.СпособыОтраженияПередачиКонтрагенту.Автоматически"),
		ПредопределенноеЗначение("Перечисление.СпособыОтраженияПередачиКонтрагенту.НеОтражать"),
		ПредопределенноеЗначение("Перечисление.СпособыОтраженияПередачиКонтрагенту.НеОтражать"));
		
	Если СпособОтраженияПередачиКонтрагенту = СпособыОтражения.НеОтражать Тогда
		Возврат ОтказВозврат;
	КонецЕсли;
	
	Для Каждого Строка Из Форма.КонтрагентыДляОтраженияВЖурналеПередачи Цикл
		
		Если СпособОтраженияПередачиКонтрагенту = СпособыОтражения.Автоматически Тогда
			Строка.НеобходимостьОтметкиВЖурналеПередачиПодтверждена = ДаНетСпрашивать.Да;
			Продолжить;
		КонецЕсли;
		
		Если Строка.НеобходимоОтметитьВЖурналеПередачи И
			Строка.НеобходимостьОтметкиВЖурналеПередачиПодтверждена = ДаНетСпрашивать.Спрашивать Тогда
			
			ПараметрыЗаписи.Вставить("КонтрагентСПодтверждениемОЖурналеПередачи", Строка.Контрагент);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВопросаОЗаписиВЖурналеПередачи",
				Форма,
				ПараметрыЗаписи);
			
			Если ЭтоВходящий Тогда
				ТекстВопроса = СтрШаблон(НСтр("ru = 'Отметить в журнале передачи возврат документа %1?'"),
					Строка(ПредметПереписки));
			Иначе
				ТекстВопроса = 
					СтрШаблон(НСтр("ru = 'Внести запись в журнал передачи о передаче документа %1 контактному лицу %2?'"),
						Строка(ПредметПереписки), Строка.КонтактноеЛицо);
			КонецЕсли;
				
			ПоказатьВопрос(ОписаниеОповещения,
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет, , 
				КодВозвратаДиалога.Да);
				
			Отказ = Истина;  
			ОтказВозврат = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказВозврат;

КонецФункции

// Откроет форму со списком связей
//Параметры
//ОсновнойОбъект - ссылка на объект
//
Процедура ОткрытьФормуСвязи(ОсновнойОбъект, ТолькоВажные = Истина, ТолькоСвязиВОтветНа = Ложь) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.СвязиОбъекта",
		Новый Структура("ОсновнойОбъект, ТолькоВажные, ТолькоСвязиВОтветНа", ОсновнойОбъект, ТолькоВажные, ТолькоСвязиВОтветНа),,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры	

// Возвращает текст ошибки о невозможности создания документа без шаблона
// 
// Возвращаемое значение:
//  Строка - Текст ошибки нет шаблона нельзя создать документ
Функция ТекстОшибки_ЗапретСозданияДокумента() Экспорт
	Возврат НСтр("ru = 'Не найдено подходящих шаблонов документов. Создать документ невозможно. Обратитесь к администратору'");
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура СозданиеДокументаПоШаблонуЗавершение(Результат, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) ИЛИ Результат = "ПрерватьОперацию" Тогда
		Возврат;
	КонецЕсли;
	
	КлючеваяОперация = "ДокументыПредприятияВыполнениеКомандыСоздать";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	ПараметрыФормы = ПараметрыФормыДляСозданияДокумента(
		Результат);
		
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, Параметры, Истина);
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.ДокументыПредприятия.ФормаОбъекта",
		ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоФормаОбращенийГраждан(Форма)
	
	Возврат Форма.ИмяФормы = "Справочник.ДокументыПредприятия.Форма.ФормаСпискаСПапками"
		И Форма.ЭтоРежимОбращенияГраждан;
	
КонецФункции

#КонецОбласти
