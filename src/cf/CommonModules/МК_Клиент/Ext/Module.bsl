#Область ПрограммныйИнтерфейс

#Область Мультимедиа
// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
// Соответствует обработчику ПриНачалеРаботыСистемы.
//
Процедура ПриНачалеРаботыСистемы() Экспорт

#Если МобильныйКлиент Тогда

	МК_ВызовСервера.ПриНачалеРаботыСистемы(МК_КлиентПовтИсп.СведенияОКлиенте());
	Попытка
		// Обработчик нажатия на пуш уведомление.
		ДоставляемыеУведомления.ПодключитьОбработчикУведомлений(
			Новый ОписаниеОповещения("Подключаемый_ОбработчикУведомлений",
			МК_Клиент));
	Исключение
		ИмяСобытия = МК_КлиентСервер.ИмяСобытияPushУведомления();
		МК_ВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытия, ОписаниеОшибки());
	КонецПопытки;

#КонецЕсли

КонецПроцедуры

// Выполняет получение мультимедиа данных от устройства.
//
// Параметры:
//  ТипМультимедиа - Строка- Идентификатор данных: "Фото", "Видео", "Аудио", "Файл".
//  ОписаниеОповещения - ОписаниеОповещения - Процедура формы, в которой происходит дальнейшаа обработка данных
// 
Процедура НачатьПолучениеМультимедиаДанных(ТипМультимедиа, ОписаниеОповещения) Экспорт

#Если МобильныйКлиент Тогда
	МультимедиаДанные = Неопределено;

	Если ТипМультимедиа = "Фото" И СредстваМультимедиа.ПоддерживаетсяФотоснимок() Тогда

		КачествоФото = 75;
		МультимедиаДанные = СредстваМультимедиа.СделатьФотоснимок( , , КачествоФото);

	ИначеЕсли ТипМультимедиа = "Видео" И СредстваМультимедиа.ПоддерживаетсяВидеозапись() Тогда

		МультимедиаДанные = СредстваМультимедиа.СделатьВидеозапись();

	ИначеЕсли ТипМультимедиа = "Аудио" И СредстваМультимедиа.ПоддерживаетсяАудиозапись() Тогда

		МультимедиаДанные = СредстваМультимедиа.СделатьАудиозапись();

	ИначеЕсли ТипМультимедиа = "Файл" Тогда

		ВыбратьФайлИзФайловогоХранилища(ОписаниеОповещения);

	ИначеЕсли ТипМультимедиа = "Cкан" Тогда

		СканироватьДокументы(ОписаниеОповещения);

	КонецЕсли;

	Если МультимедиаДанные <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, МультимедиаДанные);
	КонецЕсли;

#КонецЕсли

КонецПроцедуры

// Возвращает структуру описание файла мультимедиа.
//
// Параметры:
//  Мультимедиа - ДанныеМультимедиа, Строка - Сведения о файле.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Описание параметров файла мультимедиа с ключами:
//   * ПолноеИмя - Строка - Полное имя файла;
//   * АдресВременногоФайла - Строка - Путь к файлу на диске;
//   * Расширение           - Строка - Тип файла (расширение);
//   * Размер               - Строка - Представление размера файла;
//   * Представление        - Строка - Представление файла (имя).
//
Функция ИнформацияОМультимедиаФайле(Мультимедиа) Экспорт

	Перем СведенияОМультимедиаФайле;

#Если МобильныйКлиент Тогда
	Если Мультимедиа = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПредставлениеФайла = Неопределено;
	Расширение = Неопределено;
	РазмерДанных = 0;
	ПолноеИмя = "";
	
	Если ТипЗнч(Мультимедиа) = Тип("Строка") Тогда
		
		//Мультимедиа - это адрес текущего файла
		Файл = Новый Файл(Мультимедиа);
		Если Не Файл.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;

		РазмерДанных = Файл.Размер();
		СведенияОЗагружаемомКонтенте = СведенияОЗагружаемомКонтенте(Файл);
		ПредставлениеФайла = СведенияОЗагружаемомКонтенте.Представление;
		Расширение = СведенияОЗагружаемомКонтенте.Расширение;

	Иначе
		Расширение = Мультимедиа.РасширениеФайла;
		РазмерДанных = Мультимедиа.Размер();

	КонецЕсли;
	ПолноеИмя = Файл.ПолноеИмя;
	
	Если Не ЗначениеЗаполнено(ПредставлениеФайла) Тогда
		ПредставлениеФайла = Файл.Имя;
	КонецЕсли;

	СведенияОМультимедиаФайле = Новый Структура;

	СведенияОМультимедиаФайле.Вставить("ПолноеИмя", ПолноеИмя);
	СведенияОМультимедиаФайле.Вставить("Представление", ПредставлениеФайла);
	СведенияОМультимедиаФайле.Вставить("Расширение", Расширение);
	СведенияОМультимедиаФайле.Вставить("Размер", РазмерДанных);
	СведенияОМультимедиаФайле.Вставить("АдресВоВременномХранилище", "");

#КонецЕсли
	
	Возврат СведенияОМультимедиаФайле;
КонецФункции

// Возвращает структуру описание аудио файла.
//
// Параметры:
//  Мультимедиа - ДанныеМультимедиа, Строка - Сведения о файле.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Описание параметров файла мультимедиа с ключами:
//   * АдресВременногоФайла - Строка - Путь к файлу на диске;
//   * Расширение           - Строка - Тип файла (расширение);
//   * Размер               - Строка - Представление размера файла;
//   * Представление        - Строка - Представление файла (имя).
//   * Ошибка               - Строка - Ошибка, если есть.
//
Функция ИнформацияОбАудиоФайле(Мультимедиа) Экспорт

	Если Мультимедиа = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	Возврат Неопределено;
#Иначе
	
	ИмяВременногоФайла = Неопределено;
	НовыйФайл = Неопределено;
	Ошибка = Неопределено;
	
	Представление = Неопределено;
	Расширение = Неопределено;
	Размер = Неопределено;
	
	Расширение = Мультимедиа.РасширениеФайла;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	НовыйФайл = Мультимедиа.ПолучитьДвоичныеДанные();
	Размер = НовыйФайл.Размер();
	
	
	Если Ошибка = Неопределено Тогда
		
		НовыйФайл.Записать(ИмяВременногоФайла);
		Файл = Новый Файл(ИмяВременногоФайла);
		
	КонецЕсли;
	
	НовыйФайл = Неопределено;
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Представление = Файл.ИмяБезРасширения;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Представление", Представление);
	ВозвращаемоеЗначение.Вставить("Расширение", Расширение);
	ВозвращаемоеЗначение.Вставить("Размер", Размер);
	ВозвращаемоеЗначение.Вставить("АдресВременногоФайла", ИмяВременногоФайла);
	ВозвращаемоеЗначение.Вставить("Ошибка", Ошибка);
	
	Возврат ВозвращаемоеЗначение;
	
#КонецЕсли
	
КонецФункции

// Формирует сведения о загружаемом файле
// Параметры:
// СведенияОФайле - Файл, Структура - Загружаемый файл или структура с описанием файла
// Возвращаемое значение:
//  Структура:
//   *Представление - Строка - Имя файла с расширением
//   *Имя - Строка
//   *Расширение - Строка
//   *РасширениеБезТочки - Строка - расширение без "."
//
Функция СведенияОЗагружаемомКонтенте(СведенияОФайле) Экспорт

	ИмяФайла = СведенияОФайле.ИмяБезРасширения;
	Представление = СведенияОФайле.Имя;
	Расширение = СведенияОФайле.Расширение;
	РасширениеБезТочки = СтрЗаменить(Расширение, ".", "");

#Если МобильныйКлиент Тогда
	Если СтрНачинаетсяС(Нрег(СведенияОФайле.ПолноеИмя), "content") И ПустаяСтрока(Расширение) Тогда
		Если ТипЗнч(СведенияОФайле) = Тип("Структура") Тогда
			Файл = Новый Файл(СведенияОФайле.ПолноеИмя);
		Иначе
			Файл = СведенияОФайле;
		КонецЕсли;
		
		Представление = Файл.ПолучитьПредставлениеФайлаБиблиотекиМобильногоУстройства();
		ЧастиПредставления = СтрРазделить(Представление, ".");
		
		Если ЧастиПредставления.Количество() >1 Тогда
			ИндексПоследнегоЭлемента = ЧастиПредставления.ВГраница();
			РасширениеБезТочки = ЧастиПредставления[ИндексПоследнегоЭлемента];
			Расширение = СтрШаблон(".%1", РасширениеБезТочки);
			ЧастиПредставления.Удалить(ИндексПоследнегоЭлемента);
			ИмяФайла = СтрСоединить(ЧастиПредставления, ".");
		КонецЕсли;
	
	КонецЕсли;
#КонецЕсли

	//@skip-check structure-consructor-too-many-keys
	Возврат Новый Структура("Имя, Расширение, РасширениеБезТочки, Представление",
		ИмяФайла,
		Расширение,
		РасширениеБезТочки,
		Представление);

КонецФункции

#КонецОбласти

#Область Push
// Обработчик локальных и push-уведомлений.
//
// Параметры:
//  Уведомление  - ДоставляемоеУведомление - Обрабатываемое локальное или push-уведомление;
//  Локальное    - Булево - признак того, что уведомление локальное, Ложь - push-уведомление;
//  Показано     - Булево - признак того, что уведомление показано;
//  ДопПараметры - Произвольный - дополнительные параметры обработчика.
//
Процедура Подключаемый_ОбработчикУведомлений(Уведомление, Локальное, Показано, ДопПараметры) Экспорт

#Если МобильныйКлиент Тогда
	СсылкаСтрокой = Уведомление.Данные;
	Если ЗначениеЗаполнено(СсылкаСтрокой) Тогда
		Ссылка = МК_ВызовСервера.ЗначенияСтрокиВнутрВСсылку(СсылкаСтрокой);
	КонецЕсли;

	Попытка
		ОбработатьПоказУведомления(Ссылка, Уведомление.Текст);
	Исключение

		Если Не Показано Тогда
			МК_ВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				МК_КлиентСервер.ИмяСобытияPushУведомления(),
				ОписаниеОшибки());
		КонецЕсли;

	КонецПопытки;
#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область СканерДокументов
//Выполняет сканирование документа
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - Процедура на форме, в которой происходит постобработка
//  	сканированных документов
//
Процедура СканироватьДокументы(ОписаниеОповещения = Неопределено) Экспорт

#Если МобильныйКлиент Тогда
	ПоместитьВоВложения = ОписаниеОповещения <> Неопределено;
	Если СредстваМультимедиа.ПоддерживаетсяСканированиеДокументов() Тогда

		Если ПоместитьВоВложения Тогда
			СканироватьИВложитьАсинх(ОписаниеОповещения);
		Иначе
			СканироватьИВыгрузитьНаСерверАсинх();
		КонецЕсли;

	Иначе
		ПоказатьПредупреждение( , НСтр(
			"ru='Функциональность сканирования документов не поддерживается'"));
		Возврат;
	КонецЕсли;
#КонецЕсли

КонецПроцедуры

#КонецОбласти

// Открывает форму для обработки ручного добавления сканов
//
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - Будет установлена владельцем открываемой формы
//  ОбработчикОповещения - ОписаниеОповещения - Обработчик после закрытия формы
//
Процедура ДобавитьСканыСМобильного(ФормаВладелец, ОбработчикОповещения) Экспорт

	ОткрытьФорму("ОбщаяФорма.ФормаДобавленияМобильныхСканов", , ФормаВладелец, , , ,
		ОбработчикОповещения);

КонецПроцедуры

// Определяет, активна ли форма. ВводДоступен для проверки не используем, 
// т.к. при активном элементе ПолеHtml он возвращает Ложь.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой нужно проверить доступность
//
//  Возвращаемое значение:
//   Булево - Истина, если форма активна. ложь - если неактивна
//
Функция ДоступностьФормы(Форма) Экспорт

	АктивноеОкноКлиента = АктивноеОкно();
	Если АктивноеОкноКлиента <> Неопределено И АктивноеОкноКлиента.Содержимое.Количество() > 0
		И АктивноеОкно().Содержимое[0] = Форма Тогда

		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Обрабатывает добавление сканов во вложения.
//
// Параметры:
//  ВладелецФайла - ЛюбаяСсылка - Ссылка на объект, который будет установлен владельцем файла
//  Количество - Число - Количество добавленных файлов
//
// Возвращаемое значение:
// 	Булево - Сканы обработаны (Истина или Ложь)
//
Функция ОбработатьДанныеСканов(ВладелецФайла, Количество = 0) Экспорт

	ИмяФайла = СформироватьИмяФайла();
	Результат = МК_ВызовСервера.ОбработатьДаныеСканов(ВладелецФайла, ИмяФайла);
	Если Результат.ФайлыДобавлены Тогда
		Для Каждого ФайлСсылка Из Результат.Файлы Цикл
			ОповеститьОДобавленииСкана(ВладелецФайла, ФайлСсылка, ИмяФайла);
			Количество = Количество + 1;
		КонецЦикла;
		Возврат Истина;
	Иначе
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ПоказатьПредупреждение( , Результат.ТекстОшибки);
		Иначе
			ПоказатьПредупреждение( , Нстр("ru = 'Неизвестная ошибка добавления файла.'"));
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

//Формирует имя файла.
// Параметры:
//  РасширениеБезТочки - Строка - расширение без точки
//  Порядок - Строка - порядок для файла
// Возвращаемое значение:
//  Строка - Имя файла
//
Функция СформироватьИмяФайла(РасширениеБезТочки = "", Порядок = 0) Экспорт

	Если ЗначениеЗаполнено(РасширениеБезТочки) Тогда
		Имя = СтрШаблон(НСтр("ru='Скан от %1%2.%3'"), Формат(ТекущаяДата(),
			"ДФ=""гггг-ММ-дд ЧЧ-мм-сс"""), ?(ЗначениеЗаполнено(Порядок), "_" + Порядок, ""),
			РасширениеБезТочки);
	Иначе
		Имя = СтрШаблон(НСтр("ru='Скан от %1%2'"), Формат(ТекущаяДата(),
			"ДФ=""гггг-ММ-дд ЧЧ-мм-сс"""), ?(ЗначениеЗаполнено(Порядок), "_" + Порядок, ""));
	КонецЕсли;

	Возврат Имя;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Выбирает файл из файлового хранилища устройства
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - процедура на форме для доп. обработки
//
Процедура ВыбратьФайлИзФайловогоХранилища(ОписаниеОповещения)

	ЗаголовокДиалога = НСтр("ru = 'Выберите файл'");

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = ЗаголовокДиалога;
	ДиалогВыбораФайла.Фильтр = РаботаСФайламиКлиент.ПолучитьФильтрДляДиалогаВыбораФайла();
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ДиалогВыбораФайла.МножественныйВыбор = Истина;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);

КонецПроцедуры

#Область Push
// Показывает вопрос пользователю о показе уведомления
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - Ссылка на объект уведомления;
//  ТекстУведомления - Строка - Текст уведомления
//
Процедура ОбработатьПоказУведомления(Ссылка, ТекстУведомления)

	ОбработкаРешения = Новый ОписаниеОповещения("ОбработкаРешенияПоказатьОбъектУведомления",
		МК_Клиент, Ссылка);

	КнопкиДиалога = Новый СписокЗначений;

	Если ЗначениеЗаполнено(Ссылка) И Ссылка <> ПользователиКлиент.ТекущийПользователь() Тогда
		КнопкиДиалога.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Просмотреть'"));
	КонецЕсли;

	КнопкиДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Закрыть'"));

	ПоказатьВопрос(ОбработкаРешения, ТекстУведомления, КнопкиДиалога);

КонецПроцедуры

// Обрабатывает решение пользователя об обработке уведомления
//
// Параметры:
//  Решение - Строка - Решение пользователя;
//  Ссылка - ЛюбаяСсылка - Доп параметры вызовы метода.
//
Процедура ОбработкаРешенияПоказатьОбъектУведомления(Решение, Ссылка) Экспорт

	Если Решение = КодВозвратаДиалога.ОК Тогда
		ПоказатьЗначение( , Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область ПоделитьсяВПриложение

Процедура ДобавитьКомандыПоделиться(ДанныеЗапроса, Команды) Экспорт

#Если МобильныйКлиент Тогда

	Если ДанныеЗапроса.Файлы.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru ='Файлов для отправки в приложение не обнаружено'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	
	ОбработчикКомандыНовоеПисьмоСВложениями = Новый ОписаниеОповещения("НовоеПисьмоСВложениями",
		ЭтотОбъект, ДанныеЗапроса);

	КомандаНовоеПисьмоСВложениями = Новый ОписаниеКомандыВходящегоЗапросаПоделиться(
		ОбработчикКомандыНовоеПисьмоСВложениями,
		"Написать письмо");
	КомандаНовоеПисьмоСВложениями.Картинка = БиблиотекаКартинок.МК_НовоеПисьмо;
	Команды.Добавить(КомандаНовоеПисьмоСВложениями);

#КонецЕсли

КонецПроцедуры

Процедура НовоеПисьмоСВложениями(ДанныеЗапроса) Экспорт

	Вложения = Новый Массив;
	
	Для Каждого Файл Из ДанныеЗапроса.Файлы Цикл
		Вложения.Добавить(ИнформацияОМультимедиаФайле(Файл));
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФайлов", Вложения);
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.МК_ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область Сканер

#Если МобильныйКлиент Тогда

Асинх Процедура СканироватьИВыгрузитьНаСерверАсинх()

	ДанныеСнимков = Новый Массив;
	Результат = Ждать СредстваМультимедиа.СканироватьДокументыАсинх();

	Если Результат <> Неопределено Тогда
		Для Каждого СтраницаРезультата Из Результат Цикл
			ДанныеСнимков.Добавить(СтраницаРезультата.ДанныеИзображения.ПолучитьДвоичныеДанные());
		КонецЦикла;
	КонецЕсли;

	ОписаниеСтатусаЗагрузки = МК_ВызовСервера.ЗагрузитьСканы(ДанныеСнимков);

	Если ЗначениеЗаполнено(ОписаниеСтатусаЗагрузки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеСтатусаЗагрузки);
	КонецЕсли;

КонецПроцедуры

Асинх Процедура СканироватьИВложитьАсинх(ОписаниеОповещения)

	Результат = Ждать СредстваМультимедиа.СканироватьДокументыАсинх();

	Если Результат <> Неопределено Тогда
		Для Каждого СтраницаРезультата Из Результат Цикл
			МультимедиаДанные = СтраницаРезультата.ДанныеИзображения;
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, МультимедиаДанные);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры
#КонецЕсли

//Оповещает об успешном добавлении файла скана
// Параметры:
//  ВладелецФайла - ЛюбаяСсылка - Владелец файла
//  ФайлСсылка - СправочникСсылка.Файлы - Файл
//  ИмяФайла - Строка - имя файла
//
Процедура ОповеститьОДобавленииСкана(ВладелецФайла, ФайлСсылка, ИмяФайла)

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Владелец", ВладелецФайла);
	ПараметрыОповещения.Вставить("Файл", ФайлСсылка);
	ПараметрыОповещения.Вставить("Событие", "СозданФайл");

	Оповестить("Запись_Файл", ПараметрыОповещения);

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Добавлен скан'"), ПолучитьНавигационнуюСсылку(ФайлСсылка), ИмяФайла,
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

#КонецОбласти



#КонецОбласти