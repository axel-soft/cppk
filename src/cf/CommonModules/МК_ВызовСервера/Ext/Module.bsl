
#Область ПрограммныйИнтерфейс

// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
// Соответствует обработчику ПриНачалеРаботыСистемы.
// Параметры:
//  СведенияОМобильномКлиенте - Структура - Сведения о мобильном клиенте
//
Процедура ПриНачалеРаботыСистемы(СведенияОМобильномКлиенте) Экспорт
	
	ПротоколированиеРаботыСотрудников.ЗаписатьВходВСистему();
	РегистрыСведений.МК_СведенияОМобильныхОнлайнКлиентах.ЗаписатьСведенияОКлиенте(СведенияОМобильномКлиенте);

КонецПроцедуры

// Добавляет запись в журнал регистрации с клиента.
//
// Параметры:
//  ИмяСобытия - Строка - Имя события ошибки
//  ТекстСообщения - Строка - Данные для записи;
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытия, ТекстСообщения) Экспорт

	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);

КонецПроцедуры

// Получает ссылку на объект указанного типа
//
// Параметры:
//  ТипМобильного		 - Строка - Описатель типа объекта
//  СтрокаИдентификатора - Строка, УникальныйИдентификатор - идентификатор объекта.
// 
// Возвращаемое значение:
//  Ссылка - ссылка на объект 
//
Функция СсылкаПоТипуИИД(Знач ТипМобильного, Знач СтрокаИдентификатора) Экспорт

	Если Не ЗначениеЗаполнено(ТипМобильного) Или Не ЗначениеЗаполнено(СтрокаИдентификатора) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(СтрокаИдентификатора) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора)
	ИначеЕсли ТипЗнч(СтрокаИдентификатора) = Тип("УникальныйИдентификатор") Тогда
		Идентификатор = СтрокаИдентификатора;
	КонецЕсли;

	Если Идентификатор = УникальныйИдентификаторПустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипМобильного = "Role" Тогда
		Возврат Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			Справочники.РолиИсполнителей.ПолучитьСсылку(Идентификатор),
			Неопределено,
			Неопределено)
	КонецЕсли;
	
	ТипСсылки = ТипСсылкиПоТипуМобильного(ТипМобильного);
	XMLТип = XMLТип(ТипСсылки);
	
	Если XMLТип = Неопределено Или XMLТип.ИмяТипа = "Null" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлассИТип = СтрРазделить(XMLТип.ИмяТипа, ".");
	Класс = КлассИТип[0];
	ИмяТипа = КлассИТип[1];
	
	Если СтрСравнить(Класс, "DocumentRef") = 0 Тогда		
		Возврат Документы[ИмяТипа].ПолучитьСсылку(Идентификатор);	
			
	ИначеЕсли СтрСравнить(Класс, "CatalogRef") = 0 Тогда		
		Возврат Справочники[ИмяТипа].ПолучитьСсылку(Идентификатор);	
			
	ИначеЕсли СтрСравнить(Класс, "TaskRef") = 0 Тогда		
		Возврат Задачи[ИмяТипа].ПолучитьСсылку(Идентификатор);		
		
	ИначеЕсли СтрСравнить(Класс, "BusinessProcessRef") = 0 Тогда		
		Возврат БизнесПроцессы[ИмяТипа].ПолучитьСсылку(Идентификатор);
		
	КонецЕсли;
	 
КонецФункции

//Возвращает признак того, что приложение запущено на моб. устройстве с большим экраном
//
// Возвращаемое значение:
// Булево - признак того, что устройство имеет большой экран 
Функция ЭтоМобильныйСБольшимЭкраном() Экспорт
	
	Если Не МК_ПовтИсп.ЭтоМобильныйКлиент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоНеТелефон = МК_ПовтИсп.ЭтоНеТелефон();
	Если ЭтоНеТелефон Тогда 
	
		//Если это фаблет, то экран должен быть в альбомной ориентации
		Если ОбщегоНазначенияКлиентСервер.ТипУстройства() = "Фаблет" 
			Или ОбщегоНазначенияКлиентСервер.ТипУстройства() = "Планшет" Тогда
			ПараметрыЭкрана = ОбщегоНазначенияКлиентСервер.ПараметрыЭкранаУстройства();
			Возврат Не ПараметрыЭкрана.Портрет; 
		КонецЕсли; 
	
		Возврат Истина;	
	
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

//Возвращает признак того, что приложение запущено на моб. устройстве в портретном режиме экрана
//
// Возвращаемое значение:
// Булево - признак того, что устройство в портретном режиме
Функция ЭтоМобильныйВПортретномРежиме() Экспорт
	
	Если Не МК_ПовтИсп.ЭтоМобильныйКлиент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЭкрана = ОбщегоНазначенияКлиентСервер.ПараметрыЭкранаУстройства();
	
	Возврат ПараметрыЭкрана.Портрет;
	
КонецФункции

#Область МобильныйСканер

// Снимает блокировку регистра КэшМобильныхСканов для указанной формы
// см. МобильныйСканер.ОсвободитьСканер
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатор формы, для которой нужно снять блокировку
//
Процедура ОсвободитьСканер(Идентификатор) Экспорт
	
	РегистрыСведений.КэшМобильныхСканов.ОсвободитьСканер(Идентификатор);
	
КонецПроцедуры

// Делает попытку блокировки регистра КэшМобильныхСканов для указанной формы
// см. МобильныйСканер.ЗанятьСканер
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатор формы, для которой нужно установить блокировку
//
//  Возвращаемое значение:
//   Булево - Истина в случае успеха, Ложь в случае неудачи
//
Функция ЗанятьСканер(Идентификатор) Экспорт
	
	Возврат РегистрыСведений.КэшМобильныхСканов.ЗанятьСканер(Идентификатор);
	
КонецФункции

// Проверяет есть ли запись со сканом в регистре КэшМобильныхСканов
//
//  Возвращаемое значение:
//   Булево - Истина, если скан есть, Ложь если записи нет
//
Функция СканыЗагружены() Экспорт
	
	Возврат РегистрыСведений.КэшМобильныхСканов.СканыЗагружены();
	
КонецФункции

// Создает файл в карточке документа по двоичным данным в регистре КэшМобильныхСканов.
// После этого очищает регистр.
// см. МобильныйСканер.ОбработатьСкан
//
// Параметры:
//  Владелец - Ссылка на объект, который будет установлен владельцем файла
//  ИмяФайла - Строка - Будущее имя файла
//  ИдентификаторФормыДобавления - УникальныйИдентификатор - Идентификатор карточки, к которой фудет прикреплен файл
//
//  Возвращаемое значение:
//   Структура
//      * ФайлыДобавлены - Булево - признак добавлния файлов
//      * Файлы - Массив (СправочникСсылка.Файлы) - массив файлов
//      * ТекстОшибки - Строка
//
Функция ОбработатьДаныеСканов(Владелец, ИмяФайла) Экспорт
	
	Возврат РегистрыСведений.КэшМобильныхСканов.ОбработатьДаныеСканов(Владелец, ИмяФайла);
	
КонецФункции

// Удаляет данные сканов из регистра КэшМобильныхСканов для текущего пользователя
//
Процедура УдалитьДанныеСканов() Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	РегистрыСведений.КэшМобильныхСканов.Удалить(Пользователь);

КонецПроцедуры

// Получает двоичные данные всех сканов для текущего пользователя
//
Функция ДанныеСканов() Экспорт

	Возврат РегистрыСведений.КэшМобильныхСканов.ДанныеСканов();

КонецФункции

//Загружает сканы с моб. устройства в РС
// Параметры:
//  ДанныеСнимков - Массив - Полученные снимки
// Возвращаемое значение:
//  Строка - Описание статуса загрузки строкой
Функция ЗагрузитьСканы(ДанныеСнимков) Экспорт

	Возврат РегистрыСведений.КэшМобильныхСканов.ЗагрузитьСканы(ДанныеСнимков);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСоСпискомПисем
// Возвращает значение настройки Показывать текст - в списке писем
// Возвращаемое значение:
//  Булево - Значение настройки, по умолчанию: Истина
//
Функция НастройкаПоказыватьТекст() Экспорт

	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("МК_ОбщиеНастройки",
		"ПоказыватьТекстВСпискеПисем",
		Ложь);
	
КонецФункции

// Сохраняет настройку Показывать текст - в списке писем
// Параметры:
//  ЗначениеНастройки - Булево - Значение настройки
//
Процедура СохранитьНастройкуПоказыватьТекст(ЗначениеНастройки) Экспорт

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("МК_ОбщиеНастройки",
		"ПоказыватьТекстВСпискеПисем",
		ЗначениеНастройки);

КонецПроцедуры

#КонецОбласти

// Возвращает тип обекта уведомления по его строковому описанию.
//
// Параметры:
//  ТипМобильного - Строка - Строковое описание типа уведомления;
// 
// Возвращаемое значение:
//  Строка - Объект уведомления .
//
Функция ТипСсылкиПоТипуМобильного(ТипМобильного)

	Если ТипМобильного = "IncomingMail" Тогда 	
		Возврат Тип("ДокументСсылка.ВходящееПисьмо");
		
	ИначеЕсли ТипМобильного = "OutgoingMail" Тогда
		Возврат Тип("ДокументСсылка.ИсходящееПисьмо");

	ИначеЕсли ТипМобильного = "CalendarEvent" Тогда
		Возврат Тип("СправочникСсылка.ЗаписиРабочегоКалендаря");

	ИначеЕсли ТипМобильного = "Task" Тогда
		Возврат Тип("ЗадачаСсылка.ЗадачаИсполнителя");

	ИначеЕсли ТипМобильного = "Control" Тогда
		Возврат Тип("СправочникСсылка.Контроль");

	ИначеЕсли ТипМобильного = "ExecutionProcess" Тогда
		Возврат Тип("БизнесПроцессСсылка.Исполнение");

	ИначеЕсли ТипМобильного = "MailAccount"Тогда
		Возврат Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты");

	ИначеЕсли ТипМобильного = "MailFolder" Тогда
		Возврат Тип("СправочникСсылка.ПапкиПисем");

	ИначеЕсли ТипМобильного = "User" Тогда
		Возврат Тип("СправочникСсылка.Пользователи");

	ИначеЕсли ТипМобильного = "Role" Тогда
		Возврат Тип("СправочникСсылка.РолиИсполнителей");

	ИначеЕсли ТипМобильного = "File" Тогда
		Возврат Тип("СправочникСсылка.Файлы");

	ИначеЕсли ТипМобильного = "MailThread" Тогда
		Возврат Тип("СправочникСсылка.ВеткиПереписки");
		
	ИначеЕсли ТипМобильного = "Addressee" Тогда
		Возврат Тип("СправочникСсылка.АдресатыПочтовыхСообщений");
		
	ИначеЕсли ТипМобильного = "MailTextTemplate" Тогда
		Возврат Тип("СправочникСсылка.ШаблоныТекстов");

	ИначеЕсли ТипМобильного = "MyAbsence" Тогда
		Возврат Тип("ДокументСсылка.Отсутствие");
		
	ИначеЕсли ТипМобильного = "MyHealth" Тогда
		Возврат Тип("ДокументСсылка.СамочувствиеСотрудника");
		
	ИначеЕсли ТипМобильного = "Event" Тогда
		Возврат Тип("СправочникСсылка.Мероприятия");
				
	КонецЕсли;

КонецФункции

//Возвращает ссылку из значения строки
//Параметр
//	СсылкаСтрой - Строка - Значение для конвертации
// 
Функция ЗначенияСтрокиВнутрВСсылку(СсылкаСтрокой) Экспорт

 	Возврат ЗначениеИзСтрокиВнутр(СсылкаСтрокой);

КонецФункции

#КонецОбласти