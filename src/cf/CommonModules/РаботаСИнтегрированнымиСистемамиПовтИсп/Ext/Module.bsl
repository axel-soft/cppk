///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает доступность функционала версии web-сервиса БИД.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - система, для которой
//     требуется проверить доступность функционала.
//   ВерсияСервиса - Строка - версия web-сервиса БИД, содержащая требуемый функционал.
//   Оптимистично - Булево - признак необходимости вернуть Истина, если версия сервиса пока неизвестна.
//
// Возвращаемое значение:
//   Булево
//
Функция ДоступенФункционалВерсииСервиса(ИнтегрированнаяСистема, ВерсияСервиса = "", Оптимистично = Ложь) Экспорт
	
	Возврат РаботаСИнтегрированнымиСистемами.ДоступенФункционалВерсииСервиса(
		ИнтегрированнаяСистема,
		ВерсияСервиса,
		Оптимистично);
	
КонецФункции

// Возвращает идентификатор текущей базы данных, если он есть. Если нет, создает его и возвращает.
//
// Возвращаемое значение:
//   Строка
//
Функция ИдентификаторБазыДанных() Экспорт
	
	НаименованиеУзла = ПланыОбмена.ИнтегрированныеСистемы.НаименованиеЭтогоУзла();
	
	ЭтотУзел = ПланыОбмена.ИнтегрированныеСистемы.ЭтотУзел();
	ИмяЭтогоУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Наименование");
	
	Если ИмяЭтогоУзла <> НаименованиеУзла Тогда
		ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
		ЭтотУзелОбъект.ОбменДанными.Загрузка = Истина;
		ЭтотУзелОбъект.Заблокировать();
		ЭтотУзелОбъект.Наименование = НаименованиеУзла;
		Если Не ЗначениеЗаполнено(ЭтотУзелОбъект.Код) Тогда
			ЭтотУзелОбъект.УстановитьНовыйКод();
		КонецЕсли;
		ЭтотУзелОбъект.Записать();
	КонецЕсли;
	
	Возврат НаименованиеУзла;
	
КонецФункции

// Возвращает список печатных форм объекта интегрированной системы.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы,
//                            Строка - система, список объектов которой требуется получить.
//   ПолноеИмяОбъекта - Строка - Полное имя объекта. Например, Документ.ДемоДокумент.
//
// Возвращаемое значение:
//   Массив из Структура - см. РаботаСИнтегрированнымиСистемами.ПечатнаяФормаОбъектаИС
//
Функция ПечатныеФормыОбъектаИнтегрированнойСистемы(ИнтегрированнаяСистема, ПолноеИмяОбъекта) Экспорт
	
	ПараметрыСеанса.УзелИнтегрированнойСистемы = ИнтегрированнаяСистема;
	Прокси = РаботаСИнтегрированнымиСистемамиПовтИсп.ПолучитьПрокси(ИнтегрированнаяСистема);
	
	Запрос = РаботаСИнтегрированнымиСистемами.СоздатьОбъект(Прокси, "DMILGetPrintedFormsRequest");
	ОбъектМетаданныхXDTO = РаботаСИнтегрированнымиСистемами.СоздатьОбъект(Прокси, "DMILMetadataObject");
	ОбъектМетаданныхXDTO.name = ПолноеИмяОбъекта;
	Запрос.objects.Добавить(ОбъектМетаданныхXDTO);
	
	Ответ = Прокси.execute(Запрос);
	РаботаСИнтегрированнымиСистемами.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	ПечатныеФормы = Новый Массив;
	Для Каждого ПечатнаяФормаXDTO Из Ответ.objects[0].printedForms Цикл
		ПечатнаяФормаОбъектаИС = РаботаСИнтегрированнымиСистемами.ПечатнаяФормаОбъектаИС();
		ПечатнаяФормаОбъектаИС.ИмяКоманды = ПечатнаяФормаXDTO.commandName;
		ПечатнаяФормаОбъектаИС.МенеджерПечати = ПечатнаяФормаXDTO.printManager;
		ПечатнаяФормаОбъектаИС.ПредставлениеКоманды = ПечатнаяФормаXDTO.commandPresentation;
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ПечатнаяФормаXDTO, "additionalParameters") Тогда
			ПечатнаяФормаОбъектаИС.ДополнительныеПараметры = ПечатнаяФормаXDTO.additionalParameters;
		КонецЕсли;
		ПечатныеФормы.Добавить(ПечатнаяФормаОбъектаИС);
	КонецЦикла;
	
	Возврат ПечатныеФормы;
	
КонецФункции

// Создает прокси веб-сервиса БИД. В случае ошибки при создании вызывается исключение.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - интегрированная система, к которой
//     выполняется подключение.
//
// Возвращаемое значение:
//   WSПрокси - Прокси веб-сервиса
//
Функция ПолучитьПрокси(ИнтегрированнаяСистема) Экспорт
	
	ДанныеАвторизации = РегистрыСведений.ДанныеИнтегрированныхСистем.ДанныеАвторизации(ИнтегрированнаяСистема);
	
	Возврат РаботаСИнтегрированнымиСистемами.ПолучитьПрокси(
		ДанныеАвторизации.АдресВебСервиса,
		ДанныеАвторизации.ИмяПользователя,
		ДанныеАвторизации.Пароль);
	
КонецФункции

// Возвращает структуру метаданных интегрированной системы.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы,
//                            Строка - система, структуру метаданных которой требуется получить.
//   БезРеквизитов - Булево - нужно ли возвращать список реквизитов объектов.
//   ТипОбъектаИС - Строка - передается, если требуется получить структуру метаданных только одного конкретного
//     объекта интегрированной системы.
//
// Возвращаемое значение:
//   ДеревоЗначений - структура метаданных:
//     * Имя - Строка
//     * Синоним - Строка
//     * ПечатныеФормы - Массив из Структура - см. РаботаСИнтегрированнымиСистемами.ПечатнаяФормаОбъектаИС
//     * СписокТипов - Массив из Строка
//     * Картинка - Картинка
//
Функция СтруктураМетаданныхИнтегрированнойСистемы(ИнтегрированнаяСистема, БезРеквизитов = Ложь,
		ТипОбъектаИС = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИнтегрированнаяСистема) Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка определения структуры метаданных интегрированной системы.
									|Интегрированная система не задана.'");
	КонецЕсли;
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПечатныеФормы", Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("СписокТипов", Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	
	Если ТипЗнч(ИнтегрированнаяСистема) = Тип("ПланОбменаСсылка.ИнтегрированныеСистемы") Тогда
		МетаданныеXDTO = РаботаСИнтегрированнымиСистемамиПовтИсп.СтруктураМетаданныхСистемыИнтегрированнойБесшовно(
			ИнтегрированнаяСистема,
			ТипОбъектаИС);
		
		Синонимы = Новый Соответствие;
		Для Каждого Строка Из МетаданныеXDTO.metadataSynonyms Цикл
			Синонимы.Вставить(Строка.name, Строка.synonym);
		КонецЦикла;
		
		ЗаполнитьВеткуДереваМетаданных(
			Результат,
			МетаданныеXDTO,
			Синонимы,
			"Справочник",
			НСтр("ru = 'Справочники'"),
			БиблиотекаКартинок.Справочник,
			БезРеквизитов);
		ЗаполнитьВеткуДереваМетаданных(
			Результат,
			МетаданныеXDTO,
			Синонимы,
			"Документ",
			НСтр("ru = 'Документы'"),
			БиблиотекаКартинок.Документ,
			БезРеквизитов);
		ЗаполнитьВеткуДереваМетаданных(
			Результат,
			МетаданныеXDTO,
			Синонимы,
			"ПланВидовХарактеристик",
			НСтр("ru = 'Планы видов характеристик'"),
			БиблиотекаКартинок.ПланВидовХарактеристик,
			БезРеквизитов);
		ЗаполнитьВеткуДереваМетаданных(
			Результат,
			МетаданныеXDTO,
			Синонимы,
			"БизнесПроцесс",
			НСтр("ru = 'Бизнес-процессы'"),
			БиблиотекаКартинок.БизнесПроцесс,
			БезРеквизитов);
		ЗаполнитьВеткуДереваМетаданных(
			Результат,
			МетаданныеXDTO,
			Синонимы,
			"Задача",
			НСтр("ru = 'Задачи'"),
			БиблиотекаКартинок.Задача,
			БезРеквизитов);
		
	ИначеЕсли ТипЗнч(ИнтегрированнаяСистема) = Тип("Строка") Тогда
		
		Если Метаданные.ПланыОбмена.ИнтегрированныеСистемы.Макеты.Найти(ИнтегрированнаяСистема) <> Неопределено Тогда
			СформироватьДеревоМетаданныхИзМакета(
				Результат,
				ИнтегрированнаяСистема,
				"Документ",
				НСтр("ru = 'Документы'"),
				БиблиотекаКартинок.Документ,
				БезРеквизитов);
		Иначе
			ДеревоМетаданныхПрограммноОпределяемойСистемы(
				ИнтегрированнаяСистема,
				Результат,
				Не БезРеквизитов);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка определения структуры метаданных интегрированной системы.
			|Интегрированная система не известного типа.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру метаданных определенного объекта интегрированной системы.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы,
//                            Строка - система, структуру метаданных которой требуется получить.
//   ПолноеИмяОбъекта - Строка - Полное имя объекта. Например, Документ.ДемоДокумент.
//
// Возвращаемое значение:
//   ДеревоЗначений - структура метаданных:
//     * Имя - Строка
//     * Синоним - Строка
//     * ПечатныеФормы - Массив из Структура - см. РаботаСИнтегрированнымиСистемами.ПечатнаяФормаОбъектаИС
//     * СписокТипов - Массив из Строка
//     * Картинка - Картинка
//
Функция СтруктураМетаданныхОбъектаИнтегрированнойСистемы(ИнтегрированнаяСистема, ПолноеИмяОбъекта) Экспорт
	
	Если РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(
			ИнтегрированнаяСистема, "3.0.3.1") Тогда
		// В БИД версии 3.0.3.1 список реквизитов передается только если запрос выполняется для конкретного объекта ИС.
		СтруктураМетаданных = РаботаСИнтегрированнымиСистемамиПовтИсп.СтруктураМетаданныхИнтегрированнойСистемы(
			ИнтегрированнаяСистема,,
			ПолноеИмяОбъекта);
	Иначе
		// В ранних версиях БИД список реквизитов передается в запросе общей структуры метаданных ИС.
		СтруктураМетаданных = РаботаСИнтегрированнымиСистемамиПовтИсп.СтруктураМетаданныхИнтегрированнойСистемы(
			ИнтегрированнаяСистема);
	КонецЕсли;
	
	ТипОбъекта = Лев(ПолноеИмяОбъекта, СтрНайти(ПолноеИмяОбъекта, ".") - 1);
	Для Каждого СтрокаТипОбъекта Из СтруктураМетаданных.Строки Цикл
		Если СтрокаТипОбъекта.Имя = ТипОбъекта Тогда
			
			Для Каждого СтрокаОбъект Из СтрокаТипОбъекта.Строки Цикл
				Если СтрокаОбъект.Имя = ПолноеИмяОбъекта Тогда
					Возврат СтрокаОбъект;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает структуру метаданных конфигурации, интегрированной через БИД.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - интегрированная система, к которой
//     выполняется подключение.
//   ТипОбъектаИС - Строка - передается, если требуется получить структуру метаданных только одного конкретного
//     объекта интегрированной системы.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILGetMetadataResponse.
//
Функция СтруктураМетаданныхСистемыИнтегрированнойБесшовно(ИнтегрированнаяСистема, ТипОбъектаИС = Неопределено) Экспорт
	
	ПараметрыСеанса.УзелИнтегрированнойСистемы = ИнтегрированнаяСистема;
	Прокси = РаботаСИнтегрированнымиСистемамиПовтИсп.ПолучитьПрокси(ИнтегрированнаяСистема);
	
	Возврат РаботаСИнтегрированнымиСистемами.СтруктураМетаданныхСистемыИнтегрированнойБесшовно(Прокси, ТипОбъектаИС);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Дополняет дерево метаданных описанием объектов программно определяемой системы.
//
// Параметры:
//   ИнтегрированнаяСистема - Строка - имя интегрированной системы.
//   ДеревоМетаданных - ДеревоЗначений - дерево метаданных интегрируемых систем.
//   ВключатьОписаниеРеквизитов - Булево - включать в описание сведения о реквизитах метаданных.
//
Процедура ДеревоМетаданныхПрограммноОпределяемойСистемы(ИнтегрированнаяСистема, ДеревоМетаданных,
		ВключатьОписаниеРеквизитов = Ложь)
	
	// АвтоматическоеСозданиеОбъектовПоДаннымЭД
	Если ИнтегрированнаяСистема = ОбменЭДОДокументооборотКлиентСервер.ОписаниеПодсистемыЭДО().Имя Тогда
		ОбменЭДОДокументооборот.ДополнитьДеревоМетаданныхИнтегрируемыхСистемОписаниемОбъектовПодсистемыЭДО(
			ДеревоМетаданных,
			ВключатьОписаниеРеквизитов);
	КонецЕсли;
	// Конец АвтоматическоеСозданиеОбъектовПоДаннымЭД
	
КонецПроцедуры

Процедура ЗаполнитьВеткуДереваМетаданных(ДеревоМетаданных, МетаданныеXDTO, Синонимы, Менеджер, Представление, Картинка,
		БезРеквизитов)
	
	ПодходящиеОбъекты = Новый ТаблицаЗначений;
	ПодходящиеОбъекты.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ПодходящиеОбъекты.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
	ПодходящиеОбъекты.Колонки.Добавить("attributes");
	ПодходящиеОбъекты.Колонки.Добавить("tabularSections");
	ПодходящиеОбъекты.Колонки.Добавить("printedForms");
	
	Для Каждого ОбъектМетаданных Из МетаданныеXDTO.metadataObjects Цикл
		Если СтрНайти(ОбъектМетаданных.name, Менеджер) = 1 Тогда
			НоваяСтрока = ПодходящиеОбъекты.Добавить();
			НоваяСтрока.Имя = ОбъектМетаданных.name;
			НоваяСтрока.attributes = ОбъектМетаданных.attributes;
			НоваяСтрока.tabularSections = ОбъектМетаданных.tabularSections;
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектМетаданных, "printedForms") Тогда
				НоваяСтрока.printedForms = ОбъектМетаданных.printedForms;
			Иначе
				НоваяСтрока.printedForms = Новый Массив;
			КонецЕсли;
			Если Синонимы[ОбъектМетаданных.name] = Неопределено Тогда
				НоваяСтрока.Синоним = ОбъектМетаданных.name;
			Иначе
				НоваяСтрока.Синоним = Синонимы[ОбъектМетаданных.name];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПодходящиеОбъекты.Сортировать("Синоним");
	
	Если ПодходящиеОбъекты.Количество() > 0 Тогда
		СтрокаГруппа = ДеревоМетаданных.Строки.Добавить();
		СтрокаГруппа.Имя = Менеджер;
		СтрокаГруппа.Синоним = Представление;
		СтрокаГруппа.Картинка = Картинка;
		Для Каждого СтрокаОбъект Из ПодходящиеОбъекты Цикл
			
			НоваяСтрока = СтрокаГруппа.Строки.Добавить();
			НоваяСтрока.Имя = СтрокаОбъект.Имя;
			НоваяСтрока.Синоним = СтрокаОбъект.Синоним;
			НоваяСтрока.ПечатныеФормы = Новый Массив;
			НоваяСтрока.Картинка = Картинка;
			
			// Заполним печатные формы.
			Для Каждого ПечатнаяФормаXDTO Из СтрокаОбъект.printedForms Цикл
				ПечатнаяФормаОбъектаИС = РаботаСИнтегрированнымиСистемами.ПечатнаяФормаОбъектаИС();
				ПечатнаяФормаОбъектаИС.ИмяКоманды = ПечатнаяФормаXDTO.commandName;
				ПечатнаяФормаОбъектаИС.МенеджерПечати = ПечатнаяФормаXDTO.printManager;
				ПечатнаяФормаОбъектаИС.ПредставлениеКоманды = ПечатнаяФормаXDTO.commandPresentation;
				Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ПечатнаяФормаXDTO, "additionalParameters") Тогда
					ПечатнаяФормаОбъектаИС.ДополнительныеПараметры = ПечатнаяФормаXDTO.additionalParameters;
				КонецЕсли;
				НоваяСтрока.ПечатныеФормы.Добавить(ПечатнаяФормаОбъектаИС);
			КонецЦикла;
			
			// Заполним реквизиты.
			Если БезРеквизитов Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаОбъект.attributes.Количество() > 0 Тогда
				НоваяСтрокаРеквизиты = НоваяСтрока.Строки.Добавить();
				НоваяСтрокаРеквизиты.Имя = "Реквизиты";
				
				Для Каждого Реквизит Из СтрокаОбъект.attributes Цикл
					НоваяСтрокаРеквизит = НоваяСтрокаРеквизиты.Строки.Добавить();
					НоваяСтрокаРеквизит.Имя = Реквизит.name;
					НоваяСтрокаРеквизит.Синоним = Реквизит.synonym;
					Для Каждого ТипРеквизита Из Реквизит.typesList Цикл
						Если Синонимы[ТипРеквизита] = Неопределено Тогда
							НоваяСтрокаРеквизит.СписокТипов.Добавить(ТипРеквизита);
						Иначе
							НоваяСтрокаРеквизит.СписокТипов.Добавить(Синонимы[ТипРеквизита]);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаОбъект.tabularSections.Количество() > 0 Тогда
				НоваяСтрокаТабЧасти = НоваяСтрока.Строки.Добавить();
				НоваяСтрокаТабЧасти.Имя = "ТабличныеЧасти";
				
				Для Каждого ТабЧасть Из СтрокаОбъект.tabularSections Цикл
					НоваяСтрокаТабЧасть = НоваяСтрокаТабЧасти.Строки.Добавить();
					НоваяСтрокаТабЧасть.Имя = ТабЧасть.name;
					НоваяСтрокаТабЧасть.Синоним = ТабЧасть.synonym;
					
					Для Каждого РеквизитТабЧасти Из ТабЧасть.attributes Цикл
						НоваяСтрокаРеквизитТабЧасти = НоваяСтрокаТабЧасть.Строки.Добавить();
						НоваяСтрокаРеквизитТабЧасти.Имя = РеквизитТабЧасти.name;
						НоваяСтрокаРеквизитТабЧасти.Синоним = РеквизитТабЧасти.synonym;
						Для Каждого ТипРеквизита Из РеквизитТабЧасти.typesList Цикл
							Если Синонимы[ТипРеквизита] = Неопределено Тогда
								НоваяСтрокаРеквизитТабЧасти.СписокТипов.Добавить(ТипРеквизита);
							Иначе
								НоваяСтрокаРеквизитТабЧасти.СписокТипов.Добавить(Синонимы[ТипРеквизита]);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СписокРеквизитовИзМакета(ИмяМакета)
	
	Результат = Новый Структура("ТаблицаСписокДокументов, ТаблицаСписокТабличныхЧастей, ТаблицаМетаданных");
	
	МетаданныеТабДок = ПланыОбмена.ИнтегрированныеСистемы.ПолучитьМакет(ИмяМакета);
	
	Результат.ТаблицаМетаданных = Новый ТаблицаЗначений;
	Результат.ТаблицаМетаданных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	Результат.ТаблицаМетаданных.Колонки.Добавить("ИмяТабличнойЧасти", Новый ОписаниеТипов("Строка"));
	Результат.ТаблицаМетаданных.Колонки.Добавить("ИмяДокумента", Новый ОписаниеТипов("Строка"));
	
	Для НомерСтроки = 2 По МетаданныеТабДок.ВысотаТаблицы Цикл
		ИмяРеквизита = СокрЛП(МетаданныеТабДок.Область(НомерСтроки, 1).Текст);
		ИмяТабличнойЧасти = СокрЛП(МетаданныеТабДок.Область(НомерСтроки, 2).Текст);
		ИмяДокумента = СокрЛП(МетаданныеТабДок.Область(НомерСтроки, 3).Текст);
		
		Если ИмяРеквизита = "" Или ИмяДокумента = "" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Результат.ТаблицаМетаданных.Добавить();
		НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
		НоваяСтрока.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
		НоваяСтрока.ИмяДокумента = ИмяДокумента;
	КонецЦикла;
	
	Результат.ТаблицаМетаданных.Свернуть("ИмяДокумента, ИмяТабличнойЧасти, ИмяРеквизита");
	Результат.ТаблицаМетаданных.Сортировать("ИмяДокумента, ИмяТабличнойЧасти, ИмяРеквизита");
	
	Результат.ТаблицаСписокДокументов = Результат.ТаблицаМетаданных.Скопировать(,"ИмяДокумента");
	Результат.ТаблицаСписокДокументов.Свернуть("ИмяДокумента");
	
	Результат.ТаблицаСписокТабличныхЧастей = Результат.ТаблицаМетаданных.Скопировать(,"ИмяДокумента, ИмяТабличнойЧасти");
	Результат.ТаблицаСписокТабличныхЧастей.Свернуть("ИмяДокумента, ИмяТабличнойЧасти");
	
	КолВоСтрок = Результат.ТаблицаСписокТабличныхЧастей.Количество();
	Для НомерСтроки = 1 По КолВоСтрок Цикл
		НомерСКонца = КолВоСтрок - НомерСтроки;
		Если Результат.ТаблицаСписокТабличныхЧастей[НомерСКонца].ИмяТабличнойЧасти = "" Тогда
			Результат.ТаблицаСписокТабличныхЧастей.Удалить(НомерСКонца);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьДеревоМетаданныхИзМакета(ДеревоМетаданных, ИмяМакета, Менеджер, Представление, Картинка,
		БезРеквизитов)
	
	СписокРеквизитовИзМакета = СписокРеквизитовИзМакета(ИмяМакета);
	
	СтрокаГруппаДокументы = ДеревоМетаданных.Строки.Добавить();
	СтрокаГруппаДокументы.Имя = Менеджер;
	СтрокаГруппаДокументы.Синоним = Представление;
	СтрокаГруппаДокументы.Картинка = Картинка;
	
	Для Каждого СтрокаДокумент Из СписокРеквизитовИзМакета.ТаблицаСписокДокументов Цикл
		НоваяСтрокаДокумент = СтрокаГруппаДокументы.Строки.Добавить();
		НоваяСтрокаДокумент.Имя = СтрШаблон("%1.%2",
			Менеджер,
			РаботаСИнтегрированнымиСистемами.ИмяБезПробелов(СтрокаДокумент.ИмяДокумента));
		НоваяСтрокаДокумент.Синоним = СтрокаДокумент.ИмяДокумента;
		НоваяСтрокаДокумент.ПечатныеФормы = Новый Массив;
		НоваяСтрокаДокумент.Картинка = Картинка;
		
		Если БезРеквизитов Тогда
			Продолжить;
		КонецЕсли;
		
		МассивРеквизитыДокумента = СписокРеквизитовИзМакета.ТаблицаМетаданных.НайтиСтроки(
			Новый Структура("ИмяДокумента, ИмяТабличнойЧасти", СтрокаДокумент.ИмяДокумента, ""));
		Если МассивРеквизитыДокумента.Количество() > 0 Тогда
			НоваяСтрокаРеквизиты = НоваяСтрокаДокумент.Строки.Добавить();
			НоваяСтрокаРеквизиты.Имя = "Реквизиты";
			
			Для Каждого РеквизитДокумента Из МассивРеквизитыДокумента Цикл
				НоваяСтрокаРеквизит = НоваяСтрокаРеквизиты.Строки.Добавить();
				НоваяСтрокаРеквизит.Имя =
					РаботаСИнтегрированнымиСистемами.ИмяБезПробелов(РеквизитДокумента.ИмяРеквизита);
				НоваяСтрокаРеквизит.Синоним = РеквизитДокумента.ИмяРеквизита;
			КонецЦикла;
		КонецЕсли;
		
		МассивТабЧастиДокумента = СписокРеквизитовИзМакета.ТаблицаСписокТабличныхЧастей.НайтиСтроки(
			Новый Структура("ИмяДокумента", СтрокаДокумент.ИмяДокумента));
		Если МассивТабЧастиДокумента.Количество() > 0 Тогда
			НоваяСтрокаТабЧасти = НоваяСтрокаДокумент.Строки.Добавить();
			НоваяСтрокаТабЧасти.Имя = "ТабличныеЧасти";
			
			Для Каждого ТабЧастьДокумента Из МассивТабЧастиДокумента Цикл
				НоваяСтрокаТабЧасть = НоваяСтрокаТабЧасти.Строки.Добавить();
				НоваяСтрокаТабЧасть.Имя =
					РаботаСИнтегрированнымиСистемами.ИмяБезПробелов(ТабЧастьДокумента.ИмяТабличнойЧасти);
				НоваяСтрокаТабЧасть.Синоним = ТабЧастьДокумента.ИмяТабличнойЧасти;
				
				МассивРеквизитыТабЧасти = СписокРеквизитовИзМакета.ТаблицаМетаданных.НайтиСтроки(
					Новый Структура("ИмяДокумента, ИмяТабличнойЧасти",
						СтрокаДокумент.ИмяДокумента, ТабЧастьДокумента.ИмяТабличнойЧасти));
				
				Для Каждого РеквизитТабЧасти Из МассивРеквизитыТабЧасти Цикл
					НоваяСтрокаРеквизитТабЧасти = НоваяСтрокаТабЧасть.Строки.Добавить();
					НоваяСтрокаРеквизитТабЧасти.Имя =
						РаботаСИнтегрированнымиСистемами.ИмяБезПробелов(РеквизитТабЧасти.ИмяРеквизита);
					НоваяСтрокаРеквизитТабЧасти.Синоним = РеквизитТабЧасти.ИмяРеквизита;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти