////////////////////////////////////////////////////////////////////////////////////////////////////
// Создание \ изменение записей исполнения и контроля
//  
////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает индекс картинки в коллекции "СостоянияКонтроля16".
//
// Параметры:
//  СостояниеКонтроля - ПеречислениеСсылка.СостоянияКонтроля.
//  КонтрольныйСрок - Дата.
//  КонтрольныйСрокОбщий - Дата.
// 
// Возвращаемое значение:
//  Число - Индекс картинки в коллекции "СостоянияКонтроля16".
//
Функция ИндексКартинкиКонтроля(СостояниеКонтроля, КонтрольныйСрок, КонтрольныйСрокОбщий) Экспорт
	
	Если СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтроле Тогда
		
		Если Не ЗначениеЗаполнено(КонтрольныйСрок) Или КонтрольныйСрок >= ТекущаяДатаСеанса() Тогда
			Возврат 1;
		Иначе
			Возврат 3;
		КонецЕсли;
		
	ИначеЕсли СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятсКонтроля Тогда
		
		Возврат 4;
		
	ИначеЕсли СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтролеНесколько Тогда
		
		Если Не ЗначениеЗаполнено(КонтрольныйСрок) Или КонтрольныйСрок >= ТекущаяДатаСеанса() Тогда
			Возврат 5;
		ИначеЕсли Не ЗначениеЗаполнено(КонтрольныйСрокОбщий) Или КонтрольныйСрокОбщий >= ТекущаяДатаСеанса() Тогда
			Возврат 8;
		Иначе
			Возврат 6;
		Конецесли;
		
	ИначеЕсли СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятсКонтроляНесколько Тогда
		
		Возврат 7;
		
	ИначеЕсли СостояниеКонтроля = Перечисления.СостоянияКонтроля.СмешанноНесколько Тогда
		
		Если Не ЗначениеЗаполнено(КонтрольныйСрок) Или КонтрольныйСрок >= ТекущаяДатаСеанса() Тогда
			Возврат 9;
		Иначе
			Возврат 10;
		КонецЕсли;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

// Возвращает все карточки контроля с учетом прав доступа
// (в том числе карточки подчиненных процессов)
//
// Параметры
//    Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//    Контролер - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи, Неопределено
//    ТолькоАктивные - Булево, Неопределенно - признак активного контроля
//
// Возвращаемое значение
//    Массив - карточек контроля по предмету
//
Функция КарточкиКонтроляПоПредмету(Предмет, Контролер = Неопределено, ТолькоАктивные = Неопределено) Экспорт 
	
	Предметы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Предмет);
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Предмет) Тогда 
		
		ПредметКонтроля = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(Предмет);
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.Задача") Тогда
		
		ИсточникЗадачи = РаботаСЗадачами.ИсточникЗадачи(Предмет);
		Если ЗначениеЗаполнено(ИсточникЗадачи) Тогда
			Предметы.Добавить(ИсточникЗадачи);
			ПредметКонтроля = ИсточникЗадачи;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		ИсточникДействияЗадачи = РаботаСЗадачами.ИсточникДействияЗадачи(Предмет);
		Если ЗначениеЗаполнено(ИсточникДействияЗадачи) Тогда
			Предметы.Добавить(ИсточникДействияЗадачи);
			ПредметКонтроля = ИсточникДействияЗадачи;
		КонецЕсли;
		
	ИначеЕсли РаботаСЗадачами.ЭтоИсточникЗадач(Предмет) Тогда
		
		ЗадачаПоИсточнику = Документы.Задача.НайтиПоИсточнику(Предмет);
		Если ЗначениеЗаполнено(ЗадачаПоИсточнику) Тогда
			Предметы.Добавить(ЗадачаПоИсточнику);
			ПредметКонтроля = ЗадачаПоИсточнику;
		КонецЕсли;
		
	ИначеЕсли РаботаСЗадачами.ЭтоИсточникДействийЗадач(Предмет) Тогда
		
		ДействиеЗадачиПоИсточнику = Документы.ДействиеЗадачи.НайтиПоИсточнику(Предмет);
		Если ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
			Предметы.Добавить(ДействиеЗадачиПоИсточнику);
			ПредметКонтроля = ДействиеЗадачиПоИсточнику;
		КонецЕсли;
		
	Иначе
		ПредметКонтроля = Предмет;
	КонецЕсли;
	
	ТекстЗапросаПоПроцессам = "";
	Для Каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		Если Не БизнесПроцесс.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.СодержитТип(ТипЗнч(ПредметКонтроля)) Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекстЗапросаПоПроцессам = ТекстЗапросаПоПроцессам +
			"ВЫБРАТЬ" + ?(ТекстЗапросаПоПроцессам = "", " РАЗРЕШЕННЫЕ " , "") + "
			|	Ссылка
			|		" + ?(ТекстЗапросаПоПроцессам = "", " ПОМЕСТИТЬ ПодчиненныеПроцессы " , "") + "
			|ИЗ
			|	БизнесПроцесс." + БизнесПроцесс.Имя + ".Предметы
			|ГДЕ 
			|	Предмет В (&Предметы) И РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
	КонецЦикла;	
	
	Если ТекстЗапросаПоПроцессам = "" Тогда 
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контроль.Ссылка
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|ГДЕ
			|	Контроль.Предмет В (&Предметы)
			|	И НЕ Контроль.ПометкаУдаления";
		
	Иначе
		
		ТекстЗапросаПоПроцессам = Лев(ТекстЗапросаПоПроцессам, СтрДлина(ТекстЗапросаПоПроцессам)-16);
		ТекстЗапросаПоПроцессам = ТекстЗапросаПоПроцессам + ";";
		
		ТекстЗапроса = ТекстЗапросаПоПроцессам + "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контроль.Ссылка
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодчиненныеПроцессы КАК ПодчиненныеПроцессы
			|		ПО Контроль.Предмет = ПодчиненныеПроцессы.Ссылка
			|ГДЕ
			|	НЕ Контроль.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Контроль.Ссылка
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|ГДЕ
			|	Контроль.Предмет В (&Предметы)
			|	И НЕ Контроль.ПометкаУдаления";
			
	КонецЕсли;
		
	ТекстЗапросаПоДействиям = ДействияСервер.ТекстЗапросаДействияПредмета(ПредметКонтроля, Истина);
	Если ЗначениеЗаполнено(ТекстЗапросаПоДействиям) Тогда
		ТекстЗапроса = ТекстЗапросаПоДействиям + ТекстЗапроса;
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Контроль.Ссылка
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДействия КАК ВсеДействия
			|		ПО Контроль.Предмет = ВсеДействия.Ссылка
			|ГДЕ
			|	НЕ Контроль.ПометкаУдаления";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Контролер) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"НЕ Контроль.ПометкаУдаления", 
			"НЕ Контроль.ПометкаУдаления
			|И Контроль.Контролер = &Контролер");
		Запрос.УстановитьПараметр("Контролер", Контролер);
	КонецЕсли;
	
	Если ТолькоАктивные <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"НЕ Контроль.ПометкаУдаления", 
			"НЕ Контроль.ПометкаУдаления
			|И Контроль.ПоставленНаКонтроль = &ТолькоАктивные
			|И Контроль.СнятСКонтроля <> &ТолькоАктивные");
			Запрос.УстановитьПараметр("ТолькоАктивные", ТолькоАктивные);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предметы", Предметы);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	   
КонецФункции

// Возвращает все карточки контроля по предмету в привилегированном режиме
// (в том числе карточки подчиненных процессов)
//
// Параметры
//    Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//    Контролер - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи, Неопределено
//    ТолькоАктивные - Булево, Неопределенно - признак активного контроля
//
// Возвращаемое значение
//    Массив - всех карточек контроля по предмету
//
Функция ВсеКарточкиКонтроляПоПредмету(Предмет, Контролер = Неопределено, ТолькоАктивные = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат КарточкиКонтроляПоПредмету(Предмет, Контролер, ТолькоАктивные);
	
КонецФункции	

// Создает карточку контроля по бизнес-процессу Исполнение, Поручение, Комплексный процесс
//
// Параметры
//    БизнесПроцесс - БизнесПроцессОбъект - бизнес-процесс основание контроля
//
Процедура СоздатьКарточкуКонтроляПоПроцессу(БизнесПроцесс) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(БизнесПроцесс.Контролер) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не БизнесПроцесс.Стартован Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не КонтрольИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	// проверка, что карточка уже есть
	ВсеКарточкиКонтроля = ВсеКарточкиКонтроляПоПредмету(БизнесПроцесс.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.Контроль КАК Контроль
	|ГДЕ
	|	Контроль.Ссылка В(&ВсеКарточкиКонтроля)
	|	И Контроль.Контролер = &Контролер
	|	И Контроль.ПоставленНаКонтроль
	|	И НЕ Контроль.СнятСКонтроля";
	
	Запрос.УстановитьПараметр("ВсеКарточкиКонтроля", ВсеКарточкиКонтроля);
	Запрос.УстановитьПараметр("Контролер", 
		Сотрудники.ОсновнойСотрудникПользователя(БизнесПроцесс.Контролер));
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;	
	
	НовыйЭлемент = Справочники.Контроль.СоздатьЭлемент();
	НовыйЭлемент.Контролер = 
		Сотрудники.ОсновнойСотрудникПользователя(БизнесПроцесс.Контролер);
	НовыйЭлемент.Заполнить(БизнесПроцесс.Ссылка);
	НовыйЭлемент.Записать();
	
КонецПроцедуры	

// Находит карточку контроля по предмету и контролеру
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//  Контролер - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли  - проверяемый контролер.
//  ПометкаУдаления - Неопределено, Булево - отметка удаления, если передана.
//  ИдентификаторПункта - УникальныйИдентификатор - ИД пункта действия.
//
// Возвращаемое значение
//    Ссылка - Справочник.Контроль - если по анализируемым параметрам найдена контрольная карточка,
//	 		 - Неопределено, в противном случае
//
Функция НайтиКарточкуКонтроляПоПредметуИКонтролеру(Предмет, 
	Контролер, 
	ПометкаУдаления = Неопределено,
	ИдентификаторПункта = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контроль.Ссылка
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	Контроль.Предмет = &Предмет
		|	И Контроль.Контролер = &Контролер
		|	И Контроль.ПоставленНаКонтроль
		|	И НЕ Контроль.СнятСКонтроля
		|	И Контроль.ИдентификаторПункта = &ИдентификаторПункта";
		
	Если ПометкаУдаления <> Неопределено Тогда 
		Запрос.Текст = Запрос.Текст + " И Контроль.ПометкаУдаления = &ПометкаУдаления ";
		Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	КонецЕсли;
			
	Если ИдентификаторПункта <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИдентификаторПункта", ИдентификаторПункта);
	Иначе
		Запрос.УстановитьПараметр("ИдентификаторПункта", 
			ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Сотрудники") Тогда
		Запрос.УстановитьПараметр("Контролер", Контролер);
	Иначе
		Запрос.УстановитьПараметр("Контролер",
			Сотрудники.ОсновнойСотрудникПользователя(Контролер));
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Создает строку контроля по задаче исполнителя
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - основание для создания строки контроля
//
Процедура СоздатьСтрокуКонтроляПоЗадаче(Задача, БизнесПроцесс = Неопределено) Экспорт 
	
	Если Не КонтрольИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Задача.Исполнитель)
		И Не ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
		Возврат;
	КонецЕсли;
	
	Если БизнесПроцесс = Неопределено Тогда 
		БизнесПроцесс = Задача.БизнесПроцесс;
	КонецЕсли;	
	
	КарточкиКонтроляПоПредмету = ВсеКарточкиКонтроляПоПредмету(БизнесПроцесс);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
	
		НоваяСтрока = КонтрольОбъект.Исполнители.Добавить();
		НоваяСтрока.Источник = Задача.Ссылка;
	
		Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда 
			НоваяСтрока.Исполнитель = Задача.Исполнитель;
		Иначе
			НоваяСтрока.Исполнитель = Задача.РольИсполнителя;
		КонецЕсли;	
			
		КонтрольОбъект.Записать();
	КонецЦикла;	
	
	// обновление карточки контроля комплексного процесса
	ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "ВедущаяЗадача");
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда 
		БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		СоздатьСтрокуКонтроляПоЗадаче(Задача, БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры	

// Обновляет строку контроля по задаче исполнителя
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - основание контроля
//
Процедура ЗаполнитьСтрокуКонтроляПоЗадаче(Задача, БизнесПроцесс = Неопределено) Экспорт 
	
	Если Не КонтрольИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Задача.Исполнитель)
		И Не ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда 
		Возврат;
	КонецЕсли;
	
	Если БизнесПроцесс = Неопределено Тогда 
		БизнесПроцесс = Задача.БизнесПроцесс;
	КонецЕсли;	
	
	КарточкиКонтроляПоПредмету = ВсеКарточкиКонтроляПоПредмету(БизнесПроцесс);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
		
		НайденнаяСтрока = КонтрольОбъект.Исполнители.Найти(Задача.Ссылка, "Источник");
		Если НайденнаяСтрока = Неопределено Тогда 
			Для Каждого Строка Из КонтрольОбъект.Исполнители Цикл
				Если ЗначениеЗаполнено(Строка.Источник) Тогда 
					Продолжить;
				КонецЕсли;	
				
				Если Строка.Исполнитель = Задача.Исполнитель
					И (ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи")
						Или ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники")) Тогда
					
					НайденнаяСтрока = Строка;
					Прервать;
				ИначеЕсли ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") 
					И Строка.Исполнитель = Задача.РольИсполнителя Тогда
					НайденнаяСтрока = Строка;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;	
		
		Если НайденнаяСтрока = Неопределено Тогда 
			Если КонтрольОбъект.Контролер = Задача.Исполнитель
				И (ТипЗнч(КонтрольОбъект.Контролер) = Тип("СправочникСсылка.Пользователи")
					Или ТипЗнч(КонтрольОбъект.Контролер) = Тип("СправочникСсылка.Сотрудники")) Тогда
				
				Продолжить;
			ИначеЕсли ТипЗнч(КонтрольОбъект.Контролер) = Тип("СправочникСсылка.ПолныеРоли")
				И КонтрольОбъект.Контролер = Задача.РольИсполнителя Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = КонтрольОбъект.Исполнители.Добавить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда 
			НайденнаяСтрока.Исполнитель = Задача.Исполнитель;
		Иначе
			НайденнаяСтрока.Исполнитель = Задача.РольИсполнителя;
		КонецЕсли;	
		
		НайденнаяСтрока.Источник = Задача.Ссылка;
		НайденнаяСтрока.Исполнено = Задача.Выполнена;
		НайденнаяСтрока.ДатаИсполнения = Задача.ДатаИсполнения;
		
		КонтрольОбъект.Записать();
	КонецЦикла;
	
	// обновление карточки контроля комплексного процесса
	Если БизнесПроцесс = Задача.БизнесПроцесс Тогда 
	
		ВедущиеПроцессы = Новый Массив;
		ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "ВедущаяЗадача");
		Пока ЗначениеЗаполнено(ВедущаяЗадача) Цикл
			ВедущийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
			ВедущиеПроцессы.Добавить(ВедущийПроцесс);
			ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущийПроцесс, "ВедущаяЗадача");
		КонецЦикла;	
	
		Для Каждого ВедущийПроцесс Из ВедущиеПроцессы Цикл
			ЗаполнитьСтрокуКонтроляПоЗадаче(Задача, ВедущийПроцесс);
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Обновляет карточку контроля по задаче исполнителя
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - основание контроля
//
Процедура ЗаполнитьКонтрольПоЗадаче(Задача) Экспорт 
	
	Если Не КонтрольИспользуется() Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Задача.Исполнитель)
		И Не ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда 
		Возврат;
	КонецЕсли;
	
	КарточкиКонтроляПоПредмету = ВсеКарточкиКонтроляПоПредмету(Задача.Ссылка);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
		
		Если КонтрольОбъект.Исполнители.Количество() > 0 Тогда 
			НайденнаяСтрока = КонтрольОбъект.Исполнители[0];
		Иначе
			НайденнаяСтрока = КонтрольОбъект.Исполнители.Добавить();
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда 
			НайденнаяСтрока.Исполнитель = Задача.Исполнитель;
		Иначе
			НайденнаяСтрока.Исполнитель = Задача.РольИсполнителя;
		КонецЕсли;	
		
		НайденнаяСтрока.Источник = Задача.Ссылка;
		НайденнаяСтрока.Исполнено = Задача.Выполнена;
		НайденнаяСтрока.ДатаИсполнения = Задача.ДатаИсполнения;
		
		Если Задача.ДополнительныеСвойства.Свойство("СтарыйСрокИсполнения") Тогда 
			СтарыйСрокИсполнения = Задача.ДополнительныеСвойства.СтарыйСрокИсполнения;
			Если НачалоДня(СтарыйСрокИсполнения) = КонтрольОбъект.СрокИсполнения
			   И НачалоДня(Задача.СрокИсполнения) <> КонтрольОбъект.СрокИсполнения Тогда 
				КонтрольОбъект.СрокИсполнения = Задача.СрокИсполнения;
			КонецЕсли;	
		КонецЕсли;	
		
		КонтрольОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Удаляет или создает строку контроля по задаче исполнителя
//
// Параметры:
//  Задача  - ЗадачаОбъект.ЗадачаИсполнителя - основание контроля
//  Отметка - Булево - значение свойства ПометкаУдаления. 
//
Процедура ОтметитьУдалениеСтрокиКонтроляПоЗадаче(Задача, Отметка, БизнесПроцесс = Неопределено) Экспорт 
	
	Если Не КонтрольИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если БизнесПроцесс = Неопределено Тогда 
		БизнесПроцесс = Задача.БизнесПроцесс;
	КонецЕсли;	
	
	КарточкиКонтроляПоПредмету = ВсеКарточкиКонтроляПоПредмету(БизнесПроцесс);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		Если Отметка Тогда 
			КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
			НайденнаяСтрока = КонтрольОбъект.Исполнители.Найти(Задача.Ссылка, "Источник");
			Если НайденнаяСтрока <> Неопределено Тогда 
				КонтрольОбъект.Исполнители.Удалить(НайденнаяСтрока);
				КонтрольОбъект.Записать();
			КонецЕсли;
		Иначе
			СоздатьСтрокуКонтроляПоЗадаче(Задача, БизнесПроцесс);
		КонецЕсли;
	КонецЦикла;
	
	// обновление карточки контроля комплексного процесса
	ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "ВедущаяЗадача");
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда 
		БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		ОтметитьУдалениеСтрокиКонтроляПоЗадаче(Задача, Отметка, БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры	

// Изменяет реквизит Источник в строке контрольной карточки
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//  СтарыйИсточник - Строка.ЗадачаИсполнителя
//  НовыйИсточник - ЗадачаСсылка
Процедура УстановитьНовыйИсточникВСтрокеКонтроля(Предмет, СтарыйИсточник, НовыйИсточник) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтарыйИсточник) Тогда 
		Возврат;
	КонецЕсли;	
	
	КарточкиКонтроляПоПредмету = Контроль.ВсеКарточкиКонтроляПоПредмету(Предмет);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
		НайденнаяСтрока = КонтрольОбъект.Исполнители.Найти(СтарыйИсточник, "Источник");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НайденнаяСтрока.Источник = НовыйИсточник;
			НайденнаяСтрока.Проконтролировано = Ложь;
			НайденнаяСтрока.ДатаКонтроля = '00010101';
			Если Не ЗначениеЗаполнено(НовыйИсточник) Тогда 
				НайденнаяСтрока.Исполнено = Ложь;
				НайденнаяСтрока.ДатаИсполнения = '00010101';
			КонецЕсли;
			КонтрольОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

// Изменяет реквизит Источник в строке контрольной карточки
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//  СтруктураИсполнитель - Структура - структура с ключом Исполнитель.
//  НовыйИсточник - ЗадачаСсылка
Процедура УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Предмет, СтруктураИсполнитель, НовыйИсточник) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	КарточкиКонтроляПоПредмету = Контроль.ВсеКарточкиКонтроляПоПредмету(Предмет);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
		
		НайденнаяСтрока = Неопределено;
		НайтиСтрокуКонтроляПоИсполнителю(КонтрольОбъект, СтруктураИсполнитель, НайденнаяСтрока);
		Если НайденнаяСтрока = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.Источник) Тогда 
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока.Источник = НовыйИсточник;
		НайденнаяСтрока.Проконтролировано = Ложь;
		НайденнаяСтрока.ДатаКонтроля = '00010101';
		
		Если Не ЗначениеЗаполнено(НовыйИсточник) Тогда 
			НайденнаяСтрока.Исполнено = Ложь;
			НайденнаяСтрока.ДатаИсполнения = '00010101';
		КонецЕсли;	
		
		КонтрольОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры	

// Устанавливает видимость, подсказку, картинку для кнопки контроля в письме
// Параметры
//  Форма  - ФормаКлиентскогоПриложения - форма карточки письма.
//
Процедура УстановитьСвойстваКнопкиКонтроляПисьма(Форма) Экспорт 
	
	Объект = Форма.Объект;
	Письмо = Форма.Объект.Ссылка;
	ЭлементКонтроль = Форма.Команды.Контроль;
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Форма.Элементы.Контроль.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ВеткаПереписки = Неопределено;
	Если ЗначениеЗаполнено(Письмо) Тогда 
		ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(Письмо);
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ИсходящееПисьмо") 
			И ЗначениеЗаполнено(Объект.ПисьмоОснование) Тогда 
		ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(Объект.ПисьмоОснование);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ВеткаПереписки) Тогда 
		ЭлементКонтроль.Картинка = БиблиотекаКартинок.КартинкаКонтроль24;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'Не стоит на контроле'");
		Возврат;
	КонецЕсли;	
	
	СведенияОКонтроле = ПолучитьСведенияОКонтроле(ВеткаПереписки);
	Если Не ЗначениеЗаполнено(СведенияОКонтроле.СостояниеКонтроля) Тогда 
		
		ЭлементКонтроль.Картинка = БиблиотекаКартинок.КартинкаКонтроль24;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'Не стоит на контроле'");
		
	ИначеЕсли СведенияОКонтроле.СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятСКонтроля Тогда 
	
		ЭлементКонтроль.Картинка = БиблиотекаКартинок.КартинкаСнятоСКонтроля24;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'Снято с контроля'");
		
	ИначеЕсли СведенияОКонтроле.СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтроле Тогда 
	
		Если ЗначениеЗаполнено(СведенияОКонтроле.СрокИсполнения) И ТекущаяДата > СведенияОКонтроле.СрокИсполнения Тогда 
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.КартинкаКонтрольПросрочено24;
		Иначе	
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.КартинкаНаКонтроле24;
		КонецЕсли;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'На контроле'");
	
	ИначеЕсли СведенияОКонтроле.СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтролеНесколько Тогда 
		
		Если Не ЗначениеЗаполнено(СведенияОКонтроле.СрокИсполнения) Или СведенияОКонтроле.СрокИсполнения >= ТекущаяДата Тогда 
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.НаКонтролеНесколько24;
		ИначеЕсли Не ЗначениеЗаполнено(СведенияОКонтроле.СрокИсполненияОбщий) Или СведенияОКонтроле.СрокИсполненияОбщий >= ТекущаяДата Тогда 
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.НаКонтролеНесколькоСмешанно24;
		Иначе
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.НаКонтролеНесколькоПросрочено24;
		КонецЕсли;	
		ЭлементКонтроль.Подсказка = НСтр("ru = 'На контроле (несколько)'");
		
	ИначеЕсли СведенияОКонтроле.СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятСКонтроляНесколько Тогда 
		
		ЭлементКонтроль.Картинка = БиблиотекаКартинок.СнятСКонтроляНесколько24;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'Снят с контроля (несколько)'");
		
	ИначеЕсли СведенияОКонтроле.СостояниеКонтроля = Перечисления.СостоянияКонтроля.СмешанноНесколько Тогда 	
		
		Если Не ЗначениеЗаполнено(СведенияОКонтроле.СрокИсполнения) Или СведенияОКонтроле.СрокИсполнения >= ТекущаяДата Тогда 
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.СнятСКонтроляСмешанноНеПросрочено24;
		Иначе
			ЭлементКонтроль.Картинка = БиблиотекаКартинок.СнятСКонтроляСмешанноПросрочено24;
		КонецЕсли;
		ЭлементКонтроль.Подсказка = НСтр("ru = 'На контроле и снят с контроля'");
		
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает Состояние контроля и Срок исполнения из данных контрольных карточек
// (не учитываются карточки подчиненных процессов)
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//
// Возвращаемое значение
//    Структура - содержит в себе Состояние контроля и Срок исполнения
//
Функция ПолучитьСведенияОКонтроле(Предмет) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контроль.Ссылка,
		|	Контроль.СнятСКонтроля,
		|	Контроль.ПоставленНаКонтроль,
		|	Контроль.СрокИсполнения
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	НЕ Контроль.ПометкаУдаления
		|	И Контроль.Предмет = &Предмет";
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда 
		
		СрокИсполнения = '00010101';
		СрокИсполненияОбщий = '00010101';
		СостояниеКонтроля = Перечисления.СостоянияКонтроля.ПустаяСсылка();
		
	ИначеЕсли Результат.Количество() = 1 Тогда 
		
		СрокИсполнения = Результат[0].СрокИсполнения;
		СрокИсполненияОбщий = СрокИсполнения;
		Если Результат[0].СнятСКонтроля Тогда 
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятСКонтроля;
		Иначе
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтроле;
		КонецЕсли;	
		
	Иначе
		
		Если Результат.Найти(Истина, "СнятСКонтроля") <> Неопределено
			И Результат.Найти(Ложь, "СнятСКонтроля") <> Неопределено Тогда 
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.СмешанноНесколько;
		ИначеЕсли Результат.Найти(Истина, "СнятСКонтроля") <> Неопределено Тогда 
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятСКонтроляНесколько;
		Иначе	
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтролеНесколько;
		КонецЕсли;	
		
		СрокИсполненияКеш = '39990101';
		СрокИсполненияОбщийКеш = '00010101';
		ЕстьПустойСрок = Ложь;
		Для Каждого Строка Из Результат Цикл 
			Если Строка.СнятСКонтроля Тогда 
				Продолжить;
			КонецЕсли;	
			Если ЗначениеЗаполнено(Строка.СрокИсполнения) И Строка.СрокИсполнения < СрокИсполненияКеш Тогда 
				СрокИсполненияКеш = Строка.СрокИсполнения;
			КонецЕсли;
			Если Строка.СрокИсполнения > СрокИсполненияОбщийКеш Тогда 
				СрокИсполненияОбщийКеш = Строка.СрокИсполнения;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.СрокИсполнения) Тогда 
				ЕстьПустойСрок = Истина;
			КонецЕсли;	
		КонецЦикла;	
		Если СрокИсполненияКеш = '39990101' Тогда 
			СрокИсполненияКеш = '00010101';
		КонецЕсли;	
		Если ЕстьПустойСрок Тогда 
			СрокИсполненияОбщийКеш = '00010101';
		КонецЕсли;
		
	КонецЕсли;	
	
	Результат = Новый Структура("СостояниеКонтроля, СрокИсполнения, СрокИсполненияОбщий",
		СостояниеКонтроля, СрокИсполнения, СрокИсполненияОбщий);
	
	Возврат Результат;
	
КонецФункции	

// Возвращает Состояние контроля и Срок исполнения из кеша
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - проверяемый предмет
//
// Возвращаемое значение
//    Структура - содержит в себе Состояние контроля и Срок исполнения
//
Функция ПолучитьСведенияОКонтролеИзКеша(Предмет) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("СостояниеКонтроля, СрокИсполнения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КешИнформацииОбОбъектах.СостояниеКонтроля,
		|	КешИнформацииОбОбъектах.СрокИсполнения
		|ИЗ
		|	РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|ГДЕ
		|	КешИнформацииОбОбъектах.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Предмет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Заполняет список контролеров в карточке контроля
//
// Параметры:
//  Контролеры - список значений - заполняемый список контролеров
//  ЭлементКонтролер - поле формы - контролер объекта
//
Процедура ЗаполнитьСписокКонтролеров(Контролеры, ЭлементКонтролер) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не Константы.ДокументооборотИспользоватьОграничениеПравДоступа.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбластиЗамещения = ЗамещающиеИПомощники.ОбластиЗамещенияПоИдентификаторуОбъектаМетаданных(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Контроль"));
	
	ТекущийСотрудник = Сотрудники.ОсновнойСотрудник();

	Замещения = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещенияСотрудников(
		ПараметрыСеанса.СотрудникиПользователя, ОбластиЗамещения);
	
	ЭтоДелегатРуководителя = Ложь;
	РуководителиПодразделений = Новый Массив;
	Для Каждого Замещение Из Замещения Цикл
		Контролеры.Добавить(Замещение.Сотрудник);
		Если СтруктураПредприятия.ЭтоРуководитель(Замещение.Сотрудник) Тогда
			РуководителиПодразделений.Добавить(Замещение.Сотрудник);
			ЭтоДелегатРуководителя = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// добавление подчиненных
	Если СтруктураПредприятия.ЭтоРуководитель(ТекущийСотрудник)
		И Константы.ДобавлятьРуководителямДоступПодчиненных.Получить()
		Или ЭтоДелегатРуководителя Тогда
		
		Если СтруктураПредприятия.ЭтоРуководитель(ТекущийСотрудник) Тогда
			РуководителиПодразделений.Добавить(Новый Массив(ПараметрыСеанса.СотрудникиПользователя));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ ПодчиненныеСотрудники
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
			|		ПО (Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное)
			|ГДЕ
			|	ПодчиненностьПодразделений.РуководительВышестоящего В (&СотрудникиПользователя)
			|	И Сотрудники.Действует
			|	И НЕ Сотрудники.Ссылка В (&СотрудникиПользователя)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПодчиненныеСотрудники.Сотрудник КАК Подчиненный
			|ИЗ
			|	ПодчиненныеСотрудники КАК ПодчиненныеСотрудники
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПолныеРоли.Владелец
			|ИЗ
			|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодчиненныеСотрудники КАК ПодчиненныеСотрудники
			|		ПО ИсполнителиРолей.Исполнитель = ПодчиненныеСотрудники.Сотрудник
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
			|		ПО ИсполнителиРолей.РольИсполнителя = ПолныеРоли.Ссылка";
		Запрос.УстановитьПараметр("СотрудникиПользователя", ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			РуководителиПодразделений));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Контролеры.Добавить(Выборка.Подчиненный);
		КонецЦикла;
		
	КонецЕсли;
	
	// добавление ролей
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПолныеРоли.Владелец КАК РольИсполнителя
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО (ИсполнителиРолей.ИсполнительДелегат = СотрудникиПользователей.Сотрудник)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
		|		ПО (ИсполнителиРолей.РольСотрудник = ПолныеРоли.Ссылка)
		|ГДЕ
		|	ИсполнителиРолей.ИсполнительДелегат В (&СотрудникиПользователя)
		|	И ИсполнителиРолей.ИмяОбластиДелегирования В (&ОбластиЗамещения)";
	
	Запрос.УстановитьПараметр("СотрудникиПользователя", ПараметрыСеанса.СотрудникиПользователя);
	Запрос.УстановитьПараметр("ОбластиЗамещения", 
		ЗамещающиеИПомощники.ОбластиЗамещенияПоИдентификаторуОбъектаМетаданных(
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Контроль")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Контролеры.Добавить(Выборка.РольИсполнителя);
	КонецЦикла;	
	
	Если Контролеры.НайтиПоЗначению(ТекущийСотрудник) = Неопределено Тогда 
		Контролеры.Добавить(ТекущийСотрудник);
	КонецЕсли;	
		
	Контролеры.СортироватьПоЗначению();
	
КонецПроцедуры	

// Обработка команды Контроль
Процедура ОбработкаКомандыКонтроль(Знач Предмет, ИмяФормы, ПараметрыФормы) Экспорт 

	Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Предмет) Тогда 
		ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(Предмет);
	КонецЕсли;	
	
	ВсеКарточки = Контроль.ВсеКарточкиКонтроляПоПредмету(Предмет);
	Результат = Контроль.КарточкиКонтроляПоПредмету(Предмет);
	
	Если ВсеКарточки.Количество() > Результат.Количество() Тогда 
		
		Если ВсеКарточки.Количество() = 1 Тогда 
			ИмяФормы = "Справочник.Контроль.Форма.НедоступнаяКарточка";
			ПараметрыФормы = Новый Структура("Ключ, Предмет", ВсеКарточки[0].Ссылка, Предмет);
		Иначе	
			ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
			ПараметрыФормы = Новый Структура("Предмет", Предмет);
		КонецЕсли;	
		
	ИначеЕсли Результат.Количество() > 1 Тогда 
		
		ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
		ПараметрыФормы = Новый Структура("Предмет", Предмет);
		
	ИначеЕсли Результат.Количество() = 1 И Результат[0].СнятСКонтроля Тогда 	
		
		ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
		ПараметрыФормы = Новый Структура("Предмет", Предмет);
		
	ИначеЕсли Результат.Количество() = 1 
		И ТипЗнч(Результат[0].Контролер) = Тип("СправочникСсылка.Пользователи") 
		И Результат[0].Контролер <> ПользователиКлиентСервер.ТекущийПользователь() Тогда 
		
		ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
		ПараметрыФормы = Новый Структура("Предмет", Предмет);
		
	ИначеЕсли Результат.Количество() = 1 
		И ТипЗнч(Результат[0].Контролер) = Тип("СправочникСсылка.Сотрудники") 
		И Результат[0].Контролер <> Сотрудники.ОсновнойСотрудник() Тогда 
		
		ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
		ПараметрыФормы = Новый Структура("Предмет", Предмет);
		
	ИначеЕсли Результат.Количество() = 1 
		И Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Предмет)
		И Результат[0].Предмет <> Предмет Тогда 
		
		ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
		ПараметрыФормы = Новый Структура("Предмет", Предмет);
		
	ИначеЕсли Результат.Количество() = 1 
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Предмет)
		И Результат[0].Предмет <> ВеткаПереписки Тогда 	
		
		ИмяФормы = "Справочник.Контроль.Форма.СписокПоПредмету";
		ПараметрыФормы = Новый Структура("Предмет", Предмет);
		
	ИначеЕсли Результат.Количество() = 1 Тогда 
		
		ИмяФормы = "Справочник.Контроль.Форма.ФормаЭлемента";
		ПараметрыФормы = Новый Структура("Ключ", Результат[0].Ссылка);	
		
	Иначе
		
		ИмяФормы = "Справочник.Контроль.Форма.ФормаНового";
		ПараметрыФормы = Новый Структура("Основание", Предмет);
		
	КонецЕсли;	
	
КонецПроцедуры

// Находит строчку в карточке контроля по адресату
//
// Параметры:
//  КарточкаКонтроля     - СправочникОбъект.Контроль - элемент справочника контроль
//  Адресат              - АдресатСсылка - ссылка на АдресатаПочтовыхСообщений
//  ВозврНайденнаяСтрока - строка таблицы Исполнители
//
Процедура НайтиСтрокуКонтроляПоАдресату(КарточкаКонтроля, Адресат, ВозврНайденнаяСтрока) Экспорт 
	
	АдресАдресата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Адресат, "Адрес");
	
	ВозврНайденнаяСтрока = Неопределено;
	Для Каждого Строка Из КарточкаКонтроля.Исполнители Цикл
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда 
			АдресИсполнителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Исполнитель, "Адрес");
			Если АдресИсполнителя = АдресАдресата Тогда 
				ВозврНайденнаяСтрока = Строка;
				Прервать;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Находит строчку в карточке контроля по исполнителю
//
// Параметры:
//  КарточкаКонтроля     - Справочник.Контроль - элемент справочника контроль
//  СтруктураИсполнитель - Структура - структура с ключом Исполнитель.
//  ВозврНайденнаяСтрока - строка таблицы Исполнители
//
Процедура НайтиСтрокуКонтроляПоИсполнителю(КарточкаКонтроля, СтруктураИсполнитель, ВозврНайденнаяСтрока) Экспорт 
	
	ВозврНайденнаяСтрока = Неопределено;
	
	Для Каждого Строка Из КарточкаКонтроля.Исполнители Цикл
		Если ТипЗнч(СтруктураИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(СтруктураИсполнитель.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда 
			Если Строка.Исполнитель = СтруктураИсполнитель.Исполнитель Тогда
				ВозврНайденнаяСтрока = Строка;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтруктураИсполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				Если Строка.Исполнитель = СтруктураИсполнитель.Исполнитель Тогда
					ВозврНайденнаяСтрока = Строка;
					Прервать;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Строка.Источник) И ТипЗнч(Строка.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
				ДанныеИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Источник,
					"РольИсполнителя");
				Если ДанныеИсточника.РольИсполнителя = СтруктураИсполнитель.Исполнитель Тогда
					ВозврНайденнаяСтрока = Строка;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует представление предмета контроля
//
// Параметры:
//  Предмет - ссылка на предмет справочника Контроль - анализируемый предмет
//
// Возвращаемое значение
//    ПредставлениеПредмета - Строка - содержит в себе наименование и тип предмета
//
Функция СформироватьПредставлениеПредмета(Предмет) Экспорт 
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда 
		Возврат "";
	КонецЕсли;	
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда 
		Объект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "КорневоеПисьмо");
	Иначе
		Объект = Предмет;
 	КонецЕсли;
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект) Тогда 
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Тема");
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Наименование");
	Иначе
		Наименование = Строка(Объект);
 	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		ПредставлениеОбъекта = НСтр("ru = 'Неопределено'");
	ИначеЕсли ЗначениеЗаполнено(Объект.Метаданные().ПредставлениеОбъекта) Тогда 
		ПредставлениеОбъекта = Объект.Метаданные().ПредставлениеОбъекта; 
	Иначе 	
		ПредставлениеОбъекта = Объект.Метаданные().Синоним;
	КонецЕсли;
		
	ПредставлениеПредмета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
		Наименование, ПредставлениеОбъекта);
		
	Возврат ПредставлениеПредмета;

КонецФункции

// Проверяет что предмет уже поставлен на контроль указанным контролером
//
// Параметры:
//  Предмет          - Ссылка на предмет справочника Контроль - анализируемый предмет
//  Контролер        - ПользовательСсылка  - проверяемый контролер
//  КарточкаКонтроля - Справочник.Контроль - элемент справочника контроль
//
// Возвращаемое значение
//    Булево - Истина, если предмет уже поставлен на контроль указанным контролером
//
Функция ПредметНаКонтролеУКонтролера(Предмет, Контролер, КарточкаКонтроля) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контроль.Ссылка
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	НЕ Контроль.ПометкаУдаления
		|	И Контроль.ПоставленНаКонтроль
		|	И НЕ Контроль.СнятСКонтроля
		|	И Контроль.Предмет = &Предмет
		|	И Контроль.Контролер = &Контролер
		|	И Контроль.Ссылка <> &КарточкаКонтроля";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("Контролер", 
		Сотрудники.ОсновнойСотрудникПользователя(Контролер));
	Запрос.УстановитьПараметр("КарточкаКонтроля", КарточкаКонтроля);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Записывает в реквизит Источник строки контрольной карточки
// ссылку на последнее письмо в переписке
//
// Параметры:
//  ВеткаПереписки - Справочник.ВеткиПереписки - элемент справочника ветки переписки
//  Письмо         - Документ.ИсходящееПисьмо
//                 - Документ.ВходящееПисьмо - отмечаемое письмо
//
Процедура ОтметитьПоследнееПисьмоВКонтрольнойКарточке(ВеткаПереписки, Письмо) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контроль.Ссылка
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	Контроль.Предмет = &Предмет
		|	И НЕ Контроль.ПометкаУдаления
		|	И НЕ Контроль.СнятСКонтроля";
	
	Запрос.УстановитьПараметр("Предмет", ВеткаПереписки);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;	
	
	МассивАдресатов = Новый Массив;
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда 
		МассивАдресатов.Добавить(Письмо.ОтправительАдресат);
	Иначе
		Для Каждого Строка Из Письмо.ПолучателиПисьма Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;	
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КонтрольОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого Адресат Из МассивАдресатов Цикл
			НайденнаяСтрока = Неопределено;
			Контроль.НайтиСтрокуКонтроляПоАдресату(КонтрольОбъект, Адресат, НайденнаяСтрока);
			Если НайденнаяСтрока = Неопределено Тогда 
				НайденнаяСтрока = КонтрольОбъект.Исполнители.Добавить();
				НайденнаяСтрока.Исполнитель = 
					Сотрудники.ОсновнойСотрудникПользователя(Адресат);
			КонецЕсли;	
			Если НайденнаяСтрока.Проконтролировано Тогда 
				Продолжить;
			КонецЕсли;
			НайденнаяСтрока.Источник = Письмо;
		КонецЦикла;	
		КонтрольОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры	

// Обновляет карточку контроля по процессу с контролером
// вызывается при записи процесса
//
// Параметры:
//  Объект - СправочникОбъект.Контроль - элемент справочника Контроль
//
Процедура ПриЗаписиПроцессаСКонтролером(Объект) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не КонтрольИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Объект.Ссылка;
	Стартован = Объект.Стартован;
	ПометкаУдаления = Объект.ПометкаУдаления;
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	Контролер = Сотрудники.ОсновнойСотрудникПользователя(Объект.Контролер);
	СрокИсполненияПроцесса = Объект.СрокИсполненияПроцесса;
	СостояниеБизнесПроцесса = Объект.Состояние;
	
	Если Стартован Тогда 
		
		Если Не ДополнительныеСвойства.БылСтартован Тогда 
			
			Контроль.СоздатьКарточкуКонтроляПоПроцессу(Объект);
			
		ИначеЕсли ДополнительныеСвойства.ПредыдущаяПометкаУдаления <> ПометкаУдаления Тогда 	
			
			КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				Контролер, 
				ДополнительныеСвойства.ПредыдущаяПометкаУдаления);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			КонецЕсли;	
			
		ИначеЕсли СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда 
			
			КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				Контролер, Ложь);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.СнятСКонтроля = Истина;
				КарточкаКонтроляОбъект.ДатаСнятияСКонтроля = ТекущаяДата();
				
				Для Каждого Строка Из КарточкаКонтроляОбъект.Исполнители Цикл
					Если Не Строка.Проконтролировано Тогда 
						Строка.Проконтролировано = Истина;
						Строка.ДатаКонтроля = ТекущаяДата();
					КонецЕсли;
				КонецЦикла;
				КарточкаКонтроляОбъект.Записать();
			КонецЕсли;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДополнительныеСвойства.СтарыйКонтролер) И ЗначениеЗаполнено(Контролер) Тогда 
			
			Контроль.СоздатьКарточкуКонтроляПоПроцессу(Объект);
			
		ИначеЕсли ЗначениеЗаполнено(ДополнительныеСвойства.СтарыйКонтролер) И Не ЗначениеЗаполнено(Контролер) Тогда 	
			
			КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				ДополнительныеСвойства.СтарыйКонтролер, 
				ПометкаУдаления);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		ИначеЕсли ДополнительныеСвойства.СтарыйКонтролер <> Контролер
			И ЗначениеЗаполнено(Контролер) Тогда 	
			
			КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				ДополнительныеСвойства.СтарыйКонтролер, 
				ПометкаУдаления);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.Контролер = Контролер;
				КарточкаКонтроляОбъект.Записать();
			КонецЕсли;
			
		ИначеЕсли ДополнительныеСвойства.Свойство("СтарыйСрокИсполненияПроцесса")
			И ДополнительныеСвойства.СтарыйСрокИсполненияПроцесса <> СрокИсполненияПроцесса Тогда
			
			КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				Контролер, 
				ДополнительныеСвойства.ПредыдущаяПометкаУдаления);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.СрокИсполнения = СрокИсполненияПроцесса;
				КарточкаКонтроляОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Добавляет контролеров по предмету в переданную таблицу
// для последующей записи в рабочую группу
//
// Параметры:
//  ТаблицаНабора - таблица значений - для записи в рабочую группу
//  Предмет       - Ссылка на предмет справочника Контроль - анализируемый предмет
//
Процедура ДобавитьКонтролеровВТаблицу(ТаблицаНабора, Предмет) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Или 
		Не ЗначениеЗаполнено(Предмет) Тогда 
		Возврат;
	КонецЕсли;
	
	КарточкиКонтроля = Контроль.ВсеКарточкиКонтроляПоПредмету(Предмет);
	Для Каждого КарточкаКонтроля Из КарточкиКонтроля Цикл
		РеквизитыКонтроля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КарточкаКонтроля,
			"Контролер");
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, 
			РеквизитыКонтроля.Контролер);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет что предмет является процессом с реквизитом Контролер
//
// Параметры:
//  Предмет          - Ссылка на предмет справочника Контроль - анализируемый предмет
//
// Возвращаемое значение
//    Булево - Истина, если предмет является процессом с реквизитом Контролер
//
Функция ЭтоПроцессСКонтролером(Предмет) Экспорт 
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.Исполнение");
		
КонецФункции

// Определяет, сколько всего объектов находится на контроле.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  Число
//
Функция ВсегоНаКонтроле(Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КоличествоКонтролей.НаКонтролеОстаток КАК ВсегоНаКонтроле
		|ИЗ
		|	РегистрНакопления.КоличествоКонтролей.Остатки(, Пользователь = &Пользователь) КАК КоличествоКонтролей");
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ВсегоНаКонтроле;
	
КонецФункции

// Определяет, сколько всего объектов находится на контроле, контрольный срок которых истёк.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  Число
//
Функция ПросроченоНаКонтроле(Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КоличествоКонтролей.ПросроченоОстаток КАК ПросроченоНаКонтроле
		|ИЗ
		|	РегистрНакопления.КоличествоКонтролей.Остатки(, Пользователь = &Пользователь) КАК КоличествоКонтролей");
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ПросроченоНаКонтроле;
	
КонецФункции

// Определяет, какие контроли явлются ближайшими.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  Массив из см. РаботаСВиджетами.ДанныеСтрокиСписка
//
Функция БлижайшиеКонтроли(Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	РеестрКонтролей.Основание КАК Контроль
		|ИЗ
		|	РегистрСведений.РеестрКонтролей КАК РеестрКонтролей
		|ГДЕ
		|	РеестрКонтролей.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеестрКонтролей.ДатаСортировки");
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	МаксимальноеКоличествоСтрокВиджетаСписок = РаботаСВиджетами.МаксимальноеКоличествоСтрокВиджетаСписок();
	Если МаксимальноеКоличествоСтрокВиджетаСписок > 1 Тогда
		// В одной строке отображаются просроченные, зарезервируем её.
		МаксимальноеКоличествоСтрокВиджетаСписок = МаксимальноеКоличествоСтрокВиджетаСписок - 1;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"ПЕРВЫЕ 5",
		СтрШаблон(
			"ПЕРВЫЕ %1",
			Формат(МаксимальноеКоличествоСтрокВиджетаСписок, "ЧГ=")));
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	ВыбранныеКонтроли = ТаблицаРезультата.ВыгрузитьКолонку("Контроль");
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыКонтролей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВыбранныеКонтроли, "Предмет, СрокИсполнения");
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	БлижайшиеКонтроли = Новый Массив;
	Для Каждого ВыбранныйКонтроль Из ВыбранныеКонтроли Цикл
		
		РеквизитыКонтроля = РеквизитыКонтролей[ВыбранныйКонтроль];
		
		ДанныеСтрокиСписка = РаботаСВиджетами.ДанныеСтрокиСписка();
		Если ЗначениеЗаполнено(РеквизитыКонтроля.Предмет)
			И ТипЗнч(РеквизитыКонтроля.Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда
			УстановитьОтключениеБезопасногоРежима(Истина);
			УстановитьПривилегированныйРежим(Истина);
			ВеткаПереписки = РеквизитыКонтроля.Предмет; // СправочникСсылка.ВеткиПереписки
			СсылкаПредставления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаПереписки, "КорневоеПисьмо");
			УстановитьПривилегированныйРежим(Ложь);
			УстановитьОтключениеБезопасногоРежима(Ложь);
		ИначеЕсли ЗначениеЗаполнено(РеквизитыКонтроля.Предмет)
			И ТипЗнч(РеквизитыКонтроля.Предмет) <> Тип("СправочникСсылка.ВеткиПереписки") Тогда
			СсылкаПредставления = РеквизитыКонтроля.Предмет;
		Иначе
			СсылкаПредставления = ВыбранныйКонтроль;
		КонецЕсли;
		ДанныеСтрокиСписка.Значение = Строка(СсылкаПредставления);
		ДанныеСтрокиСписка.Ссылка = ПолучитьНавигационнуюСсылку(ВыбранныйКонтроль);
		ДанныеСтрокиСписка.ИндексКартинки = 0;
		ДанныеСтрокиСписка.Комментарий = РаботаСВиджетами.ПредставлениеДатыСписка(РеквизитыКонтроля.СрокИсполнения);
		
		БлижайшиеКонтроли.Добавить(ДанныеСтрокиСписка);
		
	КонецЦикла;
	
	Возврат БлижайшиеКонтроли;
	
КонецФункции
	
// Обновляет карточку контроля по действию с контролером
// вызывается при записи действия
//
// Параметры:
//  Объект - СправочникОбъект.ДействияИсполнения - контролируемый объект
//
Процедура ПриЗаписиДействияСКонтролером(Объект) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не КонтрольИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Объект.Ссылка;
	СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Объект.Ссылка);
	ПометкаУдаления = Объект.ПометкаУдаления;
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	Контролер = Объект.Контролер;
	
	Если ЗначениеЗаполнено(СостояниеДействия) Тогда 
		
		Если ДополнительныеСвойства.Свойство("СтароеСостояниеДействия") 
			И Не ЗначениеЗаполнено(ДополнительныеСвойства.СтароеСостояниеДействия) Тогда 
			
			СоздатьКарточкуКонтроляПоДействию(Объект);
			
		ИначеЕсли СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Остановлено Тогда 
			
			КарточкаКонтроля = НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				Контролер, Ложь);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.СнятСКонтроля = Истина;
				КарточкаКонтроляОбъект.ДатаСнятияСКонтроля = ТекущаяДатаСеанса();
				
				Для Каждого Строка Из КарточкаКонтроляОбъект.Исполнители Цикл
					Если Не Строка.Проконтролировано Тогда 
						Строка.Проконтролировано = Истина;
						Строка.ДатаКонтроля = ТекущаяДатаСеанса();
					КонецЕсли;
				КонецЦикла;
				КарточкаКонтроляОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьПредмет", Истина);
				КарточкаКонтроляОбъект.Записать();
			КонецЕсли;
			
		ИначеЕсли ДополнительныеСвойства.Свойство("СтарыйКонтролер") 
			И Не ЗначениеЗаполнено(ДополнительныеСвойства.СтарыйКонтролер) И ЗначениеЗаполнено(Контролер) Тогда
			
			СоздатьКарточкуКонтроляПоДействию(Объект);
			
		ИначеЕсли ДополнительныеСвойства.Свойство("СтарыйКонтролер") 
			И ЗначениеЗаполнено(ДополнительныеСвойства.СтарыйКонтролер) И Не ЗначениеЗаполнено(Контролер) Тогда
			
			КарточкаКонтроля = НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				ДополнительныеСвойства.СтарыйКонтролер, 
				ПометкаУдаления);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьПредмет", Истина);
				КарточкаКонтроляОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		ИначеЕсли ДополнительныеСвойства.Свойство("СтарыйКонтролер")
			И ДополнительныеСвойства.СтарыйКонтролер <> Контролер Тогда
			
			КарточкаКонтроля = НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				ДополнительныеСвойства.СтарыйКонтролер, 
				ПометкаУдаления);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.Контролер = Контролер;
				КарточкаКонтроляОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьПредмет", Истина);
				КарточкаКонтроляОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
	
		// Для пунктов могут быть отдельные контрольные карточки
		Если Объект.ПоПунктам Тогда
			ОбновитьКонтрольПунктов(Объект, СостояниеДействия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создает карточку контроля по действию Исполнение
//
// Параметры:
//    Действие - СправочникСсылка.ДействияИсполнения, СправочникОбъект.ДействияИсполнения - действие основание контроля
//
Процедура СоздатьКарточкуКонтроляПоДействию(Действие) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не КонтрольИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияИсполнения") Тогда
		Контролер = Действие.Контролер;
		ДействиеСсылка = Действие.Ссылка;
		
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		Контролер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Контролер");
		ДействиеСсылка = Действие;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контролер) Тогда 
		Возврат;
	КонецЕсли;	
	
	// Проверка, что карточка уже есть
	ВсеКарточкиКонтроля = ВсеКарточкиКонтроляПоПредмету(ДействиеСсылка, Контролер, Истина);
	ИдентификаторыПунктов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеКарточкиКонтроля, "ИдентификаторПункта");
	Для Каждого ИД Из ИдентификаторыПунктов Цикл
		Если Не ЗначениеЗаполнено(ИД.Значение) Тогда
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	НовыйЭлемент = Справочники.Контроль.СоздатьЭлемент();
	НовыйЭлемент.Контролер = Контролер;
	НовыйЭлемент.Заполнить(ДействиеСсылка);
	НовыйЭлемент.Записать();
	
КонецПроцедуры

// Создает карточку контроля по пункту действия Исполнение
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения, СправочникОбъект.ДействияИсполнения - действие, основание контроля
//  ИдентификаторПункта - УникальныйИдентификатор - ИД пункта действия.
//
Процедура СоздатьКарточкуКонтроляПоПунктуИсполнения(Действие, ИдентификаторПункта) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не КонтрольИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияИсполнения") Тогда
		ДействиеСсылка = Действие.Ссылка;
		Пункты = Действие.Пункты;
		
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		Пункты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Пункты").Выгрузить();
		ДействиеСсылка = Действие;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ДанныеПункта = Справочники.ДействияИсполнения.ДанныеПунктаДействия(
		ДействиеСсылка, ИдентификаторПункта, Пункты);	
	Если Не ЗначениеЗаполнено(ДанныеПункта.Контролер) Тогда 
		Возврат;
	КонецЕсли;	
	
	// Проверка, что карточка уже есть
	ВсеКарточкиКонтроля = ВсеКарточкиКонтроляПоПредмету(ДействиеСсылка, ДанныеПункта.Контролер, Истина);
	ИдентификаторыПунктов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеКарточкиКонтроля, "ИдентификаторПункта");
	Для Каждого ИД Из ИдентификаторыПунктов Цикл
		Если ИД.Значение = ИдентификаторПункта Тогда
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	НовыйЭлемент = Справочники.Контроль.СоздатьЭлемент();
	НовыйЭлемент.Контролер = ДанныеПункта.Контролер;
	НовыйЭлемент.Заполнить(ДанныеПункта);
	НовыйЭлемент.Записать();
	
КонецПроцедуры

// Создает карточку контроля по подчиненному исполнению
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения - действие, основание контроля
//  ИдентификаторВышестоящего - УникальныйИдентификатор - ИД пункта действия.
//  Контролер - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли - контролер подчиненного исполнения
//
Процедура СоздатьКарточкуКонтроляПоПодчиненномуИсполнению(Действие, ИдентификаторВышестоящего, Контролер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не КонтрольИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контролер) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Действие", Действие);
	СтруктураЗаполнения.Вставить("ИдентификаторВышестоящего", ИдентификаторВышестоящего);
	
	НовыйЭлемент = Справочники.Контроль.СоздатьЭлемент();
	НовыйЭлемент.Контролер = Контролер;
	НовыйЭлемент.Заполнить(СтруктураЗаполнения);
	НовыйЭлемент.Записать();
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Обновляет карточку контроля по действию
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - основание контроля
//  Параметры - Структура - параметры выполнения действия участником.
//
Процедура ОтметитьВыполнениеПоДействию(Действие, Параметры) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Параметры.Участник) Тогда
		Возврат;
	КонецЕсли;
	
	КарточкиКонтроляПоПредмету = ВсеКарточкиКонтроляПоПредмету(Действие.Ссылка);
	Для Каждого КонтрольСсылка Из КарточкиКонтроляПоПредмету Цикл
		
		КонтрольОбъект = КонтрольСсылка.ПолучитьОбъект();
		
		// Если контрольная карточка создана из подчиненного исполнения.
		// В случае совпадения рассматривающего и проверяющего не заполняем признак исполнения контроля.
		Если Параметры.Результат = Перечисления.РезультатыРассмотрения.Рассмотрено
			И ЗначениеЗаполнено(КонтрольОбъект.ИдентификаторВышестоящегоЭтапа) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекИсполнители = КонтрольОбъект.Исполнители.НайтиСтроки(
			Новый Структура("Исполнитель", Параметры.Участник));
		Если ТекИсполнители.Количество() > 0 Тогда
			НайденнаяСтрока = ТекИсполнители[0];
		Иначе
			ТекИсполнители = КонтрольОбъект.Исполнители.НайтиСтроки(
				Новый Структура("Идентификатор", Параметры.ИдентификаторУчастника));
			Если ТекИсполнители.Количество() > 0 Тогда
				НайденнаяСтрока = ТекИсполнители[0];
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НужноЗаписать = Ложь;
		Если НайденнаяСтрока.Исполнено <> ЗначениеЗаполнено(Параметры.Результат) Тогда
			НайденнаяСтрока.Исполнено = ЗначениеЗаполнено(Параметры.Результат);
			НужноЗаписать = Истина;
		КонецЕсли;
		Если НайденнаяСтрока.ДатаИсполнения <> Параметры.ДатаИсполнения Тогда
			НайденнаяСтрока.ДатаИсполнения = Параметры.ДатаИсполнения;
			
			Если НайденнаяСтрока.Исполнено <> ЗначениеЗаполнено(Параметры.ДатаИсполнения) Тогда
				НайденнаяСтрока.Исполнено = ЗначениеЗаполнено(Параметры.ДатаИсполнения);
			КонецЕсли;
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Если НужноЗаписать Тогда
			КонтрольОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
// Обновляет карточку контроля по действию 
// вызывается при записи действия
//
// Параметры:
//  Объект - ОпределяемыйТип.ДействияОбъект - контролируемый объект
//
Процедура ПриЗаписиДействияСКонтролем(Объект) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не КонтрольИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Объект.Ссылка;
	ПометкаУдаления = Объект.ПометкаУдаления;
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	
	Если ДополнительныеСвойства.ПредыдущаяПометкаУдаления <> ПометкаУдаления Тогда 	
			
		КарточкиКонтроля = ВсеКарточкиКонтроляПоПредмету(Ссылка);
			
		Для Каждого КарточкаКонтроля Из КарточкиКонтроля Цикл 
			КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
			Если КарточкаКонтроляОбъект.ПометкаУдаления = ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			КарточкаКонтроляОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЦикла;
		
	ИначеЕсли ДополнительныеСвойства.ПредыдущееПомещеноВИсторию <> Объект.ПомещеноВИсторию Тогда 
			
		КарточкиКонтроля = ВсеКарточкиКонтроляПоПредмету(Ссылка,, Истина);
			
		Для Каждого КарточкаКонтроля Из КарточкиКонтроля Цикл 
			КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
			
			КарточкаКонтроляОбъект.СнятСКонтроля = Истина;
			КарточкаКонтроляОбъект.ДатаСнятияСКонтроля = ТекущаяДата();
			
			Для Каждого Строка Из КарточкаКонтроляОбъект.Исполнители Цикл
				Если Не Строка.Проконтролировано Тогда 
					Строка.Проконтролировано = Истина;
					Строка.ДатаКонтроля = ТекущаяДата();
				КонецЕсли;
			КонецЦикла;
			КарточкаКонтроляОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

// Обновляет контрольную карточку по измененному подчиненному исполнению
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения - вышестоящее действие
//  ИдентификаторВышестоящего - УникальныйИдентификатор - идентификатор этапа рассмотрения
//  Контролер - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли - контролер подчиненного исполнения
// 
Процедура ОбновитьКонтрольПодчиненногоИсполнения(Действие, ИдентификаторВышестоящего, Контролер) Экспорт
	
	Если Не КонтрольИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	КонтрольнаяКарточка = КонтрольПовтИсп.КонтрольнаяКарточкаПодчиненногоИсполнения(Действие,
		Строка(ИдентификаторВышестоящего));
	Если Не ЗначениеЗаполнено(КонтрольнаяКарточка) Тогда
		СоздатьКарточкуКонтроляПоПодчиненномуИсполнению(Действие, ИдентификаторВышестоящего, Контролер);
		Возврат;
	Иначе
		Если Не ЗначениеЗаполнено(Контролер) Тогда //если контролера очистили, то удаляем контрольную карточку
			КонтрольОбъект = КонтрольнаяКарточка.ПолучитьОбъект();
			КонтрольОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьПредмет", Истина);
			КонтрольОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(КонтрольнаяКарточка);
	КонтрольОбъект = КонтрольнаяКарточка.ПолучитьОбъект();
	КонтрольОбъект.Контролер = Контролер;
	ПодчиненноеИсполнение = Справочники.ДействияИсполнения.ПодчиненноеИсполнение(Действие, ИдентификаторВышестоящего);
	КонтрольОбъект.СрокИсполнения = ДействияСервер.СрокУчастников(ПодчиненноеИсполнение);
	КонтрольОбъект.Описание = ОписаниеКонтроляПодчиненногоИсполнения(Действие, ИдентификаторВышестоящего);
	КонтрольОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(КонтрольнаяКарточка);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Формирует описание контрольной карточки подчиненного исполнения
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения - вышестоящее действие
//  ИдентификаторВышестоящего - УникальныйИдентификатор - идентификатор этапа рассмотрения
// 
// Возвращаемое значение:
//  Строка - сформированное описание
// 
Функция ОписаниеКонтроляПодчиненногоИсполнения(Действие, ИдентификаторВышестоящего) Экспорт
	
	ОписаниеИсполнения = "";
	
	ПодчиненноеИсполнение = Справочники.ДействияИсполнения.ПодчиненноеИсполнение(Действие, ИдентификаторВышестоящего);
	Если ПодчиненноеИсполнение.Количество() > 0 Тогда
		ОписаниеИсполнения = СтрШаблон(НСтр("ru = 'Контролировать: %1%2%3'"),
			ПодчиненноеИсполнение[0].НаименованиеЗадачи, Символы.ПС, ПодчиненноеИсполнение[0].Описание);
	КонецЕсли;
	
	Возврат ОписаниеИсполнения;
	
КонецФункции

// Определяет пользователей контролера.
// 
// Параметры:
//  Контролер - см. Справочник.Контроль.Контролер
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Пользователи
// 
Функция СотрудникиКонтролера(Контролер) Экспорт
	
	// Логика запроса зеркальна логике в Справочники.Контроль.Форма.НаКонтроле.ИсполнителиРолейИДелегатыСотрудника().
	СотрудникиКонтролера = Новый Массив;
	Если Не ЗначениеЗаполнено(Контролер) Тогда
		Возврат СотрудникиКонтролера;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.РольСотрудник = &Контролер
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Контроль"")");
	Запрос.УстановитьПараметр("Контролер", Контролер);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	СотрудникиКонтролера = ТаблицаРезультата.ВыгрузитьКолонку("Сотрудник");
	
	Возврат СотрудникиКонтролера;
	
КонецФункции

// Отражает порцию контролей в виджетах.
// 
// Параметры:
//  ПорцияКОбновлению - Массив из СправочникСсылка.Контроль
// 
Процедура ОтразитьПорциюДанныхКонтроля(ПорцияКОбновлению) Экспорт
	
	Для Каждого Основание Из ПорцияКОбновлению Цикл
		Документы.ДанныеКонтроля.ОтразитьКонтроль(Основание);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КонтрольИспользуется()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов")
		Или ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
Конецфункции

Процедура ОбновитьКонтрольПунктов(Объект, СостояниеДействия)
	
	Ссылка = Объект.Ссылка;
	ПометкаУдаления = Объект.ПометкаУдаления;
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
		
	Если ДополнительныеСвойства.Свойство("СтароеСостояниеДействия") 
		И Не ЗначениеЗаполнено(ДополнительныеСвойства.СтароеСостояниеДействия) Тогда 
		
		Для Каждого СтрПункт Из Объект.Пункты Цикл
			Если Не ЗначениеЗаполнено(СтрПункт.Контролер) Тогда
				Продолжить;
			КонецЕсли;
			
			СоздатьКарточкуКонтроляПоПунктуИсполнения(Объект, СтрПункт.Идентификатор);	
		КонецЦикла;
		
	ИначеЕсли СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Остановлено Тогда 
		
		Для Каждого СтрПункт Из Объект.Пункты Цикл
			Если Не ЗначениеЗаполнено(СтрПункт.Контролер) Тогда
				Продолжить;
			КонецЕсли;
			
			КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
				СтрПункт.Контролер, Ложь, СтрПункт.Идентификатор);
				
			Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
				КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
				КарточкаКонтроляОбъект.СнятСКонтроля = Истина;
				КарточкаКонтроляОбъект.ДатаСнятияСКонтроля = ТекущаяДата();
				
				Для Каждого Строка Из КарточкаКонтроляОбъект.Исполнители Цикл
					Если Не Строка.Проконтролировано Тогда 
						Строка.Проконтролировано = Истина;
						Строка.ДатаКонтроля = ТекущаяДата();
					КонецЕсли;
				КонецЦикла;
				КарточкаКонтроляОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьПредмет", Истина);
				КарточкаКонтроляОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДополнительныеСвойства.Свойство("СтарыеПункты") 
		И ЗначениеЗаполнено(ДополнительныеСвойства.СтарыеПункты) И ЗначениеЗаполнено(Объект.Пункты) Тогда
		ТекущиеПункты = Объект.Пункты.Выгрузить();
		ТекущиеПункты.Сортировать("НомерСтроки"); 
		
		Если ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ДополнительныеСвойства.СтарыеПункты, ТекущиеПункты, "Контролер") Тогда
			
			Для Каждого СтарыйПункт Из ДополнительныеСвойства.СтарыеПункты Цикл
				ЕстьСтроки = ТекущиеПункты.НайтиСтроки(
					Новый Структура("Идентификатор", СтарыйПункт.Идентификатор));
				
				// Если удален пункт, то снимем контроль
				Если ЕстьСтроки.Количество() = 0 
					И ЗначениеЗаполнено(СтарыйПункт.Контролер) Тогда
					КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
						СтарыйПункт.Контролер, 
						ПометкаУдаления,
						СтарыйПункт.Идентификатор);
						
					Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
						КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
						КарточкаКонтроляОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьПредмет", Истина);
						КарточкаКонтроляОбъект.УстановитьПометкуУдаления(Истина);
					КонецЕсли;
				
				// Если пункт остался, то проверим изменение или удаление контролера		 
				ИначеЕсли ЕстьСтроки.Количество() > 0 
					И ЕстьСтроки[0].Контролер <> СтарыйПункт.Контролер Тогда
						
					Если ЗначениеЗаполнено(ЕстьСтроки[0].Контролер) И Не ЗначениеЗаполнено(СтарыйПункт.Контролер) Тогда
						СоздатьКарточкуКонтроляПоПунктуИсполнения(Объект, СтарыйПункт.Идентификатор);
					ИначеЕсли Не ЗначениеЗаполнено(ЕстьСтроки[0].Контролер) И ЗначениеЗаполнено(СтарыйПункт.Контролер) Тогда 
						КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
							СтарыйПункт.Контролер, 
							ПометкаУдаления,
							СтарыйПункт.Идентификатор);
							
						Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
							КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
							КарточкаКонтроляОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьПредмет", Истина);
							КарточкаКонтроляОбъект.УстановитьПометкуУдаления(Истина);
						КонецЕсли;
					Иначе
						КарточкаКонтроля = Контроль.НайтиКарточкуКонтроляПоПредметуИКонтролеру(Ссылка,
							СтарыйПункт.Контролер, 
							ПометкаУдаления,
							СтарыйПункт.Идентификатор);
							
						Если ЗначениеЗаполнено(КарточкаКонтроля) Тогда 
							КарточкаКонтроляОбъект = КарточкаКонтроля.ПолучитьОбъект();
							КарточкаКонтроляОбъект.Контролер = ЕстьСтроки[0].Контролер;
							КарточкаКонтроляОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьПредмет", Истина);
							КарточкаКонтроляОбъект.Записать();
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого НовыйПункт Из ТекущиеПункты Цикл
				ЕстьСтроки = ДополнительныеСвойства.СтарыеПункты.НайтиСтроки(
					Новый Структура("Идентификатор", НовыйПункт.Идентификатор));
				
				// Если новый пункт, то поставим на контроль
				Если ЕстьСтроки.Количество() = 0 
					И ЗначениеЗаполнено(НовыйПункт.Контролер) Тогда
					СоздатьКарточкуКонтроляПоПунктуИсполнения(Объект, НовыйПункт.Идентификатор);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти
