// Сюда выносятся процедуры и функции, но для разных версий Документооборота. Для интеграций МЭДО в другие конфигурации
// непригоден. Модуль должен быть идентичен для ДО 2.1 и 3.0. Сам модуль напрямую не входит в подсистеме МЭДО, как
// "библиотеку".

#Область ПрограммныйИнтерфейс

// Направление от кэша вида документа. Для вызова из форм документов
// 
// Параметры:
//  КэшВидаДокумента - См. Делопроизводство.НовыйКэшВидаДокумента
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.НаправленияСообщенийМЭДО - Направление
Функция НаправлениеОтКэшаВидаДокумента(КэшВидаДокумента) Экспорт
	
	Если КэшВидаДокумента.Свойство("ЯвляетсяИсходящейКорреспонденцией")
		И КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией Тогда
		Возврат Перечисления.НаправленияСообщенийМЭДО.Исходящее;
	ИначеЕсли КэшВидаДокумента.Свойство("ЯвляетсяВходящейКорреспонденцией")
		И КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией Тогда
		Возврат Перечисления.НаправленияСообщенийМЭДО.Входящее;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияСообщенийМЭДО.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
	
// есть ли у текущего пользователя доступ к работе с МЭДО.
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДоступКРаботеСМЭДО() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СостоянияДокументовМЭДО);
	
КонецФункции

#Если Не ВнешнееСоединение Тогда

// Заполняет закладку МЭДО в форме документа. Делает общее для всех редакций Документооборота.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  Форма документа объекта типа "Предмет МЭДО".
//  Направление - ПеречислениеСсылка.НаправленияСообщенийМЭДО - Направление документа.
Процедура ЗаполнитьЗакладкуМЭДОВФорме(Форма, Направление) Экспорт
	
	Если Не ЗначениеЗаполнено(Направление) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьИсториюСостоянийМЭДОВФорме(Форма);
	
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Документы.ДанныеДокументаМЭДО.ДанныеДокументаМЭДО(
		Форма.Объект.Ссылка, "*", МЭДОСтруктурыДанных.НовыйЛегкийОтвет());
	Если Не ЗначениеЗаполнено(Данные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ВидДокументаМЭДО = Данные.ВидДокумента;
	Форма.ГлавныйФайлМЭДО = Данные.ГлавныйФайл;
	Форма.МестоСоставленияМЭДО = Данные.МестоСоставления;
	
	// ГрифДоступа, Комментарий, Ответственный - на основной закладке документа, поэтому читаем их,
	// только его до этого они был записаны:
	МЭДО.ПрисвоитьЗаполненное(Форма.Объект.ГрифДоступа, Данные.ГрифДоступа);
	МЭДО.ПрисвоитьЗаполненное(Форма.Объект.Комментарий, Данные.Комментарий);
	МЭДО.ПрисвоитьЗаполненное(Форма.Объект.Ответственный, Данные.Ответственный);
	
	Если Направление = Перечисления.НаправленияСообщенийМЭДО.Исходящее Тогда
		Форма.ГотовКОтправкеМЭДО = Данные.ГотовКОтправке;
		Форма.ОтправленМЭДО = Данные.Отправлен;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет историю состояний документа МЭДО в форме. И его актуальное состояние.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  Форма объекта типа "ПредметМЭДО":
//   * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ОпределяемыйТип.ПредметМЭДО
//   * ИсторияСостоянийМЭДО - ДанныеФормыКоллекция
//   * ТекущееСостояниеМЭДО - ПеречислениеСсылка.СостоянияДокументовМЭДО
Процедура ОбновитьИсториюСостоянийМЭДОВФорме(Форма) Экспорт
	
	История = РегистрыСведений.СостоянияДокументовМЭДО.ИсторияСостоянийПоДокументу(Форма.Объект.Ссылка);
	Форма.ИсторияСостоянийМЭДО.Загрузить(История);
	Если История.Количество() > 0 Тогда
		Форма.ТекущееСостояниеМЭДО = История[0].Состояние;
	Иначе
		Форма.ТекущееСостояниеМЭДО = Перечисления.СостоянияДокументовМЭДО.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет вспомогательный документ ДанныеДокументаМЭДО из формы документа-владельца.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  Форма документа объекта типа "Предмет МЭДО".
//  Направление - ПеречислениеСсылка.НаправленияСообщенийМЭДО
Процедура СохранитьДанныеМЭДОВФорме(Форма, Направление) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не МЭДОПереопределяемый.ЭтоДокументМЭДО(Форма, Направление) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = МЭДОСтруктурыДанных.НовыйЛегкийОтвет();
	ДанныеОбъект = Документы.ДанныеДокументаМЭДО.ОбъектДанныхДокумента(Форма.Объект.Ссылка, ДанныеОтвета);
	Если Не ДанныеОтвета.Успех Тогда
		Возврат;
	КонецЕсли;
	
	// В МЭДО участвуют только входящие и исходящие документы:
	Если Не ЗначениеЗаполнено(Направление) Тогда
		Если Не ДанныеОбъект.ЭтоНовый() Тогда
			ДанныеОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.ВидДокумента, Форма.ВидДокументаМЭДО);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.ГлавныйФайл, Форма.ГлавныйФайлМЭДО);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.ГрифДоступа, Форма.Объект.ГрифДоступа);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Комментарий, Форма.Объект.Комментарий);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.МестоСоставления, Форма.МестоСоставленияМЭДО);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Организация, Форма.Объект.Организация);
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Ответственный, Форма.Объект.Ответственный);
	
	МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Направление, Направление);
	Если Направление = Перечисления.НаправленияСообщенийМЭДО.Исходящее Тогда
		МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.ГотовКОтправке, Форма.ГотовКОтправкеМЭДО);
		МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Отправлен, Форма.ОтправленМЭДО);
	ИначеЕсли Направление = Перечисления.НаправленияСообщенийМЭДО.Входящее Тогда
		МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.ГотовКОтправке, Ложь);
		МЭДО.ПрисвоитьОтличающееся(ДанныеОбъект.Отправлен, Ложь);
	КонецЕсли;
	// ТЧ "Пакеты" создастся "ПередЗаписью".
	ДанныеОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь); // Далее проверяются права доступа:
	
	ОбновитьИсториюСостоянийМЭДОВФорме(Форма); // При записи может меняться текущее состояние и добавиться строка в историю.
	МЭДО.ПрисвоитьОтличающееся(Форма.ГлавныйФайлМЭДО, ДанныеОбъект.ГлавныйФайл); // при записи мог заполниться.
	МЭДОПереопределяемый.ВидимостьЭлементовМЭДОВФорме(Форма, Направление);
	
КонецПроцедуры

#КонецЕсли

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
// 
// Параметры:
//  Настройки - ТаблицаЗначений
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ВыполнениеОбменаМЭДО;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьМЭДО;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	
КонецПроцедуры

// Вызывается при регистрации документа и обновляет связанные с документом данные и другие действия, если это
// необходимо. Устанавливает состояние "Документ зарегистрирован" у входящих и исходящих документов со способом
// доставки "МЭДО".
//
// Параметры:
//  ДокументОбъект - ОпределяемыйТип.ПредметМЭДООбъект - Форма.Объект или объект документа
//  Направление - ПеречислениеСсылка.НаправленияСообщенийМЭДО - Направление документа.
Процедура ПриРегистрацииДокумента(ДокументОбъект, Направление) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМЭДО") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = МЭДОСтруктурыДанных.НовыйЛегкийОтвет();
	
	Если МЭДОПереопределяемый.ЭтоИсходящийДокумент(ДокументОбъект) Тогда
		
		Если Не МЭДОПереопределяемый.ЭтоДокументМЭДО(ДокументОбъект, Перечисления.НаправленияСообщенийМЭДО.Исходящее) Тогда
			Возврат;
		КонецЕсли;
		
		// Если это документ МЭДО, то можно зарегистрировать для отправки:
		
		ДокументСсылка = ОбщегоНазначенияДокументооборот.СсылкаНовогоОбъекта(ДокументОбъект);
		
		СтруктураСостояния = РегистрыСведений.СостоянияДокументовМЭДО.СостояниеДокумента(
			ДокументСсылка,
			Перечисления.СостоянияДокументовМЭДО.ДокументЗарегистрированГотовКОтправке,
			"Состояние",
			ДокументОбъект.ДатаРегистрации);
		Если ЗначениеЗаполнено(СтруктураСостояния.Состояние) Тогда
			Возврат; // Уже зарегистрирован.
		КонецЕсли;
		
		
		ДанныеОбъект = Документы.ДанныеДокументаМЭДО.ОбъектДанныхДокумента(ДокументСсылка, ДанныеОтвета);
		Если Не ДанныеОтвета.Успех Тогда
			Возврат;
		КонецЕсли;
		// на этот момент реквизиты в родительском документе еще не записались,
		// поэтому сообщаем этот признак искусственно:
		ДанныеОбъект.ДатаРегистрации = ДокументОбъект.ДатаРегистрации;
		Если Не ЗначениеЗаполнено(ДанныеОбъект.ИдентификаторДокумента) Тогда
			ДанныеОбъект.ИдентификаторДокумента = НРег("" + ДокументСсылка.УникальныйИдентификатор());
		КонецЕсли;
		ДанныеОбъект.Записать();
		
	ИначеЕсли МЭДОПереопределяемый.ЭтоВходящийДокумент(ДокументОбъект) Тогда
		
		Если Не МЭДОПереопределяемый.ЭтоДокументМЭДО(ДокументОбъект, Перечисления.НаправленияСообщенийМЭДО.Входящее) Тогда
			Возврат;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			ДокументСсылка = ОбщегоНазначенияДокументооборот.СсылкаНовогоОбъекта(ДокументОбъект);
			ДанныеОбъект = Документы.ДанныеДокументаМЭДО.ОбъектДанныхДокумента(ДокументСсылка, ДанныеОтвета);
			Если Не ДанныеОтвета.Успех Тогда
				Возврат;
			КонецЕсли;
			// на этот момент реквизиты регистрации в родительском документе еще не записались:
			ДанныеОбъект.ДатаРегистрации = ДокументОбъект.ДатаРегистрации;
			ДанныеОбъект.Записать();
			
			
			Если МЭДОПовтИсп.НужноСоздаватьУведомления() Тогда
				// Сразу создать уведомление о регистрации:
				Регистрация = МЭДОСтруктурыДанных.НовыйРегистрация(
					ДокументОбъект.РегистрационныйНомер, ДокументОбъект.ДатаРегистрации);
				// Документ на этот момент уже записан, хоть и без рег.номера и даты:
				ПоляДокумента = МЭДОПереопределяемый.ТребуемыеДанныеВходящегоДокумента(
					ДокументСсылка, "Организация, Контрагент");
				ОбщиеПоля = МЭДОСтруктурыДанных.НовыйОбщиеПоляУведомления(
					ДокументСсылка,
					ПоляДокумента.Организация,
					ПоляДокумента.Контрагент,
					НСтр("ru = 'Создано автоматически при регистрации документа'"));
				МЭДО.СоздатьИсходящееУведомлениеОРегистрации(ОбщиеПоля, Регистрация);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СтекОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Ошибка при регистрации документа по МЭДО:
				|%1'"), СтекОшибки);
		КонецПопытки;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаФайловВКонтейнере

#Если Не ВнешнееСоединение Тогда

// Записать файл внешней ЭП в РС ЭлектронныеПодписи
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО
//  Файл - СправочникСсылка.Файлы - Главный файл документа или какой-то его файл (в случае приложений).
//  ИдентификаторПодписи - УникальныйИдентификатор - Идентификатор подписи
//  ПутьКФайлуПодписи - Строка -  Путь к файлу подписи (.p7s)
//  ИдентификаторыПодписейУжеБыли - Массив Из Строка - Если несколько подписей к одному объекту, и сейчас 
//  								создается еще одна подпись, то стандартный механизм занесения подписи в ДО
//  								не дает обратную связь после записи. Поэтому после записи прочитаем все и
//									исключим те, которые уже ранее были.
// 
// Возвращаемое значение:
//  Строка - Получившийся идентификатор подписи
Функция ЗаписатьВнешнююЭП(Документ, Файл, ПутьКФайлуПодписи, ИдентификаторыПодписейУжеБыли) Экспорт
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив();
	
	ДанныеДляЗанесенияВБазу = Новый Структура;
	ДанныеДляЗанесенияВБазу.Вставить("ПодписанныйОбъект", Файл);
	
	СвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
	СвойстваПодписи.Подпись = Новый ДвоичныеДанные(ПутьКФайлуПодписи);
	СвойстваПодписи.ПодписанныйОбъект = Файл;
	СвойстваПодписи.ПодписьВерна = Истина;
	СвойстваПодписи.Вставить("СертификатДействителен", Истина);
	СвойстваПодписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
	ДанныеДляЗанесенияВБазу.Вставить("СвойстваПодписи", СвойстваПодписи);
	
	МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗанесенияВБазу);
	РаботаСЭП.ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВБазу); 
	// К сожалению этот механизм не возвращает уникальный идентификатор созданной подписи, это проблема, если
	// к одному объекту несколько подписей. Вычислим косвенно, исключив те идентификаторы, которые уже были.
	
	ВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭП.ИдентификаторПодписи КАК УникальныйИдентификатор
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.ПодписанныйОбъект = &ВерсияФайла
		|	И НЕ ЭП.ИдентификаторПодписи В (&ИдентификаторыПодписейУжеБыли)");
	Запрос.УстановитьПараметр("ВерсияФайла", ВерсияФайла);
	Запрос.УстановитьПараметр("ИдентификаторыПодписейУжеБыли", ИдентификаторыПодписейУжеБыли);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		// При создании внешней ЭП генерируется штамп отметки, но для целей МЭДО это не нужно, т.к. штамп
		// приходит в сообщении:
		РаботаСЭП.УдалитьОтметкуЭП(Документ, Выборка.УникальныйИдентификатор);
		
		// при следующем обращении эта подпись уже не будет учтена, и следовательно будет удалена только
		// нужная отметка.
		ИдентификаторыПодписейУжеБыли.Добавить(Выборка.УникальныйИдентификатор);
		
		Возврат "" + Выборка.УникальныйИдентификатор;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Записывает отметку ЭП в служебные файлы документа.
//
// Параметры:
//   Документ - ОпределяемыйТип.ПредметМЭДО.
//   ИдентификаторЭП - Строка - идентификатор ЭП.
//   ПутьКОтметкеЭП - Строка - полный путь к файлу с изображением отметки ЭП.
//   Положение - см. МЭДОСтруктурыДанных.НовыйПоложениеИзображения.
//
Процедура ЗаписатьОтметкуЭП(Документ, ИдентификаторЭП, ПутьКОтметкеЭП, Положение = Неопределено) Экспорт
	
	РаботаСЭП.ЗаписатьОтметкуЭП(Документ, ИдентификаторЭП, ПутьКОтметкеЭП, Положение);
	
КонецПроцедуры

// Записывает регистрационный штамп в служебные файлы документа, с заданным положением изображения. Создает файл штампа
// в БД, либо его версию, если файл уже есть.
// Используется и для входящих и для исходящих.
//
// Параметры:
//   ДокументСсылка - ОпределяемыйТип.ПредметМЭДО -
//   ФайлСсылка - СправочникСсылка.Файлы -
//   ОтношениеШтампа - ПеречислениеСсылка.ОтношенияСлужебныхФайлов - Наш штамп или контрагента
//   ПутьКРегистрационномуШтампу - Строка - полный путь к файлу со штампом.
//   Положение - См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения.
//
// Возвращаемое значение:
//  СправочникСсылка.Файлы - Ссылка на созданный файл, или пустая ссылка, в случае неуспеха.
Функция ЗаписатьРегистрационныйШтамп(
	ДокументСсылка, ФайлСсылка, ОтношениеШтампа, ПутьКРегистрационномуШтампу, Положение) Экспорт
	
	ДанныеШтампа = Новый ДвоичныеДанные(ПутьКРегистрационномуШтампу);
	АдресШтампа = ПоместитьВоВременноеХранилище(ДанныеШтампа);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресШтампа;
	СведенияОФайле.ИмяБезРасширения = "РегистрационныйШтамп";
	СведенияОФайле.РасширениеБезТочки = "png";
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	СведенияОФайле.Размер = ДанныеШтампа.Размер();
	СведенияОФайле.Вставить("ДобавлениеРегШтампа", Истина);
	
	ПоложениеИмеющегося = Неопределено;
	РегистрационныйШтамп = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		ДокументСсылка,
		ФайлСсылка,
		ОтношениеШтампа,
		ПоложениеИмеющегося);
	
	Если ЗначениеЗаполнено(РегистрационныйШтамп) Тогда
		РаботаСФайламиВызовСервера.СоздатьВерсию(РегистрационныйШтамп, СведенияОФайле);
	Иначе
		РегистрационныйШтамп = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			ДокументСсылка, СведенияОФайле);
	КонецЕсли;
	
	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
		ДокументСсылка,
		ФайлСсылка,
		ОтношениеШтампа,
		РегистрационныйШтамп,
		Положение);
	
	Возврат РегистрационныйШтамп;
	
КонецФункции

// Получив сведения о регистрации, обновляет изображение регистрационного штампа в служебных файлах документа. 
// Если штампа не было, создает его. И вносит все необходимое в параметр Данные для отправки.
// Положение изображение создается здесь же на основании переданных настроек и размеров картинки.
// Процедура работает, как неотъемлемая часть функции ДанныеИсходящегоДокументаДляОтправки.
// в параметре Данные должны уже лежать предварительно подготовленные исходные данные для этого (документ, главный файл,
// его версия, дата актуальности и др.).
//
// Параметры:
//  Данные - См. МЭДОСтруктурыДанных.НовыйДанныеИсходящегоДокументаДляОтправки
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
Процедура НайтиСоздатьВнестиРегистрационныйШтампДляИсходящего(Данные, ДанныеОтвета) Экспорт
	
	Данные.Отправитель.РегистрационныйШтамп.Файл.ЛокальноеИмя = МЭДО.ЗаменитьНеподходящееИмяФайла(
		"registrationStamp", "png", Данные.ВсеИменаФайлов); // перестраховка, на случай другого файла с таким же именем
	Если Не ЗначениеЗаполнено(Данные.Отправитель.РегистрационныйНомер) Тогда
		Возврат; // Перестраховка, проверка на регистрацию с выдачей ошибки проходит раньше.
	КонецЕсли;
	
	
	НомерСтраницы = 1;
	Если Данные.НастройкиОрганизации.СтраницаВставкиРегШтампа = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
		НомерСтраницы = Данные.КоличествоЛистов;
	КонецЕсли;
	
	ПоложениеЗаписанное = Неопределено;
	ФайлРегШтамп = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		Данные.Документ,
		Данные.ГлавныйФайлСсылка,
		Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации,
		ПоложениеЗаписанное);
	
	ДвоичныеДанныеФайла = Неопределено;
	Если ЗначениеЗаполнено(ФайлРегШтамп) Тогда
		
		// Рег. штамп уже есть, но нужно убедиться, что в нем не отличается "Положение", а если отличается,
		// то делаем заново, согласно настройкам для организации и кладем в РС:
		// Приводим размеры к фиксированным мм:
		Размеры = РаботаСКартинками.ВсеРазмерыКартинки(ФайлРегШтамп);
		Высота = 6;
		Ширина = ?(Размеры.Нулевые, 1, Окр(Размеры.ШиринаПикс / Размеры.ВысотаПикс * Высота)); // в пропорции к высоте.
		ПоложениеНовое = МЭДОСтруктурыДанных.НовыйПоложениеИзображения(
			НомерСтраницы,
			Данные.НастройкиОрганизации.РегШтампСлева,
			Данные.НастройкиОрганизации.РегШтампСверху,
			Ширина,
			Высота);
		Если Не МЭДО.ЭтоЗаполненноеПоложениеИзображения(ПоложениеЗаписанное) Тогда
			Если ТипЗнч(ПоложениеЗаписанное) <> Тип("Структура") Тогда
				// Перестраховка, нештатная ситуация, если рег.штамп есть, но координат нет (например, отправляется
				// старый документ):
				ПоложениеЗаписанное = МЭДОСтруктурыДанных.НовыйПоложениеИзображения(1, 0, 0, 1, 1);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПоложениеЗаписанное, ПоложениеНовое);
			РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
				Данные.Документ, 
				Данные.ГлавныйФайлСсылка,
				Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации,
				ФайлРегШтамп,
				ПоложениеНовое);
		КонецЕсли;
		
		ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлРегШтамп);
		
	Иначе // Штамп не найден, создаем:
		
		СведенияОРегистрации = Новый Структура("РегистрационныйНомер, ДатаРегистрации, ЭтоВходящийДокумент");
		ЗаполнитьЗначенияСвойств(
			СведенияОРегистрации, Данные.Отправитель, "РегистрационныйНомер, ДатаРегистрации");
		СведенияОРегистрации.ЭтоВходящийДокумент = Ложь;
		ПутьКРегШтампу = Делопроизводство.СоздатьРегистрационныйШтамп(СведенияОРегистрации);
		
		// Приводим размеры к фиксированным мм:
		Размеры = РаботаСКартинками.ВсеРазмерыКартинки(ПутьКРегШтампу);
		Высота = 6;
		Ширина = ?(Размеры.Нулевые, 1, Окр(Размеры.ШиринаПикс / Размеры.ВысотаПикс * Высота)); // в пропорции к высоте.
		ПоложениеЗаписанное = МЭДОСтруктурыДанных.НовыйПоложениеИзображения(
			НомерСтраницы,
			Данные.НастройкиОрганизации.РегШтампСлева,
			Данные.НастройкиОрганизации.РегШтампСверху,
			Ширина,
			Высота);
		ФайлРегШтамп = ЗаписатьРегистрационныйШтамп(
			Данные.Документ,
			Данные.ГлавныйФайлСсылка,
			Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации,
			ПутьКРегШтампу,
			ПоложениеЗаписанное);
		УдалитьФайлы(ПутьКРегШтампу);
		
		Если ЗначениеЗаполнено(ФайлРегШтамп) Тогда
			ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлРегШтамп);
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ТипЗнч(ДвоичныеДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Данные.Документ,
			МЭДО.Текст_ОшибкаВДокументе(), 
			НСтр("ru = 'Среди служебных файлов документа нет изображения регистрационного штампа, и его не удалось создать.'"),
			ДанныеОтвета);
		Возврат;
	КонецЕсли;
	Данные.Отправитель.РегистрационныйШтамп.Файл.ДвоичныеДанные = ДвоичныеДанныеФайла;
	
	Если Не МЭДО.ЭтоЗаполненноеПоложениеИзображения(ПоложениеЗаписанное) Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Данные.Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			НСтр("ru = 'Не удалось заполнить ""Положение изображения"" для рег.штампа'"),
			ДанныеОтвета);
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Данные.Отправитель.РегистрационныйШтамп.Положение, ПоложениеЗаписанное);
	
КонецПроцедуры

// Функция - Присоединяет файл к документу. Если файл существует - он заменяется.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Владелец файла.
//  НаименованиеФайлаВБазе - Строка - Имя файла
//  ПутьКФайлу - Строка - Полный путь к временному файлу на диске
//  Комментарий - Строка - комментарий в карточку файла.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  СправочникСсылка.Файлы - Ссылка на созданный файл, или пустая ссылка, в случае неуспеха.
Функция ПрисоединитьФайл(Документ, НаименованиеФайлаВБазе, ПутьКФайлу, Комментарий, ДанныеОтвета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлСсылка = Справочники.Файлы.ПустаяСсылка();
	
	ВременныйФайл = Новый Файл(ПутьКФайлу);
	Если Не ВременныйФайл.Существует() Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			ПутьКФайлу, 
			МЭДО.Текст_ФайлНеНайден(),
			МЭДО.Текст_ФайлНеНайденПодробно(НаименованиеФайлаВБазе),
			ДанныеОтвета);
		Возврат ФайлСсылка;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	СведенияОФайле.ИмяБезРасширения = НаименованиеФайлаВБазе;
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДатаСеанса();
	СведенияОФайле.Комментарий = Комментарий;
	СведенияОФайле.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	СведенияОФайле.Размер = ДвоичныеДанные.Размер();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ТекущаяВерсия.ПометкаУдаления КАК ТекущаяВерсияПомеченаНаУдаление,
		|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
		|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		|	Файлы.Ссылка КАК ФайлСсылка,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И Файлы.Наименование = &Наименование");
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);
	Запрос.УстановитьПараметр("Наименование", НаименованиеФайлаВБазе);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияФайла = Выборка.ТекущаяВерсия;
		ФайлСсылка = Выборка.ФайлСсылка;
		Если Выборка.ТекущаяВерсияПомеченаНаУдаление Тогда
			ВерсияФайлаОбъект = ВерсияФайла.ПолучитьОбъект();
			ВерсияФайлаОбъект.ДополнительныеСвойства.Вставить("УдалениеСлужебногоФайла", Истина);
			ВерсияФайлаОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		Если Выборка.ПометкаУдаления Тогда
			ФайлОбъект	= Выборка.ФайлСсылка.ПолучитьОбъект();
			ФайлОбъект.ДополнительныеСвойства.Вставить("УдалениеСлужебногоФайла", Истина);
			ФайлОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		СведенияОФайле.РасширениеБезТочки = Выборка.ТекущаяВерсияРасширение;
		СведенияОФайле.ХранитьВерсии = Выборка.ХранитьВерсии;
		НоваяВерсия = РаботаСФайламиВызовСервера.ОбновитьВерсиюФайла(ФайлСсылка, СведенияОФайле, ВерсияФайла);
		Если НоваяВерсия <> Неопределено Тогда
			РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(
				ФайлСсылка, НоваяВерсия, СведенияОФайле.АдресВременногоХранилищаТекста);
		КонецЕсли;
	Иначе
		СведенияОФайле.РасширениеБезТочки = ВременныйФайл.Расширение;
		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Документ, СведенияОФайле);
	КонецЕсли;
	
	Возврат ФайлСсылка;
	
КонецФункции

// По ранее подготовленным данным генерирует визуализацию ЭП и рег. штампа
// Файл визуализации сразу помещается в служебные файлы документа.
// 
// Параметры:
//  ДокументСсылка - ОпределяемыйТип.ПредметМЭДО - ДокументСсылка
//  ФайлСсылка - СправочникСсылка.Файлы - Главного файл PDF документа, визуализацию которого 
//										 нужно создать.
//  ДанныеОтметок - Массив Из См. МЭДОСтруктурыДанных.НовыйДанныеОтметки
//  ДанныеОтвета - См. МЭДОСтруктурыДанных.НовыйОтвет
//  ДвоичныеДанныеФайла - ДвоичныеДанные,
//						  Неопределено - Двоичные данные этого файла. Чтобы не получать их заново. Если не
//										 переданы, то будет получено из файла в самой процедуре.
Процедура СоздатьВизуализациюЭП(
	ДокументСсылка, ФайлСсылка, ДанныеОтметок, ДанныеОтвета, Знач ДвоичныеДанныеФайла = Неопределено) Экспорт
	
	// Визуализацию надо удалить, чтобы она сформировалась еще раз уже по координатам с настройками МЭДО. 
	РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
		ДокументСсылка, ФайлСсылка, Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
	
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		ВерсияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
		ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(ВерсияСсылка);
	КонецЕсли;
	
	ИмяФайлаPdf = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути() + "tmp.pdf";
	ДвоичныеДанныеФайла.Записать(ИмяФайлаPdf);
	
	ДокументPdf = Новый ДокументPDF();
	ДокументPdf.Прочитать(ИмяФайлаPdf);
	ВсегоСтраниц = ДокументPdf.КоличествоСтраниц();
	
	// по умолчанию, если нет "Положения":
	РасположениеШтампаЭПВPdf = ФайловыеФункцииПовтИсп.РасположениеШтампаЭПВPdf();
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяДатаСеанса()));
	СлучайноеЧислоДобавка = ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 900);
	
	НомерШтампа = 0;
	
	СмещениеПоYНакопленное = 0;
	
	Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
		
		ПоложениеИзСлужебногоФайла = ДанныеОтметки.Положение;
		
		КартинкаШтампа = Новый Картинка(ДанныеОтметки.ДвоичныеДанныеОтметки, Истина);
		
		Описание = Новый ОписаниеОтображаемогоОбъектаPDF();
		Описание.Имя = "Пример" + Строка(НомерШтампа + СлучайноеЧислоДобавка);
		Описание.Объект = КартинкаШтампа;
		Описание.НомерСтраницы = 1; // по умолчанию.
		
		//А4 - 210х297 мм
		
		ШиринаШтампаММ = 96;
		
		ВысотаКартинкиМм = 0;
		
		ЗаписьОтображаемогоОбъектаУжеСделана = Ложь;
		Если МЭДО.ЭтоЗаполненноеПоложениеИзображения(ПоложениеИзСлужебногоФайла) Тогда
			Описание.Лево = ПоложениеИзСлужебногоФайла.Слева;
			Описание.Верх = ПоложениеИзСлужебногоФайла.Сверху;
			Описание.Высота = ПоложениеИзСлужебногоФайла.Высота;
			Описание.Ширина = ПоложениеИзСлужебногоФайла.Ширина;
			Если ПоложениеИзСлужебногоФайла.Страница = Перечисления.СтраницаВставкиКартинки.Первая Тогда
				Описание.НомерСтраницы = 1;
			ИначеЕсли ПоложениеИзСлужебногоФайла.Страница = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
				Описание.НомерСтраницы = ВсегоСтраниц;
			ИначеЕсли ПоложениеИзСлужебногоФайла.Страница = Перечисления.СтраницаВставкиКартинки.Каждая Тогда
				Для ТекНомерСтраницы = 1 По ВсегоСтраниц Цикл
					Описание.Имя = "Пример" + НомерШтампа + СлучайноеЧислоДобавка;
					Описание.НомерСтраницы = ТекНомерСтраницы;
					ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
					ЗаписьОтображаемогоОбъектаУжеСделана = Истина;
					НомерШтампа = НомерШтампа + 1;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ПоложениеИзСлужебногоФайла.Страница) = Тип("Число")
				И ПоложениеИзСлужебногоФайла.Страница <> 0 Тогда
				Описание.НомерСтраницы = ПоложениеИзСлужебногоФайла.Страница;
			КонецЕсли;
			
			ВысотаКартинкиМм = ПоложениеИзСлужебногоФайла.Высота;
		ИначеЕсли РасположениеШтампаЭПВPdf = Перечисления.МестаВставкиКартинки.ЛевыйВерхний Тогда
			Размеры = РаботаСКартинками.ВсеРазмерыКартинки(КартинкаШтампа);
			ВысотаКартинкиМм = Размеры.ВысотаМм;
			
			Описание.Лево = 0;
			Описание.Верх =  5 + СмещениеПоYНакопленное;
		ИначеЕсли РасположениеШтампаЭПВPdf = Перечисления.МестаВставкиКартинки.ЛевыйНижний Тогда
			Размеры = РаботаСКартинками.ВсеРазмерыКартинки(КартинкаШтампа);
			ВысотаКартинкиМм = Размеры.ВысотаМм;
			
			Описание.Лево = 0;
			Описание.Верх =  297 - (ВысотаКартинкиМм + СмещениеПоYНакопленное);
		ИначеЕсли РасположениеШтампаЭПВPdf = Перечисления.МестаВставкиКартинки.ПравыйВерхний Тогда
			Размеры = РаботаСКартинками.ВсеРазмерыКартинки(КартинкаШтампа);
			ВысотаКартинкиМм = Размеры.ВысотаМм;
			
			Описание.Лево = 210 - ШиринаШтампаММ;
			Описание.Верх =  5 + СмещениеПоYНакопленное;
		ИначеЕсли РасположениеШтампаЭПВPdf = Перечисления.МестаВставкиКартинки.ПравыйНижний Тогда
			Размеры = РаботаСКартинками.ВсеРазмерыКартинки(КартинкаШтампа);
			ВысотаКартинкиМм = Размеры.ВысотаМм;
			
			Описание.Лево = 210 - ШиринаШтампаММ;
			Описание.Верх =  297 - (ВысотаКартинкиМм + СмещениеПоYНакопленное);
		КонецЕсли;
		
		Если Не ЗаписьОтображаемогоОбъектаУжеСделана Тогда
			НомерШтампа = НомерШтампа + 1;
			ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
		КонецЕсли;
		
		СмещениеПоYНакопленное = СмещениеПоYНакопленное + ВысотаКартинкиМм;
		
	КонецЦикла;
	
	
	ДокументPdf.Записать(ИмяФайлаPdf);
	ДокументPdf = Неопределено; // Закрытие, чтобы удалить, ниже.
	
	Визуализация = ПрисоединитьФайл(ДокументСсылка, "Визуализация.pdf", ИмяФайлаPdf, "", ДанныеОтвета);
	Если Не ЗначениеЗаполнено(Визуализация) Тогда
		ТекстКратко = НСтр("ru = 'Не удалось сгенерировать визуализацию ЭП'");
		ТекстПодробно = СтрШаблон(
			НСтр("ru = '%1. См. ""Журнал событий МЭДО"" и журнал регистрации - возможно есть предыдущие сообщения об ошибках'"),
			ТекстКратко);
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Предупреждение,
			ФайлСсылка,
			ТекстКратко,
			ТекстПодробно,
			ДанныеОтвета);
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
		ДокументСсылка, ФайлСсылка, Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП, Визуализация);
	
	УдалитьФайлы(ИмяФайлаPdf);
	
КонецПроцедуры

#КонецЕсли

// Удалить все подписи ии документа. Нужно на случай повторной загрузки одного и того же документа, 
// чтобы потом заново загрузить все его подписи и отметки.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Документ-владелец.
Процедура УдалитьПодписиИзДокумента(Документ) Экспорт
	
	// Все подписи документа также надо удалить, как самого документа, как внешние, так и наши, т.к. он мог
	// при загрузке полностью измениться.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭП.ПодписанныйОбъект КАК Объект
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.ПодписанныйОбъект = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭП.ПодписанныйОбъект
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ПО Файлы.Ссылка = ЭП.ПодписанныйОбъект
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭП.ПодписанныйОбъект
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.ВерсииФайлов КАК Версии
		|		ПО Файлы.Ссылка = Версии.Владелец
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ПО Версии.Ссылка = ЭП.ПодписанныйОбъект
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ");
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
		Набор.Отбор.ПодписанныйОбъект.Установить(Выборка.Объект);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Это документ МЭДО с внешней подписью. Входящий документ приходит с отметками подписей, но типовая подсистема ЭДО
// после записей генерирует на нашей стороне отметку ЭП. Для случая МЭДО это делать не надо, нужен признак, по которому
// типовая отметка ЭП будет пропускаться, не генерироваться.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО
// 
// Возвращаемое значение:
//  Булево - Это документ МЭДОСВнешней подписью
Функция ЭтоДокументМЭДОСВнешнейПодписью(Документ) Экспорт
	
	СтруктураСостояние = РегистрыСведений.СостоянияДокументовМЭДО.СостояниеДокумента(
		Документ, Перечисления.СостоянияДокументовМЭДО.ДокументПолучен, "Состояние", ТекущаяДатаСеанса());
	Возврат ЗначениеЗаполнено(СтруктураСостояние.Состояние);
	
КонецФункции

#КонецОбласти

#Область СинхронизацияСправочников

// Возвращает идентификатор внешнего объекта в МЭДО по объекту в этой базе.
//
// Параметры:
//   СсылкаНаОбъектИБ - ЛюбаяСсылка - Ссылка на объект в этой информационной базе
//   ТипВнешнегоОбъекта - Строка
//
// Возвращаемое значение:
//   Строка - идентификатор объекта, ранее полученный из МЭДО,
//     или пустая строка если не найдено.
//
Функция ИдентификаторВнешнегоОбъекта(СсылкаНаОбъектИБ, ТипВнешнегоОбъекта) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъектИБ) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ПолучитьИдентификаторПоОбъектуДО(
		СсылкаНаОбъектИБ, ТипВнешнегоОбъекта);
	
КонецФункции

// Создать/проверить связь объекта в данной ИБ и внешнего объекта
// 
// Параметры:
//  ИДВнешнегоОбъекта - Строка - Уникальный идентификатор внешнего объекта.
//  ТипВнешнегоОбъекта - Строка - Тип внешнего объекта
//  СсылкаНаОбъектИБ - ЛюбаяСсылка - Ссылка на объект в этой информационной базе
// 
Процедура СоздатьПроверитьСвязьОбъектаИБИВнешнегоОбъекта(
	ИДВнешнегоОбъекта, ТипВнешнегоОбъекта, СсылкаНаОбъектИБ) Экспорт
	
	Если Не ЗначениеЗаполнено(ИДВнешнегоОбъекта) Или Не ЗначениеЗаполнено(СсылкаНаОбъектИБ) Тогда
		Возврат;
	КонецЕсли;
	
	// нельзя РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта()
	// потому что при изменении идентификатора типовым способом он не перезаписывается, а добавится новый, 
	// в РС СвязиОбъектовИнтегрированныхСистем для бесшовной интеграции вполне возможно несколько документов
	// внешней системы, связанных с одним документом ДО, а для МЭДО связь 1 к 1, поэтому не типовой метод:
	УстановитьПривилегированныйРежим(Истина);

	Узел = ПараметрыСеанса.УзелИнтегрированнойСистемы;
	
	НаборЗаписей = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТипВнешнегоОбъекта.Установить(ТипВнешнегоОбъекта);
	НаборЗаписей.Отбор.СсылкаНаОбъектДО.Установить(СсылкаНаОбъектИБ);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 1
		И НаборЗаписей[0].УзелИнтегрированнойСистемы = Узел
		И НаборЗаписей[0].ИДВнешнегоОбъекта = ИДВнешнегоОбъекта
		И НаборЗаписей[0].ТипВнешнегоОбъекта = ТипВнешнегоОбъекта
		И НаборЗаписей[0].СсылкаНаОбъектДО = СсылкаНаОбъектИБ Тогда
		
		Возврат; // такая же запись уже есть.
	КонецЕсли;
	
	НаборЗаписей.Очистить();
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.УзелИнтегрированнойСистемы = Узел;
	НоваяЗапись.ИДВнешнегоОбъекта = ИДВнешнегоОбъекта;
	НоваяЗапись.ТипВнешнегоОбъекта = ТипВнешнегоОбъекта;
	НоваяЗапись.СсылкаНаОбъектДО = СсылкаНаОбъектИБ;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получить объект ИБ по идентификатору из внешней системы.
// 
// Параметры:
//  ИДВнешнегоОбъекта - Строка - Уникальный идентификатор внешнего объекта.
//  ТипВнешнегоОбъекта - Строка - Тип внешнего объекта
// 
// Возвращаемое значение:
//  Неопределено, Произвольный - Получить объект ИБПо идентификатору
Функция ОбъектИБПоИдентификатору(ИДВнешнегоОбъекта, ТипВнешнегоОбъекта) Экспорт
	
	МассивОбъектов = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ПолучитьОбъектыДОПоВнешнемуОбъекту(
		ИДВнешнегоОбъекта, ТипВнешнегоОбъекта, Истина);
	Если МассивОбъектов.Количество() > 0 Тогда
		Возврат МассивОбъектов[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция - Определяет контактное лицо по владельцу и наименованию, если не найден - создает нового.
//           Если найдено больше одного - берется то, которое чаще встречалось во входящих документах за последний год.
//
// Параметры:
//  КонтрагентСсылка - ОпределяемыйТип.КонтрагентМЭДО - контрагент-владелец контактного лица
//  Наименование - Строка - Наименование контактного лица
//  Идентификатор - Строка - Идентификатор во внешней системе. В некоторых структурах данных xsd-схемы может
//  						 отсутствовать, тогда синхронизация только по наименованию + Контрагент.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтактноеЛицоМЭДО
Функция НайтиСоздатьКонтактноеЛицо(КонтрагентСсылка, Наименование, Идентификатор) Экспорт
	
	Если Не ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		КонтактноеЛицоСсылка = ОбъектИБПоИдентификатору(Идентификатор, МЭДО.Обозначение_ВнешнееКонтактноеЛицо());
		Если ЗначениеЗаполнено(КонтактноеЛицоСсылка) Тогда
			Возврат КонтактноеЛицоСсылка;
		КонецЕсли;
	КонецЕсли;
	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
		|	КонтактныеЛица.Должность
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец
		|	И КонтактныеЛица.Наименование = &Наименование
		|	И НЕ КонтактныеЛица.ПометкаУдаления");
	Запрос.УстановитьПараметр("Владелец", КонтрагентСсылка);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КонтактноеЛицоСсылка = Неопределено;
	Если Выборка.Следующий() Тогда
		КонтактноеЛицоСсылка = Выборка.КонтактноеЛицо;
	Иначе
		НовоеКонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		НовоеКонтактноеЛицо.Владелец = КонтрагентСсылка;
		НовоеКонтактноеЛицо.Наименование = Наименование;
		НовоеКонтактноеЛицо.Записать();
		
		КонтактноеЛицоСсылка = НовоеКонтактноеЛицо.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Идентификатор) И ЗначениеЗаполнено(КонтактноеЛицоСсылка) Тогда
		// Привязка к идентификатору, если новое, если старое, то убедиться, что есть связь.
		СоздатьПроверитьСвязьОбъектаИБИВнешнегоОбъекта(
			Идентификатор, МЭДО.Обозначение_ВнешнееКонтактноеЛицо(), КонтактноеЛицоСсылка);
	КонецЕсли;
	
	
	Возврат КонтактноеЛицоСсылка;
	
КонецФункции

#КонецОбласти

// Главный файл документа к отправке по МЭДО - не должен быть скан копией, иначе не будет создано визуализации ЭЦП.
// 
// Возвращаемое значение:
//  Строка
Функция Текст_ФайлНеДолженБытьСканКопией() Экспорт
	
	Возврат НСтр("ru = 'Главный файл к отправке не должен иметь признак ""Скан-копия оригинала""'");
	
КонецФункции

#КонецОбласти
