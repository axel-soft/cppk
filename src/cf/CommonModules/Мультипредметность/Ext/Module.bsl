////////////////////////////////////////////////////////////////////////////////
// Подсистема "Мультипредметность"
// Модуль Мультипредметность: сервер, внешнее соединение
//
// Содержит процедуры и функции обработки объектов и механизмов, 
// поддерживающих мультипредметность.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Метод предназначен для использования в стандартных обработчиках форм процессов ПриСозданииНаСервере
// Параметры:
//  Форма - форма процесса
//  Объект - открываемый объект
Процедура ПроцессПриСозданииНаСервере(Форма, Объект) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Объект.Ссылка) Тогда
		УстановитьПривилегированныйРежим(Истина);
		МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
		Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ДействияПроцесса = ПолучитьДействияПроцесса(Объект.Ссылка);
	
	// Заполним дерево точек маршрута
	Если Форма.Элементы.Найти("ТочкиМаршрута") <> Неопределено Тогда
		Точки = Форма.ТочкиМаршрута.ПолучитьЭлементы();
		
		Для Каждого Действие Из ДействияПроцесса Цикл
			Строка = Точки.Добавить();
			Строка.Наименование = Действие.НаименованиеЗадачи;
			Строка.ТочкаМаршрута = Действие;
		КонецЦикла;
	
		Форма.ТекущаяСтрокаМаршрута = 0;
		Форма.Элементы.ТочкиМаршрута.ТекущаяСтрока = Форма.ТекущаяСтрокаМаршрута;
	
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			Строка = Форма.ПредметыЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаПредмета);
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьДоступностьПредметам(Форма, Объект);
	
	Если Форма.Элементы.Найти("ПредметыЗадач") <> Неопределено И Объект.Завершен Тогда
		Форма.Элементы.ПредметыЗадач.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда 
		Попытка 
			Форма.ДействияПроцесса.ЗагрузитьЗначения(ДействияПроцесса);
		Исключение
			// реквизита может не быть
		КонецПопытки;
	Иначе
		Попытка 
			Форма.ДействияПроцесса.Загрузить(ПолучитьДействияКомплексногоПроцесса(Объект));
		Исключение
			// реквизита может не быть
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		Форма.ДоступныеРолиПредметов.ЗагрузитьЗначения(Менеджер.ПолучитьДоступныеРолиПредметов());
		
		Форма.ТипыОсновныхПредметов.ЗагрузитьЗначения(
			ТипыОсновныхПредметовВПользовательскомИнтерфейсе(Объект.Ссылка));
	Исключение
		// Реквизита может не быть.
	КонецПопытки;
	
	УстановитьОформлениеПредметов(Форма.УсловноеОформление);
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(Форма);
	МультипредметностьКлиентСервер.УстановитьВидимостьТаблицыПредметов(Форма, Объект);
	
КонецПроцедуры

// Вызывается после записи процесса в форме
// Параметры:
//  Форма - форма процесса
//  Объект - открываемый объект
Процедура ПроцессПослеЗаписиНаСервере(Форма, Объект) Экспорт
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	УстановитьДоступностьПредметам(Форма, Объект);
	
КонецПроцедуры

// Ограничивает доступность предметов при прерывании процесса.
//
Процедура УстановитьДоступностьПредметам(Форма, Объект)
	
	Если Форма.Элементы.Найти("Предметы") <> Неопределено
		И (Объект.Завершен ИЛИ Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван) Тогда
			
		Форма.Элементы.Предметы.ТолькоПросмотр = Истина;
		Если Форма.Элементы.Найти("ПредметыДобавитьПредмет") <> Неопределено Тогда
			Форма.Элементы.ПредметыДобавитьПредмет.Доступность = Ложь;
			Для Каждого Элемент Из Форма.Элементы.ПредметыДобавитьПредмет.ПодчиненныеЭлементы Цикл
				Элемент.Доступность = Ложь;
			КонецЦикла;
		КонецЕсли;
		Если Форма.Элементы.Найти("ПредметыКонтекстноеМенюДобавитьПредмет") <> Неопределено Тогда
			Форма.Элементы.ПредметыКонтекстноеМенюДобавитьПредмет.Доступность = Ложь;
			Для Каждого Элемент Из Форма.Элементы.ПредметыКонтекстноеМенюДобавитьПредмет.ПодчиненныеЭлементы Цикл
				Элемент.Доступность = Ложь;
			КонецЦикла;
		КонецЕсли;
		Если Форма.Элементы.Найти("ПредметыКонтекстноеМенюОсновнойПредмет") <> Неопределено Тогда
			Форма.Элементы.ПредметыКонтекстноеМенюОсновнойПредмет.Доступность = Ложь;
		КонецЕсли;
		
		Если Форма.Элементы.Найти("ГруппаПредметыИФайлы") <> Неопределено Тогда
			Форма.Элементы.ГруппаПредметыИФайлы.Доступность = Ложь;
			Для Каждого Элемент Из Форма.Элементы.ГруппаПредметыИФайлы.ПодчиненныеЭлементы Цикл
				Элемент.Доступность = Ложь;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед созданием задачи процесса, заполняет предметы задач
// Метод предназначен для использования в стандартных обработчиках процессов ТочкаМаршрута.ПередСозданиемЗадач
// Параметры:
//  Процесс - БизнесПроцессОбъект = объект бизнес-процесса 
//  Задача - ЗадачаОбъект - объект задачи 
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута бизнес-процесса
//
Процедура ЗадачаПередСозданием(Процесс, Задача, ТочкаМаршрута) Экспорт
	
	// порядок предметов в таблице ПредметыЗадач может быть нарушен.
	// для соответствия порядка предметов в процессе и задаче обойдем предметы по предметам процесса.
	Для Каждого СтрокаПредмета Из Процесс.Предметы Цикл
		Отбор = Новый Структура("ТочкаМаршрута, ИмяПредмета", ТочкаМаршрута, СтрокаПредмета.ИмяПредмета);
		СтрокиЗадач = Процесс.ПредметыЗадач.НайтиСтроки(Отбор);
		Если СтрокиЗадач.Количество() > 0 Тогда
			НоваяСтрока = Задача.Предметы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиЗадач[0]);
			НоваяСтрока.Предмет = СтрокаПредмета.Предмет;
			НоваяСтрока.РольПредмета = СтрокаПредмета.РольПредмета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при копировании процесса.
//
// Параметры:
//  Процесс  - БизнесПроцессОбъект - создаваемый процесс при помощи копирования.
//
Процедура БизнесПроцессПриКопировании(Процесс) Экспорт
	
	ИндексСтроки = Процесс.Предметы.Количество() - 1;
	
	ПредметыШаблона = Неопределено;
	Если ЗначениеЗаполнено(Процесс.Шаблон) Тогда
		ПредметыШаблона = 
			ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Процесс.Шаблон, "Предметы");
		ПредметыШаблона = ПредметыШаблона.Выгрузить();
	КонецЕсли;
	
	Пока ИндексСтроки >= 0 Цикл
		
		СтрПредмет = Процесс.Предметы[ИндексСтроки];
		
		Если СтрПредмет.РольПредмета = Перечисления.РолиПредметов.Заполняемый Тогда
			
			ПустоеЗначение = Неопределено;
			Если ПредметыШаблона <> Неопределено Тогда
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("ИмяПредмета", СтрПредмет.ИмяПредмета);
				СтрокиВШаблоне = ПредметыШаблона.НайтиСтроки(ПараметрыПоиска);
				Если СтрокиВШаблоне.Количество() > 0 Тогда
					ПустоеЗначение = СтрокиВШаблоне[0].Предмет;
				КонецЕсли;
			КонецЕсли;
			
			СтрПредмет.Предмет = ПустоеЗначение;
			
		ИначеЕсли Мультипредметность.ЭтоФайлБизнесПроцесса(СтрПредмет.Предмет) Тогда
			
			// Удаление файлов-предметов из скопированного процесса,
			// владельцем которых является другой процесс.
			
			// Удаление строк из таблицы ПредметыЗадач
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("ИмяПредмета", СтрПредмет.ИмяПредмета);
			СтрокиКУдалению = Процесс.ПредметыЗадач.НайтиСтроки(ПараметрыПоиска);
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Процесс.ПредметыЗадач.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			// Удаление строки из таблицы Предметы
			Процесс.Предметы.Удалить(ИндексСтроки);
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при создании формы шаблона процесса
//
Процедура ШаблонПриСозданииНаСервере(Форма, Объект) Экспорт
	
	ДанныеЗаполнения = Форма.Параметры;
	
	ПроцессСсылка = Форма.ПустойБизнесПроцесс.Ссылка;
	
	Если ДанныеЗаполнения.Свойство("Предметы") Тогда
		Если Не Объект.ШаблонВКомплексномПроцессе Тогда 
			Объект.Предметы.Загрузить(ДанныеЗаполнения.Предметы.Выгрузить());
		Иначе
			Для Каждого СтрокаПредмета Из ДанныеЗаполнения.Предметы Цикл
				СтрокиПредмета = Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПредмета.ИмяПредмета));
				Если СтрокиПредмета.Количество() = 0 Тогда
					НоваяСтрока = Объект.Предметы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПредмета);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПроцессСсылка.Метаданные().ПолноеИмя());
		ДоступныеРолиПредметов = Менеджер.ПолучитьДоступныеРолиПредметов();
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
                СтрокаПредмета.Предмет = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
					СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
			КонецЕсли;
			Если ДоступныеРолиПредметов.Найти(СтрокаПредмета.РольПредмета) = Неопределено Тогда
				СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Вспомогательный;
				СтрокаПредмета.ИмяПредметаОснование = Неопределено;
				СтрокаПредмета.ШаблонОснование = Неопределено;
			КонецЕсли;
		КонецЦикла;
		ДействияПроцесса = Мультипредметность.ПолучитьДействияПроцесса(ПроцессСсылка);
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			Для Каждого Действие Из ДействияПроцесса Цикл
				СтруктураПоиска = Новый Структура("ИмяПредмета, ТочкаМаршрута", СтрокаПредмета.ИмяПредмета, Действие);
				Если Объект.ПредметыЗадач.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда 
					Строка = Объект.ПредметыЗадач.Добавить();
					Строка.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
					Строка.ТочкаМаршрута  = Действие;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеПредметовШаблона(Объект);
	
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса = СтрокаПредмета.ИмяПредмета;
		КонецЦикла;
	КонецЕсли;
	
	ЭтоУтверждение = ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныУтверждения");
	Если ТипЗнч(Объект.Ссылка) <> Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда 
		Если ПроцессСсылка <> Неопределено Тогда
			ДействияПроцесса = ПолучитьДействияПроцесса(ПроцессСсылка);
			Точки = Форма.ТочкиМаршрута.ПолучитьЭлементы();
			Для Каждого Действие Из ДействияПроцесса Цикл
				Строка = Точки.Добавить();
				Строка.ТочкаМаршрута = Действие;
				Если ЭтоУтверждение Тогда
					Строка.ТочкаМаршрутаПредставление = Строка(Действие);
				КонецЕсли;
			КонецЦикла;
			Попытка 
				Форма.ДействияПроцесса.ЗагрузитьЗначения(ДействияПроцесса);
			Исключение
				// реквизита может не быть
			КонецПопытки;
		КонецЕсли;
	Иначе
		Форма.ДействияПроцесса.Загрузить(ПолучитьДействияКомплексногоПроцесса(Объект));
		
		Форма.РолиПредметовЭтапов.Загрузить(
			РолиПредметовДействийПоКарточкеКомплексногоПроцесса(Форма));
			
		ЗаполнитьДеревоТочекПоДействиямПроцесса(Форма.ДействияПроцесса, Форма.ТочкиМаршрута);
	КонецЕсли;
	
	Если Форма.Элементы.Предметы.ТекущаяСтрока = Неопределено Тогда
		Форма.Элементы.ТочкиМаршрутаВидимость.ТолькоПросмотр = Истина;
		Форма.Элементы.ТочкиМаршрутаОбязательноеЗаполнение.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ИсполнителиОписаниеУсловия") <> Неопределено Тогда
		Для Каждого Строка Из Объект.Исполнители Цикл
			Строка.ОписаниеУсловия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2",Строка.ИмяПредметаУсловия, Строка.Условие);
			Если Не ЗначениеЗаполнено(Строка.ИмяПредметаУсловия) И Не ЗначениеЗаполнено(Строка.Условие) Тогда
				Строка.ОписаниеУсловия = НСтр("ru='Не установлено'");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Попытка
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПроцессСсылка);
		Форма.ДоступныеРолиПредметов.ЗагрузитьЗначения(Менеджер.ПолучитьДоступныеРолиПредметов());
	Исключение
		// Реквизита может не быть.
	КонецПопытки;
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(Форма);
	
КонецПроцедуры

// Заполняет табличные части Предметы и ПредметыЗадач процесса по предметам задачи
//
Процедура ЗаполнитьПредметыПроцессаПоЗадаче(ПроцессОбъект, ЗадачаСсылка) Экспорт
	
	ПредметыЗадачи = ПолучитьПредметыЗадачи(ЗадачаСсылка);
	ДействияПроцесса = ПолучитьДействияПроцесса(ПроцессОбъект.Ссылка);
	
	ДобавлятьСтроки = Истина;
	
	Если ЗначениеЗаполнено(ПроцессОбъект.Шаблон) И ПроцессОбъект.Предметы.Количество() > 0 Тогда
		ДобавлятьСтроки = Ложь;
	КонецЕсли;
	
	Для Каждого Строка Из ПредметыЗадачи Цикл
		
		Если ЭтоФайлБизнесПроцесса(Строка.Предмет) И Не ФайлПринадлежитПроцессу(Строка.Предмет, ПроцессОбъект.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПредметаПроцесса = ПроцессОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",Строка.ИмяПредмета));
		Если СтрокиПредметаПроцесса.Количество() = 0 Тогда
			Если ДобавлятьСтроки Тогда
				Если Строка.РольПредмета = Перечисления.РолиПредметов.Заполняемый Тогда
					Если ЗначениеЗаполнено(Строка.Предмет) Тогда
						СтрокаПредмета = ПроцессОбъект.Предметы.Добавить();
						СтрокаПредмета.Предмет = Строка.Предмет;
						СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Вспомогательный;
						СтрокаПредмета.ИмяПредмета = Строка.ИмяПредмета;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					СтрокаПредмета = ПроцессОбъект.Предметы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПредмета, Строка);
				КонецЕсли;
				Для Каждого Действие Из ДействияПроцесса Цикл
					СтрокаПредметовЗадач = ПроцессОбъект.ПредметыЗадач.Добавить();
					СтрокаПредметовЗадач.ТочкаМаршрута = Действие;
					СтрокаПредметовЗадач.ИмяПредмета = Строка.ИмяПредмета;
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтрокаПредмета = СтрокиПредметаПроцесса[0];
			Если СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Заполняемый Тогда
				Если ЗначениеЗаполнено(Строка.Предмет) Тогда
					СтрокаПредмета.Предмет = Строка.Предмет;
					СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Вспомогательный;
					СтрокаПредмета.ИмяПредметаОснование = Неопределено;
					СтрокаПредмета.ШаблонОснование = Неопределено;
				Иначе
					УдаляемыеСтроки = ПроцессОбъект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета",СтрокаПредмета.ИмяПредмета));
					Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
						ПроцессОбъект.ПредметыЗадач.Удалить(УдаляемаяСтрока);
					КонецЦикла;
					ПроцессОбъект.Предметы.Удалить(СтрокаПредмета);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет предметы подчиненных процессов по предметам ведущей задачи
//
Процедура ПередатьПредметыЗадачиПодчиненнымПроцессам(ЗадачаОбъект, ПередатьСтатусы = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Удаление = Ложь;
		Если ЗадачаОбъект.ДополнительныеСвойства.Свойство("ИзменениеПредмета") Тогда
			СтруктураИзменения = ЗадачаОбъект.ДополнительныеСвойства.ИзменениеПредмета;
			Удаление = СтруктураИзменения.Удаление;
		КонецЕсли;
		
		ПодчиненныеБизнесПроцессы = БизнесПроцессыИЗадачиСервер.ПолучитьПодчиненныеБизнесПроцессы(ЗадачаОбъект.Ссылка);
		
		ПредметыЗадачи = ЗадачаОбъект.Предметы.Выгрузить();
		
		Для Каждого БизнесПроцесс Из ПодчиненныеБизнесПроцессы Цикл
			
			ЗаблокироватьДанныеДляРедактирования(БизнесПроцесс);
			ПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
			
			ДействияПроцесса = Неопределено;
			
			ПредметыПроцесса = ПолучитьПредметыПроцесса(БизнесПроцесс);
			
			Если Удаление И ПредметыПроцесса.Найти(СтруктураИзменения.ИмяПредмета, "ИмяПредмета") <> Неопределено Тогда
								
				СтрокиПредметаПроцесса = ПроцессОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",СтруктураИзменения.ИмяПредмета));
				СтрокаПредмета = СтрокиПредметаПроцесса[0];
				
				СтруктураУдаляемогоПредмета = Новый Структура;
				СтруктураУдаляемогоПредмета.Вставить("РольПредмета", СтрокаПредмета.РольПредмета);
				СтруктураУдаляемогоПредмета.Вставить("Предмет", СтрокаПредмета.Предмет);
				
				Если СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной 
					Или СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Вспомогательный Тогда
					ПроцессОбъект.Предметы.Удалить(СтрокаПредмета);
					СтрокиПредметовЗадач = ПроцессОбъект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета", СтруктураИзменения.ИмяПредмета));
					Для Каждого СтрокаПредметовЗадач Из СтрокиПредметовЗадач Цикл
						ПроцессОбъект.ПредметыЗадач.Удалить(СтрокаПредметовЗадач);
					КонецЦикла;
				ИначеЕсли СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Заполняемый Тогда
					Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
						СтрокаПредмета.Предмет = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
							СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
					КонецЕсли;
					Если ПроцессОбъект.Ссылка = СтруктураИзменения.ПроцессИсточник Тогда 
						СтрокиЗадачПредмета = ПроцессОбъект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета, ТочкаМаршрута", СтруктураИзменения.ИмяПредмета, СтруктураИзменения.ТочкаИсточник));
						Если СтрокиЗадачПредмета.Количество() > 0 Тогда
							СтрокиЗадачПредмета[0].ДоступноУдаление = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
			
				СтрокиКУдалению = Новый Массив;
				Для Каждого СтрокаПредмета Из ПредметыЗадачи Цикл 
					Если Мультипредметность.ЭтоФайлБизнесПроцесса(СтрокаПредмета.Предмет) Тогда
						СтрокиКУдалению.Добавить(СтрокаПредмета);
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из СтрокиКУдалению Цикл
					ПредметыЗадачи.Удалить(Строка);
				КонецЦикла;
					
				Для Каждого Строка Из ПредметыЗадачи Цикл
					
					СтрокиПредметаПроцесса = ПредметыПроцесса.НайтиСтроки(новый Структура("ИмяПредмета",Строка.ИмяПредмета));
					
					Если СтрокиПредметаПроцесса.Количество() = 0 Тогда
											
						Если ДействияПроцесса = Неопределено Тогда
							ДействияПроцесса = ПолучитьДействияПроцесса(БизнесПроцесс);
						КонецЕсли;
						
						СтрокаПредмета = ПроцессОбъект.Предметы.Добавить();
						СтрокаПредмета.РольПредмета = Строка.РольПредмета;
						СтрокаПредмета.ИмяПредмета = Строка.ИмяПредмета;
						СтрокаПредмета.Предмет = Строка.Предмет;
						
						Для Каждого Действие Из ДействияПроцесса Цикл
							СтрокаПредметовЗадач = ПроцессОбъект.ПредметыЗадач.Добавить();
							СтрокаПредметовЗадач.ТочкаМаршрута = Действие;
							СтрокаПредметовЗадач.ИмяПредмета = Строка.ИмяПредмета;
						КонецЦикла;
						
					ИначеЕсли СтрокиПредметаПроцесса.Количество() > 0  Тогда 
						
						СтрокиПредметаПроцесса = ПроцессОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",Строка.ИмяПредмета));
						СтрокаПредмета = СтрокиПредметаПроцесса[0];
						Если ЗначениеЗаполнено(Строка.Предмет) Тогда
							СтрокаПредмета.Предмет = Строка.Предмет;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ПроцессОбъект <> Неопределено Тогда
				Если Не ПроцессОбъект.ПроверитьЗаполнение() Тогда
					ВызватьИсключение НСтр("ru = 'Недопустимый предмет для процесса: '") + Строка(ПроцессОбъект);
				КонецЕсли;
				
				Если ЗадачаОбъект.ДополнительныеСвойства.Свойство("ИзменениеПредмета") Тогда
					ПроцессОбъект.ДополнительныеСвойства.Вставить("ИзменениеПредмета", ЗадачаОбъект.ДополнительныеСвойства.ИзменениеПредмета);
				КонецЕсли;
				РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект,
					"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Записывает переданный имя предмета и предмет в процесс
//
Процедура ЗаписатьПредметБизнесПроцесса(ПроцессСсылка, ИмяПредмета, Предмет, ПроцессИсточник = Неопределено, ТочкаИсточник = Неопределено, Удаление = Ложь) Экспорт
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ПроцессСсылка);
		ПроцессОбъект = ПроцессСсылка.ПолучитьОбъект();
		
		ДействияПроцесса = Неопределено;
		
		ПредметыПроцесса = ПолучитьПредметыПроцесса(ПроцессСсылка);
		
		СтрокиПредметаПроцесса = ПредметыПроцесса.НайтиСтроки(новый Структура("ИмяПредмета",ИмяПредмета));
		Если СтрокиПредметаПроцесса.Количество() = 0 И Не Удаление Тогда
			СтрокаПредмета = ПроцессОбъект.Предметы.Добавить();
			СтрокаПредмета.ИмяПредмета = ИмяПредмета;
			СтрокаПредмета.Предмет = Предмет;
			СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Вспомогательный;

			Если ДействияПроцесса = Неопределено Тогда
				ДействияПроцесса = ПолучитьДействияПроцесса(ПроцессСсылка);
			КонецЕсли;
			
			Для Каждого Действие Из ДействияПроцесса Цикл
				СтрокаПредметовЗадач = ПроцессОбъект.ПредметыЗадач.Добавить();
				СтрокаПредметовЗадач.ТочкаМаршрута = Действие;
				СтрокаПредметовЗадач.ИмяПредмета = ИмяПредмета;
				Если ПроцессОбъект.Ссылка = ПроцессИсточник И СтрокаПредметовЗадач.ТочкаМаршрута = ТочкаИсточник Тогда
					СтрокаПредметовЗадач.ДоступноУдаление = Истина;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли СтрокиПредметаПроцесса.Количество() <> 0 И Не Удаление Тогда 
			СтрокиПредметаПроцесса = ПроцессОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",ИмяПредмета));
			СтрокаПредмета = СтрокиПредметаПроцесса[0];
			Если ЗначениеЗаполнено(Предмет) Тогда
				СтрокаПредмета.Предмет = Предмет;
				Если ПроцессОбъект.Ссылка = ПроцессИсточник Тогда
					СтрокиПредметовЗадач = ПроцессОбъект.ПредметыЗадач.НайтиСтроки(
						Новый Структура("ТочкаМаршрута, ИмяПредмета", ТочкаИсточник, ИмяПредмета));
					Если СтрокиПредметовЗадач.Количество() > 0 Тогда
						СтрокиПредметовЗадач[0].ДоступноУдаление = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокиПредметаПроцесса.Количество() <> 0 И Удаление Тогда 
			СтрокиПредметаПроцесса = ПроцессОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",ИмяПредмета));
			СтрокаПредмета = СтрокиПредметаПроцесса[0];
			
			СтруктураУдаляемогоПредмета = Новый Структура;
			СтруктураУдаляемогоПредмета.Вставить("РольПредмета", СтрокаПредмета.РольПредмета);
			СтруктураУдаляемогоПредмета.Вставить("Предмет", СтрокаПредмета.Предмет);
			
			Если СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной 
			 Или СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Вспомогательный Тогда
				ПроцессОбъект.Предметы.Удалить(СтрокаПредмета);
				СтрокиПредметовЗадач = ПроцессОбъект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета", ИмяПредмета));
				Для Каждого СтрокаПредметовЗадач Из СтрокиПредметовЗадач Цикл
					ПроцессОбъект.ПредметыЗадач.Удалить(СтрокаПредметовЗадач);
				КонецЦикла;
			ИначеЕсли СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Заполняемый Тогда
				Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
					Если ЗначениеЗаполнено(ПроцессОбъект.Шаблон) Тогда
						ИменаПредметовШаблона = МультипредметностьВызовСервера.ПолучитьИменаПредметовШаблона(ПроцессОбъект.Шаблон);
						Для Каждого Элемент Из ИменаПредметовШаблона Цикл
							Если Элемент.Ключ = СтрокаПредмета.ИмяПредмета Тогда 
								СтрокаПредмета.Предмет = Элемент.Значение;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
						СтрокаПредмета.Предмет = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
							СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
				СтрокиЗадачПредмета = ПроцессОбъект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета, ТочкаМаршрута", ИмяПредмета, ТочкаИсточник));
				Если СтрокиЗадачПредмета.Количество() > 0 Тогда
					СтрокиЗадачПредмета[0].ДоступноУдаление = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураУдаляемогоПредмета.Предмет) = Тип("СправочникСсылка.Файлы") И СтруктураУдаляемогоПредмета.Предмет.ВладелецФайла = ПроцессИсточник Тогда
				ПредметОбъект = СтруктураУдаляемогоПредмета.Предмет.ПолучитьОбъект();
				ПредметОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПроцессОбъект <> Неопределено Тогда
			Если Не ПроцессОбъект.ПроверитьЗаполнение() Тогда
				ВызватьИсключение НСтр("ru = 'Недопустимый предмет для процесса: '") + Строка(ПроцессОбъект);
			КонецЕсли;
			СтруктураИзменения = Новый Структура;
			СтруктураИзменения.Вставить("ПроцессИсточник",ПроцессИсточник);
			СтруктураИзменения.Вставить("ТочкаИсточник",ТочкаИсточник);
			СтруктураИзменения.Вставить("ИмяПредмета",ИмяПредмета);
			СтруктураИзменения.Вставить("Удаление",Удаление);
			
			ПроцессОбъект.ДополнительныеСвойства.Вставить("ИзменениеПредмета",СтруктураИзменения);
			
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект,
				"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
			
		КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Записывает значение заполняемого предмета в комплексный процесс
//
Процедура ЗаписатьЗаполняемыйПредметКомплексногоПроцесса(ПроцессСсылка, ИмяПредмета, Предмет, ПроцессИсточник, ТочкаИсточник, Удаление) Экспорт
 
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ПроцессСсылка);
		ПроцессОбъект = ПроцессСсылка.ПолучитьОбъект();
		
		ДействияПроцесса = Неопределено;
		
		ПредметыПроцесса = ПолучитьПредметыПроцесса(ПроцессСсылка);
		
		СтрокиПредметаПроцесса = ПредметыПроцесса.НайтиСтроки(новый Структура("ИмяПредмета",ИмяПредмета));
		
		Если СтрокиПредметаПроцесса.Количество() <> 0 Тогда 
				
			СтрокиПредметаПроцесса = ПроцессОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",ИмяПредмета));
			СтрокаПредмета = СтрокиПредметаПроцесса[0];
			СтрокаПредмета.Предмет = Предмет;
			
			ИспользоватьСхемуПроцесса = ЗначениеЗаполнено(ПроцессОбъект.Схема);
			
			ШаблонПроцессаИсточника = Неопределено;
			Если ИспользоватьСхемуПроцесса Тогда
				
				МассивТипов = Метаданные.ОпределяемыеТипы.ДействиеКомплексногоПроцесса.Тип.Типы();
				ЗапущенныеПроцессыДействий = Новый Массив;
				
				ПараметрыСхемы =
					Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(
					ПроцессОбъект.Схема);
						
				Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
					
					ПроцессыЭлементов = 
						РаботаСКомплекснымиБизнесПроцессамиСервер.
						ПроцессыЭлементовСхемыПоКомплексномуПроцессу(ПроцессОбъект);
						
					ИмяЭлемента = "";
					Для Каждого ИмяЭлементаИПроцесс Из ПроцессыЭлементов Цикл
						ЗапущенныеПроцессыДействий.Добавить(ИмяЭлементаИПроцесс.Значение);
						Если ИмяЭлементаИПроцесс.Значение = ПроцессИсточник Тогда
							ИмяЭлемента = ИмяЭлементаИПроцесс.Ключ;
						КонецЕсли;
					КонецЦикла;
					
					ДанныеПараметров = 
						Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
						ПараметрыСхемы);
					НастройкаЭлемента = ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента];
					Если ЗначениеЗаполнено(НастройкаЭлемента) Тогда
						ШаблонПроцессаИсточника = НастройкаЭлемента;
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				СтрокаЭтапа = ПроцессОбъект.Этапы.Найти(ПроцессИсточник,"ЗапущенныйБизнесПроцесс");
				Если СтрокаЭтапа <> Неопределено Тогда
					ШаблонПроцессаИсточника = СтрокаЭтапа.ШаблонБизнесПроцесса;
				КонецЕсли;
				МассивТипов = Метаданные.БизнесПроцессы.КомплексныйПроцесс.ТабличныеЧасти.Этапы.Реквизиты.ЗапущенныйБизнесПроцесс.Тип.Типы();
				ЗапущенныеПроцессыДействий = ПроцессОбъект.Этапы.ВыгрузитьКолонку("ЗапущенныйБизнесПроцесс");
			КонецЕсли;
			
			Если ШаблонПроцессаИсточника <> Неопределено Тогда
				СтрокиПредметовЗадач = ПроцессОбъект.ПредметыЗадач.НайтиСтроки(
						Новый Структура("ШаблонБизнесПроцесса, ТочкаМаршрута, ИмяПредмета", ШаблонПроцессаИсточника, ТочкаИсточник, ИмяПредмета));
				Если СтрокиПредметовЗадач.Количество() > 0 Тогда
					СтрокиПредметовЗадач[0].ДоступноУдаление = ЗначениеЗаполнено(Предмет);
				КонецЕсли;
			КонецЕсли;
			
			Если ПроцессОбъект.ПроверитьЗаполнение() Тогда
				
				РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект,
					"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
				
				Если ЗначениеЗаполнено(ПроцессОбъект.ВедущаяЗадача) Тогда
					КорневойПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроцессОбъект.ВедущаяЗадача, "БизнесПроцесс");
					Если ТипЗнч(КорневойПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
						Мультипредметность.ЗаписатьЗаполняемыйПредметКомплексногоПроцесса(КорневойПроцесс, ИмяПредмета, Предмет, ПроцессОбъект.Ссылка, Неопределено, Удаление);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
				
				ТипыШаблонов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(МассивТипов);
				ТекстЗапроса = "";
				
				Для Каждого Тип Из ТипыШаблонов Цикл
					ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
					|ОБЪЕДИНИТЬ ВСЕ")
					+ "
					|ВЫБРАТЬ
					|	ПредметыПроцесса.Ссылка
					|ИЗ
					|	%Таблица%.Предметы КАК ПредметыПроцесса
					|ГДЕ
					|	ПредметыПроцесса.Ссылка В (&ЗапущенныеПроцессыДействий)
					|	И ПредметыПроцесса.ИмяПредмета = &ИмяПредмета
					|
					|СГРУППИРОВАТЬ ПО
					|	ПредметыПроцесса.Ссылка";
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", Тип.Значение);
				КонецЦикла;
				
				Запрос = Новый Запрос;
				
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("ЗапущенныеПроцессыДействий", ЗапущенныеПроцессыДействий);
				Запрос.УстановитьПараметр("ИмяПредмета", ИмяПредмета);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
					СтрокаПредмета = ПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
					СтрокаПредмета.Предмет = Предмет;
					Если Выборка.Ссылка = ПроцессИсточник Тогда
						СтрокиПредметовЗадач = ПроцессОбъект.ПредметыЗадач.НайтиСтроки(
								Новый Структура("ТочкаМаршрута, ИмяПредмета", ТочкаИсточник, ИмяПредмета));
						Если СтрокиПредметовЗадач.Количество() > 0 Тогда
							СтрокиПредметовЗадач[0].ДоступноУдаление = ЗначениеЗаполнено(Предмет);
						КонецЕсли;
					КонецЕсли;
					Если ПроцессОбъект.ПроверитьЗаполнение() Тогда
						РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект,
							"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
					КонецЕсли;
				КонецЦикла;
			
		КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработать описание предметов процесса
//
Процедура ОбработатьОписаниеПредметовПроцесса(ПроцессОбъект) Экспорт
	
	ЭтоКомплексныйПроцесс = МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(ПроцессОбъект.Ссылка);

	Для Каждого СтрокаПредмета Из ПроцессОбъект.Предметы Цикл
		
		МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредмета(СтрокаПредмета, ПроцессОбъект.ПредметыЗадач, ЭтоКомплексныйПроцесс);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает установку доп. реквизитов процесса по доп. реквизитам его предметов
//
Процедура УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(Форма, Объект) Экспорт
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства Тогда
		Возврат;
	КонецЕсли;
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);
	
	Для Каждого Предмет Из Предметы Цикл
		РаботаСБизнесПроцессамиВызовСервера.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормы(Предмет, Форма);
	КонецЦикла;
	
КонецПроцедуры

// Копирует значения доп. реквизитов предметов в объект
//
Процедура СкопироватьЗначенияДопРеквизитовПредметов(Объект) Экспорт
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Предмет, Объект);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет предметы незавершенных задач процесса по данным предметов действий процесса
//
Процедура ПриИзмененииПредметовБизнесПроцесса(Объект, ТекущиеПредметы, ПредыдущиеПредметы) Экспорт
	
	ЭтоКомплексныйПроцесс = МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТекущиеПредметы.ТочкаМаршрута,
			|	ТекущиеПредметы.РольПредмета,
			|	ТекущиеПредметы.ИмяПредмета,
			|	ТекущиеПредметы.Предмет,
			|	ТекущиеПредметы.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
			|	ТекущиеПредметы.ДоступноУдаление КАК ДоступноУдаление
			|ПОМЕСТИТЬ ТекущиеПредметы
			|ИЗ
			|	&ТекущиеПредметы КАК ТекущиеПредметы
			|//Условие
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка,
			|	ТекущиеПредметы.РольПредмета,
			|	ТекущиеПредметы.ИмяПредмета,
			|	ТекущиеПредметы.Предмет,
			|	ТекущиеПредметы.ДоступноУдаление,
			|	ТекущиеПредметы.ОбязательноеЗаполнение
			|ПОМЕСТИТЬ ПредметыПроцесса
			|ИЗ
			|	ТекущиеПредметы КАК ТекущиеПредметы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО ТекущиеПредметы.ТочкаМаршрута = ЗадачаИсполнителя.ТочкаМаршрута
			|			И (ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс)
			|			И (ЗадачаИсполнителя.Выполнена = ЛОЖЬ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗадачаИсполнителяПредметы.Ссылка,
			|	ЗадачаИсполнителяПредметы.РольПредмета,
			|	ЗадачаИсполнителяПредметы.ИмяПредмета,
			|	ЗадачаИсполнителяПредметы.Предмет,
			|	ЗадачаИсполнителяПредметы.ДоступноУдаление,
			|	ЗадачаИсполнителяПредметы.ОбязательноеЗаполнение
			|ПОМЕСТИТЬ ПредметыЗадач
			|ИЗ
			|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
			|ГДЕ
			|	ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс = &БизнесПроцесс
			|	И ЗадачаИсполнителяПредметы.Ссылка.Выполнена = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВсеПредметы.Ссылка,
			|	ВсеПредметы.РольПредмета,
			|	ВсеПредметы.ИмяПредмета,
			|	ВсеПредметы.Предмет,
			|	ВсеПредметы.ДоступноУдаление,
			|	ВсеПредметы.ОбязательноеЗаполнение,
			|	СУММА(ВсеПредметы.Результат) КАК Результат
			|ПОМЕСТИТЬ Результаты
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПредметыПроцесса.Ссылка КАК Ссылка,
			|		ПредметыПроцесса.РольПредмета КАК РольПредмета,
			|		ПредметыПроцесса.ИмяПредмета КАК ИмяПредмета,
			|		ПредметыПроцесса.Предмет КАК Предмет,
			|		ПредметыПроцесса.ДоступноУдаление КАК ДоступноУдаление,
			|		ПредметыПроцесса.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
			|		-1 КАК Результат
			|	ИЗ
			|		ПредметыПроцесса КАК ПредметыПроцесса
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ПредметыЗадач.Ссылка,
			|		ПредметыЗадач.РольПредмета,
			|		ПредметыЗадач.ИмяПредмета,
			|		ПредметыЗадач.Предмет,
			|		ПредметыЗадач.ДоступноУдаление,
			|		ПредметыЗадач.ОбязательноеЗаполнение,
			|		1
			|	ИЗ
			|		ПредметыЗадач КАК ПредметыЗадач) КАК ВсеПредметы
			|
			|СГРУППИРОВАТЬ ПО
			|	ВсеПредметы.Ссылка,
			|	ВсеПредметы.РольПредмета,
			|	ВсеПредметы.ИмяПредмета,
			|	ВсеПредметы.Предмет,
			|	ВсеПредметы.ДоступноУдаление,
			|	ВсеПредметы.ОбязательноеЗаполнение
			|
			|ИМЕЮЩИЕ
			|	СУММА(ВсеПредметы.Результат) <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Результаты.Ссылка,
			|	Результаты.Ссылка.ТочкаМаршрута КАК ТочкаМаршрута
			|ИЗ
			|	Результаты КАК Результаты";
			
		Если ЭтоКомплексныйПроцесс Тогда
			Условие = "ГДЕ
				|	ТекущиеПредметы.ШаблонБизнесПроцесса = НЕОПРЕДЕЛЕНО";
		Иначе
			Условие = "";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Условие", Условие);
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
		Запрос.УстановитьПараметр("ТекущиеПредметы", ТекущиеПредметы);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			ЗадачаОбъект.Предметы.Очистить();
			Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
				СтрокиЗадач = Объект.ПредметыЗадач.НайтиСтроки(
					Новый Структура("ТочкаМаршрута, ИмяПредмета", Выборка.ТочкаМаршрута, СтрокаПредмета.ИмяПредмета));
				Для Каждого СтрокаЗадачи Из СтрокиЗадач Цикл
					Если ЭтоКомплексныйПроцесс Тогда
						Если СтрокаЗадачи.ШаблонБизнесПроцесса <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					Строка = ЗадачаОбъект.Предметы.Добавить();
					ЗаполнитьЗначенияСвойств(Строка, СтрокаЗадачи);
					Строка.Предмет = СтрокаПредмета.Предмет;
					Строка.РольПредмета = СтрокаПредмета.РольПредмета;
					Если Объект.ДополнительныеСвойства.Свойство("ИзменениеПредмета") Тогда
						Если Объект.ДополнительныеСвойства.ИзменениеПредмета.ПроцессИсточник = Объект.Ссылка 
						   И Объект.ДополнительныеСвойства.ИзменениеПредмета.ТочкаИсточник = ЗадачаОбъект.ТочкаМаршрута
						   И Объект.ДополнительныеСвойства.ИзменениеПредмета.ИмяПредмета = Строка.ИмяПредмета Тогда
							Строка.ДоступноУдаление = Истина;
						КонецЕсли;
					КонецЕсли;   
				КонецЦикла;
			КонецЦикла;
			Если Объект.ДополнительныеСвойства.Свойство("ИзменениеПредмета") Тогда
				ЗадачаОбъект.ДополнительныеСвойства.Вставить("ИзменениеПредмета", Объект.ДополнительныеСвойства.ИзменениеПредмета);
			КонецЕсли;
			
			РаботаСБизнесПроцессами.ЗаписатьЗадачу(ЗадачаОбъект,
				"ЗаписьСОбновлением_МоихДокументов_КешаИнформацииОбОбъектах_ВизСогласования_ПредметовПодчиненныхПроцессов_ДопРеквизитовПоПредметам_СобытийИзмененияПредметов");
			
		КонецЦикла;
		
		Если ТекущиеПредметы.Количество() > 0 Тогда
			Если Не Объект.ПометкаУдаления И Не Объект.ПроверитьЗаполнение() Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Есть недопустимые предметы для процесса: %1'"), Объект);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Записывает в историю событий изменение предметов задачи
//
Процедура ЗаписатьСобытиеИзменениеПредметовЗадачи(ЗадачаОбъект) Экспорт
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(
		ЗадачаОбъект.ИсточникДанных) Тогда
		
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = Сотрудники.ОсновнойСотрудник();
	ПредыдущиеПредметы = ПолучитьПредметыЗадачи(ЗадачаОбъект.Ссылка);
	Комментарий = "";
	
	Если ЗадачаОбъект.Предметы.Количество() > ПредыдущиеПредметы.Количество() Тогда
		НомерСтроки = 0;
		Для Каждого СтрокаПредмета Из ПредыдущиеПредметы Цикл
			
			НоваяСтрокаПредмета = ЗадачаОбъект.Предметы.Получить(НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
			Если  НоваяСтрокаПредмета.Предмет <> СтрокаПредмета.Предмет И СтрокаПредмета.ИмяПредмета = НоваяСтрокаПредмета.ИмяПредмета Тогда
				Текущий = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(НоваяСтрокаПредмета.Предмет, НоваяСтрокаПредмета.ИмяПредмета);
				Предыдущий = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета);
				
				Комментарий = ?(ПустаяСтрока(Комментарий),"",Символы.ПС) 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Был: ""%1"", стал: ""%2""'"), Предыдущий, Текущий);
			КонецЕсли;
		КонецЦикла;
		
		Для НомерСтрокиПроверки = НомерСтроки По ЗадачаОбъект.Предметы.Количество() - 1 Цикл
			НоваяСтрокаПредмета =  ЗадачаОбъект.Предметы.Получить(НомерСтрокиПроверки);
			
			Текущий = Строка(НоваяСтрокаПредмета.Предмет) + " (" + Строка(НоваяСтрокаПредмета.ИмяПредмета) + ")";
			Комментарий = ?(ПустаяСтрока(Комментарий),"",Символы.ПС) 
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Добавлен предмет: ""%1""'"), Текущий);
		КонецЦикла;
	Иначе
		НомерСтроки = 0;
		Для Каждого НоваяСтрокаПредмета Из ЗадачаОбъект.Предметы Цикл
			
			СтрокаПредмета = ПредыдущиеПредметы.Получить(НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
			Если  НоваяСтрокаПредмета.Предмет <> СтрокаПредмета.Предмет И СтрокаПредмета.ИмяПредмета = НоваяСтрокаПредмета.ИмяПредмета Тогда
				Текущий = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(НоваяСтрокаПредмета.Предмет, НоваяСтрокаПредмета.ИмяПредмета);
				Предыдущий = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета);
				
				Комментарий = ?(ПустаяСтрока(Комментарий),"",Символы.ПС) 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Был: ""%1"", стал: ""%2""'"), Предыдущий, Текущий);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаПредмета Из ПредыдущиеПредметы Цикл
			Если ЗадачаОбъект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПредмета.ИмяПредмета)).Количество() = 0 Тогда
				Предыдущий = Строка(СтрокаПредмета.Предмет) + " (" + Строка(СтрокаПредмета.ИмяПредмета) + ")";
				
				Комментарий = ?(ПустаяСтрока(Комментарий),"",Символы.ПС) 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Удален предмет: ""%1""'"), Предыдущий);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	Запись = РегистрыСведений.ИсторияСобытийЗадач.СоздатьМенеджерЗаписи();
	Запись.Комментарий =  Комментарий;
	Запись.Событие = Перечисления.ВидыСобытийЗадач.ИзмененыПредметы;
	Запись.Сотрудник = Сотрудник;
	Запись.Задача = ЗадачаОбъект.Ссылка;
	Запись.ДатаСобытия = ТекущаяДатаСеанса();
	Запись.Записать();
	
КонецПроцедуры

// Проверяет на идентичность предметы действий процесса до записи с уже записанными значениями
//
Функция ИзмененыПредметыДействийПроцесса(Объект, ТекущиеПредметы, ПредыдущиеПредметы) Экспорт
	
	ТекущиеПредметы = ПолучитьПредметыДействийПроцесса(Объект);
	ПредыдущиеПредметы = ПолучитьПредметыДействийПроцесса(Объект.Ссылка);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеПредметы.НомерСтроки,
		|	%ТекущиеПредметыДанныеЭтапа%
		|	ТекущиеПредметы.ТочкаМаршрута,
		|	ТекущиеПредметы.ИмяПредмета,
		|	ТекущиеПредметы.РольПредмета,
		|	ТекущиеПредметы.Предмет,
		|	ТекущиеПредметы.ДоступноУдаление,
		|	ТекущиеПредметы.ОбязательноеЗаполнение,
		|	1 КАК Результат
		|ПОМЕСТИТЬ ТекущиеПредметы
		|ИЗ
		|	&ТекущиеПредметы КАК ТекущиеПредметы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредыдущиеПредметы.НомерСтроки,
		|	%ПредыдущиеПредметыДанныеЭтапа%
		|	ПредыдущиеПредметы.ТочкаМаршрута,
		|	ПредыдущиеПредметы.ИмяПредмета,
		|	ПредыдущиеПредметы.РольПредмета,
		|	ПредыдущиеПредметы.Предмет,
		|	ПредыдущиеПредметы.ДоступноУдаление,
		|	ПредыдущиеПредметы.ОбязательноеЗаполнение,
		|	-1 КАК Результат
		|ПОМЕСТИТЬ ПредыдущиеПредметы
		|ИЗ
		|	&ПредыдущиеПредметы КАК ПредыдущиеПредметы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПредметы.НомерСтроки,
		|	%ВсеПредметыДанныеЭтапа%
		|	ВсеПредметы.ТочкаМаршрута,
		|	ВсеПредметы.ИмяПредмета,
		|	ВсеПредметы.РольПредмета,
		|	ВсеПредметы.Предмет,
		|	ВсеПредметы.ДоступноУдаление,
		|	ВсеПредметы.ОбязательноеЗаполнение,
		|	СУММА(ВсеПредметы.Результат) КАК Результат
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПредыдущиеПредметы.НомерСтроки КАК НомерСтроки,
		|		%ПредыдущиеПредметыДанныеЭтапа%
		|		ПредыдущиеПредметы.ТочкаМаршрута КАК ТочкаМаршрута,
		|		ПредыдущиеПредметы.ИмяПредмета КАК ИмяПредмета,
		|		ПредыдущиеПредметы.РольПредмета КАК РольПредмета,
		|		ПредыдущиеПредметы.Предмет КАК Предмет,
		|		ПредыдущиеПредметы.ДоступноУдаление КАК ДоступноУдаление,
		|		ПредыдущиеПредметы.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
		|		ПредыдущиеПредметы.Результат КАК Результат
		|	ИЗ
		|		ПредыдущиеПредметы КАК ПредыдущиеПредметы
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТекущиеПредметы.НомерСтроки,
		|		%ТекущиеПредметыДанныеЭтапа%
		|		ТекущиеПредметы.ТочкаМаршрута,
		|		ТекущиеПредметы.ИмяПредмета,
		|		ТекущиеПредметы.РольПредмета,
		|		ТекущиеПредметы.Предмет,
		|		ТекущиеПредметы.ДоступноУдаление,
		|		ТекущиеПредметы.ОбязательноеЗаполнение,
		|		ТекущиеПредметы.Результат
		|	ИЗ
		|		ТекущиеПредметы КАК ТекущиеПредметы) КАК ВсеПредметы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеПредметы.НомерСтроки,
		|	%ВсеПредметыДанныеЭтапа%
		|	ВсеПредметы.ТочкаМаршрута,
		|	ВсеПредметы.ИмяПредмета,
		|	ВсеПредметы.РольПредмета,
		|	ВсеПредметы.Предмет,
		|	ВсеПредметы.ДоступноУдаление,
		|	ВсеПредметы.ОбязательноеЗаполнение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВсеПредметы.Результат) <> 0";
	
	Запрос.УстановитьПараметр("ПредыдущиеПредметы",ПредыдущиеПредметы);
	Запрос.УстановитьПараметр("ТекущиеПредметы",ТекущиеПредметы);
	
	Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Объект) Тогда
		ПредыдущиеПредметыСтрокаЗамены = "ПредыдущиеПредметы.ШаблонБизнесПроцесса,";
		ТекущиеПредметыСтрокаЗамены = "ТекущиеПредметы.ШаблонБизнесПроцесса,";
		ВсеПредметыСтрокаЗамены = "ВсеПредметы.ШаблонБизнесПроцесса,";
	Иначе
		ПредыдущиеПредметыСтрокаЗамены = "";
		ТекущиеПредметыСтрокаЗамены = "";
		ВсеПредметыСтрокаЗамены = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ПредыдущиеПредметыДанныеЭтапа%", ПредыдущиеПредметыСтрокаЗамены);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ТекущиеПредметыДанныеЭтапа%", ТекущиеПредметыСтрокаЗамены);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ВсеПредметыДанныеЭтапа%", ВсеПредметыСтрокаЗамены);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Проверяет на идентичность предметы процесса до записи с уже записанными значениями
//
Функция ИзмененыПредметыПроцесса(Объект) Экспорт
	
	ТекущиеПредметы = Объект.Предметы.Выгрузить();
	ТипПроцесса = Объект.Ссылка.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеПредметы.НомерСтроки,
		|	ТекущиеПредметы.РольПредмета,
		|	ТекущиеПредметы.ИмяПредмета,
		|	ТекущиеПредметы.ИмяПредметаОснование,
		|	ТекущиеПредметы.ШаблонОснование,
		|	ТекущиеПредметы.Предмет
		|ПОМЕСТИТЬ ТекущиеПредметы
		|ИЗ
		|	&ТекущиеПредметы КАК ТекущиеПредметы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПредметы.НомерСтроки,
		|	ВсеПредметы.РольПредмета,
		|	ВсеПредметы.ИмяПредмета,
		|	ВсеПредметы.ИмяПредметаОснование,
		|	ВсеПредметы.ШаблонОснование,
		|	ВсеПредметы.Предмет,
		|	СУММА(ВсеПредметы.Результат) КАК Результат
		|ИЗ
		|	(ВЫБРАТЬ
		|		Предметы.НомерСтроки КАК НомерСтроки,
		|		Предметы.РольПредмета КАК РольПредмета,
		|		Предметы.ИмяПредмета КАК ИмяПредмета,
		|		Предметы.ИмяПредметаОснование КАК ИмяПредметаОснование,
		|		Предметы.ШаблонОснование КАК ШаблонОснование,
		|		Предметы.Предмет КАК Предмет,
		|		1 КАК Результат
		|	ИЗ
		|		БизнесПроцесс.%1.Предметы КАК Предметы
		|	ГДЕ
		|		Предметы.Ссылка = &ПроцессСсылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТекущиеПредметы.НомерСтроки,
		|		ТекущиеПредметы.РольПредмета,
		|		ТекущиеПредметы.ИмяПредмета,
		|		ТекущиеПредметы.ИмяПредметаОснование,
		|		ТекущиеПредметы.ШаблонОснование,
		|		ТекущиеПредметы.Предмет,
		|		-1
		|	ИЗ
		|		ТекущиеПредметы КАК ТекущиеПредметы) КАК ВсеПредметы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеПредметы.НомерСтроки,
		|	ВсеПредметы.РольПредмета,
		|	ВсеПредметы.ИмяПредмета,
		|	ВсеПредметы.ИмяПредметаОснование,
		|	ВсеПредметы.ШаблонОснование,
		|	ВсеПредметы.Предмет
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВсеПредметы.Результат) <> 0";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ТипПроцесса);
	
	Запрос.УстановитьПараметр("ПроцессСсылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущиеПредметы",ТекущиеПредметы);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Проверяет на идентичность предметы задачи до записи с уже записанными значениями
//
Функция ИзмененыПредметыЗадачи(ЗадачаОбъект) Экспорт
	
	ТекущиеПредметы = ЗадачаОбъект.Предметы.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеПредметы.НомерСтроки,
		|	ТекущиеПредметы.РольПредмета,
		|	ТекущиеПредметы.ИмяПредмета,
		|	ТекущиеПредметы.Предмет,
		|	ТекущиеПредметы.ДоступноУдаление,
		|	ТекущиеПредметы.ОбязательноеЗаполнение
		|ПОМЕСТИТЬ ТекущиеПредметы
		|ИЗ
		|	&ТекущиеПредметы КАК ТекущиеПредметы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПредметы.НомерСтроки,
		|	ВсеПредметы.РольПредмета,
		|	ВсеПредметы.ИмяПредмета,
		|	ВсеПредметы.Предмет,
		|	ВсеПредметы.ДоступноУдаление,
		|	ВсеПредметы.ОбязательноеЗаполнение,
		|	СУММА(ВсеПредметы.Результат) КАК Результат
		|ИЗ
		|	(ВЫБРАТЬ
		|		Предметы.НомерСтроки КАК НомерСтроки,
		|		Предметы.РольПредмета КАК РольПредмета,
		|		Предметы.ИмяПредмета КАК ИмяПредмета,
		|		Предметы.Предмет КАК Предмет,
		|		Предметы.ДоступноУдаление КАК ДоступноУдаление,
		|		Предметы.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
		|		1 КАК Результат
		|	ИЗ
		|		Задача.ЗадачаИсполнителя.Предметы КАК Предметы
		|	ГДЕ
		|		Предметы.Ссылка = &ЗадачаСсылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТекущиеПредметы.НомерСтроки,
		|		ТекущиеПредметы.РольПредмета,
		|		ТекущиеПредметы.ИмяПредмета,
		|		ТекущиеПредметы.Предмет,
		|		ТекущиеПредметы.ДоступноУдаление,
		|		ТекущиеПредметы.ОбязательноеЗаполнение,
		|		-1
		|	ИЗ
		|		ТекущиеПредметы КАК ТекущиеПредметы) КАК ВсеПредметы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеПредметы.НомерСтроки,
		|	ВсеПредметы.РольПредмета,
		|	ВсеПредметы.ИмяПредмета,
		|	ВсеПредметы.Предмет,
		|	ВсеПредметы.ДоступноУдаление,
		|	ВсеПредметы.ОбязательноеЗаполнение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВсеПредметы.Результат) <> 0";
	Запрос.УстановитьПараметр("ЗадачаСсылка", ЗадачаОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТекущиеПредметы",ТекущиеПредметы);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает предметы процесса в виде таблицы значений
//
Функция ПолучитьПредметыПроцесса(ПроцессСсылка, ТолькоЗаполненные = Ложь, Основные = Неопределено) Экспорт
	
	ИмяПроцесса = ПроцессСсылка.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Предметы.НомерСтроки,
		|	Предметы.РольПредмета,
		|	Предметы.ИмяПредмета,
		|	Предметы.ИмяПредметаОснование,
		|	Предметы.ШаблонОснование,
		|	Предметы.Предмет
		|ИЗ
		|	БизнесПроцесс.%1.Предметы КАК Предметы
		|ГДЕ
		|	Предметы.Ссылка = &ПроцессСсылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяПроцесса);
	Если ТолькоЗаполненные Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	И Предметы.Предмет <> НЕОПРЕДЕЛЕНО";
	КонецЕсли;
	
	Если Основные = Истина Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	И Предметы.РольПредмета = Значение(Перечисление.РолиПредметов.Основной)";
	ИначеЕсли Основные = Ложь Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И Предметы.РольПредмета <> Значение(Перечисление.РолиПредметов.Основной)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПроцессСсылка",ПроцессСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции

// Возвращает предметы задачи в виде таблицы значений
// Параметры:
//  ЗадачаСсылка - ссылка на задачу
//  ТолькоЗаполненные - признак возврата только заполненных предметов
//  Входящие - признак возврата только входящих предметов
Функция ПолучитьПредметыЗадачи(ЗадачаСсылка, ТолькоЗаполненные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Предметы.НомерСтроки,
		|	Предметы.РольПредмета,
		|	Предметы.ИмяПредмета,
		|	Предметы.Предмет,
		|	Предметы.ОбязательноеЗаполнение,
		|	Предметы.ДоступноУдаление
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК Предметы
		|ГДЕ
		|	Предметы.Ссылка = &ЗадачаСсылка";
	
	Если ТолькоЗаполненные Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	И Предметы.Предмет <> НЕОПРЕДЕЛЕНО";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗадачаСсылка",ЗадачаСсылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает предметы процесса по задаче этого процесса
//
Функция ПолучитьПредметыПроцессаПоЗадаче(ЗадачаСсылка, ТолькоЗаполненные = Ложь, Основные = Неопределено) Экспорт
	
	ПроцессСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаСсылка, "БизнесПроцесс");
	ИмяПроцесса = ПроцессСсылка.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПредметыПроцесса.НомерСтроки,
		|	ПредметыПроцесса.РольПредмета,
		|	ПредметыПроцесса.ИмяПредмета,
		|	ПредметыПроцесса.ИмяПредметаОснование,
		|	ПредметыПроцесса.ШаблонОснование,
		|	ПредметыПроцесса.Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ПредметыЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.%1.Предметы КАК ПредметыПроцесса
		|		ПО ПредметыЗадачи.ИмяПредмета = ПредметыПроцесса.ИмяПредмета
		|ГДЕ
		|	ПредметыЗадачи.Ссылка = &ЗадачаСсылка
		|	И ПредметыПроцесса.Ссылка = &ПроцессСсылка";
	Запрос.УстановитьПараметр("ПроцессСсылка",ПроцессСсылка);
	Запрос.УстановитьПараметр("ЗадачаСсылка",ЗадачаСсылка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяПроцесса);
	
	Если ТолькоЗаполненные Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	И ПредметыПроцесса.Предмет <> НЕОПРЕДЕЛЕНО";
	КонецЕсли;
	
	Если Основные = Истина Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	И ПредметыПроцесса.РольПредмета = Значение(Перечисление.РолиПредметов.Основной)";
	ИначеЕсли Основные = Ложь Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И ПредметыПроцесса.РольПредмета <> Значение(Перечисление.РолиПредметов.Основной)";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает Истина, если хотя бы один предмет заполнен
//
Функция ЕстьЗаполненныеПредметыОбъекта(Объект) Экспорт
	
	ЕстьЗаполненныеПредметы = Ложь;
	
	Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ЕстьЗаполненныеПредметы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьЗаполненныеПредметы;
	
КонецФункции

// Заполняет регистр КешИнформацииОбОбъектах при обновлении базы
//
Процедура ЗаполнитьРегистрКешИнформацииОбОбъектах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачиСПредметами.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачиСПредметами
		|ГДЕ
		|	ЗадачиСПредметами.Предмет <> НЕОПРЕДЕЛЕНО";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗадачаСсылка = Выборка.Ссылка;
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(ЗадачаСсылка, "ЕстьФайлы", Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает типизированные предметы процесса в значение Неопределено
//
Процедура ОчиститьНезаполненныеПредметыПроцесса(Объект) Экспорт
	
	Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			СтрокаПредмета.Предмет = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет предметы процесса-приемника по источнику.
//
// Если процесс приемник является комплексным, и в нем используется схема, то
// до вызова процедуры он должен иметь ссылку на схему и схема должно быть сохранена в базе.
//
// Параметры:
//	ПроцессПриемник - БизнесПроцессОбъект, ДанныеФормыСтруктура - заполняемый процесс
//	Источник - процесс с предметами, таблица значений предметов, коллекция данных формы или ссылка на предмет
//	Дополнять - признак добавления предметов, если их нет в заполняемом процессе
//	Подставлять - признак установки первого основного предмета процесса значением предмета в любом случае
Процедура ПередатьПредметыПроцессу(ПроцессПриемник, Источник, Дополнять = Ложь, Подставлять = Ложь) Экспорт
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник));
	
	Если ЭтоСсылка Тогда
		ЭтоПроцесс = ОбщегоНазначения.ЭтоБизнесПроцесс(Источник.Метаданные());
	Иначе
		ЭтоПроцесс = Ложь;
	КонецЕсли;

	ПредметыИсточника = Новый ТаблицаЗначений;
	ПредметыИсточника.Колонки.Добавить("РольПредмета");
	ПредметыИсточника.Колонки.Добавить("ИмяПредмета");
	ПредметыИсточника.Колонки.Добавить("ИмяПредметаОснование");
	ПредметыИсточника.Колонки.Добавить("ШаблонОснование");
	ПредметыИсточника.Колонки.Добавить("Предмет");
	
	Если ТипЗнч(Источник) = Тип("ТаблицаЗначений") Тогда 
		ПредметыИсточника = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыКоллекция")
		Или ТипЗнч(Источник) = Тип("Массив") Тогда
		
		Для Каждого Элемент Из Источник Цикл
			СтрокаПредмета = ПредметыИсточника.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПредмета, Элемент);
		КонецЦикла;
	ИначеЕсли ЭтоСсылка Тогда
		Если ЭтоПроцесс Тогда
			ПредметыИсточника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник,"Предметы").Выгрузить();
		Иначе
			СтрокаПредмета = ПредметыИсточника.Добавить();
			СтрокаПредмета.Предмет = Источник;
			СтрокаПредмета.ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Источник);
			СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной;
		КонецЕсли;
	Иначе
		ПредметыИсточника = Источник.Предметы.Выгрузить();
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПредмета Из ПредметыИсточника Цикл 
		Если Мультипредметность.ЭтоФайлБизнесПроцесса(СтрокаПредмета.Предмет) Тогда
			СтрокиКУдалению.Добавить(СтрокаПредмета);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ПредметыИсточника.Удалить(Строка);
	КонецЦикла;
	
	Если ПроцессПриемник.Предметы.Количество() = 0 Тогда
		
		ПроцессПриемник.Предметы.Загрузить(ПредметыИсточника);
		ПроцессПриемник.ПредметыЗадач.Очистить();
		
		Если Не МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(ПроцессПриемник) Тогда
			ДействияПроцесса = ПолучитьДействияПроцесса(ПроцессПриемник.Ссылка);
			Для Каждого СтрокаПредмета Из ПроцессПриемник.Предметы Цикл
				Для Каждого Действие Из ДействияПроцесса Цикл
					Строка = ПроцессПриемник.ПредметыЗадач.Добавить();
					Строка.ТочкаМаршрута = Действие;
					ЗаполнитьЗначенияСвойств(Строка, СтрокаПредмета);
				КонецЦикла;
			КонецЦикла;
		Иначе
			
			ШаблоныДействий = Новый Массив;
			Если ЗначениеЗаполнено(ПроцессПриемник.Схема) Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				
				ДанныеПараметровСхемы = 
					Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
					Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(
					ПроцессПриемник.Схема));
				
				ШаблоныДействий = РаботаСКомплекснымиБизнесПроцессамиСервер.
					НастройкиДействийИВложенныхПроцессовВДанныхПараметров(ДанныеПараметровСхемы);
					
				УстановитьПривилегированныйРежим(Ложь);
							
			Иначе
				Для Каждого СтрокаЭтапа Из ПроцессПриемник.Этапы Цикл
					ШаблоныДействий.Добавить(СтрокаЭтапа.ШаблонБизнесПроцесса);
				КонецЦикла;
			КонецЕсли;
			
			// Для комплексного процесса заполняем предметы задач всех этапов
			ДействияПроцесса = ПолучитьДействияКомплексногоПроцесса(ПроцессПриемник);
			Для Каждого СтрокаПредмета Из ПроцессПриемник.Предметы Цикл
				
				Для Каждого СтрокаДействия Из ДействияПроцесса Цикл
					Строка = ПроцессПриемник.ПредметыЗадач.Добавить();
					ЗаполнитьЗначенияСвойств(Строка, СтрокаПредмета);
					ЗаполнитьЗначенияСвойств(Строка, СтрокаДействия);
				КонецЦикла;
				
				МультипредметностьВызовСервера.ОбновитьШаблоныПодДаннымПредметовЗадач(
					ПроцессПриемник.Ссылка, ШаблоныДействий, ПроцессПриемник.ПредметыЗадач, СтрокаПредмета);
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		Если Дополнять Тогда
			
			ДействияПроцесса = ПолучитьДействияПроцесса(ПроцессПриемник.Ссылка);
			
			Для Каждого СтрокаИсточника Из ПредметыИсточника Цикл
				СтрокиПриемника =  ПроцессПриемник.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаИсточника.ИмяПредмета));
				Если СтрокиПриемника.Количество() > 0 Тогда
					СтрокиПриемника[0].Предмет = СтрокаИсточника.Предмет;
				Иначе
					СтрокаПриемника = ПроцессПриемник.Предметы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
					Если ЭтоПроцесс И СтрокаИсточника.РольПредмета = Перечисления.РолиПредметов.Основной Тогда
						СтрокаПриемника.РольПредмета = Перечисления.РолиПредметов.Основной;
					КонецЕсли;
					Для Каждого Действие Из ДействияПроцесса Цикл
						СтрокаПриемника = ПроцессПриемник.ПредметыЗадач.Добавить();
						СтрокаПриемника.ТочкаМаршрута = Действие;
						СтрокаПриемника.ИмяПредмета = СтрокаИсточника.ИмяПредмета;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла
			
		Иначе
			
			Если Подставлять И ПредметыИсточника.Количество() = 1 Тогда
				Если ПроцессПриемник.Предметы.Количество() = 1 Тогда
					ПроцессПриемник.Предметы[0].Предмет = ПредметыИсточника.Получить(0).Предмет
				Иначе
					Для Каждого СтрокаПриемника Из ПроцессПриемник.Предметы Цикл
						Если СтрокаПриемника.РольПредмета = Перечисления.РолиПредметов.Основной Тогда
							СтрокаПриемника.Предмет = ПредметыИсточника.Получить(0).Предмет;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				Для Каждого СтрокаПриемника Из ПроцессПриемник.Предметы Цикл
					СтрокиИсточника = ПредметыИсточника.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПриемника.ИмяПредмета));
					Если СтрокиИсточника.Количество() > 0 Тогда
						СтрокаПриемника.Предмет = СтрокиИсточника.Получить(0).Предмет;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет предметы процесса по шаблону
// Параметры:
//	ШаблонСсылка - ссылка на шаблон процесса
//	ПроцессОбъект - объект процесса
Процедура ЗаполнитьПредметыПроцессаПоШаблону(ШаблонСсылка, ПроцессОбъект) Экспорт
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ШаблонСсылка, "Предметы, ПредметыЗадач");
	ПроцессОбъект.Предметы.Загрузить(ДанныеШаблона.Предметы.Выгрузить());
	ПроцессОбъект.ПредметыЗадач.Загрузить(ДанныеШаблона.ПредметыЗадач.Выгрузить());
	
КонецПроцедуры

// Заполняет предметы точек вложенных процессов процесса обработки документов
//
Процедура ЗаполнитьПредметыТочекВложенныхПроцессов(Объект) Экспорт

	ВложенныеПроцессы = ПолучитьВложенныеПроцессы(Объект.Ссылка);
	
	Объект.ПредметыЗадач.Очистить();
	
	Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
		Для Каждого ТочкаМаршрута Из ВложенныеПроцессы Цикл
			Строка = Объект.ПредметыЗадач.Добавить();
			Строка.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
			Строка.ТочкаМаршрута = ТочкаМаршрута;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Заполняет предметы точек вложенных процессов по умолчанию
//
Процедура ЗаполнитьПредметыТочекДействийПроцесса(Объект) Экспорт
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Действия = ПолучитьДействияПроцесса(Объект.Ссылка);
	
	Объект.ПредметыЗадач.Очистить();
	
	Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
		Для Каждого ТочкаМаршрута Из Действия Цикл
			Строка = Объект.ПредметыЗадач.Добавить();
			Строка.ТочкаМаршрута = ТочкаМаршрута;
			Строка.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Проверяет правильность типов добавленных предметов процесса
//
Процедура ПроверитьКорректностьТиповОсновныхПредметов(Объект, Отказ) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ТипыПредметов = Менеджер.ТипыОсновныхПредметов();
	
	ОсновныеПредметы = Объект.Предметы.НайтиСтроки(Новый Структура("РольПредмета", Перечисления.РолиПредметов.Основной));
	
	Для Каждого СтрокаПредмета Из ОсновныеПредметы Цикл
		Если ТипыПредметов.Найти(ТипЗнч(СтрокаПредмета.Предмет)) = Неопределено Тогда
			НомерСтроки = Формат(СтрокаПредмета.НомерСтроки - 1,"ЧН=0; ЧГ=0");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недопустимый основной предмет для процесса ""%1"".'"),
					ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета)),
				Объект,
				"Объект.Предметы["+НомерСтроки+"].Описание",, 
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив доступных типов основных предметов в интерфейсе по ссылке на процесс.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка
// 
// Возвращаемое значение:
//  Массив
//   * Тип
//
Функция ТипыОсновныхПредметовВПользовательскомИнтерфейсе(Процесс) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Процесс);
		
	ТипыПредметов = Новый Массив;
	
	ТипыИсключения = Новый Соответствие();
	ТипыИсключения[Тип("СправочникСсылка.ДокументыПредприятия")] = Истина;
	ТипыИсключения[Тип("СправочникСсылка.Мероприятия")] = Истина;
		
	Для Каждого ТипПредмета Из Менеджер.ТипыОсновныхПредметов() Цикл
		
		Если ТипыИсключения[ТипПредмета] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыПредметов.Добавить(ТипПредмета);
		
	КонецЦикла;
		
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает ссылку на имя предмета по строке функции автоподстановки
// Параметры:
//  Автоподстановка - наименование элемента автоподстановки
Функция ПолучитьИмяПредметаПоФункцииАвтоподстановки(Автоподстановка) Экспорт
	
	ИмяПредмета = Неопределено;
	
	Для ПозицияСимвола = 1 По СтрДлина(Автоподстановка) Цикл
		Если Сред(Прав(Автоподстановка, ПозицияСимвола),1,1) = "." Тогда
			ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредмета(
				Лев(Автоподстановка, СтрДлина(Автоподстановка) - ПозицияСимвола));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяПредмета;

КонецФункции

// Возвращает массив точек маршрута действий процесса
//
Функция ПолучитьДействияПроцесса(ПроцессСсылка, ДействияПроцесса = Неопределено) Экспорт
	
	Если ДействияПроцесса = Неопределено Тогда
		ДействияПроцесса = Новый Массив;
	КонецЕсли;
	
	Если ПроцессСсылка = Неопределено Тогда
		Возврат ДействияПроцесса;
	КонецЕсли;
	
	ИмяПроцесса = ПроцессСсылка.Метаданные().Имя;
	
	КартаМаршрута = БизнесПроцессы[ИмяПроцесса].ПолучитьКартуМаршрута();
	
	ТочкиИсключения = Новый Соответствие();
	ТочкиИсключения[
		БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВыполнитьДействияПроцессаПоСхеме] = Истина;
	
	Для Каждого Элемент Из КартаМаршрута.ЭлементыГрафическойСхемы Цикл
		Если ТипЗнч(Элемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда
			Если ДействияПроцесса.Найти(Элемент.Значение) <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			Если ТочкиИсключения[Элемент.Значение] = Истина Тогда
				Продолжить;
			КонецЕсли;
			ДействияПроцесса.Добавить(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДействияПроцесса;
	
КонецФункции

// Возвращает массив точек маршрута вложенных процессов процесса
//
Функция ПолучитьВложенныеПроцессы(ПроцессСсылка, ВложенныеПроцессы = Неопределено) Экспорт
	
	ИмяПроцесса = ПроцессСсылка.Метаданные().Имя;
	
	КартаМаршрута = БизнесПроцессы[ИмяПроцесса].ПолучитьКартуМаршрута();
	
	Если ВложенныеПроцессы = Неопределено Тогда
		ВложенныеПроцессы = Новый Массив;
	КонецЕсли;
	
	Для Каждого Элемент Из КартаМаршрута.ЭлементыГрафическойСхемы Цикл
		Если ТипЗнч(Элемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Тогда
			Если ВложенныеПроцессы.Найти(Элемент.Значение) <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			ВложенныеПроцессы.Добавить(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВложенныеПроцессы;
	
КонецФункции

// Заполняет дерево точек маршрута формы шаблона комплексного процесса по данным этапов
//
Процедура ЗаполнитьДеревоТочекПоДействиямПроцесса(ДействияПроцесса, ДеревоТочек) Экспорт
	
	ТаблицаЭтапов = ДействияПроцесса.Выгрузить();
	ТаблицаЭтапов.Свернуть("ИдентификаторЭтапа, ШаблонБизнесПроцесса, ДоступноЗаполнение");
	
	ЭлементыДерева = ДеревоТочек.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	Для Каждого СтрокаЭтапа Из ТаблицаЭтапов Цикл
		ТочкиЭтапа = ДействияПроцесса.НайтиСтроки(
			Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса, ДоступноЗаполнение",
			СтрокаЭтапа.ИдентификаторЭтапа, СтрокаЭтапа.ШаблонБизнесПроцесса, СтрокаЭтапа.ДоступноЗаполнение));
		
		Если ЗначениеЗаполнено(СтрокаЭтапа.ИдентификаторЭтапа) Тогда
			ЭлементЭтап = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементЭтап, СтрокаЭтапа);
			ЭлементЭтап.ТочкаМаршрутаПредставление = ЭлементЭтап.ТочкаМаршрута;
		Иначе
			Для Каждого Точка Из ТочкиЭтапа Цикл
				Если Не ЗначениеЗаполнено(Точка.ИдентификаторЭтапа) Тогда
					ЭлементЭтап = ЭлементыДерева.Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементЭтап, Точка);
					ЭлементЭтап.ТочкаМаршрутаПредставление = ЭлементЭтап.ТочкаМаршрута;
					ЭлементЭтап.Картинка = 2;
				КонецЕсли
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Точка Из ТочкиЭтапа Цикл
			Если ЗначениеЗаполнено(Точка.ИдентификаторЭтапа) Тогда
				Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Точка.ШаблонБизнесПроцесса) Тогда
					Продолжить;
				КонецЕсли;
				Точки = ЭлементЭтап.ПолучитьЭлементы();
				ЭлементТочка = Точки.Добавить();
				ЗаполнитьЗначенияСвойств(ЭлементТочка, Точка);
				ЭлементТочка.Картинка = 2;
				ЭлементТочка.ТочкаМаршрутаПредставление = ЭлементТочка.ТочкаМаршрута;
			КонецЕсли
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу действий Комплексного процесса
//
// Если в объекте используется схема, то до вызова процедуры он должен
// иметь ссылку на схему и схема должно быть сохранена в базе.
//
// Параметры:
//  Объект - БизнесПроцессОбъект.КомплексныйПроцесс,
//           БизнесПроцессСсылка.КомплексныйПроцесс,
//           СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//           СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//           ДанныеФормыСтруктура - объект или ссылка на комплексный процесс/шаблон.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * ИдентификаторЭтапа
//   * ШаблонБизнесПроцесса
//   * ТочкаМаршрута
//   * ДоступноЗаполнение
//
Функция ПолучитьДействияКомплексногоПроцесса(Объект) Экспорт
	
	ТаблицаДействий = Новый ТаблицаЗначений;
	ТаблицаДействий.Колонки.Добавить("ИдентификаторЭтапа");
	ТаблицаДействий.Колонки.Добавить("ШаблонБизнесПроцесса");
	ТаблицаДействий.Колонки.Добавить("ТочкаМаршрута");
	ТаблицаДействий.Колонки.Добавить("ДоступноЗаполнение");
	
	СоответствиеДействий = Новый Соответствие;
	СоответствиеДоступностиЗаполнения = Новый Соответствие;
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ОбщиеДействия = ПолучитьДействияПроцесса(Объект.Ссылка);
		СоответствиеДействий.Вставить(БизнесПроцессы.КомплексныйПроцесс.ПустаяСсылка(), ОбщиеДействия);
	Иначе
		ПроцессСсылка = МультипредметностьПереопределяемый.ПолучитьСсылкуНаПроцессПоШаблону(Объект.Ссылка);
		ОбщиеДействия = ПолучитьДействияПроцесса(ПроцессСсылка);
		СоответствиеДействий.Вставить(ПроцессСсылка, ОбщиеДействия);
	КонецЕсли;
	
	Для Каждого Действие Из ОбщиеДействия Цикл
		Строка = ТаблицаДействий.Добавить();
		Строка.ТочкаМаршрута = Действие;
		Строка.ДоступноЗаполнение = Истина;
	КонецЦикла;
		
	ПараметрыДействий = Новый ТаблицаЗначений();
	ПараметрыДействий.Колонки.Добавить("Идентификатор");
	ПараметрыДействий.Колонки.Добавить("ШаблонПроцесса");
	ПараметрыДействий.Колонки.Добавить("ПорядокСортировки");
	
	Если ЗначениеЗаполнено(Объект.Схема) Тогда
		
		ПараметрыПоСхеме = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(Объект.Схема);
			
		Если ЗначениеЗаполнено(ПараметрыПоСхеме) Тогда
			
			ТипыДействий = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип;
			
			ДанныеПараметров =
				Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
				ПараметрыПоСхеме);
			
			Для Каждого НастройкаЭлемента Из ДанныеПараметров.НастройкиЭлементов Цикл
					
				Если Не ЗначениеЗаполнено(НастройкаЭлемента.Значение) 
					Или Не ТипыДействий.СодержитТип(ТипЗнч(НастройкаЭлемента.Значение)) Тогда
					
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицы = ПараметрыДействий.Добавить();
				СтрокаТаблицы.ШаблонПроцесса = НастройкаЭлемента.Значение;
				
				СтрокаТаблицы.Идентификатор =
					ДанныеПараметров.ИдентификаторыНастроек[НастройкаЭлемента.Ключ];
				
				СтрокаТаблицы.ПорядокСортировки =
					ДанныеПараметров.ПорядокСортировкиНастроекЭлементов[НастройкаЭлемента.Ключ];
				
			КонецЦикла;
						
		КонецЕсли;
				
	Иначе
		Для Каждого СтрокаЭтапа Из Объект.Этапы Цикл
			СтрокаТаблицы = ПараметрыДействий.Добавить();
			СтрокаТаблицы.ШаблонПроцесса = СтрокаЭтапа.ШаблонБизнесПроцесса;
			СтрокаТаблицы.Идентификатор = СтрокаЭтапа.ИдентификаторЭтапа;
			СтрокаТаблицы.ПорядокСортировки = СтрокаЭтапа.ПорядокСортировки;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыДействий.Сортировать("ПорядокСортировки");
	
	Для Каждого СтрокаТаблицы Из ПараметрыДействий Цикл
		
		ШаблонПроцесса = СтрокаТаблицы.ШаблонПроцесса;
		Идентификатор = СтрокаТаблицы.Идентификатор;
			
		Если Не ЗначениеЗаполнено(ШаблонПроцесса) Тогда
			Продолжить;
		КонецЕсли;
		
		ПроцессСсылка = МультипредметностьПереопределяемый.ПолучитьСсылкуНаПроцессПоШаблону(ШаблонПроцесса);
		ДействияПроцесса = СоответствиеДействий.Получить(ПроцессСсылка);
		Если ДействияПроцесса = Неопределено Тогда
			ДействияПроцесса = ПолучитьДействияПроцесса(ПроцессСсылка);
			СоответствиеДействий.Вставить(ПроцессСсылка, ДействияПроцесса);
		КонецЕсли;
		ДоступноЗаполнение = СоответствиеДоступностиЗаполнения.Получить(ПроцессСсылка);
		Если ДоступноЗаполнение = Неопределено Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПроцессСсылка.Метаданные().ПолноеИмя());
			ДоступныеРоли = Менеджер.ПолучитьДоступныеРолиПредметов();
			Если ДоступныеРоли.Найти(Перечисления.РолиПредметов.Заполняемый) = Неопределено Тогда
				ДоступноЗаполнение = Ложь;
			Иначе
				ДоступноЗаполнение = Истина;
			КонецЕсли;
			СоответствиеДоступностиЗаполнения.Вставить(ПроцессСсылка, ДоступноЗаполнение);
		КонецЕсли;
		
		Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(ШаблонПроцесса) Тогда
			Строка = ТаблицаДействий.Добавить();
			Строка.ИдентификаторЭтапа = Идентификатор;
			Строка.ШаблонБизнесПроцесса = ШаблонПроцесса;
			Строка.ТочкаМаршрута = Неопределено;
			Строка.ДоступноЗаполнение = Ложь;
		Иначе
			Для Каждого Действие Из ДействияПроцесса Цикл
				Строка = ТаблицаДействий.Добавить();
				Строка.ИдентификаторЭтапа = Идентификатор;
				Строка.ШаблонБизнесПроцесса = ШаблонПроцесса;
				Строка.ТочкаМаршрута = Действие;
				Строка.ДоступноЗаполнение = ДоступноЗаполнение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДействий;
	
КонецФункции

// Возвращает роли предметов действий текущего комплексного процесса
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс - процесс.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. РолиПредметовПоТаблицеДействийКомплексногоПроцесса 
//
Функция  РолиПредметовДействийПоКомплексномуПроцессу(Процесс) Экспорт
	
	ТаблицаДействий = Новый ТаблицаЗначений();
	ТаблицаДействий.Колонки.Добавить("Действие",
		Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип);
	
	РеквизитыПроцесса = 
		ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		Процесс, "Схема, Этапы");
	
	РеквизитыПроцесса.Этапы = РеквизитыПроцесса.Этапы.Выгрузить(); 
		
	Если ЗначениеЗаполнено(РеквизитыПроцесса.Схема) Тогда
		
		ДанныеПараметров = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(
			РеквизитыПроцесса.Схема));
		
		НастройкиДействийИВложенныхПроцессов = 
			РаботаСКомплекснымиБизнесПроцессамиСервер.НастройкиДействийИВложенныхПроцессовВДанныхПараметров(
			ДанныеПараметров);
			
		Для Каждого Настройка Из НастройкиДействийИВложенныхПроцессов Цикл
			СтрокаТаблицы = ТаблицаДействий.Добавить();
			СтрокаТаблицы.Действие = Настройка;
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаЭтап Из РеквизитыПроцесса.Этапы Цикл
			СтрокаТаблицы = ТаблицаДействий.Добавить();
			СтрокаТаблицы.Действие = СтрокаЭтап.ШаблонБизнесПроцесса;
		КонецЦикла;
				
	КонецЕсли;
		
	Возврат РолиПредметовПоТаблицеДействийКомплексногоПроцесса(ТаблицаДействий);

КонецФункции

// Возвращает роли предметов действий по карточке комплексного процесса.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. РолиПредметовПоТаблицеДействийКомплексногоПроцесса 
//
Функция РолиПредметовДействийПоКарточкеКомплексногоПроцесса(Форма) Экспорт
	
	ТаблицаДействий = Новый ТаблицаЗначений();
	ТаблицаДействий.Колонки.Добавить("Действие",
		Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип);
	
	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(Форма) Тогда
		
		НастройкиДействийИВложенныхПроцессов = 
			РаботаСКомплекснымиБизнесПроцессамиСервер.НастройкиДействийИВложенныхПроцессовВФорме(
			Форма);
			
		Для Каждого Настройка Из НастройкиДействийИВложенныхПроцессов Цикл
			СтрокаТаблицы = ТаблицаДействий.Добавить();
			СтрокаТаблицы.Действие = Настройка;
		КонецЦикла;
			
	Иначе
		
		Для Каждого СтрокаЭтап Из Форма.Объект.Этапы Цикл
			СтрокаТаблицы = ТаблицаДействий.Добавить();
			СтрокаТаблицы.Действие = СтрокаЭтап.ШаблонБизнесПроцесса;
		КонецЦикла;
			
	КонецЕсли;
		
	Возврат РолиПредметовПоТаблицеДействийКомплексногоПроцесса(ТаблицаДействий);
		
КонецФункции

// Возвращает структуру, содержащую данные о предметах действия комплексного процесса
//
// Параметры:
//  Объект - БизнесПроцессОбъект.КомплексныйПроцесс
//  Идентификатор - УникальныйИдентификатор - идентификатор действий комплексного процесса.
//  Шаблон - СправочникШаблон.<ИмяШаблонаПроцесса> - ссылка на шаблон действия.
//
// Возвращаемое значение:
//  Предметы - таблица предметов этапа
//  ПредметыЗадач - таблица заполнения предметов задач этапа
//
Функция ПолучитьДанныеЗаполненияПредметовЭтапа(Объект, Идентификатор, Шаблон) Экспорт
	
	СтруктураПредметов = Новый Структура;
	ПредметыЗадач = Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса",
		Идентификатор, Шаблон));
	
	ПредметыЗадачЭтапа = Новый ТаблицаЗначений;
	ПредметыЗадачЭтапа.Колонки.Добавить("ИмяПредмета");
	ПредметыЗадачЭтапа.Колонки.Добавить("ТочкаМаршрута");
	ПредметыЗадачЭтапа.Колонки.Добавить("ДоступноУдаление");
	ПредметыЗадачЭтапа.Колонки.Добавить("ОбязательноеЗаполнение");
	
	ПредметыЭтапа = Новый ТаблицаЗначений;
	ПредметыЭтапа.Колонки.Добавить("РольПредмета");
	ПредметыЭтапа.Колонки.Добавить("ИмяПредмета");
	ПредметыЭтапа.Колонки.Добавить("ИмяПредметаОснование");
	ПредметыЭтапа.Колонки.Добавить("Предмет");
	ПредметыЭтапа.Колонки.Добавить("ШаблонОснование");
	
	Для Каждого Строка Из ПредметыЗадач Цикл
		Если ПредметыЭтапа.Найти(Строка.ИмяПредмета, "ИмяПредмета") = Неопределено Тогда
			СтрокиПредмета = Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", Строка.ИмяПредмета));
			Если СтрокиПредмета.Количество() > 0 Тогда
				НоваяСтрока = ПредметыЭтапа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиПредмета[0]);
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = ПредметыЗадачЭтапа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	СтруктураПредметов.Вставить("Предметы", ПредметыЭтапа);
	СтруктураПредметов.Вставить("ПредметыЗадач", ПредметыЗадачЭтапа);
	
	Возврат СтруктураПредметов;
	
КонецФункции

// Возвращает таблицу предметов шаблона 
Функция ПолучитьПредметыШаблона(ШаблонПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Предметы.РольПредмета,
		|	Предметы.ИмяПредмета,
		|	Предметы.ИмяПредмета КАК ИсходноеИмяПредмета,
		|	Предметы.ИмяПредметаОснование,
		|	Предметы.Предмет,
		|	Предметы.ШаблонОснование
		|ИЗ
		|	Справочник.%Шаблон%.Предметы КАК Предметы
		|ГДЕ
		|	Предметы.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ШаблонПроцесса);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%Шаблон%",ШаблонПроцесса.Метаданные().Имя);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

// Возвращает таблицу предметов задач шаблона процесса
//
Функция ПолучитьПредметыЗадачШаблона(ШаблонПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПредметыЗадачШаблона.ТочкаМаршрута,
		|	ПредметыЗадачШаблона.ИмяПредмета,
		|	ПредметыЗадачШаблона.ОбязательноеЗаполнение
		|ИЗ
		|	Справочник.%Шаблон%.ПредметыЗадач КАК ПредметыЗадачШаблона
		|ГДЕ
		|	ПредметыЗадачШаблона.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ШаблонПроцесса);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%Шаблон%",ШаблонПроцесса.Метаданные().Имя);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

// Проверяет, является ли переданный объект файлом и владельцем этого объекта является процесс
// Возвращаемое значение: Истина - если владельцем является процесс
//						  Ложь - если проверяемый файл не заполнен или владельцем не является процесс
//
Функция ЭтоФайлБизнесПроцесса(ФайлСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ФайлСсылка) И ТипЗнч(ФайлСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла");
		Если ОбщегоНазначения.ЭтоБизнесПроцесс(ВладелецФайла.Метаданные()) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет является ли процесс владельцем файла
//
Функция ФайлПринадлежитПроцессу(ФайлСсылка, ПроцессСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ФайлСсылка) И ТипЗнч(ФайлСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла");
		Если ВладелецФайла = ПроцессСсылка Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, является ли переданный предмет группой контрагентов
// Параметры:
//  ПредметСсылка - предмет процесса
// Возвращаемое значение: Истина - если предмет является группой
//						  Ложь - в противном случае
//
Функция ЭтоГруппаКонтрагентов(ПредметСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ПредметСсылка) 
		И ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметСсылка, "ЭтоГруппа") = Истина Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

// Возвращает массив предметов, которые используются в задачах процесса
//
// Параметры:
//   - ПроцессОбъектСсылка
//      - БизнесПроцессСсылка
//      - БизнесПроцессОбъект
//
// Возвращаемое значение:
//   - Массив
//
Функция ПредметыДляДействийПроцесса(
	ПроцессОбъектСсылка,
	ТипыПредметов = Неопределено,
	Основные = Ложь) Экспорт
	
	ПредметыДействийПроцесса = ПолучитьПредметыДействийПроцесса(ПроцессОбъектСсылка);
	
	ОтборПоТипаПредметов = ТипыПредметов <> Неопределено;
	
	Если ОтборПоТипаПредметов
		ИЛИ Основные Тогда
		
		КоличествоПредметов = ПредметыДействийПроцесса.Количество();
		
		ИндексТекущегоПредмета = КоличествоПредметов - 1;
		
		Пока ИндексТекущегоПредмета >= 0 Цикл
			
			СтрокаПредмета = ПредметыДействийПроцесса[ИндексТекущегоПредмета];
			
			ИсключитьПредмет = Ложь;
			
			Если ОтборПоТипаПредметов Тогда
				Для Каждого ПроверяемыйТип Из ТипыПредметов Цикл
					Если ТипЗнч(СтрокаПредмета.Предмет) <> ПроверяемыйТип Тогда
						ИсключитьПредмет = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Основные 
				И СтрокаПредмета.РольПредмета <> Перечисления.РолиПредметов.Основной Тогда
				
				ИсключитьПредмет = Истина;
			КонецЕсли;
			
			Если ИсключитьПредмет Тогда
				ПредметыДействийПроцесса.Удалить(ИндексТекущегоПредмета);
			КонецЕсли;
			
			ИндексТекущегоПредмета = ИндексТекущегоПредмета - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	ПредметыДействийПроцесса.Свернуть("Предмет");
	ИндексПредмета = ПредметыДействийПроцесса.Количество() - 1;
	
	// Удаление пустых предметов
	Пока ИндексПредмета >= 0 Цикл
		
		СтрПредмет = ПредметыДействийПроцесса[ИндексПредмета];
		
		Если Не ЗначениеЗаполнено(СтрПредмет.Предмет) Тогда
			ПредметыДействийПроцесса.Удалить(СтрПредмет);
		КонецЕсли;
		
		ИндексПредмета = ИндексПредмета - 1;
	КонецЦикла;
	
	Возврат ПредметыДействийПроцесса.ВыгрузитьКолонку("Предмет");
	
КонецФункции

// Обновляет предметы задач по настройкам схемы процесса.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс,
//            СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов - комплексный процесс или его шаблон.
//
Процедура ОбновитьПредметыЗадачКомплексногоПроцессаПослеИзмененияДействий(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Процесс.Схема) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПараметровСхемы = 
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(Процесс.Схема));
			
	ИдентификаторыИНовыеШаблоны = Новый Соответствие;
	Для Каждого КлючЗначение Из ДанныеПараметровСхемы.ИдентификаторыНастроек Цикл
		ИдентификаторыИНовыеШаблоны[КлючЗначение.Значение] =
			ДанныеПараметровСхемы.НастройкиЭлементов[КлючЗначение.Ключ];
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Процесс.ПредметыЗадач Цикл
		СтрокаТаблицы.ШаблонБизнесПроцесса =
			ИдентификаторыИНовыеШаблоны[СтрокаТаблицы.ИдентификаторЭтапа];
	КонецЦикла;

КонецПроцедуры

// Возвращает необходимость заполнения предметов в задаче процесса.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя - задача процесса.
// 
// Возвращаемое значение:
//  Булево
//
Функция ТребуетсяЗаполнениеПредметовВЗадачеПроцесса(ЗадачаПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредметыЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "Предметы");
	ПредметыЗадачи = ПредметыЗадачи.Выгрузить();
	
	Для Каждого СтрокаПредмета Из ПредметыЗадачи Цикл
		Если СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Заполняемый
			И СтрокаПредмета.ОбязательноеЗаполнение
			И Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область ПроверкаПравНаПредметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(ПроцессОбъект, Отказ,
	ПроверятьПриИзменении = Истина) Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроцессОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроцессОбъект.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Участники = УчастникиДляПроверкиПрав(ПроцессОбъект);
	
	Если ПроверятьПриИзменении Тогда
		
		УчастникиИзменены = Ложь;
		Для Каждого СтрокаУчастник Из Участники Цикл
			Если СтрокаУчастник.СодержитсяВНовойВерсии <> СтрокаУчастник.СодержитсяВСтаройВерсии Тогда
				УчастникиИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ИзмененыПредметы = ИзмененыПредметыПроцесса(ПроцессОбъект);
		
		// Если не менялись ни предметы, ни участники, то ничего не проверяем.
		Если Не УчастникиИзменены И Не ИзмененыПредметы Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определим предметы для проверок
	ПредметыДляПроверкиПрав = ПредметыДляПроверкиПрав(
		ПроцессОбъект.Предметы.ВыгрузитьКолонку("Предмет"), ПроцессОбъект.Ссылка);
		
	ПредметыДляПроверкиНарушенияПолитикиДоступа =
		ПредметыДляПроверкиПрав.ДляПроверкиНарушенияПолитикиДоступа;
		
	ПредметыДляПроверкиПравДоступаУчастников =
		ПредметыДляПроверкиПрав.ДляПроверкиПравДоступаУчастников;
	
	// Проверка нарушения политики доступа при расширении рабочей группы предмета.
	Для Каждого Предмет Из ПредметыДляПроверкиНарушенияПолитикиДоступа Цикл
		Попытка
			ОбъектДляПроверкиПолитик =
				РаботаСРабочимиГруппами.ОбъектДляАвтоматическогоРасширенияРабочейГруппы(Предмет);
			ПроверитьНарушениеПолитикиДоступаПриРасширенииРабочейГруппыПредмета(
				ОбъектДляПроверкиПолитик, Участники);
		Исключение
			Отказ = Истина;
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СтрокаПредмет = ПроцессОбъект.Предметы.Найти(Предмет, "Предмет");
			ИндексПредмета = СтрокаПредмет.НомерСтроки - 1;
			ПолеПредмета = "Объект.Предметы[" + ИндексПредмета + "].Описание";
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ПроцессОбъект.Ссылка,
				ПолеПредмета);
		КонецПопытки;
	КонецЦикла;
	
	// Проверка прав на предметы без автоматического заполнения рабочей группы.
	
	СотрудникиДляПроверкиПрав = СотрудникиДляПроверкиПрав(Участники);
	ПраваУчастниковНаПредметы = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъектам(
		ПредметыДляПроверкиПравДоступаУчастников,
		Истина,
		СотрудникиДляПроверкиПрав.ВыгрузитьКолонку("Участник"));
		
	Для Каждого Предмет Из ПредметыДляПроверкиПравДоступаУчастников Цикл
		
		УчастникиНеИмеющиеПравДоступаНаТекущийПредмет = Новый Массив;
		
		Для Каждого СтрокаСотрудник Из СотрудникиДляПроверкиПрав Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("ОбъектДоступа", Предмет);
			Отбор.Вставить("Сотрудник", СтрокаСотрудник.Участник);
			
			НайденныеПрава = ПраваУчастниковНаПредметы.НайтиСтроки(Отбор);
			Если НайденныеПрава.Количество() = 0 Тогда
				УчастникиНеИмеющиеПравДоступаНаТекущийПредмет.Добавить(СтрокаСотрудник.Участник);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоСотрудников = УчастникиНеИмеющиеПравДоступаНаТекущийПредмет.Количество();
		
		Если КоличествоСотрудников <> 0 Тогда
			
			Отказ = Истина;
			
			Если КоличествоСотрудников = 1 Тогда
				
				ТекстОшибки = НСтр("ru = 'Сотрудник ""%1"" не имеет прав на предмет ""%2"".'");
				
				ТекстОшибки = 
					СтрШаблон(ТекстОшибки, УчастникиНеИмеющиеПравДоступаНаТекущийПредмет[0], Предмет);
					
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Сотрудники:
					|%1
					|не имеют прав на предмет ""%2"".'");
					
				ПользователиСтрокой = "";
				
				ПереносСтроки = "";
				
				Для Каждого Пользователь Из УчастникиНеИмеющиеПравДоступаНаТекущийПредмет Цикл
					ПользователиСтрокой = ПользователиСтрокой
						+ ПереносСтроки
						+ "  "
						+ Строка(Пользователь);
						
					ПереносСтроки = Символы.ПС;
				КонецЦикла;
				
				ТекстОшибки = СтрШаблон(ТекстОшибки, ПользователиСтрокой, Предмет);
				
			КонецЕсли;
			
			СтрокаПредмет = ПроцессОбъект.Предметы.Найти(Предмет, "Предмет");
			ИндексПредмета = СтрокаПредмет.НомерСтроки - 1;
			
			ПолеПредмета = "Объект.Предметы[" + ИндексПредмета + "].Описание";
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ПроцессОбъект.Ссылка,
				ПолеПредмета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка прав на файлы предметов без автоматического заполнения рабочей группы.
	УчастникиБезПравНаФайлы = УправлениеМероприятиями.ПроверитьПраваУчастниковПроцессаНаФайлыПредметов(
		ПроцессОбъект,
		ПредметыДляПроверкиПравДоступаУчастников,
		СотрудникиДляПроверкиПрав);
	Если УчастникиБезПравНаФайлы <> Неопределено Тогда
		
		Для Каждого Предмет Из ПредметыДляПроверкиПравДоступаУчастников Цикл
			
			УчастникиНеИмеющиеПравДоступаНаФайлыТекущегоПредмета = Новый Массив;
			
			Отбор = Новый Структура;
			Отбор.Вставить("Предмет", Предмет);
			НайденныеУчастникиБезПрав = УчастникиБезПравНаФайлы.НайтиСтроки(Отбор);
			Для Каждого НайденныйУчастникБезПрав Из НайденныеУчастникиБезПрав Цикл
				УчастникиНеИмеющиеПравДоступаНаФайлыТекущегоПредмета.Добавить(НайденныйУчастникБезПрав.Участник);
			КонецЦикла;
			
			КоличествоПользователей = УчастникиНеИмеющиеПравДоступаНаФайлыТекущегоПредмета.Количество();
			Если КоличествоПользователей <> 0 Тогда
				
				Отказ = Истина;
				
				Если КоличествоПользователей = 1 Тогда
					
					ТекстОшибки = НСтр("ru = 'Пользователь ""%1"" не имеет прав на файлы предмета ""%2"".'");
					
					ТекстОшибки = 
						СтрШаблон(ТекстОшибки, УчастникиНеИмеющиеПравДоступаНаФайлыТекущегоПредмета[0], Предмет);
						
				Иначе
					
					ТекстОшибки = НСтр("ru = 'Пользователи:
						|%1
						|не имеют прав на файлы предмета ""%2"".'");
						
					ПользователиСтрокой = "";
					
					ПереносСтроки = "";
					
					Для Каждого Пользователь Из УчастникиНеИмеющиеПравДоступаНаФайлыТекущегоПредмета Цикл
						ПользователиСтрокой = ПользователиСтрокой
							+ ПереносСтроки
							+ "  "
							+ Строка(Пользователь);
							
						ПереносСтроки = Символы.ПС;
					КонецЦикла;
					
					ТекстОшибки = СтрШаблон(ТекстОшибки, ПользователиСтрокой, Предмет);
					
				КонецЕсли;
				
				СтрокаПредмет = ПроцессОбъект.Предметы.Найти(Предмет, "Предмет");
				ИндексПредмета = СтрокаПредмет.НомерСтроки - 1;
				
				ПолеПредмета = "Объект.Предметы[" + ИндексПредмета + "].Описание";
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ПроцессОбъект.Ссылка,
					ПолеПредмета);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Разделяет предметы для проверки прав на 2 массива:
//  ДляПроверкиПравДоступаУчастников
//  ДляПроверкиНарушенияПолитикиДоступа
//
// Параметры:
//  Предметы - Массив - Предметы для проверки прав.
//  СсылкаНаПроцесс - БизнесПроцессСсылка - процесс, файлы которого исключаются из проверки.
//
// Возвращаемое значение:
//  Структура
//   * ДляПроверкиПравДоступаУчастников - Массив
//   * ДляПроверкиНарушенияПолитикиДоступа - Массив - предметы, по которым возможно автоматическое
//                                                    расширение рабочих групп.
//
Функция ПредметыДляПроверкиПрав(Предметы, СсылкаНаПроцесс) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДляПроверкиПравДоступаУчастников", Новый Массив);
	Результат.Вставить("ДляПроверкиНарушенияПолитикиДоступа", Новый Массив);
	
	СтандартнаяОбработка = Истина;
	МультипредметностьПереопределяемый.ПриОпределенииПредметовДляПроверкиПрав(
		Предметы, СсылкаНаПроцесс, Результат, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДляПроверкиПравДоступаУчастников = Новый Массив;
	ДляПроверкиНарушенияПолитикиДоступа = Новый Массив;
	
	Для Каждого Предмет Из Предметы Цикл
		
		Если Не ЗначениеЗаполнено(Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Предмет, "ВладелецФайла") = СсылкаНаПроцесс Тогда
			
			Продолжить;
		КонецЕсли;
		
		ОбъектДляРасширенияРГ = РаботаСРабочимиГруппами.ОбъектДляАвтоматическогоРасширенияРабочейГруппы(Предмет);
		Если РаботаСРабочимиГруппами.
			ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(ОбъектДляРасширенияРГ) Тогда
			ДляПроверкиНарушенияПолитикиДоступа.Добавить(Предмет);
		Иначе
			ДляПроверкиПравДоступаУчастников.Добавить(Предмет);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ДляПроверкиПравДоступаУчастников = ДляПроверкиПравДоступаУчастников;
	Результат.ДляПроверкиНарушенияПолитикиДоступа = ДляПроверкиНарушенияПолитикиДоступа;
	
	Возврат Результат;
	
КонецФункции

// Возвращает участников процесса/шаблона для проверки прав доступа.
//
// Параметры:
//  Объект - БизнесПроцессОбъект,
//           БизнесПроцессСсылка,
//           СправочникОбъект.<ИмяШаблонаПроцесса>,
//           СправочникСсылка.<ИмяШаблонаПроцесса> - объект или ссылка на шаблон или процесс.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//   * СодержитсяВНовойВерсии
//   * СодержитсяВСтаройВерсии
//
Функция УчастникиДляПроверкиПрав(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипПроцесса = ТипЗнч(Объект);
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипПроцесса);
	
	Если ЭтоСсылка Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект);
	Иначе
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	КонецЕсли;
	
	УчастникиДляПроверкиПрав = МенеджерОбъекта.УчастникиДляПроверкиПрав(Объект);
	
	УчастникиДляПроверкиПрав.Колонки.Добавить("СодержитсяВНовойВерсии");
	УчастникиДляПроверкиПрав.Колонки.Добавить("СодержитсяВСтаройВерсии");
	
	УчастникиДляПроверкиПрав.ЗаполнитьЗначения(Истина, "СодержитсяВНовойВерсии");
	УчастникиДляПроверкиПрав.ЗаполнитьЗначения(Истина, "СодержитсяВСтаройВерсии");
	
	Если Не ЭтоСсылка Тогда
		
		УчастникиДляПроверкиПравПоСсылке = МенеджерОбъекта.УчастникиДляПроверкиПрав(Объект.Ссылка);
		
		Для Каждого СтрокаУчастника Из УчастникиДляПроверкиПрав Цикл
			
			Если УчастникиДляПроверкиПравПоСсылке.Найти(СтрокаУчастника.Участник, "Участник") = Неопределено Тогда
				СтрокаУчастника.СодержитсяВСтаройВерсии = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УчастникиДляПроверкиПрав;
	
КонецФункции

// Возвращает таблицу сотрудников, соответствующую участникам процесса
// для проверки прав на предметы.
//
// Параметры:
//  УчастникиПроцесса - ТаблицаЗначений - см. УчастникиДляПроверкиПрав
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//   * СодержитсяВНовойВерсии
//   * СодержитсяВСтаройВерсии
//
Функция СотрудникиДляПроверкиПрав(Знач УчастникиПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Участники", УчастникиПроцесса.ВыгрузитьКолонку("Участник"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка В(&Участники)
		|	И Пользователи.ПометкаУдаления = ЛОЖЬ
		|	И Пользователи.Недействителен = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Участники)
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.Действует = ИСТИНА";
		
	УчастникиСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПолныеРоли.Ссылка
		|ИЗ
		|	Справочник.ПолныеРоли КАК ПолныеРоли
		|ГДЕ
		|	ПолныеРоли.ПометкаУдаления = ЛОЖЬ
		|	И ПолныеРоли.Ссылка В(&Участники)";
	УчастникиРоли = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ИндексСтроки = УчастникиПроцесса.Количество() - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		СтрокаУчастника = УчастникиПроцесса[ИндексСтроки];
		
		ТипУчастника = ТипЗнч(СтрокаУчастника.Участник);
		
		Если ТипУчастника = Тип("Строка") Тогда
			УчастникиПроцесса.Удалить(ИндексСтроки);
		ИначеЕсли ТипУчастника = Тип("СправочникСсылка.Сотрудники")
			Или ТипУчастника = Тип("СправочникСсылка.Пользователи") Тогда
			
			Если УчастникиСотрудники.Найти(СтрокаУчастника.Участник) = Неопределено Тогда
				УчастникиПроцесса.Удалить(ИндексСтроки);
			КонецЕсли;
		ИначеЕсли ТипУчастника = Тип("СправочникСсылка.ПолныеРоли") Тогда
			Если УчастникиРоли.Найти(СтрокаУчастника.Участник) = Неопределено Тогда
				УчастникиПроцесса.Удалить(ИндексСтроки);
			Иначе
				Изменение = СтрокаУчастника.Изменение;
				
				ИсполнителиРоли = 
					РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(СтрокаУчастника.Участник, Истина);
				
				Для Каждого ИсполнительРоли Из ИсполнителиРоли Цикл
					НовыйУчастник = УчастникиПроцесса.Добавить();
					НовыйУчастник.Участник = ИсполнительРоли;
					НовыйУчастник.Изменение = Изменение;
				КонецЦикла;
				
				УчастникиПроцесса.Удалить(ИндексСтроки);
			КонецЕсли;
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	Возврат УчастникиПроцесса;
	
КонецФункции

// Проверяет нарушение политики доступа при расширении РГ предмета.
//
// Параметры:
//  Предмет - ЛюбаяСсылка - предмет, по которому может быть расширена рабочая группа.
//  Участники - ТаблицаЗначений - новые участники рабочей группы.
//
Процедура ПроверитьНарушениеПолитикиДоступаПриРасширенииРабочейГруппыПредмета(
	Предмет, НовыеУчастники) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяРабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Предмет);
	НовыеУчастники.Свернуть("Участник", "Изменение");
	
	// Проверка отличий.
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Было.Участник,
		|	Было.Изменение
		|ПОМЕСТИТЬ Было
		|ИЗ
		|	&Было КАК Было
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Стало.Участник,
		|	Стало.Изменение
		|ПОМЕСТИТЬ Стало
		|ИЗ
		|	&Стало КАК Стало
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Было.Участник ЕСТЬ NULL), ЛОЖЬ) КАК ЕстьНовыеУчастники,
		|	ЕСТЬNULL(МАКСИМУМ(Было.Участник ЕСТЬ NULL ИЛИ Было.Изменение <> Стало.Изменение), ЛОЖЬ) КАК ЕстьИзменения
		|ИЗ
		|	Было КАК Было
		|		ПОЛНОЕ СОЕДИНЕНИЕ Стало КАК Стало
		|		ПО Было.Участник = Стало.Участник";
		
	Запрос.УстановитьПараметр("Было", ТекущаяРабочаяГруппа);
	Запрос.УстановитьПараметр("Стало", НовыеУчастники);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.ЕстьИзменения Тогда
		// Проверка прав.
		РаботаСРабочимиГруппами.ПроверитьПраваПередЗаписьюРабочейГруппы(
			Предмет, НовыеУчастники, Неопределено, Выборка.ЕстьНовыеУчастники);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает роли предметов по таблице действий комплексного процесса.
// 
// Параметры:
//  ТаблицаДействий - ТаблицаЗначений
//   * Действие - ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//    ШаблонБизнесПроцесса - СправочникСсылка - ссылка на шаблон
//    РольПредмета - ПеречислениеСсылка.РолиПредметов - роль предмета
//    ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета
//
Функция РолиПредметовПоТаблицеДействийКомплексногоПроцесса(ТаблицаДействий)
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ТаблицаДействий.Действие
		|ПОМЕСТИТЬ ТаблицаДействий
		|ИЗ
		|	&ТаблицаДействий КАК ТаблицаДействий");
		
	ТекстыЗапроса.Добавить(
		"
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|");
	
	ШаблонЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПредметыШаблона.Ссылка КАК ШаблонБизнесПроцесса,
		|	ПредметыШаблона.РольПредмета,
		|	ПредметыШаблона.ИмяПредмета
		|ИЗ
		|	ТаблицаДействий КАК ТаблицаДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныИсполнения.Предметы КАК ПредметыШаблона
		|		ПО ТаблицаДействий.Действие = ПредметыШаблона.Ссылка";
	
	
	МассивТипов = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип.Типы();
	ТипыШаблонов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(МассивТипов);
	
	ПервыйТип = Истина;
	
	РазделительЗапросов = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
	Для Каждого Тип Из ТипыШаблонов Цикл
				
		ТекстыЗапроса.Добавить();
			
		ТекстЗапросаКШаблону = СтрЗаменить(
			ШаблонЗапроса, "Справочник.ШаблоныИсполнения", Тип.Значение); 
			
		Если ПервыйТип Тогда
			ПервыйТип = Ложь;
			ТекстыЗапроса.Добавить(ТекстЗапросаКШаблону);
		Иначе
			ТекстыЗапроса.Добавить(РазделительЗапросов);
			ТекстЗапросаКШаблону = СтрЗаменить(ТекстЗапросаКШаблону, " РАЗРЕШЕННЫЕ", "");
			ТекстыЗапроса.Добавить(ТекстЗапросаКШаблону);
		КонецЕсли;
				
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, "");
	Запрос.УстановитьПараметр("ТаблицаДействий", ТаблицаДействий);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьПредметыДействийПроцесса(ПроцессОбъектСсылка)
	
	ЭтоКомплексныйПроцесс = МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(ПроцессОбъектСсылка);
	
	Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроцессОбъектСсылка)) Тогда
	
		ИмяПроцесса = ПроцессОбъектСсылка.Метаданные().Имя;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Предметы.НомерСтроки,
			|	Предметы.Предмет,
			|	Предметы.РольПредмета,
			|	%ДанныеЭтапа%
			|	ПредметыЗадач.ТочкаМаршрута,
			|	ПредметыЗадач.ИмяПредмета,
			|	ПредметыЗадач.ОбязательноеЗаполнение,
			|	ПредметыЗадач.ДоступноУдаление
			|ИЗ
			|	БизнесПроцесс.%1.ПредметыЗадач КАК ПредметыЗадач
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.%1.Предметы КАК Предметы
			|		ПО ПредметыЗадач.Ссылка = Предметы.Ссылка
			|			И ПредметыЗадач.ИмяПредмета = Предметы.ИмяПредмета
			|ГДЕ
			|	ПредметыЗадач.Ссылка = &ПроцессСсылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Предметы.НомерСтроки,
			|	ПредметыЗадач.ТочкаМаршрута";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяПроцесса);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ДанныеЭтапа%",
			?(ЭтоКомплексныйПроцесс,"ПредметыЗадач.ШаблонБизнесПроцесса,",""));
		
		Запрос.УстановитьПараметр("ПроцессСсылка",ПроцессОбъектСсылка);
		
		ПредметыЗадач = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ПредметыЗадач = ПроцессОбъектСсылка.ПредметыЗадач.Выгрузить();
		Предметы = ПроцессОбъектСсылка.Предметы.Выгрузить();
		
		ПредметыЗадач.Колонки.Добавить("Предмет",Предметы.Колонки.Предмет.ТипЗначения);
		ПредметыЗадач.Колонки.Добавить("РольПредмета", Предметы.Колонки.РольПредмета.ТипЗначения);
		Для Каждого Строка Из ПредметыЗадач Цикл
			СтрокаПредмета = Предметы.Найти(Строка.ИмяПредмета,"ИмяПредмета");
			Если СтрокаПредмета <> Неопределено Тогда
				Строка.Предмет = СтрокаПредмета.Предмет;
				Строка.РольПредмета = СтрокаПредмета.РольПредмета;
				Строка.НомерСтроки = СтрокаПредмета.НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		
		ПредметыЗадач.Сортировать("НомерСтроки, ТочкаМаршрута");
		
	КонецЕсли;
	
	Возврат ПредметыЗадач;
	
КонецФункции

Процедура УстановитьОформлениеПредметов(Знач УсловноеОформление)

	// Незаполненный предмет
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Предметы.Предмет");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Предметы.РольПредмета");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.РолиПредметов.Основной;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Предметы.РольПредмета");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.РолиПредметов.Вспомогательный;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.НеЗаполненныйПредмет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ПредметыОписание");
	
	// Основной предмет
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Предметы.РольПредмета");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.РолиПредметов.Основной;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементТекстаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементТекстаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,, Истина); 
	ЭлементТекстаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ПредметыОписание");
	
КонецПроцедуры

Процедура УстановитьОформлениеПредметовЗадачи(Знач УсловноеОформление) Экспорт
	
	// Файл редактирует текущий пользователь
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПриложений.РедактируетТекущийПользователь");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ФайлЗанятыйТекущимПользователем.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоПриложенийНаименование");
	
	// Файл занят другим пользователем
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПриложений.РедактируетДругойПользователь");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ФайлЗанятыйДругимПользователем.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоПриложенийНаименование");
	
	// Предмет не заполнен
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПриложений.ОбязательноеЗаполнение");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПриложений.Ссылка");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.НеЗаполненныйПредмет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоПриложенийНаименование");
	
	// Основной предмет
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПриложений.РольПредмета");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.РолиПредметов.Основной;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементТекстаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементТекстаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,, Истина); 
	ЭлементТекстаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоПриложенийНаименование");
	
КонецПроцедуры

// Добавить один предмет к процессу (еще не записанному и не стартованному). 
// Запись процесса делается в вызывающем коде
//
// Параметры:
//  ПроцессОбъект - БизнесПроцессОбъект - бизнес-процесс
//  Предмет - ссылка на предмет
//
Процедура ДобавитьПредмет(ПроцессОбъект, Предмет) Экспорт
	
	ПроцессСсылка = ПроцессОбъект.Ссылка;
	
	Строка = ПроцессОбъект.Предметы.Добавить();
	Строка.РольПредмета = Перечисления.РолиПредметов.Основной;
	Строка.ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Предмет);
	Строка.Предмет = Предмет;
	
	ДействияПроцесса = Мультипредметность.ПолучитьДействияПроцесса(ПроцессСсылка);
		
	Для Каждого Действие Из ДействияПроцесса Цикл
		СтрокаЗадачи = ПроцессОбъект.ПредметыЗадач.Добавить();
		СтрокаЗадачи.ТочкаМаршрута = Действие;
		СтрокаЗадачи.ИмяПредмета = Строка.ИмяПредмета;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти