// @strict-types


#Область ПрограммныйИнтерфейс

#Область ОбработкаСобытийЭДО

#Область УчетныеЗаписиЭДО

// Вызывается при создании на сервере карточки учетной записи ЭДО
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма карточки учетной записи:
//    * Запись - РегистрСведенийМенеджерЗаписи.УчетныеЗаписиЭДО
//  Отказ - Булево
//  СтандартнаяОбработка - Булево
Процедура УчетнаяЗаписьЭДОПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		
		Возврат;
	КонецЕсли;
	
	УзелОбработки = Форма.Запись.УзелОбработки;
	
	Если Не ЗначениеЗаполнено(УзелОбработки) Тогда
		УзелОбработки = КОДСервер.ЦентральныйУзел().УникальныйИдентификатор();
	КонецЕсли;
	
	Если УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла() Тогда
		НастроитьФормуУчетнойЗаписиДляТекущегоУзла(Форма);
	Иначе
		НастроитьФормуУчетнойЗаписиДляДругогоУзла(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере карточки учетной записи ЭДО
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма карточки учетной записи:
//    * Запись - РегистрСведенийМенеджерЗаписи.УчетныеЗаписиЭДО
//  ТекущийОбъект - РегистрСведенийМенеджерЗаписи
//
Процедура УчетнаяЗаписьЭДОПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ОбменСКонтрагентамиДОХолдингКлиентСервер.ИмяРеквизитаУзлаОбмена();
	
	Если Не РаботаСФормами.РеквизитСуществует(Форма, ИмяРеквизита) Тогда
		// Форма ещё не инициализирована. Будет заполнено при создании.
		Возврат;
	КонецЕсли;
	
	УзелОбработки = Форма.Запись.УзелОбработки;
	
	Если Не ЗначениеЗаполнено(УзелОбработки) Тогда
		УзелОбработки = КОДСервер.ЦентральныйУзел().УникальныйИдентификатор();
	КонецЕсли;
	
	Форма[ИмяРеквизита] = КОДПовтИсп.УзелПредставлениеПоИдентификатору(Строка(УзелОбработки));
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеДокументыЭДО

// Вызывается при настройки видимости действий исходящего документа ЭДО
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//    * Объект - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//
Процедура ЭлектронныйДокументИсходящийЭДОПриНастройкеВидимостиДействий(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиКОД(Форма.Объект.ИдентификаторОрганизации);
	
	Если ДанныеУчетнойЗаписи.ОбменВТекущемУзле Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = СтрШаблон(
		НСтр("ru = 'Отправка данного электронного документа произойдет в узле ""%1"".'"),
		ДанныеУчетнойЗаписи.ПредставлениеУзлаОбмена);
	
	ЭлектронныйДокументИсходящийЭДОНастроитьВидимостьДоступность(Форма, ТекстПредупреждения);
	
КонецПроцедуры

// Вызывается при настройки видимости действий исходящего документа ЭДО
// 
// Параметры:
//  Объект - ДокументОбъект.ЭлектронныйДокументВходящийЭДО
//
Процедура ЭлектронныйДокументВходящийЭДОПриНастройкеВидимостиДействий(Объект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиКОД(Объект.ИдентификаторОрганизации);
	
	Если ДанныеУчетнойЗаписи.ОбменВТекущемУзле Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = СтрШаблон(
		НСтр("ru = 'Обмен данными по документу произойдет в узле ""%1"".'"),
		ДанныеУчетнойЗаписи.ПредставлениеУзлаОбмена);
	
	Сообщить(ТекстПредупреждения);
	
КонецПроцедуры

// Вызывается при определении доступных по ЭДО действий для документа ЭДО
// 
// Параметры:
//  СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО - Состояние электронного документа.
//  СвойстваДокумента - ДокументОбъект.ЭлектронныйДокументВходящийЭДО, ДокументОбъект.ЭлектронныйДокументИсходящийЭДО, Структура - Свойства:
//    * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
//    * НаОзнакомлении - Булево - Признак необходимости ознакомиться с электронным документом.
//    * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД - Способ обмена электронным документом.
//    * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  Действия - Соответствие Из КлючИЗначение:
//    * Ключ - ПеречислениеСсылка.ДействияПоЭДО
//    * Значение - Булево
//
Процедура ПриОпределенииДействийДоступныхПоЭДО(Знач СостояниеДокумента, Знач СвойстваДокумента, Действия) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваДокумента.Ссылка, "ИдентификаторОрганизации");
	ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиКОД(ИдентификаторЭДО);
	
	Если ДанныеУчетнойЗаписи.ОбменВТекущемУзле Тогда
		Возврат;
	КонецЕсли;
	
	Действия.Удалить(Перечисления.ДействияПоЭДО.Отправить);
	Действия.Удалить(Перечисления.ДействияПоЭДО.ОтправитьПовторно);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиЭДО

// Вызывается при создании на сервере формы настроек отражения документов в ДО
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//    * ИдентификаторОрганизации - Строка - Идентификатор ЭДО организации
//  Отказ - Булево
//  СтандартнаяОбработка - Булево
//
Процедура НастройкиОтраженияДокументовВУчетеПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЭДО = Форма.ИдентификаторОрганизации;
	
	Если ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиКОД(ИдентификаторЭДО);
		
		Если ДанныеУчетнойЗаписи.ИдентификаторУзлаОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла() Тогда
			Возврат;
		КонецЕсли;
		
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Обмен учетной записью %1 происходит в узле ""%2"". Настройку создания документов необходимо произвести в том же узле'"),
			ИдентификаторЭДО, ДанныеУчетнойЗаписи.ПредставлениеУзлаОбмена);
		
		
	Иначе
		
		Если КОДСервер.ЭтоЦентральныйУзел() Тогда
			Возврат;
		КонецЕсли;
		
		ТекстПредупреждения =
			НСтр("ru = 'Общую настройку создания документов необходимо производить в центральном узле'");
		
	КонецЕсли;
	
	НастройкиОтраженияДокументовВУчетеУстановитьВидимостьДоступность(Форма, ТекстПредупреждения);
	
КонецПроцедуры

// Вызывается при создании на сервере формы настроек отправки документов
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//    * ИдентификаторОтправителя - Строка - Идентификатор ЭДО отправителя
//  Отказ - Булево
//  СтандартнаяОбработка - Булево
//
Процедура НастройкиОтправкиДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ИдентификаторОтправителя) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиКОД(Форма.ИдентификаторОтправителя);
	
	Если ДанныеУчетнойЗаписи.ОбменВТекущемУзле Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = СтрШаблон(
		НСтр("ru = 'Настройки отправки по данной учетной записи ЭДО производятся в узле ""%1"".'"),
		ДанныеУчетнойЗаписи.ПредставлениеУзлаОбмена);
	
	НастройкиОтправкиДокументовУстановитьВидимостьДоступность(Форма, ТекстПредупреждения);
	
КонецПроцедуры

// Вызывается при создании на сервере формы "ОбщиеНастройки" обработки "ПанельАдминистрированияБЭД".
// 
// Параметры:
//  Форма - см. Обработка.ПанельАдминистрированияБЭД.Форма.ОбщиеНастройки
//  Отказ - Булево
//  СтандартнаяОбработка - Булево
Процедура ПанельАдминистрированияБЭДПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	ПанельАдминистрированияБЭДОграничитьИзменениеКонстант(Форма);
	
КонецПроцедуры

#КонецОбласти

// Вызвается после получения данных для синхронизации ЭДО
// 
// Параметры:
//  ДанныеДляСинхронизации см. СинхронизацияЭДОСлужебный.ДанныеДляСинхронизации
//  КонтекстДиагностики см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПереданыУчетныеЗаписи - Булево - Переданы ли учетные записи для получения данных для синхронизации
//
Процедура ПослеПолученияДанныхДляСинхронизацииЭДО(
		ДанныеДляСинхронизации,
		КонтекстДиагностики,
		Знач ПереданыУчетныеЗаписи) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	СообщатьОУдаленныхУчетныхЗаписях = ПереданыУчетныеЗаписи;
	
	УдалитьИзДанныхСинхронизацииУчетныеЗаписиДругихУзлов(
		ДанныеДляСинхронизации, КонтекстДиагностики, СообщатьОУдаленныхУчетныхЗаписях);
	
КонецПроцедуры

#Область ИнтерфейсДокументовЭДО

// Вызывается при создании на сервере формы текущих дел ЭДО
// 
// Параметры:
//  Форма - см. Обработка.ИнтерфейсДокументовЭДО.Форма.ТекущиеДелаПоЭДО
//  Отказ - Булево
//  СтандартнаяОбработка - Булево
//
Процедура ТекущиеДелаЭДОПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	СводнаяСтатистикаПоУзлам = СводнаяСтатистикаУчетныхЗаписейЭДОПоУзлам();
	
	Если СводнаяСтатистикаПоУзлам.ВсеУчетныеЗаписиВТекущемУзле Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СводнаяСтатистикаПоУзлам.ЕстьУчетныеЗаписиВТекущемУзле Тогда
		ТекстПредупреждения = НСтр("ru = 'Обмен по ЭДО происходит в других узлах'");
		СкрытьКнопкуОбмена = Истина;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Обмен некоторыми учетными записями происходит в других узлах'");
		СкрытьКнопкуОбмена = Ложь;
	КонецЕсли;
	
	ТекущиеДелаЭДОУстановитьВидимостьДоступность(Форма, ТекстПредупреждения, СкрытьКнопкуОбмена);
	ТекущиеДелаЭДОУстановитьНедоступныеКоманды(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентыеЗадания

// При получении запроса на обновление словаря сопоставления номенклатуры БЭД.
// 
// Параметры:
//  Запрос - Запрос
//
Процедура ПриПолученииЗапросаНаОбновлениеСловаряСопоставленияНоменклатурыБЭД(Запрос) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|	И СловарьСопоставленияНоменклатурыБЭД.УзелОбработки В (&УзлыОбмена)";
	
	ИдентификаторыУзлов = Новый Массив(); // Массив Из УникальныйИдентификатор
	ИдентификаторыУзлов.Добавить(КОДПовтИсп.ИдентификаторТекущегоУзла());
	Если КОДСервер.ЭтоЦентральныйУзел() Тогда
		ИдентификаторыУзлов.Добавить(УникальныйИдентификаторПустой());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УзлыОбмена", ИдентификаторыУзлов);
	
КонецПроцедуры

// При получении запроса на пометку на удаление устаревших траспортных контейнеров ЭДО
// 
// Параметры:
//  Запрос - Запрос
//
Процедура ПриПолученииЗапросаДляПометкиНаУдалениеТранспортныхКонтейнеровЭДО(Запрос) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	УчетныеЗаписиТекущегоУзла = УчетныеЗаписиСОбменомВТекущемУзле();
	
	Запрос.Текст = Запрос.Текст + "
		|	И ВЫБОР
		|		КОГДА ТранспортныйКонтейнерЭДО.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Исходящий)
		|			ТОГДА ТранспортныйКонтейнерЭДО.Отправитель В (&УчетныеЗаписиТекущегоУзла)
		|		ИНАЧЕ ТранспортныйКонтейнерЭДО.Получатель В (&УчетныеЗаписиТекущегоУзла)
		|	КОНЕЦ";
	Запрос.УстановитьПараметр("УчетныеЗаписиТекущегоУзла", УчетныеЗаписиТекущегоУзла);
	
КонецПроцедуры

// Перед регламентной проверкой наличия новых документов в сервисе ЭДО.
// 
// Параметры:
//  УчетныеЗаписиЭДО - Неопределено, Массив Из Строка - Учетные записи ЭДО, по которым необходимо проверить
//                                                      наличие новых документов.
//                                                      Неопределено - отбора не будет.
//                                                      Массив - будет отбор по учетным записям в массиве.
//
Процедура ПередРегламентнойПроверкойНаличияНовыхДокументовВСервисеЭДО(УчетныеЗаписиЭДО) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетныеЗаписиЭДО = Неопределено Тогда
		УчетныеЗаписиЭДО = УчетныеЗаписиСОбменомВТекущемУзле();
		Возврат;
	КонецЕсли;
	
	ДанныеУчетныхЗаписей = ДанныеУчетныхЗаписейЭДОПоКОД(УчетныеЗаписиЭДО);
	
	Счетчик = УчетныеЗаписиЭДО.Количество() - 1;
	
	Пока Счетчик >= 0 Цикл
		
		ТекущаяУчетнаяЗапись = УчетныеЗаписиЭДО[Счетчик];
		
		ДанныеУчетнойЗаписи = ДанныеУчетныхЗаписей[ТекущаяУчетнаяЗапись];
		
		Если Не ДанныеУчетнойЗаписи.ОбменВТекущемУзле Тогда
			УчетныеЗаписиЭДО.Удалить(Счетчик);
		КонецЕсли;
		
		Счетчик = Счетчик - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// При получении запроса непроверенных контрагентов.
// 
// Параметры:
//  Запрос - Запрос
//
Процедура ПриПолученииЗапросаНепроверенныхКонтрагентов(Запрос) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|	И Контрагенты.УзелОбработки В (&УзлыОбмена)";
	
	ИдентификаторыУзлов = Новый Массив(); // Массив Из УникальныйИдентификатор
	ИдентификаторыУзлов.Добавить(КОДПовтИсп.ИдентификаторТекущегоУзла());
	Если КОДСервер.ЭтоЦентральныйУзел() Тогда
		ИдентификаторыУзлов.Добавить(УникальныйИдентификаторПустой());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УзлыОбмена", ИдентификаторыУзлов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПереопределениеМетодовКОД

// Вызывается перед записью прочитанных данных из объекта XDTO. Позволяет переопределить стандартную
// обработку записи данных в ИБ.
//
// Параметры:
//	Данные - Произвольный - Объект, который необходимо записать.
//	ЧтениеСообщения - Структура Из КлючИЗначение - Структура, содержащая параметры чтения сообщения.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ПередЗаписьюПрочтенногоИзСообщенияКОД(Данные, ЧтениеСообщения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.КлассификаторПолномочийФНСМЧД002") Тогда
		ПередЗаписьюПрочтенногоПолномочияМЧД002(Данные, ЧтениеСообщения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.КлассификаторПолномочийМЧД003") Тогда
		ПередЗаписьюПрочтенногоПолномочияМЧД003(Данные, ЧтениеСообщения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании нового объекта по данным из сообщения КОД
//  Если необходимо определенным образом предзаполнить объект - заполняется параметр "Объект"
//  Если объект имеет аналог в существующей базе - необходимо заполнить ссылку
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO
//  Объект - Неопределено - Заполняемое значение
//  Ссылка - Неопределено - Заполняемое значение
Процедура ПриСозданииНовогоСсылочногоОбъектаИзСообщенияКОД(ОбъектXDTO, Объект, Ссылка) Экспорт
	
	ПолноеИмя = ОбъектXDTO.Тип().Имя;
	
	Если ПолноеИмя = "Справочник.ВидыДокументовЭДО" Тогда
		ПриСозданииНовогоВидаДокументовЭДО(ОбъектXDTO, Объект, Ссылка);
	ИначеЕсли ПолноеИмя = ИмяСправочникаКлассификатораПолномочийМЧД002() Тогда
		ПриСозданииНовогоПолномочияМЧД002(ОбъектXDTO, Объект, Ссылка);
	ИначеЕсли ПолноеИмя = ИмяСправочникаКлассификатораПолномочийМЧД003() Тогда
		ПриСозданииНовогоПолномочияМЧД003(ОбъектXDTO, Объект, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при определении адресатов самостоятельных данных для определения особого алгоритма.
// Вызывается из КОДОтправка.АдресатыСамостоятельныхДанных.
//
// Параметры:
//   ТипДанныхОбмена - Структура - Описание типа данных КОД (см. КОДПовтИсп.ИдентификаторИТипыДанныхОбмена):
//     * ПолноеИмя - Строка - Полное имя объекта метаданных
//   КлючиДанных - Массив Из СправочникСсылка, ДокументСсылка - Ключи объектов, которые требуют определения адресатов.
//   ПараметрыРассмотрения - Структура
//   УзлыДанных - Соответствие Из КлючИЗначение - Неявно возвращаемый параметр, в него следует поместить результат.
//   СтандартнаяОбработка - Булево - Признак отключения стандартной логики определения адресатов.
//
Процедура ПриОпределенииАдресатовСамостоятельныхДанных(ТипДанныхОбмена, КлючиДанных, ПараметрыРассмотрения,
		УзлыДанных, СтандартнаяОбработка) Экспорт
	
	Если ТипДанныхОбмена.ПолноеИмя = "Документ.ЭлектронныйДокументВходящийЭДО"
		Или ТипДанныхОбмена.ПолноеИмя = "Документ.ЭлектронныйДокументИсходящийЭДО" Тогда
		
		УзлыДанных = АдресатыДокументовЭДО(КлючиДанных);
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТипДанныхОбмена.ПолноеИмя = "Документ.ТранспортныйКонтейнерЭДО" Тогда
		
		УзлыДанных = АдресатыТранспортныхКонтейнеровЭДО(КлючиДанных);
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТипДанныхОбмена.ПолноеИмя = "РегистрСведений.ПакетыДокументовЭДО" Тогда
		
		УзлыДанных = АдресатыПакетыДокументовЭДО(КлючиДанных);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при определении вариантов размещения
// 
// Параметры:
//  ТипДанных - Структура:
//    * Наименование - Строка - Имя объекта, совпадает с полным именем объекта метаданных
//  Варианты - Массив Из ПеречислениеСсылка.РазмещениеДанныхВУзлахКОД
//
Процедура ПриОпределенииВариантовРазмещения(ТипДанных, Варианты) Экспорт
	
	ВариантыРазмещенияПереопределенные = ВариантыРазмещенияОбъектаБЭД(ТипДанных);
	Если ВариантыРазмещенияПереопределенные.Количество() > 0 Тогда
		Варианты = ВариантыРазмещенияПереопределенные;
		Возврат;
	КонецЕсли;
	
	ВариантыРазмещенияПереопределенные = ВариантыРазмещенияОбъектаДО(ТипДанных);
	Если ВариантыРазмещенияПереопределенные.Количество() > 0 Тогда
		Варианты = ВариантыРазмещенияПереопределенные;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при определении имени поля владельца данных
// 
// Параметры:
//  ТипДанных - СправочникОбъект.ТипыДанныхКОД
//  ИмяПоля - Строка
//
Процедура ПриОпределенииИмениПоляВладельцаДанных(ТипДанных, ИмяПоля) Экспорт
	
	ИмяПоляПереопределенное = ОсобоеИмяПоляВладельцаБЭД(ТипДанных);
	Если ЗначениеЗаполнено(ИмяПоляПереопределенное) Тогда
		ИмяПоля = ИмяПоляПереопределенное;
		Возврат;
	КонецЕсли;
	
	ИмяПоляПереопределенное = ОсобоеИмяПоляВладельцаДО(ТипДанных);
	Если ЗначениеЗаполнено(ИмяПоляПереопределенное) Тогда
		ИмяПоля = ИмяПоляПереопределенное;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет сопровождающие данные объектов при выгрузке в узлы КОД
// 
// Параметры:
//  ИмяОбъектаМетаданных - Строка - Полное имя объекта метаданных, сопровождающие данные которого необходимо дополнить
//  Ключи - Массив Из ЛюбаяСсылка - Массив ключей, по которым необходимо получить сопровождающие данные
//  СопровождающиеДанныеОбъектов - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Полное имя объекта метаданных сопровождающих данных
//    * Значение - Массив Из ЛюбаяСсылка - Ссылки на сопровождающие данные
Процедура ДополнитьСопровождающиеДанныеОбъектов(ИмяОбъектаМетаданных, Ключи, СопровождающиеДанныеОбъектов) Экспорт
	
	Если ИмяОбъектаМетаданных = ИмяМетаданногоДокументаДО() Тогда
		
		ДополнитьСопровождающиеДанныеДокументовДО(Ключи, СопровождающиеДанныеОбъектов);
		
	ИначеЕсли ИмяОбъектаМетаданных = ИмяМетаданногоВходящегоДокументаЭДО()
		Или ИмяОбъектаМетаданных = ИмяМетаданногоИсходящегоДокументаЭДО() Тогда
		
		ДополнитьСопровождающиеДанныеДокументовЭДО(Ключи, СопровождающиеДанныеОбъектов);
		
	ИначеЕсли ИмяОбъектаМетаданных = ИмяМетаданногоСоставаПакетовБЭД() Тогда
		
		ДополнитьСопровождающиеДанныеСоставаПакетовБЭД(Ключи, СопровождающиеДанныеОбъектов);
		
	ИначеЕсли ИмяОбъектаМетаданных = ИмяМетаданногоПакетовБЭД() Тогда
		
		ДополнитьСопровождающиеДанныеПакетовБЭД(Ключи, СопровождающиеДанныеОбъектов);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает, необходимо ли добавить ссылку на объект в исключения контроля ссылочной целостности
// 
// Параметры:
//  ПолноеИмяОбъекта - Строка
//  ПутьКДаннымВОбъекте - Строка
//  ПолноеИмяСсылающегосяОбъекта - Строка
//  ПутьКДаннымСсылающегосяОбъекта - Строка
//  
// Возвращаемое значение:
//  Булево
//
Функция СсылкаВИсключенияКонтроляСсылочнойЦелостностиКОД(ПолноеИмяОбъекта, ПутьКДаннымВОбъекте,
		ПолноеИмяСсылающегосяОбъекта, ПутьКДаннымСсылающегосяОбъекта) Экспорт
	
	Если ПолноеИмяСсылающегосяОбъекта = ИмяМетаданногоИсходящегоДокументаЭДО() Тогда
		
		Если ПолноеИмяОбъекта = Метаданные.Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПолноеИмя()
			И ПутьКДаннымСсылающегосяОбъекта = "СписокПодписантов.Сертификат" Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область УзлыОбъектовЭДО

// Новые параметры определения адресатов документов Документооборота.
// 
// Возвращаемое значение:
//  Структура - Новые параметры определения адресатов документов ДО:
//    * ДополнятьАдресатамиПоЭДО - Булево - Следует ли дополнять адресатами по логике ЭДО в общем.
//    * ДополнятьАдресатамиПоПакетуЭДО - Булево - Следует ли дополнять адресатами других документов пакета
Функция НовыеПараметрыОпределенияАдресатовДокументовДО() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДополнятьАдресатамиПоЭДО", Истина);
	Параметры.Вставить("ДополнятьАдресатамиПоПакетуЭДО", Истина);
	
	Возврат Параметры;
	
КонецФункции

// Дополняет узлы документов Документооборота, узлами, необходимыми по логике ЭДО
// 
// Параметры:
//  УзлыДокументов - Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ДокументДОДляЭДО
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//  ПараметрыОпределенияАдресатов - см. НовыеПараметрыОпределенияАдресатовДокументовДО
//
Процедура ДополнитьУзлыДокументовДляЭДО(УзлыДокументов, ПараметрыОпределенияАдресатов) Экспорт
	
	Если Не ПараметрыОпределенияАдресатов.ДополнятьАдресатамиПоЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьУзлыДокументовДОУзламиОтправки(УзлыДокументов, ПараметрыОпределенияАдресатов);
	
КонецПроцедуры

// Узлы файлов транспортных контейнеров ЭДО
// 
// Параметры:
//  ФайлыТранспортныхКонтейнеров - Массив Из СправочникСсылка.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
Функция УзлыФайловТранспортныхКонтейнеровЭДО(ФайлыТранспортныхКонтейнеров) Экспорт
	
	УзлыФайлов = Новый Соответствие();
	
	КонтейнерыФайлов = ТранспортныеКонтейнерыФайлов(ФайлыТранспортныхКонтейнеров);
	КонтейнерыЭДО = Новый Массив(); // Массив Из СправочникСсылка.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
	Для Каждого Элемент Из КонтейнерыФайлов Цикл
		Контейнер = Элемент.Значение; // СправочникСсылка.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
		КонтейнерыЭДО.Добавить(Контейнер);
	КонецЦикла;
	
	УзлыКонтейнеров = АдресатыТранспортныхКонтейнеровЭДО(КонтейнерыЭДО);
	
	Для Каждого Файл Из ФайлыТранспортныхКонтейнеров Цикл
		
		УзлыФайла = Новый Массив();
		УзлыФайлов[Файл] = УзлыФайла;
		
		Контейнер = КонтейнерыФайлов[Файл];
		УзлыКонтейнера = УзлыКонтейнеров[Контейнер];
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УзлыФайла, УзлыКонтейнера);
		
	КонецЦикла;
	
	Возврат УзлыФайлов;
	
КонецФункции

// Узлы файлов сообщений ЭДО.
// 
// Параметры:
//  ФайлыСообщенийЭДО - Массив Из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция УзлыФайловСообщенийЭДО(ФайлыСообщенийЭДО) Экспорт
	
	УзлыФайлов = Новый Соответствие();
	
	ДокументыФайлов = ДокументыЭДОФайловСообщенийЭДО(ФайлыСообщенийЭДО);
	ДокументыЭДО = Новый Массив(); // Массив Из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
	Для Каждого Элемент Из ДокументыФайлов Цикл
		ДокументЭДО = Элемент.Значение; // СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
		ДокументыЭДО.Добавить(ДокументЭДО);
	КонецЦикла;
	
	УзлыДокументов = АдресатыДокументовЭДО(ДокументыЭДО);
	
	Для Каждого Файл Из ФайлыСообщенийЭДО Цикл
		
		УзлыФайла = Новый Массив();
		УзлыФайлов[Файл] = УзлыФайла;
		
		Документ = ДокументыФайлов[Файл];
		УзлыДокумента = УзлыДокументов[Документ];
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УзлыФайла, УзлыДокумента);
		
	КонецЦикла;
	
	Возврат УзлыФайлов;
	
КонецФункции

#КонецОбласти

// Данные документов ЭДО по КОД.
// 
// Параметры:
//  ДокументыЭДО - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
//    * Значение - Структура:
//      ** ИдентификаторУзлаОбмена - УникальныйИдентификатор
//      ** ПредставлениеУзлаОбмена - Строка
//      ** ОбменВТекущемУзле - Булево
//
Функция ДанныеДокументовЭДОПоКОД(ДокументыЭДО) Экспорт
	
	РеквизитыДокументовЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДокументыЭДО, "ИдентификаторОрганизации");
	
	УчетныеЗаписиПрисутствуютВДокументах = Новый Соответствие();
	
	ДанныеДокументовПоКОД = Новый Соответствие();
	Для Каждого Документ Из ДокументыЭДО Цикл
		
		УчетнаяЗаписьДокумента = РеквизитыДокументовЭДО[Документ].ИдентификаторОрганизации;
		УчетныеЗаписиПрисутствуютВДокументах[УчетнаяЗаписьДокумента] = Истина;
		
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("ИдентификаторУзлаОбмена", УникальныйИдентификаторПустой());
		ДанныеДокумента.Вставить("ПредставлениеУзлаОбмена", "");
		ДанныеДокумента.Вставить("ОбменВТекущемУзле", Ложь);
		
		ДанныеДокументовПоКОД.Вставить(Документ, ДанныеДокумента);
		
	КонецЦикла;
	
	УникальныеУчетныеЗаписи = Новый Массив; // Массив Из Строка
	Для Каждого Элемент Из УчетныеЗаписиПрисутствуютВДокументах Цикл
		УчетнаяЗаписьЭДО = Элемент.Ключ; // Строка
		УникальныеУчетныеЗаписи.Добавить(УчетнаяЗаписьЭДО);
	КонецЦикла;
	
	ДанныеУчетныхЗаписейПоКОД = ДанныеУчетныхЗаписейЭДОПоКОД(УникальныеУчетныеЗаписи);
	Для Каждого Документ Из ДокументыЭДО Цикл
		
		УчетнаяЗаписьДокумена = РеквизитыДокументовЭДО[Документ].ИдентификаторОрганизации;
		
		ДанныеУчетнойЗаписи = ДанныеУчетныхЗаписейПоКОД[УчетнаяЗаписьДокумена];
		ДанныеДокумента = ДанныеДокументовПоКОД[Документ];
		
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, ДанныеУчетнойЗаписи);
		
	КонецЦикла;
	
	Возврат ДанныеДокументовПоКОД;
	
КонецФункции

// Данные учетных записей ЭДО по КОД.
// 
// Параметры:
//  УчетныеЗаписиЭДО - Массив Из Строка - Идентификаторы ЭДО учетных записей
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Учетная запись ЭДО
//    * Значение - см. НовыеДанныеУчетнойЗаписиЭДОПоКОД
//
Функция ДанныеУчетныхЗаписейЭДОПоКОД(УчетныеЗаписиЭДО) Экспорт
	
	ИдентификаторЦентра = КОДСервер.ЦентральныйУзел().УникальныйИдентификатор();
	ЭтоЦентр = КОДСервер.ЭтоЦентральныйУзел();
	
	ДанныеУчетныхЗаписей = НовыеДанныеУчетныхЗаписейЭДОПоКОД();
	Для Каждого УчетнаяЗапись Из УчетныеЗаписиЭДО Цикл
		
		// По умолчанию ставим всем учетным записям центральный узел
		ДанныеУчетнойЗаписи = НовыеДанныеУчетнойЗаписиЭДОПоКОД();
		ДанныеУчетнойЗаписи.ИдентификаторУзлаОбмена = ИдентификаторЦентра;
		ДанныеУчетнойЗаписи.ПредставлениеУзлаОбмена =
			КОДПовтИсп.УзелПредставлениеПоИдентификатору(Строка(ИдентификаторЦентра));
		ДанныеУчетнойЗаписи.ОбменВТекущемУзле = ЭтоЦентр;
		
		ДанныеУчетныхЗаписей.Вставить(УчетнаяЗапись, ДанныеУчетнойЗаписи);
		
	КонецЦикла;
	
	ИдентификаторыУзловКОД = ИдентификаторыУзловУчетныхЗаписейЭДО(УчетныеЗаписиЭДО);
	
	Для Каждого Элемент Из ИдентификаторыУзловКОД Цикл
		
		УчетнаяЗапись = Элемент.Ключ;
		ИдентификаторУзлаКОД = Элемент.Значение;
		
		ДанныеУчетнойЗаписи = ДанныеУчетныхЗаписей.Получить(УчетнаяЗапись);
		Если ДанныеУчетнойЗаписи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУчетнойЗаписи.ИдентификаторУзлаОбмена = ИдентификаторУзлаКОД;
		ДанныеУчетнойЗаписи.ПредставлениеУзлаОбмена =
			КОДПовтИсп.УзелПредставлениеПоИдентификатору(Строка(ИдентификаторУзлаКОД));
		ДанныеУчетнойЗаписи.ОбменВТекущемУзле = (КОДПовтИсп.ИдентификаторТекущегоУзла() = ИдентификаторУзлаКОД);
		
	КонецЦикла;
	
	Возврат ДанныеУчетныхЗаписей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьНастроитьНадписьОбменаВДругомУзле(Форма, Заголовок, СледующийЭлемент)
	
	ИмяЭлемента = ОбменСКонтрагентамиДОХолдингКлиентСервер.ИмяЭлементаНадписьОбменВДругомУзле();
	
	Элемент = Форма.Элементы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Элемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ДекорацияФормы"),
			Форма, СледующийЭлемент);
	КонецЕсли;
	
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.Заголовок = Заголовок;
	Элемент.ЦветФона = ЦветаСтиля.ОтсутствиеЦветФона;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	
КонецПроцедуры

#Область СоответствиеПоставляемыхОбъектов

// При создании нового вида документов ЭДО.
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO:
//    * ИдентификаторСсылкиОбъекта - Строка - идентификатор ссылки
//    * Наименование - Строка - наименование вида документа
//    * ТипДокумента - ОбъектXDTO:
//      ** Идентификатор - Строка - Идентификатор перечисления
//  Объект - Неопределено - Объект
//  Ссылка - Неопределено - Ссылка
Процедура ПриСозданииНовогоВидаДокументовЭДО(ОбъектXDTO, Объект, Ссылка)
	
	Если КОДСервер.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	Наименование = ОбъектXDTO.Наименование;
	ТипДокумента = Перечисления.ТипыДокументовЭДО[ОбъектXDTO.ТипДокумента.Идентификатор];
	
	СсылкаНаСуществующий = СуществующийВидДокументаЭДО(Наименование, ТипДокумента);
	
	Если Не ЗначениеЗаполнено(СсылкаНаСуществующий) Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНового = Справочники.ВидыДокументовЭДО.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ОбъектXDTO.ИдентификаторСсылкиОбъекта));
	
	ЗаменитьСсылкиНаИзмерениеРегистра("СвязьВидовИФорматовДокументовЭДО", "ВидДокумента",
		СсылкаНаСуществующий, СсылкаНового);
	ЗаменитьСсылкиНаИзмерениеРегистра("ПодписываемыеВидыЭД", "ВидЭД",
		СсылкаНаСуществующий, СсылкаНового);
	
	СуществующийОбъект = СсылкаНаСуществующий.ПолучитьОбъект();
	СуществующийОбъект.Удалить();
	
КонецПроцедуры

// Возвращает существующий вид документа ЭДО, если он есть в базе
// 
// Параметры:
//  Наименование - Строка
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО
Функция СуществующийВидДокументаЭДО(Наименование, ТипДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента = &ТипДокумента
		|	И ВидыДокументовЭДО.Наименование = &Наименование";
	Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ВидыДокументовЭДО.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗаменитьСсылкиНаИзмерениеРегистра(ИмяРегистра, ИмяИзмерения, ЗаменяемаяСсылка, СсылкаЗамены)
	
	НаборЗаписейСтарый = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписейСтарый.Отбор[ИмяИзмерения].Установить(ЗаменяемаяСсылка);
	НаборЗаписейСтарый.Прочитать();
	
	НаборЗаписейНовый = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписейНовый.Отбор[ИмяИзмерения].Установить(СсылкаЗамены);
	НаборЗаписейНовый.Очистить();
	
	Для Каждого СтараяЗапись Из НаборЗаписейСтарый Цикл
		НоваяЗапись = НаборЗаписейНовый.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись);
		НоваяЗапись[ИмяИзмерения] = СсылкаЗамены;
	КонецЦикла;
	
	НаборЗаписейСтарый.Очистить();
	НаборЗаписейСтарый.Записать();
	
	НаборЗаписейНовый.Записать();
	
КонецПроцедуры

// При создании нового полномочия МЧД 002.
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO:
//    * ИдентификаторСсылкиОбъекта - Строка - идентификатор ссылки
//    * КодКлассификатора - Строка - код полномочия
//  Объект - Неопределено - Объект
//  Ссылка - Неопределено - Ссылка
Процедура ПриСозданииНовогоПолномочияМЧД002(ОбъектXDTO, Объект, Ссылка)
	
	Если КОДСервер.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	КодПолномочия = ОбъектXDTO.КодКлассификатора;
	
	СсылкаНаСуществующий = Справочники.КлассификаторПолномочийФНСМЧД002.НайтиПолномочиеПоКоду(КодПолномочия);
	
	Если Не ЗначениеЗаполнено(СсылкаНаСуществующий) Тогда
		Возврат;
	КонецЕсли;
	
	СуществующийОбъект = СсылкаНаСуществующий.ПолучитьОбъект();
	СуществующийОбъект.Удалить();
	
КонецПроцедуры

// Возвращает имя справочника классификатора полномочий МЧД 002
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСправочникаКлассификатораПолномочийМЧД002()
	
	Возврат Метаданные.Справочники.КлассификаторПолномочийФНСМЧД002.ПолноеИмя();
	
КонецФункции

// При создании нового полномочия МЧД 003.
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO:
//    * ИдентификаторСсылкиОбъекта - Строка - идентификатор ссылки
//    * КодКлассификатора - Строка - код полномочия
//  Объект - Неопределено - Объект
//  Ссылка - Неопределено - Ссылка
Процедура ПриСозданииНовогоПолномочияМЧД003(ОбъектXDTO, Объект, Ссылка)
	
	Если КОДСервер.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	КодПолномочия = ОбъектXDTO.КодКлассификатора;
	
	СсылкаНаСуществующий = Справочники.КлассификаторПолномочийМЧД003.НайтиПолномочиеПоКоду(КодПолномочия);
	
	Если Не ЗначениеЗаполнено(СсылкаНаСуществующий) Тогда
		Возврат;
	КонецЕсли;
	
	СуществующийОбъект = СсылкаНаСуществующий.ПолучитьОбъект();
	СуществующийОбъект.Удалить();
	
КонецПроцедуры

// Возвращает имя справочника классификатора полномочий МЧД 003
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСправочникаКлассификатораПолномочийМЧД003()
	
	Возврат Метаданные.Справочники.КлассификаторПолномочийМЧД003.ПолноеИмя();
	
КонецФункции

// Перед записью полномочия МЧД 002
//
// Параметры:
//	Данные - СправочникОбъект.КлассификаторПолномочийФНСМЧД002
//	ЧтениеСообщения - Структура Из КлючИЗначение - Структура, содержащая параметры чтения сообщения.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ПередЗаписьюПрочтенногоПолномочияМЧД002(Данные, ЧтениеСообщения, СтандартнаяОбработка)
	
	Если КОДСервер.ЭтоЦентральныйУзел() Тогда
		
		КодПолномочия = Данные.КодКлассификатора;
		СсылкаНаСуществующий = Справочники.КлассификаторПолномочийФНСМЧД002.НайтиПолномочиеПоКоду(КодПолномочия);
		Если ЗначениеЗаполнено(СсылкаНаСуществующий) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Перед записью полномочия МЧД 003
//
// Параметры:
//	Данные - СправочникОбъект.КлассификаторПолномочийМЧД003
//	ЧтениеСообщения - Структура Из КлючИЗначение - Структура, содержащая параметры чтения сообщения.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ПередЗаписьюПрочтенногоПолномочияМЧД003(Данные, ЧтениеСообщения, СтандартнаяОбработка)
	
	Если КОДСервер.ЭтоЦентральныйУзел() Тогда
		
		КодПолномочия = Данные.КодКлассификатора;
		СсылкаНаСуществующий = Справочники.КлассификаторПолномочийМЧД003.НайтиПолномочиеПоКоду(КодПолномочия);
		Если ЗначениеЗаполнено(СсылкаНаСуществующий) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УчетныеЗаписиЭДО

Процедура НастроитьФормуУчетнойЗаписиДляТекущегоУзла(Форма)
	
	ИмяЭлемента = ОбменСКонтрагентамиДОХолдингКлиентСервер.ИмяЭлементаУзлаОбмена();
	ИмяРеквизита = ОбменСКонтрагентамиДОХолдингКлиентСервер.ИмяРеквизитаУзлаОбмена();
	
	УзелОбработки = Форма.Запись.УзелОбработки;
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() Тогда
		Если Не ЗначениеЗаполнено(УзелОбработки) Тогда
			УзелОбработки = КОДСервер.ЦентральныйУзел().УникальныйИдентификатор();
		КонецЕсли;
		
		РаботаСФормами.ДобавитьРеквизит(Форма, ИмяРеквизита, Тип("Строка"));
		Форма[ИмяРеквизита] = КОДПовтИсп.УзелПредставлениеПоИдентификатору(Строка(УзелОбработки));
		
		Элемент = РаботаСФормами.ДобавитьПолеНадписи(Форма.Элементы, ИмяЭлемента,
			Форма.Элементы.СтраницаОсновное,
			ИмяРеквизита);
		Элемент.Заголовок = Метаданные.ОбщиеРеквизиты.УзелОбработки.Синоним;
		Элемент.Гиперссылка = Истина;
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_ДокументооборотНажатие");
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьФормуУчетнойЗаписиДляДругогоУзла(Форма)
	
	Элементы = Форма.Элементы;
	
	Форма.ТолькоПросмотр = Истина;
	
	Элементы.ИзменитьАдресОрганизации.Доступность = Ложь;
	Элементы.ИзменитьКодНалоговогоОргана.Доступность = Ложь;
	Элементы.ФормаПроверкаУчетнойЗаписи.Доступность = Ложь;
	
	УзелОбработки = Форма.Запись.УзелОбработки;
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() Тогда
		Если Не ЗначениеЗаполнено(УзелОбработки) Тогда
			УзелОбработки = КОДСервер.ЦентральныйУзел().УникальныйИдентификатор();
		КонецЕсли;
		
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Обмен этой учетной записью происходит в узле ""%1"". Редактирование необходимо производить в том же узле.'"),
			КОДПовтИсп.УзелПредставлениеПоИдентификатору(Строка(УзелОбработки)));
		СоздатьНастроитьНадписьОбменаВДругомУзле(Форма, ТекстПредупреждения, Элементы.ПанельКонтекстныхНовостей);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает идентификаторы узлов обмена, которым принадлежат учетные записи ЭДО
// 
// Параметры:
//  ИдентификаторыЭДО - Неопределено, Массив из Строка - Идентификаторы учетных записей ЭДО,
//                                                       для которых необходимо получить узлы обмена.
//                                                       Если не переданы, то получаются узлы для всех учетных записей.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Идентификатор учетной записи ЭДО
//    * Значение - УникальныйИдентификатор - Идентификатор узла обмена, в котором работает данная учетна запись
//
Функция ИдентификаторыУзловУчетныхЗаписейЭДО(Знач ИдентификаторыЭДО = Неопределено)
	
	УзлыУчетныхЗаписей = Новый Соответствие;
	
	Выборка = ВыборкаУзловОбменаПоИдентификаторамЭДО(ИдентификаторыЭДО);
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.УзелОбработки) Тогда
			УзлыУчетныхЗаписей.Вставить(Выборка.ИдентификаторЭДО,
				КОДСервер.ЦентральныйУзел().УникальныйИдентификатор());
		Иначе
			УзлыУчетныхЗаписей.Вставить(Выборка.ИдентификаторЭДО, Выборка.УзелОбработки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат УзлыУчетныхЗаписей;
	
КонецФункции

// Выборка узлов обмена по идентификаторам ЭДО.
// 
// Параметры:
//  ИдентификаторыЭДО - Неопределено, Массив из Строка - Идентификаторы ЭДО
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//    * ИдентификаторЭДО - Строка - Идентификатор ЭДО учетной записи
//    * УзелОбработки - УникальныйИдентификатор
//
Функция ВыборкаУзловОбменаПоИдентификаторамЭДО(ИдентификаторыЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО,
		|	УчетныеЗаписиЭДО.УзелОбработки
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	&УсловиеОтбора";
	
	Если ИдентификаторыЭДО = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора",
			"УчетныеЗаписиЭДО.ИдентификаторЭДО В (&ИдентификаторыЭДО)");
		Запрос.УстановитьПараметр("ИдентификаторыЭДО", ИдентификаторыЭДО);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Новые данные учетной записи ЭДО по КОД.
// 
// Возвращаемое значение:
//  Структура:
//    * ИдентификаторУзлаОбмена - УникальныйИдентификатор
//    * ПредставлениеУзлаОбмена - Строка
//    * ОбменВТекущемУзле - Булево
Функция НовыеДанныеУчетнойЗаписиЭДОПоКОД()
	
	ДанныеУчетнойЗаписи = Новый Структура;
	ДанныеУчетнойЗаписи.Вставить("ИдентификаторУзлаОбмена", УникальныйИдентификаторПустой());
	ДанныеУчетнойЗаписи.Вставить("ПредставлениеУзлаОбмена", "");
	ДанныеУчетнойЗаписи.Вставить("ОбменВТекущемУзле", Ложь);
	
	Возврат ДанныеУчетнойЗаписи;
	
КонецФункции

Функция ДанныеУчетнойЗаписиКОД(ИдентификаторЭДО)
	
	ИдентификаторыЭДО = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторЭДО);
	ИдентификаторыУзлов = ДанныеУчетныхЗаписейЭДОПоКОД(ИдентификаторыЭДО);
	ДанныеУчетнойЗаписи = ИдентификаторыУзлов.Получить(ИдентификаторЭДО);
	
	Возврат ДанныеУчетнойЗаписи;
	
КонецФункции

Функция СводнаяСтатистикаУчетныхЗаписейЭДОПоУзлам()
	
	НаличиеУчетныхЗаписей = Новый Структура;
	НаличиеУчетныхЗаписей.Вставить("ВсеУчетныеЗаписиВТекущемУзле", Истина);
	НаличиеУчетныхЗаписей.Вставить("ЕстьУчетныеЗаписиВДругихУзлах", Ложь);
	НаличиеУчетныхЗаписей.Вставить("ЕстьУчетныеЗаписиВТекущемУзле", Ложь);
	
	ИдентификаторыУзлов = ИдентификаторыУзловУчетныхЗаписейЭДО();
	
	Для Каждого Элемент Из ИдентификаторыУзлов Цикл
		
		ИдентификаторУзла = Элемент.Значение;
		
		Если ИдентификаторУзла = КОДПовтИсп.ИдентификаторТекущегоУзла() Тогда
			НаличиеУчетныхЗаписей.ЕстьУчетныеЗаписиВТекущемУзле = Истина;
		Иначе
			НаличиеУчетныхЗаписей.ЕстьУчетныеЗаписиВДругихУзлах = Истина;
			НаличиеУчетныхЗаписей.ВсеУчетныеЗаписиВТекущемУзле = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаличиеУчетныхЗаписей;
	
КонецФункции

// Новые данные учетных записей ЭДОПо КОД.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Учетная запись ЭДО
//    * Значение - см. НовыеДанныеУчетнойЗаписиЭДОПоКОД
//
Функция НовыеДанныеУчетныхЗаписейЭДОПоКОД()
	
	ДанныеУчетныхЗаписей = Новый Соответствие();
	Возврат ДанныеУчетныхЗаписей;
	
КонецФункции

Функция УчетныеЗаписиСОбменомВТекущемУзле()
	
	ИдентификаторыУзловПоУчетныхЗаписей = ИдентификаторыУзловУчетныхЗаписейЭДО();
	ЭтоЦентр = КОДСервер.ЭтоЦентральныйУзел();
	
	УчетныеЗаписиВТекущемУзле = Новый Массив; // Массив из Строка
	
	Для Каждого Элемент Из ИдентификаторыУзловПоУчетныхЗаписей Цикл
		
		УчетнаяЗаписьЭДО = Элемент.Ключ;
		ИдентификаторУзлаКОД = Элемент.Значение;
		
		Если ИдентификаторУзлаКОД = КОДПовтИсп.ИдентификаторТекущегоУзла()
			Или (ИдентификаторУзлаКОД = УникальныйИдентификаторПустой() И ЭтоЦентр) Тогда
			
			УчетныеЗаписиВТекущемУзле.Добавить(УчетнаяЗаписьЭДО);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат УчетныеЗаписиВТекущемУзле;
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеДокументыЭДО

Процедура ЭлектронныйДокументИсходящийЭДОНастроитьВидимостьДоступность(Форма, ТекстПредупреждения)
	
	Элементы = Форма.Элементы;
	
	СоздатьНастроитьНадписьОбменаВДругомУзле(Форма, ТекстПредупреждения, Элементы.ГруппаОсновное);
	
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияЭДО

Процедура УдалитьИзДанныхСинхронизацииУчетныеЗаписиДругихУзлов(ДанныеСинхронизации,
		КонтекстДиагностики, Сообщать)
	
	УзлыУчетныхЗаписей = ИдентификаторыУзловУчетныхЗаписейЭДО();
	
	ОшибкиПоУчетнымЗаписям = НовыйНаборОшибокПоУчетнымЗаписямЭДО();
	
	УдалитьУчетныеЗаписиДругихУзловИзСоответствияПоКлючу(
		ДанныеСинхронизации.КлючиСинхронизации,
		УзлыУчетныхЗаписей,
		ОшибкиПоУчетнымЗаписям,
		Сообщать);
	УдалитьУчетныеЗаписиДругихУзловИзСоответствияПоКлючу(
		ДанныеСинхронизации.УчетныеЗаписиБезДоступаКСертификатам,
		УзлыУчетныхЗаписей,
		ОшибкиПоУчетнымЗаписям,
		Сообщать);
	
	УдалитьУчетныеЗаписиДругихУзловИзМассива(
		ДанныеСинхронизации.УчетныеЗаписиБезДоступныхСертификатов,
		УзлыУчетныхЗаписей,
		ОшибкиПоУчетнымЗаписям,
		Сообщать);
	
	Для Каждого Элемент Из ОшибкиПоУчетнымЗаписям Цикл
		
		Ошибка = Элемент.Значение;
		
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(
			КонтекстДиагностики,
			Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет учетные записи других узлов из соответствия по ключу
// 
// Параметры:
//  Соответствие - Соответствие из КлючИЗначение:
//    * Ключ - Строка - Идентификатор учетной записи ЭДО
//    * Значение - Произвольный
//  УзлыУчетныхЗаписей - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Идентификатор учетной записи ЭДО
//    * Значение - УникальныйИдентификатор - Идентификатор узла КОД
//  Ошибки - Соответствие из КлючИЗначение- заполняемые ошибки по учетным записям:
//    * Ключ - Строка - Идентификатор учетной записи ЭДО
//    * Значение - Структура - описание ошибки 
//  Сообщать - Булево - Сообщать ли об ошибках
Процедура УдалитьУчетныеЗаписиДругихУзловИзСоответствияПоКлючу(Соответствие, УзлыУчетныхЗаписей, Ошибки, Сообщать)
	
	Для Каждого Элемент Из Соответствие Цикл
		
		ИдентификаторЭДО = Элемент.Ключ;
		
		Если УзлыУчетныхЗаписей[ИдентификаторЭДО] <> КОДПовтИсп.ИдентификаторТекущегоУзла() Тогда
			
			Соответствие.Удалить(ИдентификаторЭДО);
			
			Если Сообщать И Ошибки[ИдентификаторЭДО] = Неопределено Тогда
				Ошибки.Вставить(ИдентификаторЭДО,
					ОшибкаСинхронизацииВДругомУзле(ИдентификаторЭДО, УзлыУчетныхЗаписей[ИдентификаторЭДО]));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет учетные записи других узлов из массива
// 
// Параметры:
//  Массив - Массив из Строка - Идентификаторы учетных записей ЭДО
//  УзлыУчетныхЗаписей - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Идентификатор учетной записи ЭДО
//    * Значение - УникальныйИдентификатор - Идентификатор узла КОД
//  Ошибки - Соответствие из КлючИЗначение- заполняемые ошибки по учетным записям:
//    * Ключ - Строка - Идентификатор учетной записи ЭДО
//    * Значение - Структура - описание ошибки 
//  Сообщать - Булево - Сообщать ли об ошибках
Процедура УдалитьУчетныеЗаписиДругихУзловИзМассива(Массив, УзлыУчетныхЗаписей, Ошибки, Сообщать)
	
	ИндексУчетнойЗаписи = 0;
	Пока ИндексУчетнойЗаписи < Массив.Количество() Цикл
		
		ИдентификаторЭДО = Массив[ИндексУчетнойЗаписи];
		
		Если УзлыУчетныхЗаписей[ИдентификаторЭДО] <> КОДПовтИсп.ИдентификаторТекущегоУзла() Тогда
			
			Массив.Удалить(ИндексУчетнойЗаписи);
			
			Если Сообщать И Ошибки[ИдентификаторЭДО] = Неопределено Тогда
				Ошибки.Вставить(ИдентификаторЭДО,
					ОшибкаСинхронизацииВДругомУзле(ИдентификаторЭДО, УзлыУчетныхЗаписей[ИдентификаторЭДО]));
			КонецЕсли;
			
		Иначе
			
			ИндексУчетнойЗаписи = ИндексУчетнойЗаписи + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Новый набор ошибок по учетным записям ЭДО.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Идентификатор учетной записи ЭДО
//    * Значение - Структура - Описание ошибки по учетной записи
//
Функция НовыйНаборОшибокПоУчетнымЗаписямЭДО()
	
	Ошибки = Новый Соответствие;
	Возврат Ошибки;
	
КонецФункции

Функция ОшибкаСинхронизацииВДругомУзле(ИдентификаторЭДО, УзелОбменаУчетнойЗаписи)
	
	ПредставлениеУзлаОбмена = КОДПовтИсп.УзелПредставлениеПоИдентификатору(Строка(УзелОбменаУчетнойЗаписи));
	
	ПодробрноеОписание = СтрШаблон(
		НСтр("ru = 'Обмен учетной записью %1 происходит в узле %2. Для обмена по ЭДО перейдите в узел %2 и выполните синхронизацю там.'"),
		ИдентификаторЭДО,
		ПредставлениеУзлаОбмена);
	КраткоеОписание = СтрШаблон(
		НСтр("ru = 'Обмен учетной записью %1 происходит в узле %2.'"),
		ИдентификаторЭДО,
		ПредставлениеУзлаОбмена);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
		ОбменСКонтрагентамиДОХолдингКлиентСервер.ПредставлениеОшибкиСинхронизацииЭДО(),
		ОбменСКонтрагентамиДОХолдингКлиентСервер.ВидОшибкиСинхронизацияВДругомУзле(),
		ПодробрноеОписание,
		КраткоеОписание);
	
	Возврат Ошибка;
	
КонецФункции

#КонецОбласти

#Область НастройкиЭДО

Процедура НастройкиОтраженияДокументовВУчетеУстановитьВидимостьДоступность(Форма, ТекстПредупреждения)
	
	Элементы = Форма.Элементы;
	
	Форма.ТолькоПросмотр = Истина;
	
	Элементы.ФормаУдалить.Доступность = Ложь;
	
	СоздатьНастроитьНадписьОбменаВДругомУзле(Форма, ТекстПредупреждения, Элементы.ПанельКонтекстныхНовостей);
	
КонецПроцедуры

Процедура НастройкиОтправкиДокументовУстановитьВидимостьДоступность(Форма, ТекстПредупреждения);
	
	Элементы = Форма.Элементы;
	
	Форма.ТолькоПросмотр = Истина;
	
	Элементы.ФормаОтправитьКаталогПоСоглашению.Доступность = Ложь;
	Элементы.ФормаСформироватьСоглашениеПоШаблону.Доступность = Ложь;
	Элементы.ФормаУдалить.Доступность = Ложь;
	
	СоздатьНастроитьНадписьОбменаВДругомУзле(Форма, ТекстПредупреждения, Элементы.ПанельКонтекстныхНовостей);
	
КонецПроцедуры

// Ограничивает доступность констант формы панели администрирования БЭД.
// 
// Параметры:
//  Форма - см. Обработка.ПанельАдминистрированияБЭД.Форма.ОбщиеНастройки
Процедура ПанельАдминистрированияБЭДОграничитьИзменениеКонстант(Форма)
	
	Если КОДСервер.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьНастроитьНадписьОБлокировкеКонстант(Форма, Форма.Элементы.ЗаголовокГруппаУправлениеОбменомЭД);
	
	ИменаБлокируемыхКонстант = ИменаКонстантБлокируемыхВДочернемУзлеКОД();
	
	БлокируемыеЭлементы = ЭлементыБлокируемыхКонстантПанелиАдминистрированияБЭД(Форма, ИменаБлокируемыхКонстант);
	
	Для Каждого Элемент Из БлокируемыеЭлементы Цикл
		Элемент.Доступность = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#Область ОграничениеДоступностиКонстантКОД

// Создает надпись о ограничении редактирования констант в подчиненном узле
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  СледующийЭлемент - ГруппаФормы - Элемент, перед которым необходимо поместить надпись.
Процедура СоздатьНастроитьНадписьОБлокировкеКонстант(Форма, СледующийЭлемент)
	
	ПараметрыЭлементов = ОбменСКонтрагентамиДОХолдингКлиентСервер.ПараметрыЭлементовОграниченияРедактированияНастроек();
	
	ГруппаНадписи = Форма.Элементы.Найти(ПараметрыЭлементов.ИмяГруппы); // ГруппаФормы
	Если ГруппаНадписи = Неопределено Тогда
		ГруппаНадписи = Форма.Элементы.Вставить(
			ПараметрыЭлементов.ИмяГруппы, Тип("ГруппаФормы"),Форма, СледующийЭлемент);
	КонецЕсли;
	
	ГруппаНадписи.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНадписи.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаНадписи.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаНадписи.ОтображатьЗаголовок = Ложь;
	ГруппаНадписи.ЦветФона = ЦветаСтиля.ОбъектПомеченНаУдаление;
	ГруппаНадписи.РастягиватьПоГоризонтали = Истина;
	
	КартинкаНадписи = Форма.Элементы.Найти(ПараметрыЭлементов.ИмяКартинки);
	Если КартинкаНадписи = Неопределено Тогда
		КартинкаНадписи = Форма.Элементы.Добавить(
			ПараметрыЭлементов.ИмяКартинки, Тип("ДекорацияФормы"), ГруппаНадписи);
	КонецЕсли;
	
	КартинкаНадписи.Вид = ВидДекорацииФормы.Картинка;
	КартинкаНадписи.Картинка = БиблиотекаКартинок.ИнформацияПоНедоступнымПолям;
	
	Надпись = Форма.Элементы.Найти(ПараметрыЭлементов.ИмяНадписи);
	Если Надпись = Неопределено Тогда
		Надпись = Форма.Элементы.Добавить(
			ПараметрыЭлементов.ИмяНадписи, Тип("ДекорацияФормы"), ГруппаНадписи);
	КонецЕсли;
	
	Надпись.Вид = ВидДекорацииФормы.Надпись;
	Надпись.Заголовок = ПараметрыЭлементов.Надпись;
	Надпись.РастягиватьПоГоризонтали = Истина;
	Надпись.АвтоМаксимальнаяШирина = Ложь;
	
КонецПроцедуры

// Имена констант блокируемых в дочернем узле КОД.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя константы, блокируемой в дочернем узле
//    * Значение - Булево - Истина, если изменение константы необходимо блокировать в данном узле
Функция ИменаКонстантБлокируемыхВДочернемУзлеКОД()
	
	ИменаКонстант = Новый Соответствие();
	Для Каждого ТипМетаданных Из Метаданные.ОпределяемыеТипы.КонстантыКОД.Тип.Типы() Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипМетаданных);
		Если Не ОбщегоНазначения.ЭтоКонстанта(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаКонстант[ОбъектМетаданных.Имя] = Истина;
		
	КонецЦикла;
	
	Возврат ИменаКонстант;
	
КонецФункции

// Элементы блокируемых констант панели администрирования БЭД.
// 
// Параметры:
//  Форма - см. Обработка.ПанельАдминистрированияБЭД.Форма.ОбщиеНастройки
//  ИменаБлокируемыхКонстант - см. ИменаКонстантБлокируемыхВДочернемУзлеКОД
// 
// Возвращаемое значение:
//  Массив Из ПолеФормы
Функция ЭлементыБлокируемыхКонстантПанелиАдминистрированияБЭД(Форма, ИменаБлокируемыхКонстант)
	
	БлокируемыеЭлементы = Новый Массив(); // Массив Из ПолеФормы
	
	Для Каждого Элемент Из Форма.Элементы Цикл
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, "ПутьКДанным") Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьДанныхЭлемента = Элемент.ПутьКДанным;
		Если Не СтрНачинаетсяС(ПутьДанныхЭлемента, "Константа_") Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКонстантыЭлемента = СтрЗаменить(ПутьДанныхЭлемента, "Константа_", "");
		Если ИменаБлокируемыхКонстант[ИмяКонстантыЭлемента] <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		БлокируемыеЭлементы.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат БлокируемыеЭлементы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ИнтерфейсДокументовЭДО

Процедура ТекущиеДелаЭДОУстановитьВидимостьДоступность(Форма, ТекстПредупреждения, СкрытьКнопкуОбмена)
	
	Элементы = Форма.Элементы;
	
	Если СкрытьКнопкуОбмена Тогда
		Элементы.ОтправитьИПолучитьЭД.Видимость = Ложь;
	КонецЕсли;
	
	СоздатьНастроитьНадписьОбменаВДругомУзле(Форма, ТекстПредупреждения, Форма.Элементы.ПанельКонтекстныхНовостей);
	
КонецПроцедуры

Процедура ТекущиеДелаЭДОУстановитьНедоступныеКоманды(Форма)
	
	НедоступныеКоманды = Форма.НедоступныеКоманды; // Массив Из Строка
	
	НедоступныеКоманды.Добавить("ОтправитьЭД");
	НедоступныеКоманды.Добавить("ОтправитьПриглашения");
	НедоступныеКоманды.Добавить("УтвердитьПодписатьИОтправитьВх");
	НедоступныеКоманды.Добавить("УтвердитьПодписатьИОтправитьИсх");
	НедоступныеКоманды.Добавить("СформироватьПодписатьИОтправить");
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределениеМетодовКОД

Функция ОсобоеИмяПоляВладельцаБЭД(ТипДанных)
	
	ДанныеОбъектов = ДанныеКОДОбъектовБЭД();
	
	ДанныеОбъекта = ДанныеОбъектов.Получить(ТипДанных.Наименование);
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяПоляПереопределенное = ДанныеОбъекта.ИмяПоляВладельца;
	Если ИмяПоляПереопределенное <> "" Тогда
		Возврат ИмяПоляПереопределенное;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ОсобоеИмяПоляВладельцаДО(ТипДанных)
	
	ДанныеОбъектов = ДанныеКОДОбъектовДО();
	
	ДанныеОбъекта = ДанныеОбъектов.Получить(ТипДанных.Наименование);
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяПоляПереопределенное = ДанныеОбъекта.ИмяПоляВладельца;
	Если ИмяПоляПереопределенное <> "" Тогда
		Возврат ИмяПоляПереопределенное;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ВариантыРазмещенияОбъектаБЭД(ТипДанных)
	
	ДанныеОбъектов = ДанныеКОДОбъектовБЭД();
	
	ДанныеОбъекта = ДанныеОбъектов.Получить(ТипДанных.Наименование);
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ВариантыПереопределенные = ДанныеОбъекта.ВариантыРазмещения;
	Если ВариантыПереопределенные.Количество() > 0 Тогда
		Возврат ВариантыПереопределенные;
	КонецЕсли;
	
	Возврат Новый Массив();
	
КонецФункции

Функция ВариантыРазмещенияОбъектаДО(ТипДанных)
	
	ДанныеОбъектов = ДанныеКОДОбъектовДО();
	
	ДанныеОбъекта = ДанныеОбъектов.Получить(ТипДанных.Наименование);
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ВариантыПереопределенные = ДанныеОбъекта.ВариантыРазмещения;
	Если ВариантыПереопределенные.Количество() > 0 Тогда
		Возврат ВариантыПереопределенные;
	КонецЕсли;
	
	Возврат Новый Массив();
	
КонецФункции

// Данные КОД объектов БЭД.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта КОД
//    * Значение - см. НовыеДанныеКОДОбъекта
//
Функция ДанныеКОДОбъектовБЭД()
	
	ДанныеОбъектов = Новый Соответствие();
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ЖурналДействийПоЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ЭлектронныйДокумент";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "КонтрольОтраженияВУчетеЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ЭлектронныйДокумент";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "КонтрольПроведенияУчетныхДокументовЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ЭлектронныйДокумент";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "КонтрольСопоставленияНоменклатурыЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ЭлектронныйДокумент";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "МашиночитаемыеДоверенностиСообщений";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ПодписанныйОбъект";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "МашиночитаемыеДоверенностиЭД";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ЭлектронныйДокумент";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "НеобрабатываемыеПакетыЭД";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ПакетЭД";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ОбъектыТранспортныхКонтейнеровЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "Объект";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ОбъектыУчетаДокументовЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ОбъектУчета";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ПакетыДокументовЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ПодписываемыеВидыЭД";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "СертификатЭП";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ПравилаПоискаПоЧастиНаименованияБЭД";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "Владелец";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ПроверкиЭлектронныхПодписейЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ЭлектронныйДокумент";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ПростыеЭлектронныеПодписи";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ПодписанныйОбъект";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "РезультатыПроверкиМЧДОператором";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ПодписанныйОбъект";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "СведенияОПрочтенииДокументовЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "Объект";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "СоставПакетовДокументовЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ЭлектронныйДокумент";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "СостояниеПодписанияЭД";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "Объект";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "СостоянияДокументовЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ЭлектронныйДокумент";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "СостоянияПоОбъектамУчетаЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "СсылкаНаОбъект";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ТекущиеОтправляемыеТранспортныеКонтейнерыЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ТранспортныйКонтейнер";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ЭлектронныеПодписиПоМЧД";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ПодписанныйОбъект";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "СообщениеЭДОПрисоединенныеФайлы";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().Справочник;
	ДанныеОбъекта.ИмяПоляВладельца = "ВладелецФайла";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ТранспортныйКонтейнерЭДОПрисоединенныеФайлы";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().Справочник;
	ДанныеОбъекта.ИмяПоляВладельца = "ВладелецФайла";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "СообщениеЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().Документ;
	ДанныеОбъекта.ИмяПоляВладельца = "ЭлектронныйДокумент";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ТранспортныйКонтейнерЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().Документ;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ЭлектронныйДокументВходящийЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().Документ;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ЭлектронныйДокументИсходящийЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().Документ;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	Возврат ДанныеОбъектов;
	
КонецФункции

// Данные КОД объектов ДО вокруг БЭД.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта КОД
//    * Значение - см. НовыеДанныеКОДОбъекта
//
Функция ДанныеКОДОбъектовДО()
	ДанныеОбъектов = Новый Соответствие();
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ДокументыАннулирования";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ТолькоВИсточнике);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ДокументыЭДОКСозданиюВДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ТолькоВИсточнике);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ОчередьСозданияОбъектовЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ТолькоВИсточнике);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ОшибкиЭДОКИсправлению";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ТолькоВИсточнике);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ПакетыЭДОДокументооборот";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ТолькоВИсточнике);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "СоставПакетовЭДОДокументооборот";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ТолькоВИсточнике);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "СостояниеДокументовПоЭДО";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ТолькоВИсточнике);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	Возврат ДанныеОбъектов;
	
КонецФункции

// Добавляет данные объекта в набор данных объектов
// 
// Параметры:
//  ДанныеОбъектов - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Полное имя объекта метаданных типа "Справочник.ДокументыПредприятия"
//    * Значение см. НовыеДанныеКОДОбъекта
//  ДанныеКОДОбъекта см. НовыеДанныеКОДОбъекта
Процедура ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеКОДОбъекта)
	
	КлючОбъекта = СтрШаблон("%1.%2", ДанныеКОДОбъекта.ТипМетаданного, ДанныеКОДОбъекта.ИмяМетаданого);
	
	ДанныеОбъектов.Вставить(КлючОбъекта, ДанныеКОДОбъекта);
	
КонецПроцедуры

// Новые данные КОД объекта.
// 
// Возвращаемое значение:
//  Структура:
// * ТипМетаданного - Строка - одно из значений ТипыМетаданных
// * ИмяМетаданого - Строка
// * ИмяПоляВладельца - Строка
// * ВариантыРазмещения - Массив Из ПеречислениеСсылка.РазмещениеДанныхВУзлахКОД
Функция НовыеДанныеКОДОбъекта()
	
	ДанныеКОДВладельца = Новый Структура;
	ДанныеКОДВладельца.Вставить("ТипМетаданного", ТипыМетаданных().Справочник);
	ДанныеКОДВладельца.Вставить("ИмяМетаданого", "");
	ДанныеКОДВладельца.Вставить("ИмяПоляВладельца", "");
	ДанныеКОДВладельца.Вставить("ВариантыРазмещения", Новый Массив());
	
	Возврат ДанныеКОДВладельца;
	
КонецФункции

Функция ТипыМетаданных()
	
	ТипыМетаданных = Новый Структура;
	ТипыМетаданных.Вставить("Справочник", "Справочник");
	ТипыМетаданных.Вставить("Документ", "Документ");
	ТипыМетаданных.Вставить("РегистрСведений", "РегистрСведений");
	
	Возврат ТипыМетаданных;
	
КонецФункции

#Область ОпределениеАдресатовДанных

#Область АдресатыДокументовЭДО

// Адресаты документов ЭДО.
// 
// Параметры:
//  ДокументыЭДО - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Докумен ЭДО
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция АдресатыДокументовЭДО(ДокументыЭДО)
	
	ДокументыДОПоДокументамЭДО = ВсеСвязанныеДокументыДОДокументовЭДО(ДокументыЭДО);
	
	ДокументыДО = Новый Массив();
	Для Каждого Элемент Из ДокументыДОПоДокументамЭДО Цикл
		ДокументыДОДокументаЭДО = Элемент.Значение;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыДО, ДокументыДОДокументаЭДО, Истина);
	КонецЦикла;
	
	ПараметрыПолученияАдресатов = ДелопроизводствоХолдинг.НовыеПараметрыОпределенияАдресатовДокументов();
	АдресатыДокументовДО = АдресатыДокументовДО(ДокументыДО, ПараметрыПолученияАдресатов);
	УзлыОбработкиЭДО = УзлыОбработкиДокументовЭДО(ДокументыЭДО);
	
	ЦентральныйУзел = КОДСервер.ЦентральныйУзел();
	
	АдресатыДокументовЭДО = Новый Соответствие;
	Для Каждого ДокументЭДО Из ДокументыЭДО Цикл
		
		УзлыДокумента = Новый Массив; // Массив Из СправочникСсылка.УзлыКОД
		АдресатыДокументовЭДО[ДокументЭДО] = УзлыДокумента;
		
		ДокументыДОДокументаЭДО = ДокументыДОПоДокументамЭДО[ДокументЭДО];
		Для Каждого ДокументДО Из ДокументыДОДокументаЭДО Цикл
			УзлыДокументаДО = АдресатыДокументовДО[ДокументДО];
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УзлыДокумента, УзлыДокументаДО);
		КонецЦикла;
		
		УзелОбработки = УзлыОбработкиЭДО[ДокументЭДО]; // СправочникСсылка.УзлыКОД
		Если УзелОбработки <> ЦентральныйУзел Тогда
			УзлыДокумента.Добавить(УзелОбработки);
		КонецЕсли;
		
		УзлыДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(УзлыДокумента);
		
	КонецЦикла;
	
	Возврат АдресатыДокументовЭДО;
	
КонецФункции

// Все связанные документы ДО по документам ЭДО
// 
// Параметры:
//  ДокументыЭДО - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Докумен ЭДО
//    * Значение - Массив Из ОпределяемыйТип.ДокументДОДляЭДО
//
Функция ВсеСвязанныеДокументыДОДокументовЭДО(ДокументыЭДО)
	
	ИдентификаторыПакетовДокументов = ИдентификаторыПакетовДокументовЭДО(ДокументыЭДО);
	ИдентификаторыПакетов = Новый Массив; // Массив Из УникальныйИдентификатор
	Для Каждого Элемент Из ИдентификаторыПакетовДокументов Цикл
		ИдентификаторПакета = Элемент.Значение; // УникальныйИдентификатор
		Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
			ИдентификаторыПакетов.Добавить(ИдентификаторПакета);
		КонецЕсли;
	КонецЦикла;
	
	СоставПакетов = СоставПакетовДокументовБЭД(ИдентификаторыПакетов);
	
	РасширенныйНаборДокументовЭДО = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РасширенныйНаборДокументовЭДО, ДокументыЭДО);
	Для Каждого Элемент Из СоставПакетов Цикл
		СоставПакета = Элемент.Значение; // Массив
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РасширенныйНаборДокументовЭДО, СоставПакета);
	КонецЦикла;
	
	ДокументыДОРасширенногоНабора = Новый Соответствие();
	ВыборкаДокументовДО = ВыборкаСвязанныхДокументовДОДокументовЭДО(РасширенныйНаборДокументовЭДО);
	Пока ВыборкаДокументовДО.Следующий() Цикл
		
		НаборДокументовДО = ДокументыДОРасширенногоНабора[ВыборкаДокументовДО.ДокументЭДО]; // Массив Из ОпределяемыйТип.ДокументДОДляЭДО
		Если НаборДокументовДО = Неопределено Тогда
			НаборДокументовДО = Новый Массив();
			ДокументыДОРасширенногоНабора[ВыборкаДокументовДО.ДокументЭДО] = НаборДокументовДО;
		КонецЕсли;
		
		НаборДокументовДО.Добавить(ВыборкаДокументовДО.ДокументДО);
		
	КонецЦикла;
	
	ДокументыДОДокументовЭДО = Новый Соответствие();
	Для Каждого ДокументЭДО Из ДокументыЭДО Цикл
		
		ДокументыДО = Новый Массив;
		ДокументыДОДокументовЭДО[ДокументЭДО] = ДокументыДО;
		
		ДокументыСвязанныеНапрямую = ДокументыДОРасширенногоНабора[ДокументЭДО]; // Массив
		Если ДокументыСвязанныеНапрямую <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыДО, ДокументыСвязанныеНапрямую);
		КонецЕсли;
		
		ИдентификаторПакета = ИдентификаторыПакетовДокументов[ДокументЭДО];
		Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДокументСопакетник Из СоставПакетов[ИдентификаторПакета] Цикл
			
			Если ДокументСопакетник = ДокументЭДО Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументыСвязанныеЧерезПакет = ДокументыДОРасширенногоНабора[ДокументСопакетник]; // Массив
			Если ДокументыСвязанныеЧерезПакет <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыДО, ДокументыСвязанныеЧерезПакет);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументыДОДокументовЭДО;
	
КонецФункции

Функция ИдентификаторыПакетовДокументовЭДО(ДокументыЭДО)
	
	ИдентификаторыПакетовДокументов = Новый Соответствие();
	Для Каждого ДокументЭДО Из ДокументыЭДО Цикл
		ИдентификаторыПакетовДокументов[ДокументЭДО] = УникальныйИдентификаторПустой();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент КАК ДокументЭДО,
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета КАК ИдентификаторПакета
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент В (&ДокументыЭДО)";
	Запрос.УстановитьПараметр("ДокументыЭДО", ДокументыЭДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ИдентификаторПакета) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыПакетовДокументов[Выборка.ДокументЭДО] = Выборка.ИдентификаторПакета;
		
	КонецЦикла;
	
	Возврат ИдентификаторыПакетовДокументов;
	
КонецФункции

// Состав пакетов документов БЭД.
// 
// Параметры:
//  ИдентификаторыПакетов - Массив Из УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - 
//
Функция СоставПакетовДокументовБЭД(ИдентификаторыПакетов)
	
	СоставПакетов = Новый Соответствие();
	Для Каждого ИдентификаторПакета Из ИдентификаторыПакетов Цикл
		СоставПакетов[ИдентификаторПакета] = Новый Массив();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета КАК ИдентификаторПакета,
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент КАК ДокументЭДО
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета В (&ИдентификаторыПакетов)";
	Запрос.УстановитьПараметр("ИдентификаторыПакетов", ИдентификаторыПакетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоставПакета = СоставПакетов[Выборка.ИдентификаторПакета]; // Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		СоставПакета.Добавить(Выборка.ДокументЭДО);
	КонецЦикла;
	
	Возврат СоставПакетов;
	
КонецФункции

Функция ВыборкаСвязанныхДокументовДОДокументовЭДО(ДокументыЭДО)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ДокументЭДО,
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ДокументДО
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент В (&ДокументыЭДО)
		|	И ОбъектыУчетаДокументовЭДО.ОбъектУчета ССЫЛКА Справочник.ДокументыПредприятия";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументыЭДО", ДокументыЭДО);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Узлы в которых должен выполняться обмен по документам ЭДО
// 
// Параметры:
//  ДокументыЭДО - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
//    * Значение - СправочникСсылка.УзлыКОД
//
Функция УзлыОбработкиДокументовЭДО(ДокументыЭДО)
	
	УчетныеЗаписиДокументов = УчетныеЗаписиЭДОДокументовЭДО(ДокументыЭДО);
	
	УчетныеЗаписи = Новый Массив(); // Массив Из Строка
	Для Каждого Элемент Из УчетныеЗаписиДокументов Цикл
		УчетнаяЗапись = Элемент.Значение; // Строка
		УчетныеЗаписи.Добавить(УчетнаяЗапись);
	КонецЦикла;
	УчетныеЗаписи = ОбщегоНазначенияКлиентСервер.СвернутьМассив(УчетныеЗаписи);
	
	ИдентификаторыУзловУчеток = ИдентификаторыУзловУчетныхЗаписейЭДО(УчетныеЗаписи);
	
	УзлыКОДДокументов = Новый Соответствие();
	Для Каждого Документ Из ДокументыЭДО Цикл
		
		УчетнаяЗапись = УчетныеЗаписиДокументов[Документ];
		Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			УзлыКОДДокументов[Документ] = КОДСервер.ЦентральныйУзел();
			Продолжить;
		КонецЕсли;
		
		ИдентификаторУзлаУчетнойЗаписи = ИдентификаторыУзловУчеток[УчетнаяЗапись];
		Если Не ЗначениеЗаполнено(ИдентификаторУзлаУчетнойЗаписи) Тогда
			УзлыКОДДокументов[Документ] = КОДСервер.ЦентральныйУзел();
			Продолжить;
		КонецЕсли;
		
		УзлыКОДДокументов[Документ] = КОДПовтИсп.УзелКОДПоИдентификатору(Строка(ИдентификаторУзлаУчетнойЗаписи));
		
	КонецЦикла;
	
	Возврат УзлыКОДДокументов;
	
КонецФункции

// Учетные записи ЭДО Документов ЭДО.
// 
// Параметры:
//  ДокументыЭДО - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
//    * Значение - Строка
//
Функция УчетныеЗаписиЭДОДокументовЭДО(ДокументыЭДО)
	
	УчетныеЗаписи = Новый Соответствие();
	Для Каждого Документ Из ДокументыЭДО Цикл
		УчетныеЗаписи[Документ] = "";
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ДокументЭДО,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК УчетнаяЗапись
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ДокументыЭДО)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК Поле1,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации КАК Поле2
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ДокументыЭДО)";
	Запрос.УстановитьПараметр("ДокументыЭДО", ДокументыЭДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УчетныеЗаписи[Выборка.ДокументЭДО] = Выборка.УчетнаяЗапись;
	КонецЦикла;
	
	Возврат УчетныеЗаписи;
	
КонецФункции

#КонецОбласти

#Область АдресатыТранспортныхКонтейнеровЭДО

// Адресаты транспортных контейнеров ЭДО.
// 
// Параметры:
//  ТранспортныеКонтейнеры - Массив Из ДокументСсылка.ТранспортныйКонтейнерЭДО
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ДокументСсылка.ТранспортныйКонтейнерЭДО
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция АдресатыТранспортныхКонтейнеровЭДО(ТранспортныеКонтейнеры)
	
	ВыборкаДокументовЭДО = ВыборкаДокументовЭДОКонтейнеровЭДО(ТранспортныеКонтейнеры);
	
	ДокументыЭДО = Новый Массив; // Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	ДокументыЭДОТранспортныхКонтейнеров = Новый Соответствие();
	
	Пока ВыборкаДокументовЭДО.Следующий() Цикл
		
		Контейнер = ВыборкаДокументовЭДО.ТранспортныйКонтейнер;
		ДокументЭДО = ВыборкаДокументовЭДО.ДокументЭДО;
		
		ДокументыЭДО.Добавить(ДокументЭДО);
		
		ДокументыЭДОКонтейнера = ДокументыЭДОТранспортныхКонтейнеров[Контейнер]; // Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		Если ДокументыЭДОКонтейнера = Неопределено Тогда
			ДокументыЭДОКонтейнера = Новый Массив();
			ДокументыЭДОТранспортныхКонтейнеров[Контейнер] = ДокументыЭДОКонтейнера;
		КонецЕсли;
		
		ДокументыЭДОКонтейнера.Добавить(ДокументЭДО);
		
	КонецЦикла;
	
	АдресатыПоДокументамЭДО = АдресатыДокументовЭДО(ДокументыЭДО);
	
	АдресатыКонтейнеров = Новый Соответствие();
	Для Каждого Контейнер Из ТранспортныеКонтейнеры Цикл
		
		АдресатыКонтейнера = Новый Массив;
		АдресатыКонтейнеров[Контейнер] = АдресатыКонтейнера;
		
		ДокументыЭДОКонтейнера = ДокументыЭДОТранспортныхКонтейнеров[Контейнер];
		Если ДокументыЭДОКонтейнера = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДокументЭДО Из ДокументыЭДОКонтейнера Цикл
			
			АдресатыДокументаЭДО = АдресатыПоДокументамЭДО[ДокументЭДО];
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(АдресатыКонтейнера, АдресатыДокументаЭДО, Истина);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат АдресатыКонтейнеров;
	
КонецФункции

// Выборка документов ЭДОКонтейнеров ЭДО.
// 
// Параметры:
//  ТранспортныеКонтейнеры - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//    * ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
//    * ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Докумен ЭДО
//
Функция ВыборкаДокументовЭДОКонтейнеровЭДО(ТранспортныеКонтейнеры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер КАК ТранспортныйКонтейнер,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ДокументЭДО
		|ИЗ
		|	РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО КАК ОбъектыТранспортныхКонтейнеровЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ОбъектыТранспортныхКонтейнеровЭДО.Объект = СообщениеЭДО.Ссылка
		|ГДЕ
		|	ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер В (&ТранспортныеКонтейнеры)";
	Запрос.УстановитьПараметр("ТранспортныеКонтейнеры", ТранспортныеКонтейнеры);
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

#КонецОбласти

#Область АдресатыПакетыДокументовЭДО

Функция АдресатыПакетыДокументовЭДО(КлючиЗаписей)
	
	АдресатыПоКлючам = Новый Соответствие;
	
	ПакетыПоКлючам = ПакетыБЭДПоКлючамЗаписейРегистраПакетов(КлючиЗаписей);
	
	ДокументыЭДО = Новый Массив();
	Для Каждого ЭлементКлюча Из ПакетыПоКлючам Цикл
		ПакетыКлюча = ЭлементКлюча.Значение;
		Для Каждого ЭлементПакетов Из ПакетыКлюча Цикл
			СоставПакета = ЭлементПакетов.Значение;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыЭДО, СоставПакета, Истина);
		КонецЦикла;
	КонецЦикла;
	
	АдресатыДокументовЭДО = АдресатыДокументовЭДО(ДокументыЭДО);
	
	Для Каждого Ключ Из КлючиЗаписей Цикл
		
		АдресатыКлюча = Новый Массив();
		АдресатыПоКлючам[Ключ] = АдресатыКлюча;
		
		ПакетыКлюча = ПакетыПоКлючам[Ключ];
		Для Каждого Элемент Из ПакетыКлюча Цикл
			
			СоставПакета = Элемент.Значение;
			Для Каждого Документ Из СоставПакета Цикл
				АдресатыДокумента = АдресатыДокументовЭДО[Документ];
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(АдресатыКлюча, АдресатыДокумента, Истина);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат АдресатыПоКлючам;
	
КонецФункции

// Состав пакетов ЭДО по ключам записи регистра пакетов.
// 
// Параметры:
//  КлючиЗаписей - Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных - фиктивная ссылка на справочник ИОМ
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ИдентификаторыОбъектовМетаданных - фиктивная ссылка на справочник ИОМ
//    * Значение - Соответствие Из КлючИЗначение:
//      ** Ключ - УникальныйИдентификатор - ИдентификаторПакета
//      ** Значение - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - 
//
Функция ПакетыБЭДПоКлючамЗаписейРегистраПакетов(КлючиЗаписей)
	
	ПакетыПоКлючам = Новый Соответствие();
	Для Каждого Ключ Из КлючиЗаписей Цикл
		ПакетыПоКлючам[Ключ] = Новый Соответствие();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПакетыДокументовЭДО.ИдентификаторОтметкиВремени КАК КлючЗаписи,
		|	ПакетыДокументовЭДО.ИдентификаторПакета КАК ИдентификаторПакета,
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент КАК ДокументЭДО
		|ИЗ
		|	РегистрСведений.ПакетыДокументовЭДО КАК ПакетыДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|		ПО ПакетыДокументовЭДО.ИдентификаторПакета = СоставПакетовДокументовЭДО.ИдентификаторПакета
		|ГДЕ
		|	ПакетыДокументовЭДО.ИдентификаторОтметкиВремени В (&КлючиЗаписей)";
	Запрос.УстановитьПараметр("КлючиЗаписей", КлючиЗаписей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументЭДО = Выборка.ДокументЭДО;
		ИдентификаторПакета = Выборка.ИдентификаторПакета;
		КлючЗаписи = Выборка.КлючЗаписи;
		
		ПакетыДляКлюча = ПакетыПоКлючам[КлючЗаписи];
		
		СоставПакета = ПакетыДляКлюча[ИдентификаторПакета]; // Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		Если СоставПакета = Неопределено Тогда
			СоставПакета = Новый Массив;
			ПакетыДляКлюча[ИдентификаторПакета] = СоставПакета;
		КонецЕсли;
		
		СоставПакета.Добавить(ДокументЭДО);
		
	КонецЦикла;
	
	Возврат ПакетыПоКлючам;
	
КонецФункции

#КонецОбласти

#Область АдесатыДокументовДО

// Адресаты документов ДО.
// 
// Параметры:
//  ДокументыДО - Массив Из ОпределяемыйТип.ДокументДОДляЭДО
//  ПараметрыПолученияАдресатов - см. ДелопроизводствоХолдинг.НовыеПараметрыОпределенияАдресатовДокументов
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ДокументДОДляЭДО
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция АдресатыДокументовДО(ДокументыДО, ПараметрыПолученияАдресатов)
	
	УзлыДокументовПоПравилам = ДелопроизводствоХолдинг.АдресатыДокументов(ДокументыДО, ПараметрыПолученияАдресатов);
	
	УзлыДокументовПоНаличию = УзлыВКоторыхЕстьДокументыДО(ДокументыДО);
	
	УзлыДокументов = Новый Соответствие;
	Для Каждого Документ Из ДокументыДО Цикл
		
		УзлыДокумента = УзлыДокументов[Документ];
		Если УзлыДокумента = Неопределено Тогда
			УзлыДокумента = Новый Массив;
			УзлыДокументов[Документ] = УзлыДокумента;
		КонецЕсли;
		
		УзлыПоПравилам = УзлыДокументовПоПравилам[Документ];
		Если УзлыПоПравилам <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УзлыДокумента, УзлыПоПравилам);
		КонецЕсли;
		
		УзлыПоНаличию = УзлыДокументовПоНаличию[Документ]; // Массив
		Если УзлыПоНаличию <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УзлыДокумента, УзлыПоНаличию);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(УзлыДокумента);
		
	КонецЦикла;
	
	Возврат УзлыДокументов;
	
КонецФункции

// Узлы отправки документов ДО.
// 
// Параметры:
//  ДокументыДО - Массив Из ОпределяемыйТип.ДокументДОДляЭДО
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ДокументДОДляЭДО
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция УзлыОтправкиДокументовДО(ДокументыДО)
	
	УчетныеЗаписиЭДОДокументов = УчетныеЗаписиЭДОДокументовДО(ДокументыДО); // см. УчетныеЗаписиЭДОДокументовДО
	
	ИдентификаторыУчетныхЗаписей = Новый Массив;
	Для Каждого Элемент Из УчетныеЗаписиЭДОДокументов Цикл
		УчетныеЗаписиДокумента = Элемент.Значение;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыУчетныхЗаписей, УчетныеЗаписиДокумента);
	КонецЦикла;
	ИдентификаторыУчетныхЗаписей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыУчетныхЗаписей);
	
	ИдентификаторыУзловУчеток = ИдентификаторыУзловУчетныхЗаписейЭДО(ИдентификаторыУчетныхЗаписей);
	
	УзлыОтправкиДокументов = Новый Соответствие();
	Для Каждого Документ Из ДокументыДО Цикл
		
		УзлыДокумента = Новый Массив; // Массив Из СправочникСсылка.УзлыКОД
		УзлыОтправкиДокументов[Документ] = УзлыДокумента;
		
		УчетныеЗаписиДокумента = УчетныеЗаписиЭДОДокументов[Документ];
		Для Каждого УчетнаяЗапись Из УчетныеЗаписиДокумента Цикл
			ИдентификаторУзлаУчетнойЗаписи = ИдентификаторыУзловУчеток[УчетнаяЗапись];
			Если ЗначениеЗаполнено(ИдентификаторУзлаУчетнойЗаписи) Тогда
				Узел = КОДПовтИсп.УзелКОДПоИдентификатору(Строка(ИдентификаторУзлаУчетнойЗаписи));
				УзлыДокумента.Добавить(Узел);
			КонецЕсли;
		КонецЦикла;
		
		УзлыДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(УзлыДокумента);
		
	КонецЦикла;
	
	Возврат УзлыОтправкиДокументов;
	
КонецФункции

// Узлы в которых есть документы ДО.
// 
// Параметры:
//  ДокументыДО - Массив Из ОпределяемыйТип.ДокументДОДляЭДО
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ДокументДОДляЭДО
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция УзлыВКоторыхЕстьДокументыДО(ДокументыДО)
	
	ДанныеДокументовДО = ТаблицаДанныхДокументовДО(ДокументыДО);
	ТаблицаКлючейДанных = ТаблицаКлючейДанных(ДанныеДокументовДО);
	
	ТаблицаУзловДокументов = КОДОтправка.УзлыВКоторыхЕстьДанные(ТаблицаКлючейДанных);
	
	УзлыДокументовПоНаличию = Новый Соответствие();
	Для Каждого СтрокаУзла Из ТаблицаУзловДокументов Цикл
		Документ = КОДСервер.КлючОтметокВремениВФорматКлючаДанных(
			СтрокаУзла.ИдентификаторКлюча, СтрокаУзла.ТипКлюча, СтрокаУзла.Объект);
		Узел = СтрокаУзла.Узел;
		
		УзлыДокумента = УзлыДокументовПоНаличию[Документ]; // Массив Из СправочникСсылка.УзлыКОД
		Если УзлыДокумента = Неопределено Тогда
			УзлыДокумента = Новый Массив;
			УзлыДокументовПоНаличию[Документ] = УзлыДокумента;
		КонецЕсли;
		
		УзлыДокумента.Добавить(Узел);
	КонецЦикла;
	
	Возврат УзлыДокументовПоНаличию;
	
КонецФункции

// Возвращает таблицу ключей в формате отметок времени для определения адресатов.
//
// Параметры:
//	ТаблицаДанных - см. ТаблицаДанныхДокументовДО.
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* ИдентификаторКлюча - УникальныйИдентификатор - Идентификатор ключа данных в формате отметок времени.
//		* ТипКлюча -см. КОДОтправка.ОписаниеТиповИдентификаторовОбъектовМетаданных
//		* Объект - см. КОДОтправка.ОписаниеТиповИдентификаторовОбъектовМетаданных.
//
Функция ТаблицаКлючейДанных(ТаблицаДанных)
	
	КлючиДанных = Новый ТаблицаЗначений;
	КлючиДанных.Колонки.Добавить("ИдентификаторКлюча", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КлючиДанных.Колонки.Добавить("ТипКлюча", КОДОтправка.ОписаниеТиповИдентификаторовОбъектовМетаданных());
	КлючиДанных.Колонки.Добавить("Объект", КОДОтправка.ОписаниеТиповИдентификаторовОбъектовМетаданных());
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		КлючОтметокВремени =
			КОДСервер.КлючДанныхВФорматКлючаОтметокВремени(СтрокаДанных.Ключ, СтрокаДанных.Объект);
		
		СтрокаКлючей = КлючиДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКлючей, КлючОтметокВремени);
		СтрокаКлючей.Объект = СтрокаДанных.Объект;
	КонецЦикла;
	
	Возврат КлючиДанных;
	
КонецФункции

// Таблица данных документов ДО.
// 
// Параметры:
//  ДокументыДО - Массив Из ОпределяемыйТип.ДокументДОДляЭДО - Документы ДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * Ключ - ЛюбаяСсылка
//    * Объект - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений -
Функция ТаблицаДанныхДокументовДО(ДокументыДО)
	
	Данные = НоваяТаблицаДанных();
	
	Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.ДокументыПредприятия);
	
	Для Каждого Документ Из ДокументыДО Цикл
		СтрокаДанных = Данные.Добавить();
		СтрокаДанных.Ключ = Документ;
		СтрокаДанных.Объект = Объект;
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

// Новая таблица данных
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица данных:
// * Ключ - ЛюбаяСсылка
// * Объект - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений -
Функция НоваяТаблицаДанных()
	
	ТипОбъекта = КОДОтправка.ОписаниеТиповИдентификаторовОбъектовМетаданных();
	ТипКлюча = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
	
	Данные = Новый ТаблицаЗначений();
	Данные.Колонки.Добавить("Ключ", ТипКлюча);
	Данные.Колонки.Добавить("Объект", ТипОбъекта);
	
	Возврат Данные;
	
КонецФункции

// Возвращает учетные записи ЭДО документов ДО
// 
// Параметры:
//  ДокументыДО - Массив Из ОпределяемыйТип.ДокументДОДляЭДО
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ДокументДОДляЭДО
//    * Значение - Массив из Строка - Массив идентификаторов учетных записей ЭДО, по которым происходит обмен ЭДО
//
Функция УчетныеЗаписиЭДОДокументовДО(ДокументыДО)
	
	УчетныеЗаписиДокументов = Новый Соответствие;
	
	ДокументыЭДОПоДокументам = ОбменЭДОДокументооборот.ДокументыЭДОДокументовДО(ДокументыДО, Ложь);
	
	НаборДокументовЭДО = Новый Массив(); // Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	Для Каждого Элемент Из ДокументыЭДОПоДокументам Цикл
		ДокументыЭДОДокумента = Элемент.Значение;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаборДокументовЭДО, ДокументыЭДОДокумента);
	КонецЦикла;
	
	УчетныеЗаписиПоДокументамЭДО = УчетныеЗаписиЭДОДокументовЭДО(НаборДокументовЭДО);
	Для Каждого Документ Из ДокументыДО Цикл
		
		УчетныеЗаписиДокумента = Новый Массив(); // Массив Из Строка
		УчетныеЗаписиДокументов[Документ] = УчетныеЗаписиДокумента;
		
		ДокументыЭДОДокумента = ДокументыЭДОПоДокументам[Документ];
		Для Каждого ДокументЭДО Из ДокументыЭДОДокумента Цикл
			УчетнаяЗапись = УчетныеЗаписиПоДокументамЭДО[ДокументЭДО];
			Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
				УчетныеЗаписиДокумента.Добавить(УчетнаяЗапись);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат УчетныеЗаписиДокументов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДополнениеСопровождающихДанных

#Область ДокументыДО

// Дополняет сопровождающие данные документов ДО
// 
// Параметры:
//  ДокументыДО - Массив Из СправочникСсылка.ДокументыПредприятия
//  СопровождающиеДанные - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Полное имя объекта метаданных
//    * Значение - Массив Из ЛюбаяСсылка - Сопровождающие данные
Процедура ДополнитьСопровождающиеДанныеДокументовДО(ДокументыДО, СопровождающиеДанные)
	
	ДокуметыЭДОДокументовДО = ОбменЭДОДокументооборот.ДокументыЭДОДокументовДО(ДокументыДО, Ложь);
	ВходящиеЭДОКСопровождающимДанным = Новый Массив(); // Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
	ИсходящиеЭДОКСопровождающимДанным = Новый Массив(); // Массив Из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	Для Каждого ЭлементДокументовЭДО Из ДокуметыЭДОДокументовДО Цикл
		
		ДокументыЭДО = ЭлементДокументовЭДО.Значение;
		
		Для Каждого ДокуметнЭДО Из ДокументыЭДО Цикл
			
			Если Не ЗначениеЗаполнено(ДокуметнЭДО) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ДокуметнЭДО) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
				ВходящиеЭДОКСопровождающимДанным.Добавить(ДокуметнЭДО);
			ИначеЕсли ТипЗнч(ДокуметнЭДО) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
				ИсходящиеЭДОКСопровождающимДанным.Добавить(ДокуметнЭДО);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВходящиеЭДОКСопровождающимДанным.Количество() > 0 Тогда
		
		СопровождающиеВходящиеЭДО = СопровождающиеДанные[ИмяМетаданногоВходящегоДокументаЭДО()]; // Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
		Если СопровождающиеВходящиеЭДО = Неопределено Тогда
			СопровождающиеВходящиеЭДО = Новый Массив();
			СопровождающиеДанные[ИмяМетаданногоВходящегоДокументаЭДО()] = СопровождающиеВходящиеЭДО;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СопровождающиеВходящиеЭДО, ВходящиеЭДОКСопровождающимДанным, Истина);
		
	КонецЕсли;
	
	Если ИсходящиеЭДОКСопровождающимДанным.Количество() > 0 Тогда
		
		СопровождающиеИсходящиеЭДО = СопровождающиеДанные[ИмяМетаданногоИсходящегоДокументаЭДО()]; // Массив Из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		Если СопровождающиеИсходящиеЭДО = Неопределено Тогда
			СопровождающиеИсходящиеЭДО = Новый Массив();
			СопровождающиеДанные[ИмяМетаданногоИсходящегоДокументаЭДО()] = СопровождающиеИсходящиеЭДО;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СопровождающиеИсходящиеЭДО, ИсходящиеЭДОКСопровождающимДанным, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбъектыБЭД

// Дополняет сопровождающие данные документов ЭДО
// 
// Параметры:
//  ДокументыЭДО - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО -
//               - Массив Из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
//  СопровождающиеДанные - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Полное имя объекта метаданных
//    * Значение - Массив Из ЛюбаяСсылка - Сопровождающие данные
Процедура ДополнитьСопровождающиеДанныеДокументовЭДО(ДокументыЭДО, СопровождающиеДанные)
	
	КлючиСоставаПакетов = КлючиЗаписейСоставаПакетовБЭДПоДокументамЭДО(ДокументыЭДО);
	КлючиСоставаКСопровождающимДанным = Новый Массив(); // Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
	Для Каждого ЭлементСостваПакета Из КлючиСоставаПакетов Цикл
		КлючСоставаПакета = ЭлементСостваПакета.Значение;
		Если ЗначениеЗаполнено(КлючСоставаПакета) Тогда
			КлючиСоставаКСопровождающимДанным.Добавить(КлючСоставаПакета);
		КонецЕсли;
	КонецЦикла;
	
	Если КлючиСоставаКСопровождающимДанным.Количество() > 0 Тогда
		
		СопровождающиеКлючиСостава = СопровождающиеДанные[ИмяМетаданногоСоставаПакетовБЭД()];
		Если СопровождающиеКлючиСостава = Неопределено Тогда
			СопровождающиеКлючиСостава = Новый Массив();
			СопровождающиеДанные[ИмяМетаданногоСоставаПакетовБЭД()] = СопровождающиеКлючиСостава;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СопровождающиеКлючиСостава, КлючиСоставаКСопровождающимДанным, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Ключи записей регистра СоставПакетовДокументовЭДО по документам ЭДО.
// 
// Параметры:
//  ДокументыЭДО  - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО -
//               - Массив Из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
//    * Значение - СправочникСсылка.ИдентификаторыОбъектовМетаданных
Функция КлючиЗаписейСоставаПакетовБЭДПоДокументамЭДО(ДокументыЭДО)
	
	КлючиПоДокументам = Новый Соответствие();
	Для Каждого Документ Из ДокументыЭДО Цикл
		КлючиПоДокументам[Документ] = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент КАК ДокументЭДО,
		|	СоставПакетовДокументовЭДО.ИдентификаторОтметкиВремени КАК КлючЗаписи
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент В (&ДокументыЭДО)";
	Запрос.УстановитьПараметр("ДокументыЭДО", ДокументыЭДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КлючиПоДокументам[Выборка.ДокументЭДО] = Выборка.КлючЗаписи;
	КонецЦикла;
	
	Возврат КлючиПоДокументам;
	
КонецФункции

// Дополнить сопровождающие данные состава пакетов БЭД.
// 
// Параметры:
//  КлючиСоставаПакетов - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  СопровождающиеДанные - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - Массив Из ЛюбаяСсылка
Процедура ДополнитьСопровождающиеДанныеСоставаПакетовБЭД(КлючиСоставаПакетов, СопровождающиеДанные)
	
	ДокументыЭДОПоКлючамСостава = ДокументыЭДОПоКлючамЗаписейСоставаПакетовБЭД(КлючиСоставаПакетов);
	ВходящиеЭДОКСопровождающимДанным = Новый Массив(); // Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
	ИсходящиеЭДОКСопровождающимДанным = Новый Массив(); // Массив Из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	Для Каждого ЭлементКлючейСостава Из ДокументыЭДОПоКлючамСостава Цикл
		
		ДокументЭДО = ЭлементКлючейСостава.Значение;
		
		Если Не ЗначениеЗаполнено(ДокументЭДО) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДокументЭДО) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
			ВходящиеЭДОКСопровождающимДанным.Добавить(ДокументЭДО);
		ИначеЕсли ТипЗнч(ДокументЭДО) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
			ИсходящиеЭДОКСопровождающимДанным.Добавить(ДокументЭДО);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВходящиеЭДОКСопровождающимДанным.Количество() > 0 Тогда
		
		СопровождающиеВходящиеЭДО = СопровождающиеДанные[ИмяМетаданногоВходящегоДокументаЭДО()]; // Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
		Если СопровождающиеВходящиеЭДО = Неопределено Тогда
			СопровождающиеВходящиеЭДО = Новый Массив();
			СопровождающиеДанные[ИмяМетаданногоВходящегоДокументаЭДО()] = СопровождающиеВходящиеЭДО;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СопровождающиеВходящиеЭДО, ВходящиеЭДОКСопровождающимДанным, Истина);
		
	КонецЕсли;
	
	Если ИсходящиеЭДОКСопровождающимДанным.Количество() > 0 Тогда
		
		СопровождающиеИсходящиеЭДО = СопровождающиеДанные[ИмяМетаданногоИсходящегоДокументаЭДО()]; // Массив Из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		Если СопровождающиеИсходящиеЭДО = Неопределено Тогда
			СопровождающиеИсходящиеЭДО = Новый Массив();
			СопровождающиеДанные[ИмяМетаданногоИсходящегоДокументаЭДО()] = СопровождающиеИсходящиеЭДО;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СопровождающиеИсходящиеЭДО, ИсходящиеЭДОКСопровождающимДанным, Истина);
		
	КонецЕсли;
	
	КлючиПакетовПоКлючамСостава = КлючиПакетовБЭДПоКлючамСоставаПакетов(КлючиСоставаПакетов);
	КлючиПакетовКСопровождающимДанным = Новый Массив(); // Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
	Для Каждого ЭлементКлючаПакетов Из КлючиПакетовПоКлючамСостава Цикл
		КлючДанныхПакета = ЭлементКлючаПакетов.Значение;
		Если ЗначениеЗаполнено(КлючДанныхПакета) Тогда
			КлючиПакетовКСопровождающимДанным.Добавить(КлючДанныхПакета);
		КонецЕсли;
	КонецЦикла;
	
	Если КлючиПакетовКСопровождающимДанным.Количество() > 0 Тогда
		
		СопровождающиеКлючиПакетов = СопровождающиеДанные[ИмяМетаданногоПакетовБЭД()]; // Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
		Если СопровождающиеКлючиПакетов = Неопределено Тогда
			СопровождающиеКлючиПакетов = Новый Массив();
			СопровождающиеДанные[ИмяМетаданногоПакетовБЭД()] = СопровождающиеКлючиПакетов;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СопровождающиеКлючиПакетов, КлючиПакетовКСопровождающимДанным, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Документы ЭДО по ключам записей состава пакетов БЭД.
// 
// Параметры:
//  КлючиСоставаПакетов - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//    * Значение - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
Функция ДокументыЭДОПоКлючамЗаписейСоставаПакетовБЭД(КлючиСоставаПакетов)
	
	ДокументыПоКлючам = Новый Соответствие();
	Для Каждого КлючСостава Из КлючиСоставаПакетов Цикл
		ДокументыПоКлючам[КлючСостава] = Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ИдентификаторОтметкиВремени КАК КлючЗаписи,
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент КАК ДокументЭДО
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ИдентификаторОтметкиВремени В (&КлючиЗаписей)";
	Запрос.УстановитьПараметр("КлючиЗаписей", КлючиСоставаПакетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументыПоКлючам[Выборка.КлючЗаписи] = Выборка.ДокументЭДО;
	КонецЦикла;
	
	Возврат ДокументыПоКлючам;
	
КонецФункции

// Ключи пакетов БЭДПо ключам состава пакетов.
// 
// Параметры:
//  КлючиСоставаПакетов - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//    * Значение - СправочникСсылка.ИдентификаторыОбъектовМетаданных
Функция КлючиПакетовБЭДПоКлючамСоставаПакетов(КлючиСоставаПакетов)
	
	КлючиПакетовПоКлючамСостава = Новый Соответствие();
	Для Каждого КлючСостава Из КлючиСоставаПакетов Цикл
		КлючиПакетовПоКлючамСостава[КлючСостава] = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ИдентификаторОтметкиВремени КАК КлючСостава,
		|	ПакетыДокументовЭДО.ИдентификаторОтметкиВремени КАК КлючПакета
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыДокументовЭДО КАК ПакетыДокументовЭДО
		|		ПО ПакетыДокументовЭДО.ИдентификаторПакета = СоставПакетовДокументовЭДО.ИдентификаторПакета
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ИдентификаторОтметкиВремени В (&КлючиСоставаПакетов)";
	Запрос.УстановитьПараметр("КлючиСоставаПакетов", КлючиСоставаПакетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КлючиПакетовПоКлючамСостава[Выборка.КлючСостава] = Выборка.КлючПакета;
	КонецЦикла;
	
	Возврат КлючиПакетовПоКлючамСостава;
	
КонецФункции

// Дополняет сопровождающие данные записей регистра ПакетыДокументовЭДО
// 
// Параметры:
//  КлючиПакетовБЭД - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  СопровождающиеДанные - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Полное имя объекта метаданных
//    * Значение - Массив Из ЛюбаяСсылка - Массив сопровождающих данных
Процедура ДополнитьСопровождающиеДанныеПакетовБЭД(КлючиПакетовБЭД, СопровождающиеДанные)
	
	КлючиСоставаПоКлючамПакетов = КлючиСоставаПакетовБЭДПоКлючамПакетов(КлючиПакетовБЭД);
	КлючиСоставаКСопровождающимДанным = Новый Массив();
	Для Каждого ЭлементКлючейСостава Из КлючиСоставаПоКлючамПакетов Цикл
		КлючиСоставаПакета = ЭлементКлючейСостава.Значение;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КлючиСоставаКСопровождающимДанным, КлючиСоставаПакета);
	КонецЦикла;
	
	Если КлючиСоставаКСопровождающимДанным.Количество() > 0 Тогда
		
		СопровождающиеКлючиСостава = СопровождающиеДанные[ИмяМетаданногоСоставаПакетовБЭД()];
		Если СопровождающиеКлючиСостава = Неопределено Тогда
			СопровождающиеКлючиСостава = Новый Массив();
			СопровождающиеДанные[ИмяМетаданногоСоставаПакетовБЭД()] = СопровождающиеКлючиСостава;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СопровождающиеКлючиСостава, КлючиСоставаКСопровождающимДанным, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Ключи регистра СоставПакетовДокументовЭДО по ключам регистра ПакетыДокументовЭДО.
// 
// Параметры:
//  КлючиПакетов - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//    * Значение - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
Функция КлючиСоставаПакетовБЭДПоКлючамПакетов(КлючиПакетов)
	
	КлючиСоставаПоКлючамПакетов = Новый Соответствие();
	Для Каждого КлючПакета Из КлючиПакетов Цикл
		КлючиСоставаПоКлючамПакетов[КлючПакета] = Новый Массив();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПакетыДокументовЭДО.ИдентификаторОтметкиВремени КАК КлючПакета,
		|	СоставПакетовДокументовЭДО.ИдентификаторОтметкиВремени КАК КлючСоставаПакета
		|ИЗ
		|	РегистрСведений.ПакетыДокументовЭДО КАК ПакетыДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|		ПО ПакетыДокументовЭДО.ИдентификаторПакета = СоставПакетовДокументовЭДО.ИдентификаторПакета
		|ГДЕ
		|	ПакетыДокументовЭДО.ИдентификаторОтметкиВремени В (&КлючиПакетов)";
	Запрос.УстановитьПараметр("КлючиПакетов", КлючиПакетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КлючиСоставаПакета = КлючиСоставаПоКлючамПакетов[Выборка.КлючПакета]; // Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
		КлючиСоставаПакета.Добавить(Выборка.КлючСоставаПакета);
		
	КонецЦикла;
	
	Возврат КлючиСоставаПоКлючамПакетов;
	
КонецФункции

#КонецОбласти

// Имя метаданного документа ДО.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяМетаданногоДокументаДО()
	
	Возврат "Справочник.ДокументыПредприятия";
	
КонецФункции

// Имя метаданного входящего документа ЭДО.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяМетаданногоВходящегоДокументаЭДО()
	
	Возврат "Документ.ЭлектронныйДокументВходящийЭДО";
	
КонецФункции

// Имя метаданного исходящего документа ЭДО.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяМетаданногоИсходящегоДокументаЭДО()
	
	Возврат "Документ.ЭлектронныйДокументИсходящийЭДО";
	
КонецФункции

// Имя метаданного состава пакетов БЭД.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяМетаданногоСоставаПакетовБЭД()
	
	Возврат "РегистрСведений.СоставПакетовДокументовЭДО";
	
КонецФункции

// Имя метаданного пакетов БЭД.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяМетаданногоПакетовБЭД()
	
	Возврат "РегистрСведений.ПакетыДокументовЭДО";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УзлыКОДОбъектовЭДО

// Дополняет узлы-адресаты документов ДО узлами из которых предположительно будет отправлен документ
// 
// Параметры:
//  УзлыДокументов - Соответствие из КлючИЗначение - Узлы документов:
//    * Ключ - ОпределяемыйТип.ДокументДОДляЭДО -
//    * Значение - Массив из СправочникСсылка.УзлыКОД -
//  ПараметрыОпределенияАдресатов - см. НовыеПараметрыОпределенияАдресатовДокументовДО
Процедура ДополнитьУзлыДокументовДОУзламиОтправки(УзлыДокументов, ПараметрыОпределенияАдресатов)
	
	ДокументыДО = Новый Массив; // Массив Из ОпределяемыйТип.ДокументДОДляЭДО
	Для Каждого Элемент Из УзлыДокументов Цикл
		Документ = Элемент.Ключ;
		ДокументыДО.Добавить(Документ);
	КонецЦикла;
	
	УзлыОтправкиДокументов = УзлыОтправкиДокументовДО(ДокументыДО);
	
	ЦентральныйУзел = КОДСервер.ЦентральныйУзел();
	
	Для Каждого Элемент Из УзлыДокументов Цикл
		
		Документ = Элемент.Ключ;
		УзлыДокумента = Элемент.Значение;
		
		УзлыОтправки = УзлыОтправкиДокументов[Документ];
		
		Для Каждого Узел Из УзлыОтправки Цикл
			Если Узел <> ЦентральныйУзел Тогда
				УзлыДокумента.Добавить(Узел);
			КонецЕсли;
		КонецЦикла;
		
		УзлыДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(УзлыДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

// Транспортные контейнеры файлов.
// 
// Параметры:
//  ФайлыТранспортныхКонтейнеров - Массив Из СправочникСсылка.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
//    * Значение - ДокументСсылка.ТранспортныйКонтейнерЭДО
//
Функция ТранспортныеКонтейнерыФайлов(ФайлыТранспортныхКонтейнеров)
	
	КонтейнерыФайлов = Новый Соответствие();
	Для Каждого Файл Из ФайлыТранспортныхКонтейнеров Цикл
		КонтейнерыФайлов[Файл] = Документы.ТранспортныйКонтейнерЭДО.ПустаяСсылка();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.Ссылка КАК Файл,
		|	ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.ВладелецФайла КАК Контейнер
		|ИЗ
		|	Справочник.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы КАК ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
		|ГДЕ
		|	ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.Ссылка В (&ФайлыКонтейнеров)";
	Запрос.УстановитьПараметр("ФайлыКонтейнеров", ФайлыТранспортныхКонтейнеров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонтейнерыФайлов[Выборка.Файл] = Выборка.Контейнер;
	КонецЦикла;
	
	Возврат КонтейнерыФайлов;
	
КонецФункции

// Документы ЭДО файлов сообщений ЭДО
// 
// Параметры:
//  ФайлыСообщенийЭДО - Массив Из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//    * Значение - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - 
//
Функция ДокументыЭДОФайловСообщенийЭДО(ФайлыСообщенийЭДО)
	
	ДокументыФайлов = Новый Соответствие();
	Для Каждого Файл Из ФайлыСообщенийЭДО Цикл
		ДокументыФайлов[Файл] = Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка КАК Файл,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ДокументЭДО
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО СообщениеЭДОПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
		|ГДЕ
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка В (&ФайлыСообщений)";
	Запрос.УстановитьПараметр("ФайлыСообщений", ФайлыСообщенийЭДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументыФайлов[Выборка.Файл] = Выборка.ДокументЭДО;
	КонецЦикла;
	
	Возврат ДокументыФайлов;
	
КонецФункции

#КонецОбласти

#КонецОбласти
