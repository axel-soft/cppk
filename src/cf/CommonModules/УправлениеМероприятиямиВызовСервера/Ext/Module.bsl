////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с мероприятиями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// По части наименования формирует список для выбора участника мероприятия.
//
// Параметры:
//  Текст - часть наименования, по которому выполняется поиск.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораУчастника(Текст) Экспорт
	
	Возврат УправлениеМероприятиями.СформироватьДанныеВыбораУчастника(Текст);
	
КонецФункции

// По части наименования формирует список для выбора организатора мероприятия.
//
// Параметры:
//  Параметры - Параметры автоподбора.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораОрганизатора(Параметры) Экспорт
	
	Возврат УправлениеМероприятиями.СформироватьДанныеВыбораОрганизатора(Параметры);
	
КонецФункции

// Меняет папку для массива мероприятий на новую.
//
// Параметры:
//  МассивМероприятий - Массив - Мероприятия, у которых необходимо изменить папку.
//  НоваяПапка - СправочникСсылка.ПапкиМероприятий - Новая папка мероприятий.
//
// Возвращаемое значение:
//  Булево - Успешное изменение папки мероприятий.
//
Функция ИзменитьПапкуМероприятий(МассивМероприятий, НоваяПапка) Экспорт
	
	Возврат УправлениеМероприятиями.ИзменитьПапкуМероприятий(МассивМероприятий, НоваяПапка);
	
КонецФункции

// По части наименования формирует список для выбора места проведения.
//
// Параметры:
//  Параметры - Параметры получения данных.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты.
//
Функция СформироватьДанныеВыбораМестаПроведения(Параметры) Экспорт
	
	Возврат УправлениеМероприятиями.СформироватьДанныеВыбораМестаПроведения(Параметры);
	
КонецФункции

// Заполняет протокол мероприятия на основании программы.
// Если протокол уже заполнен, то он будет очищен.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
Процедура ЗаполнитьПротокол(Мероприятие) Экспорт
	
	УправлениеМероприятиями.ЗаполнитьПротокол(Мероприятие);
	
КонецПроцедуры

// Заполняет протокол мероприятия на основании протокола предыдущего мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
Процедура ЗаполнитьПротоколНаОснованииПредыдущего(Мероприятие) Экспорт
	
	УправлениеМероприятиями.ЗаполнитьПротоколНаОснованииПредыдущего(Мероприятие);
	
КонецПроцедуры

// Отправляет приглашения на мероприятия.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
// 
// Возвращаемое значение:
//  Структура - Результат отправки приглашения.
//   * ПриглашенияОтправлены - Булево.
//   * ТекстПредупреждения - Строка.
//  
Функция ОтправитьПриглашения(Знач Мероприятие) Экспорт
	
	ПриглашенияОтправлены = Ложь;
	МассивТекстПредупреждения = Новый Массив;
	МассивТекстПредупреждения.Добавить(НСтр("ru = 'Не удалось отправить приглашение:'"));
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Мероприятие,
		"ПометкаУдаления, ВидМероприятия, ДатаНачала, ДатаОкончания");
	СостояниеПриглашений =
		УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Мероприятие, "СостояниеПриглашений");
	СостояниеМероприятия =
		УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Мероприятие, "СостояниеМероприятия");
	
	МожноОтправитьПриглашения = Истина;
	Если РеквизитыМероприятия.ПометкаУдаления Тогда
		
		МожноОтправитьПриглашения = Ложь;
		
		МассивТекстПредупреждения.Добавить(НСтр("ru = '- Мероприятия помечено на удаление.'"));
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыМероприятия.ДатаНачала)
		Или Не ЗначениеЗаполнено(РеквизитыМероприятия.ДатаОкончания) Тогда
		
		МожноОтправитьПриглашения = Ложь;
		
		МассивТекстПредупреждения.Добавить(НСтр("ru = '- Не указано время проведения. Укажите начало и окончание.'"));
		
	КонецЕсли;
	
	Если СостояниеМероприятия = Перечисления.СостоянияМероприятий.МероприятиеОтменено Тогда
		
		МожноОтправитьПриглашения = Ложь;
		
		МассивТекстПредупреждения.Добавить(НСтр("ru = '- Мероприятия уже отменено.'"));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеПриглашений) Тогда
		
		МожноОтправитьПриглашения = Ложь;
		
		МассивТекстПредупреждения.Добавить(НСтр("ru = '- Приглашения уже отправлены.'"));
		
	КонецЕсли;
	
	УчастникиМероприятия = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие);
	Если УчастникиМероприятия.Количество() = 0 Тогда
		
		МожноОтправитьПриглашения = Ложь;
		
		МассивТекстПредупреждения.Добавить(НСтр("ru = '- Не указаны участники. Укажите участников.'"));
		
	КонецЕсли;
	
	ЕстьВнешниеУчастники = Ложь;
	ЕстьВнутреннийКалендарь = ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь");
	Для Каждого СтрокаУчастника Из УчастникиМероприятия Цикл
		
		Если ЗначениеЗаполнено(СтрокаУчастника.СостояниеПриглашения) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоВнутреннийУчастник = УправлениеМероприятиями.ЭтоВнутреннийУчастник(
			СтрокаУчастника.Исполнитель);
		
		Если ЭтоВнутреннийУчастник Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьВнешниеУчастники = Истина;
		
		АдресДляОтправкиПриглашений = УправлениеМероприятиями.АдресДляОтправкиПриглашений(
			СтрокаУчастника.Исполнитель);
		Если Не ЗначениеЗаполнено(АдресДляОтправкиПриглашений) Тогда
			
			МожноОтправитьПриглашения = Ложь;
			
			МассивТекстПредупреждения.Добавить(
				СтрШаблон(
					НСтр("ru = '- Не указан адрес для отправки приглашений %1 (%2). Укажите состояние приглашения вручную или укажите адрес для отправки приглашений.'"),
					СтрокаУчастника.Исполнитель,
					ТипЗнч(СтрокаУчастника.Исполнитель)));
			
		КонецЕсли;
		
	КонецЦикла;
	Если ЕстьВнешниеУчастники И Не УправлениеМероприятиями.НастроенаОтправкаВнешнихПриглашений() Тогда
		
		МожноОтправитьПриглашения = Ложь;
		
		МассивТекстПредупреждения.Добавить(НСтр("ru = '- Не настроена отправка внешних приглашений. Укажите состояние приглашения вручную или обратитесь к администратору для настройки отправки приглашений.'"));
		
	КонецЕсли;
	
	Если МожноОтправитьПриглашения Тогда
		
		ПриглашенияОтправлены = Истина;
		
		УправлениеМероприятиями.ОтправитьПриглашения(Мероприятие);
		
	КонецЕсли;
	
	РезультатОтправкиПриглашения = Новый Структура("ПриглашенияОтправлены, ТекстПредупреждения");
	РезультатОтправкиПриглашения.ПриглашенияОтправлены = ПриглашенияОтправлены;
	Если ПриглашенияОтправлены Тогда
		РезультатОтправкиПриглашения.ТекстПредупреждения = "";
	Иначе
		РезультатОтправкиПриглашения.ТекстПредупреждения =
			СтрСоединить(МассивТекстПредупреждения, Символы.ПС);
	КонецЕсли;
	
	Возврат РезультатОтправкиПриглашения;
	
КонецФункции

// Отменяет мероприятие.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  
Процедура ОтменитьМероприятие(Знач Мероприятие) Экспорт
	
	УправлениеМероприятиями.ОтменитьМероприятие(Мероприятие);
	
КонецПроцедуры

// Параметры формы ввода пункта программы.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  НомерПункта - Число.
// 
// Возвращаемое значение:
//  см. УправлениеМероприятиямиКлиентСервер.НовыйПараметрыФормыВводПунктаПрограммы.
// 
Функция ПараметрыФормыВводПунктаПрограммы(Знач Мероприятие, Знач НомерПункта) Экспорт
	
	ПараметрыФормы = УправлениеМероприятиямиКлиентСервер.НовыйПараметрыФормыВводПунктаПрограммы();
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Мероприятие,
		"ВидМероприятия, Программа");
	Программа = РеквизитыМероприятия.Программа.Выгрузить();
	Программа.Сортировать("НомерСтроки Возр");
	
	НайденнаяСтрока = Программа.Найти(НомерПункта, "НомерПункта");
	Если НайденнаяСтрока = Неопределено Тогда
		ПараметрыФормы.ПунктНеНайден = Истина;
		Возврат ПараметрыФормы;
	КонецЕсли;
	
	СостояниеПрограммы =
		УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Мероприятие, "СостояниеПрограммы");
	
	ПараметрыФормы.НомерПункта = НайденнаяСтрока.НомерПункта;
	ПараметрыФормы.Исполнитель = НайденнаяСтрока.Исполнитель;
	ПараметрыФормы.Содержание = НайденнаяСтрока.Содержание;
	ПараметрыФормы.ВремяПлан = НайденнаяСтрока.ВремяПлан;
	ПараметрыФормы.ВремяФакт = НайденнаяСтрока.ВремяФакт;
	ПараметрыФормы.Начало = НайденнаяСтрока.Начало;
	ПараметрыФормы.Окончание = НайденнаяСтрока.Окончание;
	ПараметрыФормы.ТребуетПринятияРешения = НайденнаяСтрока.ТребуетПринятияРешения;
	ПараметрыФормы.Комментарий = НайденнаяСтрока.Комментарий;
	ПараметрыФормы.ВидМероприятия = РеквизитыМероприятия.ВидМероприятия;
	ПараметрыФормы.СостояниеПрограммы = СостояниеПрограммы;
	ПараметрыФормы.ТолькоПросмотр = Истина;
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти