#Область ПрограммныйИнтерфейс

// Вызывается при нажатии на ячейку дерева
//
// Параметры:
//  Элемент -ТаблицаФормы
//
Процедура ДеревоВопросовЗамещенияВыбор(Элемент) Экспорт
	
	ТекСтрокаДерева = Элемент.ТекущиеДанные;
	Если ТекСтрокаДерева.ДоступенОтбор Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ТекущаяСтрока", ТекСтрокаДерева);
		ОбработкаОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЗначенийОтбора", ЭтотОбъект, ПараметрыОповещения);
		ПараметрыФормы = Новый Структура("ВыбранныеЗначения", ТекСтрокаДерева.ЗначенияОтбора);
		ОткрытьФорму("Справочник.ЗамещающиеИПомощники.Форма.НастройкаОтбора",
			ПараметрыФормы, Элемент,,,, ОбработкаОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при снятии/установлении флажка на дереве областей замещения
//
// Параметры:
//  ДеревоВопросовЗамещения - ДанныеФормыДерево
//  ТекСтрокаДерева - ДанныеФормыЭлементДерева:
// * ДоступенОтбор - Булево
// * ЗначенияОтбора - СписокЗначений Из СправочникСсылка.ВидыДокументов
// * Область - СправочникСсылка.ОбластиЗамещения
// * Пометка - Число
// * ПредставлениеОтбора - Строка
//
Процедура ДеревоВопросовЗамещенияПометкаПриИзменении(ДеревоВопросовЗамещения, ТекСтрокаДерева) Экспорт
	
	Если ТекСтрокаДерева.Пометка = 2 Тогда
		ТекСтрокаДерева.Пометка = 0;
	КонецЕсли;
	
	// Подчиненные строки.
	СтрокиКОбработке = Новый Массив;
	Для Каждого ЭлементДерева Из ТекСтрокаДерева.ПолучитьЭлементы() Цикл
		Если ЭлементДерева.Пометка <> ТекСтрокаДерева.Пометка Тогда
			СтрокиКОбработке.Добавить(ЭлементДерева);
		КонецЕсли;
	КонецЦикла;
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		Стр = СтрокиКОбработке[0];
		Стр.Пометка = ТекСтрокаДерева.Пометка;
		Для Каждого ЭлементДерева Из Стр.ПолучитьЭлементы() Цикл
			Если ЭлементДерева.Пометка <> ТекСтрокаДерева.Пометка Тогда
				СтрокиКОбработке.Добавить(ЭлементДерева);
			КонецЕсли;
		КонецЦикла;
		СтрокиКОбработке.Удалить(0);
	КонецЦикла;
	
	// Другие зависимости.
	// Нельзя дать постановку инициативных без просмотра всех задач.
	ОбластьПросмотрЗадач = ПредопределенноеЗначение(
		"Справочник.ОбластиЗамещения.ЗадачиПросмотр");
	ОбластьПостановкаИнициативных = ПредопределенноеЗначение(
		"Справочник.ОбластиЗамещения.ЗадачиПостановкаПоручений");
	Если ТекСтрокаДерева.Область = ОбластьПросмотрЗадач И ТекСтрокаДерева.Пометка = 0 Тогда
		Для Каждого СоседняяСтрока Из ТекСтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы() Цикл
			Если СоседняяСтрока.Область = ОбластьПостановкаИнициативных Тогда
				СоседняяСтрока.Пометка = ТекСтрокаДерева.Пометка;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТекСтрокаДерева.Область = ОбластьПостановкаИнициативных И ТекСтрокаДерева.Пометка = 1 Тогда
		Для Каждого СоседняяСтрока Из ТекСтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы() Цикл
			Если СоседняяСтрока.Область = ОбластьПросмотрЗадач Тогда
				СоседняяСтрока.Пометка = ТекСтрокаДерева.Пометка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПометкиРодителей(ТекСтрокаДерева);
	ОчиститьЗначенияОтборов(ДеревоВопросовЗамещения);
	
КонецПроцедуры

// Помещает отборы текущей строки ЭлементДерева в временное хранилище
//
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементДерева:
// * ДоступенОтбор - Булево
// * ЗначенияОтбора - СписокЗначений Из СправочникСсылка.ВидыДокументов
// * Область - СправочникСсылка.ОбластиЗамещения
// * Пометка - Число
// * ПредставлениеОтбора - Строка
// 
// Возвращаемое значение:
//  Строка - адрес скопированных отборов
//
Функция СкопироватьОтборы(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено
		Или Не ТекущиеДанные.ДоступенОтбор Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ТекущиеДанные.ЗначенияОтбора);
	
КонецФункции

// Получает отборы из временного хранилища по адресу АдресСкопированныхОтборов и устанавливает их в ТекущиеДанные
//
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементДерева:
// * ДоступенОтбор - Булево
// * ЗначенияОтбора - СписокЗначений Из СправочникСсылка.ВидыДокументов
// * Область - СправочникСсылка.ОбластиЗамещения
// * Пометка - Число
// * ПредставлениеОтбора - Строка
//  АдресСкопированныхОтборов - Строка
//
Процедура ВставитьОтборы(ТекущиеДанные, АдресСкопированныхОтборов) Экспорт
	
	Если Не ЗначениеЗаполнено(АдресСкопированныхОтборов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено
		Или Не ТекущиеДанные.ДоступенОтбор Тогда
		Возврат;
	КонецЕсли;
	
	СкопированныеЗначенияОтбора = ПолучитьИзВременногоХранилища(АдресСкопированныхОтборов);
	
	ОбработатьВыборЗначенийОтбора(СкопированныеЗначенияОтбора, ТекущиеДанные);
	
КонецПроцедуры

// Отметить все флажки в дереве замещений
//
// Параметры:
//  ДеревоВопросовЗамещения - ДанныеФормыДерево
//
Процедура ВыбратьВсеФункцииВДеревеЗамещений(ДеревоВопросовЗамещения) Экспорт
	
	СтрокиКОбработке = Новый Массив;
	Для Каждого ЭлементДерева Из ДеревоВопросовЗамещения.ПолучитьЭлементы() Цикл
		Если ЭлементДерева.Пометка <> 1 Тогда
			СтрокиКОбработке.Добавить(ЭлементДерева);
		КонецЕсли;
	КонецЦикла;
	
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		Стр = СтрокиКОбработке[0];
		Стр.Пометка = 1;
		Для Каждого ЭлементДерева Из Стр.ПолучитьЭлементы() Цикл
			Если ЭлементДерева.Пометка <> 1 Тогда
				СтрокиКОбработке.Добавить(ЭлементДерева);
			КонецЕсли;
		КонецЦикла;
		СтрокиКОбработке.Удалить(0);
	КонецЦикла;
	
	ОчиститьЗначенияОтборов(ДеревоВопросовЗамещения);
	
КонецПроцедуры

// Снять все флажки в дереве замещений
//
// Параметры:
//  ДеревоВопросовЗамещения - ДанныеФормыДерево
//
Процедура СброситьВсеФункцииВДеревеЗамещений(ДеревоВопросовЗамещения) Экспорт
	
	СтрокиКОбработке = Новый Массив;
	Для Каждого ЭлементДерева Из ДеревоВопросовЗамещения.ПолучитьЭлементы() Цикл
		Если ЭлементДерева.Пометка <> 0 Тогда
			СтрокиКОбработке.Добавить(ЭлементДерева);
		КонецЕсли;
	КонецЦикла;
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		Стр = СтрокиКОбработке[0];
		Стр.Пометка = 0;
		Для Каждого ЭлементДерева Из Стр.ПолучитьЭлементы() Цикл
			Если ЭлементДерева.Пометка <> 0 Тогда
				СтрокиКОбработке.Добавить(ЭлементДерева);
			КонецЕсли;
		КонецЦикла;
		СтрокиКОбработке.Удалить(0);
	КонецЦикла;
	
	ОчиститьЗначенияОтборов(ДеревоВопросовЗамещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработкаВыбораЗначенийОтбора(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	ОбработатьВыборЗначенийОтбора(ВыбранноеЗначение, ДопПараметры.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработать выбор значений отбора
//
// Параметры:
//  ВыбранноеЗначение - СписокЗначений Из СправочникСсылка.ВидыДокументов
//  ТекСтрокаДерева - ДанныеФормыЭлементДерева:
// * ДоступенОтбор - Булево
// * ЗначенияОтбора - СписокЗначений Из СправочникСсылка.ВидыДокументов
// * Область - СправочникСсылка.ОбластиЗамещения
// * Пометка - Число
// * ПредставлениеОтбора - Строка
//
Процедура ОбработатьВыборЗначенийОтбора(ВыбранноеЗначение, ТекСтрокаДерева)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева.ЗначенияОтбора = ВыбранноеЗначение;
	ТекСтрокаДерева.ПредставлениеОтбора = ЗамещающиеИПомощникиКлиентСервер.ПредставлениеОтбора(ТекСтрокаДерева);
	РазрешеныВсе = ВыбранноеЗначение.Количество() = 0;
	Если РазрешеныВсе Тогда
		ТекСтрокаДерева.Пометка = 1;
	Иначе
		ТекСтрокаДерева.Пометка = 2;
	КонецЕсли;
	
	ОбновитьПометкиРодителей(ТекСтрокаДерева);
	
КонецПроцедуры

// Обновить пометки родителей
//
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева:
// * ДоступенОтбор - Булево
// * ЗначенияОтбора - СписокЗначений Из СправочникСсылка.ВидыДокументов
// * Область - СправочникСсылка.ОбластиЗамещения
// * Пометка - Число
// * ПредставлениеОтбора - Строка
//
Процедура ОбновитьПометкиРодителей(СтрокаДерева)
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	Пока СтрокаРодитель <> Неопределено Цикл
		НоваяПометка = 0;
		ЕстьНоль = Ложь;
		ЕстьОдин = Ложь;
		ЕстьДва  = Ложь;
		Для Каждого ПодчиненнаяСтрока Из СтрокаРодитель.ПолучитьЭлементы() Цикл
			ЕстьНоль = ЕстьНоль Или ПодчиненнаяСтрока.Пометка = 0;
			ЕстьОдин = ЕстьОдин Или ПодчиненнаяСтрока.Пометка = 1;
			ЕстьДва  = ЕстьДва  Или ПодчиненнаяСтрока.Пометка = 2;
			Если ЕстьНоль И ЕстьОдин Или ЕстьДва Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьДва Тогда
			НоваяПометка = 2;
		ИначеЕсли ЕстьНоль И ЕстьОдин Тогда
			НоваяПометка = 2;
		ИначеЕсли ЕстьНоль Тогда
			НоваяПометка = 0;
		ИначеЕсли ЕстьОдин Тогда
			НоваяПометка = 1;
		КонецЕсли;
		Если НоваяПометка = СтрокаРодитель.Пометка Тогда
			Прервать; // Пометка не изменилась, вышестоящие строки обрабатывать не нужно.
		Иначе
			СтрокаРодитель.Пометка = НоваяПометка;
		КонецЕсли;
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

// Очищает значения отборов в дереве ДеревоВопросовЗамещения
//
// Параметры:
//  ДеревоВопросовЗамещения - ДанныеФормыДерево
//
Процедура ОчиститьЗначенияОтборов(ДеревоВопросовЗамещения)
	
	СтрокиКОбработке = Новый Массив;
	Для Каждого Стр Из ДеревоВопросовЗамещения.ПолучитьЭлементы() Цикл
		СтрокиКОбработке.Добавить(Стр);
	КонецЦикла;
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		Стр = СтрокиКОбработке[0];
		Если Стр.ЗначенияОтбора.Количество() > 0 И Стр.Пометка <> 2 Тогда
			Стр.ЗначенияОтбора.Очистить();
			Стр.ПредставлениеОтбора = ЗамещающиеИПомощникиКлиентСервер.ПредставлениеОтбора(Стр);
		КонецЕсли;
		Для Каждого ПодчиненнаяСтр Из Стр.ПолучитьЭлементы() Цикл
			СтрокиКОбработке.Добавить(ПодчиненнаяСтр);
		КонецЦикла;
		СтрокиКОбработке.Удалить(0);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти