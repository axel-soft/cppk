////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы конфигурации Документооборот
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = РедакцииКонфигурацииКлиентСервер.ИмяКонфигурации();
	Описание.Версия = Метаданные.Версия;
	Описание.ИдентификаторИнтернетПоддержки = РедакцииКонфигурацииКлиентСервер.ИдентификаторКонфигурации();
	Описание.РежимВыполненияОтложенныхОбработчиков = "Последовательно";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
// Вызывается перед началом обновления данных ИБ.
//
Функция ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнитьПраваПредопределенных";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ОбновитьРежимыРаспознаванияФайлов";	
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "КОДСобытия.ПриОбновленииИнформационнойБазы";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбработкаЗапросовXDTO.ПриОбновленииИнформационнойБазы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.СформироватьСообщениеОВерсииФорматаОбменаСАрхивом";
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Пользователи.СоздатьАдминистратора";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПервыйЗапуск";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Сотрудники.СоздатьСотрудникаДляАдминистратора";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ШаблоныБизнесПроцессов.ЗаполнитьШаблоныПоУмолчанию";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнитьНастройкиВариантовОтчетовДокументооборот";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "РаботаСФайламиВызовСервера.УстановитьСрокХраненияПротоколаРаботыССервисомРаспознаванияПоУмолчанию";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ИнтеграцияShareДокументооборот.УстановитьНастройки";
	
	// Обработчики 3.0

	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_1",
		"ПерейтиНаВерсию_3_0_5_1",
		"c12e9b9e-7eea-489d-b8e5-d3d88f2fbdf0",
		НСтр("ru = 'Заполняет Важность в Документах и Действиях стандартным значением.'"));	
				
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_3",
		"ПерейтиНаВерсию_3_0_5_3",
		"cfc7045f-b358-489d-b175-f81d5684b6d7",
		НСтр("ru = 'Заполняет добавленные реквизиты в РС Данные документов.'"));	
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_4");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_5");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_5",
		"Справочники.УдалитьСхемыКомплексныхПроцессов.ПеренестиНастройкиСхемНеактивныхКомплексныхПроцессовВНовуюСтруктуруДанных",
		"f2a80d37-168c-46a3-8aaa-42dd0c6d5cee",
		НСтр("ru = 'Переносит настройки схем неактивных комплексных процессов в новую структуру данных.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_5",
		"Справочники.УдалитьСхемыКомплексныхПроцессов.ЗаменитьТочкуМаршрутаВНеактивныхСлужебныхЗадачахКомплексныхПроцессов",
		"91225b3e-6c6a-4786-9b00-90d03b66c25b",
		НСтр("ru = 'Заполняет точку маршрута в неактивных служебных задачах комплексных процессов.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_6",
		"ПерейтиНаВерсию_3_0_5_6",
		"6782c671-ebbb-49e3-a433-aa67dd6e927b",
		НСтр("ru = 'Корректирует код справочника Обработки объектов.'"));
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_7");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_9",
		"ПерейтиНаВерсию_3_0_5_9",
		"14663a48-198a-41d2-926a-a313e1e5e2bc",
		НСтр("ru = 'Заполняет связь настройки обработки с обработками объектов.'"));
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_10");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_23",
		"Сотрудники.ЗаменитьАвторовНаСотрудниковВИсторииСобытийЗадач",
		"68af959c-427d-4ceb-8553-e37179dcc5a7",
		НСтр("ru = 'Заменяет авторов в истории событий задач на сотрудников.'"));	
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_23",
		"Сотрудники.ЗаменитьУстановившихНаСотрудниковВИсторииСостоянийДокументов",
		"99046455-64b0-4ee7-9c5a-b437e7cc96a6",
		НСтр("ru = 'Заменяет установивших на сотрудников в истории состояний документов.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_24",
		"Сотрудники.ЗаменитьУстановившихНаСотрудниковВТекущихСостоянияхДокументов",
		"4cfaee3e-cb42-4236-81b1-b6e0f1fc3769",
		НСтр("ru = 'Заменяет установивших на сотрудников в текущих состояниях документов.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_24",
		"Сотрудники.ЗаменитьИзменившихНаСотрудниковВИсторииСроковДействийДокументов",
		"09b98a49-219a-4f3b-8c62-9cc77e612c4a",
		НСтр("ru = 'Заменяет изменивших на сотрудников в истории сроков действий документов.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_24",
		"Сотрудники.ЗаменитьАвторовНаСотрудниковВНастройкахПовторенияБизнесПроцессов",
		"31bb53bc-0f3c-4168-b0b4-f38f045de700",
		НСтр("ru = 'Заменяет авторов на сотрудников в настройках повторения процессов.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_24",
		"Сотрудники.ЗаменитьНаСотрудниковАвторовПереносовСроковВыполненияПроцессовИЗадач",
		"9d978981-7950-46e4-a8e2-61f80a706069",
		НСтр("ru = 'Заменяет на сотрудников авторов переносов сроков выполнения процессов и задач.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_24",
		"Сотрудники.ЗаменитьНаСотрудниковАвторовСобытийВХодеОбработок",
		"48ffae7a-f069-4aed-9e88-3873db2a1dbe",
		НСтр("ru = 'Заменяет на сотрудников авторов в протоколе хода обработок.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_24",
		"Сотрудники.ЗаменитьНаСотрудниковПолучившихОригиналВДанныхДокументов",
		"33115431-ed69-4f1e-b7c2-7e4f0c92ecf6",
		НСтр("ru = 'Заменяет на сотрудников пользователей получивших оригиналы документов.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_24",
		"Сотрудники.ЗаменитьНаСотрудниковАвторовКаналовОбсуждений",
		"0c9a4fe5-68c0-47e1-8d1f-1d6a2b9de234",
		НСтр("ru = 'Заменяет на сотрудников авторов каналов обсуждения.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_24",
		"Сотрудники.ЗаменитьАвторовЗаписейВПротоколеДоставкеПочты",
		"50385036-0b29-4c83-bc6b-fb02306e3d76",
		НСтр("ru = 'Заменяет на сотрудников авторов записей протокола доставки почты.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_24",
		"Сотрудники.ЗаменитьУстановившихНаСотрудниковВЗаписяхСвязейОбъектов",
		"62f2c4a9-2c57-49e2-ba9e-9f839dd59bc3",
		НСтр("ru = 'Заменяет на сотрудников авторов связей между объектами.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_26",
		"Сотрудники.ЗаменитьОтветственныхЛицНаСотрудников",
		"2ab9de05-03be-4507-bcad-5293f19a243b",
		НСтр("ru = 'Заменяет на сотрудников ответственных лиц организаций.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_26",
		"Сотрудники.ЗаменитьНаСотрудниковПолучателейУведомленийОПроблемах",
		"0e6ea984-edd5-4907-be2e-b3ecf41541d7",
		НСтр("ru = 'Заменяет на сотрудников получателей уведомлений о проблемах.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_27");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_27",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВНастройкахДоступностиПоСостоянию",
		"87c24c3c-7c6f-4d2e-9b2b-198f0912cf8b",
		НСтр("ru = 'Заменяет пользователей на сотрудников в настройках доступности по состоянию.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_28",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВИндексахНумерации",
		"65672d39-afa9-4a61-b95d-6412bbd57daa",
		НСтр("ru = 'Заменяет пользователей на сотрудников в индексах нумерации.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_29",
		"Сотрудники.ЗаменитьОтметившихИсполнениеВЗадачахНаСотрудников",
		"25e3e054-95a5-48b8-b2f4-0a405f75a3e8",
		НСтр("ru = 'Заменяет пользователей отметивших исполнение задач на сотрудников.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_29",
		"Сотрудники.ЗаменитьСоздавшихЗадачиПользователейНаСотрудников",
		"5b311874-c0e4-4da4-b74f-3764d008b1fd",
		НСтр("ru = 'Заменяет пользователей создавших задачи на сотрудников.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_29",
		"Сотрудники.ЗаменитьПодотчетныхЛицНаСотрудниковВДанныхДокументов",
		"6fc24792-d1fb-42ea-bff2-c2037cc25638",
		НСтр("ru = 'Заменяет подотчетных лиц на сотрудников в данных документах.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_29",
		"Сотрудники.ЗаменитьАвторовНастроекОтложенногоСтартаНаСотрудников",
		"6c0f3ea1-80a6-4762-acb7-d25184a78758",
		НСтр("ru = 'Заменяет авторов настроек отложенного старта процессов на сотрудников.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_29",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВПравилахЭскалацииЗадач",
		"53fdbfad-3a08-461d-ae10-15bdde6ed9e4",
		НСтр("ru = 'Заменяет пользователей на сотрудников в правилах эскалации задач.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_29",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВИсторииЭскалацииЗадач",
		"ceeda2c6-7f72-4aca-a996-f733793e7280",
		НСтр("ru = 'Заменяет пользователей на сотрудников в истории эскалации задач.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_30",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВМоихДокументах",
		"6c7d6250-0dc9-4d14-a327-d580e5add40d",
		НСтр("ru = 'Заменяет пользователей на сотрудников в Моих документах.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_31");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_33",
		"ПерейтиНаВерсию_3_0_5_33",
		"397ca345-b8b7-62a6-8762-2cf98f44a957",
		НСтр("ru = 'Очищает УзелОбработки в РС ДанныеБизнесПроцессов.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_34");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_35");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_35",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВДокументахРегистрацииСамочувствий",
		"e3602688-2607-4f52-9798-2ef6d6a3385a",
		НСтр("ru = 'Заменяет пользователей на сотрудников в документах регистрации самочувствий.'"));
		
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_36");	
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_37",
		"Сотрудники.ЗаменитьОтветственныхПользователейНаСотрудниковВИнструкциях",
		"8867ca1c-3e48-45db-bc4d-b20631660a52",
		НСтр("ru = 'Заменяет ответственных пользователей на сотрудников в инструкциях.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_37",
		"Сотрудники.ЗаменитьОтветственныхПользователейНаСотрудниковВДокументахВыгрузкаВССТУ",
		"35940243-17f9-40d7-9233-b0a1991c0a8d",
		НСтр("ru = 'Заменяет ответственных пользователей на сотрудников в выгрузках в ССТУ.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_37",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВСредиОбъектовДляАвтоподбораАдресатов",
		"3ffbe576-29f6-49c3-bf32-bb0f35be3d3f",
		НСтр("ru = 'Заменяет пользователей на сотрудников в списках автоподбора адресатов для почтовых писем.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_38",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВАдреснойКниге",
		"2e0867a6-839d-4d80-83ec-5e5be4ea953e",
		НСтр("ru = 'Заменяет пользователей на сотрудников в данных доступа к записям адресной книги.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_38",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВДанныхПоискаПоАдреснойКниге",
		"8bcc8219-fa34-4d57-8207-92146b6b6b9d",
		НСтр("ru = 'Заменяет пользователей на сотрудников в данных поиска по адресной книги.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_39",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВПротоколеРаботы",
		"7ba4192c-da93-4401-b019-d462d628a64b",
		НСтр("ru = 'Заменяет пользователей на сотрудников в протоколе работы.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_41");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_43");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_46");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_47");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_48");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_49");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_50");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_53",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВЗаписяхХронометража",
		"317ca816-b8b6-42a6-9492-2cf98f41a957",
		НСтр("ru = 'Заменяет пользователей на сотрудников в записях флагов объектов.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_54");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_55");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_56");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_57");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_58");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_59");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_60");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_61");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_62");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_63",
		"ПерейтиНаВерсию_3_0_5_63",
		"397ca886-b8b7-62a6-9492-2cf98f44a957",
		НСтр("ru = 'Заполняет данные о фактических исполнителях виз согласования.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_64");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_66");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_67");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_68");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(
		Обработчики,
		"3_0_5_69",
		"ПерейтиНаВерсию_3_0_5_69",
		"f61a703f-ea88-4f4a-8c5d-ddb688aec967",
		НСтр("ru = 'Обновляет записи РС Способы уведомления пользователей.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_70");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_71");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_5_73",
		"Сотрудники.ЗаменитьОтветственныхЗаРабочиеГруппыНаСотрудников",
		"02be2d09-5249-4138-b549-dd5d19e05c3f",
		НСтр("ru = 'Выполняет замену ответственных пользователей на сотрудников, в рабочих группах.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_75");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_78");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_79");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_80");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_81");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_5_82");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_6_2");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_6_3");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_6_4");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(
		Обработчики,
		"3_0_7_2",
		"ПерейтиНаВерсию_3_0_7_2",
		"c417fc7b-cbf1-4405-aaaa-23c67c7a20d4",
		НСтр("ru = 'Обновляет настройки видимости действий.'"));
		
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_4");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_5");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_7");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_8");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_9");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_10");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_11");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_12");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_13");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_14");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_15");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_7_16",
		"РегистрыСведений.ДоступноеВремяСотрудников.ПеренестиЗаписиВДоступноеВремяФизическихЛиц",
		"03fbd423-4923-4cef-ac0b-5058dd2e8911",
		НСтр("ru = 'Перенос записей доступного времени сотрудников в новый регистр сведений.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_7_16",
		"РегистрыСведений.ЗанятостьСотрудников.ПеренестиЗаписиВЗанятостьФизическихЛиц",
		"92618ee9-e2cb-4054-a210-0e904dd7bc9d",
		НСтр("ru = 'Перенос записей занятости сотрудников в новый регистр сведений.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_7_16",
		"РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаряПользователя.ПеренестиЗаписиВНастройкиОтображенияЗаписейРабочегоКалендаря",
		"5144ddcf-7a05-4048-a2b8-96ded4e49b37",
		НСтр("ru = 'Перенос настроек отображения записей рабочего календаря в новый регистр сведений.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_7_16",
		"РегистрыСведений.НастройкиРабочегоКалендаряСотрудника.ПеренестиЗаписиВНастройкиРабочегоКалендаря",
		"6f69e3ab-e481-4098-a0ea-4cba034502f3",
		НСтр("ru = 'Перенос настроек рабочего календаря в новый регистр сведений.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_7_16",
		"ПланыОбмена.СинхронизацияКалендарей.ЗаполнитьРеквизитФизическоеЛицоВНастройкахСинхронизацииКалендарей",
		"d7d446cc-2e52-4ae4-b96a-4a18f5178bc7",
		НСтр("ru = 'Привязка настроек синхронизации календарей к физическим лицам.'"));
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.16";
	Обработчик.Процедура = "РаботаСРабочимКалендаремСервер.ОбновитьПользовательскиеНастройкиРабочегоКалендаря_3_0_7_16";
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_7_24",
		"ПерейтиНаВерсию_3_0_7_24",
		"477e105f-032b-4786-af5e-92b49fae198c",
		НСтр("ru = 'Обновляет реквизиты процессов, загруженных из 1С:Документооборот 2.1.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_26");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_7_27");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_7_28",
		"ПерейтиНаВерсию_3_0_7_28",
		"477e105f-032b-4786-af5e-92b49fae199c",
		НСтр("ru = 'Исправляет значение реквизита ""Подписан/утвержден"" в документах.'"));
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_7_31",
		"ПерейтиНаВерсию_3_0_7_31",
		"8934d90a-453f-40fe-b865-fbda3192251d",
		НСтр("ru = 'Обновляет дескрипторы доступа задач по процессам с проектом.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_8_2");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_8_4");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_8_5");
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_8_6",
		"ПерейтиНаВерсию_3_0_8_6",
		"98dd8edd-0e2f-4908-ab35-069007cb2031",
		НСтр("ru = 'Обновляет Порядок выполнения участниками действий.'"));
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.7";
	Обработчик.Процедура = "Справочники.Сотрудники.ЗаполнитьНаименованиеУСотрудников_3_0_8_7";
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_8_8");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_8_9");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_8_11");
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_8_12",
		"ПерейтиНаВерсию_3_0_8_12",
		"15c71233-2760-4b99-a3e1-f4e519908c0f",
		НСтр("ru = 'Заполняет ИД пункта в состояниях и в результатах действий.'"));	
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_8_14",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВКатегорияхОбъектов",
		"96b50fa4-cb91-4795-b0a1-9763b9d25d64",
		НСтр("ru = 'Выполняет замену пользователей на сотрудников, в категориях объектов.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_8_14",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВПравилахКатегоризации",
		"d6a68a6d-5054-43b6-8ba0-f46ec1ab596d",
		НСтр("ru = 'Выполняет замену пользователей на сотрудников, в правилах категоризации объектов.'"));
		
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_8_14",
		"Сотрудники.ЗаменитьПользователейНаСотрудниковВКатегорияхДанных",
		"de417257-f371-4fa0-9cf8-e2237c7bdb04",
		НСтр("ru = 'Выполняет замену пользователей на сотрудников, в категориях данных.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_8_15");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_8_16");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_8_17");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_8_19");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_8_20");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_2");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_3");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_4");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_6");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_9_9",
		"ПерейтиНаВерсию_3_0_9_9",
		"d1e75bde-f099-4323-8753-093bb28ad4e5",
		НСтр("ru = 'Заполняет данные о состоянии документов, в уничтоженных и переданных в архив делах.'"));
		
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_10");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_11");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_12");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_13");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_9_14",
		"РаботаСПроцессамиПоДействиям.ИсправитьЗаполнениеАвтораВПроцессахПоПодчиненнымИсполнениям",
		"cb78a75f-1ae4-4161-bbe0-f7b6720e760b",
		НСтр("ru = 'Выполняет замену авторов в процессах подчиненных исполнений обработок документов'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_15");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_16");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_17");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_9_18");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_1");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_2");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_4");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_5");
	
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_10_6",
		"ПерейтиНаВерсию_3_0_10_6",
		"69ae6e7e-4973-4dc4-83b8-16158f603d1f",
		НСтр("ru = 'Заполнение реквизита ""Состояние брони"" в бронях.'"));
		
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_7");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_8");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_9");

	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_10_10",
		"ПерейтиНаВерсию_3_0_10_10",
		"69ae6e7e-4973-8dc4-71b8-16158f603d1f",
		НСтр("ru = 'Перенос данных ТекстХранилище из справочника Файлы в регистр.'"));

	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_10_11",
		"ПерейтиНаВерсию_3_0_10_11",
		"69ae6e7e-4973-8dc4-71b8-16158f604d1f",
		НСтр("ru = 'Перенос данных ТекстХранилище из справочника ВерсииФайлов в регистр.'"));
		
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_12");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_15");
	ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики,
		"3_0_10_16",
		"ПерейтиНаВерсию_3_0_10_16",
		"16c7e101-a8dd-4515-aa92-2f3cc6aaa678",
		НСтр("ru = 'Обновляет ошибочный Порядок выполнения участникам действий и настроек действий Подписания.'"));
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_17");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_18");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_19");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_20");
	
	// Обработчики Холдинг
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_21");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_22");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_23");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_24");
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_27");
	
	ДобавитьСтандартныйОбработчикАрхив(Обработчики, "3_0_10_28");    
	
	
	
	
	
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_11_1");
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_11_2",
		"ПерейтиНаВерсию_3_0_11_2",
		"9999e101-a8dd-4515-aa92-2f3cc6aa9999",
		НСтр("ru = 'Обновляет состояние МЭДО в регистре ДанныеДокументовПредприятия для быстрого показа в списке'"));
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_11_3",
		"ПерейтиНаВерсию_3_0_11_3",
		"aaaae101-a8dd-4515-aa92-2f3cc6aaaaaa",
		НСтр("ru = 'Создает табличную часть Пакеты в документах ДанныеДокументаМЭДО'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_11_4");

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_11_7",
		"ПерейтиНаВерсию_3_0_11_7",
		"9999e101-a8dd-4515-aa92-2f3cc6aa5439",
		НСтр("ru = 'Обновляет ВидКорреспонденции ЯвляетсяКомплектомДокументов Контрагент  в регистре ДанныеДокументовПредприятия для быстрого показа в списке'"));
		
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_11_8",
		"ЗаменитьСотрудниковНаФизлицВоФлагахОбъектов",
		"8381d981-bb2a-4d29-b3dd-e90f735fe4c9",
		НСтр("ru = 'Заменяет сотрудников на физлиц в записях флагов объектов.'"));

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_11_9",
		"ЗаполнитьКомментарийВРезультатыДействий",
		"8381d981-bb2a-4d13-b3dd-e90f735fe4c9",
		НСтр("ru = 'Заполняет комментарий в РС РезультатыДействий.'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_11_10");
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_11_11");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_11_12",
		"ПерейтиНаВерсию_3_0_11_12",
		"8381d981-bb2a-4d56-b3dd-e90f735fe4c9",
		НСтр("ru = 'Обновляет Сторона1 Сторона2 в регистре ДанныеДокументовПредприятия для коректного отображения заявок на оплату.'"));

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_11_13",
		"ПерейтиНаВерсию_3_0_11_13",
		"8381d981-bb2a-4d56-b3dd-e823735fe4c9",
		НСтр("ru = 'Обновляет ИсходящийНомерИДата в регистре ДанныеДокументовПредприятия для исходящих документов.'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_11_15");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_11_16",
		"ПерейтиНаВерсию_3_0_11_16",
		"8381d981-bb2a-4d53-b3dd-e823735fe4c1",
		НСтр("ru = 'Обновляет права на действия задач с приложениями, если на них нет прав у соисполнителей.'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_11_23");
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_3");
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_4");
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_5");

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_12_6",
		"ПерейтиНаВерсию_3_0_12_6",
		"e0cd6006-0ec2-4a60-a893-54108e16188b",
		НСтр("ru = 'Заполняет РС ТекстыПисем.'"));
		
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_8");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_9");

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_12_10",
		"ПерейтиНаВерсию_3_0_12_10",
		"e0cd6006-0ec2-4a60-a893-57654e16188b",
		НСтр("ru = 'Заполняет ОжидатьЗавершения в Истина в спр ДействияОзнакомления.'"));
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_12_11",
		"ПерейтиНаВерсию_3_0_12_11",
		"317cbbd6-0b9d-4f9d-bba6-ce42ea5ec6d6",
		НСтр("ru = 'Проставляет АктуализироватьВерсию = Истина в РС НастройкиКонтрагентовМЭДО'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_12");
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_13");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_12_15",
		"ПерейтиНаВерсию_3_0_12_15",
		"68B5BAAC-CFAB-43db-A49A-AF25A95BFE63",
		НСтр("ru = 'Удаляет состояния ЭДО бумажных документов, которые еще не были сформированы'"));   
		
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_16");	
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_17");	
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_18");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_19");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_20");
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_12_21");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_12_22",
		"ПерейтиНаВерсию_3_0_12_22",
		"9d99316e-7072-422a-901f-b9ec2dd9333a",
		НСтр("ru = 'Заполнит РС УчастникиОзнакомлений, по старым действиям ознаколмения'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_13_3");
	
	ДобавитьСтандартныйОтложенныйОбработчик(
		Обработчики, "3_0_13_4", "ПерейтиНаВерсию_3_0_13_4",
		"9d99316e-7072-422a-901f-b9ec2dd9333b",
		СтрШаблон(
			НСтр("ru = 'Заполняет новое поле ""%1"" в регистре сведений ""%2"" по документу ""%3""'"),
			"АдресатыДляСписков", "ДанныеДокументовПредприятия", "Корреспонденция"));
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_13_5");
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_13_6");
	
	ДобавитьСтандартныйОтложенныйОбработчик(
		Обработчики, "3_0_13_7", "ПерейтиНаВерсию_3_0_13_7",
		"7672F6D1-8E09-4d77-9C48-5219C6646040",
		НСтр("ru = 'Заполняет РС ПерсональныеНастройкиПользователя'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_13_8");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_13_9");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_13_10");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_13_13");
	
	ДобавитьСтандартныйОтложенныйОбработчик(
		Обработчики, "3_0_13_14", "ПерейтиНаВерсию_3_0_13_14",
		"A1751DD3-5565-40FD-B58E-654D53B15748",
		НСтр("ru = 'Сбрасывает признак защищенности участников исполнения по пунктам'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_13_15");
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_13_16");
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_13_17");

	ДобавитьСтандартныйОтложенныйОбработчик(
		Обработчики, "3_0_13_18", "ПерейтиНаВерсию_3_0_13_18",
		"369BA1F6-A1FB-4964-AC94-31EBC243A028",
		НСтр("ru = 'Выполняет преобразование и перенос данных отметок времени'"));

	ДобавитьСтандартныйОтложенныйОбработчик(
		Обработчики, "3_0_13_19", "ПерейтиНаВерсию_3_0_13_19",
		"78C14620-057D-4BFC-AF62-E84F32EB4F34",
		НСтр("ru = 'Выполняет преобразование и перенос данных служебных объектов КОД'"));
	
	ДобавитьСтандартныйОтложенныйОбработчик(
		Обработчики, "3_0_13_20", "ПерейтиНаВерсию_3_0_13_20",
		"33FCBFD9-054E-4335-95F9-02A8278830BF",
		НСтр("ru = 'Удаляет устаревшие данные подсистемы отметок времени'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_1");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_2");

	ДобавитьСтандартныйОтложенныйОбработчик(
		Обработчики, "3_0_14_3", "ПерейтиНаВерсию_3_0_14_3",
		"33FCBFD9-054E-4335-95F9-1919178830BF",
		НСтр("ru = 'Заполняет поле ЕстьДокументы в РС КешИнформацииОбОбъектах'"));
		
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_4");	

	ДобавитьСтандартныйОтложенныйОбработчик(
		Обработчики, "3_0_14_4", "ПерейтиНаВерсию_3_0_14_4_ОшибкиМиграции",
		"33FCBFD9-054E-4335-95F9-2323238830BF",
		НСтр("ru = 'Переносит ошибки миграции с 2.1'"));

	ДобавитьСтандартныйОтложенныйОбработчик(
		Обработчики, "3_0_14_4", "ПерейтиНаВерсию_3_0_14_4_УдалитьДескрипторы",
		"33FCBFD9-054E-4335-95F9-4545458830BF",
		НСтр("ru = 'РС ОтметкиВремениРегистровКонстант: удалим записи для ДескрипторыДляОбъектов'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_5");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_6");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_7");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_8");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_11");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_14_12",
		"ПерейтиНаВерсию_3_0_14_12",
		"bd87d3ba-85b0-4369-a76c-97a0df325788",
		НСтр("ru = 'Заполняет реквизит НомерПунктаПротокола в справочнике ПротоколыМероприятий'"));
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_14");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_15");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_16");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_17");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_21");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_24");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_26");
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_14_28",
		"ПерейтиНаВерсию_3_0_14_28",
		"bd87d3ba-85b0-4369-a76c-97a0df325781",
		НСтр("ru = 'Исправляет отсутствие прав на перенаправленные задачи ознакомления'"));

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_14_29",
		"ПерейтиНаВерсию_3_0_14_29",
		"bd87d3ba-85b0-5423-a76c-97a0df325781",
		НСтр("ru = 'Удаляет фиктивные задачи ознакомления в Задачи от меня'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_14_30");

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_14_31",
		"ПерейтиНаВерсию_3_0_14_31",
		"bd87d3ba-85b0-5423-a76c-97a146325781",
		НСтр("ru = 'Отмечает выполнение старых задач ознакомления'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_1");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_2");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_3",
		"ПерейтиНаВерсию_3_0_15_3",
		"647b6df4-dcb8-402e-9f67-afc8a832d555",
		НСтр("ru = 'Заполняет пометку удаления у сотрудников и субъектов в РС ""Состав субъектов прав доступа"".'"));

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_4",
		"ПерейтиНаВерсию_3_0_15_4",
		"bd87d3ba-85b0-5423-a76c-998766325781",
		НСтр("ru = 'Заполняет ИдентификаторПункта в РС СостоянияДействий'"));

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_5",
		"ПерейтиНаВерсию_3_0_15_5",
		"bd1234ba-85b0-5423-a76c-998766325781",
		НСтр("ru = 'Заполняет ИдентификаторПункта в РС РезультатыДействий'"));
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_8",
		"ПерейтиНаВерсию_3_0_15_8",
		"63dad3d4-b309-4a57-ac21-7cfce81690ad",
		НСтр("ru = 'Заполняет регистр сведений РеестрЗадачПоИсполнителям и регистр накопления КоличествоЗадачПоИсполнителям.'"));

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_9",
		"ПерейтиНаВерсию_3_0_15_9_РеестрЗадачПоАвторам",
		"afd23e77-40d0-46cf-96f9-ce47bca1e984",
		НСтр("ru = 'Заполняет регистр сведений РеестрЗадачПоАвторам и регистр накопления КоличествоЗадачПоАвторам.'"));
		
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_9");	
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_11");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_14");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_15");
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_16");
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_17",
		"ПерейтиНаВерсию_3_0_15_17",
		"89c6f654-0d45-4059-ac48-1cb14f00b2a2",
		НСтр("ru = 'Перенос данных поиска адресной книги в новый РС'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_20");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_21",
		"ПерейтиНаВерсию_3_0_15_21",
		"78f2e571-84cb-45e0-b58a-3138eca82b68",
		НСтр("ru = 'Обновление состояний ЭДО в данных документов ДО'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_22");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_23");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_24");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_25");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_30",
		"ПерейтиНаВерсию_3_0_15_30",
		"6a7a386a-1702-4f1a-98cc-fec8ba46211c",
		НСтр("ru = 'Обновление АК: установление РодительОбъекта для групп контактов пользователей'"));
		
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_31");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_32");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_33",
		"ПерейтиНаВерсию_3_0_15_33",
		"3ce0fef7-e758-4779-b39d-139c57d682e1",
		НСтр("ru = 'Корректировка дублей пунктов протоколов'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_35");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_36");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_37");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_38",
		"ПерейтиНаВерсию_3_0_15_38",
		"a6f19fb6-5dd8-4a39-bee0-ae7f85310d44",
		НСтр("ru = 'Устанавливает реквизит НеПредлагатьСохранятьНастройки РС НастройкиПолученияЭлектронныхДокументов'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_15_39");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_40",
		"ПерейтиНаВерсию_3_0_15_40",
		"def2a889-9b39-40ad-a157-cb33ee3c1ae9",
		НСтр("ru = 'Корректировка задач обработки результатов'"));
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_15_41",
		"ПерейтиНаВерсию_3_0_15_41",
		"b2f37789-2bf9-437d-90bf-cb0197eefcef",
		НСтр("ru = 'Корректировка задач ознакомления с результатом'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_2");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_3");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_4",
		"ПерейтиНаВерсию_3_0_16_4",
		"66341ebd-4f1a-4248-b315-d3204f38e2c2",
		НСтр("ru = 'Корректировка задач замещающих и помощников'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_5");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_6");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_7",
		"ПерейтиНаВерсию_3_0_16_7",
		"4bfa8daa-6a1d-40dc-9403-56a42db997f1",
		НСтр("ru = 'Заполнение регистра сведений ""Уведомления окном""'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_8");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_9");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_10");    
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_11");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_12");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_13",
		"ПерейтиНаВерсию_3_0_16_13",
		"0ed83f3c-be59-4043-98c9-e0b1b62eeebb",
		НСтр("ru = 'Заполнение представление в регистре сведений ""Объекты поиска в адресной книге""'")); 
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_15",
		"ПерейтиНаВерсию_3_0_16_15",
		"65a07905-6068-417d-a340-580d10e9e1b3",
		НСтр("ru = 'Заполнение представления должности и подразделения сотрудника'"));
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_16");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_17");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_18",
		"ПерейтиНаВерсию_3_0_16_18",
		"09805fae-1371-4a50-9271-31ef2dccd5c0",
		НСтр("ru = 'Заполнение данных контроля для виджетов'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_19");

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_21",
		"ПерейтиНаВерсию_3_0_16_21",
		"65a12395-6068-417d-a340-580d10e9e1b3",
		НСтр("ru = 'Заполнение регистра сведений ЗанятыеФайлы'"));
		
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_23",
		"ПерейтиНаВерсию_3_0_16_23",
		"c40f8b56-deb0-421c-87e2-32d564aa7e88",
		НСтр("ru = 'Заполнение регистра сведений ФИОФизическихЛиц'"));

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_24",
		"ПерейтиНаВерсию_3_0_16_24_НетЗаписиТекстыВерсийФайлов",
		"c40f8b56-deb0-421c-87e2-11d564aa7e88",
		НСтр("ru = 'Заполнение регистра сведений ТекстыВерсийФайлов, где нет записи'"));

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_24",
		"ПерейтиНаВерсию_3_0_16_24_Зашифрован",
		"c40f8b56-deb0-421c-87e2-122564aa7e88",
		НСтр("ru = 'Заполнение регистра сведений ТекстыВерсийФайлов, для версий файлов с Зашифрован'"));

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_24",
		"ПерейтиНаВерсию_3_0_16_24_Расширение",
		"c40f8b56-deb0-421c-87e2-133564aa7e88",
		НСтр("ru = 'Заполнение регистра сведений ТекстыВерсийФайлов, поле Расширение'"));

	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_24",
		"ПерейтиНаВерсию_3_0_16_24_ИсточникДанных",
		"c40f8b56-deb0-421c-87e2-144564aa7e88",
		НСтр("ru = 'Заполнение регистра сведений ТекстыВерсийФайлов, для версий файлов с ИсточникДанных'"));                 
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_25",
		"ПерейтиНаВерсию_3_0_16_25_УчастникиОзнакомлений",
		"14069b34-8e27-4c93-aeb7-c021eafd7b67",
		НСтр("ru = 'Заполненяет представления фактического исполнителя и ПЭП РС УчастникиОзнакомлений'"));
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_25",
		"ПерейтиНаВерсию_3_0_16_25_СведенияОбУчастникахДействий",
		"8319f1a0-3190-490b-830f-c35cf800e5fb",
		НСтр("ru = 'Заполненяет представления фактического исполнителя и ПЭП РС ПерейтиНаВерсию_3_0_16_25_СведенияОбУчастникахДействий'"));
		
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_26",
		"ПерейтиНаВерсию_3_0_16_26_ЗаполнитьДатуСозданияСдаточныхОписей",
		"c47f9b56-deb0-421c-87e2-32d564aa7e88",
		НСтр("ru = 'Заполнение даты создания Передачи дел в архив'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_27");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_28",
		"ПерейтиНаВерсию_3_0_16_28",
		"b84a40b9-84e0-439d-88db-3e6486a9701b",
		НСтр("ru = 'Обновление состояний исполнения пунктов протоколов'"));
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_29",
		"ПерейтиНаВерсию_3_0_16_29",
		"b5d84cc2-6267-45a2-9670-76779035980a",
		НСтр("ru = 'Обновление зависших действий подписания с обеспечивающими подписание, заданными в виде автоподстановок'"));
	
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_30");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_31");
	ДобавитьСтандартныйОбработчик(Обработчики, "3_0_16_32");
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_33",
		"ПерейтиНаВерсию_3_0_16_33_Документы",
		"3924c478-beca-4fbf-a252-b3ddb3f5fa60",
		НСтр("ru = 'Перенос данных из перечисления в справочник для колонки СтавкаНДС в таблице Товары и услуги'"));
	
	ДобавитьСтандартныйОтложенныйОбработчик(Обработчики,
		"3_0_16_33",
		"ПерейтиНаВерсию_3_0_16_33_Номенклатура",
		"a0cfc313-8653-4751-a435-d6a9d653a7ac",
		НСтр("ru = 'Перенос данных из перечисления в справочник для реквизита СтавкаНДС в справочнике Номенклатура'"));
	
	Возврат Обработчики;
	
КонецФункции

Процедура ДобавитьСтандартныйОбработчик(Обработчики, Версия)
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = СтрЗаменить(Версия, "_", ".");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_" 
		+ СтрЗаменить(Версия, ".", "_");
	
КонецПроцедуры

Процедура ДобавитьСтандартныйОбработчикАрхив(Обработчики, Версия)
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = СтрЗаменить(Версия, "_", ".");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборотАрхив.ПерейтиНаВерсию_" 
		+ СтрЗаменить(Версия, ".", "_");
	
КонецПроцедуры

// Параметры:
//  Обработчики		 - ТаблицаЗначений - Таблица с обработчиками обновления
//  Версия			 - Строка - Версия, для которой нужно выполнить обработчик. Указывается в формате "X_X_X_X"
//  ИмяПроцедуры	 - Строка - Имя процедуры, которая будет выполнена при отложенном обновлении.
//                     Если передается только наименование процедуры, то считается, что процедура размещена
//                     в текущем модуле (ОбновлениеИнформационнойБазыДокументооборот).
//  Идентификатор	 - Строка - Уникальный идентификатор обработчика отложенного обновления
//  Комментарий		 - Строка - Описание процедуры, которое отображается в интерфейсе
//
Процедура ДобавитьСтандартныйОтложенныйОбработчик(Обработчики, Версия, ИмяПроцедуры, Идентификатор, Комментарий)

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = СтрЗаменить(Версия, "_", ".");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Если СтрНайти(ИмяПроцедуры, ".") = 0 Тогда
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот." + ИмяПроцедуры;
	Иначе
		Обработчик.Процедура = ИмяПроцедуры;  
	КонецЕсли;
	
	Обработчик.Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	Обработчик.Комментарий = Комментарий;

КонецПроцедуры

// Параметры:
//  Обработчики		 - ТаблицаЗначений - Таблица с обработчиками обновления
//  Версия			 - Строка - Версия, для которой нужно выполнить обработчик. Указывается в формате "X_X_X_X"
//  ИмяПроцедуры	 - Строка - Имя процедуры, которая будет выполнена при отложенном обновлении.
//                     Если передается только наименование процедуры, то считается, что процедура размещена
//                     в текущем модуле (ОбновлениеИнформационнойБазыДокументооборот).
//  Идентификатор	 - Строка - Уникальный идентификатор обработчика отложенного обновления
//  Комментарий		 - Строка - Описание процедуры, которое отображается в интерфейсе
//
Процедура ДобавитьСтандартныйОтложенныйОбработчикАрхив(Обработчики, Версия, ИмяПроцедуры, Идентификатор, Комментарий)

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = СтрЗаменить(Версия, "_", ".");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Если СтрНайти(ИмяПроцедуры, ".") = 0 Тогда
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборотАрхив." + ИмяПроцедуры;
	Иначе
		Обработчик.Процедура = ИмяПроцедуры;  
	КонецЕсли;
	
	Обработчик.Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	Обработчик.Комментарий = Комментарий;

КонецПроцедуры

// Вызывается перед обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт


КонецПроцедуры

// Вызывается после завершении обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсияИБ     - Строка - версия ИБ до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсияИБ        - Строка - версия ИБ после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков
//                                             обновления, сгруппированных по номеру версии.
//  Итерирование по выполненным обработчикам:
//		Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//	
//			Если Версия.Версия = "*" Тогда
//				группа обработчиков, которые выполняются всегда
//			Иначе
//				группа обработчиков, которые выполняются для определенной версии 
//			КонецЕсли;
//	
//			Для Каждого Обработчик Из Версия.Строки Цикл
//				...
//			КонецЦикла;
//	
//		КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево -	если Истина, то выводить форму с описанием 
//											обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
// 
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт


КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений системы.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновлений.
//   
// См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт


КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.ПредыдущееИмяКонфигурации = "ДокументооборотКОРП";
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПереходСКОРПНаХолдинг";
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт

КонецПроцедуры

// Вызывается перед формирование списка обработчиков.
//
// Параметры:
//   ИтерацииОбновления - Массив Из Структура:
//       * Подсистема - Строка - Имя библиотеки или конфигурации.
//       * Версия - Строка - Например, "2.1.3.39". Номер версии библиотеки (конфигурации).
//       * ЭтоОсновнаяКонфигурация - Булево - Истина, если это основная конфигурация, а не библиотека.
//       * Обработчики - ТаблицаЗначений - Все обработчики обновления библиотеки, описание колонок
//										   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ВыполненныеОбработчики - ДеревоЗначений - Выполненные обработчики обновления, сгруппированные по
//													 библиотеке и номеру версии, описание колонок
//													 см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ИмяОсновногоСерверногоМодуля - Строка - Имя модуля библиотеки (конфигурации), который предоставляет
//												   основные сведения о ней: имя, версия и т.д.
//       * ОсновнойСерверныйМодуль - ОбщийМодуль - Общий модуль библиотеки (конфигурации), который предоставляет
//												   основные сведения о ней: имя, версия и т.д.
//       * ПредыдущаяВерсия - Строка - Например, "2.1.3.30". Номер версии библиотеки (конфигурации) до обновления.
//
Процедура ПередФормированиемСпискаОбработчиков(ИтерацииОбновления) Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() Тогда
		ОбновлениеИнформационнойБазыХолдинг.ПередФормированиемСпискаОбработчиков(ИтерацииОбновления);
	КонецЕсли;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// Обновляет действия задач до версии обновления 1.
// Предназначен для вызова вне транзакции.
// 
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
//
Процедура ОбновитьДействияЗадачДоВерсииОбновления1(ДействияЗадач) Экспорт
	
	Если ТранзакцияАктивна() Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедура %1 не предназначена для вызова в транзакции.'",
			"ОбновитьДействияЗадачДоВерсииОбновления1"));
	КонецЕсли;
	
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ОбновитьДействиеЗадачиДоВерсииОбновления1(ДействиеЗадачи);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ТранзакцияАктивна() Тогда
				ВызватьИсключение;
			КонецЕсли;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет задачи до версии обновления 1.
// Предназначен для вызова вне транзакции.
// 
// Параметры:
//  Задачи - Массив из ДокументСсылка.Задача.
//
Процедура ОбновитьЗадачиДоВерсииОбновления1(Задачи) Экспорт
	
	Если ТранзакцияАктивна() Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедура %1 не предназначена для вызова в транзакции.'",
			"ОбновитьЗадачиДоВерсииОбновления1"));
	КонецЕсли;
	
	Для Каждого Задача Из Задачи Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ОбновитьЗадачуДоВерсииОбновления1(Задача);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ТранзакцияАктивна() Тогда
				ВызватьИсключение;
			КонецЕсли;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет регистр сведений РеестрЗадачПоИсполнителям и регистр накопления КоличествоЗадачПоИсполнителям.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_15_8(Параметры) Экспорт
	
	ИмяПроцедуры = "ПерейтиНаВерсию_3_0_15_8";
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДействиеЗадачи.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
			|ГДЕ
			|	ДействиеЗадачи.ВерсияОбновления = 0");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	ДействиеЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.ВерсияОбновления = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДействиеЗадачи.Дата УБЫВ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ОбновитьДействиеЗадачиДоВерсииОбновления1(Выборка.Ссылка);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить объект %1 в процедуре %2:
					|%3'"),
				Выборка.Ссылка,
				ИмяПроцедуры,
				ПодробноеПредставлениеОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;  
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось обновить некоторые объекты (пропущены): %2'"),
			ИмяПроцедуры,
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Заполняет регистр сведений РеестрЗадачПоАвторам и регистр накопления КоличествоЗадачПоАвторам.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_15_9_РеестрЗадачПоАвторам(Параметры) Экспорт
	
	ИмяПроцедуры = "ПерейтиНаВерсию_3_0_15_9_РеестрЗадачПоАвторам";
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(Задача.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Документ.Задача КАК Задача
			|ГДЕ
			|	Задача.ВерсияОбновления = 0");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	Задача.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.ВерсияОбновления = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задача.Дата УБЫВ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ОбновитьЗадачуДоВерсииОбновления1(Выборка.Ссылка);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить объект %1 в процедуре %2:
					|%3'"),
				Выборка.Ссылка,
				ИмяПроцедуры,
				ПодробноеПредставлениеОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;  
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось обновить некоторые объекты (пропущены): %2'"),
			ИмяПроцедуры,
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Заполнение данных контроля для виджетов.
// 
// Параметры:
//  Параметры - Структура:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число
//      ** ВсегоОбъектов - Число
//      ** ТекущийОбъектОбновления - СправочникСсылка.Контроль
//                                 - Неопределено
//
Процедура ПерейтиНаВерсию_3_0_16_18(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ОбновляемаяТаблица.Ссылка) КАК КоличествоКОбновлению
			|ИЗ
			|	Справочник.Контроль КАК ОбновляемаяТаблица");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КоличествоКОбновлению;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПараметраТекущийОбъектОбновления = "ТекущийОбъектОбновления";
	Если Не Параметры.Свойство(ИмяПараметраТекущийОбъектОбновления) Тогда
		Параметры.Вставить(ИмяПараметраТекущийОбъектОбновления, Неопределено);
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОбновляемаяТаблица.Ссылка КАК ОбъектКОбновлению
		|ИЗ
		|	Справочник.Контроль КАК ОбновляемаяТаблица
		|ГДЕ
		|	ОбновляемаяТаблица.Ссылка > &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбновляемаяТаблица.Ссылка");
	
	ЧастьУсловия =
		"ГДЕ
		|	ОбновляемаяТаблица.Ссылка > &Ссылка";
	Если Не СтрНайти(Запрос.Текст, ЧастьУсловия) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось найти часть условия'");
	КонецЕсли;
	
	Если Параметры[ИмяПараметраТекущийОбъектОбновления] <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылка", Параметры[ИмяПараметраТекущийОбъектОбновления]);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЧастьУсловия, "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДанныеКонтроля = Документы.ДанныеКонтроля.СсылкаПоОснованию(Выборка.ОбъектКОбновлению);
			Если Не ОбщегоНазначения.СсылкаСуществует(ДанныеКонтроля) Тогда
				Документы.ДанныеКонтроля.ОтразитьКонтроль(Выборка.ОбъектКОбновлению);
			КонецЕсли;
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.ОбъектКОбновлению.Метаданные(),
				Выборка.ОбъектКОбновлению,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
		Параметры[ИмяПараметраТекущийОбъектОбновления] = Выборка.ОбъектКОбновлению;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_16_18 не удалось обновить некоторые объекты (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПереходСКОРПНаХолдинг

// Обработчик перехода с КОРП на Холдинг.
//
Процедура ПереходСКОРПНаХолдинг() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьРеквизитУзелОбработки();
	
	УстановитьИдентификаторыСотрудниковПользователей();
	УстановитьИдентификаторыОсновныхСотрудников();
	ОбновлениеИнформационнойБазыХолдинг.ЗаменитьСсылкиВВидахДоступа();
	ОбновлениеИнформационнойБазыХолдинг.ЗафиксироватьОтметкиВремениПредопределенныхОбъектов();
	КОДСлужебный.ПереименоватьПоставляемогоАдминистратора();
	КОДСервер.ЗавершитьИнициализациюУзла();
	
КонецПроцедуры

// Устанавливает идентификаторы записям регистра СотрудникиПользователей.
//
Процедура УстановитьИдентификаторыСотрудниковПользователей() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователь,
		|	Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей
		|ГДЕ
		|	ИдентификаторОтметкиВремени = &ПустойИдентификатор");
	Запрос.УстановитьПараметр("ПустойИдентификатор", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных();
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СотрудникиПользователей");
			ЭлементБлокировки.УстановитьЗначение("Пользователь", Выборка.Пользователь);
			ЭлементБлокировки.УстановитьЗначение("Сотрудник", Выборка.Сотрудник);
			БлокировкаДанных.Заблокировать();
			
			Набор = РегистрыСведений.СотрудникиПользователей.СоздатьНаборЗаписей();
			Набор.Отбор.Пользователь.Установить(Выборка.Пользователь);
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Прочитать();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			//@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				Нстр("ru = 'Не удалось установить идентификатор записи регистра СотрудникиПользователей по сотруднику %1.
							|Причина: %2'"),
				Выборка.Сотрудник,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает идентификаторы записям регистра ОсновныеСотрудники.
//
Процедура УстановитьИдентификаторыОсновныхСотрудников() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ОсновныеСотрудники
		|ГДЕ
		|	ИдентификаторОтметкиВремени = &ПустойИдентификатор");
	Запрос.УстановитьПараметр("ПустойИдентификатор", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных();
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОсновныеСотрудники");
			ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", Выборка.ФизическоеЛицо);
			БлокировкаДанных.Заблокировать();
			
			Набор = РегистрыСведений.ОсновныеСотрудники.СоздатьНаборЗаписей();
			Набор.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			Набор.Прочитать();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			//@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				Нстр("ru = 'Не удалось установить идентификатор записи регистра ОсновныеСотрудники по физическому лицу %1.
							|Причина: %2'"),
				Выборка.ФизическоеЛицо,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Заполнения пустой ИБ.

// Обработчик первого запуска
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователи.СоздатьАдминистратора();

	ОбработчикиПервоначальногоЗаполненияОбщие();
	ОбработчикиПервоначальногоЗаполненияЗависящиеОтРедакции();
	
КонецПроцедуры

Процедура ОбработчикиПервоначальногоЗаполненияОбщие()
	
	Константы.ГрупповойРасчетПравДоступаРазмерПорции.Установить(100);
	Константы.ПороговыйКоэффициентДляЗаписиПравПоштучно.Установить(100);
	
	Попытка
		ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем = Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Получить();
		Если ЗначениеЗаполнено(ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем) Тогда 
			Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Установить(ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	УстановитьНастройкиОчередиЗаданий();
	
	// Заполнение поставляемых данных объектов подсистемы "Задачи"
	РаботаСЗадачами.ЗаполнитьПоставляемыеДанные(Истина);
	
	// Заполнение адресной книги
	Справочники.АдреснаяКнига.ЗаполнитьАдреснуюКнигу();
	РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ЗаполнитьСловаПоиска();
	
	// Заполнение справочника КлючевыеОперации
	ВыполнитьНачальноеЗаполнениеСпискаКлючевыхОпераций();
	
	// С СВ нельзя работать без пользователя, установим пользователя регзаданиям
	ИмяТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если Не ЗначениеЗаполнено(ИмяТекущегоПользователя) Тогда
		ИмяТекущегоПользователя = "Администратор";
	КонецЕсли;
	РеглЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.АктуализироватьСоставАвтообсуждений);
	РеглЗадание.ИмяПользователя = ИмяТекущегоПользователя;
	РеглЗадание.Записать();
	РеглЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбновлениеОбсуждений);
	РеглЗадание.ИмяПользователя = ИмяТекущегоПользователя;
	РеглЗадание.Записать();
	РеглЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ДиспетчерПолученияКОД);
	РеглЗадание.ИмяПользователя = ИмяТекущегоПользователя;
	РеглЗадание.Записать();
	РеглЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.УведомлениеПользователейОСобытиях);
	РеглЗадание.ИмяПользователя = ИмяТекущегоПользователя;
	РеглЗадание.Записать();
	
	// Внешнее подписание.
	Справочники.СервисыВнешнегоПодписания.ЗаполнитьПредопределенные();
	
	Константы.ЧислоПотоковОбновленияКэширующихДанных.Установить(5);
	Константы.ЧислоПотоковДолгогоОбновленияКэширующихДанных.Установить(2);
	
	Константы.ПериодХраненияЗамеров.Установить(100);
	
	Константы.ОтсрочкаУдаленияДанныхУничтоженныхДокументов.Установить(14);
	
	ЗаполнитьИспользованиеLibreOfficeПодLinux();
	
	ПланыОбмена.ИнтегрированныеСистемы.ИнициализироватьПредопределенныйУзел();
	
	Справочники.СтавкиНДС.СоздатьЭлементыПервоначальногоЗаполнения();
	
КонецПроцедуры

Процедура ОбработчикиПервоначальногоЗаполненияЗависящиеОтРедакции()
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() И КОДСервер.ЭтоПодчиненныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	// Установка значений настроек программы
	
	Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);
	Константы.ИспользоватьЗадачи.Установить(Истина);
	Константы.ИспользоватьХранилищеФайлов.Установить(Истина);
	Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	
	Константы.ИспользоватьНоменклатуруДел.Установить(Истина);
	Константы.ИспользоватьЖурналПередачиДокументов.Установить(Истина);
	Константы.ИспользоватьСоставДокументов.Установить(Истина);
	
	Константы.ИспользоватьСвязиОбъектов.Установить(Истина);
	Константы.ИспользоватьРезолюцииВДокументах.Установить(Истина);
	Константы.ИспользоватьВизыСогласования.Установить(Истина);
	
	Константы.ИзменятьЗаданияЗаднимЧислом.Установить(Истина);
	Константы.ИспользоватьПеренаправлениеЗадач.Установить(Истина);
	
	Константы.ИспользоватьСостоянияДокументов.Установить(Истина);
	Константы.ОграничиватьДоступностьПолейПоСостоянию.Установить(Истина);
	Константы.РазрешитьРучноеИзменениеСостоянияДокументов.Установить(Истина);
	
	Константы.ИспользоватьСпискиРассылкиПоКонтрагентам.Установить(Истина);
	Константы.ИзменениеФайловMSWordТолькоНаСервере.Установить(Ложь);
	
	Константы.ИспользоватьАвтозаполнениеФайлов.Установить(Истина);
	Константы.ИспользоватьГруппыПользователей.Установить(Истина);
	
	Константы.ИспользоватьВопросыВыполненияЗадач.Установить(Истина);
	Константы.ОчищатьДанныеДляПолнотекстовогоПоиска.Установить(Истина);
	
	Константы.ОсновнаяЕдиницаДлительности.Установить(Перечисления.ЕдиницыДлительности.Час);
	Константы.ОсновнаяЕдиницаТрудозатрат.Установить(Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас);
	
	Константы.ИспользоватьРеестры.Установить(Истина);
	
	Константы.ИспользоватьБизнесСобытия.Установить(Истина);
	Константы.ИспользоватьУведомления.Установить(Истина);
	
	Константы.ИспользоватьКонтрольОбъектов.Установить(Истина);
	
	Константы.ИспользоватьРабочийКалендарь.Установить(Истина);
	Константы.ИспользоватьУправлениеМероприятиями.Установить(Истина);
	Константы.ИспользоватьОтсутствия.Установить(Истина);
	Константы.ИспользоватьБронированиеПомещений.Установить(Истина);
	
	Константы.ИспользоватьСохранениеНастроекКакРекомендованных.Установить(Истина);
	
	Константы.ИспользоватьКонтрольныеТочки.Установить(Истина);
	Константы.ИспользоватьРанги.Установить(Истина);
	
	МаксимальныйРазмерВнешнегоИсходящегоПисьма = 20;
	Константы.МаксимальныйРазмерВнешнегоИсходящегоПисьма.Установить(МаксимальныйРазмерВнешнегоИсходящегоПисьма);
	
	Константы.РазрешитьИзменятьНастройкиУведомлений.Установить(Истина);
	
	// Связи документов.
	Константы.КоличествоУровнейСвязейДляОтображенияВДокументе.Установить(3);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда 
		Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить(Истина);
		Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Установить(Истина);
	КонецЕсли;
	
	Константы.СрокХраненияБизнесСобытий.Установить(7); // ставим срок хранения бизнес-событий - 7 дней
	Константы.СрокХраненияПротоколаДоставкиПочты.Установить(30); // 30 дней

	// Заполнение констант для формирования служебной информации при ответе и пересылке
	Константы.СокращатьИнформациюОПисьмеПриОтвете.Установить(Ложь);
	Константы.СокращатьИнформациюОПисьмеПриПересылке.Установить(Ложь);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете.Установить(Истина);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке.Установить(Истина);
	Константы.СокращатьПредставлениеАдресатов.Установить(Истина);
	Константы.ЧислоАдресатовДляКраткогоПредставления.Установить(30);
	Константы.СимволЦитированияВПереписке.Установить("> ");
	Константы.ВидЦитированияПриОтветеВФорматеHTML.Установить(Перечисления.ВидыЦитированияПриОтвете.ВертикальнаяПолоса);
	
	// БЭД
	Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Установить(Ложь);
	Константы.ИспользоватьВнутренниеДокументыЭДО.Установить(Ложь);
	Константы.ОтправлятьВходящиеДокументыНаУтверждение.Установить(Истина);
	
	Константы.ИспользоватьСхемыПомещений.Установить(Истина);
	
	// Использование разрезов доступа.
	МенеджерЗначения = Константы.ИспользованиеРазрезовДоступа.СоздатьМенеджерЗначения();
	МенеджерЗначения.НачальноеЗаполнение();
	
	Константы.СписокРасширенийСканКопийОригиналов.Установить(
		"bmp, gif, jpeg, jpg, png, tiff, tif, wmf, emf, pdf");
	
	Константы.ИспользоватьРолиФайлов.Установить(Истина);
	
	Константы.ИспользоватьКатегорииДанных.Установить(Ложь);
	Константы.ИспользоватьАвтоматическуюКатегоризациюДанных.Установить(Ложь);
	Константы.ИспользоватьПроверкуКатегорий.Установить(Ложь);
	
	// Актуализация данных.
	Константы.ИспользоватьАктуализациюДанных.Установить(Истина);
	Константы.ПередаватьРуководителямЗадачиНедействительныхПодчиненных.Установить(Истина);
	
	Константы.СтраницаВставкиШтампаЭП.Установить(Перечисления.СтраницаВставкиКартинки.Последняя);
	Константы.ИтоговыйФорматФайлаСоШтампомЭП.Установить(
		Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.Оригинальный);
	Константы.РасположениеШтампаЭПВPdf.Установить(Перечисления.МестаВставкиКартинки.ЛевыйНижний);	
	
	Константы.СпособВставкиШтампаЭПВPDF.Установить(Перечисления.СпособыВставкиШтампаЭПВPDF.Встроенный);
	
	Константы.ИспользоватьОтложенноеНачалоВыполненияДействий.Установить(Истина);
	
	Константы.РасширенияФайловICalendar.Установить("ICS ICAL IFB ICALENDAR");
	
	Константы.СпособСогласованияВРежимеЗамечаний.Установить(
		Перечисления.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord);
	
	Константы.ПредельныйРазмерДляПредпросмотра.Установить( 10 * 1024 * 1024 );
	
	Менеджер = Константы.РазмерПорцииОчередиДляПоискаИсторическихДанныхКОД.СоздатьМенеджерЗначения();
	Менеджер.Значение = 500;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
	
	// Установка значений настроек программы
	
	// Начальное заполнение справочника ВидыКонтактнойИнформации
	УправлениеКонтактнойИнформациейДокументооборот.КонтактнаяИнформацияОбновлениеИБ();
	
	// Нумератор для внутренних
	НумераторОбъект = Справочники.Нумераторы.ДокументыПредприятия.ПолучитьОбъект();
	Если ПустаяСтрока(НумераторОбъект.ФорматНомера) Тогда 
		НумераторОбъект.Периодичность = Перечисления.ПериодичностьНумераторов.Год;
		НумераторОбъект.ФорматНомера  = "[Номер]";
		НумераторОбъект.Назначение = Перечисления.НазначенияНумераторов.РегистрационныйНомер;
		Нумерация.СформироватьПримерНомера(НумераторОбъект.ФорматНомера, НумераторОбъект.Пример, "");
		НумераторОбъект.Записать();
	КонецЕсли;
	
	СоздатьОбщийНумераторДляВременныхНомеров();
	
	// Способы доставки
	СпособыДоставки = Новый СписокЗначений;
	СпособыДоставки.Добавить(НСтр("ru = 'Почта'"));
	СпособыДоставки.Добавить(НСтр("ru = 'Email'"));
	СпособыДоставки.Добавить(НСтр("ru = 'Факс'"));
	СпособыДоставки.Добавить(НСтр("ru = 'Курьер'"));
	СпособыДоставки.Добавить(НСтр("ru = 'Фельдсвязь'"));
	
	Для Каждого СпособДоставки Из СпособыДоставки Цикл
		Если Справочники.СпособыДоставки.НайтиПоНаименованию(СпособДоставки.Значение).Пустая() Тогда
			СпособДоставкиОбъект = Справочники.СпособыДоставки.СоздатьЭлемент();
			СпособДоставкиОбъект.Наименование = СпособДоставки.Значение;
			СпособДоставкиОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	РаботаСРабочимСтолом.ЗаполнитьПоставляемыеДанные();
	
	// Начальное заполнение профилей групп доступа
	Справочники.ПрофилиГруппДоступа.ОбновитьПоставляемыеПрофили();
	
	// Профиль "Пользователи" назначается всем пользователям
	ПрофильПользователи = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(
		"c999acb1-d5f5-11de-a544-00179ab398dc");
	РегистрыСведений.ПолномочияСотрудников.ДобавитьПолномочия(
		Справочники.РабочиеГруппы.ВсеПользователи, ПрофильПользователи);
	
	// Заполнение комментариев предопределенных типов связей.
	ЗаполнитьКомментарииТиповСвязей();
	ЗаполнитьСокращенноеНаименованиеСвязей();
	
	// Заполнение настроек предопределенных связей.
	ЗаполнитьНастройкиСвязейПредопределенные();
	
	// Заполнение справочника Валюты
	КодыВалют = Новый Массив;
	КодыВалют.Добавить("643");
	КодыВалют.Добавить("840");
	КодыВалют.Добавить("978");
	Обработки.ЗагрузкаКурсовВалют.ДобавитьВалютыПоКоду(КодыВалют);
	
	СправочникСсылка = Справочники.Валюты.НайтиПоКоду("643"); // рубль
	Константы.ОсновнаяВалюта.Установить(СправочникСсылка);
	
	// Заполнение справочника КлассификаторЕдиницИзмерения
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("796"); // шт
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("166"); // кг
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("778"); // упак
	
	// Заполнение справочника ВидыБизнесСобытий
	ЗаполнитьВидыБизнесСобытий();
	
	// Заполнение справочника ВидыОтсутствий
	ЗаполнитьВидыОтсутствий();
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		РаботаСФайламиВызовСервера.ИнициализироватьКонстантуХранитьФайлыВТомахНаДиске();
	КонецЕсли;
	
	// Все тома хранения файлов переносим в группу "Группа по умолчанию"
	Группа = Справочники.ТомаХраненияФайлов.НайтиПоНаименованию("Группа по умолчанию", Истина);
	Если Группа = Неопределено ИЛИ Группа = Справочники.ТомаХраненияФайлов.ПустаяСсылка() Тогда
		Группа = Справочники.ТомаХраненияФайлов.СоздатьГруппу();
		Группа.Наименование = "Группа по умолчанию";
		Группа.Записать();
	КонецЕсли;
	
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2015Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2016Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2017Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2019Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2020Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2021Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2022Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2023Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2024Год();
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2025Год();
	
	// Обновление графиков работы
	Выборка = Справочники.ГрафикиРаботы.Выбрать();
	Пока Выборка.Следующий() Цикл
		ГрафикРаботыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихЧасовВДне) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихЧасовВДне = 8;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихЧасовВНеделе) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихЧасовВНеделе = 40;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихДнейВМесяце) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихДнейВМесяце = 20;
		КонецЕсли;
		ГрафикРаботыОбъект.Записать();
	КонецЦикла;
	
	ВыполнятьОтправкуВОтдельномРегламентномЗадании = Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Получить();
	Если ВыполнятьОтправкуВОтдельномРегламентномЗадании = Ложь Тогда
		ВыполнятьОтправкуВОтдельномРегламентномЗадании = Истина;
		Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Установить(ВыполнятьОтправкуВОтдельномРегламентномЗадании);
	КонецЕсли;
	
	// Создание поставляемых видов проектов
	СоздатьВидПроекта(НСтр("ru = 'Общий'"));
	
	ЗаполнитьОбластиДелегированияИЗамещения();
	
	// Создание поставляемых настроек доступности
	ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	Для Каждого Строка Из ОписаниеНастроекДоступности Цикл
		
		НастройкаДоступностиСсылка = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
		|ГДЕ
		|	НастройкиДоступностиПоСостоянию.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", НастройкаДоступностиСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			НастройкаОбъект = Справочники.НастройкиДоступностиПоСостоянию.СоздатьЭлемент();
			НастройкаОбъект.УстановитьСсылкуНового(НастройкаДоступностиСсылка);
		Иначе // Обновление существующей настройки	 
			НастройкаОбъект = НастройкаДоступностиСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		НастройкаОбъект.Наименование = Строка.Наименование;
		НастройкаОбъект.ТипДокумента = Строка.ТипДокумента;
		НастройкаОбъект.ВариантНастройкиДляВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов;
		
		ЗаполнитьУчастниковНастройкиПоСостоянию(НастройкаОбъект, Строка.Роль); //@skip-check query-in-loop
		
		НастройкиДоступности = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(НастройкаОбъект.ТипДокумента, Строка.Роль);
		НастройкаОбъект.НастройкиДоступности.Очистить();
		НастройкаОбъект.НастройкиДоступности.Загрузить(НастройкиДоступности);
		
		НастройкаОбъект.Записать();
	КонецЦикла;
	
	// Загрузка типовых инструкций
	РаботаСИнструкциями.ЗагрузитьТиповыеИнструкции();
	
	// Установить у системной учетной записи опцию "Использовать для легкой почты"
	СистемнаяУчетнаяЗаписьОбъект = 
		Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	СистемнаяУчетнаяЗаписьОбъект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Легкая;
	СистемнаяУчетнаяЗаписьОбъект.Записать();
	
	// Установить настройки по умолчанию для механизма выполнения задач по почте
	ВыполнениеЗадачПоПочтеСервер.УстановитьНастройкиПоУмолчанию();
	
	ЗаполнитьПраваПапкиФорума(ПредопределенноеЗначение("Справочник.ПапкиФорума.ТемыДокументов"));
	
	РазделОбщиеТемы = Справочники.ПапкиФорума.НайтиПоНаименованию(НСтр("ru = 'Общие темы'"), Истина);
	Если Не ЗначениеЗаполнено(РазделОбщиеТемы) Тогда
		РазделОбщиеТемыОбъект = Справочники.ПапкиФорума.СоздатьЭлемент();
		РазделОбщиеТемыОбъект.Заполнить(Неопределено);
		РазделОбщиеТемыОбъект.Наименование = НСтр("ru = 'Общие темы'");
		РазделОбщиеТемыОбъект.Записать();
		ЗаполнитьПраваПапкиФорума(РазделОбщиеТемыОбъект.Ссылка);
	КонецЕсли;
	
	// Заполнение признака проверки электронных адресов в видах КИ
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК ВидКИ
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И НЕ ВидыКонтактнойИнформации.ПроверятьКорректность");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидКИОбъект = Выборка.ВидКИ.ПолучитьОбъект();
		ВидКИОбъект.ПроверятьКорректность = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКИОбъект);
	КонецЦикла;
	
	Справочники.Алгоритмы.ЗаполнитьПредопределенные();
	Справочники.АвтоподстановкиДляОбъектов.ЗаполнитьПредопределенные();
	Справочники.АвтоподстановкиДляПроцессов.ЗаполнитьПредопределенные();
	Справочники.Метрики.ЗаполнитьПредопределенные();
	
	// Отправка SMS.
	УстановитьНастройкиОтправкиSMS();
	
	// Способы уведомления.
	УстановитьСпособыУведомления();
	
	// Подписки на уведомления по умолчанию.
	РегистрыСведений.НастройкиУведомлений.ЗаполнитьПодпискиПоУмолчанию();
	
	// Начальное заполнение уровней доступа и разрешений.
	Справочники.УровниДоступа.ЗаполнитьРеквизитыПредопределенныхЭлементов();
	РегистрыСведений.УдалитьРазрешенияДоступаОбщие.НачальноеЗаполнение();
	
	// Заполнение справочника УровниКонтроля
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УровниКонтроля.Ссылка
		|ИЗ
		|	Справочник.УровниКонтроля КАК УровниКонтроля";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НовыйУровень = Справочники.УровниКонтроля.СоздатьЭлемент();
		НовыйУровень.Наименование = НСтр("ru = '1 (Стратегический)'");
		НовыйУровень.Записать();
		
		НовыйУровень = Справочники.УровниКонтроля.СоздатьЭлемент();
		НовыйУровень.Наименование = НСтр("ru = '2 (Тактический)'");
		НовыйУровень.Записать();
		
		НовыйУровень = Справочники.УровниКонтроля.СоздатьЭлемент();
		НовыйУровень.Наименование = НСтр("ru = '3 (Оперативный)'");
		НовыйУровень.Записать();
	КонецЕсли;
	
	// Создание организации
	Если Не Константы.ИспользоватьУчетПоОрганизациям.Получить() Тогда 
		
		КоличествоОрганизаций = Справочники.Организации.КоличествоОрганизаций();
		
		Если КоличествоОрганизаций = 0 Тогда
			СоздатьОрганизацию();
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение настроек распознавания по умолчанию.
	РаботаСФайламиВызовСервера.УстановитьПрограммуРаспознавания(
		Перечисления.ПрограммыРаспознавания.СервисРаспознавания);
	
	Константы.ЯзыкРаспознавания.Установить(
		РаботаСФайламиВызовСервера.ЯзыкРаспознаванияВСервисеПоУмолчанию());
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		РаботаСФайламиВызовСервера.УстановитьИспользоватьРаспознавание(Истина);	
	КонецЕсли;
	
	Константы.ГраницаОтключенияНачалаАвтораспознаванияВСервисе.Установить(100);
	Константы.ПорогБалансаСтраницСервисаРаспознавания.Установить(200);
	Константы.ПорогСрокаДействияТарифаСервисаРаспознавания.Установить(7);
	
	// Переопределяемое первоначальное заполнение информационной базы. Выполняется последним.
	ЛокализацияКонфигурацииПереопределяемый.ПервыйЗапуск();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда 
		СПАРКРиски.ОбщиеДанныеНачальноеЗаполнениеДанныхСПАРКРиски();
	КонецЕсли;
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	
	НастроитьЧатБота();
	
	НастроитьШаблоныИменФайлов();
	
	ЗаполнитьНастройкиСвязей();
	
	СоздатьРабочуюГруппуРуководителиПодразделений();
	
	РедакцииКонфигурации.ПроверитьПереименоватьНаименованиеПредопределенных();
	РедакцииКонфигурации.ИнициализацияПриПервомЗапуске();	
	
	МЭДО.ИнициализацияПриПервомЗапуске();
	
	ОбновлениеИнформационнойБазыХолдинг.ЗаменитьСсылкиВВидахДоступа();
	ОбновлениеИнформационнойБазыХолдинг.ЗафиксироватьОтметкиВремениПредопределенныхОбъектов();
	
	Константы.ТаймлистАдресСервиса.Установить("restapi.timelist.ru");
	РасширенияФайловТаймлистПоУмолчанию = ТаймлистКлиентСервер.РасширенияФайловТаймлистПоУмолчанию();
	Константы.ТаймлистСписокРасширенийФайлов.Установить(РасширенияФайловТаймлистПоУмолчанию);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление новых версий ИБ.

Процедура ЗаполнитьНастройкиСвязей()
	
	Константы.КоличествоУровнейСвязейДляОтображенияВДокументе.Установить(4);
	
	// тут только связи с пустым полем СокращенноеНаименование перезапишем 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыСвязей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТипыСвязей КАК ТипыСвязей
		|ГДЕ
		|	ТипыСвязей.СокращенноеНаименование = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТипСвязиОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТипСвязиОбъект.СокращенноеНаименование = СокрЛП(Лев(ТипСвязиОбъект.Наименование, 37));
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТипСвязиОбъект);
		
	КонецЦикла;	

	// теперь просто все связи обойдем
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыСвязей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТипыСвязей КАК ТипыСвязей";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		// перезапишем РС НастройкаСвязей - ВСЕ связи делаем важными
		
		ЗапросНастройкаСвязей = Новый Запрос;
		ЗапросНастройкаСвязей.Текст = 
			"ВЫБРАТЬ
			|	НастройкаСвязей.ТипСвязи КАК ТипСвязи,
			|	НастройкаСвязей.СсылкаИз КАК СсылкаИз,
			|	НастройкаСвязей.СсылкаНа КАК СсылкаНа,
			|	НастройкаСвязей.ХарактерСвязи КАК ХарактерСвязи,
			|	НастройкаСвязей.ТипОбратнойСвязи КАК ТипОбратнойСвязи,
			|	НастройкаСвязей.ХарактерОбратнойСвязи КАК ХарактерОбратнойСвязи,
			|	НастройкаСвязей.Важная КАК Важная,
			|	НастройкаСвязей.Комментарий КАК Комментарий,
			|	НастройкаСвязей.Обязательная КАК Обязательная,
			|	НастройкаСвязей.Предопределенная КАК Предопределенная,
			|	НастройкаСвязей.СинхронизироватьДоступ КАК СинхронизироватьДоступ,
			|	НастройкаСвязей.ВидКорреспонденцииДокументИз,
			|	НастройкаСвязей.ВидКорреспонденцииДокументНа
			|ИЗ
			|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
			|ГДЕ
			|	НастройкаСвязей.ТипСвязи = &ТипСвязи
			|	И НастройкаСвязей.Предопределенная";
		
		ЗапросНастройкаСвязей.УстановитьПараметр("ТипСвязи", ВыборкаДетальныеЗаписи.Ссылка);
		РезультатЗапросаСвязи = ЗапросНастройкаСвязей.Выполнить();
		ВыборкаСвязи = РезультатЗапросаСвязи.Выбрать();
		
		Пока ВыборкаСвязи.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.НастройкаСвязей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипСвязи.Установить(ВыборкаСвязи.ТипСвязи);				
			НаборЗаписей.Отбор.СсылкаИз.Установить(ВыборкаСвязи.СсылкаИз);
			НаборЗаписей.Отбор.СсылкаНа.Установить(ВыборкаСвязи.СсылкаНа);
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаСвязи);
			Запись.Важная = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		КонецЦикла;	
		
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет поля в РС ДанныеДокументовПредприятия  
Процедура ЗаполнитьРесурсыСвязейВРСДанныеДокументов(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаписатьРС_НастройкиШаблоновИмени(ТипОбъекта, ШаблонИмени) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НастройкиШаблоновИмени.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
	МенеджерЗаписи.ШаблонИмени = ШаблонИмени;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Копирует настройки доступности по состоянию для нового поля 
//
// Параметры:
//  ИмяПоля - Строка - имя новой строки в макете настроек доступности по состоянию
//  ПолеКопирования - Строка - имя строки настроек доступности по состоянию, от которой копируем настройки.
//  ТипДокумента - Строка - имя типа документа настройки.
//
Процедура СкопироватьНастройкиДоступностиПоСостояниюДляНовогоПоля(ИмяПоля, ПолеКопирования, 
	ТипДокумента = "ДокументыПредприятия") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(
		"ВЫБРАТЬ
		|	НастройкиДоступностиПоСостоянию.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
		|ГДЕ
		|	НастройкиДоступностиПоСостоянию.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.%1)
		|	И НЕ ""%2"" В
		|				(ВЫБРАТЬ
		|					НастройкиДоступности.ИмяПоляКоманды
		|				ИЗ
		|					Справочник.НастройкиДоступностиПоСостоянию.НастройкиДоступности КАК НастройкиДоступности
		|				ГДЕ
		|					НастройкиДоступности.Ссылка = НастройкиДоступностиПоСостоянию.Ссылка)",
		ТипДокумента, ИмяПоля);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(
				Новый Структура("ИмяПоляКоманды", ПолеКопирования));
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
				НоваяСтрока.ИмяПоляКоманды = ИмяПоля;
				НоваяСтрока.Состояние = Строка.Состояние;
				НоваяСтрока.Доступность = Строка.Доступность;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВыборкаОбъект);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(
				СтрШаблон(НСтр("ru = 'Ошибка добавления поля ""%1"" в настройки доступности по состоянию.'",
					ОбщегоНазначения.КодОсновногоЯзыка()), ИмяПоля),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Заполнение видов отсутствия.
Процедура ЗаполнитьВидыОтсутствий()
	
	// Если виды Отсутствия уже введны от заполнения не будет.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыОтсутствий.Ссылка
		|ИЗ
		|	Справочник.ВидыОтсутствий КАК ВидыОтсутствий");
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Больничный
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Больничный'");
	ВидОтсутствияОбъект.Записать();
	
	// Временная удаленная работа
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Временная удаленная работа'");
	ВидОтсутствияОбъект.ЭтоУдаленнаяРабота = Истина;
	ВидОтсутствияОбъект.Записать();
	
	// Командировка
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Командировка'");
	ВидОтсутствияОбъект.Записать();
	
	// Личные обстоятельства
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Личные обстоятельства'");
	ВидОтсутствияОбъект.Записать();
	
	// Местная командировка
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Местная командировка'");
	ВидОтсутствияОбъект.Записать();
	
	// Отпуск
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Отпуск'");
	ВидОтсутствияОбъект.Записать();
	
	// Поликлиника
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Поликлиника'");
	ВидОтсутствияОбъект.Записать();
	
	// Другое
	ВидОтсутствияОбъект = Справочники.ВидыОтсутствий.СоздатьЭлемент();
	ВидОтсутствияОбъект.Наименование = НСтр("ru = 'Другое'");
	ВидОтсутствияОбъект.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьУчастниковНастройкиПоСостоянию(НастройкаОбъект, Роль)
	
	НастройкаОбъект.ИспользоватьДля.Очистить();
	
	Если Роль = "Пользователь" Тогда 
		
		НоваяСтрока = НастройкаОбъект.ИспользоватьДля.Добавить();
		НоваяСтрока.Участник = Справочники.РабочиеГруппы.ВсеПользователи;
	
	ИначеЕсли Роль = "Делопроизводитель" Тогда 
		
		Если НастройкаОбъект.ТипДокумента = Перечисления.ТипыОбъектов.ДокументыПредприятия Тогда 	
			ЭтоДелопроизводитель = "Роль.РегистрацияДокументовПредприятия";
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПолномочияСотрудников.Владелец КАК Ссылка
			|ИЗ
			|	РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
			|ГДЕ
			|	ПолномочияСотрудников.Полномочия В
			|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				ПрофилиГруппДоступаРоли.Ссылка
			|			ИЗ
			|				Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
			|			ГДЕ
			|				ПрофилиГруппДоступаРоли.Роль = &Роль
			|				И НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Роль", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ЭтоДелопроизводитель));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = НастройкаОбъект.ИспользоватьДля.Добавить();
			НоваяСтрока.Участник = Выборка.Ссылка;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВидБизнесСобытий(ВидСобытия, ПолноеНаименование = "") Экспорт
	
	Элемент = ВидСобытия.ПолучитьОбъект();
	
	Элемент.ДатаСоздания = ТекущаяДатаСеанса();
	
	ПользовательАдминистратор = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
	Если ЗначениеЗаполнено(ПользовательАдминистратор) Тогда
		СотрудникиАдминистратора = Сотрудники.ЗаменитьПользователейСотрудниками(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПользовательАдминистратор), Истина);
		Если СотрудникиАдминистратора.Количество() <> 0 Тогда
			Элемент.Ответственный = СотрудникиАдминистратора[0];
		Иначе	
			Элемент.Ответственный = ПользовательАдминистратор;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолноеНаименование) Тогда
		Элемент.Наименование = ПолноеНаименование;
	КонецЕсли;
	Элемент.Записать();
	
КонецПроцедуры	

Функция СоздатьВидПроекта(Наименование)
	
	ВидПроектаОбъект = Справочники.ВидыПроектов.СоздатьЭлемент();
	ВидПроектаОбъект.Наименование = Наименование;
	ВидПроектаОбъект.Записать();
	Возврат ВидПроектаОбъект.Ссылка;

КонецФункции

Процедура ЗаполнитьПраваПредопределенных(Параметры = Неопределено) Экспорт
	
	// Шаблоны файлов
	Шаблоны = Справочники.ПапкиФайлов.Шаблоны;
	ТаблицаНастроек = РегистрыСведений.НастройкиПравОбъектов.Прочитать(Шаблоны).Настройки;
	Если ТаблицаНастроек.Количество() = 0 Тогда
		Если ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("МонопольныйРежим")
			И Параметры.МонопольныйРежим = Ложь Тогда
			Параметры.МонопольныйРежим = Истина;
			Возврат;
		КонецЕсли;
		Настройка = ТаблицаНастроек.Добавить();
		Настройка.ВладелецНастройки = Шаблоны;
		Настройка.НаследованиеРазрешено = Истина;
		Настройка.Пользователь = Справочники.РабочиеГруппы.ВсеПользователи;
		Настройка.ЧтениеПапокИФайлов = Истина;
		РегистрыСведений.НастройкиПравОбъектов.Записать(Шаблоны, ТаблицаНастроек, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПраваПапкиФорума(СсылкаНаПапку) Экспорт
	
	ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(СсылкаНаПапку).Настройки;
	Если ОписаниеПрав.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ОписаниеПрав.Добавить();
	Строка.ВладелецНастройки = СсылкаНаПапку;
	Строка.ЧтениеПапокИТем = Истина;
	Строка.ДобавлениеТемИСообщений = Истина; 
	Строка.ИзменениеТемИСообщений = Неопределено;
	Строка.ИзменениеПапок = Неопределено;
	Строка.ПометкаУдаленияТемИСообщений = Неопределено;
	Строка.УправлениеПравами = Неопределено;
	Строка.НаследованиеРазрешено = Истина;
	Строка.НастройкаРодителя = Ложь;
	Строка.Пользователь = Справочники.РабочиеГруппы.ВсеПользователи;
	
	РегистрыСведений.НастройкиПравОбъектов.Записать(СсылкаНаПапку, ОписаниеПрав, Истина);
	
КонецПроцедуры

// Выполняет начальное заполнение справочника "Ключевые операции"
//
// Возвращаемое значение:
//  Неопределено
//
Функция ВыполнитьНачальноеЗаполнениеСпискаКлючевыхОпераций() Экспорт
	
	Если ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(Метаданные.Справочники.КлючевыеОперации)
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		// Заполняется в неразделенной области.
		Возврат Неопределено;
	КонецЕсли;
	
	СписокКлючевыхОпераций = Новый Структура();
	СписокКлючевыхОпераций.Вставить("ДействиеЗадачиВыполнениеИзСпискаЗадачиМне",		"Действие задачи. Выполнение из списка: Задачи мне");
	СписокКлючевыхОпераций.Вставить("ДействиеЗадачиВыполнениеИзФормыОбъекта",			"Действие задачи. Выполнение из формы объекта");
	СписокКлючевыхОпераций.Вставить("ДействияУчастниковВыполнениеКомандыГотово",		"Действия участников обработки. Выполнение команды: Готово");
	СписокКлючевыхОпераций.Вставить("ДействияУчастниковОткрытиеФормыОбъекта",			"Действия участников обработки: Открытие формы объекта");
	СписокКлючевыхОпераций.Вставить("ДокументыПредприятияВыполнениеКомандыЗаписать",		"Документы предприятия Выполнение команды: Записать");
	СписокКлючевыхОпераций.Вставить("ДокументыПредприятияВыполнениеКомандыОтборПоКатегориям", "Документы предприятия Выполнение команды: Отбор по категориям");
	СписокКлючевыхОпераций.Вставить("ДокументыПредприятияВыполнениеКомандыОтборПоПапке",	"Документы предприятия Выполнение команды: Отбор по папке");
	СписокКлючевыхОпераций.Вставить("ДокументыПредприятияВыполнениеКомандыОтправитьВОбработку", "Документы предприятия. Выполнение команды: Начать обработку");
	СписокКлючевыхОпераций.Вставить("ДокументыПредприятияВыполнениеКомандыПрерватьОбработку", "Документы предприятия. Выполнение команды: Прервать обработку");
	СписокКлючевыхОпераций.Вставить("ДокументыПредприятияВыполнениеКомандыСоздать",		"Документы предприятия Выполнение команды: Создать");
	СписокКлючевыхОпераций.Вставить("ДокументыПредприятияОткрытиеФормыФормаСпискаСПапками", "Документы предприятия Открытие формы: Список с папками");
	СписокКлючевыхОпераций.Вставить("ДокументыПредприятияОткрытиеФормыФормаСпискаСПапками_ОбращенияГраждан", "Документы предприятия Открытие формы: Список с папками: Обращения граждан");
	СписокКлючевыхОпераций.Вставить("ЗадачаИсполнителяОткрытиеФормыЗадачиПодчиненных",	"Задача исполнителя Открытие формы: Задачи подчиненных");
	СписокКлючевыхОпераций.Вставить("ЗадачаИсполнителяОткрытиеФормыМоиЗадачи",			"Задача исполнителя Открытие формы: Мои задачи");
	СписокКлючевыхОпераций.Вставить("ЗадачаИсполнителяОткрытиеФормыФормаСписка",		"Задача исполнителя Открытие формы: Форма списка");
	СписокКлючевыхОпераций.Вставить("ЗадачиОткрытиеФормыЗадачиМне",						"Задачи Открытие формы: Задачи мне");
	СписокКлючевыхОпераций.Вставить("ИсполнениеВыполнениеКомандыИсполнено",				"Исполнение Выполнение команды: Исполнено");
	СписокКлючевыхОпераций.Вставить("ИсполнениеВыполнениеКомандыСтартовать",			"Исполнение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("ОзнакомлениеВыполнениеКомандыОзнакомился",			"Ознакомление Выполнение команды: Ознакомился");
	СписокКлючевыхОпераций.Вставить("ОзнакомлениеВыполнениеКомандыСтартовать",			"Ознакомление Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("ПолнотекстовыйПоискВыполнениеКомандыНайти",		"Полнотекстовый поиск Выполнение команды: Найти");
	СписокКлючевыхОпераций.Вставить("ПоручениеВыполнениеКомандыВыполнено",				"Поручение Выполнение команды: Выполнено");
	СписокКлючевыхОпераций.Вставить("ПоручениеВыполнениеКомандыСтартовать",				"Поручение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("ПриглашениеВыполнениеКомандыНеПринято",			"Приглашение Выполнение команды: Не принято");
	СписокКлючевыхОпераций.Вставить("ПриглашениеВыполнениеКомандыПринято",				"Приглашение Выполнение команды: Принято");
	СписокКлючевыхОпераций.Вставить("ПриглашениеВыполнениеКомандыСтартовать",			"Приглашение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("РассмотрениеВыполнениеКомандыВыполнено",			"Рассмотрение Выполнение команды: Выполнено");
	СписокКлючевыхОпераций.Вставить("РассмотрениеВыполнениеКомандыСтартовать",			"Рассмотрение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("РегистрацияВыполнениеКомандыЗарегистрировано",		"Регистрация Выполнение команды: Зарегистрировано");
	СписокКлючевыхОпераций.Вставить("РегистрацияВыполнениеКомандыНеЗарегистрировано",	"Регистрация Выполнение команды: Не зарегистрировано");
	СписокКлючевыхОпераций.Вставить("РегистрацияВыполнениеКомандыСтартовать",			"Регистрация Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыНеСогласовано",		"Согласование Выполнение команды: Не согласовано");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыСогласовано",			"Согласование Выполнение команды: Согласовано");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыСогласованоСЗамечаниями","Согласование Выполнение команды: Согласовано с замечаниями");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыСтартовать",			"Согласование Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("УтверждениеВыполнениеКомандыНеУтверждено",			"Утверждение Выполнение команды: Не утверждено");
	СписокКлючевыхОпераций.Вставить("УтверждениеВыполнениеКомандыСтартовать",			"Утверждение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("УтверждениеВыполнениеКомандыУтверждено",			"Утверждение Выполнение команды: Утверждено");
	СписокКлючевыхОпераций.Вставить("ФайлыВыполнениеКомандыЗаписать",					"Файлы Выполнение команды: Записать");
	СписокКлючевыхОпераций.Вставить("ФайлыВыполнениеКомандыОтборПоКатегориям",			"Файлы Выполнение команды: Отбор по категориям");
	СписокКлючевыхОпераций.Вставить("ФайлыВыполнениеКомандыОтборПоПапке",				"Файлы Выполнение команды: Отбор по папке");
	СписокКлючевыхОпераций.Вставить("ФайлыОткрытиеФормыХранилищеФайлов",				"Файлы Открытие формы: Хранилище файлов");
	СписокКлючевыхОпераций.Вставить("ИсполнениеСтартовать",								"Исполнение Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("ОзнакомлениеСтартовать",							"Ознакомление Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("ПоручениеСтартовать",								"Поручение Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("ПриглашениеСтартовать",							"Приглашение Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("РассмотрениеСтартовать",							"Рассмотрение Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("РегистрацияСтартовать",							"Регистрация Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("СогласованиеСтартовать",							"Согласование Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("УтверждениеСтартовать",							"Утверждение Фоновый старт процесса");
	СписокКлючевыхОпераций.Вставить("ИсполнениеФоновоеВыполнениеКомандыИсполнено",		"Исполнение Фоновое выполнение команды: Исполнено");
	СписокКлючевыхОпераций.Вставить("ОзнакомлениеФоновоеВыполнениеКомандыОзнакомился",	"Ознакомление Фоновое выполнение команды: Ознакомился");
	СписокКлючевыхОпераций.Вставить("ПоручениеФоновоеВыполнениеКомандыВыполнено",		"Поручение Фоновое выполнение команды: Выполнено");
	СписокКлючевыхОпераций.Вставить("ПриглашениеФоновоеВыполнениеКомандыПринято",		"Приглашение Фоновое выполнение команды: Принято");
	СписокКлючевыхОпераций.Вставить("ПриглашениеФоновоеВыполнениеКомандыНеПринято",	"Приглашение Фоновое выполнение команды: Не принято");
	СписокКлючевыхОпераций.Вставить("РассмотрениеФоновоеВыполнениеКомандыВыполнено",	"Рассмотрение Фоновое выполнение команды: Выполнено");
	СписокКлючевыхОпераций.Вставить("РегистрацияФоновоеВыполнениеКомандыЗарегистрировано","Регистрация Фоновое выполнение команды: Зарегистрировано");
	СписокКлючевыхОпераций.Вставить("РегистрацияФоновоеВыполнениеКомандыНеЗарегистрировано","Регистрация Фоновое выполнение команды: Не зарегистрировано");
	СписокКлючевыхОпераций.Вставить("СогласованиеФоновоеВыполнениеКомандыСогласовано",	"Согласование Фоновое выполнение команды: Согласовано");
	СписокКлючевыхОпераций.Вставить("СогласованиеФоновоеВыполнениеКомандыНеСогласовано","Согласование Фоновое выполнение команды: Не согласовано");
	СписокКлючевыхОпераций.Вставить("СогласованиеФоновоеВыполнениеКомандыСогласованоСЗамечаниями","Согласование Фоновое выполнение команды: Согласовано с замечаниями");
	СписокКлючевыхОпераций.Вставить("УтверждениеФоновоеВыполнениеКомандыНеУтверждено",	"Утверждение Фоновое выполнение команды: Не утверждено");
	СписокКлючевыхОпераций.Вставить("УтверждениеФоновоеВыполнениеКомандыУтверждено",	"Утверждение Фоновое выполнение команды: Утверждено");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(КлючевыеОперации.Приоритет) КАК Приоритет
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Приоритет) Тогда
		Приоритет = Выборка.Приоритет + 1;
	Иначе
		Приоритет = 1;
	КонецЕсли;
	
	Для Каждого КлючеваяОперация Из СписокКлючевыхОпераций Цикл
		КлючеваяОперацияСсылка = ОценкаПроизводительностиПовтИсп.ПолучитьКлючевуюОперациюПоИмени(КлючеваяОперация.Ключ);
		КлючеваяОперацияОбъект = КлючеваяОперацияСсылка.ПолучитьОбъект();
		КлючеваяОперацияОбъект.Наименование = КлючеваяОперация.Значение;
		Если КлючеваяОперацияОбъект.ЦелевоеВремя = 0 Тогда
			КлючеваяОперацияОбъект.ЦелевоеВремя = 1;
		КонецЕсли;
		Если КлючеваяОперацияОбъект.Приоритет = 0 Тогда
			КлючеваяОперацияОбъект.Приоритет = Приоритет;
			Приоритет = Приоритет + 1;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КлючеваяОперацияОбъект.МинимальноДопустимыйУровень) Тогда
			КлючеваяОперацияОбъект.МинимальноДопустимыйУровень = Перечисления.УровниПроизводительности.Хорошо;
		КонецЕсли;
		КлючеваяОперацияОбъект.Записать();
	КонецЦикла;
	
КонецФункции

// Устанавливает настройки отправки SMS.
//
Процедура УстановитьНастройкиОтправкиSMS()
	
	ИспользоватьТранслитерациюSMS = Ложь;
	РазмерSMS = РаботаСУведомлениямиКлиентСервер.РазмерSMS(1, ИспользоватьТранслитерациюSMS);
	Константы.ИспользоватьТранслитерациюSMS.Установить(ИспользоватьТранслитерациюSMS);
	Константы.ОграничениеКоличестваВДеньSMS.Установить(100);
	Константы.ОграничениеКоличестваВМесяцSMS.Установить(0);
	Константы.ОграничениеКоличестваВсегоВДеньSMS.Установить(0);
	Константы.ОграничениеКоличестваВсегоВМесяцSMS.Установить(0);
	Константы.РазмерSMS.Установить(РазмерSMS);
	
КонецПроцедуры

// Устанавливает способы уведомления по умолчанию.
//
Процедура УстановитьСпособыУведомления()
	
	// По почте
	РегистрыСведений.СпособыУведомленияПользователей.УстановитьСпособУведомленияВсехПользователей(
		Справочники.ВидыКонтактнойИнформации.EmailСотрудника);
	
	// По SMS
	РегистрыСведений.СпособыУведомленияПользователей.УстановитьСпособУведомленияВсехПользователей(
		Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника);
	
КонецПроцедуры

// Создаёт единственную организацию по данным из потерявших актуальность констант
//
Процедура СоздатьОрганизацию()
	
	ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
	ОрганизацияОбъект.Наименование = РедакцииКонфигурацииКлиентСервер.ИмяОрганизации();
	ОрганизацияОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	ОрганизацияОбъект.Доступ.Добавить().Участник = Справочники.РабочиеГруппы.ВсеПользователи;
	ОрганизацияОбъект.Записать();
	
КонецПроцедуры

Процедура НастроитьЧатБота()
	
	СтруктураЗаполнения = Справочники.СостоянияЧатБота.СтруктураСостоянияЧатБота();
	СтруктураЗаполнения.КлючевыеСлова = НСтр("ru = 'Стоп
											|Хватит
											|Остановись
											|Stop
											|Stop it
											|Pull over'");
	СтруктураЗаполнения.Высказывание = НСтр("ru = 'Хорошо'");
	СтруктураЗаполнения.Действие = 
		"ТекущееСостояниеЧатБота = ПредопределенноеЗначение(""Справочник.СостоянияЧатБота.ПустаяСсылка"");
		|ЗапрашиваемыеПараметрыСостоянияЧатБота = Неопределено;";
	Стоп = Справочники.СостоянияЧатБота.Стоп.ПолучитьОбъект();
	Стоп.Заполнить(СтруктураЗаполнения);
	Стоп.Записать();
	
	СтруктураЗаполнения = Справочники.СостоянияЧатБота.СтруктураСостоянияЧатБота();
	СтруктураЗаполнения.Высказывание = НСтр("ru = 'Вот что я могу'");
	Уточнение = Справочники.СостоянияЧатБота.Уточнение.ПолучитьОбъект();
	Уточнение.Заполнить(СтруктураЗаполнения);
	Уточнение.Записать();
	
	СтруктураЗаполнения = Справочники.СостоянияЧатБота.СтруктураСостоянияЧатБота();
	СтруктураЗаполнения.Высказывание = НСтр("ru = 'Я вас не поняла,.
								|Попробуйте задать вопрос по-другому.'");
	НетРезультатовПоиска = Справочники.СостоянияЧатБота.НетРезультатовПоиска.ПолучитьОбъект();
	НетРезультатовПоиска.Заполнить(СтруктураЗаполнения);
	НетРезультатовПоиска.Записать();
	
	СтруктураЗаполнения = Справочники.СостоянияЧатБота.СтруктураСостоянияЧатБота();
	СтруктураЗаполнения.Высказывание = НСтр("ru = 'Секунду'");
	НеНайдено = Справочники.СостоянияЧатБота.НеНайдено.ПолучитьОбъект();
	НеНайдено.Заполнить(СтруктураЗаполнения);
	НеНайдено.Записать();
	
	Справочники.СостоянияЧатБота.ЗаполнитьСостояниеФункционал();
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиВариантовОтчетовДокументооборот(Параметры = Неопределено) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("МонопольныйРежим")
		И Параметры.МонопольныйРежим = Ложь Тогда
		Параметры.МонопольныйРежим = Истина;
		Возврат;
	КонецЕсли;
	
	НастройкиВариантовОтчетовДокументооборот.ЗаполнитьНастройкиВариантовОтчетовДокументооборот();
	
КонецПроцедуры

Процедура ОбновитьРежимыРаспознаванияФайлов(Параметры = Неопределено) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("МонопольныйРежим")
		И Параметры.МонопольныйРежим = Ложь Тогда
		Параметры.МонопольныйРежим = Истина;
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.РежимыРаспознаванияФайлов.ОбновитьРежимРаспознаванияДляВладельцев();
	
КонецПроцедуры

Процедура СформироватьСообщениеОВерсииФорматаОбменаСАрхивом(Параметры = Неопределено) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИнтеграцияС1САрхивом") = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("МонопольныйРежим")
		И Параметры.МонопольныйРежим = Ложь Тогда
		Параметры.МонопольныйРежим = Истина;
		Возврат;
	КонецЕсли;
	
	ОбменСАрхивом.СформироватьСообщениеОВерсииФормата();
	
КонецПроцедуры

// Проверяет наличие общего нумератора для временных номеров и создает его, если он отсутствует
//
Процедура СоздатьОбщийНумераторДляВременныхНомеров() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиНумерации.Нумератор КАК Нумератор
		|ИЗ
		|	РегистрСведений.НастройкиНумерации КАК НастройкиНумерации
		|ГДЕ
		|	НастройкиНумерации.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ДокументыПредприятия)
		|	И НастройкиНумерации.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументов.ПустаяСсылка)
		|	И НастройкиНумерации.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И НастройкиНумерации.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
		|	И НастройкиНумерации.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И НастройкиНумерации.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияНумераторов.ВременныйНомер)
		|	И НастройкиНумерации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	И НастройкиНумерации.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|	И НастройкиНумерации.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
		|	И НастройкиНумерации.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)
		|	И НЕ НастройкиНумерации.Нумератор.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Есть нумератор и настройки нумерации
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим нумератор и запишем настройки
	НачатьТранзакцию();
	
	ПараметрыНумератора = Справочники.Нумераторы.ПолучитьСтруктуруНумераторов();
	ПараметрыНумератора.Наименование = "Временные номера";
	ПараметрыНумератора.ФорматНомера = "[Номер]-[ИндексВидаДок]";
	ПараметрыНумератора.Назначение = Перечисления.НазначенияНумераторов.ВременныйНомер;
	ПараметрыНумератора.Периодичность = Перечисления.ПериодичностьНумераторов.Непериодический;
	ПараметрыНумератора.НезависимаяНумерацияПоОрганизациям = Истина;
	ОшибкаФормированияПримера = "";
	Нумерация.СформироватьПримерНомера(ПараметрыНумератора.ФорматНомера,
		ПараметрыНумератора.Пример,
		ОшибкаФормированияПримера);
	Нумератор = Справочники.Нумераторы.СоздатьНумератор(ПараметрыНумератора);
	
	НастройкиНумерации = РегистрыСведений.НастройкиНумерации.ПолучитьСтруктуруНастроекНумерации();
	СтрокаНастроек = НастройкиНумерации.Добавить();
	СтрокаНастроек.Нумератор = Нумератор;
	СтрокаНастроек.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
	СтрокаНастроек.ВидДокумента = Справочники.ВидыДокументов.ПустаяСсылка();
	СтрокаНастроек.Назначение = Перечисления.НазначенияНумераторов.ВременныйНомер;
	РегистрыСведений.НастройкиНумерации.ЗаписатьНастройкиНумерации(НастройкиНумерации);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьСокращенноеНаименованиеСвязей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыСвязей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТипыСвязей КАК ТипыСвязей
		|ГДЕ
		|	ТипыСвязей.СокращенноеНаименование = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТипСвязиОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТипСвязиОбъект.СокращенноеНаименование = СокрЛП(Лев(ТипСвязиОбъект.Наименование, 37));
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТипСвязиОбъект);
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УстановитьНастройкиОчередиЗаданий() Экспорт
	
	Константы.МаксимальноеЧислоПопытокВыполненияЗаданий.Установить(3);
	Константы.ПериодКонтроляПроблемВыполненияЗаданий.Установить(30);
	
	Константы.ЧислоПотоковВыполненияЗаданийНаСервере.Установить(5);
	Константы.ЧислоПотоковВыполненияДолгихЗаданийНаСервере.Установить(2);
	
	Константы.ПредельноеОжиданиеВыполненияЗадания.Установить(30);
	Константы.ПредельноеОжиданиеВыполненияДолгогоЗадания.Установить(1800);

	Константы.ИнтервалВыполненияЗаданийНаКлиенте.Установить(15);
	Константы.РазмерПорцииЗаданийДляВыполненияНаКлиенте.Установить(10);
	
КонецПроцедуры

Процедура ЗаполнитьКомментарииТиповСвязей()
	
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ПолученОтвет,
		НСтр("ru = 'Ссылка на входящий документ, полученный в ответ на исходящий'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ОтправленОтвет,
		НСтр("ru = 'Ссылка на исходящий документ, отправленный в ответ на входящий'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ПовторноеОбращение,
		НСтр("ru = 'Ссылка из первичного на повторное обращение'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ПервичноеОбращение,
		НСтр("ru = 'Ссылка из повторного на первичное обращение'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ПредметПереписки,
		НСтр("ru = 'Ссылка из входящих и исходящих на предмет переписки'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ПерепискаПоПредмету,
		НСтр("ru = 'Ссылка на входящие и исходящие документы, при помощи которых ведется переписка по предмету'"));
	
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ВОтветНаПереадресованное,
		НСтр("ru = 'Ссылка на входящий документ, полученный при переадресации, в ответ на который отправляется ответ переадресовавшему'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ОтветПереадресовавшему,
		НСтр("ru = 'Ссылка на исходящий документ, отправленный в качестве ответа переадресовавшему'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ПереадресованДокументом,
		НСтр("ru = 'Ссылка из входящего на документ, который его переадресовал'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ПереадресацияДокумента,
		НСтр("ru = 'Ссылка из исходящего на документ, который он переадресовывает'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.Дубликат,
		НСтр("ru = 'Ссылка из основного обращения на дубликат'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ОсновноеОбращение,
		НСтр("ru = 'Ссылка из дубликата на основное обращение'"));

	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ДелаетНеДействующим,
		НСтр("ru = 'Ссылка из документа, который отменяет (расторгает) другие документы'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.НеДействуетВСоответствии,
		НСтр("ru = 'Ссылка из отмененного документа на тот, который его отменяет'"));
	
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ПолученВОтветНа,
		НСтр("ru = 'Ссылка из входящего на документ, в ответ на который он получен'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ОтправленВОтветНа,
		НСтр("ru = 'Ссылка из исходящего на документ, в ответ на который он отправлен'"));
	
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		НСтр("ru = 'Ссылка из входящих, исходящих, документов предприятия и проектов на входящее или исходящее письмо'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ПисьмоОснование,
		НСтр("ru = 'Ссылка из входящего или исходящего письма на входящий, исходящий, документ предприятия или проект'"));
	
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.ВходитВКомплект,
		НСтр("ru = 'Ссылка на комплект документов'"));
	СвязиОбъектов.УстановитьКомментарийТипаСвязи(
		Справочники.ТипыСвязей.Содержит,
		НСтр("ru = 'Ссылка на элемент комплекта'"));
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиСвязейПредопределенные()

	СтруктураНастройкиСвязи = РегистрыСведений.НастройкаСвязей.СтруктураНастроекСвязей();

	// Предмет переписки - Переписка по предмету 
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПредметПереписки;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПерепискаПоПредмету;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Входящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПредметПереписки;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПерепискаПоПредмету;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Исходящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПредметПереписки;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.Мероприятия.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПерепискаПоПредмету;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Входящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПредметПереписки;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.Мероприятия.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПерепискаПоПредмету;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Исходящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);
	
	// Первичное обращение - Повторное обращение	
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПервичноеОбращение;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПовторноеОбращение;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Входящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Входящая;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);
		
	// В ответ на - Получен ответ
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПолученВОтветНа;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПолученОтвет;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Входящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Исходящая;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);
	
	// ВОтветНаПереадресованное - ОтветПереадресовавшему
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ВОтветНаПереадресованное;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ОтветПереадресовавшему;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Исходящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Входящая;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);
		
	// ВОтветНаПереадресованное - ОтветПереадресовавшему
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПереадресованДокументом;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПереадресацияДокумента;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Входящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Исходящая;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// ВОтветНаПереадресованное по вопросу - ОтветПереадресовавшему по вопросу
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПереадресованДокументомПоВопросу;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПереадресацияДокументаПоВопросу;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Входящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Исходящая;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Дубликат - ОсновноеОбращение
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ОсновноеОбращение;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.Дубликат;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Входящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Входящая;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// НеДействуетВСоответствии - ДелаетНеДействующим
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.НеДействуетВСоответствии;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ДелаетНеДействующим;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);
		
	// В ответ на - Отправлен ответ	
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ОтправленВОтветНа;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ОтправленОтвет;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Исходящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Входящая;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Документ предприятия на основании входящего письма
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.НаОснованииПисьма;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ВходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПисьмоОснование;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Проект на основании входящего письма
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.НаОснованииПисьма;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.Проекты.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ВходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПисьмоОснование;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Документ предприятия на основании исходящего письма
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.НаОснованииПисьма;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПисьмоОснование;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Проект на основании исходящего письма
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.НаОснованииПисьма;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.Проекты.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПисьмоОснование;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Входящее письмо получено в ответ на исходящее письмо
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо;
	СтруктураНастройкиСвязи.СсылкаИз = Документы.ВходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПолученоОтветноеПисьмо;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Исходящее письмо отправлено в ответ на входящее
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа;
	СтруктураНастройкиСвязи.СсылкаИз = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ВходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Входящий документ получен в ответ на исходящее письмо
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПолученВОтветНаПисьмо;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПолученОтветныйДокумент;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Входящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Исходящее письмо отправлено в ответ на входящий документ
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа;
	СтруктураНастройкиСвязи.СсылкаИз = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Входящая;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Исходящий документ отправлен в ответ на входящее письмо
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ОтправленВОтветНаПисьмо;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ВходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ОтправленОтветныйДокумент;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Перечисления.ВидыКорреспонденции.Исходящая;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Входящее письмо получено в ответ на исходящий документ
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПолученоВОтветНаДокумент;
	СтруктураНастройкиСвязи.СсылкаИз = Документы.ВходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПолученоОтветноеПисьмо;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Перечисления.ВидыКорреспонденции.Исходящая;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Пересылка входящего письма
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПересланоПисьмом;
	СтруктураНастройкиСвязи.СсылкаИз = Документы.ВходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПересылкаПисьма;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Пересылка исходящего письма
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПересланоПисьмом;
	СтруктураНастройкиСвязи.СсылкаИз = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПересылкаПисьма;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Входящего письмо на основании проекта
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.НаОснованииПисьма;
	СтруктураНастройкиСвязи.СсылкаИз = Документы.ВходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.Проекты.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПисьмоОснование;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Исходящее письмо на основании проекта
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.НаОснованииПисьма;
	СтруктураНастройкиСвязи.СсылкаИз = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.Проекты.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПисьмоОснование;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Исходящее письмо отправлено в ответ на исходящее письмо
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа;
	СтруктураНастройкиСвязи.СсылкаИз = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ОтправленОтвет;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Перенаправление входящего письма
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПеренаправленоПисьмом;
	СтруктураНастройкиСвязи.СсылкаИз = Документы.ВходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПеренаправлениеПисьма;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Перенаправление исходящего письма
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.ПеренаправленоПисьмом;
	СтруктураНастройкиСвязи.СсылкаИз = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПеренаправлениеПисьма;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);
	
	// Мероприятия на основании входящего письма
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.НаОснованииПисьма;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.Мероприятия.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ВходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПисьмоОснование;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Мероприятия на основании исходящего письма
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.НаОснованииПисьма;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.Мероприятия.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Документы.ИсходящееПисьмо.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Единичная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ПисьмоОснование;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	// Комплекты: Содержит - Входит в комплект
	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.Содержит;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Справочники.ТипыСвязей.ВходитВКомплект;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);

	СтруктураНастройкиСвязи.ТипСвязи = Справочники.ТипыСвязей.Содержит;
	СтруктураНастройкиСвязи.СсылкаИз = Справочники.ВидыДокументов.ПустаяСсылка();
	СтруктураНастройкиСвязи.СсылкаНа = Справочники.Файлы.ПустаяСсылка();
	СтруктураНастройкиСвязи.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	СтруктураНастройкиСвязи.ТипОбратнойСвязи = Неопределено;
	СтруктураНастройкиСвязи.ХарактерОбратнойСвязи = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз = Неопределено;
	СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа = Неопределено;
	СвязиОбъектов.СоздатьНастройкуСвязи(СтруктураНастройкиСвязи, Истина);
	
КонецПроцедуры	

Процедура ЗаполнитьВидыБизнесСобытий()
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СозданиеДокумента,
		НСтр("ru='Документы: создание нового документа'"));	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ИзменениеДокумента,
		НСтр("ru='Документы: изменение документа'"));	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.РегистрацияДокумента,
		НСтр("ru='Документы: регистрация документа'"));	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ПеререгистрацияДокумента,
		НСтр("ru='Документы: перерегистрация документа'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.НазначениеОтветственного,
		НСтр("ru='Документы: назначение ответственным'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СтартБизнесПроцесса,
		НСтр("ru='Процессы: старт'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса,
		НСтр("ru='Процессы: завершение'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса,
		НСтр("ru='Процессы: остановка'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса,
		НСтр("ru='Процессы: возобновление'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ЗахватФайлаДляРедактирования,
		НСтр("ru='Файлы: захват для редактирования'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ОсвобождениеФайла,
		НСтр("ru='Файлы: освобождение'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СозданиеФайла,
		НСтр("ru='Файлы: создание нового'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ИзменениеФайла,
		НСтр("ru='Файлы: изменение'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СозданиеКонтрагента,
		НСтр("ru='Контрагенты: создание нового'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ИзменениеСоставаКомплекта,
		НСтр("ru='Документы: изменение состава комплекта'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ВыполнениеЗадачиПроцесса,
		НСтр("ru='Задачи процессов: выполнение'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачиПроцесса,
		НСтр("ru='Задачи процессов: отмена выполнения'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СозданиеЗадачиПроцесса,
		НСтр("ru='Задачи процессов: создание новой'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачиПроцесса,
		НСтр("ru='Задачи процессов: перенаправление'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи,
		НСтр("ru='Задачи: выполнение'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.НоваяЗадача,
		НСтр("ru='Задачи: новая задача'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ОткладываниеЗадачи,
		НСтр("ru='Задачи: отложена'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ОтменаЗадачи,
		НСтр("ru='Задачи: отмена'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи,
		НСтр("ru='Задачи: отмена выполнения'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ПередачаЗадачОтИсполнителя,
		НСтр("ru='Задачи: передача от исполнителя'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи,
		НСтр("ru='Задачи: перенаправление'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СнятиеЗадачИсполнителя,
		НСтр("ru='Задачи: снятие задач исполнителя'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ИзменениеЗадачи,
		НСтр("ru='Задачи: изменение'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СозданиеМероприятия,
		НСтр("ru='Мероприятия: создание нового'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ИзменениеМероприятия,
		НСтр("ru='Мероприятия: изменение'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию,
		НСтр("ru='Категории: добавление в категорию'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.УдалениеИзКатегории,
		НСтр("ru='Категории: удаление из категории'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СозданиеПроекта,
		НСтр("ru='Проекты: создание нового'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ИзменениеПроекта,
		НСтр("ru='Проекты: изменение'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СозданиеПроектнойЗадачи,
		НСтр("ru='Проектные задачи: создание новой'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи,
		НСтр("ru='Проектные задачи: изменение'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СозданиеСообщения,
		НСтр("ru='Форум: создание нового сообщения'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса,
		НСтр("ru='Процессы: прерывание'"));	
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СозданиеОтсутствия,
		НСтр("ru='Отсутствия: создание нового'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия,
		НСтр("ru='Отсутствия: изменение'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.СозданиеБрони,
		НСтр("ru='Брони: создание новой'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ИзменениеБрони,
		НСтр("ru='Брони: изменение'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ОтменаБрони,
		НСтр("ru='Брони: отмена'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса,
		НСтр("ru='Процессы: изменение значения показателя'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ИзменениеСостоянияДокументаПоЭДО,
		НСтр("ru='Документы: изменение состояния по ЭДО'"));
	
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиСоздание,
		НСтр("ru='Замещающие и помощники: создание нового'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиИзменение,
		НСтр("ru='Замещающие и помощники: изменение настроек'"));

	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ЗавершениеДействияОбработки,
		НСтр("ru='Обработка: завершение действия'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ОстановкаОбработки,
		НСтр("ru='Обработки: остановка'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив,
		НСтр("ru='Ошибка в документах, переданных в 1С:Архив'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ПолучениеВходящегоПисьма,
		НСтр("ru='Письма: получение входящего'"));
	СоздатьВидБизнесСобытий(
		Справочники.ВидыБизнесСобытий.ПринятиеДокументовВАрхив,
		НСтр("ru='Принятие документов в 1С:Архив'"));
		
КонецПроцедуры

// Заполняет общий реквизит "Узел обработки" в объектах конфигурации.
//
Процедура ЗаполнитьРеквизитУзелОбработки()
	
	СоставОбщегоРеквизита = Метаданные.ОбщиеРеквизиты.УзелОбработки.Состав;	
	
	СписокОбъектов = Новый Соответствие;
	Для Каждого ЭлементСостава Из СоставОбщегоРеквизита Цикл
		Если ЭлементСостава.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		СписокОбъектов.Вставить(ЭлементСостава.Метаданные, Истина);			
	КонецЦикла;
	
	ЕстьДанныеДляОбработки = Истина;
	Пока ЕстьДанныеДляОбработки Цикл
		
		Для Каждого КлючИЗначение Из СписокОбъектов Цикл
			ОбъектМетаданных = КлючИЗначение.Ключ;
			
			ДанныеДляОбработки = ПолучитьПорциюДанныхДляОбработки(ОбъектМетаданных);
			Если ДанныеДляОбработки.Количество() = 0 Тогда
				СписокОбъектов.Удалить(ОбъектМетаданных);
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
				
				Для Каждого Элемент Из ДанныеДляОбработки Цикл
					ЭлементОбъект = Элемент.ПолучитьОбъект();
					ЭлементОбъект.УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементОбъект);
				КонецЦикла;
			
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
				
				Для Каждого НаборЗаписей Из ДанныеДляОбработки Цикл
					НаборЗаписей.Прочитать();
					
					Для Каждого Запись Из НаборЗаписей Цикл
						Запись.УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		ЕстьДанныеДляОбработки = СписокОбъектов.Количество() > 0; 
		
	КонецЦикла;
	
КонецПроцедуры

// Получает порцию данных для заполнения общего реквизита "Узел обработки".
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - Объект, порцию данных которого необходимо получить.
//
Функция ПолучитьПорциюДанныхДляОбработки(ОбъектМетаданных)
	
	ПорцияДанных = Новый Массив;
	
	Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
		 ПорцияДанных = ПолучитьПорциюДанныхОбъектаСсылочногоТипа(ОбъектМетаданных);
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		 ПорцияДанных = ПолучитьПорциюДанныхРегистраСведений(ОбъектМетаданных);
	КонецЕсли;
	
	Возврат ПорцияДанных;
	
КонецФункции

// Получает порцию данных объекта ссылочного типа для заполнения общего реквизита "Узел обработки".
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - Объект, порцию данных которого необходимо получить.
//
Функция ПолучитьПорциюДанныхОбъектаСсылочногоТипа(ОбъектМетаданных)
	
	Запрос = Новый Запрос(СтрШаблон(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Таблица.Ссылка
		|ИЗ
		|	%1 КАК Таблица
		|ГДЕ
		|	Таблица.УзелОбработки = &УникальныйИдентификаторПустой",
		ОбъектМетаданных.ПолноеИмя()));
	Запрос.УстановитьПараметр("УникальныйИдентификаторПустой", УникальныйИдентификаторПустой());
	
	ПорцияДанных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ПорцияДанных;

КонецФункции

// Получает порцию данных объекта для заполнения общего реквизита "Узел обработки".
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - Объект, порцию данных которого необходимо получить.
//
Функция ПолучитьПорциюДанныхРегистраСведений(ОбъектМетаданных)
	
	ПорцияДанных = Новый Массив;
	
	ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	
	ПоляВыборки = Новый Массив;
	Если ОбъектМетаданных.РежимЗаписи
			= Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			
		ПоляВыборки.Добавить("Регистратор");
	Иначе
		Для ПорядковыйНомер = 1 По ОбъектМетаданных.Измерения.Количество() - 1 Цикл
			ПоляВыборки.Добавить(ОбъектМетаданных.Измерения[ПорядковыйНомер - 1].Имя);
		КонецЦикла;		
	КонецЕсли;
		
	Запрос = Новый Запрос(СтрШаблон(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	%1
		|ИЗ
		|	%2 КАК Таблица
		|ГДЕ
		|	Таблица.УзелОбработки = &УникальныйИдентификаторПустой",
		?(ЗначениеЗаполнено(ПоляВыборки), СтрСоединить(ПоляВыборки, ", "), "ИСТИНА"),
		ПолноеИмяОбъекта));
	Запрос.УстановитьПараметр("УникальныйИдентификаторПустой", УникальныйИдентификаторПустой());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
		Для Каждого Поле Из ПоляВыборки Цикл
			НаборЗаписей.Отбор[Поле].Установить(Выборка[Поле]);
		КонецЦикла;
		
		ПорцияДанных.Добавить(НаборЗаписей);
	КонецЦикла;
	
	Возврат ПорцияДанных;
	
КонецФункции

Процедура НастроитьШаблоныИменФайлов()
	
	Константы.ПрефиксФайлаСкана.Установить(НСтр("ru = 'Скан'"));
	Константы.РазрядностьНомераФайлаСкана.Установить(2);
	
	СпрУмолчание = Справочники.ШаблоныИменФайлов.НайтиПоНаименованию(НСтр("ru = 'Для документов'"), Истина);
	Если Не ЗначениеЗаполнено(СпрУмолчание) Тогда
		
		СпрОбъект = Справочники.ШаблоныИменФайлов.СоздатьЭлемент();
		
		СпрОбъект.Наименование = НСтр("ru = 'Для документов'");
		СпрОбъект.ФорматИмени = "[ОригинальноеИмя] [Заголовок]";
		СпрОбъект.Пример = НСтр("ru = 'Скан01 Приказ по оргструктуре'");
		
		СпрОбъект.Записать();
		
		СпрУмолчание = СпрОбъект.Ссылка;
		
		ОбновлениеИнформационнойБазыДокументооборот.ЗаписатьРС_НастройкиШаблоновИмени(
			Перечисления.ТипыОбъектовШаблоновИмениФайла.ДокументыПредприятия, СпрУмолчание);
		
	КонецЕсли;	
	
	СпрУмолчание = Справочники.ШаблоныИменФайлов.НайтиПоНаименованию(НСтр("ru = 'По умолчанию'"), Истина);
	Если Не ЗначениеЗаполнено(СпрУмолчание) Тогда
		
		СпрОбъект = Справочники.ШаблоныИменФайлов.СоздатьЭлемент();
		
		СпрОбъект.Наименование = НСтр("ru = 'По умолчанию'");
		СпрОбъект.ФорматИмени = "[ОригинальноеИмя] [Наименование]";
		СпрОбъект.Пример = НСтр("ru = 'Скан01 Приказ по оргструктуре'");
		
		СпрОбъект.Записать();
		
		СпрУмолчание = СпрОбъект.Ссылка;
		
		ОбновлениеИнформационнойБазыДокументооборот.ЗаписатьРС_НастройкиШаблоновИмени(
			Перечисления.ТипыОбъектовШаблоновИмениФайла.ПустаяСсылка(), СпрУмолчание);
		
	КонецЕсли;	
	
КонецПроцедуры

// Заполнить области делегирования и замещения.
Процедура ЗаполнитьОбластиДелегированияИЗамещения() Экспорт

	// Начальное создание поставляемых областей делегирования
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбластиДелегированияПрав.Ссылка,
		|	ОбластиДелегированияПрав.ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.УдалитьОбластиДелегированияПрав КАК ОбластиДелегированияПрав");
	СуществующиеОбласти = Запрос.Выполнить().Выгрузить();

	ОписанияОбластейДелегирования = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	Для Каждого Описание Из ОписанияОбластейДелегирования Цикл
		Если СуществующиеОбласти.Найти(Описание.ИмяПредопределенного, "ИмяПредопределенныхДанных") = Неопределено Тогда
			// Элемента данных нет, нужно создать новый
			ОбластьОбъект = Справочники.УдалитьОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(Справочники.УдалитьОбластиДелегированияПрав.ПолучитьСсылку(
				Новый УникальныйИдентификатор(Описание.Идентификатор)));
			ОбластьОбъект.Наименование = Описание.Наименование;
			ОбластьОбъект.ИмяПредопределенныхДанных = Описание.ИмяПредопределенного;
			Для Каждого ПолноеИмя Из Описание.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	
	// Начальное создание поставляемых областей замещения
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбластиЗамещения.Ссылка,
		|	ОбластиЗамещения.ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ОбластиЗамещения КАК ОбластиЗамещения");
	СуществующиеОбласти = Запрос.Выполнить().Выгрузить();
	
	ОписанияОбластейЗамещения = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейЗамещения();
	Для Каждого Описание Из ОписанияОбластейЗамещения Цикл
		
		Если СуществующиеОбласти.Найти(Описание.ИмяПредопределенного, "ИмяПредопределенныхДанных") = Неопределено Тогда
			ОбластьОбъект = Справочники.ОбластиЗамещения.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(Справочники.ОбластиЗамещения.ПолучитьСсылку(
				Новый УникальныйИдентификатор(Описание.Идентификатор)));
			ОбластьОбъект.Наименование = Описание.Наименование;
			ОбластьОбъект.ИмяПредопределенныхДанных = Описание.ИмяПредопределенного;
			ОбластьОбъект.Родитель = Описание.Родитель;
			Для Каждого ПолноеИмя Из Описание.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_10_2() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	ОчередьУведомлений.ВидСобытия,
		|	ОчередьУведомлений.Объект,
		|	ОчередьУведомлений.ОбъектПодписки,
		|	ОчередьУведомлений.Пользователь,
		|	ОчередьУведомлений.СпособУведомления,
		|	ОчередьУведомлений.ДополнительноеОписание,
		|	ОчередьУведомлений.КоличествоПопытокОтправки
		|ИЗ
		|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|ГДЕ
		|	ОчередьУведомлений.ДатаПомещенияВОчередь = ДАТАВРЕМЯ(1, 1, 1)");
	
	ЕстьДанныеКОбработке = Истина;
	
	Пока ЕстьДанныеКОбработке Цикл
		
		ЕстьДанныеКОбработке = Ложь;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЕстьДанныеКОбработке = Истина;
			
			НаборЗаписей = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидСобытия.Установить(Выборка.ВидСобытия);
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписей.Отбор.ОбъектПодписки.Установить(Выборка.ОбъектПодписки);
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
			НаборЗаписей.Отбор.СпособУведомления.Установить(Выборка.СпособУведомления);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ВидСобытия = Выборка.ВидСобытия;
			НоваяЗапись.Объект = Выборка.Объект;
			НоваяЗапись.ОбъектПодписки = Выборка.ОбъектПодписки;
			НоваяЗапись.Пользователь = Выборка.Пользователь;
			НоваяЗапись.СпособУведомления = Выборка.СпособУведомления;
			
			НоваяЗапись.ДополнительноеОписание = Выборка.ДополнительноеОписание;
			НоваяЗапись.КоличествоПопытокОтправки = Выборка.КоличествоПопытокОтправки;
			
			НоваяЗапись.ДатаПомещенияВОчередь = ТекущаяДатаСеанса();
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает или делает предопределенной РГ РуководителиПодразделений
Процедура СоздатьРабочуюГруппуРуководителиПодразделений() Экспорт

	СтруктураРГ = Справочники.РабочиеГруппы.ПолучитьСтруктуруРабочихГрупп();
	СтруктураРГ.Наименование = "Руководители подразделений";
	СтруктураРГ.Вставить("Автозаполнение", Истина);
	СтруктураРГ.Вставить("АлгоритмАвтозаполнения", Справочники.Алгоритмы.РуководителиПодразделений);
	СтруктураРГ.Вставить("Ответственный", Справочники.Сотрудники.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РабочиеГруппы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.РабочиеГруппы КАК РабочиеГруппы
	               |ГДЕ
	               |	НЕ РабочиеГруппы.ПометкаУдаления
	               |	И НЕ РабочиеГруппы.Предопределенный
	               |	И РабочиеГруппы.Наименование = ""Руководители подразделений""
	               |	И НЕ РабочиеГруппы.Недействительна";
	Результат = Запрос.Выполнить().Выбрать();
		
	Если Результат.Следующий() Тогда
		// Такая группа уже есть.
		СтруктураРГ.Наименование = "Руководители подразделений (заполняется автоматически)";
	КонецЕсли;
	
	РГОбъект = Справочники.РабочиеГруппы.РуководителиПодразделений.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(РГОбъект, СтруктураРГ);
	Результат = РаботаСРабочимиГруппами.УчастникиРабочейГруппыПоАлгоритму(
		Справочники.Алгоритмы.РуководителиПодразделений);
	РГОбъект.Состав.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(РГОбъект.Состав,
		Результат.Участники, "Участник");
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РГОбъект);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_11_1() Экспорт

	Справочники.СервисыВнешнегоПодписания.ЗаполнитьПредопределенные();

КонецПроцедуры

// Обновляет состояние МЭДО в регистре ДанныеДокументовПредприятия для быстрого показа в списке
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика
Процедура ПерейтиНаВерсию_3_0_11_2(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(СостоянияСрез.Документ) КАК КолвоДокументов
			|ИЗ
			|	РегистрСведений.СостоянияДокументовМЭДО.СрезПоследних КАК СостоянияСрез
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументов
			|		ПО СостоянияСрез.Документ = ДанныеДокументов.Документ
			|ГДЕ
			|	ДанныеДокументов.СостояниеМЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовМЭДО.ПустаяСсылка)");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КолвоДокументов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СостоянияСрез.Документ КАК Документ,
		|	СостоянияСрез.Состояние КАК СостояниеМЭДО
		|ИЗ
		|	РегистрСведений.СостоянияДокументовМЭДО.СрезПоследних КАК СостоянияСрез
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументов
		|		ПО СостоянияСрез.Документ = ДанныеДокументов.Документ
		|ГДЕ
		|	ДанныеДокументов.СостояниеМЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовМЭДО.ПустаяСсылка)");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Делопроизводство.ЗаписатьДанныеДокумента(Выборка.Документ, "СостояниеМЭДО", Выборка.СостояниеМЭДО, Истина);
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
		Исключение
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить состояние МЭДО для документа %1 по причине:
					|%2'"),
				Выборка.Документ,
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Документ.Метаданные(),
				Выборка.Документ,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_11_2 не удалось записать состояния МЭДО для некоторых документов (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Создает табличную часть Пакеты в документах ДанныеДокументаМЭДО
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика
Процедура ПерейтиНаВерсию_3_0_11_3(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(Шапка.Ссылка) КАК КолвоДокументов
			|ИЗ
			|	Документ.ДанныеДокументаМЭДО КАК Шапка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеДокументаМЭДО.Пакеты КАК ТЧПакеты
			|		ПО ТЧПакеты.Ссылка = Шапка.Ссылка
			|ГДЕ
			|	ТЧПакеты.Ссылка ЕСТЬ NULL");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КолвоДокументов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Шапка.Ссылка КАК ДанныеМЭДОСсылка
		|ИЗ
		|	Документ.ДанныеДокументаМЭДО КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеДокументаМЭДО.Пакеты КАК ТЧПакеты
		|		ПО ТЧПакеты.Ссылка = Шапка.Ссылка
		|ГДЕ
		|	ТЧПакеты.Ссылка ЕСТЬ NULL");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ДанныеМЭДООбъект = Выборка.ДанныеМЭДОСсылка.ПолучитьОбъект(); // ДокументОбъект.ДанныеДокументаМЭДО
			СтрокаТЧ = ДанныеМЭДООбъект.Пакеты.Добавить();
			СтрокаТЧ.ВерсияМЭДО				= ДанныеМЭДООбъект.УдалитьВерсияМЭДО;
			СтрокаТЧ.ИдентификаторСообщения	= ДанныеМЭДООбъект.УдалитьИдентификаторСообщения;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДанныеМЭДООбъект);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
		Исключение
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить табличную часть Пакеты для документа %1 по причине:
					|%2'"),
				Выборка.ДанныеМЭДОСсылка,
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.ДанныеМЭДОСсылка.Метаданные(),
				Выборка.ДанныеМЭДОСсылка,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось заполнить табличную часть Пакеты для некоторых документов (пропущены): %2'"),
			"ПерейтиНаВерсию_3_0_11_3",
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_11_4() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИнтеграцияС1САрхивом") Тогда
		// Регистрация сотрудников к обмену для передачи новых реквизитов.
		УзелАрхив = ПланыОбмена.ОбменНСИСАрхивом.УзелАрхив();
		ПланыОбмена.ЗарегистрироватьИзменения(УзелАрхив, Метаданные.Справочники.Сотрудники);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_11_10() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
			
		Возврат;
	КонецЕсли;
	
	// В профиль "Ответственные за НСИ"
	УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия(
		"ПолучениеОбновленийКлассификаторов", 
		"7bc7f2da-db69-11de-a544-00179ab398dc");
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_11_11() Экспорт
	
КонецПроцедуры

// Перезаписывает стороны в регистре сведений ДанныеДокументовПредприятия при отключенном учете по организациям
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика
//
Процедура ПерейтиНаВерсию_3_0_11_12(Параметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДанныеДокументов.Документ) КАК КоличествоДокументов
			|ИЗ
			|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
			|		ПО ДанныеДокументов.ВидДокумента = ВидыДокументов.Ссылка
			|ГДЕ
			|	ВидыДокументов.ЯвляетсяЗаявкойНаОплату");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КоличествоДокументов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеДокументов.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументов
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|	ПО ДанныеДокументов.ВидДокумента = ВидыДокументов.Ссылка
		|ГДЕ
		|	ВидыДокументов.ЯвляетсяЗаявкойНаОплату");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеДокументовПредприятия");
			ЭлементБлокировки.УстановитьЗначение("Документ", Выборка.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ДанныеДокументовПредприятия.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				ЗаписьРегистра = НаборЗаписей[0];
				Если Не ЗначениеЗаполнено(ЗаписьРегистра.Сторона2) Тогда
					ЗаписьРегистра.Сторона2 = ЗаписьРегистра.Сторона1;
					ЗаписьРегистра.Сторона1 = Справочники.Организации.ПустаяСсылка();
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
					ОбработаноОбъектов = ОбработаноОбъектов + 1;
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить стороны набора записей ДанныеДокументовПредприятия для документа %1 по причине:
					|%2'"),
				Выборка.Документ,
				СтекОшибки);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Документ.Метаданные(),
				Выборка.Документ,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_11_12 не удалось обновить стороны набора записей ДанныеДокументовПредприятия для некоторых документов (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Обновляет ИсходящийНомерИДата в регистре ДанныеДокументовПредприятия для исходящих документов.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика
Процедура ПерейтиНаВерсию_3_0_11_13(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДанныеДокументовПредприятия.Документ) КАК КолвоДокументов
			|ИЗ
			|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
			|		ПО ДанныеДокументовПредприятия.ВидДокумента = ВидыДокументов.Ссылка
			|ГДЕ
			|	ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией
			|	И ВидыДокументов.УчитыватьВходящийНомерИДатуПолучателя
			|	И ДанныеДокументовПредприятия.ИсходящийНомерИДата = """"
			|	И ИСТИНА В
			|			(ВЫБРАТЬ
			|				ИСТИНА
			|			ИЗ
			|				Документ.Корреспонденция.Корреспонденты КАК ДокументКорреспонденцияКорреспонденты
			|			ГДЕ
			|				ДокументКорреспонденцияКорреспонденты.Ссылка.Основание = ДанныеДокументовПредприятия.Документ
			|				И (ДокументКорреспонденцияКорреспонденты.НомерКонтрагента <> """"
			|					ИЛИ ДокументКорреспонденцияКорреспонденты.ДатаКонтрагента <> ДАТАВРЕМЯ(1, 1, 1)))");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КолвоДокументов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеДокументовПредприятия.Документ КАК Документ,
		|	ДанныеДокументовПредприятия.ДатаСортировки КАК ДатаСортировки,
		|	Корреспонденция.Ссылка КАК КорреспонденцияСсылка
		|ПОМЕСТИТЬ КорреспонденцияДокументы
		|ИЗ
		|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО ДанныеДокументовПредприятия.ВидДокумента = ВидыДокументов.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Корреспонденция КАК Корреспонденция
		|		ПО ДанныеДокументовПредприятия.Документ = Корреспонденция.Основание
		|ГДЕ
		|	ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией
		|	И ВидыДокументов.УчитыватьВходящийНомерИДатуПолучателя
		|	И ДанныеДокументовПредприятия.ИсходящийНомерИДата = """"
		|	И ИСТИНА В
		|			(ВЫБРАТЬ
		|				ИСТИНА
		|			ИЗ
		|				Документ.Корреспонденция.Корреспонденты КАК ДокументКорреспонденцияКорреспонденты
		|			ГДЕ
		|				ДокументКорреспонденцияКорреспонденты.Ссылка.Основание = ДанныеДокументовПредприятия.Документ
		|				И (ДокументКорреспонденцияКорреспонденты.НомерКонтрагента <> """"
		|					ИЛИ ДокументКорреспонденцияКорреспонденты.ДатаКонтрагента <> ДАТАВРЕМЯ(1, 1, 1)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСортировки УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспонденцияДокументы.Документ КАК Документ,
		|	КорреспонденцияДокументы.КорреспонденцияСсылка КАК КорреспонденцияСсылка,
		|	ДокументКорреспонденцияКорреспонденты.НомерКонтрагента КАК НомерКонтрагента,
		|	ДокументКорреспонденцияКорреспонденты.ДатаКонтрагента КАК ДатаКонтрагента
		|ИЗ
		|	КорреспонденцияДокументы КАК КорреспонденцияДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Корреспонденция.Корреспонденты КАК ДокументКорреспонденцияКорреспонденты
		|		ПО (ДокументКорреспонденцияКорреспонденты.Ссылка = КорреспонденцияДокументы.КорреспонденцияСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорреспонденцияДокументы.Документ");
	
	
	ТекДокумент = Неопределено;    
	ТекКорреспонденция = Неопределено;    
	МассивТЧКорреспонденты = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			
			Документ = Выборка.Документ;    
			КорреспонденцияСсылка = Выборка.КорреспонденцияСсылка;  
			
			ТекДокумент = Документ;
			
			Если КорреспонденцияСсылка <> ТекКорреспонденция 
				И ТекКорреспонденция <> Неопределено Тогда
				
				// запишем предыдущий пакет                      
				
				ИсходящийНомерИДата = РаботаСКорреспонденцией.ИсходящийНомерИДатаКорреспонденции(
					МассивТЧКорреспонденты);
				Если ЗначениеЗаполнено(ИсходящийНомерИДата) Тогда	
					Делопроизводство.ЗаписатьДанныеДокумента(
						ТекДокумент, "ИсходящийНомерИДата", ИсходящийНомерИДата, Истина);
				КонецЕсли;	
					
				МассивТЧКорреспонденты.Очистить();
					
				ОбработаноОбъектов = ОбработаноОбъектов + 1;
				
			КонецЕсли;	 
			
			МассивТЧКорреспонденты.Добавить(
				Новый Структура("НомерКонтрагента, ДатаКонтрагента", 
					Выборка.НомерКонтрагента, Выборка.ДатаКонтрагента)
			);
			
			
			ТекКорреспонденция = КорреспонденцияСсылка;
			ТекДокумент = Документ;
			
		Исключение
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить ИсходящийНомерИДата для документа %1 по причине:
					|%2'"),
				Выборка.Документ,
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Документ.Метаданные(),
				Выборка.Документ,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;  
	
	Если МассивТЧКорреспонденты.Количество() <> 0 Тогда
		
		Попытка
			
			ИсходящийНомерИДата = РаботаСКорреспонденцией.ИсходящийНомерИДатаКорреспонденции(
				МассивТЧКорреспонденты);
			Если ЗначениеЗаполнено(ИсходящийНомерИДата) Тогда	
				Делопроизводство.ЗаписатьДанныеДокумента(
					ТекДокумент, "ИсходящийНомерИДата", ИсходящийНомерИДата, Истина);
			КонецЕсли;	    
				
			ОбработаноОбъектов = ОбработаноОбъектов + 1;	
		
		Исключение
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить ИсходящийНомерИДата для документа %1 по причине:
					|%2'"),
				Выборка.Документ,
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Документ.Метаданные(),
				Выборка.Документ,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;	
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_11_13 не удалось записать ИсходящийНомерИДата для некоторых документов (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Добавление новых прав на использование СПАРК в полномочие "Ответственные за НСИ"
Процедура ПерейтиНаВерсию_3_0_11_15() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия(
		Метаданные.Роли.ПереходВВебВерсиюСПАРК, "7bc7f2da-db69-11de-a544-00179ab398dc");
	УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия(
		Метаданные.Роли.ПросмотрОтчетаДосьеКонтрагента, "7bc7f2da-db69-11de-a544-00179ab398dc");
	УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия(
		Метаданные.Роли.АналитическиеОтчетыСПАРКРиски, "7bc7f2da-db69-11de-a544-00179ab398dc");
	УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия(
		Метаданные.Роли.ЗапросНовойСправкиСПАРКРиски, "7bc7f2da-db69-11de-a544-00179ab398dc");
	
КонецПроцедуры

// Обновляет права на действия задач, если у них есть приложения и у соисполнителей нет прав
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика
Процедура ПерейтиНаВерсию_3_0_11_16(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДействиеЗадачи.Ссылка) КАК ДействиеЗадачи
			|ИЗ
			|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|		ПО (ДескрипторыДляОбъектов.ПолученОт = ДействиеЗадачи.Задача)
			|ГДЕ
			|	ДействиеЗадачи.ЕстьПриложения
			|	И ДескрипторыДляОбъектов.ПолученОт ЕСТЬ NULL");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ДействиеЗадачи;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ДействиеЗадачи.Ссылка КАК ДействиеЗадачи
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|		ПО (ДескрипторыДляОбъектов.ПолученОт = ДействиеЗадачи.Задача)
		|ГДЕ
		|	ДействиеЗадачи.ЕстьПриложения
		|	И ДескрипторыДляОбъектов.ПолученОт ЕСТЬ NULL");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			
			ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(Выборка.ДействиеЗадачи);
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
				
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось определить дескрипторы для действия задачи %1 по причине:
					|%2'"),
				Выборка.ДействиеЗадачи,
				СтекОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Документ.Метаданные(),
				Выборка.Документ,
				ТекстСообщения);
				
		КонецПопытки;
	КонецЦикла;  
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_11_16 не удалось определить дескрипторы для некоторых действий задач (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Обновляет ВидКорреспонденции ЯвляетсяКомплектомДокументов  в регистре ДанныеДокументовПредприятия для быстрого показа в списке.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика
Процедура ПерейтиНаВерсию_3_0_11_7(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДанныеДокументовПредприятия.Документ) КАК КолвоДокументов
			|ИЗ
			|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
			|		ПО ДанныеДокументовПредприятия.ВидДокумента = ВидыДокументов.Ссылка
			|ГДЕ
			|	ДанныеДокументовПредприятия.ЯвляетсяКомплектомДокументов <> ВидыДокументов.ЯвляетсяКомплектомДокументов
			|	ИЛИ (ДанныеДокументовПредприятия.ВидКорреспонденции <> ЗНАЧЕНИЕ(Перечисление.ВидыКорреспонденции.Входящая)
			|	И ВидыДокументов.ЯвляетсяВходящейКорреспонденцией)
			|	ИЛИ (ДанныеДокументовПредприятия.ВидКорреспонденции <> ЗНАЧЕНИЕ(Перечисление.ВидыКорреспонденции.Исходящая)
			|	И ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией)");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КолвоДокументов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеДокументовПредприятия.Документ КАК Документ,
		|	ДанныеДокументовПредприятия.ДатаСортировки КАК ДатаСортировки,
		|	ДанныеДокументовПредприятия.ПометкаУдаления КАК ПометкаУдаления,
		|	ВидыДокументов.ЯвляетсяВходящейКорреспонденцией,
		|	ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией,
		|	ВидыДокументов.ЯвляетсяКомплектомДокументов
		|ИЗ
		|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО ДанныеДокументовПредприятия.ВидДокумента = ВидыДокументов.Ссылка
		|ГДЕ
		|	(ДанныеДокументовПредприятия.ЯвляетсяКомплектомДокументов <> ВидыДокументов.ЯвляетсяКомплектомДокументов
		|	ИЛИ ДанныеДокументовПредприятия.ВидКорреспонденции <> ЗНАЧЕНИЕ(Перечисление.ВидыКорреспонденции.Входящая)
		|	И ВидыДокументов.ЯвляетсяВходящейКорреспонденцией
		|	ИЛИ ДанныеДокументовПредприятия.ВидКорреспонденции <> ЗНАЧЕНИЕ(Перечисление.ВидыКорреспонденции.Исходящая)
		|	И ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСортировки УБЫВ");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеДокументовПредприятия");
			ЭлементБлокировки.УстановитьЗначение("Документ", Выборка.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			
			// Запишем новый набор записей.
			НаборЗаписей = РегистрыСведений.ДанныеДокументовПредприятия.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Отбор.ДатаСортировки.Установить(Выборка.ДатаСортировки);
			НаборЗаписей.Отбор.ПометкаУдаления.Установить(Выборка.ПометкаУдаления);
			
			НаборЗаписей.Прочитать();
	
			Если НаборЗаписей.Количество() > 0 Тогда
				ЗаписьРегистра = НаборЗаписей[0];
			Иначе
				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				Продолжить;
			КонецЕсли;

			ВидКорреспонденции = Перечисления.ВидыКорреспонденции.ПустаяСсылка();
			
			Если Выборка.ЯвляетсяВходящейКорреспонденцией = Истина Тогда
				
				ВидКорреспонденции = Перечисления.ВидыКорреспонденции.Входящая;
				
			ИначеЕсли Выборка.ЯвляетсяИсходящейКорреспонденцией Тогда
				
				ВидКорреспонденции = Перечисления.ВидыКорреспонденции.Исходящая;
				
			КонецЕсли;	
			
			ЗаписьРегистра.ВидКорреспонденции = ВидКорреспонденции;
			ЗаписьРегистра.ЯвляетсяКомплектомДокументов = Выборка.ЯвляетсяКомплектомДокументов;     
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей); 
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить ВидКорреспонденции ЯвляетсяКомплектомДокументов для документа %1 по причине:
					|%2'"),
				Выборка.Документ,
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Документ.Метаданные(),
				Выборка.Документ,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_11_7 не удалось записать ВидКорреспонденции ЯвляетсяКомплектомДокументов для некоторых документов (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

Процедура ЗаменитьСотрудниковНаФизлицВоФлагахОбъектов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
			|ГДЕ
			|	(ФлагиОбъектов.ФизическоеЛицо ССЫЛКА Справочник.Пользователи
			|			ИЛИ ФлагиОбъектов.ФизическоеЛицо ССЫЛКА Справочник.Сотрудники)";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ФлагиОбъектов.Объект КАК Объект,
		|	ФлагиОбъектов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФлагиОбъектов.ФизическоеЛицо.Владелец КАК Владелец,
		|	ФлагиОбъектов.Флаг КАК Флаг
		|ИЗ
		|	РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|ГДЕ
		|	(ФлагиОбъектов.ФизическоеЛицо ССЫЛКА Справочник.Пользователи
		|	ИЛИ ФлагиОбъектов.ФизическоеЛицо ССЫЛКА Справочник.Сотрудники)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	КешПользовательФизлицо = Новый Соответствие; // Ключ - Пользователь, Значение - Физлицо
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Набор = РегистрыСведений.ФлагиОбъектов.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(Выборка.Объект);
			Набор.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			АвторФлага = Выборка.ФизическоеЛицо;
			Если ТипЗнч(Выборка.ФизическоеЛицо) = Тип("СправочникСсылка.Сотрудники") Тогда
				
				АвторФлага = Выборка.Владелец;
				
			ИначеЕсли ТипЗнч(Выборка.ФизическоеЛицо) = Тип("СправочникСсылка.Пользователи") Тогда
				
				АвторФлага = КешПользовательФизлицо[Выборка.ФизическоеЛицо];
				
				Если АвторФлага = Неопределено Тогда
					Сотрудник = Сотрудники.ОсновнойСотрудникПользователя(Выборка.ФизическоеЛицо);
					АвторФлага = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Владелец");
					
					КешПользовательФизлицо[Выборка.ФизическоеЛицо] = АвторФлага;
				КонецЕсли;
				
			КонецЕсли;	
			
			Набор = РегистрыСведений.ФлагиОбъектов.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(Выборка.Объект);
			Набор.Отбор.ФизическоеЛицо.Установить(АвторФлага);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ФизическоеЛицо = АвторФлага;
					
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать запись о флаге объекта %1. Причина:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Объект),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьСотрудниковНаФизлицВоФлагахОбъектов не удалось обработать некоторые записи о флагах объектов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
		
КонецПроцедуры

Процедура ЗаполнитьКомментарийВРезультатыДействий(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
			|ГДЕ
			|	РезультатыДействий.ИдентификаторУчастника <> &ПустойИдентификатор";
		Запрос.УстановитьПараметр("ПустойИдентификатор", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество;
		
	КонецЕсли; 
	
	ДатаНачала = ТекущаяДатаСеанса();
	СамаяСтараяДата = Неопределено;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		СамаяСтараяДата = ДатаНачала;
	КонецЕсли;	
	
	Если Параметры.Свойство("ПоследняяОбработаннаяДата")
		И Параметры.Свойство("СамаяСтараяДата") Тогда    
		
		ДатаНачала = Параметры["ПоследняяОбработаннаяДата"];
		СамаяСтараяДата = Параметры["СамаяСтараяДата"]; // она не меняется, просто считали тут ее

		Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
			СамаяСтараяДата = ДатаНачала;
		КонецЕсли;	
		
	Иначе

		// найдем самую старую дату в РС (где  ИдентификаторУчастника <> &ПустойИдентификатор)
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РезультатыДействий.Дата КАК Дата
			|ИЗ
			|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
			|ГДЕ
			|	РезультатыДействий.ИдентификаторУчастника <> &ПустойИдентификатор
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата";     
		Запрос.УстановитьПараметр("ПустойИдентификатор", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
		РезЗапроса = Запрос.Выполнить();
		Если Не РезЗапроса.Пустой() Тогда	
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			СамаяСтараяДата = Выборка.Дата;
		Иначе
			СамаяСтараяДата = ДатаНачала;
		КонецЕсли;
		
		Параметры.Вставить("СамаяСтараяДата", СамаяСтараяДата);
		Параметры.Вставить("ПоследняяОбработаннаяДата", ТекущаяДатаСеанса());
		
	КонецЕсли;	
	
	Запрос.Текст =         
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	РезультатыДействий.Дата КАК Дата,
		|	РезультатыДействий.Действие,
		|	РезультатыДействий.ИдентификаторПункта,
		|	РезультатыДействий.ИдентификаторУчастника,
		|	РезультатыДействий.Участник,
		|	РезультатыДействий.Функция,
		|	РезультатыДействий.РезультатТекстом,
		|	РезультатыДействий.Результат,
		|	РезультатыДействий.ЕстьФайлыОтчета
		|ИЗ
		|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|ГДЕ
		|	РезультатыДействий.Дата <= &ДатаНачала
		|	И РезультатыДействий.ИдентификаторУчастника <> &ПустойИдентификатор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);	
	Запрос.УстановитьПараметр("ПустойИдентификатор", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	ПоследняяОбработаннаяДата = ДатаНачала;
	ОбъектовВЭтойПорции = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ПоследняяОбработаннаяДата = Выборка.Дата;
			ОбъектовВЭтойПорции = ОбъектовВЭтойПорции + 1; 
			
			Если Выборка.РезультатТекстом = "" И Выборка.ЕстьФайлыОтчета = Ложь Тогда
			
				// найдем  РезультатТекстом + ЕстьФайлыОтчета
				ЗадачаИсполнителя = РаботаСПроцессамиПоДействиям.ЗадачаПроцессаПоУчастникуДействия(
					Выборка.Действие, Выборка.ИдентификаторУчастника);
				
				Если ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда
					
					ДействиеЗадачиПоИсточнику = Документы.ДействиеЗадачи.НайтиПоИсточнику(ЗадачаИсполнителя);
					
					Если ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
						
						РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							ДействиеЗадачиПоИсточнику, "РезультатДействияТекстом, ЕстьПриложения"); 
							
						Если РеквизитыЗадачи.ЕстьПриложения Или РеквизитыЗадачи.РезультатДействияТекстом <> "" Тогда	
											
							НаборЗаписей = РегистрыСведений.РезультатыДействий.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Действие.Установить(Выборка.Действие);
							НаборЗаписей.Отбор.ИдентификаторПункта.Установить(Выборка.ИдентификаторПункта);
							НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(Выборка.ИдентификаторУчастника);
							НаборЗаписей.Отбор.Участник.Установить(Выборка.Участник);
							НаборЗаписей.Отбор.Функция.Установить(Выборка.Функция);
							
							ЗаписьРегистра = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
							
							ЗаписьРегистра.ЕстьФайлыОтчета = РеквизитыЗадачи.ЕстьПриложения;
							ЗаписьРегистра.РезультатТекстом = РеквизитыЗадачи.РезультатДействияТекстом;
				
							ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей); 
							
							ОбработаноОбъектов = ОбработаноОбъектов + 1;
							
						КонецЕсли;
											
					КонецЕсли;	
					
				КонецЕсли;				 	
				
			КонецЕсли;
			

		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать РС РезультатыДействий %1. Причина:
					|%2'"),
				ПолучитьНавигационнуюСсылку(Выборка.Действие),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
				
	КонецЦикла;    
	
	Если Не Параметры.Свойство("ПоследняяОбработаннаяДата") Тогда
		Параметры.Вставить("ПоследняяОбработаннаяДата", ПоследняяОбработаннаяДата);
	Иначе	
		Параметры["ПоследняяОбработаннаяДата"] = ПоследняяОбработаннаяДата;
	КонецЕсли;	
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаполнитьКомментарийВРезультатыДействий не удалось обработать некоторые записи о флагах объектов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
		
	// прерываем, если дошли до самой старой даты
	Параметры.ОбработкаЗавершена = (ПоследняяОбработаннаяДата = СамаяСтараяДата); // дошли до конца
		
КонецПроцедуры

// Перезаполняет права руководителей. Была ошибка, из-за которой они могли пропасть.
Процедура ПерейтиНаВерсию_3_0_11_23() Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавлятьРуководителямДоступПодчиненных = Константы.ДобавлятьРуководителямДоступПодчиненных.Получить();
	Если ДобавлятьРуководителямДоступПодчиненных Тогда
		РегистрыСведений.СоставСубъектовПравДоступа.ЗаполнитьВсехРуководителей();
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет ПравилаЗаполненияСтрокТаблицы в справочнике ПравилаЗагрузкиДанныхВДО.
//
Процедура ПерейтиНаВерсию_3_0_12_3() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО.Ссылка КАК Ссылка,
		|	ПравилаЗагрузкиДанныхВДО.ТипОбъектаДО КАК ТипОбъектаДО,
		|	ПравилаЗагрузкиДанныхВДО.ВидДокумента КАК ВидДокумента,
		|	ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО.ИмяРеквизитаОбъектаДО КАК Таблица
		|ПОМЕСТИТЬ СписокТаблиц
		|ИЗ
		|	Справочник.ПравилаЗагрузкиДанныхВДО.ПравилаЗаполненияРеквизитовДО КАК ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЗагрузкиДанныхВДО КАК ПравилаЗагрузкиДанныхВДО
		|		ПО ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО.Ссылка = ПравилаЗагрузкиДанныхВДО.Ссылка
		|ГДЕ
		|	НЕ ПравилаЗагрузкиДанныхВДО.ПометкаУдаления
		|	И ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО.ЭтоТаблица
		|	И ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокТаблиц.Ссылка КАК Ссылка,
		|	СписокТаблиц.ТипОбъектаДО КАК ТипОбъектаДО,
		|	СписокТаблиц.ВидДокумента КАК ВидДокумента,
		|	СписокТаблиц.Таблица КАК Таблица,
		|	ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО.ИмяРеквизитаОбъектаДО КАК ИмяРеквизитаОбъектаДО
		|ИЗ
		|	СписокТаблиц КАК СписокТаблиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаЗагрузкиДанныхВДО.ПравилаЗаполненияРеквизитовДО КАК ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО
		|		ПО СписокТаблиц.Ссылка = ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО.Ссылка
		|			И СписокТаблиц.Таблица = ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО.Таблица
		|			И (ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО.Вариант <> ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка))
		|ГДЕ
		|	ПравилаЗагрузкиДанныхВДОПравилаЗаполненияРеквизитовДО.ИмяРеквизитаОбъектаДО <> """"
		|ИТОГИ ПО
		|	Ссылка,
		|	Таблица");
	ВыборкаСсылка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		ПравилоОбъект = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		Попытка
			ПравилоОбъект.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		БылиИзменения = Ложь;
		
		ВыборкаТаблица = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТаблица.Следующий() Цикл
			СтрокиЗаполненияТаблицы = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.НайтиСтроки(
				Новый Структура("ИмяРеквизитаОбъектаДО, ЭтоТаблица", ВыборкаТаблица.Таблица, Истина));
			Если СтрокиЗаполненияТаблицы.Количество() <> 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаДетальныеЗаписи = ВыборкаТаблица.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокиЗаполненияРеквизита = ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.НайтиСтроки(
					Новый Структура("ИмяРеквизитаОбъектаДО, Таблица, ЭтоТаблица",
						ВыборкаДетальныеЗаписи.ИмяРеквизитаОбъектаДО, ВыборкаТаблица.Таблица, Ложь));
				Если СтрокиЗаполненияРеквизита.Количество() <> 1 Тогда
					Продолжить;
				КонецЕсли;
				РаботаСИнтегрированнымиСистемами.ПоместитьПравилоЗаполненияРеквизитаСтрокиВХранилище(
					СтрокиЗаполненияРеквизита[0],
					СтрокиЗаполненияТаблицы[0].ПравилаЗаполненияСтрокТаблицы,
					ВыборкаДетальныеЗаписи.ТипОбъектаДО,
					ВыборкаДетальныеЗаписи.ВидДокумента);
				ПравилоОбъект.ПравилаЗаполненияРеквизитовДО.Удалить(СтрокиЗаполненияРеквизита[0]);
				БылиИзменения = Истина;
			КонецЦикла;
		КонецЦикла;
		
		Если БылиИзменения Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Установка новой константы МЭДО в Истина, т.к. старое поведение до этого такое-же, как будто она стояла в Истина
Процедура ПерейтиНаВерсию_3_0_12_4() Экспорт
	
	Константы.АвтоматическиОтправлятьКвитанцииМЭДО.Установить(Истина);
	Константы.ВариантАвтосозданияУведомленийМЭДО.Установить(
		Перечисления.ВариантыАвтосозданияУведомленийМЭДО.НеСоздавать);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_12_5() Экспорт
	
	Менеджер = Константы.РазмерПорцииДанныхДляПоиска.СоздатьМенеджерЗначения();
	Менеджер.Значение = 1000;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
	
КонецПроцедуры

// Заполняет РС ТекстыПисем
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика
Процедура ПерейтиНаВерсию_3_0_12_6(Параметры) Экспорт 
	
	ИспользоватьПолнотекстовыйПоиск = ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск");	
	Если Не ИспользоватьПолнотекстовыйПоиск Тогда 
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ЭлектроннаяПочта.Ссылка) КАК КолвоПисем
			|ИЗ
			|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыПисем КАК ТекстыПисем
			|		ПО ЭлектроннаяПочта.Ссылка = ТекстыПисем.Письмо
			|ГДЕ
			|	ТекстыПисем.Письмо ЕСТЬ NULL");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КолвоПисем;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЭлектроннаяПочта.Ссылка КАК Ссылка,
		|	ЭлектроннаяПочта.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыПисем КАК ТекстыПисем
		|		ПО ЭлектроннаяПочта.Ссылка = ТекстыПисем.Письмо
		|ГДЕ
		|	ТекстыПисем.Письмо ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектроннаяПочта.Дата УБЫВ");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Запишем новый набор записей.
			НаборЗаписей = РегистрыСведений.ТекстыПисем.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Письмо.Установить(Выборка.Ссылка);

			ЗаписьРегистра = НаборЗаписей.Добавить();  
			
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
				ТекстХранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка, "ТекстПисьмаПростойТекстХранилище");				
			Иначе // исходящее 	
				ТекстХранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка, "ТекстХранилище");				
			КонецЕсли;	
			
			ЗаписьРегистра.ИдУчетнойЗаписи = РегистрыСведений.ТекстыПисем.GUIDУчетнойЗаписи(Выборка.УчетнаяЗапись);
			ЗаписьРегистра.ТекстПисьма = ТекстХранилище;
			ЗаписьРегистра.Письмо = Выборка.Ссылка;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей); 
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить ТекстыПисем для письма %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_12_6 не удалось записать ТекстыПисем для некоторых писем (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_12_8() Экспорт
	
	// Регистрация МЧД к обмену.
	УзелАрхив = ПланыОбмена.ОбменНСИСАрхивом.УзелАрхив();
	ПланыОбмена.ЗарегистрироватьИзменения(УзелАрхив,
		Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов);
	ПланыОбмена.ЗарегистрироватьИзменения(УзелАрхив,
		Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций);
	
КонецПроцедуры

// Добавление новых ролей по защите ПДн в соответствующие профили
Процедура ПерейтиНаВерсию_3_0_12_9() Экспорт
	
	// Пользователи
	УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия(
		"ДобавлениеИзменениеСогласийНаОбработкуПерсональныхДанных",
		"c999acb1-d5f5-11de-a544-00179ab398dc");	
	
	// Полномочие "Уничтожение персональных данных"
	ИдентификаторСтрока = "d439374c-5c12-4661-9ad3-b4fd3880cbf9";
	ИдентификаторПрофиля = Новый УникальныйИдентификатор("d439374c-5c12-4661-9ad3-b4fd3880cbf9");
	
	Полномочие = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(ИдентификаторСтрока); 
	Если Полномочие = Неопределено Тогда
		Полномочие = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		Полномочие.ИдентификаторПоставляемыхДанных = ИдентификаторПрофиля;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Полномочие);
	КонецЕсли;
	Справочники.ПрофилиГруппДоступа.ЗаполнитьПоставляемыйПрофиль(Полномочие.Ссылка, Ложь);
	
	
КонецПроцедуры

// Заполняет ОжидатьЗавершения в Истина в спр ДействияОзнакомления
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика
Процедура ПерейтиНаВерсию_3_0_12_10(Параметры) Экспорт      
	
	ИдентификаторУчастникаПустой = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДействияОзнакомления.Ссылка) КАК КолвоДействий
			|ИЗ
			|	Справочник.ДействияОзнакомления КАК ДействияОзнакомления
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
			|		ПО ДействияОзнакомления.Ссылка = СостоянияДействий.Действие
			|			И (СостоянияДействий.ИдентификаторУчастника = &ИдентификаторУчастникаПустой)
			|ГДЕ
			|	ДействияОзнакомления.ОжидатьЗавершения = ЛОЖЬ
			|	И ДействияОзнакомления.ПомещеноВИсторию = ЛОЖЬ
			|	И НЕ СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)");
		
		Запрос.УстановитьПараметр("ИдентификаторУчастникаПустой", ИдентификаторУчастникаПустой);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КолвоДействий;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДействияОзнакомления.Ссылка КАК Ссылка,
		|	ДействияОзнакомления.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Справочник.ДействияОзнакомления КАК ДействияОзнакомления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ПО ДействияОзнакомления.Ссылка = СостоянияДействий.Действие
		|			И (СостоянияДействий.ИдентификаторУчастника = &ИдентификаторУчастникаПустой)
		|ГДЕ
		|	ДействияОзнакомления.ОжидатьЗавершения = ЛОЖЬ
		|	И ДействияОзнакомления.ПомещеноВИсторию = ЛОЖЬ
		|	И НЕ СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания УБЫВ");  
	Запрос.УстановитьПараметр("ИдентификаторУчастникаПустой", ИдентификаторУчастникаПустой);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.ОжидатьЗавершения = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект); 
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить спр ДействияОзнакомления для действия %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_12_10 не удалось записать спр ДействияОзнакомления для некоторых объектов (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Проставляет АктуализироватьВерсию = Истина в РС НастройкиКонтрагентовМЭДО. Т.к. старое поведение такое же, как будто
// это поле равно Истина
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика
Процедура ПерейтиНаВерсию_3_0_12_11(Параметры) Экспорт 
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(Настройки.Контрагент) КАК КолвоЗаписей
			|ИЗ
			|	РегистрСведений.НастройкиКонтрагентовМЭДО КАК Настройки
			|ГДЕ
			|	НЕ Настройки.АктуализироватьВерсию");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КолвоЗаписей;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 5000
		|	Настройки.Контрагент
		|ИЗ
		|	РегистрСведений.НастройкиКонтрагентовМЭДО КАК Настройки
		|ГДЕ
		|	НЕ Настройки.АктуализироватьВерсию");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Набор = РегистрыСведений.НастройкиКонтрагентовМЭДО.СоздатьНаборЗаписей();
			Набор.Отбор.Контрагент.Установить(Выборка.Контрагент);
			Набор.Прочитать();
			Если Набор.Количество() > 0 Тогда
				Запись = Набор[0];
				Запись.АктуализироватьВерсию = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			КонецЕсли;
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить поле ""%1"" в регистре сведений ""%2"",
					|для контрагента %3, по причине:
					|%4'"),
				"АктуализироватьВерсию", "НастройкиКонтрагентовМЭДО", Выборка.Контрагент, СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Контрагент.Метаданные(),
				Выборка.Контрагент,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось записать РС ""%2"" для некоторых объектов (пропущены): %3'"),
			"ПерейтиНаВерсию_3_0_12_11",
			"НастройкиКонтрагентовМЭДО",
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_12_12() Экспорт
	
	Константы.ПороговыйКоэффициентДляЗаписиПравПоштучно.Установить(100);
	
КонецПроцедуры

// Заполняет настройки сопоставления сотрудников в узлах плана обмена ИнтегрированныеСистемы.
//
Процедура ПерейтиНаВерсию_3_0_12_13() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИнтегрированныеСистемы.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.ИнтегрированныеСистемы КАК ИнтегрированныеСистемы
		|ГДЕ
		|	НЕ ИнтегрированныеСистемы.ПометкаУдаления
		|	И ИнтегрированныеСистемы.ПоддерживаетПравилаЗагрузкиДанныхВДО
		|	И (НЕ ИнтегрированныеСистемы.СопоставлятьСотрудниковПоДолжности
		|			ИЛИ НЕ ИнтегрированныеСистемы.СопоставлятьСотрудниковПоПодразделению)");
	ВыборкаСсылка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		Узел = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		Попытка
			Узел.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		Узел.СопоставлятьСотрудниковПоДолжности = Истина;
		Узел.СопоставлятьСотрудниковПоПодразделению = Истина;
		
		Узел.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает состояние "Удалено" в РС СостояниеДокументовПоЭДО для бумажных документов, которые еще не сформированы
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика
Процедура ПерейтиНаВерсию_3_0_12_15(Параметры) Экспорт
	
	РегистрыСведений.СостояниеДокументовПоЭДО.УдалитьСостояниеЭДОБумажныхДокументовПриОбновлении(Параметры);
	
КонецПроцедуры

// Заполняет ОжидатьЗавершения в Истина в спр НастройкиДействийОзнакомления
//
Процедура ПерейтиНаВерсию_3_0_12_16() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиДействийОзнакомления.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиДействийОзнакомления КАК НастройкиДействийОзнакомления
		|ГДЕ
		|	НастройкиДействийОзнакомления.ОжидатьЗавершения = ЛОЖЬ");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.ОжидатьЗавершения = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект); 
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить спр НастройкиДействийОзнакомления для действия %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
			КонецПопытки; 
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_12_17() Экспорт
	
	ЗаполнитьНастройкиСвязейПредопределенные();
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_3_0_12_18() Экспорт
	
	Справочники.ВидыЗадач.ЗаполнитьПоставляемыеДанные();
	
КонецПроцедуры

// Исправляет настройки подтверждения завершения выхода из программы
Процедура ПерейтиНаВерсию_3_0_12_19() Экспорт
	
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		
		СтараяНастройка = ХранилищеОбщихНастроек.Загрузить("НастройкаВыходаИзПрограммы",,, Пользователь.Имя);
		Если СтараяНастройка <> Неопределено Тогда
		
			НоваяНастройка = ХранилищеОбщихНастроек.Загрузить("ОбщиеНастройкиПользователя",
				"ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", , Пользователь.Имя);
			
			Если НоваяНастройка = Неопределено Тогда
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбщиеНастройкиПользователя",
					"ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", СтараяНастройка, , Пользователь.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_12_20() Экспорт
	
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2024Год(Ложь, Истина);
	
КонецПроцедуры

// Заполнить РС УчастникиОзнакомлений, по старым действиям ознакомления , активные сразу
Процедура ПерейтиНаВерсию_3_0_12_21() Экспорт  
	
	ИдентификаторУчастникаПустой = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействияОзнакомленияУчастники.Ссылка КАК Ссылка,
		|	ДействияОзнакомленияУчастники.Ссылка.ДатаСоздания КАК ДатаСоздания,
		|	ДействияОзнакомленияУчастники.Идентификатор КАК Идентификатор,
		|	ДействияОзнакомленияУчастники.Участник КАК Участник,
		|	СостоянияДействий.Состояние КАК Состояние,
		|	СостоянияДействий.Дата КАК Дата,
		|	РезультатыДействий.РезультатТекстом КАК РезультатТекстом,
		|	РезультатыДействий.Результат КАК Результат,
		|	СведенияОбУчастникахДействий.ДатаНачала КАК ДатаНачала,
		|	СведенияОбУчастникахДействий.СрокРассчитанный КАК СрокРассчитанный,
		|	СведенияОбУчастникахДействий.ФактическийИсполнитель КАК ФактическийИсполнитель
		|ИЗ
		|	Справочник.ДействияОзнакомления.Участники КАК ДействияОзнакомленияУчастники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействийКорневое
		|		ПО ДействияОзнакомленияУчастники.Ссылка = СостоянияДействийКорневое.Действие
		|			И (СостоянияДействийКорневое.ИдентификаторУчастника = &ИдентификаторУчастникаПустой)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ПО ДействияОзнакомленияУчастники.Ссылка = СостоянияДействий.Действие
		|			И (СостоянияДействий.ИдентификаторУчастника = ДействияОзнакомленияУчастники.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|		ПО ДействияОзнакомленияУчастники.Ссылка = РезультатыДействий.Действие
		|			И (РезультатыДействий.ИдентификаторУчастника = ДействияОзнакомленияУчастники.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
		|		ПО ДействияОзнакомленияУчастники.Ссылка = СведенияОбУчастникахДействий.Действие
		|			И (СведенияОбУчастникахДействий.ИдентификаторУчастника = ДействияОзнакомленияУчастники.Идентификатор)
		|ГДЕ
		|	ДействияОзнакомленияУчастники.Ссылка.ПомещеноВИсторию = ЛОЖЬ
		|	И СостоянияДействийКорневое.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|	И (ДействияОзнакомленияУчастники.Участник ССЫЛКА Справочник.ПолныеРоли
		|			ИЛИ ДействияОзнакомленияУчастники.Участник ССЫЛКА Справочник.Сотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка");
	
	Запрос.УстановитьПараметр("ИдентификаторУчастникаПустой", ИдентификаторУчастникаПустой);
	
	ОбработаноОбъектов = 0;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.ОжидатьЗавершения = Истина; // сразу делаем тут - неотложенно
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);      
			
			ЗаписатьРСУчастникиОзнакомлений(Выборка);
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить спр ДействияОзнакомления для действия %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьРСУчастникиОзнакомлений(Выборка)

	Действие = Выборка.Ссылка;   
	
	НаборЗаписей = РегистрыСведений.УчастникиОзнакомлений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Действие.Установить(Действие);
	НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(Выборка.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();  
	
	Запись.Действие = Действие;
	Запись.ДатаНачала = Выборка.ДатаНачала;          
	Если Не ЗначениеЗаполнено(Запись.ДатаНачала) Тогда
		Запись.ДатаНачала = Выборка.ДатаСоздания;        
	КонецЕсли; 
	
	Запись.ИдентификаторУчастника = Выборка.Идентификатор;      
	Запись.ИдентификаторУчастникаДействия = Выборка.Идентификатор;
	
	Запись.Участник = Выборка.Участник;
	Запись.Исполнитель = Выборка.Участник;
	
	Если Не ЗначениеЗаполнено(Запись.Участник) Тогда
		Возврат; //не пишем
	КонецЕсли;	
	
	Запись.Срок = Выборка.СрокРассчитанный;
	Запись.ФактическийИсполнитель = Выборка.ФактическийИсполнитель;
	Запись.РезультатОзнакомленияТекстом = Выборка.РезультатТекстом;
	
	Если Выборка.Состояние = Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
		Запись.Состояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении;
	ИначеЕсли Выборка.Состояние = Перечисления.СостоянияВыполненияДействий.Завершено Тогда	
		Запись.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился;    
		Запись.ДатаЗавершения = Выборка.Дата;
	Иначе
		Запись.Состояние = Перечисления.СостоянияОзнакомления.Отменено;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры

// Заполнит РС УчастникиОзнакомлений, по старым действиям ознаколмения
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика
Процедура ПерейтиНаВерсию_3_0_12_22(Параметры) Экспорт      
	
	ИдентификаторУчастникаПустой = ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор();
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ДействияОзнакомленияУчастники.Идентификатор) КАК КолвоУчастниковДействий
		|ИЗ
		|	Справочник.ДействияОзнакомления.Участники КАК ДействияОзнакомленияУчастники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействийКорневое
		|		ПО ДействияОзнакомленияУчастники.Ссылка = СостоянияДействийКорневое.Действие
		|			И (СостоянияДействийКорневое.ИдентификаторУчастника = &ИдентификаторУчастникаПустой)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ПО ДействияОзнакомленияУчастники.Ссылка = СостоянияДействий.Действие
		|			И (СостоянияДействий.ИдентификаторУчастника = ДействияОзнакомленияУчастники.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|		ПО ДействияОзнакомленияУчастники.Ссылка = РезультатыДействий.Действие
		|			И (РезультатыДействий.ИдентификаторУчастника = ДействияОзнакомленияУчастники.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
		|		ПО ДействияОзнакомленияУчастники.Ссылка = СведенияОбУчастникахДействий.Действие
		|			И (СведенияОбУчастникахДействий.ИдентификаторУчастника = ДействияОзнакомленияУчастники.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|		ПО ДействияОзнакомленияУчастники.Ссылка = УчастникиОзнакомлений.Действие
		|			И (УчастникиОзнакомлений.ИдентификаторУчастника = ДействияОзнакомленияУчастники.Идентификатор)
		|ГДЕ
		|	(ДействияОзнакомленияУчастники.Ссылка.ПомещеноВИсторию = ИСТИНА
		|			ИЛИ СостоянияДействийКорневое.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется))
		|	И УчастникиОзнакомлений.Действие ЕСТЬ NULL
		|	И (ДействияОзнакомленияУчастники.Участник ССЫЛКА Справочник.ПолныеРоли
		|			ИЛИ ДействияОзнакомленияУчастники.Участник ССЫЛКА Справочник.Сотрудники)");
		
		Запрос.УстановитьПараметр("ИдентификаторУчастникаПустой", ИдентификаторУчастникаПустой);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КолвоУчастниковДействий;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 5000
		|	ДействияОзнакомленияУчастники.Ссылка КАК Ссылка,
		|	ДействияОзнакомленияУчастники.Ссылка.ДатаСоздания КАК ДатаСоздания,
		|	ДействияОзнакомленияУчастники.Идентификатор КАК Идентификатор,
		|	ДействияОзнакомленияУчастники.Участник КАК Участник,
		|	СостоянияДействий.Состояние КАК Состояние,
		|	СостоянияДействий.Дата КАК Дата,
		|	РезультатыДействий.РезультатТекстом КАК РезультатТекстом,
		|	РезультатыДействий.Результат КАК Результат,
		|	СведенияОбУчастникахДействий.ДатаНачала КАК ДатаНачала,
		|	СведенияОбУчастникахДействий.СрокРассчитанный КАК СрокРассчитанный,
		|	СведенияОбУчастникахДействий.ФактическийИсполнитель КАК ФактическийИсполнитель
		|ИЗ
		|	Справочник.ДействияОзнакомления.Участники КАК ДействияОзнакомленияУчастники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействийКорневое
		|		ПО ДействияОзнакомленияУчастники.Ссылка = СостоянияДействийКорневое.Действие
		|			И (СостоянияДействийКорневое.ИдентификаторУчастника = &ИдентификаторУчастникаПустой)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ПО ДействияОзнакомленияУчастники.Ссылка = СостоянияДействий.Действие
		|			И (СостоянияДействий.ИдентификаторУчастника = ДействияОзнакомленияУчастники.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|		ПО ДействияОзнакомленияУчастники.Ссылка = РезультатыДействий.Действие
		|			И (РезультатыДействий.ИдентификаторУчастника = ДействияОзнакомленияУчастники.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
		|		ПО ДействияОзнакомленияУчастники.Ссылка = СведенияОбУчастникахДействий.Действие
		|			И (СведенияОбУчастникахДействий.ИдентификаторУчастника = ДействияОзнакомленияУчастники.Идентификатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|		ПО ДействияОзнакомленияУчастники.Ссылка = УчастникиОзнакомлений.Действие
		|			И (УчастникиОзнакомлений.ИдентификаторУчастника = ДействияОзнакомленияУчастники.Идентификатор)
		|ГДЕ
		|	(ДействияОзнакомленияУчастники.Ссылка.ПомещеноВИсторию = ИСТИНА
		|			ИЛИ СостоянияДействийКорневое.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется))
		|	И УчастникиОзнакомлений.Действие ЕСТЬ NULL
		|	И (ДействияОзнакомленияУчастники.Участник ССЫЛКА Справочник.ПолныеРоли
		|			ИЛИ ДействияОзнакомленияУчастники.Участник ССЫЛКА Справочник.Сотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка");
	Запрос.УстановитьПараметр("ИдентификаторУчастникаПустой", ИдентификаторУчастникаПустой);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаписатьРСУчастникиОзнакомлений(Выборка);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить спр ДействияОзнакомления для действия %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_12_22 не удалось записать РС УчастникиОзнакомлений для некоторых объектов (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_13_3() Экспорт
	
	Константы.ПредельныйРазмерДляПредпросмотра.Установить( 10 * 1024 * 1024 );
	
КонецПроцедуры  

// Заполняет новый реквизит АдресатыДляСписков в РС ДанныеДокументовПредприятия
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//    ** ОбработаноОбъектов - Число -
//    ** ВсегоОбъектов - Число -
//   * ОбработкаЗавершена - Булево -
Процедура ПерейтиНаВерсию_3_0_13_4(Параметры) Экспорт 
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КорреспонденцияТЧ.Ссылка) КАК КолвоКорреспонденций
			|ИЗ
			|	Документ.Корреспонденция.Корреспонденты КАК КорреспонденцияТЧ
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументов
			|		ПО
			|			ДанныеДокументов.Документ = КорреспонденцияТЧ.Ссылка.Основание
			|ГДЕ
			|	НЕ КорреспонденцияТЧ.Адресат В (
			|		НЕОПРЕДЕЛЕНО,
			|		ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка),
			|		ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка))
			|	И ДанныеДокументов.АдресатыДляСписков = """" ");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КолвоКорреспонденций;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КорреспонденцияТЧ.Ссылка КАК Корреспонденция,
		|	ДанныеДокументов.Документ КАК Документ
		|ИЗ
		|	Документ.Корреспонденция.Корреспонденты КАК КорреспонденцияТЧ
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументов
		|		ПО
		|			ДанныеДокументов.Документ = КорреспонденцияТЧ.Ссылка.Основание
		|ГДЕ
		|	НЕ КорреспонденцияТЧ.Адресат В (
		|		НЕОПРЕДЕЛЕНО,
		|		ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка))
		|	И ДанныеДокументов.АдресатыДляСписков = """" ");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КорреспонденцияТЧ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Выборка.Корреспонденция, "Корреспонденты").Выгрузить();
		АдресатыДляСписков = ОбщегоНазначенияДокументооборот.СтрСоединитьОграниченноеКолво(
			КорреспонденцияТЧ.ВыгрузитьКолонку("Адресат"), 250);
		Попытка
			Делопроизводство.ЗаписатьДанныеДокумента(
				Выборка.Документ, "АдресатыДляСписков", АдресатыДляСписков, Истина);
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
		Исключение
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СтекОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить поле ""%1"" в регистре сведений ""%2"",
					|для документа %3, по причине:
					|%4'"),
				"АдресатыДляСписков", "ДанныеДокументовПредприятия", Выборка.Документ, СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Документ.Метаданные(),
				Выборка.Документ,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ""%1"" не удалось записать регистр сведений ""%2""
			|для некоторых объектов (пропущены): %3'"),
			"ПерейтиНаВерсию_3_0_13_4", "ДанныеДокументовПредприятия", ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Обновляет виджеты рабочего стола, касательно обращений граждан
Процедура ПерейтиНаВерсию_3_0_13_5() Экспорт
	
	Справочники.КомандыВиджетов.ЗаполнитьПоставляемыеДанные();
	Справочники.БлокиНавигации.ЗаполнитьПоставляемыеДанные();
	
КонецПроцедуры

// Пишет РС ИзбранноеПользователей
Процедура ПерейтиНаВерсию_3_0_13_6() Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Ссылка,
	               |	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	               |	Пользователи.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл                   
		
		Пользователь = Выборка.Ссылка;
		
		Попытка
			СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(Выборка.ИдентификаторПользователяИБ);
			
			Если СвойстваПользователяИБ <> Неопределено Тогда
				
				Имя = СвойстваПользователяИБ.Имя;  
				
				Избранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя", "", , Имя);
				Если Избранное <> Неопределено Тогда
					
					МассивИзбранное = Новый Массив;
					Для Каждого Строка Из Избранное Цикл
						МассивИзбранное.Добавить(
						Новый Структура("Важное, НавигационнаяСсылка, Представление", 
						Строка.Важное,
						Строка.НавигационнаяСсылка,
						Строка.Представление)
						);
					КонецЦикла;	
					
					РегистрыСведений.ИзбранноеПользователей.ДобавитьЗапись(Пользователь, МассивИзбранное);
				КонецЕсли;
				
			КонецЕсли;	
		
		Исключение
			
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить избранное пользователя ""%1""
					|по причине:
					|%2'"),
				Пользователь, СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Пользователь.Метаданные(),
				Пользователь,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

// Заполняет РС ПерсональныеНастройкиПользователей
Процедура ПерейтиНаВерсию_3_0_13_7(Параметры) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Параметры.ОбработкаЗавершена = Истина;	
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ПерсональныеНастройкиПользователя.Пользователь КАК Пользователь
				|ПОМЕСТИТЬ ПерсональныеНастройкиПользователя
				|ИЗ
				|	РегистрСведений.ПерсональныеНастройкиПользователей КАК ПерсональныеНастройкиПользователя
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КОЛИЧЕСТВО(Пользователи.Ссылка) КАК КоличествоПользователей
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПерсональныеНастройкиПользователя КАК ПерсональныеНастройкиПользователя
				|		ПО (ПерсональныеНастройкиПользователя.Пользователь = Пользователи.Ссылка)
				|ГДЕ
				|	ПерсональныеНастройкиПользователя.Пользователь ЕСТЬ NULL"
		);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КоличествоПользователей;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПерсональныеНастройкиПользователя.Пользователь КАК Пользователь
	               |ПОМЕСТИТЬ ПерсональныеНастройкиПользователя
	               |ИЗ
	               |	РегистрСведений.ПерсональныеНастройкиПользователей КАК ПерсональныеНастройкиПользователя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1000
	               |	Пользователи.Ссылка КАК Ссылка,
	               |	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	               |	Пользователи.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПерсональныеНастройкиПользователя КАК ПерсональныеНастройкиПользователя
	               |		ПО (ПерсональныеНастройкиПользователя.Пользователь = Пользователи.Ссылка)
	               |ГДЕ
	               |	ПерсональныеНастройкиПользователя.Пользователь ЕСТЬ NULL
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл                   
		
		Пользователь = Выборка.Ссылка;
		
		Попытка
			СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(Выборка.ИдентификаторПользователяИБ);
			
			Если СвойстваПользователяИБ <> Неопределено Тогда
				
				ИмяПользователяИсточник = СвойстваПользователяИБ.Имя;    
				
				МенеджерНастроек = ХранилищеОбщихНастроек;
				
				ТаблицаНастроек = РегистрыСведений.ПерсональныеНастройкиПользователей.СписокНастроек(ИмяПользователяИсточник, МенеджерНастроек);
				
				Если ТаблицаНастроек.Количество() <> 0 Тогда
					
					Для Каждого Настройка Из ТаблицаНастроек Цикл
						КлючОбъекта = Настройка.КлючОбъекта;
						КлючНастроек = Настройка.КлючНастроек;
						Значение = МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователяИсточник);
						
						РегистрыСведений.ПерсональныеНастройкиПользователей.ДобавитьЗапись(
							Пользователь, КлючОбъекта, КлючНастроек, Значение);
							
					КонецЦикла;  
					
				Иначе		

					РегистрыСведений.ПерсональныеНастройкиПользователей.ДобавитьЗапись(
						Пользователь, "ПустаяЗапись", "", Истина);
				
				КонецЕсли;	
					
			Иначе		

				РегистрыСведений.ПерсональныеНастройкиПользователей.ДобавитьЗапись(
					Пользователь, "ПустаяЗапись", "", Истина);
				
			КонецЕсли;	
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
		
		Исключение          
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить перс настройки пользователя ""%1""
					|по причине:
					|%2'"),
				Пользователь, СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Пользователь.Метаданные(),
				Пользователь,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ""%1"" не удалось записать регистр сведений ""%2""
			|для некоторых объектов (пропущены): %3'"),
			"ПерейтиНаВерсию_3_0_13_7", "ПерсональныеНастройкиПользователя", ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Устанавливает константу по умолчанию
Процедура ПерейтиНаВерсию_3_0_13_8() Экспорт
	
	Менеджер = Константы.РазмерПорцииОчередиДляПоискаИсторическихДанныхКОД.СоздатьМенеджерЗначения();
	Менеджер.Значение = 500;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
	
КонецПроцедуры

// Регистрирует к отправке предопределенные объекты из центрального узла
//
Процедура ПерейтиНаВерсию_3_0_13_9() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() Тогда
		ОбновлениеИнформационнойБазыХолдинг.ЗафиксироватьОтметкиВремениПредопределенныхОбъектов(Истина);
	КонецЕсли;
	
КонецПроцедуры

// 1. Заполняет новое поле в РС НастройкиОрганизацийМЭДО
// 2. В настройках пользователей меняет тип настройки для положения рег.штампов и штрихкодов с
// ПеречислениеСсылка.УдалитьВариантыРасположенияШтрихкода на ПеречислениеСсылка.МестаВставкиКартинки
// - обе перезаписи объединены, т.к. это в рамках одной доработки, касающейся регистрационных штампов.
Процедура ПерейтиНаВерсию_3_0_13_10() Экспорт
	
	// п.1:
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Организация
		|ИЗ
		|	РегистрСведений.НастройкиОрганизацийМЭДО КАК Настройки
		|ГДЕ
		|	СтраницаВставкиРегШтампа = &ПустоеЗначение");
	Запрос.УстановитьПараметр("ПустоеЗначение", Перечисления.СтраницаВставкиКартинки.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.НастройкиОрганизацийМЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Прочитать();
		Для Каждого Запись Из Набор Цикл
			Запись.СтраницаВставкиРегШтампа = Перечисления.СтраницаВставкиКартинки.Первая;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	КонецЦикла;
	
	
	// п.2:
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		Если Не Пользователи.ВходВПрограммуРазрешен(ПользовательИБ) Тогда
			Продолжить;
		КонецЕсли;
		
		// Для рег.номера:
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиРегНомера", "ПоложениеНаСтранице", , , ПользовательИБ.Имя);
		НовоеЗначение = НовоеЗначениеПеречисленияПоСтарому(СохраненноеЗначение);
		Если ЗначениеЗаполнено(НовоеЗначение) Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
				"НастройкиРегНомера", "ПоложениеНаСтранице", НовоеЗначение);
		КонецЕсли;
		
		// для штрихкода:
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиШтрихкода", "ПоложениеШтрихкодаНаСтранице", , , ПользовательИБ.Имя);
		НовоеЗначение = НовоеЗначениеПеречисленияПоСтарому(СохраненноеЗначение);
		Если ЗначениеЗаполнено(НовоеЗначение) Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
				"НастройкиШтрихкода", "ПоложениеШтрихкодаНаСтранице", НовоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеЗначениеПеречисленияПоСтарому(СтароеЗначение)
	
	НовоеЗначение = Неопределено;
	Если ТипЗнч(СтароеЗначение) = Тип("ПеречислениеСсылка.УдалитьВариантыРасположенияШтрихкода") Тогда
		Если СтароеЗначение = Перечисления.УдалитьВариантыРасположенияШтрихкода.ЛевыйВерхний Тогда
			НовоеЗначение = Перечисления.МестаВставкиКартинки.ЛевыйВерхний;
		ИначеЕсли СтароеЗначение = Перечисления.УдалитьВариантыРасположенияШтрихкода.ЛевыйНижний Тогда 
			НовоеЗначение = Перечисления.МестаВставкиКартинки.ЛевыйНижний;
		ИначеЕсли СтароеЗначение = Перечисления.УдалитьВариантыРасположенияШтрихкода.ПравыйВерхний Тогда 
			НовоеЗначение = Перечисления.МестаВставкиКартинки.ПравыйВерхний;
		ИначеЕсли СтароеЗначение = Перечисления.УдалитьВариантыРасположенияШтрихкода.ПравыйНижний Тогда 
			НовоеЗначение = Перечисления.МестаВставкиКартинки.ПравыйНижний;
		ИначеЕсли СтароеЗначение = Перечисления.УдалитьВариантыРасположенияШтрихкода.ПроизвольноеПоложение Тогда 
			НовоеЗначение = Перечисления.МестаВставкиКартинки.ПроизвольноеПоложение;
		КонецЕсли;
	КонецЕсли;
	Возврат НовоеЗначение;
	
КонецФункции

// Заполняет регистр сведений ИдентификаторыАвтообновляемыхОбсуждений по ключам существующих обсуждений
// Устанавливает имя пользователя для регзаданий, работающих с СВ
Процедура ПерейтиНаВерсию_3_0_13_13() Экспорт
	
	// С СВ нельзя работать без пользователя, установим пользователя регзаданиям
	ИмяТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если Не ЗначениеЗаполнено(ИмяТекущегоПользователя) Тогда
		ИмяТекущегоПользователя = "Администратор";
	КонецЕсли;
	
	РеглЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.АктуализироватьСоставАвтообсуждений);
	Если Не ЗначениеЗаполнено(РеглЗадание.ИмяПользователя) Тогда
		РеглЗадание.ИмяПользователя = ИмяТекущегоПользователя;
		РеглЗадание.Записать();
	КонецЕсли;
	
	РеглЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбновлениеОбсуждений);
	Если Не ЗначениеЗаполнено(РеглЗадание.ИмяПользователя) Тогда
		РеглЗадание.ИмяПользователя = ИмяТекущегоПользователя;
		РеглЗадание.Записать();
	КонецЕсли;
	
	РеглЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ДиспетчерПолученияКОД);
	Если Не ЗначениеЗаполнено(РеглЗадание.ИмяПользователя) Тогда
		РеглЗадание.ИмяПользователя = ИмяТекущегоПользователя;
		РеглЗадание.Записать();
	КонецЕсли;
	
	
	// Заполним Идентификаторы автообновляемых обсуждений
	
	Если Не ПолучитьФункциональнуюОпцию("ОбсужденияПодключены") Тогда
		Возврат;
	КонецЕсли;

	Если Не КОДСервер.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК КонтейнерСсылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РабочиеГруппы.Ссылка
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Проекты.Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	НЕ Проекты.ПометкаУдаления
		|	И Проекты.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияПроектов.Завершен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|		ПО Мероприятия.Ссылка = СостоянияМероприятий.Мероприятие
		|ГДЕ
		|	НЕ Мероприятия.ПометкаУдаления
		|	И НЕ СостоянияМероприятий.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеПроведено),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеОтменено))";
	
	КонтейнерыВыборка = Запрос.Выполнить().Выбрать();
		
	Пока КонтейнерыВыборка.Следующий() Цикл
		
		КонтейнерСсылка = КонтейнерыВыборка.КонтейнерСсылка;
		
		КлючОбсуждения = ОбсужденияДокументооборот.КлючАвтообновляемогоОбсуждения(КонтейнерСсылка, Ложь);
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбсуждения);
		
		Если Обсуждение <> Неопределено Тогда
			ОбсужденияДокументооборот.СохранитьИдентификаторОбсуждения(КонтейнерСсылка, Ложь, Обсуждение.Идентификатор);
		КонецЕсли;
		
		Если ТипЗнч(КонтейнерСсылка) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или ТипЗнч(КонтейнерСсылка) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			
			КлючОбсуждения = ОбсужденияДокументооборот.КлючАвтообновляемогоОбсуждения(КонтейнерСсылка, Истина);
			Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбсуждения);
			
			Если Обсуждение <> Неопределено Тогда
				ОбсужденияДокументооборот.СохранитьИдентификаторОбсуждения(КонтейнерСсылка, Истина, Обсуждение.Идентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сбрасывает признак защищенности участников исполнения по пунктам
//
Процедура ПерейтиНаВерсию_3_0_13_14(Параметры) Экспорт 
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДействияИсполнения.Ссылка
			|ПОМЕСТИТЬ ЗащищенныеУчастникиИсполненияПоПунктам
			|ИЗ
			|	Справочник.ДействияИсполнения.Участники КАК ДействияИсполненияУчастники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияИсполнения КАК ДействияИсполнения
			|		ПО (ДействияИсполненияУчастники.Ссылка = ДействияИсполнения.Ссылка)
			|ГДЕ
			|	ДействияИсполнения.ПоПунктам
			|	И ДействияИсполненияУчастники.Защищенный
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ЗащищенныеУчастникиИсполненияПоПунктам.Ссылка) КАК КоличествоДействийСЗащищеннымиУчастниками
			|ИЗ
			|	ЗащищенныеУчастникиИсполненияПоПунктам КАК ЗащищенныеУчастникиИсполненияПоПунктам");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КоличествоДействийСЗащищеннымиУчастниками;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействияИсполнения.Ссылка
		|ИЗ
		|	Справочник.ДействияИсполнения.Участники КАК ДействияИсполненияУчастники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияИсполнения КАК ДействияИсполнения
		|		ПО (ДействияИсполненияУчастники.Ссылка = ДействияИсполнения.Ссылка)
		|ГДЕ
		|	ДействияИсполнения.ПоПунктам
		|	И ДействияИсполненияУчастники.Защищенный
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДействияИсполнения.ДатаСоздания УБЫВ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДействиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого Участник Из ДействиеОбъект.Участники Цикл
				Если Участник.Защищенный Тогда
					Участник.Защищенный = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДействиеОбъект);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось записать действие исполнения по пунктам ""%1""
					|по причине:
					|%2'"),
				Выборка.Ссылка, СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ""%1"" не удалось записать все элементы справочника ""%2""
			|для некоторых объектов (пропущены): %3'"),
			"ПерейтиНаВерсию_3_0_13_14", "ДействияИсполнения", ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Перезаполняет предопределенные автоподстановки с целью корректировки автоподстановки "Все согласовавшие документ"
//
Процедура ПерейтиНаВерсию_3_0_13_15() Экспорт
	
	Справочники.АвтоподстановкиДляОбъектов.ЗаполнитьПредопределенные();
	
КонецПроцедуры

// Перезаполняет поставляемые данные (Виджеты)
//
Процедура ПерейтиНаВерсию_3_0_13_16() Экспорт
	
	Справочники.Виджеты.ЗаполнитьПоставляемыеДанные();
	
КонецПроцедуры

// Выполняет перенос данных из устаревших объектов подсистемы отметок времени.
//
Процедура ПерейтиНаВерсию_3_0_13_17() Экспорт
	
	Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.УдалитьОтметкиВремениСсылочныхОбъектов.ВыполнитьПереходНаНовуюВерсию();
	РегистрыСведений.УдалитьОтметкиВремениРегистровКонстант.ВыполнитьПереходНаНовуюВерсию();
	
КонецПроцедуры

// Выполняет перенос данных из устаревших объектов подсистемы отметок времени.
//
Процедура ПерейтиНаВерсию_3_0_13_18(Параметры) Экспорт 
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов =
			РегистрыСведений.УдалитьОтметкиВремениОчередь1.ПереходНаНовуюВерсиюКоличествоОбъектов() +
			РегистрыСведений.УдалитьОтметкиВремениОчередь2.ПереходНаНовуюВерсиюКоличествоОбъектов() +
			РегистрыСведений.УдалитьОтметкиВремениОчередь3.ПереходНаНовуюВерсиюКоличествоОбъектов();
		
	КонецЕсли;

	Результат1 = РегистрыСведений.УдалитьОтметкиВремениОчередь1.ВыполнитьПереходНаНовуюВерсиюОтложенный(10000);
	Результат2 = РегистрыСведений.УдалитьОтметкиВремениОчередь2.ВыполнитьПереходНаНовуюВерсиюОтложенный(10000);
	Результат3 = РегистрыСведений.УдалитьОтметкиВремениОчередь3.ВыполнитьПереходНаНовуюВерсиюОтложенный(10000);
	
	ОбработаноОбъектов =
		Результат1.ОбработаноОбъектов +
		Результат2.ОбработаноОбъектов +
		Результат3.ОбработаноОбъектов;
	
	ПроблемныхОбъектов =
		Результат1.ПроблемныхОбъектов +
		Результат2.ПроблемныхОбъектов +
		Результат3.ПроблемныхОбъектов;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ""%1"" не удалось перенести данные регистров ""%2""
						|Пропущено: %3'"),
			"ПерейтиНаВерсию_3_0_13_18",
			"УдалитьОтметкиВремениОчередь1, УдалитьОтметкиВремениОчередь2, УдалитьОтметкиВремениОчередь3",
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Выполняет перенос данных из устаревших объектов КОД.
//
Процедура ПерейтиНаВерсию_3_0_13_19(Параметры) Экспорт 
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов =
			РегистрыСведений.УдалитьОтметкиРассмотренияСсылочныхДанныхКОД.ПереходНаНовуюВерсиюКоличествоОбъектов() +
			РегистрыСведений.УдалитьОтметкиРассмотренияНаборовЗаписейКОД.ПереходНаНовуюВерсиюКоличествоОбъектов() +
			РегистрыСведений.УдалитьНаличиеДанныхВУзлахКОД.ПереходНаНовуюВерсиюКоличествоОбъектов();
		
	КонецЕсли;

	Результат1 = РегистрыСведений.УдалитьОтметкиРассмотренияСсылочныхДанныхКОД.ВыполнитьПереходНаНовуюВерсиюОтложенный(10000);
	Результат2 = РегистрыСведений.УдалитьОтметкиРассмотренияНаборовЗаписейКОД.ВыполнитьПереходНаНовуюВерсиюОтложенный(10000);
	Результат3 = РегистрыСведений.УдалитьНаличиеДанныхВУзлахКОД.ВыполнитьПереходНаНовуюВерсиюОтложенный(10000);
	
	ОбработаноОбъектов =
		Результат1.ОбработаноОбъектов +
		Результат2.ОбработаноОбъектов +
		Результат3.ОбработаноОбъектов;
	
	ПроблемныхОбъектов =
		Результат1.ПроблемныхОбъектов +
		Результат2.ПроблемныхОбъектов +
		Результат3.ПроблемныхОбъектов;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ""%1"" не удалось перенести данные регистров ""%2""
						|Пропущено: %3'"),
			"ПерейтиНаВерсию_3_0_13_19",
			"УдалитьОтметкиРассмотренияСсылочныхДанныхКОД, УдалитьОтметкиРассмотренияНаборовЗаписейКОД, УдалитьНаличиеДанныхВУзлахКОД",
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Очищает данные устаревших объектов отметок времени.
//
Процедура ПерейтиНаВерсию_3_0_13_20(Параметры) Экспорт 
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = 
			РегистрыСведений.УдалитьОтметкиВремениРегистровКонстант.ПереходНаНовуюВерсиюКоличествоОбъектов() +
			РегистрыСведений.УдалитьОтметкиВремениРегистровНезависимых.ПереходНаНовуюВерсиюКоличествоОбъектов() +
			РегистрыСведений.УдалитьОтметкиВремениРегистровПодчиненных.ПереходНаНовуюВерсиюКоличествоОбъектов() +
			РегистрыСведений.УдалитьОтметкиВремениСсылочныхОбъектов.ПереходНаНовуюВерсиюКоличествоОбъектов();
		
	КонецЕсли;
	
	Результат1 = РегистрыСведений.УдалитьОтметкиВремениРегистровКонстант.УдалитьДанныеПорционно(10000);
	Результат2 = РегистрыСведений.УдалитьОтметкиВремениРегистровНезависимых.УдалитьДанныеПорционно(10000);
	Результат3 = РегистрыСведений.УдалитьОтметкиВремениРегистровПодчиненных.УдалитьДанныеПорционно(10000);
	Результат4 = РегистрыСведений.УдалитьОтметкиВремениСсылочныхОбъектов.УдалитьДанныеПорционно(10000);
	
	ОбработаноОбъектов =
		Результат1.ОбработаноОбъектов +
		Результат2.ОбработаноОбъектов +
		Результат3.ОбработаноОбъектов +
		Результат4.ОбработаноОбъектов;
	
	ПроблемныхОбъектов =
		Результат1.ПроблемныхОбъектов +
		Результат2.ПроблемныхОбъектов +
		Результат3.ПроблемныхОбъектов +
		Результат4.ПроблемныхОбъектов;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ""%1"" не удалось удалить данные регистров ""%2""
						|Пропущено: %3'"),
			"ПерейтиНаВерсию_3_0_13_20",
			"УдалитьОтметкиВремениРегистровКонстант, УдалитьОтметкиВремениРегистровНезависимых, УдалитьОтметкиВремениРегистровПодчиненных, УдалитьОтметкиВремениСсылочныхОбъектов",
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Устанавливает имя пользователя для регламентного задания УведомлениеПользователейОСобытиях.
//
Процедура ПерейтиНаВерсию_3_0_14_1() Экспорт
	
	// С СВ нельзя работать без пользователя, установим пользователя регзаданиям
	ИмяТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если Не ЗначениеЗаполнено(ИмяТекущегоПользователя) Тогда
		ИмяТекущегоПользователя = "Администратор";
	КонецЕсли;
	
	РеглЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.УведомлениеПользователейОСобытиях);
	Если Не ЗначениеЗаполнено(РеглЗадание.ИмяПользователя) Тогда
		РеглЗадание.ИмяПользователя = ИмяТекущегоПользователя;
		РеглЗадание.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_14_2() Экспорт
	
	Константы.ЧислоПотоковЗагрузкиИз21.Установить(5);
	
КонецПроцедуры

// Заполняет поле ЕстьДокументы в РС КешИнформацииОбОбъектах
//
Процедура ПерейтиНаВерсию_3_0_14_3(Параметры) Экспорт 
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
		И ПолучитьФункциональнуюОпцию("ИспользоватьКОД")
		И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
		Параметры.ОбработкаЗавершена = Истина;	
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СвязиОбъектов.СвязанныйОбъект) КАК КоличествоПисем
			|ИЗ
			|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
			|		ПО СвязиОбъектов.СвязанныйОбъект = КешИнформацииОбОбъектах.Объект
			|ГДЕ
			|	(СвязиОбъектов.СвязанныйОбъект ССЫЛКА Документ.ВходящееПисьмо
			|	ИЛИ СвязиОбъектов.СвязанныйОбъект ССЫЛКА Документ.ИсходящееПисьмо)
			|	И СвязиОбъектов.Объект ССЫЛКА Справочник.ДокументыПредприятия
			|	И СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.НаОснованииПисьма)
			|	И (КешИнформацииОбОбъектах.ЕстьДокументы ЕСТЬ NULL
			|	ИЛИ КешИнформацииОбОбъектах.ЕстьДокументы = ЛОЖЬ)");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КоличествоПисем;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СвязиОбъектов.СвязанныйОбъект КАК СвязанныйОбъект
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО СвязиОбъектов.СвязанныйОбъект = КешИнформацииОбОбъектах.Объект
		|ГДЕ
		|	(СвязиОбъектов.СвязанныйОбъект ССЫЛКА Документ.ВходящееПисьмо
		|	ИЛИ СвязиОбъектов.СвязанныйОбъект ССЫЛКА Документ.ИсходящееПисьмо)
		|	И СвязиОбъектов.Объект ССЫЛКА Справочник.ДокументыПредприятия
		|	И СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.НаОснованииПисьма)
		|	И (КешИнформацииОбОбъектах.ЕстьДокументы ЕСТЬ NULL
		|	ИЛИ КешИнформацииОбОбъектах.ЕстьДокументы = ЛОЖЬ)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(Выборка.СвязанныйОбъект);
			
			Набор.Прочитать();
			
			Если Набор.Количество() = 0 Тогда
				Запись = Набор.Добавить();
			Иначе
				Запись = Набор[0];
			КонецЕсли;
		
			Запись.Объект = Выборка.СвязанныйОбъект;  
			Запись.ЕстьДокументы = Истина;
					
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось записать КешИнформацииОбОбъектах для письма ""%1""
					|по причине:
					|%2'"),
				Выборка.СвязанныйОбъект, СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.СвязанныйОбъект.Метаданные(),
				Выборка.СвязанныйОбъект,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ""%1"" не удалось записать КешИнформацииОбОбъектах для всех писем
			|для некоторых объектов (пропущены): %2'"),
			"ПерейтиНаВерсию_3_0_14_3", ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_14_4() Экспорт
	
	// ИменаОстановленныхРегламентныхЗаданий
	Событие = НСтр("ru = 'Приостановка заданий'");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ключ КАК Ключ
	|ИЗ
	|	РегистрСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания КАК Т
	|ГДЕ
	|	Т.Событие = &Событие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Период УБЫВ");
	
	Запрос.УстановитьПараметр("Событие", Событие);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Константы.МиграцияДанныхИзВнешнихСистемИменаОстановленныхРегламентныхЗаданий.Установить(Выборка.Ключ);
	КонецЕсли;	
	
	// число загруженных
	
	//Прогресс.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Т.Количество), 0) КАК Количество
	|ИЗ
	|	РегистрСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания КАК Т
	|ГДЕ
	|	Т.Событие = &СобытиеЗагрузка
	|	И Т.Принято = ИСТИНА");
	Запрос.УстановитьПараметр("СобытиеЗагрузка", МиграцияДанныхИзВнешнихСистемСервер.СобытиеЗагрузка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Количество = Выборка.Количество;
		
		Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемКоличествоЗагруженных.СоздатьНаборЗаписей();
		
		Запись = Набор.Добавить();
		Запись.День = ТекущаяДатаСеанса();
		Запись.Дата = ТекущаяДатаСеанса();
		Запись.Идентификатор = Новый УникальныйИдентификатор();
		Запись.Загружено = Количество;
		Запись.Источник = НСтр("ru = 'Перенесено из прошлой версии'");
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);  
		
	КонецЕсли;	
	
КонецПроцедуры

// Переносит ошибки миграции с 2.1
//
Процедура ПерейтиНаВерсию_3_0_14_4_ОшибкиМиграции(Параметры) Экспорт 
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК КоличествоОшибок
			|ИЗ
			|	РегистрСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания КАК Т
			|ГДЕ
			|	Т.Ошибка = ИСТИНА");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КоличествоОшибок;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Т.Описание КАК Описание,
		|	Т.Период КАК Дата,
		|	Т.Источник КАК Источник,
		|	Т.НомерСообщения КАК НомерСообщения,
		|	Т.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания КАК Т
		|ГДЕ
		|	Т.Ошибка = ИСТИНА");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемОшибки.СоздатьНаборЗаписей();
			
			Хеш = МиграцияДанныхИзВнешнихСистемСервер.ХешСтроки(Выборка.Описание);
			
			Набор.Отбор.Хеш.Установить(Хеш);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			Запись.Хеш = Хеш;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);  
			
			// удалим запись в РС МиграцияДанныхИзВнешнихСистемФоновыеЗадания с ошибкой - чтобы не грузить ее в следующий раз

			Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания.СоздатьНаборЗаписей();
			Набор.Отбор.Идентификатор.Установить(Выборка.Идентификатор);  
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);  
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			СтекОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось записать МиграцияДанныхИзВнешнихСистемОшибки
					|по причине:
					|%1'"),
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ""%1"" не удалось записать МиграцияДанныхИзВнешнихСистемОшибки для всех  ""%2""
			|для некоторых объектов (пропущены): %3'"),
			"ПерейтиНаВерсию_3_0_14_4_ОшибкиМиграции", "МиграцияДанныхИзВнешнихСистемОшибки", ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// РС ОтметкиВремениРегистровКонстант: удалим записи для ДескрипторыДляОбъектов
//
Процедура ПерейтиНаВерсию_3_0_14_4_УдалитьДескрипторы(Параметры) Экспорт 
	
	ИОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.РегистрыСведений.ДескрипторыДляОбъектов);
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК КоличествоЗаписей
			|ИЗ
			|	РегистрСведений.ОтметкиВремениРегистровКонстант КАК Т
			|ГДЕ
			|	Т.Объект = &ИОМ");
		Запрос.УстановитьПараметр("ИОМ", ИОМ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КоличествоЗаписей;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
		|	Т.ТипКлюча КАК ТипКлюча,
		|	Т.Объект КАК Объект,
		|	Т.Граница КАК Граница
		|ИЗ
		|	РегистрСведений.ОтметкиВремениРегистровКонстант КАК Т
		|ГДЕ
		|	Т.Объект = &ИОМ");       
	
	Запрос.УстановитьПараметр("ИОМ", ИОМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// удалим запись в РС ОтметкиВремениРегистровКонстант - чтобы не грузить ее в следующий раз

			Набор = РегистрыСведений.ОтметкиВремениРегистровКонстант.СоздатьНаборЗаписей();
			
			Набор.Отбор.ИдентификаторКлюча.Установить(Выборка.ИдентификаторКлюча);  
			Набор.Отбор.ТипКлюча.Установить(Выборка.ТипКлюча);  
			Набор.Отбор.Объект.Установить(Выборка.Объект);  
			Набор.Отбор.Граница.Установить(Выборка.Граница);  
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);  
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			СтекОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось записать ОтметкиВремениРегистровКонстант
					|по причине:
					|%1'"),
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ""%1"" не удалось записать ОтметкиВремениРегистровКонстант для всех  ""%2""
			|для некоторых объектов (пропущены): %3'"),
			"ПерейтиНаВерсию_3_0_14_4_УдалитьДескрипторы", "ОтметкиВремениРегистровКонстант", ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_14_5() Экспорт
	
	УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия(
		"УстановкаРезультатовДействиямОбработки", 
		"eeb325ab-db51-11de-a544-00179ab398dc");

КонецПроцедуры

// Переименовывает поставляемого пользователя Администратор.
//
Процедура ПерейтиНаВерсию_3_0_14_6() Экспорт
	
	Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	КОДСлужебный.ПереименоватьПоставляемогоАдминистратора();
	
КонецПроцедуры

// Заполняет ДобавлятьПриглашенияВКалендарь в спр УчетныеЗаписиЭлектроннойПочты
//
Процедура ПерейтиНаВерсию_3_0_14_7() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст
	 = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.ДобавлятьПриглашенияВКалендарь = ЛОЖЬ
		|	И УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)";
	 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();  
		
		Для Каждого СтрТаблЧасти Из СпрОбъект.ОтветственныеЗаОбработкуПисем Цикл
			СтрТаблЧасти.ДобавлятьПриглашенияВКалендарь = Истина;
		КонецЦикла;	
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
		 
	КонецЦикла;	 
	
КонецПроцедуры

// Перейти на версию 3 0 14 8.
Процедура ПерейтиНаВерсию_3_0_14_8() Экспорт

	НачатьТранзакцию();

	Попытка
	
		// Заполнение состава метаданных в областях замещения
		ОписаниеОбластейЗамещения = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейЗамещения();
		Для Каждого Описание Из ОписаниеОбластейЗамещения Цикл

			Если Описание.ИмяПредопределенного = "ПротоколРаботыСотрудников" Тогда

				СсылкаНового = Справочники.ОбластиЗамещения.ПолучитьСсылку(
						Новый УникальныйИдентификатор(Описание.Идентификатор));

				Если Не ОбщегоНазначения.СсылкаСуществует(СсылкаНового) Тогда
					ОбластьЗамещенияОбъект = Справочники.ОбластиЗамещения.СоздатьЭлемент();
					ОбластьЗамещенияОбъект.УстановитьСсылкуНового(СсылкаНового);
					ОбластьЗамещенияОбъект.Наименование = Описание.Наименование;
					ОбластьЗамещенияОбъект.ИмяПредопределенныхДанных = Описание.ИмяПредопределенного;
					ОбластьЗамещенияОбъект.Родитель = Описание.Родитель;
				Иначе
					ОбластьЗамещенияОбъект = СсылкаНового.ПолучитьОбъект();
				КонецЕсли;
			Иначе
				ОбластьЗамещенияОбъект = Справочники.ОбластиЗамещения[Описание.ИмяПредопределенного].ПолучитьОбъект();
			КонецЕсли;

			Если ОбластьЗамещенияОбъект.Состав.Количество() = 0 Тогда

				Для Каждого Метаданное Из Описание.Состав Цикл
					ОбластьЗамещенияОбъект.Состав.Добавить().ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
						Метаданное);
				КонецЦикла;

				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбластьЗамещенияОбъект);

			КонецЕсли;

		КонецЦикла;

		Запрос = Новый Запрос("ВЫБРАТЬ
							  |	ИсполнителиРолейИДелегаты.ИсполнительДелегат,
							  |	ИсполнителиРолейИДелегаты.РольСотрудник,
							  |	ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования,
							  |	ИсполнителиРолейИДелегаты.НастройкаДелегирования,
							  |	ИсполнителиРолейИДелегаты.НастройкаДелегирования.Основание КАК НастройкаДелегированияОснование
							  |ИЗ
							  |	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
							  |ГДЕ
							  |	ИсполнителиРолейИДелегаты.НастройкаДелегирования ССЫЛКА Справочник.УдалитьДелегированиеПрав
							  |	И ИсполнителиРолейИДелегаты.НастройкаДелегирования <> ЗНАЧЕНИЕ(Справочник.УдалитьДелегированиеПрав.ПустаяСсылка)");
		ИсполнителиРолейИДелегаты = Запрос.Выполнить().Выгрузить();
		Для Каждого Строка Из ИсполнителиРолейИДелегаты Цикл
			Набор = РегистрыСведений.ИсполнителиРолейИДелегаты.СоздатьНаборЗаписей();
			Набор.Отбор.ИсполнительДелегат.Установить(Строка.ИсполнительДелегат);
			Набор.Отбор.РольСотрудник.Установить(Строка.РольСотрудник);
			Набор.Отбор.ИмяОбластиДелегирования.Установить(Строка.ИмяОбластиДелегирования);
			Набор.Отбор.НастройкаДелегирования.Установить(Строка.НастройкаДелегирования);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			Набор = РегистрыСведений.ИсполнителиРолейИДелегаты.СоздатьНаборЗаписей();
			Набор.Отбор.ИсполнительДелегат.Установить(Строка.ИсполнительДелегат);
			Набор.Отбор.РольСотрудник.Установить(Строка.РольСотрудник);
			Если Строка.ИмяОбластиДелегирования = "ПроцессыИЗадачи" Тогда
				Набор.Отбор.ИмяОбластиДелегирования.Установить("Задачи");
			Иначе
				Набор.Отбор.ИмяОбластиДелегирования.Установить(Строка.ИмяОбластиДелегирования);
			КонецЕсли;
			Набор.Отбор.НастройкаДелегирования.Установить(Строка.НастройкаДелегированияОснование);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка, , "НастройкаДелегирования");
			Запись.НастройкаДелегирования = Строка.НастройкаДелегированияОснование;
			Если Строка.ИмяОбластиДелегирования = "ПроцессыИЗадачи" Тогда
				Запись.ИмяОбластиДелегирования = "Задачи";
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
		КонецЦикла;

		Запрос = Новый Запрос("ВЫБРАТЬ
							  |	ПраваПоДескрипторамДоступаОбъектов.Дескриптор,
							  |	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
							  |	ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование,
							  |	ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование.Основание КАК ОбъектОснованиеОснование
							  |ИЗ
							  |	РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
							  |ГДЕ
							  |	ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование ССЫЛКА Справочник.УдалитьДелегированиеПрав
							  |	И ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование <> ЗНАЧЕНИЕ(Справочник.УдалитьДелегированиеПрав.ПустаяСсылка)");
		ПраваПоДескрипторамДоступаОбъектов = Запрос.Выполнить().Выгрузить();
		Для Каждого Строка Из ПраваПоДескрипторамДоступаОбъектов Цикл

			СтарыйНабор = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьНаборЗаписей();
			СтарыйНабор.Отбор.Дескриптор.Установить(Строка.Дескриптор);
			СтарыйНабор.Отбор.Сотрудник.Установить(Строка.Сотрудник);
			СтарыйНабор.Отбор.ОбъектОснование.Установить(Строка.ОбъектОснование);
			СтарыйНабор.Прочитать();

			НовыйНабор = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьНаборЗаписей();
			НовыйНабор.Отбор.Дескриптор.Установить(Строка.Дескриптор);
			НовыйНабор.Отбор.Сотрудник.Установить(Строка.Сотрудник);
			НовыйНабор.Отбор.ОбъектОснование.Установить(Строка.ОбъектОснованиеОснование);

			Для Каждого СтараяЗапись Из СтарыйНабор Цикл
				НоваяЗапись = НовыйНабор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись, , "ОбъектОснование");
				НоваяЗапись.ОбъектОснование = Строка.ОбъектОснованиеОснование;
			КонецЦикла;

			СтарыйНабор.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтарыйНабор);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНабор);

		КонецЦикла;

		Запрос = Новый Запрос("ВЫБРАТЬ
							  |	ПраваПоДескрипторамДоступаРегистров.Дескриптор,
							  |	ПраваПоДескрипторамДоступаРегистров.Сотрудник,
							  |	ПраваПоДескрипторамДоступаРегистров.ОбъектОснование,
							  |	ПраваПоДескрипторамДоступаРегистров.ОбъектОснование.Основание КАК ОбъектОснованиеОснование
							  |ИЗ
							  |	РегистрСведений.ПраваПоДескрипторамДоступаРегистров КАК ПраваПоДескрипторамДоступаРегистров
							  |ГДЕ
							  |	ПраваПоДескрипторамДоступаРегистров.ОбъектОснование ССЫЛКА Справочник.УдалитьДелегированиеПрав
							  |	И ПраваПоДескрипторамДоступаРегистров.ОбъектОснование <> ЗНАЧЕНИЕ(Справочник.УдалитьДелегированиеПрав.ПустаяСсылка)");
		ПраваПоДескрипторамДоступаРегистров = Запрос.Выполнить().Выгрузить();
		Для Каждого Строка Из ПраваПоДескрипторамДоступаРегистров Цикл

			СтарыйНабор = РегистрыСведений.ПраваПоДескрипторамДоступаРегистров.СоздатьНаборЗаписей();
			СтарыйНабор.Отбор.Дескриптор.Установить(Строка.Дескриптор);
			СтарыйНабор.Отбор.Сотрудник.Установить(Строка.Сотрудник);
			СтарыйНабор.Отбор.ОбъектОснование.Установить(Строка.ОбъектОснование);
			СтарыйНабор.Прочитать();

			НовыйНабор = РегистрыСведений.ПраваПоДескрипторамДоступаРегистров.СоздатьНаборЗаписей();
			НовыйНабор.Отбор.Дескриптор.Установить(Строка.Дескриптор);
			НовыйНабор.Отбор.Сотрудник.Установить(Строка.Сотрудник);
			НовыйНабор.Отбор.ОбъектОснование.Установить(Строка.ОбъектОснованиеОснование);

			Для Каждого СтараяЗапись Из СтарыйНабор Цикл
				НоваяЗапись = НовыйНабор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись, , "ОбъектОснование");
				НоваяЗапись.ОбъектОснование = Строка.ОбъектОснованиеОснование;
			КонецЦикла;

			СтарыйНабор.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтарыйНабор);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНабор);
		КонецЦикла;

		ОбластиЗамещения = ЗамещающиеИПомощники.ОбластиЗамещенияПоОбластямДелегирования();
		Запрос = Новый Запрос("ВЫБРАТЬ
							  |	СоставСубъектовПравДоступа.Сотрудник,
							  |	СоставСубъектовПравДоступа.Субъект,
							  |	СоставСубъектовПравДоступа.ИмяОбластиДелегирования,
							  |	СоставСубъектовПравДоступа.ОбъектМетаданных,
							  |	СоставСубъектовПравДоступа.СотрудникОснование,
							  |	СоставСубъектовПравДоступа.ОбластьДелегирования,
							  |	СоставСубъектовПравДоступа.ОбъектОснование,
							  |	СоставСубъектовПравДоступа.ОбъектОснование.Основание КАК ОбъектОснованиеОснование
							  |ИЗ
							  |	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
							  |ГДЕ
							  |	СоставСубъектовПравДоступа.ОбъектОснование ССЫЛКА Справочник.УдалитьДелегированиеПрав
							  |	И СоставСубъектовПравДоступа.ОбъектОснование <> ЗНАЧЕНИЕ(Справочник.УдалитьДелегированиеПрав.ПустаяСсылка)");
		СоставСубъектовПравДоступа = Запрос.Выполнить().Выгрузить();
		Для Каждого Строка Из СоставСубъектовПравДоступа Цикл

			Набор = РегистрыСведений.СоставСубъектовПравДоступа.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Строка.Сотрудник);
			Набор.Отбор.Субъект.Установить(Строка.Субъект);
			Набор.Отбор.ИмяОбластиДелегирования.Установить(Строка.ИмяОбластиДелегирования);
			Набор.Отбор.ОбъектМетаданных.Установить(Строка.ОбъектМетаданных);
			Набор.Отбор.СотрудникОснование.Установить(Строка.СотрудникОснование);
			Набор.Отбор.ОбластьДелегирования.Установить(Строка.ОбластьДелегирования);
			Набор.Отбор.ОбъектОснование.Установить(Строка.ОбъектОснование);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			Набор = РегистрыСведений.СоставСубъектовПравДоступа.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Строка.Сотрудник);
			Набор.Отбор.Субъект.Установить(Строка.Субъект);
			Если Строка.ИмяОбластиДелегирования = "ПроцессыИЗадачи" Тогда
				Набор.Отбор.ИмяОбластиДелегирования.Установить("Задачи");
			Иначе
				Набор.Отбор.ИмяОбластиДелегирования.Установить(Строка.ИмяОбластиДелегирования);
			КонецЕсли;
			Набор.Отбор.ОбъектМетаданных.Установить(Строка.ОбъектМетаданных);
			Набор.Отбор.СотрудникОснование.Установить(Строка.СотрудникОснование);
			Набор.Отбор.ОбластьДелегирования.Установить(ОбластиЗамещения[Строка.ОбластьДелегирования]);
			Набор.Отбор.ОбъектОснование.Установить(Строка.ОбъектОснованиеОснование);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка, , "ОбъектОснование, ОбластьДелегирования");
			Запись.ОбъектОснование = Строка.ОбъектОснованиеОснование;
			Если Строка.ИмяОбластиДелегирования = "ПроцессыИЗадачи" Тогда
				Запись.ИмяОбластиДелегирования = "Задачи";
			КонецЕсли;
			Запись.ОбластьДелегирования = ОбластиЗамещения[Строка.ОбластьДелегирования];
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
		КонецЦикла;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

// Обновляется автоподстановки протокола мероприятий.
//
Процедура ПерейтиНаВерсию_3_0_14_11() Экспорт
	
	// Обновляем только в ЦУ, в подчиненные узлые приедет с обменом.
	Если Не КОДСервер.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.АвтоподстановкиДляОбъектов.ЗаполнитьПредопределенные();
	
КонецПроцедуры

// Заполняет реквизит НомерПунктаПротокола в справочнике ПротоколыМероприятий.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_14_12(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ПротоколыМероприятий.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
			|ГДЕ
			|	ПротоколыМероприятий.НомерПунктаПротокола = """"");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПротоколыМероприятий.Ссылка КАК ПунктПротокола
		|ИЗ
		|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|ГДЕ
		|	ПротоколыМероприятий.НомерПунктаПротокола = """"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Справочники.ПротоколыМероприятий.ЗаполнитьНомерПунктаПротокола(Выборка.ПунктПротокола);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить номер пункта протокола %1 по причине:
					|%2'"),
				Выборка.ПунктПротокола,
				ПодробноеПредставлениеОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Документ.Метаданные(),
				Выборка.Документ,
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;  
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_14_12 не удалось обновить некоторые пункты протокола (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// 1. Переназначает результаты-цвета кнопок "Завершить" и "Повторить", пересмотрели концепцию, должно быть меньше
// путаницы.
// 2. Перезаписывает некоторые элементы справочника НаборыСостоянийЗадач для замены порядка действий "Повторить" и
// "Завершить".
Процедура ПерейтиНаВерсию_3_0_14_14() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() И КОДСервер.ЭтоПодчиненныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	// 1.
	ПоложительныйХарактер = Перечисления.ХарактерыРезультатов.Положительный;
	РезультатОбъект = Справочники.РезультатыДействийЗадач.ОтправленоПовторно.ПолучитьОбъект();
	Если РезультатОбъект.ХарактерРезультата <> ПоложительныйХарактер Тогда
		РезультатОбъект.ХарактерРезультата = ПоложительныйХарактер;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РезультатОбъект);
	КонецЕсли;
	РезультатОбъект = Справочники.РезультатыДействийЗадач.Завершил.ПолучитьОбъект();
	Если РезультатОбъект.ХарактерРезультата <> ПоложительныйХарактер Тогда
		РезультатОбъект.ХарактерРезультата = ПоложительныйХарактер;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РезультатОбъект);
	КонецЕсли;
	
	// 2.
	Справочники.НаборыСостоянийЗадач.ЗаполнитьПоставляемыеДанные();
	
КонецПроцедуры

// Добавляет полномочие для работы с сервисом Таймлист, а также устанавливает константы работы с сервисом.
//
Процедура ПерейтиНаВерсию_3_0_14_15() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() И КОДСервер.ЭтоПодчиненныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	// Полномочие "Пользователи сервиса Таймлист"
	ИдентификаторСтрока = "f4445076-62d5-43e6-9c9a-f5774bfa8940";
	ИдентификаторПрофиля = Новый УникальныйИдентификатор("f4445076-62d5-43e6-9c9a-f5774bfa8940");
	
	Полномочие = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(ИдентификаторСтрока); 
	Если Полномочие = Неопределено Тогда
		Полномочие = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		Полномочие.ИдентификаторПоставляемыхДанных = ИдентификаторПрофиля;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Полномочие);
	КонецЕсли;
	Справочники.ПрофилиГруппДоступа.ЗаполнитьПоставляемыйПрофиль(Полномочие.Ссылка, Ложь);
	
	Константы.ТаймлистАдресСервиса.Установить("restapi.timelist.ru");
	РасширенияФайловТаймлистПоУмолчанию = ТаймлистКлиентСервер.РасширенияФайловТаймлистПоУмолчанию();
	Константы.ТаймлистСписокРасширенийФайлов.Установить(РасширенияФайловТаймлистПоУмолчанию);
	
КонецПроцедуры

// Обновляет представление в группировках задач, при изменении представления источника группировки.
//
Процедура ПерейтиНаВерсию_3_0_14_16() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГруппировкиЗадач.Ссылка
		|ИЗ
		|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ГруппировкаЗадачОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		НаименованиеОбновлено = ГруппировкаЗадачОбъект.ОбновитьНаименование();
		
		Если Не НаименованиеОбновлено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГруппировкаЗадачОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет отбор по состоянию в группировки "Задачи от меня".
//
Процедура ПерейтиНаВерсию_3_0_14_17() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГруппировкиЗадач.Ссылка
		|ИЗ
		|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
		|ГДЕ
		|	ГруппировкиЗадач.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ГруппировкиЗадач.ЗадачиОтМеня))
		|	И ГруппировкиЗадач.Состояние <> ЗНАЧЕНИЕ(Перечисление.ОтборыПоСтатусуЗадач.НеВыполненные)");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ГруппировкаЗадачОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ГруппировкаЗадачОбъект.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГруппировкаЗадачОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет регистр Электронных подписей под хранение данных в БСП.
//
Процедура ПерейтиНаВерсию_3_0_14_21() Экспорт
	
	РаботаСЭП.ОбновитьРегистрЭлектронныхПодписей_3_0_14();
	
КонецПроцедуры

// Обновляется поставляемые данные рабочего стола.
//
Процедура ПерейтиНаВерсию_3_0_14_24() Экспорт
	
	// Обновляем только в ЦУ, в подчиненные узлые приедет с обменом.
	Если Не КОДСервер.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСРабочимСтолом.ЗаполнитьПоставляемыеДанные();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_14_26() Экспорт

	ЗаполнитьНастройкиВариантовОтчетовДокументооборот();
	
КонецПроцедуры

// Обновляет права на действия задач, которые должны были обновиться при перенаправлении
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
Процедура ПерейтиНаВерсию_3_0_14_28(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВсеИсполнителиДействийЗадач.ДействиеЗадачи.Задача) КАК ВсегоОбъектов
			|ИЗ
			|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|		ПО (ВсеИсполнителиДействийЗадач.ДействиеЗадачи.Задача = ДескрипторыДляОбъектов.Объект
			|		И ДескрипторыДляОбъектов.Дескриптор.КонтейнерСотрудников = ВсеИсполнителиДействийЗадач.Исполнитель)
			|ГДЕ
			|	ДескрипторыДляОбъектов.Дескриптор ЕСТЬ NULL");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000 РАЗЛИЧНЫЕ
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи.Задача КАК Задача
		|ИЗ
		|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|		ПО (ВсеИсполнителиДействийЗадач.ДействиеЗадачи.Задача = ДескрипторыДляОбъектов.Объект
		|		И ДескрипторыДляОбъектов.Дескриптор.КонтейнерСотрудников = ВсеИсполнителиДействийЗадач.Исполнитель)
		|ГДЕ
		|	ДескрипторыДляОбъектов.Дескриптор ЕСТЬ NULL");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(Выборка.Задача);
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось определить дескрипторы задачи %1 по причине:
					|%2'"),
				Выборка.Задача,
				ПодробноеПредставлениеОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Задача.Метаданные(),
				Выборка.Задача,
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;  
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_14_28 не удалось обработать некоторые задачи (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Удаляет фиктивные задачи ознакомления в "Задачи от меня".
//
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
Процедура ПерейтиНаВерсию_3_0_14_29(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДокументЗадача.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Документ.Задача КАК ДокументЗадача
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействиеЗадачи КАК ДействиеЗадачиЗадача
			|		ПО (ДействиеЗадачиЗадача.Задача = ДокументЗадача.Ссылка)
			|ГДЕ
			|	ДокументЗадача.Источник ССЫЛКА Справочник.ДействияОзнакомления
			|	И ДокументЗадача.ПометкаУдаления = ЛОЖЬ
			|	И ДействиеЗадачиЗадача.Ссылка ЕСТЬ NULL");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	ДокументЗадача.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Задача КАК ДокументЗадача
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействиеЗадачи КАК ДействиеЗадачиЗадача
		|		ПО (ДействиеЗадачиЗадача.Задача = ДокументЗадача.Ссылка)
		|ГДЕ
		|	ДокументЗадача.Источник ССЫЛКА Справочник.ДействияОзнакомления
		|	И ДокументЗадача.ПометкаУдаления = ЛОЖЬ
		|	И ДействиеЗадачиЗадача.Ссылка ЕСТЬ NULL");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.УстановитьПометкуУдаления(Истина);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось установить пометку удаления задачи %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;  
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_14_29 не удалось обработать некоторые задачи (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_14_30() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
			
		Возврат;
	КонецЕсли;
	
	// В профиль "Пользователи"
	УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия(
		"ДобавлениеИзменениеЭлектронныхПодписей", 
		"c999acb1-d5f5-11de-a544-00179ab398dc");
	
КонецПроцедуры

// Отмечает выполнение старых задач ознакомления
//
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
Процедура ПерейтиНаВерсию_3_0_14_31(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ЗадачаИсполнителя.ИдентификаторИсполнителя) КАК ВсегоОбъектов
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
			|		ПО ЗадачаИсполнителя.БизнесПроцесс = ПроцессыДействий.Процесс
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
			|		ПО ЗадачаИсполнителя.ИдентификаторИсполнителя = УчастникиОзнакомлений.ИдентификаторУчастника
			|			И (УчастникиОзнакомлений.Действие = ПроцессыДействий.Действие)
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.Ознакомление
			|	И НЕ ПроцессыДействий.Процесс ЕСТЬ NULL
			|	И ЗадачаИсполнителя.Выполнена = ИСТИНА
			|	И УчастникиОзнакомлений.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОзнакомления.Ознакомился)");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	ЗадачаИсполнителя.ИдентификаторИсполнителя КАК ИдентификаторИсполнителя,
		|	ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
		|	ЗадачаИсполнителя.Дата КАК Дата,
		|	ПроцессыДействий.Действие КАК Действие,
		|	ЗадачаИсполнителя.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|		ПО ЗадачаИсполнителя.БизнесПроцесс = ПроцессыДействий.Процесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|		ПО ЗадачаИсполнителя.ИдентификаторИсполнителя = УчастникиОзнакомлений.ИдентификаторУчастника
		|			И (УчастникиОзнакомлений.Действие = ПроцессыДействий.Действие)
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.Ознакомление
		|	И НЕ ПроцессыДействий.Процесс ЕСТЬ NULL
		|	И ЗадачаИсполнителя.Выполнена = ИСТИНА
		|	И УчастникиОзнакомлений.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОзнакомления.Ознакомился)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Участник = Выборка.Исполнитель;
			Если ЗначениеЗаполнено(Выборка.РольИсполнителя) Тогда
				Участник = Выборка.РольИсполнителя;                  
			КонецЕсли;
			
			РегистрыСведений.СостоянияДействий.УдалитьСостояние(
				Выборка.Действие, 
				Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый,
				Участник,
				,
				Выборка.ИдентификаторИсполнителя);

			РегистрыСведений.УчастникиОзнакомлений.Ознакомиться(Выборка.Действие, 
				Выборка.ИдентификаторИсполнителя, Выборка.ФактическийИсполнитель, Выборка.РезультатВыполнения);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось установить результат задачи %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;  
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_14_31 не удалось обработать некоторые задачи (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Исправлена в ошибка в одном из макетов - образцов отчета
Процедура ПерейтиНаВерсию_3_0_15_1() Экспорт
	
	ЗаполнитьНастройкиВариантовОтчетовДокументооборот();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_15_2() Экспорт
	
	ОбменЭДОДокументооборот.ИсключитьФайлыИзОбъектовУчетаЭДО();
	
КонецПроцедуры

// Заполняет пометки удаления субъектов и сотрудников в ССПД
Процедура ПерейтиНаВерсию_3_0_15_3(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(1) КАК ВсегоОбъектов
			|ИЗ
			|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
			|ГДЕ
			|	СоставСубъектовПравДоступа.Сотрудник.ПометкаУдаления <> СоставСубъектовПравДоступа.СотрудникПометкаУдаления
			|	ИЛИ СоставСубъектовПравДоступа.Субъект.ПометкаУдаления <> СоставСубъектовПравДоступа.СубъектПометкаУдаления";
				
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СоставСубъектовПравДоступа.Сотрудник,
		|	СоставСубъектовПравДоступа.Субъект,
		|	СоставСубъектовПравДоступа.ИмяОбластиДелегирования,
		|	СоставСубъектовПравДоступа.ОбъектМетаданных,
		|	СоставСубъектовПравДоступа.ОбъектОснование,
		|	СоставСубъектовПравДоступа.СотрудникОснование,
		|	СоставСубъектовПравДоступа.ОбластьДелегирования,
		|	СоставСубъектовПравДоступа.Субъект.ПометкаУдаления КАК СубъектПометкаУдаления,
		|	СоставСубъектовПравДоступа.Сотрудник.ПометкаУдаления КАК СотрудникПометкаУдаления,
		|	СоставСубъектовПравДоступа.УдалитьОтметкиВремениИдентификаторНабораЗаписей,
		|	СоставСубъектовПравДоступа.ИдентификаторОтметкиВремени
		|ИЗ
		|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|ГДЕ
		|	СоставСубъектовПравДоступа.Сотрудник.ПометкаУдаления <> СоставСубъектовПравДоступа.СотрудникПометкаУдаления
		|	ИЛИ СоставСубъектовПравДоступа.Субъект.ПометкаУдаления <> СоставСубъектовПравДоступа.СубъектПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			НаборЗаписей = РегистрыСведений.СоставСубъектовПравДоступа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.Субъект.Установить(Выборка.Субъект);
			НаборЗаписей.Отбор.ИмяОбластиДелегирования.Установить(Выборка.ИмяОбластиДелегирования);
			НаборЗаписей.Отбор.ОбъектМетаданных.Установить(Выборка.ОбъектМетаданных);
			НаборЗаписей.Отбор.ОбъектОснование.Установить(Выборка.ОбъектОснование);
			НаборЗаписей.Отбор.СотрудникОснование.Установить(Выборка.СотрудникОснование);
			НаборЗаписей.Отбор.ОбластьДелегирования.Установить(Выборка.ОбластьДелегирования);
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить пометки удаления в ССПД для субъекта %1 по причине:
					|%2'"),
				Выборка.Субъект,
				ПодробноеПредставлениеОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				НаборЗаписей.Метаданные(),
				Выборка.Субъект,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_15_3 не удалось обработать некоторые записи в ССПД (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Заполняет ИдентификаторПункта в РС СостоянияДействий
//
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
Процедура ПерейтиНаВерсию_3_0_15_4(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДействияИсполненияУчастники.Идентификатор) КАК ВсегоОбъектов
			|ИЗ
			|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияИсполнения.Участники КАК ДействияИсполненияУчастники
			|		ПО СостоянияДействий.Действие = ДействияИсполненияУчастники.Ссылка
			|			И СостоянияДействий.ИдентификаторУчастника = ДействияИсполненияУчастники.Идентификатор
			|ГДЕ
			|	ДействияИсполненияУчастники.ИдентификаторПункта <> &ИдентификаторПунктаПустой
			|	И СостоянияДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДействияСогласованияУчастники.Идентификатор)
			|ИЗ
			|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияСогласования.Участники КАК ДействияСогласованияУчастники
			|		ПО СостоянияДействий.Действие = ДействияСогласованияУчастники.Ссылка
			|			И СостоянияДействий.ИдентификаторУчастника = ДействияСогласованияУчастники.Идентификатор
			|ГДЕ
			|	ДействияСогласованияУчастники.ИдентификаторЭтапа <> &ИдентификаторПунктаПустой
			|	И СостоянияДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДействияПодписанияУчастники.Идентификатор)
			|ИЗ
			|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияПодписания.Участники КАК ДействияПодписанияУчастники
			|		ПО СостоянияДействий.Действие = ДействияПодписанияУчастники.Ссылка
			|			И СостоянияДействий.ИдентификаторУчастника = ДействияПодписанияУчастники.Идентификатор
			|ГДЕ
			|	ДействияПодписанияУчастники.ИдентификаторЭтапа <> &ИдентификаторПунктаПустой
			|	И СостоянияДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой");
		
		Запрос.УстановитьПараметр("ИдентификаторПунктаПустой", ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор());
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ПрогрессВыполнения.ВсегоОбъектов + Выборка.ВсегоОбъектов;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 3000
		|	СостоянияДействий.Действие КАК Действие,
		|	СостоянияДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	СостоянияДействий.Функция КАК Функция,
		|	СостоянияДействий.Участник КАК Участник,
		|	СостоянияДействий.Состояние КАК Состояние,
		|	СостоянияДействий.Дата КАК Дата,
		|	ДействияИсполненияУчастники.ИдентификаторПункта КАК ИдентификаторПункта
		|ИЗ
		|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияИсполнения.Участники КАК ДействияИсполненияУчастники
		|		ПО СостоянияДействий.Действие = ДействияИсполненияУчастники.Ссылка
		|			И СостоянияДействий.ИдентификаторУчастника = ДействияИсполненияУчастники.Идентификатор
		|ГДЕ
		|	ДействияИсполненияУчастники.ИдентификаторПункта <> &ИдентификаторПунктаПустой
		|	И СостоянияДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3000
		|	СостоянияДействий.Действие,
		|	СостоянияДействий.ИдентификаторУчастника,
		|	СостоянияДействий.Функция,
		|	СостоянияДействий.Участник,
		|	СостоянияДействий.Состояние,
		|	СостоянияДействий.Дата,
		|	ДействияСогласованияУчастники.ИдентификаторЭтапа
		|ИЗ
		|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияСогласования.Участники КАК ДействияСогласованияУчастники
		|		ПО СостоянияДействий.Действие = ДействияСогласованияУчастники.Ссылка
		|			И СостоянияДействий.ИдентификаторУчастника = ДействияСогласованияУчастники.Идентификатор
		|ГДЕ
		|	ДействияСогласованияУчастники.ИдентификаторЭтапа <> &ИдентификаторПунктаПустой
		|	И СостоянияДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3000
		|	СостоянияДействий.Действие,
		|	СостоянияДействий.ИдентификаторУчастника,
		|	СостоянияДействий.Функция,
		|	СостоянияДействий.Участник,
		|	СостоянияДействий.Состояние,
		|	СостоянияДействий.Дата,
		|	ДействияПодписанияУчастники.ИдентификаторЭтапа
		|ИЗ
		|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияПодписания.Участники КАК ДействияПодписанияУчастники
		|		ПО СостоянияДействий.Действие = ДействияПодписанияУчастники.Ссылка
		|			И СостоянияДействий.ИдентификаторУчастника = ДействияПодписанияУчастники.Идентификатор
		|ГДЕ
		|	ДействияПодписанияУчастники.ИдентификаторЭтапа <> &ИдентификаторПунктаПустой
		|	И СостоянияДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ");     
	
	Запрос.УстановитьПараметр("ИдентификаторПунктаПустой", ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка     
			
			НаборЗаписей = РегистрыСведений.СостоянияДействий.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Действие.Установить(Выборка.Действие);
			НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(Выборка.ИдентификаторУчастника);
			НаборЗаписей.Отбор.Функция.Установить(Выборка.Функция);
			НаборЗаписей.Отбор.Участник.Установить(Выборка.Участник);
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить РС СостоянияДействий %1 по причине:
					|%2'"),
				Выборка.Действие,
				ПодробноеПредставлениеОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Действие.Метаданные(),
				Выборка.Действие,
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;  
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_15_4 не удалось обработать некоторые записи (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Заполняет ИдентификаторПункта в РС РезультатыДействий
//
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
Процедура ПерейтиНаВерсию_3_0_15_5(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДействияИсполненияУчастники.Идентификатор) КАК ВсегоОбъектов
			|ИЗ
			|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияИсполнения.Участники КАК ДействияИсполненияУчастники
			|		ПО РезультатыДействий.Действие = ДействияИсполненияУчастники.Ссылка
			|			И РезультатыДействий.ИдентификаторУчастника = ДействияИсполненияУчастники.Идентификатор
			|ГДЕ
			|	ДействияИсполненияУчастники.ИдентификаторПункта <> &ИдентификаторПунктаПустой
			|	И РезультатыДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДействияСогласованияУчастники.Идентификатор)
			|ИЗ
			|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияСогласования.Участники КАК ДействияСогласованияУчастники
			|		ПО РезультатыДействий.Действие = ДействияСогласованияУчастники.Ссылка
			|			И РезультатыДействий.ИдентификаторУчастника = ДействияСогласованияУчастники.Идентификатор
			|ГДЕ
			|	ДействияСогласованияУчастники.ИдентификаторЭтапа <> &ИдентификаторПунктаПустой
			|	И РезультатыДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДействияПодписанияУчастники.Идентификатор)
			|ИЗ
			|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияПодписания.Участники КАК ДействияПодписанияУчастники
			|		ПО РезультатыДействий.Действие = ДействияПодписанияУчастники.Ссылка
			|			И РезультатыДействий.ИдентификаторУчастника = ДействияПодписанияУчастники.Идентификатор
			|ГДЕ
			|	ДействияПодписанияУчастники.ИдентификаторЭтапа <> &ИдентификаторПунктаПустой
			|	И РезультатыДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой");
		
		Запрос.УстановитьПараметр("ИдентификаторПунктаПустой", ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор());
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ПрогрессВыполнения.ВсегоОбъектов + Выборка.ВсегоОбъектов;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 3000
		|	РезультатыДействий.Действие КАК Действие,
		|	РезультатыДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	РезультатыДействий.Функция КАК Функция,
		|	РезультатыДействий.Участник КАК Участник,
		|	РезультатыДействий.ЕстьФайлыОтчета КАК ЕстьФайлыОтчета,
		|	РезультатыДействий.Результат КАК Результат,
		|	РезультатыДействий.РезультатТекстом КАК РезультатТекстом,
		|	РезультатыДействий.Дата КАК Дата,
		|	ДействияИсполненияУчастники.ИдентификаторПункта КАК ИдентификаторПункта
		|ИЗ
		|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияИсполнения.Участники КАК ДействияИсполненияУчастники
		|		ПО РезультатыДействий.Действие = ДействияИсполненияУчастники.Ссылка
		|			И РезультатыДействий.ИдентификаторУчастника = ДействияИсполненияУчастники.Идентификатор
		|ГДЕ
		|	ДействияИсполненияУчастники.ИдентификаторПункта <> &ИдентификаторПунктаПустой
		|	И РезультатыДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3000
		|	РезультатыДействий.Действие,
		|	РезультатыДействий.ИдентификаторУчастника,
		|	РезультатыДействий.Функция,
		|	РезультатыДействий.Участник,
		|	РезультатыДействий.ЕстьФайлыОтчета,
		|	РезультатыДействий.Результат,
		|	РезультатыДействий.РезультатТекстом,
		|	РезультатыДействий.Дата,
		|	ДействияСогласованияУчастники.ИдентификаторЭтапа
		|ИЗ
		|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияСогласования.Участники КАК ДействияСогласованияУчастники
		|		ПО РезультатыДействий.Действие = ДействияСогласованияУчастники.Ссылка
		|			И РезультатыДействий.ИдентификаторУчастника = ДействияСогласованияУчастники.Идентификатор
		|ГДЕ
		|	ДействияСогласованияУчастники.ИдентификаторЭтапа <> &ИдентификаторПунктаПустой
		|	И РезультатыДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3000
		|	РезультатыДействий.Действие,
		|	РезультатыДействий.ИдентификаторУчастника,
		|	РезультатыДействий.Функция,
		|	РезультатыДействий.Участник,
		|	РезультатыДействий.ЕстьФайлыОтчета,
		|	РезультатыДействий.Результат,
		|	РезультатыДействий.РезультатТекстом,
		|	РезультатыДействий.Дата,
		|	ДействияПодписанияУчастники.ИдентификаторЭтапа
		|ИЗ
		|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияПодписания.Участники КАК ДействияПодписанияУчастники
		|		ПО РезультатыДействий.Действие = ДействияПодписанияУчастники.Ссылка
		|			И РезультатыДействий.ИдентификаторУчастника = ДействияПодписанияУчастники.Идентификатор
		|ГДЕ
		|	ДействияПодписанияУчастники.ИдентификаторЭтапа <> &ИдентификаторПунктаПустой
		|	И РезультатыДействий.ИдентификаторПункта = &ИдентификаторПунктаПустой
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ");     
	
	Запрос.УстановитьПараметр("ИдентификаторПунктаПустой", ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка     
			
			НаборЗаписей = РегистрыСведений.РезультатыДействий.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Действие.Установить(Выборка.Действие);
			НаборЗаписей.Отбор.ИдентификаторУчастника.Установить(Выборка.ИдентификаторУчастника);
			НаборЗаписей.Отбор.Функция.Установить(Выборка.Функция);
			НаборЗаписей.Отбор.Участник.Установить(Выборка.Участник);
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить РС РезультатыДействий %1 по причине:
					|%2'"),
				Выборка.Действие,
				ПодробноеПредставлениеОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Действие.Метаданные(),
				Выборка.Действие,
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;  
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_15_5 не удалось обработать некоторые записи (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Обновляет действие задачи до версии обновления 1.
// Предназначен для вызова в транзакции.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//
Процедура ОбновитьДействиеЗадачиДоВерсииОбновления1(ДействиеЗадачи)
	
	Если Не ТранзакцияАктивна() Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедура %1 не предназначена для вызова вне транзакции.'",
			"ОбновитьДействиеЗадачиДоВерсииОбновления1"));
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ДействиеЗадачи);
	Блокировка.Заблокировать();
	
	ДействиеЗадачиОбъект = ДействиеЗадачи.ПолучитьОбъект();
	Если ДействиеЗадачиОбъект.ВерсияОбновления <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеЗадачиОбъект.ВерсияОбновления = 1;
	ДействиеЗадачиОбъект.ДополнительныеСвойства.Вставить("ПропуститьОпределениеДескриптораДоступаИПроверкуПрав", Истина);
	
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ДействиеЗадачиОбъект);
	
	ОбновитьДанныеРеестровДействияЗадачи(ДействиеЗадачи);
	
КонецПроцедуры

// Обновляет данные реестров действия задачи в режим обновления информационной базы.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
// 
Процедура ОбновитьДанныеРеестровДействияЗадачи(ДействиеЗадачи)
	
	РеестрыЗадачи = Справочники.РеестрыЗадач.РеестрыДействияЗадачи(ДействиеЗадачи);
	
	// РегистрыСведений.РеестрЗадачПоИсполнителям
	ДанныеРеестра = РегистрыСведений.РеестрЗадачПоИсполнителям.ДанныеРеестра(ДействиеЗадачи);
	
	Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
		
		НаборЗаписей = РегистрыСведений.РеестрЗадачПоИсполнителям.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.РеестрЗадач.Установить(РеестрЗадачи);
		НаборЗаписей.Отбор.Дата.Установить(ДанныеРеестра.Дата);
		НаборЗаписей.Отбор.ДействиеЗадачи.Установить(ДанныеРеестра.ДействиеЗадачи);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.РеестрЗадач = РеестрЗадачи;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеРеестра);
		
		ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(НаборЗаписей);
		
	КонецЦикла;
	
	// РегистрыНакопления.КоличествоЗадачПоИсполнителям
	ДанныеРеестра = РегистрыНакопления.КоличествоЗадачПоИсполнителям.ДанныеРеестра(ДействиеЗадачи);
	
	НаборЗаписей = РегистрыНакопления.КоличествоЗадачПоИсполнителям.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДанныеРеестра.Регистратор);
	
	Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.РеестрЗадач = РеестрЗадачи;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеРеестра);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_15_9() Экспорт

	РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.ЗаполнитьИдентификаторыУчетныхЗаписейЭДО();
	РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.ЗаполнитьРеквизитВидаДокументаИспользоватьЭДО();
	
КонецПроцедуры

// Обновляет задачу до версии обновления 1.
// Предназначен для вызова в транзакции.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//
Процедура ОбновитьЗадачуДоВерсииОбновления1(Задача)
	
	Если Не ТранзакцияАктивна() Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедура %1 не предназначена для вызова вне транзакции.'",
			"ОбновитьЗадачуДоВерсииОбновления1"));
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.Задача");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
	Блокировка.Заблокировать();
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	Если ЗадачаОбъект.ВерсияОбновления <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаОбъект.ВерсияОбновления = 1;
	ЗадачаОбъект.ДополнительныеСвойства.Вставить("ПропуститьОпределениеДескриптораДоступаИПроверкуПрав", Истина);
	
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ЗадачаОбъект);
	
	РеестрыЗадачи = Справочники.РеестрыЗадач.РеестрыЗадачи(Задача);
	
	// РегистрыСведений.РеестрЗадачПоАвторам
	ДанныеРеестра = РегистрыСведений.РеестрЗадачПоАвторам.ДанныеРеестра(Задача);
	
	Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
		
		НаборЗаписей = РегистрыСведений.РеестрЗадачПоАвторам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.РеестрЗадач.Установить(РеестрЗадачи);
		НаборЗаписей.Отбор.Дата.Установить(ДанныеРеестра.Дата);
		НаборЗаписей.Отбор.Задача.Установить(ДанныеРеестра.Задача);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.РеестрЗадач = РеестрЗадачи;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеРеестра);
		
		ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(НаборЗаписей);
		
	КонецЦикла;
	
	// РегистрыНакопления.КоличествоЗадачПоАвторам
	ДанныеРеестра = РегистрыНакопления.КоличествоЗадачПоАвторам.ДанныеРеестра(Задача);
	
	НаборЗаписей = РегистрыНакопления.КоличествоЗадачПоАвторам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДанныеРеестра.Регистратор);
	
	Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.РеестрЗадач = РеестрЗадачи;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеРеестра);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры

// Обновляет элемент "Все задачи" в каждом узле КОД.
//
Процедура ПерейтиНаВерсию_3_0_15_11() Экспорт
	
	Константы.ЧислоПотоковОбновленияКэширующихДанных.Установить(5);
	
КонецПроцедуры

// Обновляет полномочия для работы с ЭДО
Процедура ПерейтиНаВерсию_3_0_15_15() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка

		// Создадим новые полномочия для работы с ЭД: чтение, выполнение обмена, настройка, МЧД
		Идентификаторы = Новый Массив;
		Идентификаторы.Добавить("f29fef1f-bac3-460c-a165-07230eac7a6c");
		Идентификаторы.Добавить("bd0ef8cc-f453-4eb0-b77e-398f7990b955");

		Для Каждого Идентификатор Из Идентификаторы Цикл

			Полномочие = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(
				Идентификатор);
			Если Полномочие = Неопределено Тогда
				Полномочие = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
				Полномочие.ИдентификаторПоставляемыхДанных = Новый УникальныйИдентификатор(Идентификатор);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Полномочие);
			КонецЕсли;
			Справочники.ПрофилиГруппДоступа.ЗаполнитьПоставляемыйПрофиль(Полномочие.Ссылка, Ложь);

		КонецЦикла;


		// Удалим старое полномочие "Ответственные за ЭДО" у сотрудников и дадим им новое "Оператор ЭДО"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИдентификаторПоставляемыхДанных",
			Новый УникальныйИдентификатор("2be49dd2-337f-4b3a-af9d-17fe9f8325ec"));
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрофилиГруппДоступа.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
			|ГДЕ
			|	ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных = &ИдентификаторПоставляемыхДанных
			|	И НЕ ПрофилиГруппДоступа.ПометкаУдаления";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ОтветственныеЗаЭДО = Выборка.Ссылка;

			НаборСтарыхПолномочий = РегистрыСведений.ПолномочияСотрудников.СоздатьНаборЗаписей();
			НаборСтарыхПолномочий.Отбор.Полномочия.Установить(ОтветственныеЗаЭДО);
			НаборСтарыхПолномочий.Прочитать();
			
			Если НаборСтарыхПолномочий.Количество() Тогда
				
				ОператорЭДО = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору("f29fef1f-bac3-460c-a165-07230eac7a6c"); 
			
				НаборНовыхПолномочий = РегистрыСведений.ПолномочияСотрудников.СоздатьНаборЗаписей();
				НаборНовыхПолномочий.Отбор.Полномочия.Установить(ОператорЭДО);
				Для Каждого Запись Из НаборСтарыхПолномочий Цикл
					НоваяЗапись = НаборНовыхПолномочий.Добавить();
					НоваяЗапись.Полномочия = ОператорЭДО;
					НоваяЗапись.Владелец = Запись.Владелец;
				КонецЦикла;
				
				НаборНовыхПолномочий.Записать();
				
			КонецЕсли;
			
			НаборСтарыхПолномочий.Очистить();
			НаборСтарыхПолномочий.Записать();
			
			ОтветственныеЗаЭДООбъект = ОтветственныеЗаЭДО.ПолучитьОбъект();
			ОтветственныеЗаЭДООбъект.Наименование = СтрШаблон(НСтр("ru='%1 (не используется)'"),
				ОтветственныеЗаЭДООбъект.Наименование);
			ОтветственныеЗаЭДООбъект.Записать();
			ОтветственныеЗаЭДООбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЕсли;
		
		
		// Обновим полномочие "Ответственные за МЭДО"
		УправлениеДоступомДокументооборот.УдалитьРольИзПолномочий("БазовыеПраваЭД",
			"4a3c2c1a-3290-11ed-9ec2-4cedfb9508c3");
		УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия("БазовыеПраваЭДДокументооборот",
			"4a3c2c1a-3290-11ed-9ec2-4cedfb9508c3");
		УправлениеДоступомДокументооборот.УдалитьРольИзПолномочий("УдалитьВыполнениеОбменаЭД",
			"4a3c2c1a-3290-11ed-9ec2-4cedfb9508c3");
		УправлениеДоступомДокументооборот.УдалитьРольИзПолномочий("УдалитьЧтениеЭД",
			"4a3c2c1a-3290-11ed-9ec2-4cedfb9508c3");
		УправлениеДоступомДокументооборот.УдалитьРольИзПолномочий("УдалитьНастройкаПараметровЭД",
			"4a3c2c1a-3290-11ed-9ec2-4cedfb9508c3");
		
		
		// Полномочие "Пользователи"
		УправлениеДоступомДокументооборот.УдалитьРольИзПолномочий("БазовыеПраваЭД",
			"c999acb1-d5f5-11de-a544-00179ab398dc");
		УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия("БазовыеПраваЭДДокументооборот",
			"c999acb1-d5f5-11de-a544-00179ab398dc");
		УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия("ИспользованиеУведомленийЭДО",
			"c999acb1-d5f5-11de-a544-00179ab398dc");
		УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия("ЧтениеЭлектронныхДокументовПоДокументамДО",
			"c999acb1-d5f5-11de-a544-00179ab398dc");
		УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия("ЧтениеМаршрутовПодписанияДокументооборот",
			"c999acb1-d5f5-11de-a544-00179ab398dc");
		УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия("ЧтениеМЧДЭДОДокументооборот",
			"c999acb1-d5f5-11de-a544-00179ab398dc");
		УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия("ЧтениеНастроекОбменаСКонтрагентамиДокументооборот",
			"c999acb1-d5f5-11de-a544-00179ab398dc");
		УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия("ЧтениеНастроекЭлектронногоВзаимодействия",
			"c999acb1-d5f5-11de-a544-00179ab398dc");
		УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия("ЧтениеНоменклатурыКонтрагентовБЭД",
			"c999acb1-d5f5-11de-a544-00179ab398dc");
		
		
		// Определим права по дескрипторам для объектов ЭДО
		ДокументооборотПраваДоступа.ОпределитьПраваОбъектовТаблицы(
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭлектронныйДокументВходящийЭДО));
		ДокументооборотПраваДоступа.ОпределитьПраваОбъектовТаблицы(
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭлектронныйДокументИсходящийЭДО));
		ДокументооборотПраваДоступа.ОпределитьПраваОбъектовТаблицы(
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ТранспортныйКонтейнерЭДО));

		ЗафиксироватьТранзакцию();
		
	Исключение

		ОтменитьТранзакцию();
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ""ПерейтиНаВерсию_3_0_15_15"" не удалось обновить полномочия для работы с ЭД по причине:
			|%1'"), ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;
	
КонецПроцедуры

// Заполняет справочник НастройкиДоступностиПоСостоянию в части нового поля "ГотовоКВыгрузкеССТУ" из макета
// в справочнике. Остальные настройки не трогает, они могли быть изменены пользователем.
Процедура ПерейтиНаВерсию_3_0_15_14() Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ссылка КАК НастройкаДоступности
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию
		|ГДЕ
		|	ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ДокументыПредприятия)
		|	И НЕ ПометкаУдаления");
	НастройкиДоступностиПоПолюССТУ = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(
		Перечисления.ТипыОбъектов.ДокументыПредприятия,
		"Делопроизводитель",
		"ГотовоКВыгрузкеССТУ"); // Роль не важна, для всех ролей по умолчанию одни настройки.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НастройкаОбъект = Выборка.НастройкаДоступности.ПолучитьОбъект();
		
		ОтборПоляССТУ = Новый Структура("ИмяПоляКоманды", "ГотовоКВыгрузкеССТУ");
		СтрокиТЧ = НастройкаОбъект.НастройкиДоступности.НайтиСтроки(ОтборПоляССТУ);
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			НастройкаОбъект.НастройкиДоступности.Удалить(СтрокаТЧ);
		КонецЦикла;
		
		Для Каждого СтрокаТЗ Из НастройкиДоступностиПоПолюССТУ Цикл
			СтрокаТЧ = НастройкаОбъект.НастройкиДоступности.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЗ);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_15_16() Экспорт
	
	ПрежнееЗначение = Константы.ПериодХраненияЗамеров.Получить();
	Если ПрежнееЗначение = 0 Тогда
		Константы.ПериодХраненияЗамеров.Установить(100);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_15_17(Параметры) Экспорт
	
	РегистрыСведений.УдалитьПоискВАдреснойКниге.ПеренестиДанныеВНовойРегистр(Параметры);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_15_20() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
			
		Возврат;
	КонецЕсли;
	
	ОбменЭДОДокументооборот.ТрансформироватьПравилаУчетаЭДДОВПравилаАвтоматическогоСозданияОбъектов();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_15_21(Параметры) Экспорт
	
	ОбменЭДОДокументооборот.ОбновитьСостоянияЭДОВДанныхДокументов(Параметры);;
	
КонецПроцедуры

// Заполняет предопредлененный элемент АвтоподстановкиДляЗадач.
// 
Процедура ПерейтиНаВерсию_3_0_15_22() Экспорт
	
	Справочники.АдреснаяКнига.ЗаполнитьПредопределенныеРазделы();
	
КонецПроцедуры

// Добавляет Справочник.ШаблоныЗадач в области замещения.
// 
Процедура ПерейтиНаВерсию_3_0_15_23() Экспорт
	
	ОписаниеОбластейЗамещения =
		НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейЗамещения();
	Для Каждого Описание Из ОписаниеОбластейЗамещения Цикл
		
		ПолноеИмяПредопределенного =
			СтрШаблон("Справочник.ОбластиЗамещения.%1", Описание.ИмяПредопределенного);
		
		ПредопределенныйЭлемент =
			ОбщегоНазначения.ПредопределенныйЭлемент(ПолноеИмяПредопределенного);
			
		Если ПредопределенныйЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьЗамещенияОбъект = ПредопределенныйЭлемент.ПолучитьОбъект();
		
		Для Каждого Метаданное Из Описание.Состав Цикл
			
			ИдентификаторОбъектаМетаданных =
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданное);
			
			НайденнаяСтрока = ОбластьЗамещенияОбъект.Состав.Найти(
					ИдентификаторОбъектаМетаданных,
					"ОбъектМетаданных");
			
			УжеЕстьМетаданное = НайденнаяСтрока <> Неопределено;
			
			Если УжеЕстьМетаданное Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ОбластьЗамещенияОбъект.Состав.Добавить();
			НоваяСтрока.ОбъектМетаданных = ИдентификаторОбъектаМетаданных;
				
		КонецЦикла;
		
		Если ОбластьЗамещенияОбъект.Модифицированность() Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбластьЗамещенияОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет строку "Обработка" НДПС: теперь во всех состояниях для "обработки" будет доступность 1
// Если пользователь уже установил НДПС по состоянию для настройки, то меняться не будет
// 
Процедура ПерейтиНаВерсию_3_0_15_24() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НастройкиДоступностиПоСостоянию.ПометкаУдаления = ЛОЖЬ");
	
	НастройкиДоступностиПоПолюОбработка = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(
		Перечисления.ТипыОбъектов.ДокументыПредприятия,
		"Делопроизводитель",
		"Обработка"); // Роль не важна
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВсеВидыДействий = ДействияСервер.ВсеВидыДействий();
	СостоянияДокументовВидовДействий = ДействияСервер.СостоянияДокументовВидовДействий(ВсеВидыДействий);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяПоляКоманды", "Обработка");
	Отбор.Вставить("ВидДействия", Неопределено); 
	Отбор.Вставить("Состояние", Неопределено);
	
	ОтборДляТаблицы = Новый Структура;
	ОтборДляТаблицы.Вставить("ИмяПоляКоманды", "Обработка"); 
	
	ОтборСтрокиПроекта = Новый Структура;
	ОтборСтрокиПроекта.Вставить("Состояние", Перечисления.СостоянияДокументов.Проект);
	ОтборСтрокиПроекта.Вставить("ИмяПоляКоманды", "Обработка");
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектНастройки = Выборка.Ссылка.ПолучитьОбъект();
		ТаблицаОбъектаНастройки = ОбъектНастройки.НастройкиДоступности;
		
		НастройкиОбработки = ТаблицаОбъектаНастройки.Выгрузить(ОтборДляТаблицы);
		НастройкиПустые = НастройкиОбработки.Количество() = 0;
		
		Для Каждого ВидДействия Из ВсеВидыДействий Цикл
			
			Отбор.ВидДействия = ВидДействия;
			Для Каждого ВозможноеСостояние Из СостоянияДокументовВидовДействий[ВидДействия] Цикл
				
				Отбор.Состояние = ВозможноеСостояние; 
				Если Не НастройкиПустые Тогда
					УстановленныеНастройки = НастройкиОбработки.НайтиСтроки(Отбор);
					Если УстановленныеНастройки.Количество() > 0 Тогда
						
						Если УстановленныеНастройки[0].Доступность = 0 Тогда
							
							СтрокиНастройкиДляИзменения = ТаблицаОбъектаНастройки.НайтиСтроки(Отбор);
							СтрокиНастройкиДляИзменения[0].Доступность = 1;
							
						Иначе
							
							Продолжить;
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрокаНастроек = ТаблицаОбъектаНастройки.Добавить(); 
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНастроек, Отбор);
				НоваяСтрокаНастроек.Доступность = 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СтрокиПроекта = ТаблицаОбъектаНастройки.НайтиСтроки(ОтборСтрокиПроекта);
		Если СтрокиПроекта.Количество() > 0 Тогда
			
			СтрокаПроекта = СтрокиПроекта[0];
			Если СтрокаПроекта.Доступность = 0 Тогда
				
				СтрокаПроекта.Доступность = 1;
				
			Иначе 
				
				НоваяСтрокаНастроек = ТаблицаОбъектаНастройки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНастроек, ОтборСтрокиПроекта);
				НоваяСтрокаНастроек.Доступность = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектНастройки);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляем права ролей, чтобы в них появились Шаблоны задач.
//
Процедура ПерейтиНаВерсию_3_0_15_25() Экспорт
	
	РегистрыСведений.ПраваРолей.ОбновитьДанныеРегистра();
	
КонецПроцедуры

// Устанавливает реквизит РодительОбъекта в Адресной книге для групп контактов пользователей
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_15_30(Параметры) Экспорт
	
	Справочники.АдреснаяКнига.ОбновитьРодительОбъектаГруппКонтактов(Параметры);
	
КонецПроцедуры

// Заполняет МоментРазыменования - если он пуст (действия и настройки действий)
// 
Процедура ПерейтиНаВерсию_3_0_15_31() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Действия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДействияИсполнения КАК Действия
		|ГДЕ
		|	Действия.МоментРазыменованияУчастников = ЗНАЧЕНИЕ(Перечисление.МоментыРазыменованияУчастниковДействий.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Действия.Ссылка
		|ИЗ
		|	Справочник.ДействияСогласования КАК Действия
		|ГДЕ
		|	Действия.МоментРазыменованияУчастников = ЗНАЧЕНИЕ(Перечисление.МоментыРазыменованияУчастниковДействий.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Действия.Ссылка
		|ИЗ
		|	Справочник.ДействияРегистрации КАК Действия
		|ГДЕ
		|	Действия.МоментРазыменованияУчастников = ЗНАЧЕНИЕ(Перечисление.МоментыРазыменованияУчастниковДействий.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Действия.Ссылка
		|ИЗ
		|	Справочник.ДействияПодписания КАК Действия
		|ГДЕ
		|	Действия.МоментРазыменованияУчастников = ЗНАЧЕНИЕ(Перечисление.МоментыРазыменованияУчастниковДействий.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Действия.Ссылка
		|ИЗ
		|	Справочник.ДействияУтверждения КАК Действия
		|ГДЕ
		|	Действия.МоментРазыменованияУчастников = ЗНАЧЕНИЕ(Перечисление.МоментыРазыменованияУчастниковДействий.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиДействий.Ссылка
		|ИЗ
		|	Справочник.НастройкиДействийПодписания КАК НастройкиДействий
		|ГДЕ
		|	НастройкиДействий.МоментРазыменованияУчастников = ЗНАЧЕНИЕ(Перечисление.МоментыРазыменованияУчастниковДействий.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиДействий.Ссылка
		|ИЗ
		|	Справочник.НастройкиДействийИсполнения КАК НастройкиДействий
		|ГДЕ
		|	НастройкиДействий.МоментРазыменованияУчастников = ЗНАЧЕНИЕ(Перечисление.МоментыРазыменованияУчастниковДействий.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиДействий.Ссылка
		|ИЗ
		|	Справочник.НастройкиДействийРегистрации КАК НастройкиДействий
		|ГДЕ
		|	НастройкиДействий.МоментРазыменованияУчастников = ЗНАЧЕНИЕ(Перечисление.МоментыРазыменованияУчастниковДействий.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиДействий.Ссылка
		|ИЗ
		|	Справочник.НастройкиДействийУтверждения КАК НастройкиДействий
		|ГДЕ
		|	НастройкиДействий.МоментРазыменованияУчастников = ЗНАЧЕНИЕ(Перечисление.МоментыРазыменованияУчастниковДействий.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиДействий.Ссылка
		|ИЗ
		|	Справочник.НастройкиДействийСогласования КАК НастройкиДействий
		|ГДЕ
		|	НастройкиДействий.МоментРазыменованияУчастников = ЗНАЧЕНИЕ(Перечисление.МоментыРазыменованияУчастниковДействий.ПустаяСсылка)");

	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДействиеНастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДействиеНастройкаОбъект.МоментРазыменованияУчастников = Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДействиеНастройкаОбъект);
			
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать действие/настройку: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Исправляет незаполненный реквизит УникальныйКодДляПоля в дополнительных реквизитах
Процедура ПерейтиНаВерсию_3_0_15_32() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
			
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.УникальныйКодДляПоля = """"
		|	И ДополнительныеРеквизитыИСведения.ВидСвойств = ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.ДополнительныеРеквизиты)");
	ДопРеквизиты = Запрос.Выполнить().Выбрать();
	
	Пока ДопРеквизиты.Следующий() Цикл
		ДопРеквизитОбъект = ДопРеквизиты.Ссылка.ПолучитьОбъект();
		ДопРеквизитОбъект.УникальныйКодДляПоля = ДопРеквизитОбъект.ПолучитьУникальныйКод();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДопРеквизитОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Корректирует дубли пунктов протоколов.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_15_33(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ПротоколыМероприятий.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПротоколыМероприятий КАК ПротоколыМероприятийДляПоискаДублей
			|		ПО ПротоколыМероприятий.Владелец = ПротоколыМероприятийДляПоискаДублей.Владелец
			|			И ПротоколыМероприятий.НомерПунктаПротокола = ПротоколыМероприятийДляПоискаДублей.НомерПунктаПротокола
			|			И ПротоколыМероприятий.Ссылка <> ПротоколыМероприятийДляПоискаДублей.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мероприятия.Протокол КАК МероприятияПротокол
			|		ПО ПротоколыМероприятий.Ссылка = МероприятияПротокол.ПунктПротокола
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мероприятия.Протокол КАК МероприятияПротоколДляПоискаДублей
			|		ПО (ПротоколыМероприятийДляПоискаДублей.Ссылка = МероприятияПротоколДляПоискаДублей.ПунктПротокола)
			|ГДЕ
			|	ПротоколыМероприятий.НомерПунктаПротокола ПОДОБНО ""%.%""
			|	И ПротоколыМероприятийДляПоискаДублей.НомерПунктаПротокола ПОДОБНО ""%.%""
			|	И МероприятияПротокол.НомерСтроки > МероприятияПротоколДляПоискаДублей.НомерСтроки");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПротоколыМероприятий.Ссылка КАК ПунктПротокола,
		|	ПротоколыМероприятий.НомерПунктаПротокола КАК НомерПунктаПротокола
		|ИЗ
		|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПротоколыМероприятий КАК ПротоколыМероприятийДляПоискаДублей
		|		ПО ПротоколыМероприятий.Владелец = ПротоколыМероприятийДляПоискаДублей.Владелец
		|			И ПротоколыМероприятий.НомерПунктаПротокола = ПротоколыМероприятийДляПоискаДублей.НомерПунктаПротокола
		|			И ПротоколыМероприятий.Ссылка <> ПротоколыМероприятийДляПоискаДублей.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мероприятия.Протокол КАК МероприятияПротокол
		|		ПО ПротоколыМероприятий.Ссылка = МероприятияПротокол.ПунктПротокола
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мероприятия.Протокол КАК МероприятияПротоколДляПоискаДублей
		|		ПО (ПротоколыМероприятийДляПоискаДублей.Ссылка = МероприятияПротоколДляПоискаДублей.ПунктПротокола)
		|ГДЕ
		|	ПротоколыМероприятий.НомерПунктаПротокола ПОДОБНО ""%.%""
		|	И ПротоколыМероприятийДляПоискаДублей.НомерПунктаПротокола ПОДОБНО ""%.%""
		|	И МероприятияПротокол.НомерСтроки > МероприятияПротоколДляПоискаДублей.НомерСтроки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ПротоколыМероприятий");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ПунктПротокола);
			Блокировка.Заблокировать();
			
			// Сбросим номер пункта протокола.
			ПунткПротоколаОбъект = Выборка.ПунктПротокола.ПолучитьОбъект();
			ПунткПротоколаОбъект.НомерПунктаПротокола = "";
			ПунткПротоколаОбъект.ДополнительныеСвойства.Вставить("ОтключитьОтметкиВремени");
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПунткПротоколаОбъект);
			
			// Перезаполним номер пунктам протокола.
			Справочники.ПротоколыМероприятий.ЗаполнитьНомерПунктаПротокола(Выборка.ПунктПротокола);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить номер пункта протокола %1 по причине:
					|%2'"),
				Выборка.ПунктПротокола,
				ПодробноеПредставлениеОшибки); 
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.ПунктПротокола.Метаданные(),
				Выборка.ПунктПротокола,
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_15_33 не удалось обновить некоторые пункты протокола (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Заполняет необходимые данные для работы сервиса распознавания.
// 
Процедура ПерейтиНаВерсию_3_0_15_35() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() И КОДСервер.ЭтоПодчиненныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ПорогБалансаСтраницСервисаРаспознавания.Установить(200);
	Константы.ПорогСрокаДействияТарифаСервисаРаспознавания.Установить(7);
	Константы.ГраницаОтключенияНачалаАвтораспознаванияВСервисе.Установить(100);
	
	МассивТипов = РегистрыСведений.РежимыРаспознаванияФайлов.НеподходящиеТипыДляАвтораспознавания();
	
	Владельцы = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(МассивТипов);
	
	РежимыРаспознавания = Новый Соответствие;
	
	Для Каждого Владелец Из Владельцы Цикл
		
		РежимыРаспознавания[Владелец.Значение] = Перечисления.ВариантыРежимовРаспознаванияФайлов.ПоЗапросу;
		
	КонецЦикла;
		
	НачатьТранзакцию();
	Попытка
		
		РегистрыСведений.РежимыРаспознаванияФайлов.ОбновитьРежимыРаспознаванияФайловПоВладельцам(
			РежимыРаспознавания, Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось установить режим ручного распознавания для неподходящих типов объектов:
				|%1'"),
			ПодробноеПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Заменяет файлы на документы в состояниях объектов учета ЭДО
// 
Процедура ПерейтиНаВерсию_3_0_15_36() Экспорт
	
	ОбменЭДОДокументооборот.ИсключитьФайлыИзВСостоянияхОбъектовУчетаЭДО();
	
КонецПроцедуры

// Исправляет некорректные записи в РС ИсполнителиРолейИДелегаты, где вместо Неопределено осталась пустая ссылка на справочник УдалитьДелегированиеПрав
Процедура ПерейтиНаВерсию_3_0_15_37() Экспорт
	
	// Проверка на записи, которые можно удалить, не исправляя
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК ИсполнительДелегат,
	|	ИсполнителиРолейИДелегаты.РольСотрудник КАК РольСотрудник
	|ИЗ
	|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
	|		ПО (ИсполнителиРолей.Исполнитель = ИсполнителиРолейИДелегаты.ИсполнительДелегат)
	|			И (ИсполнителиРолей.РольИсполнителя = ИсполнителиРолейИДелегаты.РольСотрудник)
	|ГДЕ
	|	ИсполнителиРолейИДелегаты.РольСотрудник ССЫЛКА Справочник.ПолныеРоли
	|	И ИсполнителиРолей.Исполнитель ЕСТЬ NULL
	|	И (ИсполнителиРолейИДелегаты.НастройкаДелегирования = ЗНАЧЕНИЕ(Справочник.УдалитьДелегированиеПрав.ПустаяСсылка)
	|		ИЛИ ИсполнителиРолейИДелегаты.НастройкаДелегирования = НЕОПРЕДЕЛЕНО)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ИсполнителиРолейИДелегаты.СоздатьНаборЗаписей();
		Набор.Отбор.ИсполнительДелегат.Установить(Выборка.ИсполнительДелегат);
		Набор.Отбор.РольСотрудник.Установить(Выборка.РольСотрудник);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
		
	КонецЦикла;
	
	
	// Исправление оставшихся записей путем замены пустой ссылки на Неопределено
	Набор = РегистрыСведений.ИсполнителиРолейИДелегаты.СоздатьНаборЗаписей();
	Набор.Отбор.НастройкаДелегирования.Установить(Справочники.УдалитьДелегированиеПрав.ПустаяСсылка());
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		
		Запись.НастройкаДелегирования = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает реквизит НеПредлагатьСохранятьНастройки РС НастройкиПолученияЭлектронныхДокументов Истина
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_15_38(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(НастройкиПолученияЭлектронныхДокументов.Получатель) КАК ВсегоОбъектов
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки = ЛОЖЬ");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НастройкиПолученияЭлектронныхДокументов.Получатель КАК Получатель,
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель КАК Отправитель,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента КАК ВидДокумента
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|ГДЕ
	|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки = ЛОЖЬ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Набор = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьНаборЗаписей();
			Набор.Отбор.Получатель.Установить(Выборка.Получатель);
			Набор.Отбор.Отправитель.Установить(Выборка.Отправитель);        
			Набор.Отбор.ИдентификаторОтправителя.Установить(Выборка.ИдентификаторОтправителя);
			Набор.Отбор.ИдентификаторПолучателя.Установить(Выборка.ИдентификаторПолучателя);
			Набор.Отбор.ВидДокумента.Установить(Выборка.ВидДокумента);
			Набор.Прочитать();
			
			Для Каждого Стр Из Набор Цикл
				Стр.НеПредлагатьСохранятьНастройки = Истина;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось установить реквизит НеПредлагатьСохранятьНастройки в настройке %1-%2 по причине:
				|%3'"),
				Выборка.Получатель, Выборка.Отправитель,
				ПодробноеПредставлениеОшибки); 
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_15_38 не удалось установить реквизит НеПредлагатьСохранятьНастройки: %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = (ОбработаноОбъектов = 0);
	
КонецПроцедуры

// Обновляет измнененные поставляемые данные задач.
// 
Процедура ПерейтиНаВерсию_3_0_15_39() Экспорт
	
	РаботаСЗадачами.ЗаполнитьПоставляемыеДанные(Ложь);
	
КонецПроцедуры

// Корректирует задачи обработчик результатов.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_15_40(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДействиеЗадачи.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
			|ГДЕ
			|	ДействиеЗадачи.СостояниеУчастникаЗадачи = ЗНАЧЕНИЕ(Справочник.СостоянияУчастниковЗадач.ПустаяСсылка)
			|	И ДействиеЗадачи.РезультатДействия = ЗНАЧЕНИЕ(Справочник.РезультатыДействийЗадач.ОтправленоПовторно)");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДействиеЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.СостояниеУчастникаЗадачи = ЗНАЧЕНИЕ(Справочник.СостоянияУчастниковЗадач.ПустаяСсылка)
		|	И ДействиеЗадачи.РезультатДействия = ЗНАЧЕНИЕ(Справочник.РезультатыДействийЗадач.ОтправленоПовторно)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ОбновляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОбновляемыйОбъект.СостояниеУчастникаЗадачи =
				Справочники.СостоянияУчастниковЗадач.ОтправленоПовторно;
			ОбновляемыйОбъект.ДополнительныеСвойства.Вставить(
				"ПропуститьОпределениеДескриптораДоступаИПроверкуПрав",
				Истина);
			ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ОбновляемыйОбъект);
			
			ОбновитьДанныеРеестровДействияЗадачи(Выборка.Ссылка);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_15_40 не удалось обновить некоторые объекты (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Корректирует задачи ознакомления с результатом.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_15_41(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДействиеЗадачи.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
			|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя Как ЗадачаПроцесса
			|		ПО ДействиеЗадачи.Источник = ЗадачаПроцесса.Ссылка
			|ГДЕ
			|	ДействиеЗадачи.СостояниеУчастникаЗадачи = ЗНАЧЕНИЕ(Справочник.СостоянияУчастниковЗадач.ПустаяСсылка)
			|	И ДействиеЗадачи.РезультатДействия = ЗНАЧЕНИЕ(Справочник.РезультатыДействийЗадач.ПустаяСсылка)
			|	И ДействиеЗадачи.ВидДействия = ЗНАЧЕНИЕ(Справочник.ВидыДействийЗадач.ОзнакомитьсяСРезультатом)
			|	И НЕ ЗадачаПроцесса.Выполнена
			|	И ЗадачаПроцесса.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)");
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДействиеЗадачи.Ссылка КАК Ссылка,
		|	ЗадачаПроцесса.ПринятаКИсполнению КАК ПринятаКИсполнению
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя Как ЗадачаПроцесса
		|		ПО ДействиеЗадачи.Источник = ЗадачаПроцесса.Ссылка
		|ГДЕ
		|	ДействиеЗадачи.СостояниеУчастникаЗадачи = ЗНАЧЕНИЕ(Справочник.СостоянияУчастниковЗадач.ПустаяСсылка)
		|	И ДействиеЗадачи.РезультатДействия = ЗНАЧЕНИЕ(Справочник.РезультатыДействийЗадач.ПустаяСсылка)
		|	И ДействиеЗадачи.ВидДействия = ЗНАЧЕНИЕ(Справочник.ВидыДействийЗадач.ОзнакомитьсяСРезультатом)
		|	И НЕ ЗадачаПроцесса.Выполнена
		|	И ЗадачаПроцесса.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ОбновляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если Выборка.ПринятаКИсполнению Тогда
				ОбновляемыйОбъект.СостояниеУчастникаЗадачи =
					Справочники.СостоянияУчастниковЗадач.НаОзнакомлении;
			Иначе
				ОбновляемыйОбъект.СостояниеУчастникаЗадачи =
					Справочники.СостоянияУчастниковЗадач.Новая;
			КонецЕсли;
			ОбновляемыйОбъект.ДополнительныеСвойства.Вставить(
				"ПропуститьОпределениеДескриптораДоступаИПроверкуПрав",
				Истина);
			ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ОбновляемыйОбъект);
			
			ОбновитьДанныеРеестровДействияЗадачи(Выборка.Ссылка);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_15_41 не удалось обновить некоторые объекты (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Устанавливает значения настроек КОД.
//
Процедура ПерейтиНаВерсию_3_0_16_2() Экспорт
	
	Менеджер = Константы.МаксимальноеКоличествоФайловОбрабатываемоеВсемиПотокамиПолученияКОД.СоздатьМенеджерЗначения();
	Менеджер.Значение = 1500;
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(Менеджер);
	
	Менеджер = Константы.МаксимальныйОбъемФайловОбрабатываемыйПотокомПолученияКОД.СоздатьМенеджерЗначения();
	Менеджер.Значение = 512 * 1024; // 512 КБайт
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(Менеджер);
	
КонецПроцедуры

// Установка значения новой константы по умолчанию.
// 
Процедура ПерейтиНаВерсию_3_0_16_3() Экспорт
	
	Константы.ОтсрочкаУдаленияДанныхУничтоженныхДокументов.Установить(14);
	
КонецПроцедуры

// Корректирует задачи ознакомления с результатом.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//      ** ТекущийОбъектОбновления - ДокументСсылка.ДействиеЗадачи
//                                 - Неопределено
//
Процедура ПерейтиНаВерсию_3_0_16_4(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВсеИсполнителиДействийЗадач.ДействиеЗадачи) КАК ВсегоОбъектов
			|ИЗ
			|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
			|ГДЕ
			|	ВсеИсполнителиДействийЗадач.Основание <> ЗНАЧЕНИЕ(Справочник.ЗамещающиеИПомощники.ПустаяСсылка)");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Параметры.Свойство("ТекущийОбъектОбновления") Тогда
		Параметры.Вставить("ТекущийОбъектОбновления");
	КонецЕсли;
	ТекущийОбъектОбновления = Параметры.ТекущийОбъектОбновления;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи КАК ДействиеЗадачи
		|ИЗ
		|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
		|ГДЕ
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи > &ТекущийОбъектОбновления
		|	И ВсеИсполнителиДействийЗадач.Основание <> ЗНАЧЕНИЕ(Справочник.ЗамещающиеИПомощники.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи");
	
	Если ТекущийОбъектОбновления <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТекущийОбъектОбновления", ТекущийОбъектОбновления);
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ВсеИсполнителиДействийЗадач.ДействиеЗадачи > &ТекущийОбъектОбновления
			|	И ",
			"");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			// Блокируем действие, чтобы никто не перенаправил задачу, пока обновляем.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ДействиеЗадачи);
			Блокировка.Заблокировать();
			
			// Ошибка проявляется только на тех данных, по которым нет подходящих замещений.
			ПодходящиеЗамещения = ЗамещающиеИПомощники.ПодходящиеЗамещения(Выборка.ДействиеЗадачи);
			Если ПодходящиеЗамещения.Количество() = 0 Тогда
				
				РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Выборка.ДействиеЗадачи,
					"Исполнитель");
				
				// Исправим локально ошибку в данных.
				НаборВсеИсполнители = РегистрыСведений.ВсеИсполнителиДействийЗадач.СоздатьНаборЗаписей();
				НаборВсеИсполнители.Отбор.ДействиеЗадачи.Установить(Выборка.ДействиеЗадачи);
				Если ЗначениеЗаполнено(РеквизитыДействияЗадачи.Исполнитель) Тогда
					Стр = НаборВсеИсполнители.Добавить();
					Стр.ДействиеЗадачи = Выборка.ДействиеЗадачи;
					Стр.Исполнитель = РеквизитыДействияЗадачи.Исполнитель;
				КонецЕсли;
				
				ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(НаборВсеИсполнители);
				
				// Зависимые локальные данные обновим по стандартной логике.
				РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(Выборка.ДействиеЗадачи);
				РегистрыНакопления.КоличествоЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(Выборка.ДействиеЗадачи);
				
			КонецЕсли;
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.ДействиеЗадачи.Метаданные(),
				Выборка.ДействиеЗадачи,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
		Параметры.ТекущийОбъектОбновления = Выборка.ДействиеЗадачи;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_16_4 не удалось обновить некоторые объекты (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Обновляет код в справочнике "КлассификаторЕдиницИзмерения"
Процедура ПерейтиНаВерсию_3_0_16_5() Экспорт
	
	Справочники.КлассификаторЕдиницИзмерения.ЗаполнитьИзМакетаКлассификатора();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_16_6() Экспорт
	
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2025Год(Ложь, Истина);
	
КонецПроцедуры

// Заполнение регистра сведений "Уведомления окном".
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//      ** ТекущийОбъектОбновления - ДокументСсылка.ДействиеЗадачи
//                                 - Неопределено
//
Процедура ПерейтиНаВерсию_3_0_16_7(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ТаблицаОбновления.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Справочник.УведомленияПрограммы КАК ТаблицаОбновления");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Параметры.Свойство("ТекущийОбъектОбновления") Тогда
		Параметры.Вставить("ТекущийОбъектОбновления");
	КонецЕсли;
	ТекущийОбъектОбновления = Параметры.ТекущийОбъектОбновления;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТаблицаОбновления.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УведомленияПрограммы КАК ТаблицаОбновления
		|ГДЕ
		|	ТаблицаОбновления.Ссылка > &ТекущийОбъектОбновления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОбновления.Ссылка");
	
	Если ТекущийОбъектОбновления <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТекущийОбъектОбновления", ТекущийОбъектОбновления);
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ГДЕ
			|	ТаблицаОбновления.Ссылка > &ТекущийОбъектОбновления",
			"");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.УведомленияПрограммы");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ОбъектОбновления = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.УведомленияПрограммы
			ОбъектОбновления.ОбновитьЗависимыеДанные();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
		Параметры.ТекущийОбъектОбновления = Выборка.Ссылка;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_16_7 не удалось обновить некоторые объекты (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_16_8() Экспорт

	Задание = РегламентныеЗадания.НайтиПредопределенное(
		Метаданные.РегламентныеЗадания.ОбновлениеКэширующихДанных);
	Задание.Использование = Истина;
	Задание.Записать();

КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_16_9() Экспорт

	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Справочники.Нумераторы.Штрихкоды);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		ТекущийНомер = НаборЗаписей[0].ТекущийНомер;   
		
		ДокументОбъект = Документы.НомерШтрихкода.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Номер = ТекущийНомер;
		ДокументОбъект.Записать();
		
	КонецЕсли;

КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_16_10() Экспорт

	Задание = РегламентныеЗадания.НайтиПредопределенное(
		Метаданные.РегламентныеЗадания.ОбновлениеКэширующихДанных);
	Задание.Расписание = Новый РасписаниеРегламентногоЗадания;
	Задание.Расписание.ПериодПовтораДней = 1;
	Задание.Расписание.ПериодПовтораВТечениеДня = 10;
	Задание.Записать();

КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_16_11() Экспорт
	
	Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() Тогда
		
		// идет миграция из 21
		Если Константы.ЗагружатьДанныеИз21.Получить() = Истина И Константы.ПереходСтадия.Получить() >= 3 Тогда
			
			Константы.ИспользоватьОтметкиВремени.Установить(Ложь);
			
			Использование = Ложь;
			Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОтметкиВремениОбработка);
			Если Задание.Использование <> Использование Тогда
				Задание.Использование = Использование;
				Задание.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Заполнение константы ИспользоватьLibreOffice
// 
Процедура ЗаполнитьИспользованиеLibreOfficeПодLinux() Экспорт
	
	УстановленLibreOffice = РаботаСФайламиВызовСервера.УстановленLibreOffice();
	Константы.ИспользоватьLibreOffice.Установить(УстановленLibreOffice);
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_3_0_16_12() Экспорт
	
	ЗаполнитьИспользованиеLibreOfficeПодLinux();
	
КонецПроцедуры

// Заполнение реквизита "ПредставлениеОбъекта" РС ОбъектыПоискаВАдреснойКниге
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_16_13(Параметры) Экспорт
	
	РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ЗаполнитьПредставлениеОбъекта(Параметры);
	
КонецПроцедуры

// Заполнение реквизита "ПредставлениеДолжностиПодразделения" РС ОбъектыПоискаВАдреснойКниге
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_16_15(Параметры) Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
			
		Возврат;
	КонецЕсли;
	
	Справочники.Сотрудники.ЗаполнитьПредставленияДолжностиПодразделенияПриОбновлении(Параметры);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_3_0_16_16() Экспорт
	
	Справочники.СостоянияЧатБота.ЗаполнитьСостояниеФункционал(Истина);
	
КонецПроцедуры

// Добавление роли усовершенствования ЭП в делопроизводителей
Процедура ПерейтиНаВерсию_3_0_16_17() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
			
		Возврат;
	КонецЕсли;
	
	// В профиль "Делопроизводители"
	УправлениеДоступомДокументооборот.ДобавитьРольВПолномочия(
		"УсовершенствованиеЭлектронныхПодписей", 
		"eeb325ab-db51-11de-a544-00179ab398dc");
	
КонецПроцедуры

// Обновляет число потоков долгого обновления кэширующих данных.
// 
Процедура ПерейтиНаВерсию_3_0_16_19() Экспорт
	
	Константы.ЧислоПотоковДолгогоОбновленияКэширующихДанных.Установить(2);
	
КонецПроцедуры

// Заполнение регистра сведений "ЗанятыеФайлы".
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_16_21(Параметры) Экспорт
	
	ИмяПроцедуры = "ПерейтиНаВерсию_3_0_16_21";
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(Файлы.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятыеФайлы КАК ЗанятыеФайлы
			|		ПО (ЗанятыеФайлы.Файл = Файлы.Ссылка)
			|ГДЕ
			|	ЗанятыеФайлы.Файл ЕСТЬ NULL
			|	И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|	И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			|	И Файлы.Редактирует <> НЕОПРЕДЕЛЕНО");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	Файлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятыеФайлы КАК ЗанятыеФайлы
			|		ПО (ЗанятыеФайлы.Файл = Файлы.Ссылка)
			|ГДЕ
			|	ЗанятыеФайлы.Файл ЕСТЬ NULL
			|	И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|	И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			|	И Файлы.Редактирует <> НЕОПРЕДЕЛЕНО");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка    
			
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			РегистрыСведений.ЗанятыеФайлы.ОбновитьЗапись(ФайлОбъект,,Истина);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось обновить некоторые объекты (пропущены): %2'"),
			ИмяПроцедуры, ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Заполнение регистра сведений "ФИОФизическихЛиц".
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//      ** ТекущийОбъектОбновления - ДокументСсылка.ДействиеЗадачи
//                                 - Неопределено
//
Процедура ПерейтиНаВерсию_3_0_16_23(Параметры) Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
			
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ФИОФизическихЛиц.ЗаполнитьРегистр(Параметры);
	
КонецПроцедуры

// Заполнение регистра сведений ТекстыВерсийФайлов, где нет записи
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_16_24_НетЗаписиТекстыВерсийФайлов(Параметры) Экспорт
	
	ИмяПроцедуры = "ПерейтиНаВерсию_3_0_16_24_НетЗаписиТекстыВерсийФайлов";
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ВерсииФайлов.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Справочник.ВерсииФайлов КАК ВерсииФайлов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
			|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
			|ГДЕ
			|	ТекстыВерсийФайлов.Версия ЕСТЬ NULL");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВерсииФайлов.Ссылка КАК Ссылка,
		|	ВерсииФайлов.Расширение КАК Расширение
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
		|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
		|ГДЕ
		|	ТекстыВерсийФайлов.Версия ЕСТЬ NULL");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка    
			
			ТекстХранилище = Новый ХранилищеЗначения("");
			ИзвлеченныйТекст = ТекстХранилище;
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка();
			
			РегистрыСведений.ТекстыВерсийФайлов.ДобавитьЗаписьИзвлечения(Выборка.Ссылка, 
				СтатусИзвлеченияТекста, ИзвлеченныйТекст, Выборка.Расширение, ТекстХранилище,, 
				Истина); // ОбновлениеДанных
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось обновить некоторые объекты (пропущены): %2'"),
			ИмяПроцедуры, ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Заполнение регистра сведений ТекстыВерсийФайлов, 
// для версий файлов с Зашифрован Истина и в ТекстыВерсийФайлов не равно ИзвлечьНеУдалось или нет записи
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_16_24_Зашифрован(Параметры) Экспорт
	
	ИмяПроцедуры = "ПерейтиНаВерсию_3_0_16_24_Зашифрован";
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ВерсииФайлов.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Справочник.ВерсииФайлов КАК ВерсииФайлов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
			|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
			|ГДЕ
			|	ВерсииФайлов.Зашифрован = ИСТИНА
			|	И (ТекстыВерсийФайлов.Версия ЕСТЬ NULL
			|			ИЛИ НЕ ТекстыВерсийФайлов.Версия ЕСТЬ NULL
			|				И ТекстыВерсийФайлов.СтатусИзвлеченияТекста <> ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось))");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВерсииФайлов.Ссылка КАК Ссылка,
		|	ВерсииФайлов.Расширение КАК Расширение
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
		|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
		|ГДЕ
		|	ВерсииФайлов.Зашифрован = ИСТИНА
		|	И (ТекстыВерсийФайлов.Версия ЕСТЬ NULL
		|			ИЛИ НЕ ТекстыВерсийФайлов.Версия ЕСТЬ NULL
		|				И ТекстыВерсийФайлов.СтатусИзвлеченияТекста <> ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось))");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка    
			
			ТекстХранилище = Новый ХранилищеЗначения("");
			ИзвлеченныйТекст = ТекстХранилище;
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
			
			РегистрыСведений.ТекстыВерсийФайлов.ДобавитьЗаписьИзвлечения(Выборка.Ссылка, 
				СтатусИзвлеченияТекста, ИзвлеченныйТекст, Выборка.Расширение, ТекстХранилище,, 
				Истина); // ОбновлениеДанных
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось обновить некоторые объекты (пропущены): %2'"),
			ИмяПроцедуры, ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Заполнение регистра сведений ТекстыВерсийФайлов, поле Расширение 
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_16_24_Расширение(Параметры) Экспорт
	
	ИмяПроцедуры = "ПерейтиНаВерсию_3_0_16_24_Расширение";
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(     
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ВерсииФайлов.Ссылка) КАК ВсегоОбъектов
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
		|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
		|ГДЕ
		|	ТекстыВерсийФайлов.Расширение = """"
		|	И ВерсииФайлов.Расширение <> """"");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВерсииФайлов.Ссылка КАК Ссылка,
		|	ВерсииФайлов.Расширение КАК Расширение
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
		|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
		|ГДЕ
		|	ТекстыВерсийФайлов.Расширение = """"
		|	И ВерсииФайлов.Расширение <> """"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка    
			
			РегистрыСведений.ТекстыВерсийФайлов.ДобавитьРасширение(Выборка.Ссылка, Выборка.Расширение, 
				Истина); // ОбновлениеДанных
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось обновить некоторые объекты (пропущены): %2'"),
			ИмяПроцедуры, ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Заполнение регистра сведений ТекстыВерсийФайлов, 
// для версий файлов с непустым ИсточникДанных и в ТекстыВерсийФайлов состояние не равно ИзвлечьНеУдалось или Извлечен
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_16_24_ИсточникДанных(Параметры) Экспорт
	
	ИмяПроцедуры = "ПерейтиНаВерсию_3_0_16_24_ИсточникДанных";
	
	Если Не ОбщегоНазначенияДокументооборотПовтИсп.ИсточникАктивен(
		Справочники.ИсточникиДанных.ДО21) Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ВерсииФайлов.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Справочник.ВерсииФайлов КАК ВерсииФайлов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
			|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
			|ГДЕ
			|	ВерсииФайлов.Владелец.ИсточникДанных <> ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
			|	И НЕ ВерсииФайлов.Владелец.ИсточникДанных ЕСТЬ NULL
			|	И НЕ ТекстыВерсийФайлов.Версия ЕСТЬ NULL
			|	И (ТекстыВерсийФайлов.СтатусИзвлеченияТекста <> ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось)
			|			И ТекстыВерсийФайлов.СтатусИзвлеченияТекста <> ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.Извлечен))");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ВерсииФайлов.Ссылка КАК Ссылка,
			|	ВерсииФайлов.Расширение КАК Расширение
			|ИЗ
			|	Справочник.ВерсииФайлов КАК ВерсииФайлов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
			|		ПО (ТекстыВерсийФайлов.Версия = ВерсииФайлов.Ссылка)
			|ГДЕ
			|	ВерсииФайлов.Владелец.ИсточникДанных <> ЗНАЧЕНИЕ(Справочник.ИсточникиДанных.ПустаяСсылка)
			|	И НЕ ВерсииФайлов.Владелец.ИсточникДанных ЕСТЬ NULL
			|	И НЕ ТекстыВерсийФайлов.Версия ЕСТЬ NULL
			|	И (ТекстыВерсийФайлов.СтатусИзвлеченияТекста <> ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось)
			|			И ТекстыВерсийФайлов.СтатусИзвлеченияТекста <> ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.Извлечен))");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка    
			
			РегистрыСведений.ТекстыВерсийФайлов.ДобавитьСтатусИзвлеченияПоТексту(Выборка.Ссылка, 
				Истина); //ОбновлениеДанных
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось обновить некоторые объекты (пропущены): %2'"),
			ИмяПроцедуры, ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Заполнение представлений фактического исполнителя и ПЭП регистра сведений УчастникиОзнакомлений
//
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_16_25_УчастникиОзнакомлений(Параметры) Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
			
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.УчастникиОзнакомлений.ЗаполнитьНовыеПредставления(Параметры);
	
КонецПроцедуры 

// Заполнение представлений фактического исполнителя и ПЭП регистра сведений СведенияОбУчастникахДействий
//
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_16_25_СведенияОбУчастникахДействий(Параметры) Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
			
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СведенияОбУчастникахДействий.ЗаполнитьНовыеПредставления(Параметры);
	
КонецПроцедуры

// Заполнение даты создания Передачи дел в архив.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура - параметры выполнения обработчика:
//      ** ОбработаноОбъектов - Число - количество обработанных объектов
//      ** ВсегоОбъектов - Число - общее количество объектов для обработки
//   * ОбработкаЗавершена - Булево - признак обработка завершена, объекты обработаны.
//
Процедура ПерейтиНаВерсию_3_0_16_26_ЗаполнитьДатуСозданияСдаточныхОписей(Параметры) Экспорт
	
	ИмяПроцедуры = "ПерейтиНаВерсию_3_0_16_26_ЗаполнитьДатуСозданияСдаточныхОписей";
	РазмерПорции = 1000;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ПередачаДелВАрхив.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Документ.ПередачаДелВАрхив КАК ПередачаДелВАрхив
			|ГДЕ
			|	ПередачаДелВАрхив.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1)
			|	И ПередачаДелВАрхив.Дата <> ДАТАВРЕМЯ(1, 1, 1)");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПередачаДелВАрхив.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПередачаДелВАрхив КАК ПередачаДелВАрхив
		|ГДЕ
		|	ПередачаДелВАрхив.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1)
		|	И ПередачаДелВАрхив.Дата <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПередачаДелВАрхив.Дата УБЫВ");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1000", "ВЫБРАТЬ ПЕРВЫЕ "
		+ Формат(РазмерПорции, "ЧГ=0"));
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПередачаДелВАрхив");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ДатаСоздания = ДокументОбъект.Дата;
			ОбновлениеИнформационнойБазыХолдинг.ЗаписатьОбъект(ДокументОбъект);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось заполнить дату создания в некоторых документах: %2'"),
			ИмяПроцедуры, ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() < РазмерПорции;
	
КонецПроцедуры

// Снимает опцию "Учитывать сумму документа" в видах документов, у которых установлена опция "Является комплектом документов".
// 
Процедура ПерейтиНаВерсию_3_0_16_27() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	ВидыДокументов.УчитыватьСуммуДокумента = ИСТИНА
		|	И ВидыДокументов.ЯвляетсяКомплектомДокументов = ИСТИНА");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ВидДокументаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВидДокументаОбъект.УчитыватьСуммуДокумента = Ложь;
			ВидДокументаОбъект.ВестиУчетПоСтатьямДДС = Ложь;
			ВидДокументаОбъект.ВестиУчетТоваровИУслуг = Ложь;
			ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ВидДокументаОбъект);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляем состояние пунктов протоколов на исполнение по пунктам.
// 
// Параметры:
//  Параметры - Структура:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число
//      ** ВсегоОбъектов - Число
//      ** ТекущийОбъектОбновления - СправочникСсылка.ДействияИсполнения
//                                 - Неопределено
//
Процедура ПерейтиНаВерсию_3_0_16_28(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыДействий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыДействий КАК ВидыДействий
		|ГДЕ
		|	ВидыДействий.ЭтапОбработкиПредмета = &ЭтапОбработкиПредмета
		|	И ВидыДействий.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("ЭтапОбработкиПредмета", Перечисления.ЭтапыОбработкиПредметов.ИсполнитьПротокол);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	ВидыИсполнитьПротокол = ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ОбновляемаяТаблица.Ссылка) КАК КоличествоКОбновлению
			|ИЗ
			|	Справочник.ДействияИсполнения КАК ОбновляемаяТаблица
			|ГДЕ
			|	ОбновляемаяТаблица.УзелОбработки = &ИдентификаторТекущегоУзла
			|	И ОбновляемаяТаблица.ВидДействия В (&ВидыИсполнитьПротокол)
			|	И ОбновляемаяТаблица.ПоПунктам = ИСТИНА
			|	И ОбновляемаяТаблица.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр("ВидыИсполнитьПротокол", ВидыИсполнитьПротокол);
		Запрос.УстановитьПараметр("ИдентификаторТекущегоУзла", КОДПовтИсп.ИдентификаторТекущегоУзла());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КоличествоКОбновлению;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПараметраТекущийОбъектОбновления = "ТекущийОбъектОбновления";
	Если Не Параметры.Свойство(ИмяПараметраТекущийОбъектОбновления) Тогда
		Параметры.Вставить(ИмяПараметраТекущийОбъектОбновления, Неопределено);
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОбновляемаяТаблица.Ссылка КАК ОбъектКОбновлению,
		|	ОбновляемаяТаблица.Предмет КАК Мероприятие
		|ИЗ
		|	Справочник.ДействияИсполнения КАК ОбновляемаяТаблица
		|ГДЕ
		|	ОбновляемаяТаблица.УзелОбработки = &ИдентификаторТекущегоУзла
		|	И ОбновляемаяТаблица.Ссылка > &Ссылка
		|	И ОбновляемаяТаблица.ВидДействия В (&ВидыИсполнитьПротокол)
		|	И ОбновляемаяТаблица.ПоПунктам = ИСТИНА
		|	И ОбновляемаяТаблица.ПометкаУдаления = ЛОЖЬ
		|	И ОбновляемаяТаблица.Предмет ССЫЛКА Справочник.Мероприятия
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбновляемаяТаблица.Ссылка");
	Запрос.УстановитьПараметр("ИдентификаторТекущегоУзла", КОДПовтИсп.ИдентификаторТекущегоУзла());
	Запрос.УстановитьПараметр("ВидыИсполнитьПротокол", ВидыИсполнитьПротокол);
	
	ЧастьУсловия =
		"И ОбновляемаяТаблица.Ссылка > &Ссылка
		|	";
	Если Не СтрНайти(Запрос.Текст, ЧастьУсловия) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось найти часть условия'");
	КонецЕсли;
	
	Если Параметры[ИмяПараметраТекущийОбъектОбновления] <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылка", Параметры[ИмяПараметраТекущийОбъектОбновления]);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЧастьУсловия, "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			УправлениеМероприятиями.УстановитьСостояниеПунктовПротоколаИзДействия(
				Выборка.Мероприятие,
				ТекущаяДатаСеанса(),
				Неопределено,
				Выборка.ОбъектКОбновлению);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.ОбъектКОбновлению.Метаданные(),
				Выборка.ОбъектКОбновлению,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
		Параметры[ИмяПараметраТекущийОбъектОбновления] = Выборка.ОбъектКОбновлению;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_16_28 не удалось обновить некоторые объекты (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Обновляем состояние пунктов протоколов на исполнение по пунктам.
// 
// Параметры:
//  Параметры - Структура:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число
//      ** ВсегоОбъектов - Число
//
Процедура ПерейтиНаВерсию_3_0_16_29(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ПроцессыДействий.Процесс) КАК КоличествоКОбновлению
			|ИЗ
			|	РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Подписание.Участники КАК ПодписаниеУчастники
			|		ПО (ПодписаниеУчастники.Ссылка = ПроцессыДействий.Процесс)
			|		И (ПодписаниеУчастники.ТочкаМаршрута = &ТочкиМаршрутаОбеспечениеПодписания)
			|		И (ПодписаниеУчастники.Участник = НЕОПРЕДЕЛЕНО)
			|		И (ПодписаниеУчастники.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен))
			|ГДЕ
			|	ВЫРАЗИТЬ(ПроцессыДействий.Процесс КАК БизнесПроцесс.Подписание).УзелОбработки = &УзелОбработки");
		
		Запрос.УстановитьПараметр("ТочкиМаршрутаОбеспечениеПодписания",
			БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание);
		Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КоличествоКОбновлению;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПроцессыДействий.Процесс КАК Процесс,
		|	ПроцессыДействий.Действие КАК Действие,
		|	ПроцессыДействий.Действие.Предмет КАК Предмет
		|ИЗ
		|	РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Подписание.Участники КАК ПодписаниеУчастники
		|		ПО (ПодписаниеУчастники.Ссылка = ПроцессыДействий.Процесс)
		|		И (ПодписаниеУчастники.ТочкаМаршрута = &ТочкиМаршрутаОбеспечениеПодписания)
		|		И (ПодписаниеУчастники.Участник = НЕОПРЕДЕЛЕНО)
		|		И (ПодписаниеУчастники.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен))
		|ГДЕ
		|	ВЫРАЗИТЬ(ПроцессыДействий.Процесс КАК БизнесПроцесс.Подписание).УзелОбработки = &УзелОбработки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Процесс");
	
	Запрос.УстановитьПараметр("ТочкиМаршрутаОбеспечениеПодписания",
		БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание);
	Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Действие);
			ЗаблокироватьДанныеДляРедактирования(Выборка.Процесс);
			ЗаблокироватьДанныеДляРедактирования(Выборка.Предмет);
			
			ДействиеОбъект = Выборка.Действие.ПолучитьОбъект();
			ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
			ПредметОбъект = Выборка.Предмет.ПолучитьОбъект();
			
			СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Выборка.Процесс);
			
			Для каждого СтрокаУчастник Из ДействиеОбъект.Участники Цикл
				Если СтрокаУчастник.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание
					И ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
					
					ДанныеРазыменованияОбеспечивающегоПодписание = ДействияСервер.РазыменоватьАвтоподстановку(
						СтрокаУчастник.Участник,
						ПредметОбъект,
						СтрокаУчастник.ФункцияУчастника,
						Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат,
						Ложь,
						Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание);
					
					Если ДанныеРазыменованияОбеспечивающегоПодписание.Количество() Тогда
						СтрокаУчастник.Участник = ДанныеРазыменованияОбеспечивающегоПодписание[0];
						СтрокаУчастникПроцесса = ПроцессОбъект.Участники.Найти(СтрокаУчастник.ВышестоящийУчастник,
							"Идентификатор");
						Если СтрокаУчастникПроцесса <> Неопределено Тогда
							СтрокаУчастникПроцесса.Участник = СтрокаУчастник.Участник;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДействиеОбъект);
			
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроцессОбъект);
			ПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(
				СтарыеУчастникиПроцесса, Новый Структура("ОбновитьПовторно", Истина));
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(ПроцессОбъект.Ссылка);
			
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Действие.Метаданные(),
				Выборка.Действие,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_16_29 не удалось обновить некоторые объекты (пропущены): %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Изменились РЛС в части шаблонов документов, обновление прав для них.
Процедура ПерейтиНаВерсию_3_0_16_30() Экспорт
	
	РегистрыСведений.ПраваРолей.ОбновитьДанныеРегистра();
	
	// Пересчитать права для всех шаблонов:
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка Как Шаблон
		|ИЗ
		|	Справочник.ШаблоныДокументов КАК Т
		|ГДЕ
		|	НЕ Т.ПометкаУдаления
		|	И НЕ Т.ЭтоГруппа");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ШаблонОбъект = Выборка.Шаблон.ПолучитьОбъект();
			ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(ШаблонОбъект);
		Исключение
			СтекОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить права доступа для шаблона %1 по причине:
					|%2'"),
				Выборка.Шаблон,
				СтекОшибки); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Шаблон.Метаданные(),
				Выборка.Шаблон,
				ТекстСообщения);
			// но не считаем критичным, остальные пусть записываются дальше.
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет справочник НаборыСостоянийЗадач, порядок состояний для задачи "Обработать резолюцию".
Процедура ПерейтиНаВерсию_3_0_16_31() Экспорт
	
	ЭтоПервоначальноеЗаполнение = Ложь;
	РаботаСЗадачами.ЗаполнитьПоставляемыеДанные(ЭтоПервоначальноеЗаполнение);
	
КонецПроцедуры

// Заполняет справочник СтавкиНДС
//
Процедура ПерейтиНаВерсию_3_0_16_32() Экспорт
	
	Справочники.СтавкиНДС.СоздатьЭлементыПервоначальногоЗаполнения();
	
КонецПроцедуры

// Перенос данных из перечисления в справочник для колонки СтавкаНДС в таблице Товары и услуги.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_16_33_Документы(Параметры) Экспорт
	
	ИмяПроцедуры = "ПерейтиНаВерсию_3_0_16_33_Документы";
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДанныеДокументовПредприятия.Документ) КАК ВсегоОбъектов
			|ИЗ
			|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
			|		ПО ДанныеДокументовПредприятия.ВидДокумента = ВидыДокументов.Ссылка
			|		И ВидыДокументов.ВестиУчетТоваровИУслуг");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000 РАЗЛИЧНЫЕ
		|	ДанныеДокументовПредприятия.Документ,
		|	ДанныеДокументовПредприятия.ДатаСортировки
		|ИЗ
		|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО ДанныеДокументовПредприятия.ВидДокумента = ВидыДокументов.Ссылка
		|		И ВидыДокументов.ВестиУчетТоваровИУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия.Товары КАК ДокументыПредприятияТовары
		|		ПО ДанныеДокументовПредприятия.Документ = ДокументыПредприятияТовары.Ссылка
		|ГДЕ
		|	ДокументыПредприятияТовары.УдалитьСтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.УдалитьСтавкиНДС.ПустаяСсылка)
		|	И ДокументыПредприятияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСортировки УБЫВ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
			Для Каждого Товар Из ДокументОбъект.Товары Цикл
				Товар.СтавкаНДС = УчетНДС.СтавкаНДСИзПеречисления(Товар.УдалитьСтавкаНДС);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Документ.Метаданные(),
				Выборка.Документ,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось обновить некоторые объекты (пропущены): %2'"),
			ИмяПроцедуры, ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

// Перенос данных из перечисления в справочник для реквизита СтавкаНДС в справочнике Номенклатура.
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ПерейтиНаВерсию_3_0_16_33_Номенклатура(Параметры) Экспорт
	
	ИмяПроцедуры = "ПерейтиНаВерсию_3_0_16_33_Номенклатура";
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(Номенклатура.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.УдалитьСтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.УдалитьСтавкиНДС.ПустаяСсылка)
			|	И Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.УдалитьСтавкаНДС
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.УдалитьСтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.УдалитьСтавкиНДС.ПустаяСсылка)
		|	И Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			НоменклатураОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НоменклатураОбъект.СтавкаНДС = УчетНДС.СтавкаНДСИзПеречисления(Выборка.УдалитьСтавкаНДС);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоменклатураОбъект);
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре %1 не удалось обновить некоторые объекты (пропущены): %2'"),
			ИмяПроцедуры, ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры

#КонецОбласти
