#Область ПрограммныйИнтерфейс

// Обработчик регламентного задания "Обмен с Архивом".
//
Процедура ВыполнитьОбмен() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбменСАрхивом);
		
	МиграцияДанныхИзВнешнихСистемСервер.ПриНачалеРаботыРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбменСАрхивом);
	
	КаталогОбмена = КаталогОбмена();
	Если Не ЗначениеЗаполнено(КаталогОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузки = КаталогВыгрузкиВАрхив(КаталогОбмена);
	Если Не ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанные(КаталогОбмена);
	ВыгрузитьДанные(КаталогВыгрузки);
	
КонецПроцедуры

// Возвращает список доступных для текущей конфигурации версий формата обмена.
//
// Возвращаемое значение:
//  СписокЗначений из Строка - список форматов.
//   Значение - пространство имен XDTO-пакета поддерживаемой версии,
//   Представление - пользовательское представление версии.
//
Функция ВерсииФорматаДоступные() Экспорт
	
	СписокВерсий = Новый СписокЗначений;
	
	НестандартныеПредставления = Новый Соответствие;
	НестандартныеПредставления[Метаданные.ПакетыXDTO.АДХ_1_0_3] = "1.0.6";
	
	МинимальнаяВерсия = ВерсияФорматаМинимальная();
	МинимальнаяВерсияПройдена = Ложь;
	Для Каждого Пакет Из Метаданные.ПакетыXDTO Цикл
		Если Пакет.ПространствоИмен = МинимальнаяВерсия Тогда
			МинимальнаяВерсияПройдена = Истина;
		КонецЕсли;
		Если Не МинимальнаяВерсияПройдена Тогда
			Продолжить;
		КонецЕсли;
		Если Не СтрНачинаетсяС(Пакет.Имя, "АДХ_") Тогда
			Прервать;
		КонецЕсли;
		ПространствоИмен = Пакет.ПространствоИмен;
		ПредставлениеВерсии = НестандартныеПредставления[Пакет];
		Если ПредставлениеВерсии = Неопределено Тогда
			ПредставлениеВерсии = ПредставлениеВерсииФормата(ПространствоИмен);
		КонецЕсли;
		СписокВерсий.Добавить(ПространствоИмен, ПредставлениеВерсии);
	КонецЦикла;
	
	Возврат СписокВерсий;
	
КонецФункции

// Возвращает пространство имен актуального пакета XDTO.
// 
// Возвращаемое значение:
//  Строка - версия формата (пространство имен XDTO-пакета).
// 
Функция ВерсияФорматаДляОтправкиСообщений() Экспорт
	
	ВерсияДляОтправки = ВерсияФорматаБазыАрхива();
	ВерсияМаксимальная = ВерсияФорматаМаксимальная();
	
	Если СравнитьВерсииФормата(ВерсияДляОтправки, ВерсияМаксимальная) > 0 Тогда
		ВерсияДляОтправки = ВерсияМаксимальная;
	КонецЕсли;
	
	Возврат ВерсияДляОтправки;
	
КонецФункции

// Возвращает версию формата, поддерживаемую 1С:Архивом. Если не заполнена, выдается исключение.
// 
// Параметры:
//  ВызыватьИсключение - Булево - Если Истина и константа не заполнена, то будет вызвано исключение.
// 
// Возвращаемое значение:
//  Строка - версия формата (пространство имен XDTO-пакета).
// 
Функция ВерсияФорматаБазыАрхива(ВызыватьИсключение = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Версия = Константы.ВерсияФорматаОбменаПоддерживаемая1САрхивом.Получить();
	Если ВызыватьИсключение И Не ЗначениеЗаполнено(Версия) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнено значение настройки ""%1"". Обратитесь к администратору.
			|
			|Контроль версий осуществляется автоматически, но что-то пошло не так. Пожалуйста, обратитесь в поддержку. Для обхода проблемы можно указать версию, которую поддерживает ваша база 1С:Архива, вручную. См. ""Настройка программы - Интеграция с 1С:Архивом - Версия формата"".'"),
			Метаданные.Константы.ВерсияФорматаОбменаПоддерживаемая1САрхивом.Синоним);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

// Формирует сообщения для 1С:Архива о поддерживаемой версии формата файлов обмена.
//
Процедура СформироватьСообщениеОВерсииФормата() Экспорт
	
	ВерсияФормата = ВерсияФорматаМаксимальная();
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Новый Структура(ИмяСвойстваВерсияФормата(), ВерсияФормата));
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	НачатьТранзакцию();
	Попытка
		РегистрыСведений.СообщенияДляАрхива.Добавить(ИмяСвойстваВерсияФормата(), СтрокаJSON);
		ЛогированиеОперацийОбменаСАрхивом(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			СтрШаблон(НСтр("ru = 'Формирование сообщения о версии формата (%1)'"), ВерсияФормата),,
			Пользователи.ТекущийПользователь());
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось сформировать сообщение с версией формата по причине:
			|
			|%1'"), ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Сравнивает две строки версий формата.
//
// Параметры:
//  ВерсияФормата1 - Строка - формат в виде пространства имен (например, "http://v8.1c.ru/doc8/LTA/1.0.8").
//  ВерсияФормата2 - Строка - формат в виде пространства имен.
//
// Возвращаемое значение:
//   Число   - больше 0, если ВерсияФормата1 > ВерсияФормата2; 0, если версии равны.
//
Функция СравнитьВерсииФормата(ВерсияФормата1, ВерсияФормата2) Экспорт
	
	ПредставлениеВерсии1 = ПредставлениеВерсииФормата(ВерсияФормата1) + ".0";
	ПредставлениеВерсии2 = ПредставлениеВерсииФормата(ВерсияФормата2) + ".0";
	
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПредставлениеВерсии1, ПредставлениеВерсии2);
	
КонецФункции

// Пользовательское представление версии формата.
//
// Параметры:
//  Версия - Строка - формат в виде пространства имен (например, "http://v8.1c.ru/doc8/LTA/1.0.8").
//
// Возвращаемое значение:
//   Строка - представление версии для пользовательского интерфейса.
//
Функция ПредставлениеВерсииФормата(Версия) Экспорт
	
	ПредставлениеВерсии = Версия;
	ЧастиПространстваИмен = СтрРазделить(Версия, "/");
	Если ЧастиПространстваИмен.Количество() > 1 Тогда
		ПредставлениеВерсии = ЧастиПространстваИмен[ЧастиПространстваИмен.Количество() - 1];
	КонецЕсли;
	
	Возврат ПредставлениеВерсии;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ТипыXDTOПоТипамЗначений() Экспорт
	
	ИменаТиповXDTO = Новый Соответствие;
	ИменаТиповXDTO[Тип("СправочникСсылка.ВидыДокументов")]         = "DocumentType";
	ИменаТиповXDTO[Тип("СправочникСсылка.Организации")]            = "Organization";
	ИменаТиповXDTO[Тип("СправочникСсылка.СтруктураПредприятия")]   = "Department";
	ИменаТиповXDTO[Тип("СправочникСсылка.Должности")]              = "Title";
	ИменаТиповXDTO[Тип("СправочникСсылка.ФизическиеЛица")]         = "Individual";
	ИменаТиповXDTO[Тип("СправочникСсылка.Сотрудники")]             = "Employee";
	ИменаТиповXDTO[Тип("СправочникСсылка.ГрифыДоступа")]           = "SecurityLevel";
	ИменаТиповXDTO[Тип("СправочникСсылка.Контрагенты")]            = "Counterparty";
	ИменаТиповXDTO[Тип("СправочникСсылка.Проекты")]                = "Project";
	ИменаТиповXDTO[Тип("СправочникСсылка.РазделыНоменклатурыДел")] = "CaseFilesListSection";
	ИменаТиповXDTO[Тип("СправочникСсылка.НоменклатураДел")]        = "CaseFilesCatalog";
	ИменаТиповXDTO[Тип("СправочникСсылка.ДелаХраненияДокументов")] = "Dossier";
	
	ИменаТиповXDTO[Тип("СправочникСсылка.ДокументыПредприятия")] = "Document";
	ИменаТиповXDTO[Тип("СправочникСсылка.Валюты")] = "Currency";
	
	ИменаТиповXDTO[Тип("Строка")] = "String";
	ИменаТиповXDTO[Тип("Число")]  = "Numeric";
	ИменаТиповXDTO[Тип("Булево")] = "Boolean";
	ИменаТиповXDTO[Тип("Дата")]   = "Date";
	
	Возврат ИменаТиповXDTO;
	
КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обмен с 1С:Архивом'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Процедура УдалитьВременныеФайлы(ВременнаяПапка) Экспорт
	
	Попытка
		УдалитьФайлы(ВременнаяПапка);
	Исключение
		ЛогированиеОперацийОбменаСАрхивом(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает структуру описания МЧД для последующей выгрузки в 1С:Архив.
//
// Возвращаемое значение:
//  Структура:
//   * Тип - Строка - значение из перечисления WarrantType пакета XDTO.
//      "EMCHD" для формата 003, "ON_DOVBB" для предыдущих форматов.
//   * НомерДоверенности - Строка - номер доверенности.
//   * ЕстьВРеестреФНС - Булево - Истина, если доверенность помещена в реестр ФНС.
//   * ИННДоверителя - Строка - ИНН доверителя.
//   * ИмяФайлаМЧД - Строка - локальное имя файла доверенности в папке ВременнаяПапка.
//       Обязательно для нереестровых доверенностей.
//   * ИмяФайлаПодписиМЧД - Строка - локальное имя файла подписи доверенности в папке ВременнаяПапка.
//       Обязательно для нереестровых доверенностей.
//   * Комментарий - Строка - произвольный комментарий.
// 
// Если выгрузка элемента не требуется, возвращается Неопределено.
//
Функция НовоеОписаниеМЧД() Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("Тип", "");
	Описание.Вставить("НомерДоверенности", "");
	Описание.Вставить("ЕстьВРеестреФНС", Ложь);
	Описание.Вставить("ИННДоверителя", "");
	Описание.Вставить("ИмяФайлаМЧД", "");
	Описание.Вставить("ИмяФайлаПодписиМЧД", "");
	Описание.Вставить("Комментарий", "");
	
	Возврат Описание;
	
КонецФункции
	
#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// см. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий()
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменСАрхивом;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИнтеграцияС1САрхивом;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КаталогОбмена()
	
	УстановитьПривилегированныйРежим(Истина);
	
	КаталогОбмена = Константы.КаталогИнтеграцииСАрхивом.Получить();
	
	Если Не ЗначениеЗаполнено(КаталогОбмена) Тогда
		ЛогированиеОперацийОбменаСАрхивом(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'Не указан каталог в константе ""Каталог интеграции с 1С:Архивом"".'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлКаталога = Новый Файл(КаталогОбмена);
	Если Не ФайлКаталога.Существует() Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Неверный путь к каталогу обмена: ""%1""'"), КаталогОбмена);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	РазделительПути = ПолучитьРазделительПути();
	КаталогОбмена = КаталогОбмена + ?(Прав(КаталогОбмена, 1) = РазделительПути, "", РазделительПути);
	
	Возврат КаталогОбмена;
	
КонецФункции

Функция КаталогВыгрузкиВАрхив(Знач КаталогОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(КаталогОбмена) Тогда
		КаталогОбмена = КаталогОбмена();
		Если Не ЗначениеЗаполнено(КаталогОбмена) Тогда
			ВызватьИсключение НСтр("ru = 'Не указан каталог в константе ""Каталог интеграции с 1С:Архивом"".'");
		КонецЕсли; 
	КонецЕсли;
	
	КодДляОбменаСАрхивом = СокрЛП(Константы.КодДляОбменаСАрхивом.Получить());
	Если Не ЗначениеЗаполнено(КодДляОбменаСАрхивом) Тогда
		ЛогированиеОперацийОбменаСАрхивом(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'Не указан код в константе ""Код для обмена с 1С:Архивом"".'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПапкиВыгрузки = КаталогОбмена + КодДляОбменаСАрхивом
		+ "_to_Archive" + ПолучитьРазделительПути();
	СоздатьКаталог(ИмяПапкиВыгрузки);
	
	Возврат ИмяПапкиВыгрузки;
	
КонецФункции

Процедура ВыгрузитьДанные(КаталогВыгрузки)
	
	ОтправитьСообщенияОВерсииФормата(КаталогВыгрузки);
	
	Если Не ЗначениеЗаполнено(ВерсияФорматаБазыАрхива(Ложь)) Тогда
		Возврат; // Нет информации, в каком формате выгружать данные. Ожидается сообщение с форматом от 1С:Архива.
	КонецЕсли;
	
	СформироватьСообщенияНСИ();
	ОтправитьСообщенияНСИ(КаталогВыгрузки);
	ОтправитьМЧД(КаталогВыгрузки);
	ОбменСАрхивомПереопределяемый.ПослеВыгрузкиДанных(КаталогВыгрузки);
	
КонецПроцедуры

Процедура ЗагрузитьДанные(КаталогОбмена)
	
	РазделительПути = ПолучитьРазделительПути(); 
	ИмяПапкиЗагрузки = КаталогОбмена + ?(Прав(КаталогОбмена, 1) = РазделительПути, "", РазделительПути);
	
	ПодпапкаЗагрузки = ИмяПапкиЗагрузки + "Archive_to_" +
		СокрЛП(Константы.КодДляОбменаСАрхивом.Получить()) + ПолучитьРазделительПути();
	СоздатьКаталог(ПодпапкаЗагрузки);
	
	НайденныеФайлы = НайтиФайлы(ПодпапкаЗагрузки, ПолучитьМаскуВсеФайлы());
	Если Не НайденныеФайлы.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ВременныйКаталогФайлов = "";
	ПодпапкаОбработанныхФайлов = ПодпапкаЗагрузки + "Executed" + ПолучитьРазделительПути();
	ПодпапкаФайловСОшибкой = ПодпапкаЗагрузки + "Errors" + ПолучитьРазделительПути();
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Файл");
	ТаблицаФайлов.Колонки.Добавить("Порядок");
	Для Каждого ВходящийФайл Из НайденныеФайлы Цикл
		Если ВходящийФайл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		Стр = ТаблицаФайлов.Добавить();
		Стр.Файл = ВходящийФайл;
		Стр.Порядок = ВходящийФайл.ИмяБезРасширения;
	КонецЦикла;
	ТаблицаФайлов.Сортировать("Порядок");
	
	Для Каждого СтрокаФайла Из ТаблицаФайлов Цикл
		
		ВходящийФайл = СтрокаФайла.Файл;
		
		Попытка
			
			Если ВходящийФайл.Расширение = ".zip" Тогда
				
				ВременныйКаталогФайлов = ИзвлечьФайлыИзАрхива(ВходящийФайл.ПолноеИмя);
				ФайлыОписанияОтчета = НайтиФайлы(ВременныйКаталогФайлов, "Report.xml", Истина);
				ФайлыОписанияДокументаУничтожениеДел = НайтиФайлы(ВременныйКаталогФайлов, "DossiersDestruction.xml", Истина);
				Если ФайлыОписанияОтчета.Количество() Тогда
					ЗагрузитьОтчет(ВходящийФайл, ФайлыОписанияОтчета[0], ВременныйКаталогФайлов, ПодпапкаЗагрузки);
				ИначеЕсли ФайлыОписанияДокументаУничтожениеДел.Количество() Тогда
					ЗагрузитьДокументУничтожениеДел(ВходящийФайл, ФайлыОписанияДокументаУничтожениеДел[0],
						ВременныйКаталогФайлов);
				КонецЕсли;
				УдалитьФайлы(ВременныйКаталогФайлов);
				
			ИначеЕсли ВходящийФайл.Расширение = ".json" Тогда
				
				СообщениеXDTO = ПрочитатьОбъектXDTOИзФайла(ВходящийФайл.ПолноеИмя);
				СвойстваXDTO = СообщениеXDTO.Свойства();
				Если СвойстваXDTO.Количество() = 1 И СвойстваXDTO.Получить(ИмяСвойстваВерсияФормата()) <> Неопределено Тогда
					// Версия формата.
					ВерсияФормата = СообщениеXDTO.FormatVersion;
					Константы.ВерсияФорматаОбменаПоддерживаемая1САрхивом.Установить(ВерсияФормата);
					ЛогированиеОперацийОбменаСАрхивом(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
						СтрШаблон(НСтр("ru = 'Загрузка информации о версии формата (%1)'"), ВерсияФормата),,
						Пользователи.ТекущийПользователь());
					// Ответное сообщение о версии формата.
					СформироватьСообщениеОВерсииФормата();
				КонецЕсли;
				
			КонецЕсли;
			
			СоздатьКаталог(ПодпапкаОбработанныхФайлов);
			ПереместитьФайл(ВходящийФайл.ПолноеИмя, ПодпапкаОбработанныхФайлов + ВходящийФайл.Имя);
			
		Исключение
			
			Если ЗначениеЗаполнено(ВременныйКаталогФайлов) Тогда
				УдалитьФайлы(ВременныйКаталогФайлов);
			КонецЕсли;
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при обработке файла %1: %2'"),
				ВходящийФайл.ПолноеИмя, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЛогированиеОперацийОбменаСАрхивом(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,, ТекстСообщения);
			СоздатьКаталог(ПодпапкаФайловСОшибкой);
			ПереместитьФайл(ВходящийФайл.ПолноеИмя, ПодпапкаФайловСОшибкой + ВходящийФайл.Имя);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСообщенияНСИ()
	
	КодИсточника = СокрЛП(Константы.КодДляОбменаСАрхивом.Получить());
	ПространствоИменСхемы = ВерсияФорматаДляОтправкиСообщений();
	
	УзелАрхив = ПланыОбмена.ОбменНСИСАрхивом.УзелАрхив();
	ОбъектыДляВыгрузки = ПорцияНСИДляВыгрузки();
	ОбъектыСОшибками = Новый Массив;
	
	Пока ОбъектыДляВыгрузки.Количество() > 0 Цикл
		
		Для Каждого ОбъектДляВыгрузки Из ОбъектыДляВыгрузки Цикл
			
			НачатьТранзакцию();
			Попытка
				
				Если Не ОбщегоНазначения.СсылкаСуществует(ОбъектДляВыгрузки) Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(УзелАрхив, ОбъектДляВыгрузки);
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ОбъектНСИXDTO = ОбменСАрхивомПереопределяемый.ЗаполнитьXDTOОбъектНСИ(ОбъектДляВыгрузки);
				
				СообщениеXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменСхемы, "Message"));
				СообщениеXDTO.ID = Строка(Новый УникальныйИдентификатор);
				СообщениеXDTO.Date = ТекущаяДатаСеанса();
				СообщениеXDTO.SourceID = КодИсточника;
				СообщениеXDTO.Object.Добавить(ОбъектНСИXDTO);
				
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
				ФабрикаXDTO.ЗаписатьJSON(ЗаписьJSON, СообщениеXDTO, НазначениеТипаXML.Явное);
				СтрокаJSON = ЗаписьJSON.Закрыть();
				
				РегистрыСведений.СообщенияДляАрхива.Добавить(СообщениеXDTO.ID, СтрокаJSON);
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелАрхив, ОбъектДляВыгрузки);
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ОбъектыСОшибками.Добавить(ОбъектДляВыгрузки);
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось выгрузить элемент НСИ %1 по причине:
					|%2'"), ПолучитьНавигационнуюСсылку(ОбъектДляВыгрузки),
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЛогированиеОперацийОбменаСАрхивом(СобытиеЖурналаРегистрацииВыгрузкаНСИ(),
					УровеньЖурналаРегистрации.Ошибка, НСтр("ru = 'Ошибка выгрузки НСИ'"),
					ТекстОшибки, ОбъектДляВыгрузки);
			КонецПопытки;
			
		КонецЦикла;
		
		ОбъектыДляВыгрузки = ПорцияНСИДляВыгрузки(ОбъектыСОшибками);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьСообщенияОВерсииФормата(КаталогВыгрузки)
	
	ОтправитьСообщения(КаталогВыгрузки, "ВерсияФормата");
	
КонецПроцедуры

Процедура ОтправитьСообщенияНСИ(КаталогВыгрузки)
	
	ОтправитьСообщения(КаталогВыгрузки);
	
КонецПроцедуры

Процедура ОтправитьСообщения(КаталогВыгрузки, ТипСообщений = Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 5000
		|	СообщенияДляАрхива.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	СообщенияДляАрхива.ТелоСообщения КАК ТелоСообщения,
		|	СообщенияДляАрхива.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	РегистрСведений.СообщенияДляАрхива КАК СообщенияДляАрхива
		|ГДЕ
		|	СообщенияДляАрхива.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
		|	И СообщенияДляАрхива.КоличествоПопытокОбработки <= &ЛимитКолПопыток
		|	И ИСТИНА
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания");
	Запрос.УстановитьПараметр("ЛимитКолПопыток", 3);
	
	Если ТипСообщений = "ВерсияФормата" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И ИСТИНА", "И СообщенияДляАрхива.ИдентификаторСообщения = &ИмяСвойстваВерсияФормата");
		Запрос.УстановитьПараметр("ИмяСвойстваВерсияФормата", ИмяСвойстваВерсияФормата());
	ИначеЕсли ТипСообщений <> Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Неизвестный тип сообщений: %1'"), ТипСообщений);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ОтметкаВремениПредыдущая = "";
	ДополнениеКОтметке = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			
			ОтметкаВремениТекущая = ТекущаяОтметкаВремени();
			ИмяФайлаБезРасширения = ОтметкаВремениТекущая;
			Если ОтметкаВремениТекущая = ОтметкаВремениПредыдущая Тогда
				ДополнениеКОтметке = ДополнениеКОтметке + 1;
				ИмяФайлаБезРасширения = ОтметкаВремениТекущая + "_" + ДополнениеКОтметке;
			Иначе
				ОтметкаВремениПредыдущая = ОтметкаВремениТекущая;
				ДополнениеКОтметке = 0;
			КонецЕсли;
			ИмяФайла = КаталогВыгрузки + ИмяФайлаБезРасширения + ".json";
			
			ТекстСобщения = Выборка.ТелоСообщения.Получить();
			ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
			ЗаписьТекста.Записать(ТекстСобщения);
			ЗаписьТекста.Закрыть();
			РегистрыСведений.СообщенияДляАрхива.ОтметитьОтправку(Выборка.ИдентификаторСообщения);
			
			Если Выборка.ИдентификаторСообщения = ИмяСвойстваВерсияФормата() Тогда
				ЛогированиеОперацийОбменаСАрхивом(СобытиеЖурналаРегистрацииОтправкаСообщений(),
					УровеньЖурналаРегистрации.Информация,
					НСтр("ru = 'Отправка информации о версии формата'"),,
					Пользователи.ТекущийПользователь());
			КонецЕсли;
			
		Исключение
			ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ПолныйТекстОшибки = СтрШаблон(НСтр("ru = 'Обнаружены ошибки при отправке сообщения %1:
				|%2'"),
				Выборка.ИдентификаторСообщения, ТекстОшибки);
			РегистрыСведений.СообщенияДляАрхива.ЗафиксироватьНеудачнуюПопытку(
				Выборка.ИдентификаторСообщения, ТекстОшибки);
			ЛогированиеОперацийОбменаСАрхивом(СобытиеЖурналаРегистрацииОтправкаСообщений(),
				УровеньЖурналаРегистрации.Ошибка, НСтр("ru = 'Ошибка отправки сообщения'"),
				ПолныйТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьМЧД(КаталогВыгрузки)
	
	УзелАрхив = ПланыОбмена.ОбменНСИСАрхивом.УзелАрхив();
	МетаданныеМЧД = МетаданныеМЧД();
	ОбъектыСОшибками = Новый Массив;
	
	ОбъектыДляВыгрузки = ПорцияИзмененныхДанныхДляВыгрузки(МетаданныеМЧД);
	Пока ОбъектыДляВыгрузки.Количество() > 0 Цикл
		
		Для Каждого МЧДСсылка Из ОбъектыДляВыгрузки Цикл
			
			НачатьТранзакцию();
			Попытка
				ВыгрузитьДоверенность(МЧДСсылка, КаталогВыгрузки);
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелАрхив, МЧДСсылка);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОбъектыСОшибками.Добавить(МЧДСсылка);
				ЛогированиеОперацийОбменаСАрхивом(СобытиеЖурналаРегистрацииВыгрузкаМЧД(),
					УровеньЖурналаРегистрации.Ошибка, НСтр("ru = 'Ошибка выгрузки МЧД'"),
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), МЧДСсылка);
			КонецПопытки;
			
		КонецЦикла;
		
		ОбъектыДляВыгрузки = ПорцияИзмененныхДанныхДляВыгрузки(МетаданныеМЧД, ОбъектыСОшибками);
		
	КонецЦикла;
	
КонецПроцедуры

Функция МетаданныеМЧД()
	
	МетаданныеМЧД = Новый Массив;
	Для Каждого ТипМЧД Из Метаданные.ОпределяемыеТипы.МашиночитаемаяДоверенность.Тип.Типы() Цикл
		МетаданныеМЧД.Добавить(Метаданные.НайтиПоТипу(ТипМЧД));
	КонецЦикла;
	
	Возврат МетаданныеМЧД;
	
КонецФункции

Функция ПорцияНСИДляВыгрузки(ОбъектыСОшибками = Неопределено)
	
	МетаданныеНСИ = Новый Массив;
	МетаданныеМЧД = МетаданныеМЧД();
	Для Каждого ЭлементСостава Из Метаданные.ПланыОбмена.ОбменНСИСАрхивом.Состав Цикл
		// Все типы из плана обмена, кроме МЧД.
		Если МетаданныеМЧД.Найти(ЭлементСостава.Метаданные) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МетаданныеНСИ.Добавить(ЭлементСостава.Метаданные);
	КонецЦикла;
	
	Возврат ПорцияИзмененныхДанныхДляВыгрузки(МетаданныеНСИ, ОбъектыСОшибками);
	
КонецФункции

Функция ПорцияИзмененныхДанныхДляВыгрузки(ОбъектыМетаданных, ОбъектыСОшибками = Неопределено)

	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТаблицаИзменений.Ссылка КАК Ссылка
		|ИЗ
		|	#ТаблицаИзменений КАК ТаблицаИзменений
		|ГДЕ
		|	ТаблицаИзменений.Узел = &УзелАрхив
		|	И НЕ ТаблицаИзменений.Ссылка В (&ОбъектыСОшибками)";
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		ИмяТаблицыИзменений = СтрШаблон("%1.Изменения", ОбъектМетаданных.ПолноеИмя());
		Запрос = Новый Запрос(СтрЗаменить(ШаблонТекстаЗапроса, "#ТаблицаИзменений", ИмяТаблицыИзменений));
		Запрос.УстановитьПараметр("УзелАрхив", ПланыОбмена.ОбменНСИСАрхивом.УзелАрхив());
		Запрос.УстановитьПараметр("ОбъектыСОшибками", ОбъектыСОшибками);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Возврат Результат.Выгрузить().ВыгрузитьКолонку(0);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Массив;
	
КонецФункции

// Выгружает МЧД в каталог для отправки в 1С:Архив.
// 
// Параметры:
//  МЧДСсылка - СправочникСсылка - ссылка на МЧД.
//  КаталогВыгрузки - Строка - полный путь к каталогу, в который нужно поместить файл.
//
Процедура ВыгрузитьДоверенность(МЧДСсылка, КаталогВыгрузки)
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
	СоздатьКаталог(ВременнаяПапка);
	
	ДанныеМЧД = ДанныеМЧДДляВыгрузки(МЧДСсылка, ВременнаяПапка);
	Если ДанныеМЧД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбязательныеДанные = Новый Массив;
	ОбязательныеДанные.Добавить("Тип");
	ОбязательныеДанные.Добавить("НомерДоверенности");
	НезаполненныеОбязательныеДанные = Новый Массив;
	Если ДанныеМЧД.ЕстьВРеестреФНС Тогда
		ОбязательныеДанные.Добавить("ИННДоверителя");
	Иначе
		ОбязательныеДанные.Добавить("ИмяФайлаМЧД");
		ОбязательныеДанные.Добавить("ИмяФайлаПодписиМЧД");
	КонецЕсли;
	Для Каждого ИмяОбязательногоСвойства Из ОбязательныеДанные Цикл
		Если Не ЗначениеЗаполнено(ДанныеМЧД[ИмяОбязательногоСвойства]) Тогда
			НезаполненныеОбязательныеДанные.Добавить(ИмяОбязательногоСвойства);
		КонецЕсли;
	КонецЦикла;
	Если НезаполненныеОбязательныеДанные.Количество() > 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не заполнены обязательные данные доверенности: %1'"),
			СтрСоединить(НезаполненныеОбязательныеДанные, ","));
	КонецЕсли;
	
	ИмяФайлаОписанияМЧД = ВременнаяПапка + "Warrant.xml";
	ИмяZipФайлаВыгрузки = ВременнаяПапка + ОбменСАрхивом.ТекущаяОтметкаВремени() + ".zip";
	ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяZipФайлаВыгрузки);

	ПространствоИменСхемы = ОбменСАрхивом.ВерсияФорматаДляОтправкиСообщений();
	ЭлементXDTOМЧД = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменСхемы, "Warrant"));
	СвойстваМЧДXDTO = ЭлементXDTOМЧД.Свойства();
	ЭлементXDTOМЧД.Type = ДанныеМЧД.Тип;
	ЭлементXDTOМЧД.Number = ДанныеМЧД.НомерДоверенности;
	ЭлементXDTOМЧД.IsInRegister = ДанныеМЧД.ЕстьВРеестреФНС;
	ЭлементXDTOМЧД.EntrusterTIN = ДанныеМЧД.ИННДоверителя;
	Если СвойстваМЧДXDTO.Получить("Comment") <> Неопределено Тогда
		ЭлементXDTOМЧД.Comment = ДанныеМЧД.Комментарий;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеМЧД.ИмяФайлаМЧД) Тогда
		ЗаписьZipФайла.Добавить(ВременнаяПапка + ДанныеМЧД.ИмяФайлаМЧД);
		ЭлементXDTOМЧД.WarrantFileName = ДанныеМЧД.ИмяФайлаМЧД;
	ИначеЕсли ДанныеМЧД.ЕстьВРеестреФНС <> Истина Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен файл доверенности'");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеМЧД.ИмяФайлаПодписиМЧД) Тогда
		ЗаписьZipФайла.Добавить(ВременнаяПапка + ДанныеМЧД.ИмяФайлаПодписиМЧД);
		ЭлементXDTOМЧД.SignatureFileName = ДанныеМЧД.ИмяФайлаПодписиМЧД;
	ИначеЕсли ДанныеМЧД.ЕстьВРеестреФНС <> Истина Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен файл подписи доверенности'");
	КонецЕсли;
	
	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ИмяФайлаОписанияМЧД);
	ПотокЗаписи.ЗаписатьОбъявлениеXML();
	Попытка
		ФабрикаXDTO.ЗаписатьXML(ПотокЗаписи, ЭлементXDTOМЧД,,,, НазначениеТипаXML.Явное);
		ПотокЗаписи.Закрыть();
		ЗаписьZipФайла.Добавить(ИмяФайлаОписанияМЧД);
	Исключение
		ОбменСАрхивом.УдалитьВременныеФайлы(ВременнаяПапка);
		ВызватьИсключение;
	КонецПопытки;
	
	ИмяZipФайлаВыгрузкиФинальное = КаталогВыгрузки + ОбменСАрхивом.ТекущаяОтметкаВремени() + ".zip";
	Попытка
		ЗаписьZipФайла.Записать();
		ПереместитьФайл(ИмяZipФайлаВыгрузки, ИмяZipФайлаВыгрузкиФинальное);
		ОбменСАрхивом.УдалитьВременныеФайлы(ВременнаяПапка);
		ОбменСАрхивом.ЛогированиеОперацийОбменаСАрхивом(
			СобытиеЖурналаРегистрацииВыгрузкаМЧД(),
			УровеньЖурналаРегистрации.Информация,
			НСтр("ru = 'Выгрузка МЧД завершена.'"),,
			МЧДСсылка);
	Исключение
		ОбменСАрхивом.УдалитьВременныеФайлы(ВременнаяПапка);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает данные указанной МЧД, необходимые для выгрузки в 1С:Архив.
//
// Параметры:
//  МЧДСсылка - СправочникСсылка - ссылка на МЧД.
//  ВременнаяПапка - Строка - временная папка, которую можно использовать для формирования файлов.
//    После выгрузки МЧД папка будет удалена автоматически.
//
// Возвращаемое значение:
//  Структура, Неопределено - свойства МЧД, см. НовоеОписаниеМЧД.
//    Неопределено, если выгрузка этого элемента не требуется.
// 
Функция ДанныеМЧДДляВыгрузки(МЧДСсылка, ВременнаяПапка)
	
	ОписаниеМЧД = Неопределено;
	Если Не ЗначениеЗаполнено(МЧДСсылка) Тогда
		Возврат ОписаниеМЧД;
	КонецЕсли;
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности")
			И ТипЗнч(МЧДСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенности") Тогда
		
		РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧДСсылка,
			"ПометкаУдаления, Статус, НомерДоверенности, Доверители, РегистрироватьВРеестре");
		Если РеквизитыМЧД.ПометкаУдаления <> Ложь Тогда
			Возврат ОписаниеМЧД;
		КонецЕсли;
		
		ОписаниеМЧД = НовоеОписаниеМЧД();
		ОписаниеМЧД.Тип = "EMCHD";
		ОписаниеМЧД.НомерДоверенности = РеквизитыМЧД.НомерДоверенности;
		ОписаниеМЧД.ЕстьВРеестреФНС = РеквизитыМЧД.РегистрироватьВРеестре
			И РеквизитыМЧД.Статус = Перечисления.СтатусыМЧД.Действует;
		
		ВыборкаДоверители = РеквизитыМЧД.Доверители.Выбрать();
		Если ВыборкаДоверители.Следующий() Тогда
			РеквизитыДоверителя = ВыборкаДоверители.ДоверительРеквизиты.Получить();
			Если ТипЗнч(РеквизитыДоверителя) = Тип("Структура") Тогда
				Если РеквизитыДоверителя.Свойство("ИНН") Тогда
					ОписаниеМЧД.ИННДоверителя = РеквизитыДоверителя.ИНН;
				ИначеЕсли РеквизитыДоверителя.Свойство("ИННФЛ") Тогда
					ОписаниеМЧД.ИННДоверителя = РеквизитыДоверителя.ИННФЛ;
				КонецЕсли;
			Иначе
				ВызватьИсключение НСтр("ru = 'Не удалось получить реквизиты доверителя'");
			КонецЕсли;
		Иначе
			ВызватьИсключение НСтр("ru = 'Не удалось определить доверителя'");
		КонецЕсли;
		
		МодульМашиночитаемыеДоверенностиФНС = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНС");
		ФайлыДоверенностей = МодульМашиночитаемыеДоверенностиФНС.ФайлыДоверенностей(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МЧДСсылка), Ложь);
		ФайлыДоверенности = ФайлыДоверенностей[МЧДСсылка];
		Если ФайлыДоверенности <> Неопределено Тогда
			Для Каждого СтрокаФайла Из ФайлыДоверенности Цикл
				СтрокаФайла.ДвоичныеДанные.Записать(ВременнаяПапка + СтрокаФайла.ИмяФайла);
				Если СтрокаФайла.ТипФайла = "Доверенность" Тогда
					ОписаниеМЧД.ИмяФайлаМЧД = СтрокаФайла.ИмяФайла;
				ИначеЕсли СтрокаФайла.ТипФайла = "Подпись" Тогда
					ОписаниеМЧД.ИмяФайлаПодписиМЧД = СтрокаФайла.ИмяФайла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ОписаниеМЧД = ОбменСАрхивомПереопределяемый.ДанныеМЧДДляВыгрузки(МЧДСсылка, ВременнаяПапка);
		
	КонецЕсли;
	
	Возврат ОписаниеМЧД;
	
КонецФункции

Функция СобытиеЖурналаРегистрацииВыгрузкаНСИ()
	
	Возврат СобытиеЖурналаРегистрации() + "." + НСтр("ru = 'Выгрузка НСИ'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииОтправкаСообщений()
	
	Возврат СобытиеЖурналаРегистрации() + "." + НСтр("ru = 'Отправка сообщений'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииВыгрузкаМЧД()
	
	Возврат СобытиеЖурналаРегистрации() + "." + НСтр("ru = 'Выгрузка МЧД'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииОбработкаОтчетов()
	
	Возврат СобытиеЖурналаРегистрации() + "." + НСтр("ru = 'Обработка отчетов'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииУничтожениеДел()
	
	Возврат СобытиеЖурналаРегистрации() + "." + НСтр("ru = 'Загрузка документа Уничтожение дел'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Процедура ЛогированиеОперацийОбменаСАрхивом(СобытиеЖР, УровеньЖР, ТекстСообщения,
			Знач ПолныйТекстСообщения = "", ОбъектСсылка = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ПолныйТекстСообщения) Тогда
		ПолныйТекстСообщения = ТекстСообщения;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖР,, ОбъектСсылка, ПолныйТекстСообщения);
	
	Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОбъектДанных", ОбъектСсылка);
	ПараметрыЗаписи.Вставить("ТипСобытия", Перечисления.ТипыСобытийПротоколаРаботыСотрудников.ОбменСАрхивом);
	ПараметрыЗаписи.Вставить("Длительность", 0);
	ПараметрыЗаписи.Вставить("ДополнительныеСведения", ПолныйТекстСообщения);
	ПараметрыЗаписи.Вставить("ОписаниеСобытия", ТекстСообщения);
	
	ПротоколированиеРаботыСотрудников.Записать(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура УстановитьСтатусОшибкиВыгрузкиДокумента(ОбъектСсылка, ТекстОшибки) Экспорт
	
	ТекущийСтатусДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "СтатусВыгрузкиВАрхив");
	
	Если ТекущийСтатусДокумента = Перечисления.СтатусыОбменаСАрхивом.ГотовКВыгрузке Тогда
		
		ДокументОбъект = ОбъектСсылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.СтатусВыгрузкиВАрхив = Перечисления.СтатусыОбменаСАрхивом.ОбнаруженыОшибкиПриВыгрузке;
		ДокументОбъект.РезультатПроверки = ТекстОшибки;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ИнтеграцияДокументаСАрхивом");
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(ОбъектСсылка,
			Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив);
					
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОтчет(ФайлОтчета, ФайлОписанияОтчета, КаталогФайловАрхива, ПодпапкаОтчетов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтчетXDTO = ПрочитатьОбъектXDTOИзФайла(ФайлОписанияОтчета.ПолноеИмя);
	
	ИмяФайлаОписанияОбъекта = ОтчетXDTO.ObjectFileName;
	НайденныеФайлы = НайтиФайлы(КаталогФайловАрхива, ИмяФайлаОписанияОбъекта, Ложь);
	Если НайденныеФайлы.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'не найден файл описания выгруженного объекта %1'"),
			ИмяФайлаОписанияОбъекта);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ФайлОписанияОбъекта = НайденныеФайлы[0];
	ОбъектОтчетаXDTO = ПрочитатьОбъектXDTOИзФайла(ФайлОписанияОбъекта.ПолноеИмя);
	Если ОбъектОтчетаXDTO.Тип().Имя = "HandOverList" Тогда
		ЗагрузитьОтчетПоСдаточнойОписи(ОтчетXDTO, ОбъектОтчетаXDTO, КаталогФайловАрхива);
	Иначе
		ТекстОшибки = СтрШаблон(НСтр("ru = 'неизвестный тип объекта: %1'"), ОбъектОтчетаXDTO.Тип());
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОтчетПоСдаточнойОписи(ОтчетXDTO, ОбъектОтчетаXDTO, КаталогФайловАрхива)
	
	СдаточнаяОписьСсылка = Документы.ПередачаДелВАрхив.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ОбъектОтчетаXDTO.ID));
	СдаточнаяОписьОбъект = СдаточнаяОписьСсылка.ПолучитьОбъект();
	Если СдаточнаяОписьОбъект = Неопределено Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдена сдаточная опись ""%1"".'"), ОбъектОтчетаXDTO.ID);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СтатусыОбмена = Перечисления.СтатусыОбменаСАрхивом;
	СвойстваОтчетаXDTO = ОтчетXDTO.Свойства();
	СвойстваОбъектаОтчетаXDTO = ОбъектОтчетаXDTO.Свойства();

	Если СвойстваОбъектаОтчетаXDTO.Получить("DeletionMark") <> Неопределено
			И ОбъектОтчетаXDTO.DeletionMark = Истина Тогда
		// Это отчет о приемке отзыва описи.
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ПередачаДелВАрхив");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", СдаточнаяОписьСсылка);

	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		СдаточнаяОписьОбъект.Заблокировать();
		
		ОписаниеСтрока = "";
		Если ОтчетXDTO.Operation = "Upload" Тогда
			СдаточнаяОписьОбъект.СтатусВыгрузкиВАрхив = 
				?(ОтчетXDTO.Success = Истина, СтатусыОбмена.ЗагрузкаВАрхивВыполнена,
					СтатусыОбмена.ОбнаруженыОшибкиПриЗагрузкеВАрхив);
			ОписаниеСтрока = ?(ОтчетXDTO.Success = Истина, НСтр("ru = 'Загружено в архив'"),
				НСтр("ru = 'Ошибки при загрузке в архив'"));
		ИначеЕсли ОтчетXDTO.Operation = "Verification" Тогда
			Если СдаточнаяОписьОбъект.СтатусВыгрузкиВАрхив <> СтатусыОбмена.ЗагрузкаВАрхивВыполнена Тогда
				// Опись редактируется для повторной отправки.
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			СдаточнаяОписьОбъект.СтатусВыгрузкиВАрхив = 
			?(ОтчетXDTO.Success = Истина, СтатусыОбмена.ПринятВАрхив,
				СтатусыОбмена.ОбнаруженыОшибкиПриПроверкеВАрхиве);
			ОписаниеСтрока = ?(ОтчетXDTO.Success = Истина, НСтр("ru = 'Принято в архив'"),
				НСтр("ru = 'Ошибки при проверке в архиве'"));
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Неожиданное значение в поле Operation: %1'"),
				ОтчетXDTO.Operation);
			ОтменитьТранзакцию();
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	
		ОшибкиСверкиДелМассив = Новый Массив;
		ДелаИзОтчета = Новый Массив;
		ИменаРеестровДокументов = Новый Соответствие;
		ДелаИзОписи = СдаточнаяОписьОбъект.ДелаХраненияДокументов.ВыгрузитьКолонку("ДелоХраненияДокументов");
		Для Каждого СтрокаДелаXDTO Из ОбъектОтчетаXDTO.StorageUnits Цикл
			Дело = Справочники.ДелаХраненияДокументов.ПолучитьСсылку(
				Новый УникальныйИдентификатор(СтрокаДелаXDTO.DossierID));
			ДелаИзОтчета.Добавить(Дело);
			ИменаРеестровДокументов[Дело] = СтрокаДелаXDTO.DocumentsList;
		КонецЦикла;
		ЛишниеДела = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ДелаИзОписи, ДелаИзОтчета);
		Для Каждого ЛишнееДело Из ЛишниеДела Цикл
			ОшибкиСверкиДелМассив.Добавить(СтрШаблон(
				НСтр("ru = 'В документе указано дело %1, отсутствующее в отчете'"), 
				ПолучитьНавигационнуюСсылку(ЛишнееДело)));
		КонецЦикла;
		НедостающиеДела = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ДелаИзОтчета, ДелаИзОписи);
		Для Каждого НедостающееДело Из НедостающиеДела Цикл
			ОшибкиСверкиДелМассив.Добавить(СтрШаблон(
				НСтр("ru = 'В документе отсутствует дело %1, указанное в отчете'"),
				?(ОбщегоНазначения.СсылкаСуществует(НедостающееДело), 
					ПолучитьНавигационнуюСсылку(НедостающееДело),
					НедостающееДело.УникальныйИдентификатор())));
		КонецЦикла;
		Если ОшибкиСверкиДелМассив.Количество() > 0 Тогда
			ОшибкиСверкиДел = СтрСоединить(ОшибкиСверкиДелМассив, Символы.ПС);
			ВызватьИсключение ОшибкиСверкиДел;
		КонецЕсли;
				
		// Проверка реестров документов.
		Если СдаточнаяОписьОбъект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ПринятВАрхив Тогда
			ОшибкиПроверкиСостава = ПроверитьСоставДелПоФайлуРеестра(
				ИменаРеестровДокументов, КаталогФайловАрхива);
			Если ЗначениеЗаполнено(ОшибкиПроверкиСостава) Тогда
				ВызватьИсключение ОшибкиПроверкиСостава;
			КонецЕсли;
		КонецЕсли;
		
		СдаточнаяОписьОбъект.РезультатПроверки = ОтчетXDTO.ResultText;
		
		Если ЗначениеЗаполнено(ОтчетXDTO.AccepterID) Тогда
			ПринялВАрхиве = Справочники.Сотрудники.ПолучитьСсылку(Новый УникальныйИдентификатор(ОтчетXDTO.AccepterID));
			Если ЗначениеЗаполнено(ПринялВАрхиве) Тогда
				СдаточнаяОписьОбъект.Принял = ПринялВАрхиве;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СдаточнаяОписьОбъект.Принял)
			И ЗначениеЗаполнено(ОтчетXDTO.AccepterName) Тогда
			СдаточнаяОписьОбъект.Принял = ОтчетXDTO.AccepterName;
		КонецЕсли;
		
		Если СвойстваОтчетаXDTO.Получить("AcceptanceDate") <> Неопределено
			И ЗначениеЗаполнено(ОтчетXDTO.AcceptanceDate) Тогда
			СдаточнаяОписьОбъект.ДатаПриемки = ОтчетXDTO.AcceptanceDate;
		КонецЕсли;
		
		СдаточнаяОписьОбъект.ДополнительныеСвойства.Вставить("ИнтеграцияДокументаСАрхивом");
		Если СдаточнаяОписьОбъект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ПринятВАрхив Тогда
			СдаточнаяОписьОбъект.Записать(РежимЗаписиДокумента.Проведение);
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(СдаточнаяОписьОбъект.Ссылка,
				Справочники.ВидыБизнесСобытий.ПринятиеДокументовВАрхив);
		Иначе
			СдаточнаяОписьОбъект.Записать(РежимЗаписиДокумента.Запись);
			Если СдаточнаяОписьОбъект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ОбнаруженыОшибкиПриЗагрузкеВАрхив
				Или СдаточнаяОписьОбъект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ОбнаруженыОшибкиПриПроверкеВАрхиве Тогда
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(СдаточнаяОписьОбъект.Ссылка,
					Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив);
			КонецЕсли;
		КонецЕсли;

		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(СдаточнаяОписьСсылка, ОписаниеСтрока);
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Загружен отчет. Изменен статус на ""%1"".'"),
			СдаточнаяОписьОбъект.СтатусВыгрузкиВАрхив);
		ЛогированиеОперацийОбменаСАрхивом(
			СобытиеЖурналаРегистрацииОбработкаОтчетов(),
			УровеньЖурналаРегистрации.Информация,
			НСтр("ru = 'Загружен отчет по сдаточной описи.'"),
			ТекстСообщения,
			СдаточнаяОписьСсылка);
		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ЗагрузитьДокументУничтожениеДел(ФайлДокументаУничтожениеДел,
		ФайлОписанияДокументаУничтожениеДел, ВременныйКаталогФайлов)

	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектXDTOУничтожениеДел = ПрочитатьОбъектXDTOИзФайла(
		ФайлОписанияДокументаУничтожениеДел.ПолноеИмя);
	СвойстваXDTOУничтожениеДел = ОбъектXDTOУничтожениеДел.Свойства();
	ДокументСсылка = Документы.УничтожениеДел.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ОбъектXDTOУничтожениеДел.ID));
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();

	Если ДокументОбъект = Неопределено Тогда
		ДокументОбъект = Документы.УничтожениеДел.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;

	НачатьТранзакцию();

	Попытка
		
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.ЗагруженИз1САрхива = Истина;
		ДокументОбъект.Дата = ОбъектXDTOУничтожениеДел.Date;
		ДокументОбъект.Номер = ОбъектXDTOУничтожениеДел.Number;
		ДокументОбъект.Организация = Справочники.Организации.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ОбъектXDTOУничтожениеДел.OrganizationID));
		Если ЗначениеЗаполнено(ОбъектXDTOУничтожениеДел.DepartmentID) Тогда
			ДокументОбъект.Подразделение = Справочники.СтруктураПредприятия.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ОбъектXDTOУничтожениеДел.DepartmentID));
		КонецЕсли;
		Если СвойстваXDTOУничтожениеДел.Получить("SecurityLevelID") <> Неопределено
				И ЗначениеЗаполнено(ОбъектXDTOУничтожениеДел.SecurityLevelID) Тогда
			ДокументОбъект.ГрифДоступа = Справочники.ГрифыДоступа.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ОбъектXDTOУничтожениеДел.SecurityLevelID));
		КонецЕсли;
		Если ОбъектXDTOУничтожениеДел.ElectronicDocuments = Истина Тогда
			ДокументОбъект.ФормаДокументов = Перечисления.ВариантыФормДокументов.Электронная;
		Иначе
			ДокументОбъект.ФормаДокументов = Перечисления.ВариантыФормДокументов.Бумажная;
		КонецЕсли;
		ДокументОбъект.Комментарий = ОбъектXDTOУничтожениеДел.Comment;
		ДокументОбъект.Основание = ОбъектXDTOУничтожениеДел.Basis;
		
		ДокументОбъект.ДелаХраненияДокументов.Очистить();
		
		ИменаРеестровДокументов = Новый Соответствие;
		Для Каждого СтрокаДелаXDTO Из ОбъектXDTOУничтожениеДел.StorageUnits Цикл
			Дело = Справочники.ДелаХраненияДокументов.ПолучитьСсылку(
				Новый УникальныйИдентификатор(СтрокаДелаXDTO.DossierID));
			Если Не ОбщегоНазначения.СсылкаСуществует(Дело) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'В документе указано дело с ID %1, отсутствующее в базе'"), 
					СтрокаДелаXDTO.DossierID);
			КонецЕсли;
			ИменаРеестровДокументов[Дело] = СтрокаДелаXDTO.DocumentsList;
		КонецЦикла;
		
		ОшибкиПроверкиСостава = ПроверитьСоставДелПоФайлуРеестра(
			ИменаРеестровДокументов, ВременныйКаталогФайлов);
		Если ЗначениеЗаполнено(ОшибкиПроверкиСостава) Тогда
			ВызватьИсключение ОшибкиПроверкиСостава;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ИменаРеестровДокументов Цикл
			НовСтр = ДокументОбъект.ДелаХраненияДокументов.Добавить();
			НовСтр.ДелоХраненияДокументов = КлючИЗначение.Ключ;
		КонецЦикла;
		
		ДокументОбъект.ПометкаУдаления = ОбъектXDTOУничтожениеДел.DeletionMark;
		Если ОбъектXDTOУничтожениеДел.Posted = Истина Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли ДокументОбъект.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ДокументОбъект.Записать();
		КонецЕсли;
		
		ОписаниеСтрока = НСтр("ru = 'Загружен документ Уничтожение дел'");
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(ДокументОбъект.Ссылка, ОписаниеСтрока);
		ЛогированиеОперацийОбменаСАрхивом(
			СобытиеЖурналаРегистрацииУничтожениеДел(),
			УровеньЖурналаРегистрации.Информация,
			НСтр("ru = 'Загружен документ Уничтожение дел.'"),
			ОписаниеСтрока,
			ДокументОбъект.Ссылка);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПроверитьСоставДелПоФайлуРеестра(ИменаРеестровДокументов, ВременныйКаталогФайлов)
	
	ОшибкиПроверкиДокументовМассив = Новый Массив;
	
	Для Каждого КлючИЗначение Из ИменаРеестровДокументов Цикл
		
		Дело = КлючИЗначение.Ключ;
		ИмяФайлаРеестра = КлючИЗначение.Значение;
		
		НайденныеФайлы = НайтиФайлы(ВременныйКаталогФайлов, ИмяФайлаРеестра, Истина);
		Если НайденныеФайлы.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден контейнер реестра документов %1'"),
				ИмяФайлаРеестра);
		КонецЕсли;
		
		ВременныйКаталогФайлаДляАвтоматическойПроверки = ИзвлечьФайлыИзАрхива(НайденныеФайлы[0].ПолноеИмя);
		ФайлДляАвтоматическойПроверки = НайтиФайлы(ВременныйКаталогФайлаДляАвтоматическойПроверки, "machine.xml", Истина);
		Если ФайлДляАвтоматическойПроверки.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден файл реестра документов machine.xml в контейнере %1'"),
				ИмяФайлаРеестра);
		КонецЕсли;
		
		РеестрXDTO = ПрочитатьОбъектXDTOИзФайла(ФайлДляАвтоматическойПроверки[0].ПолноеИмя);
		Если РеестрXDTO.DossierID <> Строка(Дело.УникальныйИдентификатор()) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Идентификатор дела в реестре %1 (%2) не совпадает с идентификатором в базе (%3)'"),
				ИмяФайлаРеестра, РеестрXDTO.DossierID, Строка(Дело.УникальныйИдентификатор()));
		КонецЕсли;
		
		ДокументыИзРеестра = Новый Массив;
		Для Каждого СтрокаДокумента Из РеестрXDTO.Documents Цикл
			ДокументСсылка = Справочники.ДокументыПредприятия.ПолучитьСсылку(
				Новый УникальныйИдентификатор(СтрокаДокумента.ID));
			ДокументыИзРеестра.Добавить(ДокументСсылка);
			Если Не ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
				ОшибкиПроверкиДокументовМассив.Добавить(СтрШаблон(
					НСтр("ru = 'Не найден документ с ID %1 из реестра'"), СтрокаДокумента.ID));
			КонецЕсли;
		КонецЦикла;
		
		Если ОшибкиПроверкиДокументовМассив.Количество() > 0 Тогда
			ОшибкиПроверкиДокументовМассив = СтрСоединить(ОшибкиПроверкиДокументовМассив, Символы.ПС);
				Возврат ОшибкиПроверкиДокументовМассив;
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КритерийОтбораДокументыВДеле.Ссылка КАК Документ
			|ИЗ
			|	КритерийОтбора.ДокументыВДелеТоме(&Дело) КАК КритерийОтбораДокументыВДеле");
		Запрос.УстановитьПараметр("Дело", Дело);
		ДокументыВДеле = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
		
		ЛишниеДокументы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ДокументыВДеле, ДокументыИзРеестра);
		Для Каждого ЛишнийДокумент Из ЛишниеДокументы Цикл
			ОшибкиПроверкиДокументовМассив.Добавить(СтрШаблон(
				НСтр("ru = 'В деле %1 указан документ %2, отсутствующий в реестре'"),
				ПолучитьНавигационнуюСсылку(Дело), ПолучитьНавигационнуюСсылку(ЛишнийДокумент)));
		КонецЦикла;
		НедостающиеДокументы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ДокументыИзРеестра, ДокументыВДеле);
		Для Каждого НедостающийДокумент Из НедостающиеДокументы Цикл
			ОшибкиПроверкиДокументовМассив.Добавить(СтрШаблон(
				НСтр("ru = 'В деле %1 отсутствует документ %2, указанный в реестре'"),
				ПолучитьНавигационнуюСсылку(Дело),
				?(ОбщегоНазначения.СсылкаСуществует(НедостающийДокумент),
				ПолучитьНавигационнуюСсылку(НедостающийДокумент),
				НедостающийДокумент.УникальныйИдентификатор())));
		КонецЦикла;
		
		УдалитьФайлы(ВременныйКаталогФайлаДляАвтоматическойПроверки);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ОшибкиПроверкиДокументовМассив, Символы.ПС);
	
КонецФункции

Функция ИзвлечьФайлыИзАрхива(ZipФайл)
	
	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
	СоздатьКаталог(ИмяВременногоКаталога);
	
	Попытка
		ЧтениеZipФайла = Новый ЧтениеZipФайла(ZipФайл);
		ПакетДокументовНеПустой = ЧтениеZipФайла.Элементы.Количество() > 0;
		Если ПакетДокументовНеПустой Тогда
			ЧтениеZipФайла.ИзвлечьВсе(ИмяВременногоКаталога);
			ЧтениеZipФайла.Закрыть();
		Иначе
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииОбработкаОтчетов(),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			УдалитьФайлы(ИмяВременногоКаталога);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрацииОбработкаОтчетов(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		УдалитьФайлы(ИмяВременногоКаталога);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ИмяВременногоКаталога;
	
КонецФункции

// Читает файл обмена и возвращает соответствующий объект XDTO.
//
// Параметры:
//  ПолноеИмяФайла - Строка - имя файла.
//
// Возвращаемое значение:
//  ОбъектXDTO - объект.
//
Функция ПрочитатьОбъектXDTOИзФайла(ПолноеИмяФайла) Экспорт
	
	Попытка
		Если СтрЗаканчиваетсяНа(ПолноеИмяФайла, ".xml") Тогда
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
			ЧтениеXML.ПерейтиКСодержимому();
			ПространствоИменОбъекта = ЧтениеXML.URIПространстваИмен;
			ИмяТипаОбъекта = ЧтениеXML.Имя;
			ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИменОбъекта, ИмяТипаОбъекта);
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
			ОбъектXDTO.Проверить();
			ЧтениеXML.Закрыть();
		ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяФайла, ".json") Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(ПолноеИмяФайла);
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
		Иначе
			ВызватьИсключение НСтр("ru = 'Неожиданный тип файла'");
		КонецЕсли;
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при чтении файла %1:
			|%2'"), ПолноеИмяФайла, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ТекущаяОтметкаВремени() Экспорт
	
	ОтметкаЧислом = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОтметкаДатой = Дата(1, 1, 1) + Цел(ОтметкаЧислом / 1000);
	Миллисекунд = ОтметкаЧислом % 1000;
	
	Текущая = Формат(ОтметкаДатой, "ДФ=yyyyMMddHHmmss")
		+ Формат(Миллисекунд, "ЧЦ=3; ЧН=000; ЧВН=; ЧГ=0");
		
	Возврат Текущая;
	
КонецФункции

Функция ВерсияФорматаМаксимальная()
	
	ВсеВерсииФормата = ВерсииФорматаДоступные();
	
	Возврат ВсеВерсииФормата[ВсеВерсииФормата.Количество() - 1].Значение;
	
КонецФункции

// Возвращает минимальную версию формата, поддерживаемую в текущей конфигурации.
//
// Возвращаемое значение:
//   Строка - пространство имен XDTO-пакета мин. версии.
//
Функция ВерсияФорматаМинимальная()
	
	Возврат Метаданные.ПакетыXDTO.АДХ_1_0_3.ПространствоИмен;
	
КонецФункции

Функция ИмяСвойстваВерсияФормата()
	
	Возврат "FormatVersion";
	
КонецФункции

#КонецОбласти
