// @strict-types


#Область ПрограммныйИнтерфейс

#Область ОбработчикиПодключаемыхСобытий

// Обрабатывает подключаемую команду
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
//  Команда - КомандаФормы
Процедура ОбработатьПодключаемуюКоманду(Форма, Команда) Экспорт
	
	ИменаКоманд = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаКоманд;
	
	Если Команда.Имя = ИменаКоманд.ПоказатьДанныеСертификата Тогда
		ПоказатьСертификат(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие перед началом добавления ДО
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Элемент - ТаблицаФормы
//  Отказ - Булево
//  Копирование - Булево
//  Родитель - Неопределено, СправочникСсылка, ПланСчетовСсылка -
//  Группа - Булево
//  Параметр - Произвольный
Процедура ОбработатьСобытиеПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр) Экспорт
	
	ИменаЭлементов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаЭлементов;
	
	Если Элемент.Имя = ИменаЭлементов.Элементы.СертификатСписокВыбора Тогда
		
		СертификатСписокВыбораПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие перед началом изменения ДО
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Элемент - ТаблицаФормы
//  Отказ - Булево
Процедура ОбработатьСобытиеПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	ИменаЭлементовОтображенияСертификатов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаЭлементов;
	
	Если Элемент.Имя = ИменаЭлементовОтображенияСертификатов.Элементы.СертификатСписокВыбора Тогда
		
		СертификатСписокВыбораПередНачаломИзменения(Элемент, Отказ);
		
	ИначеЕсли Элемент.Имя = "СертификатыШифрования" Тогда
		
		СертификатыШифрованияПередНачаломИзменения(Элемент, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие перед удалением ДО
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Элемент - ТаблицаФормы
//  Отказ - Булево
Процедура ОбработатьСобытиеПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	ИменаЭлементов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаЭлементов;
	
	Если Элемент.Имя = ИменаЭлементов.Элементы.СертификатСписокВыбора Тогда
		
		СертификатСписокВыбораПередУдалением(Элемент, Отказ);
		
	ИначеЕсли Элемент.Имя = "СертификатыШифрования" Тогда
		
		СертификатыШифрованияПередУдалением(Элемент, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие при активизации строки ДО
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Элемент - ТаблицаФормы
//  ПараметрыОбработчикаОжидания - см. НовыеПараметрыПолдключенияОбработчикаОжидания
//
Процедура ОбработатьСобытиеПриАктивизацииСтроки(Форма, Элемент, ПараметрыОбработчикаОжидания) Экспорт
	
	ИменаЭлементов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаЭлементов;
	
	Если Элемент.Имя = ИменаЭлементов.Элементы.СертификатСписокВыбора Тогда
		
		СертификатСписокВыбораПриАктивизацииСтроки(Форма, Элемент, ПараметрыОбработчикаОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие нажатия на надпись ДО
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Элемент - ДекорацияФормы, ПолеФормы -
Процедура ОбработатьСобытиеНажатие(Форма, Элемент) Экспорт
	
	ИменаЭлементов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаЭлементов;
	
	Если Элемент.Имя = ИменаЭлементов.Элементы.НадписьДоверенность Тогда
		
		НадписьДоверенностьНажатие(Форма, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие изменения элемента в ДО
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Элемент - ПолеФормы
Процедура ОбработатьСобытиеПриИзменении(Форма, Элемент) Экспорт
	
	ИменаЭлементовФормыСертификатовИПрограмм =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификатовИПрограмм().ИменаЭлементов;
	
	Если Элемент.Имя = ИменаЭлементовФормыСертификатовИПрограмм.ДействияПриСохраненииДанныхСЭП
		Или Элемент.Имя = ИменаЭлементовФормыСертификатовИПрограмм.ДействияПриОтправкеПоПочтеСЭП
		Или Элемент.Имя = ИменаЭлементовФормыСертификатовИПрограмм.СохранятьДоверенностиВместеСПодписью Тогда
		
		СохранитьПерсональныеНастройкиЭПИзФормыСертификатовИПрограмм(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Конструктор параметров подключения обработчика ожидания
// 
// Возвращаемое значение:
//  Структура:
// * ПодключитьОбработчик - Булево - 
// * Интервал - Число - 
// * Однократно - Булево - 
Функция НовыеПараметрыПолдключенияОбработчикаОжидания() Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПодключитьОбработчик", Ложь);
	ПараметрыОбработчика.Вставить("Интервал", 1);
	ПараметрыОбработчика.Вставить("Однократно", Истина);
	
	Возврат ПараметрыОбработчика;
	
КонецФункции

// Обрабатывает событие обработчика ожидания
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ВнутренниеДанныеФормы - Соответствие Из КлючИЗначение:
//    * Ключ - Строка
//    * Значение - Произвольный
//
Процедура ОбработатьОбработчикОжидания(Форма, ВнутренниеДанныеФормы) Экспорт
	
	ИмяСобытия = ИмяСобытияОбработчикаОжиданияФормы(Форма);
	
	Если ИмяСобытия = СобытияОбработчикаОжидания().АктивизицияСтрокаСпискаВыбораСертификатов Тогда
		ОбработчикСертификатСписокВыбораПриАктивизацииСтроки(Форма, ВнутренниеДанныеФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Обрабатывает открытие формы подписания
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
//  Отказ - Булево
Процедура ФормаПодписанияПриОткрытии(Форма, Отказ) Экспорт
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаРеквизитов;
	
	ИмяРеквизитаПредупреждения = ИменаРеквизитов.ВыводилиПредупреждениеНеУстановленыСертификатыЭП;
	
	Если Форма.СертификатСписокВыбора.Количество() = 0 Тогда
		Если Не Форма[ИмяРеквизитаПредупреждения] Тогда
			ТекстПредупреждения = РаботаСЭПКлиентСервер.СообщениеОбОтсутствииУстановленныхСертификатов();
			Форма[ИмяРеквизитаПредупреждения] = Истина;
			ВызватьИсключение ТекстПредупреждения;
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает открытие формы расшифровки
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.РасшифровкаДанных
//  Отказ - Булево
Процедура ФормаРасшифровкиПриОткрытии(Форма, Отказ) Экспорт
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыРасшифровкиДанных().ИменаРеквизитов;
	
	ВыводилиПредупреждениеНеУстановленыСертификатыЭП =
		Форма[ИменаРеквизитов.ВыводилиПредупреждениеНеУстановленыСертификатыЭП]; // Булево
	
	Если Форма.СертификатСписокВыбора.Количество() = 0 Тогда
		Если Не ВыводилиПредупреждениеНеУстановленыСертификатыЭП Тогда
			ТекстПредупреждения = РаботаСЭПКлиентСервер.СообщениеОбОтсутствииУстановленныхСертификатов();
			ВыводилиПредупреждениеНеУстановленыСертификатыЭП = Истина;
			ВызватьИсключение ТекстПредупреждения;
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие изменения программы шифрования в форме шифрования данных
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ШифрованиеДанных
Процедура ФормаШифрованияПослеИзмененияПрограммыШифрования(Форма) Экспорт
	
	ЗаполнитьОбязательныеДляШифрованияСертификаты(Форма);
	
КонецПроцедуры

// Обрабатывает заполнение параметров выполнения подписания данных
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
//  ПараметрыВыполнения - Структура
Процедура ПриЗаполненииПараметровВыполненияПодписанияДанных(Форма, ПараметрыВыполнения) Экспорт
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаРеквизитов;
	Доверенность = Форма[ИменаРеквизитов.ДоверенностьСертификата]; // ОпределяемыйТип.МашиночитаемаяДоверенность
	
	ПараметрыВыполнения.Вставить("Доверенность", Доверенность);
	
КонецПроцедуры

// Обрабатывает заполнение параметров выполнения подписания данных
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
//  ОписаниеДанных - Структура
Процедура ПриЗаполненииОписанияДанныхПриПодписании(Форма, ОписаниеДанных) Экспорт
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаРеквизитов;
	Доверенность = Форма[ИменаРеквизитов.ДоверенностьСертификата]; // ОпределяемыйТип.МашиночитаемаяДоверенность
	
	ОписаниеДанных.Вставить("Доверенность", Доверенность);
	
КонецПроцедуры

#Область ФормаСертификатовИПрограмм

// Вызывается перед сохранением настроек пользователя в форме сертификатов и программ ЭП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования
//  СохраняемыеНастройки - Структура
//
Процедура ФормаСертификатовИПрограммПередСохранениемНастроек(Форма, СохраняемыеНастройки) Экспорт
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификатовИПрограмм().ИменаРеквизитов;
	
	СохраняемыеНастройки.Вставить("ДействияПриСохраненииСЭП", Форма[ИменаРеквизитов.ДействияПриСохраненииСЭП]);
	СохраняемыеНастройки.Вставить("ДействияПриОтправкеПоПочтеСЭП", Форма[ИменаРеквизитов.ДействияПриОтправкеПоПочтеСЭП]);
	СохраняемыеНастройки.Вставить("СохранятьДоверенность", Форма[ИменаРеквизитов.СохранятьДоверенностиВместеСПодписью]);
	
КонецПроцедуры

// Вызывается при выборе в таблице программ формы сертификатов и программ ЭП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования
//  Поле - ПолеФормы
//  СтандартнаяОбработка - Булево
Процедура ФормаСертификатовИПрограммПриВыбореПрограммы(Форма, Поле, СтандартнаяОбработка) Экспорт
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификатовИПрограмм().ИменаРеквизитов;
	
	Элементы = Форма.Элементы;
	
	ТекущиеДанные = Элементы.Программы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтсутствуетСертификатШифрования = ТекущиеДанные[ИменаРеквизитов.КолонкаСертификатДляШифрованияОтсутствует]; // Булево
	
	Если Поле = Элементы.ПрограммыСертификатДляШифрования
		И ЗначениеЗаполнено(ТекущиеДанные.Ссылка)
		И ОтсутствуетСертификатШифрования Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыСоздания = ЭлектроннаяПодписьСлужебныйКлиент.ПараметрыДобавленияСертификата();
		ПараметрыСоздания.СкрытьЗаявление = Истина;
		ПараметрыСоздания.Вставить("ОбязательныйДляШифрования", Истина);
		
		ЭлектроннаяПодписьСлужебныйКлиент.ДобавитьСертификат(ПараметрыСоздания);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Вызывается перед выполнением сохранения подписей из формы сохранения файла вместе с ЭП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.СохранениеВместеСЭлектроннойПодписью
Процедура ФормаСохраненияСЭППередСохранениемПодписей(Форма) Экспорт
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСохраненияВместеСЭП().ИменаРеквизитов;
	
	СохранятьДоверенностьНачальноеЗначение = Форма[ИменаРеквизитов.СохранятьДоверенностьНачальноеЗначение]; // Булево
	СохранятьДоверенность = Форма[ИменаРеквизитов.СохранятьДоверенность]; // Булево
	
	Если СохранятьДоверенность <> СохранятьДоверенностьНачальноеЗначение Тогда
		
		СохраняемыеНастройки = Новый Структура();
		СохраняемыеНастройки.Вставить("СохранятьДоверенность", СохранятьДоверенность);
		ЭлектроннаяПодписьДокументооборотВызовСервера.СохранитьПерсональныеНастройкиЭП(СохраняемыеНастройки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обрабатывает команду показа сертификата
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
Процедура ПоказатьСертификат(Форма)
	
	Если ЗначениеЗаполнено(Форма.СертификатАдрес) Тогда
		ЭлектроннаяПодписьКлиент.ОткрытьСертификат(Форма.СертификатАдрес, Истина);
	Иначе
		ЭлектроннаяПодписьКлиент.ОткрытьСертификат(Форма.СертификатОтпечаток, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Сертификат список выбора перед началом добавления.
// 
// Параметры:
//  Элемент - ТаблицаФормы - Элемент
//  Отказ - Булево - Отказ
//  Копирование - Булево - Копирование
//  Родитель - Неопределено, СправочникСсылка, ПланСчетовСсылка - Родитель
//  Группа - Булево - Группа
//  Параметр - Произвольный - Параметр
Процедура СертификатСписокВыбораПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

// Сертификат список выбора перед началом изменения.
// 
// Параметры:
//  Элемент - ТаблицаФормы - Элемент
//  Отказ - Булево - Отказ
Процедура СертификатСписокВыбораПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Сертификат список выбора перед удалением.
// 
// Параметры:
//  Элемент - ТаблицаФормы - Элемент
//  Отказ - Булево - Отказ
Процедура СертификатСписокВыбораПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Сертификат список выбора при активизации строки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  Элемент - ТаблицаФормы - Элемент
//  ПараметрыОбработчикаОжидания - см. НовыеПараметрыПолдключенияОбработчикаОжидания
Процедура СертификатСписокВыбораПриАктивизацииСтроки(Форма, Элемент, ПараметрыОбработчикаОжидания)
	
	ТекущиеДанные = Элемент.ТекущиеДанные; // ЭлементСпискаЗначений
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Значение = Форма.Сертификат Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ПодключитьОбработчик = Истина;
	ПараметрыОбработчикаОжидания.Интервал = 0.2;
	ПараметрыОбработчикаОжидания.Однократно = Истина;
	УстановитьСобытиеОбработчикаОжидания(Форма, СобытияОбработчикаОжидания().АктивизицияСтрокаСпискаВыбораСертификатов);
	
КонецПроцедуры

// Обработчик сертификат список выбора при активизации строки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  ВнутренниеДанныеФормы - Соответствие Из КлючИЗначение:
//    * Ключ - Строка
//    * Значение - Произвольный
//
Процедура ОбработчикСертификатСписокВыбораПриАктивизацииСтроки(Форма, ВнутренниеДанныеФормы)
	
	ЭлементСпискаВыбора = Форма.Элементы["СертификатСписокВыбора"]; // ТаблицаФормы
	ТекущиеДанные = ЭлементСпискаВыбора.ТекущиеДанные; // ЭлементСпискаЗначений
	
	ВыбранноеЗначение = ТекущиеДанные.Значение; // Булево, СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
	
	Если ВыбранноеЗначение = Истина Тогда
		СертификатИзВнутреннихДанных = ВнутренниеДанныеФормы["ВыбранныйСертификат"]; // СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
		Форма.Сертификат = СертификатИзВнутреннихДанных;
		ВнутренниеДанныеФормы.Удалить("ВыбранныйСертификат");
	Иначе
		Форма.Сертификат = ВыбранноеЗначение; 
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПолучитьОтпечаткиСертификатовНаКлиенте(
		Новый ОписаниеОповещения("СертификатОбработкаВыбораЗавершение", Форма, ВыбранноеЗначение));
	
КонецПроцедуры

#Область ОбработчикиОжидания

// Перечисление возможных событий обработчика ожидания
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//    * АктивизицияСтрокаСпискаВыбораСертификатов - Строка - 
Функция СобытияОбработчикаОжидания()
	
	СобытияОбработчикаОжидания = Новый Структура;
	СобытияОбработчикаОжидания.Вставить("АктивизицияСтрокаСпискаВыбораСертификатов",
		"АктивизицияСтрокаСпискаВыбораСертификатов");
	
	Возврат Новый ФиксированнаяСтруктура(СобытияОбработчикаОжидания);
	
КонецФункции

// Установить событие обработчика ожидания.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Событие - Строка
// 
Процедура УстановитьСобытиеОбработчикаОжидания(Форма, Событие)
	
	ИмяРеквизитаСобытия = ЭлектроннаяПодписьДокументооборотКлиентСервер.ИмяРеквизитаСобытияОбработчикаОжидания();
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	Форма[ИмяРеквизитаСобытия] = Событие;
	
КонецПроцедуры

// Возвращает текущее имя события обработчика ожидания
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСобытияОбработчикаОжиданияФормы(Форма)
	
	ИмяРеквизитаСобытия = ЭлектроннаяПодписьДокументооборотКлиентСервер.ИмяРеквизитаСобытияОбработчикаОжидания();
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаСобытия) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Форма[ИмяРеквизитаСобытия];
	
КонецФункции

#КонецОбласти

// Заполняет обязательные для шифрования сертификаты
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ШифрованиеДанных
Процедура ЗаполнитьОбязательныеДляШифрованияСертификаты(Форма)
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыШифрованияДанных().ИменаРеквизитов;
	
	ИмяКолонкиОбязательности = ИменаРеквизитов.СертификатыШифрования.ОбязательныйДляШифрования;
	
	СертификатыШифрования = Форма.СертификатыШифрования;
	СтрокиКУдалению = Новый Массив(); // Массив Из ДанныеФормыЭлементКоллекции
	Для Каждого Строка Из СертификатыШифрования Цикл
		Если Строка[ИмяКолонкиОбязательности] = Истина Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		СертификатыШифрования.Удалить(Строка);
	КонецЦикла;
	
	ОбязательныеДляШифрованияСертификатыПоПрограммам =
		Форма[ИменаРеквизитов.ОбязательныеДляШифрованияСертификаты]; // Соответствие
	
	ОбязательныеСертификаты = ОбязательныеДляШифрованияСертификатыПоПрограммам.Получить(Форма.СертификатПрограмма); // Массив Из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
	Если ОбязательныеСертификаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Сертификат Из ОбязательныеСертификаты Цикл
		
		Отбор = Новый Структура("Сертификат", Сертификат);
		Строки = СертификатыШифрования.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			
			Для Каждого Строка Из Строки Цикл
				Строка[ИмяКолонкиОбязательности] = Истина;
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = СертификатыШифрования.Добавить();
		НоваяСтрока.Сертификат = Сертификат;
		НоваяСтрока[ИмяКолонкиОбязательности] = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Сертификаты шифрования перед началом изменения.
// 
// Параметры:
//  Элемент - ТаблицаФормы - Элемент
//  Отказ - Булево - Отказ
Процедура СертификатыШифрованияПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыШифрованияДанных().ИменаРеквизитов;
	
	ИмяКолонкиОбязательности = ИменаРеквизитов.СертификатыШифрования.ОбязательныйДляШифрования;
	
	Если ТекущиеДанные[ИмяКолонкиОбязательности] = Истина Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Сертификаты шифрования перед удалением.
// 
// Параметры:
//  Элемент - ТаблицаФормы - Элемент
//  Отказ - Булево - Отказ
Процедура СертификатыШифрованияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыШифрованияДанных().ИменаРеквизитов;
	
	ИмяКолонкиОбязательности = ИменаРеквизитов.СертификатыШифрования.ОбязательныйДляШифрования;
	
	Если ТекущиеДанные[ИмяКолонкиОбязательности] = Истина Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает нажатие на надпись МЧД в ДО
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
//  Элемент - ДекорацияФормы
Процедура НадписьДоверенностьНажатие(Форма, Элемент)
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаРеквизитов;
	
	ДоступныеМЧД = Форма[ИменаРеквизитов.ДоступныеДоверенностиСертификата]; // СписокЗначений
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ОбработатьВыборДоверенности", ЭтотОбъект, Форма);
	Форма.ПоказатьВыборИзСписка(ОбработчикВыбора, ДоступныеМЧД, Элемент);
	
КонецПроцедуры

// Обработать выбор доверенности.
// 
// Параметры:
//  Результат - ЭлементСпискаЗначений:
//    * Значение - ОпределяемыйТип.МашиночитаемаяДоверенность
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
Процедура ОбработатьВыборДоверенности(Результат, Форма) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаРеквизитов;
	ИменаЭлементов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаЭлементов;
	
	Форма[ИменаРеквизитов.ДоверенностьСертификата] = Результат.Значение;
	
	НадписьДоверенность = Форма.Элементы[ИменаЭлементов.Элементы.НадписьДоверенность]; // ДекорацияФормы
	НадписьДоверенность.Заголовок =
		ЭлектроннаяПодписьДокументооборотВызовСервера.ПредставлениеДоверенностиПриПодписании(Результат.Значение);
	
КонецПроцедуры

// Сохраняет персональные настройки ЭП из формы сертификатов и программ
// 
// Параметры:
//  Форма - см. ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования
Процедура СохранитьПерсональныеНастройкиЭПИзФормыСертификатовИПрограмм(Форма)
	
	СохраняемыеНастройки = Новый Структура;
	ФормаСертификатовИПрограммПередСохранениемНастроек(Форма, СохраняемыеНастройки);
	
	ЭлектроннаяПодписьДокументооборотВызовСервера.СохранитьПерсональныеНастройкиЭП(СохраняемыеНастройки);
	
КонецПроцедуры

#КонецОбласти
