
////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с уведомлениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает условное оформление для таблицы Тематики.
//
// Параметры:
//  Тематики - Динамический список - список тематик, для которого делаем условное оформление.
//
Процедура УстановитьУсловноеОформлениеТематик(Тематики) Экспорт
	
	// Помеченные на удаление.
	Тематики.УсловноеОформление.Элементы.Очистить();
	ПредставлениеЭлемента = НСтр("ru = 'Тематика помечена на удаление (стандартная настройка)'");
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Тематики.УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста ,,,,,, Истина);
	ЭлементЦветаОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Тематика не действует (стандартная настройка)'");
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Тематики.УсловноеОформление, ПредставлениеЭлемента);
		
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеДействуетДата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеДействуетДата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ЗакрытыеНеактуальныеЗаписи;
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

// Возвращает список значений, содержащий подходящие тематики указанного вида документа.
// 
// Параметры:
// 	Текст - Строка - введеный текст поиска.
// 	ВидДокумента - СправочникСсылка.ВидыДокументов -ссылка на вид документа, для которого ищем тематики.
// 	 
// Возвращаемое значение:
// 	СписокЗначений - содержащий подходящие тематики указанного вида документа.
//
Функция ДанныеВыбораТематикиПоВиду(Текст, ВидДокумента) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТематикиДокументов.Ссылка КАК Тематика,
		|	ТематикиДокументов.ВидДокумента КАК ВидДокумента
		|ИЗ
		|	Справочник.ТематикиДокументов КАК ТематикиДокументов
		|ГДЕ
		|	ТематикиДокументов.ВидДокумента = &ВидДокумента
		|	И ТематикиДокументов.Наименование ПОДОБНО &Текст
		|	И НЕ ТематикиДокументов.ПометкаУдаления
		|	И НЕ ТематикиДокументов.НеДействует";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(
			Новый Структура("ВидДокумента, Тематика", Выборка.ВидДокумента, Выборка.Тематика),
			Строка(Выборка.Тематика));
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список значений, содержащий виды документов и тематики
// 
// Параметры:
// 	Текст - Строка - введеный текст поиска
// 	ДополнительныеПараметры - Структура, Неопределено - параметры поиска
// 	
// Возвращаемое значение:
// 	СписокЗначений - содержащий виды документов и тематики удовлетворяющих поиску.
//
Функция ДанныеВыбораВидаИТематики(Текст, ДополнительныеПараметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДокументов.Ссылка КАК ВидДокумента,
		|	ТематикиДокументов.Ссылка КАК Тематика,
		|	ВидыДокументов.Наименование ПОДОБНО &Текст КАК ВыводитьВид
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТематикиДокументов КАК ТематикиДокументов
		|		ПО (ТематикиДокументов.ВидДокумента = ВидыДокументов.Ссылка)
		|ГДЕ
		|	НЕ ВидыДокументов.ПометкаУдаления
		|	И НЕ ВидыДокументов.ЭтоГруппа
		|	И (ТематикиДокументов.Ссылка ЕСТЬ NULL
		|			ИЛИ НЕ ТематикиДокументов.ПометкаУдаления)
		|	И (ТематикиДокументов.НеДействует ЕСТЬ NULL
		|			ИЛИ НЕ ТематикиДокументов.НеДействует
		|			ИЛИ ТематикиДокументов.НеДействуетДата > &ТекущаяДата)
		|	И (ТематикиДокументов.Наименование ПОДОБНО &Текст
		|			ИЛИ ВидыДокументов.Наименование ПОДОБНО &Текст)
		|	И (НЕ &ОтборПоТипуКорреспонденции
		|			ИЛИ &ОтборВходящих
		|				И ВидыДокументов.ЯвляетсяВходящейКорреспонденцией
		|			ИЛИ &ОтборИсходящих
		|				И ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией)
		|	И (&ОграничиватьВиды = Ложь)
		|	И &ОтборОбращенийГраждан
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыДокументов.Наименование,
		|	ТематикиДокументов.Наименование";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ОтборПоТипуКорреспонденции", Ложь);
	Запрос.УстановитьПараметр("ОтборВходящих", Ложь);
	Запрос.УстановитьПараметр("ОтборИсходящих", Ложь);
	Запрос.Параметры.Вставить("ОграничиватьВиды", Ложь);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ТипКорреспонденции") Тогда
			Запрос.УстановитьПараметр("ОтборПоТипуКорреспонденции", Истина);
			Если ДополнительныеПараметры.ТипКорреспонденции = "ЯвляетсяВходящейКорреспонденцией" Тогда
				Запрос.УстановитьПараметр("ОтборВходящих", Истина);
			ИначеЕсли ДополнительныеПараметры.ТипКорреспонденции = "ЯвляетсяИсходящейКорреспонденцией" Тогда
				Запрос.УстановитьПараметр("ОтборИсходящих", Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ДоступныеВидыДокументов") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "(&ОграничиватьВиды = Ложь)",
				"(&ОграничиватьВиды = Ложь И ВидыДокументов.Ссылка В(&ДоступныеВидыДокументов))");
			
			Запрос.Параметры.Вставить("ДоступныеВидыДокументов", ДополнительныеПараметры.ДоступныеВидыДокументов);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ОтборОбращенийГраждан")
			И ДополнительныеПараметры.ОтборОбращенийГраждан Тогда
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст, "&ОтборОбращенийГраждан", "ВидыДокументов.ЯвляетсяОбращениемОтГраждан");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборОбращенийГраждан", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений();
	ПоследнийВидДокумента = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВыводитьВид И Выборка.ВидДокумента <> ПоследнийВидДокумента Тогда
			
			ПоследнийВидДокумента = Выборка.ВидДокумента;
			ДанныеВыбора.Добавить(Выборка.ВидДокумента, Строка(Выборка.ВидДокумента));
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Выборка.Тематика) Тогда
			
				ДанныеВыбора.Добавить(
					Новый Структура("ВидДокумента, Тематика", Выборка.ВидДокумента, Выборка.Тематика),
					СтрШаблон("%1 - %2", Выборка.ВидДокумента, Выборка.Тематика));
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ДанныеВыбора;

КонецФункции

// Возвращает признак использоваия Тематик документов
// 
// Возвращаемое значение:
// 	Булево - Истина, если тематики используются.
//
Функция ТематикиИспользуются() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	НЕ ВидыДокументов.ПометкаУдаления
		|	И ВидыДокументов.ВестиУчетПоТематикам";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти