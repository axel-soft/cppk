// @strict-types


#Область ПрограммныйИнтерфейс

// Обновляет параметры формы, необходимые для работы по ЭДО, при необходимости создает реквизиты формы
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, имеющая следующие реквизиты. Если реквизитов нет, создаются программно:
//    * ВариантПодписания - ПеречислениеСсылка.ВариантыПодписания
//    * ЕстьЭДО - Булево
//    * ПодписанЭДО - Булево
//    * ТипДокументаЭДО - ПеречислениеСсылка.ТипыДокументовЭДО
//    * НаправлениеЭДО - ПеречислениеСсылка.НаправленияЭДО
//    * СостояниеПоЭДО - ПеречислениеСсылка.СостоянияЭДОДокументооборот
//    * ДоступнаКорректировкаЭД - Булево
//    * ИдентификаторПакетаЭДО - УникальныйИдентификатор
//    * МожноМенятьПакетЭДО - Булево
//    * ПоддерживаетсяПакетнаяОбработкаЭДО - Булево
//    * ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
//                                      Документ ЭДО, связанный с переданным параметром ДокументДО
//    * ПакетЭДОНеОтражен - Булево
//    * УчетнаяЗаписьЭДО - Строка - Идентификатор учетной записи, которой будет обменян документ
//    * СертификатыДляЭДО - ТаблицаЗначений:
//      ** ДоступенДляЭДО - Булево
//      ** Отпечаток - Строка
//      ** Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      ** ДоступенНаКлиенте - Булево
//      ** ДоступенНаСервере - Булево
//  ДокументДО - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО, над которым будут выполняться действия ЭДО
//
Процедура ЗаполнитьПараметрыФормыПоЭДО(Форма, ДокументДО) Экспорт
	
	СоздатьРеквизитыПоЭДОПриНеобходимости(Форма);
	
	СброситьПараметрыФормыПоЭДО(Форма);
	
	Если Не ЗначениеЗаполнено(ДокументДО) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЭДО = ОбменСКонтрагентамиДОСлужебный.ПараметрыДокументаПоЭДО(ДокументДО); // см. ОбменСКонтрагентамиДОСлужебный.ПараметрыДокументаПоЭДО
	
	ЗаполнитьТаблицуСертификатов(ДокументДО, ПараметрыЭДО, Форма);
	
	Если ЗначениеЗаполнено(ПараметрыЭДО) Тогда
		
		Форма.ЕстьЭДО = Истина;
		
		Форма.ТипДокументаЭДО = ?(Не ЗначениеЗаполнено(ПараметрыЭДО.ТипДокументаЭДО),
			Перечисления.ТипыДокументовЭДО.Прочее,
			ПараметрыЭДО.ТипДокументаЭДО);
		Форма.НаправлениеЭДО = ПараметрыЭДО.Направление;
		Форма.СостояниеПоЭДО = ПараметрыЭДО.СостояниеДО;
		Форма.ПодписанЭДО = ПараметрыЭДО.Подписан;
		Форма.ДоступнаКорректировкаЭД = ПараметрыЭДО.ДоступнаКорректировкаЭД;
		Форма.ДокументЭДО = ПараметрыЭДО.ЭлектронныйДокумент;
		Форма.УчетнаяЗаписьЭДО = ПараметрыЭДО.УчетнаяЗаписьЭДО;
		
		Форма.ИдентификаторПакетаЭДО = ПараметрыЭДО.ПакетЭДО;
		Форма.МожноМенятьПакетЭДО = ПараметрыЭДО.ДоступноИзменениеПакетаЭДО;
		Форма.ПоддерживаетсяПакетнаяОбработкаЭДО = ПараметрыЭДО.ПоддерживаетсяПакетнаОбработка;
		Форма.ПакетЭДОНеОтражен = ПараметрыЭДО.ПакетЭДОНеОтражен;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнить параметры исходящего документа.
// 
// Параметры:
//  ДокументДО - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО
//  ПараметрыСозданияДокумента - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//  ДокументГотовКСозданию - Булево - Истина, если все параметры заполнены и документ готов к созданию   
//  ТекущийДокументЭДО - ДокументССылка.ЭлектронныйДокументВходящийЭДО, ДокументССылка.ЭлектронныйДокументИсходящийЭДО -
//
Процедура ЗаполнитьПараметрыИсходящегоДокумента(Знач ДокументДО, ПараметрыСозданияДокумента, ДокументГотовКСозданию,
	ТекущийДокументЭДО = Неопределено) Экспорт
	
	ПараметрыСозданияДокумента.Вставить("ДополнительныеПараметры", ДополнительныеПараметрыСозданияИсходящегоДокумента());
	
	РеквизитыДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДО, "ВидДокумента, Сумма, Организация, Стороны,
		|Контрагенты, РегистрационныйНомер, ДатаРегистрации");
	//@skip-check property-return-type
	ПараметрыСозданияДокумента.ДатаДокумента = РеквизитыДО.ДатаРегистрации;
	ПараметрыСозданияДокумента.НомерДокумента = РеквизитыДО.РегистрационныйНомер;
	ПараметрыСозданияДокумента.СуммаДокумента = РеквизитыДО.Сумма;
	ПараметрыСозданияДокумента.ОбъектыУчета.Добавить(ДокументДО);
	ПараметрыСозданияДокумента.СвязующийОбъектУчета = ДокументДО;
	ДополнительныеПараметры = ПараметрыСозданияДокумента.ДополнительныеПараметры; // см. ДополнительныеПараметрыСозданияИсходящегоДокумента
	ДополнительныеПараметры.НомерДО = РеквизитыДО.РегистрационныйНомер;
	ДополнительныеПараметры.ДатаДО = РеквизитыДО.ДатаРегистрации;
	ФайлЭД = Неопределено;
	
	Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда    
		
		РеквПрежнего = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокументЭДО, 
			"НомерДокумента, ДатаДокумента, ВидДокумента");
		
		ПараметрыСозданияДокумента.СоздатьНомерАвтоматически = Ложь;
		ПараметрыСозданияДокумента.НомерДокумента = РеквПрежнего.НомерДокумента;
		ПараметрыСозданияДокумента.ДатаДокумента  = РеквПрежнего.ДатаДокумента;
		ПараметрыСозданияДокумента.ВидДокумента  = РеквПрежнего.ВидДокумента;
		
		ФайлЭД = РегистрыСведений.ФайлыУчаствующиеВЭДО.ОтправленныйФайлПоДокументуЭДО(ТекущийДокументЭДО);
		
	КонецЕсли;	
	
	СтороныОбменаДокументаДО = НоваяСтруктураСторонОбмена();
	ЗаполнитьСтороныОбменаДокументаДО(СтороныОбменаДокументаДО, РеквизитыДО);
	
	СтороныОбменаДокументаЭДО = НоваяСтруктураСторонОбмена();
	ЗаполнитьСтороныОбменаЭДО(СтороныОбменаДокументаДО, СтороныОбменаДокументаЭДО);
	ЗаполнитьНастройкиОтправкиДокументаЭДО(РеквизитыДО.ВидДокумента, СтороныОбменаДокументаЭДО , ПараметрыСозданияДокумента);
	
	ПараметрыОбмена = ПараметрыСозданияДокумента.ПараметрыОбмена; // см.ИнтерфейсДокументовЭДОКлиентСервер.ПараметрыОбменаЭДОДляСозданияДокументаПоФайлу
	
	Если Не ЗначениеЗаполнено(ФайлЭД) Тогда
		ФайлЭД = ФайлЭД(ДокументДО, РеквизитыДО.ВидДокумента);
	КонецЕсли;	
	
	ДополнительныеПараметры.ФайлЭД = ФайлЭД;
	
	Если Не ЗначениеЗаполнено(ТекущийДокументЭДО) И ЗначениеЗаполнено(ФайлЭД) Тогда
		ЗаполнитьДатуИНомерИзФайла(ФайлЭД, ПараметрыСозданияДокумента);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыСозданияДокумента.НомерДокумента) Тогда
		ПараметрыСозданияДокумента.СоздатьНомерАвтоматически = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыСозданияДокумента.ДатаДокумента) Тогда
		ПараметрыСозданияДокумента.ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДокументГотовКСозданию = ЗначениеЗаполнено(ПараметрыСозданияДокумента.Организация)
		И ЗначениеЗаполнено(ПараметрыСозданияДокумента.Контрагент)
		И ЗначениеЗаполнено(ПараметрыСозданияДокумента.ВидДокумента)
		И ЗначениеЗаполнено(ПараметрыОбмена.ИдентификаторОтправителя)
		И ЗначениеЗаполнено(ПараметрыОбмена.ИдентификаторПолучателя)
		И ?(ДополнительныеПараметры.ЭтоФормализованныйДокумент, ЗначениеЗаполнено(ДополнительныеПараметры.Формат), Истина)
		И ЗначениеЗаполнено(ФайлЭД) ;
	
	Если ДокументГотовКСозданию И ДополнительныеПараметры.ЭтоФормализованныйДокумент Тогда
		ПровкеркаФорматаФайла = ФайлСоответствуетФормату(ФайлЭД, ПараметрыСозданияДокумента.ВидДокумента,
			ДополнительныеПараметры.Формат);
		ДокументГотовКСозданию = ПровкеркаФорматаФайла.Успех;
		Если Не ДокументГотовКСозданию Тогда
			ОбщегоНазначения.СообщитьПользователю(ПровкеркаФорматаФайла.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументГотовКСозданию Тогда
		ЗаполнитьПараметрыФайлаЭД(ФайлЭД, ДополнительныеПараметры.ПараметрыФайла);
	КонецЕсли;	
		
КонецПроцедуры	

// Возвращает ФИО контактного лица по данным документа ЭДО
//
// Параметры:
//  ОсновнойФайл - ОбъектXDTO:
//  * name - Строка
//  * binaryData - ДвоичныеДанные
//  ДополнительныйФайл - ОбъектXDTO:
//  * name - Строка
//  * binaryData - ДвоичныеДанные
//  КонтрагентXDTO - ОбъектXDTO
// 
// Возвращаемое значение:
//  Строка
//
Функция ФИОКонтактногоЛицаПоДаннымДокументаЭДО(ОсновнойФайл, ДополнительныйФайл, КонтрагентXDTO) Экспорт
	
	Если ОсновнойФайл = Неопределено
		Или ДополнительныйФайл = Неопределено
		Или КонтрагентXDTO = Неопределено Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОсновнойФайл, "binaryData") Тогда
		
		Контрагент = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(Контрагент, КонтрагентXDTO);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			ПараметрыПолучения = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияДанныхДокумента();
			ПараметрыПолучения.ОсновнойФайл.ИмяФайла = ОсновнойФайл.name;
			ПараметрыПолучения.ОсновнойФайл.ДвоичныеДанные = ОсновнойФайл.binaryData;
			
			Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ДополнительныйФайл, "binaryData") Тогда
				
				ПараметрыПолучения = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияДанныхДокумента();
				ПараметрыПолучения.ДополнительныйФайл.ИмяФайла = ДополнительныйФайл.name;
				ПараметрыПолучения.ДополнительныйФайл.ДвоичныеДанные = ДополнительныйФайл.binaryData;
				
			КонецЕсли;
			
			ДанныеРазбора = ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПросмотра(ПараметрыПолучения);
			Дерево = ДанныеРазбора.НовыйЭД.ЗначениеРеквизита;
			
			ФИОКонтактногоЛица = Новый Массив; // Массив Из Строка
			ФамилияКонтактногоЛица = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				Дерево, "СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", Ложь); // Строка
			Если ЗначениеЗаполнено(ФамилияКонтактногоЛица) Тогда
				ФИОКонтактногоЛица.Добавить(ФамилияКонтактногоЛица);
			КонецЕсли;
			
			ИмяКонтактногоЛица = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				Дерево, "СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", Ложь); // Строка
			Если ЗначениеЗаполнено(ИмяКонтактногоЛица) Тогда
				ФИОКонтактногоЛица.Добавить(ИмяКонтактногоЛица);
				
				ОтчествоКонтактногоЛица = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					Дерево, "СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", Ложь); // Строка
				Если ЗначениеЗаполнено(ОтчествоКонтактногоЛица) Тогда
					ФИОКонтактногоЛица.Добавить(ОтчествоКонтактногоЛица);
				КонецЕсли;
					
			КонецЕсли;
				
			НаименованиеКонтактногоЛица = СтрСоединить(ФИОКонтактногоЛица, " ");
			
			Возврат НаименованиеКонтактногоЛица;
			
		КонецЕсли; 
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#Область КомандыЭДО

#Область Перечисления

Функция ОбластиКомандЭДО() Экспорт
	
	ОбластиКоманд = Новый Структура;
	ОбластиКоманд.Вставить("РаботаСПакетом", "РаботаСПакетом");
	ОбластиКоманд.Вставить("ДействияЭДО", "ДействияЭДО");
	
	Возврат ОбластиКоманд;
	
КонецФункции

Функция ОбъектыЭДО() Экспорт
	
	ОбъектыЭДО = Новый Структура;
	ОбъектыЭДО.Вставить("Документ", "Документ");
	ОбъектыЭДО.Вставить("Пакет", "Пакет");
	
	Возврат ОбъектыЭДО;
	
КонецФункции

Функция ДействияКомандЭДО() Экспорт
	
	ДействияЭДО = Новый Структура;
	ДействияЭДО.Вставить("Принять", "Принять");
	ДействияЭДО.Вставить("Отклонить", "Отклонить");
	ДействияЭДО.Вставить("Подписать", "Подписать");
	ДействияЭДО.Вставить("Отправить", "Отправить");
	ДействияЭДО.Вставить("ЗакрытьПринудительно", "ЗакрытьПринудительно");
	ДействияЭДО.Вставить("ПоставитьВОчередьОтправки", "ПоставитьВОчередьОтправки");
	ДействияЭДО.Вставить("Аннулировать", "Аннулировать");
	
	Возврат ДействияЭДО;
	
КонецФункции

Функция ДействияСПакетомЭДО() Экспорт
	
	ДействияСПакетом = Новый Структура;
	ДействияСПакетом.Вставить("СоздатьПакет", "СоздатьПакет");
	ДействияСПакетом.Вставить("ДобавитьКПакету", "ДобавитьКПакету");
	ДействияСПакетом.Вставить("ИзменитьСоставПакета", "ИзменитьСоставПакета");
	ДействияСПакетом.Вставить("ОткрытьПакет", "ОткрытьПакет");
	
	Возврат ДействияСПакетом;
	
КонецФункции

Функция ДопустимыеНаправленияЭДО() Экспорт
	
	ДопустимыеНаправления = Новый Структура;
	ДопустимыеНаправления.Вставить("Исходящий", "Исходящий");
	ДопустимыеНаправления.Вставить("Входящий", "Входящий");
	
	Возврат ДопустимыеНаправления;
	
КонецФункции

#КонецОбласти

// Новое описание команды по ЭДО.
// 
// Возвращаемое значение:
//  Структура - Новое описание команды по ЭДО:
//    * Область - Строка - Одно из значений структуры см. ОбластиКомандЭДО
//    * Объект - Строка - Одно из значений структуры см. ОбъектыЭДО
//    * ВыполняемыеДействия - Соответствие Из КлючИЗначение:
//      ** Ключ - Строка - Одно из значений структур см. ДействияКомандЭДО или см. ДействияСПакетомЭДО
//      ** Значение - Булево - Истина, если действие доступно
//    * НаправленияОбъекта - Соответствие Из КлючИЗначение:
//      ** Ключ - Строка - Одно из значений структуры см. ДопустимыеНаправленияЭДО
//      ** Значение - Булево - Истина, если команда доступна для направлений
//    * СкрыватьВОднородномПакете - Булево - Истина, если для документа в однородном состоянии пакета
//                                           нужно скрывать команду. Имеет смысл только для входящих документов.
//
Функция НовоеОписаниеКомандыПоЭДО() Экспорт
	
	ОписаниеКоманды = Новый Структура;
	ОписаниеКоманды.Вставить("Область", "");
	ОписаниеКоманды.Вставить("Объект", "");
	ОписаниеКоманды.Вставить("ВыполняемыеДействия", Новый Соответствие());
	ОписаниеКоманды.Вставить("НаправленияОбъекта", Новый Соответствие());
	ОписаниеКоманды.Вставить("СкрыватьВОднородномПакете", Истина);
	
	Возврат ОписаниеКоманды;
	
КонецФункции

// Новое описание команд ЭДО.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - КнопкаФормы - Команда
//    * Значение - см. НовоеОписаниеКомандыПоЭДО
//
Функция НовоеОписаниеКомандЭДО() Экспорт
	
	ОписаниеКоманд = Новый Соответствие();
	Возврат ОписаниеКоманд;
	
КонецФункции

// Шаблоны команд ЭДО.
// 
// Возвращаемое значение:
//  Структура - Шаблоны команд ЭДО:
//    * РаботаСПакетом - Структура:
//      ** СоздатьПакетЭДО - см. НовоеОписаниеКомандыПоЭДО
//      ** ДобавитьКПакету - см. НовоеОписаниеКомандыПоЭДО
//      ** ИзменитьСоставПакета - см. НовоеОписаниеКомандыПоЭДО
//      ** ОткрытьПакет - см. НовоеОписаниеКомандыПоЭДО
//    * ДействияЭДО - Структура:
//      ** ОбработкаВходящих - Структура:
//        *** ПринятьДокумент - см. НовоеОписаниеКомандыПоЭДО
//        *** ПринятьПакет - см. НовоеОписаниеКомандыПоЭДО
//        *** ОтклонитьДокумент - см. НовоеОписаниеКомандыПоЭДО
//        *** ОтклонитьПакет - см. НовоеОписаниеКомандыПоЭДО
//      ** ОбработкаИсходящих - Структура:
//        *** ПодписатьДокумент - см. НовоеОписаниеКомандыПоЭДО
//        *** ПодписатьИОтправитьДокумент см. НовоеОписаниеКомандыПоЭДО
//        *** ОтправитьДокумент - см. НовоеОписаниеКомандыПоЭДО
//        *** ПодписатьПакет - см. НовоеОписаниеКомандыПоЭДО
//        *** ПодписатьИОтправитьПакет - см. НовоеОписаниеКомандыПоЭДО
//        *** ОтправитьПакет - см. НовоеОписаниеКомандыПоЭДО
//      ** ПрочиеДействия - Структура:
//        *** ЗакрытьПринудительно - см. НовоеОписаниеКомандыПоЭДО
//        *** ПоставитьВОчередьОтправки - см. НовоеОписаниеКомандыПоЭДО
//        *** Аннулировать - см. НовоеОписаниеКомандыПоЭДО
//
Функция ШаблоныКомандЭДО() Экспорт
	
	ШаблоныКоманд = Новый Структура;
	
	ШаблоныКоманд.Вставить("РаботаСПакетом", ШаблоныКомандПакетов());
	ШаблоныКоманд.Вставить("ДействияЭДО", ШаблоныКомандДействийЭДО());
	
	Возврат ШаблоныКоманд;
	
КонецФункции

// Устанавливает видимость и доступность команд ЭДО на форме
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//    * ЕстьЭДО - Булево
//    * ПодписанЭДО - Булево
//    * ТипДокументаЭДО - ПеречислениеСсылка.ТипыДокументовЭДО
//    * НаправлениеЭДО - ПеречислениеСсылка.НаправленияЭДО
//    * СостояниеПоЭДО - ПеречислениеСсылка.СостоянияЭДОДокументооборот
//    * ДоступнаКорректировкаЭД - Булево
//    * ИдентификаторПакетаЭДО - УникальныйИдентификатор
//    * МожноМенятьПакетЭДО - Булево
//    * ПоддерживаетсяПакетнаяОбработкаЭДО - Булево
//    * ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
//                                      Документ ЭДО, связанный с документом ДО на форме
//    * ПакетЭДОНеОтражен - Булево
//    * УчетнаяЗаписьЭДО - Строка - Идентификатор учетной записи, которой будет обменян документ
//    * СертификатыДляЭДО - ТаблицаЗначений:
//      ** ДоступенДляЭДО - Булево
//      ** Отпечаток - Строка
//      ** Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      ** ДоступенНаКлиенте - Булево
//      ** ДоступенНаСервере - Булево
//  ОписаниеКоманд - см. НовоеОписаниеКомандЭДО
//
Процедура УстановитьВидимостьДоступностьКомандЭДО(Форма, ОписаниеКоманд) Экспорт
	
	СнятьВидимостьВсехКоманд(ОписаниеКоманд);
	
	Если Не Форма.ЕстьЭДО
		Или Не СинхронизацияЭДО.ЕстьПравоВыполненияОбмена() Тогда
		
		Возврат;
	КонецЕсли;
	
	ВключитьВидимостьКомандРаботыСПакетом(Форма, ОписаниеКоманд);
	
	Если Форма.НаправлениеЭДО = Перечисления.НаправленияЭДО.Исходящий Тогда
		
		ВключитьВидимостьКомандПоИсходящим(Форма, ОписаниеКоманд);
		
	Иначе
		
		ВключитьВидимостьКомандПоВходящим(Форма, ОписаниеКоманд);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает массивы состояний ЭДО по цветам
// 
// Возвращаемое значение:
//  Структура - Наборы состояний ЭДОПо цветам иконок:
// * Красные - Массив Из ПеречислениеСсылка.СостоянияДокументовЭДО
// * Серые - Массив Из ПеречислениеСсылка.СостоянияДокументовЭДО
// * Зеленые - Массив Из ПеречислениеСсылка.СостоянияДокументовЭДО
Функция НаборыСостоянийЭДОПоЦветамИконок() Экспорт
	
	СостоянияКрасные = Новый Массив(); // Массив Из ПеречислениеСсылка.СостоянияДокументовЭДО
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.Аннулирован);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования);
	СостоянияКрасные.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения);
	
	СостоянияСерые = Новый Массив(); // Массив Из ПеречислениеСсылка.СостоянияДокументовЭДО
	СостоянияСерые.Добавить(Перечисления.СостоянияДокументовЭДО.НеПолучен);
	СостоянияСерые.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору);
	СостоянияСерые.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка);
	СостоянияСерые.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения);
	СостоянияСерые.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении);
	СостоянияСерые.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения);
	СостоянияСерые.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке);
	СостоянияСерые.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения);
	СостоянияСерые.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
	СостоянияСерые.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения);
	СостоянияСерые.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение);
	
	СостоянияЗеленые = Новый Массив(); // Массив Из ПеречислениеСсылка.СостоянияДокументовЭДО
	СостоянияЗеленые.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершен);
	СостоянияЗеленые.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением);
	СостоянияЗеленые.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением);
	СостоянияЗеленые.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении);
	СостоянияЗеленые.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение);
	СостоянияЗеленые.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение);
	СостоянияЗеленые.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора);
	СостоянияЗеленые.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяОбработкаОблачнымЭДО);
	
	СостоянияПоЦветам = Новый Структура;
	СостоянияПоЦветам.Вставить("Красные", СостоянияКрасные);
	СостоянияПоЦветам.Вставить("Серые", СостоянияСерые);
	СостоянияПоЦветам.Вставить("Зеленые", СостоянияЗеленые);
	
	Возврат СостоянияПоЦветам;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает видимость и доступность команд ЭДО по отбору
// 
// Параметры:
//  ОписаниеКоманд - см. НовоеОписаниеКомандЭДО
//  Отбор - см. НовыйОтборКомандЭДО
//  Видимость - Булево
//  Доступность - Булево
//
Процедура УстановитьВидимостьДоступностьКомандЭДОПоОтбору(ОписаниеКоманд, Отбор, Видимость, Доступность) Экспорт
	
	ЭлементыКомандСоответствующиеОтбору = Новый Массив(); // Массив из КнопкаФормы
	
	Для Каждого Элемент Из ОписаниеКоманд Цикл
		
		ЭлементКоманды = Элемент.Ключ;
		ОписаниеКоманды = Элемент.Значение;
		
		Если КомандаСоответствуетОтбору(ОписаниеКоманды, Отбор) Тогда
			ЭлементыКомандСоответствующиеОтбору.Добавить(ЭлементКоманды);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементКоманды Из ЭлементыКомандСоответствующиеОтбору Цикл
		УстановитьВидимостьДоступностьЭлементаФормы(ЭлементКоманды, Видимость, Доступность);
	КонецЦикла;
	
КонецПроцедуры

// Новый отбор команд ЭДО, объединяет элементы отбора по И
// 
// Возвращаемое значение:
//  Массив из см. НовыйЭлементОтбораКомандЭДО
Функция НовыйОтборКомандЭДО() Экспорт
	
	ЭлементыОтбора = Новый Массив;
	Возврат ЭлементыОтбора;
	
КонецФункции

// Создает новый элемент отбора команд
// 
// Возвращаемое значение:
//  Структура:
//    * ВидЭлемента - Строка - Одно из значений перечисления см. ВидыЭлементовОтбораКомандЭДО
//    * ДочерниеЭлементы - Массив из Структура - см. НовыйЭлементОтбораКомандЭДО, Дочерние элементы. Актуальны для групп
//    * Ключ - Строка - Один из ключей описания команды см. НовоеОписаниеКомандыПоЭДО
//    * ВидСравнения - Строка - Оно из значений см. ВидыСравненияЭлементовОтбораКомандЭДО
//    * Значение - Строка, Булево - Значение ключа описания команды
//
Функция НовыйЭлементОтбораКомандЭДО() Экспорт
	
	ЭлементОтбора = Новый Структура;
	
	ЭлементОтбора.Вставить("ВидЭлемента", ВидыЭлементовОтбораКомандЭДО().Элемент);
	ЭлементОтбора.Вставить("ДочерниеЭлементы", Новый Массив);
	
	ЭлементОтбора.Вставить("Ключ", "");
	ЭлементОтбора.Вставить("ВидСравнения", ВидыСравненияЭлементовОтбораКомандЭДО().Равно);
	ЭлементОтбора.Вставить("Значение", "");
	
	Возврат ЭлементОтбора;
	
КонецФункции

Функция ВидыЭлементовОтбораКомандЭДО() Экспорт
	
	ВидыЭлементов = Новый Структура;
	ВидыЭлементов.Вставить("Элемент", "Элемент");
	ВидыЭлементов.Вставить("ГруппаПоИ", "ГруппаПоИ");
	ВидыЭлементов.Вставить("ГруппаПоИли", "ГруппаПоИли");
	
	Возврат ВидыЭлементов;
	
КонецФункции

// Возвращает возможные виды сравнения для отбора команд
// 
// Возвращаемое значение:
//  Структура - Перечисление видов сравнения:
//    * Равно - Строка - Только для ключей "Область", "Объект", "СкрыватьВОднородномПакете"
//    * НеРавно - Строка - Только для ключей "Область", "Объект", "СкрыватьВОднородномПакете"
//    * Содержит - Строка - Только для ключей "ВыполняемыеДействия", "НаправленияОбъекта"
//    * НеСодержит - Строка - Только для ключей "ВыполняемыеДействия", "НаправленияОбъекта"
//
Функция ВидыСравненияЭлементовОтбораКомандЭДО() Экспорт
	
	ВидыСравнения = Новый Структура;
	ВидыСравнения.Вставить("Равно", "Равно");
	ВидыСравнения.Вставить("НеРавно", "НеРавно");
	ВидыСравнения.Вставить("Содержит", "Содержит");
	ВидыСравнения.Вставить("НеСодержит", "НеСодержит");
	
	Возврат ВидыСравнения;
	
КонецФункции

Функция КлючиОтбораКомандЭДО() Экспорт
	
	КлючиОтбора = Новый Структура;
	КлючиОтбора.Вставить("Область", "Область");
	КлючиОтбора.Вставить("Объект", "Объект");
	КлючиОтбора.Вставить("ВыполняемыеДействия", "ВыполняемыеДействия");
	КлючиОтбора.Вставить("НаправленияОбъекта", "НаправленияОбъекта");
	КлючиОтбора.Вставить("СкрыватьВОднородномПакете", "СкрыватьВОднородномПакете");
	
	Возврат КлючиОтбора;
	
КонецФункции

// Новая структура сторон документа ДО, ЭДО.
// 
// Возвращаемое значение:
//  Структура - Новая структура сторон документа ДО:
//  * Отправитель - СправочникСсылка.Организации
//  * Получатель - ОпределяемыйТип.УчастникЭДО
//  * Отправители - Массив из СправочникСсылка.Организации
//  * Получатели - Массив из ОпределяемыйТип.УчастникЭДО
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//  * ИдентификаторыОтправителя - СписокЗначений из Строка
//  * ИдентификаторыПолучателя - СписокЗначений из Строка
//  * ЕстьСтороныИсключения - Булево -
//  * СтороныИсключения - Массив из Структура:
//    ** Отправитель - СправочникСсылка.Организации
//    ** Получатель - ОпределяемыйТип.УчастникЭДО -,
//  ТаблицаЗначений:
//		*** Отправитель - СправочникСсылка.Организации
//		*** Получатель - ОпределяемыйТип.УчастникЭДО
//
Функция НоваяСтруктураСторонОбмена() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Отправитель", Справочники.Организации.ПустаяСсылка());
	Структура.Вставить("Получатель", Неопределено);	
	Структура.Вставить("Отправители", Новый Массив());
	Структура.Вставить("Получатели", Новый Массив());
	Структура.Вставить("ИдентификаторОтправителя", "");
	Структура.Вставить("ИдентификаторПолучателя", "");
	Структура.Вставить("ИдентификаторыОтправителя",  Новый СписокЗначений);
	Структура.Вставить("ИдентификаторыПолучателя",  Новый СписокЗначений);
	Структура.Вставить("ЕстьСтороныИсключения",  Ложь);
	Структура.Вставить("СтороныИсключения",  Новый Массив);
	
	Возврат Структура;
	
КонецФункции

// Проверяет, если документ формализованный, то его вид и формат соответствуют настройкам
// 
// Параметры:
//  ФайлЭД - СправочникСсылка.Файлы
//  ВидЭД - СправочникСсылка.ВидыДокументовЭДО
//  Формат - Строка
// 
// Возвращаемое значение:
// Структура:
// * Успех - Булево - Истина, если файл соответствует формату
// * ОписаниеОшибки - Строка -
//  
Функция ФайлСоответствуетФормату(ФайлЭД, ВидЭД, Формат) Экспорт
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлЭД);
	ДанныеФайла.Вставить("ФайлДляОтправки", ФайлЭД);
	ДанныеФайла.Вставить("ВерсияДляОтправки", ДанныеФайла.ТекущаяВерсия);
	НастройкиОтправки = Новый Структура;
	НастройкиОтправки.Вставить("ВидДокумента", ВидЭД);
	НастройкиОтправки.Вставить("Формат", Формат);
	
	Возврат ОбменСКонтрагентамиДОСервер.ПроверитьСоответствиеФайлаПараметрамОтправки(ДанныеФайла, НастройкиОтправки);
	
КонецФункции

// Дополнительные параметры создания исходящего документа.
// 
// Возвращаемое значение:
//  Структура - Дополнительные параметры создания исходящего документа:
//   * Формат - Строка
//   * ДатаДО - Дата - Дата карточки документа документооборота
//   * НомерДО - Строка - Номер карточки документа документооборота
//   * ЭтоФормализованныйДокумент - Булево
//   * СтороныОбмена - Структура:
//     ** Отправитель - СправочникСсылка.Организации
//     ** Получатель - ОпределяемыйТип.УчастникЭДО
//     ** Отправители - Массив из СправочникСсылка.Организации
//     ** Получатели - Массив из ОпределяемыйТип.УчастникЭДО
//     ** ИдентификаторОтправителя - Строка
//     ** ИдентификаторПолучателя - Строка
//   * ФайлЭД - СправочникСсылка.Файлы
//   * ПараметрыФайла - Структура - описывает файл, который нужно отправить:
//     ** ИмяФайла - Строка - имя файла вместе с расширением.
//     ** АдресХранилища - Строка - адрес временного хранилища, в котором содержатся двоичные данные файла.
//
Функция ДополнительныеПараметрыСозданияИсходящегоДокумента() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Формат", "");
	Структура.Вставить("НомерДО", "");
	Структура.Вставить("ДатаДО", Дата(1,1,1));
	Структура.Вставить("ЭтоФормализованныйДокумент", Ложь);
	Структура.Вставить("СтороныОбмена", НоваяСтруктураСторонОбмена());
	Структура.Вставить("ФайлЭД", Справочники.Файлы.ПустаяСсылка());
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ИмяФайла", "");
	ПараметрыФайла.Вставить("АдресХранилища", "");
	
	Структура.Вставить("ПараметрыФайла", ПараметрыФайла);
	
	Возврат Структура;
	
КонецФункции

// Заполнить параметры файла ЭД.
// 
// Параметры:
//  ФайлЭД - СправочникСсылка.Файлы -
//  ПараметрыФайла - Структура - описывает файл, который нужно отправить:
//  * ИмяФайла - Строка - имя файла вместе с расширением.
//  * АдресХранилища - Строка - адрес временного хранилища, в котором содержатся двоичные данные файла.
//
Процедура ЗаполнитьПараметрыФайлаЭД(ФайлЭД, ПараметрыФайла) Экспорт

	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(ФайлЭД);
	ДанныеФайла = ДанныеФайлаИДвоичныеДанные.ДанныеФайла;
	ПараметрыФайла.ИмяФайла = СтрШаблон("%1.%2", ДанныеФайла.ПолноеНаименование, ДанныеФайла.Расширение);
	ПараметрыФайла.АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные);
	
КонецПроцедуры

// Заполняет дату и номер исходящего документа ЭДО из файла формализованного документа
// 
// Параметры:
//  ФайлЭД - СправочникСсылка.Файлы
//  ПараметрыСозданияДокумента - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//
Процедура ЗаполнитьДатуИНомерИзФайла(ФайлЭД, ПараметрыСозданияДокумента) Экспорт
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(ФайлЭД);
	ДанныеФайла = ДанныеФайлаИДвоичныеДанные.ДанныеФайла;
	
	Если Не ОбзорФайловКлиентСервер.ЭтоXML(НРег(ДанныеФайла.Расширение)) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРазбора = ОбменСКонтрагентамиДОСлужебный.СведенияОЭДИзФайла(ПоместитьВоВременноеХранилище(
				ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные));
	Если ДанныеРазбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеРазбора.НомерДокумента) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСозданияДокумента, ДанныеРазбора, "НомерДокумента,
			|ДатаДокумента");
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПараметровСозданияИсходящегоДокумента

// Заполнить стороны документа ДО.
// 
// Параметры:
//  Стороны - см. НоваяСтруктураСторонОбмена
//  РеквизитыДО - Структура:
//  * ВидДокумента - СправочникСсылка.ВидыДокументов
//  * Организация - СправочникСсылка.Организации
//  * Стороны - СправочникТабличнаяЧасть.ДокументыПредприятия.Стороны
//  * Контрагенты - СправочникТабличнаяЧасть.ДокументыПредприятия.Контрагенты
//
Процедура ЗаполнитьСтороныОбменаДокументаДО(Стороны, РеквизитыДО)
	
	ПараметрФО = Новый Структура("ВидДокумента", РеквизитыДО.ВидДокумента);
	ВестиУчетСторон = ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоСторонам", ПараметрФО);
	
	Если ВестиУчетСторон Тогда 
		ТЗ_Стороны = РеквизитыДО.Стороны.Выгрузить();
		Для Каждого Сторона Из ТЗ_Стороны Цикл
			Если Не ЗначениеЗаполнено(Сторона.Сторона) Тогда
				Продолжить;
			КонецЕсли;	
			Если ТипЗнч(Сторона.Сторона) = Тип("СправочникСсылка.Организации") Тогда
				Стороны.Отправители.Добавить(Сторона.Сторона);
			ИначеЕсли ТипЗнч(Сторона.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
				Стороны.Получатели.Добавить(Сторона.Сторона);
			КонецЕсли;
		КонецЦикла;
		Если Стороны.Получатели.Количество() = 0 И Стороны.Отправители.Количество() = 2 Тогда
			Стороны.Получатели.Добавить(Стороны.Отправители[1]);
			Стороны.Отправители.Удалить(1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВестиУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям", ПараметрФО);
	ВестиУчетиПоКонтрагентам = ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКонтрагентам", ПараметрФО);
			
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И
		(ВестиУчетПоОрганизациям Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций"))Тогда
		Стороны.Отправители.Добавить(?(ВестиУчетПоОрганизациям, РеквизитыДО.Организация,
			Справочники.Организации.ОрганизацияПоУмолчанию()));
	КонецЕсли;	
	
	Если ВестиУчетиПоКонтрагентам Тогда
		Стороны.Получатели = РеквизитыДО.Контрагенты.Выгрузить().ВыгрузитьКолонку("Контрагент");	
	КонецЕсли;
			
КонецПроцедуры

// Заполняет стороны обмена(отправителей, получателей, их идентификаторы) документа ЭДО.
// 
// Параметры:
//  СтороныДокументаДО - см. НоваяСтруктураСторонОбмена
//  СтороныДокументаЭДО - см. НоваяСтруктураСторонОбмена 
//
Процедура ЗаполнитьСтороныОбменаЭДО(СтороныДокументаДО, СтороныДокументаЭДО)
	
	ОтправителиЭД = Новый Массив; // Массив Из СправочникСсылка.Организации
	ПолучателиЭД =  Новый Массив; // Массив Из ОпределяемыйТип.УчастникЭДО
	ОтправительЭД = Справочники.Организации.ПустаяСсылка();
	ПолучательЭД = Неопределено;
	Если СтороныДокументаДО.Отправители.Количество() > 0 Тогда
		ОтправителиЭД = ОбменЭДОДокументооборот.ОтправителиЭД(ПолучательЭД, СтороныДокументаДО.Отправители);
	КонецЕсли;
	Если ОтправителиЭД.Количество() = 1 Тогда
		ОтправительЭД = ОтправителиЭД[0];
	КонецЕсли;
	Если СтороныДокументаДО.Получатели.Количество() > 0 Или ЗначениеЗаполнено(ОтправительЭД) Тогда
		ПолучателиЭД = ОбменЭДОДокументооборот.ПолучателиЭД(ОтправительЭД, СтороныДокументаДО.Получатели);
	КонецЕсли;	
	Если ПолучателиЭД.Количество() = 1 Тогда
		ПолучательЭД = ПолучателиЭД[0];
	КонецЕсли;
	СтороныДокументаЭДО.Отправители = ОтправителиЭД;
	СтороныДокументаЭДО.Получатели = ПолучателиЭД;
	СтороныДокументаЭДО.Отправитель = ОтправительЭД;
	СтороныДокументаЭДО.Получатель = ПолучательЭД;
	
КонецПроцедуры	

// Заполнить настройки отправки документа ЭДО.
// 
// Параметры:
//  ВидДокументаДО - СправочникСсылка.ВидыДокументов -
//  СтороныОбменаЭДО - см. НоваяСтруктураСторонОбмена
//  ПараметрыСозданияДокумента - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//
Процедура ЗаполнитьНастройкиОтправкиДокументаЭДО(ВидДокументаДО, СтороныОбменаЭДО, ПараметрыСозданияДокумента)
	
	ДополнительныеПараметры = ПараметрыСозданияДокумента.ДополнительныеПараметры;
	ПараметрыСозданияДокумента.ПараметрыОбмена = ИнтерфейсДокументовЭДОКлиентСервер.ПараметрыОбменаЭДОДляСозданияДокументаПоФайлу();
	ПараметрыОбмена = ПараметрыСозданияДокумента.ПараметрыОбмена; // см. ИнтерфейсДокументовЭДОКлиентСервер.ПараметрыОбменаЭДОДляСозданияДокументаПоФайлу
	НастройкиОтправкиПоСторонам = Неопределено;
	НастройкиОтправкиОбщие = Неопределено;
	НеАктивныеНастройки = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НеАктивныеНастройкиОтправкиВида(ВидДокументаДО);
	СтороныОбменаЭДО.ЕстьСтороныИсключения = НеАктивныеНастройки.ЕстьНеАктивныеНастройки;
	СтороныОбменаЭДО.СтороныИсключения = НеАктивныеНастройки.НеАктивныеСтороны;
	Если СтороныОбменаЭДО.ЕстьСтороныИсключения Тогда
		ЗаполнитьСтороныОбменаЭДОПоНастройкамОтправки(СтороныОбменаЭДО);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтороныОбменаЭДО.Получатель) И ЗначениеЗаполнено(СтороныОбменаЭДО.Отправитель) Тогда
		НастройкиОтправкиПоСторонам = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента(
			СтороныОбменаЭДО.Отправитель, СтороныОбменаЭДО.Получатель, ВидДокументаДО, Ложь);
	КонецЕсли;
	
	Если НастройкиОтправкиПоСторонам <> Неопределено Тогда
		Если Не НастройкиОтправкиПоСторонам.Отправлять Тогда			
			СтороныОбменаЭДО.Отправитель = Справочники.Организации.ПустаяСсылка();
			СтороныОбменаЭДО.Получатель = Неопределено;
			НастройкиОтправкиОбщие = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.
				ОбщиеНастройкиОтправкиВидаДокумента(ВидДокументаДО);
		Иначе
			ПараметрыСозданияДокумента.ВидДокумента = НастройкиОтправкиПоСторонам.ВидДокументаЭДО;		
			ДополнительныеПараметры.Формат = НастройкиОтправкиПоСторонам.Формат;
			ПараметрыОбмена.ТребуетсяИзвещениеОПолучении = 
				НастройкиОтправкиПоСторонам.ТребуетсяИзвещениеОПолучении;
			ПараметрыОбмена.ТребуетсяОтветнаяПодпись = 
				НастройкиОтправкиПоСторонам.ТребуетсяОтветнаяПодпись;
			ДополнительныеПараметры.ЭтоФормализованныйДокумент = ЭтоФормализованныйДокумент(НастройкиОтправкиПоСторонам.
				ВидДокументаЭДО);	
		КонецЕсли;
	Иначе
		НастройкиОтправкиОбщие = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.ОбщиеНастройкиОтправкиВидаДокумента(
			ВидДокументаДО);
	КонецЕсли;
	
	Если НастройкиОтправкиОбщие <> Неопределено Тогда
		ПараметрыСозданияДокумента.ВидДокумента = НастройкиОтправкиОбщие.ВидДокументаЭДО;
		ДополнительныеПараметры.Формат = НастройкиОтправкиОбщие.Формат;
		ПараметрыОбмена.ТребуетсяИзвещениеОПолучении = НастройкиОтправкиОбщие.ТребуетсяИзвещениеОПолучении;
		ПараметрыОбмена.ТребуетсяОтветнаяПодпись = НастройкиОтправкиОбщие.ТребуетсяОтветнаяПодпись;
		ДополнительныеПараметры.ЭтоФормализованныйДокумент = ЭтоФормализованныйДокумент(НастройкиОтправкиОбщие.
				ВидДокументаЭДО);
	КонецЕсли;		
	
	Если СтороныОбменаЭДО.ЕстьСтороныИсключения Тогда
		Если СтороныОбменаЭДО.Отправители.Количество() = 0
			И СтороныОбменаЭДО.Получатели.Количество() = 0 Тогда
			ЗаполнитьСтороныОбменаЭДОПоНастройкамОтправки(СтороныОбменаЭДО, Ложь);
		КонецЕсли;
		СтороныОбменаЭДО.СтороныИсключения = ОбщегоНазначения.ТаблицаЗначенийВМассив(
			НеАктивныеНастройки.НеАктивныеСтороны);
	КонецЕсли;
	ПараметрыСозданияДокумента.Организация = СтороныОбменаЭДО.Отправитель;
	ПараметрыСозданияДокумента.Контрагент = СтороныОбменаЭДО.Получатель;
			
	ЗаполнитьИдентификаторыСторонОбмена(НастройкиОтправкиПоСторонам, СтороныОбменаЭДО);
	ЗаполнитьЗначенияСвойств(ПараметрыОбмена, СтороныОбменаЭДО);
	ДополнительныеПараметры.СтороныОбмена = СтороныОбменаЭДО;
	
КонецПроцедуры	

// Заполняет стороны обмена ЭДО по настройкам отправки, если есть не активные настройки
// 
// Параметры:
//  СтороныОбменаЭДО - см. НоваяСтруктураСторонОбмена 
//  Отбор - Булево
//
Процедура ЗаполнитьСтороныОбменаЭДОПоНастройкамОтправки(СтороныОбменаЭДО, Отбор = Истина)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_НеАктивныеСтороны.Отправитель,
		|	ВТ_НеАктивныеСтороны.Получатель
		|ПОМЕСТИТЬ ВТ_Исключения
		|ИЗ
		|	&ВТ_НеАктивныеСтороны КАК ВТ_НеАктивныеСтороны
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Организация КАК Отправитель,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Получатель
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исключения КАК ВТ_Исключения
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.Организация = ВТ_Исключения.Отправитель
		|		И ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент = ВТ_Исключения.Получатель
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)
		|	И ВТ_Исключения.Отправитель ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ВТ_НеАктивныеСтороны", СтороныОбменаЭДО.СтороныИсключения);
	Если Отбор И СтороныОбменаЭДО.Отправители.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + " И ПриглашенияКОбменуЭлектроннымиДокументами.Организация В (&Отправители)";
		Запрос.УстановитьПараметр("Отправители", СтороныОбменаЭДО.Отправители);
	КонецЕсли;
	Если Отбор И СтороныОбменаЭДО.Получатели.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + " И ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент В (&Получатели)";
		Запрос.УстановитьПараметр("Получатели", СтороныОбменаЭДО.Получатели);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтороныОбменаЭДО.Отправители.Очистить();
	СтороныОбменаЭДО.Получатели.Очистить();
	Если Отбор Тогда
		СтороныОбменаЭДО.Отправитель = Справочники.Организации.ПустаяСсылка();
		СтороныОбменаЭДО.Получатель = Неопределено;
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Если СтороныОбменаЭДО.Отправители.Найти(Выборка.Отправитель) = Неопределено Тогда
			СтороныОбменаЭДО.Отправители.Добавить(Выборка.Отправитель);
		КонецЕсли;	
		Если СтороныОбменаЭДО.Получатели.Найти(Выборка.Получатель) = Неопределено Тогда
			СтороныОбменаЭДО.Получатели.Добавить(Выборка.Получатель);
		КонецЕсли;	
	КонецЦикла;
	
	Если Отбор И СтороныОбменаЭДО.Отправители.Количество() = 1 Тогда
		СтороныОбменаЭДО.Отправитель = СтороныОбменаЭДО.Отправители[0];
	КонецЕсли;	
	Если  Отбор И СтороныОбменаЭДО.Получатели.Количество() = 1 Тогда
		СтороныОбменаЭДО.Получатель = СтороныОбменаЭДО.Получатели[0];
	КонецЕсли;	
	
КонецПроцедуры	

// Заполнить идентификаторы сторон обмена.
// 
// Параметры:
//  НастройкиОтправкиПоСторонам - см. РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента
//  СтороныОбменаЭДО - см. НоваяСтруктураСторонОбмена
//
Процедура ЗаполнитьИдентификаторыСторонОбмена(НастройкиОтправкиПоСторонам, СтороныОбменаЭДО)
	
	Если НастройкиОтправкиПоСторонам <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтороныОбменаЭДО, НастройкиОтправкиПоСторонам,
			"ИдентификаторОтправителя, ИдентификаторПолучателя");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтороныОбменаЭДО.Отправитель) Тогда
		ИдентификаторыПолучателяОтбор = ?(ЗначениеЗаполнено(СтороныОбменаЭДО.ИдентификаторПолучателя),
			СтороныОбменаЭДО.ИдентификаторПолучателя, Неопределено);
		ИдентификаторыОтправителя = ОбменЭДОДокументооборот.ИдентификаторыОтправителя(СтороныОбменаЭДО.Отправитель,
			СтороныОбменаЭДО.Получатель, ИдентификаторыПолучателяОтбор);
		СтороныОбменаЭДО.ИдентификаторыОтправителя = ИдентификаторыОтправителя;	
		Если Не ЗначениеЗаполнено(СтороныОбменаЭДО.ИдентификаторОтправителя)
			И ИдентификаторыОтправителя.Количество() = 1 Тогда
			СтороныОбменаЭДО.ИдентификаторОтправителя = ИдентификаторыОтправителя[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтороныОбменаЭДО.Получатель) Тогда
		ИдентификаторыОтправителяОтбор = ?(ЗначениеЗаполнено(СтороныОбменаЭДО.ИдентификаторОтправителя),
			СтороныОбменаЭДО.ИдентификаторОтправителя, Неопределено);
		ИдентификаторыПолучателя = ОбменЭДОДокументооборот.ИдентификаторыПолучателя(СтороныОбменаЭДО.Отправитель,
			СтороныОбменаЭДО.Получатель, ИдентификаторыОтправителяОтбор);
		СтороныОбменаЭДО.ИдентификаторыПолучателя = ИдентификаторыПолучателя;
		Если Не ЗначениеЗаполнено(СтороныОбменаЭДО.ИдентификаторПолучателя)
			И ИдентификаторыПолучателя.Количество() = 1 Тогда
			СтороныОбменаЭДО.ИдентификаторПолучателя = ИдентификаторыПолучателя[0].Значение;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает файл к отправке по ЭДО
// 
// Параметры:
//  ДокументДО - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО
//  ВидДокумента - СправочникССылка.ВидыДокументов
// 
// Возвращаемое значение:
//  СправочникСсылка.Файлы
//
Функция ФайлЭД(ДокументДО, ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыДокументовРолиФайлов.Роль
		|ПОМЕСТИТЬ ВТ_Роли
		|ИЗ
		|	Справочник.ВидыДокументов.РолиФайлов КАК ВидыДокументовРолиФайлов
		|ГДЕ
		|	ВидыДокументовРолиФайлов.Ссылка = &ВидДокумента
		|	И ВидыДокументовРолиФайлов.ТолькоОдинФайл
		|	И ВидыДокументовРолиФайлов.ФайлЭлектронногоДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Файлы.Ссылка КАК Файл
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО Файлы.Ссылка = СлужебныеФайлыДокументов.Файл
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Роли КАК ВТ_Роли
		|			ПО ВТ_Роли.Роль = РолиФайловДокументов.Роль
		|		ПО РолиФайловДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	НЕ Файлы.ПометкаУдаления
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|	И Файлы.ВладелецФайла = &ДокументДО";
	
	Запрос.УстановитьПараметр("ДокументДО", ДокументДО);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Файл;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Файл
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО Файлы.Ссылка = СлужебныеФайлыДокументов.Файл
	|ГДЕ
	|	НЕ Файлы.ПометкаУдаления
	|	И Файлы.ВладелецФайла = &ДокументДО
	|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";

	Запрос.УстановитьПараметр("ДокументДО", ДокументДО);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Файл;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

// Это формализованный документ.
// 
// Параметры:
//  ВидЭД - СправочникСсылка.ВидыДокументовЭДО -
// 
// Возвращаемое значение:
//  Булево - Это формализованный документ
//
Функция ЭтоФормализованныйДокумент(ВидЭД)
	
	ФорматыЭД = ЭлектронныеДокументыЭДО.ФорматыЭлектронныхДокументов();
	ОтборФормата = Новый Структура("ВидДокумента", ВидЭД);
	СтрокиФормата = ФорматыЭД.НайтиСтроки(ОтборФормата);

	Возврат СтрокиФормата.Количество() > 0;

КонецФункции	

#КонецОбласти

#Область ЗаполнениеПараметровФормыПоЭДО

#Область СозданиеРеквизитовФормы

Процедура СоздатьРеквизитыПоЭДОПриНеобходимости(Форма)
	
	НеобходимыеРеквизиты = НеобходимыеРеквизитыДляЭДО();
	ДобавляемыеРеквизиты = Новый Массив; // Массив Из РеквизитФормы
	
	Для Каждого Реквизит Из НеобходимыеРеквизиты Цикл
		
		Если ЕстьРеквизитФормы(Форма, Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
			Реквизит.Имя, Реквизит.Тип, Реквизит.Путь, Реквизит.Заголовок, Реквизит.СохраняемыеДанные));
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, );
	
КонецПроцедуры

Функция ЕстьРеквизитФормы(Форма, Реквизит)
	
	Если Не ЗначениеЗаполнено(Реквизит.Путь) Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, Реквизит.Имя);
	КонецЕсли;
	
	РеквизитыТаблицы = Форма.ПолучитьРеквизиты(Реквизит.Путь);
	
	Для Каждого Элемент Из РеквизитыТаблицы Цикл
		Если Элемент.Имя = Реквизит.Имя Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Необходимые реквизиты для ЭДО.
// 
// Возвращаемое значение:
//  Массив Из см. НовоеОписаниеРеквизита
//
Функция НеобходимыеРеквизитыДляЭДО()
	
	НеобходимыеРеквизиты = Новый Массив; // Массив из см. НовоеОписаниеРеквизита
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "ЕстьЭДО";
	Реквизит.Тип = Новый ОписаниеТипов("Булево");
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "ПодписанЭДО";
	Реквизит.Тип = Новый ОписаниеТипов("Булево");
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "ТипДокументаЭДО";
	Реквизит.Тип = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО");
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "НаправлениеЭДО";
	Реквизит.Тип = Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭДО");
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "СостояниеПоЭДО";
	Реквизит.Тип = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЭДОДокументооборот");
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "ДоступнаКорректировкаЭД";
	Реквизит.Тип = Новый ОписаниеТипов("Булево");
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "ИдентификаторПакетаЭДО";
	Реквизит.Тип = Новый ОписаниеТипов("УникальныйИдентификатор");
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "МожноМенятьПакетЭДО";
	Реквизит.Тип = Новый ОписаниеТипов("Булево");
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "ПоддерживаетсяПакетнаяОбработкаЭДО";
	Реквизит.Тип = Новый ОписаниеТипов("Булево");
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "ДокументЭДО";
	Реквизит.Тип = ОписаниеТипаДокументаЭДО();
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "ПакетЭДОНеОтражен";
	Реквизит.Тип = Новый ОписаниеТипов("Булево");
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеобходимыеРеквизиты,
		РеквизитыТаблицыСертификатов());
	
	Возврат НеобходимыеРеквизиты;
	
КонецФункции

Функция ОписаниеТипаДокументаЭДО()
	
	Типы = Новый Массив; // Массив Из Тип
	Типы.Добавить(Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО"));
	Типы.Добавить(Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО"));
	
	Возврат Новый ОписаниеТипов(Типы);
	
КонецФункции

Функция РеквизитыТаблицыСертификатов()
	
	НеобходимыеРеквизиты = Новый Массив; // Массив из см. НовоеОписаниеРеквизита
	
	ИмяТаблицыСертификатов = "СертификатыДляЭДО";
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "ДоступенДляЭДО";
	Реквизит.Тип = Новый ОписаниеТипов("Булево");
	Реквизит.Путь = ИмяТаблицыСертификатов;
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "Отпечаток";
	Реквизит.Тип = Новый ОписаниеТипов("Строка");
	Реквизит.Путь = ИмяТаблицыСертификатов;
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "Доверенность";
	Реквизит.Тип = Метаданные.ОпределяемыеТипы.МашиночитаемаяДоверенность.Тип;
	Реквизит.Путь = ИмяТаблицыСертификатов;
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "ДоступенНаКлиенте";
	Реквизит.Тип = Новый ОписаниеТипов("Булево");
	Реквизит.Путь = ИмяТаблицыСертификатов;
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизита();
	Реквизит.Имя = "ДоступенНаСервере";
	Реквизит.Тип = Новый ОписаниеТипов("Булево");
	Реквизит.Путь = ИмяТаблицыСертификатов;
	НеобходимыеРеквизиты.Добавить(Реквизит);
	
	Возврат НеобходимыеРеквизиты;
	
КонецФункции

// Новое описание реквизита.
// 
// Возвращаемое значение:
//  Структура - Новое описание реквизита:
// * Имя - Строка
// * Тип - ОписаниеТипов
// * Путь - Строка
// * Заголовок - Строка
// * СохраняемыеДанные - Булево
Функция НовоеОписаниеРеквизита()
	
	ОписаниеРеквизита = Новый Структура;
	ОписаниеРеквизита.Вставить("Имя", "");
	ОписаниеРеквизита.Вставить("Тип", Новый ОписаниеТипов);
	ОписаниеРеквизита.Вставить("Путь", "");
	ОписаниеРеквизита.Вставить("Заголовок", "");
	ОписаниеРеквизита.Вставить("СохраняемыеДанные", Ложь);
	
	Возврат ОписаниеРеквизита;
	
КонецФункции

	
#КонецОбласти

Процедура СброситьПараметрыФормыПоЭДО(Форма)
	
	Форма.ЕстьЭДО = Ложь;
		
	Форма.ТипДокументаЭДО = Перечисления.ТипыДокументовЭДО.ПустаяСсылка();
	Форма.НаправлениеЭДО = Перечисления.НаправленияЭДО.ПустаяСсылка();
	Форма.СостояниеПоЭДО = Перечисления.СостоянияЭДОДокументооборот.ПустаяСсылка();
	Форма.ПодписанЭДО = Ложь;
	Форма.ДоступнаКорректировкаЭД = Ложь;
	Форма.ДокументЭДО = Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка();
	
	Форма.ИдентификаторПакетаЭДО = УникальныйИдентификаторПустой();
	Форма.МожноМенятьПакетЭДО = Ложь;
	Форма.ПоддерживаетсяПакетнаяОбработкаЭДО = Ложь;
	Форма.ПакетЭДОНеОтражен = Ложь;
	
	Для Каждого Строка Из Форма.СертификатыДляЭДО Цикл
		Строка.ДоступенДляЭДО = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#Область ЗаполнениеТаблицыСертификатов

Процедура ЗаполнитьТаблицуСертификатов(ДокументДО, ПараметрыЭДО, Форма)
	
	ЗаполнитьДоступностьСертификатовПоЭДО(ДокументДО, ПараметрыЭДО, Форма);
	
	ЗаполнитьДоступностьСертификатовНаСервере(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьДоступностьСертификатовПоЭДО(ДокументДО, ПараметрыЭДО, Форма)
	
	Для Каждого Строка Из Форма.СертификатыДляЭДО Цикл
		Строка.ДоступенДляЭДО = Ложь;
	КонецЦикла;
	
	Если ПараметрыЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДУчетнойЗаписи = Неопределено;
	
	Если ПараметрыЭДО.ЕстьЭД И ЗначениеЗаполнено(ПараметрыЭДО.ЭлектронныйДокумент) Тогда
		
		ИДУчетнойЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПараметрыЭДО.ЭлектронныйДокумент, "ИдентификаторОрганизации");
		
	Иначе
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументДО, "Организация, Контрагент");
		
		ВидДокументаПрочее = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			Перечисления.ТипыДокументовЭДО.Прочее);
		
		ВидДокументаЭДО = ?(ЗначениеЗаполнено(ПараметрыЭДО.ВидДокументаЭДО),
			ПараметрыЭДО.ВидДокументаЭДО,
			ВидДокументаПрочее);
		
		КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастроекОтправки.Отправитель = РеквизитыДокумента.Организация;
		КлючНастроекОтправки.Получатель = РеквизитыДокумента.Контрагент;
		КлючНастроекОтправки.ВидДокумента = ВидДокументаЭДО;
		
		НастройкаОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
		
		Если НастройкаОтправки <> Неопределено Тогда
			ИДУчетнойЗаписи = НастройкаОтправки.ИдентификаторОтправителя;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИДУчетнойЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаСертификатов = ВыборкаСертификатовПоУчетнойЗаписи(ИДУчетнойЗаписи);
	
	Пока ВыборкаСертификатов.Следующий() Цикл
		
		ОтборСертификата = Новый Структура("Отпечаток", ВыборкаСертификатов.Отпечаток);
		СтрокиСуществующие = Форма.СертификатыДляЭДО.НайтиСтроки(ОтборСертификата);
		
		Если СтрокиСуществующие.Количество() = 0 Тогда
			
			НоваяСтрока = Форма.СертификатыДляЭДО.Добавить();
			НоваяСтрока.Отпечаток = ВыборкаСертификатов.Отпечаток;
			НоваяСтрока.ДоступенДляЭДО = Истина;
			НоваяСтрока.Доверенность = ВыборкаСертификатов.Доверенность;
			
		Иначе
			
			Для Каждого СтрокаСуществующая Из СтрокиСуществующие Цикл
				СтрокаСуществующая.ДоступенДляЭДО = Истина;
				СтрокаСуществующая.Доверенность = ВыборкаСертификатов.Доверенность;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выборка сертификатов по учетной записи.
// 
// Параметры:
//  ИДУчетнойЗаписи - Строка, Неопределено - ИДУчетной записи
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    * Отпечаток - Строка
//    * Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
Функция ВыборкаСертификатовПоУчетнойЗаписи(ИДУчетнойЗаписи)
	
	ОтборСертификатов = УчетныеЗаписиЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	ОтборСертификатов.УчетныеЗаписи = "&Идентификаторы";
	ОтборСертификатов.ТолькоДействительные = Истина;
	
	Запросы = Новый Массив; // Массив Из см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей(
		"СертификатыУчетныхЗаписей", ОтборСертификатов));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СертификатыУчетныхЗаписей.Сертификат КАК Сертификат,
		|	СертификатыУчетныхЗаписей.Сертификат.Отпечаток КАК Отпечаток,
		|	СертификатыУчетныхЗаписей.Доверенность КАК Доверенность
		|ИЗ
		|	СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Идентификаторы", ИДУчетнойЗаписи);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Процедура ЗаполнитьДоступностьСертификатовНаСервере(Форма)
	
	Для Каждого Строка Из Форма.СертификатыДляЭДО Цикл
		Строка.ДоступенНаСервере = Ложь;
	КонецЦикла;
	
	Если Не ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПолучениеСертификатов", Ложь);
	
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеСертификатовКриптографии = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
		ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
	ВсеСертификаты = ХранилищеСертификатовКриптографии.ПолучитьВсе();
	
	Для Каждого Сертификат Из ВсеСертификаты Цикл
		
		Отпечаток = Base64Строка(Сертификат.Отпечаток);
		
		ОтборСертификата = Новый Структура("Отпечаток", Отпечаток);
		СтрокиСуществующие = Форма.СертификатыДляЭДО.НайтиСтроки(ОтборСертификата);
		
		Если СтрокиСуществующие.Количество() = 0 Тогда
			
			НоваяСтрока = Форма.СертификатыДляЭДО.Добавить();
			НоваяСтрока.Отпечаток = Отпечаток;
			НоваяСтрока.ДоступенНаСервере = Истина;
			
		Иначе
			
			Для Каждого СтрокаСуществующая Из СтрокиСуществующие Цикл
				СтрокаСуществующая.ДоступенНаСервере = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КомандыЭДО

#Область ШаблоныКоманд

Функция ШаблоныКомандПакетов()
	
	КомандыПакетов = Новый Структура();
	
	СоздатьПакет = НовоеОписаниеКомандыПоЭДО();
	СоздатьПакет.Область = ОбластиКомандЭДО().РаботаСПакетом;
	СоздатьПакет.Объект = ОбъектыЭДО().Документ;
	СоздатьПакет.ВыполняемыеДействия[ДействияСПакетомЭДО().СоздатьПакет] = Истина;
	СоздатьПакет.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	
	КомандыПакетов.Вставить("СоздатьПакетЭДО", СоздатьПакет);
	
	ДобавитьКПакету = НовоеОписаниеКомандыПоЭДО();
	ДобавитьКПакету.Область = ОбластиКомандЭДО().РаботаСПакетом;
	ДобавитьКПакету.Объект = ОбъектыЭДО().Документ;
	ДобавитьКПакету.ВыполняемыеДействия[ДействияСПакетомЭДО().ДобавитьКПакету] = Истина;
	ДобавитьКПакету.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	
	КомандыПакетов.Вставить("ДобавитьКПакету", ДобавитьКПакету);
	
	ИзменитьСоставПакета = НовоеОписаниеКомандыПоЭДО();
	ИзменитьСоставПакета.Область = ОбластиКомандЭДО().РаботаСПакетом;
	ИзменитьСоставПакета.Объект = ОбъектыЭДО().Документ;
	ИзменитьСоставПакета.ВыполняемыеДействия[ДействияСПакетомЭДО().ИзменитьСоставПакета] = Истина;
	ИзменитьСоставПакета.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	
	КомандыПакетов.Вставить("ИзменитьСоставПакета", ИзменитьСоставПакета);
	
	ОткрытьПакет = НовоеОписаниеКомандыПоЭДО();
	ОткрытьПакет.Область = ОбластиКомандЭДО().РаботаСПакетом;
	ОткрытьПакет.Объект = ОбъектыЭДО().Документ;
	ОткрытьПакет.ВыполняемыеДействия[ДействияСПакетомЭДО().ОткрытьПакет] = Истина;
	ИзменитьСоставПакета.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	ИзменитьСоставПакета.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Входящий] = Истина;
	
	КомандыПакетов.Вставить("ОткрытьПакет", ОткрытьПакет);
	
	Возврат КомандыПакетов;
	
КонецФункции

Функция ШаблоныКомандДействийЭДО()
	
	РазделыКоманд = Новый Структура();
	
	РазделыКоманд.Вставить("ОбработкаВходящих", ШаблоныКомандОбработкиВходящих());
	РазделыКоманд.Вставить("ОбработкаИсходящих", ШаблоныКомандОбработкиИсходящих());
	РазделыКоманд.Вставить("ПрочиеДействия", ШаблоныКомандПрочихДействийЭДО());
	
	Возврат РазделыКоманд;
	
КонецФункции

Функция ШаблоныКомандОбработкиВходящих()
	
	КомандыВходящих = Новый Структура();
	
	ПринятьДокумент = НовоеОписаниеКомандыПоЭДО();
	ПринятьДокумент.Область = ОбластиКомандЭДО().ДействияЭДО;
	ПринятьДокумент.Объект = ОбъектыЭДО().Документ;
	ПринятьДокумент.ВыполняемыеДействия[ДействияКомандЭДО().Принять] = Истина;
	ПринятьДокумент.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Входящий] = Истина;
	ПринятьДокумент.СкрыватьВОднородномПакете = Истина;
	
	КомандыВходящих.Вставить("ПринятьДокумент", ПринятьДокумент);
	
	ПринятьПакет = НовоеОписаниеКомандыПоЭДО();
	ПринятьПакет.Область = ОбластиКомандЭДО().ДействияЭДО;
	ПринятьПакет.Объект = ОбъектыЭДО().Пакет;
	ПринятьПакет.ВыполняемыеДействия[ДействияКомандЭДО().Принять] = Истина;
	ПринятьПакет.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Входящий] = Истина;
	
	КомандыВходящих.Вставить("ПринятьПакет", ПринятьПакет);
	
	ОтклонитьДокумент = НовоеОписаниеКомандыПоЭДО();
	ОтклонитьДокумент.Область = ОбластиКомандЭДО().ДействияЭДО;
	ОтклонитьДокумент.Объект = ОбъектыЭДО().Документ;
	ОтклонитьДокумент.ВыполняемыеДействия[ДействияКомандЭДО().Отклонить] = Истина;
	ОтклонитьДокумент.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Входящий] = Истина;
	ОтклонитьДокумент.СкрыватьВОднородномПакете = Истина;
	
	КомандыВходящих.Вставить("ОтклонитьДокумент", ОтклонитьДокумент);
	
	ОтклонитьПакет = НовоеОписаниеКомандыПоЭДО();
	ОтклонитьПакет.Область = ОбластиКомандЭДО().ДействияЭДО;
	ОтклонитьПакет.Объект = ОбъектыЭДО().Пакет;
	ОтклонитьПакет.ВыполняемыеДействия[ДействияКомандЭДО().Отклонить] = Истина;
	ОтклонитьПакет.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Входящий] = Истина;
	ОтклонитьПакет.СкрыватьВОднородномПакете = Истина;
	
	КомандыВходящих.Вставить("ОтклонитьПакет", ОтклонитьПакет);
	
	Возврат КомандыВходящих;
	
КонецФункции

Функция ШаблоныКомандОбработкиИсходящих()
	
	КомандыИсходящих = Новый Структура();
	
	ПодписатьДокумент = НовоеОписаниеКомандыПоЭДО();
	ПодписатьДокумент.Область = ОбластиКомандЭДО().ДействияЭДО;
	ПодписатьДокумент.Объект = ОбъектыЭДО().Документ;
	ПодписатьДокумент.ВыполняемыеДействия[ДействияКомандЭДО().Подписать] = Истина;
	ПодписатьДокумент.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	
	КомандыИсходящих.Вставить("ПодписатьДокумент", ПодписатьДокумент);
	
	ПодписатьИОтправитьДокумент = НовоеОписаниеКомандыПоЭДО();
	ПодписатьИОтправитьДокумент.Область = ОбластиКомандЭДО().ДействияЭДО;
	ПодписатьИОтправитьДокумент.Объект = ОбъектыЭДО().Документ;
	ПодписатьИОтправитьДокумент.ВыполняемыеДействия[ДействияКомандЭДО().Подписать] = Истина;
	ПодписатьИОтправитьДокумент.ВыполняемыеДействия[ДействияКомандЭДО().Отправить] = Истина;
	ПодписатьИОтправитьДокумент.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	
	КомандыИсходящих.Вставить("ПодписатьИОтправитьДокумент", ПодписатьИОтправитьДокумент);
	
	ОтправитьДокумент = НовоеОписаниеКомандыПоЭДО();
	ОтправитьДокумент.Область = ОбластиКомандЭДО().ДействияЭДО;
	ОтправитьДокумент.Объект = ОбъектыЭДО().Документ;
	ОтправитьДокумент.ВыполняемыеДействия[ДействияКомандЭДО().Отправить] = Истина;
	ОтправитьДокумент.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	
	КомандыИсходящих.Вставить("ОтправитьДокумент", ОтправитьДокумент);
	
	ПодписатьПакет = НовоеОписаниеКомандыПоЭДО();
	ПодписатьПакет.Область = ОбластиКомандЭДО().ДействияЭДО;
	ПодписатьПакет.Объект = ОбъектыЭДО().Пакет;
	ПодписатьПакет.ВыполняемыеДействия[ДействияКомандЭДО().Подписать] = Истина;
	ПодписатьПакет.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	
	КомандыИсходящих.Вставить("ПодписатьПакет", ПодписатьПакет);
	
	ПодписатьИОтправитьПакет = НовоеОписаниеКомандыПоЭДО();
	ПодписатьИОтправитьПакет.Область = ОбластиКомандЭДО().ДействияЭДО;
	ПодписатьИОтправитьПакет.Объект = ОбъектыЭДО().Пакет;
	ПодписатьИОтправитьПакет.ВыполняемыеДействия[ДействияКомандЭДО().Подписать] = Истина;
	ПодписатьИОтправитьПакет.ВыполняемыеДействия[ДействияКомандЭДО().Отправить] = Истина;
	ПодписатьИОтправитьПакет.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	
	КомандыИсходящих.Вставить("ПодписатьИОтправитьПакет", ПодписатьИОтправитьПакет);
	
	ОтправитьПакет = НовоеОписаниеКомандыПоЭДО();
	ОтправитьПакет.Область = ОбластиКомандЭДО().ДействияЭДО;
	ОтправитьПакет.Объект = ОбъектыЭДО().Пакет;
	ОтправитьПакет.ВыполняемыеДействия[ДействияКомандЭДО().Отправить] = Истина;
	ОтправитьПакет.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	
	КомандыИсходящих.Вставить("ОтправитьПакет", ОтправитьПакет);
	
	Возврат КомандыИсходящих;
	
КонецФункции

Функция ШаблоныКомандПрочихДействийЭДО()
	
	ПрочиеКоманды = Новый Структура;
	
	ЗакрытьПринудительно = НовоеОписаниеКомандыПоЭДО();
	ЗакрытьПринудительно.Область = ОбластиКомандЭДО().ДействияЭДО;
	ЗакрытьПринудительно.Объект = ОбъектыЭДО().Документ;
	ЗакрытьПринудительно.ВыполняемыеДействия[ДействияКомандЭДО().ЗакрытьПринудительно] = Истина;
	ЗакрытьПринудительно.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	ЗакрытьПринудительно.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Входящий] = Истина;
	
	ПрочиеКоманды.Вставить("ЗакрытьПринудительно", ЗакрытьПринудительно);
	
	ПоставитьВОчередьОтправки = НовоеОписаниеКомандыПоЭДО();
	ПоставитьВОчередьОтправки.Область = ОбластиКомандЭДО().ДействияЭДО;
	ПоставитьВОчередьОтправки.Объект = ОбъектыЭДО().Документ;
	ПоставитьВОчередьОтправки.ВыполняемыеДействия[ДействияКомандЭДО().ПоставитьВОчередьОтправки] = Истина;
	ПоставитьВОчередьОтправки.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	ПоставитьВОчередьОтправки.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Входящий] = Истина;
	
	ПрочиеКоманды.Вставить("ПоставитьВОчередьОтправки", ПоставитьВОчередьОтправки);
	
	Аннулировать = НовоеОписаниеКомандыПоЭДО();
	Аннулировать.Область = ОбластиКомандЭДО().ДействияЭДО;
	Аннулировать.Объект = ОбъектыЭДО().Документ;
	Аннулировать.ВыполняемыеДействия[ДействияКомандЭДО().Аннулировать] = Истина;
	Аннулировать.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Исходящий] = Истина;
	Аннулировать.НаправленияОбъекта[ДопустимыеНаправленияЭДО().Входящий] = Истина;
	
	ПрочиеКоманды.Вставить("Аннулировать", Аннулировать);
	
	Возврат ПрочиеКоманды;
	
КонецФункции

#КонецОбласти

Процедура СнятьВидимостьВсехКоманд(ОписаниеКоманд)
	
	Для Каждого Элемент Из ОписаниеКоманд Цикл
		
		ЭлементФормы = Элемент.Ключ;
		
		УстановитьВидимостьДоступностьЭлементаФормы(ЭлементФормы, Ложь, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьДоступностьЭлементаФормы(Элемент, Видимость, Доступность)
	
	Элемент.Видимость = Видимость;
	Элемент.Доступность = Доступность;
	
КонецПроцедуры

#Область УстановкаВидимостиИДоступностиКомандЭДО

#Область КомандыРаботыСПакетом

Процедура ВключитьВидимостьКомандРаботыСПакетом(Форма, ОписаниеКоманд)
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторПакетаЭДО) Тогда
		
		Отбор = ОтборПоДействиюОткрытьПакет();
		УстановитьВидимостьДоступностьКомандЭДОПоОтбору(ОписаниеКоманд, Отбор, Истина, Истина);
		
	КонецЕсли;
	
	Если Не Форма.ПоддерживаетсяПакетнаяОбработкаЭДО
		Или Форма.НаправлениеЭДО <> Перечисления.НаправленияЭДО.Исходящий
		Или Не СостояниеПозволяетИзменятьСоставПакета(Форма.СостояниеПоЭДО) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторПакетаЭДО) Тогда
		
		Если Не Форма.МожноМенятьПакетЭДО Тогда
			Возврат;
		КонецЕсли;
		
		Отбор = ОтборПоДействиюИзменитьСоставПакета();
		УстановитьВидимостьДоступностьКомандЭДОПоОтбору(ОписаниеКоманд, Отбор, Истина, Истина);
		
	Иначе
		
		Отбор = ОтборПоДействиямСозданияПакетаИДобавленияКПакету();
		УстановитьВидимостьДоступностьКомандЭДОПоОтбору(ОписаниеКоманд, Отбор, Истина, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеПозволяетИзменятьСоставПакета(СостояниеЭДО)
	
	Возврат СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.НеСформирован
		Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.Подписан
		Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка
		Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО;
	
КонецФункции

Функция ОтборПоДействиюОткрытьПакет()
	
	Отбор = НовыйОтборКомандЭДО();
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().Область;
	ЭлементОтбора.Значение = ОбластиКомандЭДО().РаботаСПакетом;
	Отбор.Добавить(ЭлементОтбора);
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
	ЭлементОтбора.Значение = ДействияСПакетомЭДО().ОткрытьПакет;
	Отбор.Добавить(ЭлементОтбора);
	
	Возврат Отбор;
	
КонецФункции

Функция ОтборПоДействиюИзменитьСоставПакета()
	
	Отбор = НовыйОтборКомандЭДО();
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().Область;
	ЭлементОтбора.Значение = ОбластиКомандЭДО().РаботаСПакетом;
	Отбор.Добавить(ЭлементОтбора);
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
	ЭлементОтбора.Значение = ДействияСПакетомЭДО().ИзменитьСоставПакета;
	Отбор.Добавить(ЭлементОтбора);
	
	Возврат Отбор;
	
КонецФункции

Функция ОтборПоДействиямСозданияПакетаИДобавленияКПакету()
	
	Отбор = НовыйОтборКомандЭДО();
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().Область;
	ЭлементОтбора.Значение = ОбластиКомандЭДО().РаботаСПакетом;
	Отбор.Добавить(ЭлементОтбора);
	
	ГруппаДействий = НовыйЭлементОтбораКомандЭДО();
	ГруппаДействий.ВидЭлемента = ВидыЭлементовОтбораКомандЭДО().ГруппаПоИли;
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
	ЭлементОтбора.Значение = ДействияСПакетомЭДО().СоздатьПакет;
	ГруппаДействий.ДочерниеЭлементы.Добавить(ЭлементОтбора);
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
	ЭлементОтбора.Значение = ДействияСПакетомЭДО().ДобавитьКПакету;
	ГруппаДействий.ДочерниеЭлементы.Добавить(ЭлементОтбора);
	
	Отбор.Добавить(ГруппаДействий);
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти

#Область ИсходящиеДокументы

Процедура ВключитьВидимостьКомандПоИсходящим(Форма, ОписаниеКоманд)
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторПакетаЭДО) Тогда
		ВключитьВидимостьКомандОтправкиПоИсходящемуПакету(Форма, ОписаниеКоманд);
	Иначе
		ВключитьВидимостьКомандОтправкиПоИсходящемуОдиночномуДокументу(Форма, ОписаниеКоманд);
	КонецЕсли;
	
	ВключитьВидимостьПрочихКомандИсходящегоДокумента(Форма, ОписаниеКоманд);
	
КонецПроцедуры

Процедура ВключитьВидимостьКомандОтправкиПоИсходящемуОдиночномуДокументу(Форма, ОписаниеКоманд)
	
	Если Не СостояниеДокументаЭДОПригодноДляОтправки(Форма.СостояниеПоЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = ОтборКомандОтправкиПоСостояниюЭДОИсходящегоДокумента(Форма.СостояниеПоЭДО);
	
	УстановитьВидимостьДоступностьКомандЭДОПоОтбору(ОписаниеКоманд, Отбор, Истина, Истина);
	
КонецПроцедуры

Функция СостояниеДокументаЭДОПригодноДляОтправки(Состояние)
	
	Возврат Состояние = Перечисления.СостоянияЭДОДокументооборот.НеСформирован
		Или Состояние = Перечисления.СостоянияЭДОДокументооборот.Подписан
		Или Состояние = Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку
		Или Состояние = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка;
	
КонецФункции

Функция ОтборКомандОтправкиПоСостояниюЭДОИсходящегоДокумента(Состояние)
	
	Отбор = НовыйОтборКомандЭДО();
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().НаправленияОбъекта;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
	ЭлементОтбора.Значение = ДопустимыеНаправленияЭДО().Исходящий;
	Отбор.Добавить(ЭлементОтбора);
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().Объект;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Равно;
	ЭлементОтбора.Значение = ОбъектыЭДО().Документ;
	Отбор.Добавить(ЭлементОтбора);
	
	ВозможныеСостояния = Перечисления.СостоянияЭДОДокументооборот;
	
	Если Состояние = ВозможныеСостояния.НеСформирован Тогда
		
		ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
		ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
		ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
		ЭлементОтбора.Значение = ДействияКомандЭДО().Подписать;
		Отбор.Добавить(ЭлементОтбора);
		
	ИначеЕсли Состояние = ВозможныеСостояния.Подписан
		Или Состояние = ВозможныеСостояния.ПоставленВОчередьНаОтправку
		Или Состояние = ВозможныеСостояния.ОжидаетсяОтправка Тогда
		
		ГруппаОтбора = НовыйЭлементОтбораКомандЭДО();
		ГруппаОтбора.ВидЭлемента = ВидыЭлементовОтбораКомандЭДО().ГруппаПоИ;
		
		ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
		ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
		ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().НеСодержит;
		ЭлементОтбора.Значение = ДействияКомандЭДО().Подписать;
		ГруппаОтбора.ДочерниеЭлементы.Добавить(ЭлементОтбора);
		
		ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
		ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
		ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
		ЭлементОтбора.Значение = ДействияКомандЭДО().Отправить;
		ГруппаОтбора.ДочерниеЭлементы.Добавить(ЭлементОтбора);
		
		Отбор.Добавить(ГруппаОтбора);
		
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

Процедура ВключитьВидимостьКомандОтправкиПоИсходящемуПакету(Форма, ОписаниеКоманд)
	
	НаборСостоянийДокументов = НаборСостоянийДокументовПакета(Форма.ИдентификаторПакетаЭДО);
	
	ЕстьДокументыДляПодписания = Ложь;
	ЕстьДокументыДляОтправки = Ложь;
	
	ВозможныеСостояния = Перечисления.СостоянияЭДОДокументооборот;
	Для Каждого Состояние Из НаборСостоянийДокументов Цикл
		
		Если Состояние = ВозможныеСостояния.НеСформирован Тогда
			
			ЕстьДокументыДляПодписания = Истина;
			
		ИначеЕсли Состояние = ВозможныеСостояния.Подписан
			Или Состояние = ВозможныеСостояния.ПоставленВОчередьНаОтправку
			Или Состояние = ВозможныеСостояния.ОжидаетсяОтправка
			Или Состояние = ВозможныеСостояния.ОжидаетСозданияПакетаЭДО Тогда
			
			ЕстьДокументыДляОтправки = Истина;
			
		Иначе
			
			// В пакете есть документы, которые по своему состоянию отправлены быть не могут
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = ОтборКомандОтправкиПакета(ЕстьДокументыДляПодписания, ЕстьДокументыДляОтправки);
	
	УстановитьВидимостьДоступностьКомандЭДОПоОтбору(ОписаниеКоманд, Отбор, Истина, Истина);
	
КонецПроцедуры

// Набор состояний документов пакета.
// 
// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор - Идентификатор пакета
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СостоянияЭДОДокументооборот
//
Функция НаборСостоянийДокументовПакета(ИдентификаторПакета)
	
	НаборСостояний = Новый Массив; // Массив Из ПеречислениеСсылка.СостоянияЭДОДокументооборот
	
	ИдентификаторыПакетов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПакета);
	СостоянияДокументовПакетов = ОбменСКонтрагентамиДОСлужебный.СостоянияДокументовПакетовЭДО(ИдентификаторыПакетов);
	
	УникальныеСостояния = Новый Соответствие();
	
	Для Каждого ЭлементПакета Из СостоянияДокументовПакетов Цикл
		
		СостоянияПоДокументам = ЭлементПакета.Значение;
		
		Для Каждого ЭлементДокумента Из СостоянияПоДокументам Цикл
			
			Состояние = ЭлементДокумента.Значение;
			УникальныеСостояния[Состояние] = Истина
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Элемент Из УникальныеСостояния Цикл
		Состояние = Элемент.Ключ; // ПеречислениеСсылка.СостоянияЭДОДокументооборот
		НаборСостояний.Добавить(Состояние);
	КонецЦикла;
	
	Возврат НаборСостояний;
	
КонецФункции

Функция ОтборКомандОтправкиПакета(ЕстьДокументыКПодписанию, ЕстьДокументыКОтправке)
	
	Отбор = НовыйОтборКомандЭДО();
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().НаправленияОбъекта;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
	ЭлементОтбора.Значение = ДопустимыеНаправленияЭДО().Исходящий;
	Отбор.Добавить(ЭлементОтбора);
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().Объект;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Равно;
	ЭлементОтбора.Значение = ОбъектыЭДО().Пакет;
	Отбор.Добавить(ЭлементОтбора);
	
	Если ЕстьДокументыКПодписанию Тогда
		
		ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
		ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
		ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
		ЭлементОтбора.Значение = ДействияКомандЭДО().Подписать;
		Отбор.Добавить(ЭлементОтбора);
		
	ИначеЕсли ЕстьДокументыКОтправке Тогда
		
		ГруппаОтбора = НовыйЭлементОтбораКомандЭДО();
		ГруппаОтбора.ВидЭлемента = ВидыЭлементовОтбораКомандЭДО().ГруппаПоИ;
		
		ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
		ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
		ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().НеСодержит;
		ЭлементОтбора.Значение = ДействияКомандЭДО().Подписать;
		ГруппаОтбора.ДочерниеЭлементы.Добавить(ЭлементОтбора);
		
		ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
		ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
		ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
		ЭлементОтбора.Значение = ДействияКомандЭДО().Отправить;
		ГруппаОтбора.ДочерниеЭлементы.Добавить(ЭлементОтбора);
		
		Отбор.Добавить(ГруппаОтбора);
		
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

Процедура ВключитьВидимостьПрочихКомандИсходящегоДокумента(Форма, ОписаниеКоманд)
	
	Если Не ДляСостоянияДокументаЕстьПрочиеКоманды(Форма.СостояниеПоЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = ОтборПрочихКомандЭДОИсходящегоДокумента(Форма.СостояниеПоЭДО);
	
	УстановитьВидимостьДоступностьКомандЭДОПоОтбору(ОписаниеКоманд, Отбор, Истина, Истина);
	
КонецПроцедуры

Функция ДляСостоянияДокументаЕстьПрочиеКоманды(Состояние)
	
	Возврат Состояние = Перечисления.СостоянияЭДОДокументооборот.ОшибкаПередачи;
	
КонецФункции

Функция ОтборПрочихКомандЭДОИсходящегоДокумента(Состояние)
	
	Отбор = НовыйОтборКомандЭДО();
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().НаправленияОбъекта;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
	ЭлементОтбора.Значение = ДопустимыеНаправленияЭДО().Исходящий;
	Отбор.Добавить(ЭлементОтбора);
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().Объект;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Равно;
	ЭлементОтбора.Значение = ОбъектыЭДО().Документ;
	Отбор.Добавить(ЭлементОтбора);
	
	ВозможныеСостояния = Перечисления.СостоянияЭДОДокументооборот;
	
	Если Состояние = ВозможныеСостояния.ОшибкаПередачи Тогда
		
		ГруппаОтбора = НовыйЭлементОтбораКомандЭДО();
		ГруппаОтбора.ВидЭлемента = ВидыЭлементовОтбораКомандЭДО().ГруппаПоИли;
		
		ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
		ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
		ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
		ЭлементОтбора.Значение = ДействияКомандЭДО().ЗакрытьПринудительно;
		ГруппаОтбора.ДочерниеЭлементы.Добавить(ЭлементОтбора);
		
		ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
		ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
		ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
		ЭлементОтбора.Значение = ДействияКомандЭДО().ПоставитьВОчередьОтправки;
		ГруппаОтбора.ДочерниеЭлементы.Добавить(ЭлементОтбора);
		
		Отбор.Добавить(ГруппаОтбора);
		
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти

#Область ВходящиеДокументы

Процедура ВключитьВидимостьКомандПоВходящим(Форма, ОписаниеКоманд)
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторПакетаЭДО) Тогда
		
		ВключитьВидимостьКомандВходящегоПакета(Форма, ОписаниеКоманд);
		
	Иначе
		
		ВключитьВидимостьКомандПоВходящемуДокументу(Форма, ОписаниеКоманд);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьВидимостьКомандПоВходящемуДокументу(Форма, ОписаниеКоманд, ТолькоДополнительные = Ложь)
	
	Если Не ЗначениеЗаполнено(Форма.ДокументЭДО)
		Или ТипЗнч(Форма.ДокументЭДО) <> Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваИСостояниеДокумента = СвойстваИСостояниеВходящегоДокументаЭДО(Форма.ДокументЭДО);
	ДействияДляДокументаЭДО = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(
		СвойстваИСостояниеДокумента.Состояние, СвойстваИСостояниеДокумента.СвойстваДокумента);
	
	Отбор = ОтборКомандВходящегоДокументаПоДействиямИСостояниюДокументаЭДО(
		ДействияДляДокументаЭДО, СвойстваИСостояниеДокумента.Состояние, ТолькоДополнительные);
	
	УстановитьВидимостьДоступностьКомандЭДОПоОтбору(ОписаниеКоманд, Отбор, Истина, Истина);
	
КонецПроцедуры

Функция СвойстваИСостояниеВходящегоДокументаЭДО(ДокументЭДО)
	
	СвойстваИСостояние = Новый Структура();
	
	СвойстваДокумента = Новый Структура();
	СвойстваДокумента.Вставить("Ссылка", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	СвойстваДокумента.Вставить("НаОзнакомлении", Ложь);
	СвойстваДокумента.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	СвойстваДокумента.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	
	СвойстваИСостояние.Вставить("СвойстваДокумента", СвойстваДокумента);
	
	СвойстваИСостояние.Вставить("Состояние", РегламентыЭДО.НачальноеСостояниеДокумента());
	
	Выборка = ВыборкаПоСвойствамИСостояниюДокумента(ДокументЭДО);
	
	Если Не Выборка.Следующий() Тогда
		Возврат СвойстваИСостояние;
	КонецЕсли;
	
	СвойстваДокумента.Ссылка = Выборка.Ссылка;
	СвойстваДокумента.НаОзнакомлении = Выборка.НаОзнакомлении;
	СвойстваДокумента.СпособОбмена = Выборка.СпособОбмена;
	СвойстваДокумента.ВидДокумента = Выборка.ВидДокумента;
	
	Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
		СвойстваИСостояние.Состояние = Выборка.Состояние;
	КонецЕсли;
	
	Возврат СвойстваИСостояние;
	
КонецФункции

// Выборка по свойствам и состоянию документа.
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Документ ЭДО
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//    * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//    * НаОзнакомлении - Булево
//    * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//    * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//    * Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
Функция ВыборкаПоСвойствамИСостояниюДокумента(ДокументЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.НаОзнакомлении КАК НаОзнакомлении,
		|	ЭлектронныйДокументВходящийЭДО.СпособОбмена КАК СпособОбмена,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЕСТЬNULL(СостоянияДокументовЭДО.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК Состояние
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка = &ДокументЭДО";
	Запрос.УстановитьПараметр("ДокументЭДО", ДокументЭДО);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ОтборКомандВходящегоДокументаПоДействиямИСостояниюДокументаЭДО(Действия, Состояние, ТолькоДополнительные)
	
	Отбор = НовыйОтборКомандЭДО();
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().Объект;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Равно;
	ЭлементОтбора.Значение = ОбъектыЭДО().Документ;
	Отбор.Добавить(ЭлементОтбора);
	
	Если ТолькоДополнительные Тогда
		
		ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
		ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().СкрыватьВОднородномПакете;
		ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Равно;
		ЭлементОтбора.Значение = Ложь;
		Отбор.Добавить(ЭлементОтбора);
		
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбораВходящихПоДействиямИСостоянию(Действия, Состояние) Цикл
		Отбор.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат Отбор;
	
КонецФункции

// Элементы отбора входящих по действиям и состоянию.
// 
// Параметры:
//  Действия - см. ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО - Состояние
// 
// Возвращаемое значение:
//  Массив из см. НовыйЭлементОтбораКомандЭДО
Функция ЭлементыОтбораВходящихПоДействиямИСостоянию(Действия, Состояние)
	
	ЭлементыОтбора = НовыеЭлементыОтбораВходящихДокументовПоДействиямИСостоянию();
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().НаправленияОбъекта;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
	ЭлементОтбора.Значение = ДопустимыеНаправленияЭДО().Входящий;
	ЭлементыОтбора.Добавить(ЭлементОтбора);
	
	ГруппаОтбораДействий = НовыйЭлементОтбораКомандЭДО();
	ГруппаОтбораДействий.ВидЭлемента = ВидыЭлементовОтбораКомандЭДО().ГруппаПоИли;
	
	Если ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ВходящийДокументМожноПринять(Действия, Состояние) Тогда
		
		ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
		ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
		ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
		ЭлементОтбора.Значение = ДействияКомандЭДО().Принять;
		ГруппаОтбораДействий.ДочерниеЭлементы.Добавить(ЭлементОтбора);
		
	КонецЕсли;
	
	Если ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ВходящийДокументМожноОтклонить(Действия, Состояние) Тогда
		
		ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
		ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия;
		ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит;
		ЭлементОтбора.Значение = ДействияКомандЭДО().Отклонить;
		ГруппаОтбораДействий.ДочерниеЭлементы.Добавить(ЭлементОтбора);
		
	КонецЕсли;
	
	ЭлементыОтбора.Добавить(ГруппаОтбораДействий);
	
	Возврат ЭлементыОтбора;
	
КонецФункции

Процедура ВключитьВидимостьКомандВходящегоПакета(Форма, ОписаниеКоманд)
	
	ДанныеПакета = ОбменСКонтрагентамиДОСлужебный.ДанныеПакетаДокументов(Форма.ИдентификаторПакетаЭДО);
	Если ДанныеПакета.Направление <> Перечисления.НаправленияЭДО.Входящий Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияДокументов = ПакетыДокументовЭДО.СостоянияДокументовПакета(ДанныеПакета.ИдентификаторПакетаБЭД);
	СостояниеПакета = ПакетыДокументовЭДО.СостояниеПакета(СостоянияДокументов);
	СостояниеПакетаОднородно = ЗначениеЗаполнено(СостояниеПакета);
	
	Если СостояниеПакетаОднородно Тогда
		
		СвойстваИСостояниеДокумента = СвойстваИСостояниеВходящегоДокументаЭДО(Форма.ДокументЭДО);
		ДействияДляПакетаЭДО = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(
			СостояниеПакета, СвойстваИСостояниеДокумента.СвойстваДокумента);
		
		Отбор = ОтборКомандВходящегоПакетаПоДействиямИСостояниюДокументаЭДО(ДействияДляПакетаЭДО, СостояниеПакета);
		
		ДоступныКомандыПакета = Не Форма.ПакетЭДОНеОтражен;
		
		УстановитьВидимостьДоступностьКомандЭДОПоОтбору(ОписаниеКоманд, Отбор, Истина, ДоступныКомандыПакета);
		
		// Только дополнительные команды для документа
		ВключитьВидимостьКомандПоВходящемуДокументу(Форма, ОписаниеКоманд, Истина);
		
	Иначе
		
		// Если пакет не однороден, то действие по каждому документу индивидуально, показываем как для обычного документа.
		ВключитьВидимостьКомандПоВходящемуДокументу(Форма, ОписаниеКоманд);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтборКомандВходящегоПакетаПоДействиямИСостояниюДокументаЭДО(Действия, Состояние)
	
	Отбор = НовыйОтборКомандЭДО();
	
	ЭлементОтбора = НовыйЭлементОтбораКомандЭДО();
	ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().Объект;
	ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Равно;
	ЭлементОтбора.Значение = ОбъектыЭДО().Пакет;
	Отбор.Добавить(ЭлементОтбора);
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбораВходящихПоДействиямИСостоянию(Действия, Состояние) Цикл
		Отбор.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат Отбор;
	
КонецФункции

// Новые элементы отбора входящих документов по действиям и состоянию.
// 
// Возвращаемое значение:
//  Массив Из см. НовыйЭлементОтбораКомандЭДО
Функция НовыеЭлементыОтбораВходящихДокументовПоДействиямИСостоянию()
	
	Возврат Новый Массив();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОтборыКоманд

// Команда соответствует отбору.
// 
// Параметры:
//  ОписаниеКоманды - см. НовоеОписаниеКомандыПоЭДО
//  Отбор - см. НовыйОтборКомандЭДО
// 
// Возвращаемое значение:
//  Булево
Функция КомандаСоответствуетОтбору(ОписаниеКоманды, Отбор)
	
	Для Каждого Элемент Из Отбор Цикл
		
		Если Не КомандаСоответствуетЭлементуОтбора(ОписаниеКоманды, Элемент) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Команда соответствует элементу отбора.
// 
// Параметры:
//  ОписаниеКоманды см. НовоеОписаниеКомандыПоЭДО
//  ЭлементОтбора см. НовыйЭлементОтбораКомандЭДО
// 
// Возвращаемое значение:
//  Булево
Функция КомандаСоответствуетЭлементуОтбора(ОписаниеКоманды, ЭлементОтбора)
	
	Если ЭлементОтбора.ВидЭлемента = ВидыЭлементовОтбораКомандЭДО().Элемент Тогда
		
		Возврат КомандаСоответствуетПростомуЭлементуОтбора(ОписаниеКоманды, ЭлементОтбора);
		
	ИначеЕсли ЭлементОтбора.ВидЭлемента = ВидыЭлементовОтбораКомандЭДО().ГруппаПоИ Тогда
		
		Для Каждого ДочернийЭлемент Из ЭлементОтбора.ДочерниеЭлементы Цикл
			Если Не КомандаСоответствуетЭлементуОтбора(ОписаниеКоманды, ДочернийЭлемент) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	ИначеЕсли ЭлементОтбора.ВидЭлемента = ВидыЭлементовОтбораКомандЭДО().ГруппаПоИли Тогда
		
		Для Каждого ДочернийЭлемент Из ЭлементОтбора.ДочерниеЭлементы Цикл
			Если КомандаСоответствуетЭлементуОтбора(ОписаниеКоманды, ДочернийЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Указан некорректный вид отбора команд ЭДО'");
		
	КонецЕсли;
	
КонецФункции

Функция КомандаСоответствуетПростомуЭлементуОтбора(ОписаниеКоманды, ЭлементОтбора)
	
	Если ЭлементОтбора.ВидЭлемента <> ВидыЭлементовОтбораКомандЭДО().Элемент Тогда
		ВызватьИсключение НСтр("ru = 'Указан некорректрый вид отбора команд ЭДО'");
	КонецЕсли;
	
	Если ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().Область
		Или ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().Объект
		Или ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().СкрыватьВОднородномПакете Тогда
		
		Если ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Равно Тогда
			Возврат (ОписаниеКоманды[ЭлементОтбора.Ключ] = ЭлементОтбора.Значение);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().НеРавно Тогда
			Возврат (ОписаниеКоманды[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение);
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректный вид сравнения отбора команд ЭДО для указанного ключа'");
		КонецЕсли;
		
	ИначеЕсли ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().ВыполняемыеДействия
		Или ЭлементОтбора.Ключ = КлючиОтбораКомандЭДО().НаправленияОбъекта Тогда
		
		Если ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().Содержит Тогда
			Возврат (ОписаниеКоманды[ЭлементОтбора.Ключ][ЭлементОтбора.Значение] = Истина);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидыСравненияЭлементовОтбораКомандЭДО().НеСодержит Тогда
			Возврат (ОписаниеКоманды[ЭлементОтбора.Ключ][ЭлементОтбора.Значение] <> Истина);
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректный вид сравнения отбора команд ЭДО для указанного ключа'");
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Некорректный ключ отбора команд ЭДО'");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти


