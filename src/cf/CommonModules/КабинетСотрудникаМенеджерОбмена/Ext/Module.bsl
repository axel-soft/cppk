// @strict-types


#Область СлужебныйПрограммныйИнтерфейс

// Результат выполнения обмена.
// 
// Параметры:
//  ВестиПротокол - Булево
// 
// Возвращаемое значение:
//  Булево - Были ошибки
//
Функция РезультатВыполненияОбмена(ВестиПротокол) Экспорт
	
	ЗаписатьСобытиеНачалоОбмена();
	
	БылиОшибки = Ложь;
	
	Попытка
		
		// Сейчас реализация для одного экземпляра сервиса Кабинет сотрудника.
		Сервис = Справочники.СервисыВнешнегоПодписания.КабинетСотрудника;
		ПараметрыОбмена = ПараметрыОбмена(Сервис, ВестиПротокол);
		
		ОпубликоватьУдалениеДокументов(ПараметрыОбмена, БылиОшибки);
		ЗагрузитьИзмененияИзСервиса(ПараметрыОбмена, БылиОшибки);
		ОпубликоватьИзмененияДокументов(ПараметрыОбмена, БылиОшибки);
		
	Исключение
		
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ЗаписатьСобытиеОкончаниеОбмена(БылиОшибки);
	
	Возврат БылиОшибки;
	
КонецФункции

// Проверить подключенине по адресу экземпляра сервиса и ключам.
// 
// Параметры:
//  АдресПриложения      - Строка - Адрес приложения
//  ИдентификаторКлиента - Строка - Идентификатор клиента
//  СекретКлиента        - Строка - Секрет клиента
// 
// Возвращаемое значение:
//  Булево
//
Функция ПроверитьПодключениеПоАдресуИКлючам(АдресПриложения, ИдентификаторКлиента, СекретКлиента) Экспорт
	
	Возврат ПроверитьДоступностьПоАдресуИКлючам(АдресПриложения, ИдентификаторКлиента, СекретКлиента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеОбмена

#Область ПубликацияУдаления

Процедура ОпубликоватьУдалениеДокументов(ПараметрыОбмена, БылиОшибки)
	
	Выборка = ВыборкаДокументыКУдалению();
	Если Выборка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдаленныеДокументы = Новый Массив; // Массив Из ДокументСсылка.СведенияОВнешнемПодписании
	
	Пока Выборка.Следующий() Цикл
		
		РесурсСервиса = РесурсДокументыНаПодпись();
		
		Если РезультатУдаленияОбъектаИзСервиса(ПараметрыОбмена, РесурсСервиса, Выборка.ИдентификаторДокумента) Тогда
			УдаленныеДокументы.Добавить(Выборка.СведенияОВнешнемПодписании);
		Иначе
			БылиОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	КабинетСотрудника.ОтметитьУдалёнными(УдаленныеДокументы);
	
КонецПроцедуры

Функция РезультатУдаленияОбъектаИзСервиса(ПараметрыОбмена, Знач РесурсСервиса, ИдентификаторОбъекта)
	
	РесурсСервиса = СтрШаблон("%1/%2", РесурсСервиса , ИдентификаторОбъекта);
	
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, РесурсСервиса, "DELETE");
	Если Ответ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 204 Или Ответ.КодСостояния = 404 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выборка документы к удалению.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса, Неопределено - Выборка документы к удалению:
//   * ИдентификаторДокумента - Строка
//   * СведенияОВнешнемПодписании - ДокументСсылка.СведенияОВнешнемПодписании
// 
Функция ВыборкаДокументыКУдалению()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОВнешнемПодписании.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	СведенияОВнешнемПодписании.Ссылка КАК СведенияОВнешнемПодписании
	|ИЗ
	|	РегистрСведений.ДокументыКУдалениюКабинетСотрудника КАК ДокументыКУдалениюКабинетСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СведенияОВнешнемПодписании КАК СведенияОВнешнемПодписании
	|		ПО ДокументыКУдалениюКабинетСотрудника.Документ = СведенияОВнешнемПодписании.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаИзменений

Процедура ЗагрузитьИзмененияИзСервиса(ПараметрыОбмена, БылиОшибки)
	
	Лимит = 100;
	Результат = НовыйРезультатЗагрузкиИзменений();
	
	ПервыйЗапрос = Истина;
	Пока ПервыйЗапрос Или Не Результат.БылиОшибки И Результат.КоличествоОбъектов = Лимит Цикл
		
		ПервыйЗапрос = Ложь;
		Результат.КоличествоОбъектов = 0;
		
		ВерсияИзменений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбмена.Сервис, "ВерсияИзменений");
		Ответ = ИзмененияИзСервиса(ПараметрыОбмена, ВерсияИзменений, Лимит);
		Если Ответ.БылиОшибки Тогда
			Результат.БылиОшибки = Истина;
		ИначеЕсли ЗначениеЗаполнено(Ответ.ПолученныеИзменения) Тогда
			Результат = ОбработатьИзмененияИзСервиса(ПараметрыОбмена, Ответ.ПолученныеИзменения);
		КонецЕсли;
		
	КонецЦикла;
	
	БылиОшибки = БылиОшибки Или Результат.БылиОшибки;
	
КонецПроцедуры

// Изменения из сервиса.
// 
// Параметры:
//  ПараметрыОбмена см. ПараметрыОбмена
//  ВерсияИзменений - Число - Версия изменений
//  Лимит - Число - Лимит
// 
// Возвращаемое значение:
//  Структура - Изменения из сервиса:
// * БылиОшибки - Булево -
// * ПолученныеИзменения - Неопределено, Соответствие Из КлючИЗначение - На самом деле массив из соответствий.
//
Функция ИзмененияИзСервиса(ПараметрыОбмена, ВерсияИзменений, Лимит)
	
	Результат = Новый Структура("БылиОшибки,ПолученныеИзменения", Ложь, Неопределено);
	
	Версия = Формат(ВерсияИзменений + 1, "ЧН=0; ЧГ=0");
	ЛимитСтрокой = Формат(Лимит, "ЧН=0; ЧГ=0");
	РесурсСервиса = РесурсПолучениеВсехИзменений();
	РесурсСервиса = СтрЗаменить(РесурсСервиса, "{version}", Версия);
	РесурсСервиса = СтрЗаменить(РесурсСервиса, "{limit}", ЛимитСтрокой);
	
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, РесурсСервиса, "GET");
	Если Ответ = Неопределено Тогда
		Результат.БылиОшибки = Истина;
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ИменаСвойствСервисаСоЗначениямиДата = ИменаСвойствСервисаСоЗначениямиДата();
		Результат.ПолученныеИзменения = 
			ПрочитатьJSON(ЧтениеJSON, Истина,
				ИменаСвойствСервисаСоЗначениямиДата, ФорматДатыJSON.ISO, 
				"ВосстановлениеJSON", ОбщегоНазначения.ОбщийМодуль("КабинетСотрудникаМенеджерОбмена"),,
				ИменаСвойствСервисаСоЗначениямиДата);	
	ИначеЕсли Ответ.КодСостояния = 204 Тогда
		// нет изменений
	Иначе
		Результат.БылиОшибки = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Восстановление JSON.
// 
// Параметры:
//  Свойство - Неопределено
//  Значение - Строка
//  ДополнительныеПараметры - Произвольный
// 
// Возвращаемое значение:
//  Дата - Восстановление JSON
//
Функция ВосстановлениеJSON(Знач Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	Исключение
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Дата(1,1,1);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ИменаСвойствСервисаСоЗначениямиДата()
	
	Результат = Новый Массив; // Массив Из Строка
	Результат.Добавить("dateCreated");
	Результат.Добавить("issueDate");
	Результат.Добавить("startDate");
	Результат.Добавить("endDate");
	Результат.Добавить("applyMonth");
	Результат.Добавить("incomePeriodStartDate");
	Результат.Добавить("incomePeriodEndDate");
	Результат.Добавить("time");
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИзмененияИзСервиса(ПараметрыОбмена, ПолученныеИзменения)

	РезультатОбработки = НовыйРезультатЗагрузкиИзменений();
	
	ВерсияИзменений = ЗагрузитьРезультатыСогласования(ПараметрыОбмена, ПолученныеИзменения, РезультатОбработки);
	
	// Если ВерсияИзменений = 0, это означает, что либо изменений не было, либо изменения не касаются наших документов.
	// В таком случае значение версии изменений менять не нужно.
	Если ВерсияИзменений <> 0 Тогда
		
		СервисОбъект = ПараметрыОбмена.Сервис.ПолучитьОбъект();
		СервисОбъект.ВерсияИзменений = ВерсияИзменений;
		СервисОбъект.Записать();
		
	КонецЕсли;
	
	Если РезультатОбработки.ПоставитьВОчередьОбработки.Количество() <> 0 Тогда
		КабинетСотрудника.ОтметитьКОбработке(РезультатОбработки.ПоставитьВОчередьОбработки);
	КонецЕсли;
	
	Возврат РезультатОбработки;

КонецФункции

Функция ЗагрузитьРезультатыСогласования(ПараметрыОбмена, ПолученныеИзменения, РезультатОбработки)
	
	ОбъектыСервиса = ПолученныеИзменения["agreementResults"]; // Массив
	
	// Если нет или пустой массив выходим
	Если ОбъектыСервиса = Неопределено Или ОбъектыСервиса.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияИзменений = 0;
	
	ТаблицаРезультатовСогласований = НоваяТаблицаРезультатовСогласований();
	ТаблицаОбъектовСервиса = ТаблицаИзМассиваОбъектов(ОбъектыСервиса, ОписаниеОбъектРезультатСогласования());
	ЗаполнитьТаблицуДанныхПоРезультатамСогласования(ТаблицаРезультатовСогласований, ТаблицаОбъектовСервиса);
	
	Идентификаторы = ТаблицаРезультатовСогласований.ВыгрузитьКолонку("ИдентификаторДокумента");
	СведенияПоИдентификаторам = РаботаСВнешнимПодписанием.СведенияОВнешнемПодписанииПоИдентификаторам(Идентификаторы);
	
	Для Каждого СтрокаТЗ Из ТаблицаРезультатовСогласований Цикл
		
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСведения = СведенияПоИдентификаторам[СтрокаТЗ.ИдентификаторДокумента];
		
		// Пропускаем "не наши" документы.
		Если ДанныеСведения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатСогласования = СтрокаТЗ.Объект;
		
		// Электронный документ не соответствует тому, который получен в результате согласования,
		// не обрабатываем.
		Если Не ВерсииСовпадают(ДанныеСведения.ВерсияПредмета, РезультатСогласования.ВерсияДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПостановкиВОчередь = Новый Структура;
		ПараметрыПостановкиВОчередь.Вставить("Сведения", ДанныеСведения.Ссылка);
		ПараметрыПостановкиВОчередь.Вставить("Результат", РезультатСогласования);
		РезультатОбработки.ПоставитьВОчередьОбработки.Добавить(ПараметрыПостановкиВОчередь);
		
	КонецЦикла;
	
	Возврат ВерсияИзменений;
	
КонецФункции

// Заполнить таблицу данных по результатам согласования.
// 
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - Таблица данных:
//    * Объект - Произвольный
//    * ВерсияИзменений - Число -
//    * ИдентификаторДокумента - Строка -
//  ТаблицаОбъектов - ТаблицаЗначений - Таблица объектов:
//    * Версия - Число
//    * ИдентификаторЭлектронногоДокумента - Строка
//    * ИдентификаторДокумента - Строка
//
Процедура ЗаполнитьТаблицуДанныхПоРезультатамСогласования(ТаблицаДанных, ТаблицаОбъектов)
	
	Для Каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Объект 			= ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ);
		НоваяСтрока.ВерсияИзменений = СтрокаТЗ.Версия;
		Если ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторЭлектронногоДокумента) Тогда
			НоваяСтрока.ИдентификаторДокумента = СтрокаТЗ.ИдентификаторЭлектронногоДокумента;
		Иначе
			НоваяСтрока.ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Новая таблица результатов согласований.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица результатов согласований:
//   * Объект - Структура - см. ОписаниеОбъектРезультатСогласования:
//     ** ВерсияДокумента - Строка
//   * ВерсияИзменений - Число
//   * ИдентификаторДокумента - Строка
//
Функция НоваяТаблицаРезультатовСогласований()
	
	ОписаниеТиповСтруктура		= Новый ОписаниеТипов("Структура");
	ОписаниеТиповВерсия			= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	ОписаниеТиповИдентификатор	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(72));
	
	ТаблицаРезультатовСогласований = Новый ТаблицаЗначений;
	ТаблицаРезультатовСогласований.Колонки.Добавить("Объект",					ОписаниеТиповСтруктура);
	ТаблицаРезультатовСогласований.Колонки.Добавить("ВерсияИзменений",			ОписаниеТиповВерсия);
	ТаблицаРезультатовСогласований.Колонки.Добавить("ИдентификаторДокумента",	ОписаниеТиповИдентификатор);
	
	Возврат ТаблицаРезультатовСогласований;
	
КонецФункции

// Версии совпадают.
// 
// Параметры:
//  Версия1 - Строка - Версия1
//  Версия2 - Строка - Версия2
// 
// Возвращаемое значение:
//  Булево - Версии совпадают
//
Функция ВерсииСовпадают(Версия1, Версия2)
	
	Возврат ВРег(Версия1) = ВРег(Версия2);
	
КонецФункции

#КонецОбласти

#Область ПубликацияИзменений

Процедура ОпубликоватьИзмененияДокументов(ПараметрыОбмена, БылиОшибки)
	
	НачатьТранзакцию();
	
	Попытка
		
		ВсеИзменения = ПолучитьИзмененияТаблицейИЗаблокироватьДанные();
		РезультатВыгрузки = РезультатВыгрузкиДокументовНаПодпись(ПараметрыОбмена, ВсеИзменения);
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Новый результат выгрузки документов.
// 
// Возвращаемое значение:
//  Структура - Новый результат выгрузки документов:
// * Выгружено - Массив Из ДокументСсылка.СведенияОВнешнемПодписании
// * НеВыгружено - Массив Из ДокументСсылка.СведенияОВнешнемПодписании
// * БылиОшибки - Булево
//
Функция НовыйРезультатВыгрузкиДокументов()
	
	Результат = Новый Структура;
	Результат.Вставить("Выгружено",		Новый Массив);
	Результат.Вставить("НеВыгружено",	Новый Массив);
	Результат.Вставить("БылиОшибки",	Ложь);
	Возврат Результат;
	
КонецФункции

// Выполняет запрос к данным. Если результат запроса не пустой, выполняется блокировка данных.
// Если данные не удалось заблокировать или если данных К выгрузке нет, возвращает Неопределено.
// 
// Возвращаемое значение:
//  Неопределено, ТаблицаЗначений - Все изменения:
//    * ПубликуемыйДокумент - ДокументСсылка.СведенияОВнешнемПодписании
//    * ДатаДокумента - Дата
//    * НазваниеДокумента - Строка
//    * ВерсияДанных - Строка
//    * ЭлектронныйДокумент - СправочникСсылка.Файлы
//    * ИдентификаторДокумента - Строка
//    * Организация - СправочникСсылка.Организации
//    * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//    * Представления - ТаблицаЗначений:
//      ** Файл - СправочникСсылка.Файлы
//
Функция ПолучитьИзмененияТаблицейИЗаблокироватьДанные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.Документ КАК ПубликуемыйДокумент,
	|	СведенияОВнешнемПодписании.Дата КАК ДатаДокумента,
	|	ПОДСТРОКА(СведенияОВнешнемПодписании.НазваниеДокумента, 1, 100) КАК НазваниеДокумента,
	|	СведенияОВнешнемПодписании.ВерсияПредмета КАК ВерсияДанных,
	|	СведенияОВнешнемПодписании.ПредметПодписания КАК ЭлектронныйДокумент,
	|	СведенияОВнешнемПодписании.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	СведенияОВнешнемПодписании.Организация КАК Организация,
	|	СведенияОВнешнемПодписании.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОВнешнемПодписании.ДополнительныеПредставления.(
	|		НомерСтроки КАК НомерСтроки,
	|		Представление КАК Файл) КАК Представления
	|ИЗ
	|	РегистрСведений.ДокументыКВыгрузкеКабинетСотрудника КАК Изменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СведенияОВнешнемПодписании КАК СведенияОВнешнемПодписании
	|		ПО Изменения.Документ = СведенияОВнешнемПодписании.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПубликуемыйДокумент,
	|	НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.СведенияОВнешнемПодписании");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ПубликуемыйДокумент");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыКВыгрузкеКабинетСотрудника");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Документ", "ПубликуемыйДокумент");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Результат выгрузки документов на подпись.
// 
// Параметры:
//  ПараметрыОбмена см. ПараметрыОбмена
//  ТаблицаДокументовНаПодпись - Неопределено, ТаблицаЗначений - Таблица документов на подпись:
//    * ПубликуемыйДокумент - ДокументСсылка.СведенияОВнешнемПодписании
//    * ДатаДокумента - Дата
//    * НазваниеДокумента - Строка
//    * ВерсияДанных - Строка
//    * ЭлектронныйДокумент - СправочникСсылка.Файлы
//    * ИдентификаторДокумента - Строка
//    * Организация - СправочникСсылка.Организации
//    * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//    * Представления - ТаблицаЗначений:
//      ** Файл - СправочникСсылка.Файлы
// 
// Возвращаемое значение:
//  см. НовыйРезультатВыгрузкиДокументов
//
Функция РезультатВыгрузкиДокументовНаПодпись(ПараметрыОбмена, ТаблицаДокументовНаПодпись)

	РезультатОбработки = НовыйРезультатВыгрузкиДокументов();
	Если ТаблицаДокументовНаПодпись = Неопределено Или ТаблицаДокументовНаПодпись.Количество() = 0 Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ТаблицаДанных = ДанныеДляВыгрузкиДокументовНаПодпись(ТаблицаДокументовНаПодпись);
	
	// Массив ссылок на документы, по которым
	// не удалось сформировать объект для выгрузки.
	НеОбработанныеДокументы = Новый Массив; // Массив Из ДокументСсылка.СведенияОВнешнемПодписании
	
	// Коллекция документов.
	// Ключ - идентификатор документа,
	// Значение - ссылка на СведенияОВнешнемПодписании.
	ИдентификаторыДокументов = Новый Соответствие;
	
	// Массив объектов документов для публикации.
	ДокументыНаПодписьКПубликации = Новый Массив; // Массив Из Структура
	
	Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТЗ.ДанныеЭлектронногоДокумента) Тогда
			
			ЭлектронныйДокумент = ПубликацияЭлектронногоДокумента(ПараметрыОбмена, СтрокаТЗ.ДанныеЭлектронногоДокумента);
			
			Если ЭлектронныйДокумент = Неопределено Тогда
				РезультатОбработки.БылиОшибки = Истина;
				НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				Продолжить;
			КонецЕсли;
			
			ОписаниеОбъектаДокументНаПодпись = ОписаниеОбъектаДокументНаПодпись();
			ДокументНаПодписьВнутренний = ОписаниеОбъекта(ОписаниеОбъектаДокументНаПодпись); 
			ДокументНаПодписьВнутренний.ИдентификаторДокумента			= СтрокаТЗ.ИдентификаторДокумента;
			ДокументНаПодписьВнутренний.Организация						= СтрокаТЗ.Организация;
			ДокументНаПодписьВнутренний.Дата							= СтрокаТЗ.ДатаДокумента;
			ДокументНаПодписьВнутренний.НазваниеДокумента				= СтрокаТЗ.НазваниеДокумента;
			ДокументНаПодписьВнутренний.ЭлектронныйДокумент				= ЭлектронныйДокумент;
			ДокументНаПодписьВнутренний.ФизическиеЛица					= СтрокаТЗ.ФизическиеЛица;
			ДокументНаПодписьВнутренний.ВозможноОбновлениеПредставлений	= Ложь;
			
			ДокументНаПодпись = ОбъектСервисаПоОписанию(ДокументНаПодписьВнутренний, ОписаниеОбъектаДокументНаПодпись);
			ДокументыНаПодписьКПубликации.Добавить(ДокументНаПодпись);
			
			ИдентификаторыДокументов.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ПубликуемыйДокумент);
			
		КонецЕсли;
	КонецЦикла;
	
	РесурсСервиса = РесурсДокументыНаПодпись();
	РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыОбмена,
				РесурсСервиса,
				ДокументыНаПодписьКПубликации,
				"ID");
		
	РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	
	// В результат фиксируем какие документы были выгружены
	Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
		Документ = ИдентификаторыДокументов[ИдентификаторДокумента]; // ДокументСсылка.СведенияОВнешнемПодписании
		РезультатОбработки.Выгружено.Добавить(Документ);
	КонецЦикла;
	
	// В результат фиксируем какие документы не удалось выгрузить
	Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
		Документ = ИдентификаторыДокументов[Ошибка.Ключ]; // ДокументСсылка.СведенияОВнешнемПодписании
		РезультатОбработки.НеВыгружено.Добавить(Документ);
	КонецЦикла;
	
	// Добавим к не выгруженным те документы, которые не удалось обработать
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, НеОбработанныеДокументы);
	
	КабинетСотрудника.ОтметитьВыгруженными(РезультатОбработки.Выгружено);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Данные для выгрузки документов на подпись.
// Берутся данные внутренние и конвертируются к структуре данных, принимаемой сервисом 1С:Кабинет сотрудника.
// 
// см. ОписаниеОбъектаДокументНаПодпись
// см. ОписаниеОбъекта
// см. ОбъектСервисаПоОписанию
// 
// Параметры:
//  ТаблицаИзменений - ТаблицаЗначений - Таблица изменений:
//    * ПубликуемыйДокумент - ДокументСсылка.СведенияОВнешнемПодписании
//    * ДатаДокумента - Дата
//    * НазваниеДокумента - Строка
//    * ВерсияДанных - Строка
//    * ЭлектронныйДокумент - СправочникСсылка.Файлы
//    * ИдентификаторДокумента - Строка
//    * Организация - СправочникСсылка.Организации
//    * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//    * Представления - ТаблицаЗначений:
//      ** Файл - СправочникСсылка.Файлы
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные для выгрузки документов на подпись:
//    * ПубликуемыйДокумент         - ДокументСсылка.СведенияОВнешнемПодписании
//    * ЭлектронныйДокумент         - СправочникСсылка.Файлы
//    * ИдентификаторДокумента      - Строка
//    * ДанныеЭлектронногоДокумента см. НовыеДанныеЭлектронногоДокумента
//    * Организация                 - СправочникСсылка.Организации
//    * ФизическиеЛица              - Массив Из СправочникСсылка.ФизическиеЛица
//    * ДатаДокумента               - Дата
//    * НазваниеДокумента           - Строка
//    * Представления               - Массив Из СправочникСсылка.Файлы
//
Функция ДанныеДляВыгрузкиДокументовНаПодпись(ТаблицаИзменений)
	
	// Ссылки на файлы соберём в один массив, чтобы потом по всем получить данные одним запросом.
	Файлы = Новый Массив; // Массив Из СправочникСсылка.Файлы
	
	ТаблицаДокументыНаПодпись = ТаблицаДанныхДляВыгрузкиДокументовНаПодпись();
	
	Для Каждого СтрокаТЗ ИЗ ТаблицаИзменений Цикл
		
		// Заполним строку.
		НоваяСтрока = ТаблицаДокументыНаПодпись.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.ФизическиеЛица.Добавить(СтрокаТЗ.ФизическоеЛицо);
		НоваяСтрока.Представления = СтрокаТЗ.Представления.ВыгрузитьКолонку("Файл");
		
		// Заполним структуру электронного документа.
		ДанныеЭлектронногоДокумента = НовыеДанныеЭлектронногоДокумента();
		НоваяСтрока.ДанныеЭлектронногоДокумента = ДанныеЭлектронногоДокумента;
		
		// Добавляем уникальные файлы в массив.
		Если Файлы.Найти(СтрокаТЗ.ЭлектронныйДокумент) = Неопределено Тогда
			Файлы.Добавить(СтрокаТЗ.ЭлектронныйДокумент);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Файлы, НоваяСтрока.Представления, Истина);
		
	КонецЦикла;
	
	ОписанияФайлов = СоответствиеФайловИОписаний(Файлы);
	
	Для Каждого СтрокаТЗ Из ТаблицаДокументыНаПодпись Цикл
		
		СтрокаТЗ.ДанныеЭлектронногоДокумента.Оригинал = ОписанияФайлов[СтрокаТЗ.ЭлектронныйДокумент];
		ОписанияПредставлений = НовыйПредставленияОписанияПубликуемогоДокумента();
		Для Каждого Файл Из СтрокаТЗ.Представления Цикл
			ОписанияПредставлений.Добавить(ОписанияФайлов[Файл]);
		КонецЦикла;
		СтрокаТЗ.ДанныеЭлектронногоДокумента.Представления = ОписанияПредставлений; 
		
	КонецЦикла;
	
	Возврат ТаблицаДокументыНаПодпись;
	
КонецФункции

// Таблица данных для выгрузки документов на подпись.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица данных для выгрузки документов на подпись:
//   * ПубликуемыйДокумент - ДокументСсылка.СведенияОВнешнемПодписании
//   * ЭлектронныйДокумент - СправочникСсылка.Файлы
//   * ИдентификаторДокумента - Строка
//   * Организация - СправочникСсылка.Организации
//   * ФизическиеЛица - Массив Из СправочникСсылка.ФизическиеЛица
//   * ДатаДокумента - Дата
//   * НазваниеДокумента - Строка
//   * ДанныеЭлектронногоДокумента см. НовыеДанныеЭлектронногоДокумента
//   * Представления - Массив Из СправочникСсылка.Файлы
//
Функция ТаблицаДанныхДляВыгрузкиДокументовНаПодпись()
	
	ОписаниеТиповСтрока			= Новый ОписаниеТипов("Строка");
	ОписаниеТиповМассив			= Новый ОписаниеТипов("Массив");
	ОписаниеТиповДата			= Новый ОписаниеТипов("Дата");
	ОписаниеТиповСтруктура		= Новый ОписаниеТипов("Структура");
	ОписаниеТиповОрганизация	= Новый ОписаниеТипов("СправочникСсылка.Организации");
	ОписаниеТиповФайл			= Новый ОписаниеТипов("СправочникСсылка.Файлы");
	ОписаниеТиповСведения		= Новый ОписаниеТипов("ДокументСсылка.СведенияОВнешнемПодписании");
	
	
	ТаблицаДокументыНаПодпись = Новый ТаблицаЗначений;
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ПубликуемыйДокумент",		ОписаниеТиповСведения);
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ЭлектронныйДокумент",		ОписаниеТиповФайл);
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ИдентификаторДокумента",	ОписаниеТиповСтрока);
	ТаблицаДокументыНаПодпись.Колонки.Добавить("Организация",				ОписаниеТиповОрганизация);
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ФизическиеЛица",			ОписаниеТиповМассив);
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ДатаДокумента",				ОписаниеТиповДата);
	ТаблицаДокументыНаПодпись.Колонки.Добавить("НазваниеДокумента",			ОписаниеТиповСтрока);
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ДанныеЭлектронногоДокумента",	ОписаниеТиповСтруктура);
	ТаблицаДокументыНаПодпись.Колонки.Добавить("Представления",				ОписаниеТиповМассив);
	
	Возврат ТаблицаДокументыНаПодпись;
	
КонецФункции

// Соответствие файлов и описаний.
// 
// Параметры:
//  Файлы - Массив Из СправочникСсылка.Файлы - Файлы
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Соответствие файлов и описаний:
//   * Ключ     - СправочникСсылка.Файлы
//   * Значение см. НовыйОписаниеФайла
//
Функция СоответствиеФайловИОписаний(Файлы)
	
	Результат = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ВладелецФайла КАК Владелец,
	|	Файлы.ТекущаяВерсияНомерВерсии КАК ВерсияФайла,
	|	Файлы.ПолноеНаименование КАК Представление,
	|	Файлы.Наименование КАК ИмяФайлаБезРасширения,
	|	Файлы.ТекущаяВерсияРасширение КАК РасширениеФайла,
	|	Файлы.ТекущаяВерсияРазмер КАК Размер
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Ссылка В (&Ссылки)";
	Запрос.УстановитьПараметр("Ссылки", Файлы);
	ТаблицаДанныхФайлов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Файл Из Файлы Цикл
		
		ДанныеФайла = ТаблицаДанныхФайлов.Найти(Файл, "Ссылка");
		ОписаниеФайла = НовыйОписаниеФайла();
		ЗаполнитьЗначенияСвойств(ОписаниеФайла, ДанныеФайла);
		ОписаниеФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Файл);
		Результат.Вставить(Файл, ОписаниеФайла);
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Публикация электронного документа.
// 
// Параметры:
//  ПараметрыОбмена             см. ПараметрыОбмена
//  ДанныеЭлектронногоДокумента см. НовыеДанныеЭлектронногоДокумента
// 
// Возвращаемое значение:
//  Неопределено, Структура - Публикация электронного документа
//
Функция ПубликацияЭлектронногоДокумента(ПараметрыОбмена, ДанныеЭлектронногоДокумента)
	
	Результат = Неопределено;
	
	Оригинал		= ДанныеЭлектронногоДокумента.Оригинал;
	Представления	= ДанныеЭлектронногоДокумента.Представления;
	
	ДвоичныеДанные = ДвоичныеДанныеИзСтруктурыОписания(Оригинал);
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВерсияФайла = РаботаСВнешнимПодписанием.ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанные);
	
	ТекстОписания = НСтр("ru = 'Ошибка публикации файла.'");
	ВладелецФайлаТекст = НСтр("ru = 'Владелец файла'");
	ФайлТекст = НСтр("ru = 'Файл'"); ;
	ШаблонОписанияОшибки = СтрШаблон("%1%2%3: %4, %5:",
		ТекстОписания, Символы.ПС, ВладелецФайлаТекст, Строка(Оригинал.Владелец), ФайлТекст);
	
	ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыОбмена, ДвоичныеДанные, Оригинал.РасширениеФайла);
	Если ИдентификаторФайла = Неопределено Тогда
		ОписаниеОшибки = СтрШаблон("%1 %2.", ШаблонОписанияОшибки, Оригинал.Представление);
		ЗаписатьОшибкуВыгрузкиФайла(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ОбъектИсходныйДокумент = ОбъектСервисаФайл(ИдентификаторФайла,
		Оригинал.ИмяФайлаБезРасширения, Оригинал.РасширениеФайла, Оригинал.Размер, ВерсияФайла);
	
	ПредставленияДокумента = Новый Массив; // Массив Из Структура
	Для Каждого ПредставлениеДокумента Из Представления Цикл
		
		ДвоичныеДанныеФайла = ДвоичныеДанныеИзСтруктурыОписания(ПредставлениеДокумента);
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыОбмена, ДвоичныеДанныеФайла, ПредставлениеДокумента.РасширениеФайла);
		Если ИдентификаторФайла = Неопределено Тогда
			ОписаниеОшибки = СтрШаблон("%1 %2.", ШаблонОписанияОшибки, ПредставлениеДокумента.Представление);
			ЗаписатьОшибкуВыгрузкиФайла(ОписаниеОшибки);
			Возврат Результат;
		КонецЕсли;
		
		ОбъектФайл = ОбъектСервисаФайл(ИдентификаторФайла, ПредставлениеДокумента.ИмяФайлаБезРасширения,
			ПредставлениеДокумента.РасширениеФайла, ПредставлениеДокумента.Размер);
		ПредставленияДокумента.Добавить(ОбъектФайл);
		
	КонецЦикла;
	
	ОписаниеЭлектронныйДокумент = ОписаниеОбъекта(ОписаниеОбъектаЭлектронныйДокумент());
	ОписаниеЭлектронныйДокумент.ИсходныйДокумент = ОбъектИсходныйДокумент;
	Если ПредставленияДокумента.Количество() > 0 Тогда
		ОписаниеЭлектронныйДокумент.ПредставленияДокумента = ПредставленияДокумента;
	КонецЕсли;
	
	Возврат ОбъектСервисаПоОписанию(ОписаниеЭлектронныйДокумент, ОписаниеОбъектаЭлектронныйДокумент());
	
КонецФункции

// Новый результат выгрузки.
// 
// Возвращаемое значение:
//  Структура - Новый результат выгрузки:
// * Выгружено - Массив Из Строка
// * НеВыгружено - Соответствие Из КлючИЗначение
// * БылиОшибки - Булево -
// * ОтменитьРегистрацию - Массив Из Строка
//
Функция НовыйРезультатВыгрузки()
	
	Результат = Новый Структура;
	Результат.Вставить("Выгружено", Новый Массив);
	Результат.Вставить("НеВыгружено", Новый Соответствие);
	Результат.Вставить("БылиОшибки", Ложь);
	Результат.Вставить("ОтменитьРегистрацию", Новый Массив);
	Возврат Результат;
	
КонецФункции

Функция СформироватьJSON(Значение)
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON( ,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Значение,
		НастройкиСериализацииJSON, 
		"ПреобразованиеJSON", ОбщегоНазначения.ОбщийМодуль("КабинетСотрудникаМенеджерОбмена"));
	Результат = ЗаписьJSON.Закрыть(); // Строка
	
	Возврат Результат;
	
КонецФункции

// Преобразование JSON.
// 
// Параметры:
//  Свойство - Строка
//  Значение - Произвольный, ЛюбаяСсылка -
//  ДополнительныеПараметры - Неопределено
//  Отказ - Булево
// 
// Возвращаемое значение:
//  Строка, Неопределено - Преобразование JSON
//
Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = Неопределено;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Или 
			ТипЗнч(Значение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Результат = РаботаСВнешнимПодписанием.ИдентификаторОбъектаВСервисе(
			Справочники.СервисыВнешнегоПодписания.КабинетСотрудника,
			Значение);
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			Или Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Если Не Значение.Пустая() Тогда
			Результат = Строка(Значение.УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, Знач РесурсСервиса, Знач Данные, ПолеКлюча, РезультатВыгрузки = Неопределено, РазмерПакета = 100)

	Если РезультатВыгрузки = Неопределено Тогда
		РезультатВыгрузки = НовыйРезультатВыгрузки();
	КонецЕсли;
	
	Если Не ТипЗнч(Данные) = Тип("Массив") Тогда
		ВызватьИсключение НСтр("ru = 'Произошла ошибка при выгрузки коллекции в сервис. Ожидается массив.'");
	КонецЕсли;
	
	КоличествоЭлементов = Данные.Количество();
	
	Если КоличествоЭлементов > РазмерПакета Тогда
		ДанныеПакета = Новый Массив; // Массив Из Структура
		Для Сч = 1 По РазмерПакета Цикл
			ДанныеПакета.Добавить(Данные[0]);
			Данные.Удалить(0);
		КонецЦикла;
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, ПолеКлюча, РезультатВыгрузки, РазмерПакета);
	Иначе
		ДанныеПакета = Данные;
	КонецЕсли;
	
	СтрокаТела = СформироватьJSON(ДанныеПакета);
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, РесурсСервиса, "PUT", СтрокаТела);
	
	Если Ответ = Неопределено Тогда
		РезультатВыгрузки.БылиОшибки = Истина;
	ИначеЕсли Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 204 Тогда
		Для Каждого СтрокаДанных Из ДанныеПакета Цикл
			ЗначениеКлюча = СтрокаДанных[ПолеКлюча]; // Строка
			РезультатВыгрузки.Выгружено.Добавить(ЗначениеКлюча);
		КонецЦикла;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		
		РезультатВыгрузки.БылиОшибки = Истина;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина); // Соответствие
		Исключение
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			РезультатВыгрузки.БылиОшибки = Истина;
			Возврат РезультатВыгрузки;
		КонецПопытки;
		
		Результат = ОбъектОтвета["result"]; // Соответствие
		Если Результат <> Неопределено Тогда
			Для Каждого ЭлементРезультат Из Результат Цикл //Соответствие
				ПозицияВЭлементе = ЭлементРезультат["position"]; // Строка
				КлючОбъекта = ДанныеПакета[Число(ПозицияВЭлементе) - 1][ПолеКлюча]; // Строка
				РезультатВыгрузки.Выгружено.Добавить(КлючОбъекта);
			КонецЦикла;
		КонецЕсли;
		
		КоличествоЭлементов = ДанныеПакета.Количество();
		Ошибки = ОбъектОтвета["errors"];
		Если Ошибки <> Неопределено Тогда
			Для Каждого ЭлементОшибки Из Ошибки Цикл // Соответствие
				ПозицияВКоллекции = ЭлементОшибки["position"]; // Строка
				Если ПозицияВКоллекции <> Неопределено Тогда
					НомерПозиции = Число(ПозицияВКоллекции);
					Если НомерПозиции <= КоличествоЭлементов Тогда
						КлючОбъекта = ДанныеПакета[НомерПозиции - 1][ПолеКлюча]; // Строка
						РезультатВыгрузки.НеВыгружено.Вставить(КлючОбъекта, ОписаниеОшибкиВыгрузки(ЭлементОшибки));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

// Описание ошибки выгрузки.
// 
// Параметры:
//  ОбъектОшибка - Соответствие Из КлючИЗначение - Объект ошибка
// 
// Возвращаемое значение:
//  Строка - Описание ошибки выгрузки
//
Функция ОписаниеОшибкиВыгрузки(ОбъектОшибка)
	
	Попытка
		Результат = НСтр("ru = 'Тип ошибки: %1
						|Код ошибки: %2
						|Описание: %3
						|Подробно:'");
		ТипОшибки = ОбъектОшибка["error"]["type"]; // Строка
		КодОшибки = ОбъектОшибка["error"]["code"]; // Строка
		Описание = ОбъектОшибка["error"]["description"]; // Строка
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Результат, ТипОшибки, КодОшибки, Описание);
	
		Для Каждого КлючЗначение Из ОбъектОшибка["error"]["value"] Цикл //КлючИЗначение
			Результат = Результат + Символы.ПС + КлючЗначение.Ключ + ": " + КлючЗначение.Значение;
		КонецЦикла;
	Исключение
		Результат = НСтр("ru = 'Неизвестное описание ошибки.'");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ИспользованиеAPI

// Параметры обмена.
// 
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания
//  ВестиПротокол - Булево
// 
// Возвращаемое значение:
//  Структура - Параметры обмена:
//   * Сервис               - СправочникСсылка.СервисыВнешнегоПодписания
//   * СтруктураАдреса      см. ОбщегоНазначенияКлиентСервер.СтруктураURI
//   * Соединение           - HTTPСоединение, Неопределено -
//   * ВестиПротокол        - Булево -
//   * ОбновлениеПубликации - Булево -
//   * ВерсияПриложения     - Строка -
//
Функция ПараметрыОбмена(Сервис, ВестиПротокол)
	
	НастройкиСервиса = Справочники.СервисыВнешнегоПодписания.НастройкиСервиса(Сервис);
	
	АдресПриложения = НастройкиСервиса.АдресПриложения;
	Если ЗначениеЗаполнено(НастройкиСервиса.АдресПриложенияПоИмени) И НастройкиСервиса.АдресПриложенияПоИмениДоступен Тогда
		АдресПриложения = НастройкиСервиса.АдресПриложенияПоИмени;
	КонецЕсли;
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресПриложения);
	
	ПараметрыОбмена = НовоеОписаниеПараметрыОбмена();
	ПараметрыОбмена.Сервис 				= Сервис;
	ПараметрыОбмена.СтруктураАдреса 	= СтруктураАдреса;
	ПараметрыОбмена.Соединение 			= НовоеHTTPСоединение(СтруктураАдреса);
	ПараметрыОбмена.ВестиПротокол 		= ВестиПротокол;
	ПараметрыОбмена.ВерсияПриложения 	= НастройкиСервиса.ВерсияПриложения;
	
	Возврат ПараметрыОбмена;
	
КонецФункции

Функция НовоеHTTPСоединение(СтруктураURI, Таймаут = 100)
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	КонецЕсли;
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(СтруктураURI.Схема) = "HTTPS" Или ВРег(СтруктураURI.Схема) = "FTPS" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	Возврат Соединение;
	
КонецФункции

// Новое описание параметры обмена.
// 
// Возвращаемое значение:
//  Структура - Новое описание параметры обмена:
// * Сервис               - СправочникСсылка.СервисыВнешнегоПодписания
// * СтруктураАдреса      см. ОбщегоНазначенияКлиентСервер.СтруктураURI
// * Соединение           - HTTPСоединение, Неопределено -
// * ВестиПротокол        - Булево
// * ОбновлениеПубликации - Булево
// * ВерсияПриложения     - Строка
// * ПолучатьНовыйТокенВсегда - Булево
// * КлючиПриложения      - Неопределено, Структура - можно передать ключи принудительно, по умолчанию Неопределено:
//   ** ИдентификаторКлиента - Строка
//   ** СекретКлиента        - Строка
//
Функция НовоеОписаниеПараметрыОбмена()

	ПараметрыОбмена = Новый Структура;
	ПараметрыОбмена.Вставить("Сервис",				Справочники.СервисыВнешнегоПодписания.ПустаяСсылка());
	ПараметрыОбмена.Вставить("СтруктураАдреса",		Новый Структура);
	ПараметрыОбмена.Вставить("Соединение",			Неопределено);
	ПараметрыОбмена.Вставить("ВестиПротокол",		Ложь);
	ПараметрыОбмена.Вставить("ОбновлениеПубликации",Ложь);
	ПараметрыОбмена.Вставить("ВерсияПриложения",	"");
	ПараметрыОбмена.Вставить("ПолучатьНовыйТокенВсегда", Ложь);
	ПараметрыОбмена.Вставить("КлючиПриложения",		Неопределено);
	
	Возврат ПараметрыОбмена;

КонецФункции

// Параметры API.
// 
// Параметры:
//  ПараметрыОбмена - см. НовоеОписаниеПараметрыОбмена
//  Заголовки - Соответствие - Заголовки HTTPЗапроса
// 
// Возвращаемое значение:
//  Неопределено, Структура - Параметры API:
//  * apiVersion - Строка - версия API
//  * formatVersion - Строка - версия формата данных
//
Функция ПараметрыAPI(ПараметрыОбмена, Заголовки)
	
	АдресРесурса = СтрШаблон("/%1%2%3",ПараметрыОбмена.СтруктураАдреса.ПутьНаСервере, РесурсAPI(),
		РесурсВерсияAPI());
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки); 
	Соединение = ПараметрыОбмена.Соединение;
	Ответ = Неопределено;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Возврат ПрочитатьJSON(ЧтениеJSON);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// HTTPОтвет сервиса.
// 
// Параметры:
//  ПараметрыОбмена см. ПараметрыОбмена
//  РесурсСервиса        - Строка - Ресурс сервиса
//  ИмяМетода            - Строка - Имя метода
//  СтрокаТела           - Строка - Строка тела
//  ОписаниеФайла        - Структура:
//                         * ИмяФайла   - Строка
//                         * Расширение - Строка
//  РазрешенныйКодОтвета - Строка - Разрешенный код ответа
// 
// Возвращаемое значение:
//  HTTPОтвет, Неопределено - HTTPОтвет сервиса
//
Функция HTTPОтветСервиса(ПараметрыОбмена, РесурсСервиса, ИмяМетода, СтрокаТела = "",
		ОписаниеФайла = Неопределено, РазрешенныйКодОтвета = "")
	
	Ответ = Неопределено; 
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	
	Токен = ТокенАутентификации(ПараметрыОбмена);
	Если Не ЗначениеЗаполнено(Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	ПараметрыAPI = ПараметрыAPI(ПараметрыОбмена, Заголовки);
	Если ПараметрыAPI = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Заголовки.Вставить("formatVersion", ПараметрыAPI.formatVersion);
	
	ИмяФайла = "";
	Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
		ИмяФайла = ОписаниеФайла.ИмяФайла;
		Если КабинетСотрудника.ИспользоватьРасширениеФайлаВЗаголовке(ПараметрыОбмена.ВерсияПриложения) Тогда
			РасширениеФайла = НРег(ОписаниеФайла.Расширение);
			Если РасширениеФайла = "jpg"
				Или РасширениеФайла = "jpеg"
				Или РасширениеФайла = "jpe"
				Или РасширениеФайла = "jfif" Тогда
				Заголовки.Вставить("Content-Type", "image/jpeg");
			ИначеЕсли РасширениеФайла = "png" Тогда
				Заголовки.Вставить("Content-Type", "image/png");
			ИначеЕсли РасширениеФайла = "gif" Тогда
				Заголовки.Вставить("Content-Type", "image/gif");
			ИначеЕсли РасширениеФайла = "tiff" Тогда
				Заголовки.Вставить("Content-Type", "image/tiff");
			ИначеЕсли РасширениеФайла = "webp" Тогда
				Заголовки.Вставить("Content-Type", "image/webp");
			ИначеЕсли РасширениеФайла = "bmp" Тогда
				Заголовки.Вставить("Content-Type", "image/vnd.wap.wbmp");
			Иначе
				Заголовки.Вставить("Content-Type", "application/octet-stream");
			КонецЕсли;
		Иначе
			Заголовки.Вставить("Content-Type", "application/octet-stream");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтрокаТела) Тогда
		Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;
	
	АдресРесурса = СтрШаблон("/%1%2%3", ПараметрыОбмена.СтруктураАдреса.ПутьНаСервере,
		РесурсAPI(ПараметрыAPI.apiVersion), РесурсСервиса);
	
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Запрос.УстановитьИмяФайлаТела(ИмяФайла);
	ИначеЕсли ЗначениеЗаполнено(СтрокаТела) Тогда
		Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	КонецЕсли;
	
	Если ПараметрыОбмена.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос);
	КонецЕсли;
	
	Соединение = ПараметрыОбмена.Соединение;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыОбмена, ИмяМетода, Запрос, , ОписаниеОшибки());
		Ответ = Неопределено;
	КонецПопытки;
	
	Если ПараметрыОбмена.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 401 Тогда
		ПараметрыОбмена.Соединение = НовоеHTTPСоединение(ПараметрыОбмена.СтруктураАдреса);
		
		Токен = ТокенАутентификации(ПараметрыОбмена);
		Если Не ЗначениеЗаполнено(Токен) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
		Попытка
			Если ПараметрыОбмена.ВестиПротокол Тогда
				ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос);
			КонецЕсли;
			Соединение = ПараметрыОбмена.Соединение;
			Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
		Исключение
			ЗаписатьОшибкуВызова(ПараметрыОбмена, ИмяМетода, Запрос, , ОписаниеОшибки());
			Ответ = Неопределено;
		КонецПопытки;
		Если ПараметрыОбмена.ВестиПротокол Тогда
			ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос, Ответ);
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния >= 300
		И Не (Ответ.КодСостояния = 404 И ИмяМетода = "DELETE")
		И Ответ.КодСостояния <> РазрешенныйКодОтвета Тогда
		ЗаписатьОшибкуВызова(ПараметрыОбмена, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция РесурсДокументыНаПодпись()
	
	Возврат "/documents-to-be-signed";
	
КонецФункции

Функция РесурсAPI(Версия = "")
	
	Если ЗначениеЗаполнено(Версия) Тогда
		Возврат СтрШаблон("/api/v%1", Версия);
	КонецЕсли;
	
	Возврат "/api";
	
КонецФункции

Функция РесурсВерсияAPI()
	
	Возврат "/apiVersions";
	
КонецФункции	

Функция РесурсПолучениеВсехИзменений()
	
	Возврат "/data/updates?version={version}&limit={limit}";
	
КонецФункции

Функция РесурсФайлы()
	
	Возврат "/files";
	
КонецФункции

Функция РесурсПинг()
	
	Возврат "/ping";
	
КонецФункции


#КонецОбласти

#Область ОписанияОбъектов

#Область ОписаниеОбъектовКакМассив

// Возвращает описание объекта на основании описания объекта сервиса.
//
// 	Параметры:
// 		ОписаниеОбъекта см. ОписаниеОбъектаДокументНаПодпись
//
// Возвращаемое значение:
// 		Структура - на основании см. ОписаниеОбъектаФайл:
// 		 * НаименованиеФайла - Строка
// 		 * РасширениеФайла - Строка
// 		 * РазмерФайла - Число
// 		 * ИдентификаторФайла - Строка
// 		 * ХешСумма - Строка
// 		Структура - на основании см. ОписаниеОбъектаДокументНаПодпись:
// 		 * ИдентификаторДокумента - Строка
// 		 * Организация - СправочникСсылка.Организации
// 		 * ФизическиеЛица - Массив Из СправочникСсылка.ФизическиеЛица
// 		 * Дата - Дата
// 		 * НазваниеДокумента - Строка
// 		 * ЭлектронныйДокумент - Структура - ОбъектСервисаПоОписанию(ОписаниеОбъектаЭлектронныйДокумент)
// 		 * ВозможноОбновлениеПредставлений - Булево
// 		Структура - на основании см. ОписаниеОбъектРезультатСогласования:
// 		 * Подписант - СправочникСсылка.ФизическиеЛица
// 		 * ИмяПодписанта - Строка
// 		 * ИдентификаторДокумента - Строка
// 		 * РезультатСогласования - Строка
// 		 * ЭлектроннаяПодпись - Строка
// 		 * РольПодписанта - Строка
// 		 * ВерсияДокумента - Строка
// 		Структура - на основании см. ОписаниеОбъектаЭлектронныйДокумент:
// 		 * ИсходныйДокумент - Структура - 
// 		 * ПредставленияДокумента - Массив Из Структура - 
//
Функция ОписаниеОбъекта(ОписаниеОбъекта)

	ОписаниеПолей = Новый Массив; // Массив Из Строка
	Для Каждого ОписаниеПоля Из ОписаниеОбъекта Цикл
		ОписаниеПолей.Добавить(ОписаниеПоля["ИмяПоляКонфигурации"]); 
	КонецЦикла;
	
	//@skip-check constructor-function-return-section
	Возврат Новый Структура(СтрСоединить(ОписаниеПолей,","));

КонецФункции

// Преобразование структуры ОписаниеОбъекта в структуру с именами полей сервиса.
//
// 	Параметры:
// 		ОписаниеОбъекта - Структура - имена свойств ИмяПоляКонфигурации описания объекта,
// 		ОписаниеОбъектаСервиса - Массив Из см. НовоеОписаниеПоля - содержит описание полей объекта сервиса.
//
// Возвращаемое значение:
// 		Структура - имена свойств ИмяПоляСервиса  описания объекта.
//
Функция ОбъектСервисаПоОписанию(ОписаниеОбъекта, ОписаниеОбъектаСервиса)

	Результат = Новый Структура;
	Для Каждого ОписаниеПоля Из ОписаниеОбъектаСервиса Цикл
		ЗначениеПоля = Неопределено;
		ОписаниеОбъекта.Свойство(ОписаниеПоля["ИмяПоляКонфигурации"], ЗначениеПоля);
		Если ЗначениеПоля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат.Вставить(ОписаниеПоля["ИмяПоляСервиса"], ЗначениеПоля);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Описание объекта  - documentToBeSigned
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеПоля
//
Функция ОписаниеОбъектаДокументНаПодпись()
	
	ОписаниеОбъекта = Новый Массив; // Массив из см. НовоеОписаниеПоля
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", "ИдентификаторДокумента", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", "Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("date", "Дата", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("name", "НазваниеДокумента", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", "ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("basicProperties", "СвойстваДокумента", Тип("ТаблицаЗначений"), ОписаниеОбъектаСвойствоДокумента()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", "Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employees", "ФизическиеЛица", Тип("ТаблицаЗначений")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("updatePresentationsPossible", "ВозможноОбновлениеПредставлений", Тип("Булево")));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - electronicDocument.
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеПоля
//
Функция ОписаниеОбъектаЭлектронныйДокумент()

	ОписаниеОбъекта = Новый Массив; // Массив из см. НовоеОписаниеПоля
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("originalDocument", "ИсходныйДокумент", Тип("Структура"), ОписаниеОбъектаФайл()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("additionalPresentations", "ПредставленияДокумента", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл()));

	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - file.
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеПоля
//
Функция ОписаниеОбъектаФайл()
	
	ОписаниеОбъекта = Новый Массив; // Массив из см. НовоеОписаниеПоля
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("name", 		"НаименованиеФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("extension", "РасширениеФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("size", 		"РазмерФайла", Тип("Число"))); 
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 		"ИдентификаторФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("hash", 		"ХешСумма", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта  - basicProperties.
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеПоля
//
Функция ОписаниеОбъектаСвойствоДокумента()
	
	ОписаниеОбъекта = Новый Массив; // Массив из см. НовоеОписаниеПоля
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("name", "ИмяСвойства", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("value","ЗначениеСвойства", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Возвращает объект сервиса file
// 
// Параметры:
//  ИдентификаторФайла - Строка - Идентификатор файла
//  ИмяФайла - Строка - Имя файла
//  РасширениеФайла - Строка - Расширение файла
//  РазмерФайла - Число - Размер файла
//  ВерсияФайла - Строка, Неопределено - Версия файла
// 
// Возвращаемое значение:
//  Структура - Объект сервиса файл
//
Функция ОбъектСервисаФайл(ИдентификаторФайла, ИмяФайла, РасширениеФайла, РазмерФайла, ВерсияФайла = Неопределено)

	ОписаниеОбъектаФайл = ОписаниеОбъектаФайл();
	
	ОписаниеФайла = ОписаниеОбъекта(ОписаниеОбъектаФайл);
	ОписаниеФайла.НаименованиеФайла 	= ИмяФайла;
	ОписаниеФайла.РасширениеФайла 		= РасширениеФайла;
	ОписаниеФайла.РазмерФайла 			= РазмерФайла;
	ОписаниеФайла.ИдентификаторФайла 	= ИдентификаторФайла;
	ОписаниеФайла.ХешСумма 				= ВерсияФайла;
	
	Возврат ОбъектСервисаПоОписанию(ОписаниеФайла, ОписаниеОбъектаФайл);

КонецФункции

// Описание объекта - agreementResult.
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеПоля
//
Функция ОписаниеОбъектРезультатСогласования()
	
	ОписаниеОбъекта = Новый Массив; // Массив из см. НовоеОписаниеПоля
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторОбъекта", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"Подписант", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personName",	"ИмяПодписанта", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("documentID",	"ИдентификаторДокумента", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicDocumentID",	"ИдентификаторЭлектронногоДокумента", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("result",				"РезультатСогласования", Тип("ПеречислениеСсылка.РезультатыСогласованияКабинетСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicSignature",	"ЭлектроннаяПодпись", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("signatoryRole",			"РольПодписанта", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("documentVersion",		"ВерсияДокумента", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("comment", 				"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("certificate",			"СертификатЭП", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("time",					"ДатаПодписи", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("updateDocument",		"ОбновитьПредставление", Тип("Булево")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Новое описание поля.
// 
// Параметры:
//  ИмяПоляСервиса      - Строка - Имя поля сервиса
//  ИмяПоляКонфигурации - Строка - Имя поля конфигурации
//  ТипПоля             - Тип, Строка, Неопределено - Тип поля
//  ОписаниеПолей       - Массив Из см. НовоеОписаниеПоля, Неопределено - Описание полей
//  ОбязательноеПоле    - Булево - Обязательное поле
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение- Новое описание поля:
//   * Ключ - Строка
//   * Значение - Строка, Тип, Булево, Массив Из см. НовоеОписаниеПоля, Неопределено -
//
Функция НовоеОписаниеПоля(ИмяПоляСервиса, ИмяПоляКонфигурации, ТипПоля,
		ОписаниеПолей = Неопределено, ОбязательноеПоле = Ложь)
	
	ОписаниеПоля = Новый Соответствие;
	ОписаниеПоля.Вставить("ИмяПоляСервиса", ИмяПоляСервиса);
	ОписаниеПоля.Вставить("ИмяПоляКонфигурации", ИмяПоляКонфигурации);
	ОписаниеПоля.Вставить("ТипПоля", ТипПоля);
	ОписаниеПоля.Вставить("ОписаниеПолей", ОписаниеПолей);
	ОписаниеПоля.Вставить("ОбязательноеПоле", ОбязательноеПоле);
	Возврат ОписаниеПоля;
	
КонецФункции

#КонецОбласти

// Описание файла для публикации.
// 
// Параметры:
//  ИмяФайла   - Строка
//  Расширение - Строка
// 
// Возвращаемое значение:
//  Структура - Описание файла для публикации:
// * ИмяФайла   - Строка
// * Расширение - Строка
//
Функция ОписаниеФайлаДляПубликации(ИмяФайла,Расширение)

	Возврат Новый Структура("ИмяФайла,Расширение", ИмяФайла, Расширение);

КонецФункции

#КонецОбласти

#Область ПреобразованиеЗагруженныхОбъектов

// Преобразование массива объектов сервиса в таблицу значений с именами полей ИБ.
//
// 	Параметры:
// 		Объекты - Массив Из см. СоответствиеИзJsonТекста - элемент массива это соответствие описывающее объект 
// 		                                                   загруженный из сервиса,
// 		ОписаниеПолей - Массив Из см. НовоеОписаниеПоля - содержит описание полей объекта.
//
// Возвращаемое значение:
// 		ТаблицаЗначений - имена колонок ИмяПоляКонфигурации.
//
Функция ТаблицаИзМассиваОбъектов(Объекты, ОписаниеПолей)
	
	Таблица = Новый ТаблицаЗначений;
	ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПолей);
	Для Каждого ОписаниеОбъекта Из Объекты Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьСтрокуТаблицыПоОписанию(НоваяСтрока, ОписаниеОбъекта, ОписаниеПолей);
	КонецЦикла;
	
	Возврат Таблица;

КонецФункции

Процедура ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПолей)
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПоля["ОписаниеПолей"]);
		Иначе
			МассивТипов = Новый Массив; // Массив Из Тип
			МассивТипов.Добавить(ОписаниеПоля["ТипПоля"]);
			Таблица.Колонки.Добавить(ОписаниеПоля["ИмяПоляКонфигурации"], Новый ОписаниеТипов(МассивТипов));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТаблицыПоОписанию(СтрокаТаблицы, ОписаниеОбъекта, ОписаниеПолей)
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		ЗначениеПоляСервиса = ОписаниеОбъекта.Получить(ОписаниеПоля["ИмяПоляСервиса"]);
		Если ЗначениеПоляСервиса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			ЗаполнитьСтрокуТаблицыПоОписанию(СтрокаТаблицы, ОписаниеОбъекта, ОписаниеПоля["ОписаниеПолей"]);
		Иначе
			СтрокаТаблицы[ОписаниеПоля["ИмяПоляКонфигурации"]] = ЗначениеИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ОписаниеПоля);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ОписаниеПоля)
	
	Сервис = Справочники.СервисыВнешнегоПодписания.КабинетСотрудника;
	
	Значение = Неопределено;
	Если ОписаниеПоля["ТипПоля"] = Тип("ТаблицаЗначений") Тогда
		Значение = ЗначениеПоляСервиса; // Массив Из см. СоответствиеИзJsonТекста
		Значение = ТаблицаИзМассиваОбъектов(Значение, ОписаниеПоля["ОписаниеПолей"]);
	ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("Структура") Тогда
		Значение = ЗначениеПоляСервиса; // Соответствие
		Значение = СтруктураИзЗначенияПоляСервиса(Значение, ОписаниеПоля["ОписаниеПолей"]);
	Иначе
		Значение = ЗначениеПоляСервиса;
		ИмяПоля = ОписаниеПоля["ИмяПоляКонфигурации"]; // Строка
		Если ИмяПоля = "ФизическоеЛицо" Или ИмяПоля = "Подписант" Тогда  
			Значение = РаботаСВнешнимПодписанием.ОбъектПоИдентификаторуСервиса(Сервис, Значение);
		ИначеЕсли ИмяПоля = "Сотрудник" Тогда  
			ВызватьИсключение "Сотрудник";	
		ИначеЕсли ИмяПоля = "Организация" Тогда
			Значение = РаботаСВнешнимПодписанием.ОбъектПоИдентификаторуСервиса(Сервис, Значение);
		ИначеЕсли ИмяПоля = "Назначение2НДФЛ" Тогда
			ВызватьИсключение "НазначениеСправкиНДФЛСервиса";
		ИначеЕсли ИмяПоля = "ВариантФормированияФайлаОтвета" Тогда
			ВызватьИсключение "ВариантФормированияФайлаОтветаСервиса";
		ИначеЕсли ИмяПоля = "РезультатСогласования" Тогда
			Значение = ЗначениеРезультатСогласования(Значение);
		ИначеЕсли ИмяПоля = "ПричинаОтсутствия" Тогда
			ВызватьИсключение "ПричинаОтсутствияСервиса";
		ИначеЕсли ИмяПоля = "СпособРасчетаУдержанияДСВ" Тогда
			ВызватьИсключение "СпособРасчетаУдержанияДСВ";
		ИначеЕсли ИмяПоля = "РольПодписанта" Тогда
			Значение = РольПодписантаСервиса(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеРезультатСогласования(ЗначениеПоля)
	
	Результат = ЗначениеПоля;
	Если ЗначениеПоля = "agreed" Тогда
		Результат = Перечисления.РезультатыСогласованияКабинетСотрудника.Согласовано;
	ИначеЕсли ЗначениеПоля = "denied" Тогда
		Результат = Перечисления.РезультатыСогласованияКабинетСотрудника.Отклонено;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция СоответствиеЗначенийРольПодписанта()

	Описание = Новый Соответствие;
	Описание.Вставить("employee", 		"Сотрудник");
	Описание.Вставить("directManager", 	"Руководитель");
	Описание.Вставить("executor", 		"Исполнитель");
	Описание.Вставить("employer", 		"Организация");
	
	Возврат Описание;

КонецФункции

Функция РольПодписантаСервиса(ЗначениеПоля)

	СоответствиеЗначений = СоответствиеЗначенийРольПодписанта();
	Результат = СоответствиеЗначений[ЗначениеПоля];
	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоля;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СтруктураИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ОписаниеПолей)

	ОписаниеОбъекта = Новый Структура;
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		
		ЗначениеПоля = ЗначениеПоляСервиса.Получить(ОписаниеПоля["ИмяПоляСервиса"]);
		Значение = Неопределено;
		Если ЗначениеПоля = Неопределено Тогда
			Значение = Неопределено;
		ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("ТаблицаЗначений") Тогда
			ЗначениеТипизация = ЗначениеПоля; // Массив Из см. СоответствиеИзJsonТекста
			Значение = ТаблицаИзМассиваОбъектов(ЗначениеТипизация, ОписаниеПоля["ОписаниеПолей"]);
		ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("Структура") Тогда
			ЗначениеТипизация = ЗначениеПоля; // Соответствие
			ОписаниеПоляТипизация = ОписаниеПоля["ОписаниеПолей"]; // Массив Из см. НовоеОписаниеПоля
			Значение = СтруктураИзЗначенияПоляСервиса(ЗначениеТипизация, ОписаниеПоляТипизация);
		Иначе
			Значение = ЗначениеИзЗначенияПоляСервиса(ЗначениеПоля, ОписаниеПоля);
		КонецЕсли;
		
		ОписаниеОбъекта.Вставить(ОписаниеПоля["ИмяПоляКонфигурации"], Значение);
	
	КонецЦикла;
	
	Возврат ОписаниеОбъекта;

КонецФункции

#Область ДополнениеДляСтрогойТипизации

// Соответствие из json текста.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Соответствие из json текста:
//   * Ключ     - Строка
//   * Значение - Строка, Число, Булево, Неопределено -
//
Функция СоответствиеИзJsonТекста() Экспорт
	
	Возврат Новый Соответствие;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПолучениеТокенаАутентификации

Функция ТокенАутентификации(ПараметрыОбмена)
	
	Если ПараметрыОбмена.ПолучатьНовыйТокенВсегда Тогда
		Возврат НовыйТокенАутентификации(ПараметрыОбмена).Токен
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ПараметрыОбмена.Сервис,
		"Токен,СрокГодностиТокена"); // Структура
	УстановитьПривилегированныйРежим(Ложь);
	
	Токен = Неопределено;
	СрокГодностиТокена = Неопределено;
	ДанныеВБезопасномХранилище.Свойство("Токен",				Токен);
	ДанныеВБезопасномХранилище.Свойство("СрокГодностиТокена",	СрокГодностиТокена);
	
	Если Токен <> Неопределено
		И СрокГодностиТокена <> Неопределено Тогда
		
		Если ТекущаяУниверсальнаяДатаВМиллисекундах() > СрокГодностиТокена Тогда
			Возврат НовыйТокенАутентификации(ПараметрыОбмена).Токен;
		Иначе
			Возврат Токен;
		КонецЕсли;
		
	Иначе
		Возврат НовыйТокенАутентификации(ПараметрыОбмена).Токен;
	КонецЕсли;
	
КонецФункции

Функция НовыйТокенАутентификации(ПараметрыОбмена)
	
	Результат = Новый Структура("Токен,НеактуальныеКлючи",Неопределено,Ложь);
	
	КлючиПриложения = Неопределено;
	ПараметрыОбмена.Свойство("КлючиПриложения", КлючиПриложения);
	Если КлючиПриложения = Неопределено Тогда
		КлючиПриложения = РаботаСВнешнимПодписанием.КлючиСервисаИзБезопасногоХранилища(ПараметрыОбмена.Сервис);
		Если КлючиПриложения = Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не заданы ключи приложения.'");
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаBase64 = Base64Строка(
	ПолучитьДвоичныеДанныеИзСтроки(СтрШаблон("%1:%2", КлючиПриложения.ИдентификаторКлиента, КлючиПриложения.СекретКлиента)));
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", СтрШаблон("Basic %1", СтрокаBase64));
	Запрос = Новый HTTPЗапрос("/auth/oidc/token", Заголовки);
	Запрос.УстановитьТелоИзСтроки("grant_type=client_credentials");
	
	Соединение = ПараметрыОбмена.Соединение; // HTTPСоединение
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыОбмена, "POST", Запрос, ,ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON); // Структура
		Если РезультатЧтенияJSON.Свойство("id_token") Тогда
			Токен = РезультатЧтенияJSON["id_token"]; // Строка
			СрокГодностиТокена = ТекущаяУниверсальнаяДатаВМиллисекундах() + 3600*100;
			Если ЗначениеЗаполнено(ПараметрыОбмена.Сервис) Тогда
				УстановитьПривилегированныйРежим(Истина);
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПараметрыОбмена.Сервис, Токен, "Токен");
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПараметрыОбмена.Сервис, СрокГодностиТокена, "СрокГодностиТокена");
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			Результат.Токен = Токен;
		Иначе
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'"), Строка(Ответ.КодСостояния), Ответ.ПолучитьТелоКакСтроку());
			ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		ОтветОшибка = ОбъектОтвета["error"]; // Соответствие
		Если ОтветОшибка <> Неопределено Тогда
			Сообщение = ОтветОшибка["message"]; // Строка
			Если Сообщение <> Неопределено И СтрНайти(Сообщение, "User name or password is invalid") > 0 Тогда
				Комментарий = НСтр("ru = 'Не удалось получить токен аутентификации. Неправильные ключи.'");
				ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
				Результат.НеактуальныеКлючи = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Результат.НеактуальныеКлючи Тогда
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'"), Строка(Ответ.КодСостояния), Ответ.ПолучитьТелоКакСтроку());
			ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния = 401 Тогда
		
		Комментарий = НСтр("ru = 'Не удалось получить токен аутентификации. Неправильные ключи.'");
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		Результат.НеактуальныеКлючи = Истина;
		
	Иначе
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'"), Строка(Ответ.КодСостояния), Ответ.ПолучитьТелоКакСтроку());
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти


#Область ЗаписьВЖурналРегистрации

// Записать ошибку выгрузки файла.
// 
// Параметры:
//  ОписаниеОшибки - Строка
//
Процедура ЗаписатьОшибкуВыгрузкиФайла(ОписаниеОшибки)
	
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	
КонецПроцедуры

// Записать ошибку чтения JSON.
// 
// Параметры:
//  ОтветСтрока    - Строка
//  ОписаниеОшибки - Строка
//
Процедура ЗаписатьОшибкуЧтенияJSON(ОтветСтрока, ОписаниеОшибки)

	ШаблонОписания = НСтр(
	"ru = 'Ошибка чтения JSON:
	|Описание ошибки:
	|%1
	|Строка JSON:
	|%2'");
	
	ОтветСтрокаПустой = НСтр("ru = '<пустая строка>'");
	ОтветСтрока = ?(Не ЗначениеЗаполнено(ОтветСтрока), ОтветСтрокаПустой, ОтветСтрока);
	Комментарий = СтрШаблон(ШаблонОписания, ОписаниеОшибки, ОтветСтрока);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

Процедура ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, HTTPЗапрос)

	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ПараметрыОбмена, ИмяМетода, HTTPЗапрос);
	
	ТелоЗапроса = "";
	ЭтоПередачаФайла = (HTTPЗапрос.ПолучитьИмяФайлаТела() <> Неопределено);
	Если Не ЭтоПередачаФайла Тогда
		ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
		
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ТелоЗапроса);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПротоколЗапрос(), УровеньЖурналаРегистрации.Информация,,,Комментарий);

КонецПроцедуры

Процедура ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, HTTPЗапрос, HTTPОтвет)

	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ПараметрыОбмена, ИмяМетода, HTTPЗапрос);
	ОтветТекст  = ОписаниеОтветаЗапросаДляЖР(HTTPЗапрос, HTTPОтвет);
	
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПротоколОтвет(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
КонецПроцедуры


Процедура ЗаписатьОшибкуВызова(ПараметрыОбмена, ИмяМетода, HTTPЗапрос, HTTPОтвет = Неопределено, ОписаниеОшибки = Неопределено)
	
	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ПараметрыОбмена, ИмяМетода, HTTPЗапрос);
	ОтветТекст  = ОписаниеОтветаЗапросаДляЖР(HTTPЗапрос, HTTPОтвет);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОтветТекст = СтрШаблон("%1%2%3",ОтветТекст,Символы.ПС,ОписаниеОшибки);
	КонецЕсли;

	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
КонецПроцедуры

Функция ОписаниеТекстаЗапросаДляЖР(ПараметрыОбмена, ИмяМетода, HTTPЗапрос)

	АдресСервера = СтрШаблон("%1://%2", ПараметрыОбмена.СтруктураАдреса.Схема, ПараметрыОбмена.СтруктураАдреса.ИмяСервера);
	ЗапросТекст = СтрШаблон("%1 %2%3", ИмяМетода, АдресСервера, HTTPЗапрос.АдресРесурса);
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		ИначеЕсли Не ЗначениеЗаполнено(ЗначениеЗаголовка) Тогда
			ЗначениеЗаголовка = "<null>";
		КонецЕсли;
		ЗапросТекст = СтрШаблон("%1%2%3: %4",ЗапросТекст, Символы.ПС, Заголовок.Ключ, ЗначениеЗаголовка);
	КонецЦикла;
	
	Возврат ЗапросТекст;

КонецФункции

// Описание ответа запроса для ЖР.
// 
// Параметры:
//  HTTPЗапрос - HTTPЗапрос
//  HTTPОтвет - HTTPОтвет, Неопределено -
// 
// Возвращаемое значение:
//  Строка - Описание ответа запроса для ЖР
//
Функция ОписаниеОтветаЗапросаДляЖР(HTTPЗапрос, HTTPОтвет)

	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1'"), HTTPОтвет.КодСостояния);
		ЭтоПередачаФайла = (HTTPЗапрос.ПолучитьИмяФайлаТела() <> Неопределено);
		Если Не ЭтоПередачаФайла Тогда
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			Если ЗначениеЗаполнено(ТелоОтвета) Тогда
				ОтветТекст = СтрШаблон("%1%2%3%4", ОтветТекст, Символы.ПС, Символы.ПС, ТелоОтвета);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтветТекст;

КонецФункции

Процедура ЗаписатьСобытиеНачалоОбмена()
	
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияНачалоОбмена(), УровеньЖурналаРегистрации.Информация,,,
		КомментарийЖРНачалоОбмена());
		
КонецПроцедуры

Функция КомментарийЖРНачалоОбмена()
	
	СтрокаСобытие = НСтр("ru = 'Начало процесса обмена данными.'");
	Возврат СтрокаСобытие;
	
КонецФункции

Процедура ЗаписатьСобытиеОкончаниеОбмена(БылиОшибки)
	
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияОкончаниеОбмена(), УровеньЖурналаРегистрации.Информация,,,
		КомментарийЖРОкончаниеОбмена(БылиОшибки));
			
КонецПроцедуры

Функция КомментарийЖРОкончаниеОбмена(БылиОшибки)
	
	СтрокаСобытие = НСтр("ru = 'Окончание процесса обмена данными.'");
	Если БылиОшибки Тогда
		СтрокаСобытие = СтрШаблон("%1 %2", СтрокаСобытие, НСтр("ru = 'Были ошибки.'"));
	КонецЕсли;
	
	Возврат СтрокаСобытие;
	
КонецФункции


#КонецОбласти

#Область Конструктры

// Новый результат загрузки изменений.
// 
// Возвращаемое значение:
//  Структура - Новый результат загрузки изменений:
//   * БылиОшибки - Булево
//   * КоличествоОбъектов - Число
//   * ПоставитьВОчередьОбработки - Массив Из Структура:
//     ** Сведения - ДокументСсылка.СведенияОВнешнемПодписании
//     ** Результат - Структура
//
Функция НовыйРезультатЗагрузкиИзменений()

	Результат = Новый Структура;
	Результат.Вставить("БылиОшибки", Ложь);
	Результат.Вставить("КоличествоОбъектов", 0);
	Результат.Вставить("ПоставитьВОчередьОбработки", Новый Массив);
	Возврат Результат;

КонецФункции

// Новый описание файла.
// 
// Возвращаемое значение:
//  Структура - Новый описание файла:
//    * Владелец - СправочникСсылка.ДокументыПредприятия, Неопределено - Владелец файла
//    * ДвоичныеДанные - ДвоичныеДанные, Неопределено - ДвоичныеДанные или Неопределено,
//    * АдресВоВременномХранилище - Строка, Неопределено - Адрес во временном хранилище или Неопределено,
//    * ВерсияФайла - Строка - SHA-256 хеш ДвоичныхДанных.
//    * Представление - Строка
//    * ИмяФайлаБезРасширения - Строка
//    * РасширениеФайла - Строка
//    * Комментарий - Строка
//    * Размер - Число
//
Функция НовыйОписаниеФайла()
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Владелец",					Неопределено);
	ОписаниеФайла.Вставить("ДвоичныеДанные",			Неопределено);
	ОписаниеФайла.Вставить("АдресВоВременномХранилище",	Неопределено);
	ОписаниеФайла.Вставить("ВерсияФайла",				"");
	ОписаниеФайла.Вставить("Представление",				"");
	ОписаниеФайла.Вставить("ИмяФайлаБезРасширения",		"");
	ОписаниеФайла.Вставить("РасширениеФайла",			"");
	ОписаниеФайла.Вставить("Комментарий",				"");
	ОписаниеФайла.Вставить("Размер",					0);
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Новый описание публикуемого документа.
// 
// Возвращаемое значение:
//  Структура - Новый описание публикуемого документа:
// * Оригинал см. НовыйОписаниеФайла
// * Представления см. НовыйПредставленияОписанияПубликуемогоДокумента
//
Функция НовыеДанныеЭлектронногоДокумента()
	
	ОписаниеПубликуемогоДокумента = Новый Структура;
	ОписаниеПубликуемогоДокумента.Вставить("Оригинал", НовыйОписаниеФайла());
	ОписаниеПубликуемогоДокумента.Вставить("Представления", НовыйПредставленияОписанияПубликуемогоДокумента());
	Возврат ОписаниеПубликуемогоДокумента;
	
КонецФункции

// Новый представления описания публикуемого документа.
// 
// Возвращаемое значение:
//  Массив Из см. НовыйОписаниеФайла
//
Функция НовыйПредставленияОписанияПубликуемогоДокумента()
	
	Возврат Новый Массив;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПроверитьДоступностьПоАдресуИКлючам(АдресПриложения, ИдентификаторКлиента, СекретКлиента)
	
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресПриложения);
	
	ПараметрыОбмена = НовоеОписаниеПараметрыОбмена();
	ПараметрыОбмена.СтруктураАдреса = СтруктураАдреса;
	ПараметрыОбмена.Соединение 		= НовоеHTTPСоединение(СтруктураАдреса);
	ПараметрыОбмена.ВестиПротокол 	= Ложь;
	// Передаем ключи принудительно.
	ПараметрыОбмена.КлючиПриложения	= 
		Новый Структура("ИдентификаторКлиента,СекретКлиента",
			ИдентификаторКлиента, СекретКлиента);
	// Получаем токен доступа для каждого запроса. Не читаем из безопасного хранилища.
	ПараметрыОбмена.ПолучатьНовыйТокенВсегда = Истина;
	
	РесурсСервиса = РесурсПинг();
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, РесурсСервиса, "GET");
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Двоичные данные из структуры описания.
// 
// Параметры:
//  Описание - Структура:
//    * ДвоичныеДанные - ДвоичныеДанные, Неопределено - если Неопределено, пробуем получить из временного хранилища,
//    * АдресВоВременномХранилище - Строка, Неопределено -  
// 
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено - вернёт Неопределено, если не удалось получить ДвоичныеДанные
//
Функция ДвоичныеДанныеИзСтруктурыОписания(Описание)
	
	ЗначениеСвойстваДвоичныеДанные = Неопределено;
	
	Описание.Свойство("ДвоичныеДанные", ЗначениеСвойстваДвоичныеДанные);
	Если ЗначениеСвойстваДвоичныеДанные <> Неопределено И ЭтоДвоичныеДанные(ЗначениеСвойстваДвоичныеДанные) Тогда
		Возврат ЗначениеСвойстваДвоичныеДанные;
	КонецЕсли;
	
	АдресВоВременномХранилище = Неопределено;
	ЗначениеИзВременногоХранилища = Неопределено;
	Описание.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище);
	Если АдресВоВременномХранилище = Неопределено
			Или Не ЭтоАдресВременногоХранилища(Описание.АдресВоВременномХранилище) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеИзВременногоХранилища = ПолучитьИзВременногоХранилища(Описание.АдресВоВременномХранилище);
	Если ЗначениеИзВременногоХранилища <> Неопределено И ЭтоДвоичныеДанные(ЗначениеИзВременногоХранилища) Тогда
		Возврат ЗначениеИзВременногоХранилища;
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

// Это двоичные данные.
// 
// Параметры:
//  Значение - Произвольный
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоДвоичныеДанные(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("ДвоичныеДанные");
	
КонецФункции

// Опубликовать двоичные данные файла.
// 
// Параметры:
//  ПараметрыОбмена см. ПараметрыОбмена
//  ДвоичныеДанные - ДвоичныеДанные
//  Расширение - Строка
// 
// Возвращаемое значение:
//  Строка, Неопределено - Опубликовать двоичные данные файла
//
Функция ОпубликоватьДвоичныеДанныеФайла(ПараметрыОбмена, ДвоичныеДанные, Расширение)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ОписаниеФайла = ОписаниеФайлаДляПубликации(ИмяВременногоФайла, Расширение);
	
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, РесурсФайлы(), "POST", "", ОписаниеФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	Если Ответ = Неопределено Или Ответ.КодСостояния >= 300 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	Попытка
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина); // Соответствие
	Исключение
		ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектОтвета.Получить("fileID");
	
КонецФункции

#КонецОбласти

#КонецОбласти


