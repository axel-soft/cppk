////////////////////////////////////////////////////////////////////////////////
// Обзор объектов (сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует данные обзора объекта.
//
// Параметры:
//   ОбъектОбзора - Произвольный.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор, Неопределено - Уникальный идентификатор формы.
//   ЗаполнитьСвойствоTitle - Булево - Заполнить свойство Title в ссылках.
//
// Возвращаемое значение:
//   см. ОбзорОбъектовКлиентСервер.НовыеДанныеОбзораОбъекта.
//
Функция ДанныеОбзораОбъекта(ОбъектОбзора, УникальныйИдентификаторФормы = Неопределено,
		ЗаполнитьСвойствоTitle = Истина) Экспорт
	
	ДанныеОбзораОбъекта = ОбзорОбъектовКлиентСервер.НовыеДанныеОбзораОбъекта();
	
	Если Не ОбзорОбъектовКлиентСервер.ЭтоИзвестныйОбъектОбзора(ОбъектОбзора)
		Или Не ЗначениеЗаполнено(ОбъектОбзора) Тогда
		
		Возврат ДанныеОбзораОбъекта;
		
	КонецЕсли;
	
	ДанныеОбзораОбъекта.ЕстьТекстHTML = Истина;
	ДанныеОбзораОбъекта.ТекстHTML = ОбзорОбъектаHTML(ОбъектОбзора, УникальныйИдентификаторФормы, ЗаполнитьСвойствоTitle);
	
	Возврат ДанныеОбзораОбъекта;
	
КонецФункции

// Обновляет дерево обзора.
// 
// Параметры:
//  ОбъектОбзора - Произвольный.
//  РеквизитДерева - ДанныеФормыДерево.
//  ЭлементДерева - ТаблицаФормы.
//  ЭлементЗаголовка - Строка - Счетчик заголовка дерева обзора. Возвращаемый параметр.
//  ПоказатьПомеченныеНаУдаление - Булево.
//
Процедура ОбновитьДеревоОбзора(ОбъектОбзора, РеквизитДерева, ЭлементДерева, ЭлементЗаголовка, ПоказатьПомеченныеНаУдаление) Экспорт
	
	Если Не ОбзорОбъектовКлиентСервер.ЭтоИзвестныйОбъектОбзора(ОбъектОбзора)
		Или Не ЗначениеЗаполнено(ОбъектОбзора) Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстОбновления = КонтекстОбновленияДереваОбзора(
		ОбъектОбзора,
		РеквизитДерева,
		ЭлементДерева,
		ЭлементЗаголовка,
		ПоказатьПомеченныеНаУдаление);
	
	ДобавитьСтрокуОбъектаОбзора(КонтекстОбновления);
	
	ДобавитьПриложенияОбъектаОбзора(КонтекстОбновления);
	
	УдалитьНевостребованныеСтроки(КонтекстОбновления);
	
	ОбновитьДанныеСтрок(КонтекстОбновления);
	
	НастроитьРежимДерева(КонтекстОбновления);
	
	ОбновитьЗаголовкДереваОбзора(КонтекстОбновления);
	
КонецПроцедуры

// Устанавливает условное оформление дерева "Обзора".
// 
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных.
//  ИмяДерева - Строка.
//
Процедура УстановитьУсловноеОформлениеДереваОбзора(УсловноеОформление, ИмяДерева) Экспорт
	
	// Выделять серым цветом.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяДерева);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяДерева + ".ВыделятьСерымЦветом");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ФайлЗанятыйДругимПользователем);
	
	// Выделять зеленым цветом.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяДерева);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяДерева + ".ВыделятьЗеленымЦветом");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	
КонецПроцедуры

// Добавляет в текст html заголовок.
// 
// Параметры:
//  ТекстHTML - Строка.
//  Заголовок - Строка.
//  НавигационнаяСсылка - Строка.
//  
Процедура ДобавитьЗаголовок(ТекстHTML, Знач Заголовок, Знач НавигационнаяСсылка = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Заголовок) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		
		Если Не СтрНачинаетсяС(НавигационнаяСсылка, "v8doc:") Тогда
			НавигационнаяСсылка = "v8doc:" + НавигационнаяСсылка;
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + СтрШаблон(
			"<a href=%1><b>%2</b></a><br>",
			НавигационнаяСсылка,
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(Заголовок));
		
	Иначе
		
		ТекстHTML = ТекстHTML + СтрШаблон(
			"<b>%1</b><br>",
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(Заголовок));
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в текст html разделитель.
// 
// Параметры:
//  ТекстHTML - Строка.
//  
Процедура ДобавитьРазделитель(ТекстHTML) Экспорт
	
	ТекстHTML = ТекстHTML + "<br>";
	
КонецПроцедуры

// Добавляет в текст html реквизит в формате "Наименование реквизита: значение реквизита".
// Если значение реквизита не указано, то не добавляет.
// 
// Параметры:
//  ТекстHTML - Строка.
//  Подпись - Строка.
//  Значение - Произвольный.
//  Отделить - Строка.
//  НавигационнаяСсылка - Строка.
//  ПредставлениеЗначения - Строка
//  
Процедура ДобавитьРеквизит(ТекстHTML, Знач Подпись, Значение, Отделить = Ложь, НавигационнаяСсылка = "",
	ПредставлениеЗначения = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отделить Тогда
		ДобавитьРазделитель(ТекстHTML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подпись) И Не СтрЗаканчиваетсяНа(Подпись, ":") Тогда
		Подпись = Подпись + ":";
	КонецЕсли;
	
	ОбзорОбъектовКлиентСервер.ДобавитьПодпись(ТекстHTML, Подпись);
	ДобавитьЗначение(ТекстHTML, Значение, , ПредставлениеЗначения, НавигационнаяСсылка); 
	ДобавитьРазделитель(ТекстHTML);
	
КонецПроцедуры

// Добавляет в текст html значение.
// 
// Параметры:
//  ТекстHTML - Строка.
//  Значение - Произвольный.
//  Цвет - Строка.
//  Представление - Строка.
//  НавигационнаяСсылка - Строка.
//  
Процедура ДобавитьЗначение(ТекстHTML, Значение, Цвет = "", Знач Представление = "", Знач НавигационнаяСсылка = "") Экспорт
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		
		ЕстьЗначение = Ложь;
		Для Каждого ЗначениеМассива Из Значение Цикл
			
			Если ЕстьЗначение Тогда
				ДобавитьЗначение(ТекстHTML, ", ");
			КонецЕсли;
			
			ДобавитьЗначение(ТекстHTML, ЗначениеМассива);
			ЕстьЗначение = Истина;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Представление = Строка(Значение);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НавигационнаяСсылка)
		И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение))
		И Не ОбщегоНазначения.ЭтоПеречисление(Значение.Метаданные()) Тогда
		НавигационнаяСсылка = "v8doc:" + ПолучитьНавигационнуюСсылку(Значение);
	КонецЕсли;
	

	Представление = РаботаС_HTML.ЗаменитьСпецСимволыHTML(Представление);
	Представление = СтрЗаменить(Представление, Символы.ПС, "<br>");
		
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		
		ТекстHTML = ТекстHTML + СтрШаблон(
			"<a href=%1>%2</A>",
			НавигационнаяСсылка,
			Представление);
		
	ИначеЕсли ЗначениеЗаполнено(Цвет) Тогда
		
		ТекстHTML = ТекстHTML + СтрШаблон(
			"<font color=#%1>%2</A>",
			Цвет,
			Представление);
		
	Иначе
		
		ТекстHTML = ТекстHTML + Представление;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет обзор дополнительных реквизитов объекта обзора.
// 
// Параметры:
//  ТекстHTML - Строка - Текст HTML
//  ОбъектОбзора - Произвольный - Объект обзора.
// 
// Возвращаемое значение:
//  Булево - Были добавлены дополнительные реквизиты.
// 
Функция ДобавитьОбзорДополнительныхРеквизитов(ТекстHTML, ОбъектОбзора) Экспорт
	
	БылиДобавленыРеквизиты = Ложь;
	
	ОписаниеДопРеквизитов = Новый Структура;
	ЗаполнитьОписаниеДополнительныхРеквизитов(ОбъектОбзора, ОписаниеДопРеквизитов);
	
	Если ОписаниеДопРеквизитов.Свойства_ИспользоватьСвойства Тогда
		
		ОписаниеЗависимыхДополнительныхРеквизитов = ОписаниеДопРеквизитов.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов;
		СтруктураОтбора = Новый Структура("ИмяРеквизитаЗначение");
		
		Для Каждого ОписаниеРеквизита Из ОписаниеДопРеквизитов.Свойства_ОписаниеДополнительныхРеквизитов Цикл
			
			Видимость = Истина;
			Если ОписаниеЗависимыхДополнительныхРеквизитов <> Неопределено Тогда
				СтруктураОтбора.ИмяРеквизитаЗначение = ОписаниеРеквизита.ИмяРеквизитаЗначение;
				ОписаниеЗависимогоРеквизита = ОписаниеЗависимыхДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора);
				Если ОписаниеЗависимогоРеквизита.Количество()
						И ОписаниеЗависимогоРеквизита[0].УсловиеВидимости <> Неопределено Тогда
					Попытка
						Видимость = УправлениеСвойствами.РезультатВычисленияУсловияДокументооборот(
							ОписаниеДопРеквизитов,
							ОбъектОбзора,
							ОписаниеЗависимогоРеквизита[0].УсловиеВидимости);
					Исключение
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,,,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						Видимость = Ложь;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			Значение = ОписаниеДопРеквизитов[ОписаниеРеквизита.ИмяРеквизитаЗначение];
			Если Не ОписаниеРеквизита.Удалено И Видимость И ЗначениеЗаполнено(Значение) Тогда
				ДобавитьДопРеквизит(ТекстHTML, Значение, ОписаниеРеквизита);
				БылиДобавленыРеквизиты = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат БылиДобавленыРеквизиты;
	
КонецФункции

// Добавляет в структуру данных объекта обзора описание дополнительных реквизитов.
//
// Параметры:
//   ОбъектОбзора - Произвольный - объект обзора.
//   ДанныеОбъектаОбзора - Структура - описание дополнительных реквизитов.
//
Процедура ЗаполнитьОписаниеДополнительныхРеквизитов(ОбъектОбзора, ДанныеОбъектаОбзора) Экспорт
	
	ДанныеОбъектаОбзора.Вставить("Свойства_ИспользоватьСвойства", Ложь);
	ДанныеОбъектаОбзора.Вставить("Свойства_ОписаниеДополнительныхРеквизитов", Неопределено);
	ДанныеОбъектаОбзора.Вставить("Свойства_ОписаниеЗависимыхДополнительныхРеквизитов", Неопределено);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		ТаблицаДопРеквизитов = ОбработкаЗапросовXDTO.ОписаниеДополнительныхРеквизитовОбъектаДО(ОбъектОбзора);
		Если ТаблицаДопРеквизитов.Количество() > 0 Тогда
			
			ДанныеОбъектаОбзора.Свойства_ИспользоватьСвойства = Истина;
			
			ДанныеОбъектаОбзора.Свойства_ОписаниеДополнительныхРеквизитов = Новый ТаблицаЗначений;
			ДанныеОбъектаОбзора.Свойства_ОписаниеДополнительныхРеквизитов.Колонки.Добавить("ИмяРеквизитаЗначение");
			ДанныеОбъектаОбзора.Свойства_ОписаниеДополнительныхРеквизитов.Колонки.Добавить("Удалено");
			ДанныеОбъектаОбзора.Свойства_ОписаниеДополнительныхРеквизитов.Колонки.Добавить("Свойство");
			ДанныеОбъектаОбзора.Свойства_ОписаниеДополнительныхРеквизитов.Колонки.Добавить("Наименование");
			
			ДанныеОбъектаОбзора.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов = Новый ТаблицаЗначений;
			ДанныеОбъектаОбзора.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов.Колонки.Добавить("ИмяРеквизитаЗначение");
			ДанныеОбъектаОбзора.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов.Колонки.Добавить("УсловиеВидимости");
			
			Для Каждого Строка Из ТаблицаДопРеквизитов Цикл
				РеквизитыСвойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Свойство, "Наименование, Имя");
				Попытка
					ДанныеОбъектаОбзора.Вставить(РеквизитыСвойства.Имя, Строка.Значение);
				Исключение
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не удалось сформировать обзор для дополнительного реквизита %1.
							|Попробуйте изменить имя дополнительного реквизита.
							|
							|Полный текст ошибки:
							|%2'"),
						РеквизитыСвойства.Имя,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(
						СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,,,
						ТекстОшибки);
					Продолжить;
				КонецПопытки;
				НоваяСтрока = ДанныеОбъектаОбзора.Свойства_ОписаниеДополнительныхРеквизитов.Добавить();
				НоваяСтрока.ИмяРеквизитаЗначение = РеквизитыСвойства.Имя;
				НоваяСтрока.Удалено = Ложь;
				НоваяСтрока.Свойство = Строка.Свойство;
				НоваяСтрока.Наименование = РеквизитыСвойства.Наименование;
				Если ЗначениеЗаполнено(Строка.УсловиеВидимости) Тогда
					СтрокаЗависимости = ДанныеОбъектаОбзора.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов.Добавить();
					СтрокаЗависимости.ИмяРеквизитаЗначение = РеквизитыСвойства.Имя;
					СтрокаЗависимости.УсловиеВидимости = Строка.УсловиеВидимости;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Извлекает текст HTML из форматированного документа.
// 
// Параметры:
//  ФорматированныйДокумент - ФорматированныйДокумент
//                          - Неопределено
// 
// Возвращаемое значение:
//  Строка
// 
Функция ТекстHTMLФорматированногоДокумента(ФорматированныйДокумент) Экспорт
	
	Если ФорматированныйДокумент = Неопределено Тогда
		ТекстHTML = ОбзорОбъектовКлиентСервер.ПустойHTML();
		Возврат ТекстHTML;
	КонецЕсли;
	
	ТекстHTML = "";
	Вложения = Новый Структура;
	ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Вложения);
	
	// Исправим проблему, что появляется пустая строка в начале обзора.
	ТекстHTML = СтрЗаменить(ТекстHTML, "<!DOCTYPE html>", "");
	
	// Исправим проблему, что не отображается подчёркивание и перечёркивание. 
	ТекстHTML = СтрЗаменить(ТекстHTML, "text-decoration: none underline;", "text-decoration: underline;");
	ТекстHTML = СтрЗаменить(ТекстHTML, "text-decoration: none line-through;", "text-decoration: line-through;");
	ТекстHTML = СтрЗаменить(ТекстHTML, "text-decoration: none underline line-through;", "text-decoration: underline line-through;");
	
	Для Каждого КлючИЗначение Из Вложения Цикл
		
		НазваниеКартинки = КлючИЗначение.Ключ;
		Картинка = КлючИЗначение.Значение;
		
		СтрокаШаблонаКартинки = СтрШаблон("src=""%1""", НазваниеКартинки);
		
		ДанныеКартинкиHTML = ДанныеКартинкиHTML(Картинка);
		СтрокаДанныхКартинки = СтрШаблон("src=""%1""", ДанныеКартинкиHTML);
		
		ТекстHTML = СтрЗаменить(ТекстHTML, СтрокаШаблонаКартинки, СтрокаДанныхКартинки);
		
	КонецЦикла;
	
	Возврат ТекстHTML;
	
КонецФункции

// Определяет настройку показа фотографий.
// 
// Возвращаемое значение:
//  Булево
// 
Функция ПоказыватьФотографии() Экспорт
	
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы",
		"ОтображатьФотографииПерсональнаяНастройка",
		Истина);
		
	ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию(
		"ОтображатьФотографииОбщаяНастройка");
	
	ПриложениеЯвляетсяВебКлиентом =
		ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
		
	ПоказыватьФотографии = Истина;
	
#Если Не ВнешнееСоединение Тогда
	ЭтоНизкаяСкорость =
		ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая;
#Иначе
	ЭтоНизкаяСкорость = Ложь;
#КонецЕсли
	
	Если Не ОтображатьФотографииОбщаяНастройка
		Или Не ОтображатьФотографииПерсональнаяНастройка
		Или ЭтоНизкаяСкорость
		Или ПриложениеЯвляетсяВебКлиентом Тогда
		
		ПоказыватьФотографии = Ложь;
	КонецЕсли;
	
	Возврат ПоказыватьФотографии;
	
КонецФункции

// Событие журнала регистрации "Обзор объектов".
// 
// Возвращаемое значение:
//  Строка.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Обзор объектов'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует текст HTML обзора объекта, приводя к единому стилю обзора.
//
// Параметры:
//   ОбъектОбзора - Произвольный.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор, Неопределено - Уникальный идентификатор формы.
//   ЗаполнитьСвойствоTitle - Булево - Заполнить свойство Title в ссылках.
//
// Возвращаемое значение:
//   Строка - Текст HTML обзора объекта единого стиля.
//
Функция ОбзорОбъектаHTML(ОбъектОбзора, УникальныйИдентификаторФормы, ЗаполнитьСвойствоTitle = Истина)
	
	ТекстHTML = ОбзорОбъектаHTMLПоТипам(ОбъектОбзора, УникальныйИдентификаторФормы);
	
	СтильHTML = ОбзорОбъектовКлиентСервер.СтильHTML();
	Если СтрНайти(ТекстHTML, "<html>") = 0 Тогда
		ТекстHTML = СтрШаблон("<html><head>%1</head><body>%2</body></html>", СтильHTML, ТекстHTML);
	ИначеЕсли СтрНайти(ТекстHTML, "<head>") = 0 Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, "<html>", СтрШаблон("<html><head>%1</head>", СтильHTML));
	ИначеЕсли СтрНайти(ТекстHTML, СтильHTML) = 0 Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, "<head>", "<head>" + СтильHTML);
	КонецЕсли;
	
	ОбзорОбъектовКлиентСервер.УдалитьВредоносныйКодИзТекста(ТекстHTML);
	
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHTML, ЗаполнитьСвойствоTitle);
	
	Если ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ТекстHTML);
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора объекта, специфичный для типа объекта.
// 
// Параметры:
//  ОбъектОбзора - Произвольный.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор, Неопределено - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора объекта, специфичный для типа объекта.
// 
Функция ОбзорОбъектаHTMLПоТипам(ОбъектОбзора, УникальныйИдентификаторФормы)
	
	ТипОбъектаОбзора = ТипЗнч(ОбъектОбзора);
	
	Если ТипОбъектаОбзора = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		ТекстHTML = ОписаниеHTMLДокументыПредприятия(ОбъектОбзора);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		
		ТекстHTML = ОписаниеHTMLВходящееПисьмо(ОбъектОбзора, УникальныйИдентификаторФормы);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		
		ТекстHTML = ОписаниеHTMLИсходящееПисьмо(ОбъектОбзора, УникальныйИдентификаторФормы);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ТекстHTML = ОписаниеHTMLКонтрагенты(ОбъектОбзора);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("СправочникСсылка.Мероприятия") Тогда
		
		ТекстHTML = ОписаниеHTMLМероприятия(ОбъектОбзора);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
		
		ТекстHTML = ОписаниеHTMLПротоколыМероприятий(ОбъектОбзора);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		ТекстHTML = ОписаниеHTMLТемыОбсуждений(ОбъектОбзора);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		ТекстHTML = ОписаниеHTMLСообщенияОбсуждений(ОбъектОбзора);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("СправочникСсылка.Проекты") Тогда
		
		ТекстHTML = ОписаниеHTMLПроекты(ОбъектОбзора);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		ТекстHTML = ОписаниеHTMLПроектныеЗадачи(ОбъектОбзора);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("ДокументСсылка.Бронь") Тогда
		
		ТекстHTML = ОписаниеHTMLБронь(ОбъектОбзора);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО")
			Или ТипОбъектаОбзора = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
		
		ТекстHTML = ОписаниеHTMLДокументЭДО(ОбъектОбзора);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("СправочникСсылка.ШаблоныЗадач") Тогда
		
		ТекстHTML = ОписаниеHTMLШаблоныЗадач(ОбъектОбзора);
		
	ИначеЕсли ТипОбъектаОбзора = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ТекстHTML = ОписаниеHTMLСотрудники(ОбъектОбзора);
		
	Иначе
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Неизвестный алгоритм формирования описания HTML объекта обзора типа %1.'"),
			ТипОбъектаОбзора);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора документа.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора документа.
// 
 Функция ОписаниеHTMLДокументыПредприятия(Документ)
	
	ДанныеДокумента = ОбработкаЗапросовXDTOДокументы.ДанныеДокументаДляФормированияОбзора(Документ);
	
	ТекстHTML = ОбзорДокумента.ПолучитьОбзорДокумента(ДанныеДокумента);
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора входящего письма.
// 
// Параметры:
//  ВходящееПисьмо - ДокументСсылка.ВходящееПисьмо.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор, Неопределено - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора входящего письма.
// 
Функция ОписаниеHTMLВходящееПисьмо(ВходящееПисьмо, УникальныйИдентификаторФормы)
	
	Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ВходящееПисьмо).Чтение Тогда
		
		Если РаботаСЗадачами.ЕстьОсобыеПраваПросмотра(ВходящееПисьмо) Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ВыводитьШапку = Истина;
	
	ТекстHTML = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
		ВходящееПисьмо,
		УникальныйИдентификаторФормы,
		ВыводитьШапку);
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора исходящего письма.
// 
// Параметры:
//  ИсходящееПисьмо - ДокументСсылка.ИсходящееПисьмо.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор, Неопределено - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора исходящего письма.
// 
Функция ОписаниеHTMLИсходящееПисьмо(ИсходящееПисьмо, УникальныйИдентификаторФормы)
	
	Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ИсходящееПисьмо).Чтение Тогда
		
		Если РаботаСЗадачами.ЕстьОсобыеПраваПросмотра(ИсходящееПисьмо) Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ВыводитьШапку = Истина;
	
	ТекстHTML = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
		ИсходящееПисьмо,
		УникальныйИдентификаторФормы,
		ВыводитьШапку);
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора контрагента.
// 
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора контрагента.
// 
Функция ОписаниеHTMLКонтрагенты(Контрагент)
	
	ПоказыватьУдаленные = Ложь;
	
	ТекстHTML = ОбзорКонтрагента.ПолучитьОбзорКонтрагента(
		Контрагент,
		ПоказыватьУдаленные);
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора мероприятия.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора мероприятия.
// 
Функция ОписаниеHTMLМероприятия(Мероприятие)
	
	ТекстHTML = "";
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Мероприятие,
		"ВидМероприятия, Важность, ГрифДоступа, Папка, Предмет,
		|МестоПроведения, Помещение, Организатор, ОрганизаторКонтактноеЛицо,
		|Председатель, Секретарь, ДатаНачала, ДатаОкончания, Описание,
		|Программа");
	
	Программа = РеквизитыМероприятия.Программа.Выгрузить();
	Программа.Сортировать("НомерСтроки Возр");
	
	СостояниеМероприятия = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(
		Мероприятие,
		"СостояниеМероприятия");
	СостояниеПриглашений = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(
		Мероприятие,
		"СостояниеПриглашений");
	СостояниеПрограммы = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(
		Мероприятие,
		"СостояниеПрограммы");
	СостояниеМатериаловВыступающих = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(
		Мероприятие,
		"СостояниеМатериаловВыступающих");
	СостояниеПротокола = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(
		Мероприятие,
		"СостояниеПротокола");
	
	УчастникиМероприятия = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие);
	
	УчастникиМероприятия.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ДатаУчетаМероприятия = Справочники.Мероприятия.ДатаУчетаМероприятия(Мероприятие);
	
	Для Каждого Запись Из УчастникиМероприятия Цикл
		
		Если ТипЗнч(Запись.Исполнитель) = Тип("СправочникСсылка.Сотрудники") И ЗначениеЗаполнено(ДатаУчетаМероприятия) Тогда
			
			Запись.Представление = Сотрудники.ПредставлениеСотрудникаНаДату(Запись.Исполнитель, ДатаУчетаМероприятия);
			
		Иначе
			
			Запись.Представление = Строка(Запись.Исполнитель);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Протокол = УправлениеМероприятиями.ПолучитьПротоколМероприятия(Мероприятие);
	УправлениеМероприятиямиКлиентСервер.ВывестиНомераПунктовПротокола(Протокол);
	
	// Заголовок.
	ДобавитьЗаголовок(ТекстHTML, Строка(Мероприятие));
	ДобавитьРазделитель(ТекстHTML);
	
	// Описание.
	Если ЗначениеЗаполнено(РеквизитыМероприятия.Описание) Тогда
		
		ДобавитьЗначение(
			ТекстHTML,
			РеквизитыМероприятия.Описание);
		
		ДобавитьРазделитель(ТекстHTML);
		ДобавитьРазделитель(ТекстHTML);
		
	КонецЕсли;
	
	// Реквизиты проведения.
	Если ЗначениеЗаполнено(РеквизитыМероприятия.Помещение) Тогда
		МестоПроведения = РеквизитыМероприятия.Помещение;
	Иначе
		МестоПроведения = РеквизитыМероприятия.МестоПроведения;
	КонецЕсли;
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.Мероприятия.Реквизиты.МестоПроведения.Синоним,
		МестоПроведения);
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.Мероприятия.Реквизиты.Организатор.Синоним,
		РеквизитыМероприятия.Организатор,,,
		Сотрудники.ПредставлениеСотрудникаНаДату(РеквизитыМероприятия.Организатор, ДатаУчетаМероприятия));
	
	ДобавитьРеквизит(
		ТекстHTML,
		НСтр("ru = 'Контактное лицо'"),
		РеквизитыМероприятия.ОрганизаторКонтактноеЛицо);
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.Мероприятия.Реквизиты.Председатель.Синоним,
		РеквизитыМероприятия.Председатель,,,
		Сотрудники.ПредставлениеСотрудникаНаДату(РеквизитыМероприятия.Председатель, ДатаУчетаМероприятия));
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.Мероприятия.Реквизиты.Секретарь.Синоним,
		РеквизитыМероприятия.Секретарь,,,
		Сотрудники.ПредставлениеСотрудникаНаДату(РеквизитыМероприятия.Секретарь, ДатаУчетаМероприятия));
	
	ПредставлениеДаты = УправлениеМероприятиями.МестныйПериодСтрокой(
		РеквизитыМероприятия.ДатаНачала,
		РеквизитыМероприятия.ДатаОкончания);
	ДобавитьРеквизит(
		ТекстHTML,
		НСтр("ru = 'Когда'"),
		ПредставлениеДаты);
	
	ДобавитьОбзорДополнительныхРеквизитов(ТекстHTML, Мероприятие);
	
	// Состояние
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(СостояниеМероприятия);
	МассивСостояний.Добавить(СостояниеПриглашений);
	МассивСостояний.Добавить(СостояниеПрограммы);
	МассивСостояний.Добавить(СостояниеМатериаловВыступающих);
	МассивСостояний.Добавить(СостояниеПротокола);
	СостояниеТекст = УправлениеМероприятиямиКлиентСервер.ПолучитьСтроковоеПредставлениеСостояний(
		МассивСостояний);
	Если ЗначениеЗаполнено(СостояниеТекст) Тогда
		
		ДобавитьРазделитель(ТекстHTML);
		
		ДобавитьРеквизит(
			ТекстHTML,
			НСтр("ru = 'Состояние'"),
			СостояниеТекст,
			Ложь,
			СтрШаблон("v8doc:events/ShowStatus/%1", ПолучитьНавигационнуюСсылку(Мероприятие)));
		
	КонецЕсли;
	
	// Участники
	ДобавитьТаблицу(
		ТекстHTML,
		УчастникиМероприятия,
		НСтр("ru = 'Участники'"),
		Метаданные.РегистрыСведений.УчастникиМероприятия.Измерения.Исполнитель.Имя, "Представление");
	
	// Программа
	Если Программа.Количество() > 0 Тогда
		
		ДобавитьРазделитель(ТекстHTML);
		
		ДобавитьЗаголовок(ТекстHTML, НСтр("ru = 'Программа'"));
		
		ЕстьПункты = Ложь;
		Для Каждого СтрокаПрограммы Из Программа Цикл
			
			Если ЕстьПункты Тогда
				ДобавитьРазделитель(ТекстHTML);
			КонецЕсли;
			
			СсылкаПункта = СтрШаблон("v8doc:events/ShowProgramPoint/%1/%2",
				Формат(СтрокаПрограммы.НомерПункта, "ЧГ=0;"),
				ПолучитьНавигационнуюСсылку(Мероприятие));
			ПредставлениеПункта = СтрШаблон("%1. %2",
				СтрокаПрограммы.НомерПункта, 
				СтрокаПрограммы.Содержание);
			ДобавитьРеквизит(ТекстHTML, "", ПредставлениеПункта, Ложь, СсылкаПункта);
			
			ДобавитьРеквизит(ТекстHTML, "", СтрокаПрограммы.Исполнитель);
			
			МестнаяНачало = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(СтрокаПрограммы.Начало);
			МестнаяОкончание = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(СтрокаПрограммы.Окончание);
			Если ЗначениеЗаполнено(МестнаяНачало) И ЗначениеЗаполнено(МестнаяОкончание) Тогда 
				ВремяПункта =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'с %1 по %2'"),
						Формат(МестнаяНачало, "ДФ=ЧЧ:мм"),
						Формат(МестнаяОкончание, "ДФ=ЧЧ:мм"));
			ИначеЕсли ЗначениеЗаполнено(СтрокаПрограммы.ВремяПлан) Тогда
				ВремяПункта = 
					НапоминанияПользователяДокументооборотКлиентСервер.ПредставлениеВремени(
						СтрокаПрограммы.ВремяПлан, Ложь, Ложь);
			КонецЕсли;
			ДобавитьРеквизит(ТекстHTML, "", ВремяПункта);
			
			ЕстьПункты = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Протокол
	Если Протокол.Количество() > 0 Тогда
		
		ДобавитьРазделитель(ТекстHTML);
		
		ДобавитьЗаголовок(ТекстHTML, НСтр("ru = 'Протокол'"));
		
		ЕстьПункты = Ложь;
		Для Каждого СтрокаПротокола Из Протокол Цикл
			
			Если ЕстьПункты Тогда
				ДобавитьРазделитель(ТекстHTML);
			КонецЕсли;
			
			СсылкаПунктаПротокола =
				"v8doc:" + ПолучитьНавигационнуюСсылку(СтрокаПротокола.ПунктПротокола);
			ДобавитьЗначение(
				ТекстHTML,
				СтрокаПротокола.НомерПунктаПротокола + ". ");
			ДобавитьРеквизит(
				ТекстHTML,
				НСтр("ru = 'Слушали'"),
				СтрокаПротокола.Слушали,
				Ложь,
				СсылкаПунктаПротокола);
			ДобавитьРеквизит(
				ТекстHTML,
				НСтр("ru = 'Выступили'"),
				СтрокаПротокола.Выступили,
				Ложь,
				СсылкаПунктаПротокола);
			ДобавитьРеквизит(
				ТекстHTML,
				НСтр("ru = 'Решили'"),
				СтрокаПротокола.Решили,
				Ложь,
				СсылкаПунктаПротокола);
			
			МассивИсполнители = СтрокаПротокола.Исполнители.ВыгрузитьКолонку("Исполнитель");
			ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Исполнители'"), МассивИсполнители);
			
			Если ЗначениеЗаполнено(СтрокаПротокола.СрокИсполненияПроцесса) Тогда
				ФорматСрока = РаботаСЗадачами.ФорматСрокаПолный();
				ПредставлениеСрока = Формат(СтрокаПротокола.СрокИсполненияПроцесса, ФорматСрока);
				ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Срок'"), ПредставлениеСрока);
			КонецЕсли;
			
			
			ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Проверяющий'"), СтрокаПротокола.Проверяющий);
			ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Автор'"), СтрокаПротокола.Автор);
			ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Контролер'"), СтрокаПротокола.Контролер);
			
			ЕстьПункты = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

Процедура ДобавитьТаблицу(ТекстHTML, Таблица, Заголовок, ИмяКолонки, ИмяКолонкиПредставлений=Неопределено)
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьРазделитель(ТекстHTML);
	
	ДобавитьЗаголовок(ТекстHTML, Заголовок);
	
	НомерСтроки = 1;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		ДобавитьЗначение(ТекстHTML, СтрШаблон("%1. ", НомерСтроки));
		Представление = "";
		
		Если ЗначениеЗаполнено(ИмяКолонкиПредставлений) Тогда
			
			Представление = СтрокаТаблицы[ИмяКолонкиПредставлений];
			
		КонецЕсли;
		
		ДобавитьЗначение(ТекстHTML, СтрокаТаблицы[ИмяКолонки],, Представление);
		ДобавитьРазделитель(ТекстHTML);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует текст HTML обзора пункта протокола.
// 
// Параметры:
//  ПунктПротокола - СправочникСсылка.ПротоколыМероприятий.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора пункт протокола.
// 
Функция ОписаниеHTMLПротоколыМероприятий(ПунктПротокола)
	
	ТекстHTML = "";
	
	РеквизитыПунктаПротокола = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПунктПротокола,
		"Ссылка, Автор, Владелец, НомерПунктаПрограммы, НомерПунктаПротокола, Слушали, Выступили, Решили, Контролер,
		|СрокИсполненияПроцесса, Исполнители, Проверяющий, СостояниеИсполнения, ДатаИсполнения");
	
	ИсполнителиПункта = РеквизитыПунктаПротокола.Исполнители.Выгрузить();
	ИсполнителиПункта.Сортировать("НомерСтроки Возр");
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыПунктаПротокола.Владелец,
		"ВидМероприятия, Программа");
	
	ПрограммаМероприятия = РеквизитыМероприятия.Программа.Выгрузить();
	ПрограммаМероприятия.Сортировать("НомерСтроки Возр");
	
	ПротоколМероприятия = УправлениеМероприятиями.ПолучитьПротоколМероприятия(ПунктПротокола.Владелец);
	УправлениеМероприятиямиКлиентСервер.ВывестиНомераПунктовПротокола(ПротоколМероприятия);
	
	ЗаголовокПунктаПротокола = УправлениеМероприятиямиКлиентСервер.СформироватьЗаголовокПунктаПротокола(
		РеквизитыПунктаПротокола,
		ПротоколМероприятия);
	ДобавитьЗаголовок(ТекстHTML, ЗаголовокПунктаПротокола);
	
	ДобавитьРазделитель(ТекстHTML);
	
	ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Мероприятие'"), РеквизитыПунктаПротокола.Владелец);
	
	ПредставлениеПунктаПрограммы = "";
	Для Каждого СтрокаПрограммы Из ПрограммаМероприятия Цикл
		
		Если СтрокаПрограммы.НомерПункта <> РеквизитыПунктаПротокола.НомерПунктаПрограммы Тогда
			Продолжить;
		КонецЕсли;
		
		ПерваяСтрокаСодержания = СтрПолучитьСтроку(СтрокаПрограммы.Содержание, 1);
		ПредставлениеПунктаПрограммы = СтрШаблон("N %1 %2",
			СтрокаПрограммы.НомерПункта,
			ПерваяСтрокаСодержания);
		
	КонецЦикла;
	
	ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Пункт программы'"), ПредставлениеПунктаПрограммы);
	
	ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Слушали'"), РеквизитыПунктаПротокола.Слушали, Истина);
	
	ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Выступили'"), РеквизитыПунктаПротокола.Выступили, Истина);
	
	ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Решили'"), РеквизитыПунктаПротокола.Решили, Истина);
	
	ДобавитьРазделитель(ТекстHTML);
	
	Если ЗначениеЗаполнено(РеквизитыПунктаПротокола.СрокИсполненияПроцесса) Тогда
		ФорматСрока = РаботаСЗадачами.ФорматСрокаПолный();
		ПредставлениеСрока = Формат(РеквизитыПунктаПротокола.СрокИсполненияПроцесса, ФорматСрока);
		ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Срок'"), ПредставлениеСрока);
	КонецЕсли;
	
	МассивИсполнители = ИсполнителиПункта.ВыгрузитьКолонку("Исполнитель");
	Если МассивИсполнители.Количество() > 0 Тогда
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(
			ТекстHTML,
			НСтр("ru = 'Исполнители'") + ":");
		
		ЕстьИсполнители = Ложь;
		Для Каждого Исполнитель Из МассивИсполнители Цикл
			
			Если ЕстьИсполнители Тогда
				ДобавитьЗначение(ТекстHTML, ", ");
			КонецЕсли;
			
			ДобавитьЗначение(ТекстHTML, Исполнитель);
			ЕстьИсполнители = Истина;
			
		КонецЦикла;
		
		ДобавитьРазделитель(ТекстHTML);
		
	КонецЕсли;
	
	ДобавитьРеквизит(
		ТекстHTML,
		НСтр("ru = 'Проверяющий'"),
		РеквизитыПунктаПротокола.Проверяющий);
	
	ДобавитьРеквизит(
		ТекстHTML,
		НСтр("ru = 'Автор'"),
		РеквизитыПунктаПротокола.Автор);
	
	ДобавитьРеквизит(
		ТекстHTML,
		НСтр("ru = 'Контролер'"),
		РеквизитыПунктаПротокола.Контролер);
	
	ДобавитьРеквизит(
		ТекстHTML,
		НСтр("ru = 'Состояние исполнения'"),
		РеквизитыПунктаПротокола.СостояниеИсполнения);
	
	Если ЗначениеЗаполнено(РеквизитыПунктаПротокола.ДатаИсполнения) Тогда
		ФорматСрока = РаботаСЗадачами.ФорматСрокаПолный();
		ПредставлениеДатыИсполнения = Формат(РеквизитыПунктаПротокола.ДатаИсполнения, ФорматСрока);
		ДобавитьРеквизит(ТекстHTML, НСтр("ru = 'Дата исполнения'"), ПредставлениеДатыИсполнения);
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора темы форума.
// 
// Параметры:
//  ТемаФорума - СправочникСсылка.ТемыОбсуждений.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора темы форума.
// 
Функция ОписаниеHTMLТемыОбсуждений(ТемаФорума)
	
	ПервоеСообщениеТемы = РаботаСОбсуждениями.НайтиПервоеСообщениеТемы(ТемаФорума);
	
	ФормироватьШапку = Истина;
	ТекстHTML = РаботаСОбсуждениями.ПредставлениеСообщенияHTML(
		ПервоеСообщениеТемы,
		ФормироватьШапку);
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора сообщение форума.
// 
// Параметры:
//  СообщениеФорума - СправочникСсылка.СообщенияОбсуждений.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора сообщения форума.
// 
Функция ОписаниеHTMLСообщенияОбсуждений(СообщениеФорума)
	
	ФормироватьШапку = Истина;
	ТекстHTML = РаботаСОбсуждениями.ПредставлениеСообщенияHTML(
		СообщениеФорума,
		ФормироватьШапку);
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора проекта.
// 
// Параметры:
//  Проект - СправочникСсылка.Проекты.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора проекта.
// 
Функция ОписаниеHTMLПроекты(Проект)
	
	ТекстHTML = ОбзорДокумента.ПолучитьОбзорПроекта(Неопределено, Проект);
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора проектной задачи.
// 
// Параметры:
//  ПроектнаяЗадача - СправочникСсылка.ПроектныеЗадачи.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора проектной задачи.
// 
Функция ОписаниеHTMLПроектныеЗадачи(ПроектнаяЗадача)
	
	ТекстHTML = "";
	
	РеквизитыПроектнойЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроектнаяЗадача,
		"Наименование, Описание, Владелец, Родитель, Предмет, Исполнители");
	
	Исполнители = РеквизитыПроектнойЗадачи.Исполнители.Выгрузить();
	Исполнители.Сортировать("НомерСтроки Возр");
	
	Заголовок = СтрШаблон("%1 (%2)", ПроектнаяЗадача, ТипЗнч(ПроектнаяЗадача));
	ДобавитьЗаголовок(ТекстHTML, Заголовок);
	ДобавитьРазделитель(ТекстHTML);
	
	Если ЗначениеЗаполнено(РеквизитыПроектнойЗадачи.Описание) Тогда
		
		ДобавитьЗначение(
			ТекстHTML,
			РеквизитыПроектнойЗадачи.Описание);
		
		ДобавитьРазделитель(ТекстHTML);
		ДобавитьРазделитель(ТекстHTML);
		
	КонецЕсли;
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.ПроектныеЗадачи.СтандартныеРеквизиты.Владелец.Синоним,
		РеквизитыПроектнойЗадачи.Владелец);
	
	ДобавитьРеквизит(
		ТекстHTML,
		НСтр("ru = 'В задаче'"),
		РеквизитыПроектнойЗадачи.Родитель);
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.ПроектныеЗадачи.Реквизиты.Предмет.Синоним,
		РеквизитыПроектнойЗадачи.Предмет);
	
	МассивИсполнители = Исполнители.ВыгрузитьКолонку("Исполнитель");
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.ПроектныеЗадачи.ТабличныеЧасти.Исполнители.Синоним,
		МассивИсполнители);
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора брони.
// 
// Параметры:
//  Бронь - ДокументСсылка.Бронь.
// 
// Возвращаемое значение:
//  Строка - Текст HTML обзора брони.
// 
Функция ОписаниеHTMLБронь(Бронь)
	
	ТекстHTML = "";
	
	РеквизитыБрони = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Бронь,
		"Сотрудник, Помещение, ДатаНачала, ДатаОкончания, ВесьДень, КоличествоЧеловек, ТипЗаписи,
		|Комментарий, ТехническоеОбеспечение, ХозяйственноеОбеспечение, Предмет");
	
	Заголовок = СтрШаблон("%1 (%2)", Бронь, ТипЗнч(Бронь));
	ДобавитьЗаголовок(ТекстHTML, Заголовок);
	ДобавитьРазделитель(ТекстHTML);
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Документы.Бронь.Реквизиты.Сотрудник.Синоним,
		РеквизитыБрони.Сотрудник);
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Документы.Бронь.Реквизиты.Помещение.Синоним,
		РеквизитыБрони.Помещение);
	
	ПредставлениеДаты = БронированиеПомещенийКлиентСервер.СформироватьДатыБрони(
		РеквизитыБрони.ДатаНачала,
		РеквизитыБрони.ДатаОкончания,
		РеквизитыБрони.ВесьДень);
	ДобавитьРеквизит(
		ТекстHTML,
		НСтр("ru = 'Когда'"),
		ПредставлениеДаты);
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Документы.Бронь.Реквизиты.КоличествоЧеловек.Синоним,
		РеквизитыБрони.КоличествоЧеловек);
		
	Если РеквизитыБрони.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		БроньОбъект = Бронь.ПолучитьОбъект();
		ПовторениеСтрокой = БроньОбъект.ПолучитьПредставлениеПовторения();
		ДобавитьРеквизит(
			ТекстHTML,
			НСтр("ru = 'Повторять'"),
			ПовторениеСтрокой,
			Истина);
	КонецЕсли;
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Документы.Бронь.Реквизиты.Комментарий.Синоним,
		РеквизитыБрони.Комментарий,
		Истина);
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Документы.Бронь.Реквизиты.ТехническоеОбеспечение.Синоним,
		РеквизитыБрони.ТехническоеОбеспечение,
		Истина);
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Документы.Бронь.Реквизиты.ХозяйственноеОбеспечение.Синоним,
		РеквизитыБрони.ХозяйственноеОбеспечение,
		Истина);
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Документы.Бронь.Реквизиты.Предмет.Синоним,
		РеквизитыБрони.Предмет,
		Истина);
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора документа ЭДО.
//
// Параметры:
//   ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//   Строка - Текст HTML обзора документа ЭДО.
//
Функция ОписаниеHTMLДокументЭДО(ДокументЭДО)
	
	ТекстHTML = "";
	
	ДанныеВизуализации = ОбменЭДОДокументооборотВызовСервера.ДанныеВизуализации(ДокументЭДО);
	
	Если ДанныеВизуализации.ТабличныйДокументСформирован Тогда
		
		Если ТипЗнч(ДанныеВизуализации.ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			
			ТабличныйДокументЭДО = ДанныеВизуализации.ТабличныйДокумент;
			
			ИмяФайлаСПутемHTML = ПолучитьИмяВременногоФайла("html");
			ТабличныйДокументЭДО.Записать(ИмяФайлаСПутемHTML, ТипФайлаТабличногоДокумента.HTML5);
			
			ТекстHTML = Новый ТекстовыйДокумент;
			ТекстHTML.Прочитать(ИмяФайлаСПутемHTML);
			ТекстИзфайла = ТекстHTML.ПолучитьТекст();
			
			ТекстHtmlНРег = НРег(ТекстИзфайла);
			
			Если СтрНайти(ТекстHtmlНРег, "charset=utf-8") <> 0 Или СтрНайти(ТекстHtmlНРег, "charset=""utf-8""") <> 0 Тогда
				ТекстHTML = Новый ТекстовыйДокумент();
				ТекстHTML.Прочитать(ИмяФайлаСПутемHTML, "UTF-8");
				ТекстИзфайла = ТекстHTML.ПолучитьТекст();
			КонецЕсли;
			
			ТекстИзфайла = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ТекстИзфайла);
			
			ФайлИмя = Новый Файл(ИмяФайлаСПутемHTML);
			ВременнаяПапка = ФайлИмя.Путь;
			ФайлИмя = Неопределено;
			
			ТекстHTMLСКартинками = ОбзорФайловКлиентСервер.HTMLСКартинками(
				ТекстИзфайла,
				"", 
				ВременнаяПапка);
			
			ТекстHTML = ТекстHTMLСКартинками;
			
			УдалитьФайлы(ИмяФайлаСПутемHTML);  
			
		Иначе // тут html	     
			
			ТекстHTML = ДанныеВизуализации.ТабличныйДокумент;
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеВизуализации.Свойство("ДвоичныеДанные")
				И ОбзорФайловКлиентСервер.ЭтоФайлСПодготовкойНаСервере(ДанныеВизуализации.ПрисоединенныйФайлРасширение) Тогда
			
			ПараметрыПолученияПредставления = ОбзорФайловКлиентСервер.ПараметрыПолученияПредставления();
			ПараметрыПолученияПредставления.ТребуетсяСоздатьВизуализациюЭП = Ложь;
			ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра = 10;
			ПараметрыПолученияПредставления.ПредпросмотрУрезан = Ложь;
			ПараметрыПолученияПредставления.Расширение = ДанныеВизуализации.ПрисоединенныйФайлРасширение;
			ПараметрыПолученияПредставления.ПоддерживаемыеТипы = ОбзорФайловКлиентСервер.ПоддерживаемыеТипыПредпросмотра();
			ПараметрыПолученияПредставления.ЭтоСлужебноеСообщение = Ложь;
			ПараметрыПолученияПредставления.ВсегдаПолучатьHtmlДляPdf = Истина;
			ПараметрыПолученияПредставления.Вставить("ДвоичныеДанные", ДанныеВизуализации.ДвоичныеДанные);
			
			РеквизитыФайла = Новый Структура(
				"ТекущаяВерсияРасширение, Зашифрован, ТекущаяВерсияРазмер, Наименование, ПолноеНаименование",
				ДанныеВизуализации.ПрисоединенныйФайлРасширение, Ложь, ДанныеВизуализации.ДвоичныеДанные.Размер(),
				ДанныеВизуализации.ПрисоединенныйФайлПредставление,
				ДанныеВизуализации.ПрисоединенныйФайлПредставление);
			
			ДанныеФайла = Новый Структура(
				"Расширение, ПолноеНаименование",
				ДанныеВизуализации.ПрисоединенныйФайлРасширение,
				ДанныеВизуализации.ПрисоединенныйФайлПредставление);
			
			ДанныеВизуализации = ОбзорФайловВызовСервера.РеквизитыФайлаИДанныеВизуализации(
				ПараметрыПолученияПредставления,
				РеквизитыФайла,
				ДанныеФайла);
			
			Если ТипЗнч(ДанныеВизуализации) = Тип("Строка") Тогда
				ТекстHTML = ДанныеВизуализации;
			КонецЕсли;
			
		Иначе
			
			// Сформируем HTML представление не поддерживаемого файла.
			ТекстHTML = ОбзорФайловКлиентСервер.HTMLПредставлениеНеПоддерживаемыйДокументЭДО();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора шаблона задачи.
// 
// Параметры:
//  ШаблонЗадачи - СправочникСсылка.ШаблоныЗадач.
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ОписаниеHTMLШаблоныЗадач(ШаблонЗадачи)
	
	РеквизитыШаблонаЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ШаблонЗадачи,
		"ВидЗадачи, Приоритет, Челчасов, Проект, Автор,
		|Заголовок, ДобавлятьПредставлениеПриложений, ШаблонЗаголовка,
		|ОписаниеФорматированное, ШаблонОписания,
		|Срок, СрокВариантУстановки, СрокДни, СрокМинуты, СрокЧасы,
		|Участники, Приложения");
	Участники = РеквизитыШаблонаЗадачи.Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки");
	
	Приложения = РеквизитыШаблонаЗадачи.Приложения.Выгрузить();
	Приложения.Сортировать("НомерСтроки");
	
	ИспользоватьДатуИВремяВСрокахЗадач =
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	// Описание.
	Если ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.ШаблонОписания) Тогда
		
		ОписаниеФорматированное = Новый ФорматированныйДокумент();
		Описание = СтрШаблон("%1: %2",
			НСтр("ru = 'Автоподстановка'"),
			РеквизитыШаблонаЗадачи.ШаблонОписания);
		ЭлементОписания = ОписаниеФорматированное.Добавить(Описание, Тип("ТекстФорматированногоДокумента"));
		ЭлементОписания.НавигационнаяСсылка =
			"v8doc:" + ПолучитьНавигационнуюСсылку(РеквизитыШаблонаЗадачи.ШаблонОписания);
		
	Иначе
		
		ОписаниеФорматированное =
			РеквизитыШаблонаЗадачи.ОписаниеФорматированное.Получить(); // ФорматированныйДокумент
		
	КонецЕсли;
	
	ТекстHTML = ТекстHTMLФорматированногоДокумента(ОписаниеФорматированное);
	
	// Заголовок (Вид задачи).
	Если ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.ШаблонЗаголовка) Тогда
		
		ПредставлениеЗаголовка = СтрШаблон("%1: %2",
			НСтр("ru = 'Автоподстановка'"),
			РеквизитыШаблонаЗадачи.ШаблонЗаголовка);
		СсылкаЗаголовка =
			"v8doc:" + ПолучитьНавигационнуюСсылку(РеквизитыШаблонаЗадачи.ШаблонЗаголовка);
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.Заголовок)
		И РеквизитыШаблонаЗадачи.ДобавлятьПредставлениеПриложений Тогда
		
		ПредставлениеЗаголовка = СтрШаблон("%1 ""%2""",
			РеквизитыШаблонаЗадачи.Заголовок,
			НСтр("ru = 'Представление приложений'"));
		СсылкаЗаголовка = "";
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.Заголовок)
		И Не РеквизитыШаблонаЗадачи.ДобавлятьПредставлениеПриложений Тогда
		
		ПредставлениеЗаголовка = РеквизитыШаблонаЗадачи.Заголовок;
		СсылкаЗаголовка = "";
		
	Иначе
		
		ПредставлениеЗаголовка = НСтр("ru = 'Без заголовка'");
		СсылкаЗаголовка = "";
		
	КонецЕсли;
	
	ПредставлениеВидаЗадачи = Строка(РеквизитыШаблонаЗадачи.ВидЗадачи);
	
	Заголовок = СтрШаблон("%1 (%2)", ПредставлениеЗаголовка, ПредставлениеВидаЗадачи);
	ТекстHTMLЗаголовок = "";
	ДобавитьЗаголовок(ТекстHTMLЗаголовок, Заголовок, СсылкаЗаголовка);
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "<body>", "<body>" + ТекстHTMLЗаголовок);
	
	// Откроем конечный тег body для дальнейшего заполнения.
	ТекстHTML = СтрЗаменить(ТекстHTML, "</body>", "");
	ДобавитьРазделитель(ТекстHTML);
	
	// Реквизиты шаблона.
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.ШаблоныЗадач.Реквизиты.Приоритет.Синоним,
		Строка(РеквизитыШаблонаЗадачи.Приоритет));
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.ШаблоныЗадач.Реквизиты.Челчасов.Синоним,
		РеквизитыШаблонаЗадачи.Челчасов);
	
	СрокПредставление = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
		РеквизитыШаблонаЗадачи.Срок,
		РеквизитыШаблонаЗадачи.СрокДни,
		РеквизитыШаблонаЗадачи.СрокЧасы,
		РеквизитыШаблонаЗадачи.СрокМинуты,
		ИспользоватьДатуИВремяВСрокахЗадач,
		РеквизитыШаблонаЗадачи.СрокВариантУстановки);
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.ШаблоныЗадач.Реквизиты.Срок.Синоним,
		СрокПредставление);
	
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.ШаблоныЗадач.Реквизиты.Проект.Синоним,
		РеквизитыШаблонаЗадачи.Проект);
	ДобавитьРеквизит(
		ТекстHTML,
		Метаданные.Справочники.ШаблоныЗадач.Реквизиты.Автор.Синоним,
		РеквизитыШаблонаЗадачи.Автор);
	
	// Табличная чатсь "Участники".
	ДобавитьТаблицу(
		ТекстHTML,
		Участники,
		Метаданные.Справочники.ШаблоныЗадач.ТабличныеЧасти.Участники.Синоним,
		Метаданные.Справочники.ШаблоныЗадач.ТабличныеЧасти.Участники.Реквизиты.Участник.Имя);
	
	// Табличная часть "Приложения".
	ДобавитьТаблицу(
		ТекстHTML,
		Приложения,
		Метаданные.Справочники.ШаблоныЗадач.ТабличныеЧасти.Приложения.Синоним,
		Метаданные.Справочники.ШаблоныЗадач.ТабличныеЧасти.Приложения.Реквизиты.Приложение.Имя);
	
	// Закроем тег body, т.к. ранее его открывали для заполнения.
	ТекстHTML = ТекстHTML + "</body>";
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML обзора сотрудника.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Строка
// 
Функция ОписаниеHTMLСотрудники(Сотрудник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоказыватьФотографии = ПоказыватьФотографии();
	
	ТекстHTML = "<html>"
		+ "<head>"
		+ ОбзорОбъектовКлиентСервер.СтильHTML()
		+ "<body %bgcolor%>";
		
	ТекстHTML = ТекстHTML + "<table>";
	ТекстHTML = ТекстHTML + "<tr>";
	
	ЕстьФото = Ложь;
	ДвоичныеДанныеФото = Неопределено;
	Если ПоказыватьФотографии Тогда
		ДвоичныеДанныеФото = РаботаСФотографиями.ПолучитьДвоичныеДанныеФото(Сотрудник);
		Если ЗначениеЗаполнено(ДвоичныеДанныеФото) Тогда
			ЕстьФото = Истина;
			ДвоичныеДанныеФото = ДвоичныеДанныеФото;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка на право изменения карточки контакта.
	ПраваПоОбъекту = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
		Сотрудник,
		Пользователи.ТекущийПользователь());
	
	ВозможностьДобавленияФото = ПраваПоОбъекту.Изменение;
	
	// Описание контакта.
	ОписаниеКонтакта = "";
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Подразделение) КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Должность) КАК Должность
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ОписаниеКонтакта, 
			Символы.ПС, 
			Выборка.Подразделение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Должность) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ОписаниеКонтакта, 
			Символы.ПС, 
			Выборка.Должность);
	КонецЕсли;
	
	Телефон = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Сотрудник, 
		Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(Телефон) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ОписаниеКонтакта, 
			Символы.ПС, 
			СтрШаблон(НСтр("ru = '%1: %2'"), НСтр("ru='Тел'"), Телефон));
	КонецЕсли;
	
	АдресЭП = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Сотрудник, 
		Справочники.ВидыКонтактнойИнформации.EmailСотрудника,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ОписаниеКонтакта, 
			Символы.ПС, 
			СтрШаблон(НСтр("ru = '%1: %2'"), НСтр("ru='E-mail'"), АдресЭП));
	КонецЕсли;
	
	ПредставлениеКонтакта = 
		Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Владелец"));
	
	ДоступВИнформационнуюБазу = Неопределено;
	Если Сотрудники.ЭтоСотрудникБезПользователя(Сотрудник) Тогда
		ДоступВИнформационнуюБазу = НСтр("ru = 'Сотруднику не разрешен вход в программу'");
	КонецЕсли;
		
	// Фото контакта
	Если ПоказыватьФотографии Тогда
		
		ДанныеКартинкиHTML = "";
		СсылкаПодФото = "";
		
		Если ЕстьФото Тогда
			Картинка = Новый Картинка(ДвоичныеДанныеФото);
			ДанныеКартинкиHTML = ДанныеКартинкиHTML(Картинка);
			СсылкаПодФото = "v8doc:" + ПолучитьНавигационнуюСсылку(Сотрудник);
		ИначеЕсли ВозможностьДобавленияФото Тогда
			Картинка = БиблиотекаКартинок.ПользовательБезФото;
			ДанныеКартинкиHTML = ДанныеКартинкиHTML(Картинка);
			СсылкаПодФото = СтрШаблон("v8doc:employees/AddPhoto/%1", ПолучитьНавигационнуюСсылку(Сотрудник));
		КонецЕсли;
		
		Если СсылкаПодФото <> "" Тогда
			ТекстHTML = ТекстHTML + "<td width = ""20"">";
			ТекстHTML = ТекстHTML +
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=""%1""><img border=""1"" src=""%2"" height=""70"" style=""border-color: #bdbdbd"" ></a>", 
					СсылкаПодФото,
					ДанныеКартинкиHTML);
			ТекстHTML = ТекстHTML + "</td>";
		КонецЕсли;
		
	КонецЕсли;
	
	// Описание контакта
	ТекстHTML = ТекстHTML + "<td>";
	
	ТекстHTML = ТекстHTML + "<b>";
	ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
		ТекстHTML,
		Сотрудник,
		"",
		ПредставлениеКонтакта);
	ТекстHTML = ТекстHTML + "</b>";
		
	ТекстHTML = ТекстHTML + "<br>";
	
	ОписаниеКонтакта_HTML = "";
	ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
		ОписаниеКонтакта_HTML,
		ОписаниеКонтакта,
		"");
	
	ОписаниеКонтакта_HTML = СтрЗаменить(ОписаниеКонтакта_HTML, Символы.ПС, "<br>");
	ТекстHTML = ТекстHTML + ОписаниеКонтакта_HTML;
	
	Если ДоступВИнформационнуюБазу <> Неопределено Тогда
		ТекстHTML = ТекстHTML + "<br><i>" + ДоступВИнформационнуюБазу + "</i>";
	КонецЕсли;
		
	ТекстHTML = ТекстHTML + "</td>";
		
	ОписаниеОтсутствия = Отсутствия.ПолучитьОписаниеТекущегоОтсутствияСотрудника(Сотрудник);
	Если ОписаниеОтсутствия <> Неопределено Тогда
		
		ЦветФонаHTMLОписания = "bgcolor = ""#FFE1E1""";
		
		ТекстHTML = ТекстHTML + "<td align = right>";
		
		ТекстHTML = ТекстHTML
			+ СтрШаблон("<a href=v8doc:%1>%2</a>",
				ПолучитьНавигационнуюСсылку(ОписаниеОтсутствия.Ссылка),
				РаботаС_HTML.ЗаменитьСпецСимволыHTML(ОписаниеОтсутствия.Представление));
		
		ТекстHTML = ТекстHTML + "</td>";
		
	Иначе
		
		ЦветФонаHTMLОписания = "";
		
	КонецЕсли;
	
	ТекстHTML = ТекстHTML + "</tr>";
	ТекстHTML = ТекстHTML + "</table>";
	
	ТекстHTML = ТекстHTML + "</body>";
	ТекстHTML = ТекстHTML + "</html>";
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "%bgcolor%", ЦветФонаHTMLОписания);
	
	Возврат ТекстHTML;
	
КонецФункции

// Получает строки элемента дерева.
// 
// Параметры:
//  ЭлементДерева - ДанныеФормыДерево, ДеревоЗначений, СтрокаДереваЗначений - Элемет дерева.
// 
// Возвращаемое значение:
//  КоллекцияСтрокДереваЗначений - Строки элемента дерева.
//
Функция ПолучитьСтроки(ЭлементДерева)
	
	Если ТипЗнч(ЭлементДерева) = Тип("ДеревоЗначений") Или ТипЗнч(ЭлементДерева) = Тип("СтрокаДереваЗначений") Тогда
		СтрокиЭлементаДерева = ЭлементДерева.Строки;
	Иначе
#Если Не ВнешнееСоединение Тогда
		СтрокиЭлементаДерева = ЭлементДерева.ПолучитьЭлементы();
#Иначе
		ВызватьИсключение НСтр("ru = 'Метод ПолучитьСтроки не доступен во внешнем соединении.'");
#КонецЕсли
	КонецЕсли;
	
	Возврат СтрокиЭлементаДерева;
	
КонецФункции

// Получает строки элемента дерева по иерархии.
// 
// Параметры:
//  ЭлементДерева - ДанныеФормыДерево, ДеревоЗначений, СтрокаДереваЗначений - Элемет дерева.
// 
// Возвращаемое значение:
//  Массив из СтрокаДереваЗначений - Строки элемента дерева по иерархии.
//
Функция ПолучитьСтрокиПоИерархии(ЭлементДерева)
	
	СтрокиЭлементаДереваПоИерархии = Новый Массив;
	
	СтрокиКОбходу = Новый Массив;
	СтрокиКОбходу.Добавить(ЭлементДерева);
	
	Пока СтрокиКОбходу.Количество() > 0 Цикл
		
		ОчереднойЭлементДерева = СтрокиКОбходу.Получить(0);
		СтрокиКОбходу.Удалить(0);
		
		СтрокиОчередногоЭлемента = ПолучитьСтроки(ОчереднойЭлементДерева);
		
		Для Каждого СтрокаОчередногоЭлемента Из СтрокиОчередногоЭлемента Цикл
			СтрокиКОбходу.Добавить(СтрокаОчередногоЭлемента);
			СтрокиЭлементаДереваПоИерархии.Добавить(СтрокаОчередногоЭлемента);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтрокиЭлементаДереваПоИерархии;
	
КонецФункции

// Формирует контекст обновления дерева обзора.
// 
// Параметры:
//  ОбъектОбзора - Произвольный.
//  РеквизитДерева - ДанныеФормыДерево.
//  ЭлементДерева - ТаблицаФормы.
//  ЭлементЗаголовка - ПолеФормы.
//  ПоказатьПомеченныеНаУдаление - Булево.
// 
// Возвращаемое значение:
//  см. ОбзорОбъектовКлиентСервер.НовыйКонтекстОбновленияДереваОбзора.
//
Функция КонтекстОбновленияДереваОбзора(ОбъектОбзора, РеквизитДерева, ЭлементДерева, ЭлементЗаголовка, ПоказатьПомеченныеНаУдаление)
	
	КонтекстОбновления = ОбзорОбъектовКлиентСервер.НовыйКонтекстОбновленияДереваОбзора();
	КонтекстОбновления.ОбъектОбзора = ОбъектОбзора;
	КонтекстОбновления.РеквизитДерева = РеквизитДерева;
	КонтекстОбновления.ЭлементДерева = ЭлементДерева;
	КонтекстОбновления.ЭлементЗаголовка = ЭлементЗаголовка;
	КонтекстОбновления.ПоказатьПомеченныеНаУдаление = ПоказатьПомеченныеНаУдаление;
	
	КонтекстОбновления.СтрокиДереваПервогоУровня = ПолучитьСтроки(РеквизитДерева);
	
	ВсеСтрокиДерева = ПолучитьСтрокиПоИерархии(РеквизитДерева);
	Для Каждого СтрокаДереваОбзора Из ВсеСтрокиДерева Цикл
		КонтекстОбновления.СтрокиДереваПоКлючам.Вставить(
			СтрокаДереваОбзора.КлючСтроки,
			СтрокаДереваОбзора);
	КонецЦикла;
	
	Возврат КонтекстОбновления;
	
КонецФункции

// Добавляет строку объекта обзора на первую позицию.
// 
// Параметры:
//  КонтекстОбновления - см. ОбзорОбъектовКлиентСервер.НовыйКонтекстОбновленияДереваОбзора.
//
Процедура ДобавитьСтрокуОбъектаОбзора(КонтекстОбновления)
	
	ОбъектОбзора = КонтекстОбновления.ОбъектОбзора;
	ВостребованныеСтроки = КонтекстОбновления.ВостребованныеСтроки;
	СтрокиДереваПоКлючам = КонтекстОбновления.СтрокиДереваПоКлючам;
	СтрокиДереваПервогоУровня = КонтекстОбновления.СтрокиДереваПервогоУровня;
	
	ВостребованныеСтроки.Вставить(ОбъектОбзора, Истина);
	
	СтрокаОбъектаОбзора = СтрокиДереваПоКлючам.Получить(ОбъектОбзора);
	
	Если СтрокаОбъектаОбзора <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОбъектаОбзора = СтрокиДереваПервогоУровня.Вставить(0);
	СтрокаОбъектаОбзора.КлючСтроки = ОбъектОбзора;
	
	СтрокиДереваПоКлючам.Вставить(ОбъектОбзора, СтрокаОбъектаОбзора);
	
КонецПроцедуры

// Добавляет строки приложений объекта обзора в конец.
// 
// Параметры:
//  КонтекстОбновленияДереваОбзора - см. ОбзорОбъектовКлиентСервер.НовыйКонтекстОбновленияДереваОбзора.
//
Процедура ДобавитьПриложенияОбъектаОбзора(КонтекстОбновленияДереваОбзора)
	
	ОбъектОбзора = КонтекстОбновленияДереваОбзора.ОбъектОбзора;
	ПоказатьПомеченныеНаУдаление = КонтекстОбновленияДереваОбзора.ПоказатьПомеченныеНаУдаление;
	ВостребованныеСтроки = КонтекстОбновленияДереваОбзора.ВостребованныеСтроки;
	СтрокиДереваПоКлючам = КонтекстОбновленияДереваОбзора.СтрокиДереваПоКлючам;
	СтрокиДереваПервогоУровня = КонтекстОбновленияДереваОбзора.СтрокиДереваПервогоУровня;
	
	ПриложенияОбъектаОбзора = ПриложенияОбъектаОбзора(ОбъектОбзора, ПоказатьПомеченныеНаУдаление);
	
	Для Каждого Приложение Из ПриложенияОбъектаОбзора Цикл
		
		ВостребованныеСтроки[Приложение] = Истина;
		
		СтрокаПриложения = СтрокиДереваПоКлючам.Получить(Приложение);
		
		Если СтрокаПриложения <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОбъектаОбзора = СтрокиДереваПервогоУровня.Добавить();
		СтрокаОбъектаОбзора.КлючСтроки = Приложение;
		
		СтрокиДереваПоКлючам.Вставить(Приложение, СтрокаОбъектаОбзора);
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет невостребованные строки из дерева обзора.
// 
// Параметры:
//  КонтекстОбновленияДереваОбзора - см. ОбзорОбъектовКлиентСервер.НовыйКонтекстОбновленияДереваОбзора.
//
Процедура УдалитьНевостребованныеСтроки(КонтекстОбновленияДереваОбзора)
	
	ВостребованныеСтроки = КонтекстОбновленияДереваОбзора.ВостребованныеСтроки;
	СтрокиДереваПоКлючам = КонтекстОбновленияДереваОбзора.СтрокиДереваПоКлючам;
	СтрокиДереваПервогоУровня = КонтекстОбновленияДереваОбзора.СтрокиДереваПервогоУровня;
	
	Для Каждого КлючИЗначение Из СтрокиДереваПоКлючам Цикл
		
		КлючСтроки = КлючИЗначение.Ключ;
		СтрокаДереваПриложений = КлючИЗначение.Значение;
		
		ЭтоВостребованнаяСтрока = (ВостребованныеСтроки.Получить(КлючСтроки) = Истина);
		
		Если ЭтоВостребованнаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРодителя = СтрокаДереваПриложений.ПолучитьРодителя();
		Если СтрокаРодителя = Неопределено Тогда
			СтрокиКОбработке = СтрокиДереваПервогоУровня;
		Иначе
			СтрокиКОбработке = ПолучитьСтроки(СтрокаРодителя);
		КонецЕсли;
		СтрокиКОбработке.Удалить(СтрокаДереваПриложений);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные строк в дереве обзора.
// 
// Параметры:
//  КонтекстОбновленияДереваОбзора - см. ОбзорОбъектовКлиентСервер.НовыйКонтекстОбновленияДереваОбзора.
//
Процедура ОбновитьДанныеСтрок(КонтекстОбновленияДереваОбзора)
	
	СтрокиДереваПоКлючам = КонтекстОбновленияДереваОбзора.СтрокиДереваПоКлючам;
	
	// Определим данные, по которым нужно получить данные.
	КлючиМероприятий = Новый Массив;
	КлючиФайлов = Новый Массив;
	
	Для Каждого КлючИЗначение Из СтрокиДереваПоКлючам Цикл
		
		Ключ = КлючИЗначение.Ключ;
		
		ТипКлюча = ТипЗнч(Ключ);
		Если ТипКлюча = Тип("СправочникСсылка.Мероприятия") Тогда
			КлючиМероприятий.Добавить(Ключ);
		ИначеЕсли ТипКлюча = Тип("СправочникСсылка.Файлы") Тогда
			КлючиФайлов.Добавить(Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Получим данные.
	РеквизитыМероприятий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		КлючиМероприятий,
		"ВерсияДанных");
	
	РеквизитыФайлов = Делопроизводство.ПолучитьДанныеФайловДляСписка(
		КлючиФайлов,
		Неопределено,
		Ложь,
		Истина);
	
	// Обновим данные в дереве.
	Для Каждого КлючИЗначение Из СтрокиДереваПоКлючам Цикл
		
		Ключ = КлючИЗначение.Ключ;
		
		ТипКлюча = ТипЗнч(Ключ);
		Если ТипКлюча = Тип("СправочникСсылка.Мероприятия") Тогда
			
			РеквизитыПоКлючу = РеквизитыМероприятий.Получить(Ключ);
			
			СтрокаДереваПоКлючу = СтрокиДереваПоКлючам.Получить(Ключ);
			СтрокаДереваПоКлючу.Представление = НСтр("ru = 'Мероприятие'");
			СтрокаДереваПоКлючу.ВерсияДанных = РеквизитыПоКлючу.ВерсияДанных;
			СтрокаДереваПоКлючу.ИндексКартинки = 10;
			
			СтрокаДереваПоКлючу.СтатусПроверкиЭП = -1;
			
			СтрокаДереваПоКлючу.ВыделятьСерымЦветом = Ложь;
			СтрокаДереваПоКлючу.ВыделятьЗеленымЦветом = Ложь;
			
			СтрокаДереваПоКлючу.ДанныеОбъекта = Неопределено;
			
		ИначеЕсли ТипКлюча = Тип("СправочникСсылка.Файлы") Тогда
			
			РеквизитыПоКлючу = РеквизитыФайлов.Найти(Ключ, "Ссылка");
			
			СтрокаДереваПоКлючу = СтрокиДереваПоКлючам.Получить(Ключ);
			
			МассивПредставление = Новый Массив;
			МассивПредставление.Добавить(РеквизитыПоКлючу.Наименование);
			Если ЗначениеЗаполнено(РеквизитыПоКлючу.Описание) Тогда
				МассивПредставление.Добавить(РеквизитыПоКлючу.Описание);
			КонецЕсли;
			СтрокаДереваПоКлючу.Представление = СтрСоединить(МассивПредставление, ", ");
			
			СтрокаДереваПоКлючу.ВерсияДанных = РеквизитыПоКлючу.ВерсияДанных;
			
			СтрокаДереваПоКлючу.ИндексКартинки = РеквизитыПоКлючу.ИндексКартинки;
			
			СтрокаДереваПоКлючу.СтатусПроверкиЭП = РеквизитыПоКлючу.СтатусПроверкиЭП;
			
			Если РеквизитыПоКлючу.РедактируетТекущийПользователь Тогда
				СтрокаДереваПоКлючу.ВыделятьСерымЦветом = Ложь;
				СтрокаДереваПоКлючу.ВыделятьЗеленымЦветом = Истина;
			ИначеЕсли ЗначениеЗаполнено(РеквизитыПоКлючу.Редактирует) Тогда
				СтрокаДереваПоКлючу.ВыделятьСерымЦветом = Истина;
				СтрокаДереваПоКлючу.ВыделятьЗеленымЦветом = Ложь;
			Иначе
				СтрокаДереваПоКлючу.ВыделятьСерымЦветом = Ложь;
				СтрокаДереваПоКлючу.ВыделятьЗеленымЦветом = Ложь;
			КонецЕсли;
			
			СтрокаДереваПоКлючу.ДанныеОбъекта = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(
				РеквизитыПоКлючу);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Настраивает режим отображения для элемента формы.
// Если только один уровень в дереве, то устанавливате режим списка.
// Если несколько уровней в дереве, то устанавливает режим дерева.
// 
// Параметры:
//  КонтекстОбновленияДереваОбзора - см. ОбзорОбъектовКлиентСервер.НовыйКонтекстОбновленияДереваОбзора.
//
Процедура НастроитьРежимДерева(КонтекстОбновленияДереваОбзора)
	
	СтрокиДереваПервогоУровня = КонтекстОбновленияДереваОбзора.СтрокиДереваПервогоУровня;
	ЭлементДерева = КонтекстОбновленияДереваОбзора.ЭлементДерева;
	
	ЕстьЭлементыВторогоУровня = Ложь;
	
	Для Каждого СтрокаДерева Из СтрокиДереваПервогоУровня Цикл
		
		СтрокаДереваСтроки = ПолучитьСтроки(СтрокаДерева);
		Если СтрокаДереваСтроки.Количество() > 0 Тогда
			ЕстьЭлементыВторогоУровня = Истина;
			Прервать;
		Конецесли;
		
	КонецЦикла;
	
#Если Не ВнешнееСоединение Тогда
	ЭлементДерева.Отображение = ?(ЕстьЭлементыВторогоУровня,
		ОтображениеТаблицы.Дерево,
		ОтображениеТаблицы.Список);
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод НастроитьРежимДерева не доступен во внешнем соединении.'");
#КонецЕсли
	
КонецПроцедуры

// Приложения объекта обзора.
// 
// Параметры:
//  ОбъектОбзора - Произвольный.
//  ПоказатьПомеченныеНаУдаление - Булево.
// 
// Возвращаемое значение:
//  Массив из Произвольный - Приложения объекта обзора.
//
Функция ПриложенияОбъектаОбзора(ОбъектОбзора, ПоказатьПомеченныеНаУдаление)
	
	// Для скорости лучше в привилегированном режиме, раз есть права на объект обзора – то и на его файлы тоже.
	УстановитьПривилегированныйРежим(Истина);
	
	ПриложенияОбъектаОбзора = Новый Массив;
	
	ТипОбъектаОбзора = ТипЗнч(ОбъектОбзора);
	Если ТипОбъектаОбзора = Тип("СправочникСсылка.Мероприятия") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Файлы.Ссылка КАК Приложение
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла = &ОбъектОбзора
			|	И НЕ Файлы.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Файлы.Наименование");
		
		Запрос.УстановитьПараметр("ОбъектОбзора", ОбъектОбзора);
		
		Если ПоказатьПомеченныеНаУдаление Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Файлы.ПометкаУдаления", "");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаРезультата = РезультатЗапроса.Выгрузить();
		
		ПриложенияОбъектаОбзора = ТаблицаРезультата.ВыгрузитьКолонку("Приложение");
		
	КонецЕсли;
	
	Возврат ПриложенияОбъектаОбзора;
	
КонецФункции

// Формирует счетчика заголовка дерева обзора.
// 
// Параметры:
//  КонтекстОбновленияДереваОбзора - см. ОбзорОбъектовКлиентСервер.НовыйКонтекстОбновленияДереваОбзора.
//
Процедура ОбновитьЗаголовкДереваОбзора(КонтекстОбновленияДереваОбзора)
	
	КоличествоФайлов = 0;
	
	Для Каждого КлючИЗначение Из КонтекстОбновленияДереваОбзора.СтрокиДереваПоКлючам Цикл
		
		КлючСтроки = КлючИЗначение.Ключ;
		
		Если ТипЗнч(КлючСтроки) = Тип("СправочникСсылка.Файлы") Тогда
			КоличествоФайлов = КоличествоФайлов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗаголовка = НСтр("ru = 'Мероприятие и файлы'");
	
	Если ЗначениеЗаполнено(КоличествоФайлов) Тогда
		ПолныйЗаголовок = СтрШаблон("%1 (%2)", ТекстЗаголовка, Строка(КоличествоФайлов));
	Иначе
		ПолныйЗаголовок = ТекстЗаголовка;
	КонецЕсли;
	
#Если Не ВнешнееСоединение Тогда
	КонтекстОбновленияДереваОбзора.ЭлементЗаголовка.Заголовок = ПолныйЗаголовок;
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод ОбновитьЗаголовкДереваОбзора не доступен во внешнем соединении.'");
#КонецЕсли
	
КонецПроцедуры

Процедура ДобавитьДопРеквизит(ТекстHTML, Значение, Строка)
	
	ФорматСвойства = Строка.Свойство.ФорматСвойства;
	
	Если Не ЗначениеЗаполнено(ФорматСвойства) Тогда 
		ТипЗначения = Строка.Свойство.ТипЗначения;
		
		Если ТипЗначения.СодержитТип(Тип("Дата")) Тогда 
			Если ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
				ФорматСвойства = ФорматСвойства + "ДЛФ = 'T';";
			ИначеЕсли ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
				ФорматСвойства = ФорматСвойства + "ДЛФ = 'D';";
			ИначеЕсли ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя Тогда
				ФорматСвойства = ФорматСвойства + "ДЛФ = 'DT';";
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗначения.СодержитТип(Тип("Число")) Тогда 	
			Разрядность = ТипЗначения.КвалификаторыЧисла.Разрядность;
			РазрядностьДробнойЧасти = ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			
			ФорматСвойства = ФорматСвойства + "ЧЦ = '" + Разрядность + "';";
			ФорматСвойства = ФорматСвойства + "ЧДЦ = '" + РазрядностьДробнойЧасти + "';";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФорматСвойства) Тогда 
		ДобавитьРеквизит(ТекстHTML, Строка(Строка.Наименование) + ":", Формат(Значение, ФорматСвойства));
	Иначе
		ДобавитьРеквизит(ТекстHTML, Строка(Строка.Наименование) + ":", Значение);
	КонецЕсли;
	
КонецПроцедуры

// Формирует данные картинки для HTML.
// 
// Параметры:
//  Картинка - Картинка
// 
// Возвращаемое значение:
// Строка
// 
Функция ДанныеКартинкиHTML(Картинка)
	
	ДвоичныеДанныеКартинки = Картинка.ПолучитьДвоичныеДанные();
	Base64СтрокаКартинки = Base64Строка(ДвоичныеДанныеКартинки);
	
	РасширениеКартинки = НРег(Строка(Картинка.Формат()));
	Если РасширениеКартинки = "svg" Тогда
		РасширениеКартинки = "svg+xml";
	КонецЕсли;
	
	ДанныеКартинкиHTML = СтрШаблон("data:image/%1;base64,%2",
		РасширениеКартинки,
		Base64СтрокаКартинки);
	
	Возврат ДанныеКартинкиHTML;
	
КонецФункции

#КонецОбласти
