// Переопределяемый модуль - совершает аналогичные действия, но отличается для конкретной конфигурации из-за привязки
// к метаданным.
// Сюда вынесены методы, зависящие от метаданных других подсистем конфигурации.
//

#Область ПрограммныйИнтерфейс

// Есть ли у текущего пользователя доступ к работе с МЭДО.
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДоступКРаботеСМЭДО() Экспорт
	
	Возврат МЭДОДокументооборот.ЕстьДоступКРаботеСМЭДО();
	
КонецФункции

// Вызывается при регистрации документа и обновляет связанные с документом данные и другие действия, если это
// необходимо. Устанавливает состояние "Документ зарегистрирован" у входящих и исходящих документов со способом
// доставки "МЭДО".
//
// Параметры:
//  ДокументОбъект - ОпределяемыйТип.ПредметМЭДООбъект - Форма.Объект или объект документа
//  Направление - ПеречислениеСсылка.НаправленияСообщенийМЭДО - Направление документа.
Процедура ПриРегистрацииДокумента(ДокументОбъект, Направление) Экспорт
	
	МЭДОДокументооборот.ПриРегистрацииДокумента(ДокументОбъект, Направление);
	
КонецПроцедуры

// Проверяет, относится ли вообще документ к МЭДО или нет
// 
// Параметры:
//  ФормаИлиДокумент - ФормаКлиентскогоПриложения - Форма с объектом документа
//  				 - ОпределяемыйТип.ПредметМЭДООбъект -  или Объект документа.
//  				 - ОпределяемыйТип.ПредметМЭДО - Ссылка на документ
//  Направление - ПеречислениеСсылка.НаправленияСообщенийМЭДО - Направление документа
// 
// Возвращаемое значение:
//  Булево - Это документ МЭДО или нет.
Функция ЭтоДокументМЭДО(ФормаИлиДокумент, Направление) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Направление) Тогда
		Возврат Ложь;
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("ИспользоватьМЭДО") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПереданаФорма = (ТипЗнч(ФормаИлиДокумент) = Тип("ФормаКлиентскогоПриложения"));
	
	ДокументСсылка = Неопределено;
	Если ПереданаФорма Тогда
		ДокументСсылка = ФормаИлиДокумент.Объект.Ссылка;
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаИлиДокумент))
		Или Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаИлиДокумент)) Тогда
		ДокументСсылка = ФормаИлиДокумент;
	Иначе
		ДокументСсылка = ФормаИлиДокумент.Ссылка;
	КонецЕсли;
	
	Если Не ПереданаФорма И Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь;
		
	ИначеЕсли Направление = Перечисления.НаправленияСообщенийМЭДО.Входящее Тогда
		
		Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		СтруктураСостояния = РегистрыСведений.СостоянияДокументовМЭДО.СостояниеДокумента(
			ДокументСсылка,
			Перечисления.СостоянияДокументовМЭДО.ДокументПолучен,
			"Состояние",
			ТекущаяДатаСеанса());
		Если Не ЗначениеЗаполнено(СтруктураСостояния.Состояние) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли Направление = Перечисления.НаправленияСообщенийМЭДО.Исходящее Тогда
		
		Если ПереданаФорма Тогда
			ЕстьХотьОдинСпособМЭДО = Ложь;
			Если ФормаИлиДокумент.СпособОтправки = Справочники.СпособыДоставки.МЭДО Тогда
				ЕстьХотьОдинСпособМЭДО = Истина;
			Иначе
				Для Каждого Стр Из ФормаИлиДокумент.Объект.Контрагенты Цикл
					Если Стр.СпособОтправки = Справочники.СпособыДоставки.МЭДО Тогда
						ЕстьХотьОдинСпособМЭДО = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если Не ЕстьХотьОдинСпособМЭДО Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
		
			КорреспонденцияДокумента = РаботаСКорреспонденцией.КорреспонденцияДокумента(ДокументСсылка);
			Если Не ЗначениеЗаполнено(КорреспонденцияДокумента) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ОтборСпособа = Новый Структура("СпособОтправки", Справочники.СпособыДоставки.МЭДО);
			Получатели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				КорреспонденцияДокумента, "Корреспонденты").Выгрузить(); //@skip-check wrong-string-literal-content
			Если Получатели.НайтиСтроки(ОтборСпособа).Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Если Не ВнешнееСоединение Тогда

// Заполняет закладку МЭДО в форме документа. 
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  Форма документа объекта типа "Предмет МЭДО".
//  Направление - ПеречислениеСсылка.НаправленияСообщенийМЭДО - Направление документа.
Процедура ЗаполнитьЗакладкуМЭДОВФорме(Форма, Направление) Экспорт
	
	МЭДОДокументооборот.ЗаполнитьЗакладкуМЭДОВФорме(Форма, Направление);
	
КонецПроцедуры

// Обновляет историю состояний документа МЭДО в форме. И его актуальное состояние.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  Форма объекта типа "ПредметМЭДО":
//   * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ОпределяемыйТип.ПредметМЭДО
//   * ИсторияСостоянийМЭДО - ДанныеФормыКоллекция
//   * ТекущееСостояниеМЭДО - ПеречислениеСсылка.СостоянияДокументовМЭДО
Процедура ОбновитьИсториюСостоянийМЭДОВФорме(Форма) Экспорт
	
	МЭДОДокументооборот.ОбновитьИсториюСостоянийМЭДОВФорме(Форма);
	
КонецПроцедуры

// Управляет на форме исходящего документа видимостью элементов закладки МЭДО.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  Форма документа объекта типа "Предмет МЭДО".
//  Направление - ПеречислениеСсылка.НаправленияСообщенийМЭДО - Направление документа.
Процедура ВидимостьЭлементовМЭДОВФорме(Форма, Направление) Экспорт
	
	Элементы = Форма.Элементы;
	
	ЭтоИсходящий = (Направление = Перечисления.НаправленияСообщенийМЭДО.Исходящее);
	Если Не ЭтоДокументМЭДО(Форма, Направление) Тогда
		Элементы.ГруппаМЭДО.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	Элементы.ГруппаМЭДО.Видимость = Истина;
	Элементы.ОтправленМЭДО.Видимость = ЭтоИсходящий;
	Элементы.ГотовКОтправкеМЭДО.Видимость = ЭтоИсходящий;
	Элементы.ИсторияСостоянийМЭДООтправитьПоМЭДО.Видимость = ЭтоИсходящий;
	Элементы.ИсторияСостоянийМЭДООтправитьПоМЭДО.Доступность = Форма.ГотовКОтправкеМЭДО;
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ЭтоИсходящий И Не ЭтоПолноправныйПользователь Тогда
		// Во входящем блокируем поля:
		Элементы.ВидДокументаМЭДО.ТолькоПросмотр = Истина;
		Элементы.МестоСоставленияМЭДО.ТолькоПросмотр = Истина;
		Элементы.ГлавныйФайлМЭДО.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ИсторияСостоянийМЭДОСоздатьОтветноеУведомлениеМЭДО.Видимость
		= (Направление = Перечисления.НаправленияСообщенийМЭДО.Входящее);
	
	Элементы.ИсторияСостоянийМЭДОГруппаИдентификаторы.Видимость = ЭтоПолноправныйПользователь;
	
	Если Не ЕстьДоступКРаботеСМЭДО() Тогда
		Элементы.ГруппаМЭДО.ТолькоПросмотр = Истина;
		Элементы.ИсторияСостоянийМЭДООтправитьПоМЭДО.Доступность = Ложь;
		Элементы.ИсторияСостоянийМЭДОСоздатьОтветноеУведомлениеМЭДО.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Документ готов к отправке или нет. Для этого есть несколько признаков.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  Форма документа объекта типа "Предмет МЭДО":
//   * Объект - ДанныеФормыСтруктура - Поля:
//   ** РегистрационныйНомер - Строка -
//   ** Ссылка - ОпределяемыйТип.ПредметМЭДО -
//   * ВидДокументаМЭДО - СправочникСсылка.ВидыДокументовМЭДО
//   * МестоСоставленияМЭДО - СправочникСсылка.МестаСоставленияДокументовМЭДО
//   * ГлавныйФайлМЭДО - СправочникСсылка.Файлы -
//   * Файлы - ДанныеФормыДерево - Поля (как минимум):
//   ** ЭтоРольФайла - Булево
//   ** Ссылка - СправочникСсылка.Файлы -
//   ** Оригинал - Булево
//  Направление - ПеречислениеСсылка.НаправленияСообщенийМЭДО - Направление документа
//  ЭтоДокументМЭДО - Булево, Неопределено - Если передано Неопределено, то сама функция должна определить, это документ 
//  										МЭДО или нет.
//  СообщатьПричины - Булево - Если флаг Истина, то вернуть причины неготовности в параметр ПричиныНеготовности.
//  ПричиныНеготовности - Строка - Неявно вернет туда причины, почему документ не готов к отправке.
// 
// Возвращаемое значение:
//  Булево
Функция ДокументГотовКОтправке(
	Форма, Направление, Знач ЭтоДокументМЭДО = Неопределено, СообщатьПричины = Ложь) Экспорт
	
	ПричиныНеготовности = "";
	
	Если ЭтоДокументМЭДО = Ложь Тогда
		Если СообщатьПричины Тогда
			ПричиныНеготовности = ПричиныНеготовности + Символы.ПС + МЭДО.Текст_ИсходящийДокументНеМЭДО();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Направление <> Перечисления.НаправленияСообщенийМЭДО.Исходящее Тогда
		Если СообщатьПричины Тогда
			ПричиныНеготовности = ПричиныНеготовности + Символы.ПС
				+ НСтр("ru = 'Документ не является ""исходящим""'");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДокументМЭДО = Неопределено Тогда
		Если Не ЭтоДокументМЭДО(Форма, Направление) Тогда
			Если СообщатьПричины Тогда
				ПричиныНеготовности = ПричиныНеготовности + Символы.ПС + МЭДО.Текст_ИсходящийДокументНеМЭДО();
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомер) Тогда
		Если СообщатьПричины Тогда
			ПричиныНеготовности = ПричиныНеготовности + Символы.ПС + МЭДО.Текст_ДокументНеЗарегистрирован();
		Иначе
			Возврат Ложь;
		Конецесли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ВидДокументаМЭДО) Тогда
		Если СообщатьПричины Тогда
			ПричиныНеготовности = ПричиныНеготовности + Символы.ПС + МЭДО.Текст_НеЗаполненВидДокумента();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.МестоСоставленияМЭДО) Тогда
		Если СообщатьПричины Тогда
			ПричиныНеготовности = ПричиныНеготовности + Символы.ПС
				+ МЭДО.Текст_НеЗаполненоМестоСоставления();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ГлавныйФайл = Форма.ГлавныйФайлМЭДО; // СправочникСсылка.Файлы - для строгой типизации
	Если Не ЗначениеЗаполнено(ГлавныйФайл) Тогда
		// "Второй шанс". Главный файл обновляется при записи, если запись прошла именно сейчас, то на форме его еще нет
		// прочитаем его заново:
		Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			ГлавныйФайл  = Документы.ДанныеДокументаМЭДО.ДанныеДокументаМЭДО(
				Форма.Объект.Ссылка, "ГлавныйФайл", МЭДОСтруктурыДанных.НовыйЛегкийОтвет()).ГлавныйФайл;
			МЭДО.ПрисвоитьЗаполненное(Форма.ГлавныйФайлМЭДО, ГлавныйФайл);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ГлавныйФайл) Тогда
			Если СообщатьПричины Тогда
				ПричиныНеготовности = ПричиныНеготовности + Символы.ПС
					+ МЭДО.Текст_НеОпределенГлавныйФайл();
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Форма.Файлы - Дерево значений:
	// У главного файла снята галка "Оригинал":
	Для Каждого Стр Из Форма.Файлы.ПолучитьЭлементы() Цикл
		Если Не Стр.ЭтоРольФайла Тогда
			Если Стр.Ссылка = ГлавныйФайл И Стр.Оригинал Тогда 
				Если СообщатьПричины Тогда
					ПричиныНеготовности = ПричиныНеготовности + Символы.ПС
						+ МЭДОДокументооборот.Текст_ФайлНеДолженБытьСканКопией();
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Для Каждого Подстрока Из Стр.ПолучитьЭлементы() Цикл
				Если Подстрока.Ссылка = ГлавныйФайл И Подстрока.Оригинал Тогда 
					Если СообщатьПричины Тогда
						ПричиныНеготовности = ПричиныНеготовности + Символы.ПС
							+ МЭДОДокументооборот.Текст_ФайлНеДолженБытьСканКопией();
					Иначе
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// У главного файла должна быть хоть одна подпись:
	Если ЗначениеЗаполнено(ГлавныйФайл) Тогда
		ТекущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГлавныйФайл, "ТекущаяВерсия"); //@skip-check wrong-string-literal-content
		Если ЗначениеЗаполнено(ТекущаяВерсия) Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЭП.ИдентификаторПодписи КАК УникальныйИдентификатор
				|ИЗ
				|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
				|ГДЕ
				|	ЭП.ПодписанныйОбъект = &ВерсияФайла");
			Запрос.УстановитьПараметр("ВерсияФайла", ТекущаяВерсия);
			Если Запрос.Выполнить().Пустой() Тогда
				Если СообщатьПричины Тогда
					ПричиныНеготовности = ПричиныНеготовности + Символы.ПС
						+ МЭДО.Текст_НетПодписиГлавногоФайла();
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СообщатьПричины Тогда
				ПричиныНеготовности = ПричиныНеготовности + Символы.ПС
					+ МЭДО.Текст_НетПодписиГлавногоФайла();
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	// Иначе - будет выдано сообщение об ошибке выше.
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПричиныНеготовности) Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не все критерии готовности к отправке соблюдены: %1'"),
			ПричиныНеготовности);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ГотовКОтправкеМЭДО", "");
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Сохраняет вспомогательный документ ДанныеДокументаМЭДО из формы документа-владельца.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -  Форма документа объекта типа "Предмет МЭДО".
//  Направление - ПеречислениеСсылка.НаправленияСообщенийМЭДО
Процедура СохранитьДанныеМЭДОВФорме(Форма, Направление) Экспорт
	
	МЭДОДокументооборот.СохранитьДанныеМЭДОВФорме(Форма, Направление);
	
КонецПроцедуры

#КонецЕсли

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
// 
// Параметры:
//  Настройки - ТаблицаЗначений
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	МЭДОДокументооборот.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	
КонецПроцедуры

// Находит все "обычные" файлы документа, т.е. которые не являются служебными.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Отправляемый Документ
//  ДанныеОтвета - Структура,Неопределено - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 											Если передано, то выдаст туда ошибку, если не найдется ни одного файла
// Возвращаемое значение:
//  ТаблицаЗначений - Поля ТЗ:
//   * ТекущаяВерсия - СправочникСсылка.ВерсииФайлов -
//   * Файл - СправочникСсылка.Файлы -
//   * Наименование - Строка -
//   * Расширение - Строка -
//   * ПодписанЭП - Булево -
//   * СканКопияОригинала - Булево -
//   * ОбязательнаяРоль - Булево -
//   * ТолькоОдинФайл - Булево -
Функция ОбычныеФайлыДокумента(Документ, ДанныеОтвета = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Файлы.ТекущаяВерсия,
			|	Файлы.Ссылка КАК Файл,
			|	Файлы.Наименование,
			|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
			|	Файлы.ПодписанЭП,
			|	ВЫБОР
			|		КОГДА &ВестиУчетСканКопийОригиналовДокументов
			|			ТОГДА ЕСТЬNULL(СведенияОФайлах.ЯвляетсяОригиналом, ЛОЖЬ)
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СканКопияОригинала,
			|	ЕСТЬNULL(РолиТЧ.Обязательная, ЛОЖЬ) КАК ОбязательнаяРоль,
			|	ЕСТЬNULL(РолиТЧ.ТолькоОдинФайл, ЛОЖЬ) КАК ТолькоОдинФайл
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
			|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлах
			|		ПО СведенияОФайлах.Файл = Файлы.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РолиФайловДокументов КАК РолиДокументы
			|		ПО РолиДокументы.Файл = Файлы.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.ВидыДокументов.РолиФайлов КАК РолиТЧ
			|		ПО РолиТЧ.Ссылка = &ВидДокумента
			|			И РолиТЧ.Роль = РолиДокументы.Роль
			|
			|ГДЕ
			|	Файлы.ВладелецФайла = &ВладелецФайла
			|	И НЕ Файлы.ПометкаУдаления
			|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
		//@skip-check bsl-legacy-check-string-literal
		Запрос.УстановитьПараметр("ВидДокумента", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента"));
		
	Иначе // Тоже самое, но без ролей:
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Файлы.ТекущаяВерсия,
			|	Файлы.Ссылка КАК Файл,
			|	Файлы.Наименование,
			|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
			|	Файлы.ПодписанЭП,
			|	ВЫБОР
			|		КОГДА &ВестиУчетСканКопийОригиналовДокументов
			|			ТОГДА ЕСТЬNULL(СведенияОФайлах.ЯвляетсяОригиналом, ЛОЖЬ)
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СканКопияОригинала,
			|	Ложь КАК ОбязательнаяРоль,
			|	Ложь КАК ТолькоОдинФайл
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
			|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлах
			|		ПО СведенияОФайлах.Файл = Файлы.Ссылка
			|ГДЕ
			|	Файлы.ВладелецФайла = &ВладелецФайла
			|	И НЕ Файлы.ПометкаУдаления
			|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);
	Запрос.УстановитьПараметр(
		"ВестиУчетСканКопийОригиналовДокументов", 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов"));
	Таблица = Запрос.Выполнить().Выгрузить();
	Если ДанныеОтвета <> Неопределено И Таблица.Количество() = 0 Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			НСтр("ru = 'У документа нет подписываемого файла PDF.'"),
			ДанныеОтвета);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Попытаться определить главный файл среди всех файлов документа, который и будет описан в паспорте контейнера МЭДО
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Документ
// 
// Возвращаемое значение:
//  СправочникСсылка.Файлы - Главный файл, если удалось определить
Функция ПопытатьсяОпределитьГлавныйФайл(Документ) Экспорт
	
	Таблица = ОбычныеФайлыДокумента(Документ);
	Если Таблица.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = Новый Массив();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрНайти(НРег(СтрокаТаблицы.Расширение), "pdf") > 0 И Не СтрокаТаблицы.СканКопияОригинала Тогда
			НайденныеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	Если НайденныеСтроки.Количество() = 1 Тогда
		Возврат НайденныеСтроки[0].Файл;
	КонецЕсли;
	
	// Второй этап поиска - с учетом ролей файлов:
	ПоследнийНомер = НайденныеСтроки.Количество() - 1;
	Пока ПоследнийНомер >= 0 Цикл
		СтрокаТаблицы = НайденныеСтроки[ПоследнийНомер];
		Если СтрокаТаблицы.ОбязательнаяРоль Или СтрокаТаблицы.ТолькоОдинФайл Тогда
			// Оставляем.
		Иначе
			НайденныеСтроки.Удалить(ПоследнийНомер);
		КонецЕсли;
		
		ПоследнийНомер = ПоследнийНомер - 1;
	КонецЦикла;
	Если НайденныеСтроки.Количество() = 1 Тогда
		Возврат НайденныеСтроки[0].Файл;
	КонецЕсли;
	
	// Третий этап, если все-таки осталось больше одного -оставляем только с признаком "ТолькоОдинФайл":
	// Второй этап поиска - с учетом ролей файлов:
	ПоследнийНомер = НайденныеСтроки.Количество() - 1;
	Пока ПоследнийНомер >= 0 Цикл
		СтрокаТаблицы = НайденныеСтроки[ПоследнийНомер];
		Если СтрокаТаблицы.ТолькоОдинФайл Тогда
			// Оставляем.
		Иначе
			НайденныеСтроки.Удалить(ПоследнийНомер);
		КонецЕсли;
		
		ПоследнийНомер = ПоследнийНомер - 1;
	КонецЦикла;
	Если НайденныеСтроки.Количество() = 1 Тогда
		Возврат НайденныеСтроки[0].Файл;
	КонецЕсли;
	
	
	// Файлов больше 1, однозначно понять какой из них главный - не получается:
	Возврат Справочники.Файлы.ПустаяСсылка();
	
КонецФункции

// Проверяет, является ли этот узел центральным.
// 
// Возвращаемое значение:
//  Булево - Это центральный узел
//
Функция ЭтоЦентральныйУзел() Экспорт
	
	Возврат ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел();
	
КонецФункции

// Проверяет, является ли текущий сеанс фоновым заданием или нет.
// 
// Возвращаемое значение:
//  Булево -
Функция ЭтоФоновоеЗадание() Экспорт
	
	Возврат ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание() <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ВходящиеДокументы

// Функция - Выполняет поиск документа в этой базе по id или создает новый, если документ не найден.
// 
// Параметры: 
//  ДанныеДокумента - см. МЭДОСтруктурыДанных.НовыйДанныеВходящегоДокументаДляСоздания.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ПредметМЭДО - Созданный или найденный документ
Функция НайтиСоздатьВходящийДокумент(ДанныеДокумента, ДанныеОтвета) Экспорт
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СвязиОбъектовИнтегрированныхСистем");
	ЭлементБлокировки.УстановитьЗначение("ТипВнешнегоОбъекта", МЭДО.Обозначение_ВнешнийДокумент());
	//@skip-check lock-out-of-try
	Блокировка.Заблокировать(); // транзакция начата "снаружи".
	
	ДокументОбъект = Неопределено;
	
	// Возможно, документ уже есть в этой ИБ:
	ДокументСсылка = ОбъектИБПоИдентификатору(
		ДанныеДокумента.ИдентификаторДокумента, МЭДО.Обозначение_ВнешнийДокумент());
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		// Если документ уже зарегистрирован, то сразу создадим отказ в регистрации:
		ОбщиеПоля = МЭДОСтруктурыДанных.НовыйОбщиеПоляУведомления(
			ДокументСсылка,
			ДанныеДокумента.Организация.ОрганизацияСсылка,
			ДанныеДокумента.Отправитель.Контрагент.КонтрагентСсылка,
			НСтр("ru = 'Документ уже зарегистрирован'"),
			ДанныеДокумента.ИдентификаторДокумента,
			ДанныеДокумента.ИдентификаторСообщения);
		ОбщиеПоля.ВерсияМЭДО = ДанныеДокумента.ВерсияМЭДО;
		МЭДО.ПроверитьСоздатьОтказВРегистрации(ОбщиеПоля, ДанныеОтвета);
		Если Не ДанныеОтвета.Успех Тогда
			Возврат ДокументСсылка;
		КонецЕсли;
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь; // На случай, когда второй раз загружаем тот же документ, он "оживает".
	Иначе
		ДокументОбъект = Справочники.ДокументыПредприятия.СоздатьЭлемент();
		ДокументОбъект.Заполнить(Неопределено);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		ДокументОбъект, ДанныеДокумента,
		"Заголовок, Содержание, КоличествоЛистов, КоличествоПриложений, ГрифДоступа");
	
	ДокументОбъект.Организация = ДанныеДокумента.Организация.ОрганизацияСсылка;
	ДокументОбъект.Контрагент = ДанныеДокумента.Отправитель.Контрагент.КонтрагентСсылка;
	ДокументОбъект.КонтактноеЛицо = ДанныеДокумента.Подписал.КонтактноеЛицоСсылка;
	ДокументОбъект.ПодписалОтКонтрагента = ДанныеДокумента.Подписал.КонтактноеЛицоСсылка;
	
	ДокументОбъект.Контрагенты.Очистить();
	НоваяСтрока = ДокументОбъект.Контрагенты.Добавить();
	НоваяСтрока.Контрагент = ДокументОбъект.Контрагент;
	НоваяСтрока.КонтактноеЛицо = ДокументОбъект.КонтактноеЛицо;
	НоваяСтрока.ПодписалОтКонтрагента = ДокументОбъект.ПодписалОтКонтрагента;
	
	ДокументОбъект.ВидДокумента = ДанныеДокумента.НастройкиОрганизации.ВидВходящегоДокументаПоУмолчанию;
	Если Не ЗначениеЗаполнено(ДокументОбъект.ВидДокумента) Тогда
		ДокументОбъект.ВидДокумента = ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ВидВходящегоДокумента");
	КонецЕсли;
	
	ДокументОбъект.ФормаДокумента = Перечисления.ВариантыФормДокументов.Электронная;
	
	// Заполнение связанного с документом документа "Корреспонденция":
	ПараметрыКорреспонденции = Документы.Корреспонденция.НовыеПараметрыКорреспонденции();
	ВидДокументаКэш = Новый Структура();
	ВидДокументаКэш.Вставить("ЯвляетсяВходящейКорреспонденцией", Истина);
	ВидДокументаКэш.Вставить("ЯвляетсяИсходящейКорреспонденцией", Ложь);
	ВидДокументаКэш.Вставить("УчитыватьВходящийНомерИДатуПолучателя", Ложь);
	АдресатВходящейКорреспонденции = Неопределено;
	ДокументОбъект.Комментарий = "";
	Для Каждого СтруктураАдресата Из ДанныеДокумента.Адресаты Цикл  
		Если ЗначениеЗаполнено(СтруктураАдресата.Персона.ФИО) Тогда
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(СтруктураАдресата.Персона.ФИО);
			Если ЗначениеЗаполнено(Пользователь) Тогда
				АдресатВходящейКорреспонденции = Сотрудники.ОсновнойСотрудникПользователя(Пользователь);
			Иначе
				// Не нашелся пользователь, но может найдется сотрудник:
				АдресатВходящейКорреспонденции = Справочники.Сотрудники.НайтиПоНаименованию(
					СтруктураАдресата.Персона.ФИО);
				Если Не ЗначениеЗаполнено(АдресатВходящейКорреспонденции) Тогда
					АдресатВходящейКорреспонденции = Неопределено;
					// Не нашелся ни пользователь ни сотрудник, но чтоб был понятен Адресат, запишем его хотя бы в
					// "Комментарий". Создавать нового сотрудника на основании чужого сообщения нехорошо:
					ДокументОбъект.Комментарий = СтрШаблон(
						НСтр("ru = 'Адресат - %1 (среди сотрудников/пользователей не найден)'"),
						СтруктураАдресата.Персона.ФИО);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыКорреспонденции.АдресатВходящейКорреспонденции = АдресатВходящейКорреспонденции;
	ПараметрыКорреспонденции.ИсходящийНомер = ДанныеДокумента.ИсходящийНомер;
	ПараметрыКорреспонденции.ИсходящаяДата = ДанныеДокумента.ИсходящаяДата;
	ПараметрыКорреспонденции.СпособПолучения = Справочники.СпособыДоставки.МЭДО;
	ПараметрыКорреспонденции.Вставить("Контрагент", ДокументОбъект.Контрагент);
	ДокументОбъект.Папка = НайтиСоздатьПапкуДокумента("Входящая");
	ПараметрыКорреспонденции.Вставить("ВидДокументаКэш", ВидДокументаКэш);
	ПараметрыКорреспонденции.Вставить("Ссылка", ДокументОбъект.Ссылка);
	ПараметрыКорреспонденции.Вставить("СрокИсполнения", ДокументОбъект.СрокИсполнения);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПараметрыКорреспонденции", ПараметрыКорреспонденции);
	
	ДокументОбъект.Записать();
	
	Делопроизводство.ЗаписатьСостояниеДокумента(
		ДокументОбъект.Ссылка, Неопределено, Перечисления.СостоянияДокументов.Проект);
	
	СоздатьПроверитьСвязьОбъектаИБИВнешнегоОбъекта(
		ДанныеДокумента.ИдентификаторДокумента, МЭДО.Обозначение_ВнешнийДокумент(), ДокументОбъект.Ссылка);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

// Данные входящего документа для передачи уведомлений и квитанций по МЭДО. Часть полей берется из самого документа,
// а часть из связанных с ним данных.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - документ.
//  СписокТребуемыхПолей - Строка - Список полей через запятую, которые нужно получить. Названия полей определенные.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  Структура	- Структура, включающая требуемые поля (СписокТребуемыхПолей) из документа. Значения полей возвращаются 
//  			в том виде "как есть" в документе. Возможные имена полей структуры заданы жестко:
//  	* ПометкаУдаления - Булево
//		* Организация - ОпределяемыйТип.Организация
//  	* ГрифДоступа - ОпределяемыйТип.ГрифДоступаМЭДО
//		* Контрагент - ОпределяемыйТип.КонтрагентМЭДО
//		* ДатаСоздания - Дата
//		* ДатаРегистрации - Дата
//		* ДатаУчетаДокумента - Дата - возвращается на основании ДатаСоздания и ДатаРегистрации,
//										даже если они не переданы.
//		* РегистрационныйНомер - Строка
//		* ИсходящаяДата - Дата
//		* ИсходящийНомер - Дата
//		* ИсходящийПодписал - ОпределяемыйТип.КонтактноеЛицоМЭДО - Подписавший исходящий документ со стороны контрагента.
//		* Комментарий - Строка
Функция ТребуемыеДанныеВходящегоДокумента(Документ, Знач СписокТребуемыхПолей, ДанныеОтвета = Неопределено) Экспорт
	
	Результат = Новый Структура();
	
	// Если передали фиктивное поле "ДатаУчетаДокумента", то искусственно добавляем дату создания и дату регистрации
	// для ее определения:
	Если СтрНайти(СписокТребуемыхПолей, "ДатаУчетаДокумента") > 0 Тогда
		Если СтрНайти(СписокТребуемыхПолей, "ДатаСоздания") = 0 Тогда
			СписокТребуемыхПолей = СписокТребуемыхПолей + ", ДатаСоздания";
		КонецЕсли;
		Если СтрНайти(СписокТребуемыхПолей, "ДатаРегистрации") = 0 Тогда
			СписокТребуемыхПолей = СписокТребуемыхПолей + ", ДатаРегистрации";
		КонецЕсли;
	КонецЕсли;
	
	// В разных конфигурациях поля могут называться по разному, но на выходе нужно получить единообразную структуру.
	СопоставлениеПолей = Новый ТаблицаЗначений();
	СопоставлениеПолей.Колонки.Добавить("ИмяПоля"); // Такое название будет использоваться для передачи данных в МЭДО
	СопоставлениеПолей.Колонки.Добавить("ИмяПоляКакВОбъекте"); // Так поле называется в конкретном объекте метаданных в привязке к конкретной конфигурации.
	
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ПометкаУдаления", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "Организация", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ГрифДоступа", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "Контрагент", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ДатаСоздания", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ДатаРегистрации", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "РегистрационныйНомер", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ИсходящийПодписал", СписокТребуемыхПолей, "ПодписалОтКонтрагента");
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "Комментарий", СписокТребуемыхПолей);
	ДобавитьТребуемыеПоляКРезультату(Результат, СопоставлениеПолей, Документ);
	
	Если СтрНайти(СписокТребуемыхПолей, "ДатаУчетаДокумента") > 0 Тогда
		// Дату создания и дату регистрации добавили и вычислили выше.
		Результат.Вставить("ДатаУчетаДокумента", Делопроизводство.ДатаУчетаДокумента(Результат));
	КонецЕсли;
	
	// Поля из Корреспонденции:
	СопоставлениеПолей.Очистить();
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ИсходящаяДата", СписокТребуемыхПолей, "ДатаКонтрагента");
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ИсходящийНомер", СписокТребуемыхПолей, "НомерКонтрагента");
	Если СопоставлениеПолей.Количество() > 0 Тогда
		Корреспонденция = РаботаСКорреспонденцией.КорреспонденцияДокумента(Документ);
		ДобавитьТребуемыеПоляКРезультату(Результат, СопоставлениеПолей, Корреспонденция);
	КонецЕсли;
	
	Возврат Результат; //@skip-check constructor-function-return-section
	
КонецФункции

// Проверяет, является ли документ входящим.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО, ОпределяемыйТип.ПредметМЭДООбъект - Документ. Можно передавать и объект и ссылку
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоВходящийДокумент(Документ) Экспорт
	
	Возврат ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Документ);
	
КонецФункции

#КонецОбласти

#Область ИсходящиеДокументы

// Функция - Возвращает данные исходящего документа для отправки по МЭДО.
// 
// Параметры:
//  Настройки - См. РегистрыСведений.НастройкиОрганизацийМЭДО.НовыйНастройки
//  Документ - ОпределяемыйТип.ПредметМЭДО - отправляемый исходящий документ.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  см. МЭДОСтруктурыДанных.НовыйДанныеИсходящегоДокументаДляОтправки
Функция ДанныеИсходящегоДокументаДляОтправки(Настройки, Документ, ДанныеОтвета) Экспорт
	
	Данные = МЭДОСтруктурыДанных.НовыйДанныеИсходящегоДокументаДляОтправки();
	
	#Если Не ВнешнееСоединение Тогда
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Документ,
		"ВидДокумента, ГрифДоступа, ДатаСоздания, ДатаРегистрации, РегистрационныйНомер, 
		|Заголовок, Организация, Ответственный, Подготовил, Содержание, КоличествоЛистов, КоличествоПриложений");
	
	ПереопределитьСтраницуВставкиПоВидуДокумента(Настройки, Реквизиты.ВидДокумента);
	
	ЗаполнитьЗначенияСвойств(Данные.НастройкиОрганизации, Настройки);
	Данные.Документ = Документ;
	Данные.ИдентификаторДокумента = "" + Документ.УникальныйИдентификатор();
	
	ДанныеДокументаМЭДО = Документы.ДанныеДокументаМЭДО.ДанныеДокументаМЭДО(Документ, "*", ДанныеОтвета);
	Если Не ЗначениеЗаполнено(ДанныеДокументаМЭДО.Ссылка) Тогда
		ТекстОшибкиПодробно = СтрШаблон(
			НСтр("ru = 'У документа %1 не заполнены дополнительные данные для МЭДО.
			|Для успешной отправки их нужно заполнить'"), Документ);
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка, 
			Документ,
			НСтр("ru = 'Не заполнены ""Данные документа МЭДО""'"),
			ТекстОшибкиПодробно,
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	
	
	// Документ должен отправляться каждый раз с новым идентификатором сообщения (если он уже отправлялся и надо
	// переотправить):
	МЭДО.ПересоздатьДанныеМЭДОПриПовторнойОтправке(ДанныеДокументаМЭДО, ДанныеОтвета);
	Если Не ДанныеОтвета.Успех Тогда
		Возврат Данные;
	КонецЕсли;
	
	
	// Вид документа МЭДО:
	Если Не ЗначениеЗаполнено(ДанныеДокументаМЭДО.ВидДокумента) Тогда 
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка, 
			Документ,
			НСтр("ru = 'Не заполнен ""Вид документа МЭДО""'"),
			МЭДО.Текст_НеЗаполненВидДокумента(),
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	Данные.ВидДокумента.Идентификатор = ДанныеДокументаМЭДО.ВидДокумента.КодМЭДО;
	Данные.ВидДокумента.Наименование = ДанныеДокументаМЭДО.ВидДокумента.НаименованиеПолное;
	Данные.ВидДокументаСсылка = ДанныеДокументаМЭДО.ВидДокумента;
	
	Данные.ДатаУчетаДокумента = Делопроизводство.ДатаУчетаДокумента(Реквизиты);
	
	
	// Получатели:
	КорреспонденцияДокумента = РаботаСКорреспонденцией.КорреспонденцияДокумента(Документ); // ДокументСсылка.Корреспонденция
	Если Не ЗначениеЗаполнено(КорреспонденцияДокумента) Тогда
		ТекстКратко = НСтр("ru = 'Не заполнена корреспонденция документа МЭДО'");
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка, 
			Документ,
			ТекстКратко,
			СтрШаблон(НСтр("ru = '%1. Документ %2'"), ТекстКратко, Документ),
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	
	ТаблицаПолучатели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		КорреспонденцияДокумента, "Корреспонденты").Выгрузить(); //@skip-check bsl-legacy-check-string-literal
	СпособМЭДО = Справочники.СпособыДоставки.МЭДО;
	Для Каждого СтрокаПолучатель Из ТаблицаПолучатели Цикл
		Если СтрокаПолучатель.СпособОтправки <> СпособМЭДО Тогда
			Продолжить;
		КонецЕсли;
		
		Получатель = МЭДОСтруктурыДанных.НовыйОтправительПолучатель();
		СтруктураКонтрагент = МЭДО.ПоляКонтрагента(
			СтрокаПолучатель.Корреспондент, Данные.ДатаУчетаДокумента, Истина, ДанныеОтвета);
		Если Не ДанныеОтвета.Успех Тогда
			Возврат Данные; // Если не заполнен адрес МЭДО или версия.
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Получатель.Контрагент, СтруктураКонтрагент);
		Получатель.КонтактноеЛицо = ПоляКонтактногоЛица(СтрокаПолучатель.Адресат, Данные.ДатаУчетаДокумента);
		
		Данные.Получатели.Добавить(Получатель);
	КонецЦикла;
	Если Данные.Получатели.Количество() = 0 Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(), 
			НСтр("ru = 'В исходящем документе не найдены подходящие получатели'"),
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	
	
	// Пакеты - Если много контрагентов и у них поддержка разных версий МЭДО, то искусственно делим на несколько
	// сообщений - в каждом будут контрагенты с одной версией:
	ТЧПакеты = ДанныеДокументаМЭДО.Пакеты.Выгрузить();
	ЕстьВерсия271 = Ложь;
	Для Каждого СтрокаПакет Из ТЧПакеты Цикл
		СтруктураПакет = МЭДОСтруктурыДанных.НовыйПакет();
		СтруктураПакет.ВерсияМЭДО = СтрокаПакет.ВерсияМЭДО;
		СтруктураПакет.ИдентификаторСообщения = СтрокаПакет.ИдентификаторСообщения;
		Данные.Пакеты.Добавить(СтруктураПакет);
		Если СтруктураПакет.ВерсияМЭДО = Перечисления.ВерсииФорматаМЭДО.Версия271 Тогда
			ЕстьВерсия271 = Истина;
		КонецЕсли;
	КонецЦикла;
	
	
	// Место составления
	МестоСоставления = ДанныеДокументаМЭДО.МестоСоставления;
	Если ЗначениеЗаполнено(МестоСоставления) Тогда
		Данные.МестоСоставления.Идентификатор = МестоСоставления.КодМЭДО;
		Данные.МестоСоставления.Наименование = МестоСоставления.Наименование;
		Данные.МестоСоставленияСсылка = МестоСоставления;
	Иначе
		// Место составления для 2.7.1 - обязательное, для 2.7 - не обязательное.
		Если ЕстьВерсия271 Тогда
			МЭДО.ЗаписьВЖурналСобытий(
				Перечисления.УровниСобытийМЭДО.Ошибка,
				Документ,
				МЭДО.Текст_ОшибкаВДокументе(),
				МЭДО.Текст_НеЗаполненоМестоСоставления() + НСтр("ru = ', для МЭДО версии 2.7.1 это обязательное поле.'"),
				ДанныеОтвета);
			Возврат Данные;
		КонецЕсли;
	КонецЕсли;
	
	
	Организация = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Организация = Реквизиты.Организация;
	Иначе
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	// Гриф доступа:
	СтруктураГриф = МЭДО.ГрифДоступаВВидеСтруктуры(Реквизиты.ГрифДоступа, Настройки);
	ЗаполнитьЗначенияСвойств(Данные.ГрифДоступа, СтруктураГриф);
	Данные.ГрифДоступаСсылка = Реквизиты.ГрифДоступа;
	Если Не ЗначениеЗаполнено(Данные.ГрифДоступа.Идентификатор) И ЕстьВерсия271 Тогда
		ТекстОшибкиПодробно = СтрШаблон(
			НСтр("ru = 'Для отправки документа по формату версии МЭДО 2.7.1 должен быть определен гриф доступа и в документе и в настройках %1'"),
			ОрганизацииРодительный()); 
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			ТекстОшибкиПодробно,
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	
	
	// Заголовок и Содержание:
	Данные.Заголовок = Реквизиты.Заголовок;
	Данные.Заголовок = СтрЗаменить(Данные.Заголовок, """", "");
	Данные.Заголовок = СтрЗаменить(Данные.Заголовок, "'", "");
	Данные.Содержание = ?(СтрДлина(Реквизиты.Содержание) <= 2047, Реквизиты.Содержание, Лев(Реквизиты.Содержание, 2047));
	
	
	// Главный файл:
	Если Не ЗначениеЗаполнено(ДанныеДокументаМЭДО.ГлавныйФайл) Тогда
		// если явно не задан, попробуем "вычислить" методом исключения:
		ДанныеДокументаМЭДО.ГлавныйФайл = ПопытатьсяОпределитьГлавныйФайл(Документ);
		Если Не ЗначениеЗаполнено(ДанныеДокументаМЭДО.ГлавныйФайл) Тогда
			МЭДО.ЗаписьВЖурналСобытий(
				Перечисления.УровниСобытийМЭДО.Ошибка,
				Документ,
				МЭДО.Текст_ОшибкаВДокументе(), 
				СтрШаблон("%1: %2", МЭДО.Текст_ОшибкаВДокументе(), МЭДО.Текст_НеОпределенГлавныйФайл()),
				ДанныеОтвета);
			Возврат Данные;
		КонецЕсли;
	КонецЕсли;
	ГлавныйФайлРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеДокументаМЭДО.ГлавныйФайл, "ТекущаяВерсия, Наименование, ТекущаяВерсияРасширение");
	Данные.Файл.ЛокальноеИмя = МЭДО.ЗаменитьНеподходящееИмяФайла(
		ГлавныйФайлРеквизиты.Наименование, ГлавныйФайлРеквизиты.ТекущаяВерсияРасширение, Данные.ВсеИменаФайлов);
	Данные.Файл.ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(
		ГлавныйФайлРеквизиты.ТекущаяВерсия);
	Данные.ГлавныйФайлСсылка = ДанныеДокументаМЭДО.ГлавныйФайл;
	Данные.ГлавныйФайлВерсияСсылка = ГлавныйФайлРеквизиты.ТекущаяВерсия;
	ИмяВременногоГлавногоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
	ПолучитьИмяВременногоФайла()) + Данные.Файл.ЛокальноеИмя;
	Данные.Файл.ДвоичныеДанные.Записать(ИмяВременногоГлавногоФайла);
	ДокPdf = Новый ДокументPDF();
	ДокPdf.Прочитать(ИмяВременногоГлавногоФайла);
	Данные.КоличествоЛистов = ДокPdf.КоличествоСтраниц();
	ДокPdf = Неопределено;
	УдалитьФайлы(ИмяВременногоГлавногоФайла);

	
	// Отправитель:	
	Данные.Отправитель.Организация.Идентификатор = Настройки.ИдентификаторМЭДО;
	Данные.Отправитель.Организация.АдресМЭДО = Настройки.АдресМЭДО;
	Данные.Отправитель.Организация.Наименование = Настройки.НаименованиеМЭДО;
	Данные.Отправитель.Организация.ОрганизацияСсылка = Организация;
	
	// Исполнитель:
	Исполнитель = ?(ЗначениеЗаполнено(Реквизиты.Ответственный), Реквизиты.Ответственный, Реквизиты.Подготовил);
	Если ЕстьВерсия271 И Не ЗначениеЗаполнено(Исполнитель) Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			НСтр("ru = 'Для отправки документа по формату версии МЭДО 2.7.1 должен быть определен исполнитель - тот, кто подготовил документ, либо ответственный!'"),
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	
	Данные.Отправитель.Исполнитель = ПоляКонтактногоЛица(Исполнитель, Данные.ДатаУчетаДокумента);
	
	Данные.Отправитель.РегистрационныйНомер = Реквизиты.РегистрационныйНомер;
	Данные.Отправитель.ДатаРегистрации = Реквизиты.ДатаРегистрации;
	Если Не ЗначениеЗаполнено(Реквизиты.РегистрационныйНомер) Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			МЭДО.Текст_ДокументНеЗарегистрирован(),
			ДанныеОтвета);
		Возврат Данные;
	КонецЕсли;
	
	
	// Рег.штамп - в "Отправителя":
	МЭДОДокументооборот.НайтиСоздатьВнестиРегистрационныйШтампДляИсходящего(Данные, ДанныеОтвета);
	Если Не ДанныеОтвета.Успех Тогда
		Возврат Данные;
	КонецЕсли;
	
	
	// Подписи главного файла - в "Отправителя":
	ВнестиПодписиГлавногоФайлаДляИсходящего(Данные, ДанныеОтвета);
	Если Не ДанныеОтвета.Успех Тогда
		Возврат Данные;
	КонецЕсли;
	
	
	// Приложения.
	// Все файлы в документе, кроме служебных и кроме главного - считаем приложениями для отправки:
	ВнестиПриложенияДляИсходящего(Данные, ДанныеОтвета);
	Если Не ДанныеОтвета.Успех Тогда
		Возврат Данные;
	КонецЕсли;
	
	
	Данные.ПодписьКонтейнера.ЛокальноеИмя = МЭДО.ЗаменитьНеподходящееИмяФайла(
		"signature", "p7s", Данные.ВсеИменаФайлов);
	

	// Визуализацию надо удалить из предпросмотра, чтобы она сформировалась еще раз уже по координатам с настройками МЭДО. 
	РегистрыСведений.ПредпросмотрФайлов.Удалить(ДанныеДокументаМЭДО.ГлавныйФайл);
	
	// Визуализация.
	ДанныеОтметок = Новый Массив(); // Массив Из См. МЭДОСтруктурыДанных.НовыйДанныеОтметки
	// Сначала - Рег.штамп:
	ДанныеОтметки = МЭДОСтруктурыДанных.НовыйДанныеОтметки();
	ДанныеОтметки.ДвоичныеДанныеОтметки = Данные.Отправитель.РегистрационныйШтамп.Файл.ДвоичныеДанные;
	ЗаполнитьЗначенияСвойств(ДанныеОтметки.Положение, Данные.Отправитель.РегистрационныйШтамп.Положение);
	ДанныеОтметок.Добавить(ДанныеОтметки);
	// Потом - сами отметки в этот же массив:
	Для Каждого Подпись Из Данные.Отправитель.Подписи Цикл
		ДанныеОтметки = МЭДОСтруктурыДанных.НовыйДанныеОтметки();
		ДанныеОтметки.ДвоичныеДанныеОтметки = Подпись.ОтметкаЭП.Файл.ДвоичныеДанные;
		ЗаполнитьЗначенияСвойств(ДанныеОтметки.Положение, Подпись.ОтметкаЭП.Положение);
		ДанныеОтметок.Добавить(ДанныеОтметки);
	КонецЦикла;
	СоздатьВизуализациюЭП(Документ, Данные.ГлавныйФайлСсылка, ДанныеОтметок, ДанныеОтвета, Данные.Файл.ДвоичныеДанные);
	
	#КонецЕсли
	
	Возврат Данные;
	
КонецФункции

// Данные исходящего документа для передачи уведомлений и квитанций по МЭДО. Часть полей берется из самого документа,
// а часть из связанных с ним данных.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Документ
//  СписокТребуемыхПолей - Строка	- Список полей через запятую, которые нужно получить. Названия полей определенные.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  Структура	- Структура, включающая требуемые поля (СписокТребуемых) из документа. Возможные имена полей структуры
//  			  заданы жестко:
//  	* ПометкаУдаления - Булево
//		* Организация - ОпределяемыйТип.Организация
//  	* ГрифДоступа - ОпределяемыйТип.ГрифДоступаМЭДО
//		* Контрагенты - Массив Из Структура - Если указать либо "Контрагент" его либо "Контрагенты", то получит и то и то:
//		** Контрагент - ОпределяемыйТип.КонтрагентМЭДО
//		** КонтактноеЛицо - ОпределяемыйТип.КонтактноеЛицоМЭДО
//		* Контрагент - ОпределяемыйТип.КонтрагентМЭДО - Если указать либо "Контрагент" его либо "Контрагенты", то получит и то и то.
//		* ДатаСоздания - Дата
//		* ДатаРегистрации - Дата
//		* ДатаУчетаДокумента - Дата - возвращается на основании ДатаСоздания и ДатаРегистрации,
//										даже если они не переданы.
//		* РегистрационныйНомер - Строка
Функция ТребуемыеДанныеИсходящегоДокумента(Документ, Знач СписокТребуемыхПолей, ДанныеОтвета = Неопределено) Экспорт
	
	Результат = Новый Структура();
	
	// Если передали фиктивное поле "ДатаУчетаДокумента", то искусственно добавляем дату создания и дату регистрации
	// для ее определения:
	Если СтрНайти(СписокТребуемыхПолей, "ДатаУчетаДокумента") > 0 Тогда
		Если СтрНайти(СписокТребуемыхПолей, "ДатаСоздания") = 0 Тогда
			СписокТребуемыхПолей = СписокТребуемыхПолей + ", ДатаСоздания";
		КонецЕсли;
		Если СтрНайти(СписокТребуемыхПолей, "ДатаРегистрации") = 0 Тогда
			СписокТребуемыхПолей = СписокТребуемыхПолей + ", ДатаРегистрации";
		КонецЕсли;
	КонецЕсли;
	
	// В разных конфигурациях поля могут называться по разному, но на выходе нужно получить единообразную структуру.
	СопоставлениеПолей = Новый ТаблицаЗначений();
	СопоставлениеПолей.Колонки.Добавить("ИмяПоля"); // Такое название будет использоваться для передачи данных в МЭДО
	СопоставлениеПолей.Колонки.Добавить("ИмяПоляКакВОбъекте"); // Так поле называется в конкретном объекте метаданных в привязке к конкретной конфигурации.
	
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ПометкаУдаления", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "Организация", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ГрифДоступа", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ДатаСоздания", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "ДатаРегистрации", СписокТребуемыхПолей);
	ДобавитьТребуемоеПоле(СопоставлениеПолей, "РегистрационныйНомер", СписокТребуемыхПолей);
	ДобавитьТребуемыеПоляКРезультату(Результат, СопоставлениеПолей, Документ);
	
	Если СтрНайти(СписокТребуемыхПолей, "Контрагенты") > 0 Или СтрНайти(СписокТребуемыхПолей, "Контрагент") > 0 Тогда
		Контрагенты = Новый Массив();
		КорреспонденцияДокумента = РаботаСКорреспонденцией.КорреспонденцияДокумента(Документ); // ДокументСсылка.Корреспонденция
		Если ЗначениеЗаполнено(КорреспонденцияДокумента) Тогда
			ТаблицаПолучатели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				КорреспонденцияДокумента, "Корреспонденты").Выгрузить();
			СпособМЭДО = Справочники.СпособыДоставки.МЭДО;
			Для Каждого СтрокаТЗ Из ТаблицаПолучатели Цикл
				Если СтрокаТЗ.СпособОтправки <> СпособМЭДО Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураКонтрагент = Новый Структура(
					"Контрагент, КонтактноеЛицо", СтрокаТЗ.Корреспондент, СтрокаТЗ.Адресат);
				Контрагенты.Добавить(СтруктураКонтрагент);
			КонецЦикла;
		КонецЕсли;
		Результат.Вставить("Контрагенты", Контрагенты);
		
		Контрагент = Неопределено;
		Если Контрагенты.Количество() > 0 Тогда
			Контрагент = Контрагенты[0].Контрагент;
		КонецЕсли;
		Результат.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	Если СтрНайти(СписокТребуемыхПолей, "ДатаУчетаДокумента") > 0 Тогда
		// Дату создания и дату регистрации добавили и вычислили выше.
		Результат.Вставить("ДатаУчетаДокумента", Делопроизводство.ДатаУчетаДокумента(Результат));
	КонецЕсли;
	
	Возврат Результат; //@skip-check constructor-function-return-section
	
КонецФункции

// Записать в исходящий документ данные о регистрации со стороны контрагента.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Исходящий документ
//  Получатель - ОпределяемыйТип.КонтрагентМЭДО - Контрагент, т.к. в общем случае их может быть несколько.
//  РегистрационныйНомерКонтрагента - Строка - Регистрационный номер контрагента
//  ДатаРегистрацииКонтрагента - Дата -  регистрации контрагента
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
Процедура ЗаписатьВИсходящийДокументРегистрациюКонтрагента(
	Документ, Получатель, РегистрационныйНомерКонтрагента, ДатаРегистрацииКонтрагента, ДанныеОтвета) Экспорт
	
	КорреспонденцияДокумента = РаботаСКорреспонденцией.КорреспонденцияДокумента(Документ);
	Если Не ЗначениеЗаполнено(КорреспонденцияДокумента) Тогда
		Возврат;
	КонецЕсли;

	// Заполнение связанного с документом документа "Корреспонденция":
	//@skip-check wrong-string-literal-content
	ТаблицаКорреспонденты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		КорреспонденцияДокумента, "Корреспонденты").Выгрузить(); // ТаблицаЗначений
	Если ТаблицаКорреспонденты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивКонтрагенты = Новый Массив(); // Массив Из См. Документы.Корреспонденция.НовыйСтруктураИзСтрокиТчКорреспонденты
	Для Каждого СтрокаТаблицыКорреспондентов Из ТаблицаКорреспонденты Цикл
		СтруктураСтрокиКорреспондента = Документы.Корреспонденция.НовыйСтруктураИзСтрокиТчКорреспонденты();
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиКорреспондента, СтрокаТаблицыКорреспондентов);
		Если СтрокаТаблицыКорреспондентов.Корреспондент = Получатель Тогда
			СтруктураСтрокиКорреспондента.НомерКонтрагента = РегистрационныйНомерКонтрагента;
			СтруктураСтрокиКорреспондента.ДатаКонтрагента = ДатаРегистрацииКонтрагента;
			СтруктураСтрокиКорреспондента.СпособОтправки = Справочники.СпособыДоставки.МЭДО;
			// Раз получили уведомление, то документ точно был отправлен. Перестраховка, на случай сбоев:
			СтруктураСтрокиКорреспондента.Отправлен = Истина;
		КонецЕсли;
		МассивКонтрагенты.Добавить(СтруктураСтрокиКорреспондента);
	КонецЦикла;
	
	ПараметрыКорреспонденции = Документы.Корреспонденция.НовыеПараметрыКорреспонденции();
	ВидДокументаКэш = Новый Структура();
	ВидДокументаКэш.Вставить("ЯвляетсяВходящейКорреспонденцией", Ложь);
	ВидДокументаКэш.Вставить("ЯвляетсяИсходящейКорреспонденцией", Истина);
	ВидДокументаКэш.Вставить("УчитыватьВходящийНомерИДатуПолучателя", Истина);
	ПараметрыКорреспонденции.ВходящийНомер = РегистрационныйНомерКонтрагента;
	ПараметрыКорреспонденции.ВходящаяДата = ДатаРегистрацииКонтрагента;
	ПараметрыКорреспонденции.СпособПолучения = Справочники.СпособыДоставки.МЭДО;
	ПараметрыКорреспонденции.Контрагент = Получатель;
	ПараметрыКорреспонденции.ВидДокументаКэш = ВидДокументаКэш;
	ПараметрыКорреспонденции.Ссылка = Документ;
	ПараметрыКорреспонденции.Контрагенты = МассивКонтрагенты;
	Отказ = Ложь;
	Документы.Корреспонденция.СохранитьПоДаннымДокумента(ПараметрыКорреспонденции, Отказ);
	
КонецПроцедуры

// Обновление общего признака отправленности для заданного документа. Т.е. "типовой" признак Отправленности, относящийся
// не только к МЭДО.
// 
// Параметры:
//  ДокументСсылка - ОпределяемыйТип.ПредметМЭДО -
Процедура УстановитьПризнакОтправленностиИсходящегоДокумента(ДокументСсылка) Экспорт
	
	КорреспонденцияСсылка = РаботаСКорреспонденцией.КорреспонденцияДокумента(ДокументСсылка);
	Если Не ЗначениеЗаполнено(КорреспонденцияСсылка) Тогда
		Возврат; // не считаем ошибкой, но это "невозможная" ситуация, доп. защита. Признак не критичный.
	КонецЕсли;
	
	НадоЗаписать = Ложь;
	КорреспонденцияОбъект = КорреспонденцияСсылка.ПолучитьОбъект();
	СтрокиТЧ = КорреспонденцияОбъект.Корреспонденты.НайтиСтроки(
		Новый Структура("СпособОтправки", Справочники.СпособыДоставки.МЭДО));
	Для Каждого С Из СтрокиТЧ Цикл
		Если Не С.Отправлен Тогда
			С.Отправлен = Истина;
			С.ДатаОтправки = ТекущаяДатаСеанса();
			НадоЗаписать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НадоЗаписать Тогда
		Попытка
			КорреспонденцияОбъект.Записать();
		Исключение
			// Не считаем ошибкой, если остальная отправка произошла нормально, но предупреждение нужно:
			МЭДО.ЗаписьВЖурналСобытий(
				Перечисления.УровниСобытийМЭДО.Предупреждение,
				ДокументСсылка,
				МЭДО.Текст_ОшибкаВДокументе(),
				СтрШаблон(
					НСтр("ru = 'У документа %1 не удалось установить типовой признак ""Отправлен""'"), ДокументСсылка),
				МЭДОСтруктурыДанных.НовыйЛегкийОтвет());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли документ исходящим.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО, ОпределяемыйТип.ПредметМЭДООбъект - Можно передавать и объект и ссылку
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоИсходящийДокумент(Документ) Экспорт
	
	Возврат ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Документ);
	
КонецФункции

#КонецОбласти

// Получает документ по идентификатору, взятому из сообщения МЭДО. 
// Можно переопределить в другой конфигурации, в зависимости от типа данных документа.
// 
// Параметры:
//  ИдентификаторДокумента - Строка - Идентификатор документа строкой, полученный из сообщения МЭДО
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ПредметМЭДО, Неопределено - Получить документ по идентификатору
Функция ДокументПоИдентификатору(ИдентификаторДокумента) Экспорт
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторДокумента) Тогда
		Возврат Справочники.ДокументыПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Ссылка = Справочники.ДокументыПредприятия.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ИдентификаторДокумента)); // ОпределяемыйТип.ПредметМЭДО
	
	// Проверим, существует ли эта ссылка:
	Если Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Ссылка")) Тогда //@skip-check wrong-string-literal-content
		Возврат Справочники.ДокументыПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

#Область ОбработкаФайловВКонтейнере

#Если Не ВнешнееСоединение Тогда

// Записывает регистрационный штамп в служебные файлы документа, с заданным положением изображения. Создает файл штампа
// в БД, либо его версию, если файл уже есть.
// Используется и для входящих и для исходящих.
//
// Параметры:
//   ДокументСсылка - ОпределяемыйТип.ПредметМЭДО -
//   ФайлСсылка - СправочникСсылка.Файлы -
//   ОтношениеШтампа - ПеречислениеСсылка.ОтношенияСлужебныхФайлов - Наш штамп или контрагента
//   ПутьКРегистрационномуШтампу - Строка - полный путь к файлу со штампом
//   Положение - См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
//
// Возвращаемое значение:
//  СправочникСсылка.Файлы - Ссылка на созданный файл, или пустая ссылка, в случае неуспеха.
Функция ЗаписатьРегистрационныйШтамп(
	ДокументСсылка, ФайлСсылка, ОтношениеШтампа, ПутьКРегистрационномуШтампу, Положение) Экспорт
	
	Возврат МЭДОДокументооборот.ЗаписатьРегистрационныйШтамп(
		ДокументСсылка, ФайлСсылка, ОтношениеШтампа, ПутьКРегистрационномуШтампу, Положение);
	
КонецФункции

// Функция - Присоединяет файл к документу. Если файл существует - он заменяется.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Владелец файла.
//  НаименованиеФайлаВБазе - Строка - Имя файла
//  ПутьКФайлу - Строка - Полный путь к временному файлу на диске
//  Комментарий - Строка - комментарий в карточку файла.
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет.
// 
// Возвращаемое значение:
//  СправочникСсылка.Файлы - Ссылка на созданный файл, или пустая ссылка, в случае неуспеха.
Функция ПрисоединитьФайл(Документ, НаименованиеФайлаВБазе, ПутьКФайлу, Комментарий, ДанныеОтвета) Экспорт
	
	Возврат МЭДОДокументооборот.ПрисоединитьФайл(
		Документ, НаименованиеФайлаВБазе, ПутьКФайлу, Комментарий, ДанныеОтвета);
	
КонецФункции

// Записывает отметку ЭП в служебные файлы документа.
//
// Параметры:
//   Документ - ОпределяемыйТип.ПредметМЭДО.
//   ИдентификаторЭП - Строка - идентификатор ЭП.
//   ПутьКОтметкеЭП - Строка - полный путь к файлу с изображением отметки ЭП.
//   Положение - см. МЭДОСтруктурыДанных.НовыйПоложениеИзображения.
//
Процедура ЗаписатьОтметкуЭП(Документ, ИдентификаторЭП, ПутьКОтметкеЭП, Положение = Неопределено) Экспорт
	
	МЭДОДокументооборот.ЗаписатьОтметкуЭП(Документ, ИдентификаторЭП, ПутьКОтметкеЭП, Положение);
	
КонецПроцедуры

// Записать файл внешней ЭП в РС ЭлектронныеПодписи
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО
//  Файл - СправочникСсылка.Файлы - Главный файл документа или какой-то его файл (в случае приложений).
//  ИдентификаторПодписи - УникальныйИдентификатор - Идентификатор подписи
//  ПутьКФайлуПодписи - Строка -  Путь к файлу подписи (.p7s)
//  ИдентификаторыПодписейУжеБыли - Массив Из Строка - Если несколько подписей к одному объекту, и сейчас создается
//  								еще одна подпись, то стандартный механизм занесения подписи в ДО не дает обратную
//  								связь после записи. Поэтому после записи прочитаем все и исключим те, которые уже
//  								ранее были.
// 
// Возвращаемое значение:
//  Строка - Получившийся идентификатор подписи
Функция ЗаписатьВнешнююЭП(Документ, Файл, ПутьКФайлуПодписи, ИдентификаторыПодписейУжеБыли) Экспорт
	
	Возврат МЭДОДокументооборот.ЗаписатьВнешнююЭП(Документ, Файл, ПутьКФайлуПодписи, ИдентификаторыПодписейУжеБыли);
	
КонецФункции

// По ранее подготовленным данным генерирует визуализацию ЭП и рег. штампа
// Файл визуализации сразу помещается в служебные файлы документа.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Документ
//  ФайлСсылка - СправочникСсылка.Файлы - Главного файл PDF документа, визуализацию которого 
//										 нужно создать.
//  ДанныеОтметок - Массив Из См. МЭДОСтруктурыДанных.НовыйДанныеОтметки
//  ДанныеОтвета - См. МЭДОСтруктурыДанных.НовыйОтвет
//  ДвоичныеДанныеФайла - ДвоичныеДанные,
//						  Неопределено - Двоичные данные этого файла. Чтобы не получать их заново. Если не
//										 переданы, то будет получено из файла в самой процедуре.
Процедура СоздатьВизуализациюЭП(
	Документ, ФайлСсылка, ДанныеОтметок, ДанныеОтвета, Знач ДвоичныеДанныеФайла = Неопределено) Экспорт
	
	МЭДОДокументооборот.СоздатьВизуализациюЭП(Документ, ФайлСсылка, ДанныеОтметок, ДанныеОтвета, ДвоичныеДанныеФайла);
	
КонецПроцедуры

#КонецЕсли

// Удалить все подписи и изображения отметок подписей файла. Нужно на случай повторной загрузки одного и того же
// документа, чтобы потом заново загрузить все его подписи и отметки.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Документ-владелец.
Процедура УдалитьФайлыПодписиИСлужебныеФайлы(Документ) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СлужебныеФайлы.Владелец,
		|	СлужебныеФайлы.Файл,
		|	СлужебныеФайлы.Файл.ПометкаУдаления КАК ПометкаУдаления,
		|	СлужебныеФайлы.Отношение
		|ИЗ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлы
		|ГДЕ
		|	СлужебныеФайлы.Документ = &Документ
		|	И СлужебныеФайлы.Отношение В (&Отношения)
		|	И НЕ СлужебныеФайлы.Файл.ПометкаУдаления");
	Запрос.УстановитьПараметр("Документ", Документ);
	Отношения = Новый Массив();
	Отношения.Добавить(Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
	Отношения.Добавить(Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампКорреспондента);
	Отношения.Добавить(Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации);
	Отношения.Добавить(Перечисления.ОтношенияСлужебныхФайлов.ОтметкаЭП);
	Запрос.УстановитьПараметр("Отношения", Отношения);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Файл) Тогда
			РегистрыСведений.СлужебныеФайлыДокументов.УдалитьФайл(Выборка.Файл);
		КонецЕсли;
		
		Если Выборка.Отношение = Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП Тогда
			РегистрыСведений.ПредпросмотрФайлов.Удалить(Выборка.Владелец);
		КонецЕсли;
	КонецЦикла;
	
	МЭДОДокументооборот.УдалитьПодписиИзДокумента(Документ);
	
КонецПроцедуры

// Это документ МЭДО с внешней подписью. Входящий документ приходит с отметками подписей, но типовая подсистема ЭДО
// после записей генерирует на нашей стороне отметку ЭП. Для случая МЭДО это делать не надо, нужен признак, по которому
// типовая отметка ЭП будет пропускаться, не генерироваться.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоДокументМЭДОСВнешнейПодписью(Документ) Экспорт
	
	Возврат МЭДОДокументооборот.ЭтоДокументМЭДОСВнешнейПодписью(Документ)
	
КонецФункции

#КонецОбласти

#Область СинхронизацияСправочников

// Функция - Определяет контрагента по наименованию и идентификатору внешней системы, если не найден - создает нового.
//           Если найдено больше одного - берется тот, который чаще встречался во входящих документах за последний год.
//
// Параметры:
//  Наименование	 - Строка	 - Наименование контрагента
//  Идентификатор	 - Строка	 - Идентификатор контрагента из сообщения МЭДО
//  ДатаСведений	 - Дата		 - Дата актуальности наименования контрагента, на случай смены названия.
//  							Если в конфигурации это не предусмотрено, то параметр не влияет на работу.
//  ТолькоНайти		 - Булево	 - Только найти, не создавая.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтрагентМЭДО - Ссылка на найденного или сейчас созданного контрагента.
Функция НайтиСоздатьКонтрагента(Наименование, Идентификатор, ДатаСведений, ТолькоНайти) Экспорт
	
	КонтрагентСсылка = ОбъектИБПоИдентификатору(Идентификатор, МЭДО.Обозначение_ВнешнийКонтрагент());
	Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		Возврат КонтрагентСсылка;
	КонецЕсли;
	
	// Поиск по наименованию в справочнике Контрагенты, с учетом частоты использования
	Запрос = Новый Запрос( 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТКонтрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование = &Наименование
		|	И НЕ Контрагенты.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТКонтрагент.Ссылка КАК ОсновнойКонтрагент,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВходящиеДокументы.Ссылка) КАК КолвоДокументов
		|ИЗ
		|	ВТКонтрагент КАК ВТКонтрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ВходящиеДокументы
		|		ПО ВТКонтрагент.Ссылка = ВходящиеДокументы.Контрагент
		|		И (ВходящиеДокументы.ВидДокумента.ЯвляетсяВходящейКорреспонденцией = ИСТИНА)
		|		И (ВходящиеДокументы.ДатаСоздания > &ДатаОтсчета)
		|СГРУППИРОВАТЬ ПО
		|	ВТКонтрагент.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	КолвоДокументов УБЫВ");
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ДатаОтсчета", ТекущаяДатаСеанса() - 365*24*60*60);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		КонтрагентСсылка = Выборка.ОсновнойКонтрагент;
	Иначе
		Если ТолькоНайти Тогда
			Возврат КонтрагентСсылка; // Не нашелся, но создавать и следовательно синхронизировать id не надо.
		КонецЕсли;
		
		// не найден, создаем нового:
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.Наименование = Наименование;
		НовыйКонтрагент.НаименованиеПолное = Наименование;
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		НовыйКонтрагент.Записать();
		
		КонтрагентСсылка = НовыйКонтрагент.Ссылка;
	КонецЕсли;

	// Привязка контрагента к идентификатору МЭДО, если новый контрагент, если старый, то убедиться, что есть связь.
	СоздатьПроверитьСвязьОбъектаИБИВнешнегоОбъекта(
		Идентификатор, МЭДО.Обозначение_ВнешнийКонтрагент(), КонтрагентСсылка);
	
	Возврат КонтрагентСсылка;
	
КонецФункции

// Функция - Определяет контактное лицо по владельцу и наименованию, если не найден - создает нового.
//           Если найдено больше одного - берется то, которое чаще встречалось во входящих документах за последний год.
//
// Параметры:
//  КонтрагентСсылка - ОпределяемыйТип.КонтрагентМЭДО - контрагент-владелец контактного лица
//  Наименование - Строка - Наименование контактного лица
//  Идентификатор - Строка - Идентификатор во внешней системе. В некоторых структурах данных xsd-схемы может
//  						 отсутствовать, тогда синхронизация только по наименованию + Контрагент.
//  ДатаСведений - Дата - Дата актуальности контактной информации, если поддерживается периодичность КИ. Если нет, то
//  					  дата не важна.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтактноеЛицоМЭДО -
Функция НайтиСоздатьКонтактноеЛицо(КонтрагентСсылка, Наименование, Идентификатор, ДатаСведений) Экспорт
	
	Возврат МЭДОДокументооборот.НайтиСоздатьКонтактноеЛицо(КонтрагентСсылка, Наименование, Идентификатор);
	
КонецФункции

// Заполнить поля контактного лица.
// 
// Параметры:
//  КонтактноеЛицоСсылка - ОпределяемыйТип.КонтактноеЛицоМЭДО - Ссылка на контактное лицо
//  ДатаСведений - Дата - Если контактную информацию нужно получить на дату. Если это не предусмотрено
//  						в конфигурации, то эта дата не влияет.
// 
// Возвращаемое значение:
//  см. МЭДОСтруктурыДанных.НовыйКонтактноеЛицо.
Функция ПоляКонтактногоЛица(КонтактноеЛицоСсылка, ДатаСведений) Экспорт
	
	Поля = МЭДОСтруктурыДанных.НовыйКонтактноеЛицо();
	
	Если Не ЗначениеЗаполнено(КонтактноеЛицоСсылка) Тогда
		Возврат Поля;
	КонецЕсли;
	
	Поля.Идентификатор = ИдентификаторВнешнегоОбъекта(КонтактноеЛицоСсылка, МЭДО.Обозначение_ВнешнееКонтактноеЛицо());
	Поля.КонтактноеЛицоСсылка = КонтактноеЛицоСсылка;
	Поля.ФИО = "" + КонтактноеЛицоСсылка;
	
	Если ТипЗнч(КонтактноеЛицоСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Поля.Подразделение.Наименование = "";
		Поля.Подразделение.Идентификатор = "";
		Должность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицоСсылка, "Должность"); //@skip-check wrong-string-literal-content
		Если ЗначениеЗаполнено(Должность) Тогда
			Поля.Должность.Наименование = "" + Должность;
			Поля.Должность.Идентификатор = "";
		Иначе
			Поля.Должность.Наименование = НСтр("ru = 'не указана'"); // часто - обязательное поле.
			Поля.Должность.Идентификатор = "";
		КонецЕсли;
		
		Поля.МобильныйТелефон = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			КонтактноеЛицоСсылка,
			Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица, ,
			ДатаСведений);
		Поля.Телефон = "" + УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			КонтактноеЛицоСсылка,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица, ,
			ДатаСведений);
		Если Не ЗначениеЗаполнено(Поля.Телефон) Тогда
			Поля.Телефон = НСтр("ru = 'не указан'"); // часто - обязательное поле.
		КонецЕсли;
		Поля.ЭлектроннаяПочта = "" + УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			КонтактноеЛицоСсылка,
			Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица, ,
			ДатаСведений);
		
	ИначеЕсли ТипЗнч(КонтактноеЛицоСсылка) = Тип("СправочникСсылка.Сотрудники") Тогда 
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КонтактноеЛицоСсылка, "Подразделение, Должность");
		Если ЗначениеЗаполнено(Реквизиты.Подразделение) Тогда
			Поля.Подразделение.Наименование = "" + Реквизиты.Подразделение;
			Поля.Подразделение.Идентификатор = "" + Реквизиты.Подразделение.УникальныйИдентификатор();
		КонецЕсли;
		
		Если Реквизиты.Свойство("Должность") И ЗначениеЗаполнено(Реквизиты.Должность) Тогда
			Поля.Должность.Наименование = "" + Реквизиты.Должность;
			Поля.Должность.Идентификатор = "" + Реквизиты.Должность.УникальныйИдентификатор();
		Иначе
			Поля.Должность.Наименование = НСтр("ru = 'не указана'"); // часто - обязательное поле.
			Поля.Должность.Идентификатор = "";
		КонецЕсли;
		
		Поля.МобильныйТелефон = "";
		Поля.Телефон = "" + УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			КонтактноеЛицоСсылка,
			Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника, ,
			ДатаСведений);
		Если Не ЗначениеЗаполнено(Поля.Телефон) Тогда
			Поля.Телефон = НСтр("ru = 'не указан'"); // часто - обязательное поле.
		КонецЕсли;
		Поля.ЭлектроннаяПочта = "" + УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			КонтактноеЛицоСсылка,
			Справочники.ВидыКонтактнойИнформации.EmailСотрудника, ,
			ДатаСведений);
		
	КонецЕсли;

	Поля.КонтактнаяИнформацияПредставление = 
		МЭДО.ЗаполненноеЗначениеСтрокой(НСтр("ru = 'Тел:'"), Поля.Телефон, "; ", "")
		+ МЭДО.ЗаполненноеЗначениеСтрокой(НСтр("ru = 'Тел:'"), Поля.МобильныйТелефон, "; ", "")
		+ МЭДО.ЗаполненноеЗначениеСтрокой(НСтр("ru = 'e-mail:'"), Поля.ЭлектроннаяПочта, "", "");

	Возврат Поля;
	
КонецФункции

// Возвращает идентификатор внешнего объекта в МЭДО по объекту в этой базе.
//
// Параметры:
//   СсылкаНаОбъектИБ - ЛюбаяСсылка - Ссылка на объект в этой информационной базе
//   ТипВнешнегоОбъекта - Строка
//
// Возвращаемое значение:
//   Строка - идентификатор объекта, ранее полученный из МЭДО,
//     или пустая строка если не найдено.
//
Функция ИдентификаторВнешнегоОбъекта(СсылкаНаОбъектИБ, ТипВнешнегоОбъекта) Экспорт
	
	Возврат МЭДОДокументооборот.ИдентификаторВнешнегоОбъекта(СсылкаНаОбъектИБ, ТипВнешнегоОбъекта);
	
КонецФункции

// Создать/проверить связь объекта в данной ИБ и внешнего объекта
// 
// Параметры:
//  ИДВнешнегоОбъекта - Строка - Уникальный идентификатор внешнего объекта.
//  ТипВнешнегоОбъекта - Строка - Тип внешнего объекта
//  СсылкаНаОбъектИБ - ЛюбаяСсылка - Ссылка на объект в этой информационной базе
// 
Процедура СоздатьПроверитьСвязьОбъектаИБИВнешнегоОбъекта(ИДВнешнегоОбъекта, ТипВнешнегоОбъекта, СсылкаНаОбъектИБ) Экспорт
	
	МЭДОДокументооборот.СоздатьПроверитьСвязьОбъектаИБИВнешнегоОбъекта(
		ИДВнешнегоОбъекта, ТипВнешнегоОбъекта, СсылкаНаОбъектИБ);
	
КонецПроцедуры

// Получить объект ИБ по идентификатору из внешней системы.
// 
// Параметры:
//  ИДВнешнегоОбъекта - Строка - Уникальный идентификатор внешнего объекта.
//  ТипВнешнегоОбъекта - Строка - Тип внешнего объекта
// 
// Возвращаемое значение:
//  Неопределено, Произвольный - Получить объект ИБПо идентификатору
Функция ОбъектИБПоИдентификатору(ИДВнешнегоОбъекта, ТипВнешнегоОбъекта) Экспорт
	
	Возврат МЭДОДокументооборот.ОбъектИБПоИдентификатору(ИДВнешнегоОбъекта, ТипВнешнегоОбъекта);
	
КонецФункции

#КонецОбласти

// Записывает ресурс в регистр-кэш для быстрого формирования формы списка документов
// Если состояние в регистре не изменилось, то записи в регистр не будет.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Документ
//  СостояниеМЭДО - ПеречислениеСсылка.СостоянияДокументовМЭДО
Процедура ЗаписатьСостояниеДокумента(Документ, СостояниеМЭДО) Экспорт
	
	Делопроизводство.ЗаписатьДанныеДокумента(Документ, "СостояниеМЭДО", СостояниеМЭДО);
	
КонецПроцедуры

// Проверяет, заблокирован ли обмен с внешними ресурсами.
// 
// Параметры:
//  Отказ - Булево - Неявно возвращаемое значение, если обмен заблокирован, то станет Истина
Процедура ПроверитьОбменСВнешнимиРесурсами(Отказ) Экспорт
	
	Попытка
		МиграцияДанныхИзВнешнихСистемСервер.ПриНачалеРаботыРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ВыполнениеОбменаМЭДО, Отказ);
	Исключение
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

// Термин "Организация".
// 
// Возвращаемое значение:
//  Строка 
Функция Организация() Экспорт
	
	Возврат РедакцииКонфигурацииКлиентСервер.Организация();
	
КонецФункции

// Термин "Организация" в родительном падеже.
// 
// Возвращаемое значение:
//  Строка
Функция ОрганизацииРодительный() Экспорт
	
	Возврат РедакцииКонфигурацииКлиентСервер.ОрганизацииРодительный();
	
КонецФункции

// Обращение к организации по умолчанию для данной конфигурации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.Организация - Организация по умолчанию, если организаций несколько или ни одной, то пустая.
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Возврат Справочники.Организации.ОрганизацияПоУмолчанию();
	
КонецФункции

// Возвращает текущего ответственного - пользователя, сотрудника... - так, как принято в этой конфигурации 
//
// Возвращаемое значение:
//  ОпределяемыйТип.ОтветственныйМЭДО - Значение, характеризующее текущего пользователя (пользователь, сотрудник...).
Функция ТекущийОтветственный() Экспорт
	
	Возврат Сотрудники.ОсновнойСотрудник();
	
КонецФункции

// Актуальное на дату название юрлица - контрагента или организации.
// Т.е. либо полное наименование, либо просто наименование, если нет полного. Если в конфигурации нет такого функционала
// для периодичности наименований, то функция должна вернуть просто обычное наименование.
// 
// Параметры:
//  Юрлицо - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Контрагент или организация
//  ДатаСведений - Дата - Дата сведений. 
//      Если передана пустая дата или Неопределено, то возвращаются актуальные данные, из самого справочника 
//      Контрагенты/Организации.
// 
// Возвращаемое значение:
//  Строка - Наименование или полное наименование юрлица.
Функция НаименованиеЮрлицаНаДату(Юрлицо, Знач ДатаСведений = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Юрлицо) Тогда
		Возврат "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаСведений) Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Юрлица.НаименованиеЮрлицаНаДату(Юрлицо, ДатаСведений);
	
КонецФункции

// Определяет ссылку нового объекта, если даже он пока не записан. Если записан, то просто ссылку на этот объект
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - Новый объект.
// 
// Возвращаемое значение:
//  СправочникСсылка, ДокументСсылка - Ссылка на новый объект.
//
Функция СсылкаНовогоОбъекта(Объект) Экспорт
	
	Возврат ОбщегоНазначенияДокументооборот.СсылкаНовогоОбъекта(Объект);
	
КонецФункции

// Это миграция из предыдущей версии. Признак, что нужно пропускать некоторые проверки при/перед записью.
// 
// Возвращаемое значение:
//  Булево - Это миграция
Функция ЭтоМиграция() Экспорт
	
	Возврат ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы;
	
КонецФункции

#Область ПереопределяемыеТипы

// Пустая ссылка на сотрудника нашей организации - справочник зависит от конфигурации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтактноеЛицоМЭДО
Функция СотрудникПустаяСсылка() Экспорт
	
	Возврат Справочники.Сотрудники.ПустаяСсылка();
	
КонецФункции

// Пустая ссылка на контактное лицо - справочник зависит от конфигурации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтактноеЛицоМЭДО
Функция КонтактноеЛицоПустаяСсылка() Экспорт
	
	Возврат Справочники.КонтактныеЛица.ПустаяСсылка();
	
КонецФункции

// Пустая ссылка на контрагента - справочник зависит от конфигурации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КонтрагентМЭДО
Функция КонтрагентПустаяСсылка() Экспорт
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция ТипКонтрагенты() Экспорт
	
	Возврат Тип("СправочникСсылка.Контрагенты");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеДляИсходящихДокументов

// Находит отметки ЭП для исходящего документа и вносит их в параметр Данные для отправки.
// Если у отметки/отметок нет "Положения" (координат), то создает, согласно настройкам МЭДО.
// Процедура работает, как неотъемлемая часть функции ДанныеИсходящегоДокументаДляОтправки.
// Подписи в виде двоичных данных, картинки отметки ЭП и кто подписал заносятся в параметр Данные - 
// в массив: Данные.Отправитель.Подписи.
// в параметре Данные должны уже лежать предварительно подготовленные исходные данные для этого (документ, главный файл,
// его версия, дата актуальности и др.).
// 
// Параметры:
//  Данные - См. МЭДОСтруктурыДанных.НовыйДанныеИсходящегоДокументаДляОтправки
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет
Процедура ВнестиПодписиГлавногоФайлаДляИсходящего(Данные, ДанныеОтвета)
	
	ТаблицаПодписейФайла = ТаблицаПодписейФайлов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные.ГлавныйФайлВерсияСсылка));
	
	Если ТаблицаПодписейФайла.Количество() = 0 Тогда
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Данные.Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			МЭДО.Текст_НетПодписиГлавногоФайла(),
			ДанныеОтвета);
		Возврат;
	КонецЕсли;
	// Подписи - одна под другой, на странице, согласно настройкам:
	Координаты = НовыйКоординаты(Данные.НастройкиОрганизации);
	
	НашлиПоСсылкеНаФайл = Ложь;
	Для Каждого СтрокаПодпись Из ТаблицаПодписейФайла Цикл
		
		СтрокаПодпись.Файл = Данные.ГлавныйФайлСсылка;
		Подпись = СформироватьСтруктуруПодписи(Данные, СтрокаПодпись, Координаты, НашлиПоСсылкеНаФайл, Ложь);
		
		Если ЗначениеЗаполнено(Подпись.Файл.ЛокальноеИмя) Тогда
			Данные.Отправитель.Подписи.Добавить(Подпись);
		КонецЕсли;
		
	КонецЦикла;
	Если Данные.Отправитель.Подписи.Количество() = 0 Тогда
		ТекстОшибкиПодробно = СтрШаблон(
			НСтр("ru = 'У подписываемого файла документа %1 не удалось сгенерировать отметку ЭП. 
			|Возможно отключен или отсутствует ImageMagick.
			|Или отключена настройка штампа ЭП (настройки электронных подписей)'"),
			Данные.Файл.ЛокальноеИмя);
		МЭДО.ЗаписьВЖурналСобытий(
			Перечисления.УровниСобытийМЭДО.Ошибка,
			Данные.Документ,
			МЭДО.Текст_ОшибкаВДокументе(),
			ТекстОшибкиПодробно,
			ДанныеОтвета);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет Приложения в структуре Данные, т.е. файлы-приложения, если они есть. Если они подписаны, то вносит также
// и их подписи - находит отметки, если у отметок нет "Положения" (координат), то создает их, согласно настройкам МЭДО.
// Процедура работает, как неотъемлемая часть функции ДанныеИсходящегоДокументаДляОтправки.
// Приложения и их подписи, если есть, заносятся в массив Данные.Приложения.
// в параметре Данные должны уже лежать предварительно подготовленные исходные данные для этого, как и в предыдущей
// процедуре.
// 
// Параметры:
//  Данные - См. МЭДОСтруктурыДанных.НовыйДанныеИсходящегоДокументаДляОтправки
//  ДанныеОтвета - см. МЭДОСтруктурыДанных.НовыйОтвет
Процедура ВнестиПриложенияДляИсходящего(Данные, ДанныеОтвета)
	
	ТаблицаФайлыДокумента = ОбычныеФайлыДокумента(Данные.Документ, ДанныеОтвета);
	ТаблицаПодписиПриложений = ТаблицаПодписейФайлов(ТаблицаФайлыДокумента.ВыгрузитьКолонку("ТекущаяВерсия"));
	Для Каждого СтрокаФайл Из ТаблицаФайлыДокумента Цикл
		Если СтрокаФайл.Файл = Данные.ГлавныйФайлСсылка Тогда
			Продолжить;
		КонецЕсли;
		
		// Подписи - одна под другой, на странице, согласно настройкам:
		Координаты = НовыйКоординаты(Данные.НастройкиОрганизации);
		
		Приложение = МЭДОСтруктурыДанных.НовыйПодписанныйФайл();
		Приложение.Файл.ЛокальноеИмя = МЭДО.ЗаменитьНеподходящееИмяФайла(
			СтрокаФайл.Наименование, СтрокаФайл.Расширение, Данные.ВсеИменаФайлов);
		Приложение.Файл.ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(
			СтрокаФайл.ТекущаяВерсия);
		
		// Подписи у файлов-приложений не обязательны, но если есть, вносим:
		Если СтрокаФайл.ПодписанЭП Тогда
			СтрокиПодписи = ТаблицаПодписиПриложений.НайтиСтроки(
				Новый Структура("ВерсияФайла", СтрокаФайл.ТекущаяВерсия));
			НашлиПоСсылкеНаФайл = Ложь;
			Для Каждого СтрокаПодпись Из СтрокиПодписи Цикл
				СтрокаПодпись.Файл = СтрокаФайл.Файл;
				Подпись = СформироватьСтруктуруПодписи(
					Данные, СтрокаПодпись, Координаты, НашлиПоСсылкеНаФайл, Истина);
				
				Если ЗначениеЗаполнено(Подпись.Файл.ЛокальноеИмя) Тогда
					Приложение.Подписи.Добавить(Подпись);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Данные.Приложения.Добавить(Приложение);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйКоординаты(Настройки)

	Координаты = Новый Структура();
	Координаты.Вставить("ШтампСлева", Настройки.ШтампСлева);
	Координаты.Вставить("ШтампСверху", Настройки.ШтампСверху);
	Возврат Координаты;
	
КонецФункции

// Настройка страницы вставки - по умолчанию берется для организации, но может быть переопределена
// для вида документа:
// Если задано, то переопределяет страницу вставки (Настройки.СтраницаВставкиШтампаЭП) отметки ЭП
// для конкретного вида документа.
// 
// Параметры:
//  Настройки - См. РегистрыСведений.НастройкиОрганизацийМЭДО.НастройкиОрганизации
//  ВидДокумента - ОпределяемыйТип.ВидДокументаМЭДО - Вид документа предприятия.
Процедура ПереопределитьСтраницуВставкиПоВидуДокумента(Настройки, ВидДокумента)
	
	НастройкаПереопределенная = РегистрыСведений.НастройкиГенерацииШтамповЭППоВидамДокументов.ПолучитьНастройку(
		ВидДокумента);
	Если ЗначениеЗаполнено(НастройкаПереопределенная) Тогда
		СтраницаВставкиИзНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			НастройкаПереопределенная, "СтраницаВставкиШтампаЭП");
		Если ЗначениеЗаполнено(СтраницаВставкиИзНастройки) Тогда
			Настройки.СтраницаВставкиШтампаЭП = СтраницаВставкиИзНастройки; // переопределяем по виду документа
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сформировать структуру подписи.
// 
// Параметры:
//  Данные - См. МЭДОСтруктурыДанных.НовыйДанныеИсходящегоДокументаДляОтправки
//  СтрокаПодпись - СтрокаТаблицыЗначений - Строка из таблицы подписей:
//	* ВерсияФайла - СправочникСсылка.ВерсииФайлов -
//	* Файл - СправочникСсылка.Файлы - Файл, для данной версии файла
//	* УникальныйИдентификатор - УникальныйИдентификатор -
//	* ДатаПодписи - Дата -
//	* Подпись - ХранилищеЗначения -
//	* ПодписалФИО - Строка -
//	* Сотрудник - ОпределяемыйТип.ОтветственныйМЭДО -
//	Координаты - См. НовыйКоординаты
//	НашлиПоСсылкеНаФайл - Булево - Флаг, если уже нашли, то второй раз по идентификатору не надо искать (одна отметка 
//								   только, устаревший способ хранения).
//	ЭтоПриложение - Булево - для "Приложений" не надо класть Отметки ЭП, т.к. их все равно нет в XSD схеме и их нельзя
//							 будет отправить.
// 
// Возвращаемое значение:
//  См. МЭДОСтруктурыДанных.НовыйПодпись
Функция СформироватьСтруктуруПодписи(Данные, СтрокаПодпись, Координаты, НашлиПоСсылкеНаФайл, ЭтоПриложение)
	
	Подпись = МЭДОСтруктурыДанных.НовыйПодпись();
	
	ВладелецОтметки = "" + СтрокаПодпись.УникальныйИдентификатор;
	
	// Отметки в РС СлужебныеФайлДокументов могут храниться либо по идентификаторам подписи (строкам),
	// либо по ссылкам на файлы, поищем и так и так.
	ФайлОтметкиЭП = РаботаСЭП.ПолучитьОтметкуЭП(Данные.Документ, ВладелецОтметки, Подпись.ОтметкаЭП.Положение);
	Если ЗначениеЗаполнено(ФайлОтметкиЭП) Тогда
		// Нашли по идентификатору.
	ИначеЕсли Не НашлиПоСсылкеНаФайл Тогда
		ВладелецОтметки = СтрокаПодпись.Файл;
		ФайлОтметкиЭП = РаботаСЭП.ПолучитьОтметкуЭП(Данные.Документ, ВладелецОтметки, Подпись.ОтметкаЭП.Положение);
		Если ЗначениеЗаполнено(ФайлОтметкиЭП) Тогда
			НашлиПоСсылкеНаФайл = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлОтметкиЭП) Тогда
		Возврат Подпись; // Пустая структура - нет никакой подписи
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПодпись.Сотрудник) Тогда
		ЗаполнитьЗначенияСвойств(
			Подпись.Подписал, ПоляКонтактногоЛица(СтрокаПодпись.Сотрудник, Данные.ДатаУчетаДокумента));
	Иначе
		Подпись.Подписал.ФИО = СтрокаПодпись.ПодписалФИО;
	КонецЕсли;
	
	ЛокальноеИмя = СтрЗаменить("" + СтрокаПодпись.УникальныйИдентификатор, "-", "");
	
	Подпись.ДатаПодписания = НачалоДня(СтрокаПодпись.ДатаПодписи);
	Подпись.Файл.ЛокальноеИмя = ЛокальноеИмя + ".p7s";
	Подпись.Файл.ДвоичныеДанные = СтрокаПодпись.Подпись.Получить();
	
	Если ЭтоПриложение Тогда
		// Для файлов - "Приложений" возвращается только голая подпись без отметки-визуализации, т.к. все-равно в
		// утвержденной Минцифры xsd-схеме поля для нее нет (есть только для главного файла) и ее нельзя будет передать.
		// В перспективе, вероятно, эта возможность будет, и тогда будем заполнять отметку + положение и для приложений.
		Возврат Подпись;
	КонецЕсли;
	
	// Для главного файла нужна также и визуализация отметки ЭП:
	
	Подпись.ОтметкаЭП.Файл.ЛокальноеИмя = ЛокальноеИмя + ".png";
	Подпись.ОтметкаЭП.Файл.ДвоичныеДанные
		= РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлОтметкиЭП);
	
	// Отметка есть, но нужно убедиться, что в ней нужное "Положение", если отличается, то делаем
	// согласно настройкам для организации:
	СтраницаВставки = Данные.НастройкиОрганизации.СтраницаВставкиШтампаЭП;
	Если Данные.НастройкиОрганизации.СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Первая Тогда
		СтраницаВставки = 1;
	ИначеЕсли Данные.НастройкиОрганизации.СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
		СтраницаВставки = Данные.КоличествоЛистов;
	// для случая, если СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Каждая Тогда
		// СтраницаВставки так и остается перечислением.
	КонецЕсли;
	НовоеПоложениеОтметки = МЭДОСтруктурыДанных.НовыйПоложениеИзображения(
		СтраницаВставки, Координаты.ШтампСлева, Координаты.ШтампСверху, 102, 29);
	
	Если МЭДО.ТребуетсяПерезаписатьПоложение(НовоеПоложениеОтметки, Подпись.ОтметкаЭП.Положение) Тогда
		
		ЗаполнитьЗначенияСвойств(Подпись.ОтметкаЭП.Положение, НовоеПоложениеОтметки);
		РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
			Данные.Документ,
			ВладелецОтметки,
			Перечисления.ОтношенияСлужебныхФайлов.ОтметкаЭП,
			ФайлОтметкиЭП,
			Подпись.ОтметкаЭП.Положение);
		// Если будут еще отметки, то их надо ставить ниже:
		Координаты.ШтампСверху = Координаты.ШтампСверху + Подпись.ОтметкаЭП.Положение.Высота;
		
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Таблица подписей файлов для внесения информации о подписи.
// 
// Параметры:
//  ВерсииФайлов - Массив Из СправочникСсылка.ВерсииФайлов - Версии файлов, чью подпись ищем
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с полями:
//	* ВерсияФайла - СправочникСсылка.ВерсииФайлов - Подписанный объект
//	* Файл - СправочникСсылка.Файлы - Возвращается пустой (будет заполнена далее по стеку)
//	* УникальныйИдентификатор - УникальныйИдентификатор -
//	* ДатаПодписи - Дата -
//	* Подпись - ХранилищеЗначения -
//	* ПодписалФИО - Строка - На случай, когда нет сотрудника (пользователь) для обратной совместимости.
//	* Сотрудник - ОпределяемыйТип.ОтветственныйМЭДО -
Функция ТаблицаПодписейФайлов(ВерсииФайлов)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭП.ПодписанныйОбъект КАК ВерсияФайла,
		|	ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка) КАК Файл,
		|	ЭП.ИдентификаторПодписи КАК УникальныйИдентификатор,
		|	ЭП.ДатаПодписи КАК ДатаПодписи,
		|	ПРЕДСТАВЛЕНИЕ(ЭП.УстановившийПодпись) КАК ПодписалФИО,
		|	ЭП.Подпись КАК Подпись,
		|	СотрудникиПользователей.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО СотрудникиПользователей.Пользователь = ЭП.УстановившийПодпись
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ОсновныеСотрудники КАК ОсновныеСотрудники
		|		ПО ОсновныеСотрудники.Сотрудник = СотрудникиПользователей.Сотрудник
		|ГДЕ
		|	ЭП.ПодписанныйОбъект В (&ВерсииФайлов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭП.ДатаПодписи УБЫВ");
	Запрос.УстановитьПараметр("ВерсииФайлов", ВерсииФайлов);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

// Добавить требуемое поле.
// 
// Параметры:
//  СопоставлениеПолей - ТаблицаЗначений - Таблица требуемых полей куда добавить:
//   * ИмяПоля - Строка - Такое название будет использоваться для передачи данных в МЭДО.
//   * ИмяПоляКакВОбъекте - Строка - Так поле называется в конкретном объекте метаданных в привязке к конкретной
//   								 конфигурации.
//  ИмяПоля - Строка - с таким названием надо поле вернуть для формирования структур МЭДО.
//  ИсходныйСписокПолей - Строка, Число - Исходный список полей
//  ИмяПоляКакВОбъекте - Неопределено, Строка - Так поле называется в объекте метаданных этой конфигурации.
// 
// Возвращаемое значение:
//  Булево - Добавить требуемое поле
Функция ДобавитьТребуемоеПоле(СопоставлениеПолей, ИмяПоля, ИсходныйСписокПолей, Знач ИмяПоляКакВОбъекте = Неопределено)
	
	Если ИмяПоляКакВОбъекте = Неопределено Тогда
		ИмяПоляКакВОбъекте = ИмяПоля;
	КонецЕсли;
	
	Если СтрНайти(ИсходныйСписокПолей, ИмяПоля) > 0 Тогда
			Новая = СопоставлениеПолей.Добавить();
			Новая.ИмяПоля = ИмяПоля;
			Новая.ИмяПоляКакВОбъекте = ИмяПоляКакВОбъекте;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Процедура ДобавитьТребуемыеПоляКРезультату(Результат, СопоставлениеПолей, СсылкаНаОбъект)

	Если СопоставлениеПолей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаНаОбъект, СопоставлениеПолей.ВыгрузитьКолонку("ИмяПоляКакВОбъекте"));
	Для Каждого КлючЗначение Из Реквизиты Цикл
		СтрокаПолей = СопоставлениеПолей.Найти(КлючЗначение.Ключ, "ИмяПоляКакВОбъекте");
		Если СтрокаПолей = Неопределено Тогда
			Продолжить; // теоретически невозможная ситуация.
		КонецЕсли;
		
		// В номерах и датах надо уйти от Неопределено, иначе оно некорректно ляжет в создаваемый объект для отправки.
		ЗначениеПоля = КлючЗначение.Значение;
		Если ЗначениеПоля = Неопределено Тогда
			Если СтрНайти(СтрокаПолей.ИмяПоля, "Дата") > 0 Тогда
				ЗначениеПоля = '00010101';
			ИначеЕсли СтрНайти(СтрокаПолей.ИмяПоля, "Номер") Тогда
				ЗначениеПоля = "";
			КонецЕсли;
		КонецЕсли;
		
		Результат.Вставить(СтрокаПолей.ИмяПоля, ЗначениеПоля);
	КонецЦикла;
	
КонецПроцедуры

// Создаем предопределенные папки для входящей и исходящей корреспонденции.
//
Функция НайтиСоздатьПапкуДокумента(ТипПапки)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПапкиДокументов") Тогда
		Возврат Справочники.ПапкиДокументов.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипПапки = "Входящая" Тогда
		ИмяПапки = НСтр("ru = 'Входящая корреспонденция МЭДО'");
		ИДПапки = Новый УникальныйИдентификатор("2de3ac1f-5d64-4246-ab6b-5612fb18a252");
	ИначеЕсли ТипПапки = "Исходящая" Тогда 
		ИмяПапки = НСтр("ru = 'Исходящая корреспонденция МЭДО'");
		ИДПапки = Новый УникальныйИдентификатор("5089ade1-eb1e-426c-8fac-fec2fff34729");
	КонецЕсли;

	СсылкаНаПапку = Справочники.ПапкиДокументов.ПолучитьСсылку(ИДПапки);	
	Если Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаПапку) Тогда
		ПапкаОбъект = Справочники.ПапкиДокументов.СоздатьЭлемент();
		ПапкаОбъект.УстановитьСсылкуНового(СсылкаНаПапку);
		
		ПапкаОбъект.Наименование = ИмяПапки;
		ПапкаОбъект.ДатаСоздания = ТекущаяДатаСеанса();
		ПапкаОбъект.Описание = НСтр("ru = 'Создана автоматически'");
		ПапкаОбъект.ОбменДанными.Загрузка = Истина;
		ПапкаОбъект.Записать();
	КонецЕсли;
	
	Возврат СсылкаНаПапку;
	
КонецФункции

#КонецОбласти