#Область ПрограммныйИнтерфейс

#Область Загрузка

// Рег задание. "МиграцияДанныхИзВнешнихСистемЗагрузка" 
Процедура РегламентнаяЗагрузка() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = КэшНастроек();
	
	Если Не Настройки.Загружать Тогда
		УстановитьИспользованиеЗадания(Ложь);
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.МиграцияДанныхИзВнешнихСистемЗагрузка, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Настройки.Каталог) Тогда
		ВызватьИсключение(НСтр("ru = 'Не заполнен каталог загрузки'"));		
	КонецЕсли;
	
	ДатаПоследнегоЗапускаСвертки = Константы.МиграцияДанныхИзВнешнихСистемДатаПоследнегоЗапускаСвертки.Получить();
	Если ДатаПоследнегоЗапускаСвертки < ТекущаяДатаСеанса() - 86400 Тогда // более суток прошло
	
		// Запустим фоновое по свертке КоличествоЗагруженных
		КлючФоновогоЗадания = "СверткаКоличествоЗагруженных";
		Если Не ЕстьАктивноеФоновоеЗадание(КлючФоновогоЗадания) Тогда
			ЗапуститьФоновоеЗаданиеОтдельно(КлючФоновогоЗадания, 
				"МиграцияДанныхИзВнешнихСистемСервер.СверткаКоличествоЗагруженных");
		КонецЕсли;	
		
	КонецЕсли;	

	Загрузка(1, Настройки);
	
КонецПроцедуры

// Загрузка.
// 
// Параметры:
//  Поток - Число - Поток
//  Настройки - Неопределено, Структура - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Загружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// * КаталогИзменений 
Процедура Загрузка(Поток = 0, Настройки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Настройки = Неопределено Тогда
		Настройки = КэшНастроек();
	КонецЕсли;
	
	Настройки.Поток = Поток;
	ТекДата = ТекущаяУниверсальнаяДата();
	ВремяОбновления = ТекДата + 60;
	ВремяПерерыва = ТекДата + 3600;
	ИДБлокировки = Новый УникальныйИдентификатор();
	КлючБлокировки = Новый Структура("Сеанс");     
	
	ЧислоПотоковЗагрузкиИз21 = Константы.ЧислоПотоковЗагрузкиИз21.Получить();
	Если ЧислоПотоковЗагрузкиИз21 = 0 Тогда
		ЧислоПотоковЗагрузкиИз21 = 5;
	КонецЕсли;	
	
	Если Поток = 0 Тогда
		//Все в текущем сеансе.
		ЛимитЗаданий = 1;
		Порция = 100;
	ИначеЕсли ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ЛимитЗаданий = 1;
		Порция = 100;
	Иначе
		ЛимитЗаданий = ЧислоПотоковЗагрузкиИз21;
		СообщенийНаЗадание = 2;
		МетодЗадания = "МиграцияДанныхИзВнешнихСистемСервер.Загрузка";
		Порция = ЛимитЗаданий * СообщенийНаЗадание;
	КонецЕсли;
	
	Сообщения = ВыбратьСообщения(Настройки, Порция);
	Пока Сообщения.Количество() Цикл
						
		ПредПоследовательность = Неопределено;
		ПредПериод = Неопределено;
		
		Курсор = 0;
		Пока Курсор < Сообщения.Количество() Цикл
			Сообщение = Сообщения[Курсор];
			Курсор = Курсор + 1;
						
			Если ЛимитЗаданий > 1 Тогда
							
				Если Поток = 1
					И Сообщение.Последовательность <> 0
					И (ПредПоследовательность <> Сообщение.Последовательность
						Или ПредПериод <> Сообщение.Период) Тогда
					
					//Запускаем помощников. В рамках текущей последовательности.
					Партия = Сообщения.НайтиСтроки(Новый Структура("Последовательность,Период", Сообщение.Последовательность, Сообщение.Период));	
					Нужно = Окр(Партия.Количество() / СообщенийНаЗадание, 0);
					Партия.Очистить();
					Если Нужно > 1 Тогда
						Активные = ФоновыеЗадания.ПолучитьФоновыеЗадания(
							Новый Структура("ИмяМетода,Состояние", МетодЗадания, СостояниеФоновогоЗадания.Активно));
						Нужно = Мин(Нужно - Активные.Количество() - 1, ЛимитЗаданий);
						
						Если Нужно > 0 Тогда
							ПараметрыЗадания = Новый Массив(1);
							Н = 1;
							Пока Н < ЛимитЗаданий И Нужно > 0 Цикл
								Н = Н + 1;
								ПараметрыЗадания[0] = Н;
								Для Каждого Задание Из Активные Цикл
									Если Число(Задание.Ключ) = Н Тогда
										ПараметрыЗадания[0] = 0;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								Если ПараметрыЗадания[0] = Н Тогда
									Нужно = Нужно - 1;
									ФоновыеЗадания.Выполнить(
										МетодЗадания,
										ПараметрыЗадания,
										Строка(Н),
										НСтр("ru = 'Переход. Загрузка '") + Н);
								КонецЕсли;
							КонецЦикла;							
						КонецЕсли;
						
						Активные.Очистить();
					КонецЕсли;
					
					ВыполнитьЗадания(Настройки);
				КонецЕсли;
								
				Если ПредПоследовательность <> Неопределено
					И Сообщение.Последовательность <> 0 Тогда
					//Проверяем полную загрузку предыдущей последовательности всеми заданиями.
					Если ПредПоследовательность <> Сообщение.Последовательность
						Или ПредПериод <> Сообщение.Период Тогда
						
						Остатки = ВыбратьСообщения(Настройки, 1);
						Если Остатки.Количество() = 0
							Или Сообщение.Номер = Остатки[0].Номер Тогда
						ИначеЕсли Сообщение.Последовательность > Остатки[0].Последовательность
							Или Сообщение.Период < Остатки[0].Период Тогда
							ОбщегоНазначенияБТС.Пауза(3); //Ждем загрузки всей предыдущей последовательности.
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ПредПоследовательность = Сообщение.Последовательность;
				ПредПериод = Сообщение.Период;
							
				Попытка
					
					КлючБлокировки.Сеанс = Сообщение.Номер;
					ЗаблокироватьДанныеДляРедактирования(
						РегистрыСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания.СоздатьКлючЗаписи(КлючБлокировки),,
						ИДБлокировки);
						
				Исключение
					
					Если Сообщение.Последовательность <> 0 Тогда
						//Для минимизации конкуренции пробуем перешагнуть к другому объекту метаданных в пределах последовательности.
						Шаг = Курсор;
						Выборка = Сообщения;
						Следующее = Сообщение;
						Окончание = СтрРазделить(Сообщение.Файл.Имя, ".");
						Пока Окончание.Количество() > 3 Цикл
							Окончание.Удалить(0);
						КонецЦикла;
						Окончание = СтрСоединить(Окончание, ".");
						Пока Истина Цикл
												
							Если Шаг >= Выборка.Количество() Тогда
								Выборка = ВыбратьСообщения(Настройки, Порция, Следующее.Номер);
								Если Выборка.Количество() = 0 Тогда
									Прервать;
								КонецЕсли;
								Шаг = 0;
							КонецЕсли;
							
							Следующее = Выборка[Шаг];
							Если Следующее.Последовательность <> Сообщение.Последовательность
								Или Следующее.Период <> Сообщение.Период Тогда
								Прервать;
							ИначеЕсли Не СтрЗаканчиваетсяНа(Следующее.Файл.Имя, Окончание) Тогда
								Курсор = Шаг;
								Если Сообщения <> Выборка Тогда
									Сообщения.Очистить();
									Сообщения = Выборка;
								КонецЕсли;								
								Прервать;
							КонецЕсли;
							
							Шаг = Шаг + 1;
						КонецЦикла;
					КонецЕсли;
					
					Продолжить;	
				КонецПопытки;
								
			КонецЕсли;
			
			Попытка
				ЗагрузитьСообщение(Сообщение.Файл, Настройки);
				
				Пока ТранзакцияАктивна() Цикл
					ЗафиксироватьТранзакцию();
				КонецЦикла;
			
			Исключение
				
				Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				Пока ТранзакцияАктивна() Цикл
					Попытка
						ОтменитьТранзакцию();
					Исключение
					КонецПопытки;
				КонецЦикла;
				
				Если Настройки.Свойство("Сообщение") Тогда
					Журналировать(Настройки.Событие, Причина, Истина, Настройки.Сообщение.ИмяИсточника, Настройки.Сообщение.НомерСообщения, 
						Настройки.Сообщение.ПоследнийКлюч,,,Сообщение.Файл.ПолноеИмя);
					Настройки.Сообщение.Очистить(); Настройки.Удалить("Сообщение"); Настройки.Удалить("Событие");
				ИначеЕсли Настройки.Свойство("Событие") Тогда
					Журналировать(Настройки.Событие, Причина, Истина, Сообщение.Файл.Имя,,,,,Сообщение.Файл.ПолноеИмя);
					Настройки.Удалить("Событие");
				Иначе
					Журналировать(НСтр("ru = 'Загрузка'"), Причина, Истина, Сообщение.Файл.Имя,,,,,Сообщение.Файл.ПолноеИмя);
				КонецЕсли;
							
				Если Поток > 0
					И Курсор < Сообщения.Количество()
					И Сообщения[Курсор].Последовательность = Сообщение.Последовательность
					И Сообщения[Курсор].Период = Сообщение.Период Тогда
					//Переходим к следующему в пределах последовательности.
					Продолжить;
				КонецЕсли;
				
				РазблокироватьДанныеДляРедактирования(, ИДБлокировки);
				
				ВызватьИсключение Причина;
							
			КонецПопытки;

			Если Поток <= 1 Тогда
				ОтметкиВремени.РазобратьОчередь();
			КонецЕсли;	
			
			ТекДата = ТекущаяУниверсальнаяДата();
			
			Если ТекДата >= ВремяОбновления И Поток > 0 Тогда
				РазблокироватьДанныеДляРедактирования(, ИДБлокировки);
				Если ТекДата >= ВремяПерерыва Тогда
					Возврат;
				КонецЕсли;
				Настройки = КэшНастроек(Настройки);
				Если Не Настройки.Загружать Тогда
					Возврат;
				КонецЕсли;
				ОбновитьПовторноИспользуемыеЗначения();
				ВремяОбновления = ТекДата + 60;
			КонецЕсли;
			
		КонецЦикла;
		
		РазблокироватьДанныеДляРедактирования(, ИДБлокировки);
		
		Сообщения.Очистить();
		
		Сообщения = ВыбратьСообщения(Настройки, Порция);
		
		Если Поток > 1 И Сообщения.Количество() < Порция Тогда
			//Завершаем ненужного помощника. Начиная с последнего.
			Активные = ФоновыеЗадания.ПолучитьФоновыеЗадания(
				Новый Структура("ИмяМетода,Состояние", МетодЗадания, СостояниеФоновогоЗадания.Активно));
			Если Окр(Сообщения.Количество() / Активные.Количество(), 0) <  СообщенийНаЗадание Тогда
				Н = Поток;
				Для каждого Задание Из Активные Цикл
					Н = Макс(Число(Задание.Ключ), Н);			
				КонецЦикла;
				Если Поток = Н Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Активные.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если Поток <= 1 И Не ВыполнитьЗадания(Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Поток <= 1 И Настройки.Свойство("Финиш") Тогда
		//Выгрузка завершена.
		Константы.ПереходСтадия.Установить(4 + Число(Настройки.Финиш));
		Журналировать(НСтр("ru = 'Загружено'"));
		УстановитьИспользованиеЗадания(Ложь);
		УстановитьИспользованиеЗаданий(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Выбрать сообщения.
// 
// Параметры:
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Загружать - Булево -
//  Порция - Число - Порция
//  ТекущийНомер - Число, Неопределено - Текущий номер
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Выбрать сообщения:
// * Номер - Число -
// * Последовательность - Число -
// * Период - Дата -
// * Файл 
Функция ВыбратьСообщения(Настройки, Порция = 10, ТекущийНомер = Неопределено) Экспорт
	
	Пачки = Новый СписокЗначений;
	
	Для Каждого Файл Из НайтиФайлы(Настройки.Каталог, "*") Цикл
		
		Если Файл.Имя = "0" Тогда
			
		ИначеЕсли Файл.ИмяБезРасширения = "Start" Тогда
			Если Не Настройки.Свойство("Конфигурация") Тогда
				Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
				Настройки.Вставить("Конфигурация", Чтение.ПрочитатьСтроку() + "-" + Чтение.ПрочитатьСтроку());
				Чтение.Закрыть();
				Чтение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли Файл.ИмяБезРасширения = "Finish" Тогда
			Если Не Настройки.Свойство("Финиш") Тогда
				Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
				Настройки.Вставить("Финиш", Чтение.ПрочитатьСтроку() = "1");
				Чтение.Закрыть();
				Чтение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли Файл.Имя = Файл.ИмяБезРасширения Тогда 
			//  Файл.ЭтоКаталог() Тогда
			
			Если Найти("123456789", Лев(Файл.Имя, 1)) Тогда
				Попытка
					Пачки.Добавить(Число(Файл.Имя), Файл.ПолноеИмя);
				Исключение
					Продолжить;	
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Пачки.СортироватьПоЗначению();
	
	Сообщения = Новый ТаблицаЗначений;
	Сообщения.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число"));
	Сообщения.Колонки.Добавить("Последовательность", Новый ОписаниеТипов("Число"));
	Сообщения.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Сообщения.Колонки.Добавить("Файл");
	
	Для Каждого Пачка Из Пачки Цикл
		
		Для Каждого Файл Из НайтиФайлы(Пачка.Представление, "*") Цикл
			Кортеж = СтрРазделить(Файл.Имя, ".");
			
			Если ТекущийНомер <> Неопределено
				И Число(Кортеж[0]) <= ТекущийНомер Тогда
				Продолжить;
			КонецЕсли;
			
			Запись = Сообщения.Добавить();
			Запись.Номер = Кортеж[0];
			Запись.Последовательность = Кортеж[1];
			Если Запись.Последовательность <> 0 И Кортеж[2] <> "0" Тогда
				Запись.Период = Дата(Кортеж[2] + "01");
			КонецЕсли;
			Запись.Файл = Файл;
		КонецЦикла;
		Сообщения.Сортировать("Номер");
		
		Если Сообщения.Количество() >= Порция Тогда
			Пока Сообщения.Количество() > Порция Цикл
				Сообщения.Удалить(Сообщения.Количество()-1);
			КонецЦикла;
			
			Прервать;
			
		ИначеЕсли Сообщения.Количество() = 0
			И (Настройки.Свойство("Финиш")
				Или Пачки.Индекс(Пачка) < (Пачки.Количество()-1)) 
				И ТекущийНомер = Неопределено Тогда
			//Загруженные каталоги удаляем. Кроме последнего. Оставляем для записи.
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Переход ВыбратьСообщения удалим каталог'"), 
				УровеньЖурналаРегистрации.Предупреждение,
				,
				, 
				Пачка.Представление);
			ПроверитьИЛогироватьФайлыВПодкаталоге(Пачка.Представление);	
			
			УдалитьФайлы(Пачка.Представление);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сообщения;
	
КонецФункции

Процедура ПроверитьИЛогироватьФайлыВПодкаталоге(Каталог)
	
	МассивФайлов = НайтиФайлы(Каталог, "*");
	Если МассивФайлов.Количество() <> 0 Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Переход удалим каталог - есть файлы!'"), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			Каталог);
		
	КонецЕсли;	
	
КонецПроцедуры	

// Загрузить сообщение. Т.е. группа файлов в одном каталоге
// 
// Параметры:
//  Файл Файл
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Загружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// * КаталогИзменений 
//  Удалять - Булево - Удалять
Процедура ЗагрузитьСообщение(Файл, Настройки, Удалять = Истина) Экспорт
	
	Настройки.Вставить("Событие", НСтр("ru = 'Загрузка'"));
	
	Если Файл.Расширение = ".json" Тогда
		//Файл с порцией исторических данных.
		Если ЗагрузитьФайл(Файл, Ложь, Настройки) Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Переход ЗагрузитьФайл УдалитьФайлы'"), 
				УровеньЖурналаРегистрации.Предупреждение,
				,
				, 
				Файл.ПолноеИмя);
			
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;
		
	Иначе
		//Файл изменений.
				
		Каталог = Настройки.КаталогИзменений + СтрРазделить(Файл.Имя, ".")[0];
		
		Файлы = НайтиФайлы(Каталог, "*");
		Если Файлы.Количество() Тогда
			
			//Файлы изменений также с учетом последовательности.
			Список = Новый СписокЗначений;
			Для Каждого Элемент Из Файлы Цикл
				Список.Добавить(Элемент, Формат(Число(СтрРазделить(Элемент.Имя, ".")[1]), "ЧЦ=5; ЧВН=; ЧГ=0"));	 	
			КонецЦикла;
			Список.СортироватьПоПредставлению();
			
			//НачатьТранзакцию();
			ЕстьОшибки = Ложь;
			ТекстОшибки = "";

			Для Каждого Элемент Из Список Цикл
			
				Попытка
					
					Если ЗагрузитьФайл(Элемент.Значение, Истина, Настройки) Тогда
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Переход ЗагрузитьФайл УдалитьФайлы'"), 
							УровеньЖурналаРегистрации.Предупреждение,
							,
							, 
							Элемент.Значение.ПолноеИмя);
						
						УдалитьФайлы(Элемент.Значение.ПолноеИмя);
					КонецЕсли;	 	
									
				Исключение
					
					ЕстьОшибки = Истина;
					ТекстОшибкиЛокально = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстОшибки = ТекстОшибки + ТекстОшибкиЛокально + Символы.ПС;
					 
					Журналировать(НСтр("ru = 'ЗагрузитьСообщение'"),
						ТекстОшибкиЛокально, Истина, Элемент.Значение.Имя);
						
					Продолжить;
					
				КонецПопытки;
			
			КонецЦикла;
			
			Если ЕстьОшибки Тогда
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;	
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Переход ЗагрузитьСообщение УдалитьФайлы'"), 
			УровеньЖурналаРегистрации.Предупреждение,
			,
			, 
			Файл.ПолноеИмя);

		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Переход ЗагрузитьСообщение Удалить каталог'"), 
			УровеньЖурналаРегистрации.Предупреждение,
			,
			, 
			Каталог);
		ПроверитьИЛогироватьФайлыВПодкаталоге(Каталог);	
		
		УдалитьФайлы(Файл.ПолноеИмя);
		УдалитьФайлы(Каталог);
				
	КонецЕсли;
		
КонецПроцедуры

// Загрузить файл.
// 
// Параметры:
//  Файл - Произвольный - Файл
//  ЭтоИзменения - Булево - Это изменения
//  Настройки - Неопределено, Структура - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// 
// Возвращаемое значение:
//  Булево - Загрузить файл
Функция ЗагрузитьФайл(Файл, ЭтоИзменения, Настройки) Экспорт
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Переход ЗагрузитьФайл начало'"), 
		УровеньЖурналаРегистрации.Предупреждение,
		,
		, 
		Файл.ПолноеИмя);
	
	МоментНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Кортеж = СтрРазделить(Файл.Имя, "."); //Номер.Последовательность.Период.КодКласса.Имя.Расширение
	НомерСообщения = Число(Кортеж[0]);
	ИмяИсточника = КлассОбъектаИзЧисла(Кортеж[4]) + "." + Кортеж[5];
	
	Сообщение = Новый Структура("НомерСообщения,ИмяИсточника,ЭтоИзменения,ДатаЗагрузки,ПоследнийКлюч",
		НомерСообщения, ИмяИсточника, ЭтоИзменения, ТекущаяДатаСеанса());
	Сообщение.Вставить("Последовательность", Число(Кортеж[1]));
	Сообщение.Вставить("Период", ?(Кортеж[2]="0", Неопределено, Дата(Кортеж[2] + "01")));
	Сообщение.Вставить("Последнее", Кортеж[3]="1");
	Настройки.Вставить("Сообщение", Сообщение);
	Настройки.Вставить("ИмяФайла", Файл.Имя);
	
	Настройки.Вставить("Событие", НСтр("ru = 'Чтение'"));
	
	Чтение = Новый ЧтениеJSON();
	
	Попытка
		
		Чтение.ОткрытьФайл(Файл.ПолноеИмя);
		
	Исключение
		
		Если Файл.Существует() Или ЭтоИзменения Тогда
			ВызватьИсключение;
		//Иначе уже загружен параллельно.
		КонецЕсли;
		
		Настройки.Удалить("Сообщение");
	
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		
		Порция = СериализаторXDTO.ПрочитатьJSON(Чтение);
				
	Исключение
		
		Первопричина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Чтение.Закрыть();
		
		//Проверяем удаленные типы значений.
		Пакет = ОбработатьТипыЗначений(Файл.ПолноеИмя, Настройки);
		
		Если Не Пакет.Модифицированность Тогда
			//Проблема не в типах.
			ВызватьИсключение Первопричина;
		КонецЕсли;
		
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Пакет.Тело);
		Порция = СериализаторXDTO.ПрочитатьJSON(Чтение);
		Пакет.Тело = Неопределено;
		
	КонецПопытки;
	
	Чтение.Закрыть();
	
	Настройки.Событие = НСтр("ru = 'ПередЗагрузкой'");
	
	СтандартнаяОбработка = Истина;
	Если Пакет = Неопределено Тогда
		Замены = НоваяТаблицаЗамены();
	Иначе
		Замены = Пакет.Замены;
		Пакет.Очистить();
	КонецЕсли;
	
	ИмяОбъекта = Настройки.Переименования.Получить(ИмяИсточника);
	Если ИмяОбъекта = Неопределено Тогда
		ИмяОбъекта = ИмяИсточника;
	ИначеЕсли ИмяОбъекта = Null Тогда
		//Больше не нужен.
		Журналировать(НСтр("ru = 'Загрузка'"), НСтр("ru = 'Пропущен'"),, ИмяИсточника, НомерСообщения,, Истина);
		Сообщение.Очистить();
		Настройки.Удалить("Сообщение");
		Возврат Истина;
	КонецЕсли;
	
	Если Порция.Колонки.Найти("_Отказ") = Неопределено Тогда 
		Порция.Колонки.Добавить("_Отказ", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если СтандартнаяОбработка
			И Настройки.УдаленныеОбъекты.Получить(ИмяИсточника) = Неопределено Тогда
		
		Настройки.Событие = НСтр("ru = 'Загрузка'");
		
		Метаданное = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
		
		Если Метаданное = Неопределено Тогда
			
			Причина = НСтр("ru = 'Объект отсутствует в новой конфигурации'") + ": " + ИмяОбъекта;
			ВызватьИсключение Причина;
			
		КонецЕсли;
		
		Если ЭтоСсылочныйОбъект(Метаданное) Тогда
			//Конвертируем ссылку из ИД в прикладной тип.
			Менеджер = Новый(СтрЗаменить(Метаданное.ПолноеИмя(), ".", "Менеджер."));
			ЕстьРодитель = Порция.Колонки.Найти("Родитель") <> Неопределено;
			Для Каждого Источник Из Порция Цикл
				Источник.Ссылка = Менеджер.ПолучитьСсылку(Источник.Ссылка);
				Если ЕстьРодитель И ЗначениеЗаполнено(Источник.Родитель) Тогда
					Источник.Родитель = Менеджер.ПолучитьСсылку(Источник.Родитель);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			
			Если Метаданное <> Неопределено Тогда
				ЗаменитьЗначения(Метаданное, Порция, Замены, Настройки);
			КонецЕсли;
			
			Если Порция.Количество() Тогда
				ЗагрузитьПорцию(Метаданное, Порция, Замены, Настройки, ИмяОбъекта, ИмяИсточника);
			КонецЕсли;
			
			Настройки.Событие = НСтр("ru = 'ПослеЗагрузки'");
			
		Исключение
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;	
	
	Настройки.Событие = НСтр("ru = 'ПослеЗагрузки'");
	
	Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемКоличествоЗагруженных.СоздатьНаборЗаписей();
	Запись = Набор.Добавить();
	Запись.День = ТекущаяДатаСеанса();
	Запись.Дата = ТекущаяДатаСеанса();
	Запись.Идентификатор = Новый УникальныйИдентификатор();
	
	Запись.Источник = ИмяИсточника;
	Запись.Загружено = Порция.Количество();
	
	ЗаписатьСлужебныеДанные(Набор, Ложь);
	Набор.Очистить(); Набор = Неопределено;
	
	Порция.Очистить();
	Замены.Очистить();
	Кортеж.Очистить();
	Сообщение.Очистить();
	Настройки.Удалить("Сообщение");
	
	Возврат Истина;
	
КонецФункции

// Создать и заполнить элемент ссылочных данных по строке табл части.
// 
// Параметры:
//  Приемник - Неопределено - Приемник
//  Источник - Произвольный - Источник
//  Настройки Настройки
//  Порция - Произвольный - Порция
//  ПараметрыМетаданного - Структура - Параметры метаданного:
// * ИмяОбъектаДляКешаМетаданных 
// * ЕстьПредопределенные 
// * Метаданное 
// * ЕстьУдаление - Булево -
// * ЕстьГруппа 
// * МетодСоздания 
// * Менеджер 
// * Кроме - Строка -
// * ЕстьТаблицы 
// * Таблицы 
// * ЕстьПользовательИБ 
Процедура СоздатьИЗаполнитьЭлементСсылочныхДанныхПоСтрокеТаблЧасти(
	Приемник, Источник, Настройки, Порция, ПараметрыМетаданного) Экспорт
	
	Если Приемник = Неопределено Тогда
		Если ПараметрыМетаданного.ЕстьГруппа И Источник.ЭтоГруппа = Истина Тогда
			Приемник = ПараметрыМетаданного.Менеджер.СоздатьГруппу();
		ИначеЕсли ПараметрыМетаданного.МетодСоздания = 1 Тогда
			Приемник = ПараметрыМетаданного.Менеджер.СоздатьЭлемент();
		ИначеЕсли ПараметрыМетаданного.МетодСоздания = 2 Тогда
			Приемник = ПараметрыМетаданного.Менеджер.СоздатьДокумент();
		ИначеЕсли ПараметрыМетаданного.МетодСоздания = 3 Тогда
			Приемник = ПараметрыМетаданного.Менеджер.СоздатьБизнесПроцесс();
		ИначеЕсли ПараметрыМетаданного.МетодСоздания = 4 Тогда
			Приемник = ПараметрыМетаданного.Менеджер.СоздатьЗадачу();
		ИначеЕсли ПараметрыМетаданного.МетодСоздания = 5 Тогда
			Приемник = ПараметрыМетаданного.Менеджер.СоздатьУзел(); // план обмена
		КонецЕсли;
		Приемник.УстановитьСсылкуНового(Источник.Ссылка);
	КонецЕсли;
	
	Если ПараметрыМетаданного.ЕстьГруппа И Источник.ЭтоГруппа = Истина Тогда
		
		Для Каждого Поле Из Порция.Колонки Цикл
			Если НайтиРеквизитМетаданных(ПараметрыМетаданного.Метаданное, Поле.Имя) <> Неопределено
				И Приемник[Поле.Имя] <> Null
				И Найти(ПараметрыМетаданного.Кроме, " " + НРег(Поле.Имя) + ",") = 0 Тогда
				Приемник[Поле.Имя] = Источник[Поле.Имя];
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыМетаданного.ЕстьТаблицы Тогда
			Для Каждого Имя Из ПараметрыМетаданного.Таблицы Цикл
				Если ПараметрыМетаданного.Метаданное.ТабличныеЧасти[Имя].Использование 
				 <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				 	
					ТЧ = Приемник[Имя];
					
					Если Порция.Колонки.Найти(Имя) <> Неопределено 
						И ЗначениеЗаполнено(Источник[Имя]) И ТипЗнч(Источник[Имя]) = Тип("ТаблицаЗначений") Тогда
						ТЧ.Очистить();
						Для Каждого Строка Из Источник[Имя] Цикл
							ЗаполнитьЗначенияСвойств(ТЧ.Добавить(), Строка);	
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(Приемник, Источник,, ПараметрыМетаданного.Кроме);
		
		Если ПараметрыМетаданного.ЕстьТаблицы Тогда
			Для Каждого Имя Из ПараметрыМетаданного.Таблицы Цикл
				ТЧ = Приемник[Имя];
				ТЧ.Очистить();
				Если Порция.Колонки.Найти(Имя) <> Неопределено 
				И ЗначениеЗаполнено(Источник[Имя]) И ТипЗнч(Источник[Имя]) = Тип("ТаблицаЗначений") Тогда
					Для Каждого Строка Из Источник[Имя] Цикл
						ЗаполнитьЗначенияСвойств(ТЧ.Добавить(), Строка);	
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыМетаданного.ЕстьПользовательИБ Тогда
			Приемник.ИдентификаторПользователяИБ = ЗагрузитьПользователяИБ(Источник, Приемник, Настройки);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПараметрыМетаданного.ЕстьПредопределенные И Источник.ИмяПредопределенныхДанных <> "" Тогда
		
		Если ПараметрыМетаданного.Метаданное.ПолучитьИменаПредопределенных().Найти(Источник.ИмяПредопределенныхДанных) <> Неопределено Тогда
			
		    Запрос = Новый Запрос(СтрШаблон(
			"ВЫБРАТЬ
			|	Т.Ссылка КАК Ссылка
			|ИЗ
			|	%1 КАК Т
			|ГДЕ
			|	Т.ИмяПредопределенныхДанных = ""%2""",
			ПараметрыМетаданного.Метаданное.ПолноеИмя(),
			Источник.ИмяПредопределенныхДанных));
								
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() И Выборка.Ссылка <> Приемник.Ссылка Цикл
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.ИмяПредопределенныхДанных = "";
				Объект.ПометкаУдаления = Истина;
				
				ПараметрыЗаписи = СтруктураПараметровЗаписиЗагруженныхДанных();
				ПараметрыЗаписи.Загрузка = Истина;

				ДополнительныеСвойства = Новый Структура;				
				
				ЗаписатьЗагруженныеДанные(Объект, Настройки, ПараметрыЗаписи, ДополнительныеСвойства);
				
			КонецЦикла;
			Приемник.ИмяПредопределенныхДанных = Источник.ИмяПредопределенныхДанных;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Стандартно записать один элемент. ссылочного типа.
// 
// Параметры:
//  Источник - Произвольный - Источник
//  Приемник - Неопределено - Приемник
//  Порция - Произвольный - Порция
//  ПараметрыЗагрузки - Структура - Параметры загрузки:
// * Загрузка - Булево -
// 
// Возвращаемое значение:
//  Булево - Стандартно записать один элемент
Функция СтандартноЗаписатьОдинЭлемент(Источник, Приемник, Порция, ПараметрыЗагрузки) Экспорт
	
	ИмяОбъекта = ПараметрыЗагрузки.ИмяОбъекта;
	ПараметрыМетаданного = ПараметрыЗагрузки.ПараметрыМетаданного;
	Настройки = ПараметрыЗагрузки.Настройки;
	Настройки.Вставить("ИмяОбъекта", ПараметрыЗагрузки.ИмяОбъекта);
	
	Если ИмяОбъекта <> ПараметрыМетаданного.ИмяОбъектаДляКешаМетаданных Тогда
		Метаданное = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
		ПараметрыМетаданного = ЗаполнитьКешМетаданных(Метаданное, Порция, Настройки, ИмяОбъекта);
	КонецЕсли;	

	Метаданное = ПараметрыМетаданного.Метаданное;
	Если Метаданное = Неопределено Тогда
		
		Причина = НСтр("ru = 'Объект отсутствует в новой конфигурации'") + ": " + ИмяОбъекта;
		ВызватьИсключение Причина;
		
	КонецЕсли;

	GUID = Источник.Ссылка.УникальныйИдентификатор();
	Источник.Ссылка = ПараметрыМетаданного.Менеджер.ПолучитьСсылку(GUID);
	
	Изменения = ПараметрыЗагрузки.Изменения;

	ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(Источник.Ссылка);
	
	// тут заполним объект
	Если Не МиграцияДанныхИзВнешнихСистемСервер.ЗаполнитьЭлементССылочныхДанных(
			ИмяОбъекта, Источник, Приемник, Изменения, Настройки, Порция, ПараметрыМетаданного, ЭтоНовый) Тогда
		Возврат Ложь;
	КонецЕсли;	     
	
	//Изменение.ЭтоНовый
	Если ЭтоНовый И Не ПараметрыЗагрузки.Настройки.Свойство("ОставитьКод") Тогда
								
		Если СтрНачинаетсяС(ИмяОбъекта, "Справочник")
			Или СтрНачинаетсяС(ИмяОбъекта, "ПланОбмена") Тогда
			Приемник.УстановитьНовыйКод();
		ИначеЕсли СтрНачинаетсяС(ИмяОбъекта, "Документ")
			Или СтрНачинаетсяС(ИмяОбъекта, "БизнесПроцесс")
			Или СтрНачинаетсяС(ИмяОбъекта, "Задач") Тогда
			Приемник.УстановитьНовыйНомер();
		КонецЕсли;
			
	КонецЕсли;

	// тут запишем в СУБД.		
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиЗагруженныхДанных();
	ПараметрыЗаписи.Загрузка = ПараметрыЗагрузки.Загрузка;
	ПараметрыЗаписи.ЗаполнятьИсточникДанных = ПараметрыЗагрузки.ЗаполнятьИсточникДанных;
	
	ЗаписатьЗагруженныеДанные(
		Приемник, Настройки, ПараметрыЗаписи, ПараметрыЗагрузки.ДополнительныеСвойства);
		
	Возврат Истина;		
	
КонецФункции

// Заполнить элемент с сылочных данных.
// 
// Параметры:
//  ИмяОбъекта - Строка, Произвольный - Имя объекта
//  Источник - Произвольный - Источник
//  Приемник - Неопределено - Приемник
//  Изменения - ТаблицаЗначений - Изменения
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * ИмяФайла 
// * Событие - Строка -
//  Порция - Произвольный - Порция
//  ПараметрыМетаданного - Структура - Параметры метаданного:
// * ИмяОбъектаДляКешаМетаданных - Строка, Произвольный -
// * ЕстьПредопределенные - Булево -
// * Метаданное - ОбъектМетаданных -
// * ЕстьУдаление - Булево -
// * ЕстьГруппа - Булево -
// * МетодСоздания - Число -
// * Менеджер - СправочникМенеджерИмяСправочника, ПланВидовХарактеристикМенеджерИмяПланаВидовХарактеристик, БизнесПроцессМенеджерИмяБизнесПроцесса, ЗадачаМенеджерИмяЗадачи, ДокументМенеджерИмяДокумента -
// * Кроме - Строка -
// * ЕстьТаблицы - Булево -
// * Таблицы - Массив -
// * ЕстьПользовательИБ - Булево -
// 
// Возвращаемое значение:
//  Булево - Заполнить элемент с сылочных данных
Функция ЗаполнитьЭлементССылочныхДанных(ИмяОбъекта, Источник, Приемник, Изменения, Настройки,
	Порция, ПараметрыМетаданного, ЭтоНовый) Экспорт
	
	Если Не ЭтоНовый Тогда
		Приемник = Источник.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	УстановитьПометкуУдаления = Ложь;
	Если ПараметрыМетаданного.ЕстьУдаление И Источник._Удаление = Истина Тогда
		Если Приемник <> Неопределено Тогда
			УстановитьПометкуУдаления = Истина;
		Иначе	
			Возврат Ложь; // ничего не пишем. Т.к. пришло _Удаление, а в 30 в СУБД нет объекта
		КонецЕсли;
	КонецЕсли;
	
	Если УстановитьПометкуУдаления Тогда
		Приемник.ПометкаУдаления = Истина;
	Иначе
		СоздатьИЗаполнитьЭлементСсылочныхДанныхПоСтрокеТаблЧасти(
			Приемник, Источник, Настройки, Порция, ПараметрыМетаданного);
	КонецЕсли;	

	Возврат Истина;
	
КонецФункции	

// Загрузить порцию. Порция - по сути таблица значений в памяти.
// 
// Параметры:
//  Метаданное - ОбъектМетаданных - Метаданное
//  Порция - ТаблицаЗначений
//  Замены - ТаблицаЗначений - Замены:
// * СтароеТип 
// * Старое 
// * Новое 
// * Реквизиты 
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
//  ИмяОбъекта - Строка, Произвольный - Имя объекта
//  ИмяИсточника - Строка - Имя источника
Процедура ЗагрузитьПорцию(Метаданное, Порция, Замены, Настройки, ИмяОбъекта, ИмяИсточника) Экспорт 

	ЕстьУдаление = Порция.Колонки.Найти("_Удаление") <> Неопределено;
	ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы = Истина;
	
	Если ЭтоСсылочныйОбъект(Метаданное) Тогда
		
		ЗагрузитьПорциюСсылочныйОбъект(Метаданное, Порция, Замены, Настройки, ИмяОбъекта, ИмяИсточника, ЕстьУдаление);
		
		
	ИначеЕсли Метаданные.Константы.Содержит(Метаданное) Тогда
		
		ЗагрузитьПорциюКонстанты(Метаданное, Порция, Замены, Настройки, ИмяОбъекта, ИмяИсточника, ЕстьУдаление);
		
	Иначе
		//Регистры
		
		ЗагрузитьПорциюРегистры(Метаданное, Порция, Замены, Настройки, ИмяОбъекта, ИмяИсточника, ЕстьУдаление);
		
	КонецЕсли; // тип метаданного
	
КонецПроцедуры

// Загрузить порцию ссылочного типа. Порция - по сути таблица значений в памяти.
// 
// Параметры:
//  Метаданное - ОбъектМетаданных - Метаданное
//  Порция - ТаблицаЗначений
//  Замены - ТаблицаЗначений - Замены:
// * СтароеТип 
// * Старое 
// * Новое 
// * Реквизиты 
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
//  ИмяОбъекта - Строка, Произвольный - Имя объекта
//  ИмяИсточника - Строка - Имя источника
//  ЕстьУдаление - Булево - есть ли удаление
//
Процедура ЗагрузитьПорциюСсылочныйОбъект(Метаданное, Порция, Замены, Настройки, ИмяОбъекта, ИмяИсточника, ЕстьУдаление)

	ПараметрыМетаданного = ЗаполнитьКешМетаданных(Метаданное, Порция, Настройки, ИмяОбъекта);
	
	Изменения = Новый ТаблицаЗначений;

	Для Каждого Источник Из Порция Цикл
		
		Настройки.Сообщение.ПоследнийКлюч = Источник.Ссылка;
		Изменение = Неопределено;
		Приемник = Неопределено;
		
		// пишем ссылочный объект - один из массива
		НачатьТранзакцию();
		Попытка
			
			ИсточникССылкаПрежний = Источник.Ссылка;

			СтандартнаяОбработка = Истина;
			ПараметрыЗагрузки = Новый Структура;
			ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
			ПараметрыЗагрузки.Вставить("Замены", Замены);
			ПараметрыЗагрузки.Вставить("Настройки", Настройки);
			ПараметрыЗагрузки.Вставить("Загрузка", Ложь);
			ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", "");				
			ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
			ПараметрыЗагрузки.Вставить("Изменение", Изменение);
			ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
			ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
			ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);
			
			ПараметрыЗагрузки.Вставить("Изменения", Изменения);
			
			МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
				Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
			
			Если СтандартнаяОбработка = Истина Тогда
				
				ЗаблокироватьДанныеДляРедактирования(Источник.Ссылка);
				СтандартноЗаписатьОдинЭлемент(Источник, Приемник, Порция, ПараметрыЗагрузки);
				РазблокироватьДанныеДляРедактирования(Источник.Ссылка);
				
			КонецЕсли;

			ЗафиксироватьТранзакцию();
			// в коде могут быть не закрытые транзакции - нарушения стандарта						
			Пока ТранзакцияАктивна() Цикл
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Переход'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					, 
					НСтр("ru = 'В коде есть не закрытые транзакции'"));
					
				ЗафиксироватьТранзакцию();
			КонецЦикла;
			
		Исключение
			
			ОтменитьТранзакцию();
			// в коде могут быть не закрытые транзакции - нарушения стандарта
			Пока ТранзакцияАктивна() Цикл
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Переход'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					, 
					НСтр("ru = 'В коде есть не закрытые транзакции'"));
				
				Попытка
					ОтменитьТранзакцию();
				Исключение
				КонецПопытки;
			КонецЦикла;
			
			Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			// пишем в очередь отложенной обработки. и продолжаем работу.
			
			Если ПараметрыЗагрузки.Изменение <> Неопределено 
				И ПараметрыЗагрузки.Изменение.Удаление Тогда // удаление не пишем в очередь постобработки
				ВызватьИсключение;
			КонецЕсли;	
			
			Источник.Ссылка = ИсточникССылкаПрежний;
			
			// запишем с Загрузка Истина и добавим в очередь 
			НачатьТранзакцию();
			Попытка
				
				Приемник = Неопределено;
				ЗагруженныйОбъект = Неопределено;

				СтандартнаяОбработка = Истина;
				
				ПараметрыЗагрузки = Новый Структура;
				ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
				ПараметрыЗагрузки.Вставить("Замены", Замены);
				ПараметрыЗагрузки.Вставить("Настройки", Настройки);
				ПараметрыЗагрузки.Вставить("Загрузка", Истина);
				ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", Причина);
				ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
				ПараметрыЗагрузки.Вставить("Изменение", Неопределено);
				ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
				ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
				ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);
				
				ПараметрыЗагрузки.Вставить("Изменения", Изменения);
				
				МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
					Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
				
				Если СтандартнаяОбработка = Истина Тогда

					ЗаблокироватьДанныеДляРедактирования(Источник.Ссылка);
					СтандартноЗаписатьОдинЭлемент(Источник, Приемник, Порция, ПараметрыЗагрузки);
					РазблокироватьДанныеДляРедактирования(Источник.Ссылка);
											
				КонецЕсли;	
				
				Если Приемник <> Неопределено Тогда
					ЗагруженныйОбъект = Приемник.Ссылка;
					
					// запишем в очередь.
					Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ЗагруженныйОбъект));
					РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
						ЗагруженныйОбъект, Причина, Объект);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				// в коде могут быть не закрытые транзакции - нарушения стандарта						
				Пока ТранзакцияАктивна() Цикл
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Переход'"), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						, 
						НСтр("ru = 'В коде есть не закрытые транзакции'"));
					
					ЗафиксироватьТранзакцию();
				КонецЦикла;
				
			Исключение
				
				Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ОтменитьТранзакцию();
				// в коде могут быть не закрытые транзакции - нарушения стандарта
				Пока ТранзакцияАктивна() Цикл
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Переход'"), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						, 
						НСтр("ru = 'В коде есть не закрытые транзакции'"));
					
					Попытка
						ОтменитьТранзакцию();
					Исключение
					КонецПопытки;
				КонецЦикла;
				
				ВызватьИсключение; 
						
			КонецПопытки;			
			
		КонецПопытки;	
		
	КонецЦикла;

КонецПроцедуры

// Загрузить порцию констант. Порция - по сути таблица значений в памяти.
// 
// Параметры:
//  Метаданное - ОбъектМетаданных - Метаданное
//  Порция - ТаблицаЗначений
//  Замены - ТаблицаЗначений - Замены:
// * СтароеТип 
// * Старое 
// * Новое 
// * Реквизиты 
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
//  ИмяОбъекта - Строка, Произвольный - Имя объекта
//  ИмяИсточника - Строка - Имя источника
//  ЕстьУдаление - Булево - есть ли удаление
//
Процедура ЗагрузитьПорциюКонстанты(Метаданное, Порция, Замены, Настройки, ИмяОбъекта, ИмяИсточника, ЕстьУдаление)
	
	НачатьТранзакцию();
	Попытка
	
		Источник = Порция[Порция.Количество()-1];
		Изменение = Неопределено;
		
		Приемник = Неопределено;
		ПараметрыМетаданного = Новый Структура; // тут не нужно
		ПараметрыМетаданного.Вставить("ПоляИсключения", Новый Соответствие());
		
		ПараметрыЗагрузки = Новый Структура;
		ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
		ПараметрыЗагрузки.Вставить("Замены", Замены);
		ПараметрыЗагрузки.Вставить("Настройки", Настройки);
		ПараметрыЗагрузки.Вставить("Загрузка", Ложь);
		ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", "");
		ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
		ПараметрыЗагрузки.Вставить("Изменение", Изменение);
		ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
		ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
		ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);
		
		Настройки.Вставить("ИмяОбъекта", ИмяОбъекта);
		
		СтандартнаяОбработка = Истина;
		МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
		
		Приемник = Константы[Метаданное.Имя].СоздатьМенеджерЗначения();
		Приемник.Значение = Источник.Значение;
		
		ДополнительныеСвойства = Новый Структура;				
		
		ЗаписатьЗагруженныеДанные(Приемник, Настройки, , ДополнительныеСвойства);
	
		ЗафиксироватьТранзакцию();
		// в коде могут быть не закрытые транзакции - нарушения стандарта						
		Пока ТранзакцияАктивна() Цикл
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Переход'"), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				, 
				НСтр("ru = 'В коде есть не закрытые транзакции'"));
			
			ЗафиксироватьТранзакцию();
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		// в коде могут быть не закрытые транзакции - нарушения стандарта
		Пока ТранзакцияАктивна() Цикл
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Переход'"), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				, 
				НСтр("ru = 'В коде есть не закрытые транзакции'"));
			
			Попытка
				ОтменитьТранзакцию();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры	


// Загрузить порцию регистры. Порция - по сути таблица значений в памяти.
// 
// Параметры:
//  Метаданное - ОбъектМетаданных - Метаданное
//  Порция - ТаблицаЗначений
//  Замены - ТаблицаЗначений - Замены:
// * СтароеТип 
// * Старое 
// * Новое 
// * Реквизиты 
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
//  ИмяОбъекта - Строка, Произвольный - Имя объекта
//  ИмяИсточника - Строка - Имя источника
//  ЕстьУдаление - Булево - есть ли удаление
//
Процедура ЗагрузитьПорциюРегистры(Метаданное, Порция, Замены, Настройки, ИмяОбъекта, ИмяИсточника, ЕстьУдаление)
	
	Менеджер = Новый(СтрЗаменить(Метаданное.ПолноеИмя(), ".", "Менеджер."));
	Приемник = Менеджер.СоздатьНаборЗаписей();
	
	ИОМССылка = ИОМ(Метаданное.ПолноеИмя(), Настройки.ИОМ);
	КлючевоеПоле = ОтметкиВремени.ПолеКлючаОбъекта(ИОМССылка);
	Если КлючевоеПоле = "-" Тогда
		Возврат; // не загружаем. с диска удаляем.
	КонецЕсли;
	
	Если КлючевоеПоле = "ИдентификаторОтметкиВремени" Тогда
		КлючевоеПоле = "ОтметкиВремениИдентификаторНабораЗаписей";
	КонецЕсли;
	
	Причина = "";
	Изменение = Неопределено;
	
	ПараметрыМетаданного = Новый Структура(
		"Метаданное, Менеджер, ИмяОбъектаДляКешаМетаданных, ЕстьУдаление", 
		Метаданное, Менеджер, ИмяОбъекта, ЕстьУдаление);
		
	ПоляИсключения = Новый Соответствие();
	Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если Реквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			ПоляИсключения.Вставить(Реквизит.Имя, 1);
		КонецЕсли;
		
		Поле = Реквизит.Состав.Найти(Метаданное);
		Если Поле = Неопределено
			Или Поле.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
			Или (Поле.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто 
				И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			ПоляИсключения.Вставить(Реквизит.Имя, 1);
		КонецЕсли;
		
	КонецЦикла;	
		
	ПараметрыМетаданного.Вставить("ПоляИсключения", ПоляИсключения);	
	Настройки.Вставить("ПоляИсключения", ПоляИсключения);
	
		Если КлючевоеПоле = "ОтметкиВремениИдентификаторНабораЗаписей"
			Или КлючевоеПоле = "НомерСтроки" Тогда
			//Независимый регистр.
			// тут неважно, как обход делать. Можно и по Порция. В Изменения будет столько же элементов.
			
			Изменения = Новый ТаблицаЗначений;

			НомерСтроки = 0;
			Для Каждого Источник Из Порция Цикл
				
				НачатьТранзакцию();
				Попытка
				
					СтандартнаяОбработка = Истина;
					
					ПараметрыЗагрузки = Новый Структура;
					ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
					ПараметрыЗагрузки.Вставить("Замены", Замены);
					ПараметрыЗагрузки.Вставить("Настройки", Настройки);
					ПараметрыЗагрузки.Вставить("Загрузка", Ложь);
					ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", "");
					ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
					ПараметрыЗагрузки.Вставить("Изменение", Неопределено);
					ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
					ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
					ПараметрыЗагрузки.Вставить("КлючевоеПоле", КлючевоеПоле);
					ПараметрыЗагрузки.Вставить("ЕстьУдаление", ЕстьУдаление);
					ПараметрыЗагрузки.Вставить("Изменения", Изменения);
					ПараметрыЗагрузки.Вставить("НомерСтроки", НомерСтроки);
					ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);
					
					МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
						Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
						
					Если СтандартнаяОбработка = Истина Тогда
						
						ЗаписатьНезависимыйРегистр(
							Порция, Источник, Приемник, ПараметрыЗагрузки);
					КонецЕсли;		
					
					ЗафиксироватьТранзакцию();
					Пока ТранзакцияАктивна() Цикл
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Переход'"), 
							УровеньЖурналаРегистрации.Ошибка,
							,
							, 
							НСтр("ru = 'В коде есть не закрытые транзакции'"));
						
						ЗафиксироватьТранзакцию();
					КонецЦикла;
					
					НомерСтроки = НомерСтроки + 1;
					
				Исключение

					ОтменитьТранзакцию();
					Пока ТранзакцияАктивна() Цикл
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Переход'"), 
							УровеньЖурналаРегистрации.Ошибка,
							,
							, 
							НСтр("ru = 'В коде есть не закрытые транзакции'"));
						
						Попытка
							ОтменитьТранзакцию();
						Исключение
						КонецПопытки;
					КонецЦикла;
					
					// тут пытаемся записать с Загрузка Истина и пишем в очередь пост обработки
					Приемник.Очистить();
					
					Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					// пишем в очередь отложенной обработки. и продолжаем работу.
					
					Если ПараметрыЗагрузки.Изменение <> Неопределено 
						И ПараметрыЗагрузки.Изменение.Удаление Тогда // удаление не пишем в очередь постобработки
						ВызватьИсключение;
					КонецЕсли;	
					
					НачатьТранзакцию();
					Попытка
						
						СтандартнаяОбработка = Истина;
						ПараметрыЗагрузки = Новый Структура;
						ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
						ПараметрыЗагрузки.Вставить("Замены", Замены);
						ПараметрыЗагрузки.Вставить("Настройки", Настройки);
						ПараметрыЗагрузки.Вставить("Загрузка", Истина);
						ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", Причина);
						ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
						ПараметрыЗагрузки.Вставить("Изменение", Неопределено);
						ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
						ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
						ПараметрыЗагрузки.Вставить("КлючевоеПоле", КлючевоеПоле);
						ПараметрыЗагрузки.Вставить("ЕстьУдаление", ЕстьУдаление);
						ПараметрыЗагрузки.Вставить("Изменения", Изменения);
						ПараметрыЗагрузки.Вставить("НомерСтроки", НомерСтроки);
						ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);
						
						МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
							Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
							
						Если СтандартнаяОбработка = Истина Тогда
							
							ЗаписатьНезависимыйРегистр(Порция, Источник, Приемник, ПараметрыЗагрузки);
							
						КонецЕсли;		
						
						ЗафиксироватьТранзакцию();
						Пока ТранзакцияАктивна() Цикл
							
							ЗаписьЖурналаРегистрации(
								НСтр("ru = 'Переход'"), 
								УровеньЖурналаРегистрации.Ошибка,
								,
								, 
								НСтр("ru = 'В коде есть не закрытые транзакции'"));
							
							ЗафиксироватьТранзакцию();
						КонецЦикла;
						
						НомерСтроки = НомерСтроки + 1;
						
					Исключение
						
						ОтменитьТранзакцию();
						Пока ТранзакцияАктивна() Цикл
							
							ЗаписьЖурналаРегистрации(
								НСтр("ru = 'Переход'"), 
								УровеньЖурналаРегистрации.Ошибка,
								,
								, 
								НСтр("ru = 'В коде есть не закрытые транзакции'"));
							
							Попытка
								ОтменитьТранзакцию();
							Исключение
							КонецПопытки;
							
						КонецЦикла;
						
						ВызватьИсключение; 
						
					КонецПопытки;	
					
					Если ПараметрыЗагрузки.Свойство("Изменение")
						И ПараметрыЗагрузки.Изменение <> Неопределено Тогда
					
						ЗначенияКлюча = Новый ХранилищеЗначения(Приемник.Отбор, Новый СжатиеДанных(9));
						ЗагруженныйОбъект = Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьСсылку(ПараметрыЗагрузки.Изменение.Ключ);
						
						// запишем в очередь.
						РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
							ЗагруженныйОбъект, Причина, 
							ИОМССылка, ЗначенияКлюча);
							
					КонецЕсли;
					
				КонецПопытки;
					
			КонецЦикла;
			
		ИначеЕсли КлючевоеПоле = "*" Тогда
			//Регистр без измерений., регистратора и периода
			// Это регистр без измерений (с 1 записью).
			// Строка изменений будет всегда одна.
			// А вот строк в порции может быть несколько если в 2.1. регистр с измерениями (и там несколько записей).
			
			Изменения = Новый ТаблицаЗначений;
			
			НачатьТранзакцию();
			Попытка

				СтандартнаяОбработка = Истина;
				Для Каждого Источник Из Порция Цикл
					
					ПараметрыЗагрузки = Новый Структура;
					ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
					ПараметрыЗагрузки.Вставить("Замены", Замены);
					ПараметрыЗагрузки.Вставить("Настройки", Настройки);
					ПараметрыЗагрузки.Вставить("Загрузка", Ложь);
					ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", Причина);						
					ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
					ПараметрыЗагрузки.Вставить("Изменение", Изменение);
					ПараметрыЗагрузки.Вставить("Изменения", Изменения);
					ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
					ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
					ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);
					
					Настройки.Вставить("ИмяОбъекта", ИмяОбъекта);
					
					МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
						Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
				КонецЦикла;	

				Источник = Порция[Порция.Количество()-1];

				ДополнительныеСвойства = Новый Структура;				
				
				Если ЕстьУдаление И Источник._Удаление = Истина Тогда
					
					ЗаписатьЗагруженныеДанные(Приемник, Настройки, , ДополнительныеСвойства);
				Иначе
				    Запись = Приемник.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Источник);
					
					ЗаписатьЗагруженныеДанные(Приемник, Настройки, , ДополнительныеСвойства);
					Приемник.Очистить();
				КонецЕсли;
				
		    		
		    	ЗафиксироватьТранзакцию();	
				Пока ТранзакцияАктивна() Цикл
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Переход'"), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						, 
						НСтр("ru = 'В коде есть не закрытые транзакции'"));
					
					ЗафиксироватьТранзакцию();
				КонецЦикла;
				
			Исключение
				
				ОтменитьТранзакцию();
				Пока ТранзакцияАктивна() Цикл
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Переход'"), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						, 
						НСтр("ru = 'В коде есть не закрытые транзакции'"));
					
					Попытка
						ОтменитьТранзакцию();
					Исключение
					КонецПопытки;
				КонецЦикла;
				
				ВызватьИсключение; 
				
			КонецПопытки;	
			
		Иначе // тут и регистратор, и ведущее
			
			ИзмененияВсе = Новый ТаблицаЗначений;

			Настройки.Вставить("ИмяОбъекта", ИмяОбъекта);
			ВсеРегистраторы = Новый Соответствие; // ключ - ссылка, значение - 1
			
			Для Каждого Источник Из Порция Цикл
				Регистратор = Источник[КлючевоеПоле];
				Если ВсеРегистраторы.Получить(Регистратор) = Неопределено Тогда
					СтруктИсточника = Новый Структура;
					СтруктИсточника.Вставить("_Отметка", Источник._Отметка);
					СтруктИсточника.Вставить("Удаление", Ложь);
					Если МиграцияДанныхИзВнешнихСистемДО21.ЭтоУдалениеОбъекта(Источник) Тогда
						СтруктИсточника.Удаление = Истина;
					КонецЕсли;	
					
					ВсеРегистраторы[Регистратор] = СтруктИсточника;
				КонецЕсли;	
			КонецЦикла;	
			
			ТаблицаРегистраторов = Новый ТаблицаЗначений;
			ТаблицаРегистраторов.Колонки.Добавить("Регистратор");
			ТаблицаРегистраторов.Колонки.Добавить("Удаление", Новый ОписаниеТипов("Булево"));
			ТаблицаРегистраторов.Колонки.Добавить("_Отметка", Новый ОписаниеТипов("Число"));
			
			Для Каждого КлючИЗначение Из ВсеРегистраторы Цикл
				
				НовСтр = ТаблицаРегистраторов.Добавить();
				НовСтр.Регистратор = КлючИЗначение.Ключ;
				
				СтруктИсточника = КлючИЗначение.Значение;
				НовСтр._Отметка = СтруктИсточника._Отметка;
				НовСтр.Удаление = СтруктИсточника.Удаление;
				
			КонецЦикла;	
			
			ТаблицаРегистраторов.Сортировать("_Отметка, Удаление УБЫВ");
			
			ЕстьНепустыеРегистраторы = Ложь;
			Если ТаблицаРегистраторов.Количество() >= 2 Тогда      
				
				Для Каждого СтрокаТаблицы Из ТаблицаРегистраторов Цикл
					ОсновноеПоле = СтрокаТаблицы.Регистратор;
					Если ЗначениеЗаполнено(ОсновноеПоле) Тогда
						ЕстьНепустыеРегистраторы = Истина;
						Прервать;
					КонецЕсли;	      
				КонецЦикла;
				
			КонецЕсли;	
			
			Для Каждого СтрокаТаблицы Из ТаблицаРегистраторов Цикл
				
				ОсновноеПоле = СтрокаТаблицы.Регистратор; // например регистратор или единственное ссылочное измерение

				// если есть непустые  регистраторы - то пустые пропустим.
				Если Не ЗначениеЗаполнено(ОсновноеПоле) И ЕстьНепустыеРегистраторы Тогда
					Продолжить;
				КонецЕсли;	

				Отбор = Новый Структура(КлючевоеПоле);
				Отбор[КлючевоеПоле] = ОсновноеПоле;
				
				Если ТипЗнч(ОсновноеПоле) = Тип("Строка") Тогда
					
					Если КлючевоеПоле = "Регистратор" Тогда
						Продолжить;
					КонецЕсли;

					Если Метаданное.Измерения.Количество() = 1 Тогда
						Измерение0 = Метаданное.Измерения[0];
						Если Не Измерение0.Тип.СодержитТип(ТипЗнч(ОсновноеПоле)) Тогда
							Продолжить;
						КонецЕсли;	
					КонецЕсли;
						
				КонецЕсли;	
				
				МассивСтрок = Порция.НайтиСтроки(Отбор);
				
				НачатьТранзакцию();
				Попытка

					ПорцияОдинЭлемент = Порция.Скопировать(МассивСтрок);
					
					Изменение = Неопределено;
					
					СтандартнаяОбработка = Истина;

					ПараметрыЗагрузки = Новый Структура;
					ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
					ПараметрыЗагрузки.Вставить("Замены", Замены);
					ПараметрыЗагрузки.Вставить("Настройки", Настройки);
					ПараметрыЗагрузки.Вставить("Загрузка", Ложь);
					ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", Причина);
					ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
					ПараметрыЗагрузки.Вставить("Изменение", Изменение);
					ПараметрыЗагрузки.Вставить("Изменения", Изменения);
					ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
					ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
					ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);
					ПараметрыЗагрузки.Вставить("ЕстьУдаление", ЕстьУдаление);
					ПараметрыЗагрузки.Вставить("КлючевоеПоле", КлючевоеПоле);
					
					Для Каждого Источник Из ПорцияОдинЭлемент Цикл
						
						МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
							Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
					КонецЦикла;	
					
					Изменение = Неопределено;
					Загрузка = Ложь;
					
					Если СтандартнаяОбработка = Истина Тогда
						Если КлючевоеПоле = "Регистратор" Тогда
							ЗаписатьРегистрСРегистратором(Источник, Приемник, Порция, ПараметрыЗагрузки);
						Иначе
							ЗаписатьРегистрСВедущимИзмерением(Источник, Приемник, Порция, ПараметрыЗагрузки);
						КонецЕсли;			
					КонецЕсли;		
					
					ЗафиксироватьТранзакцию();
					Пока ТранзакцияАктивна() Цикл
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Переход'"), 
							УровеньЖурналаРегистрации.Ошибка,
							,
							, 
							НСтр("ru = 'В коде есть не закрытые транзакции'"));
						
						ЗафиксироватьТранзакцию();
					КонецЦикла;
					
				Исключение
					
					ОтменитьТранзакцию();
					Пока ТранзакцияАктивна() Цикл
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Переход'"), 
							УровеньЖурналаРегистрации.Ошибка,
							,
							, 
							НСтр("ru = 'В коде есть не закрытые транзакции'"));
						
						Попытка
							ОтменитьТранзакцию();
						Исключение
						КонецПопытки;
					КонецЦикла;
					
					// тут пытаемся записать с Загрузка Истина и пишем в очередь пост обработки
					Приемник.Очистить();
					
					Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					// пишем в очередь отложенной обработки. и продолжаем работу.
					
					Если Источник._Удаление Тогда // удаление не пишем в очередь постобработки
						ВызватьИсключение;
					КонецЕсли;	
					
					НачатьТранзакцию();
					Попытка
					
						ПорцияОдинЭлемент = Порция.Скопировать(МассивСтрок); 
						
						СтандартнаяОбработка = Истина;
						Изменение = Неопределено;	
						Загрузка = Истина;
						
						ПараметрыЗагрузки = Новый Структура;
						ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
						ПараметрыЗагрузки.Вставить("Замены", Замены);
						ПараметрыЗагрузки.Вставить("Настройки", Настройки);
						ПараметрыЗагрузки.Вставить("Загрузка", Загрузка);
						ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", Причина);
						ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
						ПараметрыЗагрузки.Вставить("Изменение", Изменение);
						ПараметрыЗагрузки.Вставить("Изменения", Изменения);
						ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
						ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
						ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);
						ПараметрыЗагрузки.Вставить("ЕстьУдаление", ЕстьУдаление);
						ПараметрыЗагрузки.Вставить("КлючевоеПоле", КлючевоеПоле);
						
						Для Каждого Источник Из ПорцияОдинЭлемент Цикл
							
							МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
								Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
						КонецЦикла;	
							
						Если СтандартнаяОбработка = Истина Тогда
							Если КлючевоеПоле = "Регистратор" Тогда
								ЗаписатьРегистрСРегистратором(Источник, Приемник, Порция, ПараметрыЗагрузки);
							Иначе
								ЗаписатьРегистрСВедущимИзмерением(Источник, Приемник, Порция, ПараметрыЗагрузки);
							КонецЕсли;			
						КонецЕсли;		
						
						ЗафиксироватьТранзакцию();
						Пока ТранзакцияАктивна() Цикл
							
							ЗаписьЖурналаРегистрации(
								НСтр("ru = 'Переход'"), 
								УровеньЖурналаРегистрации.Ошибка,
								,
								, 
								НСтр("ru = 'В коде есть не закрытые транзакции'"));
							
							ЗафиксироватьТранзакцию();
						КонецЦикла;
						
					Исключение
						
						ОтменитьТранзакцию();
						Пока ТранзакцияАктивна() Цикл
							
							ЗаписьЖурналаРегистрации(
								НСтр("ru = 'Переход'"), 
								УровеньЖурналаРегистрации.Ошибка,
								,
								, 
								НСтр("ru = 'В коде есть не закрытые транзакции'"));
							
							Попытка
								ОтменитьТранзакцию();
							Исключение
							КонецПопытки;
						КонецЦикла;
						
						ВызватьИсключение; 
						
					КонецПопытки;	
	
					ЗагруженныйОбъект = ОсновноеПоле;
					
					// запишем в очередь.
					РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
						ЗагруженныйОбъект, Причина, 
						ИОМССылка);
					
				КонецПопытки;	
				
				
			КонецЦикла;	//цикл по ВсеРегистраторы
			
		КонецЕсли; // КлючевоеПоле
	
КонецПроцедуры	

// Записать регистр с ведущим измерением.
// 
// Параметры:
//  Источник - Строка таблицы значений
//  Приемник Приемник
//  Порция - ТаблицаЗначений, Произвольный - Порция
//  ПараметрыЗагрузки -Структура
Процедура ЗаписатьРегистрСВедущимИзмерением(Источник, Приемник, Порция, ПараметрыЗагрузки) Экспорт
						
	//Ведущее измерение.
	// только 1 измерение, и оно ссылочное 
	// получается как псевдо регистратор
	// точнее если 1 "Основной отбор". И оно ссылочное. 
	//Для большинства регистров Основной отбор = Измерение		
	
	ИмяОбъекта = ПараметрыЗагрузки.ИмяОбъекта;
	ПараметрыМетаданного = ПараметрыЗагрузки.ПараметрыМетаданного;
	Настройки = ПараметрыЗагрузки.Настройки;
	Настройки.Вставить("ИмяОбъекта", ПараметрыЗагрузки.ИмяОбъекта);
	
	КлючевоеПоле = ПараметрыЗагрузки.КлючевоеПоле;
	Изменения = ПараметрыЗагрузки.Изменения;
	ЕстьУдаление = ПараметрыЗагрузки.ЕстьУдаление;
	Загрузка = ПараметрыЗагрузки.Загрузка;
	
	Метаданное = ПараметрыМетаданного.Метаданное;
						
	Если Метаданное = Неопределено Тогда
		
		Причина = НСтр("ru = 'Объект отсутствует в новой конфигурации'") + ": " + ИмяОбъекта;
		ВызватьИсключение Причина;
		
	КонецЕсли;
							
	Отбор = Новый Структура(КлючевоеПоле);
	
	Приемник.Отбор[КлючевоеПоле].Установить(Источник[КлючевоеПоле]);

	
	Если ЕстьУдаление И Источник._Удаление = Истина Тогда
		
		ДополнительныеСвойства = Новый Структура;				
		
		ЗаписатьЗагруженныеДанные(Приемник, Настройки, , ДополнительныеСвойства); // пишем пустой набор записей
		
	Иначе
		
		Запись = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Источник); 
		
		ПараметрыЗаписи = СтруктураПараметровЗаписиЗагруженныхДанных();
		ПараметрыЗаписи.Загрузка = Загрузка;
		
		ДополнительныеСвойства = Новый Структура;
		
		ЗаписатьЗагруженныеДанные(Приемник, Настройки, ПараметрыЗаписи, ДополнительныеСвойства);
		
		Приемник.Очистить();
		
	КонецЕсли;
		
КонецПроцедуры								

// Записать регистр с регистратором.
// 
// Параметры:
//  Источник - Строка таблицы значений
//  Приемник Приемник
//  Порция - ТаблицаЗначений, Произвольный - Порция
//  ПараметрыЗагрузки -Структура
Процедура ЗаписатьРегистрСРегистратором(Источник, Приемник, Порция, ПараметрыЗагрузки) Экспорт
							
	ИмяОбъекта = ПараметрыЗагрузки.ИмяОбъекта;
	ПараметрыМетаданного = ПараметрыЗагрузки.ПараметрыМетаданного;
	Настройки = ПараметрыЗагрузки.Настройки;
	Настройки.Вставить("ИмяОбъекта", ПараметрыЗагрузки.ИмяОбъекта);
	
	КлючевоеПоле = ПараметрыЗагрузки.КлючевоеПоле;
	Изменения = ПараметрыЗагрузки.Изменения;
	ЕстьУдаление = ПараметрыЗагрузки.ЕстьУдаление;
	Загрузка = ПараметрыЗагрузки.Загрузка;
	
	Метаданное = ПараметрыМетаданного.Метаданное;
	
	Если Метаданное = Неопределено Тогда
		
		Причина = НСтр("ru = 'Объект отсутствует в новой конфигурации'") + ": " + ИмяОбъекта;
		ВызватьИсключение Причина;
		
	КонецЕсли;
							
	Отбор = Новый Структура(КлючевоеПоле);
	
	НоваяОтметка = Неопределено;
	
	Приемник.Отбор.Регистратор.Установить(Источник[КлючевоеПоле]);
	
	Если ЕстьУдаление И Источник._Удаление = Истина Тогда
		
		ДополнительныеСвойства = Новый Структура;				
		
		ЗаписатьЗагруженныеДанные(Приемник, Настройки, , ДополнительныеСвойства); // пишем пустой набор записей
		
	Иначе	

		Запись = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Источник);
		
		ПараметрыЗаписи = СтруктураПараметровЗаписиЗагруженныхДанных();
		ПараметрыЗаписи.Загрузка = Загрузка;
		
		ДополнительныеСвойства = Новый Структура;				
		
		ЗаписатьЗагруженныеДанные(Приемник, Настройки, ПараметрыЗаписи, ДополнительныеСвойства);
		Приемник.Очистить();
		
	КонецЕсли;
	
								
КонецПроцедуры								

// Записать независимый регистр.
// 
// Параметры:
//  Порция - ТаблицаЗначений, Произвольный - Порция
//  Источник - Произвольный, СтрокаТаблицыЗначений - Источник
//  Приемник Приемник
//  ПараметрыЗагрузки - Структура - Параметры загрузки:
// * Настройки - Структура, Неопределено -:
// ** Поток - Число -
// ** ИОМ - Соответствие -
// ** Переименования - Соответствие -
// ** УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Загрузка - Булево -
// * ПараметрыМетаданного - Структура -:
// ** Метаданное 
// ** Менеджер 
// * Изменение - Неопределено -
// * ИмяИсточникаОригинальное - Строка -
// * ДополнительныеСвойства - Структура -
// * КлючевоеПоле - Строка -
Процедура ЗаписатьНезависимыйРегистр(Порция, Источник, Приемник, ПараметрыЗагрузки) Экспорт

	ИмяОбъекта = ПараметрыЗагрузки.ИмяОбъекта;
	Метаданное = ПараметрыЗагрузки.ПараметрыМетаданного.Метаданное;
	ПараметрыЗагрузки.Настройки.Вставить("ИмяОбъекта", ИмяОбъекта);

	Если ИмяОбъекта <> ПараметрыЗагрузки.ПараметрыМетаданного.ИмяОбъектаДляКешаМетаданных Тогда
		Метаданное = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
		ПараметрыЗагрузки.ПараметрыМетаданного = ЗаполнитьКешМетаданных(
			Метаданное, Порция, ПараметрыЗагрузки.Настройки, ИмяОбъекта);
		ПараметрыЗагрузки.Изменения.Очистить();
	КонецЕсли;	

	Если Метаданное = Неопределено Тогда
		
		Причина = НСтр("ru = 'Объект отсутствует в новой конфигурации'") + ": " + ИмяОбъекта;
		ВызватьИсключение Причина;
		
	КонецЕсли;
	
	Удалитель = Неопределено;
	ПолеИзмерения = "";
	Если ПараметрыЗагрузки.ПараметрыМетаданного.Метаданное.Измерения.Количество() <> 0 Тогда
		ПолеИзмерения = ПараметрыЗагрузки.ПараметрыМетаданного.Метаданное.Измерения[0].Имя;
	КонецЕсли;	
	
	ПоляИсключения = ПараметрыЗагрузки.ПараметрыМетаданного.ПоляИсключения;
	
	БылиКоллизии = Ложь;
	НоваяОтметка = Источник._Отметка;
	
	// установим отбор		
	Для Каждого Поле Из Приемник.Отбор Цикл
		
		Если ПоляИсключения.Получить(Поле.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Источник[Поле.Имя] = Null Тогда
			Поле.Использование = Ложь;
			Поле.Значение = Поле.ТипЗначения.ПривестиЗначение();
			ПолныйОтбор = Ложь;
		Иначе
			Поле.Использование = Истина;
			Попытка
				Поле.Значение = Источник[Поле.Имя];
			Исключение
				Если Источник[Поле.Имя] = Неопределено Тогда
					Поле.Значение = Поле.ТипЗначения.ПривестиЗначение();
				Иначе
					ОтметкиВремени.ОшибкаТипизации(Поле.Имя, Источник[Поле.Имя], ПараметрыЗагрузки.ПараметрыМетаданного.Метаданное);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ПолеИзмерения) Тогда
		ПараметрыЗагрузки.Настройки.Сообщение.ПоследнийКлюч = Источник[ПолеИзмерения];
	КонецЕсли;	
	
	Если ПараметрыЗагрузки.ЕстьУдаление И Источник._Удаление = Истина Тогда 
		
		УдалитьЗагруженныеДанные(Источник, ПараметрыЗагрузки.Настройки, 
			ПараметрыЗагрузки.ПараметрыМетаданного.Менеджер, ПоляИсключения, Удалитель, ПараметрыЗагрузки.Загрузка);
		
	Иначе

		Запись = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Источник);
		
	КонецЕсли;
	
	ВыполнитьЗапись = Истина;
	
	Если ВыполнитьЗапись Тогда
		
		ПараметрыЗаписи = СтруктураПараметровЗаписиЗагруженныхДанных();
		ПараметрыЗаписи.Замещение = Истина;
		ПараметрыЗаписи.Загрузка = ПараметрыЗагрузки.Загрузка;
				
		ДополнительныеСвойства = Новый Структура;				
				
		ЗаписатьЗагруженныеДанные(Приемник, ПараметрыЗагрузки.Настройки, ПараметрыЗаписи, ДополнительныеСвойства);
	КонецЕсли;	
	
	Приемник.Очистить();

КонецПроцедуры

// Обработчик рег задания
Процедура РазборОчередиПостобработки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РазборОчередиПостобработки, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы = Истина;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьПостОбработкиЗагрузки.Ключ,
		|	ОчередьПостОбработкиЗагрузки.Дата КАК Дата,
		|	ОчередьПостОбработкиЗагрузки.ТекстОшибки,
		|	ОчередьПостОбработкиЗагрузки.ЧислоПопытокОбработки,
		|	ОчередьПостОбработкиЗагрузки.Объект,
		|	ОчередьПостОбработкиЗагрузки.ЗначенияКлюча
		|ИЗ
		|	РегистрСведений.ОчередьПостОбработкиЗагрузки КАК ОчередьПостОбработкиЗагрузки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Настройки = КэшНастроек();
	Настройки.Вставить("ИмяОбъекта", "");

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ИОМ = Выборка.Объект;
			Метаданное = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИОМ);
			ВидКлюча = ОтметкиВремени.ВидКлючаОбъекта(ИОМ);
			
			ИмяОбъекта = Метаданное.ПолноеИмя();
			Настройки.ИмяОбъекта = ИмяОбъекта;
			
			Если ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта Тогда
				ОбъектДляЗаписи = Выборка.Ключ.ПолучитьОбъект();
				
				ЗаписатьЗагруженныеДанные(ОбъектДляЗаписи, Настройки);
				РегистрыСведений.ОчередьПостОбработкиЗагрузки.УдалитьЗапись(Выборка.Ключ, Выборка.Объект);
			
			ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей Тогда 
			
				Отбор = ОтметкиВремени.ЗначенияКлюча(Выборка.ЗначенияКлюча);
				
				Менеджер = Новый(СтрЗаменить(Метаданное.ПолноеИмя(), ".", "Менеджер."));
				Приемник = Менеджер.СоздатьНаборЗаписей();

				// установим отбор		
				Для Каждого Поле Из Приемник.Отбор Цикл
					
					Если Отбор.Свойство(Поле.Имя) Тогда
						ОтборЗначение = Отбор[Поле.Имя];
						Если ОтборЗначение <> Неопределено Тогда
						
							Поле.Использование = Истина;
							Поле.Значение = ОтборЗначение;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;	
				
				Приемник.Прочитать();
				
				ПараметрыЗаписи = СтруктураПараметровЗаписиЗагруженныхДанных();
				ПараметрыЗаписи.Замещение = Истина;
				
				ЗаписатьЗагруженныеДанные(Приемник, Настройки, ПараметрыЗаписи);
				РегистрыСведений.ОчередьПостОбработкиЗагрузки.УдалитьЗапись(Выборка.Ключ, Выборка.Объект);

			ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПодчинениеРегистратору
					Или ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПервоеСсылочноеИзмерение Тогда
				
				РегистраторИлиВедущееИзмерение = Выборка.Ключ;
				
				Менеджер = Новый(СтрЗаменить(Метаданное.ПолноеИмя(), ".", "Менеджер."));
				Приемник = Менеджер.СоздатьНаборЗаписей();
				
				КлючевоеПоле = ОтметкиВремени.ПолеКлючаОбъекта(ИОМ); 

				// установим отбор		
				Для Каждого Поле Из Приемник.Отбор Цикл
					
					Если Поле.Имя = КлючевоеПоле Тогда
					
						Поле.Использование = Истина;
						Поле.Значение = РегистраторИлиВедущееИзмерение;
						
					КонецЕсли;
					
				КонецЦикла;	
				
				Приемник.Прочитать();
				
				ПараметрыЗаписи = СтруктураПараметровЗаписиЗагруженныхДанных();
				ПараметрыЗаписи.Замещение = Истина;
				
				ЗаписатьЗагруженныеДанные(Приемник, Настройки, ПараметрыЗаписи);
				
				РегистрыСведений.ОчередьПостОбработкиЗагрузки.УдалитьЗапись(Выборка.Ключ, Выборка.Объект);
				
			КонецЕсли;
			
		Исключение
			
			Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РегистрыСведений.ОчередьПостОбработкиЗагрузки.ИнкрементироватьОшибку(Выборка, Причина);
			
		КонецПопытки;		
		
	КонецЦикла;	

	// Уведомим ответственных - только по записям от 1 до 2 часов.
	// и только раз в 30 минут.
	
	Порог = 3600;	
	
	ДатаПоследнейПроверки 
		= Константы.ДатаПоследнейПроверкиРазборОчередиПостобработки.Получить();
	Если ДатаПоследнейПроверки >= ТекущаяДатаСеанса() - 1800 Тогда
		Возврат;
	КонецЕсли;
		
	Константы.ДатаПоследнейПроверкиРазборОчередиПостобработки.Установить(ТекущаяДатаСеанса());
		
	// Тут код уведомления.  Число объектов, и текст ошибки одного (или нескольких) из них - не всех. 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ОчередьПостОбработкиЗагрузки.Ключ), 0) КАК КоличествоЗаписей
		|ИЗ
		|	РегистрСведений.ОчередьПостОбработкиЗагрузки КАК ОчередьПостОбработкиЗагрузки
		|ГДЕ
		|	ОчередьПостОбработкиЗагрузки.Дата >= &Дата1
		|	И ОчередьПостОбработкиЗагрузки.Дата < &Дата2";
	Запрос.УстановитьПараметр("Дата1", ТекущаяДатаСеанса() - Порог * 2); // Только за последний час.
	Запрос.УстановитьПараметр("Дата2", ТекущаяДатаСеанса() - Порог); // Только за последний час.	
	Таблица = Запрос.Выполнить().Выгрузить();
	КоличествоЗаписей = Таблица[0].КоличествоЗаписей;	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьПостОбработкиЗагрузки.Ключ,
		|	ОчередьПостОбработкиЗагрузки.Дата КАК Дата,
		|	ОчередьПостОбработкиЗагрузки.ТекстОшибки,
		|	ОчередьПостОбработкиЗагрузки.ЧислоПопытокОбработки
		|ИЗ
		|	РегистрСведений.ОчередьПостОбработкиЗагрузки КАК ОчередьПостОбработкиЗагрузки
		|ГДЕ
		|	ОчередьПостОбработкиЗагрузки.Дата >= &Дата1
		|	И ОчередьПостОбработкиЗагрузки.Дата < &Дата2
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	Запрос.УстановитьПараметр("Дата1", ТекущаяДатаСеанса() - Порог * 2); // Только за последний час.
	Запрос.УстановитьПараметр("Дата2", ТекущаяДатаСеанса() - Порог); // Только за последний час.	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ТекстОшибки = Выборка.ТекстОшибки;
		Дата = Выборка.Дата;
		
		Описание = СтрШаблон(НСтр("ru = 'В диапазоне дат %1 - %2 есть необработанные записи очереди постобработки зарузки из 2.1 (%3 шт).
		|Последняя: от %4. Ошибка: %5'"),
			ТекущаяДатаСеанса() - Порог * 2, 
			ТекущаяДатаСеанса() - Порог,
			КоличествоЗаписей, Дата, ТекстОшибки);
		
		ОбщегоНазначенияДокументооборот.ЗафиксироватьПроблему(
			НСтр("ru = 'Разбор очереди постобработки'"),
			Описание,
			"РазборОчередиПостобработки");
		
	КонецЕсли;	
	
КонецПроцедуры

// Обработать типы значений. если не смогли прочитать файл стандартно - подменим в нем строки и снова прочитаем
// 
// Параметры:
//  ИмяФайла Имя файла
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Загружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// 
// Возвращаемое значение:
//  Структура - Обработать типы значений:
// * Тело - Строка -
// * Модифицированность - Булево -
// * Замены - ТаблицаЗначений -:
// ** СтароеТип 
// ** Старое 
// ** Новое 
// ** Реквизиты 
Функция ОбработатьТипыЗначений(ИмяФайла, Настройки) Экспорт
	
	Чтение = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	Строки = СтрРазделить(Чтение.Прочитать(), ".");
	Чтение.Закрыть();
	
	Замены = НоваяТаблицаЗамены();
	Переименования = Новый Соответствие;
	Модифицированность = Ложь;
	ГраницаНач = """#type"": ";
	ДлинаНач = СтрДлина(ГраницаНач);
	ГраницаКон = """,";
	
	Для Н = 0 По Строки.ВГраница() Цикл
		Если СтрЗаканчиваетсяНа(Строки[Н], "Ref") Тогда
				
			Нач = СтрНайти(Строки[Н], ГраницаНач, НаправлениеПоиска.СКонца);
			Если Нач > 0 Тогда
				
				Класс = Сред(Строки[Н], Нач + ДлинаНач + 1);
				Если СтрНачинаетсяС(Класс, "jcfg:") Тогда
					К = Н+1;
					
					Кон = СтрНайти(Строки[К], ГраницаКон);
					Класс = Сред(Класс, 6);
					Имя = Лев(Строки[К], Кон-1);
					
					Тип = Null;
					Попытка
						Тип = Тип(Класс + "." + Имя);
						Если Класс <> "EnumRef" Тогда
							Продолжить;	
						КонецЕсли;
					Исключение
					КонецПопытки;
					
					Кон = СтрНайти(Строки[К], "}");
					Значение = СтрРазделить(Лев(Строки[К], Кон-1), """");
					Значение = Значение[Значение.Найти(": ") + 1];
					
					Если Тип <> Null Тогда
						//Проверка значений перечислений.
						Если Значение = ""
							Или Значение = "00000000-0000-0000-0000-000000000000" Тогда
							Продолжить;
						КонецЕсли;
						СтароеИмя = Метаданные.НайтиПоТипу(Тип).ПолноеИмя() + "." + Значение; 
						Попытка
							Тип = ПредопределенноеЗначение(СтароеИмя);
							Если Тип <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
						Исключение
						КонецПопытки;
						
						//Обработка переименования значения.
						НовоеИмя = Переименования.Получить(СтароеИмя);
						Если НовоеИмя = Неопределено Тогда
							НовоеИмя = Настройки.Переименования.Получить(СтароеИмя);
							Если НовоеИмя = Неопределено Тогда
								НовоеИмя = "";
							ИначеЕсли НовоеИмя <> Null Тогда
								НовоеИмя = СтрРазделить(НовоеИмя, ".");
								НовоеИмя[0] = КлассОбъектаВXMLТип(НовоеИмя[0]);
								
							КонецЕсли;
							Переименования.Вставить(СтароеИмя, НовоеИмя);
						КонецЕсли;
						Если ЗначениеЗаполнено(НовоеИмя) Тогда
							Если НовоеИмя[0] <> Класс Тогда
								Строки[Н] = Лев(Строки[Н], Нач + ДлинаНач) + "jcfg:" + НовоеИмя[0];
							КонецЕсли;
							Строки[К] = НовоеИмя[1] + """,
								|	""#value"": """ + НовоеИмя[2] + """
								|" + Сред(Строки[К], Кон);
							Модифицированность = Истина;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					//Обработка переименования объекта.
					СтароеИмя = КлассОбъектаИзXMLТипа(Класс) + "." + Имя;
					НовоеИмя = Переименования.Получить(СтароеИмя);
					Если НовоеИмя = Неопределено Тогда
						НовоеИмя = Настройки.Переименования.Получить(СтароеИмя);
						Если НовоеИмя = Неопределено Тогда
							НовоеИмя = "";
						ИначеЕсли НовоеИмя <> Null Тогда
							НовоеИмя = СтрРазделить(НовоеИмя, ".");
							НовоеИмя[0] = "jcfg:" + КлассОбъектаВXMLТип(НовоеИмя[0]);
						КонецЕсли;
						Переименования.Вставить(СтароеИмя, НовоеИмя);
					КонецЕсли;
					Если ЗначениеЗаполнено(НовоеИмя) Тогда
						Если НовоеИмя[0] <> Класс Тогда
							Строки[Н] = Лев(Строки[Н], Нач + ДлинаНач) + НовоеИмя[0];
						КонецЕсли;
						Строки[К] = НовоеИмя[1] + Сред(Строки[К], Найти(Строки[К], """"));
						Модифицированность = Истина;
						Продолжить;
					КонецЕсли;
					
					Модифицированность = Истина;
					
					Если НовоеИмя = Null Тогда
						//Больше не поддерживается.
						Строки[Н] = Лев(Строки[Н], Нач + ДлинаНач) + "jxs:string"",
						|	""#value"": """ + СтароеИмя;
						Строки[К] = Значение + """" + Сред(Строки[К], Кон);
						Продолжить;
					Иначе
						//Заглушка для постобработки.
						Строки[Н] = Лев(Строки[Н], Нач + ДлинаНач) + "jdcscor:Field"",
						|	""#value"": """ + СтароеИмя;
						Строки[К] = Значение + """" + Сред(Строки[К], Кон);
					КонецЕсли;
										
					Если Замены.НайтиСтроки(Новый Структура("СтароеТип,Старое", СтароеИмя, Значение)).Количество() = 0 Тогда
						Запись = Замены.Добавить();
						Запись.СтароеТип = СтароеИмя;
						Запись.Старое = Значение;
						Запись.Новое = Null;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Переименования.Очистить();
	
	//!!!
	Записать = Ложь;
	Если Записать Тогда
		ИмяПапки = "Буфер";
		Ф = Новый Файл(ИмяФайла);
		Путь = СтрРазделить(Ф.Путь, "\");
		Путь[Путь.ВГраница()-1] = ИмяПапки;
		СоздатьКаталог(СтрСоединить(Путь, "\"));
		Запись = Новый ЗаписьТекста(СтрСоединить(Путь, "\") + Ф.Имя);
		Запись.Записать(СтрСоединить(Строки, "."));
		Запись.Закрыть();
	КонецЕсли;
	
	Возврат Новый Структура("Тело,Модифицированность,Замены", СтрСоединить(Строки, "."), Модифицированность, Замены);
	
КонецФункции	

// Загрузить пользователя ИБ.
// 
// Параметры:
//  Источник - Произвольный, СтрокаТаблицыЗначений - Источник
//  Владелец - Неопределено - Владелец
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - Загрузить пользователя ИБ
Функция ЗагрузитьПользователяИБ(Источник, Владелец, Настройки) Экспорт
	
	Если Не ЗначениеЗаполнено(Источник._ДанныеПользователяИБ) Тогда
		
		Возврат Владелец.ИдентификаторПользователяИБ;
	КонецЕсли;
	
	Данные = Источник._ДанныеПользователяИБ.Получить();
	
	Если ЗначениеЗаполнено(Владелец.ИдентификаторПользователяИБ) Тогда
		Приемник = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Владелец.ИдентификаторПользователяИБ);	
	КонецЕсли;
	Если Приемник = Неопределено Тогда
		Приемник = ПользователиИнформационнойБазы.НайтиПоИмени(Данные.Имя);
	КонецЕсли;
	Если Приемник = Неопределено Тогда
		Приемник = ПользователиИнформационнойБазы.СоздатьПользователя();
	Иначе
		
		//Отнимаем у других пользователей.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Т
		|ГДЕ
		|	Т.ИдентификаторПользователяИБ = &ИД
		|	И Т.Ссылка <> &Ссылка");
		
		Запрос.УстановитьПараметр("ИД", Приемник.УникальныйИдентификатор);
		Запрос.УстановитьПараметр("Ссылка", Владелец.Ссылка);
		
		Если ТипЗнч(Владелец) <> Тип("СправочникОбъект.Пользователи") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Пользователи", Владелец.Метаданные().ПолноеИмя());
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			О = Выборка.Ссылка.ПолучитьОбъект();
			О.ИдентификаторПользователяИБ = Неопределено;
			
			ПараметрыЗаписи = СтруктураПараметровЗаписиЗагруженныхДанных();
			ПараметрыЗаписи.Загрузка = Истина;
			
			ЗаписатьЗагруженныеДанные(О, Настройки, ПараметрыЗаписи);
		КонецЦикла;
			
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, Данные,
		"АдресЭлектроннойПочты,
		|АутентификацияOpenID,
		|АутентификацияОС,
		|АутентификацияСтандартная,
		|ЗапрещеноВосстанавливатьПароль,
		|ЗапрещеноИзменятьПароль,
		|Имя,
		|ПоказыватьВСпискеВыбора,
		|ПолноеИмя,
		|ПользовательОС,
		|СохраняемоеЗначениеПароля");
	
	Если ЗначениеЗаполнено(Данные.ОсновнойИнтерфейс) Тогда
		Приемник.ОсновнойИнтерфейс = Метаданные.НайтиПоПолномуИмени(Данные.ОсновнойИнтерфейс);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.РежимЗапуска) Тогда
		Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[Данные.РежимЗапуска];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Язык) Тогда
		Приемник.Язык = Метаданные.НайтиПоПолномуИмени(Данные.Язык);
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	МиграцияДанныхИзВнешнихСистемДО21.ПриЗаполненииПользователяИБ(Приемник, Данные, Владелец, Источник.Владелец(), Настройки, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Приемник.Записать();
	КонецЕсли;
	
	Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы") Тогда
		Возврат Приемник.УникальныйИдентификатор;
	КонецЕсли;
	
КонецФункции

// Установить изменяется в другой системе.
// 
// Параметры:
//  Приемник  - СправочникОбъект, БизнесПроцессОбъект.
Процедура УстановитьИзменяетсяВДругойСистеме(Приемник) Экспорт

	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		СтрутураДляИзменяется = Новый Структура("ИсточникДанных", 
			Справочники.ИсточникиДанных.ДО21);
		ЗаполнитьЗначенияСвойств(Приемник, СтрутураДляИзменяется);
	КонецЕсли;

КонецПроцедуры

// Возвращает структуру параметров записи для процедуры ЗаписатьЗагруженныеДанные.
// 
// Возвращаемое значение:
//  Структура
// * Замещение - Булево, Неопределено
// * Загрузка - Булево, Неопределено
// * Удаление - Булево
// * ЗаполнятьИсточникДанных - Булево
//
Функция СтруктураПараметровЗаписиЗагруженныхДанных() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Замещение", Неопределено);
	СтруктураПараметров.Вставить("Загрузка", Неопределено);
	СтруктураПараметров.Вставить("Удаление", Ложь);
	СтруктураПараметров.Вставить("ЗаполнятьИсточникДанных", Истина);
		
	Возврат СтруктураПараметров;
	
КонецФункции

// Записать загруженные данные. ССылочный объект или набор записей РС, или константа
// 
// Параметры:
//  Приемник - КонстантаМенеджерЗначенияИмяКонстанты, Неопределено - Приемник
//  Настройки - Неопределено, Структура - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * ИмяФайла 
// * Событие - Строка -
//  ПараметрыЗаписи - Неопределено, Структура - см. СтруктураПараметровЗаписиЗагруженныхДанных
//  ДополнительныеСвойства - Структура, Неопределено - Дополнительные свойства
Процедура ЗаписатьЗагруженныеДанные(Приемник, Настройки,
	ПараметрыЗаписи = Неопределено,
	ДополнительныеСвойства = Неопределено) Экспорт
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = СтруктураПараметровЗаписиЗагруженныхДанных();
	КонецЕсли;
	
	Если ПараметрыЗаписи.Загрузка <> Неопределено Тогда
		Приемник.ОбменДанными.Загрузка = ПараметрыЗаписи.Загрузка;
	КонецЕсли;
	
	Если ПараметрыЗаписи.ЗаполнятьИсточникДанных Тогда 
		СтрутураДляИзменяется = Новый Структура("ИсточникДанных", 
			Справочники.ИсточникиДанных.ДО21);
		ЗаполнитьЗначенияСвойств(Приемник, СтрутураДляИзменяется);
	КонецЕсли;
	
	КонфигурацияИспользуетТолькоОдинЯзык = МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь);
	Если Не КонфигурацияИспользуетТолькоОдинЯзык Тогда
		
		Если СтрНайти(Настройки.ИмяОбъекта, "Справочник") <> 0
			И ОбщегоНазначенияДокументооборотПовтИсп.ВходитВРеквизитНаименованиеЯзык1(Настройки.ИмяОбъекта) Тогда
			Приемник.НаименованиеЯзык1 = Приемник.Наименование;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ДополнительныеСвойства <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ДополнительныеСвойства Цикл
			Приемник.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	Приемник.ДополнительныеСвойства.Вставить("ОтметкиВремениИсточник", Настройки.УзелИсточник);
	Приемник.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	//Приемник.ДополнительныеСвойства.Вставить("ОтключитьОтметкиВремени");
	Приемник.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта", Истина);
	Попытка
		Приемник.ЗаписьИсторииДанных.Отказ = Истина;
	Исключение
	КонецПопытки;
	
	Попытка
		
		Если ПараметрыЗаписи.Удаление Тогда
			Приемник.Удалить();
		ИначеЕсли ПараметрыЗаписи.Замещение = Ложь Тогда
			Приемник.Записать(Ложь);
		Иначе
			Приемник.Записать();
		КонецЕсли;
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
		
	Приемник.ДополнительныеСвойства.Очистить();
	
КонецПроцедуры

// Удалить загруженные данные.
// 
// Параметры:
//  ТекущиеДанные Текущие данные
//  Настройки Настройки
//  Менеджер Менеджер
//  ПоляИсключения - Соответствие 
//  Набор - Неопределено - Набор
//  Загрузка - Булево - Загрузка
//  КлючевоеПоле - Неопределено - Ключевое поле
Процедура УдалитьЗагруженныеДанные(ТекущиеДанные, Настройки, Менеджер, ПоляИсключения, Набор = Неопределено, Загрузка = Ложь, 
	КлючевоеПоле = Неопределено) Экспорт
	
	Если Набор = Неопределено Тогда
		Набор = Менеджер.СоздатьНаборЗаписей();
	КонецЕсли;
	
	Если КлючевоеПоле = Неопределено Тогда
		
		Для каждого Поле Из Набор.Отбор Цикл
			
			Если ПоляИсключения.Получить(Поле.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ТекущиеДанные[Поле.Имя] = Null Тогда
				Поле.Использование = Ложь;
			Иначе
				Попытка
					Поле.Значение = ТекущиеДанные[Поле.Имя];
				Исключение
					Если ТекущиеДанные[Поле.Имя] = Неопределено Тогда
						Поле.Значение = Поле.ТипЗначения.ПривестиЗначение();
					Иначе
						ОтметкиВремени.ОшибкаТипизации(Поле.Имя, ТекущиеДанные[Поле.Имя], Набор.Метаданные());
					КонецЕсли;
				КонецПопытки;
				Поле.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Поле = Набор.Отбор[КлючевоеПоле];
		Поле.Использование = Истина;
		Поле.Значение = ТекущиеДанные[КлючевоеПоле];
	КонецЕсли;
	
	Если Загрузка Тогда
		ЗаписатьСлужебныеДанные(Набор, Настройки);
	Иначе
		
		ДополнительныеСвойства = Новый Структура;				
		
		ЗаписатьЗагруженныеДанные(Набор, Настройки, , ДополнительныеСвойства);
	КонецЕсли;
	
	Набор.ДополнительныеСвойства.Очистить();
	
КонецПроцедуры

// Есть сообщения.
// 
// Параметры:
//  Объекты - Массив - Объекты
//  Каталог - Строка - каталог
// 
// Возвращаемое значение:
//  Булево - Есть сообщения
Функция ЕстьСообщения(Объекты, Каталог) Экспорт
	
	Для Каждого Файл Из НайтиФайлы(Каталог, "*", ) Цикл
		
		Если Найти("123456789", Лев(Файл.Имя, 1)) И Файл.Имя = Файл.ИмяБезРасширения Тогда 
			Для Каждого Имя Из Объекты Цикл
				Части = СтрРазделить(Имя, ".");
				Если НайтиФайлы(Файл.Путь,
					СтрШаблон("*.%1.%2.json", КлассОбъектаВЧисло(Части[0]), Части[1])
					).Количество() Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Событие загрузка.
// 
// Возвращаемое значение:
//  Строка - Событие загрузка
Функция СобытиеЗагрузка() Экспорт
	
	Возврат НСтр("ru = 'Загрузка'");
	
КонецФункции
	
#КонецОбласти

#Область ОтложенныеОбработчики

// Запланировать задание.
// 
// Параметры:
//  Метод Метод
//  ОбъектыИсточники - Неопределено - Объекты источники
//  Параметры - Неопределено - Параметры
Процедура ЗапланироватьЗадание(Метод, ОбъектыИсточники = Неопределено, Параметры = Неопределено) Экспорт
	
КонецПроцедуры

// Выполнить задания.
// 
// Параметры:
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// 
// Возвращаемое значение:
//  Булево - Выполнить задания
Функция ВыполнитьЗадания(Настройки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Настройки = Неопределено Тогда
		Настройки = КэшНастроек();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Источник КАК Метод,
	|	Т.Описание КАК Источники,
	|	Т.Ключ КАК Параметры
	|ИЗ
	|	РегистрСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания КАК Т
	|ГДЕ
	|	Т.Событие = &Событие
	|	И Т.Принято = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Момент");
	Запрос.УстановитьПараметр("Событие", СобытиеЗадание());
		
	Очередь = Запрос.Выполнить().Выгрузить();
	Задания = Очередь.Скопировать(, "Метод,Параметры");
	Задания.Свернуть("Метод,Параметры");
	
	ПараметрыЗадания = Новый Структура("ИмяМетода,Состояние,Ключ", "МиграцияДанныхИзВнешнихСистемСервер.ВыполнитьЗадание", СостояниеФоновогоЗадания.Активно);
	ОтборИсточников = Новый Структура("Метод,Параметры");
	Источники = Новый Массив;
	ВсеОбработано = Истина;
	
	Для Каждого Задание Из Задания Цикл
		
		ПараметрыЗадания.Ключ = Задание.Метод; 
		Если ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыЗадания).Количество() Тогда
			ВсеОбработано = Ложь;
			Продолжить;
		КонецЕсли;
		
		Источники.Очистить();
		ЗаполнитьЗначенияСвойств(ОтборИсточников, Задание);
		Для Каждого Строка Из Очередь.НайтиСтроки(ОтборИсточников) Цикл
			Источники.Очистить();
			Для Каждого Источник Из СтрРазделить(Строка.Источники, ";, "+Символы.ПС+Символы.Таб, Ложь) Цикл
				Источники.Добавить(Источник);
			КонецЦикла;
		КонецЦикла;
		
		Если Источники.Количество() Тогда
			ЗапросИсточников = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.Источник) КАК Источник
			|ИЗ
			|	РегистрСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания КАК Т
			|ГДЕ
			|	Т.Событие = &Событие
			|	И Т.Источник В (&Источники)
			|	И Т.Принято = ИСТИНА
			|	И Т.Последнее = ИСТИНА
			|	И Т.Изменения = ЛОЖЬ");
			ЗапросИсточников.УстановитьПараметр("Событие", СобытиеЗагрузка());
			ЗапросИсточников.УстановитьПараметр("Источники", Источники);
					
			Выборка = ЗапросИсточников.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Не ЗначениеЗаполнено(Выборка[0]) Или Выборка[0] < Источники.Количество() Тогда
				//Ещё не все нужные объекты загрузились.
				ВсеОбработано = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если ЕстьСообщения(Источники, Настройки.Каталог) Тогда
				//Остались непринятые файлы.
				ВсеОбработано = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Параметры = Новый Массив;
		Параметры.Добавить(Задание.Метод);
		Параметры.Добавить(Задание.Параметры);
		
		ФоновыеЗадания.Выполнить(ПараметрыЗадания.ИмяМетода, Параметры, Задание.Метод,
			НСтр("ru = 'Переход. Обработка'")+ ": " + Задание.Метод);
					
	КонецЦикла;
	
	Возврат ВсеОбработано;
	
КонецФункции

// Выполнить задание.
// 
// Параметры:
//  Метод Метод
//  ПараметрыСтрокой Параметры строкой
Процедура ВыполнитьЗадание(Метод, ПараметрыСтрокой) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПараметрыСтрокой) Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(ПараметрыСтрокой);
		Параметры = СериализаторXDTO.ПрочитатьJSON(Чтение);
		Если ТипЗнч(Параметры) <> Тип("Массив") Тогда
			Параметры = Новый Массив;
			Параметры.Добавить(СериализаторXDTO.ПрочитатьJSON(Чтение));
		КонецЕсли;
		Чтение.Закрыть();
	Иначе
		Параметры = Неопределено;
	КонецЕсли;
	
	МоментНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Попытка
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(Метод, Параметры);
				
		Пока ТранзакцияАктивна() Цикл
			ЗафиксироватьТранзакцию();
		КонецЦикла;
		
	Исключение
		
		Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Пока ТранзакцияАктивна() Цикл
			Попытка
				ОтменитьТранзакцию();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		МиграцияДанныхИзВнешнихСистемСервер.Журналировать(СобытиеЗадание(), Причина, Истина, Метод);
		
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Период КАК Период,
	|	Т.Момент КАК Момент,
	|	Т.Сеанс КАК Сеанс,
	|	Т.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания КАК Т
	|ГДЕ
	|	Т.Событие = &Событие
	|	И Т.Источник = &Метод
	|	И Т.Ключ ПОДОБНО &Параметр
	|	И Т.Принято = ЛОЖЬ
	|	И Т.Ошибка = ЛОЖЬ
	|	И Т.Момент <= &Момент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Момент УБЫВ");
	Запрос.УстановитьПараметр("Событие", СобытиеЗадание());
	Запрос.УстановитьПараметр("Метод", Метод);
	Запрос.УстановитьПараметр("Параметр", ПараметрыСтрокой);
	Запрос.УстановитьПараметр("Момент", МоментНачала);
	
	Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания.СоздатьНаборЗаписей();
	
	ТекДата = ТекущаяДатаСеанса();
	Н = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Для Каждого Поле Из Набор.Отбор Цикл
			Поле.Установить(Выборка[Поле.Имя]);
		КонецЦикла;
		Набор.Прочитать();
		Если Набор.Количество() > 0 Тогда
			Н = Н + 1;
			Набор[0].Принято = Истина;
			Набор[0].ГраницаПериода = ТекДата;
			Если Н = 1 Тогда
				Набор[0].Последнее = Истина;
				Набор[0].Продолжительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментНачала) / 1000;
			КонецЕсли;
			ЗаписатьСлужебныеДанные(Набор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Событие задание.
// 
// Возвращаемое значение:
//  Строка - Событие задание
Функция СобытиеЗадание() Экспорт
	
	Возврат НСтр("ru = 'Задание'");
	
КонецФункции

#КонецОбласти

#Область ОбменСВнешнимиРесурсами

// Блокировать обмен с внешними ресурсами.
// 
// Возвращаемое значение:
//  Булево - Блокировать обмен с внешними ресурсами
Функция БлокироватьОбменСВнешнимиРесурсами() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Не Константы.ВнешнийОбменВ21Завершен.Получить()
		И Константы.ЗагружатьДанныеИз21.Получить()
		И МиграцияДанныхИзВнешнихСистемСервер.ИдетЗагрузкаИзДО21();
	
КонецФункции

// При начале работы регламентного задания.
// 
// Параметры:
//  РегламентноеЗадание Регламентное задание
//  Отказ - Булево, Неопределено - Отказ
Процедура ПриНачалеРаботыРегламентногоЗадания(РегламентноеЗадание, Отказ = Неопределено) Экспорт
	
	Если Не БлокироватьОбменСВнешнимиРесурсами() Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентноеЗаданиеВыполняетОбменСВнешнимиРесурсами(РегламентноеЗадание) Тогда
		ТекстСообщения = НСтр("ru = 'Обмен с внешними ресурсами выполняется в 1С:Документооборот 2.1
			|Работа регламентного задания прекращена, проверьте выполнение регламентного задания ДО 2.1 или укажите в ДО 2.1, что обмен с внешними ресурсами выполняется в новой версии программы.'");
		РегламентныеЗаданияСервер.ОтменитьВыполнениеЗадания(РегламентноеЗадание, ТекстСообщения);
		Отказ = Истина;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Регламентное задание выполняет обмен с внешними ресурсами.
// 
// Параметры:
//  РегламентноеЗадание Регламентное задание
// 
// Возвращаемое значение:
//  Булево - Регламентное задание выполняет обмен с внешними ресурсами
Функция РегламентноеЗаданиеВыполняетОбменСВнешнимиРесурсами(РегламентноеЗадание)
	
	РегламентныеЗаданияВыполняющиеОбмен = Новый Соответствие;
	
	// Задания почты
	Для ПотокПриемаПочты = 1 По 10 Цикл
		ИмяРегЗадания = СтрШаблон("ПриемОтправкаПочты%1", ПотокПриемаПочты);
		РегламентныеЗаданияВыполняющиеОбмен.Вставить(
			Метаданные.РегламентныеЗадания[ИмяРегЗадания], Истина);
	КонецЦикла;
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ВыполнениеЗадачПоПочте, Истина);
	
	// Загрузка файлов
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ЗагрузкаФайлов, Истина);
	
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.Распознавание, Истина);
	
	// Обмен ЭДО
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ОтправкаЭлектронныхДокументов, Истина);
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ПолучениеЭлектронныхДокументов, Истина);
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭД, Истина);
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ПроверкаНовыхЭлектронныхДокументов, Истина);
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.РассылкаУведомленийОПроблемахЭДО, Истина);
	
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(
		Метаданные.РегламентныеЗадания.ПовторениеБизнесПроцессов, Истина);
	
	// МЭДО
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(Метаданные.РегламентныеЗадания.ВыполнениеОбменаМЭДО, Истина);
	
	// Обмен с 1С:Архивом
	РегламентныеЗаданияВыполняющиеОбмен.Вставить(Метаданные.РегламентныеЗадания.ОбменСАрхивом, Истина);
	
	
	Если РегламентныеЗаданияВыполняющиеОбмен.Получить(РегламентноеЗадание) = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик события "ПередЗаписью" объектов, которые могли быть загружены из внешних систем.
//
// Параметры:
//  Источник - Произвольный - источники подписки на событие МиграцияДанныхИзВнешнихСистемПередЗаписьюОбъекта.
//  Отказ - Булево - отказ от записи.
//
Процедура ПередЗаписьюОбъекта(Источник, Отказ) Экспорт
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Источник.ДополнительныеСвойства.Свойство("РазрешитьЗаписьОбъектаИзДругойСистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Источник.ИсточникДанных) Тогда
		ВызватьИсключение НСтр("ru = 'Объект, загруженный из другой системы, изменять нельзя.
							   |Обратитесь к администратору.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура МиграцияДанныхИзВнешнихСистемПередЗаписьюДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы
		Или (Источник.ДополнительныеСвойства.Свойство("ОбновлениеПоИсточнику")
			И Источник.ДополнительныеСвойства.ОбновлениеПоИсточнику) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗнч(Источник) = Тип("ДокументОбъект.ДействиеЗадачи") Или ТипЗнч(Источник) = Тип("ДокументОбъект.Задача"))
		И ПараметрыСеанса.МиграцияДанныхРазрешеноПрерываниеПроцессов Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Источник.ИсточникДанных) Тогда
		ВызватьИсключение НСтр("ru = 'Объект, загруженный из другой системы, изменять нельзя.
							   |Обратитесь к администратору.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура МиграцияДанныхИзВнешнихСистемПередЗаписьюПроцессаПередЗаписью(Источник, Отказ) Экспорт
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСеанса.МиграцияДанныхРазрешеноПрерываниеПроцессов Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Источник.ИсточникДанных) Тогда
		ВызватьИсключение НСтр("ru = 'Объект, загруженный из другой системы, изменять нельзя.
							   |Обратитесь к администратору.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура МиграцияДанныхИзВнешнихСистемПередЗаписьюЗадачиПередЗаписью(Источник, Отказ) Экспорт
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСеанса.МиграцияДанныхРазрешеноПрерываниеПроцессов Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Источник.ИсточникДанных) Тогда
		ВызватьИсключение НСтр("ru = 'Объект, загруженный из другой системы, изменять нельзя.
							   |Обратитесь к администратору.'");
	КонецЕсли;
	
КонецПроцедуры

// Записать служебные данные.
// 
// Параметры:
//  Источник - РегистрСведенийНаборЗаписей.МиграцияДанныхИзВнешнихСистемФоновыеЗадания, Неопределено - Источник
//  Замещение - Структура, Неопределено, Булево - Замещение:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
Процедура ЗаписатьСлужебныеДанные(Источник, Замещение = Неопределено) Экспорт
	
	Источник.ОбменДанными.Загрузка = Истина;
	Источник.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	Источник.ДополнительныеСвойства.Вставить("ОтключитьОтметкиВремени");
	
	Если Замещение = Ложь Тогда
		Источник.Записать(Ложь);
	Иначе
		Источник.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Журналировать.
// 
// Параметры:
//  Событие - Строка - Событие
//  Описание - Строка - Описание
//  Ошибка - Булево - Ошибка
//  Источник - Строка, Неопределено - Источник
//  НомерСообщения - Число, Неопределено - Номер сообщения
//  Ключ - Неопределено - Ключ
//  Принято - Неопределено, Булево - Принято
//  Показатели - Неопределено - Показатели
//  ИмяФайла - Строка
Процедура Журналировать(Событие, Описание = "", Ошибка = Ложь, Источник = Неопределено, 
	НомерСообщения = Неопределено,
	Ключ = Неопределено, Принято = Неопределено, Показатели = Неопределено, ИмяФайла = "") Экспорт
	
	Если Ошибка Тогда
		Если Описание = "" Тогда
			Описание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецЕсли;
			
		Если ИмяФайла <> "" Тогда
			Описание = Описание + Символы.ПС + Символы.ПС + ИмяФайла;
		КонецЕсли;

		// пишем дважды, т.к. может упасть при преобразовании в строку Ключ
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Переход'") + "." + Событие,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			Описание);
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Переход'") + "." + Событие,
			УровеньЖурналаРегистрации.Ошибка,
			,
			?(ЗначениеЗаполнено(Ключ), Ключ, Источник),
			Описание);
			
		ОбщегоНазначенияДокументооборот.УведомитьОтветственныхОПроблеме(
			Событие,
			Описание,
			НСтр("ru = 'Переход'") + "." + Событие); 
			
		Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемОшибки.СоздатьНаборЗаписей();
		
		Хеш = ХешСтроки(Описание);
		
		Набор.Отбор.Хеш.Установить(Хеш);
		
		Запись = Набор.Добавить();
		Запись.Дата = ТекущаяДатаСеанса();
		Запись.Описание = Описание;
		Запись.Источник = Источник;
		Запись.НомерСообщения = НомерСообщения;
		
		Запись.Хеш = Хеш;
		
		ЗаписатьСлужебныеДанные(Набор, Истина);  
		Возврат;
			
	КонецЕсли;      
	
	// ЖР писать
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Переход'") + "." + Событие,
		УровеньЖурналаРегистрации.Информация,
		,
		?(ЗначениеЗаполнено(Ключ), Ключ, Источник),
		Описание);
	
КонецПроцедуры

// Возвращает хеш полного пути к форме по алгоритму.
//
// Параметры:
//	ПолныйПутьКФорме - Строка - полный путь к форме.
//
// Возвращаемое значение:
//	Строка - хэш.
//
Функция ХешСтроки(Знач Описание) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(Описание);
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
КонецФункции

// Кэш настроек.
// 
// Параметры:
//  Текущие - Структура, Неопределено - Текущие:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Загружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// * КаталогИзменений 
// 
// Возвращаемое значение:
//  Неопределено, Структура - Кэш настроек:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Загружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// * КаталогИзменений 
Функция КэшНастроек(Текущие = Неопределено) Экспорт
	
	Если Текущие = Неопределено Тогда
		Кэш = Новый Структура;
		Кэш.Вставить("Поток", 0);
		Кэш.Вставить("ИОМ", Новый Соответствие);
		Кэш.Вставить("Переименования", МиграцияДанныхИзВнешнихСистемДО21.ПереименованныеОбъекты());
		Кэш.Вставить("УдаленныеОбъекты", МиграцияДанныхИзВнешнихСистемДО21.УдаленныеОбъекты());
		Кэш.Вставить("УзелИсточник",
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Подсистемы.НастройкаИАдминистрирование.Подсистемы.МиграцияДанныхИзВнешнихСистем));
	Иначе
		Кэш = Текущие;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	""Стадия"" КАК Имя,
	|	Т.Значение КАК Значение
	|ИЗ
	|	Константа.ПереходСтадия КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Каталог"",
	|	Т.Значение
	|ИЗ
	|	Константа.ПереходКаталог КАК Т");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Кэш.Вставить(Выборка.Имя, Выборка.Значение);
	КонецЦикла;
	
	Кэш.Вставить("Загружать", Кэш.Стадия = 3);
	Кэш.Вставить("Слэш", ?(Найти(Кэш.Каталог, "/"), "/", "\"));
	Кэш.Вставить("КаталогВыгрузки", Кэш.Каталог + Кэш.Слэш);	
	Кэш.Вставить("КаталогИзменений", Кэш.Каталог + Кэш.Слэш + "0" + Кэш.Слэш);
		
	Возврат Кэш;
	
КонецФункции

// Заполнить режим записи.
// 
// Параметры:
//  Источник Источник
Процедура ЗаполнитьРежимЗаписи(Источник) Экспорт
	
	Источник.ОбменДанными.Загрузка = Истина;
	Источник.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	Источник.ДополнительныеСвойства.Вставить("ПереходОтключитьМеханизмРегистрации");
	
КонецПроцедуры

// Это ссылочный объект.
// 
// Параметры:
//  Метаданное - ОбъектМетаданных - Метаданное
// 
// Возвращаемое значение:
//  Булево - Это ссылочный объект
Функция ЭтоСсылочныйОбъект(Метаданное) Экспорт
	
	Попытка
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Метаданное, "СтандартныеРеквизиты") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого Реквизит Из Метаданное.СтандартныеРеквизиты Цикл
			Если Реквизит.Имя = "ИмяПредопределенныхДанных" Или Реквизит.Имя = "Ссылка" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

// Класс объекта в число.
// 
// Параметры:
//  Имя - Строка - Имя
// 
// Возвращаемое значение:
//  Строка - Класс объекта в число
Функция КлассОбъектаВЧисло(Имя) Экспорт
	
	Начало = СтрРазделить(Имя, ".")[0];
	
	Если Начало = "Справочник" Тогда
		Возврат "1";
		
	ИначеЕсли Начало = "Документ" Тогда
		Возврат "2";
		
	ИначеЕсли Начало = "БизнесПроцесс" Тогда
		Возврат "3";
		
	ИначеЕсли Начало = "Задача" Тогда
		Возврат "4";
		
	ИначеЕсли Начало = "Перечисление" Тогда
		Возврат "5";
		
	ИначеЕсли Начало = "ПланВидовХарактеристик" Тогда
		Возврат "6";
		
	ИначеЕсли Начало = "ПланСчетов" Тогда
		Возврат "7";
			
	ИначеЕсли Начало = "ПланВидовРасчетов" Тогда
		Возврат "8";
			
	ИначеЕсли Начало = "ПланОбмена" Тогда
		Возврат "9";
		
	ИначеЕсли Начало = "Константа" Тогда
		Возврат "10";
		
	ИначеЕсли Начало = "РегистрСведений" Тогда
		Возврат "11";
		
	ИначеЕсли Начало = "РегистрНакопления" Тогда
		Возврат "12";
		
	ИначеЕсли Начало = "РегистрБухгалтерии" Тогда
		Возврат "13";
		
	ИначеЕсли Начало = "РегистрРасчетов" Тогда
		Возврат "14";
		
	Иначе
		Возврат "0";
		
	КонецЕсли;
	
КонецФункции

// Класс объекта из числа.
// 
// Параметры:
//  Код - Строка - Код
// 
// Возвращаемое значение:
//  Строка - Класс объекта из числа
Функция КлассОбъектаИзЧисла(Код) Экспорт
	
	Если Код = "1" Тогда
		Возврат "Справочник";
		
	ИначеЕсли Код = "2" Тогда
		Возврат "Документ";
		
	ИначеЕсли Код = "3" Тогда
		Возврат "БизнесПроцесс";
		
	ИначеЕсли Код = "4" Тогда
		Возврат "Задача";
		
	ИначеЕсли Код = "5" Тогда
		Возврат "Перечисление";
		
	ИначеЕсли Код = "6" Тогда
		Возврат "ПланВидовХарактеристик";
		
	ИначеЕсли Код = "7" Тогда
		Возврат "ПланСчетов";
			
	ИначеЕсли Код = "8" Тогда
		Возврат "ПланВидовРасчетов";
		
	ИначеЕсли Код = "9" Тогда
		Возврат "ПланОбмена";
		
	ИначеЕсли Код = "10" Тогда
		Возврат "Константа";
		
	ИначеЕсли Код = "11" Тогда
		Возврат "РегистрСведений";
		
	ИначеЕсли Код = "12" Тогда
		Возврат "РегистрНакопления";
		
	ИначеЕсли Код = "13" Тогда
		Возврат "РегистрБухгалтерии";
		
	ИначеЕсли Код = "14" Тогда
		Возврат "РегистрРасчетов";
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Класс объекта из XMLТипа.
// 
// Параметры:
//  Тип - Строка - Тип
// 
// Возвращаемое значение:
//  Строка - Класс объекта из XMLТипа
Функция КлассОбъектаИзXMLТипа(Тип) Экспорт
	
	Если Тип = "CatalogRef" Тогда
		Возврат "Справочник";	
		
	ИначеЕсли Тип = "EnumRef" Тогда
		Возврат "Перечисление";
		
	ИначеЕсли Тип = "DocumentRef" Тогда
		Возврат "Документ";
		
	ИначеЕсли Тип = "BusinessProcessRef" Тогда
		Возврат "БизнесПроцесс";
		
	ИначеЕсли Тип = "TaskRef" Тогда
		Возврат "Задача";
		
	ИначеЕсли Тип = "ChartOfCharacteristicTypesRef" Тогда
		Возврат "ПланВидовХарактеристик";
		
	ИначеЕсли Тип = "BusinessProcessRoutePointRef" Тогда
		Возврат "ТочкаМаршрутаБизнесПроцесса";
	
	КонецЕсли;

	
КонецФункции

// Класс объекта ВXMLТип.
// 
// Параметры:
//  Класс - Строка - Класс
// 
// Возвращаемое значение:
//  Строка - Класс объекта ВXMLТип
Функция КлассОбъектаВXMLТип(Класс) Экспорт
	
	Если Класс = "Справочник" Тогда
		Возврат "CatalogRef";	
		
	ИначеЕсли Класс = "Перечисление" Тогда
		Возврат "EnumRef";
		
	ИначеЕсли Класс = "Документ" Тогда
		Возврат "DocumentRef";
		
	ИначеЕсли Класс = "БизнесПроцесс" Тогда
		Возврат "BusinessProcessRef";
		
	ИначеЕсли Класс = "Задача" Тогда
		Возврат "TaskRef";
		
	ИначеЕсли Класс = "ПланВидовХарактеристик" Тогда
		Возврат "ChartOfCharacteristicTypesRef";
		
	ИначеЕсли Класс = "ТочкаМаршрутаБизнесПроцесса" Тогда
		Возврат "BusinessProcessRoutePointRef";
	
	КонецЕсли;

	
КонецФункции

// Найти реквизит метаданных.
// 
// Параметры:
//  Метаданное Метаданное
//  Имя - Строка - Имя
//  ВключаяТаблицы - Булево - Включая таблицы
// 
// Возвращаемое значение:
//  
Функция НайтиРеквизитМетаданных(Метаданное, Имя, ВключаяТаблицы = Ложь) Экспорт
	
	Поле = Метаданное.Реквизиты.Найти(Имя);
	Если Поле <> Неопределено Тогда
		Возврат Поле;
	КонецЕсли;
	
	ЕстьСсылка = Ложь;
	Для Каждого Поле Из Метаданное.СтандартныеРеквизиты Цикл
		Если НРег(Поле.Имя) = НРег(Имя) Тогда
			Возврат Поле;
		ИначеЕсли Поле.Имя = "Ссылка" Тогда
			ЕстьСсылка = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Если ЕстьСсылка Тогда
		
		Если Метаданные.Задачи.Содержит(Метаданное) Тогда
			Поле = Метаданное.РеквизитыАдресации.Найти(Имя);
			Если Поле <> Неопределено Тогда
				Возврат Поле;
			КонецЕсли;
		КонецЕсли;
		
		Если ВключаяТаблицы Тогда
			Поле = Метаданное.ТабличныеЧасти.Найти(Имя);
			Если Поле <> Неопределено Тогда
				Возврат Поле;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Поле = Метаданное.Измерения.Найти(Имя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
		
		Поле = Метаданное.Ресурсы.Найти(Имя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Имя объекта по XMLТипу.
// 
// Параметры:
//  Тип Тип
// 
// Возвращаемое значение:
//  Строка - Имя объекта по XMLТипу
Функция ИмяОбъектаПоXMLТипу(Тип) Экспорт
	
	Путь = СтрРазделить(Тип, ".");
	
	Если Путь[0] = "CatalogRef" Тогда
		Возврат "Справочник." + Путь[1];	
		
	ИначеЕсли Путь[0] = "EnumRef" Тогда
		Возврат "Перечисление." + Путь[1];
		
	ИначеЕсли Путь[0] = "DocumentRef" Тогда
		Возврат "Документ." + Путь[1];
		
	ИначеЕсли Путь[0] = "BusinessProcessRef" Тогда
		Возврат "БизнесПроцесс." + Путь[1];
		
	ИначеЕсли Путь[0] = "TaskRef" Тогда
		Возврат "Задача." + Путь[1];
		
	ИначеЕсли Путь[0] = "ChartOfCharacteristicTypesRef" Тогда
		Возврат "ПланВидовХарактеристик." + Путь[1];
		
	КонецЕсли;

	
КонецФункции

// ИОМ.
// 
// Параметры:
//  ПолноеИмя - Строка, Произвольный - Полное имя
//  Кэш - Соответствие - Кэш
// 
// Возвращаемое значение:
//  СправочникСсылка.ИдентификаторыОбъектовМетаданных, Произвольный, СправочникСсылка.ИдентификаторыОбъектовРасширений, Null - ИОМ
Функция ИОМ(ПолноеИмя, Кэш) Экспорт
	
	//Оболочка для обхода тормозов поиска отсутсвующего ИОМ.
	Ссылка = Кэш.Получить(ПолноеИмя);
	Если Ссылка <> Неопределено Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Ссылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя, Ложь);
	
	Кэш.Вставить(ПолноеИмя, Ссылка);
	
	Возврат Ссылка;
	
КонецФункции

// Метаданные найти по типу значения.
// 
// Параметры:
//  Тип Тип
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Метаданные найти по типу значения:
// * Объект 
// * Реквизит 
// * Таблица 
Функция МетаданныеНайтиПоТипуЗначения(Тип) Экспорт
	
	ЭтоМассив = ТипЗнч(Тип) = Тип("Массив");
		
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Объект");
	Результат.Колонки.Добавить("Реквизит");
	Результат.Колонки.Добавить("Таблица");
	
	Для Каждого Поле Из Метаданные.Константы Цикл
		Если ЭтоМассив Тогда
			Есть = Ложь;
			Для Каждого Эл Из Тип Цикл
				Если Поле.Тип.СодержитТип(Эл) Тогда
					Есть = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не Есть Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли Не Поле.Тип.СодержитТип(Тип) Тогда
			Продолжить;	
		КонецЕсли;
		Запись = Результат.Добавить();
		Запись.Объект = Поле;
		Запись.Реквизит = "Значение";
	КонецЦикла;
	
	Классы = Новый Массив;
	Классы.Добавить(Метаданные.Справочники);
	Классы.Добавить(Метаданные.Документы);
	Классы.Добавить(Метаданные.БизнесПроцессы);
	Классы.Добавить(Метаданные.Задачи);
	Классы.Добавить(Метаданные.ПланыОбмена);
	Классы.Добавить(Метаданные.ПланыВидовХарактеристик);
	Классы.Добавить(Метаданные.ПланыСчетов);
	Классы.Добавить(Метаданные.ПланыВидовРасчета);
	Группы = Новый Массив;
		
	Для Каждого Класс Из Классы Цикл
		Для Каждого Метаданное Из Класс Цикл
			
			Группы.Очистить();
			Группы.Добавить(Метаданное.СтандартныеРеквизиты);
			Если Класс = Метаданные.Задачи Тогда
				Группы.Добавить(Метаданное.РеквизитыАдресации);
			КонецЕсли;
			Группы.Добавить(Метаданное.Реквизиты);
			
			Для Каждого Группа Из Группы Цикл
				Для Каждого Поле Из Группа Цикл
					Если ЭтоМассив Тогда
						Есть = Ложь;
						Для Каждого Эл Из Тип Цикл
							Если Поле.Тип.СодержитТип(Эл) Тогда
								Есть = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не Есть Тогда
							Продолжить;
						КонецЕсли;
					ИначеЕсли Не Поле.Тип.СодержитТип(Тип) Тогда
						Продолжить;	
					КонецЕсли;
					Запись = Результат.Добавить();
					Запись.Объект = Метаданное;
					Запись.Реквизит = Поле.Имя;	
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Т Из Метаданное.ТабличныеЧасти Цикл
				Для Каждого Поле Из Т.Реквизиты Цикл
					Если ЭтоМассив Тогда
						Есть = Ложь;
						Для Каждого Эл Из Тип Цикл
							Если Поле.Тип.СодержитТип(Эл) Тогда
								Есть = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не Есть Тогда
							Продолжить;
						КонецЕсли;
					ИначеЕсли Не Поле.Тип.СодержитТип(Тип) Тогда
						Продолжить;	
					КонецЕсли;
					Запись = Результат.Добавить();
					Запись.Объект = Метаданное;
					Запись.Реквизит = Поле.Имя;
					Запись.Таблица = Т.Имя;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Классы = Новый Массив;	
	Классы.Добавить(Метаданные.РегистрыСведений);
	Классы.Добавить(Метаданные.РегистрыНакопления);
	Классы.Добавить(Метаданные.РегистрыБухгалтерии);
	Классы.Добавить(Метаданные.РегистрыРасчета);
	
	Для Каждого Класс Из Классы Цикл
		Для Каждого Метаданное Из Класс Цикл
			
			Группы.Очистить();
			Группы.Добавить(Метаданное.СтандартныеРеквизиты);
			Группы.Добавить(Метаданное.Измерения);
			Группы.Добавить(Метаданное.Ресурсы);
			Группы.Добавить(Метаданное.Реквизиты);
					
			Для Каждого Группа Из Группы Цикл
				Для Каждого Поле Из Группа Цикл
					Если ЭтоМассив Тогда
						Есть = Ложь;
						Для Каждого Эл Из Тип Цикл
							Если Поле.Тип.СодержитТип(Эл) Тогда
								Есть = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не Есть Тогда
							Продолжить;
						КонецЕсли;
					ИначеЕсли Не Поле.Тип.СодержитТип(Тип) Тогда
						Продолжить;	
					КонецЕсли;
					Запись = Результат.Добавить();
					Запись.Объект = Метаданное;
					Запись.Реквизит = Поле.Имя;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Классы.Очистить();
	Группы.Очистить();
	
	Возврат Результат;
	
КонецФункции

// Установить использование заданий.
// 
// Параметры:
//  Использование - Булево - Использование
Процедура УстановитьИспользованиеЗаданий(Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Событие = НСтр("ru = 'Приостановка заданий'");
	
	Если Использование Тогда   
		
		ИменаОстановленныхРегламентныхЗаданий = Константы.МиграцияДанныхИзВнешнихСистемИменаОстановленныхРегламентныхЗаданий.Получить();
		
		Для Каждого ИД Из СтрРазделить(ИменаОстановленныхРегламентныхЗаданий, ";", Ложь) Цикл
			Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИД));
			Если Задание <> Неопределено И Задание.Использование = Ложь Тогда
				Задание.Использование = Истина;
				Задание.Записать();	
			КонецЕсли;
		КонецЦикла;
		
		РегламентныеЗаданияСлужебный.УстановитьИспользованиеРегламентныхЗаданийПоФункциональнымОпциям(Истина);
		
	Иначе
		НачатьТранзакцию();
			
		Попытка
			
			Представление = Новый Массив;
			ИД = Новый Массив;
			Для Каждого Задание Из РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Использование", Истина)) Цикл
				Если Задание.Метаданные <> Метаданные.РегламентныеЗадания.МиграцияДанныхИзВнешнихСистемЗагрузка Тогда
					Задание.Использование = Ложь;
					Задание.Записать();
					
					Представление.Добавить(?(ПустаяСтрока(Задание.Наименование), Строка(Задание.Метаданные), Задание.Наименование));
					ИД.Добавить(Задание.УникальныйИдентификатор);
				КонецЕсли;
			КонецЦикла;
			
			Если ИД.Количество() Тогда    
				
				ИменаОстановленныхРегламентныхЗаданий = СтрСоединить(ИД, ";");
				Константы.МиграцияДанныхИзВнешнихСистемИменаОстановленныхРегламентныхЗаданий.Установить(ИменаОстановленныхРегламентныхЗаданий);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры

// Установить использование задания.
// 
// Параметры:
//  Использование - Булево - Использование
Процедура УстановитьИспользованиеЗадания(Использование) Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.МиграцияДанныхИзВнешнихСистемЗагрузка);
	Если Задание.Использование <> Использование Тогда
		Задание.Использование = Использование;
		Задание.Записать();
	КонецЕсли;

	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.РазборОчередиПостобработки);
	Если Задание.Использование <> Использование Тогда
		Задание.Использование = Использование;
		Задание.Записать();
	КонецЕсли;

	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбновлениеКэширующихДанных);
	Задание.Использование = Истина;
	Задание.Записать();
	
КонецПроцедуры

// Новая таблица замены.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица замены:
// * СтароеТип 
// * Старое 
// * Новое 
// * Реквизиты 
Функция НоваяТаблицаЗамены()
	
	Замены = Новый ТаблицаЗначений;
	Замены.Колонки.Добавить("СтароеТип");
	Замены.Колонки.Добавить("Старое");
	Замены.Колонки.Добавить("Новое");
	Замены.Колонки.Добавить("Реквизиты");
	Возврат Замены;
	
КонецФункции

// Журналировать коллизию.
// 
// Параметры:
//  Изменение - СтрокаТаблицыЗначений, Неопределено - Изменение
//  Источник - СтрокаТаблицыЗначений, Произвольный - Источник
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Загружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
// Метаданное - метаданное
// ПоляИсключения - Соответствие, Неопределено
Процедура ЖурналироватьКоллизию(Изменение, Источник, Настройки, Метаданное,
	ПоляИсключения = Неопределено) Экспорт
	
	Значения = Новый Структура("Событие,Источник,Изменения,Ошибка",
		НСтр("ru = 'Коллизия'"), Настройки.Сообщение.ИмяИсточника, Настройки.Сообщение.ЭтоИзменения, Ложь);
		
	Если Не ЗначениеЗаполнено(Изменение.Ключ) Тогда	      
		Значения.Вставить("Ключ", "");
	ИначеЕсли ТипЗнч(Изменение.Ключ) = Тип("УникальныйИдентификатор") Тогда
		Значения.Вставить("Ключ", Строка(Изменение.Ключ));
	Иначе
		Значения.Вставить("Ключ", XMLСтрока(Изменение.Ключ));
	КонецЕсли;
	
	Если Изменение.Коллизия = 1 Тогда
		Причина = НСтр("ru = 'Ранее была Загружена более актуальная версия'");
	Иначе
		Причина = НСтр("ru = 'Объект был изменен в этой базе'");
	КонецЕсли;
	
	// пишем в ЖР
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Переход.ЖурналироватьКоллизию'"),
		УровеньЖурналаРегистрации.Предупреждение,
		,
		,
		Причина + " " + Значения.Ключ);
	
КонецПроцедуры

// Идет загрузка из д о21.
// 
// Возвращаемое значение:
//  
Функция ИдетЗагрузкаИзДО21() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Каталог = Константы.ПереходКаталог.Получить();
	Если Не ЗначениеЗаполнено(Каталог) Тогда
		Возврат Ложь;
	КонецЕсли;	

	Если Константы.ПереходСтадия.Получить() >= 3 Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

Процедура МиграцияДанныхИзВнешнихСистемПриКопированииПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Источник.ИсточникДанных = Неопределено; //очищаем Источник при копировании 
	
КонецПроцедуры

// Это объект из другой системы
// 
// Параметры:
//  ИсточникДанных  - СправочникССылка.ИсточникиДанных
// 
// Возвращаемое значение:
//  Булево - Это объект из другой системы
Функция ЭтоОбъектИзДругойСистемы(ИсточникДанных) Экспорт
	
	Если Не ЗначениеЗаполнено(ИсточникДанных) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат ОбщегоНазначенияДокументооборотПовтИсп.ИсточникАктивен(ИсточникДанных);
	
КонецФункции	

// Объект имеет реквизит ИсточникДанных
// 
// Параметры:
//  ОбъектССылка - ЛюбаяССылка или Объект ссылочного типа
// 
// Возвращаемое значение:
// Булево
//  
Функция ОбъектИмеетРеквизитИсточникДанных(ОбъектССылка) Экспорт
	
	МетаданныеОбъекта = ОбъектССылка.Метаданные();
	
	// у всех бизнес процессов есть локальный реквизит ИсточникДанных, для обхода ошибки платформы
	Если ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъекта) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	МетаданноеОбщийРеквизит = Метаданные.ОбщиеРеквизиты.ИсточникДанных;
		
	Поле = МетаданноеОбщийРеквизит.Состав.Найти(МетаданныеОбъекта);
	
	Если Поле = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если Поле.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

// Это объект из другой системы
// 
// Параметры:
//  ОбъектССылка  - ЛюбаяССылка
// 
// Возвращаемое значение:
//  Булево - Это объект из другой системы
Функция ЭтоОбъектИзДругойСистемыСПроверкой(ОбъектССылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбъектИмеетРеквизитИсточникДанных(ОбъектССылка) Тогда
		Возврат Ложь;
	КонецЕсли;	

	ИсточникДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектССылка, "ИсточникДанных");
	
	Если Не ЗначениеЗаполнено(ИсточникДанных) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат ОбщегоНазначенияДокументооборотПовтИсп.ИсточникАктивен(ИсточникДанных);
	
КонецФункции	

// Выводит декорацию с признаком загрузки из другой системы, если объект был загружен.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма загруженного объекта.
//  ИмяОбъекта - Строка - Имя объекта
//
Процедура ВывестиДекорациюЗагрузкиИзДругойСистемы(Форма, ИмяОбъекта) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных) Тогда
		Элементы.НеРедактируетсяОписание.Заголовок = СтрШаблон( 
			НСтр("ru = '%1 из сторонней системы, редактирование запрещено.'"),
			ИмяОбъекта);
		Элементы.ГруппаНеРедактируется.Видимость = Истина;
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Установить у источник реквизит Активен.
// 
// Параметры:
//  Активен - Булево
Процедура УстановитьИсточникАктивен(Активен) Экспорт
	
	СпрОбъект = Справочники.ИсточникиДанных.ДО21.ПолучитьОбъект();
	СпрОбъект.Активен = Активен;	
	СпрОбъект.Записать();
	
КонецПроцедуры

// Заполнить кеш метаданных.
// 
// Параметры:
//  Метаданное - ОбъектМетаданных - Метаданное
//  Порция - Произвольный - Порция
//  Настройки - Структура, Неопределено - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Загружать - Булево -
// * Слэш - Строка -
// * КаталогВыгрузки 
//  ИмяОбъекта - Строка, Произвольный - Имя объекта
// 
// Возвращаемое значение:
//  Структура - Заполнить кеш метаданных:
// * ИмяОбъектаДляКешаМетаданных - Строка, Произвольный -
// * ЕстьПредопределенные - Булево -
// * Метаданное - ОбъектМетаданных -
// * ЕстьУдаление - Булево -
// * ЕстьГруппа - Булево -
// * МетодСоздания - Число -
// * Менеджер - СправочникМенеджерИмяСправочника, ПланВидовХарактеристикМенеджерИмяПланаВидовХарактеристик, БизнесПроцессМенеджерИмяБизнесПроцесса, ЗадачаМенеджерИмяЗадачи, ДокументМенеджерИмяДокумента -
// * Кроме - Строка -
// * ЕстьТаблицы - Булево -
// * Таблицы - Массив -
// * ЕстьПользовательИБ - Булево -
Функция ЗаполнитьКешМетаданных(Метаданное, Порция, Настройки, ИмяОбъекта)
	
	ЕстьУдаление = Порция.Колонки.Найти("_Удаление") <> Неопределено;
	
	ИмяОбъектаДляКешаМетаданных = ИмяОбъекта;
	Кроме = " Ссылка,";
	ЕстьГруппа = Ложь;
	МетодСоздания = Неопределено;
	Если Метаданные.Справочники.Содержит(Метаданное) Тогда
		ЕстьГруппа = Метаданное.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
			И Порция.Колонки.Найти("ЭтоГруппа") <> Неопределено;
		МетодСоздания = 1;
		Менеджер = Справочники[Метаданное.Имя];
		Если ЕстьГруппа Тогда
			Кроме = Кроме + " ЭтоГруппа,";
		КонецЕсли;
		
		Если Метаданное.ДлинаКода <> 0 И Не Настройки.Свойство("ОставитьКод") Тогда
			Кроме = Кроме + " Код,";
		КонецЕсли;	
		
		Если Метаданное.Иерархический = Ложь 
			И Порция.Колонки.Найти("Родитель") <> Неопределено Тогда
				// в 2.1 есть иерархия, в 3.0 -нет.
				Кроме = Кроме + " Родитель,";
		КонецЕсли;		
		
	ИначеЕсли Метаданные.Документы.Содержит(Метаданное) Тогда
		МетодСоздания = 2;
		Менеджер = Документы[Метаданное.Имя];
		
		Если Метаданное.ДлинаНомера <> 0 Тогда
			Кроме = Кроме + " Номер,";
		КонецЕсли;	
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(Метаданное) Тогда
		МетодСоздания = 3;
		Менеджер = БизнесПроцессы[Метаданное.Имя];
		
		Если Метаданное.ДлинаНомера <> 0 Тогда
			Кроме = Кроме + " Номер,";
		КонецЕсли;	
		
	ИначеЕсли Метаданные.Задачи.Содержит(Метаданное) Тогда
		МетодСоздания = 4;
		Менеджер = Задачи[Метаданное.Имя];
		
		Если Метаданное.ДлинаНомера <> 0 Тогда
			Кроме = Кроме + " Номер,";
		КонецЕсли;	
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(Метаданное) Тогда
		МетодСоздания = 1;
		ЕстьГруппа = Порция.Колонки.Найти("ЭтоГруппа") <> неопределено;
		Менеджер = ПланыВидовХарактеристик[Метаданное.Имя];
		//Переименование ссылочных типов.
		Новые = Новый Массив; 
		Т = Новый ТаблицаЗначений;
		Для Каждого Источник Из Порция Цикл
			Если ЗначениеЗаполнено(Источник._ТипЗначения_СсылочныеОбъекты) Тогда
				
				Для Каждого Поле Из Источник._ТипЗначения_СсылочныеОбъекты Цикл
					НовоеИмя = Настройки.Переименования.Получить(Поле);
					Если НовоеИмя = Null Тогда
						Продолжить;
					ИначеЕсли НовоеИмя = Неопределено Тогда
						НовоеИмя = Поле;
					КонецЕсли;
					Если Метаданные.НайтиПоПолномуИмени(НовоеИмя) = Неопределено Тогда
						ВызватьИсключение НСтр("ru = 'Тип значения отсутствует в новой конфигурации'") + ": " + НовоеИмя;
					КонецЕсли;
					Новые.Добавить(Тип(СтрЗаменить(НовоеИмя, ".", "Ссылка.")));
				КонецЦикла;
				Источник.ТипЗначения = Новый ОписаниеТипов(Источник.ТипЗначения, Новые);
				
				Новые.Очистить();
				Источник._ТипЗначения_СсылочныеОбъекты.Очистить();
				Источник._ТипЗначения_СсылочныеОбъекты = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Если Метаданное.ДлинаКода <> 0 Тогда
			Кроме = Кроме + " Код,";
		КонецЕсли;	
				    		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(Метаданное) Тогда
		МетодСоздания = 5;
		Менеджер = ПланыОбмена[Метаданное.Имя];
		
		Кроме = Кроме + " НомерОтправленного, НомерПринятого, ЭтотУзел,"; // Код
		
		Если Метаданное.ДлинаКода <> 0 Тогда
			Кроме = Кроме + " Код,"; // Код
		КонецЕсли;	
				    			
	Иначе
		//!!! Остальные классы
	КонецЕсли;
	
	Если МетодСоздания = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не задан МетодСоздания'");
	КонецЕсли;		
	
	ЕстьРодитель = Ложь;
	ЕстьПредопределенные = Ложь;
	Для Каждого Поле Из Метаданное.СтандартныеРеквизиты Цикл
		Если Поле.Имя = "Родитель" Тогда
			ЕстьРодитель = Порция.Колонки.Найти(Поле.Имя) <> Неопределено;
		ИначеЕсли Поле.Имя = "ИмяПредопределенныхДанных" Тогда
			ЕстьПредопределенные = Порция.Колонки.Найти(Поле.Имя) <> неопределено
				И Метаданное.ПолучитьИменаПредопределенных().Количество();
			Если ЕстьПредопределенные Тогда
				Кроме = Кроме + " ИмяПредопределенныхДанных,";
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	ЕстьТаблицы = Ложь; 
	Если Метаданное.ТабличныеЧасти.Количество() Тогда
		Таблицы = Новый Массив;
		Для Каждого ТЧ Из Метаданное.ТабличныеЧасти Цикл
			//Если Порция.Колонки.Найти(ТЧ.Имя) <> Неопределено Тогда
				Таблицы.Добавить(ТЧ.Имя);
				ЕстьТаблицы = Истина;
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЕстьПользовательИБ = Ложь;
	Если Метаданное = Метаданные.Справочники.Пользователи
		Или Метаданное = Метаданные.Справочники.ВнешниеПользователи Тогда
		ЕстьПользовательИБ = Порция.Колонки.Найти("_ДанныеПользователяИБ") <> Неопределено;
		Если Порция.Колонки.Найти("ИдентификаторПользователяИБ") <> Неопределено Тогда
			Кроме = Кроме + " ИдентификаторПользователяИБ,";
		КонецЕсли;
	КонецЕсли;
	
	Кроме = НРег(Кроме);
	
	ПоляИсключения = Новый Соответствие();
	Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если Реквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			ПоляИсключения.Вставить(Реквизит.Имя, 1);
		КонецЕсли;
		
		Поле = Реквизит.Состав.Найти(Метаданное);
		Если Поле = Неопределено
			Или Поле.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
			Или (Поле.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто 
				И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			ПоляИсключения.Вставить(Реквизит.Имя, 1);
		КонецЕсли;
		
	КонецЦикла;
		
	ПараметрыМетаданного = Новый Структура;
	ПараметрыМетаданного.Вставить("ИмяОбъектаДляКешаМетаданных", ИмяОбъектаДляКешаМетаданных);
	ПараметрыМетаданного.Вставить("ЕстьПредопределенные", ЕстьПредопределенные);
	ПараметрыМетаданного.Вставить("Метаданное", Метаданное);
	ПараметрыМетаданного.Вставить("ЕстьУдаление", ЕстьУдаление);
	ПараметрыМетаданного.Вставить("ЕстьГруппа", ЕстьГруппа);
	ПараметрыМетаданного.Вставить("МетодСоздания", МетодСоздания);
	ПараметрыМетаданного.Вставить("Менеджер", Менеджер);
	ПараметрыМетаданного.Вставить("Кроме", Кроме);
	ПараметрыМетаданного.Вставить("ЕстьТаблицы", ЕстьТаблицы);
	ПараметрыМетаданного.Вставить("Таблицы", Таблицы);
	ПараметрыМетаданного.Вставить("ЕстьПользовательИБ", ЕстьПользовательИБ);
	ПараметрыМетаданного.Вставить("ПоляИсключения", ПоляИсключения);

	Возврат ПараметрыМетаданного;	
	
КонецФункции	

// Заменить значения.
// 
// Параметры:
//  Метаданное - Неопределено, ОбъектМетаданных - Метаданное
//  Порция - Произвольный - Порция
//  Замены - ТаблицаЗначений - Замены:
// * СтароеТип 
// * Старое 
// * Новое 
// * Реквизиты 
//  Настройки - Неопределено, Структура - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Сообщение - Структура -:
// ** НомерСообщения - Число -
// ** ИмяИсточника 
// ** ЭтоИзменения 
// ** ДатаЗагрузки - Дата -
// ** ПоследнийКлюч 
// ** Последовательность - Число -
// ** Период - Неопределено, Дата -
// ** Последнее - Булево -
Процедура ЗаменитьЗначения(Метаданное = Неопределено, Порция, Замены, Настройки)
	
	НачатьТранзакцию();
	Попытка
	
		//Замены отсутствующих типов и прочие.
		Если ЗначениеЗаполнено(Замены) Тогда
			
			МиграцияДанныхИзВнешнихСистемДО21.ЗаменитьЗначения(Метаданное, Порция, Замены, Настройки);
			
			Незаполненные = Новый Массив;
			Для Каждого Строка Из Замены Цикл
				Если Строка.Новое = Null Тогда
					Незаполненные.Добавить(Строка.СтароеТип + "." + Строка.Старое);
					
					ЗаменитьЗначение(Порция, 
						Новый ПолеКомпоновкиДанных(Строка.СтароеТип + "." + Строка.Старое), 
						Неопределено, Строка.Реквизиты);
					
				ИначеЕсли ЗначениеЗаполнено(Строка.СтароеТип) И ТипЗнч(Строка.Старое) = Тип("Строка") Тогда 
					ЗаменитьЗначение(Порция, 
						Новый ПолеКомпоновкиДанных(Строка.СтароеТип + "." + Строка.Старое), 
						Строка.Новое, Строка.Реквизиты);
				Иначе
					ЗаменитьЗначение(Порция, Строка.Старое, Строка.Новое, Строка.Реквизиты);	
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(Незаполненные) Тогда
				Причина = СтрШаблон("%1: %2",
					НСтр("ru = 'Не заполнены значения для замены'"),
					СтрСоединить(Незаполненные, "; "));

				Журналировать(НСтр("ru = 'ЗагрузитьПорцию'"), Причина, Истина, Настройки.Сообщение.ИмяИсточника, 
					Настройки.Сообщение.НомерСообщения,, Истина);
			КонецЕсли;
		КонецЕсли;
		
		//Автоматические замены ИОМ и по имени предопределенного.
		ЗаменитьСсылкиПоИмени(Порция, Настройки);
		
		Если Метаданное <> Неопределено Тогда
			МиграцияДанныхИзВнешнихСистемДО21.КонвертацияЗначений(Метаданное, Порция, Настройки);
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Заменить значение.
// 
// Параметры:
//  Порция - Произвольный - Порция
//  Старое - ПолеКомпоновкиДанных - Старое
//  Новое - Неопределено - Новое
//  Реквизиты - Неопределено - Реквизиты
Процедура ЗаменитьЗначение(Порция, Старое, Новое, Реквизиты = Неопределено)
	
	Если ЗначениеЗаполнено(Реквизиты) Тогда
		
		Для Каждого Колонка Из Порция.Колонки Цикл
			Если Не Реквизиты.Свойство(Колонка.Имя) Тогда
			ИначеЕсли Колонка.Заголовок = "*" Тогда
				//Вложенные коллекции.
				Для Каждого Строка Из Порция Цикл
					Если ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
						ЗаменитьЗначение(Строка[Колонка.Имя], Старое, Новое, Реквизиты[Колонка.Имя]);					
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				Для Каждого Строка Из Порция Цикл
					Если Строка[Колонка.Имя] = Старое Тогда
						Строка[Колонка.Имя] = Новое;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;
		КонецЦикла;
		
		
	Иначе
	
		Колонки = Порция.Колонки;
		К = Колонки.Количество()-1;
		Для Каждого Строка Из Порция Цикл
			Для Н=0 По К Цикл
				Если Строка[Н] = Старое Тогда
					Строка[Н] = Новое;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Колонка Из Колонки Цикл
			//Вложенные коллекции.
			Если Колонка.Заголовок = "*" Тогда
				Для Каждого Строка Из Порция Цикл
					Если ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
						ЗаменитьЗначение(Строка[Колонка.Имя], Старое, Новое);
					КонецЕсли;
				КонецЦикла;
				
			//!!! Остальные типы коллекций
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заменить ссылки по имени.
// 
// Параметры:
//  Порция - Произвольный - Порция
//  Настройки - Неопределено, Структура - Настройки:
// * Поток - Число -
// * ИОМ - Соответствие -
// * Переименования - Соответствие -
// * УзелИсточник - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений, Произвольный, Null -
// * Загружать - Булево -
// 
// Возвращаемое значение:
//  Неопределено, Булево - Заменить ссылки по имени
Функция ЗаменитьСсылкиПоИмени(Порция, Настройки)
	
	Результат = Неопределено;
	
	Для Каждого Колонка Из Порция.Колонки Цикл
		Если Колонка.Заголовок = "" Тогда
			Продолжить;
		ИначеЕсли Колонка.Заголовок = ".Имя" Тогда
			
			Результат = Истина;
			ИмяЗначения = Лев(Колонка.Имя, СтрДлина(Колонка.Имя)-2);
			ТипИОМ = Новый ОписаниеТипов(
				"СправочникСсылка.ИдентификаторыОбъектовМетаданных,СправочникСсылка.ИдентификаторыОбъектовРасширений");
			
			Для Каждого Строка Из Порция Цикл
				Если Не ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
					Продолжить;
				КонецЕсли;
				
				Тип = ТипЗнч(Строка[ИмяЗначения]);
				Если ТипИОМ.СодержитТип(Тип) Тогда
					//ИОМ по имени метеданного.
					НовоеИмя = Настройки.Переименования.Получить(Строка[Колонка.Имя]);
					Если НовоеИмя = Null Тогда
						Строка[ИмяЗначения] = Неопределено;
						//!!! Добавить в замены для постобработки?
					Иначе
						//!!! Заглушка
						НовоеИмя = ИОМ(?(НовоеИмя = Неопределено, Строка[Колонка.Имя], НовоеИмя), Настройки.ИОМ);
						Если НовоеИмя <> Null Тогда
							Строка[ИмяЗначения] = НовоеИмя;	
						КонецЕсли;
						//Строка[ИмяЗначения] = ИОМ(?(НовоеИмя = Неопределено, Строка[Колонка.Имя], НовоеИмя), Настройки.ИОМ);
					КонецЕсли;
					
				Иначе
					//Имя предопределенного.
								
					Попытка
						Строка[ИмяЗначения] = ПредопределенноеЗначение(Метаданные.НайтиПоТипу(Тип).ПолноеИмя() + "." + Строка[Колонка.Имя]);
					Исключение
						Журналировать(НСтр("ru = 'ЗагрузитьПорцию'"),, Истина, Настройки.Сообщение.ИмяИсточника, Настройки.Сообщение.НомерСообщения,, Истина);	
					КонецПопытки;
					
				КонецЕсли;
				
				Результат = Истина;
			КонецЦикла;
			
		ИначеЕсли Колонка.Заголовок = "*" Тогда
			Для Каждого Строка Из Порция Цикл
				Если ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
					Если ЗаменитьСсылкиПоИмени(Строка[Колонка.Имя], Настройки) = Неопределено Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие активного фонового задания по его ключу.
//
// Параметры:
//  КлючЗадания - Строка - ключ задания.
//
// Возвращаемое значение:
//  Булево - Истина, если есть активное фоновое задание.
//
Функция ЕстьАктивноеФоновоеЗадание(КлючЗадания)
	
	Результат = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", КлючЗадания);
	НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Для Каждого ФоновоеЗадание Из НайденныеФоновыеЗадания Цикл
		
		Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			
			Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда
				//пишем в ЖР
				
				Описание = НСтр("ru = 'Состояние = '") + Строка(ФоновоеЗадание.Состояние);
				
				Описание = Описание + НСтр("ru = ' Начало = '") + Строка(ФоновоеЗадание.Начало);
				Описание = Описание + НСтр("ru = ' Конец = '") + Строка(ФоновоеЗадание.Конец);
				Описание = Описание + НСтр("ru = ' УникальныйИдентификатор = '") + Строка(ФоновоеЗадание.УникальныйИдентификатор);
				
				Если ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
					Описание = Описание + "   " + ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации(
					"ЕстьАктивноеФоновоеЗадание",
					УровеньЖурналаРегистрации.Информация,,,
					Описание);
				
			КонецЕсли;	
			
			Продолжить;
		КонецЕсли;
		
		Результат = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Запускает процедуру в фоновом задании по указанному ключу и потоку.
//
// Параметры:
//  КлючФоновогоЗадания - Строка - ключ задания.
//  ИмяПроцедуры - Строка - имя процедуры.
//
Процедура ЗапуститьФоновоеЗаданиеОтдельно(КлючФоновогоЗадания, ИмяПроцедуры)
	
	Параметры = Новый Массив;
	ЗапуститьФоновоеЗадание(КлючФоновогоЗадания, ИмяПроцедуры, Параметры);
	
КонецПроцедуры	

// Запускает процедуру в фоновом задании по указанному ключу и параметрам.
//
// Параметры:
//  КлючФоновогоЗадания - Строка - ключ задания.
//  ИмяПроцедуры - Строка - имя процедуры.
//  Параметры - Массив - параметры в процедуры.
//
Процедура ЗапуститьФоновоеЗадание(КлючФоновогоЗадания, ИмяПроцедуры, Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Массив;
	КонецЕсли;
	
	Попытка
	
		Описание = НСтр("ru = 'Запуск фонового: '") + КлючФоновогоЗадания;
			
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЗапускПотока(),
			УровеньЖурналаРегистрации.Информация,,,
			Описание);

		ФоновыеЗадания.Выполнить(ИмяПроцедуры, Параметры, КлючФоновогоЗадания, КлючФоновогоЗадания);
		
	Исключение
		
		Описание = СтрШаблон(НСтр("ru = 'Запуск фонового: %1. %2.
			|Для решения проблемы в консоли администратора (Сеансы) надо снять все сеансы фоновых заданий.
			|Если не поможет, надо остановить сервер 1С Предприятия, удалить на сервере все файлы сеансовых данных(каталог snccntx), снова запустить сервер 1С Предприятия.'"),
			КлючФоновогоЗадания,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЗапускПотока(),
			УровеньЖурналаРегистрации.Ошибка,,,
			Описание);
			
		ЛоггироватьФоновыеЗадания(КлючФоновогоЗадания);	
		
		ОбщегоНазначенияДокументооборот.ЗафиксироватьПроблему(
			НСтр("ru = 'ЗапуститьФоновоеЗадание не сработал'"),
			Описание,
			ИмяСобытияЗапускПотока());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЛоггироватьФоновыеЗадания(КлючФоновогоЗадания)
	
	ЗаписьЖурналаРегистрации(
		"ЛоггироватьФоновыеЗадания.Ключ",
		УровеньЖурналаРегистрации.Информация,,,
		КлючФоновогоЗадания);

	ВсеСеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого СеансБазы Из ВсеСеансы Цикл
		
		Описание = "СеансБазы";
			
		Описание = Описание + НСтр("ru = ' IPАдресКлиента = '") + СеансБазы.IPАдресКлиента;
		Описание = Описание + НСтр("ru = ' ИмяКомпьютера = '") + СеансБазы.ИмяКомпьютера;
		Описание = Описание + НСтр("ru = ' ИмяПриложения = '") + СеансБазы.ИмяПриложения;
		Описание = Описание + НСтр("ru = ' НачалоСеанса = '") + СеансБазы.НачалоСеанса;
		Описание = Описание + НСтр("ru = ' НомерСеанса = '") + СеансБазы.НомерСеанса;
		Описание = Описание + НСтр("ru = ' НомерСоединения = '") + СеансБазы.НомерСоединения;
		Описание = Описание + НСтр("ru = ' Пользователь = '") + СеансБазы.Пользователь;
		
		ФоновоеЗадание = СеансБазы.ПолучитьФоновоеЗадание();
		Если ФоновоеЗадание <> Неопределено Тогда
			
			Описание = Описание + Символы.ПС + Символы.ПС;
			Описание = Описание + НСтр("ru = ' ФоновоеЗадание. Состояние = '") + Строка(ФоновоеЗадание.Состояние);
			
			Описание = Описание + НСтр("ru = ' Ключ = '") + Строка(ФоновоеЗадание.Ключ);
			
			Описание = Описание + НСтр("ru = ' Начало = '") + Строка(ФоновоеЗадание.Начало);
			Описание = Описание + НСтр("ru = ' Конец = '") + Строка(ФоновоеЗадание.Конец);
			Описание = Описание + НСтр("ru = ' УникальныйИдентификатор = '") + Строка(ФоновоеЗадание.УникальныйИдентификатор);
			
			Если ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
				Описание = Описание + "   " + ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
			КонецЕсли;
			
		КонецЕсли;			
		
		ЗаписьЖурналаРегистрации(
			"ЛоггироватьФоновыеЗадания.СеансыИнформационнойБазы",
			УровеньЖурналаРегистрации.Информация,,,
			Описание);
		
	КонецЦикла;	 	
	
	НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания();
	
	Для Каждого ФоновоеЗадание Из НайденныеФоновыеЗадания Цикл
		
		Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда
			//пишем в ЖР
			
			Описание = НСтр("ru = 'Состояние = '") + Строка(ФоновоеЗадание.Состояние);
			
			Описание = Описание + НСтр("ru = ' Ключ = '") + Строка(ФоновоеЗадание.Ключ);
			
			Описание = Описание + НСтр("ru = ' Начало = '") + Строка(ФоновоеЗадание.Начало);
			Описание = Описание + НСтр("ru = ' Конец = '") + Строка(ФоновоеЗадание.Конец);
			Описание = Описание + НСтр("ru = ' УникальныйИдентификатор = '") + Строка(ФоновоеЗадание.УникальныйИдентификатор);
			
			Если ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
				Описание = Описание + "   " + ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				"ЛоггироватьФоновыеЗадания.Фоновые",
				УровеньЖурналаРегистрации.Информация,,,
				Описание);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

// Возвращает для ЖР имя события Запуск фонового.
//
Функция ИмяСобытияЗапускПотока()
	
	Возврат НСтр("ru = 'Диспетчер обработки очереди.Запуск фонового'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает имя события для жарнала регистрации.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияСвертка()
	
	Возврат НСтр("ru = 'Переход свертка'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Свертка РС МиграцияДанныхИзВнешнихСистемКоличествоЗагруженных 
//
Процедура СверткаКоличествоЗагруженных() Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСвертка(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Начало'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.День КАК День
		|ИЗ
		|	РегистрСведений.МиграцияДанныхИзВнешнихСистемКоличествоЗагруженных КАК Т
		|ГДЕ
		|	Т.День <> &ТекущийДень
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.День
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(Т.Идентификатор) > 1";	
	
	Запрос.УстановитьПараметр("ТекущийДень", НачалоДня(ТекущаяДатаСеанса()) );
	
	МассивДни = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("День");
	
	Для Каждого День Из МассивДни  Цикл
		
		ИДБлокировки = Новый УникальныйИдентификатор();
		КлючБлокировки = Новый Структура("День");     
		
		НачатьТранзакцию();
		
		Попытка     
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.МиграцияДанныхИзВнешнихСистемКоличествоЗагруженных");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("День", День);
			Блокировка.Заблокировать();
			
			
		Исключение
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
		
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ЕСТЬNULL(СУММА(Т.Загружено), 0) КАК ВсегоЗагружено
				|ИЗ
				|	РегистрСведений.МиграцияДанныхИзВнешнихСистемКоличествоЗагруженных КАК Т
				|ГДЕ
				|	Т.День = &День";	
			
			Запрос.УстановитьПараметр("День", День);
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ВсегоЗагружено = Выборка.ВсегоЗагружено;
			
			Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемКоличествоЗагруженных.СоздатьНаборЗаписей();
			
			Набор.Отбор.День.Установить(День);  
			
			//  не читаем Набор - затрем все (добавим 1 запись)
			
			Запись = Набор.Добавить();
			Запись.День = День;
			Запись.Дата = День;
			Запись.Идентификатор = Новый УникальныйИдентификатор();
			Запись.Загружено = ВсегоЗагружено;
			Запись.Источник = НСтр("ru = 'Сумма за день'");
			
			Набор.Записать(Истина); // замещать
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияСвертка(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
			
	КонецЦикла;        
	
	Константы.МиграцияДанныхИзВнешнихСистемДатаПоследнегоЗапускаСвертки.Установить(ТекущаяДатаСеанса());
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСвертка(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Конец'"));
	
КонецПроцедуры

#КонецОбласти