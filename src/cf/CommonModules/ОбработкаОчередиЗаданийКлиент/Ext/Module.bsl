///////////////////////////////////////////////////////////////////////////////////////////////
// Модуль содержит код для работы обработки заданий на клиенте
//

#Область ПрограммныйИнтерфейс

#Область СоздатьHtmlПриНачалеСогласования

// Обработает событие  Перечисления.ТипыЗаданий.СоздатьHtmlПриНачалеСогласования
// 
// Параметры:
// 	ОписаниеЗадания - Структура
// 	*Тип - ПеречислениеСсылка.ТипыЗаданий
// 	*Задание -СправочникССылка.ОчередьЗаданийДокументооборота
// 	*ПредметЗадания  -СправочникСсылка.ОбработкиОбъектов, СправочникСсылка.ДействияОзнакомления, СправочникСсылка.ДействияПодписания, СправочникСсылка.ДействияРегистрации, СправочникСсылка.ДействияСогласования, СправочникСсылка.ДействияУтверждения, ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи, ЗадачаСсылка, БизнесПроцессСсылка, Строка, СправочникСсылка.ДействияИсполнения, СправочникСсылка.ДокументыПредприятия
// 	*ПараметрыВыполнения  -Структура
// 	
// Возвращаемое значение:
// Структура
// *ЗаданиеЗавершено - Булево
// *ЗаписьЛога - Строка
// 	
Функция ОбработатьСоздатьHtmlПриНачалеСогласования(ОписаниеЗадания) Экспорт
	
	ПредметЗадания = ОписаниеЗадания.ПредметЗадания;
	ТекстДляЛога = "";
	
	ЗаданиеЗавершено = СогласованиеВРежимеЗамечанийКлиент.ПодготовитьДокументКСогласованиюИзКлиентскойОбработки(
		ПредметЗадания, ОписаниеЗадания.УникальныйИдентификатор, ТекстДляЛога);
	
	Возврат Новый Структура("ЗаданиеЗавершено, ЗаписьЛога", ЗаданиеЗавершено, ТекстДляЛога);
	
КонецФункции	

#КонецОбласти

#Область ОбновитьHtmlПередОзнакомлением

// Обработает событие  Перечисления.ТипыЗаданий.ОбновитьHtmlПередОзнакомлением
// 
// Параметры:
// 	ОписаниеЗадания - Структура
// 	*Тип - ПеречислениеСсылка.ТипыЗаданий
// 	*Задание -СправочникССылка.ОчередьЗаданийДокументооборота
// 	*ПредметЗадания  -СправочникСсылка.ОбработкиОбъектов, СправочникСсылка.ДействияОзнакомления, СправочникСсылка.ДействияПодписания, СправочникСсылка.ДействияРегистрации, СправочникСсылка.ДействияСогласования, СправочникСсылка.ДействияУтверждения, ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи, ЗадачаСсылка, БизнесПроцессСсылка, Строка, СправочникСсылка.ДействияИсполнения, СправочникСсылка.ДокументыПредприятия
// 	*ПараметрыВыполнения  -Структура
// 	
// Возвращаемое значение:
// Структура
// *ЗаданиеЗавершено - Булево
// *ЗаписьЛога - Строка
// 	
Функция ОбработатьОбновитьHtmlПередОзнакомлением(ОписаниеЗадания) Экспорт
	
	Действие = ОписаниеЗадания.ПредметЗадания; // тут Действие
	ТекстДляЛога = "";
	
	ДанныеЗадания = 
		ОбработкаОчередиЗаданийВызовСервера.ДанныеДляЗаданияОбновитьHtmlПередОзнакомлением(Действие);
	
	НеДелатьОбработкуHtml = Истина;	
	// Добавим комментарии
	СогласованиеВРежимеЗамечанийКлиент.ДобавитьКомментарииБезИспользованияРобота(
		Действие, 
		ДанныеЗадания.Документ, 
		ОписаниеЗадания.УникальныйИдентификатор, 
		ДанныеЗадания.НомерИтерации,
		НеДелатьОбработкуHtml,
		ТекстДляЛога,
		ДанныеЗадания.СпособСогласованияВРежимеЗамечаний,
		ДанныеЗадания.ЧислоСтраницДляПредпросмотраПорции);
	
	ЗаданиеЗавершено = Не ЗначениеЗаполнено(ТекстДляЛога);
	
	Возврат Новый Структура("ЗаданиеЗавершено, ЗаписьЛога", ЗаданиеЗавершено, ТекстДляЛога);
	
КонецФункции	

#КонецОбласти

#Область ЗавершениеОзнакомленияСогласования

// Обработает событие  Перечисления.ТипыЗаданий.ЗавершениеОзнакомленияСогласования
// 
// Параметры:
// 	ОписаниеЗадания - Структура
// 	*Тип - ПеречислениеСсылка.ТипыЗаданий
// 	*Задание -СправочникССылка.ОчередьЗаданийДокументооборота
// 	*ПредметЗадания  -СправочникСсылка.ОбработкиОбъектов, СправочникСсылка.ДействияОзнакомления, СправочникСсылка.ДействияПодписания, СправочникСсылка.ДействияРегистрации, СправочникСсылка.ДействияСогласования, СправочникСсылка.ДействияУтверждения, ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи, ЗадачаСсылка, БизнесПроцессСсылка, Строка, СправочникСсылка.ДействияИсполнения, СправочникСсылка.ДокументыПредприятия
// 	*ПараметрыВыполнения  -Структура
// 	
// Возвращаемое значение:
// Структура
// *ЗаданиеЗавершено - Булево
// *ЗаписьЛога - Строка
// 	
Функция ОбработатьЗавершениеОзнакомленияСогласования(ОписаниеЗадания) Экспорт
	
	СлужебнаяЗадача = ОписаниеЗадания.ПредметЗадания; // тут СлужебнаяЗадача
	ТекстДляЛога = "";
	ЗаданиеЗавершено = Истина;
	
	ДанныеЗадания = 
		ОбработкаОчередиЗаданийВызовСервера.ДанныеДляЗавершениеОзнакомленияСогласования(СлужебнаяЗадача);
	
	// Удалим комментарии

	СогласованиеВРежимеЗамечанийКлиент.УдалитьКомментарииБезИспользованияРобота(
		ДанныеЗадания.Действие, ДанныеЗадания.Документ, 
		ОписаниеЗадания.УникальныйИдентификатор, ТекстДляЛога,
		ДанныеЗадания.СпособСогласованияВРежимеЗамечаний);
		
	ЗаданиеЗавершено = Не ЗначениеЗаполнено(ТекстДляЛога);
	
	Если ЗаданиеЗавершено Тогда
		//	выполним служебную задачу (в конце).
		ОбработкаОчередиЗаданийВызовСервера.ВыполнитьЗадачу(СлужебнаяЗадача);
	КонецЕсли;
	
	Возврат Новый Структура("ЗаданиеЗавершено, ЗаписьЛога", ЗаданиеЗавершено, ТекстДляЛога);
	
КонецФункции

#КонецОбласти

#Область СтартоватьПроцесс

// Обработает интерактивнй запуск процесса.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения -
// 	ПараметрыЗаписи - Структура
// 	
// Возвращаемое значение:
// 	Булево - Истина, если отработали
Функция ОбработатьЗапускПроцессаИзКарточки(Форма, ПараметрыЗаписи) Экспорт
	
	Если Не ОбработкаОчередиЗаданийКлиентПовтИсп.ИспользоватьЗадания() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ПараметрыЗаписи.Вставить("СтартПроцессаЧерезОчередьЗаданий", Истина);
	РезультатЗаписи = Форма.Записать(ПараметрыЗаписи);
	
	Если РезультатЗаписи Тогда
		Форма.Закрыть();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СформироватьДанныеДляПредпросмотраФайла

// Обработает событие  Перечисления.ТипыЗаданий.СформироватьДанныеДляПредпросмотраФайла
// 
// Параметры:
// 	ОписаниеЗадания - Структура
// 	*Тип - ПеречислениеСсылка.ТипыЗаданий
// 	*Задание -СправочникССылка.ОчередьЗаданийДокументооборота
// 	*ПредметЗадания  -СправочникСсылка.ОбработкиОбъектов, СправочникСсылка.ДействияОзнакомления, СправочникСсылка.ДействияПодписания, СправочникСсылка.ДействияРегистрации, СправочникСсылка.ДействияСогласования, СправочникСсылка.ДействияУтверждения, ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи, ЗадачаСсылка, БизнесПроцессСсылка, Строка, СправочникСсылка.ДействияИсполнения, СправочникСсылка.ДокументыПредприятия
// 	*ПараметрыВыполнения  -Структура
// 	
// Возвращаемое значение:
// Структура
// *ЗаданиеЗавершено - Булево
// *ЗаписьЛога - Строка
// 	
Функция СформироватьДанныеДляПредпросмотраФайла(ОписаниеЗадания) Экспорт
	
	ПредметЗадания = ОписаниеЗадания.ПредметЗадания;
	ТекстДляЛога = "";         
	
	Попытка
		
		Если ТипЗнч(ПредметЗадания) <> Тип("СправочникСсылка.Файлы") Тогда
			ВызватьИсключение НСтр("ru = 'Тип предмета - ожидается Файл.'");
		КонецЕсли;
			
		РеквФайла = РаботаСФайламиВызовСервера.РасширениеИРазмерВПривилегированномРежиме(
			ПредметЗадания);
		Расширение = РеквФайла.ТекущаяВерсияРасширение;
		ТекущаяВерсияРазмер = РеквФайла.ТекущаяВерсияРазмер / 1024;
		ТекущийФайл = ПредметЗадания;
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
		ПараметрыHTMLПредставление.Расширение = Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущаяВерсияРазмер;
		
		ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл, 
			ПараметрыHTMLПредставление,
			ДокументPDF);
				
		ЗаданиеЗавершено = Истина;
	
	Исключение
		
		ТекстДляЛога = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаданиеЗавершено = Ложь;
				
	КонецПопытки;
	
	Возврат Новый Структура("ЗаданиеЗавершено, ЗаписьЛога", ЗаданиеЗавершено, ТекстДляЛога);
	
КонецФункции

#КонецОбласти

#КонецОбласти
