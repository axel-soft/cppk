////////////////////////////////////////////////////////////////////////////////
// Работа с HTML (вызов сервера).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Кодирует переданную ссылку.
//
// Параметры:
//  Ссылка - Строка - Ссылка.
// 
// Возвращаемое значение:
//  Строка - Кодированная ссылка.
//
Функция КодироватьСсылку(Ссылка) Экспорт
	
	Возврат КодироватьСтроку(Ссылка, СпособКодированияСтроки.URLВКодировкеURL);
	
КонецФункции

// Раскодирует переданную ссылку.
//
// Параметры:
//  Ссылка - Строка - Ссылка.
// 
// Возвращаемое значение:
//  Строка - Раскодированная ссылка.
//
Функция РаскодироватьСсылку(Ссылка) Экспорт
	
	Возврат РаскодироватьСтроку(Ссылка, СпособКодированияСтроки.URLВКодировкеURL);
	
КонецФункции

// Получает ссылку на объект по навиг сслке
Функция СсылкаПоНавигационной(НавигационнаяСсылкаОтбора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИД = Прав(СокрЛП(НавигационнаяСсылкаОтбора), 32);
	ИД = Сред(ИД, 25, 8)
		+ "-" + Сред(ИД, 21, 4)
		+ "-" + Сред(ИД, 17, 4)
		+ "-" + Сред(ИД, 1, 4)
		+ "-" + Сред(ИД, 5, 12);
		
	Имя = Сред(НавигационнаяСсылкаОтбора, СтрНайти(НавигационнаяСсылкаОтбора, "/", НаправлениеПоиска.СКонца) + 1);
	Имя = Лев(Имя, СтрНайти(Имя, "?") - 1);
	
	Попытка
		Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Имя).ПолучитьСсылку(Новый УникальныйИдентификатор(ИД));
	Исключение
		Возврат Неопределено;
	КонецПопытки;

КонецФункции

// Получает текстовое содержимое ДокументаHTML.
//
Функция ПолучитьПростойТекстИзHTML(Знач ТекстHTML, Знач Кодировка = Неопределено) Экспорт
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "</o:p>", "</o:p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</o:p>" + Символы.ПС + Символы.ПС, "</o:p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</p>", "</p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</p>" + Символы.ПС + Символы.ПС, "</p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</div>", "</div>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</div>" + Символы.ПС + Символы.ПС, "</div>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "<br>", Символы.ПС + Символы.ПС);
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	Если ЗначениеЗаполнено(Кодировка) Тогда
		Попытка
			ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
		Исключение	
			ЧтениеHTML.УстановитьСтроку(ТекстHTML); // кодировка могла быть некорректная - ставим без кодировки
		КонецПопытки;	
	Иначе
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	КонецЕсли;
	
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	Если ДокументHTML.Тело = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ДокументHTML.Тело.ТекстовоеСодержимое;
	
КонецФункции

// Записывает фотографию сотрудника.
// 
// Параметры:
//  АдресВременногоХранилищаФайла - Строка
//  ИдентификаторФормы - УникальныйИдентификатор
//  Сотрудник - СправочникСсылка.Сотрудники
//
Процедура ЗаписатьФотографиюСотрудника(Знач АдресВременногоХранилищаФайла, Знач ИдентификаторФормы, Знач Сотрудник) Экспорт
	
	НаименованиеКонтакта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Сотрудник,
		"Наименование");
	
	РаботаСФотографиями.ЗаписатьИзображение(
		АдресВременногоХранилищаФайла,
		ИдентификаторФормы,
		Сотрудник,
		НаименованиеКонтакта);
	
КонецПроцедуры

#КонецОбласти