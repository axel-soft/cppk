// @strict-types


#Область ПрограммныйИнтерфейс

// Заполняет доступные для выгрузки настройки обработки по настройке обработки
// 
// Параметры:
//  КонтекстВыгрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстВыгрузкиНастроек
Процедура ЗаполнитьДоступныеДляВыгрузкиДанныеПоНастройкеОбработки(КонтекстВыгрузки) Экспорт
	
	Если Не ЗначениеЗаполнено(КонтекстВыгрузки.ВыбранныеНастройкиОбработки) Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый вызов метода. Метод следует вызывать только с заполненным свойством ВыбранныеНастройкиОбработки контекста выгрузки'");
	КонецЕсли;
	
	КонтекстВыгрузки.ДоступныеНастройкиОбработки =
		ДоступныеДанныеДляВыгрузкиПоНастройкеОбработки(КонтекстВыгрузки.ВыбранныеНастройкиОбработки);
	
КонецПроцедуры

// Заполняет адрес во временном хранилище двоичных данных выгрузки настроек
// 
// Параметры:
//  КонтекстВыгрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстВыгрузкиНастроек
Процедура ЗаполнитьАдресДанныхВыгрузкиНастроек(КонтекстВыгрузки) Экспорт
	
	КонтекстЗаполнения = НовыйКонтекстЗаполненияXMLНастроекОбработки();
	КонтекстЗаполнения.ДанныеДляЗаполнения =
		ДанныеДляЗаполненияXMLНастроекОбработки(КонтекстВыгрузки.НастройкиОбработки);
	ЗаполнитьДанныеВыгрузкиНастроекОбработки(КонтекстЗаполнения);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КонтекстЗаполнения.ОбъектXDTOНастроек, "ВыгрузкаНастроекОбработки");
	
	СтрокаВыгрузки = ЗаписьXML.Закрыть();
	
	Поток = Новый ПотокВПамяти();;
	ЗаписьТекста = Новый ЗаписьТекста();
	ЗаписьТекста.Открыть(Поток);
	
	ЗаписьТекста.Записать(СтрокаВыгрузки);
	
	ЗаписьТекста.Закрыть();
	
	ДвоичныеДанныеВыгрузки = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	КонтекстВыгрузки.АдресДвоичныхДанныхВыгрузки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВыгрузки);
	
КонецПроцедуры

// Выполняет загрузку настроек обработки
// 
// Параметры:
//  КонтекстЗагрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстЗагрузкиНастроек
Процедура ВыполнитьЗагрузкуНастроекОбработки(КонтекстЗагрузки) Экспорт
	
	ЗаполнитьПрочитанныеДанные(КонтекстЗагрузки);
	Если КонтекстЗагрузки.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПрочитанныеДанныеНастроекОбработки(КонтекстЗагрузки);
	Если КонтекстЗагрузки.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСоответствиеВидовОбъектовНастроекОбработки(КонтекстЗагрузки);
	Если КонтекстЗагрузки.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеДляСозданияНастроекОбработки(КонтекстЗагрузки);
	Если КонтекстЗагрузки.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСопоставленныеСсылкиОбъектовКСозданию(КонтекстЗагрузки);
	Если КонтекстЗагрузки.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьЗагруженныеНастройкиОбработки(КонтекстЗагрузки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКонтекстомВыгрузки

// Возвращает доступные для выгрузке данные по настройке обработки
// 
// Параметры:
//  НастройкаОбработки - СправочникСсылка.НастройкиОбработкиВидовОбъектов
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ВидОбъектаСОбработкой
//    * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеДоступныхНастроекОбработкиДляВыгрузки
Функция ДоступныеДанныеДляВыгрузкиПоНастройкеОбработки(НастройкаОбработки)
	
	ВыборкаКорневыхПравил = ВыборкаКорневыхПравилОбрабокиПоНастройкеОбработки(НастройкаОбработки);
	
	ВидОбъекта = Справочники.ВидыДокументов.ПустаяСсылка();
	КорневыеПравилаОбработки = Новый Массив(); // Массив Из СправочникСсылка.ПравилаОбработки
	Пока ВыборкаКорневыхПравил.Следующий() Цикл
		
		ВидОбъекта = ВыборкаКорневыхПравил.ВидОбъекта;
		КорневыеПравилаОбработки.Добавить(ВыборкаКорневыхПравил.ПравилоОбработки);
		
	КонецЦикла;
	
	КорневыеПравилаОбработки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КорневыеПравилаОбработки);
	
	ВыборкиДочернихПравил = ВыборкиДочернихПравилОбработки(КорневыеПравилаОбработки);
	
	ВсеПравилаОбработки = Новый Массив(); // Массив Из СправочникСсылка.ПравилаОбработки
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеПравилаОбработки, КорневыеПравилаОбработки);
	Для Каждого ВыборкаДочернихПравил Из ВыборкиДочернихПравил Цикл
		Пока ВыборкаДочернихПравил.Следующий() Цикл
			ВсеПравилаОбработки.Добавить(ВыборкаДочернихПравил.ПравилоОбработки);
		КонецЦикла;
	КонецЦикла;
	
	ВсеПравилаОбработки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеПравилаОбработки);
	
	ДоступныеДляВыгрузкиПоВидам = Новый Соответствие();
	
	ДоступныеДляВыгрузки = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеДоступныхНастроекОбработкиДляВыгрузки();
	ДоступныеДляВыгрузки.НастройкиОбработки.Добавить(НастройкаОбработки);
	ДоступныеДляВыгрузки.ПравилаОбработки = ВсеПравилаОбработки;
	
	ДоступныеДляВыгрузкиПоВидам[ВидОбъекта] = ДоступныеДляВыгрузки;
	Возврат ДоступныеДляВыгрузкиПоВидам;
	
КонецФункции

// Возвращает выборку корневых правил обработки по настройке обработки
// 
// Параметры:
//  НастройкаОбработки - СправочникСсылка.НастройкиОбработкиВидовОбъектов
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//    * ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой
//    * НастройкиОбработки - СправочникСсылка.НастройкиОбработкиВидовОбъектов
//    * ПравилоОбработки - СправочникСсылка.ПравилаОбработки
//
Функция ВыборкаКорневыхПравилОбрабокиПоНастройкеОбработки(НастройкаОбработки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта,
		|	НастройкиОбработкиВидовОбъектов.Ссылка КАК НастройкиОбработки,
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ПО НастройкиОбработкиВидовОбъектов.ВидОбъекта = ПравилаОбработки.ЭлементГруппировки
		|		И НастройкиОбработкиВидовОбъектов.ДействуетПо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		И (НастройкиОбработкиВидовОбъектов.ДействуетС <= ПравилаОбработки.ДействуетС
		|		И ПравилаОбработки.ДействуетС <= НастройкиОбработкиВидовОбъектов.ДействуетПо)
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.Ссылка = &НастройкиОбработки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта,
		|	НастройкиОбработкиВидовОбъектов.Ссылка КАК НастройкиОбработки,
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ПО НастройкиОбработкиВидовОбъектов.ВидОбъекта = ПравилаОбработки.ЭлементГруппировки
		|		И НастройкиОбработкиВидовОбъектов.ДействуетПо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		И ПравилаОбработки.ДействуетПо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		И (НастройкиОбработкиВидовОбъектов.ДействуетС <= ПравилаОбработки.ДействуетПо
		|		И ПравилаОбработки.ДействуетПо <= НастройкиОбработкиВидовОбъектов.ДействуетПо)
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.Ссылка = &НастройкиОбработки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта,
		|	НастройкиОбработкиВидовОбъектов.Ссылка КАК НастройкиОбработки,
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ПО НастройкиОбработкиВидовОбъектов.ВидОбъекта = ПравилаОбработки.ЭлементГруппировки
		|		И НастройкиОбработкиВидовОбъектов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		И ПравилаОбработки.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.Ссылка = &НастройкиОбработки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта,
		|	НастройкиОбработкиВидовОбъектов.Ссылка КАК НастройкиОбработки,
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ПО НастройкиОбработкиВидовОбъектов.ВидОбъекта = ПравилаОбработки.ЭлементГруппировки
		|		И НастройкиОбработкиВидовОбъектов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		И НастройкиОбработкиВидовОбъектов.ДействуетС <= ПравилаОбработки.ДействуетПо
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.Ссылка = &НастройкиОбработки";
	Запрос.УстановитьПараметр("НастройкиОбработки", НастройкаОбработки);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции


// Возвращает массив выборок результатов запроса с данными дочерних правил обработки
// 
// Параметры:
//  ПравилаОбработки - Массив Из СправочникСсылка.ПравилаОбработки
// 
// Возвращаемое значение:
//  Массив Из ВыборкаИзРезультатаЗапроса:
//    * ПравилоОбработки - СправочникСсылка.ПравилаОбработки
//    * Родитель - СправочникСсылка.ПравилаОбработки
//
Функция ВыборкиДочернихПравилОбработки(ПравилаОбработки)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки,
		|	ПравилаОбработки.Родитель КАК Родитель,
		|	1 КАК ГлубинаДочернего
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|ГДЕ
		|	ПравилаОбработки.Родитель В (&РодительскиеПравила)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки,
		|	ПравилаОбработки.Родитель КАК Родитель,
		|	2
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК Родители
		|		ПО ПравилаОбработки.Родитель = Родители.Ссылка
		|ГДЕ
		|	Родители.Родитель В (&РодительскиеПравила)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки,
		|	ПравилаОбработки.Родитель КАК Родитель,
		|	3
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК Родители
		|		ПО ПравилаОбработки.Родитель = Родители.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК Прародители
		|		ПО Родители.Родитель = Прародители.Ссылка
		|ГДЕ
		|	Прародители.Родитель В (&РодительскиеПравила)";
	
	ТекущиеРодители = ПравилаОбработки;
	ВыбраныВсеДочерние = Ложь;
	
	Выборки = Новый Массив(); // Массив Из ВыборкаИзРезультатаЗапроса
	Пока Не ВыбраныВсеДочерние Цикл
		
		Запрос.УстановитьПараметр("РодительскиеПравила", ТекущиеРодители);
		//@skip-check query-in-loop
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ВыбраныВсеДочерние = Истина;
			Продолжить;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборки.Добавить(Выборка);
		
		ПравилаУровня3 = Новый Массив(); // Массив Из СправочникСсылка.ПравилаОбработки
		Пока Выборка.Следующий() Цикл
			Если Выборка.ГлубинаДочернего = 3 Тогда
				ПравилаУровня3.Добавить(Выборка.ПравилоОбработки);
			КонецЕсли;
		КонецЦикла;
		Выборка.Сбросить();
		
		ТекущиеРодители = ПравилаУровня3;
		
	КонецЦикла;
	
	Возврат Выборки;
	
КонецФункции


#КонецОбласти

#Область ПолучениеДанныхДляВыгрузкиНастроекОбработки

#Область Конструкторы

// Конструктор данных для выгрузки настроек обработки
// 
// Возвращаемое значение:
//  Структура:
// * ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой
// * НастройкиОбрабоки - СправочникСсылка.НастройкиОбработкиВидовОбъектов - 
// * ПараметрыСхем - Массив Из СправочникСсылка.ПараметрыСхемДляОбработокОбъектов
// * ПравилаОбработки - Массив Из см. НовыеДанныеПравилОбработкиДляВыгрузки
Функция НовыеДанныеДляВыгрузкиНастроекОбработки()
	
	ДанныеДляВыгрузки = Новый Структура;
	ДанныеДляВыгрузки.Вставить("ВидОбъекта", Справочники.ВидыДокументов.ПустаяСсылка());
	ДанныеДляВыгрузки.Вставить("НастройкиОбрабоки", Справочники.НастройкиОбработкиВидовОбъектов.ПустаяСсылка());
	ДанныеДляВыгрузки.Вставить("ПараметрыСхем", Новый Массив());
	ДанныеДляВыгрузки.Вставить("ПравилаОбработки", Новый Массив());
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

// Конструктор записи правил обработки объектов
// 
// Возвращаемое значение:
//  Структура:
// * ПравилоОбработки - СправочникСсылка.ПравилаОбработки - 
// * ВидДействия - СправочникСсылка.ВидыДействий - 
// * Настройка - СправочникСсылка.НастройкиДействийИсполнения - 
// * НастройкаВключена - Булево - 
Функция НовыеДанныеПравилОбработкиДляВыгрузки()
	
	ДанныеПравил = Новый Структура;
	ДанныеПравил.Вставить("ПравилоОбработки", Справочники.ПравилаОбработки.ПустаяСсылка());
	ДанныеПравил.Вставить("ВидДействия", Справочники.ВидыДействий.ПустаяСсылка());
	ДанныеПравил.Вставить("Настройка", Справочники.НастройкиДействийИсполнения.ПустаяСсылка());
	ДанныеПравил.Вставить("НастройкаВключена", Ложь);
	
	Возврат ДанныеПравил;
	
КонецФункции

// Конструктор данных для заполнения XML
// 
// Возвращаемое значение:
//  Структура -  Новые данные для заполнения XMLНастроек обработки:
// * ДанныеДляВыгрузки - Массив Из см. НовыеДанныеДляВыгрузкиНастроекОбработки
// * ВерсияПрограммы - Строка - 
Функция НовыеДанныеДляЗаполненияXMLНастроекОбработки()
	
	Данные = Новый Структура;
	Данные.Вставить("ДанныеДляВыгрузки", Новый Массив());
	Данные.Вставить("ВерсияПрограммы", "");
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

// Возвращает данные для заполнения xml
// 
// Параметры:
//  НастройкиОбработки - Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ВидОбъектаСОбработкой
//    * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработкиДляВыгрузки
// 
// Возвращаемое значение:
//  см. НовыеДанныеДляЗаполненияXMLНастроекОбработки
Функция ДанныеДляЗаполненияXMLНастроекОбработки(НастройкиОбработки)
	
	Данные = НовыеДанныеДляЗаполненияXMLНастроекОбработки();
	Данные.ДанныеДляВыгрузки = ДанныеДляВыгрузкиНастроекОбработки(НастройкиОбработки);
	
	ОписаниеПодсистемы = СтандартныеПодсистемыПовтИсп.НовоеОписаниеПодсистемы();
	ОбновлениеИнформационнойБазыДокументооборот.ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	Данные.ВерсияПрограммы = СтрШаблон("%1 %2", ОписаниеПодсистемы.Имя, ОписаниеПодсистемы.Версия);
	
	Возврат Данные;
	
КонецФункции

// Возвращает данные для выгрузки настроек обработки
// 
// Параметры:
//  НастройкиОбработки - Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ВидОбъектаСОбработкой
//    * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработкиДляВыгрузки
// 
// Возвращаемое значение:
//  Массив Из см. НовыеДанныеДляВыгрузкиНастроекОбработки
Функция ДанныеДляВыгрузкиНастроекОбработки(НастройкиОбработки)
	
	ВыборкиДанных = ВыборкиДанныхДляВыгрузкиНастроекОбработки(НастройкиОбработки);
	
	ПараметрыСхемПоНастройкам = Новый Соответствие();
	ВыборкаПараметровСхем = ВыборкиДанных.ПараметрыСхем;
	Пока ВыборкаПараметровСхем.Следующий() Цикл
		
		Настройка = ВыборкаПараметровСхем.НастройкаОбработки;
		ПараметрыСхемПоНастройке = ПараметрыСхемПоНастройкам[Настройка]; // Массив Из СправочникСсылка.ПараметрыСхемДляОбработокОбъектов
		Если ПараметрыСхемПоНастройке = Неопределено Тогда
			ПараметрыСхемПоНастройке = Новый Массив();
			ПараметрыСхемПоНастройкам[Настройка] = ПараметрыСхемПоНастройке;
		КонецЕсли;
		
		ПараметрыСхемПоНастройке.Добавить(ВыборкаПараметровСхем.ПараметрыСхемы);
		
	КонецЦикла;
	
	ДанныеПравил = Новый Соответствие();
	ВыборкаПравил = ВыборкиДанных.ПравилаОбработки;
	Пока ВыборкаПравил.Следующий() Цикл
		
		Правило = ВыборкаПравил.ПравилоОбработки;
		
		ДанныеДляПравила = ДанныеПравил[Правило]; // Массив Из см. НовыеДанныеПравилОбработкиДляВыгрузки
		Если ДанныеДляПравила = Неопределено Тогда
			ДанныеДляПравила = Новый Массив;
			ДанныеПравил[Правило] = ДанныеДляПравила;
		КонецЕсли;
		
		ДанныеПравила = НовыеДанныеПравилОбработкиДляВыгрузки();
		ДанныеПравила.ПравилоОбработки = Правило;
		ДанныеПравила.ВидДействия = ВыборкаПравил.ВидДействия;
		ДанныеПравила.Настройка = ВыборкаПравил.Настройка;
		ДанныеПравила.НастройкаВключена = ВыборкаПравил.НастройкаВключена;
		
		ДанныеДляПравила.Добавить(ДанныеПравила);
		
	КонецЦикла;
	
	ДанныеДляВыгрузки = Новый Массив; // Массив Из см. НовыеДанныеДляВыгрузкиНастроекОбработки
	
	Для Каждого Элемент Из НастройкиОбработки Цикл
		
		ВидОбъекта = Элемент.Ключ;
		ДанныеВидаОбъекта = Элемент.Значение;
		
		НастройкаОбработки = ДанныеВидаОбъекта.НастройкаОбработки;
		ПравилаОбработки = ДанныеВидаОбъекта.ПравилаОбработки;
		
		ДанныеДляВыгрузкиПоВиду = НовыеДанныеДляВыгрузкиНастроекОбработки();
		ДанныеДляВыгрузкиПоВиду.ВидОбъекта = ВидОбъекта;
		ДанныеДляВыгрузкиПоВиду.НастройкиОбрабоки = НастройкаОбработки;
		
		ПараметрыСхем = ПараметрыСхемПоНастройкам[НастройкаОбработки]; // Массив Из СправочникСсылка.ПараметрыСхемДляОбработокОбъектов
		Если ПараметрыСхем = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось выгрузить настройки обработки для вида объекта %1: не найдены параметры схемы для настройки обработки %2'"),
				ВидОбъекта, НастройкаОбработки);
		КонецЕсли;
		
		ДанныеДляВыгрузкиПоВиду.ПараметрыСхем = ПараметрыСхем;
		
		Для Каждого Правило Из ПравилаОбработки Цикл
			
			ДанныеДляПравила = ДанныеПравил[Правило]; // Массив Из см. НовыеДанныеПравилОбработкиДляВыгрузки
			Если ДанныеДляПравила = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеДляВыгрузкиПоВиду.ПравилаОбработки, ДанныеДляПравила);
			
		КонецЦикла;
		
		ДанныеДляВыгрузки.Добавить(ДанныеДляВыгрузкиПоВиду);
		
	КонецЦикла;
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

// Возвращает выборки данных для выгрузки настроек обработки
// 
// Параметры:
//  НастройкиОбработки - Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ВидОбъектаСОбработкой
//    * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработкиДляВыгрузки
// 
// Возвращаемое значение:
//  Структура:
//    * ПараметрыСхем - ВыборкаИзРезультатаЗапроса:
//      ** НастройкаОбработки - СправочникСсылка.НастройкиОбработкиВидовОбъектов - 
//      ** ПараметрыСхемы - СправочникСсылка.ПараметрыСхемДляОбработокОбъектов - 
//    * ПравилаОбработки - ВыборкаИзРезультатаЗапроса:
//      ** ПравилоОбработки - СправочникСсылка.ПравилаОбработки - 
//      ** ВидДействия - СправочникСсылка.ВидыДействий - 
//      ** Настройка - ОпределяемыйТип.НастройкиДействий - 
//      ** НастройкаВключена - Булево - 
Функция ВыборкиДанныхДляВыгрузкиНастроекОбработки(НастройкиОбработки)
	
	НаборНастроекОбработки = Новый Массив(); // Массив Из СправочникСсылка.НастройкиОбработкиВидовОбъектов
	НаборПравил = Новый Массив(); // Массив Из СправочникСсылка.ПравилаОбработки
	
	Для Каждого Элемент Из НастройкиОбработки Цикл
		
		ВидОбъекта = Элемент.Ключ;
		ДанныеВидаОбъекта = Элемент.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработкиДляВыгрузки
		
		НаборНастроекОбработки.Добавить(ДанныеВидаОбъекта.НастройкаОбработки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаборПравил, ДанныеВидаОбъекта.ПравилаОбработки);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПараметрыСхемДляОбработокОбъектов.ВладелецСхемы КАК НастройкаОбработки,
		|	ПараметрыСхемДляОбработокОбъектов.Ссылка КАК ПараметрыСхемы
		|ИЗ
		|	Справочник.ПараметрыСхемДляОбработокОбъектов КАК ПараметрыСхемДляОбработокОбъектов
		|ГДЕ
		|	ПараметрыСхемДляОбработокОбъектов.ВладелецСхемы В (&НастройкиОбработки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаОбработкиОбъектов.ПравилоОбработки КАК ПравилоОбработки,
		|	ПравилаОбработкиОбъектов.ВидДействия КАК ВидДействия,
		|	ПравилаОбработкиОбъектов.Настройка КАК Настройка,
		|	ПравилаОбработкиОбъектов.НастройкаВключена КАК НастройкаВключена
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК ПравилаОбработкиОбъектов
		|ГДЕ
		|	ПравилаОбработкиОбъектов.ПравилоОбработки В (&ПравилаОбработки)";
	
	Запрос.УстановитьПараметр("НастройкиОбработки", НаборНастроекОбработки);
	Запрос.УстановитьПараметр("ПравилаОбработки", НаборПравил);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	КоличествоРезультатов = РезультатыЗапросов.Количество();
	
	ВыборкаПараметровСхем = РезультатыЗапросов[КоличествоРезультатов - 2].Выбрать();
	ВыборкаПравилОбработки = РезультатыЗапросов[КоличествоРезультатов - 1].Выбрать();
	
	ВыборкиДанных = Новый Структура;
	ВыборкиДанных.Вставить("ПараметрыСхем", ВыборкаПараметровСхем);
	ВыборкиДанных.Вставить("ПравилаОбработки", ВыборкаПравилОбработки);
	
	Возврат ВыборкиДанных;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеXMLНастроекОбработки

// Конструктор контекста заполнения xml
// 
// Возвращаемое значение:
//  Структура:
//    * ОбъектXDTOНастроек - ОбъектXDTO
//    * ДанныеДляЗаполнения - см. НовыеДанныеДляЗаполненияXMLНастроекОбработки
//    * ИспользуемыеСсылки - Массив Из ЛюбаяСсылка
Функция НовыйКонтекстЗаполненияXMLНастроекОбработки()
	
	Тип = ПакетXDTOНастроекОбработки().КорневыеСвойства.Получить("ВыгрузкаНастроекОбработки").Тип;
	ОбъектВыгрузки = ФабрикаXDTO.Создать(Тип); // ОбъектXDTO
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбъектXDTOНастроек", ОбъектВыгрузки);
	Контекст.Вставить("ДанныеДляЗаполнения", НовыеДанныеДляЗаполненияXMLНастроекОбработки());
	Контекст.Вставить("ИспользуемыеСсылки", Новый Массив);
	
	Возврат Контекст;
	
КонецФункции

// Заполняет данные XDTO по настройкам обработки
// 
// Параметры:
//  Контекст - см. НовыйКонтекстЗаполненияXMLНастроекОбработки
// 
Процедура ЗаполнитьДанныеВыгрузкиНастроекОбработки(Контекст)
	
	Объект = Контекст.ОбъектXDTOНастроек;
	
	УстановитьСвойствоXDTO(Объект, "ВерсияПрограммыВыгрузки", Контекст.ДанныеДляЗаполнения.ВерсияПрограммы);
	
	НастройкиОбработки = Объект.ПолучитьСписок("НастройкиОбработки");
	Для Каждого ДанныеНастройки Из Контекст.ДанныеДляЗаполнения.ДанныеДляВыгрузки Цикл
		
		ОбъектНастроек = НовыйДочернийОбъектXDTO(Объект, "НастройкиОбработки");
		
		УстановитьСвойствоXDTO(ОбъектНастроек, "ВидОбъекта", ДанныеНастройки.ВидОбъекта);
		УстановитьСвойствоXDTO(ОбъектНастроек, "НастройкиОбработкиВидовОбъектов", ДанныеНастройки.НастройкиОбрабоки);
		
		Контекст.ИспользуемыеСсылки.Добавить(ДанныеНастройки.НастройкиОбрабоки);
		
		ПараметрыСхем = ОбъектНастроек.ПолучитьСписок("ПараметрыСхем"); // СписокXDTO Из ОбъектXDTO
		Для Каждого ПараметрыСхемы Из ДанныеНастройки.ПараметрыСхем Цикл
			
			ОбъектПараметровСхем = НовыйДочернийОбъектXDTO(ОбъектНастроек, "ПараметрыСхем");
			
			УстановитьСвойствоXDTO(ОбъектПараметровСхем, "ПараметрыСхемДляОбработокОбъектов", ПараметрыСхемы);
			
			ПараметрыСхем.Добавить(ОбъектПараметровСхем);
			
			Контекст.ИспользуемыеСсылки.Добавить(ПараметрыСхемы);
			
		КонецЦикла;
		
		ПравилаОбработки = ОбъектНастроек.ПолучитьСписок("ПравилаОбработки");
		Для Каждого ДанныеПравилОбработки Из ДанныеНастройки.ПравилаОбработки Цикл
			
			ОбъектПравил = НовыйДочернийОбъектXDTO(ОбъектНастроек, "ПравилаОбработки");
			
			УстановитьСвойствоXDTO(ОбъектПравил, "ПравилоОбработки", ДанныеПравилОбработки.ПравилоОбработки);
			УстановитьСвойствоXDTO(ОбъектПравил, "ВидДействия", ДанныеПравилОбработки.ВидДействия);
			
			Если ЗначениеЗаполнено(ДанныеПравилОбработки.Настройка) Тогда
				УстановитьСвойствоXDTO(ОбъектПравил, "Настройка", ДанныеПравилОбработки.Настройка);
				Контекст.ИспользуемыеСсылки.Добавить(ДанныеПравилОбработки.Настройка);
			КонецЕсли;
			
			УстановитьСвойствоXDTO(ОбъектПравил, "НастройкаВключена", ДанныеПравилОбработки.НастройкаВключена);
			
			ПравилаОбработки.Добавить(ОбъектПравил);
			
			Контекст.ИспользуемыеСсылки.Добавить(ДанныеПравилОбработки.ПравилоОбработки);
			Контекст.ИспользуемыеСсылки.Добавить(ДанныеПравилОбработки.ВидДействия);
			
		КонецЦикла;
		
		НастройкиОбработки.Добавить(ОбъектНастроек);
		
	КонецЦикла;
	
	Контекст.ИспользуемыеСсылки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Контекст.ИспользуемыеСсылки);
	
	ОбъектИспользуемыхСсылок = НовыйДочернийОбъектXDTO(Объект, "ИспользуемыеСсылки");
	ВыгрузитьИспользуемыеСсылки(ОбъектИспользуемыхСсылок, Контекст.ИспользуемыеСсылки);
	Объект.Установить("ИспользуемыеСсылки", ОбъектИспользуемыхСсылок);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИспользуемыхСсылок

// Заполняет объект XDTO используемых ссылок
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO
//  ИспользуемыеСсылки - Массив Из ЛюбаяСсылка
Процедура ВыгрузитьИспользуемыеСсылки(ОбъектXDTO, ИспользуемыеСсылки)
	
	КонтекстВыгрузки = НовыйКонтекстВыгрузкиИспользуемыхСсылок();
	
	КонтекстВыгрузки.ИспользуемыеСсылки = ИспользуемыеСсылки;
	КонтекстВыгрузки.СсылкиКВыгрузке = ИспользуемыеСсылки;
	КонтекстВыгрузки.ОбъектXDTO = ОбъектXDTO;
	
	Пока КонтекстВыгрузки.СсылкиКВыгрузке.Количество() > 0 Цикл
		ВыполнитьИтерациюВыгрузкиИспользуемыхСсылок(КонтекстВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

// Новый контекст выгрузки используемых ссылок.
// 
// Возвращаемое значение:
//  Структура -  Новый контекст выгрузки используемых ссылок:
//    * ИспользуемыеСсылки - Массив Из ЛюбаяСсылка
//    * СсылкиКВыгрузке - Массив Из ЛюбаяСсылка
//    * ВыгруженныеСсылки - Соответствие Из КлючИЗначение:
//       ** Ключ - ЛюбаяСсылка
//       ** Значение - Булево
//    * ОбъектXDTO - ОбъектXDTO, Неопределено -
Функция НовыйКонтекстВыгрузкиИспользуемыхСсылок()
	
	Контекст = Новый Структура;
	Контекст.Вставить("ИспользуемыеСсылки", Новый Массив());
	Контекст.Вставить("СсылкиКВыгрузке", Новый Массив());
	Контекст.Вставить("ВыгруженныеСсылки", Новый Соответствие());
	Контекст.Вставить("ОбъектXDTO", Неопределено);
	
	Возврат Контекст;
	
КонецФункции

// Выполняет итерацию выгрузки используемых ссылок, т.е. выгружает те ссылки, которые стоят к выгрузке
//  и дополяет новыми используемыми в выгруженных объектах
// 
// Параметры:
//  Контекст - см. НовыйКонтекстВыгрузкиИспользуемыхСсылок
Процедура ВыполнитьИтерациюВыгрузкиИспользуемыхСсылок(Контекст)
	
	ВстреченныеСсылки = Новый Массив(); // Массив Из ЛюбаяСсылка
	
	ДанныеСсылок = ДанныеСсылокДляЗаполненияXDTO(Контекст.ОбъектXDTO, Контекст.СсылкиКВыгрузке);
	
	СписокИспользуемыхСсылок = Контекст.ОбъектXDTO.ПолучитьСписок("ИспользуемаяСсылка");
	
	Для Каждого ЭлементДанныхСсылок Из ДанныеСсылок Цикл
		
		Ссылка = ЭлементДанныхСсылок.Ключ;
		ДанныеСсылки = ЭлементДанныхСсылок.Значение;
		
		ОбъектИспользуемойСсылки = НовыйДочернийОбъектXDTO(Контекст.ОбъектXDTO, "ИспользуемаяСсылка");
		
		ОбъектСсылки = НовыйДочернийОбъектXDTO(ОбъектИспользуемойСсылки, "Ссылка");
		
		ИмяТипаXDTO = ИмяТипаСсылкиВВыгрузке(Ссылка);
		УстановитьСвойствоXDTO(ОбъектСсылки, "ОбъектМетаданных", ИмяТипаXDTO);
		
		ОбъектТипизированнойСсылки = НовыйДочернийОбъектXDTO(ОбъектСсылки, ИмяТипаXDTO);
		ЗаполнитьОбъектXDTOИспользуемойСсылки(ОбъектТипизированнойСсылки, ДанныеСсылки, ВстреченныеСсылки);
		
		Контекст.ВыгруженныеСсылки[Ссылка] = Истина;
		
		ОбъектСсылки.Установить(ИмяТипаXDTO, ОбъектТипизированнойСсылки);
		ОбъектИспользуемойСсылки.Установить("Ссылка", ОбъектСсылки);
		
		СписокИспользуемыхСсылок.Добавить(ОбъектИспользуемойСсылки);
		
	КонецЦикла;
	
	СсылкиДляНовойИтерацииВыгрузки = Новый Массив(); // Массив Из ЛюбаяСсылка
	ВстреченныеСсылки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВстреченныеСсылки);
	Для Каждого Ссылка Из ВстреченныеСсылки Цикл
		Если Контекст.ВыгруженныеСсылки[Ссылка] <> Истина Тогда
			СсылкиДляНовойИтерацииВыгрузки.Добавить(Ссылка);
			Контекст.ИспользуемыеСсылки.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Контекст.СсылкиКВыгрузке = СсылкиДляНовойИтерацииВыгрузки;
	
КонецПроцедуры

#Область ПолучениеДанныхСсылокДляЗаполненияXDTO

// Конструктор данных ссылки для заполнения XDTO
// 
// Параметры:
//  ОписаниеДанныхСсылки - см. НовоеОписаниеДанныхСсылокДляЗаполненияXDTO
// 
// Возвращаемое значение:
//  Структура:
// * ЗначенияРеквизитов - Структура - Структура с ключами-именами реквизитов
// * ТабличныеЧасти - Соответствие Из КлючИЗначение:
//   ** Ключ - Строка - Имя табличной части
//   ** Значение - ТаблицаЗначений
// * УникальныйИдентификатор - УникальныйИдентификатор - 
// * Представление - Строка
//
Функция НовыеДанныеСсылкиДляЗаполненияXDTO(ОписаниеДанныхСсылки)
	
	ДанныеСсылки = Новый Структура;
	ДанныеСсылки.Вставить("ЗначенияРеквизитов", Новый Структура());
	ДанныеСсылки.Вставить("ТабличныеЧасти", Новый Соответствие());
	ДанныеСсылки.Вставить("УникальныйИдентификатор", УникальныйИдентификаторПустой());
	ДанныеСсылки.Вставить("Представление", "");
	
	Для Каждого ИмяРеквизита Из ОписаниеДанныхСсылки.ИменаРеквизитов Цикл
		ДанныеСсылки.ЗначенияРеквизитов.Вставить(ИмяРеквизита);
	КонецЦикла;
	
	Для Каждого ЭлементТабличнойЧасти Из ОписаниеДанныхСсылки.ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ЭлементТабличнойЧасти.Ключ;
		ИменаКолонок = ЭлементТабличнойЧасти.Значение;
		
		ТабличнаяЧасть = Новый ТаблицаЗначений();
		Для Каждого ИмяКолонки Из ИменаКолонок Цикл
			ТабличнаяЧасть.Колонки.Добавить(ИмяКолонки);
		КонецЦикла;
		
		ДанныеСсылки.ТабличныеЧасти[ИмяТабличнойЧасти] = ТабличнаяЧасть;
		
	КонецЦикла;
	
	Возврат ДанныеСсылки;
	
КонецФункции

// Новое описание данных ссылок для заполнения XDTO.
// 
// Возвращаемое значение:
//  Структура:
//    * ИмяОбъектаМетаданных - Строка
//    * ИменаРеквизитов - Массив Из Строка
//    * ТабличныеЧасти - Соответствие Из КлючИЗначение:
//      ** Ключ - Строка
//      ** Значение - Массив Из Строка
//
Функция НовоеОписаниеДанныхСсылокДляЗаполненияXDTO()
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ИмяОбъектаМетаданных", "");
	ОписаниеДанных.Вставить("ИменаРеквизитов", Новый Массив());
	ОписаниеДанных.Вставить("ТабличныеЧасти", Новый Соответствие());
	
	Возврат ОписаниеДанных;
	
КонецФункции

// Возвращает описание данных ссылок для заполнения XDTO по объекту XDTO
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO
//  ИмяОбъектаМетаданных - Строка
// 
// Возвращаемое значение:
//  см. НовоеОписаниеДанныхСсылокДляЗаполненияXDTO
Функция ОписаниеДанныхСсылокПоОбъектуXDTO(ОбъектXDTO, ИмяОбъектаМетаданных)
	
	ОписаниеДанных = НовоеОписаниеДанныхСсылокДляЗаполненияXDTO();
	
	ОписаниеДанных.ИмяОбъектаМетаданных = ИмяОбъектаМетаданных;
	
	ИмяТипаXDTO = ИмяТипаXDTOПоИмениМетаданного(ИмяОбъектаМетаданных);
	
	Путь = СтрШаблон("ИспользуемаяСсылка.Ссылка.%1", ИмяТипаXDTO);
	ОбъектXDTOМетаданного = НовыйДочернийОбъектXDTO(ОбъектXDTO, Путь);
	Если ОбъектXDTOМетаданного = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка при выгрузке XDTO: с схеме не описан объект метаданных %1'"),
			ИмяОбъектаМетаданных);
	КонецЕсли;
	
	Для Каждого Свойство Из ОбъектXDTOМетаданного.Свойства() Цикл
		
		Если ЭтоСлужебноеСвойствоСсылкиXDTO(Свойство.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭтоСписокXDTO(Свойство) Тогда
			
			ОписаниеДанных.ИменаРеквизитов.Добавить(Свойство.Имя);
			
		Иначе
			
			ИмяТабличнойЧасти = Свойство.Имя;
			ОбъектТабличнойЧасти = НовыйДочернийОбъектXDTO(ОбъектXDTOМетаданного, ИмяТабличнойЧасти);
			
			КолонкиТабличнойЧасти = Новый Массив(); // Массив Из Строка
			Для Каждого СвойствоКолонки Из ОбъектТабличнойЧасти.Свойства() Цикл
				КолонкиТабличнойЧасти.Добавить(СвойствоКолонки.Имя);
			КонецЦикла;
			
			ОписаниеДанных.ТабличныеЧасти[ИмяТабличнойЧасти] = КолонкиТабличнойЧасти;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеДанных;
	
КонецФункции

// Возвращает, является ли указанное имя свойства служебным свойством XDTO
// 
// Параметры:
//  ИмяСвойства - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСлужебноеСвойствоСсылкиXDTO(ИмяСвойства)
	
	СлужебныеСвойства = Новый Соответствие();
	СлужебныеСвойства["УникальныйИдентификатор"] = Истина;
	СлужебныеСвойства["Представление"] = Истина;
	
	Возврат СлужебныеСвойства[ИмяСвойства] = Истина;
	
КонецФункции

// Возвращает данные ссылок для заполнения XDTO
// 
// Параметры:
//  ОбъектИспользуемыхСсылок - ОбъектXDTO
//  Ссылки - Массив Из ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ЛюбаяСсылка - Имя объекта метаданных
//    * Значение - см. НовыеДанныеСсылкиДляЗаполненияXDTO
//
Функция ДанныеСсылокДляЗаполненияXDTO(ОбъектИспользуемыхСсылок, Ссылки)
	
	ДанныеСсылок = Новый Соответствие();
	
	ОписанияДанныхПоИменамМетаданных = Новый Соответствие();
	
	Для Каждого Ссылка Из Ссылки Цикл
		
		ИмяМетаданных = Ссылка.Метаданные().ПолноеИмя();
		ОписаниеМетаданного = ОписанияДанныхПоИменамМетаданных[ИмяМетаданных];
		Если ОписаниеМетаданного = Неопределено Тогда
			ОписаниеМетаданного = ОписаниеДанныхСсылокПоОбъектуXDTO(ОбъектИспользуемыхСсылок, ИмяМетаданных);
			ОписанияДанныхПоИменамМетаданных[ИмяМетаданных] = ОписаниеМетаданного;
		КонецЕсли;
		
		ДанныеСсылки = НовыеДанныеСсылкиДляЗаполненияXDTO(ОписаниеМетаданного);
		ДанныеСсылки.УникальныйИдентификатор = Ссылка.УникальныйИдентификатор();
		ДанныеСсылок[Ссылка] = ДанныеСсылки;
		
	КонецЦикла;
	
	ВыборкиПоМетаданным = ВыборкиДанныхСсылокДляЗаполненияXDTO(ОбъектИспользуемыхСсылок, Ссылки);
	Для Каждого ЭлементВыборкиПоМетаданным Из ВыборкиПоМетаданным Цикл
		
		ВыборкиПоИменамТаблиц = ЭлементВыборкиПоМетаданным.Значение;
		Для Каждого ЭлементВыборкиПоИменамТаблиц Из ВыборкиПоИменамТаблиц Цикл
			
			ИмяТаблицы = ЭлементВыборкиПоИменамТаблиц.Ключ;
			Выборка = ЭлементВыборкиПоИменамТаблиц.Значение;
			
			Пока Выборка.Следующий() Цикл
				
				Ссылка = Выборка.Ссылка;
				ДанныеСсылки = ДанныеСсылок[Ссылка]; // см. НовыеДанныеСсылкиДляЗаполненияXDTO
				
				Если ИмяТаблицы = "Реквизиты" Тогда
					ЗаполнитьЗначенияСвойств(ДанныеСсылки.ЗначенияРеквизитов, Выборка);
					ДанныеСсылки.Представление = Выборка.Представление;
				Иначе
					Таблица = ДанныеСсылки.ТабличныеЧасти[ИмяТаблицы];
					НоваяСтрока = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеСсылок;
	
КонецФункции

// Возвращает выборки данных ссылок для заполнения XDTO
// 
// Параметры:
//  ОбъектИспользуемыхСсылок - ОбъектXDTO
//  Ссылки - Массив Из ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - Соответствие Из КлючИЗначение:
//      ** Ключ - Строка - Имя таблицы ("Реквизиты" для основной таблицы или Имя табличной части для табличных частей)
//      ** Значение - ВыборкаИзРезультатаЗапроса:
//        *** Ссылка - ЛюбаяСсылка
//        *** Представление - Строка
//
Функция ВыборкиДанныхСсылокДляЗаполненияXDTO(ОбъектИспользуемыхСсылок, Ссылки)
	
	ТекстыЗапросов = Новый Массив(); // Массив Из Строка
	ИндексыТаблицПакетаПоИменамМетаданных = Новый Соответствие;
	
	ТекущийИндексТаблицыПакета = 0;
	
	ОбработанныеМетаданные = Новый Соответствие();
	Для Каждого Ссылка Из Ссылки Цикл
		
		ИмяМетаданного = Ссылка.Метаданные().ПолноеИмя();
		Если ОбработанныеМетаданные[ИмяМетаданного] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеМетаданные[ИмяМетаданного] = Истина;
		
		ОписаниеДанныхСсылок = ОписаниеДанныхСсылокПоОбъектуXDTO(ОбъектИспользуемыхСсылок, ИмяМетаданного);
		
		ИндексыТаблицМетаданного = Новый Соответствие;
		ИндексыТаблицПакетаПоИменамМетаданных[ИмяМетаданного] = ИндексыТаблицМетаданного;
		
		ТекстЗапросаРеквизитов =
			ТекстЗапросаКОсновнойТаблицеМетаданного(ИмяМетаданного, ОписаниеДанныхСсылок.ИменаРеквизитов);
		ТекстыЗапросов.Добавить(ТекстЗапросаРеквизитов);
		
		ИндексыТаблицМетаданного["Реквизиты"] = ТекущийИндексТаблицыПакета;
		ТекущийИндексТаблицыПакета = ТекущийИндексТаблицыПакета + 1;
		
		Для Каждого ЭлементТабличнойЧасти Из ОписаниеДанныхСсылок.ТабличныеЧасти Цикл
			
			ИмяТабличнойЧасти = ЭлементТабличнойЧасти.Ключ;
			ИменаКолонок = ЭлементТабличнойЧасти.Значение;
			
			ТекстЗапросаТабличнойЧасти =
				ТекстЗапросаКТабличнойЧастиМетаданного(ИмяМетаданного, ИмяТабличнойЧасти, ИменаКолонок);
			ТекстыЗапросов.Добавить(ТекстЗапросаТабличнойЧасти);
			
			ИндексыТаблицМетаданного[ИмяТабличнойЧасти] = ТекущийИндексТаблицыПакета;
			ТекущийИндексТаблицыПакета = ТекущийИндексТаблицыПакета + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкиПоМетаданным = Новый Соответствие();
	
	Для Каждого ЭлементМетаданных Из ИндексыТаблицПакетаПоИменамМетаданных Цикл
		
		ИмяМетаданного = ЭлементМетаданных.Ключ; // Строка
		ИндексыТаблицМетаданного = ЭлементМетаданных.Значение; // Соответствие Из КлючИЗначение
		
		ВыборкиПоИменамТаблиц = Новый Соответствие();
		ВыборкиПоМетаданным[ИмяМетаданного] = ВыборкиПоИменамТаблиц;
		
		Для Каждого ЭлементТаблицы Из ИндексыТаблицМетаданного Цикл
			
			ИмяТаблицы = ЭлементТаблицы.Ключ;
			ИндексТаблицы = ЭлементТаблицы.Значение;
			
			ВыборкиПоИменамТаблиц[ИмяТаблицы] = РезультатыЗапроса[ИндексТаблицы].Выбрать();
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВыборкиПоМетаданным;
	
КонецФункции

// Возвращает собранный текст запроса к основной таблице метаданного
// 
// Параметры:
//  ИмяОбъектаМетаданных - Строка
//  ИменаРеквизитов - Массив Из Строка
// 
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаКОсновнойТаблицеМетаданного(ИмяОбъектаМетаданных, ИменаРеквизитов)
	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	%ПоляЗапроса%
		|ИЗ
		|	%ИмяОбъектаМетаданных% КАК ОсновнаяТаблица
		|ГДЕ
		|	ОсновнаяТаблица.Ссылка В (&Ссылки)";
	
	ТекстыПолейЗапроса = Новый Массив(); // Массив Из Строка
	ТекстыПолейЗапроса.Добавить("ОсновнаяТаблица.Ссылка КАК Ссылка");
	ТекстыПолейЗапроса.Добавить("ОсновнаяТаблица.Представление КАК Представление");
	Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
		ТекстыПолейЗапроса.Добавить(
			СтрШаблон("ОсновнаяТаблица.%1 КАК %1", ИмяРеквизита));
	КонецЦикла;
	
	ТекстЗапроса = ШаблонТекстаЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъектаМетаданных%", ИмяОбъектаМетаданных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляЗапроса%",
		СтрСоединить(ТекстыПолейЗапроса, "," + Символы.ПС + Символы.Таб));
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса к табличной части объекта метаданных
// 
// Параметры:
//  ИмяОбъектаМетаданных - Строка
//  ИмяТабличнойЧасти - Строка
//  ИменаКолонок - Массив Из Строка
// 
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаКТабличнойЧастиМетаданного(ИмяОбъектаМетаданных, ИмяТабличнойЧасти, ИменаКолонок)
	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	%ПоляЗапроса%
		|ИЗ
		|	%ИмяОбъектаМетаданных%.%ИмяТабличнойЧасти% КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В (&Ссылки)";
	
	ТекстыПолейЗапроса = Новый Массив(); // Массив Из Строка
	ТекстыПолейЗапроса.Добавить("ТабличнаяЧасть.Ссылка КАК Ссылка");
	Для Каждого ИмяКолонки Из ИменаКолонок Цикл
		ТекстыПолейЗапроса.Добавить(
			СтрШаблон("ТабличнаяЧасть.%1 КАК %1", ИмяКолонки));
	КонецЦикла;
	
	ТекстЗапроса = ШаблонТекстаЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъектаМетаданных%", ИмяОбъектаМетаданных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТабличнойЧасти%", ИмяТабличнойЧасти);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляЗапроса%",
		СтрСоединить(ТекстыПолейЗапроса, "," + Символы.ПС + Символы.Таб));
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеXDTOИспользуемыхСсылок

// Заполняет объетк XDTO используемой ссылки по данным ссылки, паралельнь дополняя встреченные в объектах ссылки
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO
//  ДанныеСсылки - см. НовыеДанныеСсылкиДляЗаполненияXDTO
//  ВстреченныеСсылки - Массив Из ЛюбаяСсылка
Процедура ЗаполнитьОбъектXDTOИспользуемойСсылки(ОбъектXDTO, ДанныеСсылки, ВстреченныеСсылки)
	
	УстановитьСвойствоXDTO(ОбъектXDTO, "УникальныйИдентификатор", ДанныеСсылки.УникальныйИдентификатор);
	УстановитьСвойствоXDTO(ОбъектXDTO, "Представление", ДанныеСсылки.Представление);
	
	Для Каждого Элемент Из ДанныеСсылки.ЗначенияРеквизитов Цикл
		
		ИмяРеквизита = Элемент.Ключ;
		ЗначениеРеквизита = Элемент.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьСвойствоXDTO(ОбъектXDTO, ИмяРеквизита, ЗначениеРеквизита);
		
		Если ЗначениеНеобходимоДобавитьКВстреченнымСсылкам(
						ЗначениеРеквизита, ОбъектXDTO, ИмяРеквизита) Тогда
			
			ВстреченнаяСсылка = ЗначениеРеквизита; // ЛюбаяСсылка
			ВстреченныеСсылки.Добавить(ВстреченнаяСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТабличнойЧасти Из ДанныеСсылки.ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ЭлементТабличнойЧасти.Ключ;
		ТабличнаяЧасть = ЭлементТабличнойЧасти.Значение; // ТаблицаЗначений
		
		ОбъектТабличнойЧасти = ОбъектXDTO.ПолучитьСписок(ИмяТабличнойЧасти);
		
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			
			ОбъектСтроки = НовыйДочернийОбъектXDTO(ОбъектXDTO, ИмяТабличнойЧасти);
			Для Каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				ЗначениеКолонки = СтрокаТаблицы[ИмяКолонки]; // Произвольный
				
				Если Не ЗначениеЗаполнено(ЗначениеКолонки) Тогда
					Продолжить;
				КонецЕсли;
				
				УстановитьСвойствоXDTO(ОбъектСтроки, ИмяКолонки, ЗначениеКолонки);
				
				Если ЗначениеНеобходимоДобавитьКВстреченнымСсылкам(
						ЗначениеКолонки, ОбъектСтроки, ИмяКолонки) Тогда
					
					ВстреченнаяСсылка = ЗначениеКолонки; // ЛюбаяСсылка
					ВстреченныеСсылки.Добавить(ВстреченнаяСсылка);
				КонецЕсли;
				
			КонецЦикла;
			
			ОбъектТабличнойЧасти.Добавить(ОбъектСтроки);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает, необходимо ли добавить значение к встреченным ссылкам
// 
// Параметры:
//  Значение - Произвольный
//  ЗаполняемыйОбъект - ОбъектXDTO
//  ИмяСвойства - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЗначениеНеобходимоДобавитьКВстреченнымСсылкам(Значение, ЗаполняемыйОбъект, ИмяСвойства)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ссылка = Значение; // ЛюбаяСсылка
	
	Если ОбщегоНазначения.ЭтоПеречисление(Ссылка.Метаданные()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Свойство = ЗаполняемыйОбъект.Свойства().Получить(ИмяСвойства);
	Если Свойство = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Свойство.Тип.Имя = "string" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбщиеПоРаботеСXDTO

Функция ПакетXDTOНастроекОбработки()
	
	ПространствоИмен = "http://v8.1c.ru/doc8/ProcessingSettings";
	Пакет = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);
	
	Возврат Пакет;
	
КонецФункции

// Возвращает дочерний объект XDTO текущего
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO
//  Путь - Строка
// 
// Возвращаемое значение:
//  ОбъектXDTO, Неопределено - Объект XDTO, если получен дочерний объект,
//                             Неопределено, в случае если по пути дочернего объекта нет
Функция НовыйДочернийОбъектXDTO(ОбъектXDTO, Путь)
	
	МассивПутей = СтрРазделить(Путь, ".");
	
	ДочернийОбъект = ОбъектXDTO;
	Для Каждого ЧастьПути Из МассивПутей Цикл
		
		ДочернееСвойство = ДочернийОбъект.Свойства().Получить(ЧастьПути);
		Если ДочернееСвойство = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В объекте XDTO %1 схемой не предусмотрено свойства по пути %2'"),
				ОбъектXDTO.Тип().Имя, Путь);
		КонецЕсли;
		
		Тип = ДочернееСвойство.Тип;
		ДочернийОбъект = ФабрикаXDTO.Создать(Тип);
		
	КонецЦикла;
	
	Возврат ДочернийОбъект;
	
КонецФункции

// Устанавливает свойство объекта XDTO по указанному значению
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO
//  ИмяСвойства - Строка
//  Значение - Произвольный
Процедура УстановитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение)
	
	Свойство = ОбъектXDTO.Свойства().Получить(ИмяСвойства);
	Если Свойство = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'В объекте XDTO %1 схемой не предусмотрено свойства %2'"),
				ОбъектXDTO.Тип().Имя, ИмяСвойства);
	КонецЕсли;
	
	Если ЭтоЭлементXDTOПростогоТипа(Свойство) Тогда
		
		Если Свойство.Тип.Имя = "string"
			И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
			
			УстановитьСвойствоXDTOПростогоТипа(ОбъектXDTO, ИмяСвойства, Строка(Значение));
			
		Иначе
			
			УстановитьСвойствоXDTOПростогоТипа(ОбъектXDTO, ИмяСвойства, Значение);
			
		КонецЕсли;
		
	Иначе
		
		ОбъектСвойства = НовыйДочернийОбъектXDTO(ОбъектXDTO, ИмяСвойства);
		ЗаполнитьОбъектXDTOСложногоТипа(ОбъектСвойства, Значение);
		ОбъектXDTO.Установить(Свойство, ОбъектСвойства);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает свойство объекта XDTO простого типа по указанному значению
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO
//  ИмяСвойства - Строка
//  Значение - Произвольный
Процедура УстановитьСвойствоXDTOПростогоТипа(ОбъектXDTO, ИмяСвойства, Значение)
	
	Свойство = ОбъектXDTO.Свойства().Получить(ИмяСвойства);
	Если Свойство = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗначениеПеречисления(Значение) Тогда
		ОбъектXDTO.Установить(Свойство, ИмяЗначенияПеречисления(Значение));
		Возврат;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Значение);
	ИмяПростогоТипа = ИмяПростогоТипаДляXDTO(ТипЗначения);
	Если Не ЗначениеЗаполнено(ИмяПростогоТипа) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Свойству XDTO %1 передано для заполнения значение %2, не являющееся простым типом'"),
				ИмяСвойства, Значение);
	КонецЕсли;
	
	Если ИмяПростогоТипа = "Строка"
		Или ИмяПростогоТипа = "Дата"
		Или ИмяПростогоТипа = "Булево"
		Или ИмяПростогоТипа = "Число" Тогда
		
		ОбъектXDTO.Установить(Свойство, Значение);
		
	ИначеЕсли ИмяПростогоТипа = "УникальныйИдентификатор" Тогда
		
		ОбъектXDTO.Установить(Свойство, Строка(Значение));
		
	ИначеЕсли ИмяПростогоТипа = "ХранилищеЗначения" Тогда
		
		ХранилищеЗначения = Значение; // ХранилищеЗначения
		ИзвлеченноеЗначение = ХранилищеЗначения.Получить();
		СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ИзвлеченноеЗначение);
		ОбъектXDTO.Установить(Свойство, СтрокаXML);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект XDTO ссылкой
// 
// Параметры:
//  Объект - ОбъектXDTO:
//    * Тип - Строка
//  Значение - Произвольный
Процедура ЗаполнитьОбъектXDTOСложногоТипа(Объект, Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	ИмяПростогоТипа = ИмяПростогоТипаДляXDTO(ТипЗначения);
	Если ЗначениеЗаполнено(ИмяПростогоТипа) Тогда
		УстановитьСвойствоXDTO(Объект, "Тип", ИмяПростогоТипа);
		УстановитьСвойствоXDTO(Объект, ИмяПростогоТипа, Значение);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестное имя типа для заполнения XDTO: %1'"), ТипЗначения);
	КонецЕсли;
	
	Ссылка = Значение; // ЛюбаяСсылка
	
	ИмяТипа = ИмяТипаСсылкиВВыгрузке(Ссылка);
	
	Если ЭтоЗначениеПеречисления(Ссылка) Тогда
		УстановитьСвойствоXDTO(Объект, "Тип", ИмяТипа);
		УстановитьСвойствоXDTO(Объект, ИмяТипа, ИмяЗначенияПеречисления(Ссылка));
		Возврат;
	КонецЕсли;
	
	УстановитьСвойствоXDTO(Объект, "Тип", ИмяТипа);
	УстановитьСвойствоXDTO(Объект, ИмяТипа, Строка(Ссылка.УникальныйИдентификатор()));
	
КонецПроцедуры


// Возвращает имя простого типа XDTO
// 
// Параметры:
//  Тип - Тип
// 
// Возвращаемое значение:
//  Строка
Функция ИмяПростогоТипаДляXDTO(Тип)
	
	ИменаТипов = Новый Соответствие();
	ИменаТипов[Тип("Дата")] = "Дата";
	ИменаТипов[Тип("Булево")] = "Булево";
	ИменаТипов[Тип("Строка")] = "Строка";
	ИменаТипов[Тип("Число")] = "Число";
	ИменаТипов[Тип("ХранилищеЗначения")] = "ХранилищеЗначения";
	ИменаТипов[Тип("УникальныйИдентификатор")] = "УникальныйИдентификатор";
	
	Если ИменаТипов[Тип] <> Неопределено Тогда
		Возврат ИменаТипов[Тип];
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает имя типа ссылки для записи в XDTO
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Строка
Функция ИмяТипаСсылкиВВыгрузке(Ссылка)
	
	Возврат ИмяТипаXDTOПоИмениМетаданного(Ссылка.Метаданные().ПолноеИмя());
	
КонецФункции

// Возвращает имя типа объект XDTO по имени объекта метаданных
// 
// Параметры:
//  ИмяОбъектаМетаданных - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ИмяТипаXDTOПоИмениМетаданного(ИмяОбъектаМетаданных)
	
	Возврат СтрЗаменить(ИмяОбъектаМетаданных, ".", "_");
	
КонецФункции

// Возвращает, является ли указанное свойство XDTO списком
// 
// Параметры:
//  Свойство - СвойствоXDTO
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСписокXDTO(Свойство)
	
	Возврат Свойство.ВерхняяГраница <> 1;
	
КонецФункции

// Возвращает, является ли указанное свойство XDTO элементом простого типа
// 
// Параметры:
//  Свойство - СвойствоXDTO
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоЭлементXDTOПростогоТипа(Свойство)
	
	Возврат ТипЗнч(Свойство.Тип) <> Тип("ТипОбъектаXDTO");
	
КонецФункции

// Возвращает, является ли данное значение - значением перечисления конфигурации
// 
// Параметры:
//  Значение - Произвольный
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоЗначениеПеречисления(Значение)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ссылка = Значение; // ЛюбаяСсылка
	
	Возврат ОбщегоНазначения.ЭтоПеречисление(Ссылка.Метаданные());
	
КонецФункции

// Возвращает имя значения перечисления по ссылке
// 
// Параметры:
//  Значение - Произвольный
// 
// Возвращаемое значение:
//  Строка
Функция ИмяЗначенияПеречисления(Значение)
	
	Если Не ЭтоЗначениеПеречисления(Значение) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяПеречисления = Значение.Метаданные().Имя;
	ИндексЗначения = Перечисления[ИмяПеречисления].Индекс(Значение);
	ИмяЗначения = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначения].Имя;
	
	Возврат ИмяЗначения;
	
КонецФункции

// Возвращает значение в объекте XDTO по пути
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO
//  Путь - Строка
// 
// Возвращаемое значение:
//  Произвольный
Функция ЗначениеВОбъектеXDTOПоПути(ОбъектXDTO, Путь)
	
	ЧастиПути = СтрРазделить(Путь, ".");
	
	ДочернийОбъект = ОбъектXDTO;
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		
		Если ДочернийОбъект = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В объекте XDTO %1 не заполнены все элементы пути %2'"),
				ОбъектXDTO.Тип().Имя, Путь);
		КонецЕсли;
		
		Если ТипЗнч(ДочернийОбъект) <> Тип("ОбъектXDTO") Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Невозможно получить свойство объекта XDTO %1 по пути %2, поскольку встречается не объектное значение %3.'"),
				ОбъектXDTO.Тип().Имя, Путь, ЧастьПути);
		КонецЕсли;
		
		ДочернееСвойство = ДочернийОбъект.Свойства().Получить(ЧастьПути);
		Если ДочернееСвойство = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В объекте XDTO %1 схемой не предусмотрено свойства по пути %2'"),
				ОбъектXDTO.Тип().Имя, Путь);
		КонецЕсли;
		
		Если ЭтоСписокXDTO(ДочернееСвойство) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Невозможно получить свойство объекта XDTO %1 по пути %2, поскольку встречается список %3.'"),
				ОбъектXDTO.Тип().Имя, Путь, ЧастьПути);
		КонецЕсли;
		
		ДочернийОбъект = ДочернийОбъект.Получить(ДочернееСвойство);
		
	КонецЦикла;
	
	Возврат ДочернийОбъект;
	
КонецФункции

// Возвращает имя объекта метаданных по имени типа в XDTO
// 
// Параметры:
//  ИмяТипаXDTO - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ИмяОбъектаМетаданныхИзИмениТипаXDTO(ИмяТипаXDTO)
	
	ЧастиИмени = СтрРазделить(ИмяТипаXDTO, "_");
	ПерваяЧасть = ЧастиИмени[0];
	ЧастиИмени.Удалить(0);
	ИмяМетаданного = СтрШаблон("%1.%2", ПерваяЧасть, СтрСоединить(ЧастиИмени, "_"));
	
	Возврат ИмяМетаданного;
	
КонецФункции

#Область ЧтениеXDTOВОбъекты1С

// Возвращает, является ли тип XDTO простым типом
// 
// Параметры:
//  Тип - ТипОбъектаXDTO, ТипЗначенияXDTO -
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоПростойТипXDTO(Тип)
	
	ИменаПростыхТипов = Новый Соответствие();
	ИменаПростыхТипов["dateTime"] = Истина;
	ИменаПростыхТипов["boolean"] = Истина;
	ИменаПростыхТипов["string"] = Истина;
	ИменаПростыхТипов["decimal"] = Истина;
	
	Возврат (ИменаПростыхТипов[Тип.Имя] = Истина);
	
КонецФункции

// Возвращает, является ли тип XDTO типом уникального идентификатора
// 
// Параметры:
//  Тип - ТипОбъектаXDTO, ТипЗначенияXDTO -
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоТипXDTOУникальногоИдентификатора(Тип)
	
	Возврат (Тип.Имя = "УникальныйИдентификатор");
	
КонецФункции

// Возвращает, является ли тип XDTO типом хранилища значения
// 
// Параметры:
//  Тип - ТипОбъектаXDTO, ТипЗначенияXDTO -
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоТипXDTOХранилищаЗначения(Тип)
	
	Возврат (Тип.Имя = "ХранилищеЗначения");
	
КонецФункции

// Возвращает, является ли тип XDTO типом хранилища значения
// 
// Параметры:
//  Тип - ТипОбъектаXDTO, ТипЗначенияXDTO -
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоТипXDTOПеречисленияКонфигурации(Тип)
	
	ИмяТипа = Тип.Имя;
	Если Не СтрНачинаетсяС(ИмяТипа, "Перечисление") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПеречисления = ИмяОбъектаМетаданныхИзИмениТипаXDTO(ИмяТипа);
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ИмяПеречисления);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных);
	
КонецФункции

// Возвращает, является ли объект XDTO, объектом, содержащим ссылочный или составной тип 1С
// 
// Параметры:
//  Объект - ОбъектXDTO
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоОбъектXDTOСсылочногоИлиСоставногоТипа(Объект)
	
	СвойствоТипа = Объект.Свойства().Получить("Тип");
	Если СвойствоТипа = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеТипа = Объект.Получить(СвойствоТипа); // Строка
	Если ТипЗнч(ЗначениеТипа) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойствоЗначения = Объект.Свойства().Получить(ЗначениеТипа);
	Если СвойствоЗначения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает значение 1С из свойства объекта XDTO
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ИмяСвойства - Строка
// 
// Возвращаемое значение:
//  см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С 
Функция Значение1СИзСвойстваОбъектаXDTO(Объект, ИмяСвойства)
	
	Свойство = Объект.Свойства().Получить(ИмяСвойства);
	Если Свойство = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'У объекта %1 нет свойства %2'"), Объект.Тип().Имя, ИмяСвойства);
	КонецЕсли;
	
	ОбъектСвойства = Объект.Получить(Свойство);
	Если ОбъектСвойства = Неопределено Тогда
		Возврат КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С();
	КонецЕсли;
	
	Если ЭтоПростойТипXDTO(Свойство.Тип) Тогда
		
		Значение = Объект.Получить(Свойство);
		
		ДанныеЗначения = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С();
		ДанныеЗначения.Тип = ТипЗнч(Значение);
		ДанныеЗначения.Значение = Значение;
		
		Возврат ДанныеЗначения;
		
	ИначеЕсли ЭтоТипXDTOУникальногоИдентификатора(Свойство.Тип) Тогда
		
		СтрокаИдентификатора = Объект.Получить(Свойство);
		
		ДанныеЗначения = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С();
		ДанныеЗначения.Тип = Тип("УникальныйИдентификатор");
		ДанныеЗначения.Значение = Новый УникальныйИдентификатор(СтрокаИдентификатора);
		
		Возврат ДанныеЗначения;
		
	ИначеЕсли ЭтоТипXDTOХранилищаЗначения(Свойство.Тип) Тогда
		
		СтрокаХранилища = Объект.Получить(Свойство); // Строка
		ЗначениеХранилища = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаХранилища);
		
		ДанныеЗначения = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С();
		ДанныеЗначения.Тип = Тип("ХранилищеЗначения");
		ДанныеЗначения.Значение = Новый ХранилищеЗначения(ЗначениеХранилища);
		
		Возврат ДанныеЗначения;
		
	ИначеЕсли ЭтоТипXDTOПеречисленияКонфигурации(Свойство.Тип) Тогда
		
		Значение = ЗначениеПеречисленияИзСвойстваОбъектаXDTO(Объект, ИмяСвойства);
		
		ДанныеЗначения = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С();
		ДанныеЗначения.Тип = ТипЗнч(Значение);
		ДанныеЗначения.Значение = Значение;
		
		Возврат ДанныеЗначения;
		
	КонецЕсли;
	
	Если ЭтоОбъектXDTOСсылочногоИлиСоставногоТипа(ОбъектСвойства) Тогда
		Возврат ЗначениеСсылочногоИлиСоставногоТипаОбъектаXDTO(ОбъектСвойства);
	КонецЕсли;
	
	ВызватьИсключение СтрШаблон(НСтр("ru = 'Свойство %2 объекта %1 не содержит значения 1С'"),
		Объект.Тип().Имя, ИмяСвойства);
	
КонецФункции

// Возвращает значение перечисления из свойства объекта XDTO
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ИмяСвойства - Строка
// 
// Возвращаемое значение:
//  ПеречислениеСсылка
Функция ЗначениеПеречисленияИзСвойстваОбъектаXDTO(Объект, ИмяСвойства)
	
	Свойство = Объект.Свойства().Получить(ИмяСвойства);
	Если Свойство = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'У объекта %1 нет свойства %2'"), Объект.Тип().Имя, ИмяСвойства);
	КонецЕсли;
	
	Если Не ЭтоТипXDTOПеречисленияКонфигурации(Свойство.Тип) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'У свойство %1 объекта %2 не является перечислением.'"),
			ИмяСвойства, Объект.Тип().Имя);
	КонецЕсли;
	
	ЧастиИмени = СтрРазделить(Свойство.Тип.Имя, "_");
	ЧастиИмени.Удалить(0);
	СокращенноеИмяПеречисления = СтрСоединить(ЧастиИмени, "_");
	
	ИмяЗначенияПеречисления = Объект.Получить(Свойство); // Строка
	
	ЗначениеПеречисления = Перечисления[СокращенноеИмяПеречисления][ИмяЗначенияПеречисления];
	
	Возврат ЗначениеПеречисления;
	
КонецФункции

// Возвращает значение ссылочного или состаного типа из свойства объекта XDTO
// 
// Параметры:
//  Объект - ОбъектXDTO
// 
// Возвращаемое значение:
//  см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
Функция ЗначениеСсылочногоИлиСоставногоТипаОбъектаXDTO(Объект)
	
	Если Не ЭтоОбъектXDTOСсылочногоИлиСоставногоТипа(Объект) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Объект %1 не содержит значения 1С.'"), Объект.Тип().Имя);
	КонецЕсли;
	
	СвойствоТипа = Объект.Свойства().Получить("Тип");
	ИмяТипаXDTO = Объект.Получить(СвойствоТипа); // Строка
	ДанныеЗначения = Значение1СИзСвойстваОбъектаXDTO(Объект, ИмяТипаXDTO);
	
	ИмяТипа = ИмяОбъектаМетаданныхИзИмениТипаXDTO(ИмяТипаXDTO);
	
	ВозвращаемоеЗначение = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С();
	Если ЭтоИмяСсылочногоОбъектаМетаданных(ИмяТипа) Тогда
		ВозвращаемоеЗначение.Тип = ТипСсылкиПоИмениОбъектаМетаданных(ИмяТипа);
	Иначе
		ВозвращаемоеЗначение.Тип = ДанныеЗначения.Тип;
	КонецЕсли;
	ВозвращаемоеЗначение.Значение = ДанныеЗначения.Значение;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает, является или переданное имя объекта именем ссылочного объекта метаданных
// 
// Параметры:
//  ИмяОбъекта - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоИмяСсылочногоОбъектаМетаданных(ИмяОбъекта)
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ИмяОбъекта);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает тип ссылки по имени объекта метаданных
// 
// Параметры:
//  ИмяОбъектаМетаданных - Строка
// 
// Возвращаемое значение:
//  Тип
Функция ТипСсылкиПоИмениОбъектаМетаданных(ИмяОбъектаМетаданных)
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ИмяОбъектаМетаданных);
	Если ОбъектМетаданных = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдено объекта метаданных по имени %1'"), ИмяОбъектаМетаданных);
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Объект метаданных %1 не является ссылочным'"), ИмяОбъектаМетаданных);
	КонецЕсли;
	
	ЧастиИмени = СтрРазделить(ИмяОбъектаМетаданных, ".");
	ЧастиИмени[0] = ЧастиИмени[0] + "Ссылка";
	ИмяТипа = СтрСоединить(ЧастиИмени, ".");
	Возврат Тип(ИмяТипа);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЧтениеДанныхИзXDTO

// Заполняет данные выгруженных настроек обработки по данным файла
// 
// Параметры:
//  КонтекстЗагрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстЗагрузкиНастроек
Процедура ЗаполнитьПрочитанныеДанные(КонтекстЗагрузки)
	
	РезультатЧтения = ОбъектXDTOВыгрузкиНастроекОбработки(КонтекстЗагрузки.АдресДанныхФайлаНастроек);
	
	Если Не РезультатЧтения.Успех Тогда
		
		КонтекстЗагрузки.Отказ = Истина;
		
		Ошибка = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОшибкиЗагрузкиНастроекОбработки();
		Ошибка.Этап = КопированиеНастроекОбработкиКлиентСервер.ЭтапыЗагрузкиНастроекОбработки().ЧтениеДанных;
		Ошибка.ТекстОшибки = РезультатЧтения.ТекстОшибки;
		КонтекстЗагрузки.Ошибки.Добавить(Ошибка);
		
		Возврат;
		
	КонецЕсли;
	
	Объект = РезультатЧтения.ОбъектXDTO;
	
	ВерсияПрограммыВыгрузки = ЗначениеВОбъектеXDTOПоПути(Объект, "ВерсияПрограммыВыгрузки"); // Строка
	КонтекстЗагрузки.ПрочитанныеДанные.ВерсияПрограммыВыгрузки = ВерсияПрограммыВыгрузки;
	КонтекстЗагрузки.ПрочитанныеДанные.ВыгруженныеНастройки = ДанныеВыгрузкиНастроекИзОбъектаXDTO(Объект);
	КонтекстЗагрузки.ПрочитанныеДанные.ДанныеИспользуемыхСсылок = ДанныеИспользуемыхСсылокИзОбъектаXDTO(Объект);
	
КонецПроцедуры

// Возвращает результат чтения объекта XDTO выгрузки настроек обработки из файла
// 
// Параметры:
//  АдресДанных - Строка - Адрес двоичных данных выгрузки
// 
// Возвращаемое значение:
//  Структура:
//    * Успех - Булево
//    * ТекстОшибки - Строка
//    * ОбъектXDTO - ОбъектXDTO, Неопределено -
//
Функция ОбъектXDTOВыгрузкиНастроекОбработки(АдресДанных)
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ОбъектXDTO", Неопределено);
	
	Если Не ЭтоАдресВременногоХранилища(АдресДанных) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не переданы данные для загрузки настроек обработки'");
		Возврат Результат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресДанных); // ДвоичныеДанные
	Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не переданы данные для загрузки настроек обработки'");
		Возврат Результат;
	КонецЕсли;
	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьПоток(Поток);
	
	Тип = ПакетXDTOНастроекОбработки().КорневыеСвойства.Получить("ВыгрузкаНастроекОбработки").Тип;
	
	Попытка
		
		ВыгрузкаНастроек = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, Тип);
		
	Исключение
		
		ТекстОшибки =
			НСтр("ru = 'Ошибка при чтении данных выгрузки. Наиболее вероятно загружаемый файл не является файлом выгрузки настроек обработки, либо сформирован в другой версии программы.'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
		
	КонецПопытки;
	
	Результат.Успех = Истина;
	Результат.ОбъектXDTO = ВыгрузкаНастроек;
	
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные выгрузки настроек обрабоки из объекта XDTO
// 
// Параметры:
//  Объект - ОбъектXDTO
// 
// Возвращаемое значение:
//  Массив Из см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработки
Функция ДанныеВыгрузкиНастроекИзОбъектаXDTO(Объект)
	
	ДанныеНастроекОбработки = Новый Массив(); // Массив Из см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработки
	
	СписокОбъектовНастроек = Объект.ПолучитьСписок("НастройкиОбработки"); // СписокXDTO Из ОбъектXDTO
	
	Для Каждого ОбъектНастроек Из СписокОбъектовНастроек Цикл
		
		ДанныеНастройки = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработки();
		
		ЗначениеВидаОбъекта = Значение1СИзСвойстваОбъектаXDTO(ОбъектНастроек, "ВидОбъекта");
		ДанныеНастройки.ВидОбъекта = ЗначениеВидаОбъекта;
		
		ЗначениеНастроек = Значение1СИзСвойстваОбъектаXDTO(ОбъектНастроек, "НастройкиОбработкиВидовОбъектов");
		ДанныеНастройки.НастройкиОбрабоки = ЗначениеНастроек;
		
		СписокПараметровСхем = ОбъектНастроек.ПолучитьСписок("ПараметрыСхем"); // СписокXDTO Из ОбъектXDTO
		Для Каждого ОбъектПараметровСхемы Из СписокПараметровСхем Цикл
			
			ЗначениеПараметровСхемы =
				Значение1СИзСвойстваОбъектаXDTO(ОбъектПараметровСхемы, "ПараметрыСхемДляОбработокОбъектов");
			
			Если ЗначениеЗаполнено(ЗначениеПараметровСхемы.Значение) Тогда
				ДанныеНастройки.ПараметрыСхем.Добавить(ЗначениеПараметровСхемы);
			КонецЕсли;
			
		КонецЦикла;
		
		СписокПравилОбработки = ОбъектНастроек.ПолучитьСписок("ПравилаОбработки");
		Для Каждого ОбъектПравил Из СписокПравилОбработки Цикл
			
			ДанныеПравил = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеПравилОбработки();
			
			ЗначениеПравил = Значение1СИзСвойстваОбъектаXDTO(ОбъектПравил, "ПравилоОбработки");
			Если ЗначениеЗаполнено(ЗначениеПравил.Значение) Тогда
				ДанныеПравил.ПравилоОбработки = ЗначениеПравил;
			КонецЕсли;
			
			ЗначениеВидаДействия = Значение1СИзСвойстваОбъектаXDTO(ОбъектПравил, "ВидДействия");
			Если ЗначениеЗаполнено(ЗначениеВидаДействия.Значение) Тогда
				ДанныеПравил.ВидДействия = ЗначениеВидаДействия;
			КонецЕсли;
			
			ЗначениеНастройки = Значение1СИзСвойстваОбъектаXDTO(ОбъектПравил, "Настройка");
			Если ЗначениеЗаполнено(ЗначениеНастройки.Значение) Тогда
				ДанныеПравил.Настройка = ЗначениеНастройки;
			КонецЕсли;
			
			ЗначениеНастройкаВключена = Значение1СИзСвойстваОбъектаXDTO(ОбъектПравил, "НастройкаВключена");
			Если ЗначениеЗаполнено(ЗначениеНастройкаВключена.Значение) Тогда
				ДанныеПравил.НастройкаВключена = ЗначениеНастройкаВключена;
			КонецЕсли;
			
			ДанныеНастройки.ПравилаОбработки.Добавить(ДанныеПравил);
			
		КонецЦикла;
		
		ДанныеНастроекОбработки.Добавить(ДанныеНастройки);
		
	КонецЦикла;
	
	Возврат ДанныеНастроекОбработки;
	
КонецФункции

// Возвращает данные используемых ссылок из объекта XDTO
// 
// Параметры:
//  Объект - ОбъектXDTO
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//     * Ключ - УникальныйИдентификатор
//     * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеИспользуемойСсылки
Функция ДанныеИспользуемыхСсылокИзОбъектаXDTO(Объект)
	
	ДанныеСсылок = Новый Соответствие();
	
	ОбъектИспользуемыхСсылок = ЗначениеВОбъектеXDTOПоПути(Объект, "ИспользуемыеСсылки"); // ОбъектXDTO
	
	СписокИспользуемыхСсылок = ОбъектИспользуемыхСсылок.ПолучитьСписок("ИспользуемаяСсылка"); // СписокXDTO Из ОбъектXDTO
	Для Каждого ОбъектИспользуемойСсылки Из СписокИспользуемыхСсылок Цикл
		
		ДанныеСсылки = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеИспользуемойСсылки();
		
		ОбъектСсылки = ЗначениеВОбъектеXDTOПоПути(ОбъектИспользуемойСсылки, "Ссылка"); // ОбъектXDTO
		ИмяОбъектаМетаданныхXDTO = ЗначениеВОбъектеXDTOПоПути(ОбъектСсылки, "ОбъектМетаданных"); // Строка
		
		ДанныеСсылки.ИмяОбъектаМетаданных = ИмяОбъектаМетаданныхИзИмениТипаXDTO(ИмяОбъектаМетаданныхXDTO);
		
		ОбъектДанныхСсылки = ЗначениеВОбъектеXDTOПоПути(ОбъектСсылки, ИмяОбъектаМетаданныхXDTO); // ОбъектXDTO
		ГУИДСсылки = Значение1СИзСвойстваОбъектаXDTO(ОбъектДанныхСсылки, "УникальныйИдентификатор");
		ПредставлениеСсылки = Значение1СИзСвойстваОбъектаXDTO(ОбъектДанныхСсылки, "Представление");
		
		ДанныеСсылки.УникальныйИдентификатор = ГУИДСсылки.Значение;
		ДанныеСсылки.Представление = ПредставлениеСсылки.Значение;
		
		Для Каждого Свойство Из ОбъектДанныхСсылки.Свойства() Цикл
			
			Если ЭтоСлужебноеСвойствоСсылкиXDTO(Свойство.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЭтоСписокXDTO(Свойство) Тогда
				
				ИмяРеквизита = Свойство.Имя;
				ЗначениеРеквизита = Значение1СИзСвойстваОбъектаXDTO(ОбъектДанныхСсылки, ИмяРеквизита);
				Если ЗначениеЗаполнено(ЗначениеРеквизита.Значение) Тогда
					ДанныеСсылки.ЗначенияРеквизитов.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				КонецЕсли;
				
			Иначе
				
				ИмяТабличнойЧасти = Свойство.Имя;
				НаборЗначенийСтрок = Новый Массив(); // Массив Из Структура
				
				СписокСтрок = ОбъектДанныхСсылки.ПолучитьСписок(ИмяТабличнойЧасти); // СписокXDTO Из ОбъектXDTO
				Для Каждого ОбъектСтроки Из СписокСтрок Цикл
					
					ЗначенияКолонокВСтроке = Новый Структура();
					
					Для Каждого СвойствоКолонки Из ОбъектСтроки.Свойства() Цикл
						
						ИмяКолонки = СвойствоКолонки.Имя;
						ЗначениеКолонки = Значение1СИзСвойстваОбъектаXDTO(ОбъектСтроки, ИмяКолонки);
						Если ЗначениеЗаполнено(ЗначениеКолонки.Значение) Тогда
							ЗначенияКолонокВСтроке.Вставить(ИмяКолонки, ЗначениеКолонки);
						КонецЕсли;
						
					КонецЦикла;
					
					НаборЗначенийСтрок.Добавить(ЗначенияКолонокВСтроке);
					
				КонецЦикла;
				
				ДанныеСсылки.ТабличныеЧасти[ИмяТабличнойЧасти] = НаборЗначенийСтрок;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеСсылок[ГУИДСсылки.Значение] = ДанныеСсылки;
		
	КонецЦикла;
	
	Возврат ДанныеСсылок;
	
КонецФункции

#КонецОбласти

#Область ПроверкаПрочитанныхДанныхНастроекОбработки

// Проверяет прочитанные данные настроек обработки
// 
// Параметры:
//  КонтекстЗагрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстЗагрузкиНастроек
Процедура ПроверитьПрочитанныеДанныеНастроекОбработки(КонтекстЗагрузки)
	
	ОшибкиПолнотыСсылок = ОшибкиПроверкиПолнотыСсылокВПрочитанныхДанных(КонтекстЗагрузки.ПрочитанныеДанные);
	
	Если ОшибкиПолнотыСсылок.Количество() > 0 Тогда
		
		КонтекстЗагрузки.Отказ = Истина;
		Для Каждого ТекстОшибки Из ОшибкиПолнотыСсылок Цикл
			
			Ошибка = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОшибкиЗагрузкиНастроекОбработки();
			Ошибка.Этап = КопированиеНастроекОбработкиКлиентСервер.ЭтапыЗагрузкиНастроекОбработки().ПроверкаПрочитанныхДанных;
			Ошибка.ТекстОшибки = ТекстОшибки;
			КонтекстЗагрузки.Ошибки.Добавить(Ошибка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает набор ошибок проверки полноты ссылок в прочитанных данных
// 
// Параметры:
//  ПрочитанныеДанные - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеВыгрузкиНастроекОбработки
// 
// Возвращаемое значение:
//  Массив Из Строка
Функция ОшибкиПроверкиПолнотыСсылокВПрочитанныхДанных(ПрочитанныеДанные)
	
	Ошибки = Новый Массив(); // Массив Из Строка
	
	ИспользуемыеСсылки = ПрочитанныеДанные.ДанныеИспользуемыхСсылок;
	
	ТребуемыеСсылкиДанныхНастроек = ТребуемыеСсылкиДанныхНастроекОбработки(ПрочитанныеДанные.ВыгруженныеНастройки);
	ТребуемыеСсылкиВИспользуемыхСсылках = ТребуемыеСсылкиВИспользуемыхСсылках(ИспользуемыеСсылки);
	
	Для Каждого ТребуемаяСсылка Из ТребуемыеСсылкиДанныхНастроек Цикл
		
		Если ИспользуемыеСсылки[ТребуемаяСсылка.Значение] = Неопределено Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТребуемаяСсылка.Тип);
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'В данных выгрузки не описана ссылка %1 на объект %2'"),
				ТребуемаяСсылка.Значение, ОбъектМетаданных.Синоним);
			
			Ошибки.Добавить(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТребуемаяСсылка Из ТребуемыеСсылкиВИспользуемыхСсылках Цикл
		
		Если ИспользуемыеСсылки[ТребуемаяСсылка.Значение] = Неопределено Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТребуемаяСсылка.Тип);
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'В данных выгрузки не описана ссылка %1 на объект %2'"),
				ТребуемаяСсылка.Значение, ОбъектМетаданных.Синоним);
			
			Ошибки.Добавить(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

// Возвращает описание данных требуемых ссылок в данных настроек обработки
// 
// Параметры:
//  ДанныеНастроекОбработки - Массив Из см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработки
// 
// Возвращаемое значение:
//  Массив Из см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
Функция ТребуемыеСсылкиДанныхНастроекОбработки(ДанныеНастроекОбработки)
	
	ТребуемыеСсылки = Новый Массив(); // Массив Из см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
	
	Для Каждого ДанныеНастройки Из ДанныеНастроекОбработки Цикл
		
		Если ЭтоТипСсылкиККонтролюПолнотыСсылок(ДанныеНастройки.ВидОбъекта.Тип)
			И ЗначениеЗаполнено(ДанныеНастройки.ВидОбъекта.Значение) Тогда
			
			ТребуемыеСсылки.Добавить(ДанныеНастройки.ВидОбъекта);
		КонецЕсли;
		
		Если ЭтоТипСсылкиККонтролюПолнотыСсылок(ДанныеНастройки.НастройкиОбрабоки.Тип)
			И ЗначениеЗаполнено(ДанныеНастройки.НастройкиОбрабоки.Значение) Тогда
			
			ТребуемыеСсылки.Добавить(ДанныеНастройки.НастройкиОбрабоки);
		КонецЕсли;
		
		Для Каждого ДанныеПараметровСхемы Из ДанныеНастройки.ПараметрыСхем Цикл
			
			Если ЭтоТипСсылкиККонтролюПолнотыСсылок(ДанныеПараметровСхемы.Тип)
				И ЗначениеЗаполнено(ДанныеПараметровСхемы.Значение) Тогда
				
				ТребуемыеСсылки.Добавить(ДанныеПараметровСхемы);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ДанныеПравил Из ДанныеНастройки.ПравилаОбработки Цикл
			
			Если ЭтоТипСсылкиККонтролюПолнотыСсылок(ДанныеПравил.ПравилоОбработки.Тип)
				И ЗначениеЗаполнено(ДанныеПравил.ПравилоОбработки.Значение) Тогда
				
				ТребуемыеСсылки.Добавить(ДанныеПравил.ПравилоОбработки);
			КонецЕсли;
			
			Если ЭтоТипСсылкиККонтролюПолнотыСсылок(ДанныеПравил.ВидДействия.Тип)
				И ЗначениеЗаполнено(ДанныеПравил.ВидДействия.Значение) Тогда
				
				ТребуемыеСсылки.Добавить(ДанныеПравил.ВидДействия);
			КонецЕсли;
			
			Если ЭтоТипСсылкиККонтролюПолнотыСсылок(ДанныеПравил.Настройка.Тип)
				И ЗначениеЗаполнено(ДанныеПравил.Настройка.Значение) Тогда
				
				ТребуемыеСсылки.Добавить(ДанныеПравил.Настройка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТребуемыеСсылки;
	
КонецФункции

// Возвращает описание данных требуемых ссылок в описанных используемых ссылках
// 
// Параметры:
//  ИспользуемыеСсылки - Соответствие Из КлючИЗначение:
//     * Ключ - УникальныйИдентификатор
//     * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеИспользуемойСсылки
// 
// Возвращаемое значение:
//  Массив Из см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
Функция ТребуемыеСсылкиВИспользуемыхСсылках(ИспользуемыеСсылки)
	
	ТребуемыеСсылки = Новый Массив(); // Массив Из см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
	
	Для Каждого ЭлементСсылки Из ИспользуемыеСсылки Цикл
		
		ДанныеСсылки = ЭлементСсылки.Значение;
		
		Для Каждого ЭлементСтруктурыРеквизитов Из ДанныеСсылки.ЗначенияРеквизитов Цикл
			
			ЗначениеРеквизита = ЭлементСтруктурыРеквизитов.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
			
			Если ЭтоТипСсылкиККонтролюПолнотыСсылок(ЗначениеРеквизита.Тип)
				И ЗначениеЗаполнено(ЗначениеРеквизита.Значение) Тогда
				
				ТребуемыеСсылки.Добавить(ЗначениеРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементТабличнойЧасти Из ДанныеСсылки.ТабличныеЧасти Цикл
			
			ЗначенияКолонокСтрок = ЭлементТабличнойЧасти.Значение;
			
			Для Каждого ЗначенияСтроки Из ЗначенияКолонокСтрок Цикл
				
				Для Каждого ЭлементКолонкиСтроки Из ЗначенияСтроки Цикл
					
					ЗначениеКолонки = ЭлементКолонкиСтроки.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
					
					Если ЭтоТипСсылкиККонтролюПолнотыСсылок(ЗначениеКолонки.Тип)
						И ЗначениеЗаполнено(ЗначениеКолонки.Значение) Тогда
						
						ТребуемыеСсылки.Добавить(ЗначениеКолонки);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТребуемыеСсылки;
	
КонецФункции

// Возвращает, нуждается ли указанный тип к контролю полноты ссылок в выгрузке настроек обработки
// 
// Параметры:
//  Тип - Тип
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоТипСсылкиККонтролюПолнотыСсылок(Тип)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	Если ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СопоставлениеЗагружаемыхДанных

#Область ОбщиеМетодыСопоставления

// Конструктор правил сопоставления объекта метаданных
// 
// Возвращаемое значение:
//  Структура:
//    * ИмяОбъектаМетаданных - Строка - 
//    * СопоставлятьПоУникальномуИдентификатору - Булево - 
//    * СопоставлятьПоРеквизитам - Булево - 
//    * РеквизитыДляСопоставления - Массив Из см. НовыеПравилаСопоставленияПоРеквизиту
//    * СопоставлятьПоПредопределенным - Булево
//
Функция НовыеПравилаСопоставленияОбъектаМетаданных()
	
	ДанныеСопоставления = Новый Структура;
	ДанныеСопоставления.Вставить("ИмяОбъектаМетаданных", "");
	ДанныеСопоставления.Вставить("СопоставлятьПоУникальномуИдентификатору", Истина);
	ДанныеСопоставления.Вставить("СопоставлятьПоРеквизитам", Истина);
	ДанныеСопоставления.Вставить("РеквизитыДляСопоставления", Новый Массив());
	ДанныеСопоставления.Вставить("СопоставлятьПоПредопределенным", Истина);
	
	Возврат ДанныеСопоставления;
	
КонецФункции

// Конструктор правил сопоставления по реквизиту
// 
// Возвращаемое значение:
//  Структура:
// * ИмяРеквизита - Строка - 
// * ТипСопоставления - Строка - см. ТипыСопоставленияРеквизитов
// * ТипЗначения - ОписаниеТипов
//
Функция НовыеПравилаСопоставленияПоРеквизиту()
	
	ПравилаСопоставления = Новый Структура;
	ПравилаСопоставления.Вставить("ИмяРеквизита", "");
	ПравилаСопоставления.Вставить("ТипСопоставления", ТипыСопоставленияРеквизитов().ПоЗначению);
	ПравилаСопоставления.Вставить("ТипЗначения", Новый ОписаниеТипов());
	
	Возврат ПравилаСопоставления;
	
КонецФункции

// Перечисление типов сопоставления реквизитов
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ПоЗначению - Строка - 
// * ПоСтроковомуПредставлению - Строка - 
Функция ТипыСопоставленияРеквизитов()
	
	ТипыСопоставленияРеквизитов = Новый Структура;
	ТипыСопоставленияРеквизитов.Вставить("ПоЗначению", "ПоЗначению");
	ТипыСопоставленияРеквизитов.Вставить("ПоСтроковомуПредставлению", "ПоСтроковомуПредставлению");
	
	Возврат Новый ФиксированнаяСтруктура(ТипыСопоставленияРеквизитов);
	
КонецФункции

#КонецОбласти

#Область СопоставлениеВидовОбъектов

// Возвращает правила сопоставления видов объектов
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - см. НовыеПравилаСопоставленияОбъектаМетаданных
Функция ПравилаСопоставленияВидовОбъектов()
	
	Правила = Новый Соответствие();
	
	ТипыСопоставления = ТипыСопоставленияРеквизитов();
	
	// Виды документов
	
	ОбъектМетаданных = Метаданные.Справочники.ВидыДокументов;
	
	ПравилаВидовДокументов = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаВидовДокументов;
	
	ПравилаВидовДокументов.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаВидовДокументов.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаВидовДокументов.СопоставлятьПоРеквизитам = Истина;
	ПравилаВидовДокументов.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаВидовДокументов.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Виды мероприятий
	
	ОбъектМетаданных = Метаданные.Справочники.ВидыМероприятий;
	
	ПравилаВидовМероприятий = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаВидовМероприятий;
	
	ПравилаВидовМероприятий.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаВидовМероприятий.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаВидовМероприятий.СопоставлятьПоРеквизитам = Истина;
	ПравилаВидовМероприятий.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаВидовМероприятий.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Возврат Правила;
	
КонецФункции

// Заполняет соответствие видов объектов при загрузке настроек обработки
// 
// Параметры:
//  КонтекстЗагрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстЗагрузкиНастроек
Процедура ЗаполнитьСоответствиеВидовОбъектовНастроекОбработки(КонтекстЗагрузки)
	
	ВыгруженныеНастройки = КонтекстЗагрузки.ПрочитанныеДанные.ВыгруженныеНастройки;
	
	Если ВыгруженныеНастройки.Количество() = 1
		И ЗначениеЗаполнено(КонтекстЗагрузки.ВидОбъектаЗагрузки) Тогда
		
		ЗаполнитьСоответствиеВидовОбъектовНастроекОбработкиПоЕдинственномуОбъекту(КонтекстЗагрузки);
		Возврат;
	КонецЕсли;
	
	ПравилаСопоставления = ПравилаСопоставленияВидовОбъектов();
	СопоставленныеДанные = Новый Соответствие();
	ДанныеВидовОбъектов = ДанныеВидовОбъектовНастроекОбработкиПрочитанныеИзФайла(КонтекстЗагрузки);
	
	Если ДанныеВидовОбъектов.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'В выгрузке настроек обработки не заполнены виды объектов настроек обработки.'");
		
		Ошибка = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОшибкиЗагрузкиНастроекОбработки();
		Ошибка.Этап = КопированиеНастроекОбработкиКлиентСервер.ЭтапыЗагрузкиНастроекОбработки().СопоставлениеСсылок;
		Ошибка.ТекстОшибки = ТекстОшибки;
		КонтекстЗагрузки.Ошибки.Добавить(Ошибка);
		
		КонтекстЗагрузки.Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	СопоставленныеВидыОбъектов = СопоставленныеДанные(ДанныеВидовОбъектов, ПравилаСопоставления, СопоставленныеДанные);
	
	Если СопоставленныеВидыОбъектов.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'В выгрузке настроек обработки не удалось сопоставить виды объектов с таковыми в информационной базе.'");
		
		Ошибка = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОшибкиЗагрузкиНастроекОбработки();
		Ошибка.Этап = КопированиеНастроекОбработкиКлиентСервер.ЭтапыЗагрузкиНастроекОбработки().СопоставлениеСсылок;
		Ошибка.ТекстОшибки = ТекстОшибки;
		КонтекстЗагрузки.Ошибки.Добавить(Ошибка);
		
		КонтекстЗагрузки.Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтекстЗагрузки.ВидОбъектаЗагрузки) Тогда
		КонтекстЗагрузки.СоответствиеВидовОбъектов = СопоставленныеВидыОбъектов;
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификаторВидаОбъектаЗагрузки = УникальныйИдентификаторПустой();
	Для Каждого Элемент Из СопоставленныеВидыОбъектов Цикл
		
		УникальныйИдентификатор = Элемент.Ключ;
		СсылкаВидаОбъекта = Элемент.Значение;
		
		Если СсылкаВидаОбъекта = КонтекстЗагрузки.ВидОбъектаЗагрузки Тогда
			УникальныйИдентификаторВидаОбъектаЗагрузки = УникальныйИдентификатор;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(УникальныйИдентификаторВидаОбъектаЗагрузки) Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В выгрузке настроек обработки отсутсвуют настрой для вида объекта %1'"),
			КонтекстЗагрузки.ВидОбъектаЗагрузки);
		
		Ошибка = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОшибкиЗагрузкиНастроекОбработки();
		Ошибка.Этап = КопированиеНастроекОбработкиКлиентСервер.ЭтапыЗагрузкиНастроекОбработки().СопоставлениеСсылок;
		Ошибка.ТекстОшибки = ТекстОшибки;
		КонтекстЗагрузки.Ошибки.Добавить(Ошибка);
		
		КонтекстЗагрузки.Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	КонтекстЗагрузки.СоответствиеВидовОбъектов[УникальныйИдентификаторВидаОбъектаЗагрузки] =
		КонтекстЗагрузки.ВидОбъектаЗагрузки;
	
КонецПроцедуры

// Заполняет соответствие видов объектов при загрузке настроек обработки, если в выгрузке есть только один объект
// 
// Параметры:
//  КонтекстЗагрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстЗагрузкиНастроек
Процедура ЗаполнитьСоответствиеВидовОбъектовНастроекОбработкиПоЕдинственномуОбъекту(КонтекстЗагрузки)
	
	ВыгруженныеНастройки = КонтекстЗагрузки.ПрочитанныеДанные.ВыгруженныеНастройки;
	ИдентификаторВидаОбъекта = ВыгруженныеНастройки[0].ВидОбъекта.Значение;
	
	СсылкаВидаОбъекта = КонтекстЗагрузки.ВидОбъектаЗагрузки;
	
	КонтекстЗагрузки.СоответствиеВидовОбъектов[ИдентификаторВидаОбъекта] = СсылкаВидаОбъекта;
	
КонецПроцедуры

// Возвращает данные ссылок на виды объектов, прочитанные из файла выгрузки
// 
// Параметры:
//  КонтекстЗагрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстЗагрузкиНастроек
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеИспользуемойСсылки
Функция ДанныеВидовОбъектовНастроекОбработкиПрочитанныеИзФайла(КонтекстЗагрузки)
	
	ДанныеВидовОбъектов = Новый Соответствие();
	
	ВыгруженныеНастройки = КонтекстЗагрузки.ПрочитанныеДанные.ВыгруженныеНастройки;
	ИспользуемыеСсылки = КонтекстЗагрузки.ПрочитанныеДанные.ДанныеИспользуемыхСсылок;
	
	Для Каждого ДанныеНастроек Из ВыгруженныеНастройки Цикл
		
		ИдентификаторВидаОбъекта = ДанныеНастроек.ВидОбъекта.Значение; // УникальныйИдентификатор
		
		ДанныеСсылки = ИспользуемыеСсылки[ИдентификаторВидаОбъекта];
		Если ДанныеСсылки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВидовОбъектов[ИдентификаторВидаОбъекта] = ДанныеСсылки;
		
	КонецЦикла;
	
	Возврат ДанныеВидовОбъектов;
	
КонецФункции

#КонецОбласти

#Область СопоставлениеПриСозданииНастроекОбработки

// Возвращает правила сопоставления объектов при создании настроек обработки
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - см. НовыеПравилаСопоставленияОбъектаМетаданных
Функция ПравилаСопоставленияОбъектовПриСозданииНастроекОбработки()
	
	Правила = Новый Соответствие();
	
	ТипыСопоставления = ТипыСопоставленияРеквизитов();
	
	// Виды действий
	
	ОбъектМетаданных = Метаданные.Справочники.ВидыДействий;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.Тип;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Алгоритмы проверки
	
	ОбъектМетаданных = Метаданные.Справочники.АлгоритмыПроверки;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Виды бизнес-событий
	
	ОбъектМетаданных = Метаданные.Справочники.ВидыБизнесСобытий;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Скрипты схем для обработки объектов
	
	ОбъектМетаданных = Метаданные.Справочники.СкриптыСхемДляОбработокОбъектов;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Пользователи
	
	ОбъектМетаданных = Метаданные.Справочники.Пользователи;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.Подразделение;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.Служебный;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Сотрудники
	
	ОбъектМетаданных = Метаданные.Справочники.Сотрудники;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.Должность;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоСтроковомуПредставлению;
	ОписаниеРеквизита.ТипЗначения =
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная));
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.Подразделение;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Подразделения
	
	ОбъектМетаданных = Метаданные.Справочники.СтруктураПредприятия;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Проекты-контейнеры
	
	ОбъектМетаданных = Метаданные.Справочники.ПроектыКонтейнеры;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Владелец; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Код; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.СпособВключенияУчастников;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Проекты
	
	ОбъектМетаданных = Метаданные.Справочники.Проекты;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Код; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Подразделения-контейнеры
	
	ОбъектМетаданных = Метаданные.Справочники.ПодразделенияКонтейнеры;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Владелец; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.СпособВключенияПодчиненных;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Тематики
	
	ОбъектМетаданных = Метаданные.Справочники.ТематикиДокументов;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Ложь;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.ВидДокумента;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.НеДействует;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.НеДействуетДата;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Полные роли
	
	ОбъектМетаданных = Метаданные.Справочники.ПолныеРоли;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Владелец; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоСтроковомуПредставлению;
	ОписаниеРеквизита.ТипЗначения =
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная));
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Код; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.ДополнительныйОбъектАдресации;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.ОсновнойОбъектАдресации;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Контрагенты
	
	ОбъектМетаданных = Метаданные.Справочники.Контрагенты;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.Реквизиты.ИНН;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.КПП;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.ЮрФизЛицо;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Организации
	
	ОбъектМетаданных = Метаданные.Справочники.Организации;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.Реквизиты.ИНН;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.КПП;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Реквизит = ОбъектМетаданных.Реквизиты.ЮрФизЛицо;
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Рабочие группы
	
	ОбъектМетаданных = Метаданные.Справочники.РабочиеГруппы;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Автоподстановки для объектов
	
	ОбъектМетаданных = Метаданные.Справочники.АвтоподстановкиДляОбъектов;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	// Грифы доступа
	
	ОбъектМетаданных = Метаданные.Справочники.ГрифыДоступа;
	
	ПравилаОбъекта = НовыеПравилаСопоставленияОбъектаМетаданных();
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Правила[ИмяОбъекта] = ПравилаОбъекта;
	
	ПравилаОбъекта.ИмяОбъектаМетаданных = ИмяОбъекта;
	ПравилаОбъекта.СопоставлятьПоУникальномуИдентификатору = Истина;
	ПравилаОбъекта.СопоставлятьПоРеквизитам = Истина;
	ПравилаОбъекта.СопоставлятьПоПредопределенным = Истина;
	
	Реквизит = ОбъектМетаданных.СтандартныеРеквизиты.Наименование; // ОписаниеСтандартногоРеквизита, ОбъектМетаданныхРеквизит
	ОписаниеРеквизита = НовыеПравилаСопоставленияПоРеквизиту();
	ОписаниеРеквизита.ИмяРеквизита = Реквизит.Имя;
	ОписаниеРеквизита.ТипСопоставления = ТипыСопоставления.ПоЗначению;
	ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
	ПравилаОбъекта.РеквизитыДляСопоставления.Добавить(ОписаниеРеквизита);
	
	Возврат Правила;
	
КонецФункции

// Заполняет сопоставленные ссылки объектов к создани при загрузке настроек обработки
// 
// Параметры:
//  КонтекстЗагрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстЗагрузкиНастроек
Процедура ЗаполнитьСопоставленныеСсылкиОбъектовКСозданию(КонтекстЗагрузки)
	
	ПравилаСопоставления = ПравилаСопоставленияОбъектовПриСозданииНастроекОбработки();
	
	Для Каждого Элемент Из КонтекстЗагрузки.ДанныеНастроекОбработкиКСозданию Цикл
		
		ДанныеНастроекКСозданию = Элемент.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеДляСозданияНастроекОбработки
		
		ДанныеСсылок = ДанныеСсылокКСопоставлениюПоДаннымКСозданиюНастроекОбработки(ДанныеНастроекКСозданию);
		РанееСопоставленныеСсылки = ДанныеНастроекКСозданию.СопоставленныеСсылки;
		
		СопоставленныеСсылки = СопоставленныеДанные(ДанныеСсылок, ПравилаСопоставления, РанееСопоставленныеСсылки);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			ДанныеНастроекКСозданию.СопоставленныеСсылки, СопоставленныеСсылки);
		
		НесопоставленныеСсылки = Новый Массив(); // Массив Из см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеСсылкиКСопоставлению
		Для Каждого Элемент Из ДанныеНастроекКСозданию.ДанныеСсылокКСопоставлению Цикл
			
			Идентификатор = Элемент.Ключ;
			ДанныеСсылкиДляСопоставления = Элемент.Значение;
			
			СопоставленнаяСсылка = ДанныеНастроекКСозданию.СопоставленныеСсылки[Идентификатор];
			Если СопоставленнаяСсылка = Неопределено Тогда
				НесопоставленныеСсылки.Добавить(ДанныеСсылкиДляСопоставления);
			Иначе
				ДанныеСсылкиДляСопоставления.СопоставленнаяСсылка = СопоставленнаяСсылка;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ДанныеНесопоставленные Из НесопоставленныеСсылки Цикл
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для вида объекта %1 не удалось сопоставить ссылку ""%2"" типа %3'"),
				ДанныеНастроекКСозданию.ВидОбъекта,
				ДанныеНесопоставленные.Представление,
				ДанныеНесопоставленные.ИмяОбъектаМетаданных);
			
			Ошибка = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОшибкиЗагрузкиНастроекОбработки();
			Ошибка.Этап = КопированиеНастроекОбработкиКлиентСервер.ЭтапыЗагрузкиНастроекОбработки().СопоставлениеСсылок;
			Ошибка.ТекстОшибки = ТекстОшибки;
			КонтекстЗагрузки.Ошибки.Добавить(Ошибка);
			
			КонтекстЗагрузки.Отказ = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные ссылок к сопоставлению по данным к созданию настроек обработки
// 
// Параметры:
//  ДанныеНастроекКСозданию - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеДляСозданияНастроекОбработки
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеИспользуемойСсылки
Функция ДанныеСсылокКСопоставлениюПоДаннымКСозданиюНастроекОбработки(ДанныеНастроекКСозданию)
	
	ДанныеСсылокПоИдентификаторам = Новый Соответствие();
	
	Для Каждого Элемент Из ДанныеНастроекКСозданию.ДанныеСсылокКСопоставлению Цикл
		
		Идентификатор = Элемент.Ключ;
		ДанныеСсылкиДляСопоставления = Элемент.Значение;
		
		ДанныеСсылки = ДанныеСсылкиДляСопоставления.ДанныеСсылки;
		ДанныеСсылокПоИдентификаторам[Идентификатор] = ДанныеСсылки;
		
	КонецЦикла;
	
	Возврат ДанныеСсылокПоИдентификаторам;
	
КонецФункции

#КонецОбласти

// Возвращает соответствия ссылок уникальным идентификаторам, сопоставленным согласно правилам.
// 
// Параметры:
//  ДанныеСсылокКСопоставлению - Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеИспользуемойСсылки
//  ПравилаСопоставления - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - см. НовыеПравилаСопоставленияОбъектаМетаданных
//  РанееСопоставленныеСсылки - Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - ЛюбаяСсылка
Функция СопоставленныеДанные(ДанныеСсылокКСопоставлению, ПравилаСопоставления, РанееСопоставленныеСсылки)
	
	ВсеСопоставленныеДанные = ОбщегоНазначения.СкопироватьРекурсивно(РанееСопоставленныеСсылки); // Соответствие
	НовыеСопоставленныеДанные = Новый Соответствие();
	
	Контекст = НовыйКонтекстСопоставленияДанных();
	Контекст.ВсеСопоставленныеДанные = ВсеСопоставленныеДанные;
	Контекст.НовыеСопоставленныеДанные = НовыеСопоставленныеДанные;
	Контекст.ДанныеКСопоставлению = ДанныеСсылокКСопоставлению;
	Контекст.ПравилаСопоставления = ПравилаСопоставления;
	
	ВыполнитьЭтапСопоставленияПоУникальнымИдентификаторам(Контекст);
	ВыполнитьЭтапСопоставленияПредопределенных(Контекст);
	ВыполнитьЭтапСопоставленияПоРеквизитам(Контекст);
	
	Возврат Контекст.НовыеСопоставленныеДанные;
	
КонецФункции

// Контекст сопоставления данных
// 
// Возвращаемое значение:
//  Структура -  Новые параметры сопоставления по уникальным идентификаторам:
//    * ВсеСопоставленныеДанные - Соответствие Из КлючИЗначение:
//       ** Ключ - УникальныйИдентификатор
//       ** Значение - ЛюбаяСсылка
//    * НовыеСопоставленныеДанные - Соответствие Из КлючИЗначение:
//       ** Ключ - УникальныйИдентификатор
//       ** Значение - ЛюбаяСсылка
//    * ДанныеКСопоставлению - Соответствие Из КлючИЗначение:
//       ** Ключ - УникальныйИдентификатор
//       ** Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеИспользуемойСсылки
//    * ПравилаСопоставления - Соответствие Из КлючИЗначение:
//       ** Ключ - Строка - Имя объекта метаданных
//       ** Значение - см. НовыеПравилаСопоставленияОбъектаМетаданных
//    * НеоднозначноСопоставленныеДанные - Соответствие Из КлючИЗначение:
//       ** Ключ - УникальныйИдентификатор
//       ** Значение - Массив Из ЛюбаяСсылка
Функция НовыйКонтекстСопоставленияДанных()
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВсеСопоставленныеДанные", Новый Соответствие());
	Контекст.Вставить("НовыеСопоставленныеДанные", Новый Соответствие());
	Контекст.Вставить("ДанныеКСопоставлению", Новый Соответствие());
	Контекст.Вставить("ПравилаСопоставления", Новый Соответствие());
	Контекст.Вставить("НеоднозначноСопоставленныеДанные", Новый Соответствие());
	
	Возврат Контекст;
	
КонецФункции

#Область СопоставлениеПоУникальномуИдентификатору

// Выполняет сопоставление ссылок по уникальным идентификаторам
// 
// Параметры:
//  Контекст - см. НовыйКонтекстСопоставленияДанных
Процедура ВыполнитьЭтапСопоставленияПоУникальнымИдентификаторам(Контекст)
	
	КСопоставлениюПоИдентификатору = Новый Соответствие();
	Для Каждого Элемент Из Контекст.ДанныеКСопоставлению Цикл
		
		УникальныйИдентификатор = Элемент.Ключ;
		ДанныеСсылки = Элемент.Значение;
		
		Если Контекст.ВсеСопоставленныеДанные[УникальныйИдентификатор] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяМетаданного = ДанныеСсылки.ИмяОбъектаМетаданных;
		ПравилаСопоставленияОбъекта = Контекст.ПравилаСопоставления[ИмяМетаданного];
		Если ПравилаСопоставленияОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилаСопоставленияОбъекта.СопоставлятьПоУникальномуИдентификатору Тогда
			КСопоставлениюПоИдентификатору[УникальныйИдентификатор] = ДанныеСсылки;
		КонецЕсли;
		
	КонецЦикла;
	
	СопоставленныеПоУникальномуИдентификатору =
		СопоставленныеДанныеПоУникальномуИдентификатору(КСопоставлениюПоИдентификатору);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		Контекст.ВсеСопоставленныеДанные, СопоставленныеПоУникальномуИдентификатору);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		Контекст.НовыеСопоставленныеДанные, СопоставленныеПоУникальномуИдентификатору);
	
КонецПроцедуры

// Выполняет сопоставление данных по уникальным идентификаторам,
//  возвращает соответствие уникальных идентификаторов и сопоставленных ссылок
// 
// Параметры:
//  ДанныеСсылокКСопоставлению - Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеИспользуемойСсылки
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - ЛюбаяСсылка
Функция СопоставленныеДанныеПоУникальномуИдентификатору(ДанныеСсылокКСопоставлению)
	
	ПотенциальныеСсылкиПоИдентификаторам = Новый Соответствие();
	МенеджерыОбъектовПоПолнымИменам = Новый Соответствие();
	НаборПотенциальныхСсылок = Новый Массив(); // Массив Из ЛюбаяСсылка
	
	Для Каждого Элемент Из ДанныеСсылокКСопоставлению Цикл
		
		УникальныйИдентификатор = Элемент.Ключ;
		ДанныеСсылки = Элемент.Значение;
		
		ИмяМетаданного = ДанныеСсылки.ИмяОбъектаМетаданных;
		
		МенеджерОбъекта = МенеджерыОбъектовПоПолнымИменам[ИмяМетаданного]; // СправочникМенеджер, ДокументМенеджер
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМетаданного);
			МенеджерыОбъектовПоПолнымИменам[ИмяМетаданного] = МенеджерОбъекта;
		КонецЕсли;
		
		ПотенциальнаяСсылка = МенеджерОбъекта.ПолучитьСсылку(УникальныйИдентификатор);
		ПотенциальныеСсылкиПоИдентификаторам[УникальныйИдентификатор] = ПотенциальнаяСсылка;
		НаборПотенциальныхСсылок.Добавить(ПотенциальнаяСсылка);
		
	КонецЦикла;
	
	СсылкиПоИдентификаторам = Новый Соответствие();
	
	СуществующиеСсылки = СсылкиСуществуют(НаборПотенциальныхСсылок);
	Для Каждого Элемен Из ПотенциальныеСсылкиПоИдентификаторам Цикл
		
		УникальныйИдентификатор = Элемен.Ключ;
		ПотенциальнаяСсылка = Элемен.Значение; // ЛюбаяСсылка
		
		Если СуществующиеСсылки[ПотенциальнаяСсылка] = Истина Тогда
			СсылкиПоИдентификаторам[УникальныйИдентификатор] = ПотенциальнаяСсылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СсылкиПоИдентификаторам;
	
КонецФункции

// Возвращает соответствие существования ссылок
// 
// Параметры:
//  ПотенциальныеСсылки - Массив Из ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ЛюбаяСсылка
//    * Значение - Булево
Функция СсылкиСуществуют(ПотенциальныеСсылки)
	
	СуществованиеСсылок = Новый Соответствие();
	Для Каждого Ссылка Из ПотенциальныеСсылки Цикл
		СуществованиеСсылок[Ссылка] = Ложь;
	КонецЦикла;
	
	Выборка = ВыборкаСуществующихСсылок(ПотенциальныеСсылки);
	
	Пока Выборка.Следующий() Цикл
		СуществованиеСсылок[Выборка.Ссылка] = Истина;
	КонецЦикла;
	
	Возврат СуществованиеСсылок;
	
КонецФункции

// Возвращает выборку результата запроса существующих ссылок
// 
// Параметры:
//  ПотенциальныеСсылки - Массив Из ЛюбаяСсылка
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//    * Ссылка - ЛюбаяСсылка
//
Функция ВыборкаСуществующихСсылок(ПотенциальныеСсылки)
	
	ТекстыЗапроса = Новый Массив(); // Массив Из Строка
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	%ИмяОбъектаМетаданных% КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&ПотенциальныеСсылки)";
	
	ОбработанныеТипыДанных = Новый Соответствие();
	Для Каждого Ссылка Из ПотенциальныеСсылки Цикл
		
		ТипСсылки = ТипЗнч(Ссылка);
		Если ОбработанныеТипыДанных[ТипСсылки] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
			"%ИмяОбъектаМетаданных%", ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка));
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ОбъединительТаблиц =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбъединительТаблиц);
	Запрос.УстановитьПараметр("ПотенциальныеСсылки", ПотенциальныеСсылки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

#КонецОбласти

#Область СопоставлениеПоРеквизитам

// Выполняет сопоставление ссылок по реквизитам
// 
// Параметры:
//  Контекст - см. НовыйКонтекстСопоставленияДанных
Процедура ВыполнитьЭтапСопоставленияПоРеквизитам(Контекст)
	
	СопоставленыВсеВозможныеПоРеквизитам = Ложь;
	СопоставляемыеПоПредставлениюРеквизиты =
		СопоставляемыеПоПредставлениюРеквизитыИзПравилСопоставления(Контекст.ПравилаСопоставления);
	
	Пока Не СопоставленыВсеВозможныеПоРеквизитам Цикл
		
		ТаблицыРеквизитов = Новый Соответствие();
		
		Для Каждого Элемент Из Контекст.ДанныеКСопоставлению Цикл
			
			УникальныйИдентификатор = Элемент.Ключ;
			ДанныеСсылки = Элемент.Значение;
			
			Если Контекст.ВсеСопоставленныеДанные[УникальныйИдентификатор] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяОбъекта = ДанныеСсылки.ИмяОбъектаМетаданных;
			
			ПравилаСопоставленияОбъекта = Контекст.ПравилаСопоставления[ИмяОбъекта];
			Если ПравилаСопоставленияОбъекта = Неопределено
				Или Не ПравилаСопоставленияОбъекта.СопоставлятьПоРеквизитам Тогда
				
				Продолжить;
			КонецЕсли;
			
			МожноИскатьПоДанномуОбъекту = Истина;
			СтруктураРеквизитовДляПоиска = Новый Структура;
			
			Для Каждого ДанныеСопоставленияРеквизита Из ПравилаСопоставленияОбъекта.РеквизитыДляСопоставления Цикл
				
				ИмяРеквизита = ДанныеСопоставленияРеквизита.ИмяРеквизита;
				Если Не ДанныеСсылки.ЗначенияРеквизитов.Свойство(ИмяРеквизита) Тогда
					
					СтруктураРеквизитовДляПоиска.Вставить(
						ИмяРеквизита, Неопределено);
					
				Иначе
					
					ДанныеЗначенияРеквизита = ДанныеСсылки.ЗначенияРеквизитов[ИмяРеквизита]; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
					ЗначениеРеквизита = ДанныеЗначенияРеквизита.Значение;
					
					Если ТипЗнч(ЗначениеРеквизита) = Тип("УникальныйИдентификатор")
						И ОбщегоНазначения.ЭтоСсылка(ДанныеЗначенияРеквизита.Тип) Тогда
						
						НайденнаяСсылка = Контекст.ВсеСопоставленныеДанные[ЗначениеРеквизита];
						Если НайденнаяСсылка = Неопределено Тогда
							МожноИскатьПоДанномуОбъекту = Ложь;
							Прервать;
						КонецЕсли;
						
						СтруктураРеквизитовДляПоиска.Вставить(ИмяРеквизита, НайденнаяСсылка);
						
					Иначе
						
						СтруктураРеквизитовДляПоиска.Вставить(ИмяРеквизита, ЗначениеРеквизита);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не МожноИскатьПоДанномуОбъекту Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаРеквизитовОбъекта = ТаблицыРеквизитов[ИмяОбъекта];
			Если ТаблицаРеквизитовОбъекта = Неопределено Тогда
				ТаблицаРеквизитовОбъекта = НоваяТаблицаРеквизитовДляСопоставления(ПравилаСопоставленияОбъекта);
				ТаблицыРеквизитов[ИмяОбъекта] = ТаблицаРеквизитовОбъекта;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаРеквизитовОбъекта.Добавить();
			НоваяСтрока.Идентификатор = Строка(УникальныйИдентификатор);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураРеквизитовДляПоиска);
			
		КонецЦикла;
		
		Если ТаблицыРеквизитов.Количество() = 0 Тогда
			СопоставленыВсеВозможныеПоРеквизитам = Истина;
			Продолжить;
		КонецЕсли;
		
		// Пропускаем ошибку запроса в цикле, поскольку тут действительно необходимо выполнять поиск в несколько итераций
		//@skip-check query-in-loop
		СсылкиПоРеквизитам = СсылкиПоТаблицамРеквизитов(ТаблицыРеквизитов, Контекст.ПравилаСопоставления);
		
		ЕстьСопоставленныеДанныеНаИтерации = Ложь;
		Для Каждого Элемент Из СсылкиПоРеквизитам Цикл
			
			Идентификатор = Элемент.Ключ;
			ПодходящиеСсылки = Элемент.Значение;
			
			Если ПодходящиеСсылки.Количество() = 1 Тогда
				Контекст.ВсеСопоставленныеДанные[Идентификатор] = ПодходящиеСсылки[0];
				Контекст.НовыеСопоставленныеДанные[Идентификатор] = ПодходящиеСсылки[0];
				ЕстьСопоставленныеДанныеНаИтерации = Истина;
			ИначеЕсли ПодходящиеСсылки.Количество() > 1 Тогда
				ПодходящиеСсылки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодходящиеСсылки);
				Контекст.НеоднозначноСопоставленныеДанные[Идентификатор] = ПодходящиеСсылки;
				ЕстьСопоставленныеДанныеНаИтерации = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьСопоставленныеДанныеНаИтерации Тогда
			СопоставленыВсеВозможныеПоРеквизитам = Истина;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сопоставляемые по представлению реквизиты из правил сопоставления.
// 
// Параметры:
//  ПравилаСопоставления - Соответствие Из КлючИЗначение:
//     * Ключ - Строка - Имя объекта метаданных
//     * Значение - см. НовыеПравилаСопоставленияОбъектаМетаданных
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - Соответствие Из КлючИЗначение:
//      ** Ключ - Строка - Имя реквизита, сопоставляемого по представлению
//      ** Значение - Булево - Истина, если реквизит сопоставляется по представлению
Функция СопоставляемыеПоПредставлениюРеквизитыИзПравилСопоставления(ПравилаСопоставления)
	
	РеквизитыПоМетаданным = Новый Соответствие();
	
	Для Каждого Элемент Из ПравилаСопоставления Цикл
		
		ИмяОбъекта = Элемент.Ключ;
		ПравилаОбъекта = Элемент.Значение;
		
		РеквизитыОбъекта = Новый Соответствие();
		РеквизитыПоМетаданным[ИмяОбъекта] = РеквизитыОбъекта;
		
		Для Каждого ДанныеРеквизита Из ПравилаОбъекта.РеквизитыДляСопоставления Цикл
			Если ДанныеРеквизита.ТипСопоставления = ТипыСопоставленияРеквизитов().ПоСтроковомуПредставлению Тогда
				РеквизитыОбъекта[ДанныеРеквизита.ИмяРеквизита] = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РеквизитыПоМетаданным;
	
КонецФункции

// Конструктор таблицы реквизитов для сопоставления ссылок
// 
// Параметры:
//  ПравилаСопоставленияОбъекта - см. НовыеПравилаСопоставленияОбъектаМетаданных
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * Идентификатор - Строка
//  
Функция НоваяТаблицаРеквизитовДляСопоставления(ПравилаСопоставленияОбъекта)
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений();
	ТаблицаРеквизитов.Колонки.Добавить("Идентификатор",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	
	Если ПравилаСопоставленияОбъекта.РеквизитыДляСопоставления.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Невозможно сформировать таблицу реквизитов для сопоставления объекта %1, поскольку не заполнены реквизиты для сопоставления'"),
			ПравилаСопоставленияОбъекта.ИмяОбъектаМетаданных);
	КонецЕсли;
	
	Для Каждого ДанныеРеквизита Из ПравилаСопоставленияОбъекта.РеквизитыДляСопоставления Цикл
		
		ТаблицаРеквизитов.Колонки.Добавить(ДанныеРеквизита.ИмяРеквизита, ДанныеРеквизита.ТипЗначения);
		
	КонецЦикла;
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// Возвращает подходящие ссылки по таблицам значений реквизитов уникальных идентификаторов
// 
// Параметры:
//  ТаблицыМетаданныхКСопоставлению - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - см. НоваяТаблицаРеквизитовДляСопоставления
//  ПравилаСопоставления - Соответствие Из КлючИЗначение:
//     * Ключ - Строка - Имя объекта метаданных
//     * Значение - см. НовыеПравилаСопоставленияОбъектаМетаданных
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - Массив Из ЛюбаяСсылка
Функция СсылкиПоТаблицамРеквизитов(ТаблицыМетаданныхКСопоставлению, ПравилаСопоставления)
	
	СсылкиПоИдентификаторам = Новый Соответствие();
	Для Каждого Элемент Из ТаблицыМетаданныхКСопоставлению Цикл
		
		ТаблицаРеквизитов = Элемент.Значение;
		Для Каждого Строка Из ТаблицаРеквизитов Цикл
			ИдентификаторСсылки = Новый УникальныйИдентификатор(Строка.Идентификатор);
			СсылкиПоИдентификаторам[ИдентификаторСсылки] = Новый Массив();
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицыСсылокПоИменамМетаданных =
		ТаблицыСсылокПоТаблицамМетаданныхКСопоставлению(ТаблицыМетаданныхКСопоставлению, ПравилаСопоставления);
	
	ИменаРеквизитовОбъектовМетаданных = ИменаРеквизитовОбъектовМетаданныхПоТипамСопоставления(ПравилаСопоставления);
	
	Для Каждого Элемент Из ТаблицыМетаданныхКСопоставлению Цикл
		
		ИмяМетаданного = Элемент.Ключ;
		ТаблицаРеквизитов = Элемент.Значение;
		
		ИменаРеквизитов = ИменаРеквизитовОбъектовМетаданных[ИмяМетаданного];
		
		ТаблицаСсылок = ТаблицыСсылокПоИменамМетаданных[ИмяМетаданного];
		ТаблицаРеквизитов = ТаблицыМетаданныхКСопоставлению[ИмяМетаданного];
		
		Если ИменаРеквизитов.СопоставляемыеПоЗначению.Количество() > 0
			И ИменаРеквизитов.СопоставляемыеПоПредставлению.Количество() = 0 Тогда
			
			Для Каждого Строка Из ТаблицаСсылок Цикл
				
				ИдентификаторСсылки = Новый УникальныйИдентификатор(Строка.Идентификатор);
				СсылкиИдентификатора = СсылкиПоИдентификаторам[ИдентификаторСсылки]; // Массив Из ЛюбаяСсылка
				СсылкиИдентификатора.Добавить(Строка.Ссылка);
				
			КонецЦикла;
			
		ИначеЕсли ИменаРеквизитов.СопоставляемыеПоПредставлению.Количество() > 0 Тогда 
			
			Для Каждого СтрокаРеквизитов Из ТаблицаРеквизитов Цикл
				
				ИдентификаторДляПоиска = ?(ИменаРеквизитов.СопоставляемыеПоЗначению.Количество() > 0,
					СтрокаРеквизитов.Идентификатор, УникальныйИдентификаторПустой());
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Идентификатор", ИдентификаторДляПоиска);
				Для Каждого ИмяРеквизита Из ИменаРеквизитов.СопоставляемыеПоПредставлению Цикл
					СтруктураПоиска.Вставить(ИмяРеквизита, СтрокаРеквизитов[ИмяРеквизита]);
				КонецЦикла;
				
				СтрокиОтобранныеПоПредставлениям = ТаблицаСсылок.НайтиСтроки(СтруктураПоиска);
				ИдентификаторСсылки = Новый УникальныйИдентификатор(СтрокаРеквизитов.Идентификатор);
				СсылкиИдентификатора = СсылкиПоИдентификаторам[ИдентификаторСсылки]; // Массив Из ЛюбаяСсылка
				Для Каждого СтрокаОтобранная Из СтрокиОтобранныеПоПредставлениям Цикл
					СсылкиИдентификатора.Добавить(СтрокаОтобранная.Ссылка);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СсылкиПоИдентификаторам;
	
КонецФункции

// Таблицы ссылок объектов БД, имеющие те же значения реквизитов сопоставляемых по значениям,
//   что и в таблицах метаданных для сопоставления
//  
//  Т.е. допустим, что для Справочника А мы имеем таблицу:
//    |Идентификатор|РеквизитПоЗначению1|РеквизитПоЗначению2|РеквизитПоПредставлению1|РеквизитПоПредставлению2|
//  тогда на выходе для этого метаданного получим таблицу
//    |Идентификатор|Ссылка|РеквизитПоПредставлению1|РеквизитПоПредставлению2|
//  в которой мы уверены что для данного идентификатора все ссылки для данного идентификатора имеют РеквизиПоЗначению
//   из исходной таблицы.
//  Реквизиты по представлению берутся не из исходной таблицы, а из базы данных.
//  Таблица индексирована по полям "Идентификатор, РеквизитПоПредставлению1, РеквизитПоПредставлению2, ..."
//  
//  Если реквизитов, сопоставляемых по значению нет, то колонка идентификатор в результирующей таблице будет пустой.
// 
// Параметры:
//  ТаблицыМетаданныхКСопоставлению - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - см. НоваяТаблицаРеквизитовДляСопоставления
//  ПравилаСопоставления - Соответствие Из КлючИЗначение:
//     * Ключ - Строка - Имя объекта метаданных
//     * Значение - см. НовыеПравилаСопоставленияОбъектаМетаданных
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - ТаблицаЗначений:
//      ** Идентификатор - Строка
//      ** Ссылка - ЛюбаяСсылка
//
Функция ТаблицыСсылокПоТаблицамМетаданныхКСопоставлению(ТаблицыМетаданныхКСопоставлению, ПравилаСопоставления)
	
	ИменаРеквизитовОбъектовМетаданных = ИменаРеквизитовОбъектовМетаданныхПоТипамСопоставления(ПравилаСопоставления);
	
	Запрос = Новый Запрос;
	ТекстыЗапросов = Новый Массив(); // Массив Из Строка
	
	ИндексыТаблицПоИменамМетаданных = Новый Соответствие();
	ТекущийИндексТаблицы = 0;
	
	ШаблонТекстаВыборкиИзТаблицыРеквизитов =
		"ВЫБРАТЬ
		|	%ИмяТаблицы%.Идентификатор КАК Идентификатор,
		|	%ПоляРеквизитов%
		|ПОМЕСТИТЬ %ИмяВременнойТаблицы%
		|ИЗ
		|	&%ИмяТаблицы% КАК %ИмяТаблицы%";
	
	Для Каждого Элемент Из ТаблицыМетаданныхКСопоставлению Цикл
		
		ИмяОбъекта = Элемент.Ключ;
		ТаблицаРеквизитов = Элемент.Значение;
		
		ИменаРеквизитов = ИменаРеквизитовОбъектовМетаданных[ИмяОбъекта];
		Если ИменаРеквизитов.СопоставляемыеПоЗначению.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицыЗапроса = СтрШаблон("ТаблицаРеквизитов_%1", СтрЗаменить(ИмяОбъекта, ".", "_"));
		ИмяВременнойТаблицы = СтрШаблон("Реквизиты_%1", СтрЗаменить(ИмяОбъекта, ".", "_"));
		
		ТекстыПолейРеквизитов = Новый Массив(); // Массив Из Строка
		Для Каждого ИмяРеквизита Из ИменаРеквизитов.СопоставляемыеПоЗначению Цикл
			ТекстыПолейРеквизитов.Добавить(СтрШаблон("	%1.%2 КАК %2", ИмяТаблицыЗапроса, ИмяРеквизита));
		КонецЦикла;
		
		ТекстЗапроса = ШаблонТекстаВыборкиИзТаблицыРеквизитов;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицыЗапроса);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляРеквизитов%",
			СтрСоединить(ТекстыПолейРеквизитов, "," + Символы.ПС + Символы.Таб));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяВременнойТаблицы%", ИмяВременнойТаблицы);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр(ИмяТаблицыЗапроса, ТаблицаРеквизитов);
		ТекущийИндексТаблицы = ТекущийИндексТаблицы + 1;
		
	КонецЦикла;
	
	ШаблонТекстаСоединенияСТаблицей =
		"ВЫБРАТЬ
		|	%ПоляТаблицы%
		|ИЗ
		|	%ИмяМетаданного% КАК %ИмяТаблицыДанных%
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ИмяВременнойТаблицы% КАК %ИмяВременнойТаблицы%
		|		ПО %ТекстСоединенияТаблиц%";
	
	Для Каждого Элемент Из ТаблицыМетаданныхКСопоставлению Цикл
		
		ИмяОбъекта = Элемент.Ключ;
		ТаблицаРеквизитов = Элемент.Значение;
		
		ИменаРеквизитов = ИменаРеквизитовОбъектовМетаданных[ИмяОбъекта];
		Если ИменаРеквизитов.СопоставляемыеПоЗначению.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицыДанных = СтрЗаменить(ИмяОбъекта, ".", "_");
		ИмяВременнойТаблицы = СтрШаблон("Реквизиты_%1", СтрЗаменить(ИмяОбъекта, ".", "_"));
		
		ТекстыСоединенияТаблиц = Новый Массив(); // Массив Из Строка
		Для Каждого ИмяРеквизита Из ИменаРеквизитов.СопоставляемыеПоЗначению Цикл
			ТекстСоединенияПоля = СтрШаблон(
				"%1.%3 = %2.%3",
				ИмяТаблицыДанных, ИмяВременнойТаблицы, ИмяРеквизита);
			ТекстыСоединенияТаблиц.Добавить(ТекстСоединенияПоля);
		КонецЦикла;
		
		ТекстыПолейТаблицы = Новый Массив(); // Массив Из Строка
		ТекстыПолейТаблицы.Добавить(СтрШаблон(
			"%1.%2 КАК %2",
			ИмяВременнойТаблицы, "Идентификатор"));
		ТекстыПолейТаблицы.Добавить(СтрШаблон(
			"%1.%2 КАК %2",
			ИмяТаблицыДанных, "Ссылка"));
		Для Каждого ИмяРеквизита Из ИменаРеквизитов.СопоставляемыеПоПредставлению Цикл
			ТекстыПолейТаблицы.Добавить(СтрШаблон(
				"ПРЕДСТАВЛЕНИЕ(%1.%2) КАК %2",
				ИмяТаблицыДанных, ИмяРеквизита));
		КонецЦикла;
		
		ТекстЗапроса = ШаблонТекстаСоединенияСТаблицей;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыДанных%", ИмяТаблицыДанных);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстСоединенияТаблиц%",
			СтрСоединить(ТекстыСоединенияТаблиц, Символы.ПС + Символы.Таб + Символы.Таб + "И "));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляТаблицы%",
			СтрСоединить(ТекстыПолейТаблицы, "," + Символы.ПС + Символы.Таб));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяВременнойТаблицы%", ИмяВременнойТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяМетаданного%", ИмяОбъекта);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		ИндексыТаблицПоИменамМетаданных[ИмяОбъекта] = ТекущийИндексТаблицы;
		ТекущийИндексТаблицы = ТекущийИндексТаблицы + 1;
		
	КонецЦикла;
	
	ШаблонТекстаТаблицТолькоСтроковогоСопоставления =
		"ВЫБРАТЬ
		|	%ПоляТаблицы%
		|ИЗ
		|	%ИмяМетаданного% КАК %ИмяТаблицыДанных%";
	
	Для Каждого Элемент Из ТаблицыМетаданныхКСопоставлению Цикл
		
		ИмяОбъекта = Элемент.Ключ;
		ТаблицаРеквизитов = Элемент.Значение;
		
		ИменаРеквизитов = ИменаРеквизитовОбъектовМетаданных[ИмяОбъекта];
		Если ИменаРеквизитов.СопоставляемыеПоЗначению.Количество() > 0
			Или ИменаРеквизитов.СопоставляемыеПоПредставлению.Количество() = 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицыДанных = СтрЗаменить(ИмяОбъекта, ".", "_");
		
		ТекстыПолейТаблицы = Новый Массив(); // Массив Из Строка
		ТекстыПолейТаблицы.Добавить("&ПустойУникальныйИдентификатор КАК Идентификатор");
		ТекстыПолейТаблицы.Добавить(СтрШаблон(
			"%1.%2 КАК %2",
			ИмяТаблицыДанных, "Ссылка"));
		Для Каждого ИмяРеквизита Из ИменаРеквизитов.СопоставляемыеПоПредставлению Цикл
			ТекстыПолейТаблицы.Добавить(СтрШаблон(
				"ПРЕДСТАВЛЕНИЕ(%1.%2) КАК %2",
				ИмяТаблицыДанных, ИмяРеквизита));
		КонецЦикла;
		
		ТекстЗапроса = ШаблонТекстаТаблицТолькоСтроковогоСопоставления;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыДанных%", ИмяТаблицыДанных);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляТаблицы%",
			СтрСоединить(ТекстыПолейТаблицы, "," + Символы.ПС + Символы.Таб));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяМетаданного%", ИмяОбъекта);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		ИндексыТаблицПоИменамМетаданных[ИмяОбъекта] = ТекущийИндексТаблицы;
		ТекущийИндексТаблицы = ТекущийИндексТаблицы + 1;
		
		Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", УникальныйИдентификаторПустой());
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицыСсылок = Новый Соответствие();
	Для Каждого Элемент Из ИндексыТаблицПоИменамМетаданных Цикл
		
		ИмяМетаданного = Элемент.Ключ;
		ИндексТаблицы = Элемент.Значение;
		
		ТаблицаСсылок = РезультатыЗапроса[ИндексТаблицы].Выгрузить();
		
		ПоляИндекса = Новый Массив(); // Массив Из Строка
		ПоляИндекса.Добавить("Идентификатор");
		ИменаРеквизитов = ИменаРеквизитовОбъектовМетаданных[ИмяМетаданного];
		Для Каждого ИмяРеквизита Из ИменаРеквизитов.СопоставляемыеПоПредставлению Цикл
			ПоляИндекса.Добавить(ИмяРеквизита);
		КонецЦикла;
		ТаблицаСсылок.Индексы.Добавить(СтрСоединить(ПоляИндекса, ","));
		
		ТаблицыСсылок[ИмяМетаданного] = РезультатыЗапроса[ИндексТаблицы].Выгрузить();
		
	КонецЦикла;
	
	Возврат ТаблицыСсылок;
	
КонецФункции

// Возвращает имена реквизитов по типу сопоставления для объектов метаданных
// 
// Параметры:
//  ПравилаСопоставления - Соответствие Из КлючИЗначение:
//     * Ключ - Строка - Имя объекта метаданных
//     * Значение - см. НовыеПравилаСопоставленияОбъектаМетаданных
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - Структура:
//      ** СопоставляемыеПоЗначению - Массив Из Строка - Имена реквизитов, которые сопоставляются по значению
//      ** СопоставляемыеПоПредставлению - Массив Из Строка - Имена реквизитов, сопоставляемых по строковому представлению
//
Функция ИменаРеквизитовОбъектовМетаданныхПоТипамСопоставления(ПравилаСопоставления)
	
	ИменаРеквизитовОбъектовМетаданных = Новый Соответствие();
	
	ТипыСопоставления = ТипыСопоставленияРеквизитов();
	
	Для Каждого Элемент Из ПравилаСопоставления Цикл
		
		ИмяОбъектаМетаданных = Элемент.Ключ;
		ПравилаОбъекта = Элемент.Значение;
		
		РеквизитыПоЗначению = Новый Массив(); // Массив Из Строка
		РеквизитыПоПредставлению = Новый Массив(); // Массив Из Строка
		
		ИменаРеквизитов = Новый Структура;
		ИменаРеквизитов.Вставить("СопоставляемыеПоЗначению", РеквизитыПоЗначению);
		ИменаРеквизитов.Вставить("СопоставляемыеПоПредставлению", РеквизитыПоПредставлению);
		
		ИменаРеквизитовОбъектовМетаданных[ИмяОбъектаМетаданных] = ИменаРеквизитов;
		
		Если Не ПравилаОбъекта.СопоставлятьПоРеквизитам Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Реквизит Из ПравилаОбъекта.РеквизитыДляСопоставления Цикл
			
			Если Реквизит.ТипСопоставления = ТипыСопоставления.ПоЗначению Тогда
				РеквизитыПоЗначению.Добавить(Реквизит.ИмяРеквизита);
			ИначеЕсли Реквизит.ТипСопоставления = ТипыСопоставления.ПоСтроковомуПредставлению Тогда
				РеквизитыПоПредставлению.Добавить(Реквизит.ИмяРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ИменаРеквизитовОбъектовМетаданных;
	
КонецФункции

#КонецОбласти

#Область СопоставлениеПредопределенных

// Выполняет сопоставление данных по именам предопределенных
// 
// Параметры:
//  Контекст - см. НовыйКонтекстСопоставленияДанных
Процедура ВыполнитьЭтапСопоставленияПредопределенных(Контекст)
	
	ИменаПредопределенныхПоИдентификаторамПоИменамМетаданных = Новый Соответствие();
	
	Для Каждого Элемент Из Контекст.ДанныеКСопоставлению Цикл
		
		Идентификатор = Элемент.Ключ;
		ДанныеСсылки = Элемент.Значение;
		
		Если Контекст.ВсеСопоставленныеДанные[Идентификатор] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = ДанныеСсылки.ИмяОбъектаМетаданных;
		
		ПравилаСопоставленияОбъекта = Контекст.ПравилаСопоставления[ИмяОбъекта];
		Если ПравилаСопоставленияОбъекта = Неопределено
			Или Не ПравилаСопоставленияОбъекта.СопоставлятьПоПредопределенным Тогда
			
			Продолжить;
		КонецЕсли;
		
		ЗначенияРеквизитов = ДанныеСсылки.ЗначенияРеквизитов;
		
		РеквизитПредопределенный = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С();
		Если Не ЗначенияРеквизитов.Свойство("Предопределенный", РеквизитПредопределенный) Тогда
			Продолжить;
		КонецЕсли;
		Если Не РеквизитПредопределенный.Значение = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитИмениПредопределенного = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С();
		Если Не ЗначенияРеквизитов.Свойство("ИмяПредопределенныхДанных", РеквизитИмениПредопределенного) Тогда
			Продолжить;
		КонецЕсли;
		Если Не РеквизитИмениПредопределенного.Тип = Тип("Строка")
			Или Не ЗначениеЗаполнено(РеквизитИмениПредопределенного.Значение) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ИмяПредопределенного = РеквизитИмениПредопределенного.Значение;
		
		ИменаПредопределенныхПоИдентификаторам = ИменаПредопределенныхПоИдентификаторамПоИменамМетаданных[ИмяОбъекта]; // Соответствие
		Если ИменаПредопределенныхПоИдентификаторам = Неопределено Тогда
			ИменаПредопределенныхПоИдентификаторам = Новый Соответствие();
			ИменаПредопределенныхПоИдентификаторамПоИменамМетаданных[ИмяОбъекта] =
				ИменаПредопределенныхПоИдентификаторам;
		КонецЕсли;
		
		ИменаПредопределенныхПоИдентификаторам[Идентификатор] = ИмяПредопределенного;
		
	КонецЦикла;
	
	Если ИменаПредопределенныхПоИдентификаторамПоИменамМетаданных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СопоставленныеСсылки = СопоставленныеДанныеПоИменамПредопределенных(
		ИменаПредопределенныхПоИдентификаторамПоИменамМетаданных);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		Контекст.ВсеСопоставленныеДанные, СопоставленныеСсылки);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		Контекст.НовыеСопоставленныеДанные, СопоставленныеСсылки);
	
КонецПроцедуры

// Возвращает соответствие ссылок уникальным идентификаторам по именам предопределенных данных
// 
// Параметры:
//  ИменаПредопределенныхДанныхКСопоставлению - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Полное имя объекта метаданных
//    * Значение - Соответствие Из КлючИЗначение:
//      ** Ключ - УникальныйИдентификатор - ГУИД ссылки к сопоставлению
//      ** Значение - Строка - Имя предопределенных данных ГУИДа
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - ЛюбаяСсылка
Функция СопоставленныеДанныеПоИменамПредопределенных(ИменаПредопределенныхДанныхКСопоставлению)
	
	ИдентификаторыПоИменамПредопределенныхПоМетаданным = Новый Соответствие();
	ИменаПредопределенныхПоИменамМетаданных = Новый Соответствие();
	Для Каждого ЭлементОбъектаМетаданных Из ИменаПредопределенныхДанныхКСопоставлению Цикл
		
		ИмяМетаданного = ЭлементОбъектаМетаданных.Ключ;
		ИменаПредопределенныхПоИдентификаторам = ЭлементОбъектаМетаданных.Значение;
		
		ИменаПредопределенных = Новый Массив(); // Массив Из Строка
		ИменаПредопределенныхПоИменамМетаданных[ИмяМетаданного] = ИменаПредопределенных;
		
		ИдентификаторыПоИменамПредопределенных = Новый Соответствие();
		ИдентификаторыПоИменамПредопределенныхПоМетаданным[ИмяМетаданного] = ИдентификаторыПоИменамПредопределенных;
		
		Для Каждого ЭлементИдентификатора Из ИменаПредопределенныхПоИдентификаторам Цикл
			
			Идентификатор = ЭлементИдентификатора.Ключ;
			ИмяПредопределенныхДанных = ЭлементИдентификатора.Значение;
			ИменаПредопределенных.Добавить(ИмяПредопределенныхДанных);
			
			ИдентификаторыИмени = ИдентификаторыПоИменамПредопределенных[ИмяПредопределенныхДанных]; // Массив Из УникальныйИдентификатор
			Если ИдентификаторыИмени = Неопределено Тогда
				ИдентификаторыИмени = Новый Массив();
				ИдентификаторыПоИменамПредопределенных[ИмяПредопределенныхДанных] = ИдентификаторыИмени;
			КонецЕсли;
			ИдентификаторыИмени.Добавить(Идентификатор);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыборкиПоИменамМетаданных = ВыборкиСсылокПоИменамПредопределенныхДанных(ИменаПредопределенныхПоИменамМетаданных);
	
	СопоставленныеДанные = Новый Соответствие();
	Для Каждого Элемент Из ВыборкиПоИменамМетаданных Цикл
		
		ИмяМетаданного = Элемент.Ключ;
		Выборка = Элемент.Значение;
		
		ИдентификаторыПоИменамПредопределенных = ИдентификаторыПоИменамПредопределенныхПоМетаданным[ИмяМетаданного]; // Соответствие
		
		Пока Выборка.Следующий() Цикл
			
			ИмяПредопределенного = Выборка.ИмяПредопределенныхДанных;
			Ссылка = Выборка.Ссылка;
			
			ИдентификаторыИмени = ИдентификаторыПоИменамПредопределенных[ИмяПредопределенного]; // Массив Из УникальныйИдентификатор
			Для Каждого Идентификатор Из ИдентификаторыИмени Цикл
				СопоставленныеДанные[Идентификатор] = Ссылка;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СопоставленныеДанные;
	
КонецФункции

// Выборки ссылок по именам предопределенных данных.
// 
// Параметры:
//  ИменаПредопределенныхДанныхПоОбъектам - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - Массив Из Строка - Имена предопределенных по имени метаданного
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта метаданных
//    * Значение - ВыборкаИзРезультатаЗапроса:
//      ** ИмяПредопределенныхДанных - Строка
//      ** Ссылка - ЛюбаяСсылка
//
Функция ВыборкиСсылокПоИменамПредопределенныхДанных(ИменаПредопределенныхДанныхПоОбъектам)
	
	Запрос = Новый Запрос;
	ТекстыЗапросов = Новый Массив(); // Массив Из Строка
	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	Таблица.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	%ИмяОбъектаМетаданных% КАК Таблица
		|ГДЕ
		|	Таблица.ИмяПредопределенныхДанных В (&%ИменаПредопределенных%)";
	
	ИндексыТаблицПоИменамМетаданных = Новый Соответствие();
	ТекущийИндексТаблицы = 0;
	
	Для Каждого Элемент Из ИменаПредопределенныхДанныхПоОбъектам Цикл
		
		ИмяМетаданного = Элемент.Ключ;
		ИменаПредопределенных = Элемент.Значение;
		
		ИмяПараметраИменПредопределенных = СтрШаблон("ИменаПредопределенных_%1",
			СтрЗаменить(ИмяМетаданного, ".", "_"));
		
		ТекстЗапроса = ШаблонТекстаЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъектаМетаданных%", ИмяМетаданного);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИменаПредопределенных%", ИмяПараметраИменПредопределенных);
		
		Запрос.УстановитьПараметр(ИмяПараметраИменПредопределенных, ИменаПредопределенных);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		ИндексыТаблицПоИменамМетаданных[ИмяМетаданного] = ТекущийИндексТаблицы;
		ТекущийИндексТаблицы = ТекущийИндексТаблицы + 1;
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкиПоИменамМетаданных = Новый Соответствие();
	Для Каждого Элемент Из ИндексыТаблицПоИменамМетаданных Цикл
		
		ИмяМетаданного = Элемент.Ключ;
		ИндексТаблицы = Элемент.Значение;
		
		ВыборкиПоИменамМетаданных[ИмяМетаданного] = РезультатыЗапроса[ИндексТаблицы].Выбрать();
		
	КонецЦикла;
	
	Возврат ВыборкиПоИменамМетаданных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеДанныхКСозданию

// Заполняет данные для создания настроек обработки при загрузке настроек из файла
// 
// Параметры:
//  КонтекстЗагрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстЗагрузкиНастроек
//
Процедура ЗаполнитьДанныеДляСозданияНастроекОбработки(КонтекстЗагрузки)
	
	СопоставленныеВидыОбъектов = КонтекстЗагрузки.СоответствиеВидовОбъектов;
	
	ДанныеНастроекПоВидамОбъектов = Новый Соответствие();
	Для Каждого ДанныеНастроек Из КонтекстЗагрузки.ПрочитанныеДанные.ВыгруженныеНастройки Цикл
		
		ИдентификаторВидаОбъекта = ДанныеНастроек.ВидОбъекта.Значение;
		ВидОбъекта = СопоставленныеВидыОбъектов[ИдентификаторВидаОбъекта];
		
		Если ЗначениеЗаполнено(ВидОбъекта) Тогда
			ДанныеНастроекПоВидамОбъектов[ВидОбъекта] = ДанныеНастроек;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеКСозданию = Новый Соответствие();
	ОшибкиПолучения = Новый Массив(); // Массив Из Строка
	
	Для Каждого Элемент Из ДанныеНастроекПоВидамОбъектов Цикл
		
		ВидОбъекта = Элемент.Ключ; // ОпределяемыйТип.ВидОбъектаСОбработкой
		ДанныеНастроек = Элемент.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработки
		
		КонтекстСопоставленныхСсылок = Новый Соответствие();
		КонтекстСопоставленныхСсылок[ДанныеНастроек.ВидОбъекта.Значение] = ВидОбъекта;
		
		КонтекстПолучения = НовыйКонтекстПолученияОбъектовКСозданиюНастроекОбработки();
		КонтекстПолучения.ДанныеИспользуемыхСсылок = КонтекстЗагрузки.ПрочитанныеДанные.ДанныеИспользуемыхСсылок;
		КонтекстПолучения.КонтекстСопоставленныхСсылок = КонтекстСопоставленныхСсылок;
		
		ДанныеДляСоздания = ДанныеНастроекОбработкиКСозданиюПоДаннымВыгруженныхНастроек(
			ДанныеНастроек, КонтекстПолучения);
		
		ДанныеКСозданию[ВидОбъекта] = ДанныеДляСоздания;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиПолучения, КонтекстПолучения.ОшибкиПриПолучении);
		
	КонецЦикла;
	
	Для Каждого ТекстОшибки Из ОшибкиПолучения Цикл
		
		Ошибка = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОшибкиЗагрузкиНастроекОбработки();
		Ошибка.Этап = КопированиеНастроекОбработкиКлиентСервер.ЭтапыЗагрузкиНастроекОбработки().ПроверкаПрочитанныхДанных;
		Ошибка.ТекстОшибки = ТекстОшибки;
		
		КонтекстЗагрузки.Ошибки.Добавить(Ошибка);
		КонтекстЗагрузки.Отказ = Истина;
		
	КонецЦикла;
	
	КонтекстЗагрузки.ДанныеНастроекОбработкиКСозданию = ДанныеКСозданию;
	УстановитьПараметрыСоздаваемыхОбъектовНастроекОбработки(КонтекстЗагрузки);
	
КонецПроцедуры

// Конструктор контекста получения объектов к созданию
// 
// Возвращаемое значение:
//  Структура:
//    * КонтекстСопоставленныхСсылок - Соответствие Из КлючИЗначение:
//       ** Ключ - УникальныйИдентификатор
//       ** Значение - ЛюбаяСсылка
//    * ОшибкиПриПолучении - Массив Из Строка
//    * СсылкиКСопоставлению - Соответствие Из КлючИЗначение:
//        ** Ключ - УникальныйИдентификатор
//        ** Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеСсылкиКСопоставлению
//    * ДанныеИспользуемыхСсылок - Соответствие Из КлючИЗначение:
//      ** Ключ - УникальныйИдентификатор
//      ** Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеИспользуемойСсылки
//    * ИдентификаторыОбъектовВышеПоСтеку - Соответствие Из КлючИЗначение:
//      ** Ключ - УникальныйИдентификатор
//      ** Значение - Булево
//    * ТекущийПутьСсылки - Массив Из Строка
//
Функция НовыйКонтекстПолученияОбъектовКСозданиюНастроекОбработки()
	
	Контекст = Новый Структура;
	Контекст.Вставить("КонтекстСопоставленныхСсылок", Новый Соответствие());
	Контекст.Вставить("ОшибкиПриПолучении", Новый Массив());
	Контекст.Вставить("СсылкиКСопоставлению", Новый Соответствие());
	Контекст.Вставить("ДанныеИспользуемыхСсылок", Новый Соответствие());
	Контекст.Вставить("ИдентификаторыОбъектовВышеПоСтеку", Новый Соответствие());
	Контекст.Вставить("ТекущийПутьСсылки", Новый Массив());
	
	Возврат Контекст;
	
КонецФункции

// Возвращает данные для создания настроек обработки по полученным из xml-файла настроек выгрузки
// 
// Параметры:
//  ДанныеВыгруженные - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработки
//  Контекст - см. НовыйКонтекстПолученияОбъектовКСозданиюНастроекОбработки
// 
// Возвращаемое значение:
//  см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеДляСозданияНастроекОбработки
Функция ДанныеНастроекОбработкиКСозданиюПоДаннымВыгруженныхНастроек(ДанныеВыгруженные, Контекст)
	
	ДанныеДляСоздания = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеДляСозданияНастроекОбработки();
	
	ИдентификаторВидаОбъекта = ДанныеВыгруженные.ВидОбъекта.Значение;
	ВидОбъекта = Контекст.КонтекстСопоставленныхСсылок[ИдентификаторВидаОбъекта]; // ОпределяемыйТип.ВидОбъектаСОбработкой
	Если Не ЗначениеЗаполнено(ВидОбъекта) Тогда
		ВызватьИсключение НСтр("ru = 'Не сопотавлен вид объекта'");
	КонецЕсли;
	
	ДанныеДляСоздания.ВидОбъекта = ВидОбъекта;
	
	Контекст.ТекущийПутьСсылки.Добавить("НастройкиОбрабоки");
	
	ДанныеДляСоздания.НастройкиОбработки =
		ЗначениеРеквизитаОбъектаПоЗначению1СКСозданию(ДанныеВыгруженные.НастройкиОбрабоки, Контекст);
	
	// Удаляем НастройкиОбрабоки
	Контекст.ТекущийПутьСсылки.Удалить(Контекст.ТекущийПутьСсылки.ВГраница());
	
	ИндексПараметровСхем = 0;
	Для Каждого ПараметрыСхемы Из ДанныеВыгруженные.ПараметрыСхем Цикл
		
		Контекст.ТекущийПутьСсылки.Добавить(СтрШаблон("ПараметрыСхем[%1]", ИндексПараметровСхем));
		
		ДанныеПараметровСхемы =
			ЗначениеРеквизитаОбъектаПоЗначению1СКСозданию(ПараметрыСхемы, Контекст);
		ДанныеДляСоздания.ПараметрыСхем.Добавить(ДанныеПараметровСхемы);
		
		// Удаляем ПараметрыСхем[%1]
		Контекст.ТекущийПутьСсылки.Удалить(Контекст.ТекущийПутьСсылки.ВГраница());
		ИндексПараметровСхем = ИндексПараметровСхем + 1;
		
	КонецЦикла;
	
	НаборПравил = НаборДанныхПравилОбработки(ДанныеВыгруженные, Контекст);
	ДанныеДляСоздания.ПравилаОбработки = НаборПравил;
	
	ДанныеДляСоздания.ДанныеСсылокКСопоставлению = Контекст.СсылкиКСопоставлению;
	ДанныеДляСоздания.СопоставленныеСсылки = Контекст.КонтекстСопоставленныхСсылок;
	
	Возврат ДанныеДляСоздания;
	
КонецФункции

// Возвращает набор данных правил обработки для создания
// 
// Параметры:
//  ДанныеВыгруженные - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеНастроекОбработки
//  Контекст - см. НовыйКонтекстПолученияОбъектовКСозданиюНастроекОбработки
// 
// Возвращаемое значение:
//  см. КопированиеНастроекОбработкиКлиентСервер.НовыйНаборПравилОбработкиДляСоздания
Функция НаборДанныхПравилОбработки(ДанныеВыгруженные, Контекст)
	
	НаборПравил = КопированиеНастроекОбработкиКлиентСервер.НовыйНаборПравилОбработкиДляСоздания();
	
	ИндексПравил = 0;
	Для Каждого ДанныеПравил Из ДанныеВыгруженные.ПравилаОбработки Цикл
		
		ПравилаДляСоздания = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеПравилОбработкиДляСоздания();
		
		Контекст.ТекущийПутьСсылки.Добавить(СтрШаблон("ПравилаОбработки[%1]", ИндексПравил));
		
		Контекст.ТекущийПутьСсылки.Добавить("ПравилоОбработки");
		ПравилаДляСоздания.ПравилоОбработки =
			ЗначениеРеквизитаОбъектаПоЗначению1СКСозданию(ДанныеПравил.ПравилоОбработки, Контекст);
		Контекст.ТекущийПутьСсылки.Удалить(Контекст.ТекущийПутьСсылки.ВГраница());
		
		Контекст.ТекущийПутьСсылки.Добавить("ВидДействия");
		ПравилаДляСоздания.ВидДействия =
			ЗначениеРеквизитаОбъектаПоЗначению1СКСозданию(ДанныеПравил.ВидДействия, Контекст);
		Контекст.ТекущийПутьСсылки.Удалить(Контекст.ТекущийПутьСсылки.ВГраница());
		
		Контекст.ТекущийПутьСсылки.Добавить("Настройка");
		ПравилаДляСоздания.Настройка =
			ЗначениеРеквизитаОбъектаПоЗначению1СКСозданию(ДанныеПравил.Настройка, Контекст);
		Контекст.ТекущийПутьСсылки.Удалить(Контекст.ТекущийПутьСсылки.ВГраница());
		
		ПравилаДляСоздания.НастройкаВключена = ДанныеПравил.НастройкаВключена.Значение;
		
		// Удаляем ПравилаОбработки[%1]
		Контекст.ТекущийПутьСсылки.Удалить(Контекст.ТекущийПутьСсылки.ВГраница());
		ИндексПравил = ИндексПравил + 1;
		
		НаборПравил.Добавить(ПравилаДляСоздания);
		
	КонецЦикла;
	
	Возврат НаборПравил;
	
КонецФункции

// Указывает, необходимо ли создавать объект по имени метаданного
// 
// Параметры:
//  ИмяОбъектаМетаданных - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ОбъектНеобходимоСоздаватьПриЗагрузкеНастроекОбработки(ИмяОбъектаМетаданных)
	
	СоздаваемыеОбъекты = Новый Соответствие();
	СоздаваемыеОбъекты["Справочник.НастройкиОбработкиВидовОбъектов"] = Истина;
	СоздаваемыеОбъекты["Справочник.ПараметрыСхемДляОбработокОбъектов"] = Истина;
	СоздаваемыеОбъекты["Справочник.СхемыПроцессов"] = Истина;
	СоздаваемыеОбъекты["Справочник.ПравилаОбработки"] = Истина;
	СоздаваемыеОбъекты["Справочник.НастройкиДействийИсполнения"] = Истина;
	СоздаваемыеОбъекты["Справочник.НастройкиДействийОзнакомления"] = Истина;
	СоздаваемыеОбъекты["Справочник.НастройкиДействийПодписания"] = Истина;
	СоздаваемыеОбъекты["Справочник.НастройкиДействийРегистрации"] = Истина;
	СоздаваемыеОбъекты["Справочник.НастройкиДействийСогласования"] = Истина;
	СоздаваемыеОбъекты["Справочник.НастройкиДействийУтверждения"] = Истина;
	
	Возврат СоздаваемыеОбъекты[ИмяОбъектаМетаданных] = Истина;
	
КонецФункции

// Указывает, необходимо ли сопоставлять объет по имени метаданного
// 
// Параметры:
//  ИмяОбъектаМетаданных - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ОбъектНеобходимоСопоставлятьПриЗагрузкеНастроекОбработки(ИмяОбъектаМетаданных)
	
	СопоставляемыеОбъекты = Новый Соответствие();
	СопоставляемыеОбъекты["Справочник.ВидыДокументов"] = Истина;
	СопоставляемыеОбъекты["Справочник.ВидыМероприятий"] = Истина;
	СопоставляемыеОбъекты["Справочник.ВидыДействий"] = Истина;
	СопоставляемыеОбъекты["Справочник.АлгоритмыПроверки"] = Истина;
	СопоставляемыеОбъекты["Справочник.ВидыБизнесСобытий"] = Истина;
	СопоставляемыеОбъекты["Справочник.СкриптыСхемДляОбработокОбъектов"] = Истина;
	СопоставляемыеОбъекты["Справочник.Пользователи"] = Истина;
	СопоставляемыеОбъекты["Справочник.Сотрудники"] = Истина;
	СопоставляемыеОбъекты["Справочник.СтруктураПредприятия"] = Истина;
	СопоставляемыеОбъекты["Справочник.ПроектыКонтейнеры"] = Истина;
	СопоставляемыеОбъекты["Справочник.Проекты"] = Истина;
	СопоставляемыеОбъекты["Справочник.ПодразделенияКонтейнеры"] = Истина;
	СопоставляемыеОбъекты["Справочник.ТематикиДокументов"] = Истина;
	СопоставляемыеОбъекты["Справочник.ПолныеРоли"] = Истина;
	СопоставляемыеОбъекты["Справочник.Контрагенты"] = Истина;
	СопоставляемыеОбъекты["Справочник.Организации"] = Истина;
	СопоставляемыеОбъекты["Справочник.РабочиеГруппы"] = Истина;
	СопоставляемыеОбъекты["Справочник.АвтоподстановкиДляОбъектов"] = Истина;
	
	Возврат (СопоставляемыеОбъекты[ИмяОбъектаМетаданных] = Истина);
	
КонецФункции

// Возвращает значение реквизита объекта к созданид по значению 1С
// 
// Параметры:
//  ЗначениеРеквизита - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
//  Контекст - см. НовыйКонтекстПолученияОбъектовКСозданиюНастроекОбработки
// 
// Возвращаемое значение:
//  см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначенияРеквизитаОбъектаДляСоздания
Функция ЗначениеРеквизитаОбъектаПоЗначению1СКСозданию(ЗначениеРеквизита, Контекст)
	
	ЗначениеКСозданию = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначенияРеквизитаОбъектаДляСоздания();
	ВидыЗначений = КопированиеНастроекОбработкиКлиентСервер.ВидыЗначенийРеквизитовОбъектовДляСоздания();
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ЗначениеРеквизита.Тип) Тогда
		ЗначениеКСозданию.ВидЗначения = ВидыЗначений.Значение;
		ЗначениеКСозданию.Значение = ЗначениеРеквизита.Значение;
		Возврат ЗначениеКСозданию;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ЗначениеРеквизита.Тип);
	Если ОбъектМетаданных = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при получении данных объекта к созданию: неизвестный тип ссылки %1.
			|Путь: %2'"),
			ЗначениеРеквизита.Тип,
			СтрСоединить(Контекст.ТекущийПутьСсылки, "."));
		Контекст.ОшибкиПриПолучении.Добавить(ТекстОшибки);
		
		ЗначениеКСозданию.ВидЗначения = ВидыЗначений.Значение;
		ЗначениеКСозданию.Значение = Неопределено;
		Возврат ЗначениеКСозданию;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных) Тогда 
		ЗначениеКСозданию.ВидЗначения = ВидыЗначений.Значение;
		ЗначениеКСозданию.Значение = ЗначениеРеквизита.Значение;
		Возврат ЗначениеКСозданию;
	КонецЕсли;
	
	ИдентификаторОбъекта = ЗначениеРеквизита.Значение;
	Если Не ЗначениеЗаполнено(ИдентификаторОбъекта) Тогда
		ЗначениеКСозданию.ВидЗначения = ВидыЗначений.Значение;
		ЗначениеКСозданию.Значение = Неопределено;
		Возврат ЗначениеКСозданию;
	КонецЕсли;
	
	ИмяМетаданного = ОбъектМетаданных.ПолноеИмя();
	Если ОбъектНеобходимоСоздаватьПриЗагрузкеНастроекОбработки(ИмяМетаданного) Тогда
		
		РезультатПолученияОбъекта = ДанныеОбъектаКСозданиюРекурсивно(Контекст, ИдентификаторОбъекта);
		
		Если РезультатПолученияОбъекта.Успех Тогда
			ЗначениеКСозданию.ВидЗначения = ВидыЗначений.ОбъектКСозданию;
			ЗначениеКСозданию.ОбъектКСозданию = РезультатПолученияОбъекта.ДанныеОбъекта;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				Контекст.ОшибкиПриПолучении, РезультатПолученияОбъекта.ОшибкиПриПолучении);
			
			ЗначениеКСозданию.ВидЗначения = ВидыЗначений.Значение;
			ЗначениеКСозданию.Значение = Неопределено;
		КонецЕсли;
		
		Возврат ЗначениеКСозданию;
		
	ИначеЕсли ОбъектНеобходимоСопоставлятьПриЗагрузкеНастроекОбработки(ИмяМетаданного) Тогда
		
		ИдентификаторСсылки = ЗначениеРеквизита.Значение;
		
		СопоставленнаяСсылка = Контекст.КонтекстСопоставленныхСсылок[ИдентификаторСсылки];
		Если СопоставленнаяСсылка <> Неопределено Тогда
			ЗначениеКСозданию.ВидЗначения = ВидыЗначений.Значение;
			ЗначениеКСозданию.Значение = СопоставленнаяСсылка;
			Возврат ЗначениеКСозданию;
		КонецЕсли;
		
		ДобавитьСсылкуКСопоставлениюПриПолученииДанныхКСозданиюРекурсивно(Контекст, ИдентификаторСсылки);
		ДанныеСсылкиКСопоставлению = Контекст.СсылкиКСопоставлению[ИдентификаторСсылки];
		
		ЗначениеКСозданию.ВидЗначения = ВидыЗначений.СсылкаКСопоставлению;
		ЗначениеКСозданию.СсылкаКСопоставлению = ДанныеСсылкиКСопоставлению;
		
		Возврат ЗначениеКСозданию;
		
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при получении данных объекта к созданию: Тип ссылки %1 не помечен ни как объект к созданию ни как объект к сопоставлению.
		|Путь: %2'"),
		ИмяМетаданного,
		СтрСоединить(Контекст.ТекущийПутьСсылки, "."));
	Контекст.ОшибкиПриПолучении.Добавить(ТекстОшибки);
	
КонецФункции

// Рекурсивно возвращает данные объекта к созданию по контексту
// 
// Параметры:
//  Контекст - см. НовыйКонтекстПолученияОбъектовКСозданиюНастроекОбработки
//  ИдентификаторСсылки - УникальныйИдентификатор
// 
// Возвращаемое значение:
//   Структура:
//     * Успех - Булево
//     * ДанныеОбъекта - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОбъектаДляСоздания
//     * ОшибкиПриПолучении - Массив Из Строка
//
Функция ДанныеОбъектаКСозданиюРекурсивно(Контекст, ИдентификаторСсылки)
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ДанныеОбъекта", КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОбъектаДляСоздания());
	ОшибкиПриПолучении = Новый Массив(); // Массив Из Строка
	Результат.Вставить("ОшибкиПриПолучении", ОшибкиПриПолучении);
	
	Если Контекст.ИдентификаторыОбъектовВышеПоСтеку[ИдентификаторСсылки] = Истина Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при получении данных объекта к созданию: циклические ссылки.
			|Путь: %1'"),
			СтрСоединить(Контекст.ТекущийПутьСсылки, "."));
		Результат.ОшибкиПриПолучении.Добавить(ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеСсылки = Контекст.ДанныеИспользуемыхСсылок[ИдентификаторСсылки];
	Если ДанныеСсылки = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при получении данных объекта к созданию: ссылка с идентификатором %1 не описана в используемых ссылках.
			|Путь: %2'"),
			ИдентификаторСсылки,
			СтрСоединить(Контекст.ТекущийПутьСсылки, "."));
		Результат.ОшибкиПриПолучении.Добавить(ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Если Не ОбъектНеобходимоСоздаватьПриЗагрузкеНастроекОбработки(ДанныеСсылки.ИмяОбъектаМетаданных) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при получении данных объекта к созданию: объект %1 не определен как вид объекта к созданию.
			|Путь: %2'"),
			ДанныеСсылки.ИмяОбъектаМетаданных,
			СтрСоединить(Контекст.ТекущийПутьСсылки, "."));
		Контекст.ОшибкиПриПолучении.Добавить(ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	Результат.ДанныеОбъекта.ИмяОбъектаМетаданных = ДанныеСсылки.ИмяОбъектаМетаданных;
	Результат.ДанныеОбъекта.ИдентификаторПриЗагрузке = ИдентификаторСсылки;
	
	Контекст.ИдентификаторыОбъектовВышеПоСтеку[ИдентификаторСсылки] = Истина;
	
	РезультатПолученияРеквизитов = ДанныеЗначенийРеквизитовИлиКолонокСтрокиОбъектаКСозданию(
		ДанныеСсылки.ЗначенияРеквизитов, Контекст);
	
	Результат.ДанныеОбъекта.ЗначенияРеквизитов = РезультатПолученияРеквизитов.ЗначенияРеквизитовИлиКолонок;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		Результат.ОшибкиПриПолучении, РезультатПолученияРеквизитов.ОшибкиЗаполнения);
	
	Для Каждого ЭлементТабличнойЧасти Из ДанныеСсылки.ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ЭлементТабличнойЧасти.Ключ;
		СтрокиТабличнойЧасти = ЭлементТабличнойЧасти.Значение;
		
		ЗначенияСтрокТабличнойЧасти = Новый Массив(); // Массив Из см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначенийКолонокСтрокиТабличнойЧастиДляСоздания
		Результат.ДанныеОбъекта.ТабличныеЧасти[ИмяТабличнойЧасти] = ЗначенияСтрокТабличнойЧасти;
		
		ТекущийИндекс = 0;
		Для Каждого Строка Из СтрокиТабличнойЧасти Цикл
			
			ПутьСтроки = СтрШаблон("%1[%2]", ИмяТабличнойЧасти, ТекущийИндекс);
			Контекст.ТекущийПутьСсылки.Добавить(ПутьСтроки);
			
			РезультатПолученияЗначенийКолонок = ДанныеЗначенийРеквизитовИлиКолонокСтрокиОбъектаКСозданию(
				Строка, Контекст);
			
			ЗначенияСтрокТабличнойЧасти.Добавить(РезультатПолученияЗначенийКолонок.ЗначенияРеквизитовИлиКолонок);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				Результат.ОшибкиПриПолучении, РезультатПолученияЗначенийКолонок.ОшибкиЗаполнения);
			
			// Удаляем путь строки табличной части <ТабличнаяЧасть[Индекс]>
			Контекст.ТекущийПутьСсылки.Удалить(Контекст.ТекущийПутьСсылки.ВГраница());
			ТекущийИндекс = ТекущийИндекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Контекст.ИдентификаторыОбъектовВышеПоСтеку.Удалить(ИдентификаторСсылки);
	
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат получения значений реквизитов объекта или колонок строки табличной части объекта к созданию
// 
// Параметры:
//  ЗначенияРеквизитовИлиКолонок - Структура
//  Контекст - см. НовыйКонтекстПолученияОбъектовКСозданиюНастроекОбработки
// 
// Возвращаемое значение:
//  Структура:
//    * Успех - Булево - 
//    * ЗначенияРеквизитовИлиКолонок - Соответствие Из КлючИЗначение:
//       ** Ключ - Строка
//       ** Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначенияРеквизитаОбъектаДляСоздания
//    * ОшибкиЗаполнения - Массив Из Строка
Функция ДанныеЗначенийРеквизитовИлиКолонокСтрокиОбъектаКСозданию(ЗначенияРеквизитовИлиКолонок, Контекст)
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ЗначенияРеквизитовИлиКолонок", Новый Соответствие());
	ОшибкиЗаполнения = Новый Массив(); // Массив Из Строка
	Результат.Вставить("ОшибкиЗаполнения", ОшибкиЗаполнения);
	
	Для Каждого ЭлементРеквизита Из ЗначенияРеквизитовИлиКолонок Цикл
		
		ИмяРеквизита = ЭлементРеквизита.Ключ;
		ЗначениеРеквизита = ЭлементРеквизита.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
		
		Контекст.ТекущийПутьСсылки.Добавить(ИмяРеквизита);
		
		ДанныеЗначенияРеквизита = ЗначениеРеквизитаОбъектаПоЗначению1СКСозданию(ЗначениеРеквизита, Контекст);
		
		// Удаляем текущий реквизит или колонку
		Контекст.ТекущийПутьСсылки.Удалить(Контекст.ТекущийПутьСсылки.ВГраница());
		
		Результат.ЗначенияРеквизитовИлиКолонок[ИмяРеквизита] = ДанныеЗначенияРеквизита;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Добавляет ссылку к сопоставлению при получении данных к созданию
// 
// Параметры:
//  Контекст - см. НовыйКонтекстПолученияОбъектовКСозданиюНастроекОбработки
//  ИдентификаторСсылки - УникальныйИдентификатор
Процедура ДобавитьСсылкуКСопоставлениюПриПолученииДанныхКСозданиюРекурсивно(Контекст, ИдентификаторСсылки)
	
	ДанныеСсылкиКСопоставлению = Контекст.СсылкиКСопоставлению[ИдентификаторСсылки];
	Если ДанныеСсылкиКСопоставлению <> Неопределено Тогда
		ДанныеСсылкиКСопоставлению.МестаИспользования.Добавить(СтрСоединить(Контекст.ТекущийПутьСсылки, "."));
		Возврат;
	КонецЕсли;
	
	ДанныеСсылки = Контекст.ДанныеИспользуемыхСсылок[ИдентификаторСсылки];
	
	ДанныеСсылкиКСопоставлению = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеСсылкиКСопоставлению();
	Контекст.СсылкиКСопоставлению[ИдентификаторСсылки] = ДанныеСсылкиКСопоставлению;
	
	ДанныеСсылкиКСопоставлению.УникальныйИдентификатор = ИдентификаторСсылки;
	ДанныеСсылкиКСопоставлению.Представление = ДанныеСсылки.Представление;
	ДанныеСсылкиКСопоставлению.ИмяОбъектаМетаданных = ДанныеСсылки.ИмяОбъектаМетаданных;
	ДанныеСсылкиКСопоставлению.ДанныеСсылки = ДанныеСсылки;
	ДанныеСсылкиКСопоставлению.МестаИспользования.Добавить(СтрСоединить(Контекст.ТекущийПутьСсылки, "."));
	
	Для Каждого ЭлементРеквизита Из ДанныеСсылки.ЗначенияРеквизитов Цикл
		
		ИмяРеквизита = ЭлементРеквизита.Ключ;
		ЗначениеРеквизита = ЭлементРеквизита.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
		
		Контекст.ТекущийПутьСсылки.Добавить(ИмяРеквизита);
		
		ПроверитьЗначениеРеквизитаСсылкиКСопоставлениюПриПолученииДанныхКСозданию(Контекст, ЗначениеРеквизита);
		
		// Удаляем текущий реквизит или колонку
		Контекст.ТекущийПутьСсылки.Удалить(Контекст.ТекущийПутьСсылки.ВГраница());
		
	КонецЦикла;
	
	Для Каждого ЭлементТабличнойЧасти Из ДанныеСсылки.ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ЭлементТабличнойЧасти.Ключ;
		СтрокиТабличнойЧасти = ЭлементТабличнойЧасти.Значение;
		
		ТекущийИндекс = 0;
		Для Каждого Строка Из СтрокиТабличнойЧасти Цикл
			
			ПутьСтроки = СтрШаблон("%1[%2]", ИмяТабличнойЧасти, ТекущийИндекс);
			Контекст.ТекущийПутьСсылки.Добавить(ПутьСтроки);
			
			Для Каждого ЭлементКолонки Из Строка Цикл
				
				ИмяКолонки = ЭлементКолонки.Ключ;
				ЗначениеКолонки = ЭлементКолонки.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
				
				Контекст.ТекущийПутьСсылки.Добавить(ИмяКолонки);
				
				ПроверитьЗначениеРеквизитаСсылкиКСопоставлениюПриПолученииДанныхКСозданию(Контекст, ЗначениеКолонки);
				
				// Удаляем путь колонки
				Контекст.ТекущийПутьСсылки.Удалить(Контекст.ТекущийПутьСсылки.ВГраница());
				
			КонецЦикла;
			
			// Удаляем путь строки табличной части <ТабличнаяЧасть[Индекс]>
			Контекст.ТекущийПутьСсылки.Удалить(Контекст.ТекущийПутьСсылки.ВГраница());
			ТекущийИндекс = ТекущийИндекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет значение реквизита ссылки, необходимой к сопоставлению данных, при необходимости добавляет
//  значение к сопоставлению
// 
// Параметры:
//  Контекст - см. НовыйКонтекстПолученияОбъектовКСозданиюНастроекОбработки
//  ЗначениеРеквизита - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначения1С
Процедура ПроверитьЗначениеРеквизитаСсылкиКСопоставлениюПриПолученииДанныхКСозданию(Контекст, ЗначениеРеквизита)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ЗначениеРеквизита.Тип) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ЗначениеРеквизита.Тип);
	Если ОбъектМетаданных = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при проверке значения к сопоставлению: неизвестный тип ссылки %1.
			|Путь: %2'"),
			ЗначениеРеквизита.Тип,
			СтрСоединить(Контекст.ТекущийПутьСсылки, "."));
		Контекст.ОшибкиПриПолучении.Добавить(ТекстОшибки);
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных) Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗначения = ЗначениеРеквизита.Значение;
	Если Не ЗначениеЗаполнено(ИдентификаторЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМетаданного = ОбъектМетаданных.ПолноеИмя();
	Если ОбъектНеобходимоСоздаватьПриЗагрузкеНастроекОбработки(ИмяМетаданного) Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при проверке значения к сопоставлению: Объект метаданных %1 отмечен как создаваемый, однако используется в сопоставляемой ссылке.
			|Путь: %2'"),
			ИмяМетаданного,
			СтрСоединить(Контекст.ТекущийПутьСсылки, "."));
		Контекст.ОшибкиПриПолучении.Добавить(ТекстОшибки);
		
		Возврат;
		
	ИначеЕсли ОбъектНеобходимоСопоставлятьПриЗагрузкеНастроекОбработки(ИмяМетаданного) Тогда
		
		ИдентификаторСсылки = ЗначениеРеквизита.Значение;
		
		СопоставленнаяСсылка = Контекст.КонтекстСопоставленныхСсылок[ИдентификаторСсылки];
		Если СопоставленнаяСсылка <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьСсылкуКСопоставлениюПриПолученииДанныхКСозданиюРекурсивно(Контекст, ИдентификаторСсылки);
		
		Возврат;
		
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при проверке значения к сопоставлению: Тип ссылки %1 не помечен ни как объект к созданию ни как объект к сопоставлению.
		|Путь: %2'"),
		ИмяМетаданного,
		СтрСоединить(Контекст.ТекущийПутьСсылки, "."));
	Контекст.ОшибкиПриПолучении.Добавить(ТекстОшибки);
	
КонецПроцедуры

// Устанавливает параметры создаваемых объектов при загрузке настроек обработки
// 
// Параметры:
//  Контекст - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстЗагрузкиНастроек
Процедура УстановитьПараметрыСоздаваемыхОбъектовНастроекОбработки(Контекст)
	
	ДатаНачалаДействия = НачалоДня(Контекст.ДатаНачалаДействия);
	ДатаОкончанияДействия = Дата(1, 1, 1);
	ВидыЗначений = КопированиеНастроекОбработкиКлиентСервер.ВидыЗначенийРеквизитовОбъектовДляСоздания();
	
	Для Каждого Элемент Из Контекст.ДанныеНастроекОбработкиКСозданию Цикл
		
		ДанныеНастроекКСозданию = Элемент.Значение;
		
		ЗначениеНастройки = ДанныеНастроекКСозданию.НастройкиОбработки;
		Если ЗначениеНастройки.ВидЗначения = ВидыЗначений.ОбъектКСозданию Тогда
			
			ОбъектНастройки = ЗначениеНастройки.ОбъектКСозданию;
			КопированиеНастроекОбработкиКлиентСервер.УстановитьЗначениеРеквизитаОбъектаКСозданию(ОбъектНастройки,
				"ДействуетС", ДатаНачалаДействия);
			КопированиеНастроекОбработкиКлиентСервер.УстановитьЗначениеРеквизитаОбъектаКСозданию(ОбъектНастройки,
				"ДействуетПо", ДатаОкончанияДействия);
			
		КонецЕсли;
		
		Для Каждого ДанныеПравил Из ДанныеНастроекКСозданию.ПравилаОбработки Цикл
			
			ЗначениеПравила = ДанныеПравил.ПравилоОбработки;
			Если ЗначениеПравила.ВидЗначения = ВидыЗначений.ОбъектКСозданию Тогда
				
				ОбъектПравила = ЗначениеПравила.ОбъектКСозданию;
				КопированиеНастроекОбработкиКлиентСервер.УстановитьЗначениеРеквизитаОбъектаКСозданию(ОбъектПравила,
					"ДействуетС", ДатаНачалаДействия);
				КопированиеНастроекОбработкиКлиентСервер.УстановитьЗначениеРеквизитаОбъектаКСозданию(ОбъектПравила,
					"ДействуетПо", ДатаОкончанияДействия);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаНастроекОбработки

// Выполняет запись загруженных настроек обработки (соответствующих схем, правил и т.п.)
//  Необходимо вызывать вне открытой транзакции
// 
// Параметры:
//  КонтекстЗагрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстЗагрузкиНастроек
Процедура ЗаписатьЗагруженныеНастройкиОбработки(КонтекстЗагрузки)
	
	Если ТранзакцияАктивна() Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый вызов метода, метод ЗаписатьЗагруженныеНастройкиОбработки можно вызывать только вне открытой транзакции'");
	КонецЕсли;
	
	НастройкиИПравилаКЗавершению = НастройкиИПравилаОбработкиКЗавершениюПриЗагрузке(КонтекстЗагрузки);
	
	Для Каждого Элемент Из КонтекстЗагрузки.ДанныеНастроекОбработкиКСозданию Цикл
		
		ВидОбъекта = Элемент.Ключ;
		ДанныеНастроекКСозданию = Элемент.Значение;
		
		НачатьТранзакцию();
		Попытка
			
			НастройкиИПравилаВидаОбъектаКЗавершению = НастройкиИПравилаКЗавершению[ВидОбъекта];
			
			ДатаЗавершения = НачалоДня(КонтекстЗагрузки.ДатаНачалаДействия - 24*60*60);
			ЗавершитьДействиеНастроекИПравилОбработки(
				НастройкиИПравилаВидаОбъектаКЗавершению, ВидОбъекта, ДатаЗавершения);
			
			КонтекстСоздания = НовыйКонтекстСозданияОбъектов();
			КонтекстСоздания.ОбъектыКСозданию =
				ДанныеОбъектовКСозданиюПоДаннымНастроекОбработкиКСозданию(ДанныеНастроекКСозданию);
			
			СоздатьОбъекты(КонтекстСоздания);
			
			ЗаписатьПравилаОбработкиВРегистр(ДанныеНастроекКСозданию, КонтекстСоздания.СозданныеОбъекты);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'При создании настроек обработки по загруженным данным обнаружены ошибки:
				|%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Ошибка = КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОшибкиЗагрузкиНастроекОбработки();
			Ошибка.Этап = КопированиеНастроекОбработкиКлиентСервер.ЭтапыЗагрузкиНастроекОбработки().ЗаписьНастроек;
			Ошибка.ТекстОшибки = ТекстОшибки;
			
			КонтекстЗагрузки.Ошибки.Добавить(Ошибка);
			КонтекстЗагрузки.Отказ = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает настройки и правила обработки видов объектов к завершению при загрузке настроек
// 
// Параметры:
//  КонтекстЗагрузки - см. КопированиеНастроекОбработкиКлиентСервер.НовыйКонтекстЗагрузкиНастроек
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ВидОбъектаСОбработкой
//    * Значение - см. НовыеНастройкиИПравилаВидаОбъекта
//
Функция НастройкиИПравилаОбработкиКЗавершениюПриЗагрузке(КонтекстЗагрузки)
	
	НастройкиИПравилаВидовОбъектов = Новый Соответствие();
	
	ВидыОбъектов = Новый Массив(); // Массив Из ОпределяемыйТип.ВидОбъектаСОбработкой
	Для Каждого Элемент Из КонтекстЗагрузки.ДанныеНастроекОбработкиКСозданию Цикл
		ВидОбъекта = Элемент.Ключ;
		ВидыОбъектов.Добавить(ВидОбъекта);
		
		НастройкиИПравилаВидовОбъектов[ВидОбъекта] = НовыеНастройкиИПравилаВидаОбъекта();
	КонецЦикла;
	
	ДатаОкончания = НачалоДня(КонтекстЗагрузки.ДатаНачалаДействия - 24*60*60);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.Ссылка КАК НастройкаОбработки,
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта В (&ВидыОбъектов)
		|	И НастройкиОбработкиВидовОбъектов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И НЕ НастройкиОбработкиВидовОбъектов.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.Ссылка,
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта В (&ВидыОбъектов)
		|	И НастройкиОбработкиВидовОбъектов.ДействуетПо > &ДатаОкончания
		|	И НЕ НастройкиОбработкиВидовОбъектов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаОбработкиОбъектов.ПравилоОбработки КАК ПравилоОбработки,
		|	ПравилаОбработкиОбъектов.ВидОбъекта
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК ПравилаОбработкиОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ПО ПравилаОбработкиОбъектов.ПравилоОбработки = ПравилаОбработки.Ссылка
		|ГДЕ
		|	ПравилаОбработкиОбъектов.ВидОбъекта В (&ВидыОбъектов)
		|	И ПравилаОбработки.ДействуетПо > &ДатаОкончания
		|	И НЕ ПравилаОбработки.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПравилаОбработкиОбъектов.ПравилоОбработки КАК ПравилоОбработки,
		|	ПравилаОбработкиОбъектов.ВидОбъекта
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК ПравилаОбработкиОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ПО ПравилаОбработкиОбъектов.ПравилоОбработки = ПравилаОбработки.Ссылка
		|ГДЕ
		|	ПравилаОбработкиОбъектов.ВидОбъекта В (&ВидыОбъектов)
		|	И ПравилаОбработки.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И НЕ ПравилаОбработки.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВидыОбъектов", ВидыОбъектов);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаНастроек = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	ВыборкаПравил = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл
		
		ВидОбъекта = ВыборкаНастроек.ВидОбъекта;
		НастройкиИПравила = НастройкиИПравилаВидовОбъектов[ВидОбъекта]; // см. НовыеНастройкиИПравилаВидаОбъекта
		
		НастройкиИПравила.НастройкиОбработки.Добавить(ВыборкаНастроек.НастройкаОбработки);
		
	КонецЦикла;
	
	Пока ВыборкаПравил.Следующий() Цикл
		
		ВидОбъекта = ВыборкаПравил.ВидОбъекта;
		НастройкиИПравила = НастройкиИПравилаВидовОбъектов[ВидОбъекта]; // см. НовыеНастройкиИПравилаВидаОбъекта
		
		НастройкиИПравила.ПравилаОбработки.Добавить(ВыборкаПравил.ПравилоОбработки);
		
	КонецЦикла;
	
	Возврат НастройкиИПравилаВидовОбъектов;
	
КонецФункции

// Конструктор набора настроек и правил вида объекта
// 
// Возвращаемое значение:
//  Структура:
// * НастройкиОбработки - Массив Из СправочникСсылка.НастройкиОбработкиВидовОбъектов
// * ПравилаОбработки - Массив Из СправочникСсылка.ПравилаОбработки
Функция НовыеНастройкиИПравилаВидаОбъекта()
	
	НастройкиИПравила = Новый Структура;
	НастройкиИПравила.Вставить("НастройкиОбработки", Новый Массив());
	НастройкиИПравила.Вставить("ПравилаОбработки", Новый Массив());
	
	Возврат НастройкиИПравила;
	
КонецФункции

// Завершает действие настройек и правил обработки указанной датой
//  Предполагает вызов только в уже открытой транзакции
// 
// Параметры:
//  НастройкиИПравила - см. НовыеНастройкиИПравилаВидаОбъекта
//  ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой
//  ДатаЗавершения - Дата
Процедура ЗавершитьДействиеНастроекИПравилОбработки(НастройкиИПравила, ВидОбъекта, ДатаЗавершения)
	
	Если Не ТранзакцияАктивна() Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый вызов метода, метод ЗавершитьДействиеНастроекИПравилОбработки можно вызывать только в открытой транзакции'");
	КонецЕсли;
	
	Для Каждого Настройка Из НастройкиИПравила.НастройкиОбработки Цикл
		
		НастройкаОбъект = Настройка.ПолучитьОбъект();
		
		Если НастройкаОбъект.ДействуетС > ДатаЗавершения Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно пометить завершившей действие настройку обработки %1 по виду объекта %2, поскольку она начинает действие с %3, а это позже, чем указанная дата начала действия загружаемых настроек %4'"),
				Настройка, ВидОбъекта,
				Формат(НастройкаОбъект.ДействуетС, "ДФ=dd.MM.yyyy;"), Формат(ДатаЗавершения, "ДФ=dd.MM.yyyy;"));
		КонецЕсли;
		
		НастройкаОбъект.ДействуетПо = ДатаЗавершения;
		НастройкаОбъект.Записать();
		
	КонецЦикла;
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	Для Каждого Правило Из НастройкиИПравила.ПравилаОбработки Цикл
		
		ПравилоОбъект = Правило.ПолучитьОбъект();
		
		Если ПравилоОбъект.ДействуетС > ДатаЗавершения Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Невозможно пометить завершившим действие правило обработки %1 по виду объекта %2, поскольку оно начинает действие с %3, а это позже, чем указанная дата начала действия загружаемых настроек %4'"),
				Правило, ВидОбъекта,
				Формат(ПравилоОбъект.ДействуетС, "ДФ=dd.MM.yyyy;"), Формат(ДатаЗавершения, "ДФ=dd.MM.yyyy;"));
		КонецЕсли;
		
		ПравилоОбъект.ДействуетПо = ДатаЗавершения;
		ПравилоОбъект.НеДействует = (ДатаЗавершения < ТекущаяДата);
		ПравилоОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает соответствие уникальных идентификаторов данным объектов к созданию по данным
// 
// Параметры:
//  ДанныеНастроекОбработки - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеДляСозданияНастроекОбработки
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//     * Ключ - УникальныйИдентификатор
//     * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОбъектаДляСоздания
Функция ДанныеОбъектовКСозданиюПоДаннымНастроекОбработкиКСозданию(ДанныеНастроекОбработки)
	
	ОбъектыКСозданию = Новый Соответствие();
	
	ВидыЗначений = КопированиеНастроекОбработкиКлиентСервер.ВидыЗначенийРеквизитовОбъектовДляСоздания();
	
	ЗначениеНастроекОбработки = ДанныеНастроекОбработки.НастройкиОбработки;
	Если ЗначениеНастроекОбработки.ВидЗначения = ВидыЗначений.ОбъектКСозданию Тогда
		
		ОбъектНастроек = ЗначениеНастроекОбработки.ОбъектКСозданию;
		ОбъектыКСозданию[ОбъектНастроек.ИдентификаторПриЗагрузке] = ОбъектНастроек;
		
		ОбъектыВРеквизитах = ДанныеОбъектовКСозданиюПоРеквизитамОбъектаРекурсивно(ОбъектНастроек);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ОбъектыКСозданию, ОбъектыВРеквизитах, Ложь);
		
	КонецЕсли;
	
	Для Каждого ЗначениеПараметровСхемы Из ДанныеНастроекОбработки.ПараметрыСхем Цикл
		
		Если Не ЗначениеПараметровСхемы.ВидЗначения = ВидыЗначений.ОбъектКСозданию Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектПараметровСхемы = ЗначениеПараметровСхемы.ОбъектКСозданию;
		ОбъектыКСозданию[ОбъектПараметровСхемы.ИдентификаторПриЗагрузке] = ОбъектПараметровСхемы;
		
		ОбъектыВРеквизитах = ДанныеОбъектовКСозданиюПоРеквизитамОбъектаРекурсивно(ОбъектПараметровСхемы);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ОбъектыКСозданию, ОбъектыВРеквизитах, Ложь);
		
	КонецЦикла;
	
	Для Каждого ДанныеПравил Из ДанныеНастроекОбработки.ПравилаОбработки Цикл
		
		ЗначениеПравила = ДанныеПравил.ПравилоОбработки;
		Если ЗначениеПравила.ВидЗначения = ВидыЗначений.ОбъектКСозданию Тогда
			
			ОбъектПравила = ЗначениеПравила.ОбъектКСозданию;
			ОбъектыКСозданию[ОбъектПравила.ИдентификаторПриЗагрузке] = ОбъектПравила;
			
			ОбъектыВРеквизитах = ДанныеОбъектовКСозданиюПоРеквизитамОбъектаРекурсивно(ОбъектПравила);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ОбъектыКСозданию, ОбъектыВРеквизитах, Ложь);
			
		КонецЕсли;
		
		ЗначениеНастройкиДействия = ДанныеПравил.Настройка;
		Если ЗначениеНастройкиДействия.ВидЗначения = ВидыЗначений.ОбъектКСозданию Тогда
			
			ОбъектНастройкиДействия = ЗначениеНастройкиДействия.ОбъектКСозданию;
			ОбъектыКСозданию[ОбъектНастройкиДействия.ИдентификаторПриЗагрузке] = ОбъектНастройкиДействия;
			
			ОбъектыВРеквизитах = ДанныеОбъектовКСозданиюПоРеквизитамОбъектаРекурсивно(ОбъектНастройкиДействия);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ОбъектыКСозданию, ОбъектыВРеквизитах, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектыКСозданию;
	
КонецФункции

// Возвращает данные объектов к созданию по объектам к созданию, указанных в реквизитах объекта
// 
// Параметры:
//  ДанныеОбъекта - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОбъектаДляСоздания
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//     * Ключ - УникальныйИдентификатор
//     * Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОбъектаДляСоздания
Функция ДанныеОбъектовКСозданиюПоРеквизитамОбъектаРекурсивно(ДанныеОбъекта)
	
	ДанныеОбъектовКСозданию = Новый Соответствие();
	
	ВидыЗначений = КопированиеНастроекОбработкиКлиентСервер.ВидыЗначенийРеквизитовОбъектовДляСоздания();
	
	Для Каждого ЭлементРеквизита Из ДанныеОбъекта.ЗначенияРеквизитов Цикл
		
		ЗначениеРеквизита = ЭлементРеквизита.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначенияРеквизитаОбъектаДляСоздания
		
		Если ЗначениеРеквизита.ВидЗначения <> ВидыЗначений.ОбъектКСозданию Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектКСозданиюРеквизита = ЗначениеРеквизита.ОбъектКСозданию;
		ДанныеОбъектовКСозданию[ОбъектКСозданиюРеквизита.ИдентификаторПриЗагрузке] = ОбъектКСозданиюРеквизита;
		
		ОбъектыКСозданиюПоРеквизиту = ДанныеОбъектовКСозданиюПоРеквизитамОбъектаРекурсивно(ОбъектКСозданиюРеквизита);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеОбъектовКСозданию, ОбъектыКСозданиюПоРеквизиту, Ложь);
		
	КонецЦикла;
	
	Для Каждого ЭлементТабличнойЧасти Из ДанныеОбъекта.ТабличныеЧасти Цикл
		
		СтрокиТабличнойЧасти = ЭлементТабличнойЧасти.Значение;
		
		Для Каждого Строка Из СтрокиТабличнойЧасти Цикл
			
			Для Каждого ЭлементКолонки Из Строка Цикл
				
				ЗначениеКолонки = ЭлементКолонки.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначенияРеквизитаОбъектаДляСоздания
				
				Если ЗначениеКолонки.ВидЗначения <> ВидыЗначений.ОбъектКСозданию Тогда
					Продолжить;
				КонецЕсли;
				
				ОбъектКСозданиюКолонки = ЗначениеКолонки.ОбъектКСозданию;
				ДанныеОбъектовКСозданию[ОбъектКСозданиюКолонки.ИдентификаторПриЗагрузке] = ОбъектКСозданиюКолонки;
				
				ОбъектыКСозданиюПоКолонке =
					ДанныеОбъектовКСозданиюПоРеквизитамОбъектаРекурсивно(ОбъектКСозданиюКолонки);
				
				ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
					ДанныеОбъектовКСозданию, ОбъектыКСозданиюПоКолонке, Ложь);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеОбъектовКСозданию;
	
КонецФункции

// Выполняет запись правил обработки объектов в регистр
//  Предполагает вызов только в рамках внешней открытой транзакции
// 
// Параметры:
//  ДанныеНастроекОбработки - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеДляСозданияНастроекОбработки
//  СозданныеОбъекты - Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - ЛюбаяСсылка
Процедура ЗаписатьПравилаОбработкиВРегистр(ДанныеНастроекОбработки, СозданныеОбъекты)
	
	Если Не ТранзакцияАктивна() Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый вызов метода, метод ЗаписатьПравилаОбработкиВРегистр можно вызывать только в открытой транзакции'");
	КонецЕсли;
	
	ВидыЗначений = КопированиеНастроекОбработкиКлиентСервер.ВидыЗначенийРеквизитовОбъектовДляСоздания();
	
	Для Каждого ДанныеПравила Из ДанныеНастроекОбработки.ПравилаОбработки Цикл
		
		Запись = РегистрыСведений.ПравилаОбработкиОбъектов.СоздатьМенеджерЗаписи();
		
		ЗначениеПравила = ДанныеПравила.ПравилоОбработки;
		Если ЗначениеПравила.ВидЗначения <> ВидыЗначений.ОбъектКСозданию Тогда
			ВызватьИсключение 
				СтрШаблон(НСтр("ru = 'Неверное значение правил обработки для вида объекта %1'"),
					ДанныеНастроекОбработки.ВидОбъекта);
		КонецЕсли;
		
		ОбъектПравила = ЗначениеПравила.ОбъектКСозданию;
		СсылкаПравила = СозданныеОбъекты[ОбъектПравила.ИдентификаторПриЗагрузке];
		Запись.ПравилоОбработки = СсылкаПравила;
		
		ЗначениеВидаДействия = ДанныеПравила.ВидДействия;
		Если ЗначениеВидаДействия.ВидЗначения <> ВидыЗначений.СсылкаКСопоставлению Тогда
			ВызватьИсключение 
				СтрШаблон(НСтр("ru = 'Неверное значение вида действия правил обрабоки для вида объекта %1'"),
					ДанныеНастроекОбработки.ВидОбъекта);
		КонецЕсли;
		Запись.ВидДействия = ЗначениеВидаДействия.СсылкаКСопоставлению.СопоставленнаяСсылка;
		
		ЗначениеНастройки = ДанныеПравила.Настройка;
		Если ЗначениеНастройки.ВидЗначения = ВидыЗначений.Значение Тогда
			
			Запись.Настройка = ЗначениеНастройки.Значение;
			
		ИначеЕсли ЗначениеНастройки.ВидЗначения = ВидыЗначений.ОбъектКСозданию Тогда
			
			ОбъектНастройки = ЗначениеНастройки.ОбъектКСозданию;
			СсылкаНастройки = СозданныеОбъекты[ОбъектНастройки.ИдентификаторПриЗагрузке];
			Запись.Настройка = СсылкаНастройки;
			
		Иначе
			
			ВызватьИсключение 
				СтрШаблон(НСтр("ru = 'Неверное значение настройки действия правил обрабоки для вида объекта %1'"),
					ДанныеНастроекОбработки.ВидОбъекта);
			
		КонецЕсли;
		
		Запись.НастройкаВключена = ДанныеПравила.НастройкаВключена;
		Запись.ВидОбъекта = ДанныеНастроекОбработки.ВидОбъекта;
		
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#Область СозданиеОбъектов

// Конструктор контекста создания объектов по данным к созданию
// 
// Возвращаемое значение:
//  Структура:
//    * ОбъектыКСозданию - Соответствие Из КлючИЗначение:
//       ** Ключ - УникальныйИдентификатор
//       ** Значение - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОбъектаДляСоздания
//    * СозданныеОбъекты - Соответствие Из КлючИЗначение:
//       ** Ключ - УникальныйИдентификатор
//       ** Значение - ЛюбаяСсылка
Функция НовыйКонтекстСозданияОбъектов()
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбъектыКСозданию", Новый Соответствие());
	Контекст.Вставить("СозданныеОбъекты", Новый Соответствие());
	
	Возврат Контекст;
	
КонецФункции

// Создает объекты по данным объектов к созданию
//  Метод предполагает вызов только во внешней открытой транзакции
//  Если созданы не все объекты из объектов к созданию в контексте, то вызывает исключение
// 
// Параметры:
//  Контекст - см. НовыйКонтекстСозданияОбъектов
Процедура СоздатьОбъекты(Контекст)
	
	Если Не ТранзакцияАктивна() Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый вызов метода, метод СоздатьОбъекты можно вызывать только в открытой транзакции'");
	КонецЕсли;
	
	СозданыВсеВозможныеОбъекты = Ложь;
	ОбъектовСоздано = 0;
	ОбъектовКСозданию = Контекст.ОбъектыКСозданию.Количество();
	
	Пока Не СозданыВсеВозможныеОбъекты Цикл
		
		ОбъектыКСозданиюНаИтерации = Новый Соответствие();
		
		Для Каждого Элемент Из Контекст.ОбъектыКСозданию Цикл
			
			Идентификатор = Элемент.Ключ;
			ДанныеОбъекта = Элемент.Значение;
			
			Если Контекст.СозданныеОбъекты[Идентификатор] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СозданыВсеОбъектыКСозданиюВРеквизитахОбъектаКСозданию(ДанныеОбъекта, Контекст.СозданныеОбъекты) Тогда
				ОбъектыКСозданиюНаИтерации[Идентификатор] = ДанныеОбъекта;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбъектыКСозданиюНаИтерации.Количество() = 0 Тогда
			СозданыВсеВозможныеОбъекты = Истина;
			Продолжить;
		КонецЕсли;
		
		Для Каждого Элемент Из ОбъектыКСозданиюНаИтерации Цикл
			
			Идентификатор = Элемент.Ключ;
			ДанныеОбъекта = Элемент.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОбъектаДляСоздания
			
			Ссылка = СоздатьОбъект(ДанныеОбъекта, Контекст.СозданныеОбъекты);
			Контекст.СозданныеОбъекты[Идентификатор] = Ссылка;
			ОбъектовСоздано = ОбъектовСоздано + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбъектовСоздано < ОбъектовКСозданию Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось создать все объекты к созданию'");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает, в реквизитах объекта к созданию созданы ли все значения реквизитов объекта
// 
// Параметры:
//  ОбъектКСозданию - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОбъектаДляСоздания
//  СозданныеОбъекты - Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Булево
Функция СозданыВсеОбъектыКСозданиюВРеквизитахОбъектаКСозданию(ОбъектКСозданию, СозданныеОбъекты)
	
	ВидыЗначений = КопированиеНастроекОбработкиКлиентСервер.ВидыЗначенийРеквизитовОбъектовДляСоздания();
	
	Для Каждого ЭлементРеквизита Из ОбъектКСозданию.ЗначенияРеквизитов Цикл
		
		ЗначениеРеквизита = ЭлементРеквизита.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначенияРеквизитаОбъектаДляСоздания
		
		Если ЗначениеРеквизита.ВидЗначения <> ВидыЗначений.ОбъектКСозданию Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектРеквизита = ЗначениеРеквизита.ОбъектКСозданию;
		Если СозданныеОбъекты[ОбъектРеквизита.ИдентификаторПриЗагрузке] = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТабличнойЧасти Из ОбъектКСозданию.ТабличныеЧасти Цикл
		
		СтрокиТабличнойЧасти = ЭлементТабличнойЧасти.Значение;
		
		Для Каждого Строка Из СтрокиТабличнойЧасти Цикл
			
			Для Каждого ЭлементКолонки Из Строка Цикл
				
				ЗначениеКолонки = ЭлементКолонки.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначенияРеквизитаОбъектаДляСоздания
				
				Если ЗначениеКолонки.ВидЗначения <> ВидыЗначений.ОбъектКСозданию Тогда
					Продолжить;
				КонецЕсли;
				
				ОбъектКолонки = ЗначениеКолонки.ОбъектКСозданию;
				Если СозданныеОбъекты[ОбъектКолонки.ИдентификаторПриЗагрузке] = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Создает объект по данным объекта к созданию
//  Метод предполагает вызов только во внешней открытой транзакции
// 
// Параметры:
//  ДанныеОбъекта - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОбъектаДляСоздания
//  СозданныеОбъекты - Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  ЛюбаяСсылка - Ссылка на созданный объект
Функция СоздатьОбъект(ДанныеОбъекта, СозданныеОбъекты)
	
	Если Не ТранзакцияАктивна() Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый вызов метода, метод СоздатьОбъект можно вызывать только в открытой транзакции'");
	КонецЕсли;
	
	ИмяМетаданного = ДанныеОбъекта.ИмяОбъектаМетаданных;
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМетаданного); // СправочникМенеджер, ДокументМенеджер
	Если МенеджерОбъекта = Неопределено Тогда
		ВызватьИсключение
			СтрШаблон(НСтр("ru = 'Не удалось получить менеджер объекта %1 для создания'"), ИмяМетаданного);
	КонецЕсли;
	
	Если СтрНачинаетсяС(НРег(ИмяМетаданного), НРег("Справочник")) Тогда
		Объект = МенеджерОбъекта.СоздатьЭлемент(); // СправочникОбъект, ДокументОбъект
	ИначеЕсли СтрНачинаетсяС(НРег(ИмяМетаданного), НРег("Документ")) Тогда
		Объект = МенеджерОбъекта.СоздатьДокумент();
	Иначе
		ВызватьИсключение
			СтрШаблон(НСтр("ru = 'Неизвестный тип объекта к сознанию %1, не является ни справочником, ни документом'"),
				ИмяМетаданного);
	КонецЕсли;
	
	ВидыЗначений = КопированиеНастроекОбработкиКлиентСервер.ВидыЗначенийРеквизитовОбъектовДляСоздания();
	
	Для Каждого ЭлементРеквизита Из ДанныеОбъекта.ЗначенияРеквизитов Цикл
		
		ИмяРеквизита = ЭлементРеквизита.Ключ;
		ДанныеЗначенияРеквизита = ЭлементРеквизита.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначенияРеквизитаОбъектаДляСоздания
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Тогда
			ВызватьИсключение
				СтрШаблон(НСтр("ru = 'Ошибка при создании объекта %1, объект не имеет реквизита %2, присутствующего в выгрузке'"),
					ИмяМетаданного, ИмяРеквизита);
		КонецЕсли;
		
		Если ДанныеЗначенияРеквизита.ВидЗначения = ВидыЗначений.Значение Тогда
			
			Объект[ИмяРеквизита] = ДанныеЗначенияРеквизита.Значение;
			
		ИначеЕсли ДанныеЗначенияРеквизита.ВидЗначения = ВидыЗначений.СсылкаКСопоставлению Тогда
			
			ДанныеСсылкиКСопоставлению = ДанныеЗначенияРеквизита.СсылкаКСопоставлению;
			Если ДанныеСсылкиКСопоставлению.СопоставленнаяСсылка = Неопределено Тогда
				ВызватьИсключение
					СтрШаблон(НСтр("ru = 'Ошибка при создании объекта %1 с идентификатором %2, реквизит %3 имеет значение несопоставленной ссылки'"),
						ИмяМетаданного, ДанныеОбъекта.ИдентификаторПриЗагрузке, ИмяРеквизита);
			КонецЕсли;
			
			Объект[ИмяРеквизита] = ДанныеСсылкиКСопоставлению.СопоставленнаяСсылка;
			
		ИначеЕсли ДанныеЗначенияРеквизита.ВидЗначения = ВидыЗначений.ОбъектКСозданию Тогда
			
			ДанныеОбъектаРеквизита = ДанныеЗначенияРеквизита.ОбъектКСозданию;
			СсылкаНаСозданныйОбъект = СозданныеОбъекты[ДанныеОбъектаРеквизита.ИдентификаторПриЗагрузке];
			Если СсылкаНаСозданныйОбъект = Неопределено Тогда
				ВызватьИсключение
					СтрШаблон(НСтр("ru = 'Ошибка при создании объекта %1 с идентификатором %2, реквизит %3 имеет своим значением еще не созданный объект'"),
						ИмяМетаданного, ДанныеОбъекта.ИдентификаторПриЗагрузке, ИмяРеквизита);
			КонецЕсли;
			
			Объект[ИмяРеквизита] = СсылкаНаСозданныйОбъект;
			
		Иначе
			
			ВызватьИсключение
				СтрШаблон(НСтр("ru = 'Ошибка при создании объекта %1 с идентификатором %2, реквизит %3 имеет недопустимый вид значения'"),
					ИмяМетаданного, ДанныеОбъекта.ИдентификаторПриЗагрузке, ИмяРеквизита);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТабличнойЧасти Из ДанныеОбъекта.ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ЭлементТабличнойЧасти.Ключ;
		ДанныеСтрокТабличнойЧасти = ЭлементТабличнойЧасти.Значение;
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяТабличнойЧасти) Тогда
			ВызватьИсключение
				СтрШаблон(НСтр("ru = 'Ошибка при создании объекта %1, объект не имеет табличной части %2, присутствующей в выгрузке'"),
					ИмяМетаданного, ИмяТабличнойЧасти);
		КонецЕсли;
		
		//@skip-check variable-value-type
		ТабличнаяЧастьОбъекта = Объект[ИмяТабличнойЧасти]; // СправочникТабличнаяЧасть, ДокументТабличнаяЧасть
		
		Для Каждого ЗначенияКолонокСтроки Из ДанныеСтрокТабличнойЧасти Цикл
			
			//@skip-check variable-value-type
			//@skip-check dynamic-access-method-not-found
			НоваяСтрока = ТабличнаяЧастьОбъекта.Добавить(); // СправочникТабличнаяЧастьСтрока, ДокументТабличнаяЧастьСтрока
			
			Для Каждого ЭлементКолонки Из ЗначенияКолонокСтроки Цикл
				
				ИмяКолонки = ЭлементКолонки.Ключ;
				ДанныеЗначенияКолонки = ЭлементКолонки.Значение; // см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеЗначенияРеквизитаОбъектаДляСоздания
				
				Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, ИмяКолонки) Тогда
					ВызватьИсключение
						СтрШаблон(НСтр("ru = 'Ошибка при создании объекта %1, объект не имеет колонки %3 табличной части %2, присутствующей в выгрузке'"),
							ИмяМетаданного, ИмяТабличнойЧасти, ИмяКолонки);
				КонецЕсли;
				
				Если ДанныеЗначенияКолонки.ВидЗначения = ВидыЗначений.Значение Тогда
					
					НоваяСтрока[ИмяКолонки] = ДанныеЗначенияКолонки.Значение;
					
				ИначеЕсли ДанныеЗначенияКолонки.ВидЗначения = ВидыЗначений.СсылкаКСопоставлению Тогда
					
					ДанныеСсылкиКСопоставлению = ДанныеЗначенияКолонки.СсылкаКСопоставлению;
					Если ДанныеСсылкиКСопоставлению.СопоставленнаяСсылка = Неопределено Тогда
						ВызватьИсключение
							СтрШаблон(НСтр("ru = 'Ошибка при создании объекта %1 с идентификатором %2, колонка %3 табличной части %4 имеет значение несопоставленной ссылки'"),
								ИмяМетаданного, ДанныеОбъекта.ИдентификаторПриЗагрузке, ИмяКолонки, ИмяТабличнойЧасти);
					КонецЕсли;
					
					НоваяСтрока[ИмяКолонки] = ДанныеСсылкиКСопоставлению.СопоставленнаяСсылка;
					
				ИначеЕсли ДанныеЗначенияКолонки.ВидЗначения = ВидыЗначений.ОбъектКСозданию Тогда
					
					ДанныеОбъектаКолонки = ДанныеЗначенияКолонки.ОбъектКСозданию;
					СсылкаНаСозданныйОбъект = СозданныеОбъекты[ДанныеОбъектаКолонки.ИдентификаторПриЗагрузке];
					Если СсылкаНаСозданныйОбъект = Неопределено Тогда
						ВызватьИсключение
							СтрШаблон(НСтр("ru = 'Ошибка при создании объекта %1 с идентификатором %2, колонка %3 табличной части %4 имеет своим значением еще не созданный объект'"),
								ИмяМетаданного, ДанныеОбъекта.ИдентификаторПриЗагрузке, ИмяКолонки, ИмяТабличнойЧасти);
					КонецЕсли;
					
					НоваяСтрока[ИмяКолонки] = СсылкаНаСозданныйОбъект;
					
				Иначе
					
					ВызватьИсключение
						СтрШаблон(НСтр("ru = 'Ошибка при создании объекта %1 с идентификатором %2, колонка %3 табличной части %4 имеет недопустимый вид значения'"),
							ИмяМетаданного, ДанныеОбъекта.ИдентификаторПриЗагрузке, ИмяКолонки, ИмяТабличнойЧасти);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьДополнительныеСвойстваПриЗаписиОбъекта(ДанныеОбъекта, Объект);
	Объект.Записать();
	
	Возврат Объект.Ссылка;
	
КонецФункции

// Заполняет дополнительные свойства при записи объекта
// 
// Параметры:
//  ДанныеОбъекта - см. КопированиеНастроекОбработкиКлиентСервер.НовыеДанныеОбъектаДляСоздания
//  Объект - СправочникОбъект, ДокументОбъект -
Процедура ЗаполнитьДополнительныеСвойстваПриЗаписиОбъекта(ДанныеОбъекта, Объект)
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.НастройкиОбработкиВидовОбъектов") Тогда
		Объект.ДополнительныеСвойства.Вставить("НеОбновлятьСхему", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
