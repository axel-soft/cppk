////////////////////////////////////////////////////////////////////////////////
// Бронирование помещений, модуль для переопределения особенностей конфигурации для холдинга (клиент).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик события нажатие формы элемента справочника "Территории и помещения".
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//  Элемент - ПолеФормы.
//  СтандартнаяОбработка - Булево.
//
Процедура ТерриторииИПомещенияНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Если Элемент.Имя = "УзелОбработки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = ОбщегоНазначенияДокументооборотХолдингВызовСервера.УзлыКОДДанныеВыбора(Форма.Объект.УзелОбработки);
		Если ДанныеВыбора.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораУзлаОбмена", ЭтотОбъект, ПараметрыОбработчика);
		
		Форма.ПоказатьВыборИзМеню(ОписаниеОповещения, ДанныеВыбора, Элемент);
				
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает оперативное подтверждение броней на клиенте.
// В случае необходимости, запускает ожидание окончания длительной операции подтверждения.
// 
// Параметры:
//  РезультатБронирования - Структура - Общий результат броней::
//   * РезультатыБроней - Массив из Структура - Результаты каждой брони.
//      ** Бронь - ДокументСсылка.Бронь - Бронь.
//      ** ОжидаетПодтверждения - Булево - Бронь ожидает подтверждения.
//   * ОтмененныеБрони - Массив из ДокументСсылка.Бронь - Брони, для которых была выполнена отмена.
//   * ДлительнаяОперацияПодтверждения - Структура - Длительная операция оперативного подтверждения брони.
//                                       Неопределено                   - Длительная операция не запущена.
//
Процедура ОперативноеПодтверждениеБронирования(РезультатБронирования) Экспорт
	
	Если РезультатБронирования.ДлительнаяОперацияПодтверждения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения["БронированиеПомещений.РезультатБронирования"] = РезультатБронирования;
	ПодключитьОбработчикОжидания("ОперативноеПодтверждениеБронированияГлобальный", 0.1, Истина);
	
КонецПроцедуры


// Обработчик ожидания, подключающий ожидания подтверждения бронирования.
//
Процедура ОжидатьЗавершениеОперативногоПодтвержденияБронирования() Экспорт
	
	РезультатБронирования =
		ПараметрыПриложения["БронированиеПомещений.РезультатБронирования"];
	Если ТипЗнч(РезультатБронирования) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОжидающиеПодтвержденияБрони = Новый Массив;
	Для Каждого РезультатБрони Из РезультатБронирования.РезультатыБроней Цикл
		Если Не РезультатБрони.ОжидаетПодтверждения Тогда
			Продолжить;
		КонецЕсли;
		ОжидающиеПодтвержденияБрони.Добавить(РезультатБрони.Бронь);
	КонецЦикла;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПослеОперативногоПодтвержденияБронирования",
		ЭтотОбъект,
		ОжидающиеПодтвержденияБрони);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется подтверждение бронирования.'");
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатБронирования.ДлительнаяОперацияПодтверждения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
	ПараметрыПриложения["БронированиеПомещений.РезультатБронирования"] = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Показывает предупреждение оперативного бронирования.
// 
// Параметры:
//  ПараметрыПредупреждения - Структура:
//   * Заголовок - Строка - Заголовок предупреждения.
//   * Пояснение - Строка - Текст предупреждения.
//   * Брони     - Массив из ДокументСсылка.Бронь - Брони, которые нужно отобразить в предупреждении.
//
Процедура ПоказатьПредупреждениеОперативногоБронирования(ПараметрыПредупреждения) Экспорт
	
	МассивТекстПредупреждения = Новый Массив;
	МассивТекстПредупреждения.Добавить(ПараметрыПредупреждения.Пояснение);
	МассивТекстПредупреждения.Добавить(Символы.ПС);
	Для Каждого Бронь Из ПараметрыПредупреждения.Брони Цикл
		МассивТекстПредупреждения.Добавить(
			Новый ФорматированнаяСтрока(
				Строка(Бронь),,,,
				ПолучитьНавигационнуюСсылку(Бронь)));
		МассивТекстПредупреждения.Добавить(Символы.ПС);
	КонецЦикла;
	
	ТекстПредупреждения = Новый ФорматированнаяСтрока(МассивТекстПредупреждения);
	
	ПоказатьПредупреждение(, ТекстПредупреждения,, ПараметрыПредупреждения.Заголовок);
	
КонецПроцедуры

// Обработка оповещения процедуры БронированиеПомещенийГлобальный.ОперативноеПодтверждениеБронированияГлобальный.
//
// Параметры:
//  РезультатДлительнойОперации - Структура - Результат длительной операции.
//  ОжидающиеПодтвержденияБрони - Массив из ДокументСсылка.Бронь    - Ожидающие подтверждения брони.
//
Процедура ПослеОперативногоПодтвержденияБронирования(РезультатДлительнойОперации, ОжидающиеПодтвержденияБрони) Экспорт
	
	Рекомендация = "";
	ПричинаОтмены = "";
	ВсеБрони = Новый Массив;
	ОтмененныеБрони = Новый Массив;
	ПодтвержденныеБрони = Новый Массив;
	Если РезультатДлительнойОперации = Неопределено
		Или РезультатДлительнойОперации.Статус = "Ошибка"
		Или РезультатДлительнойОперации.Статус = "Отменено" Тогда
		
		Если РезультатДлительнойОперации = Неопределено
			Или РезультатДлительнойОперации.Статус = "Отменено" Тогда
			
			ПричинаОтмены = НСтр("ru = 'подтверждение отменено пользователем'");
			
		ИначеЕсли РезультатДлительнойОперации.Статус = "Ошибка" Тогда
			
			ПричинаОтмены = НСтр("ru = 'возникла техническая ошибка'");
			Рекомендация = НСтр("ru = 'Попробуйте повторить действие или обратитесь к администратору'");
			
		КонецЕсли;
		
		// Возникла ошибка при выполнении операции или пользователь отменил задание.
		// Отменим брони которые ещё ожидают подтверждения, если такие есть
		// и уведомим о результате пользователя.
		РезультатыПодтвержденияБроней = БронированиеПомещенийХолдингВызовСервера.ПрерватьПодтверждениеБроней(
			ОжидающиеПодтвержденияБрони,
			ПричинаОтмены);
		Для Каждого РезультатПодтвержденияБрони Из РезультатыПодтвержденияБроней Цикл
			
			Если РезультатПодтвержденияБрони.Подтверждена Тогда
				ПодтвержденныеБрони.Добавить(РезультатПодтвержденияБрони.Бронь);
			Иначе
				ОтмененныеБрони.Добавить(РезультатПодтвержденияБрони.Бронь);
			КонецЕсли;
			ВсеБрони.Добавить(РезультатПодтвержденияБрони.Бронь);
			
		КонецЦикла;
		
	ИначеЕсли РезультатДлительнойОперации.Статус = "Выполнено" Тогда
		
		// Операция выполнена успешно.
		// Уведомим пользователя о результате.
		РезультатыПодтвержденияБроней =
			ПолучитьИзВременногоХранилища(РезультатДлительнойОперации.АдресРезультата);
		Если РезультатыПодтвержденияБроней = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректный результат длительной операции %1'"),
				ТипЗнч(РезультатыПодтвержденияБроней));
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(РезультатДлительнойОперации.АдресРезультата);
		
		ПричинаОтмены = НСтр("ru = 'помещение занято'");
		Рекомендация = НСтр("ru = 'Выберите другое помещение или другое время'");
		
		Для Каждого РезультатПодтвержденияБрони Из РезультатыПодтвержденияБроней Цикл
			
			Если РезультатПодтвержденияБрони.Подтверждена Тогда
				ПодтвержденныеБрони.Добавить(РезультатПодтвержденияБрони.Бронь);
			Иначе
				ОтмененныеБрони.Добавить(РезультатПодтвержденияБрони.Бронь);
			КонецЕсли;
			ВсеБрони.Добавить(РезультатПодтвержденияБрони.Бронь);
			
		КонецЦикла;
		
	ИначеЕсли РезультатДлительнойОперации.Статус = "Выполняется" Тогда
		
		// Операция всё ещё выполняется.
		// Оповещение пользователя не требуется.
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неожиданный статус длительной операции %1'"),
			РезультатДлительнойОперации.Статус);
		
	КонецЕсли;
	
	КоличествоОтмененныхБроней = ОтмененныеБрони.Количество();
	КоличествоПодтвержденныхБроней = ПодтвержденныеБрони.Количество();
	Если ВсеБрони.Количество() > 0 Тогда
		Оповестить("Запись_Бронь", ВсеБрони);
	КонецЕсли;
	
	ПараметрыПредупреждения = Новый Структура("Заголовок, Пояснение, Брони", "", "", Новый Массив);
	Если (КоличествоПодтвержденныхБроней <> 0 И КоличествоОтмененныхБроней <> 0)
		Или (КоличествоПодтвержденныхБроней = 0 И КоличествоОтмененныхБроней > 0) Тогда
		
		ПараметрыПредупреждения.Брони = ОтмененныеБрони;
		ПараметрыПредупреждения.Заголовок = ?(КоличествоОтмененныхБроней = 1,
			НСтр("ru = 'Бронь не подтверждена'"),
			НСтр("ru = 'Брони не подтверждены'"));
		
		ОписаниеСобытия = ?(КоличествоОтмененныхБроней = 1,
			НСтр("ru = 'Бронь не подтверждена'"),
			СтрокаСЧислом(
				НСтр("ru = '; %1 бронь не подтверждена;; %1 брони не подтверждены; %1 броней не подтверждены; %2 брони не подтверждена'"),
				КоличествоОтмененныхБроней,
				ВидЧисловогоЗначения.Количественное));
		
		Если ЗначениеЗаполнено(Рекомендация) Тогда
			ПараметрыПредупреждения.Пояснение = СтрШаблон(НСтр("ru = '%1, т.к. %2. %3.'"),
				ОписаниеСобытия,
				ПричинаОтмены,
				Рекомендация);
		Иначе
			ПараметрыПредупреждения.Пояснение = СтрШаблон(НСтр("ru = '%1, т.к. %2.'"),
				ОписаниеСобытия,
				ПричинаОтмены);
		КонецЕсли;
		
		ПоказатьПредупреждениеОперативногоБронирования(ПараметрыПредупреждения);
		
	ИначеЕсли КоличествоПодтвержденныхБроней > 0 И КоличествоОтмененныхБроней = 0 Тогда
		
		Если КоличествоПодтвержденныхБроней = 1 Тогда
			
			ЗаголовокОповещения = НСтр("ru = 'Бронь подтверждена'");
			ДействиеПриНажатии = ПолучитьНавигационнуюСсылку(ПодтвержденныеБрони[0]);
			
		Иначе
			
			ЗаголовокОповещения = СтрокаСЧислом(
				НСтр("ru = '; %1 бронь подтверждена;; %1 брони подтверждены; %1 броней подтверждены; %1 брони подтверждены'"),
				КоличествоПодтвержденныхБроней,
				ВидЧисловогоЗначения.Количественное);
			
			ПараметрыПредупреждения.Заголовок = НСтр("ru = 'Брони подтверждены'");
			ПараметрыПредупреждения.Пояснение = ЗаголовокОповещения + ".";
			ПараметрыПредупреждения.Брони = ПодтвержденныеБрони;
			ДействиеПриНажатии = Новый ОписаниеОповещения(
				"ПоказатьПредупреждениеОперативногоБронирования",
				ЭтотОбъект,
				ПараметрыПредупреждения);
			
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			ЗаголовокОповещения,
			ДействиеПриНажатии,
			ПояснениеОповещения(ПодтвержденныеБрони),
			БиблиотекаКартинок.Успешно32,
			СтатусОповещенияПользователя.Информация);
		
	КонецЕсли;
	
	Если ОтмененныеБрони.Количество() > 0 Тогда
		СобытиеОтменаБрони = ПредопределенноеЗначение("Справочник.ВидыБизнесСобытий.ОтменаБрони");
		Для Каждого ОтмененнаяБронь Из ОтмененныеБрони Цикл
			РаботаСУведомлениямиКлиент.ОтметитьОбработкуУведомления(СобытиеОтменаБрони, ОтмененнаяБронь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Формирует пояснение оповещения по массиву объектов оповещения.
//
// Параметры:
//  ОбъектыОповещения - Массив из ДокументСсылка.Бронь - Объект оповещения.
// 
// Возвращаемое значение:
//  Строка - Пояснение оповещения.
//
Функция ПояснениеОповещения(ОбъектыОповещения)
	
	МаксимальноеКоличествоСтрокПояснения = 3;
	КоличествоОбъектовОповещения = ОбъектыОповещения.Количество();
	КоличествоОтображаемыхОбъектов =
		?(КоличествоОбъектовОповещения > МаксимальноеКоличествоСтрокПояснения,
			МаксимальноеКоличествоСтрокПояснения - 1,
			КоличествоОбъектовОповещения);
	
	МассивПояснениеОповещения = Новый Массив;
	Для Каждого ОбъектОповещения Из ОбъектыОповещения Цикл
		
		Если МассивПояснениеОповещения.Количество() >= КоличествоОтображаемыхОбъектов Тогда
			Прервать;
		КонецЕсли;
		
		МассивПояснениеОповещения.Добавить(Строка(ОбъектОповещения));
		
	КонецЦикла;
	
	Если КоличествоОбъектовОповещения > КоличествоОтображаемыхОбъектов Тогда
		МассивПояснениеОповещения.Добавить(
			СтрШаблон(
				НСтр("ru = 'и другие (всего %1)'"),
				СтрокаСЧислом(
					НСтр("ru = '; %1 бронь;; %1 брони; %1 броней; %1 брони'"),
					КоличествоОбъектовОповещения,
					ВидЧисловогоЗначения.Количественное)));
	КонецЕсли;
	
	ПояснениеОповещения = СтрСоединить(МассивПояснениеОповещения, Символы.ПС);
	
	Возврат ПояснениеОповещения;
	
КонецФункции

// Обработчик оповещения процедуры ТерриторииИПомещенияНажатие.
// 
// Параметры:
//  Результат - ЭлементСпискаЗначений, Неопределено.
//  ДополнительныеПараметры - Структура.
//
Процедура ПослеВыбораУзлаОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Форма.УзелОбработки = Результат.Представление;
	Форма.Объект.УзелОбработки = Результат.Значение.УникальныйИдентификатор();
	
КонецПроцедуры

#КонецОбласти