
#Область ПрограммныйИнтерфейс

// Заполняет шаблон параметрами.
//
// Параметры:
//  Шаблон  - СправочникОбъект.Шаблон<Процесса> - шаблон-объект, который требуется заполнить.
//  ПараметрыШаблона  - Структура - представляет собой структуру шаблона процесса.
//                                  Структура определяется соответствующей процедурой менеджера шаблона процесса.
//
Процедура ЗаполнитьШаблон(Шаблон, ПараметрыШаблона) Экспорт
	
	Шаблон.Заполнить(Новый Структура);
	ЗаполнитьЗначенияСвойств(Шаблон, ПараметрыШаблона,,"Предметы");
	
	// Определений действий (точки маршрута) процесса
	ИмяПроцесса = Справочники[Шаблон.Метаданные().Имя].ИмяПроцесса(Шаблон);
	ДействияПроцесса = БизнесПроцессы[ИмяПроцесса].ТочкиМаршрута;
	
	// Заполнение табличных частей Предметы и ПредметыЗадач шаблона процесса
	Для Каждого Предмет Из ПараметрыШаблона.Предметы Цикл
		
		НоваяСтрокаПредмет = Шаблон.Предметы.Добавить();
		НоваяСтрокаПредмет.РольПредмета = Предмет.РольПредмета;
		НоваяСтрокаПредмет.ИмяПредмета = МультипредметностьВызовСервера.
			ПолучитьСсылкуНаИмяПредмета(Предмет.ИмяПредмета);
			
		Если ЗначениеЗаполнено(Предмет.ИмяПредметаОснование) Тогда
			НоваяСтрокаПредмет.ИмяПредметаОснование = МультипредметностьВызовСервера.
				ПолучитьСсылкуНаИмяПредмета(Предмет.ИмяПредметаОснование);
		КонецЕсли;
		
		Для Каждого Действие Из ДействияПроцесса Цикл
			НоваяСтрока = Шаблон.ПредметыЗадач.Добавить();
			НоваяСтрока.ТочкаМаршрута = Действие;
			НоваяСтрока.ИмяПредмета = НоваяСтрокаПредмет.ИмяПредмета;
			Если Предмет.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") 
				И Действие = Предмет.ТочкаМаршрута Тогда
				НоваяСтрока.ОбязательноеЗаполнение = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполнение рабочей группы шаблона процесса
	РабочаяГруппаДобавить = Новый Массив;
	Для Каждого Участник Из ПараметрыШаблона.РабочаяГруппа Цикл
		
		СтруктураУчастникаРабГруппы = Новый Структура;
		СтруктураУчастникаРабГруппы.Вставить("Участник", Участник.Участник);
		
		РабочаяГруппаДобавить.Добавить(СтруктураУчастникаРабГруппы);
		
	КонецЦикла;
	
	Шаблон.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
КонецПроцедуры

// Записывает шаблон процесса с указанным видом записи.
// Вид записи определяет, какие обработчики будут выполняться перед и при записи шаблона.
//
// Но при этом есть ряд обязательных обработчиков, которые выполняются всегда.
// В таких обработчиках нет проверки дополнительного свойства ВидЗаписи.
//
// Параметры:
//   ШаблонОбъект - СправочникСсылка.<НаименованиеШаблонаПроцесса>
//   ВидЗаписи - Строка - может принимать значения:
//                           ПростаяЗапись - запись шаблона без с отключением всех обработчиков.
//                           ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов - запись шаблона с заполнением служебных реквизитов КП.
//
Процедура ЗаписатьШаблон(ШаблонОбъект, ВидЗаписи) Экспорт
	
	ШаблонОбъект.ДополнительныеСвойства.Вставить("ВидЗаписи", ВидЗаписи);
	
	ШаблонОбъект.Записать();
	
	ШаблонОбъект.ДополнительныеСвойства.Удалить("ВидЗаписи");
	
КонецПроцедуры

// Общий обработчик шаблонов процессов ПередЗаписью
//
// Параметры:
//  Шаблон - СправочникОбъект.Шаблон<ИмяШаблонаПроцесса> - объект шаблона процесса.
//  Отказ - Булево - ссылка на параметр Отказ в процедуре ПередЗаписью модуля объекта.
//
Процедура ШаблонПередЗаписью(Шаблон, Отказ) Экспорт
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Шаблон.ИсточникДанных)
		Или ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы = Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоЗаполненитьРевизитКомплексныйПроцесс = Ложь;
	Если Шаблон.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоЗаполненитьРевизитКомплексныйПроцесс = (Шаблон.ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
		
		Если Не ТолькоЗаполненитьРевизитКомплексныйПроцесс Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоЗаполненитьРевизитКомплексныйПроцесс Тогда
	
		Если ЗначениеЗаполнено(Шаблон.ВладелецШаблона)
			И ОбщегоНазначения.СсылкаСуществует(Шаблон.ВладелецШаблона) Тогда
			
			Если ТипЗнч(Шаблон.ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				Шаблон.КомплексныйПроцесс = Шаблон.ВладелецШаблона;
			Иначе
				Шаблон.КомплексныйПроцесс = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
					Шаблон.ВладелецШаблона, "КомплексныйПроцесс");
			КонецЕсли;
			
		КонецЕсли;
		
		// Пропускаем определение дескриптора доступа и проверку прав,
		// если заполнен реквизит КомплексныйПроцесс.
		Если ЗначениеЗаполнено(Шаблон.КомплексныйПроцесс) Тогда
			Шаблон.ДополнительныеСвойства.Вставить(
				"ПропуститьОпределениеДескриптораДоступаИПроверкуПрав", Истина);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ОбычнаяЗапись Тогда
		
	// Обработка рабочей группы
	Если ЗначениеЗаполнено(Шаблон.Ссылка) Тогда
		СсылкаОбъекта = Шаблон.Ссылка;
	Иначе
		СсылкаОбъекта = Шаблон.ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Шаблон.Ссылка);
			СсылкаОбъекта = МенеджерШаблона.ПолучитьСсылку();
			Шаблон.УстановитьСсылкуНового(СсылкаОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
		
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если Шаблон.ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		
		Для Каждого Эл Из Шаблон.ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.Изменение = Эл.Изменение;
			
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если Шаблон.ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		
		Для Каждого Эл Из Шаблон.ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			
			// Поиск удаляемого участника в итоговой рабочей группе
			Для Каждого Эл2 Из РабочаяГруппа Цикл
				
				Если Эл2.Участник = Эл.Участник 
					И Эл2.Изменение = Эл.Изменение Тогда
					
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
				
		КонецЦикла;	
			
	КонецЕсли;			
	
	// Запись итоговой рабочей группы
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		СсылкаОбъекта,
		РабочаяГруппа,
		Ложь); // ОбновитьПрава
	
	// Установка необходимости обновления прав доступа
	Шаблон.ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьШаблоныПоДокументу(Документ, Тип, ТолькоНастроенные = Истина) Экспорт
	
	ШаблоныПоДокументу = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат ШаблоныПоДокументу;
	КонецЕсли;	
	
	ТипПредмета = ТипЗнч(Документ);
	
	Если ТипПредмета <> Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		Возврат ШаблоныПоДокументу;
		
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначенияДокументооборот.
		ЗначенияРеквизитовОбъектаВПривилегированномРежиме(Документ, "ВидДокумента, Организация");
	ВидДокумента = РеквизитыДокумента.ВидДокумента;
	Организация = РеквизитыДокумента.Организация;
	
	МассивВидовДокумента = Делопроизводство.ПолучитьВидДокументаИРодителей(ВидДокумента);
	
	Запрос = Новый Запрос;
	Если Тип = "ШаблоныИсполнения" 
		Или Тип = "ШаблоныОзнакомления" 	
		Или Тип = "ШаблоныРассмотрения"
		Или Тип = "ШаблоныРегистрации"
		Или Тип = "ШаблоныСогласования"
		Или Тип = "ШаблоныПодписания"
		Или Тип = "ШаблоныПриглашения"
		Или Тип = "ШаблоныУтверждения"
		Или Тип = "ШаблоныКомплексныхБизнесПроцессов" Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
			|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие,
			|	НастройкаШаблоновБизнесПроцессов.Организация КАК Организация
			|ИЗ
			|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.%1 КАК ШаблоныПроцессов
			|		ПО НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = ШаблоныПроцессов.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
			|		ПО НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = ДоступностьШаблоновПроцессов.Шаблон
			|ГДЕ
			|	НастройкаШаблоновБизнесПроцессов.КомуНазначен В (&ВидДокумента)
			|	И ШаблоныПроцессов.ПометкаУдаления = ЛОЖЬ
			|	И ДоступностьШаблоновПроцессов.РучнойЗапуск";
			
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, Тип);
	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидДокумента", МассивВидовДокумента);
	
	Выборка = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст
			+ " И НастройкаШаблоновБизнесПроцессов.Организация В (&Организации)
				|ИТОГИ ПО
				|	Организация";
		
		Организации = Новый Массив;
		Организации.Добавить(Справочники.Организации.ПустаяСсылка());
		Если ЗначениеЗаполнено(Организация) Тогда
			Организации.Добавить(Организация);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Организации", Организации);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ВыборкаПоОрганизациям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаШаблоновПоПустойОрганизации = Неопределено;
			ВыборкаШаблоновПоЗаполненнойОрганизации = Неопределено;
			Пока ВыборкаПоОрганизациям.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаПоОрганизациям.Организация) Тогда
					ВыборкаШаблоновПоЗаполненнойОрганизации = ВыборкаПоОрганизациям.Выбрать();
				Иначе
					ВыборкаШаблоновПоПустойОрганизации = ВыборкаПоОрганизациям.Выбрать();
				КонецЕсли;
			КонецЦикла;
			Если ВыборкаШаблоновПоЗаполненнойОрганизации <> Неопределено
				И ВыборкаШаблоновПоЗаполненнойОрганизации.Количество() > 0 Тогда
				
				Выборка = ВыборкаШаблоновПоЗаполненнойОрганизации;
			Иначе
				Выборка = ВыборкаШаблоновПоПустойОрганизации;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка <> Неопределено Тогда
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.Условие.Пустая() Тогда
				РезультатПроверки = РаботаСАлгоритмамиПроверки.
					ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(Документ, Выборка.Условие);
				Если РезультатПроверки Тогда
					ШаблоныПоДокументу.Добавить(Выборка.Шаблон);
				КонецЕсли;
			Иначе
				ШаблоныПоДокументу.Добавить(Выборка.Шаблон);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТолькоНастроенные И ШаблоныПоДокументу.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		
		Если Тип = "ШаблоныИсполнения" 
			Или Тип = "ШаблоныОзнакомления" 	
			Или Тип = "ШаблоныРассмотрения"
			Или Тип = "ШаблоныРегистрации"
			Или Тип = "ШаблоныСогласования"
			Или Тип = "ШаблоныПодписания"
			Или Тип = "ШаблоныПриглашения"
			Или Тип = "ШаблоныУтверждения"
			Или Тип = "ШаблоныКомплексныхБизнесПроцессов" Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Шаблоны.Ссылка КАК Шаблон,
			|   ЗНАЧЕНИЕ(Справочник.АлгоритмыПроверки.ПустаяСсылка) КАК Условие
			|ИЗ
			|	Справочник." + Тип + " КАК Шаблоны
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
			|	ПО Шаблоны.Ссылка = ДоступностьШаблоновПроцессов.Шаблон
			|ГДЕ
			|	НЕ Шаблоны.ШаблонВКомплексномПроцессе
			|	И ДоступностьШаблоновПроцессов.РучнойЗапуск
			|	И 0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(*)
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = Шаблоны.Ссылка)";
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.Условие.Пустая() Тогда
				РезультатПроверки = РаботаСАлгоритмамиПроверки.ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(Документ, Выборка.Условие);
				Если РезультатПроверки Тогда
					ШаблоныПоДокументу.Добавить(Выборка.Шаблон);
				КонецЕсли;
			Иначе
				ШаблоныПоДокументу.Добавить(Выборка.Шаблон);	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ШаблоныПоДокументу;
	
КонецФункции

// Устанавливает условное оформление для списка шаблонов.
//
// Параметры:
//  УсловноеОформление - УсловноеОформление - условное оформление динамического списка
//                       с шаблонами процессов.
//
Процедура УстановитьУсловноеОформлениеСпискаШаблонов(УсловноеОформление) Экспорт
	
	// помеченные на удаление шаблоны
	ПредставлениеЭлемента = "Шаблон помечен на удаление (стандартная настройка)";
	ЭлементУсловногоОформления = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление, ПредставлениеЭлемента);
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
КонецПроцедуры

// Возвращает назначенные шаблоны процессов, подходящие для объекта.
//
// Параметры:
//  Объекты - Массив - ссылки на объекты.
//   * СправочникСсылка.ДокументыПредприятия,
//   * СправочникСсылка.УведомленияПрограммы,
//   * СправочникСсылка.ТемыОбсуждений,
//   * СправочникСсылка.СообщенияОбсуждений,
//   * СправочникСсылка.Контрагенты,
//   * ДокументСсылка.ВходящееПисьмо,
//   * ДокументСсылка.ИсходящееПисьмо,
//   * СправочникСсылка.Файлы,
//   * ДокументСсылка.Бронь,
//   * ДокументСсылка.Мероприятия,
//   * СправочникСсылка.Пользователи
//   * СправочникСсылка.Проекты
//   * СправочникСсылка.ПроектныеЗадачи
//  ТипШаблона - Тип, Строка - тип получаемого шаблона.
//               Для шаблонов составных процессов следует передавать строку,
//               сохраняемую в реквизите ТипШаблона.
//
// Возвращаемое значение:
//  Массив - массив ссылок на шаблоны.
//
Функция ШаблоныПоОбъектам(Объекты, ТипШаблона = Неопределено) Экспорт
	
	Шаблоны = Новый Массив;
	
	Если Объекты.Количество() = 0 Тогда
		Возврат Шаблоны;
	КонецЕсли;
	
	ИменаШаблонов = ШаблоныБизнесПроцессовКлиентСервер.ИменаСправочниковШаблонов();
	
	ПолучаемыеТипыШаблонов = Новый Массив;
	Для Каждого ИмяШаблона Из ИменаШаблонов Цикл
		ТипТекущегоШаблона = Тип("СправочникСсылка." + ИмяШаблона);
		
		Если ТипШаблона <> Неопределено И ТипТекущегоШаблона <> ТипШаблона Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучаемыеТипыШаблонов.Добавить(ТипТекущегоШаблона);
	КонецЦикла;
	
	ДанныеОбъектов = Новый ТаблицаЗначений;
	
	ТипыКолонки = Новый Массив;
	Для Каждого Объект Из Объекты Цикл
		ТипыКолонки.Добавить(ТипЗнч(Объект));
	КонецЦикла;
	ДанныеОбъектов.Колонки.Добавить("Объект", Новый ОписаниеТипов(ТипыКолонки));
	
	ТипыКолонки.Очистить();
	ТипыКолонки.Добавить(Тип("СправочникСсылка.ВидыДокументов"));
	ТипыКолонки.Добавить(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ДанныеОбъектов.Колонки.Добавить("КомуНазначен", Новый ОписаниеТипов(ТипыКолонки));
	
	ТипыКолонки.Очистить();
	ТипыКолонки.Добавить(Тип("СправочникСсылка.Организации"));
	ДанныеОбъектов.Колонки.Добавить("Организация", Новый ОписаниеТипов(ТипыКолонки)); // организация объекта.
	
	Для Каждого Объект Из Объекты Цикл
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект) Тогда
			РеквизитыДокумента = 
				ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				Объект, "ВидДокумента, Организация");
				
			ВидыДокументов = Делопроизводство.ПолучитьВидДокументаИРодителей(РеквизитыДокумента.ВидДокумента);
			Для Каждого ВидДокумента Из ВидыДокументов Цикл
				СтрокаДанных = ДанныеОбъектов.Добавить();
				СтрокаДанных.Объект = Объект;
				СтрокаДанных.КомуНазначен = ВидДокумента;
				СтрокаДанных.Организация = РеквизитыДокумента.Организация;
			КонецЦикла;
		Иначе
			СтрокаДанных = ДанныеОбъектов.Добавить();
			СтрокаДанных.Объект = Объект;
			СтрокаДанных.КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект));
			СтрокаДанных.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросПолученияПодходящихНастроек = 
		"ВЫБРАТЬ
		|	ДанныеОбъектов.Объект КАК Объект,
		|	ДанныеОбъектов.Организация КАК Организация,
		|	ДанныеОбъектов.КомуНазначен КАК КомуНазначен
		|ПОМЕСТИТЬ ДанныеОбъектов
		|ИЗ
		|	&ДанныеОбъектов КАК ДанныеОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДанныеОбъектов.Объект КАК Объект,
		|	ИСТИНА КАК ПоОрганизации,
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
		|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие
		|ПОМЕСТИТЬ ПодходящиеНастройки
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|		ПО ДанныеОбъектов.КомуНазначен = НастройкаШаблоновБизнесПроцессов.КомуНазначен
		|			И ДанныеОбъектов.Организация = НастройкаШаблоновБизнесПроцессов.Организация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
		|		ПО (НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = ДоступностьШаблоновПроцессов.Шаблон)
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И ДоступностьШаблоновПроцессов.РучнойЗапуск
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОбъектов.Объект,
		|	ЛОЖЬ,
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса,
		|	НастройкаШаблоновБизнесПроцессов.Условие
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|		ПО ДанныеОбъектов.КомуНазначен = НастройкаШаблоновБизнесПроцессов.КомуНазначен
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
		|		ПО (НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = ДоступностьШаблоновПроцессов.Шаблон)
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И ДоступностьШаблоновПроцессов.РучнойЗапуск";
	
	ЗапросыУдаленияНеактуальныхШаблонов = Новый Массив;
	ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		|	ПодходящиеНастройки.Объект КАК Объект,
		|	ПодходящиеНастройки.ПоОрганизации КАК ПоОрганизации,
		|	ПодходящиеНастройки.Шаблон КАК Шаблон,
		|	ПодходящиеНастройки.Условие КАК Условие
		|ИЗ
		|	ПодходящиеНастройки КАК ПодходящиеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныИсполнения КАК ШаблоныПроцессов
		|		ПО ПодходящиеНастройки.Шаблон = ШаблоныПроцессов.Ссылка
		|ГДЕ
		|	ШаблоныПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И Не ШаблоныПроцессов.ШаблонВКомплексномПроцессе";
	
	ДобавитьКлючевоеСловоРАЗРЕШЕННЫЕ = Истина;
	Для Каждого ИмяШаблона Из ИменаШаблонов Цикл
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ШаблоныИсполнения", ИмяШаблона);
		Если ДобавитьКлючевоеСловоРАЗРЕШЕННЫЕ Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
		КонецЕсли;
		ЗапросыУдаленияНеактуальныхШаблонов.Добавить(ТекстЗапроса);
		ДобавитьКлючевоеСловоРАЗРЕШЕННЫЕ = Ложь;
	КонецЦикла;
	ЗапросУдаленияНеактуальныхШаблонов = СтрСоединить(ЗапросыУдаленияНеактуальныхШаблонов,
		Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ЗапросПолученияПодходящихНастроек
		+ Символы.ПС + Символы.ПС + ";" + Символы.ПС + Символы.ПС
		+ ЗапросУдаленияНеактуальныхШаблонов;
	
	Запрос.УстановитьПараметр("ДанныеОбъектов", ДанныеОбъектов);
	
	ШаблоныКандидаты = Запрос.Выполнить().Выгрузить();
	
	ШаблоныКандидаты.Колонки.Добавить("ТипШаблона");
	Для Каждого СтрокаТаблицы Из ШаблоныКандидаты Цикл
		СтрокаТаблицы.ТипШаблона = ТипЗнч(СтрокаТаблицы.Шаблон);
	КонецЦикла;
	
	ШаблоныКандидаты.Индексы.Добавить("Объект, ТипШаблона");
	
	Для Каждого Объект Из Объекты Цикл
		Для Каждого ТипТекущегоШаблона Из ПолучаемыеТипыШаблонов Цикл
			
			ШаблоныОбъектаПоТипу =
				ШаблоныКандидаты.НайтиСтроки(Новый Структура("Объект, ТипШаблона", Объект, ТипТекущегоШаблона));
			
			ШаблоныПоОрганизации = Новый Массив;
			ШаблоныБезОрганизации = Новый Массив;
			
			Для Каждого ШаблонОбъектаПоТипу Из ШаблоныОбъектаПоТипу Цикл
				Если ШаблонОбъектаПоТипу.ПоОрганизации Тогда
					ШаблоныПоОрганизации.Добавить(ШаблонОбъектаПоТипу);
				Иначе
					ШаблоныБезОрганизации.Добавить(ШаблонОбъектаПоТипу);
				КонецЕсли;
			КонецЦикла;
			
			Если ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям")
				И ШаблоныПоОрганизации.Количество() > 0 Тогда
				
				ШаблоныДляПроверкиУсловий = ШаблоныПоОрганизации;
			Иначе
				ШаблоныДляПроверкиУсловий = ШаблоныБезОрганизации;
			КонецЕсли;
			
			Для Каждого ШаблонСУсловием Из ШаблоныДляПроверкиУсловий Цикл
				Если ЗначениеЗаполнено(ШаблонСУсловием.Условие) Тогда
					Если РаботаСАлгоритмамиПроверки.ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(
						Объект, ШаблонСУсловием.Условие) Тогда
						
						Шаблоны.Добавить(ШаблонСУсловием.Шаблон);
					КонецЕсли;
				Иначе
					Шаблоны.Добавить(ШаблонСУсловием.Шаблон);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Шаблоны);
	
КонецФункции

// Заполняет шаблоны процессов по умолчанию.
//
Процедура ЗаполнитьШаблоныПоУмолчанию() Экспорт
	
	ПроцессОбъект = Справочники.ШаблоныИсполнения.ПоУмолчанию.ПолучитьОбъект();
	ПроцессОбъект.ЗаполнитьШаблонПоУмолчанию();
	ПроцессОбъект.Записать();
	
	ПроцессОбъект = Справочники.ШаблоныКомплексныхБизнесПроцессов.ПоУмолчанию.ПолучитьОбъект();
	ПроцессОбъект.ЗаполнитьШаблонПоУмолчанию();
	ПроцессОбъект.Записать();
	
	ПроцессОбъект = Справочники.ШаблоныОзнакомления.ПоУмолчанию.ПолучитьОбъект();
	ПроцессОбъект.ЗаполнитьШаблонПоУмолчанию();
	ПроцессОбъект.Записать();
	
	ПроцессОбъект = Справочники.ШаблоныПриглашения.ПоУмолчанию.ПолучитьОбъект();
	ПроцессОбъект.ЗаполнитьШаблонПоУмолчанию();
	ПроцессОбъект.Записать();
	
	ПроцессОбъект = Справочники.ШаблоныРассмотрения.ПоУмолчанию.ПолучитьОбъект();
	ПроцессОбъект.ЗаполнитьШаблонПоУмолчанию();
	ПроцессОбъект.Записать();
	
	ПроцессОбъект = Справочники.ШаблоныРегистрации.ПоУмолчанию.ПолучитьОбъект();
	ПроцессОбъект.ЗаполнитьШаблонПоУмолчанию();
	ПроцессОбъект.Записать();
	
	ПроцессОбъект = Справочники.ШаблоныСогласования.ПоУмолчанию.ПолучитьОбъект();
	ПроцессОбъект.ЗаполнитьШаблонПоУмолчанию();
	ПроцессОбъект.Записать();
	
	ПроцессОбъект = Справочники.ШаблоныПодписания.ПоУмолчанию.ПолучитьОбъект();
	ПроцессОбъект.ЗаполнитьШаблонПоУмолчанию();
	ПроцессОбъект.Записать();
	
	ПроцессОбъект = Справочники.ШаблоныУтверждения.ПоУмолчанию.ПолучитьОбъект();
	ПроцессОбъект.ЗаполнитьШаблонПоУмолчанию();
	ПроцессОбъект.Записать();
	
	ОбновитьДоступностьШаблоновПоУмолчанию();
	
КонецПроцедуры

// Возвращает исходный шаблон этапа комплексного процесса.
//
// Параметры:
//  ШаблонПроцесса - СправочникСсылка - шаблон процесс, являющийся этапом комплексного процесса.
//
// Возвращаемое значение:
//  ПроизвольнаяСсылка - Шаблон процесса.
//
Функция ИсходныйШаблонЭтапаПроцесса(ШаблонПроцесса) Экспорт
	
	ШаблонЭтапа = Неопределено;
	
	РеквизитыШаблонаПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ШаблонПроцесса, "КомплексныйПроцесс, ВладелецШаблона");
	
	КомплексныйПроцесс = РеквизитыШаблонаПроцесса.КомплексныйПроцесс;
	Если Не ЗначениеЗаполнено(КомплексныйПроцесс) Тогда
		Возврат ШаблонЭтапа;
	КонецЕсли;
	
	Шаблон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомплексныйПроцесс, "Шаблон");
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат ШаблонЭтапа;
	КонецЕсли;
	
	// Получим идентификатор этапа для шаблона процесса.
	Этапы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШаблонаПроцесса.ВладелецШаблона, "Этапы");
	Если Этапы = Неопределено Тогда
		Возврат ШаблонЭтапа;
	КонецЕсли;
	Этапы = Этапы.Выгрузить();
	
	СтрокаЭтап = Этапы.Найти(ШаблонПроцесса);
	Если СтрокаЭтап = Неопределено Тогда
		Возврат ШаблонЭтапа;
	КонецЕсли;
	
	ИдентификаторЭтапа = СтрокаЭтап.ИдентификаторЭтапа;
	
	// Надем все служебные шаблоны комплексных процессов в шаблоне КП.
	СлужебныеШаблоны = Новый Массив;
	ШаблоныДляОбработки = Новый Массив;
	
	ШаблоныДляОбработки.Добавить(Шаблон);
	
	Запрос = Новый Запрос;
	
	Пока ШаблоныДляОбработки.Количество() > 0 Цикл
		
		СлужебныйШаблон = ШаблоныДляОбработки[0];
		СлужебныеШаблоны.Добавить(СлужебныйШаблон);
		
		ШаблоныДляОбработки.Удалить(0);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.ШаблонБизнесПроцесса
			|ИЗ
			|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ШаблоныКомплексныхБизнесПроцессовЭтапы
			|ГДЕ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.Ссылка = &Ссылка
			|	И ШаблоныКомплексныхБизнесПроцессовЭтапы.ШаблонБизнесПроцесса ССЫЛКА Справочник.ШаблоныКомплексныхБизнесПроцессов";
		Запрос.УстановитьПараметр("Ссылка", СлужебныйШаблон);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ШаблоныДляОбработки.Добавить(Выборка.ШаблонБизнесПроцесса);
		КонецЦикла;
		
	КонецЦикла;
	
	// Найдем исходный шаблон;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныКомплексныхБизнесПроцессовЭтапы.ШаблонБизнесПроцесса
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ШаблоныКомплексныхБизнесПроцессовЭтапы
		|ГДЕ
		|	ШаблоныКомплексныхБизнесПроцессовЭтапы.Ссылка В(&СлужебныеШаблоны)
		|	И ШаблоныКомплексныхБизнесПроцессовЭтапы.ИдентификаторЭтапа = &ИдентификаторЭтапа";
	Запрос.УстановитьПараметр("СлужебныеШаблоны", СлужебныеШаблоны);
	Запрос.УстановитьПараметр("ИдентификаторЭтапа", ИдентификаторЭтапа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ШаблонЭтапа = Выборка.ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Возврат ШаблонЭтапа;
	
КонецФункции

Процедура ПриКопированииШаблонаБизнесПроцесса(ОбъектКопирования) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектКопирования,
			"ШаблонВКомплексномПроцессе")
		И ОбъектКопирования.ШаблонВКомплексномПроцессе = Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОбъектКопирования.Ссылка);
	
	ИмяПроцесса = МенеджерШаблона.ИмяПроцесса(ОбъектКопирования.Ссылка);
	
	Если Не БизнесПроцессы[ИмяПроцесса].МожетЗапускатьсяИнтерактивно() Тогда
		ВызватьИсключение НСтр("ru = 'Шаблон не может быть скопирован, поскольку процессы данного типа не предполагают интерактивного запуска'");
	КонецЕсли;
	
КонецПроцедуры

// Определяет, является ли переданный параметр типом объекта шаблона процесса.
//
// Параметры:
//  ТипОбъекта - Тип - тип объекта.
//
// Возвращаемое значение:
//  Булево - возвращает истину, если параметр является типом объекта шаблона процесса.
//
Функция ЭтоТипОбъектаШаблонаПроцесса(ТипОбъекта) Экспорт
	
	ТипыОбъектовШаблоновПроцессов = ТипыОбъектовШаблоновПроцессов();
	
	Возврат ТипыОбъектовШаблоновПроцессов.Найти(ТипОбъекта) <> Неопределено;
	
КонецФункции

// Возвращает типы объектов шаблонов процессов.
//
// Возвращаемое значение:
//  Массив из Тип.
//
Функция ТипыОбъектовШаблоновПроцессов() Экспорт
	
	ТипыШаблоновПроцессов = Новый Массив;
	ТипыШаблоновПроцессов.Добавить(Тип("СправочникОбъект.ШаблоныИсполнения"));
	ТипыШаблоновПроцессов.Добавить(Тип("СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов"));
	ТипыШаблоновПроцессов.Добавить(Тип("СправочникОбъект.ШаблоныОзнакомления"));
	ТипыШаблоновПроцессов.Добавить(Тип("СправочникОбъект.ШаблоныПриглашения"));
	ТипыШаблоновПроцессов.Добавить(Тип("СправочникОбъект.ШаблоныРассмотрения"));
	ТипыШаблоновПроцессов.Добавить(Тип("СправочникОбъект.ШаблоныРегистрации"));
	ТипыШаблоновПроцессов.Добавить(Тип("СправочникОбъект.ШаблоныСогласования"));
	ТипыШаблоновПроцессов.Добавить(Тип("СправочникОбъект.ШаблоныПодписания"));
	ТипыШаблоновПроцессов.Добавить(Тип("СправочникОбъект.ШаблоныУтверждения"));
	
	Возврат ТипыШаблоновПроцессов;
	
КонецФункции

// Обновляет доступность шаблона процесса в РС ДоступностьШаблоновПроцессов.
// Учитывается взаимосвязь шаблонов процессов.
//
// Параметры:
//  ШаблонПроцесса - ОпределяемыйТип.ШаблонПроцесса,
//                   СправочникОбъект.ШаблоныУтверждения,
//                   СправочникОбъект.ШаблоныОзнакомления,
//                   СправочникОбъект.ШаблоныРассмотрения,
//                   СправочникОбъект.ШаблоныСогласования,
//                   СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//                   СправочникОбъект.ШаблоныПриглашения,
//                   СправочникОбъект.ШаблоныИсполнения,
//                   СправочникОбъект.ШаблоныПодписания,
//                   СправочникОбъект.ШаблоныРегистрации
//
Процедура ОбновитьДоступностьШаблонаПроцесса(ШаблонПроцесса) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ШаблонПроцесса)) Тогда
		ШаблонОбъект = ШаблонПроцесса.ПолучитьОбъект();
		Если ШаблонОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ШаблонОбъект = ШаблонПроцесса;
		Если Не ЗначениеЗаполнено(ШаблонПроцесса.Ссылка) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонПроцесса.КомплексныйПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ШаблонОбъект) = Тип("СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов") Тогда
		ДоступенРучнойЗапускПоШаблону = 
			ДоступностьРучногоЗапускаШаблонаКомплексногоПроцесса(ШаблонОбъект)
	Иначе
		ДоступенРучнойЗапускПоШаблону = Истина;
	КонецЕсли;
	
	СписокНезаполненныхПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	ДоступенАвтоматическийЗапускПоШаблону = СписокНезаполненныхПолей.Количество() = 0;
	
	ЗаписатьДоступностьШаблона(ШаблонОбъект.Ссылка,
		ДоступенАвтоматическийЗапускПоШаблону,
		ДоступенРучнойЗапускПоШаблону);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДоступностьШаблоновПроцессов

// Настраивает отображение области доступности шаблонов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка шаблона процесса.
//
Процедура НастроитьОбластьДоступностиШаблонов(форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.ВладелецШаблона) Тогда
		
		СтрокиЗаголовка = Новый Массив;
		СтрокиЗаголовка.Добавить(НСтр("ru = 'Требуется проверка действия ('"));
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'проверить'"),,,,"Проверить"));
		СтрокиЗаголовка.Добавить(НСтр("ru = ').'"));
		
		Форма.Элементы.ДекорацияНедоступенДляЗапуска.Заголовок =
			Новый ФорматированнаяСтрока(СтрокиЗаголовка);
		
		СтрокиЗаголовка = Новый Массив;
		СтрокиЗаголовка.Добавить(НСтр("ru = 'В действии не заполнены '"));
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'поля для автоматического запуска'"),,,,"ОбязательныеПоля"));
		СтрокиЗаголовка.Добавить(НСтр("ru = '.'"));
		
		Форма.Элементы.ДекорацияРучнойЗапуск.Заголовок = 
			Новый ФорматированнаяСтрока(СтрокиЗаголовка);
		
		Форма.Элементы.ДекорацияРучнойИАвтоматическийЗапуск.Заголовок = 
			НСтр("ru = 'Действие настроено корректно.'");
		
	КонецЕсли;
	
	// Настроим отображение группы доступности шаблона.
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеГруппыДоступности(Форма);
	
КонецПроцедуры

// Возвращает доступность шаблона процесса.
//
// Парамтеры:
//  Шаблон - ОпределяемыйТип.ШаблонПроцесса - сслка на шаблон процесса.
//
// Возвращаемое значение:
//  Структура
//   * АвтоматическийЗапуск - Булево - признак доступности автоматического запуска процессов по шаблону.
//   * РучнойЗапуск - Булево -  признак доступности ручного запуска процессов по шаблону.
//
Функция ДоступностьШаблона(Шаблон) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("АвтоматическийЗапуск", Ложь);
	Результат.Вставить("РучнойЗапуск", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоступностьШаблоновПроцессов.АвтоматическийЗапуск,
		|	ДоступностьШаблоновПроцессов.РучнойЗапуск
		|ИЗ
		|	РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
		|ГДЕ
		|	ДоступностьШаблоновПроцессов.Шаблон = &Шаблон";
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает доступность шаблона процесса, обновляя при этом доступность зависимых шаблонов.
//
// Параметры:
//  Шаблон - ОпределяемыйТип.ШаблонПроцесса - сслка на шаблон процесса.
//  АвтоматическийЗапуск - Булево - признак доступности автоматического запуска процессов по шаблону.
//  РучнойЗапуск - Булево - признак доступности ручного запуска процессов по шаблону.
//
Процедура ЗаписатьДоступностьШаблона(Шаблон, АвтоматическийЗапуск, РучнойЗапуск) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ДоступностьШаблоновПроцессов.СоздатьМенеджерЗаписи();
	Запись.Шаблон = Шаблон;
	Запись.АвтоматическийЗапуск = АвтоматическийЗапуск;
	Запись.РучнойЗапуск = РучнойЗапуск;
	
	Запись.Записать();
	
	ОбновитьДоступностьЗависимыхШаблонов(Шаблон);
	
КонецПроцедуры

// Помещает доступность шаблона процесса в карточку.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка шаблона процесса.
//
Процедура ПрочитатьДоступностьШаблона(Форма) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСКомплекснымиБизнесПроцессамиСервер.ЭтоДействиеКомплексногоПроцесса(Форма.Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьШаблона = ДоступностьШаблона(Форма.Объект.Ссылка);
	
	Форма.ДоступенРучнойЗапускПоШаблону = ДоступностьШаблона.РучнойЗапуск;
	Форма.ДоступенАвтоматическийЗапускПоШаблону = ДоступностьШаблона.АвтоматическийЗапуск;
	
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеДоступностиШаблона(Форма);
	
КонецПроцедуры

// Записывает доступность шаблона процесса из карточки.
//
// Параметры:
//  ШаблонОбъект - СправочникОбъект.<ИмяШаблонаПроцесса> - объект шаблона процесса.
//  Форма - ФормаКлиентскогоПриложения - карточка шаблона процесса.
//
Процедура ЗаписатьДоступностьШаблонаИзФормы(ШаблонОбъект, Форма) Экспорт
	
	Если Не ЗначениеЗаполнено(ШаблонОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСКомплекснымиБизнесПроцессамиСервер.ЭтоДействиеКомплексногоПроцесса(ШаблонОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ДоступенРучнойЗапускПоШаблону = Истина;
	
	СписокНезаполненныхПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	Форма.ДоступенАвтоматическийЗапускПоШаблону = СписокНезаполненныхПолей.Количество() = 0;
	
	ЗаписатьДоступностьШаблона(
		ШаблонОбъект.Ссылка,
		Форма.ДоступенАвтоматическийЗапускПоШаблону,
		Форма.ДоступенРучнойЗапускПоШаблону);
		
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеДоступностиШаблона(Форма);
	
КонецПроцедуры

// Возвращает доступность ручного запуска шаблона комплексного процесса.
//
// Параметры:
//  Шаблон - СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов.
//
// Возвращаемое значение:
//  Булево
//
Функция ДоступностьРучногоЗапускаШаблонаКомплексногоПроцесса(Шаблон) Экспорт
	
	Если ЗначениеЗаполнено(Шаблон.Схема) Тогда
		
		Если Не ОбщегоНазначения.СсылкаСуществует(Шаблон.Схема) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(Шаблон.Схема);
		
		РезультатПроверкиСхемы = СхемыПроцессовСервер.СхемаКорректна(ДанныеСхемы.Схема);
		
		Возврат РезультатПроверкиСхемы.НетОшибок;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Определяем доступность автоматического запуска шаблона комплексного процесса
// по доступности шаблонов подчиненных действий.
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов - шаблон комплексного процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ДоступностьАвтоматическогоЗапускаШаблонаКомплексногоПроцесса(Шаблон) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АвтоматическийЗапуск = Ложь;
	
	СхемаШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "Схема");
	Если ЗначениеЗаполнено(СхемаШаблона) Тогда
		
		Если Не ОбщегоНазначения.СсылкаСуществует(СхемаШаблона) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Алгоритм определения доступности соответствует
		// алгоритму проверки заполнения настроек схемы.
		
		ПараметрыСхемы = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(СхемаШаблона);
		
		Если Не ОбщегоНазначения.СсылкаСуществует(ПараметрыСхемы) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДанныеПараметровСхемы =
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
				ПараметрыСхемы);
		
		НастройкиДействийСхемы = 
			РаботаСКомплекснымиБизнесПроцессамиСервер.НастройкиДействийИВложенныхПроцессовВДанныхПараметров(
				ДанныеПараметровСхемы);
		
		// Определим возможность автоматического запуска подчинненных шаблонов.
		Запрос = Новый Запрос;
			
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(ДоступностьШаблоновПроцессов.АвтоматическийЗапуск) КАК АвтоматическийЗапуск
			|ИЗ
			|	РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
			|ГДЕ
			|	ДоступностьШаблоновПроцессов.Шаблон В (&НастройкиДействийСхемы)";
			
		Запрос.УстановитьПараметр("НастройкиДействийСхемы", НастройкиДействийСхемы);
		Выборка = Запрос.Выполнить().Выбрать();
		АвтоматическийЗапускПоНастройкамПодчиненныхШаблонов = Ложь;
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.АвтоматическийЗапуск) Тогда
			АвтоматическийЗапускПоНастройкамПодчиненныхШаблонов = Выборка.АвтоматическийЗапуск;
		КонецЕсли;
		
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(СхемаШаблона);
		
		ДанныеПараметровСхемы = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(ПараметрыСхемы);
			
		ОшибкиНастроекСхемы = 
			РаботаСКомплекснымиБизнесПроцессамиСервер.ОшибкиЗаполненияНастроекЭлементовСхемы(
				ДанныеПараметровСхемы.НастройкиЭлементов,
				СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы),
				СхемыПроцессовКлиентСервер.ГрафическаяСхемаПоДаннымСхемы(ДанныеСхемы));
	
		// Вычислим возможность Автоматического запуска процессов по схеме.
		АвтоматическийЗапуск = АвтоматическийЗапускПоНастройкамПодчиненныхШаблонов
			И (ОшибкиНастроекСхемы.Количество() = 0);
		
	Иначе
		
		// Для комплексных процессов без схемы доступность автоматического запуска определяется
		// доступностью его подчиненных действий.
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.ШаблонБизнесПроцесса КАК Шаблон
			|ПОМЕСТИТЬ ШаблоныПодчиненныДействий
			|ИЗ
			|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ШаблоныКомплексныхБизнесПроцессовЭтапы
			|ГДЕ
			|	ШаблоныКомплексныхБизнесПроцессовЭтапы.Ссылка = &Шаблон
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ДоступностьШаблоновПроцессов.АвтоматическийЗапуск) КАК АвтоматическийЗапуск
			|ИЗ
			|	РегистрСведений.ДоступностьШаблоновПроцессов КАК ДоступностьШаблоновПроцессов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныПодчиненныДействий КАК ШаблоныПодчиненныДействий
			|		ПО ДоступностьШаблоновПроцессов.Шаблон = ШаблоныПодчиненныДействий.Шаблон";
		
		Запрос.УстановитьПараметр("Шаблон", Шаблон);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.АвтоматическийЗапуск) Тогда
			АвтоматическийЗапуск = Выборка.АвтоматическийЗапуск;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат АвтоматическийЗапуск;
	
КонецФункции

// Проверяет доступность шаблона и помещает результат в реквизиты
// ДоступенРучнойЗапускПоШаблону, ДоступенАвтоматическийЗапускПоШаблону карточки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка шаблона.
//
Процедура ПроверитьДоступностьШаблона(Форма) Экспорт
	
	Форма.ДоступенРучнойЗапускПоШаблону = Истина;
	
	ШаблонОбъект = ДанныеФормыВЗначение(
		Форма.Объект, Тип("СправочникОбъект." + Форма.Объект.Ссылка.Метаданные().Имя));
	
	СписокНезаполненныхПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	Форма.ДоступенАвтоматическийЗапускПоШаблону = СписокНезаполненныхПолей.Количество() = 0;
	
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеДоступностиШаблона(Форма);
	
КонецПроцедуры

// Выводить сообщения пользователю в карточке шаблона с привязкой к незаполненным полям
// необходимым для старта процессов по шаблону.
//
// Параметры:
//  Форма - УправляемяФорма - карточка шаблона.
//
Процедура ПоказатьНезаполненныеПоляНеобходимыеДляСтарта(Форма) Экспорт
	
	ШаблонОбъект = ДанныеФормыВЗначение(
		Форма.Объект, Тип("СправочникОбъект." + Форма.Объект.Ссылка.Метаданные().Имя));
	
	СписокНезаполненныхПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	
	ШаблонСообщения = НСтр("ru = 'Не заполнено обязательное поле ""%1"".'");
	
	Для Каждого НезаполненноеПоле Из СписокНезаполненныхПолей Цикл
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ШаблонСообщения, НезаполненноеПоле),,
			"Объект." + НезаполненноеПоле);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет доступность шаблонов процессов по умолчанию.
//
Процедура ОбновитьДоступностьШаблоновПоУмолчанию() Экспорт
	
	ШаблоныПроцессовПоУмолчанию = ШаблоныБизнесПроцессовКлиентСервер.ШаблоныПроцессовПоУмолчанию();
	
	Для Каждого ШаблонПоУмолчанию Из ШаблоныПроцессовПоУмолчанию Цикл
		
		РучнойЗапуск = Истина;
		
		ОбъектШаблона = ШаблонПоУмолчанию.ПолучитьОбъект();
		СписокНезаполненныхПолей = ОбъектШаблона.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		АвтоматическийЗапуск = СписокНезаполненныхПолей.Количество() = 0;
		
		ЗаписатьДоступностьШаблона(ШаблонПоУмолчанию, АвтоматическийЗапуск, РучнойЗапуск);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоПодстановкиДляПроцессов

// Возвращает значение автоподстановки для процесса
//
// Параметры:
//	Автоподстановка - СправочникСсылка.АвтоподстановкиДляПроцессов - автоподстановка.
//	Объект - БизнесПроцессОбъект.<Тип бизнес-процесса> - процесс объект,
//           для которого вычисляется автоподстановка.
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи,
//   Массив
//     * СправочникСсылка.Пользователи.
//
Функция ПолучитьЗначениеАвтоподстановки(Автоподстановка, Объект, ЭтоПроверкаАвтоподстановки = Ложь) Экспорт
	
	УстановитьБезопасныйРежим(Истина);
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Для Каждого ИмяРазделителя Из РаботаВМоделиСервиса.РазделителиКонфигурации() Цикл
			УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		КонецЦикла;
	КонецЕсли;
	
 	ВыражениеАвтоподстановки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Автоподстановка, "Выражение");
	Если Не ЗначениеЗаполнено(ВыражениеАвтоподстановки) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнено выражение автоподстановки ""%1""'"), Автоподстановка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Результат = Неопределено;
	Попытка
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		// Выполнение выражения.
		Выполнить(ВыражениеАвтоподстановки);
		// Замер времени.
		УстановитьБезопасныйРежим(Ложь);
		КлючеваяОперация = "Автоподстановка_" + ПолучитьНавигационнуюСсылку(Автоподстановка);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении автоподстановки %1:
			|%2'"), Автоподстановка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если (ТипЗнч(Результат) = Тип("СправочникСсылка.Сотрудники")
		Или ТипЗнч(Результат) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(Результат) = Тип("СправочникСсылка.ПолныеРоли"))
			И ЗначениеЗаполнено(Результат)
		Или ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		Возврат Результат;
	Иначе
		Если ЭтоПроверкаАвтоподстановки Тогда
			// Нужно показать полученный результат, а не выбрасывать исключение.
			Возврат Результат;
		Иначе
			// Автоподстановки для процессов не могут вернуть пустой результат, выбрасываем исключение.
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найдены исполнители для автоподстановки ""%1"".
						|Обратитесь к администратору.'"),
				Автоподстановка);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции	

#КонецОбласти

#Область УстановкаПравНаШаблоны

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектДоступа.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПротокола = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектДоступа.КомплексныйПроцесс) Тогда
		
		// Заполнение не требуется
		СтрокиПротокола.Добавить("Права процесса");
		
	ИначеЕсли ЗначениеЗаполнено(ОбъектДоступа.ВладелецШаблона) Тогда
		
		// Дескрипторы копируются от шаблона комплексного процесса.
		ДокументооборотПраваДоступа.ЗаполнитьДескрипторыОбъектаОтВладельца(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.ВладелецШаблона);
		
		СтрокиПротокола.Добавить("Права шаблона-владельца");
		
	Иначе
		
		РабочаяГруппа = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(ОбъектДоступа.Ссылка);
		Если РабочаяГруппа.Количество() > 0 Тогда
			
			// Рабочая группа
			ДокументооборотПраваДоступа.ЗаполнитьДескрипторыОбъектаПоРабочейГруппе(
				ОбъектДоступа, ТаблицаДескрипторов);
			
		Иначе
			
			// Все пользователи
			ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
				ОбъектДоступа, ТаблицаДескрипторов, Справочники.РабочиеГруппы.ВсеПользователи, Ложь);
			
			СтрокиПротокола.Добавить("Все пользователи");
			
		КонецЕсли;
		
		// Ответственный
		Если ЗначениеЗаполнено(ОбъектДоступа.Ответственный) Тогда
			
			ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
				ОбъектДоступа, ТаблицаДескрипторов,
				Сотрудники.ЛюбойПользовательСотрудника(ОбъектДоступа.Ответственный),
				Истина);
			
			СтрокиПротокола.Добавить("Ответственный");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		
		Для Каждого СтрПротокола Из СтрокиПротокола Цикл
			
			Если СтрПротокола = "Права процесса" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.КомплексныйПроцесс, НСтр("ru = 'Права процесса'"));
			ИначеЕсли СтрПротокола = "Права шаблона-владельца" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.ВладелецШаблона, НСтр("ru = 'Права шаблона-владельца'"));
			ИначеЕсли СтрПротокола = "Все пользователи" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					Справочники.РабочиеГруппы.ВсеПользователи, НСтр("ru = 'Все пользователи'"));
			ИначеЕсли СтрПротокола = "Ответственный" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Ответственный, НСтр("ru = 'Ответственный'"));
			КонецЕсли;
			
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДоступностьШаблоновПроцессов

// Обновляет доступность зависимых шаблонов.
//
// Процедура может быть переопределена в
// ШаблоныБизнесПроцессовПереопределяемый.ПриОбновленииДоступностиЗависимыхШаблонов.
//
// Параметры:
//  Шаблон - ОпределяемыйТип.ШаблонПроцесса - шаблон процесса.
//
Процедура ОбновитьДоступностьЗависимыхШаблонов(Шаблон)
	
	СтандартнаяОбработка = Истина;
	ШаблоныБизнесПроцессовПереопределяемый.ПриОбновленииДоступностиЗависимыхШаблонов(
		Шаблон, СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим владельцев по иерархии комплексных процессов.
	НетВышестоящегоВладельца = Ложь;
	ВышестоящиеВладельцы = Новый Массив;
	ВладелецШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "ВладелецШаблона");
	Пока ЗначениеЗаполнено(ВладелецШаблона) Цикл
		
		ВышестоящиеВладельцы.Добавить(ВладелецШаблона);
		
		РеквизитыВладельцаШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВладелецШаблона, "Ссылка, ВладелецШаблона");
		
		Если Не ЗначениеЗаполнено(РеквизитыВладельцаШаблона.Ссылка) Тогда
			НетВышестоящегоВладельца = Истина;
			Прервать;
		КонецЕсли;
		
		ВладелецШаблона = РеквизитыВладельцаШаблона.ВладелецШаблона;
	КонецЦикла;
	
	Если НетВышестоящегоВладельца Тогда
		Возврат;
	КонецЕсли;
	
	Если ВышестоящиеВладельцы.Количество() > 0 Тогда
		
		Для Каждого ВладелецШаблонов Из ВышестоящиеВладельцы Цикл
			
			Запись = РегистрыСведений.ДоступностьШаблоновПроцессов.СоздатьМенеджерЗаписи();
			Запись.Шаблон = ВладелецШаблонов;
			Запись.Прочитать();
			
			Если Не Запись.Выбран() Тогда
				Продолжить;
			КонецЕсли;
			
			Если Запись.РучнойЗапуск Тогда
				Запись.АвтоматическийЗапуск = 
					ДоступностьАвтоматическогоЗапускаШаблонаКомплексногоПроцесса(ВладелецШаблонов);
			Иначе
				Запись.АвтоматическийЗапуск = Ложь;
			КонецЕсли;
			
			Запись.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ДоступностьПоШаблону(Объект) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БизнесПроцесс = Объект.Ссылка;
	Шаблон = Объект.Шаблон;
	Предметы = Объект.Предметы;
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") 
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Ознакомление")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Рассмотрение")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Подписание")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") 
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		Если ЗначениеЗаполнено(БизнесПроцесс) И ЗначениеЗаполнено(БизнесПроцесс.ВедущаяЗадача) Тогда 
			ВедущаяЗадачаОбъект = Объект.ВедущаяЗадача.ПолучитьОбъект();
			Если ВедущаяЗадачаОбъект <> Неопределено Тогда
				БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВедущаяЗадача, "БизнесПроцесс");
				РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс, "Шаблон, Предметы");
				Шаблон = РеквизитыПроцесса.Шаблон;
				Предметы = РеквизитыПроцесса.Предметы.Выгрузить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеПредметов = Новый ТаблицаЗначений;
	
	ТипыКолонки = Новый Массив;
	ТипыКолонки.Добавить(Тип("СправочникСсылка.ВидыДокументов"));
	ТипыКолонки.Добавить(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ДанныеПредметов.Колонки.Добавить("КомуНазначен", Новый ОписаниеТипов(ТипыКолонки));
	
	ТипыКолонки.Очистить();
	ТипыКолонки.Добавить(Тип("СправочникСсылка.Организации"));
	ДанныеПредметов.Колонки.Добавить("Организация", Новый ОписаниеТипов(ТипыКолонки)); // организация объекта.
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(СтрокаПредмета.Предмет) Тогда
			
			РеквизитыДокумента = 
				ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				СтрокаПредмета.Предмет, "ВидДокумента, Организация");
				
			ВидыДокументов = Делопроизводство.ПолучитьВидДокументаИРодителей(РеквизитыДокумента.ВидДокумента);
			Для Каждого ВидДокумента Из ВидыДокументов Цикл
				СтрокаДанных = ДанныеПредметов.Добавить();
				СтрокаДанных.КомуНазначен = ВидДокумента;
				СтрокаДанных.Организация = РеквизитыДокумента.Организация;
			КонецЦикла;
		Иначе
			СтрокаДанных = ДанныеПредметов.Добавить();
			СтрокаДанных.КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СтрокаПредмета.Предмет));
			СтрокаДанных.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеПредметов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеПредметов.Организация КАК Организация,
		|	ДанныеПредметов.КомуНазначен КАК КомуНазначен
		|ПОМЕСТИТЬ ДанныеПредметов
		|ИЗ
		|	&ДанныеПредметов КАК ДанныеПредметов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Истина КАК ПоОрганизации,
		|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение КАК ЗапрещеноИзменение
		|ИЗ
		|	ДанныеПредметов КАК ДанныеПредметов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|		ПО ДанныеПредметов.КомуНазначен = НастройкаШаблоновБизнесПроцессов.КомуНазначен
		|			И ДанныеПредметов.Организация = НастройкаШаблоновБизнесПроцессов.Организация
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &Шаблон
		|	И НастройкаШаблоновБизнесПроцессов.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ложь,
		|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение
		|ИЗ
		|	ДанныеПредметов КАК ДанныеПредметов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|		ПО ДанныеПредметов.КомуНазначен = НастройкаШаблоновБизнесПроцессов.КомуНазначен
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &Шаблон
		|	И НастройкаШаблоновБизнесПроцессов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ДанныеПредметов", ДанныеПредметов);
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ЕстьШаблоныПоОгранизации = Ложь;
	ЗапрещеноИзменениеПоШаблонамОрганизации = Ложь;
	ЗапрещеноИзменениеПоОбщШаблонам = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям")
			И Выборка.ПоОрганизации Тогда
			
			ЕстьШаблоныПоОгранизации = Истина;
			Если Выборка.ЗапрещеноИзменение Тогда
				ЗапрещеноИзменениеПоШаблонамОрганизации = Истина;
			КонецЕсли;
		Иначе
			Если Выборка.ЗапрещеноИзменение Тогда
				ЗапрещеноИзменениеПоОбщШаблонам = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьШаблоныПоОгранизации Тогда
		Возврат Не ЗапрещеноИзменениеПоШаблонамОрганизации;
	Иначе
		Возврат Не ЗапрещеноИзменениеПоОбщШаблонам;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПоШаблонуСоставногоБизнесПроцесса(Шаблон, БизнесПроцесс) Экспорт
	
		// Не заполняем шаблон в процессе, если это шаблон по умолчанию.
		// Считаем, что процесс создан с нуля.
	Если Шаблон.ШаблонВКомплексномПроцессе И ЗначениеЗаполнено(Шаблон.ИсходныйШаблон) Тогда
		БизнесПроцесс.Шаблон = Шаблон.ИсходныйШаблон;
	ИначеЕсли НЕ Шаблон.ШаблонВКомплексномПроцессе Тогда
		БизнесПроцесс.Шаблон = Шаблон;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шаблон.НаименованиеБизнесПроцесса) Тогда 
		БизнесПроцесс.Наименование = Шаблон.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(БизнесПроцесс.Наименование), БизнесПроцесс.Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И Шаблон.ДобавлятьНаименованиеПредмета Тогда
			БизнесПроцесс.Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шаблон.Автор) Тогда 
		БизнесПроцесс.Автор = Шаблон.Автор;
	КонецЕсли;
	
	БизнесПроцесс.СрокИсполненияПроцесса = Шаблон.СрокИсполненияПроцесса;
	
	МДРеквизиты = БизнесПроцесс.Метаданные().Реквизиты;
	Для Каждого Строка Из Шаблон.Шаблоны Цикл
		МДРеквизит = МДРеквизиты.Найти(Строка.Реквизит);
		Если МДРеквизит <> Неопределено Тогда 
			БизнесПроцесс[МДРеквизит.Имя] = Строка.Шаблон;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Шаблон, БизнесПроцесс);
	
КонецПроцедуры

// Возвращает имя процесса, которое будет установлено в случае, если в шаблоне оно не указано
Функция НаименованиеПроцессаПоУмолчанию(ИмяСправочника, Шаблон = Неопределено) Экспорт
	
	ИмяПроцесса = "";
	
	Если ИмяСправочника = "ШаблоныИсполнения" Тогда
		ИмяПроцесса = НСтр("ru = 'Исполнить '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныКомплексныхБизнесПроцессов" Тогда
		ИмяПроцесса = НСтр("ru = 'Обработка '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныОзнакомления" Тогда
		ИмяПроцесса = НСтр("ru = 'Ознакомиться '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныПриглашения" Тогда
		ИмяПроцесса = НСтр("ru = 'Принять участие '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныРассмотрения" Тогда
		ИмяПроцесса = НСтр("ru = 'Рассмотреть '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныРегистрации" Тогда
		ИмяПроцесса = НСтр("ru = 'Зарегистрировать '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныСогласования" Тогда
		ИмяПроцесса = НСтр("ru = 'Согласовать '");
	
	ИначеЕсли ИмяСправочника = "ШаблоныПодписания" Тогда
		ИмяПроцесса = НСтр("ru = 'Подписать '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныУтверждения" Тогда
		ИмяПроцесса =  НСтр("ru = 'Утвердить'");

	КонецЕсли;
	
	Возврат ИмяПроцесса;
	
КонецФункции

// Выполняет начальное заполнение
Процедура НачальноеЗаполнениеШаблона(Шаблон, ДанныеЗаполнения) Экспорт
	
	МетаданныеШаблона = Шаблон.Метаданные();
	РеквизитыШаблона = МетаданныеШаблона.Реквизиты;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ТипШаблона") Тогда
		Шаблон.ТипШаблона = ДанныеЗаполнения.ТипШаблона;
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("НаименованиеБизнесПроцесса") <> Неопределено Тогда
		Шаблон.НаименованиеБизнесПроцесса = НаименованиеПроцессаПоУмолчанию(МетаданныеШаблона.Имя, Шаблон);
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("ДобавлятьНаименованиеПредмета") <> Неопределено Тогда
		Шаблон.ДобавлятьНаименованиеПредмета = Истина;
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("Важность") <> Неопределено Тогда
		Шаблон.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
	КонецЕсли;
	
	Шаблон.Ответственный = СотрудникиВызовСервера.ОсновнойСотрудникПользователя(ПользователиКлиентСервер.ТекущийПользователь());
	
КонецПроцедуры

Функция ПолучитьПустуюСсылкуПроцессаПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	ИмяТипаПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ШаблонБизнесПроцесса).ИмяПроцесса(ШаблонБизнесПроцесса);
	Возврат БизнесПроцессы[ИмяТипаПроцесса].ПустаяСсылка();
		
КонецФункции

// Получает заголовочную часть сводки по шаблону
Функция ПолучитьОбщуюЧастьОписанияШаблона(Ссылка) Экспорт
	
	Результат = "";
	
	Результат = Результат 
		+ НСтр("ru = 'Шаблон процесса: '") 
		+ Метаданные.БизнесПроцессы[ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка).ИмяПроцесса(Ссылка)].Синоним
		+ Символы.ПС;
	
	Если ЗначениеЗаполнено(Ссылка.Наименование) Тогда
		Результат = Результат + НСтр("ru = 'Наименование шаблона: '") + Ссылка.Наименование + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.Комментарий) Тогда
		Результат = Результат + НСтр("ru = 'Комментарий: '") + Ссылка.Комментарий + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат = Результат + Символы.ПС;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти