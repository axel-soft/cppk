////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с мероприятиями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует строковое представление периода мероприятия.
//
// Параметры:
//  ДатаНачала    - Дата - Дата начала мероприятия.
//  ДатаОкончания - Дата - Дата окончания мероприятия.
// 
// Возвращаемое значение:
//  Строка - Строковое представление периода мероприятия.
//
Функция ПериодСтрокой(ДатаНачала, ДатаОкончания, ПредставлениеЧасовогоПояса) Экспорт
	
	ПериодСтрокой = "";
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат ПериодСтрокой;
	КонецЕсли;
	
	Если НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания) Тогда 
		ПериодСтрокой = СтрШаблон(
			"%1 %2 - %3",
			Формат(ДатаНачала, "ДФ='dd MMM yyyy'"),
			Формат(ДатаНачала, "ДФ=ЧЧ:мм"),
			Формат(ДатаОкончания, "ДФ=ЧЧ:мм"));
	Иначе
		ПериодСтрокой = СтрШаблон(
			"%1 - %2",
			Формат(ДатаНачала, "ДФ='dd.MM.yy ЧЧ:мм'"),
			Формат(ДатаОкончания, "ДФ='dd.MM.yy ЧЧ:мм'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеЧасовогоПояса) Тогда
		ПериодСтрокой = ПериодСтрокой + " " + ПредставлениеЧасовогоПояса;
	КонецЕсли;
	
	Возврат ПериодСтрокой;
	
КонецФункции

// Формирует строковое представление периода мероприятия, приведенного к местному времени.
//
// Параметры:
//  ДатаНачала    - Дата - Дата начала мероприятия.
//  ДатаОкончания - Дата - Дата окончания мероприятия.
// 
// Возвращаемое значение:
//  Строка - Строковое представление периода мероприятия, приведенного к местному времени.
//
Функция МестныйПериодСтрокой(ДатаНачала, ДатаОкончания) Экспорт
	
	Возврат ПериодСтрокой(
		РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ДатаНачала),
		РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ДатаОкончания),
		РаботаСЧасовымиПоясами.ПредставлениеМестногоЧасовогоПояса());
	
КонецФункции

// Получает актуальные состояния мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояния которого будут получены.
//
// Возвращаемое значение:
//  Массив - Массив состояний мероприятия.
//
Функция ПолучитьВсеСостоянияМероприятия(Мероприятие) Экспорт
	
	МассивСостояний = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат МассивСостояний;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияМероприятий.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
	|ГДЕ
	|	СостоянияМероприятий.Мероприятие = &Мероприятие";
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат МассивСостояний;
	КонецЕсли;	
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Состояние");
	
КонецФункции

// Получает актуальное состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет получено.
//  Тип - Строка - Тип состояния мероприятия, которое необходимо получить.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияМероприятий - Состояние мероприятия указанного типа.
//
Функция ПолучитьСостояниеМероприятия(Мероприятие, Тип) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат Перечисления.СостоянияМероприятий.ПустаяСсылка();
	КонецЕсли;	
	
	СоответствиеСостояний = УправлениеМероприятиямиКлиентСервер.ПолучитьСоответствиеСостояний();
	МассивСостояний = ПолучитьВсеСостоянияМероприятия(Мероприятие);
	
	Для Каждого Состояние Из МассивСостояний Цикл
		Если СоответствиеСостояний.Получить(Состояние) = Тип Тогда 
			Возврат Состояние;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Перечисления.СостоянияМероприятий.ПустаяСсылка();
	
КонецФункции

// Получает актуальное состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет получено.
//  Тип - Строка - Тип состояния мероприятия, которое необходимо получить.
//
// Возвращаемое значение:
//  Структура - Состояние мероприятия указанного типа.
//   * Состояние - ПеречислениеСсылка.СостоянияМероприятий - Значение состояния мероприятия.
//   * ДатаУстановки - Дата - Дата установки состояния мероприятия.
//   * Установил - БизнесПроцессСсылка, СправочникСсылка.Пользователи,
//     СправочникСсылка.Сотрудники - Кем было установлено состояние.
//
Функция ПолучитьСтруктуруСостоянияМероприятия(Мероприятие, Тип) Экспорт
	
	СтруктураСостояния = Новый Структура;
	СтруктураСостояния.Вставить("Состояние", Перечисления.СостоянияМероприятий.ПустаяСсылка());
	СтруктураСостояния.Вставить("ДатаУстановки", '00010101');
	СтруктураСостояния.Вставить("Установил", Неопределено);
	СтруктураСостояния.Вставить("Тип", Тип);
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат СтруктураСостояния;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеСостояний = УправлениеМероприятиямиКлиентСервер.ПолучитьСоответствиеСостояний();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияМероприятий.Состояние КАК Состояние,
	|	СостоянияМероприятий.Установил КАК Установил,
	|	МАКСИМУМ(ИсторияСостоянийМероприятий.Период) КАК ДатаУстановки
	|ИЗ
	|	РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСостоянийМероприятий КАК ИсторияСостоянийМероприятий
	|		ПО СостоянияМероприятий.Мероприятие = ИсторияСостоянийМероприятий.Мероприятие
	|			И СостоянияМероприятий.Состояние = ИсторияСостоянийМероприятий.Состояние
	|			И СостоянияМероприятий.Установил = ИсторияСостоянийМероприятий.Установил
	|ГДЕ
	|	СостоянияМероприятий.Мероприятие = &Мероприятие
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияМероприятий.Состояние,
	|	СостоянияМероприятий.Установил";
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТаблицаСостояний Цикл
		Если СоответствиеСостояний.Получить(Строка.Состояние) = Тип Тогда 
			ЗаполнитьЗначенияСвойств(СтруктураСостояния, Строка);
			Возврат СтруктураСостояния;
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураСостояния;
	
КонецФункции

// Устанавливает состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия                       - Мероприятие, состояние которого будет установлено.
//  Период      - Дата                                               - Момент времени установки состояния.
//  Состояние   - ПеречислениеСсылка.СостоянияМероприятий            - Состояние, которое будет установлено.
//  Установил   - БизнесПроцессСсылка, СправочникСсылка.Пользователи - Объект, который устанавливает состояние.
// 
// Возвращаемое значение:
//  Структура - Общий результат броней:
//   * РезультатыБроней                - Массив Из Структура            - Результаты каждой брони:
//      ** Бронь                - ДокументСсылка.Бронь - Бронь.
//      ** ОжидаетПодтверждения - Булево               - Бронь ожидает подтверждения.
//   * ОтмененныеБрони                 - Массив из ДокументСсылка.Бронь - Брони, для которых была выполнена отмена.
//   * ДлительнаяОперацияПодтверждения - Структура                      - Длительная операция оперативного подтверждения брони.
//                                       Неопределено                   - Длительная операция не запущена.
//
Функция ЗаписатьСостояниеМероприятия(Мероприятие, Период, Состояние, Установил) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеСостояний = УправлениеМероприятиямиКлиентСервер.ПолучитьСоответствиеСостояний();
	ТекущееСостояние = ПолучитьСостояниеМероприятия(Мероприятие, СоответствиеСостояний.Получить(Состояние));
	
	Если ТекущееСостояние = Состояние Тогда
		РезультатБронирования = БронированиеПомещенийКлиентСервер.РезультатБронирования();
		Возврат РезультатБронирования;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// состояние
		Если ЗначениеЗаполнено(ТекущееСостояние) И ТекущееСостояние <> Состояние Тогда
			НаборЗаписей = РегистрыСведений.СостоянияМероприятий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
			НаборЗаписей.Отбор.Состояние.Установить(ТекущееСостояние);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.СостоянияМероприятий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
		НаборЗаписей.Отбор.Состояние.Установить(Состояние);
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("РезультатБронирования",
			БронированиеПомещенийКлиентСервер.РезультатБронирования());
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Мероприятие = Мероприятие;
		НоваяЗапись.Состояние = Состояние;
		НоваяЗапись.Установил = Установил;
		
		НаборЗаписей.Записать();
		
		// история
		МенеджерЗаписи = РегистрыСведений.ИсторияСостоянийМероприятий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Период;
		МенеджерЗаписи.Мероприятие = Мероприятие;
		МенеджерЗаписи.Состояние = Состояние;
		МенеджерЗаписи.Установил = Установил;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей.ДополнительныеСвойства.РезультатБронирования;
	
КонецФункции

// Очищает состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет очищено.
//  НачальноеСостояние - ПеречислениеСсылка.СостоянияМероприятий - Состояние, которое будет очищено.
// 
// Возвращаемое значение:
//  Структура - Общий результат броней:
//   * РезультатыБроней                - Массив Из Структура            - Результаты каждой брони:
//      ** Бронь                - ДокументСсылка.Бронь - Бронь.
//      ** ОжидаетПодтверждения - Булево               - Бронь ожидает подтверждения.
//   * ОтмененныеБрони                 - Массив из ДокументСсылка.Бронь - Брони, для которых была выполнена отмена.
//   * ДлительнаяОперацияПодтверждения - Структура                      - Длительная операция оперативного подтверждения брони.
//                                       Неопределено                   - Длительная операция не запущена.
//
Функция ОчиститьСостояниеМероприятия(Мероприятие, НачальноеСостояние) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияМероприятий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
	НаборЗаписей.Отбор.Состояние.Установить(НачальноеСостояние);
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("РезультатБронирования",
		БронированиеПомещенийКлиентСервер.РезультатБронирования());
		
	НаборЗаписей.Записать();
	
	Возврат НаборЗаписей.ДополнительныеСвойства.РезультатБронирования;
	
КонецФункции

// Очищает состояние мероприятия по установившему.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет установлено.
//  Установил - БизнесПроцессСсылка, СправочникСсылка.Пользователи, СправочникСсылка.ДействияИсполнения - Объект, который устанавливает состояние.
//
Процедура ОчиститьСостояниеМероприятияПоУстановившему(Мероприятие, Установил) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияМероприятий");
		ЭлементБлокировки.УстановитьЗначение("Мероприятие", Мероприятие);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СостоянияМероприятий.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
			|ГДЕ
			|	СостоянияМероприятий.Мероприятие = &Мероприятие
			|	И СостоянияМероприятий.Установил = &Установил";
		Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
		Запрос.УстановитьПараметр("Установил", Установил);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СостоянияМероприятий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
			НаборЗаписей.Отбор.Состояние.Установить(Выборка.Состояние);
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает ключ актуального состояния документа.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, для которого будет получен ключ состояния.
//
// Возвращаемое значение:
//  РегистрСведенийКлючЗаписи - Ключ записи состояния мероприятия.
//
Функция ПолучитьКлючСостоянияМероприятия(Мероприятие) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияМероприятийСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.СостоянияМероприятий.СрезПоследних(, Мероприятие = &Мероприятие) КАК СостоянияМероприятийСрезПоследних";
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат РегистрыСведений.СостоянияМероприятий.СоздатьКлючЗаписи( Новый Структура("Период, Мероприятие", Выборка.Период, Мероприятие) );
	
КонецФункции

// Возвращает Истина, если переданное значение является мероприятием, с учетом
// функциональной опции ИспользоватьУправлениеМероприятиями.
//
// Параметры:
//  Объект - СправочникСсылка.Мероприятия - Проверяемый объект.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлен объект, 
//                если он является мероприятием.
//
// Возвращаемое значение:
//  Булево - Признак того является ли объект мероприятием.
//
Функция ЭтоМероприятие(Объект, Мероприятие = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.Мероприятия") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Мероприятие = Объект;
	Возврат Истина;
	
КонецФункции	

// Возвращает Истина, если переданное значение является мероприятием (протоколом, программой).
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - Проверяемый документ.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлено мероприятие,
//                материалом которого является документ.
//
// Возвращаемое значение:
//  Булево - Признак, является ли документ материалом мероприятия.
//
Функция ЭтоМатериалМероприятия(Документ, Мероприятие = Неопределено) Экспорт
	
	Возврат ЭтоПротоколМероприятия(Документ, Мероприятие) 
		Или ЭтоПрограммаМероприятия(Документ, Мероприятие);
	
КонецФункции	

// Возвращает Истина, если переданное значение является протоколом мероприятия.
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - Проверяемый документ.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлено мероприятие,
//                протоколом которого является документ.
//
// Возвращаемое значение:
//  Булево - Признак, является ли документ материалом мероприятия.
//
Функция ЭтоПротоколМероприятия(Документ, Мероприятие = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Мероприятия.Ссылка
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.МатериалПротокол = &Протокол
	|	И (НЕ Мероприятия.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Протокол", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Мероприятие = Выборка.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истина, если переданное значение является программой мероприятия.
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - Проверяемый документ.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлено мероприятие,
//                программой которого является документ.
//
// Возвращаемое значение:
//  Булево - Признак, является ли документ материалом мероприятия.
//
Функция ЭтоПрограммаМероприятия(Документ, Мероприятие = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Мероприятия.Ссылка
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.МатериалПрограмма = &Программа
	|	И (НЕ Мероприятия.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Программа", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Мероприятие = Выборка.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// Возвращает следующее мероприятие.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, для которого необходимо получить
//                следующее мероприятие.состояние которого будет получено.
//
// Возвращаемое значение:
//  СправочникСсылка.Мероприятия - Следующее мероприятие.
//
Функция ПолучитьСледующееМероприятие(Мероприятие) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда 
		Возврат Справочники.Мероприятия.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Мероприятия.Ссылка
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.ПредыдущееМероприятие = &Мероприятие";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Справочники.Мероприятия.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции	

// Возвращает участников мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, для которого необходимо получить участников.
//  ИсключитьКонтрагентов - Булево - Признак необходимости исключения контрагентов из списка участников.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Участники мероприятия.
//   * Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, участник которого указан в строке.
//   * Исполнитель - СправочникСсылка.Контрагенты, СправочникСсылка.ЛичныеАдресаты,
//                   СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи,
//                   СправочникСсылка.КонтактныеЛица, СправочникСсылка.Сотрудники - Участник мероприятия.
//   * ЯвкаОбязательна - Булево - Признак обязательной явки участника.
//   * Отсутствовал - Булево - Признак того что участник отсутствовал.
//   * СостояниеПриглашения - ПеречислениеСсылка.СостоянияПриглашения - Состояние приглашения участника.
//   * Порядок - Число - Порядок сортировки участников.
//
Функция ПолучитьУчастниковМероприятия(Мероприятие, ИсключитьКонтрагентов = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
	НаборЗаписей.Прочитать();
	
	Записи = НаборЗаписей.Выгрузить();
	
	Если ИсключитьКонтрагентов Тогда 
		КоличествоЗаписей = Записи.Количество();
		Для Инд = 1 По КоличествоЗаписей Цикл
			Запись = Записи[КоличествоЗаписей-Инд];
			Если ТипЗнч(Запись.Исполнитель) = Тип("СправочникСсылка.Сотрудники")
				Или ТипЗнч(Запись.Исполнитель) = Тип("СправочникСсылка.Пользователи")
				Или ТипЗнч(Запись.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				
				Продолжить;
			КонецЕсли;
			Записи.Удалить(Запись);
		КонецЦикла;
	КонецЕсли;
	
	Записи.Сортировать("Порядок");
	
	Возврат Записи;
	
КонецФункции	

// Меняет папку для массива мероприятий на новую.
//
// Параметры:
//  МассивМероприятий - Массив - Мероприятия, у которых необходимо изменить папку.
//  НоваяПапка - СправочникСсылка.ПапкиМероприятий - Новая папка мероприятий.
//
// Возвращаемое значение:
//  Булево - Успешное изменение папки мероприятий.
//
Функция ИзменитьПапкуМероприятий(МассивМероприятий, НоваяПапка) Экспорт
	
	// Не указана новая папка
	Если Не ЗначениеЗаполнено(НоваяПапка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Нет элементов в массиве
	Если МассивМероприятий.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Папка не изменилась
	Если МассивМероприятий[0].Папка = НоваяПапка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка прав мероприятий
	Для Каждого МероприятиеСсылка Из МассивМероприятий Цикл
		Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(МероприятиеСсылка).Изменение Тогда 
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У вас нет права на изменение мероприятия ""%1"".'"),
				Строка(МероприятиеСсылка));
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого МероприятиеСсылка Из МассивМероприятий Цикл
			ЗаблокироватьДанныеДляРедактирования(МероприятиеСсылка);
			МероприятиеОбъект = МероприятиеСсылка.ПолучитьОбъект();
			МероприятиеОбъект.Папка = НоваяПапка;
			МероприятиеОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// По части наименования формирует список для выбора участника мероприятия.
//
// Параметры:
//  Текст - часть наименования, по которому выполняется поиск.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораУчастника(Текст) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Подразделение КАК Пояснение1,
	|	Сотрудники.Должность КАК Пояснение2
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Наименование ПОДОБНО &Текст
	|	И Сотрудники.Действует = ИСТИНА
	|	И Сотрудники.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	ПолныеРоли.Ссылка,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.ПолныеРоли КАК ПолныеРоли
	|ГДЕ
	|	ПолныеРоли.Владелец.Наименование ПОДОБНО &Текст
	|	И ПолныеРоли.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	Контрагенты.Ссылка,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование ПОДОБНО &Текст
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	КонтактныеЛица.Ссылка,
	|	КонтактныеЛица.Владелец,
	|	NULL
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Наименование ПОДОБНО &Текст
	|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	ЛичныеАдресаты.Ссылка КАК ЛичныеАдресатыСсылка,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
	|ГДЕ
	|	ЛичныеАдресаты.Наименование ПОДОБНО &Текст
	|	И ЛичныеАдресаты.Сотрудник В (&СотрудникиПользователя)
	|	И ЛичныеАдресаты.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Запрос.УстановитьПараметр("СотрудникиПользователя",
		Сотрудники.ПользовательИЕгоСотрудники());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Пояснение1)
			И ЗначениеЗаполнено(Выборка.Пояснение2) Тогда 
			ТекстПояснения = СтрШаблон(" (%1, %2)",
				Выборка.Пояснение1,
				Выборка.Пояснение2);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение1) Тогда
			ТекстПояснения = СтрШаблон(" (%1)",
				Выборка.Пояснение1);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение2) Тогда
			ТекстПояснения = СтрШаблон(" (%1)",
				Выборка.Пояснение2);
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
			Строка(Выборка.Ссылка), 
			Новый ФорматированнаяСтрока(ТекстПояснения,, WebЦвета.Серый));
		ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// По части наименования формирует список для выбора места проведения.
//
// Параметры:
//  Параметры - Параметры получения данных.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты.
//
Функция СформироватьДанныеВыбораМестаПроведения(Параметры) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("Строка") ТОгда
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("Отбор", Неопределено);
		ПараметрыВыбора.Вставить("СтрокаПоиска", Параметры);
		ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", Неопределено);
		ПараметрыВыбора.Вставить("СпособПоискаСтроки", Неопределено);
		ПараметрыВыбора.Вставить("ПолнотекстовыйПоиск", Неопределено);
	Иначе
		ПараметрыВыбора = Параметры
	КонецЕсли;
	
	ДанныеВыбора = Справочники.ТерриторииИПомещения.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает имя элемента состояния мероприятия по состоянию мероприятия.
//
// Параметры:
//  Состояние - Перечисления.СостоянияМероприятий - Состояние мероприятия, тип которого необходимо получить.
//
// Возвращаемое значение:
//  Строка - Имя элемента состояния мероприятия.
//
Функция ПолучитьИмяЭлементаСостояния(Состояние) Экспорт
	
	ТипСостояния = ПолучитьТипСостояния(Состояние);
	СоответствиеИменТиповСостояний = ПолучитьСоответствиеИменТиповСостояний();
	ИмяЭлемента = СоответствиеИменТиповСостояний.Получить(ТипСостояния);
	
	Возврат ИмяЭлемента;
	
КонецФункции

// Возвращает мероприятия пользователя за определенный промежуток времени.
//
// Параметры:
//  ДатаНачала - Дата - С какой даты следует получать мероприятия.
//  ДатаОкончания - Дата - По какую дату следует получать мероприятия.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, мероприятия которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица мероприятий пользователя.
//
Функция ПолучитьМероприятияПользователя(ДатаНачала, ДатаОкончания, Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникМероприятия.Ссылка КАК Ссылка,
		|	СправочникМероприятия.ДатаНачала КАК ДатаНачала,
		|	СправочникМероприятия.ДатаОкончания КАК ДатаОкончания,
		|	СправочникМероприятия.Представление КАК Представление
		|ИЗ
		|	Справочник.Мероприятия КАК СправочникМероприятия
		|ГДЕ
		|	СправочникМероприятия.ПометкаУдаления = ЛОЖЬ
		|	И 1 В
		|			(ВЫБРАТЬ
		|				1
		|			ИЗ
		|				РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|			ГДЕ
		|				СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка
		|				И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
		|	И (&Участник В
		|				(ВЫБРАТЬ
		|					УчастникиМероприятия.Исполнитель
		|				ИЗ
		|					РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|				ГДЕ
		|					УчастникиМероприятия.Мероприятие = СправочникМероприятия.Ссылка
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					СотрудникиПользователей.Пользователь
		|				ИЗ
		|					РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|						ПО
		|							УчастникиМероприятия.Исполнитель = СотрудникиПользователей.Сотрудник
		|				ГДЕ
		|					УчастникиМероприятия.Мероприятие = СправочникМероприятия.Ссылка)
		|			ИЛИ &Участник = СправочникМероприятия.Организатор
		|			ИЛИ &Участник = СправочникМероприятия.Председатель
		|			ИЛИ &Участник В
		|				(ВЫБРАТЬ
		|					СотрудникиПользователей.Пользователь
		|				ИЗ
		|					РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|				ГДЕ
		|					СотрудникиПользователей.Сотрудник = СправочникМероприятия.Председатель)
		|			ИЛИ &Участник = СправочникМероприятия.Секретарь
		|			ИЛИ &Участник В
		|				(ВЫБРАТЬ
		|					СотрудникиПользователей.Пользователь
		|				ИЗ
		|					РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|				ГДЕ
		|					СотрудникиПользователей.Сотрудник = СправочникМероприятия.Секретарь))
		|	И СправочникМероприятия.ДатаНачала < &ДатаОкончания
		|	И СправочникМероприятия.ДатаОкончания > &ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Участник", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает персональную настройку мероприятий текущего пользователя по ключу.
//
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "ЯвкаОбязательнаПоУмолчанию" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиМероприятий",
			"ЯвкаОбязательнаПоУмолчанию",
			Ложь);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка мероприятий: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку мероприятий текущего пользователя.
//
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ЯвкаОбязательнаПоУмолчанию" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки мероприятий: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиМероприятий",
			"ЯвкаОбязательнаПоУмолчанию",
			Значение);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка мероприятий: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет чтение данных протокола мероприятия из пунктов протокола.
//
// Параметры:
//  Протокол - ДанныеФормыКоллекция - Протокол.
//
Процедура ВывестиПротоколМероприятия(Протокол) Экспорт
	
	ПунктыПротокола = Протокол.Выгрузить(, "ПунктПротокола").ВыгрузитьКолонку("ПунктПротокола");
	
	// Чтение данных протокола.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПротоколыМероприятий.Ссылка,
		|	ПротоколыМероприятий.Выступили,
		|	ПротоколыМероприятий.Ответственный,
		|	ПротоколыМероприятий.Решили,
		|	ПротоколыМероприятий.Слушали,
		|	ПротоколыМероприятий.СрокИсполненияПроцесса КАК СрокИсполнения,
		|	ПротоколыМероприятий.СостояниеИсполнения,
		|	ПротоколыМероприятий.Исполнение,
		|	ПротоколыМероприятий.НомерПунктаПротокола,
		|	ПротоколыМероприятий.Исполнители.(
		|		Исполнитель)
		|ИЗ
		|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|ГДЕ
		|	ПротоколыМероприятий.Ссылка В (&ПунктыПротокола)";

	Запрос.УстановитьПараметр("ПунктыПротокола", ПунктыПротокола);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("ПунктПротокола", Выборка.Ссылка);
		СтрокиПунктаПротокола = Протокол.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиПунктаПротокола.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПунктаПротокола = СтрокиПунктаПротокола[0];
		ЗаполнитьЗначенияСвойств(СтрокаПунктаПротокола, Выборка, , "Исполнители");
		
		СтрокаПунктаПротокола.Исполнители.Очистить();
		ВыборкаИсполнители = Выборка.Исполнители.Выбрать();
		Пока ВыборкаИсполнители.Следующий() Цикл
			НоваяСтрокаИсполнитель = СтрокаПунктаПротокола.Исполнители.Добавить();
			НоваяСтрокаИсполнитель.Исполнитель = ВыборкаИсполнители.Исполнитель;
		КонецЦикла;
		
		МассивИсполнители =
			СтрокаПунктаПротокола.Исполнители.Выгрузить().ВыгрузитьКолонку("Исполнитель");
		СтрокаПунктаПротокола.ПредставлениеИсполнителей = СтрСоединить(МассивИсполнители, ", ");
		
	КонецЦикла;
	
	// Расчет номеров пунктов протокола мероприятия.
	УправлениеМероприятиямиКлиентСервер.ВывестиНомераПунктовПротокола(Протокол);
	
КонецПроцедуры

// Заполнить список выбора номера пункта программы.
//
// Параметры:
//  СписокВыбора - СписокЗначений - Список выбора.
//  Программа - ДанныеФормыКоллекция - Программа.
//
Процедура ЗаполнитьСписокВыбораНомераПунктаПрограммы(СписокВыбора, Программа) Экспорт
	
	СписокВыбора.Очистить();
	Для Каждого Строка Из Программа Цикл
		
		МаксимальнаяДлинаТекста = 70;
		ПредставлениеСодержания = Строка.Содержание;
		Если СтрДлина(ПредставлениеСодержания) > МаксимальнаяДлинаТекста Тогда
			ПредставлениеСодержания = Лев(ПредставлениеСодержания, МаксимальнаяДлинаТекста - 3) + "...";
		КонецЕсли;
		
		СписокВыбора.Добавить(
			Строка.НомерПункта,
			"№ " + Строка(Строка.НомерПункта) + " " + ПредставлениеСодержания);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет протокол мероприятия на основании программы.
// Если протокол уже заполнен, то он будет очищен.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
Процедура ЗаполнитьПротокол(Мероприятие) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		// Очистка протокола.
		МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
		МероприятиеОбъект.Заблокировать();
		МероприятиеОбъект.Протокол.Очистить();
		МероприятиеОбъект.Записать();
		МероприятиеОбъект.Разблокировать();
		
		// Заполнение протокола.
		ДанныеЗаполнения = Новый Структура("Владелец", Мероприятие);
		Для Каждого Строка Из МероприятиеОбъект.Программа Цикл
			
			Если Не Строка.ТребуетПринятияРешения Тогда 
				Продолжить;
			КонецЕсли;
			
			ПунктПротоколаОбъект = Справочники.ПротоколыМероприятий.СоздатьЭлемент();
			
			ПунктПротоколаОбъект.Заполнить(ДанныеЗаполнения);
			ПунктПротоколаОбъект.НомерПунктаПрограммы = Строка.НомерПункта;
			ПунктПротоколаОбъект.НомерПунктаПротокола = Строка.НомерПункта;
			ПунктПротоколаОбъект.Слушали = УправлениеМероприятиямиКлиентСервер.СформироватьТекстСлушали(Строка);
			
			ПунктПротоколаОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет протокол мероприятия на основании протокола предыдущего мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
Процедура ЗаполнитьПротоколНаОснованииПредыдущего(Мероприятие) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		// Очистка программы и протокола.
		МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
		МероприятиеОбъект.Заблокировать();
		МероприятиеОбъект.Протокол.Очистить();
		МероприятиеОбъект.Программа.Очистить();
		
		// Заполнение программы.
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МероприятиеОбъект.ПредыдущееМероприятие,
			"Программа, Протокол");
		Программа = Результат.Программа.Выгрузить();
		Для Каждого Строка Из Программа Цикл
			НоваяСтрока = МероприятиеОбъект.Программа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "ВремяФакт");
		КонецЦикла;
		УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(МероприятиеОбъект);
		МероприятиеОбъект.Записать();
		МероприятиеОбъект.Разблокировать();
		
		// Заполнение протокола.
		Протокол = Результат.Протокол.Выгрузить();
		ДанныеЗаполнения = Новый Структура("Владелец", Мероприятие);
		Для Каждого Строка Из Протокол Цикл
			ПунктПротоколаОбъект = Строка.ПунктПротокола.Скопировать();
			ПунктПротоколаОбъект.Владелец = Неопределено;
			ПунктПротоколаОбъект.Заполнить(ДанныеЗаполнения);
			ПунктПротоколаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// По части наименования формирует список для выбора организатора мероприятия.
//
// Параметры:
//  Параметры - Параметры автоподбора.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораОрганизатора(Параметры) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Параметры.Отбор = Неопределено Тогда
		Параметры.Отбор = Новый Структура;
	КонецЕсли;
	Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	ДанныеВыбораПользователи = Справочники.Сотрудники.ПолучитьДанныеВыбора(Параметры);
	ДанныеВыбораКонтрагенты = Справочники.Контрагенты.ПолучитьДанныеВыбора(Параметры);
	ДанныеВыбораКонтактныеЛица = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(Параметры);
	
	Для Каждого ЭлементДанные Из ДанныеВыбораПользователи Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	Для Каждого ЭлементДанные Из ДанныеВыбораКонтрагенты Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	Для Каждого ЭлементДанные Из ДанныеВыбораКонтактныеЛица Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Получаем таблицу протокола мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятия.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Протокол мероприятия.
//
Функция ПолучитьПротоколМероприятия(Мероприятие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МероприятияПротокол.Ссылка КАК Мероприятие,
		|	МероприятияПротокол.НомерСтроки КАК НомерСтроки,
		|	ПротоколыМероприятий.Ответственный,
		|	ПротоколыМероприятий.НомерПунктаПрограммы КАК НомерПунктаПрограммы,
		|	ПротоколыМероприятий.НомерПунктаПротокола КАК НомерПунктаПротокола,
		|	ПротоколыМероприятий.Слушали,
		|	ПротоколыМероприятий.Выступили,
		|	ПротоколыМероприятий.Решили,
		|	ПротоколыМероприятий.СрокИсполненияПроцесса,
		|	ПротоколыМероприятий.Проверяющий,
		|	ПротоколыМероприятий.ВариантУстановкиСрокаОбработкиРезультатов,
		|	ПротоколыМероприятий.СрокОбработкиРезультатов,
		|	ПротоколыМероприятий.СрокОбработкиРезультатовДни,
		|	ПротоколыМероприятий.СрокОбработкиРезультатовЧасы,
		|	ПротоколыМероприятий.СрокОбработкиРезультатовМинуты,
		|	ПротоколыМероприятий.Автор,
		|	ПротоколыМероприятий.Контролер,
		|	ПротоколыМероприятий.ВариантИсполнения,
		|	ПротоколыМероприятий.Исполнители.(
		|		Ссылка,
		|		НомерСтроки,
		|		Исполнитель,
		|		НаименованиеЗадачи,
		|		Описание,
		|		Ответственный,
		|		ПорядокИсполнения,
		|		СрокИсполнения,
		|		СрокИсполненияДни,
		|		СрокИсполненияЧасы,
		|		СрокИсполненияМинуты,
		|		ВариантУстановкиСрокаИсполнения
		|	),
		|	ПротоколыМероприятий.СостояниеИсполнения,
		|	ПротоколыМероприятий.Ссылка,
		|	ПротоколыМероприятий.Ссылка КАК ПунктПротокола,
		|	ПротоколыМероприятий.Исполнение,
		|	ПротоколыМероприятий.КоличествоИтераций
		|ИЗ
		|	Справочник.Мероприятия.Протокол КАК МероприятияПротокол
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|		ПО МероприятияПротокол.ПунктПротокола = ПротоколыМероприятий.Ссылка
		|ГДЕ
		|	МероприятияПротокол.Ссылка = &Мероприятие
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверяет права участников процесса на предметы.
//
// Параметры
//  Процесс - БизнесПроцессСсылка, БизнесПроцессОбъект - Процесс.
//  Предметы - Массив - Предметы без автоматического заполнения рабочей группы.
//  ПользователиДляПроверки - ТаблицаЗначений - Пользователи соответствующие участникам процесса для проверки
//              прав на предметы, см. Мультипредметность.ПользователиДляПроверкиПрав().
//
Функция ПроверитьПраваУчастниковПроцессаНаФайлыПредметов(Процесс, Предметы, ПользователиДляПроверки) Экспорт
	
	УчастникиБезПрав = Неопределено;
	
	ТипПроцесса = ТипЗнч(Процесс);
	Если ТипПроцесса = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		ЭтапОбработкиПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "ЭтапОбработкиПредмета");
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессОбъект.Исполнение") Тогда
		ЭтапОбработкиПредмета = Процесс.ЭтапОбработкиПредмета;
	Иначе
		ЭтапОбработкиПредмета = "";
	КонецЕсли;
	
	Если ЭтапОбработкиПредмета = "ЗапроситьМатериалы" Тогда
		
		УчастникиБезПрав = Новый ТаблицаЗначений;
		УчастникиБезПрав.Колонки.Добавить("Участник");
		УчастникиБезПрав.Колонки.Добавить("Предмет");
		
		Мероприятия = Новый Массив;
		Для Каждого Предмет Из Предметы Цикл
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
				Мероприятия.Добавить(Предмет);
			КонецЕсли;
		КонецЦикла;
		
		ПраваНаФайлы = Справочники.Мероприятия.ПолучитьПраваНаФайлы(
			Мероприятия,
			ПользователиДляПроверки.ВыгрузитьКолонку("Участник"));
		Для Каждого Мероприятие Из Мероприятия Цикл
			Для Каждого СтрокаПользователь Из ПользователиДляПроверки Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("ОбъектДоступа", Мероприятие);
				Отбор.Вставить("Сотрудник", СтрокаПользователь.Участник);
				Отбор.Вставить("Изменение", Истина);
				
				НайденныеПрава = ПраваНаФайлы.НайтиСтроки(Отбор);
				Если НайденныеПрава.Количество() = 0 Тогда
					НовыйУчастникБезПрав = УчастникиБезПрав.Добавить();
					НовыйУчастникБезПрав.Участник = СтрокаПользователь.Участник;
					НовыйУчастникБезПрав.Предмет = Мероприятие;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УчастникиБезПрав;
	
КонецФункции

// Определяет количество мероприятий в ближайший месяц.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  Число - Количество мероприятий в ближайший месяц.
//
Функция МероприятийВБлижайшийМесяц(Пользователь) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчастникиМероприятия.Мероприятие КАК Мероприятие
		|ПОМЕСТИТЬ МероприятияПользователя
		|ИЗ
		|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО УчастникиМероприятия.Исполнитель = СотрудникиПользователей.Сотрудник
		|ГДЕ
		|	(УчастникиМероприятия.Исполнитель = &Пользователь
		|			ИЛИ СотрудникиПользователей.Пользователь = &Пользователь)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|ГДЕ
		|	(Мероприятия.Организатор = &Пользователь
		|			ИЛИ Мероприятия.Председатель = &Пользователь
		|			ИЛИ Мероприятия.Секретарь = &Пользователь
		|			ИЛИ Мероприятия.Подготовил = &Пользователь
		|			ИЛИ Мероприятия.Куратор = &Пользователь)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО Мероприятия.Председатель = СотрудникиПользователей.Сотрудник
		|ГДЕ
		|	СотрудникиПользователей.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО Мероприятия.Секретарь = СотрудникиПользователей.Сотрудник
		|ГДЕ
		|	СотрудникиПользователей.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО Мероприятия.Подготовил = СотрудникиПользователей.Сотрудник
		|ГДЕ
		|	СотрудникиПользователей.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(Мероприятия.Ссылка) КАК КоличествоМероприятийВБлижайшийМесяц
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МероприятияПользователя КАК МероприятияПользователя
		|		ПО Мероприятия.Ссылка = МероприятияПользователя.Мероприятие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|		ПО Мероприятия.Ссылка = СостоянияМероприятий.Мероприятие
		|ГДЕ
		|	Мероприятия.ДатаОкончания >= &ТекущаяДата
		|	И Мероприятия.ДатаНачала <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 1)
		|	И НЕ Мероприятия.ПометкаУдаления
		|	И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки)");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоМероприятийВБлижайшийМесяц;
	
КонецФункции

// Определяет ближайшие мероприятия.
// 
// Возвращаемое значение:
//  Массив из Структура - Данные ближайших мероприятий. См. РаботаСВиджетами.ДанныеСтрокиСписка().
//
Функция БлижайшиеМероприятия() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчастникиМероприятия.Мероприятие КАК Мероприятие
		|ПОМЕСТИТЬ МероприятияПользователя
		|ИЗ
		|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО УчастникиМероприятия.Исполнитель = СотрудникиПользователей.Сотрудник
		|ГДЕ
		|	(УчастникиМероприятия.Исполнитель = &Пользователь
		|			ИЛИ СотрудникиПользователей.Пользователь = &Пользователь)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|ГДЕ
		|	(Мероприятия.Организатор = &Пользователь
		|			ИЛИ Мероприятия.Председатель = &Пользователь
		|			ИЛИ Мероприятия.Секретарь = &Пользователь
		|			ИЛИ Мероприятия.Подготовил = &Пользователь
		|			ИЛИ Мероприятия.Куратор = &Пользователь)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО Мероприятия.Председатель = СотрудникиПользователей.Сотрудник
		|ГДЕ
		|	СотрудникиПользователей.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО Мероприятия.Секретарь = СотрудникиПользователей.Сотрудник
		|ГДЕ
		|	СотрудникиПользователей.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО Мероприятия.Подготовил = СотрудникиПользователей.Сотрудник
		|ГДЕ
		|	СотрудникиПользователей.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 5
		|	Мероприятия.Ссылка КАК Мероприятие,
		|	Мероприятия.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МероприятияПользователя КАК МероприятияПользователя
		|		ПО Мероприятия.Ссылка = МероприятияПользователя.Мероприятие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|		ПО Мероприятия.Ссылка = СостоянияМероприятий.Мероприятие
		|ГДЕ
		|	Мероприятия.ДатаОкончания >= &ТекущаяДата
		|	И Мероприятия.ДатаНачала <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 1)
		|	И НЕ Мероприятия.ПометкаУдаления
		|	И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Мероприятия.ДатаНачала");
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"ПЕРВЫЕ 5",
		СтрШаблон(
			"ПЕРВЫЕ %1",
			Формат(РаботаСВиджетами.МаксимальноеКоличествоСтрокВиджетаСписок(), "ЧГ=")));
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	БлижайшиеМероприятия = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		ДанныеСтрокиСписка = РаботаСВиджетами.ДанныеСтрокиСписка();
		ДанныеСтрокиСписка.ИндексКартинки = 0;
		ДанныеСтрокиСписка.Значение = Строка(Выборка.Мероприятие);
		ДанныеСтрокиСписка.Ссылка = ПолучитьНавигационнуюСсылку(Выборка.Мероприятие);
		ДанныеСтрокиСписка.Комментарий = РаботаСВиджетами.ПредставлениеДатыСписка(
			Выборка.ДатаНачала);
		
		БлижайшиеМероприятия.Добавить(ДанныеСтрокиСписка);
		
	КонецЦикла;
	
	Возврат БлижайшиеМероприятия;
	
КонецФункции

// Устанавливает состояние пунктов протокола мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  Период - Дата.
//  СостояниеМероприятия - ПеречислениеСсылка.СостоянияМероприятий.
//  Исполнение - СправочникСсылка.ДействиеИсполнения.
//
Процедура УстановитьСостояниеПунктовПротоколаИзДействия(Мероприятие, Период, СостояниеМероприятия, Исполнение) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Исполнение,
			"ПоПунктам, Участники, Пункты");
		
		Если РеквизитыДействия.ПоПунктам Тогда
			
			УчастникиДействия = РеквизитыДействия.Участники.Выгрузить();
			ПунктыДействия = РеквизитыДействия.Пункты.Выгрузить();
			
			ВсеСостоянияИРезультаты = ДействияСервер.ВсеСостоянияИРезультаты(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Исполнение));
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПротоколыМероприятий.Ссылка КАК ПунктПротокола,
				|	ПротоколыМероприятий.СостояниеИсполнения КАК СостояниеПункта,
				|	ПротоколыМероприятий.Исполнение КАК Исполнение
				|ИЗ
				|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
				|ГДЕ
				|	ПротоколыМероприятий.Владелец = &Мероприятие");
			
			Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
			
			ПунктыПротокола = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрокаПунктаДействия Из ПунктыДействия Цикл
				
				ПунктПротокола = Справочники.ПротоколыМероприятий.ПолучитьСсылку(
					СтрокаПунктаДействия.Идентификатор);
				
				СтрокаПунктаПротокола = ПунктыПротокола.Найти(ПунктПротокола, "ПунктПротокола");
				Если СтрокаПунктаПротокола = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьУчастникиПункта = Ложь;
				ВсеУчастникиЗавершили = Истина;
				СостояниеПункта = Перечисления.СостоянияПротоколовМероприятий.ПустаяСсылка();
				Для Каждого СтрокаУчастникаДействия Из УчастникиДействия Цикл
					
					Если СтрокаУчастникаДействия.ИдентификаторПункта <> СтрокаПунктаДействия.Идентификатор Тогда
						Продолжить;
					КонецЕсли;
					
					ЕстьУчастникиПункта = Истина;
					
					СтрокаСостояния = ВсеСостоянияИРезультаты.Найти(
						СтрокаУчастникаДействия.Идентификатор,
						"ИдентификаторУчастника");
					Если СтрокаСостояния = Неопределено
						Или СтрокаСостояния.Состояние <> Перечисления.СостоянияВыполненияДействий.Завершено Тогда
						ВсеУчастникиЗавершили = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЕстьУчастникиПункта И ВсеУчастникиЗавершили Тогда
					
					СостояниеПункта = Перечисления.СостоянияПротоколовМероприятий.Исполнен;
					
				ИначеЕсли ЕстьУчастникиПункта
					И СостояниеМероприятия = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении Тогда
					
					СостояниеПункта = Перечисления.СостоянияПротоколовМероприятий.НаИсполнении;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СостояниеПункта)
					Или СтрокаПунктаПротокола.СостояниеПункта = СостояниеПункта Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписатьСостояниеПунктаПротоколаМероприятия(
					ПунктПротокола,
					Период,
					СостояниеПункта,
					Исполнение,
					Исполнение);
				
			КонецЦикла;
			
		Иначе
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПротоколыМероприятий.Ссылка КАК ПунктПротокола,
				|	ПротоколыМероприятий.СостояниеИсполнения КАК СостояниеПункта,
				|	ПротоколыМероприятий.Исполнение КАК Исполнение
				|ИЗ
				|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
				|ГДЕ
				|	ПротоколыМероприятий.Владелец = &Мероприятие");
			
			Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если СостояниеМероприятия = Перечисления.СостоянияМероприятий.ПротоколИсполнен
					И Выборка.СостояниеПункта = Перечисления.СостоянияПротоколовМероприятий.НаИсполнении
					И Выборка.Исполнение = Исполнение Тогда
					
					ЗаписатьСостояниеПунктаПротоколаМероприятия(
						Выборка.ПунктПротокола,
						Период,
						Перечисления.СостоянияПротоколовМероприятий.Исполнен,
						Исполнение,
						Исполнение);
					
				ИначеЕсли СостояниеМероприятия = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении
					И Выборка.СостояниеПункта = Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение Тогда
					
					ЗаписатьСостояниеПунктаПротоколаМероприятия(
						Выборка.ПунктПротокола,
						Период,
						Перечисления.СостоянияПротоколовМероприятий.НаИсполнении,
						Исполнение,
						Исполнение);
						
				ИначеЕсли СостояниеМероприятия = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении
					И Выборка.СостояниеПункта = Перечисления.СостоянияПротоколовМероприятий.Исполнен
					И Выборка.Исполнение = Исполнение Тогда
					
					ЗаписатьСостояниеПунктаПротоколаМероприятия(
						Выборка.ПунктПротокола,
						Период,
						Перечисления.СостоянияПротоколовМероприятий.НаИсполнении,
						Исполнение,
						Исполнение);
						
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Очищает состояние пунктов протокола мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  Исполнение - СправочникСсылка.ДействияИсполнения.
//
Процедура ОчиститьСостояниеПунктовПротоколаИзДействия(Мероприятие, Исполнение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПротоколыМероприятий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|ГДЕ
		|	ПротоколыМероприятий.Владелец = &Мероприятие
		|	И ПротоколыМероприятий.СостояниеИсполненияУстановил = &Исполнение";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	Запрос.УстановитьПараметр("Исполнение", Исполнение);
	
	НачатьТранзакцию();
	
	Попытка
	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ПротоколОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПротоколОбъект.СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение;
			ПротоколОбъект.ДатаИсполнения = Дата(1, 1, 1);
			ПротоколОбъект.СостояниеИсполненияУстановил = Неопределено;
			ПротоколОбъект.Исполнение = Неопределено;
			ПротоколОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Отправляет приглашения на мероприятия.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  
Процедура ОтправитьПриглашения(Мероприятие) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ЗаписатьСостояниеМероприятия(
			Мероприятие,
			ТекущаяДатаСеанса(),
			Перечисления.СостоянияМероприятий.ПриглашенияОтправлены,
			Сотрудники.ОсновнойСотрудник());
	
		ОтправитьПриглашенияУчастникамПриНеобходимости(Мероприятие);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Отменяет мероприятие.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  
Процедура ОтменитьМероприятие(Мероприятие) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ЗаписатьСостояниеМероприятия(
			Мероприятие,
			ТекущаяДатаСеанса(),
			Перечисления.СостоянияМероприятий.МероприятиеОтменено,
			Сотрудники.ОсновнойСотрудник());
		
		ОбработкиОбъектов.ПрерватьОбработкуОбъекта(
			Мероприятие,
			НСтр("ru = 'Мероприятие отменено'"));
		
		АдресаДляОтправкиПриглашений = Новый Массив;
		УчастникиМероприятия = ПолучитьУчастниковМероприятия(Мероприятие);
		Для Каждого СтрокаУчастника Из УчастникиМероприятия Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.СостояниеПриглашения)
				Или Не ЗначениеЗаполнено(СтрокаУчастника.КонтрольнаяСуммаПриглашения) Тогда
				Продолжить;
			КонецЕсли;
			
			РегистрыСведений.УчастникиМероприятия.УстановитьСостояниеПриглашения(
				Мероприятие,
				СтрокаУчастника.Исполнитель,
				Перечисления.СостоянияПриглашения.ПустаяСсылка(),
				"");
			
			Если ЭтоВнутреннийУчастник(СтрокаУчастника.Исполнитель) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДляОтправкиПриглашений = АдресДляОтправкиПриглашений(СтрокаУчастника.Исполнитель);
			Если Не ЗначениеЗаполнено(АдресДляОтправкиПриглашений) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не указан адрес для отправки приглашений %1 (%2).'"),
					СтрокаУчастника.Исполнитель,
					ТипЗнч(СтрокаУчастника.Исполнитель));
			КонецЕсли;
			
			АдресаДляОтправкиПриглашений.Добавить(АдресДляОтправкиПриглашений);
			
		КонецЦикла;
		
		ОтправитьОтменуПриглашенийВнешнимУчастникам(
			Мероприятие,
			АдресаДляОтправкиПриглашений);
				
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет состояние приглашения.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//
Процедура ОбновитьСостояниеПриглашений(Мероприятие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеПриглашений = ПолучитьСостояниеМероприятия(Мероприятие, "СостояниеПриглашений");
	Если Не ЗначениеЗаполнено(СостояниеПриглашений) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПринято = Ложь;
	ЕстьНеПринято = Ложь;
	ЕстьОтправлено = Ложь;
	
	УчастникиМероприятия = ПолучитьУчастниковМероприятия(Мероприятие, Ложь);
	Для Каждого СтрокаУчастника Из УчастникиМероприятия Цикл
		
		Если СтрокаУчастника.СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято Тогда
			ЕстьПринято = Истина;
		ИначеЕсли СтрокаУчастника.СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято Тогда
			ЕстьНеПринято = Истина;
		ИначеЕсли СтрокаУчастника.СостояниеПриглашения = Перечисления.СостоянияПриглашения.Отправлено
			Или СтрокаУчастника.СостояниеПриглашения = Перечисления.СостоянияПриглашения.ПустаяСсылка() Тогда
			ЕстьОтправлено = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОтправлено Тогда
		НовоеСостояниеПриглашений = Перечисления.СостоянияМероприятий.ПриглашенияОтправлены;
	ИначеЕсли ЕстьНеПринято Тогда
		НовоеСостояниеПриглашений = Перечисления.СостоянияМероприятий.ПриглашенияНеПриняты;
	ИначеЕсли ЕстьПринято Тогда
		НовоеСостояниеПриглашений = Перечисления.СостоянияМероприятий.ПриглашенияПриняты;
	Иначе
		НовоеСостояниеПриглашений = Перечисления.СостоянияМероприятий.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовоеСостояниеПриглашений) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСостояниеМероприятия(
		Мероприятие,
		ТекущаяДатаСеанса(),
		НовоеСостояниеПриглашений,
		Сотрудники.ОсновнойСотрудник());
	
КонецПроцедуры

// Формирует расширенное представление мероприятия (с датой и видом мероприятия).
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
// 
// Возвращаемое значение:
//  Строка - Расширенное представление мероприятия.
//  
Функция РасширенноеПредставлениеСДатой(Мероприятие) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат "";
	КонецЕсли;
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Мероприятие,
		"ВидМероприятия, ДатаНачала, Наименование");
	
	РасширенноеПредставлениеСДатой =
		УправлениеМероприятиямиКлиентСервер.РасширенноеПредставлениеСДатой(
			РеквизитыМероприятия.ВидМероприятия,
			РеквизитыМероприятия.ДатаНачала,
			РеквизитыМероприятия.Наименование);
	
	Возврат РасширенноеПредставлениеСДатой;
	
КонецФункции

// Проверяет, что настроена отправка внешних приглашений.
// 
// Возвращаемое значение:
//  Булево - настроена отправка внешних приглашений.
//  
Функция НастроенаОтправкаВнешнихПриглашений() Экспорт
	
	ИспользоватьВнешниеПриглашения = ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеПриглашения");
	УчетнаяЗаписьДляРаботыСПриглашениями = Константы.УчетнаяЗаписьДляРаботыСПриглашениями.Получить();
	НастроенаОтправкаВнешнихПриглашений =
		ИспользоватьВнешниеПриглашения
		И ЗначениеЗаполнено(УчетнаяЗаписьДляРаботыСПриглашениями);
	
	Возврат НастроенаОтправкаВнешнихПриглашений;
	
КонецФункции

// Определяет адрес для отправки приглашений.
// 
// Параметры:
//  Участник - СправочникСсылка.Сотрудники, СправочникСсылка.Контрагенты, СправочникСсылка.ЛичныеАдресаты, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи, СправочникСсылка.КонтактныеЛица.
// 
// Возвращаемое значение:
//  Строка - Адрес для отправки приглашений.
//
Функция АдресДляОтправкиПриглашений(Участник) Экспорт
	
	АдресДляОтправкиПриглашений = "";
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат АдресДляОтправкиПриглашений;
	КонецЕсли;
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		АдресДляОтправкиПриглашений =
			УправлениеКонтактнойИнформациейДокументооборот.ПредставлениеКонтактнойИнформации(
				Участник,
				Справочники.ВидыКонтактнойИнформации.EmailСотрудника);
		
		Если Не ЗначениеЗаполнено(АдресДляОтправкиПриглашений) Тогда
			
			ПользовательУчастника = Сотрудники.ПользовательСотрудника(Участник);
			Если ЗначениеЗаполнено(ПользовательУчастника) Тогда
				АдресДляОтправкиПриглашений =
					УправлениеКонтактнойИнформациейДокументооборот.ПредставлениеКонтактнойИнформации(
						ПользовательУчастника,
						Справочники.ВидыКонтактнойИнформации.EmailПользователя);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		РеквизитыУчастника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Участник,
			"ЮрФизЛицо, ФизЛицо");
		
		Если РеквизитыУчастника.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			АдресДляОтправкиПриглашений =
				УправлениеКонтактнойИнформациейДокументооборот.ПредставлениеКонтактнойИнформации(
					РеквизитыУчастника.ФизЛицо,
					Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица);
		Иначе
			АдресДляОтправкиПриглашений =
				УправлениеКонтактнойИнформациейДокументооборот.ПредставлениеКонтактнойИнформации(
					Участник,
					Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
		
		АдресДляОтправкиПриглашений =
			УправлениеКонтактнойИнформациейДокументооборот.ПредставлениеКонтактнойИнформации(
				Участник,
				Справочники.ВидыКонтактнойИнформации.EmailАдресата);
			
	ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		
		РольУчастника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Участник, "Владелец");
		АдресДляОтправкиПриглашений =
			УправлениеКонтактнойИнформациейДокументооборот.ПредставлениеКонтактнойИнформации(
				РольУчастника,
				Справочники.ВидыКонтактнойИнформации.EmailРоли);
			
	ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.Пользователи") Тогда
		
		АдресДляОтправкиПриглашений =
			УправлениеКонтактнойИнформациейДокументооборот.ПредставлениеКонтактнойИнформации(
				Участник,
				Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		
		Если Не ЗначениеЗаполнено(АдресДляОтправкиПриглашений) Тогда
			
			СотрудникПользователя = ОбщегоНазначенияДокументооборот.Сотрудник(Участник);
			Если ЗначениеЗаполнено(СотрудникПользователя) Тогда
				АдресДляОтправкиПриглашений =
					УправлениеКонтактнойИнформациейДокументооборот.ПредставлениеКонтактнойИнформации(
						СотрудникПользователя,
						Справочники.ВидыКонтактнойИнформации.EmailСотрудника);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		АдресДляОтправкиПриглашений =
			УправлениеКонтактнойИнформациейДокументооборот.ПредставлениеКонтактнойИнформации(
				Участник,
				Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
			
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен способ получения адреса для отправки приглашений %1 (%2).'"),
			Участник,
			ТипЗнч(Участник));
		
	КонецЕсли;
	
	Возврат АдресДляОтправкиПриглашений;
	
КонецФункции

// Отправляет приглашения участникам мероприятия при необходимости.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  
Процедура ОтправитьПриглашенияУчастникамПриНеобходимости(Мероприятие) Экспорт
	
	Если Не ПриглашенияАктуальны(Мероприятие) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		КонтрольнаяСуммаПриглашения = КонтрольнаяСуммаПриглашения(Мероприятие);
		
		УчастникиМероприятия = ПолучитьУчастниковМероприятия(Мероприятие);
		
		ЭтоИзменениеПриглашения = Ложь;
		АдресаДляОтправкиПриглашений = Новый Массив;
		Для Каждого СтрокаУчастника Из УчастникиМероприятия Цикл
			
			ПриглашенияНеОтправлялись = Не ЗначениеЗаполнено(СтрокаУчастника.СостояниеПриглашения);
			ПриглашениеУстарело = КонтрольнаяСуммаПриглашения <> СтрокаУчастника.КонтрольнаяСуммаПриглашения;
			Если Не ПриглашенияНеОтправлялись И Не ПриглашениеУстарело Тогда
				Продолжить;
			КонецЕсли;
			
			РегистрыСведений.УчастникиМероприятия.УстановитьСостояниеПриглашения(
				Мероприятие,
				СтрокаУчастника.Исполнитель,
				Перечисления.СостоянияПриглашения.Отправлено,
				КонтрольнаяСуммаПриглашения);
			
			Если ЭтоВнутреннийУчастник(СтрокаУчастника.Исполнитель) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДляОтправкиПриглашений = АдресДляОтправкиПриглашений(СтрокаУчастника.Исполнитель);
			Если Не ЗначениеЗаполнено(АдресДляОтправкиПриглашений) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не указан адрес для отправки приглашений %1 (%2).'"),
					СтрокаУчастника.Исполнитель,
					ТипЗнч(СтрокаУчастника.Исполнитель));
			КонецЕсли;
			
			ЭтоИзменениеПриглашения =
				ЭтоИзменениеПриглашения
				Или ЗначениеЗаполнено(СтрокаУчастника.КонтрольнаяСуммаПриглашения);
			
			АдресаДляОтправкиПриглашений.Добавить(АдресДляОтправкиПриглашений);
			
		КонецЦикла;
		
		ОтправитьПриглашенияВнешнимУчастникам(
			Мероприятие,
			АдресаДляОтправкиПриглашений);
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Определяет, актуальны ли приглашения по мероприятию.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
// 
// Возвращаемое значение:
//  Булево - Приглашения актуальны.
//
Функция ПриглашенияАктуальны(Мероприятие) Экспорт
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Мероприятие,
		"ПометкаУдаления, ДатаНачала, ДатаОкончания");
	СостояниеПриглашений = ПолучитьСостояниеМероприятия(Мероприятие, "СостояниеПриглашений");
	СостояниеМероприятия = ПолучитьСостояниеМероприятия(Мероприятие, "СостояниеМероприятия");
	
	ПриглашенияАктуальны =
		Не РеквизитыМероприятия.ПометкаУдаления
		И ЗначениеЗаполнено(РеквизитыМероприятия.ДатаНачала)
		И ЗначениеЗаполнено(РеквизитыМероприятия.ДатаОкончания)
		И СостояниеМероприятия <> Перечисления.СостоянияМероприятий.МероприятиеОтменено
		И ЗначениеЗаполнено(СостояниеПриглашений);
		
	Возврат ПриглашенияАктуальны;
	
КонецФункции

// Это внутренний участник.
// 
// Параметры:
//  Участник - СправочникСсылка.Сотрудники, СправочникСсылка.Контрагенты, СправочникСсылка.ЛичныеАдресаты, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи, СправочникСсылка.КонтактныеЛица.
// 
// Возвращаемое значение:
//  Булево - Это внутренний участник.
//
Функция ЭтоВнутреннийУчастник(Участник) Экспорт
	
	ЭтоВнутреннийУчастник =
		ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь")
		И Метаданные.Справочники.ЗаписиРабочегоКалендаря.Реквизиты.Сотрудник.Тип.СодержитТип(
			ТипЗнч(Участник));
	
	Возврат ЭтоВнутреннийУчастник;
	
КонецФункции

// Хеш приглашения.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
// 
// Возвращаемое значение:
//  Строка - Контрольная сумма приглашения.
//
Функция КонтрольнаяСуммаПриглашения(Мероприятие) Экспорт
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Мероприятие,
		"ДатаНачала, ДатаОкончания, Наименование, Описание, МестоПроведения");
	ПолучитьСостояниеМероприятия(Мероприятие, "СостояниеМероприятия");
	
	КлючПриглашения = СтрШаблон("%1/%2/%3/%4/%5",
		Формат(РеквизитыМероприятия.ДатаНачала, "ДФ='dd.MM.yy ЧЧ:мм'"),
		Формат(РеквизитыМероприятия.ДатаОкончания, "ДФ='dd.MM.yy ЧЧ:мм'"),
		РеквизитыМероприятия.Наименование,
		РеквизитыМероприятия.Описание,
		РеквизитыМероприятия.МестоПроведения);
	
	КонтрольнаяСуммаПриглашения = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(КлючПриглашения);
	
	Возврат КонтрольнаяСуммаПриглашения;
	
КонецФункции

// Формирует тему приглашения.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие
//  КодЯзыка - Строка.
// 
// Возвращаемое значение:
//  Строка - Тема приглашения.
//  
Функция ТемаПриглашения(Мероприятие, КодЯзыка) Экспорт
	
	ТемаУведомления = СтрШаблон(
		НСтр("ru = 'Приглашение на %1'", КодЯзыка),
		РасширенноеПредставлениеСДатой(Мероприятие));
			
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует тему приглашения.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  КодЯзыка - Строка.
// 
// Возвращаемое значение:
//  Строка - Тема приглашения.
//  
Функция ТемаОтменыПриглашения(Мероприятие, КодЯзыка) Экспорт
	
	ТемаУведомления = СтрШаблон(
		НСтр("ru = 'Отменено приглашение на %1'", КодЯзыка),
		РасширенноеПредставлениеСДатой(Мероприятие));
			
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует текст приглашения.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  КодЯзыка - Строка.
// 
// Возвращаемое значение:
//  Строка - Текст приглашения.
//  
Функция ТекстПриглашения(Мероприятие, КодЯзыка) Экспорт
	
	ТекстПриглашения = "";
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Мероприятие,
		"Наименование, ДатаНачала, ДатаОкончания,
		|ВидМероприятия, МестоПроведения, Организатор, Описание");
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ТекстПриглашения,
		"",
		СтрШаблон("%1 (%2)",РеквизитыМероприятия.Наименование, РеквизитыМероприятия.ВидМероприятия));
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ТекстПриглашения,
		НСтр("ru = 'Место'", КодЯзыка),
		РеквизитыМероприятия.МестоПроведения);
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ТекстПриглашения,
		НСтр("ru = 'Организатор'", КодЯзыка),
		РеквизитыМероприятия.Организатор,
		АдресДляОтправкиПриглашений(РеквизитыМероприятия.Организатор));
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ТекстПриглашения,
		НСтр("ru = 'Начало'", КодЯзыка),
		СтрШаблон(
			"%1 (%2)",
			Формат(РеквизитыМероприятия.ДатаНачала, "ДФ='dd.MM.yyyy HH:mm';"),
			ЧасовойПоясСеанса()));
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ТекстПриглашения,
		НСтр("ru = 'Окончание'", КодЯзыка),
		СтрШаблон(
			"%1 (%2)",
			Формат(РеквизитыМероприятия.ДатаОкончания, "ДФ='dd.MM.yyyy HH:mm';"),
			ЧасовойПоясСеанса()));
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ТекстПриглашения,
		НСтр("ru = 'Описание'", КодЯзыка),
		РеквизитыМероприятия.Описание);
	
	МассивУчастники = Новый Массив;
	УчастникиМероприятия = ПолучитьУчастниковМероприятия(Мероприятие);
	Для Каждого СтрокаУчастника Из УчастникиМероприятия Цикл
		
		Участник = СтрокаУчастника.Исполнитель;
		АдресУчастника = АдресДляОтправкиПриглашений(Участник);
		
		ПредставлениеУчастника = Строка(Участник);
		Если ЗначениеЗаполнено(АдресУчастника) Тогда
			ПредставлениеУчастника = ПредставлениеУчастника + " (" + АдресУчастника + ")";
		КонецЕсли;
		ПредставлениеУчастника = "- " + ПредставлениеУчастника + ".";
		
		МассивУчастники.Добавить(ПредставлениеУчастника);
		
	КонецЦикла;
	ПредставлениеУчастников = Символы.ПС + СтрСоединить(МассивУчастники, Символы.ПС);
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ТекстПриглашения,
		НСтр("ru = 'Участники'", КодЯзыка),
		ПредставлениеУчастников);
	
	Возврат ТекстПриглашения;
	
КонецФункции

// Формирует текст приглашения с ссылками для принятия и отклонения.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  КодЯзыка - Строка.
// 
// Возвращаемое значение:
//  Строка - Текст приглашения с ссылками.
//  
Функция ТекстПриглашенияСсылками(Мероприятие, КодЯзыка) Экспорт
	
	ПредупреждениеНеОтвечать =
		НСтр("ru = 'Не отвечайте на это письмо. Для принятия или отклонения приглашения нажмите на одну из ссылок.'",
			КодЯзыка);
	
	ТекстПриглашения = ТекстПриглашения(Мероприятие, КодЯзыка);
	
	ВопросПримитеУчастие = "<b>" + НСтр("ru = 'Примете участие?'", КодЯзыка) + "</b>";
	
	АдресДляОтправкиОтветовНаПриглашения = АдресДляОтправкиОтветовНаПриглашения();
	Если Не ЗначениеЗаполнено(АдресДляОтправкиОтветовНаПриглашения) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан адрес для отправки ответов на приглашение.'");
	КонецЕсли;
	
	ПредставлениеМероприятие = РасширенноеПредставлениеСДатой(Мероприятие);
	
	// Принято приглашение
	ДанныеПриглашения = ДанныеПриглашения(Мероприятие);
	
	ДанныеПриглашения.Участники.Очистить();
	ДанныеУчастника = Новый Структура("Email, Представление, Состояние");
	ДанныеУчастника.Email = "%sender%";
	ДанныеУчастника.Представление = "%sender%";
	ДанныеУчастника.Состояние = Перечисления.СостоянияПриглашения.Принято;
	ДанныеПриглашения.Участники.Добавить(ДанныеУчастника);
	
	ТекстОтветаДляРезультата = РаботаСICalendar.ТекстПриглашения(ДанныеПриглашения, "REPLY");
	
	ТемаПисьма = СтрШаблон(
		НСтр("ru = 'Принято приглашение на %1'", КодЯзыка),
		ПредставлениеМероприятие);
	ОтветДаПриму = ВстроеннаяПочтаСервер.СформироватьСсылкуMailto(
		АдресДляОтправкиОтветовНаПриглашения,,,
		ТемаПисьма,
		ТекстОтветаДляРезультата,
		ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML"),
		НСтр("ru = 'Да, я приму участие'", КодЯзыка));
	
	// Отклонено приглашение
	ДанныеПриглашения = ДанныеПриглашения(Мероприятие);
	
	ДанныеПриглашения.Участники.Очистить();
	ДанныеУчастника = Новый Структура("Email, Представление, Состояние");
	ДанныеУчастника.Email = "%sender%";
	ДанныеУчастника.Представление = "%sender%";
	ДанныеУчастника.Состояние = Перечисления.СостоянияПриглашения.НеПринято;
	ДанныеПриглашения.Участники.Добавить(ДанныеУчастника);
	
	ТекстОтветаДляРезультата = РаботаСICalendar.ТекстПриглашения(ДанныеПриглашения, "REPLY");
	
	ТемаПисьма = СтрШаблон(
		НСтр("ru = 'Отклонено приглашение на %1'", КодЯзыка),
		ПредставлениеМероприятие);
	ОтветНетНеПриму = ВстроеннаяПочтаСервер.СформироватьСсылкуMailto(
		АдресДляОтправкиОтветовНаПриглашения,,,
		ТемаПисьма,
		ТекстОтветаДляРезультата,
		ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML"),
		НСтр("ru = 'Нет, я не приму участие'", КодЯзыка));
	
	ТекстПриглашенияСсылками =
		СтрШаблон(
			"%1
			|
			|%2
			|
			|%3
			|%4  /  %5",
		ПредупреждениеНеОтвечать,
		ТекстПриглашения,
		ВопросПримитеУчастие,
		ОтветДаПриму,
		ОтветНетНеПриму);
	
	Возврат ТекстПриглашенияСсылками;
	
КонецФункции

// Формирует текст отмены приглашения.
// 
// Параметры: Параметры - СправочникСсылка.Мероприятия - Параметры
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие
//  КодЯзыка - Строка.
// 
// Возвращаемое значение:
//  Строка - Текст отмены приглашения.
//  
Функция ТекстОтменыПриглашения(Мероприятие, КодЯзыка) Экспорт
	
	ТекстОтменыПриглашения = ТекстПриглашения(Мероприятие, КодЯзыка);
	
	Возврат ТекстОтменыПриглашения;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// Вызывается из РаботаСУведомлениями.ДоступныеУведомления() и дополняет
// доступные уведомления уведомлениями.
//
Процедура ПриПолученииДоступныхУведомлений(ДоступныеУведомления) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.МероприятияПриглашение;
	СтрокаУведомления.Представление = НСтр("ru = 'Мероприятия: приглашение'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.МероприятияИзменениеПриглашения;
	СтрокаУведомления.Представление = НСтр("ru = 'Мероприятия: изменение приглашения'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.МероприятияОтменаПриглашения;
	СтрокаУведомления.Представление = НСтр("ru = 'Мероприятия: отмена приглашения'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.МероприятияПринятоПриглашение;
	СтрокаУведомления.Представление = НСтр("ru = 'Мероприятия: принято приглашение'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.МероприятияОтклоненоПриглашение;
	СтрокаУведомления.Представление = НСтр("ru = 'Мероприятия: отклонено приглашение'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
КонецПроцедуры

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеКОД - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в подчиненном узле КОД.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина, для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Например:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработкаОтветовНаПриглашения;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьВнешниеПриглашения;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Отправляет отмену приглашение внешнему участнику.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  АдресаДляОтправкиПриглашений - Массив из Строка.
//
Процедура ОтправитьОтменуПриглашенийВнешнимУчастникам(Мероприятие, АдресаДляОтправкиПриглашений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если АдресаДляОтправкиПриглашений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьДляРаботыСПриглашениями =
		Константы.УчетнаяЗаписьДляРаботыСПриглашениями.Получить();
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьДляРаботыСПриглашениями) Тогда
		ВызватьИсключение НСтр("ru = 'Не указана учетная запись для работы с приглашениями.'");
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;
	
	ТемаОтменыПриглашения = ТемаОтменыПриглашения(Мероприятие, Неопределено);
	ПараметрыПисьма.Вставить("Тема", ТемаОтменыПриглашения);
	
	ТекстОтменыПриглашения = ТекстОтменыПриглашения(Мероприятие, Неопределено);
	ТекстУведомленияВHTML = РаботаСУведомлениями.ТекстУведомленияВHTML(ТекстОтменыПриглашения);
	ПараметрыПисьма.Вставить("Текст", ТекстУведомленияВHTML);
	
	Кому = СтрСоединить(АдресаДляОтправкиПриглашений, ";");
	ПараметрыПисьма.Вставить("Кому", Кому);
	
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
	
	ПараметрыПисьма.Вставить("Вложения", Новый Массив);
	ВложениеПриглашения = Новый Структура("Адрес, ИмяФайла");
	ВложениеПриглашения.Адрес = ДвоичныеДанныеПриглашения(Мероприятие, "CANCEL");
	ВложениеПриглашения.ИмяФайла = "invite.ics";
	ПараметрыПисьма.Вложения.Добавить(ВложениеПриглашения);
	
	ДанныеПриглашения = ДанныеПриглашения(Мероприятие);
	ТекстПриглашения = РаботаСICalendar.ТекстПриглашения(ДанныеПриглашения, "CANCEL");
	ПараметрыПисьма.Вставить("ПроизвольныйТекст", ТекстПриглашения);
	ПараметрыПисьма.Вставить("КодировкаПроизвольногоТекста", "utf-8");
	ПараметрыПисьма.Вставить("ПроизвольныйТипТекста", "text/calendar;method=CANCEL");
	
	СообщениеОбОшибке = "";
	ПриглашениеОтправлено = ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(
		ПараметрыПисьма,
		УчетнаяЗаписьДляРаботыСПриглашениями,
		Неопределено,
		СообщениеОбОшибке);
	Если Не ПриглашениеОтправлено Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Обработка ответов на приглашения'"),
		УровеньЖурналаРегистрации.Информация,,,
		СтрШаблон(
			НСтр("ru = 'Отправлен ICalendar CANCEL на адрес %1 с темой %2.'"),
			ПараметрыПисьма.Кому,
			ПараметрыПисьма.Тема));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает состояние мероприятия из бизнес-процесса.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс, из которого устанавливается состояние мероприятия.
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - Точка маршрута, из которой устанавливается
//                  состояние мероприятия.Текстовое описание параметра процедуры (функции).
//
Процедура УстановитьСостояниеМероприятияИзБизнесПроцесса(БизнесПроцесс, ТочкаМаршрута) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(БизнесПроцесс,, Истина);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Состояние = Неопределено;
		Мероприятие = Неопределено;
		ПунктПротокола = Неопределено;
		СостояниеПунктаПротокола = Неопределено;
		
		Если ЭтоМероприятие(Предмет) Тогда 
			Мероприятие = Предмет;
			
			Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда 
				
				Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Старт Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ЗапроситьМатериалы" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.МатериалыВыступающихЗапрошены;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПровестиМероприятие" Тогда
						Состояние = Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПодготовитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколГотовиться;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Завершение Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ЗапроситьМатериалы" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПолученыМатериалыВыступающих;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколИсполнен;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПровестиМероприятие" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.МероприятиеПроведено;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПодготовитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколПодготовлен;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Подготовка Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "СогласоватьПротокол" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "СогласоватьПротокол" Тогда 
						Если БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
							Состояние = Перечисления.СостоянияМероприятий.ПротоколНеСогласован;
						Иначе	
							Состояние = Перечисления.СостоянияМероприятий.ПротоколСогласован;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Подготовка Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПротокол" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНаУтверждении;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПрограмму" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПрограммаНаУтверждении;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПротокол" Тогда 
						Если БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
							Состояние = Перечисления.СостоянияМероприятий.ПротоколНеУтвержден;
						Иначе	
							Состояние = Перечисления.СостоянияМероприятий.ПротоколУтвержден;
						КонецЕсли;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПрограмму" Тогда 
						Если БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
							Состояние = Перечисления.СостоянияМероприятий.ПрограммаНеУтверждена;
						Иначе	
							Состояние = Перечисления.СостоянияМероприятий.ПрограммаУтверждена;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Ознакомление") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Старт Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ОзнакомитьСМатериалами" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.МатериалыОтправленыНаОзнакомление;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Завершение Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ОзнакомитьСМатериалами" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились;
					КонецЕсли;	
						
				КонецЕсли;
				
			КонецЕсли;	
			
			
		ИначеЕсли ЭтоПротоколМероприятия(Предмет, Мероприятие) Тогда 
			
			Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда 
				
				Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Старт Тогда 
					Состояние = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении;
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Завершение Тогда 	
					Состояние = Перечисления.СостоянияМероприятий.ПротоколИсполнен;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
				
				Если ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Подготовка Тогда 
					Состояние = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании;
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					Если БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНеСогласован;
					Иначе	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколСогласован;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Подготовка Тогда 
					Состояние = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании;
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					Если БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНеУтвержден;
					Иначе	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколУтвержден;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоПунктПротоколаМероприятия(Предмет, ПунктПротокола) Тогда
			
			Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда 
				
				Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Старт Тогда
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПунктПротокола" Тогда
						СостояниеПунктаПротокола = Перечисления.СостоянияПротоколовМероприятий.НаИсполнении;
					КонецЕсли;
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Завершение Тогда
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПунктПротокола" Тогда
						СостояниеПунктаПротокола = Перечисления.СостоянияПротоколовМероприятий.Исполнен;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Состояние <> Неопределено Или СостояниеПунктаПротокола <> Неопределено Тогда 
			
			БизнесПроцессСсылка = УправлениеДоступомДокументооборот.ПолучитьСсылкуОбъекта(БизнесПроцесс);
			
			Если Состояние <> Неопределено Тогда
				ЗаписатьСостояниеМероприятия(
					Мероприятие,
					ТекущаяДата(),
					Состояние,
					БизнесПроцессСсылка);
			КонецЕсли;
			
			Если СостояниеПунктаПротокола <> Неопределено Тогда
				ЗаписатьСостояниеПунктаПротоколаМероприятия(
					ПунктПротокола,
					ТекущаяДата(),
					СостояниеПунктаПротокола,
					БизнесПроцессСсылка,
					БизнесПроцессСсылка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик регламентного задания "Обработка ответов на приглашения".
//
Процедура ОбработкаОтветовНаПриглашения() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбработкаОтветовНаПриглашения,
		Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ТранзакцияАктивна() Тогда
		ТекстОшибки = НСтр("ru = 'Обработка ответов на приглашения не может выполняться во внешней транзакции.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Попытка
		
		УчетнаяЗаписьДляРаботыСПриглашениями =
			Константы.УчетнаяЗаписьДляРаботыСПриглашениями.Получить();
		Если Не ЗначениеЗаполнено(УчетнаяЗаписьДляРаботыСПриглашениями) Тогда
			ВызватьИсключение НСтр("ru = 'Не настроена учетная запись для работы с приглашениями.'");
		КонецЕсли;
		
		ПараметрыЗагрузкиПочтовыхСообщений = 
			ЛегкаяПочтаСервер.ПолучитьПараметрыЗагрузкиПочтовыхСообщений();
		ПараметрыЗагрузкиПочтовыхСообщений.Вставить(
			"НепрочитанныеСообщения", Истина);
		ПараметрыЗагрузкиПочтовыхСообщений.Вставить(
			"УникальныйИдентификатор", Новый УникальныйИдентификатор);
		
		ДоступныеПрофили = 
			ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.ДоступныеПрофили;
			
		ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено;
		
		Для Каждого СтруктураПрофиля Из ДоступныеПрофили Цикл
			
			Если СтруктураПрофиля.Профиль = УчетнаяЗаписьДляРаботыСПриглашениями Тогда
				
				ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = 
					СтруктураПрофиля;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не заданы настройки учетной записи для работы с приглашениями.'");
		КонецЕсли;
		
		Сообщения = ЛегкаяПочтаСервер.ПолучитьИнтернетПочта(ПараметрыЗагрузкиПочтовыхСообщений);
		
		Для Каждого Сообщение Из Сообщения Цикл
			
			НачатьТранзакцию();
			Попытка
			
				ОбработатьОтветНаПриглашение(Сообщение);
				
				ЛегкаяПочтаСервер.УдалитьСообщенияИнтернетПочта(
					УчетнаяЗаписьДляРаботыСПриглашениями,
					ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.Пароль,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сообщение.Идентификатор));
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				СообщениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обработка ответов на приглашения'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					СообщениеОбОшибке);
				
			КонецПопытки;
			
		КонецЦикла;
		
	Исключение
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обработка ответов на приглашения'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает соответствие имен элементов типов состояний мероприятий.
//
// Возвращаемое значение:
//  Соответствие - Соответствие состояний имен типов состояний мероприятий.
//
Функция ПолучитьСоответствиеИменТиповСостояний()
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("СостояниеМероприятия", "Мероприятия");
	Соответствие.Вставить("СостояниеПриглашений", "Приглашений");
	Соответствие.Вставить("СостояниеПрограммы", "Программы");
	Соответствие.Вставить("СостояниеМатериаловВыступающих", "МатериаловВыступающих");
	Соответствие.Вставить("СостояниеПротокола", "Протокола");
	
	Возврат Соответствие;
	
КонецФункции

// Возвращает тип состояния мероприятия по состоянию мероприятия.
//
// Параметры:
//  Состояние - Перечисления.СостоянияМероприятий - Состояние мероприятия, тип которого необходимо получить.
//
// Возвращаемое значение:
//  Строка - Тип состояния мероприятия.
//
Функция ПолучитьТипСостояния(Состояние)
	
	СоответствиеСостояний = УправлениеМероприятиямиКлиентСервер.ПолучитьСоответствиеСостояний();
	ТипСостояния = СоответствиеСостояний.Получить(Состояние);
	
	Возврат ТипСостояния;
	
КонецФункции

// Устанавливает состояние пункта протокола мероприятия.
//
// Параметры:
//  ПунктПротокола	 - СправочникСсылка.ПротоколыМероприятий		 - Пункт протокола, состояние которого будет установлено.
//  Период			 - Дата											 - Момент времени установки состояния.
//  Состояние		 - ПеречислениеСсылка.СостоянияПротоколовМероприятий - Состояние, которое будет установлено.
//  Установил		 - БизнесПроцессСсылка, СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники -
//                     Объект, который устанавливает состояние.
//  Исполнение		 - БизнесПроцессСсылка.Исполнение					 - Процесс, в котором происходит исполнение пункта протокола.
//
Процедура ЗаписатьСостояниеПунктаПротоколаМероприятия(ПунктПротокола, Период, Состояние,
	Установил, Исполнение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Состояние пункта протокола.
	ПунктПротоколаОбъект = ПунктПротокола.ПолучитьОбъект();
	
	СтароеСостояние = ПунктПротоколаОбъект.СостояниеИсполнения;
	
	ПунктПротоколаОбъект.СостояниеИсполнения = Состояние;
	ПунктПротоколаОбъект.СостояниеИсполненияУстановил = Установил;
	ПунктПротоколаОбъект.Исполнение = Исполнение;
	
	Если СтароеСостояние <> Перечисления.СостоянияПротоколовМероприятий.Исполнен
		И Состояние = Перечисления.СостоянияПротоколовМероприятий.Исполнен Тогда
		
		ПунктПротоколаОбъект.ДатаИсполнения = ТекущаяДатаСеанса();
		
	ИначеЕсли СтароеСостояние = Перечисления.СостоянияПротоколовМероприятий.Исполнен
		И Состояние <> Перечисления.СостоянияПротоколовМероприятий.Исполнен Тогда
		
		ПунктПротоколаОбъект.ДатаИсполнения = Дата(1, 1, 1);
		
	КонецЕсли;		
	
	ПунктПротоколаОбъект.Записать();
	
КонецПроцедуры

// Возвращает Истина, если переданное значение является пунктом протокола мероприятия, с учетом
// функциональной опции ИспользоватьУправлениеМероприятиями.
//
// Параметры:
//  Объект - Произвольный - Проверяемый объект.
//  ПунктПротокола - СправочникСсылка.ПротоколыМероприятий - Параметр, в который будет установлен объект, 
//                если он является пунктом протокола мероприятия.
//
// Возвращаемое значение:
//  Булево - Признак того является ли объект пунктом протокола мероприятия.
//
Функция ЭтоПунктПротоколаМероприятия(Объект, ПунктПротокола = Неопределено)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПунктПротокола = Объект;
	Возврат Истина;
	
КонецФункции

// Формирует двоичные данные приглашения.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  Метод - Строка.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные приглашения.
//
Функция ДвоичныеДанныеПриглашения(Мероприятие, Метод)
	
	ДанныеПриглашения = ДанныеПриглашения(Мероприятие);
	ТекстПриглашения = РаботаСICalendar.ТекстПриглашения(ДанныеПриглашения, Метод);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("ics");
	
	ФайлРезультата = Новый ТекстовыйДокумент;
	ФайлРезультата.УстановитьТекст(ТекстПриглашения);
	ФайлРезультата.Записать(
		ИмяВременногоФайла,
		"CESU-8",
		Символы.ВК + Символы.ПС);
	
	ДвоичныеДанныеПриглашения = Новый ДвоичныеДанные(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДвоичныеДанныеПриглашения;
	
КонецФункции

// Отправляет приглашение внешнему участнику.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
//  АдресаДляОтправкиПриглашений - Массив из Строка.
//
Процедура ОтправитьПриглашенияВнешнимУчастникам(Мероприятие, АдресаДляОтправкиПриглашений)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если АдресаДляОтправкиПриглашений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьДляРаботыСПриглашениями =
		Константы.УчетнаяЗаписьДляРаботыСПриглашениями.Получить();
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьДляРаботыСПриглашениями) Тогда
		ВызватьИсключение НСтр("ru = 'Не указана учетная запись для работы с приглашениями.'");
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;
	
	ТемаПриглашения = ТемаПриглашения(Мероприятие, Неопределено);
	ПараметрыПисьма.Вставить("Тема", ТемаПриглашения);
	
	ТекстПриглашенияСсылками = ТекстПриглашенияСсылками(Мероприятие, Неопределено);
	ТекстУведомленияВHTML = РаботаСУведомлениями.ТекстУведомленияВHTML(ТекстПриглашенияСсылками);
	ПараметрыПисьма.Вставить("Текст", ТекстУведомленияВHTML);
	
	Кому = СтрСоединить(АдресаДляОтправкиПриглашений, ";");
	ПараметрыПисьма.Вставить("Кому", Кому);
	
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
	
	ПараметрыПисьма.Вставить("Вложения", Новый Массив);
	ВложениеПриглашения = Новый Структура("Адрес, ИмяФайла");
	ВложениеПриглашения.Адрес = ДвоичныеДанныеПриглашения(Мероприятие, "REQUEST");
	ВложениеПриглашения.ИмяФайла = "invite.ics";
	ПараметрыПисьма.Вложения.Добавить(ВложениеПриглашения);
	
	ДанныеПриглашения = ДанныеПриглашения(Мероприятие);
	ТекстПриглашения = РаботаСICalendar.ТекстПриглашения(ДанныеПриглашения, "REQUEST");
	ПараметрыПисьма.Вставить("ПроизвольныйТекст", ТекстПриглашения);
	ПараметрыПисьма.Вставить("КодировкаПроизвольногоТекста", "utf-8");
	ПараметрыПисьма.Вставить("ПроизвольныйТипТекста", "text/calendar;method=REQUEST");
	
	СообщениеОбОшибке = "";
	ПриглашениеОтправлено = ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(
		ПараметрыПисьма,
		УчетнаяЗаписьДляРаботыСПриглашениями,
		Неопределено,
		СообщениеОбОшибке);
	Если Не ПриглашениеОтправлено Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Обработка ответов на приглашения'"),
		УровеньЖурналаРегистрации.Информация,,,
		СтрШаблон(
			НСтр("ru = 'Отправлен ICalendar REQUEST на адрес %1 с темой %2.'"),
			ПараметрыПисьма.Кому,
			ПараметрыПисьма.Тема));
	
КонецПроцедуры

// Формирует структуру данных приглашения.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
// 
// Возвращаемое значение:
//  Структура - Данные приглашения.
//   * ДатаНачала - Дата.
//   * ДатаОкончания - Дата.
//   * ДатаСоздания - Дата.
//   * ДатаИзменения - Дата.
//   * МестоПроведения - Строка.
//   * СостояниеМероприятия - ПеречислениеСсылка.СостоянияМероприятий.
//   * ОрганизаторEmail - Строка.
//   * Наименование - Строка.
//   * Серия - Число.
//   * ОрганизаторПредставление - Строка.
//   * УникальныйИдентификатор - УникальныйИдентификатор.
//   * Участники - Массив из Структура.
//     ** Email - Строка.
//     ** Представление - Строка.
//     ** Состояние - ПеречислениеСсылка.СостоянияПриглашения.
//  
Функция ДанныеПриглашения(Мероприятие)
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Мероприятие,
		"ДатаНачала, ДатаОкончания, ДатаСоздания, ДатаИзменения, Наименование,
		|МестоПроведения, Серия, Описание");
	УчастникиМероприятия = ПолучитьУчастниковМероприятия(Мероприятие);
	СостояниеМероприятия = ПолучитьСостояниеМероприятия(Мероприятие, "СостояниеМероприятия");
	
	УчетнаяЗаписьДляРаботыСПриглашениями = Константы.УчетнаяЗаписьДляРаботыСПриглашениями.Получить();
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьДляРаботыСПриглашениями) Тогда
		ВызватьИсключение НСтр("ru = 'Не указана учетная запись для работы с приглашениями.'");
	КонецЕсли;
	
	РеквизитыУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		УчетнаяЗаписьДляРаботыСПриглашениями,
		"АдресЭлектроннойПочты, ИмяПользователя");
	
	ДанныеПриглашения = Новый Структура(
		"ДатаНачала, ДатаОкончания, ДатаСоздания, ДатаИзменения,
		|Описание, Состояние, МестоПроведения, ОрганизаторEmail, Наименование,
		|ОрганизаторПредставление, УникальныйИдентификатор, Серия, Участники");
	ДанныеПриглашения.ДатаНачала = РеквизитыМероприятия.ДатаНачала;
	ДанныеПриглашения.ДатаОкончания = РеквизитыМероприятия.ДатаОкончания;
	ДанныеПриглашения.ДатаСоздания = РеквизитыМероприятия.ДатаСоздания;
	ДанныеПриглашения.ДатаИзменения = РеквизитыМероприятия.ДатаИзменения;
	ДанныеПриглашения.Наименование = РеквизитыМероприятия.Наименование;
	ДанныеПриглашения.Описание = РеквизитыМероприятия.Описание;
	ДанныеПриглашения.Состояние = СостояниеМероприятия;
	ДанныеПриглашения.МестоПроведения = РеквизитыМероприятия.МестоПроведения;
	ДанныеПриглашения.Серия = РеквизитыМероприятия.Серия;
	ДанныеПриглашения.ОрганизаторEmail = РеквизитыУчетнойЗаписи.АдресЭлектроннойПочты;
	ДанныеПриглашения.ОрганизаторПредставление = РеквизитыУчетнойЗаписи.ИмяПользователя;
	ДанныеПриглашения.УникальныйИдентификатор = Мероприятие.УникальныйИдентификатор();
	
	ДанныеПриглашения.Участники = Новый Массив;
	
	ДанныеУчастника = Новый Структура("Email, Представление, Состояние");
	ДанныеУчастника.Email = ДанныеПриглашения.ОрганизаторEmail;
	ДанныеУчастника.Представление = ДанныеПриглашения.ОрганизаторПредставление;
	ДанныеУчастника.Состояние = Перечисления.СостоянияПриглашения.Принято;
	
	ДанныеПриглашения.Участники.Добавить(ДанныеУчастника);
	
	Для Каждого СтрокаУчастника Из УчастникиМероприятия Цикл
		
		ДанныеУчастника = Новый Структура("Email, Представление, Состояние");
		ДанныеУчастника.Email = АдресДляОтправкиПриглашений(СтрокаУчастника.Исполнитель);
		ДанныеУчастника.Представление = Строка(СтрокаУчастника.Исполнитель);
		ДанныеУчастника.Состояние = СтрокаУчастника.СостояниеПриглашения;
		
		ДанныеПриглашения.Участники.Добавить(ДанныеУчастника);
		
	КонецЦикла;
	
	Возврат ДанныеПриглашения;
	
КонецФункции


// Обрабатывает ответ на приглашение.
// 
// Параметры:
//  Сообщение - Произвольный.
//
Процедура ОбработатьОтветНаПриглашение(Сообщение)
	
	АдресУчастника = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(
		Сообщение.Отправитель).Адрес;
	Если Не ЗначениеЗаполнено(АдресУчастника) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обработка ответов на приглашения'"),
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтрШаблон(
				НСтр("ru = 'Не удалось определить адрес участника %1 / %2.'"),
				АдресУчастника,
				Сообщение.Отправитель));
		Возврат;
	КонецЕсли;
	
	ТекстыICalendar = Новый Массив;
	
	ПозицияНачала = СтрНайти(
		Сообщение.Текст,
		"BEGIN:VCALENDAR");
	Если ПозицияНачала <> 0 Тогда
		
		ПозицияКонца = СтрНайти(
			Сообщение.Текст,
			"END:VCALENDAR",
			НаправлениеПоиска.СНачала,
			ПозицияНачала);
		Если ПозицияКонца <> 0 Тогда
			
			ТекстICalendar = Сред(
				Сообщение.Текст,
				ПозицияНачала,
				ПозицияКонца - ПозицияНачала + СтрДлина("END:VCALENDAR"));
			ТекстыICalendar.Добавить(ТекстICalendar);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		
		Если Вложение.Расширение <> "ics" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("ics");
		ДвоичныеДанныеВложения = ПолучитьИзВременногоХранилища(Вложение.Адрес);
		ДвоичныеДанныеВложения.Записать(ИмяВременногоФайла);
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		ТекстICalendar = ТекстовыйДокумент.ПолучитьТекст();
		ТекстыICalendar.Добавить(ТекстICalendar);
		
	КонецЦикла;
	
	ЕстьТекстыICalendar = ТекстыICalendar.Количество() > 0;
	Если Не ЕстьТекстыICalendar Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обработка ответов на приглашения'"),
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтрШаблон(
				НСтр("ru = 'Нет ответа на приглашение в письме с адреса %1.'"),
				АдресУчастника));
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекстICalendar Из ТекстыICalendar Цикл
		
		ТекстICalendarОбработан = ТекстICalendarОбработан(ТекстICalendar, АдресУчастника);
		Если ТекстICalendarОбработан Тогда
			Прервать;
		КонецЕсли;
		
		// Некоторые почтовые клиенты некорректно разбирают ссылку mailto,
		// в итоге обратно приходит служебный текст кодированный.
		СпособКодирования = ВстроеннаяПочтаСервер.СпособКодированияПараметраMailto("body");
		ТекстICalendarРаскодированный = РаскодироватьСтроку(ТекстICalendar, СпособКодирования);
		ТекстICalendarОбработан = ТекстICalendarОбработан(
			ТекстICalendarРаскодированный,
			АдресУчастника);
		Если ТекстICalendarОбработан Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает текст iCalendar.
// 
// Параметры:
//  ТекстICalendar - Строка.
//  АдресУчастника - Строка.
// 
// Возвращаемое значение:
//  Булево - Текст iCalendar обработан.
//
Функция ТекстICalendarОбработан(ТекстICalendar, АдресУчастника)
	
	СборкаСтроки = Новый Массив;
	СобранныеСтрокиICalendar = Новый Массив;
	Для Каждого ЧастичнаяСтрокаICalendar Из СтрРазделить(ТекстICalendar, Символы.ПС + Символы.ВК, Ложь) Цикл
		
		Если СтрНачинаетсяС(ЧастичнаяСтрокаICalendar, " ") Тогда
			
			СборкаСтроки.Добавить(Сред(ЧастичнаяСтрокаICalendar, 2));
			Продолжить;
			
		КонецЕсли;
		
		Если СборкаСтроки.Количество() > 0 Тогда 
			
			СобраннаяСтрокаICalendar = СтрСоединить(СборкаСтроки, "");
			СобраннаяСтрокаICalendar = СокрЛП(СобраннаяСтрокаICalendar);
			СобранныеСтрокиICalendar.Добавить(СобраннаяСтрокаICalendar);
			
			СборкаСтроки.Очистить();
			
		КонецЕсли;
		
		СборкаСтроки.Добавить(ЧастичнаяСтрокаICalendar);
		
	КонецЦикла;
	
	Если СборкаСтроки.Количество() > 0 Тогда 
		
		СобраннаяСтрокаICalendar = СтрСоединить(СборкаСтроки, "");
		СобранныеСтрокиICalendar.Добавить(СобраннаяСтрокаICalendar);
		
		СборкаСтроки.Очистить();
		
	КонецЕсли;
	
	METHOD = "";
	UID = "";
	ATTENDEE = "";
	PARTSTAT = "";
	Для Каждого СобраннаяСтрока Из СобранныеСтрокиICalendar Цикл
		
		ЧастиСобраннойСтроки = СтрРазделить(СобраннаяСтрока, ":");
		Если ЧастиСобраннойСтроки.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоЭлементов = ЧастиСобраннойСтроки.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			
			ОбратныйИндекс = КоличествоЭлементов - Индекс;
			Если ОбратныйИндекс = ЧастиСобраннойСтроки.ВГраница() Тогда
				Продолжить;
			КонецЕсли;
			
			ЧастьСтроки = ЧастиСобраннойСтроки[ОбратныйИндекс];
			
			Если Не СтрЗаканчиваетсяНа(НРег(ЧастьСтроки), "mailto") Тогда
				Продолжить;
			КонецЕсли;
			
			ЧастиСобраннойСтроки[ОбратныйИндекс] =
				СтрШаблон(
					"%1:%2",
					ЧастиСобраннойСтроки[ОбратныйИндекс],
					ЧастиСобраннойСтроки[ОбратныйИндекс + 1]);
			ЧастиСобраннойСтроки.Удалить(ОбратныйИндекс + 1);
			
		КонецЦикла;
		
		ПерваяЧасть = ЧастиСобраннойСтроки[0];
		ЧастиПервойЧасти = СтрРазделить(ПерваяЧасть, ";");
		
		КлючСтроки = ВРег(ЧастиПервойЧасти[0]);
		
		ПараметрыСтроки = Новый Соответствие;
		ЧастиПервойЧасти.Удалить(0);
		Для Каждого ЧастьПервойЧасти Из ЧастиПервойЧасти Цикл
			
			ЧастиПараметра = СтрРазделить(ЧастьПервойЧасти, "=");
			Если ЧастиПараметра.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
			
			КлючПараметра = ВРег(ЧастиПараметра[0]);
			ЗначениеПараметра = РаботаСICalendar.РаскодироватьСтрокуiCalendar(ЧастиПараметра[1]);
			
			ПараметрыСтроки.Вставить(КлючПараметра, ЗначениеПараметра);
			
		КонецЦикла;
		
		ЧастиСобраннойСтроки.Удалить(0);
		ВтораяЧасть = СтрСоединить(ЧастиСобраннойСтроки, ":");
		
		ЗначениеСтроки = РаботаСICalendar.РаскодироватьСтрокуiCalendar(ВтораяЧасть);
		
		Если КлючСтроки = "METHOD" И Не ЗначениеЗаполнено(METHOD) Тогда
			
			METHOD = ЗначениеСтроки;
			
		ИначеЕсли КлючСтроки = "UID" И Не ЗначениеЗаполнено(UID) Тогда
			
			UID = ЗначениеСтроки;
			
		ИначеЕсли КлючСтроки = "ATTENDEE" И Не ЗначениеЗаполнено(ATTENDEE) Тогда
			
			ATTENDEE = ЗначениеСтроки;
			PARTSTAT = ПараметрыСтроки["PARTSTAT"];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если METHOD <> "REPLY"  Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обработка ответов на приглашения'"),
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтрШаблон(
				НСтр("ru = 'Не найдено свойство METHOD:REPLY в письме с адреса %1. Найдено %2. Полный текст:
					|%3'"),
				АдресУчастника,
				METHOD,
				ТекстICalendar));
		Возврат Ложь;
	КонецЕсли;
	
	УникальныйИдентификаторСтрокой = Сред(UID, 1, 36);
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(УникальныйИдентификаторСтрокой) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обработка ответов на приглашения'"),
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтрШаблон(
				НСтр("ru = 'Не найден уникальный идентификатор в письме с адреса %1. Найдено %2. Полный текст:
					|%3'"),
				АдресУчастника,
				УникальныйИдентификаторСтрокой,
				ТекстICalendar));
		Возврат Ложь;
	КонецЕсли;
	
	УникальныйИдентификаторМероприятия =
		Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
	Мероприятие = Справочники.Мероприятия.ПолучитьСсылку(УникальныйИдентификаторМероприятия);
	МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
	Если МероприятиеОбъект = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обработка ответов на приглашения'"),
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтрШаблон(
				НСтр("ru = 'Не найдено приглашение %1, указанное в письме с адреса %2. Полный текст:
					|%3'"),
				UID,
				АдресУчастника,
				ТекстICalendar));
		Возврат Ложь;
	КонецЕсли;
	
	АдресаУчастникаИзПриглашения = СтрЗаменить(НРег(ATTENDEE), "mailto:", "");
	Если СтрНайти(АдресаУчастникаИзПриглашения, "%sender%") <> 0
		Или СтрНайти(АдресаУчастникаИзПриглашения, "%25sender%25") <> 0 Тогда
		АдресаУчастникаИзПриглашения = АдресУчастника;
	КонецЕсли;
	
	УчастникМероприятия = Неопределено;
	УчастникиМероприятия = ПолучитьУчастниковМероприятия(Мероприятие);
	Для Каждого СтрокаУчастника Из УчастникиМероприятия Цикл
		
		АдресСтроки = АдресДляОтправкиПриглашений(СтрокаУчастника.Исполнитель);
		Если НРег(АдресСтроки) <> НРег(АдресаУчастникаИзПриглашения) Тогда
			Продолжить;
		КонецЕсли;
		
		УчастникМероприятия = СтрокаУчастника.Исполнитель;
		Прервать;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(УчастникМероприятия) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обработка ответов на приглашения'"),
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтрШаблон(
				НСтр("ru = 'Не найден участник приглашения %1, указанный в письме с адреса %2. Полный текст:
					|%3'"),
				АдресаУчастникаИзПриглашения,
				АдресУчастника,
				ТекстICalendar));
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(PARTSTAT) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обработка ответов на приглашения'"),
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтрШаблон(
				НСтр("ru = 'Не указано состояние приглашения в письме с адреса %1. Полный текст:
					|%2'"),
				АдресУчастника,
				ТекстICalendar));
		Возврат Ложь;
	КонецЕсли;
	
	Если PARTSTAT = "ACCEPTED"
		Или PARTSTAT = "TENTATIVE"
		Или PARTSTAT = "DELEGATED" Тогда
		
		СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято;
		
	ИначеЕсли PARTSTAT = "DECLINED" Тогда
		
		СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято;
		
	Иначе
		
		СостояниеПриглашения = Перечисления.СостоянияПриглашения.Отправлено;
		
	КонецЕсли;
	
	РегистрыСведений.УчастникиМероприятия.ИзменитьСостояниеПриглашения(
		Мероприятие,
		УчастникМероприятия,
		СостояниеПриглашения);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Обработка ответов на приглашения'"),
		УровеньЖурналаРегистрации.Информация,,,
		СтрШаблон(
			НСтр("ru = 'Установлено состояние %1 участника %2 мероприятия %3 по письму с адреса %4.'"),
			СостояниеПриглашения,
			УчастникМероприятия,
			Мероприятие,
			АдресУчастника));
	
	Возврат Истина;
	
КонецФункции


// Определяет адрес для отправки ответов на приглашения.
// 
// Возвращаемое значение:
//  Строка - Адрес для отправки ответов на приглашения.
//  
Функция АдресДляОтправкиОтветовНаПриглашения()
	
	АдресДляОтправкиОтветовНаПриглашения = "";
	
	УчетнаяЗаписьДляРаботыСПриглашениями =
		Константы.УчетнаяЗаписьДляРаботыСПриглашениями.Получить();
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьДляРаботыСПриглашениями) Тогда
		Возврат АдресДляОтправкиОтветовНаПриглашения;
	КонецЕсли;
	
	АдресДляОтправкиОтветовНаПриглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		УчетнаяЗаписьДляРаботыСПриглашениями,
		"АдресЭлектроннойПочты");
	
	Возврат АдресДляОтправкиОтветовНаПриглашения;
	
КонецФункции

#КонецОбласти