#Область СлужебныйПрограммныйИнтерфейс

// Возвращает полное имя для файла в томе с учетом настроек
// хранения файлов в томах и значений разделителя.
//
// Параметры:
//   СвойстваФайла - см. СвойстваФайлаВТоме.
//   ДатаДляРазмещенияВТоме - Дата
//   
// Возвращаемое значение:
//   Строка
//
Функция ПолноеИмяФайлаВТоме(СвойстваФайла, ДатаДляРазмещенияВТоме = Неопределено) Экспорт
	
	Разделитель = ПолучитьРазделительПути();
	
	КорневойКаталог = ПолныйПутьТома(СвойстваФайла.Том);
	Если Не ПустаяСтрока(СвойстваФайла.ПутьКФайлу) Тогда
		Возврат КорневойКаталог + СвойстваФайла.ПутьКФайлу;
	КонецЕсли;
	
	КорневойКаталог = КорневойКаталог + ?(Прав(КорневойКаталог, 1) = Разделитель, "", Разделитель);
	Если СоздаватьПодкаталогиСИменамиВладельцев() Тогда
		КорневойКаталог = КорневойКаталог + ИмяКаталогаВладельцаФайла(СвойстваФайла.ВладелецФайла) + Разделитель;
	КонецЕсли;
	
	ДатаРазмещения = ?(ЗначениеЗаполнено(ДатаДляРазмещенияВТоме), ДатаДляРазмещенияВТоме, ТекущаяДатаСеанса());
	КорневойКаталог = КорневойКаталог + Формат(ДатаРазмещения, "ДФ=ггггММдд") + Разделитель;
	
	ИмяФайла = СвойстваФайла.Наименование
		+ ?(ЗначениеЗаполнено(СвойстваФайла.НомерВерсии), "." + СвойстваФайла.НомерВерсии, "")
		+ ?(СтрНайти(СвойстваФайла.Расширение, ".") > 0, СвойстваФайла.Расширение, "." + СвойстваФайла.Расширение);
	
	Возврат КорневойКаталог
		+ РаботаСФайламиСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(КорневойКаталог, ИмяФайла);
	
КонецФункции 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Возвращает полный путь к корневому каталогу тома хранения файлов.
//
// Параметры:
//   Том - СправочникСсылка.ТомаХраненияФайлов - том, путь к корневому каталогу которого необходимо получить.
//
// Возвращаемое значение:
//   КорневойКаталог - Строка - полный путь к корневому каталогу тома.
//
Функция ПолныйПутьТома(Том) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КорневойКаталог = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Том,
		?(ОбщегоНазначения.ЭтоWindowsСервер(), "ПолныйПутьWindows", "ПолныйПутьLinux"));
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ЗначениеРазделителя = ?(МодульРаботаВМоделиСервиса.ИспользованиеРазделителяСеанса(),
			МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "");
	Иначе
		ЗначениеРазделителя = "";
	КонецЕсли;
	
	Возврат СтрЗаменить(КорневойКаталог, "%z", ЗначениеРазделителя);
	
КонецФункции

// Возвращает признак того, что файлы в томах хранятся в подкаталогах с именем владельца.
//
// Возвращаемое значение:
//   Булево - Истина, если файлы в томе хранятся в подкаталогах с именем объекта-владельца, иначе - Ложь.
//
Функция СоздаватьПодкаталогиСИменамиВладельцев()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Ложь;
	
КонецФункции

// Возвращает имя подкаталога в томе по типу владельца файла.
// Имя подкаталога формируется как конкатенация 30 первых символов имени
// объекта метаданных владельца файла + хеш CRC32 от остатка.
//
// Параметры:
//   ВладелецФайла - ОпределяемыйТип.ВладелецПрисоединенныхФайлов
//                 - ОпределяемыйТип.ВладелецФайлов - ссылка на
//                 владельца файла, от метаданных которого необходимо образовать имя подкаталога.
//
// Возвращаемое значение:
//   Строка - имя каталога.
//
Функция ИмяКаталогаВладельцаФайла(ВладелецФайла)
	
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяОбъектаМетаданных = ВладелецФайла.Метаданные().Имя;
	Если СтрДлина(ИмяОбъектаМетаданных) > 30 Тогда
		ХешОстатка = Новый ХешированиеДанных(ХешФункция.CRC32);
		ХешОстатка.Добавить(Сред(ИмяОбъектаМетаданных, 31));
		ХешСуммаОстатка = ХешОстатка.ХешСумма;
	Иначе
		ХешСуммаОстатка = "";
	КонецЕсли;
	
	Возврат Лев(ИмяОбъектаМетаданных, 30) + ХешСуммаОстатка;
	
КонецФункции

#КонецОбласти
