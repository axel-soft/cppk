///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Переопределение настроек присоединенных файлов.
//
// Параметры:
//   Настройки - Структура:
//     * НеОчищатьФайлы - Массив из ОбъектМетаданных - объекты, файлы которых не должны выводиться в настройках очистки 
//                        файлов (например, служебные документы).
//     * НеСинхронизироватьФайлы - Массив из ОбъектМетаданных - объекты, файлы которых не должны выводиться в настройках 
//                        синхронизации с облачными сервисами (например, служебные документы).
//     * НеСоздаватьФайлыПоШаблону - Массив из ОбъектМетаданных - объекты, для файлов которых отключена возможность 
//                        создавать файлы по шаблонам.
//
// Пример:
//       Настройки.НеОчищатьФайлы.Добавить(Метаданные.Справочники._ДемоНоменклатура);
//       Настройки.НеСинхронизироватьФайлы.Добавить(Метаданные.Справочники._ДемоПартнеры);
//       Настройки.НеСоздаватьФайлыПоШаблону.Добавить(Метаданные.Справочники._ДемоПартнеры);
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
КонецПроцедуры

// Позволяет переопределить справочники хранения файлов по типам владельцев.
// 
// Параметры:
//  ТипВладелецФайла  - Тип - тип ссылки объекта, к которому добавляется файл.
//
//  ИменаСправочников - Соответствие из КлючИЗначение:
//    * Ключ - Строка     - имя справочника присоединенных файлов.
//    * Значение - Булево - установить в Истина, чтобы отметить этот справочник как основной. 
//                          Основной справочник используется для интерактивной работы с файлами. 
//
// Пример:
//       Если ТипВладелецФайла = Тип("СправочникСсылка._ДемоНоменклатура") Тогда
//       	ИменаСправочников["_ДемоНоменклатураПрисоединенныеФайлы"] = Ложь;
//       	ИменаСправочников.Вставить("Файлы", Истина);
//       КонецЕсли;
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
КонецПроцедуры

// Можно ли занять данный файл.
//
// Параметры:
//  ДанныеФайла    - см. РаботаСФайлами.ДанныеФайла.
//  ОписаниеОшибки - Строка - содержащая текст ошибки в случае невозможности занять.
//                   Если не пустая, тогда файл невозможно занять.
//
Процедура ПриПопыткеЗанятьФайл(ДанныеФайла, СтрокаОшибки = "") Экспорт

	Расширение = ДанныеФайла.Расширение;
	ВладелецФайла = ДанныеФайла.Владелец;
	
	Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Расширение) 
		И Не ДанныеФайла.Свойство("ОтредактироватьВWord_ФормаИнициатора")
		И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) Тогда
		Если СогласованиеВРежимеЗамечанийСервер.ЕстьНеЗавершенноеСогласованиеПоДокументу(ВладелецФайла) Тогда
			ВызватьИсключение НСтр("ru = 'Запрещено редактировать файл, по которому идет согласование. 
			|Можно только вносить замечания.'");
		КонецЕсли;	
	КонецЕсли;	
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда   
		
		Если ОбменЭДОДокументооборот.ДокументБлокированПоЭДО(ВладелецФайла, ДанныеФайла.Ссылка) Тогда
			
			СтрокаОшибки = НСтр("ru = 'Нельзя изменить файл документа, отправленного по ЭДО.'");
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	// проверка доступности файла в зависимости от состояния
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДанныеФайла) = Тип("СправочникСсылка.Файлы") Тогда 
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФайла, "ВладелецФайла");
	ИначеЕсли ТипЗнч(ДанныеФайла) = Тип("СправочникОбъект.Файлы") Тогда 	
		ВладелецФайла = ДанныеФайла.ВладелецФайла;
	ИначеЕсли ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда 
		ВладелецФайла = ДанныеФайла.Владелец;
	КонецЕсли;
	
	ЭтоБизнесПроцесс = ОбщегоНазначения.ЭтоБизнесПроцесс(ВладелецФайла.Метаданные());
	Если ЭтоБизнесПроцесс Тогда
		СостояниеБП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "Состояние");
		Если СостояниеБП <> Неопределено И СостояниеБП = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
			СтрокаОшибки = НСтр("ru = 'Невозможно начать редактирование файла, т.к. прерван бизнес-процесс по файлу.'");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоДокумент = ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла);
	Если ЭтоДокумент Тогда
		ДокументПодписанЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ПодписанЭП");
		Если ДокументПодписанЭП Тогда
			
			Если Не РегистрыСведений.СлужебныеФайлыДокументов.ЭтоСлужебныйФайл(ВладелецФайла, ДанныеФайла.Ссылка) Тогда 
				СтрокаОшибки = НСтр("ru = 'Нельзя изменить файл подписанного документа.'");
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не Делопроизводство.ПолеДокументаДоступноПоСостоянию("РедактированиеФайлов", ВладелецФайла) Тогда 
		СтрокаОшибки = НСтр("ru = 'Для текущего состояния документа запрещено изменение файлов.'");
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") 
		И ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла)
		И Делопроизводство.ФайлЯвляетсяОригиналом(ДанныеФайла.Ссылка)
		И Не РольДоступна("ПолныеПрава") Тогда 
		СтрокаОшибки = НСтр("ru = 'Запрещено изменение скан-копии оригинала документа.'");
		Возврат;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда
		
		СозданПоШаблонуДокумента 
			= РегистрыСведений.ФайлыСозданныеПоШаблону.ПолучитьФайлСозданПоШаблону(ДанныеФайла.Ссылка);
			
		Если СозданПоШаблонуДокумента Тогда
			
			ШаблонДокумента = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				ВладелецФайла, "Шаблон");
				
			ЗапретитьРедактироватьФайлы = Ложь;	
			
			Если ЗначениеЗаполнено(ШаблонДокумента)
				И ТипЗнч(ШаблонДокумента) = Тип("СправочникСсылка.ШаблоныДокументов") Тогда 
				
				ЗапретитьРедактироватьФайлы = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
					ШаблонДокумента, "ЗапретитьРедактироватьФайлы");
					
			КонецЕсли;		
				
			Если ЗапретитьРедактироватьФайлы Тогда
				
				СтрокаОшибки 
					= НСтр("ru = 'Файлы этого документа нельзя изменять вручную, 
					|можно только заполнить данными документа.'");
					
				Возврат;
				
			КонецЕсли;
					
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании файла
// Параметры
//  ДанныеФайла - СправочникСсылка.Файлы - ссылка на созданный файл
//    см. функцию РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла()
//
Процедура ПриСозданииФайла(ДанныеФайла) Экспорт
	
КонецПроцедуры

// Вызывается после копирования файла из исходного файла для заполнения таких реквизитов нового файла,
// которые самостоятельно добавлены к справочнику Файлы или ВерсииФайлов в конфигурации.
//
// Параметры:
//  НовыйФайл    - СправочникСсылка.Файлы - ссылка на новый файл, который надо заполнить.
//  ИсходныйФайл - СправочникСсылка.Файлы - ссылка на исходный файл, откуда надо скопировать реквизиты.
//
Процедура ЗаполнитьРеквизитыФайлаИзИсходногоФайла(НовыйФайл, ИсходныйФайл) Экспорт
	
КонецПроцедуры

// Вызывается при захвате файла
// Параметры
//  ДанныеФайла             - см. РаботаСФайлами.ДанныеФайла.
//  УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ПриЗахватеФайла(ДанныеФайла, УникальныйИдентификатор) Экспорт
	
КонецПроцедуры

// Вызывается при освобождении файла
// Параметры
//  ДанныеФайла             - см. РаботаСФайлами.ДанныеФайла.//  УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ПриОсвобожденииФайла(ДанныеФайла, УникальныйИдентификатор) Экспорт
	
КонецПроцедуры

// Можно ли удалить данный файл.
//
// Параметры:
//  ФайлОбъект - СправочникОбъект.Файлы
//  СтрокаОшибки - Строка
//
// Возвращаемое значение:
//  Булево. Возвращает всегда Истина для роли ПолныеПрава.
//
Функция ВозможноУдалитьФайл(ФайлОбъект, СтрокаОшибки = "") Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	// Если происходит удаление служебного файла в ходе манипуляций программы, то проверять не нужно
	Если ФайлОбъект.ДополнительныеСвойства.Свойство("УдалениеСлужебногоФайла")
		И ФайлОбъект.ДополнительныеСвойства.УдалениеСлужебногоФайла Тогда
		
		Возврат Истина;
	КонецЕсли;

	ВладелецФайла = ФайлОбъект.ВладелецФайла;
		
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда   
		
		Если ОбменЭДОДокументооборот.ДокументБлокированПоЭДО(ВладелецФайла, ФайлОбъект.Ссылка) Тогда
			
			СтрокаОшибки = НСтр("ru = 'Нельзя пометить на удаление файл документа, отправленного по ЭДО.'");
			Возврат Ложь;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПометкаУдаления = ФайлОбъект.ПометкаУдаления;
	
	ЗаписьПодписанногоОбъекта = Ложь;
	Если ФайлОбъект.ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
		ЗаписьПодписанногоОбъекта = ФайлОбъект.ДополнительныеСвойства.ЗаписьПодписанногоОбъекта;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ПодписанЭП")
		И Не ЗаписьПодписанногоОбъекта Тогда
		СтрокаОшибки = ?(ПометкаУдаления,
			НСтр("ru = 'Нельзя пометить на удаление файл подписанного документа.'"),
			НСтр("ru = 'Нельзя снять пометку на удаление с файла подписанного документа.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Делопроизводство.ПолеДокументаДоступноПоСостоянию("УдалениеФайлов", ВладелецФайла) Тогда 
		СтрокаОшибки = ?(ПометкаУдаления,
			НСтр("ru = 'Нельзя пометить файл на удаление.'"),
			НСтр("ru = 'Нельзя снять пометку удаления с файла.'"));
			
		//Определение состояний документа, для которых пользователь сможет менять пометку на удаление	
		СписокРазрешенных = Новый СписокЗначений;
		СписокЗапрещенных = Новый СписокЗначений;
		
		НастройкиСостояний = Делопроизводство.ПолучитьНастройкиСостояний(ВладелецФайла);
		Для Каждого НастройкаДоступности Из НастройкиСостояний Цикл 
			
			МассивСтрок = НастройкаДоступности.НастройкиДоступности.НайтиСтроки(
				Новый Структура("ИмяПоляКоманды", "УдалениеФайлов"));
			
			Для Каждого Строка Из МассивСтрок Цикл 
				Если Строка.Доступность = 1 // Да
					И СписокРазрешенных.НайтиПоЗначению(Строка.Состояние) = Неопределено Тогда 
					СписокРазрешенных.Добавить(Строка.Состояние);
				ИначеЕсли Строка.Доступность = 2 // Нет
					И СписокЗапрещенных.НайтиПоЗначению(Строка.Состояние) = Неопределено Тогда 
					СписокЗапрещенных.Добавить(Строка.Состояние);
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		
		Если СписокРазрешенных.Количество() > 0 Тогда 
			СписокРазрешенныхСтр = "";
			Для Каждого ЗначениеСписка Из СписокРазрешенных Цикл
				СписокРазрешенныхСтр = СписокРазрешенныхСтр + " - " + ЗначениеСписка.Значение + "," + Символы.ПС;
			КонецЦикла;
			СписокРазрешенныхСтр = Лев(СписокРазрешенныхСтр, СтрДлина(СписокРазрешенныхСтр) - 2);
			
			СписокЗапрещенныхСтр = "";
			Если СписокЗапрещенных.Количество() > 0 Тогда 
				Для Каждого ЗначениеСписка Из СписокЗапрещенных Цикл
					СписокЗапрещенныхСтр = СписокЗапрещенныхСтр + 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'не %1 и '"),
						НРег(ЗначениеСписка.Значение));
				КонецЦикла;
			КонецЕсли;	
				
			Если ПометкаУдаления Тогда 
				СтрокаОшибки = СтрокаОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '
					|Пометку удаления можно установить, если документ %1 находится в одном из состояний:
					|%2.'"), 
					Строка(ВладелецФайла),
					СписокРазрешенныхСтр);
			Иначе
				СтрокаОшибки = СтрокаОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '
					|Снятие пометки удаления возможно, если документ %1 находится в одном из состояний:
					|%2.'"), 
					Строка(ВладелецФайла),
					СписокРазрешенныхСтр);
			КонецЕсли;
				
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
	СозданПоШаблонуДокумента 
		= РегистрыСведений.ФайлыСозданныеПоШаблону.ПолучитьФайлСозданПоШаблону(ФайлОбъект.Ссылка);
		
	Если СозданПоШаблонуДокумента Тогда
		
		ШаблонДокумента = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			ВладелецФайла, "Шаблон");
			
		ЗапретитьУдалятьФайлы = Ложь;	
		
		Если ЗначениеЗаполнено(ШаблонДокумента)
			И ТипЗнч(ШаблонДокумента) = Тип("СправочникСсылка.ШаблоныДокументов") Тогда 
			
			ЗапретитьУдалятьФайлы = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				ШаблонДокумента, "ЗапретитьУдалятьФайлы");
				
		КонецЕсли;		
			
		Если ЗапретитьУдалятьФайлы И Не ФайлОбъект.ДополнительныеСвойства.Свойство("ЭтоПерезаполнение")
			И Не ФайлОбъект.ДополнительныеСвойства.Свойство("ПометкаУдаленияДокумента") Тогда
			
			СтрокаОшибки = НСтр("ru = 'Файлы этого документа нельзя пометить на удаление.'");				
			Возврат Ложь;
			
		КонецЕсли;
				
	КонецЕсли;		
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) Тогда
		
		РегистрационныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "РегистрационныйНомер"); 
		
		СостояниеОбработки = Неопределено;
		ТекущаяОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ВладелецФайла);
		Если ЗначениеЗаполнено(ТекущаяОбработкаОбъекта) Тогда 
			СостояниеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяОбработкаОбъекта, "Состояние");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РегистрационныйНомер) 
			Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется") Тогда
			
			РольФайла = Неопределено;
			РолиФайлаМассив = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ФайлОбъект.Ссылка);
			Если РолиФайлаМассив.Количество() <> 0 Тогда
				РольФайла = РолиФайлаМассив[0];
			КонецЕсли;	
			
			ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ВидДокумента");
			
			РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
			Если РолиФайлов.Количество() <> 0 И ЗначениеЗаполнено(РольФайла) Тогда
				
				Для Каждого СтрРоль Из РолиФайлов Цикл
					
					Если (СтрРоль.Обязательная Или СтрРоль.ТолькоОдинФайл)
						И СтрРоль.Роль = РольФайла Тогда
						
						СтрокаОшибки = СтрШаблон(НСтр("ru = 'Нельзя удалять файл с ролью ""%1"" 
							|у зарегистрированного или отправленного в обработку документа.'"), 
						СтрРоль.Роль);
						Возврат Ложь;
						
					КонецЕсли;	
					
				КонецЦикла;		
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПередЗаписьюФайла(Объект, Отказ) Экспорт 
	
КонецПроцедуры

// Функция ПометкаУдаленияРазрешена, при использовании ограничения
// пометки удаления проверяет, разрешена ли текущему пользователю
// пометка удаления папки файлов или файла.
// 
// Параметры:
//  Ссылка - СправочникСсылка.ПапкиФайлов
//		   - СправочникСсылка.Файлы -
//		   - ОпределяемыйТип.ВладелецФайлов -
//
// Возвращаемое значение:
//  Булево.
//
Функция ПометкаУдаленияРазрешена(Ссылка) Экспорт
	
	Если ПривилегированныйРежим() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка права на установку пометки удаления
	Возврат ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Ссылка).Удаление;
	
КонецФункции

// Можно ли сменить владельца данного файла.
//
// Параметры:
//  ФайлОбъект - СправочникОбъект.Файлы
//  СтрокаОшибки - Строка
//
// Возвращаемое значение:
//  Булево. Возвращает всегда Истина для роли ПолныеПрава.
//
Функция ВозможноСменитьВладельцаФайла(ФайлОбъект, СтрокаОшибки = "") Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ФайлОбъект.Ссылка, "ВладелецФайла");
		
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ШаблонДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ВладелецФайла, "Шаблон");
		
	Если ЗначениеЗаполнено(ШаблонДокумента) Тогда 
		
		ЗапретитьУдалятьФайлы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ШаблонДокумента, "ЗапретитьУдалятьФайлы");
			
		Если ЗапретитьУдалятьФайлы Тогда
				
			СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нельзя изменить владельца файла, принадлежащего документу, созданного по шаблону ""%1""'"),
				Строка(ШаблонДокумента));
				
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;		
	
	Возврат Истина;
	
КонецФункции

// Формирует массив метаданных, которые не должны выводиться в настройках очистки файлов.
//
// Параметры:
//   МассивИсключений   - Массив - метаданные, которые не должны выводиться в настройках очистки файлов.
//
// Например:
//   МассивИсключений.Добавить(Метаданные.Справочники.Файлы);
//
Процедура ПриОпределенииОбъектовИсключенияОчисткиФайлов(МассивИсключений) Экспорт
	
КонецПроцедуры

// Формирует массив метаданных, которые не должны выводиться в настройках синхронизации файлов.
//
// Параметры:
//   МассивИсключений   - Массив - метаданные, которые не должны выводиться в настройках синхронизации файлов.
//
// Например:
//   МассивИсключений.Добавить(Метаданные.Справочники.Файлы);
//
Процедура ПриОпределенииОбъектовИсключенияСинхронизацииФайлов(МассивИсключений) Экспорт
	
КонецПроцедуры

// Позволяет определить параметры электронного письма перед отправкой файла по почте.
//
// Параметры:
//  ФайлыДляОтправки  - Массив из ОпределяемыйТип.ПрисоединенныйФайл - список файлов для отправки.
//  ПараметрыОтправки - см. РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма.
//  ВладелецФайлов    - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - объект-владелец файлов.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор,
//                который необходимо использовать, есть требуется помещение данных во временное хранилище.
//
Процедура ПриОтправкеФайловПочтой(ПараметрыОтправки, ФайлыДляОтправки, ВладелецФайлов, УникальныйИдентификатор) Экспорт
	
	// _Демо начало примера
	
	// Добавление в текст письма списка приложенных файлов.
	
	СписокФайлов = Новый Массив;
	Для каждого ФайлДляОтправки Из ФайлыДляОтправки Цикл
		СписокФайлов.Добавить(ФайлДляОтправки.Наименование + "." + ФайлДляОтправки.Расширение);
	КонецЦикла;
	ПредставлениеСпискаФайлов = СтрСоединить(СписокФайлов, Символы.ПС);
	
	ШаблонПисьма = "
	|%1:
	|%2";
	ТекстПроФайлы = НСтр("ru='Список приложенных файлов'");
	
	ПараметрыОтправки.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПисьма, ТекстПроФайлы, ПредставлениеСпискаФайлов);
	
	// _Демо конец примера
	
КонецПроцедуры

// Позволяет определить параметры штампов электронной подписи в подписанном табличном документе.

//
// Параметры:
//  ПараметрыШтампа - Структура - возвращаемый параметр, со свойствами:
//      * ТекстОтметки         - Строка - описание расположения подлинника подписанного документа.
//      * Логотип              - Картинка - логотип, который будет выведен в штампе.
//  Сертификат      - СертификатКриптографии - сертификат, по которому формируется штамп электронной подписи.
//
Процедура ПриПечатиФайлаСоШтампом(ПараметрыШтампа, Сертификат) Экспорт
	
КонецПроцедуры

// Позволяет изменить стандартную форму списка файлов.
//
// Параметры:
//    Форма - ФормаКлиентскогоПриложения - форма списка файлов.
//
Процедура ПриСозданииФормыСпискаФайлов(Форма) Экспорт
	
КонецПроцедуры

// Позволяет изменить стандартную форму файла.
//
// Параметры:
//    Форма - ФормаКлиентскогоПриложения - форма файла.
//
Процедура ПриСозданииФормыЭлементаФайлов(Форма) Экспорт
	
КонецПроцедуры

// Позволяет изменить структуру параметров для размещения гиперссылки присоединенных файлов на форме.
//
// Параметры:
//  ПараметрыГиперссылки - см. РаботаСФайлами.ГиперссылкаФайлов.
//
// Пример:
//  ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
//
Процедура ПриОпределенииГиперссылкиФайлов(ПараметрыГиперссылки) Экспорт
	
КонецПроцедуры

#КонецОбласти