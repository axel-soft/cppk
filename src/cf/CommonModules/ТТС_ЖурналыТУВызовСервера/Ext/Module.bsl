
#Область СлужебныйПрограммныйИнтерфейс

Процедура УправлениеВидимостьюИДоступностью(Форма) Экспорт
	ВидДокумента = Форма.Объект.ВидДокумента;
	Если ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
	    Форма.Элементы.ТТС_ДанныеЖурналов.Видимость = Истина;
		Если ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал1 Тогда
			Форма.Элементы.ТТС_ЖурналТаблица.Видимость = Истина;
			Форма.Элементы.ТТС_ЖурналСписок.Видимость = Ложь;
			Форма.Элементы.ТТС_ОтметкиОПроверке.Видимость = Истина;
			Форма.Элементы.ТТС_ГруппаПроверено.Видимость = ВидимостьКнопкиПроверено(Форма.Объект.Ссылка);
			Форма.Элементы.ТТС_ИзменитьЖурнал.Видимость = ВидимостьКнопкиИзменить(Форма.Объект, Форма.ТТС_ДанныеЖурнала[0]);
			
			Если Форма.Элементы.Найти("ТТС_НомерПоезда") = Неопределено Тогда
	   			ДобавленныеРеквизиты = Новый Массив;
	   			ДобавленныеРеквизиты.Добавить(Новый РеквизитФормы("ТТС_НомерПоезда", Новый ОписаниеТипов("Строка"), "ДеревоСвязей", НСтр("ru = 'Номер поезда'")));
	   			Форма.ИзменитьРеквизиты(ДобавленныеРеквизиты);
				
	   			КолонкаНомерПоезда = Форма.Элементы.Добавить("ТТС_НомерПоезда", Тип("ПолеФормы"), Форма.Элементы.ДеревоСвязей); 
	   			КолонкаНомерПоезда.Вид = ВидПоляФормы.ПолеНадписи; 
	   			КолонкаНомерПоезда.ПутьКДанным = "ДеревоСвязей.ТТС_НомерПоезда";
			КонецЕсли;
			
		ИначеЕсли ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал2 Тогда
			Форма.Элементы.ТТС_ЖурналТаблица.Видимость = Ложь;
			Форма.Элементы.ТТС_ЖурналСписок.Видимость = Истина;
			
			Форма.Элементы.ТТС_ДанныеЖурналаМестоСлучая.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаПуть.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаКМ.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаПК.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаВремяНарушения.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаСкоростьПоезда.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаКодНарушения.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаУточнение.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаНормативныйДокумент.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаРезолюцияСБ.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаРезолюцияМИ.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаИнструктор.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаРезолюцияНачальникаДепо.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаНачальникДепо.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаХарактерПереключенияСветофора.Видимость = Ложь;
			Форма.Элементы.ТТС_ДанныеЖурналаРежимВеденияПоезда.Видимость = Ложь;
			Форма.Элементы.ТТС_ДанныеЖурналаЛитерГоловнойСекции.Видимость = Ложь;
			Форма.Элементы.ТТС_ОтметкиОПроверке.Видимость = Ложь;
			Форма.Элементы.ТТС_ГруппаПроверено.Видимость = Ложь;
			Форма.Элементы.ТТС_ИзменитьЖурнал.Видимость = Ложь;
		Иначе
			Форма.Элементы.ТТС_ЖурналТаблица.Видимость = Ложь;
			Форма.Элементы.ТТС_ЖурналСписок.Видимость = Истина;
			
			Форма.Элементы.ТТС_ДанныеЖурналаМестоСлучая.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаПуть.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаКМ.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаПК.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаВремяНарушения.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаСкоростьПоезда.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаКодНарушения.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаУточнение.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаНормативныйДокумент.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаРезолюцияСБ.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаРезолюцияМИ.Видимость = Ложь;
			Форма.Элементы.ТТС_ДанныеЖурналаИнструктор.Видимость = Ложь;
			Форма.Элементы.ТТС_ДанныеЖурналаРезолюцияНачальникаДепо.Видимость = Ложь;
			Форма.Элементы.ТТС_ДанныеЖурналаНачальникДепо.Видимость = Ложь;
			Форма.Элементы.ТТС_ДанныеЖурналаХарактерПереключенияСветофора.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаРежимВеденияПоезда.Видимость = Истина;
			Форма.Элементы.ТТС_ДанныеЖурналаЛитерГоловнойСекции.Видимость = Истина;
			Форма.Элементы.ТТС_ОтметкиОПроверке.Видимость = Ложь;			
			Форма.Элементы.ТТС_ГруппаПроверено.Видимость = Ложь;
			Форма.Элементы.ТТС_ИзменитьЖурнал.Видимость = Ложь;
		КонецЕсли;
		НовыйМассив = Новый Массив();			
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЭтоГруппа", Ложь);
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидЖурнала", ВидДокумента.ТТС_ВидЖурналаТУ);
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Форма.Элементы.ТТС_ДанныеЖурналаКодНарушения.ПараметрыВыбора = НовыеПараметры;
		
		Если ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомер) Тогда
			
			Форма.Элементы.ТТС_ЗарегистрироватьЗаднимЧислом.Заголовок =  НСтр("ru = 'Перерегистрировать на дату'");
			
			РолиПользователя = ПолучитьРолиПользователя(Сотрудники.ОсновнойСотрудник());
			
			Если НЕ РолиПользователя.СБ Тогда
				Форма.Элементы.ТТС_ЗарегистрироватьЗаднимЧислом.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.Элементы.Содержание.Видимость = Ложь;
		Форма.Элементы.КомментарийРеквизит.Видимость = Ложь;
		
		УстановитьДоступностьПолейЖурнала(Форма);
	Иначе
		Форма.Элементы.ТТС_ДанныеЖурналов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНаОсновании(Форма, Основание, ИДСтроки) Экспорт
	
	ВидДокумента = Форма.Объект.ВидДокумента;
	ВидДокументаОснования = Основание.ВидДокумента;
	
	Если ВидДокументаОснования.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал1 Тогда
		Если ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал2 
			ИЛИ ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал3 Тогда
			 
			ЗаполнитьДанныеЖурналов(Форма, Основание, ИДСтроки);
			
			Форма.ОснованиеВидДокумента = ВидДокументаОснования;
			
			Если Форма.ТТС_ДанныеЖурнала.Количество() > 0 Тогда
				ДанныеДепо = ТТС_ЖурналыТУВызовСервера.ПолучитьДанныеДепо(Форма.ТТС_ДанныеЖурнала[0].Направление);
				Форма.ТТС_ДанныеЖурнала[0].НачальникДепо = ДанныеДепо.НачальникДепо;
				Форма.Объект.Подразделение = ДанныеДепо.Депо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЖурналов(Форма, Источник = Неопределено, ИДСтроки = Неопределено) Экспорт
	Если Источник = Неопределено Тогда
		Источник = Форма.Объект;
	КонецЕсли;
	ВидДокумента = Форма.Объект.ВидДокумента;
	Если ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
		Если НЕ Источник.Ссылка.Пустая() Тогда
			Форма.ТТС_ДанныеЖурнала.Загрузить(РегистрыСведений.ТТС_ЖурналыТУ.ПолучитьДанныеЖурнала(Источник.Ссылка, ИДСтроки));
		КонецЕсли;
		Если Форма.ТТС_ДанныеЖурнала.Количество()=0 Тогда
			НоваяСтрока = Форма.ТТС_ДанныеЖурнала.Добавить();
			НоваяСтрока.ИДСтроки = Новый УникальныйИдентификатор;
			НоваяСтрока.ВидЖурнала = ВидДокумента.ТТС_ВидЖурналаТУ;
			Если ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал1 Тогда
				НоваяСтрока.ТехникПоРасшифровке = Пользователи.ТекущийПользователь();
			КонецЕсли;	
		КонецЕсли;
    КонецЕсли;
КонецПроцедуры

Функция ПолучитьШаблонЖТУ(ВидЖурналаСтр) Экспорт
	ШаблонЖТУ = Неопределено;
	Если ВидЖурналаСтр = "ЖТУ1" Тогда
		ВидЖурнала = Перечисления.ТТС_ВидыЖурналовТУ.Журнал1;
	ИначеЕсли ВидЖурналаСтр = "ЖТУ2" Тогда
		ВидЖурнала = Перечисления.ТТС_ВидыЖурналовТУ.Журнал2;
	Иначе
		ВидЖурнала = Перечисления.ТТС_ВидыЖурналовТУ.Журнал3;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШаблоныДокументов.Ссылка
	               |ИЗ
	               |	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
	               |ГДЕ
	               |	ШаблоныДокументов.ВидДокумента.ТТС_ЯвляетсяЖурналомТУ
	               |	И ШаблоныДокументов.ВидДокумента.ТТС_ВидЖурналаТУ = &ВидЖурналаТУ";
				   
	Запрос.УстановитьПараметр("ВидЖурналаТУ",ВидЖурнала);
	ШаблонВыборка = Запрос.Выполнить().Выбрать();
	Если ШаблонВыборка.Следующий() Тогда
		ШаблонЖТУ = ШаблонВыборка.Ссылка;
	КонецЕсли;
	Возврат ШаблонЖТУ;
КонецФункции

Процедура ПроверитьДанныеЖурнала(Объект, ДанныеЖурнала) Экспорт
	ВидДокумента = Объект.ВидДокумента;
	Если ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
		Если ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал2 Тогда
			КодНарушения = ДанныеЖурнала[0].КодНарушения;
			Если ЗначениеЗаполнено(КодНарушения) Тогда
				Если КодНарушения.ТребуетсяЖТУ3 Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо ввести журнал №3'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДанныеДепо(Направление) Экспорт
	ДанныеДепо = Новый Структура("Депо,НачальникДепо");
	Если ЗначениеЗаполнено(Направление) Тогда
		ДанныеДепо.Депо = Направление.Владелец;
		Если ЗначениеЗаполнено(Направление.Владелец) Тогда
			ДанныеДепо.НачальникДепо = Направление.Владелец.Руководитель;
		КонецЕсли;	
	КонецЕсли;
	Возврат ДанныеДепо;
КонецФункции

Функция ПолучитьРолиПользователя(Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ИСТИНА КАК Техник,
				|	NULL КАК СБ,
				|	NULL КАК МИ,
				|	NULL КАК НД,
				|	NULL КАК ООПС,
				|	NULL КАК ЖТУ
				|ПОМЕСТИТЬ втРоли
				|ИЗ
				|	РегистрСведений.ИсполнителиРолейИДелегаты КАК Исполнители
				|ГДЕ
				|	Исполнители.РольСотрудник.Владелец = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ТТС_Техник)
				|	И Исполнители.ИсполнительДелегат = &Пользователь
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	NULL,
				|	ИСТИНА,
				|	NULL,
				|	NULL,
				|	NULL,
				|	NULL
				|ИЗ
				|	РегистрСведений.ИсполнителиРолейИДелегаты КАК Исполнители
				|ГДЕ
				|	Исполнители.РольСотрудник.Владелец = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ТТС_СБ)
				|	И Исполнители.ИсполнительДелегат = &Пользователь
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	NULL,
				|	NULL,
				|	ИСТИНА,
				|	NULL,
				|	NULL,
				|	NULL
				|ИЗ
				|	РегистрСведений.ИсполнителиРолейИДелегаты КАК Исполнители
				|ГДЕ
				|	Исполнители.РольСотрудник.Владелец = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ТТС_МИ)
				|	И Исполнители.ИсполнительДелегат = &Пользователь
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	NULL,
				|	NULL,
				|	NULL,
				|	ИСТИНА,
				|	NULL,
				|	NULL
				|ИЗ
				|	РегистрСведений.ИсполнителиРолейИДелегаты КАК Исполнители
				|ГДЕ
				|	Исполнители.РольСотрудник.Владелец = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ТТС_НД)
				|	И Исполнители.ИсполнительДелегат = &Пользователь
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	NULL,
				|	NULL,
				|	NULL,
				|	NULL,
				|	ИСТИНА,
				|	NULL
				|ИЗ
				|	РегистрСведений.ИсполнителиРолейИДелегаты КАК Исполнители
				|ГДЕ
				|	Исполнители.РольСотрудник.Владелец = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ТТС_ООПС)
				|	И Исполнители.ИсполнительДелегат = &Пользователь
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	NULL,
				|	NULL,
				|	NULL,
				|	NULL,
				|	NULL,
				|	ИСТИНА
				|ИЗ
				|	РегистрСведений.ИсполнителиРолейИДелегаты КАК Исполнители
				|ГДЕ
				|	Исполнители.РольСотрудник.Владелец = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ТТС_ЖТУ)
				|	И Исполнители.ИсполнительДелегат = &Пользователь
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЕСТЬNULL(ВложенныйЗапрос.Техник, ЛОЖЬ) КАК Техник,
				|	ЕСТЬNULL(ВложенныйЗапрос.СБ, ЛОЖЬ) КАК СБ,
				|	ЕСТЬNULL(ВложенныйЗапрос.МИ, ЛОЖЬ) КАК МИ,
				|	ЕСТЬNULL(ВложенныйЗапрос.НД, ЛОЖЬ) КАК НД,
				|	ЕСТЬNULL(ВложенныйЗапрос.ООПС, ЛОЖЬ) КАК ООПС,
				|	ЕСТЬNULL(ВложенныйЗапрос.ЖТУ, ЛОЖЬ) КАК ЖТУ
				|ИЗ
				|	(ВЫБРАТЬ
				|		МАКСИМУМ(втРоли.Техник) КАК Техник,
				|		МАКСИМУМ(втРоли.СБ) КАК СБ,
				|		МАКСИМУМ(втРоли.МИ) КАК МИ,
				|		МАКСИМУМ(втРоли.НД) КАК НД,
				|		МАКСИМУМ(втРоли.ООПС) КАК ООПС,
				|		МАКСИМУМ(втРоли.ЖТУ) КАК ЖТУ
				|	ИЗ
				|		втРоли КАК втРоли) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	СтруктураРолей = Новый Структура("Техник,СБ,МИ,НД,ООПС,ЖТУ",Ложь,Ложь,Ложь,Ложь,Ложь,Ложь);
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	ЗаполнитьЗначенияСвойств(СтруктураРолей,Результат);
	
	Возврат СтруктураРолей;
	
КонецФункции

Функция ПолучитьРольПроверяющего(Пользователь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИсполнителиРолей.РольИсполнителя.Владелец КАК РольИсполнителя
	               |ИЗ
	               |	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
	               |ГДЕ
	               |	ИсполнителиРолей.РольИсполнителя.Владелец В (ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ТТС_СБ), ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ТТС_ГР), ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ТТС_АГР), ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ТТС_УЭПС), ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ТТС_НачальникЦРН))
	               |	И ИсполнителиРолей.Исполнитель = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Роль = Неопределено;
	Если Результат.Следующий() Тогда
		Роль = Результат.РольИсполнителя;
	КонецЕсли;	
	
	Возврат Роль;
КонецФункции

Процедура ПроверитьЗаполнениеПолейЖТУ(Объект, ЕстьОшибки, ТаблицаДанныхЖурнала = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "БизнесПроцесс") И 
		ТипЗнч(Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		//Это подзадача
		Возврат;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ОбрабатываемыеПредметы = Новый Массив;
		ОбрабатываемыеПредметы.Добавить(Объект);
	Иначе
		ТипыПредметов = Новый Массив;
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));
		ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект, ТипыПредметов, Истина);
	КонецЕсли;
	Результат = Ложь;
	Для каждого Предмет Из ОбрабатываемыеПредметы Цикл 	
		Если Предмет.ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
			Пользователь = Пользователи.ТекущийПользователь();
			Если ТаблицаДанныхЖурнала = Неопределено Тогда
				ТаблицаДанныхЖурнала = РегистрыСведений.ТТС_ЖурналыТУ.ПолучитьДанныеЖурнала(Предмет);
			КонецЕсли;
			Если ТаблицаДанныхЖурнала.Количество() > 0 Тогда
				Для Каждого ДанныеЖурнала Из ТаблицаДанныхЖурнала Цикл
					
					ТаблицаДоступаКПолям = ТаблицаДоступностиПолейЖурнала(Пользователь, Предмет, ДанныеЖурнала, Истина, Истина);
					Если ТаблицаДоступаКПолям = Неопределено Тогда
						//ТекстСообщения = НСтр("ru = 'У пользователя недостаточно прав для работы с журналом.'");
						//ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,);
						ЕстьОшибки = Истина;
						Возврат;
					КонецЕсли;
					
					Для Каждого ДоступКПолю Из ТаблицаДоступаКПолям Цикл
						Если ДоступКПолю.ПроверкаЗаполнения Тогда
							Если НЕ ЗначениеЗаполнено(ДанныеЖурнала[ДоступКПолю.Поле]) Тогда
								НомерСтроки = ДанныеЖурнала.ИндексСтроки+1;
								Окончание = НСтр("ru = 'журнале ТУ.'");
								Если ДоступКПолю.ТЧ Тогда
									Окончание = СтрШаблон(НСтр("ru = 'строке %1 журнала ТУ.'"), НомерСтроки);
								КонецЕсли; 
								ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнено поле %1 в %2'"), ДоступКПолю.Поле, Окончание);
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,);
								ЕстьОшибки = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла	
			Иначе	
				ЕстьОшибки = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ДобавленФайлМИ(Объект, ЕстьОшибки) Экспорт
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	Пользователь = Сотрудники.ОсновнойСотрудник();
	Роли = ПолучитьРолиПользователя(Сотрудники.ОсновнойСотрудник());
	Если Роли.МИ Тогда 
		ТипыПредметов = Новый Массив;
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));
		ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект, ТипыПредметов, Истина);
		ЗадачаПоЖурналуТУ =Ложь;
		Для каждого Предмет Из ОбрабатываемыеПредметы Цикл 	
			Если Предмет.ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
				ЗадачаПоЖурналуТУ = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если ЗадачаПоЖурналуТУ Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Файлы.Ссылка
			               |ИЗ
			               |	Справочник.Файлы КАК Файлы
			               |ГДЕ
			               |	Файлы.ВладелецФайла = &Документ
			               |	И Файлы.Автор = &Пользователь
			               |	И НЕ Файлы.ПометкаУдаления";
			Запрос.УстановитьПараметр("Документ", Предмет);
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
			Если НЕ Запрос.Выполнить().Выбрать().Следующий() Тогда
				ТекстСообщения = НСтр("ru = 'Не приложен файл разбора'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,);
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьЖурналОснование(ИДСтроки) Экспорт
	ЖурналОснование = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТТС_ЖурналыТУ.ВнутреннийДокумент КАК ВнутреннийДокумент
	               |ИЗ
	               |	РегистрСведений.ТТС_ЖурналыТУ КАК ТТС_ЖурналыТУ
	               |ГДЕ
	               |	ТТС_ЖурналыТУ.ИДСтроки = &ИДСтроки
	               |	И ТТС_ЖурналыТУ.ВидЖурнала = &ВидЖурнала
	               |	И НЕ ТТС_ЖурналыТУ.ВнутреннийДокумент.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИДСтроки", ИДСтроки);
	Запрос.УстановитьПараметр("ВидЖурнала", Перечисления.ТТС_ВидыЖурналовТУ.Журнал1);
	ВыборкаЖурнала = Запрос.Выполнить().Выбрать();
	Если ВыборкаЖурнала.Следующий() Тогда
		ЖурналОснование = ВыборкаЖурнала.ВнутреннийДокумент;
	КонецЕсли;
	Возврат ЖурналОснование;
КонецФункции

Функция ВидЖурнала(ВидДокумента) Экспорт
	ВидЖурнала = Новый Структура("Журнал1,Журнал2,Журнал3",Ложь,Ложь,Ложь);
	Если ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
		ВидЖурнала.Журнал1 = ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал1;
		ВидЖурнала.Журнал2 = ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал2;
		ВидЖурнала.Журнал3 = ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал3;
	КонецЕсли;	
	Возврат ВидЖурнала;
КонецФункции

Процедура УстановитьОтметкуОПроверке(Документ, СЗамечаниями, Замечание) Экспорт
	ДанныеПроверки = Новый Структура("ДатаПроверки,ВнутреннийДокумент,РольИсполнителя,Проверяющий,СЗамечаниями,Комментарий");
	Пользователь = Пользователи.ТекущийПользователь();
	РольПроверяющего = ПолучитьРольПроверяющего(Сотрудники.ОсновнойСотрудник());
	Если ЖурналПроверен(Документ, РольПроверяющего) Тогда
		ТекстСообщения = НСтр("ru = 'Журнал уже проверен'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,);
		Возврат;
	КонецЕсли;
	ДанныеПроверки.ДатаПроверки = ТекущаяДатаСеанса();
	ДанныеПроверки.ВнутреннийДокумент = Документ;
	ДанныеПроверки.РольИсполнителя = РольПроверяющего;
	ДанныеПроверки.Проверяющий = Пользователь;
	ДанныеПроверки.СЗамечаниями = СЗамечаниями;
	ДанныеПроверки.Комментарий = Замечание;
	РегистрыСведений.ТТС_ОтметкиОПроверкеЖурналов.ЗаписатьОтметкуОПроверке(ДанныеПроверки);
КонецПроцедуры

Функция ЖурналПроверен(Документ, РольПроверяющего) Экспорт
	Если РегистрыСведений.ТТС_ОтметкиОПроверкеЖурналов.ЕстьОтметкаОПроверке(Документ, РольПроверяющего) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ОткрытьЖурналДляРедактирования(Форма) Экспорт
	ТаблицаДоступаКПолям = ТаблицаДоступностиПолейЖурналаПоПрофилю("СБ", Форма.Объект, Форма.ТТС_ДанныеЖурнала[0]);
	УстановитьДоступностьПолейЖурналаПоТаблицеДоступа(Форма, ТаблицаДоступаКПолям)
КонецПроцедуры

Процедура УстановитьНомераПоездовВСвязях(Форма) Экспорт
	Если Форма.Объект.ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал1 Тогда
		УстановитьНомераПоездовВСвязяхРекурсивно(Форма.ДеревоСвязей.ПолучитьЭлементы());
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьНаправление(Объект) Экспорт
	СтруктураНаправление = Новый Структура("ТТС_Направление", Неопределено);
	Если ТипЗнч(Объект) = Тип("Структура") Тогда
		Объект = Объект.Ссылка;
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(СтруктураНаправление, Объект, "ТТС_Направление");
	Возврат СтруктураНаправление.ТТС_Направление;
КонецФункции

Функция ПроверитьПарольНаИзменениеЖурналовТУ(Пароль) Экспорт
	Возврат Пароль = Константы.ТТС_ПарольНаИзменениеЖурналовТУ.Получить();
КонецФункции

Функция ТекстОшибкиПроверкиНомераПоезда(Наименование) Экспорт
	
	СтрокаОшибки = "";
	
	Если НЕ (СтрокаСоответствуетРегулярномуВыражению(Наименование, "\d{4}")
		ИЛИ СтрокаСоответствуетРегулярномуВыражению(Наименование, "\d{4}\\\d{4}")
		ИЛИ СтрокаСоответствуетРегулярномуВыражению(Наименование, "\d{4}\\\d{4}\\\d{4}")) Тогда
		
		СтрокаОшибки = НСтр(
		"ru = 'Номер поезда должн быть корректно заполнен одним из следующих способов:
         |""1234"" или ""1234\567"" или ""1234\567\890""'");
		
	КонецЕсли;
	
	Возврат СтрокаОшибки;
	
КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции  
  
Функция ЕстьЗадачиПоЖурналу(Предмет, Исполнитель = Неопределено, РольИсполнителя = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ПредметыЗадач
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ВнутренниеДокументы
		|			ПО ПредметыЗадач.Предмет = ВнутренниеДокументы.Ссылка
		|		ПО Задачи.Ссылка = ПредметыЗадач.Ссылка
		|ГДЕ
		|	НЕ Задачи.Выполнена
		|	И НЕ Задачи.ПометкаУдаления
		|	И Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.Исполнение
		|	И Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ВнутренниеДокументы.Ссылка = &Предмет
		|	И ВЫБОР
		|			КОГДА &Исполнитель = НЕОПРЕДЕЛЕНО
		|				ТОГДА Задачи.РольИсполнителя.Владелец = &РольИсполнителя
		|			ИНАЧЕ Задачи.Исполнитель = &Исполнитель
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Запрос.Выполнить().Выбрать().Следующий();
	
КонецФункции

Функция ПолучитьПрофильДоступа(Пользователь, Объект, ДанныеЖурнала, ВыводитьОшибки = Ложь)
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат "Полный";
	КонецЕсли;	
	ТекущийПрофильДоступа = Неопределено;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	РолиПользователя = ПолучитьРолиПользователя(Сотрудники.ОсновнойСотрудник());
	Если Объект.Ссылка.Пустая() ИЛИ ПустаяСтрока(Объект.РегистрационныйНомер) Тогда
		Если РолиПользователя.Техник ИЛИ РолиПользователя.СБ Тогда
			ТекущийПрофильДоступа = "Техник";
		КонецЕсли;
	Иначе
		Если РолиПользователя.Техник Тогда
			ТекущийПрофильДоступа = "ТолькоКнопки";
		КонецЕсли;
		Если РолиПользователя.СБ Тогда
			Если ЕстьЗадачиПоЖурналу(Объект.Ссылка,,Справочники.РолиИсполнителей.ТТС_СБ) Тогда
				ТекущийПрофильДоступа = "СБ";
			Иначе
				ТекущийПрофильДоступа = "ТолькоКнопки";
			КонецЕсли;	
		Иначе 	
			Если РолиПользователя.ООПС И ЕстьЗадачиПоЖурналу(Объект.Ссылка,,Справочники.РолиИсполнителей.ТТС_ООПС) Тогда
				ТекущийПрофильДоступа = "ООПС";
			КонецЕсли;	
			Если РолиПользователя.МИ Тогда
				ТекущийПрофильДоступа = "МИ";
			КонецЕсли;	
			Если РолиПользователя.НД И ЗначениеЗаполнено(ДанныеЖурнала.РезолюцияМИ) Тогда
				ТекущийПрофильДоступа = "НД";
			КонецЕсли	
		КонецЕсли;
	КонецЕсли;
	
	
	//MDK
	// Горбачев А.В. 25.07.2024 - САНФ-027098
	// Убран вывод предупреждений, которые только вводили в заблуждение пользователя.
	// Елбашов Д.И. 05.08.2024 Вернул вывод предупреждений
	Если ТекущийПрофильДоступа = Неопределено И ВыводитьОшибки Тогда
		ТекстСообщения = "Нет доступа к действию. Для пользователя не указана одна из ролей: Техник, СБ, ООПС, МИ, НД...";
		Если Объект.Ссылка.Пустая() ИЛИ ПустаяСтрока(Объект.РегистрационныйНомер) Тогда
			ТекстСообщения = "Нет доступа к действию. Для пользователя не указана одна из ролей: Техник, СБ...";
		ИначеЕсли ВидЖурналаТУПоСсылке(Объект.Ссылка) = Перечисления.ТТС_ВидыЖурналовТУ.Журнал2
			И РолиПользователя.НД И НЕ ЗначениеЗаполнено(ДанныеЖурнала.РезолюцияМИ) Тогда
			ТекстСообщения = "Нет доступа к действию. В документе не выбрана резолюция МИ...";
		ИначеЕсли РолиПользователя.ООПС Тогда
			ТекстСообщения = "Нет доступа к действию. По роли ""ООПС"" нет задач...";	
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	//MDK
	
	Возврат ТекущийПрофильДоступа;
	
КонецФункции

Функция ВидЖурналаТУПоСсылке(Ссылка) Экспорт
	
	Если Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДокументов.ТТС_ВидЖурналаТУ КАК ТТС_ВидЖурналаТУ
	|ИЗ
	|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
	|		ПО ДокументыПредприятия.ВидДокумента = ВидыДокументов.Ссылка
	|ГДЕ
	|	ДокументыПредприятия.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ТТС_ВидЖурналаТУ;
	
КонецФункции

Функция ТаблицаДоступностиПолейЖурнала(Пользователь, Объект, ДанныеЖурнала, ОтказЕслиПрофильНеНайден = Ложь, ВыводитьОшибки = Ложь)
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	ПрофильДоступа = ПолучитьПрофильДоступа(Пользователь,Объект, ДанныеЖурнала, ВыводитьОшибки);
	
	Если ОтказЕслиПрофильНеНайден И ПрофильДоступа = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДоступности = ТаблицаДоступностиПолейЖурналаПоПрофилю(ПрофильДоступа, Объект, ДанныеЖурнала);
	
	ДополнитьТаблицаДоступности(ТаблицаДоступности);
	
	Возврат ТаблицаДоступности;
КонецФункции

Процедура ДополнитьТаблицаДоступности(ТаблицаДоступности)
	МассивОбязательныхПолей = МассивОбязательныхПолей();
	Для Каждого ОбязательноеПоле Из МассивОбязательныхПолей Цикл
		СтрокаДоступ = ТаблицаДоступности.Найти(ОбязательноеПоле,"Поле");
		Если СтрокаДоступ = Неопределено Тогда
			СтрокаДоступ = ТаблицаДоступности.Добавить();
			СтрокаДоступ.Поле = ОбязательноеПоле;
		КонецЕсли;
		СтрокаДоступ.ПроверкаЗаполнения = Истина;
	КонецЦикла;
КонецПроцедуры	

Функция МассивОбязательныхПолей()
	МассивОбязательныхПолей = Новый Массив;
	МассивОбязательныхПолей.Добавить("Направление");
	МассивОбязательныхПолей.Добавить("НомерМаршрута");
	МассивОбязательныхПолей.Добавить("НомерСкоростемера");
	МассивОбязательныхПолей.Добавить("Машинист");
	МассивОбязательныхПолей.Добавить("ДатаПоездки");
	МассивОбязательныхПолей.Добавить("СерияЛокомотива");
	МассивОбязательныхПолей.Добавить("НомерЛокомотива");
	МассивОбязательныхПолей.Добавить("НомерПоезда");
	МассивОбязательныхПолей.Добавить("СтанцияОтправления");
	МассивОбязательныхПолей.Добавить("СтанцияПрибытия");
	
	Возврат МассивОбязательныхПолей;
КонецФункции

Функция ТаблицаДоступностиПолейЖурналаПоПрофилю(ПрофильДоступа, Объект, ДанныеЖурнала)
	ВидЖурнала = ДанныеЖурнала.ВидЖурнала;
	
	ТаблицаДоступности = Новый ТаблицаЗначений;
	ТаблицаДоступности.Колонки.Добавить("Поле");
	ТаблицаДоступности.Колонки.Добавить("ЭлементФормы");
	ТаблицаДоступности.Колонки.Добавить("ТЧ");
	ТаблицаДоступности.Колонки.Добавить("Доступность");
	ТаблицаДоступности.Колонки.Добавить("ПроверкаЗаполнения");
	Макет = ПолучитьОбщийМакет("ТТС_ДоступностьПолейЖТУ");
	Если ВидЖурнала = Перечисления.ТТС_ВидыЖурналовТУ.Журнал1 Тогда
		ИмяОбластиЖурнал = "Журнал1";
	ИначеЕсли ВидЖурнала = Перечисления.ТТС_ВидыЖурналовТУ.Журнал2 Тогда
		ИмяОбластиЖурнал = "Журнал2";
	Иначе
		ИмяОбластиЖурнал = "Журнал3";
	КонецЕсли;
	
	ИмяОбластиПрофиль = "";
	Если НЕ ПрофильДоступа = Неопределено Тогда
		ИмяОбластиПрофиль = "|"+ПрофильДоступа;
	КонецЕсли;	
	ОбластьДанные = Макет.ПолучитьОбласть(ИмяОбластиЖурнал+ИмяОбластиПрофиль);
	ОбластьПоля = Макет.ПолучитьОбласть(ИмяОбластиЖурнал+"|C1:C3");
	
	КолВоПолей = ОбластьПоля.ВысотаТаблицы;
	Для НомерСтроки = 1 По КолВоПолей Цикл
		СтрокаДоступ = ТаблицаДоступности.Добавить();
		СтрокаДоступ.Поле = ОбластьПоля.Область(НомерСтроки,1).Текст;
		СтрокаДоступ.ЭлементФормы = ОбластьПоля.Область(НомерСтроки,2).Текст;
		СтрокаДоступ.ТЧ = ОбластьПоля.Область(НомерСтроки,3).Текст = "+";
		СтрокаДоступ.Доступность = Ложь;
		СтрокаДоступ.ПроверкаЗаполнения = Ложь;
		
		Если НЕ ПрофильДоступа = Неопределено Тогда
			Доступ = ОбластьДанные.Область(НомерСтроки,1).Текст;
			Если Доступ = "+" Тогда
				СтрокаДоступ.Доступность = Истина;
				СтрокаДоступ.ПроверкаЗаполнения = Истина;
			ИначеЕсли Доступ = "*" Тогда
				СтрокаДоступ.Доступность = Истина;
				СтрокаДоступ.ПроверкаЗаполнения = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаДоступности;
КонецФункции

Функция СтрокаСоответствуетРегулярномуВыражению(ПроверяемаяСтрока, РегулярноеВыражение)
	
	Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
    "<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
    |<package targetNamespace=""validator-package"">
    |<valueType name=""StringToValidate"" base=""xs:string"">
    |<pattern>" + РегулярноеВыражение + "</pattern>
    |</valueType>
    |<objectType name=""Validator"">
    |<property xmlns:d4p1=""validator-package"" name=""StringToValidate"" type=""d4p1:StringToValidate""/>
    |</objectType>
    |</package>
    |</Model>");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить("validator-package");
    Валидатор = МояФабрикаXDTO.Создать(Пакет.Получить("Validator"));

    Попытка
		
		Валидатор.StringToValidate = ПроверяемаяСтрока;
        Возврат Истина;
		
    Исключение
        Возврат Ложь;
    КонецПопытки;
		
КонецФункции
 
Процедура УстановитьНомераПоездовВСвязяхРекурсивно(ЭлементыДерева)
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если ЗначениеЗаполнено(Элемент.СвязанныйОбъект)
			И (Элемент.СвязанныйОбъект.ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал2 ИЛИ Элемент.СвязанныйОбъект.ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал3) Тогда
			
			ДанныеЖурнала = РегистрыСведений.ТТС_ЖурналыТУ.ПолучитьДанныеЖурнала(Элемент.СвязанныйОбъект);
			Если ДанныеЖурнала.Количество() > 0 Тогда
				Элемент.ТТС_НомерПоезда = "Поезд №"+ДанныеЖурнала[0].НомерПоезда;
			КонецЕсли;
		Иначе
			УстановитьНомераПоездовВСвязяхРекурсивно(Элемент.ПолучитьЭлементы());
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
 
Функция ВидимостьКнопкиПроверено(Документ)
	Доступность = Ложь;
	Если ЗначениеЗаполнено(Документ) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
		РольПроверяющего = ПолучитьРольПроверяющего(Сотрудники.ОсновнойСотрудник());
		Если НЕ РольПроверяющего = Неопределено Тогда
			Если НЕ РегистрыСведений.ТТС_ОтметкиОПроверкеЖурналов.ЕстьОтметкаОПроверке(Документ, РольПроверяющего) Тогда
				Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Доступность;
КонецФункции

Функция ВидимостьКнопкиИзменить(Объект, ДанныеЖурнала)
	Доступность = Ложь;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
		РолиПользователя = ПолучитьРолиПользователя(Сотрудники.ОсновнойСотрудник());
		ПрофильДоступа = ПолучитьПрофильДоступа(Пользователь, Объект, ДанныеЖурнала);
		//Если РолиПользователя.СБ И НЕ (ПрофильДоступа = "СБ" ИЛИ ПрофильДоступа = "Техник") Тогда
		Если РолиПользователя.ЖТУ Тогда
			Доступность = Истина;                           
		КонецЕсли;
	КонецЕсли;
	Возврат Доступность;
КонецФункции

Процедура УстановитьДоступностьПолейЖурнала(Форма)
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;	
	Пользователь = Пользователи.ТекущийПользователь();
	ТаблицаДоступаКПолям = ТаблицаДоступностиПолейЖурнала(Пользователь, Форма.Объект, Форма.ТТС_ДанныеЖурнала[0]);
	
	УстановитьДоступностьПолейЖурналаПоТаблицеДоступа(Форма, ТаблицаДоступаКПолям);
КонецПроцедуры

Процедура УстановитьДоступностьПолейЖурналаПоТаблицеДоступа(Форма, ТаблицаДоступаКПолям)
	Для Каждого ДоступКПолю Из ТаблицаДоступаКПолям Цикл
		Если НЕ ЗначениеЗаполнено(ДоступКПолю.ЭлементФормы) Тогда
			Продолжить;
		КонецЕсли;	
		Если ДоступКПолю.ПроверкаЗаполнения Тогда
			Если Форма.Элементы[ДоступКПолю.ЭлементФормы].Вид = ВидПоляФормы.ПолеВвода Тогда
				Форма.Элементы[ДоступКПолю.ЭлементФормы].АвтоОтметкаНезаполненного = Истина
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Форма.Элементы[ДоступКПолю.ЭлементФормы]) = Тип("ТаблицаФормы") Тогда
			Форма.Элементы[ДоступКПолю.ЭлементФормы].ТолькоПросмотр = НЕ ДоступКПолю.Доступность;
		ИначеЕсли НЕ ДоступКПолю.ТЧ Тогда
			Форма.Элементы[ДоступКПолю.ЭлементФормы].Доступность = ДоступКПолю.Доступность;
		Иначе
			Форма.Элементы[ДоступКПолю.ЭлементФормы].Доступность = Истина;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти 
